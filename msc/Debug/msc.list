
msc.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000772c  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000078  080078c4  080078c4  000178c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800793c  0800793c  00020164  2**0
                  CONTENTS
  4 .ARM          00000008  0800793c  0800793c  0001793c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007944  08007944  00020164  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007944  08007944  00017944  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007948  08007948  00017948  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000164  20000000  0800794c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000b74  20000164  08007ab0  00020164  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000cd8  08007ab0  00020cd8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020164  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ebde  00000000  00000000  00020194  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002e2f  00000000  00000000  0002ed72  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c38  00000000  00000000  00031ba8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ab8  00000000  00000000  000327e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019265  00000000  00000000  00033298  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000113ce  00000000  00000000  0004c4fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000875d9  00000000  00000000  0005d8cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e4ea4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002f8c  00000000  00000000  000e4ef4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000164 	.word	0x20000164
 80001b4:	00000000 	.word	0x00000000
 80001b8:	080078ac 	.word	0x080078ac

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000168 	.word	0x20000168
 80001d4:	080078ac 	.word	0x080078ac

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001ec:	f000 b974 	b.w	80004d8 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	468e      	mov	lr, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	d14d      	bne.n	80002b2 <__udivmoddi4+0xaa>
 8000216:	428a      	cmp	r2, r1
 8000218:	4694      	mov	ip, r2
 800021a:	d969      	bls.n	80002f0 <__udivmoddi4+0xe8>
 800021c:	fab2 f282 	clz	r2, r2
 8000220:	b152      	cbz	r2, 8000238 <__udivmoddi4+0x30>
 8000222:	fa01 f302 	lsl.w	r3, r1, r2
 8000226:	f1c2 0120 	rsb	r1, r2, #32
 800022a:	fa20 f101 	lsr.w	r1, r0, r1
 800022e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000232:	ea41 0e03 	orr.w	lr, r1, r3
 8000236:	4094      	lsls	r4, r2
 8000238:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800023c:	0c21      	lsrs	r1, r4, #16
 800023e:	fbbe f6f8 	udiv	r6, lr, r8
 8000242:	fa1f f78c 	uxth.w	r7, ip
 8000246:	fb08 e316 	mls	r3, r8, r6, lr
 800024a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800024e:	fb06 f107 	mul.w	r1, r6, r7
 8000252:	4299      	cmp	r1, r3
 8000254:	d90a      	bls.n	800026c <__udivmoddi4+0x64>
 8000256:	eb1c 0303 	adds.w	r3, ip, r3
 800025a:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 800025e:	f080 811f 	bcs.w	80004a0 <__udivmoddi4+0x298>
 8000262:	4299      	cmp	r1, r3
 8000264:	f240 811c 	bls.w	80004a0 <__udivmoddi4+0x298>
 8000268:	3e02      	subs	r6, #2
 800026a:	4463      	add	r3, ip
 800026c:	1a5b      	subs	r3, r3, r1
 800026e:	b2a4      	uxth	r4, r4
 8000270:	fbb3 f0f8 	udiv	r0, r3, r8
 8000274:	fb08 3310 	mls	r3, r8, r0, r3
 8000278:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800027c:	fb00 f707 	mul.w	r7, r0, r7
 8000280:	42a7      	cmp	r7, r4
 8000282:	d90a      	bls.n	800029a <__udivmoddi4+0x92>
 8000284:	eb1c 0404 	adds.w	r4, ip, r4
 8000288:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800028c:	f080 810a 	bcs.w	80004a4 <__udivmoddi4+0x29c>
 8000290:	42a7      	cmp	r7, r4
 8000292:	f240 8107 	bls.w	80004a4 <__udivmoddi4+0x29c>
 8000296:	4464      	add	r4, ip
 8000298:	3802      	subs	r0, #2
 800029a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800029e:	1be4      	subs	r4, r4, r7
 80002a0:	2600      	movs	r6, #0
 80002a2:	b11d      	cbz	r5, 80002ac <__udivmoddi4+0xa4>
 80002a4:	40d4      	lsrs	r4, r2
 80002a6:	2300      	movs	r3, #0
 80002a8:	e9c5 4300 	strd	r4, r3, [r5]
 80002ac:	4631      	mov	r1, r6
 80002ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b2:	428b      	cmp	r3, r1
 80002b4:	d909      	bls.n	80002ca <__udivmoddi4+0xc2>
 80002b6:	2d00      	cmp	r5, #0
 80002b8:	f000 80ef 	beq.w	800049a <__udivmoddi4+0x292>
 80002bc:	2600      	movs	r6, #0
 80002be:	e9c5 0100 	strd	r0, r1, [r5]
 80002c2:	4630      	mov	r0, r6
 80002c4:	4631      	mov	r1, r6
 80002c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ca:	fab3 f683 	clz	r6, r3
 80002ce:	2e00      	cmp	r6, #0
 80002d0:	d14a      	bne.n	8000368 <__udivmoddi4+0x160>
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d302      	bcc.n	80002dc <__udivmoddi4+0xd4>
 80002d6:	4282      	cmp	r2, r0
 80002d8:	f200 80f9 	bhi.w	80004ce <__udivmoddi4+0x2c6>
 80002dc:	1a84      	subs	r4, r0, r2
 80002de:	eb61 0303 	sbc.w	r3, r1, r3
 80002e2:	2001      	movs	r0, #1
 80002e4:	469e      	mov	lr, r3
 80002e6:	2d00      	cmp	r5, #0
 80002e8:	d0e0      	beq.n	80002ac <__udivmoddi4+0xa4>
 80002ea:	e9c5 4e00 	strd	r4, lr, [r5]
 80002ee:	e7dd      	b.n	80002ac <__udivmoddi4+0xa4>
 80002f0:	b902      	cbnz	r2, 80002f4 <__udivmoddi4+0xec>
 80002f2:	deff      	udf	#255	; 0xff
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	2a00      	cmp	r2, #0
 80002fa:	f040 8092 	bne.w	8000422 <__udivmoddi4+0x21a>
 80002fe:	eba1 010c 	sub.w	r1, r1, ip
 8000302:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000306:	fa1f fe8c 	uxth.w	lr, ip
 800030a:	2601      	movs	r6, #1
 800030c:	0c20      	lsrs	r0, r4, #16
 800030e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000312:	fb07 1113 	mls	r1, r7, r3, r1
 8000316:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800031a:	fb0e f003 	mul.w	r0, lr, r3
 800031e:	4288      	cmp	r0, r1
 8000320:	d908      	bls.n	8000334 <__udivmoddi4+0x12c>
 8000322:	eb1c 0101 	adds.w	r1, ip, r1
 8000326:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0x12a>
 800032c:	4288      	cmp	r0, r1
 800032e:	f200 80cb 	bhi.w	80004c8 <__udivmoddi4+0x2c0>
 8000332:	4643      	mov	r3, r8
 8000334:	1a09      	subs	r1, r1, r0
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb1 f0f7 	udiv	r0, r1, r7
 800033c:	fb07 1110 	mls	r1, r7, r0, r1
 8000340:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000344:	fb0e fe00 	mul.w	lr, lr, r0
 8000348:	45a6      	cmp	lr, r4
 800034a:	d908      	bls.n	800035e <__udivmoddi4+0x156>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000354:	d202      	bcs.n	800035c <__udivmoddi4+0x154>
 8000356:	45a6      	cmp	lr, r4
 8000358:	f200 80bb 	bhi.w	80004d2 <__udivmoddi4+0x2ca>
 800035c:	4608      	mov	r0, r1
 800035e:	eba4 040e 	sub.w	r4, r4, lr
 8000362:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000366:	e79c      	b.n	80002a2 <__udivmoddi4+0x9a>
 8000368:	f1c6 0720 	rsb	r7, r6, #32
 800036c:	40b3      	lsls	r3, r6
 800036e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000372:	ea4c 0c03 	orr.w	ip, ip, r3
 8000376:	fa20 f407 	lsr.w	r4, r0, r7
 800037a:	fa01 f306 	lsl.w	r3, r1, r6
 800037e:	431c      	orrs	r4, r3
 8000380:	40f9      	lsrs	r1, r7
 8000382:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000386:	fa00 f306 	lsl.w	r3, r0, r6
 800038a:	fbb1 f8f9 	udiv	r8, r1, r9
 800038e:	0c20      	lsrs	r0, r4, #16
 8000390:	fa1f fe8c 	uxth.w	lr, ip
 8000394:	fb09 1118 	mls	r1, r9, r8, r1
 8000398:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800039c:	fb08 f00e 	mul.w	r0, r8, lr
 80003a0:	4288      	cmp	r0, r1
 80003a2:	fa02 f206 	lsl.w	r2, r2, r6
 80003a6:	d90b      	bls.n	80003c0 <__udivmoddi4+0x1b8>
 80003a8:	eb1c 0101 	adds.w	r1, ip, r1
 80003ac:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003b0:	f080 8088 	bcs.w	80004c4 <__udivmoddi4+0x2bc>
 80003b4:	4288      	cmp	r0, r1
 80003b6:	f240 8085 	bls.w	80004c4 <__udivmoddi4+0x2bc>
 80003ba:	f1a8 0802 	sub.w	r8, r8, #2
 80003be:	4461      	add	r1, ip
 80003c0:	1a09      	subs	r1, r1, r0
 80003c2:	b2a4      	uxth	r4, r4
 80003c4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003c8:	fb09 1110 	mls	r1, r9, r0, r1
 80003cc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003d0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003d4:	458e      	cmp	lr, r1
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x1e2>
 80003d8:	eb1c 0101 	adds.w	r1, ip, r1
 80003dc:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80003e0:	d26c      	bcs.n	80004bc <__udivmoddi4+0x2b4>
 80003e2:	458e      	cmp	lr, r1
 80003e4:	d96a      	bls.n	80004bc <__udivmoddi4+0x2b4>
 80003e6:	3802      	subs	r0, #2
 80003e8:	4461      	add	r1, ip
 80003ea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003ee:	fba0 9402 	umull	r9, r4, r0, r2
 80003f2:	eba1 010e 	sub.w	r1, r1, lr
 80003f6:	42a1      	cmp	r1, r4
 80003f8:	46c8      	mov	r8, r9
 80003fa:	46a6      	mov	lr, r4
 80003fc:	d356      	bcc.n	80004ac <__udivmoddi4+0x2a4>
 80003fe:	d053      	beq.n	80004a8 <__udivmoddi4+0x2a0>
 8000400:	b15d      	cbz	r5, 800041a <__udivmoddi4+0x212>
 8000402:	ebb3 0208 	subs.w	r2, r3, r8
 8000406:	eb61 010e 	sbc.w	r1, r1, lr
 800040a:	fa01 f707 	lsl.w	r7, r1, r7
 800040e:	fa22 f306 	lsr.w	r3, r2, r6
 8000412:	40f1      	lsrs	r1, r6
 8000414:	431f      	orrs	r7, r3
 8000416:	e9c5 7100 	strd	r7, r1, [r5]
 800041a:	2600      	movs	r6, #0
 800041c:	4631      	mov	r1, r6
 800041e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000422:	f1c2 0320 	rsb	r3, r2, #32
 8000426:	40d8      	lsrs	r0, r3
 8000428:	fa0c fc02 	lsl.w	ip, ip, r2
 800042c:	fa21 f303 	lsr.w	r3, r1, r3
 8000430:	4091      	lsls	r1, r2
 8000432:	4301      	orrs	r1, r0
 8000434:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000440:	fb07 3610 	mls	r6, r7, r0, r3
 8000444:	0c0b      	lsrs	r3, r1, #16
 8000446:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800044a:	fb00 f60e 	mul.w	r6, r0, lr
 800044e:	429e      	cmp	r6, r3
 8000450:	fa04 f402 	lsl.w	r4, r4, r2
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x260>
 8000456:	eb1c 0303 	adds.w	r3, ip, r3
 800045a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800045e:	d22f      	bcs.n	80004c0 <__udivmoddi4+0x2b8>
 8000460:	429e      	cmp	r6, r3
 8000462:	d92d      	bls.n	80004c0 <__udivmoddi4+0x2b8>
 8000464:	3802      	subs	r0, #2
 8000466:	4463      	add	r3, ip
 8000468:	1b9b      	subs	r3, r3, r6
 800046a:	b289      	uxth	r1, r1
 800046c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000470:	fb07 3316 	mls	r3, r7, r6, r3
 8000474:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000478:	fb06 f30e 	mul.w	r3, r6, lr
 800047c:	428b      	cmp	r3, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x28a>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000488:	d216      	bcs.n	80004b8 <__udivmoddi4+0x2b0>
 800048a:	428b      	cmp	r3, r1
 800048c:	d914      	bls.n	80004b8 <__udivmoddi4+0x2b0>
 800048e:	3e02      	subs	r6, #2
 8000490:	4461      	add	r1, ip
 8000492:	1ac9      	subs	r1, r1, r3
 8000494:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000498:	e738      	b.n	800030c <__udivmoddi4+0x104>
 800049a:	462e      	mov	r6, r5
 800049c:	4628      	mov	r0, r5
 800049e:	e705      	b.n	80002ac <__udivmoddi4+0xa4>
 80004a0:	4606      	mov	r6, r0
 80004a2:	e6e3      	b.n	800026c <__udivmoddi4+0x64>
 80004a4:	4618      	mov	r0, r3
 80004a6:	e6f8      	b.n	800029a <__udivmoddi4+0x92>
 80004a8:	454b      	cmp	r3, r9
 80004aa:	d2a9      	bcs.n	8000400 <__udivmoddi4+0x1f8>
 80004ac:	ebb9 0802 	subs.w	r8, r9, r2
 80004b0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004b4:	3801      	subs	r0, #1
 80004b6:	e7a3      	b.n	8000400 <__udivmoddi4+0x1f8>
 80004b8:	4646      	mov	r6, r8
 80004ba:	e7ea      	b.n	8000492 <__udivmoddi4+0x28a>
 80004bc:	4620      	mov	r0, r4
 80004be:	e794      	b.n	80003ea <__udivmoddi4+0x1e2>
 80004c0:	4640      	mov	r0, r8
 80004c2:	e7d1      	b.n	8000468 <__udivmoddi4+0x260>
 80004c4:	46d0      	mov	r8, sl
 80004c6:	e77b      	b.n	80003c0 <__udivmoddi4+0x1b8>
 80004c8:	3b02      	subs	r3, #2
 80004ca:	4461      	add	r1, ip
 80004cc:	e732      	b.n	8000334 <__udivmoddi4+0x12c>
 80004ce:	4630      	mov	r0, r6
 80004d0:	e709      	b.n	80002e6 <__udivmoddi4+0xde>
 80004d2:	4464      	add	r4, ip
 80004d4:	3802      	subs	r0, #2
 80004d6:	e742      	b.n	800035e <__udivmoddi4+0x156>

080004d8 <__aeabi_idiv0>:
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop

080004dc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80004dc:	b480      	push	{r7}
 80004de:	b083      	sub	sp, #12
 80004e0:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80004e2:	2300      	movs	r3, #0
 80004e4:	607b      	str	r3, [r7, #4]
 80004e6:	4b10      	ldr	r3, [pc, #64]	; (8000528 <MX_GPIO_Init+0x4c>)
 80004e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004ea:	4a0f      	ldr	r2, [pc, #60]	; (8000528 <MX_GPIO_Init+0x4c>)
 80004ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80004f0:	6313      	str	r3, [r2, #48]	; 0x30
 80004f2:	4b0d      	ldr	r3, [pc, #52]	; (8000528 <MX_GPIO_Init+0x4c>)
 80004f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80004fa:	607b      	str	r3, [r7, #4]
 80004fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004fe:	2300      	movs	r3, #0
 8000500:	603b      	str	r3, [r7, #0]
 8000502:	4b09      	ldr	r3, [pc, #36]	; (8000528 <MX_GPIO_Init+0x4c>)
 8000504:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000506:	4a08      	ldr	r2, [pc, #32]	; (8000528 <MX_GPIO_Init+0x4c>)
 8000508:	f043 0301 	orr.w	r3, r3, #1
 800050c:	6313      	str	r3, [r2, #48]	; 0x30
 800050e:	4b06      	ldr	r3, [pc, #24]	; (8000528 <MX_GPIO_Init+0x4c>)
 8000510:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000512:	f003 0301 	and.w	r3, r3, #1
 8000516:	603b      	str	r3, [r7, #0]
 8000518:	683b      	ldr	r3, [r7, #0]

}
 800051a:	bf00      	nop
 800051c:	370c      	adds	r7, #12
 800051e:	46bd      	mov	sp, r7
 8000520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000524:	4770      	bx	lr
 8000526:	bf00      	nop
 8000528:	40023800 	.word	0x40023800

0800052c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800052c:	b580      	push	{r7, lr}
 800052e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000530:	f000 f90e 	bl	8000750 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000534:	f000 f806 	bl	8000544 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000538:	f7ff ffd0 	bl	80004dc <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 800053c:	f006 fcbc 	bl	8006eb8 <MX_USB_DEVICE_Init>
  //MX_USB_DEVICE_Init();
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000540:	e7fe      	b.n	8000540 <main+0x14>
	...

08000544 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000544:	b580      	push	{r7, lr}
 8000546:	b094      	sub	sp, #80	; 0x50
 8000548:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800054a:	f107 0320 	add.w	r3, r7, #32
 800054e:	2230      	movs	r2, #48	; 0x30
 8000550:	2100      	movs	r1, #0
 8000552:	4618      	mov	r0, r3
 8000554:	f007 f9a2 	bl	800789c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000558:	f107 030c 	add.w	r3, r7, #12
 800055c:	2200      	movs	r2, #0
 800055e:	601a      	str	r2, [r3, #0]
 8000560:	605a      	str	r2, [r3, #4]
 8000562:	609a      	str	r2, [r3, #8]
 8000564:	60da      	str	r2, [r3, #12]
 8000566:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000568:	2300      	movs	r3, #0
 800056a:	60bb      	str	r3, [r7, #8]
 800056c:	4b27      	ldr	r3, [pc, #156]	; (800060c <SystemClock_Config+0xc8>)
 800056e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000570:	4a26      	ldr	r2, [pc, #152]	; (800060c <SystemClock_Config+0xc8>)
 8000572:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000576:	6413      	str	r3, [r2, #64]	; 0x40
 8000578:	4b24      	ldr	r3, [pc, #144]	; (800060c <SystemClock_Config+0xc8>)
 800057a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800057c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000580:	60bb      	str	r3, [r7, #8]
 8000582:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000584:	2300      	movs	r3, #0
 8000586:	607b      	str	r3, [r7, #4]
 8000588:	4b21      	ldr	r3, [pc, #132]	; (8000610 <SystemClock_Config+0xcc>)
 800058a:	681b      	ldr	r3, [r3, #0]
 800058c:	4a20      	ldr	r2, [pc, #128]	; (8000610 <SystemClock_Config+0xcc>)
 800058e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000592:	6013      	str	r3, [r2, #0]
 8000594:	4b1e      	ldr	r3, [pc, #120]	; (8000610 <SystemClock_Config+0xcc>)
 8000596:	681b      	ldr	r3, [r3, #0]
 8000598:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800059c:	607b      	str	r3, [r7, #4]
 800059e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005a0:	2301      	movs	r3, #1
 80005a2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005a4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80005a8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005aa:	2302      	movs	r3, #2
 80005ac:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005ae:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80005b2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 80005b4:	2319      	movs	r3, #25
 80005b6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 80005b8:	23c0      	movs	r3, #192	; 0xc0
 80005ba:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005bc:	2302      	movs	r3, #2
 80005be:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80005c0:	2304      	movs	r3, #4
 80005c2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005c4:	f107 0320 	add.w	r3, r7, #32
 80005c8:	4618      	mov	r0, r3
 80005ca:	f001 fd9d 	bl	8002108 <HAL_RCC_OscConfig>
 80005ce:	4603      	mov	r3, r0
 80005d0:	2b00      	cmp	r3, #0
 80005d2:	d001      	beq.n	80005d8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80005d4:	f000 f81e 	bl	8000614 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005d8:	230f      	movs	r3, #15
 80005da:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005dc:	2302      	movs	r3, #2
 80005de:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005e0:	2300      	movs	r3, #0
 80005e2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80005e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005e8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005ea:	2300      	movs	r3, #0
 80005ec:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80005ee:	f107 030c 	add.w	r3, r7, #12
 80005f2:	2103      	movs	r1, #3
 80005f4:	4618      	mov	r0, r3
 80005f6:	f001 ffff 	bl	80025f8 <HAL_RCC_ClockConfig>
 80005fa:	4603      	mov	r3, r0
 80005fc:	2b00      	cmp	r3, #0
 80005fe:	d001      	beq.n	8000604 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000600:	f000 f808 	bl	8000614 <Error_Handler>
  }
}
 8000604:	bf00      	nop
 8000606:	3750      	adds	r7, #80	; 0x50
 8000608:	46bd      	mov	sp, r7
 800060a:	bd80      	pop	{r7, pc}
 800060c:	40023800 	.word	0x40023800
 8000610:	40007000 	.word	0x40007000

08000614 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000614:	b480      	push	{r7}
 8000616:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000618:	b672      	cpsid	i
}
 800061a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800061c:	e7fe      	b.n	800061c <Error_Handler+0x8>
	...

08000620 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000620:	b480      	push	{r7}
 8000622:	b083      	sub	sp, #12
 8000624:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000626:	2300      	movs	r3, #0
 8000628:	607b      	str	r3, [r7, #4]
 800062a:	4b10      	ldr	r3, [pc, #64]	; (800066c <HAL_MspInit+0x4c>)
 800062c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800062e:	4a0f      	ldr	r2, [pc, #60]	; (800066c <HAL_MspInit+0x4c>)
 8000630:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000634:	6453      	str	r3, [r2, #68]	; 0x44
 8000636:	4b0d      	ldr	r3, [pc, #52]	; (800066c <HAL_MspInit+0x4c>)
 8000638:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800063a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800063e:	607b      	str	r3, [r7, #4]
 8000640:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000642:	2300      	movs	r3, #0
 8000644:	603b      	str	r3, [r7, #0]
 8000646:	4b09      	ldr	r3, [pc, #36]	; (800066c <HAL_MspInit+0x4c>)
 8000648:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800064a:	4a08      	ldr	r2, [pc, #32]	; (800066c <HAL_MspInit+0x4c>)
 800064c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000650:	6413      	str	r3, [r2, #64]	; 0x40
 8000652:	4b06      	ldr	r3, [pc, #24]	; (800066c <HAL_MspInit+0x4c>)
 8000654:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000656:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800065a:	603b      	str	r3, [r7, #0]
 800065c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800065e:	bf00      	nop
 8000660:	370c      	adds	r7, #12
 8000662:	46bd      	mov	sp, r7
 8000664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000668:	4770      	bx	lr
 800066a:	bf00      	nop
 800066c:	40023800 	.word	0x40023800

08000670 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000670:	b480      	push	{r7}
 8000672:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000674:	e7fe      	b.n	8000674 <NMI_Handler+0x4>

08000676 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000676:	b480      	push	{r7}
 8000678:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800067a:	e7fe      	b.n	800067a <HardFault_Handler+0x4>

0800067c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800067c:	b480      	push	{r7}
 800067e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000680:	e7fe      	b.n	8000680 <MemManage_Handler+0x4>

08000682 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000682:	b480      	push	{r7}
 8000684:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000686:	e7fe      	b.n	8000686 <BusFault_Handler+0x4>

08000688 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000688:	b480      	push	{r7}
 800068a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800068c:	e7fe      	b.n	800068c <UsageFault_Handler+0x4>

0800068e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800068e:	b480      	push	{r7}
 8000690:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000692:	bf00      	nop
 8000694:	46bd      	mov	sp, r7
 8000696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800069a:	4770      	bx	lr

0800069c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800069c:	b480      	push	{r7}
 800069e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80006a0:	bf00      	nop
 80006a2:	46bd      	mov	sp, r7
 80006a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a8:	4770      	bx	lr

080006aa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80006aa:	b480      	push	{r7}
 80006ac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80006ae:	bf00      	nop
 80006b0:	46bd      	mov	sp, r7
 80006b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b6:	4770      	bx	lr

080006b8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80006bc:	f000 f89a 	bl	80007f4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80006c0:	bf00      	nop
 80006c2:	bd80      	pop	{r7, pc}

080006c4 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80006c8:	4802      	ldr	r0, [pc, #8]	; (80006d4 <OTG_FS_IRQHandler+0x10>)
 80006ca:	f000 fcbd 	bl	8001048 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80006ce:	bf00      	nop
 80006d0:	bd80      	pop	{r7, pc}
 80006d2:	bf00      	nop
 80006d4:	20000658 	.word	0x20000658

080006d8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80006d8:	b480      	push	{r7}
 80006da:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80006dc:	4b06      	ldr	r3, [pc, #24]	; (80006f8 <SystemInit+0x20>)
 80006de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80006e2:	4a05      	ldr	r2, [pc, #20]	; (80006f8 <SystemInit+0x20>)
 80006e4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80006e8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80006ec:	bf00      	nop
 80006ee:	46bd      	mov	sp, r7
 80006f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f4:	4770      	bx	lr
 80006f6:	bf00      	nop
 80006f8:	e000ed00 	.word	0xe000ed00

080006fc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80006fc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000734 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000700:	480d      	ldr	r0, [pc, #52]	; (8000738 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000702:	490e      	ldr	r1, [pc, #56]	; (800073c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000704:	4a0e      	ldr	r2, [pc, #56]	; (8000740 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000706:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000708:	e002      	b.n	8000710 <LoopCopyDataInit>

0800070a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800070a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800070c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800070e:	3304      	adds	r3, #4

08000710 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000710:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000712:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000714:	d3f9      	bcc.n	800070a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000716:	4a0b      	ldr	r2, [pc, #44]	; (8000744 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000718:	4c0b      	ldr	r4, [pc, #44]	; (8000748 <LoopFillZerobss+0x26>)
  movs r3, #0
 800071a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800071c:	e001      	b.n	8000722 <LoopFillZerobss>

0800071e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800071e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000720:	3204      	adds	r2, #4

08000722 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000722:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000724:	d3fb      	bcc.n	800071e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000726:	f7ff ffd7 	bl	80006d8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800072a:	f007 f893 	bl	8007854 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800072e:	f7ff fefd 	bl	800052c <main>
  bx  lr    
 8000732:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000734:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000738:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800073c:	20000164 	.word	0x20000164
  ldr r2, =_sidata
 8000740:	0800794c 	.word	0x0800794c
  ldr r2, =_sbss
 8000744:	20000164 	.word	0x20000164
  ldr r4, =_ebss
 8000748:	20000cd8 	.word	0x20000cd8

0800074c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800074c:	e7fe      	b.n	800074c <ADC_IRQHandler>
	...

08000750 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000754:	4b0e      	ldr	r3, [pc, #56]	; (8000790 <HAL_Init+0x40>)
 8000756:	681b      	ldr	r3, [r3, #0]
 8000758:	4a0d      	ldr	r2, [pc, #52]	; (8000790 <HAL_Init+0x40>)
 800075a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800075e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000760:	4b0b      	ldr	r3, [pc, #44]	; (8000790 <HAL_Init+0x40>)
 8000762:	681b      	ldr	r3, [r3, #0]
 8000764:	4a0a      	ldr	r2, [pc, #40]	; (8000790 <HAL_Init+0x40>)
 8000766:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800076a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800076c:	4b08      	ldr	r3, [pc, #32]	; (8000790 <HAL_Init+0x40>)
 800076e:	681b      	ldr	r3, [r3, #0]
 8000770:	4a07      	ldr	r2, [pc, #28]	; (8000790 <HAL_Init+0x40>)
 8000772:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000776:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000778:	2003      	movs	r0, #3
 800077a:	f000 f94f 	bl	8000a1c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800077e:	200f      	movs	r0, #15
 8000780:	f000 f808 	bl	8000794 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000784:	f7ff ff4c 	bl	8000620 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000788:	2300      	movs	r3, #0
}
 800078a:	4618      	mov	r0, r3
 800078c:	bd80      	pop	{r7, pc}
 800078e:	bf00      	nop
 8000790:	40023c00 	.word	0x40023c00

08000794 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	b082      	sub	sp, #8
 8000798:	af00      	add	r7, sp, #0
 800079a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800079c:	4b12      	ldr	r3, [pc, #72]	; (80007e8 <HAL_InitTick+0x54>)
 800079e:	681a      	ldr	r2, [r3, #0]
 80007a0:	4b12      	ldr	r3, [pc, #72]	; (80007ec <HAL_InitTick+0x58>)
 80007a2:	781b      	ldrb	r3, [r3, #0]
 80007a4:	4619      	mov	r1, r3
 80007a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007aa:	fbb3 f3f1 	udiv	r3, r3, r1
 80007ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80007b2:	4618      	mov	r0, r3
 80007b4:	f000 f967 	bl	8000a86 <HAL_SYSTICK_Config>
 80007b8:	4603      	mov	r3, r0
 80007ba:	2b00      	cmp	r3, #0
 80007bc:	d001      	beq.n	80007c2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80007be:	2301      	movs	r3, #1
 80007c0:	e00e      	b.n	80007e0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	2b0f      	cmp	r3, #15
 80007c6:	d80a      	bhi.n	80007de <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80007c8:	2200      	movs	r2, #0
 80007ca:	6879      	ldr	r1, [r7, #4]
 80007cc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80007d0:	f000 f92f 	bl	8000a32 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80007d4:	4a06      	ldr	r2, [pc, #24]	; (80007f0 <HAL_InitTick+0x5c>)
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80007da:	2300      	movs	r3, #0
 80007dc:	e000      	b.n	80007e0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80007de:	2301      	movs	r3, #1
}
 80007e0:	4618      	mov	r0, r3
 80007e2:	3708      	adds	r7, #8
 80007e4:	46bd      	mov	sp, r7
 80007e6:	bd80      	pop	{r7, pc}
 80007e8:	20000000 	.word	0x20000000
 80007ec:	20000008 	.word	0x20000008
 80007f0:	20000004 	.word	0x20000004

080007f4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80007f4:	b480      	push	{r7}
 80007f6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80007f8:	4b06      	ldr	r3, [pc, #24]	; (8000814 <HAL_IncTick+0x20>)
 80007fa:	781b      	ldrb	r3, [r3, #0]
 80007fc:	461a      	mov	r2, r3
 80007fe:	4b06      	ldr	r3, [pc, #24]	; (8000818 <HAL_IncTick+0x24>)
 8000800:	681b      	ldr	r3, [r3, #0]
 8000802:	4413      	add	r3, r2
 8000804:	4a04      	ldr	r2, [pc, #16]	; (8000818 <HAL_IncTick+0x24>)
 8000806:	6013      	str	r3, [r2, #0]
}
 8000808:	bf00      	nop
 800080a:	46bd      	mov	sp, r7
 800080c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000810:	4770      	bx	lr
 8000812:	bf00      	nop
 8000814:	20000008 	.word	0x20000008
 8000818:	20000180 	.word	0x20000180

0800081c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800081c:	b480      	push	{r7}
 800081e:	af00      	add	r7, sp, #0
  return uwTick;
 8000820:	4b03      	ldr	r3, [pc, #12]	; (8000830 <HAL_GetTick+0x14>)
 8000822:	681b      	ldr	r3, [r3, #0]
}
 8000824:	4618      	mov	r0, r3
 8000826:	46bd      	mov	sp, r7
 8000828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800082c:	4770      	bx	lr
 800082e:	bf00      	nop
 8000830:	20000180 	.word	0x20000180

08000834 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	b084      	sub	sp, #16
 8000838:	af00      	add	r7, sp, #0
 800083a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800083c:	f7ff ffee 	bl	800081c <HAL_GetTick>
 8000840:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000846:	68fb      	ldr	r3, [r7, #12]
 8000848:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800084c:	d005      	beq.n	800085a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800084e:	4b0a      	ldr	r3, [pc, #40]	; (8000878 <HAL_Delay+0x44>)
 8000850:	781b      	ldrb	r3, [r3, #0]
 8000852:	461a      	mov	r2, r3
 8000854:	68fb      	ldr	r3, [r7, #12]
 8000856:	4413      	add	r3, r2
 8000858:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800085a:	bf00      	nop
 800085c:	f7ff ffde 	bl	800081c <HAL_GetTick>
 8000860:	4602      	mov	r2, r0
 8000862:	68bb      	ldr	r3, [r7, #8]
 8000864:	1ad3      	subs	r3, r2, r3
 8000866:	68fa      	ldr	r2, [r7, #12]
 8000868:	429a      	cmp	r2, r3
 800086a:	d8f7      	bhi.n	800085c <HAL_Delay+0x28>
  {
  }
}
 800086c:	bf00      	nop
 800086e:	bf00      	nop
 8000870:	3710      	adds	r7, #16
 8000872:	46bd      	mov	sp, r7
 8000874:	bd80      	pop	{r7, pc}
 8000876:	bf00      	nop
 8000878:	20000008 	.word	0x20000008

0800087c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800087c:	b480      	push	{r7}
 800087e:	b085      	sub	sp, #20
 8000880:	af00      	add	r7, sp, #0
 8000882:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	f003 0307 	and.w	r3, r3, #7
 800088a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800088c:	4b0c      	ldr	r3, [pc, #48]	; (80008c0 <__NVIC_SetPriorityGrouping+0x44>)
 800088e:	68db      	ldr	r3, [r3, #12]
 8000890:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000892:	68ba      	ldr	r2, [r7, #8]
 8000894:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000898:	4013      	ands	r3, r2
 800089a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800089c:	68fb      	ldr	r3, [r7, #12]
 800089e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80008a0:	68bb      	ldr	r3, [r7, #8]
 80008a2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80008a4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80008a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80008ac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80008ae:	4a04      	ldr	r2, [pc, #16]	; (80008c0 <__NVIC_SetPriorityGrouping+0x44>)
 80008b0:	68bb      	ldr	r3, [r7, #8]
 80008b2:	60d3      	str	r3, [r2, #12]
}
 80008b4:	bf00      	nop
 80008b6:	3714      	adds	r7, #20
 80008b8:	46bd      	mov	sp, r7
 80008ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008be:	4770      	bx	lr
 80008c0:	e000ed00 	.word	0xe000ed00

080008c4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80008c4:	b480      	push	{r7}
 80008c6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80008c8:	4b04      	ldr	r3, [pc, #16]	; (80008dc <__NVIC_GetPriorityGrouping+0x18>)
 80008ca:	68db      	ldr	r3, [r3, #12]
 80008cc:	0a1b      	lsrs	r3, r3, #8
 80008ce:	f003 0307 	and.w	r3, r3, #7
}
 80008d2:	4618      	mov	r0, r3
 80008d4:	46bd      	mov	sp, r7
 80008d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008da:	4770      	bx	lr
 80008dc:	e000ed00 	.word	0xe000ed00

080008e0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80008e0:	b480      	push	{r7}
 80008e2:	b083      	sub	sp, #12
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	4603      	mov	r3, r0
 80008e8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80008ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	db0b      	blt.n	800090a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80008f2:	79fb      	ldrb	r3, [r7, #7]
 80008f4:	f003 021f 	and.w	r2, r3, #31
 80008f8:	4907      	ldr	r1, [pc, #28]	; (8000918 <__NVIC_EnableIRQ+0x38>)
 80008fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008fe:	095b      	lsrs	r3, r3, #5
 8000900:	2001      	movs	r0, #1
 8000902:	fa00 f202 	lsl.w	r2, r0, r2
 8000906:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800090a:	bf00      	nop
 800090c:	370c      	adds	r7, #12
 800090e:	46bd      	mov	sp, r7
 8000910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000914:	4770      	bx	lr
 8000916:	bf00      	nop
 8000918:	e000e100 	.word	0xe000e100

0800091c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800091c:	b480      	push	{r7}
 800091e:	b083      	sub	sp, #12
 8000920:	af00      	add	r7, sp, #0
 8000922:	4603      	mov	r3, r0
 8000924:	6039      	str	r1, [r7, #0]
 8000926:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000928:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800092c:	2b00      	cmp	r3, #0
 800092e:	db0a      	blt.n	8000946 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000930:	683b      	ldr	r3, [r7, #0]
 8000932:	b2da      	uxtb	r2, r3
 8000934:	490c      	ldr	r1, [pc, #48]	; (8000968 <__NVIC_SetPriority+0x4c>)
 8000936:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800093a:	0112      	lsls	r2, r2, #4
 800093c:	b2d2      	uxtb	r2, r2
 800093e:	440b      	add	r3, r1
 8000940:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000944:	e00a      	b.n	800095c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000946:	683b      	ldr	r3, [r7, #0]
 8000948:	b2da      	uxtb	r2, r3
 800094a:	4908      	ldr	r1, [pc, #32]	; (800096c <__NVIC_SetPriority+0x50>)
 800094c:	79fb      	ldrb	r3, [r7, #7]
 800094e:	f003 030f 	and.w	r3, r3, #15
 8000952:	3b04      	subs	r3, #4
 8000954:	0112      	lsls	r2, r2, #4
 8000956:	b2d2      	uxtb	r2, r2
 8000958:	440b      	add	r3, r1
 800095a:	761a      	strb	r2, [r3, #24]
}
 800095c:	bf00      	nop
 800095e:	370c      	adds	r7, #12
 8000960:	46bd      	mov	sp, r7
 8000962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000966:	4770      	bx	lr
 8000968:	e000e100 	.word	0xe000e100
 800096c:	e000ed00 	.word	0xe000ed00

08000970 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000970:	b480      	push	{r7}
 8000972:	b089      	sub	sp, #36	; 0x24
 8000974:	af00      	add	r7, sp, #0
 8000976:	60f8      	str	r0, [r7, #12]
 8000978:	60b9      	str	r1, [r7, #8]
 800097a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800097c:	68fb      	ldr	r3, [r7, #12]
 800097e:	f003 0307 	and.w	r3, r3, #7
 8000982:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000984:	69fb      	ldr	r3, [r7, #28]
 8000986:	f1c3 0307 	rsb	r3, r3, #7
 800098a:	2b04      	cmp	r3, #4
 800098c:	bf28      	it	cs
 800098e:	2304      	movcs	r3, #4
 8000990:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000992:	69fb      	ldr	r3, [r7, #28]
 8000994:	3304      	adds	r3, #4
 8000996:	2b06      	cmp	r3, #6
 8000998:	d902      	bls.n	80009a0 <NVIC_EncodePriority+0x30>
 800099a:	69fb      	ldr	r3, [r7, #28]
 800099c:	3b03      	subs	r3, #3
 800099e:	e000      	b.n	80009a2 <NVIC_EncodePriority+0x32>
 80009a0:	2300      	movs	r3, #0
 80009a2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009a4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80009a8:	69bb      	ldr	r3, [r7, #24]
 80009aa:	fa02 f303 	lsl.w	r3, r2, r3
 80009ae:	43da      	mvns	r2, r3
 80009b0:	68bb      	ldr	r3, [r7, #8]
 80009b2:	401a      	ands	r2, r3
 80009b4:	697b      	ldr	r3, [r7, #20]
 80009b6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80009b8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80009bc:	697b      	ldr	r3, [r7, #20]
 80009be:	fa01 f303 	lsl.w	r3, r1, r3
 80009c2:	43d9      	mvns	r1, r3
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009c8:	4313      	orrs	r3, r2
         );
}
 80009ca:	4618      	mov	r0, r3
 80009cc:	3724      	adds	r7, #36	; 0x24
 80009ce:	46bd      	mov	sp, r7
 80009d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d4:	4770      	bx	lr
	...

080009d8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	b082      	sub	sp, #8
 80009dc:	af00      	add	r7, sp, #0
 80009de:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	3b01      	subs	r3, #1
 80009e4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80009e8:	d301      	bcc.n	80009ee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80009ea:	2301      	movs	r3, #1
 80009ec:	e00f      	b.n	8000a0e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80009ee:	4a0a      	ldr	r2, [pc, #40]	; (8000a18 <SysTick_Config+0x40>)
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	3b01      	subs	r3, #1
 80009f4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80009f6:	210f      	movs	r1, #15
 80009f8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80009fc:	f7ff ff8e 	bl	800091c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a00:	4b05      	ldr	r3, [pc, #20]	; (8000a18 <SysTick_Config+0x40>)
 8000a02:	2200      	movs	r2, #0
 8000a04:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a06:	4b04      	ldr	r3, [pc, #16]	; (8000a18 <SysTick_Config+0x40>)
 8000a08:	2207      	movs	r2, #7
 8000a0a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000a0c:	2300      	movs	r3, #0
}
 8000a0e:	4618      	mov	r0, r3
 8000a10:	3708      	adds	r7, #8
 8000a12:	46bd      	mov	sp, r7
 8000a14:	bd80      	pop	{r7, pc}
 8000a16:	bf00      	nop
 8000a18:	e000e010 	.word	0xe000e010

08000a1c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	b082      	sub	sp, #8
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000a24:	6878      	ldr	r0, [r7, #4]
 8000a26:	f7ff ff29 	bl	800087c <__NVIC_SetPriorityGrouping>
}
 8000a2a:	bf00      	nop
 8000a2c:	3708      	adds	r7, #8
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	bd80      	pop	{r7, pc}

08000a32 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000a32:	b580      	push	{r7, lr}
 8000a34:	b086      	sub	sp, #24
 8000a36:	af00      	add	r7, sp, #0
 8000a38:	4603      	mov	r3, r0
 8000a3a:	60b9      	str	r1, [r7, #8]
 8000a3c:	607a      	str	r2, [r7, #4]
 8000a3e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000a40:	2300      	movs	r3, #0
 8000a42:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000a44:	f7ff ff3e 	bl	80008c4 <__NVIC_GetPriorityGrouping>
 8000a48:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000a4a:	687a      	ldr	r2, [r7, #4]
 8000a4c:	68b9      	ldr	r1, [r7, #8]
 8000a4e:	6978      	ldr	r0, [r7, #20]
 8000a50:	f7ff ff8e 	bl	8000970 <NVIC_EncodePriority>
 8000a54:	4602      	mov	r2, r0
 8000a56:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000a5a:	4611      	mov	r1, r2
 8000a5c:	4618      	mov	r0, r3
 8000a5e:	f7ff ff5d 	bl	800091c <__NVIC_SetPriority>
}
 8000a62:	bf00      	nop
 8000a64:	3718      	adds	r7, #24
 8000a66:	46bd      	mov	sp, r7
 8000a68:	bd80      	pop	{r7, pc}

08000a6a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a6a:	b580      	push	{r7, lr}
 8000a6c:	b082      	sub	sp, #8
 8000a6e:	af00      	add	r7, sp, #0
 8000a70:	4603      	mov	r3, r0
 8000a72:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000a74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a78:	4618      	mov	r0, r3
 8000a7a:	f7ff ff31 	bl	80008e0 <__NVIC_EnableIRQ>
}
 8000a7e:	bf00      	nop
 8000a80:	3708      	adds	r7, #8
 8000a82:	46bd      	mov	sp, r7
 8000a84:	bd80      	pop	{r7, pc}

08000a86 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000a86:	b580      	push	{r7, lr}
 8000a88:	b082      	sub	sp, #8
 8000a8a:	af00      	add	r7, sp, #0
 8000a8c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000a8e:	6878      	ldr	r0, [r7, #4]
 8000a90:	f7ff ffa2 	bl	80009d8 <SysTick_Config>
 8000a94:	4603      	mov	r3, r0
}
 8000a96:	4618      	mov	r0, r3
 8000a98:	3708      	adds	r7, #8
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	bd80      	pop	{r7, pc}
	...

08000aa0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000aa0:	b480      	push	{r7}
 8000aa2:	b089      	sub	sp, #36	; 0x24
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	6078      	str	r0, [r7, #4]
 8000aa8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000aaa:	2300      	movs	r3, #0
 8000aac:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000aae:	2300      	movs	r3, #0
 8000ab0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	61fb      	str	r3, [r7, #28]
 8000aba:	e159      	b.n	8000d70 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000abc:	2201      	movs	r2, #1
 8000abe:	69fb      	ldr	r3, [r7, #28]
 8000ac0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ac4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000ac6:	683b      	ldr	r3, [r7, #0]
 8000ac8:	681b      	ldr	r3, [r3, #0]
 8000aca:	697a      	ldr	r2, [r7, #20]
 8000acc:	4013      	ands	r3, r2
 8000ace:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000ad0:	693a      	ldr	r2, [r7, #16]
 8000ad2:	697b      	ldr	r3, [r7, #20]
 8000ad4:	429a      	cmp	r2, r3
 8000ad6:	f040 8148 	bne.w	8000d6a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000ada:	683b      	ldr	r3, [r7, #0]
 8000adc:	685b      	ldr	r3, [r3, #4]
 8000ade:	f003 0303 	and.w	r3, r3, #3
 8000ae2:	2b01      	cmp	r3, #1
 8000ae4:	d005      	beq.n	8000af2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ae6:	683b      	ldr	r3, [r7, #0]
 8000ae8:	685b      	ldr	r3, [r3, #4]
 8000aea:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000aee:	2b02      	cmp	r3, #2
 8000af0:	d130      	bne.n	8000b54 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	689b      	ldr	r3, [r3, #8]
 8000af6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000af8:	69fb      	ldr	r3, [r7, #28]
 8000afa:	005b      	lsls	r3, r3, #1
 8000afc:	2203      	movs	r2, #3
 8000afe:	fa02 f303 	lsl.w	r3, r2, r3
 8000b02:	43db      	mvns	r3, r3
 8000b04:	69ba      	ldr	r2, [r7, #24]
 8000b06:	4013      	ands	r3, r2
 8000b08:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000b0a:	683b      	ldr	r3, [r7, #0]
 8000b0c:	68da      	ldr	r2, [r3, #12]
 8000b0e:	69fb      	ldr	r3, [r7, #28]
 8000b10:	005b      	lsls	r3, r3, #1
 8000b12:	fa02 f303 	lsl.w	r3, r2, r3
 8000b16:	69ba      	ldr	r2, [r7, #24]
 8000b18:	4313      	orrs	r3, r2
 8000b1a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	69ba      	ldr	r2, [r7, #24]
 8000b20:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	685b      	ldr	r3, [r3, #4]
 8000b26:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000b28:	2201      	movs	r2, #1
 8000b2a:	69fb      	ldr	r3, [r7, #28]
 8000b2c:	fa02 f303 	lsl.w	r3, r2, r3
 8000b30:	43db      	mvns	r3, r3
 8000b32:	69ba      	ldr	r2, [r7, #24]
 8000b34:	4013      	ands	r3, r2
 8000b36:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000b38:	683b      	ldr	r3, [r7, #0]
 8000b3a:	685b      	ldr	r3, [r3, #4]
 8000b3c:	091b      	lsrs	r3, r3, #4
 8000b3e:	f003 0201 	and.w	r2, r3, #1
 8000b42:	69fb      	ldr	r3, [r7, #28]
 8000b44:	fa02 f303 	lsl.w	r3, r2, r3
 8000b48:	69ba      	ldr	r2, [r7, #24]
 8000b4a:	4313      	orrs	r3, r2
 8000b4c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	69ba      	ldr	r2, [r7, #24]
 8000b52:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000b54:	683b      	ldr	r3, [r7, #0]
 8000b56:	685b      	ldr	r3, [r3, #4]
 8000b58:	f003 0303 	and.w	r3, r3, #3
 8000b5c:	2b03      	cmp	r3, #3
 8000b5e:	d017      	beq.n	8000b90 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	68db      	ldr	r3, [r3, #12]
 8000b64:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000b66:	69fb      	ldr	r3, [r7, #28]
 8000b68:	005b      	lsls	r3, r3, #1
 8000b6a:	2203      	movs	r2, #3
 8000b6c:	fa02 f303 	lsl.w	r3, r2, r3
 8000b70:	43db      	mvns	r3, r3
 8000b72:	69ba      	ldr	r2, [r7, #24]
 8000b74:	4013      	ands	r3, r2
 8000b76:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000b78:	683b      	ldr	r3, [r7, #0]
 8000b7a:	689a      	ldr	r2, [r3, #8]
 8000b7c:	69fb      	ldr	r3, [r7, #28]
 8000b7e:	005b      	lsls	r3, r3, #1
 8000b80:	fa02 f303 	lsl.w	r3, r2, r3
 8000b84:	69ba      	ldr	r2, [r7, #24]
 8000b86:	4313      	orrs	r3, r2
 8000b88:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	69ba      	ldr	r2, [r7, #24]
 8000b8e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000b90:	683b      	ldr	r3, [r7, #0]
 8000b92:	685b      	ldr	r3, [r3, #4]
 8000b94:	f003 0303 	and.w	r3, r3, #3
 8000b98:	2b02      	cmp	r3, #2
 8000b9a:	d123      	bne.n	8000be4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000b9c:	69fb      	ldr	r3, [r7, #28]
 8000b9e:	08da      	lsrs	r2, r3, #3
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	3208      	adds	r2, #8
 8000ba4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000ba8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000baa:	69fb      	ldr	r3, [r7, #28]
 8000bac:	f003 0307 	and.w	r3, r3, #7
 8000bb0:	009b      	lsls	r3, r3, #2
 8000bb2:	220f      	movs	r2, #15
 8000bb4:	fa02 f303 	lsl.w	r3, r2, r3
 8000bb8:	43db      	mvns	r3, r3
 8000bba:	69ba      	ldr	r2, [r7, #24]
 8000bbc:	4013      	ands	r3, r2
 8000bbe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000bc0:	683b      	ldr	r3, [r7, #0]
 8000bc2:	691a      	ldr	r2, [r3, #16]
 8000bc4:	69fb      	ldr	r3, [r7, #28]
 8000bc6:	f003 0307 	and.w	r3, r3, #7
 8000bca:	009b      	lsls	r3, r3, #2
 8000bcc:	fa02 f303 	lsl.w	r3, r2, r3
 8000bd0:	69ba      	ldr	r2, [r7, #24]
 8000bd2:	4313      	orrs	r3, r2
 8000bd4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000bd6:	69fb      	ldr	r3, [r7, #28]
 8000bd8:	08da      	lsrs	r2, r3, #3
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	3208      	adds	r2, #8
 8000bde:	69b9      	ldr	r1, [r7, #24]
 8000be0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000bea:	69fb      	ldr	r3, [r7, #28]
 8000bec:	005b      	lsls	r3, r3, #1
 8000bee:	2203      	movs	r2, #3
 8000bf0:	fa02 f303 	lsl.w	r3, r2, r3
 8000bf4:	43db      	mvns	r3, r3
 8000bf6:	69ba      	ldr	r2, [r7, #24]
 8000bf8:	4013      	ands	r3, r2
 8000bfa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000bfc:	683b      	ldr	r3, [r7, #0]
 8000bfe:	685b      	ldr	r3, [r3, #4]
 8000c00:	f003 0203 	and.w	r2, r3, #3
 8000c04:	69fb      	ldr	r3, [r7, #28]
 8000c06:	005b      	lsls	r3, r3, #1
 8000c08:	fa02 f303 	lsl.w	r3, r2, r3
 8000c0c:	69ba      	ldr	r2, [r7, #24]
 8000c0e:	4313      	orrs	r3, r2
 8000c10:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	69ba      	ldr	r2, [r7, #24]
 8000c16:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000c18:	683b      	ldr	r3, [r7, #0]
 8000c1a:	685b      	ldr	r3, [r3, #4]
 8000c1c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	f000 80a2 	beq.w	8000d6a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c26:	2300      	movs	r3, #0
 8000c28:	60fb      	str	r3, [r7, #12]
 8000c2a:	4b57      	ldr	r3, [pc, #348]	; (8000d88 <HAL_GPIO_Init+0x2e8>)
 8000c2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c2e:	4a56      	ldr	r2, [pc, #344]	; (8000d88 <HAL_GPIO_Init+0x2e8>)
 8000c30:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c34:	6453      	str	r3, [r2, #68]	; 0x44
 8000c36:	4b54      	ldr	r3, [pc, #336]	; (8000d88 <HAL_GPIO_Init+0x2e8>)
 8000c38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c3a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c3e:	60fb      	str	r3, [r7, #12]
 8000c40:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000c42:	4a52      	ldr	r2, [pc, #328]	; (8000d8c <HAL_GPIO_Init+0x2ec>)
 8000c44:	69fb      	ldr	r3, [r7, #28]
 8000c46:	089b      	lsrs	r3, r3, #2
 8000c48:	3302      	adds	r3, #2
 8000c4a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000c50:	69fb      	ldr	r3, [r7, #28]
 8000c52:	f003 0303 	and.w	r3, r3, #3
 8000c56:	009b      	lsls	r3, r3, #2
 8000c58:	220f      	movs	r2, #15
 8000c5a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c5e:	43db      	mvns	r3, r3
 8000c60:	69ba      	ldr	r2, [r7, #24]
 8000c62:	4013      	ands	r3, r2
 8000c64:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	4a49      	ldr	r2, [pc, #292]	; (8000d90 <HAL_GPIO_Init+0x2f0>)
 8000c6a:	4293      	cmp	r3, r2
 8000c6c:	d019      	beq.n	8000ca2 <HAL_GPIO_Init+0x202>
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	4a48      	ldr	r2, [pc, #288]	; (8000d94 <HAL_GPIO_Init+0x2f4>)
 8000c72:	4293      	cmp	r3, r2
 8000c74:	d013      	beq.n	8000c9e <HAL_GPIO_Init+0x1fe>
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	4a47      	ldr	r2, [pc, #284]	; (8000d98 <HAL_GPIO_Init+0x2f8>)
 8000c7a:	4293      	cmp	r3, r2
 8000c7c:	d00d      	beq.n	8000c9a <HAL_GPIO_Init+0x1fa>
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	4a46      	ldr	r2, [pc, #280]	; (8000d9c <HAL_GPIO_Init+0x2fc>)
 8000c82:	4293      	cmp	r3, r2
 8000c84:	d007      	beq.n	8000c96 <HAL_GPIO_Init+0x1f6>
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	4a45      	ldr	r2, [pc, #276]	; (8000da0 <HAL_GPIO_Init+0x300>)
 8000c8a:	4293      	cmp	r3, r2
 8000c8c:	d101      	bne.n	8000c92 <HAL_GPIO_Init+0x1f2>
 8000c8e:	2304      	movs	r3, #4
 8000c90:	e008      	b.n	8000ca4 <HAL_GPIO_Init+0x204>
 8000c92:	2307      	movs	r3, #7
 8000c94:	e006      	b.n	8000ca4 <HAL_GPIO_Init+0x204>
 8000c96:	2303      	movs	r3, #3
 8000c98:	e004      	b.n	8000ca4 <HAL_GPIO_Init+0x204>
 8000c9a:	2302      	movs	r3, #2
 8000c9c:	e002      	b.n	8000ca4 <HAL_GPIO_Init+0x204>
 8000c9e:	2301      	movs	r3, #1
 8000ca0:	e000      	b.n	8000ca4 <HAL_GPIO_Init+0x204>
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	69fa      	ldr	r2, [r7, #28]
 8000ca6:	f002 0203 	and.w	r2, r2, #3
 8000caa:	0092      	lsls	r2, r2, #2
 8000cac:	4093      	lsls	r3, r2
 8000cae:	69ba      	ldr	r2, [r7, #24]
 8000cb0:	4313      	orrs	r3, r2
 8000cb2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000cb4:	4935      	ldr	r1, [pc, #212]	; (8000d8c <HAL_GPIO_Init+0x2ec>)
 8000cb6:	69fb      	ldr	r3, [r7, #28]
 8000cb8:	089b      	lsrs	r3, r3, #2
 8000cba:	3302      	adds	r3, #2
 8000cbc:	69ba      	ldr	r2, [r7, #24]
 8000cbe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000cc2:	4b38      	ldr	r3, [pc, #224]	; (8000da4 <HAL_GPIO_Init+0x304>)
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000cc8:	693b      	ldr	r3, [r7, #16]
 8000cca:	43db      	mvns	r3, r3
 8000ccc:	69ba      	ldr	r2, [r7, #24]
 8000cce:	4013      	ands	r3, r2
 8000cd0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000cd2:	683b      	ldr	r3, [r7, #0]
 8000cd4:	685b      	ldr	r3, [r3, #4]
 8000cd6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d003      	beq.n	8000ce6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8000cde:	69ba      	ldr	r2, [r7, #24]
 8000ce0:	693b      	ldr	r3, [r7, #16]
 8000ce2:	4313      	orrs	r3, r2
 8000ce4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000ce6:	4a2f      	ldr	r2, [pc, #188]	; (8000da4 <HAL_GPIO_Init+0x304>)
 8000ce8:	69bb      	ldr	r3, [r7, #24]
 8000cea:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000cec:	4b2d      	ldr	r3, [pc, #180]	; (8000da4 <HAL_GPIO_Init+0x304>)
 8000cee:	685b      	ldr	r3, [r3, #4]
 8000cf0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000cf2:	693b      	ldr	r3, [r7, #16]
 8000cf4:	43db      	mvns	r3, r3
 8000cf6:	69ba      	ldr	r2, [r7, #24]
 8000cf8:	4013      	ands	r3, r2
 8000cfa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000cfc:	683b      	ldr	r3, [r7, #0]
 8000cfe:	685b      	ldr	r3, [r3, #4]
 8000d00:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d003      	beq.n	8000d10 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8000d08:	69ba      	ldr	r2, [r7, #24]
 8000d0a:	693b      	ldr	r3, [r7, #16]
 8000d0c:	4313      	orrs	r3, r2
 8000d0e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000d10:	4a24      	ldr	r2, [pc, #144]	; (8000da4 <HAL_GPIO_Init+0x304>)
 8000d12:	69bb      	ldr	r3, [r7, #24]
 8000d14:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000d16:	4b23      	ldr	r3, [pc, #140]	; (8000da4 <HAL_GPIO_Init+0x304>)
 8000d18:	689b      	ldr	r3, [r3, #8]
 8000d1a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000d1c:	693b      	ldr	r3, [r7, #16]
 8000d1e:	43db      	mvns	r3, r3
 8000d20:	69ba      	ldr	r2, [r7, #24]
 8000d22:	4013      	ands	r3, r2
 8000d24:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000d26:	683b      	ldr	r3, [r7, #0]
 8000d28:	685b      	ldr	r3, [r3, #4]
 8000d2a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d003      	beq.n	8000d3a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8000d32:	69ba      	ldr	r2, [r7, #24]
 8000d34:	693b      	ldr	r3, [r7, #16]
 8000d36:	4313      	orrs	r3, r2
 8000d38:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000d3a:	4a1a      	ldr	r2, [pc, #104]	; (8000da4 <HAL_GPIO_Init+0x304>)
 8000d3c:	69bb      	ldr	r3, [r7, #24]
 8000d3e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000d40:	4b18      	ldr	r3, [pc, #96]	; (8000da4 <HAL_GPIO_Init+0x304>)
 8000d42:	68db      	ldr	r3, [r3, #12]
 8000d44:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000d46:	693b      	ldr	r3, [r7, #16]
 8000d48:	43db      	mvns	r3, r3
 8000d4a:	69ba      	ldr	r2, [r7, #24]
 8000d4c:	4013      	ands	r3, r2
 8000d4e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000d50:	683b      	ldr	r3, [r7, #0]
 8000d52:	685b      	ldr	r3, [r3, #4]
 8000d54:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d003      	beq.n	8000d64 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8000d5c:	69ba      	ldr	r2, [r7, #24]
 8000d5e:	693b      	ldr	r3, [r7, #16]
 8000d60:	4313      	orrs	r3, r2
 8000d62:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000d64:	4a0f      	ldr	r2, [pc, #60]	; (8000da4 <HAL_GPIO_Init+0x304>)
 8000d66:	69bb      	ldr	r3, [r7, #24]
 8000d68:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000d6a:	69fb      	ldr	r3, [r7, #28]
 8000d6c:	3301      	adds	r3, #1
 8000d6e:	61fb      	str	r3, [r7, #28]
 8000d70:	69fb      	ldr	r3, [r7, #28]
 8000d72:	2b0f      	cmp	r3, #15
 8000d74:	f67f aea2 	bls.w	8000abc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000d78:	bf00      	nop
 8000d7a:	bf00      	nop
 8000d7c:	3724      	adds	r7, #36	; 0x24
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d84:	4770      	bx	lr
 8000d86:	bf00      	nop
 8000d88:	40023800 	.word	0x40023800
 8000d8c:	40013800 	.word	0x40013800
 8000d90:	40020000 	.word	0x40020000
 8000d94:	40020400 	.word	0x40020400
 8000d98:	40020800 	.word	0x40020800
 8000d9c:	40020c00 	.word	0x40020c00
 8000da0:	40021000 	.word	0x40021000
 8000da4:	40013c00 	.word	0x40013c00

08000da8 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000da8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000daa:	b08f      	sub	sp, #60	; 0x3c
 8000dac:	af0a      	add	r7, sp, #40	; 0x28
 8000dae:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d101      	bne.n	8000dba <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8000db6:	2301      	movs	r3, #1
 8000db8:	e10f      	b.n	8000fda <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8000dc6:	b2db      	uxtb	r3, r3
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d106      	bne.n	8000dda <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	2200      	movs	r2, #0
 8000dd0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8000dd4:	6878      	ldr	r0, [r7, #4]
 8000dd6:	f006 fa13 	bl	8007200 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	2203      	movs	r2, #3
 8000dde:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8000de2:	68bb      	ldr	r3, [r7, #8]
 8000de4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000de6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d102      	bne.n	8000df4 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	2200      	movs	r2, #0
 8000df2:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	4618      	mov	r0, r3
 8000dfa:	f001 feca 	bl	8002b92 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	603b      	str	r3, [r7, #0]
 8000e04:	687e      	ldr	r6, [r7, #4]
 8000e06:	466d      	mov	r5, sp
 8000e08:	f106 0410 	add.w	r4, r6, #16
 8000e0c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000e0e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000e10:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000e12:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000e14:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000e18:	e885 0003 	stmia.w	r5, {r0, r1}
 8000e1c:	1d33      	adds	r3, r6, #4
 8000e1e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000e20:	6838      	ldr	r0, [r7, #0]
 8000e22:	f001 fda1 	bl	8002968 <USB_CoreInit>
 8000e26:	4603      	mov	r3, r0
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d005      	beq.n	8000e38 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	2202      	movs	r2, #2
 8000e30:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8000e34:	2301      	movs	r3, #1
 8000e36:	e0d0      	b.n	8000fda <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	2100      	movs	r1, #0
 8000e3e:	4618      	mov	r0, r3
 8000e40:	f001 feb8 	bl	8002bb4 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000e44:	2300      	movs	r3, #0
 8000e46:	73fb      	strb	r3, [r7, #15]
 8000e48:	e04a      	b.n	8000ee0 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8000e4a:	7bfa      	ldrb	r2, [r7, #15]
 8000e4c:	6879      	ldr	r1, [r7, #4]
 8000e4e:	4613      	mov	r3, r2
 8000e50:	00db      	lsls	r3, r3, #3
 8000e52:	1a9b      	subs	r3, r3, r2
 8000e54:	009b      	lsls	r3, r3, #2
 8000e56:	440b      	add	r3, r1
 8000e58:	333d      	adds	r3, #61	; 0x3d
 8000e5a:	2201      	movs	r2, #1
 8000e5c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8000e5e:	7bfa      	ldrb	r2, [r7, #15]
 8000e60:	6879      	ldr	r1, [r7, #4]
 8000e62:	4613      	mov	r3, r2
 8000e64:	00db      	lsls	r3, r3, #3
 8000e66:	1a9b      	subs	r3, r3, r2
 8000e68:	009b      	lsls	r3, r3, #2
 8000e6a:	440b      	add	r3, r1
 8000e6c:	333c      	adds	r3, #60	; 0x3c
 8000e6e:	7bfa      	ldrb	r2, [r7, #15]
 8000e70:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8000e72:	7bfa      	ldrb	r2, [r7, #15]
 8000e74:	7bfb      	ldrb	r3, [r7, #15]
 8000e76:	b298      	uxth	r0, r3
 8000e78:	6879      	ldr	r1, [r7, #4]
 8000e7a:	4613      	mov	r3, r2
 8000e7c:	00db      	lsls	r3, r3, #3
 8000e7e:	1a9b      	subs	r3, r3, r2
 8000e80:	009b      	lsls	r3, r3, #2
 8000e82:	440b      	add	r3, r1
 8000e84:	3342      	adds	r3, #66	; 0x42
 8000e86:	4602      	mov	r2, r0
 8000e88:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8000e8a:	7bfa      	ldrb	r2, [r7, #15]
 8000e8c:	6879      	ldr	r1, [r7, #4]
 8000e8e:	4613      	mov	r3, r2
 8000e90:	00db      	lsls	r3, r3, #3
 8000e92:	1a9b      	subs	r3, r3, r2
 8000e94:	009b      	lsls	r3, r3, #2
 8000e96:	440b      	add	r3, r1
 8000e98:	333f      	adds	r3, #63	; 0x3f
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8000e9e:	7bfa      	ldrb	r2, [r7, #15]
 8000ea0:	6879      	ldr	r1, [r7, #4]
 8000ea2:	4613      	mov	r3, r2
 8000ea4:	00db      	lsls	r3, r3, #3
 8000ea6:	1a9b      	subs	r3, r3, r2
 8000ea8:	009b      	lsls	r3, r3, #2
 8000eaa:	440b      	add	r3, r1
 8000eac:	3344      	adds	r3, #68	; 0x44
 8000eae:	2200      	movs	r2, #0
 8000eb0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8000eb2:	7bfa      	ldrb	r2, [r7, #15]
 8000eb4:	6879      	ldr	r1, [r7, #4]
 8000eb6:	4613      	mov	r3, r2
 8000eb8:	00db      	lsls	r3, r3, #3
 8000eba:	1a9b      	subs	r3, r3, r2
 8000ebc:	009b      	lsls	r3, r3, #2
 8000ebe:	440b      	add	r3, r1
 8000ec0:	3348      	adds	r3, #72	; 0x48
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8000ec6:	7bfa      	ldrb	r2, [r7, #15]
 8000ec8:	6879      	ldr	r1, [r7, #4]
 8000eca:	4613      	mov	r3, r2
 8000ecc:	00db      	lsls	r3, r3, #3
 8000ece:	1a9b      	subs	r3, r3, r2
 8000ed0:	009b      	lsls	r3, r3, #2
 8000ed2:	440b      	add	r3, r1
 8000ed4:	3350      	adds	r3, #80	; 0x50
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000eda:	7bfb      	ldrb	r3, [r7, #15]
 8000edc:	3301      	adds	r3, #1
 8000ede:	73fb      	strb	r3, [r7, #15]
 8000ee0:	7bfa      	ldrb	r2, [r7, #15]
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	685b      	ldr	r3, [r3, #4]
 8000ee6:	429a      	cmp	r2, r3
 8000ee8:	d3af      	bcc.n	8000e4a <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000eea:	2300      	movs	r3, #0
 8000eec:	73fb      	strb	r3, [r7, #15]
 8000eee:	e044      	b.n	8000f7a <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8000ef0:	7bfa      	ldrb	r2, [r7, #15]
 8000ef2:	6879      	ldr	r1, [r7, #4]
 8000ef4:	4613      	mov	r3, r2
 8000ef6:	00db      	lsls	r3, r3, #3
 8000ef8:	1a9b      	subs	r3, r3, r2
 8000efa:	009b      	lsls	r3, r3, #2
 8000efc:	440b      	add	r3, r1
 8000efe:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8000f02:	2200      	movs	r2, #0
 8000f04:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8000f06:	7bfa      	ldrb	r2, [r7, #15]
 8000f08:	6879      	ldr	r1, [r7, #4]
 8000f0a:	4613      	mov	r3, r2
 8000f0c:	00db      	lsls	r3, r3, #3
 8000f0e:	1a9b      	subs	r3, r3, r2
 8000f10:	009b      	lsls	r3, r3, #2
 8000f12:	440b      	add	r3, r1
 8000f14:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8000f18:	7bfa      	ldrb	r2, [r7, #15]
 8000f1a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8000f1c:	7bfa      	ldrb	r2, [r7, #15]
 8000f1e:	6879      	ldr	r1, [r7, #4]
 8000f20:	4613      	mov	r3, r2
 8000f22:	00db      	lsls	r3, r3, #3
 8000f24:	1a9b      	subs	r3, r3, r2
 8000f26:	009b      	lsls	r3, r3, #2
 8000f28:	440b      	add	r3, r1
 8000f2a:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8000f2e:	2200      	movs	r2, #0
 8000f30:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8000f32:	7bfa      	ldrb	r2, [r7, #15]
 8000f34:	6879      	ldr	r1, [r7, #4]
 8000f36:	4613      	mov	r3, r2
 8000f38:	00db      	lsls	r3, r3, #3
 8000f3a:	1a9b      	subs	r3, r3, r2
 8000f3c:	009b      	lsls	r3, r3, #2
 8000f3e:	440b      	add	r3, r1
 8000f40:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8000f44:	2200      	movs	r2, #0
 8000f46:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8000f48:	7bfa      	ldrb	r2, [r7, #15]
 8000f4a:	6879      	ldr	r1, [r7, #4]
 8000f4c:	4613      	mov	r3, r2
 8000f4e:	00db      	lsls	r3, r3, #3
 8000f50:	1a9b      	subs	r3, r3, r2
 8000f52:	009b      	lsls	r3, r3, #2
 8000f54:	440b      	add	r3, r1
 8000f56:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8000f5e:	7bfa      	ldrb	r2, [r7, #15]
 8000f60:	6879      	ldr	r1, [r7, #4]
 8000f62:	4613      	mov	r3, r2
 8000f64:	00db      	lsls	r3, r3, #3
 8000f66:	1a9b      	subs	r3, r3, r2
 8000f68:	009b      	lsls	r3, r3, #2
 8000f6a:	440b      	add	r3, r1
 8000f6c:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8000f70:	2200      	movs	r2, #0
 8000f72:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000f74:	7bfb      	ldrb	r3, [r7, #15]
 8000f76:	3301      	adds	r3, #1
 8000f78:	73fb      	strb	r3, [r7, #15]
 8000f7a:	7bfa      	ldrb	r2, [r7, #15]
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	685b      	ldr	r3, [r3, #4]
 8000f80:	429a      	cmp	r2, r3
 8000f82:	d3b5      	bcc.n	8000ef0 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	603b      	str	r3, [r7, #0]
 8000f8a:	687e      	ldr	r6, [r7, #4]
 8000f8c:	466d      	mov	r5, sp
 8000f8e:	f106 0410 	add.w	r4, r6, #16
 8000f92:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000f94:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000f96:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000f98:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000f9a:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000f9e:	e885 0003 	stmia.w	r5, {r0, r1}
 8000fa2:	1d33      	adds	r3, r6, #4
 8000fa4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000fa6:	6838      	ldr	r0, [r7, #0]
 8000fa8:	f001 fe50 	bl	8002c4c <USB_DevInit>
 8000fac:	4603      	mov	r3, r0
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d005      	beq.n	8000fbe <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	2202      	movs	r2, #2
 8000fb6:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8000fba:	2301      	movs	r3, #1
 8000fbc:	e00d      	b.n	8000fda <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	2201      	movs	r2, #1
 8000fca:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	f002 fecc 	bl	8003d70 <USB_DevDisconnect>

  return HAL_OK;
 8000fd8:	2300      	movs	r3, #0
}
 8000fda:	4618      	mov	r0, r3
 8000fdc:	3714      	adds	r7, #20
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000fe2 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8000fe2:	b580      	push	{r7, lr}
 8000fe4:	b084      	sub	sp, #16
 8000fe6:	af00      	add	r7, sp, #0
 8000fe8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8000ff6:	2b01      	cmp	r3, #1
 8000ff8:	d101      	bne.n	8000ffe <HAL_PCD_Start+0x1c>
 8000ffa:	2302      	movs	r3, #2
 8000ffc:	e020      	b.n	8001040 <HAL_PCD_Start+0x5e>
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	2201      	movs	r2, #1
 8001002:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800100a:	2b01      	cmp	r3, #1
 800100c:	d109      	bne.n	8001022 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001012:	2b01      	cmp	r3, #1
 8001014:	d005      	beq.n	8001022 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8001016:	68fb      	ldr	r3, [r7, #12]
 8001018:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800101a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800101e:	68fb      	ldr	r3, [r7, #12]
 8001020:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	4618      	mov	r0, r3
 8001028:	f001 fda2 	bl	8002b70 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	4618      	mov	r0, r3
 8001032:	f002 fe7c 	bl	8003d2e <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	2200      	movs	r2, #0
 800103a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800103e:	2300      	movs	r3, #0
}
 8001040:	4618      	mov	r0, r3
 8001042:	3710      	adds	r7, #16
 8001044:	46bd      	mov	sp, r7
 8001046:	bd80      	pop	{r7, pc}

08001048 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001048:	b590      	push	{r4, r7, lr}
 800104a:	b08d      	sub	sp, #52	; 0x34
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001056:	6a3b      	ldr	r3, [r7, #32]
 8001058:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t temp;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	4618      	mov	r0, r3
 8001060:	f002 ff3a 	bl	8003ed8 <USB_GetMode>
 8001064:	4603      	mov	r3, r0
 8001066:	2b00      	cmp	r3, #0
 8001068:	f040 839d 	bne.w	80017a6 <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	4618      	mov	r0, r3
 8001072:	f002 fe9e 	bl	8003db2 <USB_ReadInterrupts>
 8001076:	4603      	mov	r3, r0
 8001078:	2b00      	cmp	r3, #0
 800107a:	f000 8393 	beq.w	80017a4 <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	4618      	mov	r0, r3
 8001084:	f002 fe95 	bl	8003db2 <USB_ReadInterrupts>
 8001088:	4603      	mov	r3, r0
 800108a:	f003 0302 	and.w	r3, r3, #2
 800108e:	2b02      	cmp	r3, #2
 8001090:	d107      	bne.n	80010a2 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	695a      	ldr	r2, [r3, #20]
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	f002 0202 	and.w	r2, r2, #2
 80010a0:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	4618      	mov	r0, r3
 80010a8:	f002 fe83 	bl	8003db2 <USB_ReadInterrupts>
 80010ac:	4603      	mov	r3, r0
 80010ae:	f003 0310 	and.w	r3, r3, #16
 80010b2:	2b10      	cmp	r3, #16
 80010b4:	d161      	bne.n	800117a <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	699a      	ldr	r2, [r3, #24]
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	f022 0210 	bic.w	r2, r2, #16
 80010c4:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 80010c6:	6a3b      	ldr	r3, [r7, #32]
 80010c8:	6a1b      	ldr	r3, [r3, #32]
 80010ca:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 80010cc:	69bb      	ldr	r3, [r7, #24]
 80010ce:	f003 020f 	and.w	r2, r3, #15
 80010d2:	4613      	mov	r3, r2
 80010d4:	00db      	lsls	r3, r3, #3
 80010d6:	1a9b      	subs	r3, r3, r2
 80010d8:	009b      	lsls	r3, r3, #2
 80010da:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80010de:	687a      	ldr	r2, [r7, #4]
 80010e0:	4413      	add	r3, r2
 80010e2:	3304      	adds	r3, #4
 80010e4:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80010e6:	69bb      	ldr	r3, [r7, #24]
 80010e8:	0c5b      	lsrs	r3, r3, #17
 80010ea:	f003 030f 	and.w	r3, r3, #15
 80010ee:	2b02      	cmp	r3, #2
 80010f0:	d124      	bne.n	800113c <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 80010f2:	69ba      	ldr	r2, [r7, #24]
 80010f4:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80010f8:	4013      	ands	r3, r2
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d035      	beq.n	800116a <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80010fe:	697b      	ldr	r3, [r7, #20]
 8001100:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8001102:	69bb      	ldr	r3, [r7, #24]
 8001104:	091b      	lsrs	r3, r3, #4
 8001106:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001108:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800110c:	b29b      	uxth	r3, r3
 800110e:	461a      	mov	r2, r3
 8001110:	6a38      	ldr	r0, [r7, #32]
 8001112:	f002 fcba 	bl	8003a8a <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001116:	697b      	ldr	r3, [r7, #20]
 8001118:	68da      	ldr	r2, [r3, #12]
 800111a:	69bb      	ldr	r3, [r7, #24]
 800111c:	091b      	lsrs	r3, r3, #4
 800111e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001122:	441a      	add	r2, r3
 8001124:	697b      	ldr	r3, [r7, #20]
 8001126:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001128:	697b      	ldr	r3, [r7, #20]
 800112a:	699a      	ldr	r2, [r3, #24]
 800112c:	69bb      	ldr	r3, [r7, #24]
 800112e:	091b      	lsrs	r3, r3, #4
 8001130:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001134:	441a      	add	r2, r3
 8001136:	697b      	ldr	r3, [r7, #20]
 8001138:	619a      	str	r2, [r3, #24]
 800113a:	e016      	b.n	800116a <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 800113c:	69bb      	ldr	r3, [r7, #24]
 800113e:	0c5b      	lsrs	r3, r3, #17
 8001140:	f003 030f 	and.w	r3, r3, #15
 8001144:	2b06      	cmp	r3, #6
 8001146:	d110      	bne.n	800116a <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800114e:	2208      	movs	r2, #8
 8001150:	4619      	mov	r1, r3
 8001152:	6a38      	ldr	r0, [r7, #32]
 8001154:	f002 fc99 	bl	8003a8a <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001158:	697b      	ldr	r3, [r7, #20]
 800115a:	699a      	ldr	r2, [r3, #24]
 800115c:	69bb      	ldr	r3, [r7, #24]
 800115e:	091b      	lsrs	r3, r3, #4
 8001160:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001164:	441a      	add	r2, r3
 8001166:	697b      	ldr	r3, [r7, #20]
 8001168:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	699a      	ldr	r2, [r3, #24]
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	f042 0210 	orr.w	r2, r2, #16
 8001178:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	4618      	mov	r0, r3
 8001180:	f002 fe17 	bl	8003db2 <USB_ReadInterrupts>
 8001184:	4603      	mov	r3, r0
 8001186:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800118a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800118e:	d16e      	bne.n	800126e <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8001190:	2300      	movs	r3, #0
 8001192:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	4618      	mov	r0, r3
 800119a:	f002 fe1d 	bl	8003dd8 <USB_ReadDevAllOutEpInterrupt>
 800119e:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80011a0:	e062      	b.n	8001268 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 80011a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80011a4:	f003 0301 	and.w	r3, r3, #1
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d057      	beq.n	800125c <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80011b2:	b2d2      	uxtb	r2, r2
 80011b4:	4611      	mov	r1, r2
 80011b6:	4618      	mov	r0, r3
 80011b8:	f002 fe42 	bl	8003e40 <USB_ReadDevOutEPInterrupt>
 80011bc:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80011be:	693b      	ldr	r3, [r7, #16]
 80011c0:	f003 0301 	and.w	r3, r3, #1
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d00c      	beq.n	80011e2 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80011c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011ca:	015a      	lsls	r2, r3, #5
 80011cc:	69fb      	ldr	r3, [r7, #28]
 80011ce:	4413      	add	r3, r2
 80011d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80011d4:	461a      	mov	r2, r3
 80011d6:	2301      	movs	r3, #1
 80011d8:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80011da:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80011dc:	6878      	ldr	r0, [r7, #4]
 80011de:	f000 fddd 	bl	8001d9c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80011e2:	693b      	ldr	r3, [r7, #16]
 80011e4:	f003 0308 	and.w	r3, r3, #8
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d00c      	beq.n	8001206 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80011ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011ee:	015a      	lsls	r2, r3, #5
 80011f0:	69fb      	ldr	r3, [r7, #28]
 80011f2:	4413      	add	r3, r2
 80011f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80011f8:	461a      	mov	r2, r3
 80011fa:	2308      	movs	r3, #8
 80011fc:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80011fe:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001200:	6878      	ldr	r0, [r7, #4]
 8001202:	f000 fed7 	bl	8001fb4 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8001206:	693b      	ldr	r3, [r7, #16]
 8001208:	f003 0310 	and.w	r3, r3, #16
 800120c:	2b00      	cmp	r3, #0
 800120e:	d008      	beq.n	8001222 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8001210:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001212:	015a      	lsls	r2, r3, #5
 8001214:	69fb      	ldr	r3, [r7, #28]
 8001216:	4413      	add	r3, r2
 8001218:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800121c:	461a      	mov	r2, r3
 800121e:	2310      	movs	r3, #16
 8001220:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001222:	693b      	ldr	r3, [r7, #16]
 8001224:	f003 0320 	and.w	r3, r3, #32
 8001228:	2b00      	cmp	r3, #0
 800122a:	d008      	beq.n	800123e <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800122c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800122e:	015a      	lsls	r2, r3, #5
 8001230:	69fb      	ldr	r3, [r7, #28]
 8001232:	4413      	add	r3, r2
 8001234:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001238:	461a      	mov	r2, r3
 800123a:	2320      	movs	r3, #32
 800123c:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800123e:	693b      	ldr	r3, [r7, #16]
 8001240:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001244:	2b00      	cmp	r3, #0
 8001246:	d009      	beq.n	800125c <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8001248:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800124a:	015a      	lsls	r2, r3, #5
 800124c:	69fb      	ldr	r3, [r7, #28]
 800124e:	4413      	add	r3, r2
 8001250:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001254:	461a      	mov	r2, r3
 8001256:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800125a:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800125c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800125e:	3301      	adds	r3, #1
 8001260:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001262:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001264:	085b      	lsrs	r3, r3, #1
 8001266:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001268:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800126a:	2b00      	cmp	r3, #0
 800126c:	d199      	bne.n	80011a2 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	4618      	mov	r0, r3
 8001274:	f002 fd9d 	bl	8003db2 <USB_ReadInterrupts>
 8001278:	4603      	mov	r3, r0
 800127a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800127e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001282:	f040 80c0 	bne.w	8001406 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	4618      	mov	r0, r3
 800128c:	f002 fdbe 	bl	8003e0c <USB_ReadDevAllInEpInterrupt>
 8001290:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8001292:	2300      	movs	r3, #0
 8001294:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8001296:	e0b2      	b.n	80013fe <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8001298:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800129a:	f003 0301 	and.w	r3, r3, #1
 800129e:	2b00      	cmp	r3, #0
 80012a0:	f000 80a7 	beq.w	80013f2 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80012aa:	b2d2      	uxtb	r2, r2
 80012ac:	4611      	mov	r1, r2
 80012ae:	4618      	mov	r0, r3
 80012b0:	f002 fde4 	bl	8003e7c <USB_ReadDevInEPInterrupt>
 80012b4:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80012b6:	693b      	ldr	r3, [r7, #16]
 80012b8:	f003 0301 	and.w	r3, r3, #1
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d057      	beq.n	8001370 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80012c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012c2:	f003 030f 	and.w	r3, r3, #15
 80012c6:	2201      	movs	r2, #1
 80012c8:	fa02 f303 	lsl.w	r3, r2, r3
 80012cc:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80012ce:	69fb      	ldr	r3, [r7, #28]
 80012d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80012d4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80012d6:	68fb      	ldr	r3, [r7, #12]
 80012d8:	43db      	mvns	r3, r3
 80012da:	69f9      	ldr	r1, [r7, #28]
 80012dc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80012e0:	4013      	ands	r3, r2
 80012e2:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80012e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012e6:	015a      	lsls	r2, r3, #5
 80012e8:	69fb      	ldr	r3, [r7, #28]
 80012ea:	4413      	add	r3, r2
 80012ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80012f0:	461a      	mov	r2, r3
 80012f2:	2301      	movs	r3, #1
 80012f4:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	691b      	ldr	r3, [r3, #16]
 80012fa:	2b01      	cmp	r3, #1
 80012fc:	d132      	bne.n	8001364 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80012fe:	6879      	ldr	r1, [r7, #4]
 8001300:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001302:	4613      	mov	r3, r2
 8001304:	00db      	lsls	r3, r3, #3
 8001306:	1a9b      	subs	r3, r3, r2
 8001308:	009b      	lsls	r3, r3, #2
 800130a:	440b      	add	r3, r1
 800130c:	3348      	adds	r3, #72	; 0x48
 800130e:	6819      	ldr	r1, [r3, #0]
 8001310:	6878      	ldr	r0, [r7, #4]
 8001312:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001314:	4613      	mov	r3, r2
 8001316:	00db      	lsls	r3, r3, #3
 8001318:	1a9b      	subs	r3, r3, r2
 800131a:	009b      	lsls	r3, r3, #2
 800131c:	4403      	add	r3, r0
 800131e:	3344      	adds	r3, #68	; 0x44
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	4419      	add	r1, r3
 8001324:	6878      	ldr	r0, [r7, #4]
 8001326:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001328:	4613      	mov	r3, r2
 800132a:	00db      	lsls	r3, r3, #3
 800132c:	1a9b      	subs	r3, r3, r2
 800132e:	009b      	lsls	r3, r3, #2
 8001330:	4403      	add	r3, r0
 8001332:	3348      	adds	r3, #72	; 0x48
 8001334:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8001336:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001338:	2b00      	cmp	r3, #0
 800133a:	d113      	bne.n	8001364 <HAL_PCD_IRQHandler+0x31c>
 800133c:	6879      	ldr	r1, [r7, #4]
 800133e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001340:	4613      	mov	r3, r2
 8001342:	00db      	lsls	r3, r3, #3
 8001344:	1a9b      	subs	r3, r3, r2
 8001346:	009b      	lsls	r3, r3, #2
 8001348:	440b      	add	r3, r1
 800134a:	3350      	adds	r3, #80	; 0x50
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	2b00      	cmp	r3, #0
 8001350:	d108      	bne.n	8001364 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	6818      	ldr	r0, [r3, #0]
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800135c:	461a      	mov	r2, r3
 800135e:	2101      	movs	r1, #1
 8001360:	f002 fdec 	bl	8003f3c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8001364:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001366:	b2db      	uxtb	r3, r3
 8001368:	4619      	mov	r1, r3
 800136a:	6878      	ldr	r0, [r7, #4]
 800136c:	f005 ffc9 	bl	8007302 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8001370:	693b      	ldr	r3, [r7, #16]
 8001372:	f003 0308 	and.w	r3, r3, #8
 8001376:	2b00      	cmp	r3, #0
 8001378:	d008      	beq.n	800138c <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800137a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800137c:	015a      	lsls	r2, r3, #5
 800137e:	69fb      	ldr	r3, [r7, #28]
 8001380:	4413      	add	r3, r2
 8001382:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001386:	461a      	mov	r2, r3
 8001388:	2308      	movs	r3, #8
 800138a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800138c:	693b      	ldr	r3, [r7, #16]
 800138e:	f003 0310 	and.w	r3, r3, #16
 8001392:	2b00      	cmp	r3, #0
 8001394:	d008      	beq.n	80013a8 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8001396:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001398:	015a      	lsls	r2, r3, #5
 800139a:	69fb      	ldr	r3, [r7, #28]
 800139c:	4413      	add	r3, r2
 800139e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80013a2:	461a      	mov	r2, r3
 80013a4:	2310      	movs	r3, #16
 80013a6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80013a8:	693b      	ldr	r3, [r7, #16]
 80013aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d008      	beq.n	80013c4 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80013b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013b4:	015a      	lsls	r2, r3, #5
 80013b6:	69fb      	ldr	r3, [r7, #28]
 80013b8:	4413      	add	r3, r2
 80013ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80013be:	461a      	mov	r2, r3
 80013c0:	2340      	movs	r3, #64	; 0x40
 80013c2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80013c4:	693b      	ldr	r3, [r7, #16]
 80013c6:	f003 0302 	and.w	r3, r3, #2
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d008      	beq.n	80013e0 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80013ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013d0:	015a      	lsls	r2, r3, #5
 80013d2:	69fb      	ldr	r3, [r7, #28]
 80013d4:	4413      	add	r3, r2
 80013d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80013da:	461a      	mov	r2, r3
 80013dc:	2302      	movs	r3, #2
 80013de:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80013e0:	693b      	ldr	r3, [r7, #16]
 80013e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d003      	beq.n	80013f2 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80013ea:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80013ec:	6878      	ldr	r0, [r7, #4]
 80013ee:	f000 fc48 	bl	8001c82 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80013f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013f4:	3301      	adds	r3, #1
 80013f6:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80013f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013fa:	085b      	lsrs	r3, r3, #1
 80013fc:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80013fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001400:	2b00      	cmp	r3, #0
 8001402:	f47f af49 	bne.w	8001298 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	4618      	mov	r0, r3
 800140c:	f002 fcd1 	bl	8003db2 <USB_ReadInterrupts>
 8001410:	4603      	mov	r3, r0
 8001412:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001416:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800141a:	d122      	bne.n	8001462 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800141c:	69fb      	ldr	r3, [r7, #28]
 800141e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001422:	685b      	ldr	r3, [r3, #4]
 8001424:	69fa      	ldr	r2, [r7, #28]
 8001426:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800142a:	f023 0301 	bic.w	r3, r3, #1
 800142e:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8001436:	2b01      	cmp	r3, #1
 8001438:	d108      	bne.n	800144c <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	2200      	movs	r2, #0
 800143e:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001442:	2100      	movs	r1, #0
 8001444:	6878      	ldr	r0, [r7, #4]
 8001446:	f000 fe53 	bl	80020f0 <HAL_PCDEx_LPM_Callback>
 800144a:	e002      	b.n	8001452 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800144c:	6878      	ldr	r0, [r7, #4]
 800144e:	f005 ffc5 	bl	80073dc <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	695a      	ldr	r2, [r3, #20]
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8001460:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	4618      	mov	r0, r3
 8001468:	f002 fca3 	bl	8003db2 <USB_ReadInterrupts>
 800146c:	4603      	mov	r3, r0
 800146e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001472:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001476:	d112      	bne.n	800149e <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8001478:	69fb      	ldr	r3, [r7, #28]
 800147a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800147e:	689b      	ldr	r3, [r3, #8]
 8001480:	f003 0301 	and.w	r3, r3, #1
 8001484:	2b01      	cmp	r3, #1
 8001486:	d102      	bne.n	800148e <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001488:	6878      	ldr	r0, [r7, #4]
 800148a:	f005 ff81 	bl	8007390 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	695a      	ldr	r2, [r3, #20]
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800149c:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	4618      	mov	r0, r3
 80014a4:	f002 fc85 	bl	8003db2 <USB_ReadInterrupts>
 80014a8:	4603      	mov	r3, r0
 80014aa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80014ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80014b2:	f040 80c7 	bne.w	8001644 <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80014b6:	69fb      	ldr	r3, [r7, #28]
 80014b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80014bc:	685b      	ldr	r3, [r3, #4]
 80014be:	69fa      	ldr	r2, [r7, #28]
 80014c0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80014c4:	f023 0301 	bic.w	r3, r3, #1
 80014c8:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	2110      	movs	r1, #16
 80014d0:	4618      	mov	r0, r3
 80014d2:	f001 fd1f 	bl	8002f14 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80014d6:	2300      	movs	r3, #0
 80014d8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80014da:	e056      	b.n	800158a <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80014dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80014de:	015a      	lsls	r2, r3, #5
 80014e0:	69fb      	ldr	r3, [r7, #28]
 80014e2:	4413      	add	r3, r2
 80014e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80014e8:	461a      	mov	r2, r3
 80014ea:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80014ee:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80014f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80014f2:	015a      	lsls	r2, r3, #5
 80014f4:	69fb      	ldr	r3, [r7, #28]
 80014f6:	4413      	add	r3, r2
 80014f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001500:	0151      	lsls	r1, r2, #5
 8001502:	69fa      	ldr	r2, [r7, #28]
 8001504:	440a      	add	r2, r1
 8001506:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800150a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800150e:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8001510:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001512:	015a      	lsls	r2, r3, #5
 8001514:	69fb      	ldr	r3, [r7, #28]
 8001516:	4413      	add	r3, r2
 8001518:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001520:	0151      	lsls	r1, r2, #5
 8001522:	69fa      	ldr	r2, [r7, #28]
 8001524:	440a      	add	r2, r1
 8001526:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800152a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800152e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8001530:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001532:	015a      	lsls	r2, r3, #5
 8001534:	69fb      	ldr	r3, [r7, #28]
 8001536:	4413      	add	r3, r2
 8001538:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800153c:	461a      	mov	r2, r3
 800153e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001542:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8001544:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001546:	015a      	lsls	r2, r3, #5
 8001548:	69fb      	ldr	r3, [r7, #28]
 800154a:	4413      	add	r3, r2
 800154c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001554:	0151      	lsls	r1, r2, #5
 8001556:	69fa      	ldr	r2, [r7, #28]
 8001558:	440a      	add	r2, r1
 800155a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800155e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001562:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8001564:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001566:	015a      	lsls	r2, r3, #5
 8001568:	69fb      	ldr	r3, [r7, #28]
 800156a:	4413      	add	r3, r2
 800156c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001574:	0151      	lsls	r1, r2, #5
 8001576:	69fa      	ldr	r2, [r7, #28]
 8001578:	440a      	add	r2, r1
 800157a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800157e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001582:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001584:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001586:	3301      	adds	r3, #1
 8001588:	62fb      	str	r3, [r7, #44]	; 0x2c
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	685b      	ldr	r3, [r3, #4]
 800158e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001590:	429a      	cmp	r2, r3
 8001592:	d3a3      	bcc.n	80014dc <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8001594:	69fb      	ldr	r3, [r7, #28]
 8001596:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800159a:	69db      	ldr	r3, [r3, #28]
 800159c:	69fa      	ldr	r2, [r7, #28]
 800159e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80015a2:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80015a6:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d016      	beq.n	80015de <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80015b0:	69fb      	ldr	r3, [r7, #28]
 80015b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80015b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80015ba:	69fa      	ldr	r2, [r7, #28]
 80015bc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80015c0:	f043 030b 	orr.w	r3, r3, #11
 80015c4:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80015c8:	69fb      	ldr	r3, [r7, #28]
 80015ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80015ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015d0:	69fa      	ldr	r2, [r7, #28]
 80015d2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80015d6:	f043 030b 	orr.w	r3, r3, #11
 80015da:	6453      	str	r3, [r2, #68]	; 0x44
 80015dc:	e015      	b.n	800160a <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80015de:	69fb      	ldr	r3, [r7, #28]
 80015e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80015e4:	695b      	ldr	r3, [r3, #20]
 80015e6:	69fa      	ldr	r2, [r7, #28]
 80015e8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80015ec:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80015f0:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80015f4:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80015f6:	69fb      	ldr	r3, [r7, #28]
 80015f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80015fc:	691b      	ldr	r3, [r3, #16]
 80015fe:	69fa      	ldr	r2, [r7, #28]
 8001600:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001604:	f043 030b 	orr.w	r3, r3, #11
 8001608:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800160a:	69fb      	ldr	r3, [r7, #28]
 800160c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	69fa      	ldr	r2, [r7, #28]
 8001614:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001618:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800161c:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	6818      	ldr	r0, [r3, #0]
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	691b      	ldr	r3, [r3, #16]
 8001626:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800162e:	461a      	mov	r2, r3
 8001630:	f002 fc84 	bl	8003f3c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	695a      	ldr	r2, [r3, #20]
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8001642:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	4618      	mov	r0, r3
 800164a:	f002 fbb2 	bl	8003db2 <USB_ReadInterrupts>
 800164e:	4603      	mov	r3, r0
 8001650:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001654:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001658:	d124      	bne.n	80016a4 <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	4618      	mov	r0, r3
 8001660:	f002 fc48 	bl	8003ef4 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	4618      	mov	r0, r3
 800166a:	f001 fcb0 	bl	8002fce <USB_GetDevSpeed>
 800166e:	4603      	mov	r3, r0
 8001670:	461a      	mov	r2, r3
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681c      	ldr	r4, [r3, #0]
 800167a:	f001 f969 	bl	8002950 <HAL_RCC_GetHCLKFreq>
 800167e:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001684:	b2db      	uxtb	r3, r3
 8001686:	461a      	mov	r2, r3
 8001688:	4620      	mov	r0, r4
 800168a:	f001 f9cf 	bl	8002a2c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800168e:	6878      	ldr	r0, [r7, #4]
 8001690:	f005 fe5f 	bl	8007352 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	695a      	ldr	r2, [r3, #20]
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80016a2:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	4618      	mov	r0, r3
 80016aa:	f002 fb82 	bl	8003db2 <USB_ReadInterrupts>
 80016ae:	4603      	mov	r3, r0
 80016b0:	f003 0308 	and.w	r3, r3, #8
 80016b4:	2b08      	cmp	r3, #8
 80016b6:	d10a      	bne.n	80016ce <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80016b8:	6878      	ldr	r0, [r7, #4]
 80016ba:	f005 fe3c 	bl	8007336 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	695a      	ldr	r2, [r3, #20]
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	f002 0208 	and.w	r2, r2, #8
 80016cc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	4618      	mov	r0, r3
 80016d4:	f002 fb6d 	bl	8003db2 <USB_ReadInterrupts>
 80016d8:	4603      	mov	r3, r0
 80016da:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80016de:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80016e2:	d10f      	bne.n	8001704 <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80016e4:	2300      	movs	r3, #0
 80016e6:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80016e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016ea:	b2db      	uxtb	r3, r3
 80016ec:	4619      	mov	r1, r3
 80016ee:	6878      	ldr	r0, [r7, #4]
 80016f0:	f005 fe94 	bl	800741c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	695a      	ldr	r2, [r3, #20]
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8001702:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	4618      	mov	r0, r3
 800170a:	f002 fb52 	bl	8003db2 <USB_ReadInterrupts>
 800170e:	4603      	mov	r3, r0
 8001710:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001714:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001718:	d10f      	bne.n	800173a <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 800171a:	2300      	movs	r3, #0
 800171c:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800171e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001720:	b2db      	uxtb	r3, r3
 8001722:	4619      	mov	r1, r3
 8001724:	6878      	ldr	r0, [r7, #4]
 8001726:	f005 fe67 	bl	80073f8 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	695a      	ldr	r2, [r3, #20]
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8001738:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	4618      	mov	r0, r3
 8001740:	f002 fb37 	bl	8003db2 <USB_ReadInterrupts>
 8001744:	4603      	mov	r3, r0
 8001746:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800174a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800174e:	d10a      	bne.n	8001766 <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8001750:	6878      	ldr	r0, [r7, #4]
 8001752:	f005 fe75 	bl	8007440 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	695a      	ldr	r2, [r3, #20]
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8001764:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	4618      	mov	r0, r3
 800176c:	f002 fb21 	bl	8003db2 <USB_ReadInterrupts>
 8001770:	4603      	mov	r3, r0
 8001772:	f003 0304 	and.w	r3, r3, #4
 8001776:	2b04      	cmp	r3, #4
 8001778:	d115      	bne.n	80017a6 <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	685b      	ldr	r3, [r3, #4]
 8001780:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8001782:	69bb      	ldr	r3, [r7, #24]
 8001784:	f003 0304 	and.w	r3, r3, #4
 8001788:	2b00      	cmp	r3, #0
 800178a:	d002      	beq.n	8001792 <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800178c:	6878      	ldr	r0, [r7, #4]
 800178e:	f005 fe65 	bl	800745c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	6859      	ldr	r1, [r3, #4]
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	69ba      	ldr	r2, [r7, #24]
 800179e:	430a      	orrs	r2, r1
 80017a0:	605a      	str	r2, [r3, #4]
 80017a2:	e000      	b.n	80017a6 <HAL_PCD_IRQHandler+0x75e>
      return;
 80017a4:	bf00      	nop
    }
  }
}
 80017a6:	3734      	adds	r7, #52	; 0x34
 80017a8:	46bd      	mov	sp, r7
 80017aa:	bd90      	pop	{r4, r7, pc}

080017ac <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b082      	sub	sp, #8
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]
 80017b4:	460b      	mov	r3, r1
 80017b6:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80017be:	2b01      	cmp	r3, #1
 80017c0:	d101      	bne.n	80017c6 <HAL_PCD_SetAddress+0x1a>
 80017c2:	2302      	movs	r3, #2
 80017c4:	e013      	b.n	80017ee <HAL_PCD_SetAddress+0x42>
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	2201      	movs	r2, #1
 80017ca:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	78fa      	ldrb	r2, [r7, #3]
 80017d2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	78fa      	ldrb	r2, [r7, #3]
 80017dc:	4611      	mov	r1, r2
 80017de:	4618      	mov	r0, r3
 80017e0:	f002 fa7f 	bl	8003ce2 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	2200      	movs	r2, #0
 80017e8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80017ec:	2300      	movs	r3, #0
}
 80017ee:	4618      	mov	r0, r3
 80017f0:	3708      	adds	r7, #8
 80017f2:	46bd      	mov	sp, r7
 80017f4:	bd80      	pop	{r7, pc}

080017f6 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80017f6:	b580      	push	{r7, lr}
 80017f8:	b084      	sub	sp, #16
 80017fa:	af00      	add	r7, sp, #0
 80017fc:	6078      	str	r0, [r7, #4]
 80017fe:	4608      	mov	r0, r1
 8001800:	4611      	mov	r1, r2
 8001802:	461a      	mov	r2, r3
 8001804:	4603      	mov	r3, r0
 8001806:	70fb      	strb	r3, [r7, #3]
 8001808:	460b      	mov	r3, r1
 800180a:	803b      	strh	r3, [r7, #0]
 800180c:	4613      	mov	r3, r2
 800180e:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001810:	2300      	movs	r3, #0
 8001812:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001814:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001818:	2b00      	cmp	r3, #0
 800181a:	da0f      	bge.n	800183c <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800181c:	78fb      	ldrb	r3, [r7, #3]
 800181e:	f003 020f 	and.w	r2, r3, #15
 8001822:	4613      	mov	r3, r2
 8001824:	00db      	lsls	r3, r3, #3
 8001826:	1a9b      	subs	r3, r3, r2
 8001828:	009b      	lsls	r3, r3, #2
 800182a:	3338      	adds	r3, #56	; 0x38
 800182c:	687a      	ldr	r2, [r7, #4]
 800182e:	4413      	add	r3, r2
 8001830:	3304      	adds	r3, #4
 8001832:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	2201      	movs	r2, #1
 8001838:	705a      	strb	r2, [r3, #1]
 800183a:	e00f      	b.n	800185c <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800183c:	78fb      	ldrb	r3, [r7, #3]
 800183e:	f003 020f 	and.w	r2, r3, #15
 8001842:	4613      	mov	r3, r2
 8001844:	00db      	lsls	r3, r3, #3
 8001846:	1a9b      	subs	r3, r3, r2
 8001848:	009b      	lsls	r3, r3, #2
 800184a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800184e:	687a      	ldr	r2, [r7, #4]
 8001850:	4413      	add	r3, r2
 8001852:	3304      	adds	r3, #4
 8001854:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	2200      	movs	r2, #0
 800185a:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800185c:	78fb      	ldrb	r3, [r7, #3]
 800185e:	f003 030f 	and.w	r3, r3, #15
 8001862:	b2da      	uxtb	r2, r3
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001868:	883a      	ldrh	r2, [r7, #0]
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	78ba      	ldrb	r2, [r7, #2]
 8001872:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	785b      	ldrb	r3, [r3, #1]
 8001878:	2b00      	cmp	r3, #0
 800187a:	d004      	beq.n	8001886 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	781b      	ldrb	r3, [r3, #0]
 8001880:	b29a      	uxth	r2, r3
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001886:	78bb      	ldrb	r3, [r7, #2]
 8001888:	2b02      	cmp	r3, #2
 800188a:	d102      	bne.n	8001892 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	2200      	movs	r2, #0
 8001890:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001898:	2b01      	cmp	r3, #1
 800189a:	d101      	bne.n	80018a0 <HAL_PCD_EP_Open+0xaa>
 800189c:	2302      	movs	r3, #2
 800189e:	e00e      	b.n	80018be <HAL_PCD_EP_Open+0xc8>
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	2201      	movs	r2, #1
 80018a4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	68f9      	ldr	r1, [r7, #12]
 80018ae:	4618      	mov	r0, r3
 80018b0:	f001 fbb2 	bl	8003018 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	2200      	movs	r2, #0
 80018b8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 80018bc:	7afb      	ldrb	r3, [r7, #11]
}
 80018be:	4618      	mov	r0, r3
 80018c0:	3710      	adds	r7, #16
 80018c2:	46bd      	mov	sp, r7
 80018c4:	bd80      	pop	{r7, pc}

080018c6 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80018c6:	b580      	push	{r7, lr}
 80018c8:	b084      	sub	sp, #16
 80018ca:	af00      	add	r7, sp, #0
 80018cc:	6078      	str	r0, [r7, #4]
 80018ce:	460b      	mov	r3, r1
 80018d0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80018d2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	da0f      	bge.n	80018fa <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80018da:	78fb      	ldrb	r3, [r7, #3]
 80018dc:	f003 020f 	and.w	r2, r3, #15
 80018e0:	4613      	mov	r3, r2
 80018e2:	00db      	lsls	r3, r3, #3
 80018e4:	1a9b      	subs	r3, r3, r2
 80018e6:	009b      	lsls	r3, r3, #2
 80018e8:	3338      	adds	r3, #56	; 0x38
 80018ea:	687a      	ldr	r2, [r7, #4]
 80018ec:	4413      	add	r3, r2
 80018ee:	3304      	adds	r3, #4
 80018f0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	2201      	movs	r2, #1
 80018f6:	705a      	strb	r2, [r3, #1]
 80018f8:	e00f      	b.n	800191a <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80018fa:	78fb      	ldrb	r3, [r7, #3]
 80018fc:	f003 020f 	and.w	r2, r3, #15
 8001900:	4613      	mov	r3, r2
 8001902:	00db      	lsls	r3, r3, #3
 8001904:	1a9b      	subs	r3, r3, r2
 8001906:	009b      	lsls	r3, r3, #2
 8001908:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800190c:	687a      	ldr	r2, [r7, #4]
 800190e:	4413      	add	r3, r2
 8001910:	3304      	adds	r3, #4
 8001912:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	2200      	movs	r2, #0
 8001918:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800191a:	78fb      	ldrb	r3, [r7, #3]
 800191c:	f003 030f 	and.w	r3, r3, #15
 8001920:	b2da      	uxtb	r2, r3
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800192c:	2b01      	cmp	r3, #1
 800192e:	d101      	bne.n	8001934 <HAL_PCD_EP_Close+0x6e>
 8001930:	2302      	movs	r3, #2
 8001932:	e00e      	b.n	8001952 <HAL_PCD_EP_Close+0x8c>
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	2201      	movs	r2, #1
 8001938:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	68f9      	ldr	r1, [r7, #12]
 8001942:	4618      	mov	r0, r3
 8001944:	f001 fbf0 	bl	8003128 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	2200      	movs	r2, #0
 800194c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8001950:	2300      	movs	r3, #0
}
 8001952:	4618      	mov	r0, r3
 8001954:	3710      	adds	r7, #16
 8001956:	46bd      	mov	sp, r7
 8001958:	bd80      	pop	{r7, pc}

0800195a <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800195a:	b580      	push	{r7, lr}
 800195c:	b086      	sub	sp, #24
 800195e:	af00      	add	r7, sp, #0
 8001960:	60f8      	str	r0, [r7, #12]
 8001962:	607a      	str	r2, [r7, #4]
 8001964:	603b      	str	r3, [r7, #0]
 8001966:	460b      	mov	r3, r1
 8001968:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800196a:	7afb      	ldrb	r3, [r7, #11]
 800196c:	f003 020f 	and.w	r2, r3, #15
 8001970:	4613      	mov	r3, r2
 8001972:	00db      	lsls	r3, r3, #3
 8001974:	1a9b      	subs	r3, r3, r2
 8001976:	009b      	lsls	r3, r3, #2
 8001978:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800197c:	68fa      	ldr	r2, [r7, #12]
 800197e:	4413      	add	r3, r2
 8001980:	3304      	adds	r3, #4
 8001982:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001984:	697b      	ldr	r3, [r7, #20]
 8001986:	687a      	ldr	r2, [r7, #4]
 8001988:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800198a:	697b      	ldr	r3, [r7, #20]
 800198c:	683a      	ldr	r2, [r7, #0]
 800198e:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8001990:	697b      	ldr	r3, [r7, #20]
 8001992:	2200      	movs	r2, #0
 8001994:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8001996:	697b      	ldr	r3, [r7, #20]
 8001998:	2200      	movs	r2, #0
 800199a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800199c:	7afb      	ldrb	r3, [r7, #11]
 800199e:	f003 030f 	and.w	r3, r3, #15
 80019a2:	b2da      	uxtb	r2, r3
 80019a4:	697b      	ldr	r3, [r7, #20]
 80019a6:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	691b      	ldr	r3, [r3, #16]
 80019ac:	2b01      	cmp	r3, #1
 80019ae:	d102      	bne.n	80019b6 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80019b0:	687a      	ldr	r2, [r7, #4]
 80019b2:	697b      	ldr	r3, [r7, #20]
 80019b4:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80019b6:	7afb      	ldrb	r3, [r7, #11]
 80019b8:	f003 030f 	and.w	r3, r3, #15
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d109      	bne.n	80019d4 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	6818      	ldr	r0, [r3, #0]
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	691b      	ldr	r3, [r3, #16]
 80019c8:	b2db      	uxtb	r3, r3
 80019ca:	461a      	mov	r2, r3
 80019cc:	6979      	ldr	r1, [r7, #20]
 80019ce:	f001 fecb 	bl	8003768 <USB_EP0StartXfer>
 80019d2:	e008      	b.n	80019e6 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	6818      	ldr	r0, [r3, #0]
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	691b      	ldr	r3, [r3, #16]
 80019dc:	b2db      	uxtb	r3, r3
 80019de:	461a      	mov	r2, r3
 80019e0:	6979      	ldr	r1, [r7, #20]
 80019e2:	f001 fc7d 	bl	80032e0 <USB_EPStartXfer>
  }

  return HAL_OK;
 80019e6:	2300      	movs	r3, #0
}
 80019e8:	4618      	mov	r0, r3
 80019ea:	3718      	adds	r7, #24
 80019ec:	46bd      	mov	sp, r7
 80019ee:	bd80      	pop	{r7, pc}

080019f0 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80019f0:	b480      	push	{r7}
 80019f2:	b083      	sub	sp, #12
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
 80019f8:	460b      	mov	r3, r1
 80019fa:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80019fc:	78fb      	ldrb	r3, [r7, #3]
 80019fe:	f003 020f 	and.w	r2, r3, #15
 8001a02:	6879      	ldr	r1, [r7, #4]
 8001a04:	4613      	mov	r3, r2
 8001a06:	00db      	lsls	r3, r3, #3
 8001a08:	1a9b      	subs	r3, r3, r2
 8001a0a:	009b      	lsls	r3, r3, #2
 8001a0c:	440b      	add	r3, r1
 8001a0e:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8001a12:	681b      	ldr	r3, [r3, #0]
}
 8001a14:	4618      	mov	r0, r3
 8001a16:	370c      	adds	r7, #12
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1e:	4770      	bx	lr

08001a20 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b086      	sub	sp, #24
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	60f8      	str	r0, [r7, #12]
 8001a28:	607a      	str	r2, [r7, #4]
 8001a2a:	603b      	str	r3, [r7, #0]
 8001a2c:	460b      	mov	r3, r1
 8001a2e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001a30:	7afb      	ldrb	r3, [r7, #11]
 8001a32:	f003 020f 	and.w	r2, r3, #15
 8001a36:	4613      	mov	r3, r2
 8001a38:	00db      	lsls	r3, r3, #3
 8001a3a:	1a9b      	subs	r3, r3, r2
 8001a3c:	009b      	lsls	r3, r3, #2
 8001a3e:	3338      	adds	r3, #56	; 0x38
 8001a40:	68fa      	ldr	r2, [r7, #12]
 8001a42:	4413      	add	r3, r2
 8001a44:	3304      	adds	r3, #4
 8001a46:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001a48:	697b      	ldr	r3, [r7, #20]
 8001a4a:	687a      	ldr	r2, [r7, #4]
 8001a4c:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8001a4e:	697b      	ldr	r3, [r7, #20]
 8001a50:	683a      	ldr	r2, [r7, #0]
 8001a52:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8001a54:	697b      	ldr	r3, [r7, #20]
 8001a56:	2200      	movs	r2, #0
 8001a58:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8001a5a:	697b      	ldr	r3, [r7, #20]
 8001a5c:	2201      	movs	r2, #1
 8001a5e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001a60:	7afb      	ldrb	r3, [r7, #11]
 8001a62:	f003 030f 	and.w	r3, r3, #15
 8001a66:	b2da      	uxtb	r2, r3
 8001a68:	697b      	ldr	r3, [r7, #20]
 8001a6a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	691b      	ldr	r3, [r3, #16]
 8001a70:	2b01      	cmp	r3, #1
 8001a72:	d102      	bne.n	8001a7a <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001a74:	687a      	ldr	r2, [r7, #4]
 8001a76:	697b      	ldr	r3, [r7, #20]
 8001a78:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001a7a:	7afb      	ldrb	r3, [r7, #11]
 8001a7c:	f003 030f 	and.w	r3, r3, #15
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d109      	bne.n	8001a98 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	6818      	ldr	r0, [r3, #0]
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	691b      	ldr	r3, [r3, #16]
 8001a8c:	b2db      	uxtb	r3, r3
 8001a8e:	461a      	mov	r2, r3
 8001a90:	6979      	ldr	r1, [r7, #20]
 8001a92:	f001 fe69 	bl	8003768 <USB_EP0StartXfer>
 8001a96:	e008      	b.n	8001aaa <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	6818      	ldr	r0, [r3, #0]
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	691b      	ldr	r3, [r3, #16]
 8001aa0:	b2db      	uxtb	r3, r3
 8001aa2:	461a      	mov	r2, r3
 8001aa4:	6979      	ldr	r1, [r7, #20]
 8001aa6:	f001 fc1b 	bl	80032e0 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001aaa:	2300      	movs	r3, #0
}
 8001aac:	4618      	mov	r0, r3
 8001aae:	3718      	adds	r7, #24
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	bd80      	pop	{r7, pc}

08001ab4 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b084      	sub	sp, #16
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
 8001abc:	460b      	mov	r3, r1
 8001abe:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001ac0:	78fb      	ldrb	r3, [r7, #3]
 8001ac2:	f003 020f 	and.w	r2, r3, #15
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	685b      	ldr	r3, [r3, #4]
 8001aca:	429a      	cmp	r2, r3
 8001acc:	d901      	bls.n	8001ad2 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001ace:	2301      	movs	r3, #1
 8001ad0:	e050      	b.n	8001b74 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001ad2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	da0f      	bge.n	8001afa <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001ada:	78fb      	ldrb	r3, [r7, #3]
 8001adc:	f003 020f 	and.w	r2, r3, #15
 8001ae0:	4613      	mov	r3, r2
 8001ae2:	00db      	lsls	r3, r3, #3
 8001ae4:	1a9b      	subs	r3, r3, r2
 8001ae6:	009b      	lsls	r3, r3, #2
 8001ae8:	3338      	adds	r3, #56	; 0x38
 8001aea:	687a      	ldr	r2, [r7, #4]
 8001aec:	4413      	add	r3, r2
 8001aee:	3304      	adds	r3, #4
 8001af0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	2201      	movs	r2, #1
 8001af6:	705a      	strb	r2, [r3, #1]
 8001af8:	e00d      	b.n	8001b16 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001afa:	78fa      	ldrb	r2, [r7, #3]
 8001afc:	4613      	mov	r3, r2
 8001afe:	00db      	lsls	r3, r3, #3
 8001b00:	1a9b      	subs	r3, r3, r2
 8001b02:	009b      	lsls	r3, r3, #2
 8001b04:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001b08:	687a      	ldr	r2, [r7, #4]
 8001b0a:	4413      	add	r3, r2
 8001b0c:	3304      	adds	r3, #4
 8001b0e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	2200      	movs	r2, #0
 8001b14:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	2201      	movs	r2, #1
 8001b1a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001b1c:	78fb      	ldrb	r3, [r7, #3]
 8001b1e:	f003 030f 	and.w	r3, r3, #15
 8001b22:	b2da      	uxtb	r2, r3
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001b2e:	2b01      	cmp	r3, #1
 8001b30:	d101      	bne.n	8001b36 <HAL_PCD_EP_SetStall+0x82>
 8001b32:	2302      	movs	r3, #2
 8001b34:	e01e      	b.n	8001b74 <HAL_PCD_EP_SetStall+0xc0>
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	2201      	movs	r2, #1
 8001b3a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	68f9      	ldr	r1, [r7, #12]
 8001b44:	4618      	mov	r0, r3
 8001b46:	f001 fff8 	bl	8003b3a <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001b4a:	78fb      	ldrb	r3, [r7, #3]
 8001b4c:	f003 030f 	and.w	r3, r3, #15
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d10a      	bne.n	8001b6a <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	6818      	ldr	r0, [r3, #0]
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	691b      	ldr	r3, [r3, #16]
 8001b5c:	b2d9      	uxtb	r1, r3
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001b64:	461a      	mov	r2, r3
 8001b66:	f002 f9e9 	bl	8003f3c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8001b72:	2300      	movs	r3, #0
}
 8001b74:	4618      	mov	r0, r3
 8001b76:	3710      	adds	r7, #16
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	bd80      	pop	{r7, pc}

08001b7c <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	b084      	sub	sp, #16
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	6078      	str	r0, [r7, #4]
 8001b84:	460b      	mov	r3, r1
 8001b86:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001b88:	78fb      	ldrb	r3, [r7, #3]
 8001b8a:	f003 020f 	and.w	r2, r3, #15
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	685b      	ldr	r3, [r3, #4]
 8001b92:	429a      	cmp	r2, r3
 8001b94:	d901      	bls.n	8001b9a <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001b96:	2301      	movs	r3, #1
 8001b98:	e042      	b.n	8001c20 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001b9a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	da0f      	bge.n	8001bc2 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001ba2:	78fb      	ldrb	r3, [r7, #3]
 8001ba4:	f003 020f 	and.w	r2, r3, #15
 8001ba8:	4613      	mov	r3, r2
 8001baa:	00db      	lsls	r3, r3, #3
 8001bac:	1a9b      	subs	r3, r3, r2
 8001bae:	009b      	lsls	r3, r3, #2
 8001bb0:	3338      	adds	r3, #56	; 0x38
 8001bb2:	687a      	ldr	r2, [r7, #4]
 8001bb4:	4413      	add	r3, r2
 8001bb6:	3304      	adds	r3, #4
 8001bb8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	2201      	movs	r2, #1
 8001bbe:	705a      	strb	r2, [r3, #1]
 8001bc0:	e00f      	b.n	8001be2 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001bc2:	78fb      	ldrb	r3, [r7, #3]
 8001bc4:	f003 020f 	and.w	r2, r3, #15
 8001bc8:	4613      	mov	r3, r2
 8001bca:	00db      	lsls	r3, r3, #3
 8001bcc:	1a9b      	subs	r3, r3, r2
 8001bce:	009b      	lsls	r3, r3, #2
 8001bd0:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001bd4:	687a      	ldr	r2, [r7, #4]
 8001bd6:	4413      	add	r3, r2
 8001bd8:	3304      	adds	r3, #4
 8001bda:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	2200      	movs	r2, #0
 8001be0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	2200      	movs	r2, #0
 8001be6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001be8:	78fb      	ldrb	r3, [r7, #3]
 8001bea:	f003 030f 	and.w	r3, r3, #15
 8001bee:	b2da      	uxtb	r2, r3
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001bfa:	2b01      	cmp	r3, #1
 8001bfc:	d101      	bne.n	8001c02 <HAL_PCD_EP_ClrStall+0x86>
 8001bfe:	2302      	movs	r3, #2
 8001c00:	e00e      	b.n	8001c20 <HAL_PCD_EP_ClrStall+0xa4>
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	2201      	movs	r2, #1
 8001c06:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	68f9      	ldr	r1, [r7, #12]
 8001c10:	4618      	mov	r0, r3
 8001c12:	f002 f800 	bl	8003c16 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	2200      	movs	r2, #0
 8001c1a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8001c1e:	2300      	movs	r3, #0
}
 8001c20:	4618      	mov	r0, r3
 8001c22:	3710      	adds	r7, #16
 8001c24:	46bd      	mov	sp, r7
 8001c26:	bd80      	pop	{r7, pc}

08001c28 <HAL_PCD_EP_Flush>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Flush(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b082      	sub	sp, #8
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]
 8001c30:	460b      	mov	r3, r1
 8001c32:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001c3a:	2b01      	cmp	r3, #1
 8001c3c:	d101      	bne.n	8001c42 <HAL_PCD_EP_Flush+0x1a>
 8001c3e:	2302      	movs	r3, #2
 8001c40:	e01b      	b.n	8001c7a <HAL_PCD_EP_Flush+0x52>
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	2201      	movs	r2, #1
 8001c46:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((ep_addr & 0x80U) == 0x80U)
 8001c4a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	da09      	bge.n	8001c66 <HAL_PCD_EP_Flush+0x3e>
  {
    (void)USB_FlushTxFifo(hpcd->Instance, (uint32_t)ep_addr & EP_ADDR_MSK);
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681a      	ldr	r2, [r3, #0]
 8001c56:	78fb      	ldrb	r3, [r7, #3]
 8001c58:	f003 030f 	and.w	r3, r3, #15
 8001c5c:	4619      	mov	r1, r3
 8001c5e:	4610      	mov	r0, r2
 8001c60:	f001 f958 	bl	8002f14 <USB_FlushTxFifo>
 8001c64:	e004      	b.n	8001c70 <HAL_PCD_EP_Flush+0x48>
  }
  else
  {
    (void)USB_FlushRxFifo(hpcd->Instance);
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	f001 f976 	bl	8002f5c <USB_FlushRxFifo>
  }

  __HAL_UNLOCK(hpcd);
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	2200      	movs	r2, #0
 8001c74:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8001c78:	2300      	movs	r3, #0
}
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	3708      	adds	r7, #8
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	bd80      	pop	{r7, pc}

08001c82 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8001c82:	b580      	push	{r7, lr}
 8001c84:	b08a      	sub	sp, #40	; 0x28
 8001c86:	af02      	add	r7, sp, #8
 8001c88:	6078      	str	r0, [r7, #4]
 8001c8a:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001c92:	697b      	ldr	r3, [r7, #20]
 8001c94:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8001c96:	683a      	ldr	r2, [r7, #0]
 8001c98:	4613      	mov	r3, r2
 8001c9a:	00db      	lsls	r3, r3, #3
 8001c9c:	1a9b      	subs	r3, r3, r2
 8001c9e:	009b      	lsls	r3, r3, #2
 8001ca0:	3338      	adds	r3, #56	; 0x38
 8001ca2:	687a      	ldr	r2, [r7, #4]
 8001ca4:	4413      	add	r3, r2
 8001ca6:	3304      	adds	r3, #4
 8001ca8:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	699a      	ldr	r2, [r3, #24]
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	695b      	ldr	r3, [r3, #20]
 8001cb2:	429a      	cmp	r2, r3
 8001cb4:	d901      	bls.n	8001cba <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8001cb6:	2301      	movs	r3, #1
 8001cb8:	e06c      	b.n	8001d94 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	695a      	ldr	r2, [r3, #20]
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	699b      	ldr	r3, [r3, #24]
 8001cc2:	1ad3      	subs	r3, r2, r3
 8001cc4:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	689b      	ldr	r3, [r3, #8]
 8001cca:	69fa      	ldr	r2, [r7, #28]
 8001ccc:	429a      	cmp	r2, r3
 8001cce:	d902      	bls.n	8001cd6 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	689b      	ldr	r3, [r3, #8]
 8001cd4:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8001cd6:	69fb      	ldr	r3, [r7, #28]
 8001cd8:	3303      	adds	r3, #3
 8001cda:	089b      	lsrs	r3, r3, #2
 8001cdc:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001cde:	e02b      	b.n	8001d38 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	695a      	ldr	r2, [r3, #20]
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	699b      	ldr	r3, [r3, #24]
 8001ce8:	1ad3      	subs	r3, r2, r3
 8001cea:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	689b      	ldr	r3, [r3, #8]
 8001cf0:	69fa      	ldr	r2, [r7, #28]
 8001cf2:	429a      	cmp	r2, r3
 8001cf4:	d902      	bls.n	8001cfc <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	689b      	ldr	r3, [r3, #8]
 8001cfa:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8001cfc:	69fb      	ldr	r3, [r7, #28]
 8001cfe:	3303      	adds	r3, #3
 8001d00:	089b      	lsrs	r3, r3, #2
 8001d02:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	68d9      	ldr	r1, [r3, #12]
 8001d08:	683b      	ldr	r3, [r7, #0]
 8001d0a:	b2da      	uxtb	r2, r3
 8001d0c:	69fb      	ldr	r3, [r7, #28]
 8001d0e:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8001d14:	b2db      	uxtb	r3, r3
 8001d16:	9300      	str	r3, [sp, #0]
 8001d18:	4603      	mov	r3, r0
 8001d1a:	6978      	ldr	r0, [r7, #20]
 8001d1c:	f001 fe77 	bl	8003a0e <USB_WritePacket>

    ep->xfer_buff  += len;
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	68da      	ldr	r2, [r3, #12]
 8001d24:	69fb      	ldr	r3, [r7, #28]
 8001d26:	441a      	add	r2, r3
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	699a      	ldr	r2, [r3, #24]
 8001d30:	69fb      	ldr	r3, [r7, #28]
 8001d32:	441a      	add	r2, r3
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001d38:	683b      	ldr	r3, [r7, #0]
 8001d3a:	015a      	lsls	r2, r3, #5
 8001d3c:	693b      	ldr	r3, [r7, #16]
 8001d3e:	4413      	add	r3, r2
 8001d40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001d44:	699b      	ldr	r3, [r3, #24]
 8001d46:	b29b      	uxth	r3, r3
 8001d48:	69ba      	ldr	r2, [r7, #24]
 8001d4a:	429a      	cmp	r2, r3
 8001d4c:	d809      	bhi.n	8001d62 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	699a      	ldr	r2, [r3, #24]
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001d56:	429a      	cmp	r2, r3
 8001d58:	d203      	bcs.n	8001d62 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	695b      	ldr	r3, [r3, #20]
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d1be      	bne.n	8001ce0 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	695a      	ldr	r2, [r3, #20]
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	699b      	ldr	r3, [r3, #24]
 8001d6a:	429a      	cmp	r2, r3
 8001d6c:	d811      	bhi.n	8001d92 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001d6e:	683b      	ldr	r3, [r7, #0]
 8001d70:	f003 030f 	and.w	r3, r3, #15
 8001d74:	2201      	movs	r2, #1
 8001d76:	fa02 f303 	lsl.w	r3, r2, r3
 8001d7a:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001d7c:	693b      	ldr	r3, [r7, #16]
 8001d7e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001d82:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001d84:	68bb      	ldr	r3, [r7, #8]
 8001d86:	43db      	mvns	r3, r3
 8001d88:	6939      	ldr	r1, [r7, #16]
 8001d8a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8001d8e:	4013      	ands	r3, r2
 8001d90:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8001d92:	2300      	movs	r3, #0
}
 8001d94:	4618      	mov	r0, r3
 8001d96:	3720      	adds	r7, #32
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	bd80      	pop	{r7, pc}

08001d9c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	b086      	sub	sp, #24
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]
 8001da4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001dac:	697b      	ldr	r3, [r7, #20]
 8001dae:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8001db0:	697b      	ldr	r3, [r7, #20]
 8001db2:	333c      	adds	r3, #60	; 0x3c
 8001db4:	3304      	adds	r3, #4
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8001dba:	683b      	ldr	r3, [r7, #0]
 8001dbc:	015a      	lsls	r2, r3, #5
 8001dbe:	693b      	ldr	r3, [r7, #16]
 8001dc0:	4413      	add	r3, r2
 8001dc2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001dc6:	689b      	ldr	r3, [r3, #8]
 8001dc8:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	691b      	ldr	r3, [r3, #16]
 8001dce:	2b01      	cmp	r3, #1
 8001dd0:	f040 80a0 	bne.w	8001f14 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8001dd4:	68bb      	ldr	r3, [r7, #8]
 8001dd6:	f003 0308 	and.w	r3, r3, #8
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d015      	beq.n	8001e0a <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	4a72      	ldr	r2, [pc, #456]	; (8001fac <PCD_EP_OutXfrComplete_int+0x210>)
 8001de2:	4293      	cmp	r3, r2
 8001de4:	f240 80dd 	bls.w	8001fa2 <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8001de8:	68bb      	ldr	r3, [r7, #8]
 8001dea:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	f000 80d7 	beq.w	8001fa2 <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8001df4:	683b      	ldr	r3, [r7, #0]
 8001df6:	015a      	lsls	r2, r3, #5
 8001df8:	693b      	ldr	r3, [r7, #16]
 8001dfa:	4413      	add	r3, r2
 8001dfc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001e00:	461a      	mov	r2, r3
 8001e02:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001e06:	6093      	str	r3, [r2, #8]
 8001e08:	e0cb      	b.n	8001fa2 <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8001e0a:	68bb      	ldr	r3, [r7, #8]
 8001e0c:	f003 0320 	and.w	r3, r3, #32
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d009      	beq.n	8001e28 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001e14:	683b      	ldr	r3, [r7, #0]
 8001e16:	015a      	lsls	r2, r3, #5
 8001e18:	693b      	ldr	r3, [r7, #16]
 8001e1a:	4413      	add	r3, r2
 8001e1c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001e20:	461a      	mov	r2, r3
 8001e22:	2320      	movs	r3, #32
 8001e24:	6093      	str	r3, [r2, #8]
 8001e26:	e0bc      	b.n	8001fa2 <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8001e28:	68bb      	ldr	r3, [r7, #8]
 8001e2a:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	f040 80b7 	bne.w	8001fa2 <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	4a5d      	ldr	r2, [pc, #372]	; (8001fac <PCD_EP_OutXfrComplete_int+0x210>)
 8001e38:	4293      	cmp	r3, r2
 8001e3a:	d90f      	bls.n	8001e5c <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8001e3c:	68bb      	ldr	r3, [r7, #8]
 8001e3e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d00a      	beq.n	8001e5c <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8001e46:	683b      	ldr	r3, [r7, #0]
 8001e48:	015a      	lsls	r2, r3, #5
 8001e4a:	693b      	ldr	r3, [r7, #16]
 8001e4c:	4413      	add	r3, r2
 8001e4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001e52:	461a      	mov	r2, r3
 8001e54:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001e58:	6093      	str	r3, [r2, #8]
 8001e5a:	e0a2      	b.n	8001fa2 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8001e5c:	6879      	ldr	r1, [r7, #4]
 8001e5e:	683a      	ldr	r2, [r7, #0]
 8001e60:	4613      	mov	r3, r2
 8001e62:	00db      	lsls	r3, r3, #3
 8001e64:	1a9b      	subs	r3, r3, r2
 8001e66:	009b      	lsls	r3, r3, #2
 8001e68:	440b      	add	r3, r1
 8001e6a:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8001e6e:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8001e70:	683b      	ldr	r3, [r7, #0]
 8001e72:	0159      	lsls	r1, r3, #5
 8001e74:	693b      	ldr	r3, [r7, #16]
 8001e76:	440b      	add	r3, r1
 8001e78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001e7c:	691b      	ldr	r3, [r3, #16]
 8001e7e:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8001e82:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8001e84:	6878      	ldr	r0, [r7, #4]
 8001e86:	683a      	ldr	r2, [r7, #0]
 8001e88:	4613      	mov	r3, r2
 8001e8a:	00db      	lsls	r3, r3, #3
 8001e8c:	1a9b      	subs	r3, r3, r2
 8001e8e:	009b      	lsls	r3, r3, #2
 8001e90:	4403      	add	r3, r0
 8001e92:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8001e96:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8001e98:	6879      	ldr	r1, [r7, #4]
 8001e9a:	683a      	ldr	r2, [r7, #0]
 8001e9c:	4613      	mov	r3, r2
 8001e9e:	00db      	lsls	r3, r3, #3
 8001ea0:	1a9b      	subs	r3, r3, r2
 8001ea2:	009b      	lsls	r3, r3, #2
 8001ea4:	440b      	add	r3, r1
 8001ea6:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001eaa:	6819      	ldr	r1, [r3, #0]
 8001eac:	6878      	ldr	r0, [r7, #4]
 8001eae:	683a      	ldr	r2, [r7, #0]
 8001eb0:	4613      	mov	r3, r2
 8001eb2:	00db      	lsls	r3, r3, #3
 8001eb4:	1a9b      	subs	r3, r3, r2
 8001eb6:	009b      	lsls	r3, r3, #2
 8001eb8:	4403      	add	r3, r0
 8001eba:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	4419      	add	r1, r3
 8001ec2:	6878      	ldr	r0, [r7, #4]
 8001ec4:	683a      	ldr	r2, [r7, #0]
 8001ec6:	4613      	mov	r3, r2
 8001ec8:	00db      	lsls	r3, r3, #3
 8001eca:	1a9b      	subs	r3, r3, r2
 8001ecc:	009b      	lsls	r3, r3, #2
 8001ece:	4403      	add	r3, r0
 8001ed0:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001ed4:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8001ed6:	683b      	ldr	r3, [r7, #0]
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d114      	bne.n	8001f06 <PCD_EP_OutXfrComplete_int+0x16a>
 8001edc:	6879      	ldr	r1, [r7, #4]
 8001ede:	683a      	ldr	r2, [r7, #0]
 8001ee0:	4613      	mov	r3, r2
 8001ee2:	00db      	lsls	r3, r3, #3
 8001ee4:	1a9b      	subs	r3, r3, r2
 8001ee6:	009b      	lsls	r3, r3, #2
 8001ee8:	440b      	add	r3, r1
 8001eea:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d108      	bne.n	8001f06 <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	6818      	ldr	r0, [r3, #0]
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001efe:	461a      	mov	r2, r3
 8001f00:	2101      	movs	r1, #1
 8001f02:	f002 f81b 	bl	8003f3c <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8001f06:	683b      	ldr	r3, [r7, #0]
 8001f08:	b2db      	uxtb	r3, r3
 8001f0a:	4619      	mov	r1, r3
 8001f0c:	6878      	ldr	r0, [r7, #4]
 8001f0e:	f005 f9dd 	bl	80072cc <HAL_PCD_DataOutStageCallback>
 8001f12:	e046      	b.n	8001fa2 <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	4a26      	ldr	r2, [pc, #152]	; (8001fb0 <PCD_EP_OutXfrComplete_int+0x214>)
 8001f18:	4293      	cmp	r3, r2
 8001f1a:	d124      	bne.n	8001f66 <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8001f1c:	68bb      	ldr	r3, [r7, #8]
 8001f1e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d00a      	beq.n	8001f3c <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8001f26:	683b      	ldr	r3, [r7, #0]
 8001f28:	015a      	lsls	r2, r3, #5
 8001f2a:	693b      	ldr	r3, [r7, #16]
 8001f2c:	4413      	add	r3, r2
 8001f2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001f32:	461a      	mov	r2, r3
 8001f34:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001f38:	6093      	str	r3, [r2, #8]
 8001f3a:	e032      	b.n	8001fa2 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001f3c:	68bb      	ldr	r3, [r7, #8]
 8001f3e:	f003 0320 	and.w	r3, r3, #32
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d008      	beq.n	8001f58 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001f46:	683b      	ldr	r3, [r7, #0]
 8001f48:	015a      	lsls	r2, r3, #5
 8001f4a:	693b      	ldr	r3, [r7, #16]
 8001f4c:	4413      	add	r3, r2
 8001f4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001f52:	461a      	mov	r2, r3
 8001f54:	2320      	movs	r3, #32
 8001f56:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8001f58:	683b      	ldr	r3, [r7, #0]
 8001f5a:	b2db      	uxtb	r3, r3
 8001f5c:	4619      	mov	r1, r3
 8001f5e:	6878      	ldr	r0, [r7, #4]
 8001f60:	f005 f9b4 	bl	80072cc <HAL_PCD_DataOutStageCallback>
 8001f64:	e01d      	b.n	8001fa2 <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8001f66:	683b      	ldr	r3, [r7, #0]
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d114      	bne.n	8001f96 <PCD_EP_OutXfrComplete_int+0x1fa>
 8001f6c:	6879      	ldr	r1, [r7, #4]
 8001f6e:	683a      	ldr	r2, [r7, #0]
 8001f70:	4613      	mov	r3, r2
 8001f72:	00db      	lsls	r3, r3, #3
 8001f74:	1a9b      	subs	r3, r3, r2
 8001f76:	009b      	lsls	r3, r3, #2
 8001f78:	440b      	add	r3, r1
 8001f7a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d108      	bne.n	8001f96 <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	6818      	ldr	r0, [r3, #0]
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001f8e:	461a      	mov	r2, r3
 8001f90:	2100      	movs	r1, #0
 8001f92:	f001 ffd3 	bl	8003f3c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8001f96:	683b      	ldr	r3, [r7, #0]
 8001f98:	b2db      	uxtb	r3, r3
 8001f9a:	4619      	mov	r1, r3
 8001f9c:	6878      	ldr	r0, [r7, #4]
 8001f9e:	f005 f995 	bl	80072cc <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8001fa2:	2300      	movs	r3, #0
}
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	3718      	adds	r7, #24
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	bd80      	pop	{r7, pc}
 8001fac:	4f54300a 	.word	0x4f54300a
 8001fb0:	4f54310a 	.word	0x4f54310a

08001fb4 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	b086      	sub	sp, #24
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	6078      	str	r0, [r7, #4]
 8001fbc:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001fc4:	697b      	ldr	r3, [r7, #20]
 8001fc6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8001fc8:	697b      	ldr	r3, [r7, #20]
 8001fca:	333c      	adds	r3, #60	; 0x3c
 8001fcc:	3304      	adds	r3, #4
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8001fd2:	683b      	ldr	r3, [r7, #0]
 8001fd4:	015a      	lsls	r2, r3, #5
 8001fd6:	693b      	ldr	r3, [r7, #16]
 8001fd8:	4413      	add	r3, r2
 8001fda:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001fde:	689b      	ldr	r3, [r3, #8]
 8001fe0:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	4a15      	ldr	r2, [pc, #84]	; (800203c <PCD_EP_OutSetupPacket_int+0x88>)
 8001fe6:	4293      	cmp	r3, r2
 8001fe8:	d90e      	bls.n	8002008 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8001fea:	68bb      	ldr	r3, [r7, #8]
 8001fec:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d009      	beq.n	8002008 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8001ff4:	683b      	ldr	r3, [r7, #0]
 8001ff6:	015a      	lsls	r2, r3, #5
 8001ff8:	693b      	ldr	r3, [r7, #16]
 8001ffa:	4413      	add	r3, r2
 8001ffc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002000:	461a      	mov	r2, r3
 8002002:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002006:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8002008:	6878      	ldr	r0, [r7, #4]
 800200a:	f005 f94d 	bl	80072a8 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	4a0a      	ldr	r2, [pc, #40]	; (800203c <PCD_EP_OutSetupPacket_int+0x88>)
 8002012:	4293      	cmp	r3, r2
 8002014:	d90c      	bls.n	8002030 <PCD_EP_OutSetupPacket_int+0x7c>
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	691b      	ldr	r3, [r3, #16]
 800201a:	2b01      	cmp	r3, #1
 800201c:	d108      	bne.n	8002030 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	6818      	ldr	r0, [r3, #0]
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002028:	461a      	mov	r2, r3
 800202a:	2101      	movs	r1, #1
 800202c:	f001 ff86 	bl	8003f3c <USB_EP0_OutStart>
  }

  return HAL_OK;
 8002030:	2300      	movs	r3, #0
}
 8002032:	4618      	mov	r0, r3
 8002034:	3718      	adds	r7, #24
 8002036:	46bd      	mov	sp, r7
 8002038:	bd80      	pop	{r7, pc}
 800203a:	bf00      	nop
 800203c:	4f54300a 	.word	0x4f54300a

08002040 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8002040:	b480      	push	{r7}
 8002042:	b085      	sub	sp, #20
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]
 8002048:	460b      	mov	r3, r1
 800204a:	70fb      	strb	r3, [r7, #3]
 800204c:	4613      	mov	r3, r2
 800204e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002056:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8002058:	78fb      	ldrb	r3, [r7, #3]
 800205a:	2b00      	cmp	r3, #0
 800205c:	d107      	bne.n	800206e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800205e:	883b      	ldrh	r3, [r7, #0]
 8002060:	0419      	lsls	r1, r3, #16
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	68ba      	ldr	r2, [r7, #8]
 8002068:	430a      	orrs	r2, r1
 800206a:	629a      	str	r2, [r3, #40]	; 0x28
 800206c:	e028      	b.n	80020c0 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002074:	0c1b      	lsrs	r3, r3, #16
 8002076:	68ba      	ldr	r2, [r7, #8]
 8002078:	4413      	add	r3, r2
 800207a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800207c:	2300      	movs	r3, #0
 800207e:	73fb      	strb	r3, [r7, #15]
 8002080:	e00d      	b.n	800209e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681a      	ldr	r2, [r3, #0]
 8002086:	7bfb      	ldrb	r3, [r7, #15]
 8002088:	3340      	adds	r3, #64	; 0x40
 800208a:	009b      	lsls	r3, r3, #2
 800208c:	4413      	add	r3, r2
 800208e:	685b      	ldr	r3, [r3, #4]
 8002090:	0c1b      	lsrs	r3, r3, #16
 8002092:	68ba      	ldr	r2, [r7, #8]
 8002094:	4413      	add	r3, r2
 8002096:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002098:	7bfb      	ldrb	r3, [r7, #15]
 800209a:	3301      	adds	r3, #1
 800209c:	73fb      	strb	r3, [r7, #15]
 800209e:	7bfa      	ldrb	r2, [r7, #15]
 80020a0:	78fb      	ldrb	r3, [r7, #3]
 80020a2:	3b01      	subs	r3, #1
 80020a4:	429a      	cmp	r2, r3
 80020a6:	d3ec      	bcc.n	8002082 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80020a8:	883b      	ldrh	r3, [r7, #0]
 80020aa:	0418      	lsls	r0, r3, #16
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	6819      	ldr	r1, [r3, #0]
 80020b0:	78fb      	ldrb	r3, [r7, #3]
 80020b2:	3b01      	subs	r3, #1
 80020b4:	68ba      	ldr	r2, [r7, #8]
 80020b6:	4302      	orrs	r2, r0
 80020b8:	3340      	adds	r3, #64	; 0x40
 80020ba:	009b      	lsls	r3, r3, #2
 80020bc:	440b      	add	r3, r1
 80020be:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80020c0:	2300      	movs	r3, #0
}
 80020c2:	4618      	mov	r0, r3
 80020c4:	3714      	adds	r7, #20
 80020c6:	46bd      	mov	sp, r7
 80020c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020cc:	4770      	bx	lr

080020ce <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80020ce:	b480      	push	{r7}
 80020d0:	b083      	sub	sp, #12
 80020d2:	af00      	add	r7, sp, #0
 80020d4:	6078      	str	r0, [r7, #4]
 80020d6:	460b      	mov	r3, r1
 80020d8:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	887a      	ldrh	r2, [r7, #2]
 80020e0:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80020e2:	2300      	movs	r3, #0
}
 80020e4:	4618      	mov	r0, r3
 80020e6:	370c      	adds	r7, #12
 80020e8:	46bd      	mov	sp, r7
 80020ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ee:	4770      	bx	lr

080020f0 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80020f0:	b480      	push	{r7}
 80020f2:	b083      	sub	sp, #12
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]
 80020f8:	460b      	mov	r3, r1
 80020fa:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80020fc:	bf00      	nop
 80020fe:	370c      	adds	r7, #12
 8002100:	46bd      	mov	sp, r7
 8002102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002106:	4770      	bx	lr

08002108 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002108:	b580      	push	{r7, lr}
 800210a:	b086      	sub	sp, #24
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	2b00      	cmp	r3, #0
 8002114:	d101      	bne.n	800211a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002116:	2301      	movs	r3, #1
 8002118:	e267      	b.n	80025ea <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f003 0301 	and.w	r3, r3, #1
 8002122:	2b00      	cmp	r3, #0
 8002124:	d075      	beq.n	8002212 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002126:	4b88      	ldr	r3, [pc, #544]	; (8002348 <HAL_RCC_OscConfig+0x240>)
 8002128:	689b      	ldr	r3, [r3, #8]
 800212a:	f003 030c 	and.w	r3, r3, #12
 800212e:	2b04      	cmp	r3, #4
 8002130:	d00c      	beq.n	800214c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002132:	4b85      	ldr	r3, [pc, #532]	; (8002348 <HAL_RCC_OscConfig+0x240>)
 8002134:	689b      	ldr	r3, [r3, #8]
 8002136:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800213a:	2b08      	cmp	r3, #8
 800213c:	d112      	bne.n	8002164 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800213e:	4b82      	ldr	r3, [pc, #520]	; (8002348 <HAL_RCC_OscConfig+0x240>)
 8002140:	685b      	ldr	r3, [r3, #4]
 8002142:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002146:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800214a:	d10b      	bne.n	8002164 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800214c:	4b7e      	ldr	r3, [pc, #504]	; (8002348 <HAL_RCC_OscConfig+0x240>)
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002154:	2b00      	cmp	r3, #0
 8002156:	d05b      	beq.n	8002210 <HAL_RCC_OscConfig+0x108>
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	685b      	ldr	r3, [r3, #4]
 800215c:	2b00      	cmp	r3, #0
 800215e:	d157      	bne.n	8002210 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002160:	2301      	movs	r3, #1
 8002162:	e242      	b.n	80025ea <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	685b      	ldr	r3, [r3, #4]
 8002168:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800216c:	d106      	bne.n	800217c <HAL_RCC_OscConfig+0x74>
 800216e:	4b76      	ldr	r3, [pc, #472]	; (8002348 <HAL_RCC_OscConfig+0x240>)
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	4a75      	ldr	r2, [pc, #468]	; (8002348 <HAL_RCC_OscConfig+0x240>)
 8002174:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002178:	6013      	str	r3, [r2, #0]
 800217a:	e01d      	b.n	80021b8 <HAL_RCC_OscConfig+0xb0>
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	685b      	ldr	r3, [r3, #4]
 8002180:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002184:	d10c      	bne.n	80021a0 <HAL_RCC_OscConfig+0x98>
 8002186:	4b70      	ldr	r3, [pc, #448]	; (8002348 <HAL_RCC_OscConfig+0x240>)
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	4a6f      	ldr	r2, [pc, #444]	; (8002348 <HAL_RCC_OscConfig+0x240>)
 800218c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002190:	6013      	str	r3, [r2, #0]
 8002192:	4b6d      	ldr	r3, [pc, #436]	; (8002348 <HAL_RCC_OscConfig+0x240>)
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	4a6c      	ldr	r2, [pc, #432]	; (8002348 <HAL_RCC_OscConfig+0x240>)
 8002198:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800219c:	6013      	str	r3, [r2, #0]
 800219e:	e00b      	b.n	80021b8 <HAL_RCC_OscConfig+0xb0>
 80021a0:	4b69      	ldr	r3, [pc, #420]	; (8002348 <HAL_RCC_OscConfig+0x240>)
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	4a68      	ldr	r2, [pc, #416]	; (8002348 <HAL_RCC_OscConfig+0x240>)
 80021a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80021aa:	6013      	str	r3, [r2, #0]
 80021ac:	4b66      	ldr	r3, [pc, #408]	; (8002348 <HAL_RCC_OscConfig+0x240>)
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	4a65      	ldr	r2, [pc, #404]	; (8002348 <HAL_RCC_OscConfig+0x240>)
 80021b2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80021b6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	685b      	ldr	r3, [r3, #4]
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d013      	beq.n	80021e8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021c0:	f7fe fb2c 	bl	800081c <HAL_GetTick>
 80021c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021c6:	e008      	b.n	80021da <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80021c8:	f7fe fb28 	bl	800081c <HAL_GetTick>
 80021cc:	4602      	mov	r2, r0
 80021ce:	693b      	ldr	r3, [r7, #16]
 80021d0:	1ad3      	subs	r3, r2, r3
 80021d2:	2b64      	cmp	r3, #100	; 0x64
 80021d4:	d901      	bls.n	80021da <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80021d6:	2303      	movs	r3, #3
 80021d8:	e207      	b.n	80025ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021da:	4b5b      	ldr	r3, [pc, #364]	; (8002348 <HAL_RCC_OscConfig+0x240>)
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d0f0      	beq.n	80021c8 <HAL_RCC_OscConfig+0xc0>
 80021e6:	e014      	b.n	8002212 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021e8:	f7fe fb18 	bl	800081c <HAL_GetTick>
 80021ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80021ee:	e008      	b.n	8002202 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80021f0:	f7fe fb14 	bl	800081c <HAL_GetTick>
 80021f4:	4602      	mov	r2, r0
 80021f6:	693b      	ldr	r3, [r7, #16]
 80021f8:	1ad3      	subs	r3, r2, r3
 80021fa:	2b64      	cmp	r3, #100	; 0x64
 80021fc:	d901      	bls.n	8002202 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80021fe:	2303      	movs	r3, #3
 8002200:	e1f3      	b.n	80025ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002202:	4b51      	ldr	r3, [pc, #324]	; (8002348 <HAL_RCC_OscConfig+0x240>)
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800220a:	2b00      	cmp	r3, #0
 800220c:	d1f0      	bne.n	80021f0 <HAL_RCC_OscConfig+0xe8>
 800220e:	e000      	b.n	8002212 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002210:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f003 0302 	and.w	r3, r3, #2
 800221a:	2b00      	cmp	r3, #0
 800221c:	d063      	beq.n	80022e6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800221e:	4b4a      	ldr	r3, [pc, #296]	; (8002348 <HAL_RCC_OscConfig+0x240>)
 8002220:	689b      	ldr	r3, [r3, #8]
 8002222:	f003 030c 	and.w	r3, r3, #12
 8002226:	2b00      	cmp	r3, #0
 8002228:	d00b      	beq.n	8002242 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800222a:	4b47      	ldr	r3, [pc, #284]	; (8002348 <HAL_RCC_OscConfig+0x240>)
 800222c:	689b      	ldr	r3, [r3, #8]
 800222e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002232:	2b08      	cmp	r3, #8
 8002234:	d11c      	bne.n	8002270 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002236:	4b44      	ldr	r3, [pc, #272]	; (8002348 <HAL_RCC_OscConfig+0x240>)
 8002238:	685b      	ldr	r3, [r3, #4]
 800223a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800223e:	2b00      	cmp	r3, #0
 8002240:	d116      	bne.n	8002270 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002242:	4b41      	ldr	r3, [pc, #260]	; (8002348 <HAL_RCC_OscConfig+0x240>)
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f003 0302 	and.w	r3, r3, #2
 800224a:	2b00      	cmp	r3, #0
 800224c:	d005      	beq.n	800225a <HAL_RCC_OscConfig+0x152>
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	68db      	ldr	r3, [r3, #12]
 8002252:	2b01      	cmp	r3, #1
 8002254:	d001      	beq.n	800225a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002256:	2301      	movs	r3, #1
 8002258:	e1c7      	b.n	80025ea <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800225a:	4b3b      	ldr	r3, [pc, #236]	; (8002348 <HAL_RCC_OscConfig+0x240>)
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	691b      	ldr	r3, [r3, #16]
 8002266:	00db      	lsls	r3, r3, #3
 8002268:	4937      	ldr	r1, [pc, #220]	; (8002348 <HAL_RCC_OscConfig+0x240>)
 800226a:	4313      	orrs	r3, r2
 800226c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800226e:	e03a      	b.n	80022e6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	68db      	ldr	r3, [r3, #12]
 8002274:	2b00      	cmp	r3, #0
 8002276:	d020      	beq.n	80022ba <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002278:	4b34      	ldr	r3, [pc, #208]	; (800234c <HAL_RCC_OscConfig+0x244>)
 800227a:	2201      	movs	r2, #1
 800227c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800227e:	f7fe facd 	bl	800081c <HAL_GetTick>
 8002282:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002284:	e008      	b.n	8002298 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002286:	f7fe fac9 	bl	800081c <HAL_GetTick>
 800228a:	4602      	mov	r2, r0
 800228c:	693b      	ldr	r3, [r7, #16]
 800228e:	1ad3      	subs	r3, r2, r3
 8002290:	2b02      	cmp	r3, #2
 8002292:	d901      	bls.n	8002298 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002294:	2303      	movs	r3, #3
 8002296:	e1a8      	b.n	80025ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002298:	4b2b      	ldr	r3, [pc, #172]	; (8002348 <HAL_RCC_OscConfig+0x240>)
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f003 0302 	and.w	r3, r3, #2
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d0f0      	beq.n	8002286 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022a4:	4b28      	ldr	r3, [pc, #160]	; (8002348 <HAL_RCC_OscConfig+0x240>)
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	691b      	ldr	r3, [r3, #16]
 80022b0:	00db      	lsls	r3, r3, #3
 80022b2:	4925      	ldr	r1, [pc, #148]	; (8002348 <HAL_RCC_OscConfig+0x240>)
 80022b4:	4313      	orrs	r3, r2
 80022b6:	600b      	str	r3, [r1, #0]
 80022b8:	e015      	b.n	80022e6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80022ba:	4b24      	ldr	r3, [pc, #144]	; (800234c <HAL_RCC_OscConfig+0x244>)
 80022bc:	2200      	movs	r2, #0
 80022be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022c0:	f7fe faac 	bl	800081c <HAL_GetTick>
 80022c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80022c6:	e008      	b.n	80022da <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80022c8:	f7fe faa8 	bl	800081c <HAL_GetTick>
 80022cc:	4602      	mov	r2, r0
 80022ce:	693b      	ldr	r3, [r7, #16]
 80022d0:	1ad3      	subs	r3, r2, r3
 80022d2:	2b02      	cmp	r3, #2
 80022d4:	d901      	bls.n	80022da <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80022d6:	2303      	movs	r3, #3
 80022d8:	e187      	b.n	80025ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80022da:	4b1b      	ldr	r3, [pc, #108]	; (8002348 <HAL_RCC_OscConfig+0x240>)
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f003 0302 	and.w	r3, r3, #2
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d1f0      	bne.n	80022c8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f003 0308 	and.w	r3, r3, #8
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d036      	beq.n	8002360 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	695b      	ldr	r3, [r3, #20]
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d016      	beq.n	8002328 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80022fa:	4b15      	ldr	r3, [pc, #84]	; (8002350 <HAL_RCC_OscConfig+0x248>)
 80022fc:	2201      	movs	r2, #1
 80022fe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002300:	f7fe fa8c 	bl	800081c <HAL_GetTick>
 8002304:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002306:	e008      	b.n	800231a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002308:	f7fe fa88 	bl	800081c <HAL_GetTick>
 800230c:	4602      	mov	r2, r0
 800230e:	693b      	ldr	r3, [r7, #16]
 8002310:	1ad3      	subs	r3, r2, r3
 8002312:	2b02      	cmp	r3, #2
 8002314:	d901      	bls.n	800231a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002316:	2303      	movs	r3, #3
 8002318:	e167      	b.n	80025ea <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800231a:	4b0b      	ldr	r3, [pc, #44]	; (8002348 <HAL_RCC_OscConfig+0x240>)
 800231c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800231e:	f003 0302 	and.w	r3, r3, #2
 8002322:	2b00      	cmp	r3, #0
 8002324:	d0f0      	beq.n	8002308 <HAL_RCC_OscConfig+0x200>
 8002326:	e01b      	b.n	8002360 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002328:	4b09      	ldr	r3, [pc, #36]	; (8002350 <HAL_RCC_OscConfig+0x248>)
 800232a:	2200      	movs	r2, #0
 800232c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800232e:	f7fe fa75 	bl	800081c <HAL_GetTick>
 8002332:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002334:	e00e      	b.n	8002354 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002336:	f7fe fa71 	bl	800081c <HAL_GetTick>
 800233a:	4602      	mov	r2, r0
 800233c:	693b      	ldr	r3, [r7, #16]
 800233e:	1ad3      	subs	r3, r2, r3
 8002340:	2b02      	cmp	r3, #2
 8002342:	d907      	bls.n	8002354 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002344:	2303      	movs	r3, #3
 8002346:	e150      	b.n	80025ea <HAL_RCC_OscConfig+0x4e2>
 8002348:	40023800 	.word	0x40023800
 800234c:	42470000 	.word	0x42470000
 8002350:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002354:	4b88      	ldr	r3, [pc, #544]	; (8002578 <HAL_RCC_OscConfig+0x470>)
 8002356:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002358:	f003 0302 	and.w	r3, r3, #2
 800235c:	2b00      	cmp	r3, #0
 800235e:	d1ea      	bne.n	8002336 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f003 0304 	and.w	r3, r3, #4
 8002368:	2b00      	cmp	r3, #0
 800236a:	f000 8097 	beq.w	800249c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800236e:	2300      	movs	r3, #0
 8002370:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002372:	4b81      	ldr	r3, [pc, #516]	; (8002578 <HAL_RCC_OscConfig+0x470>)
 8002374:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002376:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800237a:	2b00      	cmp	r3, #0
 800237c:	d10f      	bne.n	800239e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800237e:	2300      	movs	r3, #0
 8002380:	60bb      	str	r3, [r7, #8]
 8002382:	4b7d      	ldr	r3, [pc, #500]	; (8002578 <HAL_RCC_OscConfig+0x470>)
 8002384:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002386:	4a7c      	ldr	r2, [pc, #496]	; (8002578 <HAL_RCC_OscConfig+0x470>)
 8002388:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800238c:	6413      	str	r3, [r2, #64]	; 0x40
 800238e:	4b7a      	ldr	r3, [pc, #488]	; (8002578 <HAL_RCC_OscConfig+0x470>)
 8002390:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002392:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002396:	60bb      	str	r3, [r7, #8]
 8002398:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800239a:	2301      	movs	r3, #1
 800239c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800239e:	4b77      	ldr	r3, [pc, #476]	; (800257c <HAL_RCC_OscConfig+0x474>)
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d118      	bne.n	80023dc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80023aa:	4b74      	ldr	r3, [pc, #464]	; (800257c <HAL_RCC_OscConfig+0x474>)
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	4a73      	ldr	r2, [pc, #460]	; (800257c <HAL_RCC_OscConfig+0x474>)
 80023b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023b4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80023b6:	f7fe fa31 	bl	800081c <HAL_GetTick>
 80023ba:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023bc:	e008      	b.n	80023d0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80023be:	f7fe fa2d 	bl	800081c <HAL_GetTick>
 80023c2:	4602      	mov	r2, r0
 80023c4:	693b      	ldr	r3, [r7, #16]
 80023c6:	1ad3      	subs	r3, r2, r3
 80023c8:	2b02      	cmp	r3, #2
 80023ca:	d901      	bls.n	80023d0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80023cc:	2303      	movs	r3, #3
 80023ce:	e10c      	b.n	80025ea <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023d0:	4b6a      	ldr	r3, [pc, #424]	; (800257c <HAL_RCC_OscConfig+0x474>)
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d0f0      	beq.n	80023be <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	689b      	ldr	r3, [r3, #8]
 80023e0:	2b01      	cmp	r3, #1
 80023e2:	d106      	bne.n	80023f2 <HAL_RCC_OscConfig+0x2ea>
 80023e4:	4b64      	ldr	r3, [pc, #400]	; (8002578 <HAL_RCC_OscConfig+0x470>)
 80023e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023e8:	4a63      	ldr	r2, [pc, #396]	; (8002578 <HAL_RCC_OscConfig+0x470>)
 80023ea:	f043 0301 	orr.w	r3, r3, #1
 80023ee:	6713      	str	r3, [r2, #112]	; 0x70
 80023f0:	e01c      	b.n	800242c <HAL_RCC_OscConfig+0x324>
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	689b      	ldr	r3, [r3, #8]
 80023f6:	2b05      	cmp	r3, #5
 80023f8:	d10c      	bne.n	8002414 <HAL_RCC_OscConfig+0x30c>
 80023fa:	4b5f      	ldr	r3, [pc, #380]	; (8002578 <HAL_RCC_OscConfig+0x470>)
 80023fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023fe:	4a5e      	ldr	r2, [pc, #376]	; (8002578 <HAL_RCC_OscConfig+0x470>)
 8002400:	f043 0304 	orr.w	r3, r3, #4
 8002404:	6713      	str	r3, [r2, #112]	; 0x70
 8002406:	4b5c      	ldr	r3, [pc, #368]	; (8002578 <HAL_RCC_OscConfig+0x470>)
 8002408:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800240a:	4a5b      	ldr	r2, [pc, #364]	; (8002578 <HAL_RCC_OscConfig+0x470>)
 800240c:	f043 0301 	orr.w	r3, r3, #1
 8002410:	6713      	str	r3, [r2, #112]	; 0x70
 8002412:	e00b      	b.n	800242c <HAL_RCC_OscConfig+0x324>
 8002414:	4b58      	ldr	r3, [pc, #352]	; (8002578 <HAL_RCC_OscConfig+0x470>)
 8002416:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002418:	4a57      	ldr	r2, [pc, #348]	; (8002578 <HAL_RCC_OscConfig+0x470>)
 800241a:	f023 0301 	bic.w	r3, r3, #1
 800241e:	6713      	str	r3, [r2, #112]	; 0x70
 8002420:	4b55      	ldr	r3, [pc, #340]	; (8002578 <HAL_RCC_OscConfig+0x470>)
 8002422:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002424:	4a54      	ldr	r2, [pc, #336]	; (8002578 <HAL_RCC_OscConfig+0x470>)
 8002426:	f023 0304 	bic.w	r3, r3, #4
 800242a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	689b      	ldr	r3, [r3, #8]
 8002430:	2b00      	cmp	r3, #0
 8002432:	d015      	beq.n	8002460 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002434:	f7fe f9f2 	bl	800081c <HAL_GetTick>
 8002438:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800243a:	e00a      	b.n	8002452 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800243c:	f7fe f9ee 	bl	800081c <HAL_GetTick>
 8002440:	4602      	mov	r2, r0
 8002442:	693b      	ldr	r3, [r7, #16]
 8002444:	1ad3      	subs	r3, r2, r3
 8002446:	f241 3288 	movw	r2, #5000	; 0x1388
 800244a:	4293      	cmp	r3, r2
 800244c:	d901      	bls.n	8002452 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800244e:	2303      	movs	r3, #3
 8002450:	e0cb      	b.n	80025ea <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002452:	4b49      	ldr	r3, [pc, #292]	; (8002578 <HAL_RCC_OscConfig+0x470>)
 8002454:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002456:	f003 0302 	and.w	r3, r3, #2
 800245a:	2b00      	cmp	r3, #0
 800245c:	d0ee      	beq.n	800243c <HAL_RCC_OscConfig+0x334>
 800245e:	e014      	b.n	800248a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002460:	f7fe f9dc 	bl	800081c <HAL_GetTick>
 8002464:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002466:	e00a      	b.n	800247e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002468:	f7fe f9d8 	bl	800081c <HAL_GetTick>
 800246c:	4602      	mov	r2, r0
 800246e:	693b      	ldr	r3, [r7, #16]
 8002470:	1ad3      	subs	r3, r2, r3
 8002472:	f241 3288 	movw	r2, #5000	; 0x1388
 8002476:	4293      	cmp	r3, r2
 8002478:	d901      	bls.n	800247e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800247a:	2303      	movs	r3, #3
 800247c:	e0b5      	b.n	80025ea <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800247e:	4b3e      	ldr	r3, [pc, #248]	; (8002578 <HAL_RCC_OscConfig+0x470>)
 8002480:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002482:	f003 0302 	and.w	r3, r3, #2
 8002486:	2b00      	cmp	r3, #0
 8002488:	d1ee      	bne.n	8002468 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800248a:	7dfb      	ldrb	r3, [r7, #23]
 800248c:	2b01      	cmp	r3, #1
 800248e:	d105      	bne.n	800249c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002490:	4b39      	ldr	r3, [pc, #228]	; (8002578 <HAL_RCC_OscConfig+0x470>)
 8002492:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002494:	4a38      	ldr	r2, [pc, #224]	; (8002578 <HAL_RCC_OscConfig+0x470>)
 8002496:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800249a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	699b      	ldr	r3, [r3, #24]
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	f000 80a1 	beq.w	80025e8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80024a6:	4b34      	ldr	r3, [pc, #208]	; (8002578 <HAL_RCC_OscConfig+0x470>)
 80024a8:	689b      	ldr	r3, [r3, #8]
 80024aa:	f003 030c 	and.w	r3, r3, #12
 80024ae:	2b08      	cmp	r3, #8
 80024b0:	d05c      	beq.n	800256c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	699b      	ldr	r3, [r3, #24]
 80024b6:	2b02      	cmp	r3, #2
 80024b8:	d141      	bne.n	800253e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024ba:	4b31      	ldr	r3, [pc, #196]	; (8002580 <HAL_RCC_OscConfig+0x478>)
 80024bc:	2200      	movs	r2, #0
 80024be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024c0:	f7fe f9ac 	bl	800081c <HAL_GetTick>
 80024c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80024c6:	e008      	b.n	80024da <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80024c8:	f7fe f9a8 	bl	800081c <HAL_GetTick>
 80024cc:	4602      	mov	r2, r0
 80024ce:	693b      	ldr	r3, [r7, #16]
 80024d0:	1ad3      	subs	r3, r2, r3
 80024d2:	2b02      	cmp	r3, #2
 80024d4:	d901      	bls.n	80024da <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80024d6:	2303      	movs	r3, #3
 80024d8:	e087      	b.n	80025ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80024da:	4b27      	ldr	r3, [pc, #156]	; (8002578 <HAL_RCC_OscConfig+0x470>)
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d1f0      	bne.n	80024c8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	69da      	ldr	r2, [r3, #28]
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	6a1b      	ldr	r3, [r3, #32]
 80024ee:	431a      	orrs	r2, r3
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024f4:	019b      	lsls	r3, r3, #6
 80024f6:	431a      	orrs	r2, r3
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024fc:	085b      	lsrs	r3, r3, #1
 80024fe:	3b01      	subs	r3, #1
 8002500:	041b      	lsls	r3, r3, #16
 8002502:	431a      	orrs	r2, r3
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002508:	061b      	lsls	r3, r3, #24
 800250a:	491b      	ldr	r1, [pc, #108]	; (8002578 <HAL_RCC_OscConfig+0x470>)
 800250c:	4313      	orrs	r3, r2
 800250e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002510:	4b1b      	ldr	r3, [pc, #108]	; (8002580 <HAL_RCC_OscConfig+0x478>)
 8002512:	2201      	movs	r2, #1
 8002514:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002516:	f7fe f981 	bl	800081c <HAL_GetTick>
 800251a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800251c:	e008      	b.n	8002530 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800251e:	f7fe f97d 	bl	800081c <HAL_GetTick>
 8002522:	4602      	mov	r2, r0
 8002524:	693b      	ldr	r3, [r7, #16]
 8002526:	1ad3      	subs	r3, r2, r3
 8002528:	2b02      	cmp	r3, #2
 800252a:	d901      	bls.n	8002530 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800252c:	2303      	movs	r3, #3
 800252e:	e05c      	b.n	80025ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002530:	4b11      	ldr	r3, [pc, #68]	; (8002578 <HAL_RCC_OscConfig+0x470>)
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002538:	2b00      	cmp	r3, #0
 800253a:	d0f0      	beq.n	800251e <HAL_RCC_OscConfig+0x416>
 800253c:	e054      	b.n	80025e8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800253e:	4b10      	ldr	r3, [pc, #64]	; (8002580 <HAL_RCC_OscConfig+0x478>)
 8002540:	2200      	movs	r2, #0
 8002542:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002544:	f7fe f96a 	bl	800081c <HAL_GetTick>
 8002548:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800254a:	e008      	b.n	800255e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800254c:	f7fe f966 	bl	800081c <HAL_GetTick>
 8002550:	4602      	mov	r2, r0
 8002552:	693b      	ldr	r3, [r7, #16]
 8002554:	1ad3      	subs	r3, r2, r3
 8002556:	2b02      	cmp	r3, #2
 8002558:	d901      	bls.n	800255e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800255a:	2303      	movs	r3, #3
 800255c:	e045      	b.n	80025ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800255e:	4b06      	ldr	r3, [pc, #24]	; (8002578 <HAL_RCC_OscConfig+0x470>)
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002566:	2b00      	cmp	r3, #0
 8002568:	d1f0      	bne.n	800254c <HAL_RCC_OscConfig+0x444>
 800256a:	e03d      	b.n	80025e8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	699b      	ldr	r3, [r3, #24]
 8002570:	2b01      	cmp	r3, #1
 8002572:	d107      	bne.n	8002584 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002574:	2301      	movs	r3, #1
 8002576:	e038      	b.n	80025ea <HAL_RCC_OscConfig+0x4e2>
 8002578:	40023800 	.word	0x40023800
 800257c:	40007000 	.word	0x40007000
 8002580:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002584:	4b1b      	ldr	r3, [pc, #108]	; (80025f4 <HAL_RCC_OscConfig+0x4ec>)
 8002586:	685b      	ldr	r3, [r3, #4]
 8002588:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	699b      	ldr	r3, [r3, #24]
 800258e:	2b01      	cmp	r3, #1
 8002590:	d028      	beq.n	80025e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800259c:	429a      	cmp	r2, r3
 800259e:	d121      	bne.n	80025e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80025aa:	429a      	cmp	r2, r3
 80025ac:	d11a      	bne.n	80025e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80025ae:	68fa      	ldr	r2, [r7, #12]
 80025b0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80025b4:	4013      	ands	r3, r2
 80025b6:	687a      	ldr	r2, [r7, #4]
 80025b8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80025ba:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80025bc:	4293      	cmp	r3, r2
 80025be:	d111      	bne.n	80025e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025ca:	085b      	lsrs	r3, r3, #1
 80025cc:	3b01      	subs	r3, #1
 80025ce:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80025d0:	429a      	cmp	r2, r3
 80025d2:	d107      	bne.n	80025e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025de:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80025e0:	429a      	cmp	r2, r3
 80025e2:	d001      	beq.n	80025e8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80025e4:	2301      	movs	r3, #1
 80025e6:	e000      	b.n	80025ea <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80025e8:	2300      	movs	r3, #0
}
 80025ea:	4618      	mov	r0, r3
 80025ec:	3718      	adds	r7, #24
 80025ee:	46bd      	mov	sp, r7
 80025f0:	bd80      	pop	{r7, pc}
 80025f2:	bf00      	nop
 80025f4:	40023800 	.word	0x40023800

080025f8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80025f8:	b580      	push	{r7, lr}
 80025fa:	b084      	sub	sp, #16
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]
 8002600:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	2b00      	cmp	r3, #0
 8002606:	d101      	bne.n	800260c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002608:	2301      	movs	r3, #1
 800260a:	e0cc      	b.n	80027a6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800260c:	4b68      	ldr	r3, [pc, #416]	; (80027b0 <HAL_RCC_ClockConfig+0x1b8>)
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f003 0307 	and.w	r3, r3, #7
 8002614:	683a      	ldr	r2, [r7, #0]
 8002616:	429a      	cmp	r2, r3
 8002618:	d90c      	bls.n	8002634 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800261a:	4b65      	ldr	r3, [pc, #404]	; (80027b0 <HAL_RCC_ClockConfig+0x1b8>)
 800261c:	683a      	ldr	r2, [r7, #0]
 800261e:	b2d2      	uxtb	r2, r2
 8002620:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002622:	4b63      	ldr	r3, [pc, #396]	; (80027b0 <HAL_RCC_ClockConfig+0x1b8>)
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f003 0307 	and.w	r3, r3, #7
 800262a:	683a      	ldr	r2, [r7, #0]
 800262c:	429a      	cmp	r2, r3
 800262e:	d001      	beq.n	8002634 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002630:	2301      	movs	r3, #1
 8002632:	e0b8      	b.n	80027a6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f003 0302 	and.w	r3, r3, #2
 800263c:	2b00      	cmp	r3, #0
 800263e:	d020      	beq.n	8002682 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f003 0304 	and.w	r3, r3, #4
 8002648:	2b00      	cmp	r3, #0
 800264a:	d005      	beq.n	8002658 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800264c:	4b59      	ldr	r3, [pc, #356]	; (80027b4 <HAL_RCC_ClockConfig+0x1bc>)
 800264e:	689b      	ldr	r3, [r3, #8]
 8002650:	4a58      	ldr	r2, [pc, #352]	; (80027b4 <HAL_RCC_ClockConfig+0x1bc>)
 8002652:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002656:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f003 0308 	and.w	r3, r3, #8
 8002660:	2b00      	cmp	r3, #0
 8002662:	d005      	beq.n	8002670 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002664:	4b53      	ldr	r3, [pc, #332]	; (80027b4 <HAL_RCC_ClockConfig+0x1bc>)
 8002666:	689b      	ldr	r3, [r3, #8]
 8002668:	4a52      	ldr	r2, [pc, #328]	; (80027b4 <HAL_RCC_ClockConfig+0x1bc>)
 800266a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800266e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002670:	4b50      	ldr	r3, [pc, #320]	; (80027b4 <HAL_RCC_ClockConfig+0x1bc>)
 8002672:	689b      	ldr	r3, [r3, #8]
 8002674:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	689b      	ldr	r3, [r3, #8]
 800267c:	494d      	ldr	r1, [pc, #308]	; (80027b4 <HAL_RCC_ClockConfig+0x1bc>)
 800267e:	4313      	orrs	r3, r2
 8002680:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f003 0301 	and.w	r3, r3, #1
 800268a:	2b00      	cmp	r3, #0
 800268c:	d044      	beq.n	8002718 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	685b      	ldr	r3, [r3, #4]
 8002692:	2b01      	cmp	r3, #1
 8002694:	d107      	bne.n	80026a6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002696:	4b47      	ldr	r3, [pc, #284]	; (80027b4 <HAL_RCC_ClockConfig+0x1bc>)
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d119      	bne.n	80026d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026a2:	2301      	movs	r3, #1
 80026a4:	e07f      	b.n	80027a6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	685b      	ldr	r3, [r3, #4]
 80026aa:	2b02      	cmp	r3, #2
 80026ac:	d003      	beq.n	80026b6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80026b2:	2b03      	cmp	r3, #3
 80026b4:	d107      	bne.n	80026c6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80026b6:	4b3f      	ldr	r3, [pc, #252]	; (80027b4 <HAL_RCC_ClockConfig+0x1bc>)
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d109      	bne.n	80026d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026c2:	2301      	movs	r3, #1
 80026c4:	e06f      	b.n	80027a6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026c6:	4b3b      	ldr	r3, [pc, #236]	; (80027b4 <HAL_RCC_ClockConfig+0x1bc>)
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f003 0302 	and.w	r3, r3, #2
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d101      	bne.n	80026d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026d2:	2301      	movs	r3, #1
 80026d4:	e067      	b.n	80027a6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80026d6:	4b37      	ldr	r3, [pc, #220]	; (80027b4 <HAL_RCC_ClockConfig+0x1bc>)
 80026d8:	689b      	ldr	r3, [r3, #8]
 80026da:	f023 0203 	bic.w	r2, r3, #3
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	685b      	ldr	r3, [r3, #4]
 80026e2:	4934      	ldr	r1, [pc, #208]	; (80027b4 <HAL_RCC_ClockConfig+0x1bc>)
 80026e4:	4313      	orrs	r3, r2
 80026e6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80026e8:	f7fe f898 	bl	800081c <HAL_GetTick>
 80026ec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026ee:	e00a      	b.n	8002706 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80026f0:	f7fe f894 	bl	800081c <HAL_GetTick>
 80026f4:	4602      	mov	r2, r0
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	1ad3      	subs	r3, r2, r3
 80026fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80026fe:	4293      	cmp	r3, r2
 8002700:	d901      	bls.n	8002706 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002702:	2303      	movs	r3, #3
 8002704:	e04f      	b.n	80027a6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002706:	4b2b      	ldr	r3, [pc, #172]	; (80027b4 <HAL_RCC_ClockConfig+0x1bc>)
 8002708:	689b      	ldr	r3, [r3, #8]
 800270a:	f003 020c 	and.w	r2, r3, #12
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	685b      	ldr	r3, [r3, #4]
 8002712:	009b      	lsls	r3, r3, #2
 8002714:	429a      	cmp	r2, r3
 8002716:	d1eb      	bne.n	80026f0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002718:	4b25      	ldr	r3, [pc, #148]	; (80027b0 <HAL_RCC_ClockConfig+0x1b8>)
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f003 0307 	and.w	r3, r3, #7
 8002720:	683a      	ldr	r2, [r7, #0]
 8002722:	429a      	cmp	r2, r3
 8002724:	d20c      	bcs.n	8002740 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002726:	4b22      	ldr	r3, [pc, #136]	; (80027b0 <HAL_RCC_ClockConfig+0x1b8>)
 8002728:	683a      	ldr	r2, [r7, #0]
 800272a:	b2d2      	uxtb	r2, r2
 800272c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800272e:	4b20      	ldr	r3, [pc, #128]	; (80027b0 <HAL_RCC_ClockConfig+0x1b8>)
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f003 0307 	and.w	r3, r3, #7
 8002736:	683a      	ldr	r2, [r7, #0]
 8002738:	429a      	cmp	r2, r3
 800273a:	d001      	beq.n	8002740 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800273c:	2301      	movs	r3, #1
 800273e:	e032      	b.n	80027a6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f003 0304 	and.w	r3, r3, #4
 8002748:	2b00      	cmp	r3, #0
 800274a:	d008      	beq.n	800275e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800274c:	4b19      	ldr	r3, [pc, #100]	; (80027b4 <HAL_RCC_ClockConfig+0x1bc>)
 800274e:	689b      	ldr	r3, [r3, #8]
 8002750:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	68db      	ldr	r3, [r3, #12]
 8002758:	4916      	ldr	r1, [pc, #88]	; (80027b4 <HAL_RCC_ClockConfig+0x1bc>)
 800275a:	4313      	orrs	r3, r2
 800275c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f003 0308 	and.w	r3, r3, #8
 8002766:	2b00      	cmp	r3, #0
 8002768:	d009      	beq.n	800277e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800276a:	4b12      	ldr	r3, [pc, #72]	; (80027b4 <HAL_RCC_ClockConfig+0x1bc>)
 800276c:	689b      	ldr	r3, [r3, #8]
 800276e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	691b      	ldr	r3, [r3, #16]
 8002776:	00db      	lsls	r3, r3, #3
 8002778:	490e      	ldr	r1, [pc, #56]	; (80027b4 <HAL_RCC_ClockConfig+0x1bc>)
 800277a:	4313      	orrs	r3, r2
 800277c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800277e:	f000 f821 	bl	80027c4 <HAL_RCC_GetSysClockFreq>
 8002782:	4602      	mov	r2, r0
 8002784:	4b0b      	ldr	r3, [pc, #44]	; (80027b4 <HAL_RCC_ClockConfig+0x1bc>)
 8002786:	689b      	ldr	r3, [r3, #8]
 8002788:	091b      	lsrs	r3, r3, #4
 800278a:	f003 030f 	and.w	r3, r3, #15
 800278e:	490a      	ldr	r1, [pc, #40]	; (80027b8 <HAL_RCC_ClockConfig+0x1c0>)
 8002790:	5ccb      	ldrb	r3, [r1, r3]
 8002792:	fa22 f303 	lsr.w	r3, r2, r3
 8002796:	4a09      	ldr	r2, [pc, #36]	; (80027bc <HAL_RCC_ClockConfig+0x1c4>)
 8002798:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800279a:	4b09      	ldr	r3, [pc, #36]	; (80027c0 <HAL_RCC_ClockConfig+0x1c8>)
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	4618      	mov	r0, r3
 80027a0:	f7fd fff8 	bl	8000794 <HAL_InitTick>

  return HAL_OK;
 80027a4:	2300      	movs	r3, #0
}
 80027a6:	4618      	mov	r0, r3
 80027a8:	3710      	adds	r7, #16
 80027aa:	46bd      	mov	sp, r7
 80027ac:	bd80      	pop	{r7, pc}
 80027ae:	bf00      	nop
 80027b0:	40023c00 	.word	0x40023c00
 80027b4:	40023800 	.word	0x40023800
 80027b8:	08007908 	.word	0x08007908
 80027bc:	20000000 	.word	0x20000000
 80027c0:	20000004 	.word	0x20000004

080027c4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80027c4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80027c8:	b090      	sub	sp, #64	; 0x40
 80027ca:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80027cc:	2300      	movs	r3, #0
 80027ce:	637b      	str	r3, [r7, #52]	; 0x34
 80027d0:	2300      	movs	r3, #0
 80027d2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80027d4:	2300      	movs	r3, #0
 80027d6:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80027d8:	2300      	movs	r3, #0
 80027da:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80027dc:	4b59      	ldr	r3, [pc, #356]	; (8002944 <HAL_RCC_GetSysClockFreq+0x180>)
 80027de:	689b      	ldr	r3, [r3, #8]
 80027e0:	f003 030c 	and.w	r3, r3, #12
 80027e4:	2b08      	cmp	r3, #8
 80027e6:	d00d      	beq.n	8002804 <HAL_RCC_GetSysClockFreq+0x40>
 80027e8:	2b08      	cmp	r3, #8
 80027ea:	f200 80a1 	bhi.w	8002930 <HAL_RCC_GetSysClockFreq+0x16c>
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d002      	beq.n	80027f8 <HAL_RCC_GetSysClockFreq+0x34>
 80027f2:	2b04      	cmp	r3, #4
 80027f4:	d003      	beq.n	80027fe <HAL_RCC_GetSysClockFreq+0x3a>
 80027f6:	e09b      	b.n	8002930 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80027f8:	4b53      	ldr	r3, [pc, #332]	; (8002948 <HAL_RCC_GetSysClockFreq+0x184>)
 80027fa:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80027fc:	e09b      	b.n	8002936 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80027fe:	4b53      	ldr	r3, [pc, #332]	; (800294c <HAL_RCC_GetSysClockFreq+0x188>)
 8002800:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002802:	e098      	b.n	8002936 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002804:	4b4f      	ldr	r3, [pc, #316]	; (8002944 <HAL_RCC_GetSysClockFreq+0x180>)
 8002806:	685b      	ldr	r3, [r3, #4]
 8002808:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800280c:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800280e:	4b4d      	ldr	r3, [pc, #308]	; (8002944 <HAL_RCC_GetSysClockFreq+0x180>)
 8002810:	685b      	ldr	r3, [r3, #4]
 8002812:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002816:	2b00      	cmp	r3, #0
 8002818:	d028      	beq.n	800286c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800281a:	4b4a      	ldr	r3, [pc, #296]	; (8002944 <HAL_RCC_GetSysClockFreq+0x180>)
 800281c:	685b      	ldr	r3, [r3, #4]
 800281e:	099b      	lsrs	r3, r3, #6
 8002820:	2200      	movs	r2, #0
 8002822:	623b      	str	r3, [r7, #32]
 8002824:	627a      	str	r2, [r7, #36]	; 0x24
 8002826:	6a3b      	ldr	r3, [r7, #32]
 8002828:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800282c:	2100      	movs	r1, #0
 800282e:	4b47      	ldr	r3, [pc, #284]	; (800294c <HAL_RCC_GetSysClockFreq+0x188>)
 8002830:	fb03 f201 	mul.w	r2, r3, r1
 8002834:	2300      	movs	r3, #0
 8002836:	fb00 f303 	mul.w	r3, r0, r3
 800283a:	4413      	add	r3, r2
 800283c:	4a43      	ldr	r2, [pc, #268]	; (800294c <HAL_RCC_GetSysClockFreq+0x188>)
 800283e:	fba0 1202 	umull	r1, r2, r0, r2
 8002842:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002844:	460a      	mov	r2, r1
 8002846:	62ba      	str	r2, [r7, #40]	; 0x28
 8002848:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800284a:	4413      	add	r3, r2
 800284c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800284e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002850:	2200      	movs	r2, #0
 8002852:	61bb      	str	r3, [r7, #24]
 8002854:	61fa      	str	r2, [r7, #28]
 8002856:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800285a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800285e:	f7fd fcbb 	bl	80001d8 <__aeabi_uldivmod>
 8002862:	4602      	mov	r2, r0
 8002864:	460b      	mov	r3, r1
 8002866:	4613      	mov	r3, r2
 8002868:	63fb      	str	r3, [r7, #60]	; 0x3c
 800286a:	e053      	b.n	8002914 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800286c:	4b35      	ldr	r3, [pc, #212]	; (8002944 <HAL_RCC_GetSysClockFreq+0x180>)
 800286e:	685b      	ldr	r3, [r3, #4]
 8002870:	099b      	lsrs	r3, r3, #6
 8002872:	2200      	movs	r2, #0
 8002874:	613b      	str	r3, [r7, #16]
 8002876:	617a      	str	r2, [r7, #20]
 8002878:	693b      	ldr	r3, [r7, #16]
 800287a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800287e:	f04f 0b00 	mov.w	fp, #0
 8002882:	4652      	mov	r2, sl
 8002884:	465b      	mov	r3, fp
 8002886:	f04f 0000 	mov.w	r0, #0
 800288a:	f04f 0100 	mov.w	r1, #0
 800288e:	0159      	lsls	r1, r3, #5
 8002890:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002894:	0150      	lsls	r0, r2, #5
 8002896:	4602      	mov	r2, r0
 8002898:	460b      	mov	r3, r1
 800289a:	ebb2 080a 	subs.w	r8, r2, sl
 800289e:	eb63 090b 	sbc.w	r9, r3, fp
 80028a2:	f04f 0200 	mov.w	r2, #0
 80028a6:	f04f 0300 	mov.w	r3, #0
 80028aa:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80028ae:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80028b2:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80028b6:	ebb2 0408 	subs.w	r4, r2, r8
 80028ba:	eb63 0509 	sbc.w	r5, r3, r9
 80028be:	f04f 0200 	mov.w	r2, #0
 80028c2:	f04f 0300 	mov.w	r3, #0
 80028c6:	00eb      	lsls	r3, r5, #3
 80028c8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80028cc:	00e2      	lsls	r2, r4, #3
 80028ce:	4614      	mov	r4, r2
 80028d0:	461d      	mov	r5, r3
 80028d2:	eb14 030a 	adds.w	r3, r4, sl
 80028d6:	603b      	str	r3, [r7, #0]
 80028d8:	eb45 030b 	adc.w	r3, r5, fp
 80028dc:	607b      	str	r3, [r7, #4]
 80028de:	f04f 0200 	mov.w	r2, #0
 80028e2:	f04f 0300 	mov.w	r3, #0
 80028e6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80028ea:	4629      	mov	r1, r5
 80028ec:	028b      	lsls	r3, r1, #10
 80028ee:	4621      	mov	r1, r4
 80028f0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80028f4:	4621      	mov	r1, r4
 80028f6:	028a      	lsls	r2, r1, #10
 80028f8:	4610      	mov	r0, r2
 80028fa:	4619      	mov	r1, r3
 80028fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80028fe:	2200      	movs	r2, #0
 8002900:	60bb      	str	r3, [r7, #8]
 8002902:	60fa      	str	r2, [r7, #12]
 8002904:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002908:	f7fd fc66 	bl	80001d8 <__aeabi_uldivmod>
 800290c:	4602      	mov	r2, r0
 800290e:	460b      	mov	r3, r1
 8002910:	4613      	mov	r3, r2
 8002912:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002914:	4b0b      	ldr	r3, [pc, #44]	; (8002944 <HAL_RCC_GetSysClockFreq+0x180>)
 8002916:	685b      	ldr	r3, [r3, #4]
 8002918:	0c1b      	lsrs	r3, r3, #16
 800291a:	f003 0303 	and.w	r3, r3, #3
 800291e:	3301      	adds	r3, #1
 8002920:	005b      	lsls	r3, r3, #1
 8002922:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8002924:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002926:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002928:	fbb2 f3f3 	udiv	r3, r2, r3
 800292c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800292e:	e002      	b.n	8002936 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002930:	4b05      	ldr	r3, [pc, #20]	; (8002948 <HAL_RCC_GetSysClockFreq+0x184>)
 8002932:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002934:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002936:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8002938:	4618      	mov	r0, r3
 800293a:	3740      	adds	r7, #64	; 0x40
 800293c:	46bd      	mov	sp, r7
 800293e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002942:	bf00      	nop
 8002944:	40023800 	.word	0x40023800
 8002948:	00f42400 	.word	0x00f42400
 800294c:	017d7840 	.word	0x017d7840

08002950 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002950:	b480      	push	{r7}
 8002952:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002954:	4b03      	ldr	r3, [pc, #12]	; (8002964 <HAL_RCC_GetHCLKFreq+0x14>)
 8002956:	681b      	ldr	r3, [r3, #0]
}
 8002958:	4618      	mov	r0, r3
 800295a:	46bd      	mov	sp, r7
 800295c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002960:	4770      	bx	lr
 8002962:	bf00      	nop
 8002964:	20000000 	.word	0x20000000

08002968 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8002968:	b084      	sub	sp, #16
 800296a:	b580      	push	{r7, lr}
 800296c:	b084      	sub	sp, #16
 800296e:	af00      	add	r7, sp, #0
 8002970:	6078      	str	r0, [r7, #4]
 8002972:	f107 001c 	add.w	r0, r7, #28
 8002976:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800297a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800297c:	2b01      	cmp	r3, #1
 800297e:	d122      	bne.n	80029c6 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002984:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	68db      	ldr	r3, [r3, #12]
 8002990:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8002994:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002998:	687a      	ldr	r2, [r7, #4]
 800299a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	68db      	ldr	r3, [r3, #12]
 80029a0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80029a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80029aa:	2b01      	cmp	r3, #1
 80029ac:	d105      	bne.n	80029ba <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	68db      	ldr	r3, [r3, #12]
 80029b2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80029ba:	6878      	ldr	r0, [r7, #4]
 80029bc:	f001 fb1c 	bl	8003ff8 <USB_CoreReset>
 80029c0:	4603      	mov	r3, r0
 80029c2:	73fb      	strb	r3, [r7, #15]
 80029c4:	e01a      	b.n	80029fc <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	68db      	ldr	r3, [r3, #12]
 80029ca:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80029d2:	6878      	ldr	r0, [r7, #4]
 80029d4:	f001 fb10 	bl	8003ff8 <USB_CoreReset>
 80029d8:	4603      	mov	r3, r0
 80029da:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80029dc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d106      	bne.n	80029f0 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029e6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	639a      	str	r2, [r3, #56]	; 0x38
 80029ee:	e005      	b.n	80029fc <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029f4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80029fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029fe:	2b01      	cmp	r3, #1
 8002a00:	d10b      	bne.n	8002a1a <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	689b      	ldr	r3, [r3, #8]
 8002a06:	f043 0206 	orr.w	r2, r3, #6
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	689b      	ldr	r3, [r3, #8]
 8002a12:	f043 0220 	orr.w	r2, r3, #32
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8002a1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	3710      	adds	r7, #16
 8002a20:	46bd      	mov	sp, r7
 8002a22:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002a26:	b004      	add	sp, #16
 8002a28:	4770      	bx	lr
	...

08002a2c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8002a2c:	b480      	push	{r7}
 8002a2e:	b087      	sub	sp, #28
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	60f8      	str	r0, [r7, #12]
 8002a34:	60b9      	str	r1, [r7, #8]
 8002a36:	4613      	mov	r3, r2
 8002a38:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8002a3a:	79fb      	ldrb	r3, [r7, #7]
 8002a3c:	2b02      	cmp	r3, #2
 8002a3e:	d165      	bne.n	8002b0c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8002a40:	68bb      	ldr	r3, [r7, #8]
 8002a42:	4a41      	ldr	r2, [pc, #260]	; (8002b48 <USB_SetTurnaroundTime+0x11c>)
 8002a44:	4293      	cmp	r3, r2
 8002a46:	d906      	bls.n	8002a56 <USB_SetTurnaroundTime+0x2a>
 8002a48:	68bb      	ldr	r3, [r7, #8]
 8002a4a:	4a40      	ldr	r2, [pc, #256]	; (8002b4c <USB_SetTurnaroundTime+0x120>)
 8002a4c:	4293      	cmp	r3, r2
 8002a4e:	d202      	bcs.n	8002a56 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8002a50:	230f      	movs	r3, #15
 8002a52:	617b      	str	r3, [r7, #20]
 8002a54:	e062      	b.n	8002b1c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8002a56:	68bb      	ldr	r3, [r7, #8]
 8002a58:	4a3c      	ldr	r2, [pc, #240]	; (8002b4c <USB_SetTurnaroundTime+0x120>)
 8002a5a:	4293      	cmp	r3, r2
 8002a5c:	d306      	bcc.n	8002a6c <USB_SetTurnaroundTime+0x40>
 8002a5e:	68bb      	ldr	r3, [r7, #8]
 8002a60:	4a3b      	ldr	r2, [pc, #236]	; (8002b50 <USB_SetTurnaroundTime+0x124>)
 8002a62:	4293      	cmp	r3, r2
 8002a64:	d202      	bcs.n	8002a6c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8002a66:	230e      	movs	r3, #14
 8002a68:	617b      	str	r3, [r7, #20]
 8002a6a:	e057      	b.n	8002b1c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8002a6c:	68bb      	ldr	r3, [r7, #8]
 8002a6e:	4a38      	ldr	r2, [pc, #224]	; (8002b50 <USB_SetTurnaroundTime+0x124>)
 8002a70:	4293      	cmp	r3, r2
 8002a72:	d306      	bcc.n	8002a82 <USB_SetTurnaroundTime+0x56>
 8002a74:	68bb      	ldr	r3, [r7, #8]
 8002a76:	4a37      	ldr	r2, [pc, #220]	; (8002b54 <USB_SetTurnaroundTime+0x128>)
 8002a78:	4293      	cmp	r3, r2
 8002a7a:	d202      	bcs.n	8002a82 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8002a7c:	230d      	movs	r3, #13
 8002a7e:	617b      	str	r3, [r7, #20]
 8002a80:	e04c      	b.n	8002b1c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8002a82:	68bb      	ldr	r3, [r7, #8]
 8002a84:	4a33      	ldr	r2, [pc, #204]	; (8002b54 <USB_SetTurnaroundTime+0x128>)
 8002a86:	4293      	cmp	r3, r2
 8002a88:	d306      	bcc.n	8002a98 <USB_SetTurnaroundTime+0x6c>
 8002a8a:	68bb      	ldr	r3, [r7, #8]
 8002a8c:	4a32      	ldr	r2, [pc, #200]	; (8002b58 <USB_SetTurnaroundTime+0x12c>)
 8002a8e:	4293      	cmp	r3, r2
 8002a90:	d802      	bhi.n	8002a98 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8002a92:	230c      	movs	r3, #12
 8002a94:	617b      	str	r3, [r7, #20]
 8002a96:	e041      	b.n	8002b1c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8002a98:	68bb      	ldr	r3, [r7, #8]
 8002a9a:	4a2f      	ldr	r2, [pc, #188]	; (8002b58 <USB_SetTurnaroundTime+0x12c>)
 8002a9c:	4293      	cmp	r3, r2
 8002a9e:	d906      	bls.n	8002aae <USB_SetTurnaroundTime+0x82>
 8002aa0:	68bb      	ldr	r3, [r7, #8]
 8002aa2:	4a2e      	ldr	r2, [pc, #184]	; (8002b5c <USB_SetTurnaroundTime+0x130>)
 8002aa4:	4293      	cmp	r3, r2
 8002aa6:	d802      	bhi.n	8002aae <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8002aa8:	230b      	movs	r3, #11
 8002aaa:	617b      	str	r3, [r7, #20]
 8002aac:	e036      	b.n	8002b1c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8002aae:	68bb      	ldr	r3, [r7, #8]
 8002ab0:	4a2a      	ldr	r2, [pc, #168]	; (8002b5c <USB_SetTurnaroundTime+0x130>)
 8002ab2:	4293      	cmp	r3, r2
 8002ab4:	d906      	bls.n	8002ac4 <USB_SetTurnaroundTime+0x98>
 8002ab6:	68bb      	ldr	r3, [r7, #8]
 8002ab8:	4a29      	ldr	r2, [pc, #164]	; (8002b60 <USB_SetTurnaroundTime+0x134>)
 8002aba:	4293      	cmp	r3, r2
 8002abc:	d802      	bhi.n	8002ac4 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8002abe:	230a      	movs	r3, #10
 8002ac0:	617b      	str	r3, [r7, #20]
 8002ac2:	e02b      	b.n	8002b1c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8002ac4:	68bb      	ldr	r3, [r7, #8]
 8002ac6:	4a26      	ldr	r2, [pc, #152]	; (8002b60 <USB_SetTurnaroundTime+0x134>)
 8002ac8:	4293      	cmp	r3, r2
 8002aca:	d906      	bls.n	8002ada <USB_SetTurnaroundTime+0xae>
 8002acc:	68bb      	ldr	r3, [r7, #8]
 8002ace:	4a25      	ldr	r2, [pc, #148]	; (8002b64 <USB_SetTurnaroundTime+0x138>)
 8002ad0:	4293      	cmp	r3, r2
 8002ad2:	d202      	bcs.n	8002ada <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8002ad4:	2309      	movs	r3, #9
 8002ad6:	617b      	str	r3, [r7, #20]
 8002ad8:	e020      	b.n	8002b1c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8002ada:	68bb      	ldr	r3, [r7, #8]
 8002adc:	4a21      	ldr	r2, [pc, #132]	; (8002b64 <USB_SetTurnaroundTime+0x138>)
 8002ade:	4293      	cmp	r3, r2
 8002ae0:	d306      	bcc.n	8002af0 <USB_SetTurnaroundTime+0xc4>
 8002ae2:	68bb      	ldr	r3, [r7, #8]
 8002ae4:	4a20      	ldr	r2, [pc, #128]	; (8002b68 <USB_SetTurnaroundTime+0x13c>)
 8002ae6:	4293      	cmp	r3, r2
 8002ae8:	d802      	bhi.n	8002af0 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8002aea:	2308      	movs	r3, #8
 8002aec:	617b      	str	r3, [r7, #20]
 8002aee:	e015      	b.n	8002b1c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8002af0:	68bb      	ldr	r3, [r7, #8]
 8002af2:	4a1d      	ldr	r2, [pc, #116]	; (8002b68 <USB_SetTurnaroundTime+0x13c>)
 8002af4:	4293      	cmp	r3, r2
 8002af6:	d906      	bls.n	8002b06 <USB_SetTurnaroundTime+0xda>
 8002af8:	68bb      	ldr	r3, [r7, #8]
 8002afa:	4a1c      	ldr	r2, [pc, #112]	; (8002b6c <USB_SetTurnaroundTime+0x140>)
 8002afc:	4293      	cmp	r3, r2
 8002afe:	d202      	bcs.n	8002b06 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8002b00:	2307      	movs	r3, #7
 8002b02:	617b      	str	r3, [r7, #20]
 8002b04:	e00a      	b.n	8002b1c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8002b06:	2306      	movs	r3, #6
 8002b08:	617b      	str	r3, [r7, #20]
 8002b0a:	e007      	b.n	8002b1c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8002b0c:	79fb      	ldrb	r3, [r7, #7]
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d102      	bne.n	8002b18 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8002b12:	2309      	movs	r3, #9
 8002b14:	617b      	str	r3, [r7, #20]
 8002b16:	e001      	b.n	8002b1c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8002b18:	2309      	movs	r3, #9
 8002b1a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	68db      	ldr	r3, [r3, #12]
 8002b20:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	68da      	ldr	r2, [r3, #12]
 8002b2c:	697b      	ldr	r3, [r7, #20]
 8002b2e:	029b      	lsls	r3, r3, #10
 8002b30:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8002b34:	431a      	orrs	r2, r3
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8002b3a:	2300      	movs	r3, #0
}
 8002b3c:	4618      	mov	r0, r3
 8002b3e:	371c      	adds	r7, #28
 8002b40:	46bd      	mov	sp, r7
 8002b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b46:	4770      	bx	lr
 8002b48:	00d8acbf 	.word	0x00d8acbf
 8002b4c:	00e4e1c0 	.word	0x00e4e1c0
 8002b50:	00f42400 	.word	0x00f42400
 8002b54:	01067380 	.word	0x01067380
 8002b58:	011a499f 	.word	0x011a499f
 8002b5c:	01312cff 	.word	0x01312cff
 8002b60:	014ca43f 	.word	0x014ca43f
 8002b64:	016e3600 	.word	0x016e3600
 8002b68:	01a6ab1f 	.word	0x01a6ab1f
 8002b6c:	01e84800 	.word	0x01e84800

08002b70 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8002b70:	b480      	push	{r7}
 8002b72:	b083      	sub	sp, #12
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	689b      	ldr	r3, [r3, #8]
 8002b7c:	f043 0201 	orr.w	r2, r3, #1
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8002b84:	2300      	movs	r3, #0
}
 8002b86:	4618      	mov	r0, r3
 8002b88:	370c      	adds	r7, #12
 8002b8a:	46bd      	mov	sp, r7
 8002b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b90:	4770      	bx	lr

08002b92 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8002b92:	b480      	push	{r7}
 8002b94:	b083      	sub	sp, #12
 8002b96:	af00      	add	r7, sp, #0
 8002b98:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	689b      	ldr	r3, [r3, #8]
 8002b9e:	f023 0201 	bic.w	r2, r3, #1
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8002ba6:	2300      	movs	r3, #0
}
 8002ba8:	4618      	mov	r0, r3
 8002baa:	370c      	adds	r7, #12
 8002bac:	46bd      	mov	sp, r7
 8002bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb2:	4770      	bx	lr

08002bb4 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	b084      	sub	sp, #16
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	6078      	str	r0, [r7, #4]
 8002bbc:	460b      	mov	r3, r1
 8002bbe:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8002bc0:	2300      	movs	r3, #0
 8002bc2:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	68db      	ldr	r3, [r3, #12]
 8002bc8:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8002bd0:	78fb      	ldrb	r3, [r7, #3]
 8002bd2:	2b01      	cmp	r3, #1
 8002bd4:	d115      	bne.n	8002c02 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	68db      	ldr	r3, [r3, #12]
 8002bda:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8002be2:	2001      	movs	r0, #1
 8002be4:	f7fd fe26 	bl	8000834 <HAL_Delay>
      ms++;
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	3301      	adds	r3, #1
 8002bec:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8002bee:	6878      	ldr	r0, [r7, #4]
 8002bf0:	f001 f972 	bl	8003ed8 <USB_GetMode>
 8002bf4:	4603      	mov	r3, r0
 8002bf6:	2b01      	cmp	r3, #1
 8002bf8:	d01e      	beq.n	8002c38 <USB_SetCurrentMode+0x84>
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	2b31      	cmp	r3, #49	; 0x31
 8002bfe:	d9f0      	bls.n	8002be2 <USB_SetCurrentMode+0x2e>
 8002c00:	e01a      	b.n	8002c38 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8002c02:	78fb      	ldrb	r3, [r7, #3]
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d115      	bne.n	8002c34 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	68db      	ldr	r3, [r3, #12]
 8002c0c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8002c14:	2001      	movs	r0, #1
 8002c16:	f7fd fe0d 	bl	8000834 <HAL_Delay>
      ms++;
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	3301      	adds	r3, #1
 8002c1e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8002c20:	6878      	ldr	r0, [r7, #4]
 8002c22:	f001 f959 	bl	8003ed8 <USB_GetMode>
 8002c26:	4603      	mov	r3, r0
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d005      	beq.n	8002c38 <USB_SetCurrentMode+0x84>
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	2b31      	cmp	r3, #49	; 0x31
 8002c30:	d9f0      	bls.n	8002c14 <USB_SetCurrentMode+0x60>
 8002c32:	e001      	b.n	8002c38 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8002c34:	2301      	movs	r3, #1
 8002c36:	e005      	b.n	8002c44 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	2b32      	cmp	r3, #50	; 0x32
 8002c3c:	d101      	bne.n	8002c42 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8002c3e:	2301      	movs	r3, #1
 8002c40:	e000      	b.n	8002c44 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8002c42:	2300      	movs	r3, #0
}
 8002c44:	4618      	mov	r0, r3
 8002c46:	3710      	adds	r7, #16
 8002c48:	46bd      	mov	sp, r7
 8002c4a:	bd80      	pop	{r7, pc}

08002c4c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8002c4c:	b084      	sub	sp, #16
 8002c4e:	b580      	push	{r7, lr}
 8002c50:	b086      	sub	sp, #24
 8002c52:	af00      	add	r7, sp, #0
 8002c54:	6078      	str	r0, [r7, #4]
 8002c56:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8002c5a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8002c5e:	2300      	movs	r3, #0
 8002c60:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8002c66:	2300      	movs	r3, #0
 8002c68:	613b      	str	r3, [r7, #16]
 8002c6a:	e009      	b.n	8002c80 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8002c6c:	687a      	ldr	r2, [r7, #4]
 8002c6e:	693b      	ldr	r3, [r7, #16]
 8002c70:	3340      	adds	r3, #64	; 0x40
 8002c72:	009b      	lsls	r3, r3, #2
 8002c74:	4413      	add	r3, r2
 8002c76:	2200      	movs	r2, #0
 8002c78:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8002c7a:	693b      	ldr	r3, [r7, #16]
 8002c7c:	3301      	adds	r3, #1
 8002c7e:	613b      	str	r3, [r7, #16]
 8002c80:	693b      	ldr	r3, [r7, #16]
 8002c82:	2b0e      	cmp	r3, #14
 8002c84:	d9f2      	bls.n	8002c6c <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8002c86:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d11c      	bne.n	8002cc6 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002c92:	685b      	ldr	r3, [r3, #4]
 8002c94:	68fa      	ldr	r2, [r7, #12]
 8002c96:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002c9a:	f043 0302 	orr.w	r3, r3, #2
 8002c9e:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ca4:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cb0:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cbc:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	639a      	str	r2, [r3, #56]	; 0x38
 8002cc4:	e00b      	b.n	8002cde <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cca:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cd6:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8002ce4:	461a      	mov	r2, r3
 8002ce6:	2300      	movs	r3, #0
 8002ce8:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002cf0:	4619      	mov	r1, r3
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002cf8:	461a      	mov	r2, r3
 8002cfa:	680b      	ldr	r3, [r1, #0]
 8002cfc:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8002cfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d00:	2b01      	cmp	r3, #1
 8002d02:	d10c      	bne.n	8002d1e <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8002d04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d104      	bne.n	8002d14 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8002d0a:	2100      	movs	r1, #0
 8002d0c:	6878      	ldr	r0, [r7, #4]
 8002d0e:	f000 f945 	bl	8002f9c <USB_SetDevSpeed>
 8002d12:	e008      	b.n	8002d26 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8002d14:	2101      	movs	r1, #1
 8002d16:	6878      	ldr	r0, [r7, #4]
 8002d18:	f000 f940 	bl	8002f9c <USB_SetDevSpeed>
 8002d1c:	e003      	b.n	8002d26 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8002d1e:	2103      	movs	r1, #3
 8002d20:	6878      	ldr	r0, [r7, #4]
 8002d22:	f000 f93b 	bl	8002f9c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8002d26:	2110      	movs	r1, #16
 8002d28:	6878      	ldr	r0, [r7, #4]
 8002d2a:	f000 f8f3 	bl	8002f14 <USB_FlushTxFifo>
 8002d2e:	4603      	mov	r3, r0
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d001      	beq.n	8002d38 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8002d34:	2301      	movs	r3, #1
 8002d36:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8002d38:	6878      	ldr	r0, [r7, #4]
 8002d3a:	f000 f90f 	bl	8002f5c <USB_FlushRxFifo>
 8002d3e:	4603      	mov	r3, r0
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d001      	beq.n	8002d48 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8002d44:	2301      	movs	r3, #1
 8002d46:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002d4e:	461a      	mov	r2, r3
 8002d50:	2300      	movs	r3, #0
 8002d52:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002d5a:	461a      	mov	r2, r3
 8002d5c:	2300      	movs	r3, #0
 8002d5e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002d66:	461a      	mov	r2, r3
 8002d68:	2300      	movs	r3, #0
 8002d6a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002d6c:	2300      	movs	r3, #0
 8002d6e:	613b      	str	r3, [r7, #16]
 8002d70:	e043      	b.n	8002dfa <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8002d72:	693b      	ldr	r3, [r7, #16]
 8002d74:	015a      	lsls	r2, r3, #5
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	4413      	add	r3, r2
 8002d7a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002d84:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002d88:	d118      	bne.n	8002dbc <USB_DevInit+0x170>
    {
      if (i == 0U)
 8002d8a:	693b      	ldr	r3, [r7, #16]
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d10a      	bne.n	8002da6 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8002d90:	693b      	ldr	r3, [r7, #16]
 8002d92:	015a      	lsls	r2, r3, #5
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	4413      	add	r3, r2
 8002d98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002d9c:	461a      	mov	r2, r3
 8002d9e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8002da2:	6013      	str	r3, [r2, #0]
 8002da4:	e013      	b.n	8002dce <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8002da6:	693b      	ldr	r3, [r7, #16]
 8002da8:	015a      	lsls	r2, r3, #5
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	4413      	add	r3, r2
 8002dae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002db2:	461a      	mov	r2, r3
 8002db4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8002db8:	6013      	str	r3, [r2, #0]
 8002dba:	e008      	b.n	8002dce <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8002dbc:	693b      	ldr	r3, [r7, #16]
 8002dbe:	015a      	lsls	r2, r3, #5
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	4413      	add	r3, r2
 8002dc4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002dc8:	461a      	mov	r2, r3
 8002dca:	2300      	movs	r3, #0
 8002dcc:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8002dce:	693b      	ldr	r3, [r7, #16]
 8002dd0:	015a      	lsls	r2, r3, #5
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	4413      	add	r3, r2
 8002dd6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002dda:	461a      	mov	r2, r3
 8002ddc:	2300      	movs	r3, #0
 8002dde:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8002de0:	693b      	ldr	r3, [r7, #16]
 8002de2:	015a      	lsls	r2, r3, #5
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	4413      	add	r3, r2
 8002de8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002dec:	461a      	mov	r2, r3
 8002dee:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002df2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002df4:	693b      	ldr	r3, [r7, #16]
 8002df6:	3301      	adds	r3, #1
 8002df8:	613b      	str	r3, [r7, #16]
 8002dfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dfc:	693a      	ldr	r2, [r7, #16]
 8002dfe:	429a      	cmp	r2, r3
 8002e00:	d3b7      	bcc.n	8002d72 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002e02:	2300      	movs	r3, #0
 8002e04:	613b      	str	r3, [r7, #16]
 8002e06:	e043      	b.n	8002e90 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8002e08:	693b      	ldr	r3, [r7, #16]
 8002e0a:	015a      	lsls	r2, r3, #5
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	4413      	add	r3, r2
 8002e10:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002e1a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002e1e:	d118      	bne.n	8002e52 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8002e20:	693b      	ldr	r3, [r7, #16]
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d10a      	bne.n	8002e3c <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8002e26:	693b      	ldr	r3, [r7, #16]
 8002e28:	015a      	lsls	r2, r3, #5
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	4413      	add	r3, r2
 8002e2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e32:	461a      	mov	r2, r3
 8002e34:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8002e38:	6013      	str	r3, [r2, #0]
 8002e3a:	e013      	b.n	8002e64 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8002e3c:	693b      	ldr	r3, [r7, #16]
 8002e3e:	015a      	lsls	r2, r3, #5
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	4413      	add	r3, r2
 8002e44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e48:	461a      	mov	r2, r3
 8002e4a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8002e4e:	6013      	str	r3, [r2, #0]
 8002e50:	e008      	b.n	8002e64 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8002e52:	693b      	ldr	r3, [r7, #16]
 8002e54:	015a      	lsls	r2, r3, #5
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	4413      	add	r3, r2
 8002e5a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e5e:	461a      	mov	r2, r3
 8002e60:	2300      	movs	r3, #0
 8002e62:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8002e64:	693b      	ldr	r3, [r7, #16]
 8002e66:	015a      	lsls	r2, r3, #5
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	4413      	add	r3, r2
 8002e6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e70:	461a      	mov	r2, r3
 8002e72:	2300      	movs	r3, #0
 8002e74:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8002e76:	693b      	ldr	r3, [r7, #16]
 8002e78:	015a      	lsls	r2, r3, #5
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	4413      	add	r3, r2
 8002e7e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e82:	461a      	mov	r2, r3
 8002e84:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002e88:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002e8a:	693b      	ldr	r3, [r7, #16]
 8002e8c:	3301      	adds	r3, #1
 8002e8e:	613b      	str	r3, [r7, #16]
 8002e90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e92:	693a      	ldr	r2, [r7, #16]
 8002e94:	429a      	cmp	r2, r3
 8002e96:	d3b7      	bcc.n	8002e08 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002e9e:	691b      	ldr	r3, [r3, #16]
 8002ea0:	68fa      	ldr	r2, [r7, #12]
 8002ea2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002ea6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002eaa:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	2200      	movs	r2, #0
 8002eb0:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8002eb8:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8002eba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d105      	bne.n	8002ecc <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	699b      	ldr	r3, [r3, #24]
 8002ec4:	f043 0210 	orr.w	r2, r3, #16
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	699a      	ldr	r2, [r3, #24]
 8002ed0:	4b0f      	ldr	r3, [pc, #60]	; (8002f10 <USB_DevInit+0x2c4>)
 8002ed2:	4313      	orrs	r3, r2
 8002ed4:	687a      	ldr	r2, [r7, #4]
 8002ed6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8002ed8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d005      	beq.n	8002eea <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	699b      	ldr	r3, [r3, #24]
 8002ee2:	f043 0208 	orr.w	r2, r3, #8
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8002eea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002eec:	2b01      	cmp	r3, #1
 8002eee:	d107      	bne.n	8002f00 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	699b      	ldr	r3, [r3, #24]
 8002ef4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002ef8:	f043 0304 	orr.w	r3, r3, #4
 8002efc:	687a      	ldr	r2, [r7, #4]
 8002efe:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8002f00:	7dfb      	ldrb	r3, [r7, #23]
}
 8002f02:	4618      	mov	r0, r3
 8002f04:	3718      	adds	r7, #24
 8002f06:	46bd      	mov	sp, r7
 8002f08:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002f0c:	b004      	add	sp, #16
 8002f0e:	4770      	bx	lr
 8002f10:	803c3800 	.word	0x803c3800

08002f14 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8002f14:	b480      	push	{r7}
 8002f16:	b085      	sub	sp, #20
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	6078      	str	r0, [r7, #4]
 8002f1c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8002f1e:	2300      	movs	r3, #0
 8002f20:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8002f22:	683b      	ldr	r3, [r7, #0]
 8002f24:	019b      	lsls	r3, r3, #6
 8002f26:	f043 0220 	orr.w	r2, r3, #32
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	3301      	adds	r3, #1
 8002f32:	60fb      	str	r3, [r7, #12]
 8002f34:	4a08      	ldr	r2, [pc, #32]	; (8002f58 <USB_FlushTxFifo+0x44>)
 8002f36:	4293      	cmp	r3, r2
 8002f38:	d901      	bls.n	8002f3e <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 8002f3a:	2303      	movs	r3, #3
 8002f3c:	e006      	b.n	8002f4c <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	691b      	ldr	r3, [r3, #16]
 8002f42:	f003 0320 	and.w	r3, r3, #32
 8002f46:	2b20      	cmp	r3, #32
 8002f48:	d0f1      	beq.n	8002f2e <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8002f4a:	2300      	movs	r3, #0
}
 8002f4c:	4618      	mov	r0, r3
 8002f4e:	3714      	adds	r7, #20
 8002f50:	46bd      	mov	sp, r7
 8002f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f56:	4770      	bx	lr
 8002f58:	00030d40 	.word	0x00030d40

08002f5c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8002f5c:	b480      	push	{r7}
 8002f5e:	b085      	sub	sp, #20
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8002f64:	2300      	movs	r3, #0
 8002f66:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	2210      	movs	r2, #16
 8002f6c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	3301      	adds	r3, #1
 8002f72:	60fb      	str	r3, [r7, #12]
 8002f74:	4a08      	ldr	r2, [pc, #32]	; (8002f98 <USB_FlushRxFifo+0x3c>)
 8002f76:	4293      	cmp	r3, r2
 8002f78:	d901      	bls.n	8002f7e <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 8002f7a:	2303      	movs	r3, #3
 8002f7c:	e006      	b.n	8002f8c <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	691b      	ldr	r3, [r3, #16]
 8002f82:	f003 0310 	and.w	r3, r3, #16
 8002f86:	2b10      	cmp	r3, #16
 8002f88:	d0f1      	beq.n	8002f6e <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8002f8a:	2300      	movs	r3, #0
}
 8002f8c:	4618      	mov	r0, r3
 8002f8e:	3714      	adds	r7, #20
 8002f90:	46bd      	mov	sp, r7
 8002f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f96:	4770      	bx	lr
 8002f98:	00030d40 	.word	0x00030d40

08002f9c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8002f9c:	b480      	push	{r7}
 8002f9e:	b085      	sub	sp, #20
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	6078      	str	r0, [r7, #4]
 8002fa4:	460b      	mov	r3, r1
 8002fa6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002fb2:	681a      	ldr	r2, [r3, #0]
 8002fb4:	78fb      	ldrb	r3, [r7, #3]
 8002fb6:	68f9      	ldr	r1, [r7, #12]
 8002fb8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002fbc:	4313      	orrs	r3, r2
 8002fbe:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8002fc0:	2300      	movs	r3, #0
}
 8002fc2:	4618      	mov	r0, r3
 8002fc4:	3714      	adds	r7, #20
 8002fc6:	46bd      	mov	sp, r7
 8002fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fcc:	4770      	bx	lr

08002fce <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8002fce:	b480      	push	{r7}
 8002fd0:	b087      	sub	sp, #28
 8002fd2:	af00      	add	r7, sp, #0
 8002fd4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8002fda:	693b      	ldr	r3, [r7, #16]
 8002fdc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002fe0:	689b      	ldr	r3, [r3, #8]
 8002fe2:	f003 0306 	and.w	r3, r3, #6
 8002fe6:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d102      	bne.n	8002ff4 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8002fee:	2300      	movs	r3, #0
 8002ff0:	75fb      	strb	r3, [r7, #23]
 8002ff2:	e00a      	b.n	800300a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	2b02      	cmp	r3, #2
 8002ff8:	d002      	beq.n	8003000 <USB_GetDevSpeed+0x32>
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	2b06      	cmp	r3, #6
 8002ffe:	d102      	bne.n	8003006 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8003000:	2302      	movs	r3, #2
 8003002:	75fb      	strb	r3, [r7, #23]
 8003004:	e001      	b.n	800300a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8003006:	230f      	movs	r3, #15
 8003008:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800300a:	7dfb      	ldrb	r3, [r7, #23]
}
 800300c:	4618      	mov	r0, r3
 800300e:	371c      	adds	r7, #28
 8003010:	46bd      	mov	sp, r7
 8003012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003016:	4770      	bx	lr

08003018 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003018:	b480      	push	{r7}
 800301a:	b085      	sub	sp, #20
 800301c:	af00      	add	r7, sp, #0
 800301e:	6078      	str	r0, [r7, #4]
 8003020:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003026:	683b      	ldr	r3, [r7, #0]
 8003028:	781b      	ldrb	r3, [r3, #0]
 800302a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800302c:	683b      	ldr	r3, [r7, #0]
 800302e:	785b      	ldrb	r3, [r3, #1]
 8003030:	2b01      	cmp	r3, #1
 8003032:	d13a      	bne.n	80030aa <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800303a:	69da      	ldr	r2, [r3, #28]
 800303c:	683b      	ldr	r3, [r7, #0]
 800303e:	781b      	ldrb	r3, [r3, #0]
 8003040:	f003 030f 	and.w	r3, r3, #15
 8003044:	2101      	movs	r1, #1
 8003046:	fa01 f303 	lsl.w	r3, r1, r3
 800304a:	b29b      	uxth	r3, r3
 800304c:	68f9      	ldr	r1, [r7, #12]
 800304e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003052:	4313      	orrs	r3, r2
 8003054:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8003056:	68bb      	ldr	r3, [r7, #8]
 8003058:	015a      	lsls	r2, r3, #5
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	4413      	add	r3, r2
 800305e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003068:	2b00      	cmp	r3, #0
 800306a:	d155      	bne.n	8003118 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800306c:	68bb      	ldr	r3, [r7, #8]
 800306e:	015a      	lsls	r2, r3, #5
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	4413      	add	r3, r2
 8003074:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003078:	681a      	ldr	r2, [r3, #0]
 800307a:	683b      	ldr	r3, [r7, #0]
 800307c:	689b      	ldr	r3, [r3, #8]
 800307e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8003082:	683b      	ldr	r3, [r7, #0]
 8003084:	78db      	ldrb	r3, [r3, #3]
 8003086:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003088:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800308a:	68bb      	ldr	r3, [r7, #8]
 800308c:	059b      	lsls	r3, r3, #22
 800308e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003090:	4313      	orrs	r3, r2
 8003092:	68ba      	ldr	r2, [r7, #8]
 8003094:	0151      	lsls	r1, r2, #5
 8003096:	68fa      	ldr	r2, [r7, #12]
 8003098:	440a      	add	r2, r1
 800309a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800309e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80030a2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80030a6:	6013      	str	r3, [r2, #0]
 80030a8:	e036      	b.n	8003118 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80030b0:	69da      	ldr	r2, [r3, #28]
 80030b2:	683b      	ldr	r3, [r7, #0]
 80030b4:	781b      	ldrb	r3, [r3, #0]
 80030b6:	f003 030f 	and.w	r3, r3, #15
 80030ba:	2101      	movs	r1, #1
 80030bc:	fa01 f303 	lsl.w	r3, r1, r3
 80030c0:	041b      	lsls	r3, r3, #16
 80030c2:	68f9      	ldr	r1, [r7, #12]
 80030c4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80030c8:	4313      	orrs	r3, r2
 80030ca:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80030cc:	68bb      	ldr	r3, [r7, #8]
 80030ce:	015a      	lsls	r2, r3, #5
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	4413      	add	r3, r2
 80030d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d11a      	bne.n	8003118 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80030e2:	68bb      	ldr	r3, [r7, #8]
 80030e4:	015a      	lsls	r2, r3, #5
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	4413      	add	r3, r2
 80030ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80030ee:	681a      	ldr	r2, [r3, #0]
 80030f0:	683b      	ldr	r3, [r7, #0]
 80030f2:	689b      	ldr	r3, [r3, #8]
 80030f4:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80030f8:	683b      	ldr	r3, [r7, #0]
 80030fa:	78db      	ldrb	r3, [r3, #3]
 80030fc:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80030fe:	430b      	orrs	r3, r1
 8003100:	4313      	orrs	r3, r2
 8003102:	68ba      	ldr	r2, [r7, #8]
 8003104:	0151      	lsls	r1, r2, #5
 8003106:	68fa      	ldr	r2, [r7, #12]
 8003108:	440a      	add	r2, r1
 800310a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800310e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003112:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003116:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8003118:	2300      	movs	r3, #0
}
 800311a:	4618      	mov	r0, r3
 800311c:	3714      	adds	r7, #20
 800311e:	46bd      	mov	sp, r7
 8003120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003124:	4770      	bx	lr
	...

08003128 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003128:	b480      	push	{r7}
 800312a:	b085      	sub	sp, #20
 800312c:	af00      	add	r7, sp, #0
 800312e:	6078      	str	r0, [r7, #4]
 8003130:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003136:	683b      	ldr	r3, [r7, #0]
 8003138:	781b      	ldrb	r3, [r3, #0]
 800313a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800313c:	683b      	ldr	r3, [r7, #0]
 800313e:	785b      	ldrb	r3, [r3, #1]
 8003140:	2b01      	cmp	r3, #1
 8003142:	d161      	bne.n	8003208 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003144:	68bb      	ldr	r3, [r7, #8]
 8003146:	015a      	lsls	r2, r3, #5
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	4413      	add	r3, r2
 800314c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003156:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800315a:	d11f      	bne.n	800319c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800315c:	68bb      	ldr	r3, [r7, #8]
 800315e:	015a      	lsls	r2, r3, #5
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	4413      	add	r3, r2
 8003164:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	68ba      	ldr	r2, [r7, #8]
 800316c:	0151      	lsls	r1, r2, #5
 800316e:	68fa      	ldr	r2, [r7, #12]
 8003170:	440a      	add	r2, r1
 8003172:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003176:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800317a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800317c:	68bb      	ldr	r3, [r7, #8]
 800317e:	015a      	lsls	r2, r3, #5
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	4413      	add	r3, r2
 8003184:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	68ba      	ldr	r2, [r7, #8]
 800318c:	0151      	lsls	r1, r2, #5
 800318e:	68fa      	ldr	r2, [r7, #12]
 8003190:	440a      	add	r2, r1
 8003192:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003196:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800319a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80031a2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80031a4:	683b      	ldr	r3, [r7, #0]
 80031a6:	781b      	ldrb	r3, [r3, #0]
 80031a8:	f003 030f 	and.w	r3, r3, #15
 80031ac:	2101      	movs	r1, #1
 80031ae:	fa01 f303 	lsl.w	r3, r1, r3
 80031b2:	b29b      	uxth	r3, r3
 80031b4:	43db      	mvns	r3, r3
 80031b6:	68f9      	ldr	r1, [r7, #12]
 80031b8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80031bc:	4013      	ands	r3, r2
 80031be:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80031c6:	69da      	ldr	r2, [r3, #28]
 80031c8:	683b      	ldr	r3, [r7, #0]
 80031ca:	781b      	ldrb	r3, [r3, #0]
 80031cc:	f003 030f 	and.w	r3, r3, #15
 80031d0:	2101      	movs	r1, #1
 80031d2:	fa01 f303 	lsl.w	r3, r1, r3
 80031d6:	b29b      	uxth	r3, r3
 80031d8:	43db      	mvns	r3, r3
 80031da:	68f9      	ldr	r1, [r7, #12]
 80031dc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80031e0:	4013      	ands	r3, r2
 80031e2:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80031e4:	68bb      	ldr	r3, [r7, #8]
 80031e6:	015a      	lsls	r2, r3, #5
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	4413      	add	r3, r2
 80031ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80031f0:	681a      	ldr	r2, [r3, #0]
 80031f2:	68bb      	ldr	r3, [r7, #8]
 80031f4:	0159      	lsls	r1, r3, #5
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	440b      	add	r3, r1
 80031fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80031fe:	4619      	mov	r1, r3
 8003200:	4b35      	ldr	r3, [pc, #212]	; (80032d8 <USB_DeactivateEndpoint+0x1b0>)
 8003202:	4013      	ands	r3, r2
 8003204:	600b      	str	r3, [r1, #0]
 8003206:	e060      	b.n	80032ca <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003208:	68bb      	ldr	r3, [r7, #8]
 800320a:	015a      	lsls	r2, r3, #5
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	4413      	add	r3, r2
 8003210:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800321a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800321e:	d11f      	bne.n	8003260 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003220:	68bb      	ldr	r3, [r7, #8]
 8003222:	015a      	lsls	r2, r3, #5
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	4413      	add	r3, r2
 8003228:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	68ba      	ldr	r2, [r7, #8]
 8003230:	0151      	lsls	r1, r2, #5
 8003232:	68fa      	ldr	r2, [r7, #12]
 8003234:	440a      	add	r2, r1
 8003236:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800323a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800323e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8003240:	68bb      	ldr	r3, [r7, #8]
 8003242:	015a      	lsls	r2, r3, #5
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	4413      	add	r3, r2
 8003248:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	68ba      	ldr	r2, [r7, #8]
 8003250:	0151      	lsls	r1, r2, #5
 8003252:	68fa      	ldr	r2, [r7, #12]
 8003254:	440a      	add	r2, r1
 8003256:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800325a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800325e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003266:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003268:	683b      	ldr	r3, [r7, #0]
 800326a:	781b      	ldrb	r3, [r3, #0]
 800326c:	f003 030f 	and.w	r3, r3, #15
 8003270:	2101      	movs	r1, #1
 8003272:	fa01 f303 	lsl.w	r3, r1, r3
 8003276:	041b      	lsls	r3, r3, #16
 8003278:	43db      	mvns	r3, r3
 800327a:	68f9      	ldr	r1, [r7, #12]
 800327c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003280:	4013      	ands	r3, r2
 8003282:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800328a:	69da      	ldr	r2, [r3, #28]
 800328c:	683b      	ldr	r3, [r7, #0]
 800328e:	781b      	ldrb	r3, [r3, #0]
 8003290:	f003 030f 	and.w	r3, r3, #15
 8003294:	2101      	movs	r1, #1
 8003296:	fa01 f303 	lsl.w	r3, r1, r3
 800329a:	041b      	lsls	r3, r3, #16
 800329c:	43db      	mvns	r3, r3
 800329e:	68f9      	ldr	r1, [r7, #12]
 80032a0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80032a4:	4013      	ands	r3, r2
 80032a6:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80032a8:	68bb      	ldr	r3, [r7, #8]
 80032aa:	015a      	lsls	r2, r3, #5
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	4413      	add	r3, r2
 80032b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80032b4:	681a      	ldr	r2, [r3, #0]
 80032b6:	68bb      	ldr	r3, [r7, #8]
 80032b8:	0159      	lsls	r1, r3, #5
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	440b      	add	r3, r1
 80032be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80032c2:	4619      	mov	r1, r3
 80032c4:	4b05      	ldr	r3, [pc, #20]	; (80032dc <USB_DeactivateEndpoint+0x1b4>)
 80032c6:	4013      	ands	r3, r2
 80032c8:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80032ca:	2300      	movs	r3, #0
}
 80032cc:	4618      	mov	r0, r3
 80032ce:	3714      	adds	r7, #20
 80032d0:	46bd      	mov	sp, r7
 80032d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d6:	4770      	bx	lr
 80032d8:	ec337800 	.word	0xec337800
 80032dc:	eff37800 	.word	0xeff37800

080032e0 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80032e0:	b580      	push	{r7, lr}
 80032e2:	b08a      	sub	sp, #40	; 0x28
 80032e4:	af02      	add	r7, sp, #8
 80032e6:	60f8      	str	r0, [r7, #12]
 80032e8:	60b9      	str	r1, [r7, #8]
 80032ea:	4613      	mov	r3, r2
 80032ec:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80032f2:	68bb      	ldr	r3, [r7, #8]
 80032f4:	781b      	ldrb	r3, [r3, #0]
 80032f6:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80032f8:	68bb      	ldr	r3, [r7, #8]
 80032fa:	785b      	ldrb	r3, [r3, #1]
 80032fc:	2b01      	cmp	r3, #1
 80032fe:	f040 815c 	bne.w	80035ba <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8003302:	68bb      	ldr	r3, [r7, #8]
 8003304:	695b      	ldr	r3, [r3, #20]
 8003306:	2b00      	cmp	r3, #0
 8003308:	d132      	bne.n	8003370 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800330a:	69bb      	ldr	r3, [r7, #24]
 800330c:	015a      	lsls	r2, r3, #5
 800330e:	69fb      	ldr	r3, [r7, #28]
 8003310:	4413      	add	r3, r2
 8003312:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003316:	691b      	ldr	r3, [r3, #16]
 8003318:	69ba      	ldr	r2, [r7, #24]
 800331a:	0151      	lsls	r1, r2, #5
 800331c:	69fa      	ldr	r2, [r7, #28]
 800331e:	440a      	add	r2, r1
 8003320:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003324:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003328:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800332c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800332e:	69bb      	ldr	r3, [r7, #24]
 8003330:	015a      	lsls	r2, r3, #5
 8003332:	69fb      	ldr	r3, [r7, #28]
 8003334:	4413      	add	r3, r2
 8003336:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800333a:	691b      	ldr	r3, [r3, #16]
 800333c:	69ba      	ldr	r2, [r7, #24]
 800333e:	0151      	lsls	r1, r2, #5
 8003340:	69fa      	ldr	r2, [r7, #28]
 8003342:	440a      	add	r2, r1
 8003344:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003348:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800334c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800334e:	69bb      	ldr	r3, [r7, #24]
 8003350:	015a      	lsls	r2, r3, #5
 8003352:	69fb      	ldr	r3, [r7, #28]
 8003354:	4413      	add	r3, r2
 8003356:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800335a:	691b      	ldr	r3, [r3, #16]
 800335c:	69ba      	ldr	r2, [r7, #24]
 800335e:	0151      	lsls	r1, r2, #5
 8003360:	69fa      	ldr	r2, [r7, #28]
 8003362:	440a      	add	r2, r1
 8003364:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003368:	0cdb      	lsrs	r3, r3, #19
 800336a:	04db      	lsls	r3, r3, #19
 800336c:	6113      	str	r3, [r2, #16]
 800336e:	e074      	b.n	800345a <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003370:	69bb      	ldr	r3, [r7, #24]
 8003372:	015a      	lsls	r2, r3, #5
 8003374:	69fb      	ldr	r3, [r7, #28]
 8003376:	4413      	add	r3, r2
 8003378:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800337c:	691b      	ldr	r3, [r3, #16]
 800337e:	69ba      	ldr	r2, [r7, #24]
 8003380:	0151      	lsls	r1, r2, #5
 8003382:	69fa      	ldr	r2, [r7, #28]
 8003384:	440a      	add	r2, r1
 8003386:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800338a:	0cdb      	lsrs	r3, r3, #19
 800338c:	04db      	lsls	r3, r3, #19
 800338e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003390:	69bb      	ldr	r3, [r7, #24]
 8003392:	015a      	lsls	r2, r3, #5
 8003394:	69fb      	ldr	r3, [r7, #28]
 8003396:	4413      	add	r3, r2
 8003398:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800339c:	691b      	ldr	r3, [r3, #16]
 800339e:	69ba      	ldr	r2, [r7, #24]
 80033a0:	0151      	lsls	r1, r2, #5
 80033a2:	69fa      	ldr	r2, [r7, #28]
 80033a4:	440a      	add	r2, r1
 80033a6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80033aa:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80033ae:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80033b2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80033b4:	69bb      	ldr	r3, [r7, #24]
 80033b6:	015a      	lsls	r2, r3, #5
 80033b8:	69fb      	ldr	r3, [r7, #28]
 80033ba:	4413      	add	r3, r2
 80033bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80033c0:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80033c2:	68bb      	ldr	r3, [r7, #8]
 80033c4:	6959      	ldr	r1, [r3, #20]
 80033c6:	68bb      	ldr	r3, [r7, #8]
 80033c8:	689b      	ldr	r3, [r3, #8]
 80033ca:	440b      	add	r3, r1
 80033cc:	1e59      	subs	r1, r3, #1
 80033ce:	68bb      	ldr	r3, [r7, #8]
 80033d0:	689b      	ldr	r3, [r3, #8]
 80033d2:	fbb1 f3f3 	udiv	r3, r1, r3
 80033d6:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80033d8:	4b9d      	ldr	r3, [pc, #628]	; (8003650 <USB_EPStartXfer+0x370>)
 80033da:	400b      	ands	r3, r1
 80033dc:	69b9      	ldr	r1, [r7, #24]
 80033de:	0148      	lsls	r0, r1, #5
 80033e0:	69f9      	ldr	r1, [r7, #28]
 80033e2:	4401      	add	r1, r0
 80033e4:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80033e8:	4313      	orrs	r3, r2
 80033ea:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80033ec:	69bb      	ldr	r3, [r7, #24]
 80033ee:	015a      	lsls	r2, r3, #5
 80033f0:	69fb      	ldr	r3, [r7, #28]
 80033f2:	4413      	add	r3, r2
 80033f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80033f8:	691a      	ldr	r2, [r3, #16]
 80033fa:	68bb      	ldr	r3, [r7, #8]
 80033fc:	695b      	ldr	r3, [r3, #20]
 80033fe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003402:	69b9      	ldr	r1, [r7, #24]
 8003404:	0148      	lsls	r0, r1, #5
 8003406:	69f9      	ldr	r1, [r7, #28]
 8003408:	4401      	add	r1, r0
 800340a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800340e:	4313      	orrs	r3, r2
 8003410:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8003412:	68bb      	ldr	r3, [r7, #8]
 8003414:	78db      	ldrb	r3, [r3, #3]
 8003416:	2b01      	cmp	r3, #1
 8003418:	d11f      	bne.n	800345a <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800341a:	69bb      	ldr	r3, [r7, #24]
 800341c:	015a      	lsls	r2, r3, #5
 800341e:	69fb      	ldr	r3, [r7, #28]
 8003420:	4413      	add	r3, r2
 8003422:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003426:	691b      	ldr	r3, [r3, #16]
 8003428:	69ba      	ldr	r2, [r7, #24]
 800342a:	0151      	lsls	r1, r2, #5
 800342c:	69fa      	ldr	r2, [r7, #28]
 800342e:	440a      	add	r2, r1
 8003430:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003434:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8003438:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800343a:	69bb      	ldr	r3, [r7, #24]
 800343c:	015a      	lsls	r2, r3, #5
 800343e:	69fb      	ldr	r3, [r7, #28]
 8003440:	4413      	add	r3, r2
 8003442:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003446:	691b      	ldr	r3, [r3, #16]
 8003448:	69ba      	ldr	r2, [r7, #24]
 800344a:	0151      	lsls	r1, r2, #5
 800344c:	69fa      	ldr	r2, [r7, #28]
 800344e:	440a      	add	r2, r1
 8003450:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003454:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003458:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800345a:	79fb      	ldrb	r3, [r7, #7]
 800345c:	2b01      	cmp	r3, #1
 800345e:	d14b      	bne.n	80034f8 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8003460:	68bb      	ldr	r3, [r7, #8]
 8003462:	691b      	ldr	r3, [r3, #16]
 8003464:	2b00      	cmp	r3, #0
 8003466:	d009      	beq.n	800347c <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8003468:	69bb      	ldr	r3, [r7, #24]
 800346a:	015a      	lsls	r2, r3, #5
 800346c:	69fb      	ldr	r3, [r7, #28]
 800346e:	4413      	add	r3, r2
 8003470:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003474:	461a      	mov	r2, r3
 8003476:	68bb      	ldr	r3, [r7, #8]
 8003478:	691b      	ldr	r3, [r3, #16]
 800347a:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800347c:	68bb      	ldr	r3, [r7, #8]
 800347e:	78db      	ldrb	r3, [r3, #3]
 8003480:	2b01      	cmp	r3, #1
 8003482:	d128      	bne.n	80034d6 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8003484:	69fb      	ldr	r3, [r7, #28]
 8003486:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800348a:	689b      	ldr	r3, [r3, #8]
 800348c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003490:	2b00      	cmp	r3, #0
 8003492:	d110      	bne.n	80034b6 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8003494:	69bb      	ldr	r3, [r7, #24]
 8003496:	015a      	lsls	r2, r3, #5
 8003498:	69fb      	ldr	r3, [r7, #28]
 800349a:	4413      	add	r3, r2
 800349c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	69ba      	ldr	r2, [r7, #24]
 80034a4:	0151      	lsls	r1, r2, #5
 80034a6:	69fa      	ldr	r2, [r7, #28]
 80034a8:	440a      	add	r2, r1
 80034aa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80034ae:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80034b2:	6013      	str	r3, [r2, #0]
 80034b4:	e00f      	b.n	80034d6 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80034b6:	69bb      	ldr	r3, [r7, #24]
 80034b8:	015a      	lsls	r2, r3, #5
 80034ba:	69fb      	ldr	r3, [r7, #28]
 80034bc:	4413      	add	r3, r2
 80034be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	69ba      	ldr	r2, [r7, #24]
 80034c6:	0151      	lsls	r1, r2, #5
 80034c8:	69fa      	ldr	r2, [r7, #28]
 80034ca:	440a      	add	r2, r1
 80034cc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80034d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80034d4:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80034d6:	69bb      	ldr	r3, [r7, #24]
 80034d8:	015a      	lsls	r2, r3, #5
 80034da:	69fb      	ldr	r3, [r7, #28]
 80034dc:	4413      	add	r3, r2
 80034de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	69ba      	ldr	r2, [r7, #24]
 80034e6:	0151      	lsls	r1, r2, #5
 80034e8:	69fa      	ldr	r2, [r7, #28]
 80034ea:	440a      	add	r2, r1
 80034ec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80034f0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80034f4:	6013      	str	r3, [r2, #0]
 80034f6:	e12f      	b.n	8003758 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80034f8:	69bb      	ldr	r3, [r7, #24]
 80034fa:	015a      	lsls	r2, r3, #5
 80034fc:	69fb      	ldr	r3, [r7, #28]
 80034fe:	4413      	add	r3, r2
 8003500:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	69ba      	ldr	r2, [r7, #24]
 8003508:	0151      	lsls	r1, r2, #5
 800350a:	69fa      	ldr	r2, [r7, #28]
 800350c:	440a      	add	r2, r1
 800350e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003512:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003516:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8003518:	68bb      	ldr	r3, [r7, #8]
 800351a:	78db      	ldrb	r3, [r3, #3]
 800351c:	2b01      	cmp	r3, #1
 800351e:	d015      	beq.n	800354c <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8003520:	68bb      	ldr	r3, [r7, #8]
 8003522:	695b      	ldr	r3, [r3, #20]
 8003524:	2b00      	cmp	r3, #0
 8003526:	f000 8117 	beq.w	8003758 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800352a:	69fb      	ldr	r3, [r7, #28]
 800352c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003530:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003532:	68bb      	ldr	r3, [r7, #8]
 8003534:	781b      	ldrb	r3, [r3, #0]
 8003536:	f003 030f 	and.w	r3, r3, #15
 800353a:	2101      	movs	r1, #1
 800353c:	fa01 f303 	lsl.w	r3, r1, r3
 8003540:	69f9      	ldr	r1, [r7, #28]
 8003542:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003546:	4313      	orrs	r3, r2
 8003548:	634b      	str	r3, [r1, #52]	; 0x34
 800354a:	e105      	b.n	8003758 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800354c:	69fb      	ldr	r3, [r7, #28]
 800354e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003552:	689b      	ldr	r3, [r3, #8]
 8003554:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003558:	2b00      	cmp	r3, #0
 800355a:	d110      	bne.n	800357e <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800355c:	69bb      	ldr	r3, [r7, #24]
 800355e:	015a      	lsls	r2, r3, #5
 8003560:	69fb      	ldr	r3, [r7, #28]
 8003562:	4413      	add	r3, r2
 8003564:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	69ba      	ldr	r2, [r7, #24]
 800356c:	0151      	lsls	r1, r2, #5
 800356e:	69fa      	ldr	r2, [r7, #28]
 8003570:	440a      	add	r2, r1
 8003572:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003576:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800357a:	6013      	str	r3, [r2, #0]
 800357c:	e00f      	b.n	800359e <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800357e:	69bb      	ldr	r3, [r7, #24]
 8003580:	015a      	lsls	r2, r3, #5
 8003582:	69fb      	ldr	r3, [r7, #28]
 8003584:	4413      	add	r3, r2
 8003586:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	69ba      	ldr	r2, [r7, #24]
 800358e:	0151      	lsls	r1, r2, #5
 8003590:	69fa      	ldr	r2, [r7, #28]
 8003592:	440a      	add	r2, r1
 8003594:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003598:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800359c:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800359e:	68bb      	ldr	r3, [r7, #8]
 80035a0:	68d9      	ldr	r1, [r3, #12]
 80035a2:	68bb      	ldr	r3, [r7, #8]
 80035a4:	781a      	ldrb	r2, [r3, #0]
 80035a6:	68bb      	ldr	r3, [r7, #8]
 80035a8:	695b      	ldr	r3, [r3, #20]
 80035aa:	b298      	uxth	r0, r3
 80035ac:	79fb      	ldrb	r3, [r7, #7]
 80035ae:	9300      	str	r3, [sp, #0]
 80035b0:	4603      	mov	r3, r0
 80035b2:	68f8      	ldr	r0, [r7, #12]
 80035b4:	f000 fa2b 	bl	8003a0e <USB_WritePacket>
 80035b8:	e0ce      	b.n	8003758 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80035ba:	69bb      	ldr	r3, [r7, #24]
 80035bc:	015a      	lsls	r2, r3, #5
 80035be:	69fb      	ldr	r3, [r7, #28]
 80035c0:	4413      	add	r3, r2
 80035c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80035c6:	691b      	ldr	r3, [r3, #16]
 80035c8:	69ba      	ldr	r2, [r7, #24]
 80035ca:	0151      	lsls	r1, r2, #5
 80035cc:	69fa      	ldr	r2, [r7, #28]
 80035ce:	440a      	add	r2, r1
 80035d0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80035d4:	0cdb      	lsrs	r3, r3, #19
 80035d6:	04db      	lsls	r3, r3, #19
 80035d8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80035da:	69bb      	ldr	r3, [r7, #24]
 80035dc:	015a      	lsls	r2, r3, #5
 80035de:	69fb      	ldr	r3, [r7, #28]
 80035e0:	4413      	add	r3, r2
 80035e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80035e6:	691b      	ldr	r3, [r3, #16]
 80035e8:	69ba      	ldr	r2, [r7, #24]
 80035ea:	0151      	lsls	r1, r2, #5
 80035ec:	69fa      	ldr	r2, [r7, #28]
 80035ee:	440a      	add	r2, r1
 80035f0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80035f4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80035f8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80035fc:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 80035fe:	68bb      	ldr	r3, [r7, #8]
 8003600:	695b      	ldr	r3, [r3, #20]
 8003602:	2b00      	cmp	r3, #0
 8003604:	d126      	bne.n	8003654 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8003606:	69bb      	ldr	r3, [r7, #24]
 8003608:	015a      	lsls	r2, r3, #5
 800360a:	69fb      	ldr	r3, [r7, #28]
 800360c:	4413      	add	r3, r2
 800360e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003612:	691a      	ldr	r2, [r3, #16]
 8003614:	68bb      	ldr	r3, [r7, #8]
 8003616:	689b      	ldr	r3, [r3, #8]
 8003618:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800361c:	69b9      	ldr	r1, [r7, #24]
 800361e:	0148      	lsls	r0, r1, #5
 8003620:	69f9      	ldr	r1, [r7, #28]
 8003622:	4401      	add	r1, r0
 8003624:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8003628:	4313      	orrs	r3, r2
 800362a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800362c:	69bb      	ldr	r3, [r7, #24]
 800362e:	015a      	lsls	r2, r3, #5
 8003630:	69fb      	ldr	r3, [r7, #28]
 8003632:	4413      	add	r3, r2
 8003634:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003638:	691b      	ldr	r3, [r3, #16]
 800363a:	69ba      	ldr	r2, [r7, #24]
 800363c:	0151      	lsls	r1, r2, #5
 800363e:	69fa      	ldr	r2, [r7, #28]
 8003640:	440a      	add	r2, r1
 8003642:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003646:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800364a:	6113      	str	r3, [r2, #16]
 800364c:	e036      	b.n	80036bc <USB_EPStartXfer+0x3dc>
 800364e:	bf00      	nop
 8003650:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8003654:	68bb      	ldr	r3, [r7, #8]
 8003656:	695a      	ldr	r2, [r3, #20]
 8003658:	68bb      	ldr	r3, [r7, #8]
 800365a:	689b      	ldr	r3, [r3, #8]
 800365c:	4413      	add	r3, r2
 800365e:	1e5a      	subs	r2, r3, #1
 8003660:	68bb      	ldr	r3, [r7, #8]
 8003662:	689b      	ldr	r3, [r3, #8]
 8003664:	fbb2 f3f3 	udiv	r3, r2, r3
 8003668:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800366a:	69bb      	ldr	r3, [r7, #24]
 800366c:	015a      	lsls	r2, r3, #5
 800366e:	69fb      	ldr	r3, [r7, #28]
 8003670:	4413      	add	r3, r2
 8003672:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003676:	691a      	ldr	r2, [r3, #16]
 8003678:	8afb      	ldrh	r3, [r7, #22]
 800367a:	04d9      	lsls	r1, r3, #19
 800367c:	4b39      	ldr	r3, [pc, #228]	; (8003764 <USB_EPStartXfer+0x484>)
 800367e:	400b      	ands	r3, r1
 8003680:	69b9      	ldr	r1, [r7, #24]
 8003682:	0148      	lsls	r0, r1, #5
 8003684:	69f9      	ldr	r1, [r7, #28]
 8003686:	4401      	add	r1, r0
 8003688:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800368c:	4313      	orrs	r3, r2
 800368e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8003690:	69bb      	ldr	r3, [r7, #24]
 8003692:	015a      	lsls	r2, r3, #5
 8003694:	69fb      	ldr	r3, [r7, #28]
 8003696:	4413      	add	r3, r2
 8003698:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800369c:	691a      	ldr	r2, [r3, #16]
 800369e:	68bb      	ldr	r3, [r7, #8]
 80036a0:	689b      	ldr	r3, [r3, #8]
 80036a2:	8af9      	ldrh	r1, [r7, #22]
 80036a4:	fb01 f303 	mul.w	r3, r1, r3
 80036a8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80036ac:	69b9      	ldr	r1, [r7, #24]
 80036ae:	0148      	lsls	r0, r1, #5
 80036b0:	69f9      	ldr	r1, [r7, #28]
 80036b2:	4401      	add	r1, r0
 80036b4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80036b8:	4313      	orrs	r3, r2
 80036ba:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80036bc:	79fb      	ldrb	r3, [r7, #7]
 80036be:	2b01      	cmp	r3, #1
 80036c0:	d10d      	bne.n	80036de <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80036c2:	68bb      	ldr	r3, [r7, #8]
 80036c4:	68db      	ldr	r3, [r3, #12]
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d009      	beq.n	80036de <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80036ca:	68bb      	ldr	r3, [r7, #8]
 80036cc:	68d9      	ldr	r1, [r3, #12]
 80036ce:	69bb      	ldr	r3, [r7, #24]
 80036d0:	015a      	lsls	r2, r3, #5
 80036d2:	69fb      	ldr	r3, [r7, #28]
 80036d4:	4413      	add	r3, r2
 80036d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80036da:	460a      	mov	r2, r1
 80036dc:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80036de:	68bb      	ldr	r3, [r7, #8]
 80036e0:	78db      	ldrb	r3, [r3, #3]
 80036e2:	2b01      	cmp	r3, #1
 80036e4:	d128      	bne.n	8003738 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80036e6:	69fb      	ldr	r3, [r7, #28]
 80036e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80036ec:	689b      	ldr	r3, [r3, #8]
 80036ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d110      	bne.n	8003718 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80036f6:	69bb      	ldr	r3, [r7, #24]
 80036f8:	015a      	lsls	r2, r3, #5
 80036fa:	69fb      	ldr	r3, [r7, #28]
 80036fc:	4413      	add	r3, r2
 80036fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	69ba      	ldr	r2, [r7, #24]
 8003706:	0151      	lsls	r1, r2, #5
 8003708:	69fa      	ldr	r2, [r7, #28]
 800370a:	440a      	add	r2, r1
 800370c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003710:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003714:	6013      	str	r3, [r2, #0]
 8003716:	e00f      	b.n	8003738 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8003718:	69bb      	ldr	r3, [r7, #24]
 800371a:	015a      	lsls	r2, r3, #5
 800371c:	69fb      	ldr	r3, [r7, #28]
 800371e:	4413      	add	r3, r2
 8003720:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	69ba      	ldr	r2, [r7, #24]
 8003728:	0151      	lsls	r1, r2, #5
 800372a:	69fa      	ldr	r2, [r7, #28]
 800372c:	440a      	add	r2, r1
 800372e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003732:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003736:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8003738:	69bb      	ldr	r3, [r7, #24]
 800373a:	015a      	lsls	r2, r3, #5
 800373c:	69fb      	ldr	r3, [r7, #28]
 800373e:	4413      	add	r3, r2
 8003740:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	69ba      	ldr	r2, [r7, #24]
 8003748:	0151      	lsls	r1, r2, #5
 800374a:	69fa      	ldr	r2, [r7, #28]
 800374c:	440a      	add	r2, r1
 800374e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003752:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003756:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8003758:	2300      	movs	r3, #0
}
 800375a:	4618      	mov	r0, r3
 800375c:	3720      	adds	r7, #32
 800375e:	46bd      	mov	sp, r7
 8003760:	bd80      	pop	{r7, pc}
 8003762:	bf00      	nop
 8003764:	1ff80000 	.word	0x1ff80000

08003768 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8003768:	b480      	push	{r7}
 800376a:	b087      	sub	sp, #28
 800376c:	af00      	add	r7, sp, #0
 800376e:	60f8      	str	r0, [r7, #12]
 8003770:	60b9      	str	r1, [r7, #8]
 8003772:	4613      	mov	r3, r2
 8003774:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800377a:	68bb      	ldr	r3, [r7, #8]
 800377c:	781b      	ldrb	r3, [r3, #0]
 800377e:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8003780:	68bb      	ldr	r3, [r7, #8]
 8003782:	785b      	ldrb	r3, [r3, #1]
 8003784:	2b01      	cmp	r3, #1
 8003786:	f040 80cd 	bne.w	8003924 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800378a:	68bb      	ldr	r3, [r7, #8]
 800378c:	695b      	ldr	r3, [r3, #20]
 800378e:	2b00      	cmp	r3, #0
 8003790:	d132      	bne.n	80037f8 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003792:	693b      	ldr	r3, [r7, #16]
 8003794:	015a      	lsls	r2, r3, #5
 8003796:	697b      	ldr	r3, [r7, #20]
 8003798:	4413      	add	r3, r2
 800379a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800379e:	691b      	ldr	r3, [r3, #16]
 80037a0:	693a      	ldr	r2, [r7, #16]
 80037a2:	0151      	lsls	r1, r2, #5
 80037a4:	697a      	ldr	r2, [r7, #20]
 80037a6:	440a      	add	r2, r1
 80037a8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80037ac:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80037b0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80037b4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80037b6:	693b      	ldr	r3, [r7, #16]
 80037b8:	015a      	lsls	r2, r3, #5
 80037ba:	697b      	ldr	r3, [r7, #20]
 80037bc:	4413      	add	r3, r2
 80037be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80037c2:	691b      	ldr	r3, [r3, #16]
 80037c4:	693a      	ldr	r2, [r7, #16]
 80037c6:	0151      	lsls	r1, r2, #5
 80037c8:	697a      	ldr	r2, [r7, #20]
 80037ca:	440a      	add	r2, r1
 80037cc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80037d0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80037d4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80037d6:	693b      	ldr	r3, [r7, #16]
 80037d8:	015a      	lsls	r2, r3, #5
 80037da:	697b      	ldr	r3, [r7, #20]
 80037dc:	4413      	add	r3, r2
 80037de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80037e2:	691b      	ldr	r3, [r3, #16]
 80037e4:	693a      	ldr	r2, [r7, #16]
 80037e6:	0151      	lsls	r1, r2, #5
 80037e8:	697a      	ldr	r2, [r7, #20]
 80037ea:	440a      	add	r2, r1
 80037ec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80037f0:	0cdb      	lsrs	r3, r3, #19
 80037f2:	04db      	lsls	r3, r3, #19
 80037f4:	6113      	str	r3, [r2, #16]
 80037f6:	e04e      	b.n	8003896 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80037f8:	693b      	ldr	r3, [r7, #16]
 80037fa:	015a      	lsls	r2, r3, #5
 80037fc:	697b      	ldr	r3, [r7, #20]
 80037fe:	4413      	add	r3, r2
 8003800:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003804:	691b      	ldr	r3, [r3, #16]
 8003806:	693a      	ldr	r2, [r7, #16]
 8003808:	0151      	lsls	r1, r2, #5
 800380a:	697a      	ldr	r2, [r7, #20]
 800380c:	440a      	add	r2, r1
 800380e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003812:	0cdb      	lsrs	r3, r3, #19
 8003814:	04db      	lsls	r3, r3, #19
 8003816:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003818:	693b      	ldr	r3, [r7, #16]
 800381a:	015a      	lsls	r2, r3, #5
 800381c:	697b      	ldr	r3, [r7, #20]
 800381e:	4413      	add	r3, r2
 8003820:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003824:	691b      	ldr	r3, [r3, #16]
 8003826:	693a      	ldr	r2, [r7, #16]
 8003828:	0151      	lsls	r1, r2, #5
 800382a:	697a      	ldr	r2, [r7, #20]
 800382c:	440a      	add	r2, r1
 800382e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003832:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003836:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800383a:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 800383c:	68bb      	ldr	r3, [r7, #8]
 800383e:	695a      	ldr	r2, [r3, #20]
 8003840:	68bb      	ldr	r3, [r7, #8]
 8003842:	689b      	ldr	r3, [r3, #8]
 8003844:	429a      	cmp	r2, r3
 8003846:	d903      	bls.n	8003850 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8003848:	68bb      	ldr	r3, [r7, #8]
 800384a:	689a      	ldr	r2, [r3, #8]
 800384c:	68bb      	ldr	r3, [r7, #8]
 800384e:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8003850:	693b      	ldr	r3, [r7, #16]
 8003852:	015a      	lsls	r2, r3, #5
 8003854:	697b      	ldr	r3, [r7, #20]
 8003856:	4413      	add	r3, r2
 8003858:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800385c:	691b      	ldr	r3, [r3, #16]
 800385e:	693a      	ldr	r2, [r7, #16]
 8003860:	0151      	lsls	r1, r2, #5
 8003862:	697a      	ldr	r2, [r7, #20]
 8003864:	440a      	add	r2, r1
 8003866:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800386a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800386e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8003870:	693b      	ldr	r3, [r7, #16]
 8003872:	015a      	lsls	r2, r3, #5
 8003874:	697b      	ldr	r3, [r7, #20]
 8003876:	4413      	add	r3, r2
 8003878:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800387c:	691a      	ldr	r2, [r3, #16]
 800387e:	68bb      	ldr	r3, [r7, #8]
 8003880:	695b      	ldr	r3, [r3, #20]
 8003882:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003886:	6939      	ldr	r1, [r7, #16]
 8003888:	0148      	lsls	r0, r1, #5
 800388a:	6979      	ldr	r1, [r7, #20]
 800388c:	4401      	add	r1, r0
 800388e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8003892:	4313      	orrs	r3, r2
 8003894:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8003896:	79fb      	ldrb	r3, [r7, #7]
 8003898:	2b01      	cmp	r3, #1
 800389a:	d11e      	bne.n	80038da <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800389c:	68bb      	ldr	r3, [r7, #8]
 800389e:	691b      	ldr	r3, [r3, #16]
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d009      	beq.n	80038b8 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80038a4:	693b      	ldr	r3, [r7, #16]
 80038a6:	015a      	lsls	r2, r3, #5
 80038a8:	697b      	ldr	r3, [r7, #20]
 80038aa:	4413      	add	r3, r2
 80038ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80038b0:	461a      	mov	r2, r3
 80038b2:	68bb      	ldr	r3, [r7, #8]
 80038b4:	691b      	ldr	r3, [r3, #16]
 80038b6:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80038b8:	693b      	ldr	r3, [r7, #16]
 80038ba:	015a      	lsls	r2, r3, #5
 80038bc:	697b      	ldr	r3, [r7, #20]
 80038be:	4413      	add	r3, r2
 80038c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	693a      	ldr	r2, [r7, #16]
 80038c8:	0151      	lsls	r1, r2, #5
 80038ca:	697a      	ldr	r2, [r7, #20]
 80038cc:	440a      	add	r2, r1
 80038ce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80038d2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80038d6:	6013      	str	r3, [r2, #0]
 80038d8:	e092      	b.n	8003a00 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80038da:	693b      	ldr	r3, [r7, #16]
 80038dc:	015a      	lsls	r2, r3, #5
 80038de:	697b      	ldr	r3, [r7, #20]
 80038e0:	4413      	add	r3, r2
 80038e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	693a      	ldr	r2, [r7, #16]
 80038ea:	0151      	lsls	r1, r2, #5
 80038ec:	697a      	ldr	r2, [r7, #20]
 80038ee:	440a      	add	r2, r1
 80038f0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80038f4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80038f8:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 80038fa:	68bb      	ldr	r3, [r7, #8]
 80038fc:	695b      	ldr	r3, [r3, #20]
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d07e      	beq.n	8003a00 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8003902:	697b      	ldr	r3, [r7, #20]
 8003904:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003908:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800390a:	68bb      	ldr	r3, [r7, #8]
 800390c:	781b      	ldrb	r3, [r3, #0]
 800390e:	f003 030f 	and.w	r3, r3, #15
 8003912:	2101      	movs	r1, #1
 8003914:	fa01 f303 	lsl.w	r3, r1, r3
 8003918:	6979      	ldr	r1, [r7, #20]
 800391a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800391e:	4313      	orrs	r3, r2
 8003920:	634b      	str	r3, [r1, #52]	; 0x34
 8003922:	e06d      	b.n	8003a00 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8003924:	693b      	ldr	r3, [r7, #16]
 8003926:	015a      	lsls	r2, r3, #5
 8003928:	697b      	ldr	r3, [r7, #20]
 800392a:	4413      	add	r3, r2
 800392c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003930:	691b      	ldr	r3, [r3, #16]
 8003932:	693a      	ldr	r2, [r7, #16]
 8003934:	0151      	lsls	r1, r2, #5
 8003936:	697a      	ldr	r2, [r7, #20]
 8003938:	440a      	add	r2, r1
 800393a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800393e:	0cdb      	lsrs	r3, r3, #19
 8003940:	04db      	lsls	r3, r3, #19
 8003942:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8003944:	693b      	ldr	r3, [r7, #16]
 8003946:	015a      	lsls	r2, r3, #5
 8003948:	697b      	ldr	r3, [r7, #20]
 800394a:	4413      	add	r3, r2
 800394c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003950:	691b      	ldr	r3, [r3, #16]
 8003952:	693a      	ldr	r2, [r7, #16]
 8003954:	0151      	lsls	r1, r2, #5
 8003956:	697a      	ldr	r2, [r7, #20]
 8003958:	440a      	add	r2, r1
 800395a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800395e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003962:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003966:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8003968:	68bb      	ldr	r3, [r7, #8]
 800396a:	695b      	ldr	r3, [r3, #20]
 800396c:	2b00      	cmp	r3, #0
 800396e:	d003      	beq.n	8003978 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8003970:	68bb      	ldr	r3, [r7, #8]
 8003972:	689a      	ldr	r2, [r3, #8]
 8003974:	68bb      	ldr	r3, [r7, #8]
 8003976:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8003978:	693b      	ldr	r3, [r7, #16]
 800397a:	015a      	lsls	r2, r3, #5
 800397c:	697b      	ldr	r3, [r7, #20]
 800397e:	4413      	add	r3, r2
 8003980:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003984:	691b      	ldr	r3, [r3, #16]
 8003986:	693a      	ldr	r2, [r7, #16]
 8003988:	0151      	lsls	r1, r2, #5
 800398a:	697a      	ldr	r2, [r7, #20]
 800398c:	440a      	add	r2, r1
 800398e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003992:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003996:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8003998:	693b      	ldr	r3, [r7, #16]
 800399a:	015a      	lsls	r2, r3, #5
 800399c:	697b      	ldr	r3, [r7, #20]
 800399e:	4413      	add	r3, r2
 80039a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80039a4:	691a      	ldr	r2, [r3, #16]
 80039a6:	68bb      	ldr	r3, [r7, #8]
 80039a8:	689b      	ldr	r3, [r3, #8]
 80039aa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80039ae:	6939      	ldr	r1, [r7, #16]
 80039b0:	0148      	lsls	r0, r1, #5
 80039b2:	6979      	ldr	r1, [r7, #20]
 80039b4:	4401      	add	r1, r0
 80039b6:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80039ba:	4313      	orrs	r3, r2
 80039bc:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 80039be:	79fb      	ldrb	r3, [r7, #7]
 80039c0:	2b01      	cmp	r3, #1
 80039c2:	d10d      	bne.n	80039e0 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80039c4:	68bb      	ldr	r3, [r7, #8]
 80039c6:	68db      	ldr	r3, [r3, #12]
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d009      	beq.n	80039e0 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80039cc:	68bb      	ldr	r3, [r7, #8]
 80039ce:	68d9      	ldr	r1, [r3, #12]
 80039d0:	693b      	ldr	r3, [r7, #16]
 80039d2:	015a      	lsls	r2, r3, #5
 80039d4:	697b      	ldr	r3, [r7, #20]
 80039d6:	4413      	add	r3, r2
 80039d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80039dc:	460a      	mov	r2, r1
 80039de:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80039e0:	693b      	ldr	r3, [r7, #16]
 80039e2:	015a      	lsls	r2, r3, #5
 80039e4:	697b      	ldr	r3, [r7, #20]
 80039e6:	4413      	add	r3, r2
 80039e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	693a      	ldr	r2, [r7, #16]
 80039f0:	0151      	lsls	r1, r2, #5
 80039f2:	697a      	ldr	r2, [r7, #20]
 80039f4:	440a      	add	r2, r1
 80039f6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80039fa:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80039fe:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8003a00:	2300      	movs	r3, #0
}
 8003a02:	4618      	mov	r0, r3
 8003a04:	371c      	adds	r7, #28
 8003a06:	46bd      	mov	sp, r7
 8003a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a0c:	4770      	bx	lr

08003a0e <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8003a0e:	b480      	push	{r7}
 8003a10:	b089      	sub	sp, #36	; 0x24
 8003a12:	af00      	add	r7, sp, #0
 8003a14:	60f8      	str	r0, [r7, #12]
 8003a16:	60b9      	str	r1, [r7, #8]
 8003a18:	4611      	mov	r1, r2
 8003a1a:	461a      	mov	r2, r3
 8003a1c:	460b      	mov	r3, r1
 8003a1e:	71fb      	strb	r3, [r7, #7]
 8003a20:	4613      	mov	r3, r2
 8003a22:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8003a28:	68bb      	ldr	r3, [r7, #8]
 8003a2a:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8003a2c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d123      	bne.n	8003a7c <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8003a34:	88bb      	ldrh	r3, [r7, #4]
 8003a36:	3303      	adds	r3, #3
 8003a38:	089b      	lsrs	r3, r3, #2
 8003a3a:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8003a3c:	2300      	movs	r3, #0
 8003a3e:	61bb      	str	r3, [r7, #24]
 8003a40:	e018      	b.n	8003a74 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8003a42:	79fb      	ldrb	r3, [r7, #7]
 8003a44:	031a      	lsls	r2, r3, #12
 8003a46:	697b      	ldr	r3, [r7, #20]
 8003a48:	4413      	add	r3, r2
 8003a4a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003a4e:	461a      	mov	r2, r3
 8003a50:	69fb      	ldr	r3, [r7, #28]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	6013      	str	r3, [r2, #0]
      pSrc++;
 8003a56:	69fb      	ldr	r3, [r7, #28]
 8003a58:	3301      	adds	r3, #1
 8003a5a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8003a5c:	69fb      	ldr	r3, [r7, #28]
 8003a5e:	3301      	adds	r3, #1
 8003a60:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8003a62:	69fb      	ldr	r3, [r7, #28]
 8003a64:	3301      	adds	r3, #1
 8003a66:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8003a68:	69fb      	ldr	r3, [r7, #28]
 8003a6a:	3301      	adds	r3, #1
 8003a6c:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8003a6e:	69bb      	ldr	r3, [r7, #24]
 8003a70:	3301      	adds	r3, #1
 8003a72:	61bb      	str	r3, [r7, #24]
 8003a74:	69ba      	ldr	r2, [r7, #24]
 8003a76:	693b      	ldr	r3, [r7, #16]
 8003a78:	429a      	cmp	r2, r3
 8003a7a:	d3e2      	bcc.n	8003a42 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8003a7c:	2300      	movs	r3, #0
}
 8003a7e:	4618      	mov	r0, r3
 8003a80:	3724      	adds	r7, #36	; 0x24
 8003a82:	46bd      	mov	sp, r7
 8003a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a88:	4770      	bx	lr

08003a8a <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8003a8a:	b480      	push	{r7}
 8003a8c:	b08b      	sub	sp, #44	; 0x2c
 8003a8e:	af00      	add	r7, sp, #0
 8003a90:	60f8      	str	r0, [r7, #12]
 8003a92:	60b9      	str	r1, [r7, #8]
 8003a94:	4613      	mov	r3, r2
 8003a96:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8003a9c:	68bb      	ldr	r3, [r7, #8]
 8003a9e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8003aa0:	88fb      	ldrh	r3, [r7, #6]
 8003aa2:	089b      	lsrs	r3, r3, #2
 8003aa4:	b29b      	uxth	r3, r3
 8003aa6:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8003aa8:	88fb      	ldrh	r3, [r7, #6]
 8003aaa:	f003 0303 	and.w	r3, r3, #3
 8003aae:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8003ab0:	2300      	movs	r3, #0
 8003ab2:	623b      	str	r3, [r7, #32]
 8003ab4:	e014      	b.n	8003ae0 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8003ab6:	69bb      	ldr	r3, [r7, #24]
 8003ab8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003abc:	681a      	ldr	r2, [r3, #0]
 8003abe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ac0:	601a      	str	r2, [r3, #0]
    pDest++;
 8003ac2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ac4:	3301      	adds	r3, #1
 8003ac6:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8003ac8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aca:	3301      	adds	r3, #1
 8003acc:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8003ace:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ad0:	3301      	adds	r3, #1
 8003ad2:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8003ad4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ad6:	3301      	adds	r3, #1
 8003ad8:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8003ada:	6a3b      	ldr	r3, [r7, #32]
 8003adc:	3301      	adds	r3, #1
 8003ade:	623b      	str	r3, [r7, #32]
 8003ae0:	6a3a      	ldr	r2, [r7, #32]
 8003ae2:	697b      	ldr	r3, [r7, #20]
 8003ae4:	429a      	cmp	r2, r3
 8003ae6:	d3e6      	bcc.n	8003ab6 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8003ae8:	8bfb      	ldrh	r3, [r7, #30]
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d01e      	beq.n	8003b2c <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8003aee:	2300      	movs	r3, #0
 8003af0:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8003af2:	69bb      	ldr	r3, [r7, #24]
 8003af4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003af8:	461a      	mov	r2, r3
 8003afa:	f107 0310 	add.w	r3, r7, #16
 8003afe:	6812      	ldr	r2, [r2, #0]
 8003b00:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8003b02:	693a      	ldr	r2, [r7, #16]
 8003b04:	6a3b      	ldr	r3, [r7, #32]
 8003b06:	b2db      	uxtb	r3, r3
 8003b08:	00db      	lsls	r3, r3, #3
 8003b0a:	fa22 f303 	lsr.w	r3, r2, r3
 8003b0e:	b2da      	uxtb	r2, r3
 8003b10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b12:	701a      	strb	r2, [r3, #0]
      i++;
 8003b14:	6a3b      	ldr	r3, [r7, #32]
 8003b16:	3301      	adds	r3, #1
 8003b18:	623b      	str	r3, [r7, #32]
      pDest++;
 8003b1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b1c:	3301      	adds	r3, #1
 8003b1e:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8003b20:	8bfb      	ldrh	r3, [r7, #30]
 8003b22:	3b01      	subs	r3, #1
 8003b24:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8003b26:	8bfb      	ldrh	r3, [r7, #30]
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d1ea      	bne.n	8003b02 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8003b2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003b2e:	4618      	mov	r0, r3
 8003b30:	372c      	adds	r7, #44	; 0x2c
 8003b32:	46bd      	mov	sp, r7
 8003b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b38:	4770      	bx	lr

08003b3a <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003b3a:	b480      	push	{r7}
 8003b3c:	b085      	sub	sp, #20
 8003b3e:	af00      	add	r7, sp, #0
 8003b40:	6078      	str	r0, [r7, #4]
 8003b42:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003b48:	683b      	ldr	r3, [r7, #0]
 8003b4a:	781b      	ldrb	r3, [r3, #0]
 8003b4c:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8003b4e:	683b      	ldr	r3, [r7, #0]
 8003b50:	785b      	ldrb	r3, [r3, #1]
 8003b52:	2b01      	cmp	r3, #1
 8003b54:	d12c      	bne.n	8003bb0 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8003b56:	68bb      	ldr	r3, [r7, #8]
 8003b58:	015a      	lsls	r2, r3, #5
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	4413      	add	r3, r2
 8003b5e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	db12      	blt.n	8003b8e <USB_EPSetStall+0x54>
 8003b68:	68bb      	ldr	r3, [r7, #8]
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d00f      	beq.n	8003b8e <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8003b6e:	68bb      	ldr	r3, [r7, #8]
 8003b70:	015a      	lsls	r2, r3, #5
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	4413      	add	r3, r2
 8003b76:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	68ba      	ldr	r2, [r7, #8]
 8003b7e:	0151      	lsls	r1, r2, #5
 8003b80:	68fa      	ldr	r2, [r7, #12]
 8003b82:	440a      	add	r2, r1
 8003b84:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003b88:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003b8c:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8003b8e:	68bb      	ldr	r3, [r7, #8]
 8003b90:	015a      	lsls	r2, r3, #5
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	4413      	add	r3, r2
 8003b96:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	68ba      	ldr	r2, [r7, #8]
 8003b9e:	0151      	lsls	r1, r2, #5
 8003ba0:	68fa      	ldr	r2, [r7, #12]
 8003ba2:	440a      	add	r2, r1
 8003ba4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003ba8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003bac:	6013      	str	r3, [r2, #0]
 8003bae:	e02b      	b.n	8003c08 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8003bb0:	68bb      	ldr	r3, [r7, #8]
 8003bb2:	015a      	lsls	r2, r3, #5
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	4413      	add	r3, r2
 8003bb8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	db12      	blt.n	8003be8 <USB_EPSetStall+0xae>
 8003bc2:	68bb      	ldr	r3, [r7, #8]
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d00f      	beq.n	8003be8 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8003bc8:	68bb      	ldr	r3, [r7, #8]
 8003bca:	015a      	lsls	r2, r3, #5
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	4413      	add	r3, r2
 8003bd0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	68ba      	ldr	r2, [r7, #8]
 8003bd8:	0151      	lsls	r1, r2, #5
 8003bda:	68fa      	ldr	r2, [r7, #12]
 8003bdc:	440a      	add	r2, r1
 8003bde:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003be2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003be6:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8003be8:	68bb      	ldr	r3, [r7, #8]
 8003bea:	015a      	lsls	r2, r3, #5
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	4413      	add	r3, r2
 8003bf0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	68ba      	ldr	r2, [r7, #8]
 8003bf8:	0151      	lsls	r1, r2, #5
 8003bfa:	68fa      	ldr	r2, [r7, #12]
 8003bfc:	440a      	add	r2, r1
 8003bfe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003c02:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003c06:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8003c08:	2300      	movs	r3, #0
}
 8003c0a:	4618      	mov	r0, r3
 8003c0c:	3714      	adds	r7, #20
 8003c0e:	46bd      	mov	sp, r7
 8003c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c14:	4770      	bx	lr

08003c16 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003c16:	b480      	push	{r7}
 8003c18:	b085      	sub	sp, #20
 8003c1a:	af00      	add	r7, sp, #0
 8003c1c:	6078      	str	r0, [r7, #4]
 8003c1e:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003c24:	683b      	ldr	r3, [r7, #0]
 8003c26:	781b      	ldrb	r3, [r3, #0]
 8003c28:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8003c2a:	683b      	ldr	r3, [r7, #0]
 8003c2c:	785b      	ldrb	r3, [r3, #1]
 8003c2e:	2b01      	cmp	r3, #1
 8003c30:	d128      	bne.n	8003c84 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003c32:	68bb      	ldr	r3, [r7, #8]
 8003c34:	015a      	lsls	r2, r3, #5
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	4413      	add	r3, r2
 8003c3a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	68ba      	ldr	r2, [r7, #8]
 8003c42:	0151      	lsls	r1, r2, #5
 8003c44:	68fa      	ldr	r2, [r7, #12]
 8003c46:	440a      	add	r2, r1
 8003c48:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003c4c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003c50:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8003c52:	683b      	ldr	r3, [r7, #0]
 8003c54:	78db      	ldrb	r3, [r3, #3]
 8003c56:	2b03      	cmp	r3, #3
 8003c58:	d003      	beq.n	8003c62 <USB_EPClearStall+0x4c>
 8003c5a:	683b      	ldr	r3, [r7, #0]
 8003c5c:	78db      	ldrb	r3, [r3, #3]
 8003c5e:	2b02      	cmp	r3, #2
 8003c60:	d138      	bne.n	8003cd4 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8003c62:	68bb      	ldr	r3, [r7, #8]
 8003c64:	015a      	lsls	r2, r3, #5
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	4413      	add	r3, r2
 8003c6a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	68ba      	ldr	r2, [r7, #8]
 8003c72:	0151      	lsls	r1, r2, #5
 8003c74:	68fa      	ldr	r2, [r7, #12]
 8003c76:	440a      	add	r2, r1
 8003c78:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003c7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c80:	6013      	str	r3, [r2, #0]
 8003c82:	e027      	b.n	8003cd4 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003c84:	68bb      	ldr	r3, [r7, #8]
 8003c86:	015a      	lsls	r2, r3, #5
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	4413      	add	r3, r2
 8003c8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	68ba      	ldr	r2, [r7, #8]
 8003c94:	0151      	lsls	r1, r2, #5
 8003c96:	68fa      	ldr	r2, [r7, #12]
 8003c98:	440a      	add	r2, r1
 8003c9a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003c9e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003ca2:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8003ca4:	683b      	ldr	r3, [r7, #0]
 8003ca6:	78db      	ldrb	r3, [r3, #3]
 8003ca8:	2b03      	cmp	r3, #3
 8003caa:	d003      	beq.n	8003cb4 <USB_EPClearStall+0x9e>
 8003cac:	683b      	ldr	r3, [r7, #0]
 8003cae:	78db      	ldrb	r3, [r3, #3]
 8003cb0:	2b02      	cmp	r3, #2
 8003cb2:	d10f      	bne.n	8003cd4 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8003cb4:	68bb      	ldr	r3, [r7, #8]
 8003cb6:	015a      	lsls	r2, r3, #5
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	4413      	add	r3, r2
 8003cbc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	68ba      	ldr	r2, [r7, #8]
 8003cc4:	0151      	lsls	r1, r2, #5
 8003cc6:	68fa      	ldr	r2, [r7, #12]
 8003cc8:	440a      	add	r2, r1
 8003cca:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003cce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003cd2:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8003cd4:	2300      	movs	r3, #0
}
 8003cd6:	4618      	mov	r0, r3
 8003cd8:	3714      	adds	r7, #20
 8003cda:	46bd      	mov	sp, r7
 8003cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce0:	4770      	bx	lr

08003ce2 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8003ce2:	b480      	push	{r7}
 8003ce4:	b085      	sub	sp, #20
 8003ce6:	af00      	add	r7, sp, #0
 8003ce8:	6078      	str	r0, [r7, #4]
 8003cea:	460b      	mov	r3, r1
 8003cec:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	68fa      	ldr	r2, [r7, #12]
 8003cfc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003d00:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8003d04:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d0c:	681a      	ldr	r2, [r3, #0]
 8003d0e:	78fb      	ldrb	r3, [r7, #3]
 8003d10:	011b      	lsls	r3, r3, #4
 8003d12:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8003d16:	68f9      	ldr	r1, [r7, #12]
 8003d18:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003d1c:	4313      	orrs	r3, r2
 8003d1e:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8003d20:	2300      	movs	r3, #0
}
 8003d22:	4618      	mov	r0, r3
 8003d24:	3714      	adds	r7, #20
 8003d26:	46bd      	mov	sp, r7
 8003d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d2c:	4770      	bx	lr

08003d2e <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8003d2e:	b480      	push	{r7}
 8003d30:	b085      	sub	sp, #20
 8003d32:	af00      	add	r7, sp, #0
 8003d34:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	68fa      	ldr	r2, [r7, #12]
 8003d44:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8003d48:	f023 0303 	bic.w	r3, r3, #3
 8003d4c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d54:	685b      	ldr	r3, [r3, #4]
 8003d56:	68fa      	ldr	r2, [r7, #12]
 8003d58:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003d5c:	f023 0302 	bic.w	r3, r3, #2
 8003d60:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8003d62:	2300      	movs	r3, #0
}
 8003d64:	4618      	mov	r0, r3
 8003d66:	3714      	adds	r7, #20
 8003d68:	46bd      	mov	sp, r7
 8003d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d6e:	4770      	bx	lr

08003d70 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8003d70:	b480      	push	{r7}
 8003d72:	b085      	sub	sp, #20
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	68fa      	ldr	r2, [r7, #12]
 8003d86:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8003d8a:	f023 0303 	bic.w	r3, r3, #3
 8003d8e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d96:	685b      	ldr	r3, [r3, #4]
 8003d98:	68fa      	ldr	r2, [r7, #12]
 8003d9a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003d9e:	f043 0302 	orr.w	r3, r3, #2
 8003da2:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8003da4:	2300      	movs	r3, #0
}
 8003da6:	4618      	mov	r0, r3
 8003da8:	3714      	adds	r7, #20
 8003daa:	46bd      	mov	sp, r7
 8003dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db0:	4770      	bx	lr

08003db2 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8003db2:	b480      	push	{r7}
 8003db4:	b085      	sub	sp, #20
 8003db6:	af00      	add	r7, sp, #0
 8003db8:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	695b      	ldr	r3, [r3, #20]
 8003dbe:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	699b      	ldr	r3, [r3, #24]
 8003dc4:	68fa      	ldr	r2, [r7, #12]
 8003dc6:	4013      	ands	r3, r2
 8003dc8:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8003dca:	68fb      	ldr	r3, [r7, #12]
}
 8003dcc:	4618      	mov	r0, r3
 8003dce:	3714      	adds	r7, #20
 8003dd0:	46bd      	mov	sp, r7
 8003dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd6:	4770      	bx	lr

08003dd8 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8003dd8:	b480      	push	{r7}
 8003dda:	b085      	sub	sp, #20
 8003ddc:	af00      	add	r7, sp, #0
 8003dde:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003dea:	699b      	ldr	r3, [r3, #24]
 8003dec:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003df4:	69db      	ldr	r3, [r3, #28]
 8003df6:	68ba      	ldr	r2, [r7, #8]
 8003df8:	4013      	ands	r3, r2
 8003dfa:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8003dfc:	68bb      	ldr	r3, [r7, #8]
 8003dfe:	0c1b      	lsrs	r3, r3, #16
}
 8003e00:	4618      	mov	r0, r3
 8003e02:	3714      	adds	r7, #20
 8003e04:	46bd      	mov	sp, r7
 8003e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e0a:	4770      	bx	lr

08003e0c <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8003e0c:	b480      	push	{r7}
 8003e0e:	b085      	sub	sp, #20
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e1e:	699b      	ldr	r3, [r3, #24]
 8003e20:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e28:	69db      	ldr	r3, [r3, #28]
 8003e2a:	68ba      	ldr	r2, [r7, #8]
 8003e2c:	4013      	ands	r3, r2
 8003e2e:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8003e30:	68bb      	ldr	r3, [r7, #8]
 8003e32:	b29b      	uxth	r3, r3
}
 8003e34:	4618      	mov	r0, r3
 8003e36:	3714      	adds	r7, #20
 8003e38:	46bd      	mov	sp, r7
 8003e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e3e:	4770      	bx	lr

08003e40 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8003e40:	b480      	push	{r7}
 8003e42:	b085      	sub	sp, #20
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	6078      	str	r0, [r7, #4]
 8003e48:	460b      	mov	r3, r1
 8003e4a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8003e50:	78fb      	ldrb	r3, [r7, #3]
 8003e52:	015a      	lsls	r2, r3, #5
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	4413      	add	r3, r2
 8003e58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e5c:	689b      	ldr	r3, [r3, #8]
 8003e5e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e66:	695b      	ldr	r3, [r3, #20]
 8003e68:	68ba      	ldr	r2, [r7, #8]
 8003e6a:	4013      	ands	r3, r2
 8003e6c:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8003e6e:	68bb      	ldr	r3, [r7, #8]
}
 8003e70:	4618      	mov	r0, r3
 8003e72:	3714      	adds	r7, #20
 8003e74:	46bd      	mov	sp, r7
 8003e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e7a:	4770      	bx	lr

08003e7c <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8003e7c:	b480      	push	{r7}
 8003e7e:	b087      	sub	sp, #28
 8003e80:	af00      	add	r7, sp, #0
 8003e82:	6078      	str	r0, [r7, #4]
 8003e84:	460b      	mov	r3, r1
 8003e86:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8003e8c:	697b      	ldr	r3, [r7, #20]
 8003e8e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e92:	691b      	ldr	r3, [r3, #16]
 8003e94:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8003e96:	697b      	ldr	r3, [r7, #20]
 8003e98:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e9e:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8003ea0:	78fb      	ldrb	r3, [r7, #3]
 8003ea2:	f003 030f 	and.w	r3, r3, #15
 8003ea6:	68fa      	ldr	r2, [r7, #12]
 8003ea8:	fa22 f303 	lsr.w	r3, r2, r3
 8003eac:	01db      	lsls	r3, r3, #7
 8003eae:	b2db      	uxtb	r3, r3
 8003eb0:	693a      	ldr	r2, [r7, #16]
 8003eb2:	4313      	orrs	r3, r2
 8003eb4:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8003eb6:	78fb      	ldrb	r3, [r7, #3]
 8003eb8:	015a      	lsls	r2, r3, #5
 8003eba:	697b      	ldr	r3, [r7, #20]
 8003ebc:	4413      	add	r3, r2
 8003ebe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ec2:	689b      	ldr	r3, [r3, #8]
 8003ec4:	693a      	ldr	r2, [r7, #16]
 8003ec6:	4013      	ands	r3, r2
 8003ec8:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8003eca:	68bb      	ldr	r3, [r7, #8]
}
 8003ecc:	4618      	mov	r0, r3
 8003ece:	371c      	adds	r7, #28
 8003ed0:	46bd      	mov	sp, r7
 8003ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed6:	4770      	bx	lr

08003ed8 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8003ed8:	b480      	push	{r7}
 8003eda:	b083      	sub	sp, #12
 8003edc:	af00      	add	r7, sp, #0
 8003ede:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	695b      	ldr	r3, [r3, #20]
 8003ee4:	f003 0301 	and.w	r3, r3, #1
}
 8003ee8:	4618      	mov	r0, r3
 8003eea:	370c      	adds	r7, #12
 8003eec:	46bd      	mov	sp, r7
 8003eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef2:	4770      	bx	lr

08003ef4 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8003ef4:	b480      	push	{r7}
 8003ef6:	b085      	sub	sp, #20
 8003ef8:	af00      	add	r7, sp, #0
 8003efa:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	68fa      	ldr	r2, [r7, #12]
 8003f0a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003f0e:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8003f12:	f023 0307 	bic.w	r3, r3, #7
 8003f16:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f1e:	685b      	ldr	r3, [r3, #4]
 8003f20:	68fa      	ldr	r2, [r7, #12]
 8003f22:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003f26:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f2a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8003f2c:	2300      	movs	r3, #0
}
 8003f2e:	4618      	mov	r0, r3
 8003f30:	3714      	adds	r7, #20
 8003f32:	46bd      	mov	sp, r7
 8003f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f38:	4770      	bx	lr
	...

08003f3c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8003f3c:	b480      	push	{r7}
 8003f3e:	b087      	sub	sp, #28
 8003f40:	af00      	add	r7, sp, #0
 8003f42:	60f8      	str	r0, [r7, #12]
 8003f44:	460b      	mov	r3, r1
 8003f46:	607a      	str	r2, [r7, #4]
 8003f48:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	333c      	adds	r3, #60	; 0x3c
 8003f52:	3304      	adds	r3, #4
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8003f58:	693b      	ldr	r3, [r7, #16]
 8003f5a:	4a26      	ldr	r2, [pc, #152]	; (8003ff4 <USB_EP0_OutStart+0xb8>)
 8003f5c:	4293      	cmp	r3, r2
 8003f5e:	d90a      	bls.n	8003f76 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003f60:	697b      	ldr	r3, [r7, #20]
 8003f62:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003f6c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003f70:	d101      	bne.n	8003f76 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8003f72:	2300      	movs	r3, #0
 8003f74:	e037      	b.n	8003fe6 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8003f76:	697b      	ldr	r3, [r7, #20]
 8003f78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f7c:	461a      	mov	r2, r3
 8003f7e:	2300      	movs	r3, #0
 8003f80:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8003f82:	697b      	ldr	r3, [r7, #20]
 8003f84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f88:	691b      	ldr	r3, [r3, #16]
 8003f8a:	697a      	ldr	r2, [r7, #20]
 8003f8c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003f90:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003f94:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8003f96:	697b      	ldr	r3, [r7, #20]
 8003f98:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f9c:	691b      	ldr	r3, [r3, #16]
 8003f9e:	697a      	ldr	r2, [r7, #20]
 8003fa0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003fa4:	f043 0318 	orr.w	r3, r3, #24
 8003fa8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8003faa:	697b      	ldr	r3, [r7, #20]
 8003fac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003fb0:	691b      	ldr	r3, [r3, #16]
 8003fb2:	697a      	ldr	r2, [r7, #20]
 8003fb4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003fb8:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8003fbc:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8003fbe:	7afb      	ldrb	r3, [r7, #11]
 8003fc0:	2b01      	cmp	r3, #1
 8003fc2:	d10f      	bne.n	8003fe4 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8003fc4:	697b      	ldr	r3, [r7, #20]
 8003fc6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003fca:	461a      	mov	r2, r3
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8003fd0:	697b      	ldr	r3, [r7, #20]
 8003fd2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	697a      	ldr	r2, [r7, #20]
 8003fda:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003fde:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8003fe2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8003fe4:	2300      	movs	r3, #0
}
 8003fe6:	4618      	mov	r0, r3
 8003fe8:	371c      	adds	r7, #28
 8003fea:	46bd      	mov	sp, r7
 8003fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff0:	4770      	bx	lr
 8003ff2:	bf00      	nop
 8003ff4:	4f54300a 	.word	0x4f54300a

08003ff8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8003ff8:	b480      	push	{r7}
 8003ffa:	b085      	sub	sp, #20
 8003ffc:	af00      	add	r7, sp, #0
 8003ffe:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004000:	2300      	movs	r3, #0
 8004002:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	3301      	adds	r3, #1
 8004008:	60fb      	str	r3, [r7, #12]
 800400a:	4a13      	ldr	r2, [pc, #76]	; (8004058 <USB_CoreReset+0x60>)
 800400c:	4293      	cmp	r3, r2
 800400e:	d901      	bls.n	8004014 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 8004010:	2303      	movs	r3, #3
 8004012:	e01a      	b.n	800404a <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	691b      	ldr	r3, [r3, #16]
 8004018:	2b00      	cmp	r3, #0
 800401a:	daf3      	bge.n	8004004 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800401c:	2300      	movs	r3, #0
 800401e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	691b      	ldr	r3, [r3, #16]
 8004024:	f043 0201 	orr.w	r2, r3, #1
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	3301      	adds	r3, #1
 8004030:	60fb      	str	r3, [r7, #12]
 8004032:	4a09      	ldr	r2, [pc, #36]	; (8004058 <USB_CoreReset+0x60>)
 8004034:	4293      	cmp	r3, r2
 8004036:	d901      	bls.n	800403c <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 8004038:	2303      	movs	r3, #3
 800403a:	e006      	b.n	800404a <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	691b      	ldr	r3, [r3, #16]
 8004040:	f003 0301 	and.w	r3, r3, #1
 8004044:	2b01      	cmp	r3, #1
 8004046:	d0f1      	beq.n	800402c <USB_CoreReset+0x34>

  return HAL_OK;
 8004048:	2300      	movs	r3, #0
}
 800404a:	4618      	mov	r0, r3
 800404c:	3714      	adds	r7, #20
 800404e:	46bd      	mov	sp, r7
 8004050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004054:	4770      	bx	lr
 8004056:	bf00      	nop
 8004058:	00030d40 	.word	0x00030d40

0800405c <USBD_MSC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800405c:	b580      	push	{r7, lr}
 800405e:	b084      	sub	sp, #16
 8004060:	af00      	add	r7, sp, #0
 8004062:	6078      	str	r0, [r7, #4]
 8004064:	460b      	mov	r3, r1
 8004066:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_MSC_BOT_HandleTypeDef *hmsc;

  hmsc = USBD_malloc(sizeof(USBD_MSC_BOT_HandleTypeDef));
 8004068:	f44f 701d 	mov.w	r0, #628	; 0x274
 800406c:	f003 fbae 	bl	80077cc <USBD_static_malloc>
 8004070:	60f8      	str	r0, [r7, #12]

  if (hmsc == NULL)
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	2b00      	cmp	r3, #0
 8004076:	d105      	bne.n	8004084 <USBD_MSC_Init+0x28>
  {
    pdev->pClassData = NULL;
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	2200      	movs	r2, #0
 800407c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8004080:	2302      	movs	r3, #2
 8004082:	e034      	b.n	80040ee <USBD_MSC_Init+0x92>
  }

  pdev->pClassData = (void *)hmsc;
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	68fa      	ldr	r2, [r7, #12]
 8004088:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	7c1b      	ldrb	r3, [r3, #16]
 8004090:	2b00      	cmp	r3, #0
 8004092:	d115      	bne.n	80040c0 <USBD_MSC_Init+0x64>
  {
    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, MSC_EPOUT_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 8004094:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004098:	2202      	movs	r2, #2
 800409a:	2101      	movs	r1, #1
 800409c:	6878      	ldr	r0, [r7, #4]
 800409e:	f003 fa52 	bl	8007546 <USBD_LL_OpenEP>
    pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 1U;
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	2201      	movs	r2, #1
 80040a6:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, MSC_EPIN_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 80040aa:	f44f 7300 	mov.w	r3, #512	; 0x200
 80040ae:	2202      	movs	r2, #2
 80040b0:	2181      	movs	r1, #129	; 0x81
 80040b2:	6878      	ldr	r0, [r7, #4]
 80040b4:	f003 fa47 	bl	8007546 <USBD_LL_OpenEP>
    pdev->ep_in[MSC_EPIN_ADDR & 0xFU].is_used = 1U;
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	2201      	movs	r2, #1
 80040bc:	871a      	strh	r2, [r3, #56]	; 0x38
 80040be:	e012      	b.n	80040e6 <USBD_MSC_Init+0x8a>
  }
  else
  {
    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, MSC_EPOUT_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 80040c0:	2340      	movs	r3, #64	; 0x40
 80040c2:	2202      	movs	r2, #2
 80040c4:	2101      	movs	r1, #1
 80040c6:	6878      	ldr	r0, [r7, #4]
 80040c8:	f003 fa3d 	bl	8007546 <USBD_LL_OpenEP>
    pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 1U;
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	2201      	movs	r2, #1
 80040d0:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, MSC_EPIN_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 80040d4:	2340      	movs	r3, #64	; 0x40
 80040d6:	2202      	movs	r2, #2
 80040d8:	2181      	movs	r1, #129	; 0x81
 80040da:	6878      	ldr	r0, [r7, #4]
 80040dc:	f003 fa33 	bl	8007546 <USBD_LL_OpenEP>
    pdev->ep_in[MSC_EPIN_ADDR & 0xFU].is_used = 1U;
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	2201      	movs	r2, #1
 80040e4:	871a      	strh	r2, [r3, #56]	; 0x38
  }

  /* Init the BOT  layer */
  MSC_BOT_Init(pdev);
 80040e6:	6878      	ldr	r0, [r7, #4]
 80040e8:	f000 f999 	bl	800441e <MSC_BOT_Init>

  return (uint8_t)USBD_OK;
 80040ec:	2300      	movs	r3, #0
}
 80040ee:	4618      	mov	r0, r3
 80040f0:	3710      	adds	r7, #16
 80040f2:	46bd      	mov	sp, r7
 80040f4:	bd80      	pop	{r7, pc}

080040f6 <USBD_MSC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80040f6:	b580      	push	{r7, lr}
 80040f8:	b082      	sub	sp, #8
 80040fa:	af00      	add	r7, sp, #0
 80040fc:	6078      	str	r0, [r7, #4]
 80040fe:	460b      	mov	r3, r1
 8004100:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close MSC EPs */
  (void)USBD_LL_CloseEP(pdev, MSC_EPOUT_ADDR);
 8004102:	2101      	movs	r1, #1
 8004104:	6878      	ldr	r0, [r7, #4]
 8004106:	f003 fa44 	bl	8007592 <USBD_LL_CloseEP>
  pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 0U;
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	2200      	movs	r2, #0
 800410e:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, MSC_EPIN_ADDR);
 8004112:	2181      	movs	r1, #129	; 0x81
 8004114:	6878      	ldr	r0, [r7, #4]
 8004116:	f003 fa3c 	bl	8007592 <USBD_LL_CloseEP>
  pdev->ep_in[MSC_EPIN_ADDR & 0xFU].is_used = 0U;
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	2200      	movs	r2, #0
 800411e:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Free MSC Class Resources */
  if (pdev->pClassData != NULL)
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004126:	2b00      	cmp	r3, #0
 8004128:	d00c      	beq.n	8004144 <USBD_MSC_DeInit+0x4e>
  {
    /* De-Init the BOT layer */
    MSC_BOT_DeInit(pdev);
 800412a:	6878      	ldr	r0, [r7, #4]
 800412c:	f000 f9d5 	bl	80044da <MSC_BOT_DeInit>

    (void)USBD_free(pdev->pClassData);
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004136:	4618      	mov	r0, r3
 8004138:	f003 fb56 	bl	80077e8 <USBD_static_free>
    pdev->pClassData = NULL;
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	2200      	movs	r2, #0
 8004140:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8004144:	2300      	movs	r3, #0
}
 8004146:	4618      	mov	r0, r3
 8004148:	3708      	adds	r7, #8
 800414a:	46bd      	mov	sp, r7
 800414c:	bd80      	pop	{r7, pc}
	...

08004150 <USBD_MSC_Setup>:
  * @param  pdev: device instance
  * @param  req: USB request
  * @retval status
  */
uint8_t USBD_MSC_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8004150:	b580      	push	{r7, lr}
 8004152:	b086      	sub	sp, #24
 8004154:	af00      	add	r7, sp, #0
 8004156:	6078      	str	r0, [r7, #4]
 8004158:	6039      	str	r1, [r7, #0]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004160:	613b      	str	r3, [r7, #16]
  USBD_StatusTypeDef ret = USBD_OK;
 8004162:	2300      	movs	r3, #0
 8004164:	75fb      	strb	r3, [r7, #23]
  uint16_t status_info = 0U;
 8004166:	2300      	movs	r3, #0
 8004168:	81fb      	strh	r3, [r7, #14]

  if (hmsc == NULL)
 800416a:	693b      	ldr	r3, [r7, #16]
 800416c:	2b00      	cmp	r3, #0
 800416e:	d101      	bne.n	8004174 <USBD_MSC_Setup+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8004170:	2303      	movs	r3, #3
 8004172:	e0db      	b.n	800432c <USBD_MSC_Setup+0x1dc>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004174:	683b      	ldr	r3, [r7, #0]
 8004176:	781b      	ldrb	r3, [r3, #0]
 8004178:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800417c:	2b00      	cmp	r3, #0
 800417e:	d04e      	beq.n	800421e <USBD_MSC_Setup+0xce>
 8004180:	2b20      	cmp	r3, #32
 8004182:	f040 80cb 	bne.w	800431c <USBD_MSC_Setup+0x1cc>
  {
    /* Class request */
    case USB_REQ_TYPE_CLASS:
      switch (req->bRequest)
 8004186:	683b      	ldr	r3, [r7, #0]
 8004188:	785b      	ldrb	r3, [r3, #1]
 800418a:	2bfe      	cmp	r3, #254	; 0xfe
 800418c:	d002      	beq.n	8004194 <USBD_MSC_Setup+0x44>
 800418e:	2bff      	cmp	r3, #255	; 0xff
 8004190:	d025      	beq.n	80041de <USBD_MSC_Setup+0x8e>
 8004192:	e03c      	b.n	800420e <USBD_MSC_Setup+0xbe>
      {
        case BOT_GET_MAX_LUN:
          if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 8004194:	683b      	ldr	r3, [r7, #0]
 8004196:	885b      	ldrh	r3, [r3, #2]
 8004198:	2b00      	cmp	r3, #0
 800419a:	d119      	bne.n	80041d0 <USBD_MSC_Setup+0x80>
 800419c:	683b      	ldr	r3, [r7, #0]
 800419e:	88db      	ldrh	r3, [r3, #6]
 80041a0:	2b01      	cmp	r3, #1
 80041a2:	d115      	bne.n	80041d0 <USBD_MSC_Setup+0x80>
              ((req->bmRequest & 0x80U) == 0x80U))
 80041a4:	683b      	ldr	r3, [r7, #0]
 80041a6:	781b      	ldrb	r3, [r3, #0]
 80041a8:	b25b      	sxtb	r3, r3
          if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	da10      	bge.n	80041d0 <USBD_MSC_Setup+0x80>
          {
            hmsc->max_lun = (uint32_t)((USBD_StorageTypeDef *)pdev->pUserData)->GetMaxLun();
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80041b4:	699b      	ldr	r3, [r3, #24]
 80041b6:	4798      	blx	r3
 80041b8:	4603      	mov	r3, r0
 80041ba:	461a      	mov	r2, r3
 80041bc:	693b      	ldr	r3, [r7, #16]
 80041be:	601a      	str	r2, [r3, #0]
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hmsc->max_lun, 1U);
 80041c0:	693b      	ldr	r3, [r7, #16]
 80041c2:	2201      	movs	r2, #1
 80041c4:	4619      	mov	r1, r3
 80041c6:	6878      	ldr	r0, [r7, #4]
 80041c8:	f002 fe13 	bl	8006df2 <USBD_CtlSendData>
 80041cc:	bf00      	nop
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80041ce:	e025      	b.n	800421c <USBD_MSC_Setup+0xcc>
            USBD_CtlError(pdev, req);
 80041d0:	6839      	ldr	r1, [r7, #0]
 80041d2:	6878      	ldr	r0, [r7, #4]
 80041d4:	f002 fd9c 	bl	8006d10 <USBD_CtlError>
            ret = USBD_FAIL;
 80041d8:	2303      	movs	r3, #3
 80041da:	75fb      	strb	r3, [r7, #23]
          break;
 80041dc:	e01e      	b.n	800421c <USBD_MSC_Setup+0xcc>

        case BOT_RESET :
          if ((req->wValue  == 0U) && (req->wLength == 0U) &&
 80041de:	683b      	ldr	r3, [r7, #0]
 80041e0:	885b      	ldrh	r3, [r3, #2]
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d10c      	bne.n	8004200 <USBD_MSC_Setup+0xb0>
 80041e6:	683b      	ldr	r3, [r7, #0]
 80041e8:	88db      	ldrh	r3, [r3, #6]
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d108      	bne.n	8004200 <USBD_MSC_Setup+0xb0>
              ((req->bmRequest & 0x80U) != 0x80U))
 80041ee:	683b      	ldr	r3, [r7, #0]
 80041f0:	781b      	ldrb	r3, [r3, #0]
 80041f2:	b25b      	sxtb	r3, r3
          if ((req->wValue  == 0U) && (req->wLength == 0U) &&
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	db03      	blt.n	8004200 <USBD_MSC_Setup+0xb0>
          {
            MSC_BOT_Reset(pdev);
 80041f8:	6878      	ldr	r0, [r7, #4]
 80041fa:	f000 f948 	bl	800448e <MSC_BOT_Reset>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80041fe:	e00d      	b.n	800421c <USBD_MSC_Setup+0xcc>
            USBD_CtlError(pdev, req);
 8004200:	6839      	ldr	r1, [r7, #0]
 8004202:	6878      	ldr	r0, [r7, #4]
 8004204:	f002 fd84 	bl	8006d10 <USBD_CtlError>
            ret = USBD_FAIL;
 8004208:	2303      	movs	r3, #3
 800420a:	75fb      	strb	r3, [r7, #23]
          break;
 800420c:	e006      	b.n	800421c <USBD_MSC_Setup+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800420e:	6839      	ldr	r1, [r7, #0]
 8004210:	6878      	ldr	r0, [r7, #4]
 8004212:	f002 fd7d 	bl	8006d10 <USBD_CtlError>
          ret = USBD_FAIL;
 8004216:	2303      	movs	r3, #3
 8004218:	75fb      	strb	r3, [r7, #23]
          break;
 800421a:	bf00      	nop
      }
      break;
 800421c:	e085      	b.n	800432a <USBD_MSC_Setup+0x1da>
    /* Interface & Endpoint request */
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800421e:	683b      	ldr	r3, [r7, #0]
 8004220:	785b      	ldrb	r3, [r3, #1]
 8004222:	2b0b      	cmp	r3, #11
 8004224:	d871      	bhi.n	800430a <USBD_MSC_Setup+0x1ba>
 8004226:	a201      	add	r2, pc, #4	; (adr r2, 800422c <USBD_MSC_Setup+0xdc>)
 8004228:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800422c:	0800425d 	.word	0x0800425d
 8004230:	080042d9 	.word	0x080042d9
 8004234:	0800430b 	.word	0x0800430b
 8004238:	0800430b 	.word	0x0800430b
 800423c:	0800430b 	.word	0x0800430b
 8004240:	0800430b 	.word	0x0800430b
 8004244:	0800430b 	.word	0x0800430b
 8004248:	0800430b 	.word	0x0800430b
 800424c:	0800430b 	.word	0x0800430b
 8004250:	0800430b 	.word	0x0800430b
 8004254:	08004287 	.word	0x08004287
 8004258:	080042b1 	.word	0x080042b1
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004262:	b2db      	uxtb	r3, r3
 8004264:	2b03      	cmp	r3, #3
 8004266:	d107      	bne.n	8004278 <USBD_MSC_Setup+0x128>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8004268:	f107 030e 	add.w	r3, r7, #14
 800426c:	2202      	movs	r2, #2
 800426e:	4619      	mov	r1, r3
 8004270:	6878      	ldr	r0, [r7, #4]
 8004272:	f002 fdbe 	bl	8006df2 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8004276:	e050      	b.n	800431a <USBD_MSC_Setup+0x1ca>
            USBD_CtlError(pdev, req);
 8004278:	6839      	ldr	r1, [r7, #0]
 800427a:	6878      	ldr	r0, [r7, #4]
 800427c:	f002 fd48 	bl	8006d10 <USBD_CtlError>
            ret = USBD_FAIL;
 8004280:	2303      	movs	r3, #3
 8004282:	75fb      	strb	r3, [r7, #23]
          break;
 8004284:	e049      	b.n	800431a <USBD_MSC_Setup+0x1ca>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800428c:	b2db      	uxtb	r3, r3
 800428e:	2b03      	cmp	r3, #3
 8004290:	d107      	bne.n	80042a2 <USBD_MSC_Setup+0x152>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hmsc->interface, 1U);
 8004292:	693b      	ldr	r3, [r7, #16]
 8004294:	3304      	adds	r3, #4
 8004296:	2201      	movs	r2, #1
 8004298:	4619      	mov	r1, r3
 800429a:	6878      	ldr	r0, [r7, #4]
 800429c:	f002 fda9 	bl	8006df2 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80042a0:	e03b      	b.n	800431a <USBD_MSC_Setup+0x1ca>
            USBD_CtlError(pdev, req);
 80042a2:	6839      	ldr	r1, [r7, #0]
 80042a4:	6878      	ldr	r0, [r7, #4]
 80042a6:	f002 fd33 	bl	8006d10 <USBD_CtlError>
            ret = USBD_FAIL;
 80042aa:	2303      	movs	r3, #3
 80042ac:	75fb      	strb	r3, [r7, #23]
          break;
 80042ae:	e034      	b.n	800431a <USBD_MSC_Setup+0x1ca>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80042b6:	b2db      	uxtb	r3, r3
 80042b8:	2b03      	cmp	r3, #3
 80042ba:	d106      	bne.n	80042ca <USBD_MSC_Setup+0x17a>
          {
            hmsc->interface = (uint8_t)(req->wValue);
 80042bc:	683b      	ldr	r3, [r7, #0]
 80042be:	885b      	ldrh	r3, [r3, #2]
 80042c0:	b2db      	uxtb	r3, r3
 80042c2:	461a      	mov	r2, r3
 80042c4:	693b      	ldr	r3, [r7, #16]
 80042c6:	605a      	str	r2, [r3, #4]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80042c8:	e027      	b.n	800431a <USBD_MSC_Setup+0x1ca>
            USBD_CtlError(pdev, req);
 80042ca:	6839      	ldr	r1, [r7, #0]
 80042cc:	6878      	ldr	r0, [r7, #4]
 80042ce:	f002 fd1f 	bl	8006d10 <USBD_CtlError>
            ret = USBD_FAIL;
 80042d2:	2303      	movs	r3, #3
 80042d4:	75fb      	strb	r3, [r7, #23]
          break;
 80042d6:	e020      	b.n	800431a <USBD_MSC_Setup+0x1ca>

        case USB_REQ_CLEAR_FEATURE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80042de:	b2db      	uxtb	r3, r3
 80042e0:	2b03      	cmp	r3, #3
 80042e2:	d119      	bne.n	8004318 <USBD_MSC_Setup+0x1c8>
          {
            if (req->wValue == USB_FEATURE_EP_HALT)
 80042e4:	683b      	ldr	r3, [r7, #0]
 80042e6:	885b      	ldrh	r3, [r3, #2]
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d115      	bne.n	8004318 <USBD_MSC_Setup+0x1c8>
            {
              /* Flush the FIFO */
              (void)USBD_LL_FlushEP(pdev, (uint8_t)req->wIndex);
 80042ec:	683b      	ldr	r3, [r7, #0]
 80042ee:	889b      	ldrh	r3, [r3, #4]
 80042f0:	b2db      	uxtb	r3, r3
 80042f2:	4619      	mov	r1, r3
 80042f4:	6878      	ldr	r0, [r7, #4]
 80042f6:	f003 f96b 	bl	80075d0 <USBD_LL_FlushEP>

              /* Handle BOT error */
              MSC_BOT_CplClrFeature(pdev, (uint8_t)req->wIndex);
 80042fa:	683b      	ldr	r3, [r7, #0]
 80042fc:	889b      	ldrh	r3, [r3, #4]
 80042fe:	b2db      	uxtb	r3, r3
 8004300:	4619      	mov	r1, r3
 8004302:	6878      	ldr	r0, [r7, #4]
 8004304:	f000 fa82 	bl	800480c <MSC_BOT_CplClrFeature>
            }
          }
          break;
 8004308:	e006      	b.n	8004318 <USBD_MSC_Setup+0x1c8>

        default:
          USBD_CtlError(pdev, req);
 800430a:	6839      	ldr	r1, [r7, #0]
 800430c:	6878      	ldr	r0, [r7, #4]
 800430e:	f002 fcff 	bl	8006d10 <USBD_CtlError>
          ret = USBD_FAIL;
 8004312:	2303      	movs	r3, #3
 8004314:	75fb      	strb	r3, [r7, #23]
          break;
 8004316:	e000      	b.n	800431a <USBD_MSC_Setup+0x1ca>
          break;
 8004318:	bf00      	nop
      }
      break;
 800431a:	e006      	b.n	800432a <USBD_MSC_Setup+0x1da>

    default:
      USBD_CtlError(pdev, req);
 800431c:	6839      	ldr	r1, [r7, #0]
 800431e:	6878      	ldr	r0, [r7, #4]
 8004320:	f002 fcf6 	bl	8006d10 <USBD_CtlError>
      ret = USBD_FAIL;
 8004324:	2303      	movs	r3, #3
 8004326:	75fb      	strb	r3, [r7, #23]
      break;
 8004328:	bf00      	nop
  }

  return (uint8_t)ret;
 800432a:	7dfb      	ldrb	r3, [r7, #23]
}
 800432c:	4618      	mov	r0, r3
 800432e:	3718      	adds	r7, #24
 8004330:	46bd      	mov	sp, r7
 8004332:	bd80      	pop	{r7, pc}

08004334 <USBD_MSC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
uint8_t USBD_MSC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8004334:	b580      	push	{r7, lr}
 8004336:	b082      	sub	sp, #8
 8004338:	af00      	add	r7, sp, #0
 800433a:	6078      	str	r0, [r7, #4]
 800433c:	460b      	mov	r3, r1
 800433e:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataIn(pdev, epnum);
 8004340:	78fb      	ldrb	r3, [r7, #3]
 8004342:	4619      	mov	r1, r3
 8004344:	6878      	ldr	r0, [r7, #4]
 8004346:	f000 f8dc 	bl	8004502 <MSC_BOT_DataIn>

  return (uint8_t)USBD_OK;
 800434a:	2300      	movs	r3, #0
}
 800434c:	4618      	mov	r0, r3
 800434e:	3708      	adds	r7, #8
 8004350:	46bd      	mov	sp, r7
 8004352:	bd80      	pop	{r7, pc}

08004354 <USBD_MSC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
uint8_t USBD_MSC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8004354:	b580      	push	{r7, lr}
 8004356:	b082      	sub	sp, #8
 8004358:	af00      	add	r7, sp, #0
 800435a:	6078      	str	r0, [r7, #4]
 800435c:	460b      	mov	r3, r1
 800435e:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataOut(pdev, epnum);
 8004360:	78fb      	ldrb	r3, [r7, #3]
 8004362:	4619      	mov	r1, r3
 8004364:	6878      	ldr	r0, [r7, #4]
 8004366:	f000 f902 	bl	800456e <MSC_BOT_DataOut>

  return (uint8_t)USBD_OK;
 800436a:	2300      	movs	r3, #0
}
 800436c:	4618      	mov	r0, r3
 800436e:	3708      	adds	r7, #8
 8004370:	46bd      	mov	sp, r7
 8004372:	bd80      	pop	{r7, pc}

08004374 <USBD_MSC_GetHSCfgDesc>:
  *         return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetHSCfgDesc(uint16_t *length)
{
 8004374:	b480      	push	{r7}
 8004376:	b083      	sub	sp, #12
 8004378:	af00      	add	r7, sp, #0
 800437a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_CfgHSDesc);
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	2220      	movs	r2, #32
 8004380:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_CfgHSDesc;
 8004382:	4b03      	ldr	r3, [pc, #12]	; (8004390 <USBD_MSC_GetHSCfgDesc+0x1c>)
}
 8004384:	4618      	mov	r0, r3
 8004386:	370c      	adds	r7, #12
 8004388:	46bd      	mov	sp, r7
 800438a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800438e:	4770      	bx	lr
 8004390:	20000044 	.word	0x20000044

08004394 <USBD_MSC_GetFSCfgDesc>:
  *         return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetFSCfgDesc(uint16_t *length)
{
 8004394:	b480      	push	{r7}
 8004396:	b083      	sub	sp, #12
 8004398:	af00      	add	r7, sp, #0
 800439a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_CfgFSDesc);
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	2220      	movs	r2, #32
 80043a0:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_CfgFSDesc;
 80043a2:	4b03      	ldr	r3, [pc, #12]	; (80043b0 <USBD_MSC_GetFSCfgDesc+0x1c>)
}
 80043a4:	4618      	mov	r0, r3
 80043a6:	370c      	adds	r7, #12
 80043a8:	46bd      	mov	sp, r7
 80043aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ae:	4770      	bx	lr
 80043b0:	20000064 	.word	0x20000064

080043b4 <USBD_MSC_GetOtherSpeedCfgDesc>:
  *         return other speed configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80043b4:	b480      	push	{r7}
 80043b6:	b083      	sub	sp, #12
 80043b8:	af00      	add	r7, sp, #0
 80043ba:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_OtherSpeedCfgDesc);
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	2220      	movs	r2, #32
 80043c0:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_OtherSpeedCfgDesc;
 80043c2:	4b03      	ldr	r3, [pc, #12]	; (80043d0 <USBD_MSC_GetOtherSpeedCfgDesc+0x1c>)
}
 80043c4:	4618      	mov	r0, r3
 80043c6:	370c      	adds	r7, #12
 80043c8:	46bd      	mov	sp, r7
 80043ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ce:	4770      	bx	lr
 80043d0:	20000084 	.word	0x20000084

080043d4 <USBD_MSC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80043d4:	b480      	push	{r7}
 80043d6:	b083      	sub	sp, #12
 80043d8:	af00      	add	r7, sp, #0
 80043da:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_DeviceQualifierDesc);
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	220a      	movs	r2, #10
 80043e0:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_DeviceQualifierDesc;
 80043e2:	4b03      	ldr	r3, [pc, #12]	; (80043f0 <USBD_MSC_GetDeviceQualifierDescriptor+0x1c>)
}
 80043e4:	4618      	mov	r0, r3
 80043e6:	370c      	adds	r7, #12
 80043e8:	46bd      	mov	sp, r7
 80043ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ee:	4770      	bx	lr
 80043f0:	200000a4 	.word	0x200000a4

080043f4 <USBD_MSC_RegisterStorage>:
  * @brief  USBD_MSC_RegisterStorage
  * @param  fops: storage callback
  * @retval status
  */
uint8_t USBD_MSC_RegisterStorage(USBD_HandleTypeDef *pdev, USBD_StorageTypeDef *fops)
{
 80043f4:	b480      	push	{r7}
 80043f6:	b083      	sub	sp, #12
 80043f8:	af00      	add	r7, sp, #0
 80043fa:	6078      	str	r0, [r7, #4]
 80043fc:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80043fe:	683b      	ldr	r3, [r7, #0]
 8004400:	2b00      	cmp	r3, #0
 8004402:	d101      	bne.n	8004408 <USBD_MSC_RegisterStorage+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8004404:	2303      	movs	r3, #3
 8004406:	e004      	b.n	8004412 <USBD_MSC_RegisterStorage+0x1e>
  }

  pdev->pUserData = fops;
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	683a      	ldr	r2, [r7, #0]
 800440c:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8004410:	2300      	movs	r3, #0
}
 8004412:	4618      	mov	r0, r3
 8004414:	370c      	adds	r7, #12
 8004416:	46bd      	mov	sp, r7
 8004418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800441c:	4770      	bx	lr

0800441e <MSC_BOT_Init>:
  *         Initialize the BOT Process
  * @param  pdev: device instance
  * @retval None
  */
void MSC_BOT_Init(USBD_HandleTypeDef *pdev)
{
 800441e:	b580      	push	{r7, lr}
 8004420:	b084      	sub	sp, #16
 8004422:	af00      	add	r7, sp, #0
 8004424:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800442c:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	2b00      	cmp	r3, #0
 8004432:	d028      	beq.n	8004486 <MSC_BOT_Init+0x68>
  {
    return;
  }

  hmsc->bot_state = USBD_BOT_IDLE;
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	2200      	movs	r2, #0
 8004438:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_NORMAL;
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	2200      	movs	r2, #0
 800443e:	725a      	strb	r2, [r3, #9]

  hmsc->scsi_sense_tail = 0U;
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	2200      	movs	r2, #0
 8004444:	f883 2261 	strb.w	r2, [r3, #609]	; 0x261
  hmsc->scsi_sense_head = 0U;
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	2200      	movs	r2, #0
 800444c:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260
  hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	2200      	movs	r2, #0
 8004454:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262

  ((USBD_StorageTypeDef *)pdev->pUserData)->Init(0U);
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	2000      	movs	r0, #0
 8004462:	4798      	blx	r3

  (void)USBD_LL_FlushEP(pdev, MSC_EPOUT_ADDR);
 8004464:	2101      	movs	r1, #1
 8004466:	6878      	ldr	r0, [r7, #4]
 8004468:	f003 f8b2 	bl	80075d0 <USBD_LL_FlushEP>
  (void)USBD_LL_FlushEP(pdev, MSC_EPIN_ADDR);
 800446c:	2181      	movs	r1, #129	; 0x81
 800446e:	6878      	ldr	r0, [r7, #4]
 8004470:	f003 f8ae 	bl	80075d0 <USBD_LL_FlushEP>

  /* Prepare EP to Receive First BOT Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, (uint8_t *)&hmsc->cbw,
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	f503 7204 	add.w	r2, r3, #528	; 0x210
 800447a:	231f      	movs	r3, #31
 800447c:	2101      	movs	r1, #1
 800447e:	6878      	ldr	r0, [r7, #4]
 8004480:	f003 f96f 	bl	8007762 <USBD_LL_PrepareReceive>
 8004484:	e000      	b.n	8004488 <MSC_BOT_Init+0x6a>
    return;
 8004486:	bf00      	nop
                               USBD_BOT_CBW_LENGTH);
}
 8004488:	3710      	adds	r7, #16
 800448a:	46bd      	mov	sp, r7
 800448c:	bd80      	pop	{r7, pc}

0800448e <MSC_BOT_Reset>:
  *         Reset the BOT Machine
  * @param  pdev: device instance
  * @retval  None
  */
void MSC_BOT_Reset(USBD_HandleTypeDef *pdev)
{
 800448e:	b580      	push	{r7, lr}
 8004490:	b084      	sub	sp, #16
 8004492:	af00      	add	r7, sp, #0
 8004494:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800449c:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d016      	beq.n	80044d2 <MSC_BOT_Reset+0x44>
  {
    return;
  }

  hmsc->bot_state  = USBD_BOT_IDLE;
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	2200      	movs	r2, #0
 80044a8:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_RECOVERY;
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	2201      	movs	r2, #1
 80044ae:	725a      	strb	r2, [r3, #9]

  (void)USBD_LL_ClearStallEP(pdev, MSC_EPIN_ADDR);
 80044b0:	2181      	movs	r1, #129	; 0x81
 80044b2:	6878      	ldr	r0, [r7, #4]
 80044b4:	f003 f8ca 	bl	800764c <USBD_LL_ClearStallEP>
  (void)USBD_LL_ClearStallEP(pdev, MSC_EPOUT_ADDR);
 80044b8:	2101      	movs	r1, #1
 80044ba:	6878      	ldr	r0, [r7, #4]
 80044bc:	f003 f8c6 	bl	800764c <USBD_LL_ClearStallEP>

  /* Prepare EP to Receive First BOT Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, (uint8_t *)&hmsc->cbw,
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	f503 7204 	add.w	r2, r3, #528	; 0x210
 80044c6:	231f      	movs	r3, #31
 80044c8:	2101      	movs	r1, #1
 80044ca:	6878      	ldr	r0, [r7, #4]
 80044cc:	f003 f949 	bl	8007762 <USBD_LL_PrepareReceive>
 80044d0:	e000      	b.n	80044d4 <MSC_BOT_Reset+0x46>
    return;
 80044d2:	bf00      	nop
                               USBD_BOT_CBW_LENGTH);
}
 80044d4:	3710      	adds	r7, #16
 80044d6:	46bd      	mov	sp, r7
 80044d8:	bd80      	pop	{r7, pc}

080044da <MSC_BOT_DeInit>:
  *         DeInitialize the BOT Machine
  * @param  pdev: device instance
  * @retval None
  */
void MSC_BOT_DeInit(USBD_HandleTypeDef  *pdev)
{
 80044da:	b480      	push	{r7}
 80044dc:	b085      	sub	sp, #20
 80044de:	af00      	add	r7, sp, #0
 80044e0:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80044e8:	60fb      	str	r3, [r7, #12]

  if (hmsc != NULL)
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d002      	beq.n	80044f6 <MSC_BOT_DeInit+0x1c>
  {
    hmsc->bot_state = USBD_BOT_IDLE;
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	2200      	movs	r2, #0
 80044f4:	721a      	strb	r2, [r3, #8]
  }
}
 80044f6:	bf00      	nop
 80044f8:	3714      	adds	r7, #20
 80044fa:	46bd      	mov	sp, r7
 80044fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004500:	4770      	bx	lr

08004502 <MSC_BOT_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval None
  */
void MSC_BOT_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8004502:	b580      	push	{r7, lr}
 8004504:	b084      	sub	sp, #16
 8004506:	af00      	add	r7, sp, #0
 8004508:	6078      	str	r0, [r7, #4]
 800450a:	460b      	mov	r3, r1
 800450c:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004514:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	2b00      	cmp	r3, #0
 800451a:	d020      	beq.n	800455e <MSC_BOT_DataIn+0x5c>
  {
    return;
  }

  switch (hmsc->bot_state)
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	7a1b      	ldrb	r3, [r3, #8]
 8004520:	2b02      	cmp	r3, #2
 8004522:	d005      	beq.n	8004530 <MSC_BOT_DataIn+0x2e>
 8004524:	2b02      	cmp	r3, #2
 8004526:	db1c      	blt.n	8004562 <MSC_BOT_DataIn+0x60>
 8004528:	3b03      	subs	r3, #3
 800452a:	2b01      	cmp	r3, #1
 800452c:	d819      	bhi.n	8004562 <MSC_BOT_DataIn+0x60>
 800452e:	e011      	b.n	8004554 <MSC_BOT_DataIn+0x52>
  {
    case USBD_BOT_DATA_IN:
      if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	f203 231f 	addw	r3, r3, #543	; 0x21f
 800453c:	461a      	mov	r2, r3
 800453e:	6878      	ldr	r0, [r7, #4]
 8004540:	f000 f992 	bl	8004868 <SCSI_ProcessCmd>
 8004544:	4603      	mov	r3, r0
 8004546:	2b00      	cmp	r3, #0
 8004548:	da0d      	bge.n	8004566 <MSC_BOT_DataIn+0x64>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 800454a:	2101      	movs	r1, #1
 800454c:	6878      	ldr	r0, [r7, #4]
 800454e:	f000 f8fb 	bl	8004748 <MSC_BOT_SendCSW>
      }
      break;
 8004552:	e008      	b.n	8004566 <MSC_BOT_DataIn+0x64>

    case USBD_BOT_SEND_DATA:
    case USBD_BOT_LAST_DATA_IN:
      MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 8004554:	2100      	movs	r1, #0
 8004556:	6878      	ldr	r0, [r7, #4]
 8004558:	f000 f8f6 	bl	8004748 <MSC_BOT_SendCSW>
      break;
 800455c:	e004      	b.n	8004568 <MSC_BOT_DataIn+0x66>
    return;
 800455e:	bf00      	nop
 8004560:	e002      	b.n	8004568 <MSC_BOT_DataIn+0x66>

    default:
      break;
 8004562:	bf00      	nop
 8004564:	e000      	b.n	8004568 <MSC_BOT_DataIn+0x66>
      break;
 8004566:	bf00      	nop
  }
}
 8004568:	3710      	adds	r7, #16
 800456a:	46bd      	mov	sp, r7
 800456c:	bd80      	pop	{r7, pc}

0800456e <MSC_BOT_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval None
  */
void MSC_BOT_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800456e:	b580      	push	{r7, lr}
 8004570:	b084      	sub	sp, #16
 8004572:	af00      	add	r7, sp, #0
 8004574:	6078      	str	r0, [r7, #4]
 8004576:	460b      	mov	r3, r1
 8004578:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004580:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	2b00      	cmp	r3, #0
 8004586:	d01c      	beq.n	80045c2 <MSC_BOT_DataOut+0x54>
  {
    return;
  }

  switch (hmsc->bot_state)
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	7a1b      	ldrb	r3, [r3, #8]
 800458c:	2b00      	cmp	r3, #0
 800458e:	d002      	beq.n	8004596 <MSC_BOT_DataOut+0x28>
 8004590:	2b01      	cmp	r3, #1
 8004592:	d004      	beq.n	800459e <MSC_BOT_DataOut+0x30>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
      }
      break;

    default:
      break;
 8004594:	e018      	b.n	80045c8 <MSC_BOT_DataOut+0x5a>
      MSC_BOT_CBW_Decode(pdev);
 8004596:	6878      	ldr	r0, [r7, #4]
 8004598:	f000 f81a 	bl	80045d0 <MSC_BOT_CBW_Decode>
      break;
 800459c:	e014      	b.n	80045c8 <MSC_BOT_DataOut+0x5a>
      if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	f203 231f 	addw	r3, r3, #543	; 0x21f
 80045aa:	461a      	mov	r2, r3
 80045ac:	6878      	ldr	r0, [r7, #4]
 80045ae:	f000 f95b 	bl	8004868 <SCSI_ProcessCmd>
 80045b2:	4603      	mov	r3, r0
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	da06      	bge.n	80045c6 <MSC_BOT_DataOut+0x58>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 80045b8:	2101      	movs	r1, #1
 80045ba:	6878      	ldr	r0, [r7, #4]
 80045bc:	f000 f8c4 	bl	8004748 <MSC_BOT_SendCSW>
      break;
 80045c0:	e001      	b.n	80045c6 <MSC_BOT_DataOut+0x58>
    return;
 80045c2:	bf00      	nop
 80045c4:	e000      	b.n	80045c8 <MSC_BOT_DataOut+0x5a>
      break;
 80045c6:	bf00      	nop
  }
}
 80045c8:	3710      	adds	r7, #16
 80045ca:	46bd      	mov	sp, r7
 80045cc:	bd80      	pop	{r7, pc}
	...

080045d0 <MSC_BOT_CBW_Decode>:
  *         Decode the CBW command and set the BOT state machine accordingly
  * @param  pdev: device instance
  * @retval None
  */
static void  MSC_BOT_CBW_Decode(USBD_HandleTypeDef *pdev)
{
 80045d0:	b580      	push	{r7, lr}
 80045d2:	b084      	sub	sp, #16
 80045d4:	af00      	add	r7, sp, #0
 80045d6:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80045de:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d077      	beq.n	80046d6 <MSC_BOT_CBW_Decode+0x106>
  {
    return;
  }

  hmsc->csw.dTag = hmsc->cbw.dTag;
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234
  hmsc->csw.dDataResidue = hmsc->cbw.dDataLength;
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	f8c3 2238 	str.w	r2, [r3, #568]	; 0x238

  if ((USBD_LL_GetRxDataSize(pdev, MSC_EPOUT_ADDR) != USBD_BOT_CBW_LENGTH) ||
 80045fe:	2101      	movs	r1, #1
 8004600:	6878      	ldr	r0, [r7, #4]
 8004602:	f003 f8cf 	bl	80077a4 <USBD_LL_GetRxDataSize>
 8004606:	4603      	mov	r3, r0
 8004608:	2b1f      	cmp	r3, #31
 800460a:	d114      	bne.n	8004636 <MSC_BOT_CBW_Decode+0x66>
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
  if ((USBD_LL_GetRxDataSize(pdev, MSC_EPOUT_ADDR) != USBD_BOT_CBW_LENGTH) ||
 8004612:	4a34      	ldr	r2, [pc, #208]	; (80046e4 <MSC_BOT_CBW_Decode+0x114>)
 8004614:	4293      	cmp	r3, r2
 8004616:	d10e      	bne.n	8004636 <MSC_BOT_CBW_Decode+0x66>
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 800461e:	2b01      	cmp	r3, #1
 8004620:	d809      	bhi.n	8004636 <MSC_BOT_CBW_Decode+0x66>
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	f893 321e 	ldrb.w	r3, [r3, #542]	; 0x21e
 8004628:	2b00      	cmp	r3, #0
 800462a:	d004      	beq.n	8004636 <MSC_BOT_CBW_Decode+0x66>
      (hmsc->cbw.bCBLength > 16U))
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	f893 321e 	ldrb.w	r3, [r3, #542]	; 0x21e
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 8004632:	2b10      	cmp	r3, #16
 8004634:	d90e      	bls.n	8004654 <MSC_BOT_CBW_Decode+0x84>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800463c:	2320      	movs	r3, #32
 800463e:	2205      	movs	r2, #5
 8004640:	6878      	ldr	r0, [r7, #4]
 8004642:	f000 fdbc 	bl	80051be <SCSI_SenseCode>

    hmsc->bot_status = USBD_BOT_STATUS_ERROR;
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	2202      	movs	r2, #2
 800464a:	725a      	strb	r2, [r3, #9]
    MSC_BOT_Abort(pdev);
 800464c:	6878      	ldr	r0, [r7, #4]
 800464e:	f000 f8ab 	bl	80047a8 <MSC_BOT_Abort>
 8004652:	e043      	b.n	80046dc <MSC_BOT_CBW_Decode+0x10c>
  }
  else
  {
    if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	f203 231f 	addw	r3, r3, #543	; 0x21f
 8004660:	461a      	mov	r2, r3
 8004662:	6878      	ldr	r0, [r7, #4]
 8004664:	f000 f900 	bl	8004868 <SCSI_ProcessCmd>
 8004668:	4603      	mov	r3, r0
 800466a:	2b00      	cmp	r3, #0
 800466c:	da0c      	bge.n	8004688 <MSC_BOT_CBW_Decode+0xb8>
    {
      if (hmsc->bot_state == USBD_BOT_NO_DATA)
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	7a1b      	ldrb	r3, [r3, #8]
 8004672:	2b05      	cmp	r3, #5
 8004674:	d104      	bne.n	8004680 <MSC_BOT_CBW_Decode+0xb0>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 8004676:	2101      	movs	r1, #1
 8004678:	6878      	ldr	r0, [r7, #4]
 800467a:	f000 f865 	bl	8004748 <MSC_BOT_SendCSW>
 800467e:	e02d      	b.n	80046dc <MSC_BOT_CBW_Decode+0x10c>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 8004680:	6878      	ldr	r0, [r7, #4]
 8004682:	f000 f891 	bl	80047a8 <MSC_BOT_Abort>
 8004686:	e029      	b.n	80046dc <MSC_BOT_CBW_Decode+0x10c>
      }
    }
    /* Burst xfer handled internally */
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	7a1b      	ldrb	r3, [r3, #8]
 800468c:	2b02      	cmp	r3, #2
 800468e:	d024      	beq.n	80046da <MSC_BOT_CBW_Decode+0x10a>
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	7a1b      	ldrb	r3, [r3, #8]
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 8004694:	2b01      	cmp	r3, #1
 8004696:	d020      	beq.n	80046da <MSC_BOT_CBW_Decode+0x10a>
             (hmsc->bot_state != USBD_BOT_LAST_DATA_IN))
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	7a1b      	ldrb	r3, [r3, #8]
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 800469c:	2b03      	cmp	r3, #3
 800469e:	d01c      	beq.n	80046da <MSC_BOT_CBW_Decode+0x10a>
    {
      if (hmsc->bot_data_length > 0U)
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	68db      	ldr	r3, [r3, #12]
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d009      	beq.n	80046bc <MSC_BOT_CBW_Decode+0xec>
      {
        MSC_BOT_SendData(pdev, hmsc->bot_data, hmsc->bot_data_length);
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	f103 0110 	add.w	r1, r3, #16
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	68db      	ldr	r3, [r3, #12]
 80046b2:	461a      	mov	r2, r3
 80046b4:	6878      	ldr	r0, [r7, #4]
 80046b6:	f000 f817 	bl	80046e8 <MSC_BOT_SendData>
      if (hmsc->bot_data_length > 0U)
 80046ba:	e00f      	b.n	80046dc <MSC_BOT_CBW_Decode+0x10c>
      }
      else if (hmsc->bot_data_length == 0U)
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	68db      	ldr	r3, [r3, #12]
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d104      	bne.n	80046ce <MSC_BOT_CBW_Decode+0xfe>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 80046c4:	2100      	movs	r1, #0
 80046c6:	6878      	ldr	r0, [r7, #4]
 80046c8:	f000 f83e 	bl	8004748 <MSC_BOT_SendCSW>
      if (hmsc->bot_data_length > 0U)
 80046cc:	e006      	b.n	80046dc <MSC_BOT_CBW_Decode+0x10c>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 80046ce:	6878      	ldr	r0, [r7, #4]
 80046d0:	f000 f86a 	bl	80047a8 <MSC_BOT_Abort>
      if (hmsc->bot_data_length > 0U)
 80046d4:	e002      	b.n	80046dc <MSC_BOT_CBW_Decode+0x10c>
    return;
 80046d6:	bf00      	nop
 80046d8:	e000      	b.n	80046dc <MSC_BOT_CBW_Decode+0x10c>
      }
    }
    else
    {
      return;
 80046da:	bf00      	nop
    }
  }
}
 80046dc:	3710      	adds	r7, #16
 80046de:	46bd      	mov	sp, r7
 80046e0:	bd80      	pop	{r7, pc}
 80046e2:	bf00      	nop
 80046e4:	43425355 	.word	0x43425355

080046e8 <MSC_BOT_SendData>:
  * @param  buf: pointer to data buffer
  * @param  len: Data Length
  * @retval None
  */
static void  MSC_BOT_SendData(USBD_HandleTypeDef *pdev, uint8_t *pbuf, uint32_t len)
{
 80046e8:	b580      	push	{r7, lr}
 80046ea:	b086      	sub	sp, #24
 80046ec:	af00      	add	r7, sp, #0
 80046ee:	60f8      	str	r0, [r7, #12]
 80046f0:	60b9      	str	r1, [r7, #8]
 80046f2:	607a      	str	r2, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80046fa:	617b      	str	r3, [r7, #20]

  uint32_t length = MIN(hmsc->cbw.dDataLength, len);
 80046fc:	697b      	ldr	r3, [r7, #20]
 80046fe:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8004702:	687a      	ldr	r2, [r7, #4]
 8004704:	4293      	cmp	r3, r2
 8004706:	bf28      	it	cs
 8004708:	4613      	movcs	r3, r2
 800470a:	613b      	str	r3, [r7, #16]

  if (hmsc == NULL)
 800470c:	697b      	ldr	r3, [r7, #20]
 800470e:	2b00      	cmp	r3, #0
 8004710:	d015      	beq.n	800473e <MSC_BOT_SendData+0x56>
  {
    return;
  }

  hmsc->csw.dDataResidue -= len;
 8004712:	697b      	ldr	r3, [r7, #20]
 8004714:	f8d3 2238 	ldr.w	r2, [r3, #568]	; 0x238
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	1ad2      	subs	r2, r2, r3
 800471c:	697b      	ldr	r3, [r7, #20]
 800471e:	f8c3 2238 	str.w	r2, [r3, #568]	; 0x238
  hmsc->csw.bStatus = USBD_CSW_CMD_PASSED;
 8004722:	697b      	ldr	r3, [r7, #20]
 8004724:	2200      	movs	r2, #0
 8004726:	f883 223c 	strb.w	r2, [r3, #572]	; 0x23c
  hmsc->bot_state = USBD_BOT_SEND_DATA;
 800472a:	697b      	ldr	r3, [r7, #20]
 800472c:	2204      	movs	r2, #4
 800472e:	721a      	strb	r2, [r3, #8]

  (void)USBD_LL_Transmit(pdev, MSC_EPIN_ADDR, pbuf, length);
 8004730:	693b      	ldr	r3, [r7, #16]
 8004732:	68ba      	ldr	r2, [r7, #8]
 8004734:	2181      	movs	r1, #129	; 0x81
 8004736:	68f8      	ldr	r0, [r7, #12]
 8004738:	f002 fff2 	bl	8007720 <USBD_LL_Transmit>
 800473c:	e000      	b.n	8004740 <MSC_BOT_SendData+0x58>
    return;
 800473e:	bf00      	nop
}
 8004740:	3718      	adds	r7, #24
 8004742:	46bd      	mov	sp, r7
 8004744:	bd80      	pop	{r7, pc}
	...

08004748 <MSC_BOT_SendCSW>:
  * @param  pdev: device instance
  * @param  status : CSW status
  * @retval None
  */
void  MSC_BOT_SendCSW(USBD_HandleTypeDef *pdev, uint8_t CSW_Status)
{
 8004748:	b580      	push	{r7, lr}
 800474a:	b084      	sub	sp, #16
 800474c:	af00      	add	r7, sp, #0
 800474e:	6078      	str	r0, [r7, #4]
 8004750:	460b      	mov	r3, r1
 8004752:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800475a:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	2b00      	cmp	r3, #0
 8004760:	d01b      	beq.n	800479a <MSC_BOT_SendCSW+0x52>
  {
    return;
  }

  hmsc->csw.dSignature = USBD_BOT_CSW_SIGNATURE;
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	4a0f      	ldr	r2, [pc, #60]	; (80047a4 <MSC_BOT_SendCSW+0x5c>)
 8004766:	f8c3 2230 	str.w	r2, [r3, #560]	; 0x230
  hmsc->csw.bStatus = CSW_Status;
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	78fa      	ldrb	r2, [r7, #3]
 800476e:	f883 223c 	strb.w	r2, [r3, #572]	; 0x23c
  hmsc->bot_state = USBD_BOT_IDLE;
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	2200      	movs	r2, #0
 8004776:	721a      	strb	r2, [r3, #8]

  (void)USBD_LL_Transmit(pdev, MSC_EPIN_ADDR, (uint8_t *)&hmsc->csw,
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	f503 720c 	add.w	r2, r3, #560	; 0x230
 800477e:	230d      	movs	r3, #13
 8004780:	2181      	movs	r1, #129	; 0x81
 8004782:	6878      	ldr	r0, [r7, #4]
 8004784:	f002 ffcc 	bl	8007720 <USBD_LL_Transmit>
                         USBD_BOT_CSW_LENGTH);

  /* Prepare EP to Receive next Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, (uint8_t *)&hmsc->cbw,
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	f503 7204 	add.w	r2, r3, #528	; 0x210
 800478e:	231f      	movs	r3, #31
 8004790:	2101      	movs	r1, #1
 8004792:	6878      	ldr	r0, [r7, #4]
 8004794:	f002 ffe5 	bl	8007762 <USBD_LL_PrepareReceive>
 8004798:	e000      	b.n	800479c <MSC_BOT_SendCSW+0x54>
    return;
 800479a:	bf00      	nop
                               USBD_BOT_CBW_LENGTH);
}
 800479c:	3710      	adds	r7, #16
 800479e:	46bd      	mov	sp, r7
 80047a0:	bd80      	pop	{r7, pc}
 80047a2:	bf00      	nop
 80047a4:	53425355 	.word	0x53425355

080047a8 <MSC_BOT_Abort>:
  * @param  pdev: device instance
  * @retval status
  */

static void  MSC_BOT_Abort(USBD_HandleTypeDef *pdev)
{
 80047a8:	b580      	push	{r7, lr}
 80047aa:	b084      	sub	sp, #16
 80047ac:	af00      	add	r7, sp, #0
 80047ae:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80047b6:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d022      	beq.n	8004804 <MSC_BOT_Abort+0x5c>
  {
    return;
  }

  if ((hmsc->cbw.bmFlags == 0U) &&
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d10c      	bne.n	80047e2 <MSC_BOT_Abort+0x3a>
      (hmsc->cbw.dDataLength != 0U) &&
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
  if ((hmsc->cbw.bmFlags == 0U) &&
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d007      	beq.n	80047e2 <MSC_BOT_Abort+0x3a>
      (hmsc->bot_status == USBD_BOT_STATUS_NORMAL))
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	7a5b      	ldrb	r3, [r3, #9]
      (hmsc->cbw.dDataLength != 0U) &&
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d103      	bne.n	80047e2 <MSC_BOT_Abort+0x3a>
  {
    (void)USBD_LL_StallEP(pdev, MSC_EPOUT_ADDR);
 80047da:	2101      	movs	r1, #1
 80047dc:	6878      	ldr	r0, [r7, #4]
 80047de:	f002 ff16 	bl	800760e <USBD_LL_StallEP>
  }

  (void)USBD_LL_StallEP(pdev, MSC_EPIN_ADDR);
 80047e2:	2181      	movs	r1, #129	; 0x81
 80047e4:	6878      	ldr	r0, [r7, #4]
 80047e6:	f002 ff12 	bl	800760e <USBD_LL_StallEP>

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR)
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	7a5b      	ldrb	r3, [r3, #9]
 80047ee:	2b02      	cmp	r3, #2
 80047f0:	d109      	bne.n	8004806 <MSC_BOT_Abort+0x5e>
  {
    (void)USBD_LL_StallEP(pdev, MSC_EPIN_ADDR);
 80047f2:	2181      	movs	r1, #129	; 0x81
 80047f4:	6878      	ldr	r0, [r7, #4]
 80047f6:	f002 ff0a 	bl	800760e <USBD_LL_StallEP>
    (void)USBD_LL_StallEP(pdev, MSC_EPOUT_ADDR);
 80047fa:	2101      	movs	r1, #1
 80047fc:	6878      	ldr	r0, [r7, #4]
 80047fe:	f002 ff06 	bl	800760e <USBD_LL_StallEP>
 8004802:	e000      	b.n	8004806 <MSC_BOT_Abort+0x5e>
    return;
 8004804:	bf00      	nop
  }
}
 8004806:	3710      	adds	r7, #16
 8004808:	46bd      	mov	sp, r7
 800480a:	bd80      	pop	{r7, pc}

0800480c <MSC_BOT_CplClrFeature>:
  * @param  epnum: endpoint index
  * @retval None
  */

void  MSC_BOT_CplClrFeature(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800480c:	b580      	push	{r7, lr}
 800480e:	b084      	sub	sp, #16
 8004810:	af00      	add	r7, sp, #0
 8004812:	6078      	str	r0, [r7, #4]
 8004814:	460b      	mov	r3, r1
 8004816:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800481e:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	2b00      	cmp	r3, #0
 8004824:	d019      	beq.n	800485a <MSC_BOT_CplClrFeature+0x4e>
  {
    return;
  }

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR) /* Bad CBW Signature */
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	7a5b      	ldrb	r3, [r3, #9]
 800482a:	2b02      	cmp	r3, #2
 800482c:	d108      	bne.n	8004840 <MSC_BOT_CplClrFeature+0x34>
  {
    (void)USBD_LL_StallEP(pdev, MSC_EPIN_ADDR);
 800482e:	2181      	movs	r1, #129	; 0x81
 8004830:	6878      	ldr	r0, [r7, #4]
 8004832:	f002 feec 	bl	800760e <USBD_LL_StallEP>
    (void)USBD_LL_StallEP(pdev, MSC_EPOUT_ADDR);
 8004836:	2101      	movs	r1, #1
 8004838:	6878      	ldr	r0, [r7, #4]
 800483a:	f002 fee8 	bl	800760e <USBD_LL_StallEP>
 800483e:	e00f      	b.n	8004860 <MSC_BOT_CplClrFeature+0x54>
  }
  else if (((epnum & 0x80U) == 0x80U) && (hmsc->bot_status != USBD_BOT_STATUS_RECOVERY))
 8004840:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004844:	2b00      	cmp	r3, #0
 8004846:	da0a      	bge.n	800485e <MSC_BOT_CplClrFeature+0x52>
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	7a5b      	ldrb	r3, [r3, #9]
 800484c:	2b01      	cmp	r3, #1
 800484e:	d006      	beq.n	800485e <MSC_BOT_CplClrFeature+0x52>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 8004850:	2101      	movs	r1, #1
 8004852:	6878      	ldr	r0, [r7, #4]
 8004854:	f7ff ff78 	bl	8004748 <MSC_BOT_SendCSW>
 8004858:	e002      	b.n	8004860 <MSC_BOT_CplClrFeature+0x54>
    return;
 800485a:	bf00      	nop
 800485c:	e000      	b.n	8004860 <MSC_BOT_CplClrFeature+0x54>
  }
  else
  {
    return;
 800485e:	bf00      	nop
  }
}
 8004860:	3710      	adds	r7, #16
 8004862:	46bd      	mov	sp, r7
 8004864:	bd80      	pop	{r7, pc}
	...

08004868 <SCSI_ProcessCmd>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
int8_t SCSI_ProcessCmd(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *cmd)
{
 8004868:	b580      	push	{r7, lr}
 800486a:	b086      	sub	sp, #24
 800486c:	af00      	add	r7, sp, #0
 800486e:	60f8      	str	r0, [r7, #12]
 8004870:	460b      	mov	r3, r1
 8004872:	607a      	str	r2, [r7, #4]
 8004874:	72fb      	strb	r3, [r7, #11]
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800487c:	613b      	str	r3, [r7, #16]

  if (hmsc == NULL)
 800487e:	693b      	ldr	r3, [r7, #16]
 8004880:	2b00      	cmp	r3, #0
 8004882:	d102      	bne.n	800488a <SCSI_ProcessCmd+0x22>
  {
    return -1;
 8004884:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004888:	e168      	b.n	8004b5c <SCSI_ProcessCmd+0x2f4>
  }

  switch (cmd[0])
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	781b      	ldrb	r3, [r3, #0]
 800488e:	2baa      	cmp	r3, #170	; 0xaa
 8004890:	f000 8144 	beq.w	8004b1c <SCSI_ProcessCmd+0x2b4>
 8004894:	2baa      	cmp	r3, #170	; 0xaa
 8004896:	f300 8153 	bgt.w	8004b40 <SCSI_ProcessCmd+0x2d8>
 800489a:	2ba8      	cmp	r3, #168	; 0xa8
 800489c:	f000 812c 	beq.w	8004af8 <SCSI_ProcessCmd+0x290>
 80048a0:	2ba8      	cmp	r3, #168	; 0xa8
 80048a2:	f300 814d 	bgt.w	8004b40 <SCSI_ProcessCmd+0x2d8>
 80048a6:	2b5a      	cmp	r3, #90	; 0x5a
 80048a8:	f300 80c0 	bgt.w	8004a2c <SCSI_ProcessCmd+0x1c4>
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	f2c0 8147 	blt.w	8004b40 <SCSI_ProcessCmd+0x2d8>
 80048b2:	2b5a      	cmp	r3, #90	; 0x5a
 80048b4:	f200 8144 	bhi.w	8004b40 <SCSI_ProcessCmd+0x2d8>
 80048b8:	a201      	add	r2, pc, #4	; (adr r2, 80048c0 <SCSI_ProcessCmd+0x58>)
 80048ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048be:	bf00      	nop
 80048c0:	08004a33 	.word	0x08004a33
 80048c4:	08004b41 	.word	0x08004b41
 80048c8:	08004b41 	.word	0x08004b41
 80048cc:	08004a45 	.word	0x08004a45
 80048d0:	08004b41 	.word	0x08004b41
 80048d4:	08004b41 	.word	0x08004b41
 80048d8:	08004b41 	.word	0x08004b41
 80048dc:	08004b41 	.word	0x08004b41
 80048e0:	08004b41 	.word	0x08004b41
 80048e4:	08004b41 	.word	0x08004b41
 80048e8:	08004b41 	.word	0x08004b41
 80048ec:	08004b41 	.word	0x08004b41
 80048f0:	08004b41 	.word	0x08004b41
 80048f4:	08004b41 	.word	0x08004b41
 80048f8:	08004b41 	.word	0x08004b41
 80048fc:	08004b41 	.word	0x08004b41
 8004900:	08004b41 	.word	0x08004b41
 8004904:	08004b41 	.word	0x08004b41
 8004908:	08004a57 	.word	0x08004a57
 800490c:	08004b41 	.word	0x08004b41
 8004910:	08004b41 	.word	0x08004b41
 8004914:	08004b41 	.word	0x08004b41
 8004918:	08004b41 	.word	0x08004b41
 800491c:	08004b41 	.word	0x08004b41
 8004920:	08004b41 	.word	0x08004b41
 8004924:	08004b41 	.word	0x08004b41
 8004928:	08004a8d 	.word	0x08004a8d
 800492c:	08004a69 	.word	0x08004a69
 8004930:	08004b41 	.word	0x08004b41
 8004934:	08004b41 	.word	0x08004b41
 8004938:	08004a7b 	.word	0x08004a7b
 800493c:	08004b41 	.word	0x08004b41
 8004940:	08004b41 	.word	0x08004b41
 8004944:	08004b41 	.word	0x08004b41
 8004948:	08004b41 	.word	0x08004b41
 800494c:	08004ab1 	.word	0x08004ab1
 8004950:	08004b41 	.word	0x08004b41
 8004954:	08004ac3 	.word	0x08004ac3
 8004958:	08004b41 	.word	0x08004b41
 800495c:	08004b41 	.word	0x08004b41
 8004960:	08004ae7 	.word	0x08004ae7
 8004964:	08004b41 	.word	0x08004b41
 8004968:	08004b0b 	.word	0x08004b0b
 800496c:	08004b41 	.word	0x08004b41
 8004970:	08004b41 	.word	0x08004b41
 8004974:	08004b41 	.word	0x08004b41
 8004978:	08004b41 	.word	0x08004b41
 800497c:	08004b2f 	.word	0x08004b2f
 8004980:	08004b41 	.word	0x08004b41
 8004984:	08004b41 	.word	0x08004b41
 8004988:	08004b41 	.word	0x08004b41
 800498c:	08004b41 	.word	0x08004b41
 8004990:	08004b41 	.word	0x08004b41
 8004994:	08004b41 	.word	0x08004b41
 8004998:	08004b41 	.word	0x08004b41
 800499c:	08004b41 	.word	0x08004b41
 80049a0:	08004b41 	.word	0x08004b41
 80049a4:	08004b41 	.word	0x08004b41
 80049a8:	08004b41 	.word	0x08004b41
 80049ac:	08004b41 	.word	0x08004b41
 80049b0:	08004b41 	.word	0x08004b41
 80049b4:	08004b41 	.word	0x08004b41
 80049b8:	08004b41 	.word	0x08004b41
 80049bc:	08004b41 	.word	0x08004b41
 80049c0:	08004b41 	.word	0x08004b41
 80049c4:	08004b41 	.word	0x08004b41
 80049c8:	08004b41 	.word	0x08004b41
 80049cc:	08004b41 	.word	0x08004b41
 80049d0:	08004b41 	.word	0x08004b41
 80049d4:	08004b41 	.word	0x08004b41
 80049d8:	08004b41 	.word	0x08004b41
 80049dc:	08004b41 	.word	0x08004b41
 80049e0:	08004b41 	.word	0x08004b41
 80049e4:	08004b41 	.word	0x08004b41
 80049e8:	08004b41 	.word	0x08004b41
 80049ec:	08004b41 	.word	0x08004b41
 80049f0:	08004b41 	.word	0x08004b41
 80049f4:	08004b41 	.word	0x08004b41
 80049f8:	08004b41 	.word	0x08004b41
 80049fc:	08004b41 	.word	0x08004b41
 8004a00:	08004b41 	.word	0x08004b41
 8004a04:	08004b41 	.word	0x08004b41
 8004a08:	08004b41 	.word	0x08004b41
 8004a0c:	08004b41 	.word	0x08004b41
 8004a10:	08004b41 	.word	0x08004b41
 8004a14:	08004b41 	.word	0x08004b41
 8004a18:	08004b41 	.word	0x08004b41
 8004a1c:	08004b41 	.word	0x08004b41
 8004a20:	08004b41 	.word	0x08004b41
 8004a24:	08004b41 	.word	0x08004b41
 8004a28:	08004a9f 	.word	0x08004a9f
 8004a2c:	2b9e      	cmp	r3, #158	; 0x9e
 8004a2e:	d051      	beq.n	8004ad4 <SCSI_ProcessCmd+0x26c>
 8004a30:	e086      	b.n	8004b40 <SCSI_ProcessCmd+0x2d8>
  {
    case SCSI_TEST_UNIT_READY:
      ret = SCSI_TestUnitReady(pdev, lun, cmd);
 8004a32:	7afb      	ldrb	r3, [r7, #11]
 8004a34:	687a      	ldr	r2, [r7, #4]
 8004a36:	4619      	mov	r1, r3
 8004a38:	68f8      	ldr	r0, [r7, #12]
 8004a3a:	f000 f893 	bl	8004b64 <SCSI_TestUnitReady>
 8004a3e:	4603      	mov	r3, r0
 8004a40:	75fb      	strb	r3, [r7, #23]
      break;
 8004a42:	e089      	b.n	8004b58 <SCSI_ProcessCmd+0x2f0>

    case SCSI_REQUEST_SENSE:
      ret = SCSI_RequestSense(pdev, lun, cmd);
 8004a44:	7afb      	ldrb	r3, [r7, #11]
 8004a46:	687a      	ldr	r2, [r7, #4]
 8004a48:	4619      	mov	r1, r3
 8004a4a:	68f8      	ldr	r0, [r7, #12]
 8004a4c:	f000 fb38 	bl	80050c0 <SCSI_RequestSense>
 8004a50:	4603      	mov	r3, r0
 8004a52:	75fb      	strb	r3, [r7, #23]
      break;
 8004a54:	e080      	b.n	8004b58 <SCSI_ProcessCmd+0x2f0>

    case SCSI_INQUIRY:
      ret = SCSI_Inquiry(pdev, lun, cmd);
 8004a56:	7afb      	ldrb	r3, [r7, #11]
 8004a58:	687a      	ldr	r2, [r7, #4]
 8004a5a:	4619      	mov	r1, r3
 8004a5c:	68f8      	ldr	r0, [r7, #12]
 8004a5e:	f000 f8d1 	bl	8004c04 <SCSI_Inquiry>
 8004a62:	4603      	mov	r3, r0
 8004a64:	75fb      	strb	r3, [r7, #23]
      break;
 8004a66:	e077      	b.n	8004b58 <SCSI_ProcessCmd+0x2f0>

    case SCSI_START_STOP_UNIT:
      ret = SCSI_StartStopUnit(pdev, lun, cmd);
 8004a68:	7afb      	ldrb	r3, [r7, #11]
 8004a6a:	687a      	ldr	r2, [r7, #4]
 8004a6c:	4619      	mov	r1, r3
 8004a6e:	68f8      	ldr	r0, [r7, #12]
 8004a70:	f000 fbec 	bl	800524c <SCSI_StartStopUnit>
 8004a74:	4603      	mov	r3, r0
 8004a76:	75fb      	strb	r3, [r7, #23]
      break;
 8004a78:	e06e      	b.n	8004b58 <SCSI_ProcessCmd+0x2f0>

    case SCSI_ALLOW_MEDIUM_REMOVAL:
      ret = SCSI_AllowPreventRemovable(pdev, lun, cmd);
 8004a7a:	7afb      	ldrb	r3, [r7, #11]
 8004a7c:	687a      	ldr	r2, [r7, #4]
 8004a7e:	4619      	mov	r1, r3
 8004a80:	68f8      	ldr	r0, [r7, #12]
 8004a82:	f000 fc34 	bl	80052ee <SCSI_AllowPreventRemovable>
 8004a86:	4603      	mov	r3, r0
 8004a88:	75fb      	strb	r3, [r7, #23]
      break;
 8004a8a:	e065      	b.n	8004b58 <SCSI_ProcessCmd+0x2f0>

    case SCSI_MODE_SENSE6:
      ret = SCSI_ModeSense6(pdev, lun, cmd);
 8004a8c:	7afb      	ldrb	r3, [r7, #11]
 8004a8e:	687a      	ldr	r2, [r7, #4]
 8004a90:	4619      	mov	r1, r3
 8004a92:	68f8      	ldr	r0, [r7, #12]
 8004a94:	f000 fabc 	bl	8005010 <SCSI_ModeSense6>
 8004a98:	4603      	mov	r3, r0
 8004a9a:	75fb      	strb	r3, [r7, #23]
      break;
 8004a9c:	e05c      	b.n	8004b58 <SCSI_ProcessCmd+0x2f0>

    case SCSI_MODE_SENSE10:
      ret = SCSI_ModeSense10(pdev, lun, cmd);
 8004a9e:	7afb      	ldrb	r3, [r7, #11]
 8004aa0:	687a      	ldr	r2, [r7, #4]
 8004aa2:	4619      	mov	r1, r3
 8004aa4:	68f8      	ldr	r0, [r7, #12]
 8004aa6:	f000 fadf 	bl	8005068 <SCSI_ModeSense10>
 8004aaa:	4603      	mov	r3, r0
 8004aac:	75fb      	strb	r3, [r7, #23]
      break;
 8004aae:	e053      	b.n	8004b58 <SCSI_ProcessCmd+0x2f0>

    case SCSI_READ_FORMAT_CAPACITIES:
      ret = SCSI_ReadFormatCapacity(pdev, lun, cmd);
 8004ab0:	7afb      	ldrb	r3, [r7, #11]
 8004ab2:	687a      	ldr	r2, [r7, #4]
 8004ab4:	4619      	mov	r1, r3
 8004ab6:	68f8      	ldr	r0, [r7, #12]
 8004ab8:	f000 fa37 	bl	8004f2a <SCSI_ReadFormatCapacity>
 8004abc:	4603      	mov	r3, r0
 8004abe:	75fb      	strb	r3, [r7, #23]
      break;
 8004ac0:	e04a      	b.n	8004b58 <SCSI_ProcessCmd+0x2f0>

    case SCSI_READ_CAPACITY10:
      ret = SCSI_ReadCapacity10(pdev, lun, cmd);
 8004ac2:	7afb      	ldrb	r3, [r7, #11]
 8004ac4:	687a      	ldr	r2, [r7, #4]
 8004ac6:	4619      	mov	r1, r3
 8004ac8:	68f8      	ldr	r0, [r7, #12]
 8004aca:	f000 f90f 	bl	8004cec <SCSI_ReadCapacity10>
 8004ace:	4603      	mov	r3, r0
 8004ad0:	75fb      	strb	r3, [r7, #23]
      break;
 8004ad2:	e041      	b.n	8004b58 <SCSI_ProcessCmd+0x2f0>

    case SCSI_READ_CAPACITY16:
      ret = SCSI_ReadCapacity16(pdev, lun, cmd);
 8004ad4:	7afb      	ldrb	r3, [r7, #11]
 8004ad6:	687a      	ldr	r2, [r7, #4]
 8004ad8:	4619      	mov	r1, r3
 8004ada:	68f8      	ldr	r0, [r7, #12]
 8004adc:	f000 f97b 	bl	8004dd6 <SCSI_ReadCapacity16>
 8004ae0:	4603      	mov	r3, r0
 8004ae2:	75fb      	strb	r3, [r7, #23]
      break;
 8004ae4:	e038      	b.n	8004b58 <SCSI_ProcessCmd+0x2f0>

    case SCSI_READ10:
      ret = SCSI_Read10(pdev, lun, cmd);
 8004ae6:	7afb      	ldrb	r3, [r7, #11]
 8004ae8:	687a      	ldr	r2, [r7, #4]
 8004aea:	4619      	mov	r1, r3
 8004aec:	68f8      	ldr	r0, [r7, #12]
 8004aee:	f000 fc27 	bl	8005340 <SCSI_Read10>
 8004af2:	4603      	mov	r3, r0
 8004af4:	75fb      	strb	r3, [r7, #23]
      break;
 8004af6:	e02f      	b.n	8004b58 <SCSI_ProcessCmd+0x2f0>

    case SCSI_READ12:
      ret = SCSI_Read12(pdev, lun, cmd);
 8004af8:	7afb      	ldrb	r3, [r7, #11]
 8004afa:	687a      	ldr	r2, [r7, #4]
 8004afc:	4619      	mov	r1, r3
 8004afe:	68f8      	ldr	r0, [r7, #12]
 8004b00:	f000 fcbe 	bl	8005480 <SCSI_Read12>
 8004b04:	4603      	mov	r3, r0
 8004b06:	75fb      	strb	r3, [r7, #23]
      break;
 8004b08:	e026      	b.n	8004b58 <SCSI_ProcessCmd+0x2f0>

    case SCSI_WRITE10:
      ret = SCSI_Write10(pdev, lun, cmd);
 8004b0a:	7afb      	ldrb	r3, [r7, #11]
 8004b0c:	687a      	ldr	r2, [r7, #4]
 8004b0e:	4619      	mov	r1, r3
 8004b10:	68f8      	ldr	r0, [r7, #12]
 8004b12:	f000 fd60 	bl	80055d6 <SCSI_Write10>
 8004b16:	4603      	mov	r3, r0
 8004b18:	75fb      	strb	r3, [r7, #23]
      break;
 8004b1a:	e01d      	b.n	8004b58 <SCSI_ProcessCmd+0x2f0>

    case SCSI_WRITE12:
      ret = SCSI_Write12(pdev, lun, cmd);
 8004b1c:	7afb      	ldrb	r3, [r7, #11]
 8004b1e:	687a      	ldr	r2, [r7, #4]
 8004b20:	4619      	mov	r1, r3
 8004b22:	68f8      	ldr	r0, [r7, #12]
 8004b24:	f000 fe1c 	bl	8005760 <SCSI_Write12>
 8004b28:	4603      	mov	r3, r0
 8004b2a:	75fb      	strb	r3, [r7, #23]
      break;
 8004b2c:	e014      	b.n	8004b58 <SCSI_ProcessCmd+0x2f0>

    case SCSI_VERIFY10:
      ret = SCSI_Verify10(pdev, lun, cmd);
 8004b2e:	7afb      	ldrb	r3, [r7, #11]
 8004b30:	687a      	ldr	r2, [r7, #4]
 8004b32:	4619      	mov	r1, r3
 8004b34:	68f8      	ldr	r0, [r7, #12]
 8004b36:	f000 fee8 	bl	800590a <SCSI_Verify10>
 8004b3a:	4603      	mov	r3, r0
 8004b3c:	75fb      	strb	r3, [r7, #23]
      break;
 8004b3e:	e00b      	b.n	8004b58 <SCSI_ProcessCmd+0x2f0>

    default:
      SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_CDB);
 8004b40:	7af9      	ldrb	r1, [r7, #11]
 8004b42:	2320      	movs	r3, #32
 8004b44:	2205      	movs	r2, #5
 8004b46:	68f8      	ldr	r0, [r7, #12]
 8004b48:	f000 fb39 	bl	80051be <SCSI_SenseCode>
      hmsc->bot_status = USBD_BOT_STATUS_ERROR;
 8004b4c:	693b      	ldr	r3, [r7, #16]
 8004b4e:	2202      	movs	r2, #2
 8004b50:	725a      	strb	r2, [r3, #9]
      ret = -1;
 8004b52:	23ff      	movs	r3, #255	; 0xff
 8004b54:	75fb      	strb	r3, [r7, #23]
      break;
 8004b56:	bf00      	nop
  }

  return ret;
 8004b58:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8004b5c:	4618      	mov	r0, r3
 8004b5e:	3718      	adds	r7, #24
 8004b60:	46bd      	mov	sp, r7
 8004b62:	bd80      	pop	{r7, pc}

08004b64 <SCSI_TestUnitReady>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_TestUnitReady(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8004b64:	b580      	push	{r7, lr}
 8004b66:	b086      	sub	sp, #24
 8004b68:	af00      	add	r7, sp, #0
 8004b6a:	60f8      	str	r0, [r7, #12]
 8004b6c:	460b      	mov	r3, r1
 8004b6e:	607a      	str	r2, [r7, #4]
 8004b70:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004b78:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 8004b7a:	697b      	ldr	r3, [r7, #20]
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d102      	bne.n	8004b86 <SCSI_TestUnitReady+0x22>
  {
    return -1;
 8004b80:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004b84:	e03a      	b.n	8004bfc <SCSI_TestUnitReady+0x98>
  }

  /* case 9 : Hi > D0 */
  if (hmsc->cbw.dDataLength != 0U)
 8004b86:	697b      	ldr	r3, [r7, #20]
 8004b88:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d00a      	beq.n	8004ba6 <SCSI_TestUnitReady+0x42>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8004b90:	697b      	ldr	r3, [r7, #20]
 8004b92:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8004b96:	2320      	movs	r3, #32
 8004b98:	2205      	movs	r2, #5
 8004b9a:	68f8      	ldr	r0, [r7, #12]
 8004b9c:	f000 fb0f 	bl	80051be <SCSI_SenseCode>

    return -1;
 8004ba0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004ba4:	e02a      	b.n	8004bfc <SCSI_TestUnitReady+0x98>
  }

  if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 8004ba6:	697b      	ldr	r3, [r7, #20]
 8004ba8:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 8004bac:	2b02      	cmp	r3, #2
 8004bae:	d10b      	bne.n	8004bc8 <SCSI_TestUnitReady+0x64>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8004bb0:	7af9      	ldrb	r1, [r7, #11]
 8004bb2:	233a      	movs	r3, #58	; 0x3a
 8004bb4:	2202      	movs	r2, #2
 8004bb6:	68f8      	ldr	r0, [r7, #12]
 8004bb8:	f000 fb01 	bl	80051be <SCSI_SenseCode>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 8004bbc:	697b      	ldr	r3, [r7, #20]
 8004bbe:	2205      	movs	r2, #5
 8004bc0:	721a      	strb	r2, [r3, #8]
    return -1;
 8004bc2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004bc6:	e019      	b.n	8004bfc <SCSI_TestUnitReady+0x98>
  }

  if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8004bce:	689b      	ldr	r3, [r3, #8]
 8004bd0:	7afa      	ldrb	r2, [r7, #11]
 8004bd2:	4610      	mov	r0, r2
 8004bd4:	4798      	blx	r3
 8004bd6:	4603      	mov	r3, r0
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d00b      	beq.n	8004bf4 <SCSI_TestUnitReady+0x90>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8004bdc:	7af9      	ldrb	r1, [r7, #11]
 8004bde:	233a      	movs	r3, #58	; 0x3a
 8004be0:	2202      	movs	r2, #2
 8004be2:	68f8      	ldr	r0, [r7, #12]
 8004be4:	f000 faeb 	bl	80051be <SCSI_SenseCode>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 8004be8:	697b      	ldr	r3, [r7, #20]
 8004bea:	2205      	movs	r2, #5
 8004bec:	721a      	strb	r2, [r3, #8]

    return -1;
 8004bee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004bf2:	e003      	b.n	8004bfc <SCSI_TestUnitReady+0x98>
  }
  hmsc->bot_data_length = 0U;
 8004bf4:	697b      	ldr	r3, [r7, #20]
 8004bf6:	2200      	movs	r2, #0
 8004bf8:	60da      	str	r2, [r3, #12]

  return 0;
 8004bfa:	2300      	movs	r3, #0
}
 8004bfc:	4618      	mov	r0, r3
 8004bfe:	3718      	adds	r7, #24
 8004c00:	46bd      	mov	sp, r7
 8004c02:	bd80      	pop	{r7, pc}

08004c04 <SCSI_Inquiry>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Inquiry(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8004c04:	b580      	push	{r7, lr}
 8004c06:	b088      	sub	sp, #32
 8004c08:	af00      	add	r7, sp, #0
 8004c0a:	60f8      	str	r0, [r7, #12]
 8004c0c:	460b      	mov	r3, r1
 8004c0e:	607a      	str	r2, [r7, #4]
 8004c10:	72fb      	strb	r3, [r7, #11]
  uint8_t *pPage;
  uint16_t len;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004c18:	61bb      	str	r3, [r7, #24]

  if (hmsc == NULL)
 8004c1a:	69bb      	ldr	r3, [r7, #24]
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d102      	bne.n	8004c26 <SCSI_Inquiry+0x22>
  {
    return -1;
 8004c20:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004c24:	e05a      	b.n	8004cdc <SCSI_Inquiry+0xd8>
  }

  if (hmsc->cbw.dDataLength == 0U)
 8004c26:	69bb      	ldr	r3, [r7, #24]
 8004c28:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d10a      	bne.n	8004c46 <SCSI_Inquiry+0x42>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8004c30:	69bb      	ldr	r3, [r7, #24]
 8004c32:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8004c36:	2320      	movs	r3, #32
 8004c38:	2205      	movs	r2, #5
 8004c3a:	68f8      	ldr	r0, [r7, #12]
 8004c3c:	f000 fabf 	bl	80051be <SCSI_SenseCode>
    return -1;
 8004c40:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004c44:	e04a      	b.n	8004cdc <SCSI_Inquiry+0xd8>
  }

  if ((params[1] & 0x01U) != 0U) /* Evpd is set */
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	3301      	adds	r3, #1
 8004c4a:	781b      	ldrb	r3, [r3, #0]
 8004c4c:	f003 0301 	and.w	r3, r3, #1
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d020      	beq.n	8004c96 <SCSI_Inquiry+0x92>
  {
    if (params[2] == 0U) /* Request for Supported Vital Product Data Pages*/
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	3302      	adds	r3, #2
 8004c58:	781b      	ldrb	r3, [r3, #0]
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d105      	bne.n	8004c6a <SCSI_Inquiry+0x66>
    {
      (void)SCSI_UpdateBotData(hmsc, MSC_Page00_Inquiry_Data, LENGTH_INQUIRY_PAGE00);
 8004c5e:	2206      	movs	r2, #6
 8004c60:	4920      	ldr	r1, [pc, #128]	; (8004ce4 <SCSI_Inquiry+0xe0>)
 8004c62:	69b8      	ldr	r0, [r7, #24]
 8004c64:	f000 ffb4 	bl	8005bd0 <SCSI_UpdateBotData>
 8004c68:	e037      	b.n	8004cda <SCSI_Inquiry+0xd6>
    }
    else if (params[2] == 0x80U) /* Request for VPD page 0x80 Unit Serial Number */
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	3302      	adds	r3, #2
 8004c6e:	781b      	ldrb	r3, [r3, #0]
 8004c70:	2b80      	cmp	r3, #128	; 0x80
 8004c72:	d105      	bne.n	8004c80 <SCSI_Inquiry+0x7c>
    {
      (void)SCSI_UpdateBotData(hmsc, MSC_Page80_Inquiry_Data, LENGTH_INQUIRY_PAGE80);
 8004c74:	2208      	movs	r2, #8
 8004c76:	491c      	ldr	r1, [pc, #112]	; (8004ce8 <SCSI_Inquiry+0xe4>)
 8004c78:	69b8      	ldr	r0, [r7, #24]
 8004c7a:	f000 ffa9 	bl	8005bd0 <SCSI_UpdateBotData>
 8004c7e:	e02c      	b.n	8004cda <SCSI_Inquiry+0xd6>
    }
    else /* Request Not supported */
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST,
 8004c80:	69bb      	ldr	r3, [r7, #24]
 8004c82:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8004c86:	2324      	movs	r3, #36	; 0x24
 8004c88:	2205      	movs	r2, #5
 8004c8a:	68f8      	ldr	r0, [r7, #12]
 8004c8c:	f000 fa97 	bl	80051be <SCSI_SenseCode>
                     INVALID_FIELED_IN_COMMAND);

      return -1;
 8004c90:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004c94:	e022      	b.n	8004cdc <SCSI_Inquiry+0xd8>
    }
  }
  else
  {
    pPage = (uint8_t *) &((USBD_StorageTypeDef *)pdev->pUserData)->pInquiry[lun * STANDARD_INQUIRY_DATA_LEN];
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8004c9c:	69d9      	ldr	r1, [r3, #28]
 8004c9e:	7afa      	ldrb	r2, [r7, #11]
 8004ca0:	4613      	mov	r3, r2
 8004ca2:	00db      	lsls	r3, r3, #3
 8004ca4:	4413      	add	r3, r2
 8004ca6:	009b      	lsls	r3, r3, #2
 8004ca8:	440b      	add	r3, r1
 8004caa:	617b      	str	r3, [r7, #20]
    len = (uint16_t)pPage[4] + 5U;
 8004cac:	697b      	ldr	r3, [r7, #20]
 8004cae:	3304      	adds	r3, #4
 8004cb0:	781b      	ldrb	r3, [r3, #0]
 8004cb2:	b29b      	uxth	r3, r3
 8004cb4:	3305      	adds	r3, #5
 8004cb6:	83fb      	strh	r3, [r7, #30]

    if (params[4] <= len)
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	3304      	adds	r3, #4
 8004cbc:	781b      	ldrb	r3, [r3, #0]
 8004cbe:	b29b      	uxth	r3, r3
 8004cc0:	8bfa      	ldrh	r2, [r7, #30]
 8004cc2:	429a      	cmp	r2, r3
 8004cc4:	d303      	bcc.n	8004cce <SCSI_Inquiry+0xca>
    {
      len = params[4];
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	3304      	adds	r3, #4
 8004cca:	781b      	ldrb	r3, [r3, #0]
 8004ccc:	83fb      	strh	r3, [r7, #30]
    }

    (void)SCSI_UpdateBotData(hmsc, pPage, len);
 8004cce:	8bfb      	ldrh	r3, [r7, #30]
 8004cd0:	461a      	mov	r2, r3
 8004cd2:	6979      	ldr	r1, [r7, #20]
 8004cd4:	69b8      	ldr	r0, [r7, #24]
 8004cd6:	f000 ff7b 	bl	8005bd0 <SCSI_UpdateBotData>
  }

  return 0;
 8004cda:	2300      	movs	r3, #0
}
 8004cdc:	4618      	mov	r0, r3
 8004cde:	3720      	adds	r7, #32
 8004ce0:	46bd      	mov	sp, r7
 8004ce2:	bd80      	pop	{r7, pc}
 8004ce4:	200000b0 	.word	0x200000b0
 8004ce8:	200000b8 	.word	0x200000b8

08004cec <SCSI_ReadCapacity10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ReadCapacity10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8004cec:	b580      	push	{r7, lr}
 8004cee:	b086      	sub	sp, #24
 8004cf0:	af00      	add	r7, sp, #0
 8004cf2:	60f8      	str	r0, [r7, #12]
 8004cf4:	460b      	mov	r3, r1
 8004cf6:	607a      	str	r2, [r7, #4]
 8004cf8:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004d00:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 8004d02:	697b      	ldr	r3, [r7, #20]
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d102      	bne.n	8004d0e <SCSI_ReadCapacity10+0x22>
  {
    return -1;
 8004d08:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004d0c:	e05f      	b.n	8004dce <SCSI_ReadCapacity10+0xe2>
  }

  ret = ((USBD_StorageTypeDef *)pdev->pUserData)->GetCapacity(lun, &hmsc->scsi_blk_nbr, &hmsc->scsi_blk_size);
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8004d14:	685b      	ldr	r3, [r3, #4]
 8004d16:	697a      	ldr	r2, [r7, #20]
 8004d18:	f502 711a 	add.w	r1, r2, #616	; 0x268
 8004d1c:	697a      	ldr	r2, [r7, #20]
 8004d1e:	f502 7219 	add.w	r2, r2, #612	; 0x264
 8004d22:	7af8      	ldrb	r0, [r7, #11]
 8004d24:	4798      	blx	r3
 8004d26:	4603      	mov	r3, r0
 8004d28:	74fb      	strb	r3, [r7, #19]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 8004d2a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d104      	bne.n	8004d3c <SCSI_ReadCapacity10+0x50>
 8004d32:	697b      	ldr	r3, [r7, #20]
 8004d34:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 8004d38:	2b02      	cmp	r3, #2
 8004d3a:	d108      	bne.n	8004d4e <SCSI_ReadCapacity10+0x62>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8004d3c:	7af9      	ldrb	r1, [r7, #11]
 8004d3e:	233a      	movs	r3, #58	; 0x3a
 8004d40:	2202      	movs	r2, #2
 8004d42:	68f8      	ldr	r0, [r7, #12]
 8004d44:	f000 fa3b 	bl	80051be <SCSI_SenseCode>
    return -1;
 8004d48:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004d4c:	e03f      	b.n	8004dce <SCSI_ReadCapacity10+0xe2>
  }

  hmsc->bot_data[0] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 24);
 8004d4e:	697b      	ldr	r3, [r7, #20]
 8004d50:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8004d54:	3b01      	subs	r3, #1
 8004d56:	0e1b      	lsrs	r3, r3, #24
 8004d58:	b2da      	uxtb	r2, r3
 8004d5a:	697b      	ldr	r3, [r7, #20]
 8004d5c:	741a      	strb	r2, [r3, #16]
  hmsc->bot_data[1] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 16);
 8004d5e:	697b      	ldr	r3, [r7, #20]
 8004d60:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8004d64:	3b01      	subs	r3, #1
 8004d66:	0c1b      	lsrs	r3, r3, #16
 8004d68:	b2da      	uxtb	r2, r3
 8004d6a:	697b      	ldr	r3, [r7, #20]
 8004d6c:	745a      	strb	r2, [r3, #17]
  hmsc->bot_data[2] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >>  8);
 8004d6e:	697b      	ldr	r3, [r7, #20]
 8004d70:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8004d74:	3b01      	subs	r3, #1
 8004d76:	0a1b      	lsrs	r3, r3, #8
 8004d78:	b2da      	uxtb	r2, r3
 8004d7a:	697b      	ldr	r3, [r7, #20]
 8004d7c:	749a      	strb	r2, [r3, #18]
  hmsc->bot_data[3] = (uint8_t)(hmsc->scsi_blk_nbr - 1U);
 8004d7e:	697b      	ldr	r3, [r7, #20]
 8004d80:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8004d84:	b2db      	uxtb	r3, r3
 8004d86:	3b01      	subs	r3, #1
 8004d88:	b2da      	uxtb	r2, r3
 8004d8a:	697b      	ldr	r3, [r7, #20]
 8004d8c:	74da      	strb	r2, [r3, #19]

  hmsc->bot_data[4] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 8004d8e:	697b      	ldr	r3, [r7, #20]
 8004d90:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8004d94:	161b      	asrs	r3, r3, #24
 8004d96:	b2da      	uxtb	r2, r3
 8004d98:	697b      	ldr	r3, [r7, #20]
 8004d9a:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)(hmsc->scsi_blk_size >>  16);
 8004d9c:	697b      	ldr	r3, [r7, #20]
 8004d9e:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8004da2:	141b      	asrs	r3, r3, #16
 8004da4:	b2da      	uxtb	r2, r3
 8004da6:	697b      	ldr	r3, [r7, #20]
 8004da8:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 8004daa:	697b      	ldr	r3, [r7, #20]
 8004dac:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8004db0:	0a1b      	lsrs	r3, r3, #8
 8004db2:	b29b      	uxth	r3, r3
 8004db4:	b2da      	uxtb	r2, r3
 8004db6:	697b      	ldr	r3, [r7, #20]
 8004db8:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(hmsc->scsi_blk_size);
 8004dba:	697b      	ldr	r3, [r7, #20]
 8004dbc:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8004dc0:	b2da      	uxtb	r2, r3
 8004dc2:	697b      	ldr	r3, [r7, #20]
 8004dc4:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data_length = 8U;
 8004dc6:	697b      	ldr	r3, [r7, #20]
 8004dc8:	2208      	movs	r2, #8
 8004dca:	60da      	str	r2, [r3, #12]

  return 0;
 8004dcc:	2300      	movs	r3, #0

}
 8004dce:	4618      	mov	r0, r3
 8004dd0:	3718      	adds	r7, #24
 8004dd2:	46bd      	mov	sp, r7
 8004dd4:	bd80      	pop	{r7, pc}

08004dd6 <SCSI_ReadCapacity16>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ReadCapacity16(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8004dd6:	b580      	push	{r7, lr}
 8004dd8:	b088      	sub	sp, #32
 8004dda:	af00      	add	r7, sp, #0
 8004ddc:	60f8      	str	r0, [r7, #12]
 8004dde:	460b      	mov	r3, r1
 8004de0:	607a      	str	r2, [r7, #4]
 8004de2:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  uint8_t idx;
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004dea:	61bb      	str	r3, [r7, #24]

  if (hmsc == NULL)
 8004dec:	69bb      	ldr	r3, [r7, #24]
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d102      	bne.n	8004df8 <SCSI_ReadCapacity16+0x22>
  {
    return -1;
 8004df2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004df6:	e094      	b.n	8004f22 <SCSI_ReadCapacity16+0x14c>
  }

  ret = ((USBD_StorageTypeDef *)pdev->pUserData)->GetCapacity(lun, &hmsc->scsi_blk_nbr, &hmsc->scsi_blk_size);
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8004dfe:	685b      	ldr	r3, [r3, #4]
 8004e00:	69ba      	ldr	r2, [r7, #24]
 8004e02:	f502 711a 	add.w	r1, r2, #616	; 0x268
 8004e06:	69ba      	ldr	r2, [r7, #24]
 8004e08:	f502 7219 	add.w	r2, r2, #612	; 0x264
 8004e0c:	7af8      	ldrb	r0, [r7, #11]
 8004e0e:	4798      	blx	r3
 8004e10:	4603      	mov	r3, r0
 8004e12:	75fb      	strb	r3, [r7, #23]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 8004e14:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d104      	bne.n	8004e26 <SCSI_ReadCapacity16+0x50>
 8004e1c:	69bb      	ldr	r3, [r7, #24]
 8004e1e:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 8004e22:	2b02      	cmp	r3, #2
 8004e24:	d108      	bne.n	8004e38 <SCSI_ReadCapacity16+0x62>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8004e26:	7af9      	ldrb	r1, [r7, #11]
 8004e28:	233a      	movs	r3, #58	; 0x3a
 8004e2a:	2202      	movs	r2, #2
 8004e2c:	68f8      	ldr	r0, [r7, #12]
 8004e2e:	f000 f9c6 	bl	80051be <SCSI_SenseCode>
    return -1;
 8004e32:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004e36:	e074      	b.n	8004f22 <SCSI_ReadCapacity16+0x14c>
  }

  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	330a      	adds	r3, #10
 8004e3c:	781b      	ldrb	r3, [r3, #0]
 8004e3e:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[11] << 16) |
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	330b      	adds	r3, #11
 8004e44:	781b      	ldrb	r3, [r3, #0]
 8004e46:	041b      	lsls	r3, r3, #16
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8004e48:	431a      	orrs	r2, r3
                          ((uint32_t)params[12] <<  8) |
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	330c      	adds	r3, #12
 8004e4e:	781b      	ldrb	r3, [r3, #0]
 8004e50:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[11] << 16) |
 8004e52:	4313      	orrs	r3, r2
                          (uint32_t)params[13];
 8004e54:	687a      	ldr	r2, [r7, #4]
 8004e56:	320d      	adds	r2, #13
 8004e58:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[12] <<  8) |
 8004e5a:	431a      	orrs	r2, r3
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8004e5c:	69bb      	ldr	r3, [r7, #24]
 8004e5e:	60da      	str	r2, [r3, #12]

  for (idx = 0U; idx < hmsc->bot_data_length; idx++)
 8004e60:	2300      	movs	r3, #0
 8004e62:	77fb      	strb	r3, [r7, #31]
 8004e64:	e007      	b.n	8004e76 <SCSI_ReadCapacity16+0xa0>
  {
    hmsc->bot_data[idx] = 0U;
 8004e66:	7ffb      	ldrb	r3, [r7, #31]
 8004e68:	69ba      	ldr	r2, [r7, #24]
 8004e6a:	4413      	add	r3, r2
 8004e6c:	2200      	movs	r2, #0
 8004e6e:	741a      	strb	r2, [r3, #16]
  for (idx = 0U; idx < hmsc->bot_data_length; idx++)
 8004e70:	7ffb      	ldrb	r3, [r7, #31]
 8004e72:	3301      	adds	r3, #1
 8004e74:	77fb      	strb	r3, [r7, #31]
 8004e76:	7ffa      	ldrb	r2, [r7, #31]
 8004e78:	69bb      	ldr	r3, [r7, #24]
 8004e7a:	68db      	ldr	r3, [r3, #12]
 8004e7c:	429a      	cmp	r2, r3
 8004e7e:	d3f2      	bcc.n	8004e66 <SCSI_ReadCapacity16+0x90>
  }

  hmsc->bot_data[4] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 24);
 8004e80:	69bb      	ldr	r3, [r7, #24]
 8004e82:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8004e86:	3b01      	subs	r3, #1
 8004e88:	0e1b      	lsrs	r3, r3, #24
 8004e8a:	b2da      	uxtb	r2, r3
 8004e8c:	69bb      	ldr	r3, [r7, #24]
 8004e8e:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 16);
 8004e90:	69bb      	ldr	r3, [r7, #24]
 8004e92:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8004e96:	3b01      	subs	r3, #1
 8004e98:	0c1b      	lsrs	r3, r3, #16
 8004e9a:	b2da      	uxtb	r2, r3
 8004e9c:	69bb      	ldr	r3, [r7, #24]
 8004e9e:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >>  8);
 8004ea0:	69bb      	ldr	r3, [r7, #24]
 8004ea2:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8004ea6:	3b01      	subs	r3, #1
 8004ea8:	0a1b      	lsrs	r3, r3, #8
 8004eaa:	b2da      	uxtb	r2, r3
 8004eac:	69bb      	ldr	r3, [r7, #24]
 8004eae:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(hmsc->scsi_blk_nbr - 1U);
 8004eb0:	69bb      	ldr	r3, [r7, #24]
 8004eb2:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8004eb6:	b2db      	uxtb	r3, r3
 8004eb8:	3b01      	subs	r3, #1
 8004eba:	b2da      	uxtb	r2, r3
 8004ebc:	69bb      	ldr	r3, [r7, #24]
 8004ebe:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data[8] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 8004ec0:	69bb      	ldr	r3, [r7, #24]
 8004ec2:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8004ec6:	161b      	asrs	r3, r3, #24
 8004ec8:	b2da      	uxtb	r2, r3
 8004eca:	69bb      	ldr	r3, [r7, #24]
 8004ecc:	761a      	strb	r2, [r3, #24]
  hmsc->bot_data[9] = (uint8_t)(hmsc->scsi_blk_size >>  16);
 8004ece:	69bb      	ldr	r3, [r7, #24]
 8004ed0:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8004ed4:	141b      	asrs	r3, r3, #16
 8004ed6:	b2da      	uxtb	r2, r3
 8004ed8:	69bb      	ldr	r3, [r7, #24]
 8004eda:	765a      	strb	r2, [r3, #25]
  hmsc->bot_data[10] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 8004edc:	69bb      	ldr	r3, [r7, #24]
 8004ede:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8004ee2:	0a1b      	lsrs	r3, r3, #8
 8004ee4:	b29b      	uxth	r3, r3
 8004ee6:	b2da      	uxtb	r2, r3
 8004ee8:	69bb      	ldr	r3, [r7, #24]
 8004eea:	769a      	strb	r2, [r3, #26]
  hmsc->bot_data[11] = (uint8_t)(hmsc->scsi_blk_size);
 8004eec:	69bb      	ldr	r3, [r7, #24]
 8004eee:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8004ef2:	b2da      	uxtb	r2, r3
 8004ef4:	69bb      	ldr	r3, [r7, #24]
 8004ef6:	76da      	strb	r2, [r3, #27]

  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	330a      	adds	r3, #10
 8004efc:	781b      	ldrb	r3, [r3, #0]
 8004efe:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[11] << 16) |
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	330b      	adds	r3, #11
 8004f04:	781b      	ldrb	r3, [r3, #0]
 8004f06:	041b      	lsls	r3, r3, #16
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8004f08:	431a      	orrs	r2, r3
                          ((uint32_t)params[12] <<  8) |
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	330c      	adds	r3, #12
 8004f0e:	781b      	ldrb	r3, [r3, #0]
 8004f10:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[11] << 16) |
 8004f12:	4313      	orrs	r3, r2
                          (uint32_t)params[13];
 8004f14:	687a      	ldr	r2, [r7, #4]
 8004f16:	320d      	adds	r2, #13
 8004f18:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[12] <<  8) |
 8004f1a:	431a      	orrs	r2, r3
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8004f1c:	69bb      	ldr	r3, [r7, #24]
 8004f1e:	60da      	str	r2, [r3, #12]

  return 0;
 8004f20:	2300      	movs	r3, #0
}
 8004f22:	4618      	mov	r0, r3
 8004f24:	3720      	adds	r7, #32
 8004f26:	46bd      	mov	sp, r7
 8004f28:	bd80      	pop	{r7, pc}

08004f2a <SCSI_ReadFormatCapacity>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ReadFormatCapacity(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8004f2a:	b580      	push	{r7, lr}
 8004f2c:	b088      	sub	sp, #32
 8004f2e:	af00      	add	r7, sp, #0
 8004f30:	60f8      	str	r0, [r7, #12]
 8004f32:	460b      	mov	r3, r1
 8004f34:	607a      	str	r2, [r7, #4]
 8004f36:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  uint16_t blk_size;
  uint32_t blk_nbr;
  uint16_t i;
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004f3e:	61bb      	str	r3, [r7, #24]

  if (hmsc == NULL)
 8004f40:	69bb      	ldr	r3, [r7, #24]
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d102      	bne.n	8004f4c <SCSI_ReadFormatCapacity+0x22>
  {
    return -1;
 8004f46:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004f4a:	e05c      	b.n	8005006 <SCSI_ReadFormatCapacity+0xdc>
  }

  ret = ((USBD_StorageTypeDef *)pdev->pUserData)->GetCapacity(lun, &blk_nbr, &blk_size);
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8004f52:	685b      	ldr	r3, [r3, #4]
 8004f54:	f107 0214 	add.w	r2, r7, #20
 8004f58:	f107 0110 	add.w	r1, r7, #16
 8004f5c:	7af8      	ldrb	r0, [r7, #11]
 8004f5e:	4798      	blx	r3
 8004f60:	4603      	mov	r3, r0
 8004f62:	75fb      	strb	r3, [r7, #23]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 8004f64:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d104      	bne.n	8004f76 <SCSI_ReadFormatCapacity+0x4c>
 8004f6c:	69bb      	ldr	r3, [r7, #24]
 8004f6e:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 8004f72:	2b02      	cmp	r3, #2
 8004f74:	d108      	bne.n	8004f88 <SCSI_ReadFormatCapacity+0x5e>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8004f76:	7af9      	ldrb	r1, [r7, #11]
 8004f78:	233a      	movs	r3, #58	; 0x3a
 8004f7a:	2202      	movs	r2, #2
 8004f7c:	68f8      	ldr	r0, [r7, #12]
 8004f7e:	f000 f91e 	bl	80051be <SCSI_SenseCode>
    return -1;
 8004f82:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004f86:	e03e      	b.n	8005006 <SCSI_ReadFormatCapacity+0xdc>
  }

  for (i = 0U; i < 12U ; i++)
 8004f88:	2300      	movs	r3, #0
 8004f8a:	83fb      	strh	r3, [r7, #30]
 8004f8c:	e007      	b.n	8004f9e <SCSI_ReadFormatCapacity+0x74>
  {
    hmsc->bot_data[i] = 0U;
 8004f8e:	8bfb      	ldrh	r3, [r7, #30]
 8004f90:	69ba      	ldr	r2, [r7, #24]
 8004f92:	4413      	add	r3, r2
 8004f94:	2200      	movs	r2, #0
 8004f96:	741a      	strb	r2, [r3, #16]
  for (i = 0U; i < 12U ; i++)
 8004f98:	8bfb      	ldrh	r3, [r7, #30]
 8004f9a:	3301      	adds	r3, #1
 8004f9c:	83fb      	strh	r3, [r7, #30]
 8004f9e:	8bfb      	ldrh	r3, [r7, #30]
 8004fa0:	2b0b      	cmp	r3, #11
 8004fa2:	d9f4      	bls.n	8004f8e <SCSI_ReadFormatCapacity+0x64>
  }

  hmsc->bot_data[3] = 0x08U;
 8004fa4:	69bb      	ldr	r3, [r7, #24]
 8004fa6:	2208      	movs	r2, #8
 8004fa8:	74da      	strb	r2, [r3, #19]
  hmsc->bot_data[4] = (uint8_t)((blk_nbr - 1U) >> 24);
 8004faa:	693b      	ldr	r3, [r7, #16]
 8004fac:	3b01      	subs	r3, #1
 8004fae:	0e1b      	lsrs	r3, r3, #24
 8004fb0:	b2da      	uxtb	r2, r3
 8004fb2:	69bb      	ldr	r3, [r7, #24]
 8004fb4:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)((blk_nbr - 1U) >> 16);
 8004fb6:	693b      	ldr	r3, [r7, #16]
 8004fb8:	3b01      	subs	r3, #1
 8004fba:	0c1b      	lsrs	r3, r3, #16
 8004fbc:	b2da      	uxtb	r2, r3
 8004fbe:	69bb      	ldr	r3, [r7, #24]
 8004fc0:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)((blk_nbr - 1U) >>  8);
 8004fc2:	693b      	ldr	r3, [r7, #16]
 8004fc4:	3b01      	subs	r3, #1
 8004fc6:	0a1b      	lsrs	r3, r3, #8
 8004fc8:	b2da      	uxtb	r2, r3
 8004fca:	69bb      	ldr	r3, [r7, #24]
 8004fcc:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(blk_nbr - 1U);
 8004fce:	693b      	ldr	r3, [r7, #16]
 8004fd0:	b2db      	uxtb	r3, r3
 8004fd2:	3b01      	subs	r3, #1
 8004fd4:	b2da      	uxtb	r2, r3
 8004fd6:	69bb      	ldr	r3, [r7, #24]
 8004fd8:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data[8] = 0x02U;
 8004fda:	69bb      	ldr	r3, [r7, #24]
 8004fdc:	2202      	movs	r2, #2
 8004fde:	761a      	strb	r2, [r3, #24]
  hmsc->bot_data[9] = (uint8_t)(blk_size >>  16);
 8004fe0:	8abb      	ldrh	r3, [r7, #20]
 8004fe2:	141b      	asrs	r3, r3, #16
 8004fe4:	b2da      	uxtb	r2, r3
 8004fe6:	69bb      	ldr	r3, [r7, #24]
 8004fe8:	765a      	strb	r2, [r3, #25]
  hmsc->bot_data[10] = (uint8_t)(blk_size >>  8);
 8004fea:	8abb      	ldrh	r3, [r7, #20]
 8004fec:	0a1b      	lsrs	r3, r3, #8
 8004fee:	b29b      	uxth	r3, r3
 8004ff0:	b2da      	uxtb	r2, r3
 8004ff2:	69bb      	ldr	r3, [r7, #24]
 8004ff4:	769a      	strb	r2, [r3, #26]
  hmsc->bot_data[11] = (uint8_t)(blk_size);
 8004ff6:	8abb      	ldrh	r3, [r7, #20]
 8004ff8:	b2da      	uxtb	r2, r3
 8004ffa:	69bb      	ldr	r3, [r7, #24]
 8004ffc:	76da      	strb	r2, [r3, #27]

  hmsc->bot_data_length = 12U;
 8004ffe:	69bb      	ldr	r3, [r7, #24]
 8005000:	220c      	movs	r2, #12
 8005002:	60da      	str	r2, [r3, #12]

  return 0;
 8005004:	2300      	movs	r3, #0
}
 8005006:	4618      	mov	r0, r3
 8005008:	3720      	adds	r7, #32
 800500a:	46bd      	mov	sp, r7
 800500c:	bd80      	pop	{r7, pc}
	...

08005010 <SCSI_ModeSense6>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ModeSense6(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8005010:	b580      	push	{r7, lr}
 8005012:	b086      	sub	sp, #24
 8005014:	af00      	add	r7, sp, #0
 8005016:	60f8      	str	r0, [r7, #12]
 8005018:	460b      	mov	r3, r1
 800501a:	607a      	str	r2, [r7, #4]
 800501c:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005024:	613b      	str	r3, [r7, #16]
  uint16_t len = MODE_SENSE6_LEN;
 8005026:	2317      	movs	r3, #23
 8005028:	82fb      	strh	r3, [r7, #22]

  if (hmsc == NULL)
 800502a:	693b      	ldr	r3, [r7, #16]
 800502c:	2b00      	cmp	r3, #0
 800502e:	d102      	bne.n	8005036 <SCSI_ModeSense6+0x26>
  {
    return -1;
 8005030:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005034:	e011      	b.n	800505a <SCSI_ModeSense6+0x4a>
  }

  if (params[4] <= len)
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	3304      	adds	r3, #4
 800503a:	781b      	ldrb	r3, [r3, #0]
 800503c:	b29b      	uxth	r3, r3
 800503e:	8afa      	ldrh	r2, [r7, #22]
 8005040:	429a      	cmp	r2, r3
 8005042:	d303      	bcc.n	800504c <SCSI_ModeSense6+0x3c>
  {
    len = params[4];
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	3304      	adds	r3, #4
 8005048:	781b      	ldrb	r3, [r3, #0]
 800504a:	82fb      	strh	r3, [r7, #22]
  }

  (void)SCSI_UpdateBotData(hmsc, MSC_Mode_Sense6_data, len);
 800504c:	8afb      	ldrh	r3, [r7, #22]
 800504e:	461a      	mov	r2, r3
 8005050:	4904      	ldr	r1, [pc, #16]	; (8005064 <SCSI_ModeSense6+0x54>)
 8005052:	6938      	ldr	r0, [r7, #16]
 8005054:	f000 fdbc 	bl	8005bd0 <SCSI_UpdateBotData>

  return 0;
 8005058:	2300      	movs	r3, #0
}
 800505a:	4618      	mov	r0, r3
 800505c:	3718      	adds	r7, #24
 800505e:	46bd      	mov	sp, r7
 8005060:	bd80      	pop	{r7, pc}
 8005062:	bf00      	nop
 8005064:	200000c0 	.word	0x200000c0

08005068 <SCSI_ModeSense10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ModeSense10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8005068:	b580      	push	{r7, lr}
 800506a:	b086      	sub	sp, #24
 800506c:	af00      	add	r7, sp, #0
 800506e:	60f8      	str	r0, [r7, #12]
 8005070:	460b      	mov	r3, r1
 8005072:	607a      	str	r2, [r7, #4]
 8005074:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800507c:	613b      	str	r3, [r7, #16]
  uint16_t len = MODE_SENSE10_LEN;
 800507e:	231b      	movs	r3, #27
 8005080:	82fb      	strh	r3, [r7, #22]

  if (hmsc == NULL)
 8005082:	693b      	ldr	r3, [r7, #16]
 8005084:	2b00      	cmp	r3, #0
 8005086:	d102      	bne.n	800508e <SCSI_ModeSense10+0x26>
  {
    return -1;
 8005088:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800508c:	e011      	b.n	80050b2 <SCSI_ModeSense10+0x4a>
  }

  if (params[8] <= len)
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	3308      	adds	r3, #8
 8005092:	781b      	ldrb	r3, [r3, #0]
 8005094:	b29b      	uxth	r3, r3
 8005096:	8afa      	ldrh	r2, [r7, #22]
 8005098:	429a      	cmp	r2, r3
 800509a:	d303      	bcc.n	80050a4 <SCSI_ModeSense10+0x3c>
  {
    len = params[8];
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	3308      	adds	r3, #8
 80050a0:	781b      	ldrb	r3, [r3, #0]
 80050a2:	82fb      	strh	r3, [r7, #22]
  }

  (void)SCSI_UpdateBotData(hmsc, MSC_Mode_Sense10_data, len);
 80050a4:	8afb      	ldrh	r3, [r7, #22]
 80050a6:	461a      	mov	r2, r3
 80050a8:	4904      	ldr	r1, [pc, #16]	; (80050bc <SCSI_ModeSense10+0x54>)
 80050aa:	6938      	ldr	r0, [r7, #16]
 80050ac:	f000 fd90 	bl	8005bd0 <SCSI_UpdateBotData>

  return 0;
 80050b0:	2300      	movs	r3, #0
}
 80050b2:	4618      	mov	r0, r3
 80050b4:	3718      	adds	r7, #24
 80050b6:	46bd      	mov	sp, r7
 80050b8:	bd80      	pop	{r7, pc}
 80050ba:	bf00      	nop
 80050bc:	200000d8 	.word	0x200000d8

080050c0 <SCSI_RequestSense>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_RequestSense(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80050c0:	b580      	push	{r7, lr}
 80050c2:	b086      	sub	sp, #24
 80050c4:	af00      	add	r7, sp, #0
 80050c6:	60f8      	str	r0, [r7, #12]
 80050c8:	460b      	mov	r3, r1
 80050ca:	607a      	str	r2, [r7, #4]
 80050cc:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  uint8_t i;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80050d4:	613b      	str	r3, [r7, #16]

  if (hmsc == NULL)
 80050d6:	693b      	ldr	r3, [r7, #16]
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d102      	bne.n	80050e2 <SCSI_RequestSense+0x22>
  {
    return -1;
 80050dc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80050e0:	e069      	b.n	80051b6 <SCSI_RequestSense+0xf6>
  }

  if (hmsc->cbw.dDataLength == 0U)
 80050e2:	693b      	ldr	r3, [r7, #16]
 80050e4:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d10a      	bne.n	8005102 <SCSI_RequestSense+0x42>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80050ec:	693b      	ldr	r3, [r7, #16]
 80050ee:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 80050f2:	2320      	movs	r3, #32
 80050f4:	2205      	movs	r2, #5
 80050f6:	68f8      	ldr	r0, [r7, #12]
 80050f8:	f000 f861 	bl	80051be <SCSI_SenseCode>
    return -1;
 80050fc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005100:	e059      	b.n	80051b6 <SCSI_RequestSense+0xf6>
  }

  for (i = 0U; i < REQUEST_SENSE_DATA_LEN; i++)
 8005102:	2300      	movs	r3, #0
 8005104:	75fb      	strb	r3, [r7, #23]
 8005106:	e007      	b.n	8005118 <SCSI_RequestSense+0x58>
  {
    hmsc->bot_data[i] = 0U;
 8005108:	7dfb      	ldrb	r3, [r7, #23]
 800510a:	693a      	ldr	r2, [r7, #16]
 800510c:	4413      	add	r3, r2
 800510e:	2200      	movs	r2, #0
 8005110:	741a      	strb	r2, [r3, #16]
  for (i = 0U; i < REQUEST_SENSE_DATA_LEN; i++)
 8005112:	7dfb      	ldrb	r3, [r7, #23]
 8005114:	3301      	adds	r3, #1
 8005116:	75fb      	strb	r3, [r7, #23]
 8005118:	7dfb      	ldrb	r3, [r7, #23]
 800511a:	2b11      	cmp	r3, #17
 800511c:	d9f4      	bls.n	8005108 <SCSI_RequestSense+0x48>
  }

  hmsc->bot_data[0] = 0x70U;
 800511e:	693b      	ldr	r3, [r7, #16]
 8005120:	2270      	movs	r2, #112	; 0x70
 8005122:	741a      	strb	r2, [r3, #16]
  hmsc->bot_data[7] = REQUEST_SENSE_DATA_LEN - 6U;
 8005124:	693b      	ldr	r3, [r7, #16]
 8005126:	220c      	movs	r2, #12
 8005128:	75da      	strb	r2, [r3, #23]

  if ((hmsc->scsi_sense_head != hmsc->scsi_sense_tail))
 800512a:	693b      	ldr	r3, [r7, #16]
 800512c:	f893 2260 	ldrb.w	r2, [r3, #608]	; 0x260
 8005130:	693b      	ldr	r3, [r7, #16]
 8005132:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 8005136:	429a      	cmp	r2, r3
 8005138:	d02e      	beq.n	8005198 <SCSI_RequestSense+0xd8>
  {
    hmsc->bot_data[2] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].Skey;
 800513a:	693b      	ldr	r3, [r7, #16]
 800513c:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 8005140:	461a      	mov	r2, r3
 8005142:	693b      	ldr	r3, [r7, #16]
 8005144:	3248      	adds	r2, #72	; 0x48
 8005146:	f813 2032 	ldrb.w	r2, [r3, r2, lsl #3]
 800514a:	693b      	ldr	r3, [r7, #16]
 800514c:	749a      	strb	r2, [r3, #18]
    hmsc->bot_data[12] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASC;
 800514e:	693b      	ldr	r3, [r7, #16]
 8005150:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 8005154:	693a      	ldr	r2, [r7, #16]
 8005156:	3348      	adds	r3, #72	; 0x48
 8005158:	00db      	lsls	r3, r3, #3
 800515a:	4413      	add	r3, r2
 800515c:	791a      	ldrb	r2, [r3, #4]
 800515e:	693b      	ldr	r3, [r7, #16]
 8005160:	771a      	strb	r2, [r3, #28]
    hmsc->bot_data[13] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASCQ;
 8005162:	693b      	ldr	r3, [r7, #16]
 8005164:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 8005168:	693a      	ldr	r2, [r7, #16]
 800516a:	3348      	adds	r3, #72	; 0x48
 800516c:	00db      	lsls	r3, r3, #3
 800516e:	4413      	add	r3, r2
 8005170:	795a      	ldrb	r2, [r3, #5]
 8005172:	693b      	ldr	r3, [r7, #16]
 8005174:	775a      	strb	r2, [r3, #29]
    hmsc->scsi_sense_head++;
 8005176:	693b      	ldr	r3, [r7, #16]
 8005178:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 800517c:	3301      	adds	r3, #1
 800517e:	b2da      	uxtb	r2, r3
 8005180:	693b      	ldr	r3, [r7, #16]
 8005182:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260

    if (hmsc->scsi_sense_head == SENSE_LIST_DEEPTH)
 8005186:	693b      	ldr	r3, [r7, #16]
 8005188:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 800518c:	2b04      	cmp	r3, #4
 800518e:	d103      	bne.n	8005198 <SCSI_RequestSense+0xd8>
    {
      hmsc->scsi_sense_head = 0U;
 8005190:	693b      	ldr	r3, [r7, #16]
 8005192:	2200      	movs	r2, #0
 8005194:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260
    }
  }

  hmsc->bot_data_length = REQUEST_SENSE_DATA_LEN;
 8005198:	693b      	ldr	r3, [r7, #16]
 800519a:	2212      	movs	r2, #18
 800519c:	60da      	str	r2, [r3, #12]

  if (params[4] <= REQUEST_SENSE_DATA_LEN)
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	3304      	adds	r3, #4
 80051a2:	781b      	ldrb	r3, [r3, #0]
 80051a4:	2b12      	cmp	r3, #18
 80051a6:	d805      	bhi.n	80051b4 <SCSI_RequestSense+0xf4>
  {
    hmsc->bot_data_length = params[4];
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	3304      	adds	r3, #4
 80051ac:	781b      	ldrb	r3, [r3, #0]
 80051ae:	461a      	mov	r2, r3
 80051b0:	693b      	ldr	r3, [r7, #16]
 80051b2:	60da      	str	r2, [r3, #12]
  }

  return 0;
 80051b4:	2300      	movs	r3, #0
}
 80051b6:	4618      	mov	r0, r3
 80051b8:	3718      	adds	r7, #24
 80051ba:	46bd      	mov	sp, r7
 80051bc:	bd80      	pop	{r7, pc}

080051be <SCSI_SenseCode>:
  * @param  ASC: Additional Sense Code
  * @retval none

  */
void SCSI_SenseCode(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t sKey, uint8_t ASC)
{
 80051be:	b480      	push	{r7}
 80051c0:	b085      	sub	sp, #20
 80051c2:	af00      	add	r7, sp, #0
 80051c4:	6078      	str	r0, [r7, #4]
 80051c6:	4608      	mov	r0, r1
 80051c8:	4611      	mov	r1, r2
 80051ca:	461a      	mov	r2, r3
 80051cc:	4603      	mov	r3, r0
 80051ce:	70fb      	strb	r3, [r7, #3]
 80051d0:	460b      	mov	r3, r1
 80051d2:	70bb      	strb	r3, [r7, #2]
 80051d4:	4613      	mov	r3, r2
 80051d6:	707b      	strb	r3, [r7, #1]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80051de:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d02c      	beq.n	8005240 <SCSI_SenseCode+0x82>
  {
    return;
  }

  hmsc->scsi_sense[hmsc->scsi_sense_tail].Skey = sKey;
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 80051ec:	461a      	mov	r2, r3
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	3248      	adds	r2, #72	; 0x48
 80051f2:	78b9      	ldrb	r1, [r7, #2]
 80051f4:	f803 1032 	strb.w	r1, [r3, r2, lsl #3]
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.b.ASC = ASC;
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 80051fe:	68fa      	ldr	r2, [r7, #12]
 8005200:	3348      	adds	r3, #72	; 0x48
 8005202:	00db      	lsls	r3, r3, #3
 8005204:	4413      	add	r3, r2
 8005206:	787a      	ldrb	r2, [r7, #1]
 8005208:	711a      	strb	r2, [r3, #4]
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.b.ASCQ = 0U;
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 8005210:	68fa      	ldr	r2, [r7, #12]
 8005212:	3348      	adds	r3, #72	; 0x48
 8005214:	00db      	lsls	r3, r3, #3
 8005216:	4413      	add	r3, r2
 8005218:	2200      	movs	r2, #0
 800521a:	715a      	strb	r2, [r3, #5]
  hmsc->scsi_sense_tail++;
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 8005222:	3301      	adds	r3, #1
 8005224:	b2da      	uxtb	r2, r3
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	f883 2261 	strb.w	r2, [r3, #609]	; 0x261

  if (hmsc->scsi_sense_tail == SENSE_LIST_DEEPTH)
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 8005232:	2b04      	cmp	r3, #4
 8005234:	d105      	bne.n	8005242 <SCSI_SenseCode+0x84>
  {
    hmsc->scsi_sense_tail = 0U;
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	2200      	movs	r2, #0
 800523a:	f883 2261 	strb.w	r2, [r3, #609]	; 0x261
 800523e:	e000      	b.n	8005242 <SCSI_SenseCode+0x84>
    return;
 8005240:	bf00      	nop
  }
}
 8005242:	3714      	adds	r7, #20
 8005244:	46bd      	mov	sp, r7
 8005246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800524a:	4770      	bx	lr

0800524c <SCSI_StartStopUnit>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_StartStopUnit(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800524c:	b580      	push	{r7, lr}
 800524e:	b086      	sub	sp, #24
 8005250:	af00      	add	r7, sp, #0
 8005252:	60f8      	str	r0, [r7, #12]
 8005254:	460b      	mov	r3, r1
 8005256:	607a      	str	r2, [r7, #4]
 8005258:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005260:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 8005262:	697b      	ldr	r3, [r7, #20]
 8005264:	2b00      	cmp	r3, #0
 8005266:	d102      	bne.n	800526e <SCSI_StartStopUnit+0x22>
  {
    return -1;
 8005268:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800526c:	e03b      	b.n	80052e6 <SCSI_StartStopUnit+0x9a>
  }

  if ((hmsc->scsi_medium_state == SCSI_MEDIUM_LOCKED) && ((params[4] & 0x3U) == 2U))
 800526e:	697b      	ldr	r3, [r7, #20]
 8005270:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 8005274:	2b01      	cmp	r3, #1
 8005276:	d10f      	bne.n	8005298 <SCSI_StartStopUnit+0x4c>
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	3304      	adds	r3, #4
 800527c:	781b      	ldrb	r3, [r3, #0]
 800527e:	f003 0303 	and.w	r3, r3, #3
 8005282:	2b02      	cmp	r3, #2
 8005284:	d108      	bne.n	8005298 <SCSI_StartStopUnit+0x4c>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
 8005286:	7af9      	ldrb	r1, [r7, #11]
 8005288:	2324      	movs	r3, #36	; 0x24
 800528a:	2205      	movs	r2, #5
 800528c:	68f8      	ldr	r0, [r7, #12]
 800528e:	f7ff ff96 	bl	80051be <SCSI_SenseCode>

    return -1;
 8005292:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005296:	e026      	b.n	80052e6 <SCSI_StartStopUnit+0x9a>
  }

  if ((params[4] & 0x3U) == 0x1U) /* START=1 */
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	3304      	adds	r3, #4
 800529c:	781b      	ldrb	r3, [r3, #0]
 800529e:	f003 0303 	and.w	r3, r3, #3
 80052a2:	2b01      	cmp	r3, #1
 80052a4:	d104      	bne.n	80052b0 <SCSI_StartStopUnit+0x64>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 80052a6:	697b      	ldr	r3, [r7, #20]
 80052a8:	2200      	movs	r2, #0
 80052aa:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
 80052ae:	e016      	b.n	80052de <SCSI_StartStopUnit+0x92>
  }
  else if ((params[4] & 0x3U) == 0x2U) /* START=0 and LOEJ Load Eject=1 */
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	3304      	adds	r3, #4
 80052b4:	781b      	ldrb	r3, [r3, #0]
 80052b6:	f003 0303 	and.w	r3, r3, #3
 80052ba:	2b02      	cmp	r3, #2
 80052bc:	d104      	bne.n	80052c8 <SCSI_StartStopUnit+0x7c>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_EJECTED;
 80052be:	697b      	ldr	r3, [r7, #20]
 80052c0:	2202      	movs	r2, #2
 80052c2:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
 80052c6:	e00a      	b.n	80052de <SCSI_StartStopUnit+0x92>
  }
  else if ((params[4] & 0x3U) == 0x3U) /* START=1 and LOEJ Load Eject=1 */
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	3304      	adds	r3, #4
 80052cc:	781b      	ldrb	r3, [r3, #0]
 80052ce:	f003 0303 	and.w	r3, r3, #3
 80052d2:	2b03      	cmp	r3, #3
 80052d4:	d103      	bne.n	80052de <SCSI_StartStopUnit+0x92>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 80052d6:	697b      	ldr	r3, [r7, #20]
 80052d8:	2200      	movs	r2, #0
 80052da:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
  }
  else
  {
    /* .. */
  }
  hmsc->bot_data_length = 0U;
 80052de:	697b      	ldr	r3, [r7, #20]
 80052e0:	2200      	movs	r2, #0
 80052e2:	60da      	str	r2, [r3, #12]

  return 0;
 80052e4:	2300      	movs	r3, #0
}
 80052e6:	4618      	mov	r0, r3
 80052e8:	3718      	adds	r7, #24
 80052ea:	46bd      	mov	sp, r7
 80052ec:	bd80      	pop	{r7, pc}

080052ee <SCSI_AllowPreventRemovable>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_AllowPreventRemovable(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80052ee:	b480      	push	{r7}
 80052f0:	b087      	sub	sp, #28
 80052f2:	af00      	add	r7, sp, #0
 80052f4:	60f8      	str	r0, [r7, #12]
 80052f6:	460b      	mov	r3, r1
 80052f8:	607a      	str	r2, [r7, #4]
 80052fa:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005302:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 8005304:	697b      	ldr	r3, [r7, #20]
 8005306:	2b00      	cmp	r3, #0
 8005308:	d102      	bne.n	8005310 <SCSI_AllowPreventRemovable+0x22>
  {
    return -1;
 800530a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800530e:	e011      	b.n	8005334 <SCSI_AllowPreventRemovable+0x46>
  }

  if (params[4] == 0U)
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	3304      	adds	r3, #4
 8005314:	781b      	ldrb	r3, [r3, #0]
 8005316:	2b00      	cmp	r3, #0
 8005318:	d104      	bne.n	8005324 <SCSI_AllowPreventRemovable+0x36>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 800531a:	697b      	ldr	r3, [r7, #20]
 800531c:	2200      	movs	r2, #0
 800531e:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
 8005322:	e003      	b.n	800532c <SCSI_AllowPreventRemovable+0x3e>
  }
  else
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_LOCKED;
 8005324:	697b      	ldr	r3, [r7, #20]
 8005326:	2201      	movs	r2, #1
 8005328:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
  }

  hmsc->bot_data_length = 0U;
 800532c:	697b      	ldr	r3, [r7, #20]
 800532e:	2200      	movs	r2, #0
 8005330:	60da      	str	r2, [r3, #12]

  return 0;
 8005332:	2300      	movs	r3, #0
}
 8005334:	4618      	mov	r0, r3
 8005336:	371c      	adds	r7, #28
 8005338:	46bd      	mov	sp, r7
 800533a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800533e:	4770      	bx	lr

08005340 <SCSI_Read10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Read10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8005340:	b580      	push	{r7, lr}
 8005342:	b086      	sub	sp, #24
 8005344:	af00      	add	r7, sp, #0
 8005346:	60f8      	str	r0, [r7, #12]
 8005348:	460b      	mov	r3, r1
 800534a:	607a      	str	r2, [r7, #4]
 800534c:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005354:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 8005356:	697b      	ldr	r3, [r7, #20]
 8005358:	2b00      	cmp	r3, #0
 800535a:	d102      	bne.n	8005362 <SCSI_Read10+0x22>
  {
    return -1;
 800535c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005360:	e08a      	b.n	8005478 <SCSI_Read10+0x138>
  }

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 8005362:	697b      	ldr	r3, [r7, #20]
 8005364:	7a1b      	ldrb	r3, [r3, #8]
 8005366:	2b00      	cmp	r3, #0
 8005368:	d17c      	bne.n	8005464 <SCSI_Read10+0x124>
  {
    /* case 10 : Ho <> Di */
    if ((hmsc->cbw.bmFlags & 0x80U) != 0x80U)
 800536a:	697b      	ldr	r3, [r7, #20]
 800536c:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 8005370:	b25b      	sxtb	r3, r3
 8005372:	2b00      	cmp	r3, #0
 8005374:	db0a      	blt.n	800538c <SCSI_Read10+0x4c>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8005376:	697b      	ldr	r3, [r7, #20]
 8005378:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800537c:	2320      	movs	r3, #32
 800537e:	2205      	movs	r2, #5
 8005380:	68f8      	ldr	r0, [r7, #12]
 8005382:	f7ff ff1c 	bl	80051be <SCSI_SenseCode>
      return -1;
 8005386:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800538a:	e075      	b.n	8005478 <SCSI_Read10+0x138>
    }

    if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 800538c:	697b      	ldr	r3, [r7, #20]
 800538e:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 8005392:	2b02      	cmp	r3, #2
 8005394:	d108      	bne.n	80053a8 <SCSI_Read10+0x68>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8005396:	7af9      	ldrb	r1, [r7, #11]
 8005398:	233a      	movs	r3, #58	; 0x3a
 800539a:	2202      	movs	r2, #2
 800539c:	68f8      	ldr	r0, [r7, #12]
 800539e:	f7ff ff0e 	bl	80051be <SCSI_SenseCode>

      return -1;
 80053a2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80053a6:	e067      	b.n	8005478 <SCSI_Read10+0x138>
    }

    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80053ae:	689b      	ldr	r3, [r3, #8]
 80053b0:	7afa      	ldrb	r2, [r7, #11]
 80053b2:	4610      	mov	r0, r2
 80053b4:	4798      	blx	r3
 80053b6:	4603      	mov	r3, r0
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d008      	beq.n	80053ce <SCSI_Read10+0x8e>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 80053bc:	7af9      	ldrb	r1, [r7, #11]
 80053be:	233a      	movs	r3, #58	; 0x3a
 80053c0:	2202      	movs	r2, #2
 80053c2:	68f8      	ldr	r0, [r7, #12]
 80053c4:	f7ff fefb 	bl	80051be <SCSI_SenseCode>
      return -1;
 80053c8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80053cc:	e054      	b.n	8005478 <SCSI_Read10+0x138>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	3302      	adds	r3, #2
 80053d2:	781b      	ldrb	r3, [r3, #0]
 80053d4:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	3303      	adds	r3, #3
 80053da:	781b      	ldrb	r3, [r3, #0]
 80053dc:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 80053de:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] <<  8) |
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	3304      	adds	r3, #4
 80053e4:	781b      	ldrb	r3, [r3, #0]
 80053e6:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 80053e8:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 80053ea:	687a      	ldr	r2, [r7, #4]
 80053ec:	3205      	adds	r2, #5
 80053ee:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] <<  8) |
 80053f0:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 80053f2:	697b      	ldr	r3, [r7, #20]
 80053f4:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[7] <<  8) | (uint32_t)params[8];
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	3307      	adds	r3, #7
 80053fc:	781b      	ldrb	r3, [r3, #0]
 80053fe:	021b      	lsls	r3, r3, #8
 8005400:	687a      	ldr	r2, [r7, #4]
 8005402:	3208      	adds	r2, #8
 8005404:	7812      	ldrb	r2, [r2, #0]
 8005406:	431a      	orrs	r2, r3
 8005408:	697b      	ldr	r3, [r7, #20]
 800540a:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 800540e:	697b      	ldr	r3, [r7, #20]
 8005410:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 8005414:	697b      	ldr	r3, [r7, #20]
 8005416:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800541a:	7af9      	ldrb	r1, [r7, #11]
 800541c:	68f8      	ldr	r0, [r7, #12]
 800541e:	f000 faad 	bl	800597c <SCSI_CheckAddressRange>
 8005422:	4603      	mov	r3, r0
 8005424:	2b00      	cmp	r3, #0
 8005426:	da02      	bge.n	800542e <SCSI_Read10+0xee>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 8005428:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800542c:	e024      	b.n	8005478 <SCSI_Read10+0x138>
    }

    /* cases 4,5 : Hi <> Dn */
    if (hmsc->cbw.dDataLength != (hmsc->scsi_blk_len * hmsc->scsi_blk_size))
 800542e:	697b      	ldr	r3, [r7, #20]
 8005430:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 8005434:	697b      	ldr	r3, [r7, #20]
 8005436:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800543a:	6979      	ldr	r1, [r7, #20]
 800543c:	f8b1 1264 	ldrh.w	r1, [r1, #612]	; 0x264
 8005440:	fb01 f303 	mul.w	r3, r1, r3
 8005444:	429a      	cmp	r2, r3
 8005446:	d00a      	beq.n	800545e <SCSI_Read10+0x11e>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8005448:	697b      	ldr	r3, [r7, #20]
 800544a:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800544e:	2320      	movs	r3, #32
 8005450:	2205      	movs	r2, #5
 8005452:	68f8      	ldr	r0, [r7, #12]
 8005454:	f7ff feb3 	bl	80051be <SCSI_SenseCode>
      return -1;
 8005458:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800545c:	e00c      	b.n	8005478 <SCSI_Read10+0x138>
    }

    hmsc->bot_state = USBD_BOT_DATA_IN;
 800545e:	697b      	ldr	r3, [r7, #20]
 8005460:	2202      	movs	r2, #2
 8005462:	721a      	strb	r2, [r3, #8]
  }
  hmsc->bot_data_length = MSC_MEDIA_PACKET;
 8005464:	697b      	ldr	r3, [r7, #20]
 8005466:	f44f 7200 	mov.w	r2, #512	; 0x200
 800546a:	60da      	str	r2, [r3, #12]

  return SCSI_ProcessRead(pdev, lun);
 800546c:	7afb      	ldrb	r3, [r7, #11]
 800546e:	4619      	mov	r1, r3
 8005470:	68f8      	ldr	r0, [r7, #12]
 8005472:	f000 faab 	bl	80059cc <SCSI_ProcessRead>
 8005476:	4603      	mov	r3, r0
}
 8005478:	4618      	mov	r0, r3
 800547a:	3718      	adds	r7, #24
 800547c:	46bd      	mov	sp, r7
 800547e:	bd80      	pop	{r7, pc}

08005480 <SCSI_Read12>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Read12(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8005480:	b580      	push	{r7, lr}
 8005482:	b086      	sub	sp, #24
 8005484:	af00      	add	r7, sp, #0
 8005486:	60f8      	str	r0, [r7, #12]
 8005488:	460b      	mov	r3, r1
 800548a:	607a      	str	r2, [r7, #4]
 800548c:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005494:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 8005496:	697b      	ldr	r3, [r7, #20]
 8005498:	2b00      	cmp	r3, #0
 800549a:	d102      	bne.n	80054a2 <SCSI_Read12+0x22>
  {
    return -1;
 800549c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80054a0:	e095      	b.n	80055ce <SCSI_Read12+0x14e>
  }

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 80054a2:	697b      	ldr	r3, [r7, #20]
 80054a4:	7a1b      	ldrb	r3, [r3, #8]
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	f040 8087 	bne.w	80055ba <SCSI_Read12+0x13a>
  {
    /* case 10 : Ho <> Di */
    if ((hmsc->cbw.bmFlags & 0x80U) != 0x80U)
 80054ac:	697b      	ldr	r3, [r7, #20]
 80054ae:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 80054b2:	b25b      	sxtb	r3, r3
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	db0a      	blt.n	80054ce <SCSI_Read12+0x4e>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80054b8:	697b      	ldr	r3, [r7, #20]
 80054ba:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 80054be:	2320      	movs	r3, #32
 80054c0:	2205      	movs	r2, #5
 80054c2:	68f8      	ldr	r0, [r7, #12]
 80054c4:	f7ff fe7b 	bl	80051be <SCSI_SenseCode>
      return -1;
 80054c8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80054cc:	e07f      	b.n	80055ce <SCSI_Read12+0x14e>
    }

    if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 80054ce:	697b      	ldr	r3, [r7, #20]
 80054d0:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 80054d4:	2b02      	cmp	r3, #2
 80054d6:	d108      	bne.n	80054ea <SCSI_Read12+0x6a>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 80054d8:	7af9      	ldrb	r1, [r7, #11]
 80054da:	233a      	movs	r3, #58	; 0x3a
 80054dc:	2202      	movs	r2, #2
 80054de:	68f8      	ldr	r0, [r7, #12]
 80054e0:	f7ff fe6d 	bl	80051be <SCSI_SenseCode>
      return -1;
 80054e4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80054e8:	e071      	b.n	80055ce <SCSI_Read12+0x14e>
    }

    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80054f0:	689b      	ldr	r3, [r3, #8]
 80054f2:	7afa      	ldrb	r2, [r7, #11]
 80054f4:	4610      	mov	r0, r2
 80054f6:	4798      	blx	r3
 80054f8:	4603      	mov	r3, r0
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d008      	beq.n	8005510 <SCSI_Read12+0x90>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 80054fe:	7af9      	ldrb	r1, [r7, #11]
 8005500:	233a      	movs	r3, #58	; 0x3a
 8005502:	2202      	movs	r2, #2
 8005504:	68f8      	ldr	r0, [r7, #12]
 8005506:	f7ff fe5a 	bl	80051be <SCSI_SenseCode>
      return -1;
 800550a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800550e:	e05e      	b.n	80055ce <SCSI_Read12+0x14e>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	3302      	adds	r3, #2
 8005514:	781b      	ldrb	r3, [r3, #0]
 8005516:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	3303      	adds	r3, #3
 800551c:	781b      	ldrb	r3, [r3, #0]
 800551e:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8005520:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] <<  8) |
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	3304      	adds	r3, #4
 8005526:	781b      	ldrb	r3, [r3, #0]
 8005528:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 800552a:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 800552c:	687a      	ldr	r2, [r7, #4]
 800552e:	3205      	adds	r2, #5
 8005530:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] <<  8) |
 8005532:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8005534:	697b      	ldr	r3, [r7, #20]
 8005536:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	3306      	adds	r3, #6
 800553e:	781b      	ldrb	r3, [r3, #0]
 8005540:	061a      	lsls	r2, r3, #24
                         ((uint32_t)params[7] << 16) |
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	3307      	adds	r3, #7
 8005546:	781b      	ldrb	r3, [r3, #0]
 8005548:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 800554a:	431a      	orrs	r2, r3
                         ((uint32_t)params[8] << 8) |
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	3308      	adds	r3, #8
 8005550:	781b      	ldrb	r3, [r3, #0]
 8005552:	021b      	lsls	r3, r3, #8
                         ((uint32_t)params[7] << 16) |
 8005554:	4313      	orrs	r3, r2
                         (uint32_t)params[9];
 8005556:	687a      	ldr	r2, [r7, #4]
 8005558:	3209      	adds	r2, #9
 800555a:	7812      	ldrb	r2, [r2, #0]
                         ((uint32_t)params[8] << 8) |
 800555c:	431a      	orrs	r2, r3
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 800555e:	697b      	ldr	r3, [r7, #20]
 8005560:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 8005564:	697b      	ldr	r3, [r7, #20]
 8005566:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 800556a:	697b      	ldr	r3, [r7, #20]
 800556c:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8005570:	7af9      	ldrb	r1, [r7, #11]
 8005572:	68f8      	ldr	r0, [r7, #12]
 8005574:	f000 fa02 	bl	800597c <SCSI_CheckAddressRange>
 8005578:	4603      	mov	r3, r0
 800557a:	2b00      	cmp	r3, #0
 800557c:	da02      	bge.n	8005584 <SCSI_Read12+0x104>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 800557e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005582:	e024      	b.n	80055ce <SCSI_Read12+0x14e>
    }

    /* cases 4,5 : Hi <> Dn */
    if (hmsc->cbw.dDataLength != (hmsc->scsi_blk_len * hmsc->scsi_blk_size))
 8005584:	697b      	ldr	r3, [r7, #20]
 8005586:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 800558a:	697b      	ldr	r3, [r7, #20]
 800558c:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8005590:	6979      	ldr	r1, [r7, #20]
 8005592:	f8b1 1264 	ldrh.w	r1, [r1, #612]	; 0x264
 8005596:	fb01 f303 	mul.w	r3, r1, r3
 800559a:	429a      	cmp	r2, r3
 800559c:	d00a      	beq.n	80055b4 <SCSI_Read12+0x134>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800559e:	697b      	ldr	r3, [r7, #20]
 80055a0:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 80055a4:	2320      	movs	r3, #32
 80055a6:	2205      	movs	r2, #5
 80055a8:	68f8      	ldr	r0, [r7, #12]
 80055aa:	f7ff fe08 	bl	80051be <SCSI_SenseCode>
      return -1;
 80055ae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80055b2:	e00c      	b.n	80055ce <SCSI_Read12+0x14e>
    }

    hmsc->bot_state = USBD_BOT_DATA_IN;
 80055b4:	697b      	ldr	r3, [r7, #20]
 80055b6:	2202      	movs	r2, #2
 80055b8:	721a      	strb	r2, [r3, #8]
  }
  hmsc->bot_data_length = MSC_MEDIA_PACKET;
 80055ba:	697b      	ldr	r3, [r7, #20]
 80055bc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80055c0:	60da      	str	r2, [r3, #12]

  return SCSI_ProcessRead(pdev, lun);
 80055c2:	7afb      	ldrb	r3, [r7, #11]
 80055c4:	4619      	mov	r1, r3
 80055c6:	68f8      	ldr	r0, [r7, #12]
 80055c8:	f000 fa00 	bl	80059cc <SCSI_ProcessRead>
 80055cc:	4603      	mov	r3, r0
}
 80055ce:	4618      	mov	r0, r3
 80055d0:	3718      	adds	r7, #24
 80055d2:	46bd      	mov	sp, r7
 80055d4:	bd80      	pop	{r7, pc}

080055d6 <SCSI_Write10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Write10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80055d6:	b580      	push	{r7, lr}
 80055d8:	b086      	sub	sp, #24
 80055da:	af00      	add	r7, sp, #0
 80055dc:	60f8      	str	r0, [r7, #12]
 80055de:	460b      	mov	r3, r1
 80055e0:	607a      	str	r2, [r7, #4]
 80055e2:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80055ea:	617b      	str	r3, [r7, #20]
  uint32_t len;

  if (hmsc == NULL)
 80055ec:	697b      	ldr	r3, [r7, #20]
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d102      	bne.n	80055f8 <SCSI_Write10+0x22>
  {
    return -1;
 80055f2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80055f6:	e0af      	b.n	8005758 <SCSI_Write10+0x182>
  }

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 80055f8:	697b      	ldr	r3, [r7, #20]
 80055fa:	7a1b      	ldrb	r3, [r3, #8]
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	f040 80a5 	bne.w	800574c <SCSI_Write10+0x176>
  {
    if (hmsc->cbw.dDataLength == 0U)
 8005602:	697b      	ldr	r3, [r7, #20]
 8005604:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8005608:	2b00      	cmp	r3, #0
 800560a:	d10a      	bne.n	8005622 <SCSI_Write10+0x4c>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800560c:	697b      	ldr	r3, [r7, #20]
 800560e:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8005612:	2320      	movs	r3, #32
 8005614:	2205      	movs	r2, #5
 8005616:	68f8      	ldr	r0, [r7, #12]
 8005618:	f7ff fdd1 	bl	80051be <SCSI_SenseCode>
      return -1;
 800561c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005620:	e09a      	b.n	8005758 <SCSI_Write10+0x182>
    }

    /* case 8 : Hi <> Do */
    if ((hmsc->cbw.bmFlags & 0x80U) == 0x80U)
 8005622:	697b      	ldr	r3, [r7, #20]
 8005624:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 8005628:	b25b      	sxtb	r3, r3
 800562a:	2b00      	cmp	r3, #0
 800562c:	da0a      	bge.n	8005644 <SCSI_Write10+0x6e>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800562e:	697b      	ldr	r3, [r7, #20]
 8005630:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8005634:	2320      	movs	r3, #32
 8005636:	2205      	movs	r2, #5
 8005638:	68f8      	ldr	r0, [r7, #12]
 800563a:	f7ff fdc0 	bl	80051be <SCSI_SenseCode>
      return -1;
 800563e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005642:	e089      	b.n	8005758 <SCSI_Write10+0x182>
    }

    /* Check whether Media is ready */
    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800564a:	689b      	ldr	r3, [r3, #8]
 800564c:	7afa      	ldrb	r2, [r7, #11]
 800564e:	4610      	mov	r0, r2
 8005650:	4798      	blx	r3
 8005652:	4603      	mov	r3, r0
 8005654:	2b00      	cmp	r3, #0
 8005656:	d008      	beq.n	800566a <SCSI_Write10+0x94>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8005658:	7af9      	ldrb	r1, [r7, #11]
 800565a:	233a      	movs	r3, #58	; 0x3a
 800565c:	2202      	movs	r2, #2
 800565e:	68f8      	ldr	r0, [r7, #12]
 8005660:	f7ff fdad 	bl	80051be <SCSI_SenseCode>
      return -1;
 8005664:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005668:	e076      	b.n	8005758 <SCSI_Write10+0x182>
    }

    /* Check If media is write-protected */
    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsWriteProtected(lun) != 0)
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005670:	68db      	ldr	r3, [r3, #12]
 8005672:	7afa      	ldrb	r2, [r7, #11]
 8005674:	4610      	mov	r0, r2
 8005676:	4798      	blx	r3
 8005678:	4603      	mov	r3, r0
 800567a:	2b00      	cmp	r3, #0
 800567c:	d008      	beq.n	8005690 <SCSI_Write10+0xba>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, WRITE_PROTECTED);
 800567e:	7af9      	ldrb	r1, [r7, #11]
 8005680:	2327      	movs	r3, #39	; 0x27
 8005682:	2202      	movs	r2, #2
 8005684:	68f8      	ldr	r0, [r7, #12]
 8005686:	f7ff fd9a 	bl	80051be <SCSI_SenseCode>
      return -1;
 800568a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800568e:	e063      	b.n	8005758 <SCSI_Write10+0x182>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	3302      	adds	r3, #2
 8005694:	781b      	ldrb	r3, [r3, #0]
 8005696:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	3303      	adds	r3, #3
 800569c:	781b      	ldrb	r3, [r3, #0]
 800569e:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 80056a0:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] << 8) |
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	3304      	adds	r3, #4
 80056a6:	781b      	ldrb	r3, [r3, #0]
 80056a8:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 80056aa:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 80056ac:	687a      	ldr	r2, [r7, #4]
 80056ae:	3205      	adds	r2, #5
 80056b0:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] << 8) |
 80056b2:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 80056b4:	697b      	ldr	r3, [r7, #20]
 80056b6:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	3307      	adds	r3, #7
 80056be:	781b      	ldrb	r3, [r3, #0]
 80056c0:	021b      	lsls	r3, r3, #8
                         (uint32_t)params[8];
 80056c2:	687a      	ldr	r2, [r7, #4]
 80056c4:	3208      	adds	r2, #8
 80056c6:	7812      	ldrb	r2, [r2, #0]
    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 80056c8:	431a      	orrs	r2, r3
 80056ca:	697b      	ldr	r3, [r7, #20]
 80056cc:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

    /* check if LBA address is in the right range */
    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 80056d0:	697b      	ldr	r3, [r7, #20]
 80056d2:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 80056d6:	697b      	ldr	r3, [r7, #20]
 80056d8:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 80056dc:	7af9      	ldrb	r1, [r7, #11]
 80056de:	68f8      	ldr	r0, [r7, #12]
 80056e0:	f000 f94c 	bl	800597c <SCSI_CheckAddressRange>
 80056e4:	4603      	mov	r3, r0
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	da02      	bge.n	80056f0 <SCSI_Write10+0x11a>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 80056ea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80056ee:	e033      	b.n	8005758 <SCSI_Write10+0x182>
    }

    len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 80056f0:	697b      	ldr	r3, [r7, #20]
 80056f2:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 80056f6:	697a      	ldr	r2, [r7, #20]
 80056f8:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 80056fc:	fb02 f303 	mul.w	r3, r2, r3
 8005700:	613b      	str	r3, [r7, #16]

    /* cases 3,11,13 : Hn,Ho <> D0 */
    if (hmsc->cbw.dDataLength != len)
 8005702:	697b      	ldr	r3, [r7, #20]
 8005704:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8005708:	693a      	ldr	r2, [r7, #16]
 800570a:	429a      	cmp	r2, r3
 800570c:	d00a      	beq.n	8005724 <SCSI_Write10+0x14e>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800570e:	697b      	ldr	r3, [r7, #20]
 8005710:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8005714:	2320      	movs	r3, #32
 8005716:	2205      	movs	r2, #5
 8005718:	68f8      	ldr	r0, [r7, #12]
 800571a:	f7ff fd50 	bl	80051be <SCSI_SenseCode>
      return -1;
 800571e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005722:	e019      	b.n	8005758 <SCSI_Write10+0x182>
    }

    len = MIN(len, MSC_MEDIA_PACKET);
 8005724:	693b      	ldr	r3, [r7, #16]
 8005726:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800572a:	bf28      	it	cs
 800572c:	f44f 7300 	movcs.w	r3, #512	; 0x200
 8005730:	613b      	str	r3, [r7, #16]

    /* Prepare EP to receive first data packet */
    hmsc->bot_state = USBD_BOT_DATA_OUT;
 8005732:	697b      	ldr	r3, [r7, #20]
 8005734:	2201      	movs	r2, #1
 8005736:	721a      	strb	r2, [r3, #8]
    (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, hmsc->bot_data, len);
 8005738:	697b      	ldr	r3, [r7, #20]
 800573a:	f103 0210 	add.w	r2, r3, #16
 800573e:	693b      	ldr	r3, [r7, #16]
 8005740:	2101      	movs	r1, #1
 8005742:	68f8      	ldr	r0, [r7, #12]
 8005744:	f002 f80d 	bl	8007762 <USBD_LL_PrepareReceive>
  else /* Write Process ongoing */
  {
    return SCSI_ProcessWrite(pdev, lun);
  }

  return 0;
 8005748:	2300      	movs	r3, #0
 800574a:	e005      	b.n	8005758 <SCSI_Write10+0x182>
    return SCSI_ProcessWrite(pdev, lun);
 800574c:	7afb      	ldrb	r3, [r7, #11]
 800574e:	4619      	mov	r1, r3
 8005750:	68f8      	ldr	r0, [r7, #12]
 8005752:	f000 f9b4 	bl	8005abe <SCSI_ProcessWrite>
 8005756:	4603      	mov	r3, r0
}
 8005758:	4618      	mov	r0, r3
 800575a:	3718      	adds	r7, #24
 800575c:	46bd      	mov	sp, r7
 800575e:	bd80      	pop	{r7, pc}

08005760 <SCSI_Write12>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Write12(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8005760:	b580      	push	{r7, lr}
 8005762:	b086      	sub	sp, #24
 8005764:	af00      	add	r7, sp, #0
 8005766:	60f8      	str	r0, [r7, #12]
 8005768:	460b      	mov	r3, r1
 800576a:	607a      	str	r2, [r7, #4]
 800576c:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005774:	617b      	str	r3, [r7, #20]
  uint32_t len;

  if (hmsc == NULL)
 8005776:	697b      	ldr	r3, [r7, #20]
 8005778:	2b00      	cmp	r3, #0
 800577a:	d102      	bne.n	8005782 <SCSI_Write12+0x22>
  {
    return -1;
 800577c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005780:	e0bf      	b.n	8005902 <SCSI_Write12+0x1a2>
  }

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 8005782:	697b      	ldr	r3, [r7, #20]
 8005784:	7a1b      	ldrb	r3, [r3, #8]
 8005786:	2b00      	cmp	r3, #0
 8005788:	f040 80b5 	bne.w	80058f6 <SCSI_Write12+0x196>
  {
    if (hmsc->cbw.dDataLength == 0U)
 800578c:	697b      	ldr	r3, [r7, #20]
 800578e:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8005792:	2b00      	cmp	r3, #0
 8005794:	d10a      	bne.n	80057ac <SCSI_Write12+0x4c>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8005796:	697b      	ldr	r3, [r7, #20]
 8005798:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800579c:	2320      	movs	r3, #32
 800579e:	2205      	movs	r2, #5
 80057a0:	68f8      	ldr	r0, [r7, #12]
 80057a2:	f7ff fd0c 	bl	80051be <SCSI_SenseCode>
      return -1;
 80057a6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80057aa:	e0aa      	b.n	8005902 <SCSI_Write12+0x1a2>
    }

    /* case 8 : Hi <> Do */
    if ((hmsc->cbw.bmFlags & 0x80U) == 0x80U)
 80057ac:	697b      	ldr	r3, [r7, #20]
 80057ae:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 80057b2:	b25b      	sxtb	r3, r3
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	da0a      	bge.n	80057ce <SCSI_Write12+0x6e>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80057b8:	697b      	ldr	r3, [r7, #20]
 80057ba:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 80057be:	2320      	movs	r3, #32
 80057c0:	2205      	movs	r2, #5
 80057c2:	68f8      	ldr	r0, [r7, #12]
 80057c4:	f7ff fcfb 	bl	80051be <SCSI_SenseCode>
      return -1;
 80057c8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80057cc:	e099      	b.n	8005902 <SCSI_Write12+0x1a2>
    }

    /* Check whether Media is ready */
    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80057d4:	689b      	ldr	r3, [r3, #8]
 80057d6:	7afa      	ldrb	r2, [r7, #11]
 80057d8:	4610      	mov	r0, r2
 80057da:	4798      	blx	r3
 80057dc:	4603      	mov	r3, r0
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d00b      	beq.n	80057fa <SCSI_Write12+0x9a>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 80057e2:	7af9      	ldrb	r1, [r7, #11]
 80057e4:	233a      	movs	r3, #58	; 0x3a
 80057e6:	2202      	movs	r2, #2
 80057e8:	68f8      	ldr	r0, [r7, #12]
 80057ea:	f7ff fce8 	bl	80051be <SCSI_SenseCode>
      hmsc->bot_state = USBD_BOT_NO_DATA;
 80057ee:	697b      	ldr	r3, [r7, #20]
 80057f0:	2205      	movs	r2, #5
 80057f2:	721a      	strb	r2, [r3, #8]
      return -1;
 80057f4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80057f8:	e083      	b.n	8005902 <SCSI_Write12+0x1a2>
    }

    /* Check If media is write-protected */
    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsWriteProtected(lun) != 0)
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005800:	68db      	ldr	r3, [r3, #12]
 8005802:	7afa      	ldrb	r2, [r7, #11]
 8005804:	4610      	mov	r0, r2
 8005806:	4798      	blx	r3
 8005808:	4603      	mov	r3, r0
 800580a:	2b00      	cmp	r3, #0
 800580c:	d00b      	beq.n	8005826 <SCSI_Write12+0xc6>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, WRITE_PROTECTED);
 800580e:	7af9      	ldrb	r1, [r7, #11]
 8005810:	2327      	movs	r3, #39	; 0x27
 8005812:	2202      	movs	r2, #2
 8005814:	68f8      	ldr	r0, [r7, #12]
 8005816:	f7ff fcd2 	bl	80051be <SCSI_SenseCode>
      hmsc->bot_state = USBD_BOT_NO_DATA;
 800581a:	697b      	ldr	r3, [r7, #20]
 800581c:	2205      	movs	r2, #5
 800581e:	721a      	strb	r2, [r3, #8]
      return -1;
 8005820:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005824:	e06d      	b.n	8005902 <SCSI_Write12+0x1a2>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	3302      	adds	r3, #2
 800582a:	781b      	ldrb	r3, [r3, #0]
 800582c:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	3303      	adds	r3, #3
 8005832:	781b      	ldrb	r3, [r3, #0]
 8005834:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8005836:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] << 8) |
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	3304      	adds	r3, #4
 800583c:	781b      	ldrb	r3, [r3, #0]
 800583e:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 8005840:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 8005842:	687a      	ldr	r2, [r7, #4]
 8005844:	3205      	adds	r2, #5
 8005846:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] << 8) |
 8005848:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800584a:	697b      	ldr	r3, [r7, #20]
 800584c:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	3306      	adds	r3, #6
 8005854:	781b      	ldrb	r3, [r3, #0]
 8005856:	061a      	lsls	r2, r3, #24
                         ((uint32_t)params[7] << 16) |
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	3307      	adds	r3, #7
 800585c:	781b      	ldrb	r3, [r3, #0]
 800585e:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8005860:	431a      	orrs	r2, r3
                         ((uint32_t)params[8] << 8) |
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	3308      	adds	r3, #8
 8005866:	781b      	ldrb	r3, [r3, #0]
 8005868:	021b      	lsls	r3, r3, #8
                         ((uint32_t)params[7] << 16) |
 800586a:	4313      	orrs	r3, r2
                         (uint32_t)params[9];
 800586c:	687a      	ldr	r2, [r7, #4]
 800586e:	3209      	adds	r2, #9
 8005870:	7812      	ldrb	r2, [r2, #0]
                         ((uint32_t)params[8] << 8) |
 8005872:	431a      	orrs	r2, r3
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8005874:	697b      	ldr	r3, [r7, #20]
 8005876:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

    /* check if LBA address is in the right range */
    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 800587a:	697b      	ldr	r3, [r7, #20]
 800587c:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 8005880:	697b      	ldr	r3, [r7, #20]
 8005882:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8005886:	7af9      	ldrb	r1, [r7, #11]
 8005888:	68f8      	ldr	r0, [r7, #12]
 800588a:	f000 f877 	bl	800597c <SCSI_CheckAddressRange>
 800588e:	4603      	mov	r3, r0
 8005890:	2b00      	cmp	r3, #0
 8005892:	da02      	bge.n	800589a <SCSI_Write12+0x13a>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 8005894:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005898:	e033      	b.n	8005902 <SCSI_Write12+0x1a2>
    }

    len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 800589a:	697b      	ldr	r3, [r7, #20]
 800589c:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 80058a0:	697a      	ldr	r2, [r7, #20]
 80058a2:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 80058a6:	fb02 f303 	mul.w	r3, r2, r3
 80058aa:	613b      	str	r3, [r7, #16]

    /* cases 3,11,13 : Hn,Ho <> D0 */
    if (hmsc->cbw.dDataLength != len)
 80058ac:	697b      	ldr	r3, [r7, #20]
 80058ae:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80058b2:	693a      	ldr	r2, [r7, #16]
 80058b4:	429a      	cmp	r2, r3
 80058b6:	d00a      	beq.n	80058ce <SCSI_Write12+0x16e>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80058b8:	697b      	ldr	r3, [r7, #20]
 80058ba:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 80058be:	2320      	movs	r3, #32
 80058c0:	2205      	movs	r2, #5
 80058c2:	68f8      	ldr	r0, [r7, #12]
 80058c4:	f7ff fc7b 	bl	80051be <SCSI_SenseCode>
      return -1;
 80058c8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80058cc:	e019      	b.n	8005902 <SCSI_Write12+0x1a2>
    }

    len = MIN(len, MSC_MEDIA_PACKET);
 80058ce:	693b      	ldr	r3, [r7, #16]
 80058d0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80058d4:	bf28      	it	cs
 80058d6:	f44f 7300 	movcs.w	r3, #512	; 0x200
 80058da:	613b      	str	r3, [r7, #16]

    /* Prepare EP to receive first data packet */
    hmsc->bot_state = USBD_BOT_DATA_OUT;
 80058dc:	697b      	ldr	r3, [r7, #20]
 80058de:	2201      	movs	r2, #1
 80058e0:	721a      	strb	r2, [r3, #8]
    (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, hmsc->bot_data, len);
 80058e2:	697b      	ldr	r3, [r7, #20]
 80058e4:	f103 0210 	add.w	r2, r3, #16
 80058e8:	693b      	ldr	r3, [r7, #16]
 80058ea:	2101      	movs	r1, #1
 80058ec:	68f8      	ldr	r0, [r7, #12]
 80058ee:	f001 ff38 	bl	8007762 <USBD_LL_PrepareReceive>
  else /* Write Process ongoing */
  {
    return SCSI_ProcessWrite(pdev, lun);
  }

  return 0;
 80058f2:	2300      	movs	r3, #0
 80058f4:	e005      	b.n	8005902 <SCSI_Write12+0x1a2>
    return SCSI_ProcessWrite(pdev, lun);
 80058f6:	7afb      	ldrb	r3, [r7, #11]
 80058f8:	4619      	mov	r1, r3
 80058fa:	68f8      	ldr	r0, [r7, #12]
 80058fc:	f000 f8df 	bl	8005abe <SCSI_ProcessWrite>
 8005900:	4603      	mov	r3, r0
}
 8005902:	4618      	mov	r0, r3
 8005904:	3718      	adds	r7, #24
 8005906:	46bd      	mov	sp, r7
 8005908:	bd80      	pop	{r7, pc}

0800590a <SCSI_Verify10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Verify10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800590a:	b580      	push	{r7, lr}
 800590c:	b086      	sub	sp, #24
 800590e:	af00      	add	r7, sp, #0
 8005910:	60f8      	str	r0, [r7, #12]
 8005912:	460b      	mov	r3, r1
 8005914:	607a      	str	r2, [r7, #4]
 8005916:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800591e:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 8005920:	697b      	ldr	r3, [r7, #20]
 8005922:	2b00      	cmp	r3, #0
 8005924:	d102      	bne.n	800592c <SCSI_Verify10+0x22>
  {
    return -1;
 8005926:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800592a:	e023      	b.n	8005974 <SCSI_Verify10+0x6a>
  }

  if ((params[1] & 0x02U) == 0x02U)
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	3301      	adds	r3, #1
 8005930:	781b      	ldrb	r3, [r3, #0]
 8005932:	f003 0302 	and.w	r3, r3, #2
 8005936:	2b00      	cmp	r3, #0
 8005938:	d008      	beq.n	800594c <SCSI_Verify10+0x42>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
 800593a:	7af9      	ldrb	r1, [r7, #11]
 800593c:	2324      	movs	r3, #36	; 0x24
 800593e:	2205      	movs	r2, #5
 8005940:	68f8      	ldr	r0, [r7, #12]
 8005942:	f7ff fc3c 	bl	80051be <SCSI_SenseCode>
    return -1; /* Error, Verify Mode Not supported*/
 8005946:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800594a:	e013      	b.n	8005974 <SCSI_Verify10+0x6a>
  }

  if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr, hmsc->scsi_blk_len) < 0)
 800594c:	697b      	ldr	r3, [r7, #20]
 800594e:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 8005952:	697b      	ldr	r3, [r7, #20]
 8005954:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8005958:	7af9      	ldrb	r1, [r7, #11]
 800595a:	68f8      	ldr	r0, [r7, #12]
 800595c:	f000 f80e 	bl	800597c <SCSI_CheckAddressRange>
 8005960:	4603      	mov	r3, r0
 8005962:	2b00      	cmp	r3, #0
 8005964:	da02      	bge.n	800596c <SCSI_Verify10+0x62>
  {
    return -1; /* error */
 8005966:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800596a:	e003      	b.n	8005974 <SCSI_Verify10+0x6a>
  }

  hmsc->bot_data_length = 0U;
 800596c:	697b      	ldr	r3, [r7, #20]
 800596e:	2200      	movs	r2, #0
 8005970:	60da      	str	r2, [r3, #12]

  return 0;
 8005972:	2300      	movs	r3, #0
}
 8005974:	4618      	mov	r0, r3
 8005976:	3718      	adds	r7, #24
 8005978:	46bd      	mov	sp, r7
 800597a:	bd80      	pop	{r7, pc}

0800597c <SCSI_CheckAddressRange>:
  * @param  blk_nbr: number of block to be processed
  * @retval status
  */
static int8_t SCSI_CheckAddressRange(USBD_HandleTypeDef *pdev, uint8_t lun,
                                     uint32_t blk_offset, uint32_t blk_nbr)
{
 800597c:	b580      	push	{r7, lr}
 800597e:	b086      	sub	sp, #24
 8005980:	af00      	add	r7, sp, #0
 8005982:	60f8      	str	r0, [r7, #12]
 8005984:	607a      	str	r2, [r7, #4]
 8005986:	603b      	str	r3, [r7, #0]
 8005988:	460b      	mov	r3, r1
 800598a:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005992:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 8005994:	697b      	ldr	r3, [r7, #20]
 8005996:	2b00      	cmp	r3, #0
 8005998:	d102      	bne.n	80059a0 <SCSI_CheckAddressRange+0x24>
  {
    return -1;
 800599a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800599e:	e011      	b.n	80059c4 <SCSI_CheckAddressRange+0x48>
  }

  if ((blk_offset + blk_nbr) > hmsc->scsi_blk_nbr)
 80059a0:	687a      	ldr	r2, [r7, #4]
 80059a2:	683b      	ldr	r3, [r7, #0]
 80059a4:	441a      	add	r2, r3
 80059a6:	697b      	ldr	r3, [r7, #20]
 80059a8:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 80059ac:	429a      	cmp	r2, r3
 80059ae:	d908      	bls.n	80059c2 <SCSI_CheckAddressRange+0x46>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, ADDRESS_OUT_OF_RANGE);
 80059b0:	7af9      	ldrb	r1, [r7, #11]
 80059b2:	2321      	movs	r3, #33	; 0x21
 80059b4:	2205      	movs	r2, #5
 80059b6:	68f8      	ldr	r0, [r7, #12]
 80059b8:	f7ff fc01 	bl	80051be <SCSI_SenseCode>
    return -1;
 80059bc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80059c0:	e000      	b.n	80059c4 <SCSI_CheckAddressRange+0x48>
  }

  return 0;
 80059c2:	2300      	movs	r3, #0
}
 80059c4:	4618      	mov	r0, r3
 80059c6:	3718      	adds	r7, #24
 80059c8:	46bd      	mov	sp, r7
 80059ca:	bd80      	pop	{r7, pc}

080059cc <SCSI_ProcessRead>:
  *         Handle Read Process
  * @param  lun: Logical unit number
  * @retval status
  */
static int8_t SCSI_ProcessRead(USBD_HandleTypeDef *pdev, uint8_t lun)
{
 80059cc:	b590      	push	{r4, r7, lr}
 80059ce:	b085      	sub	sp, #20
 80059d0:	af00      	add	r7, sp, #0
 80059d2:	6078      	str	r0, [r7, #4]
 80059d4:	460b      	mov	r3, r1
 80059d6:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80059de:	60fb      	str	r3, [r7, #12]
  uint32_t len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 80059e6:	68fa      	ldr	r2, [r7, #12]
 80059e8:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 80059ec:	fb02 f303 	mul.w	r3, r2, r3
 80059f0:	60bb      	str	r3, [r7, #8]

  if (hmsc == NULL)
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d102      	bne.n	80059fe <SCSI_ProcessRead+0x32>
  {
    return -1;
 80059f8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80059fc:	e05b      	b.n	8005ab6 <SCSI_ProcessRead+0xea>
  }

  len = MIN(len, MSC_MEDIA_PACKET);
 80059fe:	68bb      	ldr	r3, [r7, #8]
 8005a00:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005a04:	bf28      	it	cs
 8005a06:	f44f 7300 	movcs.w	r3, #512	; 0x200
 8005a0a:	60bb      	str	r3, [r7, #8]

  if (((USBD_StorageTypeDef *)pdev->pUserData)->Read(lun, hmsc->bot_data,
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005a12:	691c      	ldr	r4, [r3, #16]
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	f103 0110 	add.w	r1, r3, #16
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
                                                     hmsc->scsi_blk_addr,
                                                     (len / hmsc->scsi_blk_size)) < 0)
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8005a26:	4618      	mov	r0, r3
 8005a28:	68bb      	ldr	r3, [r7, #8]
 8005a2a:	fbb3 f3f0 	udiv	r3, r3, r0
  if (((USBD_StorageTypeDef *)pdev->pUserData)->Read(lun, hmsc->bot_data,
 8005a2e:	b29b      	uxth	r3, r3
 8005a30:	78f8      	ldrb	r0, [r7, #3]
 8005a32:	47a0      	blx	r4
 8005a34:	4603      	mov	r3, r0
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	da08      	bge.n	8005a4c <SCSI_ProcessRead+0x80>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, UNRECOVERED_READ_ERROR);
 8005a3a:	78f9      	ldrb	r1, [r7, #3]
 8005a3c:	2311      	movs	r3, #17
 8005a3e:	2204      	movs	r2, #4
 8005a40:	6878      	ldr	r0, [r7, #4]
 8005a42:	f7ff fbbc 	bl	80051be <SCSI_SenseCode>
    return -1;
 8005a46:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005a4a:	e034      	b.n	8005ab6 <SCSI_ProcessRead+0xea>
  }

  (void)USBD_LL_Transmit(pdev, MSC_EPIN_ADDR, hmsc->bot_data, len);
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	f103 0210 	add.w	r2, r3, #16
 8005a52:	68bb      	ldr	r3, [r7, #8]
 8005a54:	2181      	movs	r1, #129	; 0x81
 8005a56:	6878      	ldr	r0, [r7, #4]
 8005a58:	f001 fe62 	bl	8007720 <USBD_LL_Transmit>

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8005a68:	4619      	mov	r1, r3
 8005a6a:	68bb      	ldr	r3, [r7, #8]
 8005a6c:	fbb3 f3f1 	udiv	r3, r3, r1
 8005a70:	441a      	add	r2, r3
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	f8d3 2270 	ldr.w	r2, [r3, #624]	; 0x270
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8005a84:	4619      	mov	r1, r3
 8005a86:	68bb      	ldr	r3, [r7, #8]
 8005a88:	fbb3 f3f1 	udiv	r3, r3, r1
 8005a8c:	1ad2      	subs	r2, r2, r3
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

  /* case 6 : Hi = Di */
  hmsc->csw.dDataResidue -= len;
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	f8d3 2238 	ldr.w	r2, [r3, #568]	; 0x238
 8005a9a:	68bb      	ldr	r3, [r7, #8]
 8005a9c:	1ad2      	subs	r2, r2, r3
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	f8c3 2238 	str.w	r2, [r3, #568]	; 0x238

  if (hmsc->scsi_blk_len == 0U)
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d102      	bne.n	8005ab4 <SCSI_ProcessRead+0xe8>
  {
    hmsc->bot_state = USBD_BOT_LAST_DATA_IN;
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	2203      	movs	r2, #3
 8005ab2:	721a      	strb	r2, [r3, #8]
  }

  return 0;
 8005ab4:	2300      	movs	r3, #0
}
 8005ab6:	4618      	mov	r0, r3
 8005ab8:	3714      	adds	r7, #20
 8005aba:	46bd      	mov	sp, r7
 8005abc:	bd90      	pop	{r4, r7, pc}

08005abe <SCSI_ProcessWrite>:
  *         Handle Write Process
  * @param  lun: Logical unit number
  * @retval status
  */
static int8_t SCSI_ProcessWrite(USBD_HandleTypeDef *pdev, uint8_t lun)
{
 8005abe:	b590      	push	{r4, r7, lr}
 8005ac0:	b085      	sub	sp, #20
 8005ac2:	af00      	add	r7, sp, #0
 8005ac4:	6078      	str	r0, [r7, #4]
 8005ac6:	460b      	mov	r3, r1
 8005ac8:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005ad0:	60fb      	str	r3, [r7, #12]
  uint32_t len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8005ad8:	68fa      	ldr	r2, [r7, #12]
 8005ada:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 8005ade:	fb02 f303 	mul.w	r3, r2, r3
 8005ae2:	60bb      	str	r3, [r7, #8]

  if (hmsc == NULL)
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d102      	bne.n	8005af0 <SCSI_ProcessWrite+0x32>
  {
    return -1;
 8005aea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005aee:	e06b      	b.n	8005bc8 <SCSI_ProcessWrite+0x10a>
  }

  len = MIN(len, MSC_MEDIA_PACKET);
 8005af0:	68bb      	ldr	r3, [r7, #8]
 8005af2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005af6:	bf28      	it	cs
 8005af8:	f44f 7300 	movcs.w	r3, #512	; 0x200
 8005afc:	60bb      	str	r3, [r7, #8]

  if (((USBD_StorageTypeDef *)pdev->pUserData)->Write(lun, hmsc->bot_data,
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005b04:	695c      	ldr	r4, [r3, #20]
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	f103 0110 	add.w	r1, r3, #16
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
                                                      hmsc->scsi_blk_addr,
                                                      (len / hmsc->scsi_blk_size)) < 0)
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8005b18:	4618      	mov	r0, r3
 8005b1a:	68bb      	ldr	r3, [r7, #8]
 8005b1c:	fbb3 f3f0 	udiv	r3, r3, r0
  if (((USBD_StorageTypeDef *)pdev->pUserData)->Write(lun, hmsc->bot_data,
 8005b20:	b29b      	uxth	r3, r3
 8005b22:	78f8      	ldrb	r0, [r7, #3]
 8005b24:	47a0      	blx	r4
 8005b26:	4603      	mov	r3, r0
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	da08      	bge.n	8005b3e <SCSI_ProcessWrite+0x80>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, WRITE_FAULT);
 8005b2c:	78f9      	ldrb	r1, [r7, #3]
 8005b2e:	2303      	movs	r3, #3
 8005b30:	2204      	movs	r2, #4
 8005b32:	6878      	ldr	r0, [r7, #4]
 8005b34:	f7ff fb43 	bl	80051be <SCSI_SenseCode>
    return -1;
 8005b38:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005b3c:	e044      	b.n	8005bc8 <SCSI_ProcessWrite+0x10a>
  }

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8005b4a:	4619      	mov	r1, r3
 8005b4c:	68bb      	ldr	r3, [r7, #8]
 8005b4e:	fbb3 f3f1 	udiv	r3, r3, r1
 8005b52:	441a      	add	r2, r3
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	f8d3 2270 	ldr.w	r2, [r3, #624]	; 0x270
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8005b66:	4619      	mov	r1, r3
 8005b68:	68bb      	ldr	r3, [r7, #8]
 8005b6a:	fbb3 f3f1 	udiv	r3, r3, r1
 8005b6e:	1ad2      	subs	r2, r2, r3
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

  /* case 12 : Ho = Do */
  hmsc->csw.dDataResidue -= len;
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	f8d3 2238 	ldr.w	r2, [r3, #568]	; 0x238
 8005b7c:	68bb      	ldr	r3, [r7, #8]
 8005b7e:	1ad2      	subs	r2, r2, r3
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	f8c3 2238 	str.w	r2, [r3, #568]	; 0x238

  if (hmsc->scsi_blk_len == 0U)
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d104      	bne.n	8005b9a <SCSI_ProcessWrite+0xdc>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 8005b90:	2100      	movs	r1, #0
 8005b92:	6878      	ldr	r0, [r7, #4]
 8005b94:	f7fe fdd8 	bl	8004748 <MSC_BOT_SendCSW>
 8005b98:	e015      	b.n	8005bc6 <SCSI_ProcessWrite+0x108>
  }
  else
  {
    len = MIN((hmsc->scsi_blk_len * hmsc->scsi_blk_size), MSC_MEDIA_PACKET);
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8005ba0:	68fa      	ldr	r2, [r7, #12]
 8005ba2:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 8005ba6:	fb02 f303 	mul.w	r3, r2, r3
 8005baa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005bae:	bf28      	it	cs
 8005bb0:	f44f 7300 	movcs.w	r3, #512	; 0x200
 8005bb4:	60bb      	str	r3, [r7, #8]

    /* Prepare EP to Receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, hmsc->bot_data, len);
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	f103 0210 	add.w	r2, r3, #16
 8005bbc:	68bb      	ldr	r3, [r7, #8]
 8005bbe:	2101      	movs	r1, #1
 8005bc0:	6878      	ldr	r0, [r7, #4]
 8005bc2:	f001 fdce 	bl	8007762 <USBD_LL_PrepareReceive>
  }

  return 0;
 8005bc6:	2300      	movs	r3, #0
}
 8005bc8:	4618      	mov	r0, r3
 8005bca:	3714      	adds	r7, #20
 8005bcc:	46bd      	mov	sp, r7
 8005bce:	bd90      	pop	{r4, r7, pc}

08005bd0 <SCSI_UpdateBotData>:
  * @param  length: Data length
  * @retval status
  */
static int8_t SCSI_UpdateBotData(USBD_MSC_BOT_HandleTypeDef *hmsc,
                                 uint8_t *pBuff, uint16_t length)
{
 8005bd0:	b480      	push	{r7}
 8005bd2:	b087      	sub	sp, #28
 8005bd4:	af00      	add	r7, sp, #0
 8005bd6:	60f8      	str	r0, [r7, #12]
 8005bd8:	60b9      	str	r1, [r7, #8]
 8005bda:	4613      	mov	r3, r2
 8005bdc:	80fb      	strh	r3, [r7, #6]
  uint16_t len = length;
 8005bde:	88fb      	ldrh	r3, [r7, #6]
 8005be0:	82fb      	strh	r3, [r7, #22]

  if (hmsc == NULL)
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d102      	bne.n	8005bee <SCSI_UpdateBotData+0x1e>
  {
    return -1;
 8005be8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005bec:	e013      	b.n	8005c16 <SCSI_UpdateBotData+0x46>
  }

  hmsc->bot_data_length = len;
 8005bee:	8afa      	ldrh	r2, [r7, #22]
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	60da      	str	r2, [r3, #12]

  while (len != 0U)
 8005bf4:	e00b      	b.n	8005c0e <SCSI_UpdateBotData+0x3e>
  {
    len--;
 8005bf6:	8afb      	ldrh	r3, [r7, #22]
 8005bf8:	3b01      	subs	r3, #1
 8005bfa:	82fb      	strh	r3, [r7, #22]
    hmsc->bot_data[len] = pBuff[len];
 8005bfc:	8afb      	ldrh	r3, [r7, #22]
 8005bfe:	68ba      	ldr	r2, [r7, #8]
 8005c00:	441a      	add	r2, r3
 8005c02:	8afb      	ldrh	r3, [r7, #22]
 8005c04:	7811      	ldrb	r1, [r2, #0]
 8005c06:	68fa      	ldr	r2, [r7, #12]
 8005c08:	4413      	add	r3, r2
 8005c0a:	460a      	mov	r2, r1
 8005c0c:	741a      	strb	r2, [r3, #16]
  while (len != 0U)
 8005c0e:	8afb      	ldrh	r3, [r7, #22]
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d1f0      	bne.n	8005bf6 <SCSI_UpdateBotData+0x26>
  }

  return 0;
 8005c14:	2300      	movs	r3, #0
}
 8005c16:	4618      	mov	r0, r3
 8005c18:	371c      	adds	r7, #28
 8005c1a:	46bd      	mov	sp, r7
 8005c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c20:	4770      	bx	lr

08005c22 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8005c22:	b580      	push	{r7, lr}
 8005c24:	b086      	sub	sp, #24
 8005c26:	af00      	add	r7, sp, #0
 8005c28:	60f8      	str	r0, [r7, #12]
 8005c2a:	60b9      	str	r1, [r7, #8]
 8005c2c:	4613      	mov	r3, r2
 8005c2e:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d101      	bne.n	8005c3a <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8005c36:	2303      	movs	r3, #3
 8005c38:	e01f      	b.n	8005c7a <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	2200      	movs	r2, #0
 8005c3e:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	2200      	movs	r2, #0
 8005c46:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	2200      	movs	r2, #0
 8005c4e:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8005c52:	68bb      	ldr	r3, [r7, #8]
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d003      	beq.n	8005c60 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	68ba      	ldr	r2, [r7, #8]
 8005c5c:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	2201      	movs	r2, #1
 8005c64:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	79fa      	ldrb	r2, [r7, #7]
 8005c6c:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8005c6e:	68f8      	ldr	r0, [r7, #12]
 8005c70:	f001 fc02 	bl	8007478 <USBD_LL_Init>
 8005c74:	4603      	mov	r3, r0
 8005c76:	75fb      	strb	r3, [r7, #23]

  return ret;
 8005c78:	7dfb      	ldrb	r3, [r7, #23]
}
 8005c7a:	4618      	mov	r0, r3
 8005c7c:	3718      	adds	r7, #24
 8005c7e:	46bd      	mov	sp, r7
 8005c80:	bd80      	pop	{r7, pc}

08005c82 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8005c82:	b580      	push	{r7, lr}
 8005c84:	b084      	sub	sp, #16
 8005c86:	af00      	add	r7, sp, #0
 8005c88:	6078      	str	r0, [r7, #4]
 8005c8a:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8005c8c:	2300      	movs	r3, #0
 8005c8e:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8005c90:	683b      	ldr	r3, [r7, #0]
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d101      	bne.n	8005c9a <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8005c96:	2303      	movs	r3, #3
 8005c98:	e016      	b.n	8005cc8 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	683a      	ldr	r2, [r7, #0]
 8005c9e:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005ca8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d00b      	beq.n	8005cc6 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005cb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cb6:	f107 020e 	add.w	r2, r7, #14
 8005cba:	4610      	mov	r0, r2
 8005cbc:	4798      	blx	r3
 8005cbe:	4602      	mov	r2, r0
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8005cc6:	2300      	movs	r3, #0
}
 8005cc8:	4618      	mov	r0, r3
 8005cca:	3710      	adds	r7, #16
 8005ccc:	46bd      	mov	sp, r7
 8005cce:	bd80      	pop	{r7, pc}

08005cd0 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8005cd0:	b580      	push	{r7, lr}
 8005cd2:	b082      	sub	sp, #8
 8005cd4:	af00      	add	r7, sp, #0
 8005cd6:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8005cd8:	6878      	ldr	r0, [r7, #4]
 8005cda:	f001 fc19 	bl	8007510 <USBD_LL_Start>
 8005cde:	4603      	mov	r3, r0
}
 8005ce0:	4618      	mov	r0, r3
 8005ce2:	3708      	adds	r7, #8
 8005ce4:	46bd      	mov	sp, r7
 8005ce6:	bd80      	pop	{r7, pc}

08005ce8 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8005ce8:	b480      	push	{r7}
 8005cea:	b083      	sub	sp, #12
 8005cec:	af00      	add	r7, sp, #0
 8005cee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005cf0:	2300      	movs	r3, #0
}
 8005cf2:	4618      	mov	r0, r3
 8005cf4:	370c      	adds	r7, #12
 8005cf6:	46bd      	mov	sp, r7
 8005cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cfc:	4770      	bx	lr

08005cfe <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005cfe:	b580      	push	{r7, lr}
 8005d00:	b084      	sub	sp, #16
 8005d02:	af00      	add	r7, sp, #0
 8005d04:	6078      	str	r0, [r7, #4]
 8005d06:	460b      	mov	r3, r1
 8005d08:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8005d0a:	2303      	movs	r3, #3
 8005d0c:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d009      	beq.n	8005d2c <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	78fa      	ldrb	r2, [r7, #3]
 8005d22:	4611      	mov	r1, r2
 8005d24:	6878      	ldr	r0, [r7, #4]
 8005d26:	4798      	blx	r3
 8005d28:	4603      	mov	r3, r0
 8005d2a:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8005d2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d2e:	4618      	mov	r0, r3
 8005d30:	3710      	adds	r7, #16
 8005d32:	46bd      	mov	sp, r7
 8005d34:	bd80      	pop	{r7, pc}

08005d36 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005d36:	b580      	push	{r7, lr}
 8005d38:	b082      	sub	sp, #8
 8005d3a:	af00      	add	r7, sp, #0
 8005d3c:	6078      	str	r0, [r7, #4]
 8005d3e:	460b      	mov	r3, r1
 8005d40:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d007      	beq.n	8005d5c <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005d52:	685b      	ldr	r3, [r3, #4]
 8005d54:	78fa      	ldrb	r2, [r7, #3]
 8005d56:	4611      	mov	r1, r2
 8005d58:	6878      	ldr	r0, [r7, #4]
 8005d5a:	4798      	blx	r3
  }

  return USBD_OK;
 8005d5c:	2300      	movs	r3, #0
}
 8005d5e:	4618      	mov	r0, r3
 8005d60:	3708      	adds	r7, #8
 8005d62:	46bd      	mov	sp, r7
 8005d64:	bd80      	pop	{r7, pc}

08005d66 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8005d66:	b580      	push	{r7, lr}
 8005d68:	b084      	sub	sp, #16
 8005d6a:	af00      	add	r7, sp, #0
 8005d6c:	6078      	str	r0, [r7, #4]
 8005d6e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005d76:	6839      	ldr	r1, [r7, #0]
 8005d78:	4618      	mov	r0, r3
 8005d7a:	f000 ff8f 	bl	8006c9c <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	2201      	movs	r2, #1
 8005d82:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8005d8c:	461a      	mov	r2, r3
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8005d9a:	f003 031f 	and.w	r3, r3, #31
 8005d9e:	2b02      	cmp	r3, #2
 8005da0:	d01a      	beq.n	8005dd8 <USBD_LL_SetupStage+0x72>
 8005da2:	2b02      	cmp	r3, #2
 8005da4:	d822      	bhi.n	8005dec <USBD_LL_SetupStage+0x86>
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d002      	beq.n	8005db0 <USBD_LL_SetupStage+0x4a>
 8005daa:	2b01      	cmp	r3, #1
 8005dac:	d00a      	beq.n	8005dc4 <USBD_LL_SetupStage+0x5e>
 8005dae:	e01d      	b.n	8005dec <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005db6:	4619      	mov	r1, r3
 8005db8:	6878      	ldr	r0, [r7, #4]
 8005dba:	f000 fa61 	bl	8006280 <USBD_StdDevReq>
 8005dbe:	4603      	mov	r3, r0
 8005dc0:	73fb      	strb	r3, [r7, #15]
      break;
 8005dc2:	e020      	b.n	8005e06 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005dca:	4619      	mov	r1, r3
 8005dcc:	6878      	ldr	r0, [r7, #4]
 8005dce:	f000 fac5 	bl	800635c <USBD_StdItfReq>
 8005dd2:	4603      	mov	r3, r0
 8005dd4:	73fb      	strb	r3, [r7, #15]
      break;
 8005dd6:	e016      	b.n	8005e06 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005dde:	4619      	mov	r1, r3
 8005de0:	6878      	ldr	r0, [r7, #4]
 8005de2:	f000 fb04 	bl	80063ee <USBD_StdEPReq>
 8005de6:	4603      	mov	r3, r0
 8005de8:	73fb      	strb	r3, [r7, #15]
      break;
 8005dea:	e00c      	b.n	8005e06 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8005df2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005df6:	b2db      	uxtb	r3, r3
 8005df8:	4619      	mov	r1, r3
 8005dfa:	6878      	ldr	r0, [r7, #4]
 8005dfc:	f001 fc07 	bl	800760e <USBD_LL_StallEP>
 8005e00:	4603      	mov	r3, r0
 8005e02:	73fb      	strb	r3, [r7, #15]
      break;
 8005e04:	bf00      	nop
  }

  return ret;
 8005e06:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e08:	4618      	mov	r0, r3
 8005e0a:	3710      	adds	r7, #16
 8005e0c:	46bd      	mov	sp, r7
 8005e0e:	bd80      	pop	{r7, pc}

08005e10 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8005e10:	b580      	push	{r7, lr}
 8005e12:	b086      	sub	sp, #24
 8005e14:	af00      	add	r7, sp, #0
 8005e16:	60f8      	str	r0, [r7, #12]
 8005e18:	460b      	mov	r3, r1
 8005e1a:	607a      	str	r2, [r7, #4]
 8005e1c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8005e1e:	7afb      	ldrb	r3, [r7, #11]
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d138      	bne.n	8005e96 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8005e2a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005e32:	2b03      	cmp	r3, #3
 8005e34:	d14a      	bne.n	8005ecc <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8005e36:	693b      	ldr	r3, [r7, #16]
 8005e38:	689a      	ldr	r2, [r3, #8]
 8005e3a:	693b      	ldr	r3, [r7, #16]
 8005e3c:	68db      	ldr	r3, [r3, #12]
 8005e3e:	429a      	cmp	r2, r3
 8005e40:	d913      	bls.n	8005e6a <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8005e42:	693b      	ldr	r3, [r7, #16]
 8005e44:	689a      	ldr	r2, [r3, #8]
 8005e46:	693b      	ldr	r3, [r7, #16]
 8005e48:	68db      	ldr	r3, [r3, #12]
 8005e4a:	1ad2      	subs	r2, r2, r3
 8005e4c:	693b      	ldr	r3, [r7, #16]
 8005e4e:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8005e50:	693b      	ldr	r3, [r7, #16]
 8005e52:	68da      	ldr	r2, [r3, #12]
 8005e54:	693b      	ldr	r3, [r7, #16]
 8005e56:	689b      	ldr	r3, [r3, #8]
 8005e58:	4293      	cmp	r3, r2
 8005e5a:	bf28      	it	cs
 8005e5c:	4613      	movcs	r3, r2
 8005e5e:	461a      	mov	r2, r3
 8005e60:	6879      	ldr	r1, [r7, #4]
 8005e62:	68f8      	ldr	r0, [r7, #12]
 8005e64:	f000 fff1 	bl	8006e4a <USBD_CtlContinueRx>
 8005e68:	e030      	b.n	8005ecc <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005e70:	b2db      	uxtb	r3, r3
 8005e72:	2b03      	cmp	r3, #3
 8005e74:	d10b      	bne.n	8005e8e <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005e7c:	691b      	ldr	r3, [r3, #16]
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d005      	beq.n	8005e8e <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005e88:	691b      	ldr	r3, [r3, #16]
 8005e8a:	68f8      	ldr	r0, [r7, #12]
 8005e8c:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8005e8e:	68f8      	ldr	r0, [r7, #12]
 8005e90:	f000 ffec 	bl	8006e6c <USBD_CtlSendStatus>
 8005e94:	e01a      	b.n	8005ecc <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005e9c:	b2db      	uxtb	r3, r3
 8005e9e:	2b03      	cmp	r3, #3
 8005ea0:	d114      	bne.n	8005ecc <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005ea8:	699b      	ldr	r3, [r3, #24]
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d00e      	beq.n	8005ecc <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005eb4:	699b      	ldr	r3, [r3, #24]
 8005eb6:	7afa      	ldrb	r2, [r7, #11]
 8005eb8:	4611      	mov	r1, r2
 8005eba:	68f8      	ldr	r0, [r7, #12]
 8005ebc:	4798      	blx	r3
 8005ebe:	4603      	mov	r3, r0
 8005ec0:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8005ec2:	7dfb      	ldrb	r3, [r7, #23]
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d001      	beq.n	8005ecc <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 8005ec8:	7dfb      	ldrb	r3, [r7, #23]
 8005eca:	e000      	b.n	8005ece <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 8005ecc:	2300      	movs	r3, #0
}
 8005ece:	4618      	mov	r0, r3
 8005ed0:	3718      	adds	r7, #24
 8005ed2:	46bd      	mov	sp, r7
 8005ed4:	bd80      	pop	{r7, pc}

08005ed6 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8005ed6:	b580      	push	{r7, lr}
 8005ed8:	b086      	sub	sp, #24
 8005eda:	af00      	add	r7, sp, #0
 8005edc:	60f8      	str	r0, [r7, #12]
 8005ede:	460b      	mov	r3, r1
 8005ee0:	607a      	str	r2, [r7, #4]
 8005ee2:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8005ee4:	7afb      	ldrb	r3, [r7, #11]
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d16b      	bne.n	8005fc2 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	3314      	adds	r3, #20
 8005eee:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005ef6:	2b02      	cmp	r3, #2
 8005ef8:	d156      	bne.n	8005fa8 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 8005efa:	693b      	ldr	r3, [r7, #16]
 8005efc:	689a      	ldr	r2, [r3, #8]
 8005efe:	693b      	ldr	r3, [r7, #16]
 8005f00:	68db      	ldr	r3, [r3, #12]
 8005f02:	429a      	cmp	r2, r3
 8005f04:	d914      	bls.n	8005f30 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8005f06:	693b      	ldr	r3, [r7, #16]
 8005f08:	689a      	ldr	r2, [r3, #8]
 8005f0a:	693b      	ldr	r3, [r7, #16]
 8005f0c:	68db      	ldr	r3, [r3, #12]
 8005f0e:	1ad2      	subs	r2, r2, r3
 8005f10:	693b      	ldr	r3, [r7, #16]
 8005f12:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8005f14:	693b      	ldr	r3, [r7, #16]
 8005f16:	689b      	ldr	r3, [r3, #8]
 8005f18:	461a      	mov	r2, r3
 8005f1a:	6879      	ldr	r1, [r7, #4]
 8005f1c:	68f8      	ldr	r0, [r7, #12]
 8005f1e:	f000 ff83 	bl	8006e28 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005f22:	2300      	movs	r3, #0
 8005f24:	2200      	movs	r2, #0
 8005f26:	2100      	movs	r1, #0
 8005f28:	68f8      	ldr	r0, [r7, #12]
 8005f2a:	f001 fc1a 	bl	8007762 <USBD_LL_PrepareReceive>
 8005f2e:	e03b      	b.n	8005fa8 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8005f30:	693b      	ldr	r3, [r7, #16]
 8005f32:	68da      	ldr	r2, [r3, #12]
 8005f34:	693b      	ldr	r3, [r7, #16]
 8005f36:	689b      	ldr	r3, [r3, #8]
 8005f38:	429a      	cmp	r2, r3
 8005f3a:	d11c      	bne.n	8005f76 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8005f3c:	693b      	ldr	r3, [r7, #16]
 8005f3e:	685a      	ldr	r2, [r3, #4]
 8005f40:	693b      	ldr	r3, [r7, #16]
 8005f42:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8005f44:	429a      	cmp	r2, r3
 8005f46:	d316      	bcc.n	8005f76 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8005f48:	693b      	ldr	r3, [r7, #16]
 8005f4a:	685a      	ldr	r2, [r3, #4]
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8005f52:	429a      	cmp	r2, r3
 8005f54:	d20f      	bcs.n	8005f76 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8005f56:	2200      	movs	r2, #0
 8005f58:	2100      	movs	r1, #0
 8005f5a:	68f8      	ldr	r0, [r7, #12]
 8005f5c:	f000 ff64 	bl	8006e28 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	2200      	movs	r2, #0
 8005f64:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005f68:	2300      	movs	r3, #0
 8005f6a:	2200      	movs	r2, #0
 8005f6c:	2100      	movs	r1, #0
 8005f6e:	68f8      	ldr	r0, [r7, #12]
 8005f70:	f001 fbf7 	bl	8007762 <USBD_LL_PrepareReceive>
 8005f74:	e018      	b.n	8005fa8 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005f7c:	b2db      	uxtb	r3, r3
 8005f7e:	2b03      	cmp	r3, #3
 8005f80:	d10b      	bne.n	8005f9a <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005f88:	68db      	ldr	r3, [r3, #12]
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d005      	beq.n	8005f9a <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005f94:	68db      	ldr	r3, [r3, #12]
 8005f96:	68f8      	ldr	r0, [r7, #12]
 8005f98:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8005f9a:	2180      	movs	r1, #128	; 0x80
 8005f9c:	68f8      	ldr	r0, [r7, #12]
 8005f9e:	f001 fb36 	bl	800760e <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8005fa2:	68f8      	ldr	r0, [r7, #12]
 8005fa4:	f000 ff75 	bl	8006e92 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8005fae:	2b01      	cmp	r3, #1
 8005fb0:	d122      	bne.n	8005ff8 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8005fb2:	68f8      	ldr	r0, [r7, #12]
 8005fb4:	f7ff fe98 	bl	8005ce8 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	2200      	movs	r2, #0
 8005fbc:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8005fc0:	e01a      	b.n	8005ff8 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005fc8:	b2db      	uxtb	r3, r3
 8005fca:	2b03      	cmp	r3, #3
 8005fcc:	d114      	bne.n	8005ff8 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005fd4:	695b      	ldr	r3, [r3, #20]
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d00e      	beq.n	8005ff8 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005fe0:	695b      	ldr	r3, [r3, #20]
 8005fe2:	7afa      	ldrb	r2, [r7, #11]
 8005fe4:	4611      	mov	r1, r2
 8005fe6:	68f8      	ldr	r0, [r7, #12]
 8005fe8:	4798      	blx	r3
 8005fea:	4603      	mov	r3, r0
 8005fec:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8005fee:	7dfb      	ldrb	r3, [r7, #23]
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d001      	beq.n	8005ff8 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 8005ff4:	7dfb      	ldrb	r3, [r7, #23]
 8005ff6:	e000      	b.n	8005ffa <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 8005ff8:	2300      	movs	r3, #0
}
 8005ffa:	4618      	mov	r0, r3
 8005ffc:	3718      	adds	r7, #24
 8005ffe:	46bd      	mov	sp, r7
 8006000:	bd80      	pop	{r7, pc}

08006002 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8006002:	b580      	push	{r7, lr}
 8006004:	b082      	sub	sp, #8
 8006006:	af00      	add	r7, sp, #0
 8006008:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	2201      	movs	r2, #1
 800600e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	2200      	movs	r2, #0
 8006016:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	2200      	movs	r2, #0
 800601e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	2200      	movs	r2, #0
 8006024:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800602e:	2b00      	cmp	r3, #0
 8006030:	d101      	bne.n	8006036 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 8006032:	2303      	movs	r3, #3
 8006034:	e02f      	b.n	8006096 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800603c:	2b00      	cmp	r3, #0
 800603e:	d00f      	beq.n	8006060 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006046:	685b      	ldr	r3, [r3, #4]
 8006048:	2b00      	cmp	r3, #0
 800604a:	d009      	beq.n	8006060 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006052:	685b      	ldr	r3, [r3, #4]
 8006054:	687a      	ldr	r2, [r7, #4]
 8006056:	6852      	ldr	r2, [r2, #4]
 8006058:	b2d2      	uxtb	r2, r2
 800605a:	4611      	mov	r1, r2
 800605c:	6878      	ldr	r0, [r7, #4]
 800605e:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006060:	2340      	movs	r3, #64	; 0x40
 8006062:	2200      	movs	r2, #0
 8006064:	2100      	movs	r1, #0
 8006066:	6878      	ldr	r0, [r7, #4]
 8006068:	f001 fa6d 	bl	8007546 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	2201      	movs	r2, #1
 8006070:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	2240      	movs	r2, #64	; 0x40
 8006078:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800607c:	2340      	movs	r3, #64	; 0x40
 800607e:	2200      	movs	r2, #0
 8006080:	2180      	movs	r1, #128	; 0x80
 8006082:	6878      	ldr	r0, [r7, #4]
 8006084:	f001 fa5f 	bl	8007546 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	2201      	movs	r2, #1
 800608c:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	2240      	movs	r2, #64	; 0x40
 8006092:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8006094:	2300      	movs	r3, #0
}
 8006096:	4618      	mov	r0, r3
 8006098:	3708      	adds	r7, #8
 800609a:	46bd      	mov	sp, r7
 800609c:	bd80      	pop	{r7, pc}

0800609e <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800609e:	b480      	push	{r7}
 80060a0:	b083      	sub	sp, #12
 80060a2:	af00      	add	r7, sp, #0
 80060a4:	6078      	str	r0, [r7, #4]
 80060a6:	460b      	mov	r3, r1
 80060a8:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	78fa      	ldrb	r2, [r7, #3]
 80060ae:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80060b0:	2300      	movs	r3, #0
}
 80060b2:	4618      	mov	r0, r3
 80060b4:	370c      	adds	r7, #12
 80060b6:	46bd      	mov	sp, r7
 80060b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060bc:	4770      	bx	lr

080060be <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80060be:	b480      	push	{r7}
 80060c0:	b083      	sub	sp, #12
 80060c2:	af00      	add	r7, sp, #0
 80060c4:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80060cc:	b2da      	uxtb	r2, r3
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	2204      	movs	r2, #4
 80060d8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80060dc:	2300      	movs	r3, #0
}
 80060de:	4618      	mov	r0, r3
 80060e0:	370c      	adds	r7, #12
 80060e2:	46bd      	mov	sp, r7
 80060e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e8:	4770      	bx	lr

080060ea <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80060ea:	b480      	push	{r7}
 80060ec:	b083      	sub	sp, #12
 80060ee:	af00      	add	r7, sp, #0
 80060f0:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80060f8:	b2db      	uxtb	r3, r3
 80060fa:	2b04      	cmp	r3, #4
 80060fc:	d106      	bne.n	800610c <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8006104:	b2da      	uxtb	r2, r3
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800610c:	2300      	movs	r3, #0
}
 800610e:	4618      	mov	r0, r3
 8006110:	370c      	adds	r7, #12
 8006112:	46bd      	mov	sp, r7
 8006114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006118:	4770      	bx	lr

0800611a <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800611a:	b580      	push	{r7, lr}
 800611c:	b082      	sub	sp, #8
 800611e:	af00      	add	r7, sp, #0
 8006120:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006128:	2b00      	cmp	r3, #0
 800612a:	d101      	bne.n	8006130 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 800612c:	2303      	movs	r3, #3
 800612e:	e012      	b.n	8006156 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006136:	b2db      	uxtb	r3, r3
 8006138:	2b03      	cmp	r3, #3
 800613a:	d10b      	bne.n	8006154 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006142:	69db      	ldr	r3, [r3, #28]
 8006144:	2b00      	cmp	r3, #0
 8006146:	d005      	beq.n	8006154 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800614e:	69db      	ldr	r3, [r3, #28]
 8006150:	6878      	ldr	r0, [r7, #4]
 8006152:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006154:	2300      	movs	r3, #0
}
 8006156:	4618      	mov	r0, r3
 8006158:	3708      	adds	r7, #8
 800615a:	46bd      	mov	sp, r7
 800615c:	bd80      	pop	{r7, pc}

0800615e <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800615e:	b580      	push	{r7, lr}
 8006160:	b082      	sub	sp, #8
 8006162:	af00      	add	r7, sp, #0
 8006164:	6078      	str	r0, [r7, #4]
 8006166:	460b      	mov	r3, r1
 8006168:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006170:	2b00      	cmp	r3, #0
 8006172:	d101      	bne.n	8006178 <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 8006174:	2303      	movs	r3, #3
 8006176:	e014      	b.n	80061a2 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800617e:	b2db      	uxtb	r3, r3
 8006180:	2b03      	cmp	r3, #3
 8006182:	d10d      	bne.n	80061a0 <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800618a:	6a1b      	ldr	r3, [r3, #32]
 800618c:	2b00      	cmp	r3, #0
 800618e:	d007      	beq.n	80061a0 <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006196:	6a1b      	ldr	r3, [r3, #32]
 8006198:	78fa      	ldrb	r2, [r7, #3]
 800619a:	4611      	mov	r1, r2
 800619c:	6878      	ldr	r0, [r7, #4]
 800619e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80061a0:	2300      	movs	r3, #0
}
 80061a2:	4618      	mov	r0, r3
 80061a4:	3708      	adds	r7, #8
 80061a6:	46bd      	mov	sp, r7
 80061a8:	bd80      	pop	{r7, pc}

080061aa <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80061aa:	b580      	push	{r7, lr}
 80061ac:	b082      	sub	sp, #8
 80061ae:	af00      	add	r7, sp, #0
 80061b0:	6078      	str	r0, [r7, #4]
 80061b2:	460b      	mov	r3, r1
 80061b4:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d101      	bne.n	80061c4 <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 80061c0:	2303      	movs	r3, #3
 80061c2:	e014      	b.n	80061ee <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80061ca:	b2db      	uxtb	r3, r3
 80061cc:	2b03      	cmp	r3, #3
 80061ce:	d10d      	bne.n	80061ec <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80061d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d007      	beq.n	80061ec <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80061e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061e4:	78fa      	ldrb	r2, [r7, #3]
 80061e6:	4611      	mov	r1, r2
 80061e8:	6878      	ldr	r0, [r7, #4]
 80061ea:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80061ec:	2300      	movs	r3, #0
}
 80061ee:	4618      	mov	r0, r3
 80061f0:	3708      	adds	r7, #8
 80061f2:	46bd      	mov	sp, r7
 80061f4:	bd80      	pop	{r7, pc}

080061f6 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80061f6:	b480      	push	{r7}
 80061f8:	b083      	sub	sp, #12
 80061fa:	af00      	add	r7, sp, #0
 80061fc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80061fe:	2300      	movs	r3, #0
}
 8006200:	4618      	mov	r0, r3
 8006202:	370c      	adds	r7, #12
 8006204:	46bd      	mov	sp, r7
 8006206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800620a:	4770      	bx	lr

0800620c <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800620c:	b580      	push	{r7, lr}
 800620e:	b082      	sub	sp, #8
 8006210:	af00      	add	r7, sp, #0
 8006212:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	2201      	movs	r2, #1
 8006218:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006222:	2b00      	cmp	r3, #0
 8006224:	d009      	beq.n	800623a <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800622c:	685b      	ldr	r3, [r3, #4]
 800622e:	687a      	ldr	r2, [r7, #4]
 8006230:	6852      	ldr	r2, [r2, #4]
 8006232:	b2d2      	uxtb	r2, r2
 8006234:	4611      	mov	r1, r2
 8006236:	6878      	ldr	r0, [r7, #4]
 8006238:	4798      	blx	r3
  }

  return USBD_OK;
 800623a:	2300      	movs	r3, #0
}
 800623c:	4618      	mov	r0, r3
 800623e:	3708      	adds	r7, #8
 8006240:	46bd      	mov	sp, r7
 8006242:	bd80      	pop	{r7, pc}

08006244 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8006244:	b480      	push	{r7}
 8006246:	b087      	sub	sp, #28
 8006248:	af00      	add	r7, sp, #0
 800624a:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8006250:	697b      	ldr	r3, [r7, #20]
 8006252:	781b      	ldrb	r3, [r3, #0]
 8006254:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8006256:	697b      	ldr	r3, [r7, #20]
 8006258:	3301      	adds	r3, #1
 800625a:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800625c:	697b      	ldr	r3, [r7, #20]
 800625e:	781b      	ldrb	r3, [r3, #0]
 8006260:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8006262:	8a3b      	ldrh	r3, [r7, #16]
 8006264:	021b      	lsls	r3, r3, #8
 8006266:	b21a      	sxth	r2, r3
 8006268:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800626c:	4313      	orrs	r3, r2
 800626e:	b21b      	sxth	r3, r3
 8006270:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8006272:	89fb      	ldrh	r3, [r7, #14]
}
 8006274:	4618      	mov	r0, r3
 8006276:	371c      	adds	r7, #28
 8006278:	46bd      	mov	sp, r7
 800627a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800627e:	4770      	bx	lr

08006280 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006280:	b580      	push	{r7, lr}
 8006282:	b084      	sub	sp, #16
 8006284:	af00      	add	r7, sp, #0
 8006286:	6078      	str	r0, [r7, #4]
 8006288:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800628a:	2300      	movs	r3, #0
 800628c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800628e:	683b      	ldr	r3, [r7, #0]
 8006290:	781b      	ldrb	r3, [r3, #0]
 8006292:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006296:	2b40      	cmp	r3, #64	; 0x40
 8006298:	d005      	beq.n	80062a6 <USBD_StdDevReq+0x26>
 800629a:	2b40      	cmp	r3, #64	; 0x40
 800629c:	d853      	bhi.n	8006346 <USBD_StdDevReq+0xc6>
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d00b      	beq.n	80062ba <USBD_StdDevReq+0x3a>
 80062a2:	2b20      	cmp	r3, #32
 80062a4:	d14f      	bne.n	8006346 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80062ac:	689b      	ldr	r3, [r3, #8]
 80062ae:	6839      	ldr	r1, [r7, #0]
 80062b0:	6878      	ldr	r0, [r7, #4]
 80062b2:	4798      	blx	r3
 80062b4:	4603      	mov	r3, r0
 80062b6:	73fb      	strb	r3, [r7, #15]
      break;
 80062b8:	e04a      	b.n	8006350 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80062ba:	683b      	ldr	r3, [r7, #0]
 80062bc:	785b      	ldrb	r3, [r3, #1]
 80062be:	2b09      	cmp	r3, #9
 80062c0:	d83b      	bhi.n	800633a <USBD_StdDevReq+0xba>
 80062c2:	a201      	add	r2, pc, #4	; (adr r2, 80062c8 <USBD_StdDevReq+0x48>)
 80062c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062c8:	0800631d 	.word	0x0800631d
 80062cc:	08006331 	.word	0x08006331
 80062d0:	0800633b 	.word	0x0800633b
 80062d4:	08006327 	.word	0x08006327
 80062d8:	0800633b 	.word	0x0800633b
 80062dc:	080062fb 	.word	0x080062fb
 80062e0:	080062f1 	.word	0x080062f1
 80062e4:	0800633b 	.word	0x0800633b
 80062e8:	08006313 	.word	0x08006313
 80062ec:	08006305 	.word	0x08006305
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80062f0:	6839      	ldr	r1, [r7, #0]
 80062f2:	6878      	ldr	r0, [r7, #4]
 80062f4:	f000 f9de 	bl	80066b4 <USBD_GetDescriptor>
          break;
 80062f8:	e024      	b.n	8006344 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80062fa:	6839      	ldr	r1, [r7, #0]
 80062fc:	6878      	ldr	r0, [r7, #4]
 80062fe:	f000 fb43 	bl	8006988 <USBD_SetAddress>
          break;
 8006302:	e01f      	b.n	8006344 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8006304:	6839      	ldr	r1, [r7, #0]
 8006306:	6878      	ldr	r0, [r7, #4]
 8006308:	f000 fb82 	bl	8006a10 <USBD_SetConfig>
 800630c:	4603      	mov	r3, r0
 800630e:	73fb      	strb	r3, [r7, #15]
          break;
 8006310:	e018      	b.n	8006344 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8006312:	6839      	ldr	r1, [r7, #0]
 8006314:	6878      	ldr	r0, [r7, #4]
 8006316:	f000 fc21 	bl	8006b5c <USBD_GetConfig>
          break;
 800631a:	e013      	b.n	8006344 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800631c:	6839      	ldr	r1, [r7, #0]
 800631e:	6878      	ldr	r0, [r7, #4]
 8006320:	f000 fc52 	bl	8006bc8 <USBD_GetStatus>
          break;
 8006324:	e00e      	b.n	8006344 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8006326:	6839      	ldr	r1, [r7, #0]
 8006328:	6878      	ldr	r0, [r7, #4]
 800632a:	f000 fc81 	bl	8006c30 <USBD_SetFeature>
          break;
 800632e:	e009      	b.n	8006344 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8006330:	6839      	ldr	r1, [r7, #0]
 8006332:	6878      	ldr	r0, [r7, #4]
 8006334:	f000 fc90 	bl	8006c58 <USBD_ClrFeature>
          break;
 8006338:	e004      	b.n	8006344 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800633a:	6839      	ldr	r1, [r7, #0]
 800633c:	6878      	ldr	r0, [r7, #4]
 800633e:	f000 fce7 	bl	8006d10 <USBD_CtlError>
          break;
 8006342:	bf00      	nop
      }
      break;
 8006344:	e004      	b.n	8006350 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 8006346:	6839      	ldr	r1, [r7, #0]
 8006348:	6878      	ldr	r0, [r7, #4]
 800634a:	f000 fce1 	bl	8006d10 <USBD_CtlError>
      break;
 800634e:	bf00      	nop
  }

  return ret;
 8006350:	7bfb      	ldrb	r3, [r7, #15]
}
 8006352:	4618      	mov	r0, r3
 8006354:	3710      	adds	r7, #16
 8006356:	46bd      	mov	sp, r7
 8006358:	bd80      	pop	{r7, pc}
 800635a:	bf00      	nop

0800635c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800635c:	b580      	push	{r7, lr}
 800635e:	b084      	sub	sp, #16
 8006360:	af00      	add	r7, sp, #0
 8006362:	6078      	str	r0, [r7, #4]
 8006364:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006366:	2300      	movs	r3, #0
 8006368:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800636a:	683b      	ldr	r3, [r7, #0]
 800636c:	781b      	ldrb	r3, [r3, #0]
 800636e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006372:	2b40      	cmp	r3, #64	; 0x40
 8006374:	d005      	beq.n	8006382 <USBD_StdItfReq+0x26>
 8006376:	2b40      	cmp	r3, #64	; 0x40
 8006378:	d82f      	bhi.n	80063da <USBD_StdItfReq+0x7e>
 800637a:	2b00      	cmp	r3, #0
 800637c:	d001      	beq.n	8006382 <USBD_StdItfReq+0x26>
 800637e:	2b20      	cmp	r3, #32
 8006380:	d12b      	bne.n	80063da <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006388:	b2db      	uxtb	r3, r3
 800638a:	3b01      	subs	r3, #1
 800638c:	2b02      	cmp	r3, #2
 800638e:	d81d      	bhi.n	80063cc <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8006390:	683b      	ldr	r3, [r7, #0]
 8006392:	889b      	ldrh	r3, [r3, #4]
 8006394:	b2db      	uxtb	r3, r3
 8006396:	2b01      	cmp	r3, #1
 8006398:	d813      	bhi.n	80063c2 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80063a0:	689b      	ldr	r3, [r3, #8]
 80063a2:	6839      	ldr	r1, [r7, #0]
 80063a4:	6878      	ldr	r0, [r7, #4]
 80063a6:	4798      	blx	r3
 80063a8:	4603      	mov	r3, r0
 80063aa:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80063ac:	683b      	ldr	r3, [r7, #0]
 80063ae:	88db      	ldrh	r3, [r3, #6]
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d110      	bne.n	80063d6 <USBD_StdItfReq+0x7a>
 80063b4:	7bfb      	ldrb	r3, [r7, #15]
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d10d      	bne.n	80063d6 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 80063ba:	6878      	ldr	r0, [r7, #4]
 80063bc:	f000 fd56 	bl	8006e6c <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80063c0:	e009      	b.n	80063d6 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 80063c2:	6839      	ldr	r1, [r7, #0]
 80063c4:	6878      	ldr	r0, [r7, #4]
 80063c6:	f000 fca3 	bl	8006d10 <USBD_CtlError>
          break;
 80063ca:	e004      	b.n	80063d6 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 80063cc:	6839      	ldr	r1, [r7, #0]
 80063ce:	6878      	ldr	r0, [r7, #4]
 80063d0:	f000 fc9e 	bl	8006d10 <USBD_CtlError>
          break;
 80063d4:	e000      	b.n	80063d8 <USBD_StdItfReq+0x7c>
          break;
 80063d6:	bf00      	nop
      }
      break;
 80063d8:	e004      	b.n	80063e4 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 80063da:	6839      	ldr	r1, [r7, #0]
 80063dc:	6878      	ldr	r0, [r7, #4]
 80063de:	f000 fc97 	bl	8006d10 <USBD_CtlError>
      break;
 80063e2:	bf00      	nop
  }

  return ret;
 80063e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80063e6:	4618      	mov	r0, r3
 80063e8:	3710      	adds	r7, #16
 80063ea:	46bd      	mov	sp, r7
 80063ec:	bd80      	pop	{r7, pc}

080063ee <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80063ee:	b580      	push	{r7, lr}
 80063f0:	b084      	sub	sp, #16
 80063f2:	af00      	add	r7, sp, #0
 80063f4:	6078      	str	r0, [r7, #4]
 80063f6:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80063f8:	2300      	movs	r3, #0
 80063fa:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 80063fc:	683b      	ldr	r3, [r7, #0]
 80063fe:	889b      	ldrh	r3, [r3, #4]
 8006400:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006402:	683b      	ldr	r3, [r7, #0]
 8006404:	781b      	ldrb	r3, [r3, #0]
 8006406:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800640a:	2b40      	cmp	r3, #64	; 0x40
 800640c:	d007      	beq.n	800641e <USBD_StdEPReq+0x30>
 800640e:	2b40      	cmp	r3, #64	; 0x40
 8006410:	f200 8145 	bhi.w	800669e <USBD_StdEPReq+0x2b0>
 8006414:	2b00      	cmp	r3, #0
 8006416:	d00c      	beq.n	8006432 <USBD_StdEPReq+0x44>
 8006418:	2b20      	cmp	r3, #32
 800641a:	f040 8140 	bne.w	800669e <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006424:	689b      	ldr	r3, [r3, #8]
 8006426:	6839      	ldr	r1, [r7, #0]
 8006428:	6878      	ldr	r0, [r7, #4]
 800642a:	4798      	blx	r3
 800642c:	4603      	mov	r3, r0
 800642e:	73fb      	strb	r3, [r7, #15]
      break;
 8006430:	e13a      	b.n	80066a8 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006432:	683b      	ldr	r3, [r7, #0]
 8006434:	785b      	ldrb	r3, [r3, #1]
 8006436:	2b03      	cmp	r3, #3
 8006438:	d007      	beq.n	800644a <USBD_StdEPReq+0x5c>
 800643a:	2b03      	cmp	r3, #3
 800643c:	f300 8129 	bgt.w	8006692 <USBD_StdEPReq+0x2a4>
 8006440:	2b00      	cmp	r3, #0
 8006442:	d07f      	beq.n	8006544 <USBD_StdEPReq+0x156>
 8006444:	2b01      	cmp	r3, #1
 8006446:	d03c      	beq.n	80064c2 <USBD_StdEPReq+0xd4>
 8006448:	e123      	b.n	8006692 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006450:	b2db      	uxtb	r3, r3
 8006452:	2b02      	cmp	r3, #2
 8006454:	d002      	beq.n	800645c <USBD_StdEPReq+0x6e>
 8006456:	2b03      	cmp	r3, #3
 8006458:	d016      	beq.n	8006488 <USBD_StdEPReq+0x9a>
 800645a:	e02c      	b.n	80064b6 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800645c:	7bbb      	ldrb	r3, [r7, #14]
 800645e:	2b00      	cmp	r3, #0
 8006460:	d00d      	beq.n	800647e <USBD_StdEPReq+0x90>
 8006462:	7bbb      	ldrb	r3, [r7, #14]
 8006464:	2b80      	cmp	r3, #128	; 0x80
 8006466:	d00a      	beq.n	800647e <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006468:	7bbb      	ldrb	r3, [r7, #14]
 800646a:	4619      	mov	r1, r3
 800646c:	6878      	ldr	r0, [r7, #4]
 800646e:	f001 f8ce 	bl	800760e <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8006472:	2180      	movs	r1, #128	; 0x80
 8006474:	6878      	ldr	r0, [r7, #4]
 8006476:	f001 f8ca 	bl	800760e <USBD_LL_StallEP>
 800647a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800647c:	e020      	b.n	80064c0 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 800647e:	6839      	ldr	r1, [r7, #0]
 8006480:	6878      	ldr	r0, [r7, #4]
 8006482:	f000 fc45 	bl	8006d10 <USBD_CtlError>
              break;
 8006486:	e01b      	b.n	80064c0 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006488:	683b      	ldr	r3, [r7, #0]
 800648a:	885b      	ldrh	r3, [r3, #2]
 800648c:	2b00      	cmp	r3, #0
 800648e:	d10e      	bne.n	80064ae <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8006490:	7bbb      	ldrb	r3, [r7, #14]
 8006492:	2b00      	cmp	r3, #0
 8006494:	d00b      	beq.n	80064ae <USBD_StdEPReq+0xc0>
 8006496:	7bbb      	ldrb	r3, [r7, #14]
 8006498:	2b80      	cmp	r3, #128	; 0x80
 800649a:	d008      	beq.n	80064ae <USBD_StdEPReq+0xc0>
 800649c:	683b      	ldr	r3, [r7, #0]
 800649e:	88db      	ldrh	r3, [r3, #6]
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d104      	bne.n	80064ae <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80064a4:	7bbb      	ldrb	r3, [r7, #14]
 80064a6:	4619      	mov	r1, r3
 80064a8:	6878      	ldr	r0, [r7, #4]
 80064aa:	f001 f8b0 	bl	800760e <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80064ae:	6878      	ldr	r0, [r7, #4]
 80064b0:	f000 fcdc 	bl	8006e6c <USBD_CtlSendStatus>

              break;
 80064b4:	e004      	b.n	80064c0 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 80064b6:	6839      	ldr	r1, [r7, #0]
 80064b8:	6878      	ldr	r0, [r7, #4]
 80064ba:	f000 fc29 	bl	8006d10 <USBD_CtlError>
              break;
 80064be:	bf00      	nop
          }
          break;
 80064c0:	e0ec      	b.n	800669c <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80064c8:	b2db      	uxtb	r3, r3
 80064ca:	2b02      	cmp	r3, #2
 80064cc:	d002      	beq.n	80064d4 <USBD_StdEPReq+0xe6>
 80064ce:	2b03      	cmp	r3, #3
 80064d0:	d016      	beq.n	8006500 <USBD_StdEPReq+0x112>
 80064d2:	e030      	b.n	8006536 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80064d4:	7bbb      	ldrb	r3, [r7, #14]
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d00d      	beq.n	80064f6 <USBD_StdEPReq+0x108>
 80064da:	7bbb      	ldrb	r3, [r7, #14]
 80064dc:	2b80      	cmp	r3, #128	; 0x80
 80064de:	d00a      	beq.n	80064f6 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80064e0:	7bbb      	ldrb	r3, [r7, #14]
 80064e2:	4619      	mov	r1, r3
 80064e4:	6878      	ldr	r0, [r7, #4]
 80064e6:	f001 f892 	bl	800760e <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80064ea:	2180      	movs	r1, #128	; 0x80
 80064ec:	6878      	ldr	r0, [r7, #4]
 80064ee:	f001 f88e 	bl	800760e <USBD_LL_StallEP>
 80064f2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80064f4:	e025      	b.n	8006542 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 80064f6:	6839      	ldr	r1, [r7, #0]
 80064f8:	6878      	ldr	r0, [r7, #4]
 80064fa:	f000 fc09 	bl	8006d10 <USBD_CtlError>
              break;
 80064fe:	e020      	b.n	8006542 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006500:	683b      	ldr	r3, [r7, #0]
 8006502:	885b      	ldrh	r3, [r3, #2]
 8006504:	2b00      	cmp	r3, #0
 8006506:	d11b      	bne.n	8006540 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8006508:	7bbb      	ldrb	r3, [r7, #14]
 800650a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800650e:	2b00      	cmp	r3, #0
 8006510:	d004      	beq.n	800651c <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8006512:	7bbb      	ldrb	r3, [r7, #14]
 8006514:	4619      	mov	r1, r3
 8006516:	6878      	ldr	r0, [r7, #4]
 8006518:	f001 f898 	bl	800764c <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800651c:	6878      	ldr	r0, [r7, #4]
 800651e:	f000 fca5 	bl	8006e6c <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006528:	689b      	ldr	r3, [r3, #8]
 800652a:	6839      	ldr	r1, [r7, #0]
 800652c:	6878      	ldr	r0, [r7, #4]
 800652e:	4798      	blx	r3
 8006530:	4603      	mov	r3, r0
 8006532:	73fb      	strb	r3, [r7, #15]
              }
              break;
 8006534:	e004      	b.n	8006540 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 8006536:	6839      	ldr	r1, [r7, #0]
 8006538:	6878      	ldr	r0, [r7, #4]
 800653a:	f000 fbe9 	bl	8006d10 <USBD_CtlError>
              break;
 800653e:	e000      	b.n	8006542 <USBD_StdEPReq+0x154>
              break;
 8006540:	bf00      	nop
          }
          break;
 8006542:	e0ab      	b.n	800669c <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800654a:	b2db      	uxtb	r3, r3
 800654c:	2b02      	cmp	r3, #2
 800654e:	d002      	beq.n	8006556 <USBD_StdEPReq+0x168>
 8006550:	2b03      	cmp	r3, #3
 8006552:	d032      	beq.n	80065ba <USBD_StdEPReq+0x1cc>
 8006554:	e097      	b.n	8006686 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006556:	7bbb      	ldrb	r3, [r7, #14]
 8006558:	2b00      	cmp	r3, #0
 800655a:	d007      	beq.n	800656c <USBD_StdEPReq+0x17e>
 800655c:	7bbb      	ldrb	r3, [r7, #14]
 800655e:	2b80      	cmp	r3, #128	; 0x80
 8006560:	d004      	beq.n	800656c <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 8006562:	6839      	ldr	r1, [r7, #0]
 8006564:	6878      	ldr	r0, [r7, #4]
 8006566:	f000 fbd3 	bl	8006d10 <USBD_CtlError>
                break;
 800656a:	e091      	b.n	8006690 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800656c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006570:	2b00      	cmp	r3, #0
 8006572:	da0b      	bge.n	800658c <USBD_StdEPReq+0x19e>
 8006574:	7bbb      	ldrb	r3, [r7, #14]
 8006576:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800657a:	4613      	mov	r3, r2
 800657c:	009b      	lsls	r3, r3, #2
 800657e:	4413      	add	r3, r2
 8006580:	009b      	lsls	r3, r3, #2
 8006582:	3310      	adds	r3, #16
 8006584:	687a      	ldr	r2, [r7, #4]
 8006586:	4413      	add	r3, r2
 8006588:	3304      	adds	r3, #4
 800658a:	e00b      	b.n	80065a4 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800658c:	7bbb      	ldrb	r3, [r7, #14]
 800658e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006592:	4613      	mov	r3, r2
 8006594:	009b      	lsls	r3, r3, #2
 8006596:	4413      	add	r3, r2
 8006598:	009b      	lsls	r3, r3, #2
 800659a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800659e:	687a      	ldr	r2, [r7, #4]
 80065a0:	4413      	add	r3, r2
 80065a2:	3304      	adds	r3, #4
 80065a4:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80065a6:	68bb      	ldr	r3, [r7, #8]
 80065a8:	2200      	movs	r2, #0
 80065aa:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80065ac:	68bb      	ldr	r3, [r7, #8]
 80065ae:	2202      	movs	r2, #2
 80065b0:	4619      	mov	r1, r3
 80065b2:	6878      	ldr	r0, [r7, #4]
 80065b4:	f000 fc1d 	bl	8006df2 <USBD_CtlSendData>
              break;
 80065b8:	e06a      	b.n	8006690 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80065ba:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80065be:	2b00      	cmp	r3, #0
 80065c0:	da11      	bge.n	80065e6 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80065c2:	7bbb      	ldrb	r3, [r7, #14]
 80065c4:	f003 020f 	and.w	r2, r3, #15
 80065c8:	6879      	ldr	r1, [r7, #4]
 80065ca:	4613      	mov	r3, r2
 80065cc:	009b      	lsls	r3, r3, #2
 80065ce:	4413      	add	r3, r2
 80065d0:	009b      	lsls	r3, r3, #2
 80065d2:	440b      	add	r3, r1
 80065d4:	3324      	adds	r3, #36	; 0x24
 80065d6:	881b      	ldrh	r3, [r3, #0]
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d117      	bne.n	800660c <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 80065dc:	6839      	ldr	r1, [r7, #0]
 80065de:	6878      	ldr	r0, [r7, #4]
 80065e0:	f000 fb96 	bl	8006d10 <USBD_CtlError>
                  break;
 80065e4:	e054      	b.n	8006690 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80065e6:	7bbb      	ldrb	r3, [r7, #14]
 80065e8:	f003 020f 	and.w	r2, r3, #15
 80065ec:	6879      	ldr	r1, [r7, #4]
 80065ee:	4613      	mov	r3, r2
 80065f0:	009b      	lsls	r3, r3, #2
 80065f2:	4413      	add	r3, r2
 80065f4:	009b      	lsls	r3, r3, #2
 80065f6:	440b      	add	r3, r1
 80065f8:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80065fc:	881b      	ldrh	r3, [r3, #0]
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d104      	bne.n	800660c <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8006602:	6839      	ldr	r1, [r7, #0]
 8006604:	6878      	ldr	r0, [r7, #4]
 8006606:	f000 fb83 	bl	8006d10 <USBD_CtlError>
                  break;
 800660a:	e041      	b.n	8006690 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800660c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006610:	2b00      	cmp	r3, #0
 8006612:	da0b      	bge.n	800662c <USBD_StdEPReq+0x23e>
 8006614:	7bbb      	ldrb	r3, [r7, #14]
 8006616:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800661a:	4613      	mov	r3, r2
 800661c:	009b      	lsls	r3, r3, #2
 800661e:	4413      	add	r3, r2
 8006620:	009b      	lsls	r3, r3, #2
 8006622:	3310      	adds	r3, #16
 8006624:	687a      	ldr	r2, [r7, #4]
 8006626:	4413      	add	r3, r2
 8006628:	3304      	adds	r3, #4
 800662a:	e00b      	b.n	8006644 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800662c:	7bbb      	ldrb	r3, [r7, #14]
 800662e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006632:	4613      	mov	r3, r2
 8006634:	009b      	lsls	r3, r3, #2
 8006636:	4413      	add	r3, r2
 8006638:	009b      	lsls	r3, r3, #2
 800663a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800663e:	687a      	ldr	r2, [r7, #4]
 8006640:	4413      	add	r3, r2
 8006642:	3304      	adds	r3, #4
 8006644:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8006646:	7bbb      	ldrb	r3, [r7, #14]
 8006648:	2b00      	cmp	r3, #0
 800664a:	d002      	beq.n	8006652 <USBD_StdEPReq+0x264>
 800664c:	7bbb      	ldrb	r3, [r7, #14]
 800664e:	2b80      	cmp	r3, #128	; 0x80
 8006650:	d103      	bne.n	800665a <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 8006652:	68bb      	ldr	r3, [r7, #8]
 8006654:	2200      	movs	r2, #0
 8006656:	601a      	str	r2, [r3, #0]
 8006658:	e00e      	b.n	8006678 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800665a:	7bbb      	ldrb	r3, [r7, #14]
 800665c:	4619      	mov	r1, r3
 800665e:	6878      	ldr	r0, [r7, #4]
 8006660:	f001 f813 	bl	800768a <USBD_LL_IsStallEP>
 8006664:	4603      	mov	r3, r0
 8006666:	2b00      	cmp	r3, #0
 8006668:	d003      	beq.n	8006672 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 800666a:	68bb      	ldr	r3, [r7, #8]
 800666c:	2201      	movs	r2, #1
 800666e:	601a      	str	r2, [r3, #0]
 8006670:	e002      	b.n	8006678 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 8006672:	68bb      	ldr	r3, [r7, #8]
 8006674:	2200      	movs	r2, #0
 8006676:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006678:	68bb      	ldr	r3, [r7, #8]
 800667a:	2202      	movs	r2, #2
 800667c:	4619      	mov	r1, r3
 800667e:	6878      	ldr	r0, [r7, #4]
 8006680:	f000 fbb7 	bl	8006df2 <USBD_CtlSendData>
              break;
 8006684:	e004      	b.n	8006690 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 8006686:	6839      	ldr	r1, [r7, #0]
 8006688:	6878      	ldr	r0, [r7, #4]
 800668a:	f000 fb41 	bl	8006d10 <USBD_CtlError>
              break;
 800668e:	bf00      	nop
          }
          break;
 8006690:	e004      	b.n	800669c <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 8006692:	6839      	ldr	r1, [r7, #0]
 8006694:	6878      	ldr	r0, [r7, #4]
 8006696:	f000 fb3b 	bl	8006d10 <USBD_CtlError>
          break;
 800669a:	bf00      	nop
      }
      break;
 800669c:	e004      	b.n	80066a8 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 800669e:	6839      	ldr	r1, [r7, #0]
 80066a0:	6878      	ldr	r0, [r7, #4]
 80066a2:	f000 fb35 	bl	8006d10 <USBD_CtlError>
      break;
 80066a6:	bf00      	nop
  }

  return ret;
 80066a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80066aa:	4618      	mov	r0, r3
 80066ac:	3710      	adds	r7, #16
 80066ae:	46bd      	mov	sp, r7
 80066b0:	bd80      	pop	{r7, pc}
	...

080066b4 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80066b4:	b580      	push	{r7, lr}
 80066b6:	b084      	sub	sp, #16
 80066b8:	af00      	add	r7, sp, #0
 80066ba:	6078      	str	r0, [r7, #4]
 80066bc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80066be:	2300      	movs	r3, #0
 80066c0:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80066c2:	2300      	movs	r3, #0
 80066c4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80066c6:	2300      	movs	r3, #0
 80066c8:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80066ca:	683b      	ldr	r3, [r7, #0]
 80066cc:	885b      	ldrh	r3, [r3, #2]
 80066ce:	0a1b      	lsrs	r3, r3, #8
 80066d0:	b29b      	uxth	r3, r3
 80066d2:	3b01      	subs	r3, #1
 80066d4:	2b06      	cmp	r3, #6
 80066d6:	f200 8128 	bhi.w	800692a <USBD_GetDescriptor+0x276>
 80066da:	a201      	add	r2, pc, #4	; (adr r2, 80066e0 <USBD_GetDescriptor+0x2c>)
 80066dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066e0:	080066fd 	.word	0x080066fd
 80066e4:	08006715 	.word	0x08006715
 80066e8:	08006755 	.word	0x08006755
 80066ec:	0800692b 	.word	0x0800692b
 80066f0:	0800692b 	.word	0x0800692b
 80066f4:	080068cb 	.word	0x080068cb
 80066f8:	080068f7 	.word	0x080068f7
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	687a      	ldr	r2, [r7, #4]
 8006706:	7c12      	ldrb	r2, [r2, #16]
 8006708:	f107 0108 	add.w	r1, r7, #8
 800670c:	4610      	mov	r0, r2
 800670e:	4798      	blx	r3
 8006710:	60f8      	str	r0, [r7, #12]
      break;
 8006712:	e112      	b.n	800693a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	7c1b      	ldrb	r3, [r3, #16]
 8006718:	2b00      	cmp	r3, #0
 800671a:	d10d      	bne.n	8006738 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006722:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006724:	f107 0208 	add.w	r2, r7, #8
 8006728:	4610      	mov	r0, r2
 800672a:	4798      	blx	r3
 800672c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	3301      	adds	r3, #1
 8006732:	2202      	movs	r2, #2
 8006734:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8006736:	e100      	b.n	800693a <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800673e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006740:	f107 0208 	add.w	r2, r7, #8
 8006744:	4610      	mov	r0, r2
 8006746:	4798      	blx	r3
 8006748:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	3301      	adds	r3, #1
 800674e:	2202      	movs	r2, #2
 8006750:	701a      	strb	r2, [r3, #0]
      break;
 8006752:	e0f2      	b.n	800693a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8006754:	683b      	ldr	r3, [r7, #0]
 8006756:	885b      	ldrh	r3, [r3, #2]
 8006758:	b2db      	uxtb	r3, r3
 800675a:	2b05      	cmp	r3, #5
 800675c:	f200 80ac 	bhi.w	80068b8 <USBD_GetDescriptor+0x204>
 8006760:	a201      	add	r2, pc, #4	; (adr r2, 8006768 <USBD_GetDescriptor+0xb4>)
 8006762:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006766:	bf00      	nop
 8006768:	08006781 	.word	0x08006781
 800676c:	080067b5 	.word	0x080067b5
 8006770:	080067e9 	.word	0x080067e9
 8006774:	0800681d 	.word	0x0800681d
 8006778:	08006851 	.word	0x08006851
 800677c:	08006885 	.word	0x08006885
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006786:	685b      	ldr	r3, [r3, #4]
 8006788:	2b00      	cmp	r3, #0
 800678a:	d00b      	beq.n	80067a4 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006792:	685b      	ldr	r3, [r3, #4]
 8006794:	687a      	ldr	r2, [r7, #4]
 8006796:	7c12      	ldrb	r2, [r2, #16]
 8006798:	f107 0108 	add.w	r1, r7, #8
 800679c:	4610      	mov	r0, r2
 800679e:	4798      	blx	r3
 80067a0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80067a2:	e091      	b.n	80068c8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80067a4:	6839      	ldr	r1, [r7, #0]
 80067a6:	6878      	ldr	r0, [r7, #4]
 80067a8:	f000 fab2 	bl	8006d10 <USBD_CtlError>
            err++;
 80067ac:	7afb      	ldrb	r3, [r7, #11]
 80067ae:	3301      	adds	r3, #1
 80067b0:	72fb      	strb	r3, [r7, #11]
          break;
 80067b2:	e089      	b.n	80068c8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80067ba:	689b      	ldr	r3, [r3, #8]
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d00b      	beq.n	80067d8 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80067c6:	689b      	ldr	r3, [r3, #8]
 80067c8:	687a      	ldr	r2, [r7, #4]
 80067ca:	7c12      	ldrb	r2, [r2, #16]
 80067cc:	f107 0108 	add.w	r1, r7, #8
 80067d0:	4610      	mov	r0, r2
 80067d2:	4798      	blx	r3
 80067d4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80067d6:	e077      	b.n	80068c8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80067d8:	6839      	ldr	r1, [r7, #0]
 80067da:	6878      	ldr	r0, [r7, #4]
 80067dc:	f000 fa98 	bl	8006d10 <USBD_CtlError>
            err++;
 80067e0:	7afb      	ldrb	r3, [r7, #11]
 80067e2:	3301      	adds	r3, #1
 80067e4:	72fb      	strb	r3, [r7, #11]
          break;
 80067e6:	e06f      	b.n	80068c8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80067ee:	68db      	ldr	r3, [r3, #12]
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d00b      	beq.n	800680c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80067fa:	68db      	ldr	r3, [r3, #12]
 80067fc:	687a      	ldr	r2, [r7, #4]
 80067fe:	7c12      	ldrb	r2, [r2, #16]
 8006800:	f107 0108 	add.w	r1, r7, #8
 8006804:	4610      	mov	r0, r2
 8006806:	4798      	blx	r3
 8006808:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800680a:	e05d      	b.n	80068c8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800680c:	6839      	ldr	r1, [r7, #0]
 800680e:	6878      	ldr	r0, [r7, #4]
 8006810:	f000 fa7e 	bl	8006d10 <USBD_CtlError>
            err++;
 8006814:	7afb      	ldrb	r3, [r7, #11]
 8006816:	3301      	adds	r3, #1
 8006818:	72fb      	strb	r3, [r7, #11]
          break;
 800681a:	e055      	b.n	80068c8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006822:	691b      	ldr	r3, [r3, #16]
 8006824:	2b00      	cmp	r3, #0
 8006826:	d00b      	beq.n	8006840 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800682e:	691b      	ldr	r3, [r3, #16]
 8006830:	687a      	ldr	r2, [r7, #4]
 8006832:	7c12      	ldrb	r2, [r2, #16]
 8006834:	f107 0108 	add.w	r1, r7, #8
 8006838:	4610      	mov	r0, r2
 800683a:	4798      	blx	r3
 800683c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800683e:	e043      	b.n	80068c8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006840:	6839      	ldr	r1, [r7, #0]
 8006842:	6878      	ldr	r0, [r7, #4]
 8006844:	f000 fa64 	bl	8006d10 <USBD_CtlError>
            err++;
 8006848:	7afb      	ldrb	r3, [r7, #11]
 800684a:	3301      	adds	r3, #1
 800684c:	72fb      	strb	r3, [r7, #11]
          break;
 800684e:	e03b      	b.n	80068c8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006856:	695b      	ldr	r3, [r3, #20]
 8006858:	2b00      	cmp	r3, #0
 800685a:	d00b      	beq.n	8006874 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006862:	695b      	ldr	r3, [r3, #20]
 8006864:	687a      	ldr	r2, [r7, #4]
 8006866:	7c12      	ldrb	r2, [r2, #16]
 8006868:	f107 0108 	add.w	r1, r7, #8
 800686c:	4610      	mov	r0, r2
 800686e:	4798      	blx	r3
 8006870:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006872:	e029      	b.n	80068c8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006874:	6839      	ldr	r1, [r7, #0]
 8006876:	6878      	ldr	r0, [r7, #4]
 8006878:	f000 fa4a 	bl	8006d10 <USBD_CtlError>
            err++;
 800687c:	7afb      	ldrb	r3, [r7, #11]
 800687e:	3301      	adds	r3, #1
 8006880:	72fb      	strb	r3, [r7, #11]
          break;
 8006882:	e021      	b.n	80068c8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800688a:	699b      	ldr	r3, [r3, #24]
 800688c:	2b00      	cmp	r3, #0
 800688e:	d00b      	beq.n	80068a8 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006896:	699b      	ldr	r3, [r3, #24]
 8006898:	687a      	ldr	r2, [r7, #4]
 800689a:	7c12      	ldrb	r2, [r2, #16]
 800689c:	f107 0108 	add.w	r1, r7, #8
 80068a0:	4610      	mov	r0, r2
 80068a2:	4798      	blx	r3
 80068a4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80068a6:	e00f      	b.n	80068c8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80068a8:	6839      	ldr	r1, [r7, #0]
 80068aa:	6878      	ldr	r0, [r7, #4]
 80068ac:	f000 fa30 	bl	8006d10 <USBD_CtlError>
            err++;
 80068b0:	7afb      	ldrb	r3, [r7, #11]
 80068b2:	3301      	adds	r3, #1
 80068b4:	72fb      	strb	r3, [r7, #11]
          break;
 80068b6:	e007      	b.n	80068c8 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 80068b8:	6839      	ldr	r1, [r7, #0]
 80068ba:	6878      	ldr	r0, [r7, #4]
 80068bc:	f000 fa28 	bl	8006d10 <USBD_CtlError>
          err++;
 80068c0:	7afb      	ldrb	r3, [r7, #11]
 80068c2:	3301      	adds	r3, #1
 80068c4:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 80068c6:	bf00      	nop
      }
      break;
 80068c8:	e037      	b.n	800693a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	7c1b      	ldrb	r3, [r3, #16]
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d109      	bne.n	80068e6 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80068d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80068da:	f107 0208 	add.w	r2, r7, #8
 80068de:	4610      	mov	r0, r2
 80068e0:	4798      	blx	r3
 80068e2:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80068e4:	e029      	b.n	800693a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80068e6:	6839      	ldr	r1, [r7, #0]
 80068e8:	6878      	ldr	r0, [r7, #4]
 80068ea:	f000 fa11 	bl	8006d10 <USBD_CtlError>
        err++;
 80068ee:	7afb      	ldrb	r3, [r7, #11]
 80068f0:	3301      	adds	r3, #1
 80068f2:	72fb      	strb	r3, [r7, #11]
      break;
 80068f4:	e021      	b.n	800693a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	7c1b      	ldrb	r3, [r3, #16]
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d10d      	bne.n	800691a <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006906:	f107 0208 	add.w	r2, r7, #8
 800690a:	4610      	mov	r0, r2
 800690c:	4798      	blx	r3
 800690e:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	3301      	adds	r3, #1
 8006914:	2207      	movs	r2, #7
 8006916:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006918:	e00f      	b.n	800693a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800691a:	6839      	ldr	r1, [r7, #0]
 800691c:	6878      	ldr	r0, [r7, #4]
 800691e:	f000 f9f7 	bl	8006d10 <USBD_CtlError>
        err++;
 8006922:	7afb      	ldrb	r3, [r7, #11]
 8006924:	3301      	adds	r3, #1
 8006926:	72fb      	strb	r3, [r7, #11]
      break;
 8006928:	e007      	b.n	800693a <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800692a:	6839      	ldr	r1, [r7, #0]
 800692c:	6878      	ldr	r0, [r7, #4]
 800692e:	f000 f9ef 	bl	8006d10 <USBD_CtlError>
      err++;
 8006932:	7afb      	ldrb	r3, [r7, #11]
 8006934:	3301      	adds	r3, #1
 8006936:	72fb      	strb	r3, [r7, #11]
      break;
 8006938:	bf00      	nop
  }

  if (err != 0U)
 800693a:	7afb      	ldrb	r3, [r7, #11]
 800693c:	2b00      	cmp	r3, #0
 800693e:	d11e      	bne.n	800697e <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8006940:	683b      	ldr	r3, [r7, #0]
 8006942:	88db      	ldrh	r3, [r3, #6]
 8006944:	2b00      	cmp	r3, #0
 8006946:	d016      	beq.n	8006976 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8006948:	893b      	ldrh	r3, [r7, #8]
 800694a:	2b00      	cmp	r3, #0
 800694c:	d00e      	beq.n	800696c <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800694e:	683b      	ldr	r3, [r7, #0]
 8006950:	88da      	ldrh	r2, [r3, #6]
 8006952:	893b      	ldrh	r3, [r7, #8]
 8006954:	4293      	cmp	r3, r2
 8006956:	bf28      	it	cs
 8006958:	4613      	movcs	r3, r2
 800695a:	b29b      	uxth	r3, r3
 800695c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800695e:	893b      	ldrh	r3, [r7, #8]
 8006960:	461a      	mov	r2, r3
 8006962:	68f9      	ldr	r1, [r7, #12]
 8006964:	6878      	ldr	r0, [r7, #4]
 8006966:	f000 fa44 	bl	8006df2 <USBD_CtlSendData>
 800696a:	e009      	b.n	8006980 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800696c:	6839      	ldr	r1, [r7, #0]
 800696e:	6878      	ldr	r0, [r7, #4]
 8006970:	f000 f9ce 	bl	8006d10 <USBD_CtlError>
 8006974:	e004      	b.n	8006980 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8006976:	6878      	ldr	r0, [r7, #4]
 8006978:	f000 fa78 	bl	8006e6c <USBD_CtlSendStatus>
 800697c:	e000      	b.n	8006980 <USBD_GetDescriptor+0x2cc>
    return;
 800697e:	bf00      	nop
  }
}
 8006980:	3710      	adds	r7, #16
 8006982:	46bd      	mov	sp, r7
 8006984:	bd80      	pop	{r7, pc}
 8006986:	bf00      	nop

08006988 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006988:	b580      	push	{r7, lr}
 800698a:	b084      	sub	sp, #16
 800698c:	af00      	add	r7, sp, #0
 800698e:	6078      	str	r0, [r7, #4]
 8006990:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8006992:	683b      	ldr	r3, [r7, #0]
 8006994:	889b      	ldrh	r3, [r3, #4]
 8006996:	2b00      	cmp	r3, #0
 8006998:	d131      	bne.n	80069fe <USBD_SetAddress+0x76>
 800699a:	683b      	ldr	r3, [r7, #0]
 800699c:	88db      	ldrh	r3, [r3, #6]
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d12d      	bne.n	80069fe <USBD_SetAddress+0x76>
 80069a2:	683b      	ldr	r3, [r7, #0]
 80069a4:	885b      	ldrh	r3, [r3, #2]
 80069a6:	2b7f      	cmp	r3, #127	; 0x7f
 80069a8:	d829      	bhi.n	80069fe <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80069aa:	683b      	ldr	r3, [r7, #0]
 80069ac:	885b      	ldrh	r3, [r3, #2]
 80069ae:	b2db      	uxtb	r3, r3
 80069b0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80069b4:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80069bc:	b2db      	uxtb	r3, r3
 80069be:	2b03      	cmp	r3, #3
 80069c0:	d104      	bne.n	80069cc <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80069c2:	6839      	ldr	r1, [r7, #0]
 80069c4:	6878      	ldr	r0, [r7, #4]
 80069c6:	f000 f9a3 	bl	8006d10 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80069ca:	e01d      	b.n	8006a08 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	7bfa      	ldrb	r2, [r7, #15]
 80069d0:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80069d4:	7bfb      	ldrb	r3, [r7, #15]
 80069d6:	4619      	mov	r1, r3
 80069d8:	6878      	ldr	r0, [r7, #4]
 80069da:	f000 fe82 	bl	80076e2 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80069de:	6878      	ldr	r0, [r7, #4]
 80069e0:	f000 fa44 	bl	8006e6c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80069e4:	7bfb      	ldrb	r3, [r7, #15]
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d004      	beq.n	80069f4 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	2202      	movs	r2, #2
 80069ee:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80069f2:	e009      	b.n	8006a08 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	2201      	movs	r2, #1
 80069f8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80069fc:	e004      	b.n	8006a08 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80069fe:	6839      	ldr	r1, [r7, #0]
 8006a00:	6878      	ldr	r0, [r7, #4]
 8006a02:	f000 f985 	bl	8006d10 <USBD_CtlError>
  }
}
 8006a06:	bf00      	nop
 8006a08:	bf00      	nop
 8006a0a:	3710      	adds	r7, #16
 8006a0c:	46bd      	mov	sp, r7
 8006a0e:	bd80      	pop	{r7, pc}

08006a10 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006a10:	b580      	push	{r7, lr}
 8006a12:	b084      	sub	sp, #16
 8006a14:	af00      	add	r7, sp, #0
 8006a16:	6078      	str	r0, [r7, #4]
 8006a18:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006a1a:	2300      	movs	r3, #0
 8006a1c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8006a1e:	683b      	ldr	r3, [r7, #0]
 8006a20:	885b      	ldrh	r3, [r3, #2]
 8006a22:	b2da      	uxtb	r2, r3
 8006a24:	4b4c      	ldr	r3, [pc, #304]	; (8006b58 <USBD_SetConfig+0x148>)
 8006a26:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8006a28:	4b4b      	ldr	r3, [pc, #300]	; (8006b58 <USBD_SetConfig+0x148>)
 8006a2a:	781b      	ldrb	r3, [r3, #0]
 8006a2c:	2b01      	cmp	r3, #1
 8006a2e:	d905      	bls.n	8006a3c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8006a30:	6839      	ldr	r1, [r7, #0]
 8006a32:	6878      	ldr	r0, [r7, #4]
 8006a34:	f000 f96c 	bl	8006d10 <USBD_CtlError>
    return USBD_FAIL;
 8006a38:	2303      	movs	r3, #3
 8006a3a:	e088      	b.n	8006b4e <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006a42:	b2db      	uxtb	r3, r3
 8006a44:	2b02      	cmp	r3, #2
 8006a46:	d002      	beq.n	8006a4e <USBD_SetConfig+0x3e>
 8006a48:	2b03      	cmp	r3, #3
 8006a4a:	d025      	beq.n	8006a98 <USBD_SetConfig+0x88>
 8006a4c:	e071      	b.n	8006b32 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8006a4e:	4b42      	ldr	r3, [pc, #264]	; (8006b58 <USBD_SetConfig+0x148>)
 8006a50:	781b      	ldrb	r3, [r3, #0]
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d01c      	beq.n	8006a90 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 8006a56:	4b40      	ldr	r3, [pc, #256]	; (8006b58 <USBD_SetConfig+0x148>)
 8006a58:	781b      	ldrb	r3, [r3, #0]
 8006a5a:	461a      	mov	r2, r3
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8006a60:	4b3d      	ldr	r3, [pc, #244]	; (8006b58 <USBD_SetConfig+0x148>)
 8006a62:	781b      	ldrb	r3, [r3, #0]
 8006a64:	4619      	mov	r1, r3
 8006a66:	6878      	ldr	r0, [r7, #4]
 8006a68:	f7ff f949 	bl	8005cfe <USBD_SetClassConfig>
 8006a6c:	4603      	mov	r3, r0
 8006a6e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8006a70:	7bfb      	ldrb	r3, [r7, #15]
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d004      	beq.n	8006a80 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 8006a76:	6839      	ldr	r1, [r7, #0]
 8006a78:	6878      	ldr	r0, [r7, #4]
 8006a7a:	f000 f949 	bl	8006d10 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8006a7e:	e065      	b.n	8006b4c <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8006a80:	6878      	ldr	r0, [r7, #4]
 8006a82:	f000 f9f3 	bl	8006e6c <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	2203      	movs	r2, #3
 8006a8a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8006a8e:	e05d      	b.n	8006b4c <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8006a90:	6878      	ldr	r0, [r7, #4]
 8006a92:	f000 f9eb 	bl	8006e6c <USBD_CtlSendStatus>
      break;
 8006a96:	e059      	b.n	8006b4c <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8006a98:	4b2f      	ldr	r3, [pc, #188]	; (8006b58 <USBD_SetConfig+0x148>)
 8006a9a:	781b      	ldrb	r3, [r3, #0]
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d112      	bne.n	8006ac6 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	2202      	movs	r2, #2
 8006aa4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8006aa8:	4b2b      	ldr	r3, [pc, #172]	; (8006b58 <USBD_SetConfig+0x148>)
 8006aaa:	781b      	ldrb	r3, [r3, #0]
 8006aac:	461a      	mov	r2, r3
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006ab2:	4b29      	ldr	r3, [pc, #164]	; (8006b58 <USBD_SetConfig+0x148>)
 8006ab4:	781b      	ldrb	r3, [r3, #0]
 8006ab6:	4619      	mov	r1, r3
 8006ab8:	6878      	ldr	r0, [r7, #4]
 8006aba:	f7ff f93c 	bl	8005d36 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8006abe:	6878      	ldr	r0, [r7, #4]
 8006ac0:	f000 f9d4 	bl	8006e6c <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8006ac4:	e042      	b.n	8006b4c <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 8006ac6:	4b24      	ldr	r3, [pc, #144]	; (8006b58 <USBD_SetConfig+0x148>)
 8006ac8:	781b      	ldrb	r3, [r3, #0]
 8006aca:	461a      	mov	r2, r3
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	685b      	ldr	r3, [r3, #4]
 8006ad0:	429a      	cmp	r2, r3
 8006ad2:	d02a      	beq.n	8006b2a <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	685b      	ldr	r3, [r3, #4]
 8006ad8:	b2db      	uxtb	r3, r3
 8006ada:	4619      	mov	r1, r3
 8006adc:	6878      	ldr	r0, [r7, #4]
 8006ade:	f7ff f92a 	bl	8005d36 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8006ae2:	4b1d      	ldr	r3, [pc, #116]	; (8006b58 <USBD_SetConfig+0x148>)
 8006ae4:	781b      	ldrb	r3, [r3, #0]
 8006ae6:	461a      	mov	r2, r3
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8006aec:	4b1a      	ldr	r3, [pc, #104]	; (8006b58 <USBD_SetConfig+0x148>)
 8006aee:	781b      	ldrb	r3, [r3, #0]
 8006af0:	4619      	mov	r1, r3
 8006af2:	6878      	ldr	r0, [r7, #4]
 8006af4:	f7ff f903 	bl	8005cfe <USBD_SetClassConfig>
 8006af8:	4603      	mov	r3, r0
 8006afa:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8006afc:	7bfb      	ldrb	r3, [r7, #15]
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d00f      	beq.n	8006b22 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 8006b02:	6839      	ldr	r1, [r7, #0]
 8006b04:	6878      	ldr	r0, [r7, #4]
 8006b06:	f000 f903 	bl	8006d10 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	685b      	ldr	r3, [r3, #4]
 8006b0e:	b2db      	uxtb	r3, r3
 8006b10:	4619      	mov	r1, r3
 8006b12:	6878      	ldr	r0, [r7, #4]
 8006b14:	f7ff f90f 	bl	8005d36 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	2202      	movs	r2, #2
 8006b1c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8006b20:	e014      	b.n	8006b4c <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8006b22:	6878      	ldr	r0, [r7, #4]
 8006b24:	f000 f9a2 	bl	8006e6c <USBD_CtlSendStatus>
      break;
 8006b28:	e010      	b.n	8006b4c <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8006b2a:	6878      	ldr	r0, [r7, #4]
 8006b2c:	f000 f99e 	bl	8006e6c <USBD_CtlSendStatus>
      break;
 8006b30:	e00c      	b.n	8006b4c <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8006b32:	6839      	ldr	r1, [r7, #0]
 8006b34:	6878      	ldr	r0, [r7, #4]
 8006b36:	f000 f8eb 	bl	8006d10 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006b3a:	4b07      	ldr	r3, [pc, #28]	; (8006b58 <USBD_SetConfig+0x148>)
 8006b3c:	781b      	ldrb	r3, [r3, #0]
 8006b3e:	4619      	mov	r1, r3
 8006b40:	6878      	ldr	r0, [r7, #4]
 8006b42:	f7ff f8f8 	bl	8005d36 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8006b46:	2303      	movs	r3, #3
 8006b48:	73fb      	strb	r3, [r7, #15]
      break;
 8006b4a:	bf00      	nop
  }

  return ret;
 8006b4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b4e:	4618      	mov	r0, r3
 8006b50:	3710      	adds	r7, #16
 8006b52:	46bd      	mov	sp, r7
 8006b54:	bd80      	pop	{r7, pc}
 8006b56:	bf00      	nop
 8006b58:	20000184 	.word	0x20000184

08006b5c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006b5c:	b580      	push	{r7, lr}
 8006b5e:	b082      	sub	sp, #8
 8006b60:	af00      	add	r7, sp, #0
 8006b62:	6078      	str	r0, [r7, #4]
 8006b64:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8006b66:	683b      	ldr	r3, [r7, #0]
 8006b68:	88db      	ldrh	r3, [r3, #6]
 8006b6a:	2b01      	cmp	r3, #1
 8006b6c:	d004      	beq.n	8006b78 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8006b6e:	6839      	ldr	r1, [r7, #0]
 8006b70:	6878      	ldr	r0, [r7, #4]
 8006b72:	f000 f8cd 	bl	8006d10 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8006b76:	e023      	b.n	8006bc0 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006b7e:	b2db      	uxtb	r3, r3
 8006b80:	2b02      	cmp	r3, #2
 8006b82:	dc02      	bgt.n	8006b8a <USBD_GetConfig+0x2e>
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	dc03      	bgt.n	8006b90 <USBD_GetConfig+0x34>
 8006b88:	e015      	b.n	8006bb6 <USBD_GetConfig+0x5a>
 8006b8a:	2b03      	cmp	r3, #3
 8006b8c:	d00b      	beq.n	8006ba6 <USBD_GetConfig+0x4a>
 8006b8e:	e012      	b.n	8006bb6 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	2200      	movs	r2, #0
 8006b94:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	3308      	adds	r3, #8
 8006b9a:	2201      	movs	r2, #1
 8006b9c:	4619      	mov	r1, r3
 8006b9e:	6878      	ldr	r0, [r7, #4]
 8006ba0:	f000 f927 	bl	8006df2 <USBD_CtlSendData>
        break;
 8006ba4:	e00c      	b.n	8006bc0 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	3304      	adds	r3, #4
 8006baa:	2201      	movs	r2, #1
 8006bac:	4619      	mov	r1, r3
 8006bae:	6878      	ldr	r0, [r7, #4]
 8006bb0:	f000 f91f 	bl	8006df2 <USBD_CtlSendData>
        break;
 8006bb4:	e004      	b.n	8006bc0 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8006bb6:	6839      	ldr	r1, [r7, #0]
 8006bb8:	6878      	ldr	r0, [r7, #4]
 8006bba:	f000 f8a9 	bl	8006d10 <USBD_CtlError>
        break;
 8006bbe:	bf00      	nop
}
 8006bc0:	bf00      	nop
 8006bc2:	3708      	adds	r7, #8
 8006bc4:	46bd      	mov	sp, r7
 8006bc6:	bd80      	pop	{r7, pc}

08006bc8 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006bc8:	b580      	push	{r7, lr}
 8006bca:	b082      	sub	sp, #8
 8006bcc:	af00      	add	r7, sp, #0
 8006bce:	6078      	str	r0, [r7, #4]
 8006bd0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006bd8:	b2db      	uxtb	r3, r3
 8006bda:	3b01      	subs	r3, #1
 8006bdc:	2b02      	cmp	r3, #2
 8006bde:	d81e      	bhi.n	8006c1e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8006be0:	683b      	ldr	r3, [r7, #0]
 8006be2:	88db      	ldrh	r3, [r3, #6]
 8006be4:	2b02      	cmp	r3, #2
 8006be6:	d004      	beq.n	8006bf2 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8006be8:	6839      	ldr	r1, [r7, #0]
 8006bea:	6878      	ldr	r0, [r7, #4]
 8006bec:	f000 f890 	bl	8006d10 <USBD_CtlError>
        break;
 8006bf0:	e01a      	b.n	8006c28 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	2201      	movs	r2, #1
 8006bf6:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d005      	beq.n	8006c0e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	68db      	ldr	r3, [r3, #12]
 8006c06:	f043 0202 	orr.w	r2, r3, #2
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	330c      	adds	r3, #12
 8006c12:	2202      	movs	r2, #2
 8006c14:	4619      	mov	r1, r3
 8006c16:	6878      	ldr	r0, [r7, #4]
 8006c18:	f000 f8eb 	bl	8006df2 <USBD_CtlSendData>
      break;
 8006c1c:	e004      	b.n	8006c28 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8006c1e:	6839      	ldr	r1, [r7, #0]
 8006c20:	6878      	ldr	r0, [r7, #4]
 8006c22:	f000 f875 	bl	8006d10 <USBD_CtlError>
      break;
 8006c26:	bf00      	nop
  }
}
 8006c28:	bf00      	nop
 8006c2a:	3708      	adds	r7, #8
 8006c2c:	46bd      	mov	sp, r7
 8006c2e:	bd80      	pop	{r7, pc}

08006c30 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006c30:	b580      	push	{r7, lr}
 8006c32:	b082      	sub	sp, #8
 8006c34:	af00      	add	r7, sp, #0
 8006c36:	6078      	str	r0, [r7, #4]
 8006c38:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006c3a:	683b      	ldr	r3, [r7, #0]
 8006c3c:	885b      	ldrh	r3, [r3, #2]
 8006c3e:	2b01      	cmp	r3, #1
 8006c40:	d106      	bne.n	8006c50 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	2201      	movs	r2, #1
 8006c46:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8006c4a:	6878      	ldr	r0, [r7, #4]
 8006c4c:	f000 f90e 	bl	8006e6c <USBD_CtlSendStatus>
  }
}
 8006c50:	bf00      	nop
 8006c52:	3708      	adds	r7, #8
 8006c54:	46bd      	mov	sp, r7
 8006c56:	bd80      	pop	{r7, pc}

08006c58 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006c58:	b580      	push	{r7, lr}
 8006c5a:	b082      	sub	sp, #8
 8006c5c:	af00      	add	r7, sp, #0
 8006c5e:	6078      	str	r0, [r7, #4]
 8006c60:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006c68:	b2db      	uxtb	r3, r3
 8006c6a:	3b01      	subs	r3, #1
 8006c6c:	2b02      	cmp	r3, #2
 8006c6e:	d80b      	bhi.n	8006c88 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006c70:	683b      	ldr	r3, [r7, #0]
 8006c72:	885b      	ldrh	r3, [r3, #2]
 8006c74:	2b01      	cmp	r3, #1
 8006c76:	d10c      	bne.n	8006c92 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	2200      	movs	r2, #0
 8006c7c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8006c80:	6878      	ldr	r0, [r7, #4]
 8006c82:	f000 f8f3 	bl	8006e6c <USBD_CtlSendStatus>
      }
      break;
 8006c86:	e004      	b.n	8006c92 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8006c88:	6839      	ldr	r1, [r7, #0]
 8006c8a:	6878      	ldr	r0, [r7, #4]
 8006c8c:	f000 f840 	bl	8006d10 <USBD_CtlError>
      break;
 8006c90:	e000      	b.n	8006c94 <USBD_ClrFeature+0x3c>
      break;
 8006c92:	bf00      	nop
  }
}
 8006c94:	bf00      	nop
 8006c96:	3708      	adds	r7, #8
 8006c98:	46bd      	mov	sp, r7
 8006c9a:	bd80      	pop	{r7, pc}

08006c9c <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8006c9c:	b580      	push	{r7, lr}
 8006c9e:	b084      	sub	sp, #16
 8006ca0:	af00      	add	r7, sp, #0
 8006ca2:	6078      	str	r0, [r7, #4]
 8006ca4:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8006ca6:	683b      	ldr	r3, [r7, #0]
 8006ca8:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	781a      	ldrb	r2, [r3, #0]
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	3301      	adds	r3, #1
 8006cb6:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	781a      	ldrb	r2, [r3, #0]
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	3301      	adds	r3, #1
 8006cc4:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8006cc6:	68f8      	ldr	r0, [r7, #12]
 8006cc8:	f7ff fabc 	bl	8006244 <SWAPBYTE>
 8006ccc:	4603      	mov	r3, r0
 8006cce:	461a      	mov	r2, r3
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	3301      	adds	r3, #1
 8006cd8:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	3301      	adds	r3, #1
 8006cde:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8006ce0:	68f8      	ldr	r0, [r7, #12]
 8006ce2:	f7ff faaf 	bl	8006244 <SWAPBYTE>
 8006ce6:	4603      	mov	r3, r0
 8006ce8:	461a      	mov	r2, r3
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	3301      	adds	r3, #1
 8006cf2:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	3301      	adds	r3, #1
 8006cf8:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8006cfa:	68f8      	ldr	r0, [r7, #12]
 8006cfc:	f7ff faa2 	bl	8006244 <SWAPBYTE>
 8006d00:	4603      	mov	r3, r0
 8006d02:	461a      	mov	r2, r3
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	80da      	strh	r2, [r3, #6]
}
 8006d08:	bf00      	nop
 8006d0a:	3710      	adds	r7, #16
 8006d0c:	46bd      	mov	sp, r7
 8006d0e:	bd80      	pop	{r7, pc}

08006d10 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006d10:	b580      	push	{r7, lr}
 8006d12:	b082      	sub	sp, #8
 8006d14:	af00      	add	r7, sp, #0
 8006d16:	6078      	str	r0, [r7, #4]
 8006d18:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8006d1a:	2180      	movs	r1, #128	; 0x80
 8006d1c:	6878      	ldr	r0, [r7, #4]
 8006d1e:	f000 fc76 	bl	800760e <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8006d22:	2100      	movs	r1, #0
 8006d24:	6878      	ldr	r0, [r7, #4]
 8006d26:	f000 fc72 	bl	800760e <USBD_LL_StallEP>
}
 8006d2a:	bf00      	nop
 8006d2c:	3708      	adds	r7, #8
 8006d2e:	46bd      	mov	sp, r7
 8006d30:	bd80      	pop	{r7, pc}

08006d32 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8006d32:	b580      	push	{r7, lr}
 8006d34:	b086      	sub	sp, #24
 8006d36:	af00      	add	r7, sp, #0
 8006d38:	60f8      	str	r0, [r7, #12]
 8006d3a:	60b9      	str	r1, [r7, #8]
 8006d3c:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8006d3e:	2300      	movs	r3, #0
 8006d40:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d036      	beq.n	8006db6 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8006d4c:	6938      	ldr	r0, [r7, #16]
 8006d4e:	f000 f836 	bl	8006dbe <USBD_GetLen>
 8006d52:	4603      	mov	r3, r0
 8006d54:	3301      	adds	r3, #1
 8006d56:	b29b      	uxth	r3, r3
 8006d58:	005b      	lsls	r3, r3, #1
 8006d5a:	b29a      	uxth	r2, r3
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8006d60:	7dfb      	ldrb	r3, [r7, #23]
 8006d62:	68ba      	ldr	r2, [r7, #8]
 8006d64:	4413      	add	r3, r2
 8006d66:	687a      	ldr	r2, [r7, #4]
 8006d68:	7812      	ldrb	r2, [r2, #0]
 8006d6a:	701a      	strb	r2, [r3, #0]
  idx++;
 8006d6c:	7dfb      	ldrb	r3, [r7, #23]
 8006d6e:	3301      	adds	r3, #1
 8006d70:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8006d72:	7dfb      	ldrb	r3, [r7, #23]
 8006d74:	68ba      	ldr	r2, [r7, #8]
 8006d76:	4413      	add	r3, r2
 8006d78:	2203      	movs	r2, #3
 8006d7a:	701a      	strb	r2, [r3, #0]
  idx++;
 8006d7c:	7dfb      	ldrb	r3, [r7, #23]
 8006d7e:	3301      	adds	r3, #1
 8006d80:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8006d82:	e013      	b.n	8006dac <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8006d84:	7dfb      	ldrb	r3, [r7, #23]
 8006d86:	68ba      	ldr	r2, [r7, #8]
 8006d88:	4413      	add	r3, r2
 8006d8a:	693a      	ldr	r2, [r7, #16]
 8006d8c:	7812      	ldrb	r2, [r2, #0]
 8006d8e:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8006d90:	693b      	ldr	r3, [r7, #16]
 8006d92:	3301      	adds	r3, #1
 8006d94:	613b      	str	r3, [r7, #16]
    idx++;
 8006d96:	7dfb      	ldrb	r3, [r7, #23]
 8006d98:	3301      	adds	r3, #1
 8006d9a:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8006d9c:	7dfb      	ldrb	r3, [r7, #23]
 8006d9e:	68ba      	ldr	r2, [r7, #8]
 8006da0:	4413      	add	r3, r2
 8006da2:	2200      	movs	r2, #0
 8006da4:	701a      	strb	r2, [r3, #0]
    idx++;
 8006da6:	7dfb      	ldrb	r3, [r7, #23]
 8006da8:	3301      	adds	r3, #1
 8006daa:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8006dac:	693b      	ldr	r3, [r7, #16]
 8006dae:	781b      	ldrb	r3, [r3, #0]
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d1e7      	bne.n	8006d84 <USBD_GetString+0x52>
 8006db4:	e000      	b.n	8006db8 <USBD_GetString+0x86>
    return;
 8006db6:	bf00      	nop
  }
}
 8006db8:	3718      	adds	r7, #24
 8006dba:	46bd      	mov	sp, r7
 8006dbc:	bd80      	pop	{r7, pc}

08006dbe <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8006dbe:	b480      	push	{r7}
 8006dc0:	b085      	sub	sp, #20
 8006dc2:	af00      	add	r7, sp, #0
 8006dc4:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8006dc6:	2300      	movs	r3, #0
 8006dc8:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8006dce:	e005      	b.n	8006ddc <USBD_GetLen+0x1e>
  {
    len++;
 8006dd0:	7bfb      	ldrb	r3, [r7, #15]
 8006dd2:	3301      	adds	r3, #1
 8006dd4:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8006dd6:	68bb      	ldr	r3, [r7, #8]
 8006dd8:	3301      	adds	r3, #1
 8006dda:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8006ddc:	68bb      	ldr	r3, [r7, #8]
 8006dde:	781b      	ldrb	r3, [r3, #0]
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d1f5      	bne.n	8006dd0 <USBD_GetLen+0x12>
  }

  return len;
 8006de4:	7bfb      	ldrb	r3, [r7, #15]
}
 8006de6:	4618      	mov	r0, r3
 8006de8:	3714      	adds	r7, #20
 8006dea:	46bd      	mov	sp, r7
 8006dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006df0:	4770      	bx	lr

08006df2 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8006df2:	b580      	push	{r7, lr}
 8006df4:	b084      	sub	sp, #16
 8006df6:	af00      	add	r7, sp, #0
 8006df8:	60f8      	str	r0, [r7, #12]
 8006dfa:	60b9      	str	r1, [r7, #8]
 8006dfc:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	2202      	movs	r2, #2
 8006e02:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	687a      	ldr	r2, [r7, #4]
 8006e0a:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	687a      	ldr	r2, [r7, #4]
 8006e10:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	68ba      	ldr	r2, [r7, #8]
 8006e16:	2100      	movs	r1, #0
 8006e18:	68f8      	ldr	r0, [r7, #12]
 8006e1a:	f000 fc81 	bl	8007720 <USBD_LL_Transmit>

  return USBD_OK;
 8006e1e:	2300      	movs	r3, #0
}
 8006e20:	4618      	mov	r0, r3
 8006e22:	3710      	adds	r7, #16
 8006e24:	46bd      	mov	sp, r7
 8006e26:	bd80      	pop	{r7, pc}

08006e28 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8006e28:	b580      	push	{r7, lr}
 8006e2a:	b084      	sub	sp, #16
 8006e2c:	af00      	add	r7, sp, #0
 8006e2e:	60f8      	str	r0, [r7, #12]
 8006e30:	60b9      	str	r1, [r7, #8]
 8006e32:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	68ba      	ldr	r2, [r7, #8]
 8006e38:	2100      	movs	r1, #0
 8006e3a:	68f8      	ldr	r0, [r7, #12]
 8006e3c:	f000 fc70 	bl	8007720 <USBD_LL_Transmit>

  return USBD_OK;
 8006e40:	2300      	movs	r3, #0
}
 8006e42:	4618      	mov	r0, r3
 8006e44:	3710      	adds	r7, #16
 8006e46:	46bd      	mov	sp, r7
 8006e48:	bd80      	pop	{r7, pc}

08006e4a <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8006e4a:	b580      	push	{r7, lr}
 8006e4c:	b084      	sub	sp, #16
 8006e4e:	af00      	add	r7, sp, #0
 8006e50:	60f8      	str	r0, [r7, #12]
 8006e52:	60b9      	str	r1, [r7, #8]
 8006e54:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	68ba      	ldr	r2, [r7, #8]
 8006e5a:	2100      	movs	r1, #0
 8006e5c:	68f8      	ldr	r0, [r7, #12]
 8006e5e:	f000 fc80 	bl	8007762 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006e62:	2300      	movs	r3, #0
}
 8006e64:	4618      	mov	r0, r3
 8006e66:	3710      	adds	r7, #16
 8006e68:	46bd      	mov	sp, r7
 8006e6a:	bd80      	pop	{r7, pc}

08006e6c <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8006e6c:	b580      	push	{r7, lr}
 8006e6e:	b082      	sub	sp, #8
 8006e70:	af00      	add	r7, sp, #0
 8006e72:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	2204      	movs	r2, #4
 8006e78:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8006e7c:	2300      	movs	r3, #0
 8006e7e:	2200      	movs	r2, #0
 8006e80:	2100      	movs	r1, #0
 8006e82:	6878      	ldr	r0, [r7, #4]
 8006e84:	f000 fc4c 	bl	8007720 <USBD_LL_Transmit>

  return USBD_OK;
 8006e88:	2300      	movs	r3, #0
}
 8006e8a:	4618      	mov	r0, r3
 8006e8c:	3708      	adds	r7, #8
 8006e8e:	46bd      	mov	sp, r7
 8006e90:	bd80      	pop	{r7, pc}

08006e92 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8006e92:	b580      	push	{r7, lr}
 8006e94:	b082      	sub	sp, #8
 8006e96:	af00      	add	r7, sp, #0
 8006e98:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	2205      	movs	r2, #5
 8006e9e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006ea2:	2300      	movs	r3, #0
 8006ea4:	2200      	movs	r2, #0
 8006ea6:	2100      	movs	r1, #0
 8006ea8:	6878      	ldr	r0, [r7, #4]
 8006eaa:	f000 fc5a 	bl	8007762 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006eae:	2300      	movs	r3, #0
}
 8006eb0:	4618      	mov	r0, r3
 8006eb2:	3708      	adds	r7, #8
 8006eb4:	46bd      	mov	sp, r7
 8006eb6:	bd80      	pop	{r7, pc}

08006eb8 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8006eb8:	b580      	push	{r7, lr}
 8006eba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8006ebc:	2200      	movs	r2, #0
 8006ebe:	4912      	ldr	r1, [pc, #72]	; (8006f08 <MX_USB_DEVICE_Init+0x50>)
 8006ec0:	4812      	ldr	r0, [pc, #72]	; (8006f0c <MX_USB_DEVICE_Init+0x54>)
 8006ec2:	f7fe feae 	bl	8005c22 <USBD_Init>
 8006ec6:	4603      	mov	r3, r0
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d001      	beq.n	8006ed0 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8006ecc:	f7f9 fba2 	bl	8000614 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_MSC) != USBD_OK)
 8006ed0:	490f      	ldr	r1, [pc, #60]	; (8006f10 <MX_USB_DEVICE_Init+0x58>)
 8006ed2:	480e      	ldr	r0, [pc, #56]	; (8006f0c <MX_USB_DEVICE_Init+0x54>)
 8006ed4:	f7fe fed5 	bl	8005c82 <USBD_RegisterClass>
 8006ed8:	4603      	mov	r3, r0
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d001      	beq.n	8006ee2 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8006ede:	f7f9 fb99 	bl	8000614 <Error_Handler>
  }
  if (USBD_MSC_RegisterStorage(&hUsbDeviceFS, &USBD_Storage_Interface_fops_FS) != USBD_OK)
 8006ee2:	490c      	ldr	r1, [pc, #48]	; (8006f14 <MX_USB_DEVICE_Init+0x5c>)
 8006ee4:	4809      	ldr	r0, [pc, #36]	; (8006f0c <MX_USB_DEVICE_Init+0x54>)
 8006ee6:	f7fd fa85 	bl	80043f4 <USBD_MSC_RegisterStorage>
 8006eea:	4603      	mov	r3, r0
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d001      	beq.n	8006ef4 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8006ef0:	f7f9 fb90 	bl	8000614 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8006ef4:	4805      	ldr	r0, [pc, #20]	; (8006f0c <MX_USB_DEVICE_Init+0x54>)
 8006ef6:	f7fe feeb 	bl	8005cd0 <USBD_Start>
 8006efa:	4603      	mov	r3, r0
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d001      	beq.n	8006f04 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8006f00:	f7f9 fb88 	bl	8000614 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8006f04:	bf00      	nop
 8006f06:	bd80      	pop	{r7, pc}
 8006f08:	200000f4 	.word	0x200000f4
 8006f0c:	20000188 	.word	0x20000188
 8006f10:	2000000c 	.word	0x2000000c
 8006f14:	20000144 	.word	0x20000144

08006f18 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006f18:	b480      	push	{r7}
 8006f1a:	b083      	sub	sp, #12
 8006f1c:	af00      	add	r7, sp, #0
 8006f1e:	4603      	mov	r3, r0
 8006f20:	6039      	str	r1, [r7, #0]
 8006f22:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8006f24:	683b      	ldr	r3, [r7, #0]
 8006f26:	2212      	movs	r2, #18
 8006f28:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8006f2a:	4b03      	ldr	r3, [pc, #12]	; (8006f38 <USBD_FS_DeviceDescriptor+0x20>)
}
 8006f2c:	4618      	mov	r0, r3
 8006f2e:	370c      	adds	r7, #12
 8006f30:	46bd      	mov	sp, r7
 8006f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f36:	4770      	bx	lr
 8006f38:	20000110 	.word	0x20000110

08006f3c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006f3c:	b480      	push	{r7}
 8006f3e:	b083      	sub	sp, #12
 8006f40:	af00      	add	r7, sp, #0
 8006f42:	4603      	mov	r3, r0
 8006f44:	6039      	str	r1, [r7, #0]
 8006f46:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8006f48:	683b      	ldr	r3, [r7, #0]
 8006f4a:	2204      	movs	r2, #4
 8006f4c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8006f4e:	4b03      	ldr	r3, [pc, #12]	; (8006f5c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8006f50:	4618      	mov	r0, r3
 8006f52:	370c      	adds	r7, #12
 8006f54:	46bd      	mov	sp, r7
 8006f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f5a:	4770      	bx	lr
 8006f5c:	20000124 	.word	0x20000124

08006f60 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006f60:	b580      	push	{r7, lr}
 8006f62:	b082      	sub	sp, #8
 8006f64:	af00      	add	r7, sp, #0
 8006f66:	4603      	mov	r3, r0
 8006f68:	6039      	str	r1, [r7, #0]
 8006f6a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8006f6c:	79fb      	ldrb	r3, [r7, #7]
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d105      	bne.n	8006f7e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8006f72:	683a      	ldr	r2, [r7, #0]
 8006f74:	4907      	ldr	r1, [pc, #28]	; (8006f94 <USBD_FS_ProductStrDescriptor+0x34>)
 8006f76:	4808      	ldr	r0, [pc, #32]	; (8006f98 <USBD_FS_ProductStrDescriptor+0x38>)
 8006f78:	f7ff fedb 	bl	8006d32 <USBD_GetString>
 8006f7c:	e004      	b.n	8006f88 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8006f7e:	683a      	ldr	r2, [r7, #0]
 8006f80:	4904      	ldr	r1, [pc, #16]	; (8006f94 <USBD_FS_ProductStrDescriptor+0x34>)
 8006f82:	4805      	ldr	r0, [pc, #20]	; (8006f98 <USBD_FS_ProductStrDescriptor+0x38>)
 8006f84:	f7ff fed5 	bl	8006d32 <USBD_GetString>
  }
  return USBD_StrDesc;
 8006f88:	4b02      	ldr	r3, [pc, #8]	; (8006f94 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8006f8a:	4618      	mov	r0, r3
 8006f8c:	3708      	adds	r7, #8
 8006f8e:	46bd      	mov	sp, r7
 8006f90:	bd80      	pop	{r7, pc}
 8006f92:	bf00      	nop
 8006f94:	20000458 	.word	0x20000458
 8006f98:	080078c4 	.word	0x080078c4

08006f9c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006f9c:	b580      	push	{r7, lr}
 8006f9e:	b082      	sub	sp, #8
 8006fa0:	af00      	add	r7, sp, #0
 8006fa2:	4603      	mov	r3, r0
 8006fa4:	6039      	str	r1, [r7, #0]
 8006fa6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8006fa8:	683a      	ldr	r2, [r7, #0]
 8006faa:	4904      	ldr	r1, [pc, #16]	; (8006fbc <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8006fac:	4804      	ldr	r0, [pc, #16]	; (8006fc0 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8006fae:	f7ff fec0 	bl	8006d32 <USBD_GetString>
  return USBD_StrDesc;
 8006fb2:	4b02      	ldr	r3, [pc, #8]	; (8006fbc <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8006fb4:	4618      	mov	r0, r3
 8006fb6:	3708      	adds	r7, #8
 8006fb8:	46bd      	mov	sp, r7
 8006fba:	bd80      	pop	{r7, pc}
 8006fbc:	20000458 	.word	0x20000458
 8006fc0:	080078d8 	.word	0x080078d8

08006fc4 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006fc4:	b580      	push	{r7, lr}
 8006fc6:	b082      	sub	sp, #8
 8006fc8:	af00      	add	r7, sp, #0
 8006fca:	4603      	mov	r3, r0
 8006fcc:	6039      	str	r1, [r7, #0]
 8006fce:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8006fd0:	683b      	ldr	r3, [r7, #0]
 8006fd2:	221a      	movs	r2, #26
 8006fd4:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8006fd6:	f000 f843 	bl	8007060 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8006fda:	4b02      	ldr	r3, [pc, #8]	; (8006fe4 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8006fdc:	4618      	mov	r0, r3
 8006fde:	3708      	adds	r7, #8
 8006fe0:	46bd      	mov	sp, r7
 8006fe2:	bd80      	pop	{r7, pc}
 8006fe4:	20000128 	.word	0x20000128

08006fe8 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006fe8:	b580      	push	{r7, lr}
 8006fea:	b082      	sub	sp, #8
 8006fec:	af00      	add	r7, sp, #0
 8006fee:	4603      	mov	r3, r0
 8006ff0:	6039      	str	r1, [r7, #0]
 8006ff2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8006ff4:	79fb      	ldrb	r3, [r7, #7]
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d105      	bne.n	8007006 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8006ffa:	683a      	ldr	r2, [r7, #0]
 8006ffc:	4907      	ldr	r1, [pc, #28]	; (800701c <USBD_FS_ConfigStrDescriptor+0x34>)
 8006ffe:	4808      	ldr	r0, [pc, #32]	; (8007020 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007000:	f7ff fe97 	bl	8006d32 <USBD_GetString>
 8007004:	e004      	b.n	8007010 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007006:	683a      	ldr	r2, [r7, #0]
 8007008:	4904      	ldr	r1, [pc, #16]	; (800701c <USBD_FS_ConfigStrDescriptor+0x34>)
 800700a:	4805      	ldr	r0, [pc, #20]	; (8007020 <USBD_FS_ConfigStrDescriptor+0x38>)
 800700c:	f7ff fe91 	bl	8006d32 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007010:	4b02      	ldr	r3, [pc, #8]	; (800701c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8007012:	4618      	mov	r0, r3
 8007014:	3708      	adds	r7, #8
 8007016:	46bd      	mov	sp, r7
 8007018:	bd80      	pop	{r7, pc}
 800701a:	bf00      	nop
 800701c:	20000458 	.word	0x20000458
 8007020:	080078ec 	.word	0x080078ec

08007024 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007024:	b580      	push	{r7, lr}
 8007026:	b082      	sub	sp, #8
 8007028:	af00      	add	r7, sp, #0
 800702a:	4603      	mov	r3, r0
 800702c:	6039      	str	r1, [r7, #0]
 800702e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007030:	79fb      	ldrb	r3, [r7, #7]
 8007032:	2b00      	cmp	r3, #0
 8007034:	d105      	bne.n	8007042 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007036:	683a      	ldr	r2, [r7, #0]
 8007038:	4907      	ldr	r1, [pc, #28]	; (8007058 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800703a:	4808      	ldr	r0, [pc, #32]	; (800705c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800703c:	f7ff fe79 	bl	8006d32 <USBD_GetString>
 8007040:	e004      	b.n	800704c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007042:	683a      	ldr	r2, [r7, #0]
 8007044:	4904      	ldr	r1, [pc, #16]	; (8007058 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007046:	4805      	ldr	r0, [pc, #20]	; (800705c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007048:	f7ff fe73 	bl	8006d32 <USBD_GetString>
  }
  return USBD_StrDesc;
 800704c:	4b02      	ldr	r3, [pc, #8]	; (8007058 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800704e:	4618      	mov	r0, r3
 8007050:	3708      	adds	r7, #8
 8007052:	46bd      	mov	sp, r7
 8007054:	bd80      	pop	{r7, pc}
 8007056:	bf00      	nop
 8007058:	20000458 	.word	0x20000458
 800705c:	080078f8 	.word	0x080078f8

08007060 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8007060:	b580      	push	{r7, lr}
 8007062:	b084      	sub	sp, #16
 8007064:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8007066:	4b0f      	ldr	r3, [pc, #60]	; (80070a4 <Get_SerialNum+0x44>)
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800706c:	4b0e      	ldr	r3, [pc, #56]	; (80070a8 <Get_SerialNum+0x48>)
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8007072:	4b0e      	ldr	r3, [pc, #56]	; (80070ac <Get_SerialNum+0x4c>)
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8007078:	68fa      	ldr	r2, [r7, #12]
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	4413      	add	r3, r2
 800707e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	2b00      	cmp	r3, #0
 8007084:	d009      	beq.n	800709a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8007086:	2208      	movs	r2, #8
 8007088:	4909      	ldr	r1, [pc, #36]	; (80070b0 <Get_SerialNum+0x50>)
 800708a:	68f8      	ldr	r0, [r7, #12]
 800708c:	f000 f814 	bl	80070b8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8007090:	2204      	movs	r2, #4
 8007092:	4908      	ldr	r1, [pc, #32]	; (80070b4 <Get_SerialNum+0x54>)
 8007094:	68b8      	ldr	r0, [r7, #8]
 8007096:	f000 f80f 	bl	80070b8 <IntToUnicode>
  }
}
 800709a:	bf00      	nop
 800709c:	3710      	adds	r7, #16
 800709e:	46bd      	mov	sp, r7
 80070a0:	bd80      	pop	{r7, pc}
 80070a2:	bf00      	nop
 80070a4:	1fff7a10 	.word	0x1fff7a10
 80070a8:	1fff7a14 	.word	0x1fff7a14
 80070ac:	1fff7a18 	.word	0x1fff7a18
 80070b0:	2000012a 	.word	0x2000012a
 80070b4:	2000013a 	.word	0x2000013a

080070b8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80070b8:	b480      	push	{r7}
 80070ba:	b087      	sub	sp, #28
 80070bc:	af00      	add	r7, sp, #0
 80070be:	60f8      	str	r0, [r7, #12]
 80070c0:	60b9      	str	r1, [r7, #8]
 80070c2:	4613      	mov	r3, r2
 80070c4:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80070c6:	2300      	movs	r3, #0
 80070c8:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80070ca:	2300      	movs	r3, #0
 80070cc:	75fb      	strb	r3, [r7, #23]
 80070ce:	e027      	b.n	8007120 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	0f1b      	lsrs	r3, r3, #28
 80070d4:	2b09      	cmp	r3, #9
 80070d6:	d80b      	bhi.n	80070f0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	0f1b      	lsrs	r3, r3, #28
 80070dc:	b2da      	uxtb	r2, r3
 80070de:	7dfb      	ldrb	r3, [r7, #23]
 80070e0:	005b      	lsls	r3, r3, #1
 80070e2:	4619      	mov	r1, r3
 80070e4:	68bb      	ldr	r3, [r7, #8]
 80070e6:	440b      	add	r3, r1
 80070e8:	3230      	adds	r2, #48	; 0x30
 80070ea:	b2d2      	uxtb	r2, r2
 80070ec:	701a      	strb	r2, [r3, #0]
 80070ee:	e00a      	b.n	8007106 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	0f1b      	lsrs	r3, r3, #28
 80070f4:	b2da      	uxtb	r2, r3
 80070f6:	7dfb      	ldrb	r3, [r7, #23]
 80070f8:	005b      	lsls	r3, r3, #1
 80070fa:	4619      	mov	r1, r3
 80070fc:	68bb      	ldr	r3, [r7, #8]
 80070fe:	440b      	add	r3, r1
 8007100:	3237      	adds	r2, #55	; 0x37
 8007102:	b2d2      	uxtb	r2, r2
 8007104:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	011b      	lsls	r3, r3, #4
 800710a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800710c:	7dfb      	ldrb	r3, [r7, #23]
 800710e:	005b      	lsls	r3, r3, #1
 8007110:	3301      	adds	r3, #1
 8007112:	68ba      	ldr	r2, [r7, #8]
 8007114:	4413      	add	r3, r2
 8007116:	2200      	movs	r2, #0
 8007118:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800711a:	7dfb      	ldrb	r3, [r7, #23]
 800711c:	3301      	adds	r3, #1
 800711e:	75fb      	strb	r3, [r7, #23]
 8007120:	7dfa      	ldrb	r2, [r7, #23]
 8007122:	79fb      	ldrb	r3, [r7, #7]
 8007124:	429a      	cmp	r2, r3
 8007126:	d3d3      	bcc.n	80070d0 <IntToUnicode+0x18>
  }
}
 8007128:	bf00      	nop
 800712a:	bf00      	nop
 800712c:	371c      	adds	r7, #28
 800712e:	46bd      	mov	sp, r7
 8007130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007134:	4770      	bx	lr

08007136 <STORAGE_Init_FS>:
  * @brief  Initializes over USB FS IP
  * @param  lun:
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Init_FS(uint8_t lun)
{
 8007136:	b480      	push	{r7}
 8007138:	b083      	sub	sp, #12
 800713a:	af00      	add	r7, sp, #0
 800713c:	4603      	mov	r3, r0
 800713e:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 2 */
  return (USBD_OK);
 8007140:	2300      	movs	r3, #0
  /* USER CODE END 2 */
}
 8007142:	4618      	mov	r0, r3
 8007144:	370c      	adds	r7, #12
 8007146:	46bd      	mov	sp, r7
 8007148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800714c:	4770      	bx	lr

0800714e <STORAGE_GetCapacity_FS>:
  * @param  block_num: .
  * @param  block_size: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_GetCapacity_FS(uint8_t lun, uint32_t *block_num, uint16_t *block_size)
{
 800714e:	b480      	push	{r7}
 8007150:	b085      	sub	sp, #20
 8007152:	af00      	add	r7, sp, #0
 8007154:	4603      	mov	r3, r0
 8007156:	60b9      	str	r1, [r7, #8]
 8007158:	607a      	str	r2, [r7, #4]
 800715a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 3 */
  *block_num  = STORAGE_BLK_NBR;
 800715c:	68bb      	ldr	r3, [r7, #8]
 800715e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8007162:	601a      	str	r2, [r3, #0]
  *block_size = STORAGE_BLK_SIZ;
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	f44f 7200 	mov.w	r2, #512	; 0x200
 800716a:	801a      	strh	r2, [r3, #0]
  return (USBD_OK);
 800716c:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800716e:	4618      	mov	r0, r3
 8007170:	3714      	adds	r7, #20
 8007172:	46bd      	mov	sp, r7
 8007174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007178:	4770      	bx	lr

0800717a <STORAGE_IsReady_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsReady_FS(uint8_t lun)
{
 800717a:	b480      	push	{r7}
 800717c:	b083      	sub	sp, #12
 800717e:	af00      	add	r7, sp, #0
 8007180:	4603      	mov	r3, r0
 8007182:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8007184:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8007186:	4618      	mov	r0, r3
 8007188:	370c      	adds	r7, #12
 800718a:	46bd      	mov	sp, r7
 800718c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007190:	4770      	bx	lr

08007192 <STORAGE_IsWriteProtected_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsWriteProtected_FS(uint8_t lun)
{
 8007192:	b480      	push	{r7}
 8007194:	b083      	sub	sp, #12
 8007196:	af00      	add	r7, sp, #0
 8007198:	4603      	mov	r3, r0
 800719a:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 5 */
  return (USBD_OK);
 800719c:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800719e:	4618      	mov	r0, r3
 80071a0:	370c      	adds	r7, #12
 80071a2:	46bd      	mov	sp, r7
 80071a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071a8:	4770      	bx	lr

080071aa <STORAGE_Read_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Read_FS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 80071aa:	b480      	push	{r7}
 80071ac:	b085      	sub	sp, #20
 80071ae:	af00      	add	r7, sp, #0
 80071b0:	60b9      	str	r1, [r7, #8]
 80071b2:	607a      	str	r2, [r7, #4]
 80071b4:	461a      	mov	r2, r3
 80071b6:	4603      	mov	r3, r0
 80071b8:	73fb      	strb	r3, [r7, #15]
 80071ba:	4613      	mov	r3, r2
 80071bc:	81bb      	strh	r3, [r7, #12]
  /* USER CODE BEGIN 6 */
  return (USBD_OK);
 80071be:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80071c0:	4618      	mov	r0, r3
 80071c2:	3714      	adds	r7, #20
 80071c4:	46bd      	mov	sp, r7
 80071c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ca:	4770      	bx	lr

080071cc <STORAGE_Write_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Write_FS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 80071cc:	b480      	push	{r7}
 80071ce:	b085      	sub	sp, #20
 80071d0:	af00      	add	r7, sp, #0
 80071d2:	60b9      	str	r1, [r7, #8]
 80071d4:	607a      	str	r2, [r7, #4]
 80071d6:	461a      	mov	r2, r3
 80071d8:	4603      	mov	r3, r0
 80071da:	73fb      	strb	r3, [r7, #15]
 80071dc:	4613      	mov	r3, r2
 80071de:	81bb      	strh	r3, [r7, #12]
  /* USER CODE BEGIN 7 */
  return (USBD_OK);
 80071e0:	2300      	movs	r3, #0
  /* USER CODE END 7 */
}
 80071e2:	4618      	mov	r0, r3
 80071e4:	3714      	adds	r7, #20
 80071e6:	46bd      	mov	sp, r7
 80071e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ec:	4770      	bx	lr

080071ee <STORAGE_GetMaxLun_FS>:
  * @brief  .
  * @param  None
  * @retval .
  */
int8_t STORAGE_GetMaxLun_FS(void)
{
 80071ee:	b480      	push	{r7}
 80071f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */
  return (STORAGE_LUN_NBR - 1);
 80071f2:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 80071f4:	4618      	mov	r0, r3
 80071f6:	46bd      	mov	sp, r7
 80071f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071fc:	4770      	bx	lr
	...

08007200 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8007200:	b580      	push	{r7, lr}
 8007202:	b08a      	sub	sp, #40	; 0x28
 8007204:	af00      	add	r7, sp, #0
 8007206:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007208:	f107 0314 	add.w	r3, r7, #20
 800720c:	2200      	movs	r2, #0
 800720e:	601a      	str	r2, [r3, #0]
 8007210:	605a      	str	r2, [r3, #4]
 8007212:	609a      	str	r2, [r3, #8]
 8007214:	60da      	str	r2, [r3, #12]
 8007216:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007220:	d13a      	bne.n	8007298 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007222:	2300      	movs	r3, #0
 8007224:	613b      	str	r3, [r7, #16]
 8007226:	4b1e      	ldr	r3, [pc, #120]	; (80072a0 <HAL_PCD_MspInit+0xa0>)
 8007228:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800722a:	4a1d      	ldr	r2, [pc, #116]	; (80072a0 <HAL_PCD_MspInit+0xa0>)
 800722c:	f043 0301 	orr.w	r3, r3, #1
 8007230:	6313      	str	r3, [r2, #48]	; 0x30
 8007232:	4b1b      	ldr	r3, [pc, #108]	; (80072a0 <HAL_PCD_MspInit+0xa0>)
 8007234:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007236:	f003 0301 	and.w	r3, r3, #1
 800723a:	613b      	str	r3, [r7, #16]
 800723c:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800723e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8007242:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007244:	2302      	movs	r3, #2
 8007246:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007248:	2300      	movs	r3, #0
 800724a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800724c:	2303      	movs	r3, #3
 800724e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8007250:	230a      	movs	r3, #10
 8007252:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007254:	f107 0314 	add.w	r3, r7, #20
 8007258:	4619      	mov	r1, r3
 800725a:	4812      	ldr	r0, [pc, #72]	; (80072a4 <HAL_PCD_MspInit+0xa4>)
 800725c:	f7f9 fc20 	bl	8000aa0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8007260:	4b0f      	ldr	r3, [pc, #60]	; (80072a0 <HAL_PCD_MspInit+0xa0>)
 8007262:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007264:	4a0e      	ldr	r2, [pc, #56]	; (80072a0 <HAL_PCD_MspInit+0xa0>)
 8007266:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800726a:	6353      	str	r3, [r2, #52]	; 0x34
 800726c:	2300      	movs	r3, #0
 800726e:	60fb      	str	r3, [r7, #12]
 8007270:	4b0b      	ldr	r3, [pc, #44]	; (80072a0 <HAL_PCD_MspInit+0xa0>)
 8007272:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007274:	4a0a      	ldr	r2, [pc, #40]	; (80072a0 <HAL_PCD_MspInit+0xa0>)
 8007276:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800727a:	6453      	str	r3, [r2, #68]	; 0x44
 800727c:	4b08      	ldr	r3, [pc, #32]	; (80072a0 <HAL_PCD_MspInit+0xa0>)
 800727e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007280:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007284:	60fb      	str	r3, [r7, #12]
 8007286:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8007288:	2200      	movs	r2, #0
 800728a:	2100      	movs	r1, #0
 800728c:	2043      	movs	r0, #67	; 0x43
 800728e:	f7f9 fbd0 	bl	8000a32 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8007292:	2043      	movs	r0, #67	; 0x43
 8007294:	f7f9 fbe9 	bl	8000a6a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8007298:	bf00      	nop
 800729a:	3728      	adds	r7, #40	; 0x28
 800729c:	46bd      	mov	sp, r7
 800729e:	bd80      	pop	{r7, pc}
 80072a0:	40023800 	.word	0x40023800
 80072a4:	40020000 	.word	0x40020000

080072a8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80072a8:	b580      	push	{r7, lr}
 80072aa:	b082      	sub	sp, #8
 80072ac:	af00      	add	r7, sp, #0
 80072ae:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80072bc:	4619      	mov	r1, r3
 80072be:	4610      	mov	r0, r2
 80072c0:	f7fe fd51 	bl	8005d66 <USBD_LL_SetupStage>
}
 80072c4:	bf00      	nop
 80072c6:	3708      	adds	r7, #8
 80072c8:	46bd      	mov	sp, r7
 80072ca:	bd80      	pop	{r7, pc}

080072cc <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80072cc:	b580      	push	{r7, lr}
 80072ce:	b082      	sub	sp, #8
 80072d0:	af00      	add	r7, sp, #0
 80072d2:	6078      	str	r0, [r7, #4]
 80072d4:	460b      	mov	r3, r1
 80072d6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 80072de:	78fa      	ldrb	r2, [r7, #3]
 80072e0:	6879      	ldr	r1, [r7, #4]
 80072e2:	4613      	mov	r3, r2
 80072e4:	00db      	lsls	r3, r3, #3
 80072e6:	1a9b      	subs	r3, r3, r2
 80072e8:	009b      	lsls	r3, r3, #2
 80072ea:	440b      	add	r3, r1
 80072ec:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80072f0:	681a      	ldr	r2, [r3, #0]
 80072f2:	78fb      	ldrb	r3, [r7, #3]
 80072f4:	4619      	mov	r1, r3
 80072f6:	f7fe fd8b 	bl	8005e10 <USBD_LL_DataOutStage>
}
 80072fa:	bf00      	nop
 80072fc:	3708      	adds	r7, #8
 80072fe:	46bd      	mov	sp, r7
 8007300:	bd80      	pop	{r7, pc}

08007302 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007302:	b580      	push	{r7, lr}
 8007304:	b082      	sub	sp, #8
 8007306:	af00      	add	r7, sp, #0
 8007308:	6078      	str	r0, [r7, #4]
 800730a:	460b      	mov	r3, r1
 800730c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8007314:	78fa      	ldrb	r2, [r7, #3]
 8007316:	6879      	ldr	r1, [r7, #4]
 8007318:	4613      	mov	r3, r2
 800731a:	00db      	lsls	r3, r3, #3
 800731c:	1a9b      	subs	r3, r3, r2
 800731e:	009b      	lsls	r3, r3, #2
 8007320:	440b      	add	r3, r1
 8007322:	3348      	adds	r3, #72	; 0x48
 8007324:	681a      	ldr	r2, [r3, #0]
 8007326:	78fb      	ldrb	r3, [r7, #3]
 8007328:	4619      	mov	r1, r3
 800732a:	f7fe fdd4 	bl	8005ed6 <USBD_LL_DataInStage>
}
 800732e:	bf00      	nop
 8007330:	3708      	adds	r7, #8
 8007332:	46bd      	mov	sp, r7
 8007334:	bd80      	pop	{r7, pc}

08007336 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007336:	b580      	push	{r7, lr}
 8007338:	b082      	sub	sp, #8
 800733a:	af00      	add	r7, sp, #0
 800733c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007344:	4618      	mov	r0, r3
 8007346:	f7fe fee8 	bl	800611a <USBD_LL_SOF>
}
 800734a:	bf00      	nop
 800734c:	3708      	adds	r7, #8
 800734e:	46bd      	mov	sp, r7
 8007350:	bd80      	pop	{r7, pc}

08007352 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007352:	b580      	push	{r7, lr}
 8007354:	b084      	sub	sp, #16
 8007356:	af00      	add	r7, sp, #0
 8007358:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800735a:	2301      	movs	r3, #1
 800735c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	68db      	ldr	r3, [r3, #12]
 8007362:	2b02      	cmp	r3, #2
 8007364:	d001      	beq.n	800736a <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8007366:	f7f9 f955 	bl	8000614 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007370:	7bfa      	ldrb	r2, [r7, #15]
 8007372:	4611      	mov	r1, r2
 8007374:	4618      	mov	r0, r3
 8007376:	f7fe fe92 	bl	800609e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007380:	4618      	mov	r0, r3
 8007382:	f7fe fe3e 	bl	8006002 <USBD_LL_Reset>
}
 8007386:	bf00      	nop
 8007388:	3710      	adds	r7, #16
 800738a:	46bd      	mov	sp, r7
 800738c:	bd80      	pop	{r7, pc}
	...

08007390 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007390:	b580      	push	{r7, lr}
 8007392:	b082      	sub	sp, #8
 8007394:	af00      	add	r7, sp, #0
 8007396:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800739e:	4618      	mov	r0, r3
 80073a0:	f7fe fe8d 	bl	80060be <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	687a      	ldr	r2, [r7, #4]
 80073b0:	6812      	ldr	r2, [r2, #0]
 80073b2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80073b6:	f043 0301 	orr.w	r3, r3, #1
 80073ba:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	6a1b      	ldr	r3, [r3, #32]
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	d005      	beq.n	80073d0 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80073c4:	4b04      	ldr	r3, [pc, #16]	; (80073d8 <HAL_PCD_SuspendCallback+0x48>)
 80073c6:	691b      	ldr	r3, [r3, #16]
 80073c8:	4a03      	ldr	r2, [pc, #12]	; (80073d8 <HAL_PCD_SuspendCallback+0x48>)
 80073ca:	f043 0306 	orr.w	r3, r3, #6
 80073ce:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80073d0:	bf00      	nop
 80073d2:	3708      	adds	r7, #8
 80073d4:	46bd      	mov	sp, r7
 80073d6:	bd80      	pop	{r7, pc}
 80073d8:	e000ed00 	.word	0xe000ed00

080073dc <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80073dc:	b580      	push	{r7, lr}
 80073de:	b082      	sub	sp, #8
 80073e0:	af00      	add	r7, sp, #0
 80073e2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80073ea:	4618      	mov	r0, r3
 80073ec:	f7fe fe7d 	bl	80060ea <USBD_LL_Resume>
}
 80073f0:	bf00      	nop
 80073f2:	3708      	adds	r7, #8
 80073f4:	46bd      	mov	sp, r7
 80073f6:	bd80      	pop	{r7, pc}

080073f8 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80073f8:	b580      	push	{r7, lr}
 80073fa:	b082      	sub	sp, #8
 80073fc:	af00      	add	r7, sp, #0
 80073fe:	6078      	str	r0, [r7, #4]
 8007400:	460b      	mov	r3, r1
 8007402:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800740a:	78fa      	ldrb	r2, [r7, #3]
 800740c:	4611      	mov	r1, r2
 800740e:	4618      	mov	r0, r3
 8007410:	f7fe fecb 	bl	80061aa <USBD_LL_IsoOUTIncomplete>
}
 8007414:	bf00      	nop
 8007416:	3708      	adds	r7, #8
 8007418:	46bd      	mov	sp, r7
 800741a:	bd80      	pop	{r7, pc}

0800741c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800741c:	b580      	push	{r7, lr}
 800741e:	b082      	sub	sp, #8
 8007420:	af00      	add	r7, sp, #0
 8007422:	6078      	str	r0, [r7, #4]
 8007424:	460b      	mov	r3, r1
 8007426:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800742e:	78fa      	ldrb	r2, [r7, #3]
 8007430:	4611      	mov	r1, r2
 8007432:	4618      	mov	r0, r3
 8007434:	f7fe fe93 	bl	800615e <USBD_LL_IsoINIncomplete>
}
 8007438:	bf00      	nop
 800743a:	3708      	adds	r7, #8
 800743c:	46bd      	mov	sp, r7
 800743e:	bd80      	pop	{r7, pc}

08007440 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007440:	b580      	push	{r7, lr}
 8007442:	b082      	sub	sp, #8
 8007444:	af00      	add	r7, sp, #0
 8007446:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800744e:	4618      	mov	r0, r3
 8007450:	f7fe fed1 	bl	80061f6 <USBD_LL_DevConnected>
}
 8007454:	bf00      	nop
 8007456:	3708      	adds	r7, #8
 8007458:	46bd      	mov	sp, r7
 800745a:	bd80      	pop	{r7, pc}

0800745c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800745c:	b580      	push	{r7, lr}
 800745e:	b082      	sub	sp, #8
 8007460:	af00      	add	r7, sp, #0
 8007462:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800746a:	4618      	mov	r0, r3
 800746c:	f7fe fece 	bl	800620c <USBD_LL_DevDisconnected>
}
 8007470:	bf00      	nop
 8007472:	3708      	adds	r7, #8
 8007474:	46bd      	mov	sp, r7
 8007476:	bd80      	pop	{r7, pc}

08007478 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8007478:	b580      	push	{r7, lr}
 800747a:	b082      	sub	sp, #8
 800747c:	af00      	add	r7, sp, #0
 800747e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	781b      	ldrb	r3, [r3, #0]
 8007484:	2b00      	cmp	r3, #0
 8007486:	d13c      	bne.n	8007502 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8007488:	4a20      	ldr	r2, [pc, #128]	; (800750c <USBD_LL_Init+0x94>)
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	4a1e      	ldr	r2, [pc, #120]	; (800750c <USBD_LL_Init+0x94>)
 8007494:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8007498:	4b1c      	ldr	r3, [pc, #112]	; (800750c <USBD_LL_Init+0x94>)
 800749a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800749e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80074a0:	4b1a      	ldr	r3, [pc, #104]	; (800750c <USBD_LL_Init+0x94>)
 80074a2:	2204      	movs	r2, #4
 80074a4:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80074a6:	4b19      	ldr	r3, [pc, #100]	; (800750c <USBD_LL_Init+0x94>)
 80074a8:	2202      	movs	r2, #2
 80074aa:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80074ac:	4b17      	ldr	r3, [pc, #92]	; (800750c <USBD_LL_Init+0x94>)
 80074ae:	2200      	movs	r2, #0
 80074b0:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80074b2:	4b16      	ldr	r3, [pc, #88]	; (800750c <USBD_LL_Init+0x94>)
 80074b4:	2202      	movs	r2, #2
 80074b6:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80074b8:	4b14      	ldr	r3, [pc, #80]	; (800750c <USBD_LL_Init+0x94>)
 80074ba:	2200      	movs	r2, #0
 80074bc:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80074be:	4b13      	ldr	r3, [pc, #76]	; (800750c <USBD_LL_Init+0x94>)
 80074c0:	2200      	movs	r2, #0
 80074c2:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80074c4:	4b11      	ldr	r3, [pc, #68]	; (800750c <USBD_LL_Init+0x94>)
 80074c6:	2200      	movs	r2, #0
 80074c8:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80074ca:	4b10      	ldr	r3, [pc, #64]	; (800750c <USBD_LL_Init+0x94>)
 80074cc:	2200      	movs	r2, #0
 80074ce:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80074d0:	4b0e      	ldr	r3, [pc, #56]	; (800750c <USBD_LL_Init+0x94>)
 80074d2:	2200      	movs	r2, #0
 80074d4:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80074d6:	480d      	ldr	r0, [pc, #52]	; (800750c <USBD_LL_Init+0x94>)
 80074d8:	f7f9 fc66 	bl	8000da8 <HAL_PCD_Init>
 80074dc:	4603      	mov	r3, r0
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d001      	beq.n	80074e6 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 80074e2:	f7f9 f897 	bl	8000614 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 80074e6:	2180      	movs	r1, #128	; 0x80
 80074e8:	4808      	ldr	r0, [pc, #32]	; (800750c <USBD_LL_Init+0x94>)
 80074ea:	f7fa fdf0 	bl	80020ce <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 80074ee:	2240      	movs	r2, #64	; 0x40
 80074f0:	2100      	movs	r1, #0
 80074f2:	4806      	ldr	r0, [pc, #24]	; (800750c <USBD_LL_Init+0x94>)
 80074f4:	f7fa fda4 	bl	8002040 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 80074f8:	2280      	movs	r2, #128	; 0x80
 80074fa:	2101      	movs	r1, #1
 80074fc:	4803      	ldr	r0, [pc, #12]	; (800750c <USBD_LL_Init+0x94>)
 80074fe:	f7fa fd9f 	bl	8002040 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8007502:	2300      	movs	r3, #0
}
 8007504:	4618      	mov	r0, r3
 8007506:	3708      	adds	r7, #8
 8007508:	46bd      	mov	sp, r7
 800750a:	bd80      	pop	{r7, pc}
 800750c:	20000658 	.word	0x20000658

08007510 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8007510:	b580      	push	{r7, lr}
 8007512:	b084      	sub	sp, #16
 8007514:	af00      	add	r7, sp, #0
 8007516:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007518:	2300      	movs	r3, #0
 800751a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800751c:	2300      	movs	r3, #0
 800751e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007526:	4618      	mov	r0, r3
 8007528:	f7f9 fd5b 	bl	8000fe2 <HAL_PCD_Start>
 800752c:	4603      	mov	r3, r0
 800752e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007530:	7bfb      	ldrb	r3, [r7, #15]
 8007532:	4618      	mov	r0, r3
 8007534:	f000 f962 	bl	80077fc <USBD_Get_USB_Status>
 8007538:	4603      	mov	r3, r0
 800753a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800753c:	7bbb      	ldrb	r3, [r7, #14]
}
 800753e:	4618      	mov	r0, r3
 8007540:	3710      	adds	r7, #16
 8007542:	46bd      	mov	sp, r7
 8007544:	bd80      	pop	{r7, pc}

08007546 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8007546:	b580      	push	{r7, lr}
 8007548:	b084      	sub	sp, #16
 800754a:	af00      	add	r7, sp, #0
 800754c:	6078      	str	r0, [r7, #4]
 800754e:	4608      	mov	r0, r1
 8007550:	4611      	mov	r1, r2
 8007552:	461a      	mov	r2, r3
 8007554:	4603      	mov	r3, r0
 8007556:	70fb      	strb	r3, [r7, #3]
 8007558:	460b      	mov	r3, r1
 800755a:	70bb      	strb	r3, [r7, #2]
 800755c:	4613      	mov	r3, r2
 800755e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007560:	2300      	movs	r3, #0
 8007562:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007564:	2300      	movs	r3, #0
 8007566:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800756e:	78bb      	ldrb	r3, [r7, #2]
 8007570:	883a      	ldrh	r2, [r7, #0]
 8007572:	78f9      	ldrb	r1, [r7, #3]
 8007574:	f7fa f93f 	bl	80017f6 <HAL_PCD_EP_Open>
 8007578:	4603      	mov	r3, r0
 800757a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800757c:	7bfb      	ldrb	r3, [r7, #15]
 800757e:	4618      	mov	r0, r3
 8007580:	f000 f93c 	bl	80077fc <USBD_Get_USB_Status>
 8007584:	4603      	mov	r3, r0
 8007586:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007588:	7bbb      	ldrb	r3, [r7, #14]
}
 800758a:	4618      	mov	r0, r3
 800758c:	3710      	adds	r7, #16
 800758e:	46bd      	mov	sp, r7
 8007590:	bd80      	pop	{r7, pc}

08007592 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007592:	b580      	push	{r7, lr}
 8007594:	b084      	sub	sp, #16
 8007596:	af00      	add	r7, sp, #0
 8007598:	6078      	str	r0, [r7, #4]
 800759a:	460b      	mov	r3, r1
 800759c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800759e:	2300      	movs	r3, #0
 80075a0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80075a2:	2300      	movs	r3, #0
 80075a4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80075ac:	78fa      	ldrb	r2, [r7, #3]
 80075ae:	4611      	mov	r1, r2
 80075b0:	4618      	mov	r0, r3
 80075b2:	f7fa f988 	bl	80018c6 <HAL_PCD_EP_Close>
 80075b6:	4603      	mov	r3, r0
 80075b8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80075ba:	7bfb      	ldrb	r3, [r7, #15]
 80075bc:	4618      	mov	r0, r3
 80075be:	f000 f91d 	bl	80077fc <USBD_Get_USB_Status>
 80075c2:	4603      	mov	r3, r0
 80075c4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80075c6:	7bbb      	ldrb	r3, [r7, #14]
}
 80075c8:	4618      	mov	r0, r3
 80075ca:	3710      	adds	r7, #16
 80075cc:	46bd      	mov	sp, r7
 80075ce:	bd80      	pop	{r7, pc}

080075d0 <USBD_LL_FlushEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_FlushEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80075d0:	b580      	push	{r7, lr}
 80075d2:	b084      	sub	sp, #16
 80075d4:	af00      	add	r7, sp, #0
 80075d6:	6078      	str	r0, [r7, #4]
 80075d8:	460b      	mov	r3, r1
 80075da:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80075dc:	2300      	movs	r3, #0
 80075de:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80075e0:	2300      	movs	r3, #0
 80075e2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Flush(pdev->pData, ep_addr);
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80075ea:	78fa      	ldrb	r2, [r7, #3]
 80075ec:	4611      	mov	r1, r2
 80075ee:	4618      	mov	r0, r3
 80075f0:	f7fa fb1a 	bl	8001c28 <HAL_PCD_EP_Flush>
 80075f4:	4603      	mov	r3, r0
 80075f6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80075f8:	7bfb      	ldrb	r3, [r7, #15]
 80075fa:	4618      	mov	r0, r3
 80075fc:	f000 f8fe 	bl	80077fc <USBD_Get_USB_Status>
 8007600:	4603      	mov	r3, r0
 8007602:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007604:	7bbb      	ldrb	r3, [r7, #14]
}
 8007606:	4618      	mov	r0, r3
 8007608:	3710      	adds	r7, #16
 800760a:	46bd      	mov	sp, r7
 800760c:	bd80      	pop	{r7, pc}

0800760e <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800760e:	b580      	push	{r7, lr}
 8007610:	b084      	sub	sp, #16
 8007612:	af00      	add	r7, sp, #0
 8007614:	6078      	str	r0, [r7, #4]
 8007616:	460b      	mov	r3, r1
 8007618:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800761a:	2300      	movs	r3, #0
 800761c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800761e:	2300      	movs	r3, #0
 8007620:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007628:	78fa      	ldrb	r2, [r7, #3]
 800762a:	4611      	mov	r1, r2
 800762c:	4618      	mov	r0, r3
 800762e:	f7fa fa41 	bl	8001ab4 <HAL_PCD_EP_SetStall>
 8007632:	4603      	mov	r3, r0
 8007634:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007636:	7bfb      	ldrb	r3, [r7, #15]
 8007638:	4618      	mov	r0, r3
 800763a:	f000 f8df 	bl	80077fc <USBD_Get_USB_Status>
 800763e:	4603      	mov	r3, r0
 8007640:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007642:	7bbb      	ldrb	r3, [r7, #14]
}
 8007644:	4618      	mov	r0, r3
 8007646:	3710      	adds	r7, #16
 8007648:	46bd      	mov	sp, r7
 800764a:	bd80      	pop	{r7, pc}

0800764c <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800764c:	b580      	push	{r7, lr}
 800764e:	b084      	sub	sp, #16
 8007650:	af00      	add	r7, sp, #0
 8007652:	6078      	str	r0, [r7, #4]
 8007654:	460b      	mov	r3, r1
 8007656:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007658:	2300      	movs	r3, #0
 800765a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800765c:	2300      	movs	r3, #0
 800765e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007666:	78fa      	ldrb	r2, [r7, #3]
 8007668:	4611      	mov	r1, r2
 800766a:	4618      	mov	r0, r3
 800766c:	f7fa fa86 	bl	8001b7c <HAL_PCD_EP_ClrStall>
 8007670:	4603      	mov	r3, r0
 8007672:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007674:	7bfb      	ldrb	r3, [r7, #15]
 8007676:	4618      	mov	r0, r3
 8007678:	f000 f8c0 	bl	80077fc <USBD_Get_USB_Status>
 800767c:	4603      	mov	r3, r0
 800767e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007680:	7bbb      	ldrb	r3, [r7, #14]
}
 8007682:	4618      	mov	r0, r3
 8007684:	3710      	adds	r7, #16
 8007686:	46bd      	mov	sp, r7
 8007688:	bd80      	pop	{r7, pc}

0800768a <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800768a:	b480      	push	{r7}
 800768c:	b085      	sub	sp, #20
 800768e:	af00      	add	r7, sp, #0
 8007690:	6078      	str	r0, [r7, #4]
 8007692:	460b      	mov	r3, r1
 8007694:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800769c:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800769e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	da0b      	bge.n	80076be <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80076a6:	78fb      	ldrb	r3, [r7, #3]
 80076a8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80076ac:	68f9      	ldr	r1, [r7, #12]
 80076ae:	4613      	mov	r3, r2
 80076b0:	00db      	lsls	r3, r3, #3
 80076b2:	1a9b      	subs	r3, r3, r2
 80076b4:	009b      	lsls	r3, r3, #2
 80076b6:	440b      	add	r3, r1
 80076b8:	333e      	adds	r3, #62	; 0x3e
 80076ba:	781b      	ldrb	r3, [r3, #0]
 80076bc:	e00b      	b.n	80076d6 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80076be:	78fb      	ldrb	r3, [r7, #3]
 80076c0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80076c4:	68f9      	ldr	r1, [r7, #12]
 80076c6:	4613      	mov	r3, r2
 80076c8:	00db      	lsls	r3, r3, #3
 80076ca:	1a9b      	subs	r3, r3, r2
 80076cc:	009b      	lsls	r3, r3, #2
 80076ce:	440b      	add	r3, r1
 80076d0:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80076d4:	781b      	ldrb	r3, [r3, #0]
  }
}
 80076d6:	4618      	mov	r0, r3
 80076d8:	3714      	adds	r7, #20
 80076da:	46bd      	mov	sp, r7
 80076dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076e0:	4770      	bx	lr

080076e2 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80076e2:	b580      	push	{r7, lr}
 80076e4:	b084      	sub	sp, #16
 80076e6:	af00      	add	r7, sp, #0
 80076e8:	6078      	str	r0, [r7, #4]
 80076ea:	460b      	mov	r3, r1
 80076ec:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80076ee:	2300      	movs	r3, #0
 80076f0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80076f2:	2300      	movs	r3, #0
 80076f4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80076fc:	78fa      	ldrb	r2, [r7, #3]
 80076fe:	4611      	mov	r1, r2
 8007700:	4618      	mov	r0, r3
 8007702:	f7fa f853 	bl	80017ac <HAL_PCD_SetAddress>
 8007706:	4603      	mov	r3, r0
 8007708:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800770a:	7bfb      	ldrb	r3, [r7, #15]
 800770c:	4618      	mov	r0, r3
 800770e:	f000 f875 	bl	80077fc <USBD_Get_USB_Status>
 8007712:	4603      	mov	r3, r0
 8007714:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007716:	7bbb      	ldrb	r3, [r7, #14]
}
 8007718:	4618      	mov	r0, r3
 800771a:	3710      	adds	r7, #16
 800771c:	46bd      	mov	sp, r7
 800771e:	bd80      	pop	{r7, pc}

08007720 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007720:	b580      	push	{r7, lr}
 8007722:	b086      	sub	sp, #24
 8007724:	af00      	add	r7, sp, #0
 8007726:	60f8      	str	r0, [r7, #12]
 8007728:	607a      	str	r2, [r7, #4]
 800772a:	603b      	str	r3, [r7, #0]
 800772c:	460b      	mov	r3, r1
 800772e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007730:	2300      	movs	r3, #0
 8007732:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007734:	2300      	movs	r3, #0
 8007736:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800773e:	7af9      	ldrb	r1, [r7, #11]
 8007740:	683b      	ldr	r3, [r7, #0]
 8007742:	687a      	ldr	r2, [r7, #4]
 8007744:	f7fa f96c 	bl	8001a20 <HAL_PCD_EP_Transmit>
 8007748:	4603      	mov	r3, r0
 800774a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800774c:	7dfb      	ldrb	r3, [r7, #23]
 800774e:	4618      	mov	r0, r3
 8007750:	f000 f854 	bl	80077fc <USBD_Get_USB_Status>
 8007754:	4603      	mov	r3, r0
 8007756:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007758:	7dbb      	ldrb	r3, [r7, #22]
}
 800775a:	4618      	mov	r0, r3
 800775c:	3718      	adds	r7, #24
 800775e:	46bd      	mov	sp, r7
 8007760:	bd80      	pop	{r7, pc}

08007762 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007762:	b580      	push	{r7, lr}
 8007764:	b086      	sub	sp, #24
 8007766:	af00      	add	r7, sp, #0
 8007768:	60f8      	str	r0, [r7, #12]
 800776a:	607a      	str	r2, [r7, #4]
 800776c:	603b      	str	r3, [r7, #0]
 800776e:	460b      	mov	r3, r1
 8007770:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007772:	2300      	movs	r3, #0
 8007774:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007776:	2300      	movs	r3, #0
 8007778:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8007780:	7af9      	ldrb	r1, [r7, #11]
 8007782:	683b      	ldr	r3, [r7, #0]
 8007784:	687a      	ldr	r2, [r7, #4]
 8007786:	f7fa f8e8 	bl	800195a <HAL_PCD_EP_Receive>
 800778a:	4603      	mov	r3, r0
 800778c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800778e:	7dfb      	ldrb	r3, [r7, #23]
 8007790:	4618      	mov	r0, r3
 8007792:	f000 f833 	bl	80077fc <USBD_Get_USB_Status>
 8007796:	4603      	mov	r3, r0
 8007798:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800779a:	7dbb      	ldrb	r3, [r7, #22]
}
 800779c:	4618      	mov	r0, r3
 800779e:	3718      	adds	r7, #24
 80077a0:	46bd      	mov	sp, r7
 80077a2:	bd80      	pop	{r7, pc}

080077a4 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80077a4:	b580      	push	{r7, lr}
 80077a6:	b082      	sub	sp, #8
 80077a8:	af00      	add	r7, sp, #0
 80077aa:	6078      	str	r0, [r7, #4]
 80077ac:	460b      	mov	r3, r1
 80077ae:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80077b6:	78fa      	ldrb	r2, [r7, #3]
 80077b8:	4611      	mov	r1, r2
 80077ba:	4618      	mov	r0, r3
 80077bc:	f7fa f918 	bl	80019f0 <HAL_PCD_EP_GetRxCount>
 80077c0:	4603      	mov	r3, r0
}
 80077c2:	4618      	mov	r0, r3
 80077c4:	3708      	adds	r7, #8
 80077c6:	46bd      	mov	sp, r7
 80077c8:	bd80      	pop	{r7, pc}
	...

080077cc <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80077cc:	b480      	push	{r7}
 80077ce:	b083      	sub	sp, #12
 80077d0:	af00      	add	r7, sp, #0
 80077d2:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_MSC_BOT_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80077d4:	4b03      	ldr	r3, [pc, #12]	; (80077e4 <USBD_static_malloc+0x18>)
}
 80077d6:	4618      	mov	r0, r3
 80077d8:	370c      	adds	r7, #12
 80077da:	46bd      	mov	sp, r7
 80077dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077e0:	4770      	bx	lr
 80077e2:	bf00      	nop
 80077e4:	20000a60 	.word	0x20000a60

080077e8 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80077e8:	b480      	push	{r7}
 80077ea:	b083      	sub	sp, #12
 80077ec:	af00      	add	r7, sp, #0
 80077ee:	6078      	str	r0, [r7, #4]

}
 80077f0:	bf00      	nop
 80077f2:	370c      	adds	r7, #12
 80077f4:	46bd      	mov	sp, r7
 80077f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077fa:	4770      	bx	lr

080077fc <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80077fc:	b480      	push	{r7}
 80077fe:	b085      	sub	sp, #20
 8007800:	af00      	add	r7, sp, #0
 8007802:	4603      	mov	r3, r0
 8007804:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007806:	2300      	movs	r3, #0
 8007808:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800780a:	79fb      	ldrb	r3, [r7, #7]
 800780c:	2b03      	cmp	r3, #3
 800780e:	d817      	bhi.n	8007840 <USBD_Get_USB_Status+0x44>
 8007810:	a201      	add	r2, pc, #4	; (adr r2, 8007818 <USBD_Get_USB_Status+0x1c>)
 8007812:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007816:	bf00      	nop
 8007818:	08007829 	.word	0x08007829
 800781c:	0800782f 	.word	0x0800782f
 8007820:	08007835 	.word	0x08007835
 8007824:	0800783b 	.word	0x0800783b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8007828:	2300      	movs	r3, #0
 800782a:	73fb      	strb	r3, [r7, #15]
    break;
 800782c:	e00b      	b.n	8007846 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800782e:	2303      	movs	r3, #3
 8007830:	73fb      	strb	r3, [r7, #15]
    break;
 8007832:	e008      	b.n	8007846 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007834:	2301      	movs	r3, #1
 8007836:	73fb      	strb	r3, [r7, #15]
    break;
 8007838:	e005      	b.n	8007846 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800783a:	2303      	movs	r3, #3
 800783c:	73fb      	strb	r3, [r7, #15]
    break;
 800783e:	e002      	b.n	8007846 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8007840:	2303      	movs	r3, #3
 8007842:	73fb      	strb	r3, [r7, #15]
    break;
 8007844:	bf00      	nop
  }
  return usb_status;
 8007846:	7bfb      	ldrb	r3, [r7, #15]
}
 8007848:	4618      	mov	r0, r3
 800784a:	3714      	adds	r7, #20
 800784c:	46bd      	mov	sp, r7
 800784e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007852:	4770      	bx	lr

08007854 <__libc_init_array>:
 8007854:	b570      	push	{r4, r5, r6, lr}
 8007856:	4d0d      	ldr	r5, [pc, #52]	; (800788c <__libc_init_array+0x38>)
 8007858:	4c0d      	ldr	r4, [pc, #52]	; (8007890 <__libc_init_array+0x3c>)
 800785a:	1b64      	subs	r4, r4, r5
 800785c:	10a4      	asrs	r4, r4, #2
 800785e:	2600      	movs	r6, #0
 8007860:	42a6      	cmp	r6, r4
 8007862:	d109      	bne.n	8007878 <__libc_init_array+0x24>
 8007864:	4d0b      	ldr	r5, [pc, #44]	; (8007894 <__libc_init_array+0x40>)
 8007866:	4c0c      	ldr	r4, [pc, #48]	; (8007898 <__libc_init_array+0x44>)
 8007868:	f000 f820 	bl	80078ac <_init>
 800786c:	1b64      	subs	r4, r4, r5
 800786e:	10a4      	asrs	r4, r4, #2
 8007870:	2600      	movs	r6, #0
 8007872:	42a6      	cmp	r6, r4
 8007874:	d105      	bne.n	8007882 <__libc_init_array+0x2e>
 8007876:	bd70      	pop	{r4, r5, r6, pc}
 8007878:	f855 3b04 	ldr.w	r3, [r5], #4
 800787c:	4798      	blx	r3
 800787e:	3601      	adds	r6, #1
 8007880:	e7ee      	b.n	8007860 <__libc_init_array+0xc>
 8007882:	f855 3b04 	ldr.w	r3, [r5], #4
 8007886:	4798      	blx	r3
 8007888:	3601      	adds	r6, #1
 800788a:	e7f2      	b.n	8007872 <__libc_init_array+0x1e>
 800788c:	08007944 	.word	0x08007944
 8007890:	08007944 	.word	0x08007944
 8007894:	08007944 	.word	0x08007944
 8007898:	08007948 	.word	0x08007948

0800789c <memset>:
 800789c:	4402      	add	r2, r0
 800789e:	4603      	mov	r3, r0
 80078a0:	4293      	cmp	r3, r2
 80078a2:	d100      	bne.n	80078a6 <memset+0xa>
 80078a4:	4770      	bx	lr
 80078a6:	f803 1b01 	strb.w	r1, [r3], #1
 80078aa:	e7f9      	b.n	80078a0 <memset+0x4>

080078ac <_init>:
 80078ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80078ae:	bf00      	nop
 80078b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80078b2:	bc08      	pop	{r3}
 80078b4:	469e      	mov	lr, r3
 80078b6:	4770      	bx	lr

080078b8 <_fini>:
 80078b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80078ba:	bf00      	nop
 80078bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80078be:	bc08      	pop	{r3}
 80078c0:	469e      	mov	lr, r3
 80078c2:	4770      	bx	lr
