
msc.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007724  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000078  080078bc  080078bc  000178bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007934  08007934  00020164  2**0
                  CONTENTS
  4 .ARM          00000008  08007934  08007934  00017934  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800793c  0800793c  00020164  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800793c  0800793c  0001793c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007940  08007940  00017940  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000164  20000000  08007944  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000b74  20000164  08007aa8  00020164  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000cd8  08007aa8  00020cd8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020164  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020194  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000dffa  00000000  00000000  000201d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002f59  00000000  00000000  0002e1d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000c38  00000000  00000000  00031130  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000008ee  00000000  00000000  00031d68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00018add  00000000  00000000  00032656  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00010d15  00000000  00000000  0004b133  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00087099  00000000  00000000  0005be48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002f8c  00000000  00000000  000e2ee4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004a  00000000  00000000  000e5e70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000164 	.word	0x20000164
 80001b4:	00000000 	.word	0x00000000
 80001b8:	080078a4 	.word	0x080078a4

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000168 	.word	0x20000168
 80001d4:	080078a4 	.word	0x080078a4

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001ec:	f000 b970 	b.w	80004d0 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9e08      	ldr	r6, [sp, #32]
 800020e:	460d      	mov	r5, r1
 8000210:	4604      	mov	r4, r0
 8000212:	460f      	mov	r7, r1
 8000214:	2b00      	cmp	r3, #0
 8000216:	d14a      	bne.n	80002ae <__udivmoddi4+0xa6>
 8000218:	428a      	cmp	r2, r1
 800021a:	4694      	mov	ip, r2
 800021c:	d965      	bls.n	80002ea <__udivmoddi4+0xe2>
 800021e:	fab2 f382 	clz	r3, r2
 8000222:	b143      	cbz	r3, 8000236 <__udivmoddi4+0x2e>
 8000224:	fa02 fc03 	lsl.w	ip, r2, r3
 8000228:	f1c3 0220 	rsb	r2, r3, #32
 800022c:	409f      	lsls	r7, r3
 800022e:	fa20 f202 	lsr.w	r2, r0, r2
 8000232:	4317      	orrs	r7, r2
 8000234:	409c      	lsls	r4, r3
 8000236:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800023a:	fa1f f58c 	uxth.w	r5, ip
 800023e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000242:	0c22      	lsrs	r2, r4, #16
 8000244:	fb0e 7711 	mls	r7, lr, r1, r7
 8000248:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800024c:	fb01 f005 	mul.w	r0, r1, r5
 8000250:	4290      	cmp	r0, r2
 8000252:	d90a      	bls.n	800026a <__udivmoddi4+0x62>
 8000254:	eb1c 0202 	adds.w	r2, ip, r2
 8000258:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 800025c:	f080 811c 	bcs.w	8000498 <__udivmoddi4+0x290>
 8000260:	4290      	cmp	r0, r2
 8000262:	f240 8119 	bls.w	8000498 <__udivmoddi4+0x290>
 8000266:	3902      	subs	r1, #2
 8000268:	4462      	add	r2, ip
 800026a:	1a12      	subs	r2, r2, r0
 800026c:	b2a4      	uxth	r4, r4
 800026e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000272:	fb0e 2210 	mls	r2, lr, r0, r2
 8000276:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800027a:	fb00 f505 	mul.w	r5, r0, r5
 800027e:	42a5      	cmp	r5, r4
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x90>
 8000282:	eb1c 0404 	adds.w	r4, ip, r4
 8000286:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 800028a:	f080 8107 	bcs.w	800049c <__udivmoddi4+0x294>
 800028e:	42a5      	cmp	r5, r4
 8000290:	f240 8104 	bls.w	800049c <__udivmoddi4+0x294>
 8000294:	4464      	add	r4, ip
 8000296:	3802      	subs	r0, #2
 8000298:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800029c:	1b64      	subs	r4, r4, r5
 800029e:	2100      	movs	r1, #0
 80002a0:	b11e      	cbz	r6, 80002aa <__udivmoddi4+0xa2>
 80002a2:	40dc      	lsrs	r4, r3
 80002a4:	2300      	movs	r3, #0
 80002a6:	e9c6 4300 	strd	r4, r3, [r6]
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d908      	bls.n	80002c4 <__udivmoddi4+0xbc>
 80002b2:	2e00      	cmp	r6, #0
 80002b4:	f000 80ed 	beq.w	8000492 <__udivmoddi4+0x28a>
 80002b8:	2100      	movs	r1, #0
 80002ba:	e9c6 0500 	strd	r0, r5, [r6]
 80002be:	4608      	mov	r0, r1
 80002c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c4:	fab3 f183 	clz	r1, r3
 80002c8:	2900      	cmp	r1, #0
 80002ca:	d149      	bne.n	8000360 <__udivmoddi4+0x158>
 80002cc:	42ab      	cmp	r3, r5
 80002ce:	d302      	bcc.n	80002d6 <__udivmoddi4+0xce>
 80002d0:	4282      	cmp	r2, r0
 80002d2:	f200 80f8 	bhi.w	80004c6 <__udivmoddi4+0x2be>
 80002d6:	1a84      	subs	r4, r0, r2
 80002d8:	eb65 0203 	sbc.w	r2, r5, r3
 80002dc:	2001      	movs	r0, #1
 80002de:	4617      	mov	r7, r2
 80002e0:	2e00      	cmp	r6, #0
 80002e2:	d0e2      	beq.n	80002aa <__udivmoddi4+0xa2>
 80002e4:	e9c6 4700 	strd	r4, r7, [r6]
 80002e8:	e7df      	b.n	80002aa <__udivmoddi4+0xa2>
 80002ea:	b902      	cbnz	r2, 80002ee <__udivmoddi4+0xe6>
 80002ec:	deff      	udf	#255	; 0xff
 80002ee:	fab2 f382 	clz	r3, r2
 80002f2:	2b00      	cmp	r3, #0
 80002f4:	f040 8090 	bne.w	8000418 <__udivmoddi4+0x210>
 80002f8:	1a8a      	subs	r2, r1, r2
 80002fa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002fe:	fa1f fe8c 	uxth.w	lr, ip
 8000302:	2101      	movs	r1, #1
 8000304:	fbb2 f5f7 	udiv	r5, r2, r7
 8000308:	fb07 2015 	mls	r0, r7, r5, r2
 800030c:	0c22      	lsrs	r2, r4, #16
 800030e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000312:	fb0e f005 	mul.w	r0, lr, r5
 8000316:	4290      	cmp	r0, r2
 8000318:	d908      	bls.n	800032c <__udivmoddi4+0x124>
 800031a:	eb1c 0202 	adds.w	r2, ip, r2
 800031e:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x122>
 8000324:	4290      	cmp	r0, r2
 8000326:	f200 80cb 	bhi.w	80004c0 <__udivmoddi4+0x2b8>
 800032a:	4645      	mov	r5, r8
 800032c:	1a12      	subs	r2, r2, r0
 800032e:	b2a4      	uxth	r4, r4
 8000330:	fbb2 f0f7 	udiv	r0, r2, r7
 8000334:	fb07 2210 	mls	r2, r7, r0, r2
 8000338:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800033c:	fb0e fe00 	mul.w	lr, lr, r0
 8000340:	45a6      	cmp	lr, r4
 8000342:	d908      	bls.n	8000356 <__udivmoddi4+0x14e>
 8000344:	eb1c 0404 	adds.w	r4, ip, r4
 8000348:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 800034c:	d202      	bcs.n	8000354 <__udivmoddi4+0x14c>
 800034e:	45a6      	cmp	lr, r4
 8000350:	f200 80bb 	bhi.w	80004ca <__udivmoddi4+0x2c2>
 8000354:	4610      	mov	r0, r2
 8000356:	eba4 040e 	sub.w	r4, r4, lr
 800035a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800035e:	e79f      	b.n	80002a0 <__udivmoddi4+0x98>
 8000360:	f1c1 0720 	rsb	r7, r1, #32
 8000364:	408b      	lsls	r3, r1
 8000366:	fa22 fc07 	lsr.w	ip, r2, r7
 800036a:	ea4c 0c03 	orr.w	ip, ip, r3
 800036e:	fa05 f401 	lsl.w	r4, r5, r1
 8000372:	fa20 f307 	lsr.w	r3, r0, r7
 8000376:	40fd      	lsrs	r5, r7
 8000378:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800037c:	4323      	orrs	r3, r4
 800037e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000382:	fa1f fe8c 	uxth.w	lr, ip
 8000386:	fb09 5518 	mls	r5, r9, r8, r5
 800038a:	0c1c      	lsrs	r4, r3, #16
 800038c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000390:	fb08 f50e 	mul.w	r5, r8, lr
 8000394:	42a5      	cmp	r5, r4
 8000396:	fa02 f201 	lsl.w	r2, r2, r1
 800039a:	fa00 f001 	lsl.w	r0, r0, r1
 800039e:	d90b      	bls.n	80003b8 <__udivmoddi4+0x1b0>
 80003a0:	eb1c 0404 	adds.w	r4, ip, r4
 80003a4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003a8:	f080 8088 	bcs.w	80004bc <__udivmoddi4+0x2b4>
 80003ac:	42a5      	cmp	r5, r4
 80003ae:	f240 8085 	bls.w	80004bc <__udivmoddi4+0x2b4>
 80003b2:	f1a8 0802 	sub.w	r8, r8, #2
 80003b6:	4464      	add	r4, ip
 80003b8:	1b64      	subs	r4, r4, r5
 80003ba:	b29d      	uxth	r5, r3
 80003bc:	fbb4 f3f9 	udiv	r3, r4, r9
 80003c0:	fb09 4413 	mls	r4, r9, r3, r4
 80003c4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003c8:	fb03 fe0e 	mul.w	lr, r3, lr
 80003cc:	45a6      	cmp	lr, r4
 80003ce:	d908      	bls.n	80003e2 <__udivmoddi4+0x1da>
 80003d0:	eb1c 0404 	adds.w	r4, ip, r4
 80003d4:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 80003d8:	d26c      	bcs.n	80004b4 <__udivmoddi4+0x2ac>
 80003da:	45a6      	cmp	lr, r4
 80003dc:	d96a      	bls.n	80004b4 <__udivmoddi4+0x2ac>
 80003de:	3b02      	subs	r3, #2
 80003e0:	4464      	add	r4, ip
 80003e2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003e6:	fba3 9502 	umull	r9, r5, r3, r2
 80003ea:	eba4 040e 	sub.w	r4, r4, lr
 80003ee:	42ac      	cmp	r4, r5
 80003f0:	46c8      	mov	r8, r9
 80003f2:	46ae      	mov	lr, r5
 80003f4:	d356      	bcc.n	80004a4 <__udivmoddi4+0x29c>
 80003f6:	d053      	beq.n	80004a0 <__udivmoddi4+0x298>
 80003f8:	b156      	cbz	r6, 8000410 <__udivmoddi4+0x208>
 80003fa:	ebb0 0208 	subs.w	r2, r0, r8
 80003fe:	eb64 040e 	sbc.w	r4, r4, lr
 8000402:	fa04 f707 	lsl.w	r7, r4, r7
 8000406:	40ca      	lsrs	r2, r1
 8000408:	40cc      	lsrs	r4, r1
 800040a:	4317      	orrs	r7, r2
 800040c:	e9c6 7400 	strd	r7, r4, [r6]
 8000410:	4618      	mov	r0, r3
 8000412:	2100      	movs	r1, #0
 8000414:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000418:	f1c3 0120 	rsb	r1, r3, #32
 800041c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000420:	fa20 f201 	lsr.w	r2, r0, r1
 8000424:	fa25 f101 	lsr.w	r1, r5, r1
 8000428:	409d      	lsls	r5, r3
 800042a:	432a      	orrs	r2, r5
 800042c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000430:	fa1f fe8c 	uxth.w	lr, ip
 8000434:	fbb1 f0f7 	udiv	r0, r1, r7
 8000438:	fb07 1510 	mls	r5, r7, r0, r1
 800043c:	0c11      	lsrs	r1, r2, #16
 800043e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000442:	fb00 f50e 	mul.w	r5, r0, lr
 8000446:	428d      	cmp	r5, r1
 8000448:	fa04 f403 	lsl.w	r4, r4, r3
 800044c:	d908      	bls.n	8000460 <__udivmoddi4+0x258>
 800044e:	eb1c 0101 	adds.w	r1, ip, r1
 8000452:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000456:	d22f      	bcs.n	80004b8 <__udivmoddi4+0x2b0>
 8000458:	428d      	cmp	r5, r1
 800045a:	d92d      	bls.n	80004b8 <__udivmoddi4+0x2b0>
 800045c:	3802      	subs	r0, #2
 800045e:	4461      	add	r1, ip
 8000460:	1b49      	subs	r1, r1, r5
 8000462:	b292      	uxth	r2, r2
 8000464:	fbb1 f5f7 	udiv	r5, r1, r7
 8000468:	fb07 1115 	mls	r1, r7, r5, r1
 800046c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000470:	fb05 f10e 	mul.w	r1, r5, lr
 8000474:	4291      	cmp	r1, r2
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x282>
 8000478:	eb1c 0202 	adds.w	r2, ip, r2
 800047c:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000480:	d216      	bcs.n	80004b0 <__udivmoddi4+0x2a8>
 8000482:	4291      	cmp	r1, r2
 8000484:	d914      	bls.n	80004b0 <__udivmoddi4+0x2a8>
 8000486:	3d02      	subs	r5, #2
 8000488:	4462      	add	r2, ip
 800048a:	1a52      	subs	r2, r2, r1
 800048c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000490:	e738      	b.n	8000304 <__udivmoddi4+0xfc>
 8000492:	4631      	mov	r1, r6
 8000494:	4630      	mov	r0, r6
 8000496:	e708      	b.n	80002aa <__udivmoddi4+0xa2>
 8000498:	4639      	mov	r1, r7
 800049a:	e6e6      	b.n	800026a <__udivmoddi4+0x62>
 800049c:	4610      	mov	r0, r2
 800049e:	e6fb      	b.n	8000298 <__udivmoddi4+0x90>
 80004a0:	4548      	cmp	r0, r9
 80004a2:	d2a9      	bcs.n	80003f8 <__udivmoddi4+0x1f0>
 80004a4:	ebb9 0802 	subs.w	r8, r9, r2
 80004a8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004ac:	3b01      	subs	r3, #1
 80004ae:	e7a3      	b.n	80003f8 <__udivmoddi4+0x1f0>
 80004b0:	4645      	mov	r5, r8
 80004b2:	e7ea      	b.n	800048a <__udivmoddi4+0x282>
 80004b4:	462b      	mov	r3, r5
 80004b6:	e794      	b.n	80003e2 <__udivmoddi4+0x1da>
 80004b8:	4640      	mov	r0, r8
 80004ba:	e7d1      	b.n	8000460 <__udivmoddi4+0x258>
 80004bc:	46d0      	mov	r8, sl
 80004be:	e77b      	b.n	80003b8 <__udivmoddi4+0x1b0>
 80004c0:	3d02      	subs	r5, #2
 80004c2:	4462      	add	r2, ip
 80004c4:	e732      	b.n	800032c <__udivmoddi4+0x124>
 80004c6:	4608      	mov	r0, r1
 80004c8:	e70a      	b.n	80002e0 <__udivmoddi4+0xd8>
 80004ca:	4464      	add	r4, ip
 80004cc:	3802      	subs	r0, #2
 80004ce:	e742      	b.n	8000356 <__udivmoddi4+0x14e>

080004d0 <__aeabi_idiv0>:
 80004d0:	4770      	bx	lr
 80004d2:	bf00      	nop

080004d4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80004d4:	b480      	push	{r7}
 80004d6:	b083      	sub	sp, #12
 80004d8:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80004da:	2300      	movs	r3, #0
 80004dc:	607b      	str	r3, [r7, #4]
 80004de:	4b10      	ldr	r3, [pc, #64]	; (8000520 <MX_GPIO_Init+0x4c>)
 80004e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004e2:	4a0f      	ldr	r2, [pc, #60]	; (8000520 <MX_GPIO_Init+0x4c>)
 80004e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80004e8:	6313      	str	r3, [r2, #48]	; 0x30
 80004ea:	4b0d      	ldr	r3, [pc, #52]	; (8000520 <MX_GPIO_Init+0x4c>)
 80004ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80004f2:	607b      	str	r3, [r7, #4]
 80004f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004f6:	2300      	movs	r3, #0
 80004f8:	603b      	str	r3, [r7, #0]
 80004fa:	4b09      	ldr	r3, [pc, #36]	; (8000520 <MX_GPIO_Init+0x4c>)
 80004fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004fe:	4a08      	ldr	r2, [pc, #32]	; (8000520 <MX_GPIO_Init+0x4c>)
 8000500:	f043 0301 	orr.w	r3, r3, #1
 8000504:	6313      	str	r3, [r2, #48]	; 0x30
 8000506:	4b06      	ldr	r3, [pc, #24]	; (8000520 <MX_GPIO_Init+0x4c>)
 8000508:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800050a:	f003 0301 	and.w	r3, r3, #1
 800050e:	603b      	str	r3, [r7, #0]
 8000510:	683b      	ldr	r3, [r7, #0]

}
 8000512:	bf00      	nop
 8000514:	370c      	adds	r7, #12
 8000516:	46bd      	mov	sp, r7
 8000518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800051c:	4770      	bx	lr
 800051e:	bf00      	nop
 8000520:	40023800 	.word	0x40023800

08000524 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000524:	b580      	push	{r7, lr}
 8000526:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000528:	f000 f90e 	bl	8000748 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800052c:	f000 f806 	bl	800053c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000530:	f7ff ffd0 	bl	80004d4 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 8000534:	f006 fcbc 	bl	8006eb0 <MX_USB_DEVICE_Init>
  //MX_USB_DEVICE_Init();
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000538:	e7fe      	b.n	8000538 <main+0x14>
	...

0800053c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800053c:	b580      	push	{r7, lr}
 800053e:	b094      	sub	sp, #80	; 0x50
 8000540:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000542:	f107 0320 	add.w	r3, r7, #32
 8000546:	2230      	movs	r2, #48	; 0x30
 8000548:	2100      	movs	r1, #0
 800054a:	4618      	mov	r0, r3
 800054c:	f007 f97e 	bl	800784c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000550:	f107 030c 	add.w	r3, r7, #12
 8000554:	2200      	movs	r2, #0
 8000556:	601a      	str	r2, [r3, #0]
 8000558:	605a      	str	r2, [r3, #4]
 800055a:	609a      	str	r2, [r3, #8]
 800055c:	60da      	str	r2, [r3, #12]
 800055e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000560:	2300      	movs	r3, #0
 8000562:	60bb      	str	r3, [r7, #8]
 8000564:	4b27      	ldr	r3, [pc, #156]	; (8000604 <SystemClock_Config+0xc8>)
 8000566:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000568:	4a26      	ldr	r2, [pc, #152]	; (8000604 <SystemClock_Config+0xc8>)
 800056a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800056e:	6413      	str	r3, [r2, #64]	; 0x40
 8000570:	4b24      	ldr	r3, [pc, #144]	; (8000604 <SystemClock_Config+0xc8>)
 8000572:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000574:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000578:	60bb      	str	r3, [r7, #8]
 800057a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800057c:	2300      	movs	r3, #0
 800057e:	607b      	str	r3, [r7, #4]
 8000580:	4b21      	ldr	r3, [pc, #132]	; (8000608 <SystemClock_Config+0xcc>)
 8000582:	681b      	ldr	r3, [r3, #0]
 8000584:	4a20      	ldr	r2, [pc, #128]	; (8000608 <SystemClock_Config+0xcc>)
 8000586:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800058a:	6013      	str	r3, [r2, #0]
 800058c:	4b1e      	ldr	r3, [pc, #120]	; (8000608 <SystemClock_Config+0xcc>)
 800058e:	681b      	ldr	r3, [r3, #0]
 8000590:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000594:	607b      	str	r3, [r7, #4]
 8000596:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000598:	2301      	movs	r3, #1
 800059a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800059c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80005a0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005a2:	2302      	movs	r3, #2
 80005a4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005a6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80005aa:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 80005ac:	2319      	movs	r3, #25
 80005ae:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 80005b0:	23c0      	movs	r3, #192	; 0xc0
 80005b2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005b4:	2302      	movs	r3, #2
 80005b6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80005b8:	2304      	movs	r3, #4
 80005ba:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005bc:	f107 0320 	add.w	r3, r7, #32
 80005c0:	4618      	mov	r0, r3
 80005c2:	f001 fd9d 	bl	8002100 <HAL_RCC_OscConfig>
 80005c6:	4603      	mov	r3, r0
 80005c8:	2b00      	cmp	r3, #0
 80005ca:	d001      	beq.n	80005d0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80005cc:	f000 f81e 	bl	800060c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005d0:	230f      	movs	r3, #15
 80005d2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005d4:	2302      	movs	r3, #2
 80005d6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005d8:	2300      	movs	r3, #0
 80005da:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80005dc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005e0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005e2:	2300      	movs	r3, #0
 80005e4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80005e6:	f107 030c 	add.w	r3, r7, #12
 80005ea:	2103      	movs	r1, #3
 80005ec:	4618      	mov	r0, r3
 80005ee:	f001 ffff 	bl	80025f0 <HAL_RCC_ClockConfig>
 80005f2:	4603      	mov	r3, r0
 80005f4:	2b00      	cmp	r3, #0
 80005f6:	d001      	beq.n	80005fc <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80005f8:	f000 f808 	bl	800060c <Error_Handler>
  }
}
 80005fc:	bf00      	nop
 80005fe:	3750      	adds	r7, #80	; 0x50
 8000600:	46bd      	mov	sp, r7
 8000602:	bd80      	pop	{r7, pc}
 8000604:	40023800 	.word	0x40023800
 8000608:	40007000 	.word	0x40007000

0800060c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800060c:	b480      	push	{r7}
 800060e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000610:	b672      	cpsid	i
}
 8000612:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000614:	e7fe      	b.n	8000614 <Error_Handler+0x8>
	...

08000618 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000618:	b480      	push	{r7}
 800061a:	b083      	sub	sp, #12
 800061c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800061e:	2300      	movs	r3, #0
 8000620:	607b      	str	r3, [r7, #4]
 8000622:	4b10      	ldr	r3, [pc, #64]	; (8000664 <HAL_MspInit+0x4c>)
 8000624:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000626:	4a0f      	ldr	r2, [pc, #60]	; (8000664 <HAL_MspInit+0x4c>)
 8000628:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800062c:	6453      	str	r3, [r2, #68]	; 0x44
 800062e:	4b0d      	ldr	r3, [pc, #52]	; (8000664 <HAL_MspInit+0x4c>)
 8000630:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000632:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000636:	607b      	str	r3, [r7, #4]
 8000638:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800063a:	2300      	movs	r3, #0
 800063c:	603b      	str	r3, [r7, #0]
 800063e:	4b09      	ldr	r3, [pc, #36]	; (8000664 <HAL_MspInit+0x4c>)
 8000640:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000642:	4a08      	ldr	r2, [pc, #32]	; (8000664 <HAL_MspInit+0x4c>)
 8000644:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000648:	6413      	str	r3, [r2, #64]	; 0x40
 800064a:	4b06      	ldr	r3, [pc, #24]	; (8000664 <HAL_MspInit+0x4c>)
 800064c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800064e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000652:	603b      	str	r3, [r7, #0]
 8000654:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000656:	bf00      	nop
 8000658:	370c      	adds	r7, #12
 800065a:	46bd      	mov	sp, r7
 800065c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000660:	4770      	bx	lr
 8000662:	bf00      	nop
 8000664:	40023800 	.word	0x40023800

08000668 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000668:	b480      	push	{r7}
 800066a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800066c:	e7fe      	b.n	800066c <NMI_Handler+0x4>

0800066e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800066e:	b480      	push	{r7}
 8000670:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000672:	e7fe      	b.n	8000672 <HardFault_Handler+0x4>

08000674 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000674:	b480      	push	{r7}
 8000676:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000678:	e7fe      	b.n	8000678 <MemManage_Handler+0x4>

0800067a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800067a:	b480      	push	{r7}
 800067c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800067e:	e7fe      	b.n	800067e <BusFault_Handler+0x4>

08000680 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000680:	b480      	push	{r7}
 8000682:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000684:	e7fe      	b.n	8000684 <UsageFault_Handler+0x4>

08000686 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000686:	b480      	push	{r7}
 8000688:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800068a:	bf00      	nop
 800068c:	46bd      	mov	sp, r7
 800068e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000692:	4770      	bx	lr

08000694 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000694:	b480      	push	{r7}
 8000696:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000698:	bf00      	nop
 800069a:	46bd      	mov	sp, r7
 800069c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a0:	4770      	bx	lr

080006a2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80006a2:	b480      	push	{r7}
 80006a4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80006a6:	bf00      	nop
 80006a8:	46bd      	mov	sp, r7
 80006aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ae:	4770      	bx	lr

080006b0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80006b4:	f000 f89a 	bl	80007ec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80006b8:	bf00      	nop
 80006ba:	bd80      	pop	{r7, pc}

080006bc <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80006c0:	4802      	ldr	r0, [pc, #8]	; (80006cc <OTG_FS_IRQHandler+0x10>)
 80006c2:	f000 fcbd 	bl	8001040 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80006c6:	bf00      	nop
 80006c8:	bd80      	pop	{r7, pc}
 80006ca:	bf00      	nop
 80006cc:	20000658 	.word	0x20000658

080006d0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80006d0:	b480      	push	{r7}
 80006d2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80006d4:	4b06      	ldr	r3, [pc, #24]	; (80006f0 <SystemInit+0x20>)
 80006d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80006da:	4a05      	ldr	r2, [pc, #20]	; (80006f0 <SystemInit+0x20>)
 80006dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80006e0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80006e4:	bf00      	nop
 80006e6:	46bd      	mov	sp, r7
 80006e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ec:	4770      	bx	lr
 80006ee:	bf00      	nop
 80006f0:	e000ed00 	.word	0xe000ed00

080006f4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80006f4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800072c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80006f8:	480d      	ldr	r0, [pc, #52]	; (8000730 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80006fa:	490e      	ldr	r1, [pc, #56]	; (8000734 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80006fc:	4a0e      	ldr	r2, [pc, #56]	; (8000738 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80006fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000700:	e002      	b.n	8000708 <LoopCopyDataInit>

08000702 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000702:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000704:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000706:	3304      	adds	r3, #4

08000708 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000708:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800070a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800070c:	d3f9      	bcc.n	8000702 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800070e:	4a0b      	ldr	r2, [pc, #44]	; (800073c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000710:	4c0b      	ldr	r4, [pc, #44]	; (8000740 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000712:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000714:	e001      	b.n	800071a <LoopFillZerobss>

08000716 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000716:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000718:	3204      	adds	r2, #4

0800071a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800071a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800071c:	d3fb      	bcc.n	8000716 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800071e:	f7ff ffd7 	bl	80006d0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000722:	f007 f89b 	bl	800785c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000726:	f7ff fefd 	bl	8000524 <main>
  bx  lr    
 800072a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800072c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000730:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000734:	20000164 	.word	0x20000164
  ldr r2, =_sidata
 8000738:	08007944 	.word	0x08007944
  ldr r2, =_sbss
 800073c:	20000164 	.word	0x20000164
  ldr r4, =_ebss
 8000740:	20000cd8 	.word	0x20000cd8

08000744 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000744:	e7fe      	b.n	8000744 <ADC_IRQHandler>
	...

08000748 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800074c:	4b0e      	ldr	r3, [pc, #56]	; (8000788 <HAL_Init+0x40>)
 800074e:	681b      	ldr	r3, [r3, #0]
 8000750:	4a0d      	ldr	r2, [pc, #52]	; (8000788 <HAL_Init+0x40>)
 8000752:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000756:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000758:	4b0b      	ldr	r3, [pc, #44]	; (8000788 <HAL_Init+0x40>)
 800075a:	681b      	ldr	r3, [r3, #0]
 800075c:	4a0a      	ldr	r2, [pc, #40]	; (8000788 <HAL_Init+0x40>)
 800075e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000762:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000764:	4b08      	ldr	r3, [pc, #32]	; (8000788 <HAL_Init+0x40>)
 8000766:	681b      	ldr	r3, [r3, #0]
 8000768:	4a07      	ldr	r2, [pc, #28]	; (8000788 <HAL_Init+0x40>)
 800076a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800076e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000770:	2003      	movs	r0, #3
 8000772:	f000 f94f 	bl	8000a14 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000776:	200f      	movs	r0, #15
 8000778:	f000 f808 	bl	800078c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800077c:	f7ff ff4c 	bl	8000618 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000780:	2300      	movs	r3, #0
}
 8000782:	4618      	mov	r0, r3
 8000784:	bd80      	pop	{r7, pc}
 8000786:	bf00      	nop
 8000788:	40023c00 	.word	0x40023c00

0800078c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	b082      	sub	sp, #8
 8000790:	af00      	add	r7, sp, #0
 8000792:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000794:	4b12      	ldr	r3, [pc, #72]	; (80007e0 <HAL_InitTick+0x54>)
 8000796:	681a      	ldr	r2, [r3, #0]
 8000798:	4b12      	ldr	r3, [pc, #72]	; (80007e4 <HAL_InitTick+0x58>)
 800079a:	781b      	ldrb	r3, [r3, #0]
 800079c:	4619      	mov	r1, r3
 800079e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007a2:	fbb3 f3f1 	udiv	r3, r3, r1
 80007a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80007aa:	4618      	mov	r0, r3
 80007ac:	f000 f967 	bl	8000a7e <HAL_SYSTICK_Config>
 80007b0:	4603      	mov	r3, r0
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d001      	beq.n	80007ba <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80007b6:	2301      	movs	r3, #1
 80007b8:	e00e      	b.n	80007d8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	2b0f      	cmp	r3, #15
 80007be:	d80a      	bhi.n	80007d6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80007c0:	2200      	movs	r2, #0
 80007c2:	6879      	ldr	r1, [r7, #4]
 80007c4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80007c8:	f000 f92f 	bl	8000a2a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80007cc:	4a06      	ldr	r2, [pc, #24]	; (80007e8 <HAL_InitTick+0x5c>)
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80007d2:	2300      	movs	r3, #0
 80007d4:	e000      	b.n	80007d8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80007d6:	2301      	movs	r3, #1
}
 80007d8:	4618      	mov	r0, r3
 80007da:	3708      	adds	r7, #8
 80007dc:	46bd      	mov	sp, r7
 80007de:	bd80      	pop	{r7, pc}
 80007e0:	20000000 	.word	0x20000000
 80007e4:	20000008 	.word	0x20000008
 80007e8:	20000004 	.word	0x20000004

080007ec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80007ec:	b480      	push	{r7}
 80007ee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80007f0:	4b06      	ldr	r3, [pc, #24]	; (800080c <HAL_IncTick+0x20>)
 80007f2:	781b      	ldrb	r3, [r3, #0]
 80007f4:	461a      	mov	r2, r3
 80007f6:	4b06      	ldr	r3, [pc, #24]	; (8000810 <HAL_IncTick+0x24>)
 80007f8:	681b      	ldr	r3, [r3, #0]
 80007fa:	4413      	add	r3, r2
 80007fc:	4a04      	ldr	r2, [pc, #16]	; (8000810 <HAL_IncTick+0x24>)
 80007fe:	6013      	str	r3, [r2, #0]
}
 8000800:	bf00      	nop
 8000802:	46bd      	mov	sp, r7
 8000804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000808:	4770      	bx	lr
 800080a:	bf00      	nop
 800080c:	20000008 	.word	0x20000008
 8000810:	20000180 	.word	0x20000180

08000814 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000814:	b480      	push	{r7}
 8000816:	af00      	add	r7, sp, #0
  return uwTick;
 8000818:	4b03      	ldr	r3, [pc, #12]	; (8000828 <HAL_GetTick+0x14>)
 800081a:	681b      	ldr	r3, [r3, #0]
}
 800081c:	4618      	mov	r0, r3
 800081e:	46bd      	mov	sp, r7
 8000820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000824:	4770      	bx	lr
 8000826:	bf00      	nop
 8000828:	20000180 	.word	0x20000180

0800082c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	b084      	sub	sp, #16
 8000830:	af00      	add	r7, sp, #0
 8000832:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000834:	f7ff ffee 	bl	8000814 <HAL_GetTick>
 8000838:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800083e:	68fb      	ldr	r3, [r7, #12]
 8000840:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000844:	d005      	beq.n	8000852 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000846:	4b0a      	ldr	r3, [pc, #40]	; (8000870 <HAL_Delay+0x44>)
 8000848:	781b      	ldrb	r3, [r3, #0]
 800084a:	461a      	mov	r2, r3
 800084c:	68fb      	ldr	r3, [r7, #12]
 800084e:	4413      	add	r3, r2
 8000850:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000852:	bf00      	nop
 8000854:	f7ff ffde 	bl	8000814 <HAL_GetTick>
 8000858:	4602      	mov	r2, r0
 800085a:	68bb      	ldr	r3, [r7, #8]
 800085c:	1ad3      	subs	r3, r2, r3
 800085e:	68fa      	ldr	r2, [r7, #12]
 8000860:	429a      	cmp	r2, r3
 8000862:	d8f7      	bhi.n	8000854 <HAL_Delay+0x28>
  {
  }
}
 8000864:	bf00      	nop
 8000866:	bf00      	nop
 8000868:	3710      	adds	r7, #16
 800086a:	46bd      	mov	sp, r7
 800086c:	bd80      	pop	{r7, pc}
 800086e:	bf00      	nop
 8000870:	20000008 	.word	0x20000008

08000874 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000874:	b480      	push	{r7}
 8000876:	b085      	sub	sp, #20
 8000878:	af00      	add	r7, sp, #0
 800087a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	f003 0307 	and.w	r3, r3, #7
 8000882:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000884:	4b0c      	ldr	r3, [pc, #48]	; (80008b8 <__NVIC_SetPriorityGrouping+0x44>)
 8000886:	68db      	ldr	r3, [r3, #12]
 8000888:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800088a:	68ba      	ldr	r2, [r7, #8]
 800088c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000890:	4013      	ands	r3, r2
 8000892:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000894:	68fb      	ldr	r3, [r7, #12]
 8000896:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000898:	68bb      	ldr	r3, [r7, #8]
 800089a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800089c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80008a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80008a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80008a6:	4a04      	ldr	r2, [pc, #16]	; (80008b8 <__NVIC_SetPriorityGrouping+0x44>)
 80008a8:	68bb      	ldr	r3, [r7, #8]
 80008aa:	60d3      	str	r3, [r2, #12]
}
 80008ac:	bf00      	nop
 80008ae:	3714      	adds	r7, #20
 80008b0:	46bd      	mov	sp, r7
 80008b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b6:	4770      	bx	lr
 80008b8:	e000ed00 	.word	0xe000ed00

080008bc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80008bc:	b480      	push	{r7}
 80008be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80008c0:	4b04      	ldr	r3, [pc, #16]	; (80008d4 <__NVIC_GetPriorityGrouping+0x18>)
 80008c2:	68db      	ldr	r3, [r3, #12]
 80008c4:	0a1b      	lsrs	r3, r3, #8
 80008c6:	f003 0307 	and.w	r3, r3, #7
}
 80008ca:	4618      	mov	r0, r3
 80008cc:	46bd      	mov	sp, r7
 80008ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d2:	4770      	bx	lr
 80008d4:	e000ed00 	.word	0xe000ed00

080008d8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80008d8:	b480      	push	{r7}
 80008da:	b083      	sub	sp, #12
 80008dc:	af00      	add	r7, sp, #0
 80008de:	4603      	mov	r3, r0
 80008e0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80008e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	db0b      	blt.n	8000902 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80008ea:	79fb      	ldrb	r3, [r7, #7]
 80008ec:	f003 021f 	and.w	r2, r3, #31
 80008f0:	4907      	ldr	r1, [pc, #28]	; (8000910 <__NVIC_EnableIRQ+0x38>)
 80008f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008f6:	095b      	lsrs	r3, r3, #5
 80008f8:	2001      	movs	r0, #1
 80008fa:	fa00 f202 	lsl.w	r2, r0, r2
 80008fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000902:	bf00      	nop
 8000904:	370c      	adds	r7, #12
 8000906:	46bd      	mov	sp, r7
 8000908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800090c:	4770      	bx	lr
 800090e:	bf00      	nop
 8000910:	e000e100 	.word	0xe000e100

08000914 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000914:	b480      	push	{r7}
 8000916:	b083      	sub	sp, #12
 8000918:	af00      	add	r7, sp, #0
 800091a:	4603      	mov	r3, r0
 800091c:	6039      	str	r1, [r7, #0]
 800091e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000920:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000924:	2b00      	cmp	r3, #0
 8000926:	db0a      	blt.n	800093e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000928:	683b      	ldr	r3, [r7, #0]
 800092a:	b2da      	uxtb	r2, r3
 800092c:	490c      	ldr	r1, [pc, #48]	; (8000960 <__NVIC_SetPriority+0x4c>)
 800092e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000932:	0112      	lsls	r2, r2, #4
 8000934:	b2d2      	uxtb	r2, r2
 8000936:	440b      	add	r3, r1
 8000938:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800093c:	e00a      	b.n	8000954 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800093e:	683b      	ldr	r3, [r7, #0]
 8000940:	b2da      	uxtb	r2, r3
 8000942:	4908      	ldr	r1, [pc, #32]	; (8000964 <__NVIC_SetPriority+0x50>)
 8000944:	79fb      	ldrb	r3, [r7, #7]
 8000946:	f003 030f 	and.w	r3, r3, #15
 800094a:	3b04      	subs	r3, #4
 800094c:	0112      	lsls	r2, r2, #4
 800094e:	b2d2      	uxtb	r2, r2
 8000950:	440b      	add	r3, r1
 8000952:	761a      	strb	r2, [r3, #24]
}
 8000954:	bf00      	nop
 8000956:	370c      	adds	r7, #12
 8000958:	46bd      	mov	sp, r7
 800095a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800095e:	4770      	bx	lr
 8000960:	e000e100 	.word	0xe000e100
 8000964:	e000ed00 	.word	0xe000ed00

08000968 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000968:	b480      	push	{r7}
 800096a:	b089      	sub	sp, #36	; 0x24
 800096c:	af00      	add	r7, sp, #0
 800096e:	60f8      	str	r0, [r7, #12]
 8000970:	60b9      	str	r1, [r7, #8]
 8000972:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000974:	68fb      	ldr	r3, [r7, #12]
 8000976:	f003 0307 	and.w	r3, r3, #7
 800097a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800097c:	69fb      	ldr	r3, [r7, #28]
 800097e:	f1c3 0307 	rsb	r3, r3, #7
 8000982:	2b04      	cmp	r3, #4
 8000984:	bf28      	it	cs
 8000986:	2304      	movcs	r3, #4
 8000988:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800098a:	69fb      	ldr	r3, [r7, #28]
 800098c:	3304      	adds	r3, #4
 800098e:	2b06      	cmp	r3, #6
 8000990:	d902      	bls.n	8000998 <NVIC_EncodePriority+0x30>
 8000992:	69fb      	ldr	r3, [r7, #28]
 8000994:	3b03      	subs	r3, #3
 8000996:	e000      	b.n	800099a <NVIC_EncodePriority+0x32>
 8000998:	2300      	movs	r3, #0
 800099a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800099c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80009a0:	69bb      	ldr	r3, [r7, #24]
 80009a2:	fa02 f303 	lsl.w	r3, r2, r3
 80009a6:	43da      	mvns	r2, r3
 80009a8:	68bb      	ldr	r3, [r7, #8]
 80009aa:	401a      	ands	r2, r3
 80009ac:	697b      	ldr	r3, [r7, #20]
 80009ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80009b0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80009b4:	697b      	ldr	r3, [r7, #20]
 80009b6:	fa01 f303 	lsl.w	r3, r1, r3
 80009ba:	43d9      	mvns	r1, r3
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009c0:	4313      	orrs	r3, r2
         );
}
 80009c2:	4618      	mov	r0, r3
 80009c4:	3724      	adds	r7, #36	; 0x24
 80009c6:	46bd      	mov	sp, r7
 80009c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009cc:	4770      	bx	lr
	...

080009d0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	b082      	sub	sp, #8
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	3b01      	subs	r3, #1
 80009dc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80009e0:	d301      	bcc.n	80009e6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80009e2:	2301      	movs	r3, #1
 80009e4:	e00f      	b.n	8000a06 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80009e6:	4a0a      	ldr	r2, [pc, #40]	; (8000a10 <SysTick_Config+0x40>)
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	3b01      	subs	r3, #1
 80009ec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80009ee:	210f      	movs	r1, #15
 80009f0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80009f4:	f7ff ff8e 	bl	8000914 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80009f8:	4b05      	ldr	r3, [pc, #20]	; (8000a10 <SysTick_Config+0x40>)
 80009fa:	2200      	movs	r2, #0
 80009fc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80009fe:	4b04      	ldr	r3, [pc, #16]	; (8000a10 <SysTick_Config+0x40>)
 8000a00:	2207      	movs	r2, #7
 8000a02:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000a04:	2300      	movs	r3, #0
}
 8000a06:	4618      	mov	r0, r3
 8000a08:	3708      	adds	r7, #8
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	bd80      	pop	{r7, pc}
 8000a0e:	bf00      	nop
 8000a10:	e000e010 	.word	0xe000e010

08000a14 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b082      	sub	sp, #8
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000a1c:	6878      	ldr	r0, [r7, #4]
 8000a1e:	f7ff ff29 	bl	8000874 <__NVIC_SetPriorityGrouping>
}
 8000a22:	bf00      	nop
 8000a24:	3708      	adds	r7, #8
 8000a26:	46bd      	mov	sp, r7
 8000a28:	bd80      	pop	{r7, pc}

08000a2a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000a2a:	b580      	push	{r7, lr}
 8000a2c:	b086      	sub	sp, #24
 8000a2e:	af00      	add	r7, sp, #0
 8000a30:	4603      	mov	r3, r0
 8000a32:	60b9      	str	r1, [r7, #8]
 8000a34:	607a      	str	r2, [r7, #4]
 8000a36:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000a38:	2300      	movs	r3, #0
 8000a3a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000a3c:	f7ff ff3e 	bl	80008bc <__NVIC_GetPriorityGrouping>
 8000a40:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000a42:	687a      	ldr	r2, [r7, #4]
 8000a44:	68b9      	ldr	r1, [r7, #8]
 8000a46:	6978      	ldr	r0, [r7, #20]
 8000a48:	f7ff ff8e 	bl	8000968 <NVIC_EncodePriority>
 8000a4c:	4602      	mov	r2, r0
 8000a4e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000a52:	4611      	mov	r1, r2
 8000a54:	4618      	mov	r0, r3
 8000a56:	f7ff ff5d 	bl	8000914 <__NVIC_SetPriority>
}
 8000a5a:	bf00      	nop
 8000a5c:	3718      	adds	r7, #24
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	bd80      	pop	{r7, pc}

08000a62 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a62:	b580      	push	{r7, lr}
 8000a64:	b082      	sub	sp, #8
 8000a66:	af00      	add	r7, sp, #0
 8000a68:	4603      	mov	r3, r0
 8000a6a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000a6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a70:	4618      	mov	r0, r3
 8000a72:	f7ff ff31 	bl	80008d8 <__NVIC_EnableIRQ>
}
 8000a76:	bf00      	nop
 8000a78:	3708      	adds	r7, #8
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	bd80      	pop	{r7, pc}

08000a7e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000a7e:	b580      	push	{r7, lr}
 8000a80:	b082      	sub	sp, #8
 8000a82:	af00      	add	r7, sp, #0
 8000a84:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000a86:	6878      	ldr	r0, [r7, #4]
 8000a88:	f7ff ffa2 	bl	80009d0 <SysTick_Config>
 8000a8c:	4603      	mov	r3, r0
}
 8000a8e:	4618      	mov	r0, r3
 8000a90:	3708      	adds	r7, #8
 8000a92:	46bd      	mov	sp, r7
 8000a94:	bd80      	pop	{r7, pc}
	...

08000a98 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000a98:	b480      	push	{r7}
 8000a9a:	b089      	sub	sp, #36	; 0x24
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	6078      	str	r0, [r7, #4]
 8000aa0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000aaa:	2300      	movs	r3, #0
 8000aac:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000aae:	2300      	movs	r3, #0
 8000ab0:	61fb      	str	r3, [r7, #28]
 8000ab2:	e159      	b.n	8000d68 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000ab4:	2201      	movs	r2, #1
 8000ab6:	69fb      	ldr	r3, [r7, #28]
 8000ab8:	fa02 f303 	lsl.w	r3, r2, r3
 8000abc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000abe:	683b      	ldr	r3, [r7, #0]
 8000ac0:	681b      	ldr	r3, [r3, #0]
 8000ac2:	697a      	ldr	r2, [r7, #20]
 8000ac4:	4013      	ands	r3, r2
 8000ac6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000ac8:	693a      	ldr	r2, [r7, #16]
 8000aca:	697b      	ldr	r3, [r7, #20]
 8000acc:	429a      	cmp	r2, r3
 8000ace:	f040 8148 	bne.w	8000d62 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000ad2:	683b      	ldr	r3, [r7, #0]
 8000ad4:	685b      	ldr	r3, [r3, #4]
 8000ad6:	f003 0303 	and.w	r3, r3, #3
 8000ada:	2b01      	cmp	r3, #1
 8000adc:	d005      	beq.n	8000aea <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ade:	683b      	ldr	r3, [r7, #0]
 8000ae0:	685b      	ldr	r3, [r3, #4]
 8000ae2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000ae6:	2b02      	cmp	r3, #2
 8000ae8:	d130      	bne.n	8000b4c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	689b      	ldr	r3, [r3, #8]
 8000aee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000af0:	69fb      	ldr	r3, [r7, #28]
 8000af2:	005b      	lsls	r3, r3, #1
 8000af4:	2203      	movs	r2, #3
 8000af6:	fa02 f303 	lsl.w	r3, r2, r3
 8000afa:	43db      	mvns	r3, r3
 8000afc:	69ba      	ldr	r2, [r7, #24]
 8000afe:	4013      	ands	r3, r2
 8000b00:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000b02:	683b      	ldr	r3, [r7, #0]
 8000b04:	68da      	ldr	r2, [r3, #12]
 8000b06:	69fb      	ldr	r3, [r7, #28]
 8000b08:	005b      	lsls	r3, r3, #1
 8000b0a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b0e:	69ba      	ldr	r2, [r7, #24]
 8000b10:	4313      	orrs	r3, r2
 8000b12:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	69ba      	ldr	r2, [r7, #24]
 8000b18:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	685b      	ldr	r3, [r3, #4]
 8000b1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000b20:	2201      	movs	r2, #1
 8000b22:	69fb      	ldr	r3, [r7, #28]
 8000b24:	fa02 f303 	lsl.w	r3, r2, r3
 8000b28:	43db      	mvns	r3, r3
 8000b2a:	69ba      	ldr	r2, [r7, #24]
 8000b2c:	4013      	ands	r3, r2
 8000b2e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000b30:	683b      	ldr	r3, [r7, #0]
 8000b32:	685b      	ldr	r3, [r3, #4]
 8000b34:	091b      	lsrs	r3, r3, #4
 8000b36:	f003 0201 	and.w	r2, r3, #1
 8000b3a:	69fb      	ldr	r3, [r7, #28]
 8000b3c:	fa02 f303 	lsl.w	r3, r2, r3
 8000b40:	69ba      	ldr	r2, [r7, #24]
 8000b42:	4313      	orrs	r3, r2
 8000b44:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	69ba      	ldr	r2, [r7, #24]
 8000b4a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000b4c:	683b      	ldr	r3, [r7, #0]
 8000b4e:	685b      	ldr	r3, [r3, #4]
 8000b50:	f003 0303 	and.w	r3, r3, #3
 8000b54:	2b03      	cmp	r3, #3
 8000b56:	d017      	beq.n	8000b88 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	68db      	ldr	r3, [r3, #12]
 8000b5c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000b5e:	69fb      	ldr	r3, [r7, #28]
 8000b60:	005b      	lsls	r3, r3, #1
 8000b62:	2203      	movs	r2, #3
 8000b64:	fa02 f303 	lsl.w	r3, r2, r3
 8000b68:	43db      	mvns	r3, r3
 8000b6a:	69ba      	ldr	r2, [r7, #24]
 8000b6c:	4013      	ands	r3, r2
 8000b6e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000b70:	683b      	ldr	r3, [r7, #0]
 8000b72:	689a      	ldr	r2, [r3, #8]
 8000b74:	69fb      	ldr	r3, [r7, #28]
 8000b76:	005b      	lsls	r3, r3, #1
 8000b78:	fa02 f303 	lsl.w	r3, r2, r3
 8000b7c:	69ba      	ldr	r2, [r7, #24]
 8000b7e:	4313      	orrs	r3, r2
 8000b80:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	69ba      	ldr	r2, [r7, #24]
 8000b86:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000b88:	683b      	ldr	r3, [r7, #0]
 8000b8a:	685b      	ldr	r3, [r3, #4]
 8000b8c:	f003 0303 	and.w	r3, r3, #3
 8000b90:	2b02      	cmp	r3, #2
 8000b92:	d123      	bne.n	8000bdc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000b94:	69fb      	ldr	r3, [r7, #28]
 8000b96:	08da      	lsrs	r2, r3, #3
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	3208      	adds	r2, #8
 8000b9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000ba0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000ba2:	69fb      	ldr	r3, [r7, #28]
 8000ba4:	f003 0307 	and.w	r3, r3, #7
 8000ba8:	009b      	lsls	r3, r3, #2
 8000baa:	220f      	movs	r2, #15
 8000bac:	fa02 f303 	lsl.w	r3, r2, r3
 8000bb0:	43db      	mvns	r3, r3
 8000bb2:	69ba      	ldr	r2, [r7, #24]
 8000bb4:	4013      	ands	r3, r2
 8000bb6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000bb8:	683b      	ldr	r3, [r7, #0]
 8000bba:	691a      	ldr	r2, [r3, #16]
 8000bbc:	69fb      	ldr	r3, [r7, #28]
 8000bbe:	f003 0307 	and.w	r3, r3, #7
 8000bc2:	009b      	lsls	r3, r3, #2
 8000bc4:	fa02 f303 	lsl.w	r3, r2, r3
 8000bc8:	69ba      	ldr	r2, [r7, #24]
 8000bca:	4313      	orrs	r3, r2
 8000bcc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000bce:	69fb      	ldr	r3, [r7, #28]
 8000bd0:	08da      	lsrs	r2, r3, #3
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	3208      	adds	r2, #8
 8000bd6:	69b9      	ldr	r1, [r7, #24]
 8000bd8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000be2:	69fb      	ldr	r3, [r7, #28]
 8000be4:	005b      	lsls	r3, r3, #1
 8000be6:	2203      	movs	r2, #3
 8000be8:	fa02 f303 	lsl.w	r3, r2, r3
 8000bec:	43db      	mvns	r3, r3
 8000bee:	69ba      	ldr	r2, [r7, #24]
 8000bf0:	4013      	ands	r3, r2
 8000bf2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000bf4:	683b      	ldr	r3, [r7, #0]
 8000bf6:	685b      	ldr	r3, [r3, #4]
 8000bf8:	f003 0203 	and.w	r2, r3, #3
 8000bfc:	69fb      	ldr	r3, [r7, #28]
 8000bfe:	005b      	lsls	r3, r3, #1
 8000c00:	fa02 f303 	lsl.w	r3, r2, r3
 8000c04:	69ba      	ldr	r2, [r7, #24]
 8000c06:	4313      	orrs	r3, r2
 8000c08:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	69ba      	ldr	r2, [r7, #24]
 8000c0e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000c10:	683b      	ldr	r3, [r7, #0]
 8000c12:	685b      	ldr	r3, [r3, #4]
 8000c14:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	f000 80a2 	beq.w	8000d62 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c1e:	2300      	movs	r3, #0
 8000c20:	60fb      	str	r3, [r7, #12]
 8000c22:	4b57      	ldr	r3, [pc, #348]	; (8000d80 <HAL_GPIO_Init+0x2e8>)
 8000c24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c26:	4a56      	ldr	r2, [pc, #344]	; (8000d80 <HAL_GPIO_Init+0x2e8>)
 8000c28:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c2c:	6453      	str	r3, [r2, #68]	; 0x44
 8000c2e:	4b54      	ldr	r3, [pc, #336]	; (8000d80 <HAL_GPIO_Init+0x2e8>)
 8000c30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c32:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c36:	60fb      	str	r3, [r7, #12]
 8000c38:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000c3a:	4a52      	ldr	r2, [pc, #328]	; (8000d84 <HAL_GPIO_Init+0x2ec>)
 8000c3c:	69fb      	ldr	r3, [r7, #28]
 8000c3e:	089b      	lsrs	r3, r3, #2
 8000c40:	3302      	adds	r3, #2
 8000c42:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c46:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000c48:	69fb      	ldr	r3, [r7, #28]
 8000c4a:	f003 0303 	and.w	r3, r3, #3
 8000c4e:	009b      	lsls	r3, r3, #2
 8000c50:	220f      	movs	r2, #15
 8000c52:	fa02 f303 	lsl.w	r3, r2, r3
 8000c56:	43db      	mvns	r3, r3
 8000c58:	69ba      	ldr	r2, [r7, #24]
 8000c5a:	4013      	ands	r3, r2
 8000c5c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	4a49      	ldr	r2, [pc, #292]	; (8000d88 <HAL_GPIO_Init+0x2f0>)
 8000c62:	4293      	cmp	r3, r2
 8000c64:	d019      	beq.n	8000c9a <HAL_GPIO_Init+0x202>
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	4a48      	ldr	r2, [pc, #288]	; (8000d8c <HAL_GPIO_Init+0x2f4>)
 8000c6a:	4293      	cmp	r3, r2
 8000c6c:	d013      	beq.n	8000c96 <HAL_GPIO_Init+0x1fe>
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	4a47      	ldr	r2, [pc, #284]	; (8000d90 <HAL_GPIO_Init+0x2f8>)
 8000c72:	4293      	cmp	r3, r2
 8000c74:	d00d      	beq.n	8000c92 <HAL_GPIO_Init+0x1fa>
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	4a46      	ldr	r2, [pc, #280]	; (8000d94 <HAL_GPIO_Init+0x2fc>)
 8000c7a:	4293      	cmp	r3, r2
 8000c7c:	d007      	beq.n	8000c8e <HAL_GPIO_Init+0x1f6>
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	4a45      	ldr	r2, [pc, #276]	; (8000d98 <HAL_GPIO_Init+0x300>)
 8000c82:	4293      	cmp	r3, r2
 8000c84:	d101      	bne.n	8000c8a <HAL_GPIO_Init+0x1f2>
 8000c86:	2304      	movs	r3, #4
 8000c88:	e008      	b.n	8000c9c <HAL_GPIO_Init+0x204>
 8000c8a:	2307      	movs	r3, #7
 8000c8c:	e006      	b.n	8000c9c <HAL_GPIO_Init+0x204>
 8000c8e:	2303      	movs	r3, #3
 8000c90:	e004      	b.n	8000c9c <HAL_GPIO_Init+0x204>
 8000c92:	2302      	movs	r3, #2
 8000c94:	e002      	b.n	8000c9c <HAL_GPIO_Init+0x204>
 8000c96:	2301      	movs	r3, #1
 8000c98:	e000      	b.n	8000c9c <HAL_GPIO_Init+0x204>
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	69fa      	ldr	r2, [r7, #28]
 8000c9e:	f002 0203 	and.w	r2, r2, #3
 8000ca2:	0092      	lsls	r2, r2, #2
 8000ca4:	4093      	lsls	r3, r2
 8000ca6:	69ba      	ldr	r2, [r7, #24]
 8000ca8:	4313      	orrs	r3, r2
 8000caa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000cac:	4935      	ldr	r1, [pc, #212]	; (8000d84 <HAL_GPIO_Init+0x2ec>)
 8000cae:	69fb      	ldr	r3, [r7, #28]
 8000cb0:	089b      	lsrs	r3, r3, #2
 8000cb2:	3302      	adds	r3, #2
 8000cb4:	69ba      	ldr	r2, [r7, #24]
 8000cb6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000cba:	4b38      	ldr	r3, [pc, #224]	; (8000d9c <HAL_GPIO_Init+0x304>)
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000cc0:	693b      	ldr	r3, [r7, #16]
 8000cc2:	43db      	mvns	r3, r3
 8000cc4:	69ba      	ldr	r2, [r7, #24]
 8000cc6:	4013      	ands	r3, r2
 8000cc8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000cca:	683b      	ldr	r3, [r7, #0]
 8000ccc:	685b      	ldr	r3, [r3, #4]
 8000cce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d003      	beq.n	8000cde <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8000cd6:	69ba      	ldr	r2, [r7, #24]
 8000cd8:	693b      	ldr	r3, [r7, #16]
 8000cda:	4313      	orrs	r3, r2
 8000cdc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000cde:	4a2f      	ldr	r2, [pc, #188]	; (8000d9c <HAL_GPIO_Init+0x304>)
 8000ce0:	69bb      	ldr	r3, [r7, #24]
 8000ce2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000ce4:	4b2d      	ldr	r3, [pc, #180]	; (8000d9c <HAL_GPIO_Init+0x304>)
 8000ce6:	685b      	ldr	r3, [r3, #4]
 8000ce8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000cea:	693b      	ldr	r3, [r7, #16]
 8000cec:	43db      	mvns	r3, r3
 8000cee:	69ba      	ldr	r2, [r7, #24]
 8000cf0:	4013      	ands	r3, r2
 8000cf2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000cf4:	683b      	ldr	r3, [r7, #0]
 8000cf6:	685b      	ldr	r3, [r3, #4]
 8000cf8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	d003      	beq.n	8000d08 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8000d00:	69ba      	ldr	r2, [r7, #24]
 8000d02:	693b      	ldr	r3, [r7, #16]
 8000d04:	4313      	orrs	r3, r2
 8000d06:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000d08:	4a24      	ldr	r2, [pc, #144]	; (8000d9c <HAL_GPIO_Init+0x304>)
 8000d0a:	69bb      	ldr	r3, [r7, #24]
 8000d0c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000d0e:	4b23      	ldr	r3, [pc, #140]	; (8000d9c <HAL_GPIO_Init+0x304>)
 8000d10:	689b      	ldr	r3, [r3, #8]
 8000d12:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000d14:	693b      	ldr	r3, [r7, #16]
 8000d16:	43db      	mvns	r3, r3
 8000d18:	69ba      	ldr	r2, [r7, #24]
 8000d1a:	4013      	ands	r3, r2
 8000d1c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000d1e:	683b      	ldr	r3, [r7, #0]
 8000d20:	685b      	ldr	r3, [r3, #4]
 8000d22:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d003      	beq.n	8000d32 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8000d2a:	69ba      	ldr	r2, [r7, #24]
 8000d2c:	693b      	ldr	r3, [r7, #16]
 8000d2e:	4313      	orrs	r3, r2
 8000d30:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000d32:	4a1a      	ldr	r2, [pc, #104]	; (8000d9c <HAL_GPIO_Init+0x304>)
 8000d34:	69bb      	ldr	r3, [r7, #24]
 8000d36:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000d38:	4b18      	ldr	r3, [pc, #96]	; (8000d9c <HAL_GPIO_Init+0x304>)
 8000d3a:	68db      	ldr	r3, [r3, #12]
 8000d3c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000d3e:	693b      	ldr	r3, [r7, #16]
 8000d40:	43db      	mvns	r3, r3
 8000d42:	69ba      	ldr	r2, [r7, #24]
 8000d44:	4013      	ands	r3, r2
 8000d46:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000d48:	683b      	ldr	r3, [r7, #0]
 8000d4a:	685b      	ldr	r3, [r3, #4]
 8000d4c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d003      	beq.n	8000d5c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8000d54:	69ba      	ldr	r2, [r7, #24]
 8000d56:	693b      	ldr	r3, [r7, #16]
 8000d58:	4313      	orrs	r3, r2
 8000d5a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000d5c:	4a0f      	ldr	r2, [pc, #60]	; (8000d9c <HAL_GPIO_Init+0x304>)
 8000d5e:	69bb      	ldr	r3, [r7, #24]
 8000d60:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000d62:	69fb      	ldr	r3, [r7, #28]
 8000d64:	3301      	adds	r3, #1
 8000d66:	61fb      	str	r3, [r7, #28]
 8000d68:	69fb      	ldr	r3, [r7, #28]
 8000d6a:	2b0f      	cmp	r3, #15
 8000d6c:	f67f aea2 	bls.w	8000ab4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000d70:	bf00      	nop
 8000d72:	bf00      	nop
 8000d74:	3724      	adds	r7, #36	; 0x24
 8000d76:	46bd      	mov	sp, r7
 8000d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7c:	4770      	bx	lr
 8000d7e:	bf00      	nop
 8000d80:	40023800 	.word	0x40023800
 8000d84:	40013800 	.word	0x40013800
 8000d88:	40020000 	.word	0x40020000
 8000d8c:	40020400 	.word	0x40020400
 8000d90:	40020800 	.word	0x40020800
 8000d94:	40020c00 	.word	0x40020c00
 8000d98:	40021000 	.word	0x40021000
 8000d9c:	40013c00 	.word	0x40013c00

08000da0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000da0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000da2:	b08f      	sub	sp, #60	; 0x3c
 8000da4:	af0a      	add	r7, sp, #40	; 0x28
 8000da6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d101      	bne.n	8000db2 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8000dae:	2301      	movs	r3, #1
 8000db0:	e10f      	b.n	8000fd2 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8000dbe:	b2db      	uxtb	r3, r3
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d106      	bne.n	8000dd2 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8000dcc:	6878      	ldr	r0, [r7, #4]
 8000dce:	f006 fa13 	bl	80071f8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	2203      	movs	r2, #3
 8000dd6:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8000dda:	68bb      	ldr	r3, [r7, #8]
 8000ddc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000dde:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d102      	bne.n	8000dec <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	2200      	movs	r2, #0
 8000dea:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	4618      	mov	r0, r3
 8000df2:	f001 feca 	bl	8002b8a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	603b      	str	r3, [r7, #0]
 8000dfc:	687e      	ldr	r6, [r7, #4]
 8000dfe:	466d      	mov	r5, sp
 8000e00:	f106 0410 	add.w	r4, r6, #16
 8000e04:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000e06:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000e08:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000e0a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000e0c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000e10:	e885 0003 	stmia.w	r5, {r0, r1}
 8000e14:	1d33      	adds	r3, r6, #4
 8000e16:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000e18:	6838      	ldr	r0, [r7, #0]
 8000e1a:	f001 fda1 	bl	8002960 <USB_CoreInit>
 8000e1e:	4603      	mov	r3, r0
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d005      	beq.n	8000e30 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	2202      	movs	r2, #2
 8000e28:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8000e2c:	2301      	movs	r3, #1
 8000e2e:	e0d0      	b.n	8000fd2 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	2100      	movs	r1, #0
 8000e36:	4618      	mov	r0, r3
 8000e38:	f001 feb8 	bl	8002bac <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	73fb      	strb	r3, [r7, #15]
 8000e40:	e04a      	b.n	8000ed8 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8000e42:	7bfa      	ldrb	r2, [r7, #15]
 8000e44:	6879      	ldr	r1, [r7, #4]
 8000e46:	4613      	mov	r3, r2
 8000e48:	00db      	lsls	r3, r3, #3
 8000e4a:	1a9b      	subs	r3, r3, r2
 8000e4c:	009b      	lsls	r3, r3, #2
 8000e4e:	440b      	add	r3, r1
 8000e50:	333d      	adds	r3, #61	; 0x3d
 8000e52:	2201      	movs	r2, #1
 8000e54:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8000e56:	7bfa      	ldrb	r2, [r7, #15]
 8000e58:	6879      	ldr	r1, [r7, #4]
 8000e5a:	4613      	mov	r3, r2
 8000e5c:	00db      	lsls	r3, r3, #3
 8000e5e:	1a9b      	subs	r3, r3, r2
 8000e60:	009b      	lsls	r3, r3, #2
 8000e62:	440b      	add	r3, r1
 8000e64:	333c      	adds	r3, #60	; 0x3c
 8000e66:	7bfa      	ldrb	r2, [r7, #15]
 8000e68:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8000e6a:	7bfa      	ldrb	r2, [r7, #15]
 8000e6c:	7bfb      	ldrb	r3, [r7, #15]
 8000e6e:	b298      	uxth	r0, r3
 8000e70:	6879      	ldr	r1, [r7, #4]
 8000e72:	4613      	mov	r3, r2
 8000e74:	00db      	lsls	r3, r3, #3
 8000e76:	1a9b      	subs	r3, r3, r2
 8000e78:	009b      	lsls	r3, r3, #2
 8000e7a:	440b      	add	r3, r1
 8000e7c:	3342      	adds	r3, #66	; 0x42
 8000e7e:	4602      	mov	r2, r0
 8000e80:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8000e82:	7bfa      	ldrb	r2, [r7, #15]
 8000e84:	6879      	ldr	r1, [r7, #4]
 8000e86:	4613      	mov	r3, r2
 8000e88:	00db      	lsls	r3, r3, #3
 8000e8a:	1a9b      	subs	r3, r3, r2
 8000e8c:	009b      	lsls	r3, r3, #2
 8000e8e:	440b      	add	r3, r1
 8000e90:	333f      	adds	r3, #63	; 0x3f
 8000e92:	2200      	movs	r2, #0
 8000e94:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8000e96:	7bfa      	ldrb	r2, [r7, #15]
 8000e98:	6879      	ldr	r1, [r7, #4]
 8000e9a:	4613      	mov	r3, r2
 8000e9c:	00db      	lsls	r3, r3, #3
 8000e9e:	1a9b      	subs	r3, r3, r2
 8000ea0:	009b      	lsls	r3, r3, #2
 8000ea2:	440b      	add	r3, r1
 8000ea4:	3344      	adds	r3, #68	; 0x44
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8000eaa:	7bfa      	ldrb	r2, [r7, #15]
 8000eac:	6879      	ldr	r1, [r7, #4]
 8000eae:	4613      	mov	r3, r2
 8000eb0:	00db      	lsls	r3, r3, #3
 8000eb2:	1a9b      	subs	r3, r3, r2
 8000eb4:	009b      	lsls	r3, r3, #2
 8000eb6:	440b      	add	r3, r1
 8000eb8:	3348      	adds	r3, #72	; 0x48
 8000eba:	2200      	movs	r2, #0
 8000ebc:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8000ebe:	7bfa      	ldrb	r2, [r7, #15]
 8000ec0:	6879      	ldr	r1, [r7, #4]
 8000ec2:	4613      	mov	r3, r2
 8000ec4:	00db      	lsls	r3, r3, #3
 8000ec6:	1a9b      	subs	r3, r3, r2
 8000ec8:	009b      	lsls	r3, r3, #2
 8000eca:	440b      	add	r3, r1
 8000ecc:	3350      	adds	r3, #80	; 0x50
 8000ece:	2200      	movs	r2, #0
 8000ed0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000ed2:	7bfb      	ldrb	r3, [r7, #15]
 8000ed4:	3301      	adds	r3, #1
 8000ed6:	73fb      	strb	r3, [r7, #15]
 8000ed8:	7bfa      	ldrb	r2, [r7, #15]
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	685b      	ldr	r3, [r3, #4]
 8000ede:	429a      	cmp	r2, r3
 8000ee0:	d3af      	bcc.n	8000e42 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	73fb      	strb	r3, [r7, #15]
 8000ee6:	e044      	b.n	8000f72 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8000ee8:	7bfa      	ldrb	r2, [r7, #15]
 8000eea:	6879      	ldr	r1, [r7, #4]
 8000eec:	4613      	mov	r3, r2
 8000eee:	00db      	lsls	r3, r3, #3
 8000ef0:	1a9b      	subs	r3, r3, r2
 8000ef2:	009b      	lsls	r3, r3, #2
 8000ef4:	440b      	add	r3, r1
 8000ef6:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8000efa:	2200      	movs	r2, #0
 8000efc:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8000efe:	7bfa      	ldrb	r2, [r7, #15]
 8000f00:	6879      	ldr	r1, [r7, #4]
 8000f02:	4613      	mov	r3, r2
 8000f04:	00db      	lsls	r3, r3, #3
 8000f06:	1a9b      	subs	r3, r3, r2
 8000f08:	009b      	lsls	r3, r3, #2
 8000f0a:	440b      	add	r3, r1
 8000f0c:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8000f10:	7bfa      	ldrb	r2, [r7, #15]
 8000f12:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8000f14:	7bfa      	ldrb	r2, [r7, #15]
 8000f16:	6879      	ldr	r1, [r7, #4]
 8000f18:	4613      	mov	r3, r2
 8000f1a:	00db      	lsls	r3, r3, #3
 8000f1c:	1a9b      	subs	r3, r3, r2
 8000f1e:	009b      	lsls	r3, r3, #2
 8000f20:	440b      	add	r3, r1
 8000f22:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8000f26:	2200      	movs	r2, #0
 8000f28:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8000f2a:	7bfa      	ldrb	r2, [r7, #15]
 8000f2c:	6879      	ldr	r1, [r7, #4]
 8000f2e:	4613      	mov	r3, r2
 8000f30:	00db      	lsls	r3, r3, #3
 8000f32:	1a9b      	subs	r3, r3, r2
 8000f34:	009b      	lsls	r3, r3, #2
 8000f36:	440b      	add	r3, r1
 8000f38:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8000f40:	7bfa      	ldrb	r2, [r7, #15]
 8000f42:	6879      	ldr	r1, [r7, #4]
 8000f44:	4613      	mov	r3, r2
 8000f46:	00db      	lsls	r3, r3, #3
 8000f48:	1a9b      	subs	r3, r3, r2
 8000f4a:	009b      	lsls	r3, r3, #2
 8000f4c:	440b      	add	r3, r1
 8000f4e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8000f52:	2200      	movs	r2, #0
 8000f54:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8000f56:	7bfa      	ldrb	r2, [r7, #15]
 8000f58:	6879      	ldr	r1, [r7, #4]
 8000f5a:	4613      	mov	r3, r2
 8000f5c:	00db      	lsls	r3, r3, #3
 8000f5e:	1a9b      	subs	r3, r3, r2
 8000f60:	009b      	lsls	r3, r3, #2
 8000f62:	440b      	add	r3, r1
 8000f64:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8000f68:	2200      	movs	r2, #0
 8000f6a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000f6c:	7bfb      	ldrb	r3, [r7, #15]
 8000f6e:	3301      	adds	r3, #1
 8000f70:	73fb      	strb	r3, [r7, #15]
 8000f72:	7bfa      	ldrb	r2, [r7, #15]
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	685b      	ldr	r3, [r3, #4]
 8000f78:	429a      	cmp	r2, r3
 8000f7a:	d3b5      	bcc.n	8000ee8 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	603b      	str	r3, [r7, #0]
 8000f82:	687e      	ldr	r6, [r7, #4]
 8000f84:	466d      	mov	r5, sp
 8000f86:	f106 0410 	add.w	r4, r6, #16
 8000f8a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000f8c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000f8e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000f90:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000f92:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000f96:	e885 0003 	stmia.w	r5, {r0, r1}
 8000f9a:	1d33      	adds	r3, r6, #4
 8000f9c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000f9e:	6838      	ldr	r0, [r7, #0]
 8000fa0:	f001 fe50 	bl	8002c44 <USB_DevInit>
 8000fa4:	4603      	mov	r3, r0
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d005      	beq.n	8000fb6 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	2202      	movs	r2, #2
 8000fae:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8000fb2:	2301      	movs	r3, #1
 8000fb4:	e00d      	b.n	8000fd2 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	2200      	movs	r2, #0
 8000fba:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	2201      	movs	r2, #1
 8000fc2:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	4618      	mov	r0, r3
 8000fcc:	f002 fecc 	bl	8003d68 <USB_DevDisconnect>

  return HAL_OK;
 8000fd0:	2300      	movs	r3, #0
}
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	3714      	adds	r7, #20
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000fda <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8000fda:	b580      	push	{r7, lr}
 8000fdc:	b084      	sub	sp, #16
 8000fde:	af00      	add	r7, sp, #0
 8000fe0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8000fee:	2b01      	cmp	r3, #1
 8000ff0:	d101      	bne.n	8000ff6 <HAL_PCD_Start+0x1c>
 8000ff2:	2302      	movs	r3, #2
 8000ff4:	e020      	b.n	8001038 <HAL_PCD_Start+0x5e>
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	2201      	movs	r2, #1
 8000ffa:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001002:	2b01      	cmp	r3, #1
 8001004:	d109      	bne.n	800101a <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800100a:	2b01      	cmp	r3, #1
 800100c:	d005      	beq.n	800101a <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800100e:	68fb      	ldr	r3, [r7, #12]
 8001010:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001012:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001016:	68fb      	ldr	r3, [r7, #12]
 8001018:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	4618      	mov	r0, r3
 8001020:	f001 fda2 	bl	8002b68 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	4618      	mov	r0, r3
 800102a:	f002 fe7c 	bl	8003d26 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	2200      	movs	r2, #0
 8001032:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8001036:	2300      	movs	r3, #0
}
 8001038:	4618      	mov	r0, r3
 800103a:	3710      	adds	r7, #16
 800103c:	46bd      	mov	sp, r7
 800103e:	bd80      	pop	{r7, pc}

08001040 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001040:	b590      	push	{r4, r7, lr}
 8001042:	b08d      	sub	sp, #52	; 0x34
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800104e:	6a3b      	ldr	r3, [r7, #32]
 8001050:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t temp;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	4618      	mov	r0, r3
 8001058:	f002 ff3a 	bl	8003ed0 <USB_GetMode>
 800105c:	4603      	mov	r3, r0
 800105e:	2b00      	cmp	r3, #0
 8001060:	f040 839d 	bne.w	800179e <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	4618      	mov	r0, r3
 800106a:	f002 fe9e 	bl	8003daa <USB_ReadInterrupts>
 800106e:	4603      	mov	r3, r0
 8001070:	2b00      	cmp	r3, #0
 8001072:	f000 8393 	beq.w	800179c <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	4618      	mov	r0, r3
 800107c:	f002 fe95 	bl	8003daa <USB_ReadInterrupts>
 8001080:	4603      	mov	r3, r0
 8001082:	f003 0302 	and.w	r3, r3, #2
 8001086:	2b02      	cmp	r3, #2
 8001088:	d107      	bne.n	800109a <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	695a      	ldr	r2, [r3, #20]
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	f002 0202 	and.w	r2, r2, #2
 8001098:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	4618      	mov	r0, r3
 80010a0:	f002 fe83 	bl	8003daa <USB_ReadInterrupts>
 80010a4:	4603      	mov	r3, r0
 80010a6:	f003 0310 	and.w	r3, r3, #16
 80010aa:	2b10      	cmp	r3, #16
 80010ac:	d161      	bne.n	8001172 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	699a      	ldr	r2, [r3, #24]
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	f022 0210 	bic.w	r2, r2, #16
 80010bc:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 80010be:	6a3b      	ldr	r3, [r7, #32]
 80010c0:	6a1b      	ldr	r3, [r3, #32]
 80010c2:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 80010c4:	69bb      	ldr	r3, [r7, #24]
 80010c6:	f003 020f 	and.w	r2, r3, #15
 80010ca:	4613      	mov	r3, r2
 80010cc:	00db      	lsls	r3, r3, #3
 80010ce:	1a9b      	subs	r3, r3, r2
 80010d0:	009b      	lsls	r3, r3, #2
 80010d2:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80010d6:	687a      	ldr	r2, [r7, #4]
 80010d8:	4413      	add	r3, r2
 80010da:	3304      	adds	r3, #4
 80010dc:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80010de:	69bb      	ldr	r3, [r7, #24]
 80010e0:	0c5b      	lsrs	r3, r3, #17
 80010e2:	f003 030f 	and.w	r3, r3, #15
 80010e6:	2b02      	cmp	r3, #2
 80010e8:	d124      	bne.n	8001134 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 80010ea:	69ba      	ldr	r2, [r7, #24]
 80010ec:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80010f0:	4013      	ands	r3, r2
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d035      	beq.n	8001162 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80010f6:	697b      	ldr	r3, [r7, #20]
 80010f8:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 80010fa:	69bb      	ldr	r3, [r7, #24]
 80010fc:	091b      	lsrs	r3, r3, #4
 80010fe:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001100:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001104:	b29b      	uxth	r3, r3
 8001106:	461a      	mov	r2, r3
 8001108:	6a38      	ldr	r0, [r7, #32]
 800110a:	f002 fcba 	bl	8003a82 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800110e:	697b      	ldr	r3, [r7, #20]
 8001110:	68da      	ldr	r2, [r3, #12]
 8001112:	69bb      	ldr	r3, [r7, #24]
 8001114:	091b      	lsrs	r3, r3, #4
 8001116:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800111a:	441a      	add	r2, r3
 800111c:	697b      	ldr	r3, [r7, #20]
 800111e:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001120:	697b      	ldr	r3, [r7, #20]
 8001122:	699a      	ldr	r2, [r3, #24]
 8001124:	69bb      	ldr	r3, [r7, #24]
 8001126:	091b      	lsrs	r3, r3, #4
 8001128:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800112c:	441a      	add	r2, r3
 800112e:	697b      	ldr	r3, [r7, #20]
 8001130:	619a      	str	r2, [r3, #24]
 8001132:	e016      	b.n	8001162 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8001134:	69bb      	ldr	r3, [r7, #24]
 8001136:	0c5b      	lsrs	r3, r3, #17
 8001138:	f003 030f 	and.w	r3, r3, #15
 800113c:	2b06      	cmp	r3, #6
 800113e:	d110      	bne.n	8001162 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001146:	2208      	movs	r2, #8
 8001148:	4619      	mov	r1, r3
 800114a:	6a38      	ldr	r0, [r7, #32]
 800114c:	f002 fc99 	bl	8003a82 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001150:	697b      	ldr	r3, [r7, #20]
 8001152:	699a      	ldr	r2, [r3, #24]
 8001154:	69bb      	ldr	r3, [r7, #24]
 8001156:	091b      	lsrs	r3, r3, #4
 8001158:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800115c:	441a      	add	r2, r3
 800115e:	697b      	ldr	r3, [r7, #20]
 8001160:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	699a      	ldr	r2, [r3, #24]
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	f042 0210 	orr.w	r2, r2, #16
 8001170:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	4618      	mov	r0, r3
 8001178:	f002 fe17 	bl	8003daa <USB_ReadInterrupts>
 800117c:	4603      	mov	r3, r0
 800117e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001182:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8001186:	d16e      	bne.n	8001266 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8001188:	2300      	movs	r3, #0
 800118a:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	4618      	mov	r0, r3
 8001192:	f002 fe1d 	bl	8003dd0 <USB_ReadDevAllOutEpInterrupt>
 8001196:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8001198:	e062      	b.n	8001260 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 800119a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800119c:	f003 0301 	and.w	r3, r3, #1
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d057      	beq.n	8001254 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80011aa:	b2d2      	uxtb	r2, r2
 80011ac:	4611      	mov	r1, r2
 80011ae:	4618      	mov	r0, r3
 80011b0:	f002 fe42 	bl	8003e38 <USB_ReadDevOutEPInterrupt>
 80011b4:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80011b6:	693b      	ldr	r3, [r7, #16]
 80011b8:	f003 0301 	and.w	r3, r3, #1
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d00c      	beq.n	80011da <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80011c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011c2:	015a      	lsls	r2, r3, #5
 80011c4:	69fb      	ldr	r3, [r7, #28]
 80011c6:	4413      	add	r3, r2
 80011c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80011cc:	461a      	mov	r2, r3
 80011ce:	2301      	movs	r3, #1
 80011d0:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80011d2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80011d4:	6878      	ldr	r0, [r7, #4]
 80011d6:	f000 fddd 	bl	8001d94 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80011da:	693b      	ldr	r3, [r7, #16]
 80011dc:	f003 0308 	and.w	r3, r3, #8
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d00c      	beq.n	80011fe <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80011e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011e6:	015a      	lsls	r2, r3, #5
 80011e8:	69fb      	ldr	r3, [r7, #28]
 80011ea:	4413      	add	r3, r2
 80011ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80011f0:	461a      	mov	r2, r3
 80011f2:	2308      	movs	r3, #8
 80011f4:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80011f6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80011f8:	6878      	ldr	r0, [r7, #4]
 80011fa:	f000 fed7 	bl	8001fac <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80011fe:	693b      	ldr	r3, [r7, #16]
 8001200:	f003 0310 	and.w	r3, r3, #16
 8001204:	2b00      	cmp	r3, #0
 8001206:	d008      	beq.n	800121a <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8001208:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800120a:	015a      	lsls	r2, r3, #5
 800120c:	69fb      	ldr	r3, [r7, #28]
 800120e:	4413      	add	r3, r2
 8001210:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001214:	461a      	mov	r2, r3
 8001216:	2310      	movs	r3, #16
 8001218:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800121a:	693b      	ldr	r3, [r7, #16]
 800121c:	f003 0320 	and.w	r3, r3, #32
 8001220:	2b00      	cmp	r3, #0
 8001222:	d008      	beq.n	8001236 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001224:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001226:	015a      	lsls	r2, r3, #5
 8001228:	69fb      	ldr	r3, [r7, #28]
 800122a:	4413      	add	r3, r2
 800122c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001230:	461a      	mov	r2, r3
 8001232:	2320      	movs	r3, #32
 8001234:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8001236:	693b      	ldr	r3, [r7, #16]
 8001238:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800123c:	2b00      	cmp	r3, #0
 800123e:	d009      	beq.n	8001254 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8001240:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001242:	015a      	lsls	r2, r3, #5
 8001244:	69fb      	ldr	r3, [r7, #28]
 8001246:	4413      	add	r3, r2
 8001248:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800124c:	461a      	mov	r2, r3
 800124e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001252:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8001254:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001256:	3301      	adds	r3, #1
 8001258:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800125a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800125c:	085b      	lsrs	r3, r3, #1
 800125e:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001260:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001262:	2b00      	cmp	r3, #0
 8001264:	d199      	bne.n	800119a <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	4618      	mov	r0, r3
 800126c:	f002 fd9d 	bl	8003daa <USB_ReadInterrupts>
 8001270:	4603      	mov	r3, r0
 8001272:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001276:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800127a:	f040 80c0 	bne.w	80013fe <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	4618      	mov	r0, r3
 8001284:	f002 fdbe 	bl	8003e04 <USB_ReadDevAllInEpInterrupt>
 8001288:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800128a:	2300      	movs	r3, #0
 800128c:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 800128e:	e0b2      	b.n	80013f6 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8001290:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001292:	f003 0301 	and.w	r3, r3, #1
 8001296:	2b00      	cmp	r3, #0
 8001298:	f000 80a7 	beq.w	80013ea <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80012a2:	b2d2      	uxtb	r2, r2
 80012a4:	4611      	mov	r1, r2
 80012a6:	4618      	mov	r0, r3
 80012a8:	f002 fde4 	bl	8003e74 <USB_ReadDevInEPInterrupt>
 80012ac:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80012ae:	693b      	ldr	r3, [r7, #16]
 80012b0:	f003 0301 	and.w	r3, r3, #1
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d057      	beq.n	8001368 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80012b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012ba:	f003 030f 	and.w	r3, r3, #15
 80012be:	2201      	movs	r2, #1
 80012c0:	fa02 f303 	lsl.w	r3, r2, r3
 80012c4:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80012c6:	69fb      	ldr	r3, [r7, #28]
 80012c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80012cc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80012ce:	68fb      	ldr	r3, [r7, #12]
 80012d0:	43db      	mvns	r3, r3
 80012d2:	69f9      	ldr	r1, [r7, #28]
 80012d4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80012d8:	4013      	ands	r3, r2
 80012da:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80012dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012de:	015a      	lsls	r2, r3, #5
 80012e0:	69fb      	ldr	r3, [r7, #28]
 80012e2:	4413      	add	r3, r2
 80012e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80012e8:	461a      	mov	r2, r3
 80012ea:	2301      	movs	r3, #1
 80012ec:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	691b      	ldr	r3, [r3, #16]
 80012f2:	2b01      	cmp	r3, #1
 80012f4:	d132      	bne.n	800135c <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80012f6:	6879      	ldr	r1, [r7, #4]
 80012f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80012fa:	4613      	mov	r3, r2
 80012fc:	00db      	lsls	r3, r3, #3
 80012fe:	1a9b      	subs	r3, r3, r2
 8001300:	009b      	lsls	r3, r3, #2
 8001302:	440b      	add	r3, r1
 8001304:	3348      	adds	r3, #72	; 0x48
 8001306:	6819      	ldr	r1, [r3, #0]
 8001308:	6878      	ldr	r0, [r7, #4]
 800130a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800130c:	4613      	mov	r3, r2
 800130e:	00db      	lsls	r3, r3, #3
 8001310:	1a9b      	subs	r3, r3, r2
 8001312:	009b      	lsls	r3, r3, #2
 8001314:	4403      	add	r3, r0
 8001316:	3344      	adds	r3, #68	; 0x44
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	4419      	add	r1, r3
 800131c:	6878      	ldr	r0, [r7, #4]
 800131e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001320:	4613      	mov	r3, r2
 8001322:	00db      	lsls	r3, r3, #3
 8001324:	1a9b      	subs	r3, r3, r2
 8001326:	009b      	lsls	r3, r3, #2
 8001328:	4403      	add	r3, r0
 800132a:	3348      	adds	r3, #72	; 0x48
 800132c:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800132e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001330:	2b00      	cmp	r3, #0
 8001332:	d113      	bne.n	800135c <HAL_PCD_IRQHandler+0x31c>
 8001334:	6879      	ldr	r1, [r7, #4]
 8001336:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001338:	4613      	mov	r3, r2
 800133a:	00db      	lsls	r3, r3, #3
 800133c:	1a9b      	subs	r3, r3, r2
 800133e:	009b      	lsls	r3, r3, #2
 8001340:	440b      	add	r3, r1
 8001342:	3350      	adds	r3, #80	; 0x50
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	2b00      	cmp	r3, #0
 8001348:	d108      	bne.n	800135c <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	6818      	ldr	r0, [r3, #0]
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001354:	461a      	mov	r2, r3
 8001356:	2101      	movs	r1, #1
 8001358:	f002 fdec 	bl	8003f34 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800135c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800135e:	b2db      	uxtb	r3, r3
 8001360:	4619      	mov	r1, r3
 8001362:	6878      	ldr	r0, [r7, #4]
 8001364:	f005 ffc9 	bl	80072fa <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8001368:	693b      	ldr	r3, [r7, #16]
 800136a:	f003 0308 	and.w	r3, r3, #8
 800136e:	2b00      	cmp	r3, #0
 8001370:	d008      	beq.n	8001384 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8001372:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001374:	015a      	lsls	r2, r3, #5
 8001376:	69fb      	ldr	r3, [r7, #28]
 8001378:	4413      	add	r3, r2
 800137a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800137e:	461a      	mov	r2, r3
 8001380:	2308      	movs	r3, #8
 8001382:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8001384:	693b      	ldr	r3, [r7, #16]
 8001386:	f003 0310 	and.w	r3, r3, #16
 800138a:	2b00      	cmp	r3, #0
 800138c:	d008      	beq.n	80013a0 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800138e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001390:	015a      	lsls	r2, r3, #5
 8001392:	69fb      	ldr	r3, [r7, #28]
 8001394:	4413      	add	r3, r2
 8001396:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800139a:	461a      	mov	r2, r3
 800139c:	2310      	movs	r3, #16
 800139e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80013a0:	693b      	ldr	r3, [r7, #16]
 80013a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d008      	beq.n	80013bc <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80013aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013ac:	015a      	lsls	r2, r3, #5
 80013ae:	69fb      	ldr	r3, [r7, #28]
 80013b0:	4413      	add	r3, r2
 80013b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80013b6:	461a      	mov	r2, r3
 80013b8:	2340      	movs	r3, #64	; 0x40
 80013ba:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80013bc:	693b      	ldr	r3, [r7, #16]
 80013be:	f003 0302 	and.w	r3, r3, #2
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d008      	beq.n	80013d8 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80013c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013c8:	015a      	lsls	r2, r3, #5
 80013ca:	69fb      	ldr	r3, [r7, #28]
 80013cc:	4413      	add	r3, r2
 80013ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80013d2:	461a      	mov	r2, r3
 80013d4:	2302      	movs	r3, #2
 80013d6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80013d8:	693b      	ldr	r3, [r7, #16]
 80013da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d003      	beq.n	80013ea <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80013e2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80013e4:	6878      	ldr	r0, [r7, #4]
 80013e6:	f000 fc48 	bl	8001c7a <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80013ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013ec:	3301      	adds	r3, #1
 80013ee:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80013f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013f2:	085b      	lsrs	r3, r3, #1
 80013f4:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80013f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	f47f af49 	bne.w	8001290 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	4618      	mov	r0, r3
 8001404:	f002 fcd1 	bl	8003daa <USB_ReadInterrupts>
 8001408:	4603      	mov	r3, r0
 800140a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800140e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001412:	d122      	bne.n	800145a <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001414:	69fb      	ldr	r3, [r7, #28]
 8001416:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800141a:	685b      	ldr	r3, [r3, #4]
 800141c:	69fa      	ldr	r2, [r7, #28]
 800141e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001422:	f023 0301 	bic.w	r3, r3, #1
 8001426:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 800142e:	2b01      	cmp	r3, #1
 8001430:	d108      	bne.n	8001444 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	2200      	movs	r2, #0
 8001436:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800143a:	2100      	movs	r1, #0
 800143c:	6878      	ldr	r0, [r7, #4]
 800143e:	f000 fe53 	bl	80020e8 <HAL_PCDEx_LPM_Callback>
 8001442:	e002      	b.n	800144a <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8001444:	6878      	ldr	r0, [r7, #4]
 8001446:	f005 ffc5 	bl	80073d4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	695a      	ldr	r2, [r3, #20]
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8001458:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	4618      	mov	r0, r3
 8001460:	f002 fca3 	bl	8003daa <USB_ReadInterrupts>
 8001464:	4603      	mov	r3, r0
 8001466:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800146a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800146e:	d112      	bne.n	8001496 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8001470:	69fb      	ldr	r3, [r7, #28]
 8001472:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001476:	689b      	ldr	r3, [r3, #8]
 8001478:	f003 0301 	and.w	r3, r3, #1
 800147c:	2b01      	cmp	r3, #1
 800147e:	d102      	bne.n	8001486 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001480:	6878      	ldr	r0, [r7, #4]
 8001482:	f005 ff81 	bl	8007388 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	695a      	ldr	r2, [r3, #20]
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8001494:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	4618      	mov	r0, r3
 800149c:	f002 fc85 	bl	8003daa <USB_ReadInterrupts>
 80014a0:	4603      	mov	r3, r0
 80014a2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80014a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80014aa:	f040 80c7 	bne.w	800163c <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80014ae:	69fb      	ldr	r3, [r7, #28]
 80014b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80014b4:	685b      	ldr	r3, [r3, #4]
 80014b6:	69fa      	ldr	r2, [r7, #28]
 80014b8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80014bc:	f023 0301 	bic.w	r3, r3, #1
 80014c0:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	2110      	movs	r1, #16
 80014c8:	4618      	mov	r0, r3
 80014ca:	f001 fd1f 	bl	8002f0c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80014ce:	2300      	movs	r3, #0
 80014d0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80014d2:	e056      	b.n	8001582 <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80014d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80014d6:	015a      	lsls	r2, r3, #5
 80014d8:	69fb      	ldr	r3, [r7, #28]
 80014da:	4413      	add	r3, r2
 80014dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80014e0:	461a      	mov	r2, r3
 80014e2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80014e6:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80014e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80014ea:	015a      	lsls	r2, r3, #5
 80014ec:	69fb      	ldr	r3, [r7, #28]
 80014ee:	4413      	add	r3, r2
 80014f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80014f8:	0151      	lsls	r1, r2, #5
 80014fa:	69fa      	ldr	r2, [r7, #28]
 80014fc:	440a      	add	r2, r1
 80014fe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8001502:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001506:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8001508:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800150a:	015a      	lsls	r2, r3, #5
 800150c:	69fb      	ldr	r3, [r7, #28]
 800150e:	4413      	add	r3, r2
 8001510:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001518:	0151      	lsls	r1, r2, #5
 800151a:	69fa      	ldr	r2, [r7, #28]
 800151c:	440a      	add	r2, r1
 800151e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8001522:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001526:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8001528:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800152a:	015a      	lsls	r2, r3, #5
 800152c:	69fb      	ldr	r3, [r7, #28]
 800152e:	4413      	add	r3, r2
 8001530:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001534:	461a      	mov	r2, r3
 8001536:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800153a:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800153c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800153e:	015a      	lsls	r2, r3, #5
 8001540:	69fb      	ldr	r3, [r7, #28]
 8001542:	4413      	add	r3, r2
 8001544:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800154c:	0151      	lsls	r1, r2, #5
 800154e:	69fa      	ldr	r2, [r7, #28]
 8001550:	440a      	add	r2, r1
 8001552:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001556:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800155a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800155c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800155e:	015a      	lsls	r2, r3, #5
 8001560:	69fb      	ldr	r3, [r7, #28]
 8001562:	4413      	add	r3, r2
 8001564:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800156c:	0151      	lsls	r1, r2, #5
 800156e:	69fa      	ldr	r2, [r7, #28]
 8001570:	440a      	add	r2, r1
 8001572:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001576:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800157a:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800157c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800157e:	3301      	adds	r3, #1
 8001580:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	685b      	ldr	r3, [r3, #4]
 8001586:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001588:	429a      	cmp	r2, r3
 800158a:	d3a3      	bcc.n	80014d4 <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800158c:	69fb      	ldr	r3, [r7, #28]
 800158e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001592:	69db      	ldr	r3, [r3, #28]
 8001594:	69fa      	ldr	r2, [r7, #28]
 8001596:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800159a:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800159e:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d016      	beq.n	80015d6 <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80015a8:	69fb      	ldr	r3, [r7, #28]
 80015aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80015ae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80015b2:	69fa      	ldr	r2, [r7, #28]
 80015b4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80015b8:	f043 030b 	orr.w	r3, r3, #11
 80015bc:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80015c0:	69fb      	ldr	r3, [r7, #28]
 80015c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80015c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015c8:	69fa      	ldr	r2, [r7, #28]
 80015ca:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80015ce:	f043 030b 	orr.w	r3, r3, #11
 80015d2:	6453      	str	r3, [r2, #68]	; 0x44
 80015d4:	e015      	b.n	8001602 <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80015d6:	69fb      	ldr	r3, [r7, #28]
 80015d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80015dc:	695b      	ldr	r3, [r3, #20]
 80015de:	69fa      	ldr	r2, [r7, #28]
 80015e0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80015e4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80015e8:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80015ec:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80015ee:	69fb      	ldr	r3, [r7, #28]
 80015f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80015f4:	691b      	ldr	r3, [r3, #16]
 80015f6:	69fa      	ldr	r2, [r7, #28]
 80015f8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80015fc:	f043 030b 	orr.w	r3, r3, #11
 8001600:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8001602:	69fb      	ldr	r3, [r7, #28]
 8001604:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	69fa      	ldr	r2, [r7, #28]
 800160c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001610:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8001614:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	6818      	ldr	r0, [r3, #0]
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	691b      	ldr	r3, [r3, #16]
 800161e:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001626:	461a      	mov	r2, r3
 8001628:	f002 fc84 	bl	8003f34 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	695a      	ldr	r2, [r3, #20]
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800163a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	4618      	mov	r0, r3
 8001642:	f002 fbb2 	bl	8003daa <USB_ReadInterrupts>
 8001646:	4603      	mov	r3, r0
 8001648:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800164c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001650:	d124      	bne.n	800169c <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	4618      	mov	r0, r3
 8001658:	f002 fc48 	bl	8003eec <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	4618      	mov	r0, r3
 8001662:	f001 fcb0 	bl	8002fc6 <USB_GetDevSpeed>
 8001666:	4603      	mov	r3, r0
 8001668:	461a      	mov	r2, r3
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681c      	ldr	r4, [r3, #0]
 8001672:	f001 f969 	bl	8002948 <HAL_RCC_GetHCLKFreq>
 8001676:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800167c:	b2db      	uxtb	r3, r3
 800167e:	461a      	mov	r2, r3
 8001680:	4620      	mov	r0, r4
 8001682:	f001 f9cf 	bl	8002a24 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8001686:	6878      	ldr	r0, [r7, #4]
 8001688:	f005 fe5f 	bl	800734a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	695a      	ldr	r2, [r3, #20]
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800169a:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	4618      	mov	r0, r3
 80016a2:	f002 fb82 	bl	8003daa <USB_ReadInterrupts>
 80016a6:	4603      	mov	r3, r0
 80016a8:	f003 0308 	and.w	r3, r3, #8
 80016ac:	2b08      	cmp	r3, #8
 80016ae:	d10a      	bne.n	80016c6 <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80016b0:	6878      	ldr	r0, [r7, #4]
 80016b2:	f005 fe3c 	bl	800732e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	695a      	ldr	r2, [r3, #20]
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	f002 0208 	and.w	r2, r2, #8
 80016c4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	4618      	mov	r0, r3
 80016cc:	f002 fb6d 	bl	8003daa <USB_ReadInterrupts>
 80016d0:	4603      	mov	r3, r0
 80016d2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80016d6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80016da:	d10f      	bne.n	80016fc <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80016dc:	2300      	movs	r3, #0
 80016de:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80016e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016e2:	b2db      	uxtb	r3, r3
 80016e4:	4619      	mov	r1, r3
 80016e6:	6878      	ldr	r0, [r7, #4]
 80016e8:	f005 fe94 	bl	8007414 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	695a      	ldr	r2, [r3, #20]
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80016fa:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	4618      	mov	r0, r3
 8001702:	f002 fb52 	bl	8003daa <USB_ReadInterrupts>
 8001706:	4603      	mov	r3, r0
 8001708:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800170c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001710:	d10f      	bne.n	8001732 <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8001712:	2300      	movs	r3, #0
 8001714:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8001716:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001718:	b2db      	uxtb	r3, r3
 800171a:	4619      	mov	r1, r3
 800171c:	6878      	ldr	r0, [r7, #4]
 800171e:	f005 fe67 	bl	80073f0 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	695a      	ldr	r2, [r3, #20]
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8001730:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	4618      	mov	r0, r3
 8001738:	f002 fb37 	bl	8003daa <USB_ReadInterrupts>
 800173c:	4603      	mov	r3, r0
 800173e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001742:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001746:	d10a      	bne.n	800175e <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8001748:	6878      	ldr	r0, [r7, #4]
 800174a:	f005 fe75 	bl	8007438 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	695a      	ldr	r2, [r3, #20]
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800175c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	4618      	mov	r0, r3
 8001764:	f002 fb21 	bl	8003daa <USB_ReadInterrupts>
 8001768:	4603      	mov	r3, r0
 800176a:	f003 0304 	and.w	r3, r3, #4
 800176e:	2b04      	cmp	r3, #4
 8001770:	d115      	bne.n	800179e <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	685b      	ldr	r3, [r3, #4]
 8001778:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800177a:	69bb      	ldr	r3, [r7, #24]
 800177c:	f003 0304 	and.w	r3, r3, #4
 8001780:	2b00      	cmp	r3, #0
 8001782:	d002      	beq.n	800178a <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8001784:	6878      	ldr	r0, [r7, #4]
 8001786:	f005 fe65 	bl	8007454 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	6859      	ldr	r1, [r3, #4]
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	69ba      	ldr	r2, [r7, #24]
 8001796:	430a      	orrs	r2, r1
 8001798:	605a      	str	r2, [r3, #4]
 800179a:	e000      	b.n	800179e <HAL_PCD_IRQHandler+0x75e>
      return;
 800179c:	bf00      	nop
    }
  }
}
 800179e:	3734      	adds	r7, #52	; 0x34
 80017a0:	46bd      	mov	sp, r7
 80017a2:	bd90      	pop	{r4, r7, pc}

080017a4 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b082      	sub	sp, #8
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
 80017ac:	460b      	mov	r3, r1
 80017ae:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80017b6:	2b01      	cmp	r3, #1
 80017b8:	d101      	bne.n	80017be <HAL_PCD_SetAddress+0x1a>
 80017ba:	2302      	movs	r3, #2
 80017bc:	e013      	b.n	80017e6 <HAL_PCD_SetAddress+0x42>
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	2201      	movs	r2, #1
 80017c2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	78fa      	ldrb	r2, [r7, #3]
 80017ca:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	78fa      	ldrb	r2, [r7, #3]
 80017d4:	4611      	mov	r1, r2
 80017d6:	4618      	mov	r0, r3
 80017d8:	f002 fa7f 	bl	8003cda <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	2200      	movs	r2, #0
 80017e0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80017e4:	2300      	movs	r3, #0
}
 80017e6:	4618      	mov	r0, r3
 80017e8:	3708      	adds	r7, #8
 80017ea:	46bd      	mov	sp, r7
 80017ec:	bd80      	pop	{r7, pc}

080017ee <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80017ee:	b580      	push	{r7, lr}
 80017f0:	b084      	sub	sp, #16
 80017f2:	af00      	add	r7, sp, #0
 80017f4:	6078      	str	r0, [r7, #4]
 80017f6:	4608      	mov	r0, r1
 80017f8:	4611      	mov	r1, r2
 80017fa:	461a      	mov	r2, r3
 80017fc:	4603      	mov	r3, r0
 80017fe:	70fb      	strb	r3, [r7, #3]
 8001800:	460b      	mov	r3, r1
 8001802:	803b      	strh	r3, [r7, #0]
 8001804:	4613      	mov	r3, r2
 8001806:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001808:	2300      	movs	r3, #0
 800180a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800180c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001810:	2b00      	cmp	r3, #0
 8001812:	da0f      	bge.n	8001834 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001814:	78fb      	ldrb	r3, [r7, #3]
 8001816:	f003 020f 	and.w	r2, r3, #15
 800181a:	4613      	mov	r3, r2
 800181c:	00db      	lsls	r3, r3, #3
 800181e:	1a9b      	subs	r3, r3, r2
 8001820:	009b      	lsls	r3, r3, #2
 8001822:	3338      	adds	r3, #56	; 0x38
 8001824:	687a      	ldr	r2, [r7, #4]
 8001826:	4413      	add	r3, r2
 8001828:	3304      	adds	r3, #4
 800182a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	2201      	movs	r2, #1
 8001830:	705a      	strb	r2, [r3, #1]
 8001832:	e00f      	b.n	8001854 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001834:	78fb      	ldrb	r3, [r7, #3]
 8001836:	f003 020f 	and.w	r2, r3, #15
 800183a:	4613      	mov	r3, r2
 800183c:	00db      	lsls	r3, r3, #3
 800183e:	1a9b      	subs	r3, r3, r2
 8001840:	009b      	lsls	r3, r3, #2
 8001842:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001846:	687a      	ldr	r2, [r7, #4]
 8001848:	4413      	add	r3, r2
 800184a:	3304      	adds	r3, #4
 800184c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	2200      	movs	r2, #0
 8001852:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001854:	78fb      	ldrb	r3, [r7, #3]
 8001856:	f003 030f 	and.w	r3, r3, #15
 800185a:	b2da      	uxtb	r2, r3
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001860:	883a      	ldrh	r2, [r7, #0]
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	78ba      	ldrb	r2, [r7, #2]
 800186a:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	785b      	ldrb	r3, [r3, #1]
 8001870:	2b00      	cmp	r3, #0
 8001872:	d004      	beq.n	800187e <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	781b      	ldrb	r3, [r3, #0]
 8001878:	b29a      	uxth	r2, r3
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800187e:	78bb      	ldrb	r3, [r7, #2]
 8001880:	2b02      	cmp	r3, #2
 8001882:	d102      	bne.n	800188a <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	2200      	movs	r2, #0
 8001888:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001890:	2b01      	cmp	r3, #1
 8001892:	d101      	bne.n	8001898 <HAL_PCD_EP_Open+0xaa>
 8001894:	2302      	movs	r3, #2
 8001896:	e00e      	b.n	80018b6 <HAL_PCD_EP_Open+0xc8>
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	2201      	movs	r2, #1
 800189c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	68f9      	ldr	r1, [r7, #12]
 80018a6:	4618      	mov	r0, r3
 80018a8:	f001 fbb2 	bl	8003010 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	2200      	movs	r2, #0
 80018b0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 80018b4:	7afb      	ldrb	r3, [r7, #11]
}
 80018b6:	4618      	mov	r0, r3
 80018b8:	3710      	adds	r7, #16
 80018ba:	46bd      	mov	sp, r7
 80018bc:	bd80      	pop	{r7, pc}

080018be <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80018be:	b580      	push	{r7, lr}
 80018c0:	b084      	sub	sp, #16
 80018c2:	af00      	add	r7, sp, #0
 80018c4:	6078      	str	r0, [r7, #4]
 80018c6:	460b      	mov	r3, r1
 80018c8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80018ca:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	da0f      	bge.n	80018f2 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80018d2:	78fb      	ldrb	r3, [r7, #3]
 80018d4:	f003 020f 	and.w	r2, r3, #15
 80018d8:	4613      	mov	r3, r2
 80018da:	00db      	lsls	r3, r3, #3
 80018dc:	1a9b      	subs	r3, r3, r2
 80018de:	009b      	lsls	r3, r3, #2
 80018e0:	3338      	adds	r3, #56	; 0x38
 80018e2:	687a      	ldr	r2, [r7, #4]
 80018e4:	4413      	add	r3, r2
 80018e6:	3304      	adds	r3, #4
 80018e8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	2201      	movs	r2, #1
 80018ee:	705a      	strb	r2, [r3, #1]
 80018f0:	e00f      	b.n	8001912 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80018f2:	78fb      	ldrb	r3, [r7, #3]
 80018f4:	f003 020f 	and.w	r2, r3, #15
 80018f8:	4613      	mov	r3, r2
 80018fa:	00db      	lsls	r3, r3, #3
 80018fc:	1a9b      	subs	r3, r3, r2
 80018fe:	009b      	lsls	r3, r3, #2
 8001900:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001904:	687a      	ldr	r2, [r7, #4]
 8001906:	4413      	add	r3, r2
 8001908:	3304      	adds	r3, #4
 800190a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	2200      	movs	r2, #0
 8001910:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8001912:	78fb      	ldrb	r3, [r7, #3]
 8001914:	f003 030f 	and.w	r3, r3, #15
 8001918:	b2da      	uxtb	r2, r3
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001924:	2b01      	cmp	r3, #1
 8001926:	d101      	bne.n	800192c <HAL_PCD_EP_Close+0x6e>
 8001928:	2302      	movs	r3, #2
 800192a:	e00e      	b.n	800194a <HAL_PCD_EP_Close+0x8c>
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	2201      	movs	r2, #1
 8001930:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	68f9      	ldr	r1, [r7, #12]
 800193a:	4618      	mov	r0, r3
 800193c:	f001 fbf0 	bl	8003120 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	2200      	movs	r2, #0
 8001944:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8001948:	2300      	movs	r3, #0
}
 800194a:	4618      	mov	r0, r3
 800194c:	3710      	adds	r7, #16
 800194e:	46bd      	mov	sp, r7
 8001950:	bd80      	pop	{r7, pc}

08001952 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001952:	b580      	push	{r7, lr}
 8001954:	b086      	sub	sp, #24
 8001956:	af00      	add	r7, sp, #0
 8001958:	60f8      	str	r0, [r7, #12]
 800195a:	607a      	str	r2, [r7, #4]
 800195c:	603b      	str	r3, [r7, #0]
 800195e:	460b      	mov	r3, r1
 8001960:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001962:	7afb      	ldrb	r3, [r7, #11]
 8001964:	f003 020f 	and.w	r2, r3, #15
 8001968:	4613      	mov	r3, r2
 800196a:	00db      	lsls	r3, r3, #3
 800196c:	1a9b      	subs	r3, r3, r2
 800196e:	009b      	lsls	r3, r3, #2
 8001970:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001974:	68fa      	ldr	r2, [r7, #12]
 8001976:	4413      	add	r3, r2
 8001978:	3304      	adds	r3, #4
 800197a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800197c:	697b      	ldr	r3, [r7, #20]
 800197e:	687a      	ldr	r2, [r7, #4]
 8001980:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8001982:	697b      	ldr	r3, [r7, #20]
 8001984:	683a      	ldr	r2, [r7, #0]
 8001986:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8001988:	697b      	ldr	r3, [r7, #20]
 800198a:	2200      	movs	r2, #0
 800198c:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 800198e:	697b      	ldr	r3, [r7, #20]
 8001990:	2200      	movs	r2, #0
 8001992:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001994:	7afb      	ldrb	r3, [r7, #11]
 8001996:	f003 030f 	and.w	r3, r3, #15
 800199a:	b2da      	uxtb	r2, r3
 800199c:	697b      	ldr	r3, [r7, #20]
 800199e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	691b      	ldr	r3, [r3, #16]
 80019a4:	2b01      	cmp	r3, #1
 80019a6:	d102      	bne.n	80019ae <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80019a8:	687a      	ldr	r2, [r7, #4]
 80019aa:	697b      	ldr	r3, [r7, #20]
 80019ac:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80019ae:	7afb      	ldrb	r3, [r7, #11]
 80019b0:	f003 030f 	and.w	r3, r3, #15
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d109      	bne.n	80019cc <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	6818      	ldr	r0, [r3, #0]
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	691b      	ldr	r3, [r3, #16]
 80019c0:	b2db      	uxtb	r3, r3
 80019c2:	461a      	mov	r2, r3
 80019c4:	6979      	ldr	r1, [r7, #20]
 80019c6:	f001 fecb 	bl	8003760 <USB_EP0StartXfer>
 80019ca:	e008      	b.n	80019de <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	6818      	ldr	r0, [r3, #0]
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	691b      	ldr	r3, [r3, #16]
 80019d4:	b2db      	uxtb	r3, r3
 80019d6:	461a      	mov	r2, r3
 80019d8:	6979      	ldr	r1, [r7, #20]
 80019da:	f001 fc7d 	bl	80032d8 <USB_EPStartXfer>
  }

  return HAL_OK;
 80019de:	2300      	movs	r3, #0
}
 80019e0:	4618      	mov	r0, r3
 80019e2:	3718      	adds	r7, #24
 80019e4:	46bd      	mov	sp, r7
 80019e6:	bd80      	pop	{r7, pc}

080019e8 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80019e8:	b480      	push	{r7}
 80019ea:	b083      	sub	sp, #12
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]
 80019f0:	460b      	mov	r3, r1
 80019f2:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80019f4:	78fb      	ldrb	r3, [r7, #3]
 80019f6:	f003 020f 	and.w	r2, r3, #15
 80019fa:	6879      	ldr	r1, [r7, #4]
 80019fc:	4613      	mov	r3, r2
 80019fe:	00db      	lsls	r3, r3, #3
 8001a00:	1a9b      	subs	r3, r3, r2
 8001a02:	009b      	lsls	r3, r3, #2
 8001a04:	440b      	add	r3, r1
 8001a06:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8001a0a:	681b      	ldr	r3, [r3, #0]
}
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	370c      	adds	r7, #12
 8001a10:	46bd      	mov	sp, r7
 8001a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a16:	4770      	bx	lr

08001a18 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b086      	sub	sp, #24
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	60f8      	str	r0, [r7, #12]
 8001a20:	607a      	str	r2, [r7, #4]
 8001a22:	603b      	str	r3, [r7, #0]
 8001a24:	460b      	mov	r3, r1
 8001a26:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001a28:	7afb      	ldrb	r3, [r7, #11]
 8001a2a:	f003 020f 	and.w	r2, r3, #15
 8001a2e:	4613      	mov	r3, r2
 8001a30:	00db      	lsls	r3, r3, #3
 8001a32:	1a9b      	subs	r3, r3, r2
 8001a34:	009b      	lsls	r3, r3, #2
 8001a36:	3338      	adds	r3, #56	; 0x38
 8001a38:	68fa      	ldr	r2, [r7, #12]
 8001a3a:	4413      	add	r3, r2
 8001a3c:	3304      	adds	r3, #4
 8001a3e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001a40:	697b      	ldr	r3, [r7, #20]
 8001a42:	687a      	ldr	r2, [r7, #4]
 8001a44:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8001a46:	697b      	ldr	r3, [r7, #20]
 8001a48:	683a      	ldr	r2, [r7, #0]
 8001a4a:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8001a4c:	697b      	ldr	r3, [r7, #20]
 8001a4e:	2200      	movs	r2, #0
 8001a50:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8001a52:	697b      	ldr	r3, [r7, #20]
 8001a54:	2201      	movs	r2, #1
 8001a56:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001a58:	7afb      	ldrb	r3, [r7, #11]
 8001a5a:	f003 030f 	and.w	r3, r3, #15
 8001a5e:	b2da      	uxtb	r2, r3
 8001a60:	697b      	ldr	r3, [r7, #20]
 8001a62:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	691b      	ldr	r3, [r3, #16]
 8001a68:	2b01      	cmp	r3, #1
 8001a6a:	d102      	bne.n	8001a72 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001a6c:	687a      	ldr	r2, [r7, #4]
 8001a6e:	697b      	ldr	r3, [r7, #20]
 8001a70:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001a72:	7afb      	ldrb	r3, [r7, #11]
 8001a74:	f003 030f 	and.w	r3, r3, #15
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d109      	bne.n	8001a90 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	6818      	ldr	r0, [r3, #0]
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	691b      	ldr	r3, [r3, #16]
 8001a84:	b2db      	uxtb	r3, r3
 8001a86:	461a      	mov	r2, r3
 8001a88:	6979      	ldr	r1, [r7, #20]
 8001a8a:	f001 fe69 	bl	8003760 <USB_EP0StartXfer>
 8001a8e:	e008      	b.n	8001aa2 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	6818      	ldr	r0, [r3, #0]
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	691b      	ldr	r3, [r3, #16]
 8001a98:	b2db      	uxtb	r3, r3
 8001a9a:	461a      	mov	r2, r3
 8001a9c:	6979      	ldr	r1, [r7, #20]
 8001a9e:	f001 fc1b 	bl	80032d8 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001aa2:	2300      	movs	r3, #0
}
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	3718      	adds	r7, #24
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	bd80      	pop	{r7, pc}

08001aac <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	b084      	sub	sp, #16
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]
 8001ab4:	460b      	mov	r3, r1
 8001ab6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001ab8:	78fb      	ldrb	r3, [r7, #3]
 8001aba:	f003 020f 	and.w	r2, r3, #15
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	685b      	ldr	r3, [r3, #4]
 8001ac2:	429a      	cmp	r2, r3
 8001ac4:	d901      	bls.n	8001aca <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001ac6:	2301      	movs	r3, #1
 8001ac8:	e050      	b.n	8001b6c <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001aca:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	da0f      	bge.n	8001af2 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001ad2:	78fb      	ldrb	r3, [r7, #3]
 8001ad4:	f003 020f 	and.w	r2, r3, #15
 8001ad8:	4613      	mov	r3, r2
 8001ada:	00db      	lsls	r3, r3, #3
 8001adc:	1a9b      	subs	r3, r3, r2
 8001ade:	009b      	lsls	r3, r3, #2
 8001ae0:	3338      	adds	r3, #56	; 0x38
 8001ae2:	687a      	ldr	r2, [r7, #4]
 8001ae4:	4413      	add	r3, r2
 8001ae6:	3304      	adds	r3, #4
 8001ae8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	2201      	movs	r2, #1
 8001aee:	705a      	strb	r2, [r3, #1]
 8001af0:	e00d      	b.n	8001b0e <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001af2:	78fa      	ldrb	r2, [r7, #3]
 8001af4:	4613      	mov	r3, r2
 8001af6:	00db      	lsls	r3, r3, #3
 8001af8:	1a9b      	subs	r3, r3, r2
 8001afa:	009b      	lsls	r3, r3, #2
 8001afc:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001b00:	687a      	ldr	r2, [r7, #4]
 8001b02:	4413      	add	r3, r2
 8001b04:	3304      	adds	r3, #4
 8001b06:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	2201      	movs	r2, #1
 8001b12:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001b14:	78fb      	ldrb	r3, [r7, #3]
 8001b16:	f003 030f 	and.w	r3, r3, #15
 8001b1a:	b2da      	uxtb	r2, r3
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001b26:	2b01      	cmp	r3, #1
 8001b28:	d101      	bne.n	8001b2e <HAL_PCD_EP_SetStall+0x82>
 8001b2a:	2302      	movs	r3, #2
 8001b2c:	e01e      	b.n	8001b6c <HAL_PCD_EP_SetStall+0xc0>
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	2201      	movs	r2, #1
 8001b32:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	68f9      	ldr	r1, [r7, #12]
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	f001 fff8 	bl	8003b32 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001b42:	78fb      	ldrb	r3, [r7, #3]
 8001b44:	f003 030f 	and.w	r3, r3, #15
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d10a      	bne.n	8001b62 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	6818      	ldr	r0, [r3, #0]
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	691b      	ldr	r3, [r3, #16]
 8001b54:	b2d9      	uxtb	r1, r3
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001b5c:	461a      	mov	r2, r3
 8001b5e:	f002 f9e9 	bl	8003f34 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	2200      	movs	r2, #0
 8001b66:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8001b6a:	2300      	movs	r3, #0
}
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	3710      	adds	r7, #16
 8001b70:	46bd      	mov	sp, r7
 8001b72:	bd80      	pop	{r7, pc}

08001b74 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	b084      	sub	sp, #16
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]
 8001b7c:	460b      	mov	r3, r1
 8001b7e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001b80:	78fb      	ldrb	r3, [r7, #3]
 8001b82:	f003 020f 	and.w	r2, r3, #15
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	685b      	ldr	r3, [r3, #4]
 8001b8a:	429a      	cmp	r2, r3
 8001b8c:	d901      	bls.n	8001b92 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001b8e:	2301      	movs	r3, #1
 8001b90:	e042      	b.n	8001c18 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001b92:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	da0f      	bge.n	8001bba <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001b9a:	78fb      	ldrb	r3, [r7, #3]
 8001b9c:	f003 020f 	and.w	r2, r3, #15
 8001ba0:	4613      	mov	r3, r2
 8001ba2:	00db      	lsls	r3, r3, #3
 8001ba4:	1a9b      	subs	r3, r3, r2
 8001ba6:	009b      	lsls	r3, r3, #2
 8001ba8:	3338      	adds	r3, #56	; 0x38
 8001baa:	687a      	ldr	r2, [r7, #4]
 8001bac:	4413      	add	r3, r2
 8001bae:	3304      	adds	r3, #4
 8001bb0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	2201      	movs	r2, #1
 8001bb6:	705a      	strb	r2, [r3, #1]
 8001bb8:	e00f      	b.n	8001bda <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001bba:	78fb      	ldrb	r3, [r7, #3]
 8001bbc:	f003 020f 	and.w	r2, r3, #15
 8001bc0:	4613      	mov	r3, r2
 8001bc2:	00db      	lsls	r3, r3, #3
 8001bc4:	1a9b      	subs	r3, r3, r2
 8001bc6:	009b      	lsls	r3, r3, #2
 8001bc8:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001bcc:	687a      	ldr	r2, [r7, #4]
 8001bce:	4413      	add	r3, r2
 8001bd0:	3304      	adds	r3, #4
 8001bd2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	2200      	movs	r2, #0
 8001bde:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001be0:	78fb      	ldrb	r3, [r7, #3]
 8001be2:	f003 030f 	and.w	r3, r3, #15
 8001be6:	b2da      	uxtb	r2, r3
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001bf2:	2b01      	cmp	r3, #1
 8001bf4:	d101      	bne.n	8001bfa <HAL_PCD_EP_ClrStall+0x86>
 8001bf6:	2302      	movs	r3, #2
 8001bf8:	e00e      	b.n	8001c18 <HAL_PCD_EP_ClrStall+0xa4>
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	2201      	movs	r2, #1
 8001bfe:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	68f9      	ldr	r1, [r7, #12]
 8001c08:	4618      	mov	r0, r3
 8001c0a:	f002 f800 	bl	8003c0e <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	2200      	movs	r2, #0
 8001c12:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8001c16:	2300      	movs	r3, #0
}
 8001c18:	4618      	mov	r0, r3
 8001c1a:	3710      	adds	r7, #16
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	bd80      	pop	{r7, pc}

08001c20 <HAL_PCD_EP_Flush>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Flush(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	b082      	sub	sp, #8
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]
 8001c28:	460b      	mov	r3, r1
 8001c2a:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001c32:	2b01      	cmp	r3, #1
 8001c34:	d101      	bne.n	8001c3a <HAL_PCD_EP_Flush+0x1a>
 8001c36:	2302      	movs	r3, #2
 8001c38:	e01b      	b.n	8001c72 <HAL_PCD_EP_Flush+0x52>
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	2201      	movs	r2, #1
 8001c3e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((ep_addr & 0x80U) == 0x80U)
 8001c42:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	da09      	bge.n	8001c5e <HAL_PCD_EP_Flush+0x3e>
  {
    (void)USB_FlushTxFifo(hpcd->Instance, (uint32_t)ep_addr & EP_ADDR_MSK);
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681a      	ldr	r2, [r3, #0]
 8001c4e:	78fb      	ldrb	r3, [r7, #3]
 8001c50:	f003 030f 	and.w	r3, r3, #15
 8001c54:	4619      	mov	r1, r3
 8001c56:	4610      	mov	r0, r2
 8001c58:	f001 f958 	bl	8002f0c <USB_FlushTxFifo>
 8001c5c:	e004      	b.n	8001c68 <HAL_PCD_EP_Flush+0x48>
  }
  else
  {
    (void)USB_FlushRxFifo(hpcd->Instance);
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	4618      	mov	r0, r3
 8001c64:	f001 f976 	bl	8002f54 <USB_FlushRxFifo>
  }

  __HAL_UNLOCK(hpcd);
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8001c70:	2300      	movs	r3, #0
}
 8001c72:	4618      	mov	r0, r3
 8001c74:	3708      	adds	r7, #8
 8001c76:	46bd      	mov	sp, r7
 8001c78:	bd80      	pop	{r7, pc}

08001c7a <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8001c7a:	b580      	push	{r7, lr}
 8001c7c:	b08a      	sub	sp, #40	; 0x28
 8001c7e:	af02      	add	r7, sp, #8
 8001c80:	6078      	str	r0, [r7, #4]
 8001c82:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001c8a:	697b      	ldr	r3, [r7, #20]
 8001c8c:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8001c8e:	683a      	ldr	r2, [r7, #0]
 8001c90:	4613      	mov	r3, r2
 8001c92:	00db      	lsls	r3, r3, #3
 8001c94:	1a9b      	subs	r3, r3, r2
 8001c96:	009b      	lsls	r3, r3, #2
 8001c98:	3338      	adds	r3, #56	; 0x38
 8001c9a:	687a      	ldr	r2, [r7, #4]
 8001c9c:	4413      	add	r3, r2
 8001c9e:	3304      	adds	r3, #4
 8001ca0:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	699a      	ldr	r2, [r3, #24]
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	695b      	ldr	r3, [r3, #20]
 8001caa:	429a      	cmp	r2, r3
 8001cac:	d901      	bls.n	8001cb2 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8001cae:	2301      	movs	r3, #1
 8001cb0:	e06c      	b.n	8001d8c <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	695a      	ldr	r2, [r3, #20]
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	699b      	ldr	r3, [r3, #24]
 8001cba:	1ad3      	subs	r3, r2, r3
 8001cbc:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	689b      	ldr	r3, [r3, #8]
 8001cc2:	69fa      	ldr	r2, [r7, #28]
 8001cc4:	429a      	cmp	r2, r3
 8001cc6:	d902      	bls.n	8001cce <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	689b      	ldr	r3, [r3, #8]
 8001ccc:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8001cce:	69fb      	ldr	r3, [r7, #28]
 8001cd0:	3303      	adds	r3, #3
 8001cd2:	089b      	lsrs	r3, r3, #2
 8001cd4:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001cd6:	e02b      	b.n	8001d30 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	695a      	ldr	r2, [r3, #20]
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	699b      	ldr	r3, [r3, #24]
 8001ce0:	1ad3      	subs	r3, r2, r3
 8001ce2:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	689b      	ldr	r3, [r3, #8]
 8001ce8:	69fa      	ldr	r2, [r7, #28]
 8001cea:	429a      	cmp	r2, r3
 8001cec:	d902      	bls.n	8001cf4 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	689b      	ldr	r3, [r3, #8]
 8001cf2:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8001cf4:	69fb      	ldr	r3, [r7, #28]
 8001cf6:	3303      	adds	r3, #3
 8001cf8:	089b      	lsrs	r3, r3, #2
 8001cfa:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	68d9      	ldr	r1, [r3, #12]
 8001d00:	683b      	ldr	r3, [r7, #0]
 8001d02:	b2da      	uxtb	r2, r3
 8001d04:	69fb      	ldr	r3, [r7, #28]
 8001d06:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8001d0c:	b2db      	uxtb	r3, r3
 8001d0e:	9300      	str	r3, [sp, #0]
 8001d10:	4603      	mov	r3, r0
 8001d12:	6978      	ldr	r0, [r7, #20]
 8001d14:	f001 fe77 	bl	8003a06 <USB_WritePacket>

    ep->xfer_buff  += len;
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	68da      	ldr	r2, [r3, #12]
 8001d1c:	69fb      	ldr	r3, [r7, #28]
 8001d1e:	441a      	add	r2, r3
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	699a      	ldr	r2, [r3, #24]
 8001d28:	69fb      	ldr	r3, [r7, #28]
 8001d2a:	441a      	add	r2, r3
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001d30:	683b      	ldr	r3, [r7, #0]
 8001d32:	015a      	lsls	r2, r3, #5
 8001d34:	693b      	ldr	r3, [r7, #16]
 8001d36:	4413      	add	r3, r2
 8001d38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001d3c:	699b      	ldr	r3, [r3, #24]
 8001d3e:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8001d40:	69ba      	ldr	r2, [r7, #24]
 8001d42:	429a      	cmp	r2, r3
 8001d44:	d809      	bhi.n	8001d5a <PCD_WriteEmptyTxFifo+0xe0>
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	699a      	ldr	r2, [r3, #24]
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001d4e:	429a      	cmp	r2, r3
 8001d50:	d203      	bcs.n	8001d5a <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	695b      	ldr	r3, [r3, #20]
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d1be      	bne.n	8001cd8 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	695a      	ldr	r2, [r3, #20]
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	699b      	ldr	r3, [r3, #24]
 8001d62:	429a      	cmp	r2, r3
 8001d64:	d811      	bhi.n	8001d8a <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001d66:	683b      	ldr	r3, [r7, #0]
 8001d68:	f003 030f 	and.w	r3, r3, #15
 8001d6c:	2201      	movs	r2, #1
 8001d6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d72:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001d74:	693b      	ldr	r3, [r7, #16]
 8001d76:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001d7a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001d7c:	68bb      	ldr	r3, [r7, #8]
 8001d7e:	43db      	mvns	r3, r3
 8001d80:	6939      	ldr	r1, [r7, #16]
 8001d82:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8001d86:	4013      	ands	r3, r2
 8001d88:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8001d8a:	2300      	movs	r3, #0
}
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	3720      	adds	r7, #32
 8001d90:	46bd      	mov	sp, r7
 8001d92:	bd80      	pop	{r7, pc}

08001d94 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b086      	sub	sp, #24
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]
 8001d9c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001da4:	697b      	ldr	r3, [r7, #20]
 8001da6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8001da8:	697b      	ldr	r3, [r7, #20]
 8001daa:	333c      	adds	r3, #60	; 0x3c
 8001dac:	3304      	adds	r3, #4
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8001db2:	683b      	ldr	r3, [r7, #0]
 8001db4:	015a      	lsls	r2, r3, #5
 8001db6:	693b      	ldr	r3, [r7, #16]
 8001db8:	4413      	add	r3, r2
 8001dba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001dbe:	689b      	ldr	r3, [r3, #8]
 8001dc0:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	691b      	ldr	r3, [r3, #16]
 8001dc6:	2b01      	cmp	r3, #1
 8001dc8:	f040 80a0 	bne.w	8001f0c <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8001dcc:	68bb      	ldr	r3, [r7, #8]
 8001dce:	f003 0308 	and.w	r3, r3, #8
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d015      	beq.n	8001e02 <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	4a72      	ldr	r2, [pc, #456]	; (8001fa4 <PCD_EP_OutXfrComplete_int+0x210>)
 8001dda:	4293      	cmp	r3, r2
 8001ddc:	f240 80dd 	bls.w	8001f9a <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8001de0:	68bb      	ldr	r3, [r7, #8]
 8001de2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	f000 80d7 	beq.w	8001f9a <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8001dec:	683b      	ldr	r3, [r7, #0]
 8001dee:	015a      	lsls	r2, r3, #5
 8001df0:	693b      	ldr	r3, [r7, #16]
 8001df2:	4413      	add	r3, r2
 8001df4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001df8:	461a      	mov	r2, r3
 8001dfa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001dfe:	6093      	str	r3, [r2, #8]
 8001e00:	e0cb      	b.n	8001f9a <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8001e02:	68bb      	ldr	r3, [r7, #8]
 8001e04:	f003 0320 	and.w	r3, r3, #32
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d009      	beq.n	8001e20 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001e0c:	683b      	ldr	r3, [r7, #0]
 8001e0e:	015a      	lsls	r2, r3, #5
 8001e10:	693b      	ldr	r3, [r7, #16]
 8001e12:	4413      	add	r3, r2
 8001e14:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001e18:	461a      	mov	r2, r3
 8001e1a:	2320      	movs	r3, #32
 8001e1c:	6093      	str	r3, [r2, #8]
 8001e1e:	e0bc      	b.n	8001f9a <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8001e20:	68bb      	ldr	r3, [r7, #8]
 8001e22:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	f040 80b7 	bne.w	8001f9a <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	4a5d      	ldr	r2, [pc, #372]	; (8001fa4 <PCD_EP_OutXfrComplete_int+0x210>)
 8001e30:	4293      	cmp	r3, r2
 8001e32:	d90f      	bls.n	8001e54 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8001e34:	68bb      	ldr	r3, [r7, #8]
 8001e36:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d00a      	beq.n	8001e54 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8001e3e:	683b      	ldr	r3, [r7, #0]
 8001e40:	015a      	lsls	r2, r3, #5
 8001e42:	693b      	ldr	r3, [r7, #16]
 8001e44:	4413      	add	r3, r2
 8001e46:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001e4a:	461a      	mov	r2, r3
 8001e4c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001e50:	6093      	str	r3, [r2, #8]
 8001e52:	e0a2      	b.n	8001f9a <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8001e54:	6879      	ldr	r1, [r7, #4]
 8001e56:	683a      	ldr	r2, [r7, #0]
 8001e58:	4613      	mov	r3, r2
 8001e5a:	00db      	lsls	r3, r3, #3
 8001e5c:	1a9b      	subs	r3, r3, r2
 8001e5e:	009b      	lsls	r3, r3, #2
 8001e60:	440b      	add	r3, r1
 8001e62:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8001e66:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8001e68:	683b      	ldr	r3, [r7, #0]
 8001e6a:	0159      	lsls	r1, r3, #5
 8001e6c:	693b      	ldr	r3, [r7, #16]
 8001e6e:	440b      	add	r3, r1
 8001e70:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001e74:	691b      	ldr	r3, [r3, #16]
 8001e76:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8001e7a:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8001e7c:	6878      	ldr	r0, [r7, #4]
 8001e7e:	683a      	ldr	r2, [r7, #0]
 8001e80:	4613      	mov	r3, r2
 8001e82:	00db      	lsls	r3, r3, #3
 8001e84:	1a9b      	subs	r3, r3, r2
 8001e86:	009b      	lsls	r3, r3, #2
 8001e88:	4403      	add	r3, r0
 8001e8a:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8001e8e:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8001e90:	6879      	ldr	r1, [r7, #4]
 8001e92:	683a      	ldr	r2, [r7, #0]
 8001e94:	4613      	mov	r3, r2
 8001e96:	00db      	lsls	r3, r3, #3
 8001e98:	1a9b      	subs	r3, r3, r2
 8001e9a:	009b      	lsls	r3, r3, #2
 8001e9c:	440b      	add	r3, r1
 8001e9e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001ea2:	6819      	ldr	r1, [r3, #0]
 8001ea4:	6878      	ldr	r0, [r7, #4]
 8001ea6:	683a      	ldr	r2, [r7, #0]
 8001ea8:	4613      	mov	r3, r2
 8001eaa:	00db      	lsls	r3, r3, #3
 8001eac:	1a9b      	subs	r3, r3, r2
 8001eae:	009b      	lsls	r3, r3, #2
 8001eb0:	4403      	add	r3, r0
 8001eb2:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	4419      	add	r1, r3
 8001eba:	6878      	ldr	r0, [r7, #4]
 8001ebc:	683a      	ldr	r2, [r7, #0]
 8001ebe:	4613      	mov	r3, r2
 8001ec0:	00db      	lsls	r3, r3, #3
 8001ec2:	1a9b      	subs	r3, r3, r2
 8001ec4:	009b      	lsls	r3, r3, #2
 8001ec6:	4403      	add	r3, r0
 8001ec8:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001ecc:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8001ece:	683b      	ldr	r3, [r7, #0]
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d114      	bne.n	8001efe <PCD_EP_OutXfrComplete_int+0x16a>
 8001ed4:	6879      	ldr	r1, [r7, #4]
 8001ed6:	683a      	ldr	r2, [r7, #0]
 8001ed8:	4613      	mov	r3, r2
 8001eda:	00db      	lsls	r3, r3, #3
 8001edc:	1a9b      	subs	r3, r3, r2
 8001ede:	009b      	lsls	r3, r3, #2
 8001ee0:	440b      	add	r3, r1
 8001ee2:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d108      	bne.n	8001efe <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	6818      	ldr	r0, [r3, #0]
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001ef6:	461a      	mov	r2, r3
 8001ef8:	2101      	movs	r1, #1
 8001efa:	f002 f81b 	bl	8003f34 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8001efe:	683b      	ldr	r3, [r7, #0]
 8001f00:	b2db      	uxtb	r3, r3
 8001f02:	4619      	mov	r1, r3
 8001f04:	6878      	ldr	r0, [r7, #4]
 8001f06:	f005 f9dd 	bl	80072c4 <HAL_PCD_DataOutStageCallback>
 8001f0a:	e046      	b.n	8001f9a <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	4a26      	ldr	r2, [pc, #152]	; (8001fa8 <PCD_EP_OutXfrComplete_int+0x214>)
 8001f10:	4293      	cmp	r3, r2
 8001f12:	d124      	bne.n	8001f5e <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8001f14:	68bb      	ldr	r3, [r7, #8]
 8001f16:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d00a      	beq.n	8001f34 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8001f1e:	683b      	ldr	r3, [r7, #0]
 8001f20:	015a      	lsls	r2, r3, #5
 8001f22:	693b      	ldr	r3, [r7, #16]
 8001f24:	4413      	add	r3, r2
 8001f26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001f2a:	461a      	mov	r2, r3
 8001f2c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001f30:	6093      	str	r3, [r2, #8]
 8001f32:	e032      	b.n	8001f9a <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001f34:	68bb      	ldr	r3, [r7, #8]
 8001f36:	f003 0320 	and.w	r3, r3, #32
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d008      	beq.n	8001f50 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001f3e:	683b      	ldr	r3, [r7, #0]
 8001f40:	015a      	lsls	r2, r3, #5
 8001f42:	693b      	ldr	r3, [r7, #16]
 8001f44:	4413      	add	r3, r2
 8001f46:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001f4a:	461a      	mov	r2, r3
 8001f4c:	2320      	movs	r3, #32
 8001f4e:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8001f50:	683b      	ldr	r3, [r7, #0]
 8001f52:	b2db      	uxtb	r3, r3
 8001f54:	4619      	mov	r1, r3
 8001f56:	6878      	ldr	r0, [r7, #4]
 8001f58:	f005 f9b4 	bl	80072c4 <HAL_PCD_DataOutStageCallback>
 8001f5c:	e01d      	b.n	8001f9a <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8001f5e:	683b      	ldr	r3, [r7, #0]
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d114      	bne.n	8001f8e <PCD_EP_OutXfrComplete_int+0x1fa>
 8001f64:	6879      	ldr	r1, [r7, #4]
 8001f66:	683a      	ldr	r2, [r7, #0]
 8001f68:	4613      	mov	r3, r2
 8001f6a:	00db      	lsls	r3, r3, #3
 8001f6c:	1a9b      	subs	r3, r3, r2
 8001f6e:	009b      	lsls	r3, r3, #2
 8001f70:	440b      	add	r3, r1
 8001f72:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d108      	bne.n	8001f8e <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	6818      	ldr	r0, [r3, #0]
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001f86:	461a      	mov	r2, r3
 8001f88:	2100      	movs	r1, #0
 8001f8a:	f001 ffd3 	bl	8003f34 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8001f8e:	683b      	ldr	r3, [r7, #0]
 8001f90:	b2db      	uxtb	r3, r3
 8001f92:	4619      	mov	r1, r3
 8001f94:	6878      	ldr	r0, [r7, #4]
 8001f96:	f005 f995 	bl	80072c4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8001f9a:	2300      	movs	r3, #0
}
 8001f9c:	4618      	mov	r0, r3
 8001f9e:	3718      	adds	r7, #24
 8001fa0:	46bd      	mov	sp, r7
 8001fa2:	bd80      	pop	{r7, pc}
 8001fa4:	4f54300a 	.word	0x4f54300a
 8001fa8:	4f54310a 	.word	0x4f54310a

08001fac <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	b086      	sub	sp, #24
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	6078      	str	r0, [r7, #4]
 8001fb4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001fbc:	697b      	ldr	r3, [r7, #20]
 8001fbe:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8001fc0:	697b      	ldr	r3, [r7, #20]
 8001fc2:	333c      	adds	r3, #60	; 0x3c
 8001fc4:	3304      	adds	r3, #4
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8001fca:	683b      	ldr	r3, [r7, #0]
 8001fcc:	015a      	lsls	r2, r3, #5
 8001fce:	693b      	ldr	r3, [r7, #16]
 8001fd0:	4413      	add	r3, r2
 8001fd2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001fd6:	689b      	ldr	r3, [r3, #8]
 8001fd8:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	4a15      	ldr	r2, [pc, #84]	; (8002034 <PCD_EP_OutSetupPacket_int+0x88>)
 8001fde:	4293      	cmp	r3, r2
 8001fe0:	d90e      	bls.n	8002000 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8001fe2:	68bb      	ldr	r3, [r7, #8]
 8001fe4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d009      	beq.n	8002000 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8001fec:	683b      	ldr	r3, [r7, #0]
 8001fee:	015a      	lsls	r2, r3, #5
 8001ff0:	693b      	ldr	r3, [r7, #16]
 8001ff2:	4413      	add	r3, r2
 8001ff4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001ff8:	461a      	mov	r2, r3
 8001ffa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001ffe:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8002000:	6878      	ldr	r0, [r7, #4]
 8002002:	f005 f94d 	bl	80072a0 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	4a0a      	ldr	r2, [pc, #40]	; (8002034 <PCD_EP_OutSetupPacket_int+0x88>)
 800200a:	4293      	cmp	r3, r2
 800200c:	d90c      	bls.n	8002028 <PCD_EP_OutSetupPacket_int+0x7c>
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	691b      	ldr	r3, [r3, #16]
 8002012:	2b01      	cmp	r3, #1
 8002014:	d108      	bne.n	8002028 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	6818      	ldr	r0, [r3, #0]
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002020:	461a      	mov	r2, r3
 8002022:	2101      	movs	r1, #1
 8002024:	f001 ff86 	bl	8003f34 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8002028:	2300      	movs	r3, #0
}
 800202a:	4618      	mov	r0, r3
 800202c:	3718      	adds	r7, #24
 800202e:	46bd      	mov	sp, r7
 8002030:	bd80      	pop	{r7, pc}
 8002032:	bf00      	nop
 8002034:	4f54300a 	.word	0x4f54300a

08002038 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8002038:	b480      	push	{r7}
 800203a:	b085      	sub	sp, #20
 800203c:	af00      	add	r7, sp, #0
 800203e:	6078      	str	r0, [r7, #4]
 8002040:	460b      	mov	r3, r1
 8002042:	70fb      	strb	r3, [r7, #3]
 8002044:	4613      	mov	r3, r2
 8002046:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800204e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8002050:	78fb      	ldrb	r3, [r7, #3]
 8002052:	2b00      	cmp	r3, #0
 8002054:	d107      	bne.n	8002066 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8002056:	883b      	ldrh	r3, [r7, #0]
 8002058:	0419      	lsls	r1, r3, #16
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	68ba      	ldr	r2, [r7, #8]
 8002060:	430a      	orrs	r2, r1
 8002062:	629a      	str	r2, [r3, #40]	; 0x28
 8002064:	e028      	b.n	80020b8 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800206c:	0c1b      	lsrs	r3, r3, #16
 800206e:	68ba      	ldr	r2, [r7, #8]
 8002070:	4413      	add	r3, r2
 8002072:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002074:	2300      	movs	r3, #0
 8002076:	73fb      	strb	r3, [r7, #15]
 8002078:	e00d      	b.n	8002096 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681a      	ldr	r2, [r3, #0]
 800207e:	7bfb      	ldrb	r3, [r7, #15]
 8002080:	3340      	adds	r3, #64	; 0x40
 8002082:	009b      	lsls	r3, r3, #2
 8002084:	4413      	add	r3, r2
 8002086:	685b      	ldr	r3, [r3, #4]
 8002088:	0c1b      	lsrs	r3, r3, #16
 800208a:	68ba      	ldr	r2, [r7, #8]
 800208c:	4413      	add	r3, r2
 800208e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002090:	7bfb      	ldrb	r3, [r7, #15]
 8002092:	3301      	adds	r3, #1
 8002094:	73fb      	strb	r3, [r7, #15]
 8002096:	7bfa      	ldrb	r2, [r7, #15]
 8002098:	78fb      	ldrb	r3, [r7, #3]
 800209a:	3b01      	subs	r3, #1
 800209c:	429a      	cmp	r2, r3
 800209e:	d3ec      	bcc.n	800207a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80020a0:	883b      	ldrh	r3, [r7, #0]
 80020a2:	0418      	lsls	r0, r3, #16
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	6819      	ldr	r1, [r3, #0]
 80020a8:	78fb      	ldrb	r3, [r7, #3]
 80020aa:	3b01      	subs	r3, #1
 80020ac:	68ba      	ldr	r2, [r7, #8]
 80020ae:	4302      	orrs	r2, r0
 80020b0:	3340      	adds	r3, #64	; 0x40
 80020b2:	009b      	lsls	r3, r3, #2
 80020b4:	440b      	add	r3, r1
 80020b6:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80020b8:	2300      	movs	r3, #0
}
 80020ba:	4618      	mov	r0, r3
 80020bc:	3714      	adds	r7, #20
 80020be:	46bd      	mov	sp, r7
 80020c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c4:	4770      	bx	lr

080020c6 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80020c6:	b480      	push	{r7}
 80020c8:	b083      	sub	sp, #12
 80020ca:	af00      	add	r7, sp, #0
 80020cc:	6078      	str	r0, [r7, #4]
 80020ce:	460b      	mov	r3, r1
 80020d0:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	887a      	ldrh	r2, [r7, #2]
 80020d8:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80020da:	2300      	movs	r3, #0
}
 80020dc:	4618      	mov	r0, r3
 80020de:	370c      	adds	r7, #12
 80020e0:	46bd      	mov	sp, r7
 80020e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e6:	4770      	bx	lr

080020e8 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80020e8:	b480      	push	{r7}
 80020ea:	b083      	sub	sp, #12
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	6078      	str	r0, [r7, #4]
 80020f0:	460b      	mov	r3, r1
 80020f2:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80020f4:	bf00      	nop
 80020f6:	370c      	adds	r7, #12
 80020f8:	46bd      	mov	sp, r7
 80020fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fe:	4770      	bx	lr

08002100 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002100:	b580      	push	{r7, lr}
 8002102:	b086      	sub	sp, #24
 8002104:	af00      	add	r7, sp, #0
 8002106:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	2b00      	cmp	r3, #0
 800210c:	d101      	bne.n	8002112 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800210e:	2301      	movs	r3, #1
 8002110:	e267      	b.n	80025e2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	f003 0301 	and.w	r3, r3, #1
 800211a:	2b00      	cmp	r3, #0
 800211c:	d075      	beq.n	800220a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800211e:	4b88      	ldr	r3, [pc, #544]	; (8002340 <HAL_RCC_OscConfig+0x240>)
 8002120:	689b      	ldr	r3, [r3, #8]
 8002122:	f003 030c 	and.w	r3, r3, #12
 8002126:	2b04      	cmp	r3, #4
 8002128:	d00c      	beq.n	8002144 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800212a:	4b85      	ldr	r3, [pc, #532]	; (8002340 <HAL_RCC_OscConfig+0x240>)
 800212c:	689b      	ldr	r3, [r3, #8]
 800212e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002132:	2b08      	cmp	r3, #8
 8002134:	d112      	bne.n	800215c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002136:	4b82      	ldr	r3, [pc, #520]	; (8002340 <HAL_RCC_OscConfig+0x240>)
 8002138:	685b      	ldr	r3, [r3, #4]
 800213a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800213e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002142:	d10b      	bne.n	800215c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002144:	4b7e      	ldr	r3, [pc, #504]	; (8002340 <HAL_RCC_OscConfig+0x240>)
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800214c:	2b00      	cmp	r3, #0
 800214e:	d05b      	beq.n	8002208 <HAL_RCC_OscConfig+0x108>
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	685b      	ldr	r3, [r3, #4]
 8002154:	2b00      	cmp	r3, #0
 8002156:	d157      	bne.n	8002208 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002158:	2301      	movs	r3, #1
 800215a:	e242      	b.n	80025e2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	685b      	ldr	r3, [r3, #4]
 8002160:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002164:	d106      	bne.n	8002174 <HAL_RCC_OscConfig+0x74>
 8002166:	4b76      	ldr	r3, [pc, #472]	; (8002340 <HAL_RCC_OscConfig+0x240>)
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	4a75      	ldr	r2, [pc, #468]	; (8002340 <HAL_RCC_OscConfig+0x240>)
 800216c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002170:	6013      	str	r3, [r2, #0]
 8002172:	e01d      	b.n	80021b0 <HAL_RCC_OscConfig+0xb0>
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	685b      	ldr	r3, [r3, #4]
 8002178:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800217c:	d10c      	bne.n	8002198 <HAL_RCC_OscConfig+0x98>
 800217e:	4b70      	ldr	r3, [pc, #448]	; (8002340 <HAL_RCC_OscConfig+0x240>)
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	4a6f      	ldr	r2, [pc, #444]	; (8002340 <HAL_RCC_OscConfig+0x240>)
 8002184:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002188:	6013      	str	r3, [r2, #0]
 800218a:	4b6d      	ldr	r3, [pc, #436]	; (8002340 <HAL_RCC_OscConfig+0x240>)
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	4a6c      	ldr	r2, [pc, #432]	; (8002340 <HAL_RCC_OscConfig+0x240>)
 8002190:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002194:	6013      	str	r3, [r2, #0]
 8002196:	e00b      	b.n	80021b0 <HAL_RCC_OscConfig+0xb0>
 8002198:	4b69      	ldr	r3, [pc, #420]	; (8002340 <HAL_RCC_OscConfig+0x240>)
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	4a68      	ldr	r2, [pc, #416]	; (8002340 <HAL_RCC_OscConfig+0x240>)
 800219e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80021a2:	6013      	str	r3, [r2, #0]
 80021a4:	4b66      	ldr	r3, [pc, #408]	; (8002340 <HAL_RCC_OscConfig+0x240>)
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	4a65      	ldr	r2, [pc, #404]	; (8002340 <HAL_RCC_OscConfig+0x240>)
 80021aa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80021ae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	685b      	ldr	r3, [r3, #4]
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d013      	beq.n	80021e0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021b8:	f7fe fb2c 	bl	8000814 <HAL_GetTick>
 80021bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021be:	e008      	b.n	80021d2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80021c0:	f7fe fb28 	bl	8000814 <HAL_GetTick>
 80021c4:	4602      	mov	r2, r0
 80021c6:	693b      	ldr	r3, [r7, #16]
 80021c8:	1ad3      	subs	r3, r2, r3
 80021ca:	2b64      	cmp	r3, #100	; 0x64
 80021cc:	d901      	bls.n	80021d2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80021ce:	2303      	movs	r3, #3
 80021d0:	e207      	b.n	80025e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021d2:	4b5b      	ldr	r3, [pc, #364]	; (8002340 <HAL_RCC_OscConfig+0x240>)
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d0f0      	beq.n	80021c0 <HAL_RCC_OscConfig+0xc0>
 80021de:	e014      	b.n	800220a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021e0:	f7fe fb18 	bl	8000814 <HAL_GetTick>
 80021e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80021e6:	e008      	b.n	80021fa <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80021e8:	f7fe fb14 	bl	8000814 <HAL_GetTick>
 80021ec:	4602      	mov	r2, r0
 80021ee:	693b      	ldr	r3, [r7, #16]
 80021f0:	1ad3      	subs	r3, r2, r3
 80021f2:	2b64      	cmp	r3, #100	; 0x64
 80021f4:	d901      	bls.n	80021fa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80021f6:	2303      	movs	r3, #3
 80021f8:	e1f3      	b.n	80025e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80021fa:	4b51      	ldr	r3, [pc, #324]	; (8002340 <HAL_RCC_OscConfig+0x240>)
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002202:	2b00      	cmp	r3, #0
 8002204:	d1f0      	bne.n	80021e8 <HAL_RCC_OscConfig+0xe8>
 8002206:	e000      	b.n	800220a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002208:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f003 0302 	and.w	r3, r3, #2
 8002212:	2b00      	cmp	r3, #0
 8002214:	d063      	beq.n	80022de <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002216:	4b4a      	ldr	r3, [pc, #296]	; (8002340 <HAL_RCC_OscConfig+0x240>)
 8002218:	689b      	ldr	r3, [r3, #8]
 800221a:	f003 030c 	and.w	r3, r3, #12
 800221e:	2b00      	cmp	r3, #0
 8002220:	d00b      	beq.n	800223a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002222:	4b47      	ldr	r3, [pc, #284]	; (8002340 <HAL_RCC_OscConfig+0x240>)
 8002224:	689b      	ldr	r3, [r3, #8]
 8002226:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800222a:	2b08      	cmp	r3, #8
 800222c:	d11c      	bne.n	8002268 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800222e:	4b44      	ldr	r3, [pc, #272]	; (8002340 <HAL_RCC_OscConfig+0x240>)
 8002230:	685b      	ldr	r3, [r3, #4]
 8002232:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002236:	2b00      	cmp	r3, #0
 8002238:	d116      	bne.n	8002268 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800223a:	4b41      	ldr	r3, [pc, #260]	; (8002340 <HAL_RCC_OscConfig+0x240>)
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f003 0302 	and.w	r3, r3, #2
 8002242:	2b00      	cmp	r3, #0
 8002244:	d005      	beq.n	8002252 <HAL_RCC_OscConfig+0x152>
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	68db      	ldr	r3, [r3, #12]
 800224a:	2b01      	cmp	r3, #1
 800224c:	d001      	beq.n	8002252 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800224e:	2301      	movs	r3, #1
 8002250:	e1c7      	b.n	80025e2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002252:	4b3b      	ldr	r3, [pc, #236]	; (8002340 <HAL_RCC_OscConfig+0x240>)
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	691b      	ldr	r3, [r3, #16]
 800225e:	00db      	lsls	r3, r3, #3
 8002260:	4937      	ldr	r1, [pc, #220]	; (8002340 <HAL_RCC_OscConfig+0x240>)
 8002262:	4313      	orrs	r3, r2
 8002264:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002266:	e03a      	b.n	80022de <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	68db      	ldr	r3, [r3, #12]
 800226c:	2b00      	cmp	r3, #0
 800226e:	d020      	beq.n	80022b2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002270:	4b34      	ldr	r3, [pc, #208]	; (8002344 <HAL_RCC_OscConfig+0x244>)
 8002272:	2201      	movs	r2, #1
 8002274:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002276:	f7fe facd 	bl	8000814 <HAL_GetTick>
 800227a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800227c:	e008      	b.n	8002290 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800227e:	f7fe fac9 	bl	8000814 <HAL_GetTick>
 8002282:	4602      	mov	r2, r0
 8002284:	693b      	ldr	r3, [r7, #16]
 8002286:	1ad3      	subs	r3, r2, r3
 8002288:	2b02      	cmp	r3, #2
 800228a:	d901      	bls.n	8002290 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800228c:	2303      	movs	r3, #3
 800228e:	e1a8      	b.n	80025e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002290:	4b2b      	ldr	r3, [pc, #172]	; (8002340 <HAL_RCC_OscConfig+0x240>)
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f003 0302 	and.w	r3, r3, #2
 8002298:	2b00      	cmp	r3, #0
 800229a:	d0f0      	beq.n	800227e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800229c:	4b28      	ldr	r3, [pc, #160]	; (8002340 <HAL_RCC_OscConfig+0x240>)
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	691b      	ldr	r3, [r3, #16]
 80022a8:	00db      	lsls	r3, r3, #3
 80022aa:	4925      	ldr	r1, [pc, #148]	; (8002340 <HAL_RCC_OscConfig+0x240>)
 80022ac:	4313      	orrs	r3, r2
 80022ae:	600b      	str	r3, [r1, #0]
 80022b0:	e015      	b.n	80022de <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80022b2:	4b24      	ldr	r3, [pc, #144]	; (8002344 <HAL_RCC_OscConfig+0x244>)
 80022b4:	2200      	movs	r2, #0
 80022b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022b8:	f7fe faac 	bl	8000814 <HAL_GetTick>
 80022bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80022be:	e008      	b.n	80022d2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80022c0:	f7fe faa8 	bl	8000814 <HAL_GetTick>
 80022c4:	4602      	mov	r2, r0
 80022c6:	693b      	ldr	r3, [r7, #16]
 80022c8:	1ad3      	subs	r3, r2, r3
 80022ca:	2b02      	cmp	r3, #2
 80022cc:	d901      	bls.n	80022d2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80022ce:	2303      	movs	r3, #3
 80022d0:	e187      	b.n	80025e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80022d2:	4b1b      	ldr	r3, [pc, #108]	; (8002340 <HAL_RCC_OscConfig+0x240>)
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f003 0302 	and.w	r3, r3, #2
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d1f0      	bne.n	80022c0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f003 0308 	and.w	r3, r3, #8
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d036      	beq.n	8002358 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	695b      	ldr	r3, [r3, #20]
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d016      	beq.n	8002320 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80022f2:	4b15      	ldr	r3, [pc, #84]	; (8002348 <HAL_RCC_OscConfig+0x248>)
 80022f4:	2201      	movs	r2, #1
 80022f6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022f8:	f7fe fa8c 	bl	8000814 <HAL_GetTick>
 80022fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80022fe:	e008      	b.n	8002312 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002300:	f7fe fa88 	bl	8000814 <HAL_GetTick>
 8002304:	4602      	mov	r2, r0
 8002306:	693b      	ldr	r3, [r7, #16]
 8002308:	1ad3      	subs	r3, r2, r3
 800230a:	2b02      	cmp	r3, #2
 800230c:	d901      	bls.n	8002312 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800230e:	2303      	movs	r3, #3
 8002310:	e167      	b.n	80025e2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002312:	4b0b      	ldr	r3, [pc, #44]	; (8002340 <HAL_RCC_OscConfig+0x240>)
 8002314:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002316:	f003 0302 	and.w	r3, r3, #2
 800231a:	2b00      	cmp	r3, #0
 800231c:	d0f0      	beq.n	8002300 <HAL_RCC_OscConfig+0x200>
 800231e:	e01b      	b.n	8002358 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002320:	4b09      	ldr	r3, [pc, #36]	; (8002348 <HAL_RCC_OscConfig+0x248>)
 8002322:	2200      	movs	r2, #0
 8002324:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002326:	f7fe fa75 	bl	8000814 <HAL_GetTick>
 800232a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800232c:	e00e      	b.n	800234c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800232e:	f7fe fa71 	bl	8000814 <HAL_GetTick>
 8002332:	4602      	mov	r2, r0
 8002334:	693b      	ldr	r3, [r7, #16]
 8002336:	1ad3      	subs	r3, r2, r3
 8002338:	2b02      	cmp	r3, #2
 800233a:	d907      	bls.n	800234c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800233c:	2303      	movs	r3, #3
 800233e:	e150      	b.n	80025e2 <HAL_RCC_OscConfig+0x4e2>
 8002340:	40023800 	.word	0x40023800
 8002344:	42470000 	.word	0x42470000
 8002348:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800234c:	4b88      	ldr	r3, [pc, #544]	; (8002570 <HAL_RCC_OscConfig+0x470>)
 800234e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002350:	f003 0302 	and.w	r3, r3, #2
 8002354:	2b00      	cmp	r3, #0
 8002356:	d1ea      	bne.n	800232e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	f003 0304 	and.w	r3, r3, #4
 8002360:	2b00      	cmp	r3, #0
 8002362:	f000 8097 	beq.w	8002494 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002366:	2300      	movs	r3, #0
 8002368:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800236a:	4b81      	ldr	r3, [pc, #516]	; (8002570 <HAL_RCC_OscConfig+0x470>)
 800236c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800236e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002372:	2b00      	cmp	r3, #0
 8002374:	d10f      	bne.n	8002396 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002376:	2300      	movs	r3, #0
 8002378:	60bb      	str	r3, [r7, #8]
 800237a:	4b7d      	ldr	r3, [pc, #500]	; (8002570 <HAL_RCC_OscConfig+0x470>)
 800237c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800237e:	4a7c      	ldr	r2, [pc, #496]	; (8002570 <HAL_RCC_OscConfig+0x470>)
 8002380:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002384:	6413      	str	r3, [r2, #64]	; 0x40
 8002386:	4b7a      	ldr	r3, [pc, #488]	; (8002570 <HAL_RCC_OscConfig+0x470>)
 8002388:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800238a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800238e:	60bb      	str	r3, [r7, #8]
 8002390:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002392:	2301      	movs	r3, #1
 8002394:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002396:	4b77      	ldr	r3, [pc, #476]	; (8002574 <HAL_RCC_OscConfig+0x474>)
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d118      	bne.n	80023d4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80023a2:	4b74      	ldr	r3, [pc, #464]	; (8002574 <HAL_RCC_OscConfig+0x474>)
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	4a73      	ldr	r2, [pc, #460]	; (8002574 <HAL_RCC_OscConfig+0x474>)
 80023a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023ac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80023ae:	f7fe fa31 	bl	8000814 <HAL_GetTick>
 80023b2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023b4:	e008      	b.n	80023c8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80023b6:	f7fe fa2d 	bl	8000814 <HAL_GetTick>
 80023ba:	4602      	mov	r2, r0
 80023bc:	693b      	ldr	r3, [r7, #16]
 80023be:	1ad3      	subs	r3, r2, r3
 80023c0:	2b02      	cmp	r3, #2
 80023c2:	d901      	bls.n	80023c8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80023c4:	2303      	movs	r3, #3
 80023c6:	e10c      	b.n	80025e2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023c8:	4b6a      	ldr	r3, [pc, #424]	; (8002574 <HAL_RCC_OscConfig+0x474>)
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d0f0      	beq.n	80023b6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	689b      	ldr	r3, [r3, #8]
 80023d8:	2b01      	cmp	r3, #1
 80023da:	d106      	bne.n	80023ea <HAL_RCC_OscConfig+0x2ea>
 80023dc:	4b64      	ldr	r3, [pc, #400]	; (8002570 <HAL_RCC_OscConfig+0x470>)
 80023de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023e0:	4a63      	ldr	r2, [pc, #396]	; (8002570 <HAL_RCC_OscConfig+0x470>)
 80023e2:	f043 0301 	orr.w	r3, r3, #1
 80023e6:	6713      	str	r3, [r2, #112]	; 0x70
 80023e8:	e01c      	b.n	8002424 <HAL_RCC_OscConfig+0x324>
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	689b      	ldr	r3, [r3, #8]
 80023ee:	2b05      	cmp	r3, #5
 80023f0:	d10c      	bne.n	800240c <HAL_RCC_OscConfig+0x30c>
 80023f2:	4b5f      	ldr	r3, [pc, #380]	; (8002570 <HAL_RCC_OscConfig+0x470>)
 80023f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023f6:	4a5e      	ldr	r2, [pc, #376]	; (8002570 <HAL_RCC_OscConfig+0x470>)
 80023f8:	f043 0304 	orr.w	r3, r3, #4
 80023fc:	6713      	str	r3, [r2, #112]	; 0x70
 80023fe:	4b5c      	ldr	r3, [pc, #368]	; (8002570 <HAL_RCC_OscConfig+0x470>)
 8002400:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002402:	4a5b      	ldr	r2, [pc, #364]	; (8002570 <HAL_RCC_OscConfig+0x470>)
 8002404:	f043 0301 	orr.w	r3, r3, #1
 8002408:	6713      	str	r3, [r2, #112]	; 0x70
 800240a:	e00b      	b.n	8002424 <HAL_RCC_OscConfig+0x324>
 800240c:	4b58      	ldr	r3, [pc, #352]	; (8002570 <HAL_RCC_OscConfig+0x470>)
 800240e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002410:	4a57      	ldr	r2, [pc, #348]	; (8002570 <HAL_RCC_OscConfig+0x470>)
 8002412:	f023 0301 	bic.w	r3, r3, #1
 8002416:	6713      	str	r3, [r2, #112]	; 0x70
 8002418:	4b55      	ldr	r3, [pc, #340]	; (8002570 <HAL_RCC_OscConfig+0x470>)
 800241a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800241c:	4a54      	ldr	r2, [pc, #336]	; (8002570 <HAL_RCC_OscConfig+0x470>)
 800241e:	f023 0304 	bic.w	r3, r3, #4
 8002422:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	689b      	ldr	r3, [r3, #8]
 8002428:	2b00      	cmp	r3, #0
 800242a:	d015      	beq.n	8002458 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800242c:	f7fe f9f2 	bl	8000814 <HAL_GetTick>
 8002430:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002432:	e00a      	b.n	800244a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002434:	f7fe f9ee 	bl	8000814 <HAL_GetTick>
 8002438:	4602      	mov	r2, r0
 800243a:	693b      	ldr	r3, [r7, #16]
 800243c:	1ad3      	subs	r3, r2, r3
 800243e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002442:	4293      	cmp	r3, r2
 8002444:	d901      	bls.n	800244a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002446:	2303      	movs	r3, #3
 8002448:	e0cb      	b.n	80025e2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800244a:	4b49      	ldr	r3, [pc, #292]	; (8002570 <HAL_RCC_OscConfig+0x470>)
 800244c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800244e:	f003 0302 	and.w	r3, r3, #2
 8002452:	2b00      	cmp	r3, #0
 8002454:	d0ee      	beq.n	8002434 <HAL_RCC_OscConfig+0x334>
 8002456:	e014      	b.n	8002482 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002458:	f7fe f9dc 	bl	8000814 <HAL_GetTick>
 800245c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800245e:	e00a      	b.n	8002476 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002460:	f7fe f9d8 	bl	8000814 <HAL_GetTick>
 8002464:	4602      	mov	r2, r0
 8002466:	693b      	ldr	r3, [r7, #16]
 8002468:	1ad3      	subs	r3, r2, r3
 800246a:	f241 3288 	movw	r2, #5000	; 0x1388
 800246e:	4293      	cmp	r3, r2
 8002470:	d901      	bls.n	8002476 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002472:	2303      	movs	r3, #3
 8002474:	e0b5      	b.n	80025e2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002476:	4b3e      	ldr	r3, [pc, #248]	; (8002570 <HAL_RCC_OscConfig+0x470>)
 8002478:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800247a:	f003 0302 	and.w	r3, r3, #2
 800247e:	2b00      	cmp	r3, #0
 8002480:	d1ee      	bne.n	8002460 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002482:	7dfb      	ldrb	r3, [r7, #23]
 8002484:	2b01      	cmp	r3, #1
 8002486:	d105      	bne.n	8002494 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002488:	4b39      	ldr	r3, [pc, #228]	; (8002570 <HAL_RCC_OscConfig+0x470>)
 800248a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800248c:	4a38      	ldr	r2, [pc, #224]	; (8002570 <HAL_RCC_OscConfig+0x470>)
 800248e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002492:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	699b      	ldr	r3, [r3, #24]
 8002498:	2b00      	cmp	r3, #0
 800249a:	f000 80a1 	beq.w	80025e0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800249e:	4b34      	ldr	r3, [pc, #208]	; (8002570 <HAL_RCC_OscConfig+0x470>)
 80024a0:	689b      	ldr	r3, [r3, #8]
 80024a2:	f003 030c 	and.w	r3, r3, #12
 80024a6:	2b08      	cmp	r3, #8
 80024a8:	d05c      	beq.n	8002564 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	699b      	ldr	r3, [r3, #24]
 80024ae:	2b02      	cmp	r3, #2
 80024b0:	d141      	bne.n	8002536 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024b2:	4b31      	ldr	r3, [pc, #196]	; (8002578 <HAL_RCC_OscConfig+0x478>)
 80024b4:	2200      	movs	r2, #0
 80024b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024b8:	f7fe f9ac 	bl	8000814 <HAL_GetTick>
 80024bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80024be:	e008      	b.n	80024d2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80024c0:	f7fe f9a8 	bl	8000814 <HAL_GetTick>
 80024c4:	4602      	mov	r2, r0
 80024c6:	693b      	ldr	r3, [r7, #16]
 80024c8:	1ad3      	subs	r3, r2, r3
 80024ca:	2b02      	cmp	r3, #2
 80024cc:	d901      	bls.n	80024d2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80024ce:	2303      	movs	r3, #3
 80024d0:	e087      	b.n	80025e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80024d2:	4b27      	ldr	r3, [pc, #156]	; (8002570 <HAL_RCC_OscConfig+0x470>)
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d1f0      	bne.n	80024c0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	69da      	ldr	r2, [r3, #28]
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	6a1b      	ldr	r3, [r3, #32]
 80024e6:	431a      	orrs	r2, r3
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024ec:	019b      	lsls	r3, r3, #6
 80024ee:	431a      	orrs	r2, r3
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024f4:	085b      	lsrs	r3, r3, #1
 80024f6:	3b01      	subs	r3, #1
 80024f8:	041b      	lsls	r3, r3, #16
 80024fa:	431a      	orrs	r2, r3
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002500:	061b      	lsls	r3, r3, #24
 8002502:	491b      	ldr	r1, [pc, #108]	; (8002570 <HAL_RCC_OscConfig+0x470>)
 8002504:	4313      	orrs	r3, r2
 8002506:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002508:	4b1b      	ldr	r3, [pc, #108]	; (8002578 <HAL_RCC_OscConfig+0x478>)
 800250a:	2201      	movs	r2, #1
 800250c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800250e:	f7fe f981 	bl	8000814 <HAL_GetTick>
 8002512:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002514:	e008      	b.n	8002528 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002516:	f7fe f97d 	bl	8000814 <HAL_GetTick>
 800251a:	4602      	mov	r2, r0
 800251c:	693b      	ldr	r3, [r7, #16]
 800251e:	1ad3      	subs	r3, r2, r3
 8002520:	2b02      	cmp	r3, #2
 8002522:	d901      	bls.n	8002528 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002524:	2303      	movs	r3, #3
 8002526:	e05c      	b.n	80025e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002528:	4b11      	ldr	r3, [pc, #68]	; (8002570 <HAL_RCC_OscConfig+0x470>)
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002530:	2b00      	cmp	r3, #0
 8002532:	d0f0      	beq.n	8002516 <HAL_RCC_OscConfig+0x416>
 8002534:	e054      	b.n	80025e0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002536:	4b10      	ldr	r3, [pc, #64]	; (8002578 <HAL_RCC_OscConfig+0x478>)
 8002538:	2200      	movs	r2, #0
 800253a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800253c:	f7fe f96a 	bl	8000814 <HAL_GetTick>
 8002540:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002542:	e008      	b.n	8002556 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002544:	f7fe f966 	bl	8000814 <HAL_GetTick>
 8002548:	4602      	mov	r2, r0
 800254a:	693b      	ldr	r3, [r7, #16]
 800254c:	1ad3      	subs	r3, r2, r3
 800254e:	2b02      	cmp	r3, #2
 8002550:	d901      	bls.n	8002556 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002552:	2303      	movs	r3, #3
 8002554:	e045      	b.n	80025e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002556:	4b06      	ldr	r3, [pc, #24]	; (8002570 <HAL_RCC_OscConfig+0x470>)
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800255e:	2b00      	cmp	r3, #0
 8002560:	d1f0      	bne.n	8002544 <HAL_RCC_OscConfig+0x444>
 8002562:	e03d      	b.n	80025e0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	699b      	ldr	r3, [r3, #24]
 8002568:	2b01      	cmp	r3, #1
 800256a:	d107      	bne.n	800257c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800256c:	2301      	movs	r3, #1
 800256e:	e038      	b.n	80025e2 <HAL_RCC_OscConfig+0x4e2>
 8002570:	40023800 	.word	0x40023800
 8002574:	40007000 	.word	0x40007000
 8002578:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800257c:	4b1b      	ldr	r3, [pc, #108]	; (80025ec <HAL_RCC_OscConfig+0x4ec>)
 800257e:	685b      	ldr	r3, [r3, #4]
 8002580:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	699b      	ldr	r3, [r3, #24]
 8002586:	2b01      	cmp	r3, #1
 8002588:	d028      	beq.n	80025dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002594:	429a      	cmp	r2, r3
 8002596:	d121      	bne.n	80025dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80025a2:	429a      	cmp	r2, r3
 80025a4:	d11a      	bne.n	80025dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80025a6:	68fa      	ldr	r2, [r7, #12]
 80025a8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80025ac:	4013      	ands	r3, r2
 80025ae:	687a      	ldr	r2, [r7, #4]
 80025b0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80025b2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80025b4:	4293      	cmp	r3, r2
 80025b6:	d111      	bne.n	80025dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025c2:	085b      	lsrs	r3, r3, #1
 80025c4:	3b01      	subs	r3, #1
 80025c6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80025c8:	429a      	cmp	r2, r3
 80025ca:	d107      	bne.n	80025dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025d6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80025d8:	429a      	cmp	r2, r3
 80025da:	d001      	beq.n	80025e0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80025dc:	2301      	movs	r3, #1
 80025de:	e000      	b.n	80025e2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80025e0:	2300      	movs	r3, #0
}
 80025e2:	4618      	mov	r0, r3
 80025e4:	3718      	adds	r7, #24
 80025e6:	46bd      	mov	sp, r7
 80025e8:	bd80      	pop	{r7, pc}
 80025ea:	bf00      	nop
 80025ec:	40023800 	.word	0x40023800

080025f0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80025f0:	b580      	push	{r7, lr}
 80025f2:	b084      	sub	sp, #16
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	6078      	str	r0, [r7, #4]
 80025f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d101      	bne.n	8002604 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002600:	2301      	movs	r3, #1
 8002602:	e0cc      	b.n	800279e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002604:	4b68      	ldr	r3, [pc, #416]	; (80027a8 <HAL_RCC_ClockConfig+0x1b8>)
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f003 0307 	and.w	r3, r3, #7
 800260c:	683a      	ldr	r2, [r7, #0]
 800260e:	429a      	cmp	r2, r3
 8002610:	d90c      	bls.n	800262c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002612:	4b65      	ldr	r3, [pc, #404]	; (80027a8 <HAL_RCC_ClockConfig+0x1b8>)
 8002614:	683a      	ldr	r2, [r7, #0]
 8002616:	b2d2      	uxtb	r2, r2
 8002618:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800261a:	4b63      	ldr	r3, [pc, #396]	; (80027a8 <HAL_RCC_ClockConfig+0x1b8>)
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f003 0307 	and.w	r3, r3, #7
 8002622:	683a      	ldr	r2, [r7, #0]
 8002624:	429a      	cmp	r2, r3
 8002626:	d001      	beq.n	800262c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002628:	2301      	movs	r3, #1
 800262a:	e0b8      	b.n	800279e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f003 0302 	and.w	r3, r3, #2
 8002634:	2b00      	cmp	r3, #0
 8002636:	d020      	beq.n	800267a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f003 0304 	and.w	r3, r3, #4
 8002640:	2b00      	cmp	r3, #0
 8002642:	d005      	beq.n	8002650 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002644:	4b59      	ldr	r3, [pc, #356]	; (80027ac <HAL_RCC_ClockConfig+0x1bc>)
 8002646:	689b      	ldr	r3, [r3, #8]
 8002648:	4a58      	ldr	r2, [pc, #352]	; (80027ac <HAL_RCC_ClockConfig+0x1bc>)
 800264a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800264e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f003 0308 	and.w	r3, r3, #8
 8002658:	2b00      	cmp	r3, #0
 800265a:	d005      	beq.n	8002668 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800265c:	4b53      	ldr	r3, [pc, #332]	; (80027ac <HAL_RCC_ClockConfig+0x1bc>)
 800265e:	689b      	ldr	r3, [r3, #8]
 8002660:	4a52      	ldr	r2, [pc, #328]	; (80027ac <HAL_RCC_ClockConfig+0x1bc>)
 8002662:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002666:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002668:	4b50      	ldr	r3, [pc, #320]	; (80027ac <HAL_RCC_ClockConfig+0x1bc>)
 800266a:	689b      	ldr	r3, [r3, #8]
 800266c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	689b      	ldr	r3, [r3, #8]
 8002674:	494d      	ldr	r1, [pc, #308]	; (80027ac <HAL_RCC_ClockConfig+0x1bc>)
 8002676:	4313      	orrs	r3, r2
 8002678:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f003 0301 	and.w	r3, r3, #1
 8002682:	2b00      	cmp	r3, #0
 8002684:	d044      	beq.n	8002710 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	685b      	ldr	r3, [r3, #4]
 800268a:	2b01      	cmp	r3, #1
 800268c:	d107      	bne.n	800269e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800268e:	4b47      	ldr	r3, [pc, #284]	; (80027ac <HAL_RCC_ClockConfig+0x1bc>)
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002696:	2b00      	cmp	r3, #0
 8002698:	d119      	bne.n	80026ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800269a:	2301      	movs	r3, #1
 800269c:	e07f      	b.n	800279e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	685b      	ldr	r3, [r3, #4]
 80026a2:	2b02      	cmp	r3, #2
 80026a4:	d003      	beq.n	80026ae <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80026aa:	2b03      	cmp	r3, #3
 80026ac:	d107      	bne.n	80026be <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80026ae:	4b3f      	ldr	r3, [pc, #252]	; (80027ac <HAL_RCC_ClockConfig+0x1bc>)
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d109      	bne.n	80026ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026ba:	2301      	movs	r3, #1
 80026bc:	e06f      	b.n	800279e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026be:	4b3b      	ldr	r3, [pc, #236]	; (80027ac <HAL_RCC_ClockConfig+0x1bc>)
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f003 0302 	and.w	r3, r3, #2
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d101      	bne.n	80026ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026ca:	2301      	movs	r3, #1
 80026cc:	e067      	b.n	800279e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80026ce:	4b37      	ldr	r3, [pc, #220]	; (80027ac <HAL_RCC_ClockConfig+0x1bc>)
 80026d0:	689b      	ldr	r3, [r3, #8]
 80026d2:	f023 0203 	bic.w	r2, r3, #3
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	685b      	ldr	r3, [r3, #4]
 80026da:	4934      	ldr	r1, [pc, #208]	; (80027ac <HAL_RCC_ClockConfig+0x1bc>)
 80026dc:	4313      	orrs	r3, r2
 80026de:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80026e0:	f7fe f898 	bl	8000814 <HAL_GetTick>
 80026e4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026e6:	e00a      	b.n	80026fe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80026e8:	f7fe f894 	bl	8000814 <HAL_GetTick>
 80026ec:	4602      	mov	r2, r0
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	1ad3      	subs	r3, r2, r3
 80026f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80026f6:	4293      	cmp	r3, r2
 80026f8:	d901      	bls.n	80026fe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80026fa:	2303      	movs	r3, #3
 80026fc:	e04f      	b.n	800279e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026fe:	4b2b      	ldr	r3, [pc, #172]	; (80027ac <HAL_RCC_ClockConfig+0x1bc>)
 8002700:	689b      	ldr	r3, [r3, #8]
 8002702:	f003 020c 	and.w	r2, r3, #12
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	685b      	ldr	r3, [r3, #4]
 800270a:	009b      	lsls	r3, r3, #2
 800270c:	429a      	cmp	r2, r3
 800270e:	d1eb      	bne.n	80026e8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002710:	4b25      	ldr	r3, [pc, #148]	; (80027a8 <HAL_RCC_ClockConfig+0x1b8>)
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f003 0307 	and.w	r3, r3, #7
 8002718:	683a      	ldr	r2, [r7, #0]
 800271a:	429a      	cmp	r2, r3
 800271c:	d20c      	bcs.n	8002738 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800271e:	4b22      	ldr	r3, [pc, #136]	; (80027a8 <HAL_RCC_ClockConfig+0x1b8>)
 8002720:	683a      	ldr	r2, [r7, #0]
 8002722:	b2d2      	uxtb	r2, r2
 8002724:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002726:	4b20      	ldr	r3, [pc, #128]	; (80027a8 <HAL_RCC_ClockConfig+0x1b8>)
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f003 0307 	and.w	r3, r3, #7
 800272e:	683a      	ldr	r2, [r7, #0]
 8002730:	429a      	cmp	r2, r3
 8002732:	d001      	beq.n	8002738 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002734:	2301      	movs	r3, #1
 8002736:	e032      	b.n	800279e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f003 0304 	and.w	r3, r3, #4
 8002740:	2b00      	cmp	r3, #0
 8002742:	d008      	beq.n	8002756 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002744:	4b19      	ldr	r3, [pc, #100]	; (80027ac <HAL_RCC_ClockConfig+0x1bc>)
 8002746:	689b      	ldr	r3, [r3, #8]
 8002748:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	68db      	ldr	r3, [r3, #12]
 8002750:	4916      	ldr	r1, [pc, #88]	; (80027ac <HAL_RCC_ClockConfig+0x1bc>)
 8002752:	4313      	orrs	r3, r2
 8002754:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f003 0308 	and.w	r3, r3, #8
 800275e:	2b00      	cmp	r3, #0
 8002760:	d009      	beq.n	8002776 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002762:	4b12      	ldr	r3, [pc, #72]	; (80027ac <HAL_RCC_ClockConfig+0x1bc>)
 8002764:	689b      	ldr	r3, [r3, #8]
 8002766:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	691b      	ldr	r3, [r3, #16]
 800276e:	00db      	lsls	r3, r3, #3
 8002770:	490e      	ldr	r1, [pc, #56]	; (80027ac <HAL_RCC_ClockConfig+0x1bc>)
 8002772:	4313      	orrs	r3, r2
 8002774:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002776:	f000 f821 	bl	80027bc <HAL_RCC_GetSysClockFreq>
 800277a:	4602      	mov	r2, r0
 800277c:	4b0b      	ldr	r3, [pc, #44]	; (80027ac <HAL_RCC_ClockConfig+0x1bc>)
 800277e:	689b      	ldr	r3, [r3, #8]
 8002780:	091b      	lsrs	r3, r3, #4
 8002782:	f003 030f 	and.w	r3, r3, #15
 8002786:	490a      	ldr	r1, [pc, #40]	; (80027b0 <HAL_RCC_ClockConfig+0x1c0>)
 8002788:	5ccb      	ldrb	r3, [r1, r3]
 800278a:	fa22 f303 	lsr.w	r3, r2, r3
 800278e:	4a09      	ldr	r2, [pc, #36]	; (80027b4 <HAL_RCC_ClockConfig+0x1c4>)
 8002790:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002792:	4b09      	ldr	r3, [pc, #36]	; (80027b8 <HAL_RCC_ClockConfig+0x1c8>)
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	4618      	mov	r0, r3
 8002798:	f7fd fff8 	bl	800078c <HAL_InitTick>

  return HAL_OK;
 800279c:	2300      	movs	r3, #0
}
 800279e:	4618      	mov	r0, r3
 80027a0:	3710      	adds	r7, #16
 80027a2:	46bd      	mov	sp, r7
 80027a4:	bd80      	pop	{r7, pc}
 80027a6:	bf00      	nop
 80027a8:	40023c00 	.word	0x40023c00
 80027ac:	40023800 	.word	0x40023800
 80027b0:	08007900 	.word	0x08007900
 80027b4:	20000000 	.word	0x20000000
 80027b8:	20000004 	.word	0x20000004

080027bc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80027bc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80027c0:	b090      	sub	sp, #64	; 0x40
 80027c2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80027c4:	2300      	movs	r3, #0
 80027c6:	637b      	str	r3, [r7, #52]	; 0x34
 80027c8:	2300      	movs	r3, #0
 80027ca:	63fb      	str	r3, [r7, #60]	; 0x3c
 80027cc:	2300      	movs	r3, #0
 80027ce:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80027d0:	2300      	movs	r3, #0
 80027d2:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80027d4:	4b59      	ldr	r3, [pc, #356]	; (800293c <HAL_RCC_GetSysClockFreq+0x180>)
 80027d6:	689b      	ldr	r3, [r3, #8]
 80027d8:	f003 030c 	and.w	r3, r3, #12
 80027dc:	2b08      	cmp	r3, #8
 80027de:	d00d      	beq.n	80027fc <HAL_RCC_GetSysClockFreq+0x40>
 80027e0:	2b08      	cmp	r3, #8
 80027e2:	f200 80a1 	bhi.w	8002928 <HAL_RCC_GetSysClockFreq+0x16c>
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d002      	beq.n	80027f0 <HAL_RCC_GetSysClockFreq+0x34>
 80027ea:	2b04      	cmp	r3, #4
 80027ec:	d003      	beq.n	80027f6 <HAL_RCC_GetSysClockFreq+0x3a>
 80027ee:	e09b      	b.n	8002928 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80027f0:	4b53      	ldr	r3, [pc, #332]	; (8002940 <HAL_RCC_GetSysClockFreq+0x184>)
 80027f2:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80027f4:	e09b      	b.n	800292e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80027f6:	4b53      	ldr	r3, [pc, #332]	; (8002944 <HAL_RCC_GetSysClockFreq+0x188>)
 80027f8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80027fa:	e098      	b.n	800292e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80027fc:	4b4f      	ldr	r3, [pc, #316]	; (800293c <HAL_RCC_GetSysClockFreq+0x180>)
 80027fe:	685b      	ldr	r3, [r3, #4]
 8002800:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002804:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002806:	4b4d      	ldr	r3, [pc, #308]	; (800293c <HAL_RCC_GetSysClockFreq+0x180>)
 8002808:	685b      	ldr	r3, [r3, #4]
 800280a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800280e:	2b00      	cmp	r3, #0
 8002810:	d028      	beq.n	8002864 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002812:	4b4a      	ldr	r3, [pc, #296]	; (800293c <HAL_RCC_GetSysClockFreq+0x180>)
 8002814:	685b      	ldr	r3, [r3, #4]
 8002816:	099b      	lsrs	r3, r3, #6
 8002818:	2200      	movs	r2, #0
 800281a:	623b      	str	r3, [r7, #32]
 800281c:	627a      	str	r2, [r7, #36]	; 0x24
 800281e:	6a3b      	ldr	r3, [r7, #32]
 8002820:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002824:	2100      	movs	r1, #0
 8002826:	4b47      	ldr	r3, [pc, #284]	; (8002944 <HAL_RCC_GetSysClockFreq+0x188>)
 8002828:	fb03 f201 	mul.w	r2, r3, r1
 800282c:	2300      	movs	r3, #0
 800282e:	fb00 f303 	mul.w	r3, r0, r3
 8002832:	4413      	add	r3, r2
 8002834:	4a43      	ldr	r2, [pc, #268]	; (8002944 <HAL_RCC_GetSysClockFreq+0x188>)
 8002836:	fba0 1202 	umull	r1, r2, r0, r2
 800283a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800283c:	460a      	mov	r2, r1
 800283e:	62ba      	str	r2, [r7, #40]	; 0x28
 8002840:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002842:	4413      	add	r3, r2
 8002844:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002846:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002848:	2200      	movs	r2, #0
 800284a:	61bb      	str	r3, [r7, #24]
 800284c:	61fa      	str	r2, [r7, #28]
 800284e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002852:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002856:	f7fd fcbf 	bl	80001d8 <__aeabi_uldivmod>
 800285a:	4602      	mov	r2, r0
 800285c:	460b      	mov	r3, r1
 800285e:	4613      	mov	r3, r2
 8002860:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002862:	e053      	b.n	800290c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002864:	4b35      	ldr	r3, [pc, #212]	; (800293c <HAL_RCC_GetSysClockFreq+0x180>)
 8002866:	685b      	ldr	r3, [r3, #4]
 8002868:	099b      	lsrs	r3, r3, #6
 800286a:	2200      	movs	r2, #0
 800286c:	613b      	str	r3, [r7, #16]
 800286e:	617a      	str	r2, [r7, #20]
 8002870:	693b      	ldr	r3, [r7, #16]
 8002872:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002876:	f04f 0b00 	mov.w	fp, #0
 800287a:	4652      	mov	r2, sl
 800287c:	465b      	mov	r3, fp
 800287e:	f04f 0000 	mov.w	r0, #0
 8002882:	f04f 0100 	mov.w	r1, #0
 8002886:	0159      	lsls	r1, r3, #5
 8002888:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800288c:	0150      	lsls	r0, r2, #5
 800288e:	4602      	mov	r2, r0
 8002890:	460b      	mov	r3, r1
 8002892:	ebb2 080a 	subs.w	r8, r2, sl
 8002896:	eb63 090b 	sbc.w	r9, r3, fp
 800289a:	f04f 0200 	mov.w	r2, #0
 800289e:	f04f 0300 	mov.w	r3, #0
 80028a2:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80028a6:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80028aa:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80028ae:	ebb2 0408 	subs.w	r4, r2, r8
 80028b2:	eb63 0509 	sbc.w	r5, r3, r9
 80028b6:	f04f 0200 	mov.w	r2, #0
 80028ba:	f04f 0300 	mov.w	r3, #0
 80028be:	00eb      	lsls	r3, r5, #3
 80028c0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80028c4:	00e2      	lsls	r2, r4, #3
 80028c6:	4614      	mov	r4, r2
 80028c8:	461d      	mov	r5, r3
 80028ca:	eb14 030a 	adds.w	r3, r4, sl
 80028ce:	603b      	str	r3, [r7, #0]
 80028d0:	eb45 030b 	adc.w	r3, r5, fp
 80028d4:	607b      	str	r3, [r7, #4]
 80028d6:	f04f 0200 	mov.w	r2, #0
 80028da:	f04f 0300 	mov.w	r3, #0
 80028de:	e9d7 4500 	ldrd	r4, r5, [r7]
 80028e2:	4629      	mov	r1, r5
 80028e4:	028b      	lsls	r3, r1, #10
 80028e6:	4621      	mov	r1, r4
 80028e8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80028ec:	4621      	mov	r1, r4
 80028ee:	028a      	lsls	r2, r1, #10
 80028f0:	4610      	mov	r0, r2
 80028f2:	4619      	mov	r1, r3
 80028f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80028f6:	2200      	movs	r2, #0
 80028f8:	60bb      	str	r3, [r7, #8]
 80028fa:	60fa      	str	r2, [r7, #12]
 80028fc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002900:	f7fd fc6a 	bl	80001d8 <__aeabi_uldivmod>
 8002904:	4602      	mov	r2, r0
 8002906:	460b      	mov	r3, r1
 8002908:	4613      	mov	r3, r2
 800290a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800290c:	4b0b      	ldr	r3, [pc, #44]	; (800293c <HAL_RCC_GetSysClockFreq+0x180>)
 800290e:	685b      	ldr	r3, [r3, #4]
 8002910:	0c1b      	lsrs	r3, r3, #16
 8002912:	f003 0303 	and.w	r3, r3, #3
 8002916:	3301      	adds	r3, #1
 8002918:	005b      	lsls	r3, r3, #1
 800291a:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 800291c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800291e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002920:	fbb2 f3f3 	udiv	r3, r2, r3
 8002924:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002926:	e002      	b.n	800292e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002928:	4b05      	ldr	r3, [pc, #20]	; (8002940 <HAL_RCC_GetSysClockFreq+0x184>)
 800292a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800292c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800292e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8002930:	4618      	mov	r0, r3
 8002932:	3740      	adds	r7, #64	; 0x40
 8002934:	46bd      	mov	sp, r7
 8002936:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800293a:	bf00      	nop
 800293c:	40023800 	.word	0x40023800
 8002940:	00f42400 	.word	0x00f42400
 8002944:	017d7840 	.word	0x017d7840

08002948 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002948:	b480      	push	{r7}
 800294a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800294c:	4b03      	ldr	r3, [pc, #12]	; (800295c <HAL_RCC_GetHCLKFreq+0x14>)
 800294e:	681b      	ldr	r3, [r3, #0]
}
 8002950:	4618      	mov	r0, r3
 8002952:	46bd      	mov	sp, r7
 8002954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002958:	4770      	bx	lr
 800295a:	bf00      	nop
 800295c:	20000000 	.word	0x20000000

08002960 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8002960:	b084      	sub	sp, #16
 8002962:	b580      	push	{r7, lr}
 8002964:	b084      	sub	sp, #16
 8002966:	af00      	add	r7, sp, #0
 8002968:	6078      	str	r0, [r7, #4]
 800296a:	f107 001c 	add.w	r0, r7, #28
 800296e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8002972:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002974:	2b01      	cmp	r3, #1
 8002976:	d122      	bne.n	80029be <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800297c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	68db      	ldr	r3, [r3, #12]
 8002988:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800298c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002990:	687a      	ldr	r2, [r7, #4]
 8002992:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	68db      	ldr	r3, [r3, #12]
 8002998:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80029a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80029a2:	2b01      	cmp	r3, #1
 80029a4:	d105      	bne.n	80029b2 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	68db      	ldr	r3, [r3, #12]
 80029aa:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80029b2:	6878      	ldr	r0, [r7, #4]
 80029b4:	f001 fb1c 	bl	8003ff0 <USB_CoreReset>
 80029b8:	4603      	mov	r3, r0
 80029ba:	73fb      	strb	r3, [r7, #15]
 80029bc:	e01a      	b.n	80029f4 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	68db      	ldr	r3, [r3, #12]
 80029c2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80029ca:	6878      	ldr	r0, [r7, #4]
 80029cc:	f001 fb10 	bl	8003ff0 <USB_CoreReset>
 80029d0:	4603      	mov	r3, r0
 80029d2:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80029d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d106      	bne.n	80029e8 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029de:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	639a      	str	r2, [r3, #56]	; 0x38
 80029e6:	e005      	b.n	80029f4 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029ec:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80029f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029f6:	2b01      	cmp	r3, #1
 80029f8:	d10b      	bne.n	8002a12 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	689b      	ldr	r3, [r3, #8]
 80029fe:	f043 0206 	orr.w	r2, r3, #6
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	689b      	ldr	r3, [r3, #8]
 8002a0a:	f043 0220 	orr.w	r2, r3, #32
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8002a12:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a14:	4618      	mov	r0, r3
 8002a16:	3710      	adds	r7, #16
 8002a18:	46bd      	mov	sp, r7
 8002a1a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002a1e:	b004      	add	sp, #16
 8002a20:	4770      	bx	lr
	...

08002a24 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8002a24:	b480      	push	{r7}
 8002a26:	b087      	sub	sp, #28
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	60f8      	str	r0, [r7, #12]
 8002a2c:	60b9      	str	r1, [r7, #8]
 8002a2e:	4613      	mov	r3, r2
 8002a30:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8002a32:	79fb      	ldrb	r3, [r7, #7]
 8002a34:	2b02      	cmp	r3, #2
 8002a36:	d165      	bne.n	8002b04 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8002a38:	68bb      	ldr	r3, [r7, #8]
 8002a3a:	4a41      	ldr	r2, [pc, #260]	; (8002b40 <USB_SetTurnaroundTime+0x11c>)
 8002a3c:	4293      	cmp	r3, r2
 8002a3e:	d906      	bls.n	8002a4e <USB_SetTurnaroundTime+0x2a>
 8002a40:	68bb      	ldr	r3, [r7, #8]
 8002a42:	4a40      	ldr	r2, [pc, #256]	; (8002b44 <USB_SetTurnaroundTime+0x120>)
 8002a44:	4293      	cmp	r3, r2
 8002a46:	d202      	bcs.n	8002a4e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8002a48:	230f      	movs	r3, #15
 8002a4a:	617b      	str	r3, [r7, #20]
 8002a4c:	e062      	b.n	8002b14 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8002a4e:	68bb      	ldr	r3, [r7, #8]
 8002a50:	4a3c      	ldr	r2, [pc, #240]	; (8002b44 <USB_SetTurnaroundTime+0x120>)
 8002a52:	4293      	cmp	r3, r2
 8002a54:	d306      	bcc.n	8002a64 <USB_SetTurnaroundTime+0x40>
 8002a56:	68bb      	ldr	r3, [r7, #8]
 8002a58:	4a3b      	ldr	r2, [pc, #236]	; (8002b48 <USB_SetTurnaroundTime+0x124>)
 8002a5a:	4293      	cmp	r3, r2
 8002a5c:	d202      	bcs.n	8002a64 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8002a5e:	230e      	movs	r3, #14
 8002a60:	617b      	str	r3, [r7, #20]
 8002a62:	e057      	b.n	8002b14 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8002a64:	68bb      	ldr	r3, [r7, #8]
 8002a66:	4a38      	ldr	r2, [pc, #224]	; (8002b48 <USB_SetTurnaroundTime+0x124>)
 8002a68:	4293      	cmp	r3, r2
 8002a6a:	d306      	bcc.n	8002a7a <USB_SetTurnaroundTime+0x56>
 8002a6c:	68bb      	ldr	r3, [r7, #8]
 8002a6e:	4a37      	ldr	r2, [pc, #220]	; (8002b4c <USB_SetTurnaroundTime+0x128>)
 8002a70:	4293      	cmp	r3, r2
 8002a72:	d202      	bcs.n	8002a7a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8002a74:	230d      	movs	r3, #13
 8002a76:	617b      	str	r3, [r7, #20]
 8002a78:	e04c      	b.n	8002b14 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8002a7a:	68bb      	ldr	r3, [r7, #8]
 8002a7c:	4a33      	ldr	r2, [pc, #204]	; (8002b4c <USB_SetTurnaroundTime+0x128>)
 8002a7e:	4293      	cmp	r3, r2
 8002a80:	d306      	bcc.n	8002a90 <USB_SetTurnaroundTime+0x6c>
 8002a82:	68bb      	ldr	r3, [r7, #8]
 8002a84:	4a32      	ldr	r2, [pc, #200]	; (8002b50 <USB_SetTurnaroundTime+0x12c>)
 8002a86:	4293      	cmp	r3, r2
 8002a88:	d802      	bhi.n	8002a90 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8002a8a:	230c      	movs	r3, #12
 8002a8c:	617b      	str	r3, [r7, #20]
 8002a8e:	e041      	b.n	8002b14 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8002a90:	68bb      	ldr	r3, [r7, #8]
 8002a92:	4a2f      	ldr	r2, [pc, #188]	; (8002b50 <USB_SetTurnaroundTime+0x12c>)
 8002a94:	4293      	cmp	r3, r2
 8002a96:	d906      	bls.n	8002aa6 <USB_SetTurnaroundTime+0x82>
 8002a98:	68bb      	ldr	r3, [r7, #8]
 8002a9a:	4a2e      	ldr	r2, [pc, #184]	; (8002b54 <USB_SetTurnaroundTime+0x130>)
 8002a9c:	4293      	cmp	r3, r2
 8002a9e:	d802      	bhi.n	8002aa6 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8002aa0:	230b      	movs	r3, #11
 8002aa2:	617b      	str	r3, [r7, #20]
 8002aa4:	e036      	b.n	8002b14 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8002aa6:	68bb      	ldr	r3, [r7, #8]
 8002aa8:	4a2a      	ldr	r2, [pc, #168]	; (8002b54 <USB_SetTurnaroundTime+0x130>)
 8002aaa:	4293      	cmp	r3, r2
 8002aac:	d906      	bls.n	8002abc <USB_SetTurnaroundTime+0x98>
 8002aae:	68bb      	ldr	r3, [r7, #8]
 8002ab0:	4a29      	ldr	r2, [pc, #164]	; (8002b58 <USB_SetTurnaroundTime+0x134>)
 8002ab2:	4293      	cmp	r3, r2
 8002ab4:	d802      	bhi.n	8002abc <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8002ab6:	230a      	movs	r3, #10
 8002ab8:	617b      	str	r3, [r7, #20]
 8002aba:	e02b      	b.n	8002b14 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8002abc:	68bb      	ldr	r3, [r7, #8]
 8002abe:	4a26      	ldr	r2, [pc, #152]	; (8002b58 <USB_SetTurnaroundTime+0x134>)
 8002ac0:	4293      	cmp	r3, r2
 8002ac2:	d906      	bls.n	8002ad2 <USB_SetTurnaroundTime+0xae>
 8002ac4:	68bb      	ldr	r3, [r7, #8]
 8002ac6:	4a25      	ldr	r2, [pc, #148]	; (8002b5c <USB_SetTurnaroundTime+0x138>)
 8002ac8:	4293      	cmp	r3, r2
 8002aca:	d202      	bcs.n	8002ad2 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8002acc:	2309      	movs	r3, #9
 8002ace:	617b      	str	r3, [r7, #20]
 8002ad0:	e020      	b.n	8002b14 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8002ad2:	68bb      	ldr	r3, [r7, #8]
 8002ad4:	4a21      	ldr	r2, [pc, #132]	; (8002b5c <USB_SetTurnaroundTime+0x138>)
 8002ad6:	4293      	cmp	r3, r2
 8002ad8:	d306      	bcc.n	8002ae8 <USB_SetTurnaroundTime+0xc4>
 8002ada:	68bb      	ldr	r3, [r7, #8]
 8002adc:	4a20      	ldr	r2, [pc, #128]	; (8002b60 <USB_SetTurnaroundTime+0x13c>)
 8002ade:	4293      	cmp	r3, r2
 8002ae0:	d802      	bhi.n	8002ae8 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8002ae2:	2308      	movs	r3, #8
 8002ae4:	617b      	str	r3, [r7, #20]
 8002ae6:	e015      	b.n	8002b14 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8002ae8:	68bb      	ldr	r3, [r7, #8]
 8002aea:	4a1d      	ldr	r2, [pc, #116]	; (8002b60 <USB_SetTurnaroundTime+0x13c>)
 8002aec:	4293      	cmp	r3, r2
 8002aee:	d906      	bls.n	8002afe <USB_SetTurnaroundTime+0xda>
 8002af0:	68bb      	ldr	r3, [r7, #8]
 8002af2:	4a1c      	ldr	r2, [pc, #112]	; (8002b64 <USB_SetTurnaroundTime+0x140>)
 8002af4:	4293      	cmp	r3, r2
 8002af6:	d202      	bcs.n	8002afe <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8002af8:	2307      	movs	r3, #7
 8002afa:	617b      	str	r3, [r7, #20]
 8002afc:	e00a      	b.n	8002b14 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8002afe:	2306      	movs	r3, #6
 8002b00:	617b      	str	r3, [r7, #20]
 8002b02:	e007      	b.n	8002b14 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8002b04:	79fb      	ldrb	r3, [r7, #7]
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d102      	bne.n	8002b10 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8002b0a:	2309      	movs	r3, #9
 8002b0c:	617b      	str	r3, [r7, #20]
 8002b0e:	e001      	b.n	8002b14 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8002b10:	2309      	movs	r3, #9
 8002b12:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	68db      	ldr	r3, [r3, #12]
 8002b18:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	68da      	ldr	r2, [r3, #12]
 8002b24:	697b      	ldr	r3, [r7, #20]
 8002b26:	029b      	lsls	r3, r3, #10
 8002b28:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8002b2c:	431a      	orrs	r2, r3
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8002b32:	2300      	movs	r3, #0
}
 8002b34:	4618      	mov	r0, r3
 8002b36:	371c      	adds	r7, #28
 8002b38:	46bd      	mov	sp, r7
 8002b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b3e:	4770      	bx	lr
 8002b40:	00d8acbf 	.word	0x00d8acbf
 8002b44:	00e4e1c0 	.word	0x00e4e1c0
 8002b48:	00f42400 	.word	0x00f42400
 8002b4c:	01067380 	.word	0x01067380
 8002b50:	011a499f 	.word	0x011a499f
 8002b54:	01312cff 	.word	0x01312cff
 8002b58:	014ca43f 	.word	0x014ca43f
 8002b5c:	016e3600 	.word	0x016e3600
 8002b60:	01a6ab1f 	.word	0x01a6ab1f
 8002b64:	01e84800 	.word	0x01e84800

08002b68 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8002b68:	b480      	push	{r7}
 8002b6a:	b083      	sub	sp, #12
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	689b      	ldr	r3, [r3, #8]
 8002b74:	f043 0201 	orr.w	r2, r3, #1
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8002b7c:	2300      	movs	r3, #0
}
 8002b7e:	4618      	mov	r0, r3
 8002b80:	370c      	adds	r7, #12
 8002b82:	46bd      	mov	sp, r7
 8002b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b88:	4770      	bx	lr

08002b8a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8002b8a:	b480      	push	{r7}
 8002b8c:	b083      	sub	sp, #12
 8002b8e:	af00      	add	r7, sp, #0
 8002b90:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	689b      	ldr	r3, [r3, #8]
 8002b96:	f023 0201 	bic.w	r2, r3, #1
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8002b9e:	2300      	movs	r3, #0
}
 8002ba0:	4618      	mov	r0, r3
 8002ba2:	370c      	adds	r7, #12
 8002ba4:	46bd      	mov	sp, r7
 8002ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002baa:	4770      	bx	lr

08002bac <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8002bac:	b580      	push	{r7, lr}
 8002bae:	b084      	sub	sp, #16
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	6078      	str	r0, [r7, #4]
 8002bb4:	460b      	mov	r3, r1
 8002bb6:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8002bb8:	2300      	movs	r3, #0
 8002bba:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	68db      	ldr	r3, [r3, #12]
 8002bc0:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8002bc8:	78fb      	ldrb	r3, [r7, #3]
 8002bca:	2b01      	cmp	r3, #1
 8002bcc:	d115      	bne.n	8002bfa <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	68db      	ldr	r3, [r3, #12]
 8002bd2:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8002bda:	2001      	movs	r0, #1
 8002bdc:	f7fd fe26 	bl	800082c <HAL_Delay>
      ms++;
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	3301      	adds	r3, #1
 8002be4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8002be6:	6878      	ldr	r0, [r7, #4]
 8002be8:	f001 f972 	bl	8003ed0 <USB_GetMode>
 8002bec:	4603      	mov	r3, r0
 8002bee:	2b01      	cmp	r3, #1
 8002bf0:	d01e      	beq.n	8002c30 <USB_SetCurrentMode+0x84>
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	2b31      	cmp	r3, #49	; 0x31
 8002bf6:	d9f0      	bls.n	8002bda <USB_SetCurrentMode+0x2e>
 8002bf8:	e01a      	b.n	8002c30 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8002bfa:	78fb      	ldrb	r3, [r7, #3]
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d115      	bne.n	8002c2c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	68db      	ldr	r3, [r3, #12]
 8002c04:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8002c0c:	2001      	movs	r0, #1
 8002c0e:	f7fd fe0d 	bl	800082c <HAL_Delay>
      ms++;
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	3301      	adds	r3, #1
 8002c16:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8002c18:	6878      	ldr	r0, [r7, #4]
 8002c1a:	f001 f959 	bl	8003ed0 <USB_GetMode>
 8002c1e:	4603      	mov	r3, r0
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d005      	beq.n	8002c30 <USB_SetCurrentMode+0x84>
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	2b31      	cmp	r3, #49	; 0x31
 8002c28:	d9f0      	bls.n	8002c0c <USB_SetCurrentMode+0x60>
 8002c2a:	e001      	b.n	8002c30 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8002c2c:	2301      	movs	r3, #1
 8002c2e:	e005      	b.n	8002c3c <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	2b32      	cmp	r3, #50	; 0x32
 8002c34:	d101      	bne.n	8002c3a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8002c36:	2301      	movs	r3, #1
 8002c38:	e000      	b.n	8002c3c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8002c3a:	2300      	movs	r3, #0
}
 8002c3c:	4618      	mov	r0, r3
 8002c3e:	3710      	adds	r7, #16
 8002c40:	46bd      	mov	sp, r7
 8002c42:	bd80      	pop	{r7, pc}

08002c44 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8002c44:	b084      	sub	sp, #16
 8002c46:	b580      	push	{r7, lr}
 8002c48:	b086      	sub	sp, #24
 8002c4a:	af00      	add	r7, sp, #0
 8002c4c:	6078      	str	r0, [r7, #4]
 8002c4e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8002c52:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8002c56:	2300      	movs	r3, #0
 8002c58:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8002c5e:	2300      	movs	r3, #0
 8002c60:	613b      	str	r3, [r7, #16]
 8002c62:	e009      	b.n	8002c78 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8002c64:	687a      	ldr	r2, [r7, #4]
 8002c66:	693b      	ldr	r3, [r7, #16]
 8002c68:	3340      	adds	r3, #64	; 0x40
 8002c6a:	009b      	lsls	r3, r3, #2
 8002c6c:	4413      	add	r3, r2
 8002c6e:	2200      	movs	r2, #0
 8002c70:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8002c72:	693b      	ldr	r3, [r7, #16]
 8002c74:	3301      	adds	r3, #1
 8002c76:	613b      	str	r3, [r7, #16]
 8002c78:	693b      	ldr	r3, [r7, #16]
 8002c7a:	2b0e      	cmp	r3, #14
 8002c7c:	d9f2      	bls.n	8002c64 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8002c7e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d11c      	bne.n	8002cbe <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002c8a:	685b      	ldr	r3, [r3, #4]
 8002c8c:	68fa      	ldr	r2, [r7, #12]
 8002c8e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002c92:	f043 0302 	orr.w	r3, r3, #2
 8002c96:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c9c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ca8:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cb4:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	639a      	str	r2, [r3, #56]	; 0x38
 8002cbc:	e00b      	b.n	8002cd6 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cc2:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cce:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8002cdc:	461a      	mov	r2, r3
 8002cde:	2300      	movs	r3, #0
 8002ce0:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002ce8:	4619      	mov	r1, r3
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002cf0:	461a      	mov	r2, r3
 8002cf2:	680b      	ldr	r3, [r1, #0]
 8002cf4:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8002cf6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002cf8:	2b01      	cmp	r3, #1
 8002cfa:	d10c      	bne.n	8002d16 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8002cfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d104      	bne.n	8002d0c <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8002d02:	2100      	movs	r1, #0
 8002d04:	6878      	ldr	r0, [r7, #4]
 8002d06:	f000 f945 	bl	8002f94 <USB_SetDevSpeed>
 8002d0a:	e008      	b.n	8002d1e <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8002d0c:	2101      	movs	r1, #1
 8002d0e:	6878      	ldr	r0, [r7, #4]
 8002d10:	f000 f940 	bl	8002f94 <USB_SetDevSpeed>
 8002d14:	e003      	b.n	8002d1e <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8002d16:	2103      	movs	r1, #3
 8002d18:	6878      	ldr	r0, [r7, #4]
 8002d1a:	f000 f93b 	bl	8002f94 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8002d1e:	2110      	movs	r1, #16
 8002d20:	6878      	ldr	r0, [r7, #4]
 8002d22:	f000 f8f3 	bl	8002f0c <USB_FlushTxFifo>
 8002d26:	4603      	mov	r3, r0
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d001      	beq.n	8002d30 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8002d2c:	2301      	movs	r3, #1
 8002d2e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8002d30:	6878      	ldr	r0, [r7, #4]
 8002d32:	f000 f90f 	bl	8002f54 <USB_FlushRxFifo>
 8002d36:	4603      	mov	r3, r0
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d001      	beq.n	8002d40 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8002d3c:	2301      	movs	r3, #1
 8002d3e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002d46:	461a      	mov	r2, r3
 8002d48:	2300      	movs	r3, #0
 8002d4a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002d52:	461a      	mov	r2, r3
 8002d54:	2300      	movs	r3, #0
 8002d56:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002d5e:	461a      	mov	r2, r3
 8002d60:	2300      	movs	r3, #0
 8002d62:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002d64:	2300      	movs	r3, #0
 8002d66:	613b      	str	r3, [r7, #16]
 8002d68:	e043      	b.n	8002df2 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8002d6a:	693b      	ldr	r3, [r7, #16]
 8002d6c:	015a      	lsls	r2, r3, #5
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	4413      	add	r3, r2
 8002d72:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002d7c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002d80:	d118      	bne.n	8002db4 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8002d82:	693b      	ldr	r3, [r7, #16]
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d10a      	bne.n	8002d9e <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8002d88:	693b      	ldr	r3, [r7, #16]
 8002d8a:	015a      	lsls	r2, r3, #5
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	4413      	add	r3, r2
 8002d90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002d94:	461a      	mov	r2, r3
 8002d96:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8002d9a:	6013      	str	r3, [r2, #0]
 8002d9c:	e013      	b.n	8002dc6 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8002d9e:	693b      	ldr	r3, [r7, #16]
 8002da0:	015a      	lsls	r2, r3, #5
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	4413      	add	r3, r2
 8002da6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002daa:	461a      	mov	r2, r3
 8002dac:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8002db0:	6013      	str	r3, [r2, #0]
 8002db2:	e008      	b.n	8002dc6 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8002db4:	693b      	ldr	r3, [r7, #16]
 8002db6:	015a      	lsls	r2, r3, #5
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	4413      	add	r3, r2
 8002dbc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002dc0:	461a      	mov	r2, r3
 8002dc2:	2300      	movs	r3, #0
 8002dc4:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8002dc6:	693b      	ldr	r3, [r7, #16]
 8002dc8:	015a      	lsls	r2, r3, #5
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	4413      	add	r3, r2
 8002dce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002dd2:	461a      	mov	r2, r3
 8002dd4:	2300      	movs	r3, #0
 8002dd6:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8002dd8:	693b      	ldr	r3, [r7, #16]
 8002dda:	015a      	lsls	r2, r3, #5
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	4413      	add	r3, r2
 8002de0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002de4:	461a      	mov	r2, r3
 8002de6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002dea:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002dec:	693b      	ldr	r3, [r7, #16]
 8002dee:	3301      	adds	r3, #1
 8002df0:	613b      	str	r3, [r7, #16]
 8002df2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002df4:	693a      	ldr	r2, [r7, #16]
 8002df6:	429a      	cmp	r2, r3
 8002df8:	d3b7      	bcc.n	8002d6a <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002dfa:	2300      	movs	r3, #0
 8002dfc:	613b      	str	r3, [r7, #16]
 8002dfe:	e043      	b.n	8002e88 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8002e00:	693b      	ldr	r3, [r7, #16]
 8002e02:	015a      	lsls	r2, r3, #5
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	4413      	add	r3, r2
 8002e08:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002e12:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002e16:	d118      	bne.n	8002e4a <USB_DevInit+0x206>
    {
      if (i == 0U)
 8002e18:	693b      	ldr	r3, [r7, #16]
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d10a      	bne.n	8002e34 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8002e1e:	693b      	ldr	r3, [r7, #16]
 8002e20:	015a      	lsls	r2, r3, #5
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	4413      	add	r3, r2
 8002e26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e2a:	461a      	mov	r2, r3
 8002e2c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8002e30:	6013      	str	r3, [r2, #0]
 8002e32:	e013      	b.n	8002e5c <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8002e34:	693b      	ldr	r3, [r7, #16]
 8002e36:	015a      	lsls	r2, r3, #5
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	4413      	add	r3, r2
 8002e3c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e40:	461a      	mov	r2, r3
 8002e42:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8002e46:	6013      	str	r3, [r2, #0]
 8002e48:	e008      	b.n	8002e5c <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8002e4a:	693b      	ldr	r3, [r7, #16]
 8002e4c:	015a      	lsls	r2, r3, #5
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	4413      	add	r3, r2
 8002e52:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e56:	461a      	mov	r2, r3
 8002e58:	2300      	movs	r3, #0
 8002e5a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8002e5c:	693b      	ldr	r3, [r7, #16]
 8002e5e:	015a      	lsls	r2, r3, #5
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	4413      	add	r3, r2
 8002e64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e68:	461a      	mov	r2, r3
 8002e6a:	2300      	movs	r3, #0
 8002e6c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8002e6e:	693b      	ldr	r3, [r7, #16]
 8002e70:	015a      	lsls	r2, r3, #5
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	4413      	add	r3, r2
 8002e76:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e7a:	461a      	mov	r2, r3
 8002e7c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002e80:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002e82:	693b      	ldr	r3, [r7, #16]
 8002e84:	3301      	adds	r3, #1
 8002e86:	613b      	str	r3, [r7, #16]
 8002e88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e8a:	693a      	ldr	r2, [r7, #16]
 8002e8c:	429a      	cmp	r2, r3
 8002e8e:	d3b7      	bcc.n	8002e00 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002e96:	691b      	ldr	r3, [r3, #16]
 8002e98:	68fa      	ldr	r2, [r7, #12]
 8002e9a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002e9e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002ea2:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	2200      	movs	r2, #0
 8002ea8:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8002eb0:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8002eb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d105      	bne.n	8002ec4 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	699b      	ldr	r3, [r3, #24]
 8002ebc:	f043 0210 	orr.w	r2, r3, #16
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	699a      	ldr	r2, [r3, #24]
 8002ec8:	4b0f      	ldr	r3, [pc, #60]	; (8002f08 <USB_DevInit+0x2c4>)
 8002eca:	4313      	orrs	r3, r2
 8002ecc:	687a      	ldr	r2, [r7, #4]
 8002ece:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8002ed0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d005      	beq.n	8002ee2 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	699b      	ldr	r3, [r3, #24]
 8002eda:	f043 0208 	orr.w	r2, r3, #8
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8002ee2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002ee4:	2b01      	cmp	r3, #1
 8002ee6:	d107      	bne.n	8002ef8 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	699b      	ldr	r3, [r3, #24]
 8002eec:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002ef0:	f043 0304 	orr.w	r3, r3, #4
 8002ef4:	687a      	ldr	r2, [r7, #4]
 8002ef6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8002ef8:	7dfb      	ldrb	r3, [r7, #23]
}
 8002efa:	4618      	mov	r0, r3
 8002efc:	3718      	adds	r7, #24
 8002efe:	46bd      	mov	sp, r7
 8002f00:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002f04:	b004      	add	sp, #16
 8002f06:	4770      	bx	lr
 8002f08:	803c3800 	.word	0x803c3800

08002f0c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8002f0c:	b480      	push	{r7}
 8002f0e:	b085      	sub	sp, #20
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	6078      	str	r0, [r7, #4]
 8002f14:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8002f16:	2300      	movs	r3, #0
 8002f18:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8002f1a:	683b      	ldr	r3, [r7, #0]
 8002f1c:	019b      	lsls	r3, r3, #6
 8002f1e:	f043 0220 	orr.w	r2, r3, #32
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	3301      	adds	r3, #1
 8002f2a:	60fb      	str	r3, [r7, #12]
 8002f2c:	4a08      	ldr	r2, [pc, #32]	; (8002f50 <USB_FlushTxFifo+0x44>)
 8002f2e:	4293      	cmp	r3, r2
 8002f30:	d901      	bls.n	8002f36 <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 8002f32:	2303      	movs	r3, #3
 8002f34:	e006      	b.n	8002f44 <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	691b      	ldr	r3, [r3, #16]
 8002f3a:	f003 0320 	and.w	r3, r3, #32
 8002f3e:	2b20      	cmp	r3, #32
 8002f40:	d0f1      	beq.n	8002f26 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8002f42:	2300      	movs	r3, #0
}
 8002f44:	4618      	mov	r0, r3
 8002f46:	3714      	adds	r7, #20
 8002f48:	46bd      	mov	sp, r7
 8002f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f4e:	4770      	bx	lr
 8002f50:	00030d40 	.word	0x00030d40

08002f54 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8002f54:	b480      	push	{r7}
 8002f56:	b085      	sub	sp, #20
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8002f5c:	2300      	movs	r3, #0
 8002f5e:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	2210      	movs	r2, #16
 8002f64:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	3301      	adds	r3, #1
 8002f6a:	60fb      	str	r3, [r7, #12]
 8002f6c:	4a08      	ldr	r2, [pc, #32]	; (8002f90 <USB_FlushRxFifo+0x3c>)
 8002f6e:	4293      	cmp	r3, r2
 8002f70:	d901      	bls.n	8002f76 <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 8002f72:	2303      	movs	r3, #3
 8002f74:	e006      	b.n	8002f84 <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	691b      	ldr	r3, [r3, #16]
 8002f7a:	f003 0310 	and.w	r3, r3, #16
 8002f7e:	2b10      	cmp	r3, #16
 8002f80:	d0f1      	beq.n	8002f66 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8002f82:	2300      	movs	r3, #0
}
 8002f84:	4618      	mov	r0, r3
 8002f86:	3714      	adds	r7, #20
 8002f88:	46bd      	mov	sp, r7
 8002f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f8e:	4770      	bx	lr
 8002f90:	00030d40 	.word	0x00030d40

08002f94 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8002f94:	b480      	push	{r7}
 8002f96:	b085      	sub	sp, #20
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	6078      	str	r0, [r7, #4]
 8002f9c:	460b      	mov	r3, r1
 8002f9e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002faa:	681a      	ldr	r2, [r3, #0]
 8002fac:	78fb      	ldrb	r3, [r7, #3]
 8002fae:	68f9      	ldr	r1, [r7, #12]
 8002fb0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002fb4:	4313      	orrs	r3, r2
 8002fb6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8002fb8:	2300      	movs	r3, #0
}
 8002fba:	4618      	mov	r0, r3
 8002fbc:	3714      	adds	r7, #20
 8002fbe:	46bd      	mov	sp, r7
 8002fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc4:	4770      	bx	lr

08002fc6 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8002fc6:	b480      	push	{r7}
 8002fc8:	b087      	sub	sp, #28
 8002fca:	af00      	add	r7, sp, #0
 8002fcc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8002fd2:	693b      	ldr	r3, [r7, #16]
 8002fd4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002fd8:	689b      	ldr	r3, [r3, #8]
 8002fda:	f003 0306 	and.w	r3, r3, #6
 8002fde:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d102      	bne.n	8002fec <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8002fe6:	2300      	movs	r3, #0
 8002fe8:	75fb      	strb	r3, [r7, #23]
 8002fea:	e00a      	b.n	8003002 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	2b02      	cmp	r3, #2
 8002ff0:	d002      	beq.n	8002ff8 <USB_GetDevSpeed+0x32>
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	2b06      	cmp	r3, #6
 8002ff6:	d102      	bne.n	8002ffe <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8002ff8:	2302      	movs	r3, #2
 8002ffa:	75fb      	strb	r3, [r7, #23]
 8002ffc:	e001      	b.n	8003002 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8002ffe:	230f      	movs	r3, #15
 8003000:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8003002:	7dfb      	ldrb	r3, [r7, #23]
}
 8003004:	4618      	mov	r0, r3
 8003006:	371c      	adds	r7, #28
 8003008:	46bd      	mov	sp, r7
 800300a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800300e:	4770      	bx	lr

08003010 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003010:	b480      	push	{r7}
 8003012:	b085      	sub	sp, #20
 8003014:	af00      	add	r7, sp, #0
 8003016:	6078      	str	r0, [r7, #4]
 8003018:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800301e:	683b      	ldr	r3, [r7, #0]
 8003020:	781b      	ldrb	r3, [r3, #0]
 8003022:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8003024:	683b      	ldr	r3, [r7, #0]
 8003026:	785b      	ldrb	r3, [r3, #1]
 8003028:	2b01      	cmp	r3, #1
 800302a:	d13a      	bne.n	80030a2 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003032:	69da      	ldr	r2, [r3, #28]
 8003034:	683b      	ldr	r3, [r7, #0]
 8003036:	781b      	ldrb	r3, [r3, #0]
 8003038:	f003 030f 	and.w	r3, r3, #15
 800303c:	2101      	movs	r1, #1
 800303e:	fa01 f303 	lsl.w	r3, r1, r3
 8003042:	b29b      	uxth	r3, r3
 8003044:	68f9      	ldr	r1, [r7, #12]
 8003046:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800304a:	4313      	orrs	r3, r2
 800304c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800304e:	68bb      	ldr	r3, [r7, #8]
 8003050:	015a      	lsls	r2, r3, #5
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	4413      	add	r3, r2
 8003056:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003060:	2b00      	cmp	r3, #0
 8003062:	d155      	bne.n	8003110 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003064:	68bb      	ldr	r3, [r7, #8]
 8003066:	015a      	lsls	r2, r3, #5
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	4413      	add	r3, r2
 800306c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003070:	681a      	ldr	r2, [r3, #0]
 8003072:	683b      	ldr	r3, [r7, #0]
 8003074:	689b      	ldr	r3, [r3, #8]
 8003076:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800307a:	683b      	ldr	r3, [r7, #0]
 800307c:	78db      	ldrb	r3, [r3, #3]
 800307e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003080:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8003082:	68bb      	ldr	r3, [r7, #8]
 8003084:	059b      	lsls	r3, r3, #22
 8003086:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003088:	4313      	orrs	r3, r2
 800308a:	68ba      	ldr	r2, [r7, #8]
 800308c:	0151      	lsls	r1, r2, #5
 800308e:	68fa      	ldr	r2, [r7, #12]
 8003090:	440a      	add	r2, r1
 8003092:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003096:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800309a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800309e:	6013      	str	r3, [r2, #0]
 80030a0:	e036      	b.n	8003110 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80030a8:	69da      	ldr	r2, [r3, #28]
 80030aa:	683b      	ldr	r3, [r7, #0]
 80030ac:	781b      	ldrb	r3, [r3, #0]
 80030ae:	f003 030f 	and.w	r3, r3, #15
 80030b2:	2101      	movs	r1, #1
 80030b4:	fa01 f303 	lsl.w	r3, r1, r3
 80030b8:	041b      	lsls	r3, r3, #16
 80030ba:	68f9      	ldr	r1, [r7, #12]
 80030bc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80030c0:	4313      	orrs	r3, r2
 80030c2:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80030c4:	68bb      	ldr	r3, [r7, #8]
 80030c6:	015a      	lsls	r2, r3, #5
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	4413      	add	r3, r2
 80030cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d11a      	bne.n	8003110 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80030da:	68bb      	ldr	r3, [r7, #8]
 80030dc:	015a      	lsls	r2, r3, #5
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	4413      	add	r3, r2
 80030e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80030e6:	681a      	ldr	r2, [r3, #0]
 80030e8:	683b      	ldr	r3, [r7, #0]
 80030ea:	689b      	ldr	r3, [r3, #8]
 80030ec:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80030f0:	683b      	ldr	r3, [r7, #0]
 80030f2:	78db      	ldrb	r3, [r3, #3]
 80030f4:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80030f6:	430b      	orrs	r3, r1
 80030f8:	4313      	orrs	r3, r2
 80030fa:	68ba      	ldr	r2, [r7, #8]
 80030fc:	0151      	lsls	r1, r2, #5
 80030fe:	68fa      	ldr	r2, [r7, #12]
 8003100:	440a      	add	r2, r1
 8003102:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003106:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800310a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800310e:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8003110:	2300      	movs	r3, #0
}
 8003112:	4618      	mov	r0, r3
 8003114:	3714      	adds	r7, #20
 8003116:	46bd      	mov	sp, r7
 8003118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800311c:	4770      	bx	lr
	...

08003120 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003120:	b480      	push	{r7}
 8003122:	b085      	sub	sp, #20
 8003124:	af00      	add	r7, sp, #0
 8003126:	6078      	str	r0, [r7, #4]
 8003128:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800312e:	683b      	ldr	r3, [r7, #0]
 8003130:	781b      	ldrb	r3, [r3, #0]
 8003132:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8003134:	683b      	ldr	r3, [r7, #0]
 8003136:	785b      	ldrb	r3, [r3, #1]
 8003138:	2b01      	cmp	r3, #1
 800313a:	d161      	bne.n	8003200 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800313c:	68bb      	ldr	r3, [r7, #8]
 800313e:	015a      	lsls	r2, r3, #5
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	4413      	add	r3, r2
 8003144:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800314e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003152:	d11f      	bne.n	8003194 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8003154:	68bb      	ldr	r3, [r7, #8]
 8003156:	015a      	lsls	r2, r3, #5
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	4413      	add	r3, r2
 800315c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	68ba      	ldr	r2, [r7, #8]
 8003164:	0151      	lsls	r1, r2, #5
 8003166:	68fa      	ldr	r2, [r7, #12]
 8003168:	440a      	add	r2, r1
 800316a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800316e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003172:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8003174:	68bb      	ldr	r3, [r7, #8]
 8003176:	015a      	lsls	r2, r3, #5
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	4413      	add	r3, r2
 800317c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	68ba      	ldr	r2, [r7, #8]
 8003184:	0151      	lsls	r1, r2, #5
 8003186:	68fa      	ldr	r2, [r7, #12]
 8003188:	440a      	add	r2, r1
 800318a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800318e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003192:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800319a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800319c:	683b      	ldr	r3, [r7, #0]
 800319e:	781b      	ldrb	r3, [r3, #0]
 80031a0:	f003 030f 	and.w	r3, r3, #15
 80031a4:	2101      	movs	r1, #1
 80031a6:	fa01 f303 	lsl.w	r3, r1, r3
 80031aa:	b29b      	uxth	r3, r3
 80031ac:	43db      	mvns	r3, r3
 80031ae:	68f9      	ldr	r1, [r7, #12]
 80031b0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80031b4:	4013      	ands	r3, r2
 80031b6:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80031be:	69da      	ldr	r2, [r3, #28]
 80031c0:	683b      	ldr	r3, [r7, #0]
 80031c2:	781b      	ldrb	r3, [r3, #0]
 80031c4:	f003 030f 	and.w	r3, r3, #15
 80031c8:	2101      	movs	r1, #1
 80031ca:	fa01 f303 	lsl.w	r3, r1, r3
 80031ce:	b29b      	uxth	r3, r3
 80031d0:	43db      	mvns	r3, r3
 80031d2:	68f9      	ldr	r1, [r7, #12]
 80031d4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80031d8:	4013      	ands	r3, r2
 80031da:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80031dc:	68bb      	ldr	r3, [r7, #8]
 80031de:	015a      	lsls	r2, r3, #5
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	4413      	add	r3, r2
 80031e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80031e8:	681a      	ldr	r2, [r3, #0]
 80031ea:	68bb      	ldr	r3, [r7, #8]
 80031ec:	0159      	lsls	r1, r3, #5
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	440b      	add	r3, r1
 80031f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80031f6:	4619      	mov	r1, r3
 80031f8:	4b35      	ldr	r3, [pc, #212]	; (80032d0 <USB_DeactivateEndpoint+0x1b0>)
 80031fa:	4013      	ands	r3, r2
 80031fc:	600b      	str	r3, [r1, #0]
 80031fe:	e060      	b.n	80032c2 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003200:	68bb      	ldr	r3, [r7, #8]
 8003202:	015a      	lsls	r2, r3, #5
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	4413      	add	r3, r2
 8003208:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003212:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003216:	d11f      	bne.n	8003258 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003218:	68bb      	ldr	r3, [r7, #8]
 800321a:	015a      	lsls	r2, r3, #5
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	4413      	add	r3, r2
 8003220:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	68ba      	ldr	r2, [r7, #8]
 8003228:	0151      	lsls	r1, r2, #5
 800322a:	68fa      	ldr	r2, [r7, #12]
 800322c:	440a      	add	r2, r1
 800322e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003232:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003236:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8003238:	68bb      	ldr	r3, [r7, #8]
 800323a:	015a      	lsls	r2, r3, #5
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	4413      	add	r3, r2
 8003240:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	68ba      	ldr	r2, [r7, #8]
 8003248:	0151      	lsls	r1, r2, #5
 800324a:	68fa      	ldr	r2, [r7, #12]
 800324c:	440a      	add	r2, r1
 800324e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003252:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003256:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800325e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003260:	683b      	ldr	r3, [r7, #0]
 8003262:	781b      	ldrb	r3, [r3, #0]
 8003264:	f003 030f 	and.w	r3, r3, #15
 8003268:	2101      	movs	r1, #1
 800326a:	fa01 f303 	lsl.w	r3, r1, r3
 800326e:	041b      	lsls	r3, r3, #16
 8003270:	43db      	mvns	r3, r3
 8003272:	68f9      	ldr	r1, [r7, #12]
 8003274:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003278:	4013      	ands	r3, r2
 800327a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003282:	69da      	ldr	r2, [r3, #28]
 8003284:	683b      	ldr	r3, [r7, #0]
 8003286:	781b      	ldrb	r3, [r3, #0]
 8003288:	f003 030f 	and.w	r3, r3, #15
 800328c:	2101      	movs	r1, #1
 800328e:	fa01 f303 	lsl.w	r3, r1, r3
 8003292:	041b      	lsls	r3, r3, #16
 8003294:	43db      	mvns	r3, r3
 8003296:	68f9      	ldr	r1, [r7, #12]
 8003298:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800329c:	4013      	ands	r3, r2
 800329e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80032a0:	68bb      	ldr	r3, [r7, #8]
 80032a2:	015a      	lsls	r2, r3, #5
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	4413      	add	r3, r2
 80032a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80032ac:	681a      	ldr	r2, [r3, #0]
 80032ae:	68bb      	ldr	r3, [r7, #8]
 80032b0:	0159      	lsls	r1, r3, #5
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	440b      	add	r3, r1
 80032b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80032ba:	4619      	mov	r1, r3
 80032bc:	4b05      	ldr	r3, [pc, #20]	; (80032d4 <USB_DeactivateEndpoint+0x1b4>)
 80032be:	4013      	ands	r3, r2
 80032c0:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80032c2:	2300      	movs	r3, #0
}
 80032c4:	4618      	mov	r0, r3
 80032c6:	3714      	adds	r7, #20
 80032c8:	46bd      	mov	sp, r7
 80032ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ce:	4770      	bx	lr
 80032d0:	ec337800 	.word	0xec337800
 80032d4:	eff37800 	.word	0xeff37800

080032d8 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80032d8:	b580      	push	{r7, lr}
 80032da:	b08a      	sub	sp, #40	; 0x28
 80032dc:	af02      	add	r7, sp, #8
 80032de:	60f8      	str	r0, [r7, #12]
 80032e0:	60b9      	str	r1, [r7, #8]
 80032e2:	4613      	mov	r3, r2
 80032e4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80032ea:	68bb      	ldr	r3, [r7, #8]
 80032ec:	781b      	ldrb	r3, [r3, #0]
 80032ee:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80032f0:	68bb      	ldr	r3, [r7, #8]
 80032f2:	785b      	ldrb	r3, [r3, #1]
 80032f4:	2b01      	cmp	r3, #1
 80032f6:	f040 815c 	bne.w	80035b2 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80032fa:	68bb      	ldr	r3, [r7, #8]
 80032fc:	695b      	ldr	r3, [r3, #20]
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d132      	bne.n	8003368 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003302:	69bb      	ldr	r3, [r7, #24]
 8003304:	015a      	lsls	r2, r3, #5
 8003306:	69fb      	ldr	r3, [r7, #28]
 8003308:	4413      	add	r3, r2
 800330a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800330e:	691b      	ldr	r3, [r3, #16]
 8003310:	69ba      	ldr	r2, [r7, #24]
 8003312:	0151      	lsls	r1, r2, #5
 8003314:	69fa      	ldr	r2, [r7, #28]
 8003316:	440a      	add	r2, r1
 8003318:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800331c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003320:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003324:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8003326:	69bb      	ldr	r3, [r7, #24]
 8003328:	015a      	lsls	r2, r3, #5
 800332a:	69fb      	ldr	r3, [r7, #28]
 800332c:	4413      	add	r3, r2
 800332e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003332:	691b      	ldr	r3, [r3, #16]
 8003334:	69ba      	ldr	r2, [r7, #24]
 8003336:	0151      	lsls	r1, r2, #5
 8003338:	69fa      	ldr	r2, [r7, #28]
 800333a:	440a      	add	r2, r1
 800333c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003340:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003344:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003346:	69bb      	ldr	r3, [r7, #24]
 8003348:	015a      	lsls	r2, r3, #5
 800334a:	69fb      	ldr	r3, [r7, #28]
 800334c:	4413      	add	r3, r2
 800334e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003352:	691b      	ldr	r3, [r3, #16]
 8003354:	69ba      	ldr	r2, [r7, #24]
 8003356:	0151      	lsls	r1, r2, #5
 8003358:	69fa      	ldr	r2, [r7, #28]
 800335a:	440a      	add	r2, r1
 800335c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003360:	0cdb      	lsrs	r3, r3, #19
 8003362:	04db      	lsls	r3, r3, #19
 8003364:	6113      	str	r3, [r2, #16]
 8003366:	e074      	b.n	8003452 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003368:	69bb      	ldr	r3, [r7, #24]
 800336a:	015a      	lsls	r2, r3, #5
 800336c:	69fb      	ldr	r3, [r7, #28]
 800336e:	4413      	add	r3, r2
 8003370:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003374:	691b      	ldr	r3, [r3, #16]
 8003376:	69ba      	ldr	r2, [r7, #24]
 8003378:	0151      	lsls	r1, r2, #5
 800337a:	69fa      	ldr	r2, [r7, #28]
 800337c:	440a      	add	r2, r1
 800337e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003382:	0cdb      	lsrs	r3, r3, #19
 8003384:	04db      	lsls	r3, r3, #19
 8003386:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003388:	69bb      	ldr	r3, [r7, #24]
 800338a:	015a      	lsls	r2, r3, #5
 800338c:	69fb      	ldr	r3, [r7, #28]
 800338e:	4413      	add	r3, r2
 8003390:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003394:	691b      	ldr	r3, [r3, #16]
 8003396:	69ba      	ldr	r2, [r7, #24]
 8003398:	0151      	lsls	r1, r2, #5
 800339a:	69fa      	ldr	r2, [r7, #28]
 800339c:	440a      	add	r2, r1
 800339e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80033a2:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80033a6:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80033aa:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80033ac:	69bb      	ldr	r3, [r7, #24]
 80033ae:	015a      	lsls	r2, r3, #5
 80033b0:	69fb      	ldr	r3, [r7, #28]
 80033b2:	4413      	add	r3, r2
 80033b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80033b8:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80033ba:	68bb      	ldr	r3, [r7, #8]
 80033bc:	6959      	ldr	r1, [r3, #20]
 80033be:	68bb      	ldr	r3, [r7, #8]
 80033c0:	689b      	ldr	r3, [r3, #8]
 80033c2:	440b      	add	r3, r1
 80033c4:	1e59      	subs	r1, r3, #1
 80033c6:	68bb      	ldr	r3, [r7, #8]
 80033c8:	689b      	ldr	r3, [r3, #8]
 80033ca:	fbb1 f3f3 	udiv	r3, r1, r3
 80033ce:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80033d0:	4b9d      	ldr	r3, [pc, #628]	; (8003648 <USB_EPStartXfer+0x370>)
 80033d2:	400b      	ands	r3, r1
 80033d4:	69b9      	ldr	r1, [r7, #24]
 80033d6:	0148      	lsls	r0, r1, #5
 80033d8:	69f9      	ldr	r1, [r7, #28]
 80033da:	4401      	add	r1, r0
 80033dc:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80033e0:	4313      	orrs	r3, r2
 80033e2:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80033e4:	69bb      	ldr	r3, [r7, #24]
 80033e6:	015a      	lsls	r2, r3, #5
 80033e8:	69fb      	ldr	r3, [r7, #28]
 80033ea:	4413      	add	r3, r2
 80033ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80033f0:	691a      	ldr	r2, [r3, #16]
 80033f2:	68bb      	ldr	r3, [r7, #8]
 80033f4:	695b      	ldr	r3, [r3, #20]
 80033f6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80033fa:	69b9      	ldr	r1, [r7, #24]
 80033fc:	0148      	lsls	r0, r1, #5
 80033fe:	69f9      	ldr	r1, [r7, #28]
 8003400:	4401      	add	r1, r0
 8003402:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8003406:	4313      	orrs	r3, r2
 8003408:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800340a:	68bb      	ldr	r3, [r7, #8]
 800340c:	78db      	ldrb	r3, [r3, #3]
 800340e:	2b01      	cmp	r3, #1
 8003410:	d11f      	bne.n	8003452 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8003412:	69bb      	ldr	r3, [r7, #24]
 8003414:	015a      	lsls	r2, r3, #5
 8003416:	69fb      	ldr	r3, [r7, #28]
 8003418:	4413      	add	r3, r2
 800341a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800341e:	691b      	ldr	r3, [r3, #16]
 8003420:	69ba      	ldr	r2, [r7, #24]
 8003422:	0151      	lsls	r1, r2, #5
 8003424:	69fa      	ldr	r2, [r7, #28]
 8003426:	440a      	add	r2, r1
 8003428:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800342c:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8003430:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8003432:	69bb      	ldr	r3, [r7, #24]
 8003434:	015a      	lsls	r2, r3, #5
 8003436:	69fb      	ldr	r3, [r7, #28]
 8003438:	4413      	add	r3, r2
 800343a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800343e:	691b      	ldr	r3, [r3, #16]
 8003440:	69ba      	ldr	r2, [r7, #24]
 8003442:	0151      	lsls	r1, r2, #5
 8003444:	69fa      	ldr	r2, [r7, #28]
 8003446:	440a      	add	r2, r1
 8003448:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800344c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003450:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8003452:	79fb      	ldrb	r3, [r7, #7]
 8003454:	2b01      	cmp	r3, #1
 8003456:	d14b      	bne.n	80034f0 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8003458:	68bb      	ldr	r3, [r7, #8]
 800345a:	691b      	ldr	r3, [r3, #16]
 800345c:	2b00      	cmp	r3, #0
 800345e:	d009      	beq.n	8003474 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8003460:	69bb      	ldr	r3, [r7, #24]
 8003462:	015a      	lsls	r2, r3, #5
 8003464:	69fb      	ldr	r3, [r7, #28]
 8003466:	4413      	add	r3, r2
 8003468:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800346c:	461a      	mov	r2, r3
 800346e:	68bb      	ldr	r3, [r7, #8]
 8003470:	691b      	ldr	r3, [r3, #16]
 8003472:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8003474:	68bb      	ldr	r3, [r7, #8]
 8003476:	78db      	ldrb	r3, [r3, #3]
 8003478:	2b01      	cmp	r3, #1
 800347a:	d128      	bne.n	80034ce <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800347c:	69fb      	ldr	r3, [r7, #28]
 800347e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003482:	689b      	ldr	r3, [r3, #8]
 8003484:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003488:	2b00      	cmp	r3, #0
 800348a:	d110      	bne.n	80034ae <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800348c:	69bb      	ldr	r3, [r7, #24]
 800348e:	015a      	lsls	r2, r3, #5
 8003490:	69fb      	ldr	r3, [r7, #28]
 8003492:	4413      	add	r3, r2
 8003494:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	69ba      	ldr	r2, [r7, #24]
 800349c:	0151      	lsls	r1, r2, #5
 800349e:	69fa      	ldr	r2, [r7, #28]
 80034a0:	440a      	add	r2, r1
 80034a2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80034a6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80034aa:	6013      	str	r3, [r2, #0]
 80034ac:	e00f      	b.n	80034ce <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80034ae:	69bb      	ldr	r3, [r7, #24]
 80034b0:	015a      	lsls	r2, r3, #5
 80034b2:	69fb      	ldr	r3, [r7, #28]
 80034b4:	4413      	add	r3, r2
 80034b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	69ba      	ldr	r2, [r7, #24]
 80034be:	0151      	lsls	r1, r2, #5
 80034c0:	69fa      	ldr	r2, [r7, #28]
 80034c2:	440a      	add	r2, r1
 80034c4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80034c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80034cc:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80034ce:	69bb      	ldr	r3, [r7, #24]
 80034d0:	015a      	lsls	r2, r3, #5
 80034d2:	69fb      	ldr	r3, [r7, #28]
 80034d4:	4413      	add	r3, r2
 80034d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	69ba      	ldr	r2, [r7, #24]
 80034de:	0151      	lsls	r1, r2, #5
 80034e0:	69fa      	ldr	r2, [r7, #28]
 80034e2:	440a      	add	r2, r1
 80034e4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80034e8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80034ec:	6013      	str	r3, [r2, #0]
 80034ee:	e12f      	b.n	8003750 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80034f0:	69bb      	ldr	r3, [r7, #24]
 80034f2:	015a      	lsls	r2, r3, #5
 80034f4:	69fb      	ldr	r3, [r7, #28]
 80034f6:	4413      	add	r3, r2
 80034f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	69ba      	ldr	r2, [r7, #24]
 8003500:	0151      	lsls	r1, r2, #5
 8003502:	69fa      	ldr	r2, [r7, #28]
 8003504:	440a      	add	r2, r1
 8003506:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800350a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800350e:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8003510:	68bb      	ldr	r3, [r7, #8]
 8003512:	78db      	ldrb	r3, [r3, #3]
 8003514:	2b01      	cmp	r3, #1
 8003516:	d015      	beq.n	8003544 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8003518:	68bb      	ldr	r3, [r7, #8]
 800351a:	695b      	ldr	r3, [r3, #20]
 800351c:	2b00      	cmp	r3, #0
 800351e:	f000 8117 	beq.w	8003750 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8003522:	69fb      	ldr	r3, [r7, #28]
 8003524:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003528:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800352a:	68bb      	ldr	r3, [r7, #8]
 800352c:	781b      	ldrb	r3, [r3, #0]
 800352e:	f003 030f 	and.w	r3, r3, #15
 8003532:	2101      	movs	r1, #1
 8003534:	fa01 f303 	lsl.w	r3, r1, r3
 8003538:	69f9      	ldr	r1, [r7, #28]
 800353a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800353e:	4313      	orrs	r3, r2
 8003540:	634b      	str	r3, [r1, #52]	; 0x34
 8003542:	e105      	b.n	8003750 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8003544:	69fb      	ldr	r3, [r7, #28]
 8003546:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800354a:	689b      	ldr	r3, [r3, #8]
 800354c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003550:	2b00      	cmp	r3, #0
 8003552:	d110      	bne.n	8003576 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8003554:	69bb      	ldr	r3, [r7, #24]
 8003556:	015a      	lsls	r2, r3, #5
 8003558:	69fb      	ldr	r3, [r7, #28]
 800355a:	4413      	add	r3, r2
 800355c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	69ba      	ldr	r2, [r7, #24]
 8003564:	0151      	lsls	r1, r2, #5
 8003566:	69fa      	ldr	r2, [r7, #28]
 8003568:	440a      	add	r2, r1
 800356a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800356e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003572:	6013      	str	r3, [r2, #0]
 8003574:	e00f      	b.n	8003596 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8003576:	69bb      	ldr	r3, [r7, #24]
 8003578:	015a      	lsls	r2, r3, #5
 800357a:	69fb      	ldr	r3, [r7, #28]
 800357c:	4413      	add	r3, r2
 800357e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	69ba      	ldr	r2, [r7, #24]
 8003586:	0151      	lsls	r1, r2, #5
 8003588:	69fa      	ldr	r2, [r7, #28]
 800358a:	440a      	add	r2, r1
 800358c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003590:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003594:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8003596:	68bb      	ldr	r3, [r7, #8]
 8003598:	68d9      	ldr	r1, [r3, #12]
 800359a:	68bb      	ldr	r3, [r7, #8]
 800359c:	781a      	ldrb	r2, [r3, #0]
 800359e:	68bb      	ldr	r3, [r7, #8]
 80035a0:	695b      	ldr	r3, [r3, #20]
 80035a2:	b298      	uxth	r0, r3
 80035a4:	79fb      	ldrb	r3, [r7, #7]
 80035a6:	9300      	str	r3, [sp, #0]
 80035a8:	4603      	mov	r3, r0
 80035aa:	68f8      	ldr	r0, [r7, #12]
 80035ac:	f000 fa2b 	bl	8003a06 <USB_WritePacket>
 80035b0:	e0ce      	b.n	8003750 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80035b2:	69bb      	ldr	r3, [r7, #24]
 80035b4:	015a      	lsls	r2, r3, #5
 80035b6:	69fb      	ldr	r3, [r7, #28]
 80035b8:	4413      	add	r3, r2
 80035ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80035be:	691b      	ldr	r3, [r3, #16]
 80035c0:	69ba      	ldr	r2, [r7, #24]
 80035c2:	0151      	lsls	r1, r2, #5
 80035c4:	69fa      	ldr	r2, [r7, #28]
 80035c6:	440a      	add	r2, r1
 80035c8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80035cc:	0cdb      	lsrs	r3, r3, #19
 80035ce:	04db      	lsls	r3, r3, #19
 80035d0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80035d2:	69bb      	ldr	r3, [r7, #24]
 80035d4:	015a      	lsls	r2, r3, #5
 80035d6:	69fb      	ldr	r3, [r7, #28]
 80035d8:	4413      	add	r3, r2
 80035da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80035de:	691b      	ldr	r3, [r3, #16]
 80035e0:	69ba      	ldr	r2, [r7, #24]
 80035e2:	0151      	lsls	r1, r2, #5
 80035e4:	69fa      	ldr	r2, [r7, #28]
 80035e6:	440a      	add	r2, r1
 80035e8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80035ec:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80035f0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80035f4:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 80035f6:	68bb      	ldr	r3, [r7, #8]
 80035f8:	695b      	ldr	r3, [r3, #20]
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d126      	bne.n	800364c <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80035fe:	69bb      	ldr	r3, [r7, #24]
 8003600:	015a      	lsls	r2, r3, #5
 8003602:	69fb      	ldr	r3, [r7, #28]
 8003604:	4413      	add	r3, r2
 8003606:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800360a:	691a      	ldr	r2, [r3, #16]
 800360c:	68bb      	ldr	r3, [r7, #8]
 800360e:	689b      	ldr	r3, [r3, #8]
 8003610:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003614:	69b9      	ldr	r1, [r7, #24]
 8003616:	0148      	lsls	r0, r1, #5
 8003618:	69f9      	ldr	r1, [r7, #28]
 800361a:	4401      	add	r1, r0
 800361c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8003620:	4313      	orrs	r3, r2
 8003622:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8003624:	69bb      	ldr	r3, [r7, #24]
 8003626:	015a      	lsls	r2, r3, #5
 8003628:	69fb      	ldr	r3, [r7, #28]
 800362a:	4413      	add	r3, r2
 800362c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003630:	691b      	ldr	r3, [r3, #16]
 8003632:	69ba      	ldr	r2, [r7, #24]
 8003634:	0151      	lsls	r1, r2, #5
 8003636:	69fa      	ldr	r2, [r7, #28]
 8003638:	440a      	add	r2, r1
 800363a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800363e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003642:	6113      	str	r3, [r2, #16]
 8003644:	e036      	b.n	80036b4 <USB_EPStartXfer+0x3dc>
 8003646:	bf00      	nop
 8003648:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800364c:	68bb      	ldr	r3, [r7, #8]
 800364e:	695a      	ldr	r2, [r3, #20]
 8003650:	68bb      	ldr	r3, [r7, #8]
 8003652:	689b      	ldr	r3, [r3, #8]
 8003654:	4413      	add	r3, r2
 8003656:	1e5a      	subs	r2, r3, #1
 8003658:	68bb      	ldr	r3, [r7, #8]
 800365a:	689b      	ldr	r3, [r3, #8]
 800365c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003660:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8003662:	69bb      	ldr	r3, [r7, #24]
 8003664:	015a      	lsls	r2, r3, #5
 8003666:	69fb      	ldr	r3, [r7, #28]
 8003668:	4413      	add	r3, r2
 800366a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800366e:	691a      	ldr	r2, [r3, #16]
 8003670:	8afb      	ldrh	r3, [r7, #22]
 8003672:	04d9      	lsls	r1, r3, #19
 8003674:	4b39      	ldr	r3, [pc, #228]	; (800375c <USB_EPStartXfer+0x484>)
 8003676:	400b      	ands	r3, r1
 8003678:	69b9      	ldr	r1, [r7, #24]
 800367a:	0148      	lsls	r0, r1, #5
 800367c:	69f9      	ldr	r1, [r7, #28]
 800367e:	4401      	add	r1, r0
 8003680:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8003684:	4313      	orrs	r3, r2
 8003686:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8003688:	69bb      	ldr	r3, [r7, #24]
 800368a:	015a      	lsls	r2, r3, #5
 800368c:	69fb      	ldr	r3, [r7, #28]
 800368e:	4413      	add	r3, r2
 8003690:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003694:	691a      	ldr	r2, [r3, #16]
 8003696:	68bb      	ldr	r3, [r7, #8]
 8003698:	689b      	ldr	r3, [r3, #8]
 800369a:	8af9      	ldrh	r1, [r7, #22]
 800369c:	fb01 f303 	mul.w	r3, r1, r3
 80036a0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80036a4:	69b9      	ldr	r1, [r7, #24]
 80036a6:	0148      	lsls	r0, r1, #5
 80036a8:	69f9      	ldr	r1, [r7, #28]
 80036aa:	4401      	add	r1, r0
 80036ac:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80036b0:	4313      	orrs	r3, r2
 80036b2:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80036b4:	79fb      	ldrb	r3, [r7, #7]
 80036b6:	2b01      	cmp	r3, #1
 80036b8:	d10d      	bne.n	80036d6 <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80036ba:	68bb      	ldr	r3, [r7, #8]
 80036bc:	68db      	ldr	r3, [r3, #12]
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d009      	beq.n	80036d6 <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80036c2:	68bb      	ldr	r3, [r7, #8]
 80036c4:	68d9      	ldr	r1, [r3, #12]
 80036c6:	69bb      	ldr	r3, [r7, #24]
 80036c8:	015a      	lsls	r2, r3, #5
 80036ca:	69fb      	ldr	r3, [r7, #28]
 80036cc:	4413      	add	r3, r2
 80036ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80036d2:	460a      	mov	r2, r1
 80036d4:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80036d6:	68bb      	ldr	r3, [r7, #8]
 80036d8:	78db      	ldrb	r3, [r3, #3]
 80036da:	2b01      	cmp	r3, #1
 80036dc:	d128      	bne.n	8003730 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80036de:	69fb      	ldr	r3, [r7, #28]
 80036e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80036e4:	689b      	ldr	r3, [r3, #8]
 80036e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d110      	bne.n	8003710 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80036ee:	69bb      	ldr	r3, [r7, #24]
 80036f0:	015a      	lsls	r2, r3, #5
 80036f2:	69fb      	ldr	r3, [r7, #28]
 80036f4:	4413      	add	r3, r2
 80036f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	69ba      	ldr	r2, [r7, #24]
 80036fe:	0151      	lsls	r1, r2, #5
 8003700:	69fa      	ldr	r2, [r7, #28]
 8003702:	440a      	add	r2, r1
 8003704:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003708:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800370c:	6013      	str	r3, [r2, #0]
 800370e:	e00f      	b.n	8003730 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8003710:	69bb      	ldr	r3, [r7, #24]
 8003712:	015a      	lsls	r2, r3, #5
 8003714:	69fb      	ldr	r3, [r7, #28]
 8003716:	4413      	add	r3, r2
 8003718:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	69ba      	ldr	r2, [r7, #24]
 8003720:	0151      	lsls	r1, r2, #5
 8003722:	69fa      	ldr	r2, [r7, #28]
 8003724:	440a      	add	r2, r1
 8003726:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800372a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800372e:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8003730:	69bb      	ldr	r3, [r7, #24]
 8003732:	015a      	lsls	r2, r3, #5
 8003734:	69fb      	ldr	r3, [r7, #28]
 8003736:	4413      	add	r3, r2
 8003738:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	69ba      	ldr	r2, [r7, #24]
 8003740:	0151      	lsls	r1, r2, #5
 8003742:	69fa      	ldr	r2, [r7, #28]
 8003744:	440a      	add	r2, r1
 8003746:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800374a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800374e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8003750:	2300      	movs	r3, #0
}
 8003752:	4618      	mov	r0, r3
 8003754:	3720      	adds	r7, #32
 8003756:	46bd      	mov	sp, r7
 8003758:	bd80      	pop	{r7, pc}
 800375a:	bf00      	nop
 800375c:	1ff80000 	.word	0x1ff80000

08003760 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8003760:	b480      	push	{r7}
 8003762:	b087      	sub	sp, #28
 8003764:	af00      	add	r7, sp, #0
 8003766:	60f8      	str	r0, [r7, #12]
 8003768:	60b9      	str	r1, [r7, #8]
 800376a:	4613      	mov	r3, r2
 800376c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8003772:	68bb      	ldr	r3, [r7, #8]
 8003774:	781b      	ldrb	r3, [r3, #0]
 8003776:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8003778:	68bb      	ldr	r3, [r7, #8]
 800377a:	785b      	ldrb	r3, [r3, #1]
 800377c:	2b01      	cmp	r3, #1
 800377e:	f040 80cd 	bne.w	800391c <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8003782:	68bb      	ldr	r3, [r7, #8]
 8003784:	695b      	ldr	r3, [r3, #20]
 8003786:	2b00      	cmp	r3, #0
 8003788:	d132      	bne.n	80037f0 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800378a:	693b      	ldr	r3, [r7, #16]
 800378c:	015a      	lsls	r2, r3, #5
 800378e:	697b      	ldr	r3, [r7, #20]
 8003790:	4413      	add	r3, r2
 8003792:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003796:	691b      	ldr	r3, [r3, #16]
 8003798:	693a      	ldr	r2, [r7, #16]
 800379a:	0151      	lsls	r1, r2, #5
 800379c:	697a      	ldr	r2, [r7, #20]
 800379e:	440a      	add	r2, r1
 80037a0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80037a4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80037a8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80037ac:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80037ae:	693b      	ldr	r3, [r7, #16]
 80037b0:	015a      	lsls	r2, r3, #5
 80037b2:	697b      	ldr	r3, [r7, #20]
 80037b4:	4413      	add	r3, r2
 80037b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80037ba:	691b      	ldr	r3, [r3, #16]
 80037bc:	693a      	ldr	r2, [r7, #16]
 80037be:	0151      	lsls	r1, r2, #5
 80037c0:	697a      	ldr	r2, [r7, #20]
 80037c2:	440a      	add	r2, r1
 80037c4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80037c8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80037cc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80037ce:	693b      	ldr	r3, [r7, #16]
 80037d0:	015a      	lsls	r2, r3, #5
 80037d2:	697b      	ldr	r3, [r7, #20]
 80037d4:	4413      	add	r3, r2
 80037d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80037da:	691b      	ldr	r3, [r3, #16]
 80037dc:	693a      	ldr	r2, [r7, #16]
 80037de:	0151      	lsls	r1, r2, #5
 80037e0:	697a      	ldr	r2, [r7, #20]
 80037e2:	440a      	add	r2, r1
 80037e4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80037e8:	0cdb      	lsrs	r3, r3, #19
 80037ea:	04db      	lsls	r3, r3, #19
 80037ec:	6113      	str	r3, [r2, #16]
 80037ee:	e04e      	b.n	800388e <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80037f0:	693b      	ldr	r3, [r7, #16]
 80037f2:	015a      	lsls	r2, r3, #5
 80037f4:	697b      	ldr	r3, [r7, #20]
 80037f6:	4413      	add	r3, r2
 80037f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80037fc:	691b      	ldr	r3, [r3, #16]
 80037fe:	693a      	ldr	r2, [r7, #16]
 8003800:	0151      	lsls	r1, r2, #5
 8003802:	697a      	ldr	r2, [r7, #20]
 8003804:	440a      	add	r2, r1
 8003806:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800380a:	0cdb      	lsrs	r3, r3, #19
 800380c:	04db      	lsls	r3, r3, #19
 800380e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003810:	693b      	ldr	r3, [r7, #16]
 8003812:	015a      	lsls	r2, r3, #5
 8003814:	697b      	ldr	r3, [r7, #20]
 8003816:	4413      	add	r3, r2
 8003818:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800381c:	691b      	ldr	r3, [r3, #16]
 800381e:	693a      	ldr	r2, [r7, #16]
 8003820:	0151      	lsls	r1, r2, #5
 8003822:	697a      	ldr	r2, [r7, #20]
 8003824:	440a      	add	r2, r1
 8003826:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800382a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800382e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003832:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8003834:	68bb      	ldr	r3, [r7, #8]
 8003836:	695a      	ldr	r2, [r3, #20]
 8003838:	68bb      	ldr	r3, [r7, #8]
 800383a:	689b      	ldr	r3, [r3, #8]
 800383c:	429a      	cmp	r2, r3
 800383e:	d903      	bls.n	8003848 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8003840:	68bb      	ldr	r3, [r7, #8]
 8003842:	689a      	ldr	r2, [r3, #8]
 8003844:	68bb      	ldr	r3, [r7, #8]
 8003846:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8003848:	693b      	ldr	r3, [r7, #16]
 800384a:	015a      	lsls	r2, r3, #5
 800384c:	697b      	ldr	r3, [r7, #20]
 800384e:	4413      	add	r3, r2
 8003850:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003854:	691b      	ldr	r3, [r3, #16]
 8003856:	693a      	ldr	r2, [r7, #16]
 8003858:	0151      	lsls	r1, r2, #5
 800385a:	697a      	ldr	r2, [r7, #20]
 800385c:	440a      	add	r2, r1
 800385e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003862:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003866:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8003868:	693b      	ldr	r3, [r7, #16]
 800386a:	015a      	lsls	r2, r3, #5
 800386c:	697b      	ldr	r3, [r7, #20]
 800386e:	4413      	add	r3, r2
 8003870:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003874:	691a      	ldr	r2, [r3, #16]
 8003876:	68bb      	ldr	r3, [r7, #8]
 8003878:	695b      	ldr	r3, [r3, #20]
 800387a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800387e:	6939      	ldr	r1, [r7, #16]
 8003880:	0148      	lsls	r0, r1, #5
 8003882:	6979      	ldr	r1, [r7, #20]
 8003884:	4401      	add	r1, r0
 8003886:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800388a:	4313      	orrs	r3, r2
 800388c:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800388e:	79fb      	ldrb	r3, [r7, #7]
 8003890:	2b01      	cmp	r3, #1
 8003892:	d11e      	bne.n	80038d2 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8003894:	68bb      	ldr	r3, [r7, #8]
 8003896:	691b      	ldr	r3, [r3, #16]
 8003898:	2b00      	cmp	r3, #0
 800389a:	d009      	beq.n	80038b0 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800389c:	693b      	ldr	r3, [r7, #16]
 800389e:	015a      	lsls	r2, r3, #5
 80038a0:	697b      	ldr	r3, [r7, #20]
 80038a2:	4413      	add	r3, r2
 80038a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80038a8:	461a      	mov	r2, r3
 80038aa:	68bb      	ldr	r3, [r7, #8]
 80038ac:	691b      	ldr	r3, [r3, #16]
 80038ae:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80038b0:	693b      	ldr	r3, [r7, #16]
 80038b2:	015a      	lsls	r2, r3, #5
 80038b4:	697b      	ldr	r3, [r7, #20]
 80038b6:	4413      	add	r3, r2
 80038b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	693a      	ldr	r2, [r7, #16]
 80038c0:	0151      	lsls	r1, r2, #5
 80038c2:	697a      	ldr	r2, [r7, #20]
 80038c4:	440a      	add	r2, r1
 80038c6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80038ca:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80038ce:	6013      	str	r3, [r2, #0]
 80038d0:	e092      	b.n	80039f8 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80038d2:	693b      	ldr	r3, [r7, #16]
 80038d4:	015a      	lsls	r2, r3, #5
 80038d6:	697b      	ldr	r3, [r7, #20]
 80038d8:	4413      	add	r3, r2
 80038da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	693a      	ldr	r2, [r7, #16]
 80038e2:	0151      	lsls	r1, r2, #5
 80038e4:	697a      	ldr	r2, [r7, #20]
 80038e6:	440a      	add	r2, r1
 80038e8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80038ec:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80038f0:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 80038f2:	68bb      	ldr	r3, [r7, #8]
 80038f4:	695b      	ldr	r3, [r3, #20]
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d07e      	beq.n	80039f8 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80038fa:	697b      	ldr	r3, [r7, #20]
 80038fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003900:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003902:	68bb      	ldr	r3, [r7, #8]
 8003904:	781b      	ldrb	r3, [r3, #0]
 8003906:	f003 030f 	and.w	r3, r3, #15
 800390a:	2101      	movs	r1, #1
 800390c:	fa01 f303 	lsl.w	r3, r1, r3
 8003910:	6979      	ldr	r1, [r7, #20]
 8003912:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003916:	4313      	orrs	r3, r2
 8003918:	634b      	str	r3, [r1, #52]	; 0x34
 800391a:	e06d      	b.n	80039f8 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800391c:	693b      	ldr	r3, [r7, #16]
 800391e:	015a      	lsls	r2, r3, #5
 8003920:	697b      	ldr	r3, [r7, #20]
 8003922:	4413      	add	r3, r2
 8003924:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003928:	691b      	ldr	r3, [r3, #16]
 800392a:	693a      	ldr	r2, [r7, #16]
 800392c:	0151      	lsls	r1, r2, #5
 800392e:	697a      	ldr	r2, [r7, #20]
 8003930:	440a      	add	r2, r1
 8003932:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003936:	0cdb      	lsrs	r3, r3, #19
 8003938:	04db      	lsls	r3, r3, #19
 800393a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800393c:	693b      	ldr	r3, [r7, #16]
 800393e:	015a      	lsls	r2, r3, #5
 8003940:	697b      	ldr	r3, [r7, #20]
 8003942:	4413      	add	r3, r2
 8003944:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003948:	691b      	ldr	r3, [r3, #16]
 800394a:	693a      	ldr	r2, [r7, #16]
 800394c:	0151      	lsls	r1, r2, #5
 800394e:	697a      	ldr	r2, [r7, #20]
 8003950:	440a      	add	r2, r1
 8003952:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003956:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800395a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800395e:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8003960:	68bb      	ldr	r3, [r7, #8]
 8003962:	695b      	ldr	r3, [r3, #20]
 8003964:	2b00      	cmp	r3, #0
 8003966:	d003      	beq.n	8003970 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8003968:	68bb      	ldr	r3, [r7, #8]
 800396a:	689a      	ldr	r2, [r3, #8]
 800396c:	68bb      	ldr	r3, [r7, #8]
 800396e:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8003970:	693b      	ldr	r3, [r7, #16]
 8003972:	015a      	lsls	r2, r3, #5
 8003974:	697b      	ldr	r3, [r7, #20]
 8003976:	4413      	add	r3, r2
 8003978:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800397c:	691b      	ldr	r3, [r3, #16]
 800397e:	693a      	ldr	r2, [r7, #16]
 8003980:	0151      	lsls	r1, r2, #5
 8003982:	697a      	ldr	r2, [r7, #20]
 8003984:	440a      	add	r2, r1
 8003986:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800398a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800398e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8003990:	693b      	ldr	r3, [r7, #16]
 8003992:	015a      	lsls	r2, r3, #5
 8003994:	697b      	ldr	r3, [r7, #20]
 8003996:	4413      	add	r3, r2
 8003998:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800399c:	691a      	ldr	r2, [r3, #16]
 800399e:	68bb      	ldr	r3, [r7, #8]
 80039a0:	689b      	ldr	r3, [r3, #8]
 80039a2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80039a6:	6939      	ldr	r1, [r7, #16]
 80039a8:	0148      	lsls	r0, r1, #5
 80039aa:	6979      	ldr	r1, [r7, #20]
 80039ac:	4401      	add	r1, r0
 80039ae:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80039b2:	4313      	orrs	r3, r2
 80039b4:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 80039b6:	79fb      	ldrb	r3, [r7, #7]
 80039b8:	2b01      	cmp	r3, #1
 80039ba:	d10d      	bne.n	80039d8 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80039bc:	68bb      	ldr	r3, [r7, #8]
 80039be:	68db      	ldr	r3, [r3, #12]
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d009      	beq.n	80039d8 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80039c4:	68bb      	ldr	r3, [r7, #8]
 80039c6:	68d9      	ldr	r1, [r3, #12]
 80039c8:	693b      	ldr	r3, [r7, #16]
 80039ca:	015a      	lsls	r2, r3, #5
 80039cc:	697b      	ldr	r3, [r7, #20]
 80039ce:	4413      	add	r3, r2
 80039d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80039d4:	460a      	mov	r2, r1
 80039d6:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80039d8:	693b      	ldr	r3, [r7, #16]
 80039da:	015a      	lsls	r2, r3, #5
 80039dc:	697b      	ldr	r3, [r7, #20]
 80039de:	4413      	add	r3, r2
 80039e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	693a      	ldr	r2, [r7, #16]
 80039e8:	0151      	lsls	r1, r2, #5
 80039ea:	697a      	ldr	r2, [r7, #20]
 80039ec:	440a      	add	r2, r1
 80039ee:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80039f2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80039f6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80039f8:	2300      	movs	r3, #0
}
 80039fa:	4618      	mov	r0, r3
 80039fc:	371c      	adds	r7, #28
 80039fe:	46bd      	mov	sp, r7
 8003a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a04:	4770      	bx	lr

08003a06 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8003a06:	b480      	push	{r7}
 8003a08:	b089      	sub	sp, #36	; 0x24
 8003a0a:	af00      	add	r7, sp, #0
 8003a0c:	60f8      	str	r0, [r7, #12]
 8003a0e:	60b9      	str	r1, [r7, #8]
 8003a10:	4611      	mov	r1, r2
 8003a12:	461a      	mov	r2, r3
 8003a14:	460b      	mov	r3, r1
 8003a16:	71fb      	strb	r3, [r7, #7]
 8003a18:	4613      	mov	r3, r2
 8003a1a:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8003a20:	68bb      	ldr	r3, [r7, #8]
 8003a22:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8003a24:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d123      	bne.n	8003a74 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8003a2c:	88bb      	ldrh	r3, [r7, #4]
 8003a2e:	3303      	adds	r3, #3
 8003a30:	089b      	lsrs	r3, r3, #2
 8003a32:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8003a34:	2300      	movs	r3, #0
 8003a36:	61bb      	str	r3, [r7, #24]
 8003a38:	e018      	b.n	8003a6c <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8003a3a:	79fb      	ldrb	r3, [r7, #7]
 8003a3c:	031a      	lsls	r2, r3, #12
 8003a3e:	697b      	ldr	r3, [r7, #20]
 8003a40:	4413      	add	r3, r2
 8003a42:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003a46:	461a      	mov	r2, r3
 8003a48:	69fb      	ldr	r3, [r7, #28]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	6013      	str	r3, [r2, #0]
      pSrc++;
 8003a4e:	69fb      	ldr	r3, [r7, #28]
 8003a50:	3301      	adds	r3, #1
 8003a52:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8003a54:	69fb      	ldr	r3, [r7, #28]
 8003a56:	3301      	adds	r3, #1
 8003a58:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8003a5a:	69fb      	ldr	r3, [r7, #28]
 8003a5c:	3301      	adds	r3, #1
 8003a5e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8003a60:	69fb      	ldr	r3, [r7, #28]
 8003a62:	3301      	adds	r3, #1
 8003a64:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8003a66:	69bb      	ldr	r3, [r7, #24]
 8003a68:	3301      	adds	r3, #1
 8003a6a:	61bb      	str	r3, [r7, #24]
 8003a6c:	69ba      	ldr	r2, [r7, #24]
 8003a6e:	693b      	ldr	r3, [r7, #16]
 8003a70:	429a      	cmp	r2, r3
 8003a72:	d3e2      	bcc.n	8003a3a <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8003a74:	2300      	movs	r3, #0
}
 8003a76:	4618      	mov	r0, r3
 8003a78:	3724      	adds	r7, #36	; 0x24
 8003a7a:	46bd      	mov	sp, r7
 8003a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a80:	4770      	bx	lr

08003a82 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8003a82:	b480      	push	{r7}
 8003a84:	b08b      	sub	sp, #44	; 0x2c
 8003a86:	af00      	add	r7, sp, #0
 8003a88:	60f8      	str	r0, [r7, #12]
 8003a8a:	60b9      	str	r1, [r7, #8]
 8003a8c:	4613      	mov	r3, r2
 8003a8e:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8003a94:	68bb      	ldr	r3, [r7, #8]
 8003a96:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8003a98:	88fb      	ldrh	r3, [r7, #6]
 8003a9a:	089b      	lsrs	r3, r3, #2
 8003a9c:	b29b      	uxth	r3, r3
 8003a9e:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8003aa0:	88fb      	ldrh	r3, [r7, #6]
 8003aa2:	f003 0303 	and.w	r3, r3, #3
 8003aa6:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8003aa8:	2300      	movs	r3, #0
 8003aaa:	623b      	str	r3, [r7, #32]
 8003aac:	e014      	b.n	8003ad8 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8003aae:	69bb      	ldr	r3, [r7, #24]
 8003ab0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003ab4:	681a      	ldr	r2, [r3, #0]
 8003ab6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ab8:	601a      	str	r2, [r3, #0]
    pDest++;
 8003aba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003abc:	3301      	adds	r3, #1
 8003abe:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8003ac0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ac2:	3301      	adds	r3, #1
 8003ac4:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8003ac6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ac8:	3301      	adds	r3, #1
 8003aca:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8003acc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ace:	3301      	adds	r3, #1
 8003ad0:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8003ad2:	6a3b      	ldr	r3, [r7, #32]
 8003ad4:	3301      	adds	r3, #1
 8003ad6:	623b      	str	r3, [r7, #32]
 8003ad8:	6a3a      	ldr	r2, [r7, #32]
 8003ada:	697b      	ldr	r3, [r7, #20]
 8003adc:	429a      	cmp	r2, r3
 8003ade:	d3e6      	bcc.n	8003aae <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8003ae0:	8bfb      	ldrh	r3, [r7, #30]
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d01e      	beq.n	8003b24 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8003ae6:	2300      	movs	r3, #0
 8003ae8:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8003aea:	69bb      	ldr	r3, [r7, #24]
 8003aec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003af0:	461a      	mov	r2, r3
 8003af2:	f107 0310 	add.w	r3, r7, #16
 8003af6:	6812      	ldr	r2, [r2, #0]
 8003af8:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8003afa:	693a      	ldr	r2, [r7, #16]
 8003afc:	6a3b      	ldr	r3, [r7, #32]
 8003afe:	b2db      	uxtb	r3, r3
 8003b00:	00db      	lsls	r3, r3, #3
 8003b02:	fa22 f303 	lsr.w	r3, r2, r3
 8003b06:	b2da      	uxtb	r2, r3
 8003b08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b0a:	701a      	strb	r2, [r3, #0]
      i++;
 8003b0c:	6a3b      	ldr	r3, [r7, #32]
 8003b0e:	3301      	adds	r3, #1
 8003b10:	623b      	str	r3, [r7, #32]
      pDest++;
 8003b12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b14:	3301      	adds	r3, #1
 8003b16:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8003b18:	8bfb      	ldrh	r3, [r7, #30]
 8003b1a:	3b01      	subs	r3, #1
 8003b1c:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8003b1e:	8bfb      	ldrh	r3, [r7, #30]
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d1ea      	bne.n	8003afa <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8003b24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003b26:	4618      	mov	r0, r3
 8003b28:	372c      	adds	r7, #44	; 0x2c
 8003b2a:	46bd      	mov	sp, r7
 8003b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b30:	4770      	bx	lr

08003b32 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003b32:	b480      	push	{r7}
 8003b34:	b085      	sub	sp, #20
 8003b36:	af00      	add	r7, sp, #0
 8003b38:	6078      	str	r0, [r7, #4]
 8003b3a:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003b40:	683b      	ldr	r3, [r7, #0]
 8003b42:	781b      	ldrb	r3, [r3, #0]
 8003b44:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8003b46:	683b      	ldr	r3, [r7, #0]
 8003b48:	785b      	ldrb	r3, [r3, #1]
 8003b4a:	2b01      	cmp	r3, #1
 8003b4c:	d12c      	bne.n	8003ba8 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8003b4e:	68bb      	ldr	r3, [r7, #8]
 8003b50:	015a      	lsls	r2, r3, #5
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	4413      	add	r3, r2
 8003b56:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	db12      	blt.n	8003b86 <USB_EPSetStall+0x54>
 8003b60:	68bb      	ldr	r3, [r7, #8]
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d00f      	beq.n	8003b86 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8003b66:	68bb      	ldr	r3, [r7, #8]
 8003b68:	015a      	lsls	r2, r3, #5
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	4413      	add	r3, r2
 8003b6e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	68ba      	ldr	r2, [r7, #8]
 8003b76:	0151      	lsls	r1, r2, #5
 8003b78:	68fa      	ldr	r2, [r7, #12]
 8003b7a:	440a      	add	r2, r1
 8003b7c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003b80:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003b84:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8003b86:	68bb      	ldr	r3, [r7, #8]
 8003b88:	015a      	lsls	r2, r3, #5
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	4413      	add	r3, r2
 8003b8e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	68ba      	ldr	r2, [r7, #8]
 8003b96:	0151      	lsls	r1, r2, #5
 8003b98:	68fa      	ldr	r2, [r7, #12]
 8003b9a:	440a      	add	r2, r1
 8003b9c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003ba0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003ba4:	6013      	str	r3, [r2, #0]
 8003ba6:	e02b      	b.n	8003c00 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8003ba8:	68bb      	ldr	r3, [r7, #8]
 8003baa:	015a      	lsls	r2, r3, #5
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	4413      	add	r3, r2
 8003bb0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	db12      	blt.n	8003be0 <USB_EPSetStall+0xae>
 8003bba:	68bb      	ldr	r3, [r7, #8]
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d00f      	beq.n	8003be0 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8003bc0:	68bb      	ldr	r3, [r7, #8]
 8003bc2:	015a      	lsls	r2, r3, #5
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	4413      	add	r3, r2
 8003bc8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	68ba      	ldr	r2, [r7, #8]
 8003bd0:	0151      	lsls	r1, r2, #5
 8003bd2:	68fa      	ldr	r2, [r7, #12]
 8003bd4:	440a      	add	r2, r1
 8003bd6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003bda:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003bde:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8003be0:	68bb      	ldr	r3, [r7, #8]
 8003be2:	015a      	lsls	r2, r3, #5
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	4413      	add	r3, r2
 8003be8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	68ba      	ldr	r2, [r7, #8]
 8003bf0:	0151      	lsls	r1, r2, #5
 8003bf2:	68fa      	ldr	r2, [r7, #12]
 8003bf4:	440a      	add	r2, r1
 8003bf6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003bfa:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003bfe:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8003c00:	2300      	movs	r3, #0
}
 8003c02:	4618      	mov	r0, r3
 8003c04:	3714      	adds	r7, #20
 8003c06:	46bd      	mov	sp, r7
 8003c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c0c:	4770      	bx	lr

08003c0e <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003c0e:	b480      	push	{r7}
 8003c10:	b085      	sub	sp, #20
 8003c12:	af00      	add	r7, sp, #0
 8003c14:	6078      	str	r0, [r7, #4]
 8003c16:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003c1c:	683b      	ldr	r3, [r7, #0]
 8003c1e:	781b      	ldrb	r3, [r3, #0]
 8003c20:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8003c22:	683b      	ldr	r3, [r7, #0]
 8003c24:	785b      	ldrb	r3, [r3, #1]
 8003c26:	2b01      	cmp	r3, #1
 8003c28:	d128      	bne.n	8003c7c <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003c2a:	68bb      	ldr	r3, [r7, #8]
 8003c2c:	015a      	lsls	r2, r3, #5
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	4413      	add	r3, r2
 8003c32:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	68ba      	ldr	r2, [r7, #8]
 8003c3a:	0151      	lsls	r1, r2, #5
 8003c3c:	68fa      	ldr	r2, [r7, #12]
 8003c3e:	440a      	add	r2, r1
 8003c40:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003c44:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003c48:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8003c4a:	683b      	ldr	r3, [r7, #0]
 8003c4c:	78db      	ldrb	r3, [r3, #3]
 8003c4e:	2b03      	cmp	r3, #3
 8003c50:	d003      	beq.n	8003c5a <USB_EPClearStall+0x4c>
 8003c52:	683b      	ldr	r3, [r7, #0]
 8003c54:	78db      	ldrb	r3, [r3, #3]
 8003c56:	2b02      	cmp	r3, #2
 8003c58:	d138      	bne.n	8003ccc <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8003c5a:	68bb      	ldr	r3, [r7, #8]
 8003c5c:	015a      	lsls	r2, r3, #5
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	4413      	add	r3, r2
 8003c62:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	68ba      	ldr	r2, [r7, #8]
 8003c6a:	0151      	lsls	r1, r2, #5
 8003c6c:	68fa      	ldr	r2, [r7, #12]
 8003c6e:	440a      	add	r2, r1
 8003c70:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003c74:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c78:	6013      	str	r3, [r2, #0]
 8003c7a:	e027      	b.n	8003ccc <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003c7c:	68bb      	ldr	r3, [r7, #8]
 8003c7e:	015a      	lsls	r2, r3, #5
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	4413      	add	r3, r2
 8003c84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	68ba      	ldr	r2, [r7, #8]
 8003c8c:	0151      	lsls	r1, r2, #5
 8003c8e:	68fa      	ldr	r2, [r7, #12]
 8003c90:	440a      	add	r2, r1
 8003c92:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003c96:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003c9a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8003c9c:	683b      	ldr	r3, [r7, #0]
 8003c9e:	78db      	ldrb	r3, [r3, #3]
 8003ca0:	2b03      	cmp	r3, #3
 8003ca2:	d003      	beq.n	8003cac <USB_EPClearStall+0x9e>
 8003ca4:	683b      	ldr	r3, [r7, #0]
 8003ca6:	78db      	ldrb	r3, [r3, #3]
 8003ca8:	2b02      	cmp	r3, #2
 8003caa:	d10f      	bne.n	8003ccc <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8003cac:	68bb      	ldr	r3, [r7, #8]
 8003cae:	015a      	lsls	r2, r3, #5
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	4413      	add	r3, r2
 8003cb4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	68ba      	ldr	r2, [r7, #8]
 8003cbc:	0151      	lsls	r1, r2, #5
 8003cbe:	68fa      	ldr	r2, [r7, #12]
 8003cc0:	440a      	add	r2, r1
 8003cc2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003cc6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003cca:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8003ccc:	2300      	movs	r3, #0
}
 8003cce:	4618      	mov	r0, r3
 8003cd0:	3714      	adds	r7, #20
 8003cd2:	46bd      	mov	sp, r7
 8003cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd8:	4770      	bx	lr

08003cda <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8003cda:	b480      	push	{r7}
 8003cdc:	b085      	sub	sp, #20
 8003cde:	af00      	add	r7, sp, #0
 8003ce0:	6078      	str	r0, [r7, #4]
 8003ce2:	460b      	mov	r3, r1
 8003ce4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	68fa      	ldr	r2, [r7, #12]
 8003cf4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003cf8:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8003cfc:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d04:	681a      	ldr	r2, [r3, #0]
 8003d06:	78fb      	ldrb	r3, [r7, #3]
 8003d08:	011b      	lsls	r3, r3, #4
 8003d0a:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8003d0e:	68f9      	ldr	r1, [r7, #12]
 8003d10:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003d14:	4313      	orrs	r3, r2
 8003d16:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8003d18:	2300      	movs	r3, #0
}
 8003d1a:	4618      	mov	r0, r3
 8003d1c:	3714      	adds	r7, #20
 8003d1e:	46bd      	mov	sp, r7
 8003d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d24:	4770      	bx	lr

08003d26 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8003d26:	b480      	push	{r7}
 8003d28:	b085      	sub	sp, #20
 8003d2a:	af00      	add	r7, sp, #0
 8003d2c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	68fa      	ldr	r2, [r7, #12]
 8003d3c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8003d40:	f023 0303 	bic.w	r3, r3, #3
 8003d44:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d4c:	685b      	ldr	r3, [r3, #4]
 8003d4e:	68fa      	ldr	r2, [r7, #12]
 8003d50:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003d54:	f023 0302 	bic.w	r3, r3, #2
 8003d58:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8003d5a:	2300      	movs	r3, #0
}
 8003d5c:	4618      	mov	r0, r3
 8003d5e:	3714      	adds	r7, #20
 8003d60:	46bd      	mov	sp, r7
 8003d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d66:	4770      	bx	lr

08003d68 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8003d68:	b480      	push	{r7}
 8003d6a:	b085      	sub	sp, #20
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	68fa      	ldr	r2, [r7, #12]
 8003d7e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8003d82:	f023 0303 	bic.w	r3, r3, #3
 8003d86:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d8e:	685b      	ldr	r3, [r3, #4]
 8003d90:	68fa      	ldr	r2, [r7, #12]
 8003d92:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003d96:	f043 0302 	orr.w	r3, r3, #2
 8003d9a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8003d9c:	2300      	movs	r3, #0
}
 8003d9e:	4618      	mov	r0, r3
 8003da0:	3714      	adds	r7, #20
 8003da2:	46bd      	mov	sp, r7
 8003da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da8:	4770      	bx	lr

08003daa <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8003daa:	b480      	push	{r7}
 8003dac:	b085      	sub	sp, #20
 8003dae:	af00      	add	r7, sp, #0
 8003db0:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	695b      	ldr	r3, [r3, #20]
 8003db6:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	699b      	ldr	r3, [r3, #24]
 8003dbc:	68fa      	ldr	r2, [r7, #12]
 8003dbe:	4013      	ands	r3, r2
 8003dc0:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8003dc2:	68fb      	ldr	r3, [r7, #12]
}
 8003dc4:	4618      	mov	r0, r3
 8003dc6:	3714      	adds	r7, #20
 8003dc8:	46bd      	mov	sp, r7
 8003dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dce:	4770      	bx	lr

08003dd0 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8003dd0:	b480      	push	{r7}
 8003dd2:	b085      	sub	sp, #20
 8003dd4:	af00      	add	r7, sp, #0
 8003dd6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003de2:	699b      	ldr	r3, [r3, #24]
 8003de4:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003dec:	69db      	ldr	r3, [r3, #28]
 8003dee:	68ba      	ldr	r2, [r7, #8]
 8003df0:	4013      	ands	r3, r2
 8003df2:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8003df4:	68bb      	ldr	r3, [r7, #8]
 8003df6:	0c1b      	lsrs	r3, r3, #16
}
 8003df8:	4618      	mov	r0, r3
 8003dfa:	3714      	adds	r7, #20
 8003dfc:	46bd      	mov	sp, r7
 8003dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e02:	4770      	bx	lr

08003e04 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8003e04:	b480      	push	{r7}
 8003e06:	b085      	sub	sp, #20
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e16:	699b      	ldr	r3, [r3, #24]
 8003e18:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e20:	69db      	ldr	r3, [r3, #28]
 8003e22:	68ba      	ldr	r2, [r7, #8]
 8003e24:	4013      	ands	r3, r2
 8003e26:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8003e28:	68bb      	ldr	r3, [r7, #8]
 8003e2a:	b29b      	uxth	r3, r3
}
 8003e2c:	4618      	mov	r0, r3
 8003e2e:	3714      	adds	r7, #20
 8003e30:	46bd      	mov	sp, r7
 8003e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e36:	4770      	bx	lr

08003e38 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8003e38:	b480      	push	{r7}
 8003e3a:	b085      	sub	sp, #20
 8003e3c:	af00      	add	r7, sp, #0
 8003e3e:	6078      	str	r0, [r7, #4]
 8003e40:	460b      	mov	r3, r1
 8003e42:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8003e48:	78fb      	ldrb	r3, [r7, #3]
 8003e4a:	015a      	lsls	r2, r3, #5
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	4413      	add	r3, r2
 8003e50:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e54:	689b      	ldr	r3, [r3, #8]
 8003e56:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e5e:	695b      	ldr	r3, [r3, #20]
 8003e60:	68ba      	ldr	r2, [r7, #8]
 8003e62:	4013      	ands	r3, r2
 8003e64:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8003e66:	68bb      	ldr	r3, [r7, #8]
}
 8003e68:	4618      	mov	r0, r3
 8003e6a:	3714      	adds	r7, #20
 8003e6c:	46bd      	mov	sp, r7
 8003e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e72:	4770      	bx	lr

08003e74 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8003e74:	b480      	push	{r7}
 8003e76:	b087      	sub	sp, #28
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	6078      	str	r0, [r7, #4]
 8003e7c:	460b      	mov	r3, r1
 8003e7e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8003e84:	697b      	ldr	r3, [r7, #20]
 8003e86:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e8a:	691b      	ldr	r3, [r3, #16]
 8003e8c:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8003e8e:	697b      	ldr	r3, [r7, #20]
 8003e90:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e96:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8003e98:	78fb      	ldrb	r3, [r7, #3]
 8003e9a:	f003 030f 	and.w	r3, r3, #15
 8003e9e:	68fa      	ldr	r2, [r7, #12]
 8003ea0:	fa22 f303 	lsr.w	r3, r2, r3
 8003ea4:	01db      	lsls	r3, r3, #7
 8003ea6:	b2db      	uxtb	r3, r3
 8003ea8:	693a      	ldr	r2, [r7, #16]
 8003eaa:	4313      	orrs	r3, r2
 8003eac:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8003eae:	78fb      	ldrb	r3, [r7, #3]
 8003eb0:	015a      	lsls	r2, r3, #5
 8003eb2:	697b      	ldr	r3, [r7, #20]
 8003eb4:	4413      	add	r3, r2
 8003eb6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003eba:	689b      	ldr	r3, [r3, #8]
 8003ebc:	693a      	ldr	r2, [r7, #16]
 8003ebe:	4013      	ands	r3, r2
 8003ec0:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8003ec2:	68bb      	ldr	r3, [r7, #8]
}
 8003ec4:	4618      	mov	r0, r3
 8003ec6:	371c      	adds	r7, #28
 8003ec8:	46bd      	mov	sp, r7
 8003eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ece:	4770      	bx	lr

08003ed0 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8003ed0:	b480      	push	{r7}
 8003ed2:	b083      	sub	sp, #12
 8003ed4:	af00      	add	r7, sp, #0
 8003ed6:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	695b      	ldr	r3, [r3, #20]
 8003edc:	f003 0301 	and.w	r3, r3, #1
}
 8003ee0:	4618      	mov	r0, r3
 8003ee2:	370c      	adds	r7, #12
 8003ee4:	46bd      	mov	sp, r7
 8003ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eea:	4770      	bx	lr

08003eec <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8003eec:	b480      	push	{r7}
 8003eee:	b085      	sub	sp, #20
 8003ef0:	af00      	add	r7, sp, #0
 8003ef2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	68fa      	ldr	r2, [r7, #12]
 8003f02:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003f06:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8003f0a:	f023 0307 	bic.w	r3, r3, #7
 8003f0e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f16:	685b      	ldr	r3, [r3, #4]
 8003f18:	68fa      	ldr	r2, [r7, #12]
 8003f1a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003f1e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f22:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8003f24:	2300      	movs	r3, #0
}
 8003f26:	4618      	mov	r0, r3
 8003f28:	3714      	adds	r7, #20
 8003f2a:	46bd      	mov	sp, r7
 8003f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f30:	4770      	bx	lr
	...

08003f34 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8003f34:	b480      	push	{r7}
 8003f36:	b087      	sub	sp, #28
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	60f8      	str	r0, [r7, #12]
 8003f3c:	460b      	mov	r3, r1
 8003f3e:	607a      	str	r2, [r7, #4]
 8003f40:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	333c      	adds	r3, #60	; 0x3c
 8003f4a:	3304      	adds	r3, #4
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8003f50:	693b      	ldr	r3, [r7, #16]
 8003f52:	4a26      	ldr	r2, [pc, #152]	; (8003fec <USB_EP0_OutStart+0xb8>)
 8003f54:	4293      	cmp	r3, r2
 8003f56:	d90a      	bls.n	8003f6e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003f58:	697b      	ldr	r3, [r7, #20]
 8003f5a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003f64:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003f68:	d101      	bne.n	8003f6e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8003f6a:	2300      	movs	r3, #0
 8003f6c:	e037      	b.n	8003fde <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8003f6e:	697b      	ldr	r3, [r7, #20]
 8003f70:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f74:	461a      	mov	r2, r3
 8003f76:	2300      	movs	r3, #0
 8003f78:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8003f7a:	697b      	ldr	r3, [r7, #20]
 8003f7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f80:	691b      	ldr	r3, [r3, #16]
 8003f82:	697a      	ldr	r2, [r7, #20]
 8003f84:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003f88:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003f8c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8003f8e:	697b      	ldr	r3, [r7, #20]
 8003f90:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f94:	691b      	ldr	r3, [r3, #16]
 8003f96:	697a      	ldr	r2, [r7, #20]
 8003f98:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003f9c:	f043 0318 	orr.w	r3, r3, #24
 8003fa0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8003fa2:	697b      	ldr	r3, [r7, #20]
 8003fa4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003fa8:	691b      	ldr	r3, [r3, #16]
 8003faa:	697a      	ldr	r2, [r7, #20]
 8003fac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003fb0:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8003fb4:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8003fb6:	7afb      	ldrb	r3, [r7, #11]
 8003fb8:	2b01      	cmp	r3, #1
 8003fba:	d10f      	bne.n	8003fdc <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8003fbc:	697b      	ldr	r3, [r7, #20]
 8003fbe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003fc2:	461a      	mov	r2, r3
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8003fc8:	697b      	ldr	r3, [r7, #20]
 8003fca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	697a      	ldr	r2, [r7, #20]
 8003fd2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003fd6:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8003fda:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8003fdc:	2300      	movs	r3, #0
}
 8003fde:	4618      	mov	r0, r3
 8003fe0:	371c      	adds	r7, #28
 8003fe2:	46bd      	mov	sp, r7
 8003fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe8:	4770      	bx	lr
 8003fea:	bf00      	nop
 8003fec:	4f54300a 	.word	0x4f54300a

08003ff0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8003ff0:	b480      	push	{r7}
 8003ff2:	b085      	sub	sp, #20
 8003ff4:	af00      	add	r7, sp, #0
 8003ff6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003ff8:	2300      	movs	r3, #0
 8003ffa:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	3301      	adds	r3, #1
 8004000:	60fb      	str	r3, [r7, #12]
 8004002:	4a13      	ldr	r2, [pc, #76]	; (8004050 <USB_CoreReset+0x60>)
 8004004:	4293      	cmp	r3, r2
 8004006:	d901      	bls.n	800400c <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 8004008:	2303      	movs	r3, #3
 800400a:	e01a      	b.n	8004042 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	691b      	ldr	r3, [r3, #16]
 8004010:	2b00      	cmp	r3, #0
 8004012:	daf3      	bge.n	8003ffc <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004014:	2300      	movs	r3, #0
 8004016:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	691b      	ldr	r3, [r3, #16]
 800401c:	f043 0201 	orr.w	r2, r3, #1
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	3301      	adds	r3, #1
 8004028:	60fb      	str	r3, [r7, #12]
 800402a:	4a09      	ldr	r2, [pc, #36]	; (8004050 <USB_CoreReset+0x60>)
 800402c:	4293      	cmp	r3, r2
 800402e:	d901      	bls.n	8004034 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 8004030:	2303      	movs	r3, #3
 8004032:	e006      	b.n	8004042 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	691b      	ldr	r3, [r3, #16]
 8004038:	f003 0301 	and.w	r3, r3, #1
 800403c:	2b01      	cmp	r3, #1
 800403e:	d0f1      	beq.n	8004024 <USB_CoreReset+0x34>

  return HAL_OK;
 8004040:	2300      	movs	r3, #0
}
 8004042:	4618      	mov	r0, r3
 8004044:	3714      	adds	r7, #20
 8004046:	46bd      	mov	sp, r7
 8004048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800404c:	4770      	bx	lr
 800404e:	bf00      	nop
 8004050:	00030d40 	.word	0x00030d40

08004054 <USBD_MSC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004054:	b580      	push	{r7, lr}
 8004056:	b084      	sub	sp, #16
 8004058:	af00      	add	r7, sp, #0
 800405a:	6078      	str	r0, [r7, #4]
 800405c:	460b      	mov	r3, r1
 800405e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_MSC_BOT_HandleTypeDef *hmsc;

  hmsc = USBD_malloc(sizeof(USBD_MSC_BOT_HandleTypeDef));
 8004060:	f44f 701d 	mov.w	r0, #628	; 0x274
 8004064:	f003 fbae 	bl	80077c4 <USBD_static_malloc>
 8004068:	60f8      	str	r0, [r7, #12]

  if (hmsc == NULL)
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	2b00      	cmp	r3, #0
 800406e:	d105      	bne.n	800407c <USBD_MSC_Init+0x28>
  {
    pdev->pClassData = NULL;
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	2200      	movs	r2, #0
 8004074:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8004078:	2302      	movs	r3, #2
 800407a:	e034      	b.n	80040e6 <USBD_MSC_Init+0x92>
  }

  pdev->pClassData = (void *)hmsc;
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	68fa      	ldr	r2, [r7, #12]
 8004080:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	7c1b      	ldrb	r3, [r3, #16]
 8004088:	2b00      	cmp	r3, #0
 800408a:	d115      	bne.n	80040b8 <USBD_MSC_Init+0x64>
  {
    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, MSC_EPOUT_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 800408c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004090:	2202      	movs	r2, #2
 8004092:	2101      	movs	r1, #1
 8004094:	6878      	ldr	r0, [r7, #4]
 8004096:	f003 fa52 	bl	800753e <USBD_LL_OpenEP>
    pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 1U;
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	2201      	movs	r2, #1
 800409e:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, MSC_EPIN_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 80040a2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80040a6:	2202      	movs	r2, #2
 80040a8:	2181      	movs	r1, #129	; 0x81
 80040aa:	6878      	ldr	r0, [r7, #4]
 80040ac:	f003 fa47 	bl	800753e <USBD_LL_OpenEP>
    pdev->ep_in[MSC_EPIN_ADDR & 0xFU].is_used = 1U;
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	2201      	movs	r2, #1
 80040b4:	871a      	strh	r2, [r3, #56]	; 0x38
 80040b6:	e012      	b.n	80040de <USBD_MSC_Init+0x8a>
  }
  else
  {
    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, MSC_EPOUT_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 80040b8:	2340      	movs	r3, #64	; 0x40
 80040ba:	2202      	movs	r2, #2
 80040bc:	2101      	movs	r1, #1
 80040be:	6878      	ldr	r0, [r7, #4]
 80040c0:	f003 fa3d 	bl	800753e <USBD_LL_OpenEP>
    pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 1U;
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	2201      	movs	r2, #1
 80040c8:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, MSC_EPIN_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 80040cc:	2340      	movs	r3, #64	; 0x40
 80040ce:	2202      	movs	r2, #2
 80040d0:	2181      	movs	r1, #129	; 0x81
 80040d2:	6878      	ldr	r0, [r7, #4]
 80040d4:	f003 fa33 	bl	800753e <USBD_LL_OpenEP>
    pdev->ep_in[MSC_EPIN_ADDR & 0xFU].is_used = 1U;
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	2201      	movs	r2, #1
 80040dc:	871a      	strh	r2, [r3, #56]	; 0x38
  }

  /* Init the BOT  layer */
  MSC_BOT_Init(pdev);
 80040de:	6878      	ldr	r0, [r7, #4]
 80040e0:	f000 f999 	bl	8004416 <MSC_BOT_Init>

  return (uint8_t)USBD_OK;
 80040e4:	2300      	movs	r3, #0
}
 80040e6:	4618      	mov	r0, r3
 80040e8:	3710      	adds	r7, #16
 80040ea:	46bd      	mov	sp, r7
 80040ec:	bd80      	pop	{r7, pc}

080040ee <USBD_MSC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80040ee:	b580      	push	{r7, lr}
 80040f0:	b082      	sub	sp, #8
 80040f2:	af00      	add	r7, sp, #0
 80040f4:	6078      	str	r0, [r7, #4]
 80040f6:	460b      	mov	r3, r1
 80040f8:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close MSC EPs */
  (void)USBD_LL_CloseEP(pdev, MSC_EPOUT_ADDR);
 80040fa:	2101      	movs	r1, #1
 80040fc:	6878      	ldr	r0, [r7, #4]
 80040fe:	f003 fa44 	bl	800758a <USBD_LL_CloseEP>
  pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 0U;
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	2200      	movs	r2, #0
 8004106:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, MSC_EPIN_ADDR);
 800410a:	2181      	movs	r1, #129	; 0x81
 800410c:	6878      	ldr	r0, [r7, #4]
 800410e:	f003 fa3c 	bl	800758a <USBD_LL_CloseEP>
  pdev->ep_in[MSC_EPIN_ADDR & 0xFU].is_used = 0U;
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	2200      	movs	r2, #0
 8004116:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Free MSC Class Resources */
  if (pdev->pClassData != NULL)
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800411e:	2b00      	cmp	r3, #0
 8004120:	d00c      	beq.n	800413c <USBD_MSC_DeInit+0x4e>
  {
    /* De-Init the BOT layer */
    MSC_BOT_DeInit(pdev);
 8004122:	6878      	ldr	r0, [r7, #4]
 8004124:	f000 f9d5 	bl	80044d2 <MSC_BOT_DeInit>

    (void)USBD_free(pdev->pClassData);
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800412e:	4618      	mov	r0, r3
 8004130:	f003 fb56 	bl	80077e0 <USBD_static_free>
    pdev->pClassData = NULL;
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	2200      	movs	r2, #0
 8004138:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800413c:	2300      	movs	r3, #0
}
 800413e:	4618      	mov	r0, r3
 8004140:	3708      	adds	r7, #8
 8004142:	46bd      	mov	sp, r7
 8004144:	bd80      	pop	{r7, pc}
	...

08004148 <USBD_MSC_Setup>:
  * @param  pdev: device instance
  * @param  req: USB request
  * @retval status
  */
uint8_t USBD_MSC_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8004148:	b580      	push	{r7, lr}
 800414a:	b086      	sub	sp, #24
 800414c:	af00      	add	r7, sp, #0
 800414e:	6078      	str	r0, [r7, #4]
 8004150:	6039      	str	r1, [r7, #0]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004158:	613b      	str	r3, [r7, #16]
  USBD_StatusTypeDef ret = USBD_OK;
 800415a:	2300      	movs	r3, #0
 800415c:	75fb      	strb	r3, [r7, #23]
  uint16_t status_info = 0U;
 800415e:	2300      	movs	r3, #0
 8004160:	81fb      	strh	r3, [r7, #14]

  if (hmsc == NULL)
 8004162:	693b      	ldr	r3, [r7, #16]
 8004164:	2b00      	cmp	r3, #0
 8004166:	d101      	bne.n	800416c <USBD_MSC_Setup+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8004168:	2303      	movs	r3, #3
 800416a:	e0db      	b.n	8004324 <USBD_MSC_Setup+0x1dc>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800416c:	683b      	ldr	r3, [r7, #0]
 800416e:	781b      	ldrb	r3, [r3, #0]
 8004170:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8004174:	2b00      	cmp	r3, #0
 8004176:	d04e      	beq.n	8004216 <USBD_MSC_Setup+0xce>
 8004178:	2b20      	cmp	r3, #32
 800417a:	f040 80cb 	bne.w	8004314 <USBD_MSC_Setup+0x1cc>
  {
    /* Class request */
    case USB_REQ_TYPE_CLASS:
      switch (req->bRequest)
 800417e:	683b      	ldr	r3, [r7, #0]
 8004180:	785b      	ldrb	r3, [r3, #1]
 8004182:	2bfe      	cmp	r3, #254	; 0xfe
 8004184:	d002      	beq.n	800418c <USBD_MSC_Setup+0x44>
 8004186:	2bff      	cmp	r3, #255	; 0xff
 8004188:	d025      	beq.n	80041d6 <USBD_MSC_Setup+0x8e>
 800418a:	e03c      	b.n	8004206 <USBD_MSC_Setup+0xbe>
      {
        case BOT_GET_MAX_LUN:
          if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 800418c:	683b      	ldr	r3, [r7, #0]
 800418e:	885b      	ldrh	r3, [r3, #2]
 8004190:	2b00      	cmp	r3, #0
 8004192:	d119      	bne.n	80041c8 <USBD_MSC_Setup+0x80>
 8004194:	683b      	ldr	r3, [r7, #0]
 8004196:	88db      	ldrh	r3, [r3, #6]
 8004198:	2b01      	cmp	r3, #1
 800419a:	d115      	bne.n	80041c8 <USBD_MSC_Setup+0x80>
              ((req->bmRequest & 0x80U) == 0x80U))
 800419c:	683b      	ldr	r3, [r7, #0]
 800419e:	781b      	ldrb	r3, [r3, #0]
 80041a0:	b25b      	sxtb	r3, r3
          if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	da10      	bge.n	80041c8 <USBD_MSC_Setup+0x80>
          {
            hmsc->max_lun = (uint32_t)((USBD_StorageTypeDef *)pdev->pUserData)->GetMaxLun();
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80041ac:	699b      	ldr	r3, [r3, #24]
 80041ae:	4798      	blx	r3
 80041b0:	4603      	mov	r3, r0
 80041b2:	461a      	mov	r2, r3
 80041b4:	693b      	ldr	r3, [r7, #16]
 80041b6:	601a      	str	r2, [r3, #0]
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hmsc->max_lun, 1U);
 80041b8:	693b      	ldr	r3, [r7, #16]
 80041ba:	2201      	movs	r2, #1
 80041bc:	4619      	mov	r1, r3
 80041be:	6878      	ldr	r0, [r7, #4]
 80041c0:	f002 fe13 	bl	8006dea <USBD_CtlSendData>
 80041c4:	bf00      	nop
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80041c6:	e025      	b.n	8004214 <USBD_MSC_Setup+0xcc>
            USBD_CtlError(pdev, req);
 80041c8:	6839      	ldr	r1, [r7, #0]
 80041ca:	6878      	ldr	r0, [r7, #4]
 80041cc:	f002 fd9c 	bl	8006d08 <USBD_CtlError>
            ret = USBD_FAIL;
 80041d0:	2303      	movs	r3, #3
 80041d2:	75fb      	strb	r3, [r7, #23]
          break;
 80041d4:	e01e      	b.n	8004214 <USBD_MSC_Setup+0xcc>

        case BOT_RESET :
          if ((req->wValue  == 0U) && (req->wLength == 0U) &&
 80041d6:	683b      	ldr	r3, [r7, #0]
 80041d8:	885b      	ldrh	r3, [r3, #2]
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d10c      	bne.n	80041f8 <USBD_MSC_Setup+0xb0>
 80041de:	683b      	ldr	r3, [r7, #0]
 80041e0:	88db      	ldrh	r3, [r3, #6]
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d108      	bne.n	80041f8 <USBD_MSC_Setup+0xb0>
              ((req->bmRequest & 0x80U) != 0x80U))
 80041e6:	683b      	ldr	r3, [r7, #0]
 80041e8:	781b      	ldrb	r3, [r3, #0]
 80041ea:	b25b      	sxtb	r3, r3
          if ((req->wValue  == 0U) && (req->wLength == 0U) &&
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	db03      	blt.n	80041f8 <USBD_MSC_Setup+0xb0>
          {
            MSC_BOT_Reset(pdev);
 80041f0:	6878      	ldr	r0, [r7, #4]
 80041f2:	f000 f948 	bl	8004486 <MSC_BOT_Reset>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80041f6:	e00d      	b.n	8004214 <USBD_MSC_Setup+0xcc>
            USBD_CtlError(pdev, req);
 80041f8:	6839      	ldr	r1, [r7, #0]
 80041fa:	6878      	ldr	r0, [r7, #4]
 80041fc:	f002 fd84 	bl	8006d08 <USBD_CtlError>
            ret = USBD_FAIL;
 8004200:	2303      	movs	r3, #3
 8004202:	75fb      	strb	r3, [r7, #23]
          break;
 8004204:	e006      	b.n	8004214 <USBD_MSC_Setup+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8004206:	6839      	ldr	r1, [r7, #0]
 8004208:	6878      	ldr	r0, [r7, #4]
 800420a:	f002 fd7d 	bl	8006d08 <USBD_CtlError>
          ret = USBD_FAIL;
 800420e:	2303      	movs	r3, #3
 8004210:	75fb      	strb	r3, [r7, #23]
          break;
 8004212:	bf00      	nop
      }
      break;
 8004214:	e085      	b.n	8004322 <USBD_MSC_Setup+0x1da>
    /* Interface & Endpoint request */
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8004216:	683b      	ldr	r3, [r7, #0]
 8004218:	785b      	ldrb	r3, [r3, #1]
 800421a:	2b0b      	cmp	r3, #11
 800421c:	d871      	bhi.n	8004302 <USBD_MSC_Setup+0x1ba>
 800421e:	a201      	add	r2, pc, #4	; (adr r2, 8004224 <USBD_MSC_Setup+0xdc>)
 8004220:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004224:	08004255 	.word	0x08004255
 8004228:	080042d1 	.word	0x080042d1
 800422c:	08004303 	.word	0x08004303
 8004230:	08004303 	.word	0x08004303
 8004234:	08004303 	.word	0x08004303
 8004238:	08004303 	.word	0x08004303
 800423c:	08004303 	.word	0x08004303
 8004240:	08004303 	.word	0x08004303
 8004244:	08004303 	.word	0x08004303
 8004248:	08004303 	.word	0x08004303
 800424c:	0800427f 	.word	0x0800427f
 8004250:	080042a9 	.word	0x080042a9
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800425a:	b2db      	uxtb	r3, r3
 800425c:	2b03      	cmp	r3, #3
 800425e:	d107      	bne.n	8004270 <USBD_MSC_Setup+0x128>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8004260:	f107 030e 	add.w	r3, r7, #14
 8004264:	2202      	movs	r2, #2
 8004266:	4619      	mov	r1, r3
 8004268:	6878      	ldr	r0, [r7, #4]
 800426a:	f002 fdbe 	bl	8006dea <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800426e:	e050      	b.n	8004312 <USBD_MSC_Setup+0x1ca>
            USBD_CtlError(pdev, req);
 8004270:	6839      	ldr	r1, [r7, #0]
 8004272:	6878      	ldr	r0, [r7, #4]
 8004274:	f002 fd48 	bl	8006d08 <USBD_CtlError>
            ret = USBD_FAIL;
 8004278:	2303      	movs	r3, #3
 800427a:	75fb      	strb	r3, [r7, #23]
          break;
 800427c:	e049      	b.n	8004312 <USBD_MSC_Setup+0x1ca>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004284:	b2db      	uxtb	r3, r3
 8004286:	2b03      	cmp	r3, #3
 8004288:	d107      	bne.n	800429a <USBD_MSC_Setup+0x152>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hmsc->interface, 1U);
 800428a:	693b      	ldr	r3, [r7, #16]
 800428c:	3304      	adds	r3, #4
 800428e:	2201      	movs	r2, #1
 8004290:	4619      	mov	r1, r3
 8004292:	6878      	ldr	r0, [r7, #4]
 8004294:	f002 fda9 	bl	8006dea <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8004298:	e03b      	b.n	8004312 <USBD_MSC_Setup+0x1ca>
            USBD_CtlError(pdev, req);
 800429a:	6839      	ldr	r1, [r7, #0]
 800429c:	6878      	ldr	r0, [r7, #4]
 800429e:	f002 fd33 	bl	8006d08 <USBD_CtlError>
            ret = USBD_FAIL;
 80042a2:	2303      	movs	r3, #3
 80042a4:	75fb      	strb	r3, [r7, #23]
          break;
 80042a6:	e034      	b.n	8004312 <USBD_MSC_Setup+0x1ca>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80042ae:	b2db      	uxtb	r3, r3
 80042b0:	2b03      	cmp	r3, #3
 80042b2:	d106      	bne.n	80042c2 <USBD_MSC_Setup+0x17a>
          {
            hmsc->interface = (uint8_t)(req->wValue);
 80042b4:	683b      	ldr	r3, [r7, #0]
 80042b6:	885b      	ldrh	r3, [r3, #2]
 80042b8:	b2db      	uxtb	r3, r3
 80042ba:	461a      	mov	r2, r3
 80042bc:	693b      	ldr	r3, [r7, #16]
 80042be:	605a      	str	r2, [r3, #4]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80042c0:	e027      	b.n	8004312 <USBD_MSC_Setup+0x1ca>
            USBD_CtlError(pdev, req);
 80042c2:	6839      	ldr	r1, [r7, #0]
 80042c4:	6878      	ldr	r0, [r7, #4]
 80042c6:	f002 fd1f 	bl	8006d08 <USBD_CtlError>
            ret = USBD_FAIL;
 80042ca:	2303      	movs	r3, #3
 80042cc:	75fb      	strb	r3, [r7, #23]
          break;
 80042ce:	e020      	b.n	8004312 <USBD_MSC_Setup+0x1ca>

        case USB_REQ_CLEAR_FEATURE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80042d6:	b2db      	uxtb	r3, r3
 80042d8:	2b03      	cmp	r3, #3
 80042da:	d119      	bne.n	8004310 <USBD_MSC_Setup+0x1c8>
          {
            if (req->wValue == USB_FEATURE_EP_HALT)
 80042dc:	683b      	ldr	r3, [r7, #0]
 80042de:	885b      	ldrh	r3, [r3, #2]
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d115      	bne.n	8004310 <USBD_MSC_Setup+0x1c8>
            {
              /* Flush the FIFO */
              (void)USBD_LL_FlushEP(pdev, (uint8_t)req->wIndex);
 80042e4:	683b      	ldr	r3, [r7, #0]
 80042e6:	889b      	ldrh	r3, [r3, #4]
 80042e8:	b2db      	uxtb	r3, r3
 80042ea:	4619      	mov	r1, r3
 80042ec:	6878      	ldr	r0, [r7, #4]
 80042ee:	f003 f96b 	bl	80075c8 <USBD_LL_FlushEP>

              /* Handle BOT error */
              MSC_BOT_CplClrFeature(pdev, (uint8_t)req->wIndex);
 80042f2:	683b      	ldr	r3, [r7, #0]
 80042f4:	889b      	ldrh	r3, [r3, #4]
 80042f6:	b2db      	uxtb	r3, r3
 80042f8:	4619      	mov	r1, r3
 80042fa:	6878      	ldr	r0, [r7, #4]
 80042fc:	f000 fa82 	bl	8004804 <MSC_BOT_CplClrFeature>
            }
          }
          break;
 8004300:	e006      	b.n	8004310 <USBD_MSC_Setup+0x1c8>

        default:
          USBD_CtlError(pdev, req);
 8004302:	6839      	ldr	r1, [r7, #0]
 8004304:	6878      	ldr	r0, [r7, #4]
 8004306:	f002 fcff 	bl	8006d08 <USBD_CtlError>
          ret = USBD_FAIL;
 800430a:	2303      	movs	r3, #3
 800430c:	75fb      	strb	r3, [r7, #23]
          break;
 800430e:	e000      	b.n	8004312 <USBD_MSC_Setup+0x1ca>
          break;
 8004310:	bf00      	nop
      }
      break;
 8004312:	e006      	b.n	8004322 <USBD_MSC_Setup+0x1da>

    default:
      USBD_CtlError(pdev, req);
 8004314:	6839      	ldr	r1, [r7, #0]
 8004316:	6878      	ldr	r0, [r7, #4]
 8004318:	f002 fcf6 	bl	8006d08 <USBD_CtlError>
      ret = USBD_FAIL;
 800431c:	2303      	movs	r3, #3
 800431e:	75fb      	strb	r3, [r7, #23]
      break;
 8004320:	bf00      	nop
  }

  return (uint8_t)ret;
 8004322:	7dfb      	ldrb	r3, [r7, #23]
}
 8004324:	4618      	mov	r0, r3
 8004326:	3718      	adds	r7, #24
 8004328:	46bd      	mov	sp, r7
 800432a:	bd80      	pop	{r7, pc}

0800432c <USBD_MSC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
uint8_t USBD_MSC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800432c:	b580      	push	{r7, lr}
 800432e:	b082      	sub	sp, #8
 8004330:	af00      	add	r7, sp, #0
 8004332:	6078      	str	r0, [r7, #4]
 8004334:	460b      	mov	r3, r1
 8004336:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataIn(pdev, epnum);
 8004338:	78fb      	ldrb	r3, [r7, #3]
 800433a:	4619      	mov	r1, r3
 800433c:	6878      	ldr	r0, [r7, #4]
 800433e:	f000 f8dc 	bl	80044fa <MSC_BOT_DataIn>

  return (uint8_t)USBD_OK;
 8004342:	2300      	movs	r3, #0
}
 8004344:	4618      	mov	r0, r3
 8004346:	3708      	adds	r7, #8
 8004348:	46bd      	mov	sp, r7
 800434a:	bd80      	pop	{r7, pc}

0800434c <USBD_MSC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
uint8_t USBD_MSC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800434c:	b580      	push	{r7, lr}
 800434e:	b082      	sub	sp, #8
 8004350:	af00      	add	r7, sp, #0
 8004352:	6078      	str	r0, [r7, #4]
 8004354:	460b      	mov	r3, r1
 8004356:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataOut(pdev, epnum);
 8004358:	78fb      	ldrb	r3, [r7, #3]
 800435a:	4619      	mov	r1, r3
 800435c:	6878      	ldr	r0, [r7, #4]
 800435e:	f000 f902 	bl	8004566 <MSC_BOT_DataOut>

  return (uint8_t)USBD_OK;
 8004362:	2300      	movs	r3, #0
}
 8004364:	4618      	mov	r0, r3
 8004366:	3708      	adds	r7, #8
 8004368:	46bd      	mov	sp, r7
 800436a:	bd80      	pop	{r7, pc}

0800436c <USBD_MSC_GetHSCfgDesc>:
  *         return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetHSCfgDesc(uint16_t *length)
{
 800436c:	b480      	push	{r7}
 800436e:	b083      	sub	sp, #12
 8004370:	af00      	add	r7, sp, #0
 8004372:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_CfgHSDesc);
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	2220      	movs	r2, #32
 8004378:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_CfgHSDesc;
 800437a:	4b03      	ldr	r3, [pc, #12]	; (8004388 <USBD_MSC_GetHSCfgDesc+0x1c>)
}
 800437c:	4618      	mov	r0, r3
 800437e:	370c      	adds	r7, #12
 8004380:	46bd      	mov	sp, r7
 8004382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004386:	4770      	bx	lr
 8004388:	20000044 	.word	0x20000044

0800438c <USBD_MSC_GetFSCfgDesc>:
  *         return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetFSCfgDesc(uint16_t *length)
{
 800438c:	b480      	push	{r7}
 800438e:	b083      	sub	sp, #12
 8004390:	af00      	add	r7, sp, #0
 8004392:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_CfgFSDesc);
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	2220      	movs	r2, #32
 8004398:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_CfgFSDesc;
 800439a:	4b03      	ldr	r3, [pc, #12]	; (80043a8 <USBD_MSC_GetFSCfgDesc+0x1c>)
}
 800439c:	4618      	mov	r0, r3
 800439e:	370c      	adds	r7, #12
 80043a0:	46bd      	mov	sp, r7
 80043a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a6:	4770      	bx	lr
 80043a8:	20000064 	.word	0x20000064

080043ac <USBD_MSC_GetOtherSpeedCfgDesc>:
  *         return other speed configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80043ac:	b480      	push	{r7}
 80043ae:	b083      	sub	sp, #12
 80043b0:	af00      	add	r7, sp, #0
 80043b2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_OtherSpeedCfgDesc);
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	2220      	movs	r2, #32
 80043b8:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_OtherSpeedCfgDesc;
 80043ba:	4b03      	ldr	r3, [pc, #12]	; (80043c8 <USBD_MSC_GetOtherSpeedCfgDesc+0x1c>)
}
 80043bc:	4618      	mov	r0, r3
 80043be:	370c      	adds	r7, #12
 80043c0:	46bd      	mov	sp, r7
 80043c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c6:	4770      	bx	lr
 80043c8:	20000084 	.word	0x20000084

080043cc <USBD_MSC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80043cc:	b480      	push	{r7}
 80043ce:	b083      	sub	sp, #12
 80043d0:	af00      	add	r7, sp, #0
 80043d2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_DeviceQualifierDesc);
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	220a      	movs	r2, #10
 80043d8:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_DeviceQualifierDesc;
 80043da:	4b03      	ldr	r3, [pc, #12]	; (80043e8 <USBD_MSC_GetDeviceQualifierDescriptor+0x1c>)
}
 80043dc:	4618      	mov	r0, r3
 80043de:	370c      	adds	r7, #12
 80043e0:	46bd      	mov	sp, r7
 80043e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e6:	4770      	bx	lr
 80043e8:	200000a4 	.word	0x200000a4

080043ec <USBD_MSC_RegisterStorage>:
  * @brief  USBD_MSC_RegisterStorage
  * @param  fops: storage callback
  * @retval status
  */
uint8_t USBD_MSC_RegisterStorage(USBD_HandleTypeDef *pdev, USBD_StorageTypeDef *fops)
{
 80043ec:	b480      	push	{r7}
 80043ee:	b083      	sub	sp, #12
 80043f0:	af00      	add	r7, sp, #0
 80043f2:	6078      	str	r0, [r7, #4]
 80043f4:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80043f6:	683b      	ldr	r3, [r7, #0]
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d101      	bne.n	8004400 <USBD_MSC_RegisterStorage+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80043fc:	2303      	movs	r3, #3
 80043fe:	e004      	b.n	800440a <USBD_MSC_RegisterStorage+0x1e>
  }

  pdev->pUserData = fops;
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	683a      	ldr	r2, [r7, #0]
 8004404:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8004408:	2300      	movs	r3, #0
}
 800440a:	4618      	mov	r0, r3
 800440c:	370c      	adds	r7, #12
 800440e:	46bd      	mov	sp, r7
 8004410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004414:	4770      	bx	lr

08004416 <MSC_BOT_Init>:
  *         Initialize the BOT Process
  * @param  pdev: device instance
  * @retval None
  */
void MSC_BOT_Init(USBD_HandleTypeDef *pdev)
{
 8004416:	b580      	push	{r7, lr}
 8004418:	b084      	sub	sp, #16
 800441a:	af00      	add	r7, sp, #0
 800441c:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004424:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	2b00      	cmp	r3, #0
 800442a:	d028      	beq.n	800447e <MSC_BOT_Init+0x68>
  {
    return;
  }

  hmsc->bot_state = USBD_BOT_IDLE;
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	2200      	movs	r2, #0
 8004430:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_NORMAL;
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	2200      	movs	r2, #0
 8004436:	725a      	strb	r2, [r3, #9]

  hmsc->scsi_sense_tail = 0U;
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	2200      	movs	r2, #0
 800443c:	f883 2261 	strb.w	r2, [r3, #609]	; 0x261
  hmsc->scsi_sense_head = 0U;
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	2200      	movs	r2, #0
 8004444:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260
  hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	2200      	movs	r2, #0
 800444c:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262

  ((USBD_StorageTypeDef *)pdev->pUserData)->Init(0U);
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	2000      	movs	r0, #0
 800445a:	4798      	blx	r3

  (void)USBD_LL_FlushEP(pdev, MSC_EPOUT_ADDR);
 800445c:	2101      	movs	r1, #1
 800445e:	6878      	ldr	r0, [r7, #4]
 8004460:	f003 f8b2 	bl	80075c8 <USBD_LL_FlushEP>
  (void)USBD_LL_FlushEP(pdev, MSC_EPIN_ADDR);
 8004464:	2181      	movs	r1, #129	; 0x81
 8004466:	6878      	ldr	r0, [r7, #4]
 8004468:	f003 f8ae 	bl	80075c8 <USBD_LL_FlushEP>

  /* Prepare EP to Receive First BOT Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, (uint8_t *)&hmsc->cbw,
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	f503 7204 	add.w	r2, r3, #528	; 0x210
 8004472:	231f      	movs	r3, #31
 8004474:	2101      	movs	r1, #1
 8004476:	6878      	ldr	r0, [r7, #4]
 8004478:	f003 f96f 	bl	800775a <USBD_LL_PrepareReceive>
 800447c:	e000      	b.n	8004480 <MSC_BOT_Init+0x6a>
    return;
 800447e:	bf00      	nop
                               USBD_BOT_CBW_LENGTH);
}
 8004480:	3710      	adds	r7, #16
 8004482:	46bd      	mov	sp, r7
 8004484:	bd80      	pop	{r7, pc}

08004486 <MSC_BOT_Reset>:
  *         Reset the BOT Machine
  * @param  pdev: device instance
  * @retval  None
  */
void MSC_BOT_Reset(USBD_HandleTypeDef *pdev)
{
 8004486:	b580      	push	{r7, lr}
 8004488:	b084      	sub	sp, #16
 800448a:	af00      	add	r7, sp, #0
 800448c:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004494:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	2b00      	cmp	r3, #0
 800449a:	d016      	beq.n	80044ca <MSC_BOT_Reset+0x44>
  {
    return;
  }

  hmsc->bot_state  = USBD_BOT_IDLE;
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	2200      	movs	r2, #0
 80044a0:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_RECOVERY;
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	2201      	movs	r2, #1
 80044a6:	725a      	strb	r2, [r3, #9]

  (void)USBD_LL_ClearStallEP(pdev, MSC_EPIN_ADDR);
 80044a8:	2181      	movs	r1, #129	; 0x81
 80044aa:	6878      	ldr	r0, [r7, #4]
 80044ac:	f003 f8ca 	bl	8007644 <USBD_LL_ClearStallEP>
  (void)USBD_LL_ClearStallEP(pdev, MSC_EPOUT_ADDR);
 80044b0:	2101      	movs	r1, #1
 80044b2:	6878      	ldr	r0, [r7, #4]
 80044b4:	f003 f8c6 	bl	8007644 <USBD_LL_ClearStallEP>

  /* Prepare EP to Receive First BOT Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, (uint8_t *)&hmsc->cbw,
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	f503 7204 	add.w	r2, r3, #528	; 0x210
 80044be:	231f      	movs	r3, #31
 80044c0:	2101      	movs	r1, #1
 80044c2:	6878      	ldr	r0, [r7, #4]
 80044c4:	f003 f949 	bl	800775a <USBD_LL_PrepareReceive>
 80044c8:	e000      	b.n	80044cc <MSC_BOT_Reset+0x46>
    return;
 80044ca:	bf00      	nop
                               USBD_BOT_CBW_LENGTH);
}
 80044cc:	3710      	adds	r7, #16
 80044ce:	46bd      	mov	sp, r7
 80044d0:	bd80      	pop	{r7, pc}

080044d2 <MSC_BOT_DeInit>:
  *         DeInitialize the BOT Machine
  * @param  pdev: device instance
  * @retval None
  */
void MSC_BOT_DeInit(USBD_HandleTypeDef  *pdev)
{
 80044d2:	b480      	push	{r7}
 80044d4:	b085      	sub	sp, #20
 80044d6:	af00      	add	r7, sp, #0
 80044d8:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80044e0:	60fb      	str	r3, [r7, #12]

  if (hmsc != NULL)
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d002      	beq.n	80044ee <MSC_BOT_DeInit+0x1c>
  {
    hmsc->bot_state = USBD_BOT_IDLE;
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	2200      	movs	r2, #0
 80044ec:	721a      	strb	r2, [r3, #8]
  }
}
 80044ee:	bf00      	nop
 80044f0:	3714      	adds	r7, #20
 80044f2:	46bd      	mov	sp, r7
 80044f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f8:	4770      	bx	lr

080044fa <MSC_BOT_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval None
  */
void MSC_BOT_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80044fa:	b580      	push	{r7, lr}
 80044fc:	b084      	sub	sp, #16
 80044fe:	af00      	add	r7, sp, #0
 8004500:	6078      	str	r0, [r7, #4]
 8004502:	460b      	mov	r3, r1
 8004504:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800450c:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	2b00      	cmp	r3, #0
 8004512:	d020      	beq.n	8004556 <MSC_BOT_DataIn+0x5c>
  {
    return;
  }

  switch (hmsc->bot_state)
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	7a1b      	ldrb	r3, [r3, #8]
 8004518:	2b02      	cmp	r3, #2
 800451a:	d005      	beq.n	8004528 <MSC_BOT_DataIn+0x2e>
 800451c:	2b02      	cmp	r3, #2
 800451e:	db1c      	blt.n	800455a <MSC_BOT_DataIn+0x60>
 8004520:	3b03      	subs	r3, #3
 8004522:	2b01      	cmp	r3, #1
 8004524:	d819      	bhi.n	800455a <MSC_BOT_DataIn+0x60>
 8004526:	e011      	b.n	800454c <MSC_BOT_DataIn+0x52>
  {
    case USBD_BOT_DATA_IN:
      if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	f203 231f 	addw	r3, r3, #543	; 0x21f
 8004534:	461a      	mov	r2, r3
 8004536:	6878      	ldr	r0, [r7, #4]
 8004538:	f000 f992 	bl	8004860 <SCSI_ProcessCmd>
 800453c:	4603      	mov	r3, r0
 800453e:	2b00      	cmp	r3, #0
 8004540:	da0d      	bge.n	800455e <MSC_BOT_DataIn+0x64>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 8004542:	2101      	movs	r1, #1
 8004544:	6878      	ldr	r0, [r7, #4]
 8004546:	f000 f8fb 	bl	8004740 <MSC_BOT_SendCSW>
      }
      break;
 800454a:	e008      	b.n	800455e <MSC_BOT_DataIn+0x64>

    case USBD_BOT_SEND_DATA:
    case USBD_BOT_LAST_DATA_IN:
      MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 800454c:	2100      	movs	r1, #0
 800454e:	6878      	ldr	r0, [r7, #4]
 8004550:	f000 f8f6 	bl	8004740 <MSC_BOT_SendCSW>
      break;
 8004554:	e004      	b.n	8004560 <MSC_BOT_DataIn+0x66>
    return;
 8004556:	bf00      	nop
 8004558:	e002      	b.n	8004560 <MSC_BOT_DataIn+0x66>

    default:
      break;
 800455a:	bf00      	nop
 800455c:	e000      	b.n	8004560 <MSC_BOT_DataIn+0x66>
      break;
 800455e:	bf00      	nop
  }
}
 8004560:	3710      	adds	r7, #16
 8004562:	46bd      	mov	sp, r7
 8004564:	bd80      	pop	{r7, pc}

08004566 <MSC_BOT_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval None
  */
void MSC_BOT_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8004566:	b580      	push	{r7, lr}
 8004568:	b084      	sub	sp, #16
 800456a:	af00      	add	r7, sp, #0
 800456c:	6078      	str	r0, [r7, #4]
 800456e:	460b      	mov	r3, r1
 8004570:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004578:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	2b00      	cmp	r3, #0
 800457e:	d01c      	beq.n	80045ba <MSC_BOT_DataOut+0x54>
  {
    return;
  }

  switch (hmsc->bot_state)
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	7a1b      	ldrb	r3, [r3, #8]
 8004584:	2b00      	cmp	r3, #0
 8004586:	d002      	beq.n	800458e <MSC_BOT_DataOut+0x28>
 8004588:	2b01      	cmp	r3, #1
 800458a:	d004      	beq.n	8004596 <MSC_BOT_DataOut+0x30>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
      }
      break;

    default:
      break;
 800458c:	e018      	b.n	80045c0 <MSC_BOT_DataOut+0x5a>
      MSC_BOT_CBW_Decode(pdev);
 800458e:	6878      	ldr	r0, [r7, #4]
 8004590:	f000 f81a 	bl	80045c8 <MSC_BOT_CBW_Decode>
      break;
 8004594:	e014      	b.n	80045c0 <MSC_BOT_DataOut+0x5a>
      if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	f203 231f 	addw	r3, r3, #543	; 0x21f
 80045a2:	461a      	mov	r2, r3
 80045a4:	6878      	ldr	r0, [r7, #4]
 80045a6:	f000 f95b 	bl	8004860 <SCSI_ProcessCmd>
 80045aa:	4603      	mov	r3, r0
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	da06      	bge.n	80045be <MSC_BOT_DataOut+0x58>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 80045b0:	2101      	movs	r1, #1
 80045b2:	6878      	ldr	r0, [r7, #4]
 80045b4:	f000 f8c4 	bl	8004740 <MSC_BOT_SendCSW>
      break;
 80045b8:	e001      	b.n	80045be <MSC_BOT_DataOut+0x58>
    return;
 80045ba:	bf00      	nop
 80045bc:	e000      	b.n	80045c0 <MSC_BOT_DataOut+0x5a>
      break;
 80045be:	bf00      	nop
  }
}
 80045c0:	3710      	adds	r7, #16
 80045c2:	46bd      	mov	sp, r7
 80045c4:	bd80      	pop	{r7, pc}
	...

080045c8 <MSC_BOT_CBW_Decode>:
  *         Decode the CBW command and set the BOT state machine accordingly
  * @param  pdev: device instance
  * @retval None
  */
static void  MSC_BOT_CBW_Decode(USBD_HandleTypeDef *pdev)
{
 80045c8:	b580      	push	{r7, lr}
 80045ca:	b084      	sub	sp, #16
 80045cc:	af00      	add	r7, sp, #0
 80045ce:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80045d6:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d077      	beq.n	80046ce <MSC_BOT_CBW_Decode+0x106>
  {
    return;
  }

  hmsc->csw.dTag = hmsc->cbw.dTag;
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234
  hmsc->csw.dDataResidue = hmsc->cbw.dDataLength;
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	f8c3 2238 	str.w	r2, [r3, #568]	; 0x238

  if ((USBD_LL_GetRxDataSize(pdev, MSC_EPOUT_ADDR) != USBD_BOT_CBW_LENGTH) ||
 80045f6:	2101      	movs	r1, #1
 80045f8:	6878      	ldr	r0, [r7, #4]
 80045fa:	f003 f8cf 	bl	800779c <USBD_LL_GetRxDataSize>
 80045fe:	4603      	mov	r3, r0
 8004600:	2b1f      	cmp	r3, #31
 8004602:	d114      	bne.n	800462e <MSC_BOT_CBW_Decode+0x66>
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
  if ((USBD_LL_GetRxDataSize(pdev, MSC_EPOUT_ADDR) != USBD_BOT_CBW_LENGTH) ||
 800460a:	4a34      	ldr	r2, [pc, #208]	; (80046dc <MSC_BOT_CBW_Decode+0x114>)
 800460c:	4293      	cmp	r3, r2
 800460e:	d10e      	bne.n	800462e <MSC_BOT_CBW_Decode+0x66>
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 8004616:	2b01      	cmp	r3, #1
 8004618:	d809      	bhi.n	800462e <MSC_BOT_CBW_Decode+0x66>
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	f893 321e 	ldrb.w	r3, [r3, #542]	; 0x21e
 8004620:	2b00      	cmp	r3, #0
 8004622:	d004      	beq.n	800462e <MSC_BOT_CBW_Decode+0x66>
      (hmsc->cbw.bCBLength > 16U))
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	f893 321e 	ldrb.w	r3, [r3, #542]	; 0x21e
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 800462a:	2b10      	cmp	r3, #16
 800462c:	d90e      	bls.n	800464c <MSC_BOT_CBW_Decode+0x84>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8004634:	2320      	movs	r3, #32
 8004636:	2205      	movs	r2, #5
 8004638:	6878      	ldr	r0, [r7, #4]
 800463a:	f000 fdbc 	bl	80051b6 <SCSI_SenseCode>

    hmsc->bot_status = USBD_BOT_STATUS_ERROR;
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	2202      	movs	r2, #2
 8004642:	725a      	strb	r2, [r3, #9]
    MSC_BOT_Abort(pdev);
 8004644:	6878      	ldr	r0, [r7, #4]
 8004646:	f000 f8ab 	bl	80047a0 <MSC_BOT_Abort>
 800464a:	e043      	b.n	80046d4 <MSC_BOT_CBW_Decode+0x10c>
  }
  else
  {
    if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	f203 231f 	addw	r3, r3, #543	; 0x21f
 8004658:	461a      	mov	r2, r3
 800465a:	6878      	ldr	r0, [r7, #4]
 800465c:	f000 f900 	bl	8004860 <SCSI_ProcessCmd>
 8004660:	4603      	mov	r3, r0
 8004662:	2b00      	cmp	r3, #0
 8004664:	da0c      	bge.n	8004680 <MSC_BOT_CBW_Decode+0xb8>
    {
      if (hmsc->bot_state == USBD_BOT_NO_DATA)
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	7a1b      	ldrb	r3, [r3, #8]
 800466a:	2b05      	cmp	r3, #5
 800466c:	d104      	bne.n	8004678 <MSC_BOT_CBW_Decode+0xb0>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 800466e:	2101      	movs	r1, #1
 8004670:	6878      	ldr	r0, [r7, #4]
 8004672:	f000 f865 	bl	8004740 <MSC_BOT_SendCSW>
 8004676:	e02d      	b.n	80046d4 <MSC_BOT_CBW_Decode+0x10c>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 8004678:	6878      	ldr	r0, [r7, #4]
 800467a:	f000 f891 	bl	80047a0 <MSC_BOT_Abort>
 800467e:	e029      	b.n	80046d4 <MSC_BOT_CBW_Decode+0x10c>
      }
    }
    /* Burst xfer handled internally */
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	7a1b      	ldrb	r3, [r3, #8]
 8004684:	2b02      	cmp	r3, #2
 8004686:	d024      	beq.n	80046d2 <MSC_BOT_CBW_Decode+0x10a>
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	7a1b      	ldrb	r3, [r3, #8]
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 800468c:	2b01      	cmp	r3, #1
 800468e:	d020      	beq.n	80046d2 <MSC_BOT_CBW_Decode+0x10a>
             (hmsc->bot_state != USBD_BOT_LAST_DATA_IN))
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	7a1b      	ldrb	r3, [r3, #8]
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 8004694:	2b03      	cmp	r3, #3
 8004696:	d01c      	beq.n	80046d2 <MSC_BOT_CBW_Decode+0x10a>
    {
      if (hmsc->bot_data_length > 0U)
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	68db      	ldr	r3, [r3, #12]
 800469c:	2b00      	cmp	r3, #0
 800469e:	d009      	beq.n	80046b4 <MSC_BOT_CBW_Decode+0xec>
      {
        MSC_BOT_SendData(pdev, hmsc->bot_data, hmsc->bot_data_length);
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	f103 0110 	add.w	r1, r3, #16
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	68db      	ldr	r3, [r3, #12]
 80046aa:	461a      	mov	r2, r3
 80046ac:	6878      	ldr	r0, [r7, #4]
 80046ae:	f000 f817 	bl	80046e0 <MSC_BOT_SendData>
      if (hmsc->bot_data_length > 0U)
 80046b2:	e00f      	b.n	80046d4 <MSC_BOT_CBW_Decode+0x10c>
      }
      else if (hmsc->bot_data_length == 0U)
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	68db      	ldr	r3, [r3, #12]
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d104      	bne.n	80046c6 <MSC_BOT_CBW_Decode+0xfe>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 80046bc:	2100      	movs	r1, #0
 80046be:	6878      	ldr	r0, [r7, #4]
 80046c0:	f000 f83e 	bl	8004740 <MSC_BOT_SendCSW>
      if (hmsc->bot_data_length > 0U)
 80046c4:	e006      	b.n	80046d4 <MSC_BOT_CBW_Decode+0x10c>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 80046c6:	6878      	ldr	r0, [r7, #4]
 80046c8:	f000 f86a 	bl	80047a0 <MSC_BOT_Abort>
      if (hmsc->bot_data_length > 0U)
 80046cc:	e002      	b.n	80046d4 <MSC_BOT_CBW_Decode+0x10c>
    return;
 80046ce:	bf00      	nop
 80046d0:	e000      	b.n	80046d4 <MSC_BOT_CBW_Decode+0x10c>
      }
    }
    else
    {
      return;
 80046d2:	bf00      	nop
    }
  }
}
 80046d4:	3710      	adds	r7, #16
 80046d6:	46bd      	mov	sp, r7
 80046d8:	bd80      	pop	{r7, pc}
 80046da:	bf00      	nop
 80046dc:	43425355 	.word	0x43425355

080046e0 <MSC_BOT_SendData>:
  * @param  buf: pointer to data buffer
  * @param  len: Data Length
  * @retval None
  */
static void  MSC_BOT_SendData(USBD_HandleTypeDef *pdev, uint8_t *pbuf, uint32_t len)
{
 80046e0:	b580      	push	{r7, lr}
 80046e2:	b086      	sub	sp, #24
 80046e4:	af00      	add	r7, sp, #0
 80046e6:	60f8      	str	r0, [r7, #12]
 80046e8:	60b9      	str	r1, [r7, #8]
 80046ea:	607a      	str	r2, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80046f2:	617b      	str	r3, [r7, #20]

  uint32_t length = MIN(hmsc->cbw.dDataLength, len);
 80046f4:	697b      	ldr	r3, [r7, #20]
 80046f6:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80046fa:	687a      	ldr	r2, [r7, #4]
 80046fc:	4293      	cmp	r3, r2
 80046fe:	bf28      	it	cs
 8004700:	4613      	movcs	r3, r2
 8004702:	613b      	str	r3, [r7, #16]

  if (hmsc == NULL)
 8004704:	697b      	ldr	r3, [r7, #20]
 8004706:	2b00      	cmp	r3, #0
 8004708:	d015      	beq.n	8004736 <MSC_BOT_SendData+0x56>
  {
    return;
  }

  hmsc->csw.dDataResidue -= len;
 800470a:	697b      	ldr	r3, [r7, #20]
 800470c:	f8d3 2238 	ldr.w	r2, [r3, #568]	; 0x238
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	1ad2      	subs	r2, r2, r3
 8004714:	697b      	ldr	r3, [r7, #20]
 8004716:	f8c3 2238 	str.w	r2, [r3, #568]	; 0x238
  hmsc->csw.bStatus = USBD_CSW_CMD_PASSED;
 800471a:	697b      	ldr	r3, [r7, #20]
 800471c:	2200      	movs	r2, #0
 800471e:	f883 223c 	strb.w	r2, [r3, #572]	; 0x23c
  hmsc->bot_state = USBD_BOT_SEND_DATA;
 8004722:	697b      	ldr	r3, [r7, #20]
 8004724:	2204      	movs	r2, #4
 8004726:	721a      	strb	r2, [r3, #8]

  (void)USBD_LL_Transmit(pdev, MSC_EPIN_ADDR, pbuf, length);
 8004728:	693b      	ldr	r3, [r7, #16]
 800472a:	68ba      	ldr	r2, [r7, #8]
 800472c:	2181      	movs	r1, #129	; 0x81
 800472e:	68f8      	ldr	r0, [r7, #12]
 8004730:	f002 fff2 	bl	8007718 <USBD_LL_Transmit>
 8004734:	e000      	b.n	8004738 <MSC_BOT_SendData+0x58>
    return;
 8004736:	bf00      	nop
}
 8004738:	3718      	adds	r7, #24
 800473a:	46bd      	mov	sp, r7
 800473c:	bd80      	pop	{r7, pc}
	...

08004740 <MSC_BOT_SendCSW>:
  * @param  pdev: device instance
  * @param  status : CSW status
  * @retval None
  */
void  MSC_BOT_SendCSW(USBD_HandleTypeDef *pdev, uint8_t CSW_Status)
{
 8004740:	b580      	push	{r7, lr}
 8004742:	b084      	sub	sp, #16
 8004744:	af00      	add	r7, sp, #0
 8004746:	6078      	str	r0, [r7, #4]
 8004748:	460b      	mov	r3, r1
 800474a:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004752:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	2b00      	cmp	r3, #0
 8004758:	d01b      	beq.n	8004792 <MSC_BOT_SendCSW+0x52>
  {
    return;
  }

  hmsc->csw.dSignature = USBD_BOT_CSW_SIGNATURE;
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	4a0f      	ldr	r2, [pc, #60]	; (800479c <MSC_BOT_SendCSW+0x5c>)
 800475e:	f8c3 2230 	str.w	r2, [r3, #560]	; 0x230
  hmsc->csw.bStatus = CSW_Status;
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	78fa      	ldrb	r2, [r7, #3]
 8004766:	f883 223c 	strb.w	r2, [r3, #572]	; 0x23c
  hmsc->bot_state = USBD_BOT_IDLE;
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	2200      	movs	r2, #0
 800476e:	721a      	strb	r2, [r3, #8]

  (void)USBD_LL_Transmit(pdev, MSC_EPIN_ADDR, (uint8_t *)&hmsc->csw,
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	f503 720c 	add.w	r2, r3, #560	; 0x230
 8004776:	230d      	movs	r3, #13
 8004778:	2181      	movs	r1, #129	; 0x81
 800477a:	6878      	ldr	r0, [r7, #4]
 800477c:	f002 ffcc 	bl	8007718 <USBD_LL_Transmit>
                         USBD_BOT_CSW_LENGTH);

  /* Prepare EP to Receive next Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, (uint8_t *)&hmsc->cbw,
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	f503 7204 	add.w	r2, r3, #528	; 0x210
 8004786:	231f      	movs	r3, #31
 8004788:	2101      	movs	r1, #1
 800478a:	6878      	ldr	r0, [r7, #4]
 800478c:	f002 ffe5 	bl	800775a <USBD_LL_PrepareReceive>
 8004790:	e000      	b.n	8004794 <MSC_BOT_SendCSW+0x54>
    return;
 8004792:	bf00      	nop
                               USBD_BOT_CBW_LENGTH);
}
 8004794:	3710      	adds	r7, #16
 8004796:	46bd      	mov	sp, r7
 8004798:	bd80      	pop	{r7, pc}
 800479a:	bf00      	nop
 800479c:	53425355 	.word	0x53425355

080047a0 <MSC_BOT_Abort>:
  * @param  pdev: device instance
  * @retval status
  */

static void  MSC_BOT_Abort(USBD_HandleTypeDef *pdev)
{
 80047a0:	b580      	push	{r7, lr}
 80047a2:	b084      	sub	sp, #16
 80047a4:	af00      	add	r7, sp, #0
 80047a6:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80047ae:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d022      	beq.n	80047fc <MSC_BOT_Abort+0x5c>
  {
    return;
  }

  if ((hmsc->cbw.bmFlags == 0U) &&
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d10c      	bne.n	80047da <MSC_BOT_Abort+0x3a>
      (hmsc->cbw.dDataLength != 0U) &&
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
  if ((hmsc->cbw.bmFlags == 0U) &&
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d007      	beq.n	80047da <MSC_BOT_Abort+0x3a>
      (hmsc->bot_status == USBD_BOT_STATUS_NORMAL))
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	7a5b      	ldrb	r3, [r3, #9]
      (hmsc->cbw.dDataLength != 0U) &&
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d103      	bne.n	80047da <MSC_BOT_Abort+0x3a>
  {
    (void)USBD_LL_StallEP(pdev, MSC_EPOUT_ADDR);
 80047d2:	2101      	movs	r1, #1
 80047d4:	6878      	ldr	r0, [r7, #4]
 80047d6:	f002 ff16 	bl	8007606 <USBD_LL_StallEP>
  }

  (void)USBD_LL_StallEP(pdev, MSC_EPIN_ADDR);
 80047da:	2181      	movs	r1, #129	; 0x81
 80047dc:	6878      	ldr	r0, [r7, #4]
 80047de:	f002 ff12 	bl	8007606 <USBD_LL_StallEP>

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR)
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	7a5b      	ldrb	r3, [r3, #9]
 80047e6:	2b02      	cmp	r3, #2
 80047e8:	d109      	bne.n	80047fe <MSC_BOT_Abort+0x5e>
  {
    (void)USBD_LL_StallEP(pdev, MSC_EPIN_ADDR);
 80047ea:	2181      	movs	r1, #129	; 0x81
 80047ec:	6878      	ldr	r0, [r7, #4]
 80047ee:	f002 ff0a 	bl	8007606 <USBD_LL_StallEP>
    (void)USBD_LL_StallEP(pdev, MSC_EPOUT_ADDR);
 80047f2:	2101      	movs	r1, #1
 80047f4:	6878      	ldr	r0, [r7, #4]
 80047f6:	f002 ff06 	bl	8007606 <USBD_LL_StallEP>
 80047fa:	e000      	b.n	80047fe <MSC_BOT_Abort+0x5e>
    return;
 80047fc:	bf00      	nop
  }
}
 80047fe:	3710      	adds	r7, #16
 8004800:	46bd      	mov	sp, r7
 8004802:	bd80      	pop	{r7, pc}

08004804 <MSC_BOT_CplClrFeature>:
  * @param  epnum: endpoint index
  * @retval None
  */

void  MSC_BOT_CplClrFeature(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8004804:	b580      	push	{r7, lr}
 8004806:	b084      	sub	sp, #16
 8004808:	af00      	add	r7, sp, #0
 800480a:	6078      	str	r0, [r7, #4]
 800480c:	460b      	mov	r3, r1
 800480e:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004816:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	2b00      	cmp	r3, #0
 800481c:	d019      	beq.n	8004852 <MSC_BOT_CplClrFeature+0x4e>
  {
    return;
  }

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR) /* Bad CBW Signature */
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	7a5b      	ldrb	r3, [r3, #9]
 8004822:	2b02      	cmp	r3, #2
 8004824:	d108      	bne.n	8004838 <MSC_BOT_CplClrFeature+0x34>
  {
    (void)USBD_LL_StallEP(pdev, MSC_EPIN_ADDR);
 8004826:	2181      	movs	r1, #129	; 0x81
 8004828:	6878      	ldr	r0, [r7, #4]
 800482a:	f002 feec 	bl	8007606 <USBD_LL_StallEP>
    (void)USBD_LL_StallEP(pdev, MSC_EPOUT_ADDR);
 800482e:	2101      	movs	r1, #1
 8004830:	6878      	ldr	r0, [r7, #4]
 8004832:	f002 fee8 	bl	8007606 <USBD_LL_StallEP>
 8004836:	e00f      	b.n	8004858 <MSC_BOT_CplClrFeature+0x54>
  }
  else if (((epnum & 0x80U) == 0x80U) && (hmsc->bot_status != USBD_BOT_STATUS_RECOVERY))
 8004838:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800483c:	2b00      	cmp	r3, #0
 800483e:	da0a      	bge.n	8004856 <MSC_BOT_CplClrFeature+0x52>
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	7a5b      	ldrb	r3, [r3, #9]
 8004844:	2b01      	cmp	r3, #1
 8004846:	d006      	beq.n	8004856 <MSC_BOT_CplClrFeature+0x52>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 8004848:	2101      	movs	r1, #1
 800484a:	6878      	ldr	r0, [r7, #4]
 800484c:	f7ff ff78 	bl	8004740 <MSC_BOT_SendCSW>
 8004850:	e002      	b.n	8004858 <MSC_BOT_CplClrFeature+0x54>
    return;
 8004852:	bf00      	nop
 8004854:	e000      	b.n	8004858 <MSC_BOT_CplClrFeature+0x54>
  }
  else
  {
    return;
 8004856:	bf00      	nop
  }
}
 8004858:	3710      	adds	r7, #16
 800485a:	46bd      	mov	sp, r7
 800485c:	bd80      	pop	{r7, pc}
	...

08004860 <SCSI_ProcessCmd>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
int8_t SCSI_ProcessCmd(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *cmd)
{
 8004860:	b580      	push	{r7, lr}
 8004862:	b086      	sub	sp, #24
 8004864:	af00      	add	r7, sp, #0
 8004866:	60f8      	str	r0, [r7, #12]
 8004868:	460b      	mov	r3, r1
 800486a:	607a      	str	r2, [r7, #4]
 800486c:	72fb      	strb	r3, [r7, #11]
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004874:	613b      	str	r3, [r7, #16]

  if (hmsc == NULL)
 8004876:	693b      	ldr	r3, [r7, #16]
 8004878:	2b00      	cmp	r3, #0
 800487a:	d102      	bne.n	8004882 <SCSI_ProcessCmd+0x22>
  {
    return -1;
 800487c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004880:	e168      	b.n	8004b54 <SCSI_ProcessCmd+0x2f4>
  }

  switch (cmd[0])
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	781b      	ldrb	r3, [r3, #0]
 8004886:	2baa      	cmp	r3, #170	; 0xaa
 8004888:	f000 8144 	beq.w	8004b14 <SCSI_ProcessCmd+0x2b4>
 800488c:	2baa      	cmp	r3, #170	; 0xaa
 800488e:	f300 8153 	bgt.w	8004b38 <SCSI_ProcessCmd+0x2d8>
 8004892:	2ba8      	cmp	r3, #168	; 0xa8
 8004894:	f000 812c 	beq.w	8004af0 <SCSI_ProcessCmd+0x290>
 8004898:	2ba8      	cmp	r3, #168	; 0xa8
 800489a:	f300 814d 	bgt.w	8004b38 <SCSI_ProcessCmd+0x2d8>
 800489e:	2b5a      	cmp	r3, #90	; 0x5a
 80048a0:	f300 80c0 	bgt.w	8004a24 <SCSI_ProcessCmd+0x1c4>
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	f2c0 8147 	blt.w	8004b38 <SCSI_ProcessCmd+0x2d8>
 80048aa:	2b5a      	cmp	r3, #90	; 0x5a
 80048ac:	f200 8144 	bhi.w	8004b38 <SCSI_ProcessCmd+0x2d8>
 80048b0:	a201      	add	r2, pc, #4	; (adr r2, 80048b8 <SCSI_ProcessCmd+0x58>)
 80048b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048b6:	bf00      	nop
 80048b8:	08004a2b 	.word	0x08004a2b
 80048bc:	08004b39 	.word	0x08004b39
 80048c0:	08004b39 	.word	0x08004b39
 80048c4:	08004a3d 	.word	0x08004a3d
 80048c8:	08004b39 	.word	0x08004b39
 80048cc:	08004b39 	.word	0x08004b39
 80048d0:	08004b39 	.word	0x08004b39
 80048d4:	08004b39 	.word	0x08004b39
 80048d8:	08004b39 	.word	0x08004b39
 80048dc:	08004b39 	.word	0x08004b39
 80048e0:	08004b39 	.word	0x08004b39
 80048e4:	08004b39 	.word	0x08004b39
 80048e8:	08004b39 	.word	0x08004b39
 80048ec:	08004b39 	.word	0x08004b39
 80048f0:	08004b39 	.word	0x08004b39
 80048f4:	08004b39 	.word	0x08004b39
 80048f8:	08004b39 	.word	0x08004b39
 80048fc:	08004b39 	.word	0x08004b39
 8004900:	08004a4f 	.word	0x08004a4f
 8004904:	08004b39 	.word	0x08004b39
 8004908:	08004b39 	.word	0x08004b39
 800490c:	08004b39 	.word	0x08004b39
 8004910:	08004b39 	.word	0x08004b39
 8004914:	08004b39 	.word	0x08004b39
 8004918:	08004b39 	.word	0x08004b39
 800491c:	08004b39 	.word	0x08004b39
 8004920:	08004a85 	.word	0x08004a85
 8004924:	08004a61 	.word	0x08004a61
 8004928:	08004b39 	.word	0x08004b39
 800492c:	08004b39 	.word	0x08004b39
 8004930:	08004a73 	.word	0x08004a73
 8004934:	08004b39 	.word	0x08004b39
 8004938:	08004b39 	.word	0x08004b39
 800493c:	08004b39 	.word	0x08004b39
 8004940:	08004b39 	.word	0x08004b39
 8004944:	08004aa9 	.word	0x08004aa9
 8004948:	08004b39 	.word	0x08004b39
 800494c:	08004abb 	.word	0x08004abb
 8004950:	08004b39 	.word	0x08004b39
 8004954:	08004b39 	.word	0x08004b39
 8004958:	08004adf 	.word	0x08004adf
 800495c:	08004b39 	.word	0x08004b39
 8004960:	08004b03 	.word	0x08004b03
 8004964:	08004b39 	.word	0x08004b39
 8004968:	08004b39 	.word	0x08004b39
 800496c:	08004b39 	.word	0x08004b39
 8004970:	08004b39 	.word	0x08004b39
 8004974:	08004b27 	.word	0x08004b27
 8004978:	08004b39 	.word	0x08004b39
 800497c:	08004b39 	.word	0x08004b39
 8004980:	08004b39 	.word	0x08004b39
 8004984:	08004b39 	.word	0x08004b39
 8004988:	08004b39 	.word	0x08004b39
 800498c:	08004b39 	.word	0x08004b39
 8004990:	08004b39 	.word	0x08004b39
 8004994:	08004b39 	.word	0x08004b39
 8004998:	08004b39 	.word	0x08004b39
 800499c:	08004b39 	.word	0x08004b39
 80049a0:	08004b39 	.word	0x08004b39
 80049a4:	08004b39 	.word	0x08004b39
 80049a8:	08004b39 	.word	0x08004b39
 80049ac:	08004b39 	.word	0x08004b39
 80049b0:	08004b39 	.word	0x08004b39
 80049b4:	08004b39 	.word	0x08004b39
 80049b8:	08004b39 	.word	0x08004b39
 80049bc:	08004b39 	.word	0x08004b39
 80049c0:	08004b39 	.word	0x08004b39
 80049c4:	08004b39 	.word	0x08004b39
 80049c8:	08004b39 	.word	0x08004b39
 80049cc:	08004b39 	.word	0x08004b39
 80049d0:	08004b39 	.word	0x08004b39
 80049d4:	08004b39 	.word	0x08004b39
 80049d8:	08004b39 	.word	0x08004b39
 80049dc:	08004b39 	.word	0x08004b39
 80049e0:	08004b39 	.word	0x08004b39
 80049e4:	08004b39 	.word	0x08004b39
 80049e8:	08004b39 	.word	0x08004b39
 80049ec:	08004b39 	.word	0x08004b39
 80049f0:	08004b39 	.word	0x08004b39
 80049f4:	08004b39 	.word	0x08004b39
 80049f8:	08004b39 	.word	0x08004b39
 80049fc:	08004b39 	.word	0x08004b39
 8004a00:	08004b39 	.word	0x08004b39
 8004a04:	08004b39 	.word	0x08004b39
 8004a08:	08004b39 	.word	0x08004b39
 8004a0c:	08004b39 	.word	0x08004b39
 8004a10:	08004b39 	.word	0x08004b39
 8004a14:	08004b39 	.word	0x08004b39
 8004a18:	08004b39 	.word	0x08004b39
 8004a1c:	08004b39 	.word	0x08004b39
 8004a20:	08004a97 	.word	0x08004a97
 8004a24:	2b9e      	cmp	r3, #158	; 0x9e
 8004a26:	d051      	beq.n	8004acc <SCSI_ProcessCmd+0x26c>
 8004a28:	e086      	b.n	8004b38 <SCSI_ProcessCmd+0x2d8>
  {
    case SCSI_TEST_UNIT_READY:
      ret = SCSI_TestUnitReady(pdev, lun, cmd);
 8004a2a:	7afb      	ldrb	r3, [r7, #11]
 8004a2c:	687a      	ldr	r2, [r7, #4]
 8004a2e:	4619      	mov	r1, r3
 8004a30:	68f8      	ldr	r0, [r7, #12]
 8004a32:	f000 f893 	bl	8004b5c <SCSI_TestUnitReady>
 8004a36:	4603      	mov	r3, r0
 8004a38:	75fb      	strb	r3, [r7, #23]
      break;
 8004a3a:	e089      	b.n	8004b50 <SCSI_ProcessCmd+0x2f0>

    case SCSI_REQUEST_SENSE:
      ret = SCSI_RequestSense(pdev, lun, cmd);
 8004a3c:	7afb      	ldrb	r3, [r7, #11]
 8004a3e:	687a      	ldr	r2, [r7, #4]
 8004a40:	4619      	mov	r1, r3
 8004a42:	68f8      	ldr	r0, [r7, #12]
 8004a44:	f000 fb38 	bl	80050b8 <SCSI_RequestSense>
 8004a48:	4603      	mov	r3, r0
 8004a4a:	75fb      	strb	r3, [r7, #23]
      break;
 8004a4c:	e080      	b.n	8004b50 <SCSI_ProcessCmd+0x2f0>

    case SCSI_INQUIRY:
      ret = SCSI_Inquiry(pdev, lun, cmd);
 8004a4e:	7afb      	ldrb	r3, [r7, #11]
 8004a50:	687a      	ldr	r2, [r7, #4]
 8004a52:	4619      	mov	r1, r3
 8004a54:	68f8      	ldr	r0, [r7, #12]
 8004a56:	f000 f8d1 	bl	8004bfc <SCSI_Inquiry>
 8004a5a:	4603      	mov	r3, r0
 8004a5c:	75fb      	strb	r3, [r7, #23]
      break;
 8004a5e:	e077      	b.n	8004b50 <SCSI_ProcessCmd+0x2f0>

    case SCSI_START_STOP_UNIT:
      ret = SCSI_StartStopUnit(pdev, lun, cmd);
 8004a60:	7afb      	ldrb	r3, [r7, #11]
 8004a62:	687a      	ldr	r2, [r7, #4]
 8004a64:	4619      	mov	r1, r3
 8004a66:	68f8      	ldr	r0, [r7, #12]
 8004a68:	f000 fbec 	bl	8005244 <SCSI_StartStopUnit>
 8004a6c:	4603      	mov	r3, r0
 8004a6e:	75fb      	strb	r3, [r7, #23]
      break;
 8004a70:	e06e      	b.n	8004b50 <SCSI_ProcessCmd+0x2f0>

    case SCSI_ALLOW_MEDIUM_REMOVAL:
      ret = SCSI_AllowPreventRemovable(pdev, lun, cmd);
 8004a72:	7afb      	ldrb	r3, [r7, #11]
 8004a74:	687a      	ldr	r2, [r7, #4]
 8004a76:	4619      	mov	r1, r3
 8004a78:	68f8      	ldr	r0, [r7, #12]
 8004a7a:	f000 fc34 	bl	80052e6 <SCSI_AllowPreventRemovable>
 8004a7e:	4603      	mov	r3, r0
 8004a80:	75fb      	strb	r3, [r7, #23]
      break;
 8004a82:	e065      	b.n	8004b50 <SCSI_ProcessCmd+0x2f0>

    case SCSI_MODE_SENSE6:
      ret = SCSI_ModeSense6(pdev, lun, cmd);
 8004a84:	7afb      	ldrb	r3, [r7, #11]
 8004a86:	687a      	ldr	r2, [r7, #4]
 8004a88:	4619      	mov	r1, r3
 8004a8a:	68f8      	ldr	r0, [r7, #12]
 8004a8c:	f000 fabc 	bl	8005008 <SCSI_ModeSense6>
 8004a90:	4603      	mov	r3, r0
 8004a92:	75fb      	strb	r3, [r7, #23]
      break;
 8004a94:	e05c      	b.n	8004b50 <SCSI_ProcessCmd+0x2f0>

    case SCSI_MODE_SENSE10:
      ret = SCSI_ModeSense10(pdev, lun, cmd);
 8004a96:	7afb      	ldrb	r3, [r7, #11]
 8004a98:	687a      	ldr	r2, [r7, #4]
 8004a9a:	4619      	mov	r1, r3
 8004a9c:	68f8      	ldr	r0, [r7, #12]
 8004a9e:	f000 fadf 	bl	8005060 <SCSI_ModeSense10>
 8004aa2:	4603      	mov	r3, r0
 8004aa4:	75fb      	strb	r3, [r7, #23]
      break;
 8004aa6:	e053      	b.n	8004b50 <SCSI_ProcessCmd+0x2f0>

    case SCSI_READ_FORMAT_CAPACITIES:
      ret = SCSI_ReadFormatCapacity(pdev, lun, cmd);
 8004aa8:	7afb      	ldrb	r3, [r7, #11]
 8004aaa:	687a      	ldr	r2, [r7, #4]
 8004aac:	4619      	mov	r1, r3
 8004aae:	68f8      	ldr	r0, [r7, #12]
 8004ab0:	f000 fa37 	bl	8004f22 <SCSI_ReadFormatCapacity>
 8004ab4:	4603      	mov	r3, r0
 8004ab6:	75fb      	strb	r3, [r7, #23]
      break;
 8004ab8:	e04a      	b.n	8004b50 <SCSI_ProcessCmd+0x2f0>

    case SCSI_READ_CAPACITY10:
      ret = SCSI_ReadCapacity10(pdev, lun, cmd);
 8004aba:	7afb      	ldrb	r3, [r7, #11]
 8004abc:	687a      	ldr	r2, [r7, #4]
 8004abe:	4619      	mov	r1, r3
 8004ac0:	68f8      	ldr	r0, [r7, #12]
 8004ac2:	f000 f90f 	bl	8004ce4 <SCSI_ReadCapacity10>
 8004ac6:	4603      	mov	r3, r0
 8004ac8:	75fb      	strb	r3, [r7, #23]
      break;
 8004aca:	e041      	b.n	8004b50 <SCSI_ProcessCmd+0x2f0>

    case SCSI_READ_CAPACITY16:
      ret = SCSI_ReadCapacity16(pdev, lun, cmd);
 8004acc:	7afb      	ldrb	r3, [r7, #11]
 8004ace:	687a      	ldr	r2, [r7, #4]
 8004ad0:	4619      	mov	r1, r3
 8004ad2:	68f8      	ldr	r0, [r7, #12]
 8004ad4:	f000 f97b 	bl	8004dce <SCSI_ReadCapacity16>
 8004ad8:	4603      	mov	r3, r0
 8004ada:	75fb      	strb	r3, [r7, #23]
      break;
 8004adc:	e038      	b.n	8004b50 <SCSI_ProcessCmd+0x2f0>

    case SCSI_READ10:
      ret = SCSI_Read10(pdev, lun, cmd);
 8004ade:	7afb      	ldrb	r3, [r7, #11]
 8004ae0:	687a      	ldr	r2, [r7, #4]
 8004ae2:	4619      	mov	r1, r3
 8004ae4:	68f8      	ldr	r0, [r7, #12]
 8004ae6:	f000 fc27 	bl	8005338 <SCSI_Read10>
 8004aea:	4603      	mov	r3, r0
 8004aec:	75fb      	strb	r3, [r7, #23]
      break;
 8004aee:	e02f      	b.n	8004b50 <SCSI_ProcessCmd+0x2f0>

    case SCSI_READ12:
      ret = SCSI_Read12(pdev, lun, cmd);
 8004af0:	7afb      	ldrb	r3, [r7, #11]
 8004af2:	687a      	ldr	r2, [r7, #4]
 8004af4:	4619      	mov	r1, r3
 8004af6:	68f8      	ldr	r0, [r7, #12]
 8004af8:	f000 fcbe 	bl	8005478 <SCSI_Read12>
 8004afc:	4603      	mov	r3, r0
 8004afe:	75fb      	strb	r3, [r7, #23]
      break;
 8004b00:	e026      	b.n	8004b50 <SCSI_ProcessCmd+0x2f0>

    case SCSI_WRITE10:
      ret = SCSI_Write10(pdev, lun, cmd);
 8004b02:	7afb      	ldrb	r3, [r7, #11]
 8004b04:	687a      	ldr	r2, [r7, #4]
 8004b06:	4619      	mov	r1, r3
 8004b08:	68f8      	ldr	r0, [r7, #12]
 8004b0a:	f000 fd60 	bl	80055ce <SCSI_Write10>
 8004b0e:	4603      	mov	r3, r0
 8004b10:	75fb      	strb	r3, [r7, #23]
      break;
 8004b12:	e01d      	b.n	8004b50 <SCSI_ProcessCmd+0x2f0>

    case SCSI_WRITE12:
      ret = SCSI_Write12(pdev, lun, cmd);
 8004b14:	7afb      	ldrb	r3, [r7, #11]
 8004b16:	687a      	ldr	r2, [r7, #4]
 8004b18:	4619      	mov	r1, r3
 8004b1a:	68f8      	ldr	r0, [r7, #12]
 8004b1c:	f000 fe1c 	bl	8005758 <SCSI_Write12>
 8004b20:	4603      	mov	r3, r0
 8004b22:	75fb      	strb	r3, [r7, #23]
      break;
 8004b24:	e014      	b.n	8004b50 <SCSI_ProcessCmd+0x2f0>

    case SCSI_VERIFY10:
      ret = SCSI_Verify10(pdev, lun, cmd);
 8004b26:	7afb      	ldrb	r3, [r7, #11]
 8004b28:	687a      	ldr	r2, [r7, #4]
 8004b2a:	4619      	mov	r1, r3
 8004b2c:	68f8      	ldr	r0, [r7, #12]
 8004b2e:	f000 fee8 	bl	8005902 <SCSI_Verify10>
 8004b32:	4603      	mov	r3, r0
 8004b34:	75fb      	strb	r3, [r7, #23]
      break;
 8004b36:	e00b      	b.n	8004b50 <SCSI_ProcessCmd+0x2f0>

    default:
      SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_CDB);
 8004b38:	7af9      	ldrb	r1, [r7, #11]
 8004b3a:	2320      	movs	r3, #32
 8004b3c:	2205      	movs	r2, #5
 8004b3e:	68f8      	ldr	r0, [r7, #12]
 8004b40:	f000 fb39 	bl	80051b6 <SCSI_SenseCode>
      hmsc->bot_status = USBD_BOT_STATUS_ERROR;
 8004b44:	693b      	ldr	r3, [r7, #16]
 8004b46:	2202      	movs	r2, #2
 8004b48:	725a      	strb	r2, [r3, #9]
      ret = -1;
 8004b4a:	23ff      	movs	r3, #255	; 0xff
 8004b4c:	75fb      	strb	r3, [r7, #23]
      break;
 8004b4e:	bf00      	nop
  }

  return ret;
 8004b50:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8004b54:	4618      	mov	r0, r3
 8004b56:	3718      	adds	r7, #24
 8004b58:	46bd      	mov	sp, r7
 8004b5a:	bd80      	pop	{r7, pc}

08004b5c <SCSI_TestUnitReady>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_TestUnitReady(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8004b5c:	b580      	push	{r7, lr}
 8004b5e:	b086      	sub	sp, #24
 8004b60:	af00      	add	r7, sp, #0
 8004b62:	60f8      	str	r0, [r7, #12]
 8004b64:	460b      	mov	r3, r1
 8004b66:	607a      	str	r2, [r7, #4]
 8004b68:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004b70:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 8004b72:	697b      	ldr	r3, [r7, #20]
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d102      	bne.n	8004b7e <SCSI_TestUnitReady+0x22>
  {
    return -1;
 8004b78:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004b7c:	e03a      	b.n	8004bf4 <SCSI_TestUnitReady+0x98>
  }

  /* case 9 : Hi > D0 */
  if (hmsc->cbw.dDataLength != 0U)
 8004b7e:	697b      	ldr	r3, [r7, #20]
 8004b80:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d00a      	beq.n	8004b9e <SCSI_TestUnitReady+0x42>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8004b88:	697b      	ldr	r3, [r7, #20]
 8004b8a:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8004b8e:	2320      	movs	r3, #32
 8004b90:	2205      	movs	r2, #5
 8004b92:	68f8      	ldr	r0, [r7, #12]
 8004b94:	f000 fb0f 	bl	80051b6 <SCSI_SenseCode>

    return -1;
 8004b98:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004b9c:	e02a      	b.n	8004bf4 <SCSI_TestUnitReady+0x98>
  }

  if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 8004b9e:	697b      	ldr	r3, [r7, #20]
 8004ba0:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 8004ba4:	2b02      	cmp	r3, #2
 8004ba6:	d10b      	bne.n	8004bc0 <SCSI_TestUnitReady+0x64>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8004ba8:	7af9      	ldrb	r1, [r7, #11]
 8004baa:	233a      	movs	r3, #58	; 0x3a
 8004bac:	2202      	movs	r2, #2
 8004bae:	68f8      	ldr	r0, [r7, #12]
 8004bb0:	f000 fb01 	bl	80051b6 <SCSI_SenseCode>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 8004bb4:	697b      	ldr	r3, [r7, #20]
 8004bb6:	2205      	movs	r2, #5
 8004bb8:	721a      	strb	r2, [r3, #8]
    return -1;
 8004bba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004bbe:	e019      	b.n	8004bf4 <SCSI_TestUnitReady+0x98>
  }

  if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8004bc6:	689b      	ldr	r3, [r3, #8]
 8004bc8:	7afa      	ldrb	r2, [r7, #11]
 8004bca:	4610      	mov	r0, r2
 8004bcc:	4798      	blx	r3
 8004bce:	4603      	mov	r3, r0
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d00b      	beq.n	8004bec <SCSI_TestUnitReady+0x90>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8004bd4:	7af9      	ldrb	r1, [r7, #11]
 8004bd6:	233a      	movs	r3, #58	; 0x3a
 8004bd8:	2202      	movs	r2, #2
 8004bda:	68f8      	ldr	r0, [r7, #12]
 8004bdc:	f000 faeb 	bl	80051b6 <SCSI_SenseCode>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 8004be0:	697b      	ldr	r3, [r7, #20]
 8004be2:	2205      	movs	r2, #5
 8004be4:	721a      	strb	r2, [r3, #8]

    return -1;
 8004be6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004bea:	e003      	b.n	8004bf4 <SCSI_TestUnitReady+0x98>
  }
  hmsc->bot_data_length = 0U;
 8004bec:	697b      	ldr	r3, [r7, #20]
 8004bee:	2200      	movs	r2, #0
 8004bf0:	60da      	str	r2, [r3, #12]

  return 0;
 8004bf2:	2300      	movs	r3, #0
}
 8004bf4:	4618      	mov	r0, r3
 8004bf6:	3718      	adds	r7, #24
 8004bf8:	46bd      	mov	sp, r7
 8004bfa:	bd80      	pop	{r7, pc}

08004bfc <SCSI_Inquiry>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Inquiry(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8004bfc:	b580      	push	{r7, lr}
 8004bfe:	b088      	sub	sp, #32
 8004c00:	af00      	add	r7, sp, #0
 8004c02:	60f8      	str	r0, [r7, #12]
 8004c04:	460b      	mov	r3, r1
 8004c06:	607a      	str	r2, [r7, #4]
 8004c08:	72fb      	strb	r3, [r7, #11]
  uint8_t *pPage;
  uint16_t len;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004c10:	61bb      	str	r3, [r7, #24]

  if (hmsc == NULL)
 8004c12:	69bb      	ldr	r3, [r7, #24]
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d102      	bne.n	8004c1e <SCSI_Inquiry+0x22>
  {
    return -1;
 8004c18:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004c1c:	e05a      	b.n	8004cd4 <SCSI_Inquiry+0xd8>
  }

  if (hmsc->cbw.dDataLength == 0U)
 8004c1e:	69bb      	ldr	r3, [r7, #24]
 8004c20:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d10a      	bne.n	8004c3e <SCSI_Inquiry+0x42>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8004c28:	69bb      	ldr	r3, [r7, #24]
 8004c2a:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8004c2e:	2320      	movs	r3, #32
 8004c30:	2205      	movs	r2, #5
 8004c32:	68f8      	ldr	r0, [r7, #12]
 8004c34:	f000 fabf 	bl	80051b6 <SCSI_SenseCode>
    return -1;
 8004c38:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004c3c:	e04a      	b.n	8004cd4 <SCSI_Inquiry+0xd8>
  }

  if ((params[1] & 0x01U) != 0U) /* Evpd is set */
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	3301      	adds	r3, #1
 8004c42:	781b      	ldrb	r3, [r3, #0]
 8004c44:	f003 0301 	and.w	r3, r3, #1
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d020      	beq.n	8004c8e <SCSI_Inquiry+0x92>
  {
    if (params[2] == 0U) /* Request for Supported Vital Product Data Pages*/
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	3302      	adds	r3, #2
 8004c50:	781b      	ldrb	r3, [r3, #0]
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d105      	bne.n	8004c62 <SCSI_Inquiry+0x66>
    {
      (void)SCSI_UpdateBotData(hmsc, MSC_Page00_Inquiry_Data, LENGTH_INQUIRY_PAGE00);
 8004c56:	2206      	movs	r2, #6
 8004c58:	4920      	ldr	r1, [pc, #128]	; (8004cdc <SCSI_Inquiry+0xe0>)
 8004c5a:	69b8      	ldr	r0, [r7, #24]
 8004c5c:	f000 ffb4 	bl	8005bc8 <SCSI_UpdateBotData>
 8004c60:	e037      	b.n	8004cd2 <SCSI_Inquiry+0xd6>
    }
    else if (params[2] == 0x80U) /* Request for VPD page 0x80 Unit Serial Number */
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	3302      	adds	r3, #2
 8004c66:	781b      	ldrb	r3, [r3, #0]
 8004c68:	2b80      	cmp	r3, #128	; 0x80
 8004c6a:	d105      	bne.n	8004c78 <SCSI_Inquiry+0x7c>
    {
      (void)SCSI_UpdateBotData(hmsc, MSC_Page80_Inquiry_Data, LENGTH_INQUIRY_PAGE80);
 8004c6c:	2208      	movs	r2, #8
 8004c6e:	491c      	ldr	r1, [pc, #112]	; (8004ce0 <SCSI_Inquiry+0xe4>)
 8004c70:	69b8      	ldr	r0, [r7, #24]
 8004c72:	f000 ffa9 	bl	8005bc8 <SCSI_UpdateBotData>
 8004c76:	e02c      	b.n	8004cd2 <SCSI_Inquiry+0xd6>
    }
    else /* Request Not supported */
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST,
 8004c78:	69bb      	ldr	r3, [r7, #24]
 8004c7a:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8004c7e:	2324      	movs	r3, #36	; 0x24
 8004c80:	2205      	movs	r2, #5
 8004c82:	68f8      	ldr	r0, [r7, #12]
 8004c84:	f000 fa97 	bl	80051b6 <SCSI_SenseCode>
                     INVALID_FIELED_IN_COMMAND);

      return -1;
 8004c88:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004c8c:	e022      	b.n	8004cd4 <SCSI_Inquiry+0xd8>
    }
  }
  else
  {
    pPage = (uint8_t *) &((USBD_StorageTypeDef *)pdev->pUserData)->pInquiry[lun * STANDARD_INQUIRY_DATA_LEN];
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8004c94:	69d9      	ldr	r1, [r3, #28]
 8004c96:	7afa      	ldrb	r2, [r7, #11]
 8004c98:	4613      	mov	r3, r2
 8004c9a:	00db      	lsls	r3, r3, #3
 8004c9c:	4413      	add	r3, r2
 8004c9e:	009b      	lsls	r3, r3, #2
 8004ca0:	440b      	add	r3, r1
 8004ca2:	617b      	str	r3, [r7, #20]
    len = (uint16_t)pPage[4] + 5U;
 8004ca4:	697b      	ldr	r3, [r7, #20]
 8004ca6:	3304      	adds	r3, #4
 8004ca8:	781b      	ldrb	r3, [r3, #0]
 8004caa:	b29b      	uxth	r3, r3
 8004cac:	3305      	adds	r3, #5
 8004cae:	83fb      	strh	r3, [r7, #30]

    if (params[4] <= len)
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	3304      	adds	r3, #4
 8004cb4:	781b      	ldrb	r3, [r3, #0]
 8004cb6:	b29b      	uxth	r3, r3
 8004cb8:	8bfa      	ldrh	r2, [r7, #30]
 8004cba:	429a      	cmp	r2, r3
 8004cbc:	d303      	bcc.n	8004cc6 <SCSI_Inquiry+0xca>
    {
      len = params[4];
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	3304      	adds	r3, #4
 8004cc2:	781b      	ldrb	r3, [r3, #0]
 8004cc4:	83fb      	strh	r3, [r7, #30]
    }

    (void)SCSI_UpdateBotData(hmsc, pPage, len);
 8004cc6:	8bfb      	ldrh	r3, [r7, #30]
 8004cc8:	461a      	mov	r2, r3
 8004cca:	6979      	ldr	r1, [r7, #20]
 8004ccc:	69b8      	ldr	r0, [r7, #24]
 8004cce:	f000 ff7b 	bl	8005bc8 <SCSI_UpdateBotData>
  }

  return 0;
 8004cd2:	2300      	movs	r3, #0
}
 8004cd4:	4618      	mov	r0, r3
 8004cd6:	3720      	adds	r7, #32
 8004cd8:	46bd      	mov	sp, r7
 8004cda:	bd80      	pop	{r7, pc}
 8004cdc:	200000b0 	.word	0x200000b0
 8004ce0:	200000b8 	.word	0x200000b8

08004ce4 <SCSI_ReadCapacity10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ReadCapacity10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8004ce4:	b580      	push	{r7, lr}
 8004ce6:	b086      	sub	sp, #24
 8004ce8:	af00      	add	r7, sp, #0
 8004cea:	60f8      	str	r0, [r7, #12]
 8004cec:	460b      	mov	r3, r1
 8004cee:	607a      	str	r2, [r7, #4]
 8004cf0:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004cf8:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 8004cfa:	697b      	ldr	r3, [r7, #20]
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d102      	bne.n	8004d06 <SCSI_ReadCapacity10+0x22>
  {
    return -1;
 8004d00:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004d04:	e05f      	b.n	8004dc6 <SCSI_ReadCapacity10+0xe2>
  }

  ret = ((USBD_StorageTypeDef *)pdev->pUserData)->GetCapacity(lun, &hmsc->scsi_blk_nbr, &hmsc->scsi_blk_size);
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8004d0c:	685b      	ldr	r3, [r3, #4]
 8004d0e:	697a      	ldr	r2, [r7, #20]
 8004d10:	f502 711a 	add.w	r1, r2, #616	; 0x268
 8004d14:	697a      	ldr	r2, [r7, #20]
 8004d16:	f502 7219 	add.w	r2, r2, #612	; 0x264
 8004d1a:	7af8      	ldrb	r0, [r7, #11]
 8004d1c:	4798      	blx	r3
 8004d1e:	4603      	mov	r3, r0
 8004d20:	74fb      	strb	r3, [r7, #19]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 8004d22:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d104      	bne.n	8004d34 <SCSI_ReadCapacity10+0x50>
 8004d2a:	697b      	ldr	r3, [r7, #20]
 8004d2c:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 8004d30:	2b02      	cmp	r3, #2
 8004d32:	d108      	bne.n	8004d46 <SCSI_ReadCapacity10+0x62>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8004d34:	7af9      	ldrb	r1, [r7, #11]
 8004d36:	233a      	movs	r3, #58	; 0x3a
 8004d38:	2202      	movs	r2, #2
 8004d3a:	68f8      	ldr	r0, [r7, #12]
 8004d3c:	f000 fa3b 	bl	80051b6 <SCSI_SenseCode>
    return -1;
 8004d40:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004d44:	e03f      	b.n	8004dc6 <SCSI_ReadCapacity10+0xe2>
  }

  hmsc->bot_data[0] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 24);
 8004d46:	697b      	ldr	r3, [r7, #20]
 8004d48:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8004d4c:	3b01      	subs	r3, #1
 8004d4e:	0e1b      	lsrs	r3, r3, #24
 8004d50:	b2da      	uxtb	r2, r3
 8004d52:	697b      	ldr	r3, [r7, #20]
 8004d54:	741a      	strb	r2, [r3, #16]
  hmsc->bot_data[1] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 16);
 8004d56:	697b      	ldr	r3, [r7, #20]
 8004d58:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8004d5c:	3b01      	subs	r3, #1
 8004d5e:	0c1b      	lsrs	r3, r3, #16
 8004d60:	b2da      	uxtb	r2, r3
 8004d62:	697b      	ldr	r3, [r7, #20]
 8004d64:	745a      	strb	r2, [r3, #17]
  hmsc->bot_data[2] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >>  8);
 8004d66:	697b      	ldr	r3, [r7, #20]
 8004d68:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8004d6c:	3b01      	subs	r3, #1
 8004d6e:	0a1b      	lsrs	r3, r3, #8
 8004d70:	b2da      	uxtb	r2, r3
 8004d72:	697b      	ldr	r3, [r7, #20]
 8004d74:	749a      	strb	r2, [r3, #18]
  hmsc->bot_data[3] = (uint8_t)(hmsc->scsi_blk_nbr - 1U);
 8004d76:	697b      	ldr	r3, [r7, #20]
 8004d78:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8004d7c:	b2db      	uxtb	r3, r3
 8004d7e:	3b01      	subs	r3, #1
 8004d80:	b2da      	uxtb	r2, r3
 8004d82:	697b      	ldr	r3, [r7, #20]
 8004d84:	74da      	strb	r2, [r3, #19]

  hmsc->bot_data[4] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 8004d86:	697b      	ldr	r3, [r7, #20]
 8004d88:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8004d8c:	161b      	asrs	r3, r3, #24
 8004d8e:	b2da      	uxtb	r2, r3
 8004d90:	697b      	ldr	r3, [r7, #20]
 8004d92:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)(hmsc->scsi_blk_size >>  16);
 8004d94:	697b      	ldr	r3, [r7, #20]
 8004d96:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8004d9a:	141b      	asrs	r3, r3, #16
 8004d9c:	b2da      	uxtb	r2, r3
 8004d9e:	697b      	ldr	r3, [r7, #20]
 8004da0:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 8004da2:	697b      	ldr	r3, [r7, #20]
 8004da4:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8004da8:	0a1b      	lsrs	r3, r3, #8
 8004daa:	b29b      	uxth	r3, r3
 8004dac:	b2da      	uxtb	r2, r3
 8004dae:	697b      	ldr	r3, [r7, #20]
 8004db0:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(hmsc->scsi_blk_size);
 8004db2:	697b      	ldr	r3, [r7, #20]
 8004db4:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8004db8:	b2da      	uxtb	r2, r3
 8004dba:	697b      	ldr	r3, [r7, #20]
 8004dbc:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data_length = 8U;
 8004dbe:	697b      	ldr	r3, [r7, #20]
 8004dc0:	2208      	movs	r2, #8
 8004dc2:	60da      	str	r2, [r3, #12]

  return 0;
 8004dc4:	2300      	movs	r3, #0

}
 8004dc6:	4618      	mov	r0, r3
 8004dc8:	3718      	adds	r7, #24
 8004dca:	46bd      	mov	sp, r7
 8004dcc:	bd80      	pop	{r7, pc}

08004dce <SCSI_ReadCapacity16>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ReadCapacity16(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8004dce:	b580      	push	{r7, lr}
 8004dd0:	b088      	sub	sp, #32
 8004dd2:	af00      	add	r7, sp, #0
 8004dd4:	60f8      	str	r0, [r7, #12]
 8004dd6:	460b      	mov	r3, r1
 8004dd8:	607a      	str	r2, [r7, #4]
 8004dda:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  uint8_t idx;
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004de2:	61bb      	str	r3, [r7, #24]

  if (hmsc == NULL)
 8004de4:	69bb      	ldr	r3, [r7, #24]
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d102      	bne.n	8004df0 <SCSI_ReadCapacity16+0x22>
  {
    return -1;
 8004dea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004dee:	e094      	b.n	8004f1a <SCSI_ReadCapacity16+0x14c>
  }

  ret = ((USBD_StorageTypeDef *)pdev->pUserData)->GetCapacity(lun, &hmsc->scsi_blk_nbr, &hmsc->scsi_blk_size);
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8004df6:	685b      	ldr	r3, [r3, #4]
 8004df8:	69ba      	ldr	r2, [r7, #24]
 8004dfa:	f502 711a 	add.w	r1, r2, #616	; 0x268
 8004dfe:	69ba      	ldr	r2, [r7, #24]
 8004e00:	f502 7219 	add.w	r2, r2, #612	; 0x264
 8004e04:	7af8      	ldrb	r0, [r7, #11]
 8004e06:	4798      	blx	r3
 8004e08:	4603      	mov	r3, r0
 8004e0a:	75fb      	strb	r3, [r7, #23]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 8004e0c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d104      	bne.n	8004e1e <SCSI_ReadCapacity16+0x50>
 8004e14:	69bb      	ldr	r3, [r7, #24]
 8004e16:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 8004e1a:	2b02      	cmp	r3, #2
 8004e1c:	d108      	bne.n	8004e30 <SCSI_ReadCapacity16+0x62>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8004e1e:	7af9      	ldrb	r1, [r7, #11]
 8004e20:	233a      	movs	r3, #58	; 0x3a
 8004e22:	2202      	movs	r2, #2
 8004e24:	68f8      	ldr	r0, [r7, #12]
 8004e26:	f000 f9c6 	bl	80051b6 <SCSI_SenseCode>
    return -1;
 8004e2a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004e2e:	e074      	b.n	8004f1a <SCSI_ReadCapacity16+0x14c>
  }

  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	330a      	adds	r3, #10
 8004e34:	781b      	ldrb	r3, [r3, #0]
 8004e36:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[11] << 16) |
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	330b      	adds	r3, #11
 8004e3c:	781b      	ldrb	r3, [r3, #0]
 8004e3e:	041b      	lsls	r3, r3, #16
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8004e40:	431a      	orrs	r2, r3
                          ((uint32_t)params[12] <<  8) |
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	330c      	adds	r3, #12
 8004e46:	781b      	ldrb	r3, [r3, #0]
 8004e48:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[11] << 16) |
 8004e4a:	4313      	orrs	r3, r2
                          (uint32_t)params[13];
 8004e4c:	687a      	ldr	r2, [r7, #4]
 8004e4e:	320d      	adds	r2, #13
 8004e50:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[12] <<  8) |
 8004e52:	431a      	orrs	r2, r3
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8004e54:	69bb      	ldr	r3, [r7, #24]
 8004e56:	60da      	str	r2, [r3, #12]

  for (idx = 0U; idx < hmsc->bot_data_length; idx++)
 8004e58:	2300      	movs	r3, #0
 8004e5a:	77fb      	strb	r3, [r7, #31]
 8004e5c:	e007      	b.n	8004e6e <SCSI_ReadCapacity16+0xa0>
  {
    hmsc->bot_data[idx] = 0U;
 8004e5e:	7ffb      	ldrb	r3, [r7, #31]
 8004e60:	69ba      	ldr	r2, [r7, #24]
 8004e62:	4413      	add	r3, r2
 8004e64:	2200      	movs	r2, #0
 8004e66:	741a      	strb	r2, [r3, #16]
  for (idx = 0U; idx < hmsc->bot_data_length; idx++)
 8004e68:	7ffb      	ldrb	r3, [r7, #31]
 8004e6a:	3301      	adds	r3, #1
 8004e6c:	77fb      	strb	r3, [r7, #31]
 8004e6e:	7ffa      	ldrb	r2, [r7, #31]
 8004e70:	69bb      	ldr	r3, [r7, #24]
 8004e72:	68db      	ldr	r3, [r3, #12]
 8004e74:	429a      	cmp	r2, r3
 8004e76:	d3f2      	bcc.n	8004e5e <SCSI_ReadCapacity16+0x90>
  }

  hmsc->bot_data[4] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 24);
 8004e78:	69bb      	ldr	r3, [r7, #24]
 8004e7a:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8004e7e:	3b01      	subs	r3, #1
 8004e80:	0e1b      	lsrs	r3, r3, #24
 8004e82:	b2da      	uxtb	r2, r3
 8004e84:	69bb      	ldr	r3, [r7, #24]
 8004e86:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 16);
 8004e88:	69bb      	ldr	r3, [r7, #24]
 8004e8a:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8004e8e:	3b01      	subs	r3, #1
 8004e90:	0c1b      	lsrs	r3, r3, #16
 8004e92:	b2da      	uxtb	r2, r3
 8004e94:	69bb      	ldr	r3, [r7, #24]
 8004e96:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >>  8);
 8004e98:	69bb      	ldr	r3, [r7, #24]
 8004e9a:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8004e9e:	3b01      	subs	r3, #1
 8004ea0:	0a1b      	lsrs	r3, r3, #8
 8004ea2:	b2da      	uxtb	r2, r3
 8004ea4:	69bb      	ldr	r3, [r7, #24]
 8004ea6:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(hmsc->scsi_blk_nbr - 1U);
 8004ea8:	69bb      	ldr	r3, [r7, #24]
 8004eaa:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8004eae:	b2db      	uxtb	r3, r3
 8004eb0:	3b01      	subs	r3, #1
 8004eb2:	b2da      	uxtb	r2, r3
 8004eb4:	69bb      	ldr	r3, [r7, #24]
 8004eb6:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data[8] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 8004eb8:	69bb      	ldr	r3, [r7, #24]
 8004eba:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8004ebe:	161b      	asrs	r3, r3, #24
 8004ec0:	b2da      	uxtb	r2, r3
 8004ec2:	69bb      	ldr	r3, [r7, #24]
 8004ec4:	761a      	strb	r2, [r3, #24]
  hmsc->bot_data[9] = (uint8_t)(hmsc->scsi_blk_size >>  16);
 8004ec6:	69bb      	ldr	r3, [r7, #24]
 8004ec8:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8004ecc:	141b      	asrs	r3, r3, #16
 8004ece:	b2da      	uxtb	r2, r3
 8004ed0:	69bb      	ldr	r3, [r7, #24]
 8004ed2:	765a      	strb	r2, [r3, #25]
  hmsc->bot_data[10] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 8004ed4:	69bb      	ldr	r3, [r7, #24]
 8004ed6:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8004eda:	0a1b      	lsrs	r3, r3, #8
 8004edc:	b29b      	uxth	r3, r3
 8004ede:	b2da      	uxtb	r2, r3
 8004ee0:	69bb      	ldr	r3, [r7, #24]
 8004ee2:	769a      	strb	r2, [r3, #26]
  hmsc->bot_data[11] = (uint8_t)(hmsc->scsi_blk_size);
 8004ee4:	69bb      	ldr	r3, [r7, #24]
 8004ee6:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8004eea:	b2da      	uxtb	r2, r3
 8004eec:	69bb      	ldr	r3, [r7, #24]
 8004eee:	76da      	strb	r2, [r3, #27]

  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	330a      	adds	r3, #10
 8004ef4:	781b      	ldrb	r3, [r3, #0]
 8004ef6:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[11] << 16) |
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	330b      	adds	r3, #11
 8004efc:	781b      	ldrb	r3, [r3, #0]
 8004efe:	041b      	lsls	r3, r3, #16
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8004f00:	431a      	orrs	r2, r3
                          ((uint32_t)params[12] <<  8) |
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	330c      	adds	r3, #12
 8004f06:	781b      	ldrb	r3, [r3, #0]
 8004f08:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[11] << 16) |
 8004f0a:	4313      	orrs	r3, r2
                          (uint32_t)params[13];
 8004f0c:	687a      	ldr	r2, [r7, #4]
 8004f0e:	320d      	adds	r2, #13
 8004f10:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[12] <<  8) |
 8004f12:	431a      	orrs	r2, r3
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8004f14:	69bb      	ldr	r3, [r7, #24]
 8004f16:	60da      	str	r2, [r3, #12]

  return 0;
 8004f18:	2300      	movs	r3, #0
}
 8004f1a:	4618      	mov	r0, r3
 8004f1c:	3720      	adds	r7, #32
 8004f1e:	46bd      	mov	sp, r7
 8004f20:	bd80      	pop	{r7, pc}

08004f22 <SCSI_ReadFormatCapacity>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ReadFormatCapacity(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8004f22:	b580      	push	{r7, lr}
 8004f24:	b088      	sub	sp, #32
 8004f26:	af00      	add	r7, sp, #0
 8004f28:	60f8      	str	r0, [r7, #12]
 8004f2a:	460b      	mov	r3, r1
 8004f2c:	607a      	str	r2, [r7, #4]
 8004f2e:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  uint16_t blk_size;
  uint32_t blk_nbr;
  uint16_t i;
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004f36:	61bb      	str	r3, [r7, #24]

  if (hmsc == NULL)
 8004f38:	69bb      	ldr	r3, [r7, #24]
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d102      	bne.n	8004f44 <SCSI_ReadFormatCapacity+0x22>
  {
    return -1;
 8004f3e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004f42:	e05c      	b.n	8004ffe <SCSI_ReadFormatCapacity+0xdc>
  }

  ret = ((USBD_StorageTypeDef *)pdev->pUserData)->GetCapacity(lun, &blk_nbr, &blk_size);
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8004f4a:	685b      	ldr	r3, [r3, #4]
 8004f4c:	f107 0214 	add.w	r2, r7, #20
 8004f50:	f107 0110 	add.w	r1, r7, #16
 8004f54:	7af8      	ldrb	r0, [r7, #11]
 8004f56:	4798      	blx	r3
 8004f58:	4603      	mov	r3, r0
 8004f5a:	75fb      	strb	r3, [r7, #23]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 8004f5c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d104      	bne.n	8004f6e <SCSI_ReadFormatCapacity+0x4c>
 8004f64:	69bb      	ldr	r3, [r7, #24]
 8004f66:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 8004f6a:	2b02      	cmp	r3, #2
 8004f6c:	d108      	bne.n	8004f80 <SCSI_ReadFormatCapacity+0x5e>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8004f6e:	7af9      	ldrb	r1, [r7, #11]
 8004f70:	233a      	movs	r3, #58	; 0x3a
 8004f72:	2202      	movs	r2, #2
 8004f74:	68f8      	ldr	r0, [r7, #12]
 8004f76:	f000 f91e 	bl	80051b6 <SCSI_SenseCode>
    return -1;
 8004f7a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004f7e:	e03e      	b.n	8004ffe <SCSI_ReadFormatCapacity+0xdc>
  }

  for (i = 0U; i < 12U ; i++)
 8004f80:	2300      	movs	r3, #0
 8004f82:	83fb      	strh	r3, [r7, #30]
 8004f84:	e007      	b.n	8004f96 <SCSI_ReadFormatCapacity+0x74>
  {
    hmsc->bot_data[i] = 0U;
 8004f86:	8bfb      	ldrh	r3, [r7, #30]
 8004f88:	69ba      	ldr	r2, [r7, #24]
 8004f8a:	4413      	add	r3, r2
 8004f8c:	2200      	movs	r2, #0
 8004f8e:	741a      	strb	r2, [r3, #16]
  for (i = 0U; i < 12U ; i++)
 8004f90:	8bfb      	ldrh	r3, [r7, #30]
 8004f92:	3301      	adds	r3, #1
 8004f94:	83fb      	strh	r3, [r7, #30]
 8004f96:	8bfb      	ldrh	r3, [r7, #30]
 8004f98:	2b0b      	cmp	r3, #11
 8004f9a:	d9f4      	bls.n	8004f86 <SCSI_ReadFormatCapacity+0x64>
  }

  hmsc->bot_data[3] = 0x08U;
 8004f9c:	69bb      	ldr	r3, [r7, #24]
 8004f9e:	2208      	movs	r2, #8
 8004fa0:	74da      	strb	r2, [r3, #19]
  hmsc->bot_data[4] = (uint8_t)((blk_nbr - 1U) >> 24);
 8004fa2:	693b      	ldr	r3, [r7, #16]
 8004fa4:	3b01      	subs	r3, #1
 8004fa6:	0e1b      	lsrs	r3, r3, #24
 8004fa8:	b2da      	uxtb	r2, r3
 8004faa:	69bb      	ldr	r3, [r7, #24]
 8004fac:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)((blk_nbr - 1U) >> 16);
 8004fae:	693b      	ldr	r3, [r7, #16]
 8004fb0:	3b01      	subs	r3, #1
 8004fb2:	0c1b      	lsrs	r3, r3, #16
 8004fb4:	b2da      	uxtb	r2, r3
 8004fb6:	69bb      	ldr	r3, [r7, #24]
 8004fb8:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)((blk_nbr - 1U) >>  8);
 8004fba:	693b      	ldr	r3, [r7, #16]
 8004fbc:	3b01      	subs	r3, #1
 8004fbe:	0a1b      	lsrs	r3, r3, #8
 8004fc0:	b2da      	uxtb	r2, r3
 8004fc2:	69bb      	ldr	r3, [r7, #24]
 8004fc4:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(blk_nbr - 1U);
 8004fc6:	693b      	ldr	r3, [r7, #16]
 8004fc8:	b2db      	uxtb	r3, r3
 8004fca:	3b01      	subs	r3, #1
 8004fcc:	b2da      	uxtb	r2, r3
 8004fce:	69bb      	ldr	r3, [r7, #24]
 8004fd0:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data[8] = 0x02U;
 8004fd2:	69bb      	ldr	r3, [r7, #24]
 8004fd4:	2202      	movs	r2, #2
 8004fd6:	761a      	strb	r2, [r3, #24]
  hmsc->bot_data[9] = (uint8_t)(blk_size >>  16);
 8004fd8:	8abb      	ldrh	r3, [r7, #20]
 8004fda:	141b      	asrs	r3, r3, #16
 8004fdc:	b2da      	uxtb	r2, r3
 8004fde:	69bb      	ldr	r3, [r7, #24]
 8004fe0:	765a      	strb	r2, [r3, #25]
  hmsc->bot_data[10] = (uint8_t)(blk_size >>  8);
 8004fe2:	8abb      	ldrh	r3, [r7, #20]
 8004fe4:	0a1b      	lsrs	r3, r3, #8
 8004fe6:	b29b      	uxth	r3, r3
 8004fe8:	b2da      	uxtb	r2, r3
 8004fea:	69bb      	ldr	r3, [r7, #24]
 8004fec:	769a      	strb	r2, [r3, #26]
  hmsc->bot_data[11] = (uint8_t)(blk_size);
 8004fee:	8abb      	ldrh	r3, [r7, #20]
 8004ff0:	b2da      	uxtb	r2, r3
 8004ff2:	69bb      	ldr	r3, [r7, #24]
 8004ff4:	76da      	strb	r2, [r3, #27]

  hmsc->bot_data_length = 12U;
 8004ff6:	69bb      	ldr	r3, [r7, #24]
 8004ff8:	220c      	movs	r2, #12
 8004ffa:	60da      	str	r2, [r3, #12]

  return 0;
 8004ffc:	2300      	movs	r3, #0
}
 8004ffe:	4618      	mov	r0, r3
 8005000:	3720      	adds	r7, #32
 8005002:	46bd      	mov	sp, r7
 8005004:	bd80      	pop	{r7, pc}
	...

08005008 <SCSI_ModeSense6>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ModeSense6(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8005008:	b580      	push	{r7, lr}
 800500a:	b086      	sub	sp, #24
 800500c:	af00      	add	r7, sp, #0
 800500e:	60f8      	str	r0, [r7, #12]
 8005010:	460b      	mov	r3, r1
 8005012:	607a      	str	r2, [r7, #4]
 8005014:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800501c:	613b      	str	r3, [r7, #16]
  uint16_t len = MODE_SENSE6_LEN;
 800501e:	2317      	movs	r3, #23
 8005020:	82fb      	strh	r3, [r7, #22]

  if (hmsc == NULL)
 8005022:	693b      	ldr	r3, [r7, #16]
 8005024:	2b00      	cmp	r3, #0
 8005026:	d102      	bne.n	800502e <SCSI_ModeSense6+0x26>
  {
    return -1;
 8005028:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800502c:	e011      	b.n	8005052 <SCSI_ModeSense6+0x4a>
  }

  if (params[4] <= len)
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	3304      	adds	r3, #4
 8005032:	781b      	ldrb	r3, [r3, #0]
 8005034:	b29b      	uxth	r3, r3
 8005036:	8afa      	ldrh	r2, [r7, #22]
 8005038:	429a      	cmp	r2, r3
 800503a:	d303      	bcc.n	8005044 <SCSI_ModeSense6+0x3c>
  {
    len = params[4];
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	3304      	adds	r3, #4
 8005040:	781b      	ldrb	r3, [r3, #0]
 8005042:	82fb      	strh	r3, [r7, #22]
  }

  (void)SCSI_UpdateBotData(hmsc, MSC_Mode_Sense6_data, len);
 8005044:	8afb      	ldrh	r3, [r7, #22]
 8005046:	461a      	mov	r2, r3
 8005048:	4904      	ldr	r1, [pc, #16]	; (800505c <SCSI_ModeSense6+0x54>)
 800504a:	6938      	ldr	r0, [r7, #16]
 800504c:	f000 fdbc 	bl	8005bc8 <SCSI_UpdateBotData>

  return 0;
 8005050:	2300      	movs	r3, #0
}
 8005052:	4618      	mov	r0, r3
 8005054:	3718      	adds	r7, #24
 8005056:	46bd      	mov	sp, r7
 8005058:	bd80      	pop	{r7, pc}
 800505a:	bf00      	nop
 800505c:	200000c0 	.word	0x200000c0

08005060 <SCSI_ModeSense10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ModeSense10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8005060:	b580      	push	{r7, lr}
 8005062:	b086      	sub	sp, #24
 8005064:	af00      	add	r7, sp, #0
 8005066:	60f8      	str	r0, [r7, #12]
 8005068:	460b      	mov	r3, r1
 800506a:	607a      	str	r2, [r7, #4]
 800506c:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005074:	613b      	str	r3, [r7, #16]
  uint16_t len = MODE_SENSE10_LEN;
 8005076:	231b      	movs	r3, #27
 8005078:	82fb      	strh	r3, [r7, #22]

  if (hmsc == NULL)
 800507a:	693b      	ldr	r3, [r7, #16]
 800507c:	2b00      	cmp	r3, #0
 800507e:	d102      	bne.n	8005086 <SCSI_ModeSense10+0x26>
  {
    return -1;
 8005080:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005084:	e011      	b.n	80050aa <SCSI_ModeSense10+0x4a>
  }

  if (params[8] <= len)
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	3308      	adds	r3, #8
 800508a:	781b      	ldrb	r3, [r3, #0]
 800508c:	b29b      	uxth	r3, r3
 800508e:	8afa      	ldrh	r2, [r7, #22]
 8005090:	429a      	cmp	r2, r3
 8005092:	d303      	bcc.n	800509c <SCSI_ModeSense10+0x3c>
  {
    len = params[8];
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	3308      	adds	r3, #8
 8005098:	781b      	ldrb	r3, [r3, #0]
 800509a:	82fb      	strh	r3, [r7, #22]
  }

  (void)SCSI_UpdateBotData(hmsc, MSC_Mode_Sense10_data, len);
 800509c:	8afb      	ldrh	r3, [r7, #22]
 800509e:	461a      	mov	r2, r3
 80050a0:	4904      	ldr	r1, [pc, #16]	; (80050b4 <SCSI_ModeSense10+0x54>)
 80050a2:	6938      	ldr	r0, [r7, #16]
 80050a4:	f000 fd90 	bl	8005bc8 <SCSI_UpdateBotData>

  return 0;
 80050a8:	2300      	movs	r3, #0
}
 80050aa:	4618      	mov	r0, r3
 80050ac:	3718      	adds	r7, #24
 80050ae:	46bd      	mov	sp, r7
 80050b0:	bd80      	pop	{r7, pc}
 80050b2:	bf00      	nop
 80050b4:	200000d8 	.word	0x200000d8

080050b8 <SCSI_RequestSense>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_RequestSense(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80050b8:	b580      	push	{r7, lr}
 80050ba:	b086      	sub	sp, #24
 80050bc:	af00      	add	r7, sp, #0
 80050be:	60f8      	str	r0, [r7, #12]
 80050c0:	460b      	mov	r3, r1
 80050c2:	607a      	str	r2, [r7, #4]
 80050c4:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  uint8_t i;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80050cc:	613b      	str	r3, [r7, #16]

  if (hmsc == NULL)
 80050ce:	693b      	ldr	r3, [r7, #16]
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d102      	bne.n	80050da <SCSI_RequestSense+0x22>
  {
    return -1;
 80050d4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80050d8:	e069      	b.n	80051ae <SCSI_RequestSense+0xf6>
  }

  if (hmsc->cbw.dDataLength == 0U)
 80050da:	693b      	ldr	r3, [r7, #16]
 80050dc:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d10a      	bne.n	80050fa <SCSI_RequestSense+0x42>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80050e4:	693b      	ldr	r3, [r7, #16]
 80050e6:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 80050ea:	2320      	movs	r3, #32
 80050ec:	2205      	movs	r2, #5
 80050ee:	68f8      	ldr	r0, [r7, #12]
 80050f0:	f000 f861 	bl	80051b6 <SCSI_SenseCode>
    return -1;
 80050f4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80050f8:	e059      	b.n	80051ae <SCSI_RequestSense+0xf6>
  }

  for (i = 0U; i < REQUEST_SENSE_DATA_LEN; i++)
 80050fa:	2300      	movs	r3, #0
 80050fc:	75fb      	strb	r3, [r7, #23]
 80050fe:	e007      	b.n	8005110 <SCSI_RequestSense+0x58>
  {
    hmsc->bot_data[i] = 0U;
 8005100:	7dfb      	ldrb	r3, [r7, #23]
 8005102:	693a      	ldr	r2, [r7, #16]
 8005104:	4413      	add	r3, r2
 8005106:	2200      	movs	r2, #0
 8005108:	741a      	strb	r2, [r3, #16]
  for (i = 0U; i < REQUEST_SENSE_DATA_LEN; i++)
 800510a:	7dfb      	ldrb	r3, [r7, #23]
 800510c:	3301      	adds	r3, #1
 800510e:	75fb      	strb	r3, [r7, #23]
 8005110:	7dfb      	ldrb	r3, [r7, #23]
 8005112:	2b11      	cmp	r3, #17
 8005114:	d9f4      	bls.n	8005100 <SCSI_RequestSense+0x48>
  }

  hmsc->bot_data[0] = 0x70U;
 8005116:	693b      	ldr	r3, [r7, #16]
 8005118:	2270      	movs	r2, #112	; 0x70
 800511a:	741a      	strb	r2, [r3, #16]
  hmsc->bot_data[7] = REQUEST_SENSE_DATA_LEN - 6U;
 800511c:	693b      	ldr	r3, [r7, #16]
 800511e:	220c      	movs	r2, #12
 8005120:	75da      	strb	r2, [r3, #23]

  if ((hmsc->scsi_sense_head != hmsc->scsi_sense_tail))
 8005122:	693b      	ldr	r3, [r7, #16]
 8005124:	f893 2260 	ldrb.w	r2, [r3, #608]	; 0x260
 8005128:	693b      	ldr	r3, [r7, #16]
 800512a:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 800512e:	429a      	cmp	r2, r3
 8005130:	d02e      	beq.n	8005190 <SCSI_RequestSense+0xd8>
  {
    hmsc->bot_data[2] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].Skey;
 8005132:	693b      	ldr	r3, [r7, #16]
 8005134:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 8005138:	461a      	mov	r2, r3
 800513a:	693b      	ldr	r3, [r7, #16]
 800513c:	3248      	adds	r2, #72	; 0x48
 800513e:	f813 2032 	ldrb.w	r2, [r3, r2, lsl #3]
 8005142:	693b      	ldr	r3, [r7, #16]
 8005144:	749a      	strb	r2, [r3, #18]
    hmsc->bot_data[12] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASC;
 8005146:	693b      	ldr	r3, [r7, #16]
 8005148:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 800514c:	693a      	ldr	r2, [r7, #16]
 800514e:	3348      	adds	r3, #72	; 0x48
 8005150:	00db      	lsls	r3, r3, #3
 8005152:	4413      	add	r3, r2
 8005154:	791a      	ldrb	r2, [r3, #4]
 8005156:	693b      	ldr	r3, [r7, #16]
 8005158:	771a      	strb	r2, [r3, #28]
    hmsc->bot_data[13] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASCQ;
 800515a:	693b      	ldr	r3, [r7, #16]
 800515c:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 8005160:	693a      	ldr	r2, [r7, #16]
 8005162:	3348      	adds	r3, #72	; 0x48
 8005164:	00db      	lsls	r3, r3, #3
 8005166:	4413      	add	r3, r2
 8005168:	795a      	ldrb	r2, [r3, #5]
 800516a:	693b      	ldr	r3, [r7, #16]
 800516c:	775a      	strb	r2, [r3, #29]
    hmsc->scsi_sense_head++;
 800516e:	693b      	ldr	r3, [r7, #16]
 8005170:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 8005174:	3301      	adds	r3, #1
 8005176:	b2da      	uxtb	r2, r3
 8005178:	693b      	ldr	r3, [r7, #16]
 800517a:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260

    if (hmsc->scsi_sense_head == SENSE_LIST_DEEPTH)
 800517e:	693b      	ldr	r3, [r7, #16]
 8005180:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 8005184:	2b04      	cmp	r3, #4
 8005186:	d103      	bne.n	8005190 <SCSI_RequestSense+0xd8>
    {
      hmsc->scsi_sense_head = 0U;
 8005188:	693b      	ldr	r3, [r7, #16]
 800518a:	2200      	movs	r2, #0
 800518c:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260
    }
  }

  hmsc->bot_data_length = REQUEST_SENSE_DATA_LEN;
 8005190:	693b      	ldr	r3, [r7, #16]
 8005192:	2212      	movs	r2, #18
 8005194:	60da      	str	r2, [r3, #12]

  if (params[4] <= REQUEST_SENSE_DATA_LEN)
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	3304      	adds	r3, #4
 800519a:	781b      	ldrb	r3, [r3, #0]
 800519c:	2b12      	cmp	r3, #18
 800519e:	d805      	bhi.n	80051ac <SCSI_RequestSense+0xf4>
  {
    hmsc->bot_data_length = params[4];
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	3304      	adds	r3, #4
 80051a4:	781b      	ldrb	r3, [r3, #0]
 80051a6:	461a      	mov	r2, r3
 80051a8:	693b      	ldr	r3, [r7, #16]
 80051aa:	60da      	str	r2, [r3, #12]
  }

  return 0;
 80051ac:	2300      	movs	r3, #0
}
 80051ae:	4618      	mov	r0, r3
 80051b0:	3718      	adds	r7, #24
 80051b2:	46bd      	mov	sp, r7
 80051b4:	bd80      	pop	{r7, pc}

080051b6 <SCSI_SenseCode>:
  * @param  ASC: Additional Sense Code
  * @retval none

  */
void SCSI_SenseCode(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t sKey, uint8_t ASC)
{
 80051b6:	b480      	push	{r7}
 80051b8:	b085      	sub	sp, #20
 80051ba:	af00      	add	r7, sp, #0
 80051bc:	6078      	str	r0, [r7, #4]
 80051be:	4608      	mov	r0, r1
 80051c0:	4611      	mov	r1, r2
 80051c2:	461a      	mov	r2, r3
 80051c4:	4603      	mov	r3, r0
 80051c6:	70fb      	strb	r3, [r7, #3]
 80051c8:	460b      	mov	r3, r1
 80051ca:	70bb      	strb	r3, [r7, #2]
 80051cc:	4613      	mov	r3, r2
 80051ce:	707b      	strb	r3, [r7, #1]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80051d6:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d02c      	beq.n	8005238 <SCSI_SenseCode+0x82>
  {
    return;
  }

  hmsc->scsi_sense[hmsc->scsi_sense_tail].Skey = sKey;
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 80051e4:	461a      	mov	r2, r3
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	3248      	adds	r2, #72	; 0x48
 80051ea:	78b9      	ldrb	r1, [r7, #2]
 80051ec:	f803 1032 	strb.w	r1, [r3, r2, lsl #3]
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.b.ASC = ASC;
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 80051f6:	68fa      	ldr	r2, [r7, #12]
 80051f8:	3348      	adds	r3, #72	; 0x48
 80051fa:	00db      	lsls	r3, r3, #3
 80051fc:	4413      	add	r3, r2
 80051fe:	787a      	ldrb	r2, [r7, #1]
 8005200:	711a      	strb	r2, [r3, #4]
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.b.ASCQ = 0U;
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 8005208:	68fa      	ldr	r2, [r7, #12]
 800520a:	3348      	adds	r3, #72	; 0x48
 800520c:	00db      	lsls	r3, r3, #3
 800520e:	4413      	add	r3, r2
 8005210:	2200      	movs	r2, #0
 8005212:	715a      	strb	r2, [r3, #5]
  hmsc->scsi_sense_tail++;
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 800521a:	3301      	adds	r3, #1
 800521c:	b2da      	uxtb	r2, r3
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	f883 2261 	strb.w	r2, [r3, #609]	; 0x261

  if (hmsc->scsi_sense_tail == SENSE_LIST_DEEPTH)
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 800522a:	2b04      	cmp	r3, #4
 800522c:	d105      	bne.n	800523a <SCSI_SenseCode+0x84>
  {
    hmsc->scsi_sense_tail = 0U;
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	2200      	movs	r2, #0
 8005232:	f883 2261 	strb.w	r2, [r3, #609]	; 0x261
 8005236:	e000      	b.n	800523a <SCSI_SenseCode+0x84>
    return;
 8005238:	bf00      	nop
  }
}
 800523a:	3714      	adds	r7, #20
 800523c:	46bd      	mov	sp, r7
 800523e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005242:	4770      	bx	lr

08005244 <SCSI_StartStopUnit>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_StartStopUnit(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8005244:	b580      	push	{r7, lr}
 8005246:	b086      	sub	sp, #24
 8005248:	af00      	add	r7, sp, #0
 800524a:	60f8      	str	r0, [r7, #12]
 800524c:	460b      	mov	r3, r1
 800524e:	607a      	str	r2, [r7, #4]
 8005250:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005258:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 800525a:	697b      	ldr	r3, [r7, #20]
 800525c:	2b00      	cmp	r3, #0
 800525e:	d102      	bne.n	8005266 <SCSI_StartStopUnit+0x22>
  {
    return -1;
 8005260:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005264:	e03b      	b.n	80052de <SCSI_StartStopUnit+0x9a>
  }

  if ((hmsc->scsi_medium_state == SCSI_MEDIUM_LOCKED) && ((params[4] & 0x3U) == 2U))
 8005266:	697b      	ldr	r3, [r7, #20]
 8005268:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 800526c:	2b01      	cmp	r3, #1
 800526e:	d10f      	bne.n	8005290 <SCSI_StartStopUnit+0x4c>
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	3304      	adds	r3, #4
 8005274:	781b      	ldrb	r3, [r3, #0]
 8005276:	f003 0303 	and.w	r3, r3, #3
 800527a:	2b02      	cmp	r3, #2
 800527c:	d108      	bne.n	8005290 <SCSI_StartStopUnit+0x4c>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
 800527e:	7af9      	ldrb	r1, [r7, #11]
 8005280:	2324      	movs	r3, #36	; 0x24
 8005282:	2205      	movs	r2, #5
 8005284:	68f8      	ldr	r0, [r7, #12]
 8005286:	f7ff ff96 	bl	80051b6 <SCSI_SenseCode>

    return -1;
 800528a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800528e:	e026      	b.n	80052de <SCSI_StartStopUnit+0x9a>
  }

  if ((params[4] & 0x3U) == 0x1U) /* START=1 */
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	3304      	adds	r3, #4
 8005294:	781b      	ldrb	r3, [r3, #0]
 8005296:	f003 0303 	and.w	r3, r3, #3
 800529a:	2b01      	cmp	r3, #1
 800529c:	d104      	bne.n	80052a8 <SCSI_StartStopUnit+0x64>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 800529e:	697b      	ldr	r3, [r7, #20]
 80052a0:	2200      	movs	r2, #0
 80052a2:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
 80052a6:	e016      	b.n	80052d6 <SCSI_StartStopUnit+0x92>
  }
  else if ((params[4] & 0x3U) == 0x2U) /* START=0 and LOEJ Load Eject=1 */
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	3304      	adds	r3, #4
 80052ac:	781b      	ldrb	r3, [r3, #0]
 80052ae:	f003 0303 	and.w	r3, r3, #3
 80052b2:	2b02      	cmp	r3, #2
 80052b4:	d104      	bne.n	80052c0 <SCSI_StartStopUnit+0x7c>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_EJECTED;
 80052b6:	697b      	ldr	r3, [r7, #20]
 80052b8:	2202      	movs	r2, #2
 80052ba:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
 80052be:	e00a      	b.n	80052d6 <SCSI_StartStopUnit+0x92>
  }
  else if ((params[4] & 0x3U) == 0x3U) /* START=1 and LOEJ Load Eject=1 */
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	3304      	adds	r3, #4
 80052c4:	781b      	ldrb	r3, [r3, #0]
 80052c6:	f003 0303 	and.w	r3, r3, #3
 80052ca:	2b03      	cmp	r3, #3
 80052cc:	d103      	bne.n	80052d6 <SCSI_StartStopUnit+0x92>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 80052ce:	697b      	ldr	r3, [r7, #20]
 80052d0:	2200      	movs	r2, #0
 80052d2:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
  }
  else
  {
    /* .. */
  }
  hmsc->bot_data_length = 0U;
 80052d6:	697b      	ldr	r3, [r7, #20]
 80052d8:	2200      	movs	r2, #0
 80052da:	60da      	str	r2, [r3, #12]

  return 0;
 80052dc:	2300      	movs	r3, #0
}
 80052de:	4618      	mov	r0, r3
 80052e0:	3718      	adds	r7, #24
 80052e2:	46bd      	mov	sp, r7
 80052e4:	bd80      	pop	{r7, pc}

080052e6 <SCSI_AllowPreventRemovable>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_AllowPreventRemovable(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80052e6:	b480      	push	{r7}
 80052e8:	b087      	sub	sp, #28
 80052ea:	af00      	add	r7, sp, #0
 80052ec:	60f8      	str	r0, [r7, #12]
 80052ee:	460b      	mov	r3, r1
 80052f0:	607a      	str	r2, [r7, #4]
 80052f2:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80052fa:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 80052fc:	697b      	ldr	r3, [r7, #20]
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d102      	bne.n	8005308 <SCSI_AllowPreventRemovable+0x22>
  {
    return -1;
 8005302:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005306:	e011      	b.n	800532c <SCSI_AllowPreventRemovable+0x46>
  }

  if (params[4] == 0U)
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	3304      	adds	r3, #4
 800530c:	781b      	ldrb	r3, [r3, #0]
 800530e:	2b00      	cmp	r3, #0
 8005310:	d104      	bne.n	800531c <SCSI_AllowPreventRemovable+0x36>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 8005312:	697b      	ldr	r3, [r7, #20]
 8005314:	2200      	movs	r2, #0
 8005316:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
 800531a:	e003      	b.n	8005324 <SCSI_AllowPreventRemovable+0x3e>
  }
  else
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_LOCKED;
 800531c:	697b      	ldr	r3, [r7, #20]
 800531e:	2201      	movs	r2, #1
 8005320:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
  }

  hmsc->bot_data_length = 0U;
 8005324:	697b      	ldr	r3, [r7, #20]
 8005326:	2200      	movs	r2, #0
 8005328:	60da      	str	r2, [r3, #12]

  return 0;
 800532a:	2300      	movs	r3, #0
}
 800532c:	4618      	mov	r0, r3
 800532e:	371c      	adds	r7, #28
 8005330:	46bd      	mov	sp, r7
 8005332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005336:	4770      	bx	lr

08005338 <SCSI_Read10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Read10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8005338:	b580      	push	{r7, lr}
 800533a:	b086      	sub	sp, #24
 800533c:	af00      	add	r7, sp, #0
 800533e:	60f8      	str	r0, [r7, #12]
 8005340:	460b      	mov	r3, r1
 8005342:	607a      	str	r2, [r7, #4]
 8005344:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800534c:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 800534e:	697b      	ldr	r3, [r7, #20]
 8005350:	2b00      	cmp	r3, #0
 8005352:	d102      	bne.n	800535a <SCSI_Read10+0x22>
  {
    return -1;
 8005354:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005358:	e08a      	b.n	8005470 <SCSI_Read10+0x138>
  }

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 800535a:	697b      	ldr	r3, [r7, #20]
 800535c:	7a1b      	ldrb	r3, [r3, #8]
 800535e:	2b00      	cmp	r3, #0
 8005360:	d17c      	bne.n	800545c <SCSI_Read10+0x124>
  {
    /* case 10 : Ho <> Di */
    if ((hmsc->cbw.bmFlags & 0x80U) != 0x80U)
 8005362:	697b      	ldr	r3, [r7, #20]
 8005364:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 8005368:	b25b      	sxtb	r3, r3
 800536a:	2b00      	cmp	r3, #0
 800536c:	db0a      	blt.n	8005384 <SCSI_Read10+0x4c>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800536e:	697b      	ldr	r3, [r7, #20]
 8005370:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8005374:	2320      	movs	r3, #32
 8005376:	2205      	movs	r2, #5
 8005378:	68f8      	ldr	r0, [r7, #12]
 800537a:	f7ff ff1c 	bl	80051b6 <SCSI_SenseCode>
      return -1;
 800537e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005382:	e075      	b.n	8005470 <SCSI_Read10+0x138>
    }

    if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 8005384:	697b      	ldr	r3, [r7, #20]
 8005386:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 800538a:	2b02      	cmp	r3, #2
 800538c:	d108      	bne.n	80053a0 <SCSI_Read10+0x68>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800538e:	7af9      	ldrb	r1, [r7, #11]
 8005390:	233a      	movs	r3, #58	; 0x3a
 8005392:	2202      	movs	r2, #2
 8005394:	68f8      	ldr	r0, [r7, #12]
 8005396:	f7ff ff0e 	bl	80051b6 <SCSI_SenseCode>

      return -1;
 800539a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800539e:	e067      	b.n	8005470 <SCSI_Read10+0x138>
    }

    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80053a6:	689b      	ldr	r3, [r3, #8]
 80053a8:	7afa      	ldrb	r2, [r7, #11]
 80053aa:	4610      	mov	r0, r2
 80053ac:	4798      	blx	r3
 80053ae:	4603      	mov	r3, r0
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d008      	beq.n	80053c6 <SCSI_Read10+0x8e>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 80053b4:	7af9      	ldrb	r1, [r7, #11]
 80053b6:	233a      	movs	r3, #58	; 0x3a
 80053b8:	2202      	movs	r2, #2
 80053ba:	68f8      	ldr	r0, [r7, #12]
 80053bc:	f7ff fefb 	bl	80051b6 <SCSI_SenseCode>
      return -1;
 80053c0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80053c4:	e054      	b.n	8005470 <SCSI_Read10+0x138>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	3302      	adds	r3, #2
 80053ca:	781b      	ldrb	r3, [r3, #0]
 80053cc:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	3303      	adds	r3, #3
 80053d2:	781b      	ldrb	r3, [r3, #0]
 80053d4:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 80053d6:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] <<  8) |
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	3304      	adds	r3, #4
 80053dc:	781b      	ldrb	r3, [r3, #0]
 80053de:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 80053e0:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 80053e2:	687a      	ldr	r2, [r7, #4]
 80053e4:	3205      	adds	r2, #5
 80053e6:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] <<  8) |
 80053e8:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 80053ea:	697b      	ldr	r3, [r7, #20]
 80053ec:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[7] <<  8) | (uint32_t)params[8];
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	3307      	adds	r3, #7
 80053f4:	781b      	ldrb	r3, [r3, #0]
 80053f6:	021b      	lsls	r3, r3, #8
 80053f8:	687a      	ldr	r2, [r7, #4]
 80053fa:	3208      	adds	r2, #8
 80053fc:	7812      	ldrb	r2, [r2, #0]
 80053fe:	431a      	orrs	r2, r3
 8005400:	697b      	ldr	r3, [r7, #20]
 8005402:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 8005406:	697b      	ldr	r3, [r7, #20]
 8005408:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 800540c:	697b      	ldr	r3, [r7, #20]
 800540e:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8005412:	7af9      	ldrb	r1, [r7, #11]
 8005414:	68f8      	ldr	r0, [r7, #12]
 8005416:	f000 faad 	bl	8005974 <SCSI_CheckAddressRange>
 800541a:	4603      	mov	r3, r0
 800541c:	2b00      	cmp	r3, #0
 800541e:	da02      	bge.n	8005426 <SCSI_Read10+0xee>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 8005420:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005424:	e024      	b.n	8005470 <SCSI_Read10+0x138>
    }

    /* cases 4,5 : Hi <> Dn */
    if (hmsc->cbw.dDataLength != (hmsc->scsi_blk_len * hmsc->scsi_blk_size))
 8005426:	697b      	ldr	r3, [r7, #20]
 8005428:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 800542c:	697b      	ldr	r3, [r7, #20]
 800542e:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8005432:	6979      	ldr	r1, [r7, #20]
 8005434:	f8b1 1264 	ldrh.w	r1, [r1, #612]	; 0x264
 8005438:	fb01 f303 	mul.w	r3, r1, r3
 800543c:	429a      	cmp	r2, r3
 800543e:	d00a      	beq.n	8005456 <SCSI_Read10+0x11e>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8005440:	697b      	ldr	r3, [r7, #20]
 8005442:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8005446:	2320      	movs	r3, #32
 8005448:	2205      	movs	r2, #5
 800544a:	68f8      	ldr	r0, [r7, #12]
 800544c:	f7ff feb3 	bl	80051b6 <SCSI_SenseCode>
      return -1;
 8005450:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005454:	e00c      	b.n	8005470 <SCSI_Read10+0x138>
    }

    hmsc->bot_state = USBD_BOT_DATA_IN;
 8005456:	697b      	ldr	r3, [r7, #20]
 8005458:	2202      	movs	r2, #2
 800545a:	721a      	strb	r2, [r3, #8]
  }
  hmsc->bot_data_length = MSC_MEDIA_PACKET;
 800545c:	697b      	ldr	r3, [r7, #20]
 800545e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005462:	60da      	str	r2, [r3, #12]

  return SCSI_ProcessRead(pdev, lun);
 8005464:	7afb      	ldrb	r3, [r7, #11]
 8005466:	4619      	mov	r1, r3
 8005468:	68f8      	ldr	r0, [r7, #12]
 800546a:	f000 faab 	bl	80059c4 <SCSI_ProcessRead>
 800546e:	4603      	mov	r3, r0
}
 8005470:	4618      	mov	r0, r3
 8005472:	3718      	adds	r7, #24
 8005474:	46bd      	mov	sp, r7
 8005476:	bd80      	pop	{r7, pc}

08005478 <SCSI_Read12>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Read12(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8005478:	b580      	push	{r7, lr}
 800547a:	b086      	sub	sp, #24
 800547c:	af00      	add	r7, sp, #0
 800547e:	60f8      	str	r0, [r7, #12]
 8005480:	460b      	mov	r3, r1
 8005482:	607a      	str	r2, [r7, #4]
 8005484:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800548c:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 800548e:	697b      	ldr	r3, [r7, #20]
 8005490:	2b00      	cmp	r3, #0
 8005492:	d102      	bne.n	800549a <SCSI_Read12+0x22>
  {
    return -1;
 8005494:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005498:	e095      	b.n	80055c6 <SCSI_Read12+0x14e>
  }

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 800549a:	697b      	ldr	r3, [r7, #20]
 800549c:	7a1b      	ldrb	r3, [r3, #8]
 800549e:	2b00      	cmp	r3, #0
 80054a0:	f040 8087 	bne.w	80055b2 <SCSI_Read12+0x13a>
  {
    /* case 10 : Ho <> Di */
    if ((hmsc->cbw.bmFlags & 0x80U) != 0x80U)
 80054a4:	697b      	ldr	r3, [r7, #20]
 80054a6:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 80054aa:	b25b      	sxtb	r3, r3
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	db0a      	blt.n	80054c6 <SCSI_Read12+0x4e>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80054b0:	697b      	ldr	r3, [r7, #20]
 80054b2:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 80054b6:	2320      	movs	r3, #32
 80054b8:	2205      	movs	r2, #5
 80054ba:	68f8      	ldr	r0, [r7, #12]
 80054bc:	f7ff fe7b 	bl	80051b6 <SCSI_SenseCode>
      return -1;
 80054c0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80054c4:	e07f      	b.n	80055c6 <SCSI_Read12+0x14e>
    }

    if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 80054c6:	697b      	ldr	r3, [r7, #20]
 80054c8:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 80054cc:	2b02      	cmp	r3, #2
 80054ce:	d108      	bne.n	80054e2 <SCSI_Read12+0x6a>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 80054d0:	7af9      	ldrb	r1, [r7, #11]
 80054d2:	233a      	movs	r3, #58	; 0x3a
 80054d4:	2202      	movs	r2, #2
 80054d6:	68f8      	ldr	r0, [r7, #12]
 80054d8:	f7ff fe6d 	bl	80051b6 <SCSI_SenseCode>
      return -1;
 80054dc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80054e0:	e071      	b.n	80055c6 <SCSI_Read12+0x14e>
    }

    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80054e8:	689b      	ldr	r3, [r3, #8]
 80054ea:	7afa      	ldrb	r2, [r7, #11]
 80054ec:	4610      	mov	r0, r2
 80054ee:	4798      	blx	r3
 80054f0:	4603      	mov	r3, r0
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d008      	beq.n	8005508 <SCSI_Read12+0x90>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 80054f6:	7af9      	ldrb	r1, [r7, #11]
 80054f8:	233a      	movs	r3, #58	; 0x3a
 80054fa:	2202      	movs	r2, #2
 80054fc:	68f8      	ldr	r0, [r7, #12]
 80054fe:	f7ff fe5a 	bl	80051b6 <SCSI_SenseCode>
      return -1;
 8005502:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005506:	e05e      	b.n	80055c6 <SCSI_Read12+0x14e>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	3302      	adds	r3, #2
 800550c:	781b      	ldrb	r3, [r3, #0]
 800550e:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	3303      	adds	r3, #3
 8005514:	781b      	ldrb	r3, [r3, #0]
 8005516:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8005518:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] <<  8) |
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	3304      	adds	r3, #4
 800551e:	781b      	ldrb	r3, [r3, #0]
 8005520:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 8005522:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 8005524:	687a      	ldr	r2, [r7, #4]
 8005526:	3205      	adds	r2, #5
 8005528:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] <<  8) |
 800552a:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800552c:	697b      	ldr	r3, [r7, #20]
 800552e:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	3306      	adds	r3, #6
 8005536:	781b      	ldrb	r3, [r3, #0]
 8005538:	061a      	lsls	r2, r3, #24
                         ((uint32_t)params[7] << 16) |
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	3307      	adds	r3, #7
 800553e:	781b      	ldrb	r3, [r3, #0]
 8005540:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8005542:	431a      	orrs	r2, r3
                         ((uint32_t)params[8] << 8) |
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	3308      	adds	r3, #8
 8005548:	781b      	ldrb	r3, [r3, #0]
 800554a:	021b      	lsls	r3, r3, #8
                         ((uint32_t)params[7] << 16) |
 800554c:	4313      	orrs	r3, r2
                         (uint32_t)params[9];
 800554e:	687a      	ldr	r2, [r7, #4]
 8005550:	3209      	adds	r2, #9
 8005552:	7812      	ldrb	r2, [r2, #0]
                         ((uint32_t)params[8] << 8) |
 8005554:	431a      	orrs	r2, r3
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8005556:	697b      	ldr	r3, [r7, #20]
 8005558:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 800555c:	697b      	ldr	r3, [r7, #20]
 800555e:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 8005562:	697b      	ldr	r3, [r7, #20]
 8005564:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8005568:	7af9      	ldrb	r1, [r7, #11]
 800556a:	68f8      	ldr	r0, [r7, #12]
 800556c:	f000 fa02 	bl	8005974 <SCSI_CheckAddressRange>
 8005570:	4603      	mov	r3, r0
 8005572:	2b00      	cmp	r3, #0
 8005574:	da02      	bge.n	800557c <SCSI_Read12+0x104>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 8005576:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800557a:	e024      	b.n	80055c6 <SCSI_Read12+0x14e>
    }

    /* cases 4,5 : Hi <> Dn */
    if (hmsc->cbw.dDataLength != (hmsc->scsi_blk_len * hmsc->scsi_blk_size))
 800557c:	697b      	ldr	r3, [r7, #20]
 800557e:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 8005582:	697b      	ldr	r3, [r7, #20]
 8005584:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8005588:	6979      	ldr	r1, [r7, #20]
 800558a:	f8b1 1264 	ldrh.w	r1, [r1, #612]	; 0x264
 800558e:	fb01 f303 	mul.w	r3, r1, r3
 8005592:	429a      	cmp	r2, r3
 8005594:	d00a      	beq.n	80055ac <SCSI_Read12+0x134>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8005596:	697b      	ldr	r3, [r7, #20]
 8005598:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800559c:	2320      	movs	r3, #32
 800559e:	2205      	movs	r2, #5
 80055a0:	68f8      	ldr	r0, [r7, #12]
 80055a2:	f7ff fe08 	bl	80051b6 <SCSI_SenseCode>
      return -1;
 80055a6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80055aa:	e00c      	b.n	80055c6 <SCSI_Read12+0x14e>
    }

    hmsc->bot_state = USBD_BOT_DATA_IN;
 80055ac:	697b      	ldr	r3, [r7, #20]
 80055ae:	2202      	movs	r2, #2
 80055b0:	721a      	strb	r2, [r3, #8]
  }
  hmsc->bot_data_length = MSC_MEDIA_PACKET;
 80055b2:	697b      	ldr	r3, [r7, #20]
 80055b4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80055b8:	60da      	str	r2, [r3, #12]

  return SCSI_ProcessRead(pdev, lun);
 80055ba:	7afb      	ldrb	r3, [r7, #11]
 80055bc:	4619      	mov	r1, r3
 80055be:	68f8      	ldr	r0, [r7, #12]
 80055c0:	f000 fa00 	bl	80059c4 <SCSI_ProcessRead>
 80055c4:	4603      	mov	r3, r0
}
 80055c6:	4618      	mov	r0, r3
 80055c8:	3718      	adds	r7, #24
 80055ca:	46bd      	mov	sp, r7
 80055cc:	bd80      	pop	{r7, pc}

080055ce <SCSI_Write10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Write10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80055ce:	b580      	push	{r7, lr}
 80055d0:	b086      	sub	sp, #24
 80055d2:	af00      	add	r7, sp, #0
 80055d4:	60f8      	str	r0, [r7, #12]
 80055d6:	460b      	mov	r3, r1
 80055d8:	607a      	str	r2, [r7, #4]
 80055da:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80055e2:	617b      	str	r3, [r7, #20]
  uint32_t len;

  if (hmsc == NULL)
 80055e4:	697b      	ldr	r3, [r7, #20]
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d102      	bne.n	80055f0 <SCSI_Write10+0x22>
  {
    return -1;
 80055ea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80055ee:	e0af      	b.n	8005750 <SCSI_Write10+0x182>
  }

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 80055f0:	697b      	ldr	r3, [r7, #20]
 80055f2:	7a1b      	ldrb	r3, [r3, #8]
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	f040 80a5 	bne.w	8005744 <SCSI_Write10+0x176>
  {
    if (hmsc->cbw.dDataLength == 0U)
 80055fa:	697b      	ldr	r3, [r7, #20]
 80055fc:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8005600:	2b00      	cmp	r3, #0
 8005602:	d10a      	bne.n	800561a <SCSI_Write10+0x4c>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8005604:	697b      	ldr	r3, [r7, #20]
 8005606:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800560a:	2320      	movs	r3, #32
 800560c:	2205      	movs	r2, #5
 800560e:	68f8      	ldr	r0, [r7, #12]
 8005610:	f7ff fdd1 	bl	80051b6 <SCSI_SenseCode>
      return -1;
 8005614:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005618:	e09a      	b.n	8005750 <SCSI_Write10+0x182>
    }

    /* case 8 : Hi <> Do */
    if ((hmsc->cbw.bmFlags & 0x80U) == 0x80U)
 800561a:	697b      	ldr	r3, [r7, #20]
 800561c:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 8005620:	b25b      	sxtb	r3, r3
 8005622:	2b00      	cmp	r3, #0
 8005624:	da0a      	bge.n	800563c <SCSI_Write10+0x6e>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8005626:	697b      	ldr	r3, [r7, #20]
 8005628:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800562c:	2320      	movs	r3, #32
 800562e:	2205      	movs	r2, #5
 8005630:	68f8      	ldr	r0, [r7, #12]
 8005632:	f7ff fdc0 	bl	80051b6 <SCSI_SenseCode>
      return -1;
 8005636:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800563a:	e089      	b.n	8005750 <SCSI_Write10+0x182>
    }

    /* Check whether Media is ready */
    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005642:	689b      	ldr	r3, [r3, #8]
 8005644:	7afa      	ldrb	r2, [r7, #11]
 8005646:	4610      	mov	r0, r2
 8005648:	4798      	blx	r3
 800564a:	4603      	mov	r3, r0
 800564c:	2b00      	cmp	r3, #0
 800564e:	d008      	beq.n	8005662 <SCSI_Write10+0x94>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8005650:	7af9      	ldrb	r1, [r7, #11]
 8005652:	233a      	movs	r3, #58	; 0x3a
 8005654:	2202      	movs	r2, #2
 8005656:	68f8      	ldr	r0, [r7, #12]
 8005658:	f7ff fdad 	bl	80051b6 <SCSI_SenseCode>
      return -1;
 800565c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005660:	e076      	b.n	8005750 <SCSI_Write10+0x182>
    }

    /* Check If media is write-protected */
    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsWriteProtected(lun) != 0)
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005668:	68db      	ldr	r3, [r3, #12]
 800566a:	7afa      	ldrb	r2, [r7, #11]
 800566c:	4610      	mov	r0, r2
 800566e:	4798      	blx	r3
 8005670:	4603      	mov	r3, r0
 8005672:	2b00      	cmp	r3, #0
 8005674:	d008      	beq.n	8005688 <SCSI_Write10+0xba>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, WRITE_PROTECTED);
 8005676:	7af9      	ldrb	r1, [r7, #11]
 8005678:	2327      	movs	r3, #39	; 0x27
 800567a:	2202      	movs	r2, #2
 800567c:	68f8      	ldr	r0, [r7, #12]
 800567e:	f7ff fd9a 	bl	80051b6 <SCSI_SenseCode>
      return -1;
 8005682:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005686:	e063      	b.n	8005750 <SCSI_Write10+0x182>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	3302      	adds	r3, #2
 800568c:	781b      	ldrb	r3, [r3, #0]
 800568e:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	3303      	adds	r3, #3
 8005694:	781b      	ldrb	r3, [r3, #0]
 8005696:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8005698:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] << 8) |
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	3304      	adds	r3, #4
 800569e:	781b      	ldrb	r3, [r3, #0]
 80056a0:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 80056a2:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 80056a4:	687a      	ldr	r2, [r7, #4]
 80056a6:	3205      	adds	r2, #5
 80056a8:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] << 8) |
 80056aa:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 80056ac:	697b      	ldr	r3, [r7, #20]
 80056ae:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	3307      	adds	r3, #7
 80056b6:	781b      	ldrb	r3, [r3, #0]
 80056b8:	021b      	lsls	r3, r3, #8
                         (uint32_t)params[8];
 80056ba:	687a      	ldr	r2, [r7, #4]
 80056bc:	3208      	adds	r2, #8
 80056be:	7812      	ldrb	r2, [r2, #0]
    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 80056c0:	431a      	orrs	r2, r3
 80056c2:	697b      	ldr	r3, [r7, #20]
 80056c4:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

    /* check if LBA address is in the right range */
    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 80056c8:	697b      	ldr	r3, [r7, #20]
 80056ca:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 80056ce:	697b      	ldr	r3, [r7, #20]
 80056d0:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 80056d4:	7af9      	ldrb	r1, [r7, #11]
 80056d6:	68f8      	ldr	r0, [r7, #12]
 80056d8:	f000 f94c 	bl	8005974 <SCSI_CheckAddressRange>
 80056dc:	4603      	mov	r3, r0
 80056de:	2b00      	cmp	r3, #0
 80056e0:	da02      	bge.n	80056e8 <SCSI_Write10+0x11a>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 80056e2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80056e6:	e033      	b.n	8005750 <SCSI_Write10+0x182>
    }

    len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 80056e8:	697b      	ldr	r3, [r7, #20]
 80056ea:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 80056ee:	697a      	ldr	r2, [r7, #20]
 80056f0:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 80056f4:	fb02 f303 	mul.w	r3, r2, r3
 80056f8:	613b      	str	r3, [r7, #16]

    /* cases 3,11,13 : Hn,Ho <> D0 */
    if (hmsc->cbw.dDataLength != len)
 80056fa:	697b      	ldr	r3, [r7, #20]
 80056fc:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8005700:	693a      	ldr	r2, [r7, #16]
 8005702:	429a      	cmp	r2, r3
 8005704:	d00a      	beq.n	800571c <SCSI_Write10+0x14e>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8005706:	697b      	ldr	r3, [r7, #20]
 8005708:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800570c:	2320      	movs	r3, #32
 800570e:	2205      	movs	r2, #5
 8005710:	68f8      	ldr	r0, [r7, #12]
 8005712:	f7ff fd50 	bl	80051b6 <SCSI_SenseCode>
      return -1;
 8005716:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800571a:	e019      	b.n	8005750 <SCSI_Write10+0x182>
    }

    len = MIN(len, MSC_MEDIA_PACKET);
 800571c:	693b      	ldr	r3, [r7, #16]
 800571e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005722:	bf28      	it	cs
 8005724:	f44f 7300 	movcs.w	r3, #512	; 0x200
 8005728:	613b      	str	r3, [r7, #16]

    /* Prepare EP to receive first data packet */
    hmsc->bot_state = USBD_BOT_DATA_OUT;
 800572a:	697b      	ldr	r3, [r7, #20]
 800572c:	2201      	movs	r2, #1
 800572e:	721a      	strb	r2, [r3, #8]
    (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, hmsc->bot_data, len);
 8005730:	697b      	ldr	r3, [r7, #20]
 8005732:	f103 0210 	add.w	r2, r3, #16
 8005736:	693b      	ldr	r3, [r7, #16]
 8005738:	2101      	movs	r1, #1
 800573a:	68f8      	ldr	r0, [r7, #12]
 800573c:	f002 f80d 	bl	800775a <USBD_LL_PrepareReceive>
  else /* Write Process ongoing */
  {
    return SCSI_ProcessWrite(pdev, lun);
  }

  return 0;
 8005740:	2300      	movs	r3, #0
 8005742:	e005      	b.n	8005750 <SCSI_Write10+0x182>
    return SCSI_ProcessWrite(pdev, lun);
 8005744:	7afb      	ldrb	r3, [r7, #11]
 8005746:	4619      	mov	r1, r3
 8005748:	68f8      	ldr	r0, [r7, #12]
 800574a:	f000 f9b4 	bl	8005ab6 <SCSI_ProcessWrite>
 800574e:	4603      	mov	r3, r0
}
 8005750:	4618      	mov	r0, r3
 8005752:	3718      	adds	r7, #24
 8005754:	46bd      	mov	sp, r7
 8005756:	bd80      	pop	{r7, pc}

08005758 <SCSI_Write12>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Write12(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8005758:	b580      	push	{r7, lr}
 800575a:	b086      	sub	sp, #24
 800575c:	af00      	add	r7, sp, #0
 800575e:	60f8      	str	r0, [r7, #12]
 8005760:	460b      	mov	r3, r1
 8005762:	607a      	str	r2, [r7, #4]
 8005764:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800576c:	617b      	str	r3, [r7, #20]
  uint32_t len;

  if (hmsc == NULL)
 800576e:	697b      	ldr	r3, [r7, #20]
 8005770:	2b00      	cmp	r3, #0
 8005772:	d102      	bne.n	800577a <SCSI_Write12+0x22>
  {
    return -1;
 8005774:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005778:	e0bf      	b.n	80058fa <SCSI_Write12+0x1a2>
  }

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 800577a:	697b      	ldr	r3, [r7, #20]
 800577c:	7a1b      	ldrb	r3, [r3, #8]
 800577e:	2b00      	cmp	r3, #0
 8005780:	f040 80b5 	bne.w	80058ee <SCSI_Write12+0x196>
  {
    if (hmsc->cbw.dDataLength == 0U)
 8005784:	697b      	ldr	r3, [r7, #20]
 8005786:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800578a:	2b00      	cmp	r3, #0
 800578c:	d10a      	bne.n	80057a4 <SCSI_Write12+0x4c>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800578e:	697b      	ldr	r3, [r7, #20]
 8005790:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8005794:	2320      	movs	r3, #32
 8005796:	2205      	movs	r2, #5
 8005798:	68f8      	ldr	r0, [r7, #12]
 800579a:	f7ff fd0c 	bl	80051b6 <SCSI_SenseCode>
      return -1;
 800579e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80057a2:	e0aa      	b.n	80058fa <SCSI_Write12+0x1a2>
    }

    /* case 8 : Hi <> Do */
    if ((hmsc->cbw.bmFlags & 0x80U) == 0x80U)
 80057a4:	697b      	ldr	r3, [r7, #20]
 80057a6:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 80057aa:	b25b      	sxtb	r3, r3
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	da0a      	bge.n	80057c6 <SCSI_Write12+0x6e>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80057b0:	697b      	ldr	r3, [r7, #20]
 80057b2:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 80057b6:	2320      	movs	r3, #32
 80057b8:	2205      	movs	r2, #5
 80057ba:	68f8      	ldr	r0, [r7, #12]
 80057bc:	f7ff fcfb 	bl	80051b6 <SCSI_SenseCode>
      return -1;
 80057c0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80057c4:	e099      	b.n	80058fa <SCSI_Write12+0x1a2>
    }

    /* Check whether Media is ready */
    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80057cc:	689b      	ldr	r3, [r3, #8]
 80057ce:	7afa      	ldrb	r2, [r7, #11]
 80057d0:	4610      	mov	r0, r2
 80057d2:	4798      	blx	r3
 80057d4:	4603      	mov	r3, r0
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d00b      	beq.n	80057f2 <SCSI_Write12+0x9a>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 80057da:	7af9      	ldrb	r1, [r7, #11]
 80057dc:	233a      	movs	r3, #58	; 0x3a
 80057de:	2202      	movs	r2, #2
 80057e0:	68f8      	ldr	r0, [r7, #12]
 80057e2:	f7ff fce8 	bl	80051b6 <SCSI_SenseCode>
      hmsc->bot_state = USBD_BOT_NO_DATA;
 80057e6:	697b      	ldr	r3, [r7, #20]
 80057e8:	2205      	movs	r2, #5
 80057ea:	721a      	strb	r2, [r3, #8]
      return -1;
 80057ec:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80057f0:	e083      	b.n	80058fa <SCSI_Write12+0x1a2>
    }

    /* Check If media is write-protected */
    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsWriteProtected(lun) != 0)
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80057f8:	68db      	ldr	r3, [r3, #12]
 80057fa:	7afa      	ldrb	r2, [r7, #11]
 80057fc:	4610      	mov	r0, r2
 80057fe:	4798      	blx	r3
 8005800:	4603      	mov	r3, r0
 8005802:	2b00      	cmp	r3, #0
 8005804:	d00b      	beq.n	800581e <SCSI_Write12+0xc6>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, WRITE_PROTECTED);
 8005806:	7af9      	ldrb	r1, [r7, #11]
 8005808:	2327      	movs	r3, #39	; 0x27
 800580a:	2202      	movs	r2, #2
 800580c:	68f8      	ldr	r0, [r7, #12]
 800580e:	f7ff fcd2 	bl	80051b6 <SCSI_SenseCode>
      hmsc->bot_state = USBD_BOT_NO_DATA;
 8005812:	697b      	ldr	r3, [r7, #20]
 8005814:	2205      	movs	r2, #5
 8005816:	721a      	strb	r2, [r3, #8]
      return -1;
 8005818:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800581c:	e06d      	b.n	80058fa <SCSI_Write12+0x1a2>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	3302      	adds	r3, #2
 8005822:	781b      	ldrb	r3, [r3, #0]
 8005824:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	3303      	adds	r3, #3
 800582a:	781b      	ldrb	r3, [r3, #0]
 800582c:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800582e:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] << 8) |
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	3304      	adds	r3, #4
 8005834:	781b      	ldrb	r3, [r3, #0]
 8005836:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 8005838:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 800583a:	687a      	ldr	r2, [r7, #4]
 800583c:	3205      	adds	r2, #5
 800583e:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] << 8) |
 8005840:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8005842:	697b      	ldr	r3, [r7, #20]
 8005844:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	3306      	adds	r3, #6
 800584c:	781b      	ldrb	r3, [r3, #0]
 800584e:	061a      	lsls	r2, r3, #24
                         ((uint32_t)params[7] << 16) |
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	3307      	adds	r3, #7
 8005854:	781b      	ldrb	r3, [r3, #0]
 8005856:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8005858:	431a      	orrs	r2, r3
                         ((uint32_t)params[8] << 8) |
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	3308      	adds	r3, #8
 800585e:	781b      	ldrb	r3, [r3, #0]
 8005860:	021b      	lsls	r3, r3, #8
                         ((uint32_t)params[7] << 16) |
 8005862:	4313      	orrs	r3, r2
                         (uint32_t)params[9];
 8005864:	687a      	ldr	r2, [r7, #4]
 8005866:	3209      	adds	r2, #9
 8005868:	7812      	ldrb	r2, [r2, #0]
                         ((uint32_t)params[8] << 8) |
 800586a:	431a      	orrs	r2, r3
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 800586c:	697b      	ldr	r3, [r7, #20]
 800586e:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

    /* check if LBA address is in the right range */
    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 8005872:	697b      	ldr	r3, [r7, #20]
 8005874:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 8005878:	697b      	ldr	r3, [r7, #20]
 800587a:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800587e:	7af9      	ldrb	r1, [r7, #11]
 8005880:	68f8      	ldr	r0, [r7, #12]
 8005882:	f000 f877 	bl	8005974 <SCSI_CheckAddressRange>
 8005886:	4603      	mov	r3, r0
 8005888:	2b00      	cmp	r3, #0
 800588a:	da02      	bge.n	8005892 <SCSI_Write12+0x13a>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 800588c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005890:	e033      	b.n	80058fa <SCSI_Write12+0x1a2>
    }

    len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 8005892:	697b      	ldr	r3, [r7, #20]
 8005894:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8005898:	697a      	ldr	r2, [r7, #20]
 800589a:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 800589e:	fb02 f303 	mul.w	r3, r2, r3
 80058a2:	613b      	str	r3, [r7, #16]

    /* cases 3,11,13 : Hn,Ho <> D0 */
    if (hmsc->cbw.dDataLength != len)
 80058a4:	697b      	ldr	r3, [r7, #20]
 80058a6:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80058aa:	693a      	ldr	r2, [r7, #16]
 80058ac:	429a      	cmp	r2, r3
 80058ae:	d00a      	beq.n	80058c6 <SCSI_Write12+0x16e>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80058b0:	697b      	ldr	r3, [r7, #20]
 80058b2:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 80058b6:	2320      	movs	r3, #32
 80058b8:	2205      	movs	r2, #5
 80058ba:	68f8      	ldr	r0, [r7, #12]
 80058bc:	f7ff fc7b 	bl	80051b6 <SCSI_SenseCode>
      return -1;
 80058c0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80058c4:	e019      	b.n	80058fa <SCSI_Write12+0x1a2>
    }

    len = MIN(len, MSC_MEDIA_PACKET);
 80058c6:	693b      	ldr	r3, [r7, #16]
 80058c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80058cc:	bf28      	it	cs
 80058ce:	f44f 7300 	movcs.w	r3, #512	; 0x200
 80058d2:	613b      	str	r3, [r7, #16]

    /* Prepare EP to receive first data packet */
    hmsc->bot_state = USBD_BOT_DATA_OUT;
 80058d4:	697b      	ldr	r3, [r7, #20]
 80058d6:	2201      	movs	r2, #1
 80058d8:	721a      	strb	r2, [r3, #8]
    (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, hmsc->bot_data, len);
 80058da:	697b      	ldr	r3, [r7, #20]
 80058dc:	f103 0210 	add.w	r2, r3, #16
 80058e0:	693b      	ldr	r3, [r7, #16]
 80058e2:	2101      	movs	r1, #1
 80058e4:	68f8      	ldr	r0, [r7, #12]
 80058e6:	f001 ff38 	bl	800775a <USBD_LL_PrepareReceive>
  else /* Write Process ongoing */
  {
    return SCSI_ProcessWrite(pdev, lun);
  }

  return 0;
 80058ea:	2300      	movs	r3, #0
 80058ec:	e005      	b.n	80058fa <SCSI_Write12+0x1a2>
    return SCSI_ProcessWrite(pdev, lun);
 80058ee:	7afb      	ldrb	r3, [r7, #11]
 80058f0:	4619      	mov	r1, r3
 80058f2:	68f8      	ldr	r0, [r7, #12]
 80058f4:	f000 f8df 	bl	8005ab6 <SCSI_ProcessWrite>
 80058f8:	4603      	mov	r3, r0
}
 80058fa:	4618      	mov	r0, r3
 80058fc:	3718      	adds	r7, #24
 80058fe:	46bd      	mov	sp, r7
 8005900:	bd80      	pop	{r7, pc}

08005902 <SCSI_Verify10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Verify10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8005902:	b580      	push	{r7, lr}
 8005904:	b086      	sub	sp, #24
 8005906:	af00      	add	r7, sp, #0
 8005908:	60f8      	str	r0, [r7, #12]
 800590a:	460b      	mov	r3, r1
 800590c:	607a      	str	r2, [r7, #4]
 800590e:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005916:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 8005918:	697b      	ldr	r3, [r7, #20]
 800591a:	2b00      	cmp	r3, #0
 800591c:	d102      	bne.n	8005924 <SCSI_Verify10+0x22>
  {
    return -1;
 800591e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005922:	e023      	b.n	800596c <SCSI_Verify10+0x6a>
  }

  if ((params[1] & 0x02U) == 0x02U)
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	3301      	adds	r3, #1
 8005928:	781b      	ldrb	r3, [r3, #0]
 800592a:	f003 0302 	and.w	r3, r3, #2
 800592e:	2b00      	cmp	r3, #0
 8005930:	d008      	beq.n	8005944 <SCSI_Verify10+0x42>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
 8005932:	7af9      	ldrb	r1, [r7, #11]
 8005934:	2324      	movs	r3, #36	; 0x24
 8005936:	2205      	movs	r2, #5
 8005938:	68f8      	ldr	r0, [r7, #12]
 800593a:	f7ff fc3c 	bl	80051b6 <SCSI_SenseCode>
    return -1; /* Error, Verify Mode Not supported*/
 800593e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005942:	e013      	b.n	800596c <SCSI_Verify10+0x6a>
  }

  if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr, hmsc->scsi_blk_len) < 0)
 8005944:	697b      	ldr	r3, [r7, #20]
 8005946:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 800594a:	697b      	ldr	r3, [r7, #20]
 800594c:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8005950:	7af9      	ldrb	r1, [r7, #11]
 8005952:	68f8      	ldr	r0, [r7, #12]
 8005954:	f000 f80e 	bl	8005974 <SCSI_CheckAddressRange>
 8005958:	4603      	mov	r3, r0
 800595a:	2b00      	cmp	r3, #0
 800595c:	da02      	bge.n	8005964 <SCSI_Verify10+0x62>
  {
    return -1; /* error */
 800595e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005962:	e003      	b.n	800596c <SCSI_Verify10+0x6a>
  }

  hmsc->bot_data_length = 0U;
 8005964:	697b      	ldr	r3, [r7, #20]
 8005966:	2200      	movs	r2, #0
 8005968:	60da      	str	r2, [r3, #12]

  return 0;
 800596a:	2300      	movs	r3, #0
}
 800596c:	4618      	mov	r0, r3
 800596e:	3718      	adds	r7, #24
 8005970:	46bd      	mov	sp, r7
 8005972:	bd80      	pop	{r7, pc}

08005974 <SCSI_CheckAddressRange>:
  * @param  blk_nbr: number of block to be processed
  * @retval status
  */
static int8_t SCSI_CheckAddressRange(USBD_HandleTypeDef *pdev, uint8_t lun,
                                     uint32_t blk_offset, uint32_t blk_nbr)
{
 8005974:	b580      	push	{r7, lr}
 8005976:	b086      	sub	sp, #24
 8005978:	af00      	add	r7, sp, #0
 800597a:	60f8      	str	r0, [r7, #12]
 800597c:	607a      	str	r2, [r7, #4]
 800597e:	603b      	str	r3, [r7, #0]
 8005980:	460b      	mov	r3, r1
 8005982:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800598a:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 800598c:	697b      	ldr	r3, [r7, #20]
 800598e:	2b00      	cmp	r3, #0
 8005990:	d102      	bne.n	8005998 <SCSI_CheckAddressRange+0x24>
  {
    return -1;
 8005992:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005996:	e011      	b.n	80059bc <SCSI_CheckAddressRange+0x48>
  }

  if ((blk_offset + blk_nbr) > hmsc->scsi_blk_nbr)
 8005998:	687a      	ldr	r2, [r7, #4]
 800599a:	683b      	ldr	r3, [r7, #0]
 800599c:	441a      	add	r2, r3
 800599e:	697b      	ldr	r3, [r7, #20]
 80059a0:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 80059a4:	429a      	cmp	r2, r3
 80059a6:	d908      	bls.n	80059ba <SCSI_CheckAddressRange+0x46>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, ADDRESS_OUT_OF_RANGE);
 80059a8:	7af9      	ldrb	r1, [r7, #11]
 80059aa:	2321      	movs	r3, #33	; 0x21
 80059ac:	2205      	movs	r2, #5
 80059ae:	68f8      	ldr	r0, [r7, #12]
 80059b0:	f7ff fc01 	bl	80051b6 <SCSI_SenseCode>
    return -1;
 80059b4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80059b8:	e000      	b.n	80059bc <SCSI_CheckAddressRange+0x48>
  }

  return 0;
 80059ba:	2300      	movs	r3, #0
}
 80059bc:	4618      	mov	r0, r3
 80059be:	3718      	adds	r7, #24
 80059c0:	46bd      	mov	sp, r7
 80059c2:	bd80      	pop	{r7, pc}

080059c4 <SCSI_ProcessRead>:
  *         Handle Read Process
  * @param  lun: Logical unit number
  * @retval status
  */
static int8_t SCSI_ProcessRead(USBD_HandleTypeDef *pdev, uint8_t lun)
{
 80059c4:	b590      	push	{r4, r7, lr}
 80059c6:	b085      	sub	sp, #20
 80059c8:	af00      	add	r7, sp, #0
 80059ca:	6078      	str	r0, [r7, #4]
 80059cc:	460b      	mov	r3, r1
 80059ce:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80059d6:	60fb      	str	r3, [r7, #12]
  uint32_t len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 80059de:	68fa      	ldr	r2, [r7, #12]
 80059e0:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 80059e4:	fb02 f303 	mul.w	r3, r2, r3
 80059e8:	60bb      	str	r3, [r7, #8]

  if (hmsc == NULL)
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d102      	bne.n	80059f6 <SCSI_ProcessRead+0x32>
  {
    return -1;
 80059f0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80059f4:	e05b      	b.n	8005aae <SCSI_ProcessRead+0xea>
  }

  len = MIN(len, MSC_MEDIA_PACKET);
 80059f6:	68bb      	ldr	r3, [r7, #8]
 80059f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80059fc:	bf28      	it	cs
 80059fe:	f44f 7300 	movcs.w	r3, #512	; 0x200
 8005a02:	60bb      	str	r3, [r7, #8]

  if (((USBD_StorageTypeDef *)pdev->pUserData)->Read(lun, hmsc->bot_data,
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005a0a:	691c      	ldr	r4, [r3, #16]
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	f103 0110 	add.w	r1, r3, #16
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
                                                     hmsc->scsi_blk_addr,
                                                     (len / hmsc->scsi_blk_size)) < 0)
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8005a1e:	4618      	mov	r0, r3
 8005a20:	68bb      	ldr	r3, [r7, #8]
 8005a22:	fbb3 f3f0 	udiv	r3, r3, r0
  if (((USBD_StorageTypeDef *)pdev->pUserData)->Read(lun, hmsc->bot_data,
 8005a26:	b29b      	uxth	r3, r3
 8005a28:	78f8      	ldrb	r0, [r7, #3]
 8005a2a:	47a0      	blx	r4
 8005a2c:	4603      	mov	r3, r0
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	da08      	bge.n	8005a44 <SCSI_ProcessRead+0x80>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, UNRECOVERED_READ_ERROR);
 8005a32:	78f9      	ldrb	r1, [r7, #3]
 8005a34:	2311      	movs	r3, #17
 8005a36:	2204      	movs	r2, #4
 8005a38:	6878      	ldr	r0, [r7, #4]
 8005a3a:	f7ff fbbc 	bl	80051b6 <SCSI_SenseCode>
    return -1;
 8005a3e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005a42:	e034      	b.n	8005aae <SCSI_ProcessRead+0xea>
  }

  (void)USBD_LL_Transmit(pdev, MSC_EPIN_ADDR, hmsc->bot_data, len);
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	f103 0210 	add.w	r2, r3, #16
 8005a4a:	68bb      	ldr	r3, [r7, #8]
 8005a4c:	2181      	movs	r1, #129	; 0x81
 8005a4e:	6878      	ldr	r0, [r7, #4]
 8005a50:	f001 fe62 	bl	8007718 <USBD_LL_Transmit>

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8005a60:	4619      	mov	r1, r3
 8005a62:	68bb      	ldr	r3, [r7, #8]
 8005a64:	fbb3 f3f1 	udiv	r3, r3, r1
 8005a68:	441a      	add	r2, r3
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	f8d3 2270 	ldr.w	r2, [r3, #624]	; 0x270
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8005a7c:	4619      	mov	r1, r3
 8005a7e:	68bb      	ldr	r3, [r7, #8]
 8005a80:	fbb3 f3f1 	udiv	r3, r3, r1
 8005a84:	1ad2      	subs	r2, r2, r3
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

  /* case 6 : Hi = Di */
  hmsc->csw.dDataResidue -= len;
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	f8d3 2238 	ldr.w	r2, [r3, #568]	; 0x238
 8005a92:	68bb      	ldr	r3, [r7, #8]
 8005a94:	1ad2      	subs	r2, r2, r3
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	f8c3 2238 	str.w	r2, [r3, #568]	; 0x238

  if (hmsc->scsi_blk_len == 0U)
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d102      	bne.n	8005aac <SCSI_ProcessRead+0xe8>
  {
    hmsc->bot_state = USBD_BOT_LAST_DATA_IN;
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	2203      	movs	r2, #3
 8005aaa:	721a      	strb	r2, [r3, #8]
  }

  return 0;
 8005aac:	2300      	movs	r3, #0
}
 8005aae:	4618      	mov	r0, r3
 8005ab0:	3714      	adds	r7, #20
 8005ab2:	46bd      	mov	sp, r7
 8005ab4:	bd90      	pop	{r4, r7, pc}

08005ab6 <SCSI_ProcessWrite>:
  *         Handle Write Process
  * @param  lun: Logical unit number
  * @retval status
  */
static int8_t SCSI_ProcessWrite(USBD_HandleTypeDef *pdev, uint8_t lun)
{
 8005ab6:	b590      	push	{r4, r7, lr}
 8005ab8:	b085      	sub	sp, #20
 8005aba:	af00      	add	r7, sp, #0
 8005abc:	6078      	str	r0, [r7, #4]
 8005abe:	460b      	mov	r3, r1
 8005ac0:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005ac8:	60fb      	str	r3, [r7, #12]
  uint32_t len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8005ad0:	68fa      	ldr	r2, [r7, #12]
 8005ad2:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 8005ad6:	fb02 f303 	mul.w	r3, r2, r3
 8005ada:	60bb      	str	r3, [r7, #8]

  if (hmsc == NULL)
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d102      	bne.n	8005ae8 <SCSI_ProcessWrite+0x32>
  {
    return -1;
 8005ae2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005ae6:	e06b      	b.n	8005bc0 <SCSI_ProcessWrite+0x10a>
  }

  len = MIN(len, MSC_MEDIA_PACKET);
 8005ae8:	68bb      	ldr	r3, [r7, #8]
 8005aea:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005aee:	bf28      	it	cs
 8005af0:	f44f 7300 	movcs.w	r3, #512	; 0x200
 8005af4:	60bb      	str	r3, [r7, #8]

  if (((USBD_StorageTypeDef *)pdev->pUserData)->Write(lun, hmsc->bot_data,
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005afc:	695c      	ldr	r4, [r3, #20]
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	f103 0110 	add.w	r1, r3, #16
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
                                                      hmsc->scsi_blk_addr,
                                                      (len / hmsc->scsi_blk_size)) < 0)
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8005b10:	4618      	mov	r0, r3
 8005b12:	68bb      	ldr	r3, [r7, #8]
 8005b14:	fbb3 f3f0 	udiv	r3, r3, r0
  if (((USBD_StorageTypeDef *)pdev->pUserData)->Write(lun, hmsc->bot_data,
 8005b18:	b29b      	uxth	r3, r3
 8005b1a:	78f8      	ldrb	r0, [r7, #3]
 8005b1c:	47a0      	blx	r4
 8005b1e:	4603      	mov	r3, r0
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	da08      	bge.n	8005b36 <SCSI_ProcessWrite+0x80>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, WRITE_FAULT);
 8005b24:	78f9      	ldrb	r1, [r7, #3]
 8005b26:	2303      	movs	r3, #3
 8005b28:	2204      	movs	r2, #4
 8005b2a:	6878      	ldr	r0, [r7, #4]
 8005b2c:	f7ff fb43 	bl	80051b6 <SCSI_SenseCode>
    return -1;
 8005b30:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005b34:	e044      	b.n	8005bc0 <SCSI_ProcessWrite+0x10a>
  }

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8005b42:	4619      	mov	r1, r3
 8005b44:	68bb      	ldr	r3, [r7, #8]
 8005b46:	fbb3 f3f1 	udiv	r3, r3, r1
 8005b4a:	441a      	add	r2, r3
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	f8d3 2270 	ldr.w	r2, [r3, #624]	; 0x270
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8005b5e:	4619      	mov	r1, r3
 8005b60:	68bb      	ldr	r3, [r7, #8]
 8005b62:	fbb3 f3f1 	udiv	r3, r3, r1
 8005b66:	1ad2      	subs	r2, r2, r3
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

  /* case 12 : Ho = Do */
  hmsc->csw.dDataResidue -= len;
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	f8d3 2238 	ldr.w	r2, [r3, #568]	; 0x238
 8005b74:	68bb      	ldr	r3, [r7, #8]
 8005b76:	1ad2      	subs	r2, r2, r3
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	f8c3 2238 	str.w	r2, [r3, #568]	; 0x238

  if (hmsc->scsi_blk_len == 0U)
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d104      	bne.n	8005b92 <SCSI_ProcessWrite+0xdc>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 8005b88:	2100      	movs	r1, #0
 8005b8a:	6878      	ldr	r0, [r7, #4]
 8005b8c:	f7fe fdd8 	bl	8004740 <MSC_BOT_SendCSW>
 8005b90:	e015      	b.n	8005bbe <SCSI_ProcessWrite+0x108>
  }
  else
  {
    len = MIN((hmsc->scsi_blk_len * hmsc->scsi_blk_size), MSC_MEDIA_PACKET);
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8005b98:	68fa      	ldr	r2, [r7, #12]
 8005b9a:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 8005b9e:	fb02 f303 	mul.w	r3, r2, r3
 8005ba2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005ba6:	bf28      	it	cs
 8005ba8:	f44f 7300 	movcs.w	r3, #512	; 0x200
 8005bac:	60bb      	str	r3, [r7, #8]

    /* Prepare EP to Receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, hmsc->bot_data, len);
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	f103 0210 	add.w	r2, r3, #16
 8005bb4:	68bb      	ldr	r3, [r7, #8]
 8005bb6:	2101      	movs	r1, #1
 8005bb8:	6878      	ldr	r0, [r7, #4]
 8005bba:	f001 fdce 	bl	800775a <USBD_LL_PrepareReceive>
  }

  return 0;
 8005bbe:	2300      	movs	r3, #0
}
 8005bc0:	4618      	mov	r0, r3
 8005bc2:	3714      	adds	r7, #20
 8005bc4:	46bd      	mov	sp, r7
 8005bc6:	bd90      	pop	{r4, r7, pc}

08005bc8 <SCSI_UpdateBotData>:
  * @param  length: Data length
  * @retval status
  */
static int8_t SCSI_UpdateBotData(USBD_MSC_BOT_HandleTypeDef *hmsc,
                                 uint8_t *pBuff, uint16_t length)
{
 8005bc8:	b480      	push	{r7}
 8005bca:	b087      	sub	sp, #28
 8005bcc:	af00      	add	r7, sp, #0
 8005bce:	60f8      	str	r0, [r7, #12]
 8005bd0:	60b9      	str	r1, [r7, #8]
 8005bd2:	4613      	mov	r3, r2
 8005bd4:	80fb      	strh	r3, [r7, #6]
  uint16_t len = length;
 8005bd6:	88fb      	ldrh	r3, [r7, #6]
 8005bd8:	82fb      	strh	r3, [r7, #22]

  if (hmsc == NULL)
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d102      	bne.n	8005be6 <SCSI_UpdateBotData+0x1e>
  {
    return -1;
 8005be0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005be4:	e013      	b.n	8005c0e <SCSI_UpdateBotData+0x46>
  }

  hmsc->bot_data_length = len;
 8005be6:	8afa      	ldrh	r2, [r7, #22]
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	60da      	str	r2, [r3, #12]

  while (len != 0U)
 8005bec:	e00b      	b.n	8005c06 <SCSI_UpdateBotData+0x3e>
  {
    len--;
 8005bee:	8afb      	ldrh	r3, [r7, #22]
 8005bf0:	3b01      	subs	r3, #1
 8005bf2:	82fb      	strh	r3, [r7, #22]
    hmsc->bot_data[len] = pBuff[len];
 8005bf4:	8afb      	ldrh	r3, [r7, #22]
 8005bf6:	68ba      	ldr	r2, [r7, #8]
 8005bf8:	441a      	add	r2, r3
 8005bfa:	8afb      	ldrh	r3, [r7, #22]
 8005bfc:	7811      	ldrb	r1, [r2, #0]
 8005bfe:	68fa      	ldr	r2, [r7, #12]
 8005c00:	4413      	add	r3, r2
 8005c02:	460a      	mov	r2, r1
 8005c04:	741a      	strb	r2, [r3, #16]
  while (len != 0U)
 8005c06:	8afb      	ldrh	r3, [r7, #22]
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d1f0      	bne.n	8005bee <SCSI_UpdateBotData+0x26>
  }

  return 0;
 8005c0c:	2300      	movs	r3, #0
}
 8005c0e:	4618      	mov	r0, r3
 8005c10:	371c      	adds	r7, #28
 8005c12:	46bd      	mov	sp, r7
 8005c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c18:	4770      	bx	lr

08005c1a <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8005c1a:	b580      	push	{r7, lr}
 8005c1c:	b086      	sub	sp, #24
 8005c1e:	af00      	add	r7, sp, #0
 8005c20:	60f8      	str	r0, [r7, #12]
 8005c22:	60b9      	str	r1, [r7, #8]
 8005c24:	4613      	mov	r3, r2
 8005c26:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d101      	bne.n	8005c32 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8005c2e:	2303      	movs	r3, #3
 8005c30:	e01f      	b.n	8005c72 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	2200      	movs	r2, #0
 8005c36:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	2200      	movs	r2, #0
 8005c3e:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	2200      	movs	r2, #0
 8005c46:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8005c4a:	68bb      	ldr	r3, [r7, #8]
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d003      	beq.n	8005c58 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	68ba      	ldr	r2, [r7, #8]
 8005c54:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	2201      	movs	r2, #1
 8005c5c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	79fa      	ldrb	r2, [r7, #7]
 8005c64:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8005c66:	68f8      	ldr	r0, [r7, #12]
 8005c68:	f001 fc02 	bl	8007470 <USBD_LL_Init>
 8005c6c:	4603      	mov	r3, r0
 8005c6e:	75fb      	strb	r3, [r7, #23]

  return ret;
 8005c70:	7dfb      	ldrb	r3, [r7, #23]
}
 8005c72:	4618      	mov	r0, r3
 8005c74:	3718      	adds	r7, #24
 8005c76:	46bd      	mov	sp, r7
 8005c78:	bd80      	pop	{r7, pc}

08005c7a <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8005c7a:	b580      	push	{r7, lr}
 8005c7c:	b084      	sub	sp, #16
 8005c7e:	af00      	add	r7, sp, #0
 8005c80:	6078      	str	r0, [r7, #4]
 8005c82:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8005c84:	2300      	movs	r3, #0
 8005c86:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8005c88:	683b      	ldr	r3, [r7, #0]
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d101      	bne.n	8005c92 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8005c8e:	2303      	movs	r3, #3
 8005c90:	e016      	b.n	8005cc0 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	683a      	ldr	r2, [r7, #0]
 8005c96:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005ca0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d00b      	beq.n	8005cbe <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005cac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cae:	f107 020e 	add.w	r2, r7, #14
 8005cb2:	4610      	mov	r0, r2
 8005cb4:	4798      	blx	r3
 8005cb6:	4602      	mov	r2, r0
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8005cbe:	2300      	movs	r3, #0
}
 8005cc0:	4618      	mov	r0, r3
 8005cc2:	3710      	adds	r7, #16
 8005cc4:	46bd      	mov	sp, r7
 8005cc6:	bd80      	pop	{r7, pc}

08005cc8 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8005cc8:	b580      	push	{r7, lr}
 8005cca:	b082      	sub	sp, #8
 8005ccc:	af00      	add	r7, sp, #0
 8005cce:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8005cd0:	6878      	ldr	r0, [r7, #4]
 8005cd2:	f001 fc19 	bl	8007508 <USBD_LL_Start>
 8005cd6:	4603      	mov	r3, r0
}
 8005cd8:	4618      	mov	r0, r3
 8005cda:	3708      	adds	r7, #8
 8005cdc:	46bd      	mov	sp, r7
 8005cde:	bd80      	pop	{r7, pc}

08005ce0 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8005ce0:	b480      	push	{r7}
 8005ce2:	b083      	sub	sp, #12
 8005ce4:	af00      	add	r7, sp, #0
 8005ce6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005ce8:	2300      	movs	r3, #0
}
 8005cea:	4618      	mov	r0, r3
 8005cec:	370c      	adds	r7, #12
 8005cee:	46bd      	mov	sp, r7
 8005cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf4:	4770      	bx	lr

08005cf6 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005cf6:	b580      	push	{r7, lr}
 8005cf8:	b084      	sub	sp, #16
 8005cfa:	af00      	add	r7, sp, #0
 8005cfc:	6078      	str	r0, [r7, #4]
 8005cfe:	460b      	mov	r3, r1
 8005d00:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8005d02:	2303      	movs	r3, #3
 8005d04:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d009      	beq.n	8005d24 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	78fa      	ldrb	r2, [r7, #3]
 8005d1a:	4611      	mov	r1, r2
 8005d1c:	6878      	ldr	r0, [r7, #4]
 8005d1e:	4798      	blx	r3
 8005d20:	4603      	mov	r3, r0
 8005d22:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8005d24:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d26:	4618      	mov	r0, r3
 8005d28:	3710      	adds	r7, #16
 8005d2a:	46bd      	mov	sp, r7
 8005d2c:	bd80      	pop	{r7, pc}

08005d2e <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005d2e:	b580      	push	{r7, lr}
 8005d30:	b082      	sub	sp, #8
 8005d32:	af00      	add	r7, sp, #0
 8005d34:	6078      	str	r0, [r7, #4]
 8005d36:	460b      	mov	r3, r1
 8005d38:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d007      	beq.n	8005d54 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005d4a:	685b      	ldr	r3, [r3, #4]
 8005d4c:	78fa      	ldrb	r2, [r7, #3]
 8005d4e:	4611      	mov	r1, r2
 8005d50:	6878      	ldr	r0, [r7, #4]
 8005d52:	4798      	blx	r3
  }

  return USBD_OK;
 8005d54:	2300      	movs	r3, #0
}
 8005d56:	4618      	mov	r0, r3
 8005d58:	3708      	adds	r7, #8
 8005d5a:	46bd      	mov	sp, r7
 8005d5c:	bd80      	pop	{r7, pc}

08005d5e <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8005d5e:	b580      	push	{r7, lr}
 8005d60:	b084      	sub	sp, #16
 8005d62:	af00      	add	r7, sp, #0
 8005d64:	6078      	str	r0, [r7, #4]
 8005d66:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005d6e:	6839      	ldr	r1, [r7, #0]
 8005d70:	4618      	mov	r0, r3
 8005d72:	f000 ff8f 	bl	8006c94 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	2201      	movs	r2, #1
 8005d7a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8005d84:	461a      	mov	r2, r3
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8005d92:	f003 031f 	and.w	r3, r3, #31
 8005d96:	2b02      	cmp	r3, #2
 8005d98:	d01a      	beq.n	8005dd0 <USBD_LL_SetupStage+0x72>
 8005d9a:	2b02      	cmp	r3, #2
 8005d9c:	d822      	bhi.n	8005de4 <USBD_LL_SetupStage+0x86>
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d002      	beq.n	8005da8 <USBD_LL_SetupStage+0x4a>
 8005da2:	2b01      	cmp	r3, #1
 8005da4:	d00a      	beq.n	8005dbc <USBD_LL_SetupStage+0x5e>
 8005da6:	e01d      	b.n	8005de4 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005dae:	4619      	mov	r1, r3
 8005db0:	6878      	ldr	r0, [r7, #4]
 8005db2:	f000 fa61 	bl	8006278 <USBD_StdDevReq>
 8005db6:	4603      	mov	r3, r0
 8005db8:	73fb      	strb	r3, [r7, #15]
      break;
 8005dba:	e020      	b.n	8005dfe <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005dc2:	4619      	mov	r1, r3
 8005dc4:	6878      	ldr	r0, [r7, #4]
 8005dc6:	f000 fac5 	bl	8006354 <USBD_StdItfReq>
 8005dca:	4603      	mov	r3, r0
 8005dcc:	73fb      	strb	r3, [r7, #15]
      break;
 8005dce:	e016      	b.n	8005dfe <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005dd6:	4619      	mov	r1, r3
 8005dd8:	6878      	ldr	r0, [r7, #4]
 8005dda:	f000 fb04 	bl	80063e6 <USBD_StdEPReq>
 8005dde:	4603      	mov	r3, r0
 8005de0:	73fb      	strb	r3, [r7, #15]
      break;
 8005de2:	e00c      	b.n	8005dfe <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8005dea:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005dee:	b2db      	uxtb	r3, r3
 8005df0:	4619      	mov	r1, r3
 8005df2:	6878      	ldr	r0, [r7, #4]
 8005df4:	f001 fc07 	bl	8007606 <USBD_LL_StallEP>
 8005df8:	4603      	mov	r3, r0
 8005dfa:	73fb      	strb	r3, [r7, #15]
      break;
 8005dfc:	bf00      	nop
  }

  return ret;
 8005dfe:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e00:	4618      	mov	r0, r3
 8005e02:	3710      	adds	r7, #16
 8005e04:	46bd      	mov	sp, r7
 8005e06:	bd80      	pop	{r7, pc}

08005e08 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8005e08:	b580      	push	{r7, lr}
 8005e0a:	b086      	sub	sp, #24
 8005e0c:	af00      	add	r7, sp, #0
 8005e0e:	60f8      	str	r0, [r7, #12]
 8005e10:	460b      	mov	r3, r1
 8005e12:	607a      	str	r2, [r7, #4]
 8005e14:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8005e16:	7afb      	ldrb	r3, [r7, #11]
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d138      	bne.n	8005e8e <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8005e22:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005e2a:	2b03      	cmp	r3, #3
 8005e2c:	d14a      	bne.n	8005ec4 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8005e2e:	693b      	ldr	r3, [r7, #16]
 8005e30:	689a      	ldr	r2, [r3, #8]
 8005e32:	693b      	ldr	r3, [r7, #16]
 8005e34:	68db      	ldr	r3, [r3, #12]
 8005e36:	429a      	cmp	r2, r3
 8005e38:	d913      	bls.n	8005e62 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8005e3a:	693b      	ldr	r3, [r7, #16]
 8005e3c:	689a      	ldr	r2, [r3, #8]
 8005e3e:	693b      	ldr	r3, [r7, #16]
 8005e40:	68db      	ldr	r3, [r3, #12]
 8005e42:	1ad2      	subs	r2, r2, r3
 8005e44:	693b      	ldr	r3, [r7, #16]
 8005e46:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8005e48:	693b      	ldr	r3, [r7, #16]
 8005e4a:	68da      	ldr	r2, [r3, #12]
 8005e4c:	693b      	ldr	r3, [r7, #16]
 8005e4e:	689b      	ldr	r3, [r3, #8]
 8005e50:	4293      	cmp	r3, r2
 8005e52:	bf28      	it	cs
 8005e54:	4613      	movcs	r3, r2
 8005e56:	461a      	mov	r2, r3
 8005e58:	6879      	ldr	r1, [r7, #4]
 8005e5a:	68f8      	ldr	r0, [r7, #12]
 8005e5c:	f000 fff1 	bl	8006e42 <USBD_CtlContinueRx>
 8005e60:	e030      	b.n	8005ec4 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005e68:	b2db      	uxtb	r3, r3
 8005e6a:	2b03      	cmp	r3, #3
 8005e6c:	d10b      	bne.n	8005e86 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005e74:	691b      	ldr	r3, [r3, #16]
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d005      	beq.n	8005e86 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005e80:	691b      	ldr	r3, [r3, #16]
 8005e82:	68f8      	ldr	r0, [r7, #12]
 8005e84:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8005e86:	68f8      	ldr	r0, [r7, #12]
 8005e88:	f000 ffec 	bl	8006e64 <USBD_CtlSendStatus>
 8005e8c:	e01a      	b.n	8005ec4 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005e94:	b2db      	uxtb	r3, r3
 8005e96:	2b03      	cmp	r3, #3
 8005e98:	d114      	bne.n	8005ec4 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005ea0:	699b      	ldr	r3, [r3, #24]
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d00e      	beq.n	8005ec4 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005eac:	699b      	ldr	r3, [r3, #24]
 8005eae:	7afa      	ldrb	r2, [r7, #11]
 8005eb0:	4611      	mov	r1, r2
 8005eb2:	68f8      	ldr	r0, [r7, #12]
 8005eb4:	4798      	blx	r3
 8005eb6:	4603      	mov	r3, r0
 8005eb8:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8005eba:	7dfb      	ldrb	r3, [r7, #23]
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d001      	beq.n	8005ec4 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 8005ec0:	7dfb      	ldrb	r3, [r7, #23]
 8005ec2:	e000      	b.n	8005ec6 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 8005ec4:	2300      	movs	r3, #0
}
 8005ec6:	4618      	mov	r0, r3
 8005ec8:	3718      	adds	r7, #24
 8005eca:	46bd      	mov	sp, r7
 8005ecc:	bd80      	pop	{r7, pc}

08005ece <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8005ece:	b580      	push	{r7, lr}
 8005ed0:	b086      	sub	sp, #24
 8005ed2:	af00      	add	r7, sp, #0
 8005ed4:	60f8      	str	r0, [r7, #12]
 8005ed6:	460b      	mov	r3, r1
 8005ed8:	607a      	str	r2, [r7, #4]
 8005eda:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8005edc:	7afb      	ldrb	r3, [r7, #11]
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d16b      	bne.n	8005fba <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	3314      	adds	r3, #20
 8005ee6:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005eee:	2b02      	cmp	r3, #2
 8005ef0:	d156      	bne.n	8005fa0 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 8005ef2:	693b      	ldr	r3, [r7, #16]
 8005ef4:	689a      	ldr	r2, [r3, #8]
 8005ef6:	693b      	ldr	r3, [r7, #16]
 8005ef8:	68db      	ldr	r3, [r3, #12]
 8005efa:	429a      	cmp	r2, r3
 8005efc:	d914      	bls.n	8005f28 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8005efe:	693b      	ldr	r3, [r7, #16]
 8005f00:	689a      	ldr	r2, [r3, #8]
 8005f02:	693b      	ldr	r3, [r7, #16]
 8005f04:	68db      	ldr	r3, [r3, #12]
 8005f06:	1ad2      	subs	r2, r2, r3
 8005f08:	693b      	ldr	r3, [r7, #16]
 8005f0a:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8005f0c:	693b      	ldr	r3, [r7, #16]
 8005f0e:	689b      	ldr	r3, [r3, #8]
 8005f10:	461a      	mov	r2, r3
 8005f12:	6879      	ldr	r1, [r7, #4]
 8005f14:	68f8      	ldr	r0, [r7, #12]
 8005f16:	f000 ff83 	bl	8006e20 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005f1a:	2300      	movs	r3, #0
 8005f1c:	2200      	movs	r2, #0
 8005f1e:	2100      	movs	r1, #0
 8005f20:	68f8      	ldr	r0, [r7, #12]
 8005f22:	f001 fc1a 	bl	800775a <USBD_LL_PrepareReceive>
 8005f26:	e03b      	b.n	8005fa0 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8005f28:	693b      	ldr	r3, [r7, #16]
 8005f2a:	68da      	ldr	r2, [r3, #12]
 8005f2c:	693b      	ldr	r3, [r7, #16]
 8005f2e:	689b      	ldr	r3, [r3, #8]
 8005f30:	429a      	cmp	r2, r3
 8005f32:	d11c      	bne.n	8005f6e <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8005f34:	693b      	ldr	r3, [r7, #16]
 8005f36:	685a      	ldr	r2, [r3, #4]
 8005f38:	693b      	ldr	r3, [r7, #16]
 8005f3a:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8005f3c:	429a      	cmp	r2, r3
 8005f3e:	d316      	bcc.n	8005f6e <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8005f40:	693b      	ldr	r3, [r7, #16]
 8005f42:	685a      	ldr	r2, [r3, #4]
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8005f4a:	429a      	cmp	r2, r3
 8005f4c:	d20f      	bcs.n	8005f6e <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8005f4e:	2200      	movs	r2, #0
 8005f50:	2100      	movs	r1, #0
 8005f52:	68f8      	ldr	r0, [r7, #12]
 8005f54:	f000 ff64 	bl	8006e20 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	2200      	movs	r2, #0
 8005f5c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005f60:	2300      	movs	r3, #0
 8005f62:	2200      	movs	r2, #0
 8005f64:	2100      	movs	r1, #0
 8005f66:	68f8      	ldr	r0, [r7, #12]
 8005f68:	f001 fbf7 	bl	800775a <USBD_LL_PrepareReceive>
 8005f6c:	e018      	b.n	8005fa0 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005f74:	b2db      	uxtb	r3, r3
 8005f76:	2b03      	cmp	r3, #3
 8005f78:	d10b      	bne.n	8005f92 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005f80:	68db      	ldr	r3, [r3, #12]
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d005      	beq.n	8005f92 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005f8c:	68db      	ldr	r3, [r3, #12]
 8005f8e:	68f8      	ldr	r0, [r7, #12]
 8005f90:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8005f92:	2180      	movs	r1, #128	; 0x80
 8005f94:	68f8      	ldr	r0, [r7, #12]
 8005f96:	f001 fb36 	bl	8007606 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8005f9a:	68f8      	ldr	r0, [r7, #12]
 8005f9c:	f000 ff75 	bl	8006e8a <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8005fa6:	2b01      	cmp	r3, #1
 8005fa8:	d122      	bne.n	8005ff0 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8005faa:	68f8      	ldr	r0, [r7, #12]
 8005fac:	f7ff fe98 	bl	8005ce0 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	2200      	movs	r2, #0
 8005fb4:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8005fb8:	e01a      	b.n	8005ff0 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005fc0:	b2db      	uxtb	r3, r3
 8005fc2:	2b03      	cmp	r3, #3
 8005fc4:	d114      	bne.n	8005ff0 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005fcc:	695b      	ldr	r3, [r3, #20]
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d00e      	beq.n	8005ff0 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005fd8:	695b      	ldr	r3, [r3, #20]
 8005fda:	7afa      	ldrb	r2, [r7, #11]
 8005fdc:	4611      	mov	r1, r2
 8005fde:	68f8      	ldr	r0, [r7, #12]
 8005fe0:	4798      	blx	r3
 8005fe2:	4603      	mov	r3, r0
 8005fe4:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8005fe6:	7dfb      	ldrb	r3, [r7, #23]
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d001      	beq.n	8005ff0 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 8005fec:	7dfb      	ldrb	r3, [r7, #23]
 8005fee:	e000      	b.n	8005ff2 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 8005ff0:	2300      	movs	r3, #0
}
 8005ff2:	4618      	mov	r0, r3
 8005ff4:	3718      	adds	r7, #24
 8005ff6:	46bd      	mov	sp, r7
 8005ff8:	bd80      	pop	{r7, pc}

08005ffa <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8005ffa:	b580      	push	{r7, lr}
 8005ffc:	b082      	sub	sp, #8
 8005ffe:	af00      	add	r7, sp, #0
 8006000:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	2201      	movs	r2, #1
 8006006:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	2200      	movs	r2, #0
 800600e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	2200      	movs	r2, #0
 8006016:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	2200      	movs	r2, #0
 800601c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006026:	2b00      	cmp	r3, #0
 8006028:	d101      	bne.n	800602e <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 800602a:	2303      	movs	r3, #3
 800602c:	e02f      	b.n	800608e <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006034:	2b00      	cmp	r3, #0
 8006036:	d00f      	beq.n	8006058 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800603e:	685b      	ldr	r3, [r3, #4]
 8006040:	2b00      	cmp	r3, #0
 8006042:	d009      	beq.n	8006058 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800604a:	685b      	ldr	r3, [r3, #4]
 800604c:	687a      	ldr	r2, [r7, #4]
 800604e:	6852      	ldr	r2, [r2, #4]
 8006050:	b2d2      	uxtb	r2, r2
 8006052:	4611      	mov	r1, r2
 8006054:	6878      	ldr	r0, [r7, #4]
 8006056:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006058:	2340      	movs	r3, #64	; 0x40
 800605a:	2200      	movs	r2, #0
 800605c:	2100      	movs	r1, #0
 800605e:	6878      	ldr	r0, [r7, #4]
 8006060:	f001 fa6d 	bl	800753e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	2201      	movs	r2, #1
 8006068:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	2240      	movs	r2, #64	; 0x40
 8006070:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006074:	2340      	movs	r3, #64	; 0x40
 8006076:	2200      	movs	r2, #0
 8006078:	2180      	movs	r1, #128	; 0x80
 800607a:	6878      	ldr	r0, [r7, #4]
 800607c:	f001 fa5f 	bl	800753e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	2201      	movs	r2, #1
 8006084:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	2240      	movs	r2, #64	; 0x40
 800608a:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800608c:	2300      	movs	r3, #0
}
 800608e:	4618      	mov	r0, r3
 8006090:	3708      	adds	r7, #8
 8006092:	46bd      	mov	sp, r7
 8006094:	bd80      	pop	{r7, pc}

08006096 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8006096:	b480      	push	{r7}
 8006098:	b083      	sub	sp, #12
 800609a:	af00      	add	r7, sp, #0
 800609c:	6078      	str	r0, [r7, #4]
 800609e:	460b      	mov	r3, r1
 80060a0:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	78fa      	ldrb	r2, [r7, #3]
 80060a6:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80060a8:	2300      	movs	r3, #0
}
 80060aa:	4618      	mov	r0, r3
 80060ac:	370c      	adds	r7, #12
 80060ae:	46bd      	mov	sp, r7
 80060b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b4:	4770      	bx	lr

080060b6 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80060b6:	b480      	push	{r7}
 80060b8:	b083      	sub	sp, #12
 80060ba:	af00      	add	r7, sp, #0
 80060bc:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80060c4:	b2da      	uxtb	r2, r3
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	2204      	movs	r2, #4
 80060d0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80060d4:	2300      	movs	r3, #0
}
 80060d6:	4618      	mov	r0, r3
 80060d8:	370c      	adds	r7, #12
 80060da:	46bd      	mov	sp, r7
 80060dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e0:	4770      	bx	lr

080060e2 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80060e2:	b480      	push	{r7}
 80060e4:	b083      	sub	sp, #12
 80060e6:	af00      	add	r7, sp, #0
 80060e8:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80060f0:	b2db      	uxtb	r3, r3
 80060f2:	2b04      	cmp	r3, #4
 80060f4:	d106      	bne.n	8006104 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 80060fc:	b2da      	uxtb	r2, r3
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8006104:	2300      	movs	r3, #0
}
 8006106:	4618      	mov	r0, r3
 8006108:	370c      	adds	r7, #12
 800610a:	46bd      	mov	sp, r7
 800610c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006110:	4770      	bx	lr

08006112 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8006112:	b580      	push	{r7, lr}
 8006114:	b082      	sub	sp, #8
 8006116:	af00      	add	r7, sp, #0
 8006118:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006120:	2b00      	cmp	r3, #0
 8006122:	d101      	bne.n	8006128 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 8006124:	2303      	movs	r3, #3
 8006126:	e012      	b.n	800614e <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800612e:	b2db      	uxtb	r3, r3
 8006130:	2b03      	cmp	r3, #3
 8006132:	d10b      	bne.n	800614c <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800613a:	69db      	ldr	r3, [r3, #28]
 800613c:	2b00      	cmp	r3, #0
 800613e:	d005      	beq.n	800614c <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006146:	69db      	ldr	r3, [r3, #28]
 8006148:	6878      	ldr	r0, [r7, #4]
 800614a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800614c:	2300      	movs	r3, #0
}
 800614e:	4618      	mov	r0, r3
 8006150:	3708      	adds	r7, #8
 8006152:	46bd      	mov	sp, r7
 8006154:	bd80      	pop	{r7, pc}

08006156 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8006156:	b580      	push	{r7, lr}
 8006158:	b082      	sub	sp, #8
 800615a:	af00      	add	r7, sp, #0
 800615c:	6078      	str	r0, [r7, #4]
 800615e:	460b      	mov	r3, r1
 8006160:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006168:	2b00      	cmp	r3, #0
 800616a:	d101      	bne.n	8006170 <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 800616c:	2303      	movs	r3, #3
 800616e:	e014      	b.n	800619a <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006176:	b2db      	uxtb	r3, r3
 8006178:	2b03      	cmp	r3, #3
 800617a:	d10d      	bne.n	8006198 <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006182:	6a1b      	ldr	r3, [r3, #32]
 8006184:	2b00      	cmp	r3, #0
 8006186:	d007      	beq.n	8006198 <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800618e:	6a1b      	ldr	r3, [r3, #32]
 8006190:	78fa      	ldrb	r2, [r7, #3]
 8006192:	4611      	mov	r1, r2
 8006194:	6878      	ldr	r0, [r7, #4]
 8006196:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006198:	2300      	movs	r3, #0
}
 800619a:	4618      	mov	r0, r3
 800619c:	3708      	adds	r7, #8
 800619e:	46bd      	mov	sp, r7
 80061a0:	bd80      	pop	{r7, pc}

080061a2 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80061a2:	b580      	push	{r7, lr}
 80061a4:	b082      	sub	sp, #8
 80061a6:	af00      	add	r7, sp, #0
 80061a8:	6078      	str	r0, [r7, #4]
 80061aa:	460b      	mov	r3, r1
 80061ac:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d101      	bne.n	80061bc <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 80061b8:	2303      	movs	r3, #3
 80061ba:	e014      	b.n	80061e6 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80061c2:	b2db      	uxtb	r3, r3
 80061c4:	2b03      	cmp	r3, #3
 80061c6:	d10d      	bne.n	80061e4 <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80061ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d007      	beq.n	80061e4 <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80061da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061dc:	78fa      	ldrb	r2, [r7, #3]
 80061de:	4611      	mov	r1, r2
 80061e0:	6878      	ldr	r0, [r7, #4]
 80061e2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80061e4:	2300      	movs	r3, #0
}
 80061e6:	4618      	mov	r0, r3
 80061e8:	3708      	adds	r7, #8
 80061ea:	46bd      	mov	sp, r7
 80061ec:	bd80      	pop	{r7, pc}

080061ee <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80061ee:	b480      	push	{r7}
 80061f0:	b083      	sub	sp, #12
 80061f2:	af00      	add	r7, sp, #0
 80061f4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80061f6:	2300      	movs	r3, #0
}
 80061f8:	4618      	mov	r0, r3
 80061fa:	370c      	adds	r7, #12
 80061fc:	46bd      	mov	sp, r7
 80061fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006202:	4770      	bx	lr

08006204 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8006204:	b580      	push	{r7, lr}
 8006206:	b082      	sub	sp, #8
 8006208:	af00      	add	r7, sp, #0
 800620a:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	2201      	movs	r2, #1
 8006210:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800621a:	2b00      	cmp	r3, #0
 800621c:	d009      	beq.n	8006232 <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006224:	685b      	ldr	r3, [r3, #4]
 8006226:	687a      	ldr	r2, [r7, #4]
 8006228:	6852      	ldr	r2, [r2, #4]
 800622a:	b2d2      	uxtb	r2, r2
 800622c:	4611      	mov	r1, r2
 800622e:	6878      	ldr	r0, [r7, #4]
 8006230:	4798      	blx	r3
  }

  return USBD_OK;
 8006232:	2300      	movs	r3, #0
}
 8006234:	4618      	mov	r0, r3
 8006236:	3708      	adds	r7, #8
 8006238:	46bd      	mov	sp, r7
 800623a:	bd80      	pop	{r7, pc}

0800623c <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800623c:	b480      	push	{r7}
 800623e:	b087      	sub	sp, #28
 8006240:	af00      	add	r7, sp, #0
 8006242:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8006248:	697b      	ldr	r3, [r7, #20]
 800624a:	781b      	ldrb	r3, [r3, #0]
 800624c:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800624e:	697b      	ldr	r3, [r7, #20]
 8006250:	3301      	adds	r3, #1
 8006252:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8006254:	697b      	ldr	r3, [r7, #20]
 8006256:	781b      	ldrb	r3, [r3, #0]
 8006258:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800625a:	8a3b      	ldrh	r3, [r7, #16]
 800625c:	021b      	lsls	r3, r3, #8
 800625e:	b21a      	sxth	r2, r3
 8006260:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8006264:	4313      	orrs	r3, r2
 8006266:	b21b      	sxth	r3, r3
 8006268:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800626a:	89fb      	ldrh	r3, [r7, #14]
}
 800626c:	4618      	mov	r0, r3
 800626e:	371c      	adds	r7, #28
 8006270:	46bd      	mov	sp, r7
 8006272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006276:	4770      	bx	lr

08006278 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006278:	b580      	push	{r7, lr}
 800627a:	b084      	sub	sp, #16
 800627c:	af00      	add	r7, sp, #0
 800627e:	6078      	str	r0, [r7, #4]
 8006280:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006282:	2300      	movs	r3, #0
 8006284:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006286:	683b      	ldr	r3, [r7, #0]
 8006288:	781b      	ldrb	r3, [r3, #0]
 800628a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800628e:	2b40      	cmp	r3, #64	; 0x40
 8006290:	d005      	beq.n	800629e <USBD_StdDevReq+0x26>
 8006292:	2b40      	cmp	r3, #64	; 0x40
 8006294:	d853      	bhi.n	800633e <USBD_StdDevReq+0xc6>
 8006296:	2b00      	cmp	r3, #0
 8006298:	d00b      	beq.n	80062b2 <USBD_StdDevReq+0x3a>
 800629a:	2b20      	cmp	r3, #32
 800629c:	d14f      	bne.n	800633e <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80062a4:	689b      	ldr	r3, [r3, #8]
 80062a6:	6839      	ldr	r1, [r7, #0]
 80062a8:	6878      	ldr	r0, [r7, #4]
 80062aa:	4798      	blx	r3
 80062ac:	4603      	mov	r3, r0
 80062ae:	73fb      	strb	r3, [r7, #15]
      break;
 80062b0:	e04a      	b.n	8006348 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80062b2:	683b      	ldr	r3, [r7, #0]
 80062b4:	785b      	ldrb	r3, [r3, #1]
 80062b6:	2b09      	cmp	r3, #9
 80062b8:	d83b      	bhi.n	8006332 <USBD_StdDevReq+0xba>
 80062ba:	a201      	add	r2, pc, #4	; (adr r2, 80062c0 <USBD_StdDevReq+0x48>)
 80062bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062c0:	08006315 	.word	0x08006315
 80062c4:	08006329 	.word	0x08006329
 80062c8:	08006333 	.word	0x08006333
 80062cc:	0800631f 	.word	0x0800631f
 80062d0:	08006333 	.word	0x08006333
 80062d4:	080062f3 	.word	0x080062f3
 80062d8:	080062e9 	.word	0x080062e9
 80062dc:	08006333 	.word	0x08006333
 80062e0:	0800630b 	.word	0x0800630b
 80062e4:	080062fd 	.word	0x080062fd
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80062e8:	6839      	ldr	r1, [r7, #0]
 80062ea:	6878      	ldr	r0, [r7, #4]
 80062ec:	f000 f9de 	bl	80066ac <USBD_GetDescriptor>
          break;
 80062f0:	e024      	b.n	800633c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80062f2:	6839      	ldr	r1, [r7, #0]
 80062f4:	6878      	ldr	r0, [r7, #4]
 80062f6:	f000 fb43 	bl	8006980 <USBD_SetAddress>
          break;
 80062fa:	e01f      	b.n	800633c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80062fc:	6839      	ldr	r1, [r7, #0]
 80062fe:	6878      	ldr	r0, [r7, #4]
 8006300:	f000 fb82 	bl	8006a08 <USBD_SetConfig>
 8006304:	4603      	mov	r3, r0
 8006306:	73fb      	strb	r3, [r7, #15]
          break;
 8006308:	e018      	b.n	800633c <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800630a:	6839      	ldr	r1, [r7, #0]
 800630c:	6878      	ldr	r0, [r7, #4]
 800630e:	f000 fc21 	bl	8006b54 <USBD_GetConfig>
          break;
 8006312:	e013      	b.n	800633c <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8006314:	6839      	ldr	r1, [r7, #0]
 8006316:	6878      	ldr	r0, [r7, #4]
 8006318:	f000 fc52 	bl	8006bc0 <USBD_GetStatus>
          break;
 800631c:	e00e      	b.n	800633c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800631e:	6839      	ldr	r1, [r7, #0]
 8006320:	6878      	ldr	r0, [r7, #4]
 8006322:	f000 fc81 	bl	8006c28 <USBD_SetFeature>
          break;
 8006326:	e009      	b.n	800633c <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8006328:	6839      	ldr	r1, [r7, #0]
 800632a:	6878      	ldr	r0, [r7, #4]
 800632c:	f000 fc90 	bl	8006c50 <USBD_ClrFeature>
          break;
 8006330:	e004      	b.n	800633c <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 8006332:	6839      	ldr	r1, [r7, #0]
 8006334:	6878      	ldr	r0, [r7, #4]
 8006336:	f000 fce7 	bl	8006d08 <USBD_CtlError>
          break;
 800633a:	bf00      	nop
      }
      break;
 800633c:	e004      	b.n	8006348 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800633e:	6839      	ldr	r1, [r7, #0]
 8006340:	6878      	ldr	r0, [r7, #4]
 8006342:	f000 fce1 	bl	8006d08 <USBD_CtlError>
      break;
 8006346:	bf00      	nop
  }

  return ret;
 8006348:	7bfb      	ldrb	r3, [r7, #15]
}
 800634a:	4618      	mov	r0, r3
 800634c:	3710      	adds	r7, #16
 800634e:	46bd      	mov	sp, r7
 8006350:	bd80      	pop	{r7, pc}
 8006352:	bf00      	nop

08006354 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006354:	b580      	push	{r7, lr}
 8006356:	b084      	sub	sp, #16
 8006358:	af00      	add	r7, sp, #0
 800635a:	6078      	str	r0, [r7, #4]
 800635c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800635e:	2300      	movs	r3, #0
 8006360:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006362:	683b      	ldr	r3, [r7, #0]
 8006364:	781b      	ldrb	r3, [r3, #0]
 8006366:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800636a:	2b40      	cmp	r3, #64	; 0x40
 800636c:	d005      	beq.n	800637a <USBD_StdItfReq+0x26>
 800636e:	2b40      	cmp	r3, #64	; 0x40
 8006370:	d82f      	bhi.n	80063d2 <USBD_StdItfReq+0x7e>
 8006372:	2b00      	cmp	r3, #0
 8006374:	d001      	beq.n	800637a <USBD_StdItfReq+0x26>
 8006376:	2b20      	cmp	r3, #32
 8006378:	d12b      	bne.n	80063d2 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006380:	b2db      	uxtb	r3, r3
 8006382:	3b01      	subs	r3, #1
 8006384:	2b02      	cmp	r3, #2
 8006386:	d81d      	bhi.n	80063c4 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8006388:	683b      	ldr	r3, [r7, #0]
 800638a:	889b      	ldrh	r3, [r3, #4]
 800638c:	b2db      	uxtb	r3, r3
 800638e:	2b01      	cmp	r3, #1
 8006390:	d813      	bhi.n	80063ba <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006398:	689b      	ldr	r3, [r3, #8]
 800639a:	6839      	ldr	r1, [r7, #0]
 800639c:	6878      	ldr	r0, [r7, #4]
 800639e:	4798      	blx	r3
 80063a0:	4603      	mov	r3, r0
 80063a2:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80063a4:	683b      	ldr	r3, [r7, #0]
 80063a6:	88db      	ldrh	r3, [r3, #6]
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d110      	bne.n	80063ce <USBD_StdItfReq+0x7a>
 80063ac:	7bfb      	ldrb	r3, [r7, #15]
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d10d      	bne.n	80063ce <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 80063b2:	6878      	ldr	r0, [r7, #4]
 80063b4:	f000 fd56 	bl	8006e64 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80063b8:	e009      	b.n	80063ce <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 80063ba:	6839      	ldr	r1, [r7, #0]
 80063bc:	6878      	ldr	r0, [r7, #4]
 80063be:	f000 fca3 	bl	8006d08 <USBD_CtlError>
          break;
 80063c2:	e004      	b.n	80063ce <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 80063c4:	6839      	ldr	r1, [r7, #0]
 80063c6:	6878      	ldr	r0, [r7, #4]
 80063c8:	f000 fc9e 	bl	8006d08 <USBD_CtlError>
          break;
 80063cc:	e000      	b.n	80063d0 <USBD_StdItfReq+0x7c>
          break;
 80063ce:	bf00      	nop
      }
      break;
 80063d0:	e004      	b.n	80063dc <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 80063d2:	6839      	ldr	r1, [r7, #0]
 80063d4:	6878      	ldr	r0, [r7, #4]
 80063d6:	f000 fc97 	bl	8006d08 <USBD_CtlError>
      break;
 80063da:	bf00      	nop
  }

  return ret;
 80063dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80063de:	4618      	mov	r0, r3
 80063e0:	3710      	adds	r7, #16
 80063e2:	46bd      	mov	sp, r7
 80063e4:	bd80      	pop	{r7, pc}

080063e6 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80063e6:	b580      	push	{r7, lr}
 80063e8:	b084      	sub	sp, #16
 80063ea:	af00      	add	r7, sp, #0
 80063ec:	6078      	str	r0, [r7, #4]
 80063ee:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80063f0:	2300      	movs	r3, #0
 80063f2:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 80063f4:	683b      	ldr	r3, [r7, #0]
 80063f6:	889b      	ldrh	r3, [r3, #4]
 80063f8:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80063fa:	683b      	ldr	r3, [r7, #0]
 80063fc:	781b      	ldrb	r3, [r3, #0]
 80063fe:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006402:	2b40      	cmp	r3, #64	; 0x40
 8006404:	d007      	beq.n	8006416 <USBD_StdEPReq+0x30>
 8006406:	2b40      	cmp	r3, #64	; 0x40
 8006408:	f200 8145 	bhi.w	8006696 <USBD_StdEPReq+0x2b0>
 800640c:	2b00      	cmp	r3, #0
 800640e:	d00c      	beq.n	800642a <USBD_StdEPReq+0x44>
 8006410:	2b20      	cmp	r3, #32
 8006412:	f040 8140 	bne.w	8006696 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800641c:	689b      	ldr	r3, [r3, #8]
 800641e:	6839      	ldr	r1, [r7, #0]
 8006420:	6878      	ldr	r0, [r7, #4]
 8006422:	4798      	blx	r3
 8006424:	4603      	mov	r3, r0
 8006426:	73fb      	strb	r3, [r7, #15]
      break;
 8006428:	e13a      	b.n	80066a0 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800642a:	683b      	ldr	r3, [r7, #0]
 800642c:	785b      	ldrb	r3, [r3, #1]
 800642e:	2b03      	cmp	r3, #3
 8006430:	d007      	beq.n	8006442 <USBD_StdEPReq+0x5c>
 8006432:	2b03      	cmp	r3, #3
 8006434:	f300 8129 	bgt.w	800668a <USBD_StdEPReq+0x2a4>
 8006438:	2b00      	cmp	r3, #0
 800643a:	d07f      	beq.n	800653c <USBD_StdEPReq+0x156>
 800643c:	2b01      	cmp	r3, #1
 800643e:	d03c      	beq.n	80064ba <USBD_StdEPReq+0xd4>
 8006440:	e123      	b.n	800668a <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006448:	b2db      	uxtb	r3, r3
 800644a:	2b02      	cmp	r3, #2
 800644c:	d002      	beq.n	8006454 <USBD_StdEPReq+0x6e>
 800644e:	2b03      	cmp	r3, #3
 8006450:	d016      	beq.n	8006480 <USBD_StdEPReq+0x9a>
 8006452:	e02c      	b.n	80064ae <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006454:	7bbb      	ldrb	r3, [r7, #14]
 8006456:	2b00      	cmp	r3, #0
 8006458:	d00d      	beq.n	8006476 <USBD_StdEPReq+0x90>
 800645a:	7bbb      	ldrb	r3, [r7, #14]
 800645c:	2b80      	cmp	r3, #128	; 0x80
 800645e:	d00a      	beq.n	8006476 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006460:	7bbb      	ldrb	r3, [r7, #14]
 8006462:	4619      	mov	r1, r3
 8006464:	6878      	ldr	r0, [r7, #4]
 8006466:	f001 f8ce 	bl	8007606 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800646a:	2180      	movs	r1, #128	; 0x80
 800646c:	6878      	ldr	r0, [r7, #4]
 800646e:	f001 f8ca 	bl	8007606 <USBD_LL_StallEP>
 8006472:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006474:	e020      	b.n	80064b8 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 8006476:	6839      	ldr	r1, [r7, #0]
 8006478:	6878      	ldr	r0, [r7, #4]
 800647a:	f000 fc45 	bl	8006d08 <USBD_CtlError>
              break;
 800647e:	e01b      	b.n	80064b8 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006480:	683b      	ldr	r3, [r7, #0]
 8006482:	885b      	ldrh	r3, [r3, #2]
 8006484:	2b00      	cmp	r3, #0
 8006486:	d10e      	bne.n	80064a6 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8006488:	7bbb      	ldrb	r3, [r7, #14]
 800648a:	2b00      	cmp	r3, #0
 800648c:	d00b      	beq.n	80064a6 <USBD_StdEPReq+0xc0>
 800648e:	7bbb      	ldrb	r3, [r7, #14]
 8006490:	2b80      	cmp	r3, #128	; 0x80
 8006492:	d008      	beq.n	80064a6 <USBD_StdEPReq+0xc0>
 8006494:	683b      	ldr	r3, [r7, #0]
 8006496:	88db      	ldrh	r3, [r3, #6]
 8006498:	2b00      	cmp	r3, #0
 800649a:	d104      	bne.n	80064a6 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800649c:	7bbb      	ldrb	r3, [r7, #14]
 800649e:	4619      	mov	r1, r3
 80064a0:	6878      	ldr	r0, [r7, #4]
 80064a2:	f001 f8b0 	bl	8007606 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80064a6:	6878      	ldr	r0, [r7, #4]
 80064a8:	f000 fcdc 	bl	8006e64 <USBD_CtlSendStatus>

              break;
 80064ac:	e004      	b.n	80064b8 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 80064ae:	6839      	ldr	r1, [r7, #0]
 80064b0:	6878      	ldr	r0, [r7, #4]
 80064b2:	f000 fc29 	bl	8006d08 <USBD_CtlError>
              break;
 80064b6:	bf00      	nop
          }
          break;
 80064b8:	e0ec      	b.n	8006694 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80064c0:	b2db      	uxtb	r3, r3
 80064c2:	2b02      	cmp	r3, #2
 80064c4:	d002      	beq.n	80064cc <USBD_StdEPReq+0xe6>
 80064c6:	2b03      	cmp	r3, #3
 80064c8:	d016      	beq.n	80064f8 <USBD_StdEPReq+0x112>
 80064ca:	e030      	b.n	800652e <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80064cc:	7bbb      	ldrb	r3, [r7, #14]
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d00d      	beq.n	80064ee <USBD_StdEPReq+0x108>
 80064d2:	7bbb      	ldrb	r3, [r7, #14]
 80064d4:	2b80      	cmp	r3, #128	; 0x80
 80064d6:	d00a      	beq.n	80064ee <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80064d8:	7bbb      	ldrb	r3, [r7, #14]
 80064da:	4619      	mov	r1, r3
 80064dc:	6878      	ldr	r0, [r7, #4]
 80064de:	f001 f892 	bl	8007606 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80064e2:	2180      	movs	r1, #128	; 0x80
 80064e4:	6878      	ldr	r0, [r7, #4]
 80064e6:	f001 f88e 	bl	8007606 <USBD_LL_StallEP>
 80064ea:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80064ec:	e025      	b.n	800653a <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 80064ee:	6839      	ldr	r1, [r7, #0]
 80064f0:	6878      	ldr	r0, [r7, #4]
 80064f2:	f000 fc09 	bl	8006d08 <USBD_CtlError>
              break;
 80064f6:	e020      	b.n	800653a <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80064f8:	683b      	ldr	r3, [r7, #0]
 80064fa:	885b      	ldrh	r3, [r3, #2]
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d11b      	bne.n	8006538 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8006500:	7bbb      	ldrb	r3, [r7, #14]
 8006502:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006506:	2b00      	cmp	r3, #0
 8006508:	d004      	beq.n	8006514 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800650a:	7bbb      	ldrb	r3, [r7, #14]
 800650c:	4619      	mov	r1, r3
 800650e:	6878      	ldr	r0, [r7, #4]
 8006510:	f001 f898 	bl	8007644 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8006514:	6878      	ldr	r0, [r7, #4]
 8006516:	f000 fca5 	bl	8006e64 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006520:	689b      	ldr	r3, [r3, #8]
 8006522:	6839      	ldr	r1, [r7, #0]
 8006524:	6878      	ldr	r0, [r7, #4]
 8006526:	4798      	blx	r3
 8006528:	4603      	mov	r3, r0
 800652a:	73fb      	strb	r3, [r7, #15]
              }
              break;
 800652c:	e004      	b.n	8006538 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 800652e:	6839      	ldr	r1, [r7, #0]
 8006530:	6878      	ldr	r0, [r7, #4]
 8006532:	f000 fbe9 	bl	8006d08 <USBD_CtlError>
              break;
 8006536:	e000      	b.n	800653a <USBD_StdEPReq+0x154>
              break;
 8006538:	bf00      	nop
          }
          break;
 800653a:	e0ab      	b.n	8006694 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006542:	b2db      	uxtb	r3, r3
 8006544:	2b02      	cmp	r3, #2
 8006546:	d002      	beq.n	800654e <USBD_StdEPReq+0x168>
 8006548:	2b03      	cmp	r3, #3
 800654a:	d032      	beq.n	80065b2 <USBD_StdEPReq+0x1cc>
 800654c:	e097      	b.n	800667e <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800654e:	7bbb      	ldrb	r3, [r7, #14]
 8006550:	2b00      	cmp	r3, #0
 8006552:	d007      	beq.n	8006564 <USBD_StdEPReq+0x17e>
 8006554:	7bbb      	ldrb	r3, [r7, #14]
 8006556:	2b80      	cmp	r3, #128	; 0x80
 8006558:	d004      	beq.n	8006564 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 800655a:	6839      	ldr	r1, [r7, #0]
 800655c:	6878      	ldr	r0, [r7, #4]
 800655e:	f000 fbd3 	bl	8006d08 <USBD_CtlError>
                break;
 8006562:	e091      	b.n	8006688 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006564:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006568:	2b00      	cmp	r3, #0
 800656a:	da0b      	bge.n	8006584 <USBD_StdEPReq+0x19e>
 800656c:	7bbb      	ldrb	r3, [r7, #14]
 800656e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006572:	4613      	mov	r3, r2
 8006574:	009b      	lsls	r3, r3, #2
 8006576:	4413      	add	r3, r2
 8006578:	009b      	lsls	r3, r3, #2
 800657a:	3310      	adds	r3, #16
 800657c:	687a      	ldr	r2, [r7, #4]
 800657e:	4413      	add	r3, r2
 8006580:	3304      	adds	r3, #4
 8006582:	e00b      	b.n	800659c <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006584:	7bbb      	ldrb	r3, [r7, #14]
 8006586:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800658a:	4613      	mov	r3, r2
 800658c:	009b      	lsls	r3, r3, #2
 800658e:	4413      	add	r3, r2
 8006590:	009b      	lsls	r3, r3, #2
 8006592:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006596:	687a      	ldr	r2, [r7, #4]
 8006598:	4413      	add	r3, r2
 800659a:	3304      	adds	r3, #4
 800659c:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800659e:	68bb      	ldr	r3, [r7, #8]
 80065a0:	2200      	movs	r2, #0
 80065a2:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80065a4:	68bb      	ldr	r3, [r7, #8]
 80065a6:	2202      	movs	r2, #2
 80065a8:	4619      	mov	r1, r3
 80065aa:	6878      	ldr	r0, [r7, #4]
 80065ac:	f000 fc1d 	bl	8006dea <USBD_CtlSendData>
              break;
 80065b0:	e06a      	b.n	8006688 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80065b2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	da11      	bge.n	80065de <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80065ba:	7bbb      	ldrb	r3, [r7, #14]
 80065bc:	f003 020f 	and.w	r2, r3, #15
 80065c0:	6879      	ldr	r1, [r7, #4]
 80065c2:	4613      	mov	r3, r2
 80065c4:	009b      	lsls	r3, r3, #2
 80065c6:	4413      	add	r3, r2
 80065c8:	009b      	lsls	r3, r3, #2
 80065ca:	440b      	add	r3, r1
 80065cc:	3324      	adds	r3, #36	; 0x24
 80065ce:	881b      	ldrh	r3, [r3, #0]
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d117      	bne.n	8006604 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 80065d4:	6839      	ldr	r1, [r7, #0]
 80065d6:	6878      	ldr	r0, [r7, #4]
 80065d8:	f000 fb96 	bl	8006d08 <USBD_CtlError>
                  break;
 80065dc:	e054      	b.n	8006688 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80065de:	7bbb      	ldrb	r3, [r7, #14]
 80065e0:	f003 020f 	and.w	r2, r3, #15
 80065e4:	6879      	ldr	r1, [r7, #4]
 80065e6:	4613      	mov	r3, r2
 80065e8:	009b      	lsls	r3, r3, #2
 80065ea:	4413      	add	r3, r2
 80065ec:	009b      	lsls	r3, r3, #2
 80065ee:	440b      	add	r3, r1
 80065f0:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80065f4:	881b      	ldrh	r3, [r3, #0]
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d104      	bne.n	8006604 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 80065fa:	6839      	ldr	r1, [r7, #0]
 80065fc:	6878      	ldr	r0, [r7, #4]
 80065fe:	f000 fb83 	bl	8006d08 <USBD_CtlError>
                  break;
 8006602:	e041      	b.n	8006688 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006604:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006608:	2b00      	cmp	r3, #0
 800660a:	da0b      	bge.n	8006624 <USBD_StdEPReq+0x23e>
 800660c:	7bbb      	ldrb	r3, [r7, #14]
 800660e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006612:	4613      	mov	r3, r2
 8006614:	009b      	lsls	r3, r3, #2
 8006616:	4413      	add	r3, r2
 8006618:	009b      	lsls	r3, r3, #2
 800661a:	3310      	adds	r3, #16
 800661c:	687a      	ldr	r2, [r7, #4]
 800661e:	4413      	add	r3, r2
 8006620:	3304      	adds	r3, #4
 8006622:	e00b      	b.n	800663c <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006624:	7bbb      	ldrb	r3, [r7, #14]
 8006626:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800662a:	4613      	mov	r3, r2
 800662c:	009b      	lsls	r3, r3, #2
 800662e:	4413      	add	r3, r2
 8006630:	009b      	lsls	r3, r3, #2
 8006632:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006636:	687a      	ldr	r2, [r7, #4]
 8006638:	4413      	add	r3, r2
 800663a:	3304      	adds	r3, #4
 800663c:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800663e:	7bbb      	ldrb	r3, [r7, #14]
 8006640:	2b00      	cmp	r3, #0
 8006642:	d002      	beq.n	800664a <USBD_StdEPReq+0x264>
 8006644:	7bbb      	ldrb	r3, [r7, #14]
 8006646:	2b80      	cmp	r3, #128	; 0x80
 8006648:	d103      	bne.n	8006652 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 800664a:	68bb      	ldr	r3, [r7, #8]
 800664c:	2200      	movs	r2, #0
 800664e:	601a      	str	r2, [r3, #0]
 8006650:	e00e      	b.n	8006670 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8006652:	7bbb      	ldrb	r3, [r7, #14]
 8006654:	4619      	mov	r1, r3
 8006656:	6878      	ldr	r0, [r7, #4]
 8006658:	f001 f813 	bl	8007682 <USBD_LL_IsStallEP>
 800665c:	4603      	mov	r3, r0
 800665e:	2b00      	cmp	r3, #0
 8006660:	d003      	beq.n	800666a <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 8006662:	68bb      	ldr	r3, [r7, #8]
 8006664:	2201      	movs	r2, #1
 8006666:	601a      	str	r2, [r3, #0]
 8006668:	e002      	b.n	8006670 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 800666a:	68bb      	ldr	r3, [r7, #8]
 800666c:	2200      	movs	r2, #0
 800666e:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006670:	68bb      	ldr	r3, [r7, #8]
 8006672:	2202      	movs	r2, #2
 8006674:	4619      	mov	r1, r3
 8006676:	6878      	ldr	r0, [r7, #4]
 8006678:	f000 fbb7 	bl	8006dea <USBD_CtlSendData>
              break;
 800667c:	e004      	b.n	8006688 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800667e:	6839      	ldr	r1, [r7, #0]
 8006680:	6878      	ldr	r0, [r7, #4]
 8006682:	f000 fb41 	bl	8006d08 <USBD_CtlError>
              break;
 8006686:	bf00      	nop
          }
          break;
 8006688:	e004      	b.n	8006694 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 800668a:	6839      	ldr	r1, [r7, #0]
 800668c:	6878      	ldr	r0, [r7, #4]
 800668e:	f000 fb3b 	bl	8006d08 <USBD_CtlError>
          break;
 8006692:	bf00      	nop
      }
      break;
 8006694:	e004      	b.n	80066a0 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 8006696:	6839      	ldr	r1, [r7, #0]
 8006698:	6878      	ldr	r0, [r7, #4]
 800669a:	f000 fb35 	bl	8006d08 <USBD_CtlError>
      break;
 800669e:	bf00      	nop
  }

  return ret;
 80066a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80066a2:	4618      	mov	r0, r3
 80066a4:	3710      	adds	r7, #16
 80066a6:	46bd      	mov	sp, r7
 80066a8:	bd80      	pop	{r7, pc}
	...

080066ac <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80066ac:	b580      	push	{r7, lr}
 80066ae:	b084      	sub	sp, #16
 80066b0:	af00      	add	r7, sp, #0
 80066b2:	6078      	str	r0, [r7, #4]
 80066b4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80066b6:	2300      	movs	r3, #0
 80066b8:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80066ba:	2300      	movs	r3, #0
 80066bc:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80066be:	2300      	movs	r3, #0
 80066c0:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80066c2:	683b      	ldr	r3, [r7, #0]
 80066c4:	885b      	ldrh	r3, [r3, #2]
 80066c6:	0a1b      	lsrs	r3, r3, #8
 80066c8:	b29b      	uxth	r3, r3
 80066ca:	3b01      	subs	r3, #1
 80066cc:	2b06      	cmp	r3, #6
 80066ce:	f200 8128 	bhi.w	8006922 <USBD_GetDescriptor+0x276>
 80066d2:	a201      	add	r2, pc, #4	; (adr r2, 80066d8 <USBD_GetDescriptor+0x2c>)
 80066d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066d8:	080066f5 	.word	0x080066f5
 80066dc:	0800670d 	.word	0x0800670d
 80066e0:	0800674d 	.word	0x0800674d
 80066e4:	08006923 	.word	0x08006923
 80066e8:	08006923 	.word	0x08006923
 80066ec:	080068c3 	.word	0x080068c3
 80066f0:	080068ef 	.word	0x080068ef
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	687a      	ldr	r2, [r7, #4]
 80066fe:	7c12      	ldrb	r2, [r2, #16]
 8006700:	f107 0108 	add.w	r1, r7, #8
 8006704:	4610      	mov	r0, r2
 8006706:	4798      	blx	r3
 8006708:	60f8      	str	r0, [r7, #12]
      break;
 800670a:	e112      	b.n	8006932 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	7c1b      	ldrb	r3, [r3, #16]
 8006710:	2b00      	cmp	r3, #0
 8006712:	d10d      	bne.n	8006730 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800671a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800671c:	f107 0208 	add.w	r2, r7, #8
 8006720:	4610      	mov	r0, r2
 8006722:	4798      	blx	r3
 8006724:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	3301      	adds	r3, #1
 800672a:	2202      	movs	r2, #2
 800672c:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800672e:	e100      	b.n	8006932 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006736:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006738:	f107 0208 	add.w	r2, r7, #8
 800673c:	4610      	mov	r0, r2
 800673e:	4798      	blx	r3
 8006740:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	3301      	adds	r3, #1
 8006746:	2202      	movs	r2, #2
 8006748:	701a      	strb	r2, [r3, #0]
      break;
 800674a:	e0f2      	b.n	8006932 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800674c:	683b      	ldr	r3, [r7, #0]
 800674e:	885b      	ldrh	r3, [r3, #2]
 8006750:	b2db      	uxtb	r3, r3
 8006752:	2b05      	cmp	r3, #5
 8006754:	f200 80ac 	bhi.w	80068b0 <USBD_GetDescriptor+0x204>
 8006758:	a201      	add	r2, pc, #4	; (adr r2, 8006760 <USBD_GetDescriptor+0xb4>)
 800675a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800675e:	bf00      	nop
 8006760:	08006779 	.word	0x08006779
 8006764:	080067ad 	.word	0x080067ad
 8006768:	080067e1 	.word	0x080067e1
 800676c:	08006815 	.word	0x08006815
 8006770:	08006849 	.word	0x08006849
 8006774:	0800687d 	.word	0x0800687d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800677e:	685b      	ldr	r3, [r3, #4]
 8006780:	2b00      	cmp	r3, #0
 8006782:	d00b      	beq.n	800679c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800678a:	685b      	ldr	r3, [r3, #4]
 800678c:	687a      	ldr	r2, [r7, #4]
 800678e:	7c12      	ldrb	r2, [r2, #16]
 8006790:	f107 0108 	add.w	r1, r7, #8
 8006794:	4610      	mov	r0, r2
 8006796:	4798      	blx	r3
 8006798:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800679a:	e091      	b.n	80068c0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800679c:	6839      	ldr	r1, [r7, #0]
 800679e:	6878      	ldr	r0, [r7, #4]
 80067a0:	f000 fab2 	bl	8006d08 <USBD_CtlError>
            err++;
 80067a4:	7afb      	ldrb	r3, [r7, #11]
 80067a6:	3301      	adds	r3, #1
 80067a8:	72fb      	strb	r3, [r7, #11]
          break;
 80067aa:	e089      	b.n	80068c0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80067b2:	689b      	ldr	r3, [r3, #8]
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d00b      	beq.n	80067d0 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80067be:	689b      	ldr	r3, [r3, #8]
 80067c0:	687a      	ldr	r2, [r7, #4]
 80067c2:	7c12      	ldrb	r2, [r2, #16]
 80067c4:	f107 0108 	add.w	r1, r7, #8
 80067c8:	4610      	mov	r0, r2
 80067ca:	4798      	blx	r3
 80067cc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80067ce:	e077      	b.n	80068c0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80067d0:	6839      	ldr	r1, [r7, #0]
 80067d2:	6878      	ldr	r0, [r7, #4]
 80067d4:	f000 fa98 	bl	8006d08 <USBD_CtlError>
            err++;
 80067d8:	7afb      	ldrb	r3, [r7, #11]
 80067da:	3301      	adds	r3, #1
 80067dc:	72fb      	strb	r3, [r7, #11]
          break;
 80067de:	e06f      	b.n	80068c0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80067e6:	68db      	ldr	r3, [r3, #12]
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d00b      	beq.n	8006804 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80067f2:	68db      	ldr	r3, [r3, #12]
 80067f4:	687a      	ldr	r2, [r7, #4]
 80067f6:	7c12      	ldrb	r2, [r2, #16]
 80067f8:	f107 0108 	add.w	r1, r7, #8
 80067fc:	4610      	mov	r0, r2
 80067fe:	4798      	blx	r3
 8006800:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006802:	e05d      	b.n	80068c0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006804:	6839      	ldr	r1, [r7, #0]
 8006806:	6878      	ldr	r0, [r7, #4]
 8006808:	f000 fa7e 	bl	8006d08 <USBD_CtlError>
            err++;
 800680c:	7afb      	ldrb	r3, [r7, #11]
 800680e:	3301      	adds	r3, #1
 8006810:	72fb      	strb	r3, [r7, #11]
          break;
 8006812:	e055      	b.n	80068c0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800681a:	691b      	ldr	r3, [r3, #16]
 800681c:	2b00      	cmp	r3, #0
 800681e:	d00b      	beq.n	8006838 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006826:	691b      	ldr	r3, [r3, #16]
 8006828:	687a      	ldr	r2, [r7, #4]
 800682a:	7c12      	ldrb	r2, [r2, #16]
 800682c:	f107 0108 	add.w	r1, r7, #8
 8006830:	4610      	mov	r0, r2
 8006832:	4798      	blx	r3
 8006834:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006836:	e043      	b.n	80068c0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006838:	6839      	ldr	r1, [r7, #0]
 800683a:	6878      	ldr	r0, [r7, #4]
 800683c:	f000 fa64 	bl	8006d08 <USBD_CtlError>
            err++;
 8006840:	7afb      	ldrb	r3, [r7, #11]
 8006842:	3301      	adds	r3, #1
 8006844:	72fb      	strb	r3, [r7, #11]
          break;
 8006846:	e03b      	b.n	80068c0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800684e:	695b      	ldr	r3, [r3, #20]
 8006850:	2b00      	cmp	r3, #0
 8006852:	d00b      	beq.n	800686c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800685a:	695b      	ldr	r3, [r3, #20]
 800685c:	687a      	ldr	r2, [r7, #4]
 800685e:	7c12      	ldrb	r2, [r2, #16]
 8006860:	f107 0108 	add.w	r1, r7, #8
 8006864:	4610      	mov	r0, r2
 8006866:	4798      	blx	r3
 8006868:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800686a:	e029      	b.n	80068c0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800686c:	6839      	ldr	r1, [r7, #0]
 800686e:	6878      	ldr	r0, [r7, #4]
 8006870:	f000 fa4a 	bl	8006d08 <USBD_CtlError>
            err++;
 8006874:	7afb      	ldrb	r3, [r7, #11]
 8006876:	3301      	adds	r3, #1
 8006878:	72fb      	strb	r3, [r7, #11]
          break;
 800687a:	e021      	b.n	80068c0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006882:	699b      	ldr	r3, [r3, #24]
 8006884:	2b00      	cmp	r3, #0
 8006886:	d00b      	beq.n	80068a0 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800688e:	699b      	ldr	r3, [r3, #24]
 8006890:	687a      	ldr	r2, [r7, #4]
 8006892:	7c12      	ldrb	r2, [r2, #16]
 8006894:	f107 0108 	add.w	r1, r7, #8
 8006898:	4610      	mov	r0, r2
 800689a:	4798      	blx	r3
 800689c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800689e:	e00f      	b.n	80068c0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80068a0:	6839      	ldr	r1, [r7, #0]
 80068a2:	6878      	ldr	r0, [r7, #4]
 80068a4:	f000 fa30 	bl	8006d08 <USBD_CtlError>
            err++;
 80068a8:	7afb      	ldrb	r3, [r7, #11]
 80068aa:	3301      	adds	r3, #1
 80068ac:	72fb      	strb	r3, [r7, #11]
          break;
 80068ae:	e007      	b.n	80068c0 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 80068b0:	6839      	ldr	r1, [r7, #0]
 80068b2:	6878      	ldr	r0, [r7, #4]
 80068b4:	f000 fa28 	bl	8006d08 <USBD_CtlError>
          err++;
 80068b8:	7afb      	ldrb	r3, [r7, #11]
 80068ba:	3301      	adds	r3, #1
 80068bc:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 80068be:	bf00      	nop
      }
      break;
 80068c0:	e037      	b.n	8006932 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	7c1b      	ldrb	r3, [r3, #16]
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d109      	bne.n	80068de <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80068d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80068d2:	f107 0208 	add.w	r2, r7, #8
 80068d6:	4610      	mov	r0, r2
 80068d8:	4798      	blx	r3
 80068da:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80068dc:	e029      	b.n	8006932 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80068de:	6839      	ldr	r1, [r7, #0]
 80068e0:	6878      	ldr	r0, [r7, #4]
 80068e2:	f000 fa11 	bl	8006d08 <USBD_CtlError>
        err++;
 80068e6:	7afb      	ldrb	r3, [r7, #11]
 80068e8:	3301      	adds	r3, #1
 80068ea:	72fb      	strb	r3, [r7, #11]
      break;
 80068ec:	e021      	b.n	8006932 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	7c1b      	ldrb	r3, [r3, #16]
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d10d      	bne.n	8006912 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80068fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068fe:	f107 0208 	add.w	r2, r7, #8
 8006902:	4610      	mov	r0, r2
 8006904:	4798      	blx	r3
 8006906:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	3301      	adds	r3, #1
 800690c:	2207      	movs	r2, #7
 800690e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006910:	e00f      	b.n	8006932 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8006912:	6839      	ldr	r1, [r7, #0]
 8006914:	6878      	ldr	r0, [r7, #4]
 8006916:	f000 f9f7 	bl	8006d08 <USBD_CtlError>
        err++;
 800691a:	7afb      	ldrb	r3, [r7, #11]
 800691c:	3301      	adds	r3, #1
 800691e:	72fb      	strb	r3, [r7, #11]
      break;
 8006920:	e007      	b.n	8006932 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8006922:	6839      	ldr	r1, [r7, #0]
 8006924:	6878      	ldr	r0, [r7, #4]
 8006926:	f000 f9ef 	bl	8006d08 <USBD_CtlError>
      err++;
 800692a:	7afb      	ldrb	r3, [r7, #11]
 800692c:	3301      	adds	r3, #1
 800692e:	72fb      	strb	r3, [r7, #11]
      break;
 8006930:	bf00      	nop
  }

  if (err != 0U)
 8006932:	7afb      	ldrb	r3, [r7, #11]
 8006934:	2b00      	cmp	r3, #0
 8006936:	d11e      	bne.n	8006976 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8006938:	683b      	ldr	r3, [r7, #0]
 800693a:	88db      	ldrh	r3, [r3, #6]
 800693c:	2b00      	cmp	r3, #0
 800693e:	d016      	beq.n	800696e <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8006940:	893b      	ldrh	r3, [r7, #8]
 8006942:	2b00      	cmp	r3, #0
 8006944:	d00e      	beq.n	8006964 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8006946:	683b      	ldr	r3, [r7, #0]
 8006948:	88da      	ldrh	r2, [r3, #6]
 800694a:	893b      	ldrh	r3, [r7, #8]
 800694c:	4293      	cmp	r3, r2
 800694e:	bf28      	it	cs
 8006950:	4613      	movcs	r3, r2
 8006952:	b29b      	uxth	r3, r3
 8006954:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8006956:	893b      	ldrh	r3, [r7, #8]
 8006958:	461a      	mov	r2, r3
 800695a:	68f9      	ldr	r1, [r7, #12]
 800695c:	6878      	ldr	r0, [r7, #4]
 800695e:	f000 fa44 	bl	8006dea <USBD_CtlSendData>
 8006962:	e009      	b.n	8006978 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8006964:	6839      	ldr	r1, [r7, #0]
 8006966:	6878      	ldr	r0, [r7, #4]
 8006968:	f000 f9ce 	bl	8006d08 <USBD_CtlError>
 800696c:	e004      	b.n	8006978 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800696e:	6878      	ldr	r0, [r7, #4]
 8006970:	f000 fa78 	bl	8006e64 <USBD_CtlSendStatus>
 8006974:	e000      	b.n	8006978 <USBD_GetDescriptor+0x2cc>
    return;
 8006976:	bf00      	nop
  }
}
 8006978:	3710      	adds	r7, #16
 800697a:	46bd      	mov	sp, r7
 800697c:	bd80      	pop	{r7, pc}
 800697e:	bf00      	nop

08006980 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006980:	b580      	push	{r7, lr}
 8006982:	b084      	sub	sp, #16
 8006984:	af00      	add	r7, sp, #0
 8006986:	6078      	str	r0, [r7, #4]
 8006988:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800698a:	683b      	ldr	r3, [r7, #0]
 800698c:	889b      	ldrh	r3, [r3, #4]
 800698e:	2b00      	cmp	r3, #0
 8006990:	d131      	bne.n	80069f6 <USBD_SetAddress+0x76>
 8006992:	683b      	ldr	r3, [r7, #0]
 8006994:	88db      	ldrh	r3, [r3, #6]
 8006996:	2b00      	cmp	r3, #0
 8006998:	d12d      	bne.n	80069f6 <USBD_SetAddress+0x76>
 800699a:	683b      	ldr	r3, [r7, #0]
 800699c:	885b      	ldrh	r3, [r3, #2]
 800699e:	2b7f      	cmp	r3, #127	; 0x7f
 80069a0:	d829      	bhi.n	80069f6 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80069a2:	683b      	ldr	r3, [r7, #0]
 80069a4:	885b      	ldrh	r3, [r3, #2]
 80069a6:	b2db      	uxtb	r3, r3
 80069a8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80069ac:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80069b4:	b2db      	uxtb	r3, r3
 80069b6:	2b03      	cmp	r3, #3
 80069b8:	d104      	bne.n	80069c4 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80069ba:	6839      	ldr	r1, [r7, #0]
 80069bc:	6878      	ldr	r0, [r7, #4]
 80069be:	f000 f9a3 	bl	8006d08 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80069c2:	e01d      	b.n	8006a00 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	7bfa      	ldrb	r2, [r7, #15]
 80069c8:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80069cc:	7bfb      	ldrb	r3, [r7, #15]
 80069ce:	4619      	mov	r1, r3
 80069d0:	6878      	ldr	r0, [r7, #4]
 80069d2:	f000 fe82 	bl	80076da <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80069d6:	6878      	ldr	r0, [r7, #4]
 80069d8:	f000 fa44 	bl	8006e64 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80069dc:	7bfb      	ldrb	r3, [r7, #15]
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d004      	beq.n	80069ec <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	2202      	movs	r2, #2
 80069e6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80069ea:	e009      	b.n	8006a00 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	2201      	movs	r2, #1
 80069f0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80069f4:	e004      	b.n	8006a00 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80069f6:	6839      	ldr	r1, [r7, #0]
 80069f8:	6878      	ldr	r0, [r7, #4]
 80069fa:	f000 f985 	bl	8006d08 <USBD_CtlError>
  }
}
 80069fe:	bf00      	nop
 8006a00:	bf00      	nop
 8006a02:	3710      	adds	r7, #16
 8006a04:	46bd      	mov	sp, r7
 8006a06:	bd80      	pop	{r7, pc}

08006a08 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006a08:	b580      	push	{r7, lr}
 8006a0a:	b084      	sub	sp, #16
 8006a0c:	af00      	add	r7, sp, #0
 8006a0e:	6078      	str	r0, [r7, #4]
 8006a10:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006a12:	2300      	movs	r3, #0
 8006a14:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8006a16:	683b      	ldr	r3, [r7, #0]
 8006a18:	885b      	ldrh	r3, [r3, #2]
 8006a1a:	b2da      	uxtb	r2, r3
 8006a1c:	4b4c      	ldr	r3, [pc, #304]	; (8006b50 <USBD_SetConfig+0x148>)
 8006a1e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8006a20:	4b4b      	ldr	r3, [pc, #300]	; (8006b50 <USBD_SetConfig+0x148>)
 8006a22:	781b      	ldrb	r3, [r3, #0]
 8006a24:	2b01      	cmp	r3, #1
 8006a26:	d905      	bls.n	8006a34 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8006a28:	6839      	ldr	r1, [r7, #0]
 8006a2a:	6878      	ldr	r0, [r7, #4]
 8006a2c:	f000 f96c 	bl	8006d08 <USBD_CtlError>
    return USBD_FAIL;
 8006a30:	2303      	movs	r3, #3
 8006a32:	e088      	b.n	8006b46 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006a3a:	b2db      	uxtb	r3, r3
 8006a3c:	2b02      	cmp	r3, #2
 8006a3e:	d002      	beq.n	8006a46 <USBD_SetConfig+0x3e>
 8006a40:	2b03      	cmp	r3, #3
 8006a42:	d025      	beq.n	8006a90 <USBD_SetConfig+0x88>
 8006a44:	e071      	b.n	8006b2a <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8006a46:	4b42      	ldr	r3, [pc, #264]	; (8006b50 <USBD_SetConfig+0x148>)
 8006a48:	781b      	ldrb	r3, [r3, #0]
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d01c      	beq.n	8006a88 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 8006a4e:	4b40      	ldr	r3, [pc, #256]	; (8006b50 <USBD_SetConfig+0x148>)
 8006a50:	781b      	ldrb	r3, [r3, #0]
 8006a52:	461a      	mov	r2, r3
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8006a58:	4b3d      	ldr	r3, [pc, #244]	; (8006b50 <USBD_SetConfig+0x148>)
 8006a5a:	781b      	ldrb	r3, [r3, #0]
 8006a5c:	4619      	mov	r1, r3
 8006a5e:	6878      	ldr	r0, [r7, #4]
 8006a60:	f7ff f949 	bl	8005cf6 <USBD_SetClassConfig>
 8006a64:	4603      	mov	r3, r0
 8006a66:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8006a68:	7bfb      	ldrb	r3, [r7, #15]
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d004      	beq.n	8006a78 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 8006a6e:	6839      	ldr	r1, [r7, #0]
 8006a70:	6878      	ldr	r0, [r7, #4]
 8006a72:	f000 f949 	bl	8006d08 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8006a76:	e065      	b.n	8006b44 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8006a78:	6878      	ldr	r0, [r7, #4]
 8006a7a:	f000 f9f3 	bl	8006e64 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	2203      	movs	r2, #3
 8006a82:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8006a86:	e05d      	b.n	8006b44 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8006a88:	6878      	ldr	r0, [r7, #4]
 8006a8a:	f000 f9eb 	bl	8006e64 <USBD_CtlSendStatus>
      break;
 8006a8e:	e059      	b.n	8006b44 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8006a90:	4b2f      	ldr	r3, [pc, #188]	; (8006b50 <USBD_SetConfig+0x148>)
 8006a92:	781b      	ldrb	r3, [r3, #0]
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d112      	bne.n	8006abe <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	2202      	movs	r2, #2
 8006a9c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8006aa0:	4b2b      	ldr	r3, [pc, #172]	; (8006b50 <USBD_SetConfig+0x148>)
 8006aa2:	781b      	ldrb	r3, [r3, #0]
 8006aa4:	461a      	mov	r2, r3
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006aaa:	4b29      	ldr	r3, [pc, #164]	; (8006b50 <USBD_SetConfig+0x148>)
 8006aac:	781b      	ldrb	r3, [r3, #0]
 8006aae:	4619      	mov	r1, r3
 8006ab0:	6878      	ldr	r0, [r7, #4]
 8006ab2:	f7ff f93c 	bl	8005d2e <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8006ab6:	6878      	ldr	r0, [r7, #4]
 8006ab8:	f000 f9d4 	bl	8006e64 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8006abc:	e042      	b.n	8006b44 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 8006abe:	4b24      	ldr	r3, [pc, #144]	; (8006b50 <USBD_SetConfig+0x148>)
 8006ac0:	781b      	ldrb	r3, [r3, #0]
 8006ac2:	461a      	mov	r2, r3
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	685b      	ldr	r3, [r3, #4]
 8006ac8:	429a      	cmp	r2, r3
 8006aca:	d02a      	beq.n	8006b22 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	685b      	ldr	r3, [r3, #4]
 8006ad0:	b2db      	uxtb	r3, r3
 8006ad2:	4619      	mov	r1, r3
 8006ad4:	6878      	ldr	r0, [r7, #4]
 8006ad6:	f7ff f92a 	bl	8005d2e <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8006ada:	4b1d      	ldr	r3, [pc, #116]	; (8006b50 <USBD_SetConfig+0x148>)
 8006adc:	781b      	ldrb	r3, [r3, #0]
 8006ade:	461a      	mov	r2, r3
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8006ae4:	4b1a      	ldr	r3, [pc, #104]	; (8006b50 <USBD_SetConfig+0x148>)
 8006ae6:	781b      	ldrb	r3, [r3, #0]
 8006ae8:	4619      	mov	r1, r3
 8006aea:	6878      	ldr	r0, [r7, #4]
 8006aec:	f7ff f903 	bl	8005cf6 <USBD_SetClassConfig>
 8006af0:	4603      	mov	r3, r0
 8006af2:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8006af4:	7bfb      	ldrb	r3, [r7, #15]
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d00f      	beq.n	8006b1a <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 8006afa:	6839      	ldr	r1, [r7, #0]
 8006afc:	6878      	ldr	r0, [r7, #4]
 8006afe:	f000 f903 	bl	8006d08 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	685b      	ldr	r3, [r3, #4]
 8006b06:	b2db      	uxtb	r3, r3
 8006b08:	4619      	mov	r1, r3
 8006b0a:	6878      	ldr	r0, [r7, #4]
 8006b0c:	f7ff f90f 	bl	8005d2e <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	2202      	movs	r2, #2
 8006b14:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8006b18:	e014      	b.n	8006b44 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8006b1a:	6878      	ldr	r0, [r7, #4]
 8006b1c:	f000 f9a2 	bl	8006e64 <USBD_CtlSendStatus>
      break;
 8006b20:	e010      	b.n	8006b44 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8006b22:	6878      	ldr	r0, [r7, #4]
 8006b24:	f000 f99e 	bl	8006e64 <USBD_CtlSendStatus>
      break;
 8006b28:	e00c      	b.n	8006b44 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8006b2a:	6839      	ldr	r1, [r7, #0]
 8006b2c:	6878      	ldr	r0, [r7, #4]
 8006b2e:	f000 f8eb 	bl	8006d08 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006b32:	4b07      	ldr	r3, [pc, #28]	; (8006b50 <USBD_SetConfig+0x148>)
 8006b34:	781b      	ldrb	r3, [r3, #0]
 8006b36:	4619      	mov	r1, r3
 8006b38:	6878      	ldr	r0, [r7, #4]
 8006b3a:	f7ff f8f8 	bl	8005d2e <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8006b3e:	2303      	movs	r3, #3
 8006b40:	73fb      	strb	r3, [r7, #15]
      break;
 8006b42:	bf00      	nop
  }

  return ret;
 8006b44:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b46:	4618      	mov	r0, r3
 8006b48:	3710      	adds	r7, #16
 8006b4a:	46bd      	mov	sp, r7
 8006b4c:	bd80      	pop	{r7, pc}
 8006b4e:	bf00      	nop
 8006b50:	20000184 	.word	0x20000184

08006b54 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006b54:	b580      	push	{r7, lr}
 8006b56:	b082      	sub	sp, #8
 8006b58:	af00      	add	r7, sp, #0
 8006b5a:	6078      	str	r0, [r7, #4]
 8006b5c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8006b5e:	683b      	ldr	r3, [r7, #0]
 8006b60:	88db      	ldrh	r3, [r3, #6]
 8006b62:	2b01      	cmp	r3, #1
 8006b64:	d004      	beq.n	8006b70 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8006b66:	6839      	ldr	r1, [r7, #0]
 8006b68:	6878      	ldr	r0, [r7, #4]
 8006b6a:	f000 f8cd 	bl	8006d08 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8006b6e:	e023      	b.n	8006bb8 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006b76:	b2db      	uxtb	r3, r3
 8006b78:	2b02      	cmp	r3, #2
 8006b7a:	dc02      	bgt.n	8006b82 <USBD_GetConfig+0x2e>
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	dc03      	bgt.n	8006b88 <USBD_GetConfig+0x34>
 8006b80:	e015      	b.n	8006bae <USBD_GetConfig+0x5a>
 8006b82:	2b03      	cmp	r3, #3
 8006b84:	d00b      	beq.n	8006b9e <USBD_GetConfig+0x4a>
 8006b86:	e012      	b.n	8006bae <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	2200      	movs	r2, #0
 8006b8c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	3308      	adds	r3, #8
 8006b92:	2201      	movs	r2, #1
 8006b94:	4619      	mov	r1, r3
 8006b96:	6878      	ldr	r0, [r7, #4]
 8006b98:	f000 f927 	bl	8006dea <USBD_CtlSendData>
        break;
 8006b9c:	e00c      	b.n	8006bb8 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	3304      	adds	r3, #4
 8006ba2:	2201      	movs	r2, #1
 8006ba4:	4619      	mov	r1, r3
 8006ba6:	6878      	ldr	r0, [r7, #4]
 8006ba8:	f000 f91f 	bl	8006dea <USBD_CtlSendData>
        break;
 8006bac:	e004      	b.n	8006bb8 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8006bae:	6839      	ldr	r1, [r7, #0]
 8006bb0:	6878      	ldr	r0, [r7, #4]
 8006bb2:	f000 f8a9 	bl	8006d08 <USBD_CtlError>
        break;
 8006bb6:	bf00      	nop
}
 8006bb8:	bf00      	nop
 8006bba:	3708      	adds	r7, #8
 8006bbc:	46bd      	mov	sp, r7
 8006bbe:	bd80      	pop	{r7, pc}

08006bc0 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006bc0:	b580      	push	{r7, lr}
 8006bc2:	b082      	sub	sp, #8
 8006bc4:	af00      	add	r7, sp, #0
 8006bc6:	6078      	str	r0, [r7, #4]
 8006bc8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006bd0:	b2db      	uxtb	r3, r3
 8006bd2:	3b01      	subs	r3, #1
 8006bd4:	2b02      	cmp	r3, #2
 8006bd6:	d81e      	bhi.n	8006c16 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8006bd8:	683b      	ldr	r3, [r7, #0]
 8006bda:	88db      	ldrh	r3, [r3, #6]
 8006bdc:	2b02      	cmp	r3, #2
 8006bde:	d004      	beq.n	8006bea <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8006be0:	6839      	ldr	r1, [r7, #0]
 8006be2:	6878      	ldr	r0, [r7, #4]
 8006be4:	f000 f890 	bl	8006d08 <USBD_CtlError>
        break;
 8006be8:	e01a      	b.n	8006c20 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	2201      	movs	r2, #1
 8006bee:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d005      	beq.n	8006c06 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	68db      	ldr	r3, [r3, #12]
 8006bfe:	f043 0202 	orr.w	r2, r3, #2
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	330c      	adds	r3, #12
 8006c0a:	2202      	movs	r2, #2
 8006c0c:	4619      	mov	r1, r3
 8006c0e:	6878      	ldr	r0, [r7, #4]
 8006c10:	f000 f8eb 	bl	8006dea <USBD_CtlSendData>
      break;
 8006c14:	e004      	b.n	8006c20 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8006c16:	6839      	ldr	r1, [r7, #0]
 8006c18:	6878      	ldr	r0, [r7, #4]
 8006c1a:	f000 f875 	bl	8006d08 <USBD_CtlError>
      break;
 8006c1e:	bf00      	nop
  }
}
 8006c20:	bf00      	nop
 8006c22:	3708      	adds	r7, #8
 8006c24:	46bd      	mov	sp, r7
 8006c26:	bd80      	pop	{r7, pc}

08006c28 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006c28:	b580      	push	{r7, lr}
 8006c2a:	b082      	sub	sp, #8
 8006c2c:	af00      	add	r7, sp, #0
 8006c2e:	6078      	str	r0, [r7, #4]
 8006c30:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006c32:	683b      	ldr	r3, [r7, #0]
 8006c34:	885b      	ldrh	r3, [r3, #2]
 8006c36:	2b01      	cmp	r3, #1
 8006c38:	d106      	bne.n	8006c48 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	2201      	movs	r2, #1
 8006c3e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8006c42:	6878      	ldr	r0, [r7, #4]
 8006c44:	f000 f90e 	bl	8006e64 <USBD_CtlSendStatus>
  }
}
 8006c48:	bf00      	nop
 8006c4a:	3708      	adds	r7, #8
 8006c4c:	46bd      	mov	sp, r7
 8006c4e:	bd80      	pop	{r7, pc}

08006c50 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006c50:	b580      	push	{r7, lr}
 8006c52:	b082      	sub	sp, #8
 8006c54:	af00      	add	r7, sp, #0
 8006c56:	6078      	str	r0, [r7, #4]
 8006c58:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006c60:	b2db      	uxtb	r3, r3
 8006c62:	3b01      	subs	r3, #1
 8006c64:	2b02      	cmp	r3, #2
 8006c66:	d80b      	bhi.n	8006c80 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006c68:	683b      	ldr	r3, [r7, #0]
 8006c6a:	885b      	ldrh	r3, [r3, #2]
 8006c6c:	2b01      	cmp	r3, #1
 8006c6e:	d10c      	bne.n	8006c8a <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	2200      	movs	r2, #0
 8006c74:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8006c78:	6878      	ldr	r0, [r7, #4]
 8006c7a:	f000 f8f3 	bl	8006e64 <USBD_CtlSendStatus>
      }
      break;
 8006c7e:	e004      	b.n	8006c8a <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8006c80:	6839      	ldr	r1, [r7, #0]
 8006c82:	6878      	ldr	r0, [r7, #4]
 8006c84:	f000 f840 	bl	8006d08 <USBD_CtlError>
      break;
 8006c88:	e000      	b.n	8006c8c <USBD_ClrFeature+0x3c>
      break;
 8006c8a:	bf00      	nop
  }
}
 8006c8c:	bf00      	nop
 8006c8e:	3708      	adds	r7, #8
 8006c90:	46bd      	mov	sp, r7
 8006c92:	bd80      	pop	{r7, pc}

08006c94 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8006c94:	b580      	push	{r7, lr}
 8006c96:	b084      	sub	sp, #16
 8006c98:	af00      	add	r7, sp, #0
 8006c9a:	6078      	str	r0, [r7, #4]
 8006c9c:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8006c9e:	683b      	ldr	r3, [r7, #0]
 8006ca0:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	781a      	ldrb	r2, [r3, #0]
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	3301      	adds	r3, #1
 8006cae:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	781a      	ldrb	r2, [r3, #0]
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	3301      	adds	r3, #1
 8006cbc:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8006cbe:	68f8      	ldr	r0, [r7, #12]
 8006cc0:	f7ff fabc 	bl	800623c <SWAPBYTE>
 8006cc4:	4603      	mov	r3, r0
 8006cc6:	461a      	mov	r2, r3
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	3301      	adds	r3, #1
 8006cd0:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	3301      	adds	r3, #1
 8006cd6:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8006cd8:	68f8      	ldr	r0, [r7, #12]
 8006cda:	f7ff faaf 	bl	800623c <SWAPBYTE>
 8006cde:	4603      	mov	r3, r0
 8006ce0:	461a      	mov	r2, r3
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	3301      	adds	r3, #1
 8006cea:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	3301      	adds	r3, #1
 8006cf0:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8006cf2:	68f8      	ldr	r0, [r7, #12]
 8006cf4:	f7ff faa2 	bl	800623c <SWAPBYTE>
 8006cf8:	4603      	mov	r3, r0
 8006cfa:	461a      	mov	r2, r3
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	80da      	strh	r2, [r3, #6]
}
 8006d00:	bf00      	nop
 8006d02:	3710      	adds	r7, #16
 8006d04:	46bd      	mov	sp, r7
 8006d06:	bd80      	pop	{r7, pc}

08006d08 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006d08:	b580      	push	{r7, lr}
 8006d0a:	b082      	sub	sp, #8
 8006d0c:	af00      	add	r7, sp, #0
 8006d0e:	6078      	str	r0, [r7, #4]
 8006d10:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8006d12:	2180      	movs	r1, #128	; 0x80
 8006d14:	6878      	ldr	r0, [r7, #4]
 8006d16:	f000 fc76 	bl	8007606 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8006d1a:	2100      	movs	r1, #0
 8006d1c:	6878      	ldr	r0, [r7, #4]
 8006d1e:	f000 fc72 	bl	8007606 <USBD_LL_StallEP>
}
 8006d22:	bf00      	nop
 8006d24:	3708      	adds	r7, #8
 8006d26:	46bd      	mov	sp, r7
 8006d28:	bd80      	pop	{r7, pc}

08006d2a <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8006d2a:	b580      	push	{r7, lr}
 8006d2c:	b086      	sub	sp, #24
 8006d2e:	af00      	add	r7, sp, #0
 8006d30:	60f8      	str	r0, [r7, #12]
 8006d32:	60b9      	str	r1, [r7, #8]
 8006d34:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8006d36:	2300      	movs	r3, #0
 8006d38:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d036      	beq.n	8006dae <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8006d44:	6938      	ldr	r0, [r7, #16]
 8006d46:	f000 f836 	bl	8006db6 <USBD_GetLen>
 8006d4a:	4603      	mov	r3, r0
 8006d4c:	3301      	adds	r3, #1
 8006d4e:	b29b      	uxth	r3, r3
 8006d50:	005b      	lsls	r3, r3, #1
 8006d52:	b29a      	uxth	r2, r3
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8006d58:	7dfb      	ldrb	r3, [r7, #23]
 8006d5a:	68ba      	ldr	r2, [r7, #8]
 8006d5c:	4413      	add	r3, r2
 8006d5e:	687a      	ldr	r2, [r7, #4]
 8006d60:	7812      	ldrb	r2, [r2, #0]
 8006d62:	701a      	strb	r2, [r3, #0]
  idx++;
 8006d64:	7dfb      	ldrb	r3, [r7, #23]
 8006d66:	3301      	adds	r3, #1
 8006d68:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8006d6a:	7dfb      	ldrb	r3, [r7, #23]
 8006d6c:	68ba      	ldr	r2, [r7, #8]
 8006d6e:	4413      	add	r3, r2
 8006d70:	2203      	movs	r2, #3
 8006d72:	701a      	strb	r2, [r3, #0]
  idx++;
 8006d74:	7dfb      	ldrb	r3, [r7, #23]
 8006d76:	3301      	adds	r3, #1
 8006d78:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8006d7a:	e013      	b.n	8006da4 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8006d7c:	7dfb      	ldrb	r3, [r7, #23]
 8006d7e:	68ba      	ldr	r2, [r7, #8]
 8006d80:	4413      	add	r3, r2
 8006d82:	693a      	ldr	r2, [r7, #16]
 8006d84:	7812      	ldrb	r2, [r2, #0]
 8006d86:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8006d88:	693b      	ldr	r3, [r7, #16]
 8006d8a:	3301      	adds	r3, #1
 8006d8c:	613b      	str	r3, [r7, #16]
    idx++;
 8006d8e:	7dfb      	ldrb	r3, [r7, #23]
 8006d90:	3301      	adds	r3, #1
 8006d92:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8006d94:	7dfb      	ldrb	r3, [r7, #23]
 8006d96:	68ba      	ldr	r2, [r7, #8]
 8006d98:	4413      	add	r3, r2
 8006d9a:	2200      	movs	r2, #0
 8006d9c:	701a      	strb	r2, [r3, #0]
    idx++;
 8006d9e:	7dfb      	ldrb	r3, [r7, #23]
 8006da0:	3301      	adds	r3, #1
 8006da2:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8006da4:	693b      	ldr	r3, [r7, #16]
 8006da6:	781b      	ldrb	r3, [r3, #0]
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d1e7      	bne.n	8006d7c <USBD_GetString+0x52>
 8006dac:	e000      	b.n	8006db0 <USBD_GetString+0x86>
    return;
 8006dae:	bf00      	nop
  }
}
 8006db0:	3718      	adds	r7, #24
 8006db2:	46bd      	mov	sp, r7
 8006db4:	bd80      	pop	{r7, pc}

08006db6 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8006db6:	b480      	push	{r7}
 8006db8:	b085      	sub	sp, #20
 8006dba:	af00      	add	r7, sp, #0
 8006dbc:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8006dbe:	2300      	movs	r3, #0
 8006dc0:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8006dc6:	e005      	b.n	8006dd4 <USBD_GetLen+0x1e>
  {
    len++;
 8006dc8:	7bfb      	ldrb	r3, [r7, #15]
 8006dca:	3301      	adds	r3, #1
 8006dcc:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8006dce:	68bb      	ldr	r3, [r7, #8]
 8006dd0:	3301      	adds	r3, #1
 8006dd2:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8006dd4:	68bb      	ldr	r3, [r7, #8]
 8006dd6:	781b      	ldrb	r3, [r3, #0]
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d1f5      	bne.n	8006dc8 <USBD_GetLen+0x12>
  }

  return len;
 8006ddc:	7bfb      	ldrb	r3, [r7, #15]
}
 8006dde:	4618      	mov	r0, r3
 8006de0:	3714      	adds	r7, #20
 8006de2:	46bd      	mov	sp, r7
 8006de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006de8:	4770      	bx	lr

08006dea <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8006dea:	b580      	push	{r7, lr}
 8006dec:	b084      	sub	sp, #16
 8006dee:	af00      	add	r7, sp, #0
 8006df0:	60f8      	str	r0, [r7, #12]
 8006df2:	60b9      	str	r1, [r7, #8]
 8006df4:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	2202      	movs	r2, #2
 8006dfa:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	687a      	ldr	r2, [r7, #4]
 8006e02:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	687a      	ldr	r2, [r7, #4]
 8006e08:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	68ba      	ldr	r2, [r7, #8]
 8006e0e:	2100      	movs	r1, #0
 8006e10:	68f8      	ldr	r0, [r7, #12]
 8006e12:	f000 fc81 	bl	8007718 <USBD_LL_Transmit>

  return USBD_OK;
 8006e16:	2300      	movs	r3, #0
}
 8006e18:	4618      	mov	r0, r3
 8006e1a:	3710      	adds	r7, #16
 8006e1c:	46bd      	mov	sp, r7
 8006e1e:	bd80      	pop	{r7, pc}

08006e20 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8006e20:	b580      	push	{r7, lr}
 8006e22:	b084      	sub	sp, #16
 8006e24:	af00      	add	r7, sp, #0
 8006e26:	60f8      	str	r0, [r7, #12]
 8006e28:	60b9      	str	r1, [r7, #8]
 8006e2a:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	68ba      	ldr	r2, [r7, #8]
 8006e30:	2100      	movs	r1, #0
 8006e32:	68f8      	ldr	r0, [r7, #12]
 8006e34:	f000 fc70 	bl	8007718 <USBD_LL_Transmit>

  return USBD_OK;
 8006e38:	2300      	movs	r3, #0
}
 8006e3a:	4618      	mov	r0, r3
 8006e3c:	3710      	adds	r7, #16
 8006e3e:	46bd      	mov	sp, r7
 8006e40:	bd80      	pop	{r7, pc}

08006e42 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8006e42:	b580      	push	{r7, lr}
 8006e44:	b084      	sub	sp, #16
 8006e46:	af00      	add	r7, sp, #0
 8006e48:	60f8      	str	r0, [r7, #12]
 8006e4a:	60b9      	str	r1, [r7, #8]
 8006e4c:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	68ba      	ldr	r2, [r7, #8]
 8006e52:	2100      	movs	r1, #0
 8006e54:	68f8      	ldr	r0, [r7, #12]
 8006e56:	f000 fc80 	bl	800775a <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006e5a:	2300      	movs	r3, #0
}
 8006e5c:	4618      	mov	r0, r3
 8006e5e:	3710      	adds	r7, #16
 8006e60:	46bd      	mov	sp, r7
 8006e62:	bd80      	pop	{r7, pc}

08006e64 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8006e64:	b580      	push	{r7, lr}
 8006e66:	b082      	sub	sp, #8
 8006e68:	af00      	add	r7, sp, #0
 8006e6a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	2204      	movs	r2, #4
 8006e70:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8006e74:	2300      	movs	r3, #0
 8006e76:	2200      	movs	r2, #0
 8006e78:	2100      	movs	r1, #0
 8006e7a:	6878      	ldr	r0, [r7, #4]
 8006e7c:	f000 fc4c 	bl	8007718 <USBD_LL_Transmit>

  return USBD_OK;
 8006e80:	2300      	movs	r3, #0
}
 8006e82:	4618      	mov	r0, r3
 8006e84:	3708      	adds	r7, #8
 8006e86:	46bd      	mov	sp, r7
 8006e88:	bd80      	pop	{r7, pc}

08006e8a <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8006e8a:	b580      	push	{r7, lr}
 8006e8c:	b082      	sub	sp, #8
 8006e8e:	af00      	add	r7, sp, #0
 8006e90:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	2205      	movs	r2, #5
 8006e96:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006e9a:	2300      	movs	r3, #0
 8006e9c:	2200      	movs	r2, #0
 8006e9e:	2100      	movs	r1, #0
 8006ea0:	6878      	ldr	r0, [r7, #4]
 8006ea2:	f000 fc5a 	bl	800775a <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006ea6:	2300      	movs	r3, #0
}
 8006ea8:	4618      	mov	r0, r3
 8006eaa:	3708      	adds	r7, #8
 8006eac:	46bd      	mov	sp, r7
 8006eae:	bd80      	pop	{r7, pc}

08006eb0 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8006eb0:	b580      	push	{r7, lr}
 8006eb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8006eb4:	2200      	movs	r2, #0
 8006eb6:	4912      	ldr	r1, [pc, #72]	; (8006f00 <MX_USB_DEVICE_Init+0x50>)
 8006eb8:	4812      	ldr	r0, [pc, #72]	; (8006f04 <MX_USB_DEVICE_Init+0x54>)
 8006eba:	f7fe feae 	bl	8005c1a <USBD_Init>
 8006ebe:	4603      	mov	r3, r0
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d001      	beq.n	8006ec8 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8006ec4:	f7f9 fba2 	bl	800060c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_MSC) != USBD_OK)
 8006ec8:	490f      	ldr	r1, [pc, #60]	; (8006f08 <MX_USB_DEVICE_Init+0x58>)
 8006eca:	480e      	ldr	r0, [pc, #56]	; (8006f04 <MX_USB_DEVICE_Init+0x54>)
 8006ecc:	f7fe fed5 	bl	8005c7a <USBD_RegisterClass>
 8006ed0:	4603      	mov	r3, r0
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d001      	beq.n	8006eda <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8006ed6:	f7f9 fb99 	bl	800060c <Error_Handler>
  }
  if (USBD_MSC_RegisterStorage(&hUsbDeviceFS, &USBD_Storage_Interface_fops_FS) != USBD_OK)
 8006eda:	490c      	ldr	r1, [pc, #48]	; (8006f0c <MX_USB_DEVICE_Init+0x5c>)
 8006edc:	4809      	ldr	r0, [pc, #36]	; (8006f04 <MX_USB_DEVICE_Init+0x54>)
 8006ede:	f7fd fa85 	bl	80043ec <USBD_MSC_RegisterStorage>
 8006ee2:	4603      	mov	r3, r0
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d001      	beq.n	8006eec <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8006ee8:	f7f9 fb90 	bl	800060c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8006eec:	4805      	ldr	r0, [pc, #20]	; (8006f04 <MX_USB_DEVICE_Init+0x54>)
 8006eee:	f7fe feeb 	bl	8005cc8 <USBD_Start>
 8006ef2:	4603      	mov	r3, r0
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d001      	beq.n	8006efc <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8006ef8:	f7f9 fb88 	bl	800060c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8006efc:	bf00      	nop
 8006efe:	bd80      	pop	{r7, pc}
 8006f00:	200000f4 	.word	0x200000f4
 8006f04:	20000188 	.word	0x20000188
 8006f08:	2000000c 	.word	0x2000000c
 8006f0c:	20000144 	.word	0x20000144

08006f10 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006f10:	b480      	push	{r7}
 8006f12:	b083      	sub	sp, #12
 8006f14:	af00      	add	r7, sp, #0
 8006f16:	4603      	mov	r3, r0
 8006f18:	6039      	str	r1, [r7, #0]
 8006f1a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8006f1c:	683b      	ldr	r3, [r7, #0]
 8006f1e:	2212      	movs	r2, #18
 8006f20:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8006f22:	4b03      	ldr	r3, [pc, #12]	; (8006f30 <USBD_FS_DeviceDescriptor+0x20>)
}
 8006f24:	4618      	mov	r0, r3
 8006f26:	370c      	adds	r7, #12
 8006f28:	46bd      	mov	sp, r7
 8006f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f2e:	4770      	bx	lr
 8006f30:	20000110 	.word	0x20000110

08006f34 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006f34:	b480      	push	{r7}
 8006f36:	b083      	sub	sp, #12
 8006f38:	af00      	add	r7, sp, #0
 8006f3a:	4603      	mov	r3, r0
 8006f3c:	6039      	str	r1, [r7, #0]
 8006f3e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8006f40:	683b      	ldr	r3, [r7, #0]
 8006f42:	2204      	movs	r2, #4
 8006f44:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8006f46:	4b03      	ldr	r3, [pc, #12]	; (8006f54 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8006f48:	4618      	mov	r0, r3
 8006f4a:	370c      	adds	r7, #12
 8006f4c:	46bd      	mov	sp, r7
 8006f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f52:	4770      	bx	lr
 8006f54:	20000124 	.word	0x20000124

08006f58 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006f58:	b580      	push	{r7, lr}
 8006f5a:	b082      	sub	sp, #8
 8006f5c:	af00      	add	r7, sp, #0
 8006f5e:	4603      	mov	r3, r0
 8006f60:	6039      	str	r1, [r7, #0]
 8006f62:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8006f64:	79fb      	ldrb	r3, [r7, #7]
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d105      	bne.n	8006f76 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8006f6a:	683a      	ldr	r2, [r7, #0]
 8006f6c:	4907      	ldr	r1, [pc, #28]	; (8006f8c <USBD_FS_ProductStrDescriptor+0x34>)
 8006f6e:	4808      	ldr	r0, [pc, #32]	; (8006f90 <USBD_FS_ProductStrDescriptor+0x38>)
 8006f70:	f7ff fedb 	bl	8006d2a <USBD_GetString>
 8006f74:	e004      	b.n	8006f80 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8006f76:	683a      	ldr	r2, [r7, #0]
 8006f78:	4904      	ldr	r1, [pc, #16]	; (8006f8c <USBD_FS_ProductStrDescriptor+0x34>)
 8006f7a:	4805      	ldr	r0, [pc, #20]	; (8006f90 <USBD_FS_ProductStrDescriptor+0x38>)
 8006f7c:	f7ff fed5 	bl	8006d2a <USBD_GetString>
  }
  return USBD_StrDesc;
 8006f80:	4b02      	ldr	r3, [pc, #8]	; (8006f8c <USBD_FS_ProductStrDescriptor+0x34>)
}
 8006f82:	4618      	mov	r0, r3
 8006f84:	3708      	adds	r7, #8
 8006f86:	46bd      	mov	sp, r7
 8006f88:	bd80      	pop	{r7, pc}
 8006f8a:	bf00      	nop
 8006f8c:	20000458 	.word	0x20000458
 8006f90:	080078bc 	.word	0x080078bc

08006f94 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006f94:	b580      	push	{r7, lr}
 8006f96:	b082      	sub	sp, #8
 8006f98:	af00      	add	r7, sp, #0
 8006f9a:	4603      	mov	r3, r0
 8006f9c:	6039      	str	r1, [r7, #0]
 8006f9e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8006fa0:	683a      	ldr	r2, [r7, #0]
 8006fa2:	4904      	ldr	r1, [pc, #16]	; (8006fb4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8006fa4:	4804      	ldr	r0, [pc, #16]	; (8006fb8 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8006fa6:	f7ff fec0 	bl	8006d2a <USBD_GetString>
  return USBD_StrDesc;
 8006faa:	4b02      	ldr	r3, [pc, #8]	; (8006fb4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8006fac:	4618      	mov	r0, r3
 8006fae:	3708      	adds	r7, #8
 8006fb0:	46bd      	mov	sp, r7
 8006fb2:	bd80      	pop	{r7, pc}
 8006fb4:	20000458 	.word	0x20000458
 8006fb8:	080078d0 	.word	0x080078d0

08006fbc <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006fbc:	b580      	push	{r7, lr}
 8006fbe:	b082      	sub	sp, #8
 8006fc0:	af00      	add	r7, sp, #0
 8006fc2:	4603      	mov	r3, r0
 8006fc4:	6039      	str	r1, [r7, #0]
 8006fc6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8006fc8:	683b      	ldr	r3, [r7, #0]
 8006fca:	221a      	movs	r2, #26
 8006fcc:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8006fce:	f000 f843 	bl	8007058 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8006fd2:	4b02      	ldr	r3, [pc, #8]	; (8006fdc <USBD_FS_SerialStrDescriptor+0x20>)
}
 8006fd4:	4618      	mov	r0, r3
 8006fd6:	3708      	adds	r7, #8
 8006fd8:	46bd      	mov	sp, r7
 8006fda:	bd80      	pop	{r7, pc}
 8006fdc:	20000128 	.word	0x20000128

08006fe0 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006fe0:	b580      	push	{r7, lr}
 8006fe2:	b082      	sub	sp, #8
 8006fe4:	af00      	add	r7, sp, #0
 8006fe6:	4603      	mov	r3, r0
 8006fe8:	6039      	str	r1, [r7, #0]
 8006fea:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8006fec:	79fb      	ldrb	r3, [r7, #7]
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d105      	bne.n	8006ffe <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8006ff2:	683a      	ldr	r2, [r7, #0]
 8006ff4:	4907      	ldr	r1, [pc, #28]	; (8007014 <USBD_FS_ConfigStrDescriptor+0x34>)
 8006ff6:	4808      	ldr	r0, [pc, #32]	; (8007018 <USBD_FS_ConfigStrDescriptor+0x38>)
 8006ff8:	f7ff fe97 	bl	8006d2a <USBD_GetString>
 8006ffc:	e004      	b.n	8007008 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8006ffe:	683a      	ldr	r2, [r7, #0]
 8007000:	4904      	ldr	r1, [pc, #16]	; (8007014 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007002:	4805      	ldr	r0, [pc, #20]	; (8007018 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007004:	f7ff fe91 	bl	8006d2a <USBD_GetString>
  }
  return USBD_StrDesc;
 8007008:	4b02      	ldr	r3, [pc, #8]	; (8007014 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800700a:	4618      	mov	r0, r3
 800700c:	3708      	adds	r7, #8
 800700e:	46bd      	mov	sp, r7
 8007010:	bd80      	pop	{r7, pc}
 8007012:	bf00      	nop
 8007014:	20000458 	.word	0x20000458
 8007018:	080078e4 	.word	0x080078e4

0800701c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800701c:	b580      	push	{r7, lr}
 800701e:	b082      	sub	sp, #8
 8007020:	af00      	add	r7, sp, #0
 8007022:	4603      	mov	r3, r0
 8007024:	6039      	str	r1, [r7, #0]
 8007026:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007028:	79fb      	ldrb	r3, [r7, #7]
 800702a:	2b00      	cmp	r3, #0
 800702c:	d105      	bne.n	800703a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800702e:	683a      	ldr	r2, [r7, #0]
 8007030:	4907      	ldr	r1, [pc, #28]	; (8007050 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007032:	4808      	ldr	r0, [pc, #32]	; (8007054 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007034:	f7ff fe79 	bl	8006d2a <USBD_GetString>
 8007038:	e004      	b.n	8007044 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800703a:	683a      	ldr	r2, [r7, #0]
 800703c:	4904      	ldr	r1, [pc, #16]	; (8007050 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800703e:	4805      	ldr	r0, [pc, #20]	; (8007054 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007040:	f7ff fe73 	bl	8006d2a <USBD_GetString>
  }
  return USBD_StrDesc;
 8007044:	4b02      	ldr	r3, [pc, #8]	; (8007050 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8007046:	4618      	mov	r0, r3
 8007048:	3708      	adds	r7, #8
 800704a:	46bd      	mov	sp, r7
 800704c:	bd80      	pop	{r7, pc}
 800704e:	bf00      	nop
 8007050:	20000458 	.word	0x20000458
 8007054:	080078f0 	.word	0x080078f0

08007058 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8007058:	b580      	push	{r7, lr}
 800705a:	b084      	sub	sp, #16
 800705c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800705e:	4b0f      	ldr	r3, [pc, #60]	; (800709c <Get_SerialNum+0x44>)
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8007064:	4b0e      	ldr	r3, [pc, #56]	; (80070a0 <Get_SerialNum+0x48>)
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800706a:	4b0e      	ldr	r3, [pc, #56]	; (80070a4 <Get_SerialNum+0x4c>)
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8007070:	68fa      	ldr	r2, [r7, #12]
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	4413      	add	r3, r2
 8007076:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	2b00      	cmp	r3, #0
 800707c:	d009      	beq.n	8007092 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800707e:	2208      	movs	r2, #8
 8007080:	4909      	ldr	r1, [pc, #36]	; (80070a8 <Get_SerialNum+0x50>)
 8007082:	68f8      	ldr	r0, [r7, #12]
 8007084:	f000 f814 	bl	80070b0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8007088:	2204      	movs	r2, #4
 800708a:	4908      	ldr	r1, [pc, #32]	; (80070ac <Get_SerialNum+0x54>)
 800708c:	68b8      	ldr	r0, [r7, #8]
 800708e:	f000 f80f 	bl	80070b0 <IntToUnicode>
  }
}
 8007092:	bf00      	nop
 8007094:	3710      	adds	r7, #16
 8007096:	46bd      	mov	sp, r7
 8007098:	bd80      	pop	{r7, pc}
 800709a:	bf00      	nop
 800709c:	1fff7a10 	.word	0x1fff7a10
 80070a0:	1fff7a14 	.word	0x1fff7a14
 80070a4:	1fff7a18 	.word	0x1fff7a18
 80070a8:	2000012a 	.word	0x2000012a
 80070ac:	2000013a 	.word	0x2000013a

080070b0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80070b0:	b480      	push	{r7}
 80070b2:	b087      	sub	sp, #28
 80070b4:	af00      	add	r7, sp, #0
 80070b6:	60f8      	str	r0, [r7, #12]
 80070b8:	60b9      	str	r1, [r7, #8]
 80070ba:	4613      	mov	r3, r2
 80070bc:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80070be:	2300      	movs	r3, #0
 80070c0:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80070c2:	2300      	movs	r3, #0
 80070c4:	75fb      	strb	r3, [r7, #23]
 80070c6:	e027      	b.n	8007118 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	0f1b      	lsrs	r3, r3, #28
 80070cc:	2b09      	cmp	r3, #9
 80070ce:	d80b      	bhi.n	80070e8 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	0f1b      	lsrs	r3, r3, #28
 80070d4:	b2da      	uxtb	r2, r3
 80070d6:	7dfb      	ldrb	r3, [r7, #23]
 80070d8:	005b      	lsls	r3, r3, #1
 80070da:	4619      	mov	r1, r3
 80070dc:	68bb      	ldr	r3, [r7, #8]
 80070de:	440b      	add	r3, r1
 80070e0:	3230      	adds	r2, #48	; 0x30
 80070e2:	b2d2      	uxtb	r2, r2
 80070e4:	701a      	strb	r2, [r3, #0]
 80070e6:	e00a      	b.n	80070fe <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	0f1b      	lsrs	r3, r3, #28
 80070ec:	b2da      	uxtb	r2, r3
 80070ee:	7dfb      	ldrb	r3, [r7, #23]
 80070f0:	005b      	lsls	r3, r3, #1
 80070f2:	4619      	mov	r1, r3
 80070f4:	68bb      	ldr	r3, [r7, #8]
 80070f6:	440b      	add	r3, r1
 80070f8:	3237      	adds	r2, #55	; 0x37
 80070fa:	b2d2      	uxtb	r2, r2
 80070fc:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	011b      	lsls	r3, r3, #4
 8007102:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8007104:	7dfb      	ldrb	r3, [r7, #23]
 8007106:	005b      	lsls	r3, r3, #1
 8007108:	3301      	adds	r3, #1
 800710a:	68ba      	ldr	r2, [r7, #8]
 800710c:	4413      	add	r3, r2
 800710e:	2200      	movs	r2, #0
 8007110:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8007112:	7dfb      	ldrb	r3, [r7, #23]
 8007114:	3301      	adds	r3, #1
 8007116:	75fb      	strb	r3, [r7, #23]
 8007118:	7dfa      	ldrb	r2, [r7, #23]
 800711a:	79fb      	ldrb	r3, [r7, #7]
 800711c:	429a      	cmp	r2, r3
 800711e:	d3d3      	bcc.n	80070c8 <IntToUnicode+0x18>
  }
}
 8007120:	bf00      	nop
 8007122:	bf00      	nop
 8007124:	371c      	adds	r7, #28
 8007126:	46bd      	mov	sp, r7
 8007128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800712c:	4770      	bx	lr

0800712e <STORAGE_Init_FS>:
  * @brief  Initializes over USB FS IP
  * @param  lun:
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Init_FS(uint8_t lun)
{
 800712e:	b480      	push	{r7}
 8007130:	b083      	sub	sp, #12
 8007132:	af00      	add	r7, sp, #0
 8007134:	4603      	mov	r3, r0
 8007136:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 2 */
  return (USBD_OK);
 8007138:	2300      	movs	r3, #0
  /* USER CODE END 2 */
}
 800713a:	4618      	mov	r0, r3
 800713c:	370c      	adds	r7, #12
 800713e:	46bd      	mov	sp, r7
 8007140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007144:	4770      	bx	lr

08007146 <STORAGE_GetCapacity_FS>:
  * @param  block_num: .
  * @param  block_size: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_GetCapacity_FS(uint8_t lun, uint32_t *block_num, uint16_t *block_size)
{
 8007146:	b480      	push	{r7}
 8007148:	b085      	sub	sp, #20
 800714a:	af00      	add	r7, sp, #0
 800714c:	4603      	mov	r3, r0
 800714e:	60b9      	str	r1, [r7, #8]
 8007150:	607a      	str	r2, [r7, #4]
 8007152:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 3 */
  *block_num  = STORAGE_BLK_NBR;
 8007154:	68bb      	ldr	r3, [r7, #8]
 8007156:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800715a:	601a      	str	r2, [r3, #0]
  *block_size = STORAGE_BLK_SIZ;
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007162:	801a      	strh	r2, [r3, #0]
  return (USBD_OK);
 8007164:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8007166:	4618      	mov	r0, r3
 8007168:	3714      	adds	r7, #20
 800716a:	46bd      	mov	sp, r7
 800716c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007170:	4770      	bx	lr

08007172 <STORAGE_IsReady_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsReady_FS(uint8_t lun)
{
 8007172:	b480      	push	{r7}
 8007174:	b083      	sub	sp, #12
 8007176:	af00      	add	r7, sp, #0
 8007178:	4603      	mov	r3, r0
 800717a:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800717c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800717e:	4618      	mov	r0, r3
 8007180:	370c      	adds	r7, #12
 8007182:	46bd      	mov	sp, r7
 8007184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007188:	4770      	bx	lr

0800718a <STORAGE_IsWriteProtected_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsWriteProtected_FS(uint8_t lun)
{
 800718a:	b480      	push	{r7}
 800718c:	b083      	sub	sp, #12
 800718e:	af00      	add	r7, sp, #0
 8007190:	4603      	mov	r3, r0
 8007192:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 5 */
  return (USBD_OK);
 8007194:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8007196:	4618      	mov	r0, r3
 8007198:	370c      	adds	r7, #12
 800719a:	46bd      	mov	sp, r7
 800719c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071a0:	4770      	bx	lr

080071a2 <STORAGE_Read_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Read_FS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 80071a2:	b480      	push	{r7}
 80071a4:	b085      	sub	sp, #20
 80071a6:	af00      	add	r7, sp, #0
 80071a8:	60b9      	str	r1, [r7, #8]
 80071aa:	607a      	str	r2, [r7, #4]
 80071ac:	461a      	mov	r2, r3
 80071ae:	4603      	mov	r3, r0
 80071b0:	73fb      	strb	r3, [r7, #15]
 80071b2:	4613      	mov	r3, r2
 80071b4:	81bb      	strh	r3, [r7, #12]
  /* USER CODE BEGIN 6 */
  return (USBD_OK);
 80071b6:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80071b8:	4618      	mov	r0, r3
 80071ba:	3714      	adds	r7, #20
 80071bc:	46bd      	mov	sp, r7
 80071be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071c2:	4770      	bx	lr

080071c4 <STORAGE_Write_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Write_FS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 80071c4:	b480      	push	{r7}
 80071c6:	b085      	sub	sp, #20
 80071c8:	af00      	add	r7, sp, #0
 80071ca:	60b9      	str	r1, [r7, #8]
 80071cc:	607a      	str	r2, [r7, #4]
 80071ce:	461a      	mov	r2, r3
 80071d0:	4603      	mov	r3, r0
 80071d2:	73fb      	strb	r3, [r7, #15]
 80071d4:	4613      	mov	r3, r2
 80071d6:	81bb      	strh	r3, [r7, #12]
  /* USER CODE BEGIN 7 */
  return (USBD_OK);
 80071d8:	2300      	movs	r3, #0
  /* USER CODE END 7 */
}
 80071da:	4618      	mov	r0, r3
 80071dc:	3714      	adds	r7, #20
 80071de:	46bd      	mov	sp, r7
 80071e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071e4:	4770      	bx	lr

080071e6 <STORAGE_GetMaxLun_FS>:
  * @brief  .
  * @param  None
  * @retval .
  */
int8_t STORAGE_GetMaxLun_FS(void)
{
 80071e6:	b480      	push	{r7}
 80071e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */
  return (STORAGE_LUN_NBR - 1);
 80071ea:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 80071ec:	4618      	mov	r0, r3
 80071ee:	46bd      	mov	sp, r7
 80071f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071f4:	4770      	bx	lr
	...

080071f8 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80071f8:	b580      	push	{r7, lr}
 80071fa:	b08a      	sub	sp, #40	; 0x28
 80071fc:	af00      	add	r7, sp, #0
 80071fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007200:	f107 0314 	add.w	r3, r7, #20
 8007204:	2200      	movs	r2, #0
 8007206:	601a      	str	r2, [r3, #0]
 8007208:	605a      	str	r2, [r3, #4]
 800720a:	609a      	str	r2, [r3, #8]
 800720c:	60da      	str	r2, [r3, #12]
 800720e:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007218:	d13a      	bne.n	8007290 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800721a:	2300      	movs	r3, #0
 800721c:	613b      	str	r3, [r7, #16]
 800721e:	4b1e      	ldr	r3, [pc, #120]	; (8007298 <HAL_PCD_MspInit+0xa0>)
 8007220:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007222:	4a1d      	ldr	r2, [pc, #116]	; (8007298 <HAL_PCD_MspInit+0xa0>)
 8007224:	f043 0301 	orr.w	r3, r3, #1
 8007228:	6313      	str	r3, [r2, #48]	; 0x30
 800722a:	4b1b      	ldr	r3, [pc, #108]	; (8007298 <HAL_PCD_MspInit+0xa0>)
 800722c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800722e:	f003 0301 	and.w	r3, r3, #1
 8007232:	613b      	str	r3, [r7, #16]
 8007234:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8007236:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800723a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800723c:	2302      	movs	r3, #2
 800723e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007240:	2300      	movs	r3, #0
 8007242:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007244:	2303      	movs	r3, #3
 8007246:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8007248:	230a      	movs	r3, #10
 800724a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800724c:	f107 0314 	add.w	r3, r7, #20
 8007250:	4619      	mov	r1, r3
 8007252:	4812      	ldr	r0, [pc, #72]	; (800729c <HAL_PCD_MspInit+0xa4>)
 8007254:	f7f9 fc20 	bl	8000a98 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8007258:	4b0f      	ldr	r3, [pc, #60]	; (8007298 <HAL_PCD_MspInit+0xa0>)
 800725a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800725c:	4a0e      	ldr	r2, [pc, #56]	; (8007298 <HAL_PCD_MspInit+0xa0>)
 800725e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007262:	6353      	str	r3, [r2, #52]	; 0x34
 8007264:	2300      	movs	r3, #0
 8007266:	60fb      	str	r3, [r7, #12]
 8007268:	4b0b      	ldr	r3, [pc, #44]	; (8007298 <HAL_PCD_MspInit+0xa0>)
 800726a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800726c:	4a0a      	ldr	r2, [pc, #40]	; (8007298 <HAL_PCD_MspInit+0xa0>)
 800726e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007272:	6453      	str	r3, [r2, #68]	; 0x44
 8007274:	4b08      	ldr	r3, [pc, #32]	; (8007298 <HAL_PCD_MspInit+0xa0>)
 8007276:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007278:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800727c:	60fb      	str	r3, [r7, #12]
 800727e:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8007280:	2200      	movs	r2, #0
 8007282:	2100      	movs	r1, #0
 8007284:	2043      	movs	r0, #67	; 0x43
 8007286:	f7f9 fbd0 	bl	8000a2a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800728a:	2043      	movs	r0, #67	; 0x43
 800728c:	f7f9 fbe9 	bl	8000a62 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8007290:	bf00      	nop
 8007292:	3728      	adds	r7, #40	; 0x28
 8007294:	46bd      	mov	sp, r7
 8007296:	bd80      	pop	{r7, pc}
 8007298:	40023800 	.word	0x40023800
 800729c:	40020000 	.word	0x40020000

080072a0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80072a0:	b580      	push	{r7, lr}
 80072a2:	b082      	sub	sp, #8
 80072a4:	af00      	add	r7, sp, #0
 80072a6:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80072b4:	4619      	mov	r1, r3
 80072b6:	4610      	mov	r0, r2
 80072b8:	f7fe fd51 	bl	8005d5e <USBD_LL_SetupStage>
}
 80072bc:	bf00      	nop
 80072be:	3708      	adds	r7, #8
 80072c0:	46bd      	mov	sp, r7
 80072c2:	bd80      	pop	{r7, pc}

080072c4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80072c4:	b580      	push	{r7, lr}
 80072c6:	b082      	sub	sp, #8
 80072c8:	af00      	add	r7, sp, #0
 80072ca:	6078      	str	r0, [r7, #4]
 80072cc:	460b      	mov	r3, r1
 80072ce:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 80072d6:	78fa      	ldrb	r2, [r7, #3]
 80072d8:	6879      	ldr	r1, [r7, #4]
 80072da:	4613      	mov	r3, r2
 80072dc:	00db      	lsls	r3, r3, #3
 80072de:	1a9b      	subs	r3, r3, r2
 80072e0:	009b      	lsls	r3, r3, #2
 80072e2:	440b      	add	r3, r1
 80072e4:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80072e8:	681a      	ldr	r2, [r3, #0]
 80072ea:	78fb      	ldrb	r3, [r7, #3]
 80072ec:	4619      	mov	r1, r3
 80072ee:	f7fe fd8b 	bl	8005e08 <USBD_LL_DataOutStage>
}
 80072f2:	bf00      	nop
 80072f4:	3708      	adds	r7, #8
 80072f6:	46bd      	mov	sp, r7
 80072f8:	bd80      	pop	{r7, pc}

080072fa <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80072fa:	b580      	push	{r7, lr}
 80072fc:	b082      	sub	sp, #8
 80072fe:	af00      	add	r7, sp, #0
 8007300:	6078      	str	r0, [r7, #4]
 8007302:	460b      	mov	r3, r1
 8007304:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800730c:	78fa      	ldrb	r2, [r7, #3]
 800730e:	6879      	ldr	r1, [r7, #4]
 8007310:	4613      	mov	r3, r2
 8007312:	00db      	lsls	r3, r3, #3
 8007314:	1a9b      	subs	r3, r3, r2
 8007316:	009b      	lsls	r3, r3, #2
 8007318:	440b      	add	r3, r1
 800731a:	3348      	adds	r3, #72	; 0x48
 800731c:	681a      	ldr	r2, [r3, #0]
 800731e:	78fb      	ldrb	r3, [r7, #3]
 8007320:	4619      	mov	r1, r3
 8007322:	f7fe fdd4 	bl	8005ece <USBD_LL_DataInStage>
}
 8007326:	bf00      	nop
 8007328:	3708      	adds	r7, #8
 800732a:	46bd      	mov	sp, r7
 800732c:	bd80      	pop	{r7, pc}

0800732e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800732e:	b580      	push	{r7, lr}
 8007330:	b082      	sub	sp, #8
 8007332:	af00      	add	r7, sp, #0
 8007334:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800733c:	4618      	mov	r0, r3
 800733e:	f7fe fee8 	bl	8006112 <USBD_LL_SOF>
}
 8007342:	bf00      	nop
 8007344:	3708      	adds	r7, #8
 8007346:	46bd      	mov	sp, r7
 8007348:	bd80      	pop	{r7, pc}

0800734a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800734a:	b580      	push	{r7, lr}
 800734c:	b084      	sub	sp, #16
 800734e:	af00      	add	r7, sp, #0
 8007350:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8007352:	2301      	movs	r3, #1
 8007354:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	68db      	ldr	r3, [r3, #12]
 800735a:	2b02      	cmp	r3, #2
 800735c:	d001      	beq.n	8007362 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800735e:	f7f9 f955 	bl	800060c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007368:	7bfa      	ldrb	r2, [r7, #15]
 800736a:	4611      	mov	r1, r2
 800736c:	4618      	mov	r0, r3
 800736e:	f7fe fe92 	bl	8006096 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007378:	4618      	mov	r0, r3
 800737a:	f7fe fe3e 	bl	8005ffa <USBD_LL_Reset>
}
 800737e:	bf00      	nop
 8007380:	3710      	adds	r7, #16
 8007382:	46bd      	mov	sp, r7
 8007384:	bd80      	pop	{r7, pc}
	...

08007388 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007388:	b580      	push	{r7, lr}
 800738a:	b082      	sub	sp, #8
 800738c:	af00      	add	r7, sp, #0
 800738e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007396:	4618      	mov	r0, r3
 8007398:	f7fe fe8d 	bl	80060b6 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	687a      	ldr	r2, [r7, #4]
 80073a8:	6812      	ldr	r2, [r2, #0]
 80073aa:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80073ae:	f043 0301 	orr.w	r3, r3, #1
 80073b2:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	6a1b      	ldr	r3, [r3, #32]
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	d005      	beq.n	80073c8 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80073bc:	4b04      	ldr	r3, [pc, #16]	; (80073d0 <HAL_PCD_SuspendCallback+0x48>)
 80073be:	691b      	ldr	r3, [r3, #16]
 80073c0:	4a03      	ldr	r2, [pc, #12]	; (80073d0 <HAL_PCD_SuspendCallback+0x48>)
 80073c2:	f043 0306 	orr.w	r3, r3, #6
 80073c6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80073c8:	bf00      	nop
 80073ca:	3708      	adds	r7, #8
 80073cc:	46bd      	mov	sp, r7
 80073ce:	bd80      	pop	{r7, pc}
 80073d0:	e000ed00 	.word	0xe000ed00

080073d4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80073d4:	b580      	push	{r7, lr}
 80073d6:	b082      	sub	sp, #8
 80073d8:	af00      	add	r7, sp, #0
 80073da:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80073e2:	4618      	mov	r0, r3
 80073e4:	f7fe fe7d 	bl	80060e2 <USBD_LL_Resume>
}
 80073e8:	bf00      	nop
 80073ea:	3708      	adds	r7, #8
 80073ec:	46bd      	mov	sp, r7
 80073ee:	bd80      	pop	{r7, pc}

080073f0 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80073f0:	b580      	push	{r7, lr}
 80073f2:	b082      	sub	sp, #8
 80073f4:	af00      	add	r7, sp, #0
 80073f6:	6078      	str	r0, [r7, #4]
 80073f8:	460b      	mov	r3, r1
 80073fa:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007402:	78fa      	ldrb	r2, [r7, #3]
 8007404:	4611      	mov	r1, r2
 8007406:	4618      	mov	r0, r3
 8007408:	f7fe fecb 	bl	80061a2 <USBD_LL_IsoOUTIncomplete>
}
 800740c:	bf00      	nop
 800740e:	3708      	adds	r7, #8
 8007410:	46bd      	mov	sp, r7
 8007412:	bd80      	pop	{r7, pc}

08007414 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007414:	b580      	push	{r7, lr}
 8007416:	b082      	sub	sp, #8
 8007418:	af00      	add	r7, sp, #0
 800741a:	6078      	str	r0, [r7, #4]
 800741c:	460b      	mov	r3, r1
 800741e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007426:	78fa      	ldrb	r2, [r7, #3]
 8007428:	4611      	mov	r1, r2
 800742a:	4618      	mov	r0, r3
 800742c:	f7fe fe93 	bl	8006156 <USBD_LL_IsoINIncomplete>
}
 8007430:	bf00      	nop
 8007432:	3708      	adds	r7, #8
 8007434:	46bd      	mov	sp, r7
 8007436:	bd80      	pop	{r7, pc}

08007438 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007438:	b580      	push	{r7, lr}
 800743a:	b082      	sub	sp, #8
 800743c:	af00      	add	r7, sp, #0
 800743e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007446:	4618      	mov	r0, r3
 8007448:	f7fe fed1 	bl	80061ee <USBD_LL_DevConnected>
}
 800744c:	bf00      	nop
 800744e:	3708      	adds	r7, #8
 8007450:	46bd      	mov	sp, r7
 8007452:	bd80      	pop	{r7, pc}

08007454 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007454:	b580      	push	{r7, lr}
 8007456:	b082      	sub	sp, #8
 8007458:	af00      	add	r7, sp, #0
 800745a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007462:	4618      	mov	r0, r3
 8007464:	f7fe fece 	bl	8006204 <USBD_LL_DevDisconnected>
}
 8007468:	bf00      	nop
 800746a:	3708      	adds	r7, #8
 800746c:	46bd      	mov	sp, r7
 800746e:	bd80      	pop	{r7, pc}

08007470 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8007470:	b580      	push	{r7, lr}
 8007472:	b082      	sub	sp, #8
 8007474:	af00      	add	r7, sp, #0
 8007476:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	781b      	ldrb	r3, [r3, #0]
 800747c:	2b00      	cmp	r3, #0
 800747e:	d13c      	bne.n	80074fa <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8007480:	4a20      	ldr	r2, [pc, #128]	; (8007504 <USBD_LL_Init+0x94>)
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	4a1e      	ldr	r2, [pc, #120]	; (8007504 <USBD_LL_Init+0x94>)
 800748c:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8007490:	4b1c      	ldr	r3, [pc, #112]	; (8007504 <USBD_LL_Init+0x94>)
 8007492:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8007496:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8007498:	4b1a      	ldr	r3, [pc, #104]	; (8007504 <USBD_LL_Init+0x94>)
 800749a:	2204      	movs	r2, #4
 800749c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800749e:	4b19      	ldr	r3, [pc, #100]	; (8007504 <USBD_LL_Init+0x94>)
 80074a0:	2202      	movs	r2, #2
 80074a2:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80074a4:	4b17      	ldr	r3, [pc, #92]	; (8007504 <USBD_LL_Init+0x94>)
 80074a6:	2200      	movs	r2, #0
 80074a8:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80074aa:	4b16      	ldr	r3, [pc, #88]	; (8007504 <USBD_LL_Init+0x94>)
 80074ac:	2202      	movs	r2, #2
 80074ae:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80074b0:	4b14      	ldr	r3, [pc, #80]	; (8007504 <USBD_LL_Init+0x94>)
 80074b2:	2200      	movs	r2, #0
 80074b4:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80074b6:	4b13      	ldr	r3, [pc, #76]	; (8007504 <USBD_LL_Init+0x94>)
 80074b8:	2200      	movs	r2, #0
 80074ba:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80074bc:	4b11      	ldr	r3, [pc, #68]	; (8007504 <USBD_LL_Init+0x94>)
 80074be:	2200      	movs	r2, #0
 80074c0:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80074c2:	4b10      	ldr	r3, [pc, #64]	; (8007504 <USBD_LL_Init+0x94>)
 80074c4:	2200      	movs	r2, #0
 80074c6:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80074c8:	4b0e      	ldr	r3, [pc, #56]	; (8007504 <USBD_LL_Init+0x94>)
 80074ca:	2200      	movs	r2, #0
 80074cc:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80074ce:	480d      	ldr	r0, [pc, #52]	; (8007504 <USBD_LL_Init+0x94>)
 80074d0:	f7f9 fc66 	bl	8000da0 <HAL_PCD_Init>
 80074d4:	4603      	mov	r3, r0
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d001      	beq.n	80074de <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 80074da:	f7f9 f897 	bl	800060c <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 80074de:	2180      	movs	r1, #128	; 0x80
 80074e0:	4808      	ldr	r0, [pc, #32]	; (8007504 <USBD_LL_Init+0x94>)
 80074e2:	f7fa fdf0 	bl	80020c6 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 80074e6:	2240      	movs	r2, #64	; 0x40
 80074e8:	2100      	movs	r1, #0
 80074ea:	4806      	ldr	r0, [pc, #24]	; (8007504 <USBD_LL_Init+0x94>)
 80074ec:	f7fa fda4 	bl	8002038 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 80074f0:	2280      	movs	r2, #128	; 0x80
 80074f2:	2101      	movs	r1, #1
 80074f4:	4803      	ldr	r0, [pc, #12]	; (8007504 <USBD_LL_Init+0x94>)
 80074f6:	f7fa fd9f 	bl	8002038 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 80074fa:	2300      	movs	r3, #0
}
 80074fc:	4618      	mov	r0, r3
 80074fe:	3708      	adds	r7, #8
 8007500:	46bd      	mov	sp, r7
 8007502:	bd80      	pop	{r7, pc}
 8007504:	20000658 	.word	0x20000658

08007508 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8007508:	b580      	push	{r7, lr}
 800750a:	b084      	sub	sp, #16
 800750c:	af00      	add	r7, sp, #0
 800750e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007510:	2300      	movs	r3, #0
 8007512:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007514:	2300      	movs	r3, #0
 8007516:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800751e:	4618      	mov	r0, r3
 8007520:	f7f9 fd5b 	bl	8000fda <HAL_PCD_Start>
 8007524:	4603      	mov	r3, r0
 8007526:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007528:	7bfb      	ldrb	r3, [r7, #15]
 800752a:	4618      	mov	r0, r3
 800752c:	f000 f962 	bl	80077f4 <USBD_Get_USB_Status>
 8007530:	4603      	mov	r3, r0
 8007532:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007534:	7bbb      	ldrb	r3, [r7, #14]
}
 8007536:	4618      	mov	r0, r3
 8007538:	3710      	adds	r7, #16
 800753a:	46bd      	mov	sp, r7
 800753c:	bd80      	pop	{r7, pc}

0800753e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800753e:	b580      	push	{r7, lr}
 8007540:	b084      	sub	sp, #16
 8007542:	af00      	add	r7, sp, #0
 8007544:	6078      	str	r0, [r7, #4]
 8007546:	4608      	mov	r0, r1
 8007548:	4611      	mov	r1, r2
 800754a:	461a      	mov	r2, r3
 800754c:	4603      	mov	r3, r0
 800754e:	70fb      	strb	r3, [r7, #3]
 8007550:	460b      	mov	r3, r1
 8007552:	70bb      	strb	r3, [r7, #2]
 8007554:	4613      	mov	r3, r2
 8007556:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007558:	2300      	movs	r3, #0
 800755a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800755c:	2300      	movs	r3, #0
 800755e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8007566:	78bb      	ldrb	r3, [r7, #2]
 8007568:	883a      	ldrh	r2, [r7, #0]
 800756a:	78f9      	ldrb	r1, [r7, #3]
 800756c:	f7fa f93f 	bl	80017ee <HAL_PCD_EP_Open>
 8007570:	4603      	mov	r3, r0
 8007572:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007574:	7bfb      	ldrb	r3, [r7, #15]
 8007576:	4618      	mov	r0, r3
 8007578:	f000 f93c 	bl	80077f4 <USBD_Get_USB_Status>
 800757c:	4603      	mov	r3, r0
 800757e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007580:	7bbb      	ldrb	r3, [r7, #14]
}
 8007582:	4618      	mov	r0, r3
 8007584:	3710      	adds	r7, #16
 8007586:	46bd      	mov	sp, r7
 8007588:	bd80      	pop	{r7, pc}

0800758a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800758a:	b580      	push	{r7, lr}
 800758c:	b084      	sub	sp, #16
 800758e:	af00      	add	r7, sp, #0
 8007590:	6078      	str	r0, [r7, #4]
 8007592:	460b      	mov	r3, r1
 8007594:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007596:	2300      	movs	r3, #0
 8007598:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800759a:	2300      	movs	r3, #0
 800759c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80075a4:	78fa      	ldrb	r2, [r7, #3]
 80075a6:	4611      	mov	r1, r2
 80075a8:	4618      	mov	r0, r3
 80075aa:	f7fa f988 	bl	80018be <HAL_PCD_EP_Close>
 80075ae:	4603      	mov	r3, r0
 80075b0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80075b2:	7bfb      	ldrb	r3, [r7, #15]
 80075b4:	4618      	mov	r0, r3
 80075b6:	f000 f91d 	bl	80077f4 <USBD_Get_USB_Status>
 80075ba:	4603      	mov	r3, r0
 80075bc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80075be:	7bbb      	ldrb	r3, [r7, #14]
}
 80075c0:	4618      	mov	r0, r3
 80075c2:	3710      	adds	r7, #16
 80075c4:	46bd      	mov	sp, r7
 80075c6:	bd80      	pop	{r7, pc}

080075c8 <USBD_LL_FlushEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_FlushEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80075c8:	b580      	push	{r7, lr}
 80075ca:	b084      	sub	sp, #16
 80075cc:	af00      	add	r7, sp, #0
 80075ce:	6078      	str	r0, [r7, #4]
 80075d0:	460b      	mov	r3, r1
 80075d2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80075d4:	2300      	movs	r3, #0
 80075d6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80075d8:	2300      	movs	r3, #0
 80075da:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Flush(pdev->pData, ep_addr);
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80075e2:	78fa      	ldrb	r2, [r7, #3]
 80075e4:	4611      	mov	r1, r2
 80075e6:	4618      	mov	r0, r3
 80075e8:	f7fa fb1a 	bl	8001c20 <HAL_PCD_EP_Flush>
 80075ec:	4603      	mov	r3, r0
 80075ee:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80075f0:	7bfb      	ldrb	r3, [r7, #15]
 80075f2:	4618      	mov	r0, r3
 80075f4:	f000 f8fe 	bl	80077f4 <USBD_Get_USB_Status>
 80075f8:	4603      	mov	r3, r0
 80075fa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80075fc:	7bbb      	ldrb	r3, [r7, #14]
}
 80075fe:	4618      	mov	r0, r3
 8007600:	3710      	adds	r7, #16
 8007602:	46bd      	mov	sp, r7
 8007604:	bd80      	pop	{r7, pc}

08007606 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007606:	b580      	push	{r7, lr}
 8007608:	b084      	sub	sp, #16
 800760a:	af00      	add	r7, sp, #0
 800760c:	6078      	str	r0, [r7, #4]
 800760e:	460b      	mov	r3, r1
 8007610:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007612:	2300      	movs	r3, #0
 8007614:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007616:	2300      	movs	r3, #0
 8007618:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007620:	78fa      	ldrb	r2, [r7, #3]
 8007622:	4611      	mov	r1, r2
 8007624:	4618      	mov	r0, r3
 8007626:	f7fa fa41 	bl	8001aac <HAL_PCD_EP_SetStall>
 800762a:	4603      	mov	r3, r0
 800762c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800762e:	7bfb      	ldrb	r3, [r7, #15]
 8007630:	4618      	mov	r0, r3
 8007632:	f000 f8df 	bl	80077f4 <USBD_Get_USB_Status>
 8007636:	4603      	mov	r3, r0
 8007638:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800763a:	7bbb      	ldrb	r3, [r7, #14]
}
 800763c:	4618      	mov	r0, r3
 800763e:	3710      	adds	r7, #16
 8007640:	46bd      	mov	sp, r7
 8007642:	bd80      	pop	{r7, pc}

08007644 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007644:	b580      	push	{r7, lr}
 8007646:	b084      	sub	sp, #16
 8007648:	af00      	add	r7, sp, #0
 800764a:	6078      	str	r0, [r7, #4]
 800764c:	460b      	mov	r3, r1
 800764e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007650:	2300      	movs	r3, #0
 8007652:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007654:	2300      	movs	r3, #0
 8007656:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800765e:	78fa      	ldrb	r2, [r7, #3]
 8007660:	4611      	mov	r1, r2
 8007662:	4618      	mov	r0, r3
 8007664:	f7fa fa86 	bl	8001b74 <HAL_PCD_EP_ClrStall>
 8007668:	4603      	mov	r3, r0
 800766a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800766c:	7bfb      	ldrb	r3, [r7, #15]
 800766e:	4618      	mov	r0, r3
 8007670:	f000 f8c0 	bl	80077f4 <USBD_Get_USB_Status>
 8007674:	4603      	mov	r3, r0
 8007676:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007678:	7bbb      	ldrb	r3, [r7, #14]
}
 800767a:	4618      	mov	r0, r3
 800767c:	3710      	adds	r7, #16
 800767e:	46bd      	mov	sp, r7
 8007680:	bd80      	pop	{r7, pc}

08007682 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007682:	b480      	push	{r7}
 8007684:	b085      	sub	sp, #20
 8007686:	af00      	add	r7, sp, #0
 8007688:	6078      	str	r0, [r7, #4]
 800768a:	460b      	mov	r3, r1
 800768c:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007694:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8007696:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800769a:	2b00      	cmp	r3, #0
 800769c:	da0b      	bge.n	80076b6 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800769e:	78fb      	ldrb	r3, [r7, #3]
 80076a0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80076a4:	68f9      	ldr	r1, [r7, #12]
 80076a6:	4613      	mov	r3, r2
 80076a8:	00db      	lsls	r3, r3, #3
 80076aa:	1a9b      	subs	r3, r3, r2
 80076ac:	009b      	lsls	r3, r3, #2
 80076ae:	440b      	add	r3, r1
 80076b0:	333e      	adds	r3, #62	; 0x3e
 80076b2:	781b      	ldrb	r3, [r3, #0]
 80076b4:	e00b      	b.n	80076ce <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80076b6:	78fb      	ldrb	r3, [r7, #3]
 80076b8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80076bc:	68f9      	ldr	r1, [r7, #12]
 80076be:	4613      	mov	r3, r2
 80076c0:	00db      	lsls	r3, r3, #3
 80076c2:	1a9b      	subs	r3, r3, r2
 80076c4:	009b      	lsls	r3, r3, #2
 80076c6:	440b      	add	r3, r1
 80076c8:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80076cc:	781b      	ldrb	r3, [r3, #0]
  }
}
 80076ce:	4618      	mov	r0, r3
 80076d0:	3714      	adds	r7, #20
 80076d2:	46bd      	mov	sp, r7
 80076d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076d8:	4770      	bx	lr

080076da <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80076da:	b580      	push	{r7, lr}
 80076dc:	b084      	sub	sp, #16
 80076de:	af00      	add	r7, sp, #0
 80076e0:	6078      	str	r0, [r7, #4]
 80076e2:	460b      	mov	r3, r1
 80076e4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80076e6:	2300      	movs	r3, #0
 80076e8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80076ea:	2300      	movs	r3, #0
 80076ec:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80076f4:	78fa      	ldrb	r2, [r7, #3]
 80076f6:	4611      	mov	r1, r2
 80076f8:	4618      	mov	r0, r3
 80076fa:	f7fa f853 	bl	80017a4 <HAL_PCD_SetAddress>
 80076fe:	4603      	mov	r3, r0
 8007700:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007702:	7bfb      	ldrb	r3, [r7, #15]
 8007704:	4618      	mov	r0, r3
 8007706:	f000 f875 	bl	80077f4 <USBD_Get_USB_Status>
 800770a:	4603      	mov	r3, r0
 800770c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800770e:	7bbb      	ldrb	r3, [r7, #14]
}
 8007710:	4618      	mov	r0, r3
 8007712:	3710      	adds	r7, #16
 8007714:	46bd      	mov	sp, r7
 8007716:	bd80      	pop	{r7, pc}

08007718 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007718:	b580      	push	{r7, lr}
 800771a:	b086      	sub	sp, #24
 800771c:	af00      	add	r7, sp, #0
 800771e:	60f8      	str	r0, [r7, #12]
 8007720:	607a      	str	r2, [r7, #4]
 8007722:	603b      	str	r3, [r7, #0]
 8007724:	460b      	mov	r3, r1
 8007726:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007728:	2300      	movs	r3, #0
 800772a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800772c:	2300      	movs	r3, #0
 800772e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8007736:	7af9      	ldrb	r1, [r7, #11]
 8007738:	683b      	ldr	r3, [r7, #0]
 800773a:	687a      	ldr	r2, [r7, #4]
 800773c:	f7fa f96c 	bl	8001a18 <HAL_PCD_EP_Transmit>
 8007740:	4603      	mov	r3, r0
 8007742:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007744:	7dfb      	ldrb	r3, [r7, #23]
 8007746:	4618      	mov	r0, r3
 8007748:	f000 f854 	bl	80077f4 <USBD_Get_USB_Status>
 800774c:	4603      	mov	r3, r0
 800774e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007750:	7dbb      	ldrb	r3, [r7, #22]
}
 8007752:	4618      	mov	r0, r3
 8007754:	3718      	adds	r7, #24
 8007756:	46bd      	mov	sp, r7
 8007758:	bd80      	pop	{r7, pc}

0800775a <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800775a:	b580      	push	{r7, lr}
 800775c:	b086      	sub	sp, #24
 800775e:	af00      	add	r7, sp, #0
 8007760:	60f8      	str	r0, [r7, #12]
 8007762:	607a      	str	r2, [r7, #4]
 8007764:	603b      	str	r3, [r7, #0]
 8007766:	460b      	mov	r3, r1
 8007768:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800776a:	2300      	movs	r3, #0
 800776c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800776e:	2300      	movs	r3, #0
 8007770:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8007778:	7af9      	ldrb	r1, [r7, #11]
 800777a:	683b      	ldr	r3, [r7, #0]
 800777c:	687a      	ldr	r2, [r7, #4]
 800777e:	f7fa f8e8 	bl	8001952 <HAL_PCD_EP_Receive>
 8007782:	4603      	mov	r3, r0
 8007784:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007786:	7dfb      	ldrb	r3, [r7, #23]
 8007788:	4618      	mov	r0, r3
 800778a:	f000 f833 	bl	80077f4 <USBD_Get_USB_Status>
 800778e:	4603      	mov	r3, r0
 8007790:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007792:	7dbb      	ldrb	r3, [r7, #22]
}
 8007794:	4618      	mov	r0, r3
 8007796:	3718      	adds	r7, #24
 8007798:	46bd      	mov	sp, r7
 800779a:	bd80      	pop	{r7, pc}

0800779c <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800779c:	b580      	push	{r7, lr}
 800779e:	b082      	sub	sp, #8
 80077a0:	af00      	add	r7, sp, #0
 80077a2:	6078      	str	r0, [r7, #4]
 80077a4:	460b      	mov	r3, r1
 80077a6:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80077ae:	78fa      	ldrb	r2, [r7, #3]
 80077b0:	4611      	mov	r1, r2
 80077b2:	4618      	mov	r0, r3
 80077b4:	f7fa f918 	bl	80019e8 <HAL_PCD_EP_GetRxCount>
 80077b8:	4603      	mov	r3, r0
}
 80077ba:	4618      	mov	r0, r3
 80077bc:	3708      	adds	r7, #8
 80077be:	46bd      	mov	sp, r7
 80077c0:	bd80      	pop	{r7, pc}
	...

080077c4 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80077c4:	b480      	push	{r7}
 80077c6:	b083      	sub	sp, #12
 80077c8:	af00      	add	r7, sp, #0
 80077ca:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_MSC_BOT_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80077cc:	4b03      	ldr	r3, [pc, #12]	; (80077dc <USBD_static_malloc+0x18>)
}
 80077ce:	4618      	mov	r0, r3
 80077d0:	370c      	adds	r7, #12
 80077d2:	46bd      	mov	sp, r7
 80077d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077d8:	4770      	bx	lr
 80077da:	bf00      	nop
 80077dc:	20000a60 	.word	0x20000a60

080077e0 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80077e0:	b480      	push	{r7}
 80077e2:	b083      	sub	sp, #12
 80077e4:	af00      	add	r7, sp, #0
 80077e6:	6078      	str	r0, [r7, #4]

}
 80077e8:	bf00      	nop
 80077ea:	370c      	adds	r7, #12
 80077ec:	46bd      	mov	sp, r7
 80077ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077f2:	4770      	bx	lr

080077f4 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80077f4:	b480      	push	{r7}
 80077f6:	b085      	sub	sp, #20
 80077f8:	af00      	add	r7, sp, #0
 80077fa:	4603      	mov	r3, r0
 80077fc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80077fe:	2300      	movs	r3, #0
 8007800:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8007802:	79fb      	ldrb	r3, [r7, #7]
 8007804:	2b03      	cmp	r3, #3
 8007806:	d817      	bhi.n	8007838 <USBD_Get_USB_Status+0x44>
 8007808:	a201      	add	r2, pc, #4	; (adr r2, 8007810 <USBD_Get_USB_Status+0x1c>)
 800780a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800780e:	bf00      	nop
 8007810:	08007821 	.word	0x08007821
 8007814:	08007827 	.word	0x08007827
 8007818:	0800782d 	.word	0x0800782d
 800781c:	08007833 	.word	0x08007833
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8007820:	2300      	movs	r3, #0
 8007822:	73fb      	strb	r3, [r7, #15]
    break;
 8007824:	e00b      	b.n	800783e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8007826:	2303      	movs	r3, #3
 8007828:	73fb      	strb	r3, [r7, #15]
    break;
 800782a:	e008      	b.n	800783e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800782c:	2301      	movs	r3, #1
 800782e:	73fb      	strb	r3, [r7, #15]
    break;
 8007830:	e005      	b.n	800783e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8007832:	2303      	movs	r3, #3
 8007834:	73fb      	strb	r3, [r7, #15]
    break;
 8007836:	e002      	b.n	800783e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8007838:	2303      	movs	r3, #3
 800783a:	73fb      	strb	r3, [r7, #15]
    break;
 800783c:	bf00      	nop
  }
  return usb_status;
 800783e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007840:	4618      	mov	r0, r3
 8007842:	3714      	adds	r7, #20
 8007844:	46bd      	mov	sp, r7
 8007846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800784a:	4770      	bx	lr

0800784c <memset>:
 800784c:	4402      	add	r2, r0
 800784e:	4603      	mov	r3, r0
 8007850:	4293      	cmp	r3, r2
 8007852:	d100      	bne.n	8007856 <memset+0xa>
 8007854:	4770      	bx	lr
 8007856:	f803 1b01 	strb.w	r1, [r3], #1
 800785a:	e7f9      	b.n	8007850 <memset+0x4>

0800785c <__libc_init_array>:
 800785c:	b570      	push	{r4, r5, r6, lr}
 800785e:	4d0d      	ldr	r5, [pc, #52]	; (8007894 <__libc_init_array+0x38>)
 8007860:	4c0d      	ldr	r4, [pc, #52]	; (8007898 <__libc_init_array+0x3c>)
 8007862:	1b64      	subs	r4, r4, r5
 8007864:	10a4      	asrs	r4, r4, #2
 8007866:	2600      	movs	r6, #0
 8007868:	42a6      	cmp	r6, r4
 800786a:	d109      	bne.n	8007880 <__libc_init_array+0x24>
 800786c:	4d0b      	ldr	r5, [pc, #44]	; (800789c <__libc_init_array+0x40>)
 800786e:	4c0c      	ldr	r4, [pc, #48]	; (80078a0 <__libc_init_array+0x44>)
 8007870:	f000 f818 	bl	80078a4 <_init>
 8007874:	1b64      	subs	r4, r4, r5
 8007876:	10a4      	asrs	r4, r4, #2
 8007878:	2600      	movs	r6, #0
 800787a:	42a6      	cmp	r6, r4
 800787c:	d105      	bne.n	800788a <__libc_init_array+0x2e>
 800787e:	bd70      	pop	{r4, r5, r6, pc}
 8007880:	f855 3b04 	ldr.w	r3, [r5], #4
 8007884:	4798      	blx	r3
 8007886:	3601      	adds	r6, #1
 8007888:	e7ee      	b.n	8007868 <__libc_init_array+0xc>
 800788a:	f855 3b04 	ldr.w	r3, [r5], #4
 800788e:	4798      	blx	r3
 8007890:	3601      	adds	r6, #1
 8007892:	e7f2      	b.n	800787a <__libc_init_array+0x1e>
 8007894:	0800793c 	.word	0x0800793c
 8007898:	0800793c 	.word	0x0800793c
 800789c:	0800793c 	.word	0x0800793c
 80078a0:	08007940 	.word	0x08007940

080078a4 <_init>:
 80078a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80078a6:	bf00      	nop
 80078a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80078aa:	bc08      	pop	{r3}
 80078ac:	469e      	mov	lr, r3
 80078ae:	4770      	bx	lr

080078b0 <_fini>:
 80078b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80078b2:	bf00      	nop
 80078b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80078b6:	bc08      	pop	{r3}
 80078b8:	469e      	mov	lr, r3
 80078ba:	4770      	bx	lr
