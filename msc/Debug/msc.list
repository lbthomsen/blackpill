
msc.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007700  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000078  08007898  08007898  00017898  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007910  08007910  00020164  2**0
                  CONTENTS
  4 .ARM          00000008  08007910  08007910  00017910  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007918  08007918  00020164  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007918  08007918  00017918  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800791c  0800791c  0001791c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000164  20000000  08007920  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000b74  20000164  08007a84  00020164  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000cd8  08007a84  00020cd8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020164  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015bee  00000000  00000000  00020194  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003533  00000000  00000000  00035d82  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c38  00000000  00000000  000392b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ab8  00000000  00000000  00039ef0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001934e  00000000  00000000  0003a9a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011551  00000000  00000000  00053cf6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000879dc  00000000  00000000  00065247  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000ecc23  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002f84  00000000  00000000  000ecc78  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000164 	.word	0x20000164
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08007880 	.word	0x08007880

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000168 	.word	0x20000168
 80001d4:	08007880 	.word	0x08007880

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001ec:	f000 b96e 	b.w	80004cc <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	468c      	mov	ip, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	f040 8083 	bne.w	800031e <__udivmoddi4+0x116>
 8000218:	428a      	cmp	r2, r1
 800021a:	4617      	mov	r7, r2
 800021c:	d947      	bls.n	80002ae <__udivmoddi4+0xa6>
 800021e:	fab2 f282 	clz	r2, r2
 8000222:	b142      	cbz	r2, 8000236 <__udivmoddi4+0x2e>
 8000224:	f1c2 0020 	rsb	r0, r2, #32
 8000228:	fa24 f000 	lsr.w	r0, r4, r0
 800022c:	4091      	lsls	r1, r2
 800022e:	4097      	lsls	r7, r2
 8000230:	ea40 0c01 	orr.w	ip, r0, r1
 8000234:	4094      	lsls	r4, r2
 8000236:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800023a:	0c23      	lsrs	r3, r4, #16
 800023c:	fbbc f6f8 	udiv	r6, ip, r8
 8000240:	fa1f fe87 	uxth.w	lr, r7
 8000244:	fb08 c116 	mls	r1, r8, r6, ip
 8000248:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800024c:	fb06 f10e 	mul.w	r1, r6, lr
 8000250:	4299      	cmp	r1, r3
 8000252:	d909      	bls.n	8000268 <__udivmoddi4+0x60>
 8000254:	18fb      	adds	r3, r7, r3
 8000256:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 800025a:	f080 8119 	bcs.w	8000490 <__udivmoddi4+0x288>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 8116 	bls.w	8000490 <__udivmoddi4+0x288>
 8000264:	3e02      	subs	r6, #2
 8000266:	443b      	add	r3, r7
 8000268:	1a5b      	subs	r3, r3, r1
 800026a:	b2a4      	uxth	r4, r4
 800026c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000270:	fb08 3310 	mls	r3, r8, r0, r3
 8000274:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000278:	fb00 fe0e 	mul.w	lr, r0, lr
 800027c:	45a6      	cmp	lr, r4
 800027e:	d909      	bls.n	8000294 <__udivmoddi4+0x8c>
 8000280:	193c      	adds	r4, r7, r4
 8000282:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000286:	f080 8105 	bcs.w	8000494 <__udivmoddi4+0x28c>
 800028a:	45a6      	cmp	lr, r4
 800028c:	f240 8102 	bls.w	8000494 <__udivmoddi4+0x28c>
 8000290:	3802      	subs	r0, #2
 8000292:	443c      	add	r4, r7
 8000294:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000298:	eba4 040e 	sub.w	r4, r4, lr
 800029c:	2600      	movs	r6, #0
 800029e:	b11d      	cbz	r5, 80002a8 <__udivmoddi4+0xa0>
 80002a0:	40d4      	lsrs	r4, r2
 80002a2:	2300      	movs	r3, #0
 80002a4:	e9c5 4300 	strd	r4, r3, [r5]
 80002a8:	4631      	mov	r1, r6
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	b902      	cbnz	r2, 80002b2 <__udivmoddi4+0xaa>
 80002b0:	deff      	udf	#255	; 0xff
 80002b2:	fab2 f282 	clz	r2, r2
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d150      	bne.n	800035c <__udivmoddi4+0x154>
 80002ba:	1bcb      	subs	r3, r1, r7
 80002bc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002c0:	fa1f f887 	uxth.w	r8, r7
 80002c4:	2601      	movs	r6, #1
 80002c6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ca:	0c21      	lsrs	r1, r4, #16
 80002cc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002d0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002d4:	fb08 f30c 	mul.w	r3, r8, ip
 80002d8:	428b      	cmp	r3, r1
 80002da:	d907      	bls.n	80002ec <__udivmoddi4+0xe4>
 80002dc:	1879      	adds	r1, r7, r1
 80002de:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80002e2:	d202      	bcs.n	80002ea <__udivmoddi4+0xe2>
 80002e4:	428b      	cmp	r3, r1
 80002e6:	f200 80e9 	bhi.w	80004bc <__udivmoddi4+0x2b4>
 80002ea:	4684      	mov	ip, r0
 80002ec:	1ac9      	subs	r1, r1, r3
 80002ee:	b2a3      	uxth	r3, r4
 80002f0:	fbb1 f0fe 	udiv	r0, r1, lr
 80002f4:	fb0e 1110 	mls	r1, lr, r0, r1
 80002f8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002fc:	fb08 f800 	mul.w	r8, r8, r0
 8000300:	45a0      	cmp	r8, r4
 8000302:	d907      	bls.n	8000314 <__udivmoddi4+0x10c>
 8000304:	193c      	adds	r4, r7, r4
 8000306:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800030a:	d202      	bcs.n	8000312 <__udivmoddi4+0x10a>
 800030c:	45a0      	cmp	r8, r4
 800030e:	f200 80d9 	bhi.w	80004c4 <__udivmoddi4+0x2bc>
 8000312:	4618      	mov	r0, r3
 8000314:	eba4 0408 	sub.w	r4, r4, r8
 8000318:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800031c:	e7bf      	b.n	800029e <__udivmoddi4+0x96>
 800031e:	428b      	cmp	r3, r1
 8000320:	d909      	bls.n	8000336 <__udivmoddi4+0x12e>
 8000322:	2d00      	cmp	r5, #0
 8000324:	f000 80b1 	beq.w	800048a <__udivmoddi4+0x282>
 8000328:	2600      	movs	r6, #0
 800032a:	e9c5 0100 	strd	r0, r1, [r5]
 800032e:	4630      	mov	r0, r6
 8000330:	4631      	mov	r1, r6
 8000332:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000336:	fab3 f683 	clz	r6, r3
 800033a:	2e00      	cmp	r6, #0
 800033c:	d14a      	bne.n	80003d4 <__udivmoddi4+0x1cc>
 800033e:	428b      	cmp	r3, r1
 8000340:	d302      	bcc.n	8000348 <__udivmoddi4+0x140>
 8000342:	4282      	cmp	r2, r0
 8000344:	f200 80b8 	bhi.w	80004b8 <__udivmoddi4+0x2b0>
 8000348:	1a84      	subs	r4, r0, r2
 800034a:	eb61 0103 	sbc.w	r1, r1, r3
 800034e:	2001      	movs	r0, #1
 8000350:	468c      	mov	ip, r1
 8000352:	2d00      	cmp	r5, #0
 8000354:	d0a8      	beq.n	80002a8 <__udivmoddi4+0xa0>
 8000356:	e9c5 4c00 	strd	r4, ip, [r5]
 800035a:	e7a5      	b.n	80002a8 <__udivmoddi4+0xa0>
 800035c:	f1c2 0320 	rsb	r3, r2, #32
 8000360:	fa20 f603 	lsr.w	r6, r0, r3
 8000364:	4097      	lsls	r7, r2
 8000366:	fa01 f002 	lsl.w	r0, r1, r2
 800036a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800036e:	40d9      	lsrs	r1, r3
 8000370:	4330      	orrs	r0, r6
 8000372:	0c03      	lsrs	r3, r0, #16
 8000374:	fbb1 f6fe 	udiv	r6, r1, lr
 8000378:	fa1f f887 	uxth.w	r8, r7
 800037c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000380:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000384:	fb06 f108 	mul.w	r1, r6, r8
 8000388:	4299      	cmp	r1, r3
 800038a:	fa04 f402 	lsl.w	r4, r4, r2
 800038e:	d909      	bls.n	80003a4 <__udivmoddi4+0x19c>
 8000390:	18fb      	adds	r3, r7, r3
 8000392:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000396:	f080 808d 	bcs.w	80004b4 <__udivmoddi4+0x2ac>
 800039a:	4299      	cmp	r1, r3
 800039c:	f240 808a 	bls.w	80004b4 <__udivmoddi4+0x2ac>
 80003a0:	3e02      	subs	r6, #2
 80003a2:	443b      	add	r3, r7
 80003a4:	1a5b      	subs	r3, r3, r1
 80003a6:	b281      	uxth	r1, r0
 80003a8:	fbb3 f0fe 	udiv	r0, r3, lr
 80003ac:	fb0e 3310 	mls	r3, lr, r0, r3
 80003b0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003b4:	fb00 f308 	mul.w	r3, r0, r8
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d907      	bls.n	80003cc <__udivmoddi4+0x1c4>
 80003bc:	1879      	adds	r1, r7, r1
 80003be:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80003c2:	d273      	bcs.n	80004ac <__udivmoddi4+0x2a4>
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d971      	bls.n	80004ac <__udivmoddi4+0x2a4>
 80003c8:	3802      	subs	r0, #2
 80003ca:	4439      	add	r1, r7
 80003cc:	1acb      	subs	r3, r1, r3
 80003ce:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003d2:	e778      	b.n	80002c6 <__udivmoddi4+0xbe>
 80003d4:	f1c6 0c20 	rsb	ip, r6, #32
 80003d8:	fa03 f406 	lsl.w	r4, r3, r6
 80003dc:	fa22 f30c 	lsr.w	r3, r2, ip
 80003e0:	431c      	orrs	r4, r3
 80003e2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003e6:	fa01 f306 	lsl.w	r3, r1, r6
 80003ea:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003ee:	fa21 f10c 	lsr.w	r1, r1, ip
 80003f2:	431f      	orrs	r7, r3
 80003f4:	0c3b      	lsrs	r3, r7, #16
 80003f6:	fbb1 f9fe 	udiv	r9, r1, lr
 80003fa:	fa1f f884 	uxth.w	r8, r4
 80003fe:	fb0e 1119 	mls	r1, lr, r9, r1
 8000402:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000406:	fb09 fa08 	mul.w	sl, r9, r8
 800040a:	458a      	cmp	sl, r1
 800040c:	fa02 f206 	lsl.w	r2, r2, r6
 8000410:	fa00 f306 	lsl.w	r3, r0, r6
 8000414:	d908      	bls.n	8000428 <__udivmoddi4+0x220>
 8000416:	1861      	adds	r1, r4, r1
 8000418:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 800041c:	d248      	bcs.n	80004b0 <__udivmoddi4+0x2a8>
 800041e:	458a      	cmp	sl, r1
 8000420:	d946      	bls.n	80004b0 <__udivmoddi4+0x2a8>
 8000422:	f1a9 0902 	sub.w	r9, r9, #2
 8000426:	4421      	add	r1, r4
 8000428:	eba1 010a 	sub.w	r1, r1, sl
 800042c:	b2bf      	uxth	r7, r7
 800042e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000432:	fb0e 1110 	mls	r1, lr, r0, r1
 8000436:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800043a:	fb00 f808 	mul.w	r8, r0, r8
 800043e:	45b8      	cmp	r8, r7
 8000440:	d907      	bls.n	8000452 <__udivmoddi4+0x24a>
 8000442:	19e7      	adds	r7, r4, r7
 8000444:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000448:	d22e      	bcs.n	80004a8 <__udivmoddi4+0x2a0>
 800044a:	45b8      	cmp	r8, r7
 800044c:	d92c      	bls.n	80004a8 <__udivmoddi4+0x2a0>
 800044e:	3802      	subs	r0, #2
 8000450:	4427      	add	r7, r4
 8000452:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000456:	eba7 0708 	sub.w	r7, r7, r8
 800045a:	fba0 8902 	umull	r8, r9, r0, r2
 800045e:	454f      	cmp	r7, r9
 8000460:	46c6      	mov	lr, r8
 8000462:	4649      	mov	r1, r9
 8000464:	d31a      	bcc.n	800049c <__udivmoddi4+0x294>
 8000466:	d017      	beq.n	8000498 <__udivmoddi4+0x290>
 8000468:	b15d      	cbz	r5, 8000482 <__udivmoddi4+0x27a>
 800046a:	ebb3 020e 	subs.w	r2, r3, lr
 800046e:	eb67 0701 	sbc.w	r7, r7, r1
 8000472:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000476:	40f2      	lsrs	r2, r6
 8000478:	ea4c 0202 	orr.w	r2, ip, r2
 800047c:	40f7      	lsrs	r7, r6
 800047e:	e9c5 2700 	strd	r2, r7, [r5]
 8000482:	2600      	movs	r6, #0
 8000484:	4631      	mov	r1, r6
 8000486:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e70b      	b.n	80002a8 <__udivmoddi4+0xa0>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e9      	b.n	8000268 <__udivmoddi4+0x60>
 8000494:	4618      	mov	r0, r3
 8000496:	e6fd      	b.n	8000294 <__udivmoddi4+0x8c>
 8000498:	4543      	cmp	r3, r8
 800049a:	d2e5      	bcs.n	8000468 <__udivmoddi4+0x260>
 800049c:	ebb8 0e02 	subs.w	lr, r8, r2
 80004a0:	eb69 0104 	sbc.w	r1, r9, r4
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7df      	b.n	8000468 <__udivmoddi4+0x260>
 80004a8:	4608      	mov	r0, r1
 80004aa:	e7d2      	b.n	8000452 <__udivmoddi4+0x24a>
 80004ac:	4660      	mov	r0, ip
 80004ae:	e78d      	b.n	80003cc <__udivmoddi4+0x1c4>
 80004b0:	4681      	mov	r9, r0
 80004b2:	e7b9      	b.n	8000428 <__udivmoddi4+0x220>
 80004b4:	4666      	mov	r6, ip
 80004b6:	e775      	b.n	80003a4 <__udivmoddi4+0x19c>
 80004b8:	4630      	mov	r0, r6
 80004ba:	e74a      	b.n	8000352 <__udivmoddi4+0x14a>
 80004bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c0:	4439      	add	r1, r7
 80004c2:	e713      	b.n	80002ec <__udivmoddi4+0xe4>
 80004c4:	3802      	subs	r0, #2
 80004c6:	443c      	add	r4, r7
 80004c8:	e724      	b.n	8000314 <__udivmoddi4+0x10c>
 80004ca:	bf00      	nop

080004cc <__aeabi_idiv0>:
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop

080004d0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80004d0:	b480      	push	{r7}
 80004d2:	b083      	sub	sp, #12
 80004d4:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80004d6:	2300      	movs	r3, #0
 80004d8:	607b      	str	r3, [r7, #4]
 80004da:	4b10      	ldr	r3, [pc, #64]	; (800051c <MX_GPIO_Init+0x4c>)
 80004dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004de:	4a0f      	ldr	r2, [pc, #60]	; (800051c <MX_GPIO_Init+0x4c>)
 80004e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80004e4:	6313      	str	r3, [r2, #48]	; 0x30
 80004e6:	4b0d      	ldr	r3, [pc, #52]	; (800051c <MX_GPIO_Init+0x4c>)
 80004e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80004ee:	607b      	str	r3, [r7, #4]
 80004f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004f2:	2300      	movs	r3, #0
 80004f4:	603b      	str	r3, [r7, #0]
 80004f6:	4b09      	ldr	r3, [pc, #36]	; (800051c <MX_GPIO_Init+0x4c>)
 80004f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004fa:	4a08      	ldr	r2, [pc, #32]	; (800051c <MX_GPIO_Init+0x4c>)
 80004fc:	f043 0301 	orr.w	r3, r3, #1
 8000500:	6313      	str	r3, [r2, #48]	; 0x30
 8000502:	4b06      	ldr	r3, [pc, #24]	; (800051c <MX_GPIO_Init+0x4c>)
 8000504:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000506:	f003 0301 	and.w	r3, r3, #1
 800050a:	603b      	str	r3, [r7, #0]
 800050c:	683b      	ldr	r3, [r7, #0]

}
 800050e:	bf00      	nop
 8000510:	370c      	adds	r7, #12
 8000512:	46bd      	mov	sp, r7
 8000514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000518:	4770      	bx	lr
 800051a:	bf00      	nop
 800051c:	40023800 	.word	0x40023800

08000520 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000520:	b580      	push	{r7, lr}
 8000522:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000524:	f000 f90e 	bl	8000744 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000528:	f000 f806 	bl	8000538 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800052c:	f7ff ffd0 	bl	80004d0 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 8000530:	f006 fcac 	bl	8006e8c <MX_USB_DEVICE_Init>
  //MX_USB_DEVICE_Init();
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000534:	e7fe      	b.n	8000534 <main+0x14>
	...

08000538 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000538:	b580      	push	{r7, lr}
 800053a:	b094      	sub	sp, #80	; 0x50
 800053c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800053e:	f107 0320 	add.w	r3, r7, #32
 8000542:	2230      	movs	r2, #48	; 0x30
 8000544:	2100      	movs	r1, #0
 8000546:	4618      	mov	r0, r3
 8000548:	f007 f992 	bl	8007870 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800054c:	f107 030c 	add.w	r3, r7, #12
 8000550:	2200      	movs	r2, #0
 8000552:	601a      	str	r2, [r3, #0]
 8000554:	605a      	str	r2, [r3, #4]
 8000556:	609a      	str	r2, [r3, #8]
 8000558:	60da      	str	r2, [r3, #12]
 800055a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800055c:	2300      	movs	r3, #0
 800055e:	60bb      	str	r3, [r7, #8]
 8000560:	4b27      	ldr	r3, [pc, #156]	; (8000600 <SystemClock_Config+0xc8>)
 8000562:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000564:	4a26      	ldr	r2, [pc, #152]	; (8000600 <SystemClock_Config+0xc8>)
 8000566:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800056a:	6413      	str	r3, [r2, #64]	; 0x40
 800056c:	4b24      	ldr	r3, [pc, #144]	; (8000600 <SystemClock_Config+0xc8>)
 800056e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000570:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000574:	60bb      	str	r3, [r7, #8]
 8000576:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000578:	2300      	movs	r3, #0
 800057a:	607b      	str	r3, [r7, #4]
 800057c:	4b21      	ldr	r3, [pc, #132]	; (8000604 <SystemClock_Config+0xcc>)
 800057e:	681b      	ldr	r3, [r3, #0]
 8000580:	4a20      	ldr	r2, [pc, #128]	; (8000604 <SystemClock_Config+0xcc>)
 8000582:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000586:	6013      	str	r3, [r2, #0]
 8000588:	4b1e      	ldr	r3, [pc, #120]	; (8000604 <SystemClock_Config+0xcc>)
 800058a:	681b      	ldr	r3, [r3, #0]
 800058c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000590:	607b      	str	r3, [r7, #4]
 8000592:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000594:	2301      	movs	r3, #1
 8000596:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000598:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800059c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800059e:	2302      	movs	r3, #2
 80005a0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005a2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80005a6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 80005a8:	2319      	movs	r3, #25
 80005aa:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 80005ac:	23c0      	movs	r3, #192	; 0xc0
 80005ae:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005b0:	2302      	movs	r3, #2
 80005b2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80005b4:	2304      	movs	r3, #4
 80005b6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005b8:	f107 0320 	add.w	r3, r7, #32
 80005bc:	4618      	mov	r0, r3
 80005be:	f001 fd9d 	bl	80020fc <HAL_RCC_OscConfig>
 80005c2:	4603      	mov	r3, r0
 80005c4:	2b00      	cmp	r3, #0
 80005c6:	d001      	beq.n	80005cc <SystemClock_Config+0x94>
  {
    Error_Handler();
 80005c8:	f000 f81e 	bl	8000608 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005cc:	230f      	movs	r3, #15
 80005ce:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005d0:	2302      	movs	r3, #2
 80005d2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005d4:	2300      	movs	r3, #0
 80005d6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80005d8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005dc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005de:	2300      	movs	r3, #0
 80005e0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80005e2:	f107 030c 	add.w	r3, r7, #12
 80005e6:	2103      	movs	r1, #3
 80005e8:	4618      	mov	r0, r3
 80005ea:	f001 ffff 	bl	80025ec <HAL_RCC_ClockConfig>
 80005ee:	4603      	mov	r3, r0
 80005f0:	2b00      	cmp	r3, #0
 80005f2:	d001      	beq.n	80005f8 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80005f4:	f000 f808 	bl	8000608 <Error_Handler>
  }
}
 80005f8:	bf00      	nop
 80005fa:	3750      	adds	r7, #80	; 0x50
 80005fc:	46bd      	mov	sp, r7
 80005fe:	bd80      	pop	{r7, pc}
 8000600:	40023800 	.word	0x40023800
 8000604:	40007000 	.word	0x40007000

08000608 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000608:	b480      	push	{r7}
 800060a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800060c:	b672      	cpsid	i
}
 800060e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000610:	e7fe      	b.n	8000610 <Error_Handler+0x8>
	...

08000614 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000614:	b480      	push	{r7}
 8000616:	b083      	sub	sp, #12
 8000618:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800061a:	2300      	movs	r3, #0
 800061c:	607b      	str	r3, [r7, #4]
 800061e:	4b10      	ldr	r3, [pc, #64]	; (8000660 <HAL_MspInit+0x4c>)
 8000620:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000622:	4a0f      	ldr	r2, [pc, #60]	; (8000660 <HAL_MspInit+0x4c>)
 8000624:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000628:	6453      	str	r3, [r2, #68]	; 0x44
 800062a:	4b0d      	ldr	r3, [pc, #52]	; (8000660 <HAL_MspInit+0x4c>)
 800062c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800062e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000632:	607b      	str	r3, [r7, #4]
 8000634:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000636:	2300      	movs	r3, #0
 8000638:	603b      	str	r3, [r7, #0]
 800063a:	4b09      	ldr	r3, [pc, #36]	; (8000660 <HAL_MspInit+0x4c>)
 800063c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800063e:	4a08      	ldr	r2, [pc, #32]	; (8000660 <HAL_MspInit+0x4c>)
 8000640:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000644:	6413      	str	r3, [r2, #64]	; 0x40
 8000646:	4b06      	ldr	r3, [pc, #24]	; (8000660 <HAL_MspInit+0x4c>)
 8000648:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800064a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800064e:	603b      	str	r3, [r7, #0]
 8000650:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000652:	bf00      	nop
 8000654:	370c      	adds	r7, #12
 8000656:	46bd      	mov	sp, r7
 8000658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800065c:	4770      	bx	lr
 800065e:	bf00      	nop
 8000660:	40023800 	.word	0x40023800

08000664 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000664:	b480      	push	{r7}
 8000666:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000668:	e7fe      	b.n	8000668 <NMI_Handler+0x4>

0800066a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800066a:	b480      	push	{r7}
 800066c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800066e:	e7fe      	b.n	800066e <HardFault_Handler+0x4>

08000670 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000670:	b480      	push	{r7}
 8000672:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000674:	e7fe      	b.n	8000674 <MemManage_Handler+0x4>

08000676 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000676:	b480      	push	{r7}
 8000678:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800067a:	e7fe      	b.n	800067a <BusFault_Handler+0x4>

0800067c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800067c:	b480      	push	{r7}
 800067e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000680:	e7fe      	b.n	8000680 <UsageFault_Handler+0x4>

08000682 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000682:	b480      	push	{r7}
 8000684:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000686:	bf00      	nop
 8000688:	46bd      	mov	sp, r7
 800068a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800068e:	4770      	bx	lr

08000690 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000690:	b480      	push	{r7}
 8000692:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000694:	bf00      	nop
 8000696:	46bd      	mov	sp, r7
 8000698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800069c:	4770      	bx	lr

0800069e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800069e:	b480      	push	{r7}
 80006a0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80006a2:	bf00      	nop
 80006a4:	46bd      	mov	sp, r7
 80006a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006aa:	4770      	bx	lr

080006ac <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80006b0:	f000 f89a 	bl	80007e8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80006b4:	bf00      	nop
 80006b6:	bd80      	pop	{r7, pc}

080006b8 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80006bc:	4802      	ldr	r0, [pc, #8]	; (80006c8 <OTG_FS_IRQHandler+0x10>)
 80006be:	f000 fcbd 	bl	800103c <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80006c2:	bf00      	nop
 80006c4:	bd80      	pop	{r7, pc}
 80006c6:	bf00      	nop
 80006c8:	200008d0 	.word	0x200008d0

080006cc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80006cc:	b480      	push	{r7}
 80006ce:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80006d0:	4b06      	ldr	r3, [pc, #24]	; (80006ec <SystemInit+0x20>)
 80006d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80006d6:	4a05      	ldr	r2, [pc, #20]	; (80006ec <SystemInit+0x20>)
 80006d8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80006dc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80006e0:	bf00      	nop
 80006e2:	46bd      	mov	sp, r7
 80006e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e8:	4770      	bx	lr
 80006ea:	bf00      	nop
 80006ec:	e000ed00 	.word	0xe000ed00

080006f0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80006f0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000728 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80006f4:	480d      	ldr	r0, [pc, #52]	; (800072c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80006f6:	490e      	ldr	r1, [pc, #56]	; (8000730 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80006f8:	4a0e      	ldr	r2, [pc, #56]	; (8000734 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80006fa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80006fc:	e002      	b.n	8000704 <LoopCopyDataInit>

080006fe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80006fe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000700:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000702:	3304      	adds	r3, #4

08000704 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000704:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000706:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000708:	d3f9      	bcc.n	80006fe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800070a:	4a0b      	ldr	r2, [pc, #44]	; (8000738 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800070c:	4c0b      	ldr	r4, [pc, #44]	; (800073c <LoopFillZerobss+0x26>)
  movs r3, #0
 800070e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000710:	e001      	b.n	8000716 <LoopFillZerobss>

08000712 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000712:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000714:	3204      	adds	r2, #4

08000716 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000716:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000718:	d3fb      	bcc.n	8000712 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800071a:	f7ff ffd7 	bl	80006cc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800071e:	f007 f883 	bl	8007828 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000722:	f7ff fefd 	bl	8000520 <main>
  bx  lr    
 8000726:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000728:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800072c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000730:	20000164 	.word	0x20000164
  ldr r2, =_sidata
 8000734:	08007920 	.word	0x08007920
  ldr r2, =_sbss
 8000738:	20000164 	.word	0x20000164
  ldr r4, =_ebss
 800073c:	20000cd8 	.word	0x20000cd8

08000740 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000740:	e7fe      	b.n	8000740 <ADC_IRQHandler>
	...

08000744 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000748:	4b0e      	ldr	r3, [pc, #56]	; (8000784 <HAL_Init+0x40>)
 800074a:	681b      	ldr	r3, [r3, #0]
 800074c:	4a0d      	ldr	r2, [pc, #52]	; (8000784 <HAL_Init+0x40>)
 800074e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000752:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000754:	4b0b      	ldr	r3, [pc, #44]	; (8000784 <HAL_Init+0x40>)
 8000756:	681b      	ldr	r3, [r3, #0]
 8000758:	4a0a      	ldr	r2, [pc, #40]	; (8000784 <HAL_Init+0x40>)
 800075a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800075e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000760:	4b08      	ldr	r3, [pc, #32]	; (8000784 <HAL_Init+0x40>)
 8000762:	681b      	ldr	r3, [r3, #0]
 8000764:	4a07      	ldr	r2, [pc, #28]	; (8000784 <HAL_Init+0x40>)
 8000766:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800076a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800076c:	2003      	movs	r0, #3
 800076e:	f000 f94f 	bl	8000a10 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000772:	200f      	movs	r0, #15
 8000774:	f000 f808 	bl	8000788 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000778:	f7ff ff4c 	bl	8000614 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800077c:	2300      	movs	r3, #0
}
 800077e:	4618      	mov	r0, r3
 8000780:	bd80      	pop	{r7, pc}
 8000782:	bf00      	nop
 8000784:	40023c00 	.word	0x40023c00

08000788 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	b082      	sub	sp, #8
 800078c:	af00      	add	r7, sp, #0
 800078e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000790:	4b12      	ldr	r3, [pc, #72]	; (80007dc <HAL_InitTick+0x54>)
 8000792:	681a      	ldr	r2, [r3, #0]
 8000794:	4b12      	ldr	r3, [pc, #72]	; (80007e0 <HAL_InitTick+0x58>)
 8000796:	781b      	ldrb	r3, [r3, #0]
 8000798:	4619      	mov	r1, r3
 800079a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800079e:	fbb3 f3f1 	udiv	r3, r3, r1
 80007a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80007a6:	4618      	mov	r0, r3
 80007a8:	f000 f967 	bl	8000a7a <HAL_SYSTICK_Config>
 80007ac:	4603      	mov	r3, r0
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d001      	beq.n	80007b6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80007b2:	2301      	movs	r3, #1
 80007b4:	e00e      	b.n	80007d4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	2b0f      	cmp	r3, #15
 80007ba:	d80a      	bhi.n	80007d2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80007bc:	2200      	movs	r2, #0
 80007be:	6879      	ldr	r1, [r7, #4]
 80007c0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80007c4:	f000 f92f 	bl	8000a26 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80007c8:	4a06      	ldr	r2, [pc, #24]	; (80007e4 <HAL_InitTick+0x5c>)
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80007ce:	2300      	movs	r3, #0
 80007d0:	e000      	b.n	80007d4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80007d2:	2301      	movs	r3, #1
}
 80007d4:	4618      	mov	r0, r3
 80007d6:	3708      	adds	r7, #8
 80007d8:	46bd      	mov	sp, r7
 80007da:	bd80      	pop	{r7, pc}
 80007dc:	20000000 	.word	0x20000000
 80007e0:	20000008 	.word	0x20000008
 80007e4:	20000004 	.word	0x20000004

080007e8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80007e8:	b480      	push	{r7}
 80007ea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80007ec:	4b06      	ldr	r3, [pc, #24]	; (8000808 <HAL_IncTick+0x20>)
 80007ee:	781b      	ldrb	r3, [r3, #0]
 80007f0:	461a      	mov	r2, r3
 80007f2:	4b06      	ldr	r3, [pc, #24]	; (800080c <HAL_IncTick+0x24>)
 80007f4:	681b      	ldr	r3, [r3, #0]
 80007f6:	4413      	add	r3, r2
 80007f8:	4a04      	ldr	r2, [pc, #16]	; (800080c <HAL_IncTick+0x24>)
 80007fa:	6013      	str	r3, [r2, #0]
}
 80007fc:	bf00      	nop
 80007fe:	46bd      	mov	sp, r7
 8000800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000804:	4770      	bx	lr
 8000806:	bf00      	nop
 8000808:	20000008 	.word	0x20000008
 800080c:	200003fc 	.word	0x200003fc

08000810 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000810:	b480      	push	{r7}
 8000812:	af00      	add	r7, sp, #0
  return uwTick;
 8000814:	4b03      	ldr	r3, [pc, #12]	; (8000824 <HAL_GetTick+0x14>)
 8000816:	681b      	ldr	r3, [r3, #0]
}
 8000818:	4618      	mov	r0, r3
 800081a:	46bd      	mov	sp, r7
 800081c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000820:	4770      	bx	lr
 8000822:	bf00      	nop
 8000824:	200003fc 	.word	0x200003fc

08000828 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	b084      	sub	sp, #16
 800082c:	af00      	add	r7, sp, #0
 800082e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000830:	f7ff ffee 	bl	8000810 <HAL_GetTick>
 8000834:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800083a:	68fb      	ldr	r3, [r7, #12]
 800083c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000840:	d005      	beq.n	800084e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000842:	4b0a      	ldr	r3, [pc, #40]	; (800086c <HAL_Delay+0x44>)
 8000844:	781b      	ldrb	r3, [r3, #0]
 8000846:	461a      	mov	r2, r3
 8000848:	68fb      	ldr	r3, [r7, #12]
 800084a:	4413      	add	r3, r2
 800084c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800084e:	bf00      	nop
 8000850:	f7ff ffde 	bl	8000810 <HAL_GetTick>
 8000854:	4602      	mov	r2, r0
 8000856:	68bb      	ldr	r3, [r7, #8]
 8000858:	1ad3      	subs	r3, r2, r3
 800085a:	68fa      	ldr	r2, [r7, #12]
 800085c:	429a      	cmp	r2, r3
 800085e:	d8f7      	bhi.n	8000850 <HAL_Delay+0x28>
  {
  }
}
 8000860:	bf00      	nop
 8000862:	bf00      	nop
 8000864:	3710      	adds	r7, #16
 8000866:	46bd      	mov	sp, r7
 8000868:	bd80      	pop	{r7, pc}
 800086a:	bf00      	nop
 800086c:	20000008 	.word	0x20000008

08000870 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000870:	b480      	push	{r7}
 8000872:	b085      	sub	sp, #20
 8000874:	af00      	add	r7, sp, #0
 8000876:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	f003 0307 	and.w	r3, r3, #7
 800087e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000880:	4b0c      	ldr	r3, [pc, #48]	; (80008b4 <__NVIC_SetPriorityGrouping+0x44>)
 8000882:	68db      	ldr	r3, [r3, #12]
 8000884:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000886:	68ba      	ldr	r2, [r7, #8]
 8000888:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800088c:	4013      	ands	r3, r2
 800088e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000890:	68fb      	ldr	r3, [r7, #12]
 8000892:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000894:	68bb      	ldr	r3, [r7, #8]
 8000896:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000898:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800089c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80008a0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80008a2:	4a04      	ldr	r2, [pc, #16]	; (80008b4 <__NVIC_SetPriorityGrouping+0x44>)
 80008a4:	68bb      	ldr	r3, [r7, #8]
 80008a6:	60d3      	str	r3, [r2, #12]
}
 80008a8:	bf00      	nop
 80008aa:	3714      	adds	r7, #20
 80008ac:	46bd      	mov	sp, r7
 80008ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b2:	4770      	bx	lr
 80008b4:	e000ed00 	.word	0xe000ed00

080008b8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80008b8:	b480      	push	{r7}
 80008ba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80008bc:	4b04      	ldr	r3, [pc, #16]	; (80008d0 <__NVIC_GetPriorityGrouping+0x18>)
 80008be:	68db      	ldr	r3, [r3, #12]
 80008c0:	0a1b      	lsrs	r3, r3, #8
 80008c2:	f003 0307 	and.w	r3, r3, #7
}
 80008c6:	4618      	mov	r0, r3
 80008c8:	46bd      	mov	sp, r7
 80008ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ce:	4770      	bx	lr
 80008d0:	e000ed00 	.word	0xe000ed00

080008d4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80008d4:	b480      	push	{r7}
 80008d6:	b083      	sub	sp, #12
 80008d8:	af00      	add	r7, sp, #0
 80008da:	4603      	mov	r3, r0
 80008dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80008de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	db0b      	blt.n	80008fe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80008e6:	79fb      	ldrb	r3, [r7, #7]
 80008e8:	f003 021f 	and.w	r2, r3, #31
 80008ec:	4907      	ldr	r1, [pc, #28]	; (800090c <__NVIC_EnableIRQ+0x38>)
 80008ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008f2:	095b      	lsrs	r3, r3, #5
 80008f4:	2001      	movs	r0, #1
 80008f6:	fa00 f202 	lsl.w	r2, r0, r2
 80008fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80008fe:	bf00      	nop
 8000900:	370c      	adds	r7, #12
 8000902:	46bd      	mov	sp, r7
 8000904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000908:	4770      	bx	lr
 800090a:	bf00      	nop
 800090c:	e000e100 	.word	0xe000e100

08000910 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000910:	b480      	push	{r7}
 8000912:	b083      	sub	sp, #12
 8000914:	af00      	add	r7, sp, #0
 8000916:	4603      	mov	r3, r0
 8000918:	6039      	str	r1, [r7, #0]
 800091a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800091c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000920:	2b00      	cmp	r3, #0
 8000922:	db0a      	blt.n	800093a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000924:	683b      	ldr	r3, [r7, #0]
 8000926:	b2da      	uxtb	r2, r3
 8000928:	490c      	ldr	r1, [pc, #48]	; (800095c <__NVIC_SetPriority+0x4c>)
 800092a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800092e:	0112      	lsls	r2, r2, #4
 8000930:	b2d2      	uxtb	r2, r2
 8000932:	440b      	add	r3, r1
 8000934:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000938:	e00a      	b.n	8000950 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800093a:	683b      	ldr	r3, [r7, #0]
 800093c:	b2da      	uxtb	r2, r3
 800093e:	4908      	ldr	r1, [pc, #32]	; (8000960 <__NVIC_SetPriority+0x50>)
 8000940:	79fb      	ldrb	r3, [r7, #7]
 8000942:	f003 030f 	and.w	r3, r3, #15
 8000946:	3b04      	subs	r3, #4
 8000948:	0112      	lsls	r2, r2, #4
 800094a:	b2d2      	uxtb	r2, r2
 800094c:	440b      	add	r3, r1
 800094e:	761a      	strb	r2, [r3, #24]
}
 8000950:	bf00      	nop
 8000952:	370c      	adds	r7, #12
 8000954:	46bd      	mov	sp, r7
 8000956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800095a:	4770      	bx	lr
 800095c:	e000e100 	.word	0xe000e100
 8000960:	e000ed00 	.word	0xe000ed00

08000964 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000964:	b480      	push	{r7}
 8000966:	b089      	sub	sp, #36	; 0x24
 8000968:	af00      	add	r7, sp, #0
 800096a:	60f8      	str	r0, [r7, #12]
 800096c:	60b9      	str	r1, [r7, #8]
 800096e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000970:	68fb      	ldr	r3, [r7, #12]
 8000972:	f003 0307 	and.w	r3, r3, #7
 8000976:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000978:	69fb      	ldr	r3, [r7, #28]
 800097a:	f1c3 0307 	rsb	r3, r3, #7
 800097e:	2b04      	cmp	r3, #4
 8000980:	bf28      	it	cs
 8000982:	2304      	movcs	r3, #4
 8000984:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000986:	69fb      	ldr	r3, [r7, #28]
 8000988:	3304      	adds	r3, #4
 800098a:	2b06      	cmp	r3, #6
 800098c:	d902      	bls.n	8000994 <NVIC_EncodePriority+0x30>
 800098e:	69fb      	ldr	r3, [r7, #28]
 8000990:	3b03      	subs	r3, #3
 8000992:	e000      	b.n	8000996 <NVIC_EncodePriority+0x32>
 8000994:	2300      	movs	r3, #0
 8000996:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000998:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800099c:	69bb      	ldr	r3, [r7, #24]
 800099e:	fa02 f303 	lsl.w	r3, r2, r3
 80009a2:	43da      	mvns	r2, r3
 80009a4:	68bb      	ldr	r3, [r7, #8]
 80009a6:	401a      	ands	r2, r3
 80009a8:	697b      	ldr	r3, [r7, #20]
 80009aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80009ac:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80009b0:	697b      	ldr	r3, [r7, #20]
 80009b2:	fa01 f303 	lsl.w	r3, r1, r3
 80009b6:	43d9      	mvns	r1, r3
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009bc:	4313      	orrs	r3, r2
         );
}
 80009be:	4618      	mov	r0, r3
 80009c0:	3724      	adds	r7, #36	; 0x24
 80009c2:	46bd      	mov	sp, r7
 80009c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c8:	4770      	bx	lr
	...

080009cc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	b082      	sub	sp, #8
 80009d0:	af00      	add	r7, sp, #0
 80009d2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	3b01      	subs	r3, #1
 80009d8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80009dc:	d301      	bcc.n	80009e2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80009de:	2301      	movs	r3, #1
 80009e0:	e00f      	b.n	8000a02 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80009e2:	4a0a      	ldr	r2, [pc, #40]	; (8000a0c <SysTick_Config+0x40>)
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	3b01      	subs	r3, #1
 80009e8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80009ea:	210f      	movs	r1, #15
 80009ec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80009f0:	f7ff ff8e 	bl	8000910 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80009f4:	4b05      	ldr	r3, [pc, #20]	; (8000a0c <SysTick_Config+0x40>)
 80009f6:	2200      	movs	r2, #0
 80009f8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80009fa:	4b04      	ldr	r3, [pc, #16]	; (8000a0c <SysTick_Config+0x40>)
 80009fc:	2207      	movs	r2, #7
 80009fe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000a00:	2300      	movs	r3, #0
}
 8000a02:	4618      	mov	r0, r3
 8000a04:	3708      	adds	r7, #8
 8000a06:	46bd      	mov	sp, r7
 8000a08:	bd80      	pop	{r7, pc}
 8000a0a:	bf00      	nop
 8000a0c:	e000e010 	.word	0xe000e010

08000a10 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b082      	sub	sp, #8
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000a18:	6878      	ldr	r0, [r7, #4]
 8000a1a:	f7ff ff29 	bl	8000870 <__NVIC_SetPriorityGrouping>
}
 8000a1e:	bf00      	nop
 8000a20:	3708      	adds	r7, #8
 8000a22:	46bd      	mov	sp, r7
 8000a24:	bd80      	pop	{r7, pc}

08000a26 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000a26:	b580      	push	{r7, lr}
 8000a28:	b086      	sub	sp, #24
 8000a2a:	af00      	add	r7, sp, #0
 8000a2c:	4603      	mov	r3, r0
 8000a2e:	60b9      	str	r1, [r7, #8]
 8000a30:	607a      	str	r2, [r7, #4]
 8000a32:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000a34:	2300      	movs	r3, #0
 8000a36:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000a38:	f7ff ff3e 	bl	80008b8 <__NVIC_GetPriorityGrouping>
 8000a3c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000a3e:	687a      	ldr	r2, [r7, #4]
 8000a40:	68b9      	ldr	r1, [r7, #8]
 8000a42:	6978      	ldr	r0, [r7, #20]
 8000a44:	f7ff ff8e 	bl	8000964 <NVIC_EncodePriority>
 8000a48:	4602      	mov	r2, r0
 8000a4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000a4e:	4611      	mov	r1, r2
 8000a50:	4618      	mov	r0, r3
 8000a52:	f7ff ff5d 	bl	8000910 <__NVIC_SetPriority>
}
 8000a56:	bf00      	nop
 8000a58:	3718      	adds	r7, #24
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	bd80      	pop	{r7, pc}

08000a5e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a5e:	b580      	push	{r7, lr}
 8000a60:	b082      	sub	sp, #8
 8000a62:	af00      	add	r7, sp, #0
 8000a64:	4603      	mov	r3, r0
 8000a66:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000a68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a6c:	4618      	mov	r0, r3
 8000a6e:	f7ff ff31 	bl	80008d4 <__NVIC_EnableIRQ>
}
 8000a72:	bf00      	nop
 8000a74:	3708      	adds	r7, #8
 8000a76:	46bd      	mov	sp, r7
 8000a78:	bd80      	pop	{r7, pc}

08000a7a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000a7a:	b580      	push	{r7, lr}
 8000a7c:	b082      	sub	sp, #8
 8000a7e:	af00      	add	r7, sp, #0
 8000a80:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000a82:	6878      	ldr	r0, [r7, #4]
 8000a84:	f7ff ffa2 	bl	80009cc <SysTick_Config>
 8000a88:	4603      	mov	r3, r0
}
 8000a8a:	4618      	mov	r0, r3
 8000a8c:	3708      	adds	r7, #8
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	bd80      	pop	{r7, pc}
	...

08000a94 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000a94:	b480      	push	{r7}
 8000a96:	b089      	sub	sp, #36	; 0x24
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	6078      	str	r0, [r7, #4]
 8000a9c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000aaa:	2300      	movs	r3, #0
 8000aac:	61fb      	str	r3, [r7, #28]
 8000aae:	e159      	b.n	8000d64 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000ab0:	2201      	movs	r2, #1
 8000ab2:	69fb      	ldr	r3, [r7, #28]
 8000ab4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ab8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000aba:	683b      	ldr	r3, [r7, #0]
 8000abc:	681b      	ldr	r3, [r3, #0]
 8000abe:	697a      	ldr	r2, [r7, #20]
 8000ac0:	4013      	ands	r3, r2
 8000ac2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000ac4:	693a      	ldr	r2, [r7, #16]
 8000ac6:	697b      	ldr	r3, [r7, #20]
 8000ac8:	429a      	cmp	r2, r3
 8000aca:	f040 8148 	bne.w	8000d5e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000ace:	683b      	ldr	r3, [r7, #0]
 8000ad0:	685b      	ldr	r3, [r3, #4]
 8000ad2:	f003 0303 	and.w	r3, r3, #3
 8000ad6:	2b01      	cmp	r3, #1
 8000ad8:	d005      	beq.n	8000ae6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ada:	683b      	ldr	r3, [r7, #0]
 8000adc:	685b      	ldr	r3, [r3, #4]
 8000ade:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000ae2:	2b02      	cmp	r3, #2
 8000ae4:	d130      	bne.n	8000b48 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	689b      	ldr	r3, [r3, #8]
 8000aea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000aec:	69fb      	ldr	r3, [r7, #28]
 8000aee:	005b      	lsls	r3, r3, #1
 8000af0:	2203      	movs	r2, #3
 8000af2:	fa02 f303 	lsl.w	r3, r2, r3
 8000af6:	43db      	mvns	r3, r3
 8000af8:	69ba      	ldr	r2, [r7, #24]
 8000afa:	4013      	ands	r3, r2
 8000afc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000afe:	683b      	ldr	r3, [r7, #0]
 8000b00:	68da      	ldr	r2, [r3, #12]
 8000b02:	69fb      	ldr	r3, [r7, #28]
 8000b04:	005b      	lsls	r3, r3, #1
 8000b06:	fa02 f303 	lsl.w	r3, r2, r3
 8000b0a:	69ba      	ldr	r2, [r7, #24]
 8000b0c:	4313      	orrs	r3, r2
 8000b0e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	69ba      	ldr	r2, [r7, #24]
 8000b14:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	685b      	ldr	r3, [r3, #4]
 8000b1a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000b1c:	2201      	movs	r2, #1
 8000b1e:	69fb      	ldr	r3, [r7, #28]
 8000b20:	fa02 f303 	lsl.w	r3, r2, r3
 8000b24:	43db      	mvns	r3, r3
 8000b26:	69ba      	ldr	r2, [r7, #24]
 8000b28:	4013      	ands	r3, r2
 8000b2a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000b2c:	683b      	ldr	r3, [r7, #0]
 8000b2e:	685b      	ldr	r3, [r3, #4]
 8000b30:	091b      	lsrs	r3, r3, #4
 8000b32:	f003 0201 	and.w	r2, r3, #1
 8000b36:	69fb      	ldr	r3, [r7, #28]
 8000b38:	fa02 f303 	lsl.w	r3, r2, r3
 8000b3c:	69ba      	ldr	r2, [r7, #24]
 8000b3e:	4313      	orrs	r3, r2
 8000b40:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	69ba      	ldr	r2, [r7, #24]
 8000b46:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000b48:	683b      	ldr	r3, [r7, #0]
 8000b4a:	685b      	ldr	r3, [r3, #4]
 8000b4c:	f003 0303 	and.w	r3, r3, #3
 8000b50:	2b03      	cmp	r3, #3
 8000b52:	d017      	beq.n	8000b84 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	68db      	ldr	r3, [r3, #12]
 8000b58:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000b5a:	69fb      	ldr	r3, [r7, #28]
 8000b5c:	005b      	lsls	r3, r3, #1
 8000b5e:	2203      	movs	r2, #3
 8000b60:	fa02 f303 	lsl.w	r3, r2, r3
 8000b64:	43db      	mvns	r3, r3
 8000b66:	69ba      	ldr	r2, [r7, #24]
 8000b68:	4013      	ands	r3, r2
 8000b6a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000b6c:	683b      	ldr	r3, [r7, #0]
 8000b6e:	689a      	ldr	r2, [r3, #8]
 8000b70:	69fb      	ldr	r3, [r7, #28]
 8000b72:	005b      	lsls	r3, r3, #1
 8000b74:	fa02 f303 	lsl.w	r3, r2, r3
 8000b78:	69ba      	ldr	r2, [r7, #24]
 8000b7a:	4313      	orrs	r3, r2
 8000b7c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	69ba      	ldr	r2, [r7, #24]
 8000b82:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000b84:	683b      	ldr	r3, [r7, #0]
 8000b86:	685b      	ldr	r3, [r3, #4]
 8000b88:	f003 0303 	and.w	r3, r3, #3
 8000b8c:	2b02      	cmp	r3, #2
 8000b8e:	d123      	bne.n	8000bd8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000b90:	69fb      	ldr	r3, [r7, #28]
 8000b92:	08da      	lsrs	r2, r3, #3
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	3208      	adds	r2, #8
 8000b98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000b9c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000b9e:	69fb      	ldr	r3, [r7, #28]
 8000ba0:	f003 0307 	and.w	r3, r3, #7
 8000ba4:	009b      	lsls	r3, r3, #2
 8000ba6:	220f      	movs	r2, #15
 8000ba8:	fa02 f303 	lsl.w	r3, r2, r3
 8000bac:	43db      	mvns	r3, r3
 8000bae:	69ba      	ldr	r2, [r7, #24]
 8000bb0:	4013      	ands	r3, r2
 8000bb2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000bb4:	683b      	ldr	r3, [r7, #0]
 8000bb6:	691a      	ldr	r2, [r3, #16]
 8000bb8:	69fb      	ldr	r3, [r7, #28]
 8000bba:	f003 0307 	and.w	r3, r3, #7
 8000bbe:	009b      	lsls	r3, r3, #2
 8000bc0:	fa02 f303 	lsl.w	r3, r2, r3
 8000bc4:	69ba      	ldr	r2, [r7, #24]
 8000bc6:	4313      	orrs	r3, r2
 8000bc8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000bca:	69fb      	ldr	r3, [r7, #28]
 8000bcc:	08da      	lsrs	r2, r3, #3
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	3208      	adds	r2, #8
 8000bd2:	69b9      	ldr	r1, [r7, #24]
 8000bd4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000bde:	69fb      	ldr	r3, [r7, #28]
 8000be0:	005b      	lsls	r3, r3, #1
 8000be2:	2203      	movs	r2, #3
 8000be4:	fa02 f303 	lsl.w	r3, r2, r3
 8000be8:	43db      	mvns	r3, r3
 8000bea:	69ba      	ldr	r2, [r7, #24]
 8000bec:	4013      	ands	r3, r2
 8000bee:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000bf0:	683b      	ldr	r3, [r7, #0]
 8000bf2:	685b      	ldr	r3, [r3, #4]
 8000bf4:	f003 0203 	and.w	r2, r3, #3
 8000bf8:	69fb      	ldr	r3, [r7, #28]
 8000bfa:	005b      	lsls	r3, r3, #1
 8000bfc:	fa02 f303 	lsl.w	r3, r2, r3
 8000c00:	69ba      	ldr	r2, [r7, #24]
 8000c02:	4313      	orrs	r3, r2
 8000c04:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	69ba      	ldr	r2, [r7, #24]
 8000c0a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000c0c:	683b      	ldr	r3, [r7, #0]
 8000c0e:	685b      	ldr	r3, [r3, #4]
 8000c10:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	f000 80a2 	beq.w	8000d5e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	60fb      	str	r3, [r7, #12]
 8000c1e:	4b57      	ldr	r3, [pc, #348]	; (8000d7c <HAL_GPIO_Init+0x2e8>)
 8000c20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c22:	4a56      	ldr	r2, [pc, #344]	; (8000d7c <HAL_GPIO_Init+0x2e8>)
 8000c24:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c28:	6453      	str	r3, [r2, #68]	; 0x44
 8000c2a:	4b54      	ldr	r3, [pc, #336]	; (8000d7c <HAL_GPIO_Init+0x2e8>)
 8000c2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c2e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c32:	60fb      	str	r3, [r7, #12]
 8000c34:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000c36:	4a52      	ldr	r2, [pc, #328]	; (8000d80 <HAL_GPIO_Init+0x2ec>)
 8000c38:	69fb      	ldr	r3, [r7, #28]
 8000c3a:	089b      	lsrs	r3, r3, #2
 8000c3c:	3302      	adds	r3, #2
 8000c3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c42:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000c44:	69fb      	ldr	r3, [r7, #28]
 8000c46:	f003 0303 	and.w	r3, r3, #3
 8000c4a:	009b      	lsls	r3, r3, #2
 8000c4c:	220f      	movs	r2, #15
 8000c4e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c52:	43db      	mvns	r3, r3
 8000c54:	69ba      	ldr	r2, [r7, #24]
 8000c56:	4013      	ands	r3, r2
 8000c58:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	4a49      	ldr	r2, [pc, #292]	; (8000d84 <HAL_GPIO_Init+0x2f0>)
 8000c5e:	4293      	cmp	r3, r2
 8000c60:	d019      	beq.n	8000c96 <HAL_GPIO_Init+0x202>
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	4a48      	ldr	r2, [pc, #288]	; (8000d88 <HAL_GPIO_Init+0x2f4>)
 8000c66:	4293      	cmp	r3, r2
 8000c68:	d013      	beq.n	8000c92 <HAL_GPIO_Init+0x1fe>
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	4a47      	ldr	r2, [pc, #284]	; (8000d8c <HAL_GPIO_Init+0x2f8>)
 8000c6e:	4293      	cmp	r3, r2
 8000c70:	d00d      	beq.n	8000c8e <HAL_GPIO_Init+0x1fa>
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	4a46      	ldr	r2, [pc, #280]	; (8000d90 <HAL_GPIO_Init+0x2fc>)
 8000c76:	4293      	cmp	r3, r2
 8000c78:	d007      	beq.n	8000c8a <HAL_GPIO_Init+0x1f6>
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	4a45      	ldr	r2, [pc, #276]	; (8000d94 <HAL_GPIO_Init+0x300>)
 8000c7e:	4293      	cmp	r3, r2
 8000c80:	d101      	bne.n	8000c86 <HAL_GPIO_Init+0x1f2>
 8000c82:	2304      	movs	r3, #4
 8000c84:	e008      	b.n	8000c98 <HAL_GPIO_Init+0x204>
 8000c86:	2307      	movs	r3, #7
 8000c88:	e006      	b.n	8000c98 <HAL_GPIO_Init+0x204>
 8000c8a:	2303      	movs	r3, #3
 8000c8c:	e004      	b.n	8000c98 <HAL_GPIO_Init+0x204>
 8000c8e:	2302      	movs	r3, #2
 8000c90:	e002      	b.n	8000c98 <HAL_GPIO_Init+0x204>
 8000c92:	2301      	movs	r3, #1
 8000c94:	e000      	b.n	8000c98 <HAL_GPIO_Init+0x204>
 8000c96:	2300      	movs	r3, #0
 8000c98:	69fa      	ldr	r2, [r7, #28]
 8000c9a:	f002 0203 	and.w	r2, r2, #3
 8000c9e:	0092      	lsls	r2, r2, #2
 8000ca0:	4093      	lsls	r3, r2
 8000ca2:	69ba      	ldr	r2, [r7, #24]
 8000ca4:	4313      	orrs	r3, r2
 8000ca6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000ca8:	4935      	ldr	r1, [pc, #212]	; (8000d80 <HAL_GPIO_Init+0x2ec>)
 8000caa:	69fb      	ldr	r3, [r7, #28]
 8000cac:	089b      	lsrs	r3, r3, #2
 8000cae:	3302      	adds	r3, #2
 8000cb0:	69ba      	ldr	r2, [r7, #24]
 8000cb2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000cb6:	4b38      	ldr	r3, [pc, #224]	; (8000d98 <HAL_GPIO_Init+0x304>)
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000cbc:	693b      	ldr	r3, [r7, #16]
 8000cbe:	43db      	mvns	r3, r3
 8000cc0:	69ba      	ldr	r2, [r7, #24]
 8000cc2:	4013      	ands	r3, r2
 8000cc4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000cc6:	683b      	ldr	r3, [r7, #0]
 8000cc8:	685b      	ldr	r3, [r3, #4]
 8000cca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	d003      	beq.n	8000cda <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8000cd2:	69ba      	ldr	r2, [r7, #24]
 8000cd4:	693b      	ldr	r3, [r7, #16]
 8000cd6:	4313      	orrs	r3, r2
 8000cd8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000cda:	4a2f      	ldr	r2, [pc, #188]	; (8000d98 <HAL_GPIO_Init+0x304>)
 8000cdc:	69bb      	ldr	r3, [r7, #24]
 8000cde:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000ce0:	4b2d      	ldr	r3, [pc, #180]	; (8000d98 <HAL_GPIO_Init+0x304>)
 8000ce2:	685b      	ldr	r3, [r3, #4]
 8000ce4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ce6:	693b      	ldr	r3, [r7, #16]
 8000ce8:	43db      	mvns	r3, r3
 8000cea:	69ba      	ldr	r2, [r7, #24]
 8000cec:	4013      	ands	r3, r2
 8000cee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000cf0:	683b      	ldr	r3, [r7, #0]
 8000cf2:	685b      	ldr	r3, [r3, #4]
 8000cf4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d003      	beq.n	8000d04 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8000cfc:	69ba      	ldr	r2, [r7, #24]
 8000cfe:	693b      	ldr	r3, [r7, #16]
 8000d00:	4313      	orrs	r3, r2
 8000d02:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000d04:	4a24      	ldr	r2, [pc, #144]	; (8000d98 <HAL_GPIO_Init+0x304>)
 8000d06:	69bb      	ldr	r3, [r7, #24]
 8000d08:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000d0a:	4b23      	ldr	r3, [pc, #140]	; (8000d98 <HAL_GPIO_Init+0x304>)
 8000d0c:	689b      	ldr	r3, [r3, #8]
 8000d0e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000d10:	693b      	ldr	r3, [r7, #16]
 8000d12:	43db      	mvns	r3, r3
 8000d14:	69ba      	ldr	r2, [r7, #24]
 8000d16:	4013      	ands	r3, r2
 8000d18:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000d1a:	683b      	ldr	r3, [r7, #0]
 8000d1c:	685b      	ldr	r3, [r3, #4]
 8000d1e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d003      	beq.n	8000d2e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8000d26:	69ba      	ldr	r2, [r7, #24]
 8000d28:	693b      	ldr	r3, [r7, #16]
 8000d2a:	4313      	orrs	r3, r2
 8000d2c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000d2e:	4a1a      	ldr	r2, [pc, #104]	; (8000d98 <HAL_GPIO_Init+0x304>)
 8000d30:	69bb      	ldr	r3, [r7, #24]
 8000d32:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000d34:	4b18      	ldr	r3, [pc, #96]	; (8000d98 <HAL_GPIO_Init+0x304>)
 8000d36:	68db      	ldr	r3, [r3, #12]
 8000d38:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000d3a:	693b      	ldr	r3, [r7, #16]
 8000d3c:	43db      	mvns	r3, r3
 8000d3e:	69ba      	ldr	r2, [r7, #24]
 8000d40:	4013      	ands	r3, r2
 8000d42:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000d44:	683b      	ldr	r3, [r7, #0]
 8000d46:	685b      	ldr	r3, [r3, #4]
 8000d48:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d003      	beq.n	8000d58 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8000d50:	69ba      	ldr	r2, [r7, #24]
 8000d52:	693b      	ldr	r3, [r7, #16]
 8000d54:	4313      	orrs	r3, r2
 8000d56:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000d58:	4a0f      	ldr	r2, [pc, #60]	; (8000d98 <HAL_GPIO_Init+0x304>)
 8000d5a:	69bb      	ldr	r3, [r7, #24]
 8000d5c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000d5e:	69fb      	ldr	r3, [r7, #28]
 8000d60:	3301      	adds	r3, #1
 8000d62:	61fb      	str	r3, [r7, #28]
 8000d64:	69fb      	ldr	r3, [r7, #28]
 8000d66:	2b0f      	cmp	r3, #15
 8000d68:	f67f aea2 	bls.w	8000ab0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000d6c:	bf00      	nop
 8000d6e:	bf00      	nop
 8000d70:	3724      	adds	r7, #36	; 0x24
 8000d72:	46bd      	mov	sp, r7
 8000d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d78:	4770      	bx	lr
 8000d7a:	bf00      	nop
 8000d7c:	40023800 	.word	0x40023800
 8000d80:	40013800 	.word	0x40013800
 8000d84:	40020000 	.word	0x40020000
 8000d88:	40020400 	.word	0x40020400
 8000d8c:	40020800 	.word	0x40020800
 8000d90:	40020c00 	.word	0x40020c00
 8000d94:	40021000 	.word	0x40021000
 8000d98:	40013c00 	.word	0x40013c00

08000d9c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000d9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000d9e:	b08f      	sub	sp, #60	; 0x3c
 8000da0:	af0a      	add	r7, sp, #40	; 0x28
 8000da2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d101      	bne.n	8000dae <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8000daa:	2301      	movs	r3, #1
 8000dac:	e10f      	b.n	8000fce <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8000dba:	b2db      	uxtb	r3, r3
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	d106      	bne.n	8000dce <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8000dc8:	6878      	ldr	r0, [r7, #4]
 8000dca:	f006 fa03 	bl	80071d4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	2203      	movs	r2, #3
 8000dd2:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8000dd6:	68bb      	ldr	r3, [r7, #8]
 8000dd8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000dda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d102      	bne.n	8000de8 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	2200      	movs	r2, #0
 8000de6:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	4618      	mov	r0, r3
 8000dee:	f001 feba 	bl	8002b66 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	603b      	str	r3, [r7, #0]
 8000df8:	687e      	ldr	r6, [r7, #4]
 8000dfa:	466d      	mov	r5, sp
 8000dfc:	f106 0410 	add.w	r4, r6, #16
 8000e00:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000e02:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000e04:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000e06:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000e08:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000e0c:	e885 0003 	stmia.w	r5, {r0, r1}
 8000e10:	1d33      	adds	r3, r6, #4
 8000e12:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000e14:	6838      	ldr	r0, [r7, #0]
 8000e16:	f001 fd91 	bl	800293c <USB_CoreInit>
 8000e1a:	4603      	mov	r3, r0
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	d005      	beq.n	8000e2c <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	2202      	movs	r2, #2
 8000e24:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8000e28:	2301      	movs	r3, #1
 8000e2a:	e0d0      	b.n	8000fce <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	2100      	movs	r1, #0
 8000e32:	4618      	mov	r0, r3
 8000e34:	f001 fea8 	bl	8002b88 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000e38:	2300      	movs	r3, #0
 8000e3a:	73fb      	strb	r3, [r7, #15]
 8000e3c:	e04a      	b.n	8000ed4 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8000e3e:	7bfa      	ldrb	r2, [r7, #15]
 8000e40:	6879      	ldr	r1, [r7, #4]
 8000e42:	4613      	mov	r3, r2
 8000e44:	00db      	lsls	r3, r3, #3
 8000e46:	1a9b      	subs	r3, r3, r2
 8000e48:	009b      	lsls	r3, r3, #2
 8000e4a:	440b      	add	r3, r1
 8000e4c:	333d      	adds	r3, #61	; 0x3d
 8000e4e:	2201      	movs	r2, #1
 8000e50:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8000e52:	7bfa      	ldrb	r2, [r7, #15]
 8000e54:	6879      	ldr	r1, [r7, #4]
 8000e56:	4613      	mov	r3, r2
 8000e58:	00db      	lsls	r3, r3, #3
 8000e5a:	1a9b      	subs	r3, r3, r2
 8000e5c:	009b      	lsls	r3, r3, #2
 8000e5e:	440b      	add	r3, r1
 8000e60:	333c      	adds	r3, #60	; 0x3c
 8000e62:	7bfa      	ldrb	r2, [r7, #15]
 8000e64:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8000e66:	7bfa      	ldrb	r2, [r7, #15]
 8000e68:	7bfb      	ldrb	r3, [r7, #15]
 8000e6a:	b298      	uxth	r0, r3
 8000e6c:	6879      	ldr	r1, [r7, #4]
 8000e6e:	4613      	mov	r3, r2
 8000e70:	00db      	lsls	r3, r3, #3
 8000e72:	1a9b      	subs	r3, r3, r2
 8000e74:	009b      	lsls	r3, r3, #2
 8000e76:	440b      	add	r3, r1
 8000e78:	3342      	adds	r3, #66	; 0x42
 8000e7a:	4602      	mov	r2, r0
 8000e7c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8000e7e:	7bfa      	ldrb	r2, [r7, #15]
 8000e80:	6879      	ldr	r1, [r7, #4]
 8000e82:	4613      	mov	r3, r2
 8000e84:	00db      	lsls	r3, r3, #3
 8000e86:	1a9b      	subs	r3, r3, r2
 8000e88:	009b      	lsls	r3, r3, #2
 8000e8a:	440b      	add	r3, r1
 8000e8c:	333f      	adds	r3, #63	; 0x3f
 8000e8e:	2200      	movs	r2, #0
 8000e90:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8000e92:	7bfa      	ldrb	r2, [r7, #15]
 8000e94:	6879      	ldr	r1, [r7, #4]
 8000e96:	4613      	mov	r3, r2
 8000e98:	00db      	lsls	r3, r3, #3
 8000e9a:	1a9b      	subs	r3, r3, r2
 8000e9c:	009b      	lsls	r3, r3, #2
 8000e9e:	440b      	add	r3, r1
 8000ea0:	3344      	adds	r3, #68	; 0x44
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8000ea6:	7bfa      	ldrb	r2, [r7, #15]
 8000ea8:	6879      	ldr	r1, [r7, #4]
 8000eaa:	4613      	mov	r3, r2
 8000eac:	00db      	lsls	r3, r3, #3
 8000eae:	1a9b      	subs	r3, r3, r2
 8000eb0:	009b      	lsls	r3, r3, #2
 8000eb2:	440b      	add	r3, r1
 8000eb4:	3348      	adds	r3, #72	; 0x48
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8000eba:	7bfa      	ldrb	r2, [r7, #15]
 8000ebc:	6879      	ldr	r1, [r7, #4]
 8000ebe:	4613      	mov	r3, r2
 8000ec0:	00db      	lsls	r3, r3, #3
 8000ec2:	1a9b      	subs	r3, r3, r2
 8000ec4:	009b      	lsls	r3, r3, #2
 8000ec6:	440b      	add	r3, r1
 8000ec8:	3350      	adds	r3, #80	; 0x50
 8000eca:	2200      	movs	r2, #0
 8000ecc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000ece:	7bfb      	ldrb	r3, [r7, #15]
 8000ed0:	3301      	adds	r3, #1
 8000ed2:	73fb      	strb	r3, [r7, #15]
 8000ed4:	7bfa      	ldrb	r2, [r7, #15]
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	685b      	ldr	r3, [r3, #4]
 8000eda:	429a      	cmp	r2, r3
 8000edc:	d3af      	bcc.n	8000e3e <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000ede:	2300      	movs	r3, #0
 8000ee0:	73fb      	strb	r3, [r7, #15]
 8000ee2:	e044      	b.n	8000f6e <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8000ee4:	7bfa      	ldrb	r2, [r7, #15]
 8000ee6:	6879      	ldr	r1, [r7, #4]
 8000ee8:	4613      	mov	r3, r2
 8000eea:	00db      	lsls	r3, r3, #3
 8000eec:	1a9b      	subs	r3, r3, r2
 8000eee:	009b      	lsls	r3, r3, #2
 8000ef0:	440b      	add	r3, r1
 8000ef2:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8000efa:	7bfa      	ldrb	r2, [r7, #15]
 8000efc:	6879      	ldr	r1, [r7, #4]
 8000efe:	4613      	mov	r3, r2
 8000f00:	00db      	lsls	r3, r3, #3
 8000f02:	1a9b      	subs	r3, r3, r2
 8000f04:	009b      	lsls	r3, r3, #2
 8000f06:	440b      	add	r3, r1
 8000f08:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8000f0c:	7bfa      	ldrb	r2, [r7, #15]
 8000f0e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8000f10:	7bfa      	ldrb	r2, [r7, #15]
 8000f12:	6879      	ldr	r1, [r7, #4]
 8000f14:	4613      	mov	r3, r2
 8000f16:	00db      	lsls	r3, r3, #3
 8000f18:	1a9b      	subs	r3, r3, r2
 8000f1a:	009b      	lsls	r3, r3, #2
 8000f1c:	440b      	add	r3, r1
 8000f1e:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8000f22:	2200      	movs	r2, #0
 8000f24:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8000f26:	7bfa      	ldrb	r2, [r7, #15]
 8000f28:	6879      	ldr	r1, [r7, #4]
 8000f2a:	4613      	mov	r3, r2
 8000f2c:	00db      	lsls	r3, r3, #3
 8000f2e:	1a9b      	subs	r3, r3, r2
 8000f30:	009b      	lsls	r3, r3, #2
 8000f32:	440b      	add	r3, r1
 8000f34:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8000f38:	2200      	movs	r2, #0
 8000f3a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8000f3c:	7bfa      	ldrb	r2, [r7, #15]
 8000f3e:	6879      	ldr	r1, [r7, #4]
 8000f40:	4613      	mov	r3, r2
 8000f42:	00db      	lsls	r3, r3, #3
 8000f44:	1a9b      	subs	r3, r3, r2
 8000f46:	009b      	lsls	r3, r3, #2
 8000f48:	440b      	add	r3, r1
 8000f4a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8000f4e:	2200      	movs	r2, #0
 8000f50:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8000f52:	7bfa      	ldrb	r2, [r7, #15]
 8000f54:	6879      	ldr	r1, [r7, #4]
 8000f56:	4613      	mov	r3, r2
 8000f58:	00db      	lsls	r3, r3, #3
 8000f5a:	1a9b      	subs	r3, r3, r2
 8000f5c:	009b      	lsls	r3, r3, #2
 8000f5e:	440b      	add	r3, r1
 8000f60:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8000f64:	2200      	movs	r2, #0
 8000f66:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000f68:	7bfb      	ldrb	r3, [r7, #15]
 8000f6a:	3301      	adds	r3, #1
 8000f6c:	73fb      	strb	r3, [r7, #15]
 8000f6e:	7bfa      	ldrb	r2, [r7, #15]
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	685b      	ldr	r3, [r3, #4]
 8000f74:	429a      	cmp	r2, r3
 8000f76:	d3b5      	bcc.n	8000ee4 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	603b      	str	r3, [r7, #0]
 8000f7e:	687e      	ldr	r6, [r7, #4]
 8000f80:	466d      	mov	r5, sp
 8000f82:	f106 0410 	add.w	r4, r6, #16
 8000f86:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000f88:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000f8a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000f8c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000f8e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000f92:	e885 0003 	stmia.w	r5, {r0, r1}
 8000f96:	1d33      	adds	r3, r6, #4
 8000f98:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000f9a:	6838      	ldr	r0, [r7, #0]
 8000f9c:	f001 fe40 	bl	8002c20 <USB_DevInit>
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d005      	beq.n	8000fb2 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	2202      	movs	r2, #2
 8000faa:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8000fae:	2301      	movs	r3, #1
 8000fb0:	e00d      	b.n	8000fce <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	2201      	movs	r2, #1
 8000fbe:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	f002 febc 	bl	8003d44 <USB_DevDisconnect>

  return HAL_OK;
 8000fcc:	2300      	movs	r3, #0
}
 8000fce:	4618      	mov	r0, r3
 8000fd0:	3714      	adds	r7, #20
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000fd6 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8000fd6:	b580      	push	{r7, lr}
 8000fd8:	b084      	sub	sp, #16
 8000fda:	af00      	add	r7, sp, #0
 8000fdc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8000fea:	2b01      	cmp	r3, #1
 8000fec:	d101      	bne.n	8000ff2 <HAL_PCD_Start+0x1c>
 8000fee:	2302      	movs	r3, #2
 8000ff0:	e020      	b.n	8001034 <HAL_PCD_Start+0x5e>
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	2201      	movs	r2, #1
 8000ff6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ffe:	2b01      	cmp	r3, #1
 8001000:	d109      	bne.n	8001016 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001006:	2b01      	cmp	r3, #1
 8001008:	d005      	beq.n	8001016 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800100a:	68fb      	ldr	r3, [r7, #12]
 800100c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800100e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001012:	68fb      	ldr	r3, [r7, #12]
 8001014:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	4618      	mov	r0, r3
 800101c:	f001 fd92 	bl	8002b44 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	4618      	mov	r0, r3
 8001026:	f002 fe6c 	bl	8003d02 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	2200      	movs	r2, #0
 800102e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8001032:	2300      	movs	r3, #0
}
 8001034:	4618      	mov	r0, r3
 8001036:	3710      	adds	r7, #16
 8001038:	46bd      	mov	sp, r7
 800103a:	bd80      	pop	{r7, pc}

0800103c <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800103c:	b590      	push	{r4, r7, lr}
 800103e:	b08d      	sub	sp, #52	; 0x34
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800104a:	6a3b      	ldr	r3, [r7, #32]
 800104c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t temp;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	4618      	mov	r0, r3
 8001054:	f002 ff2a 	bl	8003eac <USB_GetMode>
 8001058:	4603      	mov	r3, r0
 800105a:	2b00      	cmp	r3, #0
 800105c:	f040 839d 	bne.w	800179a <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	4618      	mov	r0, r3
 8001066:	f002 fe8e 	bl	8003d86 <USB_ReadInterrupts>
 800106a:	4603      	mov	r3, r0
 800106c:	2b00      	cmp	r3, #0
 800106e:	f000 8393 	beq.w	8001798 <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	4618      	mov	r0, r3
 8001078:	f002 fe85 	bl	8003d86 <USB_ReadInterrupts>
 800107c:	4603      	mov	r3, r0
 800107e:	f003 0302 	and.w	r3, r3, #2
 8001082:	2b02      	cmp	r3, #2
 8001084:	d107      	bne.n	8001096 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	695a      	ldr	r2, [r3, #20]
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	f002 0202 	and.w	r2, r2, #2
 8001094:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	4618      	mov	r0, r3
 800109c:	f002 fe73 	bl	8003d86 <USB_ReadInterrupts>
 80010a0:	4603      	mov	r3, r0
 80010a2:	f003 0310 	and.w	r3, r3, #16
 80010a6:	2b10      	cmp	r3, #16
 80010a8:	d161      	bne.n	800116e <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	699a      	ldr	r2, [r3, #24]
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	f022 0210 	bic.w	r2, r2, #16
 80010b8:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 80010ba:	6a3b      	ldr	r3, [r7, #32]
 80010bc:	6a1b      	ldr	r3, [r3, #32]
 80010be:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 80010c0:	69bb      	ldr	r3, [r7, #24]
 80010c2:	f003 020f 	and.w	r2, r3, #15
 80010c6:	4613      	mov	r3, r2
 80010c8:	00db      	lsls	r3, r3, #3
 80010ca:	1a9b      	subs	r3, r3, r2
 80010cc:	009b      	lsls	r3, r3, #2
 80010ce:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80010d2:	687a      	ldr	r2, [r7, #4]
 80010d4:	4413      	add	r3, r2
 80010d6:	3304      	adds	r3, #4
 80010d8:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80010da:	69bb      	ldr	r3, [r7, #24]
 80010dc:	0c5b      	lsrs	r3, r3, #17
 80010de:	f003 030f 	and.w	r3, r3, #15
 80010e2:	2b02      	cmp	r3, #2
 80010e4:	d124      	bne.n	8001130 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 80010e6:	69ba      	ldr	r2, [r7, #24]
 80010e8:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80010ec:	4013      	ands	r3, r2
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d035      	beq.n	800115e <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80010f2:	697b      	ldr	r3, [r7, #20]
 80010f4:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 80010f6:	69bb      	ldr	r3, [r7, #24]
 80010f8:	091b      	lsrs	r3, r3, #4
 80010fa:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80010fc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001100:	b29b      	uxth	r3, r3
 8001102:	461a      	mov	r2, r3
 8001104:	6a38      	ldr	r0, [r7, #32]
 8001106:	f002 fcaa 	bl	8003a5e <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800110a:	697b      	ldr	r3, [r7, #20]
 800110c:	68da      	ldr	r2, [r3, #12]
 800110e:	69bb      	ldr	r3, [r7, #24]
 8001110:	091b      	lsrs	r3, r3, #4
 8001112:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001116:	441a      	add	r2, r3
 8001118:	697b      	ldr	r3, [r7, #20]
 800111a:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800111c:	697b      	ldr	r3, [r7, #20]
 800111e:	699a      	ldr	r2, [r3, #24]
 8001120:	69bb      	ldr	r3, [r7, #24]
 8001122:	091b      	lsrs	r3, r3, #4
 8001124:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001128:	441a      	add	r2, r3
 800112a:	697b      	ldr	r3, [r7, #20]
 800112c:	619a      	str	r2, [r3, #24]
 800112e:	e016      	b.n	800115e <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8001130:	69bb      	ldr	r3, [r7, #24]
 8001132:	0c5b      	lsrs	r3, r3, #17
 8001134:	f003 030f 	and.w	r3, r3, #15
 8001138:	2b06      	cmp	r3, #6
 800113a:	d110      	bne.n	800115e <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001142:	2208      	movs	r2, #8
 8001144:	4619      	mov	r1, r3
 8001146:	6a38      	ldr	r0, [r7, #32]
 8001148:	f002 fc89 	bl	8003a5e <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800114c:	697b      	ldr	r3, [r7, #20]
 800114e:	699a      	ldr	r2, [r3, #24]
 8001150:	69bb      	ldr	r3, [r7, #24]
 8001152:	091b      	lsrs	r3, r3, #4
 8001154:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001158:	441a      	add	r2, r3
 800115a:	697b      	ldr	r3, [r7, #20]
 800115c:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	699a      	ldr	r2, [r3, #24]
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	f042 0210 	orr.w	r2, r2, #16
 800116c:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	4618      	mov	r0, r3
 8001174:	f002 fe07 	bl	8003d86 <USB_ReadInterrupts>
 8001178:	4603      	mov	r3, r0
 800117a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800117e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8001182:	d16e      	bne.n	8001262 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8001184:	2300      	movs	r3, #0
 8001186:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	4618      	mov	r0, r3
 800118e:	f002 fe0d 	bl	8003dac <USB_ReadDevAllOutEpInterrupt>
 8001192:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8001194:	e062      	b.n	800125c <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8001196:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001198:	f003 0301 	and.w	r3, r3, #1
 800119c:	2b00      	cmp	r3, #0
 800119e:	d057      	beq.n	8001250 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80011a6:	b2d2      	uxtb	r2, r2
 80011a8:	4611      	mov	r1, r2
 80011aa:	4618      	mov	r0, r3
 80011ac:	f002 fe32 	bl	8003e14 <USB_ReadDevOutEPInterrupt>
 80011b0:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80011b2:	693b      	ldr	r3, [r7, #16]
 80011b4:	f003 0301 	and.w	r3, r3, #1
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d00c      	beq.n	80011d6 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80011bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011be:	015a      	lsls	r2, r3, #5
 80011c0:	69fb      	ldr	r3, [r7, #28]
 80011c2:	4413      	add	r3, r2
 80011c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80011c8:	461a      	mov	r2, r3
 80011ca:	2301      	movs	r3, #1
 80011cc:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80011ce:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80011d0:	6878      	ldr	r0, [r7, #4]
 80011d2:	f000 fddd 	bl	8001d90 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80011d6:	693b      	ldr	r3, [r7, #16]
 80011d8:	f003 0308 	and.w	r3, r3, #8
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d00c      	beq.n	80011fa <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80011e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011e2:	015a      	lsls	r2, r3, #5
 80011e4:	69fb      	ldr	r3, [r7, #28]
 80011e6:	4413      	add	r3, r2
 80011e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80011ec:	461a      	mov	r2, r3
 80011ee:	2308      	movs	r3, #8
 80011f0:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80011f2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80011f4:	6878      	ldr	r0, [r7, #4]
 80011f6:	f000 fed7 	bl	8001fa8 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80011fa:	693b      	ldr	r3, [r7, #16]
 80011fc:	f003 0310 	and.w	r3, r3, #16
 8001200:	2b00      	cmp	r3, #0
 8001202:	d008      	beq.n	8001216 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8001204:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001206:	015a      	lsls	r2, r3, #5
 8001208:	69fb      	ldr	r3, [r7, #28]
 800120a:	4413      	add	r3, r2
 800120c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001210:	461a      	mov	r2, r3
 8001212:	2310      	movs	r3, #16
 8001214:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001216:	693b      	ldr	r3, [r7, #16]
 8001218:	f003 0320 	and.w	r3, r3, #32
 800121c:	2b00      	cmp	r3, #0
 800121e:	d008      	beq.n	8001232 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001220:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001222:	015a      	lsls	r2, r3, #5
 8001224:	69fb      	ldr	r3, [r7, #28]
 8001226:	4413      	add	r3, r2
 8001228:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800122c:	461a      	mov	r2, r3
 800122e:	2320      	movs	r3, #32
 8001230:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8001232:	693b      	ldr	r3, [r7, #16]
 8001234:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001238:	2b00      	cmp	r3, #0
 800123a:	d009      	beq.n	8001250 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800123c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800123e:	015a      	lsls	r2, r3, #5
 8001240:	69fb      	ldr	r3, [r7, #28]
 8001242:	4413      	add	r3, r2
 8001244:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001248:	461a      	mov	r2, r3
 800124a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800124e:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8001250:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001252:	3301      	adds	r3, #1
 8001254:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001256:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001258:	085b      	lsrs	r3, r3, #1
 800125a:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800125c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800125e:	2b00      	cmp	r3, #0
 8001260:	d199      	bne.n	8001196 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	4618      	mov	r0, r3
 8001268:	f002 fd8d 	bl	8003d86 <USB_ReadInterrupts>
 800126c:	4603      	mov	r3, r0
 800126e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001272:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001276:	f040 80c0 	bne.w	80013fa <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	4618      	mov	r0, r3
 8001280:	f002 fdae 	bl	8003de0 <USB_ReadDevAllInEpInterrupt>
 8001284:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8001286:	2300      	movs	r3, #0
 8001288:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 800128a:	e0b2      	b.n	80013f2 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800128c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800128e:	f003 0301 	and.w	r3, r3, #1
 8001292:	2b00      	cmp	r3, #0
 8001294:	f000 80a7 	beq.w	80013e6 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800129e:	b2d2      	uxtb	r2, r2
 80012a0:	4611      	mov	r1, r2
 80012a2:	4618      	mov	r0, r3
 80012a4:	f002 fdd4 	bl	8003e50 <USB_ReadDevInEPInterrupt>
 80012a8:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80012aa:	693b      	ldr	r3, [r7, #16]
 80012ac:	f003 0301 	and.w	r3, r3, #1
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d057      	beq.n	8001364 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80012b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012b6:	f003 030f 	and.w	r3, r3, #15
 80012ba:	2201      	movs	r2, #1
 80012bc:	fa02 f303 	lsl.w	r3, r2, r3
 80012c0:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80012c2:	69fb      	ldr	r3, [r7, #28]
 80012c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80012c8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80012ca:	68fb      	ldr	r3, [r7, #12]
 80012cc:	43db      	mvns	r3, r3
 80012ce:	69f9      	ldr	r1, [r7, #28]
 80012d0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80012d4:	4013      	ands	r3, r2
 80012d6:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80012d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012da:	015a      	lsls	r2, r3, #5
 80012dc:	69fb      	ldr	r3, [r7, #28]
 80012de:	4413      	add	r3, r2
 80012e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80012e4:	461a      	mov	r2, r3
 80012e6:	2301      	movs	r3, #1
 80012e8:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	691b      	ldr	r3, [r3, #16]
 80012ee:	2b01      	cmp	r3, #1
 80012f0:	d132      	bne.n	8001358 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80012f2:	6879      	ldr	r1, [r7, #4]
 80012f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80012f6:	4613      	mov	r3, r2
 80012f8:	00db      	lsls	r3, r3, #3
 80012fa:	1a9b      	subs	r3, r3, r2
 80012fc:	009b      	lsls	r3, r3, #2
 80012fe:	440b      	add	r3, r1
 8001300:	3348      	adds	r3, #72	; 0x48
 8001302:	6819      	ldr	r1, [r3, #0]
 8001304:	6878      	ldr	r0, [r7, #4]
 8001306:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001308:	4613      	mov	r3, r2
 800130a:	00db      	lsls	r3, r3, #3
 800130c:	1a9b      	subs	r3, r3, r2
 800130e:	009b      	lsls	r3, r3, #2
 8001310:	4403      	add	r3, r0
 8001312:	3344      	adds	r3, #68	; 0x44
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	4419      	add	r1, r3
 8001318:	6878      	ldr	r0, [r7, #4]
 800131a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800131c:	4613      	mov	r3, r2
 800131e:	00db      	lsls	r3, r3, #3
 8001320:	1a9b      	subs	r3, r3, r2
 8001322:	009b      	lsls	r3, r3, #2
 8001324:	4403      	add	r3, r0
 8001326:	3348      	adds	r3, #72	; 0x48
 8001328:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800132a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800132c:	2b00      	cmp	r3, #0
 800132e:	d113      	bne.n	8001358 <HAL_PCD_IRQHandler+0x31c>
 8001330:	6879      	ldr	r1, [r7, #4]
 8001332:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001334:	4613      	mov	r3, r2
 8001336:	00db      	lsls	r3, r3, #3
 8001338:	1a9b      	subs	r3, r3, r2
 800133a:	009b      	lsls	r3, r3, #2
 800133c:	440b      	add	r3, r1
 800133e:	3350      	adds	r3, #80	; 0x50
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	2b00      	cmp	r3, #0
 8001344:	d108      	bne.n	8001358 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	6818      	ldr	r0, [r3, #0]
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001350:	461a      	mov	r2, r3
 8001352:	2101      	movs	r1, #1
 8001354:	f002 fddc 	bl	8003f10 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8001358:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800135a:	b2db      	uxtb	r3, r3
 800135c:	4619      	mov	r1, r3
 800135e:	6878      	ldr	r0, [r7, #4]
 8001360:	f005 ffb9 	bl	80072d6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8001364:	693b      	ldr	r3, [r7, #16]
 8001366:	f003 0308 	and.w	r3, r3, #8
 800136a:	2b00      	cmp	r3, #0
 800136c:	d008      	beq.n	8001380 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800136e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001370:	015a      	lsls	r2, r3, #5
 8001372:	69fb      	ldr	r3, [r7, #28]
 8001374:	4413      	add	r3, r2
 8001376:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800137a:	461a      	mov	r2, r3
 800137c:	2308      	movs	r3, #8
 800137e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8001380:	693b      	ldr	r3, [r7, #16]
 8001382:	f003 0310 	and.w	r3, r3, #16
 8001386:	2b00      	cmp	r3, #0
 8001388:	d008      	beq.n	800139c <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800138a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800138c:	015a      	lsls	r2, r3, #5
 800138e:	69fb      	ldr	r3, [r7, #28]
 8001390:	4413      	add	r3, r2
 8001392:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001396:	461a      	mov	r2, r3
 8001398:	2310      	movs	r3, #16
 800139a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800139c:	693b      	ldr	r3, [r7, #16]
 800139e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d008      	beq.n	80013b8 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80013a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013a8:	015a      	lsls	r2, r3, #5
 80013aa:	69fb      	ldr	r3, [r7, #28]
 80013ac:	4413      	add	r3, r2
 80013ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80013b2:	461a      	mov	r2, r3
 80013b4:	2340      	movs	r3, #64	; 0x40
 80013b6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80013b8:	693b      	ldr	r3, [r7, #16]
 80013ba:	f003 0302 	and.w	r3, r3, #2
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d008      	beq.n	80013d4 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80013c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013c4:	015a      	lsls	r2, r3, #5
 80013c6:	69fb      	ldr	r3, [r7, #28]
 80013c8:	4413      	add	r3, r2
 80013ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80013ce:	461a      	mov	r2, r3
 80013d0:	2302      	movs	r3, #2
 80013d2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80013d4:	693b      	ldr	r3, [r7, #16]
 80013d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d003      	beq.n	80013e6 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80013de:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80013e0:	6878      	ldr	r0, [r7, #4]
 80013e2:	f000 fc48 	bl	8001c76 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80013e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013e8:	3301      	adds	r3, #1
 80013ea:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80013ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013ee:	085b      	lsrs	r3, r3, #1
 80013f0:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80013f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	f47f af49 	bne.w	800128c <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	4618      	mov	r0, r3
 8001400:	f002 fcc1 	bl	8003d86 <USB_ReadInterrupts>
 8001404:	4603      	mov	r3, r0
 8001406:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800140a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800140e:	d122      	bne.n	8001456 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001410:	69fb      	ldr	r3, [r7, #28]
 8001412:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001416:	685b      	ldr	r3, [r3, #4]
 8001418:	69fa      	ldr	r2, [r7, #28]
 800141a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800141e:	f023 0301 	bic.w	r3, r3, #1
 8001422:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 800142a:	2b01      	cmp	r3, #1
 800142c:	d108      	bne.n	8001440 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	2200      	movs	r2, #0
 8001432:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001436:	2100      	movs	r1, #0
 8001438:	6878      	ldr	r0, [r7, #4]
 800143a:	f000 fe53 	bl	80020e4 <HAL_PCDEx_LPM_Callback>
 800143e:	e002      	b.n	8001446 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8001440:	6878      	ldr	r0, [r7, #4]
 8001442:	f005 ffb5 	bl	80073b0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	695a      	ldr	r2, [r3, #20]
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8001454:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	4618      	mov	r0, r3
 800145c:	f002 fc93 	bl	8003d86 <USB_ReadInterrupts>
 8001460:	4603      	mov	r3, r0
 8001462:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001466:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800146a:	d112      	bne.n	8001492 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800146c:	69fb      	ldr	r3, [r7, #28]
 800146e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001472:	689b      	ldr	r3, [r3, #8]
 8001474:	f003 0301 	and.w	r3, r3, #1
 8001478:	2b01      	cmp	r3, #1
 800147a:	d102      	bne.n	8001482 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800147c:	6878      	ldr	r0, [r7, #4]
 800147e:	f005 ff71 	bl	8007364 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	695a      	ldr	r2, [r3, #20]
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8001490:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	4618      	mov	r0, r3
 8001498:	f002 fc75 	bl	8003d86 <USB_ReadInterrupts>
 800149c:	4603      	mov	r3, r0
 800149e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80014a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80014a6:	f040 80c7 	bne.w	8001638 <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80014aa:	69fb      	ldr	r3, [r7, #28]
 80014ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80014b0:	685b      	ldr	r3, [r3, #4]
 80014b2:	69fa      	ldr	r2, [r7, #28]
 80014b4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80014b8:	f023 0301 	bic.w	r3, r3, #1
 80014bc:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	2110      	movs	r1, #16
 80014c4:	4618      	mov	r0, r3
 80014c6:	f001 fd0f 	bl	8002ee8 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80014ca:	2300      	movs	r3, #0
 80014cc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80014ce:	e056      	b.n	800157e <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80014d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80014d2:	015a      	lsls	r2, r3, #5
 80014d4:	69fb      	ldr	r3, [r7, #28]
 80014d6:	4413      	add	r3, r2
 80014d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80014dc:	461a      	mov	r2, r3
 80014de:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80014e2:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80014e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80014e6:	015a      	lsls	r2, r3, #5
 80014e8:	69fb      	ldr	r3, [r7, #28]
 80014ea:	4413      	add	r3, r2
 80014ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80014f4:	0151      	lsls	r1, r2, #5
 80014f6:	69fa      	ldr	r2, [r7, #28]
 80014f8:	440a      	add	r2, r1
 80014fa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80014fe:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001502:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8001504:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001506:	015a      	lsls	r2, r3, #5
 8001508:	69fb      	ldr	r3, [r7, #28]
 800150a:	4413      	add	r3, r2
 800150c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001514:	0151      	lsls	r1, r2, #5
 8001516:	69fa      	ldr	r2, [r7, #28]
 8001518:	440a      	add	r2, r1
 800151a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800151e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001522:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8001524:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001526:	015a      	lsls	r2, r3, #5
 8001528:	69fb      	ldr	r3, [r7, #28]
 800152a:	4413      	add	r3, r2
 800152c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001530:	461a      	mov	r2, r3
 8001532:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001536:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8001538:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800153a:	015a      	lsls	r2, r3, #5
 800153c:	69fb      	ldr	r3, [r7, #28]
 800153e:	4413      	add	r3, r2
 8001540:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001548:	0151      	lsls	r1, r2, #5
 800154a:	69fa      	ldr	r2, [r7, #28]
 800154c:	440a      	add	r2, r1
 800154e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001552:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001556:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8001558:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800155a:	015a      	lsls	r2, r3, #5
 800155c:	69fb      	ldr	r3, [r7, #28]
 800155e:	4413      	add	r3, r2
 8001560:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001568:	0151      	lsls	r1, r2, #5
 800156a:	69fa      	ldr	r2, [r7, #28]
 800156c:	440a      	add	r2, r1
 800156e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001572:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001576:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001578:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800157a:	3301      	adds	r3, #1
 800157c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	685b      	ldr	r3, [r3, #4]
 8001582:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001584:	429a      	cmp	r2, r3
 8001586:	d3a3      	bcc.n	80014d0 <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8001588:	69fb      	ldr	r3, [r7, #28]
 800158a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800158e:	69db      	ldr	r3, [r3, #28]
 8001590:	69fa      	ldr	r2, [r7, #28]
 8001592:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001596:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800159a:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d016      	beq.n	80015d2 <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80015a4:	69fb      	ldr	r3, [r7, #28]
 80015a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80015aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80015ae:	69fa      	ldr	r2, [r7, #28]
 80015b0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80015b4:	f043 030b 	orr.w	r3, r3, #11
 80015b8:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80015bc:	69fb      	ldr	r3, [r7, #28]
 80015be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80015c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015c4:	69fa      	ldr	r2, [r7, #28]
 80015c6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80015ca:	f043 030b 	orr.w	r3, r3, #11
 80015ce:	6453      	str	r3, [r2, #68]	; 0x44
 80015d0:	e015      	b.n	80015fe <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80015d2:	69fb      	ldr	r3, [r7, #28]
 80015d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80015d8:	695b      	ldr	r3, [r3, #20]
 80015da:	69fa      	ldr	r2, [r7, #28]
 80015dc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80015e0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80015e4:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80015e8:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80015ea:	69fb      	ldr	r3, [r7, #28]
 80015ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80015f0:	691b      	ldr	r3, [r3, #16]
 80015f2:	69fa      	ldr	r2, [r7, #28]
 80015f4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80015f8:	f043 030b 	orr.w	r3, r3, #11
 80015fc:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80015fe:	69fb      	ldr	r3, [r7, #28]
 8001600:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	69fa      	ldr	r2, [r7, #28]
 8001608:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800160c:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8001610:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	6818      	ldr	r0, [r3, #0]
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	691b      	ldr	r3, [r3, #16]
 800161a:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001622:	461a      	mov	r2, r3
 8001624:	f002 fc74 	bl	8003f10 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	695a      	ldr	r2, [r3, #20]
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8001636:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	4618      	mov	r0, r3
 800163e:	f002 fba2 	bl	8003d86 <USB_ReadInterrupts>
 8001642:	4603      	mov	r3, r0
 8001644:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001648:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800164c:	d124      	bne.n	8001698 <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	4618      	mov	r0, r3
 8001654:	f002 fc38 	bl	8003ec8 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	4618      	mov	r0, r3
 800165e:	f001 fca0 	bl	8002fa2 <USB_GetDevSpeed>
 8001662:	4603      	mov	r3, r0
 8001664:	461a      	mov	r2, r3
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681c      	ldr	r4, [r3, #0]
 800166e:	f001 f959 	bl	8002924 <HAL_RCC_GetHCLKFreq>
 8001672:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001678:	b2db      	uxtb	r3, r3
 800167a:	461a      	mov	r2, r3
 800167c:	4620      	mov	r0, r4
 800167e:	f001 f9bf 	bl	8002a00 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8001682:	6878      	ldr	r0, [r7, #4]
 8001684:	f005 fe4f 	bl	8007326 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	695a      	ldr	r2, [r3, #20]
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8001696:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	4618      	mov	r0, r3
 800169e:	f002 fb72 	bl	8003d86 <USB_ReadInterrupts>
 80016a2:	4603      	mov	r3, r0
 80016a4:	f003 0308 	and.w	r3, r3, #8
 80016a8:	2b08      	cmp	r3, #8
 80016aa:	d10a      	bne.n	80016c2 <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80016ac:	6878      	ldr	r0, [r7, #4]
 80016ae:	f005 fe2c 	bl	800730a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	695a      	ldr	r2, [r3, #20]
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	f002 0208 	and.w	r2, r2, #8
 80016c0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	4618      	mov	r0, r3
 80016c8:	f002 fb5d 	bl	8003d86 <USB_ReadInterrupts>
 80016cc:	4603      	mov	r3, r0
 80016ce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80016d2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80016d6:	d10f      	bne.n	80016f8 <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80016d8:	2300      	movs	r3, #0
 80016da:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80016dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016de:	b2db      	uxtb	r3, r3
 80016e0:	4619      	mov	r1, r3
 80016e2:	6878      	ldr	r0, [r7, #4]
 80016e4:	f005 fe84 	bl	80073f0 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	695a      	ldr	r2, [r3, #20]
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80016f6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	4618      	mov	r0, r3
 80016fe:	f002 fb42 	bl	8003d86 <USB_ReadInterrupts>
 8001702:	4603      	mov	r3, r0
 8001704:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001708:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800170c:	d10f      	bne.n	800172e <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 800170e:	2300      	movs	r3, #0
 8001710:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8001712:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001714:	b2db      	uxtb	r3, r3
 8001716:	4619      	mov	r1, r3
 8001718:	6878      	ldr	r0, [r7, #4]
 800171a:	f005 fe57 	bl	80073cc <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	695a      	ldr	r2, [r3, #20]
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800172c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	4618      	mov	r0, r3
 8001734:	f002 fb27 	bl	8003d86 <USB_ReadInterrupts>
 8001738:	4603      	mov	r3, r0
 800173a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800173e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001742:	d10a      	bne.n	800175a <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8001744:	6878      	ldr	r0, [r7, #4]
 8001746:	f005 fe65 	bl	8007414 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	695a      	ldr	r2, [r3, #20]
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8001758:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	4618      	mov	r0, r3
 8001760:	f002 fb11 	bl	8003d86 <USB_ReadInterrupts>
 8001764:	4603      	mov	r3, r0
 8001766:	f003 0304 	and.w	r3, r3, #4
 800176a:	2b04      	cmp	r3, #4
 800176c:	d115      	bne.n	800179a <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	685b      	ldr	r3, [r3, #4]
 8001774:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8001776:	69bb      	ldr	r3, [r7, #24]
 8001778:	f003 0304 	and.w	r3, r3, #4
 800177c:	2b00      	cmp	r3, #0
 800177e:	d002      	beq.n	8001786 <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8001780:	6878      	ldr	r0, [r7, #4]
 8001782:	f005 fe55 	bl	8007430 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	6859      	ldr	r1, [r3, #4]
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	69ba      	ldr	r2, [r7, #24]
 8001792:	430a      	orrs	r2, r1
 8001794:	605a      	str	r2, [r3, #4]
 8001796:	e000      	b.n	800179a <HAL_PCD_IRQHandler+0x75e>
      return;
 8001798:	bf00      	nop
    }
  }
}
 800179a:	3734      	adds	r7, #52	; 0x34
 800179c:	46bd      	mov	sp, r7
 800179e:	bd90      	pop	{r4, r7, pc}

080017a0 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b082      	sub	sp, #8
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
 80017a8:	460b      	mov	r3, r1
 80017aa:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80017b2:	2b01      	cmp	r3, #1
 80017b4:	d101      	bne.n	80017ba <HAL_PCD_SetAddress+0x1a>
 80017b6:	2302      	movs	r3, #2
 80017b8:	e013      	b.n	80017e2 <HAL_PCD_SetAddress+0x42>
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	2201      	movs	r2, #1
 80017be:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	78fa      	ldrb	r2, [r7, #3]
 80017c6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	78fa      	ldrb	r2, [r7, #3]
 80017d0:	4611      	mov	r1, r2
 80017d2:	4618      	mov	r0, r3
 80017d4:	f002 fa6f 	bl	8003cb6 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	2200      	movs	r2, #0
 80017dc:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80017e0:	2300      	movs	r3, #0
}
 80017e2:	4618      	mov	r0, r3
 80017e4:	3708      	adds	r7, #8
 80017e6:	46bd      	mov	sp, r7
 80017e8:	bd80      	pop	{r7, pc}

080017ea <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80017ea:	b580      	push	{r7, lr}
 80017ec:	b084      	sub	sp, #16
 80017ee:	af00      	add	r7, sp, #0
 80017f0:	6078      	str	r0, [r7, #4]
 80017f2:	4608      	mov	r0, r1
 80017f4:	4611      	mov	r1, r2
 80017f6:	461a      	mov	r2, r3
 80017f8:	4603      	mov	r3, r0
 80017fa:	70fb      	strb	r3, [r7, #3]
 80017fc:	460b      	mov	r3, r1
 80017fe:	803b      	strh	r3, [r7, #0]
 8001800:	4613      	mov	r3, r2
 8001802:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001804:	2300      	movs	r3, #0
 8001806:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001808:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800180c:	2b00      	cmp	r3, #0
 800180e:	da0f      	bge.n	8001830 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001810:	78fb      	ldrb	r3, [r7, #3]
 8001812:	f003 020f 	and.w	r2, r3, #15
 8001816:	4613      	mov	r3, r2
 8001818:	00db      	lsls	r3, r3, #3
 800181a:	1a9b      	subs	r3, r3, r2
 800181c:	009b      	lsls	r3, r3, #2
 800181e:	3338      	adds	r3, #56	; 0x38
 8001820:	687a      	ldr	r2, [r7, #4]
 8001822:	4413      	add	r3, r2
 8001824:	3304      	adds	r3, #4
 8001826:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	2201      	movs	r2, #1
 800182c:	705a      	strb	r2, [r3, #1]
 800182e:	e00f      	b.n	8001850 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001830:	78fb      	ldrb	r3, [r7, #3]
 8001832:	f003 020f 	and.w	r2, r3, #15
 8001836:	4613      	mov	r3, r2
 8001838:	00db      	lsls	r3, r3, #3
 800183a:	1a9b      	subs	r3, r3, r2
 800183c:	009b      	lsls	r3, r3, #2
 800183e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001842:	687a      	ldr	r2, [r7, #4]
 8001844:	4413      	add	r3, r2
 8001846:	3304      	adds	r3, #4
 8001848:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	2200      	movs	r2, #0
 800184e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001850:	78fb      	ldrb	r3, [r7, #3]
 8001852:	f003 030f 	and.w	r3, r3, #15
 8001856:	b2da      	uxtb	r2, r3
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800185c:	883a      	ldrh	r2, [r7, #0]
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	78ba      	ldrb	r2, [r7, #2]
 8001866:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	785b      	ldrb	r3, [r3, #1]
 800186c:	2b00      	cmp	r3, #0
 800186e:	d004      	beq.n	800187a <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	781b      	ldrb	r3, [r3, #0]
 8001874:	b29a      	uxth	r2, r3
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800187a:	78bb      	ldrb	r3, [r7, #2]
 800187c:	2b02      	cmp	r3, #2
 800187e:	d102      	bne.n	8001886 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	2200      	movs	r2, #0
 8001884:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800188c:	2b01      	cmp	r3, #1
 800188e:	d101      	bne.n	8001894 <HAL_PCD_EP_Open+0xaa>
 8001890:	2302      	movs	r3, #2
 8001892:	e00e      	b.n	80018b2 <HAL_PCD_EP_Open+0xc8>
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	2201      	movs	r2, #1
 8001898:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	68f9      	ldr	r1, [r7, #12]
 80018a2:	4618      	mov	r0, r3
 80018a4:	f001 fba2 	bl	8002fec <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	2200      	movs	r2, #0
 80018ac:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 80018b0:	7afb      	ldrb	r3, [r7, #11]
}
 80018b2:	4618      	mov	r0, r3
 80018b4:	3710      	adds	r7, #16
 80018b6:	46bd      	mov	sp, r7
 80018b8:	bd80      	pop	{r7, pc}

080018ba <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80018ba:	b580      	push	{r7, lr}
 80018bc:	b084      	sub	sp, #16
 80018be:	af00      	add	r7, sp, #0
 80018c0:	6078      	str	r0, [r7, #4]
 80018c2:	460b      	mov	r3, r1
 80018c4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80018c6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	da0f      	bge.n	80018ee <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80018ce:	78fb      	ldrb	r3, [r7, #3]
 80018d0:	f003 020f 	and.w	r2, r3, #15
 80018d4:	4613      	mov	r3, r2
 80018d6:	00db      	lsls	r3, r3, #3
 80018d8:	1a9b      	subs	r3, r3, r2
 80018da:	009b      	lsls	r3, r3, #2
 80018dc:	3338      	adds	r3, #56	; 0x38
 80018de:	687a      	ldr	r2, [r7, #4]
 80018e0:	4413      	add	r3, r2
 80018e2:	3304      	adds	r3, #4
 80018e4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	2201      	movs	r2, #1
 80018ea:	705a      	strb	r2, [r3, #1]
 80018ec:	e00f      	b.n	800190e <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80018ee:	78fb      	ldrb	r3, [r7, #3]
 80018f0:	f003 020f 	and.w	r2, r3, #15
 80018f4:	4613      	mov	r3, r2
 80018f6:	00db      	lsls	r3, r3, #3
 80018f8:	1a9b      	subs	r3, r3, r2
 80018fa:	009b      	lsls	r3, r3, #2
 80018fc:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001900:	687a      	ldr	r2, [r7, #4]
 8001902:	4413      	add	r3, r2
 8001904:	3304      	adds	r3, #4
 8001906:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	2200      	movs	r2, #0
 800190c:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800190e:	78fb      	ldrb	r3, [r7, #3]
 8001910:	f003 030f 	and.w	r3, r3, #15
 8001914:	b2da      	uxtb	r2, r3
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001920:	2b01      	cmp	r3, #1
 8001922:	d101      	bne.n	8001928 <HAL_PCD_EP_Close+0x6e>
 8001924:	2302      	movs	r3, #2
 8001926:	e00e      	b.n	8001946 <HAL_PCD_EP_Close+0x8c>
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	2201      	movs	r2, #1
 800192c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	68f9      	ldr	r1, [r7, #12]
 8001936:	4618      	mov	r0, r3
 8001938:	f001 fbe0 	bl	80030fc <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	2200      	movs	r2, #0
 8001940:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8001944:	2300      	movs	r3, #0
}
 8001946:	4618      	mov	r0, r3
 8001948:	3710      	adds	r7, #16
 800194a:	46bd      	mov	sp, r7
 800194c:	bd80      	pop	{r7, pc}

0800194e <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800194e:	b580      	push	{r7, lr}
 8001950:	b086      	sub	sp, #24
 8001952:	af00      	add	r7, sp, #0
 8001954:	60f8      	str	r0, [r7, #12]
 8001956:	607a      	str	r2, [r7, #4]
 8001958:	603b      	str	r3, [r7, #0]
 800195a:	460b      	mov	r3, r1
 800195c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800195e:	7afb      	ldrb	r3, [r7, #11]
 8001960:	f003 020f 	and.w	r2, r3, #15
 8001964:	4613      	mov	r3, r2
 8001966:	00db      	lsls	r3, r3, #3
 8001968:	1a9b      	subs	r3, r3, r2
 800196a:	009b      	lsls	r3, r3, #2
 800196c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001970:	68fa      	ldr	r2, [r7, #12]
 8001972:	4413      	add	r3, r2
 8001974:	3304      	adds	r3, #4
 8001976:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001978:	697b      	ldr	r3, [r7, #20]
 800197a:	687a      	ldr	r2, [r7, #4]
 800197c:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800197e:	697b      	ldr	r3, [r7, #20]
 8001980:	683a      	ldr	r2, [r7, #0]
 8001982:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8001984:	697b      	ldr	r3, [r7, #20]
 8001986:	2200      	movs	r2, #0
 8001988:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 800198a:	697b      	ldr	r3, [r7, #20]
 800198c:	2200      	movs	r2, #0
 800198e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001990:	7afb      	ldrb	r3, [r7, #11]
 8001992:	f003 030f 	and.w	r3, r3, #15
 8001996:	b2da      	uxtb	r2, r3
 8001998:	697b      	ldr	r3, [r7, #20]
 800199a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	691b      	ldr	r3, [r3, #16]
 80019a0:	2b01      	cmp	r3, #1
 80019a2:	d102      	bne.n	80019aa <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80019a4:	687a      	ldr	r2, [r7, #4]
 80019a6:	697b      	ldr	r3, [r7, #20]
 80019a8:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80019aa:	7afb      	ldrb	r3, [r7, #11]
 80019ac:	f003 030f 	and.w	r3, r3, #15
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d109      	bne.n	80019c8 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	6818      	ldr	r0, [r3, #0]
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	691b      	ldr	r3, [r3, #16]
 80019bc:	b2db      	uxtb	r3, r3
 80019be:	461a      	mov	r2, r3
 80019c0:	6979      	ldr	r1, [r7, #20]
 80019c2:	f001 febb 	bl	800373c <USB_EP0StartXfer>
 80019c6:	e008      	b.n	80019da <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	6818      	ldr	r0, [r3, #0]
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	691b      	ldr	r3, [r3, #16]
 80019d0:	b2db      	uxtb	r3, r3
 80019d2:	461a      	mov	r2, r3
 80019d4:	6979      	ldr	r1, [r7, #20]
 80019d6:	f001 fc6d 	bl	80032b4 <USB_EPStartXfer>
  }

  return HAL_OK;
 80019da:	2300      	movs	r3, #0
}
 80019dc:	4618      	mov	r0, r3
 80019de:	3718      	adds	r7, #24
 80019e0:	46bd      	mov	sp, r7
 80019e2:	bd80      	pop	{r7, pc}

080019e4 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80019e4:	b480      	push	{r7}
 80019e6:	b083      	sub	sp, #12
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	6078      	str	r0, [r7, #4]
 80019ec:	460b      	mov	r3, r1
 80019ee:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80019f0:	78fb      	ldrb	r3, [r7, #3]
 80019f2:	f003 020f 	and.w	r2, r3, #15
 80019f6:	6879      	ldr	r1, [r7, #4]
 80019f8:	4613      	mov	r3, r2
 80019fa:	00db      	lsls	r3, r3, #3
 80019fc:	1a9b      	subs	r3, r3, r2
 80019fe:	009b      	lsls	r3, r3, #2
 8001a00:	440b      	add	r3, r1
 8001a02:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8001a06:	681b      	ldr	r3, [r3, #0]
}
 8001a08:	4618      	mov	r0, r3
 8001a0a:	370c      	adds	r7, #12
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a12:	4770      	bx	lr

08001a14 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b086      	sub	sp, #24
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	60f8      	str	r0, [r7, #12]
 8001a1c:	607a      	str	r2, [r7, #4]
 8001a1e:	603b      	str	r3, [r7, #0]
 8001a20:	460b      	mov	r3, r1
 8001a22:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001a24:	7afb      	ldrb	r3, [r7, #11]
 8001a26:	f003 020f 	and.w	r2, r3, #15
 8001a2a:	4613      	mov	r3, r2
 8001a2c:	00db      	lsls	r3, r3, #3
 8001a2e:	1a9b      	subs	r3, r3, r2
 8001a30:	009b      	lsls	r3, r3, #2
 8001a32:	3338      	adds	r3, #56	; 0x38
 8001a34:	68fa      	ldr	r2, [r7, #12]
 8001a36:	4413      	add	r3, r2
 8001a38:	3304      	adds	r3, #4
 8001a3a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001a3c:	697b      	ldr	r3, [r7, #20]
 8001a3e:	687a      	ldr	r2, [r7, #4]
 8001a40:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8001a42:	697b      	ldr	r3, [r7, #20]
 8001a44:	683a      	ldr	r2, [r7, #0]
 8001a46:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8001a48:	697b      	ldr	r3, [r7, #20]
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8001a4e:	697b      	ldr	r3, [r7, #20]
 8001a50:	2201      	movs	r2, #1
 8001a52:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001a54:	7afb      	ldrb	r3, [r7, #11]
 8001a56:	f003 030f 	and.w	r3, r3, #15
 8001a5a:	b2da      	uxtb	r2, r3
 8001a5c:	697b      	ldr	r3, [r7, #20]
 8001a5e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	691b      	ldr	r3, [r3, #16]
 8001a64:	2b01      	cmp	r3, #1
 8001a66:	d102      	bne.n	8001a6e <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001a68:	687a      	ldr	r2, [r7, #4]
 8001a6a:	697b      	ldr	r3, [r7, #20]
 8001a6c:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001a6e:	7afb      	ldrb	r3, [r7, #11]
 8001a70:	f003 030f 	and.w	r3, r3, #15
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d109      	bne.n	8001a8c <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	6818      	ldr	r0, [r3, #0]
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	691b      	ldr	r3, [r3, #16]
 8001a80:	b2db      	uxtb	r3, r3
 8001a82:	461a      	mov	r2, r3
 8001a84:	6979      	ldr	r1, [r7, #20]
 8001a86:	f001 fe59 	bl	800373c <USB_EP0StartXfer>
 8001a8a:	e008      	b.n	8001a9e <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	6818      	ldr	r0, [r3, #0]
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	691b      	ldr	r3, [r3, #16]
 8001a94:	b2db      	uxtb	r3, r3
 8001a96:	461a      	mov	r2, r3
 8001a98:	6979      	ldr	r1, [r7, #20]
 8001a9a:	f001 fc0b 	bl	80032b4 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001a9e:	2300      	movs	r3, #0
}
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	3718      	adds	r7, #24
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	bd80      	pop	{r7, pc}

08001aa8 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b084      	sub	sp, #16
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	6078      	str	r0, [r7, #4]
 8001ab0:	460b      	mov	r3, r1
 8001ab2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001ab4:	78fb      	ldrb	r3, [r7, #3]
 8001ab6:	f003 020f 	and.w	r2, r3, #15
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	685b      	ldr	r3, [r3, #4]
 8001abe:	429a      	cmp	r2, r3
 8001ac0:	d901      	bls.n	8001ac6 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001ac2:	2301      	movs	r3, #1
 8001ac4:	e050      	b.n	8001b68 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001ac6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	da0f      	bge.n	8001aee <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001ace:	78fb      	ldrb	r3, [r7, #3]
 8001ad0:	f003 020f 	and.w	r2, r3, #15
 8001ad4:	4613      	mov	r3, r2
 8001ad6:	00db      	lsls	r3, r3, #3
 8001ad8:	1a9b      	subs	r3, r3, r2
 8001ada:	009b      	lsls	r3, r3, #2
 8001adc:	3338      	adds	r3, #56	; 0x38
 8001ade:	687a      	ldr	r2, [r7, #4]
 8001ae0:	4413      	add	r3, r2
 8001ae2:	3304      	adds	r3, #4
 8001ae4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	2201      	movs	r2, #1
 8001aea:	705a      	strb	r2, [r3, #1]
 8001aec:	e00d      	b.n	8001b0a <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001aee:	78fa      	ldrb	r2, [r7, #3]
 8001af0:	4613      	mov	r3, r2
 8001af2:	00db      	lsls	r3, r3, #3
 8001af4:	1a9b      	subs	r3, r3, r2
 8001af6:	009b      	lsls	r3, r3, #2
 8001af8:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001afc:	687a      	ldr	r2, [r7, #4]
 8001afe:	4413      	add	r3, r2
 8001b00:	3304      	adds	r3, #4
 8001b02:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	2200      	movs	r2, #0
 8001b08:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	2201      	movs	r2, #1
 8001b0e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001b10:	78fb      	ldrb	r3, [r7, #3]
 8001b12:	f003 030f 	and.w	r3, r3, #15
 8001b16:	b2da      	uxtb	r2, r3
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001b22:	2b01      	cmp	r3, #1
 8001b24:	d101      	bne.n	8001b2a <HAL_PCD_EP_SetStall+0x82>
 8001b26:	2302      	movs	r3, #2
 8001b28:	e01e      	b.n	8001b68 <HAL_PCD_EP_SetStall+0xc0>
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	2201      	movs	r2, #1
 8001b2e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	68f9      	ldr	r1, [r7, #12]
 8001b38:	4618      	mov	r0, r3
 8001b3a:	f001 ffe8 	bl	8003b0e <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001b3e:	78fb      	ldrb	r3, [r7, #3]
 8001b40:	f003 030f 	and.w	r3, r3, #15
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d10a      	bne.n	8001b5e <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	6818      	ldr	r0, [r3, #0]
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	691b      	ldr	r3, [r3, #16]
 8001b50:	b2d9      	uxtb	r1, r3
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001b58:	461a      	mov	r2, r3
 8001b5a:	f002 f9d9 	bl	8003f10 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	2200      	movs	r2, #0
 8001b62:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8001b66:	2300      	movs	r3, #0
}
 8001b68:	4618      	mov	r0, r3
 8001b6a:	3710      	adds	r7, #16
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	bd80      	pop	{r7, pc}

08001b70 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b084      	sub	sp, #16
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
 8001b78:	460b      	mov	r3, r1
 8001b7a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001b7c:	78fb      	ldrb	r3, [r7, #3]
 8001b7e:	f003 020f 	and.w	r2, r3, #15
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	685b      	ldr	r3, [r3, #4]
 8001b86:	429a      	cmp	r2, r3
 8001b88:	d901      	bls.n	8001b8e <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001b8a:	2301      	movs	r3, #1
 8001b8c:	e042      	b.n	8001c14 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001b8e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	da0f      	bge.n	8001bb6 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001b96:	78fb      	ldrb	r3, [r7, #3]
 8001b98:	f003 020f 	and.w	r2, r3, #15
 8001b9c:	4613      	mov	r3, r2
 8001b9e:	00db      	lsls	r3, r3, #3
 8001ba0:	1a9b      	subs	r3, r3, r2
 8001ba2:	009b      	lsls	r3, r3, #2
 8001ba4:	3338      	adds	r3, #56	; 0x38
 8001ba6:	687a      	ldr	r2, [r7, #4]
 8001ba8:	4413      	add	r3, r2
 8001baa:	3304      	adds	r3, #4
 8001bac:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	2201      	movs	r2, #1
 8001bb2:	705a      	strb	r2, [r3, #1]
 8001bb4:	e00f      	b.n	8001bd6 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001bb6:	78fb      	ldrb	r3, [r7, #3]
 8001bb8:	f003 020f 	and.w	r2, r3, #15
 8001bbc:	4613      	mov	r3, r2
 8001bbe:	00db      	lsls	r3, r3, #3
 8001bc0:	1a9b      	subs	r3, r3, r2
 8001bc2:	009b      	lsls	r3, r3, #2
 8001bc4:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001bc8:	687a      	ldr	r2, [r7, #4]
 8001bca:	4413      	add	r3, r2
 8001bcc:	3304      	adds	r3, #4
 8001bce:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	2200      	movs	r2, #0
 8001bda:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001bdc:	78fb      	ldrb	r3, [r7, #3]
 8001bde:	f003 030f 	and.w	r3, r3, #15
 8001be2:	b2da      	uxtb	r2, r3
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001bee:	2b01      	cmp	r3, #1
 8001bf0:	d101      	bne.n	8001bf6 <HAL_PCD_EP_ClrStall+0x86>
 8001bf2:	2302      	movs	r3, #2
 8001bf4:	e00e      	b.n	8001c14 <HAL_PCD_EP_ClrStall+0xa4>
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	2201      	movs	r2, #1
 8001bfa:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	68f9      	ldr	r1, [r7, #12]
 8001c04:	4618      	mov	r0, r3
 8001c06:	f001 fff0 	bl	8003bea <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8001c12:	2300      	movs	r3, #0
}
 8001c14:	4618      	mov	r0, r3
 8001c16:	3710      	adds	r7, #16
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	bd80      	pop	{r7, pc}

08001c1c <HAL_PCD_EP_Flush>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Flush(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	b082      	sub	sp, #8
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]
 8001c24:	460b      	mov	r3, r1
 8001c26:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001c2e:	2b01      	cmp	r3, #1
 8001c30:	d101      	bne.n	8001c36 <HAL_PCD_EP_Flush+0x1a>
 8001c32:	2302      	movs	r3, #2
 8001c34:	e01b      	b.n	8001c6e <HAL_PCD_EP_Flush+0x52>
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	2201      	movs	r2, #1
 8001c3a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((ep_addr & 0x80U) == 0x80U)
 8001c3e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	da09      	bge.n	8001c5a <HAL_PCD_EP_Flush+0x3e>
  {
    (void)USB_FlushTxFifo(hpcd->Instance, (uint32_t)ep_addr & EP_ADDR_MSK);
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681a      	ldr	r2, [r3, #0]
 8001c4a:	78fb      	ldrb	r3, [r7, #3]
 8001c4c:	f003 030f 	and.w	r3, r3, #15
 8001c50:	4619      	mov	r1, r3
 8001c52:	4610      	mov	r0, r2
 8001c54:	f001 f948 	bl	8002ee8 <USB_FlushTxFifo>
 8001c58:	e004      	b.n	8001c64 <HAL_PCD_EP_Flush+0x48>
  }
  else
  {
    (void)USB_FlushRxFifo(hpcd->Instance);
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	4618      	mov	r0, r3
 8001c60:	f001 f966 	bl	8002f30 <USB_FlushRxFifo>
  }

  __HAL_UNLOCK(hpcd);
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	2200      	movs	r2, #0
 8001c68:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8001c6c:	2300      	movs	r3, #0
}
 8001c6e:	4618      	mov	r0, r3
 8001c70:	3708      	adds	r7, #8
 8001c72:	46bd      	mov	sp, r7
 8001c74:	bd80      	pop	{r7, pc}

08001c76 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8001c76:	b580      	push	{r7, lr}
 8001c78:	b08a      	sub	sp, #40	; 0x28
 8001c7a:	af02      	add	r7, sp, #8
 8001c7c:	6078      	str	r0, [r7, #4]
 8001c7e:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001c86:	697b      	ldr	r3, [r7, #20]
 8001c88:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8001c8a:	683a      	ldr	r2, [r7, #0]
 8001c8c:	4613      	mov	r3, r2
 8001c8e:	00db      	lsls	r3, r3, #3
 8001c90:	1a9b      	subs	r3, r3, r2
 8001c92:	009b      	lsls	r3, r3, #2
 8001c94:	3338      	adds	r3, #56	; 0x38
 8001c96:	687a      	ldr	r2, [r7, #4]
 8001c98:	4413      	add	r3, r2
 8001c9a:	3304      	adds	r3, #4
 8001c9c:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	699a      	ldr	r2, [r3, #24]
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	695b      	ldr	r3, [r3, #20]
 8001ca6:	429a      	cmp	r2, r3
 8001ca8:	d901      	bls.n	8001cae <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8001caa:	2301      	movs	r3, #1
 8001cac:	e06c      	b.n	8001d88 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	695a      	ldr	r2, [r3, #20]
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	699b      	ldr	r3, [r3, #24]
 8001cb6:	1ad3      	subs	r3, r2, r3
 8001cb8:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	689b      	ldr	r3, [r3, #8]
 8001cbe:	69fa      	ldr	r2, [r7, #28]
 8001cc0:	429a      	cmp	r2, r3
 8001cc2:	d902      	bls.n	8001cca <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	689b      	ldr	r3, [r3, #8]
 8001cc8:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8001cca:	69fb      	ldr	r3, [r7, #28]
 8001ccc:	3303      	adds	r3, #3
 8001cce:	089b      	lsrs	r3, r3, #2
 8001cd0:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001cd2:	e02b      	b.n	8001d2c <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	695a      	ldr	r2, [r3, #20]
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	699b      	ldr	r3, [r3, #24]
 8001cdc:	1ad3      	subs	r3, r2, r3
 8001cde:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	689b      	ldr	r3, [r3, #8]
 8001ce4:	69fa      	ldr	r2, [r7, #28]
 8001ce6:	429a      	cmp	r2, r3
 8001ce8:	d902      	bls.n	8001cf0 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	689b      	ldr	r3, [r3, #8]
 8001cee:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8001cf0:	69fb      	ldr	r3, [r7, #28]
 8001cf2:	3303      	adds	r3, #3
 8001cf4:	089b      	lsrs	r3, r3, #2
 8001cf6:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	68d9      	ldr	r1, [r3, #12]
 8001cfc:	683b      	ldr	r3, [r7, #0]
 8001cfe:	b2da      	uxtb	r2, r3
 8001d00:	69fb      	ldr	r3, [r7, #28]
 8001d02:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8001d08:	b2db      	uxtb	r3, r3
 8001d0a:	9300      	str	r3, [sp, #0]
 8001d0c:	4603      	mov	r3, r0
 8001d0e:	6978      	ldr	r0, [r7, #20]
 8001d10:	f001 fe67 	bl	80039e2 <USB_WritePacket>

    ep->xfer_buff  += len;
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	68da      	ldr	r2, [r3, #12]
 8001d18:	69fb      	ldr	r3, [r7, #28]
 8001d1a:	441a      	add	r2, r3
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	699a      	ldr	r2, [r3, #24]
 8001d24:	69fb      	ldr	r3, [r7, #28]
 8001d26:	441a      	add	r2, r3
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001d2c:	683b      	ldr	r3, [r7, #0]
 8001d2e:	015a      	lsls	r2, r3, #5
 8001d30:	693b      	ldr	r3, [r7, #16]
 8001d32:	4413      	add	r3, r2
 8001d34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001d38:	699b      	ldr	r3, [r3, #24]
 8001d3a:	b29b      	uxth	r3, r3
 8001d3c:	69ba      	ldr	r2, [r7, #24]
 8001d3e:	429a      	cmp	r2, r3
 8001d40:	d809      	bhi.n	8001d56 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	699a      	ldr	r2, [r3, #24]
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001d4a:	429a      	cmp	r2, r3
 8001d4c:	d203      	bcs.n	8001d56 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	695b      	ldr	r3, [r3, #20]
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d1be      	bne.n	8001cd4 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	695a      	ldr	r2, [r3, #20]
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	699b      	ldr	r3, [r3, #24]
 8001d5e:	429a      	cmp	r2, r3
 8001d60:	d811      	bhi.n	8001d86 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001d62:	683b      	ldr	r3, [r7, #0]
 8001d64:	f003 030f 	and.w	r3, r3, #15
 8001d68:	2201      	movs	r2, #1
 8001d6a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d6e:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001d70:	693b      	ldr	r3, [r7, #16]
 8001d72:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001d76:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001d78:	68bb      	ldr	r3, [r7, #8]
 8001d7a:	43db      	mvns	r3, r3
 8001d7c:	6939      	ldr	r1, [r7, #16]
 8001d7e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8001d82:	4013      	ands	r3, r2
 8001d84:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8001d86:	2300      	movs	r3, #0
}
 8001d88:	4618      	mov	r0, r3
 8001d8a:	3720      	adds	r7, #32
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	bd80      	pop	{r7, pc}

08001d90 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	b086      	sub	sp, #24
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
 8001d98:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001da0:	697b      	ldr	r3, [r7, #20]
 8001da2:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8001da4:	697b      	ldr	r3, [r7, #20]
 8001da6:	333c      	adds	r3, #60	; 0x3c
 8001da8:	3304      	adds	r3, #4
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8001dae:	683b      	ldr	r3, [r7, #0]
 8001db0:	015a      	lsls	r2, r3, #5
 8001db2:	693b      	ldr	r3, [r7, #16]
 8001db4:	4413      	add	r3, r2
 8001db6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001dba:	689b      	ldr	r3, [r3, #8]
 8001dbc:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	691b      	ldr	r3, [r3, #16]
 8001dc2:	2b01      	cmp	r3, #1
 8001dc4:	f040 80a0 	bne.w	8001f08 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8001dc8:	68bb      	ldr	r3, [r7, #8]
 8001dca:	f003 0308 	and.w	r3, r3, #8
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d015      	beq.n	8001dfe <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	4a72      	ldr	r2, [pc, #456]	; (8001fa0 <PCD_EP_OutXfrComplete_int+0x210>)
 8001dd6:	4293      	cmp	r3, r2
 8001dd8:	f240 80dd 	bls.w	8001f96 <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8001ddc:	68bb      	ldr	r3, [r7, #8]
 8001dde:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	f000 80d7 	beq.w	8001f96 <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8001de8:	683b      	ldr	r3, [r7, #0]
 8001dea:	015a      	lsls	r2, r3, #5
 8001dec:	693b      	ldr	r3, [r7, #16]
 8001dee:	4413      	add	r3, r2
 8001df0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001df4:	461a      	mov	r2, r3
 8001df6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001dfa:	6093      	str	r3, [r2, #8]
 8001dfc:	e0cb      	b.n	8001f96 <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8001dfe:	68bb      	ldr	r3, [r7, #8]
 8001e00:	f003 0320 	and.w	r3, r3, #32
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d009      	beq.n	8001e1c <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001e08:	683b      	ldr	r3, [r7, #0]
 8001e0a:	015a      	lsls	r2, r3, #5
 8001e0c:	693b      	ldr	r3, [r7, #16]
 8001e0e:	4413      	add	r3, r2
 8001e10:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001e14:	461a      	mov	r2, r3
 8001e16:	2320      	movs	r3, #32
 8001e18:	6093      	str	r3, [r2, #8]
 8001e1a:	e0bc      	b.n	8001f96 <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8001e1c:	68bb      	ldr	r3, [r7, #8]
 8001e1e:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	f040 80b7 	bne.w	8001f96 <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	4a5d      	ldr	r2, [pc, #372]	; (8001fa0 <PCD_EP_OutXfrComplete_int+0x210>)
 8001e2c:	4293      	cmp	r3, r2
 8001e2e:	d90f      	bls.n	8001e50 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8001e30:	68bb      	ldr	r3, [r7, #8]
 8001e32:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d00a      	beq.n	8001e50 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8001e3a:	683b      	ldr	r3, [r7, #0]
 8001e3c:	015a      	lsls	r2, r3, #5
 8001e3e:	693b      	ldr	r3, [r7, #16]
 8001e40:	4413      	add	r3, r2
 8001e42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001e46:	461a      	mov	r2, r3
 8001e48:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001e4c:	6093      	str	r3, [r2, #8]
 8001e4e:	e0a2      	b.n	8001f96 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8001e50:	6879      	ldr	r1, [r7, #4]
 8001e52:	683a      	ldr	r2, [r7, #0]
 8001e54:	4613      	mov	r3, r2
 8001e56:	00db      	lsls	r3, r3, #3
 8001e58:	1a9b      	subs	r3, r3, r2
 8001e5a:	009b      	lsls	r3, r3, #2
 8001e5c:	440b      	add	r3, r1
 8001e5e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8001e62:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8001e64:	683b      	ldr	r3, [r7, #0]
 8001e66:	0159      	lsls	r1, r3, #5
 8001e68:	693b      	ldr	r3, [r7, #16]
 8001e6a:	440b      	add	r3, r1
 8001e6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001e70:	691b      	ldr	r3, [r3, #16]
 8001e72:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8001e76:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8001e78:	6878      	ldr	r0, [r7, #4]
 8001e7a:	683a      	ldr	r2, [r7, #0]
 8001e7c:	4613      	mov	r3, r2
 8001e7e:	00db      	lsls	r3, r3, #3
 8001e80:	1a9b      	subs	r3, r3, r2
 8001e82:	009b      	lsls	r3, r3, #2
 8001e84:	4403      	add	r3, r0
 8001e86:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8001e8a:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8001e8c:	6879      	ldr	r1, [r7, #4]
 8001e8e:	683a      	ldr	r2, [r7, #0]
 8001e90:	4613      	mov	r3, r2
 8001e92:	00db      	lsls	r3, r3, #3
 8001e94:	1a9b      	subs	r3, r3, r2
 8001e96:	009b      	lsls	r3, r3, #2
 8001e98:	440b      	add	r3, r1
 8001e9a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001e9e:	6819      	ldr	r1, [r3, #0]
 8001ea0:	6878      	ldr	r0, [r7, #4]
 8001ea2:	683a      	ldr	r2, [r7, #0]
 8001ea4:	4613      	mov	r3, r2
 8001ea6:	00db      	lsls	r3, r3, #3
 8001ea8:	1a9b      	subs	r3, r3, r2
 8001eaa:	009b      	lsls	r3, r3, #2
 8001eac:	4403      	add	r3, r0
 8001eae:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	4419      	add	r1, r3
 8001eb6:	6878      	ldr	r0, [r7, #4]
 8001eb8:	683a      	ldr	r2, [r7, #0]
 8001eba:	4613      	mov	r3, r2
 8001ebc:	00db      	lsls	r3, r3, #3
 8001ebe:	1a9b      	subs	r3, r3, r2
 8001ec0:	009b      	lsls	r3, r3, #2
 8001ec2:	4403      	add	r3, r0
 8001ec4:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001ec8:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8001eca:	683b      	ldr	r3, [r7, #0]
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d114      	bne.n	8001efa <PCD_EP_OutXfrComplete_int+0x16a>
 8001ed0:	6879      	ldr	r1, [r7, #4]
 8001ed2:	683a      	ldr	r2, [r7, #0]
 8001ed4:	4613      	mov	r3, r2
 8001ed6:	00db      	lsls	r3, r3, #3
 8001ed8:	1a9b      	subs	r3, r3, r2
 8001eda:	009b      	lsls	r3, r3, #2
 8001edc:	440b      	add	r3, r1
 8001ede:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d108      	bne.n	8001efa <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	6818      	ldr	r0, [r3, #0]
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001ef2:	461a      	mov	r2, r3
 8001ef4:	2101      	movs	r1, #1
 8001ef6:	f002 f80b 	bl	8003f10 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8001efa:	683b      	ldr	r3, [r7, #0]
 8001efc:	b2db      	uxtb	r3, r3
 8001efe:	4619      	mov	r1, r3
 8001f00:	6878      	ldr	r0, [r7, #4]
 8001f02:	f005 f9cd 	bl	80072a0 <HAL_PCD_DataOutStageCallback>
 8001f06:	e046      	b.n	8001f96 <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	4a26      	ldr	r2, [pc, #152]	; (8001fa4 <PCD_EP_OutXfrComplete_int+0x214>)
 8001f0c:	4293      	cmp	r3, r2
 8001f0e:	d124      	bne.n	8001f5a <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8001f10:	68bb      	ldr	r3, [r7, #8]
 8001f12:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d00a      	beq.n	8001f30 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8001f1a:	683b      	ldr	r3, [r7, #0]
 8001f1c:	015a      	lsls	r2, r3, #5
 8001f1e:	693b      	ldr	r3, [r7, #16]
 8001f20:	4413      	add	r3, r2
 8001f22:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001f26:	461a      	mov	r2, r3
 8001f28:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001f2c:	6093      	str	r3, [r2, #8]
 8001f2e:	e032      	b.n	8001f96 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001f30:	68bb      	ldr	r3, [r7, #8]
 8001f32:	f003 0320 	and.w	r3, r3, #32
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d008      	beq.n	8001f4c <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001f3a:	683b      	ldr	r3, [r7, #0]
 8001f3c:	015a      	lsls	r2, r3, #5
 8001f3e:	693b      	ldr	r3, [r7, #16]
 8001f40:	4413      	add	r3, r2
 8001f42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001f46:	461a      	mov	r2, r3
 8001f48:	2320      	movs	r3, #32
 8001f4a:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8001f4c:	683b      	ldr	r3, [r7, #0]
 8001f4e:	b2db      	uxtb	r3, r3
 8001f50:	4619      	mov	r1, r3
 8001f52:	6878      	ldr	r0, [r7, #4]
 8001f54:	f005 f9a4 	bl	80072a0 <HAL_PCD_DataOutStageCallback>
 8001f58:	e01d      	b.n	8001f96 <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8001f5a:	683b      	ldr	r3, [r7, #0]
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d114      	bne.n	8001f8a <PCD_EP_OutXfrComplete_int+0x1fa>
 8001f60:	6879      	ldr	r1, [r7, #4]
 8001f62:	683a      	ldr	r2, [r7, #0]
 8001f64:	4613      	mov	r3, r2
 8001f66:	00db      	lsls	r3, r3, #3
 8001f68:	1a9b      	subs	r3, r3, r2
 8001f6a:	009b      	lsls	r3, r3, #2
 8001f6c:	440b      	add	r3, r1
 8001f6e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d108      	bne.n	8001f8a <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	6818      	ldr	r0, [r3, #0]
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001f82:	461a      	mov	r2, r3
 8001f84:	2100      	movs	r1, #0
 8001f86:	f001 ffc3 	bl	8003f10 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8001f8a:	683b      	ldr	r3, [r7, #0]
 8001f8c:	b2db      	uxtb	r3, r3
 8001f8e:	4619      	mov	r1, r3
 8001f90:	6878      	ldr	r0, [r7, #4]
 8001f92:	f005 f985 	bl	80072a0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8001f96:	2300      	movs	r3, #0
}
 8001f98:	4618      	mov	r0, r3
 8001f9a:	3718      	adds	r7, #24
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	bd80      	pop	{r7, pc}
 8001fa0:	4f54300a 	.word	0x4f54300a
 8001fa4:	4f54310a 	.word	0x4f54310a

08001fa8 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	b086      	sub	sp, #24
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]
 8001fb0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001fb8:	697b      	ldr	r3, [r7, #20]
 8001fba:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8001fbc:	697b      	ldr	r3, [r7, #20]
 8001fbe:	333c      	adds	r3, #60	; 0x3c
 8001fc0:	3304      	adds	r3, #4
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8001fc6:	683b      	ldr	r3, [r7, #0]
 8001fc8:	015a      	lsls	r2, r3, #5
 8001fca:	693b      	ldr	r3, [r7, #16]
 8001fcc:	4413      	add	r3, r2
 8001fce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001fd2:	689b      	ldr	r3, [r3, #8]
 8001fd4:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	4a15      	ldr	r2, [pc, #84]	; (8002030 <PCD_EP_OutSetupPacket_int+0x88>)
 8001fda:	4293      	cmp	r3, r2
 8001fdc:	d90e      	bls.n	8001ffc <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8001fde:	68bb      	ldr	r3, [r7, #8]
 8001fe0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d009      	beq.n	8001ffc <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8001fe8:	683b      	ldr	r3, [r7, #0]
 8001fea:	015a      	lsls	r2, r3, #5
 8001fec:	693b      	ldr	r3, [r7, #16]
 8001fee:	4413      	add	r3, r2
 8001ff0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001ff4:	461a      	mov	r2, r3
 8001ff6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001ffa:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8001ffc:	6878      	ldr	r0, [r7, #4]
 8001ffe:	f005 f93d 	bl	800727c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	4a0a      	ldr	r2, [pc, #40]	; (8002030 <PCD_EP_OutSetupPacket_int+0x88>)
 8002006:	4293      	cmp	r3, r2
 8002008:	d90c      	bls.n	8002024 <PCD_EP_OutSetupPacket_int+0x7c>
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	691b      	ldr	r3, [r3, #16]
 800200e:	2b01      	cmp	r3, #1
 8002010:	d108      	bne.n	8002024 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	6818      	ldr	r0, [r3, #0]
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800201c:	461a      	mov	r2, r3
 800201e:	2101      	movs	r1, #1
 8002020:	f001 ff76 	bl	8003f10 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8002024:	2300      	movs	r3, #0
}
 8002026:	4618      	mov	r0, r3
 8002028:	3718      	adds	r7, #24
 800202a:	46bd      	mov	sp, r7
 800202c:	bd80      	pop	{r7, pc}
 800202e:	bf00      	nop
 8002030:	4f54300a 	.word	0x4f54300a

08002034 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8002034:	b480      	push	{r7}
 8002036:	b085      	sub	sp, #20
 8002038:	af00      	add	r7, sp, #0
 800203a:	6078      	str	r0, [r7, #4]
 800203c:	460b      	mov	r3, r1
 800203e:	70fb      	strb	r3, [r7, #3]
 8002040:	4613      	mov	r3, r2
 8002042:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800204a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800204c:	78fb      	ldrb	r3, [r7, #3]
 800204e:	2b00      	cmp	r3, #0
 8002050:	d107      	bne.n	8002062 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8002052:	883b      	ldrh	r3, [r7, #0]
 8002054:	0419      	lsls	r1, r3, #16
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	68ba      	ldr	r2, [r7, #8]
 800205c:	430a      	orrs	r2, r1
 800205e:	629a      	str	r2, [r3, #40]	; 0x28
 8002060:	e028      	b.n	80020b4 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002068:	0c1b      	lsrs	r3, r3, #16
 800206a:	68ba      	ldr	r2, [r7, #8]
 800206c:	4413      	add	r3, r2
 800206e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002070:	2300      	movs	r3, #0
 8002072:	73fb      	strb	r3, [r7, #15]
 8002074:	e00d      	b.n	8002092 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681a      	ldr	r2, [r3, #0]
 800207a:	7bfb      	ldrb	r3, [r7, #15]
 800207c:	3340      	adds	r3, #64	; 0x40
 800207e:	009b      	lsls	r3, r3, #2
 8002080:	4413      	add	r3, r2
 8002082:	685b      	ldr	r3, [r3, #4]
 8002084:	0c1b      	lsrs	r3, r3, #16
 8002086:	68ba      	ldr	r2, [r7, #8]
 8002088:	4413      	add	r3, r2
 800208a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800208c:	7bfb      	ldrb	r3, [r7, #15]
 800208e:	3301      	adds	r3, #1
 8002090:	73fb      	strb	r3, [r7, #15]
 8002092:	7bfa      	ldrb	r2, [r7, #15]
 8002094:	78fb      	ldrb	r3, [r7, #3]
 8002096:	3b01      	subs	r3, #1
 8002098:	429a      	cmp	r2, r3
 800209a:	d3ec      	bcc.n	8002076 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800209c:	883b      	ldrh	r3, [r7, #0]
 800209e:	0418      	lsls	r0, r3, #16
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	6819      	ldr	r1, [r3, #0]
 80020a4:	78fb      	ldrb	r3, [r7, #3]
 80020a6:	3b01      	subs	r3, #1
 80020a8:	68ba      	ldr	r2, [r7, #8]
 80020aa:	4302      	orrs	r2, r0
 80020ac:	3340      	adds	r3, #64	; 0x40
 80020ae:	009b      	lsls	r3, r3, #2
 80020b0:	440b      	add	r3, r1
 80020b2:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80020b4:	2300      	movs	r3, #0
}
 80020b6:	4618      	mov	r0, r3
 80020b8:	3714      	adds	r7, #20
 80020ba:	46bd      	mov	sp, r7
 80020bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c0:	4770      	bx	lr

080020c2 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80020c2:	b480      	push	{r7}
 80020c4:	b083      	sub	sp, #12
 80020c6:	af00      	add	r7, sp, #0
 80020c8:	6078      	str	r0, [r7, #4]
 80020ca:	460b      	mov	r3, r1
 80020cc:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	887a      	ldrh	r2, [r7, #2]
 80020d4:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80020d6:	2300      	movs	r3, #0
}
 80020d8:	4618      	mov	r0, r3
 80020da:	370c      	adds	r7, #12
 80020dc:	46bd      	mov	sp, r7
 80020de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e2:	4770      	bx	lr

080020e4 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80020e4:	b480      	push	{r7}
 80020e6:	b083      	sub	sp, #12
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]
 80020ec:	460b      	mov	r3, r1
 80020ee:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80020f0:	bf00      	nop
 80020f2:	370c      	adds	r7, #12
 80020f4:	46bd      	mov	sp, r7
 80020f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fa:	4770      	bx	lr

080020fc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80020fc:	b580      	push	{r7, lr}
 80020fe:	b086      	sub	sp, #24
 8002100:	af00      	add	r7, sp, #0
 8002102:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	2b00      	cmp	r3, #0
 8002108:	d101      	bne.n	800210e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800210a:	2301      	movs	r3, #1
 800210c:	e264      	b.n	80025d8 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f003 0301 	and.w	r3, r3, #1
 8002116:	2b00      	cmp	r3, #0
 8002118:	d075      	beq.n	8002206 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800211a:	4ba3      	ldr	r3, [pc, #652]	; (80023a8 <HAL_RCC_OscConfig+0x2ac>)
 800211c:	689b      	ldr	r3, [r3, #8]
 800211e:	f003 030c 	and.w	r3, r3, #12
 8002122:	2b04      	cmp	r3, #4
 8002124:	d00c      	beq.n	8002140 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002126:	4ba0      	ldr	r3, [pc, #640]	; (80023a8 <HAL_RCC_OscConfig+0x2ac>)
 8002128:	689b      	ldr	r3, [r3, #8]
 800212a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800212e:	2b08      	cmp	r3, #8
 8002130:	d112      	bne.n	8002158 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002132:	4b9d      	ldr	r3, [pc, #628]	; (80023a8 <HAL_RCC_OscConfig+0x2ac>)
 8002134:	685b      	ldr	r3, [r3, #4]
 8002136:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800213a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800213e:	d10b      	bne.n	8002158 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002140:	4b99      	ldr	r3, [pc, #612]	; (80023a8 <HAL_RCC_OscConfig+0x2ac>)
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002148:	2b00      	cmp	r3, #0
 800214a:	d05b      	beq.n	8002204 <HAL_RCC_OscConfig+0x108>
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	685b      	ldr	r3, [r3, #4]
 8002150:	2b00      	cmp	r3, #0
 8002152:	d157      	bne.n	8002204 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002154:	2301      	movs	r3, #1
 8002156:	e23f      	b.n	80025d8 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	685b      	ldr	r3, [r3, #4]
 800215c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002160:	d106      	bne.n	8002170 <HAL_RCC_OscConfig+0x74>
 8002162:	4b91      	ldr	r3, [pc, #580]	; (80023a8 <HAL_RCC_OscConfig+0x2ac>)
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	4a90      	ldr	r2, [pc, #576]	; (80023a8 <HAL_RCC_OscConfig+0x2ac>)
 8002168:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800216c:	6013      	str	r3, [r2, #0]
 800216e:	e01d      	b.n	80021ac <HAL_RCC_OscConfig+0xb0>
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	685b      	ldr	r3, [r3, #4]
 8002174:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002178:	d10c      	bne.n	8002194 <HAL_RCC_OscConfig+0x98>
 800217a:	4b8b      	ldr	r3, [pc, #556]	; (80023a8 <HAL_RCC_OscConfig+0x2ac>)
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	4a8a      	ldr	r2, [pc, #552]	; (80023a8 <HAL_RCC_OscConfig+0x2ac>)
 8002180:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002184:	6013      	str	r3, [r2, #0]
 8002186:	4b88      	ldr	r3, [pc, #544]	; (80023a8 <HAL_RCC_OscConfig+0x2ac>)
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	4a87      	ldr	r2, [pc, #540]	; (80023a8 <HAL_RCC_OscConfig+0x2ac>)
 800218c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002190:	6013      	str	r3, [r2, #0]
 8002192:	e00b      	b.n	80021ac <HAL_RCC_OscConfig+0xb0>
 8002194:	4b84      	ldr	r3, [pc, #528]	; (80023a8 <HAL_RCC_OscConfig+0x2ac>)
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	4a83      	ldr	r2, [pc, #524]	; (80023a8 <HAL_RCC_OscConfig+0x2ac>)
 800219a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800219e:	6013      	str	r3, [r2, #0]
 80021a0:	4b81      	ldr	r3, [pc, #516]	; (80023a8 <HAL_RCC_OscConfig+0x2ac>)
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	4a80      	ldr	r2, [pc, #512]	; (80023a8 <HAL_RCC_OscConfig+0x2ac>)
 80021a6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80021aa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	685b      	ldr	r3, [r3, #4]
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d013      	beq.n	80021dc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021b4:	f7fe fb2c 	bl	8000810 <HAL_GetTick>
 80021b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021ba:	e008      	b.n	80021ce <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80021bc:	f7fe fb28 	bl	8000810 <HAL_GetTick>
 80021c0:	4602      	mov	r2, r0
 80021c2:	693b      	ldr	r3, [r7, #16]
 80021c4:	1ad3      	subs	r3, r2, r3
 80021c6:	2b64      	cmp	r3, #100	; 0x64
 80021c8:	d901      	bls.n	80021ce <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80021ca:	2303      	movs	r3, #3
 80021cc:	e204      	b.n	80025d8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021ce:	4b76      	ldr	r3, [pc, #472]	; (80023a8 <HAL_RCC_OscConfig+0x2ac>)
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d0f0      	beq.n	80021bc <HAL_RCC_OscConfig+0xc0>
 80021da:	e014      	b.n	8002206 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021dc:	f7fe fb18 	bl	8000810 <HAL_GetTick>
 80021e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80021e2:	e008      	b.n	80021f6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80021e4:	f7fe fb14 	bl	8000810 <HAL_GetTick>
 80021e8:	4602      	mov	r2, r0
 80021ea:	693b      	ldr	r3, [r7, #16]
 80021ec:	1ad3      	subs	r3, r2, r3
 80021ee:	2b64      	cmp	r3, #100	; 0x64
 80021f0:	d901      	bls.n	80021f6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80021f2:	2303      	movs	r3, #3
 80021f4:	e1f0      	b.n	80025d8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80021f6:	4b6c      	ldr	r3, [pc, #432]	; (80023a8 <HAL_RCC_OscConfig+0x2ac>)
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d1f0      	bne.n	80021e4 <HAL_RCC_OscConfig+0xe8>
 8002202:	e000      	b.n	8002206 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002204:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f003 0302 	and.w	r3, r3, #2
 800220e:	2b00      	cmp	r3, #0
 8002210:	d063      	beq.n	80022da <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002212:	4b65      	ldr	r3, [pc, #404]	; (80023a8 <HAL_RCC_OscConfig+0x2ac>)
 8002214:	689b      	ldr	r3, [r3, #8]
 8002216:	f003 030c 	and.w	r3, r3, #12
 800221a:	2b00      	cmp	r3, #0
 800221c:	d00b      	beq.n	8002236 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800221e:	4b62      	ldr	r3, [pc, #392]	; (80023a8 <HAL_RCC_OscConfig+0x2ac>)
 8002220:	689b      	ldr	r3, [r3, #8]
 8002222:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002226:	2b08      	cmp	r3, #8
 8002228:	d11c      	bne.n	8002264 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800222a:	4b5f      	ldr	r3, [pc, #380]	; (80023a8 <HAL_RCC_OscConfig+0x2ac>)
 800222c:	685b      	ldr	r3, [r3, #4]
 800222e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002232:	2b00      	cmp	r3, #0
 8002234:	d116      	bne.n	8002264 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002236:	4b5c      	ldr	r3, [pc, #368]	; (80023a8 <HAL_RCC_OscConfig+0x2ac>)
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f003 0302 	and.w	r3, r3, #2
 800223e:	2b00      	cmp	r3, #0
 8002240:	d005      	beq.n	800224e <HAL_RCC_OscConfig+0x152>
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	68db      	ldr	r3, [r3, #12]
 8002246:	2b01      	cmp	r3, #1
 8002248:	d001      	beq.n	800224e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800224a:	2301      	movs	r3, #1
 800224c:	e1c4      	b.n	80025d8 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800224e:	4b56      	ldr	r3, [pc, #344]	; (80023a8 <HAL_RCC_OscConfig+0x2ac>)
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	691b      	ldr	r3, [r3, #16]
 800225a:	00db      	lsls	r3, r3, #3
 800225c:	4952      	ldr	r1, [pc, #328]	; (80023a8 <HAL_RCC_OscConfig+0x2ac>)
 800225e:	4313      	orrs	r3, r2
 8002260:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002262:	e03a      	b.n	80022da <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	68db      	ldr	r3, [r3, #12]
 8002268:	2b00      	cmp	r3, #0
 800226a:	d020      	beq.n	80022ae <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800226c:	4b4f      	ldr	r3, [pc, #316]	; (80023ac <HAL_RCC_OscConfig+0x2b0>)
 800226e:	2201      	movs	r2, #1
 8002270:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002272:	f7fe facd 	bl	8000810 <HAL_GetTick>
 8002276:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002278:	e008      	b.n	800228c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800227a:	f7fe fac9 	bl	8000810 <HAL_GetTick>
 800227e:	4602      	mov	r2, r0
 8002280:	693b      	ldr	r3, [r7, #16]
 8002282:	1ad3      	subs	r3, r2, r3
 8002284:	2b02      	cmp	r3, #2
 8002286:	d901      	bls.n	800228c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002288:	2303      	movs	r3, #3
 800228a:	e1a5      	b.n	80025d8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800228c:	4b46      	ldr	r3, [pc, #280]	; (80023a8 <HAL_RCC_OscConfig+0x2ac>)
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f003 0302 	and.w	r3, r3, #2
 8002294:	2b00      	cmp	r3, #0
 8002296:	d0f0      	beq.n	800227a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002298:	4b43      	ldr	r3, [pc, #268]	; (80023a8 <HAL_RCC_OscConfig+0x2ac>)
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	691b      	ldr	r3, [r3, #16]
 80022a4:	00db      	lsls	r3, r3, #3
 80022a6:	4940      	ldr	r1, [pc, #256]	; (80023a8 <HAL_RCC_OscConfig+0x2ac>)
 80022a8:	4313      	orrs	r3, r2
 80022aa:	600b      	str	r3, [r1, #0]
 80022ac:	e015      	b.n	80022da <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80022ae:	4b3f      	ldr	r3, [pc, #252]	; (80023ac <HAL_RCC_OscConfig+0x2b0>)
 80022b0:	2200      	movs	r2, #0
 80022b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022b4:	f7fe faac 	bl	8000810 <HAL_GetTick>
 80022b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80022ba:	e008      	b.n	80022ce <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80022bc:	f7fe faa8 	bl	8000810 <HAL_GetTick>
 80022c0:	4602      	mov	r2, r0
 80022c2:	693b      	ldr	r3, [r7, #16]
 80022c4:	1ad3      	subs	r3, r2, r3
 80022c6:	2b02      	cmp	r3, #2
 80022c8:	d901      	bls.n	80022ce <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80022ca:	2303      	movs	r3, #3
 80022cc:	e184      	b.n	80025d8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80022ce:	4b36      	ldr	r3, [pc, #216]	; (80023a8 <HAL_RCC_OscConfig+0x2ac>)
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f003 0302 	and.w	r3, r3, #2
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d1f0      	bne.n	80022bc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f003 0308 	and.w	r3, r3, #8
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d030      	beq.n	8002348 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	695b      	ldr	r3, [r3, #20]
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d016      	beq.n	800231c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80022ee:	4b30      	ldr	r3, [pc, #192]	; (80023b0 <HAL_RCC_OscConfig+0x2b4>)
 80022f0:	2201      	movs	r2, #1
 80022f2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022f4:	f7fe fa8c 	bl	8000810 <HAL_GetTick>
 80022f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80022fa:	e008      	b.n	800230e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80022fc:	f7fe fa88 	bl	8000810 <HAL_GetTick>
 8002300:	4602      	mov	r2, r0
 8002302:	693b      	ldr	r3, [r7, #16]
 8002304:	1ad3      	subs	r3, r2, r3
 8002306:	2b02      	cmp	r3, #2
 8002308:	d901      	bls.n	800230e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800230a:	2303      	movs	r3, #3
 800230c:	e164      	b.n	80025d8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800230e:	4b26      	ldr	r3, [pc, #152]	; (80023a8 <HAL_RCC_OscConfig+0x2ac>)
 8002310:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002312:	f003 0302 	and.w	r3, r3, #2
 8002316:	2b00      	cmp	r3, #0
 8002318:	d0f0      	beq.n	80022fc <HAL_RCC_OscConfig+0x200>
 800231a:	e015      	b.n	8002348 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800231c:	4b24      	ldr	r3, [pc, #144]	; (80023b0 <HAL_RCC_OscConfig+0x2b4>)
 800231e:	2200      	movs	r2, #0
 8002320:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002322:	f7fe fa75 	bl	8000810 <HAL_GetTick>
 8002326:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002328:	e008      	b.n	800233c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800232a:	f7fe fa71 	bl	8000810 <HAL_GetTick>
 800232e:	4602      	mov	r2, r0
 8002330:	693b      	ldr	r3, [r7, #16]
 8002332:	1ad3      	subs	r3, r2, r3
 8002334:	2b02      	cmp	r3, #2
 8002336:	d901      	bls.n	800233c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002338:	2303      	movs	r3, #3
 800233a:	e14d      	b.n	80025d8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800233c:	4b1a      	ldr	r3, [pc, #104]	; (80023a8 <HAL_RCC_OscConfig+0x2ac>)
 800233e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002340:	f003 0302 	and.w	r3, r3, #2
 8002344:	2b00      	cmp	r3, #0
 8002346:	d1f0      	bne.n	800232a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f003 0304 	and.w	r3, r3, #4
 8002350:	2b00      	cmp	r3, #0
 8002352:	f000 80a0 	beq.w	8002496 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002356:	2300      	movs	r3, #0
 8002358:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800235a:	4b13      	ldr	r3, [pc, #76]	; (80023a8 <HAL_RCC_OscConfig+0x2ac>)
 800235c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800235e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002362:	2b00      	cmp	r3, #0
 8002364:	d10f      	bne.n	8002386 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002366:	2300      	movs	r3, #0
 8002368:	60bb      	str	r3, [r7, #8]
 800236a:	4b0f      	ldr	r3, [pc, #60]	; (80023a8 <HAL_RCC_OscConfig+0x2ac>)
 800236c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800236e:	4a0e      	ldr	r2, [pc, #56]	; (80023a8 <HAL_RCC_OscConfig+0x2ac>)
 8002370:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002374:	6413      	str	r3, [r2, #64]	; 0x40
 8002376:	4b0c      	ldr	r3, [pc, #48]	; (80023a8 <HAL_RCC_OscConfig+0x2ac>)
 8002378:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800237a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800237e:	60bb      	str	r3, [r7, #8]
 8002380:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002382:	2301      	movs	r3, #1
 8002384:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002386:	4b0b      	ldr	r3, [pc, #44]	; (80023b4 <HAL_RCC_OscConfig+0x2b8>)
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800238e:	2b00      	cmp	r3, #0
 8002390:	d121      	bne.n	80023d6 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002392:	4b08      	ldr	r3, [pc, #32]	; (80023b4 <HAL_RCC_OscConfig+0x2b8>)
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	4a07      	ldr	r2, [pc, #28]	; (80023b4 <HAL_RCC_OscConfig+0x2b8>)
 8002398:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800239c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800239e:	f7fe fa37 	bl	8000810 <HAL_GetTick>
 80023a2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023a4:	e011      	b.n	80023ca <HAL_RCC_OscConfig+0x2ce>
 80023a6:	bf00      	nop
 80023a8:	40023800 	.word	0x40023800
 80023ac:	42470000 	.word	0x42470000
 80023b0:	42470e80 	.word	0x42470e80
 80023b4:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80023b8:	f7fe fa2a 	bl	8000810 <HAL_GetTick>
 80023bc:	4602      	mov	r2, r0
 80023be:	693b      	ldr	r3, [r7, #16]
 80023c0:	1ad3      	subs	r3, r2, r3
 80023c2:	2b02      	cmp	r3, #2
 80023c4:	d901      	bls.n	80023ca <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80023c6:	2303      	movs	r3, #3
 80023c8:	e106      	b.n	80025d8 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023ca:	4b85      	ldr	r3, [pc, #532]	; (80025e0 <HAL_RCC_OscConfig+0x4e4>)
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d0f0      	beq.n	80023b8 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	689b      	ldr	r3, [r3, #8]
 80023da:	2b01      	cmp	r3, #1
 80023dc:	d106      	bne.n	80023ec <HAL_RCC_OscConfig+0x2f0>
 80023de:	4b81      	ldr	r3, [pc, #516]	; (80025e4 <HAL_RCC_OscConfig+0x4e8>)
 80023e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023e2:	4a80      	ldr	r2, [pc, #512]	; (80025e4 <HAL_RCC_OscConfig+0x4e8>)
 80023e4:	f043 0301 	orr.w	r3, r3, #1
 80023e8:	6713      	str	r3, [r2, #112]	; 0x70
 80023ea:	e01c      	b.n	8002426 <HAL_RCC_OscConfig+0x32a>
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	689b      	ldr	r3, [r3, #8]
 80023f0:	2b05      	cmp	r3, #5
 80023f2:	d10c      	bne.n	800240e <HAL_RCC_OscConfig+0x312>
 80023f4:	4b7b      	ldr	r3, [pc, #492]	; (80025e4 <HAL_RCC_OscConfig+0x4e8>)
 80023f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023f8:	4a7a      	ldr	r2, [pc, #488]	; (80025e4 <HAL_RCC_OscConfig+0x4e8>)
 80023fa:	f043 0304 	orr.w	r3, r3, #4
 80023fe:	6713      	str	r3, [r2, #112]	; 0x70
 8002400:	4b78      	ldr	r3, [pc, #480]	; (80025e4 <HAL_RCC_OscConfig+0x4e8>)
 8002402:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002404:	4a77      	ldr	r2, [pc, #476]	; (80025e4 <HAL_RCC_OscConfig+0x4e8>)
 8002406:	f043 0301 	orr.w	r3, r3, #1
 800240a:	6713      	str	r3, [r2, #112]	; 0x70
 800240c:	e00b      	b.n	8002426 <HAL_RCC_OscConfig+0x32a>
 800240e:	4b75      	ldr	r3, [pc, #468]	; (80025e4 <HAL_RCC_OscConfig+0x4e8>)
 8002410:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002412:	4a74      	ldr	r2, [pc, #464]	; (80025e4 <HAL_RCC_OscConfig+0x4e8>)
 8002414:	f023 0301 	bic.w	r3, r3, #1
 8002418:	6713      	str	r3, [r2, #112]	; 0x70
 800241a:	4b72      	ldr	r3, [pc, #456]	; (80025e4 <HAL_RCC_OscConfig+0x4e8>)
 800241c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800241e:	4a71      	ldr	r2, [pc, #452]	; (80025e4 <HAL_RCC_OscConfig+0x4e8>)
 8002420:	f023 0304 	bic.w	r3, r3, #4
 8002424:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	689b      	ldr	r3, [r3, #8]
 800242a:	2b00      	cmp	r3, #0
 800242c:	d015      	beq.n	800245a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800242e:	f7fe f9ef 	bl	8000810 <HAL_GetTick>
 8002432:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002434:	e00a      	b.n	800244c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002436:	f7fe f9eb 	bl	8000810 <HAL_GetTick>
 800243a:	4602      	mov	r2, r0
 800243c:	693b      	ldr	r3, [r7, #16]
 800243e:	1ad3      	subs	r3, r2, r3
 8002440:	f241 3288 	movw	r2, #5000	; 0x1388
 8002444:	4293      	cmp	r3, r2
 8002446:	d901      	bls.n	800244c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002448:	2303      	movs	r3, #3
 800244a:	e0c5      	b.n	80025d8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800244c:	4b65      	ldr	r3, [pc, #404]	; (80025e4 <HAL_RCC_OscConfig+0x4e8>)
 800244e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002450:	f003 0302 	and.w	r3, r3, #2
 8002454:	2b00      	cmp	r3, #0
 8002456:	d0ee      	beq.n	8002436 <HAL_RCC_OscConfig+0x33a>
 8002458:	e014      	b.n	8002484 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800245a:	f7fe f9d9 	bl	8000810 <HAL_GetTick>
 800245e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002460:	e00a      	b.n	8002478 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002462:	f7fe f9d5 	bl	8000810 <HAL_GetTick>
 8002466:	4602      	mov	r2, r0
 8002468:	693b      	ldr	r3, [r7, #16]
 800246a:	1ad3      	subs	r3, r2, r3
 800246c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002470:	4293      	cmp	r3, r2
 8002472:	d901      	bls.n	8002478 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002474:	2303      	movs	r3, #3
 8002476:	e0af      	b.n	80025d8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002478:	4b5a      	ldr	r3, [pc, #360]	; (80025e4 <HAL_RCC_OscConfig+0x4e8>)
 800247a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800247c:	f003 0302 	and.w	r3, r3, #2
 8002480:	2b00      	cmp	r3, #0
 8002482:	d1ee      	bne.n	8002462 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002484:	7dfb      	ldrb	r3, [r7, #23]
 8002486:	2b01      	cmp	r3, #1
 8002488:	d105      	bne.n	8002496 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800248a:	4b56      	ldr	r3, [pc, #344]	; (80025e4 <HAL_RCC_OscConfig+0x4e8>)
 800248c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800248e:	4a55      	ldr	r2, [pc, #340]	; (80025e4 <HAL_RCC_OscConfig+0x4e8>)
 8002490:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002494:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	699b      	ldr	r3, [r3, #24]
 800249a:	2b00      	cmp	r3, #0
 800249c:	f000 809b 	beq.w	80025d6 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80024a0:	4b50      	ldr	r3, [pc, #320]	; (80025e4 <HAL_RCC_OscConfig+0x4e8>)
 80024a2:	689b      	ldr	r3, [r3, #8]
 80024a4:	f003 030c 	and.w	r3, r3, #12
 80024a8:	2b08      	cmp	r3, #8
 80024aa:	d05c      	beq.n	8002566 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	699b      	ldr	r3, [r3, #24]
 80024b0:	2b02      	cmp	r3, #2
 80024b2:	d141      	bne.n	8002538 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024b4:	4b4c      	ldr	r3, [pc, #304]	; (80025e8 <HAL_RCC_OscConfig+0x4ec>)
 80024b6:	2200      	movs	r2, #0
 80024b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024ba:	f7fe f9a9 	bl	8000810 <HAL_GetTick>
 80024be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80024c0:	e008      	b.n	80024d4 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80024c2:	f7fe f9a5 	bl	8000810 <HAL_GetTick>
 80024c6:	4602      	mov	r2, r0
 80024c8:	693b      	ldr	r3, [r7, #16]
 80024ca:	1ad3      	subs	r3, r2, r3
 80024cc:	2b02      	cmp	r3, #2
 80024ce:	d901      	bls.n	80024d4 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80024d0:	2303      	movs	r3, #3
 80024d2:	e081      	b.n	80025d8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80024d4:	4b43      	ldr	r3, [pc, #268]	; (80025e4 <HAL_RCC_OscConfig+0x4e8>)
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d1f0      	bne.n	80024c2 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	69da      	ldr	r2, [r3, #28]
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	6a1b      	ldr	r3, [r3, #32]
 80024e8:	431a      	orrs	r2, r3
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024ee:	019b      	lsls	r3, r3, #6
 80024f0:	431a      	orrs	r2, r3
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024f6:	085b      	lsrs	r3, r3, #1
 80024f8:	3b01      	subs	r3, #1
 80024fa:	041b      	lsls	r3, r3, #16
 80024fc:	431a      	orrs	r2, r3
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002502:	061b      	lsls	r3, r3, #24
 8002504:	4937      	ldr	r1, [pc, #220]	; (80025e4 <HAL_RCC_OscConfig+0x4e8>)
 8002506:	4313      	orrs	r3, r2
 8002508:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800250a:	4b37      	ldr	r3, [pc, #220]	; (80025e8 <HAL_RCC_OscConfig+0x4ec>)
 800250c:	2201      	movs	r2, #1
 800250e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002510:	f7fe f97e 	bl	8000810 <HAL_GetTick>
 8002514:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002516:	e008      	b.n	800252a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002518:	f7fe f97a 	bl	8000810 <HAL_GetTick>
 800251c:	4602      	mov	r2, r0
 800251e:	693b      	ldr	r3, [r7, #16]
 8002520:	1ad3      	subs	r3, r2, r3
 8002522:	2b02      	cmp	r3, #2
 8002524:	d901      	bls.n	800252a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002526:	2303      	movs	r3, #3
 8002528:	e056      	b.n	80025d8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800252a:	4b2e      	ldr	r3, [pc, #184]	; (80025e4 <HAL_RCC_OscConfig+0x4e8>)
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002532:	2b00      	cmp	r3, #0
 8002534:	d0f0      	beq.n	8002518 <HAL_RCC_OscConfig+0x41c>
 8002536:	e04e      	b.n	80025d6 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002538:	4b2b      	ldr	r3, [pc, #172]	; (80025e8 <HAL_RCC_OscConfig+0x4ec>)
 800253a:	2200      	movs	r2, #0
 800253c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800253e:	f7fe f967 	bl	8000810 <HAL_GetTick>
 8002542:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002544:	e008      	b.n	8002558 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002546:	f7fe f963 	bl	8000810 <HAL_GetTick>
 800254a:	4602      	mov	r2, r0
 800254c:	693b      	ldr	r3, [r7, #16]
 800254e:	1ad3      	subs	r3, r2, r3
 8002550:	2b02      	cmp	r3, #2
 8002552:	d901      	bls.n	8002558 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002554:	2303      	movs	r3, #3
 8002556:	e03f      	b.n	80025d8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002558:	4b22      	ldr	r3, [pc, #136]	; (80025e4 <HAL_RCC_OscConfig+0x4e8>)
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002560:	2b00      	cmp	r3, #0
 8002562:	d1f0      	bne.n	8002546 <HAL_RCC_OscConfig+0x44a>
 8002564:	e037      	b.n	80025d6 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	699b      	ldr	r3, [r3, #24]
 800256a:	2b01      	cmp	r3, #1
 800256c:	d101      	bne.n	8002572 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800256e:	2301      	movs	r3, #1
 8002570:	e032      	b.n	80025d8 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002572:	4b1c      	ldr	r3, [pc, #112]	; (80025e4 <HAL_RCC_OscConfig+0x4e8>)
 8002574:	685b      	ldr	r3, [r3, #4]
 8002576:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	699b      	ldr	r3, [r3, #24]
 800257c:	2b01      	cmp	r3, #1
 800257e:	d028      	beq.n	80025d2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800258a:	429a      	cmp	r2, r3
 800258c:	d121      	bne.n	80025d2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002598:	429a      	cmp	r2, r3
 800259a:	d11a      	bne.n	80025d2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800259c:	68fa      	ldr	r2, [r7, #12]
 800259e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80025a2:	4013      	ands	r3, r2
 80025a4:	687a      	ldr	r2, [r7, #4]
 80025a6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80025a8:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80025aa:	4293      	cmp	r3, r2
 80025ac:	d111      	bne.n	80025d2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025b8:	085b      	lsrs	r3, r3, #1
 80025ba:	3b01      	subs	r3, #1
 80025bc:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80025be:	429a      	cmp	r2, r3
 80025c0:	d107      	bne.n	80025d2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025cc:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80025ce:	429a      	cmp	r2, r3
 80025d0:	d001      	beq.n	80025d6 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80025d2:	2301      	movs	r3, #1
 80025d4:	e000      	b.n	80025d8 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80025d6:	2300      	movs	r3, #0
}
 80025d8:	4618      	mov	r0, r3
 80025da:	3718      	adds	r7, #24
 80025dc:	46bd      	mov	sp, r7
 80025de:	bd80      	pop	{r7, pc}
 80025e0:	40007000 	.word	0x40007000
 80025e4:	40023800 	.word	0x40023800
 80025e8:	42470060 	.word	0x42470060

080025ec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	b084      	sub	sp, #16
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	6078      	str	r0, [r7, #4]
 80025f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d101      	bne.n	8002600 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80025fc:	2301      	movs	r3, #1
 80025fe:	e0cc      	b.n	800279a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002600:	4b68      	ldr	r3, [pc, #416]	; (80027a4 <HAL_RCC_ClockConfig+0x1b8>)
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f003 0307 	and.w	r3, r3, #7
 8002608:	683a      	ldr	r2, [r7, #0]
 800260a:	429a      	cmp	r2, r3
 800260c:	d90c      	bls.n	8002628 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800260e:	4b65      	ldr	r3, [pc, #404]	; (80027a4 <HAL_RCC_ClockConfig+0x1b8>)
 8002610:	683a      	ldr	r2, [r7, #0]
 8002612:	b2d2      	uxtb	r2, r2
 8002614:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002616:	4b63      	ldr	r3, [pc, #396]	; (80027a4 <HAL_RCC_ClockConfig+0x1b8>)
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f003 0307 	and.w	r3, r3, #7
 800261e:	683a      	ldr	r2, [r7, #0]
 8002620:	429a      	cmp	r2, r3
 8002622:	d001      	beq.n	8002628 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002624:	2301      	movs	r3, #1
 8002626:	e0b8      	b.n	800279a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f003 0302 	and.w	r3, r3, #2
 8002630:	2b00      	cmp	r3, #0
 8002632:	d020      	beq.n	8002676 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f003 0304 	and.w	r3, r3, #4
 800263c:	2b00      	cmp	r3, #0
 800263e:	d005      	beq.n	800264c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002640:	4b59      	ldr	r3, [pc, #356]	; (80027a8 <HAL_RCC_ClockConfig+0x1bc>)
 8002642:	689b      	ldr	r3, [r3, #8]
 8002644:	4a58      	ldr	r2, [pc, #352]	; (80027a8 <HAL_RCC_ClockConfig+0x1bc>)
 8002646:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800264a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f003 0308 	and.w	r3, r3, #8
 8002654:	2b00      	cmp	r3, #0
 8002656:	d005      	beq.n	8002664 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002658:	4b53      	ldr	r3, [pc, #332]	; (80027a8 <HAL_RCC_ClockConfig+0x1bc>)
 800265a:	689b      	ldr	r3, [r3, #8]
 800265c:	4a52      	ldr	r2, [pc, #328]	; (80027a8 <HAL_RCC_ClockConfig+0x1bc>)
 800265e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002662:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002664:	4b50      	ldr	r3, [pc, #320]	; (80027a8 <HAL_RCC_ClockConfig+0x1bc>)
 8002666:	689b      	ldr	r3, [r3, #8]
 8002668:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	689b      	ldr	r3, [r3, #8]
 8002670:	494d      	ldr	r1, [pc, #308]	; (80027a8 <HAL_RCC_ClockConfig+0x1bc>)
 8002672:	4313      	orrs	r3, r2
 8002674:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f003 0301 	and.w	r3, r3, #1
 800267e:	2b00      	cmp	r3, #0
 8002680:	d044      	beq.n	800270c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	685b      	ldr	r3, [r3, #4]
 8002686:	2b01      	cmp	r3, #1
 8002688:	d107      	bne.n	800269a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800268a:	4b47      	ldr	r3, [pc, #284]	; (80027a8 <HAL_RCC_ClockConfig+0x1bc>)
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002692:	2b00      	cmp	r3, #0
 8002694:	d119      	bne.n	80026ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002696:	2301      	movs	r3, #1
 8002698:	e07f      	b.n	800279a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	685b      	ldr	r3, [r3, #4]
 800269e:	2b02      	cmp	r3, #2
 80026a0:	d003      	beq.n	80026aa <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80026a6:	2b03      	cmp	r3, #3
 80026a8:	d107      	bne.n	80026ba <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80026aa:	4b3f      	ldr	r3, [pc, #252]	; (80027a8 <HAL_RCC_ClockConfig+0x1bc>)
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d109      	bne.n	80026ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026b6:	2301      	movs	r3, #1
 80026b8:	e06f      	b.n	800279a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026ba:	4b3b      	ldr	r3, [pc, #236]	; (80027a8 <HAL_RCC_ClockConfig+0x1bc>)
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f003 0302 	and.w	r3, r3, #2
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d101      	bne.n	80026ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026c6:	2301      	movs	r3, #1
 80026c8:	e067      	b.n	800279a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80026ca:	4b37      	ldr	r3, [pc, #220]	; (80027a8 <HAL_RCC_ClockConfig+0x1bc>)
 80026cc:	689b      	ldr	r3, [r3, #8]
 80026ce:	f023 0203 	bic.w	r2, r3, #3
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	685b      	ldr	r3, [r3, #4]
 80026d6:	4934      	ldr	r1, [pc, #208]	; (80027a8 <HAL_RCC_ClockConfig+0x1bc>)
 80026d8:	4313      	orrs	r3, r2
 80026da:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80026dc:	f7fe f898 	bl	8000810 <HAL_GetTick>
 80026e0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026e2:	e00a      	b.n	80026fa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80026e4:	f7fe f894 	bl	8000810 <HAL_GetTick>
 80026e8:	4602      	mov	r2, r0
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	1ad3      	subs	r3, r2, r3
 80026ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80026f2:	4293      	cmp	r3, r2
 80026f4:	d901      	bls.n	80026fa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80026f6:	2303      	movs	r3, #3
 80026f8:	e04f      	b.n	800279a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026fa:	4b2b      	ldr	r3, [pc, #172]	; (80027a8 <HAL_RCC_ClockConfig+0x1bc>)
 80026fc:	689b      	ldr	r3, [r3, #8]
 80026fe:	f003 020c 	and.w	r2, r3, #12
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	685b      	ldr	r3, [r3, #4]
 8002706:	009b      	lsls	r3, r3, #2
 8002708:	429a      	cmp	r2, r3
 800270a:	d1eb      	bne.n	80026e4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800270c:	4b25      	ldr	r3, [pc, #148]	; (80027a4 <HAL_RCC_ClockConfig+0x1b8>)
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f003 0307 	and.w	r3, r3, #7
 8002714:	683a      	ldr	r2, [r7, #0]
 8002716:	429a      	cmp	r2, r3
 8002718:	d20c      	bcs.n	8002734 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800271a:	4b22      	ldr	r3, [pc, #136]	; (80027a4 <HAL_RCC_ClockConfig+0x1b8>)
 800271c:	683a      	ldr	r2, [r7, #0]
 800271e:	b2d2      	uxtb	r2, r2
 8002720:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002722:	4b20      	ldr	r3, [pc, #128]	; (80027a4 <HAL_RCC_ClockConfig+0x1b8>)
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f003 0307 	and.w	r3, r3, #7
 800272a:	683a      	ldr	r2, [r7, #0]
 800272c:	429a      	cmp	r2, r3
 800272e:	d001      	beq.n	8002734 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002730:	2301      	movs	r3, #1
 8002732:	e032      	b.n	800279a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f003 0304 	and.w	r3, r3, #4
 800273c:	2b00      	cmp	r3, #0
 800273e:	d008      	beq.n	8002752 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002740:	4b19      	ldr	r3, [pc, #100]	; (80027a8 <HAL_RCC_ClockConfig+0x1bc>)
 8002742:	689b      	ldr	r3, [r3, #8]
 8002744:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	68db      	ldr	r3, [r3, #12]
 800274c:	4916      	ldr	r1, [pc, #88]	; (80027a8 <HAL_RCC_ClockConfig+0x1bc>)
 800274e:	4313      	orrs	r3, r2
 8002750:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f003 0308 	and.w	r3, r3, #8
 800275a:	2b00      	cmp	r3, #0
 800275c:	d009      	beq.n	8002772 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800275e:	4b12      	ldr	r3, [pc, #72]	; (80027a8 <HAL_RCC_ClockConfig+0x1bc>)
 8002760:	689b      	ldr	r3, [r3, #8]
 8002762:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	691b      	ldr	r3, [r3, #16]
 800276a:	00db      	lsls	r3, r3, #3
 800276c:	490e      	ldr	r1, [pc, #56]	; (80027a8 <HAL_RCC_ClockConfig+0x1bc>)
 800276e:	4313      	orrs	r3, r2
 8002770:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002772:	f000 f821 	bl	80027b8 <HAL_RCC_GetSysClockFreq>
 8002776:	4602      	mov	r2, r0
 8002778:	4b0b      	ldr	r3, [pc, #44]	; (80027a8 <HAL_RCC_ClockConfig+0x1bc>)
 800277a:	689b      	ldr	r3, [r3, #8]
 800277c:	091b      	lsrs	r3, r3, #4
 800277e:	f003 030f 	and.w	r3, r3, #15
 8002782:	490a      	ldr	r1, [pc, #40]	; (80027ac <HAL_RCC_ClockConfig+0x1c0>)
 8002784:	5ccb      	ldrb	r3, [r1, r3]
 8002786:	fa22 f303 	lsr.w	r3, r2, r3
 800278a:	4a09      	ldr	r2, [pc, #36]	; (80027b0 <HAL_RCC_ClockConfig+0x1c4>)
 800278c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800278e:	4b09      	ldr	r3, [pc, #36]	; (80027b4 <HAL_RCC_ClockConfig+0x1c8>)
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	4618      	mov	r0, r3
 8002794:	f7fd fff8 	bl	8000788 <HAL_InitTick>

  return HAL_OK;
 8002798:	2300      	movs	r3, #0
}
 800279a:	4618      	mov	r0, r3
 800279c:	3710      	adds	r7, #16
 800279e:	46bd      	mov	sp, r7
 80027a0:	bd80      	pop	{r7, pc}
 80027a2:	bf00      	nop
 80027a4:	40023c00 	.word	0x40023c00
 80027a8:	40023800 	.word	0x40023800
 80027ac:	080078dc 	.word	0x080078dc
 80027b0:	20000000 	.word	0x20000000
 80027b4:	20000004 	.word	0x20000004

080027b8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80027b8:	b5b0      	push	{r4, r5, r7, lr}
 80027ba:	b084      	sub	sp, #16
 80027bc:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80027be:	2100      	movs	r1, #0
 80027c0:	6079      	str	r1, [r7, #4]
 80027c2:	2100      	movs	r1, #0
 80027c4:	60f9      	str	r1, [r7, #12]
 80027c6:	2100      	movs	r1, #0
 80027c8:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80027ca:	2100      	movs	r1, #0
 80027cc:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80027ce:	4952      	ldr	r1, [pc, #328]	; (8002918 <HAL_RCC_GetSysClockFreq+0x160>)
 80027d0:	6889      	ldr	r1, [r1, #8]
 80027d2:	f001 010c 	and.w	r1, r1, #12
 80027d6:	2908      	cmp	r1, #8
 80027d8:	d00d      	beq.n	80027f6 <HAL_RCC_GetSysClockFreq+0x3e>
 80027da:	2908      	cmp	r1, #8
 80027dc:	f200 8094 	bhi.w	8002908 <HAL_RCC_GetSysClockFreq+0x150>
 80027e0:	2900      	cmp	r1, #0
 80027e2:	d002      	beq.n	80027ea <HAL_RCC_GetSysClockFreq+0x32>
 80027e4:	2904      	cmp	r1, #4
 80027e6:	d003      	beq.n	80027f0 <HAL_RCC_GetSysClockFreq+0x38>
 80027e8:	e08e      	b.n	8002908 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80027ea:	4b4c      	ldr	r3, [pc, #304]	; (800291c <HAL_RCC_GetSysClockFreq+0x164>)
 80027ec:	60bb      	str	r3, [r7, #8]
       break;
 80027ee:	e08e      	b.n	800290e <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80027f0:	4b4b      	ldr	r3, [pc, #300]	; (8002920 <HAL_RCC_GetSysClockFreq+0x168>)
 80027f2:	60bb      	str	r3, [r7, #8]
      break;
 80027f4:	e08b      	b.n	800290e <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80027f6:	4948      	ldr	r1, [pc, #288]	; (8002918 <HAL_RCC_GetSysClockFreq+0x160>)
 80027f8:	6849      	ldr	r1, [r1, #4]
 80027fa:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 80027fe:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002800:	4945      	ldr	r1, [pc, #276]	; (8002918 <HAL_RCC_GetSysClockFreq+0x160>)
 8002802:	6849      	ldr	r1, [r1, #4]
 8002804:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8002808:	2900      	cmp	r1, #0
 800280a:	d024      	beq.n	8002856 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800280c:	4942      	ldr	r1, [pc, #264]	; (8002918 <HAL_RCC_GetSysClockFreq+0x160>)
 800280e:	6849      	ldr	r1, [r1, #4]
 8002810:	0989      	lsrs	r1, r1, #6
 8002812:	4608      	mov	r0, r1
 8002814:	f04f 0100 	mov.w	r1, #0
 8002818:	f240 14ff 	movw	r4, #511	; 0x1ff
 800281c:	f04f 0500 	mov.w	r5, #0
 8002820:	ea00 0204 	and.w	r2, r0, r4
 8002824:	ea01 0305 	and.w	r3, r1, r5
 8002828:	493d      	ldr	r1, [pc, #244]	; (8002920 <HAL_RCC_GetSysClockFreq+0x168>)
 800282a:	fb01 f003 	mul.w	r0, r1, r3
 800282e:	2100      	movs	r1, #0
 8002830:	fb01 f102 	mul.w	r1, r1, r2
 8002834:	1844      	adds	r4, r0, r1
 8002836:	493a      	ldr	r1, [pc, #232]	; (8002920 <HAL_RCC_GetSysClockFreq+0x168>)
 8002838:	fba2 0101 	umull	r0, r1, r2, r1
 800283c:	1863      	adds	r3, r4, r1
 800283e:	4619      	mov	r1, r3
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	461a      	mov	r2, r3
 8002844:	f04f 0300 	mov.w	r3, #0
 8002848:	f7fd fcc6 	bl	80001d8 <__aeabi_uldivmod>
 800284c:	4602      	mov	r2, r0
 800284e:	460b      	mov	r3, r1
 8002850:	4613      	mov	r3, r2
 8002852:	60fb      	str	r3, [r7, #12]
 8002854:	e04a      	b.n	80028ec <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002856:	4b30      	ldr	r3, [pc, #192]	; (8002918 <HAL_RCC_GetSysClockFreq+0x160>)
 8002858:	685b      	ldr	r3, [r3, #4]
 800285a:	099b      	lsrs	r3, r3, #6
 800285c:	461a      	mov	r2, r3
 800285e:	f04f 0300 	mov.w	r3, #0
 8002862:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002866:	f04f 0100 	mov.w	r1, #0
 800286a:	ea02 0400 	and.w	r4, r2, r0
 800286e:	ea03 0501 	and.w	r5, r3, r1
 8002872:	4620      	mov	r0, r4
 8002874:	4629      	mov	r1, r5
 8002876:	f04f 0200 	mov.w	r2, #0
 800287a:	f04f 0300 	mov.w	r3, #0
 800287e:	014b      	lsls	r3, r1, #5
 8002880:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002884:	0142      	lsls	r2, r0, #5
 8002886:	4610      	mov	r0, r2
 8002888:	4619      	mov	r1, r3
 800288a:	1b00      	subs	r0, r0, r4
 800288c:	eb61 0105 	sbc.w	r1, r1, r5
 8002890:	f04f 0200 	mov.w	r2, #0
 8002894:	f04f 0300 	mov.w	r3, #0
 8002898:	018b      	lsls	r3, r1, #6
 800289a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800289e:	0182      	lsls	r2, r0, #6
 80028a0:	1a12      	subs	r2, r2, r0
 80028a2:	eb63 0301 	sbc.w	r3, r3, r1
 80028a6:	f04f 0000 	mov.w	r0, #0
 80028aa:	f04f 0100 	mov.w	r1, #0
 80028ae:	00d9      	lsls	r1, r3, #3
 80028b0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80028b4:	00d0      	lsls	r0, r2, #3
 80028b6:	4602      	mov	r2, r0
 80028b8:	460b      	mov	r3, r1
 80028ba:	1912      	adds	r2, r2, r4
 80028bc:	eb45 0303 	adc.w	r3, r5, r3
 80028c0:	f04f 0000 	mov.w	r0, #0
 80028c4:	f04f 0100 	mov.w	r1, #0
 80028c8:	0299      	lsls	r1, r3, #10
 80028ca:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80028ce:	0290      	lsls	r0, r2, #10
 80028d0:	4602      	mov	r2, r0
 80028d2:	460b      	mov	r3, r1
 80028d4:	4610      	mov	r0, r2
 80028d6:	4619      	mov	r1, r3
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	461a      	mov	r2, r3
 80028dc:	f04f 0300 	mov.w	r3, #0
 80028e0:	f7fd fc7a 	bl	80001d8 <__aeabi_uldivmod>
 80028e4:	4602      	mov	r2, r0
 80028e6:	460b      	mov	r3, r1
 80028e8:	4613      	mov	r3, r2
 80028ea:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80028ec:	4b0a      	ldr	r3, [pc, #40]	; (8002918 <HAL_RCC_GetSysClockFreq+0x160>)
 80028ee:	685b      	ldr	r3, [r3, #4]
 80028f0:	0c1b      	lsrs	r3, r3, #16
 80028f2:	f003 0303 	and.w	r3, r3, #3
 80028f6:	3301      	adds	r3, #1
 80028f8:	005b      	lsls	r3, r3, #1
 80028fa:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80028fc:	68fa      	ldr	r2, [r7, #12]
 80028fe:	683b      	ldr	r3, [r7, #0]
 8002900:	fbb2 f3f3 	udiv	r3, r2, r3
 8002904:	60bb      	str	r3, [r7, #8]
      break;
 8002906:	e002      	b.n	800290e <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002908:	4b04      	ldr	r3, [pc, #16]	; (800291c <HAL_RCC_GetSysClockFreq+0x164>)
 800290a:	60bb      	str	r3, [r7, #8]
      break;
 800290c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800290e:	68bb      	ldr	r3, [r7, #8]
}
 8002910:	4618      	mov	r0, r3
 8002912:	3710      	adds	r7, #16
 8002914:	46bd      	mov	sp, r7
 8002916:	bdb0      	pop	{r4, r5, r7, pc}
 8002918:	40023800 	.word	0x40023800
 800291c:	00f42400 	.word	0x00f42400
 8002920:	017d7840 	.word	0x017d7840

08002924 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002924:	b480      	push	{r7}
 8002926:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002928:	4b03      	ldr	r3, [pc, #12]	; (8002938 <HAL_RCC_GetHCLKFreq+0x14>)
 800292a:	681b      	ldr	r3, [r3, #0]
}
 800292c:	4618      	mov	r0, r3
 800292e:	46bd      	mov	sp, r7
 8002930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002934:	4770      	bx	lr
 8002936:	bf00      	nop
 8002938:	20000000 	.word	0x20000000

0800293c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800293c:	b084      	sub	sp, #16
 800293e:	b580      	push	{r7, lr}
 8002940:	b084      	sub	sp, #16
 8002942:	af00      	add	r7, sp, #0
 8002944:	6078      	str	r0, [r7, #4]
 8002946:	f107 001c 	add.w	r0, r7, #28
 800294a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800294e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002950:	2b01      	cmp	r3, #1
 8002952:	d122      	bne.n	800299a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002958:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	68db      	ldr	r3, [r3, #12]
 8002964:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8002968:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800296c:	687a      	ldr	r2, [r7, #4]
 800296e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	68db      	ldr	r3, [r3, #12]
 8002974:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800297c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800297e:	2b01      	cmp	r3, #1
 8002980:	d105      	bne.n	800298e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	68db      	ldr	r3, [r3, #12]
 8002986:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800298e:	6878      	ldr	r0, [r7, #4]
 8002990:	f001 fb1c 	bl	8003fcc <USB_CoreReset>
 8002994:	4603      	mov	r3, r0
 8002996:	73fb      	strb	r3, [r7, #15]
 8002998:	e01a      	b.n	80029d0 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	68db      	ldr	r3, [r3, #12]
 800299e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80029a6:	6878      	ldr	r0, [r7, #4]
 80029a8:	f001 fb10 	bl	8003fcc <USB_CoreReset>
 80029ac:	4603      	mov	r3, r0
 80029ae:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80029b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d106      	bne.n	80029c4 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029ba:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	639a      	str	r2, [r3, #56]	; 0x38
 80029c2:	e005      	b.n	80029d0 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029c8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80029d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029d2:	2b01      	cmp	r3, #1
 80029d4:	d10b      	bne.n	80029ee <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	689b      	ldr	r3, [r3, #8]
 80029da:	f043 0206 	orr.w	r2, r3, #6
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	689b      	ldr	r3, [r3, #8]
 80029e6:	f043 0220 	orr.w	r2, r3, #32
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80029ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80029f0:	4618      	mov	r0, r3
 80029f2:	3710      	adds	r7, #16
 80029f4:	46bd      	mov	sp, r7
 80029f6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80029fa:	b004      	add	sp, #16
 80029fc:	4770      	bx	lr
	...

08002a00 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8002a00:	b480      	push	{r7}
 8002a02:	b087      	sub	sp, #28
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	60f8      	str	r0, [r7, #12]
 8002a08:	60b9      	str	r1, [r7, #8]
 8002a0a:	4613      	mov	r3, r2
 8002a0c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8002a0e:	79fb      	ldrb	r3, [r7, #7]
 8002a10:	2b02      	cmp	r3, #2
 8002a12:	d165      	bne.n	8002ae0 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8002a14:	68bb      	ldr	r3, [r7, #8]
 8002a16:	4a41      	ldr	r2, [pc, #260]	; (8002b1c <USB_SetTurnaroundTime+0x11c>)
 8002a18:	4293      	cmp	r3, r2
 8002a1a:	d906      	bls.n	8002a2a <USB_SetTurnaroundTime+0x2a>
 8002a1c:	68bb      	ldr	r3, [r7, #8]
 8002a1e:	4a40      	ldr	r2, [pc, #256]	; (8002b20 <USB_SetTurnaroundTime+0x120>)
 8002a20:	4293      	cmp	r3, r2
 8002a22:	d202      	bcs.n	8002a2a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8002a24:	230f      	movs	r3, #15
 8002a26:	617b      	str	r3, [r7, #20]
 8002a28:	e062      	b.n	8002af0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8002a2a:	68bb      	ldr	r3, [r7, #8]
 8002a2c:	4a3c      	ldr	r2, [pc, #240]	; (8002b20 <USB_SetTurnaroundTime+0x120>)
 8002a2e:	4293      	cmp	r3, r2
 8002a30:	d306      	bcc.n	8002a40 <USB_SetTurnaroundTime+0x40>
 8002a32:	68bb      	ldr	r3, [r7, #8]
 8002a34:	4a3b      	ldr	r2, [pc, #236]	; (8002b24 <USB_SetTurnaroundTime+0x124>)
 8002a36:	4293      	cmp	r3, r2
 8002a38:	d202      	bcs.n	8002a40 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8002a3a:	230e      	movs	r3, #14
 8002a3c:	617b      	str	r3, [r7, #20]
 8002a3e:	e057      	b.n	8002af0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8002a40:	68bb      	ldr	r3, [r7, #8]
 8002a42:	4a38      	ldr	r2, [pc, #224]	; (8002b24 <USB_SetTurnaroundTime+0x124>)
 8002a44:	4293      	cmp	r3, r2
 8002a46:	d306      	bcc.n	8002a56 <USB_SetTurnaroundTime+0x56>
 8002a48:	68bb      	ldr	r3, [r7, #8]
 8002a4a:	4a37      	ldr	r2, [pc, #220]	; (8002b28 <USB_SetTurnaroundTime+0x128>)
 8002a4c:	4293      	cmp	r3, r2
 8002a4e:	d202      	bcs.n	8002a56 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8002a50:	230d      	movs	r3, #13
 8002a52:	617b      	str	r3, [r7, #20]
 8002a54:	e04c      	b.n	8002af0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8002a56:	68bb      	ldr	r3, [r7, #8]
 8002a58:	4a33      	ldr	r2, [pc, #204]	; (8002b28 <USB_SetTurnaroundTime+0x128>)
 8002a5a:	4293      	cmp	r3, r2
 8002a5c:	d306      	bcc.n	8002a6c <USB_SetTurnaroundTime+0x6c>
 8002a5e:	68bb      	ldr	r3, [r7, #8]
 8002a60:	4a32      	ldr	r2, [pc, #200]	; (8002b2c <USB_SetTurnaroundTime+0x12c>)
 8002a62:	4293      	cmp	r3, r2
 8002a64:	d802      	bhi.n	8002a6c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8002a66:	230c      	movs	r3, #12
 8002a68:	617b      	str	r3, [r7, #20]
 8002a6a:	e041      	b.n	8002af0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8002a6c:	68bb      	ldr	r3, [r7, #8]
 8002a6e:	4a2f      	ldr	r2, [pc, #188]	; (8002b2c <USB_SetTurnaroundTime+0x12c>)
 8002a70:	4293      	cmp	r3, r2
 8002a72:	d906      	bls.n	8002a82 <USB_SetTurnaroundTime+0x82>
 8002a74:	68bb      	ldr	r3, [r7, #8]
 8002a76:	4a2e      	ldr	r2, [pc, #184]	; (8002b30 <USB_SetTurnaroundTime+0x130>)
 8002a78:	4293      	cmp	r3, r2
 8002a7a:	d802      	bhi.n	8002a82 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8002a7c:	230b      	movs	r3, #11
 8002a7e:	617b      	str	r3, [r7, #20]
 8002a80:	e036      	b.n	8002af0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8002a82:	68bb      	ldr	r3, [r7, #8]
 8002a84:	4a2a      	ldr	r2, [pc, #168]	; (8002b30 <USB_SetTurnaroundTime+0x130>)
 8002a86:	4293      	cmp	r3, r2
 8002a88:	d906      	bls.n	8002a98 <USB_SetTurnaroundTime+0x98>
 8002a8a:	68bb      	ldr	r3, [r7, #8]
 8002a8c:	4a29      	ldr	r2, [pc, #164]	; (8002b34 <USB_SetTurnaroundTime+0x134>)
 8002a8e:	4293      	cmp	r3, r2
 8002a90:	d802      	bhi.n	8002a98 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8002a92:	230a      	movs	r3, #10
 8002a94:	617b      	str	r3, [r7, #20]
 8002a96:	e02b      	b.n	8002af0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8002a98:	68bb      	ldr	r3, [r7, #8]
 8002a9a:	4a26      	ldr	r2, [pc, #152]	; (8002b34 <USB_SetTurnaroundTime+0x134>)
 8002a9c:	4293      	cmp	r3, r2
 8002a9e:	d906      	bls.n	8002aae <USB_SetTurnaroundTime+0xae>
 8002aa0:	68bb      	ldr	r3, [r7, #8]
 8002aa2:	4a25      	ldr	r2, [pc, #148]	; (8002b38 <USB_SetTurnaroundTime+0x138>)
 8002aa4:	4293      	cmp	r3, r2
 8002aa6:	d202      	bcs.n	8002aae <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8002aa8:	2309      	movs	r3, #9
 8002aaa:	617b      	str	r3, [r7, #20]
 8002aac:	e020      	b.n	8002af0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8002aae:	68bb      	ldr	r3, [r7, #8]
 8002ab0:	4a21      	ldr	r2, [pc, #132]	; (8002b38 <USB_SetTurnaroundTime+0x138>)
 8002ab2:	4293      	cmp	r3, r2
 8002ab4:	d306      	bcc.n	8002ac4 <USB_SetTurnaroundTime+0xc4>
 8002ab6:	68bb      	ldr	r3, [r7, #8]
 8002ab8:	4a20      	ldr	r2, [pc, #128]	; (8002b3c <USB_SetTurnaroundTime+0x13c>)
 8002aba:	4293      	cmp	r3, r2
 8002abc:	d802      	bhi.n	8002ac4 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8002abe:	2308      	movs	r3, #8
 8002ac0:	617b      	str	r3, [r7, #20]
 8002ac2:	e015      	b.n	8002af0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8002ac4:	68bb      	ldr	r3, [r7, #8]
 8002ac6:	4a1d      	ldr	r2, [pc, #116]	; (8002b3c <USB_SetTurnaroundTime+0x13c>)
 8002ac8:	4293      	cmp	r3, r2
 8002aca:	d906      	bls.n	8002ada <USB_SetTurnaroundTime+0xda>
 8002acc:	68bb      	ldr	r3, [r7, #8]
 8002ace:	4a1c      	ldr	r2, [pc, #112]	; (8002b40 <USB_SetTurnaroundTime+0x140>)
 8002ad0:	4293      	cmp	r3, r2
 8002ad2:	d202      	bcs.n	8002ada <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8002ad4:	2307      	movs	r3, #7
 8002ad6:	617b      	str	r3, [r7, #20]
 8002ad8:	e00a      	b.n	8002af0 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8002ada:	2306      	movs	r3, #6
 8002adc:	617b      	str	r3, [r7, #20]
 8002ade:	e007      	b.n	8002af0 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8002ae0:	79fb      	ldrb	r3, [r7, #7]
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d102      	bne.n	8002aec <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8002ae6:	2309      	movs	r3, #9
 8002ae8:	617b      	str	r3, [r7, #20]
 8002aea:	e001      	b.n	8002af0 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8002aec:	2309      	movs	r3, #9
 8002aee:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	68db      	ldr	r3, [r3, #12]
 8002af4:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	68da      	ldr	r2, [r3, #12]
 8002b00:	697b      	ldr	r3, [r7, #20]
 8002b02:	029b      	lsls	r3, r3, #10
 8002b04:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8002b08:	431a      	orrs	r2, r3
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8002b0e:	2300      	movs	r3, #0
}
 8002b10:	4618      	mov	r0, r3
 8002b12:	371c      	adds	r7, #28
 8002b14:	46bd      	mov	sp, r7
 8002b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b1a:	4770      	bx	lr
 8002b1c:	00d8acbf 	.word	0x00d8acbf
 8002b20:	00e4e1c0 	.word	0x00e4e1c0
 8002b24:	00f42400 	.word	0x00f42400
 8002b28:	01067380 	.word	0x01067380
 8002b2c:	011a499f 	.word	0x011a499f
 8002b30:	01312cff 	.word	0x01312cff
 8002b34:	014ca43f 	.word	0x014ca43f
 8002b38:	016e3600 	.word	0x016e3600
 8002b3c:	01a6ab1f 	.word	0x01a6ab1f
 8002b40:	01e84800 	.word	0x01e84800

08002b44 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8002b44:	b480      	push	{r7}
 8002b46:	b083      	sub	sp, #12
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	689b      	ldr	r3, [r3, #8]
 8002b50:	f043 0201 	orr.w	r2, r3, #1
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8002b58:	2300      	movs	r3, #0
}
 8002b5a:	4618      	mov	r0, r3
 8002b5c:	370c      	adds	r7, #12
 8002b5e:	46bd      	mov	sp, r7
 8002b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b64:	4770      	bx	lr

08002b66 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8002b66:	b480      	push	{r7}
 8002b68:	b083      	sub	sp, #12
 8002b6a:	af00      	add	r7, sp, #0
 8002b6c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	689b      	ldr	r3, [r3, #8]
 8002b72:	f023 0201 	bic.w	r2, r3, #1
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8002b7a:	2300      	movs	r3, #0
}
 8002b7c:	4618      	mov	r0, r3
 8002b7e:	370c      	adds	r7, #12
 8002b80:	46bd      	mov	sp, r7
 8002b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b86:	4770      	bx	lr

08002b88 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8002b88:	b580      	push	{r7, lr}
 8002b8a:	b084      	sub	sp, #16
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	6078      	str	r0, [r7, #4]
 8002b90:	460b      	mov	r3, r1
 8002b92:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8002b94:	2300      	movs	r3, #0
 8002b96:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	68db      	ldr	r3, [r3, #12]
 8002b9c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8002ba4:	78fb      	ldrb	r3, [r7, #3]
 8002ba6:	2b01      	cmp	r3, #1
 8002ba8:	d115      	bne.n	8002bd6 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	68db      	ldr	r3, [r3, #12]
 8002bae:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8002bb6:	2001      	movs	r0, #1
 8002bb8:	f7fd fe36 	bl	8000828 <HAL_Delay>
      ms++;
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	3301      	adds	r3, #1
 8002bc0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8002bc2:	6878      	ldr	r0, [r7, #4]
 8002bc4:	f001 f972 	bl	8003eac <USB_GetMode>
 8002bc8:	4603      	mov	r3, r0
 8002bca:	2b01      	cmp	r3, #1
 8002bcc:	d01e      	beq.n	8002c0c <USB_SetCurrentMode+0x84>
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	2b31      	cmp	r3, #49	; 0x31
 8002bd2:	d9f0      	bls.n	8002bb6 <USB_SetCurrentMode+0x2e>
 8002bd4:	e01a      	b.n	8002c0c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8002bd6:	78fb      	ldrb	r3, [r7, #3]
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d115      	bne.n	8002c08 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	68db      	ldr	r3, [r3, #12]
 8002be0:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8002be8:	2001      	movs	r0, #1
 8002bea:	f7fd fe1d 	bl	8000828 <HAL_Delay>
      ms++;
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	3301      	adds	r3, #1
 8002bf2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8002bf4:	6878      	ldr	r0, [r7, #4]
 8002bf6:	f001 f959 	bl	8003eac <USB_GetMode>
 8002bfa:	4603      	mov	r3, r0
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d005      	beq.n	8002c0c <USB_SetCurrentMode+0x84>
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	2b31      	cmp	r3, #49	; 0x31
 8002c04:	d9f0      	bls.n	8002be8 <USB_SetCurrentMode+0x60>
 8002c06:	e001      	b.n	8002c0c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8002c08:	2301      	movs	r3, #1
 8002c0a:	e005      	b.n	8002c18 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	2b32      	cmp	r3, #50	; 0x32
 8002c10:	d101      	bne.n	8002c16 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8002c12:	2301      	movs	r3, #1
 8002c14:	e000      	b.n	8002c18 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8002c16:	2300      	movs	r3, #0
}
 8002c18:	4618      	mov	r0, r3
 8002c1a:	3710      	adds	r7, #16
 8002c1c:	46bd      	mov	sp, r7
 8002c1e:	bd80      	pop	{r7, pc}

08002c20 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8002c20:	b084      	sub	sp, #16
 8002c22:	b580      	push	{r7, lr}
 8002c24:	b086      	sub	sp, #24
 8002c26:	af00      	add	r7, sp, #0
 8002c28:	6078      	str	r0, [r7, #4]
 8002c2a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8002c2e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8002c32:	2300      	movs	r3, #0
 8002c34:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8002c3a:	2300      	movs	r3, #0
 8002c3c:	613b      	str	r3, [r7, #16]
 8002c3e:	e009      	b.n	8002c54 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8002c40:	687a      	ldr	r2, [r7, #4]
 8002c42:	693b      	ldr	r3, [r7, #16]
 8002c44:	3340      	adds	r3, #64	; 0x40
 8002c46:	009b      	lsls	r3, r3, #2
 8002c48:	4413      	add	r3, r2
 8002c4a:	2200      	movs	r2, #0
 8002c4c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8002c4e:	693b      	ldr	r3, [r7, #16]
 8002c50:	3301      	adds	r3, #1
 8002c52:	613b      	str	r3, [r7, #16]
 8002c54:	693b      	ldr	r3, [r7, #16]
 8002c56:	2b0e      	cmp	r3, #14
 8002c58:	d9f2      	bls.n	8002c40 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8002c5a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d11c      	bne.n	8002c9a <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002c66:	685b      	ldr	r3, [r3, #4]
 8002c68:	68fa      	ldr	r2, [r7, #12]
 8002c6a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002c6e:	f043 0302 	orr.w	r3, r3, #2
 8002c72:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c78:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c84:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c90:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	639a      	str	r2, [r3, #56]	; 0x38
 8002c98:	e00b      	b.n	8002cb2 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c9e:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002caa:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8002cb8:	461a      	mov	r2, r3
 8002cba:	2300      	movs	r3, #0
 8002cbc:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002cc4:	4619      	mov	r1, r3
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002ccc:	461a      	mov	r2, r3
 8002cce:	680b      	ldr	r3, [r1, #0]
 8002cd0:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8002cd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002cd4:	2b01      	cmp	r3, #1
 8002cd6:	d10c      	bne.n	8002cf2 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8002cd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d104      	bne.n	8002ce8 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8002cde:	2100      	movs	r1, #0
 8002ce0:	6878      	ldr	r0, [r7, #4]
 8002ce2:	f000 f945 	bl	8002f70 <USB_SetDevSpeed>
 8002ce6:	e008      	b.n	8002cfa <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8002ce8:	2101      	movs	r1, #1
 8002cea:	6878      	ldr	r0, [r7, #4]
 8002cec:	f000 f940 	bl	8002f70 <USB_SetDevSpeed>
 8002cf0:	e003      	b.n	8002cfa <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8002cf2:	2103      	movs	r1, #3
 8002cf4:	6878      	ldr	r0, [r7, #4]
 8002cf6:	f000 f93b 	bl	8002f70 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8002cfa:	2110      	movs	r1, #16
 8002cfc:	6878      	ldr	r0, [r7, #4]
 8002cfe:	f000 f8f3 	bl	8002ee8 <USB_FlushTxFifo>
 8002d02:	4603      	mov	r3, r0
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d001      	beq.n	8002d0c <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8002d08:	2301      	movs	r3, #1
 8002d0a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8002d0c:	6878      	ldr	r0, [r7, #4]
 8002d0e:	f000 f90f 	bl	8002f30 <USB_FlushRxFifo>
 8002d12:	4603      	mov	r3, r0
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d001      	beq.n	8002d1c <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8002d18:	2301      	movs	r3, #1
 8002d1a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002d22:	461a      	mov	r2, r3
 8002d24:	2300      	movs	r3, #0
 8002d26:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002d2e:	461a      	mov	r2, r3
 8002d30:	2300      	movs	r3, #0
 8002d32:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002d3a:	461a      	mov	r2, r3
 8002d3c:	2300      	movs	r3, #0
 8002d3e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002d40:	2300      	movs	r3, #0
 8002d42:	613b      	str	r3, [r7, #16]
 8002d44:	e043      	b.n	8002dce <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8002d46:	693b      	ldr	r3, [r7, #16]
 8002d48:	015a      	lsls	r2, r3, #5
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	4413      	add	r3, r2
 8002d4e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002d58:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002d5c:	d118      	bne.n	8002d90 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8002d5e:	693b      	ldr	r3, [r7, #16]
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d10a      	bne.n	8002d7a <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8002d64:	693b      	ldr	r3, [r7, #16]
 8002d66:	015a      	lsls	r2, r3, #5
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	4413      	add	r3, r2
 8002d6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002d70:	461a      	mov	r2, r3
 8002d72:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8002d76:	6013      	str	r3, [r2, #0]
 8002d78:	e013      	b.n	8002da2 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8002d7a:	693b      	ldr	r3, [r7, #16]
 8002d7c:	015a      	lsls	r2, r3, #5
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	4413      	add	r3, r2
 8002d82:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002d86:	461a      	mov	r2, r3
 8002d88:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8002d8c:	6013      	str	r3, [r2, #0]
 8002d8e:	e008      	b.n	8002da2 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8002d90:	693b      	ldr	r3, [r7, #16]
 8002d92:	015a      	lsls	r2, r3, #5
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	4413      	add	r3, r2
 8002d98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002d9c:	461a      	mov	r2, r3
 8002d9e:	2300      	movs	r3, #0
 8002da0:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8002da2:	693b      	ldr	r3, [r7, #16]
 8002da4:	015a      	lsls	r2, r3, #5
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	4413      	add	r3, r2
 8002daa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002dae:	461a      	mov	r2, r3
 8002db0:	2300      	movs	r3, #0
 8002db2:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8002db4:	693b      	ldr	r3, [r7, #16]
 8002db6:	015a      	lsls	r2, r3, #5
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	4413      	add	r3, r2
 8002dbc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002dc0:	461a      	mov	r2, r3
 8002dc2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002dc6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002dc8:	693b      	ldr	r3, [r7, #16]
 8002dca:	3301      	adds	r3, #1
 8002dcc:	613b      	str	r3, [r7, #16]
 8002dce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dd0:	693a      	ldr	r2, [r7, #16]
 8002dd2:	429a      	cmp	r2, r3
 8002dd4:	d3b7      	bcc.n	8002d46 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002dd6:	2300      	movs	r3, #0
 8002dd8:	613b      	str	r3, [r7, #16]
 8002dda:	e043      	b.n	8002e64 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8002ddc:	693b      	ldr	r3, [r7, #16]
 8002dde:	015a      	lsls	r2, r3, #5
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	4413      	add	r3, r2
 8002de4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002dee:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002df2:	d118      	bne.n	8002e26 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8002df4:	693b      	ldr	r3, [r7, #16]
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d10a      	bne.n	8002e10 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8002dfa:	693b      	ldr	r3, [r7, #16]
 8002dfc:	015a      	lsls	r2, r3, #5
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	4413      	add	r3, r2
 8002e02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e06:	461a      	mov	r2, r3
 8002e08:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8002e0c:	6013      	str	r3, [r2, #0]
 8002e0e:	e013      	b.n	8002e38 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8002e10:	693b      	ldr	r3, [r7, #16]
 8002e12:	015a      	lsls	r2, r3, #5
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	4413      	add	r3, r2
 8002e18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e1c:	461a      	mov	r2, r3
 8002e1e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8002e22:	6013      	str	r3, [r2, #0]
 8002e24:	e008      	b.n	8002e38 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8002e26:	693b      	ldr	r3, [r7, #16]
 8002e28:	015a      	lsls	r2, r3, #5
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	4413      	add	r3, r2
 8002e2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e32:	461a      	mov	r2, r3
 8002e34:	2300      	movs	r3, #0
 8002e36:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8002e38:	693b      	ldr	r3, [r7, #16]
 8002e3a:	015a      	lsls	r2, r3, #5
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	4413      	add	r3, r2
 8002e40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e44:	461a      	mov	r2, r3
 8002e46:	2300      	movs	r3, #0
 8002e48:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8002e4a:	693b      	ldr	r3, [r7, #16]
 8002e4c:	015a      	lsls	r2, r3, #5
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	4413      	add	r3, r2
 8002e52:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e56:	461a      	mov	r2, r3
 8002e58:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002e5c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002e5e:	693b      	ldr	r3, [r7, #16]
 8002e60:	3301      	adds	r3, #1
 8002e62:	613b      	str	r3, [r7, #16]
 8002e64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e66:	693a      	ldr	r2, [r7, #16]
 8002e68:	429a      	cmp	r2, r3
 8002e6a:	d3b7      	bcc.n	8002ddc <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002e72:	691b      	ldr	r3, [r3, #16]
 8002e74:	68fa      	ldr	r2, [r7, #12]
 8002e76:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002e7a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002e7e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	2200      	movs	r2, #0
 8002e84:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8002e8c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8002e8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d105      	bne.n	8002ea0 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	699b      	ldr	r3, [r3, #24]
 8002e98:	f043 0210 	orr.w	r2, r3, #16
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	699a      	ldr	r2, [r3, #24]
 8002ea4:	4b0f      	ldr	r3, [pc, #60]	; (8002ee4 <USB_DevInit+0x2c4>)
 8002ea6:	4313      	orrs	r3, r2
 8002ea8:	687a      	ldr	r2, [r7, #4]
 8002eaa:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8002eac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d005      	beq.n	8002ebe <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	699b      	ldr	r3, [r3, #24]
 8002eb6:	f043 0208 	orr.w	r2, r3, #8
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8002ebe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002ec0:	2b01      	cmp	r3, #1
 8002ec2:	d107      	bne.n	8002ed4 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	699b      	ldr	r3, [r3, #24]
 8002ec8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002ecc:	f043 0304 	orr.w	r3, r3, #4
 8002ed0:	687a      	ldr	r2, [r7, #4]
 8002ed2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8002ed4:	7dfb      	ldrb	r3, [r7, #23]
}
 8002ed6:	4618      	mov	r0, r3
 8002ed8:	3718      	adds	r7, #24
 8002eda:	46bd      	mov	sp, r7
 8002edc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002ee0:	b004      	add	sp, #16
 8002ee2:	4770      	bx	lr
 8002ee4:	803c3800 	.word	0x803c3800

08002ee8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8002ee8:	b480      	push	{r7}
 8002eea:	b085      	sub	sp, #20
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	6078      	str	r0, [r7, #4]
 8002ef0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8002ef2:	2300      	movs	r3, #0
 8002ef4:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8002ef6:	683b      	ldr	r3, [r7, #0]
 8002ef8:	019b      	lsls	r3, r3, #6
 8002efa:	f043 0220 	orr.w	r2, r3, #32
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	3301      	adds	r3, #1
 8002f06:	60fb      	str	r3, [r7, #12]
 8002f08:	4a08      	ldr	r2, [pc, #32]	; (8002f2c <USB_FlushTxFifo+0x44>)
 8002f0a:	4293      	cmp	r3, r2
 8002f0c:	d901      	bls.n	8002f12 <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 8002f0e:	2303      	movs	r3, #3
 8002f10:	e006      	b.n	8002f20 <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	691b      	ldr	r3, [r3, #16]
 8002f16:	f003 0320 	and.w	r3, r3, #32
 8002f1a:	2b20      	cmp	r3, #32
 8002f1c:	d0f1      	beq.n	8002f02 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8002f1e:	2300      	movs	r3, #0
}
 8002f20:	4618      	mov	r0, r3
 8002f22:	3714      	adds	r7, #20
 8002f24:	46bd      	mov	sp, r7
 8002f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f2a:	4770      	bx	lr
 8002f2c:	00030d40 	.word	0x00030d40

08002f30 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8002f30:	b480      	push	{r7}
 8002f32:	b085      	sub	sp, #20
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8002f38:	2300      	movs	r3, #0
 8002f3a:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	2210      	movs	r2, #16
 8002f40:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	3301      	adds	r3, #1
 8002f46:	60fb      	str	r3, [r7, #12]
 8002f48:	4a08      	ldr	r2, [pc, #32]	; (8002f6c <USB_FlushRxFifo+0x3c>)
 8002f4a:	4293      	cmp	r3, r2
 8002f4c:	d901      	bls.n	8002f52 <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 8002f4e:	2303      	movs	r3, #3
 8002f50:	e006      	b.n	8002f60 <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	691b      	ldr	r3, [r3, #16]
 8002f56:	f003 0310 	and.w	r3, r3, #16
 8002f5a:	2b10      	cmp	r3, #16
 8002f5c:	d0f1      	beq.n	8002f42 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8002f5e:	2300      	movs	r3, #0
}
 8002f60:	4618      	mov	r0, r3
 8002f62:	3714      	adds	r7, #20
 8002f64:	46bd      	mov	sp, r7
 8002f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f6a:	4770      	bx	lr
 8002f6c:	00030d40 	.word	0x00030d40

08002f70 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8002f70:	b480      	push	{r7}
 8002f72:	b085      	sub	sp, #20
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	6078      	str	r0, [r7, #4]
 8002f78:	460b      	mov	r3, r1
 8002f7a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002f86:	681a      	ldr	r2, [r3, #0]
 8002f88:	78fb      	ldrb	r3, [r7, #3]
 8002f8a:	68f9      	ldr	r1, [r7, #12]
 8002f8c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002f90:	4313      	orrs	r3, r2
 8002f92:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8002f94:	2300      	movs	r3, #0
}
 8002f96:	4618      	mov	r0, r3
 8002f98:	3714      	adds	r7, #20
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa0:	4770      	bx	lr

08002fa2 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8002fa2:	b480      	push	{r7}
 8002fa4:	b087      	sub	sp, #28
 8002fa6:	af00      	add	r7, sp, #0
 8002fa8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8002fae:	693b      	ldr	r3, [r7, #16]
 8002fb0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002fb4:	689b      	ldr	r3, [r3, #8]
 8002fb6:	f003 0306 	and.w	r3, r3, #6
 8002fba:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d102      	bne.n	8002fc8 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8002fc2:	2300      	movs	r3, #0
 8002fc4:	75fb      	strb	r3, [r7, #23]
 8002fc6:	e00a      	b.n	8002fde <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	2b02      	cmp	r3, #2
 8002fcc:	d002      	beq.n	8002fd4 <USB_GetDevSpeed+0x32>
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	2b06      	cmp	r3, #6
 8002fd2:	d102      	bne.n	8002fda <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8002fd4:	2302      	movs	r3, #2
 8002fd6:	75fb      	strb	r3, [r7, #23]
 8002fd8:	e001      	b.n	8002fde <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8002fda:	230f      	movs	r3, #15
 8002fdc:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8002fde:	7dfb      	ldrb	r3, [r7, #23]
}
 8002fe0:	4618      	mov	r0, r3
 8002fe2:	371c      	adds	r7, #28
 8002fe4:	46bd      	mov	sp, r7
 8002fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fea:	4770      	bx	lr

08002fec <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8002fec:	b480      	push	{r7}
 8002fee:	b085      	sub	sp, #20
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	6078      	str	r0, [r7, #4]
 8002ff4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8002ffa:	683b      	ldr	r3, [r7, #0]
 8002ffc:	781b      	ldrb	r3, [r3, #0]
 8002ffe:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8003000:	683b      	ldr	r3, [r7, #0]
 8003002:	785b      	ldrb	r3, [r3, #1]
 8003004:	2b01      	cmp	r3, #1
 8003006:	d13a      	bne.n	800307e <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800300e:	69da      	ldr	r2, [r3, #28]
 8003010:	683b      	ldr	r3, [r7, #0]
 8003012:	781b      	ldrb	r3, [r3, #0]
 8003014:	f003 030f 	and.w	r3, r3, #15
 8003018:	2101      	movs	r1, #1
 800301a:	fa01 f303 	lsl.w	r3, r1, r3
 800301e:	b29b      	uxth	r3, r3
 8003020:	68f9      	ldr	r1, [r7, #12]
 8003022:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003026:	4313      	orrs	r3, r2
 8003028:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800302a:	68bb      	ldr	r3, [r7, #8]
 800302c:	015a      	lsls	r2, r3, #5
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	4413      	add	r3, r2
 8003032:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800303c:	2b00      	cmp	r3, #0
 800303e:	d155      	bne.n	80030ec <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003040:	68bb      	ldr	r3, [r7, #8]
 8003042:	015a      	lsls	r2, r3, #5
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	4413      	add	r3, r2
 8003048:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800304c:	681a      	ldr	r2, [r3, #0]
 800304e:	683b      	ldr	r3, [r7, #0]
 8003050:	689b      	ldr	r3, [r3, #8]
 8003052:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8003056:	683b      	ldr	r3, [r7, #0]
 8003058:	78db      	ldrb	r3, [r3, #3]
 800305a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800305c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800305e:	68bb      	ldr	r3, [r7, #8]
 8003060:	059b      	lsls	r3, r3, #22
 8003062:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003064:	4313      	orrs	r3, r2
 8003066:	68ba      	ldr	r2, [r7, #8]
 8003068:	0151      	lsls	r1, r2, #5
 800306a:	68fa      	ldr	r2, [r7, #12]
 800306c:	440a      	add	r2, r1
 800306e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003072:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003076:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800307a:	6013      	str	r3, [r2, #0]
 800307c:	e036      	b.n	80030ec <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003084:	69da      	ldr	r2, [r3, #28]
 8003086:	683b      	ldr	r3, [r7, #0]
 8003088:	781b      	ldrb	r3, [r3, #0]
 800308a:	f003 030f 	and.w	r3, r3, #15
 800308e:	2101      	movs	r1, #1
 8003090:	fa01 f303 	lsl.w	r3, r1, r3
 8003094:	041b      	lsls	r3, r3, #16
 8003096:	68f9      	ldr	r1, [r7, #12]
 8003098:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800309c:	4313      	orrs	r3, r2
 800309e:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80030a0:	68bb      	ldr	r3, [r7, #8]
 80030a2:	015a      	lsls	r2, r3, #5
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	4413      	add	r3, r2
 80030a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d11a      	bne.n	80030ec <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80030b6:	68bb      	ldr	r3, [r7, #8]
 80030b8:	015a      	lsls	r2, r3, #5
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	4413      	add	r3, r2
 80030be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80030c2:	681a      	ldr	r2, [r3, #0]
 80030c4:	683b      	ldr	r3, [r7, #0]
 80030c6:	689b      	ldr	r3, [r3, #8]
 80030c8:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80030cc:	683b      	ldr	r3, [r7, #0]
 80030ce:	78db      	ldrb	r3, [r3, #3]
 80030d0:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80030d2:	430b      	orrs	r3, r1
 80030d4:	4313      	orrs	r3, r2
 80030d6:	68ba      	ldr	r2, [r7, #8]
 80030d8:	0151      	lsls	r1, r2, #5
 80030da:	68fa      	ldr	r2, [r7, #12]
 80030dc:	440a      	add	r2, r1
 80030de:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80030e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80030e6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80030ea:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80030ec:	2300      	movs	r3, #0
}
 80030ee:	4618      	mov	r0, r3
 80030f0:	3714      	adds	r7, #20
 80030f2:	46bd      	mov	sp, r7
 80030f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f8:	4770      	bx	lr
	...

080030fc <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80030fc:	b480      	push	{r7}
 80030fe:	b085      	sub	sp, #20
 8003100:	af00      	add	r7, sp, #0
 8003102:	6078      	str	r0, [r7, #4]
 8003104:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800310a:	683b      	ldr	r3, [r7, #0]
 800310c:	781b      	ldrb	r3, [r3, #0]
 800310e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8003110:	683b      	ldr	r3, [r7, #0]
 8003112:	785b      	ldrb	r3, [r3, #1]
 8003114:	2b01      	cmp	r3, #1
 8003116:	d161      	bne.n	80031dc <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003118:	68bb      	ldr	r3, [r7, #8]
 800311a:	015a      	lsls	r2, r3, #5
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	4413      	add	r3, r2
 8003120:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800312a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800312e:	d11f      	bne.n	8003170 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8003130:	68bb      	ldr	r3, [r7, #8]
 8003132:	015a      	lsls	r2, r3, #5
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	4413      	add	r3, r2
 8003138:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	68ba      	ldr	r2, [r7, #8]
 8003140:	0151      	lsls	r1, r2, #5
 8003142:	68fa      	ldr	r2, [r7, #12]
 8003144:	440a      	add	r2, r1
 8003146:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800314a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800314e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8003150:	68bb      	ldr	r3, [r7, #8]
 8003152:	015a      	lsls	r2, r3, #5
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	4413      	add	r3, r2
 8003158:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	68ba      	ldr	r2, [r7, #8]
 8003160:	0151      	lsls	r1, r2, #5
 8003162:	68fa      	ldr	r2, [r7, #12]
 8003164:	440a      	add	r2, r1
 8003166:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800316a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800316e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003176:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003178:	683b      	ldr	r3, [r7, #0]
 800317a:	781b      	ldrb	r3, [r3, #0]
 800317c:	f003 030f 	and.w	r3, r3, #15
 8003180:	2101      	movs	r1, #1
 8003182:	fa01 f303 	lsl.w	r3, r1, r3
 8003186:	b29b      	uxth	r3, r3
 8003188:	43db      	mvns	r3, r3
 800318a:	68f9      	ldr	r1, [r7, #12]
 800318c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003190:	4013      	ands	r3, r2
 8003192:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800319a:	69da      	ldr	r2, [r3, #28]
 800319c:	683b      	ldr	r3, [r7, #0]
 800319e:	781b      	ldrb	r3, [r3, #0]
 80031a0:	f003 030f 	and.w	r3, r3, #15
 80031a4:	2101      	movs	r1, #1
 80031a6:	fa01 f303 	lsl.w	r3, r1, r3
 80031aa:	b29b      	uxth	r3, r3
 80031ac:	43db      	mvns	r3, r3
 80031ae:	68f9      	ldr	r1, [r7, #12]
 80031b0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80031b4:	4013      	ands	r3, r2
 80031b6:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80031b8:	68bb      	ldr	r3, [r7, #8]
 80031ba:	015a      	lsls	r2, r3, #5
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	4413      	add	r3, r2
 80031c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80031c4:	681a      	ldr	r2, [r3, #0]
 80031c6:	68bb      	ldr	r3, [r7, #8]
 80031c8:	0159      	lsls	r1, r3, #5
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	440b      	add	r3, r1
 80031ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80031d2:	4619      	mov	r1, r3
 80031d4:	4b35      	ldr	r3, [pc, #212]	; (80032ac <USB_DeactivateEndpoint+0x1b0>)
 80031d6:	4013      	ands	r3, r2
 80031d8:	600b      	str	r3, [r1, #0]
 80031da:	e060      	b.n	800329e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80031dc:	68bb      	ldr	r3, [r7, #8]
 80031de:	015a      	lsls	r2, r3, #5
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	4413      	add	r3, r2
 80031e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80031ee:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80031f2:	d11f      	bne.n	8003234 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80031f4:	68bb      	ldr	r3, [r7, #8]
 80031f6:	015a      	lsls	r2, r3, #5
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	4413      	add	r3, r2
 80031fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	68ba      	ldr	r2, [r7, #8]
 8003204:	0151      	lsls	r1, r2, #5
 8003206:	68fa      	ldr	r2, [r7, #12]
 8003208:	440a      	add	r2, r1
 800320a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800320e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003212:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8003214:	68bb      	ldr	r3, [r7, #8]
 8003216:	015a      	lsls	r2, r3, #5
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	4413      	add	r3, r2
 800321c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	68ba      	ldr	r2, [r7, #8]
 8003224:	0151      	lsls	r1, r2, #5
 8003226:	68fa      	ldr	r2, [r7, #12]
 8003228:	440a      	add	r2, r1
 800322a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800322e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003232:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800323a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800323c:	683b      	ldr	r3, [r7, #0]
 800323e:	781b      	ldrb	r3, [r3, #0]
 8003240:	f003 030f 	and.w	r3, r3, #15
 8003244:	2101      	movs	r1, #1
 8003246:	fa01 f303 	lsl.w	r3, r1, r3
 800324a:	041b      	lsls	r3, r3, #16
 800324c:	43db      	mvns	r3, r3
 800324e:	68f9      	ldr	r1, [r7, #12]
 8003250:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003254:	4013      	ands	r3, r2
 8003256:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800325e:	69da      	ldr	r2, [r3, #28]
 8003260:	683b      	ldr	r3, [r7, #0]
 8003262:	781b      	ldrb	r3, [r3, #0]
 8003264:	f003 030f 	and.w	r3, r3, #15
 8003268:	2101      	movs	r1, #1
 800326a:	fa01 f303 	lsl.w	r3, r1, r3
 800326e:	041b      	lsls	r3, r3, #16
 8003270:	43db      	mvns	r3, r3
 8003272:	68f9      	ldr	r1, [r7, #12]
 8003274:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003278:	4013      	ands	r3, r2
 800327a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800327c:	68bb      	ldr	r3, [r7, #8]
 800327e:	015a      	lsls	r2, r3, #5
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	4413      	add	r3, r2
 8003284:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003288:	681a      	ldr	r2, [r3, #0]
 800328a:	68bb      	ldr	r3, [r7, #8]
 800328c:	0159      	lsls	r1, r3, #5
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	440b      	add	r3, r1
 8003292:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003296:	4619      	mov	r1, r3
 8003298:	4b05      	ldr	r3, [pc, #20]	; (80032b0 <USB_DeactivateEndpoint+0x1b4>)
 800329a:	4013      	ands	r3, r2
 800329c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800329e:	2300      	movs	r3, #0
}
 80032a0:	4618      	mov	r0, r3
 80032a2:	3714      	adds	r7, #20
 80032a4:	46bd      	mov	sp, r7
 80032a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032aa:	4770      	bx	lr
 80032ac:	ec337800 	.word	0xec337800
 80032b0:	eff37800 	.word	0xeff37800

080032b4 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80032b4:	b580      	push	{r7, lr}
 80032b6:	b08a      	sub	sp, #40	; 0x28
 80032b8:	af02      	add	r7, sp, #8
 80032ba:	60f8      	str	r0, [r7, #12]
 80032bc:	60b9      	str	r1, [r7, #8]
 80032be:	4613      	mov	r3, r2
 80032c0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80032c6:	68bb      	ldr	r3, [r7, #8]
 80032c8:	781b      	ldrb	r3, [r3, #0]
 80032ca:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80032cc:	68bb      	ldr	r3, [r7, #8]
 80032ce:	785b      	ldrb	r3, [r3, #1]
 80032d0:	2b01      	cmp	r3, #1
 80032d2:	f040 815c 	bne.w	800358e <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80032d6:	68bb      	ldr	r3, [r7, #8]
 80032d8:	695b      	ldr	r3, [r3, #20]
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d132      	bne.n	8003344 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80032de:	69bb      	ldr	r3, [r7, #24]
 80032e0:	015a      	lsls	r2, r3, #5
 80032e2:	69fb      	ldr	r3, [r7, #28]
 80032e4:	4413      	add	r3, r2
 80032e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80032ea:	691b      	ldr	r3, [r3, #16]
 80032ec:	69ba      	ldr	r2, [r7, #24]
 80032ee:	0151      	lsls	r1, r2, #5
 80032f0:	69fa      	ldr	r2, [r7, #28]
 80032f2:	440a      	add	r2, r1
 80032f4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80032f8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80032fc:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003300:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8003302:	69bb      	ldr	r3, [r7, #24]
 8003304:	015a      	lsls	r2, r3, #5
 8003306:	69fb      	ldr	r3, [r7, #28]
 8003308:	4413      	add	r3, r2
 800330a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800330e:	691b      	ldr	r3, [r3, #16]
 8003310:	69ba      	ldr	r2, [r7, #24]
 8003312:	0151      	lsls	r1, r2, #5
 8003314:	69fa      	ldr	r2, [r7, #28]
 8003316:	440a      	add	r2, r1
 8003318:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800331c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003320:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003322:	69bb      	ldr	r3, [r7, #24]
 8003324:	015a      	lsls	r2, r3, #5
 8003326:	69fb      	ldr	r3, [r7, #28]
 8003328:	4413      	add	r3, r2
 800332a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800332e:	691b      	ldr	r3, [r3, #16]
 8003330:	69ba      	ldr	r2, [r7, #24]
 8003332:	0151      	lsls	r1, r2, #5
 8003334:	69fa      	ldr	r2, [r7, #28]
 8003336:	440a      	add	r2, r1
 8003338:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800333c:	0cdb      	lsrs	r3, r3, #19
 800333e:	04db      	lsls	r3, r3, #19
 8003340:	6113      	str	r3, [r2, #16]
 8003342:	e074      	b.n	800342e <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003344:	69bb      	ldr	r3, [r7, #24]
 8003346:	015a      	lsls	r2, r3, #5
 8003348:	69fb      	ldr	r3, [r7, #28]
 800334a:	4413      	add	r3, r2
 800334c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003350:	691b      	ldr	r3, [r3, #16]
 8003352:	69ba      	ldr	r2, [r7, #24]
 8003354:	0151      	lsls	r1, r2, #5
 8003356:	69fa      	ldr	r2, [r7, #28]
 8003358:	440a      	add	r2, r1
 800335a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800335e:	0cdb      	lsrs	r3, r3, #19
 8003360:	04db      	lsls	r3, r3, #19
 8003362:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003364:	69bb      	ldr	r3, [r7, #24]
 8003366:	015a      	lsls	r2, r3, #5
 8003368:	69fb      	ldr	r3, [r7, #28]
 800336a:	4413      	add	r3, r2
 800336c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003370:	691b      	ldr	r3, [r3, #16]
 8003372:	69ba      	ldr	r2, [r7, #24]
 8003374:	0151      	lsls	r1, r2, #5
 8003376:	69fa      	ldr	r2, [r7, #28]
 8003378:	440a      	add	r2, r1
 800337a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800337e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003382:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003386:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8003388:	69bb      	ldr	r3, [r7, #24]
 800338a:	015a      	lsls	r2, r3, #5
 800338c:	69fb      	ldr	r3, [r7, #28]
 800338e:	4413      	add	r3, r2
 8003390:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003394:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8003396:	68bb      	ldr	r3, [r7, #8]
 8003398:	6959      	ldr	r1, [r3, #20]
 800339a:	68bb      	ldr	r3, [r7, #8]
 800339c:	689b      	ldr	r3, [r3, #8]
 800339e:	440b      	add	r3, r1
 80033a0:	1e59      	subs	r1, r3, #1
 80033a2:	68bb      	ldr	r3, [r7, #8]
 80033a4:	689b      	ldr	r3, [r3, #8]
 80033a6:	fbb1 f3f3 	udiv	r3, r1, r3
 80033aa:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80033ac:	4b9d      	ldr	r3, [pc, #628]	; (8003624 <USB_EPStartXfer+0x370>)
 80033ae:	400b      	ands	r3, r1
 80033b0:	69b9      	ldr	r1, [r7, #24]
 80033b2:	0148      	lsls	r0, r1, #5
 80033b4:	69f9      	ldr	r1, [r7, #28]
 80033b6:	4401      	add	r1, r0
 80033b8:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80033bc:	4313      	orrs	r3, r2
 80033be:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80033c0:	69bb      	ldr	r3, [r7, #24]
 80033c2:	015a      	lsls	r2, r3, #5
 80033c4:	69fb      	ldr	r3, [r7, #28]
 80033c6:	4413      	add	r3, r2
 80033c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80033cc:	691a      	ldr	r2, [r3, #16]
 80033ce:	68bb      	ldr	r3, [r7, #8]
 80033d0:	695b      	ldr	r3, [r3, #20]
 80033d2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80033d6:	69b9      	ldr	r1, [r7, #24]
 80033d8:	0148      	lsls	r0, r1, #5
 80033da:	69f9      	ldr	r1, [r7, #28]
 80033dc:	4401      	add	r1, r0
 80033de:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80033e2:	4313      	orrs	r3, r2
 80033e4:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80033e6:	68bb      	ldr	r3, [r7, #8]
 80033e8:	78db      	ldrb	r3, [r3, #3]
 80033ea:	2b01      	cmp	r3, #1
 80033ec:	d11f      	bne.n	800342e <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80033ee:	69bb      	ldr	r3, [r7, #24]
 80033f0:	015a      	lsls	r2, r3, #5
 80033f2:	69fb      	ldr	r3, [r7, #28]
 80033f4:	4413      	add	r3, r2
 80033f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80033fa:	691b      	ldr	r3, [r3, #16]
 80033fc:	69ba      	ldr	r2, [r7, #24]
 80033fe:	0151      	lsls	r1, r2, #5
 8003400:	69fa      	ldr	r2, [r7, #28]
 8003402:	440a      	add	r2, r1
 8003404:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003408:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800340c:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800340e:	69bb      	ldr	r3, [r7, #24]
 8003410:	015a      	lsls	r2, r3, #5
 8003412:	69fb      	ldr	r3, [r7, #28]
 8003414:	4413      	add	r3, r2
 8003416:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800341a:	691b      	ldr	r3, [r3, #16]
 800341c:	69ba      	ldr	r2, [r7, #24]
 800341e:	0151      	lsls	r1, r2, #5
 8003420:	69fa      	ldr	r2, [r7, #28]
 8003422:	440a      	add	r2, r1
 8003424:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003428:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800342c:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800342e:	79fb      	ldrb	r3, [r7, #7]
 8003430:	2b01      	cmp	r3, #1
 8003432:	d14b      	bne.n	80034cc <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8003434:	68bb      	ldr	r3, [r7, #8]
 8003436:	691b      	ldr	r3, [r3, #16]
 8003438:	2b00      	cmp	r3, #0
 800343a:	d009      	beq.n	8003450 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800343c:	69bb      	ldr	r3, [r7, #24]
 800343e:	015a      	lsls	r2, r3, #5
 8003440:	69fb      	ldr	r3, [r7, #28]
 8003442:	4413      	add	r3, r2
 8003444:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003448:	461a      	mov	r2, r3
 800344a:	68bb      	ldr	r3, [r7, #8]
 800344c:	691b      	ldr	r3, [r3, #16]
 800344e:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8003450:	68bb      	ldr	r3, [r7, #8]
 8003452:	78db      	ldrb	r3, [r3, #3]
 8003454:	2b01      	cmp	r3, #1
 8003456:	d128      	bne.n	80034aa <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8003458:	69fb      	ldr	r3, [r7, #28]
 800345a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800345e:	689b      	ldr	r3, [r3, #8]
 8003460:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003464:	2b00      	cmp	r3, #0
 8003466:	d110      	bne.n	800348a <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8003468:	69bb      	ldr	r3, [r7, #24]
 800346a:	015a      	lsls	r2, r3, #5
 800346c:	69fb      	ldr	r3, [r7, #28]
 800346e:	4413      	add	r3, r2
 8003470:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	69ba      	ldr	r2, [r7, #24]
 8003478:	0151      	lsls	r1, r2, #5
 800347a:	69fa      	ldr	r2, [r7, #28]
 800347c:	440a      	add	r2, r1
 800347e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003482:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003486:	6013      	str	r3, [r2, #0]
 8003488:	e00f      	b.n	80034aa <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800348a:	69bb      	ldr	r3, [r7, #24]
 800348c:	015a      	lsls	r2, r3, #5
 800348e:	69fb      	ldr	r3, [r7, #28]
 8003490:	4413      	add	r3, r2
 8003492:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	69ba      	ldr	r2, [r7, #24]
 800349a:	0151      	lsls	r1, r2, #5
 800349c:	69fa      	ldr	r2, [r7, #28]
 800349e:	440a      	add	r2, r1
 80034a0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80034a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80034a8:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80034aa:	69bb      	ldr	r3, [r7, #24]
 80034ac:	015a      	lsls	r2, r3, #5
 80034ae:	69fb      	ldr	r3, [r7, #28]
 80034b0:	4413      	add	r3, r2
 80034b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	69ba      	ldr	r2, [r7, #24]
 80034ba:	0151      	lsls	r1, r2, #5
 80034bc:	69fa      	ldr	r2, [r7, #28]
 80034be:	440a      	add	r2, r1
 80034c0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80034c4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80034c8:	6013      	str	r3, [r2, #0]
 80034ca:	e12f      	b.n	800372c <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80034cc:	69bb      	ldr	r3, [r7, #24]
 80034ce:	015a      	lsls	r2, r3, #5
 80034d0:	69fb      	ldr	r3, [r7, #28]
 80034d2:	4413      	add	r3, r2
 80034d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	69ba      	ldr	r2, [r7, #24]
 80034dc:	0151      	lsls	r1, r2, #5
 80034de:	69fa      	ldr	r2, [r7, #28]
 80034e0:	440a      	add	r2, r1
 80034e2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80034e6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80034ea:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80034ec:	68bb      	ldr	r3, [r7, #8]
 80034ee:	78db      	ldrb	r3, [r3, #3]
 80034f0:	2b01      	cmp	r3, #1
 80034f2:	d015      	beq.n	8003520 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80034f4:	68bb      	ldr	r3, [r7, #8]
 80034f6:	695b      	ldr	r3, [r3, #20]
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	f000 8117 	beq.w	800372c <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80034fe:	69fb      	ldr	r3, [r7, #28]
 8003500:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003504:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003506:	68bb      	ldr	r3, [r7, #8]
 8003508:	781b      	ldrb	r3, [r3, #0]
 800350a:	f003 030f 	and.w	r3, r3, #15
 800350e:	2101      	movs	r1, #1
 8003510:	fa01 f303 	lsl.w	r3, r1, r3
 8003514:	69f9      	ldr	r1, [r7, #28]
 8003516:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800351a:	4313      	orrs	r3, r2
 800351c:	634b      	str	r3, [r1, #52]	; 0x34
 800351e:	e105      	b.n	800372c <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8003520:	69fb      	ldr	r3, [r7, #28]
 8003522:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003526:	689b      	ldr	r3, [r3, #8]
 8003528:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800352c:	2b00      	cmp	r3, #0
 800352e:	d110      	bne.n	8003552 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8003530:	69bb      	ldr	r3, [r7, #24]
 8003532:	015a      	lsls	r2, r3, #5
 8003534:	69fb      	ldr	r3, [r7, #28]
 8003536:	4413      	add	r3, r2
 8003538:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	69ba      	ldr	r2, [r7, #24]
 8003540:	0151      	lsls	r1, r2, #5
 8003542:	69fa      	ldr	r2, [r7, #28]
 8003544:	440a      	add	r2, r1
 8003546:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800354a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800354e:	6013      	str	r3, [r2, #0]
 8003550:	e00f      	b.n	8003572 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8003552:	69bb      	ldr	r3, [r7, #24]
 8003554:	015a      	lsls	r2, r3, #5
 8003556:	69fb      	ldr	r3, [r7, #28]
 8003558:	4413      	add	r3, r2
 800355a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	69ba      	ldr	r2, [r7, #24]
 8003562:	0151      	lsls	r1, r2, #5
 8003564:	69fa      	ldr	r2, [r7, #28]
 8003566:	440a      	add	r2, r1
 8003568:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800356c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003570:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8003572:	68bb      	ldr	r3, [r7, #8]
 8003574:	68d9      	ldr	r1, [r3, #12]
 8003576:	68bb      	ldr	r3, [r7, #8]
 8003578:	781a      	ldrb	r2, [r3, #0]
 800357a:	68bb      	ldr	r3, [r7, #8]
 800357c:	695b      	ldr	r3, [r3, #20]
 800357e:	b298      	uxth	r0, r3
 8003580:	79fb      	ldrb	r3, [r7, #7]
 8003582:	9300      	str	r3, [sp, #0]
 8003584:	4603      	mov	r3, r0
 8003586:	68f8      	ldr	r0, [r7, #12]
 8003588:	f000 fa2b 	bl	80039e2 <USB_WritePacket>
 800358c:	e0ce      	b.n	800372c <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800358e:	69bb      	ldr	r3, [r7, #24]
 8003590:	015a      	lsls	r2, r3, #5
 8003592:	69fb      	ldr	r3, [r7, #28]
 8003594:	4413      	add	r3, r2
 8003596:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800359a:	691b      	ldr	r3, [r3, #16]
 800359c:	69ba      	ldr	r2, [r7, #24]
 800359e:	0151      	lsls	r1, r2, #5
 80035a0:	69fa      	ldr	r2, [r7, #28]
 80035a2:	440a      	add	r2, r1
 80035a4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80035a8:	0cdb      	lsrs	r3, r3, #19
 80035aa:	04db      	lsls	r3, r3, #19
 80035ac:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80035ae:	69bb      	ldr	r3, [r7, #24]
 80035b0:	015a      	lsls	r2, r3, #5
 80035b2:	69fb      	ldr	r3, [r7, #28]
 80035b4:	4413      	add	r3, r2
 80035b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80035ba:	691b      	ldr	r3, [r3, #16]
 80035bc:	69ba      	ldr	r2, [r7, #24]
 80035be:	0151      	lsls	r1, r2, #5
 80035c0:	69fa      	ldr	r2, [r7, #28]
 80035c2:	440a      	add	r2, r1
 80035c4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80035c8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80035cc:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80035d0:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 80035d2:	68bb      	ldr	r3, [r7, #8]
 80035d4:	695b      	ldr	r3, [r3, #20]
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d126      	bne.n	8003628 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80035da:	69bb      	ldr	r3, [r7, #24]
 80035dc:	015a      	lsls	r2, r3, #5
 80035de:	69fb      	ldr	r3, [r7, #28]
 80035e0:	4413      	add	r3, r2
 80035e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80035e6:	691a      	ldr	r2, [r3, #16]
 80035e8:	68bb      	ldr	r3, [r7, #8]
 80035ea:	689b      	ldr	r3, [r3, #8]
 80035ec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80035f0:	69b9      	ldr	r1, [r7, #24]
 80035f2:	0148      	lsls	r0, r1, #5
 80035f4:	69f9      	ldr	r1, [r7, #28]
 80035f6:	4401      	add	r1, r0
 80035f8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80035fc:	4313      	orrs	r3, r2
 80035fe:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8003600:	69bb      	ldr	r3, [r7, #24]
 8003602:	015a      	lsls	r2, r3, #5
 8003604:	69fb      	ldr	r3, [r7, #28]
 8003606:	4413      	add	r3, r2
 8003608:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800360c:	691b      	ldr	r3, [r3, #16]
 800360e:	69ba      	ldr	r2, [r7, #24]
 8003610:	0151      	lsls	r1, r2, #5
 8003612:	69fa      	ldr	r2, [r7, #28]
 8003614:	440a      	add	r2, r1
 8003616:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800361a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800361e:	6113      	str	r3, [r2, #16]
 8003620:	e036      	b.n	8003690 <USB_EPStartXfer+0x3dc>
 8003622:	bf00      	nop
 8003624:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8003628:	68bb      	ldr	r3, [r7, #8]
 800362a:	695a      	ldr	r2, [r3, #20]
 800362c:	68bb      	ldr	r3, [r7, #8]
 800362e:	689b      	ldr	r3, [r3, #8]
 8003630:	4413      	add	r3, r2
 8003632:	1e5a      	subs	r2, r3, #1
 8003634:	68bb      	ldr	r3, [r7, #8]
 8003636:	689b      	ldr	r3, [r3, #8]
 8003638:	fbb2 f3f3 	udiv	r3, r2, r3
 800363c:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800363e:	69bb      	ldr	r3, [r7, #24]
 8003640:	015a      	lsls	r2, r3, #5
 8003642:	69fb      	ldr	r3, [r7, #28]
 8003644:	4413      	add	r3, r2
 8003646:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800364a:	691a      	ldr	r2, [r3, #16]
 800364c:	8afb      	ldrh	r3, [r7, #22]
 800364e:	04d9      	lsls	r1, r3, #19
 8003650:	4b39      	ldr	r3, [pc, #228]	; (8003738 <USB_EPStartXfer+0x484>)
 8003652:	400b      	ands	r3, r1
 8003654:	69b9      	ldr	r1, [r7, #24]
 8003656:	0148      	lsls	r0, r1, #5
 8003658:	69f9      	ldr	r1, [r7, #28]
 800365a:	4401      	add	r1, r0
 800365c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8003660:	4313      	orrs	r3, r2
 8003662:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8003664:	69bb      	ldr	r3, [r7, #24]
 8003666:	015a      	lsls	r2, r3, #5
 8003668:	69fb      	ldr	r3, [r7, #28]
 800366a:	4413      	add	r3, r2
 800366c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003670:	691a      	ldr	r2, [r3, #16]
 8003672:	68bb      	ldr	r3, [r7, #8]
 8003674:	689b      	ldr	r3, [r3, #8]
 8003676:	8af9      	ldrh	r1, [r7, #22]
 8003678:	fb01 f303 	mul.w	r3, r1, r3
 800367c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003680:	69b9      	ldr	r1, [r7, #24]
 8003682:	0148      	lsls	r0, r1, #5
 8003684:	69f9      	ldr	r1, [r7, #28]
 8003686:	4401      	add	r1, r0
 8003688:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800368c:	4313      	orrs	r3, r2
 800368e:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8003690:	79fb      	ldrb	r3, [r7, #7]
 8003692:	2b01      	cmp	r3, #1
 8003694:	d10d      	bne.n	80036b2 <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8003696:	68bb      	ldr	r3, [r7, #8]
 8003698:	68db      	ldr	r3, [r3, #12]
 800369a:	2b00      	cmp	r3, #0
 800369c:	d009      	beq.n	80036b2 <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800369e:	68bb      	ldr	r3, [r7, #8]
 80036a0:	68d9      	ldr	r1, [r3, #12]
 80036a2:	69bb      	ldr	r3, [r7, #24]
 80036a4:	015a      	lsls	r2, r3, #5
 80036a6:	69fb      	ldr	r3, [r7, #28]
 80036a8:	4413      	add	r3, r2
 80036aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80036ae:	460a      	mov	r2, r1
 80036b0:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80036b2:	68bb      	ldr	r3, [r7, #8]
 80036b4:	78db      	ldrb	r3, [r3, #3]
 80036b6:	2b01      	cmp	r3, #1
 80036b8:	d128      	bne.n	800370c <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80036ba:	69fb      	ldr	r3, [r7, #28]
 80036bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80036c0:	689b      	ldr	r3, [r3, #8]
 80036c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d110      	bne.n	80036ec <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80036ca:	69bb      	ldr	r3, [r7, #24]
 80036cc:	015a      	lsls	r2, r3, #5
 80036ce:	69fb      	ldr	r3, [r7, #28]
 80036d0:	4413      	add	r3, r2
 80036d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	69ba      	ldr	r2, [r7, #24]
 80036da:	0151      	lsls	r1, r2, #5
 80036dc:	69fa      	ldr	r2, [r7, #28]
 80036de:	440a      	add	r2, r1
 80036e0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80036e4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80036e8:	6013      	str	r3, [r2, #0]
 80036ea:	e00f      	b.n	800370c <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80036ec:	69bb      	ldr	r3, [r7, #24]
 80036ee:	015a      	lsls	r2, r3, #5
 80036f0:	69fb      	ldr	r3, [r7, #28]
 80036f2:	4413      	add	r3, r2
 80036f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	69ba      	ldr	r2, [r7, #24]
 80036fc:	0151      	lsls	r1, r2, #5
 80036fe:	69fa      	ldr	r2, [r7, #28]
 8003700:	440a      	add	r2, r1
 8003702:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003706:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800370a:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800370c:	69bb      	ldr	r3, [r7, #24]
 800370e:	015a      	lsls	r2, r3, #5
 8003710:	69fb      	ldr	r3, [r7, #28]
 8003712:	4413      	add	r3, r2
 8003714:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	69ba      	ldr	r2, [r7, #24]
 800371c:	0151      	lsls	r1, r2, #5
 800371e:	69fa      	ldr	r2, [r7, #28]
 8003720:	440a      	add	r2, r1
 8003722:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003726:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800372a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800372c:	2300      	movs	r3, #0
}
 800372e:	4618      	mov	r0, r3
 8003730:	3720      	adds	r7, #32
 8003732:	46bd      	mov	sp, r7
 8003734:	bd80      	pop	{r7, pc}
 8003736:	bf00      	nop
 8003738:	1ff80000 	.word	0x1ff80000

0800373c <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800373c:	b480      	push	{r7}
 800373e:	b087      	sub	sp, #28
 8003740:	af00      	add	r7, sp, #0
 8003742:	60f8      	str	r0, [r7, #12]
 8003744:	60b9      	str	r1, [r7, #8]
 8003746:	4613      	mov	r3, r2
 8003748:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800374e:	68bb      	ldr	r3, [r7, #8]
 8003750:	781b      	ldrb	r3, [r3, #0]
 8003752:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8003754:	68bb      	ldr	r3, [r7, #8]
 8003756:	785b      	ldrb	r3, [r3, #1]
 8003758:	2b01      	cmp	r3, #1
 800375a:	f040 80cd 	bne.w	80038f8 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800375e:	68bb      	ldr	r3, [r7, #8]
 8003760:	695b      	ldr	r3, [r3, #20]
 8003762:	2b00      	cmp	r3, #0
 8003764:	d132      	bne.n	80037cc <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003766:	693b      	ldr	r3, [r7, #16]
 8003768:	015a      	lsls	r2, r3, #5
 800376a:	697b      	ldr	r3, [r7, #20]
 800376c:	4413      	add	r3, r2
 800376e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003772:	691b      	ldr	r3, [r3, #16]
 8003774:	693a      	ldr	r2, [r7, #16]
 8003776:	0151      	lsls	r1, r2, #5
 8003778:	697a      	ldr	r2, [r7, #20]
 800377a:	440a      	add	r2, r1
 800377c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003780:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003784:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003788:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800378a:	693b      	ldr	r3, [r7, #16]
 800378c:	015a      	lsls	r2, r3, #5
 800378e:	697b      	ldr	r3, [r7, #20]
 8003790:	4413      	add	r3, r2
 8003792:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003796:	691b      	ldr	r3, [r3, #16]
 8003798:	693a      	ldr	r2, [r7, #16]
 800379a:	0151      	lsls	r1, r2, #5
 800379c:	697a      	ldr	r2, [r7, #20]
 800379e:	440a      	add	r2, r1
 80037a0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80037a4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80037a8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80037aa:	693b      	ldr	r3, [r7, #16]
 80037ac:	015a      	lsls	r2, r3, #5
 80037ae:	697b      	ldr	r3, [r7, #20]
 80037b0:	4413      	add	r3, r2
 80037b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80037b6:	691b      	ldr	r3, [r3, #16]
 80037b8:	693a      	ldr	r2, [r7, #16]
 80037ba:	0151      	lsls	r1, r2, #5
 80037bc:	697a      	ldr	r2, [r7, #20]
 80037be:	440a      	add	r2, r1
 80037c0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80037c4:	0cdb      	lsrs	r3, r3, #19
 80037c6:	04db      	lsls	r3, r3, #19
 80037c8:	6113      	str	r3, [r2, #16]
 80037ca:	e04e      	b.n	800386a <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80037cc:	693b      	ldr	r3, [r7, #16]
 80037ce:	015a      	lsls	r2, r3, #5
 80037d0:	697b      	ldr	r3, [r7, #20]
 80037d2:	4413      	add	r3, r2
 80037d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80037d8:	691b      	ldr	r3, [r3, #16]
 80037da:	693a      	ldr	r2, [r7, #16]
 80037dc:	0151      	lsls	r1, r2, #5
 80037de:	697a      	ldr	r2, [r7, #20]
 80037e0:	440a      	add	r2, r1
 80037e2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80037e6:	0cdb      	lsrs	r3, r3, #19
 80037e8:	04db      	lsls	r3, r3, #19
 80037ea:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80037ec:	693b      	ldr	r3, [r7, #16]
 80037ee:	015a      	lsls	r2, r3, #5
 80037f0:	697b      	ldr	r3, [r7, #20]
 80037f2:	4413      	add	r3, r2
 80037f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80037f8:	691b      	ldr	r3, [r3, #16]
 80037fa:	693a      	ldr	r2, [r7, #16]
 80037fc:	0151      	lsls	r1, r2, #5
 80037fe:	697a      	ldr	r2, [r7, #20]
 8003800:	440a      	add	r2, r1
 8003802:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003806:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800380a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800380e:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8003810:	68bb      	ldr	r3, [r7, #8]
 8003812:	695a      	ldr	r2, [r3, #20]
 8003814:	68bb      	ldr	r3, [r7, #8]
 8003816:	689b      	ldr	r3, [r3, #8]
 8003818:	429a      	cmp	r2, r3
 800381a:	d903      	bls.n	8003824 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800381c:	68bb      	ldr	r3, [r7, #8]
 800381e:	689a      	ldr	r2, [r3, #8]
 8003820:	68bb      	ldr	r3, [r7, #8]
 8003822:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8003824:	693b      	ldr	r3, [r7, #16]
 8003826:	015a      	lsls	r2, r3, #5
 8003828:	697b      	ldr	r3, [r7, #20]
 800382a:	4413      	add	r3, r2
 800382c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003830:	691b      	ldr	r3, [r3, #16]
 8003832:	693a      	ldr	r2, [r7, #16]
 8003834:	0151      	lsls	r1, r2, #5
 8003836:	697a      	ldr	r2, [r7, #20]
 8003838:	440a      	add	r2, r1
 800383a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800383e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003842:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8003844:	693b      	ldr	r3, [r7, #16]
 8003846:	015a      	lsls	r2, r3, #5
 8003848:	697b      	ldr	r3, [r7, #20]
 800384a:	4413      	add	r3, r2
 800384c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003850:	691a      	ldr	r2, [r3, #16]
 8003852:	68bb      	ldr	r3, [r7, #8]
 8003854:	695b      	ldr	r3, [r3, #20]
 8003856:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800385a:	6939      	ldr	r1, [r7, #16]
 800385c:	0148      	lsls	r0, r1, #5
 800385e:	6979      	ldr	r1, [r7, #20]
 8003860:	4401      	add	r1, r0
 8003862:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8003866:	4313      	orrs	r3, r2
 8003868:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800386a:	79fb      	ldrb	r3, [r7, #7]
 800386c:	2b01      	cmp	r3, #1
 800386e:	d11e      	bne.n	80038ae <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8003870:	68bb      	ldr	r3, [r7, #8]
 8003872:	691b      	ldr	r3, [r3, #16]
 8003874:	2b00      	cmp	r3, #0
 8003876:	d009      	beq.n	800388c <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8003878:	693b      	ldr	r3, [r7, #16]
 800387a:	015a      	lsls	r2, r3, #5
 800387c:	697b      	ldr	r3, [r7, #20]
 800387e:	4413      	add	r3, r2
 8003880:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003884:	461a      	mov	r2, r3
 8003886:	68bb      	ldr	r3, [r7, #8]
 8003888:	691b      	ldr	r3, [r3, #16]
 800388a:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800388c:	693b      	ldr	r3, [r7, #16]
 800388e:	015a      	lsls	r2, r3, #5
 8003890:	697b      	ldr	r3, [r7, #20]
 8003892:	4413      	add	r3, r2
 8003894:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	693a      	ldr	r2, [r7, #16]
 800389c:	0151      	lsls	r1, r2, #5
 800389e:	697a      	ldr	r2, [r7, #20]
 80038a0:	440a      	add	r2, r1
 80038a2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80038a6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80038aa:	6013      	str	r3, [r2, #0]
 80038ac:	e092      	b.n	80039d4 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80038ae:	693b      	ldr	r3, [r7, #16]
 80038b0:	015a      	lsls	r2, r3, #5
 80038b2:	697b      	ldr	r3, [r7, #20]
 80038b4:	4413      	add	r3, r2
 80038b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	693a      	ldr	r2, [r7, #16]
 80038be:	0151      	lsls	r1, r2, #5
 80038c0:	697a      	ldr	r2, [r7, #20]
 80038c2:	440a      	add	r2, r1
 80038c4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80038c8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80038cc:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 80038ce:	68bb      	ldr	r3, [r7, #8]
 80038d0:	695b      	ldr	r3, [r3, #20]
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d07e      	beq.n	80039d4 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80038d6:	697b      	ldr	r3, [r7, #20]
 80038d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80038dc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80038de:	68bb      	ldr	r3, [r7, #8]
 80038e0:	781b      	ldrb	r3, [r3, #0]
 80038e2:	f003 030f 	and.w	r3, r3, #15
 80038e6:	2101      	movs	r1, #1
 80038e8:	fa01 f303 	lsl.w	r3, r1, r3
 80038ec:	6979      	ldr	r1, [r7, #20]
 80038ee:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80038f2:	4313      	orrs	r3, r2
 80038f4:	634b      	str	r3, [r1, #52]	; 0x34
 80038f6:	e06d      	b.n	80039d4 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80038f8:	693b      	ldr	r3, [r7, #16]
 80038fa:	015a      	lsls	r2, r3, #5
 80038fc:	697b      	ldr	r3, [r7, #20]
 80038fe:	4413      	add	r3, r2
 8003900:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003904:	691b      	ldr	r3, [r3, #16]
 8003906:	693a      	ldr	r2, [r7, #16]
 8003908:	0151      	lsls	r1, r2, #5
 800390a:	697a      	ldr	r2, [r7, #20]
 800390c:	440a      	add	r2, r1
 800390e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003912:	0cdb      	lsrs	r3, r3, #19
 8003914:	04db      	lsls	r3, r3, #19
 8003916:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8003918:	693b      	ldr	r3, [r7, #16]
 800391a:	015a      	lsls	r2, r3, #5
 800391c:	697b      	ldr	r3, [r7, #20]
 800391e:	4413      	add	r3, r2
 8003920:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003924:	691b      	ldr	r3, [r3, #16]
 8003926:	693a      	ldr	r2, [r7, #16]
 8003928:	0151      	lsls	r1, r2, #5
 800392a:	697a      	ldr	r2, [r7, #20]
 800392c:	440a      	add	r2, r1
 800392e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003932:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003936:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800393a:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800393c:	68bb      	ldr	r3, [r7, #8]
 800393e:	695b      	ldr	r3, [r3, #20]
 8003940:	2b00      	cmp	r3, #0
 8003942:	d003      	beq.n	800394c <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8003944:	68bb      	ldr	r3, [r7, #8]
 8003946:	689a      	ldr	r2, [r3, #8]
 8003948:	68bb      	ldr	r3, [r7, #8]
 800394a:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800394c:	693b      	ldr	r3, [r7, #16]
 800394e:	015a      	lsls	r2, r3, #5
 8003950:	697b      	ldr	r3, [r7, #20]
 8003952:	4413      	add	r3, r2
 8003954:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003958:	691b      	ldr	r3, [r3, #16]
 800395a:	693a      	ldr	r2, [r7, #16]
 800395c:	0151      	lsls	r1, r2, #5
 800395e:	697a      	ldr	r2, [r7, #20]
 8003960:	440a      	add	r2, r1
 8003962:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003966:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800396a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 800396c:	693b      	ldr	r3, [r7, #16]
 800396e:	015a      	lsls	r2, r3, #5
 8003970:	697b      	ldr	r3, [r7, #20]
 8003972:	4413      	add	r3, r2
 8003974:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003978:	691a      	ldr	r2, [r3, #16]
 800397a:	68bb      	ldr	r3, [r7, #8]
 800397c:	689b      	ldr	r3, [r3, #8]
 800397e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003982:	6939      	ldr	r1, [r7, #16]
 8003984:	0148      	lsls	r0, r1, #5
 8003986:	6979      	ldr	r1, [r7, #20]
 8003988:	4401      	add	r1, r0
 800398a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800398e:	4313      	orrs	r3, r2
 8003990:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8003992:	79fb      	ldrb	r3, [r7, #7]
 8003994:	2b01      	cmp	r3, #1
 8003996:	d10d      	bne.n	80039b4 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8003998:	68bb      	ldr	r3, [r7, #8]
 800399a:	68db      	ldr	r3, [r3, #12]
 800399c:	2b00      	cmp	r3, #0
 800399e:	d009      	beq.n	80039b4 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80039a0:	68bb      	ldr	r3, [r7, #8]
 80039a2:	68d9      	ldr	r1, [r3, #12]
 80039a4:	693b      	ldr	r3, [r7, #16]
 80039a6:	015a      	lsls	r2, r3, #5
 80039a8:	697b      	ldr	r3, [r7, #20]
 80039aa:	4413      	add	r3, r2
 80039ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80039b0:	460a      	mov	r2, r1
 80039b2:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80039b4:	693b      	ldr	r3, [r7, #16]
 80039b6:	015a      	lsls	r2, r3, #5
 80039b8:	697b      	ldr	r3, [r7, #20]
 80039ba:	4413      	add	r3, r2
 80039bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	693a      	ldr	r2, [r7, #16]
 80039c4:	0151      	lsls	r1, r2, #5
 80039c6:	697a      	ldr	r2, [r7, #20]
 80039c8:	440a      	add	r2, r1
 80039ca:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80039ce:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80039d2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80039d4:	2300      	movs	r3, #0
}
 80039d6:	4618      	mov	r0, r3
 80039d8:	371c      	adds	r7, #28
 80039da:	46bd      	mov	sp, r7
 80039dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e0:	4770      	bx	lr

080039e2 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80039e2:	b480      	push	{r7}
 80039e4:	b089      	sub	sp, #36	; 0x24
 80039e6:	af00      	add	r7, sp, #0
 80039e8:	60f8      	str	r0, [r7, #12]
 80039ea:	60b9      	str	r1, [r7, #8]
 80039ec:	4611      	mov	r1, r2
 80039ee:	461a      	mov	r2, r3
 80039f0:	460b      	mov	r3, r1
 80039f2:	71fb      	strb	r3, [r7, #7]
 80039f4:	4613      	mov	r3, r2
 80039f6:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80039fc:	68bb      	ldr	r3, [r7, #8]
 80039fe:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8003a00:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d123      	bne.n	8003a50 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8003a08:	88bb      	ldrh	r3, [r7, #4]
 8003a0a:	3303      	adds	r3, #3
 8003a0c:	089b      	lsrs	r3, r3, #2
 8003a0e:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8003a10:	2300      	movs	r3, #0
 8003a12:	61bb      	str	r3, [r7, #24]
 8003a14:	e018      	b.n	8003a48 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8003a16:	79fb      	ldrb	r3, [r7, #7]
 8003a18:	031a      	lsls	r2, r3, #12
 8003a1a:	697b      	ldr	r3, [r7, #20]
 8003a1c:	4413      	add	r3, r2
 8003a1e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003a22:	461a      	mov	r2, r3
 8003a24:	69fb      	ldr	r3, [r7, #28]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	6013      	str	r3, [r2, #0]
      pSrc++;
 8003a2a:	69fb      	ldr	r3, [r7, #28]
 8003a2c:	3301      	adds	r3, #1
 8003a2e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8003a30:	69fb      	ldr	r3, [r7, #28]
 8003a32:	3301      	adds	r3, #1
 8003a34:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8003a36:	69fb      	ldr	r3, [r7, #28]
 8003a38:	3301      	adds	r3, #1
 8003a3a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8003a3c:	69fb      	ldr	r3, [r7, #28]
 8003a3e:	3301      	adds	r3, #1
 8003a40:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8003a42:	69bb      	ldr	r3, [r7, #24]
 8003a44:	3301      	adds	r3, #1
 8003a46:	61bb      	str	r3, [r7, #24]
 8003a48:	69ba      	ldr	r2, [r7, #24]
 8003a4a:	693b      	ldr	r3, [r7, #16]
 8003a4c:	429a      	cmp	r2, r3
 8003a4e:	d3e2      	bcc.n	8003a16 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8003a50:	2300      	movs	r3, #0
}
 8003a52:	4618      	mov	r0, r3
 8003a54:	3724      	adds	r7, #36	; 0x24
 8003a56:	46bd      	mov	sp, r7
 8003a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a5c:	4770      	bx	lr

08003a5e <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8003a5e:	b480      	push	{r7}
 8003a60:	b08b      	sub	sp, #44	; 0x2c
 8003a62:	af00      	add	r7, sp, #0
 8003a64:	60f8      	str	r0, [r7, #12]
 8003a66:	60b9      	str	r1, [r7, #8]
 8003a68:	4613      	mov	r3, r2
 8003a6a:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8003a70:	68bb      	ldr	r3, [r7, #8]
 8003a72:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8003a74:	88fb      	ldrh	r3, [r7, #6]
 8003a76:	089b      	lsrs	r3, r3, #2
 8003a78:	b29b      	uxth	r3, r3
 8003a7a:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8003a7c:	88fb      	ldrh	r3, [r7, #6]
 8003a7e:	f003 0303 	and.w	r3, r3, #3
 8003a82:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8003a84:	2300      	movs	r3, #0
 8003a86:	623b      	str	r3, [r7, #32]
 8003a88:	e014      	b.n	8003ab4 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8003a8a:	69bb      	ldr	r3, [r7, #24]
 8003a8c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003a90:	681a      	ldr	r2, [r3, #0]
 8003a92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a94:	601a      	str	r2, [r3, #0]
    pDest++;
 8003a96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a98:	3301      	adds	r3, #1
 8003a9a:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8003a9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a9e:	3301      	adds	r3, #1
 8003aa0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8003aa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aa4:	3301      	adds	r3, #1
 8003aa6:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8003aa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aaa:	3301      	adds	r3, #1
 8003aac:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8003aae:	6a3b      	ldr	r3, [r7, #32]
 8003ab0:	3301      	adds	r3, #1
 8003ab2:	623b      	str	r3, [r7, #32]
 8003ab4:	6a3a      	ldr	r2, [r7, #32]
 8003ab6:	697b      	ldr	r3, [r7, #20]
 8003ab8:	429a      	cmp	r2, r3
 8003aba:	d3e6      	bcc.n	8003a8a <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8003abc:	8bfb      	ldrh	r3, [r7, #30]
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d01e      	beq.n	8003b00 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8003ac2:	2300      	movs	r3, #0
 8003ac4:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8003ac6:	69bb      	ldr	r3, [r7, #24]
 8003ac8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003acc:	461a      	mov	r2, r3
 8003ace:	f107 0310 	add.w	r3, r7, #16
 8003ad2:	6812      	ldr	r2, [r2, #0]
 8003ad4:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8003ad6:	693a      	ldr	r2, [r7, #16]
 8003ad8:	6a3b      	ldr	r3, [r7, #32]
 8003ada:	b2db      	uxtb	r3, r3
 8003adc:	00db      	lsls	r3, r3, #3
 8003ade:	fa22 f303 	lsr.w	r3, r2, r3
 8003ae2:	b2da      	uxtb	r2, r3
 8003ae4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ae6:	701a      	strb	r2, [r3, #0]
      i++;
 8003ae8:	6a3b      	ldr	r3, [r7, #32]
 8003aea:	3301      	adds	r3, #1
 8003aec:	623b      	str	r3, [r7, #32]
      pDest++;
 8003aee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003af0:	3301      	adds	r3, #1
 8003af2:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8003af4:	8bfb      	ldrh	r3, [r7, #30]
 8003af6:	3b01      	subs	r3, #1
 8003af8:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8003afa:	8bfb      	ldrh	r3, [r7, #30]
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d1ea      	bne.n	8003ad6 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8003b00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003b02:	4618      	mov	r0, r3
 8003b04:	372c      	adds	r7, #44	; 0x2c
 8003b06:	46bd      	mov	sp, r7
 8003b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b0c:	4770      	bx	lr

08003b0e <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003b0e:	b480      	push	{r7}
 8003b10:	b085      	sub	sp, #20
 8003b12:	af00      	add	r7, sp, #0
 8003b14:	6078      	str	r0, [r7, #4]
 8003b16:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003b1c:	683b      	ldr	r3, [r7, #0]
 8003b1e:	781b      	ldrb	r3, [r3, #0]
 8003b20:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8003b22:	683b      	ldr	r3, [r7, #0]
 8003b24:	785b      	ldrb	r3, [r3, #1]
 8003b26:	2b01      	cmp	r3, #1
 8003b28:	d12c      	bne.n	8003b84 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8003b2a:	68bb      	ldr	r3, [r7, #8]
 8003b2c:	015a      	lsls	r2, r3, #5
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	4413      	add	r3, r2
 8003b32:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	db12      	blt.n	8003b62 <USB_EPSetStall+0x54>
 8003b3c:	68bb      	ldr	r3, [r7, #8]
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d00f      	beq.n	8003b62 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8003b42:	68bb      	ldr	r3, [r7, #8]
 8003b44:	015a      	lsls	r2, r3, #5
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	4413      	add	r3, r2
 8003b4a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	68ba      	ldr	r2, [r7, #8]
 8003b52:	0151      	lsls	r1, r2, #5
 8003b54:	68fa      	ldr	r2, [r7, #12]
 8003b56:	440a      	add	r2, r1
 8003b58:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003b5c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003b60:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8003b62:	68bb      	ldr	r3, [r7, #8]
 8003b64:	015a      	lsls	r2, r3, #5
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	4413      	add	r3, r2
 8003b6a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	68ba      	ldr	r2, [r7, #8]
 8003b72:	0151      	lsls	r1, r2, #5
 8003b74:	68fa      	ldr	r2, [r7, #12]
 8003b76:	440a      	add	r2, r1
 8003b78:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003b7c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003b80:	6013      	str	r3, [r2, #0]
 8003b82:	e02b      	b.n	8003bdc <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8003b84:	68bb      	ldr	r3, [r7, #8]
 8003b86:	015a      	lsls	r2, r3, #5
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	4413      	add	r3, r2
 8003b8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	db12      	blt.n	8003bbc <USB_EPSetStall+0xae>
 8003b96:	68bb      	ldr	r3, [r7, #8]
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d00f      	beq.n	8003bbc <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8003b9c:	68bb      	ldr	r3, [r7, #8]
 8003b9e:	015a      	lsls	r2, r3, #5
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	4413      	add	r3, r2
 8003ba4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	68ba      	ldr	r2, [r7, #8]
 8003bac:	0151      	lsls	r1, r2, #5
 8003bae:	68fa      	ldr	r2, [r7, #12]
 8003bb0:	440a      	add	r2, r1
 8003bb2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003bb6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003bba:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8003bbc:	68bb      	ldr	r3, [r7, #8]
 8003bbe:	015a      	lsls	r2, r3, #5
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	4413      	add	r3, r2
 8003bc4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	68ba      	ldr	r2, [r7, #8]
 8003bcc:	0151      	lsls	r1, r2, #5
 8003bce:	68fa      	ldr	r2, [r7, #12]
 8003bd0:	440a      	add	r2, r1
 8003bd2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003bd6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003bda:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8003bdc:	2300      	movs	r3, #0
}
 8003bde:	4618      	mov	r0, r3
 8003be0:	3714      	adds	r7, #20
 8003be2:	46bd      	mov	sp, r7
 8003be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be8:	4770      	bx	lr

08003bea <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003bea:	b480      	push	{r7}
 8003bec:	b085      	sub	sp, #20
 8003bee:	af00      	add	r7, sp, #0
 8003bf0:	6078      	str	r0, [r7, #4]
 8003bf2:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003bf8:	683b      	ldr	r3, [r7, #0]
 8003bfa:	781b      	ldrb	r3, [r3, #0]
 8003bfc:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8003bfe:	683b      	ldr	r3, [r7, #0]
 8003c00:	785b      	ldrb	r3, [r3, #1]
 8003c02:	2b01      	cmp	r3, #1
 8003c04:	d128      	bne.n	8003c58 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003c06:	68bb      	ldr	r3, [r7, #8]
 8003c08:	015a      	lsls	r2, r3, #5
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	4413      	add	r3, r2
 8003c0e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	68ba      	ldr	r2, [r7, #8]
 8003c16:	0151      	lsls	r1, r2, #5
 8003c18:	68fa      	ldr	r2, [r7, #12]
 8003c1a:	440a      	add	r2, r1
 8003c1c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003c20:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003c24:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8003c26:	683b      	ldr	r3, [r7, #0]
 8003c28:	78db      	ldrb	r3, [r3, #3]
 8003c2a:	2b03      	cmp	r3, #3
 8003c2c:	d003      	beq.n	8003c36 <USB_EPClearStall+0x4c>
 8003c2e:	683b      	ldr	r3, [r7, #0]
 8003c30:	78db      	ldrb	r3, [r3, #3]
 8003c32:	2b02      	cmp	r3, #2
 8003c34:	d138      	bne.n	8003ca8 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8003c36:	68bb      	ldr	r3, [r7, #8]
 8003c38:	015a      	lsls	r2, r3, #5
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	4413      	add	r3, r2
 8003c3e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	68ba      	ldr	r2, [r7, #8]
 8003c46:	0151      	lsls	r1, r2, #5
 8003c48:	68fa      	ldr	r2, [r7, #12]
 8003c4a:	440a      	add	r2, r1
 8003c4c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003c50:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c54:	6013      	str	r3, [r2, #0]
 8003c56:	e027      	b.n	8003ca8 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003c58:	68bb      	ldr	r3, [r7, #8]
 8003c5a:	015a      	lsls	r2, r3, #5
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	4413      	add	r3, r2
 8003c60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	68ba      	ldr	r2, [r7, #8]
 8003c68:	0151      	lsls	r1, r2, #5
 8003c6a:	68fa      	ldr	r2, [r7, #12]
 8003c6c:	440a      	add	r2, r1
 8003c6e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003c72:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003c76:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8003c78:	683b      	ldr	r3, [r7, #0]
 8003c7a:	78db      	ldrb	r3, [r3, #3]
 8003c7c:	2b03      	cmp	r3, #3
 8003c7e:	d003      	beq.n	8003c88 <USB_EPClearStall+0x9e>
 8003c80:	683b      	ldr	r3, [r7, #0]
 8003c82:	78db      	ldrb	r3, [r3, #3]
 8003c84:	2b02      	cmp	r3, #2
 8003c86:	d10f      	bne.n	8003ca8 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8003c88:	68bb      	ldr	r3, [r7, #8]
 8003c8a:	015a      	lsls	r2, r3, #5
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	4413      	add	r3, r2
 8003c90:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	68ba      	ldr	r2, [r7, #8]
 8003c98:	0151      	lsls	r1, r2, #5
 8003c9a:	68fa      	ldr	r2, [r7, #12]
 8003c9c:	440a      	add	r2, r1
 8003c9e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003ca2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ca6:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8003ca8:	2300      	movs	r3, #0
}
 8003caa:	4618      	mov	r0, r3
 8003cac:	3714      	adds	r7, #20
 8003cae:	46bd      	mov	sp, r7
 8003cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb4:	4770      	bx	lr

08003cb6 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8003cb6:	b480      	push	{r7}
 8003cb8:	b085      	sub	sp, #20
 8003cba:	af00      	add	r7, sp, #0
 8003cbc:	6078      	str	r0, [r7, #4]
 8003cbe:	460b      	mov	r3, r1
 8003cc0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	68fa      	ldr	r2, [r7, #12]
 8003cd0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003cd4:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8003cd8:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ce0:	681a      	ldr	r2, [r3, #0]
 8003ce2:	78fb      	ldrb	r3, [r7, #3]
 8003ce4:	011b      	lsls	r3, r3, #4
 8003ce6:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8003cea:	68f9      	ldr	r1, [r7, #12]
 8003cec:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003cf0:	4313      	orrs	r3, r2
 8003cf2:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8003cf4:	2300      	movs	r3, #0
}
 8003cf6:	4618      	mov	r0, r3
 8003cf8:	3714      	adds	r7, #20
 8003cfa:	46bd      	mov	sp, r7
 8003cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d00:	4770      	bx	lr

08003d02 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8003d02:	b480      	push	{r7}
 8003d04:	b085      	sub	sp, #20
 8003d06:	af00      	add	r7, sp, #0
 8003d08:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	68fa      	ldr	r2, [r7, #12]
 8003d18:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8003d1c:	f023 0303 	bic.w	r3, r3, #3
 8003d20:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d28:	685b      	ldr	r3, [r3, #4]
 8003d2a:	68fa      	ldr	r2, [r7, #12]
 8003d2c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003d30:	f023 0302 	bic.w	r3, r3, #2
 8003d34:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8003d36:	2300      	movs	r3, #0
}
 8003d38:	4618      	mov	r0, r3
 8003d3a:	3714      	adds	r7, #20
 8003d3c:	46bd      	mov	sp, r7
 8003d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d42:	4770      	bx	lr

08003d44 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8003d44:	b480      	push	{r7}
 8003d46:	b085      	sub	sp, #20
 8003d48:	af00      	add	r7, sp, #0
 8003d4a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	68fa      	ldr	r2, [r7, #12]
 8003d5a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8003d5e:	f023 0303 	bic.w	r3, r3, #3
 8003d62:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d6a:	685b      	ldr	r3, [r3, #4]
 8003d6c:	68fa      	ldr	r2, [r7, #12]
 8003d6e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003d72:	f043 0302 	orr.w	r3, r3, #2
 8003d76:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8003d78:	2300      	movs	r3, #0
}
 8003d7a:	4618      	mov	r0, r3
 8003d7c:	3714      	adds	r7, #20
 8003d7e:	46bd      	mov	sp, r7
 8003d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d84:	4770      	bx	lr

08003d86 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8003d86:	b480      	push	{r7}
 8003d88:	b085      	sub	sp, #20
 8003d8a:	af00      	add	r7, sp, #0
 8003d8c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	695b      	ldr	r3, [r3, #20]
 8003d92:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	699b      	ldr	r3, [r3, #24]
 8003d98:	68fa      	ldr	r2, [r7, #12]
 8003d9a:	4013      	ands	r3, r2
 8003d9c:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8003d9e:	68fb      	ldr	r3, [r7, #12]
}
 8003da0:	4618      	mov	r0, r3
 8003da2:	3714      	adds	r7, #20
 8003da4:	46bd      	mov	sp, r7
 8003da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003daa:	4770      	bx	lr

08003dac <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8003dac:	b480      	push	{r7}
 8003dae:	b085      	sub	sp, #20
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003dbe:	699b      	ldr	r3, [r3, #24]
 8003dc0:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003dc8:	69db      	ldr	r3, [r3, #28]
 8003dca:	68ba      	ldr	r2, [r7, #8]
 8003dcc:	4013      	ands	r3, r2
 8003dce:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8003dd0:	68bb      	ldr	r3, [r7, #8]
 8003dd2:	0c1b      	lsrs	r3, r3, #16
}
 8003dd4:	4618      	mov	r0, r3
 8003dd6:	3714      	adds	r7, #20
 8003dd8:	46bd      	mov	sp, r7
 8003dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dde:	4770      	bx	lr

08003de0 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8003de0:	b480      	push	{r7}
 8003de2:	b085      	sub	sp, #20
 8003de4:	af00      	add	r7, sp, #0
 8003de6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003df2:	699b      	ldr	r3, [r3, #24]
 8003df4:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003dfc:	69db      	ldr	r3, [r3, #28]
 8003dfe:	68ba      	ldr	r2, [r7, #8]
 8003e00:	4013      	ands	r3, r2
 8003e02:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8003e04:	68bb      	ldr	r3, [r7, #8]
 8003e06:	b29b      	uxth	r3, r3
}
 8003e08:	4618      	mov	r0, r3
 8003e0a:	3714      	adds	r7, #20
 8003e0c:	46bd      	mov	sp, r7
 8003e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e12:	4770      	bx	lr

08003e14 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8003e14:	b480      	push	{r7}
 8003e16:	b085      	sub	sp, #20
 8003e18:	af00      	add	r7, sp, #0
 8003e1a:	6078      	str	r0, [r7, #4]
 8003e1c:	460b      	mov	r3, r1
 8003e1e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8003e24:	78fb      	ldrb	r3, [r7, #3]
 8003e26:	015a      	lsls	r2, r3, #5
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	4413      	add	r3, r2
 8003e2c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e30:	689b      	ldr	r3, [r3, #8]
 8003e32:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e3a:	695b      	ldr	r3, [r3, #20]
 8003e3c:	68ba      	ldr	r2, [r7, #8]
 8003e3e:	4013      	ands	r3, r2
 8003e40:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8003e42:	68bb      	ldr	r3, [r7, #8]
}
 8003e44:	4618      	mov	r0, r3
 8003e46:	3714      	adds	r7, #20
 8003e48:	46bd      	mov	sp, r7
 8003e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e4e:	4770      	bx	lr

08003e50 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8003e50:	b480      	push	{r7}
 8003e52:	b087      	sub	sp, #28
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	6078      	str	r0, [r7, #4]
 8003e58:	460b      	mov	r3, r1
 8003e5a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8003e60:	697b      	ldr	r3, [r7, #20]
 8003e62:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e66:	691b      	ldr	r3, [r3, #16]
 8003e68:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8003e6a:	697b      	ldr	r3, [r7, #20]
 8003e6c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e72:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8003e74:	78fb      	ldrb	r3, [r7, #3]
 8003e76:	f003 030f 	and.w	r3, r3, #15
 8003e7a:	68fa      	ldr	r2, [r7, #12]
 8003e7c:	fa22 f303 	lsr.w	r3, r2, r3
 8003e80:	01db      	lsls	r3, r3, #7
 8003e82:	b2db      	uxtb	r3, r3
 8003e84:	693a      	ldr	r2, [r7, #16]
 8003e86:	4313      	orrs	r3, r2
 8003e88:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8003e8a:	78fb      	ldrb	r3, [r7, #3]
 8003e8c:	015a      	lsls	r2, r3, #5
 8003e8e:	697b      	ldr	r3, [r7, #20]
 8003e90:	4413      	add	r3, r2
 8003e92:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e96:	689b      	ldr	r3, [r3, #8]
 8003e98:	693a      	ldr	r2, [r7, #16]
 8003e9a:	4013      	ands	r3, r2
 8003e9c:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8003e9e:	68bb      	ldr	r3, [r7, #8]
}
 8003ea0:	4618      	mov	r0, r3
 8003ea2:	371c      	adds	r7, #28
 8003ea4:	46bd      	mov	sp, r7
 8003ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eaa:	4770      	bx	lr

08003eac <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8003eac:	b480      	push	{r7}
 8003eae:	b083      	sub	sp, #12
 8003eb0:	af00      	add	r7, sp, #0
 8003eb2:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	695b      	ldr	r3, [r3, #20]
 8003eb8:	f003 0301 	and.w	r3, r3, #1
}
 8003ebc:	4618      	mov	r0, r3
 8003ebe:	370c      	adds	r7, #12
 8003ec0:	46bd      	mov	sp, r7
 8003ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec6:	4770      	bx	lr

08003ec8 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8003ec8:	b480      	push	{r7}
 8003eca:	b085      	sub	sp, #20
 8003ecc:	af00      	add	r7, sp, #0
 8003ece:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	68fa      	ldr	r2, [r7, #12]
 8003ede:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003ee2:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8003ee6:	f023 0307 	bic.w	r3, r3, #7
 8003eea:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ef2:	685b      	ldr	r3, [r3, #4]
 8003ef4:	68fa      	ldr	r2, [r7, #12]
 8003ef6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003efa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003efe:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8003f00:	2300      	movs	r3, #0
}
 8003f02:	4618      	mov	r0, r3
 8003f04:	3714      	adds	r7, #20
 8003f06:	46bd      	mov	sp, r7
 8003f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f0c:	4770      	bx	lr
	...

08003f10 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8003f10:	b480      	push	{r7}
 8003f12:	b087      	sub	sp, #28
 8003f14:	af00      	add	r7, sp, #0
 8003f16:	60f8      	str	r0, [r7, #12]
 8003f18:	460b      	mov	r3, r1
 8003f1a:	607a      	str	r2, [r7, #4]
 8003f1c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	333c      	adds	r3, #60	; 0x3c
 8003f26:	3304      	adds	r3, #4
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8003f2c:	693b      	ldr	r3, [r7, #16]
 8003f2e:	4a26      	ldr	r2, [pc, #152]	; (8003fc8 <USB_EP0_OutStart+0xb8>)
 8003f30:	4293      	cmp	r3, r2
 8003f32:	d90a      	bls.n	8003f4a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003f34:	697b      	ldr	r3, [r7, #20]
 8003f36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003f40:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003f44:	d101      	bne.n	8003f4a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8003f46:	2300      	movs	r3, #0
 8003f48:	e037      	b.n	8003fba <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8003f4a:	697b      	ldr	r3, [r7, #20]
 8003f4c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f50:	461a      	mov	r2, r3
 8003f52:	2300      	movs	r3, #0
 8003f54:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8003f56:	697b      	ldr	r3, [r7, #20]
 8003f58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f5c:	691b      	ldr	r3, [r3, #16]
 8003f5e:	697a      	ldr	r2, [r7, #20]
 8003f60:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003f64:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003f68:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8003f6a:	697b      	ldr	r3, [r7, #20]
 8003f6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f70:	691b      	ldr	r3, [r3, #16]
 8003f72:	697a      	ldr	r2, [r7, #20]
 8003f74:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003f78:	f043 0318 	orr.w	r3, r3, #24
 8003f7c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8003f7e:	697b      	ldr	r3, [r7, #20]
 8003f80:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f84:	691b      	ldr	r3, [r3, #16]
 8003f86:	697a      	ldr	r2, [r7, #20]
 8003f88:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003f8c:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8003f90:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8003f92:	7afb      	ldrb	r3, [r7, #11]
 8003f94:	2b01      	cmp	r3, #1
 8003f96:	d10f      	bne.n	8003fb8 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8003f98:	697b      	ldr	r3, [r7, #20]
 8003f9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f9e:	461a      	mov	r2, r3
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8003fa4:	697b      	ldr	r3, [r7, #20]
 8003fa6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	697a      	ldr	r2, [r7, #20]
 8003fae:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003fb2:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8003fb6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8003fb8:	2300      	movs	r3, #0
}
 8003fba:	4618      	mov	r0, r3
 8003fbc:	371c      	adds	r7, #28
 8003fbe:	46bd      	mov	sp, r7
 8003fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc4:	4770      	bx	lr
 8003fc6:	bf00      	nop
 8003fc8:	4f54300a 	.word	0x4f54300a

08003fcc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8003fcc:	b480      	push	{r7}
 8003fce:	b085      	sub	sp, #20
 8003fd0:	af00      	add	r7, sp, #0
 8003fd2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003fd4:	2300      	movs	r3, #0
 8003fd6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	3301      	adds	r3, #1
 8003fdc:	60fb      	str	r3, [r7, #12]
 8003fde:	4a13      	ldr	r2, [pc, #76]	; (800402c <USB_CoreReset+0x60>)
 8003fe0:	4293      	cmp	r3, r2
 8003fe2:	d901      	bls.n	8003fe8 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 8003fe4:	2303      	movs	r3, #3
 8003fe6:	e01a      	b.n	800401e <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	691b      	ldr	r3, [r3, #16]
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	daf3      	bge.n	8003fd8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8003ff0:	2300      	movs	r3, #0
 8003ff2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	691b      	ldr	r3, [r3, #16]
 8003ff8:	f043 0201 	orr.w	r2, r3, #1
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	3301      	adds	r3, #1
 8004004:	60fb      	str	r3, [r7, #12]
 8004006:	4a09      	ldr	r2, [pc, #36]	; (800402c <USB_CoreReset+0x60>)
 8004008:	4293      	cmp	r3, r2
 800400a:	d901      	bls.n	8004010 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 800400c:	2303      	movs	r3, #3
 800400e:	e006      	b.n	800401e <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	691b      	ldr	r3, [r3, #16]
 8004014:	f003 0301 	and.w	r3, r3, #1
 8004018:	2b01      	cmp	r3, #1
 800401a:	d0f1      	beq.n	8004000 <USB_CoreReset+0x34>

  return HAL_OK;
 800401c:	2300      	movs	r3, #0
}
 800401e:	4618      	mov	r0, r3
 8004020:	3714      	adds	r7, #20
 8004022:	46bd      	mov	sp, r7
 8004024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004028:	4770      	bx	lr
 800402a:	bf00      	nop
 800402c:	00030d40 	.word	0x00030d40

08004030 <USBD_MSC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004030:	b580      	push	{r7, lr}
 8004032:	b084      	sub	sp, #16
 8004034:	af00      	add	r7, sp, #0
 8004036:	6078      	str	r0, [r7, #4]
 8004038:	460b      	mov	r3, r1
 800403a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_MSC_BOT_HandleTypeDef *hmsc;

  hmsc = USBD_malloc(sizeof(USBD_MSC_BOT_HandleTypeDef));
 800403c:	f44f 701d 	mov.w	r0, #628	; 0x274
 8004040:	f003 fbae 	bl	80077a0 <USBD_static_malloc>
 8004044:	60f8      	str	r0, [r7, #12]

  if (hmsc == NULL)
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	2b00      	cmp	r3, #0
 800404a:	d105      	bne.n	8004058 <USBD_MSC_Init+0x28>
  {
    pdev->pClassData = NULL;
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	2200      	movs	r2, #0
 8004050:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8004054:	2302      	movs	r3, #2
 8004056:	e034      	b.n	80040c2 <USBD_MSC_Init+0x92>
  }

  pdev->pClassData = (void *)hmsc;
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	68fa      	ldr	r2, [r7, #12]
 800405c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	7c1b      	ldrb	r3, [r3, #16]
 8004064:	2b00      	cmp	r3, #0
 8004066:	d115      	bne.n	8004094 <USBD_MSC_Init+0x64>
  {
    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, MSC_EPOUT_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 8004068:	f44f 7300 	mov.w	r3, #512	; 0x200
 800406c:	2202      	movs	r2, #2
 800406e:	2101      	movs	r1, #1
 8004070:	6878      	ldr	r0, [r7, #4]
 8004072:	f003 fa52 	bl	800751a <USBD_LL_OpenEP>
    pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 1U;
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	2201      	movs	r2, #1
 800407a:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, MSC_EPIN_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 800407e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004082:	2202      	movs	r2, #2
 8004084:	2181      	movs	r1, #129	; 0x81
 8004086:	6878      	ldr	r0, [r7, #4]
 8004088:	f003 fa47 	bl	800751a <USBD_LL_OpenEP>
    pdev->ep_in[MSC_EPIN_ADDR & 0xFU].is_used = 1U;
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	2201      	movs	r2, #1
 8004090:	871a      	strh	r2, [r3, #56]	; 0x38
 8004092:	e012      	b.n	80040ba <USBD_MSC_Init+0x8a>
  }
  else
  {
    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, MSC_EPOUT_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 8004094:	2340      	movs	r3, #64	; 0x40
 8004096:	2202      	movs	r2, #2
 8004098:	2101      	movs	r1, #1
 800409a:	6878      	ldr	r0, [r7, #4]
 800409c:	f003 fa3d 	bl	800751a <USBD_LL_OpenEP>
    pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 1U;
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	2201      	movs	r2, #1
 80040a4:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, MSC_EPIN_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 80040a8:	2340      	movs	r3, #64	; 0x40
 80040aa:	2202      	movs	r2, #2
 80040ac:	2181      	movs	r1, #129	; 0x81
 80040ae:	6878      	ldr	r0, [r7, #4]
 80040b0:	f003 fa33 	bl	800751a <USBD_LL_OpenEP>
    pdev->ep_in[MSC_EPIN_ADDR & 0xFU].is_used = 1U;
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	2201      	movs	r2, #1
 80040b8:	871a      	strh	r2, [r3, #56]	; 0x38
  }

  /* Init the BOT  layer */
  MSC_BOT_Init(pdev);
 80040ba:	6878      	ldr	r0, [r7, #4]
 80040bc:	f000 f999 	bl	80043f2 <MSC_BOT_Init>

  return (uint8_t)USBD_OK;
 80040c0:	2300      	movs	r3, #0
}
 80040c2:	4618      	mov	r0, r3
 80040c4:	3710      	adds	r7, #16
 80040c6:	46bd      	mov	sp, r7
 80040c8:	bd80      	pop	{r7, pc}

080040ca <USBD_MSC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80040ca:	b580      	push	{r7, lr}
 80040cc:	b082      	sub	sp, #8
 80040ce:	af00      	add	r7, sp, #0
 80040d0:	6078      	str	r0, [r7, #4]
 80040d2:	460b      	mov	r3, r1
 80040d4:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close MSC EPs */
  (void)USBD_LL_CloseEP(pdev, MSC_EPOUT_ADDR);
 80040d6:	2101      	movs	r1, #1
 80040d8:	6878      	ldr	r0, [r7, #4]
 80040da:	f003 fa44 	bl	8007566 <USBD_LL_CloseEP>
  pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 0U;
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	2200      	movs	r2, #0
 80040e2:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, MSC_EPIN_ADDR);
 80040e6:	2181      	movs	r1, #129	; 0x81
 80040e8:	6878      	ldr	r0, [r7, #4]
 80040ea:	f003 fa3c 	bl	8007566 <USBD_LL_CloseEP>
  pdev->ep_in[MSC_EPIN_ADDR & 0xFU].is_used = 0U;
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	2200      	movs	r2, #0
 80040f2:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Free MSC Class Resources */
  if (pdev->pClassData != NULL)
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d00c      	beq.n	8004118 <USBD_MSC_DeInit+0x4e>
  {
    /* De-Init the BOT layer */
    MSC_BOT_DeInit(pdev);
 80040fe:	6878      	ldr	r0, [r7, #4]
 8004100:	f000 f9d5 	bl	80044ae <MSC_BOT_DeInit>

    (void)USBD_free(pdev->pClassData);
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800410a:	4618      	mov	r0, r3
 800410c:	f003 fb56 	bl	80077bc <USBD_static_free>
    pdev->pClassData = NULL;
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	2200      	movs	r2, #0
 8004114:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8004118:	2300      	movs	r3, #0
}
 800411a:	4618      	mov	r0, r3
 800411c:	3708      	adds	r7, #8
 800411e:	46bd      	mov	sp, r7
 8004120:	bd80      	pop	{r7, pc}
	...

08004124 <USBD_MSC_Setup>:
  * @param  pdev: device instance
  * @param  req: USB request
  * @retval status
  */
uint8_t USBD_MSC_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8004124:	b580      	push	{r7, lr}
 8004126:	b086      	sub	sp, #24
 8004128:	af00      	add	r7, sp, #0
 800412a:	6078      	str	r0, [r7, #4]
 800412c:	6039      	str	r1, [r7, #0]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004134:	613b      	str	r3, [r7, #16]
  USBD_StatusTypeDef ret = USBD_OK;
 8004136:	2300      	movs	r3, #0
 8004138:	75fb      	strb	r3, [r7, #23]
  uint16_t status_info = 0U;
 800413a:	2300      	movs	r3, #0
 800413c:	81fb      	strh	r3, [r7, #14]

  if (hmsc == NULL)
 800413e:	693b      	ldr	r3, [r7, #16]
 8004140:	2b00      	cmp	r3, #0
 8004142:	d101      	bne.n	8004148 <USBD_MSC_Setup+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8004144:	2303      	movs	r3, #3
 8004146:	e0db      	b.n	8004300 <USBD_MSC_Setup+0x1dc>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004148:	683b      	ldr	r3, [r7, #0]
 800414a:	781b      	ldrb	r3, [r3, #0]
 800414c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8004150:	2b00      	cmp	r3, #0
 8004152:	d04e      	beq.n	80041f2 <USBD_MSC_Setup+0xce>
 8004154:	2b20      	cmp	r3, #32
 8004156:	f040 80cb 	bne.w	80042f0 <USBD_MSC_Setup+0x1cc>
  {
    /* Class request */
    case USB_REQ_TYPE_CLASS:
      switch (req->bRequest)
 800415a:	683b      	ldr	r3, [r7, #0]
 800415c:	785b      	ldrb	r3, [r3, #1]
 800415e:	2bfe      	cmp	r3, #254	; 0xfe
 8004160:	d002      	beq.n	8004168 <USBD_MSC_Setup+0x44>
 8004162:	2bff      	cmp	r3, #255	; 0xff
 8004164:	d025      	beq.n	80041b2 <USBD_MSC_Setup+0x8e>
 8004166:	e03c      	b.n	80041e2 <USBD_MSC_Setup+0xbe>
      {
        case BOT_GET_MAX_LUN:
          if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 8004168:	683b      	ldr	r3, [r7, #0]
 800416a:	885b      	ldrh	r3, [r3, #2]
 800416c:	2b00      	cmp	r3, #0
 800416e:	d119      	bne.n	80041a4 <USBD_MSC_Setup+0x80>
 8004170:	683b      	ldr	r3, [r7, #0]
 8004172:	88db      	ldrh	r3, [r3, #6]
 8004174:	2b01      	cmp	r3, #1
 8004176:	d115      	bne.n	80041a4 <USBD_MSC_Setup+0x80>
              ((req->bmRequest & 0x80U) == 0x80U))
 8004178:	683b      	ldr	r3, [r7, #0]
 800417a:	781b      	ldrb	r3, [r3, #0]
 800417c:	b25b      	sxtb	r3, r3
          if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 800417e:	2b00      	cmp	r3, #0
 8004180:	da10      	bge.n	80041a4 <USBD_MSC_Setup+0x80>
          {
            hmsc->max_lun = (uint32_t)((USBD_StorageTypeDef *)pdev->pUserData)->GetMaxLun();
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8004188:	699b      	ldr	r3, [r3, #24]
 800418a:	4798      	blx	r3
 800418c:	4603      	mov	r3, r0
 800418e:	461a      	mov	r2, r3
 8004190:	693b      	ldr	r3, [r7, #16]
 8004192:	601a      	str	r2, [r3, #0]
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hmsc->max_lun, 1U);
 8004194:	693b      	ldr	r3, [r7, #16]
 8004196:	2201      	movs	r2, #1
 8004198:	4619      	mov	r1, r3
 800419a:	6878      	ldr	r0, [r7, #4]
 800419c:	f002 fe13 	bl	8006dc6 <USBD_CtlSendData>
 80041a0:	bf00      	nop
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80041a2:	e025      	b.n	80041f0 <USBD_MSC_Setup+0xcc>
            USBD_CtlError(pdev, req);
 80041a4:	6839      	ldr	r1, [r7, #0]
 80041a6:	6878      	ldr	r0, [r7, #4]
 80041a8:	f002 fd9c 	bl	8006ce4 <USBD_CtlError>
            ret = USBD_FAIL;
 80041ac:	2303      	movs	r3, #3
 80041ae:	75fb      	strb	r3, [r7, #23]
          break;
 80041b0:	e01e      	b.n	80041f0 <USBD_MSC_Setup+0xcc>

        case BOT_RESET :
          if ((req->wValue  == 0U) && (req->wLength == 0U) &&
 80041b2:	683b      	ldr	r3, [r7, #0]
 80041b4:	885b      	ldrh	r3, [r3, #2]
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d10c      	bne.n	80041d4 <USBD_MSC_Setup+0xb0>
 80041ba:	683b      	ldr	r3, [r7, #0]
 80041bc:	88db      	ldrh	r3, [r3, #6]
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d108      	bne.n	80041d4 <USBD_MSC_Setup+0xb0>
              ((req->bmRequest & 0x80U) != 0x80U))
 80041c2:	683b      	ldr	r3, [r7, #0]
 80041c4:	781b      	ldrb	r3, [r3, #0]
 80041c6:	b25b      	sxtb	r3, r3
          if ((req->wValue  == 0U) && (req->wLength == 0U) &&
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	db03      	blt.n	80041d4 <USBD_MSC_Setup+0xb0>
          {
            MSC_BOT_Reset(pdev);
 80041cc:	6878      	ldr	r0, [r7, #4]
 80041ce:	f000 f948 	bl	8004462 <MSC_BOT_Reset>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80041d2:	e00d      	b.n	80041f0 <USBD_MSC_Setup+0xcc>
            USBD_CtlError(pdev, req);
 80041d4:	6839      	ldr	r1, [r7, #0]
 80041d6:	6878      	ldr	r0, [r7, #4]
 80041d8:	f002 fd84 	bl	8006ce4 <USBD_CtlError>
            ret = USBD_FAIL;
 80041dc:	2303      	movs	r3, #3
 80041de:	75fb      	strb	r3, [r7, #23]
          break;
 80041e0:	e006      	b.n	80041f0 <USBD_MSC_Setup+0xcc>

        default:
          USBD_CtlError(pdev, req);
 80041e2:	6839      	ldr	r1, [r7, #0]
 80041e4:	6878      	ldr	r0, [r7, #4]
 80041e6:	f002 fd7d 	bl	8006ce4 <USBD_CtlError>
          ret = USBD_FAIL;
 80041ea:	2303      	movs	r3, #3
 80041ec:	75fb      	strb	r3, [r7, #23]
          break;
 80041ee:	bf00      	nop
      }
      break;
 80041f0:	e085      	b.n	80042fe <USBD_MSC_Setup+0x1da>
    /* Interface & Endpoint request */
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80041f2:	683b      	ldr	r3, [r7, #0]
 80041f4:	785b      	ldrb	r3, [r3, #1]
 80041f6:	2b0b      	cmp	r3, #11
 80041f8:	d871      	bhi.n	80042de <USBD_MSC_Setup+0x1ba>
 80041fa:	a201      	add	r2, pc, #4	; (adr r2, 8004200 <USBD_MSC_Setup+0xdc>)
 80041fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004200:	08004231 	.word	0x08004231
 8004204:	080042ad 	.word	0x080042ad
 8004208:	080042df 	.word	0x080042df
 800420c:	080042df 	.word	0x080042df
 8004210:	080042df 	.word	0x080042df
 8004214:	080042df 	.word	0x080042df
 8004218:	080042df 	.word	0x080042df
 800421c:	080042df 	.word	0x080042df
 8004220:	080042df 	.word	0x080042df
 8004224:	080042df 	.word	0x080042df
 8004228:	0800425b 	.word	0x0800425b
 800422c:	08004285 	.word	0x08004285
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004236:	b2db      	uxtb	r3, r3
 8004238:	2b03      	cmp	r3, #3
 800423a:	d107      	bne.n	800424c <USBD_MSC_Setup+0x128>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800423c:	f107 030e 	add.w	r3, r7, #14
 8004240:	2202      	movs	r2, #2
 8004242:	4619      	mov	r1, r3
 8004244:	6878      	ldr	r0, [r7, #4]
 8004246:	f002 fdbe 	bl	8006dc6 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800424a:	e050      	b.n	80042ee <USBD_MSC_Setup+0x1ca>
            USBD_CtlError(pdev, req);
 800424c:	6839      	ldr	r1, [r7, #0]
 800424e:	6878      	ldr	r0, [r7, #4]
 8004250:	f002 fd48 	bl	8006ce4 <USBD_CtlError>
            ret = USBD_FAIL;
 8004254:	2303      	movs	r3, #3
 8004256:	75fb      	strb	r3, [r7, #23]
          break;
 8004258:	e049      	b.n	80042ee <USBD_MSC_Setup+0x1ca>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004260:	b2db      	uxtb	r3, r3
 8004262:	2b03      	cmp	r3, #3
 8004264:	d107      	bne.n	8004276 <USBD_MSC_Setup+0x152>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hmsc->interface, 1U);
 8004266:	693b      	ldr	r3, [r7, #16]
 8004268:	3304      	adds	r3, #4
 800426a:	2201      	movs	r2, #1
 800426c:	4619      	mov	r1, r3
 800426e:	6878      	ldr	r0, [r7, #4]
 8004270:	f002 fda9 	bl	8006dc6 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8004274:	e03b      	b.n	80042ee <USBD_MSC_Setup+0x1ca>
            USBD_CtlError(pdev, req);
 8004276:	6839      	ldr	r1, [r7, #0]
 8004278:	6878      	ldr	r0, [r7, #4]
 800427a:	f002 fd33 	bl	8006ce4 <USBD_CtlError>
            ret = USBD_FAIL;
 800427e:	2303      	movs	r3, #3
 8004280:	75fb      	strb	r3, [r7, #23]
          break;
 8004282:	e034      	b.n	80042ee <USBD_MSC_Setup+0x1ca>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800428a:	b2db      	uxtb	r3, r3
 800428c:	2b03      	cmp	r3, #3
 800428e:	d106      	bne.n	800429e <USBD_MSC_Setup+0x17a>
          {
            hmsc->interface = (uint8_t)(req->wValue);
 8004290:	683b      	ldr	r3, [r7, #0]
 8004292:	885b      	ldrh	r3, [r3, #2]
 8004294:	b2db      	uxtb	r3, r3
 8004296:	461a      	mov	r2, r3
 8004298:	693b      	ldr	r3, [r7, #16]
 800429a:	605a      	str	r2, [r3, #4]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800429c:	e027      	b.n	80042ee <USBD_MSC_Setup+0x1ca>
            USBD_CtlError(pdev, req);
 800429e:	6839      	ldr	r1, [r7, #0]
 80042a0:	6878      	ldr	r0, [r7, #4]
 80042a2:	f002 fd1f 	bl	8006ce4 <USBD_CtlError>
            ret = USBD_FAIL;
 80042a6:	2303      	movs	r3, #3
 80042a8:	75fb      	strb	r3, [r7, #23]
          break;
 80042aa:	e020      	b.n	80042ee <USBD_MSC_Setup+0x1ca>

        case USB_REQ_CLEAR_FEATURE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80042b2:	b2db      	uxtb	r3, r3
 80042b4:	2b03      	cmp	r3, #3
 80042b6:	d119      	bne.n	80042ec <USBD_MSC_Setup+0x1c8>
          {
            if (req->wValue == USB_FEATURE_EP_HALT)
 80042b8:	683b      	ldr	r3, [r7, #0]
 80042ba:	885b      	ldrh	r3, [r3, #2]
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d115      	bne.n	80042ec <USBD_MSC_Setup+0x1c8>
            {
              /* Flush the FIFO */
              (void)USBD_LL_FlushEP(pdev, (uint8_t)req->wIndex);
 80042c0:	683b      	ldr	r3, [r7, #0]
 80042c2:	889b      	ldrh	r3, [r3, #4]
 80042c4:	b2db      	uxtb	r3, r3
 80042c6:	4619      	mov	r1, r3
 80042c8:	6878      	ldr	r0, [r7, #4]
 80042ca:	f003 f96b 	bl	80075a4 <USBD_LL_FlushEP>

              /* Handle BOT error */
              MSC_BOT_CplClrFeature(pdev, (uint8_t)req->wIndex);
 80042ce:	683b      	ldr	r3, [r7, #0]
 80042d0:	889b      	ldrh	r3, [r3, #4]
 80042d2:	b2db      	uxtb	r3, r3
 80042d4:	4619      	mov	r1, r3
 80042d6:	6878      	ldr	r0, [r7, #4]
 80042d8:	f000 fa82 	bl	80047e0 <MSC_BOT_CplClrFeature>
            }
          }
          break;
 80042dc:	e006      	b.n	80042ec <USBD_MSC_Setup+0x1c8>

        default:
          USBD_CtlError(pdev, req);
 80042de:	6839      	ldr	r1, [r7, #0]
 80042e0:	6878      	ldr	r0, [r7, #4]
 80042e2:	f002 fcff 	bl	8006ce4 <USBD_CtlError>
          ret = USBD_FAIL;
 80042e6:	2303      	movs	r3, #3
 80042e8:	75fb      	strb	r3, [r7, #23]
          break;
 80042ea:	e000      	b.n	80042ee <USBD_MSC_Setup+0x1ca>
          break;
 80042ec:	bf00      	nop
      }
      break;
 80042ee:	e006      	b.n	80042fe <USBD_MSC_Setup+0x1da>

    default:
      USBD_CtlError(pdev, req);
 80042f0:	6839      	ldr	r1, [r7, #0]
 80042f2:	6878      	ldr	r0, [r7, #4]
 80042f4:	f002 fcf6 	bl	8006ce4 <USBD_CtlError>
      ret = USBD_FAIL;
 80042f8:	2303      	movs	r3, #3
 80042fa:	75fb      	strb	r3, [r7, #23]
      break;
 80042fc:	bf00      	nop
  }

  return (uint8_t)ret;
 80042fe:	7dfb      	ldrb	r3, [r7, #23]
}
 8004300:	4618      	mov	r0, r3
 8004302:	3718      	adds	r7, #24
 8004304:	46bd      	mov	sp, r7
 8004306:	bd80      	pop	{r7, pc}

08004308 <USBD_MSC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
uint8_t USBD_MSC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8004308:	b580      	push	{r7, lr}
 800430a:	b082      	sub	sp, #8
 800430c:	af00      	add	r7, sp, #0
 800430e:	6078      	str	r0, [r7, #4]
 8004310:	460b      	mov	r3, r1
 8004312:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataIn(pdev, epnum);
 8004314:	78fb      	ldrb	r3, [r7, #3]
 8004316:	4619      	mov	r1, r3
 8004318:	6878      	ldr	r0, [r7, #4]
 800431a:	f000 f8dc 	bl	80044d6 <MSC_BOT_DataIn>

  return (uint8_t)USBD_OK;
 800431e:	2300      	movs	r3, #0
}
 8004320:	4618      	mov	r0, r3
 8004322:	3708      	adds	r7, #8
 8004324:	46bd      	mov	sp, r7
 8004326:	bd80      	pop	{r7, pc}

08004328 <USBD_MSC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
uint8_t USBD_MSC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8004328:	b580      	push	{r7, lr}
 800432a:	b082      	sub	sp, #8
 800432c:	af00      	add	r7, sp, #0
 800432e:	6078      	str	r0, [r7, #4]
 8004330:	460b      	mov	r3, r1
 8004332:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataOut(pdev, epnum);
 8004334:	78fb      	ldrb	r3, [r7, #3]
 8004336:	4619      	mov	r1, r3
 8004338:	6878      	ldr	r0, [r7, #4]
 800433a:	f000 f902 	bl	8004542 <MSC_BOT_DataOut>

  return (uint8_t)USBD_OK;
 800433e:	2300      	movs	r3, #0
}
 8004340:	4618      	mov	r0, r3
 8004342:	3708      	adds	r7, #8
 8004344:	46bd      	mov	sp, r7
 8004346:	bd80      	pop	{r7, pc}

08004348 <USBD_MSC_GetHSCfgDesc>:
  *         return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetHSCfgDesc(uint16_t *length)
{
 8004348:	b480      	push	{r7}
 800434a:	b083      	sub	sp, #12
 800434c:	af00      	add	r7, sp, #0
 800434e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_CfgHSDesc);
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	2220      	movs	r2, #32
 8004354:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_CfgHSDesc;
 8004356:	4b03      	ldr	r3, [pc, #12]	; (8004364 <USBD_MSC_GetHSCfgDesc+0x1c>)
}
 8004358:	4618      	mov	r0, r3
 800435a:	370c      	adds	r7, #12
 800435c:	46bd      	mov	sp, r7
 800435e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004362:	4770      	bx	lr
 8004364:	20000044 	.word	0x20000044

08004368 <USBD_MSC_GetFSCfgDesc>:
  *         return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetFSCfgDesc(uint16_t *length)
{
 8004368:	b480      	push	{r7}
 800436a:	b083      	sub	sp, #12
 800436c:	af00      	add	r7, sp, #0
 800436e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_CfgFSDesc);
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	2220      	movs	r2, #32
 8004374:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_CfgFSDesc;
 8004376:	4b03      	ldr	r3, [pc, #12]	; (8004384 <USBD_MSC_GetFSCfgDesc+0x1c>)
}
 8004378:	4618      	mov	r0, r3
 800437a:	370c      	adds	r7, #12
 800437c:	46bd      	mov	sp, r7
 800437e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004382:	4770      	bx	lr
 8004384:	20000064 	.word	0x20000064

08004388 <USBD_MSC_GetOtherSpeedCfgDesc>:
  *         return other speed configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8004388:	b480      	push	{r7}
 800438a:	b083      	sub	sp, #12
 800438c:	af00      	add	r7, sp, #0
 800438e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_OtherSpeedCfgDesc);
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	2220      	movs	r2, #32
 8004394:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_OtherSpeedCfgDesc;
 8004396:	4b03      	ldr	r3, [pc, #12]	; (80043a4 <USBD_MSC_GetOtherSpeedCfgDesc+0x1c>)
}
 8004398:	4618      	mov	r0, r3
 800439a:	370c      	adds	r7, #12
 800439c:	46bd      	mov	sp, r7
 800439e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a2:	4770      	bx	lr
 80043a4:	20000084 	.word	0x20000084

080043a8 <USBD_MSC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80043a8:	b480      	push	{r7}
 80043aa:	b083      	sub	sp, #12
 80043ac:	af00      	add	r7, sp, #0
 80043ae:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_DeviceQualifierDesc);
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	220a      	movs	r2, #10
 80043b4:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_DeviceQualifierDesc;
 80043b6:	4b03      	ldr	r3, [pc, #12]	; (80043c4 <USBD_MSC_GetDeviceQualifierDescriptor+0x1c>)
}
 80043b8:	4618      	mov	r0, r3
 80043ba:	370c      	adds	r7, #12
 80043bc:	46bd      	mov	sp, r7
 80043be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c2:	4770      	bx	lr
 80043c4:	200000a4 	.word	0x200000a4

080043c8 <USBD_MSC_RegisterStorage>:
  * @brief  USBD_MSC_RegisterStorage
  * @param  fops: storage callback
  * @retval status
  */
uint8_t USBD_MSC_RegisterStorage(USBD_HandleTypeDef *pdev, USBD_StorageTypeDef *fops)
{
 80043c8:	b480      	push	{r7}
 80043ca:	b083      	sub	sp, #12
 80043cc:	af00      	add	r7, sp, #0
 80043ce:	6078      	str	r0, [r7, #4]
 80043d0:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80043d2:	683b      	ldr	r3, [r7, #0]
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d101      	bne.n	80043dc <USBD_MSC_RegisterStorage+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80043d8:	2303      	movs	r3, #3
 80043da:	e004      	b.n	80043e6 <USBD_MSC_RegisterStorage+0x1e>
  }

  pdev->pUserData = fops;
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	683a      	ldr	r2, [r7, #0]
 80043e0:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 80043e4:	2300      	movs	r3, #0
}
 80043e6:	4618      	mov	r0, r3
 80043e8:	370c      	adds	r7, #12
 80043ea:	46bd      	mov	sp, r7
 80043ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f0:	4770      	bx	lr

080043f2 <MSC_BOT_Init>:
  *         Initialize the BOT Process
  * @param  pdev: device instance
  * @retval None
  */
void MSC_BOT_Init(USBD_HandleTypeDef *pdev)
{
 80043f2:	b580      	push	{r7, lr}
 80043f4:	b084      	sub	sp, #16
 80043f6:	af00      	add	r7, sp, #0
 80043f8:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004400:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	2b00      	cmp	r3, #0
 8004406:	d028      	beq.n	800445a <MSC_BOT_Init+0x68>
  {
    return;
  }

  hmsc->bot_state = USBD_BOT_IDLE;
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	2200      	movs	r2, #0
 800440c:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_NORMAL;
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	2200      	movs	r2, #0
 8004412:	725a      	strb	r2, [r3, #9]

  hmsc->scsi_sense_tail = 0U;
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	2200      	movs	r2, #0
 8004418:	f883 2261 	strb.w	r2, [r3, #609]	; 0x261
  hmsc->scsi_sense_head = 0U;
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	2200      	movs	r2, #0
 8004420:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260
  hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	2200      	movs	r2, #0
 8004428:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262

  ((USBD_StorageTypeDef *)pdev->pUserData)->Init(0U);
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	2000      	movs	r0, #0
 8004436:	4798      	blx	r3

  (void)USBD_LL_FlushEP(pdev, MSC_EPOUT_ADDR);
 8004438:	2101      	movs	r1, #1
 800443a:	6878      	ldr	r0, [r7, #4]
 800443c:	f003 f8b2 	bl	80075a4 <USBD_LL_FlushEP>
  (void)USBD_LL_FlushEP(pdev, MSC_EPIN_ADDR);
 8004440:	2181      	movs	r1, #129	; 0x81
 8004442:	6878      	ldr	r0, [r7, #4]
 8004444:	f003 f8ae 	bl	80075a4 <USBD_LL_FlushEP>

  /* Prepare EP to Receive First BOT Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, (uint8_t *)&hmsc->cbw,
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	f503 7204 	add.w	r2, r3, #528	; 0x210
 800444e:	231f      	movs	r3, #31
 8004450:	2101      	movs	r1, #1
 8004452:	6878      	ldr	r0, [r7, #4]
 8004454:	f003 f96f 	bl	8007736 <USBD_LL_PrepareReceive>
 8004458:	e000      	b.n	800445c <MSC_BOT_Init+0x6a>
    return;
 800445a:	bf00      	nop
                               USBD_BOT_CBW_LENGTH);
}
 800445c:	3710      	adds	r7, #16
 800445e:	46bd      	mov	sp, r7
 8004460:	bd80      	pop	{r7, pc}

08004462 <MSC_BOT_Reset>:
  *         Reset the BOT Machine
  * @param  pdev: device instance
  * @retval  None
  */
void MSC_BOT_Reset(USBD_HandleTypeDef *pdev)
{
 8004462:	b580      	push	{r7, lr}
 8004464:	b084      	sub	sp, #16
 8004466:	af00      	add	r7, sp, #0
 8004468:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004470:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	2b00      	cmp	r3, #0
 8004476:	d016      	beq.n	80044a6 <MSC_BOT_Reset+0x44>
  {
    return;
  }

  hmsc->bot_state  = USBD_BOT_IDLE;
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	2200      	movs	r2, #0
 800447c:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_RECOVERY;
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	2201      	movs	r2, #1
 8004482:	725a      	strb	r2, [r3, #9]

  (void)USBD_LL_ClearStallEP(pdev, MSC_EPIN_ADDR);
 8004484:	2181      	movs	r1, #129	; 0x81
 8004486:	6878      	ldr	r0, [r7, #4]
 8004488:	f003 f8ca 	bl	8007620 <USBD_LL_ClearStallEP>
  (void)USBD_LL_ClearStallEP(pdev, MSC_EPOUT_ADDR);
 800448c:	2101      	movs	r1, #1
 800448e:	6878      	ldr	r0, [r7, #4]
 8004490:	f003 f8c6 	bl	8007620 <USBD_LL_ClearStallEP>

  /* Prepare EP to Receive First BOT Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, (uint8_t *)&hmsc->cbw,
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	f503 7204 	add.w	r2, r3, #528	; 0x210
 800449a:	231f      	movs	r3, #31
 800449c:	2101      	movs	r1, #1
 800449e:	6878      	ldr	r0, [r7, #4]
 80044a0:	f003 f949 	bl	8007736 <USBD_LL_PrepareReceive>
 80044a4:	e000      	b.n	80044a8 <MSC_BOT_Reset+0x46>
    return;
 80044a6:	bf00      	nop
                               USBD_BOT_CBW_LENGTH);
}
 80044a8:	3710      	adds	r7, #16
 80044aa:	46bd      	mov	sp, r7
 80044ac:	bd80      	pop	{r7, pc}

080044ae <MSC_BOT_DeInit>:
  *         DeInitialize the BOT Machine
  * @param  pdev: device instance
  * @retval None
  */
void MSC_BOT_DeInit(USBD_HandleTypeDef  *pdev)
{
 80044ae:	b480      	push	{r7}
 80044b0:	b085      	sub	sp, #20
 80044b2:	af00      	add	r7, sp, #0
 80044b4:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80044bc:	60fb      	str	r3, [r7, #12]

  if (hmsc != NULL)
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d002      	beq.n	80044ca <MSC_BOT_DeInit+0x1c>
  {
    hmsc->bot_state = USBD_BOT_IDLE;
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	2200      	movs	r2, #0
 80044c8:	721a      	strb	r2, [r3, #8]
  }
}
 80044ca:	bf00      	nop
 80044cc:	3714      	adds	r7, #20
 80044ce:	46bd      	mov	sp, r7
 80044d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d4:	4770      	bx	lr

080044d6 <MSC_BOT_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval None
  */
void MSC_BOT_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80044d6:	b580      	push	{r7, lr}
 80044d8:	b084      	sub	sp, #16
 80044da:	af00      	add	r7, sp, #0
 80044dc:	6078      	str	r0, [r7, #4]
 80044de:	460b      	mov	r3, r1
 80044e0:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80044e8:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d020      	beq.n	8004532 <MSC_BOT_DataIn+0x5c>
  {
    return;
  }

  switch (hmsc->bot_state)
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	7a1b      	ldrb	r3, [r3, #8]
 80044f4:	2b02      	cmp	r3, #2
 80044f6:	d005      	beq.n	8004504 <MSC_BOT_DataIn+0x2e>
 80044f8:	2b02      	cmp	r3, #2
 80044fa:	db1c      	blt.n	8004536 <MSC_BOT_DataIn+0x60>
 80044fc:	3b03      	subs	r3, #3
 80044fe:	2b01      	cmp	r3, #1
 8004500:	d819      	bhi.n	8004536 <MSC_BOT_DataIn+0x60>
 8004502:	e011      	b.n	8004528 <MSC_BOT_DataIn+0x52>
  {
    case USBD_BOT_DATA_IN:
      if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	f203 231f 	addw	r3, r3, #543	; 0x21f
 8004510:	461a      	mov	r2, r3
 8004512:	6878      	ldr	r0, [r7, #4]
 8004514:	f000 f992 	bl	800483c <SCSI_ProcessCmd>
 8004518:	4603      	mov	r3, r0
 800451a:	2b00      	cmp	r3, #0
 800451c:	da0d      	bge.n	800453a <MSC_BOT_DataIn+0x64>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 800451e:	2101      	movs	r1, #1
 8004520:	6878      	ldr	r0, [r7, #4]
 8004522:	f000 f8fb 	bl	800471c <MSC_BOT_SendCSW>
      }
      break;
 8004526:	e008      	b.n	800453a <MSC_BOT_DataIn+0x64>

    case USBD_BOT_SEND_DATA:
    case USBD_BOT_LAST_DATA_IN:
      MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 8004528:	2100      	movs	r1, #0
 800452a:	6878      	ldr	r0, [r7, #4]
 800452c:	f000 f8f6 	bl	800471c <MSC_BOT_SendCSW>
      break;
 8004530:	e004      	b.n	800453c <MSC_BOT_DataIn+0x66>
    return;
 8004532:	bf00      	nop
 8004534:	e002      	b.n	800453c <MSC_BOT_DataIn+0x66>

    default:
      break;
 8004536:	bf00      	nop
 8004538:	e000      	b.n	800453c <MSC_BOT_DataIn+0x66>
      break;
 800453a:	bf00      	nop
  }
}
 800453c:	3710      	adds	r7, #16
 800453e:	46bd      	mov	sp, r7
 8004540:	bd80      	pop	{r7, pc}

08004542 <MSC_BOT_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval None
  */
void MSC_BOT_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8004542:	b580      	push	{r7, lr}
 8004544:	b084      	sub	sp, #16
 8004546:	af00      	add	r7, sp, #0
 8004548:	6078      	str	r0, [r7, #4]
 800454a:	460b      	mov	r3, r1
 800454c:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004554:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	2b00      	cmp	r3, #0
 800455a:	d01c      	beq.n	8004596 <MSC_BOT_DataOut+0x54>
  {
    return;
  }

  switch (hmsc->bot_state)
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	7a1b      	ldrb	r3, [r3, #8]
 8004560:	2b00      	cmp	r3, #0
 8004562:	d002      	beq.n	800456a <MSC_BOT_DataOut+0x28>
 8004564:	2b01      	cmp	r3, #1
 8004566:	d004      	beq.n	8004572 <MSC_BOT_DataOut+0x30>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
      }
      break;

    default:
      break;
 8004568:	e018      	b.n	800459c <MSC_BOT_DataOut+0x5a>
      MSC_BOT_CBW_Decode(pdev);
 800456a:	6878      	ldr	r0, [r7, #4]
 800456c:	f000 f81a 	bl	80045a4 <MSC_BOT_CBW_Decode>
      break;
 8004570:	e014      	b.n	800459c <MSC_BOT_DataOut+0x5a>
      if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	f203 231f 	addw	r3, r3, #543	; 0x21f
 800457e:	461a      	mov	r2, r3
 8004580:	6878      	ldr	r0, [r7, #4]
 8004582:	f000 f95b 	bl	800483c <SCSI_ProcessCmd>
 8004586:	4603      	mov	r3, r0
 8004588:	2b00      	cmp	r3, #0
 800458a:	da06      	bge.n	800459a <MSC_BOT_DataOut+0x58>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 800458c:	2101      	movs	r1, #1
 800458e:	6878      	ldr	r0, [r7, #4]
 8004590:	f000 f8c4 	bl	800471c <MSC_BOT_SendCSW>
      break;
 8004594:	e001      	b.n	800459a <MSC_BOT_DataOut+0x58>
    return;
 8004596:	bf00      	nop
 8004598:	e000      	b.n	800459c <MSC_BOT_DataOut+0x5a>
      break;
 800459a:	bf00      	nop
  }
}
 800459c:	3710      	adds	r7, #16
 800459e:	46bd      	mov	sp, r7
 80045a0:	bd80      	pop	{r7, pc}
	...

080045a4 <MSC_BOT_CBW_Decode>:
  *         Decode the CBW command and set the BOT state machine accordingly
  * @param  pdev: device instance
  * @retval None
  */
static void  MSC_BOT_CBW_Decode(USBD_HandleTypeDef *pdev)
{
 80045a4:	b580      	push	{r7, lr}
 80045a6:	b084      	sub	sp, #16
 80045a8:	af00      	add	r7, sp, #0
 80045aa:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80045b2:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d077      	beq.n	80046aa <MSC_BOT_CBW_Decode+0x106>
  {
    return;
  }

  hmsc->csw.dTag = hmsc->cbw.dTag;
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234
  hmsc->csw.dDataResidue = hmsc->cbw.dDataLength;
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	f8c3 2238 	str.w	r2, [r3, #568]	; 0x238

  if ((USBD_LL_GetRxDataSize(pdev, MSC_EPOUT_ADDR) != USBD_BOT_CBW_LENGTH) ||
 80045d2:	2101      	movs	r1, #1
 80045d4:	6878      	ldr	r0, [r7, #4]
 80045d6:	f003 f8cf 	bl	8007778 <USBD_LL_GetRxDataSize>
 80045da:	4603      	mov	r3, r0
 80045dc:	2b1f      	cmp	r3, #31
 80045de:	d114      	bne.n	800460a <MSC_BOT_CBW_Decode+0x66>
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
  if ((USBD_LL_GetRxDataSize(pdev, MSC_EPOUT_ADDR) != USBD_BOT_CBW_LENGTH) ||
 80045e6:	4a34      	ldr	r2, [pc, #208]	; (80046b8 <MSC_BOT_CBW_Decode+0x114>)
 80045e8:	4293      	cmp	r3, r2
 80045ea:	d10e      	bne.n	800460a <MSC_BOT_CBW_Decode+0x66>
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 80045f2:	2b01      	cmp	r3, #1
 80045f4:	d809      	bhi.n	800460a <MSC_BOT_CBW_Decode+0x66>
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	f893 321e 	ldrb.w	r3, [r3, #542]	; 0x21e
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d004      	beq.n	800460a <MSC_BOT_CBW_Decode+0x66>
      (hmsc->cbw.bCBLength > 16U))
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	f893 321e 	ldrb.w	r3, [r3, #542]	; 0x21e
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 8004606:	2b10      	cmp	r3, #16
 8004608:	d90e      	bls.n	8004628 <MSC_BOT_CBW_Decode+0x84>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8004610:	2320      	movs	r3, #32
 8004612:	2205      	movs	r2, #5
 8004614:	6878      	ldr	r0, [r7, #4]
 8004616:	f000 fdbc 	bl	8005192 <SCSI_SenseCode>

    hmsc->bot_status = USBD_BOT_STATUS_ERROR;
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	2202      	movs	r2, #2
 800461e:	725a      	strb	r2, [r3, #9]
    MSC_BOT_Abort(pdev);
 8004620:	6878      	ldr	r0, [r7, #4]
 8004622:	f000 f8ab 	bl	800477c <MSC_BOT_Abort>
 8004626:	e043      	b.n	80046b0 <MSC_BOT_CBW_Decode+0x10c>
  }
  else
  {
    if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	f203 231f 	addw	r3, r3, #543	; 0x21f
 8004634:	461a      	mov	r2, r3
 8004636:	6878      	ldr	r0, [r7, #4]
 8004638:	f000 f900 	bl	800483c <SCSI_ProcessCmd>
 800463c:	4603      	mov	r3, r0
 800463e:	2b00      	cmp	r3, #0
 8004640:	da0c      	bge.n	800465c <MSC_BOT_CBW_Decode+0xb8>
    {
      if (hmsc->bot_state == USBD_BOT_NO_DATA)
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	7a1b      	ldrb	r3, [r3, #8]
 8004646:	2b05      	cmp	r3, #5
 8004648:	d104      	bne.n	8004654 <MSC_BOT_CBW_Decode+0xb0>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 800464a:	2101      	movs	r1, #1
 800464c:	6878      	ldr	r0, [r7, #4]
 800464e:	f000 f865 	bl	800471c <MSC_BOT_SendCSW>
 8004652:	e02d      	b.n	80046b0 <MSC_BOT_CBW_Decode+0x10c>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 8004654:	6878      	ldr	r0, [r7, #4]
 8004656:	f000 f891 	bl	800477c <MSC_BOT_Abort>
 800465a:	e029      	b.n	80046b0 <MSC_BOT_CBW_Decode+0x10c>
      }
    }
    /* Burst xfer handled internally */
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	7a1b      	ldrb	r3, [r3, #8]
 8004660:	2b02      	cmp	r3, #2
 8004662:	d024      	beq.n	80046ae <MSC_BOT_CBW_Decode+0x10a>
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	7a1b      	ldrb	r3, [r3, #8]
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 8004668:	2b01      	cmp	r3, #1
 800466a:	d020      	beq.n	80046ae <MSC_BOT_CBW_Decode+0x10a>
             (hmsc->bot_state != USBD_BOT_LAST_DATA_IN))
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	7a1b      	ldrb	r3, [r3, #8]
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 8004670:	2b03      	cmp	r3, #3
 8004672:	d01c      	beq.n	80046ae <MSC_BOT_CBW_Decode+0x10a>
    {
      if (hmsc->bot_data_length > 0U)
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	68db      	ldr	r3, [r3, #12]
 8004678:	2b00      	cmp	r3, #0
 800467a:	d009      	beq.n	8004690 <MSC_BOT_CBW_Decode+0xec>
      {
        MSC_BOT_SendData(pdev, hmsc->bot_data, hmsc->bot_data_length);
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	f103 0110 	add.w	r1, r3, #16
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	68db      	ldr	r3, [r3, #12]
 8004686:	461a      	mov	r2, r3
 8004688:	6878      	ldr	r0, [r7, #4]
 800468a:	f000 f817 	bl	80046bc <MSC_BOT_SendData>
      if (hmsc->bot_data_length > 0U)
 800468e:	e00f      	b.n	80046b0 <MSC_BOT_CBW_Decode+0x10c>
      }
      else if (hmsc->bot_data_length == 0U)
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	68db      	ldr	r3, [r3, #12]
 8004694:	2b00      	cmp	r3, #0
 8004696:	d104      	bne.n	80046a2 <MSC_BOT_CBW_Decode+0xfe>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 8004698:	2100      	movs	r1, #0
 800469a:	6878      	ldr	r0, [r7, #4]
 800469c:	f000 f83e 	bl	800471c <MSC_BOT_SendCSW>
      if (hmsc->bot_data_length > 0U)
 80046a0:	e006      	b.n	80046b0 <MSC_BOT_CBW_Decode+0x10c>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 80046a2:	6878      	ldr	r0, [r7, #4]
 80046a4:	f000 f86a 	bl	800477c <MSC_BOT_Abort>
      if (hmsc->bot_data_length > 0U)
 80046a8:	e002      	b.n	80046b0 <MSC_BOT_CBW_Decode+0x10c>
    return;
 80046aa:	bf00      	nop
 80046ac:	e000      	b.n	80046b0 <MSC_BOT_CBW_Decode+0x10c>
      }
    }
    else
    {
      return;
 80046ae:	bf00      	nop
    }
  }
}
 80046b0:	3710      	adds	r7, #16
 80046b2:	46bd      	mov	sp, r7
 80046b4:	bd80      	pop	{r7, pc}
 80046b6:	bf00      	nop
 80046b8:	43425355 	.word	0x43425355

080046bc <MSC_BOT_SendData>:
  * @param  buf: pointer to data buffer
  * @param  len: Data Length
  * @retval None
  */
static void  MSC_BOT_SendData(USBD_HandleTypeDef *pdev, uint8_t *pbuf, uint32_t len)
{
 80046bc:	b580      	push	{r7, lr}
 80046be:	b086      	sub	sp, #24
 80046c0:	af00      	add	r7, sp, #0
 80046c2:	60f8      	str	r0, [r7, #12]
 80046c4:	60b9      	str	r1, [r7, #8]
 80046c6:	607a      	str	r2, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80046ce:	617b      	str	r3, [r7, #20]

  uint32_t length = MIN(hmsc->cbw.dDataLength, len);
 80046d0:	697b      	ldr	r3, [r7, #20]
 80046d2:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80046d6:	687a      	ldr	r2, [r7, #4]
 80046d8:	4293      	cmp	r3, r2
 80046da:	bf28      	it	cs
 80046dc:	4613      	movcs	r3, r2
 80046de:	613b      	str	r3, [r7, #16]

  if (hmsc == NULL)
 80046e0:	697b      	ldr	r3, [r7, #20]
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d015      	beq.n	8004712 <MSC_BOT_SendData+0x56>
  {
    return;
  }

  hmsc->csw.dDataResidue -= len;
 80046e6:	697b      	ldr	r3, [r7, #20]
 80046e8:	f8d3 2238 	ldr.w	r2, [r3, #568]	; 0x238
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	1ad2      	subs	r2, r2, r3
 80046f0:	697b      	ldr	r3, [r7, #20]
 80046f2:	f8c3 2238 	str.w	r2, [r3, #568]	; 0x238
  hmsc->csw.bStatus = USBD_CSW_CMD_PASSED;
 80046f6:	697b      	ldr	r3, [r7, #20]
 80046f8:	2200      	movs	r2, #0
 80046fa:	f883 223c 	strb.w	r2, [r3, #572]	; 0x23c
  hmsc->bot_state = USBD_BOT_SEND_DATA;
 80046fe:	697b      	ldr	r3, [r7, #20]
 8004700:	2204      	movs	r2, #4
 8004702:	721a      	strb	r2, [r3, #8]

  (void)USBD_LL_Transmit(pdev, MSC_EPIN_ADDR, pbuf, length);
 8004704:	693b      	ldr	r3, [r7, #16]
 8004706:	68ba      	ldr	r2, [r7, #8]
 8004708:	2181      	movs	r1, #129	; 0x81
 800470a:	68f8      	ldr	r0, [r7, #12]
 800470c:	f002 fff2 	bl	80076f4 <USBD_LL_Transmit>
 8004710:	e000      	b.n	8004714 <MSC_BOT_SendData+0x58>
    return;
 8004712:	bf00      	nop
}
 8004714:	3718      	adds	r7, #24
 8004716:	46bd      	mov	sp, r7
 8004718:	bd80      	pop	{r7, pc}
	...

0800471c <MSC_BOT_SendCSW>:
  * @param  pdev: device instance
  * @param  status : CSW status
  * @retval None
  */
void  MSC_BOT_SendCSW(USBD_HandleTypeDef *pdev, uint8_t CSW_Status)
{
 800471c:	b580      	push	{r7, lr}
 800471e:	b084      	sub	sp, #16
 8004720:	af00      	add	r7, sp, #0
 8004722:	6078      	str	r0, [r7, #4]
 8004724:	460b      	mov	r3, r1
 8004726:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800472e:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	2b00      	cmp	r3, #0
 8004734:	d01b      	beq.n	800476e <MSC_BOT_SendCSW+0x52>
  {
    return;
  }

  hmsc->csw.dSignature = USBD_BOT_CSW_SIGNATURE;
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	4a0f      	ldr	r2, [pc, #60]	; (8004778 <MSC_BOT_SendCSW+0x5c>)
 800473a:	f8c3 2230 	str.w	r2, [r3, #560]	; 0x230
  hmsc->csw.bStatus = CSW_Status;
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	78fa      	ldrb	r2, [r7, #3]
 8004742:	f883 223c 	strb.w	r2, [r3, #572]	; 0x23c
  hmsc->bot_state = USBD_BOT_IDLE;
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	2200      	movs	r2, #0
 800474a:	721a      	strb	r2, [r3, #8]

  (void)USBD_LL_Transmit(pdev, MSC_EPIN_ADDR, (uint8_t *)&hmsc->csw,
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	f503 720c 	add.w	r2, r3, #560	; 0x230
 8004752:	230d      	movs	r3, #13
 8004754:	2181      	movs	r1, #129	; 0x81
 8004756:	6878      	ldr	r0, [r7, #4]
 8004758:	f002 ffcc 	bl	80076f4 <USBD_LL_Transmit>
                         USBD_BOT_CSW_LENGTH);

  /* Prepare EP to Receive next Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, (uint8_t *)&hmsc->cbw,
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	f503 7204 	add.w	r2, r3, #528	; 0x210
 8004762:	231f      	movs	r3, #31
 8004764:	2101      	movs	r1, #1
 8004766:	6878      	ldr	r0, [r7, #4]
 8004768:	f002 ffe5 	bl	8007736 <USBD_LL_PrepareReceive>
 800476c:	e000      	b.n	8004770 <MSC_BOT_SendCSW+0x54>
    return;
 800476e:	bf00      	nop
                               USBD_BOT_CBW_LENGTH);
}
 8004770:	3710      	adds	r7, #16
 8004772:	46bd      	mov	sp, r7
 8004774:	bd80      	pop	{r7, pc}
 8004776:	bf00      	nop
 8004778:	53425355 	.word	0x53425355

0800477c <MSC_BOT_Abort>:
  * @param  pdev: device instance
  * @retval status
  */

static void  MSC_BOT_Abort(USBD_HandleTypeDef *pdev)
{
 800477c:	b580      	push	{r7, lr}
 800477e:	b084      	sub	sp, #16
 8004780:	af00      	add	r7, sp, #0
 8004782:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800478a:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	2b00      	cmp	r3, #0
 8004790:	d022      	beq.n	80047d8 <MSC_BOT_Abort+0x5c>
  {
    return;
  }

  if ((hmsc->cbw.bmFlags == 0U) &&
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 8004798:	2b00      	cmp	r3, #0
 800479a:	d10c      	bne.n	80047b6 <MSC_BOT_Abort+0x3a>
      (hmsc->cbw.dDataLength != 0U) &&
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
  if ((hmsc->cbw.bmFlags == 0U) &&
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d007      	beq.n	80047b6 <MSC_BOT_Abort+0x3a>
      (hmsc->bot_status == USBD_BOT_STATUS_NORMAL))
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	7a5b      	ldrb	r3, [r3, #9]
      (hmsc->cbw.dDataLength != 0U) &&
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d103      	bne.n	80047b6 <MSC_BOT_Abort+0x3a>
  {
    (void)USBD_LL_StallEP(pdev, MSC_EPOUT_ADDR);
 80047ae:	2101      	movs	r1, #1
 80047b0:	6878      	ldr	r0, [r7, #4]
 80047b2:	f002 ff16 	bl	80075e2 <USBD_LL_StallEP>
  }

  (void)USBD_LL_StallEP(pdev, MSC_EPIN_ADDR);
 80047b6:	2181      	movs	r1, #129	; 0x81
 80047b8:	6878      	ldr	r0, [r7, #4]
 80047ba:	f002 ff12 	bl	80075e2 <USBD_LL_StallEP>

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR)
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	7a5b      	ldrb	r3, [r3, #9]
 80047c2:	2b02      	cmp	r3, #2
 80047c4:	d109      	bne.n	80047da <MSC_BOT_Abort+0x5e>
  {
    (void)USBD_LL_StallEP(pdev, MSC_EPIN_ADDR);
 80047c6:	2181      	movs	r1, #129	; 0x81
 80047c8:	6878      	ldr	r0, [r7, #4]
 80047ca:	f002 ff0a 	bl	80075e2 <USBD_LL_StallEP>
    (void)USBD_LL_StallEP(pdev, MSC_EPOUT_ADDR);
 80047ce:	2101      	movs	r1, #1
 80047d0:	6878      	ldr	r0, [r7, #4]
 80047d2:	f002 ff06 	bl	80075e2 <USBD_LL_StallEP>
 80047d6:	e000      	b.n	80047da <MSC_BOT_Abort+0x5e>
    return;
 80047d8:	bf00      	nop
  }
}
 80047da:	3710      	adds	r7, #16
 80047dc:	46bd      	mov	sp, r7
 80047de:	bd80      	pop	{r7, pc}

080047e0 <MSC_BOT_CplClrFeature>:
  * @param  epnum: endpoint index
  * @retval None
  */

void  MSC_BOT_CplClrFeature(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80047e0:	b580      	push	{r7, lr}
 80047e2:	b084      	sub	sp, #16
 80047e4:	af00      	add	r7, sp, #0
 80047e6:	6078      	str	r0, [r7, #4]
 80047e8:	460b      	mov	r3, r1
 80047ea:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80047f2:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d019      	beq.n	800482e <MSC_BOT_CplClrFeature+0x4e>
  {
    return;
  }

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR) /* Bad CBW Signature */
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	7a5b      	ldrb	r3, [r3, #9]
 80047fe:	2b02      	cmp	r3, #2
 8004800:	d108      	bne.n	8004814 <MSC_BOT_CplClrFeature+0x34>
  {
    (void)USBD_LL_StallEP(pdev, MSC_EPIN_ADDR);
 8004802:	2181      	movs	r1, #129	; 0x81
 8004804:	6878      	ldr	r0, [r7, #4]
 8004806:	f002 feec 	bl	80075e2 <USBD_LL_StallEP>
    (void)USBD_LL_StallEP(pdev, MSC_EPOUT_ADDR);
 800480a:	2101      	movs	r1, #1
 800480c:	6878      	ldr	r0, [r7, #4]
 800480e:	f002 fee8 	bl	80075e2 <USBD_LL_StallEP>
 8004812:	e00f      	b.n	8004834 <MSC_BOT_CplClrFeature+0x54>
  }
  else if (((epnum & 0x80U) == 0x80U) && (hmsc->bot_status != USBD_BOT_STATUS_RECOVERY))
 8004814:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004818:	2b00      	cmp	r3, #0
 800481a:	da0a      	bge.n	8004832 <MSC_BOT_CplClrFeature+0x52>
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	7a5b      	ldrb	r3, [r3, #9]
 8004820:	2b01      	cmp	r3, #1
 8004822:	d006      	beq.n	8004832 <MSC_BOT_CplClrFeature+0x52>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 8004824:	2101      	movs	r1, #1
 8004826:	6878      	ldr	r0, [r7, #4]
 8004828:	f7ff ff78 	bl	800471c <MSC_BOT_SendCSW>
 800482c:	e002      	b.n	8004834 <MSC_BOT_CplClrFeature+0x54>
    return;
 800482e:	bf00      	nop
 8004830:	e000      	b.n	8004834 <MSC_BOT_CplClrFeature+0x54>
  }
  else
  {
    return;
 8004832:	bf00      	nop
  }
}
 8004834:	3710      	adds	r7, #16
 8004836:	46bd      	mov	sp, r7
 8004838:	bd80      	pop	{r7, pc}
	...

0800483c <SCSI_ProcessCmd>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
int8_t SCSI_ProcessCmd(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *cmd)
{
 800483c:	b580      	push	{r7, lr}
 800483e:	b086      	sub	sp, #24
 8004840:	af00      	add	r7, sp, #0
 8004842:	60f8      	str	r0, [r7, #12]
 8004844:	460b      	mov	r3, r1
 8004846:	607a      	str	r2, [r7, #4]
 8004848:	72fb      	strb	r3, [r7, #11]
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004850:	613b      	str	r3, [r7, #16]

  if (hmsc == NULL)
 8004852:	693b      	ldr	r3, [r7, #16]
 8004854:	2b00      	cmp	r3, #0
 8004856:	d102      	bne.n	800485e <SCSI_ProcessCmd+0x22>
  {
    return -1;
 8004858:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800485c:	e168      	b.n	8004b30 <SCSI_ProcessCmd+0x2f4>
  }

  switch (cmd[0])
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	781b      	ldrb	r3, [r3, #0]
 8004862:	2baa      	cmp	r3, #170	; 0xaa
 8004864:	f000 8144 	beq.w	8004af0 <SCSI_ProcessCmd+0x2b4>
 8004868:	2baa      	cmp	r3, #170	; 0xaa
 800486a:	f300 8153 	bgt.w	8004b14 <SCSI_ProcessCmd+0x2d8>
 800486e:	2ba8      	cmp	r3, #168	; 0xa8
 8004870:	f000 812c 	beq.w	8004acc <SCSI_ProcessCmd+0x290>
 8004874:	2ba8      	cmp	r3, #168	; 0xa8
 8004876:	f300 814d 	bgt.w	8004b14 <SCSI_ProcessCmd+0x2d8>
 800487a:	2b5a      	cmp	r3, #90	; 0x5a
 800487c:	f300 80c0 	bgt.w	8004a00 <SCSI_ProcessCmd+0x1c4>
 8004880:	2b00      	cmp	r3, #0
 8004882:	f2c0 8147 	blt.w	8004b14 <SCSI_ProcessCmd+0x2d8>
 8004886:	2b5a      	cmp	r3, #90	; 0x5a
 8004888:	f200 8144 	bhi.w	8004b14 <SCSI_ProcessCmd+0x2d8>
 800488c:	a201      	add	r2, pc, #4	; (adr r2, 8004894 <SCSI_ProcessCmd+0x58>)
 800488e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004892:	bf00      	nop
 8004894:	08004a07 	.word	0x08004a07
 8004898:	08004b15 	.word	0x08004b15
 800489c:	08004b15 	.word	0x08004b15
 80048a0:	08004a19 	.word	0x08004a19
 80048a4:	08004b15 	.word	0x08004b15
 80048a8:	08004b15 	.word	0x08004b15
 80048ac:	08004b15 	.word	0x08004b15
 80048b0:	08004b15 	.word	0x08004b15
 80048b4:	08004b15 	.word	0x08004b15
 80048b8:	08004b15 	.word	0x08004b15
 80048bc:	08004b15 	.word	0x08004b15
 80048c0:	08004b15 	.word	0x08004b15
 80048c4:	08004b15 	.word	0x08004b15
 80048c8:	08004b15 	.word	0x08004b15
 80048cc:	08004b15 	.word	0x08004b15
 80048d0:	08004b15 	.word	0x08004b15
 80048d4:	08004b15 	.word	0x08004b15
 80048d8:	08004b15 	.word	0x08004b15
 80048dc:	08004a2b 	.word	0x08004a2b
 80048e0:	08004b15 	.word	0x08004b15
 80048e4:	08004b15 	.word	0x08004b15
 80048e8:	08004b15 	.word	0x08004b15
 80048ec:	08004b15 	.word	0x08004b15
 80048f0:	08004b15 	.word	0x08004b15
 80048f4:	08004b15 	.word	0x08004b15
 80048f8:	08004b15 	.word	0x08004b15
 80048fc:	08004a61 	.word	0x08004a61
 8004900:	08004a3d 	.word	0x08004a3d
 8004904:	08004b15 	.word	0x08004b15
 8004908:	08004b15 	.word	0x08004b15
 800490c:	08004a4f 	.word	0x08004a4f
 8004910:	08004b15 	.word	0x08004b15
 8004914:	08004b15 	.word	0x08004b15
 8004918:	08004b15 	.word	0x08004b15
 800491c:	08004b15 	.word	0x08004b15
 8004920:	08004a85 	.word	0x08004a85
 8004924:	08004b15 	.word	0x08004b15
 8004928:	08004a97 	.word	0x08004a97
 800492c:	08004b15 	.word	0x08004b15
 8004930:	08004b15 	.word	0x08004b15
 8004934:	08004abb 	.word	0x08004abb
 8004938:	08004b15 	.word	0x08004b15
 800493c:	08004adf 	.word	0x08004adf
 8004940:	08004b15 	.word	0x08004b15
 8004944:	08004b15 	.word	0x08004b15
 8004948:	08004b15 	.word	0x08004b15
 800494c:	08004b15 	.word	0x08004b15
 8004950:	08004b03 	.word	0x08004b03
 8004954:	08004b15 	.word	0x08004b15
 8004958:	08004b15 	.word	0x08004b15
 800495c:	08004b15 	.word	0x08004b15
 8004960:	08004b15 	.word	0x08004b15
 8004964:	08004b15 	.word	0x08004b15
 8004968:	08004b15 	.word	0x08004b15
 800496c:	08004b15 	.word	0x08004b15
 8004970:	08004b15 	.word	0x08004b15
 8004974:	08004b15 	.word	0x08004b15
 8004978:	08004b15 	.word	0x08004b15
 800497c:	08004b15 	.word	0x08004b15
 8004980:	08004b15 	.word	0x08004b15
 8004984:	08004b15 	.word	0x08004b15
 8004988:	08004b15 	.word	0x08004b15
 800498c:	08004b15 	.word	0x08004b15
 8004990:	08004b15 	.word	0x08004b15
 8004994:	08004b15 	.word	0x08004b15
 8004998:	08004b15 	.word	0x08004b15
 800499c:	08004b15 	.word	0x08004b15
 80049a0:	08004b15 	.word	0x08004b15
 80049a4:	08004b15 	.word	0x08004b15
 80049a8:	08004b15 	.word	0x08004b15
 80049ac:	08004b15 	.word	0x08004b15
 80049b0:	08004b15 	.word	0x08004b15
 80049b4:	08004b15 	.word	0x08004b15
 80049b8:	08004b15 	.word	0x08004b15
 80049bc:	08004b15 	.word	0x08004b15
 80049c0:	08004b15 	.word	0x08004b15
 80049c4:	08004b15 	.word	0x08004b15
 80049c8:	08004b15 	.word	0x08004b15
 80049cc:	08004b15 	.word	0x08004b15
 80049d0:	08004b15 	.word	0x08004b15
 80049d4:	08004b15 	.word	0x08004b15
 80049d8:	08004b15 	.word	0x08004b15
 80049dc:	08004b15 	.word	0x08004b15
 80049e0:	08004b15 	.word	0x08004b15
 80049e4:	08004b15 	.word	0x08004b15
 80049e8:	08004b15 	.word	0x08004b15
 80049ec:	08004b15 	.word	0x08004b15
 80049f0:	08004b15 	.word	0x08004b15
 80049f4:	08004b15 	.word	0x08004b15
 80049f8:	08004b15 	.word	0x08004b15
 80049fc:	08004a73 	.word	0x08004a73
 8004a00:	2b9e      	cmp	r3, #158	; 0x9e
 8004a02:	d051      	beq.n	8004aa8 <SCSI_ProcessCmd+0x26c>
 8004a04:	e086      	b.n	8004b14 <SCSI_ProcessCmd+0x2d8>
  {
    case SCSI_TEST_UNIT_READY:
      ret = SCSI_TestUnitReady(pdev, lun, cmd);
 8004a06:	7afb      	ldrb	r3, [r7, #11]
 8004a08:	687a      	ldr	r2, [r7, #4]
 8004a0a:	4619      	mov	r1, r3
 8004a0c:	68f8      	ldr	r0, [r7, #12]
 8004a0e:	f000 f893 	bl	8004b38 <SCSI_TestUnitReady>
 8004a12:	4603      	mov	r3, r0
 8004a14:	75fb      	strb	r3, [r7, #23]
      break;
 8004a16:	e089      	b.n	8004b2c <SCSI_ProcessCmd+0x2f0>

    case SCSI_REQUEST_SENSE:
      ret = SCSI_RequestSense(pdev, lun, cmd);
 8004a18:	7afb      	ldrb	r3, [r7, #11]
 8004a1a:	687a      	ldr	r2, [r7, #4]
 8004a1c:	4619      	mov	r1, r3
 8004a1e:	68f8      	ldr	r0, [r7, #12]
 8004a20:	f000 fb38 	bl	8005094 <SCSI_RequestSense>
 8004a24:	4603      	mov	r3, r0
 8004a26:	75fb      	strb	r3, [r7, #23]
      break;
 8004a28:	e080      	b.n	8004b2c <SCSI_ProcessCmd+0x2f0>

    case SCSI_INQUIRY:
      ret = SCSI_Inquiry(pdev, lun, cmd);
 8004a2a:	7afb      	ldrb	r3, [r7, #11]
 8004a2c:	687a      	ldr	r2, [r7, #4]
 8004a2e:	4619      	mov	r1, r3
 8004a30:	68f8      	ldr	r0, [r7, #12]
 8004a32:	f000 f8d1 	bl	8004bd8 <SCSI_Inquiry>
 8004a36:	4603      	mov	r3, r0
 8004a38:	75fb      	strb	r3, [r7, #23]
      break;
 8004a3a:	e077      	b.n	8004b2c <SCSI_ProcessCmd+0x2f0>

    case SCSI_START_STOP_UNIT:
      ret = SCSI_StartStopUnit(pdev, lun, cmd);
 8004a3c:	7afb      	ldrb	r3, [r7, #11]
 8004a3e:	687a      	ldr	r2, [r7, #4]
 8004a40:	4619      	mov	r1, r3
 8004a42:	68f8      	ldr	r0, [r7, #12]
 8004a44:	f000 fbec 	bl	8005220 <SCSI_StartStopUnit>
 8004a48:	4603      	mov	r3, r0
 8004a4a:	75fb      	strb	r3, [r7, #23]
      break;
 8004a4c:	e06e      	b.n	8004b2c <SCSI_ProcessCmd+0x2f0>

    case SCSI_ALLOW_MEDIUM_REMOVAL:
      ret = SCSI_AllowPreventRemovable(pdev, lun, cmd);
 8004a4e:	7afb      	ldrb	r3, [r7, #11]
 8004a50:	687a      	ldr	r2, [r7, #4]
 8004a52:	4619      	mov	r1, r3
 8004a54:	68f8      	ldr	r0, [r7, #12]
 8004a56:	f000 fc34 	bl	80052c2 <SCSI_AllowPreventRemovable>
 8004a5a:	4603      	mov	r3, r0
 8004a5c:	75fb      	strb	r3, [r7, #23]
      break;
 8004a5e:	e065      	b.n	8004b2c <SCSI_ProcessCmd+0x2f0>

    case SCSI_MODE_SENSE6:
      ret = SCSI_ModeSense6(pdev, lun, cmd);
 8004a60:	7afb      	ldrb	r3, [r7, #11]
 8004a62:	687a      	ldr	r2, [r7, #4]
 8004a64:	4619      	mov	r1, r3
 8004a66:	68f8      	ldr	r0, [r7, #12]
 8004a68:	f000 fabc 	bl	8004fe4 <SCSI_ModeSense6>
 8004a6c:	4603      	mov	r3, r0
 8004a6e:	75fb      	strb	r3, [r7, #23]
      break;
 8004a70:	e05c      	b.n	8004b2c <SCSI_ProcessCmd+0x2f0>

    case SCSI_MODE_SENSE10:
      ret = SCSI_ModeSense10(pdev, lun, cmd);
 8004a72:	7afb      	ldrb	r3, [r7, #11]
 8004a74:	687a      	ldr	r2, [r7, #4]
 8004a76:	4619      	mov	r1, r3
 8004a78:	68f8      	ldr	r0, [r7, #12]
 8004a7a:	f000 fadf 	bl	800503c <SCSI_ModeSense10>
 8004a7e:	4603      	mov	r3, r0
 8004a80:	75fb      	strb	r3, [r7, #23]
      break;
 8004a82:	e053      	b.n	8004b2c <SCSI_ProcessCmd+0x2f0>

    case SCSI_READ_FORMAT_CAPACITIES:
      ret = SCSI_ReadFormatCapacity(pdev, lun, cmd);
 8004a84:	7afb      	ldrb	r3, [r7, #11]
 8004a86:	687a      	ldr	r2, [r7, #4]
 8004a88:	4619      	mov	r1, r3
 8004a8a:	68f8      	ldr	r0, [r7, #12]
 8004a8c:	f000 fa37 	bl	8004efe <SCSI_ReadFormatCapacity>
 8004a90:	4603      	mov	r3, r0
 8004a92:	75fb      	strb	r3, [r7, #23]
      break;
 8004a94:	e04a      	b.n	8004b2c <SCSI_ProcessCmd+0x2f0>

    case SCSI_READ_CAPACITY10:
      ret = SCSI_ReadCapacity10(pdev, lun, cmd);
 8004a96:	7afb      	ldrb	r3, [r7, #11]
 8004a98:	687a      	ldr	r2, [r7, #4]
 8004a9a:	4619      	mov	r1, r3
 8004a9c:	68f8      	ldr	r0, [r7, #12]
 8004a9e:	f000 f90f 	bl	8004cc0 <SCSI_ReadCapacity10>
 8004aa2:	4603      	mov	r3, r0
 8004aa4:	75fb      	strb	r3, [r7, #23]
      break;
 8004aa6:	e041      	b.n	8004b2c <SCSI_ProcessCmd+0x2f0>

    case SCSI_READ_CAPACITY16:
      ret = SCSI_ReadCapacity16(pdev, lun, cmd);
 8004aa8:	7afb      	ldrb	r3, [r7, #11]
 8004aaa:	687a      	ldr	r2, [r7, #4]
 8004aac:	4619      	mov	r1, r3
 8004aae:	68f8      	ldr	r0, [r7, #12]
 8004ab0:	f000 f97b 	bl	8004daa <SCSI_ReadCapacity16>
 8004ab4:	4603      	mov	r3, r0
 8004ab6:	75fb      	strb	r3, [r7, #23]
      break;
 8004ab8:	e038      	b.n	8004b2c <SCSI_ProcessCmd+0x2f0>

    case SCSI_READ10:
      ret = SCSI_Read10(pdev, lun, cmd);
 8004aba:	7afb      	ldrb	r3, [r7, #11]
 8004abc:	687a      	ldr	r2, [r7, #4]
 8004abe:	4619      	mov	r1, r3
 8004ac0:	68f8      	ldr	r0, [r7, #12]
 8004ac2:	f000 fc27 	bl	8005314 <SCSI_Read10>
 8004ac6:	4603      	mov	r3, r0
 8004ac8:	75fb      	strb	r3, [r7, #23]
      break;
 8004aca:	e02f      	b.n	8004b2c <SCSI_ProcessCmd+0x2f0>

    case SCSI_READ12:
      ret = SCSI_Read12(pdev, lun, cmd);
 8004acc:	7afb      	ldrb	r3, [r7, #11]
 8004ace:	687a      	ldr	r2, [r7, #4]
 8004ad0:	4619      	mov	r1, r3
 8004ad2:	68f8      	ldr	r0, [r7, #12]
 8004ad4:	f000 fcbe 	bl	8005454 <SCSI_Read12>
 8004ad8:	4603      	mov	r3, r0
 8004ada:	75fb      	strb	r3, [r7, #23]
      break;
 8004adc:	e026      	b.n	8004b2c <SCSI_ProcessCmd+0x2f0>

    case SCSI_WRITE10:
      ret = SCSI_Write10(pdev, lun, cmd);
 8004ade:	7afb      	ldrb	r3, [r7, #11]
 8004ae0:	687a      	ldr	r2, [r7, #4]
 8004ae2:	4619      	mov	r1, r3
 8004ae4:	68f8      	ldr	r0, [r7, #12]
 8004ae6:	f000 fd60 	bl	80055aa <SCSI_Write10>
 8004aea:	4603      	mov	r3, r0
 8004aec:	75fb      	strb	r3, [r7, #23]
      break;
 8004aee:	e01d      	b.n	8004b2c <SCSI_ProcessCmd+0x2f0>

    case SCSI_WRITE12:
      ret = SCSI_Write12(pdev, lun, cmd);
 8004af0:	7afb      	ldrb	r3, [r7, #11]
 8004af2:	687a      	ldr	r2, [r7, #4]
 8004af4:	4619      	mov	r1, r3
 8004af6:	68f8      	ldr	r0, [r7, #12]
 8004af8:	f000 fe1c 	bl	8005734 <SCSI_Write12>
 8004afc:	4603      	mov	r3, r0
 8004afe:	75fb      	strb	r3, [r7, #23]
      break;
 8004b00:	e014      	b.n	8004b2c <SCSI_ProcessCmd+0x2f0>

    case SCSI_VERIFY10:
      ret = SCSI_Verify10(pdev, lun, cmd);
 8004b02:	7afb      	ldrb	r3, [r7, #11]
 8004b04:	687a      	ldr	r2, [r7, #4]
 8004b06:	4619      	mov	r1, r3
 8004b08:	68f8      	ldr	r0, [r7, #12]
 8004b0a:	f000 fee8 	bl	80058de <SCSI_Verify10>
 8004b0e:	4603      	mov	r3, r0
 8004b10:	75fb      	strb	r3, [r7, #23]
      break;
 8004b12:	e00b      	b.n	8004b2c <SCSI_ProcessCmd+0x2f0>

    default:
      SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_CDB);
 8004b14:	7af9      	ldrb	r1, [r7, #11]
 8004b16:	2320      	movs	r3, #32
 8004b18:	2205      	movs	r2, #5
 8004b1a:	68f8      	ldr	r0, [r7, #12]
 8004b1c:	f000 fb39 	bl	8005192 <SCSI_SenseCode>
      hmsc->bot_status = USBD_BOT_STATUS_ERROR;
 8004b20:	693b      	ldr	r3, [r7, #16]
 8004b22:	2202      	movs	r2, #2
 8004b24:	725a      	strb	r2, [r3, #9]
      ret = -1;
 8004b26:	23ff      	movs	r3, #255	; 0xff
 8004b28:	75fb      	strb	r3, [r7, #23]
      break;
 8004b2a:	bf00      	nop
  }

  return ret;
 8004b2c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8004b30:	4618      	mov	r0, r3
 8004b32:	3718      	adds	r7, #24
 8004b34:	46bd      	mov	sp, r7
 8004b36:	bd80      	pop	{r7, pc}

08004b38 <SCSI_TestUnitReady>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_TestUnitReady(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8004b38:	b580      	push	{r7, lr}
 8004b3a:	b086      	sub	sp, #24
 8004b3c:	af00      	add	r7, sp, #0
 8004b3e:	60f8      	str	r0, [r7, #12]
 8004b40:	460b      	mov	r3, r1
 8004b42:	607a      	str	r2, [r7, #4]
 8004b44:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004b4c:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 8004b4e:	697b      	ldr	r3, [r7, #20]
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d102      	bne.n	8004b5a <SCSI_TestUnitReady+0x22>
  {
    return -1;
 8004b54:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004b58:	e03a      	b.n	8004bd0 <SCSI_TestUnitReady+0x98>
  }

  /* case 9 : Hi > D0 */
  if (hmsc->cbw.dDataLength != 0U)
 8004b5a:	697b      	ldr	r3, [r7, #20]
 8004b5c:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d00a      	beq.n	8004b7a <SCSI_TestUnitReady+0x42>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8004b64:	697b      	ldr	r3, [r7, #20]
 8004b66:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8004b6a:	2320      	movs	r3, #32
 8004b6c:	2205      	movs	r2, #5
 8004b6e:	68f8      	ldr	r0, [r7, #12]
 8004b70:	f000 fb0f 	bl	8005192 <SCSI_SenseCode>

    return -1;
 8004b74:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004b78:	e02a      	b.n	8004bd0 <SCSI_TestUnitReady+0x98>
  }

  if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 8004b7a:	697b      	ldr	r3, [r7, #20]
 8004b7c:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 8004b80:	2b02      	cmp	r3, #2
 8004b82:	d10b      	bne.n	8004b9c <SCSI_TestUnitReady+0x64>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8004b84:	7af9      	ldrb	r1, [r7, #11]
 8004b86:	233a      	movs	r3, #58	; 0x3a
 8004b88:	2202      	movs	r2, #2
 8004b8a:	68f8      	ldr	r0, [r7, #12]
 8004b8c:	f000 fb01 	bl	8005192 <SCSI_SenseCode>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 8004b90:	697b      	ldr	r3, [r7, #20]
 8004b92:	2205      	movs	r2, #5
 8004b94:	721a      	strb	r2, [r3, #8]
    return -1;
 8004b96:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004b9a:	e019      	b.n	8004bd0 <SCSI_TestUnitReady+0x98>
  }

  if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8004ba2:	689b      	ldr	r3, [r3, #8]
 8004ba4:	7afa      	ldrb	r2, [r7, #11]
 8004ba6:	4610      	mov	r0, r2
 8004ba8:	4798      	blx	r3
 8004baa:	4603      	mov	r3, r0
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d00b      	beq.n	8004bc8 <SCSI_TestUnitReady+0x90>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8004bb0:	7af9      	ldrb	r1, [r7, #11]
 8004bb2:	233a      	movs	r3, #58	; 0x3a
 8004bb4:	2202      	movs	r2, #2
 8004bb6:	68f8      	ldr	r0, [r7, #12]
 8004bb8:	f000 faeb 	bl	8005192 <SCSI_SenseCode>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 8004bbc:	697b      	ldr	r3, [r7, #20]
 8004bbe:	2205      	movs	r2, #5
 8004bc0:	721a      	strb	r2, [r3, #8]

    return -1;
 8004bc2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004bc6:	e003      	b.n	8004bd0 <SCSI_TestUnitReady+0x98>
  }
  hmsc->bot_data_length = 0U;
 8004bc8:	697b      	ldr	r3, [r7, #20]
 8004bca:	2200      	movs	r2, #0
 8004bcc:	60da      	str	r2, [r3, #12]

  return 0;
 8004bce:	2300      	movs	r3, #0
}
 8004bd0:	4618      	mov	r0, r3
 8004bd2:	3718      	adds	r7, #24
 8004bd4:	46bd      	mov	sp, r7
 8004bd6:	bd80      	pop	{r7, pc}

08004bd8 <SCSI_Inquiry>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Inquiry(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8004bd8:	b580      	push	{r7, lr}
 8004bda:	b088      	sub	sp, #32
 8004bdc:	af00      	add	r7, sp, #0
 8004bde:	60f8      	str	r0, [r7, #12]
 8004be0:	460b      	mov	r3, r1
 8004be2:	607a      	str	r2, [r7, #4]
 8004be4:	72fb      	strb	r3, [r7, #11]
  uint8_t *pPage;
  uint16_t len;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004bec:	61bb      	str	r3, [r7, #24]

  if (hmsc == NULL)
 8004bee:	69bb      	ldr	r3, [r7, #24]
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d102      	bne.n	8004bfa <SCSI_Inquiry+0x22>
  {
    return -1;
 8004bf4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004bf8:	e05a      	b.n	8004cb0 <SCSI_Inquiry+0xd8>
  }

  if (hmsc->cbw.dDataLength == 0U)
 8004bfa:	69bb      	ldr	r3, [r7, #24]
 8004bfc:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d10a      	bne.n	8004c1a <SCSI_Inquiry+0x42>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8004c04:	69bb      	ldr	r3, [r7, #24]
 8004c06:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8004c0a:	2320      	movs	r3, #32
 8004c0c:	2205      	movs	r2, #5
 8004c0e:	68f8      	ldr	r0, [r7, #12]
 8004c10:	f000 fabf 	bl	8005192 <SCSI_SenseCode>
    return -1;
 8004c14:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004c18:	e04a      	b.n	8004cb0 <SCSI_Inquiry+0xd8>
  }

  if ((params[1] & 0x01U) != 0U) /* Evpd is set */
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	3301      	adds	r3, #1
 8004c1e:	781b      	ldrb	r3, [r3, #0]
 8004c20:	f003 0301 	and.w	r3, r3, #1
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d020      	beq.n	8004c6a <SCSI_Inquiry+0x92>
  {
    if (params[2] == 0U) /* Request for Supported Vital Product Data Pages*/
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	3302      	adds	r3, #2
 8004c2c:	781b      	ldrb	r3, [r3, #0]
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d105      	bne.n	8004c3e <SCSI_Inquiry+0x66>
    {
      (void)SCSI_UpdateBotData(hmsc, MSC_Page00_Inquiry_Data, LENGTH_INQUIRY_PAGE00);
 8004c32:	2206      	movs	r2, #6
 8004c34:	4920      	ldr	r1, [pc, #128]	; (8004cb8 <SCSI_Inquiry+0xe0>)
 8004c36:	69b8      	ldr	r0, [r7, #24]
 8004c38:	f000 ffb4 	bl	8005ba4 <SCSI_UpdateBotData>
 8004c3c:	e037      	b.n	8004cae <SCSI_Inquiry+0xd6>
    }
    else if (params[2] == 0x80U) /* Request for VPD page 0x80 Unit Serial Number */
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	3302      	adds	r3, #2
 8004c42:	781b      	ldrb	r3, [r3, #0]
 8004c44:	2b80      	cmp	r3, #128	; 0x80
 8004c46:	d105      	bne.n	8004c54 <SCSI_Inquiry+0x7c>
    {
      (void)SCSI_UpdateBotData(hmsc, MSC_Page80_Inquiry_Data, LENGTH_INQUIRY_PAGE80);
 8004c48:	2208      	movs	r2, #8
 8004c4a:	491c      	ldr	r1, [pc, #112]	; (8004cbc <SCSI_Inquiry+0xe4>)
 8004c4c:	69b8      	ldr	r0, [r7, #24]
 8004c4e:	f000 ffa9 	bl	8005ba4 <SCSI_UpdateBotData>
 8004c52:	e02c      	b.n	8004cae <SCSI_Inquiry+0xd6>
    }
    else /* Request Not supported */
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST,
 8004c54:	69bb      	ldr	r3, [r7, #24]
 8004c56:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8004c5a:	2324      	movs	r3, #36	; 0x24
 8004c5c:	2205      	movs	r2, #5
 8004c5e:	68f8      	ldr	r0, [r7, #12]
 8004c60:	f000 fa97 	bl	8005192 <SCSI_SenseCode>
                     INVALID_FIELED_IN_COMMAND);

      return -1;
 8004c64:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004c68:	e022      	b.n	8004cb0 <SCSI_Inquiry+0xd8>
    }
  }
  else
  {
    pPage = (uint8_t *) &((USBD_StorageTypeDef *)pdev->pUserData)->pInquiry[lun * STANDARD_INQUIRY_DATA_LEN];
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8004c70:	69d9      	ldr	r1, [r3, #28]
 8004c72:	7afa      	ldrb	r2, [r7, #11]
 8004c74:	4613      	mov	r3, r2
 8004c76:	00db      	lsls	r3, r3, #3
 8004c78:	4413      	add	r3, r2
 8004c7a:	009b      	lsls	r3, r3, #2
 8004c7c:	440b      	add	r3, r1
 8004c7e:	617b      	str	r3, [r7, #20]
    len = (uint16_t)pPage[4] + 5U;
 8004c80:	697b      	ldr	r3, [r7, #20]
 8004c82:	3304      	adds	r3, #4
 8004c84:	781b      	ldrb	r3, [r3, #0]
 8004c86:	b29b      	uxth	r3, r3
 8004c88:	3305      	adds	r3, #5
 8004c8a:	83fb      	strh	r3, [r7, #30]

    if (params[4] <= len)
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	3304      	adds	r3, #4
 8004c90:	781b      	ldrb	r3, [r3, #0]
 8004c92:	b29b      	uxth	r3, r3
 8004c94:	8bfa      	ldrh	r2, [r7, #30]
 8004c96:	429a      	cmp	r2, r3
 8004c98:	d303      	bcc.n	8004ca2 <SCSI_Inquiry+0xca>
    {
      len = params[4];
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	3304      	adds	r3, #4
 8004c9e:	781b      	ldrb	r3, [r3, #0]
 8004ca0:	83fb      	strh	r3, [r7, #30]
    }

    (void)SCSI_UpdateBotData(hmsc, pPage, len);
 8004ca2:	8bfb      	ldrh	r3, [r7, #30]
 8004ca4:	461a      	mov	r2, r3
 8004ca6:	6979      	ldr	r1, [r7, #20]
 8004ca8:	69b8      	ldr	r0, [r7, #24]
 8004caa:	f000 ff7b 	bl	8005ba4 <SCSI_UpdateBotData>
  }

  return 0;
 8004cae:	2300      	movs	r3, #0
}
 8004cb0:	4618      	mov	r0, r3
 8004cb2:	3720      	adds	r7, #32
 8004cb4:	46bd      	mov	sp, r7
 8004cb6:	bd80      	pop	{r7, pc}
 8004cb8:	200000b0 	.word	0x200000b0
 8004cbc:	200000b8 	.word	0x200000b8

08004cc0 <SCSI_ReadCapacity10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ReadCapacity10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8004cc0:	b580      	push	{r7, lr}
 8004cc2:	b086      	sub	sp, #24
 8004cc4:	af00      	add	r7, sp, #0
 8004cc6:	60f8      	str	r0, [r7, #12]
 8004cc8:	460b      	mov	r3, r1
 8004cca:	607a      	str	r2, [r7, #4]
 8004ccc:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004cd4:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 8004cd6:	697b      	ldr	r3, [r7, #20]
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d102      	bne.n	8004ce2 <SCSI_ReadCapacity10+0x22>
  {
    return -1;
 8004cdc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004ce0:	e05f      	b.n	8004da2 <SCSI_ReadCapacity10+0xe2>
  }

  ret = ((USBD_StorageTypeDef *)pdev->pUserData)->GetCapacity(lun, &hmsc->scsi_blk_nbr, &hmsc->scsi_blk_size);
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8004ce8:	685b      	ldr	r3, [r3, #4]
 8004cea:	697a      	ldr	r2, [r7, #20]
 8004cec:	f502 711a 	add.w	r1, r2, #616	; 0x268
 8004cf0:	697a      	ldr	r2, [r7, #20]
 8004cf2:	f502 7219 	add.w	r2, r2, #612	; 0x264
 8004cf6:	7af8      	ldrb	r0, [r7, #11]
 8004cf8:	4798      	blx	r3
 8004cfa:	4603      	mov	r3, r0
 8004cfc:	74fb      	strb	r3, [r7, #19]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 8004cfe:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d104      	bne.n	8004d10 <SCSI_ReadCapacity10+0x50>
 8004d06:	697b      	ldr	r3, [r7, #20]
 8004d08:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 8004d0c:	2b02      	cmp	r3, #2
 8004d0e:	d108      	bne.n	8004d22 <SCSI_ReadCapacity10+0x62>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8004d10:	7af9      	ldrb	r1, [r7, #11]
 8004d12:	233a      	movs	r3, #58	; 0x3a
 8004d14:	2202      	movs	r2, #2
 8004d16:	68f8      	ldr	r0, [r7, #12]
 8004d18:	f000 fa3b 	bl	8005192 <SCSI_SenseCode>
    return -1;
 8004d1c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004d20:	e03f      	b.n	8004da2 <SCSI_ReadCapacity10+0xe2>
  }

  hmsc->bot_data[0] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 24);
 8004d22:	697b      	ldr	r3, [r7, #20]
 8004d24:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8004d28:	3b01      	subs	r3, #1
 8004d2a:	0e1b      	lsrs	r3, r3, #24
 8004d2c:	b2da      	uxtb	r2, r3
 8004d2e:	697b      	ldr	r3, [r7, #20]
 8004d30:	741a      	strb	r2, [r3, #16]
  hmsc->bot_data[1] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 16);
 8004d32:	697b      	ldr	r3, [r7, #20]
 8004d34:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8004d38:	3b01      	subs	r3, #1
 8004d3a:	0c1b      	lsrs	r3, r3, #16
 8004d3c:	b2da      	uxtb	r2, r3
 8004d3e:	697b      	ldr	r3, [r7, #20]
 8004d40:	745a      	strb	r2, [r3, #17]
  hmsc->bot_data[2] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >>  8);
 8004d42:	697b      	ldr	r3, [r7, #20]
 8004d44:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8004d48:	3b01      	subs	r3, #1
 8004d4a:	0a1b      	lsrs	r3, r3, #8
 8004d4c:	b2da      	uxtb	r2, r3
 8004d4e:	697b      	ldr	r3, [r7, #20]
 8004d50:	749a      	strb	r2, [r3, #18]
  hmsc->bot_data[3] = (uint8_t)(hmsc->scsi_blk_nbr - 1U);
 8004d52:	697b      	ldr	r3, [r7, #20]
 8004d54:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8004d58:	b2db      	uxtb	r3, r3
 8004d5a:	3b01      	subs	r3, #1
 8004d5c:	b2da      	uxtb	r2, r3
 8004d5e:	697b      	ldr	r3, [r7, #20]
 8004d60:	74da      	strb	r2, [r3, #19]

  hmsc->bot_data[4] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 8004d62:	697b      	ldr	r3, [r7, #20]
 8004d64:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8004d68:	161b      	asrs	r3, r3, #24
 8004d6a:	b2da      	uxtb	r2, r3
 8004d6c:	697b      	ldr	r3, [r7, #20]
 8004d6e:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)(hmsc->scsi_blk_size >>  16);
 8004d70:	697b      	ldr	r3, [r7, #20]
 8004d72:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8004d76:	141b      	asrs	r3, r3, #16
 8004d78:	b2da      	uxtb	r2, r3
 8004d7a:	697b      	ldr	r3, [r7, #20]
 8004d7c:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 8004d7e:	697b      	ldr	r3, [r7, #20]
 8004d80:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8004d84:	0a1b      	lsrs	r3, r3, #8
 8004d86:	b29b      	uxth	r3, r3
 8004d88:	b2da      	uxtb	r2, r3
 8004d8a:	697b      	ldr	r3, [r7, #20]
 8004d8c:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(hmsc->scsi_blk_size);
 8004d8e:	697b      	ldr	r3, [r7, #20]
 8004d90:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8004d94:	b2da      	uxtb	r2, r3
 8004d96:	697b      	ldr	r3, [r7, #20]
 8004d98:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data_length = 8U;
 8004d9a:	697b      	ldr	r3, [r7, #20]
 8004d9c:	2208      	movs	r2, #8
 8004d9e:	60da      	str	r2, [r3, #12]

  return 0;
 8004da0:	2300      	movs	r3, #0

}
 8004da2:	4618      	mov	r0, r3
 8004da4:	3718      	adds	r7, #24
 8004da6:	46bd      	mov	sp, r7
 8004da8:	bd80      	pop	{r7, pc}

08004daa <SCSI_ReadCapacity16>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ReadCapacity16(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8004daa:	b580      	push	{r7, lr}
 8004dac:	b088      	sub	sp, #32
 8004dae:	af00      	add	r7, sp, #0
 8004db0:	60f8      	str	r0, [r7, #12]
 8004db2:	460b      	mov	r3, r1
 8004db4:	607a      	str	r2, [r7, #4]
 8004db6:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  uint8_t idx;
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004dbe:	61bb      	str	r3, [r7, #24]

  if (hmsc == NULL)
 8004dc0:	69bb      	ldr	r3, [r7, #24]
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d102      	bne.n	8004dcc <SCSI_ReadCapacity16+0x22>
  {
    return -1;
 8004dc6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004dca:	e094      	b.n	8004ef6 <SCSI_ReadCapacity16+0x14c>
  }

  ret = ((USBD_StorageTypeDef *)pdev->pUserData)->GetCapacity(lun, &hmsc->scsi_blk_nbr, &hmsc->scsi_blk_size);
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8004dd2:	685b      	ldr	r3, [r3, #4]
 8004dd4:	69ba      	ldr	r2, [r7, #24]
 8004dd6:	f502 711a 	add.w	r1, r2, #616	; 0x268
 8004dda:	69ba      	ldr	r2, [r7, #24]
 8004ddc:	f502 7219 	add.w	r2, r2, #612	; 0x264
 8004de0:	7af8      	ldrb	r0, [r7, #11]
 8004de2:	4798      	blx	r3
 8004de4:	4603      	mov	r3, r0
 8004de6:	75fb      	strb	r3, [r7, #23]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 8004de8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d104      	bne.n	8004dfa <SCSI_ReadCapacity16+0x50>
 8004df0:	69bb      	ldr	r3, [r7, #24]
 8004df2:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 8004df6:	2b02      	cmp	r3, #2
 8004df8:	d108      	bne.n	8004e0c <SCSI_ReadCapacity16+0x62>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8004dfa:	7af9      	ldrb	r1, [r7, #11]
 8004dfc:	233a      	movs	r3, #58	; 0x3a
 8004dfe:	2202      	movs	r2, #2
 8004e00:	68f8      	ldr	r0, [r7, #12]
 8004e02:	f000 f9c6 	bl	8005192 <SCSI_SenseCode>
    return -1;
 8004e06:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004e0a:	e074      	b.n	8004ef6 <SCSI_ReadCapacity16+0x14c>
  }

  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	330a      	adds	r3, #10
 8004e10:	781b      	ldrb	r3, [r3, #0]
 8004e12:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[11] << 16) |
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	330b      	adds	r3, #11
 8004e18:	781b      	ldrb	r3, [r3, #0]
 8004e1a:	041b      	lsls	r3, r3, #16
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8004e1c:	431a      	orrs	r2, r3
                          ((uint32_t)params[12] <<  8) |
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	330c      	adds	r3, #12
 8004e22:	781b      	ldrb	r3, [r3, #0]
 8004e24:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[11] << 16) |
 8004e26:	4313      	orrs	r3, r2
                          (uint32_t)params[13];
 8004e28:	687a      	ldr	r2, [r7, #4]
 8004e2a:	320d      	adds	r2, #13
 8004e2c:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[12] <<  8) |
 8004e2e:	431a      	orrs	r2, r3
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8004e30:	69bb      	ldr	r3, [r7, #24]
 8004e32:	60da      	str	r2, [r3, #12]

  for (idx = 0U; idx < hmsc->bot_data_length; idx++)
 8004e34:	2300      	movs	r3, #0
 8004e36:	77fb      	strb	r3, [r7, #31]
 8004e38:	e007      	b.n	8004e4a <SCSI_ReadCapacity16+0xa0>
  {
    hmsc->bot_data[idx] = 0U;
 8004e3a:	7ffb      	ldrb	r3, [r7, #31]
 8004e3c:	69ba      	ldr	r2, [r7, #24]
 8004e3e:	4413      	add	r3, r2
 8004e40:	2200      	movs	r2, #0
 8004e42:	741a      	strb	r2, [r3, #16]
  for (idx = 0U; idx < hmsc->bot_data_length; idx++)
 8004e44:	7ffb      	ldrb	r3, [r7, #31]
 8004e46:	3301      	adds	r3, #1
 8004e48:	77fb      	strb	r3, [r7, #31]
 8004e4a:	7ffa      	ldrb	r2, [r7, #31]
 8004e4c:	69bb      	ldr	r3, [r7, #24]
 8004e4e:	68db      	ldr	r3, [r3, #12]
 8004e50:	429a      	cmp	r2, r3
 8004e52:	d3f2      	bcc.n	8004e3a <SCSI_ReadCapacity16+0x90>
  }

  hmsc->bot_data[4] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 24);
 8004e54:	69bb      	ldr	r3, [r7, #24]
 8004e56:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8004e5a:	3b01      	subs	r3, #1
 8004e5c:	0e1b      	lsrs	r3, r3, #24
 8004e5e:	b2da      	uxtb	r2, r3
 8004e60:	69bb      	ldr	r3, [r7, #24]
 8004e62:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 16);
 8004e64:	69bb      	ldr	r3, [r7, #24]
 8004e66:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8004e6a:	3b01      	subs	r3, #1
 8004e6c:	0c1b      	lsrs	r3, r3, #16
 8004e6e:	b2da      	uxtb	r2, r3
 8004e70:	69bb      	ldr	r3, [r7, #24]
 8004e72:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >>  8);
 8004e74:	69bb      	ldr	r3, [r7, #24]
 8004e76:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8004e7a:	3b01      	subs	r3, #1
 8004e7c:	0a1b      	lsrs	r3, r3, #8
 8004e7e:	b2da      	uxtb	r2, r3
 8004e80:	69bb      	ldr	r3, [r7, #24]
 8004e82:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(hmsc->scsi_blk_nbr - 1U);
 8004e84:	69bb      	ldr	r3, [r7, #24]
 8004e86:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8004e8a:	b2db      	uxtb	r3, r3
 8004e8c:	3b01      	subs	r3, #1
 8004e8e:	b2da      	uxtb	r2, r3
 8004e90:	69bb      	ldr	r3, [r7, #24]
 8004e92:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data[8] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 8004e94:	69bb      	ldr	r3, [r7, #24]
 8004e96:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8004e9a:	161b      	asrs	r3, r3, #24
 8004e9c:	b2da      	uxtb	r2, r3
 8004e9e:	69bb      	ldr	r3, [r7, #24]
 8004ea0:	761a      	strb	r2, [r3, #24]
  hmsc->bot_data[9] = (uint8_t)(hmsc->scsi_blk_size >>  16);
 8004ea2:	69bb      	ldr	r3, [r7, #24]
 8004ea4:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8004ea8:	141b      	asrs	r3, r3, #16
 8004eaa:	b2da      	uxtb	r2, r3
 8004eac:	69bb      	ldr	r3, [r7, #24]
 8004eae:	765a      	strb	r2, [r3, #25]
  hmsc->bot_data[10] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 8004eb0:	69bb      	ldr	r3, [r7, #24]
 8004eb2:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8004eb6:	0a1b      	lsrs	r3, r3, #8
 8004eb8:	b29b      	uxth	r3, r3
 8004eba:	b2da      	uxtb	r2, r3
 8004ebc:	69bb      	ldr	r3, [r7, #24]
 8004ebe:	769a      	strb	r2, [r3, #26]
  hmsc->bot_data[11] = (uint8_t)(hmsc->scsi_blk_size);
 8004ec0:	69bb      	ldr	r3, [r7, #24]
 8004ec2:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8004ec6:	b2da      	uxtb	r2, r3
 8004ec8:	69bb      	ldr	r3, [r7, #24]
 8004eca:	76da      	strb	r2, [r3, #27]

  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	330a      	adds	r3, #10
 8004ed0:	781b      	ldrb	r3, [r3, #0]
 8004ed2:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[11] << 16) |
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	330b      	adds	r3, #11
 8004ed8:	781b      	ldrb	r3, [r3, #0]
 8004eda:	041b      	lsls	r3, r3, #16
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8004edc:	431a      	orrs	r2, r3
                          ((uint32_t)params[12] <<  8) |
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	330c      	adds	r3, #12
 8004ee2:	781b      	ldrb	r3, [r3, #0]
 8004ee4:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[11] << 16) |
 8004ee6:	4313      	orrs	r3, r2
                          (uint32_t)params[13];
 8004ee8:	687a      	ldr	r2, [r7, #4]
 8004eea:	320d      	adds	r2, #13
 8004eec:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[12] <<  8) |
 8004eee:	431a      	orrs	r2, r3
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8004ef0:	69bb      	ldr	r3, [r7, #24]
 8004ef2:	60da      	str	r2, [r3, #12]

  return 0;
 8004ef4:	2300      	movs	r3, #0
}
 8004ef6:	4618      	mov	r0, r3
 8004ef8:	3720      	adds	r7, #32
 8004efa:	46bd      	mov	sp, r7
 8004efc:	bd80      	pop	{r7, pc}

08004efe <SCSI_ReadFormatCapacity>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ReadFormatCapacity(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8004efe:	b580      	push	{r7, lr}
 8004f00:	b088      	sub	sp, #32
 8004f02:	af00      	add	r7, sp, #0
 8004f04:	60f8      	str	r0, [r7, #12]
 8004f06:	460b      	mov	r3, r1
 8004f08:	607a      	str	r2, [r7, #4]
 8004f0a:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  uint16_t blk_size;
  uint32_t blk_nbr;
  uint16_t i;
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004f12:	61bb      	str	r3, [r7, #24]

  if (hmsc == NULL)
 8004f14:	69bb      	ldr	r3, [r7, #24]
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d102      	bne.n	8004f20 <SCSI_ReadFormatCapacity+0x22>
  {
    return -1;
 8004f1a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004f1e:	e05c      	b.n	8004fda <SCSI_ReadFormatCapacity+0xdc>
  }

  ret = ((USBD_StorageTypeDef *)pdev->pUserData)->GetCapacity(lun, &blk_nbr, &blk_size);
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8004f26:	685b      	ldr	r3, [r3, #4]
 8004f28:	f107 0214 	add.w	r2, r7, #20
 8004f2c:	f107 0110 	add.w	r1, r7, #16
 8004f30:	7af8      	ldrb	r0, [r7, #11]
 8004f32:	4798      	blx	r3
 8004f34:	4603      	mov	r3, r0
 8004f36:	75fb      	strb	r3, [r7, #23]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 8004f38:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d104      	bne.n	8004f4a <SCSI_ReadFormatCapacity+0x4c>
 8004f40:	69bb      	ldr	r3, [r7, #24]
 8004f42:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 8004f46:	2b02      	cmp	r3, #2
 8004f48:	d108      	bne.n	8004f5c <SCSI_ReadFormatCapacity+0x5e>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8004f4a:	7af9      	ldrb	r1, [r7, #11]
 8004f4c:	233a      	movs	r3, #58	; 0x3a
 8004f4e:	2202      	movs	r2, #2
 8004f50:	68f8      	ldr	r0, [r7, #12]
 8004f52:	f000 f91e 	bl	8005192 <SCSI_SenseCode>
    return -1;
 8004f56:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004f5a:	e03e      	b.n	8004fda <SCSI_ReadFormatCapacity+0xdc>
  }

  for (i = 0U; i < 12U ; i++)
 8004f5c:	2300      	movs	r3, #0
 8004f5e:	83fb      	strh	r3, [r7, #30]
 8004f60:	e007      	b.n	8004f72 <SCSI_ReadFormatCapacity+0x74>
  {
    hmsc->bot_data[i] = 0U;
 8004f62:	8bfb      	ldrh	r3, [r7, #30]
 8004f64:	69ba      	ldr	r2, [r7, #24]
 8004f66:	4413      	add	r3, r2
 8004f68:	2200      	movs	r2, #0
 8004f6a:	741a      	strb	r2, [r3, #16]
  for (i = 0U; i < 12U ; i++)
 8004f6c:	8bfb      	ldrh	r3, [r7, #30]
 8004f6e:	3301      	adds	r3, #1
 8004f70:	83fb      	strh	r3, [r7, #30]
 8004f72:	8bfb      	ldrh	r3, [r7, #30]
 8004f74:	2b0b      	cmp	r3, #11
 8004f76:	d9f4      	bls.n	8004f62 <SCSI_ReadFormatCapacity+0x64>
  }

  hmsc->bot_data[3] = 0x08U;
 8004f78:	69bb      	ldr	r3, [r7, #24]
 8004f7a:	2208      	movs	r2, #8
 8004f7c:	74da      	strb	r2, [r3, #19]
  hmsc->bot_data[4] = (uint8_t)((blk_nbr - 1U) >> 24);
 8004f7e:	693b      	ldr	r3, [r7, #16]
 8004f80:	3b01      	subs	r3, #1
 8004f82:	0e1b      	lsrs	r3, r3, #24
 8004f84:	b2da      	uxtb	r2, r3
 8004f86:	69bb      	ldr	r3, [r7, #24]
 8004f88:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)((blk_nbr - 1U) >> 16);
 8004f8a:	693b      	ldr	r3, [r7, #16]
 8004f8c:	3b01      	subs	r3, #1
 8004f8e:	0c1b      	lsrs	r3, r3, #16
 8004f90:	b2da      	uxtb	r2, r3
 8004f92:	69bb      	ldr	r3, [r7, #24]
 8004f94:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)((blk_nbr - 1U) >>  8);
 8004f96:	693b      	ldr	r3, [r7, #16]
 8004f98:	3b01      	subs	r3, #1
 8004f9a:	0a1b      	lsrs	r3, r3, #8
 8004f9c:	b2da      	uxtb	r2, r3
 8004f9e:	69bb      	ldr	r3, [r7, #24]
 8004fa0:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(blk_nbr - 1U);
 8004fa2:	693b      	ldr	r3, [r7, #16]
 8004fa4:	b2db      	uxtb	r3, r3
 8004fa6:	3b01      	subs	r3, #1
 8004fa8:	b2da      	uxtb	r2, r3
 8004faa:	69bb      	ldr	r3, [r7, #24]
 8004fac:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data[8] = 0x02U;
 8004fae:	69bb      	ldr	r3, [r7, #24]
 8004fb0:	2202      	movs	r2, #2
 8004fb2:	761a      	strb	r2, [r3, #24]
  hmsc->bot_data[9] = (uint8_t)(blk_size >>  16);
 8004fb4:	8abb      	ldrh	r3, [r7, #20]
 8004fb6:	141b      	asrs	r3, r3, #16
 8004fb8:	b2da      	uxtb	r2, r3
 8004fba:	69bb      	ldr	r3, [r7, #24]
 8004fbc:	765a      	strb	r2, [r3, #25]
  hmsc->bot_data[10] = (uint8_t)(blk_size >>  8);
 8004fbe:	8abb      	ldrh	r3, [r7, #20]
 8004fc0:	0a1b      	lsrs	r3, r3, #8
 8004fc2:	b29b      	uxth	r3, r3
 8004fc4:	b2da      	uxtb	r2, r3
 8004fc6:	69bb      	ldr	r3, [r7, #24]
 8004fc8:	769a      	strb	r2, [r3, #26]
  hmsc->bot_data[11] = (uint8_t)(blk_size);
 8004fca:	8abb      	ldrh	r3, [r7, #20]
 8004fcc:	b2da      	uxtb	r2, r3
 8004fce:	69bb      	ldr	r3, [r7, #24]
 8004fd0:	76da      	strb	r2, [r3, #27]

  hmsc->bot_data_length = 12U;
 8004fd2:	69bb      	ldr	r3, [r7, #24]
 8004fd4:	220c      	movs	r2, #12
 8004fd6:	60da      	str	r2, [r3, #12]

  return 0;
 8004fd8:	2300      	movs	r3, #0
}
 8004fda:	4618      	mov	r0, r3
 8004fdc:	3720      	adds	r7, #32
 8004fde:	46bd      	mov	sp, r7
 8004fe0:	bd80      	pop	{r7, pc}
	...

08004fe4 <SCSI_ModeSense6>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ModeSense6(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8004fe4:	b580      	push	{r7, lr}
 8004fe6:	b086      	sub	sp, #24
 8004fe8:	af00      	add	r7, sp, #0
 8004fea:	60f8      	str	r0, [r7, #12]
 8004fec:	460b      	mov	r3, r1
 8004fee:	607a      	str	r2, [r7, #4]
 8004ff0:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004ff8:	613b      	str	r3, [r7, #16]
  uint16_t len = MODE_SENSE6_LEN;
 8004ffa:	2317      	movs	r3, #23
 8004ffc:	82fb      	strh	r3, [r7, #22]

  if (hmsc == NULL)
 8004ffe:	693b      	ldr	r3, [r7, #16]
 8005000:	2b00      	cmp	r3, #0
 8005002:	d102      	bne.n	800500a <SCSI_ModeSense6+0x26>
  {
    return -1;
 8005004:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005008:	e011      	b.n	800502e <SCSI_ModeSense6+0x4a>
  }

  if (params[4] <= len)
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	3304      	adds	r3, #4
 800500e:	781b      	ldrb	r3, [r3, #0]
 8005010:	b29b      	uxth	r3, r3
 8005012:	8afa      	ldrh	r2, [r7, #22]
 8005014:	429a      	cmp	r2, r3
 8005016:	d303      	bcc.n	8005020 <SCSI_ModeSense6+0x3c>
  {
    len = params[4];
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	3304      	adds	r3, #4
 800501c:	781b      	ldrb	r3, [r3, #0]
 800501e:	82fb      	strh	r3, [r7, #22]
  }

  (void)SCSI_UpdateBotData(hmsc, MSC_Mode_Sense6_data, len);
 8005020:	8afb      	ldrh	r3, [r7, #22]
 8005022:	461a      	mov	r2, r3
 8005024:	4904      	ldr	r1, [pc, #16]	; (8005038 <SCSI_ModeSense6+0x54>)
 8005026:	6938      	ldr	r0, [r7, #16]
 8005028:	f000 fdbc 	bl	8005ba4 <SCSI_UpdateBotData>

  return 0;
 800502c:	2300      	movs	r3, #0
}
 800502e:	4618      	mov	r0, r3
 8005030:	3718      	adds	r7, #24
 8005032:	46bd      	mov	sp, r7
 8005034:	bd80      	pop	{r7, pc}
 8005036:	bf00      	nop
 8005038:	200000c0 	.word	0x200000c0

0800503c <SCSI_ModeSense10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ModeSense10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800503c:	b580      	push	{r7, lr}
 800503e:	b086      	sub	sp, #24
 8005040:	af00      	add	r7, sp, #0
 8005042:	60f8      	str	r0, [r7, #12]
 8005044:	460b      	mov	r3, r1
 8005046:	607a      	str	r2, [r7, #4]
 8005048:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005050:	613b      	str	r3, [r7, #16]
  uint16_t len = MODE_SENSE10_LEN;
 8005052:	231b      	movs	r3, #27
 8005054:	82fb      	strh	r3, [r7, #22]

  if (hmsc == NULL)
 8005056:	693b      	ldr	r3, [r7, #16]
 8005058:	2b00      	cmp	r3, #0
 800505a:	d102      	bne.n	8005062 <SCSI_ModeSense10+0x26>
  {
    return -1;
 800505c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005060:	e011      	b.n	8005086 <SCSI_ModeSense10+0x4a>
  }

  if (params[8] <= len)
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	3308      	adds	r3, #8
 8005066:	781b      	ldrb	r3, [r3, #0]
 8005068:	b29b      	uxth	r3, r3
 800506a:	8afa      	ldrh	r2, [r7, #22]
 800506c:	429a      	cmp	r2, r3
 800506e:	d303      	bcc.n	8005078 <SCSI_ModeSense10+0x3c>
  {
    len = params[8];
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	3308      	adds	r3, #8
 8005074:	781b      	ldrb	r3, [r3, #0]
 8005076:	82fb      	strh	r3, [r7, #22]
  }

  (void)SCSI_UpdateBotData(hmsc, MSC_Mode_Sense10_data, len);
 8005078:	8afb      	ldrh	r3, [r7, #22]
 800507a:	461a      	mov	r2, r3
 800507c:	4904      	ldr	r1, [pc, #16]	; (8005090 <SCSI_ModeSense10+0x54>)
 800507e:	6938      	ldr	r0, [r7, #16]
 8005080:	f000 fd90 	bl	8005ba4 <SCSI_UpdateBotData>

  return 0;
 8005084:	2300      	movs	r3, #0
}
 8005086:	4618      	mov	r0, r3
 8005088:	3718      	adds	r7, #24
 800508a:	46bd      	mov	sp, r7
 800508c:	bd80      	pop	{r7, pc}
 800508e:	bf00      	nop
 8005090:	200000d8 	.word	0x200000d8

08005094 <SCSI_RequestSense>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_RequestSense(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8005094:	b580      	push	{r7, lr}
 8005096:	b086      	sub	sp, #24
 8005098:	af00      	add	r7, sp, #0
 800509a:	60f8      	str	r0, [r7, #12]
 800509c:	460b      	mov	r3, r1
 800509e:	607a      	str	r2, [r7, #4]
 80050a0:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  uint8_t i;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80050a8:	613b      	str	r3, [r7, #16]

  if (hmsc == NULL)
 80050aa:	693b      	ldr	r3, [r7, #16]
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d102      	bne.n	80050b6 <SCSI_RequestSense+0x22>
  {
    return -1;
 80050b0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80050b4:	e069      	b.n	800518a <SCSI_RequestSense+0xf6>
  }

  if (hmsc->cbw.dDataLength == 0U)
 80050b6:	693b      	ldr	r3, [r7, #16]
 80050b8:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d10a      	bne.n	80050d6 <SCSI_RequestSense+0x42>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80050c0:	693b      	ldr	r3, [r7, #16]
 80050c2:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 80050c6:	2320      	movs	r3, #32
 80050c8:	2205      	movs	r2, #5
 80050ca:	68f8      	ldr	r0, [r7, #12]
 80050cc:	f000 f861 	bl	8005192 <SCSI_SenseCode>
    return -1;
 80050d0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80050d4:	e059      	b.n	800518a <SCSI_RequestSense+0xf6>
  }

  for (i = 0U; i < REQUEST_SENSE_DATA_LEN; i++)
 80050d6:	2300      	movs	r3, #0
 80050d8:	75fb      	strb	r3, [r7, #23]
 80050da:	e007      	b.n	80050ec <SCSI_RequestSense+0x58>
  {
    hmsc->bot_data[i] = 0U;
 80050dc:	7dfb      	ldrb	r3, [r7, #23]
 80050de:	693a      	ldr	r2, [r7, #16]
 80050e0:	4413      	add	r3, r2
 80050e2:	2200      	movs	r2, #0
 80050e4:	741a      	strb	r2, [r3, #16]
  for (i = 0U; i < REQUEST_SENSE_DATA_LEN; i++)
 80050e6:	7dfb      	ldrb	r3, [r7, #23]
 80050e8:	3301      	adds	r3, #1
 80050ea:	75fb      	strb	r3, [r7, #23]
 80050ec:	7dfb      	ldrb	r3, [r7, #23]
 80050ee:	2b11      	cmp	r3, #17
 80050f0:	d9f4      	bls.n	80050dc <SCSI_RequestSense+0x48>
  }

  hmsc->bot_data[0] = 0x70U;
 80050f2:	693b      	ldr	r3, [r7, #16]
 80050f4:	2270      	movs	r2, #112	; 0x70
 80050f6:	741a      	strb	r2, [r3, #16]
  hmsc->bot_data[7] = REQUEST_SENSE_DATA_LEN - 6U;
 80050f8:	693b      	ldr	r3, [r7, #16]
 80050fa:	220c      	movs	r2, #12
 80050fc:	75da      	strb	r2, [r3, #23]

  if ((hmsc->scsi_sense_head != hmsc->scsi_sense_tail))
 80050fe:	693b      	ldr	r3, [r7, #16]
 8005100:	f893 2260 	ldrb.w	r2, [r3, #608]	; 0x260
 8005104:	693b      	ldr	r3, [r7, #16]
 8005106:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 800510a:	429a      	cmp	r2, r3
 800510c:	d02e      	beq.n	800516c <SCSI_RequestSense+0xd8>
  {
    hmsc->bot_data[2] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].Skey;
 800510e:	693b      	ldr	r3, [r7, #16]
 8005110:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 8005114:	461a      	mov	r2, r3
 8005116:	693b      	ldr	r3, [r7, #16]
 8005118:	3248      	adds	r2, #72	; 0x48
 800511a:	f813 2032 	ldrb.w	r2, [r3, r2, lsl #3]
 800511e:	693b      	ldr	r3, [r7, #16]
 8005120:	749a      	strb	r2, [r3, #18]
    hmsc->bot_data[12] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASC;
 8005122:	693b      	ldr	r3, [r7, #16]
 8005124:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 8005128:	693a      	ldr	r2, [r7, #16]
 800512a:	3348      	adds	r3, #72	; 0x48
 800512c:	00db      	lsls	r3, r3, #3
 800512e:	4413      	add	r3, r2
 8005130:	791a      	ldrb	r2, [r3, #4]
 8005132:	693b      	ldr	r3, [r7, #16]
 8005134:	771a      	strb	r2, [r3, #28]
    hmsc->bot_data[13] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASCQ;
 8005136:	693b      	ldr	r3, [r7, #16]
 8005138:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 800513c:	693a      	ldr	r2, [r7, #16]
 800513e:	3348      	adds	r3, #72	; 0x48
 8005140:	00db      	lsls	r3, r3, #3
 8005142:	4413      	add	r3, r2
 8005144:	795a      	ldrb	r2, [r3, #5]
 8005146:	693b      	ldr	r3, [r7, #16]
 8005148:	775a      	strb	r2, [r3, #29]
    hmsc->scsi_sense_head++;
 800514a:	693b      	ldr	r3, [r7, #16]
 800514c:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 8005150:	3301      	adds	r3, #1
 8005152:	b2da      	uxtb	r2, r3
 8005154:	693b      	ldr	r3, [r7, #16]
 8005156:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260

    if (hmsc->scsi_sense_head == SENSE_LIST_DEEPTH)
 800515a:	693b      	ldr	r3, [r7, #16]
 800515c:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 8005160:	2b04      	cmp	r3, #4
 8005162:	d103      	bne.n	800516c <SCSI_RequestSense+0xd8>
    {
      hmsc->scsi_sense_head = 0U;
 8005164:	693b      	ldr	r3, [r7, #16]
 8005166:	2200      	movs	r2, #0
 8005168:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260
    }
  }

  hmsc->bot_data_length = REQUEST_SENSE_DATA_LEN;
 800516c:	693b      	ldr	r3, [r7, #16]
 800516e:	2212      	movs	r2, #18
 8005170:	60da      	str	r2, [r3, #12]

  if (params[4] <= REQUEST_SENSE_DATA_LEN)
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	3304      	adds	r3, #4
 8005176:	781b      	ldrb	r3, [r3, #0]
 8005178:	2b12      	cmp	r3, #18
 800517a:	d805      	bhi.n	8005188 <SCSI_RequestSense+0xf4>
  {
    hmsc->bot_data_length = params[4];
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	3304      	adds	r3, #4
 8005180:	781b      	ldrb	r3, [r3, #0]
 8005182:	461a      	mov	r2, r3
 8005184:	693b      	ldr	r3, [r7, #16]
 8005186:	60da      	str	r2, [r3, #12]
  }

  return 0;
 8005188:	2300      	movs	r3, #0
}
 800518a:	4618      	mov	r0, r3
 800518c:	3718      	adds	r7, #24
 800518e:	46bd      	mov	sp, r7
 8005190:	bd80      	pop	{r7, pc}

08005192 <SCSI_SenseCode>:
  * @param  ASC: Additional Sense Code
  * @retval none

  */
void SCSI_SenseCode(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t sKey, uint8_t ASC)
{
 8005192:	b480      	push	{r7}
 8005194:	b085      	sub	sp, #20
 8005196:	af00      	add	r7, sp, #0
 8005198:	6078      	str	r0, [r7, #4]
 800519a:	4608      	mov	r0, r1
 800519c:	4611      	mov	r1, r2
 800519e:	461a      	mov	r2, r3
 80051a0:	4603      	mov	r3, r0
 80051a2:	70fb      	strb	r3, [r7, #3]
 80051a4:	460b      	mov	r3, r1
 80051a6:	70bb      	strb	r3, [r7, #2]
 80051a8:	4613      	mov	r3, r2
 80051aa:	707b      	strb	r3, [r7, #1]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80051b2:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d02c      	beq.n	8005214 <SCSI_SenseCode+0x82>
  {
    return;
  }

  hmsc->scsi_sense[hmsc->scsi_sense_tail].Skey = sKey;
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 80051c0:	461a      	mov	r2, r3
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	3248      	adds	r2, #72	; 0x48
 80051c6:	78b9      	ldrb	r1, [r7, #2]
 80051c8:	f803 1032 	strb.w	r1, [r3, r2, lsl #3]
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.b.ASC = ASC;
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 80051d2:	68fa      	ldr	r2, [r7, #12]
 80051d4:	3348      	adds	r3, #72	; 0x48
 80051d6:	00db      	lsls	r3, r3, #3
 80051d8:	4413      	add	r3, r2
 80051da:	787a      	ldrb	r2, [r7, #1]
 80051dc:	711a      	strb	r2, [r3, #4]
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.b.ASCQ = 0U;
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 80051e4:	68fa      	ldr	r2, [r7, #12]
 80051e6:	3348      	adds	r3, #72	; 0x48
 80051e8:	00db      	lsls	r3, r3, #3
 80051ea:	4413      	add	r3, r2
 80051ec:	2200      	movs	r2, #0
 80051ee:	715a      	strb	r2, [r3, #5]
  hmsc->scsi_sense_tail++;
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 80051f6:	3301      	adds	r3, #1
 80051f8:	b2da      	uxtb	r2, r3
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	f883 2261 	strb.w	r2, [r3, #609]	; 0x261

  if (hmsc->scsi_sense_tail == SENSE_LIST_DEEPTH)
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 8005206:	2b04      	cmp	r3, #4
 8005208:	d105      	bne.n	8005216 <SCSI_SenseCode+0x84>
  {
    hmsc->scsi_sense_tail = 0U;
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	2200      	movs	r2, #0
 800520e:	f883 2261 	strb.w	r2, [r3, #609]	; 0x261
 8005212:	e000      	b.n	8005216 <SCSI_SenseCode+0x84>
    return;
 8005214:	bf00      	nop
  }
}
 8005216:	3714      	adds	r7, #20
 8005218:	46bd      	mov	sp, r7
 800521a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800521e:	4770      	bx	lr

08005220 <SCSI_StartStopUnit>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_StartStopUnit(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8005220:	b580      	push	{r7, lr}
 8005222:	b086      	sub	sp, #24
 8005224:	af00      	add	r7, sp, #0
 8005226:	60f8      	str	r0, [r7, #12]
 8005228:	460b      	mov	r3, r1
 800522a:	607a      	str	r2, [r7, #4]
 800522c:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005234:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 8005236:	697b      	ldr	r3, [r7, #20]
 8005238:	2b00      	cmp	r3, #0
 800523a:	d102      	bne.n	8005242 <SCSI_StartStopUnit+0x22>
  {
    return -1;
 800523c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005240:	e03b      	b.n	80052ba <SCSI_StartStopUnit+0x9a>
  }

  if ((hmsc->scsi_medium_state == SCSI_MEDIUM_LOCKED) && ((params[4] & 0x3U) == 2U))
 8005242:	697b      	ldr	r3, [r7, #20]
 8005244:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 8005248:	2b01      	cmp	r3, #1
 800524a:	d10f      	bne.n	800526c <SCSI_StartStopUnit+0x4c>
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	3304      	adds	r3, #4
 8005250:	781b      	ldrb	r3, [r3, #0]
 8005252:	f003 0303 	and.w	r3, r3, #3
 8005256:	2b02      	cmp	r3, #2
 8005258:	d108      	bne.n	800526c <SCSI_StartStopUnit+0x4c>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
 800525a:	7af9      	ldrb	r1, [r7, #11]
 800525c:	2324      	movs	r3, #36	; 0x24
 800525e:	2205      	movs	r2, #5
 8005260:	68f8      	ldr	r0, [r7, #12]
 8005262:	f7ff ff96 	bl	8005192 <SCSI_SenseCode>

    return -1;
 8005266:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800526a:	e026      	b.n	80052ba <SCSI_StartStopUnit+0x9a>
  }

  if ((params[4] & 0x3U) == 0x1U) /* START=1 */
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	3304      	adds	r3, #4
 8005270:	781b      	ldrb	r3, [r3, #0]
 8005272:	f003 0303 	and.w	r3, r3, #3
 8005276:	2b01      	cmp	r3, #1
 8005278:	d104      	bne.n	8005284 <SCSI_StartStopUnit+0x64>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 800527a:	697b      	ldr	r3, [r7, #20]
 800527c:	2200      	movs	r2, #0
 800527e:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
 8005282:	e016      	b.n	80052b2 <SCSI_StartStopUnit+0x92>
  }
  else if ((params[4] & 0x3U) == 0x2U) /* START=0 and LOEJ Load Eject=1 */
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	3304      	adds	r3, #4
 8005288:	781b      	ldrb	r3, [r3, #0]
 800528a:	f003 0303 	and.w	r3, r3, #3
 800528e:	2b02      	cmp	r3, #2
 8005290:	d104      	bne.n	800529c <SCSI_StartStopUnit+0x7c>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_EJECTED;
 8005292:	697b      	ldr	r3, [r7, #20]
 8005294:	2202      	movs	r2, #2
 8005296:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
 800529a:	e00a      	b.n	80052b2 <SCSI_StartStopUnit+0x92>
  }
  else if ((params[4] & 0x3U) == 0x3U) /* START=1 and LOEJ Load Eject=1 */
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	3304      	adds	r3, #4
 80052a0:	781b      	ldrb	r3, [r3, #0]
 80052a2:	f003 0303 	and.w	r3, r3, #3
 80052a6:	2b03      	cmp	r3, #3
 80052a8:	d103      	bne.n	80052b2 <SCSI_StartStopUnit+0x92>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 80052aa:	697b      	ldr	r3, [r7, #20]
 80052ac:	2200      	movs	r2, #0
 80052ae:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
  }
  else
  {
    /* .. */
  }
  hmsc->bot_data_length = 0U;
 80052b2:	697b      	ldr	r3, [r7, #20]
 80052b4:	2200      	movs	r2, #0
 80052b6:	60da      	str	r2, [r3, #12]

  return 0;
 80052b8:	2300      	movs	r3, #0
}
 80052ba:	4618      	mov	r0, r3
 80052bc:	3718      	adds	r7, #24
 80052be:	46bd      	mov	sp, r7
 80052c0:	bd80      	pop	{r7, pc}

080052c2 <SCSI_AllowPreventRemovable>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_AllowPreventRemovable(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80052c2:	b480      	push	{r7}
 80052c4:	b087      	sub	sp, #28
 80052c6:	af00      	add	r7, sp, #0
 80052c8:	60f8      	str	r0, [r7, #12]
 80052ca:	460b      	mov	r3, r1
 80052cc:	607a      	str	r2, [r7, #4]
 80052ce:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80052d6:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 80052d8:	697b      	ldr	r3, [r7, #20]
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d102      	bne.n	80052e4 <SCSI_AllowPreventRemovable+0x22>
  {
    return -1;
 80052de:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80052e2:	e011      	b.n	8005308 <SCSI_AllowPreventRemovable+0x46>
  }

  if (params[4] == 0U)
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	3304      	adds	r3, #4
 80052e8:	781b      	ldrb	r3, [r3, #0]
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d104      	bne.n	80052f8 <SCSI_AllowPreventRemovable+0x36>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 80052ee:	697b      	ldr	r3, [r7, #20]
 80052f0:	2200      	movs	r2, #0
 80052f2:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
 80052f6:	e003      	b.n	8005300 <SCSI_AllowPreventRemovable+0x3e>
  }
  else
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_LOCKED;
 80052f8:	697b      	ldr	r3, [r7, #20]
 80052fa:	2201      	movs	r2, #1
 80052fc:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
  }

  hmsc->bot_data_length = 0U;
 8005300:	697b      	ldr	r3, [r7, #20]
 8005302:	2200      	movs	r2, #0
 8005304:	60da      	str	r2, [r3, #12]

  return 0;
 8005306:	2300      	movs	r3, #0
}
 8005308:	4618      	mov	r0, r3
 800530a:	371c      	adds	r7, #28
 800530c:	46bd      	mov	sp, r7
 800530e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005312:	4770      	bx	lr

08005314 <SCSI_Read10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Read10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8005314:	b580      	push	{r7, lr}
 8005316:	b086      	sub	sp, #24
 8005318:	af00      	add	r7, sp, #0
 800531a:	60f8      	str	r0, [r7, #12]
 800531c:	460b      	mov	r3, r1
 800531e:	607a      	str	r2, [r7, #4]
 8005320:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005328:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 800532a:	697b      	ldr	r3, [r7, #20]
 800532c:	2b00      	cmp	r3, #0
 800532e:	d102      	bne.n	8005336 <SCSI_Read10+0x22>
  {
    return -1;
 8005330:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005334:	e08a      	b.n	800544c <SCSI_Read10+0x138>
  }

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 8005336:	697b      	ldr	r3, [r7, #20]
 8005338:	7a1b      	ldrb	r3, [r3, #8]
 800533a:	2b00      	cmp	r3, #0
 800533c:	d17c      	bne.n	8005438 <SCSI_Read10+0x124>
  {
    /* case 10 : Ho <> Di */
    if ((hmsc->cbw.bmFlags & 0x80U) != 0x80U)
 800533e:	697b      	ldr	r3, [r7, #20]
 8005340:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 8005344:	b25b      	sxtb	r3, r3
 8005346:	2b00      	cmp	r3, #0
 8005348:	db0a      	blt.n	8005360 <SCSI_Read10+0x4c>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800534a:	697b      	ldr	r3, [r7, #20]
 800534c:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8005350:	2320      	movs	r3, #32
 8005352:	2205      	movs	r2, #5
 8005354:	68f8      	ldr	r0, [r7, #12]
 8005356:	f7ff ff1c 	bl	8005192 <SCSI_SenseCode>
      return -1;
 800535a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800535e:	e075      	b.n	800544c <SCSI_Read10+0x138>
    }

    if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 8005360:	697b      	ldr	r3, [r7, #20]
 8005362:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 8005366:	2b02      	cmp	r3, #2
 8005368:	d108      	bne.n	800537c <SCSI_Read10+0x68>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800536a:	7af9      	ldrb	r1, [r7, #11]
 800536c:	233a      	movs	r3, #58	; 0x3a
 800536e:	2202      	movs	r2, #2
 8005370:	68f8      	ldr	r0, [r7, #12]
 8005372:	f7ff ff0e 	bl	8005192 <SCSI_SenseCode>

      return -1;
 8005376:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800537a:	e067      	b.n	800544c <SCSI_Read10+0x138>
    }

    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005382:	689b      	ldr	r3, [r3, #8]
 8005384:	7afa      	ldrb	r2, [r7, #11]
 8005386:	4610      	mov	r0, r2
 8005388:	4798      	blx	r3
 800538a:	4603      	mov	r3, r0
 800538c:	2b00      	cmp	r3, #0
 800538e:	d008      	beq.n	80053a2 <SCSI_Read10+0x8e>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8005390:	7af9      	ldrb	r1, [r7, #11]
 8005392:	233a      	movs	r3, #58	; 0x3a
 8005394:	2202      	movs	r2, #2
 8005396:	68f8      	ldr	r0, [r7, #12]
 8005398:	f7ff fefb 	bl	8005192 <SCSI_SenseCode>
      return -1;
 800539c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80053a0:	e054      	b.n	800544c <SCSI_Read10+0x138>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	3302      	adds	r3, #2
 80053a6:	781b      	ldrb	r3, [r3, #0]
 80053a8:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	3303      	adds	r3, #3
 80053ae:	781b      	ldrb	r3, [r3, #0]
 80053b0:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 80053b2:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] <<  8) |
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	3304      	adds	r3, #4
 80053b8:	781b      	ldrb	r3, [r3, #0]
 80053ba:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 80053bc:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 80053be:	687a      	ldr	r2, [r7, #4]
 80053c0:	3205      	adds	r2, #5
 80053c2:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] <<  8) |
 80053c4:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 80053c6:	697b      	ldr	r3, [r7, #20]
 80053c8:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[7] <<  8) | (uint32_t)params[8];
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	3307      	adds	r3, #7
 80053d0:	781b      	ldrb	r3, [r3, #0]
 80053d2:	021b      	lsls	r3, r3, #8
 80053d4:	687a      	ldr	r2, [r7, #4]
 80053d6:	3208      	adds	r2, #8
 80053d8:	7812      	ldrb	r2, [r2, #0]
 80053da:	431a      	orrs	r2, r3
 80053dc:	697b      	ldr	r3, [r7, #20]
 80053de:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 80053e2:	697b      	ldr	r3, [r7, #20]
 80053e4:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 80053e8:	697b      	ldr	r3, [r7, #20]
 80053ea:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 80053ee:	7af9      	ldrb	r1, [r7, #11]
 80053f0:	68f8      	ldr	r0, [r7, #12]
 80053f2:	f000 faad 	bl	8005950 <SCSI_CheckAddressRange>
 80053f6:	4603      	mov	r3, r0
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	da02      	bge.n	8005402 <SCSI_Read10+0xee>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 80053fc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005400:	e024      	b.n	800544c <SCSI_Read10+0x138>
    }

    /* cases 4,5 : Hi <> Dn */
    if (hmsc->cbw.dDataLength != (hmsc->scsi_blk_len * hmsc->scsi_blk_size))
 8005402:	697b      	ldr	r3, [r7, #20]
 8005404:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 8005408:	697b      	ldr	r3, [r7, #20]
 800540a:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800540e:	6979      	ldr	r1, [r7, #20]
 8005410:	f8b1 1264 	ldrh.w	r1, [r1, #612]	; 0x264
 8005414:	fb01 f303 	mul.w	r3, r1, r3
 8005418:	429a      	cmp	r2, r3
 800541a:	d00a      	beq.n	8005432 <SCSI_Read10+0x11e>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800541c:	697b      	ldr	r3, [r7, #20]
 800541e:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8005422:	2320      	movs	r3, #32
 8005424:	2205      	movs	r2, #5
 8005426:	68f8      	ldr	r0, [r7, #12]
 8005428:	f7ff feb3 	bl	8005192 <SCSI_SenseCode>
      return -1;
 800542c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005430:	e00c      	b.n	800544c <SCSI_Read10+0x138>
    }

    hmsc->bot_state = USBD_BOT_DATA_IN;
 8005432:	697b      	ldr	r3, [r7, #20]
 8005434:	2202      	movs	r2, #2
 8005436:	721a      	strb	r2, [r3, #8]
  }
  hmsc->bot_data_length = MSC_MEDIA_PACKET;
 8005438:	697b      	ldr	r3, [r7, #20]
 800543a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800543e:	60da      	str	r2, [r3, #12]

  return SCSI_ProcessRead(pdev, lun);
 8005440:	7afb      	ldrb	r3, [r7, #11]
 8005442:	4619      	mov	r1, r3
 8005444:	68f8      	ldr	r0, [r7, #12]
 8005446:	f000 faab 	bl	80059a0 <SCSI_ProcessRead>
 800544a:	4603      	mov	r3, r0
}
 800544c:	4618      	mov	r0, r3
 800544e:	3718      	adds	r7, #24
 8005450:	46bd      	mov	sp, r7
 8005452:	bd80      	pop	{r7, pc}

08005454 <SCSI_Read12>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Read12(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8005454:	b580      	push	{r7, lr}
 8005456:	b086      	sub	sp, #24
 8005458:	af00      	add	r7, sp, #0
 800545a:	60f8      	str	r0, [r7, #12]
 800545c:	460b      	mov	r3, r1
 800545e:	607a      	str	r2, [r7, #4]
 8005460:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005468:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 800546a:	697b      	ldr	r3, [r7, #20]
 800546c:	2b00      	cmp	r3, #0
 800546e:	d102      	bne.n	8005476 <SCSI_Read12+0x22>
  {
    return -1;
 8005470:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005474:	e095      	b.n	80055a2 <SCSI_Read12+0x14e>
  }

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 8005476:	697b      	ldr	r3, [r7, #20]
 8005478:	7a1b      	ldrb	r3, [r3, #8]
 800547a:	2b00      	cmp	r3, #0
 800547c:	f040 8087 	bne.w	800558e <SCSI_Read12+0x13a>
  {
    /* case 10 : Ho <> Di */
    if ((hmsc->cbw.bmFlags & 0x80U) != 0x80U)
 8005480:	697b      	ldr	r3, [r7, #20]
 8005482:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 8005486:	b25b      	sxtb	r3, r3
 8005488:	2b00      	cmp	r3, #0
 800548a:	db0a      	blt.n	80054a2 <SCSI_Read12+0x4e>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800548c:	697b      	ldr	r3, [r7, #20]
 800548e:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8005492:	2320      	movs	r3, #32
 8005494:	2205      	movs	r2, #5
 8005496:	68f8      	ldr	r0, [r7, #12]
 8005498:	f7ff fe7b 	bl	8005192 <SCSI_SenseCode>
      return -1;
 800549c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80054a0:	e07f      	b.n	80055a2 <SCSI_Read12+0x14e>
    }

    if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 80054a2:	697b      	ldr	r3, [r7, #20]
 80054a4:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 80054a8:	2b02      	cmp	r3, #2
 80054aa:	d108      	bne.n	80054be <SCSI_Read12+0x6a>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 80054ac:	7af9      	ldrb	r1, [r7, #11]
 80054ae:	233a      	movs	r3, #58	; 0x3a
 80054b0:	2202      	movs	r2, #2
 80054b2:	68f8      	ldr	r0, [r7, #12]
 80054b4:	f7ff fe6d 	bl	8005192 <SCSI_SenseCode>
      return -1;
 80054b8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80054bc:	e071      	b.n	80055a2 <SCSI_Read12+0x14e>
    }

    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80054c4:	689b      	ldr	r3, [r3, #8]
 80054c6:	7afa      	ldrb	r2, [r7, #11]
 80054c8:	4610      	mov	r0, r2
 80054ca:	4798      	blx	r3
 80054cc:	4603      	mov	r3, r0
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d008      	beq.n	80054e4 <SCSI_Read12+0x90>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 80054d2:	7af9      	ldrb	r1, [r7, #11]
 80054d4:	233a      	movs	r3, #58	; 0x3a
 80054d6:	2202      	movs	r2, #2
 80054d8:	68f8      	ldr	r0, [r7, #12]
 80054da:	f7ff fe5a 	bl	8005192 <SCSI_SenseCode>
      return -1;
 80054de:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80054e2:	e05e      	b.n	80055a2 <SCSI_Read12+0x14e>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	3302      	adds	r3, #2
 80054e8:	781b      	ldrb	r3, [r3, #0]
 80054ea:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	3303      	adds	r3, #3
 80054f0:	781b      	ldrb	r3, [r3, #0]
 80054f2:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 80054f4:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] <<  8) |
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	3304      	adds	r3, #4
 80054fa:	781b      	ldrb	r3, [r3, #0]
 80054fc:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 80054fe:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 8005500:	687a      	ldr	r2, [r7, #4]
 8005502:	3205      	adds	r2, #5
 8005504:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] <<  8) |
 8005506:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8005508:	697b      	ldr	r3, [r7, #20]
 800550a:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	3306      	adds	r3, #6
 8005512:	781b      	ldrb	r3, [r3, #0]
 8005514:	061a      	lsls	r2, r3, #24
                         ((uint32_t)params[7] << 16) |
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	3307      	adds	r3, #7
 800551a:	781b      	ldrb	r3, [r3, #0]
 800551c:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 800551e:	431a      	orrs	r2, r3
                         ((uint32_t)params[8] << 8) |
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	3308      	adds	r3, #8
 8005524:	781b      	ldrb	r3, [r3, #0]
 8005526:	021b      	lsls	r3, r3, #8
                         ((uint32_t)params[7] << 16) |
 8005528:	4313      	orrs	r3, r2
                         (uint32_t)params[9];
 800552a:	687a      	ldr	r2, [r7, #4]
 800552c:	3209      	adds	r2, #9
 800552e:	7812      	ldrb	r2, [r2, #0]
                         ((uint32_t)params[8] << 8) |
 8005530:	431a      	orrs	r2, r3
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8005532:	697b      	ldr	r3, [r7, #20]
 8005534:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 8005538:	697b      	ldr	r3, [r7, #20]
 800553a:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 800553e:	697b      	ldr	r3, [r7, #20]
 8005540:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8005544:	7af9      	ldrb	r1, [r7, #11]
 8005546:	68f8      	ldr	r0, [r7, #12]
 8005548:	f000 fa02 	bl	8005950 <SCSI_CheckAddressRange>
 800554c:	4603      	mov	r3, r0
 800554e:	2b00      	cmp	r3, #0
 8005550:	da02      	bge.n	8005558 <SCSI_Read12+0x104>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 8005552:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005556:	e024      	b.n	80055a2 <SCSI_Read12+0x14e>
    }

    /* cases 4,5 : Hi <> Dn */
    if (hmsc->cbw.dDataLength != (hmsc->scsi_blk_len * hmsc->scsi_blk_size))
 8005558:	697b      	ldr	r3, [r7, #20]
 800555a:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 800555e:	697b      	ldr	r3, [r7, #20]
 8005560:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8005564:	6979      	ldr	r1, [r7, #20]
 8005566:	f8b1 1264 	ldrh.w	r1, [r1, #612]	; 0x264
 800556a:	fb01 f303 	mul.w	r3, r1, r3
 800556e:	429a      	cmp	r2, r3
 8005570:	d00a      	beq.n	8005588 <SCSI_Read12+0x134>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8005572:	697b      	ldr	r3, [r7, #20]
 8005574:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8005578:	2320      	movs	r3, #32
 800557a:	2205      	movs	r2, #5
 800557c:	68f8      	ldr	r0, [r7, #12]
 800557e:	f7ff fe08 	bl	8005192 <SCSI_SenseCode>
      return -1;
 8005582:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005586:	e00c      	b.n	80055a2 <SCSI_Read12+0x14e>
    }

    hmsc->bot_state = USBD_BOT_DATA_IN;
 8005588:	697b      	ldr	r3, [r7, #20]
 800558a:	2202      	movs	r2, #2
 800558c:	721a      	strb	r2, [r3, #8]
  }
  hmsc->bot_data_length = MSC_MEDIA_PACKET;
 800558e:	697b      	ldr	r3, [r7, #20]
 8005590:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005594:	60da      	str	r2, [r3, #12]

  return SCSI_ProcessRead(pdev, lun);
 8005596:	7afb      	ldrb	r3, [r7, #11]
 8005598:	4619      	mov	r1, r3
 800559a:	68f8      	ldr	r0, [r7, #12]
 800559c:	f000 fa00 	bl	80059a0 <SCSI_ProcessRead>
 80055a0:	4603      	mov	r3, r0
}
 80055a2:	4618      	mov	r0, r3
 80055a4:	3718      	adds	r7, #24
 80055a6:	46bd      	mov	sp, r7
 80055a8:	bd80      	pop	{r7, pc}

080055aa <SCSI_Write10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Write10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80055aa:	b580      	push	{r7, lr}
 80055ac:	b086      	sub	sp, #24
 80055ae:	af00      	add	r7, sp, #0
 80055b0:	60f8      	str	r0, [r7, #12]
 80055b2:	460b      	mov	r3, r1
 80055b4:	607a      	str	r2, [r7, #4]
 80055b6:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80055be:	617b      	str	r3, [r7, #20]
  uint32_t len;

  if (hmsc == NULL)
 80055c0:	697b      	ldr	r3, [r7, #20]
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d102      	bne.n	80055cc <SCSI_Write10+0x22>
  {
    return -1;
 80055c6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80055ca:	e0af      	b.n	800572c <SCSI_Write10+0x182>
  }

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 80055cc:	697b      	ldr	r3, [r7, #20]
 80055ce:	7a1b      	ldrb	r3, [r3, #8]
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	f040 80a5 	bne.w	8005720 <SCSI_Write10+0x176>
  {
    if (hmsc->cbw.dDataLength == 0U)
 80055d6:	697b      	ldr	r3, [r7, #20]
 80055d8:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d10a      	bne.n	80055f6 <SCSI_Write10+0x4c>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80055e0:	697b      	ldr	r3, [r7, #20]
 80055e2:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 80055e6:	2320      	movs	r3, #32
 80055e8:	2205      	movs	r2, #5
 80055ea:	68f8      	ldr	r0, [r7, #12]
 80055ec:	f7ff fdd1 	bl	8005192 <SCSI_SenseCode>
      return -1;
 80055f0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80055f4:	e09a      	b.n	800572c <SCSI_Write10+0x182>
    }

    /* case 8 : Hi <> Do */
    if ((hmsc->cbw.bmFlags & 0x80U) == 0x80U)
 80055f6:	697b      	ldr	r3, [r7, #20]
 80055f8:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 80055fc:	b25b      	sxtb	r3, r3
 80055fe:	2b00      	cmp	r3, #0
 8005600:	da0a      	bge.n	8005618 <SCSI_Write10+0x6e>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8005602:	697b      	ldr	r3, [r7, #20]
 8005604:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8005608:	2320      	movs	r3, #32
 800560a:	2205      	movs	r2, #5
 800560c:	68f8      	ldr	r0, [r7, #12]
 800560e:	f7ff fdc0 	bl	8005192 <SCSI_SenseCode>
      return -1;
 8005612:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005616:	e089      	b.n	800572c <SCSI_Write10+0x182>
    }

    /* Check whether Media is ready */
    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800561e:	689b      	ldr	r3, [r3, #8]
 8005620:	7afa      	ldrb	r2, [r7, #11]
 8005622:	4610      	mov	r0, r2
 8005624:	4798      	blx	r3
 8005626:	4603      	mov	r3, r0
 8005628:	2b00      	cmp	r3, #0
 800562a:	d008      	beq.n	800563e <SCSI_Write10+0x94>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800562c:	7af9      	ldrb	r1, [r7, #11]
 800562e:	233a      	movs	r3, #58	; 0x3a
 8005630:	2202      	movs	r2, #2
 8005632:	68f8      	ldr	r0, [r7, #12]
 8005634:	f7ff fdad 	bl	8005192 <SCSI_SenseCode>
      return -1;
 8005638:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800563c:	e076      	b.n	800572c <SCSI_Write10+0x182>
    }

    /* Check If media is write-protected */
    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsWriteProtected(lun) != 0)
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005644:	68db      	ldr	r3, [r3, #12]
 8005646:	7afa      	ldrb	r2, [r7, #11]
 8005648:	4610      	mov	r0, r2
 800564a:	4798      	blx	r3
 800564c:	4603      	mov	r3, r0
 800564e:	2b00      	cmp	r3, #0
 8005650:	d008      	beq.n	8005664 <SCSI_Write10+0xba>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, WRITE_PROTECTED);
 8005652:	7af9      	ldrb	r1, [r7, #11]
 8005654:	2327      	movs	r3, #39	; 0x27
 8005656:	2202      	movs	r2, #2
 8005658:	68f8      	ldr	r0, [r7, #12]
 800565a:	f7ff fd9a 	bl	8005192 <SCSI_SenseCode>
      return -1;
 800565e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005662:	e063      	b.n	800572c <SCSI_Write10+0x182>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	3302      	adds	r3, #2
 8005668:	781b      	ldrb	r3, [r3, #0]
 800566a:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	3303      	adds	r3, #3
 8005670:	781b      	ldrb	r3, [r3, #0]
 8005672:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8005674:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] << 8) |
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	3304      	adds	r3, #4
 800567a:	781b      	ldrb	r3, [r3, #0]
 800567c:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 800567e:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 8005680:	687a      	ldr	r2, [r7, #4]
 8005682:	3205      	adds	r2, #5
 8005684:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] << 8) |
 8005686:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8005688:	697b      	ldr	r3, [r7, #20]
 800568a:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	3307      	adds	r3, #7
 8005692:	781b      	ldrb	r3, [r3, #0]
 8005694:	021b      	lsls	r3, r3, #8
                         (uint32_t)params[8];
 8005696:	687a      	ldr	r2, [r7, #4]
 8005698:	3208      	adds	r2, #8
 800569a:	7812      	ldrb	r2, [r2, #0]
    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 800569c:	431a      	orrs	r2, r3
 800569e:	697b      	ldr	r3, [r7, #20]
 80056a0:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

    /* check if LBA address is in the right range */
    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 80056a4:	697b      	ldr	r3, [r7, #20]
 80056a6:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 80056aa:	697b      	ldr	r3, [r7, #20]
 80056ac:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 80056b0:	7af9      	ldrb	r1, [r7, #11]
 80056b2:	68f8      	ldr	r0, [r7, #12]
 80056b4:	f000 f94c 	bl	8005950 <SCSI_CheckAddressRange>
 80056b8:	4603      	mov	r3, r0
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	da02      	bge.n	80056c4 <SCSI_Write10+0x11a>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 80056be:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80056c2:	e033      	b.n	800572c <SCSI_Write10+0x182>
    }

    len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 80056c4:	697b      	ldr	r3, [r7, #20]
 80056c6:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 80056ca:	697a      	ldr	r2, [r7, #20]
 80056cc:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 80056d0:	fb02 f303 	mul.w	r3, r2, r3
 80056d4:	613b      	str	r3, [r7, #16]

    /* cases 3,11,13 : Hn,Ho <> D0 */
    if (hmsc->cbw.dDataLength != len)
 80056d6:	697b      	ldr	r3, [r7, #20]
 80056d8:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80056dc:	693a      	ldr	r2, [r7, #16]
 80056de:	429a      	cmp	r2, r3
 80056e0:	d00a      	beq.n	80056f8 <SCSI_Write10+0x14e>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80056e2:	697b      	ldr	r3, [r7, #20]
 80056e4:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 80056e8:	2320      	movs	r3, #32
 80056ea:	2205      	movs	r2, #5
 80056ec:	68f8      	ldr	r0, [r7, #12]
 80056ee:	f7ff fd50 	bl	8005192 <SCSI_SenseCode>
      return -1;
 80056f2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80056f6:	e019      	b.n	800572c <SCSI_Write10+0x182>
    }

    len = MIN(len, MSC_MEDIA_PACKET);
 80056f8:	693b      	ldr	r3, [r7, #16]
 80056fa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80056fe:	bf28      	it	cs
 8005700:	f44f 7300 	movcs.w	r3, #512	; 0x200
 8005704:	613b      	str	r3, [r7, #16]

    /* Prepare EP to receive first data packet */
    hmsc->bot_state = USBD_BOT_DATA_OUT;
 8005706:	697b      	ldr	r3, [r7, #20]
 8005708:	2201      	movs	r2, #1
 800570a:	721a      	strb	r2, [r3, #8]
    (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, hmsc->bot_data, len);
 800570c:	697b      	ldr	r3, [r7, #20]
 800570e:	f103 0210 	add.w	r2, r3, #16
 8005712:	693b      	ldr	r3, [r7, #16]
 8005714:	2101      	movs	r1, #1
 8005716:	68f8      	ldr	r0, [r7, #12]
 8005718:	f002 f80d 	bl	8007736 <USBD_LL_PrepareReceive>
  else /* Write Process ongoing */
  {
    return SCSI_ProcessWrite(pdev, lun);
  }

  return 0;
 800571c:	2300      	movs	r3, #0
 800571e:	e005      	b.n	800572c <SCSI_Write10+0x182>
    return SCSI_ProcessWrite(pdev, lun);
 8005720:	7afb      	ldrb	r3, [r7, #11]
 8005722:	4619      	mov	r1, r3
 8005724:	68f8      	ldr	r0, [r7, #12]
 8005726:	f000 f9b4 	bl	8005a92 <SCSI_ProcessWrite>
 800572a:	4603      	mov	r3, r0
}
 800572c:	4618      	mov	r0, r3
 800572e:	3718      	adds	r7, #24
 8005730:	46bd      	mov	sp, r7
 8005732:	bd80      	pop	{r7, pc}

08005734 <SCSI_Write12>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Write12(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8005734:	b580      	push	{r7, lr}
 8005736:	b086      	sub	sp, #24
 8005738:	af00      	add	r7, sp, #0
 800573a:	60f8      	str	r0, [r7, #12]
 800573c:	460b      	mov	r3, r1
 800573e:	607a      	str	r2, [r7, #4]
 8005740:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005748:	617b      	str	r3, [r7, #20]
  uint32_t len;

  if (hmsc == NULL)
 800574a:	697b      	ldr	r3, [r7, #20]
 800574c:	2b00      	cmp	r3, #0
 800574e:	d102      	bne.n	8005756 <SCSI_Write12+0x22>
  {
    return -1;
 8005750:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005754:	e0bf      	b.n	80058d6 <SCSI_Write12+0x1a2>
  }

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 8005756:	697b      	ldr	r3, [r7, #20]
 8005758:	7a1b      	ldrb	r3, [r3, #8]
 800575a:	2b00      	cmp	r3, #0
 800575c:	f040 80b5 	bne.w	80058ca <SCSI_Write12+0x196>
  {
    if (hmsc->cbw.dDataLength == 0U)
 8005760:	697b      	ldr	r3, [r7, #20]
 8005762:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8005766:	2b00      	cmp	r3, #0
 8005768:	d10a      	bne.n	8005780 <SCSI_Write12+0x4c>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800576a:	697b      	ldr	r3, [r7, #20]
 800576c:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8005770:	2320      	movs	r3, #32
 8005772:	2205      	movs	r2, #5
 8005774:	68f8      	ldr	r0, [r7, #12]
 8005776:	f7ff fd0c 	bl	8005192 <SCSI_SenseCode>
      return -1;
 800577a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800577e:	e0aa      	b.n	80058d6 <SCSI_Write12+0x1a2>
    }

    /* case 8 : Hi <> Do */
    if ((hmsc->cbw.bmFlags & 0x80U) == 0x80U)
 8005780:	697b      	ldr	r3, [r7, #20]
 8005782:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 8005786:	b25b      	sxtb	r3, r3
 8005788:	2b00      	cmp	r3, #0
 800578a:	da0a      	bge.n	80057a2 <SCSI_Write12+0x6e>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800578c:	697b      	ldr	r3, [r7, #20]
 800578e:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8005792:	2320      	movs	r3, #32
 8005794:	2205      	movs	r2, #5
 8005796:	68f8      	ldr	r0, [r7, #12]
 8005798:	f7ff fcfb 	bl	8005192 <SCSI_SenseCode>
      return -1;
 800579c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80057a0:	e099      	b.n	80058d6 <SCSI_Write12+0x1a2>
    }

    /* Check whether Media is ready */
    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80057a8:	689b      	ldr	r3, [r3, #8]
 80057aa:	7afa      	ldrb	r2, [r7, #11]
 80057ac:	4610      	mov	r0, r2
 80057ae:	4798      	blx	r3
 80057b0:	4603      	mov	r3, r0
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d00b      	beq.n	80057ce <SCSI_Write12+0x9a>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 80057b6:	7af9      	ldrb	r1, [r7, #11]
 80057b8:	233a      	movs	r3, #58	; 0x3a
 80057ba:	2202      	movs	r2, #2
 80057bc:	68f8      	ldr	r0, [r7, #12]
 80057be:	f7ff fce8 	bl	8005192 <SCSI_SenseCode>
      hmsc->bot_state = USBD_BOT_NO_DATA;
 80057c2:	697b      	ldr	r3, [r7, #20]
 80057c4:	2205      	movs	r2, #5
 80057c6:	721a      	strb	r2, [r3, #8]
      return -1;
 80057c8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80057cc:	e083      	b.n	80058d6 <SCSI_Write12+0x1a2>
    }

    /* Check If media is write-protected */
    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsWriteProtected(lun) != 0)
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80057d4:	68db      	ldr	r3, [r3, #12]
 80057d6:	7afa      	ldrb	r2, [r7, #11]
 80057d8:	4610      	mov	r0, r2
 80057da:	4798      	blx	r3
 80057dc:	4603      	mov	r3, r0
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d00b      	beq.n	80057fa <SCSI_Write12+0xc6>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, WRITE_PROTECTED);
 80057e2:	7af9      	ldrb	r1, [r7, #11]
 80057e4:	2327      	movs	r3, #39	; 0x27
 80057e6:	2202      	movs	r2, #2
 80057e8:	68f8      	ldr	r0, [r7, #12]
 80057ea:	f7ff fcd2 	bl	8005192 <SCSI_SenseCode>
      hmsc->bot_state = USBD_BOT_NO_DATA;
 80057ee:	697b      	ldr	r3, [r7, #20]
 80057f0:	2205      	movs	r2, #5
 80057f2:	721a      	strb	r2, [r3, #8]
      return -1;
 80057f4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80057f8:	e06d      	b.n	80058d6 <SCSI_Write12+0x1a2>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	3302      	adds	r3, #2
 80057fe:	781b      	ldrb	r3, [r3, #0]
 8005800:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	3303      	adds	r3, #3
 8005806:	781b      	ldrb	r3, [r3, #0]
 8005808:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800580a:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] << 8) |
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	3304      	adds	r3, #4
 8005810:	781b      	ldrb	r3, [r3, #0]
 8005812:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 8005814:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 8005816:	687a      	ldr	r2, [r7, #4]
 8005818:	3205      	adds	r2, #5
 800581a:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] << 8) |
 800581c:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800581e:	697b      	ldr	r3, [r7, #20]
 8005820:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	3306      	adds	r3, #6
 8005828:	781b      	ldrb	r3, [r3, #0]
 800582a:	061a      	lsls	r2, r3, #24
                         ((uint32_t)params[7] << 16) |
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	3307      	adds	r3, #7
 8005830:	781b      	ldrb	r3, [r3, #0]
 8005832:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8005834:	431a      	orrs	r2, r3
                         ((uint32_t)params[8] << 8) |
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	3308      	adds	r3, #8
 800583a:	781b      	ldrb	r3, [r3, #0]
 800583c:	021b      	lsls	r3, r3, #8
                         ((uint32_t)params[7] << 16) |
 800583e:	4313      	orrs	r3, r2
                         (uint32_t)params[9];
 8005840:	687a      	ldr	r2, [r7, #4]
 8005842:	3209      	adds	r2, #9
 8005844:	7812      	ldrb	r2, [r2, #0]
                         ((uint32_t)params[8] << 8) |
 8005846:	431a      	orrs	r2, r3
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8005848:	697b      	ldr	r3, [r7, #20]
 800584a:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

    /* check if LBA address is in the right range */
    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 800584e:	697b      	ldr	r3, [r7, #20]
 8005850:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 8005854:	697b      	ldr	r3, [r7, #20]
 8005856:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800585a:	7af9      	ldrb	r1, [r7, #11]
 800585c:	68f8      	ldr	r0, [r7, #12]
 800585e:	f000 f877 	bl	8005950 <SCSI_CheckAddressRange>
 8005862:	4603      	mov	r3, r0
 8005864:	2b00      	cmp	r3, #0
 8005866:	da02      	bge.n	800586e <SCSI_Write12+0x13a>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 8005868:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800586c:	e033      	b.n	80058d6 <SCSI_Write12+0x1a2>
    }

    len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 800586e:	697b      	ldr	r3, [r7, #20]
 8005870:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8005874:	697a      	ldr	r2, [r7, #20]
 8005876:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 800587a:	fb02 f303 	mul.w	r3, r2, r3
 800587e:	613b      	str	r3, [r7, #16]

    /* cases 3,11,13 : Hn,Ho <> D0 */
    if (hmsc->cbw.dDataLength != len)
 8005880:	697b      	ldr	r3, [r7, #20]
 8005882:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8005886:	693a      	ldr	r2, [r7, #16]
 8005888:	429a      	cmp	r2, r3
 800588a:	d00a      	beq.n	80058a2 <SCSI_Write12+0x16e>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800588c:	697b      	ldr	r3, [r7, #20]
 800588e:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8005892:	2320      	movs	r3, #32
 8005894:	2205      	movs	r2, #5
 8005896:	68f8      	ldr	r0, [r7, #12]
 8005898:	f7ff fc7b 	bl	8005192 <SCSI_SenseCode>
      return -1;
 800589c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80058a0:	e019      	b.n	80058d6 <SCSI_Write12+0x1a2>
    }

    len = MIN(len, MSC_MEDIA_PACKET);
 80058a2:	693b      	ldr	r3, [r7, #16]
 80058a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80058a8:	bf28      	it	cs
 80058aa:	f44f 7300 	movcs.w	r3, #512	; 0x200
 80058ae:	613b      	str	r3, [r7, #16]

    /* Prepare EP to receive first data packet */
    hmsc->bot_state = USBD_BOT_DATA_OUT;
 80058b0:	697b      	ldr	r3, [r7, #20]
 80058b2:	2201      	movs	r2, #1
 80058b4:	721a      	strb	r2, [r3, #8]
    (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, hmsc->bot_data, len);
 80058b6:	697b      	ldr	r3, [r7, #20]
 80058b8:	f103 0210 	add.w	r2, r3, #16
 80058bc:	693b      	ldr	r3, [r7, #16]
 80058be:	2101      	movs	r1, #1
 80058c0:	68f8      	ldr	r0, [r7, #12]
 80058c2:	f001 ff38 	bl	8007736 <USBD_LL_PrepareReceive>
  else /* Write Process ongoing */
  {
    return SCSI_ProcessWrite(pdev, lun);
  }

  return 0;
 80058c6:	2300      	movs	r3, #0
 80058c8:	e005      	b.n	80058d6 <SCSI_Write12+0x1a2>
    return SCSI_ProcessWrite(pdev, lun);
 80058ca:	7afb      	ldrb	r3, [r7, #11]
 80058cc:	4619      	mov	r1, r3
 80058ce:	68f8      	ldr	r0, [r7, #12]
 80058d0:	f000 f8df 	bl	8005a92 <SCSI_ProcessWrite>
 80058d4:	4603      	mov	r3, r0
}
 80058d6:	4618      	mov	r0, r3
 80058d8:	3718      	adds	r7, #24
 80058da:	46bd      	mov	sp, r7
 80058dc:	bd80      	pop	{r7, pc}

080058de <SCSI_Verify10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Verify10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80058de:	b580      	push	{r7, lr}
 80058e0:	b086      	sub	sp, #24
 80058e2:	af00      	add	r7, sp, #0
 80058e4:	60f8      	str	r0, [r7, #12]
 80058e6:	460b      	mov	r3, r1
 80058e8:	607a      	str	r2, [r7, #4]
 80058ea:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80058f2:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 80058f4:	697b      	ldr	r3, [r7, #20]
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d102      	bne.n	8005900 <SCSI_Verify10+0x22>
  {
    return -1;
 80058fa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80058fe:	e023      	b.n	8005948 <SCSI_Verify10+0x6a>
  }

  if ((params[1] & 0x02U) == 0x02U)
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	3301      	adds	r3, #1
 8005904:	781b      	ldrb	r3, [r3, #0]
 8005906:	f003 0302 	and.w	r3, r3, #2
 800590a:	2b00      	cmp	r3, #0
 800590c:	d008      	beq.n	8005920 <SCSI_Verify10+0x42>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
 800590e:	7af9      	ldrb	r1, [r7, #11]
 8005910:	2324      	movs	r3, #36	; 0x24
 8005912:	2205      	movs	r2, #5
 8005914:	68f8      	ldr	r0, [r7, #12]
 8005916:	f7ff fc3c 	bl	8005192 <SCSI_SenseCode>
    return -1; /* Error, Verify Mode Not supported*/
 800591a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800591e:	e013      	b.n	8005948 <SCSI_Verify10+0x6a>
  }

  if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr, hmsc->scsi_blk_len) < 0)
 8005920:	697b      	ldr	r3, [r7, #20]
 8005922:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 8005926:	697b      	ldr	r3, [r7, #20]
 8005928:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800592c:	7af9      	ldrb	r1, [r7, #11]
 800592e:	68f8      	ldr	r0, [r7, #12]
 8005930:	f000 f80e 	bl	8005950 <SCSI_CheckAddressRange>
 8005934:	4603      	mov	r3, r0
 8005936:	2b00      	cmp	r3, #0
 8005938:	da02      	bge.n	8005940 <SCSI_Verify10+0x62>
  {
    return -1; /* error */
 800593a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800593e:	e003      	b.n	8005948 <SCSI_Verify10+0x6a>
  }

  hmsc->bot_data_length = 0U;
 8005940:	697b      	ldr	r3, [r7, #20]
 8005942:	2200      	movs	r2, #0
 8005944:	60da      	str	r2, [r3, #12]

  return 0;
 8005946:	2300      	movs	r3, #0
}
 8005948:	4618      	mov	r0, r3
 800594a:	3718      	adds	r7, #24
 800594c:	46bd      	mov	sp, r7
 800594e:	bd80      	pop	{r7, pc}

08005950 <SCSI_CheckAddressRange>:
  * @param  blk_nbr: number of block to be processed
  * @retval status
  */
static int8_t SCSI_CheckAddressRange(USBD_HandleTypeDef *pdev, uint8_t lun,
                                     uint32_t blk_offset, uint32_t blk_nbr)
{
 8005950:	b580      	push	{r7, lr}
 8005952:	b086      	sub	sp, #24
 8005954:	af00      	add	r7, sp, #0
 8005956:	60f8      	str	r0, [r7, #12]
 8005958:	607a      	str	r2, [r7, #4]
 800595a:	603b      	str	r3, [r7, #0]
 800595c:	460b      	mov	r3, r1
 800595e:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005966:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 8005968:	697b      	ldr	r3, [r7, #20]
 800596a:	2b00      	cmp	r3, #0
 800596c:	d102      	bne.n	8005974 <SCSI_CheckAddressRange+0x24>
  {
    return -1;
 800596e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005972:	e011      	b.n	8005998 <SCSI_CheckAddressRange+0x48>
  }

  if ((blk_offset + blk_nbr) > hmsc->scsi_blk_nbr)
 8005974:	687a      	ldr	r2, [r7, #4]
 8005976:	683b      	ldr	r3, [r7, #0]
 8005978:	441a      	add	r2, r3
 800597a:	697b      	ldr	r3, [r7, #20]
 800597c:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8005980:	429a      	cmp	r2, r3
 8005982:	d908      	bls.n	8005996 <SCSI_CheckAddressRange+0x46>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, ADDRESS_OUT_OF_RANGE);
 8005984:	7af9      	ldrb	r1, [r7, #11]
 8005986:	2321      	movs	r3, #33	; 0x21
 8005988:	2205      	movs	r2, #5
 800598a:	68f8      	ldr	r0, [r7, #12]
 800598c:	f7ff fc01 	bl	8005192 <SCSI_SenseCode>
    return -1;
 8005990:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005994:	e000      	b.n	8005998 <SCSI_CheckAddressRange+0x48>
  }

  return 0;
 8005996:	2300      	movs	r3, #0
}
 8005998:	4618      	mov	r0, r3
 800599a:	3718      	adds	r7, #24
 800599c:	46bd      	mov	sp, r7
 800599e:	bd80      	pop	{r7, pc}

080059a0 <SCSI_ProcessRead>:
  *         Handle Read Process
  * @param  lun: Logical unit number
  * @retval status
  */
static int8_t SCSI_ProcessRead(USBD_HandleTypeDef *pdev, uint8_t lun)
{
 80059a0:	b590      	push	{r4, r7, lr}
 80059a2:	b085      	sub	sp, #20
 80059a4:	af00      	add	r7, sp, #0
 80059a6:	6078      	str	r0, [r7, #4]
 80059a8:	460b      	mov	r3, r1
 80059aa:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80059b2:	60fb      	str	r3, [r7, #12]
  uint32_t len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 80059ba:	68fa      	ldr	r2, [r7, #12]
 80059bc:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 80059c0:	fb02 f303 	mul.w	r3, r2, r3
 80059c4:	60bb      	str	r3, [r7, #8]

  if (hmsc == NULL)
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d102      	bne.n	80059d2 <SCSI_ProcessRead+0x32>
  {
    return -1;
 80059cc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80059d0:	e05b      	b.n	8005a8a <SCSI_ProcessRead+0xea>
  }

  len = MIN(len, MSC_MEDIA_PACKET);
 80059d2:	68bb      	ldr	r3, [r7, #8]
 80059d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80059d8:	bf28      	it	cs
 80059da:	f44f 7300 	movcs.w	r3, #512	; 0x200
 80059de:	60bb      	str	r3, [r7, #8]

  if (((USBD_StorageTypeDef *)pdev->pUserData)->Read(lun, hmsc->bot_data,
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80059e6:	691c      	ldr	r4, [r3, #16]
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	f103 0110 	add.w	r1, r3, #16
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
                                                     hmsc->scsi_blk_addr,
                                                     (len / hmsc->scsi_blk_size)) < 0)
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 80059fa:	4618      	mov	r0, r3
 80059fc:	68bb      	ldr	r3, [r7, #8]
 80059fe:	fbb3 f3f0 	udiv	r3, r3, r0
  if (((USBD_StorageTypeDef *)pdev->pUserData)->Read(lun, hmsc->bot_data,
 8005a02:	b29b      	uxth	r3, r3
 8005a04:	78f8      	ldrb	r0, [r7, #3]
 8005a06:	47a0      	blx	r4
 8005a08:	4603      	mov	r3, r0
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	da08      	bge.n	8005a20 <SCSI_ProcessRead+0x80>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, UNRECOVERED_READ_ERROR);
 8005a0e:	78f9      	ldrb	r1, [r7, #3]
 8005a10:	2311      	movs	r3, #17
 8005a12:	2204      	movs	r2, #4
 8005a14:	6878      	ldr	r0, [r7, #4]
 8005a16:	f7ff fbbc 	bl	8005192 <SCSI_SenseCode>
    return -1;
 8005a1a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005a1e:	e034      	b.n	8005a8a <SCSI_ProcessRead+0xea>
  }

  (void)USBD_LL_Transmit(pdev, MSC_EPIN_ADDR, hmsc->bot_data, len);
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	f103 0210 	add.w	r2, r3, #16
 8005a26:	68bb      	ldr	r3, [r7, #8]
 8005a28:	2181      	movs	r1, #129	; 0x81
 8005a2a:	6878      	ldr	r0, [r7, #4]
 8005a2c:	f001 fe62 	bl	80076f4 <USBD_LL_Transmit>

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8005a3c:	4619      	mov	r1, r3
 8005a3e:	68bb      	ldr	r3, [r7, #8]
 8005a40:	fbb3 f3f1 	udiv	r3, r3, r1
 8005a44:	441a      	add	r2, r3
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	f8d3 2270 	ldr.w	r2, [r3, #624]	; 0x270
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8005a58:	4619      	mov	r1, r3
 8005a5a:	68bb      	ldr	r3, [r7, #8]
 8005a5c:	fbb3 f3f1 	udiv	r3, r3, r1
 8005a60:	1ad2      	subs	r2, r2, r3
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

  /* case 6 : Hi = Di */
  hmsc->csw.dDataResidue -= len;
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	f8d3 2238 	ldr.w	r2, [r3, #568]	; 0x238
 8005a6e:	68bb      	ldr	r3, [r7, #8]
 8005a70:	1ad2      	subs	r2, r2, r3
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	f8c3 2238 	str.w	r2, [r3, #568]	; 0x238

  if (hmsc->scsi_blk_len == 0U)
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d102      	bne.n	8005a88 <SCSI_ProcessRead+0xe8>
  {
    hmsc->bot_state = USBD_BOT_LAST_DATA_IN;
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	2203      	movs	r2, #3
 8005a86:	721a      	strb	r2, [r3, #8]
  }

  return 0;
 8005a88:	2300      	movs	r3, #0
}
 8005a8a:	4618      	mov	r0, r3
 8005a8c:	3714      	adds	r7, #20
 8005a8e:	46bd      	mov	sp, r7
 8005a90:	bd90      	pop	{r4, r7, pc}

08005a92 <SCSI_ProcessWrite>:
  *         Handle Write Process
  * @param  lun: Logical unit number
  * @retval status
  */
static int8_t SCSI_ProcessWrite(USBD_HandleTypeDef *pdev, uint8_t lun)
{
 8005a92:	b590      	push	{r4, r7, lr}
 8005a94:	b085      	sub	sp, #20
 8005a96:	af00      	add	r7, sp, #0
 8005a98:	6078      	str	r0, [r7, #4]
 8005a9a:	460b      	mov	r3, r1
 8005a9c:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005aa4:	60fb      	str	r3, [r7, #12]
  uint32_t len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8005aac:	68fa      	ldr	r2, [r7, #12]
 8005aae:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 8005ab2:	fb02 f303 	mul.w	r3, r2, r3
 8005ab6:	60bb      	str	r3, [r7, #8]

  if (hmsc == NULL)
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d102      	bne.n	8005ac4 <SCSI_ProcessWrite+0x32>
  {
    return -1;
 8005abe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005ac2:	e06b      	b.n	8005b9c <SCSI_ProcessWrite+0x10a>
  }

  len = MIN(len, MSC_MEDIA_PACKET);
 8005ac4:	68bb      	ldr	r3, [r7, #8]
 8005ac6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005aca:	bf28      	it	cs
 8005acc:	f44f 7300 	movcs.w	r3, #512	; 0x200
 8005ad0:	60bb      	str	r3, [r7, #8]

  if (((USBD_StorageTypeDef *)pdev->pUserData)->Write(lun, hmsc->bot_data,
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005ad8:	695c      	ldr	r4, [r3, #20]
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	f103 0110 	add.w	r1, r3, #16
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
                                                      hmsc->scsi_blk_addr,
                                                      (len / hmsc->scsi_blk_size)) < 0)
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8005aec:	4618      	mov	r0, r3
 8005aee:	68bb      	ldr	r3, [r7, #8]
 8005af0:	fbb3 f3f0 	udiv	r3, r3, r0
  if (((USBD_StorageTypeDef *)pdev->pUserData)->Write(lun, hmsc->bot_data,
 8005af4:	b29b      	uxth	r3, r3
 8005af6:	78f8      	ldrb	r0, [r7, #3]
 8005af8:	47a0      	blx	r4
 8005afa:	4603      	mov	r3, r0
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	da08      	bge.n	8005b12 <SCSI_ProcessWrite+0x80>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, WRITE_FAULT);
 8005b00:	78f9      	ldrb	r1, [r7, #3]
 8005b02:	2303      	movs	r3, #3
 8005b04:	2204      	movs	r2, #4
 8005b06:	6878      	ldr	r0, [r7, #4]
 8005b08:	f7ff fb43 	bl	8005192 <SCSI_SenseCode>
    return -1;
 8005b0c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005b10:	e044      	b.n	8005b9c <SCSI_ProcessWrite+0x10a>
  }

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8005b1e:	4619      	mov	r1, r3
 8005b20:	68bb      	ldr	r3, [r7, #8]
 8005b22:	fbb3 f3f1 	udiv	r3, r3, r1
 8005b26:	441a      	add	r2, r3
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	f8d3 2270 	ldr.w	r2, [r3, #624]	; 0x270
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8005b3a:	4619      	mov	r1, r3
 8005b3c:	68bb      	ldr	r3, [r7, #8]
 8005b3e:	fbb3 f3f1 	udiv	r3, r3, r1
 8005b42:	1ad2      	subs	r2, r2, r3
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

  /* case 12 : Ho = Do */
  hmsc->csw.dDataResidue -= len;
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	f8d3 2238 	ldr.w	r2, [r3, #568]	; 0x238
 8005b50:	68bb      	ldr	r3, [r7, #8]
 8005b52:	1ad2      	subs	r2, r2, r3
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	f8c3 2238 	str.w	r2, [r3, #568]	; 0x238

  if (hmsc->scsi_blk_len == 0U)
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d104      	bne.n	8005b6e <SCSI_ProcessWrite+0xdc>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 8005b64:	2100      	movs	r1, #0
 8005b66:	6878      	ldr	r0, [r7, #4]
 8005b68:	f7fe fdd8 	bl	800471c <MSC_BOT_SendCSW>
 8005b6c:	e015      	b.n	8005b9a <SCSI_ProcessWrite+0x108>
  }
  else
  {
    len = MIN((hmsc->scsi_blk_len * hmsc->scsi_blk_size), MSC_MEDIA_PACKET);
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8005b74:	68fa      	ldr	r2, [r7, #12]
 8005b76:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 8005b7a:	fb02 f303 	mul.w	r3, r2, r3
 8005b7e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005b82:	bf28      	it	cs
 8005b84:	f44f 7300 	movcs.w	r3, #512	; 0x200
 8005b88:	60bb      	str	r3, [r7, #8]

    /* Prepare EP to Receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, hmsc->bot_data, len);
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	f103 0210 	add.w	r2, r3, #16
 8005b90:	68bb      	ldr	r3, [r7, #8]
 8005b92:	2101      	movs	r1, #1
 8005b94:	6878      	ldr	r0, [r7, #4]
 8005b96:	f001 fdce 	bl	8007736 <USBD_LL_PrepareReceive>
  }

  return 0;
 8005b9a:	2300      	movs	r3, #0
}
 8005b9c:	4618      	mov	r0, r3
 8005b9e:	3714      	adds	r7, #20
 8005ba0:	46bd      	mov	sp, r7
 8005ba2:	bd90      	pop	{r4, r7, pc}

08005ba4 <SCSI_UpdateBotData>:
  * @param  length: Data length
  * @retval status
  */
static int8_t SCSI_UpdateBotData(USBD_MSC_BOT_HandleTypeDef *hmsc,
                                 uint8_t *pBuff, uint16_t length)
{
 8005ba4:	b480      	push	{r7}
 8005ba6:	b087      	sub	sp, #28
 8005ba8:	af00      	add	r7, sp, #0
 8005baa:	60f8      	str	r0, [r7, #12]
 8005bac:	60b9      	str	r1, [r7, #8]
 8005bae:	4613      	mov	r3, r2
 8005bb0:	80fb      	strh	r3, [r7, #6]
  uint16_t len = length;
 8005bb2:	88fb      	ldrh	r3, [r7, #6]
 8005bb4:	82fb      	strh	r3, [r7, #22]

  if (hmsc == NULL)
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d102      	bne.n	8005bc2 <SCSI_UpdateBotData+0x1e>
  {
    return -1;
 8005bbc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005bc0:	e013      	b.n	8005bea <SCSI_UpdateBotData+0x46>
  }

  hmsc->bot_data_length = len;
 8005bc2:	8afa      	ldrh	r2, [r7, #22]
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	60da      	str	r2, [r3, #12]

  while (len != 0U)
 8005bc8:	e00b      	b.n	8005be2 <SCSI_UpdateBotData+0x3e>
  {
    len--;
 8005bca:	8afb      	ldrh	r3, [r7, #22]
 8005bcc:	3b01      	subs	r3, #1
 8005bce:	82fb      	strh	r3, [r7, #22]
    hmsc->bot_data[len] = pBuff[len];
 8005bd0:	8afb      	ldrh	r3, [r7, #22]
 8005bd2:	68ba      	ldr	r2, [r7, #8]
 8005bd4:	441a      	add	r2, r3
 8005bd6:	8afb      	ldrh	r3, [r7, #22]
 8005bd8:	7811      	ldrb	r1, [r2, #0]
 8005bda:	68fa      	ldr	r2, [r7, #12]
 8005bdc:	4413      	add	r3, r2
 8005bde:	460a      	mov	r2, r1
 8005be0:	741a      	strb	r2, [r3, #16]
  while (len != 0U)
 8005be2:	8afb      	ldrh	r3, [r7, #22]
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d1f0      	bne.n	8005bca <SCSI_UpdateBotData+0x26>
  }

  return 0;
 8005be8:	2300      	movs	r3, #0
}
 8005bea:	4618      	mov	r0, r3
 8005bec:	371c      	adds	r7, #28
 8005bee:	46bd      	mov	sp, r7
 8005bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf4:	4770      	bx	lr

08005bf6 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8005bf6:	b580      	push	{r7, lr}
 8005bf8:	b086      	sub	sp, #24
 8005bfa:	af00      	add	r7, sp, #0
 8005bfc:	60f8      	str	r0, [r7, #12]
 8005bfe:	60b9      	str	r1, [r7, #8]
 8005c00:	4613      	mov	r3, r2
 8005c02:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d101      	bne.n	8005c0e <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8005c0a:	2303      	movs	r3, #3
 8005c0c:	e01f      	b.n	8005c4e <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	2200      	movs	r2, #0
 8005c12:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	2200      	movs	r2, #0
 8005c1a:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	2200      	movs	r2, #0
 8005c22:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8005c26:	68bb      	ldr	r3, [r7, #8]
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d003      	beq.n	8005c34 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	68ba      	ldr	r2, [r7, #8]
 8005c30:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	2201      	movs	r2, #1
 8005c38:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	79fa      	ldrb	r2, [r7, #7]
 8005c40:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8005c42:	68f8      	ldr	r0, [r7, #12]
 8005c44:	f001 fc02 	bl	800744c <USBD_LL_Init>
 8005c48:	4603      	mov	r3, r0
 8005c4a:	75fb      	strb	r3, [r7, #23]

  return ret;
 8005c4c:	7dfb      	ldrb	r3, [r7, #23]
}
 8005c4e:	4618      	mov	r0, r3
 8005c50:	3718      	adds	r7, #24
 8005c52:	46bd      	mov	sp, r7
 8005c54:	bd80      	pop	{r7, pc}

08005c56 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8005c56:	b580      	push	{r7, lr}
 8005c58:	b084      	sub	sp, #16
 8005c5a:	af00      	add	r7, sp, #0
 8005c5c:	6078      	str	r0, [r7, #4]
 8005c5e:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8005c60:	2300      	movs	r3, #0
 8005c62:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8005c64:	683b      	ldr	r3, [r7, #0]
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d101      	bne.n	8005c6e <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8005c6a:	2303      	movs	r3, #3
 8005c6c:	e016      	b.n	8005c9c <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	683a      	ldr	r2, [r7, #0]
 8005c72:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005c7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d00b      	beq.n	8005c9a <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005c88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c8a:	f107 020e 	add.w	r2, r7, #14
 8005c8e:	4610      	mov	r0, r2
 8005c90:	4798      	blx	r3
 8005c92:	4602      	mov	r2, r0
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8005c9a:	2300      	movs	r3, #0
}
 8005c9c:	4618      	mov	r0, r3
 8005c9e:	3710      	adds	r7, #16
 8005ca0:	46bd      	mov	sp, r7
 8005ca2:	bd80      	pop	{r7, pc}

08005ca4 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8005ca4:	b580      	push	{r7, lr}
 8005ca6:	b082      	sub	sp, #8
 8005ca8:	af00      	add	r7, sp, #0
 8005caa:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8005cac:	6878      	ldr	r0, [r7, #4]
 8005cae:	f001 fc19 	bl	80074e4 <USBD_LL_Start>
 8005cb2:	4603      	mov	r3, r0
}
 8005cb4:	4618      	mov	r0, r3
 8005cb6:	3708      	adds	r7, #8
 8005cb8:	46bd      	mov	sp, r7
 8005cba:	bd80      	pop	{r7, pc}

08005cbc <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8005cbc:	b480      	push	{r7}
 8005cbe:	b083      	sub	sp, #12
 8005cc0:	af00      	add	r7, sp, #0
 8005cc2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005cc4:	2300      	movs	r3, #0
}
 8005cc6:	4618      	mov	r0, r3
 8005cc8:	370c      	adds	r7, #12
 8005cca:	46bd      	mov	sp, r7
 8005ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd0:	4770      	bx	lr

08005cd2 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005cd2:	b580      	push	{r7, lr}
 8005cd4:	b084      	sub	sp, #16
 8005cd6:	af00      	add	r7, sp, #0
 8005cd8:	6078      	str	r0, [r7, #4]
 8005cda:	460b      	mov	r3, r1
 8005cdc:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8005cde:	2303      	movs	r3, #3
 8005ce0:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d009      	beq.n	8005d00 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	78fa      	ldrb	r2, [r7, #3]
 8005cf6:	4611      	mov	r1, r2
 8005cf8:	6878      	ldr	r0, [r7, #4]
 8005cfa:	4798      	blx	r3
 8005cfc:	4603      	mov	r3, r0
 8005cfe:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8005d00:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d02:	4618      	mov	r0, r3
 8005d04:	3710      	adds	r7, #16
 8005d06:	46bd      	mov	sp, r7
 8005d08:	bd80      	pop	{r7, pc}

08005d0a <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005d0a:	b580      	push	{r7, lr}
 8005d0c:	b082      	sub	sp, #8
 8005d0e:	af00      	add	r7, sp, #0
 8005d10:	6078      	str	r0, [r7, #4]
 8005d12:	460b      	mov	r3, r1
 8005d14:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d007      	beq.n	8005d30 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005d26:	685b      	ldr	r3, [r3, #4]
 8005d28:	78fa      	ldrb	r2, [r7, #3]
 8005d2a:	4611      	mov	r1, r2
 8005d2c:	6878      	ldr	r0, [r7, #4]
 8005d2e:	4798      	blx	r3
  }

  return USBD_OK;
 8005d30:	2300      	movs	r3, #0
}
 8005d32:	4618      	mov	r0, r3
 8005d34:	3708      	adds	r7, #8
 8005d36:	46bd      	mov	sp, r7
 8005d38:	bd80      	pop	{r7, pc}

08005d3a <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8005d3a:	b580      	push	{r7, lr}
 8005d3c:	b084      	sub	sp, #16
 8005d3e:	af00      	add	r7, sp, #0
 8005d40:	6078      	str	r0, [r7, #4]
 8005d42:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005d4a:	6839      	ldr	r1, [r7, #0]
 8005d4c:	4618      	mov	r0, r3
 8005d4e:	f000 ff8f 	bl	8006c70 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	2201      	movs	r2, #1
 8005d56:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8005d60:	461a      	mov	r2, r3
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8005d6e:	f003 031f 	and.w	r3, r3, #31
 8005d72:	2b02      	cmp	r3, #2
 8005d74:	d01a      	beq.n	8005dac <USBD_LL_SetupStage+0x72>
 8005d76:	2b02      	cmp	r3, #2
 8005d78:	d822      	bhi.n	8005dc0 <USBD_LL_SetupStage+0x86>
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d002      	beq.n	8005d84 <USBD_LL_SetupStage+0x4a>
 8005d7e:	2b01      	cmp	r3, #1
 8005d80:	d00a      	beq.n	8005d98 <USBD_LL_SetupStage+0x5e>
 8005d82:	e01d      	b.n	8005dc0 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005d8a:	4619      	mov	r1, r3
 8005d8c:	6878      	ldr	r0, [r7, #4]
 8005d8e:	f000 fa61 	bl	8006254 <USBD_StdDevReq>
 8005d92:	4603      	mov	r3, r0
 8005d94:	73fb      	strb	r3, [r7, #15]
      break;
 8005d96:	e020      	b.n	8005dda <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005d9e:	4619      	mov	r1, r3
 8005da0:	6878      	ldr	r0, [r7, #4]
 8005da2:	f000 fac5 	bl	8006330 <USBD_StdItfReq>
 8005da6:	4603      	mov	r3, r0
 8005da8:	73fb      	strb	r3, [r7, #15]
      break;
 8005daa:	e016      	b.n	8005dda <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005db2:	4619      	mov	r1, r3
 8005db4:	6878      	ldr	r0, [r7, #4]
 8005db6:	f000 fb04 	bl	80063c2 <USBD_StdEPReq>
 8005dba:	4603      	mov	r3, r0
 8005dbc:	73fb      	strb	r3, [r7, #15]
      break;
 8005dbe:	e00c      	b.n	8005dda <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8005dc6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005dca:	b2db      	uxtb	r3, r3
 8005dcc:	4619      	mov	r1, r3
 8005dce:	6878      	ldr	r0, [r7, #4]
 8005dd0:	f001 fc07 	bl	80075e2 <USBD_LL_StallEP>
 8005dd4:	4603      	mov	r3, r0
 8005dd6:	73fb      	strb	r3, [r7, #15]
      break;
 8005dd8:	bf00      	nop
  }

  return ret;
 8005dda:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ddc:	4618      	mov	r0, r3
 8005dde:	3710      	adds	r7, #16
 8005de0:	46bd      	mov	sp, r7
 8005de2:	bd80      	pop	{r7, pc}

08005de4 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8005de4:	b580      	push	{r7, lr}
 8005de6:	b086      	sub	sp, #24
 8005de8:	af00      	add	r7, sp, #0
 8005dea:	60f8      	str	r0, [r7, #12]
 8005dec:	460b      	mov	r3, r1
 8005dee:	607a      	str	r2, [r7, #4]
 8005df0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8005df2:	7afb      	ldrb	r3, [r7, #11]
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d138      	bne.n	8005e6a <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8005dfe:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005e06:	2b03      	cmp	r3, #3
 8005e08:	d14a      	bne.n	8005ea0 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8005e0a:	693b      	ldr	r3, [r7, #16]
 8005e0c:	689a      	ldr	r2, [r3, #8]
 8005e0e:	693b      	ldr	r3, [r7, #16]
 8005e10:	68db      	ldr	r3, [r3, #12]
 8005e12:	429a      	cmp	r2, r3
 8005e14:	d913      	bls.n	8005e3e <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8005e16:	693b      	ldr	r3, [r7, #16]
 8005e18:	689a      	ldr	r2, [r3, #8]
 8005e1a:	693b      	ldr	r3, [r7, #16]
 8005e1c:	68db      	ldr	r3, [r3, #12]
 8005e1e:	1ad2      	subs	r2, r2, r3
 8005e20:	693b      	ldr	r3, [r7, #16]
 8005e22:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8005e24:	693b      	ldr	r3, [r7, #16]
 8005e26:	68da      	ldr	r2, [r3, #12]
 8005e28:	693b      	ldr	r3, [r7, #16]
 8005e2a:	689b      	ldr	r3, [r3, #8]
 8005e2c:	4293      	cmp	r3, r2
 8005e2e:	bf28      	it	cs
 8005e30:	4613      	movcs	r3, r2
 8005e32:	461a      	mov	r2, r3
 8005e34:	6879      	ldr	r1, [r7, #4]
 8005e36:	68f8      	ldr	r0, [r7, #12]
 8005e38:	f000 fff1 	bl	8006e1e <USBD_CtlContinueRx>
 8005e3c:	e030      	b.n	8005ea0 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005e44:	b2db      	uxtb	r3, r3
 8005e46:	2b03      	cmp	r3, #3
 8005e48:	d10b      	bne.n	8005e62 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005e50:	691b      	ldr	r3, [r3, #16]
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d005      	beq.n	8005e62 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005e5c:	691b      	ldr	r3, [r3, #16]
 8005e5e:	68f8      	ldr	r0, [r7, #12]
 8005e60:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8005e62:	68f8      	ldr	r0, [r7, #12]
 8005e64:	f000 ffec 	bl	8006e40 <USBD_CtlSendStatus>
 8005e68:	e01a      	b.n	8005ea0 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005e70:	b2db      	uxtb	r3, r3
 8005e72:	2b03      	cmp	r3, #3
 8005e74:	d114      	bne.n	8005ea0 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005e7c:	699b      	ldr	r3, [r3, #24]
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d00e      	beq.n	8005ea0 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005e88:	699b      	ldr	r3, [r3, #24]
 8005e8a:	7afa      	ldrb	r2, [r7, #11]
 8005e8c:	4611      	mov	r1, r2
 8005e8e:	68f8      	ldr	r0, [r7, #12]
 8005e90:	4798      	blx	r3
 8005e92:	4603      	mov	r3, r0
 8005e94:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8005e96:	7dfb      	ldrb	r3, [r7, #23]
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d001      	beq.n	8005ea0 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 8005e9c:	7dfb      	ldrb	r3, [r7, #23]
 8005e9e:	e000      	b.n	8005ea2 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 8005ea0:	2300      	movs	r3, #0
}
 8005ea2:	4618      	mov	r0, r3
 8005ea4:	3718      	adds	r7, #24
 8005ea6:	46bd      	mov	sp, r7
 8005ea8:	bd80      	pop	{r7, pc}

08005eaa <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8005eaa:	b580      	push	{r7, lr}
 8005eac:	b086      	sub	sp, #24
 8005eae:	af00      	add	r7, sp, #0
 8005eb0:	60f8      	str	r0, [r7, #12]
 8005eb2:	460b      	mov	r3, r1
 8005eb4:	607a      	str	r2, [r7, #4]
 8005eb6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8005eb8:	7afb      	ldrb	r3, [r7, #11]
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d16b      	bne.n	8005f96 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	3314      	adds	r3, #20
 8005ec2:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005eca:	2b02      	cmp	r3, #2
 8005ecc:	d156      	bne.n	8005f7c <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 8005ece:	693b      	ldr	r3, [r7, #16]
 8005ed0:	689a      	ldr	r2, [r3, #8]
 8005ed2:	693b      	ldr	r3, [r7, #16]
 8005ed4:	68db      	ldr	r3, [r3, #12]
 8005ed6:	429a      	cmp	r2, r3
 8005ed8:	d914      	bls.n	8005f04 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8005eda:	693b      	ldr	r3, [r7, #16]
 8005edc:	689a      	ldr	r2, [r3, #8]
 8005ede:	693b      	ldr	r3, [r7, #16]
 8005ee0:	68db      	ldr	r3, [r3, #12]
 8005ee2:	1ad2      	subs	r2, r2, r3
 8005ee4:	693b      	ldr	r3, [r7, #16]
 8005ee6:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8005ee8:	693b      	ldr	r3, [r7, #16]
 8005eea:	689b      	ldr	r3, [r3, #8]
 8005eec:	461a      	mov	r2, r3
 8005eee:	6879      	ldr	r1, [r7, #4]
 8005ef0:	68f8      	ldr	r0, [r7, #12]
 8005ef2:	f000 ff83 	bl	8006dfc <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005ef6:	2300      	movs	r3, #0
 8005ef8:	2200      	movs	r2, #0
 8005efa:	2100      	movs	r1, #0
 8005efc:	68f8      	ldr	r0, [r7, #12]
 8005efe:	f001 fc1a 	bl	8007736 <USBD_LL_PrepareReceive>
 8005f02:	e03b      	b.n	8005f7c <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8005f04:	693b      	ldr	r3, [r7, #16]
 8005f06:	68da      	ldr	r2, [r3, #12]
 8005f08:	693b      	ldr	r3, [r7, #16]
 8005f0a:	689b      	ldr	r3, [r3, #8]
 8005f0c:	429a      	cmp	r2, r3
 8005f0e:	d11c      	bne.n	8005f4a <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8005f10:	693b      	ldr	r3, [r7, #16]
 8005f12:	685a      	ldr	r2, [r3, #4]
 8005f14:	693b      	ldr	r3, [r7, #16]
 8005f16:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8005f18:	429a      	cmp	r2, r3
 8005f1a:	d316      	bcc.n	8005f4a <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8005f1c:	693b      	ldr	r3, [r7, #16]
 8005f1e:	685a      	ldr	r2, [r3, #4]
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8005f26:	429a      	cmp	r2, r3
 8005f28:	d20f      	bcs.n	8005f4a <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8005f2a:	2200      	movs	r2, #0
 8005f2c:	2100      	movs	r1, #0
 8005f2e:	68f8      	ldr	r0, [r7, #12]
 8005f30:	f000 ff64 	bl	8006dfc <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	2200      	movs	r2, #0
 8005f38:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005f3c:	2300      	movs	r3, #0
 8005f3e:	2200      	movs	r2, #0
 8005f40:	2100      	movs	r1, #0
 8005f42:	68f8      	ldr	r0, [r7, #12]
 8005f44:	f001 fbf7 	bl	8007736 <USBD_LL_PrepareReceive>
 8005f48:	e018      	b.n	8005f7c <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005f50:	b2db      	uxtb	r3, r3
 8005f52:	2b03      	cmp	r3, #3
 8005f54:	d10b      	bne.n	8005f6e <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005f5c:	68db      	ldr	r3, [r3, #12]
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d005      	beq.n	8005f6e <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005f68:	68db      	ldr	r3, [r3, #12]
 8005f6a:	68f8      	ldr	r0, [r7, #12]
 8005f6c:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8005f6e:	2180      	movs	r1, #128	; 0x80
 8005f70:	68f8      	ldr	r0, [r7, #12]
 8005f72:	f001 fb36 	bl	80075e2 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8005f76:	68f8      	ldr	r0, [r7, #12]
 8005f78:	f000 ff75 	bl	8006e66 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8005f82:	2b01      	cmp	r3, #1
 8005f84:	d122      	bne.n	8005fcc <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8005f86:	68f8      	ldr	r0, [r7, #12]
 8005f88:	f7ff fe98 	bl	8005cbc <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	2200      	movs	r2, #0
 8005f90:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8005f94:	e01a      	b.n	8005fcc <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005f9c:	b2db      	uxtb	r3, r3
 8005f9e:	2b03      	cmp	r3, #3
 8005fa0:	d114      	bne.n	8005fcc <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005fa8:	695b      	ldr	r3, [r3, #20]
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d00e      	beq.n	8005fcc <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005fb4:	695b      	ldr	r3, [r3, #20]
 8005fb6:	7afa      	ldrb	r2, [r7, #11]
 8005fb8:	4611      	mov	r1, r2
 8005fba:	68f8      	ldr	r0, [r7, #12]
 8005fbc:	4798      	blx	r3
 8005fbe:	4603      	mov	r3, r0
 8005fc0:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8005fc2:	7dfb      	ldrb	r3, [r7, #23]
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d001      	beq.n	8005fcc <USBD_LL_DataInStage+0x122>
        {
          return ret;
 8005fc8:	7dfb      	ldrb	r3, [r7, #23]
 8005fca:	e000      	b.n	8005fce <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 8005fcc:	2300      	movs	r3, #0
}
 8005fce:	4618      	mov	r0, r3
 8005fd0:	3718      	adds	r7, #24
 8005fd2:	46bd      	mov	sp, r7
 8005fd4:	bd80      	pop	{r7, pc}

08005fd6 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8005fd6:	b580      	push	{r7, lr}
 8005fd8:	b082      	sub	sp, #8
 8005fda:	af00      	add	r7, sp, #0
 8005fdc:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	2201      	movs	r2, #1
 8005fe2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	2200      	movs	r2, #0
 8005fea:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	2200      	movs	r2, #0
 8005ff2:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	2200      	movs	r2, #0
 8005ff8:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006002:	2b00      	cmp	r3, #0
 8006004:	d101      	bne.n	800600a <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 8006006:	2303      	movs	r3, #3
 8006008:	e02f      	b.n	800606a <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006010:	2b00      	cmp	r3, #0
 8006012:	d00f      	beq.n	8006034 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800601a:	685b      	ldr	r3, [r3, #4]
 800601c:	2b00      	cmp	r3, #0
 800601e:	d009      	beq.n	8006034 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006026:	685b      	ldr	r3, [r3, #4]
 8006028:	687a      	ldr	r2, [r7, #4]
 800602a:	6852      	ldr	r2, [r2, #4]
 800602c:	b2d2      	uxtb	r2, r2
 800602e:	4611      	mov	r1, r2
 8006030:	6878      	ldr	r0, [r7, #4]
 8006032:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006034:	2340      	movs	r3, #64	; 0x40
 8006036:	2200      	movs	r2, #0
 8006038:	2100      	movs	r1, #0
 800603a:	6878      	ldr	r0, [r7, #4]
 800603c:	f001 fa6d 	bl	800751a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	2201      	movs	r2, #1
 8006044:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	2240      	movs	r2, #64	; 0x40
 800604c:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006050:	2340      	movs	r3, #64	; 0x40
 8006052:	2200      	movs	r2, #0
 8006054:	2180      	movs	r1, #128	; 0x80
 8006056:	6878      	ldr	r0, [r7, #4]
 8006058:	f001 fa5f 	bl	800751a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	2201      	movs	r2, #1
 8006060:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	2240      	movs	r2, #64	; 0x40
 8006066:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8006068:	2300      	movs	r3, #0
}
 800606a:	4618      	mov	r0, r3
 800606c:	3708      	adds	r7, #8
 800606e:	46bd      	mov	sp, r7
 8006070:	bd80      	pop	{r7, pc}

08006072 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8006072:	b480      	push	{r7}
 8006074:	b083      	sub	sp, #12
 8006076:	af00      	add	r7, sp, #0
 8006078:	6078      	str	r0, [r7, #4]
 800607a:	460b      	mov	r3, r1
 800607c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	78fa      	ldrb	r2, [r7, #3]
 8006082:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8006084:	2300      	movs	r3, #0
}
 8006086:	4618      	mov	r0, r3
 8006088:	370c      	adds	r7, #12
 800608a:	46bd      	mov	sp, r7
 800608c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006090:	4770      	bx	lr

08006092 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8006092:	b480      	push	{r7}
 8006094:	b083      	sub	sp, #12
 8006096:	af00      	add	r7, sp, #0
 8006098:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80060a0:	b2da      	uxtb	r2, r3
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	2204      	movs	r2, #4
 80060ac:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80060b0:	2300      	movs	r3, #0
}
 80060b2:	4618      	mov	r0, r3
 80060b4:	370c      	adds	r7, #12
 80060b6:	46bd      	mov	sp, r7
 80060b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060bc:	4770      	bx	lr

080060be <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80060be:	b480      	push	{r7}
 80060c0:	b083      	sub	sp, #12
 80060c2:	af00      	add	r7, sp, #0
 80060c4:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80060cc:	b2db      	uxtb	r3, r3
 80060ce:	2b04      	cmp	r3, #4
 80060d0:	d106      	bne.n	80060e0 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 80060d8:	b2da      	uxtb	r2, r3
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80060e0:	2300      	movs	r3, #0
}
 80060e2:	4618      	mov	r0, r3
 80060e4:	370c      	adds	r7, #12
 80060e6:	46bd      	mov	sp, r7
 80060e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ec:	4770      	bx	lr

080060ee <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80060ee:	b580      	push	{r7, lr}
 80060f0:	b082      	sub	sp, #8
 80060f2:	af00      	add	r7, sp, #0
 80060f4:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d101      	bne.n	8006104 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 8006100:	2303      	movs	r3, #3
 8006102:	e012      	b.n	800612a <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800610a:	b2db      	uxtb	r3, r3
 800610c:	2b03      	cmp	r3, #3
 800610e:	d10b      	bne.n	8006128 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006116:	69db      	ldr	r3, [r3, #28]
 8006118:	2b00      	cmp	r3, #0
 800611a:	d005      	beq.n	8006128 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006122:	69db      	ldr	r3, [r3, #28]
 8006124:	6878      	ldr	r0, [r7, #4]
 8006126:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006128:	2300      	movs	r3, #0
}
 800612a:	4618      	mov	r0, r3
 800612c:	3708      	adds	r7, #8
 800612e:	46bd      	mov	sp, r7
 8006130:	bd80      	pop	{r7, pc}

08006132 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8006132:	b580      	push	{r7, lr}
 8006134:	b082      	sub	sp, #8
 8006136:	af00      	add	r7, sp, #0
 8006138:	6078      	str	r0, [r7, #4]
 800613a:	460b      	mov	r3, r1
 800613c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006144:	2b00      	cmp	r3, #0
 8006146:	d101      	bne.n	800614c <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 8006148:	2303      	movs	r3, #3
 800614a:	e014      	b.n	8006176 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006152:	b2db      	uxtb	r3, r3
 8006154:	2b03      	cmp	r3, #3
 8006156:	d10d      	bne.n	8006174 <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800615e:	6a1b      	ldr	r3, [r3, #32]
 8006160:	2b00      	cmp	r3, #0
 8006162:	d007      	beq.n	8006174 <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800616a:	6a1b      	ldr	r3, [r3, #32]
 800616c:	78fa      	ldrb	r2, [r7, #3]
 800616e:	4611      	mov	r1, r2
 8006170:	6878      	ldr	r0, [r7, #4]
 8006172:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006174:	2300      	movs	r3, #0
}
 8006176:	4618      	mov	r0, r3
 8006178:	3708      	adds	r7, #8
 800617a:	46bd      	mov	sp, r7
 800617c:	bd80      	pop	{r7, pc}

0800617e <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800617e:	b580      	push	{r7, lr}
 8006180:	b082      	sub	sp, #8
 8006182:	af00      	add	r7, sp, #0
 8006184:	6078      	str	r0, [r7, #4]
 8006186:	460b      	mov	r3, r1
 8006188:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006190:	2b00      	cmp	r3, #0
 8006192:	d101      	bne.n	8006198 <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 8006194:	2303      	movs	r3, #3
 8006196:	e014      	b.n	80061c2 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800619e:	b2db      	uxtb	r3, r3
 80061a0:	2b03      	cmp	r3, #3
 80061a2:	d10d      	bne.n	80061c0 <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80061aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d007      	beq.n	80061c0 <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80061b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061b8:	78fa      	ldrb	r2, [r7, #3]
 80061ba:	4611      	mov	r1, r2
 80061bc:	6878      	ldr	r0, [r7, #4]
 80061be:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80061c0:	2300      	movs	r3, #0
}
 80061c2:	4618      	mov	r0, r3
 80061c4:	3708      	adds	r7, #8
 80061c6:	46bd      	mov	sp, r7
 80061c8:	bd80      	pop	{r7, pc}

080061ca <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80061ca:	b480      	push	{r7}
 80061cc:	b083      	sub	sp, #12
 80061ce:	af00      	add	r7, sp, #0
 80061d0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80061d2:	2300      	movs	r3, #0
}
 80061d4:	4618      	mov	r0, r3
 80061d6:	370c      	adds	r7, #12
 80061d8:	46bd      	mov	sp, r7
 80061da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061de:	4770      	bx	lr

080061e0 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80061e0:	b580      	push	{r7, lr}
 80061e2:	b082      	sub	sp, #8
 80061e4:	af00      	add	r7, sp, #0
 80061e6:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	2201      	movs	r2, #1
 80061ec:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d009      	beq.n	800620e <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006200:	685b      	ldr	r3, [r3, #4]
 8006202:	687a      	ldr	r2, [r7, #4]
 8006204:	6852      	ldr	r2, [r2, #4]
 8006206:	b2d2      	uxtb	r2, r2
 8006208:	4611      	mov	r1, r2
 800620a:	6878      	ldr	r0, [r7, #4]
 800620c:	4798      	blx	r3
  }

  return USBD_OK;
 800620e:	2300      	movs	r3, #0
}
 8006210:	4618      	mov	r0, r3
 8006212:	3708      	adds	r7, #8
 8006214:	46bd      	mov	sp, r7
 8006216:	bd80      	pop	{r7, pc}

08006218 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8006218:	b480      	push	{r7}
 800621a:	b087      	sub	sp, #28
 800621c:	af00      	add	r7, sp, #0
 800621e:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8006224:	697b      	ldr	r3, [r7, #20]
 8006226:	781b      	ldrb	r3, [r3, #0]
 8006228:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800622a:	697b      	ldr	r3, [r7, #20]
 800622c:	3301      	adds	r3, #1
 800622e:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8006230:	697b      	ldr	r3, [r7, #20]
 8006232:	781b      	ldrb	r3, [r3, #0]
 8006234:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8006236:	8a3b      	ldrh	r3, [r7, #16]
 8006238:	021b      	lsls	r3, r3, #8
 800623a:	b21a      	sxth	r2, r3
 800623c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8006240:	4313      	orrs	r3, r2
 8006242:	b21b      	sxth	r3, r3
 8006244:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8006246:	89fb      	ldrh	r3, [r7, #14]
}
 8006248:	4618      	mov	r0, r3
 800624a:	371c      	adds	r7, #28
 800624c:	46bd      	mov	sp, r7
 800624e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006252:	4770      	bx	lr

08006254 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006254:	b580      	push	{r7, lr}
 8006256:	b084      	sub	sp, #16
 8006258:	af00      	add	r7, sp, #0
 800625a:	6078      	str	r0, [r7, #4]
 800625c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800625e:	2300      	movs	r3, #0
 8006260:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006262:	683b      	ldr	r3, [r7, #0]
 8006264:	781b      	ldrb	r3, [r3, #0]
 8006266:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800626a:	2b40      	cmp	r3, #64	; 0x40
 800626c:	d005      	beq.n	800627a <USBD_StdDevReq+0x26>
 800626e:	2b40      	cmp	r3, #64	; 0x40
 8006270:	d853      	bhi.n	800631a <USBD_StdDevReq+0xc6>
 8006272:	2b00      	cmp	r3, #0
 8006274:	d00b      	beq.n	800628e <USBD_StdDevReq+0x3a>
 8006276:	2b20      	cmp	r3, #32
 8006278:	d14f      	bne.n	800631a <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006280:	689b      	ldr	r3, [r3, #8]
 8006282:	6839      	ldr	r1, [r7, #0]
 8006284:	6878      	ldr	r0, [r7, #4]
 8006286:	4798      	blx	r3
 8006288:	4603      	mov	r3, r0
 800628a:	73fb      	strb	r3, [r7, #15]
      break;
 800628c:	e04a      	b.n	8006324 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800628e:	683b      	ldr	r3, [r7, #0]
 8006290:	785b      	ldrb	r3, [r3, #1]
 8006292:	2b09      	cmp	r3, #9
 8006294:	d83b      	bhi.n	800630e <USBD_StdDevReq+0xba>
 8006296:	a201      	add	r2, pc, #4	; (adr r2, 800629c <USBD_StdDevReq+0x48>)
 8006298:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800629c:	080062f1 	.word	0x080062f1
 80062a0:	08006305 	.word	0x08006305
 80062a4:	0800630f 	.word	0x0800630f
 80062a8:	080062fb 	.word	0x080062fb
 80062ac:	0800630f 	.word	0x0800630f
 80062b0:	080062cf 	.word	0x080062cf
 80062b4:	080062c5 	.word	0x080062c5
 80062b8:	0800630f 	.word	0x0800630f
 80062bc:	080062e7 	.word	0x080062e7
 80062c0:	080062d9 	.word	0x080062d9
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80062c4:	6839      	ldr	r1, [r7, #0]
 80062c6:	6878      	ldr	r0, [r7, #4]
 80062c8:	f000 f9de 	bl	8006688 <USBD_GetDescriptor>
          break;
 80062cc:	e024      	b.n	8006318 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80062ce:	6839      	ldr	r1, [r7, #0]
 80062d0:	6878      	ldr	r0, [r7, #4]
 80062d2:	f000 fb43 	bl	800695c <USBD_SetAddress>
          break;
 80062d6:	e01f      	b.n	8006318 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80062d8:	6839      	ldr	r1, [r7, #0]
 80062da:	6878      	ldr	r0, [r7, #4]
 80062dc:	f000 fb82 	bl	80069e4 <USBD_SetConfig>
 80062e0:	4603      	mov	r3, r0
 80062e2:	73fb      	strb	r3, [r7, #15]
          break;
 80062e4:	e018      	b.n	8006318 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80062e6:	6839      	ldr	r1, [r7, #0]
 80062e8:	6878      	ldr	r0, [r7, #4]
 80062ea:	f000 fc21 	bl	8006b30 <USBD_GetConfig>
          break;
 80062ee:	e013      	b.n	8006318 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80062f0:	6839      	ldr	r1, [r7, #0]
 80062f2:	6878      	ldr	r0, [r7, #4]
 80062f4:	f000 fc52 	bl	8006b9c <USBD_GetStatus>
          break;
 80062f8:	e00e      	b.n	8006318 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80062fa:	6839      	ldr	r1, [r7, #0]
 80062fc:	6878      	ldr	r0, [r7, #4]
 80062fe:	f000 fc81 	bl	8006c04 <USBD_SetFeature>
          break;
 8006302:	e009      	b.n	8006318 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8006304:	6839      	ldr	r1, [r7, #0]
 8006306:	6878      	ldr	r0, [r7, #4]
 8006308:	f000 fc90 	bl	8006c2c <USBD_ClrFeature>
          break;
 800630c:	e004      	b.n	8006318 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800630e:	6839      	ldr	r1, [r7, #0]
 8006310:	6878      	ldr	r0, [r7, #4]
 8006312:	f000 fce7 	bl	8006ce4 <USBD_CtlError>
          break;
 8006316:	bf00      	nop
      }
      break;
 8006318:	e004      	b.n	8006324 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800631a:	6839      	ldr	r1, [r7, #0]
 800631c:	6878      	ldr	r0, [r7, #4]
 800631e:	f000 fce1 	bl	8006ce4 <USBD_CtlError>
      break;
 8006322:	bf00      	nop
  }

  return ret;
 8006324:	7bfb      	ldrb	r3, [r7, #15]
}
 8006326:	4618      	mov	r0, r3
 8006328:	3710      	adds	r7, #16
 800632a:	46bd      	mov	sp, r7
 800632c:	bd80      	pop	{r7, pc}
 800632e:	bf00      	nop

08006330 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006330:	b580      	push	{r7, lr}
 8006332:	b084      	sub	sp, #16
 8006334:	af00      	add	r7, sp, #0
 8006336:	6078      	str	r0, [r7, #4]
 8006338:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800633a:	2300      	movs	r3, #0
 800633c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800633e:	683b      	ldr	r3, [r7, #0]
 8006340:	781b      	ldrb	r3, [r3, #0]
 8006342:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006346:	2b40      	cmp	r3, #64	; 0x40
 8006348:	d005      	beq.n	8006356 <USBD_StdItfReq+0x26>
 800634a:	2b40      	cmp	r3, #64	; 0x40
 800634c:	d82f      	bhi.n	80063ae <USBD_StdItfReq+0x7e>
 800634e:	2b00      	cmp	r3, #0
 8006350:	d001      	beq.n	8006356 <USBD_StdItfReq+0x26>
 8006352:	2b20      	cmp	r3, #32
 8006354:	d12b      	bne.n	80063ae <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800635c:	b2db      	uxtb	r3, r3
 800635e:	3b01      	subs	r3, #1
 8006360:	2b02      	cmp	r3, #2
 8006362:	d81d      	bhi.n	80063a0 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8006364:	683b      	ldr	r3, [r7, #0]
 8006366:	889b      	ldrh	r3, [r3, #4]
 8006368:	b2db      	uxtb	r3, r3
 800636a:	2b01      	cmp	r3, #1
 800636c:	d813      	bhi.n	8006396 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006374:	689b      	ldr	r3, [r3, #8]
 8006376:	6839      	ldr	r1, [r7, #0]
 8006378:	6878      	ldr	r0, [r7, #4]
 800637a:	4798      	blx	r3
 800637c:	4603      	mov	r3, r0
 800637e:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8006380:	683b      	ldr	r3, [r7, #0]
 8006382:	88db      	ldrh	r3, [r3, #6]
 8006384:	2b00      	cmp	r3, #0
 8006386:	d110      	bne.n	80063aa <USBD_StdItfReq+0x7a>
 8006388:	7bfb      	ldrb	r3, [r7, #15]
 800638a:	2b00      	cmp	r3, #0
 800638c:	d10d      	bne.n	80063aa <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 800638e:	6878      	ldr	r0, [r7, #4]
 8006390:	f000 fd56 	bl	8006e40 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8006394:	e009      	b.n	80063aa <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 8006396:	6839      	ldr	r1, [r7, #0]
 8006398:	6878      	ldr	r0, [r7, #4]
 800639a:	f000 fca3 	bl	8006ce4 <USBD_CtlError>
          break;
 800639e:	e004      	b.n	80063aa <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 80063a0:	6839      	ldr	r1, [r7, #0]
 80063a2:	6878      	ldr	r0, [r7, #4]
 80063a4:	f000 fc9e 	bl	8006ce4 <USBD_CtlError>
          break;
 80063a8:	e000      	b.n	80063ac <USBD_StdItfReq+0x7c>
          break;
 80063aa:	bf00      	nop
      }
      break;
 80063ac:	e004      	b.n	80063b8 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 80063ae:	6839      	ldr	r1, [r7, #0]
 80063b0:	6878      	ldr	r0, [r7, #4]
 80063b2:	f000 fc97 	bl	8006ce4 <USBD_CtlError>
      break;
 80063b6:	bf00      	nop
  }

  return ret;
 80063b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80063ba:	4618      	mov	r0, r3
 80063bc:	3710      	adds	r7, #16
 80063be:	46bd      	mov	sp, r7
 80063c0:	bd80      	pop	{r7, pc}

080063c2 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80063c2:	b580      	push	{r7, lr}
 80063c4:	b084      	sub	sp, #16
 80063c6:	af00      	add	r7, sp, #0
 80063c8:	6078      	str	r0, [r7, #4]
 80063ca:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80063cc:	2300      	movs	r3, #0
 80063ce:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 80063d0:	683b      	ldr	r3, [r7, #0]
 80063d2:	889b      	ldrh	r3, [r3, #4]
 80063d4:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80063d6:	683b      	ldr	r3, [r7, #0]
 80063d8:	781b      	ldrb	r3, [r3, #0]
 80063da:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80063de:	2b40      	cmp	r3, #64	; 0x40
 80063e0:	d007      	beq.n	80063f2 <USBD_StdEPReq+0x30>
 80063e2:	2b40      	cmp	r3, #64	; 0x40
 80063e4:	f200 8145 	bhi.w	8006672 <USBD_StdEPReq+0x2b0>
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d00c      	beq.n	8006406 <USBD_StdEPReq+0x44>
 80063ec:	2b20      	cmp	r3, #32
 80063ee:	f040 8140 	bne.w	8006672 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80063f8:	689b      	ldr	r3, [r3, #8]
 80063fa:	6839      	ldr	r1, [r7, #0]
 80063fc:	6878      	ldr	r0, [r7, #4]
 80063fe:	4798      	blx	r3
 8006400:	4603      	mov	r3, r0
 8006402:	73fb      	strb	r3, [r7, #15]
      break;
 8006404:	e13a      	b.n	800667c <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006406:	683b      	ldr	r3, [r7, #0]
 8006408:	785b      	ldrb	r3, [r3, #1]
 800640a:	2b03      	cmp	r3, #3
 800640c:	d007      	beq.n	800641e <USBD_StdEPReq+0x5c>
 800640e:	2b03      	cmp	r3, #3
 8006410:	f300 8129 	bgt.w	8006666 <USBD_StdEPReq+0x2a4>
 8006414:	2b00      	cmp	r3, #0
 8006416:	d07f      	beq.n	8006518 <USBD_StdEPReq+0x156>
 8006418:	2b01      	cmp	r3, #1
 800641a:	d03c      	beq.n	8006496 <USBD_StdEPReq+0xd4>
 800641c:	e123      	b.n	8006666 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006424:	b2db      	uxtb	r3, r3
 8006426:	2b02      	cmp	r3, #2
 8006428:	d002      	beq.n	8006430 <USBD_StdEPReq+0x6e>
 800642a:	2b03      	cmp	r3, #3
 800642c:	d016      	beq.n	800645c <USBD_StdEPReq+0x9a>
 800642e:	e02c      	b.n	800648a <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006430:	7bbb      	ldrb	r3, [r7, #14]
 8006432:	2b00      	cmp	r3, #0
 8006434:	d00d      	beq.n	8006452 <USBD_StdEPReq+0x90>
 8006436:	7bbb      	ldrb	r3, [r7, #14]
 8006438:	2b80      	cmp	r3, #128	; 0x80
 800643a:	d00a      	beq.n	8006452 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800643c:	7bbb      	ldrb	r3, [r7, #14]
 800643e:	4619      	mov	r1, r3
 8006440:	6878      	ldr	r0, [r7, #4]
 8006442:	f001 f8ce 	bl	80075e2 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8006446:	2180      	movs	r1, #128	; 0x80
 8006448:	6878      	ldr	r0, [r7, #4]
 800644a:	f001 f8ca 	bl	80075e2 <USBD_LL_StallEP>
 800644e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006450:	e020      	b.n	8006494 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 8006452:	6839      	ldr	r1, [r7, #0]
 8006454:	6878      	ldr	r0, [r7, #4]
 8006456:	f000 fc45 	bl	8006ce4 <USBD_CtlError>
              break;
 800645a:	e01b      	b.n	8006494 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800645c:	683b      	ldr	r3, [r7, #0]
 800645e:	885b      	ldrh	r3, [r3, #2]
 8006460:	2b00      	cmp	r3, #0
 8006462:	d10e      	bne.n	8006482 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8006464:	7bbb      	ldrb	r3, [r7, #14]
 8006466:	2b00      	cmp	r3, #0
 8006468:	d00b      	beq.n	8006482 <USBD_StdEPReq+0xc0>
 800646a:	7bbb      	ldrb	r3, [r7, #14]
 800646c:	2b80      	cmp	r3, #128	; 0x80
 800646e:	d008      	beq.n	8006482 <USBD_StdEPReq+0xc0>
 8006470:	683b      	ldr	r3, [r7, #0]
 8006472:	88db      	ldrh	r3, [r3, #6]
 8006474:	2b00      	cmp	r3, #0
 8006476:	d104      	bne.n	8006482 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8006478:	7bbb      	ldrb	r3, [r7, #14]
 800647a:	4619      	mov	r1, r3
 800647c:	6878      	ldr	r0, [r7, #4]
 800647e:	f001 f8b0 	bl	80075e2 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8006482:	6878      	ldr	r0, [r7, #4]
 8006484:	f000 fcdc 	bl	8006e40 <USBD_CtlSendStatus>

              break;
 8006488:	e004      	b.n	8006494 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 800648a:	6839      	ldr	r1, [r7, #0]
 800648c:	6878      	ldr	r0, [r7, #4]
 800648e:	f000 fc29 	bl	8006ce4 <USBD_CtlError>
              break;
 8006492:	bf00      	nop
          }
          break;
 8006494:	e0ec      	b.n	8006670 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800649c:	b2db      	uxtb	r3, r3
 800649e:	2b02      	cmp	r3, #2
 80064a0:	d002      	beq.n	80064a8 <USBD_StdEPReq+0xe6>
 80064a2:	2b03      	cmp	r3, #3
 80064a4:	d016      	beq.n	80064d4 <USBD_StdEPReq+0x112>
 80064a6:	e030      	b.n	800650a <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80064a8:	7bbb      	ldrb	r3, [r7, #14]
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d00d      	beq.n	80064ca <USBD_StdEPReq+0x108>
 80064ae:	7bbb      	ldrb	r3, [r7, #14]
 80064b0:	2b80      	cmp	r3, #128	; 0x80
 80064b2:	d00a      	beq.n	80064ca <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80064b4:	7bbb      	ldrb	r3, [r7, #14]
 80064b6:	4619      	mov	r1, r3
 80064b8:	6878      	ldr	r0, [r7, #4]
 80064ba:	f001 f892 	bl	80075e2 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80064be:	2180      	movs	r1, #128	; 0x80
 80064c0:	6878      	ldr	r0, [r7, #4]
 80064c2:	f001 f88e 	bl	80075e2 <USBD_LL_StallEP>
 80064c6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80064c8:	e025      	b.n	8006516 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 80064ca:	6839      	ldr	r1, [r7, #0]
 80064cc:	6878      	ldr	r0, [r7, #4]
 80064ce:	f000 fc09 	bl	8006ce4 <USBD_CtlError>
              break;
 80064d2:	e020      	b.n	8006516 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80064d4:	683b      	ldr	r3, [r7, #0]
 80064d6:	885b      	ldrh	r3, [r3, #2]
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d11b      	bne.n	8006514 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80064dc:	7bbb      	ldrb	r3, [r7, #14]
 80064de:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d004      	beq.n	80064f0 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80064e6:	7bbb      	ldrb	r3, [r7, #14]
 80064e8:	4619      	mov	r1, r3
 80064ea:	6878      	ldr	r0, [r7, #4]
 80064ec:	f001 f898 	bl	8007620 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80064f0:	6878      	ldr	r0, [r7, #4]
 80064f2:	f000 fca5 	bl	8006e40 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80064fc:	689b      	ldr	r3, [r3, #8]
 80064fe:	6839      	ldr	r1, [r7, #0]
 8006500:	6878      	ldr	r0, [r7, #4]
 8006502:	4798      	blx	r3
 8006504:	4603      	mov	r3, r0
 8006506:	73fb      	strb	r3, [r7, #15]
              }
              break;
 8006508:	e004      	b.n	8006514 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 800650a:	6839      	ldr	r1, [r7, #0]
 800650c:	6878      	ldr	r0, [r7, #4]
 800650e:	f000 fbe9 	bl	8006ce4 <USBD_CtlError>
              break;
 8006512:	e000      	b.n	8006516 <USBD_StdEPReq+0x154>
              break;
 8006514:	bf00      	nop
          }
          break;
 8006516:	e0ab      	b.n	8006670 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800651e:	b2db      	uxtb	r3, r3
 8006520:	2b02      	cmp	r3, #2
 8006522:	d002      	beq.n	800652a <USBD_StdEPReq+0x168>
 8006524:	2b03      	cmp	r3, #3
 8006526:	d032      	beq.n	800658e <USBD_StdEPReq+0x1cc>
 8006528:	e097      	b.n	800665a <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800652a:	7bbb      	ldrb	r3, [r7, #14]
 800652c:	2b00      	cmp	r3, #0
 800652e:	d007      	beq.n	8006540 <USBD_StdEPReq+0x17e>
 8006530:	7bbb      	ldrb	r3, [r7, #14]
 8006532:	2b80      	cmp	r3, #128	; 0x80
 8006534:	d004      	beq.n	8006540 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 8006536:	6839      	ldr	r1, [r7, #0]
 8006538:	6878      	ldr	r0, [r7, #4]
 800653a:	f000 fbd3 	bl	8006ce4 <USBD_CtlError>
                break;
 800653e:	e091      	b.n	8006664 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006540:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006544:	2b00      	cmp	r3, #0
 8006546:	da0b      	bge.n	8006560 <USBD_StdEPReq+0x19e>
 8006548:	7bbb      	ldrb	r3, [r7, #14]
 800654a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800654e:	4613      	mov	r3, r2
 8006550:	009b      	lsls	r3, r3, #2
 8006552:	4413      	add	r3, r2
 8006554:	009b      	lsls	r3, r3, #2
 8006556:	3310      	adds	r3, #16
 8006558:	687a      	ldr	r2, [r7, #4]
 800655a:	4413      	add	r3, r2
 800655c:	3304      	adds	r3, #4
 800655e:	e00b      	b.n	8006578 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006560:	7bbb      	ldrb	r3, [r7, #14]
 8006562:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006566:	4613      	mov	r3, r2
 8006568:	009b      	lsls	r3, r3, #2
 800656a:	4413      	add	r3, r2
 800656c:	009b      	lsls	r3, r3, #2
 800656e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006572:	687a      	ldr	r2, [r7, #4]
 8006574:	4413      	add	r3, r2
 8006576:	3304      	adds	r3, #4
 8006578:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800657a:	68bb      	ldr	r3, [r7, #8]
 800657c:	2200      	movs	r2, #0
 800657e:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006580:	68bb      	ldr	r3, [r7, #8]
 8006582:	2202      	movs	r2, #2
 8006584:	4619      	mov	r1, r3
 8006586:	6878      	ldr	r0, [r7, #4]
 8006588:	f000 fc1d 	bl	8006dc6 <USBD_CtlSendData>
              break;
 800658c:	e06a      	b.n	8006664 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800658e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006592:	2b00      	cmp	r3, #0
 8006594:	da11      	bge.n	80065ba <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8006596:	7bbb      	ldrb	r3, [r7, #14]
 8006598:	f003 020f 	and.w	r2, r3, #15
 800659c:	6879      	ldr	r1, [r7, #4]
 800659e:	4613      	mov	r3, r2
 80065a0:	009b      	lsls	r3, r3, #2
 80065a2:	4413      	add	r3, r2
 80065a4:	009b      	lsls	r3, r3, #2
 80065a6:	440b      	add	r3, r1
 80065a8:	3324      	adds	r3, #36	; 0x24
 80065aa:	881b      	ldrh	r3, [r3, #0]
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d117      	bne.n	80065e0 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 80065b0:	6839      	ldr	r1, [r7, #0]
 80065b2:	6878      	ldr	r0, [r7, #4]
 80065b4:	f000 fb96 	bl	8006ce4 <USBD_CtlError>
                  break;
 80065b8:	e054      	b.n	8006664 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80065ba:	7bbb      	ldrb	r3, [r7, #14]
 80065bc:	f003 020f 	and.w	r2, r3, #15
 80065c0:	6879      	ldr	r1, [r7, #4]
 80065c2:	4613      	mov	r3, r2
 80065c4:	009b      	lsls	r3, r3, #2
 80065c6:	4413      	add	r3, r2
 80065c8:	009b      	lsls	r3, r3, #2
 80065ca:	440b      	add	r3, r1
 80065cc:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80065d0:	881b      	ldrh	r3, [r3, #0]
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d104      	bne.n	80065e0 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 80065d6:	6839      	ldr	r1, [r7, #0]
 80065d8:	6878      	ldr	r0, [r7, #4]
 80065da:	f000 fb83 	bl	8006ce4 <USBD_CtlError>
                  break;
 80065de:	e041      	b.n	8006664 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80065e0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	da0b      	bge.n	8006600 <USBD_StdEPReq+0x23e>
 80065e8:	7bbb      	ldrb	r3, [r7, #14]
 80065ea:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80065ee:	4613      	mov	r3, r2
 80065f0:	009b      	lsls	r3, r3, #2
 80065f2:	4413      	add	r3, r2
 80065f4:	009b      	lsls	r3, r3, #2
 80065f6:	3310      	adds	r3, #16
 80065f8:	687a      	ldr	r2, [r7, #4]
 80065fa:	4413      	add	r3, r2
 80065fc:	3304      	adds	r3, #4
 80065fe:	e00b      	b.n	8006618 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006600:	7bbb      	ldrb	r3, [r7, #14]
 8006602:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006606:	4613      	mov	r3, r2
 8006608:	009b      	lsls	r3, r3, #2
 800660a:	4413      	add	r3, r2
 800660c:	009b      	lsls	r3, r3, #2
 800660e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006612:	687a      	ldr	r2, [r7, #4]
 8006614:	4413      	add	r3, r2
 8006616:	3304      	adds	r3, #4
 8006618:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800661a:	7bbb      	ldrb	r3, [r7, #14]
 800661c:	2b00      	cmp	r3, #0
 800661e:	d002      	beq.n	8006626 <USBD_StdEPReq+0x264>
 8006620:	7bbb      	ldrb	r3, [r7, #14]
 8006622:	2b80      	cmp	r3, #128	; 0x80
 8006624:	d103      	bne.n	800662e <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 8006626:	68bb      	ldr	r3, [r7, #8]
 8006628:	2200      	movs	r2, #0
 800662a:	601a      	str	r2, [r3, #0]
 800662c:	e00e      	b.n	800664c <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800662e:	7bbb      	ldrb	r3, [r7, #14]
 8006630:	4619      	mov	r1, r3
 8006632:	6878      	ldr	r0, [r7, #4]
 8006634:	f001 f813 	bl	800765e <USBD_LL_IsStallEP>
 8006638:	4603      	mov	r3, r0
 800663a:	2b00      	cmp	r3, #0
 800663c:	d003      	beq.n	8006646 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 800663e:	68bb      	ldr	r3, [r7, #8]
 8006640:	2201      	movs	r2, #1
 8006642:	601a      	str	r2, [r3, #0]
 8006644:	e002      	b.n	800664c <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 8006646:	68bb      	ldr	r3, [r7, #8]
 8006648:	2200      	movs	r2, #0
 800664a:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800664c:	68bb      	ldr	r3, [r7, #8]
 800664e:	2202      	movs	r2, #2
 8006650:	4619      	mov	r1, r3
 8006652:	6878      	ldr	r0, [r7, #4]
 8006654:	f000 fbb7 	bl	8006dc6 <USBD_CtlSendData>
              break;
 8006658:	e004      	b.n	8006664 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800665a:	6839      	ldr	r1, [r7, #0]
 800665c:	6878      	ldr	r0, [r7, #4]
 800665e:	f000 fb41 	bl	8006ce4 <USBD_CtlError>
              break;
 8006662:	bf00      	nop
          }
          break;
 8006664:	e004      	b.n	8006670 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 8006666:	6839      	ldr	r1, [r7, #0]
 8006668:	6878      	ldr	r0, [r7, #4]
 800666a:	f000 fb3b 	bl	8006ce4 <USBD_CtlError>
          break;
 800666e:	bf00      	nop
      }
      break;
 8006670:	e004      	b.n	800667c <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 8006672:	6839      	ldr	r1, [r7, #0]
 8006674:	6878      	ldr	r0, [r7, #4]
 8006676:	f000 fb35 	bl	8006ce4 <USBD_CtlError>
      break;
 800667a:	bf00      	nop
  }

  return ret;
 800667c:	7bfb      	ldrb	r3, [r7, #15]
}
 800667e:	4618      	mov	r0, r3
 8006680:	3710      	adds	r7, #16
 8006682:	46bd      	mov	sp, r7
 8006684:	bd80      	pop	{r7, pc}
	...

08006688 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006688:	b580      	push	{r7, lr}
 800668a:	b084      	sub	sp, #16
 800668c:	af00      	add	r7, sp, #0
 800668e:	6078      	str	r0, [r7, #4]
 8006690:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006692:	2300      	movs	r3, #0
 8006694:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8006696:	2300      	movs	r3, #0
 8006698:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800669a:	2300      	movs	r3, #0
 800669c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800669e:	683b      	ldr	r3, [r7, #0]
 80066a0:	885b      	ldrh	r3, [r3, #2]
 80066a2:	0a1b      	lsrs	r3, r3, #8
 80066a4:	b29b      	uxth	r3, r3
 80066a6:	3b01      	subs	r3, #1
 80066a8:	2b06      	cmp	r3, #6
 80066aa:	f200 8128 	bhi.w	80068fe <USBD_GetDescriptor+0x276>
 80066ae:	a201      	add	r2, pc, #4	; (adr r2, 80066b4 <USBD_GetDescriptor+0x2c>)
 80066b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066b4:	080066d1 	.word	0x080066d1
 80066b8:	080066e9 	.word	0x080066e9
 80066bc:	08006729 	.word	0x08006729
 80066c0:	080068ff 	.word	0x080068ff
 80066c4:	080068ff 	.word	0x080068ff
 80066c8:	0800689f 	.word	0x0800689f
 80066cc:	080068cb 	.word	0x080068cb
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	687a      	ldr	r2, [r7, #4]
 80066da:	7c12      	ldrb	r2, [r2, #16]
 80066dc:	f107 0108 	add.w	r1, r7, #8
 80066e0:	4610      	mov	r0, r2
 80066e2:	4798      	blx	r3
 80066e4:	60f8      	str	r0, [r7, #12]
      break;
 80066e6:	e112      	b.n	800690e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	7c1b      	ldrb	r3, [r3, #16]
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d10d      	bne.n	800670c <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80066f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066f8:	f107 0208 	add.w	r2, r7, #8
 80066fc:	4610      	mov	r0, r2
 80066fe:	4798      	blx	r3
 8006700:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	3301      	adds	r3, #1
 8006706:	2202      	movs	r2, #2
 8006708:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800670a:	e100      	b.n	800690e <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006712:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006714:	f107 0208 	add.w	r2, r7, #8
 8006718:	4610      	mov	r0, r2
 800671a:	4798      	blx	r3
 800671c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	3301      	adds	r3, #1
 8006722:	2202      	movs	r2, #2
 8006724:	701a      	strb	r2, [r3, #0]
      break;
 8006726:	e0f2      	b.n	800690e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8006728:	683b      	ldr	r3, [r7, #0]
 800672a:	885b      	ldrh	r3, [r3, #2]
 800672c:	b2db      	uxtb	r3, r3
 800672e:	2b05      	cmp	r3, #5
 8006730:	f200 80ac 	bhi.w	800688c <USBD_GetDescriptor+0x204>
 8006734:	a201      	add	r2, pc, #4	; (adr r2, 800673c <USBD_GetDescriptor+0xb4>)
 8006736:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800673a:	bf00      	nop
 800673c:	08006755 	.word	0x08006755
 8006740:	08006789 	.word	0x08006789
 8006744:	080067bd 	.word	0x080067bd
 8006748:	080067f1 	.word	0x080067f1
 800674c:	08006825 	.word	0x08006825
 8006750:	08006859 	.word	0x08006859
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800675a:	685b      	ldr	r3, [r3, #4]
 800675c:	2b00      	cmp	r3, #0
 800675e:	d00b      	beq.n	8006778 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006766:	685b      	ldr	r3, [r3, #4]
 8006768:	687a      	ldr	r2, [r7, #4]
 800676a:	7c12      	ldrb	r2, [r2, #16]
 800676c:	f107 0108 	add.w	r1, r7, #8
 8006770:	4610      	mov	r0, r2
 8006772:	4798      	blx	r3
 8006774:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006776:	e091      	b.n	800689c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006778:	6839      	ldr	r1, [r7, #0]
 800677a:	6878      	ldr	r0, [r7, #4]
 800677c:	f000 fab2 	bl	8006ce4 <USBD_CtlError>
            err++;
 8006780:	7afb      	ldrb	r3, [r7, #11]
 8006782:	3301      	adds	r3, #1
 8006784:	72fb      	strb	r3, [r7, #11]
          break;
 8006786:	e089      	b.n	800689c <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800678e:	689b      	ldr	r3, [r3, #8]
 8006790:	2b00      	cmp	r3, #0
 8006792:	d00b      	beq.n	80067ac <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800679a:	689b      	ldr	r3, [r3, #8]
 800679c:	687a      	ldr	r2, [r7, #4]
 800679e:	7c12      	ldrb	r2, [r2, #16]
 80067a0:	f107 0108 	add.w	r1, r7, #8
 80067a4:	4610      	mov	r0, r2
 80067a6:	4798      	blx	r3
 80067a8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80067aa:	e077      	b.n	800689c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80067ac:	6839      	ldr	r1, [r7, #0]
 80067ae:	6878      	ldr	r0, [r7, #4]
 80067b0:	f000 fa98 	bl	8006ce4 <USBD_CtlError>
            err++;
 80067b4:	7afb      	ldrb	r3, [r7, #11]
 80067b6:	3301      	adds	r3, #1
 80067b8:	72fb      	strb	r3, [r7, #11]
          break;
 80067ba:	e06f      	b.n	800689c <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80067c2:	68db      	ldr	r3, [r3, #12]
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d00b      	beq.n	80067e0 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80067ce:	68db      	ldr	r3, [r3, #12]
 80067d0:	687a      	ldr	r2, [r7, #4]
 80067d2:	7c12      	ldrb	r2, [r2, #16]
 80067d4:	f107 0108 	add.w	r1, r7, #8
 80067d8:	4610      	mov	r0, r2
 80067da:	4798      	blx	r3
 80067dc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80067de:	e05d      	b.n	800689c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80067e0:	6839      	ldr	r1, [r7, #0]
 80067e2:	6878      	ldr	r0, [r7, #4]
 80067e4:	f000 fa7e 	bl	8006ce4 <USBD_CtlError>
            err++;
 80067e8:	7afb      	ldrb	r3, [r7, #11]
 80067ea:	3301      	adds	r3, #1
 80067ec:	72fb      	strb	r3, [r7, #11]
          break;
 80067ee:	e055      	b.n	800689c <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80067f6:	691b      	ldr	r3, [r3, #16]
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d00b      	beq.n	8006814 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006802:	691b      	ldr	r3, [r3, #16]
 8006804:	687a      	ldr	r2, [r7, #4]
 8006806:	7c12      	ldrb	r2, [r2, #16]
 8006808:	f107 0108 	add.w	r1, r7, #8
 800680c:	4610      	mov	r0, r2
 800680e:	4798      	blx	r3
 8006810:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006812:	e043      	b.n	800689c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006814:	6839      	ldr	r1, [r7, #0]
 8006816:	6878      	ldr	r0, [r7, #4]
 8006818:	f000 fa64 	bl	8006ce4 <USBD_CtlError>
            err++;
 800681c:	7afb      	ldrb	r3, [r7, #11]
 800681e:	3301      	adds	r3, #1
 8006820:	72fb      	strb	r3, [r7, #11]
          break;
 8006822:	e03b      	b.n	800689c <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800682a:	695b      	ldr	r3, [r3, #20]
 800682c:	2b00      	cmp	r3, #0
 800682e:	d00b      	beq.n	8006848 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006836:	695b      	ldr	r3, [r3, #20]
 8006838:	687a      	ldr	r2, [r7, #4]
 800683a:	7c12      	ldrb	r2, [r2, #16]
 800683c:	f107 0108 	add.w	r1, r7, #8
 8006840:	4610      	mov	r0, r2
 8006842:	4798      	blx	r3
 8006844:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006846:	e029      	b.n	800689c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006848:	6839      	ldr	r1, [r7, #0]
 800684a:	6878      	ldr	r0, [r7, #4]
 800684c:	f000 fa4a 	bl	8006ce4 <USBD_CtlError>
            err++;
 8006850:	7afb      	ldrb	r3, [r7, #11]
 8006852:	3301      	adds	r3, #1
 8006854:	72fb      	strb	r3, [r7, #11]
          break;
 8006856:	e021      	b.n	800689c <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800685e:	699b      	ldr	r3, [r3, #24]
 8006860:	2b00      	cmp	r3, #0
 8006862:	d00b      	beq.n	800687c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800686a:	699b      	ldr	r3, [r3, #24]
 800686c:	687a      	ldr	r2, [r7, #4]
 800686e:	7c12      	ldrb	r2, [r2, #16]
 8006870:	f107 0108 	add.w	r1, r7, #8
 8006874:	4610      	mov	r0, r2
 8006876:	4798      	blx	r3
 8006878:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800687a:	e00f      	b.n	800689c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800687c:	6839      	ldr	r1, [r7, #0]
 800687e:	6878      	ldr	r0, [r7, #4]
 8006880:	f000 fa30 	bl	8006ce4 <USBD_CtlError>
            err++;
 8006884:	7afb      	ldrb	r3, [r7, #11]
 8006886:	3301      	adds	r3, #1
 8006888:	72fb      	strb	r3, [r7, #11]
          break;
 800688a:	e007      	b.n	800689c <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800688c:	6839      	ldr	r1, [r7, #0]
 800688e:	6878      	ldr	r0, [r7, #4]
 8006890:	f000 fa28 	bl	8006ce4 <USBD_CtlError>
          err++;
 8006894:	7afb      	ldrb	r3, [r7, #11]
 8006896:	3301      	adds	r3, #1
 8006898:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 800689a:	bf00      	nop
      }
      break;
 800689c:	e037      	b.n	800690e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	7c1b      	ldrb	r3, [r3, #16]
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d109      	bne.n	80068ba <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80068ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80068ae:	f107 0208 	add.w	r2, r7, #8
 80068b2:	4610      	mov	r0, r2
 80068b4:	4798      	blx	r3
 80068b6:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80068b8:	e029      	b.n	800690e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80068ba:	6839      	ldr	r1, [r7, #0]
 80068bc:	6878      	ldr	r0, [r7, #4]
 80068be:	f000 fa11 	bl	8006ce4 <USBD_CtlError>
        err++;
 80068c2:	7afb      	ldrb	r3, [r7, #11]
 80068c4:	3301      	adds	r3, #1
 80068c6:	72fb      	strb	r3, [r7, #11]
      break;
 80068c8:	e021      	b.n	800690e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	7c1b      	ldrb	r3, [r3, #16]
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d10d      	bne.n	80068ee <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80068d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068da:	f107 0208 	add.w	r2, r7, #8
 80068de:	4610      	mov	r0, r2
 80068e0:	4798      	blx	r3
 80068e2:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	3301      	adds	r3, #1
 80068e8:	2207      	movs	r2, #7
 80068ea:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80068ec:	e00f      	b.n	800690e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80068ee:	6839      	ldr	r1, [r7, #0]
 80068f0:	6878      	ldr	r0, [r7, #4]
 80068f2:	f000 f9f7 	bl	8006ce4 <USBD_CtlError>
        err++;
 80068f6:	7afb      	ldrb	r3, [r7, #11]
 80068f8:	3301      	adds	r3, #1
 80068fa:	72fb      	strb	r3, [r7, #11]
      break;
 80068fc:	e007      	b.n	800690e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80068fe:	6839      	ldr	r1, [r7, #0]
 8006900:	6878      	ldr	r0, [r7, #4]
 8006902:	f000 f9ef 	bl	8006ce4 <USBD_CtlError>
      err++;
 8006906:	7afb      	ldrb	r3, [r7, #11]
 8006908:	3301      	adds	r3, #1
 800690a:	72fb      	strb	r3, [r7, #11]
      break;
 800690c:	bf00      	nop
  }

  if (err != 0U)
 800690e:	7afb      	ldrb	r3, [r7, #11]
 8006910:	2b00      	cmp	r3, #0
 8006912:	d11e      	bne.n	8006952 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8006914:	683b      	ldr	r3, [r7, #0]
 8006916:	88db      	ldrh	r3, [r3, #6]
 8006918:	2b00      	cmp	r3, #0
 800691a:	d016      	beq.n	800694a <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800691c:	893b      	ldrh	r3, [r7, #8]
 800691e:	2b00      	cmp	r3, #0
 8006920:	d00e      	beq.n	8006940 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8006922:	683b      	ldr	r3, [r7, #0]
 8006924:	88da      	ldrh	r2, [r3, #6]
 8006926:	893b      	ldrh	r3, [r7, #8]
 8006928:	4293      	cmp	r3, r2
 800692a:	bf28      	it	cs
 800692c:	4613      	movcs	r3, r2
 800692e:	b29b      	uxth	r3, r3
 8006930:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8006932:	893b      	ldrh	r3, [r7, #8]
 8006934:	461a      	mov	r2, r3
 8006936:	68f9      	ldr	r1, [r7, #12]
 8006938:	6878      	ldr	r0, [r7, #4]
 800693a:	f000 fa44 	bl	8006dc6 <USBD_CtlSendData>
 800693e:	e009      	b.n	8006954 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8006940:	6839      	ldr	r1, [r7, #0]
 8006942:	6878      	ldr	r0, [r7, #4]
 8006944:	f000 f9ce 	bl	8006ce4 <USBD_CtlError>
 8006948:	e004      	b.n	8006954 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800694a:	6878      	ldr	r0, [r7, #4]
 800694c:	f000 fa78 	bl	8006e40 <USBD_CtlSendStatus>
 8006950:	e000      	b.n	8006954 <USBD_GetDescriptor+0x2cc>
    return;
 8006952:	bf00      	nop
  }
}
 8006954:	3710      	adds	r7, #16
 8006956:	46bd      	mov	sp, r7
 8006958:	bd80      	pop	{r7, pc}
 800695a:	bf00      	nop

0800695c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800695c:	b580      	push	{r7, lr}
 800695e:	b084      	sub	sp, #16
 8006960:	af00      	add	r7, sp, #0
 8006962:	6078      	str	r0, [r7, #4]
 8006964:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8006966:	683b      	ldr	r3, [r7, #0]
 8006968:	889b      	ldrh	r3, [r3, #4]
 800696a:	2b00      	cmp	r3, #0
 800696c:	d131      	bne.n	80069d2 <USBD_SetAddress+0x76>
 800696e:	683b      	ldr	r3, [r7, #0]
 8006970:	88db      	ldrh	r3, [r3, #6]
 8006972:	2b00      	cmp	r3, #0
 8006974:	d12d      	bne.n	80069d2 <USBD_SetAddress+0x76>
 8006976:	683b      	ldr	r3, [r7, #0]
 8006978:	885b      	ldrh	r3, [r3, #2]
 800697a:	2b7f      	cmp	r3, #127	; 0x7f
 800697c:	d829      	bhi.n	80069d2 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800697e:	683b      	ldr	r3, [r7, #0]
 8006980:	885b      	ldrh	r3, [r3, #2]
 8006982:	b2db      	uxtb	r3, r3
 8006984:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006988:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006990:	b2db      	uxtb	r3, r3
 8006992:	2b03      	cmp	r3, #3
 8006994:	d104      	bne.n	80069a0 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8006996:	6839      	ldr	r1, [r7, #0]
 8006998:	6878      	ldr	r0, [r7, #4]
 800699a:	f000 f9a3 	bl	8006ce4 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800699e:	e01d      	b.n	80069dc <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	7bfa      	ldrb	r2, [r7, #15]
 80069a4:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80069a8:	7bfb      	ldrb	r3, [r7, #15]
 80069aa:	4619      	mov	r1, r3
 80069ac:	6878      	ldr	r0, [r7, #4]
 80069ae:	f000 fe82 	bl	80076b6 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80069b2:	6878      	ldr	r0, [r7, #4]
 80069b4:	f000 fa44 	bl	8006e40 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80069b8:	7bfb      	ldrb	r3, [r7, #15]
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d004      	beq.n	80069c8 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	2202      	movs	r2, #2
 80069c2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80069c6:	e009      	b.n	80069dc <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	2201      	movs	r2, #1
 80069cc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80069d0:	e004      	b.n	80069dc <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80069d2:	6839      	ldr	r1, [r7, #0]
 80069d4:	6878      	ldr	r0, [r7, #4]
 80069d6:	f000 f985 	bl	8006ce4 <USBD_CtlError>
  }
}
 80069da:	bf00      	nop
 80069dc:	bf00      	nop
 80069de:	3710      	adds	r7, #16
 80069e0:	46bd      	mov	sp, r7
 80069e2:	bd80      	pop	{r7, pc}

080069e4 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80069e4:	b580      	push	{r7, lr}
 80069e6:	b084      	sub	sp, #16
 80069e8:	af00      	add	r7, sp, #0
 80069ea:	6078      	str	r0, [r7, #4]
 80069ec:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80069ee:	2300      	movs	r3, #0
 80069f0:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80069f2:	683b      	ldr	r3, [r7, #0]
 80069f4:	885b      	ldrh	r3, [r3, #2]
 80069f6:	b2da      	uxtb	r2, r3
 80069f8:	4b4c      	ldr	r3, [pc, #304]	; (8006b2c <USBD_SetConfig+0x148>)
 80069fa:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80069fc:	4b4b      	ldr	r3, [pc, #300]	; (8006b2c <USBD_SetConfig+0x148>)
 80069fe:	781b      	ldrb	r3, [r3, #0]
 8006a00:	2b01      	cmp	r3, #1
 8006a02:	d905      	bls.n	8006a10 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8006a04:	6839      	ldr	r1, [r7, #0]
 8006a06:	6878      	ldr	r0, [r7, #4]
 8006a08:	f000 f96c 	bl	8006ce4 <USBD_CtlError>
    return USBD_FAIL;
 8006a0c:	2303      	movs	r3, #3
 8006a0e:	e088      	b.n	8006b22 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006a16:	b2db      	uxtb	r3, r3
 8006a18:	2b02      	cmp	r3, #2
 8006a1a:	d002      	beq.n	8006a22 <USBD_SetConfig+0x3e>
 8006a1c:	2b03      	cmp	r3, #3
 8006a1e:	d025      	beq.n	8006a6c <USBD_SetConfig+0x88>
 8006a20:	e071      	b.n	8006b06 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8006a22:	4b42      	ldr	r3, [pc, #264]	; (8006b2c <USBD_SetConfig+0x148>)
 8006a24:	781b      	ldrb	r3, [r3, #0]
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d01c      	beq.n	8006a64 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 8006a2a:	4b40      	ldr	r3, [pc, #256]	; (8006b2c <USBD_SetConfig+0x148>)
 8006a2c:	781b      	ldrb	r3, [r3, #0]
 8006a2e:	461a      	mov	r2, r3
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8006a34:	4b3d      	ldr	r3, [pc, #244]	; (8006b2c <USBD_SetConfig+0x148>)
 8006a36:	781b      	ldrb	r3, [r3, #0]
 8006a38:	4619      	mov	r1, r3
 8006a3a:	6878      	ldr	r0, [r7, #4]
 8006a3c:	f7ff f949 	bl	8005cd2 <USBD_SetClassConfig>
 8006a40:	4603      	mov	r3, r0
 8006a42:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8006a44:	7bfb      	ldrb	r3, [r7, #15]
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d004      	beq.n	8006a54 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 8006a4a:	6839      	ldr	r1, [r7, #0]
 8006a4c:	6878      	ldr	r0, [r7, #4]
 8006a4e:	f000 f949 	bl	8006ce4 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8006a52:	e065      	b.n	8006b20 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8006a54:	6878      	ldr	r0, [r7, #4]
 8006a56:	f000 f9f3 	bl	8006e40 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	2203      	movs	r2, #3
 8006a5e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8006a62:	e05d      	b.n	8006b20 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8006a64:	6878      	ldr	r0, [r7, #4]
 8006a66:	f000 f9eb 	bl	8006e40 <USBD_CtlSendStatus>
      break;
 8006a6a:	e059      	b.n	8006b20 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8006a6c:	4b2f      	ldr	r3, [pc, #188]	; (8006b2c <USBD_SetConfig+0x148>)
 8006a6e:	781b      	ldrb	r3, [r3, #0]
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d112      	bne.n	8006a9a <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	2202      	movs	r2, #2
 8006a78:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8006a7c:	4b2b      	ldr	r3, [pc, #172]	; (8006b2c <USBD_SetConfig+0x148>)
 8006a7e:	781b      	ldrb	r3, [r3, #0]
 8006a80:	461a      	mov	r2, r3
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006a86:	4b29      	ldr	r3, [pc, #164]	; (8006b2c <USBD_SetConfig+0x148>)
 8006a88:	781b      	ldrb	r3, [r3, #0]
 8006a8a:	4619      	mov	r1, r3
 8006a8c:	6878      	ldr	r0, [r7, #4]
 8006a8e:	f7ff f93c 	bl	8005d0a <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8006a92:	6878      	ldr	r0, [r7, #4]
 8006a94:	f000 f9d4 	bl	8006e40 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8006a98:	e042      	b.n	8006b20 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 8006a9a:	4b24      	ldr	r3, [pc, #144]	; (8006b2c <USBD_SetConfig+0x148>)
 8006a9c:	781b      	ldrb	r3, [r3, #0]
 8006a9e:	461a      	mov	r2, r3
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	685b      	ldr	r3, [r3, #4]
 8006aa4:	429a      	cmp	r2, r3
 8006aa6:	d02a      	beq.n	8006afe <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	685b      	ldr	r3, [r3, #4]
 8006aac:	b2db      	uxtb	r3, r3
 8006aae:	4619      	mov	r1, r3
 8006ab0:	6878      	ldr	r0, [r7, #4]
 8006ab2:	f7ff f92a 	bl	8005d0a <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8006ab6:	4b1d      	ldr	r3, [pc, #116]	; (8006b2c <USBD_SetConfig+0x148>)
 8006ab8:	781b      	ldrb	r3, [r3, #0]
 8006aba:	461a      	mov	r2, r3
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8006ac0:	4b1a      	ldr	r3, [pc, #104]	; (8006b2c <USBD_SetConfig+0x148>)
 8006ac2:	781b      	ldrb	r3, [r3, #0]
 8006ac4:	4619      	mov	r1, r3
 8006ac6:	6878      	ldr	r0, [r7, #4]
 8006ac8:	f7ff f903 	bl	8005cd2 <USBD_SetClassConfig>
 8006acc:	4603      	mov	r3, r0
 8006ace:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8006ad0:	7bfb      	ldrb	r3, [r7, #15]
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d00f      	beq.n	8006af6 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 8006ad6:	6839      	ldr	r1, [r7, #0]
 8006ad8:	6878      	ldr	r0, [r7, #4]
 8006ada:	f000 f903 	bl	8006ce4 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	685b      	ldr	r3, [r3, #4]
 8006ae2:	b2db      	uxtb	r3, r3
 8006ae4:	4619      	mov	r1, r3
 8006ae6:	6878      	ldr	r0, [r7, #4]
 8006ae8:	f7ff f90f 	bl	8005d0a <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	2202      	movs	r2, #2
 8006af0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8006af4:	e014      	b.n	8006b20 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8006af6:	6878      	ldr	r0, [r7, #4]
 8006af8:	f000 f9a2 	bl	8006e40 <USBD_CtlSendStatus>
      break;
 8006afc:	e010      	b.n	8006b20 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8006afe:	6878      	ldr	r0, [r7, #4]
 8006b00:	f000 f99e 	bl	8006e40 <USBD_CtlSendStatus>
      break;
 8006b04:	e00c      	b.n	8006b20 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8006b06:	6839      	ldr	r1, [r7, #0]
 8006b08:	6878      	ldr	r0, [r7, #4]
 8006b0a:	f000 f8eb 	bl	8006ce4 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006b0e:	4b07      	ldr	r3, [pc, #28]	; (8006b2c <USBD_SetConfig+0x148>)
 8006b10:	781b      	ldrb	r3, [r3, #0]
 8006b12:	4619      	mov	r1, r3
 8006b14:	6878      	ldr	r0, [r7, #4]
 8006b16:	f7ff f8f8 	bl	8005d0a <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8006b1a:	2303      	movs	r3, #3
 8006b1c:	73fb      	strb	r3, [r7, #15]
      break;
 8006b1e:	bf00      	nop
  }

  return ret;
 8006b20:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b22:	4618      	mov	r0, r3
 8006b24:	3710      	adds	r7, #16
 8006b26:	46bd      	mov	sp, r7
 8006b28:	bd80      	pop	{r7, pc}
 8006b2a:	bf00      	nop
 8006b2c:	20000180 	.word	0x20000180

08006b30 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006b30:	b580      	push	{r7, lr}
 8006b32:	b082      	sub	sp, #8
 8006b34:	af00      	add	r7, sp, #0
 8006b36:	6078      	str	r0, [r7, #4]
 8006b38:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8006b3a:	683b      	ldr	r3, [r7, #0]
 8006b3c:	88db      	ldrh	r3, [r3, #6]
 8006b3e:	2b01      	cmp	r3, #1
 8006b40:	d004      	beq.n	8006b4c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8006b42:	6839      	ldr	r1, [r7, #0]
 8006b44:	6878      	ldr	r0, [r7, #4]
 8006b46:	f000 f8cd 	bl	8006ce4 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8006b4a:	e023      	b.n	8006b94 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006b52:	b2db      	uxtb	r3, r3
 8006b54:	2b02      	cmp	r3, #2
 8006b56:	dc02      	bgt.n	8006b5e <USBD_GetConfig+0x2e>
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	dc03      	bgt.n	8006b64 <USBD_GetConfig+0x34>
 8006b5c:	e015      	b.n	8006b8a <USBD_GetConfig+0x5a>
 8006b5e:	2b03      	cmp	r3, #3
 8006b60:	d00b      	beq.n	8006b7a <USBD_GetConfig+0x4a>
 8006b62:	e012      	b.n	8006b8a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	2200      	movs	r2, #0
 8006b68:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	3308      	adds	r3, #8
 8006b6e:	2201      	movs	r2, #1
 8006b70:	4619      	mov	r1, r3
 8006b72:	6878      	ldr	r0, [r7, #4]
 8006b74:	f000 f927 	bl	8006dc6 <USBD_CtlSendData>
        break;
 8006b78:	e00c      	b.n	8006b94 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	3304      	adds	r3, #4
 8006b7e:	2201      	movs	r2, #1
 8006b80:	4619      	mov	r1, r3
 8006b82:	6878      	ldr	r0, [r7, #4]
 8006b84:	f000 f91f 	bl	8006dc6 <USBD_CtlSendData>
        break;
 8006b88:	e004      	b.n	8006b94 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8006b8a:	6839      	ldr	r1, [r7, #0]
 8006b8c:	6878      	ldr	r0, [r7, #4]
 8006b8e:	f000 f8a9 	bl	8006ce4 <USBD_CtlError>
        break;
 8006b92:	bf00      	nop
}
 8006b94:	bf00      	nop
 8006b96:	3708      	adds	r7, #8
 8006b98:	46bd      	mov	sp, r7
 8006b9a:	bd80      	pop	{r7, pc}

08006b9c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006b9c:	b580      	push	{r7, lr}
 8006b9e:	b082      	sub	sp, #8
 8006ba0:	af00      	add	r7, sp, #0
 8006ba2:	6078      	str	r0, [r7, #4]
 8006ba4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006bac:	b2db      	uxtb	r3, r3
 8006bae:	3b01      	subs	r3, #1
 8006bb0:	2b02      	cmp	r3, #2
 8006bb2:	d81e      	bhi.n	8006bf2 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8006bb4:	683b      	ldr	r3, [r7, #0]
 8006bb6:	88db      	ldrh	r3, [r3, #6]
 8006bb8:	2b02      	cmp	r3, #2
 8006bba:	d004      	beq.n	8006bc6 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8006bbc:	6839      	ldr	r1, [r7, #0]
 8006bbe:	6878      	ldr	r0, [r7, #4]
 8006bc0:	f000 f890 	bl	8006ce4 <USBD_CtlError>
        break;
 8006bc4:	e01a      	b.n	8006bfc <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	2201      	movs	r2, #1
 8006bca:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d005      	beq.n	8006be2 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	68db      	ldr	r3, [r3, #12]
 8006bda:	f043 0202 	orr.w	r2, r3, #2
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	330c      	adds	r3, #12
 8006be6:	2202      	movs	r2, #2
 8006be8:	4619      	mov	r1, r3
 8006bea:	6878      	ldr	r0, [r7, #4]
 8006bec:	f000 f8eb 	bl	8006dc6 <USBD_CtlSendData>
      break;
 8006bf0:	e004      	b.n	8006bfc <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8006bf2:	6839      	ldr	r1, [r7, #0]
 8006bf4:	6878      	ldr	r0, [r7, #4]
 8006bf6:	f000 f875 	bl	8006ce4 <USBD_CtlError>
      break;
 8006bfa:	bf00      	nop
  }
}
 8006bfc:	bf00      	nop
 8006bfe:	3708      	adds	r7, #8
 8006c00:	46bd      	mov	sp, r7
 8006c02:	bd80      	pop	{r7, pc}

08006c04 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006c04:	b580      	push	{r7, lr}
 8006c06:	b082      	sub	sp, #8
 8006c08:	af00      	add	r7, sp, #0
 8006c0a:	6078      	str	r0, [r7, #4]
 8006c0c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006c0e:	683b      	ldr	r3, [r7, #0]
 8006c10:	885b      	ldrh	r3, [r3, #2]
 8006c12:	2b01      	cmp	r3, #1
 8006c14:	d106      	bne.n	8006c24 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	2201      	movs	r2, #1
 8006c1a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8006c1e:	6878      	ldr	r0, [r7, #4]
 8006c20:	f000 f90e 	bl	8006e40 <USBD_CtlSendStatus>
  }
}
 8006c24:	bf00      	nop
 8006c26:	3708      	adds	r7, #8
 8006c28:	46bd      	mov	sp, r7
 8006c2a:	bd80      	pop	{r7, pc}

08006c2c <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006c2c:	b580      	push	{r7, lr}
 8006c2e:	b082      	sub	sp, #8
 8006c30:	af00      	add	r7, sp, #0
 8006c32:	6078      	str	r0, [r7, #4]
 8006c34:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006c3c:	b2db      	uxtb	r3, r3
 8006c3e:	3b01      	subs	r3, #1
 8006c40:	2b02      	cmp	r3, #2
 8006c42:	d80b      	bhi.n	8006c5c <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006c44:	683b      	ldr	r3, [r7, #0]
 8006c46:	885b      	ldrh	r3, [r3, #2]
 8006c48:	2b01      	cmp	r3, #1
 8006c4a:	d10c      	bne.n	8006c66 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	2200      	movs	r2, #0
 8006c50:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8006c54:	6878      	ldr	r0, [r7, #4]
 8006c56:	f000 f8f3 	bl	8006e40 <USBD_CtlSendStatus>
      }
      break;
 8006c5a:	e004      	b.n	8006c66 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8006c5c:	6839      	ldr	r1, [r7, #0]
 8006c5e:	6878      	ldr	r0, [r7, #4]
 8006c60:	f000 f840 	bl	8006ce4 <USBD_CtlError>
      break;
 8006c64:	e000      	b.n	8006c68 <USBD_ClrFeature+0x3c>
      break;
 8006c66:	bf00      	nop
  }
}
 8006c68:	bf00      	nop
 8006c6a:	3708      	adds	r7, #8
 8006c6c:	46bd      	mov	sp, r7
 8006c6e:	bd80      	pop	{r7, pc}

08006c70 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8006c70:	b580      	push	{r7, lr}
 8006c72:	b084      	sub	sp, #16
 8006c74:	af00      	add	r7, sp, #0
 8006c76:	6078      	str	r0, [r7, #4]
 8006c78:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8006c7a:	683b      	ldr	r3, [r7, #0]
 8006c7c:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	781a      	ldrb	r2, [r3, #0]
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	3301      	adds	r3, #1
 8006c8a:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	781a      	ldrb	r2, [r3, #0]
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	3301      	adds	r3, #1
 8006c98:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8006c9a:	68f8      	ldr	r0, [r7, #12]
 8006c9c:	f7ff fabc 	bl	8006218 <SWAPBYTE>
 8006ca0:	4603      	mov	r3, r0
 8006ca2:	461a      	mov	r2, r3
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	3301      	adds	r3, #1
 8006cac:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	3301      	adds	r3, #1
 8006cb2:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8006cb4:	68f8      	ldr	r0, [r7, #12]
 8006cb6:	f7ff faaf 	bl	8006218 <SWAPBYTE>
 8006cba:	4603      	mov	r3, r0
 8006cbc:	461a      	mov	r2, r3
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	3301      	adds	r3, #1
 8006cc6:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	3301      	adds	r3, #1
 8006ccc:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8006cce:	68f8      	ldr	r0, [r7, #12]
 8006cd0:	f7ff faa2 	bl	8006218 <SWAPBYTE>
 8006cd4:	4603      	mov	r3, r0
 8006cd6:	461a      	mov	r2, r3
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	80da      	strh	r2, [r3, #6]
}
 8006cdc:	bf00      	nop
 8006cde:	3710      	adds	r7, #16
 8006ce0:	46bd      	mov	sp, r7
 8006ce2:	bd80      	pop	{r7, pc}

08006ce4 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006ce4:	b580      	push	{r7, lr}
 8006ce6:	b082      	sub	sp, #8
 8006ce8:	af00      	add	r7, sp, #0
 8006cea:	6078      	str	r0, [r7, #4]
 8006cec:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8006cee:	2180      	movs	r1, #128	; 0x80
 8006cf0:	6878      	ldr	r0, [r7, #4]
 8006cf2:	f000 fc76 	bl	80075e2 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8006cf6:	2100      	movs	r1, #0
 8006cf8:	6878      	ldr	r0, [r7, #4]
 8006cfa:	f000 fc72 	bl	80075e2 <USBD_LL_StallEP>
}
 8006cfe:	bf00      	nop
 8006d00:	3708      	adds	r7, #8
 8006d02:	46bd      	mov	sp, r7
 8006d04:	bd80      	pop	{r7, pc}

08006d06 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8006d06:	b580      	push	{r7, lr}
 8006d08:	b086      	sub	sp, #24
 8006d0a:	af00      	add	r7, sp, #0
 8006d0c:	60f8      	str	r0, [r7, #12]
 8006d0e:	60b9      	str	r1, [r7, #8]
 8006d10:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8006d12:	2300      	movs	r3, #0
 8006d14:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d036      	beq.n	8006d8a <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8006d20:	6938      	ldr	r0, [r7, #16]
 8006d22:	f000 f836 	bl	8006d92 <USBD_GetLen>
 8006d26:	4603      	mov	r3, r0
 8006d28:	3301      	adds	r3, #1
 8006d2a:	b29b      	uxth	r3, r3
 8006d2c:	005b      	lsls	r3, r3, #1
 8006d2e:	b29a      	uxth	r2, r3
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8006d34:	7dfb      	ldrb	r3, [r7, #23]
 8006d36:	68ba      	ldr	r2, [r7, #8]
 8006d38:	4413      	add	r3, r2
 8006d3a:	687a      	ldr	r2, [r7, #4]
 8006d3c:	7812      	ldrb	r2, [r2, #0]
 8006d3e:	701a      	strb	r2, [r3, #0]
  idx++;
 8006d40:	7dfb      	ldrb	r3, [r7, #23]
 8006d42:	3301      	adds	r3, #1
 8006d44:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8006d46:	7dfb      	ldrb	r3, [r7, #23]
 8006d48:	68ba      	ldr	r2, [r7, #8]
 8006d4a:	4413      	add	r3, r2
 8006d4c:	2203      	movs	r2, #3
 8006d4e:	701a      	strb	r2, [r3, #0]
  idx++;
 8006d50:	7dfb      	ldrb	r3, [r7, #23]
 8006d52:	3301      	adds	r3, #1
 8006d54:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8006d56:	e013      	b.n	8006d80 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8006d58:	7dfb      	ldrb	r3, [r7, #23]
 8006d5a:	68ba      	ldr	r2, [r7, #8]
 8006d5c:	4413      	add	r3, r2
 8006d5e:	693a      	ldr	r2, [r7, #16]
 8006d60:	7812      	ldrb	r2, [r2, #0]
 8006d62:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8006d64:	693b      	ldr	r3, [r7, #16]
 8006d66:	3301      	adds	r3, #1
 8006d68:	613b      	str	r3, [r7, #16]
    idx++;
 8006d6a:	7dfb      	ldrb	r3, [r7, #23]
 8006d6c:	3301      	adds	r3, #1
 8006d6e:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8006d70:	7dfb      	ldrb	r3, [r7, #23]
 8006d72:	68ba      	ldr	r2, [r7, #8]
 8006d74:	4413      	add	r3, r2
 8006d76:	2200      	movs	r2, #0
 8006d78:	701a      	strb	r2, [r3, #0]
    idx++;
 8006d7a:	7dfb      	ldrb	r3, [r7, #23]
 8006d7c:	3301      	adds	r3, #1
 8006d7e:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8006d80:	693b      	ldr	r3, [r7, #16]
 8006d82:	781b      	ldrb	r3, [r3, #0]
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d1e7      	bne.n	8006d58 <USBD_GetString+0x52>
 8006d88:	e000      	b.n	8006d8c <USBD_GetString+0x86>
    return;
 8006d8a:	bf00      	nop
  }
}
 8006d8c:	3718      	adds	r7, #24
 8006d8e:	46bd      	mov	sp, r7
 8006d90:	bd80      	pop	{r7, pc}

08006d92 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8006d92:	b480      	push	{r7}
 8006d94:	b085      	sub	sp, #20
 8006d96:	af00      	add	r7, sp, #0
 8006d98:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8006d9a:	2300      	movs	r3, #0
 8006d9c:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8006da2:	e005      	b.n	8006db0 <USBD_GetLen+0x1e>
  {
    len++;
 8006da4:	7bfb      	ldrb	r3, [r7, #15]
 8006da6:	3301      	adds	r3, #1
 8006da8:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8006daa:	68bb      	ldr	r3, [r7, #8]
 8006dac:	3301      	adds	r3, #1
 8006dae:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8006db0:	68bb      	ldr	r3, [r7, #8]
 8006db2:	781b      	ldrb	r3, [r3, #0]
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d1f5      	bne.n	8006da4 <USBD_GetLen+0x12>
  }

  return len;
 8006db8:	7bfb      	ldrb	r3, [r7, #15]
}
 8006dba:	4618      	mov	r0, r3
 8006dbc:	3714      	adds	r7, #20
 8006dbe:	46bd      	mov	sp, r7
 8006dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dc4:	4770      	bx	lr

08006dc6 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8006dc6:	b580      	push	{r7, lr}
 8006dc8:	b084      	sub	sp, #16
 8006dca:	af00      	add	r7, sp, #0
 8006dcc:	60f8      	str	r0, [r7, #12]
 8006dce:	60b9      	str	r1, [r7, #8]
 8006dd0:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	2202      	movs	r2, #2
 8006dd6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	687a      	ldr	r2, [r7, #4]
 8006dde:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	687a      	ldr	r2, [r7, #4]
 8006de4:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	68ba      	ldr	r2, [r7, #8]
 8006dea:	2100      	movs	r1, #0
 8006dec:	68f8      	ldr	r0, [r7, #12]
 8006dee:	f000 fc81 	bl	80076f4 <USBD_LL_Transmit>

  return USBD_OK;
 8006df2:	2300      	movs	r3, #0
}
 8006df4:	4618      	mov	r0, r3
 8006df6:	3710      	adds	r7, #16
 8006df8:	46bd      	mov	sp, r7
 8006dfa:	bd80      	pop	{r7, pc}

08006dfc <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8006dfc:	b580      	push	{r7, lr}
 8006dfe:	b084      	sub	sp, #16
 8006e00:	af00      	add	r7, sp, #0
 8006e02:	60f8      	str	r0, [r7, #12]
 8006e04:	60b9      	str	r1, [r7, #8]
 8006e06:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	68ba      	ldr	r2, [r7, #8]
 8006e0c:	2100      	movs	r1, #0
 8006e0e:	68f8      	ldr	r0, [r7, #12]
 8006e10:	f000 fc70 	bl	80076f4 <USBD_LL_Transmit>

  return USBD_OK;
 8006e14:	2300      	movs	r3, #0
}
 8006e16:	4618      	mov	r0, r3
 8006e18:	3710      	adds	r7, #16
 8006e1a:	46bd      	mov	sp, r7
 8006e1c:	bd80      	pop	{r7, pc}

08006e1e <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8006e1e:	b580      	push	{r7, lr}
 8006e20:	b084      	sub	sp, #16
 8006e22:	af00      	add	r7, sp, #0
 8006e24:	60f8      	str	r0, [r7, #12]
 8006e26:	60b9      	str	r1, [r7, #8]
 8006e28:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	68ba      	ldr	r2, [r7, #8]
 8006e2e:	2100      	movs	r1, #0
 8006e30:	68f8      	ldr	r0, [r7, #12]
 8006e32:	f000 fc80 	bl	8007736 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006e36:	2300      	movs	r3, #0
}
 8006e38:	4618      	mov	r0, r3
 8006e3a:	3710      	adds	r7, #16
 8006e3c:	46bd      	mov	sp, r7
 8006e3e:	bd80      	pop	{r7, pc}

08006e40 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8006e40:	b580      	push	{r7, lr}
 8006e42:	b082      	sub	sp, #8
 8006e44:	af00      	add	r7, sp, #0
 8006e46:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	2204      	movs	r2, #4
 8006e4c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8006e50:	2300      	movs	r3, #0
 8006e52:	2200      	movs	r2, #0
 8006e54:	2100      	movs	r1, #0
 8006e56:	6878      	ldr	r0, [r7, #4]
 8006e58:	f000 fc4c 	bl	80076f4 <USBD_LL_Transmit>

  return USBD_OK;
 8006e5c:	2300      	movs	r3, #0
}
 8006e5e:	4618      	mov	r0, r3
 8006e60:	3708      	adds	r7, #8
 8006e62:	46bd      	mov	sp, r7
 8006e64:	bd80      	pop	{r7, pc}

08006e66 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8006e66:	b580      	push	{r7, lr}
 8006e68:	b082      	sub	sp, #8
 8006e6a:	af00      	add	r7, sp, #0
 8006e6c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	2205      	movs	r2, #5
 8006e72:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006e76:	2300      	movs	r3, #0
 8006e78:	2200      	movs	r2, #0
 8006e7a:	2100      	movs	r1, #0
 8006e7c:	6878      	ldr	r0, [r7, #4]
 8006e7e:	f000 fc5a 	bl	8007736 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006e82:	2300      	movs	r3, #0
}
 8006e84:	4618      	mov	r0, r3
 8006e86:	3708      	adds	r7, #8
 8006e88:	46bd      	mov	sp, r7
 8006e8a:	bd80      	pop	{r7, pc}

08006e8c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8006e8c:	b580      	push	{r7, lr}
 8006e8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8006e90:	2200      	movs	r2, #0
 8006e92:	4912      	ldr	r1, [pc, #72]	; (8006edc <MX_USB_DEVICE_Init+0x50>)
 8006e94:	4812      	ldr	r0, [pc, #72]	; (8006ee0 <MX_USB_DEVICE_Init+0x54>)
 8006e96:	f7fe feae 	bl	8005bf6 <USBD_Init>
 8006e9a:	4603      	mov	r3, r0
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d001      	beq.n	8006ea4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8006ea0:	f7f9 fbb2 	bl	8000608 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_MSC) != USBD_OK)
 8006ea4:	490f      	ldr	r1, [pc, #60]	; (8006ee4 <MX_USB_DEVICE_Init+0x58>)
 8006ea6:	480e      	ldr	r0, [pc, #56]	; (8006ee0 <MX_USB_DEVICE_Init+0x54>)
 8006ea8:	f7fe fed5 	bl	8005c56 <USBD_RegisterClass>
 8006eac:	4603      	mov	r3, r0
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d001      	beq.n	8006eb6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8006eb2:	f7f9 fba9 	bl	8000608 <Error_Handler>
  }
  if (USBD_MSC_RegisterStorage(&hUsbDeviceFS, &USBD_Storage_Interface_fops_FS) != USBD_OK)
 8006eb6:	490c      	ldr	r1, [pc, #48]	; (8006ee8 <MX_USB_DEVICE_Init+0x5c>)
 8006eb8:	4809      	ldr	r0, [pc, #36]	; (8006ee0 <MX_USB_DEVICE_Init+0x54>)
 8006eba:	f7fd fa85 	bl	80043c8 <USBD_MSC_RegisterStorage>
 8006ebe:	4603      	mov	r3, r0
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d001      	beq.n	8006ec8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8006ec4:	f7f9 fba0 	bl	8000608 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8006ec8:	4805      	ldr	r0, [pc, #20]	; (8006ee0 <MX_USB_DEVICE_Init+0x54>)
 8006eca:	f7fe feeb 	bl	8005ca4 <USBD_Start>
 8006ece:	4603      	mov	r3, r0
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d001      	beq.n	8006ed8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8006ed4:	f7f9 fb98 	bl	8000608 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8006ed8:	bf00      	nop
 8006eda:	bd80      	pop	{r7, pc}
 8006edc:	200000f4 	.word	0x200000f4
 8006ee0:	20000400 	.word	0x20000400
 8006ee4:	2000000c 	.word	0x2000000c
 8006ee8:	20000144 	.word	0x20000144

08006eec <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006eec:	b480      	push	{r7}
 8006eee:	b083      	sub	sp, #12
 8006ef0:	af00      	add	r7, sp, #0
 8006ef2:	4603      	mov	r3, r0
 8006ef4:	6039      	str	r1, [r7, #0]
 8006ef6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8006ef8:	683b      	ldr	r3, [r7, #0]
 8006efa:	2212      	movs	r2, #18
 8006efc:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8006efe:	4b03      	ldr	r3, [pc, #12]	; (8006f0c <USBD_FS_DeviceDescriptor+0x20>)
}
 8006f00:	4618      	mov	r0, r3
 8006f02:	370c      	adds	r7, #12
 8006f04:	46bd      	mov	sp, r7
 8006f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f0a:	4770      	bx	lr
 8006f0c:	20000110 	.word	0x20000110

08006f10 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006f10:	b480      	push	{r7}
 8006f12:	b083      	sub	sp, #12
 8006f14:	af00      	add	r7, sp, #0
 8006f16:	4603      	mov	r3, r0
 8006f18:	6039      	str	r1, [r7, #0]
 8006f1a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8006f1c:	683b      	ldr	r3, [r7, #0]
 8006f1e:	2204      	movs	r2, #4
 8006f20:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8006f22:	4b03      	ldr	r3, [pc, #12]	; (8006f30 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8006f24:	4618      	mov	r0, r3
 8006f26:	370c      	adds	r7, #12
 8006f28:	46bd      	mov	sp, r7
 8006f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f2e:	4770      	bx	lr
 8006f30:	20000124 	.word	0x20000124

08006f34 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006f34:	b580      	push	{r7, lr}
 8006f36:	b082      	sub	sp, #8
 8006f38:	af00      	add	r7, sp, #0
 8006f3a:	4603      	mov	r3, r0
 8006f3c:	6039      	str	r1, [r7, #0]
 8006f3e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8006f40:	79fb      	ldrb	r3, [r7, #7]
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d105      	bne.n	8006f52 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8006f46:	683a      	ldr	r2, [r7, #0]
 8006f48:	4907      	ldr	r1, [pc, #28]	; (8006f68 <USBD_FS_ProductStrDescriptor+0x34>)
 8006f4a:	4808      	ldr	r0, [pc, #32]	; (8006f6c <USBD_FS_ProductStrDescriptor+0x38>)
 8006f4c:	f7ff fedb 	bl	8006d06 <USBD_GetString>
 8006f50:	e004      	b.n	8006f5c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8006f52:	683a      	ldr	r2, [r7, #0]
 8006f54:	4904      	ldr	r1, [pc, #16]	; (8006f68 <USBD_FS_ProductStrDescriptor+0x34>)
 8006f56:	4805      	ldr	r0, [pc, #20]	; (8006f6c <USBD_FS_ProductStrDescriptor+0x38>)
 8006f58:	f7ff fed5 	bl	8006d06 <USBD_GetString>
  }
  return USBD_StrDesc;
 8006f5c:	4b02      	ldr	r3, [pc, #8]	; (8006f68 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8006f5e:	4618      	mov	r0, r3
 8006f60:	3708      	adds	r7, #8
 8006f62:	46bd      	mov	sp, r7
 8006f64:	bd80      	pop	{r7, pc}
 8006f66:	bf00      	nop
 8006f68:	200006d0 	.word	0x200006d0
 8006f6c:	08007898 	.word	0x08007898

08006f70 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006f70:	b580      	push	{r7, lr}
 8006f72:	b082      	sub	sp, #8
 8006f74:	af00      	add	r7, sp, #0
 8006f76:	4603      	mov	r3, r0
 8006f78:	6039      	str	r1, [r7, #0]
 8006f7a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8006f7c:	683a      	ldr	r2, [r7, #0]
 8006f7e:	4904      	ldr	r1, [pc, #16]	; (8006f90 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8006f80:	4804      	ldr	r0, [pc, #16]	; (8006f94 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8006f82:	f7ff fec0 	bl	8006d06 <USBD_GetString>
  return USBD_StrDesc;
 8006f86:	4b02      	ldr	r3, [pc, #8]	; (8006f90 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8006f88:	4618      	mov	r0, r3
 8006f8a:	3708      	adds	r7, #8
 8006f8c:	46bd      	mov	sp, r7
 8006f8e:	bd80      	pop	{r7, pc}
 8006f90:	200006d0 	.word	0x200006d0
 8006f94:	080078ac 	.word	0x080078ac

08006f98 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006f98:	b580      	push	{r7, lr}
 8006f9a:	b082      	sub	sp, #8
 8006f9c:	af00      	add	r7, sp, #0
 8006f9e:	4603      	mov	r3, r0
 8006fa0:	6039      	str	r1, [r7, #0]
 8006fa2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8006fa4:	683b      	ldr	r3, [r7, #0]
 8006fa6:	221a      	movs	r2, #26
 8006fa8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8006faa:	f000 f843 	bl	8007034 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8006fae:	4b02      	ldr	r3, [pc, #8]	; (8006fb8 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8006fb0:	4618      	mov	r0, r3
 8006fb2:	3708      	adds	r7, #8
 8006fb4:	46bd      	mov	sp, r7
 8006fb6:	bd80      	pop	{r7, pc}
 8006fb8:	20000128 	.word	0x20000128

08006fbc <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006fbc:	b580      	push	{r7, lr}
 8006fbe:	b082      	sub	sp, #8
 8006fc0:	af00      	add	r7, sp, #0
 8006fc2:	4603      	mov	r3, r0
 8006fc4:	6039      	str	r1, [r7, #0]
 8006fc6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8006fc8:	79fb      	ldrb	r3, [r7, #7]
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d105      	bne.n	8006fda <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8006fce:	683a      	ldr	r2, [r7, #0]
 8006fd0:	4907      	ldr	r1, [pc, #28]	; (8006ff0 <USBD_FS_ConfigStrDescriptor+0x34>)
 8006fd2:	4808      	ldr	r0, [pc, #32]	; (8006ff4 <USBD_FS_ConfigStrDescriptor+0x38>)
 8006fd4:	f7ff fe97 	bl	8006d06 <USBD_GetString>
 8006fd8:	e004      	b.n	8006fe4 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8006fda:	683a      	ldr	r2, [r7, #0]
 8006fdc:	4904      	ldr	r1, [pc, #16]	; (8006ff0 <USBD_FS_ConfigStrDescriptor+0x34>)
 8006fde:	4805      	ldr	r0, [pc, #20]	; (8006ff4 <USBD_FS_ConfigStrDescriptor+0x38>)
 8006fe0:	f7ff fe91 	bl	8006d06 <USBD_GetString>
  }
  return USBD_StrDesc;
 8006fe4:	4b02      	ldr	r3, [pc, #8]	; (8006ff0 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8006fe6:	4618      	mov	r0, r3
 8006fe8:	3708      	adds	r7, #8
 8006fea:	46bd      	mov	sp, r7
 8006fec:	bd80      	pop	{r7, pc}
 8006fee:	bf00      	nop
 8006ff0:	200006d0 	.word	0x200006d0
 8006ff4:	080078c0 	.word	0x080078c0

08006ff8 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006ff8:	b580      	push	{r7, lr}
 8006ffa:	b082      	sub	sp, #8
 8006ffc:	af00      	add	r7, sp, #0
 8006ffe:	4603      	mov	r3, r0
 8007000:	6039      	str	r1, [r7, #0]
 8007002:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007004:	79fb      	ldrb	r3, [r7, #7]
 8007006:	2b00      	cmp	r3, #0
 8007008:	d105      	bne.n	8007016 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800700a:	683a      	ldr	r2, [r7, #0]
 800700c:	4907      	ldr	r1, [pc, #28]	; (800702c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800700e:	4808      	ldr	r0, [pc, #32]	; (8007030 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007010:	f7ff fe79 	bl	8006d06 <USBD_GetString>
 8007014:	e004      	b.n	8007020 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007016:	683a      	ldr	r2, [r7, #0]
 8007018:	4904      	ldr	r1, [pc, #16]	; (800702c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800701a:	4805      	ldr	r0, [pc, #20]	; (8007030 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800701c:	f7ff fe73 	bl	8006d06 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007020:	4b02      	ldr	r3, [pc, #8]	; (800702c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8007022:	4618      	mov	r0, r3
 8007024:	3708      	adds	r7, #8
 8007026:	46bd      	mov	sp, r7
 8007028:	bd80      	pop	{r7, pc}
 800702a:	bf00      	nop
 800702c:	200006d0 	.word	0x200006d0
 8007030:	080078cc 	.word	0x080078cc

08007034 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8007034:	b580      	push	{r7, lr}
 8007036:	b084      	sub	sp, #16
 8007038:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800703a:	4b0f      	ldr	r3, [pc, #60]	; (8007078 <Get_SerialNum+0x44>)
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8007040:	4b0e      	ldr	r3, [pc, #56]	; (800707c <Get_SerialNum+0x48>)
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8007046:	4b0e      	ldr	r3, [pc, #56]	; (8007080 <Get_SerialNum+0x4c>)
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800704c:	68fa      	ldr	r2, [r7, #12]
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	4413      	add	r3, r2
 8007052:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	2b00      	cmp	r3, #0
 8007058:	d009      	beq.n	800706e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800705a:	2208      	movs	r2, #8
 800705c:	4909      	ldr	r1, [pc, #36]	; (8007084 <Get_SerialNum+0x50>)
 800705e:	68f8      	ldr	r0, [r7, #12]
 8007060:	f000 f814 	bl	800708c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8007064:	2204      	movs	r2, #4
 8007066:	4908      	ldr	r1, [pc, #32]	; (8007088 <Get_SerialNum+0x54>)
 8007068:	68b8      	ldr	r0, [r7, #8]
 800706a:	f000 f80f 	bl	800708c <IntToUnicode>
  }
}
 800706e:	bf00      	nop
 8007070:	3710      	adds	r7, #16
 8007072:	46bd      	mov	sp, r7
 8007074:	bd80      	pop	{r7, pc}
 8007076:	bf00      	nop
 8007078:	1fff7a10 	.word	0x1fff7a10
 800707c:	1fff7a14 	.word	0x1fff7a14
 8007080:	1fff7a18 	.word	0x1fff7a18
 8007084:	2000012a 	.word	0x2000012a
 8007088:	2000013a 	.word	0x2000013a

0800708c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800708c:	b480      	push	{r7}
 800708e:	b087      	sub	sp, #28
 8007090:	af00      	add	r7, sp, #0
 8007092:	60f8      	str	r0, [r7, #12]
 8007094:	60b9      	str	r1, [r7, #8]
 8007096:	4613      	mov	r3, r2
 8007098:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800709a:	2300      	movs	r3, #0
 800709c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800709e:	2300      	movs	r3, #0
 80070a0:	75fb      	strb	r3, [r7, #23]
 80070a2:	e027      	b.n	80070f4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	0f1b      	lsrs	r3, r3, #28
 80070a8:	2b09      	cmp	r3, #9
 80070aa:	d80b      	bhi.n	80070c4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	0f1b      	lsrs	r3, r3, #28
 80070b0:	b2da      	uxtb	r2, r3
 80070b2:	7dfb      	ldrb	r3, [r7, #23]
 80070b4:	005b      	lsls	r3, r3, #1
 80070b6:	4619      	mov	r1, r3
 80070b8:	68bb      	ldr	r3, [r7, #8]
 80070ba:	440b      	add	r3, r1
 80070bc:	3230      	adds	r2, #48	; 0x30
 80070be:	b2d2      	uxtb	r2, r2
 80070c0:	701a      	strb	r2, [r3, #0]
 80070c2:	e00a      	b.n	80070da <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	0f1b      	lsrs	r3, r3, #28
 80070c8:	b2da      	uxtb	r2, r3
 80070ca:	7dfb      	ldrb	r3, [r7, #23]
 80070cc:	005b      	lsls	r3, r3, #1
 80070ce:	4619      	mov	r1, r3
 80070d0:	68bb      	ldr	r3, [r7, #8]
 80070d2:	440b      	add	r3, r1
 80070d4:	3237      	adds	r2, #55	; 0x37
 80070d6:	b2d2      	uxtb	r2, r2
 80070d8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	011b      	lsls	r3, r3, #4
 80070de:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80070e0:	7dfb      	ldrb	r3, [r7, #23]
 80070e2:	005b      	lsls	r3, r3, #1
 80070e4:	3301      	adds	r3, #1
 80070e6:	68ba      	ldr	r2, [r7, #8]
 80070e8:	4413      	add	r3, r2
 80070ea:	2200      	movs	r2, #0
 80070ec:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80070ee:	7dfb      	ldrb	r3, [r7, #23]
 80070f0:	3301      	adds	r3, #1
 80070f2:	75fb      	strb	r3, [r7, #23]
 80070f4:	7dfa      	ldrb	r2, [r7, #23]
 80070f6:	79fb      	ldrb	r3, [r7, #7]
 80070f8:	429a      	cmp	r2, r3
 80070fa:	d3d3      	bcc.n	80070a4 <IntToUnicode+0x18>
  }
}
 80070fc:	bf00      	nop
 80070fe:	bf00      	nop
 8007100:	371c      	adds	r7, #28
 8007102:	46bd      	mov	sp, r7
 8007104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007108:	4770      	bx	lr

0800710a <STORAGE_Init_FS>:
  * @brief  Initializes over USB FS IP
  * @param  lun:
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Init_FS(uint8_t lun)
{
 800710a:	b480      	push	{r7}
 800710c:	b083      	sub	sp, #12
 800710e:	af00      	add	r7, sp, #0
 8007110:	4603      	mov	r3, r0
 8007112:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 2 */
  return (USBD_OK);
 8007114:	2300      	movs	r3, #0
  /* USER CODE END 2 */
}
 8007116:	4618      	mov	r0, r3
 8007118:	370c      	adds	r7, #12
 800711a:	46bd      	mov	sp, r7
 800711c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007120:	4770      	bx	lr

08007122 <STORAGE_GetCapacity_FS>:
  * @param  block_num: .
  * @param  block_size: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_GetCapacity_FS(uint8_t lun, uint32_t *block_num, uint16_t *block_size)
{
 8007122:	b480      	push	{r7}
 8007124:	b085      	sub	sp, #20
 8007126:	af00      	add	r7, sp, #0
 8007128:	4603      	mov	r3, r0
 800712a:	60b9      	str	r1, [r7, #8]
 800712c:	607a      	str	r2, [r7, #4]
 800712e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 3 */
  *block_num  = STORAGE_BLK_NBR;
 8007130:	68bb      	ldr	r3, [r7, #8]
 8007132:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8007136:	601a      	str	r2, [r3, #0]
  *block_size = STORAGE_BLK_SIZ;
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800713e:	801a      	strh	r2, [r3, #0]
  return (USBD_OK);
 8007140:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8007142:	4618      	mov	r0, r3
 8007144:	3714      	adds	r7, #20
 8007146:	46bd      	mov	sp, r7
 8007148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800714c:	4770      	bx	lr

0800714e <STORAGE_IsReady_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsReady_FS(uint8_t lun)
{
 800714e:	b480      	push	{r7}
 8007150:	b083      	sub	sp, #12
 8007152:	af00      	add	r7, sp, #0
 8007154:	4603      	mov	r3, r0
 8007156:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8007158:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800715a:	4618      	mov	r0, r3
 800715c:	370c      	adds	r7, #12
 800715e:	46bd      	mov	sp, r7
 8007160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007164:	4770      	bx	lr

08007166 <STORAGE_IsWriteProtected_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsWriteProtected_FS(uint8_t lun)
{
 8007166:	b480      	push	{r7}
 8007168:	b083      	sub	sp, #12
 800716a:	af00      	add	r7, sp, #0
 800716c:	4603      	mov	r3, r0
 800716e:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 5 */
  return (USBD_OK);
 8007170:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8007172:	4618      	mov	r0, r3
 8007174:	370c      	adds	r7, #12
 8007176:	46bd      	mov	sp, r7
 8007178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800717c:	4770      	bx	lr

0800717e <STORAGE_Read_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Read_FS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 800717e:	b480      	push	{r7}
 8007180:	b085      	sub	sp, #20
 8007182:	af00      	add	r7, sp, #0
 8007184:	60b9      	str	r1, [r7, #8]
 8007186:	607a      	str	r2, [r7, #4]
 8007188:	461a      	mov	r2, r3
 800718a:	4603      	mov	r3, r0
 800718c:	73fb      	strb	r3, [r7, #15]
 800718e:	4613      	mov	r3, r2
 8007190:	81bb      	strh	r3, [r7, #12]
  /* USER CODE BEGIN 6 */
  return (USBD_OK);
 8007192:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8007194:	4618      	mov	r0, r3
 8007196:	3714      	adds	r7, #20
 8007198:	46bd      	mov	sp, r7
 800719a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800719e:	4770      	bx	lr

080071a0 <STORAGE_Write_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Write_FS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 80071a0:	b480      	push	{r7}
 80071a2:	b085      	sub	sp, #20
 80071a4:	af00      	add	r7, sp, #0
 80071a6:	60b9      	str	r1, [r7, #8]
 80071a8:	607a      	str	r2, [r7, #4]
 80071aa:	461a      	mov	r2, r3
 80071ac:	4603      	mov	r3, r0
 80071ae:	73fb      	strb	r3, [r7, #15]
 80071b0:	4613      	mov	r3, r2
 80071b2:	81bb      	strh	r3, [r7, #12]
  /* USER CODE BEGIN 7 */
  return (USBD_OK);
 80071b4:	2300      	movs	r3, #0
  /* USER CODE END 7 */
}
 80071b6:	4618      	mov	r0, r3
 80071b8:	3714      	adds	r7, #20
 80071ba:	46bd      	mov	sp, r7
 80071bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071c0:	4770      	bx	lr

080071c2 <STORAGE_GetMaxLun_FS>:
  * @brief  .
  * @param  None
  * @retval .
  */
int8_t STORAGE_GetMaxLun_FS(void)
{
 80071c2:	b480      	push	{r7}
 80071c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */
  return (STORAGE_LUN_NBR - 1);
 80071c6:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 80071c8:	4618      	mov	r0, r3
 80071ca:	46bd      	mov	sp, r7
 80071cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071d0:	4770      	bx	lr
	...

080071d4 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80071d4:	b580      	push	{r7, lr}
 80071d6:	b08a      	sub	sp, #40	; 0x28
 80071d8:	af00      	add	r7, sp, #0
 80071da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80071dc:	f107 0314 	add.w	r3, r7, #20
 80071e0:	2200      	movs	r2, #0
 80071e2:	601a      	str	r2, [r3, #0]
 80071e4:	605a      	str	r2, [r3, #4]
 80071e6:	609a      	str	r2, [r3, #8]
 80071e8:	60da      	str	r2, [r3, #12]
 80071ea:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80071f4:	d13a      	bne.n	800726c <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80071f6:	2300      	movs	r3, #0
 80071f8:	613b      	str	r3, [r7, #16]
 80071fa:	4b1e      	ldr	r3, [pc, #120]	; (8007274 <HAL_PCD_MspInit+0xa0>)
 80071fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071fe:	4a1d      	ldr	r2, [pc, #116]	; (8007274 <HAL_PCD_MspInit+0xa0>)
 8007200:	f043 0301 	orr.w	r3, r3, #1
 8007204:	6313      	str	r3, [r2, #48]	; 0x30
 8007206:	4b1b      	ldr	r3, [pc, #108]	; (8007274 <HAL_PCD_MspInit+0xa0>)
 8007208:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800720a:	f003 0301 	and.w	r3, r3, #1
 800720e:	613b      	str	r3, [r7, #16]
 8007210:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8007212:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8007216:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007218:	2302      	movs	r3, #2
 800721a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800721c:	2300      	movs	r3, #0
 800721e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007220:	2303      	movs	r3, #3
 8007222:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8007224:	230a      	movs	r3, #10
 8007226:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007228:	f107 0314 	add.w	r3, r7, #20
 800722c:	4619      	mov	r1, r3
 800722e:	4812      	ldr	r0, [pc, #72]	; (8007278 <HAL_PCD_MspInit+0xa4>)
 8007230:	f7f9 fc30 	bl	8000a94 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8007234:	4b0f      	ldr	r3, [pc, #60]	; (8007274 <HAL_PCD_MspInit+0xa0>)
 8007236:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007238:	4a0e      	ldr	r2, [pc, #56]	; (8007274 <HAL_PCD_MspInit+0xa0>)
 800723a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800723e:	6353      	str	r3, [r2, #52]	; 0x34
 8007240:	2300      	movs	r3, #0
 8007242:	60fb      	str	r3, [r7, #12]
 8007244:	4b0b      	ldr	r3, [pc, #44]	; (8007274 <HAL_PCD_MspInit+0xa0>)
 8007246:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007248:	4a0a      	ldr	r2, [pc, #40]	; (8007274 <HAL_PCD_MspInit+0xa0>)
 800724a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800724e:	6453      	str	r3, [r2, #68]	; 0x44
 8007250:	4b08      	ldr	r3, [pc, #32]	; (8007274 <HAL_PCD_MspInit+0xa0>)
 8007252:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007254:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007258:	60fb      	str	r3, [r7, #12]
 800725a:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800725c:	2200      	movs	r2, #0
 800725e:	2100      	movs	r1, #0
 8007260:	2043      	movs	r0, #67	; 0x43
 8007262:	f7f9 fbe0 	bl	8000a26 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8007266:	2043      	movs	r0, #67	; 0x43
 8007268:	f7f9 fbf9 	bl	8000a5e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800726c:	bf00      	nop
 800726e:	3728      	adds	r7, #40	; 0x28
 8007270:	46bd      	mov	sp, r7
 8007272:	bd80      	pop	{r7, pc}
 8007274:	40023800 	.word	0x40023800
 8007278:	40020000 	.word	0x40020000

0800727c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800727c:	b580      	push	{r7, lr}
 800727e:	b082      	sub	sp, #8
 8007280:	af00      	add	r7, sp, #0
 8007282:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8007290:	4619      	mov	r1, r3
 8007292:	4610      	mov	r0, r2
 8007294:	f7fe fd51 	bl	8005d3a <USBD_LL_SetupStage>
}
 8007298:	bf00      	nop
 800729a:	3708      	adds	r7, #8
 800729c:	46bd      	mov	sp, r7
 800729e:	bd80      	pop	{r7, pc}

080072a0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80072a0:	b580      	push	{r7, lr}
 80072a2:	b082      	sub	sp, #8
 80072a4:	af00      	add	r7, sp, #0
 80072a6:	6078      	str	r0, [r7, #4]
 80072a8:	460b      	mov	r3, r1
 80072aa:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 80072b2:	78fa      	ldrb	r2, [r7, #3]
 80072b4:	6879      	ldr	r1, [r7, #4]
 80072b6:	4613      	mov	r3, r2
 80072b8:	00db      	lsls	r3, r3, #3
 80072ba:	1a9b      	subs	r3, r3, r2
 80072bc:	009b      	lsls	r3, r3, #2
 80072be:	440b      	add	r3, r1
 80072c0:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80072c4:	681a      	ldr	r2, [r3, #0]
 80072c6:	78fb      	ldrb	r3, [r7, #3]
 80072c8:	4619      	mov	r1, r3
 80072ca:	f7fe fd8b 	bl	8005de4 <USBD_LL_DataOutStage>
}
 80072ce:	bf00      	nop
 80072d0:	3708      	adds	r7, #8
 80072d2:	46bd      	mov	sp, r7
 80072d4:	bd80      	pop	{r7, pc}

080072d6 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80072d6:	b580      	push	{r7, lr}
 80072d8:	b082      	sub	sp, #8
 80072da:	af00      	add	r7, sp, #0
 80072dc:	6078      	str	r0, [r7, #4]
 80072de:	460b      	mov	r3, r1
 80072e0:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 80072e8:	78fa      	ldrb	r2, [r7, #3]
 80072ea:	6879      	ldr	r1, [r7, #4]
 80072ec:	4613      	mov	r3, r2
 80072ee:	00db      	lsls	r3, r3, #3
 80072f0:	1a9b      	subs	r3, r3, r2
 80072f2:	009b      	lsls	r3, r3, #2
 80072f4:	440b      	add	r3, r1
 80072f6:	3348      	adds	r3, #72	; 0x48
 80072f8:	681a      	ldr	r2, [r3, #0]
 80072fa:	78fb      	ldrb	r3, [r7, #3]
 80072fc:	4619      	mov	r1, r3
 80072fe:	f7fe fdd4 	bl	8005eaa <USBD_LL_DataInStage>
}
 8007302:	bf00      	nop
 8007304:	3708      	adds	r7, #8
 8007306:	46bd      	mov	sp, r7
 8007308:	bd80      	pop	{r7, pc}

0800730a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800730a:	b580      	push	{r7, lr}
 800730c:	b082      	sub	sp, #8
 800730e:	af00      	add	r7, sp, #0
 8007310:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007318:	4618      	mov	r0, r3
 800731a:	f7fe fee8 	bl	80060ee <USBD_LL_SOF>
}
 800731e:	bf00      	nop
 8007320:	3708      	adds	r7, #8
 8007322:	46bd      	mov	sp, r7
 8007324:	bd80      	pop	{r7, pc}

08007326 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007326:	b580      	push	{r7, lr}
 8007328:	b084      	sub	sp, #16
 800732a:	af00      	add	r7, sp, #0
 800732c:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800732e:	2301      	movs	r3, #1
 8007330:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	68db      	ldr	r3, [r3, #12]
 8007336:	2b02      	cmp	r3, #2
 8007338:	d001      	beq.n	800733e <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800733a:	f7f9 f965 	bl	8000608 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007344:	7bfa      	ldrb	r2, [r7, #15]
 8007346:	4611      	mov	r1, r2
 8007348:	4618      	mov	r0, r3
 800734a:	f7fe fe92 	bl	8006072 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007354:	4618      	mov	r0, r3
 8007356:	f7fe fe3e 	bl	8005fd6 <USBD_LL_Reset>
}
 800735a:	bf00      	nop
 800735c:	3710      	adds	r7, #16
 800735e:	46bd      	mov	sp, r7
 8007360:	bd80      	pop	{r7, pc}
	...

08007364 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007364:	b580      	push	{r7, lr}
 8007366:	b082      	sub	sp, #8
 8007368:	af00      	add	r7, sp, #0
 800736a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007372:	4618      	mov	r0, r3
 8007374:	f7fe fe8d 	bl	8006092 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	687a      	ldr	r2, [r7, #4]
 8007384:	6812      	ldr	r2, [r2, #0]
 8007386:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800738a:	f043 0301 	orr.w	r3, r3, #1
 800738e:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	6a1b      	ldr	r3, [r3, #32]
 8007394:	2b00      	cmp	r3, #0
 8007396:	d005      	beq.n	80073a4 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007398:	4b04      	ldr	r3, [pc, #16]	; (80073ac <HAL_PCD_SuspendCallback+0x48>)
 800739a:	691b      	ldr	r3, [r3, #16]
 800739c:	4a03      	ldr	r2, [pc, #12]	; (80073ac <HAL_PCD_SuspendCallback+0x48>)
 800739e:	f043 0306 	orr.w	r3, r3, #6
 80073a2:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80073a4:	bf00      	nop
 80073a6:	3708      	adds	r7, #8
 80073a8:	46bd      	mov	sp, r7
 80073aa:	bd80      	pop	{r7, pc}
 80073ac:	e000ed00 	.word	0xe000ed00

080073b0 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80073b0:	b580      	push	{r7, lr}
 80073b2:	b082      	sub	sp, #8
 80073b4:	af00      	add	r7, sp, #0
 80073b6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80073be:	4618      	mov	r0, r3
 80073c0:	f7fe fe7d 	bl	80060be <USBD_LL_Resume>
}
 80073c4:	bf00      	nop
 80073c6:	3708      	adds	r7, #8
 80073c8:	46bd      	mov	sp, r7
 80073ca:	bd80      	pop	{r7, pc}

080073cc <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80073cc:	b580      	push	{r7, lr}
 80073ce:	b082      	sub	sp, #8
 80073d0:	af00      	add	r7, sp, #0
 80073d2:	6078      	str	r0, [r7, #4]
 80073d4:	460b      	mov	r3, r1
 80073d6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80073de:	78fa      	ldrb	r2, [r7, #3]
 80073e0:	4611      	mov	r1, r2
 80073e2:	4618      	mov	r0, r3
 80073e4:	f7fe fecb 	bl	800617e <USBD_LL_IsoOUTIncomplete>
}
 80073e8:	bf00      	nop
 80073ea:	3708      	adds	r7, #8
 80073ec:	46bd      	mov	sp, r7
 80073ee:	bd80      	pop	{r7, pc}

080073f0 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80073f0:	b580      	push	{r7, lr}
 80073f2:	b082      	sub	sp, #8
 80073f4:	af00      	add	r7, sp, #0
 80073f6:	6078      	str	r0, [r7, #4]
 80073f8:	460b      	mov	r3, r1
 80073fa:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007402:	78fa      	ldrb	r2, [r7, #3]
 8007404:	4611      	mov	r1, r2
 8007406:	4618      	mov	r0, r3
 8007408:	f7fe fe93 	bl	8006132 <USBD_LL_IsoINIncomplete>
}
 800740c:	bf00      	nop
 800740e:	3708      	adds	r7, #8
 8007410:	46bd      	mov	sp, r7
 8007412:	bd80      	pop	{r7, pc}

08007414 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007414:	b580      	push	{r7, lr}
 8007416:	b082      	sub	sp, #8
 8007418:	af00      	add	r7, sp, #0
 800741a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007422:	4618      	mov	r0, r3
 8007424:	f7fe fed1 	bl	80061ca <USBD_LL_DevConnected>
}
 8007428:	bf00      	nop
 800742a:	3708      	adds	r7, #8
 800742c:	46bd      	mov	sp, r7
 800742e:	bd80      	pop	{r7, pc}

08007430 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007430:	b580      	push	{r7, lr}
 8007432:	b082      	sub	sp, #8
 8007434:	af00      	add	r7, sp, #0
 8007436:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800743e:	4618      	mov	r0, r3
 8007440:	f7fe fece 	bl	80061e0 <USBD_LL_DevDisconnected>
}
 8007444:	bf00      	nop
 8007446:	3708      	adds	r7, #8
 8007448:	46bd      	mov	sp, r7
 800744a:	bd80      	pop	{r7, pc}

0800744c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800744c:	b580      	push	{r7, lr}
 800744e:	b082      	sub	sp, #8
 8007450:	af00      	add	r7, sp, #0
 8007452:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	781b      	ldrb	r3, [r3, #0]
 8007458:	2b00      	cmp	r3, #0
 800745a:	d13c      	bne.n	80074d6 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800745c:	4a20      	ldr	r2, [pc, #128]	; (80074e0 <USBD_LL_Init+0x94>)
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	4a1e      	ldr	r2, [pc, #120]	; (80074e0 <USBD_LL_Init+0x94>)
 8007468:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800746c:	4b1c      	ldr	r3, [pc, #112]	; (80074e0 <USBD_LL_Init+0x94>)
 800746e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8007472:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8007474:	4b1a      	ldr	r3, [pc, #104]	; (80074e0 <USBD_LL_Init+0x94>)
 8007476:	2204      	movs	r2, #4
 8007478:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800747a:	4b19      	ldr	r3, [pc, #100]	; (80074e0 <USBD_LL_Init+0x94>)
 800747c:	2202      	movs	r2, #2
 800747e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8007480:	4b17      	ldr	r3, [pc, #92]	; (80074e0 <USBD_LL_Init+0x94>)
 8007482:	2200      	movs	r2, #0
 8007484:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8007486:	4b16      	ldr	r3, [pc, #88]	; (80074e0 <USBD_LL_Init+0x94>)
 8007488:	2202      	movs	r2, #2
 800748a:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800748c:	4b14      	ldr	r3, [pc, #80]	; (80074e0 <USBD_LL_Init+0x94>)
 800748e:	2200      	movs	r2, #0
 8007490:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8007492:	4b13      	ldr	r3, [pc, #76]	; (80074e0 <USBD_LL_Init+0x94>)
 8007494:	2200      	movs	r2, #0
 8007496:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8007498:	4b11      	ldr	r3, [pc, #68]	; (80074e0 <USBD_LL_Init+0x94>)
 800749a:	2200      	movs	r2, #0
 800749c:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800749e:	4b10      	ldr	r3, [pc, #64]	; (80074e0 <USBD_LL_Init+0x94>)
 80074a0:	2200      	movs	r2, #0
 80074a2:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80074a4:	4b0e      	ldr	r3, [pc, #56]	; (80074e0 <USBD_LL_Init+0x94>)
 80074a6:	2200      	movs	r2, #0
 80074a8:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80074aa:	480d      	ldr	r0, [pc, #52]	; (80074e0 <USBD_LL_Init+0x94>)
 80074ac:	f7f9 fc76 	bl	8000d9c <HAL_PCD_Init>
 80074b0:	4603      	mov	r3, r0
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	d001      	beq.n	80074ba <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 80074b6:	f7f9 f8a7 	bl	8000608 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 80074ba:	2180      	movs	r1, #128	; 0x80
 80074bc:	4808      	ldr	r0, [pc, #32]	; (80074e0 <USBD_LL_Init+0x94>)
 80074be:	f7fa fe00 	bl	80020c2 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 80074c2:	2240      	movs	r2, #64	; 0x40
 80074c4:	2100      	movs	r1, #0
 80074c6:	4806      	ldr	r0, [pc, #24]	; (80074e0 <USBD_LL_Init+0x94>)
 80074c8:	f7fa fdb4 	bl	8002034 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 80074cc:	2280      	movs	r2, #128	; 0x80
 80074ce:	2101      	movs	r1, #1
 80074d0:	4803      	ldr	r0, [pc, #12]	; (80074e0 <USBD_LL_Init+0x94>)
 80074d2:	f7fa fdaf 	bl	8002034 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 80074d6:	2300      	movs	r3, #0
}
 80074d8:	4618      	mov	r0, r3
 80074da:	3708      	adds	r7, #8
 80074dc:	46bd      	mov	sp, r7
 80074de:	bd80      	pop	{r7, pc}
 80074e0:	200008d0 	.word	0x200008d0

080074e4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80074e4:	b580      	push	{r7, lr}
 80074e6:	b084      	sub	sp, #16
 80074e8:	af00      	add	r7, sp, #0
 80074ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80074ec:	2300      	movs	r3, #0
 80074ee:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80074f0:	2300      	movs	r3, #0
 80074f2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80074fa:	4618      	mov	r0, r3
 80074fc:	f7f9 fd6b 	bl	8000fd6 <HAL_PCD_Start>
 8007500:	4603      	mov	r3, r0
 8007502:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007504:	7bfb      	ldrb	r3, [r7, #15]
 8007506:	4618      	mov	r0, r3
 8007508:	f000 f962 	bl	80077d0 <USBD_Get_USB_Status>
 800750c:	4603      	mov	r3, r0
 800750e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007510:	7bbb      	ldrb	r3, [r7, #14]
}
 8007512:	4618      	mov	r0, r3
 8007514:	3710      	adds	r7, #16
 8007516:	46bd      	mov	sp, r7
 8007518:	bd80      	pop	{r7, pc}

0800751a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800751a:	b580      	push	{r7, lr}
 800751c:	b084      	sub	sp, #16
 800751e:	af00      	add	r7, sp, #0
 8007520:	6078      	str	r0, [r7, #4]
 8007522:	4608      	mov	r0, r1
 8007524:	4611      	mov	r1, r2
 8007526:	461a      	mov	r2, r3
 8007528:	4603      	mov	r3, r0
 800752a:	70fb      	strb	r3, [r7, #3]
 800752c:	460b      	mov	r3, r1
 800752e:	70bb      	strb	r3, [r7, #2]
 8007530:	4613      	mov	r3, r2
 8007532:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007534:	2300      	movs	r3, #0
 8007536:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007538:	2300      	movs	r3, #0
 800753a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8007542:	78bb      	ldrb	r3, [r7, #2]
 8007544:	883a      	ldrh	r2, [r7, #0]
 8007546:	78f9      	ldrb	r1, [r7, #3]
 8007548:	f7fa f94f 	bl	80017ea <HAL_PCD_EP_Open>
 800754c:	4603      	mov	r3, r0
 800754e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007550:	7bfb      	ldrb	r3, [r7, #15]
 8007552:	4618      	mov	r0, r3
 8007554:	f000 f93c 	bl	80077d0 <USBD_Get_USB_Status>
 8007558:	4603      	mov	r3, r0
 800755a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800755c:	7bbb      	ldrb	r3, [r7, #14]
}
 800755e:	4618      	mov	r0, r3
 8007560:	3710      	adds	r7, #16
 8007562:	46bd      	mov	sp, r7
 8007564:	bd80      	pop	{r7, pc}

08007566 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007566:	b580      	push	{r7, lr}
 8007568:	b084      	sub	sp, #16
 800756a:	af00      	add	r7, sp, #0
 800756c:	6078      	str	r0, [r7, #4]
 800756e:	460b      	mov	r3, r1
 8007570:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007572:	2300      	movs	r3, #0
 8007574:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007576:	2300      	movs	r3, #0
 8007578:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007580:	78fa      	ldrb	r2, [r7, #3]
 8007582:	4611      	mov	r1, r2
 8007584:	4618      	mov	r0, r3
 8007586:	f7fa f998 	bl	80018ba <HAL_PCD_EP_Close>
 800758a:	4603      	mov	r3, r0
 800758c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800758e:	7bfb      	ldrb	r3, [r7, #15]
 8007590:	4618      	mov	r0, r3
 8007592:	f000 f91d 	bl	80077d0 <USBD_Get_USB_Status>
 8007596:	4603      	mov	r3, r0
 8007598:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800759a:	7bbb      	ldrb	r3, [r7, #14]
}
 800759c:	4618      	mov	r0, r3
 800759e:	3710      	adds	r7, #16
 80075a0:	46bd      	mov	sp, r7
 80075a2:	bd80      	pop	{r7, pc}

080075a4 <USBD_LL_FlushEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_FlushEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80075a4:	b580      	push	{r7, lr}
 80075a6:	b084      	sub	sp, #16
 80075a8:	af00      	add	r7, sp, #0
 80075aa:	6078      	str	r0, [r7, #4]
 80075ac:	460b      	mov	r3, r1
 80075ae:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80075b0:	2300      	movs	r3, #0
 80075b2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80075b4:	2300      	movs	r3, #0
 80075b6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Flush(pdev->pData, ep_addr);
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80075be:	78fa      	ldrb	r2, [r7, #3]
 80075c0:	4611      	mov	r1, r2
 80075c2:	4618      	mov	r0, r3
 80075c4:	f7fa fb2a 	bl	8001c1c <HAL_PCD_EP_Flush>
 80075c8:	4603      	mov	r3, r0
 80075ca:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80075cc:	7bfb      	ldrb	r3, [r7, #15]
 80075ce:	4618      	mov	r0, r3
 80075d0:	f000 f8fe 	bl	80077d0 <USBD_Get_USB_Status>
 80075d4:	4603      	mov	r3, r0
 80075d6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80075d8:	7bbb      	ldrb	r3, [r7, #14]
}
 80075da:	4618      	mov	r0, r3
 80075dc:	3710      	adds	r7, #16
 80075de:	46bd      	mov	sp, r7
 80075e0:	bd80      	pop	{r7, pc}

080075e2 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80075e2:	b580      	push	{r7, lr}
 80075e4:	b084      	sub	sp, #16
 80075e6:	af00      	add	r7, sp, #0
 80075e8:	6078      	str	r0, [r7, #4]
 80075ea:	460b      	mov	r3, r1
 80075ec:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80075ee:	2300      	movs	r3, #0
 80075f0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80075f2:	2300      	movs	r3, #0
 80075f4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80075fc:	78fa      	ldrb	r2, [r7, #3]
 80075fe:	4611      	mov	r1, r2
 8007600:	4618      	mov	r0, r3
 8007602:	f7fa fa51 	bl	8001aa8 <HAL_PCD_EP_SetStall>
 8007606:	4603      	mov	r3, r0
 8007608:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800760a:	7bfb      	ldrb	r3, [r7, #15]
 800760c:	4618      	mov	r0, r3
 800760e:	f000 f8df 	bl	80077d0 <USBD_Get_USB_Status>
 8007612:	4603      	mov	r3, r0
 8007614:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007616:	7bbb      	ldrb	r3, [r7, #14]
}
 8007618:	4618      	mov	r0, r3
 800761a:	3710      	adds	r7, #16
 800761c:	46bd      	mov	sp, r7
 800761e:	bd80      	pop	{r7, pc}

08007620 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007620:	b580      	push	{r7, lr}
 8007622:	b084      	sub	sp, #16
 8007624:	af00      	add	r7, sp, #0
 8007626:	6078      	str	r0, [r7, #4]
 8007628:	460b      	mov	r3, r1
 800762a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800762c:	2300      	movs	r3, #0
 800762e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007630:	2300      	movs	r3, #0
 8007632:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800763a:	78fa      	ldrb	r2, [r7, #3]
 800763c:	4611      	mov	r1, r2
 800763e:	4618      	mov	r0, r3
 8007640:	f7fa fa96 	bl	8001b70 <HAL_PCD_EP_ClrStall>
 8007644:	4603      	mov	r3, r0
 8007646:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007648:	7bfb      	ldrb	r3, [r7, #15]
 800764a:	4618      	mov	r0, r3
 800764c:	f000 f8c0 	bl	80077d0 <USBD_Get_USB_Status>
 8007650:	4603      	mov	r3, r0
 8007652:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007654:	7bbb      	ldrb	r3, [r7, #14]
}
 8007656:	4618      	mov	r0, r3
 8007658:	3710      	adds	r7, #16
 800765a:	46bd      	mov	sp, r7
 800765c:	bd80      	pop	{r7, pc}

0800765e <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800765e:	b480      	push	{r7}
 8007660:	b085      	sub	sp, #20
 8007662:	af00      	add	r7, sp, #0
 8007664:	6078      	str	r0, [r7, #4]
 8007666:	460b      	mov	r3, r1
 8007668:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007670:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8007672:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007676:	2b00      	cmp	r3, #0
 8007678:	da0b      	bge.n	8007692 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800767a:	78fb      	ldrb	r3, [r7, #3]
 800767c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007680:	68f9      	ldr	r1, [r7, #12]
 8007682:	4613      	mov	r3, r2
 8007684:	00db      	lsls	r3, r3, #3
 8007686:	1a9b      	subs	r3, r3, r2
 8007688:	009b      	lsls	r3, r3, #2
 800768a:	440b      	add	r3, r1
 800768c:	333e      	adds	r3, #62	; 0x3e
 800768e:	781b      	ldrb	r3, [r3, #0]
 8007690:	e00b      	b.n	80076aa <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8007692:	78fb      	ldrb	r3, [r7, #3]
 8007694:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007698:	68f9      	ldr	r1, [r7, #12]
 800769a:	4613      	mov	r3, r2
 800769c:	00db      	lsls	r3, r3, #3
 800769e:	1a9b      	subs	r3, r3, r2
 80076a0:	009b      	lsls	r3, r3, #2
 80076a2:	440b      	add	r3, r1
 80076a4:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80076a8:	781b      	ldrb	r3, [r3, #0]
  }
}
 80076aa:	4618      	mov	r0, r3
 80076ac:	3714      	adds	r7, #20
 80076ae:	46bd      	mov	sp, r7
 80076b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076b4:	4770      	bx	lr

080076b6 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80076b6:	b580      	push	{r7, lr}
 80076b8:	b084      	sub	sp, #16
 80076ba:	af00      	add	r7, sp, #0
 80076bc:	6078      	str	r0, [r7, #4]
 80076be:	460b      	mov	r3, r1
 80076c0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80076c2:	2300      	movs	r3, #0
 80076c4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80076c6:	2300      	movs	r3, #0
 80076c8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80076d0:	78fa      	ldrb	r2, [r7, #3]
 80076d2:	4611      	mov	r1, r2
 80076d4:	4618      	mov	r0, r3
 80076d6:	f7fa f863 	bl	80017a0 <HAL_PCD_SetAddress>
 80076da:	4603      	mov	r3, r0
 80076dc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80076de:	7bfb      	ldrb	r3, [r7, #15]
 80076e0:	4618      	mov	r0, r3
 80076e2:	f000 f875 	bl	80077d0 <USBD_Get_USB_Status>
 80076e6:	4603      	mov	r3, r0
 80076e8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80076ea:	7bbb      	ldrb	r3, [r7, #14]
}
 80076ec:	4618      	mov	r0, r3
 80076ee:	3710      	adds	r7, #16
 80076f0:	46bd      	mov	sp, r7
 80076f2:	bd80      	pop	{r7, pc}

080076f4 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80076f4:	b580      	push	{r7, lr}
 80076f6:	b086      	sub	sp, #24
 80076f8:	af00      	add	r7, sp, #0
 80076fa:	60f8      	str	r0, [r7, #12]
 80076fc:	607a      	str	r2, [r7, #4]
 80076fe:	603b      	str	r3, [r7, #0]
 8007700:	460b      	mov	r3, r1
 8007702:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007704:	2300      	movs	r3, #0
 8007706:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007708:	2300      	movs	r3, #0
 800770a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8007712:	7af9      	ldrb	r1, [r7, #11]
 8007714:	683b      	ldr	r3, [r7, #0]
 8007716:	687a      	ldr	r2, [r7, #4]
 8007718:	f7fa f97c 	bl	8001a14 <HAL_PCD_EP_Transmit>
 800771c:	4603      	mov	r3, r0
 800771e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007720:	7dfb      	ldrb	r3, [r7, #23]
 8007722:	4618      	mov	r0, r3
 8007724:	f000 f854 	bl	80077d0 <USBD_Get_USB_Status>
 8007728:	4603      	mov	r3, r0
 800772a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800772c:	7dbb      	ldrb	r3, [r7, #22]
}
 800772e:	4618      	mov	r0, r3
 8007730:	3718      	adds	r7, #24
 8007732:	46bd      	mov	sp, r7
 8007734:	bd80      	pop	{r7, pc}

08007736 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007736:	b580      	push	{r7, lr}
 8007738:	b086      	sub	sp, #24
 800773a:	af00      	add	r7, sp, #0
 800773c:	60f8      	str	r0, [r7, #12]
 800773e:	607a      	str	r2, [r7, #4]
 8007740:	603b      	str	r3, [r7, #0]
 8007742:	460b      	mov	r3, r1
 8007744:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007746:	2300      	movs	r3, #0
 8007748:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800774a:	2300      	movs	r3, #0
 800774c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8007754:	7af9      	ldrb	r1, [r7, #11]
 8007756:	683b      	ldr	r3, [r7, #0]
 8007758:	687a      	ldr	r2, [r7, #4]
 800775a:	f7fa f8f8 	bl	800194e <HAL_PCD_EP_Receive>
 800775e:	4603      	mov	r3, r0
 8007760:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007762:	7dfb      	ldrb	r3, [r7, #23]
 8007764:	4618      	mov	r0, r3
 8007766:	f000 f833 	bl	80077d0 <USBD_Get_USB_Status>
 800776a:	4603      	mov	r3, r0
 800776c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800776e:	7dbb      	ldrb	r3, [r7, #22]
}
 8007770:	4618      	mov	r0, r3
 8007772:	3718      	adds	r7, #24
 8007774:	46bd      	mov	sp, r7
 8007776:	bd80      	pop	{r7, pc}

08007778 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007778:	b580      	push	{r7, lr}
 800777a:	b082      	sub	sp, #8
 800777c:	af00      	add	r7, sp, #0
 800777e:	6078      	str	r0, [r7, #4]
 8007780:	460b      	mov	r3, r1
 8007782:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800778a:	78fa      	ldrb	r2, [r7, #3]
 800778c:	4611      	mov	r1, r2
 800778e:	4618      	mov	r0, r3
 8007790:	f7fa f928 	bl	80019e4 <HAL_PCD_EP_GetRxCount>
 8007794:	4603      	mov	r3, r0
}
 8007796:	4618      	mov	r0, r3
 8007798:	3708      	adds	r7, #8
 800779a:	46bd      	mov	sp, r7
 800779c:	bd80      	pop	{r7, pc}
	...

080077a0 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80077a0:	b480      	push	{r7}
 80077a2:	b083      	sub	sp, #12
 80077a4:	af00      	add	r7, sp, #0
 80077a6:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_MSC_BOT_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80077a8:	4b03      	ldr	r3, [pc, #12]	; (80077b8 <USBD_static_malloc+0x18>)
}
 80077aa:	4618      	mov	r0, r3
 80077ac:	370c      	adds	r7, #12
 80077ae:	46bd      	mov	sp, r7
 80077b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077b4:	4770      	bx	lr
 80077b6:	bf00      	nop
 80077b8:	20000184 	.word	0x20000184

080077bc <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80077bc:	b480      	push	{r7}
 80077be:	b083      	sub	sp, #12
 80077c0:	af00      	add	r7, sp, #0
 80077c2:	6078      	str	r0, [r7, #4]

}
 80077c4:	bf00      	nop
 80077c6:	370c      	adds	r7, #12
 80077c8:	46bd      	mov	sp, r7
 80077ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ce:	4770      	bx	lr

080077d0 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80077d0:	b480      	push	{r7}
 80077d2:	b085      	sub	sp, #20
 80077d4:	af00      	add	r7, sp, #0
 80077d6:	4603      	mov	r3, r0
 80077d8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80077da:	2300      	movs	r3, #0
 80077dc:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80077de:	79fb      	ldrb	r3, [r7, #7]
 80077e0:	2b03      	cmp	r3, #3
 80077e2:	d817      	bhi.n	8007814 <USBD_Get_USB_Status+0x44>
 80077e4:	a201      	add	r2, pc, #4	; (adr r2, 80077ec <USBD_Get_USB_Status+0x1c>)
 80077e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077ea:	bf00      	nop
 80077ec:	080077fd 	.word	0x080077fd
 80077f0:	08007803 	.word	0x08007803
 80077f4:	08007809 	.word	0x08007809
 80077f8:	0800780f 	.word	0x0800780f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80077fc:	2300      	movs	r3, #0
 80077fe:	73fb      	strb	r3, [r7, #15]
    break;
 8007800:	e00b      	b.n	800781a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8007802:	2303      	movs	r3, #3
 8007804:	73fb      	strb	r3, [r7, #15]
    break;
 8007806:	e008      	b.n	800781a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007808:	2301      	movs	r3, #1
 800780a:	73fb      	strb	r3, [r7, #15]
    break;
 800780c:	e005      	b.n	800781a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800780e:	2303      	movs	r3, #3
 8007810:	73fb      	strb	r3, [r7, #15]
    break;
 8007812:	e002      	b.n	800781a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8007814:	2303      	movs	r3, #3
 8007816:	73fb      	strb	r3, [r7, #15]
    break;
 8007818:	bf00      	nop
  }
  return usb_status;
 800781a:	7bfb      	ldrb	r3, [r7, #15]
}
 800781c:	4618      	mov	r0, r3
 800781e:	3714      	adds	r7, #20
 8007820:	46bd      	mov	sp, r7
 8007822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007826:	4770      	bx	lr

08007828 <__libc_init_array>:
 8007828:	b570      	push	{r4, r5, r6, lr}
 800782a:	4d0d      	ldr	r5, [pc, #52]	; (8007860 <__libc_init_array+0x38>)
 800782c:	4c0d      	ldr	r4, [pc, #52]	; (8007864 <__libc_init_array+0x3c>)
 800782e:	1b64      	subs	r4, r4, r5
 8007830:	10a4      	asrs	r4, r4, #2
 8007832:	2600      	movs	r6, #0
 8007834:	42a6      	cmp	r6, r4
 8007836:	d109      	bne.n	800784c <__libc_init_array+0x24>
 8007838:	4d0b      	ldr	r5, [pc, #44]	; (8007868 <__libc_init_array+0x40>)
 800783a:	4c0c      	ldr	r4, [pc, #48]	; (800786c <__libc_init_array+0x44>)
 800783c:	f000 f820 	bl	8007880 <_init>
 8007840:	1b64      	subs	r4, r4, r5
 8007842:	10a4      	asrs	r4, r4, #2
 8007844:	2600      	movs	r6, #0
 8007846:	42a6      	cmp	r6, r4
 8007848:	d105      	bne.n	8007856 <__libc_init_array+0x2e>
 800784a:	bd70      	pop	{r4, r5, r6, pc}
 800784c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007850:	4798      	blx	r3
 8007852:	3601      	adds	r6, #1
 8007854:	e7ee      	b.n	8007834 <__libc_init_array+0xc>
 8007856:	f855 3b04 	ldr.w	r3, [r5], #4
 800785a:	4798      	blx	r3
 800785c:	3601      	adds	r6, #1
 800785e:	e7f2      	b.n	8007846 <__libc_init_array+0x1e>
 8007860:	08007918 	.word	0x08007918
 8007864:	08007918 	.word	0x08007918
 8007868:	08007918 	.word	0x08007918
 800786c:	0800791c 	.word	0x0800791c

08007870 <memset>:
 8007870:	4402      	add	r2, r0
 8007872:	4603      	mov	r3, r0
 8007874:	4293      	cmp	r3, r2
 8007876:	d100      	bne.n	800787a <memset+0xa>
 8007878:	4770      	bx	lr
 800787a:	f803 1b01 	strb.w	r1, [r3], #1
 800787e:	e7f9      	b.n	8007874 <memset+0x4>

08007880 <_init>:
 8007880:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007882:	bf00      	nop
 8007884:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007886:	bc08      	pop	{r3}
 8007888:	469e      	mov	lr, r3
 800788a:	4770      	bx	lr

0800788c <_fini>:
 800788c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800788e:	bf00      	nop
 8007890:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007892:	bc08      	pop	{r3}
 8007894:	469e      	mov	lr, r3
 8007896:	4770      	bx	lr
