
msc.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007764  08000198  08000198  00001198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000078  080078fc  080078fc  000088fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007974  08007974  00009164  2**0
                  CONTENTS
  4 .ARM          00000008  08007974  08007974  00008974  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800797c  0800797c  00009164  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800797c  0800797c  0000897c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007980  08007980  00008980  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000164  20000000  08007984  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000b74  20000164  08007ae8  00009164  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000cd8  08007ae8  00009cd8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00009164  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e007  00000000  00000000  00009194  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002f6b  00000000  00000000  0001719b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c38  00000000  00000000  0001a108  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000008ee  00000000  00000000  0001ad40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018b67  00000000  00000000  0001b62e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010da0  00000000  00000000  00034195  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008720d  00000000  00000000  00044f35  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000cc142  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002f8c  00000000  00000000  000cc188  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004a  00000000  00000000  000cf114  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000164 	.word	0x20000164
 80001b4:	00000000 	.word	0x00000000
 80001b8:	080078e4 	.word	0x080078e4

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000168 	.word	0x20000168
 80001d4:	080078e4 	.word	0x080078e4

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80001ec:	f000 b988 	b.w	8000500 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	468e      	mov	lr, r1
 8000210:	4604      	mov	r4, r0
 8000212:	4688      	mov	r8, r1
 8000214:	2b00      	cmp	r3, #0
 8000216:	d14a      	bne.n	80002ae <__udivmoddi4+0xa6>
 8000218:	428a      	cmp	r2, r1
 800021a:	4617      	mov	r7, r2
 800021c:	d962      	bls.n	80002e4 <__udivmoddi4+0xdc>
 800021e:	fab2 f682 	clz	r6, r2
 8000222:	b14e      	cbz	r6, 8000238 <__udivmoddi4+0x30>
 8000224:	f1c6 0320 	rsb	r3, r6, #32
 8000228:	fa01 f806 	lsl.w	r8, r1, r6
 800022c:	fa20 f303 	lsr.w	r3, r0, r3
 8000230:	40b7      	lsls	r7, r6
 8000232:	ea43 0808 	orr.w	r8, r3, r8
 8000236:	40b4      	lsls	r4, r6
 8000238:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800023c:	fa1f fc87 	uxth.w	ip, r7
 8000240:	fbb8 f1fe 	udiv	r1, r8, lr
 8000244:	0c23      	lsrs	r3, r4, #16
 8000246:	fb0e 8811 	mls	r8, lr, r1, r8
 800024a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800024e:	fb01 f20c 	mul.w	r2, r1, ip
 8000252:	429a      	cmp	r2, r3
 8000254:	d909      	bls.n	800026a <__udivmoddi4+0x62>
 8000256:	18fb      	adds	r3, r7, r3
 8000258:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 800025c:	f080 80ea 	bcs.w	8000434 <__udivmoddi4+0x22c>
 8000260:	429a      	cmp	r2, r3
 8000262:	f240 80e7 	bls.w	8000434 <__udivmoddi4+0x22c>
 8000266:	3902      	subs	r1, #2
 8000268:	443b      	add	r3, r7
 800026a:	1a9a      	subs	r2, r3, r2
 800026c:	b2a3      	uxth	r3, r4
 800026e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000272:	fb0e 2210 	mls	r2, lr, r0, r2
 8000276:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800027a:	fb00 fc0c 	mul.w	ip, r0, ip
 800027e:	459c      	cmp	ip, r3
 8000280:	d909      	bls.n	8000296 <__udivmoddi4+0x8e>
 8000282:	18fb      	adds	r3, r7, r3
 8000284:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000288:	f080 80d6 	bcs.w	8000438 <__udivmoddi4+0x230>
 800028c:	459c      	cmp	ip, r3
 800028e:	f240 80d3 	bls.w	8000438 <__udivmoddi4+0x230>
 8000292:	443b      	add	r3, r7
 8000294:	3802      	subs	r0, #2
 8000296:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800029a:	eba3 030c 	sub.w	r3, r3, ip
 800029e:	2100      	movs	r1, #0
 80002a0:	b11d      	cbz	r5, 80002aa <__udivmoddi4+0xa2>
 80002a2:	40f3      	lsrs	r3, r6
 80002a4:	2200      	movs	r2, #0
 80002a6:	e9c5 3200 	strd	r3, r2, [r5]
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d905      	bls.n	80002be <__udivmoddi4+0xb6>
 80002b2:	b10d      	cbz	r5, 80002b8 <__udivmoddi4+0xb0>
 80002b4:	e9c5 0100 	strd	r0, r1, [r5]
 80002b8:	2100      	movs	r1, #0
 80002ba:	4608      	mov	r0, r1
 80002bc:	e7f5      	b.n	80002aa <__udivmoddi4+0xa2>
 80002be:	fab3 f183 	clz	r1, r3
 80002c2:	2900      	cmp	r1, #0
 80002c4:	d146      	bne.n	8000354 <__udivmoddi4+0x14c>
 80002c6:	4573      	cmp	r3, lr
 80002c8:	d302      	bcc.n	80002d0 <__udivmoddi4+0xc8>
 80002ca:	4282      	cmp	r2, r0
 80002cc:	f200 8105 	bhi.w	80004da <__udivmoddi4+0x2d2>
 80002d0:	1a84      	subs	r4, r0, r2
 80002d2:	eb6e 0203 	sbc.w	r2, lr, r3
 80002d6:	2001      	movs	r0, #1
 80002d8:	4690      	mov	r8, r2
 80002da:	2d00      	cmp	r5, #0
 80002dc:	d0e5      	beq.n	80002aa <__udivmoddi4+0xa2>
 80002de:	e9c5 4800 	strd	r4, r8, [r5]
 80002e2:	e7e2      	b.n	80002aa <__udivmoddi4+0xa2>
 80002e4:	2a00      	cmp	r2, #0
 80002e6:	f000 8090 	beq.w	800040a <__udivmoddi4+0x202>
 80002ea:	fab2 f682 	clz	r6, r2
 80002ee:	2e00      	cmp	r6, #0
 80002f0:	f040 80a4 	bne.w	800043c <__udivmoddi4+0x234>
 80002f4:	1a8a      	subs	r2, r1, r2
 80002f6:	0c03      	lsrs	r3, r0, #16
 80002f8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002fc:	b280      	uxth	r0, r0
 80002fe:	b2bc      	uxth	r4, r7
 8000300:	2101      	movs	r1, #1
 8000302:	fbb2 fcfe 	udiv	ip, r2, lr
 8000306:	fb0e 221c 	mls	r2, lr, ip, r2
 800030a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800030e:	fb04 f20c 	mul.w	r2, r4, ip
 8000312:	429a      	cmp	r2, r3
 8000314:	d907      	bls.n	8000326 <__udivmoddi4+0x11e>
 8000316:	18fb      	adds	r3, r7, r3
 8000318:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 800031c:	d202      	bcs.n	8000324 <__udivmoddi4+0x11c>
 800031e:	429a      	cmp	r2, r3
 8000320:	f200 80e0 	bhi.w	80004e4 <__udivmoddi4+0x2dc>
 8000324:	46c4      	mov	ip, r8
 8000326:	1a9b      	subs	r3, r3, r2
 8000328:	fbb3 f2fe 	udiv	r2, r3, lr
 800032c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000330:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000334:	fb02 f404 	mul.w	r4, r2, r4
 8000338:	429c      	cmp	r4, r3
 800033a:	d907      	bls.n	800034c <__udivmoddi4+0x144>
 800033c:	18fb      	adds	r3, r7, r3
 800033e:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 8000342:	d202      	bcs.n	800034a <__udivmoddi4+0x142>
 8000344:	429c      	cmp	r4, r3
 8000346:	f200 80ca 	bhi.w	80004de <__udivmoddi4+0x2d6>
 800034a:	4602      	mov	r2, r0
 800034c:	1b1b      	subs	r3, r3, r4
 800034e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000352:	e7a5      	b.n	80002a0 <__udivmoddi4+0x98>
 8000354:	f1c1 0620 	rsb	r6, r1, #32
 8000358:	408b      	lsls	r3, r1
 800035a:	fa22 f706 	lsr.w	r7, r2, r6
 800035e:	431f      	orrs	r7, r3
 8000360:	fa0e f401 	lsl.w	r4, lr, r1
 8000364:	fa20 f306 	lsr.w	r3, r0, r6
 8000368:	fa2e fe06 	lsr.w	lr, lr, r6
 800036c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000370:	4323      	orrs	r3, r4
 8000372:	fa00 f801 	lsl.w	r8, r0, r1
 8000376:	fa1f fc87 	uxth.w	ip, r7
 800037a:	fbbe f0f9 	udiv	r0, lr, r9
 800037e:	0c1c      	lsrs	r4, r3, #16
 8000380:	fb09 ee10 	mls	lr, r9, r0, lr
 8000384:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000388:	fb00 fe0c 	mul.w	lr, r0, ip
 800038c:	45a6      	cmp	lr, r4
 800038e:	fa02 f201 	lsl.w	r2, r2, r1
 8000392:	d909      	bls.n	80003a8 <__udivmoddi4+0x1a0>
 8000394:	193c      	adds	r4, r7, r4
 8000396:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 800039a:	f080 809c 	bcs.w	80004d6 <__udivmoddi4+0x2ce>
 800039e:	45a6      	cmp	lr, r4
 80003a0:	f240 8099 	bls.w	80004d6 <__udivmoddi4+0x2ce>
 80003a4:	3802      	subs	r0, #2
 80003a6:	443c      	add	r4, r7
 80003a8:	eba4 040e 	sub.w	r4, r4, lr
 80003ac:	fa1f fe83 	uxth.w	lr, r3
 80003b0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003b4:	fb09 4413 	mls	r4, r9, r3, r4
 80003b8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003bc:	fb03 fc0c 	mul.w	ip, r3, ip
 80003c0:	45a4      	cmp	ip, r4
 80003c2:	d908      	bls.n	80003d6 <__udivmoddi4+0x1ce>
 80003c4:	193c      	adds	r4, r7, r4
 80003c6:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 80003ca:	f080 8082 	bcs.w	80004d2 <__udivmoddi4+0x2ca>
 80003ce:	45a4      	cmp	ip, r4
 80003d0:	d97f      	bls.n	80004d2 <__udivmoddi4+0x2ca>
 80003d2:	3b02      	subs	r3, #2
 80003d4:	443c      	add	r4, r7
 80003d6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003da:	eba4 040c 	sub.w	r4, r4, ip
 80003de:	fba0 ec02 	umull	lr, ip, r0, r2
 80003e2:	4564      	cmp	r4, ip
 80003e4:	4673      	mov	r3, lr
 80003e6:	46e1      	mov	r9, ip
 80003e8:	d362      	bcc.n	80004b0 <__udivmoddi4+0x2a8>
 80003ea:	d05f      	beq.n	80004ac <__udivmoddi4+0x2a4>
 80003ec:	b15d      	cbz	r5, 8000406 <__udivmoddi4+0x1fe>
 80003ee:	ebb8 0203 	subs.w	r2, r8, r3
 80003f2:	eb64 0409 	sbc.w	r4, r4, r9
 80003f6:	fa04 f606 	lsl.w	r6, r4, r6
 80003fa:	fa22 f301 	lsr.w	r3, r2, r1
 80003fe:	431e      	orrs	r6, r3
 8000400:	40cc      	lsrs	r4, r1
 8000402:	e9c5 6400 	strd	r6, r4, [r5]
 8000406:	2100      	movs	r1, #0
 8000408:	e74f      	b.n	80002aa <__udivmoddi4+0xa2>
 800040a:	fbb1 fcf2 	udiv	ip, r1, r2
 800040e:	0c01      	lsrs	r1, r0, #16
 8000410:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000414:	b280      	uxth	r0, r0
 8000416:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800041a:	463b      	mov	r3, r7
 800041c:	4638      	mov	r0, r7
 800041e:	463c      	mov	r4, r7
 8000420:	46b8      	mov	r8, r7
 8000422:	46be      	mov	lr, r7
 8000424:	2620      	movs	r6, #32
 8000426:	fbb1 f1f7 	udiv	r1, r1, r7
 800042a:	eba2 0208 	sub.w	r2, r2, r8
 800042e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000432:	e766      	b.n	8000302 <__udivmoddi4+0xfa>
 8000434:	4601      	mov	r1, r0
 8000436:	e718      	b.n	800026a <__udivmoddi4+0x62>
 8000438:	4610      	mov	r0, r2
 800043a:	e72c      	b.n	8000296 <__udivmoddi4+0x8e>
 800043c:	f1c6 0220 	rsb	r2, r6, #32
 8000440:	fa2e f302 	lsr.w	r3, lr, r2
 8000444:	40b7      	lsls	r7, r6
 8000446:	40b1      	lsls	r1, r6
 8000448:	fa20 f202 	lsr.w	r2, r0, r2
 800044c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000450:	430a      	orrs	r2, r1
 8000452:	fbb3 f8fe 	udiv	r8, r3, lr
 8000456:	b2bc      	uxth	r4, r7
 8000458:	fb0e 3318 	mls	r3, lr, r8, r3
 800045c:	0c11      	lsrs	r1, r2, #16
 800045e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000462:	fb08 f904 	mul.w	r9, r8, r4
 8000466:	40b0      	lsls	r0, r6
 8000468:	4589      	cmp	r9, r1
 800046a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800046e:	b280      	uxth	r0, r0
 8000470:	d93e      	bls.n	80004f0 <__udivmoddi4+0x2e8>
 8000472:	1879      	adds	r1, r7, r1
 8000474:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000478:	d201      	bcs.n	800047e <__udivmoddi4+0x276>
 800047a:	4589      	cmp	r9, r1
 800047c:	d81f      	bhi.n	80004be <__udivmoddi4+0x2b6>
 800047e:	eba1 0109 	sub.w	r1, r1, r9
 8000482:	fbb1 f9fe 	udiv	r9, r1, lr
 8000486:	fb09 f804 	mul.w	r8, r9, r4
 800048a:	fb0e 1119 	mls	r1, lr, r9, r1
 800048e:	b292      	uxth	r2, r2
 8000490:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000494:	4542      	cmp	r2, r8
 8000496:	d229      	bcs.n	80004ec <__udivmoddi4+0x2e4>
 8000498:	18ba      	adds	r2, r7, r2
 800049a:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 800049e:	d2c4      	bcs.n	800042a <__udivmoddi4+0x222>
 80004a0:	4542      	cmp	r2, r8
 80004a2:	d2c2      	bcs.n	800042a <__udivmoddi4+0x222>
 80004a4:	f1a9 0102 	sub.w	r1, r9, #2
 80004a8:	443a      	add	r2, r7
 80004aa:	e7be      	b.n	800042a <__udivmoddi4+0x222>
 80004ac:	45f0      	cmp	r8, lr
 80004ae:	d29d      	bcs.n	80003ec <__udivmoddi4+0x1e4>
 80004b0:	ebbe 0302 	subs.w	r3, lr, r2
 80004b4:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004b8:	3801      	subs	r0, #1
 80004ba:	46e1      	mov	r9, ip
 80004bc:	e796      	b.n	80003ec <__udivmoddi4+0x1e4>
 80004be:	eba7 0909 	sub.w	r9, r7, r9
 80004c2:	4449      	add	r1, r9
 80004c4:	f1a8 0c02 	sub.w	ip, r8, #2
 80004c8:	fbb1 f9fe 	udiv	r9, r1, lr
 80004cc:	fb09 f804 	mul.w	r8, r9, r4
 80004d0:	e7db      	b.n	800048a <__udivmoddi4+0x282>
 80004d2:	4673      	mov	r3, lr
 80004d4:	e77f      	b.n	80003d6 <__udivmoddi4+0x1ce>
 80004d6:	4650      	mov	r0, sl
 80004d8:	e766      	b.n	80003a8 <__udivmoddi4+0x1a0>
 80004da:	4608      	mov	r0, r1
 80004dc:	e6fd      	b.n	80002da <__udivmoddi4+0xd2>
 80004de:	443b      	add	r3, r7
 80004e0:	3a02      	subs	r2, #2
 80004e2:	e733      	b.n	800034c <__udivmoddi4+0x144>
 80004e4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004e8:	443b      	add	r3, r7
 80004ea:	e71c      	b.n	8000326 <__udivmoddi4+0x11e>
 80004ec:	4649      	mov	r1, r9
 80004ee:	e79c      	b.n	800042a <__udivmoddi4+0x222>
 80004f0:	eba1 0109 	sub.w	r1, r1, r9
 80004f4:	46c4      	mov	ip, r8
 80004f6:	fbb1 f9fe 	udiv	r9, r1, lr
 80004fa:	fb09 f804 	mul.w	r8, r9, r4
 80004fe:	e7c4      	b.n	800048a <__udivmoddi4+0x282>

08000500 <__aeabi_idiv0>:
 8000500:	4770      	bx	lr
 8000502:	bf00      	nop

08000504 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000504:	b480      	push	{r7}
 8000506:	b083      	sub	sp, #12
 8000508:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800050a:	2300      	movs	r3, #0
 800050c:	607b      	str	r3, [r7, #4]
 800050e:	4b10      	ldr	r3, [pc, #64]	@ (8000550 <MX_GPIO_Init+0x4c>)
 8000510:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000512:	4a0f      	ldr	r2, [pc, #60]	@ (8000550 <MX_GPIO_Init+0x4c>)
 8000514:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000518:	6313      	str	r3, [r2, #48]	@ 0x30
 800051a:	4b0d      	ldr	r3, [pc, #52]	@ (8000550 <MX_GPIO_Init+0x4c>)
 800051c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800051e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000522:	607b      	str	r3, [r7, #4]
 8000524:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000526:	2300      	movs	r3, #0
 8000528:	603b      	str	r3, [r7, #0]
 800052a:	4b09      	ldr	r3, [pc, #36]	@ (8000550 <MX_GPIO_Init+0x4c>)
 800052c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800052e:	4a08      	ldr	r2, [pc, #32]	@ (8000550 <MX_GPIO_Init+0x4c>)
 8000530:	f043 0301 	orr.w	r3, r3, #1
 8000534:	6313      	str	r3, [r2, #48]	@ 0x30
 8000536:	4b06      	ldr	r3, [pc, #24]	@ (8000550 <MX_GPIO_Init+0x4c>)
 8000538:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800053a:	f003 0301 	and.w	r3, r3, #1
 800053e:	603b      	str	r3, [r7, #0]
 8000540:	683b      	ldr	r3, [r7, #0]

}
 8000542:	bf00      	nop
 8000544:	370c      	adds	r7, #12
 8000546:	46bd      	mov	sp, r7
 8000548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800054c:	4770      	bx	lr
 800054e:	bf00      	nop
 8000550:	40023800 	.word	0x40023800

08000554 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000554:	b580      	push	{r7, lr}
 8000556:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000558:	f000 f914 	bl	8000784 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800055c:	f000 f806 	bl	800056c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000560:	f7ff ffd0 	bl	8000504 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 8000564:	f006 fcc4 	bl	8006ef0 <MX_USB_DEVICE_Init>
  //MX_USB_DEVICE_Init();
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000568:	bf00      	nop
 800056a:	e7fd      	b.n	8000568 <main+0x14>

0800056c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	b094      	sub	sp, #80	@ 0x50
 8000570:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000572:	f107 0320 	add.w	r3, r7, #32
 8000576:	2230      	movs	r2, #48	@ 0x30
 8000578:	2100      	movs	r1, #0
 800057a:	4618      	mov	r0, r3
 800057c:	f007 f986 	bl	800788c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000580:	f107 030c 	add.w	r3, r7, #12
 8000584:	2200      	movs	r2, #0
 8000586:	601a      	str	r2, [r3, #0]
 8000588:	605a      	str	r2, [r3, #4]
 800058a:	609a      	str	r2, [r3, #8]
 800058c:	60da      	str	r2, [r3, #12]
 800058e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000590:	2300      	movs	r3, #0
 8000592:	60bb      	str	r3, [r7, #8]
 8000594:	4b27      	ldr	r3, [pc, #156]	@ (8000634 <SystemClock_Config+0xc8>)
 8000596:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000598:	4a26      	ldr	r2, [pc, #152]	@ (8000634 <SystemClock_Config+0xc8>)
 800059a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800059e:	6413      	str	r3, [r2, #64]	@ 0x40
 80005a0:	4b24      	ldr	r3, [pc, #144]	@ (8000634 <SystemClock_Config+0xc8>)
 80005a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005a4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80005a8:	60bb      	str	r3, [r7, #8]
 80005aa:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005ac:	2300      	movs	r3, #0
 80005ae:	607b      	str	r3, [r7, #4]
 80005b0:	4b21      	ldr	r3, [pc, #132]	@ (8000638 <SystemClock_Config+0xcc>)
 80005b2:	681b      	ldr	r3, [r3, #0]
 80005b4:	4a20      	ldr	r2, [pc, #128]	@ (8000638 <SystemClock_Config+0xcc>)
 80005b6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80005ba:	6013      	str	r3, [r2, #0]
 80005bc:	4b1e      	ldr	r3, [pc, #120]	@ (8000638 <SystemClock_Config+0xcc>)
 80005be:	681b      	ldr	r3, [r3, #0]
 80005c0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80005c4:	607b      	str	r3, [r7, #4]
 80005c6:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005c8:	2301      	movs	r3, #1
 80005ca:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005cc:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80005d0:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005d2:	2302      	movs	r3, #2
 80005d4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005d6:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80005da:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 80005dc:	2319      	movs	r3, #25
 80005de:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 80005e0:	23c0      	movs	r3, #192	@ 0xc0
 80005e2:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005e4:	2302      	movs	r3, #2
 80005e6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80005e8:	2304      	movs	r3, #4
 80005ea:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005ec:	f107 0320 	add.w	r3, r7, #32
 80005f0:	4618      	mov	r0, r3
 80005f2:	f001 fda3 	bl	800213c <HAL_RCC_OscConfig>
 80005f6:	4603      	mov	r3, r0
 80005f8:	2b00      	cmp	r3, #0
 80005fa:	d001      	beq.n	8000600 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80005fc:	f000 f81e 	bl	800063c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000600:	230f      	movs	r3, #15
 8000602:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000604:	2302      	movs	r3, #2
 8000606:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000608:	2300      	movs	r3, #0
 800060a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800060c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000610:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000612:	2300      	movs	r3, #0
 8000614:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000616:	f107 030c 	add.w	r3, r7, #12
 800061a:	2103      	movs	r1, #3
 800061c:	4618      	mov	r0, r3
 800061e:	f002 f805 	bl	800262c <HAL_RCC_ClockConfig>
 8000622:	4603      	mov	r3, r0
 8000624:	2b00      	cmp	r3, #0
 8000626:	d001      	beq.n	800062c <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000628:	f000 f808 	bl	800063c <Error_Handler>
  }
}
 800062c:	bf00      	nop
 800062e:	3750      	adds	r7, #80	@ 0x50
 8000630:	46bd      	mov	sp, r7
 8000632:	bd80      	pop	{r7, pc}
 8000634:	40023800 	.word	0x40023800
 8000638:	40007000 	.word	0x40007000

0800063c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800063c:	b480      	push	{r7}
 800063e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000640:	b672      	cpsid	i
}
 8000642:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000644:	bf00      	nop
 8000646:	e7fd      	b.n	8000644 <Error_Handler+0x8>

08000648 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000648:	b480      	push	{r7}
 800064a:	b083      	sub	sp, #12
 800064c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800064e:	2300      	movs	r3, #0
 8000650:	607b      	str	r3, [r7, #4]
 8000652:	4b10      	ldr	r3, [pc, #64]	@ (8000694 <HAL_MspInit+0x4c>)
 8000654:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000656:	4a0f      	ldr	r2, [pc, #60]	@ (8000694 <HAL_MspInit+0x4c>)
 8000658:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800065c:	6453      	str	r3, [r2, #68]	@ 0x44
 800065e:	4b0d      	ldr	r3, [pc, #52]	@ (8000694 <HAL_MspInit+0x4c>)
 8000660:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000662:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000666:	607b      	str	r3, [r7, #4]
 8000668:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800066a:	2300      	movs	r3, #0
 800066c:	603b      	str	r3, [r7, #0]
 800066e:	4b09      	ldr	r3, [pc, #36]	@ (8000694 <HAL_MspInit+0x4c>)
 8000670:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000672:	4a08      	ldr	r2, [pc, #32]	@ (8000694 <HAL_MspInit+0x4c>)
 8000674:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000678:	6413      	str	r3, [r2, #64]	@ 0x40
 800067a:	4b06      	ldr	r3, [pc, #24]	@ (8000694 <HAL_MspInit+0x4c>)
 800067c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800067e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000682:	603b      	str	r3, [r7, #0]
 8000684:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000686:	bf00      	nop
 8000688:	370c      	adds	r7, #12
 800068a:	46bd      	mov	sp, r7
 800068c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000690:	4770      	bx	lr
 8000692:	bf00      	nop
 8000694:	40023800 	.word	0x40023800

08000698 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000698:	b480      	push	{r7}
 800069a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800069c:	bf00      	nop
 800069e:	e7fd      	b.n	800069c <NMI_Handler+0x4>

080006a0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80006a0:	b480      	push	{r7}
 80006a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80006a4:	bf00      	nop
 80006a6:	e7fd      	b.n	80006a4 <HardFault_Handler+0x4>

080006a8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80006a8:	b480      	push	{r7}
 80006aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80006ac:	bf00      	nop
 80006ae:	e7fd      	b.n	80006ac <MemManage_Handler+0x4>

080006b0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80006b0:	b480      	push	{r7}
 80006b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80006b4:	bf00      	nop
 80006b6:	e7fd      	b.n	80006b4 <BusFault_Handler+0x4>

080006b8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80006b8:	b480      	push	{r7}
 80006ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80006bc:	bf00      	nop
 80006be:	e7fd      	b.n	80006bc <UsageFault_Handler+0x4>

080006c0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80006c0:	b480      	push	{r7}
 80006c2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80006c4:	bf00      	nop
 80006c6:	46bd      	mov	sp, r7
 80006c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006cc:	4770      	bx	lr

080006ce <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80006ce:	b480      	push	{r7}
 80006d0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80006d2:	bf00      	nop
 80006d4:	46bd      	mov	sp, r7
 80006d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006da:	4770      	bx	lr

080006dc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80006dc:	b480      	push	{r7}
 80006de:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80006e0:	bf00      	nop
 80006e2:	46bd      	mov	sp, r7
 80006e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e8:	4770      	bx	lr

080006ea <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80006ea:	b580      	push	{r7, lr}
 80006ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80006ee:	f000 f89b 	bl	8000828 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80006f2:	bf00      	nop
 80006f4:	bd80      	pop	{r7, pc}
	...

080006f8 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80006fc:	4802      	ldr	r0, [pc, #8]	@ (8000708 <OTG_FS_IRQHandler+0x10>)
 80006fe:	f000 fcbd 	bl	800107c <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000702:	bf00      	nop
 8000704:	bd80      	pop	{r7, pc}
 8000706:	bf00      	nop
 8000708:	20000658 	.word	0x20000658

0800070c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800070c:	b480      	push	{r7}
 800070e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000710:	4b06      	ldr	r3, [pc, #24]	@ (800072c <SystemInit+0x20>)
 8000712:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000716:	4a05      	ldr	r2, [pc, #20]	@ (800072c <SystemInit+0x20>)
 8000718:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800071c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000720:	bf00      	nop
 8000722:	46bd      	mov	sp, r7
 8000724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000728:	4770      	bx	lr
 800072a:	bf00      	nop
 800072c:	e000ed00 	.word	0xe000ed00

08000730 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000730:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000768 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000734:	480d      	ldr	r0, [pc, #52]	@ (800076c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000736:	490e      	ldr	r1, [pc, #56]	@ (8000770 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000738:	4a0e      	ldr	r2, [pc, #56]	@ (8000774 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800073a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800073c:	e002      	b.n	8000744 <LoopCopyDataInit>

0800073e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800073e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000740:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000742:	3304      	adds	r3, #4

08000744 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000744:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000746:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000748:	d3f9      	bcc.n	800073e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800074a:	4a0b      	ldr	r2, [pc, #44]	@ (8000778 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800074c:	4c0b      	ldr	r4, [pc, #44]	@ (800077c <LoopFillZerobss+0x26>)
  movs r3, #0
 800074e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000750:	e001      	b.n	8000756 <LoopFillZerobss>

08000752 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000752:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000754:	3204      	adds	r2, #4

08000756 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000756:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000758:	d3fb      	bcc.n	8000752 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800075a:	f7ff ffd7 	bl	800070c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800075e:	f007 f89d 	bl	800789c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000762:	f7ff fef7 	bl	8000554 <main>
  bx  lr    
 8000766:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000768:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800076c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000770:	20000164 	.word	0x20000164
  ldr r2, =_sidata
 8000774:	08007984 	.word	0x08007984
  ldr r2, =_sbss
 8000778:	20000164 	.word	0x20000164
  ldr r4, =_ebss
 800077c:	20000cd8 	.word	0x20000cd8

08000780 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000780:	e7fe      	b.n	8000780 <ADC_IRQHandler>
	...

08000784 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000788:	4b0e      	ldr	r3, [pc, #56]	@ (80007c4 <HAL_Init+0x40>)
 800078a:	681b      	ldr	r3, [r3, #0]
 800078c:	4a0d      	ldr	r2, [pc, #52]	@ (80007c4 <HAL_Init+0x40>)
 800078e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000792:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000794:	4b0b      	ldr	r3, [pc, #44]	@ (80007c4 <HAL_Init+0x40>)
 8000796:	681b      	ldr	r3, [r3, #0]
 8000798:	4a0a      	ldr	r2, [pc, #40]	@ (80007c4 <HAL_Init+0x40>)
 800079a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800079e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80007a0:	4b08      	ldr	r3, [pc, #32]	@ (80007c4 <HAL_Init+0x40>)
 80007a2:	681b      	ldr	r3, [r3, #0]
 80007a4:	4a07      	ldr	r2, [pc, #28]	@ (80007c4 <HAL_Init+0x40>)
 80007a6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80007aa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80007ac:	2003      	movs	r0, #3
 80007ae:	f000 f94f 	bl	8000a50 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80007b2:	200f      	movs	r0, #15
 80007b4:	f000 f808 	bl	80007c8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80007b8:	f7ff ff46 	bl	8000648 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80007bc:	2300      	movs	r3, #0
}
 80007be:	4618      	mov	r0, r3
 80007c0:	bd80      	pop	{r7, pc}
 80007c2:	bf00      	nop
 80007c4:	40023c00 	.word	0x40023c00

080007c8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b082      	sub	sp, #8
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80007d0:	4b12      	ldr	r3, [pc, #72]	@ (800081c <HAL_InitTick+0x54>)
 80007d2:	681a      	ldr	r2, [r3, #0]
 80007d4:	4b12      	ldr	r3, [pc, #72]	@ (8000820 <HAL_InitTick+0x58>)
 80007d6:	781b      	ldrb	r3, [r3, #0]
 80007d8:	4619      	mov	r1, r3
 80007da:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80007de:	fbb3 f3f1 	udiv	r3, r3, r1
 80007e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80007e6:	4618      	mov	r0, r3
 80007e8:	f000 f967 	bl	8000aba <HAL_SYSTICK_Config>
 80007ec:	4603      	mov	r3, r0
 80007ee:	2b00      	cmp	r3, #0
 80007f0:	d001      	beq.n	80007f6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80007f2:	2301      	movs	r3, #1
 80007f4:	e00e      	b.n	8000814 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	2b0f      	cmp	r3, #15
 80007fa:	d80a      	bhi.n	8000812 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80007fc:	2200      	movs	r2, #0
 80007fe:	6879      	ldr	r1, [r7, #4]
 8000800:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000804:	f000 f92f 	bl	8000a66 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000808:	4a06      	ldr	r2, [pc, #24]	@ (8000824 <HAL_InitTick+0x5c>)
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800080e:	2300      	movs	r3, #0
 8000810:	e000      	b.n	8000814 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000812:	2301      	movs	r3, #1
}
 8000814:	4618      	mov	r0, r3
 8000816:	3708      	adds	r7, #8
 8000818:	46bd      	mov	sp, r7
 800081a:	bd80      	pop	{r7, pc}
 800081c:	20000000 	.word	0x20000000
 8000820:	20000008 	.word	0x20000008
 8000824:	20000004 	.word	0x20000004

08000828 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000828:	b480      	push	{r7}
 800082a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800082c:	4b06      	ldr	r3, [pc, #24]	@ (8000848 <HAL_IncTick+0x20>)
 800082e:	781b      	ldrb	r3, [r3, #0]
 8000830:	461a      	mov	r2, r3
 8000832:	4b06      	ldr	r3, [pc, #24]	@ (800084c <HAL_IncTick+0x24>)
 8000834:	681b      	ldr	r3, [r3, #0]
 8000836:	4413      	add	r3, r2
 8000838:	4a04      	ldr	r2, [pc, #16]	@ (800084c <HAL_IncTick+0x24>)
 800083a:	6013      	str	r3, [r2, #0]
}
 800083c:	bf00      	nop
 800083e:	46bd      	mov	sp, r7
 8000840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000844:	4770      	bx	lr
 8000846:	bf00      	nop
 8000848:	20000008 	.word	0x20000008
 800084c:	20000180 	.word	0x20000180

08000850 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000850:	b480      	push	{r7}
 8000852:	af00      	add	r7, sp, #0
  return uwTick;
 8000854:	4b03      	ldr	r3, [pc, #12]	@ (8000864 <HAL_GetTick+0x14>)
 8000856:	681b      	ldr	r3, [r3, #0]
}
 8000858:	4618      	mov	r0, r3
 800085a:	46bd      	mov	sp, r7
 800085c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000860:	4770      	bx	lr
 8000862:	bf00      	nop
 8000864:	20000180 	.word	0x20000180

08000868 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	b084      	sub	sp, #16
 800086c:	af00      	add	r7, sp, #0
 800086e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000870:	f7ff ffee 	bl	8000850 <HAL_GetTick>
 8000874:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800087a:	68fb      	ldr	r3, [r7, #12]
 800087c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8000880:	d005      	beq.n	800088e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000882:	4b0a      	ldr	r3, [pc, #40]	@ (80008ac <HAL_Delay+0x44>)
 8000884:	781b      	ldrb	r3, [r3, #0]
 8000886:	461a      	mov	r2, r3
 8000888:	68fb      	ldr	r3, [r7, #12]
 800088a:	4413      	add	r3, r2
 800088c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800088e:	bf00      	nop
 8000890:	f7ff ffde 	bl	8000850 <HAL_GetTick>
 8000894:	4602      	mov	r2, r0
 8000896:	68bb      	ldr	r3, [r7, #8]
 8000898:	1ad3      	subs	r3, r2, r3
 800089a:	68fa      	ldr	r2, [r7, #12]
 800089c:	429a      	cmp	r2, r3
 800089e:	d8f7      	bhi.n	8000890 <HAL_Delay+0x28>
  {
  }
}
 80008a0:	bf00      	nop
 80008a2:	bf00      	nop
 80008a4:	3710      	adds	r7, #16
 80008a6:	46bd      	mov	sp, r7
 80008a8:	bd80      	pop	{r7, pc}
 80008aa:	bf00      	nop
 80008ac:	20000008 	.word	0x20000008

080008b0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80008b0:	b480      	push	{r7}
 80008b2:	b085      	sub	sp, #20
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	f003 0307 	and.w	r3, r3, #7
 80008be:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80008c0:	4b0c      	ldr	r3, [pc, #48]	@ (80008f4 <__NVIC_SetPriorityGrouping+0x44>)
 80008c2:	68db      	ldr	r3, [r3, #12]
 80008c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80008c6:	68ba      	ldr	r2, [r7, #8]
 80008c8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80008cc:	4013      	ands	r3, r2
 80008ce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80008d0:	68fb      	ldr	r3, [r7, #12]
 80008d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80008d4:	68bb      	ldr	r3, [r7, #8]
 80008d6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80008d8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80008dc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80008e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80008e2:	4a04      	ldr	r2, [pc, #16]	@ (80008f4 <__NVIC_SetPriorityGrouping+0x44>)
 80008e4:	68bb      	ldr	r3, [r7, #8]
 80008e6:	60d3      	str	r3, [r2, #12]
}
 80008e8:	bf00      	nop
 80008ea:	3714      	adds	r7, #20
 80008ec:	46bd      	mov	sp, r7
 80008ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f2:	4770      	bx	lr
 80008f4:	e000ed00 	.word	0xe000ed00

080008f8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80008f8:	b480      	push	{r7}
 80008fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80008fc:	4b04      	ldr	r3, [pc, #16]	@ (8000910 <__NVIC_GetPriorityGrouping+0x18>)
 80008fe:	68db      	ldr	r3, [r3, #12]
 8000900:	0a1b      	lsrs	r3, r3, #8
 8000902:	f003 0307 	and.w	r3, r3, #7
}
 8000906:	4618      	mov	r0, r3
 8000908:	46bd      	mov	sp, r7
 800090a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800090e:	4770      	bx	lr
 8000910:	e000ed00 	.word	0xe000ed00

08000914 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000914:	b480      	push	{r7}
 8000916:	b083      	sub	sp, #12
 8000918:	af00      	add	r7, sp, #0
 800091a:	4603      	mov	r3, r0
 800091c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800091e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000922:	2b00      	cmp	r3, #0
 8000924:	db0b      	blt.n	800093e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000926:	79fb      	ldrb	r3, [r7, #7]
 8000928:	f003 021f 	and.w	r2, r3, #31
 800092c:	4907      	ldr	r1, [pc, #28]	@ (800094c <__NVIC_EnableIRQ+0x38>)
 800092e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000932:	095b      	lsrs	r3, r3, #5
 8000934:	2001      	movs	r0, #1
 8000936:	fa00 f202 	lsl.w	r2, r0, r2
 800093a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800093e:	bf00      	nop
 8000940:	370c      	adds	r7, #12
 8000942:	46bd      	mov	sp, r7
 8000944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000948:	4770      	bx	lr
 800094a:	bf00      	nop
 800094c:	e000e100 	.word	0xe000e100

08000950 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000950:	b480      	push	{r7}
 8000952:	b083      	sub	sp, #12
 8000954:	af00      	add	r7, sp, #0
 8000956:	4603      	mov	r3, r0
 8000958:	6039      	str	r1, [r7, #0]
 800095a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800095c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000960:	2b00      	cmp	r3, #0
 8000962:	db0a      	blt.n	800097a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000964:	683b      	ldr	r3, [r7, #0]
 8000966:	b2da      	uxtb	r2, r3
 8000968:	490c      	ldr	r1, [pc, #48]	@ (800099c <__NVIC_SetPriority+0x4c>)
 800096a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800096e:	0112      	lsls	r2, r2, #4
 8000970:	b2d2      	uxtb	r2, r2
 8000972:	440b      	add	r3, r1
 8000974:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000978:	e00a      	b.n	8000990 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800097a:	683b      	ldr	r3, [r7, #0]
 800097c:	b2da      	uxtb	r2, r3
 800097e:	4908      	ldr	r1, [pc, #32]	@ (80009a0 <__NVIC_SetPriority+0x50>)
 8000980:	79fb      	ldrb	r3, [r7, #7]
 8000982:	f003 030f 	and.w	r3, r3, #15
 8000986:	3b04      	subs	r3, #4
 8000988:	0112      	lsls	r2, r2, #4
 800098a:	b2d2      	uxtb	r2, r2
 800098c:	440b      	add	r3, r1
 800098e:	761a      	strb	r2, [r3, #24]
}
 8000990:	bf00      	nop
 8000992:	370c      	adds	r7, #12
 8000994:	46bd      	mov	sp, r7
 8000996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800099a:	4770      	bx	lr
 800099c:	e000e100 	.word	0xe000e100
 80009a0:	e000ed00 	.word	0xe000ed00

080009a4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80009a4:	b480      	push	{r7}
 80009a6:	b089      	sub	sp, #36	@ 0x24
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	60f8      	str	r0, [r7, #12]
 80009ac:	60b9      	str	r1, [r7, #8]
 80009ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80009b0:	68fb      	ldr	r3, [r7, #12]
 80009b2:	f003 0307 	and.w	r3, r3, #7
 80009b6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80009b8:	69fb      	ldr	r3, [r7, #28]
 80009ba:	f1c3 0307 	rsb	r3, r3, #7
 80009be:	2b04      	cmp	r3, #4
 80009c0:	bf28      	it	cs
 80009c2:	2304      	movcs	r3, #4
 80009c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80009c6:	69fb      	ldr	r3, [r7, #28]
 80009c8:	3304      	adds	r3, #4
 80009ca:	2b06      	cmp	r3, #6
 80009cc:	d902      	bls.n	80009d4 <NVIC_EncodePriority+0x30>
 80009ce:	69fb      	ldr	r3, [r7, #28]
 80009d0:	3b03      	subs	r3, #3
 80009d2:	e000      	b.n	80009d6 <NVIC_EncodePriority+0x32>
 80009d4:	2300      	movs	r3, #0
 80009d6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009d8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80009dc:	69bb      	ldr	r3, [r7, #24]
 80009de:	fa02 f303 	lsl.w	r3, r2, r3
 80009e2:	43da      	mvns	r2, r3
 80009e4:	68bb      	ldr	r3, [r7, #8]
 80009e6:	401a      	ands	r2, r3
 80009e8:	697b      	ldr	r3, [r7, #20]
 80009ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80009ec:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80009f0:	697b      	ldr	r3, [r7, #20]
 80009f2:	fa01 f303 	lsl.w	r3, r1, r3
 80009f6:	43d9      	mvns	r1, r3
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009fc:	4313      	orrs	r3, r2
         );
}
 80009fe:	4618      	mov	r0, r3
 8000a00:	3724      	adds	r7, #36	@ 0x24
 8000a02:	46bd      	mov	sp, r7
 8000a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a08:	4770      	bx	lr
	...

08000a0c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b082      	sub	sp, #8
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	3b01      	subs	r3, #1
 8000a18:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000a1c:	d301      	bcc.n	8000a22 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000a1e:	2301      	movs	r3, #1
 8000a20:	e00f      	b.n	8000a42 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a22:	4a0a      	ldr	r2, [pc, #40]	@ (8000a4c <SysTick_Config+0x40>)
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	3b01      	subs	r3, #1
 8000a28:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000a2a:	210f      	movs	r1, #15
 8000a2c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000a30:	f7ff ff8e 	bl	8000950 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a34:	4b05      	ldr	r3, [pc, #20]	@ (8000a4c <SysTick_Config+0x40>)
 8000a36:	2200      	movs	r2, #0
 8000a38:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a3a:	4b04      	ldr	r3, [pc, #16]	@ (8000a4c <SysTick_Config+0x40>)
 8000a3c:	2207      	movs	r2, #7
 8000a3e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000a40:	2300      	movs	r3, #0
}
 8000a42:	4618      	mov	r0, r3
 8000a44:	3708      	adds	r7, #8
 8000a46:	46bd      	mov	sp, r7
 8000a48:	bd80      	pop	{r7, pc}
 8000a4a:	bf00      	nop
 8000a4c:	e000e010 	.word	0xe000e010

08000a50 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b082      	sub	sp, #8
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000a58:	6878      	ldr	r0, [r7, #4]
 8000a5a:	f7ff ff29 	bl	80008b0 <__NVIC_SetPriorityGrouping>
}
 8000a5e:	bf00      	nop
 8000a60:	3708      	adds	r7, #8
 8000a62:	46bd      	mov	sp, r7
 8000a64:	bd80      	pop	{r7, pc}

08000a66 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000a66:	b580      	push	{r7, lr}
 8000a68:	b086      	sub	sp, #24
 8000a6a:	af00      	add	r7, sp, #0
 8000a6c:	4603      	mov	r3, r0
 8000a6e:	60b9      	str	r1, [r7, #8]
 8000a70:	607a      	str	r2, [r7, #4]
 8000a72:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000a74:	2300      	movs	r3, #0
 8000a76:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000a78:	f7ff ff3e 	bl	80008f8 <__NVIC_GetPriorityGrouping>
 8000a7c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000a7e:	687a      	ldr	r2, [r7, #4]
 8000a80:	68b9      	ldr	r1, [r7, #8]
 8000a82:	6978      	ldr	r0, [r7, #20]
 8000a84:	f7ff ff8e 	bl	80009a4 <NVIC_EncodePriority>
 8000a88:	4602      	mov	r2, r0
 8000a8a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000a8e:	4611      	mov	r1, r2
 8000a90:	4618      	mov	r0, r3
 8000a92:	f7ff ff5d 	bl	8000950 <__NVIC_SetPriority>
}
 8000a96:	bf00      	nop
 8000a98:	3718      	adds	r7, #24
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	bd80      	pop	{r7, pc}

08000a9e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a9e:	b580      	push	{r7, lr}
 8000aa0:	b082      	sub	sp, #8
 8000aa2:	af00      	add	r7, sp, #0
 8000aa4:	4603      	mov	r3, r0
 8000aa6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000aa8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000aac:	4618      	mov	r0, r3
 8000aae:	f7ff ff31 	bl	8000914 <__NVIC_EnableIRQ>
}
 8000ab2:	bf00      	nop
 8000ab4:	3708      	adds	r7, #8
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	bd80      	pop	{r7, pc}

08000aba <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000aba:	b580      	push	{r7, lr}
 8000abc:	b082      	sub	sp, #8
 8000abe:	af00      	add	r7, sp, #0
 8000ac0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000ac2:	6878      	ldr	r0, [r7, #4]
 8000ac4:	f7ff ffa2 	bl	8000a0c <SysTick_Config>
 8000ac8:	4603      	mov	r3, r0
}
 8000aca:	4618      	mov	r0, r3
 8000acc:	3708      	adds	r7, #8
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	bd80      	pop	{r7, pc}
	...

08000ad4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ad4:	b480      	push	{r7}
 8000ad6:	b089      	sub	sp, #36	@ 0x24
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	6078      	str	r0, [r7, #4]
 8000adc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000ade:	2300      	movs	r3, #0
 8000ae0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000aea:	2300      	movs	r3, #0
 8000aec:	61fb      	str	r3, [r7, #28]
 8000aee:	e159      	b.n	8000da4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000af0:	2201      	movs	r2, #1
 8000af2:	69fb      	ldr	r3, [r7, #28]
 8000af4:	fa02 f303 	lsl.w	r3, r2, r3
 8000af8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000afa:	683b      	ldr	r3, [r7, #0]
 8000afc:	681b      	ldr	r3, [r3, #0]
 8000afe:	697a      	ldr	r2, [r7, #20]
 8000b00:	4013      	ands	r3, r2
 8000b02:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000b04:	693a      	ldr	r2, [r7, #16]
 8000b06:	697b      	ldr	r3, [r7, #20]
 8000b08:	429a      	cmp	r2, r3
 8000b0a:	f040 8148 	bne.w	8000d9e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000b0e:	683b      	ldr	r3, [r7, #0]
 8000b10:	685b      	ldr	r3, [r3, #4]
 8000b12:	f003 0303 	and.w	r3, r3, #3
 8000b16:	2b01      	cmp	r3, #1
 8000b18:	d005      	beq.n	8000b26 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000b1a:	683b      	ldr	r3, [r7, #0]
 8000b1c:	685b      	ldr	r3, [r3, #4]
 8000b1e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000b22:	2b02      	cmp	r3, #2
 8000b24:	d130      	bne.n	8000b88 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	689b      	ldr	r3, [r3, #8]
 8000b2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000b2c:	69fb      	ldr	r3, [r7, #28]
 8000b2e:	005b      	lsls	r3, r3, #1
 8000b30:	2203      	movs	r2, #3
 8000b32:	fa02 f303 	lsl.w	r3, r2, r3
 8000b36:	43db      	mvns	r3, r3
 8000b38:	69ba      	ldr	r2, [r7, #24]
 8000b3a:	4013      	ands	r3, r2
 8000b3c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000b3e:	683b      	ldr	r3, [r7, #0]
 8000b40:	68da      	ldr	r2, [r3, #12]
 8000b42:	69fb      	ldr	r3, [r7, #28]
 8000b44:	005b      	lsls	r3, r3, #1
 8000b46:	fa02 f303 	lsl.w	r3, r2, r3
 8000b4a:	69ba      	ldr	r2, [r7, #24]
 8000b4c:	4313      	orrs	r3, r2
 8000b4e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	69ba      	ldr	r2, [r7, #24]
 8000b54:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	685b      	ldr	r3, [r3, #4]
 8000b5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000b5c:	2201      	movs	r2, #1
 8000b5e:	69fb      	ldr	r3, [r7, #28]
 8000b60:	fa02 f303 	lsl.w	r3, r2, r3
 8000b64:	43db      	mvns	r3, r3
 8000b66:	69ba      	ldr	r2, [r7, #24]
 8000b68:	4013      	ands	r3, r2
 8000b6a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000b6c:	683b      	ldr	r3, [r7, #0]
 8000b6e:	685b      	ldr	r3, [r3, #4]
 8000b70:	091b      	lsrs	r3, r3, #4
 8000b72:	f003 0201 	and.w	r2, r3, #1
 8000b76:	69fb      	ldr	r3, [r7, #28]
 8000b78:	fa02 f303 	lsl.w	r3, r2, r3
 8000b7c:	69ba      	ldr	r2, [r7, #24]
 8000b7e:	4313      	orrs	r3, r2
 8000b80:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	69ba      	ldr	r2, [r7, #24]
 8000b86:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000b88:	683b      	ldr	r3, [r7, #0]
 8000b8a:	685b      	ldr	r3, [r3, #4]
 8000b8c:	f003 0303 	and.w	r3, r3, #3
 8000b90:	2b03      	cmp	r3, #3
 8000b92:	d017      	beq.n	8000bc4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	68db      	ldr	r3, [r3, #12]
 8000b98:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000b9a:	69fb      	ldr	r3, [r7, #28]
 8000b9c:	005b      	lsls	r3, r3, #1
 8000b9e:	2203      	movs	r2, #3
 8000ba0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ba4:	43db      	mvns	r3, r3
 8000ba6:	69ba      	ldr	r2, [r7, #24]
 8000ba8:	4013      	ands	r3, r2
 8000baa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000bac:	683b      	ldr	r3, [r7, #0]
 8000bae:	689a      	ldr	r2, [r3, #8]
 8000bb0:	69fb      	ldr	r3, [r7, #28]
 8000bb2:	005b      	lsls	r3, r3, #1
 8000bb4:	fa02 f303 	lsl.w	r3, r2, r3
 8000bb8:	69ba      	ldr	r2, [r7, #24]
 8000bba:	4313      	orrs	r3, r2
 8000bbc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	69ba      	ldr	r2, [r7, #24]
 8000bc2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000bc4:	683b      	ldr	r3, [r7, #0]
 8000bc6:	685b      	ldr	r3, [r3, #4]
 8000bc8:	f003 0303 	and.w	r3, r3, #3
 8000bcc:	2b02      	cmp	r3, #2
 8000bce:	d123      	bne.n	8000c18 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000bd0:	69fb      	ldr	r3, [r7, #28]
 8000bd2:	08da      	lsrs	r2, r3, #3
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	3208      	adds	r2, #8
 8000bd8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000bdc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000bde:	69fb      	ldr	r3, [r7, #28]
 8000be0:	f003 0307 	and.w	r3, r3, #7
 8000be4:	009b      	lsls	r3, r3, #2
 8000be6:	220f      	movs	r2, #15
 8000be8:	fa02 f303 	lsl.w	r3, r2, r3
 8000bec:	43db      	mvns	r3, r3
 8000bee:	69ba      	ldr	r2, [r7, #24]
 8000bf0:	4013      	ands	r3, r2
 8000bf2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000bf4:	683b      	ldr	r3, [r7, #0]
 8000bf6:	691a      	ldr	r2, [r3, #16]
 8000bf8:	69fb      	ldr	r3, [r7, #28]
 8000bfa:	f003 0307 	and.w	r3, r3, #7
 8000bfe:	009b      	lsls	r3, r3, #2
 8000c00:	fa02 f303 	lsl.w	r3, r2, r3
 8000c04:	69ba      	ldr	r2, [r7, #24]
 8000c06:	4313      	orrs	r3, r2
 8000c08:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000c0a:	69fb      	ldr	r3, [r7, #28]
 8000c0c:	08da      	lsrs	r2, r3, #3
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	3208      	adds	r2, #8
 8000c12:	69b9      	ldr	r1, [r7, #24]
 8000c14:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000c1e:	69fb      	ldr	r3, [r7, #28]
 8000c20:	005b      	lsls	r3, r3, #1
 8000c22:	2203      	movs	r2, #3
 8000c24:	fa02 f303 	lsl.w	r3, r2, r3
 8000c28:	43db      	mvns	r3, r3
 8000c2a:	69ba      	ldr	r2, [r7, #24]
 8000c2c:	4013      	ands	r3, r2
 8000c2e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000c30:	683b      	ldr	r3, [r7, #0]
 8000c32:	685b      	ldr	r3, [r3, #4]
 8000c34:	f003 0203 	and.w	r2, r3, #3
 8000c38:	69fb      	ldr	r3, [r7, #28]
 8000c3a:	005b      	lsls	r3, r3, #1
 8000c3c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c40:	69ba      	ldr	r2, [r7, #24]
 8000c42:	4313      	orrs	r3, r2
 8000c44:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	69ba      	ldr	r2, [r7, #24]
 8000c4a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000c4c:	683b      	ldr	r3, [r7, #0]
 8000c4e:	685b      	ldr	r3, [r3, #4]
 8000c50:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	f000 80a2 	beq.w	8000d9e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	60fb      	str	r3, [r7, #12]
 8000c5e:	4b57      	ldr	r3, [pc, #348]	@ (8000dbc <HAL_GPIO_Init+0x2e8>)
 8000c60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c62:	4a56      	ldr	r2, [pc, #344]	@ (8000dbc <HAL_GPIO_Init+0x2e8>)
 8000c64:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000c68:	6453      	str	r3, [r2, #68]	@ 0x44
 8000c6a:	4b54      	ldr	r3, [pc, #336]	@ (8000dbc <HAL_GPIO_Init+0x2e8>)
 8000c6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c6e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000c72:	60fb      	str	r3, [r7, #12]
 8000c74:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000c76:	4a52      	ldr	r2, [pc, #328]	@ (8000dc0 <HAL_GPIO_Init+0x2ec>)
 8000c78:	69fb      	ldr	r3, [r7, #28]
 8000c7a:	089b      	lsrs	r3, r3, #2
 8000c7c:	3302      	adds	r3, #2
 8000c7e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c82:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000c84:	69fb      	ldr	r3, [r7, #28]
 8000c86:	f003 0303 	and.w	r3, r3, #3
 8000c8a:	009b      	lsls	r3, r3, #2
 8000c8c:	220f      	movs	r2, #15
 8000c8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c92:	43db      	mvns	r3, r3
 8000c94:	69ba      	ldr	r2, [r7, #24]
 8000c96:	4013      	ands	r3, r2
 8000c98:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	4a49      	ldr	r2, [pc, #292]	@ (8000dc4 <HAL_GPIO_Init+0x2f0>)
 8000c9e:	4293      	cmp	r3, r2
 8000ca0:	d019      	beq.n	8000cd6 <HAL_GPIO_Init+0x202>
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	4a48      	ldr	r2, [pc, #288]	@ (8000dc8 <HAL_GPIO_Init+0x2f4>)
 8000ca6:	4293      	cmp	r3, r2
 8000ca8:	d013      	beq.n	8000cd2 <HAL_GPIO_Init+0x1fe>
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	4a47      	ldr	r2, [pc, #284]	@ (8000dcc <HAL_GPIO_Init+0x2f8>)
 8000cae:	4293      	cmp	r3, r2
 8000cb0:	d00d      	beq.n	8000cce <HAL_GPIO_Init+0x1fa>
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	4a46      	ldr	r2, [pc, #280]	@ (8000dd0 <HAL_GPIO_Init+0x2fc>)
 8000cb6:	4293      	cmp	r3, r2
 8000cb8:	d007      	beq.n	8000cca <HAL_GPIO_Init+0x1f6>
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	4a45      	ldr	r2, [pc, #276]	@ (8000dd4 <HAL_GPIO_Init+0x300>)
 8000cbe:	4293      	cmp	r3, r2
 8000cc0:	d101      	bne.n	8000cc6 <HAL_GPIO_Init+0x1f2>
 8000cc2:	2304      	movs	r3, #4
 8000cc4:	e008      	b.n	8000cd8 <HAL_GPIO_Init+0x204>
 8000cc6:	2307      	movs	r3, #7
 8000cc8:	e006      	b.n	8000cd8 <HAL_GPIO_Init+0x204>
 8000cca:	2303      	movs	r3, #3
 8000ccc:	e004      	b.n	8000cd8 <HAL_GPIO_Init+0x204>
 8000cce:	2302      	movs	r3, #2
 8000cd0:	e002      	b.n	8000cd8 <HAL_GPIO_Init+0x204>
 8000cd2:	2301      	movs	r3, #1
 8000cd4:	e000      	b.n	8000cd8 <HAL_GPIO_Init+0x204>
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	69fa      	ldr	r2, [r7, #28]
 8000cda:	f002 0203 	and.w	r2, r2, #3
 8000cde:	0092      	lsls	r2, r2, #2
 8000ce0:	4093      	lsls	r3, r2
 8000ce2:	69ba      	ldr	r2, [r7, #24]
 8000ce4:	4313      	orrs	r3, r2
 8000ce6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000ce8:	4935      	ldr	r1, [pc, #212]	@ (8000dc0 <HAL_GPIO_Init+0x2ec>)
 8000cea:	69fb      	ldr	r3, [r7, #28]
 8000cec:	089b      	lsrs	r3, r3, #2
 8000cee:	3302      	adds	r3, #2
 8000cf0:	69ba      	ldr	r2, [r7, #24]
 8000cf2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000cf6:	4b38      	ldr	r3, [pc, #224]	@ (8000dd8 <HAL_GPIO_Init+0x304>)
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000cfc:	693b      	ldr	r3, [r7, #16]
 8000cfe:	43db      	mvns	r3, r3
 8000d00:	69ba      	ldr	r2, [r7, #24]
 8000d02:	4013      	ands	r3, r2
 8000d04:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000d06:	683b      	ldr	r3, [r7, #0]
 8000d08:	685b      	ldr	r3, [r3, #4]
 8000d0a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d003      	beq.n	8000d1a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8000d12:	69ba      	ldr	r2, [r7, #24]
 8000d14:	693b      	ldr	r3, [r7, #16]
 8000d16:	4313      	orrs	r3, r2
 8000d18:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000d1a:	4a2f      	ldr	r2, [pc, #188]	@ (8000dd8 <HAL_GPIO_Init+0x304>)
 8000d1c:	69bb      	ldr	r3, [r7, #24]
 8000d1e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000d20:	4b2d      	ldr	r3, [pc, #180]	@ (8000dd8 <HAL_GPIO_Init+0x304>)
 8000d22:	685b      	ldr	r3, [r3, #4]
 8000d24:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000d26:	693b      	ldr	r3, [r7, #16]
 8000d28:	43db      	mvns	r3, r3
 8000d2a:	69ba      	ldr	r2, [r7, #24]
 8000d2c:	4013      	ands	r3, r2
 8000d2e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000d30:	683b      	ldr	r3, [r7, #0]
 8000d32:	685b      	ldr	r3, [r3, #4]
 8000d34:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	d003      	beq.n	8000d44 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8000d3c:	69ba      	ldr	r2, [r7, #24]
 8000d3e:	693b      	ldr	r3, [r7, #16]
 8000d40:	4313      	orrs	r3, r2
 8000d42:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000d44:	4a24      	ldr	r2, [pc, #144]	@ (8000dd8 <HAL_GPIO_Init+0x304>)
 8000d46:	69bb      	ldr	r3, [r7, #24]
 8000d48:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000d4a:	4b23      	ldr	r3, [pc, #140]	@ (8000dd8 <HAL_GPIO_Init+0x304>)
 8000d4c:	689b      	ldr	r3, [r3, #8]
 8000d4e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000d50:	693b      	ldr	r3, [r7, #16]
 8000d52:	43db      	mvns	r3, r3
 8000d54:	69ba      	ldr	r2, [r7, #24]
 8000d56:	4013      	ands	r3, r2
 8000d58:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000d5a:	683b      	ldr	r3, [r7, #0]
 8000d5c:	685b      	ldr	r3, [r3, #4]
 8000d5e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d003      	beq.n	8000d6e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8000d66:	69ba      	ldr	r2, [r7, #24]
 8000d68:	693b      	ldr	r3, [r7, #16]
 8000d6a:	4313      	orrs	r3, r2
 8000d6c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000d6e:	4a1a      	ldr	r2, [pc, #104]	@ (8000dd8 <HAL_GPIO_Init+0x304>)
 8000d70:	69bb      	ldr	r3, [r7, #24]
 8000d72:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000d74:	4b18      	ldr	r3, [pc, #96]	@ (8000dd8 <HAL_GPIO_Init+0x304>)
 8000d76:	68db      	ldr	r3, [r3, #12]
 8000d78:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000d7a:	693b      	ldr	r3, [r7, #16]
 8000d7c:	43db      	mvns	r3, r3
 8000d7e:	69ba      	ldr	r2, [r7, #24]
 8000d80:	4013      	ands	r3, r2
 8000d82:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000d84:	683b      	ldr	r3, [r7, #0]
 8000d86:	685b      	ldr	r3, [r3, #4]
 8000d88:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d003      	beq.n	8000d98 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8000d90:	69ba      	ldr	r2, [r7, #24]
 8000d92:	693b      	ldr	r3, [r7, #16]
 8000d94:	4313      	orrs	r3, r2
 8000d96:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000d98:	4a0f      	ldr	r2, [pc, #60]	@ (8000dd8 <HAL_GPIO_Init+0x304>)
 8000d9a:	69bb      	ldr	r3, [r7, #24]
 8000d9c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000d9e:	69fb      	ldr	r3, [r7, #28]
 8000da0:	3301      	adds	r3, #1
 8000da2:	61fb      	str	r3, [r7, #28]
 8000da4:	69fb      	ldr	r3, [r7, #28]
 8000da6:	2b0f      	cmp	r3, #15
 8000da8:	f67f aea2 	bls.w	8000af0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000dac:	bf00      	nop
 8000dae:	bf00      	nop
 8000db0:	3724      	adds	r7, #36	@ 0x24
 8000db2:	46bd      	mov	sp, r7
 8000db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db8:	4770      	bx	lr
 8000dba:	bf00      	nop
 8000dbc:	40023800 	.word	0x40023800
 8000dc0:	40013800 	.word	0x40013800
 8000dc4:	40020000 	.word	0x40020000
 8000dc8:	40020400 	.word	0x40020400
 8000dcc:	40020800 	.word	0x40020800
 8000dd0:	40020c00 	.word	0x40020c00
 8000dd4:	40021000 	.word	0x40021000
 8000dd8:	40013c00 	.word	0x40013c00

08000ddc <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000ddc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000dde:	b08f      	sub	sp, #60	@ 0x3c
 8000de0:	af0a      	add	r7, sp, #40	@ 0x28
 8000de2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d101      	bne.n	8000dee <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8000dea:	2301      	movs	r3, #1
 8000dec:	e10f      	b.n	800100e <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	f893 33bd 	ldrb.w	r3, [r3, #957]	@ 0x3bd
 8000dfa:	b2db      	uxtb	r3, r3
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d106      	bne.n	8000e0e <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	2200      	movs	r2, #0
 8000e04:	f883 23bc 	strb.w	r2, [r3, #956]	@ 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8000e08:	6878      	ldr	r0, [r7, #4]
 8000e0a:	f006 fa15 	bl	8007238 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	2203      	movs	r2, #3
 8000e12:	f883 23bd 	strb.w	r2, [r3, #957]	@ 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8000e16:	68bb      	ldr	r3, [r7, #8]
 8000e18:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000e1a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d102      	bne.n	8000e28 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	2200      	movs	r2, #0
 8000e26:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	4618      	mov	r0, r3
 8000e2e:	f001 feca 	bl	8002bc6 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	603b      	str	r3, [r7, #0]
 8000e38:	687e      	ldr	r6, [r7, #4]
 8000e3a:	466d      	mov	r5, sp
 8000e3c:	f106 0410 	add.w	r4, r6, #16
 8000e40:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000e42:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000e44:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000e46:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000e48:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000e4c:	e885 0003 	stmia.w	r5, {r0, r1}
 8000e50:	1d33      	adds	r3, r6, #4
 8000e52:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000e54:	6838      	ldr	r0, [r7, #0]
 8000e56:	f001 fda1 	bl	800299c <USB_CoreInit>
 8000e5a:	4603      	mov	r3, r0
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d005      	beq.n	8000e6c <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	2202      	movs	r2, #2
 8000e64:	f883 23bd 	strb.w	r2, [r3, #957]	@ 0x3bd
    return HAL_ERROR;
 8000e68:	2301      	movs	r3, #1
 8000e6a:	e0d0      	b.n	800100e <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	2100      	movs	r1, #0
 8000e72:	4618      	mov	r0, r3
 8000e74:	f001 feb8 	bl	8002be8 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000e78:	2300      	movs	r3, #0
 8000e7a:	73fb      	strb	r3, [r7, #15]
 8000e7c:	e04a      	b.n	8000f14 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8000e7e:	7bfa      	ldrb	r2, [r7, #15]
 8000e80:	6879      	ldr	r1, [r7, #4]
 8000e82:	4613      	mov	r3, r2
 8000e84:	00db      	lsls	r3, r3, #3
 8000e86:	1a9b      	subs	r3, r3, r2
 8000e88:	009b      	lsls	r3, r3, #2
 8000e8a:	440b      	add	r3, r1
 8000e8c:	333d      	adds	r3, #61	@ 0x3d
 8000e8e:	2201      	movs	r2, #1
 8000e90:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8000e92:	7bfa      	ldrb	r2, [r7, #15]
 8000e94:	6879      	ldr	r1, [r7, #4]
 8000e96:	4613      	mov	r3, r2
 8000e98:	00db      	lsls	r3, r3, #3
 8000e9a:	1a9b      	subs	r3, r3, r2
 8000e9c:	009b      	lsls	r3, r3, #2
 8000e9e:	440b      	add	r3, r1
 8000ea0:	333c      	adds	r3, #60	@ 0x3c
 8000ea2:	7bfa      	ldrb	r2, [r7, #15]
 8000ea4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8000ea6:	7bfa      	ldrb	r2, [r7, #15]
 8000ea8:	7bfb      	ldrb	r3, [r7, #15]
 8000eaa:	b298      	uxth	r0, r3
 8000eac:	6879      	ldr	r1, [r7, #4]
 8000eae:	4613      	mov	r3, r2
 8000eb0:	00db      	lsls	r3, r3, #3
 8000eb2:	1a9b      	subs	r3, r3, r2
 8000eb4:	009b      	lsls	r3, r3, #2
 8000eb6:	440b      	add	r3, r1
 8000eb8:	3342      	adds	r3, #66	@ 0x42
 8000eba:	4602      	mov	r2, r0
 8000ebc:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8000ebe:	7bfa      	ldrb	r2, [r7, #15]
 8000ec0:	6879      	ldr	r1, [r7, #4]
 8000ec2:	4613      	mov	r3, r2
 8000ec4:	00db      	lsls	r3, r3, #3
 8000ec6:	1a9b      	subs	r3, r3, r2
 8000ec8:	009b      	lsls	r3, r3, #2
 8000eca:	440b      	add	r3, r1
 8000ecc:	333f      	adds	r3, #63	@ 0x3f
 8000ece:	2200      	movs	r2, #0
 8000ed0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8000ed2:	7bfa      	ldrb	r2, [r7, #15]
 8000ed4:	6879      	ldr	r1, [r7, #4]
 8000ed6:	4613      	mov	r3, r2
 8000ed8:	00db      	lsls	r3, r3, #3
 8000eda:	1a9b      	subs	r3, r3, r2
 8000edc:	009b      	lsls	r3, r3, #2
 8000ede:	440b      	add	r3, r1
 8000ee0:	3344      	adds	r3, #68	@ 0x44
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8000ee6:	7bfa      	ldrb	r2, [r7, #15]
 8000ee8:	6879      	ldr	r1, [r7, #4]
 8000eea:	4613      	mov	r3, r2
 8000eec:	00db      	lsls	r3, r3, #3
 8000eee:	1a9b      	subs	r3, r3, r2
 8000ef0:	009b      	lsls	r3, r3, #2
 8000ef2:	440b      	add	r3, r1
 8000ef4:	3348      	adds	r3, #72	@ 0x48
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8000efa:	7bfa      	ldrb	r2, [r7, #15]
 8000efc:	6879      	ldr	r1, [r7, #4]
 8000efe:	4613      	mov	r3, r2
 8000f00:	00db      	lsls	r3, r3, #3
 8000f02:	1a9b      	subs	r3, r3, r2
 8000f04:	009b      	lsls	r3, r3, #2
 8000f06:	440b      	add	r3, r1
 8000f08:	3350      	adds	r3, #80	@ 0x50
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000f0e:	7bfb      	ldrb	r3, [r7, #15]
 8000f10:	3301      	adds	r3, #1
 8000f12:	73fb      	strb	r3, [r7, #15]
 8000f14:	7bfa      	ldrb	r2, [r7, #15]
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	685b      	ldr	r3, [r3, #4]
 8000f1a:	429a      	cmp	r2, r3
 8000f1c:	d3af      	bcc.n	8000e7e <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000f1e:	2300      	movs	r3, #0
 8000f20:	73fb      	strb	r3, [r7, #15]
 8000f22:	e044      	b.n	8000fae <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8000f24:	7bfa      	ldrb	r2, [r7, #15]
 8000f26:	6879      	ldr	r1, [r7, #4]
 8000f28:	4613      	mov	r3, r2
 8000f2a:	00db      	lsls	r3, r3, #3
 8000f2c:	1a9b      	subs	r3, r3, r2
 8000f2e:	009b      	lsls	r3, r3, #2
 8000f30:	440b      	add	r3, r1
 8000f32:	f203 13fd 	addw	r3, r3, #509	@ 0x1fd
 8000f36:	2200      	movs	r2, #0
 8000f38:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8000f3a:	7bfa      	ldrb	r2, [r7, #15]
 8000f3c:	6879      	ldr	r1, [r7, #4]
 8000f3e:	4613      	mov	r3, r2
 8000f40:	00db      	lsls	r3, r3, #3
 8000f42:	1a9b      	subs	r3, r3, r2
 8000f44:	009b      	lsls	r3, r3, #2
 8000f46:	440b      	add	r3, r1
 8000f48:	f503 73fe 	add.w	r3, r3, #508	@ 0x1fc
 8000f4c:	7bfa      	ldrb	r2, [r7, #15]
 8000f4e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8000f50:	7bfa      	ldrb	r2, [r7, #15]
 8000f52:	6879      	ldr	r1, [r7, #4]
 8000f54:	4613      	mov	r3, r2
 8000f56:	00db      	lsls	r3, r3, #3
 8000f58:	1a9b      	subs	r3, r3, r2
 8000f5a:	009b      	lsls	r3, r3, #2
 8000f5c:	440b      	add	r3, r1
 8000f5e:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 8000f62:	2200      	movs	r2, #0
 8000f64:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8000f66:	7bfa      	ldrb	r2, [r7, #15]
 8000f68:	6879      	ldr	r1, [r7, #4]
 8000f6a:	4613      	mov	r3, r2
 8000f6c:	00db      	lsls	r3, r3, #3
 8000f6e:	1a9b      	subs	r3, r3, r2
 8000f70:	009b      	lsls	r3, r3, #2
 8000f72:	440b      	add	r3, r1
 8000f74:	f503 7301 	add.w	r3, r3, #516	@ 0x204
 8000f78:	2200      	movs	r2, #0
 8000f7a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8000f7c:	7bfa      	ldrb	r2, [r7, #15]
 8000f7e:	6879      	ldr	r1, [r7, #4]
 8000f80:	4613      	mov	r3, r2
 8000f82:	00db      	lsls	r3, r3, #3
 8000f84:	1a9b      	subs	r3, r3, r2
 8000f86:	009b      	lsls	r3, r3, #2
 8000f88:	440b      	add	r3, r1
 8000f8a:	f503 7302 	add.w	r3, r3, #520	@ 0x208
 8000f8e:	2200      	movs	r2, #0
 8000f90:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8000f92:	7bfa      	ldrb	r2, [r7, #15]
 8000f94:	6879      	ldr	r1, [r7, #4]
 8000f96:	4613      	mov	r3, r2
 8000f98:	00db      	lsls	r3, r3, #3
 8000f9a:	1a9b      	subs	r3, r3, r2
 8000f9c:	009b      	lsls	r3, r3, #2
 8000f9e:	440b      	add	r3, r1
 8000fa0:	f503 7304 	add.w	r3, r3, #528	@ 0x210
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000fa8:	7bfb      	ldrb	r3, [r7, #15]
 8000faa:	3301      	adds	r3, #1
 8000fac:	73fb      	strb	r3, [r7, #15]
 8000fae:	7bfa      	ldrb	r2, [r7, #15]
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	685b      	ldr	r3, [r3, #4]
 8000fb4:	429a      	cmp	r2, r3
 8000fb6:	d3b5      	bcc.n	8000f24 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	603b      	str	r3, [r7, #0]
 8000fbe:	687e      	ldr	r6, [r7, #4]
 8000fc0:	466d      	mov	r5, sp
 8000fc2:	f106 0410 	add.w	r4, r6, #16
 8000fc6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000fc8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000fca:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000fcc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000fce:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000fd2:	e885 0003 	stmia.w	r5, {r0, r1}
 8000fd6:	1d33      	adds	r3, r6, #4
 8000fd8:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000fda:	6838      	ldr	r0, [r7, #0]
 8000fdc:	f001 fe50 	bl	8002c80 <USB_DevInit>
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d005      	beq.n	8000ff2 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	2202      	movs	r2, #2
 8000fea:	f883 23bd 	strb.w	r2, [r3, #957]	@ 0x3bd
    return HAL_ERROR;
 8000fee:	2301      	movs	r3, #1
 8000ff0:	e00d      	b.n	800100e <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	2201      	movs	r2, #1
 8000ffe:	f883 23bd 	strb.w	r2, [r3, #957]	@ 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	4618      	mov	r0, r3
 8001008:	f002 fecc 	bl	8003da4 <USB_DevDisconnect>

  return HAL_OK;
 800100c:	2300      	movs	r3, #0
}
 800100e:	4618      	mov	r0, r3
 8001010:	3714      	adds	r7, #20
 8001012:	46bd      	mov	sp, r7
 8001014:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001016 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001016:	b580      	push	{r7, lr}
 8001018:	b084      	sub	sp, #16
 800101a:	af00      	add	r7, sp, #0
 800101c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	f893 33bc 	ldrb.w	r3, [r3, #956]	@ 0x3bc
 800102a:	2b01      	cmp	r3, #1
 800102c:	d101      	bne.n	8001032 <HAL_PCD_Start+0x1c>
 800102e:	2302      	movs	r3, #2
 8001030:	e020      	b.n	8001074 <HAL_PCD_Start+0x5e>
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	2201      	movs	r2, #1
 8001036:	f883 23bc 	strb.w	r2, [r3, #956]	@ 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800103e:	2b01      	cmp	r3, #1
 8001040:	d109      	bne.n	8001056 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001046:	2b01      	cmp	r3, #1
 8001048:	d005      	beq.n	8001056 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800104a:	68fb      	ldr	r3, [r7, #12]
 800104c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800104e:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8001052:	68fb      	ldr	r3, [r7, #12]
 8001054:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	4618      	mov	r0, r3
 800105c:	f001 fda2 	bl	8002ba4 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	4618      	mov	r0, r3
 8001066:	f002 fe7c 	bl	8003d62 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	2200      	movs	r2, #0
 800106e:	f883 23bc 	strb.w	r2, [r3, #956]	@ 0x3bc

  return HAL_OK;
 8001072:	2300      	movs	r3, #0
}
 8001074:	4618      	mov	r0, r3
 8001076:	3710      	adds	r7, #16
 8001078:	46bd      	mov	sp, r7
 800107a:	bd80      	pop	{r7, pc}

0800107c <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800107c:	b590      	push	{r4, r7, lr}
 800107e:	b08d      	sub	sp, #52	@ 0x34
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800108a:	6a3b      	ldr	r3, [r7, #32]
 800108c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t temp;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	4618      	mov	r0, r3
 8001094:	f002 ff3a 	bl	8003f0c <USB_GetMode>
 8001098:	4603      	mov	r3, r0
 800109a:	2b00      	cmp	r3, #0
 800109c:	f040 839d 	bne.w	80017da <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	4618      	mov	r0, r3
 80010a6:	f002 fe9e 	bl	8003de6 <USB_ReadInterrupts>
 80010aa:	4603      	mov	r3, r0
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	f000 8393 	beq.w	80017d8 <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	4618      	mov	r0, r3
 80010b8:	f002 fe95 	bl	8003de6 <USB_ReadInterrupts>
 80010bc:	4603      	mov	r3, r0
 80010be:	f003 0302 	and.w	r3, r3, #2
 80010c2:	2b02      	cmp	r3, #2
 80010c4:	d107      	bne.n	80010d6 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	695a      	ldr	r2, [r3, #20]
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	f002 0202 	and.w	r2, r2, #2
 80010d4:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	4618      	mov	r0, r3
 80010dc:	f002 fe83 	bl	8003de6 <USB_ReadInterrupts>
 80010e0:	4603      	mov	r3, r0
 80010e2:	f003 0310 	and.w	r3, r3, #16
 80010e6:	2b10      	cmp	r3, #16
 80010e8:	d161      	bne.n	80011ae <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	699a      	ldr	r2, [r3, #24]
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	f022 0210 	bic.w	r2, r2, #16
 80010f8:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 80010fa:	6a3b      	ldr	r3, [r7, #32]
 80010fc:	6a1b      	ldr	r3, [r3, #32]
 80010fe:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8001100:	69bb      	ldr	r3, [r7, #24]
 8001102:	f003 020f 	and.w	r2, r3, #15
 8001106:	4613      	mov	r3, r2
 8001108:	00db      	lsls	r3, r3, #3
 800110a:	1a9b      	subs	r3, r3, r2
 800110c:	009b      	lsls	r3, r3, #2
 800110e:	f503 73fc 	add.w	r3, r3, #504	@ 0x1f8
 8001112:	687a      	ldr	r2, [r7, #4]
 8001114:	4413      	add	r3, r2
 8001116:	3304      	adds	r3, #4
 8001118:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800111a:	69bb      	ldr	r3, [r7, #24]
 800111c:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 8001120:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8001124:	d124      	bne.n	8001170 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8001126:	69ba      	ldr	r2, [r7, #24]
 8001128:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 800112c:	4013      	ands	r3, r2
 800112e:	2b00      	cmp	r3, #0
 8001130:	d035      	beq.n	800119e <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001132:	697b      	ldr	r3, [r7, #20]
 8001134:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8001136:	69bb      	ldr	r3, [r7, #24]
 8001138:	091b      	lsrs	r3, r3, #4
 800113a:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800113c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001140:	b29b      	uxth	r3, r3
 8001142:	461a      	mov	r2, r3
 8001144:	6a38      	ldr	r0, [r7, #32]
 8001146:	f002 fcba 	bl	8003abe <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800114a:	697b      	ldr	r3, [r7, #20]
 800114c:	68da      	ldr	r2, [r3, #12]
 800114e:	69bb      	ldr	r3, [r7, #24]
 8001150:	091b      	lsrs	r3, r3, #4
 8001152:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001156:	441a      	add	r2, r3
 8001158:	697b      	ldr	r3, [r7, #20]
 800115a:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800115c:	697b      	ldr	r3, [r7, #20]
 800115e:	699a      	ldr	r2, [r3, #24]
 8001160:	69bb      	ldr	r3, [r7, #24]
 8001162:	091b      	lsrs	r3, r3, #4
 8001164:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001168:	441a      	add	r2, r3
 800116a:	697b      	ldr	r3, [r7, #20]
 800116c:	619a      	str	r2, [r3, #24]
 800116e:	e016      	b.n	800119e <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8001170:	69bb      	ldr	r3, [r7, #24]
 8001172:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 8001176:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800117a:	d110      	bne.n	800119e <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	f503 7371 	add.w	r3, r3, #964	@ 0x3c4
 8001182:	2208      	movs	r2, #8
 8001184:	4619      	mov	r1, r3
 8001186:	6a38      	ldr	r0, [r7, #32]
 8001188:	f002 fc99 	bl	8003abe <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800118c:	697b      	ldr	r3, [r7, #20]
 800118e:	699a      	ldr	r2, [r3, #24]
 8001190:	69bb      	ldr	r3, [r7, #24]
 8001192:	091b      	lsrs	r3, r3, #4
 8001194:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001198:	441a      	add	r2, r3
 800119a:	697b      	ldr	r3, [r7, #20]
 800119c:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	699a      	ldr	r2, [r3, #24]
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	f042 0210 	orr.w	r2, r2, #16
 80011ac:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	4618      	mov	r0, r3
 80011b4:	f002 fe17 	bl	8003de6 <USB_ReadInterrupts>
 80011b8:	4603      	mov	r3, r0
 80011ba:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80011be:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80011c2:	d16e      	bne.n	80012a2 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 80011c4:	2300      	movs	r3, #0
 80011c6:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	4618      	mov	r0, r3
 80011ce:	f002 fe1d 	bl	8003e0c <USB_ReadDevAllOutEpInterrupt>
 80011d2:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 80011d4:	e062      	b.n	800129c <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 80011d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80011d8:	f003 0301 	and.w	r3, r3, #1
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d057      	beq.n	8001290 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80011e6:	b2d2      	uxtb	r2, r2
 80011e8:	4611      	mov	r1, r2
 80011ea:	4618      	mov	r0, r3
 80011ec:	f002 fe42 	bl	8003e74 <USB_ReadDevOutEPInterrupt>
 80011f0:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80011f2:	693b      	ldr	r3, [r7, #16]
 80011f4:	f003 0301 	and.w	r3, r3, #1
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d00c      	beq.n	8001216 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80011fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80011fe:	015a      	lsls	r2, r3, #5
 8001200:	69fb      	ldr	r3, [r7, #28]
 8001202:	4413      	add	r3, r2
 8001204:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001208:	461a      	mov	r2, r3
 800120a:	2301      	movs	r3, #1
 800120c:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800120e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001210:	6878      	ldr	r0, [r7, #4]
 8001212:	f000 fddd 	bl	8001dd0 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8001216:	693b      	ldr	r3, [r7, #16]
 8001218:	f003 0308 	and.w	r3, r3, #8
 800121c:	2b00      	cmp	r3, #0
 800121e:	d00c      	beq.n	800123a <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8001220:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001222:	015a      	lsls	r2, r3, #5
 8001224:	69fb      	ldr	r3, [r7, #28]
 8001226:	4413      	add	r3, r2
 8001228:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800122c:	461a      	mov	r2, r3
 800122e:	2308      	movs	r3, #8
 8001230:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8001232:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001234:	6878      	ldr	r0, [r7, #4]
 8001236:	f000 fed7 	bl	8001fe8 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800123a:	693b      	ldr	r3, [r7, #16]
 800123c:	f003 0310 	and.w	r3, r3, #16
 8001240:	2b00      	cmp	r3, #0
 8001242:	d008      	beq.n	8001256 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8001244:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001246:	015a      	lsls	r2, r3, #5
 8001248:	69fb      	ldr	r3, [r7, #28]
 800124a:	4413      	add	r3, r2
 800124c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001250:	461a      	mov	r2, r3
 8001252:	2310      	movs	r3, #16
 8001254:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001256:	693b      	ldr	r3, [r7, #16]
 8001258:	f003 0320 	and.w	r3, r3, #32
 800125c:	2b00      	cmp	r3, #0
 800125e:	d008      	beq.n	8001272 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001260:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001262:	015a      	lsls	r2, r3, #5
 8001264:	69fb      	ldr	r3, [r7, #28]
 8001266:	4413      	add	r3, r2
 8001268:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800126c:	461a      	mov	r2, r3
 800126e:	2320      	movs	r3, #32
 8001270:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8001272:	693b      	ldr	r3, [r7, #16]
 8001274:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001278:	2b00      	cmp	r3, #0
 800127a:	d009      	beq.n	8001290 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800127c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800127e:	015a      	lsls	r2, r3, #5
 8001280:	69fb      	ldr	r3, [r7, #28]
 8001282:	4413      	add	r3, r2
 8001284:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001288:	461a      	mov	r2, r3
 800128a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800128e:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8001290:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001292:	3301      	adds	r3, #1
 8001294:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8001296:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001298:	085b      	lsrs	r3, r3, #1
 800129a:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 800129c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d199      	bne.n	80011d6 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	4618      	mov	r0, r3
 80012a8:	f002 fd9d 	bl	8003de6 <USB_ReadInterrupts>
 80012ac:	4603      	mov	r3, r0
 80012ae:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80012b2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80012b6:	f040 80c0 	bne.w	800143a <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	4618      	mov	r0, r3
 80012c0:	f002 fdbe 	bl	8003e40 <USB_ReadDevAllInEpInterrupt>
 80012c4:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 80012c6:	2300      	movs	r3, #0
 80012c8:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 80012ca:	e0b2      	b.n	8001432 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80012cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80012ce:	f003 0301 	and.w	r3, r3, #1
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	f000 80a7 	beq.w	8001426 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80012de:	b2d2      	uxtb	r2, r2
 80012e0:	4611      	mov	r1, r2
 80012e2:	4618      	mov	r0, r3
 80012e4:	f002 fde4 	bl	8003eb0 <USB_ReadDevInEPInterrupt>
 80012e8:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80012ea:	693b      	ldr	r3, [r7, #16]
 80012ec:	f003 0301 	and.w	r3, r3, #1
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d057      	beq.n	80013a4 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80012f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012f6:	f003 030f 	and.w	r3, r3, #15
 80012fa:	2201      	movs	r2, #1
 80012fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001300:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001302:	69fb      	ldr	r3, [r7, #28]
 8001304:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001308:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800130a:	68fb      	ldr	r3, [r7, #12]
 800130c:	43db      	mvns	r3, r3
 800130e:	69f9      	ldr	r1, [r7, #28]
 8001310:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8001314:	4013      	ands	r3, r2
 8001316:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8001318:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800131a:	015a      	lsls	r2, r3, #5
 800131c:	69fb      	ldr	r3, [r7, #28]
 800131e:	4413      	add	r3, r2
 8001320:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001324:	461a      	mov	r2, r3
 8001326:	2301      	movs	r3, #1
 8001328:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	691b      	ldr	r3, [r3, #16]
 800132e:	2b01      	cmp	r3, #1
 8001330:	d132      	bne.n	8001398 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8001332:	6879      	ldr	r1, [r7, #4]
 8001334:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001336:	4613      	mov	r3, r2
 8001338:	00db      	lsls	r3, r3, #3
 800133a:	1a9b      	subs	r3, r3, r2
 800133c:	009b      	lsls	r3, r3, #2
 800133e:	440b      	add	r3, r1
 8001340:	3348      	adds	r3, #72	@ 0x48
 8001342:	6819      	ldr	r1, [r3, #0]
 8001344:	6878      	ldr	r0, [r7, #4]
 8001346:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001348:	4613      	mov	r3, r2
 800134a:	00db      	lsls	r3, r3, #3
 800134c:	1a9b      	subs	r3, r3, r2
 800134e:	009b      	lsls	r3, r3, #2
 8001350:	4403      	add	r3, r0
 8001352:	3344      	adds	r3, #68	@ 0x44
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	4419      	add	r1, r3
 8001358:	6878      	ldr	r0, [r7, #4]
 800135a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800135c:	4613      	mov	r3, r2
 800135e:	00db      	lsls	r3, r3, #3
 8001360:	1a9b      	subs	r3, r3, r2
 8001362:	009b      	lsls	r3, r3, #2
 8001364:	4403      	add	r3, r0
 8001366:	3348      	adds	r3, #72	@ 0x48
 8001368:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800136a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800136c:	2b00      	cmp	r3, #0
 800136e:	d113      	bne.n	8001398 <HAL_PCD_IRQHandler+0x31c>
 8001370:	6879      	ldr	r1, [r7, #4]
 8001372:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001374:	4613      	mov	r3, r2
 8001376:	00db      	lsls	r3, r3, #3
 8001378:	1a9b      	subs	r3, r3, r2
 800137a:	009b      	lsls	r3, r3, #2
 800137c:	440b      	add	r3, r1
 800137e:	3350      	adds	r3, #80	@ 0x50
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	2b00      	cmp	r3, #0
 8001384:	d108      	bne.n	8001398 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	6818      	ldr	r0, [r3, #0]
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	f503 7371 	add.w	r3, r3, #964	@ 0x3c4
 8001390:	461a      	mov	r2, r3
 8001392:	2101      	movs	r1, #1
 8001394:	f002 fdec 	bl	8003f70 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8001398:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800139a:	b2db      	uxtb	r3, r3
 800139c:	4619      	mov	r1, r3
 800139e:	6878      	ldr	r0, [r7, #4]
 80013a0:	f005 ffcb 	bl	800733a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80013a4:	693b      	ldr	r3, [r7, #16]
 80013a6:	f003 0308 	and.w	r3, r3, #8
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d008      	beq.n	80013c0 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80013ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013b0:	015a      	lsls	r2, r3, #5
 80013b2:	69fb      	ldr	r3, [r7, #28]
 80013b4:	4413      	add	r3, r2
 80013b6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80013ba:	461a      	mov	r2, r3
 80013bc:	2308      	movs	r3, #8
 80013be:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80013c0:	693b      	ldr	r3, [r7, #16]
 80013c2:	f003 0310 	and.w	r3, r3, #16
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d008      	beq.n	80013dc <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80013ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013cc:	015a      	lsls	r2, r3, #5
 80013ce:	69fb      	ldr	r3, [r7, #28]
 80013d0:	4413      	add	r3, r2
 80013d2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80013d6:	461a      	mov	r2, r3
 80013d8:	2310      	movs	r3, #16
 80013da:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80013dc:	693b      	ldr	r3, [r7, #16]
 80013de:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d008      	beq.n	80013f8 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80013e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013e8:	015a      	lsls	r2, r3, #5
 80013ea:	69fb      	ldr	r3, [r7, #28]
 80013ec:	4413      	add	r3, r2
 80013ee:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80013f2:	461a      	mov	r2, r3
 80013f4:	2340      	movs	r3, #64	@ 0x40
 80013f6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80013f8:	693b      	ldr	r3, [r7, #16]
 80013fa:	f003 0302 	and.w	r3, r3, #2
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d008      	beq.n	8001414 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8001402:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001404:	015a      	lsls	r2, r3, #5
 8001406:	69fb      	ldr	r3, [r7, #28]
 8001408:	4413      	add	r3, r2
 800140a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800140e:	461a      	mov	r2, r3
 8001410:	2302      	movs	r3, #2
 8001412:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8001414:	693b      	ldr	r3, [r7, #16]
 8001416:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800141a:	2b00      	cmp	r3, #0
 800141c:	d003      	beq.n	8001426 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800141e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001420:	6878      	ldr	r0, [r7, #4]
 8001422:	f000 fc48 	bl	8001cb6 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8001426:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001428:	3301      	adds	r3, #1
 800142a:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 800142c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800142e:	085b      	lsrs	r3, r3, #1
 8001430:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8001432:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001434:	2b00      	cmp	r3, #0
 8001436:	f47f af49 	bne.w	80012cc <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	4618      	mov	r0, r3
 8001440:	f002 fcd1 	bl	8003de6 <USB_ReadInterrupts>
 8001444:	4603      	mov	r3, r0
 8001446:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800144a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800144e:	d122      	bne.n	8001496 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001450:	69fb      	ldr	r3, [r7, #28]
 8001452:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001456:	685b      	ldr	r3, [r3, #4]
 8001458:	69fa      	ldr	r2, [r7, #28]
 800145a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800145e:	f023 0301 	bic.w	r3, r3, #1
 8001462:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	f893 33f4 	ldrb.w	r3, [r3, #1012]	@ 0x3f4
 800146a:	2b01      	cmp	r3, #1
 800146c:	d108      	bne.n	8001480 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	2200      	movs	r2, #0
 8001472:	f883 23f4 	strb.w	r2, [r3, #1012]	@ 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001476:	2100      	movs	r1, #0
 8001478:	6878      	ldr	r0, [r7, #4]
 800147a:	f000 fe53 	bl	8002124 <HAL_PCDEx_LPM_Callback>
 800147e:	e002      	b.n	8001486 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8001480:	6878      	ldr	r0, [r7, #4]
 8001482:	f005 ffc7 	bl	8007414 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	695a      	ldr	r2, [r3, #20]
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8001494:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	4618      	mov	r0, r3
 800149c:	f002 fca3 	bl	8003de6 <USB_ReadInterrupts>
 80014a0:	4603      	mov	r3, r0
 80014a2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80014a6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80014aa:	d112      	bne.n	80014d2 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80014ac:	69fb      	ldr	r3, [r7, #28]
 80014ae:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80014b2:	689b      	ldr	r3, [r3, #8]
 80014b4:	f003 0301 	and.w	r3, r3, #1
 80014b8:	2b01      	cmp	r3, #1
 80014ba:	d102      	bne.n	80014c2 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80014bc:	6878      	ldr	r0, [r7, #4]
 80014be:	f005 ff83 	bl	80073c8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	695a      	ldr	r2, [r3, #20]
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 80014d0:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	4618      	mov	r0, r3
 80014d8:	f002 fc85 	bl	8003de6 <USB_ReadInterrupts>
 80014dc:	4603      	mov	r3, r0
 80014de:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80014e2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80014e6:	f040 80c7 	bne.w	8001678 <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80014ea:	69fb      	ldr	r3, [r7, #28]
 80014ec:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80014f0:	685b      	ldr	r3, [r3, #4]
 80014f2:	69fa      	ldr	r2, [r7, #28]
 80014f4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80014f8:	f023 0301 	bic.w	r3, r3, #1
 80014fc:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	2110      	movs	r1, #16
 8001504:	4618      	mov	r0, r3
 8001506:	f001 fd1f 	bl	8002f48 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800150a:	2300      	movs	r3, #0
 800150c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800150e:	e056      	b.n	80015be <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8001510:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001512:	015a      	lsls	r2, r3, #5
 8001514:	69fb      	ldr	r3, [r7, #28]
 8001516:	4413      	add	r3, r2
 8001518:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800151c:	461a      	mov	r2, r3
 800151e:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8001522:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8001524:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001526:	015a      	lsls	r2, r3, #5
 8001528:	69fb      	ldr	r3, [r7, #28]
 800152a:	4413      	add	r3, r2
 800152c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001534:	0151      	lsls	r1, r2, #5
 8001536:	69fa      	ldr	r2, [r7, #28]
 8001538:	440a      	add	r2, r1
 800153a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800153e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8001542:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8001544:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001546:	015a      	lsls	r2, r3, #5
 8001548:	69fb      	ldr	r3, [r7, #28]
 800154a:	4413      	add	r3, r2
 800154c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001554:	0151      	lsls	r1, r2, #5
 8001556:	69fa      	ldr	r2, [r7, #28]
 8001558:	440a      	add	r2, r1
 800155a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800155e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8001562:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8001564:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001566:	015a      	lsls	r2, r3, #5
 8001568:	69fb      	ldr	r3, [r7, #28]
 800156a:	4413      	add	r3, r2
 800156c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001570:	461a      	mov	r2, r3
 8001572:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8001576:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8001578:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800157a:	015a      	lsls	r2, r3, #5
 800157c:	69fb      	ldr	r3, [r7, #28]
 800157e:	4413      	add	r3, r2
 8001580:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001588:	0151      	lsls	r1, r2, #5
 800158a:	69fa      	ldr	r2, [r7, #28]
 800158c:	440a      	add	r2, r1
 800158e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8001592:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8001596:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8001598:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800159a:	015a      	lsls	r2, r3, #5
 800159c:	69fb      	ldr	r3, [r7, #28]
 800159e:	4413      	add	r3, r2
 80015a0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80015a8:	0151      	lsls	r1, r2, #5
 80015aa:	69fa      	ldr	r2, [r7, #28]
 80015ac:	440a      	add	r2, r1
 80015ae:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80015b2:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80015b6:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80015b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80015ba:	3301      	adds	r3, #1
 80015bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	685b      	ldr	r3, [r3, #4]
 80015c2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80015c4:	429a      	cmp	r2, r3
 80015c6:	d3a3      	bcc.n	8001510 <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80015c8:	69fb      	ldr	r3, [r7, #28]
 80015ca:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80015ce:	69db      	ldr	r3, [r3, #28]
 80015d0:	69fa      	ldr	r2, [r7, #28]
 80015d2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80015d6:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 80015da:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d016      	beq.n	8001612 <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80015e4:	69fb      	ldr	r3, [r7, #28]
 80015e6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80015ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80015ee:	69fa      	ldr	r2, [r7, #28]
 80015f0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80015f4:	f043 030b 	orr.w	r3, r3, #11
 80015f8:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80015fc:	69fb      	ldr	r3, [r7, #28]
 80015fe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001602:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001604:	69fa      	ldr	r2, [r7, #28]
 8001606:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800160a:	f043 030b 	orr.w	r3, r3, #11
 800160e:	6453      	str	r3, [r2, #68]	@ 0x44
 8001610:	e015      	b.n	800163e <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8001612:	69fb      	ldr	r3, [r7, #28]
 8001614:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001618:	695b      	ldr	r3, [r3, #20]
 800161a:	69fa      	ldr	r2, [r7, #28]
 800161c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001620:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001624:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8001628:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800162a:	69fb      	ldr	r3, [r7, #28]
 800162c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001630:	691b      	ldr	r3, [r3, #16]
 8001632:	69fa      	ldr	r2, [r7, #28]
 8001634:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001638:	f043 030b 	orr.w	r3, r3, #11
 800163c:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800163e:	69fb      	ldr	r3, [r7, #28]
 8001640:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	69fa      	ldr	r2, [r7, #28]
 8001648:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800164c:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8001650:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	6818      	ldr	r0, [r3, #0]
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	691b      	ldr	r3, [r3, #16]
 800165a:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	f503 7371 	add.w	r3, r3, #964	@ 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001662:	461a      	mov	r2, r3
 8001664:	f002 fc84 	bl	8003f70 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	695a      	ldr	r2, [r3, #20]
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8001676:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	4618      	mov	r0, r3
 800167e:	f002 fbb2 	bl	8003de6 <USB_ReadInterrupts>
 8001682:	4603      	mov	r3, r0
 8001684:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001688:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800168c:	d124      	bne.n	80016d8 <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	4618      	mov	r0, r3
 8001694:	f002 fc48 	bl	8003f28 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	4618      	mov	r0, r3
 800169e:	f001 fcb0 	bl	8003002 <USB_GetDevSpeed>
 80016a2:	4603      	mov	r3, r0
 80016a4:	461a      	mov	r2, r3
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681c      	ldr	r4, [r3, #0]
 80016ae:	f001 f969 	bl	8002984 <HAL_RCC_GetHCLKFreq>
 80016b2:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80016b8:	b2db      	uxtb	r3, r3
 80016ba:	461a      	mov	r2, r3
 80016bc:	4620      	mov	r0, r4
 80016be:	f001 f9cf 	bl	8002a60 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80016c2:	6878      	ldr	r0, [r7, #4]
 80016c4:	f005 fe61 	bl	800738a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	695a      	ldr	r2, [r3, #20]
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 80016d6:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	4618      	mov	r0, r3
 80016de:	f002 fb82 	bl	8003de6 <USB_ReadInterrupts>
 80016e2:	4603      	mov	r3, r0
 80016e4:	f003 0308 	and.w	r3, r3, #8
 80016e8:	2b08      	cmp	r3, #8
 80016ea:	d10a      	bne.n	8001702 <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80016ec:	6878      	ldr	r0, [r7, #4]
 80016ee:	f005 fe3e 	bl	800736e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	695a      	ldr	r2, [r3, #20]
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	f002 0208 	and.w	r2, r2, #8
 8001700:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	4618      	mov	r0, r3
 8001708:	f002 fb6d 	bl	8003de6 <USB_ReadInterrupts>
 800170c:	4603      	mov	r3, r0
 800170e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001712:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8001716:	d10f      	bne.n	8001738 <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8001718:	2300      	movs	r3, #0
 800171a:	627b      	str	r3, [r7, #36]	@ 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800171c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800171e:	b2db      	uxtb	r3, r3
 8001720:	4619      	mov	r1, r3
 8001722:	6878      	ldr	r0, [r7, #4]
 8001724:	f005 fe96 	bl	8007454 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	695a      	ldr	r2, [r3, #20]
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8001736:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	4618      	mov	r0, r3
 800173e:	f002 fb52 	bl	8003de6 <USB_ReadInterrupts>
 8001742:	4603      	mov	r3, r0
 8001744:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001748:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800174c:	d10f      	bne.n	800176e <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 800174e:	2300      	movs	r3, #0
 8001750:	627b      	str	r3, [r7, #36]	@ 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8001752:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001754:	b2db      	uxtb	r3, r3
 8001756:	4619      	mov	r1, r3
 8001758:	6878      	ldr	r0, [r7, #4]
 800175a:	f005 fe69 	bl	8007430 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	695a      	ldr	r2, [r3, #20]
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 800176c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	4618      	mov	r0, r3
 8001774:	f002 fb37 	bl	8003de6 <USB_ReadInterrupts>
 8001778:	4603      	mov	r3, r0
 800177a:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800177e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001782:	d10a      	bne.n	800179a <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8001784:	6878      	ldr	r0, [r7, #4]
 8001786:	f005 fe77 	bl	8007478 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	695a      	ldr	r2, [r3, #20]
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8001798:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	4618      	mov	r0, r3
 80017a0:	f002 fb21 	bl	8003de6 <USB_ReadInterrupts>
 80017a4:	4603      	mov	r3, r0
 80017a6:	f003 0304 	and.w	r3, r3, #4
 80017aa:	2b04      	cmp	r3, #4
 80017ac:	d115      	bne.n	80017da <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	685b      	ldr	r3, [r3, #4]
 80017b4:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80017b6:	69bb      	ldr	r3, [r7, #24]
 80017b8:	f003 0304 	and.w	r3, r3, #4
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d002      	beq.n	80017c6 <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80017c0:	6878      	ldr	r0, [r7, #4]
 80017c2:	f005 fe67 	bl	8007494 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	6859      	ldr	r1, [r3, #4]
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	69ba      	ldr	r2, [r7, #24]
 80017d2:	430a      	orrs	r2, r1
 80017d4:	605a      	str	r2, [r3, #4]
 80017d6:	e000      	b.n	80017da <HAL_PCD_IRQHandler+0x75e>
      return;
 80017d8:	bf00      	nop
    }
  }
}
 80017da:	3734      	adds	r7, #52	@ 0x34
 80017dc:	46bd      	mov	sp, r7
 80017de:	bd90      	pop	{r4, r7, pc}

080017e0 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b082      	sub	sp, #8
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
 80017e8:	460b      	mov	r3, r1
 80017ea:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	f893 33bc 	ldrb.w	r3, [r3, #956]	@ 0x3bc
 80017f2:	2b01      	cmp	r3, #1
 80017f4:	d101      	bne.n	80017fa <HAL_PCD_SetAddress+0x1a>
 80017f6:	2302      	movs	r3, #2
 80017f8:	e013      	b.n	8001822 <HAL_PCD_SetAddress+0x42>
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	2201      	movs	r2, #1
 80017fe:	f883 23bc 	strb.w	r2, [r3, #956]	@ 0x3bc
  hpcd->USB_Address = address;
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	78fa      	ldrb	r2, [r7, #3]
 8001806:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	78fa      	ldrb	r2, [r7, #3]
 8001810:	4611      	mov	r1, r2
 8001812:	4618      	mov	r0, r3
 8001814:	f002 fa7f 	bl	8003d16 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	2200      	movs	r2, #0
 800181c:	f883 23bc 	strb.w	r2, [r3, #956]	@ 0x3bc

  return HAL_OK;
 8001820:	2300      	movs	r3, #0
}
 8001822:	4618      	mov	r0, r3
 8001824:	3708      	adds	r7, #8
 8001826:	46bd      	mov	sp, r7
 8001828:	bd80      	pop	{r7, pc}

0800182a <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800182a:	b580      	push	{r7, lr}
 800182c:	b084      	sub	sp, #16
 800182e:	af00      	add	r7, sp, #0
 8001830:	6078      	str	r0, [r7, #4]
 8001832:	4608      	mov	r0, r1
 8001834:	4611      	mov	r1, r2
 8001836:	461a      	mov	r2, r3
 8001838:	4603      	mov	r3, r0
 800183a:	70fb      	strb	r3, [r7, #3]
 800183c:	460b      	mov	r3, r1
 800183e:	803b      	strh	r3, [r7, #0]
 8001840:	4613      	mov	r3, r2
 8001842:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001844:	2300      	movs	r3, #0
 8001846:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001848:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800184c:	2b00      	cmp	r3, #0
 800184e:	da0f      	bge.n	8001870 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001850:	78fb      	ldrb	r3, [r7, #3]
 8001852:	f003 020f 	and.w	r2, r3, #15
 8001856:	4613      	mov	r3, r2
 8001858:	00db      	lsls	r3, r3, #3
 800185a:	1a9b      	subs	r3, r3, r2
 800185c:	009b      	lsls	r3, r3, #2
 800185e:	3338      	adds	r3, #56	@ 0x38
 8001860:	687a      	ldr	r2, [r7, #4]
 8001862:	4413      	add	r3, r2
 8001864:	3304      	adds	r3, #4
 8001866:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	2201      	movs	r2, #1
 800186c:	705a      	strb	r2, [r3, #1]
 800186e:	e00f      	b.n	8001890 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001870:	78fb      	ldrb	r3, [r7, #3]
 8001872:	f003 020f 	and.w	r2, r3, #15
 8001876:	4613      	mov	r3, r2
 8001878:	00db      	lsls	r3, r3, #3
 800187a:	1a9b      	subs	r3, r3, r2
 800187c:	009b      	lsls	r3, r3, #2
 800187e:	f503 73fc 	add.w	r3, r3, #504	@ 0x1f8
 8001882:	687a      	ldr	r2, [r7, #4]
 8001884:	4413      	add	r3, r2
 8001886:	3304      	adds	r3, #4
 8001888:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	2200      	movs	r2, #0
 800188e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001890:	78fb      	ldrb	r3, [r7, #3]
 8001892:	f003 030f 	and.w	r3, r3, #15
 8001896:	b2da      	uxtb	r2, r3
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800189c:	883a      	ldrh	r2, [r7, #0]
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	78ba      	ldrb	r2, [r7, #2]
 80018a6:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	785b      	ldrb	r3, [r3, #1]
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d004      	beq.n	80018ba <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	781b      	ldrb	r3, [r3, #0]
 80018b4:	461a      	mov	r2, r3
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80018ba:	78bb      	ldrb	r3, [r7, #2]
 80018bc:	2b02      	cmp	r3, #2
 80018be:	d102      	bne.n	80018c6 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	2200      	movs	r2, #0
 80018c4:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	f893 33bc 	ldrb.w	r3, [r3, #956]	@ 0x3bc
 80018cc:	2b01      	cmp	r3, #1
 80018ce:	d101      	bne.n	80018d4 <HAL_PCD_EP_Open+0xaa>
 80018d0:	2302      	movs	r3, #2
 80018d2:	e00e      	b.n	80018f2 <HAL_PCD_EP_Open+0xc8>
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	2201      	movs	r2, #1
 80018d8:	f883 23bc 	strb.w	r2, [r3, #956]	@ 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	68f9      	ldr	r1, [r7, #12]
 80018e2:	4618      	mov	r0, r3
 80018e4:	f001 fbb2 	bl	800304c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	2200      	movs	r2, #0
 80018ec:	f883 23bc 	strb.w	r2, [r3, #956]	@ 0x3bc

  return ret;
 80018f0:	7afb      	ldrb	r3, [r7, #11]
}
 80018f2:	4618      	mov	r0, r3
 80018f4:	3710      	adds	r7, #16
 80018f6:	46bd      	mov	sp, r7
 80018f8:	bd80      	pop	{r7, pc}

080018fa <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80018fa:	b580      	push	{r7, lr}
 80018fc:	b084      	sub	sp, #16
 80018fe:	af00      	add	r7, sp, #0
 8001900:	6078      	str	r0, [r7, #4]
 8001902:	460b      	mov	r3, r1
 8001904:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001906:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800190a:	2b00      	cmp	r3, #0
 800190c:	da0f      	bge.n	800192e <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800190e:	78fb      	ldrb	r3, [r7, #3]
 8001910:	f003 020f 	and.w	r2, r3, #15
 8001914:	4613      	mov	r3, r2
 8001916:	00db      	lsls	r3, r3, #3
 8001918:	1a9b      	subs	r3, r3, r2
 800191a:	009b      	lsls	r3, r3, #2
 800191c:	3338      	adds	r3, #56	@ 0x38
 800191e:	687a      	ldr	r2, [r7, #4]
 8001920:	4413      	add	r3, r2
 8001922:	3304      	adds	r3, #4
 8001924:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	2201      	movs	r2, #1
 800192a:	705a      	strb	r2, [r3, #1]
 800192c:	e00f      	b.n	800194e <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800192e:	78fb      	ldrb	r3, [r7, #3]
 8001930:	f003 020f 	and.w	r2, r3, #15
 8001934:	4613      	mov	r3, r2
 8001936:	00db      	lsls	r3, r3, #3
 8001938:	1a9b      	subs	r3, r3, r2
 800193a:	009b      	lsls	r3, r3, #2
 800193c:	f503 73fc 	add.w	r3, r3, #504	@ 0x1f8
 8001940:	687a      	ldr	r2, [r7, #4]
 8001942:	4413      	add	r3, r2
 8001944:	3304      	adds	r3, #4
 8001946:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	2200      	movs	r2, #0
 800194c:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800194e:	78fb      	ldrb	r3, [r7, #3]
 8001950:	f003 030f 	and.w	r3, r3, #15
 8001954:	b2da      	uxtb	r2, r3
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	f893 33bc 	ldrb.w	r3, [r3, #956]	@ 0x3bc
 8001960:	2b01      	cmp	r3, #1
 8001962:	d101      	bne.n	8001968 <HAL_PCD_EP_Close+0x6e>
 8001964:	2302      	movs	r3, #2
 8001966:	e00e      	b.n	8001986 <HAL_PCD_EP_Close+0x8c>
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	2201      	movs	r2, #1
 800196c:	f883 23bc 	strb.w	r2, [r3, #956]	@ 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	68f9      	ldr	r1, [r7, #12]
 8001976:	4618      	mov	r0, r3
 8001978:	f001 fbf0 	bl	800315c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	2200      	movs	r2, #0
 8001980:	f883 23bc 	strb.w	r2, [r3, #956]	@ 0x3bc
  return HAL_OK;
 8001984:	2300      	movs	r3, #0
}
 8001986:	4618      	mov	r0, r3
 8001988:	3710      	adds	r7, #16
 800198a:	46bd      	mov	sp, r7
 800198c:	bd80      	pop	{r7, pc}

0800198e <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800198e:	b580      	push	{r7, lr}
 8001990:	b086      	sub	sp, #24
 8001992:	af00      	add	r7, sp, #0
 8001994:	60f8      	str	r0, [r7, #12]
 8001996:	607a      	str	r2, [r7, #4]
 8001998:	603b      	str	r3, [r7, #0]
 800199a:	460b      	mov	r3, r1
 800199c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800199e:	7afb      	ldrb	r3, [r7, #11]
 80019a0:	f003 020f 	and.w	r2, r3, #15
 80019a4:	4613      	mov	r3, r2
 80019a6:	00db      	lsls	r3, r3, #3
 80019a8:	1a9b      	subs	r3, r3, r2
 80019aa:	009b      	lsls	r3, r3, #2
 80019ac:	f503 73fc 	add.w	r3, r3, #504	@ 0x1f8
 80019b0:	68fa      	ldr	r2, [r7, #12]
 80019b2:	4413      	add	r3, r2
 80019b4:	3304      	adds	r3, #4
 80019b6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80019b8:	697b      	ldr	r3, [r7, #20]
 80019ba:	687a      	ldr	r2, [r7, #4]
 80019bc:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80019be:	697b      	ldr	r3, [r7, #20]
 80019c0:	683a      	ldr	r2, [r7, #0]
 80019c2:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80019c4:	697b      	ldr	r3, [r7, #20]
 80019c6:	2200      	movs	r2, #0
 80019c8:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 80019ca:	697b      	ldr	r3, [r7, #20]
 80019cc:	2200      	movs	r2, #0
 80019ce:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80019d0:	7afb      	ldrb	r3, [r7, #11]
 80019d2:	f003 030f 	and.w	r3, r3, #15
 80019d6:	b2da      	uxtb	r2, r3
 80019d8:	697b      	ldr	r3, [r7, #20]
 80019da:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	691b      	ldr	r3, [r3, #16]
 80019e0:	2b01      	cmp	r3, #1
 80019e2:	d102      	bne.n	80019ea <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80019e4:	687a      	ldr	r2, [r7, #4]
 80019e6:	697b      	ldr	r3, [r7, #20]
 80019e8:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80019ea:	7afb      	ldrb	r3, [r7, #11]
 80019ec:	f003 030f 	and.w	r3, r3, #15
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d109      	bne.n	8001a08 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	6818      	ldr	r0, [r3, #0]
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	691b      	ldr	r3, [r3, #16]
 80019fc:	b2db      	uxtb	r3, r3
 80019fe:	461a      	mov	r2, r3
 8001a00:	6979      	ldr	r1, [r7, #20]
 8001a02:	f001 fecb 	bl	800379c <USB_EP0StartXfer>
 8001a06:	e008      	b.n	8001a1a <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	6818      	ldr	r0, [r3, #0]
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	691b      	ldr	r3, [r3, #16]
 8001a10:	b2db      	uxtb	r3, r3
 8001a12:	461a      	mov	r2, r3
 8001a14:	6979      	ldr	r1, [r7, #20]
 8001a16:	f001 fc7d 	bl	8003314 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001a1a:	2300      	movs	r3, #0
}
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	3718      	adds	r7, #24
 8001a20:	46bd      	mov	sp, r7
 8001a22:	bd80      	pop	{r7, pc}

08001a24 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001a24:	b480      	push	{r7}
 8001a26:	b083      	sub	sp, #12
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	6078      	str	r0, [r7, #4]
 8001a2c:	460b      	mov	r3, r1
 8001a2e:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001a30:	78fb      	ldrb	r3, [r7, #3]
 8001a32:	f003 020f 	and.w	r2, r3, #15
 8001a36:	6879      	ldr	r1, [r7, #4]
 8001a38:	4613      	mov	r3, r2
 8001a3a:	00db      	lsls	r3, r3, #3
 8001a3c:	1a9b      	subs	r3, r3, r2
 8001a3e:	009b      	lsls	r3, r3, #2
 8001a40:	440b      	add	r3, r1
 8001a42:	f503 7305 	add.w	r3, r3, #532	@ 0x214
 8001a46:	681b      	ldr	r3, [r3, #0]
}
 8001a48:	4618      	mov	r0, r3
 8001a4a:	370c      	adds	r7, #12
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a52:	4770      	bx	lr

08001a54 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b086      	sub	sp, #24
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	60f8      	str	r0, [r7, #12]
 8001a5c:	607a      	str	r2, [r7, #4]
 8001a5e:	603b      	str	r3, [r7, #0]
 8001a60:	460b      	mov	r3, r1
 8001a62:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001a64:	7afb      	ldrb	r3, [r7, #11]
 8001a66:	f003 020f 	and.w	r2, r3, #15
 8001a6a:	4613      	mov	r3, r2
 8001a6c:	00db      	lsls	r3, r3, #3
 8001a6e:	1a9b      	subs	r3, r3, r2
 8001a70:	009b      	lsls	r3, r3, #2
 8001a72:	3338      	adds	r3, #56	@ 0x38
 8001a74:	68fa      	ldr	r2, [r7, #12]
 8001a76:	4413      	add	r3, r2
 8001a78:	3304      	adds	r3, #4
 8001a7a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001a7c:	697b      	ldr	r3, [r7, #20]
 8001a7e:	687a      	ldr	r2, [r7, #4]
 8001a80:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8001a82:	697b      	ldr	r3, [r7, #20]
 8001a84:	683a      	ldr	r2, [r7, #0]
 8001a86:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8001a88:	697b      	ldr	r3, [r7, #20]
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8001a8e:	697b      	ldr	r3, [r7, #20]
 8001a90:	2201      	movs	r2, #1
 8001a92:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001a94:	7afb      	ldrb	r3, [r7, #11]
 8001a96:	f003 030f 	and.w	r3, r3, #15
 8001a9a:	b2da      	uxtb	r2, r3
 8001a9c:	697b      	ldr	r3, [r7, #20]
 8001a9e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	691b      	ldr	r3, [r3, #16]
 8001aa4:	2b01      	cmp	r3, #1
 8001aa6:	d102      	bne.n	8001aae <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001aa8:	687a      	ldr	r2, [r7, #4]
 8001aaa:	697b      	ldr	r3, [r7, #20]
 8001aac:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001aae:	7afb      	ldrb	r3, [r7, #11]
 8001ab0:	f003 030f 	and.w	r3, r3, #15
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d109      	bne.n	8001acc <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	6818      	ldr	r0, [r3, #0]
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	691b      	ldr	r3, [r3, #16]
 8001ac0:	b2db      	uxtb	r3, r3
 8001ac2:	461a      	mov	r2, r3
 8001ac4:	6979      	ldr	r1, [r7, #20]
 8001ac6:	f001 fe69 	bl	800379c <USB_EP0StartXfer>
 8001aca:	e008      	b.n	8001ade <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	6818      	ldr	r0, [r3, #0]
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	691b      	ldr	r3, [r3, #16]
 8001ad4:	b2db      	uxtb	r3, r3
 8001ad6:	461a      	mov	r2, r3
 8001ad8:	6979      	ldr	r1, [r7, #20]
 8001ada:	f001 fc1b 	bl	8003314 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001ade:	2300      	movs	r3, #0
}
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	3718      	adds	r7, #24
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	bd80      	pop	{r7, pc}

08001ae8 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b084      	sub	sp, #16
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]
 8001af0:	460b      	mov	r3, r1
 8001af2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001af4:	78fb      	ldrb	r3, [r7, #3]
 8001af6:	f003 020f 	and.w	r2, r3, #15
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	685b      	ldr	r3, [r3, #4]
 8001afe:	429a      	cmp	r2, r3
 8001b00:	d901      	bls.n	8001b06 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001b02:	2301      	movs	r3, #1
 8001b04:	e050      	b.n	8001ba8 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001b06:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	da0f      	bge.n	8001b2e <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001b0e:	78fb      	ldrb	r3, [r7, #3]
 8001b10:	f003 020f 	and.w	r2, r3, #15
 8001b14:	4613      	mov	r3, r2
 8001b16:	00db      	lsls	r3, r3, #3
 8001b18:	1a9b      	subs	r3, r3, r2
 8001b1a:	009b      	lsls	r3, r3, #2
 8001b1c:	3338      	adds	r3, #56	@ 0x38
 8001b1e:	687a      	ldr	r2, [r7, #4]
 8001b20:	4413      	add	r3, r2
 8001b22:	3304      	adds	r3, #4
 8001b24:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	2201      	movs	r2, #1
 8001b2a:	705a      	strb	r2, [r3, #1]
 8001b2c:	e00d      	b.n	8001b4a <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001b2e:	78fa      	ldrb	r2, [r7, #3]
 8001b30:	4613      	mov	r3, r2
 8001b32:	00db      	lsls	r3, r3, #3
 8001b34:	1a9b      	subs	r3, r3, r2
 8001b36:	009b      	lsls	r3, r3, #2
 8001b38:	f503 73fc 	add.w	r3, r3, #504	@ 0x1f8
 8001b3c:	687a      	ldr	r2, [r7, #4]
 8001b3e:	4413      	add	r3, r2
 8001b40:	3304      	adds	r3, #4
 8001b42:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	2200      	movs	r2, #0
 8001b48:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	2201      	movs	r2, #1
 8001b4e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001b50:	78fb      	ldrb	r3, [r7, #3]
 8001b52:	f003 030f 	and.w	r3, r3, #15
 8001b56:	b2da      	uxtb	r2, r3
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	f893 33bc 	ldrb.w	r3, [r3, #956]	@ 0x3bc
 8001b62:	2b01      	cmp	r3, #1
 8001b64:	d101      	bne.n	8001b6a <HAL_PCD_EP_SetStall+0x82>
 8001b66:	2302      	movs	r3, #2
 8001b68:	e01e      	b.n	8001ba8 <HAL_PCD_EP_SetStall+0xc0>
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	2201      	movs	r2, #1
 8001b6e:	f883 23bc 	strb.w	r2, [r3, #956]	@ 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	68f9      	ldr	r1, [r7, #12]
 8001b78:	4618      	mov	r0, r3
 8001b7a:	f001 fff8 	bl	8003b6e <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001b7e:	78fb      	ldrb	r3, [r7, #3]
 8001b80:	f003 030f 	and.w	r3, r3, #15
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d10a      	bne.n	8001b9e <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	6818      	ldr	r0, [r3, #0]
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	691b      	ldr	r3, [r3, #16]
 8001b90:	b2d9      	uxtb	r1, r3
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	f503 7371 	add.w	r3, r3, #964	@ 0x3c4
 8001b98:	461a      	mov	r2, r3
 8001b9a:	f002 f9e9 	bl	8003f70 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	f883 23bc 	strb.w	r2, [r3, #956]	@ 0x3bc

  return HAL_OK;
 8001ba6:	2300      	movs	r3, #0
}
 8001ba8:	4618      	mov	r0, r3
 8001baa:	3710      	adds	r7, #16
 8001bac:	46bd      	mov	sp, r7
 8001bae:	bd80      	pop	{r7, pc}

08001bb0 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b084      	sub	sp, #16
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]
 8001bb8:	460b      	mov	r3, r1
 8001bba:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001bbc:	78fb      	ldrb	r3, [r7, #3]
 8001bbe:	f003 020f 	and.w	r2, r3, #15
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	685b      	ldr	r3, [r3, #4]
 8001bc6:	429a      	cmp	r2, r3
 8001bc8:	d901      	bls.n	8001bce <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001bca:	2301      	movs	r3, #1
 8001bcc:	e042      	b.n	8001c54 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001bce:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	da0f      	bge.n	8001bf6 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001bd6:	78fb      	ldrb	r3, [r7, #3]
 8001bd8:	f003 020f 	and.w	r2, r3, #15
 8001bdc:	4613      	mov	r3, r2
 8001bde:	00db      	lsls	r3, r3, #3
 8001be0:	1a9b      	subs	r3, r3, r2
 8001be2:	009b      	lsls	r3, r3, #2
 8001be4:	3338      	adds	r3, #56	@ 0x38
 8001be6:	687a      	ldr	r2, [r7, #4]
 8001be8:	4413      	add	r3, r2
 8001bea:	3304      	adds	r3, #4
 8001bec:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	2201      	movs	r2, #1
 8001bf2:	705a      	strb	r2, [r3, #1]
 8001bf4:	e00f      	b.n	8001c16 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001bf6:	78fb      	ldrb	r3, [r7, #3]
 8001bf8:	f003 020f 	and.w	r2, r3, #15
 8001bfc:	4613      	mov	r3, r2
 8001bfe:	00db      	lsls	r3, r3, #3
 8001c00:	1a9b      	subs	r3, r3, r2
 8001c02:	009b      	lsls	r3, r3, #2
 8001c04:	f503 73fc 	add.w	r3, r3, #504	@ 0x1f8
 8001c08:	687a      	ldr	r2, [r7, #4]
 8001c0a:	4413      	add	r3, r2
 8001c0c:	3304      	adds	r3, #4
 8001c0e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	2200      	movs	r2, #0
 8001c14:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	2200      	movs	r2, #0
 8001c1a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001c1c:	78fb      	ldrb	r3, [r7, #3]
 8001c1e:	f003 030f 	and.w	r3, r3, #15
 8001c22:	b2da      	uxtb	r2, r3
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	f893 33bc 	ldrb.w	r3, [r3, #956]	@ 0x3bc
 8001c2e:	2b01      	cmp	r3, #1
 8001c30:	d101      	bne.n	8001c36 <HAL_PCD_EP_ClrStall+0x86>
 8001c32:	2302      	movs	r3, #2
 8001c34:	e00e      	b.n	8001c54 <HAL_PCD_EP_ClrStall+0xa4>
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	2201      	movs	r2, #1
 8001c3a:	f883 23bc 	strb.w	r2, [r3, #956]	@ 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	68f9      	ldr	r1, [r7, #12]
 8001c44:	4618      	mov	r0, r3
 8001c46:	f002 f800 	bl	8003c4a <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	f883 23bc 	strb.w	r2, [r3, #956]	@ 0x3bc

  return HAL_OK;
 8001c52:	2300      	movs	r3, #0
}
 8001c54:	4618      	mov	r0, r3
 8001c56:	3710      	adds	r7, #16
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	bd80      	pop	{r7, pc}

08001c5c <HAL_PCD_EP_Flush>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Flush(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	b082      	sub	sp, #8
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]
 8001c64:	460b      	mov	r3, r1
 8001c66:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	f893 33bc 	ldrb.w	r3, [r3, #956]	@ 0x3bc
 8001c6e:	2b01      	cmp	r3, #1
 8001c70:	d101      	bne.n	8001c76 <HAL_PCD_EP_Flush+0x1a>
 8001c72:	2302      	movs	r3, #2
 8001c74:	e01b      	b.n	8001cae <HAL_PCD_EP_Flush+0x52>
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	2201      	movs	r2, #1
 8001c7a:	f883 23bc 	strb.w	r2, [r3, #956]	@ 0x3bc

  if ((ep_addr & 0x80U) == 0x80U)
 8001c7e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	da09      	bge.n	8001c9a <HAL_PCD_EP_Flush+0x3e>
  {
    (void)USB_FlushTxFifo(hpcd->Instance, (uint32_t)ep_addr & EP_ADDR_MSK);
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681a      	ldr	r2, [r3, #0]
 8001c8a:	78fb      	ldrb	r3, [r7, #3]
 8001c8c:	f003 030f 	and.w	r3, r3, #15
 8001c90:	4619      	mov	r1, r3
 8001c92:	4610      	mov	r0, r2
 8001c94:	f001 f958 	bl	8002f48 <USB_FlushTxFifo>
 8001c98:	e004      	b.n	8001ca4 <HAL_PCD_EP_Flush+0x48>
  }
  else
  {
    (void)USB_FlushRxFifo(hpcd->Instance);
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	f001 f976 	bl	8002f90 <USB_FlushRxFifo>
  }

  __HAL_UNLOCK(hpcd);
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	f883 23bc 	strb.w	r2, [r3, #956]	@ 0x3bc

  return HAL_OK;
 8001cac:	2300      	movs	r3, #0
}
 8001cae:	4618      	mov	r0, r3
 8001cb0:	3708      	adds	r7, #8
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	bd80      	pop	{r7, pc}

08001cb6 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8001cb6:	b580      	push	{r7, lr}
 8001cb8:	b08a      	sub	sp, #40	@ 0x28
 8001cba:	af02      	add	r7, sp, #8
 8001cbc:	6078      	str	r0, [r7, #4]
 8001cbe:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001cc6:	697b      	ldr	r3, [r7, #20]
 8001cc8:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8001cca:	683a      	ldr	r2, [r7, #0]
 8001ccc:	4613      	mov	r3, r2
 8001cce:	00db      	lsls	r3, r3, #3
 8001cd0:	1a9b      	subs	r3, r3, r2
 8001cd2:	009b      	lsls	r3, r3, #2
 8001cd4:	3338      	adds	r3, #56	@ 0x38
 8001cd6:	687a      	ldr	r2, [r7, #4]
 8001cd8:	4413      	add	r3, r2
 8001cda:	3304      	adds	r3, #4
 8001cdc:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	699a      	ldr	r2, [r3, #24]
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	695b      	ldr	r3, [r3, #20]
 8001ce6:	429a      	cmp	r2, r3
 8001ce8:	d901      	bls.n	8001cee <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8001cea:	2301      	movs	r3, #1
 8001cec:	e06c      	b.n	8001dc8 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	695a      	ldr	r2, [r3, #20]
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	699b      	ldr	r3, [r3, #24]
 8001cf6:	1ad3      	subs	r3, r2, r3
 8001cf8:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	689b      	ldr	r3, [r3, #8]
 8001cfe:	69fa      	ldr	r2, [r7, #28]
 8001d00:	429a      	cmp	r2, r3
 8001d02:	d902      	bls.n	8001d0a <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	689b      	ldr	r3, [r3, #8]
 8001d08:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8001d0a:	69fb      	ldr	r3, [r7, #28]
 8001d0c:	3303      	adds	r3, #3
 8001d0e:	089b      	lsrs	r3, r3, #2
 8001d10:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001d12:	e02b      	b.n	8001d6c <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	695a      	ldr	r2, [r3, #20]
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	699b      	ldr	r3, [r3, #24]
 8001d1c:	1ad3      	subs	r3, r2, r3
 8001d1e:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	689b      	ldr	r3, [r3, #8]
 8001d24:	69fa      	ldr	r2, [r7, #28]
 8001d26:	429a      	cmp	r2, r3
 8001d28:	d902      	bls.n	8001d30 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	689b      	ldr	r3, [r3, #8]
 8001d2e:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8001d30:	69fb      	ldr	r3, [r7, #28]
 8001d32:	3303      	adds	r3, #3
 8001d34:	089b      	lsrs	r3, r3, #2
 8001d36:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	68d9      	ldr	r1, [r3, #12]
 8001d3c:	683b      	ldr	r3, [r7, #0]
 8001d3e:	b2da      	uxtb	r2, r3
 8001d40:	69fb      	ldr	r3, [r7, #28]
 8001d42:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8001d48:	b2db      	uxtb	r3, r3
 8001d4a:	9300      	str	r3, [sp, #0]
 8001d4c:	4603      	mov	r3, r0
 8001d4e:	6978      	ldr	r0, [r7, #20]
 8001d50:	f001 fe77 	bl	8003a42 <USB_WritePacket>

    ep->xfer_buff  += len;
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	68da      	ldr	r2, [r3, #12]
 8001d58:	69fb      	ldr	r3, [r7, #28]
 8001d5a:	441a      	add	r2, r3
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	699a      	ldr	r2, [r3, #24]
 8001d64:	69fb      	ldr	r3, [r7, #28]
 8001d66:	441a      	add	r2, r3
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001d6c:	683b      	ldr	r3, [r7, #0]
 8001d6e:	015a      	lsls	r2, r3, #5
 8001d70:	693b      	ldr	r3, [r7, #16]
 8001d72:	4413      	add	r3, r2
 8001d74:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001d78:	699b      	ldr	r3, [r3, #24]
 8001d7a:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8001d7c:	69ba      	ldr	r2, [r7, #24]
 8001d7e:	429a      	cmp	r2, r3
 8001d80:	d809      	bhi.n	8001d96 <PCD_WriteEmptyTxFifo+0xe0>
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	699a      	ldr	r2, [r3, #24]
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001d8a:	429a      	cmp	r2, r3
 8001d8c:	d203      	bcs.n	8001d96 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	695b      	ldr	r3, [r3, #20]
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d1be      	bne.n	8001d14 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	695a      	ldr	r2, [r3, #20]
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	699b      	ldr	r3, [r3, #24]
 8001d9e:	429a      	cmp	r2, r3
 8001da0:	d811      	bhi.n	8001dc6 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001da2:	683b      	ldr	r3, [r7, #0]
 8001da4:	f003 030f 	and.w	r3, r3, #15
 8001da8:	2201      	movs	r2, #1
 8001daa:	fa02 f303 	lsl.w	r3, r2, r3
 8001dae:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001db0:	693b      	ldr	r3, [r7, #16]
 8001db2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001db6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001db8:	68bb      	ldr	r3, [r7, #8]
 8001dba:	43db      	mvns	r3, r3
 8001dbc:	6939      	ldr	r1, [r7, #16]
 8001dbe:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8001dc2:	4013      	ands	r3, r2
 8001dc4:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8001dc6:	2300      	movs	r3, #0
}
 8001dc8:	4618      	mov	r0, r3
 8001dca:	3720      	adds	r7, #32
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	bd80      	pop	{r7, pc}

08001dd0 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b086      	sub	sp, #24
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]
 8001dd8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001de0:	697b      	ldr	r3, [r7, #20]
 8001de2:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8001de4:	697b      	ldr	r3, [r7, #20]
 8001de6:	333c      	adds	r3, #60	@ 0x3c
 8001de8:	3304      	adds	r3, #4
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8001dee:	683b      	ldr	r3, [r7, #0]
 8001df0:	015a      	lsls	r2, r3, #5
 8001df2:	693b      	ldr	r3, [r7, #16]
 8001df4:	4413      	add	r3, r2
 8001df6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001dfa:	689b      	ldr	r3, [r3, #8]
 8001dfc:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	691b      	ldr	r3, [r3, #16]
 8001e02:	2b01      	cmp	r3, #1
 8001e04:	f040 80a0 	bne.w	8001f48 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8001e08:	68bb      	ldr	r3, [r7, #8]
 8001e0a:	f003 0308 	and.w	r3, r3, #8
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d015      	beq.n	8001e3e <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	4a72      	ldr	r2, [pc, #456]	@ (8001fe0 <PCD_EP_OutXfrComplete_int+0x210>)
 8001e16:	4293      	cmp	r3, r2
 8001e18:	f240 80dd 	bls.w	8001fd6 <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8001e1c:	68bb      	ldr	r3, [r7, #8]
 8001e1e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	f000 80d7 	beq.w	8001fd6 <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8001e28:	683b      	ldr	r3, [r7, #0]
 8001e2a:	015a      	lsls	r2, r3, #5
 8001e2c:	693b      	ldr	r3, [r7, #16]
 8001e2e:	4413      	add	r3, r2
 8001e30:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001e34:	461a      	mov	r2, r3
 8001e36:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001e3a:	6093      	str	r3, [r2, #8]
 8001e3c:	e0cb      	b.n	8001fd6 <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8001e3e:	68bb      	ldr	r3, [r7, #8]
 8001e40:	f003 0320 	and.w	r3, r3, #32
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d009      	beq.n	8001e5c <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001e48:	683b      	ldr	r3, [r7, #0]
 8001e4a:	015a      	lsls	r2, r3, #5
 8001e4c:	693b      	ldr	r3, [r7, #16]
 8001e4e:	4413      	add	r3, r2
 8001e50:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001e54:	461a      	mov	r2, r3
 8001e56:	2320      	movs	r3, #32
 8001e58:	6093      	str	r3, [r2, #8]
 8001e5a:	e0bc      	b.n	8001fd6 <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8001e5c:	68bb      	ldr	r3, [r7, #8]
 8001e5e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	f040 80b7 	bne.w	8001fd6 <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	4a5d      	ldr	r2, [pc, #372]	@ (8001fe0 <PCD_EP_OutXfrComplete_int+0x210>)
 8001e6c:	4293      	cmp	r3, r2
 8001e6e:	d90f      	bls.n	8001e90 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8001e70:	68bb      	ldr	r3, [r7, #8]
 8001e72:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d00a      	beq.n	8001e90 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8001e7a:	683b      	ldr	r3, [r7, #0]
 8001e7c:	015a      	lsls	r2, r3, #5
 8001e7e:	693b      	ldr	r3, [r7, #16]
 8001e80:	4413      	add	r3, r2
 8001e82:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001e86:	461a      	mov	r2, r3
 8001e88:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001e8c:	6093      	str	r3, [r2, #8]
 8001e8e:	e0a2      	b.n	8001fd6 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8001e90:	6879      	ldr	r1, [r7, #4]
 8001e92:	683a      	ldr	r2, [r7, #0]
 8001e94:	4613      	mov	r3, r2
 8001e96:	00db      	lsls	r3, r3, #3
 8001e98:	1a9b      	subs	r3, r3, r2
 8001e9a:	009b      	lsls	r3, r3, #2
 8001e9c:	440b      	add	r3, r1
 8001e9e:	f503 7301 	add.w	r3, r3, #516	@ 0x204
 8001ea2:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8001ea4:	683b      	ldr	r3, [r7, #0]
 8001ea6:	0159      	lsls	r1, r3, #5
 8001ea8:	693b      	ldr	r3, [r7, #16]
 8001eaa:	440b      	add	r3, r1
 8001eac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001eb0:	691b      	ldr	r3, [r3, #16]
 8001eb2:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8001eb6:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8001eb8:	6878      	ldr	r0, [r7, #4]
 8001eba:	683a      	ldr	r2, [r7, #0]
 8001ebc:	4613      	mov	r3, r2
 8001ebe:	00db      	lsls	r3, r3, #3
 8001ec0:	1a9b      	subs	r3, r3, r2
 8001ec2:	009b      	lsls	r3, r3, #2
 8001ec4:	4403      	add	r3, r0
 8001ec6:	f503 7305 	add.w	r3, r3, #532	@ 0x214
 8001eca:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8001ecc:	6879      	ldr	r1, [r7, #4]
 8001ece:	683a      	ldr	r2, [r7, #0]
 8001ed0:	4613      	mov	r3, r2
 8001ed2:	00db      	lsls	r3, r3, #3
 8001ed4:	1a9b      	subs	r3, r3, r2
 8001ed6:	009b      	lsls	r3, r3, #2
 8001ed8:	440b      	add	r3, r1
 8001eda:	f503 7302 	add.w	r3, r3, #520	@ 0x208
 8001ede:	6819      	ldr	r1, [r3, #0]
 8001ee0:	6878      	ldr	r0, [r7, #4]
 8001ee2:	683a      	ldr	r2, [r7, #0]
 8001ee4:	4613      	mov	r3, r2
 8001ee6:	00db      	lsls	r3, r3, #3
 8001ee8:	1a9b      	subs	r3, r3, r2
 8001eea:	009b      	lsls	r3, r3, #2
 8001eec:	4403      	add	r3, r0
 8001eee:	f503 7301 	add.w	r3, r3, #516	@ 0x204
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	4419      	add	r1, r3
 8001ef6:	6878      	ldr	r0, [r7, #4]
 8001ef8:	683a      	ldr	r2, [r7, #0]
 8001efa:	4613      	mov	r3, r2
 8001efc:	00db      	lsls	r3, r3, #3
 8001efe:	1a9b      	subs	r3, r3, r2
 8001f00:	009b      	lsls	r3, r3, #2
 8001f02:	4403      	add	r3, r0
 8001f04:	f503 7302 	add.w	r3, r3, #520	@ 0x208
 8001f08:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8001f0a:	683b      	ldr	r3, [r7, #0]
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d114      	bne.n	8001f3a <PCD_EP_OutXfrComplete_int+0x16a>
 8001f10:	6879      	ldr	r1, [r7, #4]
 8001f12:	683a      	ldr	r2, [r7, #0]
 8001f14:	4613      	mov	r3, r2
 8001f16:	00db      	lsls	r3, r3, #3
 8001f18:	1a9b      	subs	r3, r3, r2
 8001f1a:	009b      	lsls	r3, r3, #2
 8001f1c:	440b      	add	r3, r1
 8001f1e:	f503 7304 	add.w	r3, r3, #528	@ 0x210
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d108      	bne.n	8001f3a <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	6818      	ldr	r0, [r3, #0]
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	f503 7371 	add.w	r3, r3, #964	@ 0x3c4
 8001f32:	461a      	mov	r2, r3
 8001f34:	2101      	movs	r1, #1
 8001f36:	f002 f81b 	bl	8003f70 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8001f3a:	683b      	ldr	r3, [r7, #0]
 8001f3c:	b2db      	uxtb	r3, r3
 8001f3e:	4619      	mov	r1, r3
 8001f40:	6878      	ldr	r0, [r7, #4]
 8001f42:	f005 f9df 	bl	8007304 <HAL_PCD_DataOutStageCallback>
 8001f46:	e046      	b.n	8001fd6 <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	4a26      	ldr	r2, [pc, #152]	@ (8001fe4 <PCD_EP_OutXfrComplete_int+0x214>)
 8001f4c:	4293      	cmp	r3, r2
 8001f4e:	d124      	bne.n	8001f9a <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8001f50:	68bb      	ldr	r3, [r7, #8]
 8001f52:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d00a      	beq.n	8001f70 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8001f5a:	683b      	ldr	r3, [r7, #0]
 8001f5c:	015a      	lsls	r2, r3, #5
 8001f5e:	693b      	ldr	r3, [r7, #16]
 8001f60:	4413      	add	r3, r2
 8001f62:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001f66:	461a      	mov	r2, r3
 8001f68:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001f6c:	6093      	str	r3, [r2, #8]
 8001f6e:	e032      	b.n	8001fd6 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001f70:	68bb      	ldr	r3, [r7, #8]
 8001f72:	f003 0320 	and.w	r3, r3, #32
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d008      	beq.n	8001f8c <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001f7a:	683b      	ldr	r3, [r7, #0]
 8001f7c:	015a      	lsls	r2, r3, #5
 8001f7e:	693b      	ldr	r3, [r7, #16]
 8001f80:	4413      	add	r3, r2
 8001f82:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001f86:	461a      	mov	r2, r3
 8001f88:	2320      	movs	r3, #32
 8001f8a:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8001f8c:	683b      	ldr	r3, [r7, #0]
 8001f8e:	b2db      	uxtb	r3, r3
 8001f90:	4619      	mov	r1, r3
 8001f92:	6878      	ldr	r0, [r7, #4]
 8001f94:	f005 f9b6 	bl	8007304 <HAL_PCD_DataOutStageCallback>
 8001f98:	e01d      	b.n	8001fd6 <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8001f9a:	683b      	ldr	r3, [r7, #0]
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d114      	bne.n	8001fca <PCD_EP_OutXfrComplete_int+0x1fa>
 8001fa0:	6879      	ldr	r1, [r7, #4]
 8001fa2:	683a      	ldr	r2, [r7, #0]
 8001fa4:	4613      	mov	r3, r2
 8001fa6:	00db      	lsls	r3, r3, #3
 8001fa8:	1a9b      	subs	r3, r3, r2
 8001faa:	009b      	lsls	r3, r3, #2
 8001fac:	440b      	add	r3, r1
 8001fae:	f503 7304 	add.w	r3, r3, #528	@ 0x210
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d108      	bne.n	8001fca <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	6818      	ldr	r0, [r3, #0]
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	f503 7371 	add.w	r3, r3, #964	@ 0x3c4
 8001fc2:	461a      	mov	r2, r3
 8001fc4:	2100      	movs	r1, #0
 8001fc6:	f001 ffd3 	bl	8003f70 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8001fca:	683b      	ldr	r3, [r7, #0]
 8001fcc:	b2db      	uxtb	r3, r3
 8001fce:	4619      	mov	r1, r3
 8001fd0:	6878      	ldr	r0, [r7, #4]
 8001fd2:	f005 f997 	bl	8007304 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8001fd6:	2300      	movs	r3, #0
}
 8001fd8:	4618      	mov	r0, r3
 8001fda:	3718      	adds	r7, #24
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	bd80      	pop	{r7, pc}
 8001fe0:	4f54300a 	.word	0x4f54300a
 8001fe4:	4f54310a 	.word	0x4f54310a

08001fe8 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	b086      	sub	sp, #24
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]
 8001ff0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001ff8:	697b      	ldr	r3, [r7, #20]
 8001ffa:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8001ffc:	697b      	ldr	r3, [r7, #20]
 8001ffe:	333c      	adds	r3, #60	@ 0x3c
 8002000:	3304      	adds	r3, #4
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002006:	683b      	ldr	r3, [r7, #0]
 8002008:	015a      	lsls	r2, r3, #5
 800200a:	693b      	ldr	r3, [r7, #16]
 800200c:	4413      	add	r3, r2
 800200e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002012:	689b      	ldr	r3, [r3, #8]
 8002014:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	4a15      	ldr	r2, [pc, #84]	@ (8002070 <PCD_EP_OutSetupPacket_int+0x88>)
 800201a:	4293      	cmp	r3, r2
 800201c:	d90e      	bls.n	800203c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800201e:	68bb      	ldr	r3, [r7, #8]
 8002020:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002024:	2b00      	cmp	r3, #0
 8002026:	d009      	beq.n	800203c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002028:	683b      	ldr	r3, [r7, #0]
 800202a:	015a      	lsls	r2, r3, #5
 800202c:	693b      	ldr	r3, [r7, #16]
 800202e:	4413      	add	r3, r2
 8002030:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002034:	461a      	mov	r2, r3
 8002036:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800203a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800203c:	6878      	ldr	r0, [r7, #4]
 800203e:	f005 f94f 	bl	80072e0 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	4a0a      	ldr	r2, [pc, #40]	@ (8002070 <PCD_EP_OutSetupPacket_int+0x88>)
 8002046:	4293      	cmp	r3, r2
 8002048:	d90c      	bls.n	8002064 <PCD_EP_OutSetupPacket_int+0x7c>
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	691b      	ldr	r3, [r3, #16]
 800204e:	2b01      	cmp	r3, #1
 8002050:	d108      	bne.n	8002064 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	6818      	ldr	r0, [r3, #0]
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	f503 7371 	add.w	r3, r3, #964	@ 0x3c4
 800205c:	461a      	mov	r2, r3
 800205e:	2101      	movs	r1, #1
 8002060:	f001 ff86 	bl	8003f70 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8002064:	2300      	movs	r3, #0
}
 8002066:	4618      	mov	r0, r3
 8002068:	3718      	adds	r7, #24
 800206a:	46bd      	mov	sp, r7
 800206c:	bd80      	pop	{r7, pc}
 800206e:	bf00      	nop
 8002070:	4f54300a 	.word	0x4f54300a

08002074 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8002074:	b480      	push	{r7}
 8002076:	b085      	sub	sp, #20
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
 800207c:	460b      	mov	r3, r1
 800207e:	70fb      	strb	r3, [r7, #3]
 8002080:	4613      	mov	r3, r2
 8002082:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800208a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800208c:	78fb      	ldrb	r3, [r7, #3]
 800208e:	2b00      	cmp	r3, #0
 8002090:	d107      	bne.n	80020a2 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8002092:	883b      	ldrh	r3, [r7, #0]
 8002094:	0419      	lsls	r1, r3, #16
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	68ba      	ldr	r2, [r7, #8]
 800209c:	430a      	orrs	r2, r1
 800209e:	629a      	str	r2, [r3, #40]	@ 0x28
 80020a0:	e028      	b.n	80020f4 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020a8:	0c1b      	lsrs	r3, r3, #16
 80020aa:	68ba      	ldr	r2, [r7, #8]
 80020ac:	4413      	add	r3, r2
 80020ae:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80020b0:	2300      	movs	r3, #0
 80020b2:	73fb      	strb	r3, [r7, #15]
 80020b4:	e00d      	b.n	80020d2 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681a      	ldr	r2, [r3, #0]
 80020ba:	7bfb      	ldrb	r3, [r7, #15]
 80020bc:	3340      	adds	r3, #64	@ 0x40
 80020be:	009b      	lsls	r3, r3, #2
 80020c0:	4413      	add	r3, r2
 80020c2:	685b      	ldr	r3, [r3, #4]
 80020c4:	0c1b      	lsrs	r3, r3, #16
 80020c6:	68ba      	ldr	r2, [r7, #8]
 80020c8:	4413      	add	r3, r2
 80020ca:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80020cc:	7bfb      	ldrb	r3, [r7, #15]
 80020ce:	3301      	adds	r3, #1
 80020d0:	73fb      	strb	r3, [r7, #15]
 80020d2:	7bfa      	ldrb	r2, [r7, #15]
 80020d4:	78fb      	ldrb	r3, [r7, #3]
 80020d6:	3b01      	subs	r3, #1
 80020d8:	429a      	cmp	r2, r3
 80020da:	d3ec      	bcc.n	80020b6 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80020dc:	883b      	ldrh	r3, [r7, #0]
 80020de:	0418      	lsls	r0, r3, #16
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	6819      	ldr	r1, [r3, #0]
 80020e4:	78fb      	ldrb	r3, [r7, #3]
 80020e6:	3b01      	subs	r3, #1
 80020e8:	68ba      	ldr	r2, [r7, #8]
 80020ea:	4302      	orrs	r2, r0
 80020ec:	3340      	adds	r3, #64	@ 0x40
 80020ee:	009b      	lsls	r3, r3, #2
 80020f0:	440b      	add	r3, r1
 80020f2:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80020f4:	2300      	movs	r3, #0
}
 80020f6:	4618      	mov	r0, r3
 80020f8:	3714      	adds	r7, #20
 80020fa:	46bd      	mov	sp, r7
 80020fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002100:	4770      	bx	lr

08002102 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8002102:	b480      	push	{r7}
 8002104:	b083      	sub	sp, #12
 8002106:	af00      	add	r7, sp, #0
 8002108:	6078      	str	r0, [r7, #4]
 800210a:	460b      	mov	r3, r1
 800210c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	887a      	ldrh	r2, [r7, #2]
 8002114:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8002116:	2300      	movs	r3, #0
}
 8002118:	4618      	mov	r0, r3
 800211a:	370c      	adds	r7, #12
 800211c:	46bd      	mov	sp, r7
 800211e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002122:	4770      	bx	lr

08002124 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8002124:	b480      	push	{r7}
 8002126:	b083      	sub	sp, #12
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]
 800212c:	460b      	mov	r3, r1
 800212e:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8002130:	bf00      	nop
 8002132:	370c      	adds	r7, #12
 8002134:	46bd      	mov	sp, r7
 8002136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213a:	4770      	bx	lr

0800213c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800213c:	b580      	push	{r7, lr}
 800213e:	b086      	sub	sp, #24
 8002140:	af00      	add	r7, sp, #0
 8002142:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	2b00      	cmp	r3, #0
 8002148:	d101      	bne.n	800214e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800214a:	2301      	movs	r3, #1
 800214c:	e267      	b.n	800261e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	f003 0301 	and.w	r3, r3, #1
 8002156:	2b00      	cmp	r3, #0
 8002158:	d075      	beq.n	8002246 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800215a:	4b88      	ldr	r3, [pc, #544]	@ (800237c <HAL_RCC_OscConfig+0x240>)
 800215c:	689b      	ldr	r3, [r3, #8]
 800215e:	f003 030c 	and.w	r3, r3, #12
 8002162:	2b04      	cmp	r3, #4
 8002164:	d00c      	beq.n	8002180 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002166:	4b85      	ldr	r3, [pc, #532]	@ (800237c <HAL_RCC_OscConfig+0x240>)
 8002168:	689b      	ldr	r3, [r3, #8]
 800216a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800216e:	2b08      	cmp	r3, #8
 8002170:	d112      	bne.n	8002198 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002172:	4b82      	ldr	r3, [pc, #520]	@ (800237c <HAL_RCC_OscConfig+0x240>)
 8002174:	685b      	ldr	r3, [r3, #4]
 8002176:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800217a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800217e:	d10b      	bne.n	8002198 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002180:	4b7e      	ldr	r3, [pc, #504]	@ (800237c <HAL_RCC_OscConfig+0x240>)
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002188:	2b00      	cmp	r3, #0
 800218a:	d05b      	beq.n	8002244 <HAL_RCC_OscConfig+0x108>
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	685b      	ldr	r3, [r3, #4]
 8002190:	2b00      	cmp	r3, #0
 8002192:	d157      	bne.n	8002244 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002194:	2301      	movs	r3, #1
 8002196:	e242      	b.n	800261e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	685b      	ldr	r3, [r3, #4]
 800219c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80021a0:	d106      	bne.n	80021b0 <HAL_RCC_OscConfig+0x74>
 80021a2:	4b76      	ldr	r3, [pc, #472]	@ (800237c <HAL_RCC_OscConfig+0x240>)
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	4a75      	ldr	r2, [pc, #468]	@ (800237c <HAL_RCC_OscConfig+0x240>)
 80021a8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80021ac:	6013      	str	r3, [r2, #0]
 80021ae:	e01d      	b.n	80021ec <HAL_RCC_OscConfig+0xb0>
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	685b      	ldr	r3, [r3, #4]
 80021b4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80021b8:	d10c      	bne.n	80021d4 <HAL_RCC_OscConfig+0x98>
 80021ba:	4b70      	ldr	r3, [pc, #448]	@ (800237c <HAL_RCC_OscConfig+0x240>)
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	4a6f      	ldr	r2, [pc, #444]	@ (800237c <HAL_RCC_OscConfig+0x240>)
 80021c0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80021c4:	6013      	str	r3, [r2, #0]
 80021c6:	4b6d      	ldr	r3, [pc, #436]	@ (800237c <HAL_RCC_OscConfig+0x240>)
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	4a6c      	ldr	r2, [pc, #432]	@ (800237c <HAL_RCC_OscConfig+0x240>)
 80021cc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80021d0:	6013      	str	r3, [r2, #0]
 80021d2:	e00b      	b.n	80021ec <HAL_RCC_OscConfig+0xb0>
 80021d4:	4b69      	ldr	r3, [pc, #420]	@ (800237c <HAL_RCC_OscConfig+0x240>)
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	4a68      	ldr	r2, [pc, #416]	@ (800237c <HAL_RCC_OscConfig+0x240>)
 80021da:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80021de:	6013      	str	r3, [r2, #0]
 80021e0:	4b66      	ldr	r3, [pc, #408]	@ (800237c <HAL_RCC_OscConfig+0x240>)
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	4a65      	ldr	r2, [pc, #404]	@ (800237c <HAL_RCC_OscConfig+0x240>)
 80021e6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80021ea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	685b      	ldr	r3, [r3, #4]
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d013      	beq.n	800221c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021f4:	f7fe fb2c 	bl	8000850 <HAL_GetTick>
 80021f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021fa:	e008      	b.n	800220e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80021fc:	f7fe fb28 	bl	8000850 <HAL_GetTick>
 8002200:	4602      	mov	r2, r0
 8002202:	693b      	ldr	r3, [r7, #16]
 8002204:	1ad3      	subs	r3, r2, r3
 8002206:	2b64      	cmp	r3, #100	@ 0x64
 8002208:	d901      	bls.n	800220e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800220a:	2303      	movs	r3, #3
 800220c:	e207      	b.n	800261e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800220e:	4b5b      	ldr	r3, [pc, #364]	@ (800237c <HAL_RCC_OscConfig+0x240>)
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002216:	2b00      	cmp	r3, #0
 8002218:	d0f0      	beq.n	80021fc <HAL_RCC_OscConfig+0xc0>
 800221a:	e014      	b.n	8002246 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800221c:	f7fe fb18 	bl	8000850 <HAL_GetTick>
 8002220:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002222:	e008      	b.n	8002236 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002224:	f7fe fb14 	bl	8000850 <HAL_GetTick>
 8002228:	4602      	mov	r2, r0
 800222a:	693b      	ldr	r3, [r7, #16]
 800222c:	1ad3      	subs	r3, r2, r3
 800222e:	2b64      	cmp	r3, #100	@ 0x64
 8002230:	d901      	bls.n	8002236 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002232:	2303      	movs	r3, #3
 8002234:	e1f3      	b.n	800261e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002236:	4b51      	ldr	r3, [pc, #324]	@ (800237c <HAL_RCC_OscConfig+0x240>)
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800223e:	2b00      	cmp	r3, #0
 8002240:	d1f0      	bne.n	8002224 <HAL_RCC_OscConfig+0xe8>
 8002242:	e000      	b.n	8002246 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002244:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f003 0302 	and.w	r3, r3, #2
 800224e:	2b00      	cmp	r3, #0
 8002250:	d063      	beq.n	800231a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002252:	4b4a      	ldr	r3, [pc, #296]	@ (800237c <HAL_RCC_OscConfig+0x240>)
 8002254:	689b      	ldr	r3, [r3, #8]
 8002256:	f003 030c 	and.w	r3, r3, #12
 800225a:	2b00      	cmp	r3, #0
 800225c:	d00b      	beq.n	8002276 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800225e:	4b47      	ldr	r3, [pc, #284]	@ (800237c <HAL_RCC_OscConfig+0x240>)
 8002260:	689b      	ldr	r3, [r3, #8]
 8002262:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002266:	2b08      	cmp	r3, #8
 8002268:	d11c      	bne.n	80022a4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800226a:	4b44      	ldr	r3, [pc, #272]	@ (800237c <HAL_RCC_OscConfig+0x240>)
 800226c:	685b      	ldr	r3, [r3, #4]
 800226e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002272:	2b00      	cmp	r3, #0
 8002274:	d116      	bne.n	80022a4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002276:	4b41      	ldr	r3, [pc, #260]	@ (800237c <HAL_RCC_OscConfig+0x240>)
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f003 0302 	and.w	r3, r3, #2
 800227e:	2b00      	cmp	r3, #0
 8002280:	d005      	beq.n	800228e <HAL_RCC_OscConfig+0x152>
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	68db      	ldr	r3, [r3, #12]
 8002286:	2b01      	cmp	r3, #1
 8002288:	d001      	beq.n	800228e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800228a:	2301      	movs	r3, #1
 800228c:	e1c7      	b.n	800261e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800228e:	4b3b      	ldr	r3, [pc, #236]	@ (800237c <HAL_RCC_OscConfig+0x240>)
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	691b      	ldr	r3, [r3, #16]
 800229a:	00db      	lsls	r3, r3, #3
 800229c:	4937      	ldr	r1, [pc, #220]	@ (800237c <HAL_RCC_OscConfig+0x240>)
 800229e:	4313      	orrs	r3, r2
 80022a0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80022a2:	e03a      	b.n	800231a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	68db      	ldr	r3, [r3, #12]
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d020      	beq.n	80022ee <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80022ac:	4b34      	ldr	r3, [pc, #208]	@ (8002380 <HAL_RCC_OscConfig+0x244>)
 80022ae:	2201      	movs	r2, #1
 80022b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022b2:	f7fe facd 	bl	8000850 <HAL_GetTick>
 80022b6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022b8:	e008      	b.n	80022cc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80022ba:	f7fe fac9 	bl	8000850 <HAL_GetTick>
 80022be:	4602      	mov	r2, r0
 80022c0:	693b      	ldr	r3, [r7, #16]
 80022c2:	1ad3      	subs	r3, r2, r3
 80022c4:	2b02      	cmp	r3, #2
 80022c6:	d901      	bls.n	80022cc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80022c8:	2303      	movs	r3, #3
 80022ca:	e1a8      	b.n	800261e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022cc:	4b2b      	ldr	r3, [pc, #172]	@ (800237c <HAL_RCC_OscConfig+0x240>)
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f003 0302 	and.w	r3, r3, #2
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d0f0      	beq.n	80022ba <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022d8:	4b28      	ldr	r3, [pc, #160]	@ (800237c <HAL_RCC_OscConfig+0x240>)
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	691b      	ldr	r3, [r3, #16]
 80022e4:	00db      	lsls	r3, r3, #3
 80022e6:	4925      	ldr	r1, [pc, #148]	@ (800237c <HAL_RCC_OscConfig+0x240>)
 80022e8:	4313      	orrs	r3, r2
 80022ea:	600b      	str	r3, [r1, #0]
 80022ec:	e015      	b.n	800231a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80022ee:	4b24      	ldr	r3, [pc, #144]	@ (8002380 <HAL_RCC_OscConfig+0x244>)
 80022f0:	2200      	movs	r2, #0
 80022f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022f4:	f7fe faac 	bl	8000850 <HAL_GetTick>
 80022f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80022fa:	e008      	b.n	800230e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80022fc:	f7fe faa8 	bl	8000850 <HAL_GetTick>
 8002300:	4602      	mov	r2, r0
 8002302:	693b      	ldr	r3, [r7, #16]
 8002304:	1ad3      	subs	r3, r2, r3
 8002306:	2b02      	cmp	r3, #2
 8002308:	d901      	bls.n	800230e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800230a:	2303      	movs	r3, #3
 800230c:	e187      	b.n	800261e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800230e:	4b1b      	ldr	r3, [pc, #108]	@ (800237c <HAL_RCC_OscConfig+0x240>)
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f003 0302 	and.w	r3, r3, #2
 8002316:	2b00      	cmp	r3, #0
 8002318:	d1f0      	bne.n	80022fc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f003 0308 	and.w	r3, r3, #8
 8002322:	2b00      	cmp	r3, #0
 8002324:	d036      	beq.n	8002394 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	695b      	ldr	r3, [r3, #20]
 800232a:	2b00      	cmp	r3, #0
 800232c:	d016      	beq.n	800235c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800232e:	4b15      	ldr	r3, [pc, #84]	@ (8002384 <HAL_RCC_OscConfig+0x248>)
 8002330:	2201      	movs	r2, #1
 8002332:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002334:	f7fe fa8c 	bl	8000850 <HAL_GetTick>
 8002338:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800233a:	e008      	b.n	800234e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800233c:	f7fe fa88 	bl	8000850 <HAL_GetTick>
 8002340:	4602      	mov	r2, r0
 8002342:	693b      	ldr	r3, [r7, #16]
 8002344:	1ad3      	subs	r3, r2, r3
 8002346:	2b02      	cmp	r3, #2
 8002348:	d901      	bls.n	800234e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800234a:	2303      	movs	r3, #3
 800234c:	e167      	b.n	800261e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800234e:	4b0b      	ldr	r3, [pc, #44]	@ (800237c <HAL_RCC_OscConfig+0x240>)
 8002350:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002352:	f003 0302 	and.w	r3, r3, #2
 8002356:	2b00      	cmp	r3, #0
 8002358:	d0f0      	beq.n	800233c <HAL_RCC_OscConfig+0x200>
 800235a:	e01b      	b.n	8002394 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800235c:	4b09      	ldr	r3, [pc, #36]	@ (8002384 <HAL_RCC_OscConfig+0x248>)
 800235e:	2200      	movs	r2, #0
 8002360:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002362:	f7fe fa75 	bl	8000850 <HAL_GetTick>
 8002366:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002368:	e00e      	b.n	8002388 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800236a:	f7fe fa71 	bl	8000850 <HAL_GetTick>
 800236e:	4602      	mov	r2, r0
 8002370:	693b      	ldr	r3, [r7, #16]
 8002372:	1ad3      	subs	r3, r2, r3
 8002374:	2b02      	cmp	r3, #2
 8002376:	d907      	bls.n	8002388 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002378:	2303      	movs	r3, #3
 800237a:	e150      	b.n	800261e <HAL_RCC_OscConfig+0x4e2>
 800237c:	40023800 	.word	0x40023800
 8002380:	42470000 	.word	0x42470000
 8002384:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002388:	4b88      	ldr	r3, [pc, #544]	@ (80025ac <HAL_RCC_OscConfig+0x470>)
 800238a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800238c:	f003 0302 	and.w	r3, r3, #2
 8002390:	2b00      	cmp	r3, #0
 8002392:	d1ea      	bne.n	800236a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f003 0304 	and.w	r3, r3, #4
 800239c:	2b00      	cmp	r3, #0
 800239e:	f000 8097 	beq.w	80024d0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80023a2:	2300      	movs	r3, #0
 80023a4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80023a6:	4b81      	ldr	r3, [pc, #516]	@ (80025ac <HAL_RCC_OscConfig+0x470>)
 80023a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023aa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d10f      	bne.n	80023d2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80023b2:	2300      	movs	r3, #0
 80023b4:	60bb      	str	r3, [r7, #8]
 80023b6:	4b7d      	ldr	r3, [pc, #500]	@ (80025ac <HAL_RCC_OscConfig+0x470>)
 80023b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023ba:	4a7c      	ldr	r2, [pc, #496]	@ (80025ac <HAL_RCC_OscConfig+0x470>)
 80023bc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80023c0:	6413      	str	r3, [r2, #64]	@ 0x40
 80023c2:	4b7a      	ldr	r3, [pc, #488]	@ (80025ac <HAL_RCC_OscConfig+0x470>)
 80023c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023c6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80023ca:	60bb      	str	r3, [r7, #8]
 80023cc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80023ce:	2301      	movs	r3, #1
 80023d0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023d2:	4b77      	ldr	r3, [pc, #476]	@ (80025b0 <HAL_RCC_OscConfig+0x474>)
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d118      	bne.n	8002410 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80023de:	4b74      	ldr	r3, [pc, #464]	@ (80025b0 <HAL_RCC_OscConfig+0x474>)
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	4a73      	ldr	r2, [pc, #460]	@ (80025b0 <HAL_RCC_OscConfig+0x474>)
 80023e4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80023e8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80023ea:	f7fe fa31 	bl	8000850 <HAL_GetTick>
 80023ee:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023f0:	e008      	b.n	8002404 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80023f2:	f7fe fa2d 	bl	8000850 <HAL_GetTick>
 80023f6:	4602      	mov	r2, r0
 80023f8:	693b      	ldr	r3, [r7, #16]
 80023fa:	1ad3      	subs	r3, r2, r3
 80023fc:	2b02      	cmp	r3, #2
 80023fe:	d901      	bls.n	8002404 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002400:	2303      	movs	r3, #3
 8002402:	e10c      	b.n	800261e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002404:	4b6a      	ldr	r3, [pc, #424]	@ (80025b0 <HAL_RCC_OscConfig+0x474>)
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800240c:	2b00      	cmp	r3, #0
 800240e:	d0f0      	beq.n	80023f2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	689b      	ldr	r3, [r3, #8]
 8002414:	2b01      	cmp	r3, #1
 8002416:	d106      	bne.n	8002426 <HAL_RCC_OscConfig+0x2ea>
 8002418:	4b64      	ldr	r3, [pc, #400]	@ (80025ac <HAL_RCC_OscConfig+0x470>)
 800241a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800241c:	4a63      	ldr	r2, [pc, #396]	@ (80025ac <HAL_RCC_OscConfig+0x470>)
 800241e:	f043 0301 	orr.w	r3, r3, #1
 8002422:	6713      	str	r3, [r2, #112]	@ 0x70
 8002424:	e01c      	b.n	8002460 <HAL_RCC_OscConfig+0x324>
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	689b      	ldr	r3, [r3, #8]
 800242a:	2b05      	cmp	r3, #5
 800242c:	d10c      	bne.n	8002448 <HAL_RCC_OscConfig+0x30c>
 800242e:	4b5f      	ldr	r3, [pc, #380]	@ (80025ac <HAL_RCC_OscConfig+0x470>)
 8002430:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002432:	4a5e      	ldr	r2, [pc, #376]	@ (80025ac <HAL_RCC_OscConfig+0x470>)
 8002434:	f043 0304 	orr.w	r3, r3, #4
 8002438:	6713      	str	r3, [r2, #112]	@ 0x70
 800243a:	4b5c      	ldr	r3, [pc, #368]	@ (80025ac <HAL_RCC_OscConfig+0x470>)
 800243c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800243e:	4a5b      	ldr	r2, [pc, #364]	@ (80025ac <HAL_RCC_OscConfig+0x470>)
 8002440:	f043 0301 	orr.w	r3, r3, #1
 8002444:	6713      	str	r3, [r2, #112]	@ 0x70
 8002446:	e00b      	b.n	8002460 <HAL_RCC_OscConfig+0x324>
 8002448:	4b58      	ldr	r3, [pc, #352]	@ (80025ac <HAL_RCC_OscConfig+0x470>)
 800244a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800244c:	4a57      	ldr	r2, [pc, #348]	@ (80025ac <HAL_RCC_OscConfig+0x470>)
 800244e:	f023 0301 	bic.w	r3, r3, #1
 8002452:	6713      	str	r3, [r2, #112]	@ 0x70
 8002454:	4b55      	ldr	r3, [pc, #340]	@ (80025ac <HAL_RCC_OscConfig+0x470>)
 8002456:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002458:	4a54      	ldr	r2, [pc, #336]	@ (80025ac <HAL_RCC_OscConfig+0x470>)
 800245a:	f023 0304 	bic.w	r3, r3, #4
 800245e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	689b      	ldr	r3, [r3, #8]
 8002464:	2b00      	cmp	r3, #0
 8002466:	d015      	beq.n	8002494 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002468:	f7fe f9f2 	bl	8000850 <HAL_GetTick>
 800246c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800246e:	e00a      	b.n	8002486 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002470:	f7fe f9ee 	bl	8000850 <HAL_GetTick>
 8002474:	4602      	mov	r2, r0
 8002476:	693b      	ldr	r3, [r7, #16]
 8002478:	1ad3      	subs	r3, r2, r3
 800247a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800247e:	4293      	cmp	r3, r2
 8002480:	d901      	bls.n	8002486 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002482:	2303      	movs	r3, #3
 8002484:	e0cb      	b.n	800261e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002486:	4b49      	ldr	r3, [pc, #292]	@ (80025ac <HAL_RCC_OscConfig+0x470>)
 8002488:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800248a:	f003 0302 	and.w	r3, r3, #2
 800248e:	2b00      	cmp	r3, #0
 8002490:	d0ee      	beq.n	8002470 <HAL_RCC_OscConfig+0x334>
 8002492:	e014      	b.n	80024be <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002494:	f7fe f9dc 	bl	8000850 <HAL_GetTick>
 8002498:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800249a:	e00a      	b.n	80024b2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800249c:	f7fe f9d8 	bl	8000850 <HAL_GetTick>
 80024a0:	4602      	mov	r2, r0
 80024a2:	693b      	ldr	r3, [r7, #16]
 80024a4:	1ad3      	subs	r3, r2, r3
 80024a6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80024aa:	4293      	cmp	r3, r2
 80024ac:	d901      	bls.n	80024b2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80024ae:	2303      	movs	r3, #3
 80024b0:	e0b5      	b.n	800261e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80024b2:	4b3e      	ldr	r3, [pc, #248]	@ (80025ac <HAL_RCC_OscConfig+0x470>)
 80024b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80024b6:	f003 0302 	and.w	r3, r3, #2
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d1ee      	bne.n	800249c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80024be:	7dfb      	ldrb	r3, [r7, #23]
 80024c0:	2b01      	cmp	r3, #1
 80024c2:	d105      	bne.n	80024d0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80024c4:	4b39      	ldr	r3, [pc, #228]	@ (80025ac <HAL_RCC_OscConfig+0x470>)
 80024c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024c8:	4a38      	ldr	r2, [pc, #224]	@ (80025ac <HAL_RCC_OscConfig+0x470>)
 80024ca:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80024ce:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	699b      	ldr	r3, [r3, #24]
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	f000 80a1 	beq.w	800261c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80024da:	4b34      	ldr	r3, [pc, #208]	@ (80025ac <HAL_RCC_OscConfig+0x470>)
 80024dc:	689b      	ldr	r3, [r3, #8]
 80024de:	f003 030c 	and.w	r3, r3, #12
 80024e2:	2b08      	cmp	r3, #8
 80024e4:	d05c      	beq.n	80025a0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	699b      	ldr	r3, [r3, #24]
 80024ea:	2b02      	cmp	r3, #2
 80024ec:	d141      	bne.n	8002572 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024ee:	4b31      	ldr	r3, [pc, #196]	@ (80025b4 <HAL_RCC_OscConfig+0x478>)
 80024f0:	2200      	movs	r2, #0
 80024f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024f4:	f7fe f9ac 	bl	8000850 <HAL_GetTick>
 80024f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80024fa:	e008      	b.n	800250e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80024fc:	f7fe f9a8 	bl	8000850 <HAL_GetTick>
 8002500:	4602      	mov	r2, r0
 8002502:	693b      	ldr	r3, [r7, #16]
 8002504:	1ad3      	subs	r3, r2, r3
 8002506:	2b02      	cmp	r3, #2
 8002508:	d901      	bls.n	800250e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800250a:	2303      	movs	r3, #3
 800250c:	e087      	b.n	800261e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800250e:	4b27      	ldr	r3, [pc, #156]	@ (80025ac <HAL_RCC_OscConfig+0x470>)
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002516:	2b00      	cmp	r3, #0
 8002518:	d1f0      	bne.n	80024fc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	69da      	ldr	r2, [r3, #28]
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	6a1b      	ldr	r3, [r3, #32]
 8002522:	431a      	orrs	r2, r3
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002528:	019b      	lsls	r3, r3, #6
 800252a:	431a      	orrs	r2, r3
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002530:	085b      	lsrs	r3, r3, #1
 8002532:	3b01      	subs	r3, #1
 8002534:	041b      	lsls	r3, r3, #16
 8002536:	431a      	orrs	r2, r3
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800253c:	061b      	lsls	r3, r3, #24
 800253e:	491b      	ldr	r1, [pc, #108]	@ (80025ac <HAL_RCC_OscConfig+0x470>)
 8002540:	4313      	orrs	r3, r2
 8002542:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002544:	4b1b      	ldr	r3, [pc, #108]	@ (80025b4 <HAL_RCC_OscConfig+0x478>)
 8002546:	2201      	movs	r2, #1
 8002548:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800254a:	f7fe f981 	bl	8000850 <HAL_GetTick>
 800254e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002550:	e008      	b.n	8002564 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002552:	f7fe f97d 	bl	8000850 <HAL_GetTick>
 8002556:	4602      	mov	r2, r0
 8002558:	693b      	ldr	r3, [r7, #16]
 800255a:	1ad3      	subs	r3, r2, r3
 800255c:	2b02      	cmp	r3, #2
 800255e:	d901      	bls.n	8002564 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002560:	2303      	movs	r3, #3
 8002562:	e05c      	b.n	800261e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002564:	4b11      	ldr	r3, [pc, #68]	@ (80025ac <HAL_RCC_OscConfig+0x470>)
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800256c:	2b00      	cmp	r3, #0
 800256e:	d0f0      	beq.n	8002552 <HAL_RCC_OscConfig+0x416>
 8002570:	e054      	b.n	800261c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002572:	4b10      	ldr	r3, [pc, #64]	@ (80025b4 <HAL_RCC_OscConfig+0x478>)
 8002574:	2200      	movs	r2, #0
 8002576:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002578:	f7fe f96a 	bl	8000850 <HAL_GetTick>
 800257c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800257e:	e008      	b.n	8002592 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002580:	f7fe f966 	bl	8000850 <HAL_GetTick>
 8002584:	4602      	mov	r2, r0
 8002586:	693b      	ldr	r3, [r7, #16]
 8002588:	1ad3      	subs	r3, r2, r3
 800258a:	2b02      	cmp	r3, #2
 800258c:	d901      	bls.n	8002592 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800258e:	2303      	movs	r3, #3
 8002590:	e045      	b.n	800261e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002592:	4b06      	ldr	r3, [pc, #24]	@ (80025ac <HAL_RCC_OscConfig+0x470>)
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800259a:	2b00      	cmp	r3, #0
 800259c:	d1f0      	bne.n	8002580 <HAL_RCC_OscConfig+0x444>
 800259e:	e03d      	b.n	800261c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	699b      	ldr	r3, [r3, #24]
 80025a4:	2b01      	cmp	r3, #1
 80025a6:	d107      	bne.n	80025b8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80025a8:	2301      	movs	r3, #1
 80025aa:	e038      	b.n	800261e <HAL_RCC_OscConfig+0x4e2>
 80025ac:	40023800 	.word	0x40023800
 80025b0:	40007000 	.word	0x40007000
 80025b4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80025b8:	4b1b      	ldr	r3, [pc, #108]	@ (8002628 <HAL_RCC_OscConfig+0x4ec>)
 80025ba:	685b      	ldr	r3, [r3, #4]
 80025bc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	699b      	ldr	r3, [r3, #24]
 80025c2:	2b01      	cmp	r3, #1
 80025c4:	d028      	beq.n	8002618 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80025d0:	429a      	cmp	r2, r3
 80025d2:	d121      	bne.n	8002618 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80025de:	429a      	cmp	r2, r3
 80025e0:	d11a      	bne.n	8002618 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80025e2:	68fa      	ldr	r2, [r7, #12]
 80025e4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80025e8:	4013      	ands	r3, r2
 80025ea:	687a      	ldr	r2, [r7, #4]
 80025ec:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80025ee:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80025f0:	4293      	cmp	r3, r2
 80025f2:	d111      	bne.n	8002618 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025fe:	085b      	lsrs	r3, r3, #1
 8002600:	3b01      	subs	r3, #1
 8002602:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002604:	429a      	cmp	r2, r3
 8002606:	d107      	bne.n	8002618 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002612:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002614:	429a      	cmp	r2, r3
 8002616:	d001      	beq.n	800261c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002618:	2301      	movs	r3, #1
 800261a:	e000      	b.n	800261e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800261c:	2300      	movs	r3, #0
}
 800261e:	4618      	mov	r0, r3
 8002620:	3718      	adds	r7, #24
 8002622:	46bd      	mov	sp, r7
 8002624:	bd80      	pop	{r7, pc}
 8002626:	bf00      	nop
 8002628:	40023800 	.word	0x40023800

0800262c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800262c:	b580      	push	{r7, lr}
 800262e:	b084      	sub	sp, #16
 8002630:	af00      	add	r7, sp, #0
 8002632:	6078      	str	r0, [r7, #4]
 8002634:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	2b00      	cmp	r3, #0
 800263a:	d101      	bne.n	8002640 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800263c:	2301      	movs	r3, #1
 800263e:	e0cc      	b.n	80027da <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002640:	4b68      	ldr	r3, [pc, #416]	@ (80027e4 <HAL_RCC_ClockConfig+0x1b8>)
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f003 0307 	and.w	r3, r3, #7
 8002648:	683a      	ldr	r2, [r7, #0]
 800264a:	429a      	cmp	r2, r3
 800264c:	d90c      	bls.n	8002668 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800264e:	4b65      	ldr	r3, [pc, #404]	@ (80027e4 <HAL_RCC_ClockConfig+0x1b8>)
 8002650:	683a      	ldr	r2, [r7, #0]
 8002652:	b2d2      	uxtb	r2, r2
 8002654:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002656:	4b63      	ldr	r3, [pc, #396]	@ (80027e4 <HAL_RCC_ClockConfig+0x1b8>)
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f003 0307 	and.w	r3, r3, #7
 800265e:	683a      	ldr	r2, [r7, #0]
 8002660:	429a      	cmp	r2, r3
 8002662:	d001      	beq.n	8002668 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002664:	2301      	movs	r3, #1
 8002666:	e0b8      	b.n	80027da <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f003 0302 	and.w	r3, r3, #2
 8002670:	2b00      	cmp	r3, #0
 8002672:	d020      	beq.n	80026b6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f003 0304 	and.w	r3, r3, #4
 800267c:	2b00      	cmp	r3, #0
 800267e:	d005      	beq.n	800268c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002680:	4b59      	ldr	r3, [pc, #356]	@ (80027e8 <HAL_RCC_ClockConfig+0x1bc>)
 8002682:	689b      	ldr	r3, [r3, #8]
 8002684:	4a58      	ldr	r2, [pc, #352]	@ (80027e8 <HAL_RCC_ClockConfig+0x1bc>)
 8002686:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800268a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f003 0308 	and.w	r3, r3, #8
 8002694:	2b00      	cmp	r3, #0
 8002696:	d005      	beq.n	80026a4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002698:	4b53      	ldr	r3, [pc, #332]	@ (80027e8 <HAL_RCC_ClockConfig+0x1bc>)
 800269a:	689b      	ldr	r3, [r3, #8]
 800269c:	4a52      	ldr	r2, [pc, #328]	@ (80027e8 <HAL_RCC_ClockConfig+0x1bc>)
 800269e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80026a2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80026a4:	4b50      	ldr	r3, [pc, #320]	@ (80027e8 <HAL_RCC_ClockConfig+0x1bc>)
 80026a6:	689b      	ldr	r3, [r3, #8]
 80026a8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	689b      	ldr	r3, [r3, #8]
 80026b0:	494d      	ldr	r1, [pc, #308]	@ (80027e8 <HAL_RCC_ClockConfig+0x1bc>)
 80026b2:	4313      	orrs	r3, r2
 80026b4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f003 0301 	and.w	r3, r3, #1
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d044      	beq.n	800274c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	685b      	ldr	r3, [r3, #4]
 80026c6:	2b01      	cmp	r3, #1
 80026c8:	d107      	bne.n	80026da <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026ca:	4b47      	ldr	r3, [pc, #284]	@ (80027e8 <HAL_RCC_ClockConfig+0x1bc>)
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d119      	bne.n	800270a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026d6:	2301      	movs	r3, #1
 80026d8:	e07f      	b.n	80027da <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	685b      	ldr	r3, [r3, #4]
 80026de:	2b02      	cmp	r3, #2
 80026e0:	d003      	beq.n	80026ea <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80026e6:	2b03      	cmp	r3, #3
 80026e8:	d107      	bne.n	80026fa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80026ea:	4b3f      	ldr	r3, [pc, #252]	@ (80027e8 <HAL_RCC_ClockConfig+0x1bc>)
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d109      	bne.n	800270a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026f6:	2301      	movs	r3, #1
 80026f8:	e06f      	b.n	80027da <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026fa:	4b3b      	ldr	r3, [pc, #236]	@ (80027e8 <HAL_RCC_ClockConfig+0x1bc>)
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f003 0302 	and.w	r3, r3, #2
 8002702:	2b00      	cmp	r3, #0
 8002704:	d101      	bne.n	800270a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002706:	2301      	movs	r3, #1
 8002708:	e067      	b.n	80027da <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800270a:	4b37      	ldr	r3, [pc, #220]	@ (80027e8 <HAL_RCC_ClockConfig+0x1bc>)
 800270c:	689b      	ldr	r3, [r3, #8]
 800270e:	f023 0203 	bic.w	r2, r3, #3
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	685b      	ldr	r3, [r3, #4]
 8002716:	4934      	ldr	r1, [pc, #208]	@ (80027e8 <HAL_RCC_ClockConfig+0x1bc>)
 8002718:	4313      	orrs	r3, r2
 800271a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800271c:	f7fe f898 	bl	8000850 <HAL_GetTick>
 8002720:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002722:	e00a      	b.n	800273a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002724:	f7fe f894 	bl	8000850 <HAL_GetTick>
 8002728:	4602      	mov	r2, r0
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	1ad3      	subs	r3, r2, r3
 800272e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002732:	4293      	cmp	r3, r2
 8002734:	d901      	bls.n	800273a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002736:	2303      	movs	r3, #3
 8002738:	e04f      	b.n	80027da <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800273a:	4b2b      	ldr	r3, [pc, #172]	@ (80027e8 <HAL_RCC_ClockConfig+0x1bc>)
 800273c:	689b      	ldr	r3, [r3, #8]
 800273e:	f003 020c 	and.w	r2, r3, #12
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	685b      	ldr	r3, [r3, #4]
 8002746:	009b      	lsls	r3, r3, #2
 8002748:	429a      	cmp	r2, r3
 800274a:	d1eb      	bne.n	8002724 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800274c:	4b25      	ldr	r3, [pc, #148]	@ (80027e4 <HAL_RCC_ClockConfig+0x1b8>)
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f003 0307 	and.w	r3, r3, #7
 8002754:	683a      	ldr	r2, [r7, #0]
 8002756:	429a      	cmp	r2, r3
 8002758:	d20c      	bcs.n	8002774 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800275a:	4b22      	ldr	r3, [pc, #136]	@ (80027e4 <HAL_RCC_ClockConfig+0x1b8>)
 800275c:	683a      	ldr	r2, [r7, #0]
 800275e:	b2d2      	uxtb	r2, r2
 8002760:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002762:	4b20      	ldr	r3, [pc, #128]	@ (80027e4 <HAL_RCC_ClockConfig+0x1b8>)
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f003 0307 	and.w	r3, r3, #7
 800276a:	683a      	ldr	r2, [r7, #0]
 800276c:	429a      	cmp	r2, r3
 800276e:	d001      	beq.n	8002774 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002770:	2301      	movs	r3, #1
 8002772:	e032      	b.n	80027da <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f003 0304 	and.w	r3, r3, #4
 800277c:	2b00      	cmp	r3, #0
 800277e:	d008      	beq.n	8002792 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002780:	4b19      	ldr	r3, [pc, #100]	@ (80027e8 <HAL_RCC_ClockConfig+0x1bc>)
 8002782:	689b      	ldr	r3, [r3, #8]
 8002784:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	68db      	ldr	r3, [r3, #12]
 800278c:	4916      	ldr	r1, [pc, #88]	@ (80027e8 <HAL_RCC_ClockConfig+0x1bc>)
 800278e:	4313      	orrs	r3, r2
 8002790:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f003 0308 	and.w	r3, r3, #8
 800279a:	2b00      	cmp	r3, #0
 800279c:	d009      	beq.n	80027b2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800279e:	4b12      	ldr	r3, [pc, #72]	@ (80027e8 <HAL_RCC_ClockConfig+0x1bc>)
 80027a0:	689b      	ldr	r3, [r3, #8]
 80027a2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	691b      	ldr	r3, [r3, #16]
 80027aa:	00db      	lsls	r3, r3, #3
 80027ac:	490e      	ldr	r1, [pc, #56]	@ (80027e8 <HAL_RCC_ClockConfig+0x1bc>)
 80027ae:	4313      	orrs	r3, r2
 80027b0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80027b2:	f000 f821 	bl	80027f8 <HAL_RCC_GetSysClockFreq>
 80027b6:	4602      	mov	r2, r0
 80027b8:	4b0b      	ldr	r3, [pc, #44]	@ (80027e8 <HAL_RCC_ClockConfig+0x1bc>)
 80027ba:	689b      	ldr	r3, [r3, #8]
 80027bc:	091b      	lsrs	r3, r3, #4
 80027be:	f003 030f 	and.w	r3, r3, #15
 80027c2:	490a      	ldr	r1, [pc, #40]	@ (80027ec <HAL_RCC_ClockConfig+0x1c0>)
 80027c4:	5ccb      	ldrb	r3, [r1, r3]
 80027c6:	fa22 f303 	lsr.w	r3, r2, r3
 80027ca:	4a09      	ldr	r2, [pc, #36]	@ (80027f0 <HAL_RCC_ClockConfig+0x1c4>)
 80027cc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80027ce:	4b09      	ldr	r3, [pc, #36]	@ (80027f4 <HAL_RCC_ClockConfig+0x1c8>)
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	4618      	mov	r0, r3
 80027d4:	f7fd fff8 	bl	80007c8 <HAL_InitTick>

  return HAL_OK;
 80027d8:	2300      	movs	r3, #0
}
 80027da:	4618      	mov	r0, r3
 80027dc:	3710      	adds	r7, #16
 80027de:	46bd      	mov	sp, r7
 80027e0:	bd80      	pop	{r7, pc}
 80027e2:	bf00      	nop
 80027e4:	40023c00 	.word	0x40023c00
 80027e8:	40023800 	.word	0x40023800
 80027ec:	08007940 	.word	0x08007940
 80027f0:	20000000 	.word	0x20000000
 80027f4:	20000004 	.word	0x20000004

080027f8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80027f8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80027fc:	b090      	sub	sp, #64	@ 0x40
 80027fe:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002800:	2300      	movs	r3, #0
 8002802:	637b      	str	r3, [r7, #52]	@ 0x34
 8002804:	2300      	movs	r3, #0
 8002806:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002808:	2300      	movs	r3, #0
 800280a:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 800280c:	2300      	movs	r3, #0
 800280e:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002810:	4b59      	ldr	r3, [pc, #356]	@ (8002978 <HAL_RCC_GetSysClockFreq+0x180>)
 8002812:	689b      	ldr	r3, [r3, #8]
 8002814:	f003 030c 	and.w	r3, r3, #12
 8002818:	2b08      	cmp	r3, #8
 800281a:	d00d      	beq.n	8002838 <HAL_RCC_GetSysClockFreq+0x40>
 800281c:	2b08      	cmp	r3, #8
 800281e:	f200 80a1 	bhi.w	8002964 <HAL_RCC_GetSysClockFreq+0x16c>
 8002822:	2b00      	cmp	r3, #0
 8002824:	d002      	beq.n	800282c <HAL_RCC_GetSysClockFreq+0x34>
 8002826:	2b04      	cmp	r3, #4
 8002828:	d003      	beq.n	8002832 <HAL_RCC_GetSysClockFreq+0x3a>
 800282a:	e09b      	b.n	8002964 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800282c:	4b53      	ldr	r3, [pc, #332]	@ (800297c <HAL_RCC_GetSysClockFreq+0x184>)
 800282e:	63bb      	str	r3, [r7, #56]	@ 0x38
       break;
 8002830:	e09b      	b.n	800296a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002832:	4b53      	ldr	r3, [pc, #332]	@ (8002980 <HAL_RCC_GetSysClockFreq+0x188>)
 8002834:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002836:	e098      	b.n	800296a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002838:	4b4f      	ldr	r3, [pc, #316]	@ (8002978 <HAL_RCC_GetSysClockFreq+0x180>)
 800283a:	685b      	ldr	r3, [r3, #4]
 800283c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002840:	637b      	str	r3, [r7, #52]	@ 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002842:	4b4d      	ldr	r3, [pc, #308]	@ (8002978 <HAL_RCC_GetSysClockFreq+0x180>)
 8002844:	685b      	ldr	r3, [r3, #4]
 8002846:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800284a:	2b00      	cmp	r3, #0
 800284c:	d028      	beq.n	80028a0 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800284e:	4b4a      	ldr	r3, [pc, #296]	@ (8002978 <HAL_RCC_GetSysClockFreq+0x180>)
 8002850:	685b      	ldr	r3, [r3, #4]
 8002852:	099b      	lsrs	r3, r3, #6
 8002854:	2200      	movs	r2, #0
 8002856:	623b      	str	r3, [r7, #32]
 8002858:	627a      	str	r2, [r7, #36]	@ 0x24
 800285a:	6a3b      	ldr	r3, [r7, #32]
 800285c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002860:	2100      	movs	r1, #0
 8002862:	4b47      	ldr	r3, [pc, #284]	@ (8002980 <HAL_RCC_GetSysClockFreq+0x188>)
 8002864:	fb03 f201 	mul.w	r2, r3, r1
 8002868:	2300      	movs	r3, #0
 800286a:	fb00 f303 	mul.w	r3, r0, r3
 800286e:	4413      	add	r3, r2
 8002870:	4a43      	ldr	r2, [pc, #268]	@ (8002980 <HAL_RCC_GetSysClockFreq+0x188>)
 8002872:	fba0 1202 	umull	r1, r2, r0, r2
 8002876:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002878:	460a      	mov	r2, r1
 800287a:	62ba      	str	r2, [r7, #40]	@ 0x28
 800287c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800287e:	4413      	add	r3, r2
 8002880:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002882:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002884:	2200      	movs	r2, #0
 8002886:	61bb      	str	r3, [r7, #24]
 8002888:	61fa      	str	r2, [r7, #28]
 800288a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800288e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8002892:	f7fd fca1 	bl	80001d8 <__aeabi_uldivmod>
 8002896:	4602      	mov	r2, r0
 8002898:	460b      	mov	r3, r1
 800289a:	4613      	mov	r3, r2
 800289c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800289e:	e053      	b.n	8002948 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80028a0:	4b35      	ldr	r3, [pc, #212]	@ (8002978 <HAL_RCC_GetSysClockFreq+0x180>)
 80028a2:	685b      	ldr	r3, [r3, #4]
 80028a4:	099b      	lsrs	r3, r3, #6
 80028a6:	2200      	movs	r2, #0
 80028a8:	613b      	str	r3, [r7, #16]
 80028aa:	617a      	str	r2, [r7, #20]
 80028ac:	693b      	ldr	r3, [r7, #16]
 80028ae:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80028b2:	f04f 0b00 	mov.w	fp, #0
 80028b6:	4652      	mov	r2, sl
 80028b8:	465b      	mov	r3, fp
 80028ba:	f04f 0000 	mov.w	r0, #0
 80028be:	f04f 0100 	mov.w	r1, #0
 80028c2:	0159      	lsls	r1, r3, #5
 80028c4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80028c8:	0150      	lsls	r0, r2, #5
 80028ca:	4602      	mov	r2, r0
 80028cc:	460b      	mov	r3, r1
 80028ce:	ebb2 080a 	subs.w	r8, r2, sl
 80028d2:	eb63 090b 	sbc.w	r9, r3, fp
 80028d6:	f04f 0200 	mov.w	r2, #0
 80028da:	f04f 0300 	mov.w	r3, #0
 80028de:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80028e2:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80028e6:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80028ea:	ebb2 0408 	subs.w	r4, r2, r8
 80028ee:	eb63 0509 	sbc.w	r5, r3, r9
 80028f2:	f04f 0200 	mov.w	r2, #0
 80028f6:	f04f 0300 	mov.w	r3, #0
 80028fa:	00eb      	lsls	r3, r5, #3
 80028fc:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002900:	00e2      	lsls	r2, r4, #3
 8002902:	4614      	mov	r4, r2
 8002904:	461d      	mov	r5, r3
 8002906:	eb14 030a 	adds.w	r3, r4, sl
 800290a:	603b      	str	r3, [r7, #0]
 800290c:	eb45 030b 	adc.w	r3, r5, fp
 8002910:	607b      	str	r3, [r7, #4]
 8002912:	f04f 0200 	mov.w	r2, #0
 8002916:	f04f 0300 	mov.w	r3, #0
 800291a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800291e:	4629      	mov	r1, r5
 8002920:	028b      	lsls	r3, r1, #10
 8002922:	4621      	mov	r1, r4
 8002924:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002928:	4621      	mov	r1, r4
 800292a:	028a      	lsls	r2, r1, #10
 800292c:	4610      	mov	r0, r2
 800292e:	4619      	mov	r1, r3
 8002930:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002932:	2200      	movs	r2, #0
 8002934:	60bb      	str	r3, [r7, #8]
 8002936:	60fa      	str	r2, [r7, #12]
 8002938:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800293c:	f7fd fc4c 	bl	80001d8 <__aeabi_uldivmod>
 8002940:	4602      	mov	r2, r0
 8002942:	460b      	mov	r3, r1
 8002944:	4613      	mov	r3, r2
 8002946:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002948:	4b0b      	ldr	r3, [pc, #44]	@ (8002978 <HAL_RCC_GetSysClockFreq+0x180>)
 800294a:	685b      	ldr	r3, [r3, #4]
 800294c:	0c1b      	lsrs	r3, r3, #16
 800294e:	f003 0303 	and.w	r3, r3, #3
 8002952:	3301      	adds	r3, #1
 8002954:	005b      	lsls	r3, r3, #1
 8002956:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco/pllp;
 8002958:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800295a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800295c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002960:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002962:	e002      	b.n	800296a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002964:	4b05      	ldr	r3, [pc, #20]	@ (800297c <HAL_RCC_GetSysClockFreq+0x184>)
 8002966:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002968:	bf00      	nop
    }
  }
  return sysclockfreq;
 800296a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 800296c:	4618      	mov	r0, r3
 800296e:	3740      	adds	r7, #64	@ 0x40
 8002970:	46bd      	mov	sp, r7
 8002972:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002976:	bf00      	nop
 8002978:	40023800 	.word	0x40023800
 800297c:	00f42400 	.word	0x00f42400
 8002980:	017d7840 	.word	0x017d7840

08002984 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002984:	b480      	push	{r7}
 8002986:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002988:	4b03      	ldr	r3, [pc, #12]	@ (8002998 <HAL_RCC_GetHCLKFreq+0x14>)
 800298a:	681b      	ldr	r3, [r3, #0]
}
 800298c:	4618      	mov	r0, r3
 800298e:	46bd      	mov	sp, r7
 8002990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002994:	4770      	bx	lr
 8002996:	bf00      	nop
 8002998:	20000000 	.word	0x20000000

0800299c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800299c:	b084      	sub	sp, #16
 800299e:	b580      	push	{r7, lr}
 80029a0:	b084      	sub	sp, #16
 80029a2:	af00      	add	r7, sp, #0
 80029a4:	6078      	str	r0, [r7, #4]
 80029a6:	f107 001c 	add.w	r0, r7, #28
 80029aa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80029ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80029b0:	2b01      	cmp	r3, #1
 80029b2:	d122      	bne.n	80029fa <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80029b8:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	68db      	ldr	r3, [r3, #12]
 80029c4:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 80029c8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80029cc:	687a      	ldr	r2, [r7, #4]
 80029ce:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	68db      	ldr	r3, [r3, #12]
 80029d4:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80029dc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80029de:	2b01      	cmp	r3, #1
 80029e0:	d105      	bne.n	80029ee <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	68db      	ldr	r3, [r3, #12]
 80029e6:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80029ee:	6878      	ldr	r0, [r7, #4]
 80029f0:	f001 fb1c 	bl	800402c <USB_CoreReset>
 80029f4:	4603      	mov	r3, r0
 80029f6:	73fb      	strb	r3, [r7, #15]
 80029f8:	e01a      	b.n	8002a30 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	68db      	ldr	r3, [r3, #12]
 80029fe:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8002a06:	6878      	ldr	r0, [r7, #4]
 8002a08:	f001 fb10 	bl	800402c <USB_CoreReset>
 8002a0c:	4603      	mov	r3, r0
 8002a0e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8002a10:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d106      	bne.n	8002a24 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a1a:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	639a      	str	r2, [r3, #56]	@ 0x38
 8002a22:	e005      	b.n	8002a30 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a28:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8002a30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a32:	2b01      	cmp	r3, #1
 8002a34:	d10b      	bne.n	8002a4e <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	689b      	ldr	r3, [r3, #8]
 8002a3a:	f043 0206 	orr.w	r2, r3, #6
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	689b      	ldr	r3, [r3, #8]
 8002a46:	f043 0220 	orr.w	r2, r3, #32
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8002a4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a50:	4618      	mov	r0, r3
 8002a52:	3710      	adds	r7, #16
 8002a54:	46bd      	mov	sp, r7
 8002a56:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002a5a:	b004      	add	sp, #16
 8002a5c:	4770      	bx	lr
	...

08002a60 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8002a60:	b480      	push	{r7}
 8002a62:	b087      	sub	sp, #28
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	60f8      	str	r0, [r7, #12]
 8002a68:	60b9      	str	r1, [r7, #8]
 8002a6a:	4613      	mov	r3, r2
 8002a6c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8002a6e:	79fb      	ldrb	r3, [r7, #7]
 8002a70:	2b02      	cmp	r3, #2
 8002a72:	d165      	bne.n	8002b40 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8002a74:	68bb      	ldr	r3, [r7, #8]
 8002a76:	4a41      	ldr	r2, [pc, #260]	@ (8002b7c <USB_SetTurnaroundTime+0x11c>)
 8002a78:	4293      	cmp	r3, r2
 8002a7a:	d906      	bls.n	8002a8a <USB_SetTurnaroundTime+0x2a>
 8002a7c:	68bb      	ldr	r3, [r7, #8]
 8002a7e:	4a40      	ldr	r2, [pc, #256]	@ (8002b80 <USB_SetTurnaroundTime+0x120>)
 8002a80:	4293      	cmp	r3, r2
 8002a82:	d202      	bcs.n	8002a8a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8002a84:	230f      	movs	r3, #15
 8002a86:	617b      	str	r3, [r7, #20]
 8002a88:	e062      	b.n	8002b50 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8002a8a:	68bb      	ldr	r3, [r7, #8]
 8002a8c:	4a3c      	ldr	r2, [pc, #240]	@ (8002b80 <USB_SetTurnaroundTime+0x120>)
 8002a8e:	4293      	cmp	r3, r2
 8002a90:	d306      	bcc.n	8002aa0 <USB_SetTurnaroundTime+0x40>
 8002a92:	68bb      	ldr	r3, [r7, #8]
 8002a94:	4a3b      	ldr	r2, [pc, #236]	@ (8002b84 <USB_SetTurnaroundTime+0x124>)
 8002a96:	4293      	cmp	r3, r2
 8002a98:	d202      	bcs.n	8002aa0 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8002a9a:	230e      	movs	r3, #14
 8002a9c:	617b      	str	r3, [r7, #20]
 8002a9e:	e057      	b.n	8002b50 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8002aa0:	68bb      	ldr	r3, [r7, #8]
 8002aa2:	4a38      	ldr	r2, [pc, #224]	@ (8002b84 <USB_SetTurnaroundTime+0x124>)
 8002aa4:	4293      	cmp	r3, r2
 8002aa6:	d306      	bcc.n	8002ab6 <USB_SetTurnaroundTime+0x56>
 8002aa8:	68bb      	ldr	r3, [r7, #8]
 8002aaa:	4a37      	ldr	r2, [pc, #220]	@ (8002b88 <USB_SetTurnaroundTime+0x128>)
 8002aac:	4293      	cmp	r3, r2
 8002aae:	d202      	bcs.n	8002ab6 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8002ab0:	230d      	movs	r3, #13
 8002ab2:	617b      	str	r3, [r7, #20]
 8002ab4:	e04c      	b.n	8002b50 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8002ab6:	68bb      	ldr	r3, [r7, #8]
 8002ab8:	4a33      	ldr	r2, [pc, #204]	@ (8002b88 <USB_SetTurnaroundTime+0x128>)
 8002aba:	4293      	cmp	r3, r2
 8002abc:	d306      	bcc.n	8002acc <USB_SetTurnaroundTime+0x6c>
 8002abe:	68bb      	ldr	r3, [r7, #8]
 8002ac0:	4a32      	ldr	r2, [pc, #200]	@ (8002b8c <USB_SetTurnaroundTime+0x12c>)
 8002ac2:	4293      	cmp	r3, r2
 8002ac4:	d802      	bhi.n	8002acc <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8002ac6:	230c      	movs	r3, #12
 8002ac8:	617b      	str	r3, [r7, #20]
 8002aca:	e041      	b.n	8002b50 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8002acc:	68bb      	ldr	r3, [r7, #8]
 8002ace:	4a2f      	ldr	r2, [pc, #188]	@ (8002b8c <USB_SetTurnaroundTime+0x12c>)
 8002ad0:	4293      	cmp	r3, r2
 8002ad2:	d906      	bls.n	8002ae2 <USB_SetTurnaroundTime+0x82>
 8002ad4:	68bb      	ldr	r3, [r7, #8]
 8002ad6:	4a2e      	ldr	r2, [pc, #184]	@ (8002b90 <USB_SetTurnaroundTime+0x130>)
 8002ad8:	4293      	cmp	r3, r2
 8002ada:	d802      	bhi.n	8002ae2 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8002adc:	230b      	movs	r3, #11
 8002ade:	617b      	str	r3, [r7, #20]
 8002ae0:	e036      	b.n	8002b50 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8002ae2:	68bb      	ldr	r3, [r7, #8]
 8002ae4:	4a2a      	ldr	r2, [pc, #168]	@ (8002b90 <USB_SetTurnaroundTime+0x130>)
 8002ae6:	4293      	cmp	r3, r2
 8002ae8:	d906      	bls.n	8002af8 <USB_SetTurnaroundTime+0x98>
 8002aea:	68bb      	ldr	r3, [r7, #8]
 8002aec:	4a29      	ldr	r2, [pc, #164]	@ (8002b94 <USB_SetTurnaroundTime+0x134>)
 8002aee:	4293      	cmp	r3, r2
 8002af0:	d802      	bhi.n	8002af8 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8002af2:	230a      	movs	r3, #10
 8002af4:	617b      	str	r3, [r7, #20]
 8002af6:	e02b      	b.n	8002b50 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8002af8:	68bb      	ldr	r3, [r7, #8]
 8002afa:	4a26      	ldr	r2, [pc, #152]	@ (8002b94 <USB_SetTurnaroundTime+0x134>)
 8002afc:	4293      	cmp	r3, r2
 8002afe:	d906      	bls.n	8002b0e <USB_SetTurnaroundTime+0xae>
 8002b00:	68bb      	ldr	r3, [r7, #8]
 8002b02:	4a25      	ldr	r2, [pc, #148]	@ (8002b98 <USB_SetTurnaroundTime+0x138>)
 8002b04:	4293      	cmp	r3, r2
 8002b06:	d202      	bcs.n	8002b0e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8002b08:	2309      	movs	r3, #9
 8002b0a:	617b      	str	r3, [r7, #20]
 8002b0c:	e020      	b.n	8002b50 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8002b0e:	68bb      	ldr	r3, [r7, #8]
 8002b10:	4a21      	ldr	r2, [pc, #132]	@ (8002b98 <USB_SetTurnaroundTime+0x138>)
 8002b12:	4293      	cmp	r3, r2
 8002b14:	d306      	bcc.n	8002b24 <USB_SetTurnaroundTime+0xc4>
 8002b16:	68bb      	ldr	r3, [r7, #8]
 8002b18:	4a20      	ldr	r2, [pc, #128]	@ (8002b9c <USB_SetTurnaroundTime+0x13c>)
 8002b1a:	4293      	cmp	r3, r2
 8002b1c:	d802      	bhi.n	8002b24 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8002b1e:	2308      	movs	r3, #8
 8002b20:	617b      	str	r3, [r7, #20]
 8002b22:	e015      	b.n	8002b50 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8002b24:	68bb      	ldr	r3, [r7, #8]
 8002b26:	4a1d      	ldr	r2, [pc, #116]	@ (8002b9c <USB_SetTurnaroundTime+0x13c>)
 8002b28:	4293      	cmp	r3, r2
 8002b2a:	d906      	bls.n	8002b3a <USB_SetTurnaroundTime+0xda>
 8002b2c:	68bb      	ldr	r3, [r7, #8]
 8002b2e:	4a1c      	ldr	r2, [pc, #112]	@ (8002ba0 <USB_SetTurnaroundTime+0x140>)
 8002b30:	4293      	cmp	r3, r2
 8002b32:	d202      	bcs.n	8002b3a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8002b34:	2307      	movs	r3, #7
 8002b36:	617b      	str	r3, [r7, #20]
 8002b38:	e00a      	b.n	8002b50 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8002b3a:	2306      	movs	r3, #6
 8002b3c:	617b      	str	r3, [r7, #20]
 8002b3e:	e007      	b.n	8002b50 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8002b40:	79fb      	ldrb	r3, [r7, #7]
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d102      	bne.n	8002b4c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8002b46:	2309      	movs	r3, #9
 8002b48:	617b      	str	r3, [r7, #20]
 8002b4a:	e001      	b.n	8002b50 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8002b4c:	2309      	movs	r3, #9
 8002b4e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	68db      	ldr	r3, [r3, #12]
 8002b54:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	68da      	ldr	r2, [r3, #12]
 8002b60:	697b      	ldr	r3, [r7, #20]
 8002b62:	029b      	lsls	r3, r3, #10
 8002b64:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8002b68:	431a      	orrs	r2, r3
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8002b6e:	2300      	movs	r3, #0
}
 8002b70:	4618      	mov	r0, r3
 8002b72:	371c      	adds	r7, #28
 8002b74:	46bd      	mov	sp, r7
 8002b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b7a:	4770      	bx	lr
 8002b7c:	00d8acbf 	.word	0x00d8acbf
 8002b80:	00e4e1c0 	.word	0x00e4e1c0
 8002b84:	00f42400 	.word	0x00f42400
 8002b88:	01067380 	.word	0x01067380
 8002b8c:	011a499f 	.word	0x011a499f
 8002b90:	01312cff 	.word	0x01312cff
 8002b94:	014ca43f 	.word	0x014ca43f
 8002b98:	016e3600 	.word	0x016e3600
 8002b9c:	01a6ab1f 	.word	0x01a6ab1f
 8002ba0:	01e84800 	.word	0x01e84800

08002ba4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8002ba4:	b480      	push	{r7}
 8002ba6:	b083      	sub	sp, #12
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	689b      	ldr	r3, [r3, #8]
 8002bb0:	f043 0201 	orr.w	r2, r3, #1
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8002bb8:	2300      	movs	r3, #0
}
 8002bba:	4618      	mov	r0, r3
 8002bbc:	370c      	adds	r7, #12
 8002bbe:	46bd      	mov	sp, r7
 8002bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc4:	4770      	bx	lr

08002bc6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8002bc6:	b480      	push	{r7}
 8002bc8:	b083      	sub	sp, #12
 8002bca:	af00      	add	r7, sp, #0
 8002bcc:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	689b      	ldr	r3, [r3, #8]
 8002bd2:	f023 0201 	bic.w	r2, r3, #1
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8002bda:	2300      	movs	r3, #0
}
 8002bdc:	4618      	mov	r0, r3
 8002bde:	370c      	adds	r7, #12
 8002be0:	46bd      	mov	sp, r7
 8002be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be6:	4770      	bx	lr

08002be8 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8002be8:	b580      	push	{r7, lr}
 8002bea:	b084      	sub	sp, #16
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	6078      	str	r0, [r7, #4]
 8002bf0:	460b      	mov	r3, r1
 8002bf2:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8002bf4:	2300      	movs	r3, #0
 8002bf6:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	68db      	ldr	r3, [r3, #12]
 8002bfc:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8002c04:	78fb      	ldrb	r3, [r7, #3]
 8002c06:	2b01      	cmp	r3, #1
 8002c08:	d115      	bne.n	8002c36 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	68db      	ldr	r3, [r3, #12]
 8002c0e:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8002c16:	2001      	movs	r0, #1
 8002c18:	f7fd fe26 	bl	8000868 <HAL_Delay>
      ms++;
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	3301      	adds	r3, #1
 8002c20:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8002c22:	6878      	ldr	r0, [r7, #4]
 8002c24:	f001 f972 	bl	8003f0c <USB_GetMode>
 8002c28:	4603      	mov	r3, r0
 8002c2a:	2b01      	cmp	r3, #1
 8002c2c:	d01e      	beq.n	8002c6c <USB_SetCurrentMode+0x84>
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	2b31      	cmp	r3, #49	@ 0x31
 8002c32:	d9f0      	bls.n	8002c16 <USB_SetCurrentMode+0x2e>
 8002c34:	e01a      	b.n	8002c6c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8002c36:	78fb      	ldrb	r3, [r7, #3]
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d115      	bne.n	8002c68 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	68db      	ldr	r3, [r3, #12]
 8002c40:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8002c48:	2001      	movs	r0, #1
 8002c4a:	f7fd fe0d 	bl	8000868 <HAL_Delay>
      ms++;
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	3301      	adds	r3, #1
 8002c52:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8002c54:	6878      	ldr	r0, [r7, #4]
 8002c56:	f001 f959 	bl	8003f0c <USB_GetMode>
 8002c5a:	4603      	mov	r3, r0
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d005      	beq.n	8002c6c <USB_SetCurrentMode+0x84>
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	2b31      	cmp	r3, #49	@ 0x31
 8002c64:	d9f0      	bls.n	8002c48 <USB_SetCurrentMode+0x60>
 8002c66:	e001      	b.n	8002c6c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8002c68:	2301      	movs	r3, #1
 8002c6a:	e005      	b.n	8002c78 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	2b32      	cmp	r3, #50	@ 0x32
 8002c70:	d101      	bne.n	8002c76 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8002c72:	2301      	movs	r3, #1
 8002c74:	e000      	b.n	8002c78 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8002c76:	2300      	movs	r3, #0
}
 8002c78:	4618      	mov	r0, r3
 8002c7a:	3710      	adds	r7, #16
 8002c7c:	46bd      	mov	sp, r7
 8002c7e:	bd80      	pop	{r7, pc}

08002c80 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8002c80:	b084      	sub	sp, #16
 8002c82:	b580      	push	{r7, lr}
 8002c84:	b086      	sub	sp, #24
 8002c86:	af00      	add	r7, sp, #0
 8002c88:	6078      	str	r0, [r7, #4]
 8002c8a:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8002c8e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8002c92:	2300      	movs	r3, #0
 8002c94:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8002c9a:	2300      	movs	r3, #0
 8002c9c:	613b      	str	r3, [r7, #16]
 8002c9e:	e009      	b.n	8002cb4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8002ca0:	687a      	ldr	r2, [r7, #4]
 8002ca2:	693b      	ldr	r3, [r7, #16]
 8002ca4:	3340      	adds	r3, #64	@ 0x40
 8002ca6:	009b      	lsls	r3, r3, #2
 8002ca8:	4413      	add	r3, r2
 8002caa:	2200      	movs	r2, #0
 8002cac:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8002cae:	693b      	ldr	r3, [r7, #16]
 8002cb0:	3301      	adds	r3, #1
 8002cb2:	613b      	str	r3, [r7, #16]
 8002cb4:	693b      	ldr	r3, [r7, #16]
 8002cb6:	2b0e      	cmp	r3, #14
 8002cb8:	d9f2      	bls.n	8002ca0 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8002cba:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d11c      	bne.n	8002cfa <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002cc6:	685b      	ldr	r3, [r3, #4]
 8002cc8:	68fa      	ldr	r2, [r7, #12]
 8002cca:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002cce:	f043 0302 	orr.w	r3, r3, #2
 8002cd2:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002cd8:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ce4:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002cf0:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	639a      	str	r2, [r3, #56]	@ 0x38
 8002cf8:	e00b      	b.n	8002d12 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002cfe:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d0a:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	639a      	str	r2, [r3, #56]	@ 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8002d18:	461a      	mov	r2, r3
 8002d1a:	2300      	movs	r3, #0
 8002d1c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002d24:	4619      	mov	r1, r3
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002d2c:	461a      	mov	r2, r3
 8002d2e:	680b      	ldr	r3, [r1, #0]
 8002d30:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8002d32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002d34:	2b01      	cmp	r3, #1
 8002d36:	d10c      	bne.n	8002d52 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8002d38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d104      	bne.n	8002d48 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8002d3e:	2100      	movs	r1, #0
 8002d40:	6878      	ldr	r0, [r7, #4]
 8002d42:	f000 f945 	bl	8002fd0 <USB_SetDevSpeed>
 8002d46:	e008      	b.n	8002d5a <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8002d48:	2101      	movs	r1, #1
 8002d4a:	6878      	ldr	r0, [r7, #4]
 8002d4c:	f000 f940 	bl	8002fd0 <USB_SetDevSpeed>
 8002d50:	e003      	b.n	8002d5a <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8002d52:	2103      	movs	r1, #3
 8002d54:	6878      	ldr	r0, [r7, #4]
 8002d56:	f000 f93b 	bl	8002fd0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8002d5a:	2110      	movs	r1, #16
 8002d5c:	6878      	ldr	r0, [r7, #4]
 8002d5e:	f000 f8f3 	bl	8002f48 <USB_FlushTxFifo>
 8002d62:	4603      	mov	r3, r0
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d001      	beq.n	8002d6c <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8002d68:	2301      	movs	r3, #1
 8002d6a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8002d6c:	6878      	ldr	r0, [r7, #4]
 8002d6e:	f000 f90f 	bl	8002f90 <USB_FlushRxFifo>
 8002d72:	4603      	mov	r3, r0
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d001      	beq.n	8002d7c <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8002d78:	2301      	movs	r3, #1
 8002d7a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002d82:	461a      	mov	r2, r3
 8002d84:	2300      	movs	r3, #0
 8002d86:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002d8e:	461a      	mov	r2, r3
 8002d90:	2300      	movs	r3, #0
 8002d92:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002d9a:	461a      	mov	r2, r3
 8002d9c:	2300      	movs	r3, #0
 8002d9e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002da0:	2300      	movs	r3, #0
 8002da2:	613b      	str	r3, [r7, #16]
 8002da4:	e043      	b.n	8002e2e <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8002da6:	693b      	ldr	r3, [r7, #16]
 8002da8:	015a      	lsls	r2, r3, #5
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	4413      	add	r3, r2
 8002dae:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8002db8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002dbc:	d118      	bne.n	8002df0 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8002dbe:	693b      	ldr	r3, [r7, #16]
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d10a      	bne.n	8002dda <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8002dc4:	693b      	ldr	r3, [r7, #16]
 8002dc6:	015a      	lsls	r2, r3, #5
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	4413      	add	r3, r2
 8002dcc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002dd0:	461a      	mov	r2, r3
 8002dd2:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8002dd6:	6013      	str	r3, [r2, #0]
 8002dd8:	e013      	b.n	8002e02 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8002dda:	693b      	ldr	r3, [r7, #16]
 8002ddc:	015a      	lsls	r2, r3, #5
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	4413      	add	r3, r2
 8002de2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002de6:	461a      	mov	r2, r3
 8002de8:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8002dec:	6013      	str	r3, [r2, #0]
 8002dee:	e008      	b.n	8002e02 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8002df0:	693b      	ldr	r3, [r7, #16]
 8002df2:	015a      	lsls	r2, r3, #5
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	4413      	add	r3, r2
 8002df8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002dfc:	461a      	mov	r2, r3
 8002dfe:	2300      	movs	r3, #0
 8002e00:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8002e02:	693b      	ldr	r3, [r7, #16]
 8002e04:	015a      	lsls	r2, r3, #5
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	4413      	add	r3, r2
 8002e0a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002e0e:	461a      	mov	r2, r3
 8002e10:	2300      	movs	r3, #0
 8002e12:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8002e14:	693b      	ldr	r3, [r7, #16]
 8002e16:	015a      	lsls	r2, r3, #5
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	4413      	add	r3, r2
 8002e1c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002e20:	461a      	mov	r2, r3
 8002e22:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8002e26:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002e28:	693b      	ldr	r3, [r7, #16]
 8002e2a:	3301      	adds	r3, #1
 8002e2c:	613b      	str	r3, [r7, #16]
 8002e2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e30:	693a      	ldr	r2, [r7, #16]
 8002e32:	429a      	cmp	r2, r3
 8002e34:	d3b7      	bcc.n	8002da6 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002e36:	2300      	movs	r3, #0
 8002e38:	613b      	str	r3, [r7, #16]
 8002e3a:	e043      	b.n	8002ec4 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8002e3c:	693b      	ldr	r3, [r7, #16]
 8002e3e:	015a      	lsls	r2, r3, #5
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	4413      	add	r3, r2
 8002e44:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8002e4e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002e52:	d118      	bne.n	8002e86 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8002e54:	693b      	ldr	r3, [r7, #16]
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d10a      	bne.n	8002e70 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8002e5a:	693b      	ldr	r3, [r7, #16]
 8002e5c:	015a      	lsls	r2, r3, #5
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	4413      	add	r3, r2
 8002e62:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002e66:	461a      	mov	r2, r3
 8002e68:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8002e6c:	6013      	str	r3, [r2, #0]
 8002e6e:	e013      	b.n	8002e98 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8002e70:	693b      	ldr	r3, [r7, #16]
 8002e72:	015a      	lsls	r2, r3, #5
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	4413      	add	r3, r2
 8002e78:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002e7c:	461a      	mov	r2, r3
 8002e7e:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8002e82:	6013      	str	r3, [r2, #0]
 8002e84:	e008      	b.n	8002e98 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8002e86:	693b      	ldr	r3, [r7, #16]
 8002e88:	015a      	lsls	r2, r3, #5
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	4413      	add	r3, r2
 8002e8e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002e92:	461a      	mov	r2, r3
 8002e94:	2300      	movs	r3, #0
 8002e96:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8002e98:	693b      	ldr	r3, [r7, #16]
 8002e9a:	015a      	lsls	r2, r3, #5
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	4413      	add	r3, r2
 8002ea0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002ea4:	461a      	mov	r2, r3
 8002ea6:	2300      	movs	r3, #0
 8002ea8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8002eaa:	693b      	ldr	r3, [r7, #16]
 8002eac:	015a      	lsls	r2, r3, #5
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	4413      	add	r3, r2
 8002eb2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002eb6:	461a      	mov	r2, r3
 8002eb8:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8002ebc:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002ebe:	693b      	ldr	r3, [r7, #16]
 8002ec0:	3301      	adds	r3, #1
 8002ec2:	613b      	str	r3, [r7, #16]
 8002ec4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ec6:	693a      	ldr	r2, [r7, #16]
 8002ec8:	429a      	cmp	r2, r3
 8002eca:	d3b7      	bcc.n	8002e3c <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002ed2:	691b      	ldr	r3, [r3, #16]
 8002ed4:	68fa      	ldr	r2, [r7, #12]
 8002ed6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002eda:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002ede:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	2200      	movs	r2, #0
 8002ee4:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8002eec:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8002eee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d105      	bne.n	8002f00 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	699b      	ldr	r3, [r3, #24]
 8002ef8:	f043 0210 	orr.w	r2, r3, #16
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	699a      	ldr	r2, [r3, #24]
 8002f04:	4b0f      	ldr	r3, [pc, #60]	@ (8002f44 <USB_DevInit+0x2c4>)
 8002f06:	4313      	orrs	r3, r2
 8002f08:	687a      	ldr	r2, [r7, #4]
 8002f0a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8002f0c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d005      	beq.n	8002f1e <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	699b      	ldr	r3, [r3, #24]
 8002f16:	f043 0208 	orr.w	r2, r3, #8
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8002f1e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002f20:	2b01      	cmp	r3, #1
 8002f22:	d107      	bne.n	8002f34 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	699b      	ldr	r3, [r3, #24]
 8002f28:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8002f2c:	f043 0304 	orr.w	r3, r3, #4
 8002f30:	687a      	ldr	r2, [r7, #4]
 8002f32:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8002f34:	7dfb      	ldrb	r3, [r7, #23]
}
 8002f36:	4618      	mov	r0, r3
 8002f38:	3718      	adds	r7, #24
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002f40:	b004      	add	sp, #16
 8002f42:	4770      	bx	lr
 8002f44:	803c3800 	.word	0x803c3800

08002f48 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8002f48:	b480      	push	{r7}
 8002f4a:	b085      	sub	sp, #20
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	6078      	str	r0, [r7, #4]
 8002f50:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8002f52:	2300      	movs	r3, #0
 8002f54:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8002f56:	683b      	ldr	r3, [r7, #0]
 8002f58:	019b      	lsls	r3, r3, #6
 8002f5a:	f043 0220 	orr.w	r2, r3, #32
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	3301      	adds	r3, #1
 8002f66:	60fb      	str	r3, [r7, #12]
 8002f68:	4a08      	ldr	r2, [pc, #32]	@ (8002f8c <USB_FlushTxFifo+0x44>)
 8002f6a:	4293      	cmp	r3, r2
 8002f6c:	d901      	bls.n	8002f72 <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 8002f6e:	2303      	movs	r3, #3
 8002f70:	e006      	b.n	8002f80 <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	691b      	ldr	r3, [r3, #16]
 8002f76:	f003 0320 	and.w	r3, r3, #32
 8002f7a:	2b20      	cmp	r3, #32
 8002f7c:	d0f1      	beq.n	8002f62 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8002f7e:	2300      	movs	r3, #0
}
 8002f80:	4618      	mov	r0, r3
 8002f82:	3714      	adds	r7, #20
 8002f84:	46bd      	mov	sp, r7
 8002f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f8a:	4770      	bx	lr
 8002f8c:	00030d40 	.word	0x00030d40

08002f90 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8002f90:	b480      	push	{r7}
 8002f92:	b085      	sub	sp, #20
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8002f98:	2300      	movs	r3, #0
 8002f9a:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	2210      	movs	r2, #16
 8002fa0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	3301      	adds	r3, #1
 8002fa6:	60fb      	str	r3, [r7, #12]
 8002fa8:	4a08      	ldr	r2, [pc, #32]	@ (8002fcc <USB_FlushRxFifo+0x3c>)
 8002faa:	4293      	cmp	r3, r2
 8002fac:	d901      	bls.n	8002fb2 <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 8002fae:	2303      	movs	r3, #3
 8002fb0:	e006      	b.n	8002fc0 <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	691b      	ldr	r3, [r3, #16]
 8002fb6:	f003 0310 	and.w	r3, r3, #16
 8002fba:	2b10      	cmp	r3, #16
 8002fbc:	d0f1      	beq.n	8002fa2 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8002fbe:	2300      	movs	r3, #0
}
 8002fc0:	4618      	mov	r0, r3
 8002fc2:	3714      	adds	r7, #20
 8002fc4:	46bd      	mov	sp, r7
 8002fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fca:	4770      	bx	lr
 8002fcc:	00030d40 	.word	0x00030d40

08002fd0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8002fd0:	b480      	push	{r7}
 8002fd2:	b085      	sub	sp, #20
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	6078      	str	r0, [r7, #4]
 8002fd8:	460b      	mov	r3, r1
 8002fda:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002fe6:	681a      	ldr	r2, [r3, #0]
 8002fe8:	78fb      	ldrb	r3, [r7, #3]
 8002fea:	68f9      	ldr	r1, [r7, #12]
 8002fec:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8002ff0:	4313      	orrs	r3, r2
 8002ff2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8002ff4:	2300      	movs	r3, #0
}
 8002ff6:	4618      	mov	r0, r3
 8002ff8:	3714      	adds	r7, #20
 8002ffa:	46bd      	mov	sp, r7
 8002ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003000:	4770      	bx	lr

08003002 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8003002:	b480      	push	{r7}
 8003004:	b087      	sub	sp, #28
 8003006:	af00      	add	r7, sp, #0
 8003008:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800300e:	693b      	ldr	r3, [r7, #16]
 8003010:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003014:	689b      	ldr	r3, [r3, #8]
 8003016:	f003 0306 	and.w	r3, r3, #6
 800301a:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	2b00      	cmp	r3, #0
 8003020:	d102      	bne.n	8003028 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8003022:	2300      	movs	r3, #0
 8003024:	75fb      	strb	r3, [r7, #23]
 8003026:	e00a      	b.n	800303e <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	2b02      	cmp	r3, #2
 800302c:	d002      	beq.n	8003034 <USB_GetDevSpeed+0x32>
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	2b06      	cmp	r3, #6
 8003032:	d102      	bne.n	800303a <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8003034:	2302      	movs	r3, #2
 8003036:	75fb      	strb	r3, [r7, #23]
 8003038:	e001      	b.n	800303e <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800303a:	230f      	movs	r3, #15
 800303c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800303e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003040:	4618      	mov	r0, r3
 8003042:	371c      	adds	r7, #28
 8003044:	46bd      	mov	sp, r7
 8003046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800304a:	4770      	bx	lr

0800304c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800304c:	b480      	push	{r7}
 800304e:	b085      	sub	sp, #20
 8003050:	af00      	add	r7, sp, #0
 8003052:	6078      	str	r0, [r7, #4]
 8003054:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800305a:	683b      	ldr	r3, [r7, #0]
 800305c:	781b      	ldrb	r3, [r3, #0]
 800305e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8003060:	683b      	ldr	r3, [r7, #0]
 8003062:	785b      	ldrb	r3, [r3, #1]
 8003064:	2b01      	cmp	r3, #1
 8003066:	d13a      	bne.n	80030de <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800306e:	69da      	ldr	r2, [r3, #28]
 8003070:	683b      	ldr	r3, [r7, #0]
 8003072:	781b      	ldrb	r3, [r3, #0]
 8003074:	f003 030f 	and.w	r3, r3, #15
 8003078:	2101      	movs	r1, #1
 800307a:	fa01 f303 	lsl.w	r3, r1, r3
 800307e:	b29b      	uxth	r3, r3
 8003080:	68f9      	ldr	r1, [r7, #12]
 8003082:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003086:	4313      	orrs	r3, r2
 8003088:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800308a:	68bb      	ldr	r3, [r7, #8]
 800308c:	015a      	lsls	r2, r3, #5
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	4413      	add	r3, r2
 8003092:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800309c:	2b00      	cmp	r3, #0
 800309e:	d155      	bne.n	800314c <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80030a0:	68bb      	ldr	r3, [r7, #8]
 80030a2:	015a      	lsls	r2, r3, #5
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	4413      	add	r3, r2
 80030a8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80030ac:	681a      	ldr	r2, [r3, #0]
 80030ae:	683b      	ldr	r3, [r7, #0]
 80030b0:	689b      	ldr	r3, [r3, #8]
 80030b2:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80030b6:	683b      	ldr	r3, [r7, #0]
 80030b8:	78db      	ldrb	r3, [r3, #3]
 80030ba:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80030bc:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80030be:	68bb      	ldr	r3, [r7, #8]
 80030c0:	059b      	lsls	r3, r3, #22
 80030c2:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80030c4:	4313      	orrs	r3, r2
 80030c6:	68ba      	ldr	r2, [r7, #8]
 80030c8:	0151      	lsls	r1, r2, #5
 80030ca:	68fa      	ldr	r2, [r7, #12]
 80030cc:	440a      	add	r2, r1
 80030ce:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80030d2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80030d6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80030da:	6013      	str	r3, [r2, #0]
 80030dc:	e036      	b.n	800314c <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80030e4:	69da      	ldr	r2, [r3, #28]
 80030e6:	683b      	ldr	r3, [r7, #0]
 80030e8:	781b      	ldrb	r3, [r3, #0]
 80030ea:	f003 030f 	and.w	r3, r3, #15
 80030ee:	2101      	movs	r1, #1
 80030f0:	fa01 f303 	lsl.w	r3, r1, r3
 80030f4:	041b      	lsls	r3, r3, #16
 80030f6:	68f9      	ldr	r1, [r7, #12]
 80030f8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80030fc:	4313      	orrs	r3, r2
 80030fe:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8003100:	68bb      	ldr	r3, [r7, #8]
 8003102:	015a      	lsls	r2, r3, #5
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	4413      	add	r3, r2
 8003108:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003112:	2b00      	cmp	r3, #0
 8003114:	d11a      	bne.n	800314c <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8003116:	68bb      	ldr	r3, [r7, #8]
 8003118:	015a      	lsls	r2, r3, #5
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	4413      	add	r3, r2
 800311e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003122:	681a      	ldr	r2, [r3, #0]
 8003124:	683b      	ldr	r3, [r7, #0]
 8003126:	689b      	ldr	r3, [r3, #8]
 8003128:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800312c:	683b      	ldr	r3, [r7, #0]
 800312e:	78db      	ldrb	r3, [r3, #3]
 8003130:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8003132:	430b      	orrs	r3, r1
 8003134:	4313      	orrs	r3, r2
 8003136:	68ba      	ldr	r2, [r7, #8]
 8003138:	0151      	lsls	r1, r2, #5
 800313a:	68fa      	ldr	r2, [r7, #12]
 800313c:	440a      	add	r2, r1
 800313e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003142:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003146:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800314a:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800314c:	2300      	movs	r3, #0
}
 800314e:	4618      	mov	r0, r3
 8003150:	3714      	adds	r7, #20
 8003152:	46bd      	mov	sp, r7
 8003154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003158:	4770      	bx	lr
	...

0800315c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800315c:	b480      	push	{r7}
 800315e:	b085      	sub	sp, #20
 8003160:	af00      	add	r7, sp, #0
 8003162:	6078      	str	r0, [r7, #4]
 8003164:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800316a:	683b      	ldr	r3, [r7, #0]
 800316c:	781b      	ldrb	r3, [r3, #0]
 800316e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8003170:	683b      	ldr	r3, [r7, #0]
 8003172:	785b      	ldrb	r3, [r3, #1]
 8003174:	2b01      	cmp	r3, #1
 8003176:	d161      	bne.n	800323c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003178:	68bb      	ldr	r3, [r7, #8]
 800317a:	015a      	lsls	r2, r3, #5
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	4413      	add	r3, r2
 8003180:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800318a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800318e:	d11f      	bne.n	80031d0 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8003190:	68bb      	ldr	r3, [r7, #8]
 8003192:	015a      	lsls	r2, r3, #5
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	4413      	add	r3, r2
 8003198:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	68ba      	ldr	r2, [r7, #8]
 80031a0:	0151      	lsls	r1, r2, #5
 80031a2:	68fa      	ldr	r2, [r7, #12]
 80031a4:	440a      	add	r2, r1
 80031a6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80031aa:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80031ae:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80031b0:	68bb      	ldr	r3, [r7, #8]
 80031b2:	015a      	lsls	r2, r3, #5
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	4413      	add	r3, r2
 80031b8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	68ba      	ldr	r2, [r7, #8]
 80031c0:	0151      	lsls	r1, r2, #5
 80031c2:	68fa      	ldr	r2, [r7, #12]
 80031c4:	440a      	add	r2, r1
 80031c6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80031ca:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80031ce:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80031d6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80031d8:	683b      	ldr	r3, [r7, #0]
 80031da:	781b      	ldrb	r3, [r3, #0]
 80031dc:	f003 030f 	and.w	r3, r3, #15
 80031e0:	2101      	movs	r1, #1
 80031e2:	fa01 f303 	lsl.w	r3, r1, r3
 80031e6:	b29b      	uxth	r3, r3
 80031e8:	43db      	mvns	r3, r3
 80031ea:	68f9      	ldr	r1, [r7, #12]
 80031ec:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80031f0:	4013      	ands	r3, r2
 80031f2:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80031fa:	69da      	ldr	r2, [r3, #28]
 80031fc:	683b      	ldr	r3, [r7, #0]
 80031fe:	781b      	ldrb	r3, [r3, #0]
 8003200:	f003 030f 	and.w	r3, r3, #15
 8003204:	2101      	movs	r1, #1
 8003206:	fa01 f303 	lsl.w	r3, r1, r3
 800320a:	b29b      	uxth	r3, r3
 800320c:	43db      	mvns	r3, r3
 800320e:	68f9      	ldr	r1, [r7, #12]
 8003210:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003214:	4013      	ands	r3, r2
 8003216:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8003218:	68bb      	ldr	r3, [r7, #8]
 800321a:	015a      	lsls	r2, r3, #5
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	4413      	add	r3, r2
 8003220:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003224:	681a      	ldr	r2, [r3, #0]
 8003226:	68bb      	ldr	r3, [r7, #8]
 8003228:	0159      	lsls	r1, r3, #5
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	440b      	add	r3, r1
 800322e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003232:	4619      	mov	r1, r3
 8003234:	4b35      	ldr	r3, [pc, #212]	@ (800330c <USB_DeactivateEndpoint+0x1b0>)
 8003236:	4013      	ands	r3, r2
 8003238:	600b      	str	r3, [r1, #0]
 800323a:	e060      	b.n	80032fe <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800323c:	68bb      	ldr	r3, [r7, #8]
 800323e:	015a      	lsls	r2, r3, #5
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	4413      	add	r3, r2
 8003244:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800324e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003252:	d11f      	bne.n	8003294 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003254:	68bb      	ldr	r3, [r7, #8]
 8003256:	015a      	lsls	r2, r3, #5
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	4413      	add	r3, r2
 800325c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	68ba      	ldr	r2, [r7, #8]
 8003264:	0151      	lsls	r1, r2, #5
 8003266:	68fa      	ldr	r2, [r7, #12]
 8003268:	440a      	add	r2, r1
 800326a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800326e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8003272:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8003274:	68bb      	ldr	r3, [r7, #8]
 8003276:	015a      	lsls	r2, r3, #5
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	4413      	add	r3, r2
 800327c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	68ba      	ldr	r2, [r7, #8]
 8003284:	0151      	lsls	r1, r2, #5
 8003286:	68fa      	ldr	r2, [r7, #12]
 8003288:	440a      	add	r2, r1
 800328a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800328e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8003292:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800329a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800329c:	683b      	ldr	r3, [r7, #0]
 800329e:	781b      	ldrb	r3, [r3, #0]
 80032a0:	f003 030f 	and.w	r3, r3, #15
 80032a4:	2101      	movs	r1, #1
 80032a6:	fa01 f303 	lsl.w	r3, r1, r3
 80032aa:	041b      	lsls	r3, r3, #16
 80032ac:	43db      	mvns	r3, r3
 80032ae:	68f9      	ldr	r1, [r7, #12]
 80032b0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80032b4:	4013      	ands	r3, r2
 80032b6:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80032be:	69da      	ldr	r2, [r3, #28]
 80032c0:	683b      	ldr	r3, [r7, #0]
 80032c2:	781b      	ldrb	r3, [r3, #0]
 80032c4:	f003 030f 	and.w	r3, r3, #15
 80032c8:	2101      	movs	r1, #1
 80032ca:	fa01 f303 	lsl.w	r3, r1, r3
 80032ce:	041b      	lsls	r3, r3, #16
 80032d0:	43db      	mvns	r3, r3
 80032d2:	68f9      	ldr	r1, [r7, #12]
 80032d4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80032d8:	4013      	ands	r3, r2
 80032da:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80032dc:	68bb      	ldr	r3, [r7, #8]
 80032de:	015a      	lsls	r2, r3, #5
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	4413      	add	r3, r2
 80032e4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80032e8:	681a      	ldr	r2, [r3, #0]
 80032ea:	68bb      	ldr	r3, [r7, #8]
 80032ec:	0159      	lsls	r1, r3, #5
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	440b      	add	r3, r1
 80032f2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80032f6:	4619      	mov	r1, r3
 80032f8:	4b05      	ldr	r3, [pc, #20]	@ (8003310 <USB_DeactivateEndpoint+0x1b4>)
 80032fa:	4013      	ands	r3, r2
 80032fc:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80032fe:	2300      	movs	r3, #0
}
 8003300:	4618      	mov	r0, r3
 8003302:	3714      	adds	r7, #20
 8003304:	46bd      	mov	sp, r7
 8003306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800330a:	4770      	bx	lr
 800330c:	ec337800 	.word	0xec337800
 8003310:	eff37800 	.word	0xeff37800

08003314 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8003314:	b580      	push	{r7, lr}
 8003316:	b08a      	sub	sp, #40	@ 0x28
 8003318:	af02      	add	r7, sp, #8
 800331a:	60f8      	str	r0, [r7, #12]
 800331c:	60b9      	str	r1, [r7, #8]
 800331e:	4613      	mov	r3, r2
 8003320:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8003326:	68bb      	ldr	r3, [r7, #8]
 8003328:	781b      	ldrb	r3, [r3, #0]
 800332a:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800332c:	68bb      	ldr	r3, [r7, #8]
 800332e:	785b      	ldrb	r3, [r3, #1]
 8003330:	2b01      	cmp	r3, #1
 8003332:	f040 815c 	bne.w	80035ee <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8003336:	68bb      	ldr	r3, [r7, #8]
 8003338:	695b      	ldr	r3, [r3, #20]
 800333a:	2b00      	cmp	r3, #0
 800333c:	d132      	bne.n	80033a4 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800333e:	69bb      	ldr	r3, [r7, #24]
 8003340:	015a      	lsls	r2, r3, #5
 8003342:	69fb      	ldr	r3, [r7, #28]
 8003344:	4413      	add	r3, r2
 8003346:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800334a:	691b      	ldr	r3, [r3, #16]
 800334c:	69ba      	ldr	r2, [r7, #24]
 800334e:	0151      	lsls	r1, r2, #5
 8003350:	69fa      	ldr	r2, [r7, #28]
 8003352:	440a      	add	r2, r1
 8003354:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003358:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800335c:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8003360:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8003362:	69bb      	ldr	r3, [r7, #24]
 8003364:	015a      	lsls	r2, r3, #5
 8003366:	69fb      	ldr	r3, [r7, #28]
 8003368:	4413      	add	r3, r2
 800336a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800336e:	691b      	ldr	r3, [r3, #16]
 8003370:	69ba      	ldr	r2, [r7, #24]
 8003372:	0151      	lsls	r1, r2, #5
 8003374:	69fa      	ldr	r2, [r7, #28]
 8003376:	440a      	add	r2, r1
 8003378:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800337c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8003380:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003382:	69bb      	ldr	r3, [r7, #24]
 8003384:	015a      	lsls	r2, r3, #5
 8003386:	69fb      	ldr	r3, [r7, #28]
 8003388:	4413      	add	r3, r2
 800338a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800338e:	691b      	ldr	r3, [r3, #16]
 8003390:	69ba      	ldr	r2, [r7, #24]
 8003392:	0151      	lsls	r1, r2, #5
 8003394:	69fa      	ldr	r2, [r7, #28]
 8003396:	440a      	add	r2, r1
 8003398:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800339c:	0cdb      	lsrs	r3, r3, #19
 800339e:	04db      	lsls	r3, r3, #19
 80033a0:	6113      	str	r3, [r2, #16]
 80033a2:	e074      	b.n	800348e <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80033a4:	69bb      	ldr	r3, [r7, #24]
 80033a6:	015a      	lsls	r2, r3, #5
 80033a8:	69fb      	ldr	r3, [r7, #28]
 80033aa:	4413      	add	r3, r2
 80033ac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80033b0:	691b      	ldr	r3, [r3, #16]
 80033b2:	69ba      	ldr	r2, [r7, #24]
 80033b4:	0151      	lsls	r1, r2, #5
 80033b6:	69fa      	ldr	r2, [r7, #28]
 80033b8:	440a      	add	r2, r1
 80033ba:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80033be:	0cdb      	lsrs	r3, r3, #19
 80033c0:	04db      	lsls	r3, r3, #19
 80033c2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80033c4:	69bb      	ldr	r3, [r7, #24]
 80033c6:	015a      	lsls	r2, r3, #5
 80033c8:	69fb      	ldr	r3, [r7, #28]
 80033ca:	4413      	add	r3, r2
 80033cc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80033d0:	691b      	ldr	r3, [r3, #16]
 80033d2:	69ba      	ldr	r2, [r7, #24]
 80033d4:	0151      	lsls	r1, r2, #5
 80033d6:	69fa      	ldr	r2, [r7, #28]
 80033d8:	440a      	add	r2, r1
 80033da:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80033de:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 80033e2:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 80033e6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80033e8:	69bb      	ldr	r3, [r7, #24]
 80033ea:	015a      	lsls	r2, r3, #5
 80033ec:	69fb      	ldr	r3, [r7, #28]
 80033ee:	4413      	add	r3, r2
 80033f0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80033f4:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80033f6:	68bb      	ldr	r3, [r7, #8]
 80033f8:	6959      	ldr	r1, [r3, #20]
 80033fa:	68bb      	ldr	r3, [r7, #8]
 80033fc:	689b      	ldr	r3, [r3, #8]
 80033fe:	440b      	add	r3, r1
 8003400:	1e59      	subs	r1, r3, #1
 8003402:	68bb      	ldr	r3, [r7, #8]
 8003404:	689b      	ldr	r3, [r3, #8]
 8003406:	fbb1 f3f3 	udiv	r3, r1, r3
 800340a:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800340c:	4b9d      	ldr	r3, [pc, #628]	@ (8003684 <USB_EPStartXfer+0x370>)
 800340e:	400b      	ands	r3, r1
 8003410:	69b9      	ldr	r1, [r7, #24]
 8003412:	0148      	lsls	r0, r1, #5
 8003414:	69f9      	ldr	r1, [r7, #28]
 8003416:	4401      	add	r1, r0
 8003418:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800341c:	4313      	orrs	r3, r2
 800341e:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8003420:	69bb      	ldr	r3, [r7, #24]
 8003422:	015a      	lsls	r2, r3, #5
 8003424:	69fb      	ldr	r3, [r7, #28]
 8003426:	4413      	add	r3, r2
 8003428:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800342c:	691a      	ldr	r2, [r3, #16]
 800342e:	68bb      	ldr	r3, [r7, #8]
 8003430:	695b      	ldr	r3, [r3, #20]
 8003432:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003436:	69b9      	ldr	r1, [r7, #24]
 8003438:	0148      	lsls	r0, r1, #5
 800343a:	69f9      	ldr	r1, [r7, #28]
 800343c:	4401      	add	r1, r0
 800343e:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8003442:	4313      	orrs	r3, r2
 8003444:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8003446:	68bb      	ldr	r3, [r7, #8]
 8003448:	78db      	ldrb	r3, [r3, #3]
 800344a:	2b01      	cmp	r3, #1
 800344c:	d11f      	bne.n	800348e <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800344e:	69bb      	ldr	r3, [r7, #24]
 8003450:	015a      	lsls	r2, r3, #5
 8003452:	69fb      	ldr	r3, [r7, #28]
 8003454:	4413      	add	r3, r2
 8003456:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800345a:	691b      	ldr	r3, [r3, #16]
 800345c:	69ba      	ldr	r2, [r7, #24]
 800345e:	0151      	lsls	r1, r2, #5
 8003460:	69fa      	ldr	r2, [r7, #28]
 8003462:	440a      	add	r2, r1
 8003464:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003468:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 800346c:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800346e:	69bb      	ldr	r3, [r7, #24]
 8003470:	015a      	lsls	r2, r3, #5
 8003472:	69fb      	ldr	r3, [r7, #28]
 8003474:	4413      	add	r3, r2
 8003476:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800347a:	691b      	ldr	r3, [r3, #16]
 800347c:	69ba      	ldr	r2, [r7, #24]
 800347e:	0151      	lsls	r1, r2, #5
 8003480:	69fa      	ldr	r2, [r7, #28]
 8003482:	440a      	add	r2, r1
 8003484:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003488:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800348c:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800348e:	79fb      	ldrb	r3, [r7, #7]
 8003490:	2b01      	cmp	r3, #1
 8003492:	d14b      	bne.n	800352c <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8003494:	68bb      	ldr	r3, [r7, #8]
 8003496:	691b      	ldr	r3, [r3, #16]
 8003498:	2b00      	cmp	r3, #0
 800349a:	d009      	beq.n	80034b0 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800349c:	69bb      	ldr	r3, [r7, #24]
 800349e:	015a      	lsls	r2, r3, #5
 80034a0:	69fb      	ldr	r3, [r7, #28]
 80034a2:	4413      	add	r3, r2
 80034a4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80034a8:	461a      	mov	r2, r3
 80034aa:	68bb      	ldr	r3, [r7, #8]
 80034ac:	691b      	ldr	r3, [r3, #16]
 80034ae:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80034b0:	68bb      	ldr	r3, [r7, #8]
 80034b2:	78db      	ldrb	r3, [r3, #3]
 80034b4:	2b01      	cmp	r3, #1
 80034b6:	d128      	bne.n	800350a <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80034b8:	69fb      	ldr	r3, [r7, #28]
 80034ba:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80034be:	689b      	ldr	r3, [r3, #8]
 80034c0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d110      	bne.n	80034ea <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80034c8:	69bb      	ldr	r3, [r7, #24]
 80034ca:	015a      	lsls	r2, r3, #5
 80034cc:	69fb      	ldr	r3, [r7, #28]
 80034ce:	4413      	add	r3, r2
 80034d0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	69ba      	ldr	r2, [r7, #24]
 80034d8:	0151      	lsls	r1, r2, #5
 80034da:	69fa      	ldr	r2, [r7, #28]
 80034dc:	440a      	add	r2, r1
 80034de:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80034e2:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80034e6:	6013      	str	r3, [r2, #0]
 80034e8:	e00f      	b.n	800350a <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80034ea:	69bb      	ldr	r3, [r7, #24]
 80034ec:	015a      	lsls	r2, r3, #5
 80034ee:	69fb      	ldr	r3, [r7, #28]
 80034f0:	4413      	add	r3, r2
 80034f2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	69ba      	ldr	r2, [r7, #24]
 80034fa:	0151      	lsls	r1, r2, #5
 80034fc:	69fa      	ldr	r2, [r7, #28]
 80034fe:	440a      	add	r2, r1
 8003500:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003504:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003508:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800350a:	69bb      	ldr	r3, [r7, #24]
 800350c:	015a      	lsls	r2, r3, #5
 800350e:	69fb      	ldr	r3, [r7, #28]
 8003510:	4413      	add	r3, r2
 8003512:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	69ba      	ldr	r2, [r7, #24]
 800351a:	0151      	lsls	r1, r2, #5
 800351c:	69fa      	ldr	r2, [r7, #28]
 800351e:	440a      	add	r2, r1
 8003520:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003524:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8003528:	6013      	str	r3, [r2, #0]
 800352a:	e12f      	b.n	800378c <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800352c:	69bb      	ldr	r3, [r7, #24]
 800352e:	015a      	lsls	r2, r3, #5
 8003530:	69fb      	ldr	r3, [r7, #28]
 8003532:	4413      	add	r3, r2
 8003534:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	69ba      	ldr	r2, [r7, #24]
 800353c:	0151      	lsls	r1, r2, #5
 800353e:	69fa      	ldr	r2, [r7, #28]
 8003540:	440a      	add	r2, r1
 8003542:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003546:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800354a:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800354c:	68bb      	ldr	r3, [r7, #8]
 800354e:	78db      	ldrb	r3, [r3, #3]
 8003550:	2b01      	cmp	r3, #1
 8003552:	d015      	beq.n	8003580 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8003554:	68bb      	ldr	r3, [r7, #8]
 8003556:	695b      	ldr	r3, [r3, #20]
 8003558:	2b00      	cmp	r3, #0
 800355a:	f000 8117 	beq.w	800378c <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800355e:	69fb      	ldr	r3, [r7, #28]
 8003560:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003564:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003566:	68bb      	ldr	r3, [r7, #8]
 8003568:	781b      	ldrb	r3, [r3, #0]
 800356a:	f003 030f 	and.w	r3, r3, #15
 800356e:	2101      	movs	r1, #1
 8003570:	fa01 f303 	lsl.w	r3, r1, r3
 8003574:	69f9      	ldr	r1, [r7, #28]
 8003576:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800357a:	4313      	orrs	r3, r2
 800357c:	634b      	str	r3, [r1, #52]	@ 0x34
 800357e:	e105      	b.n	800378c <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8003580:	69fb      	ldr	r3, [r7, #28]
 8003582:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003586:	689b      	ldr	r3, [r3, #8]
 8003588:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800358c:	2b00      	cmp	r3, #0
 800358e:	d110      	bne.n	80035b2 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8003590:	69bb      	ldr	r3, [r7, #24]
 8003592:	015a      	lsls	r2, r3, #5
 8003594:	69fb      	ldr	r3, [r7, #28]
 8003596:	4413      	add	r3, r2
 8003598:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	69ba      	ldr	r2, [r7, #24]
 80035a0:	0151      	lsls	r1, r2, #5
 80035a2:	69fa      	ldr	r2, [r7, #28]
 80035a4:	440a      	add	r2, r1
 80035a6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80035aa:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80035ae:	6013      	str	r3, [r2, #0]
 80035b0:	e00f      	b.n	80035d2 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80035b2:	69bb      	ldr	r3, [r7, #24]
 80035b4:	015a      	lsls	r2, r3, #5
 80035b6:	69fb      	ldr	r3, [r7, #28]
 80035b8:	4413      	add	r3, r2
 80035ba:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	69ba      	ldr	r2, [r7, #24]
 80035c2:	0151      	lsls	r1, r2, #5
 80035c4:	69fa      	ldr	r2, [r7, #28]
 80035c6:	440a      	add	r2, r1
 80035c8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80035cc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80035d0:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80035d2:	68bb      	ldr	r3, [r7, #8]
 80035d4:	68d9      	ldr	r1, [r3, #12]
 80035d6:	68bb      	ldr	r3, [r7, #8]
 80035d8:	781a      	ldrb	r2, [r3, #0]
 80035da:	68bb      	ldr	r3, [r7, #8]
 80035dc:	695b      	ldr	r3, [r3, #20]
 80035de:	b298      	uxth	r0, r3
 80035e0:	79fb      	ldrb	r3, [r7, #7]
 80035e2:	9300      	str	r3, [sp, #0]
 80035e4:	4603      	mov	r3, r0
 80035e6:	68f8      	ldr	r0, [r7, #12]
 80035e8:	f000 fa2b 	bl	8003a42 <USB_WritePacket>
 80035ec:	e0ce      	b.n	800378c <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80035ee:	69bb      	ldr	r3, [r7, #24]
 80035f0:	015a      	lsls	r2, r3, #5
 80035f2:	69fb      	ldr	r3, [r7, #28]
 80035f4:	4413      	add	r3, r2
 80035f6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80035fa:	691b      	ldr	r3, [r3, #16]
 80035fc:	69ba      	ldr	r2, [r7, #24]
 80035fe:	0151      	lsls	r1, r2, #5
 8003600:	69fa      	ldr	r2, [r7, #28]
 8003602:	440a      	add	r2, r1
 8003604:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003608:	0cdb      	lsrs	r3, r3, #19
 800360a:	04db      	lsls	r3, r3, #19
 800360c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800360e:	69bb      	ldr	r3, [r7, #24]
 8003610:	015a      	lsls	r2, r3, #5
 8003612:	69fb      	ldr	r3, [r7, #28]
 8003614:	4413      	add	r3, r2
 8003616:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800361a:	691b      	ldr	r3, [r3, #16]
 800361c:	69ba      	ldr	r2, [r7, #24]
 800361e:	0151      	lsls	r1, r2, #5
 8003620:	69fa      	ldr	r2, [r7, #28]
 8003622:	440a      	add	r2, r1
 8003624:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003628:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800362c:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8003630:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8003632:	68bb      	ldr	r3, [r7, #8]
 8003634:	695b      	ldr	r3, [r3, #20]
 8003636:	2b00      	cmp	r3, #0
 8003638:	d126      	bne.n	8003688 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800363a:	69bb      	ldr	r3, [r7, #24]
 800363c:	015a      	lsls	r2, r3, #5
 800363e:	69fb      	ldr	r3, [r7, #28]
 8003640:	4413      	add	r3, r2
 8003642:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003646:	691a      	ldr	r2, [r3, #16]
 8003648:	68bb      	ldr	r3, [r7, #8]
 800364a:	689b      	ldr	r3, [r3, #8]
 800364c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003650:	69b9      	ldr	r1, [r7, #24]
 8003652:	0148      	lsls	r0, r1, #5
 8003654:	69f9      	ldr	r1, [r7, #28]
 8003656:	4401      	add	r1, r0
 8003658:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800365c:	4313      	orrs	r3, r2
 800365e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8003660:	69bb      	ldr	r3, [r7, #24]
 8003662:	015a      	lsls	r2, r3, #5
 8003664:	69fb      	ldr	r3, [r7, #28]
 8003666:	4413      	add	r3, r2
 8003668:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800366c:	691b      	ldr	r3, [r3, #16]
 800366e:	69ba      	ldr	r2, [r7, #24]
 8003670:	0151      	lsls	r1, r2, #5
 8003672:	69fa      	ldr	r2, [r7, #28]
 8003674:	440a      	add	r2, r1
 8003676:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800367a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800367e:	6113      	str	r3, [r2, #16]
 8003680:	e036      	b.n	80036f0 <USB_EPStartXfer+0x3dc>
 8003682:	bf00      	nop
 8003684:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8003688:	68bb      	ldr	r3, [r7, #8]
 800368a:	695a      	ldr	r2, [r3, #20]
 800368c:	68bb      	ldr	r3, [r7, #8]
 800368e:	689b      	ldr	r3, [r3, #8]
 8003690:	4413      	add	r3, r2
 8003692:	1e5a      	subs	r2, r3, #1
 8003694:	68bb      	ldr	r3, [r7, #8]
 8003696:	689b      	ldr	r3, [r3, #8]
 8003698:	fbb2 f3f3 	udiv	r3, r2, r3
 800369c:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800369e:	69bb      	ldr	r3, [r7, #24]
 80036a0:	015a      	lsls	r2, r3, #5
 80036a2:	69fb      	ldr	r3, [r7, #28]
 80036a4:	4413      	add	r3, r2
 80036a6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80036aa:	691a      	ldr	r2, [r3, #16]
 80036ac:	8afb      	ldrh	r3, [r7, #22]
 80036ae:	04d9      	lsls	r1, r3, #19
 80036b0:	4b39      	ldr	r3, [pc, #228]	@ (8003798 <USB_EPStartXfer+0x484>)
 80036b2:	400b      	ands	r3, r1
 80036b4:	69b9      	ldr	r1, [r7, #24]
 80036b6:	0148      	lsls	r0, r1, #5
 80036b8:	69f9      	ldr	r1, [r7, #28]
 80036ba:	4401      	add	r1, r0
 80036bc:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80036c0:	4313      	orrs	r3, r2
 80036c2:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 80036c4:	69bb      	ldr	r3, [r7, #24]
 80036c6:	015a      	lsls	r2, r3, #5
 80036c8:	69fb      	ldr	r3, [r7, #28]
 80036ca:	4413      	add	r3, r2
 80036cc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80036d0:	691a      	ldr	r2, [r3, #16]
 80036d2:	68bb      	ldr	r3, [r7, #8]
 80036d4:	689b      	ldr	r3, [r3, #8]
 80036d6:	8af9      	ldrh	r1, [r7, #22]
 80036d8:	fb01 f303 	mul.w	r3, r1, r3
 80036dc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80036e0:	69b9      	ldr	r1, [r7, #24]
 80036e2:	0148      	lsls	r0, r1, #5
 80036e4:	69f9      	ldr	r1, [r7, #28]
 80036e6:	4401      	add	r1, r0
 80036e8:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80036ec:	4313      	orrs	r3, r2
 80036ee:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80036f0:	79fb      	ldrb	r3, [r7, #7]
 80036f2:	2b01      	cmp	r3, #1
 80036f4:	d10d      	bne.n	8003712 <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80036f6:	68bb      	ldr	r3, [r7, #8]
 80036f8:	68db      	ldr	r3, [r3, #12]
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d009      	beq.n	8003712 <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80036fe:	68bb      	ldr	r3, [r7, #8]
 8003700:	68d9      	ldr	r1, [r3, #12]
 8003702:	69bb      	ldr	r3, [r7, #24]
 8003704:	015a      	lsls	r2, r3, #5
 8003706:	69fb      	ldr	r3, [r7, #28]
 8003708:	4413      	add	r3, r2
 800370a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800370e:	460a      	mov	r2, r1
 8003710:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8003712:	68bb      	ldr	r3, [r7, #8]
 8003714:	78db      	ldrb	r3, [r3, #3]
 8003716:	2b01      	cmp	r3, #1
 8003718:	d128      	bne.n	800376c <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800371a:	69fb      	ldr	r3, [r7, #28]
 800371c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003720:	689b      	ldr	r3, [r3, #8]
 8003722:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003726:	2b00      	cmp	r3, #0
 8003728:	d110      	bne.n	800374c <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800372a:	69bb      	ldr	r3, [r7, #24]
 800372c:	015a      	lsls	r2, r3, #5
 800372e:	69fb      	ldr	r3, [r7, #28]
 8003730:	4413      	add	r3, r2
 8003732:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	69ba      	ldr	r2, [r7, #24]
 800373a:	0151      	lsls	r1, r2, #5
 800373c:	69fa      	ldr	r2, [r7, #28]
 800373e:	440a      	add	r2, r1
 8003740:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003744:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8003748:	6013      	str	r3, [r2, #0]
 800374a:	e00f      	b.n	800376c <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800374c:	69bb      	ldr	r3, [r7, #24]
 800374e:	015a      	lsls	r2, r3, #5
 8003750:	69fb      	ldr	r3, [r7, #28]
 8003752:	4413      	add	r3, r2
 8003754:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	69ba      	ldr	r2, [r7, #24]
 800375c:	0151      	lsls	r1, r2, #5
 800375e:	69fa      	ldr	r2, [r7, #28]
 8003760:	440a      	add	r2, r1
 8003762:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003766:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800376a:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800376c:	69bb      	ldr	r3, [r7, #24]
 800376e:	015a      	lsls	r2, r3, #5
 8003770:	69fb      	ldr	r3, [r7, #28]
 8003772:	4413      	add	r3, r2
 8003774:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	69ba      	ldr	r2, [r7, #24]
 800377c:	0151      	lsls	r1, r2, #5
 800377e:	69fa      	ldr	r2, [r7, #28]
 8003780:	440a      	add	r2, r1
 8003782:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003786:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800378a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800378c:	2300      	movs	r3, #0
}
 800378e:	4618      	mov	r0, r3
 8003790:	3720      	adds	r7, #32
 8003792:	46bd      	mov	sp, r7
 8003794:	bd80      	pop	{r7, pc}
 8003796:	bf00      	nop
 8003798:	1ff80000 	.word	0x1ff80000

0800379c <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800379c:	b480      	push	{r7}
 800379e:	b087      	sub	sp, #28
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	60f8      	str	r0, [r7, #12]
 80037a4:	60b9      	str	r1, [r7, #8]
 80037a6:	4613      	mov	r3, r2
 80037a8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 80037ae:	68bb      	ldr	r3, [r7, #8]
 80037b0:	781b      	ldrb	r3, [r3, #0]
 80037b2:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80037b4:	68bb      	ldr	r3, [r7, #8]
 80037b6:	785b      	ldrb	r3, [r3, #1]
 80037b8:	2b01      	cmp	r3, #1
 80037ba:	f040 80cd 	bne.w	8003958 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80037be:	68bb      	ldr	r3, [r7, #8]
 80037c0:	695b      	ldr	r3, [r3, #20]
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d132      	bne.n	800382c <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80037c6:	693b      	ldr	r3, [r7, #16]
 80037c8:	015a      	lsls	r2, r3, #5
 80037ca:	697b      	ldr	r3, [r7, #20]
 80037cc:	4413      	add	r3, r2
 80037ce:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80037d2:	691b      	ldr	r3, [r3, #16]
 80037d4:	693a      	ldr	r2, [r7, #16]
 80037d6:	0151      	lsls	r1, r2, #5
 80037d8:	697a      	ldr	r2, [r7, #20]
 80037da:	440a      	add	r2, r1
 80037dc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80037e0:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 80037e4:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 80037e8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80037ea:	693b      	ldr	r3, [r7, #16]
 80037ec:	015a      	lsls	r2, r3, #5
 80037ee:	697b      	ldr	r3, [r7, #20]
 80037f0:	4413      	add	r3, r2
 80037f2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80037f6:	691b      	ldr	r3, [r3, #16]
 80037f8:	693a      	ldr	r2, [r7, #16]
 80037fa:	0151      	lsls	r1, r2, #5
 80037fc:	697a      	ldr	r2, [r7, #20]
 80037fe:	440a      	add	r2, r1
 8003800:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003804:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8003808:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800380a:	693b      	ldr	r3, [r7, #16]
 800380c:	015a      	lsls	r2, r3, #5
 800380e:	697b      	ldr	r3, [r7, #20]
 8003810:	4413      	add	r3, r2
 8003812:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003816:	691b      	ldr	r3, [r3, #16]
 8003818:	693a      	ldr	r2, [r7, #16]
 800381a:	0151      	lsls	r1, r2, #5
 800381c:	697a      	ldr	r2, [r7, #20]
 800381e:	440a      	add	r2, r1
 8003820:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003824:	0cdb      	lsrs	r3, r3, #19
 8003826:	04db      	lsls	r3, r3, #19
 8003828:	6113      	str	r3, [r2, #16]
 800382a:	e04e      	b.n	80038ca <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800382c:	693b      	ldr	r3, [r7, #16]
 800382e:	015a      	lsls	r2, r3, #5
 8003830:	697b      	ldr	r3, [r7, #20]
 8003832:	4413      	add	r3, r2
 8003834:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003838:	691b      	ldr	r3, [r3, #16]
 800383a:	693a      	ldr	r2, [r7, #16]
 800383c:	0151      	lsls	r1, r2, #5
 800383e:	697a      	ldr	r2, [r7, #20]
 8003840:	440a      	add	r2, r1
 8003842:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003846:	0cdb      	lsrs	r3, r3, #19
 8003848:	04db      	lsls	r3, r3, #19
 800384a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800384c:	693b      	ldr	r3, [r7, #16]
 800384e:	015a      	lsls	r2, r3, #5
 8003850:	697b      	ldr	r3, [r7, #20]
 8003852:	4413      	add	r3, r2
 8003854:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003858:	691b      	ldr	r3, [r3, #16]
 800385a:	693a      	ldr	r2, [r7, #16]
 800385c:	0151      	lsls	r1, r2, #5
 800385e:	697a      	ldr	r2, [r7, #20]
 8003860:	440a      	add	r2, r1
 8003862:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003866:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800386a:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800386e:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8003870:	68bb      	ldr	r3, [r7, #8]
 8003872:	695a      	ldr	r2, [r3, #20]
 8003874:	68bb      	ldr	r3, [r7, #8]
 8003876:	689b      	ldr	r3, [r3, #8]
 8003878:	429a      	cmp	r2, r3
 800387a:	d903      	bls.n	8003884 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800387c:	68bb      	ldr	r3, [r7, #8]
 800387e:	689a      	ldr	r2, [r3, #8]
 8003880:	68bb      	ldr	r3, [r7, #8]
 8003882:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8003884:	693b      	ldr	r3, [r7, #16]
 8003886:	015a      	lsls	r2, r3, #5
 8003888:	697b      	ldr	r3, [r7, #20]
 800388a:	4413      	add	r3, r2
 800388c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003890:	691b      	ldr	r3, [r3, #16]
 8003892:	693a      	ldr	r2, [r7, #16]
 8003894:	0151      	lsls	r1, r2, #5
 8003896:	697a      	ldr	r2, [r7, #20]
 8003898:	440a      	add	r2, r1
 800389a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800389e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80038a2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80038a4:	693b      	ldr	r3, [r7, #16]
 80038a6:	015a      	lsls	r2, r3, #5
 80038a8:	697b      	ldr	r3, [r7, #20]
 80038aa:	4413      	add	r3, r2
 80038ac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80038b0:	691a      	ldr	r2, [r3, #16]
 80038b2:	68bb      	ldr	r3, [r7, #8]
 80038b4:	695b      	ldr	r3, [r3, #20]
 80038b6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80038ba:	6939      	ldr	r1, [r7, #16]
 80038bc:	0148      	lsls	r0, r1, #5
 80038be:	6979      	ldr	r1, [r7, #20]
 80038c0:	4401      	add	r1, r0
 80038c2:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80038c6:	4313      	orrs	r3, r2
 80038c8:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80038ca:	79fb      	ldrb	r3, [r7, #7]
 80038cc:	2b01      	cmp	r3, #1
 80038ce:	d11e      	bne.n	800390e <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80038d0:	68bb      	ldr	r3, [r7, #8]
 80038d2:	691b      	ldr	r3, [r3, #16]
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d009      	beq.n	80038ec <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80038d8:	693b      	ldr	r3, [r7, #16]
 80038da:	015a      	lsls	r2, r3, #5
 80038dc:	697b      	ldr	r3, [r7, #20]
 80038de:	4413      	add	r3, r2
 80038e0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80038e4:	461a      	mov	r2, r3
 80038e6:	68bb      	ldr	r3, [r7, #8]
 80038e8:	691b      	ldr	r3, [r3, #16]
 80038ea:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80038ec:	693b      	ldr	r3, [r7, #16]
 80038ee:	015a      	lsls	r2, r3, #5
 80038f0:	697b      	ldr	r3, [r7, #20]
 80038f2:	4413      	add	r3, r2
 80038f4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	693a      	ldr	r2, [r7, #16]
 80038fc:	0151      	lsls	r1, r2, #5
 80038fe:	697a      	ldr	r2, [r7, #20]
 8003900:	440a      	add	r2, r1
 8003902:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003906:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800390a:	6013      	str	r3, [r2, #0]
 800390c:	e092      	b.n	8003a34 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800390e:	693b      	ldr	r3, [r7, #16]
 8003910:	015a      	lsls	r2, r3, #5
 8003912:	697b      	ldr	r3, [r7, #20]
 8003914:	4413      	add	r3, r2
 8003916:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	693a      	ldr	r2, [r7, #16]
 800391e:	0151      	lsls	r1, r2, #5
 8003920:	697a      	ldr	r2, [r7, #20]
 8003922:	440a      	add	r2, r1
 8003924:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003928:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800392c:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800392e:	68bb      	ldr	r3, [r7, #8]
 8003930:	695b      	ldr	r3, [r3, #20]
 8003932:	2b00      	cmp	r3, #0
 8003934:	d07e      	beq.n	8003a34 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8003936:	697b      	ldr	r3, [r7, #20]
 8003938:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800393c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800393e:	68bb      	ldr	r3, [r7, #8]
 8003940:	781b      	ldrb	r3, [r3, #0]
 8003942:	f003 030f 	and.w	r3, r3, #15
 8003946:	2101      	movs	r1, #1
 8003948:	fa01 f303 	lsl.w	r3, r1, r3
 800394c:	6979      	ldr	r1, [r7, #20]
 800394e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003952:	4313      	orrs	r3, r2
 8003954:	634b      	str	r3, [r1, #52]	@ 0x34
 8003956:	e06d      	b.n	8003a34 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8003958:	693b      	ldr	r3, [r7, #16]
 800395a:	015a      	lsls	r2, r3, #5
 800395c:	697b      	ldr	r3, [r7, #20]
 800395e:	4413      	add	r3, r2
 8003960:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003964:	691b      	ldr	r3, [r3, #16]
 8003966:	693a      	ldr	r2, [r7, #16]
 8003968:	0151      	lsls	r1, r2, #5
 800396a:	697a      	ldr	r2, [r7, #20]
 800396c:	440a      	add	r2, r1
 800396e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003972:	0cdb      	lsrs	r3, r3, #19
 8003974:	04db      	lsls	r3, r3, #19
 8003976:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8003978:	693b      	ldr	r3, [r7, #16]
 800397a:	015a      	lsls	r2, r3, #5
 800397c:	697b      	ldr	r3, [r7, #20]
 800397e:	4413      	add	r3, r2
 8003980:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003984:	691b      	ldr	r3, [r3, #16]
 8003986:	693a      	ldr	r2, [r7, #16]
 8003988:	0151      	lsls	r1, r2, #5
 800398a:	697a      	ldr	r2, [r7, #20]
 800398c:	440a      	add	r2, r1
 800398e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003992:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8003996:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800399a:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800399c:	68bb      	ldr	r3, [r7, #8]
 800399e:	695b      	ldr	r3, [r3, #20]
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d003      	beq.n	80039ac <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 80039a4:	68bb      	ldr	r3, [r7, #8]
 80039a6:	689a      	ldr	r2, [r3, #8]
 80039a8:	68bb      	ldr	r3, [r7, #8]
 80039aa:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80039ac:	693b      	ldr	r3, [r7, #16]
 80039ae:	015a      	lsls	r2, r3, #5
 80039b0:	697b      	ldr	r3, [r7, #20]
 80039b2:	4413      	add	r3, r2
 80039b4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80039b8:	691b      	ldr	r3, [r3, #16]
 80039ba:	693a      	ldr	r2, [r7, #16]
 80039bc:	0151      	lsls	r1, r2, #5
 80039be:	697a      	ldr	r2, [r7, #20]
 80039c0:	440a      	add	r2, r1
 80039c2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80039c6:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80039ca:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 80039cc:	693b      	ldr	r3, [r7, #16]
 80039ce:	015a      	lsls	r2, r3, #5
 80039d0:	697b      	ldr	r3, [r7, #20]
 80039d2:	4413      	add	r3, r2
 80039d4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80039d8:	691a      	ldr	r2, [r3, #16]
 80039da:	68bb      	ldr	r3, [r7, #8]
 80039dc:	689b      	ldr	r3, [r3, #8]
 80039de:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80039e2:	6939      	ldr	r1, [r7, #16]
 80039e4:	0148      	lsls	r0, r1, #5
 80039e6:	6979      	ldr	r1, [r7, #20]
 80039e8:	4401      	add	r1, r0
 80039ea:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80039ee:	4313      	orrs	r3, r2
 80039f0:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 80039f2:	79fb      	ldrb	r3, [r7, #7]
 80039f4:	2b01      	cmp	r3, #1
 80039f6:	d10d      	bne.n	8003a14 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80039f8:	68bb      	ldr	r3, [r7, #8]
 80039fa:	68db      	ldr	r3, [r3, #12]
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d009      	beq.n	8003a14 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8003a00:	68bb      	ldr	r3, [r7, #8]
 8003a02:	68d9      	ldr	r1, [r3, #12]
 8003a04:	693b      	ldr	r3, [r7, #16]
 8003a06:	015a      	lsls	r2, r3, #5
 8003a08:	697b      	ldr	r3, [r7, #20]
 8003a0a:	4413      	add	r3, r2
 8003a0c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003a10:	460a      	mov	r2, r1
 8003a12:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8003a14:	693b      	ldr	r3, [r7, #16]
 8003a16:	015a      	lsls	r2, r3, #5
 8003a18:	697b      	ldr	r3, [r7, #20]
 8003a1a:	4413      	add	r3, r2
 8003a1c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	693a      	ldr	r2, [r7, #16]
 8003a24:	0151      	lsls	r1, r2, #5
 8003a26:	697a      	ldr	r2, [r7, #20]
 8003a28:	440a      	add	r2, r1
 8003a2a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003a2e:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8003a32:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8003a34:	2300      	movs	r3, #0
}
 8003a36:	4618      	mov	r0, r3
 8003a38:	371c      	adds	r7, #28
 8003a3a:	46bd      	mov	sp, r7
 8003a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a40:	4770      	bx	lr

08003a42 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8003a42:	b480      	push	{r7}
 8003a44:	b089      	sub	sp, #36	@ 0x24
 8003a46:	af00      	add	r7, sp, #0
 8003a48:	60f8      	str	r0, [r7, #12]
 8003a4a:	60b9      	str	r1, [r7, #8]
 8003a4c:	4611      	mov	r1, r2
 8003a4e:	461a      	mov	r2, r3
 8003a50:	460b      	mov	r3, r1
 8003a52:	71fb      	strb	r3, [r7, #7]
 8003a54:	4613      	mov	r3, r2
 8003a56:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8003a5c:	68bb      	ldr	r3, [r7, #8]
 8003a5e:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8003a60:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d123      	bne.n	8003ab0 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8003a68:	88bb      	ldrh	r3, [r7, #4]
 8003a6a:	3303      	adds	r3, #3
 8003a6c:	089b      	lsrs	r3, r3, #2
 8003a6e:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8003a70:	2300      	movs	r3, #0
 8003a72:	61bb      	str	r3, [r7, #24]
 8003a74:	e018      	b.n	8003aa8 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8003a76:	79fb      	ldrb	r3, [r7, #7]
 8003a78:	031a      	lsls	r2, r3, #12
 8003a7a:	697b      	ldr	r3, [r7, #20]
 8003a7c:	4413      	add	r3, r2
 8003a7e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003a82:	461a      	mov	r2, r3
 8003a84:	69fb      	ldr	r3, [r7, #28]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	6013      	str	r3, [r2, #0]
      pSrc++;
 8003a8a:	69fb      	ldr	r3, [r7, #28]
 8003a8c:	3301      	adds	r3, #1
 8003a8e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8003a90:	69fb      	ldr	r3, [r7, #28]
 8003a92:	3301      	adds	r3, #1
 8003a94:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8003a96:	69fb      	ldr	r3, [r7, #28]
 8003a98:	3301      	adds	r3, #1
 8003a9a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8003a9c:	69fb      	ldr	r3, [r7, #28]
 8003a9e:	3301      	adds	r3, #1
 8003aa0:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8003aa2:	69bb      	ldr	r3, [r7, #24]
 8003aa4:	3301      	adds	r3, #1
 8003aa6:	61bb      	str	r3, [r7, #24]
 8003aa8:	69ba      	ldr	r2, [r7, #24]
 8003aaa:	693b      	ldr	r3, [r7, #16]
 8003aac:	429a      	cmp	r2, r3
 8003aae:	d3e2      	bcc.n	8003a76 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8003ab0:	2300      	movs	r3, #0
}
 8003ab2:	4618      	mov	r0, r3
 8003ab4:	3724      	adds	r7, #36	@ 0x24
 8003ab6:	46bd      	mov	sp, r7
 8003ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003abc:	4770      	bx	lr

08003abe <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8003abe:	b480      	push	{r7}
 8003ac0:	b08b      	sub	sp, #44	@ 0x2c
 8003ac2:	af00      	add	r7, sp, #0
 8003ac4:	60f8      	str	r0, [r7, #12]
 8003ac6:	60b9      	str	r1, [r7, #8]
 8003ac8:	4613      	mov	r3, r2
 8003aca:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8003ad0:	68bb      	ldr	r3, [r7, #8]
 8003ad2:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8003ad4:	88fb      	ldrh	r3, [r7, #6]
 8003ad6:	089b      	lsrs	r3, r3, #2
 8003ad8:	b29b      	uxth	r3, r3
 8003ada:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8003adc:	88fb      	ldrh	r3, [r7, #6]
 8003ade:	f003 0303 	and.w	r3, r3, #3
 8003ae2:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8003ae4:	2300      	movs	r3, #0
 8003ae6:	623b      	str	r3, [r7, #32]
 8003ae8:	e014      	b.n	8003b14 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8003aea:	69bb      	ldr	r3, [r7, #24]
 8003aec:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003af0:	681a      	ldr	r2, [r3, #0]
 8003af2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003af4:	601a      	str	r2, [r3, #0]
    pDest++;
 8003af6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003af8:	3301      	adds	r3, #1
 8003afa:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8003afc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003afe:	3301      	adds	r3, #1
 8003b00:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8003b02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b04:	3301      	adds	r3, #1
 8003b06:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8003b08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b0a:	3301      	adds	r3, #1
 8003b0c:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8003b0e:	6a3b      	ldr	r3, [r7, #32]
 8003b10:	3301      	adds	r3, #1
 8003b12:	623b      	str	r3, [r7, #32]
 8003b14:	6a3a      	ldr	r2, [r7, #32]
 8003b16:	697b      	ldr	r3, [r7, #20]
 8003b18:	429a      	cmp	r2, r3
 8003b1a:	d3e6      	bcc.n	8003aea <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8003b1c:	8bfb      	ldrh	r3, [r7, #30]
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d01e      	beq.n	8003b60 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8003b22:	2300      	movs	r3, #0
 8003b24:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8003b26:	69bb      	ldr	r3, [r7, #24]
 8003b28:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003b2c:	461a      	mov	r2, r3
 8003b2e:	f107 0310 	add.w	r3, r7, #16
 8003b32:	6812      	ldr	r2, [r2, #0]
 8003b34:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8003b36:	693a      	ldr	r2, [r7, #16]
 8003b38:	6a3b      	ldr	r3, [r7, #32]
 8003b3a:	b2db      	uxtb	r3, r3
 8003b3c:	00db      	lsls	r3, r3, #3
 8003b3e:	fa22 f303 	lsr.w	r3, r2, r3
 8003b42:	b2da      	uxtb	r2, r3
 8003b44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b46:	701a      	strb	r2, [r3, #0]
      i++;
 8003b48:	6a3b      	ldr	r3, [r7, #32]
 8003b4a:	3301      	adds	r3, #1
 8003b4c:	623b      	str	r3, [r7, #32]
      pDest++;
 8003b4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b50:	3301      	adds	r3, #1
 8003b52:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8003b54:	8bfb      	ldrh	r3, [r7, #30]
 8003b56:	3b01      	subs	r3, #1
 8003b58:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8003b5a:	8bfb      	ldrh	r3, [r7, #30]
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d1ea      	bne.n	8003b36 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8003b60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8003b62:	4618      	mov	r0, r3
 8003b64:	372c      	adds	r7, #44	@ 0x2c
 8003b66:	46bd      	mov	sp, r7
 8003b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b6c:	4770      	bx	lr

08003b6e <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003b6e:	b480      	push	{r7}
 8003b70:	b085      	sub	sp, #20
 8003b72:	af00      	add	r7, sp, #0
 8003b74:	6078      	str	r0, [r7, #4]
 8003b76:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003b7c:	683b      	ldr	r3, [r7, #0]
 8003b7e:	781b      	ldrb	r3, [r3, #0]
 8003b80:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8003b82:	683b      	ldr	r3, [r7, #0]
 8003b84:	785b      	ldrb	r3, [r3, #1]
 8003b86:	2b01      	cmp	r3, #1
 8003b88:	d12c      	bne.n	8003be4 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8003b8a:	68bb      	ldr	r3, [r7, #8]
 8003b8c:	015a      	lsls	r2, r3, #5
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	4413      	add	r3, r2
 8003b92:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	db12      	blt.n	8003bc2 <USB_EPSetStall+0x54>
 8003b9c:	68bb      	ldr	r3, [r7, #8]
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d00f      	beq.n	8003bc2 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8003ba2:	68bb      	ldr	r3, [r7, #8]
 8003ba4:	015a      	lsls	r2, r3, #5
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	4413      	add	r3, r2
 8003baa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	68ba      	ldr	r2, [r7, #8]
 8003bb2:	0151      	lsls	r1, r2, #5
 8003bb4:	68fa      	ldr	r2, [r7, #12]
 8003bb6:	440a      	add	r2, r1
 8003bb8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003bbc:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003bc0:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8003bc2:	68bb      	ldr	r3, [r7, #8]
 8003bc4:	015a      	lsls	r2, r3, #5
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	4413      	add	r3, r2
 8003bca:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	68ba      	ldr	r2, [r7, #8]
 8003bd2:	0151      	lsls	r1, r2, #5
 8003bd4:	68fa      	ldr	r2, [r7, #12]
 8003bd6:	440a      	add	r2, r1
 8003bd8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003bdc:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8003be0:	6013      	str	r3, [r2, #0]
 8003be2:	e02b      	b.n	8003c3c <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8003be4:	68bb      	ldr	r3, [r7, #8]
 8003be6:	015a      	lsls	r2, r3, #5
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	4413      	add	r3, r2
 8003bec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	db12      	blt.n	8003c1c <USB_EPSetStall+0xae>
 8003bf6:	68bb      	ldr	r3, [r7, #8]
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d00f      	beq.n	8003c1c <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8003bfc:	68bb      	ldr	r3, [r7, #8]
 8003bfe:	015a      	lsls	r2, r3, #5
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	4413      	add	r3, r2
 8003c04:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	68ba      	ldr	r2, [r7, #8]
 8003c0c:	0151      	lsls	r1, r2, #5
 8003c0e:	68fa      	ldr	r2, [r7, #12]
 8003c10:	440a      	add	r2, r1
 8003c12:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003c16:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003c1a:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8003c1c:	68bb      	ldr	r3, [r7, #8]
 8003c1e:	015a      	lsls	r2, r3, #5
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	4413      	add	r3, r2
 8003c24:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	68ba      	ldr	r2, [r7, #8]
 8003c2c:	0151      	lsls	r1, r2, #5
 8003c2e:	68fa      	ldr	r2, [r7, #12]
 8003c30:	440a      	add	r2, r1
 8003c32:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003c36:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8003c3a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8003c3c:	2300      	movs	r3, #0
}
 8003c3e:	4618      	mov	r0, r3
 8003c40:	3714      	adds	r7, #20
 8003c42:	46bd      	mov	sp, r7
 8003c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c48:	4770      	bx	lr

08003c4a <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003c4a:	b480      	push	{r7}
 8003c4c:	b085      	sub	sp, #20
 8003c4e:	af00      	add	r7, sp, #0
 8003c50:	6078      	str	r0, [r7, #4]
 8003c52:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003c58:	683b      	ldr	r3, [r7, #0]
 8003c5a:	781b      	ldrb	r3, [r3, #0]
 8003c5c:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8003c5e:	683b      	ldr	r3, [r7, #0]
 8003c60:	785b      	ldrb	r3, [r3, #1]
 8003c62:	2b01      	cmp	r3, #1
 8003c64:	d128      	bne.n	8003cb8 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003c66:	68bb      	ldr	r3, [r7, #8]
 8003c68:	015a      	lsls	r2, r3, #5
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	4413      	add	r3, r2
 8003c6e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	68ba      	ldr	r2, [r7, #8]
 8003c76:	0151      	lsls	r1, r2, #5
 8003c78:	68fa      	ldr	r2, [r7, #12]
 8003c7a:	440a      	add	r2, r1
 8003c7c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003c80:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8003c84:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8003c86:	683b      	ldr	r3, [r7, #0]
 8003c88:	78db      	ldrb	r3, [r3, #3]
 8003c8a:	2b03      	cmp	r3, #3
 8003c8c:	d003      	beq.n	8003c96 <USB_EPClearStall+0x4c>
 8003c8e:	683b      	ldr	r3, [r7, #0]
 8003c90:	78db      	ldrb	r3, [r3, #3]
 8003c92:	2b02      	cmp	r3, #2
 8003c94:	d138      	bne.n	8003d08 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8003c96:	68bb      	ldr	r3, [r7, #8]
 8003c98:	015a      	lsls	r2, r3, #5
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	4413      	add	r3, r2
 8003c9e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	68ba      	ldr	r2, [r7, #8]
 8003ca6:	0151      	lsls	r1, r2, #5
 8003ca8:	68fa      	ldr	r2, [r7, #12]
 8003caa:	440a      	add	r2, r1
 8003cac:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003cb0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003cb4:	6013      	str	r3, [r2, #0]
 8003cb6:	e027      	b.n	8003d08 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003cb8:	68bb      	ldr	r3, [r7, #8]
 8003cba:	015a      	lsls	r2, r3, #5
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	4413      	add	r3, r2
 8003cc0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	68ba      	ldr	r2, [r7, #8]
 8003cc8:	0151      	lsls	r1, r2, #5
 8003cca:	68fa      	ldr	r2, [r7, #12]
 8003ccc:	440a      	add	r2, r1
 8003cce:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003cd2:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8003cd6:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8003cd8:	683b      	ldr	r3, [r7, #0]
 8003cda:	78db      	ldrb	r3, [r3, #3]
 8003cdc:	2b03      	cmp	r3, #3
 8003cde:	d003      	beq.n	8003ce8 <USB_EPClearStall+0x9e>
 8003ce0:	683b      	ldr	r3, [r7, #0]
 8003ce2:	78db      	ldrb	r3, [r3, #3]
 8003ce4:	2b02      	cmp	r3, #2
 8003ce6:	d10f      	bne.n	8003d08 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8003ce8:	68bb      	ldr	r3, [r7, #8]
 8003cea:	015a      	lsls	r2, r3, #5
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	4413      	add	r3, r2
 8003cf0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	68ba      	ldr	r2, [r7, #8]
 8003cf8:	0151      	lsls	r1, r2, #5
 8003cfa:	68fa      	ldr	r2, [r7, #12]
 8003cfc:	440a      	add	r2, r1
 8003cfe:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003d02:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003d06:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8003d08:	2300      	movs	r3, #0
}
 8003d0a:	4618      	mov	r0, r3
 8003d0c:	3714      	adds	r7, #20
 8003d0e:	46bd      	mov	sp, r7
 8003d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d14:	4770      	bx	lr

08003d16 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8003d16:	b480      	push	{r7}
 8003d18:	b085      	sub	sp, #20
 8003d1a:	af00      	add	r7, sp, #0
 8003d1c:	6078      	str	r0, [r7, #4]
 8003d1e:	460b      	mov	r3, r1
 8003d20:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	68fa      	ldr	r2, [r7, #12]
 8003d30:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003d34:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8003d38:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003d40:	681a      	ldr	r2, [r3, #0]
 8003d42:	78fb      	ldrb	r3, [r7, #3]
 8003d44:	011b      	lsls	r3, r3, #4
 8003d46:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8003d4a:	68f9      	ldr	r1, [r7, #12]
 8003d4c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003d50:	4313      	orrs	r3, r2
 8003d52:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8003d54:	2300      	movs	r3, #0
}
 8003d56:	4618      	mov	r0, r3
 8003d58:	3714      	adds	r7, #20
 8003d5a:	46bd      	mov	sp, r7
 8003d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d60:	4770      	bx	lr

08003d62 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8003d62:	b480      	push	{r7}
 8003d64:	b085      	sub	sp, #20
 8003d66:	af00      	add	r7, sp, #0
 8003d68:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	68fa      	ldr	r2, [r7, #12]
 8003d78:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8003d7c:	f023 0303 	bic.w	r3, r3, #3
 8003d80:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003d88:	685b      	ldr	r3, [r3, #4]
 8003d8a:	68fa      	ldr	r2, [r7, #12]
 8003d8c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003d90:	f023 0302 	bic.w	r3, r3, #2
 8003d94:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8003d96:	2300      	movs	r3, #0
}
 8003d98:	4618      	mov	r0, r3
 8003d9a:	3714      	adds	r7, #20
 8003d9c:	46bd      	mov	sp, r7
 8003d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da2:	4770      	bx	lr

08003da4 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8003da4:	b480      	push	{r7}
 8003da6:	b085      	sub	sp, #20
 8003da8:	af00      	add	r7, sp, #0
 8003daa:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	68fa      	ldr	r2, [r7, #12]
 8003dba:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8003dbe:	f023 0303 	bic.w	r3, r3, #3
 8003dc2:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003dca:	685b      	ldr	r3, [r3, #4]
 8003dcc:	68fa      	ldr	r2, [r7, #12]
 8003dce:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003dd2:	f043 0302 	orr.w	r3, r3, #2
 8003dd6:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8003dd8:	2300      	movs	r3, #0
}
 8003dda:	4618      	mov	r0, r3
 8003ddc:	3714      	adds	r7, #20
 8003dde:	46bd      	mov	sp, r7
 8003de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de4:	4770      	bx	lr

08003de6 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8003de6:	b480      	push	{r7}
 8003de8:	b085      	sub	sp, #20
 8003dea:	af00      	add	r7, sp, #0
 8003dec:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	695b      	ldr	r3, [r3, #20]
 8003df2:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	699b      	ldr	r3, [r3, #24]
 8003df8:	68fa      	ldr	r2, [r7, #12]
 8003dfa:	4013      	ands	r3, r2
 8003dfc:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8003dfe:	68fb      	ldr	r3, [r7, #12]
}
 8003e00:	4618      	mov	r0, r3
 8003e02:	3714      	adds	r7, #20
 8003e04:	46bd      	mov	sp, r7
 8003e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e0a:	4770      	bx	lr

08003e0c <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8003e0c:	b480      	push	{r7}
 8003e0e:	b085      	sub	sp, #20
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003e1e:	699b      	ldr	r3, [r3, #24]
 8003e20:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003e28:	69db      	ldr	r3, [r3, #28]
 8003e2a:	68ba      	ldr	r2, [r7, #8]
 8003e2c:	4013      	ands	r3, r2
 8003e2e:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8003e30:	68bb      	ldr	r3, [r7, #8]
 8003e32:	0c1b      	lsrs	r3, r3, #16
}
 8003e34:	4618      	mov	r0, r3
 8003e36:	3714      	adds	r7, #20
 8003e38:	46bd      	mov	sp, r7
 8003e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e3e:	4770      	bx	lr

08003e40 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8003e40:	b480      	push	{r7}
 8003e42:	b085      	sub	sp, #20
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003e52:	699b      	ldr	r3, [r3, #24]
 8003e54:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003e5c:	69db      	ldr	r3, [r3, #28]
 8003e5e:	68ba      	ldr	r2, [r7, #8]
 8003e60:	4013      	ands	r3, r2
 8003e62:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8003e64:	68bb      	ldr	r3, [r7, #8]
 8003e66:	b29b      	uxth	r3, r3
}
 8003e68:	4618      	mov	r0, r3
 8003e6a:	3714      	adds	r7, #20
 8003e6c:	46bd      	mov	sp, r7
 8003e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e72:	4770      	bx	lr

08003e74 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8003e74:	b480      	push	{r7}
 8003e76:	b085      	sub	sp, #20
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	6078      	str	r0, [r7, #4]
 8003e7c:	460b      	mov	r3, r1
 8003e7e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8003e84:	78fb      	ldrb	r3, [r7, #3]
 8003e86:	015a      	lsls	r2, r3, #5
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	4413      	add	r3, r2
 8003e8c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003e90:	689b      	ldr	r3, [r3, #8]
 8003e92:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003e9a:	695b      	ldr	r3, [r3, #20]
 8003e9c:	68ba      	ldr	r2, [r7, #8]
 8003e9e:	4013      	ands	r3, r2
 8003ea0:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8003ea2:	68bb      	ldr	r3, [r7, #8]
}
 8003ea4:	4618      	mov	r0, r3
 8003ea6:	3714      	adds	r7, #20
 8003ea8:	46bd      	mov	sp, r7
 8003eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eae:	4770      	bx	lr

08003eb0 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8003eb0:	b480      	push	{r7}
 8003eb2:	b087      	sub	sp, #28
 8003eb4:	af00      	add	r7, sp, #0
 8003eb6:	6078      	str	r0, [r7, #4]
 8003eb8:	460b      	mov	r3, r1
 8003eba:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8003ec0:	697b      	ldr	r3, [r7, #20]
 8003ec2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003ec6:	691b      	ldr	r3, [r3, #16]
 8003ec8:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8003eca:	697b      	ldr	r3, [r7, #20]
 8003ecc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003ed0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003ed2:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8003ed4:	78fb      	ldrb	r3, [r7, #3]
 8003ed6:	f003 030f 	and.w	r3, r3, #15
 8003eda:	68fa      	ldr	r2, [r7, #12]
 8003edc:	fa22 f303 	lsr.w	r3, r2, r3
 8003ee0:	01db      	lsls	r3, r3, #7
 8003ee2:	b2db      	uxtb	r3, r3
 8003ee4:	693a      	ldr	r2, [r7, #16]
 8003ee6:	4313      	orrs	r3, r2
 8003ee8:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8003eea:	78fb      	ldrb	r3, [r7, #3]
 8003eec:	015a      	lsls	r2, r3, #5
 8003eee:	697b      	ldr	r3, [r7, #20]
 8003ef0:	4413      	add	r3, r2
 8003ef2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003ef6:	689b      	ldr	r3, [r3, #8]
 8003ef8:	693a      	ldr	r2, [r7, #16]
 8003efa:	4013      	ands	r3, r2
 8003efc:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8003efe:	68bb      	ldr	r3, [r7, #8]
}
 8003f00:	4618      	mov	r0, r3
 8003f02:	371c      	adds	r7, #28
 8003f04:	46bd      	mov	sp, r7
 8003f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f0a:	4770      	bx	lr

08003f0c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8003f0c:	b480      	push	{r7}
 8003f0e:	b083      	sub	sp, #12
 8003f10:	af00      	add	r7, sp, #0
 8003f12:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	695b      	ldr	r3, [r3, #20]
 8003f18:	f003 0301 	and.w	r3, r3, #1
}
 8003f1c:	4618      	mov	r0, r3
 8003f1e:	370c      	adds	r7, #12
 8003f20:	46bd      	mov	sp, r7
 8003f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f26:	4770      	bx	lr

08003f28 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8003f28:	b480      	push	{r7}
 8003f2a:	b085      	sub	sp, #20
 8003f2c:	af00      	add	r7, sp, #0
 8003f2e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	68fa      	ldr	r2, [r7, #12]
 8003f3e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003f42:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8003f46:	f023 0307 	bic.w	r3, r3, #7
 8003f4a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003f52:	685b      	ldr	r3, [r3, #4]
 8003f54:	68fa      	ldr	r2, [r7, #12]
 8003f56:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003f5a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003f5e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8003f60:	2300      	movs	r3, #0
}
 8003f62:	4618      	mov	r0, r3
 8003f64:	3714      	adds	r7, #20
 8003f66:	46bd      	mov	sp, r7
 8003f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f6c:	4770      	bx	lr
	...

08003f70 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8003f70:	b480      	push	{r7}
 8003f72:	b087      	sub	sp, #28
 8003f74:	af00      	add	r7, sp, #0
 8003f76:	60f8      	str	r0, [r7, #12]
 8003f78:	460b      	mov	r3, r1
 8003f7a:	607a      	str	r2, [r7, #4]
 8003f7c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	333c      	adds	r3, #60	@ 0x3c
 8003f86:	3304      	adds	r3, #4
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8003f8c:	693b      	ldr	r3, [r7, #16]
 8003f8e:	4a26      	ldr	r2, [pc, #152]	@ (8004028 <USB_EP0_OutStart+0xb8>)
 8003f90:	4293      	cmp	r3, r2
 8003f92:	d90a      	bls.n	8003faa <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003f94:	697b      	ldr	r3, [r7, #20]
 8003f96:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003fa0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003fa4:	d101      	bne.n	8003faa <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8003fa6:	2300      	movs	r3, #0
 8003fa8:	e037      	b.n	800401a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8003faa:	697b      	ldr	r3, [r7, #20]
 8003fac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003fb0:	461a      	mov	r2, r3
 8003fb2:	2300      	movs	r3, #0
 8003fb4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8003fb6:	697b      	ldr	r3, [r7, #20]
 8003fb8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003fbc:	691b      	ldr	r3, [r3, #16]
 8003fbe:	697a      	ldr	r2, [r7, #20]
 8003fc0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003fc4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8003fc8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8003fca:	697b      	ldr	r3, [r7, #20]
 8003fcc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003fd0:	691b      	ldr	r3, [r3, #16]
 8003fd2:	697a      	ldr	r2, [r7, #20]
 8003fd4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003fd8:	f043 0318 	orr.w	r3, r3, #24
 8003fdc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8003fde:	697b      	ldr	r3, [r7, #20]
 8003fe0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003fe4:	691b      	ldr	r3, [r3, #16]
 8003fe6:	697a      	ldr	r2, [r7, #20]
 8003fe8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003fec:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8003ff0:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8003ff2:	7afb      	ldrb	r3, [r7, #11]
 8003ff4:	2b01      	cmp	r3, #1
 8003ff6:	d10f      	bne.n	8004018 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8003ff8:	697b      	ldr	r3, [r7, #20]
 8003ffa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003ffe:	461a      	mov	r2, r3
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8004004:	697b      	ldr	r3, [r7, #20]
 8004006:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	697a      	ldr	r2, [r7, #20]
 800400e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004012:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 8004016:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004018:	2300      	movs	r3, #0
}
 800401a:	4618      	mov	r0, r3
 800401c:	371c      	adds	r7, #28
 800401e:	46bd      	mov	sp, r7
 8004020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004024:	4770      	bx	lr
 8004026:	bf00      	nop
 8004028:	4f54300a 	.word	0x4f54300a

0800402c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800402c:	b480      	push	{r7}
 800402e:	b085      	sub	sp, #20
 8004030:	af00      	add	r7, sp, #0
 8004032:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004034:	2300      	movs	r3, #0
 8004036:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	3301      	adds	r3, #1
 800403c:	60fb      	str	r3, [r7, #12]
 800403e:	4a13      	ldr	r2, [pc, #76]	@ (800408c <USB_CoreReset+0x60>)
 8004040:	4293      	cmp	r3, r2
 8004042:	d901      	bls.n	8004048 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 8004044:	2303      	movs	r3, #3
 8004046:	e01a      	b.n	800407e <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	691b      	ldr	r3, [r3, #16]
 800404c:	2b00      	cmp	r3, #0
 800404e:	daf3      	bge.n	8004038 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004050:	2300      	movs	r3, #0
 8004052:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	691b      	ldr	r3, [r3, #16]
 8004058:	f043 0201 	orr.w	r2, r3, #1
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	3301      	adds	r3, #1
 8004064:	60fb      	str	r3, [r7, #12]
 8004066:	4a09      	ldr	r2, [pc, #36]	@ (800408c <USB_CoreReset+0x60>)
 8004068:	4293      	cmp	r3, r2
 800406a:	d901      	bls.n	8004070 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 800406c:	2303      	movs	r3, #3
 800406e:	e006      	b.n	800407e <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	691b      	ldr	r3, [r3, #16]
 8004074:	f003 0301 	and.w	r3, r3, #1
 8004078:	2b01      	cmp	r3, #1
 800407a:	d0f1      	beq.n	8004060 <USB_CoreReset+0x34>

  return HAL_OK;
 800407c:	2300      	movs	r3, #0
}
 800407e:	4618      	mov	r0, r3
 8004080:	3714      	adds	r7, #20
 8004082:	46bd      	mov	sp, r7
 8004084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004088:	4770      	bx	lr
 800408a:	bf00      	nop
 800408c:	00030d40 	.word	0x00030d40

08004090 <USBD_MSC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004090:	b580      	push	{r7, lr}
 8004092:	b084      	sub	sp, #16
 8004094:	af00      	add	r7, sp, #0
 8004096:	6078      	str	r0, [r7, #4]
 8004098:	460b      	mov	r3, r1
 800409a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_MSC_BOT_HandleTypeDef *hmsc;

  hmsc = USBD_malloc(sizeof(USBD_MSC_BOT_HandleTypeDef));
 800409c:	f44f 701d 	mov.w	r0, #628	@ 0x274
 80040a0:	f003 fbb0 	bl	8007804 <USBD_static_malloc>
 80040a4:	60f8      	str	r0, [r7, #12]

  if (hmsc == NULL)
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d105      	bne.n	80040b8 <USBD_MSC_Init+0x28>
  {
    pdev->pClassData = NULL;
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	2200      	movs	r2, #0
 80040b0:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
    return (uint8_t)USBD_EMEM;
 80040b4:	2302      	movs	r3, #2
 80040b6:	e034      	b.n	8004122 <USBD_MSC_Init+0x92>
  }

  pdev->pClassData = (void *)hmsc;
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	68fa      	ldr	r2, [r7, #12]
 80040bc:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	7c1b      	ldrb	r3, [r3, #16]
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d115      	bne.n	80040f4 <USBD_MSC_Init+0x64>
  {
    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, MSC_EPOUT_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 80040c8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80040cc:	2202      	movs	r2, #2
 80040ce:	2101      	movs	r1, #1
 80040d0:	6878      	ldr	r0, [r7, #4]
 80040d2:	f003 fa54 	bl	800757e <USBD_LL_OpenEP>
    pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 1U;
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	2201      	movs	r2, #1
 80040da:	f8a3 2178 	strh.w	r2, [r3, #376]	@ 0x178

    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, MSC_EPIN_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 80040de:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80040e2:	2202      	movs	r2, #2
 80040e4:	2181      	movs	r1, #129	@ 0x81
 80040e6:	6878      	ldr	r0, [r7, #4]
 80040e8:	f003 fa49 	bl	800757e <USBD_LL_OpenEP>
    pdev->ep_in[MSC_EPIN_ADDR & 0xFU].is_used = 1U;
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	2201      	movs	r2, #1
 80040f0:	871a      	strh	r2, [r3, #56]	@ 0x38
 80040f2:	e012      	b.n	800411a <USBD_MSC_Init+0x8a>
  }
  else
  {
    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, MSC_EPOUT_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 80040f4:	2340      	movs	r3, #64	@ 0x40
 80040f6:	2202      	movs	r2, #2
 80040f8:	2101      	movs	r1, #1
 80040fa:	6878      	ldr	r0, [r7, #4]
 80040fc:	f003 fa3f 	bl	800757e <USBD_LL_OpenEP>
    pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 1U;
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	2201      	movs	r2, #1
 8004104:	f8a3 2178 	strh.w	r2, [r3, #376]	@ 0x178

    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, MSC_EPIN_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 8004108:	2340      	movs	r3, #64	@ 0x40
 800410a:	2202      	movs	r2, #2
 800410c:	2181      	movs	r1, #129	@ 0x81
 800410e:	6878      	ldr	r0, [r7, #4]
 8004110:	f003 fa35 	bl	800757e <USBD_LL_OpenEP>
    pdev->ep_in[MSC_EPIN_ADDR & 0xFU].is_used = 1U;
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	2201      	movs	r2, #1
 8004118:	871a      	strh	r2, [r3, #56]	@ 0x38
  }

  /* Init the BOT  layer */
  MSC_BOT_Init(pdev);
 800411a:	6878      	ldr	r0, [r7, #4]
 800411c:	f000 f999 	bl	8004452 <MSC_BOT_Init>

  return (uint8_t)USBD_OK;
 8004120:	2300      	movs	r3, #0
}
 8004122:	4618      	mov	r0, r3
 8004124:	3710      	adds	r7, #16
 8004126:	46bd      	mov	sp, r7
 8004128:	bd80      	pop	{r7, pc}

0800412a <USBD_MSC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800412a:	b580      	push	{r7, lr}
 800412c:	b082      	sub	sp, #8
 800412e:	af00      	add	r7, sp, #0
 8004130:	6078      	str	r0, [r7, #4]
 8004132:	460b      	mov	r3, r1
 8004134:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close MSC EPs */
  (void)USBD_LL_CloseEP(pdev, MSC_EPOUT_ADDR);
 8004136:	2101      	movs	r1, #1
 8004138:	6878      	ldr	r0, [r7, #4]
 800413a:	f003 fa46 	bl	80075ca <USBD_LL_CloseEP>
  pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 0U;
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	2200      	movs	r2, #0
 8004142:	f8a3 2178 	strh.w	r2, [r3, #376]	@ 0x178

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, MSC_EPIN_ADDR);
 8004146:	2181      	movs	r1, #129	@ 0x81
 8004148:	6878      	ldr	r0, [r7, #4]
 800414a:	f003 fa3e 	bl	80075ca <USBD_LL_CloseEP>
  pdev->ep_in[MSC_EPIN_ADDR & 0xFU].is_used = 0U;
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	2200      	movs	r2, #0
 8004152:	871a      	strh	r2, [r3, #56]	@ 0x38

  /* Free MSC Class Resources */
  if (pdev->pClassData != NULL)
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800415a:	2b00      	cmp	r3, #0
 800415c:	d00c      	beq.n	8004178 <USBD_MSC_DeInit+0x4e>
  {
    /* De-Init the BOT layer */
    MSC_BOT_DeInit(pdev);
 800415e:	6878      	ldr	r0, [r7, #4]
 8004160:	f000 f9d5 	bl	800450e <MSC_BOT_DeInit>

    (void)USBD_free(pdev->pClassData);
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800416a:	4618      	mov	r0, r3
 800416c:	f003 fb58 	bl	8007820 <USBD_static_free>
    pdev->pClassData = NULL;
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	2200      	movs	r2, #0
 8004174:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8004178:	2300      	movs	r3, #0
}
 800417a:	4618      	mov	r0, r3
 800417c:	3708      	adds	r7, #8
 800417e:	46bd      	mov	sp, r7
 8004180:	bd80      	pop	{r7, pc}
	...

08004184 <USBD_MSC_Setup>:
  * @param  pdev: device instance
  * @param  req: USB request
  * @retval status
  */
uint8_t USBD_MSC_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8004184:	b580      	push	{r7, lr}
 8004186:	b086      	sub	sp, #24
 8004188:	af00      	add	r7, sp, #0
 800418a:	6078      	str	r0, [r7, #4]
 800418c:	6039      	str	r1, [r7, #0]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8004194:	613b      	str	r3, [r7, #16]
  USBD_StatusTypeDef ret = USBD_OK;
 8004196:	2300      	movs	r3, #0
 8004198:	75fb      	strb	r3, [r7, #23]
  uint16_t status_info = 0U;
 800419a:	2300      	movs	r3, #0
 800419c:	81fb      	strh	r3, [r7, #14]

  if (hmsc == NULL)
 800419e:	693b      	ldr	r3, [r7, #16]
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d101      	bne.n	80041a8 <USBD_MSC_Setup+0x24>
  {
    return (uint8_t)USBD_FAIL;
 80041a4:	2303      	movs	r3, #3
 80041a6:	e0db      	b.n	8004360 <USBD_MSC_Setup+0x1dc>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80041a8:	683b      	ldr	r3, [r7, #0]
 80041aa:	781b      	ldrb	r3, [r3, #0]
 80041ac:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d04e      	beq.n	8004252 <USBD_MSC_Setup+0xce>
 80041b4:	2b20      	cmp	r3, #32
 80041b6:	f040 80cb 	bne.w	8004350 <USBD_MSC_Setup+0x1cc>
  {
    /* Class request */
    case USB_REQ_TYPE_CLASS:
      switch (req->bRequest)
 80041ba:	683b      	ldr	r3, [r7, #0]
 80041bc:	785b      	ldrb	r3, [r3, #1]
 80041be:	2bfe      	cmp	r3, #254	@ 0xfe
 80041c0:	d002      	beq.n	80041c8 <USBD_MSC_Setup+0x44>
 80041c2:	2bff      	cmp	r3, #255	@ 0xff
 80041c4:	d025      	beq.n	8004212 <USBD_MSC_Setup+0x8e>
 80041c6:	e03c      	b.n	8004242 <USBD_MSC_Setup+0xbe>
      {
        case BOT_GET_MAX_LUN:
          if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 80041c8:	683b      	ldr	r3, [r7, #0]
 80041ca:	885b      	ldrh	r3, [r3, #2]
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d119      	bne.n	8004204 <USBD_MSC_Setup+0x80>
 80041d0:	683b      	ldr	r3, [r7, #0]
 80041d2:	88db      	ldrh	r3, [r3, #6]
 80041d4:	2b01      	cmp	r3, #1
 80041d6:	d115      	bne.n	8004204 <USBD_MSC_Setup+0x80>
              ((req->bmRequest & 0x80U) == 0x80U))
 80041d8:	683b      	ldr	r3, [r7, #0]
 80041da:	781b      	ldrb	r3, [r3, #0]
 80041dc:	b25b      	sxtb	r3, r3
          if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 80041de:	2b00      	cmp	r3, #0
 80041e0:	da10      	bge.n	8004204 <USBD_MSC_Setup+0x80>
          {
            hmsc->max_lun = (uint32_t)((USBD_StorageTypeDef *)pdev->pUserData)->GetMaxLun();
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 80041e8:	699b      	ldr	r3, [r3, #24]
 80041ea:	4798      	blx	r3
 80041ec:	4603      	mov	r3, r0
 80041ee:	461a      	mov	r2, r3
 80041f0:	693b      	ldr	r3, [r7, #16]
 80041f2:	601a      	str	r2, [r3, #0]
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hmsc->max_lun, 1U);
 80041f4:	693b      	ldr	r3, [r7, #16]
 80041f6:	2201      	movs	r2, #1
 80041f8:	4619      	mov	r1, r3
 80041fa:	6878      	ldr	r0, [r7, #4]
 80041fc:	f002 fe15 	bl	8006e2a <USBD_CtlSendData>
 8004200:	bf00      	nop
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8004202:	e025      	b.n	8004250 <USBD_MSC_Setup+0xcc>
            USBD_CtlError(pdev, req);
 8004204:	6839      	ldr	r1, [r7, #0]
 8004206:	6878      	ldr	r0, [r7, #4]
 8004208:	f002 fd9e 	bl	8006d48 <USBD_CtlError>
            ret = USBD_FAIL;
 800420c:	2303      	movs	r3, #3
 800420e:	75fb      	strb	r3, [r7, #23]
          break;
 8004210:	e01e      	b.n	8004250 <USBD_MSC_Setup+0xcc>

        case BOT_RESET :
          if ((req->wValue  == 0U) && (req->wLength == 0U) &&
 8004212:	683b      	ldr	r3, [r7, #0]
 8004214:	885b      	ldrh	r3, [r3, #2]
 8004216:	2b00      	cmp	r3, #0
 8004218:	d10c      	bne.n	8004234 <USBD_MSC_Setup+0xb0>
 800421a:	683b      	ldr	r3, [r7, #0]
 800421c:	88db      	ldrh	r3, [r3, #6]
 800421e:	2b00      	cmp	r3, #0
 8004220:	d108      	bne.n	8004234 <USBD_MSC_Setup+0xb0>
              ((req->bmRequest & 0x80U) != 0x80U))
 8004222:	683b      	ldr	r3, [r7, #0]
 8004224:	781b      	ldrb	r3, [r3, #0]
 8004226:	b25b      	sxtb	r3, r3
          if ((req->wValue  == 0U) && (req->wLength == 0U) &&
 8004228:	2b00      	cmp	r3, #0
 800422a:	db03      	blt.n	8004234 <USBD_MSC_Setup+0xb0>
          {
            MSC_BOT_Reset(pdev);
 800422c:	6878      	ldr	r0, [r7, #4]
 800422e:	f000 f948 	bl	80044c2 <MSC_BOT_Reset>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8004232:	e00d      	b.n	8004250 <USBD_MSC_Setup+0xcc>
            USBD_CtlError(pdev, req);
 8004234:	6839      	ldr	r1, [r7, #0]
 8004236:	6878      	ldr	r0, [r7, #4]
 8004238:	f002 fd86 	bl	8006d48 <USBD_CtlError>
            ret = USBD_FAIL;
 800423c:	2303      	movs	r3, #3
 800423e:	75fb      	strb	r3, [r7, #23]
          break;
 8004240:	e006      	b.n	8004250 <USBD_MSC_Setup+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8004242:	6839      	ldr	r1, [r7, #0]
 8004244:	6878      	ldr	r0, [r7, #4]
 8004246:	f002 fd7f 	bl	8006d48 <USBD_CtlError>
          ret = USBD_FAIL;
 800424a:	2303      	movs	r3, #3
 800424c:	75fb      	strb	r3, [r7, #23]
          break;
 800424e:	bf00      	nop
      }
      break;
 8004250:	e085      	b.n	800435e <USBD_MSC_Setup+0x1da>
    /* Interface & Endpoint request */
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8004252:	683b      	ldr	r3, [r7, #0]
 8004254:	785b      	ldrb	r3, [r3, #1]
 8004256:	2b0b      	cmp	r3, #11
 8004258:	d871      	bhi.n	800433e <USBD_MSC_Setup+0x1ba>
 800425a:	a201      	add	r2, pc, #4	@ (adr r2, 8004260 <USBD_MSC_Setup+0xdc>)
 800425c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004260:	08004291 	.word	0x08004291
 8004264:	0800430d 	.word	0x0800430d
 8004268:	0800433f 	.word	0x0800433f
 800426c:	0800433f 	.word	0x0800433f
 8004270:	0800433f 	.word	0x0800433f
 8004274:	0800433f 	.word	0x0800433f
 8004278:	0800433f 	.word	0x0800433f
 800427c:	0800433f 	.word	0x0800433f
 8004280:	0800433f 	.word	0x0800433f
 8004284:	0800433f 	.word	0x0800433f
 8004288:	080042bb 	.word	0x080042bb
 800428c:	080042e5 	.word	0x080042e5
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8004296:	b2db      	uxtb	r3, r3
 8004298:	2b03      	cmp	r3, #3
 800429a:	d107      	bne.n	80042ac <USBD_MSC_Setup+0x128>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800429c:	f107 030e 	add.w	r3, r7, #14
 80042a0:	2202      	movs	r2, #2
 80042a2:	4619      	mov	r1, r3
 80042a4:	6878      	ldr	r0, [r7, #4]
 80042a6:	f002 fdc0 	bl	8006e2a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80042aa:	e050      	b.n	800434e <USBD_MSC_Setup+0x1ca>
            USBD_CtlError(pdev, req);
 80042ac:	6839      	ldr	r1, [r7, #0]
 80042ae:	6878      	ldr	r0, [r7, #4]
 80042b0:	f002 fd4a 	bl	8006d48 <USBD_CtlError>
            ret = USBD_FAIL;
 80042b4:	2303      	movs	r3, #3
 80042b6:	75fb      	strb	r3, [r7, #23]
          break;
 80042b8:	e049      	b.n	800434e <USBD_MSC_Setup+0x1ca>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80042c0:	b2db      	uxtb	r3, r3
 80042c2:	2b03      	cmp	r3, #3
 80042c4:	d107      	bne.n	80042d6 <USBD_MSC_Setup+0x152>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hmsc->interface, 1U);
 80042c6:	693b      	ldr	r3, [r7, #16]
 80042c8:	3304      	adds	r3, #4
 80042ca:	2201      	movs	r2, #1
 80042cc:	4619      	mov	r1, r3
 80042ce:	6878      	ldr	r0, [r7, #4]
 80042d0:	f002 fdab 	bl	8006e2a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80042d4:	e03b      	b.n	800434e <USBD_MSC_Setup+0x1ca>
            USBD_CtlError(pdev, req);
 80042d6:	6839      	ldr	r1, [r7, #0]
 80042d8:	6878      	ldr	r0, [r7, #4]
 80042da:	f002 fd35 	bl	8006d48 <USBD_CtlError>
            ret = USBD_FAIL;
 80042de:	2303      	movs	r3, #3
 80042e0:	75fb      	strb	r3, [r7, #23]
          break;
 80042e2:	e034      	b.n	800434e <USBD_MSC_Setup+0x1ca>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80042ea:	b2db      	uxtb	r3, r3
 80042ec:	2b03      	cmp	r3, #3
 80042ee:	d106      	bne.n	80042fe <USBD_MSC_Setup+0x17a>
          {
            hmsc->interface = (uint8_t)(req->wValue);
 80042f0:	683b      	ldr	r3, [r7, #0]
 80042f2:	885b      	ldrh	r3, [r3, #2]
 80042f4:	b2db      	uxtb	r3, r3
 80042f6:	461a      	mov	r2, r3
 80042f8:	693b      	ldr	r3, [r7, #16]
 80042fa:	605a      	str	r2, [r3, #4]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80042fc:	e027      	b.n	800434e <USBD_MSC_Setup+0x1ca>
            USBD_CtlError(pdev, req);
 80042fe:	6839      	ldr	r1, [r7, #0]
 8004300:	6878      	ldr	r0, [r7, #4]
 8004302:	f002 fd21 	bl	8006d48 <USBD_CtlError>
            ret = USBD_FAIL;
 8004306:	2303      	movs	r3, #3
 8004308:	75fb      	strb	r3, [r7, #23]
          break;
 800430a:	e020      	b.n	800434e <USBD_MSC_Setup+0x1ca>

        case USB_REQ_CLEAR_FEATURE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8004312:	b2db      	uxtb	r3, r3
 8004314:	2b03      	cmp	r3, #3
 8004316:	d119      	bne.n	800434c <USBD_MSC_Setup+0x1c8>
          {
            if (req->wValue == USB_FEATURE_EP_HALT)
 8004318:	683b      	ldr	r3, [r7, #0]
 800431a:	885b      	ldrh	r3, [r3, #2]
 800431c:	2b00      	cmp	r3, #0
 800431e:	d115      	bne.n	800434c <USBD_MSC_Setup+0x1c8>
            {
              /* Flush the FIFO */
              (void)USBD_LL_FlushEP(pdev, (uint8_t)req->wIndex);
 8004320:	683b      	ldr	r3, [r7, #0]
 8004322:	889b      	ldrh	r3, [r3, #4]
 8004324:	b2db      	uxtb	r3, r3
 8004326:	4619      	mov	r1, r3
 8004328:	6878      	ldr	r0, [r7, #4]
 800432a:	f003 f96d 	bl	8007608 <USBD_LL_FlushEP>

              /* Handle BOT error */
              MSC_BOT_CplClrFeature(pdev, (uint8_t)req->wIndex);
 800432e:	683b      	ldr	r3, [r7, #0]
 8004330:	889b      	ldrh	r3, [r3, #4]
 8004332:	b2db      	uxtb	r3, r3
 8004334:	4619      	mov	r1, r3
 8004336:	6878      	ldr	r0, [r7, #4]
 8004338:	f000 fa82 	bl	8004840 <MSC_BOT_CplClrFeature>
            }
          }
          break;
 800433c:	e006      	b.n	800434c <USBD_MSC_Setup+0x1c8>

        default:
          USBD_CtlError(pdev, req);
 800433e:	6839      	ldr	r1, [r7, #0]
 8004340:	6878      	ldr	r0, [r7, #4]
 8004342:	f002 fd01 	bl	8006d48 <USBD_CtlError>
          ret = USBD_FAIL;
 8004346:	2303      	movs	r3, #3
 8004348:	75fb      	strb	r3, [r7, #23]
          break;
 800434a:	e000      	b.n	800434e <USBD_MSC_Setup+0x1ca>
          break;
 800434c:	bf00      	nop
      }
      break;
 800434e:	e006      	b.n	800435e <USBD_MSC_Setup+0x1da>

    default:
      USBD_CtlError(pdev, req);
 8004350:	6839      	ldr	r1, [r7, #0]
 8004352:	6878      	ldr	r0, [r7, #4]
 8004354:	f002 fcf8 	bl	8006d48 <USBD_CtlError>
      ret = USBD_FAIL;
 8004358:	2303      	movs	r3, #3
 800435a:	75fb      	strb	r3, [r7, #23]
      break;
 800435c:	bf00      	nop
  }

  return (uint8_t)ret;
 800435e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004360:	4618      	mov	r0, r3
 8004362:	3718      	adds	r7, #24
 8004364:	46bd      	mov	sp, r7
 8004366:	bd80      	pop	{r7, pc}

08004368 <USBD_MSC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
uint8_t USBD_MSC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8004368:	b580      	push	{r7, lr}
 800436a:	b082      	sub	sp, #8
 800436c:	af00      	add	r7, sp, #0
 800436e:	6078      	str	r0, [r7, #4]
 8004370:	460b      	mov	r3, r1
 8004372:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataIn(pdev, epnum);
 8004374:	78fb      	ldrb	r3, [r7, #3]
 8004376:	4619      	mov	r1, r3
 8004378:	6878      	ldr	r0, [r7, #4]
 800437a:	f000 f8dc 	bl	8004536 <MSC_BOT_DataIn>

  return (uint8_t)USBD_OK;
 800437e:	2300      	movs	r3, #0
}
 8004380:	4618      	mov	r0, r3
 8004382:	3708      	adds	r7, #8
 8004384:	46bd      	mov	sp, r7
 8004386:	bd80      	pop	{r7, pc}

08004388 <USBD_MSC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
uint8_t USBD_MSC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8004388:	b580      	push	{r7, lr}
 800438a:	b082      	sub	sp, #8
 800438c:	af00      	add	r7, sp, #0
 800438e:	6078      	str	r0, [r7, #4]
 8004390:	460b      	mov	r3, r1
 8004392:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataOut(pdev, epnum);
 8004394:	78fb      	ldrb	r3, [r7, #3]
 8004396:	4619      	mov	r1, r3
 8004398:	6878      	ldr	r0, [r7, #4]
 800439a:	f000 f902 	bl	80045a2 <MSC_BOT_DataOut>

  return (uint8_t)USBD_OK;
 800439e:	2300      	movs	r3, #0
}
 80043a0:	4618      	mov	r0, r3
 80043a2:	3708      	adds	r7, #8
 80043a4:	46bd      	mov	sp, r7
 80043a6:	bd80      	pop	{r7, pc}

080043a8 <USBD_MSC_GetHSCfgDesc>:
  *         return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetHSCfgDesc(uint16_t *length)
{
 80043a8:	b480      	push	{r7}
 80043aa:	b083      	sub	sp, #12
 80043ac:	af00      	add	r7, sp, #0
 80043ae:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_CfgHSDesc);
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	2220      	movs	r2, #32
 80043b4:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_CfgHSDesc;
 80043b6:	4b03      	ldr	r3, [pc, #12]	@ (80043c4 <USBD_MSC_GetHSCfgDesc+0x1c>)
}
 80043b8:	4618      	mov	r0, r3
 80043ba:	370c      	adds	r7, #12
 80043bc:	46bd      	mov	sp, r7
 80043be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c2:	4770      	bx	lr
 80043c4:	20000044 	.word	0x20000044

080043c8 <USBD_MSC_GetFSCfgDesc>:
  *         return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetFSCfgDesc(uint16_t *length)
{
 80043c8:	b480      	push	{r7}
 80043ca:	b083      	sub	sp, #12
 80043cc:	af00      	add	r7, sp, #0
 80043ce:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_CfgFSDesc);
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	2220      	movs	r2, #32
 80043d4:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_CfgFSDesc;
 80043d6:	4b03      	ldr	r3, [pc, #12]	@ (80043e4 <USBD_MSC_GetFSCfgDesc+0x1c>)
}
 80043d8:	4618      	mov	r0, r3
 80043da:	370c      	adds	r7, #12
 80043dc:	46bd      	mov	sp, r7
 80043de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e2:	4770      	bx	lr
 80043e4:	20000064 	.word	0x20000064

080043e8 <USBD_MSC_GetOtherSpeedCfgDesc>:
  *         return other speed configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80043e8:	b480      	push	{r7}
 80043ea:	b083      	sub	sp, #12
 80043ec:	af00      	add	r7, sp, #0
 80043ee:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_OtherSpeedCfgDesc);
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	2220      	movs	r2, #32
 80043f4:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_OtherSpeedCfgDesc;
 80043f6:	4b03      	ldr	r3, [pc, #12]	@ (8004404 <USBD_MSC_GetOtherSpeedCfgDesc+0x1c>)
}
 80043f8:	4618      	mov	r0, r3
 80043fa:	370c      	adds	r7, #12
 80043fc:	46bd      	mov	sp, r7
 80043fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004402:	4770      	bx	lr
 8004404:	20000084 	.word	0x20000084

08004408 <USBD_MSC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8004408:	b480      	push	{r7}
 800440a:	b083      	sub	sp, #12
 800440c:	af00      	add	r7, sp, #0
 800440e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_DeviceQualifierDesc);
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	220a      	movs	r2, #10
 8004414:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_DeviceQualifierDesc;
 8004416:	4b03      	ldr	r3, [pc, #12]	@ (8004424 <USBD_MSC_GetDeviceQualifierDescriptor+0x1c>)
}
 8004418:	4618      	mov	r0, r3
 800441a:	370c      	adds	r7, #12
 800441c:	46bd      	mov	sp, r7
 800441e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004422:	4770      	bx	lr
 8004424:	200000a4 	.word	0x200000a4

08004428 <USBD_MSC_RegisterStorage>:
  * @brief  USBD_MSC_RegisterStorage
  * @param  fops: storage callback
  * @retval status
  */
uint8_t USBD_MSC_RegisterStorage(USBD_HandleTypeDef *pdev, USBD_StorageTypeDef *fops)
{
 8004428:	b480      	push	{r7}
 800442a:	b083      	sub	sp, #12
 800442c:	af00      	add	r7, sp, #0
 800442e:	6078      	str	r0, [r7, #4]
 8004430:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8004432:	683b      	ldr	r3, [r7, #0]
 8004434:	2b00      	cmp	r3, #0
 8004436:	d101      	bne.n	800443c <USBD_MSC_RegisterStorage+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8004438:	2303      	movs	r3, #3
 800443a:	e004      	b.n	8004446 <USBD_MSC_RegisterStorage+0x1e>
  }

  pdev->pUserData = fops;
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	683a      	ldr	r2, [r7, #0]
 8004440:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0

  return (uint8_t)USBD_OK;
 8004444:	2300      	movs	r3, #0
}
 8004446:	4618      	mov	r0, r3
 8004448:	370c      	adds	r7, #12
 800444a:	46bd      	mov	sp, r7
 800444c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004450:	4770      	bx	lr

08004452 <MSC_BOT_Init>:
  *         Initialize the BOT Process
  * @param  pdev: device instance
  * @retval None
  */
void MSC_BOT_Init(USBD_HandleTypeDef *pdev)
{
 8004452:	b580      	push	{r7, lr}
 8004454:	b084      	sub	sp, #16
 8004456:	af00      	add	r7, sp, #0
 8004458:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8004460:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	2b00      	cmp	r3, #0
 8004466:	d028      	beq.n	80044ba <MSC_BOT_Init+0x68>
  {
    return;
  }

  hmsc->bot_state = USBD_BOT_IDLE;
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	2200      	movs	r2, #0
 800446c:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_NORMAL;
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	2200      	movs	r2, #0
 8004472:	725a      	strb	r2, [r3, #9]

  hmsc->scsi_sense_tail = 0U;
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	2200      	movs	r2, #0
 8004478:	f883 2261 	strb.w	r2, [r3, #609]	@ 0x261
  hmsc->scsi_sense_head = 0U;
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	2200      	movs	r2, #0
 8004480:	f883 2260 	strb.w	r2, [r3, #608]	@ 0x260
  hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	2200      	movs	r2, #0
 8004488:	f883 2262 	strb.w	r2, [r3, #610]	@ 0x262

  ((USBD_StorageTypeDef *)pdev->pUserData)->Init(0U);
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	2000      	movs	r0, #0
 8004496:	4798      	blx	r3

  (void)USBD_LL_FlushEP(pdev, MSC_EPOUT_ADDR);
 8004498:	2101      	movs	r1, #1
 800449a:	6878      	ldr	r0, [r7, #4]
 800449c:	f003 f8b4 	bl	8007608 <USBD_LL_FlushEP>
  (void)USBD_LL_FlushEP(pdev, MSC_EPIN_ADDR);
 80044a0:	2181      	movs	r1, #129	@ 0x81
 80044a2:	6878      	ldr	r0, [r7, #4]
 80044a4:	f003 f8b0 	bl	8007608 <USBD_LL_FlushEP>

  /* Prepare EP to Receive First BOT Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, (uint8_t *)&hmsc->cbw,
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	f503 7204 	add.w	r2, r3, #528	@ 0x210
 80044ae:	231f      	movs	r3, #31
 80044b0:	2101      	movs	r1, #1
 80044b2:	6878      	ldr	r0, [r7, #4]
 80044b4:	f003 f971 	bl	800779a <USBD_LL_PrepareReceive>
 80044b8:	e000      	b.n	80044bc <MSC_BOT_Init+0x6a>
    return;
 80044ba:	bf00      	nop
                               USBD_BOT_CBW_LENGTH);
}
 80044bc:	3710      	adds	r7, #16
 80044be:	46bd      	mov	sp, r7
 80044c0:	bd80      	pop	{r7, pc}

080044c2 <MSC_BOT_Reset>:
  *         Reset the BOT Machine
  * @param  pdev: device instance
  * @retval  None
  */
void MSC_BOT_Reset(USBD_HandleTypeDef *pdev)
{
 80044c2:	b580      	push	{r7, lr}
 80044c4:	b084      	sub	sp, #16
 80044c6:	af00      	add	r7, sp, #0
 80044c8:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80044d0:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d016      	beq.n	8004506 <MSC_BOT_Reset+0x44>
  {
    return;
  }

  hmsc->bot_state  = USBD_BOT_IDLE;
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	2200      	movs	r2, #0
 80044dc:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_RECOVERY;
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	2201      	movs	r2, #1
 80044e2:	725a      	strb	r2, [r3, #9]

  (void)USBD_LL_ClearStallEP(pdev, MSC_EPIN_ADDR);
 80044e4:	2181      	movs	r1, #129	@ 0x81
 80044e6:	6878      	ldr	r0, [r7, #4]
 80044e8:	f003 f8cc 	bl	8007684 <USBD_LL_ClearStallEP>
  (void)USBD_LL_ClearStallEP(pdev, MSC_EPOUT_ADDR);
 80044ec:	2101      	movs	r1, #1
 80044ee:	6878      	ldr	r0, [r7, #4]
 80044f0:	f003 f8c8 	bl	8007684 <USBD_LL_ClearStallEP>

  /* Prepare EP to Receive First BOT Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, (uint8_t *)&hmsc->cbw,
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	f503 7204 	add.w	r2, r3, #528	@ 0x210
 80044fa:	231f      	movs	r3, #31
 80044fc:	2101      	movs	r1, #1
 80044fe:	6878      	ldr	r0, [r7, #4]
 8004500:	f003 f94b 	bl	800779a <USBD_LL_PrepareReceive>
 8004504:	e000      	b.n	8004508 <MSC_BOT_Reset+0x46>
    return;
 8004506:	bf00      	nop
                               USBD_BOT_CBW_LENGTH);
}
 8004508:	3710      	adds	r7, #16
 800450a:	46bd      	mov	sp, r7
 800450c:	bd80      	pop	{r7, pc}

0800450e <MSC_BOT_DeInit>:
  *         DeInitialize the BOT Machine
  * @param  pdev: device instance
  * @retval None
  */
void MSC_BOT_DeInit(USBD_HandleTypeDef  *pdev)
{
 800450e:	b480      	push	{r7}
 8004510:	b085      	sub	sp, #20
 8004512:	af00      	add	r7, sp, #0
 8004514:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800451c:	60fb      	str	r3, [r7, #12]

  if (hmsc != NULL)
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	2b00      	cmp	r3, #0
 8004522:	d002      	beq.n	800452a <MSC_BOT_DeInit+0x1c>
  {
    hmsc->bot_state = USBD_BOT_IDLE;
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	2200      	movs	r2, #0
 8004528:	721a      	strb	r2, [r3, #8]
  }
}
 800452a:	bf00      	nop
 800452c:	3714      	adds	r7, #20
 800452e:	46bd      	mov	sp, r7
 8004530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004534:	4770      	bx	lr

08004536 <MSC_BOT_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval None
  */
void MSC_BOT_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8004536:	b580      	push	{r7, lr}
 8004538:	b084      	sub	sp, #16
 800453a:	af00      	add	r7, sp, #0
 800453c:	6078      	str	r0, [r7, #4]
 800453e:	460b      	mov	r3, r1
 8004540:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8004548:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	2b00      	cmp	r3, #0
 800454e:	d020      	beq.n	8004592 <MSC_BOT_DataIn+0x5c>
  {
    return;
  }

  switch (hmsc->bot_state)
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	7a1b      	ldrb	r3, [r3, #8]
 8004554:	2b02      	cmp	r3, #2
 8004556:	d005      	beq.n	8004564 <MSC_BOT_DataIn+0x2e>
 8004558:	2b02      	cmp	r3, #2
 800455a:	db1c      	blt.n	8004596 <MSC_BOT_DataIn+0x60>
 800455c:	3b03      	subs	r3, #3
 800455e:	2b01      	cmp	r3, #1
 8004560:	d819      	bhi.n	8004596 <MSC_BOT_DataIn+0x60>
 8004562:	e011      	b.n	8004588 <MSC_BOT_DataIn+0x52>
  {
    case USBD_BOT_DATA_IN:
      if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	f893 121d 	ldrb.w	r1, [r3, #541]	@ 0x21d
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	f203 231f 	addw	r3, r3, #543	@ 0x21f
 8004570:	461a      	mov	r2, r3
 8004572:	6878      	ldr	r0, [r7, #4]
 8004574:	f000 f992 	bl	800489c <SCSI_ProcessCmd>
 8004578:	4603      	mov	r3, r0
 800457a:	2b00      	cmp	r3, #0
 800457c:	da0d      	bge.n	800459a <MSC_BOT_DataIn+0x64>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 800457e:	2101      	movs	r1, #1
 8004580:	6878      	ldr	r0, [r7, #4]
 8004582:	f000 f8fb 	bl	800477c <MSC_BOT_SendCSW>
      }
      break;
 8004586:	e008      	b.n	800459a <MSC_BOT_DataIn+0x64>

    case USBD_BOT_SEND_DATA:
    case USBD_BOT_LAST_DATA_IN:
      MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 8004588:	2100      	movs	r1, #0
 800458a:	6878      	ldr	r0, [r7, #4]
 800458c:	f000 f8f6 	bl	800477c <MSC_BOT_SendCSW>
      break;
 8004590:	e004      	b.n	800459c <MSC_BOT_DataIn+0x66>
    return;
 8004592:	bf00      	nop
 8004594:	e002      	b.n	800459c <MSC_BOT_DataIn+0x66>

    default:
      break;
 8004596:	bf00      	nop
 8004598:	e000      	b.n	800459c <MSC_BOT_DataIn+0x66>
      break;
 800459a:	bf00      	nop
  }
}
 800459c:	3710      	adds	r7, #16
 800459e:	46bd      	mov	sp, r7
 80045a0:	bd80      	pop	{r7, pc}

080045a2 <MSC_BOT_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval None
  */
void MSC_BOT_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80045a2:	b580      	push	{r7, lr}
 80045a4:	b084      	sub	sp, #16
 80045a6:	af00      	add	r7, sp, #0
 80045a8:	6078      	str	r0, [r7, #4]
 80045aa:	460b      	mov	r3, r1
 80045ac:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80045b4:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d01c      	beq.n	80045f6 <MSC_BOT_DataOut+0x54>
  {
    return;
  }

  switch (hmsc->bot_state)
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	7a1b      	ldrb	r3, [r3, #8]
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d002      	beq.n	80045ca <MSC_BOT_DataOut+0x28>
 80045c4:	2b01      	cmp	r3, #1
 80045c6:	d004      	beq.n	80045d2 <MSC_BOT_DataOut+0x30>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
      }
      break;

    default:
      break;
 80045c8:	e018      	b.n	80045fc <MSC_BOT_DataOut+0x5a>
      MSC_BOT_CBW_Decode(pdev);
 80045ca:	6878      	ldr	r0, [r7, #4]
 80045cc:	f000 f81a 	bl	8004604 <MSC_BOT_CBW_Decode>
      break;
 80045d0:	e014      	b.n	80045fc <MSC_BOT_DataOut+0x5a>
      if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	f893 121d 	ldrb.w	r1, [r3, #541]	@ 0x21d
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	f203 231f 	addw	r3, r3, #543	@ 0x21f
 80045de:	461a      	mov	r2, r3
 80045e0:	6878      	ldr	r0, [r7, #4]
 80045e2:	f000 f95b 	bl	800489c <SCSI_ProcessCmd>
 80045e6:	4603      	mov	r3, r0
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	da06      	bge.n	80045fa <MSC_BOT_DataOut+0x58>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 80045ec:	2101      	movs	r1, #1
 80045ee:	6878      	ldr	r0, [r7, #4]
 80045f0:	f000 f8c4 	bl	800477c <MSC_BOT_SendCSW>
      break;
 80045f4:	e001      	b.n	80045fa <MSC_BOT_DataOut+0x58>
    return;
 80045f6:	bf00      	nop
 80045f8:	e000      	b.n	80045fc <MSC_BOT_DataOut+0x5a>
      break;
 80045fa:	bf00      	nop
  }
}
 80045fc:	3710      	adds	r7, #16
 80045fe:	46bd      	mov	sp, r7
 8004600:	bd80      	pop	{r7, pc}
	...

08004604 <MSC_BOT_CBW_Decode>:
  *         Decode the CBW command and set the BOT state machine accordingly
  * @param  pdev: device instance
  * @retval None
  */
static void  MSC_BOT_CBW_Decode(USBD_HandleTypeDef *pdev)
{
 8004604:	b580      	push	{r7, lr}
 8004606:	b084      	sub	sp, #16
 8004608:	af00      	add	r7, sp, #0
 800460a:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8004612:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	2b00      	cmp	r3, #0
 8004618:	d077      	beq.n	800470a <MSC_BOT_CBW_Decode+0x106>
  {
    return;
  }

  hmsc->csw.dTag = hmsc->cbw.dTag;
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	f8c3 2234 	str.w	r2, [r3, #564]	@ 0x234
  hmsc->csw.dDataResidue = hmsc->cbw.dDataLength;
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	f8d3 2218 	ldr.w	r2, [r3, #536]	@ 0x218
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	f8c3 2238 	str.w	r2, [r3, #568]	@ 0x238

  if ((USBD_LL_GetRxDataSize(pdev, MSC_EPOUT_ADDR) != USBD_BOT_CBW_LENGTH) ||
 8004632:	2101      	movs	r1, #1
 8004634:	6878      	ldr	r0, [r7, #4]
 8004636:	f003 f8d1 	bl	80077dc <USBD_LL_GetRxDataSize>
 800463a:	4603      	mov	r3, r0
 800463c:	2b1f      	cmp	r3, #31
 800463e:	d114      	bne.n	800466a <MSC_BOT_CBW_Decode+0x66>
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
  if ((USBD_LL_GetRxDataSize(pdev, MSC_EPOUT_ADDR) != USBD_BOT_CBW_LENGTH) ||
 8004646:	4a34      	ldr	r2, [pc, #208]	@ (8004718 <MSC_BOT_CBW_Decode+0x114>)
 8004648:	4293      	cmp	r3, r2
 800464a:	d10e      	bne.n	800466a <MSC_BOT_CBW_Decode+0x66>
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	f893 321d 	ldrb.w	r3, [r3, #541]	@ 0x21d
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 8004652:	2b01      	cmp	r3, #1
 8004654:	d809      	bhi.n	800466a <MSC_BOT_CBW_Decode+0x66>
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	f893 321e 	ldrb.w	r3, [r3, #542]	@ 0x21e
 800465c:	2b00      	cmp	r3, #0
 800465e:	d004      	beq.n	800466a <MSC_BOT_CBW_Decode+0x66>
      (hmsc->cbw.bCBLength > 16U))
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	f893 321e 	ldrb.w	r3, [r3, #542]	@ 0x21e
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 8004666:	2b10      	cmp	r3, #16
 8004668:	d90e      	bls.n	8004688 <MSC_BOT_CBW_Decode+0x84>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	f893 121d 	ldrb.w	r1, [r3, #541]	@ 0x21d
 8004670:	2320      	movs	r3, #32
 8004672:	2205      	movs	r2, #5
 8004674:	6878      	ldr	r0, [r7, #4]
 8004676:	f000 fdbc 	bl	80051f2 <SCSI_SenseCode>

    hmsc->bot_status = USBD_BOT_STATUS_ERROR;
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	2202      	movs	r2, #2
 800467e:	725a      	strb	r2, [r3, #9]
    MSC_BOT_Abort(pdev);
 8004680:	6878      	ldr	r0, [r7, #4]
 8004682:	f000 f8ab 	bl	80047dc <MSC_BOT_Abort>
 8004686:	e043      	b.n	8004710 <MSC_BOT_CBW_Decode+0x10c>
  }
  else
  {
    if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	f893 121d 	ldrb.w	r1, [r3, #541]	@ 0x21d
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	f203 231f 	addw	r3, r3, #543	@ 0x21f
 8004694:	461a      	mov	r2, r3
 8004696:	6878      	ldr	r0, [r7, #4]
 8004698:	f000 f900 	bl	800489c <SCSI_ProcessCmd>
 800469c:	4603      	mov	r3, r0
 800469e:	2b00      	cmp	r3, #0
 80046a0:	da0c      	bge.n	80046bc <MSC_BOT_CBW_Decode+0xb8>
    {
      if (hmsc->bot_state == USBD_BOT_NO_DATA)
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	7a1b      	ldrb	r3, [r3, #8]
 80046a6:	2b05      	cmp	r3, #5
 80046a8:	d104      	bne.n	80046b4 <MSC_BOT_CBW_Decode+0xb0>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 80046aa:	2101      	movs	r1, #1
 80046ac:	6878      	ldr	r0, [r7, #4]
 80046ae:	f000 f865 	bl	800477c <MSC_BOT_SendCSW>
 80046b2:	e02d      	b.n	8004710 <MSC_BOT_CBW_Decode+0x10c>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 80046b4:	6878      	ldr	r0, [r7, #4]
 80046b6:	f000 f891 	bl	80047dc <MSC_BOT_Abort>
 80046ba:	e029      	b.n	8004710 <MSC_BOT_CBW_Decode+0x10c>
      }
    }
    /* Burst xfer handled internally */
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	7a1b      	ldrb	r3, [r3, #8]
 80046c0:	2b02      	cmp	r3, #2
 80046c2:	d024      	beq.n	800470e <MSC_BOT_CBW_Decode+0x10a>
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	7a1b      	ldrb	r3, [r3, #8]
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 80046c8:	2b01      	cmp	r3, #1
 80046ca:	d020      	beq.n	800470e <MSC_BOT_CBW_Decode+0x10a>
             (hmsc->bot_state != USBD_BOT_LAST_DATA_IN))
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	7a1b      	ldrb	r3, [r3, #8]
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 80046d0:	2b03      	cmp	r3, #3
 80046d2:	d01c      	beq.n	800470e <MSC_BOT_CBW_Decode+0x10a>
    {
      if (hmsc->bot_data_length > 0U)
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	68db      	ldr	r3, [r3, #12]
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d009      	beq.n	80046f0 <MSC_BOT_CBW_Decode+0xec>
      {
        MSC_BOT_SendData(pdev, hmsc->bot_data, hmsc->bot_data_length);
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	f103 0110 	add.w	r1, r3, #16
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	68db      	ldr	r3, [r3, #12]
 80046e6:	461a      	mov	r2, r3
 80046e8:	6878      	ldr	r0, [r7, #4]
 80046ea:	f000 f817 	bl	800471c <MSC_BOT_SendData>
      if (hmsc->bot_data_length > 0U)
 80046ee:	e00f      	b.n	8004710 <MSC_BOT_CBW_Decode+0x10c>
      }
      else if (hmsc->bot_data_length == 0U)
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	68db      	ldr	r3, [r3, #12]
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d104      	bne.n	8004702 <MSC_BOT_CBW_Decode+0xfe>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 80046f8:	2100      	movs	r1, #0
 80046fa:	6878      	ldr	r0, [r7, #4]
 80046fc:	f000 f83e 	bl	800477c <MSC_BOT_SendCSW>
      if (hmsc->bot_data_length > 0U)
 8004700:	e006      	b.n	8004710 <MSC_BOT_CBW_Decode+0x10c>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 8004702:	6878      	ldr	r0, [r7, #4]
 8004704:	f000 f86a 	bl	80047dc <MSC_BOT_Abort>
      if (hmsc->bot_data_length > 0U)
 8004708:	e002      	b.n	8004710 <MSC_BOT_CBW_Decode+0x10c>
    return;
 800470a:	bf00      	nop
 800470c:	e000      	b.n	8004710 <MSC_BOT_CBW_Decode+0x10c>
      }
    }
    else
    {
      return;
 800470e:	bf00      	nop
    }
  }
}
 8004710:	3710      	adds	r7, #16
 8004712:	46bd      	mov	sp, r7
 8004714:	bd80      	pop	{r7, pc}
 8004716:	bf00      	nop
 8004718:	43425355 	.word	0x43425355

0800471c <MSC_BOT_SendData>:
  * @param  buf: pointer to data buffer
  * @param  len: Data Length
  * @retval None
  */
static void  MSC_BOT_SendData(USBD_HandleTypeDef *pdev, uint8_t *pbuf, uint32_t len)
{
 800471c:	b580      	push	{r7, lr}
 800471e:	b086      	sub	sp, #24
 8004720:	af00      	add	r7, sp, #0
 8004722:	60f8      	str	r0, [r7, #12]
 8004724:	60b9      	str	r1, [r7, #8]
 8004726:	607a      	str	r2, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800472e:	617b      	str	r3, [r7, #20]

  uint32_t length = MIN(hmsc->cbw.dDataLength, len);
 8004730:	697b      	ldr	r3, [r7, #20]
 8004732:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 8004736:	687a      	ldr	r2, [r7, #4]
 8004738:	4293      	cmp	r3, r2
 800473a:	bf28      	it	cs
 800473c:	4613      	movcs	r3, r2
 800473e:	613b      	str	r3, [r7, #16]

  if (hmsc == NULL)
 8004740:	697b      	ldr	r3, [r7, #20]
 8004742:	2b00      	cmp	r3, #0
 8004744:	d015      	beq.n	8004772 <MSC_BOT_SendData+0x56>
  {
    return;
  }

  hmsc->csw.dDataResidue -= len;
 8004746:	697b      	ldr	r3, [r7, #20]
 8004748:	f8d3 2238 	ldr.w	r2, [r3, #568]	@ 0x238
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	1ad2      	subs	r2, r2, r3
 8004750:	697b      	ldr	r3, [r7, #20]
 8004752:	f8c3 2238 	str.w	r2, [r3, #568]	@ 0x238
  hmsc->csw.bStatus = USBD_CSW_CMD_PASSED;
 8004756:	697b      	ldr	r3, [r7, #20]
 8004758:	2200      	movs	r2, #0
 800475a:	f883 223c 	strb.w	r2, [r3, #572]	@ 0x23c
  hmsc->bot_state = USBD_BOT_SEND_DATA;
 800475e:	697b      	ldr	r3, [r7, #20]
 8004760:	2204      	movs	r2, #4
 8004762:	721a      	strb	r2, [r3, #8]

  (void)USBD_LL_Transmit(pdev, MSC_EPIN_ADDR, pbuf, length);
 8004764:	693b      	ldr	r3, [r7, #16]
 8004766:	68ba      	ldr	r2, [r7, #8]
 8004768:	2181      	movs	r1, #129	@ 0x81
 800476a:	68f8      	ldr	r0, [r7, #12]
 800476c:	f002 fff4 	bl	8007758 <USBD_LL_Transmit>
 8004770:	e000      	b.n	8004774 <MSC_BOT_SendData+0x58>
    return;
 8004772:	bf00      	nop
}
 8004774:	3718      	adds	r7, #24
 8004776:	46bd      	mov	sp, r7
 8004778:	bd80      	pop	{r7, pc}
	...

0800477c <MSC_BOT_SendCSW>:
  * @param  pdev: device instance
  * @param  status : CSW status
  * @retval None
  */
void  MSC_BOT_SendCSW(USBD_HandleTypeDef *pdev, uint8_t CSW_Status)
{
 800477c:	b580      	push	{r7, lr}
 800477e:	b084      	sub	sp, #16
 8004780:	af00      	add	r7, sp, #0
 8004782:	6078      	str	r0, [r7, #4]
 8004784:	460b      	mov	r3, r1
 8004786:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800478e:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	2b00      	cmp	r3, #0
 8004794:	d01b      	beq.n	80047ce <MSC_BOT_SendCSW+0x52>
  {
    return;
  }

  hmsc->csw.dSignature = USBD_BOT_CSW_SIGNATURE;
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	4a0f      	ldr	r2, [pc, #60]	@ (80047d8 <MSC_BOT_SendCSW+0x5c>)
 800479a:	f8c3 2230 	str.w	r2, [r3, #560]	@ 0x230
  hmsc->csw.bStatus = CSW_Status;
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	78fa      	ldrb	r2, [r7, #3]
 80047a2:	f883 223c 	strb.w	r2, [r3, #572]	@ 0x23c
  hmsc->bot_state = USBD_BOT_IDLE;
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	2200      	movs	r2, #0
 80047aa:	721a      	strb	r2, [r3, #8]

  (void)USBD_LL_Transmit(pdev, MSC_EPIN_ADDR, (uint8_t *)&hmsc->csw,
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	f503 720c 	add.w	r2, r3, #560	@ 0x230
 80047b2:	230d      	movs	r3, #13
 80047b4:	2181      	movs	r1, #129	@ 0x81
 80047b6:	6878      	ldr	r0, [r7, #4]
 80047b8:	f002 ffce 	bl	8007758 <USBD_LL_Transmit>
                         USBD_BOT_CSW_LENGTH);

  /* Prepare EP to Receive next Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, (uint8_t *)&hmsc->cbw,
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	f503 7204 	add.w	r2, r3, #528	@ 0x210
 80047c2:	231f      	movs	r3, #31
 80047c4:	2101      	movs	r1, #1
 80047c6:	6878      	ldr	r0, [r7, #4]
 80047c8:	f002 ffe7 	bl	800779a <USBD_LL_PrepareReceive>
 80047cc:	e000      	b.n	80047d0 <MSC_BOT_SendCSW+0x54>
    return;
 80047ce:	bf00      	nop
                               USBD_BOT_CBW_LENGTH);
}
 80047d0:	3710      	adds	r7, #16
 80047d2:	46bd      	mov	sp, r7
 80047d4:	bd80      	pop	{r7, pc}
 80047d6:	bf00      	nop
 80047d8:	53425355 	.word	0x53425355

080047dc <MSC_BOT_Abort>:
  * @param  pdev: device instance
  * @retval status
  */

static void  MSC_BOT_Abort(USBD_HandleTypeDef *pdev)
{
 80047dc:	b580      	push	{r7, lr}
 80047de:	b084      	sub	sp, #16
 80047e0:	af00      	add	r7, sp, #0
 80047e2:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80047ea:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d022      	beq.n	8004838 <MSC_BOT_Abort+0x5c>
  {
    return;
  }

  if ((hmsc->cbw.bmFlags == 0U) &&
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	f893 321c 	ldrb.w	r3, [r3, #540]	@ 0x21c
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d10c      	bne.n	8004816 <MSC_BOT_Abort+0x3a>
      (hmsc->cbw.dDataLength != 0U) &&
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
  if ((hmsc->cbw.bmFlags == 0U) &&
 8004802:	2b00      	cmp	r3, #0
 8004804:	d007      	beq.n	8004816 <MSC_BOT_Abort+0x3a>
      (hmsc->bot_status == USBD_BOT_STATUS_NORMAL))
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	7a5b      	ldrb	r3, [r3, #9]
      (hmsc->cbw.dDataLength != 0U) &&
 800480a:	2b00      	cmp	r3, #0
 800480c:	d103      	bne.n	8004816 <MSC_BOT_Abort+0x3a>
  {
    (void)USBD_LL_StallEP(pdev, MSC_EPOUT_ADDR);
 800480e:	2101      	movs	r1, #1
 8004810:	6878      	ldr	r0, [r7, #4]
 8004812:	f002 ff18 	bl	8007646 <USBD_LL_StallEP>
  }

  (void)USBD_LL_StallEP(pdev, MSC_EPIN_ADDR);
 8004816:	2181      	movs	r1, #129	@ 0x81
 8004818:	6878      	ldr	r0, [r7, #4]
 800481a:	f002 ff14 	bl	8007646 <USBD_LL_StallEP>

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR)
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	7a5b      	ldrb	r3, [r3, #9]
 8004822:	2b02      	cmp	r3, #2
 8004824:	d109      	bne.n	800483a <MSC_BOT_Abort+0x5e>
  {
    (void)USBD_LL_StallEP(pdev, MSC_EPIN_ADDR);
 8004826:	2181      	movs	r1, #129	@ 0x81
 8004828:	6878      	ldr	r0, [r7, #4]
 800482a:	f002 ff0c 	bl	8007646 <USBD_LL_StallEP>
    (void)USBD_LL_StallEP(pdev, MSC_EPOUT_ADDR);
 800482e:	2101      	movs	r1, #1
 8004830:	6878      	ldr	r0, [r7, #4]
 8004832:	f002 ff08 	bl	8007646 <USBD_LL_StallEP>
 8004836:	e000      	b.n	800483a <MSC_BOT_Abort+0x5e>
    return;
 8004838:	bf00      	nop
  }
}
 800483a:	3710      	adds	r7, #16
 800483c:	46bd      	mov	sp, r7
 800483e:	bd80      	pop	{r7, pc}

08004840 <MSC_BOT_CplClrFeature>:
  * @param  epnum: endpoint index
  * @retval None
  */

void  MSC_BOT_CplClrFeature(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8004840:	b580      	push	{r7, lr}
 8004842:	b084      	sub	sp, #16
 8004844:	af00      	add	r7, sp, #0
 8004846:	6078      	str	r0, [r7, #4]
 8004848:	460b      	mov	r3, r1
 800484a:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8004852:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	2b00      	cmp	r3, #0
 8004858:	d019      	beq.n	800488e <MSC_BOT_CplClrFeature+0x4e>
  {
    return;
  }

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR) /* Bad CBW Signature */
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	7a5b      	ldrb	r3, [r3, #9]
 800485e:	2b02      	cmp	r3, #2
 8004860:	d108      	bne.n	8004874 <MSC_BOT_CplClrFeature+0x34>
  {
    (void)USBD_LL_StallEP(pdev, MSC_EPIN_ADDR);
 8004862:	2181      	movs	r1, #129	@ 0x81
 8004864:	6878      	ldr	r0, [r7, #4]
 8004866:	f002 feee 	bl	8007646 <USBD_LL_StallEP>
    (void)USBD_LL_StallEP(pdev, MSC_EPOUT_ADDR);
 800486a:	2101      	movs	r1, #1
 800486c:	6878      	ldr	r0, [r7, #4]
 800486e:	f002 feea 	bl	8007646 <USBD_LL_StallEP>
 8004872:	e00f      	b.n	8004894 <MSC_BOT_CplClrFeature+0x54>
  }
  else if (((epnum & 0x80U) == 0x80U) && (hmsc->bot_status != USBD_BOT_STATUS_RECOVERY))
 8004874:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004878:	2b00      	cmp	r3, #0
 800487a:	da0a      	bge.n	8004892 <MSC_BOT_CplClrFeature+0x52>
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	7a5b      	ldrb	r3, [r3, #9]
 8004880:	2b01      	cmp	r3, #1
 8004882:	d006      	beq.n	8004892 <MSC_BOT_CplClrFeature+0x52>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 8004884:	2101      	movs	r1, #1
 8004886:	6878      	ldr	r0, [r7, #4]
 8004888:	f7ff ff78 	bl	800477c <MSC_BOT_SendCSW>
 800488c:	e002      	b.n	8004894 <MSC_BOT_CplClrFeature+0x54>
    return;
 800488e:	bf00      	nop
 8004890:	e000      	b.n	8004894 <MSC_BOT_CplClrFeature+0x54>
  }
  else
  {
    return;
 8004892:	bf00      	nop
  }
}
 8004894:	3710      	adds	r7, #16
 8004896:	46bd      	mov	sp, r7
 8004898:	bd80      	pop	{r7, pc}
	...

0800489c <SCSI_ProcessCmd>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
int8_t SCSI_ProcessCmd(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *cmd)
{
 800489c:	b580      	push	{r7, lr}
 800489e:	b086      	sub	sp, #24
 80048a0:	af00      	add	r7, sp, #0
 80048a2:	60f8      	str	r0, [r7, #12]
 80048a4:	460b      	mov	r3, r1
 80048a6:	607a      	str	r2, [r7, #4]
 80048a8:	72fb      	strb	r3, [r7, #11]
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80048b0:	613b      	str	r3, [r7, #16]

  if (hmsc == NULL)
 80048b2:	693b      	ldr	r3, [r7, #16]
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d102      	bne.n	80048be <SCSI_ProcessCmd+0x22>
  {
    return -1;
 80048b8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80048bc:	e168      	b.n	8004b90 <SCSI_ProcessCmd+0x2f4>
  }

  switch (cmd[0])
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	781b      	ldrb	r3, [r3, #0]
 80048c2:	2baa      	cmp	r3, #170	@ 0xaa
 80048c4:	f000 8144 	beq.w	8004b50 <SCSI_ProcessCmd+0x2b4>
 80048c8:	2baa      	cmp	r3, #170	@ 0xaa
 80048ca:	f300 8153 	bgt.w	8004b74 <SCSI_ProcessCmd+0x2d8>
 80048ce:	2ba8      	cmp	r3, #168	@ 0xa8
 80048d0:	f000 812c 	beq.w	8004b2c <SCSI_ProcessCmd+0x290>
 80048d4:	2ba8      	cmp	r3, #168	@ 0xa8
 80048d6:	f300 814d 	bgt.w	8004b74 <SCSI_ProcessCmd+0x2d8>
 80048da:	2b5a      	cmp	r3, #90	@ 0x5a
 80048dc:	f300 80c0 	bgt.w	8004a60 <SCSI_ProcessCmd+0x1c4>
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	f2c0 8147 	blt.w	8004b74 <SCSI_ProcessCmd+0x2d8>
 80048e6:	2b5a      	cmp	r3, #90	@ 0x5a
 80048e8:	f200 8144 	bhi.w	8004b74 <SCSI_ProcessCmd+0x2d8>
 80048ec:	a201      	add	r2, pc, #4	@ (adr r2, 80048f4 <SCSI_ProcessCmd+0x58>)
 80048ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048f2:	bf00      	nop
 80048f4:	08004a67 	.word	0x08004a67
 80048f8:	08004b75 	.word	0x08004b75
 80048fc:	08004b75 	.word	0x08004b75
 8004900:	08004a79 	.word	0x08004a79
 8004904:	08004b75 	.word	0x08004b75
 8004908:	08004b75 	.word	0x08004b75
 800490c:	08004b75 	.word	0x08004b75
 8004910:	08004b75 	.word	0x08004b75
 8004914:	08004b75 	.word	0x08004b75
 8004918:	08004b75 	.word	0x08004b75
 800491c:	08004b75 	.word	0x08004b75
 8004920:	08004b75 	.word	0x08004b75
 8004924:	08004b75 	.word	0x08004b75
 8004928:	08004b75 	.word	0x08004b75
 800492c:	08004b75 	.word	0x08004b75
 8004930:	08004b75 	.word	0x08004b75
 8004934:	08004b75 	.word	0x08004b75
 8004938:	08004b75 	.word	0x08004b75
 800493c:	08004a8b 	.word	0x08004a8b
 8004940:	08004b75 	.word	0x08004b75
 8004944:	08004b75 	.word	0x08004b75
 8004948:	08004b75 	.word	0x08004b75
 800494c:	08004b75 	.word	0x08004b75
 8004950:	08004b75 	.word	0x08004b75
 8004954:	08004b75 	.word	0x08004b75
 8004958:	08004b75 	.word	0x08004b75
 800495c:	08004ac1 	.word	0x08004ac1
 8004960:	08004a9d 	.word	0x08004a9d
 8004964:	08004b75 	.word	0x08004b75
 8004968:	08004b75 	.word	0x08004b75
 800496c:	08004aaf 	.word	0x08004aaf
 8004970:	08004b75 	.word	0x08004b75
 8004974:	08004b75 	.word	0x08004b75
 8004978:	08004b75 	.word	0x08004b75
 800497c:	08004b75 	.word	0x08004b75
 8004980:	08004ae5 	.word	0x08004ae5
 8004984:	08004b75 	.word	0x08004b75
 8004988:	08004af7 	.word	0x08004af7
 800498c:	08004b75 	.word	0x08004b75
 8004990:	08004b75 	.word	0x08004b75
 8004994:	08004b1b 	.word	0x08004b1b
 8004998:	08004b75 	.word	0x08004b75
 800499c:	08004b3f 	.word	0x08004b3f
 80049a0:	08004b75 	.word	0x08004b75
 80049a4:	08004b75 	.word	0x08004b75
 80049a8:	08004b75 	.word	0x08004b75
 80049ac:	08004b75 	.word	0x08004b75
 80049b0:	08004b63 	.word	0x08004b63
 80049b4:	08004b75 	.word	0x08004b75
 80049b8:	08004b75 	.word	0x08004b75
 80049bc:	08004b75 	.word	0x08004b75
 80049c0:	08004b75 	.word	0x08004b75
 80049c4:	08004b75 	.word	0x08004b75
 80049c8:	08004b75 	.word	0x08004b75
 80049cc:	08004b75 	.word	0x08004b75
 80049d0:	08004b75 	.word	0x08004b75
 80049d4:	08004b75 	.word	0x08004b75
 80049d8:	08004b75 	.word	0x08004b75
 80049dc:	08004b75 	.word	0x08004b75
 80049e0:	08004b75 	.word	0x08004b75
 80049e4:	08004b75 	.word	0x08004b75
 80049e8:	08004b75 	.word	0x08004b75
 80049ec:	08004b75 	.word	0x08004b75
 80049f0:	08004b75 	.word	0x08004b75
 80049f4:	08004b75 	.word	0x08004b75
 80049f8:	08004b75 	.word	0x08004b75
 80049fc:	08004b75 	.word	0x08004b75
 8004a00:	08004b75 	.word	0x08004b75
 8004a04:	08004b75 	.word	0x08004b75
 8004a08:	08004b75 	.word	0x08004b75
 8004a0c:	08004b75 	.word	0x08004b75
 8004a10:	08004b75 	.word	0x08004b75
 8004a14:	08004b75 	.word	0x08004b75
 8004a18:	08004b75 	.word	0x08004b75
 8004a1c:	08004b75 	.word	0x08004b75
 8004a20:	08004b75 	.word	0x08004b75
 8004a24:	08004b75 	.word	0x08004b75
 8004a28:	08004b75 	.word	0x08004b75
 8004a2c:	08004b75 	.word	0x08004b75
 8004a30:	08004b75 	.word	0x08004b75
 8004a34:	08004b75 	.word	0x08004b75
 8004a38:	08004b75 	.word	0x08004b75
 8004a3c:	08004b75 	.word	0x08004b75
 8004a40:	08004b75 	.word	0x08004b75
 8004a44:	08004b75 	.word	0x08004b75
 8004a48:	08004b75 	.word	0x08004b75
 8004a4c:	08004b75 	.word	0x08004b75
 8004a50:	08004b75 	.word	0x08004b75
 8004a54:	08004b75 	.word	0x08004b75
 8004a58:	08004b75 	.word	0x08004b75
 8004a5c:	08004ad3 	.word	0x08004ad3
 8004a60:	2b9e      	cmp	r3, #158	@ 0x9e
 8004a62:	d051      	beq.n	8004b08 <SCSI_ProcessCmd+0x26c>
 8004a64:	e086      	b.n	8004b74 <SCSI_ProcessCmd+0x2d8>
  {
    case SCSI_TEST_UNIT_READY:
      ret = SCSI_TestUnitReady(pdev, lun, cmd);
 8004a66:	7afb      	ldrb	r3, [r7, #11]
 8004a68:	687a      	ldr	r2, [r7, #4]
 8004a6a:	4619      	mov	r1, r3
 8004a6c:	68f8      	ldr	r0, [r7, #12]
 8004a6e:	f000 f893 	bl	8004b98 <SCSI_TestUnitReady>
 8004a72:	4603      	mov	r3, r0
 8004a74:	75fb      	strb	r3, [r7, #23]
      break;
 8004a76:	e089      	b.n	8004b8c <SCSI_ProcessCmd+0x2f0>

    case SCSI_REQUEST_SENSE:
      ret = SCSI_RequestSense(pdev, lun, cmd);
 8004a78:	7afb      	ldrb	r3, [r7, #11]
 8004a7a:	687a      	ldr	r2, [r7, #4]
 8004a7c:	4619      	mov	r1, r3
 8004a7e:	68f8      	ldr	r0, [r7, #12]
 8004a80:	f000 fb38 	bl	80050f4 <SCSI_RequestSense>
 8004a84:	4603      	mov	r3, r0
 8004a86:	75fb      	strb	r3, [r7, #23]
      break;
 8004a88:	e080      	b.n	8004b8c <SCSI_ProcessCmd+0x2f0>

    case SCSI_INQUIRY:
      ret = SCSI_Inquiry(pdev, lun, cmd);
 8004a8a:	7afb      	ldrb	r3, [r7, #11]
 8004a8c:	687a      	ldr	r2, [r7, #4]
 8004a8e:	4619      	mov	r1, r3
 8004a90:	68f8      	ldr	r0, [r7, #12]
 8004a92:	f000 f8d1 	bl	8004c38 <SCSI_Inquiry>
 8004a96:	4603      	mov	r3, r0
 8004a98:	75fb      	strb	r3, [r7, #23]
      break;
 8004a9a:	e077      	b.n	8004b8c <SCSI_ProcessCmd+0x2f0>

    case SCSI_START_STOP_UNIT:
      ret = SCSI_StartStopUnit(pdev, lun, cmd);
 8004a9c:	7afb      	ldrb	r3, [r7, #11]
 8004a9e:	687a      	ldr	r2, [r7, #4]
 8004aa0:	4619      	mov	r1, r3
 8004aa2:	68f8      	ldr	r0, [r7, #12]
 8004aa4:	f000 fbec 	bl	8005280 <SCSI_StartStopUnit>
 8004aa8:	4603      	mov	r3, r0
 8004aaa:	75fb      	strb	r3, [r7, #23]
      break;
 8004aac:	e06e      	b.n	8004b8c <SCSI_ProcessCmd+0x2f0>

    case SCSI_ALLOW_MEDIUM_REMOVAL:
      ret = SCSI_AllowPreventRemovable(pdev, lun, cmd);
 8004aae:	7afb      	ldrb	r3, [r7, #11]
 8004ab0:	687a      	ldr	r2, [r7, #4]
 8004ab2:	4619      	mov	r1, r3
 8004ab4:	68f8      	ldr	r0, [r7, #12]
 8004ab6:	f000 fc34 	bl	8005322 <SCSI_AllowPreventRemovable>
 8004aba:	4603      	mov	r3, r0
 8004abc:	75fb      	strb	r3, [r7, #23]
      break;
 8004abe:	e065      	b.n	8004b8c <SCSI_ProcessCmd+0x2f0>

    case SCSI_MODE_SENSE6:
      ret = SCSI_ModeSense6(pdev, lun, cmd);
 8004ac0:	7afb      	ldrb	r3, [r7, #11]
 8004ac2:	687a      	ldr	r2, [r7, #4]
 8004ac4:	4619      	mov	r1, r3
 8004ac6:	68f8      	ldr	r0, [r7, #12]
 8004ac8:	f000 fabc 	bl	8005044 <SCSI_ModeSense6>
 8004acc:	4603      	mov	r3, r0
 8004ace:	75fb      	strb	r3, [r7, #23]
      break;
 8004ad0:	e05c      	b.n	8004b8c <SCSI_ProcessCmd+0x2f0>

    case SCSI_MODE_SENSE10:
      ret = SCSI_ModeSense10(pdev, lun, cmd);
 8004ad2:	7afb      	ldrb	r3, [r7, #11]
 8004ad4:	687a      	ldr	r2, [r7, #4]
 8004ad6:	4619      	mov	r1, r3
 8004ad8:	68f8      	ldr	r0, [r7, #12]
 8004ada:	f000 fadf 	bl	800509c <SCSI_ModeSense10>
 8004ade:	4603      	mov	r3, r0
 8004ae0:	75fb      	strb	r3, [r7, #23]
      break;
 8004ae2:	e053      	b.n	8004b8c <SCSI_ProcessCmd+0x2f0>

    case SCSI_READ_FORMAT_CAPACITIES:
      ret = SCSI_ReadFormatCapacity(pdev, lun, cmd);
 8004ae4:	7afb      	ldrb	r3, [r7, #11]
 8004ae6:	687a      	ldr	r2, [r7, #4]
 8004ae8:	4619      	mov	r1, r3
 8004aea:	68f8      	ldr	r0, [r7, #12]
 8004aec:	f000 fa37 	bl	8004f5e <SCSI_ReadFormatCapacity>
 8004af0:	4603      	mov	r3, r0
 8004af2:	75fb      	strb	r3, [r7, #23]
      break;
 8004af4:	e04a      	b.n	8004b8c <SCSI_ProcessCmd+0x2f0>

    case SCSI_READ_CAPACITY10:
      ret = SCSI_ReadCapacity10(pdev, lun, cmd);
 8004af6:	7afb      	ldrb	r3, [r7, #11]
 8004af8:	687a      	ldr	r2, [r7, #4]
 8004afa:	4619      	mov	r1, r3
 8004afc:	68f8      	ldr	r0, [r7, #12]
 8004afe:	f000 f90f 	bl	8004d20 <SCSI_ReadCapacity10>
 8004b02:	4603      	mov	r3, r0
 8004b04:	75fb      	strb	r3, [r7, #23]
      break;
 8004b06:	e041      	b.n	8004b8c <SCSI_ProcessCmd+0x2f0>

    case SCSI_READ_CAPACITY16:
      ret = SCSI_ReadCapacity16(pdev, lun, cmd);
 8004b08:	7afb      	ldrb	r3, [r7, #11]
 8004b0a:	687a      	ldr	r2, [r7, #4]
 8004b0c:	4619      	mov	r1, r3
 8004b0e:	68f8      	ldr	r0, [r7, #12]
 8004b10:	f000 f97b 	bl	8004e0a <SCSI_ReadCapacity16>
 8004b14:	4603      	mov	r3, r0
 8004b16:	75fb      	strb	r3, [r7, #23]
      break;
 8004b18:	e038      	b.n	8004b8c <SCSI_ProcessCmd+0x2f0>

    case SCSI_READ10:
      ret = SCSI_Read10(pdev, lun, cmd);
 8004b1a:	7afb      	ldrb	r3, [r7, #11]
 8004b1c:	687a      	ldr	r2, [r7, #4]
 8004b1e:	4619      	mov	r1, r3
 8004b20:	68f8      	ldr	r0, [r7, #12]
 8004b22:	f000 fc27 	bl	8005374 <SCSI_Read10>
 8004b26:	4603      	mov	r3, r0
 8004b28:	75fb      	strb	r3, [r7, #23]
      break;
 8004b2a:	e02f      	b.n	8004b8c <SCSI_ProcessCmd+0x2f0>

    case SCSI_READ12:
      ret = SCSI_Read12(pdev, lun, cmd);
 8004b2c:	7afb      	ldrb	r3, [r7, #11]
 8004b2e:	687a      	ldr	r2, [r7, #4]
 8004b30:	4619      	mov	r1, r3
 8004b32:	68f8      	ldr	r0, [r7, #12]
 8004b34:	f000 fcbe 	bl	80054b4 <SCSI_Read12>
 8004b38:	4603      	mov	r3, r0
 8004b3a:	75fb      	strb	r3, [r7, #23]
      break;
 8004b3c:	e026      	b.n	8004b8c <SCSI_ProcessCmd+0x2f0>

    case SCSI_WRITE10:
      ret = SCSI_Write10(pdev, lun, cmd);
 8004b3e:	7afb      	ldrb	r3, [r7, #11]
 8004b40:	687a      	ldr	r2, [r7, #4]
 8004b42:	4619      	mov	r1, r3
 8004b44:	68f8      	ldr	r0, [r7, #12]
 8004b46:	f000 fd60 	bl	800560a <SCSI_Write10>
 8004b4a:	4603      	mov	r3, r0
 8004b4c:	75fb      	strb	r3, [r7, #23]
      break;
 8004b4e:	e01d      	b.n	8004b8c <SCSI_ProcessCmd+0x2f0>

    case SCSI_WRITE12:
      ret = SCSI_Write12(pdev, lun, cmd);
 8004b50:	7afb      	ldrb	r3, [r7, #11]
 8004b52:	687a      	ldr	r2, [r7, #4]
 8004b54:	4619      	mov	r1, r3
 8004b56:	68f8      	ldr	r0, [r7, #12]
 8004b58:	f000 fe1c 	bl	8005794 <SCSI_Write12>
 8004b5c:	4603      	mov	r3, r0
 8004b5e:	75fb      	strb	r3, [r7, #23]
      break;
 8004b60:	e014      	b.n	8004b8c <SCSI_ProcessCmd+0x2f0>

    case SCSI_VERIFY10:
      ret = SCSI_Verify10(pdev, lun, cmd);
 8004b62:	7afb      	ldrb	r3, [r7, #11]
 8004b64:	687a      	ldr	r2, [r7, #4]
 8004b66:	4619      	mov	r1, r3
 8004b68:	68f8      	ldr	r0, [r7, #12]
 8004b6a:	f000 fee8 	bl	800593e <SCSI_Verify10>
 8004b6e:	4603      	mov	r3, r0
 8004b70:	75fb      	strb	r3, [r7, #23]
      break;
 8004b72:	e00b      	b.n	8004b8c <SCSI_ProcessCmd+0x2f0>

    default:
      SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_CDB);
 8004b74:	7af9      	ldrb	r1, [r7, #11]
 8004b76:	2320      	movs	r3, #32
 8004b78:	2205      	movs	r2, #5
 8004b7a:	68f8      	ldr	r0, [r7, #12]
 8004b7c:	f000 fb39 	bl	80051f2 <SCSI_SenseCode>
      hmsc->bot_status = USBD_BOT_STATUS_ERROR;
 8004b80:	693b      	ldr	r3, [r7, #16]
 8004b82:	2202      	movs	r2, #2
 8004b84:	725a      	strb	r2, [r3, #9]
      ret = -1;
 8004b86:	23ff      	movs	r3, #255	@ 0xff
 8004b88:	75fb      	strb	r3, [r7, #23]
      break;
 8004b8a:	bf00      	nop
  }

  return ret;
 8004b8c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8004b90:	4618      	mov	r0, r3
 8004b92:	3718      	adds	r7, #24
 8004b94:	46bd      	mov	sp, r7
 8004b96:	bd80      	pop	{r7, pc}

08004b98 <SCSI_TestUnitReady>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_TestUnitReady(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8004b98:	b580      	push	{r7, lr}
 8004b9a:	b086      	sub	sp, #24
 8004b9c:	af00      	add	r7, sp, #0
 8004b9e:	60f8      	str	r0, [r7, #12]
 8004ba0:	460b      	mov	r3, r1
 8004ba2:	607a      	str	r2, [r7, #4]
 8004ba4:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8004bac:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 8004bae:	697b      	ldr	r3, [r7, #20]
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d102      	bne.n	8004bba <SCSI_TestUnitReady+0x22>
  {
    return -1;
 8004bb4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8004bb8:	e03a      	b.n	8004c30 <SCSI_TestUnitReady+0x98>
  }

  /* case 9 : Hi > D0 */
  if (hmsc->cbw.dDataLength != 0U)
 8004bba:	697b      	ldr	r3, [r7, #20]
 8004bbc:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d00a      	beq.n	8004bda <SCSI_TestUnitReady+0x42>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8004bc4:	697b      	ldr	r3, [r7, #20]
 8004bc6:	f893 121d 	ldrb.w	r1, [r3, #541]	@ 0x21d
 8004bca:	2320      	movs	r3, #32
 8004bcc:	2205      	movs	r2, #5
 8004bce:	68f8      	ldr	r0, [r7, #12]
 8004bd0:	f000 fb0f 	bl	80051f2 <SCSI_SenseCode>

    return -1;
 8004bd4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8004bd8:	e02a      	b.n	8004c30 <SCSI_TestUnitReady+0x98>
  }

  if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 8004bda:	697b      	ldr	r3, [r7, #20]
 8004bdc:	f893 3262 	ldrb.w	r3, [r3, #610]	@ 0x262
 8004be0:	2b02      	cmp	r3, #2
 8004be2:	d10b      	bne.n	8004bfc <SCSI_TestUnitReady+0x64>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8004be4:	7af9      	ldrb	r1, [r7, #11]
 8004be6:	233a      	movs	r3, #58	@ 0x3a
 8004be8:	2202      	movs	r2, #2
 8004bea:	68f8      	ldr	r0, [r7, #12]
 8004bec:	f000 fb01 	bl	80051f2 <SCSI_SenseCode>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 8004bf0:	697b      	ldr	r3, [r7, #20]
 8004bf2:	2205      	movs	r2, #5
 8004bf4:	721a      	strb	r2, [r3, #8]
    return -1;
 8004bf6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8004bfa:	e019      	b.n	8004c30 <SCSI_TestUnitReady+0x98>
  }

  if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8004c02:	689b      	ldr	r3, [r3, #8]
 8004c04:	7afa      	ldrb	r2, [r7, #11]
 8004c06:	4610      	mov	r0, r2
 8004c08:	4798      	blx	r3
 8004c0a:	4603      	mov	r3, r0
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d00b      	beq.n	8004c28 <SCSI_TestUnitReady+0x90>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8004c10:	7af9      	ldrb	r1, [r7, #11]
 8004c12:	233a      	movs	r3, #58	@ 0x3a
 8004c14:	2202      	movs	r2, #2
 8004c16:	68f8      	ldr	r0, [r7, #12]
 8004c18:	f000 faeb 	bl	80051f2 <SCSI_SenseCode>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 8004c1c:	697b      	ldr	r3, [r7, #20]
 8004c1e:	2205      	movs	r2, #5
 8004c20:	721a      	strb	r2, [r3, #8]

    return -1;
 8004c22:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8004c26:	e003      	b.n	8004c30 <SCSI_TestUnitReady+0x98>
  }
  hmsc->bot_data_length = 0U;
 8004c28:	697b      	ldr	r3, [r7, #20]
 8004c2a:	2200      	movs	r2, #0
 8004c2c:	60da      	str	r2, [r3, #12]

  return 0;
 8004c2e:	2300      	movs	r3, #0
}
 8004c30:	4618      	mov	r0, r3
 8004c32:	3718      	adds	r7, #24
 8004c34:	46bd      	mov	sp, r7
 8004c36:	bd80      	pop	{r7, pc}

08004c38 <SCSI_Inquiry>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Inquiry(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8004c38:	b580      	push	{r7, lr}
 8004c3a:	b088      	sub	sp, #32
 8004c3c:	af00      	add	r7, sp, #0
 8004c3e:	60f8      	str	r0, [r7, #12]
 8004c40:	460b      	mov	r3, r1
 8004c42:	607a      	str	r2, [r7, #4]
 8004c44:	72fb      	strb	r3, [r7, #11]
  uint8_t *pPage;
  uint16_t len;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8004c4c:	61bb      	str	r3, [r7, #24]

  if (hmsc == NULL)
 8004c4e:	69bb      	ldr	r3, [r7, #24]
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d102      	bne.n	8004c5a <SCSI_Inquiry+0x22>
  {
    return -1;
 8004c54:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8004c58:	e059      	b.n	8004d0e <SCSI_Inquiry+0xd6>
  }

  if (hmsc->cbw.dDataLength == 0U)
 8004c5a:	69bb      	ldr	r3, [r7, #24]
 8004c5c:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d10a      	bne.n	8004c7a <SCSI_Inquiry+0x42>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8004c64:	69bb      	ldr	r3, [r7, #24]
 8004c66:	f893 121d 	ldrb.w	r1, [r3, #541]	@ 0x21d
 8004c6a:	2320      	movs	r3, #32
 8004c6c:	2205      	movs	r2, #5
 8004c6e:	68f8      	ldr	r0, [r7, #12]
 8004c70:	f000 fabf 	bl	80051f2 <SCSI_SenseCode>
    return -1;
 8004c74:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8004c78:	e049      	b.n	8004d0e <SCSI_Inquiry+0xd6>
  }

  if ((params[1] & 0x01U) != 0U) /* Evpd is set */
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	3301      	adds	r3, #1
 8004c7e:	781b      	ldrb	r3, [r3, #0]
 8004c80:	f003 0301 	and.w	r3, r3, #1
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d020      	beq.n	8004cca <SCSI_Inquiry+0x92>
  {
    if (params[2] == 0U) /* Request for Supported Vital Product Data Pages*/
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	3302      	adds	r3, #2
 8004c8c:	781b      	ldrb	r3, [r3, #0]
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d105      	bne.n	8004c9e <SCSI_Inquiry+0x66>
    {
      (void)SCSI_UpdateBotData(hmsc, MSC_Page00_Inquiry_Data, LENGTH_INQUIRY_PAGE00);
 8004c92:	2206      	movs	r2, #6
 8004c94:	4920      	ldr	r1, [pc, #128]	@ (8004d18 <SCSI_Inquiry+0xe0>)
 8004c96:	69b8      	ldr	r0, [r7, #24]
 8004c98:	f000 ffb4 	bl	8005c04 <SCSI_UpdateBotData>
 8004c9c:	e036      	b.n	8004d0c <SCSI_Inquiry+0xd4>
    }
    else if (params[2] == 0x80U) /* Request for VPD page 0x80 Unit Serial Number */
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	3302      	adds	r3, #2
 8004ca2:	781b      	ldrb	r3, [r3, #0]
 8004ca4:	2b80      	cmp	r3, #128	@ 0x80
 8004ca6:	d105      	bne.n	8004cb4 <SCSI_Inquiry+0x7c>
    {
      (void)SCSI_UpdateBotData(hmsc, MSC_Page80_Inquiry_Data, LENGTH_INQUIRY_PAGE80);
 8004ca8:	2208      	movs	r2, #8
 8004caa:	491c      	ldr	r1, [pc, #112]	@ (8004d1c <SCSI_Inquiry+0xe4>)
 8004cac:	69b8      	ldr	r0, [r7, #24]
 8004cae:	f000 ffa9 	bl	8005c04 <SCSI_UpdateBotData>
 8004cb2:	e02b      	b.n	8004d0c <SCSI_Inquiry+0xd4>
    }
    else /* Request Not supported */
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST,
 8004cb4:	69bb      	ldr	r3, [r7, #24]
 8004cb6:	f893 121d 	ldrb.w	r1, [r3, #541]	@ 0x21d
 8004cba:	2324      	movs	r3, #36	@ 0x24
 8004cbc:	2205      	movs	r2, #5
 8004cbe:	68f8      	ldr	r0, [r7, #12]
 8004cc0:	f000 fa97 	bl	80051f2 <SCSI_SenseCode>
                     INVALID_FIELED_IN_COMMAND);

      return -1;
 8004cc4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8004cc8:	e021      	b.n	8004d0e <SCSI_Inquiry+0xd6>
    }
  }
  else
  {
    pPage = (uint8_t *) &((USBD_StorageTypeDef *)pdev->pUserData)->pInquiry[lun * STANDARD_INQUIRY_DATA_LEN];
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8004cd0:	69d9      	ldr	r1, [r3, #28]
 8004cd2:	7afa      	ldrb	r2, [r7, #11]
 8004cd4:	4613      	mov	r3, r2
 8004cd6:	00db      	lsls	r3, r3, #3
 8004cd8:	4413      	add	r3, r2
 8004cda:	009b      	lsls	r3, r3, #2
 8004cdc:	440b      	add	r3, r1
 8004cde:	617b      	str	r3, [r7, #20]
    len = (uint16_t)pPage[4] + 5U;
 8004ce0:	697b      	ldr	r3, [r7, #20]
 8004ce2:	3304      	adds	r3, #4
 8004ce4:	781b      	ldrb	r3, [r3, #0]
 8004ce6:	3305      	adds	r3, #5
 8004ce8:	83fb      	strh	r3, [r7, #30]

    if (params[4] <= len)
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	3304      	adds	r3, #4
 8004cee:	781b      	ldrb	r3, [r3, #0]
 8004cf0:	461a      	mov	r2, r3
 8004cf2:	8bfb      	ldrh	r3, [r7, #30]
 8004cf4:	4293      	cmp	r3, r2
 8004cf6:	d303      	bcc.n	8004d00 <SCSI_Inquiry+0xc8>
    {
      len = params[4];
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	3304      	adds	r3, #4
 8004cfc:	781b      	ldrb	r3, [r3, #0]
 8004cfe:	83fb      	strh	r3, [r7, #30]
    }

    (void)SCSI_UpdateBotData(hmsc, pPage, len);
 8004d00:	8bfb      	ldrh	r3, [r7, #30]
 8004d02:	461a      	mov	r2, r3
 8004d04:	6979      	ldr	r1, [r7, #20]
 8004d06:	69b8      	ldr	r0, [r7, #24]
 8004d08:	f000 ff7c 	bl	8005c04 <SCSI_UpdateBotData>
  }

  return 0;
 8004d0c:	2300      	movs	r3, #0
}
 8004d0e:	4618      	mov	r0, r3
 8004d10:	3720      	adds	r7, #32
 8004d12:	46bd      	mov	sp, r7
 8004d14:	bd80      	pop	{r7, pc}
 8004d16:	bf00      	nop
 8004d18:	200000b0 	.word	0x200000b0
 8004d1c:	200000b8 	.word	0x200000b8

08004d20 <SCSI_ReadCapacity10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ReadCapacity10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8004d20:	b580      	push	{r7, lr}
 8004d22:	b086      	sub	sp, #24
 8004d24:	af00      	add	r7, sp, #0
 8004d26:	60f8      	str	r0, [r7, #12]
 8004d28:	460b      	mov	r3, r1
 8004d2a:	607a      	str	r2, [r7, #4]
 8004d2c:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8004d34:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 8004d36:	697b      	ldr	r3, [r7, #20]
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d102      	bne.n	8004d42 <SCSI_ReadCapacity10+0x22>
  {
    return -1;
 8004d3c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8004d40:	e05f      	b.n	8004e02 <SCSI_ReadCapacity10+0xe2>
  }

  ret = ((USBD_StorageTypeDef *)pdev->pUserData)->GetCapacity(lun, &hmsc->scsi_blk_nbr, &hmsc->scsi_blk_size);
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8004d48:	685b      	ldr	r3, [r3, #4]
 8004d4a:	697a      	ldr	r2, [r7, #20]
 8004d4c:	f502 711a 	add.w	r1, r2, #616	@ 0x268
 8004d50:	697a      	ldr	r2, [r7, #20]
 8004d52:	f502 7219 	add.w	r2, r2, #612	@ 0x264
 8004d56:	7af8      	ldrb	r0, [r7, #11]
 8004d58:	4798      	blx	r3
 8004d5a:	4603      	mov	r3, r0
 8004d5c:	74fb      	strb	r3, [r7, #19]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 8004d5e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d104      	bne.n	8004d70 <SCSI_ReadCapacity10+0x50>
 8004d66:	697b      	ldr	r3, [r7, #20]
 8004d68:	f893 3262 	ldrb.w	r3, [r3, #610]	@ 0x262
 8004d6c:	2b02      	cmp	r3, #2
 8004d6e:	d108      	bne.n	8004d82 <SCSI_ReadCapacity10+0x62>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8004d70:	7af9      	ldrb	r1, [r7, #11]
 8004d72:	233a      	movs	r3, #58	@ 0x3a
 8004d74:	2202      	movs	r2, #2
 8004d76:	68f8      	ldr	r0, [r7, #12]
 8004d78:	f000 fa3b 	bl	80051f2 <SCSI_SenseCode>
    return -1;
 8004d7c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8004d80:	e03f      	b.n	8004e02 <SCSI_ReadCapacity10+0xe2>
  }

  hmsc->bot_data[0] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 24);
 8004d82:	697b      	ldr	r3, [r7, #20]
 8004d84:	f8d3 3268 	ldr.w	r3, [r3, #616]	@ 0x268
 8004d88:	3b01      	subs	r3, #1
 8004d8a:	0e1b      	lsrs	r3, r3, #24
 8004d8c:	b2da      	uxtb	r2, r3
 8004d8e:	697b      	ldr	r3, [r7, #20]
 8004d90:	741a      	strb	r2, [r3, #16]
  hmsc->bot_data[1] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 16);
 8004d92:	697b      	ldr	r3, [r7, #20]
 8004d94:	f8d3 3268 	ldr.w	r3, [r3, #616]	@ 0x268
 8004d98:	3b01      	subs	r3, #1
 8004d9a:	0c1b      	lsrs	r3, r3, #16
 8004d9c:	b2da      	uxtb	r2, r3
 8004d9e:	697b      	ldr	r3, [r7, #20]
 8004da0:	745a      	strb	r2, [r3, #17]
  hmsc->bot_data[2] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >>  8);
 8004da2:	697b      	ldr	r3, [r7, #20]
 8004da4:	f8d3 3268 	ldr.w	r3, [r3, #616]	@ 0x268
 8004da8:	3b01      	subs	r3, #1
 8004daa:	0a1b      	lsrs	r3, r3, #8
 8004dac:	b2da      	uxtb	r2, r3
 8004dae:	697b      	ldr	r3, [r7, #20]
 8004db0:	749a      	strb	r2, [r3, #18]
  hmsc->bot_data[3] = (uint8_t)(hmsc->scsi_blk_nbr - 1U);
 8004db2:	697b      	ldr	r3, [r7, #20]
 8004db4:	f8d3 3268 	ldr.w	r3, [r3, #616]	@ 0x268
 8004db8:	b2db      	uxtb	r3, r3
 8004dba:	3b01      	subs	r3, #1
 8004dbc:	b2da      	uxtb	r2, r3
 8004dbe:	697b      	ldr	r3, [r7, #20]
 8004dc0:	74da      	strb	r2, [r3, #19]

  hmsc->bot_data[4] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 8004dc2:	697b      	ldr	r3, [r7, #20]
 8004dc4:	f8b3 3264 	ldrh.w	r3, [r3, #612]	@ 0x264
 8004dc8:	161b      	asrs	r3, r3, #24
 8004dca:	b2da      	uxtb	r2, r3
 8004dcc:	697b      	ldr	r3, [r7, #20]
 8004dce:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)(hmsc->scsi_blk_size >>  16);
 8004dd0:	697b      	ldr	r3, [r7, #20]
 8004dd2:	f8b3 3264 	ldrh.w	r3, [r3, #612]	@ 0x264
 8004dd6:	141b      	asrs	r3, r3, #16
 8004dd8:	b2da      	uxtb	r2, r3
 8004dda:	697b      	ldr	r3, [r7, #20]
 8004ddc:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 8004dde:	697b      	ldr	r3, [r7, #20]
 8004de0:	f8b3 3264 	ldrh.w	r3, [r3, #612]	@ 0x264
 8004de4:	0a1b      	lsrs	r3, r3, #8
 8004de6:	b29b      	uxth	r3, r3
 8004de8:	b2da      	uxtb	r2, r3
 8004dea:	697b      	ldr	r3, [r7, #20]
 8004dec:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(hmsc->scsi_blk_size);
 8004dee:	697b      	ldr	r3, [r7, #20]
 8004df0:	f8b3 3264 	ldrh.w	r3, [r3, #612]	@ 0x264
 8004df4:	b2da      	uxtb	r2, r3
 8004df6:	697b      	ldr	r3, [r7, #20]
 8004df8:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data_length = 8U;
 8004dfa:	697b      	ldr	r3, [r7, #20]
 8004dfc:	2208      	movs	r2, #8
 8004dfe:	60da      	str	r2, [r3, #12]

  return 0;
 8004e00:	2300      	movs	r3, #0

}
 8004e02:	4618      	mov	r0, r3
 8004e04:	3718      	adds	r7, #24
 8004e06:	46bd      	mov	sp, r7
 8004e08:	bd80      	pop	{r7, pc}

08004e0a <SCSI_ReadCapacity16>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ReadCapacity16(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8004e0a:	b580      	push	{r7, lr}
 8004e0c:	b088      	sub	sp, #32
 8004e0e:	af00      	add	r7, sp, #0
 8004e10:	60f8      	str	r0, [r7, #12]
 8004e12:	460b      	mov	r3, r1
 8004e14:	607a      	str	r2, [r7, #4]
 8004e16:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  uint8_t idx;
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8004e1e:	61bb      	str	r3, [r7, #24]

  if (hmsc == NULL)
 8004e20:	69bb      	ldr	r3, [r7, #24]
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d102      	bne.n	8004e2c <SCSI_ReadCapacity16+0x22>
  {
    return -1;
 8004e26:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8004e2a:	e094      	b.n	8004f56 <SCSI_ReadCapacity16+0x14c>
  }

  ret = ((USBD_StorageTypeDef *)pdev->pUserData)->GetCapacity(lun, &hmsc->scsi_blk_nbr, &hmsc->scsi_blk_size);
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8004e32:	685b      	ldr	r3, [r3, #4]
 8004e34:	69ba      	ldr	r2, [r7, #24]
 8004e36:	f502 711a 	add.w	r1, r2, #616	@ 0x268
 8004e3a:	69ba      	ldr	r2, [r7, #24]
 8004e3c:	f502 7219 	add.w	r2, r2, #612	@ 0x264
 8004e40:	7af8      	ldrb	r0, [r7, #11]
 8004e42:	4798      	blx	r3
 8004e44:	4603      	mov	r3, r0
 8004e46:	75fb      	strb	r3, [r7, #23]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 8004e48:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d104      	bne.n	8004e5a <SCSI_ReadCapacity16+0x50>
 8004e50:	69bb      	ldr	r3, [r7, #24]
 8004e52:	f893 3262 	ldrb.w	r3, [r3, #610]	@ 0x262
 8004e56:	2b02      	cmp	r3, #2
 8004e58:	d108      	bne.n	8004e6c <SCSI_ReadCapacity16+0x62>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8004e5a:	7af9      	ldrb	r1, [r7, #11]
 8004e5c:	233a      	movs	r3, #58	@ 0x3a
 8004e5e:	2202      	movs	r2, #2
 8004e60:	68f8      	ldr	r0, [r7, #12]
 8004e62:	f000 f9c6 	bl	80051f2 <SCSI_SenseCode>
    return -1;
 8004e66:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8004e6a:	e074      	b.n	8004f56 <SCSI_ReadCapacity16+0x14c>
  }

  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	330a      	adds	r3, #10
 8004e70:	781b      	ldrb	r3, [r3, #0]
 8004e72:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[11] << 16) |
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	330b      	adds	r3, #11
 8004e78:	781b      	ldrb	r3, [r3, #0]
 8004e7a:	041b      	lsls	r3, r3, #16
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8004e7c:	431a      	orrs	r2, r3
                          ((uint32_t)params[12] <<  8) |
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	330c      	adds	r3, #12
 8004e82:	781b      	ldrb	r3, [r3, #0]
 8004e84:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[11] << 16) |
 8004e86:	4313      	orrs	r3, r2
                          (uint32_t)params[13];
 8004e88:	687a      	ldr	r2, [r7, #4]
 8004e8a:	320d      	adds	r2, #13
 8004e8c:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[12] <<  8) |
 8004e8e:	431a      	orrs	r2, r3
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8004e90:	69bb      	ldr	r3, [r7, #24]
 8004e92:	60da      	str	r2, [r3, #12]

  for (idx = 0U; idx < hmsc->bot_data_length; idx++)
 8004e94:	2300      	movs	r3, #0
 8004e96:	77fb      	strb	r3, [r7, #31]
 8004e98:	e007      	b.n	8004eaa <SCSI_ReadCapacity16+0xa0>
  {
    hmsc->bot_data[idx] = 0U;
 8004e9a:	7ffb      	ldrb	r3, [r7, #31]
 8004e9c:	69ba      	ldr	r2, [r7, #24]
 8004e9e:	4413      	add	r3, r2
 8004ea0:	2200      	movs	r2, #0
 8004ea2:	741a      	strb	r2, [r3, #16]
  for (idx = 0U; idx < hmsc->bot_data_length; idx++)
 8004ea4:	7ffb      	ldrb	r3, [r7, #31]
 8004ea6:	3301      	adds	r3, #1
 8004ea8:	77fb      	strb	r3, [r7, #31]
 8004eaa:	7ffa      	ldrb	r2, [r7, #31]
 8004eac:	69bb      	ldr	r3, [r7, #24]
 8004eae:	68db      	ldr	r3, [r3, #12]
 8004eb0:	429a      	cmp	r2, r3
 8004eb2:	d3f2      	bcc.n	8004e9a <SCSI_ReadCapacity16+0x90>
  }

  hmsc->bot_data[4] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 24);
 8004eb4:	69bb      	ldr	r3, [r7, #24]
 8004eb6:	f8d3 3268 	ldr.w	r3, [r3, #616]	@ 0x268
 8004eba:	3b01      	subs	r3, #1
 8004ebc:	0e1b      	lsrs	r3, r3, #24
 8004ebe:	b2da      	uxtb	r2, r3
 8004ec0:	69bb      	ldr	r3, [r7, #24]
 8004ec2:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 16);
 8004ec4:	69bb      	ldr	r3, [r7, #24]
 8004ec6:	f8d3 3268 	ldr.w	r3, [r3, #616]	@ 0x268
 8004eca:	3b01      	subs	r3, #1
 8004ecc:	0c1b      	lsrs	r3, r3, #16
 8004ece:	b2da      	uxtb	r2, r3
 8004ed0:	69bb      	ldr	r3, [r7, #24]
 8004ed2:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >>  8);
 8004ed4:	69bb      	ldr	r3, [r7, #24]
 8004ed6:	f8d3 3268 	ldr.w	r3, [r3, #616]	@ 0x268
 8004eda:	3b01      	subs	r3, #1
 8004edc:	0a1b      	lsrs	r3, r3, #8
 8004ede:	b2da      	uxtb	r2, r3
 8004ee0:	69bb      	ldr	r3, [r7, #24]
 8004ee2:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(hmsc->scsi_blk_nbr - 1U);
 8004ee4:	69bb      	ldr	r3, [r7, #24]
 8004ee6:	f8d3 3268 	ldr.w	r3, [r3, #616]	@ 0x268
 8004eea:	b2db      	uxtb	r3, r3
 8004eec:	3b01      	subs	r3, #1
 8004eee:	b2da      	uxtb	r2, r3
 8004ef0:	69bb      	ldr	r3, [r7, #24]
 8004ef2:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data[8] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 8004ef4:	69bb      	ldr	r3, [r7, #24]
 8004ef6:	f8b3 3264 	ldrh.w	r3, [r3, #612]	@ 0x264
 8004efa:	161b      	asrs	r3, r3, #24
 8004efc:	b2da      	uxtb	r2, r3
 8004efe:	69bb      	ldr	r3, [r7, #24]
 8004f00:	761a      	strb	r2, [r3, #24]
  hmsc->bot_data[9] = (uint8_t)(hmsc->scsi_blk_size >>  16);
 8004f02:	69bb      	ldr	r3, [r7, #24]
 8004f04:	f8b3 3264 	ldrh.w	r3, [r3, #612]	@ 0x264
 8004f08:	141b      	asrs	r3, r3, #16
 8004f0a:	b2da      	uxtb	r2, r3
 8004f0c:	69bb      	ldr	r3, [r7, #24]
 8004f0e:	765a      	strb	r2, [r3, #25]
  hmsc->bot_data[10] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 8004f10:	69bb      	ldr	r3, [r7, #24]
 8004f12:	f8b3 3264 	ldrh.w	r3, [r3, #612]	@ 0x264
 8004f16:	0a1b      	lsrs	r3, r3, #8
 8004f18:	b29b      	uxth	r3, r3
 8004f1a:	b2da      	uxtb	r2, r3
 8004f1c:	69bb      	ldr	r3, [r7, #24]
 8004f1e:	769a      	strb	r2, [r3, #26]
  hmsc->bot_data[11] = (uint8_t)(hmsc->scsi_blk_size);
 8004f20:	69bb      	ldr	r3, [r7, #24]
 8004f22:	f8b3 3264 	ldrh.w	r3, [r3, #612]	@ 0x264
 8004f26:	b2da      	uxtb	r2, r3
 8004f28:	69bb      	ldr	r3, [r7, #24]
 8004f2a:	76da      	strb	r2, [r3, #27]

  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	330a      	adds	r3, #10
 8004f30:	781b      	ldrb	r3, [r3, #0]
 8004f32:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[11] << 16) |
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	330b      	adds	r3, #11
 8004f38:	781b      	ldrb	r3, [r3, #0]
 8004f3a:	041b      	lsls	r3, r3, #16
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8004f3c:	431a      	orrs	r2, r3
                          ((uint32_t)params[12] <<  8) |
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	330c      	adds	r3, #12
 8004f42:	781b      	ldrb	r3, [r3, #0]
 8004f44:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[11] << 16) |
 8004f46:	4313      	orrs	r3, r2
                          (uint32_t)params[13];
 8004f48:	687a      	ldr	r2, [r7, #4]
 8004f4a:	320d      	adds	r2, #13
 8004f4c:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[12] <<  8) |
 8004f4e:	431a      	orrs	r2, r3
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8004f50:	69bb      	ldr	r3, [r7, #24]
 8004f52:	60da      	str	r2, [r3, #12]

  return 0;
 8004f54:	2300      	movs	r3, #0
}
 8004f56:	4618      	mov	r0, r3
 8004f58:	3720      	adds	r7, #32
 8004f5a:	46bd      	mov	sp, r7
 8004f5c:	bd80      	pop	{r7, pc}

08004f5e <SCSI_ReadFormatCapacity>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ReadFormatCapacity(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8004f5e:	b580      	push	{r7, lr}
 8004f60:	b088      	sub	sp, #32
 8004f62:	af00      	add	r7, sp, #0
 8004f64:	60f8      	str	r0, [r7, #12]
 8004f66:	460b      	mov	r3, r1
 8004f68:	607a      	str	r2, [r7, #4]
 8004f6a:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  uint16_t blk_size;
  uint32_t blk_nbr;
  uint16_t i;
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8004f72:	61bb      	str	r3, [r7, #24]

  if (hmsc == NULL)
 8004f74:	69bb      	ldr	r3, [r7, #24]
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d102      	bne.n	8004f80 <SCSI_ReadFormatCapacity+0x22>
  {
    return -1;
 8004f7a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8004f7e:	e05c      	b.n	800503a <SCSI_ReadFormatCapacity+0xdc>
  }

  ret = ((USBD_StorageTypeDef *)pdev->pUserData)->GetCapacity(lun, &blk_nbr, &blk_size);
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8004f86:	685b      	ldr	r3, [r3, #4]
 8004f88:	f107 0214 	add.w	r2, r7, #20
 8004f8c:	f107 0110 	add.w	r1, r7, #16
 8004f90:	7af8      	ldrb	r0, [r7, #11]
 8004f92:	4798      	blx	r3
 8004f94:	4603      	mov	r3, r0
 8004f96:	75fb      	strb	r3, [r7, #23]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 8004f98:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d104      	bne.n	8004faa <SCSI_ReadFormatCapacity+0x4c>
 8004fa0:	69bb      	ldr	r3, [r7, #24]
 8004fa2:	f893 3262 	ldrb.w	r3, [r3, #610]	@ 0x262
 8004fa6:	2b02      	cmp	r3, #2
 8004fa8:	d108      	bne.n	8004fbc <SCSI_ReadFormatCapacity+0x5e>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8004faa:	7af9      	ldrb	r1, [r7, #11]
 8004fac:	233a      	movs	r3, #58	@ 0x3a
 8004fae:	2202      	movs	r2, #2
 8004fb0:	68f8      	ldr	r0, [r7, #12]
 8004fb2:	f000 f91e 	bl	80051f2 <SCSI_SenseCode>
    return -1;
 8004fb6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8004fba:	e03e      	b.n	800503a <SCSI_ReadFormatCapacity+0xdc>
  }

  for (i = 0U; i < 12U ; i++)
 8004fbc:	2300      	movs	r3, #0
 8004fbe:	83fb      	strh	r3, [r7, #30]
 8004fc0:	e007      	b.n	8004fd2 <SCSI_ReadFormatCapacity+0x74>
  {
    hmsc->bot_data[i] = 0U;
 8004fc2:	8bfb      	ldrh	r3, [r7, #30]
 8004fc4:	69ba      	ldr	r2, [r7, #24]
 8004fc6:	4413      	add	r3, r2
 8004fc8:	2200      	movs	r2, #0
 8004fca:	741a      	strb	r2, [r3, #16]
  for (i = 0U; i < 12U ; i++)
 8004fcc:	8bfb      	ldrh	r3, [r7, #30]
 8004fce:	3301      	adds	r3, #1
 8004fd0:	83fb      	strh	r3, [r7, #30]
 8004fd2:	8bfb      	ldrh	r3, [r7, #30]
 8004fd4:	2b0b      	cmp	r3, #11
 8004fd6:	d9f4      	bls.n	8004fc2 <SCSI_ReadFormatCapacity+0x64>
  }

  hmsc->bot_data[3] = 0x08U;
 8004fd8:	69bb      	ldr	r3, [r7, #24]
 8004fda:	2208      	movs	r2, #8
 8004fdc:	74da      	strb	r2, [r3, #19]
  hmsc->bot_data[4] = (uint8_t)((blk_nbr - 1U) >> 24);
 8004fde:	693b      	ldr	r3, [r7, #16]
 8004fe0:	3b01      	subs	r3, #1
 8004fe2:	0e1b      	lsrs	r3, r3, #24
 8004fe4:	b2da      	uxtb	r2, r3
 8004fe6:	69bb      	ldr	r3, [r7, #24]
 8004fe8:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)((blk_nbr - 1U) >> 16);
 8004fea:	693b      	ldr	r3, [r7, #16]
 8004fec:	3b01      	subs	r3, #1
 8004fee:	0c1b      	lsrs	r3, r3, #16
 8004ff0:	b2da      	uxtb	r2, r3
 8004ff2:	69bb      	ldr	r3, [r7, #24]
 8004ff4:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)((blk_nbr - 1U) >>  8);
 8004ff6:	693b      	ldr	r3, [r7, #16]
 8004ff8:	3b01      	subs	r3, #1
 8004ffa:	0a1b      	lsrs	r3, r3, #8
 8004ffc:	b2da      	uxtb	r2, r3
 8004ffe:	69bb      	ldr	r3, [r7, #24]
 8005000:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(blk_nbr - 1U);
 8005002:	693b      	ldr	r3, [r7, #16]
 8005004:	b2db      	uxtb	r3, r3
 8005006:	3b01      	subs	r3, #1
 8005008:	b2da      	uxtb	r2, r3
 800500a:	69bb      	ldr	r3, [r7, #24]
 800500c:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data[8] = 0x02U;
 800500e:	69bb      	ldr	r3, [r7, #24]
 8005010:	2202      	movs	r2, #2
 8005012:	761a      	strb	r2, [r3, #24]
  hmsc->bot_data[9] = (uint8_t)(blk_size >>  16);
 8005014:	8abb      	ldrh	r3, [r7, #20]
 8005016:	141b      	asrs	r3, r3, #16
 8005018:	b2da      	uxtb	r2, r3
 800501a:	69bb      	ldr	r3, [r7, #24]
 800501c:	765a      	strb	r2, [r3, #25]
  hmsc->bot_data[10] = (uint8_t)(blk_size >>  8);
 800501e:	8abb      	ldrh	r3, [r7, #20]
 8005020:	0a1b      	lsrs	r3, r3, #8
 8005022:	b29b      	uxth	r3, r3
 8005024:	b2da      	uxtb	r2, r3
 8005026:	69bb      	ldr	r3, [r7, #24]
 8005028:	769a      	strb	r2, [r3, #26]
  hmsc->bot_data[11] = (uint8_t)(blk_size);
 800502a:	8abb      	ldrh	r3, [r7, #20]
 800502c:	b2da      	uxtb	r2, r3
 800502e:	69bb      	ldr	r3, [r7, #24]
 8005030:	76da      	strb	r2, [r3, #27]

  hmsc->bot_data_length = 12U;
 8005032:	69bb      	ldr	r3, [r7, #24]
 8005034:	220c      	movs	r2, #12
 8005036:	60da      	str	r2, [r3, #12]

  return 0;
 8005038:	2300      	movs	r3, #0
}
 800503a:	4618      	mov	r0, r3
 800503c:	3720      	adds	r7, #32
 800503e:	46bd      	mov	sp, r7
 8005040:	bd80      	pop	{r7, pc}
	...

08005044 <SCSI_ModeSense6>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ModeSense6(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8005044:	b580      	push	{r7, lr}
 8005046:	b086      	sub	sp, #24
 8005048:	af00      	add	r7, sp, #0
 800504a:	60f8      	str	r0, [r7, #12]
 800504c:	460b      	mov	r3, r1
 800504e:	607a      	str	r2, [r7, #4]
 8005050:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8005058:	613b      	str	r3, [r7, #16]
  uint16_t len = MODE_SENSE6_LEN;
 800505a:	2317      	movs	r3, #23
 800505c:	82fb      	strh	r3, [r7, #22]

  if (hmsc == NULL)
 800505e:	693b      	ldr	r3, [r7, #16]
 8005060:	2b00      	cmp	r3, #0
 8005062:	d102      	bne.n	800506a <SCSI_ModeSense6+0x26>
  {
    return -1;
 8005064:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005068:	e011      	b.n	800508e <SCSI_ModeSense6+0x4a>
  }

  if (params[4] <= len)
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	3304      	adds	r3, #4
 800506e:	781b      	ldrb	r3, [r3, #0]
 8005070:	461a      	mov	r2, r3
 8005072:	8afb      	ldrh	r3, [r7, #22]
 8005074:	4293      	cmp	r3, r2
 8005076:	d303      	bcc.n	8005080 <SCSI_ModeSense6+0x3c>
  {
    len = params[4];
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	3304      	adds	r3, #4
 800507c:	781b      	ldrb	r3, [r3, #0]
 800507e:	82fb      	strh	r3, [r7, #22]
  }

  (void)SCSI_UpdateBotData(hmsc, MSC_Mode_Sense6_data, len);
 8005080:	8afb      	ldrh	r3, [r7, #22]
 8005082:	461a      	mov	r2, r3
 8005084:	4904      	ldr	r1, [pc, #16]	@ (8005098 <SCSI_ModeSense6+0x54>)
 8005086:	6938      	ldr	r0, [r7, #16]
 8005088:	f000 fdbc 	bl	8005c04 <SCSI_UpdateBotData>

  return 0;
 800508c:	2300      	movs	r3, #0
}
 800508e:	4618      	mov	r0, r3
 8005090:	3718      	adds	r7, #24
 8005092:	46bd      	mov	sp, r7
 8005094:	bd80      	pop	{r7, pc}
 8005096:	bf00      	nop
 8005098:	200000c0 	.word	0x200000c0

0800509c <SCSI_ModeSense10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ModeSense10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800509c:	b580      	push	{r7, lr}
 800509e:	b086      	sub	sp, #24
 80050a0:	af00      	add	r7, sp, #0
 80050a2:	60f8      	str	r0, [r7, #12]
 80050a4:	460b      	mov	r3, r1
 80050a6:	607a      	str	r2, [r7, #4]
 80050a8:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80050b0:	613b      	str	r3, [r7, #16]
  uint16_t len = MODE_SENSE10_LEN;
 80050b2:	231b      	movs	r3, #27
 80050b4:	82fb      	strh	r3, [r7, #22]

  if (hmsc == NULL)
 80050b6:	693b      	ldr	r3, [r7, #16]
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d102      	bne.n	80050c2 <SCSI_ModeSense10+0x26>
  {
    return -1;
 80050bc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80050c0:	e011      	b.n	80050e6 <SCSI_ModeSense10+0x4a>
  }

  if (params[8] <= len)
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	3308      	adds	r3, #8
 80050c6:	781b      	ldrb	r3, [r3, #0]
 80050c8:	461a      	mov	r2, r3
 80050ca:	8afb      	ldrh	r3, [r7, #22]
 80050cc:	4293      	cmp	r3, r2
 80050ce:	d303      	bcc.n	80050d8 <SCSI_ModeSense10+0x3c>
  {
    len = params[8];
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	3308      	adds	r3, #8
 80050d4:	781b      	ldrb	r3, [r3, #0]
 80050d6:	82fb      	strh	r3, [r7, #22]
  }

  (void)SCSI_UpdateBotData(hmsc, MSC_Mode_Sense10_data, len);
 80050d8:	8afb      	ldrh	r3, [r7, #22]
 80050da:	461a      	mov	r2, r3
 80050dc:	4904      	ldr	r1, [pc, #16]	@ (80050f0 <SCSI_ModeSense10+0x54>)
 80050de:	6938      	ldr	r0, [r7, #16]
 80050e0:	f000 fd90 	bl	8005c04 <SCSI_UpdateBotData>

  return 0;
 80050e4:	2300      	movs	r3, #0
}
 80050e6:	4618      	mov	r0, r3
 80050e8:	3718      	adds	r7, #24
 80050ea:	46bd      	mov	sp, r7
 80050ec:	bd80      	pop	{r7, pc}
 80050ee:	bf00      	nop
 80050f0:	200000d8 	.word	0x200000d8

080050f4 <SCSI_RequestSense>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_RequestSense(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80050f4:	b580      	push	{r7, lr}
 80050f6:	b086      	sub	sp, #24
 80050f8:	af00      	add	r7, sp, #0
 80050fa:	60f8      	str	r0, [r7, #12]
 80050fc:	460b      	mov	r3, r1
 80050fe:	607a      	str	r2, [r7, #4]
 8005100:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  uint8_t i;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8005108:	613b      	str	r3, [r7, #16]

  if (hmsc == NULL)
 800510a:	693b      	ldr	r3, [r7, #16]
 800510c:	2b00      	cmp	r3, #0
 800510e:	d102      	bne.n	8005116 <SCSI_RequestSense+0x22>
  {
    return -1;
 8005110:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005114:	e069      	b.n	80051ea <SCSI_RequestSense+0xf6>
  }

  if (hmsc->cbw.dDataLength == 0U)
 8005116:	693b      	ldr	r3, [r7, #16]
 8005118:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 800511c:	2b00      	cmp	r3, #0
 800511e:	d10a      	bne.n	8005136 <SCSI_RequestSense+0x42>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8005120:	693b      	ldr	r3, [r7, #16]
 8005122:	f893 121d 	ldrb.w	r1, [r3, #541]	@ 0x21d
 8005126:	2320      	movs	r3, #32
 8005128:	2205      	movs	r2, #5
 800512a:	68f8      	ldr	r0, [r7, #12]
 800512c:	f000 f861 	bl	80051f2 <SCSI_SenseCode>
    return -1;
 8005130:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005134:	e059      	b.n	80051ea <SCSI_RequestSense+0xf6>
  }

  for (i = 0U; i < REQUEST_SENSE_DATA_LEN; i++)
 8005136:	2300      	movs	r3, #0
 8005138:	75fb      	strb	r3, [r7, #23]
 800513a:	e007      	b.n	800514c <SCSI_RequestSense+0x58>
  {
    hmsc->bot_data[i] = 0U;
 800513c:	7dfb      	ldrb	r3, [r7, #23]
 800513e:	693a      	ldr	r2, [r7, #16]
 8005140:	4413      	add	r3, r2
 8005142:	2200      	movs	r2, #0
 8005144:	741a      	strb	r2, [r3, #16]
  for (i = 0U; i < REQUEST_SENSE_DATA_LEN; i++)
 8005146:	7dfb      	ldrb	r3, [r7, #23]
 8005148:	3301      	adds	r3, #1
 800514a:	75fb      	strb	r3, [r7, #23]
 800514c:	7dfb      	ldrb	r3, [r7, #23]
 800514e:	2b11      	cmp	r3, #17
 8005150:	d9f4      	bls.n	800513c <SCSI_RequestSense+0x48>
  }

  hmsc->bot_data[0] = 0x70U;
 8005152:	693b      	ldr	r3, [r7, #16]
 8005154:	2270      	movs	r2, #112	@ 0x70
 8005156:	741a      	strb	r2, [r3, #16]
  hmsc->bot_data[7] = REQUEST_SENSE_DATA_LEN - 6U;
 8005158:	693b      	ldr	r3, [r7, #16]
 800515a:	220c      	movs	r2, #12
 800515c:	75da      	strb	r2, [r3, #23]

  if ((hmsc->scsi_sense_head != hmsc->scsi_sense_tail))
 800515e:	693b      	ldr	r3, [r7, #16]
 8005160:	f893 2260 	ldrb.w	r2, [r3, #608]	@ 0x260
 8005164:	693b      	ldr	r3, [r7, #16]
 8005166:	f893 3261 	ldrb.w	r3, [r3, #609]	@ 0x261
 800516a:	429a      	cmp	r2, r3
 800516c:	d02e      	beq.n	80051cc <SCSI_RequestSense+0xd8>
  {
    hmsc->bot_data[2] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].Skey;
 800516e:	693b      	ldr	r3, [r7, #16]
 8005170:	f893 3260 	ldrb.w	r3, [r3, #608]	@ 0x260
 8005174:	461a      	mov	r2, r3
 8005176:	693b      	ldr	r3, [r7, #16]
 8005178:	3248      	adds	r2, #72	@ 0x48
 800517a:	f813 2032 	ldrb.w	r2, [r3, r2, lsl #3]
 800517e:	693b      	ldr	r3, [r7, #16]
 8005180:	749a      	strb	r2, [r3, #18]
    hmsc->bot_data[12] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASC;
 8005182:	693b      	ldr	r3, [r7, #16]
 8005184:	f893 3260 	ldrb.w	r3, [r3, #608]	@ 0x260
 8005188:	693a      	ldr	r2, [r7, #16]
 800518a:	3348      	adds	r3, #72	@ 0x48
 800518c:	00db      	lsls	r3, r3, #3
 800518e:	4413      	add	r3, r2
 8005190:	791a      	ldrb	r2, [r3, #4]
 8005192:	693b      	ldr	r3, [r7, #16]
 8005194:	771a      	strb	r2, [r3, #28]
    hmsc->bot_data[13] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASCQ;
 8005196:	693b      	ldr	r3, [r7, #16]
 8005198:	f893 3260 	ldrb.w	r3, [r3, #608]	@ 0x260
 800519c:	693a      	ldr	r2, [r7, #16]
 800519e:	3348      	adds	r3, #72	@ 0x48
 80051a0:	00db      	lsls	r3, r3, #3
 80051a2:	4413      	add	r3, r2
 80051a4:	795a      	ldrb	r2, [r3, #5]
 80051a6:	693b      	ldr	r3, [r7, #16]
 80051a8:	775a      	strb	r2, [r3, #29]
    hmsc->scsi_sense_head++;
 80051aa:	693b      	ldr	r3, [r7, #16]
 80051ac:	f893 3260 	ldrb.w	r3, [r3, #608]	@ 0x260
 80051b0:	3301      	adds	r3, #1
 80051b2:	b2da      	uxtb	r2, r3
 80051b4:	693b      	ldr	r3, [r7, #16]
 80051b6:	f883 2260 	strb.w	r2, [r3, #608]	@ 0x260

    if (hmsc->scsi_sense_head == SENSE_LIST_DEEPTH)
 80051ba:	693b      	ldr	r3, [r7, #16]
 80051bc:	f893 3260 	ldrb.w	r3, [r3, #608]	@ 0x260
 80051c0:	2b04      	cmp	r3, #4
 80051c2:	d103      	bne.n	80051cc <SCSI_RequestSense+0xd8>
    {
      hmsc->scsi_sense_head = 0U;
 80051c4:	693b      	ldr	r3, [r7, #16]
 80051c6:	2200      	movs	r2, #0
 80051c8:	f883 2260 	strb.w	r2, [r3, #608]	@ 0x260
    }
  }

  hmsc->bot_data_length = REQUEST_SENSE_DATA_LEN;
 80051cc:	693b      	ldr	r3, [r7, #16]
 80051ce:	2212      	movs	r2, #18
 80051d0:	60da      	str	r2, [r3, #12]

  if (params[4] <= REQUEST_SENSE_DATA_LEN)
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	3304      	adds	r3, #4
 80051d6:	781b      	ldrb	r3, [r3, #0]
 80051d8:	2b12      	cmp	r3, #18
 80051da:	d805      	bhi.n	80051e8 <SCSI_RequestSense+0xf4>
  {
    hmsc->bot_data_length = params[4];
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	3304      	adds	r3, #4
 80051e0:	781b      	ldrb	r3, [r3, #0]
 80051e2:	461a      	mov	r2, r3
 80051e4:	693b      	ldr	r3, [r7, #16]
 80051e6:	60da      	str	r2, [r3, #12]
  }

  return 0;
 80051e8:	2300      	movs	r3, #0
}
 80051ea:	4618      	mov	r0, r3
 80051ec:	3718      	adds	r7, #24
 80051ee:	46bd      	mov	sp, r7
 80051f0:	bd80      	pop	{r7, pc}

080051f2 <SCSI_SenseCode>:
  * @param  ASC: Additional Sense Code
  * @retval none

  */
void SCSI_SenseCode(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t sKey, uint8_t ASC)
{
 80051f2:	b480      	push	{r7}
 80051f4:	b085      	sub	sp, #20
 80051f6:	af00      	add	r7, sp, #0
 80051f8:	6078      	str	r0, [r7, #4]
 80051fa:	4608      	mov	r0, r1
 80051fc:	4611      	mov	r1, r2
 80051fe:	461a      	mov	r2, r3
 8005200:	4603      	mov	r3, r0
 8005202:	70fb      	strb	r3, [r7, #3]
 8005204:	460b      	mov	r3, r1
 8005206:	70bb      	strb	r3, [r7, #2]
 8005208:	4613      	mov	r3, r2
 800520a:	707b      	strb	r3, [r7, #1]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8005212:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	2b00      	cmp	r3, #0
 8005218:	d02c      	beq.n	8005274 <SCSI_SenseCode+0x82>
  {
    return;
  }

  hmsc->scsi_sense[hmsc->scsi_sense_tail].Skey = sKey;
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	f893 3261 	ldrb.w	r3, [r3, #609]	@ 0x261
 8005220:	461a      	mov	r2, r3
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	3248      	adds	r2, #72	@ 0x48
 8005226:	78b9      	ldrb	r1, [r7, #2]
 8005228:	f803 1032 	strb.w	r1, [r3, r2, lsl #3]
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.b.ASC = ASC;
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	f893 3261 	ldrb.w	r3, [r3, #609]	@ 0x261
 8005232:	68fa      	ldr	r2, [r7, #12]
 8005234:	3348      	adds	r3, #72	@ 0x48
 8005236:	00db      	lsls	r3, r3, #3
 8005238:	4413      	add	r3, r2
 800523a:	787a      	ldrb	r2, [r7, #1]
 800523c:	711a      	strb	r2, [r3, #4]
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.b.ASCQ = 0U;
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	f893 3261 	ldrb.w	r3, [r3, #609]	@ 0x261
 8005244:	68fa      	ldr	r2, [r7, #12]
 8005246:	3348      	adds	r3, #72	@ 0x48
 8005248:	00db      	lsls	r3, r3, #3
 800524a:	4413      	add	r3, r2
 800524c:	2200      	movs	r2, #0
 800524e:	715a      	strb	r2, [r3, #5]
  hmsc->scsi_sense_tail++;
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	f893 3261 	ldrb.w	r3, [r3, #609]	@ 0x261
 8005256:	3301      	adds	r3, #1
 8005258:	b2da      	uxtb	r2, r3
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	f883 2261 	strb.w	r2, [r3, #609]	@ 0x261

  if (hmsc->scsi_sense_tail == SENSE_LIST_DEEPTH)
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	f893 3261 	ldrb.w	r3, [r3, #609]	@ 0x261
 8005266:	2b04      	cmp	r3, #4
 8005268:	d105      	bne.n	8005276 <SCSI_SenseCode+0x84>
  {
    hmsc->scsi_sense_tail = 0U;
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	2200      	movs	r2, #0
 800526e:	f883 2261 	strb.w	r2, [r3, #609]	@ 0x261
 8005272:	e000      	b.n	8005276 <SCSI_SenseCode+0x84>
    return;
 8005274:	bf00      	nop
  }
}
 8005276:	3714      	adds	r7, #20
 8005278:	46bd      	mov	sp, r7
 800527a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800527e:	4770      	bx	lr

08005280 <SCSI_StartStopUnit>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_StartStopUnit(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8005280:	b580      	push	{r7, lr}
 8005282:	b086      	sub	sp, #24
 8005284:	af00      	add	r7, sp, #0
 8005286:	60f8      	str	r0, [r7, #12]
 8005288:	460b      	mov	r3, r1
 800528a:	607a      	str	r2, [r7, #4]
 800528c:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8005294:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 8005296:	697b      	ldr	r3, [r7, #20]
 8005298:	2b00      	cmp	r3, #0
 800529a:	d102      	bne.n	80052a2 <SCSI_StartStopUnit+0x22>
  {
    return -1;
 800529c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80052a0:	e03b      	b.n	800531a <SCSI_StartStopUnit+0x9a>
  }

  if ((hmsc->scsi_medium_state == SCSI_MEDIUM_LOCKED) && ((params[4] & 0x3U) == 2U))
 80052a2:	697b      	ldr	r3, [r7, #20]
 80052a4:	f893 3262 	ldrb.w	r3, [r3, #610]	@ 0x262
 80052a8:	2b01      	cmp	r3, #1
 80052aa:	d10f      	bne.n	80052cc <SCSI_StartStopUnit+0x4c>
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	3304      	adds	r3, #4
 80052b0:	781b      	ldrb	r3, [r3, #0]
 80052b2:	f003 0303 	and.w	r3, r3, #3
 80052b6:	2b02      	cmp	r3, #2
 80052b8:	d108      	bne.n	80052cc <SCSI_StartStopUnit+0x4c>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
 80052ba:	7af9      	ldrb	r1, [r7, #11]
 80052bc:	2324      	movs	r3, #36	@ 0x24
 80052be:	2205      	movs	r2, #5
 80052c0:	68f8      	ldr	r0, [r7, #12]
 80052c2:	f7ff ff96 	bl	80051f2 <SCSI_SenseCode>

    return -1;
 80052c6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80052ca:	e026      	b.n	800531a <SCSI_StartStopUnit+0x9a>
  }

  if ((params[4] & 0x3U) == 0x1U) /* START=1 */
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	3304      	adds	r3, #4
 80052d0:	781b      	ldrb	r3, [r3, #0]
 80052d2:	f003 0303 	and.w	r3, r3, #3
 80052d6:	2b01      	cmp	r3, #1
 80052d8:	d104      	bne.n	80052e4 <SCSI_StartStopUnit+0x64>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 80052da:	697b      	ldr	r3, [r7, #20]
 80052dc:	2200      	movs	r2, #0
 80052de:	f883 2262 	strb.w	r2, [r3, #610]	@ 0x262
 80052e2:	e016      	b.n	8005312 <SCSI_StartStopUnit+0x92>
  }
  else if ((params[4] & 0x3U) == 0x2U) /* START=0 and LOEJ Load Eject=1 */
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	3304      	adds	r3, #4
 80052e8:	781b      	ldrb	r3, [r3, #0]
 80052ea:	f003 0303 	and.w	r3, r3, #3
 80052ee:	2b02      	cmp	r3, #2
 80052f0:	d104      	bne.n	80052fc <SCSI_StartStopUnit+0x7c>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_EJECTED;
 80052f2:	697b      	ldr	r3, [r7, #20]
 80052f4:	2202      	movs	r2, #2
 80052f6:	f883 2262 	strb.w	r2, [r3, #610]	@ 0x262
 80052fa:	e00a      	b.n	8005312 <SCSI_StartStopUnit+0x92>
  }
  else if ((params[4] & 0x3U) == 0x3U) /* START=1 and LOEJ Load Eject=1 */
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	3304      	adds	r3, #4
 8005300:	781b      	ldrb	r3, [r3, #0]
 8005302:	f003 0303 	and.w	r3, r3, #3
 8005306:	2b03      	cmp	r3, #3
 8005308:	d103      	bne.n	8005312 <SCSI_StartStopUnit+0x92>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 800530a:	697b      	ldr	r3, [r7, #20]
 800530c:	2200      	movs	r2, #0
 800530e:	f883 2262 	strb.w	r2, [r3, #610]	@ 0x262
  }
  else
  {
    /* .. */
  }
  hmsc->bot_data_length = 0U;
 8005312:	697b      	ldr	r3, [r7, #20]
 8005314:	2200      	movs	r2, #0
 8005316:	60da      	str	r2, [r3, #12]

  return 0;
 8005318:	2300      	movs	r3, #0
}
 800531a:	4618      	mov	r0, r3
 800531c:	3718      	adds	r7, #24
 800531e:	46bd      	mov	sp, r7
 8005320:	bd80      	pop	{r7, pc}

08005322 <SCSI_AllowPreventRemovable>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_AllowPreventRemovable(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8005322:	b480      	push	{r7}
 8005324:	b087      	sub	sp, #28
 8005326:	af00      	add	r7, sp, #0
 8005328:	60f8      	str	r0, [r7, #12]
 800532a:	460b      	mov	r3, r1
 800532c:	607a      	str	r2, [r7, #4]
 800532e:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8005336:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 8005338:	697b      	ldr	r3, [r7, #20]
 800533a:	2b00      	cmp	r3, #0
 800533c:	d102      	bne.n	8005344 <SCSI_AllowPreventRemovable+0x22>
  {
    return -1;
 800533e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005342:	e011      	b.n	8005368 <SCSI_AllowPreventRemovable+0x46>
  }

  if (params[4] == 0U)
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	3304      	adds	r3, #4
 8005348:	781b      	ldrb	r3, [r3, #0]
 800534a:	2b00      	cmp	r3, #0
 800534c:	d104      	bne.n	8005358 <SCSI_AllowPreventRemovable+0x36>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 800534e:	697b      	ldr	r3, [r7, #20]
 8005350:	2200      	movs	r2, #0
 8005352:	f883 2262 	strb.w	r2, [r3, #610]	@ 0x262
 8005356:	e003      	b.n	8005360 <SCSI_AllowPreventRemovable+0x3e>
  }
  else
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_LOCKED;
 8005358:	697b      	ldr	r3, [r7, #20]
 800535a:	2201      	movs	r2, #1
 800535c:	f883 2262 	strb.w	r2, [r3, #610]	@ 0x262
  }

  hmsc->bot_data_length = 0U;
 8005360:	697b      	ldr	r3, [r7, #20]
 8005362:	2200      	movs	r2, #0
 8005364:	60da      	str	r2, [r3, #12]

  return 0;
 8005366:	2300      	movs	r3, #0
}
 8005368:	4618      	mov	r0, r3
 800536a:	371c      	adds	r7, #28
 800536c:	46bd      	mov	sp, r7
 800536e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005372:	4770      	bx	lr

08005374 <SCSI_Read10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Read10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8005374:	b580      	push	{r7, lr}
 8005376:	b086      	sub	sp, #24
 8005378:	af00      	add	r7, sp, #0
 800537a:	60f8      	str	r0, [r7, #12]
 800537c:	460b      	mov	r3, r1
 800537e:	607a      	str	r2, [r7, #4]
 8005380:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8005388:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 800538a:	697b      	ldr	r3, [r7, #20]
 800538c:	2b00      	cmp	r3, #0
 800538e:	d102      	bne.n	8005396 <SCSI_Read10+0x22>
  {
    return -1;
 8005390:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005394:	e08a      	b.n	80054ac <SCSI_Read10+0x138>
  }

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 8005396:	697b      	ldr	r3, [r7, #20]
 8005398:	7a1b      	ldrb	r3, [r3, #8]
 800539a:	2b00      	cmp	r3, #0
 800539c:	d17c      	bne.n	8005498 <SCSI_Read10+0x124>
  {
    /* case 10 : Ho <> Di */
    if ((hmsc->cbw.bmFlags & 0x80U) != 0x80U)
 800539e:	697b      	ldr	r3, [r7, #20]
 80053a0:	f893 321c 	ldrb.w	r3, [r3, #540]	@ 0x21c
 80053a4:	b25b      	sxtb	r3, r3
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	db0a      	blt.n	80053c0 <SCSI_Read10+0x4c>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80053aa:	697b      	ldr	r3, [r7, #20]
 80053ac:	f893 121d 	ldrb.w	r1, [r3, #541]	@ 0x21d
 80053b0:	2320      	movs	r3, #32
 80053b2:	2205      	movs	r2, #5
 80053b4:	68f8      	ldr	r0, [r7, #12]
 80053b6:	f7ff ff1c 	bl	80051f2 <SCSI_SenseCode>
      return -1;
 80053ba:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80053be:	e075      	b.n	80054ac <SCSI_Read10+0x138>
    }

    if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 80053c0:	697b      	ldr	r3, [r7, #20]
 80053c2:	f893 3262 	ldrb.w	r3, [r3, #610]	@ 0x262
 80053c6:	2b02      	cmp	r3, #2
 80053c8:	d108      	bne.n	80053dc <SCSI_Read10+0x68>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 80053ca:	7af9      	ldrb	r1, [r7, #11]
 80053cc:	233a      	movs	r3, #58	@ 0x3a
 80053ce:	2202      	movs	r2, #2
 80053d0:	68f8      	ldr	r0, [r7, #12]
 80053d2:	f7ff ff0e 	bl	80051f2 <SCSI_SenseCode>

      return -1;
 80053d6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80053da:	e067      	b.n	80054ac <SCSI_Read10+0x138>
    }

    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 80053e2:	689b      	ldr	r3, [r3, #8]
 80053e4:	7afa      	ldrb	r2, [r7, #11]
 80053e6:	4610      	mov	r0, r2
 80053e8:	4798      	blx	r3
 80053ea:	4603      	mov	r3, r0
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d008      	beq.n	8005402 <SCSI_Read10+0x8e>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 80053f0:	7af9      	ldrb	r1, [r7, #11]
 80053f2:	233a      	movs	r3, #58	@ 0x3a
 80053f4:	2202      	movs	r2, #2
 80053f6:	68f8      	ldr	r0, [r7, #12]
 80053f8:	f7ff fefb 	bl	80051f2 <SCSI_SenseCode>
      return -1;
 80053fc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005400:	e054      	b.n	80054ac <SCSI_Read10+0x138>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	3302      	adds	r3, #2
 8005406:	781b      	ldrb	r3, [r3, #0]
 8005408:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	3303      	adds	r3, #3
 800540e:	781b      	ldrb	r3, [r3, #0]
 8005410:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8005412:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] <<  8) |
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	3304      	adds	r3, #4
 8005418:	781b      	ldrb	r3, [r3, #0]
 800541a:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 800541c:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 800541e:	687a      	ldr	r2, [r7, #4]
 8005420:	3205      	adds	r2, #5
 8005422:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] <<  8) |
 8005424:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8005426:	697b      	ldr	r3, [r7, #20]
 8005428:	f8c3 226c 	str.w	r2, [r3, #620]	@ 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[7] <<  8) | (uint32_t)params[8];
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	3307      	adds	r3, #7
 8005430:	781b      	ldrb	r3, [r3, #0]
 8005432:	021b      	lsls	r3, r3, #8
 8005434:	687a      	ldr	r2, [r7, #4]
 8005436:	3208      	adds	r2, #8
 8005438:	7812      	ldrb	r2, [r2, #0]
 800543a:	431a      	orrs	r2, r3
 800543c:	697b      	ldr	r3, [r7, #20]
 800543e:	f8c3 2270 	str.w	r2, [r3, #624]	@ 0x270

    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 8005442:	697b      	ldr	r3, [r7, #20]
 8005444:	f8d3 226c 	ldr.w	r2, [r3, #620]	@ 0x26c
 8005448:	697b      	ldr	r3, [r7, #20]
 800544a:	f8d3 3270 	ldr.w	r3, [r3, #624]	@ 0x270
 800544e:	7af9      	ldrb	r1, [r7, #11]
 8005450:	68f8      	ldr	r0, [r7, #12]
 8005452:	f000 faad 	bl	80059b0 <SCSI_CheckAddressRange>
 8005456:	4603      	mov	r3, r0
 8005458:	2b00      	cmp	r3, #0
 800545a:	da02      	bge.n	8005462 <SCSI_Read10+0xee>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 800545c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005460:	e024      	b.n	80054ac <SCSI_Read10+0x138>
    }

    /* cases 4,5 : Hi <> Dn */
    if (hmsc->cbw.dDataLength != (hmsc->scsi_blk_len * hmsc->scsi_blk_size))
 8005462:	697b      	ldr	r3, [r7, #20]
 8005464:	f8d3 2218 	ldr.w	r2, [r3, #536]	@ 0x218
 8005468:	697b      	ldr	r3, [r7, #20]
 800546a:	f8d3 3270 	ldr.w	r3, [r3, #624]	@ 0x270
 800546e:	6979      	ldr	r1, [r7, #20]
 8005470:	f8b1 1264 	ldrh.w	r1, [r1, #612]	@ 0x264
 8005474:	fb01 f303 	mul.w	r3, r1, r3
 8005478:	429a      	cmp	r2, r3
 800547a:	d00a      	beq.n	8005492 <SCSI_Read10+0x11e>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800547c:	697b      	ldr	r3, [r7, #20]
 800547e:	f893 121d 	ldrb.w	r1, [r3, #541]	@ 0x21d
 8005482:	2320      	movs	r3, #32
 8005484:	2205      	movs	r2, #5
 8005486:	68f8      	ldr	r0, [r7, #12]
 8005488:	f7ff feb3 	bl	80051f2 <SCSI_SenseCode>
      return -1;
 800548c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005490:	e00c      	b.n	80054ac <SCSI_Read10+0x138>
    }

    hmsc->bot_state = USBD_BOT_DATA_IN;
 8005492:	697b      	ldr	r3, [r7, #20]
 8005494:	2202      	movs	r2, #2
 8005496:	721a      	strb	r2, [r3, #8]
  }
  hmsc->bot_data_length = MSC_MEDIA_PACKET;
 8005498:	697b      	ldr	r3, [r7, #20]
 800549a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800549e:	60da      	str	r2, [r3, #12]

  return SCSI_ProcessRead(pdev, lun);
 80054a0:	7afb      	ldrb	r3, [r7, #11]
 80054a2:	4619      	mov	r1, r3
 80054a4:	68f8      	ldr	r0, [r7, #12]
 80054a6:	f000 faab 	bl	8005a00 <SCSI_ProcessRead>
 80054aa:	4603      	mov	r3, r0
}
 80054ac:	4618      	mov	r0, r3
 80054ae:	3718      	adds	r7, #24
 80054b0:	46bd      	mov	sp, r7
 80054b2:	bd80      	pop	{r7, pc}

080054b4 <SCSI_Read12>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Read12(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80054b4:	b580      	push	{r7, lr}
 80054b6:	b086      	sub	sp, #24
 80054b8:	af00      	add	r7, sp, #0
 80054ba:	60f8      	str	r0, [r7, #12]
 80054bc:	460b      	mov	r3, r1
 80054be:	607a      	str	r2, [r7, #4]
 80054c0:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80054c8:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 80054ca:	697b      	ldr	r3, [r7, #20]
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d102      	bne.n	80054d6 <SCSI_Read12+0x22>
  {
    return -1;
 80054d0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80054d4:	e095      	b.n	8005602 <SCSI_Read12+0x14e>
  }

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 80054d6:	697b      	ldr	r3, [r7, #20]
 80054d8:	7a1b      	ldrb	r3, [r3, #8]
 80054da:	2b00      	cmp	r3, #0
 80054dc:	f040 8087 	bne.w	80055ee <SCSI_Read12+0x13a>
  {
    /* case 10 : Ho <> Di */
    if ((hmsc->cbw.bmFlags & 0x80U) != 0x80U)
 80054e0:	697b      	ldr	r3, [r7, #20]
 80054e2:	f893 321c 	ldrb.w	r3, [r3, #540]	@ 0x21c
 80054e6:	b25b      	sxtb	r3, r3
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	db0a      	blt.n	8005502 <SCSI_Read12+0x4e>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80054ec:	697b      	ldr	r3, [r7, #20]
 80054ee:	f893 121d 	ldrb.w	r1, [r3, #541]	@ 0x21d
 80054f2:	2320      	movs	r3, #32
 80054f4:	2205      	movs	r2, #5
 80054f6:	68f8      	ldr	r0, [r7, #12]
 80054f8:	f7ff fe7b 	bl	80051f2 <SCSI_SenseCode>
      return -1;
 80054fc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005500:	e07f      	b.n	8005602 <SCSI_Read12+0x14e>
    }

    if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 8005502:	697b      	ldr	r3, [r7, #20]
 8005504:	f893 3262 	ldrb.w	r3, [r3, #610]	@ 0x262
 8005508:	2b02      	cmp	r3, #2
 800550a:	d108      	bne.n	800551e <SCSI_Read12+0x6a>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800550c:	7af9      	ldrb	r1, [r7, #11]
 800550e:	233a      	movs	r3, #58	@ 0x3a
 8005510:	2202      	movs	r2, #2
 8005512:	68f8      	ldr	r0, [r7, #12]
 8005514:	f7ff fe6d 	bl	80051f2 <SCSI_SenseCode>
      return -1;
 8005518:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800551c:	e071      	b.n	8005602 <SCSI_Read12+0x14e>
    }

    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8005524:	689b      	ldr	r3, [r3, #8]
 8005526:	7afa      	ldrb	r2, [r7, #11]
 8005528:	4610      	mov	r0, r2
 800552a:	4798      	blx	r3
 800552c:	4603      	mov	r3, r0
 800552e:	2b00      	cmp	r3, #0
 8005530:	d008      	beq.n	8005544 <SCSI_Read12+0x90>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8005532:	7af9      	ldrb	r1, [r7, #11]
 8005534:	233a      	movs	r3, #58	@ 0x3a
 8005536:	2202      	movs	r2, #2
 8005538:	68f8      	ldr	r0, [r7, #12]
 800553a:	f7ff fe5a 	bl	80051f2 <SCSI_SenseCode>
      return -1;
 800553e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005542:	e05e      	b.n	8005602 <SCSI_Read12+0x14e>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	3302      	adds	r3, #2
 8005548:	781b      	ldrb	r3, [r3, #0]
 800554a:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	3303      	adds	r3, #3
 8005550:	781b      	ldrb	r3, [r3, #0]
 8005552:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8005554:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] <<  8) |
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	3304      	adds	r3, #4
 800555a:	781b      	ldrb	r3, [r3, #0]
 800555c:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 800555e:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 8005560:	687a      	ldr	r2, [r7, #4]
 8005562:	3205      	adds	r2, #5
 8005564:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] <<  8) |
 8005566:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8005568:	697b      	ldr	r3, [r7, #20]
 800556a:	f8c3 226c 	str.w	r2, [r3, #620]	@ 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	3306      	adds	r3, #6
 8005572:	781b      	ldrb	r3, [r3, #0]
 8005574:	061a      	lsls	r2, r3, #24
                         ((uint32_t)params[7] << 16) |
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	3307      	adds	r3, #7
 800557a:	781b      	ldrb	r3, [r3, #0]
 800557c:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 800557e:	431a      	orrs	r2, r3
                         ((uint32_t)params[8] << 8) |
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	3308      	adds	r3, #8
 8005584:	781b      	ldrb	r3, [r3, #0]
 8005586:	021b      	lsls	r3, r3, #8
                         ((uint32_t)params[7] << 16) |
 8005588:	4313      	orrs	r3, r2
                         (uint32_t)params[9];
 800558a:	687a      	ldr	r2, [r7, #4]
 800558c:	3209      	adds	r2, #9
 800558e:	7812      	ldrb	r2, [r2, #0]
                         ((uint32_t)params[8] << 8) |
 8005590:	431a      	orrs	r2, r3
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8005592:	697b      	ldr	r3, [r7, #20]
 8005594:	f8c3 2270 	str.w	r2, [r3, #624]	@ 0x270

    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 8005598:	697b      	ldr	r3, [r7, #20]
 800559a:	f8d3 226c 	ldr.w	r2, [r3, #620]	@ 0x26c
 800559e:	697b      	ldr	r3, [r7, #20]
 80055a0:	f8d3 3270 	ldr.w	r3, [r3, #624]	@ 0x270
 80055a4:	7af9      	ldrb	r1, [r7, #11]
 80055a6:	68f8      	ldr	r0, [r7, #12]
 80055a8:	f000 fa02 	bl	80059b0 <SCSI_CheckAddressRange>
 80055ac:	4603      	mov	r3, r0
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	da02      	bge.n	80055b8 <SCSI_Read12+0x104>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 80055b2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80055b6:	e024      	b.n	8005602 <SCSI_Read12+0x14e>
    }

    /* cases 4,5 : Hi <> Dn */
    if (hmsc->cbw.dDataLength != (hmsc->scsi_blk_len * hmsc->scsi_blk_size))
 80055b8:	697b      	ldr	r3, [r7, #20]
 80055ba:	f8d3 2218 	ldr.w	r2, [r3, #536]	@ 0x218
 80055be:	697b      	ldr	r3, [r7, #20]
 80055c0:	f8d3 3270 	ldr.w	r3, [r3, #624]	@ 0x270
 80055c4:	6979      	ldr	r1, [r7, #20]
 80055c6:	f8b1 1264 	ldrh.w	r1, [r1, #612]	@ 0x264
 80055ca:	fb01 f303 	mul.w	r3, r1, r3
 80055ce:	429a      	cmp	r2, r3
 80055d0:	d00a      	beq.n	80055e8 <SCSI_Read12+0x134>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80055d2:	697b      	ldr	r3, [r7, #20]
 80055d4:	f893 121d 	ldrb.w	r1, [r3, #541]	@ 0x21d
 80055d8:	2320      	movs	r3, #32
 80055da:	2205      	movs	r2, #5
 80055dc:	68f8      	ldr	r0, [r7, #12]
 80055de:	f7ff fe08 	bl	80051f2 <SCSI_SenseCode>
      return -1;
 80055e2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80055e6:	e00c      	b.n	8005602 <SCSI_Read12+0x14e>
    }

    hmsc->bot_state = USBD_BOT_DATA_IN;
 80055e8:	697b      	ldr	r3, [r7, #20]
 80055ea:	2202      	movs	r2, #2
 80055ec:	721a      	strb	r2, [r3, #8]
  }
  hmsc->bot_data_length = MSC_MEDIA_PACKET;
 80055ee:	697b      	ldr	r3, [r7, #20]
 80055f0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80055f4:	60da      	str	r2, [r3, #12]

  return SCSI_ProcessRead(pdev, lun);
 80055f6:	7afb      	ldrb	r3, [r7, #11]
 80055f8:	4619      	mov	r1, r3
 80055fa:	68f8      	ldr	r0, [r7, #12]
 80055fc:	f000 fa00 	bl	8005a00 <SCSI_ProcessRead>
 8005600:	4603      	mov	r3, r0
}
 8005602:	4618      	mov	r0, r3
 8005604:	3718      	adds	r7, #24
 8005606:	46bd      	mov	sp, r7
 8005608:	bd80      	pop	{r7, pc}

0800560a <SCSI_Write10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Write10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800560a:	b580      	push	{r7, lr}
 800560c:	b086      	sub	sp, #24
 800560e:	af00      	add	r7, sp, #0
 8005610:	60f8      	str	r0, [r7, #12]
 8005612:	460b      	mov	r3, r1
 8005614:	607a      	str	r2, [r7, #4]
 8005616:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800561e:	617b      	str	r3, [r7, #20]
  uint32_t len;

  if (hmsc == NULL)
 8005620:	697b      	ldr	r3, [r7, #20]
 8005622:	2b00      	cmp	r3, #0
 8005624:	d102      	bne.n	800562c <SCSI_Write10+0x22>
  {
    return -1;
 8005626:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800562a:	e0af      	b.n	800578c <SCSI_Write10+0x182>
  }

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 800562c:	697b      	ldr	r3, [r7, #20]
 800562e:	7a1b      	ldrb	r3, [r3, #8]
 8005630:	2b00      	cmp	r3, #0
 8005632:	f040 80a5 	bne.w	8005780 <SCSI_Write10+0x176>
  {
    if (hmsc->cbw.dDataLength == 0U)
 8005636:	697b      	ldr	r3, [r7, #20]
 8005638:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 800563c:	2b00      	cmp	r3, #0
 800563e:	d10a      	bne.n	8005656 <SCSI_Write10+0x4c>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8005640:	697b      	ldr	r3, [r7, #20]
 8005642:	f893 121d 	ldrb.w	r1, [r3, #541]	@ 0x21d
 8005646:	2320      	movs	r3, #32
 8005648:	2205      	movs	r2, #5
 800564a:	68f8      	ldr	r0, [r7, #12]
 800564c:	f7ff fdd1 	bl	80051f2 <SCSI_SenseCode>
      return -1;
 8005650:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005654:	e09a      	b.n	800578c <SCSI_Write10+0x182>
    }

    /* case 8 : Hi <> Do */
    if ((hmsc->cbw.bmFlags & 0x80U) == 0x80U)
 8005656:	697b      	ldr	r3, [r7, #20]
 8005658:	f893 321c 	ldrb.w	r3, [r3, #540]	@ 0x21c
 800565c:	b25b      	sxtb	r3, r3
 800565e:	2b00      	cmp	r3, #0
 8005660:	da0a      	bge.n	8005678 <SCSI_Write10+0x6e>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8005662:	697b      	ldr	r3, [r7, #20]
 8005664:	f893 121d 	ldrb.w	r1, [r3, #541]	@ 0x21d
 8005668:	2320      	movs	r3, #32
 800566a:	2205      	movs	r2, #5
 800566c:	68f8      	ldr	r0, [r7, #12]
 800566e:	f7ff fdc0 	bl	80051f2 <SCSI_SenseCode>
      return -1;
 8005672:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005676:	e089      	b.n	800578c <SCSI_Write10+0x182>
    }

    /* Check whether Media is ready */
    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800567e:	689b      	ldr	r3, [r3, #8]
 8005680:	7afa      	ldrb	r2, [r7, #11]
 8005682:	4610      	mov	r0, r2
 8005684:	4798      	blx	r3
 8005686:	4603      	mov	r3, r0
 8005688:	2b00      	cmp	r3, #0
 800568a:	d008      	beq.n	800569e <SCSI_Write10+0x94>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800568c:	7af9      	ldrb	r1, [r7, #11]
 800568e:	233a      	movs	r3, #58	@ 0x3a
 8005690:	2202      	movs	r2, #2
 8005692:	68f8      	ldr	r0, [r7, #12]
 8005694:	f7ff fdad 	bl	80051f2 <SCSI_SenseCode>
      return -1;
 8005698:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800569c:	e076      	b.n	800578c <SCSI_Write10+0x182>
    }

    /* Check If media is write-protected */
    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsWriteProtected(lun) != 0)
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 80056a4:	68db      	ldr	r3, [r3, #12]
 80056a6:	7afa      	ldrb	r2, [r7, #11]
 80056a8:	4610      	mov	r0, r2
 80056aa:	4798      	blx	r3
 80056ac:	4603      	mov	r3, r0
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d008      	beq.n	80056c4 <SCSI_Write10+0xba>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, WRITE_PROTECTED);
 80056b2:	7af9      	ldrb	r1, [r7, #11]
 80056b4:	2327      	movs	r3, #39	@ 0x27
 80056b6:	2202      	movs	r2, #2
 80056b8:	68f8      	ldr	r0, [r7, #12]
 80056ba:	f7ff fd9a 	bl	80051f2 <SCSI_SenseCode>
      return -1;
 80056be:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80056c2:	e063      	b.n	800578c <SCSI_Write10+0x182>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	3302      	adds	r3, #2
 80056c8:	781b      	ldrb	r3, [r3, #0]
 80056ca:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	3303      	adds	r3, #3
 80056d0:	781b      	ldrb	r3, [r3, #0]
 80056d2:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 80056d4:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] << 8) |
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	3304      	adds	r3, #4
 80056da:	781b      	ldrb	r3, [r3, #0]
 80056dc:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 80056de:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 80056e0:	687a      	ldr	r2, [r7, #4]
 80056e2:	3205      	adds	r2, #5
 80056e4:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] << 8) |
 80056e6:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 80056e8:	697b      	ldr	r3, [r7, #20]
 80056ea:	f8c3 226c 	str.w	r2, [r3, #620]	@ 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	3307      	adds	r3, #7
 80056f2:	781b      	ldrb	r3, [r3, #0]
 80056f4:	021b      	lsls	r3, r3, #8
                         (uint32_t)params[8];
 80056f6:	687a      	ldr	r2, [r7, #4]
 80056f8:	3208      	adds	r2, #8
 80056fa:	7812      	ldrb	r2, [r2, #0]
    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 80056fc:	431a      	orrs	r2, r3
 80056fe:	697b      	ldr	r3, [r7, #20]
 8005700:	f8c3 2270 	str.w	r2, [r3, #624]	@ 0x270

    /* check if LBA address is in the right range */
    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 8005704:	697b      	ldr	r3, [r7, #20]
 8005706:	f8d3 226c 	ldr.w	r2, [r3, #620]	@ 0x26c
 800570a:	697b      	ldr	r3, [r7, #20]
 800570c:	f8d3 3270 	ldr.w	r3, [r3, #624]	@ 0x270
 8005710:	7af9      	ldrb	r1, [r7, #11]
 8005712:	68f8      	ldr	r0, [r7, #12]
 8005714:	f000 f94c 	bl	80059b0 <SCSI_CheckAddressRange>
 8005718:	4603      	mov	r3, r0
 800571a:	2b00      	cmp	r3, #0
 800571c:	da02      	bge.n	8005724 <SCSI_Write10+0x11a>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 800571e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005722:	e033      	b.n	800578c <SCSI_Write10+0x182>
    }

    len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 8005724:	697b      	ldr	r3, [r7, #20]
 8005726:	f8d3 3270 	ldr.w	r3, [r3, #624]	@ 0x270
 800572a:	697a      	ldr	r2, [r7, #20]
 800572c:	f8b2 2264 	ldrh.w	r2, [r2, #612]	@ 0x264
 8005730:	fb02 f303 	mul.w	r3, r2, r3
 8005734:	613b      	str	r3, [r7, #16]

    /* cases 3,11,13 : Hn,Ho <> D0 */
    if (hmsc->cbw.dDataLength != len)
 8005736:	697b      	ldr	r3, [r7, #20]
 8005738:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 800573c:	693a      	ldr	r2, [r7, #16]
 800573e:	429a      	cmp	r2, r3
 8005740:	d00a      	beq.n	8005758 <SCSI_Write10+0x14e>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8005742:	697b      	ldr	r3, [r7, #20]
 8005744:	f893 121d 	ldrb.w	r1, [r3, #541]	@ 0x21d
 8005748:	2320      	movs	r3, #32
 800574a:	2205      	movs	r2, #5
 800574c:	68f8      	ldr	r0, [r7, #12]
 800574e:	f7ff fd50 	bl	80051f2 <SCSI_SenseCode>
      return -1;
 8005752:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005756:	e019      	b.n	800578c <SCSI_Write10+0x182>
    }

    len = MIN(len, MSC_MEDIA_PACKET);
 8005758:	693b      	ldr	r3, [r7, #16]
 800575a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800575e:	bf28      	it	cs
 8005760:	f44f 7300 	movcs.w	r3, #512	@ 0x200
 8005764:	613b      	str	r3, [r7, #16]

    /* Prepare EP to receive first data packet */
    hmsc->bot_state = USBD_BOT_DATA_OUT;
 8005766:	697b      	ldr	r3, [r7, #20]
 8005768:	2201      	movs	r2, #1
 800576a:	721a      	strb	r2, [r3, #8]
    (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, hmsc->bot_data, len);
 800576c:	697b      	ldr	r3, [r7, #20]
 800576e:	f103 0210 	add.w	r2, r3, #16
 8005772:	693b      	ldr	r3, [r7, #16]
 8005774:	2101      	movs	r1, #1
 8005776:	68f8      	ldr	r0, [r7, #12]
 8005778:	f002 f80f 	bl	800779a <USBD_LL_PrepareReceive>
  else /* Write Process ongoing */
  {
    return SCSI_ProcessWrite(pdev, lun);
  }

  return 0;
 800577c:	2300      	movs	r3, #0
 800577e:	e005      	b.n	800578c <SCSI_Write10+0x182>
    return SCSI_ProcessWrite(pdev, lun);
 8005780:	7afb      	ldrb	r3, [r7, #11]
 8005782:	4619      	mov	r1, r3
 8005784:	68f8      	ldr	r0, [r7, #12]
 8005786:	f000 f9b4 	bl	8005af2 <SCSI_ProcessWrite>
 800578a:	4603      	mov	r3, r0
}
 800578c:	4618      	mov	r0, r3
 800578e:	3718      	adds	r7, #24
 8005790:	46bd      	mov	sp, r7
 8005792:	bd80      	pop	{r7, pc}

08005794 <SCSI_Write12>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Write12(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8005794:	b580      	push	{r7, lr}
 8005796:	b086      	sub	sp, #24
 8005798:	af00      	add	r7, sp, #0
 800579a:	60f8      	str	r0, [r7, #12]
 800579c:	460b      	mov	r3, r1
 800579e:	607a      	str	r2, [r7, #4]
 80057a0:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80057a8:	617b      	str	r3, [r7, #20]
  uint32_t len;

  if (hmsc == NULL)
 80057aa:	697b      	ldr	r3, [r7, #20]
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d102      	bne.n	80057b6 <SCSI_Write12+0x22>
  {
    return -1;
 80057b0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80057b4:	e0bf      	b.n	8005936 <SCSI_Write12+0x1a2>
  }

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 80057b6:	697b      	ldr	r3, [r7, #20]
 80057b8:	7a1b      	ldrb	r3, [r3, #8]
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	f040 80b5 	bne.w	800592a <SCSI_Write12+0x196>
  {
    if (hmsc->cbw.dDataLength == 0U)
 80057c0:	697b      	ldr	r3, [r7, #20]
 80057c2:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d10a      	bne.n	80057e0 <SCSI_Write12+0x4c>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80057ca:	697b      	ldr	r3, [r7, #20]
 80057cc:	f893 121d 	ldrb.w	r1, [r3, #541]	@ 0x21d
 80057d0:	2320      	movs	r3, #32
 80057d2:	2205      	movs	r2, #5
 80057d4:	68f8      	ldr	r0, [r7, #12]
 80057d6:	f7ff fd0c 	bl	80051f2 <SCSI_SenseCode>
      return -1;
 80057da:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80057de:	e0aa      	b.n	8005936 <SCSI_Write12+0x1a2>
    }

    /* case 8 : Hi <> Do */
    if ((hmsc->cbw.bmFlags & 0x80U) == 0x80U)
 80057e0:	697b      	ldr	r3, [r7, #20]
 80057e2:	f893 321c 	ldrb.w	r3, [r3, #540]	@ 0x21c
 80057e6:	b25b      	sxtb	r3, r3
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	da0a      	bge.n	8005802 <SCSI_Write12+0x6e>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80057ec:	697b      	ldr	r3, [r7, #20]
 80057ee:	f893 121d 	ldrb.w	r1, [r3, #541]	@ 0x21d
 80057f2:	2320      	movs	r3, #32
 80057f4:	2205      	movs	r2, #5
 80057f6:	68f8      	ldr	r0, [r7, #12]
 80057f8:	f7ff fcfb 	bl	80051f2 <SCSI_SenseCode>
      return -1;
 80057fc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005800:	e099      	b.n	8005936 <SCSI_Write12+0x1a2>
    }

    /* Check whether Media is ready */
    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8005808:	689b      	ldr	r3, [r3, #8]
 800580a:	7afa      	ldrb	r2, [r7, #11]
 800580c:	4610      	mov	r0, r2
 800580e:	4798      	blx	r3
 8005810:	4603      	mov	r3, r0
 8005812:	2b00      	cmp	r3, #0
 8005814:	d00b      	beq.n	800582e <SCSI_Write12+0x9a>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8005816:	7af9      	ldrb	r1, [r7, #11]
 8005818:	233a      	movs	r3, #58	@ 0x3a
 800581a:	2202      	movs	r2, #2
 800581c:	68f8      	ldr	r0, [r7, #12]
 800581e:	f7ff fce8 	bl	80051f2 <SCSI_SenseCode>
      hmsc->bot_state = USBD_BOT_NO_DATA;
 8005822:	697b      	ldr	r3, [r7, #20]
 8005824:	2205      	movs	r2, #5
 8005826:	721a      	strb	r2, [r3, #8]
      return -1;
 8005828:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800582c:	e083      	b.n	8005936 <SCSI_Write12+0x1a2>
    }

    /* Check If media is write-protected */
    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsWriteProtected(lun) != 0)
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8005834:	68db      	ldr	r3, [r3, #12]
 8005836:	7afa      	ldrb	r2, [r7, #11]
 8005838:	4610      	mov	r0, r2
 800583a:	4798      	blx	r3
 800583c:	4603      	mov	r3, r0
 800583e:	2b00      	cmp	r3, #0
 8005840:	d00b      	beq.n	800585a <SCSI_Write12+0xc6>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, WRITE_PROTECTED);
 8005842:	7af9      	ldrb	r1, [r7, #11]
 8005844:	2327      	movs	r3, #39	@ 0x27
 8005846:	2202      	movs	r2, #2
 8005848:	68f8      	ldr	r0, [r7, #12]
 800584a:	f7ff fcd2 	bl	80051f2 <SCSI_SenseCode>
      hmsc->bot_state = USBD_BOT_NO_DATA;
 800584e:	697b      	ldr	r3, [r7, #20]
 8005850:	2205      	movs	r2, #5
 8005852:	721a      	strb	r2, [r3, #8]
      return -1;
 8005854:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005858:	e06d      	b.n	8005936 <SCSI_Write12+0x1a2>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	3302      	adds	r3, #2
 800585e:	781b      	ldrb	r3, [r3, #0]
 8005860:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	3303      	adds	r3, #3
 8005866:	781b      	ldrb	r3, [r3, #0]
 8005868:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800586a:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] << 8) |
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	3304      	adds	r3, #4
 8005870:	781b      	ldrb	r3, [r3, #0]
 8005872:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 8005874:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 8005876:	687a      	ldr	r2, [r7, #4]
 8005878:	3205      	adds	r2, #5
 800587a:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] << 8) |
 800587c:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800587e:	697b      	ldr	r3, [r7, #20]
 8005880:	f8c3 226c 	str.w	r2, [r3, #620]	@ 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	3306      	adds	r3, #6
 8005888:	781b      	ldrb	r3, [r3, #0]
 800588a:	061a      	lsls	r2, r3, #24
                         ((uint32_t)params[7] << 16) |
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	3307      	adds	r3, #7
 8005890:	781b      	ldrb	r3, [r3, #0]
 8005892:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8005894:	431a      	orrs	r2, r3
                         ((uint32_t)params[8] << 8) |
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	3308      	adds	r3, #8
 800589a:	781b      	ldrb	r3, [r3, #0]
 800589c:	021b      	lsls	r3, r3, #8
                         ((uint32_t)params[7] << 16) |
 800589e:	4313      	orrs	r3, r2
                         (uint32_t)params[9];
 80058a0:	687a      	ldr	r2, [r7, #4]
 80058a2:	3209      	adds	r2, #9
 80058a4:	7812      	ldrb	r2, [r2, #0]
                         ((uint32_t)params[8] << 8) |
 80058a6:	431a      	orrs	r2, r3
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 80058a8:	697b      	ldr	r3, [r7, #20]
 80058aa:	f8c3 2270 	str.w	r2, [r3, #624]	@ 0x270

    /* check if LBA address is in the right range */
    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 80058ae:	697b      	ldr	r3, [r7, #20]
 80058b0:	f8d3 226c 	ldr.w	r2, [r3, #620]	@ 0x26c
 80058b4:	697b      	ldr	r3, [r7, #20]
 80058b6:	f8d3 3270 	ldr.w	r3, [r3, #624]	@ 0x270
 80058ba:	7af9      	ldrb	r1, [r7, #11]
 80058bc:	68f8      	ldr	r0, [r7, #12]
 80058be:	f000 f877 	bl	80059b0 <SCSI_CheckAddressRange>
 80058c2:	4603      	mov	r3, r0
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	da02      	bge.n	80058ce <SCSI_Write12+0x13a>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 80058c8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80058cc:	e033      	b.n	8005936 <SCSI_Write12+0x1a2>
    }

    len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 80058ce:	697b      	ldr	r3, [r7, #20]
 80058d0:	f8d3 3270 	ldr.w	r3, [r3, #624]	@ 0x270
 80058d4:	697a      	ldr	r2, [r7, #20]
 80058d6:	f8b2 2264 	ldrh.w	r2, [r2, #612]	@ 0x264
 80058da:	fb02 f303 	mul.w	r3, r2, r3
 80058de:	613b      	str	r3, [r7, #16]

    /* cases 3,11,13 : Hn,Ho <> D0 */
    if (hmsc->cbw.dDataLength != len)
 80058e0:	697b      	ldr	r3, [r7, #20]
 80058e2:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 80058e6:	693a      	ldr	r2, [r7, #16]
 80058e8:	429a      	cmp	r2, r3
 80058ea:	d00a      	beq.n	8005902 <SCSI_Write12+0x16e>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80058ec:	697b      	ldr	r3, [r7, #20]
 80058ee:	f893 121d 	ldrb.w	r1, [r3, #541]	@ 0x21d
 80058f2:	2320      	movs	r3, #32
 80058f4:	2205      	movs	r2, #5
 80058f6:	68f8      	ldr	r0, [r7, #12]
 80058f8:	f7ff fc7b 	bl	80051f2 <SCSI_SenseCode>
      return -1;
 80058fc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005900:	e019      	b.n	8005936 <SCSI_Write12+0x1a2>
    }

    len = MIN(len, MSC_MEDIA_PACKET);
 8005902:	693b      	ldr	r3, [r7, #16]
 8005904:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005908:	bf28      	it	cs
 800590a:	f44f 7300 	movcs.w	r3, #512	@ 0x200
 800590e:	613b      	str	r3, [r7, #16]

    /* Prepare EP to receive first data packet */
    hmsc->bot_state = USBD_BOT_DATA_OUT;
 8005910:	697b      	ldr	r3, [r7, #20]
 8005912:	2201      	movs	r2, #1
 8005914:	721a      	strb	r2, [r3, #8]
    (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, hmsc->bot_data, len);
 8005916:	697b      	ldr	r3, [r7, #20]
 8005918:	f103 0210 	add.w	r2, r3, #16
 800591c:	693b      	ldr	r3, [r7, #16]
 800591e:	2101      	movs	r1, #1
 8005920:	68f8      	ldr	r0, [r7, #12]
 8005922:	f001 ff3a 	bl	800779a <USBD_LL_PrepareReceive>
  else /* Write Process ongoing */
  {
    return SCSI_ProcessWrite(pdev, lun);
  }

  return 0;
 8005926:	2300      	movs	r3, #0
 8005928:	e005      	b.n	8005936 <SCSI_Write12+0x1a2>
    return SCSI_ProcessWrite(pdev, lun);
 800592a:	7afb      	ldrb	r3, [r7, #11]
 800592c:	4619      	mov	r1, r3
 800592e:	68f8      	ldr	r0, [r7, #12]
 8005930:	f000 f8df 	bl	8005af2 <SCSI_ProcessWrite>
 8005934:	4603      	mov	r3, r0
}
 8005936:	4618      	mov	r0, r3
 8005938:	3718      	adds	r7, #24
 800593a:	46bd      	mov	sp, r7
 800593c:	bd80      	pop	{r7, pc}

0800593e <SCSI_Verify10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Verify10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800593e:	b580      	push	{r7, lr}
 8005940:	b086      	sub	sp, #24
 8005942:	af00      	add	r7, sp, #0
 8005944:	60f8      	str	r0, [r7, #12]
 8005946:	460b      	mov	r3, r1
 8005948:	607a      	str	r2, [r7, #4]
 800594a:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8005952:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 8005954:	697b      	ldr	r3, [r7, #20]
 8005956:	2b00      	cmp	r3, #0
 8005958:	d102      	bne.n	8005960 <SCSI_Verify10+0x22>
  {
    return -1;
 800595a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800595e:	e023      	b.n	80059a8 <SCSI_Verify10+0x6a>
  }

  if ((params[1] & 0x02U) == 0x02U)
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	3301      	adds	r3, #1
 8005964:	781b      	ldrb	r3, [r3, #0]
 8005966:	f003 0302 	and.w	r3, r3, #2
 800596a:	2b00      	cmp	r3, #0
 800596c:	d008      	beq.n	8005980 <SCSI_Verify10+0x42>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
 800596e:	7af9      	ldrb	r1, [r7, #11]
 8005970:	2324      	movs	r3, #36	@ 0x24
 8005972:	2205      	movs	r2, #5
 8005974:	68f8      	ldr	r0, [r7, #12]
 8005976:	f7ff fc3c 	bl	80051f2 <SCSI_SenseCode>
    return -1; /* Error, Verify Mode Not supported*/
 800597a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800597e:	e013      	b.n	80059a8 <SCSI_Verify10+0x6a>
  }

  if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr, hmsc->scsi_blk_len) < 0)
 8005980:	697b      	ldr	r3, [r7, #20]
 8005982:	f8d3 226c 	ldr.w	r2, [r3, #620]	@ 0x26c
 8005986:	697b      	ldr	r3, [r7, #20]
 8005988:	f8d3 3270 	ldr.w	r3, [r3, #624]	@ 0x270
 800598c:	7af9      	ldrb	r1, [r7, #11]
 800598e:	68f8      	ldr	r0, [r7, #12]
 8005990:	f000 f80e 	bl	80059b0 <SCSI_CheckAddressRange>
 8005994:	4603      	mov	r3, r0
 8005996:	2b00      	cmp	r3, #0
 8005998:	da02      	bge.n	80059a0 <SCSI_Verify10+0x62>
  {
    return -1; /* error */
 800599a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800599e:	e003      	b.n	80059a8 <SCSI_Verify10+0x6a>
  }

  hmsc->bot_data_length = 0U;
 80059a0:	697b      	ldr	r3, [r7, #20]
 80059a2:	2200      	movs	r2, #0
 80059a4:	60da      	str	r2, [r3, #12]

  return 0;
 80059a6:	2300      	movs	r3, #0
}
 80059a8:	4618      	mov	r0, r3
 80059aa:	3718      	adds	r7, #24
 80059ac:	46bd      	mov	sp, r7
 80059ae:	bd80      	pop	{r7, pc}

080059b0 <SCSI_CheckAddressRange>:
  * @param  blk_nbr: number of block to be processed
  * @retval status
  */
static int8_t SCSI_CheckAddressRange(USBD_HandleTypeDef *pdev, uint8_t lun,
                                     uint32_t blk_offset, uint32_t blk_nbr)
{
 80059b0:	b580      	push	{r7, lr}
 80059b2:	b086      	sub	sp, #24
 80059b4:	af00      	add	r7, sp, #0
 80059b6:	60f8      	str	r0, [r7, #12]
 80059b8:	607a      	str	r2, [r7, #4]
 80059ba:	603b      	str	r3, [r7, #0]
 80059bc:	460b      	mov	r3, r1
 80059be:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80059c6:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 80059c8:	697b      	ldr	r3, [r7, #20]
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d102      	bne.n	80059d4 <SCSI_CheckAddressRange+0x24>
  {
    return -1;
 80059ce:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80059d2:	e011      	b.n	80059f8 <SCSI_CheckAddressRange+0x48>
  }

  if ((blk_offset + blk_nbr) > hmsc->scsi_blk_nbr)
 80059d4:	687a      	ldr	r2, [r7, #4]
 80059d6:	683b      	ldr	r3, [r7, #0]
 80059d8:	441a      	add	r2, r3
 80059da:	697b      	ldr	r3, [r7, #20]
 80059dc:	f8d3 3268 	ldr.w	r3, [r3, #616]	@ 0x268
 80059e0:	429a      	cmp	r2, r3
 80059e2:	d908      	bls.n	80059f6 <SCSI_CheckAddressRange+0x46>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, ADDRESS_OUT_OF_RANGE);
 80059e4:	7af9      	ldrb	r1, [r7, #11]
 80059e6:	2321      	movs	r3, #33	@ 0x21
 80059e8:	2205      	movs	r2, #5
 80059ea:	68f8      	ldr	r0, [r7, #12]
 80059ec:	f7ff fc01 	bl	80051f2 <SCSI_SenseCode>
    return -1;
 80059f0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80059f4:	e000      	b.n	80059f8 <SCSI_CheckAddressRange+0x48>
  }

  return 0;
 80059f6:	2300      	movs	r3, #0
}
 80059f8:	4618      	mov	r0, r3
 80059fa:	3718      	adds	r7, #24
 80059fc:	46bd      	mov	sp, r7
 80059fe:	bd80      	pop	{r7, pc}

08005a00 <SCSI_ProcessRead>:
  *         Handle Read Process
  * @param  lun: Logical unit number
  * @retval status
  */
static int8_t SCSI_ProcessRead(USBD_HandleTypeDef *pdev, uint8_t lun)
{
 8005a00:	b590      	push	{r4, r7, lr}
 8005a02:	b085      	sub	sp, #20
 8005a04:	af00      	add	r7, sp, #0
 8005a06:	6078      	str	r0, [r7, #4]
 8005a08:	460b      	mov	r3, r1
 8005a0a:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8005a12:	60fb      	str	r3, [r7, #12]
  uint32_t len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	f8d3 3270 	ldr.w	r3, [r3, #624]	@ 0x270
 8005a1a:	68fa      	ldr	r2, [r7, #12]
 8005a1c:	f8b2 2264 	ldrh.w	r2, [r2, #612]	@ 0x264
 8005a20:	fb02 f303 	mul.w	r3, r2, r3
 8005a24:	60bb      	str	r3, [r7, #8]

  if (hmsc == NULL)
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d102      	bne.n	8005a32 <SCSI_ProcessRead+0x32>
  {
    return -1;
 8005a2c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005a30:	e05b      	b.n	8005aea <SCSI_ProcessRead+0xea>
  }

  len = MIN(len, MSC_MEDIA_PACKET);
 8005a32:	68bb      	ldr	r3, [r7, #8]
 8005a34:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005a38:	bf28      	it	cs
 8005a3a:	f44f 7300 	movcs.w	r3, #512	@ 0x200
 8005a3e:	60bb      	str	r3, [r7, #8]

  if (((USBD_StorageTypeDef *)pdev->pUserData)->Read(lun, hmsc->bot_data,
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8005a46:	691c      	ldr	r4, [r3, #16]
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	f103 0110 	add.w	r1, r3, #16
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	f8d3 226c 	ldr.w	r2, [r3, #620]	@ 0x26c
                                                     hmsc->scsi_blk_addr,
                                                     (len / hmsc->scsi_blk_size)) < 0)
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	f8b3 3264 	ldrh.w	r3, [r3, #612]	@ 0x264
 8005a5a:	4618      	mov	r0, r3
 8005a5c:	68bb      	ldr	r3, [r7, #8]
 8005a5e:	fbb3 f3f0 	udiv	r3, r3, r0
  if (((USBD_StorageTypeDef *)pdev->pUserData)->Read(lun, hmsc->bot_data,
 8005a62:	b29b      	uxth	r3, r3
 8005a64:	78f8      	ldrb	r0, [r7, #3]
 8005a66:	47a0      	blx	r4
 8005a68:	4603      	mov	r3, r0
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	da08      	bge.n	8005a80 <SCSI_ProcessRead+0x80>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, UNRECOVERED_READ_ERROR);
 8005a6e:	78f9      	ldrb	r1, [r7, #3]
 8005a70:	2311      	movs	r3, #17
 8005a72:	2204      	movs	r2, #4
 8005a74:	6878      	ldr	r0, [r7, #4]
 8005a76:	f7ff fbbc 	bl	80051f2 <SCSI_SenseCode>
    return -1;
 8005a7a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005a7e:	e034      	b.n	8005aea <SCSI_ProcessRead+0xea>
  }

  (void)USBD_LL_Transmit(pdev, MSC_EPIN_ADDR, hmsc->bot_data, len);
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	f103 0210 	add.w	r2, r3, #16
 8005a86:	68bb      	ldr	r3, [r7, #8]
 8005a88:	2181      	movs	r1, #129	@ 0x81
 8005a8a:	6878      	ldr	r0, [r7, #4]
 8005a8c:	f001 fe64 	bl	8007758 <USBD_LL_Transmit>

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	f8d3 226c 	ldr.w	r2, [r3, #620]	@ 0x26c
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	f8b3 3264 	ldrh.w	r3, [r3, #612]	@ 0x264
 8005a9c:	4619      	mov	r1, r3
 8005a9e:	68bb      	ldr	r3, [r7, #8]
 8005aa0:	fbb3 f3f1 	udiv	r3, r3, r1
 8005aa4:	441a      	add	r2, r3
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	f8c3 226c 	str.w	r2, [r3, #620]	@ 0x26c
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	f8d3 2270 	ldr.w	r2, [r3, #624]	@ 0x270
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	f8b3 3264 	ldrh.w	r3, [r3, #612]	@ 0x264
 8005ab8:	4619      	mov	r1, r3
 8005aba:	68bb      	ldr	r3, [r7, #8]
 8005abc:	fbb3 f3f1 	udiv	r3, r3, r1
 8005ac0:	1ad2      	subs	r2, r2, r3
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	f8c3 2270 	str.w	r2, [r3, #624]	@ 0x270

  /* case 6 : Hi = Di */
  hmsc->csw.dDataResidue -= len;
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	f8d3 2238 	ldr.w	r2, [r3, #568]	@ 0x238
 8005ace:	68bb      	ldr	r3, [r7, #8]
 8005ad0:	1ad2      	subs	r2, r2, r3
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	f8c3 2238 	str.w	r2, [r3, #568]	@ 0x238

  if (hmsc->scsi_blk_len == 0U)
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	f8d3 3270 	ldr.w	r3, [r3, #624]	@ 0x270
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d102      	bne.n	8005ae8 <SCSI_ProcessRead+0xe8>
  {
    hmsc->bot_state = USBD_BOT_LAST_DATA_IN;
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	2203      	movs	r2, #3
 8005ae6:	721a      	strb	r2, [r3, #8]
  }

  return 0;
 8005ae8:	2300      	movs	r3, #0
}
 8005aea:	4618      	mov	r0, r3
 8005aec:	3714      	adds	r7, #20
 8005aee:	46bd      	mov	sp, r7
 8005af0:	bd90      	pop	{r4, r7, pc}

08005af2 <SCSI_ProcessWrite>:
  *         Handle Write Process
  * @param  lun: Logical unit number
  * @retval status
  */
static int8_t SCSI_ProcessWrite(USBD_HandleTypeDef *pdev, uint8_t lun)
{
 8005af2:	b590      	push	{r4, r7, lr}
 8005af4:	b085      	sub	sp, #20
 8005af6:	af00      	add	r7, sp, #0
 8005af8:	6078      	str	r0, [r7, #4]
 8005afa:	460b      	mov	r3, r1
 8005afc:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8005b04:	60fb      	str	r3, [r7, #12]
  uint32_t len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	f8d3 3270 	ldr.w	r3, [r3, #624]	@ 0x270
 8005b0c:	68fa      	ldr	r2, [r7, #12]
 8005b0e:	f8b2 2264 	ldrh.w	r2, [r2, #612]	@ 0x264
 8005b12:	fb02 f303 	mul.w	r3, r2, r3
 8005b16:	60bb      	str	r3, [r7, #8]

  if (hmsc == NULL)
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d102      	bne.n	8005b24 <SCSI_ProcessWrite+0x32>
  {
    return -1;
 8005b1e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005b22:	e06b      	b.n	8005bfc <SCSI_ProcessWrite+0x10a>
  }

  len = MIN(len, MSC_MEDIA_PACKET);
 8005b24:	68bb      	ldr	r3, [r7, #8]
 8005b26:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005b2a:	bf28      	it	cs
 8005b2c:	f44f 7300 	movcs.w	r3, #512	@ 0x200
 8005b30:	60bb      	str	r3, [r7, #8]

  if (((USBD_StorageTypeDef *)pdev->pUserData)->Write(lun, hmsc->bot_data,
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8005b38:	695c      	ldr	r4, [r3, #20]
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	f103 0110 	add.w	r1, r3, #16
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	f8d3 226c 	ldr.w	r2, [r3, #620]	@ 0x26c
                                                      hmsc->scsi_blk_addr,
                                                      (len / hmsc->scsi_blk_size)) < 0)
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	f8b3 3264 	ldrh.w	r3, [r3, #612]	@ 0x264
 8005b4c:	4618      	mov	r0, r3
 8005b4e:	68bb      	ldr	r3, [r7, #8]
 8005b50:	fbb3 f3f0 	udiv	r3, r3, r0
  if (((USBD_StorageTypeDef *)pdev->pUserData)->Write(lun, hmsc->bot_data,
 8005b54:	b29b      	uxth	r3, r3
 8005b56:	78f8      	ldrb	r0, [r7, #3]
 8005b58:	47a0      	blx	r4
 8005b5a:	4603      	mov	r3, r0
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	da08      	bge.n	8005b72 <SCSI_ProcessWrite+0x80>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, WRITE_FAULT);
 8005b60:	78f9      	ldrb	r1, [r7, #3]
 8005b62:	2303      	movs	r3, #3
 8005b64:	2204      	movs	r2, #4
 8005b66:	6878      	ldr	r0, [r7, #4]
 8005b68:	f7ff fb43 	bl	80051f2 <SCSI_SenseCode>
    return -1;
 8005b6c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005b70:	e044      	b.n	8005bfc <SCSI_ProcessWrite+0x10a>
  }

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	f8d3 226c 	ldr.w	r2, [r3, #620]	@ 0x26c
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	f8b3 3264 	ldrh.w	r3, [r3, #612]	@ 0x264
 8005b7e:	4619      	mov	r1, r3
 8005b80:	68bb      	ldr	r3, [r7, #8]
 8005b82:	fbb3 f3f1 	udiv	r3, r3, r1
 8005b86:	441a      	add	r2, r3
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	f8c3 226c 	str.w	r2, [r3, #620]	@ 0x26c
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	f8d3 2270 	ldr.w	r2, [r3, #624]	@ 0x270
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	f8b3 3264 	ldrh.w	r3, [r3, #612]	@ 0x264
 8005b9a:	4619      	mov	r1, r3
 8005b9c:	68bb      	ldr	r3, [r7, #8]
 8005b9e:	fbb3 f3f1 	udiv	r3, r3, r1
 8005ba2:	1ad2      	subs	r2, r2, r3
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	f8c3 2270 	str.w	r2, [r3, #624]	@ 0x270

  /* case 12 : Ho = Do */
  hmsc->csw.dDataResidue -= len;
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	f8d3 2238 	ldr.w	r2, [r3, #568]	@ 0x238
 8005bb0:	68bb      	ldr	r3, [r7, #8]
 8005bb2:	1ad2      	subs	r2, r2, r3
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	f8c3 2238 	str.w	r2, [r3, #568]	@ 0x238

  if (hmsc->scsi_blk_len == 0U)
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	f8d3 3270 	ldr.w	r3, [r3, #624]	@ 0x270
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d104      	bne.n	8005bce <SCSI_ProcessWrite+0xdc>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 8005bc4:	2100      	movs	r1, #0
 8005bc6:	6878      	ldr	r0, [r7, #4]
 8005bc8:	f7fe fdd8 	bl	800477c <MSC_BOT_SendCSW>
 8005bcc:	e015      	b.n	8005bfa <SCSI_ProcessWrite+0x108>
  }
  else
  {
    len = MIN((hmsc->scsi_blk_len * hmsc->scsi_blk_size), MSC_MEDIA_PACKET);
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	f8d3 3270 	ldr.w	r3, [r3, #624]	@ 0x270
 8005bd4:	68fa      	ldr	r2, [r7, #12]
 8005bd6:	f8b2 2264 	ldrh.w	r2, [r2, #612]	@ 0x264
 8005bda:	fb02 f303 	mul.w	r3, r2, r3
 8005bde:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005be2:	bf28      	it	cs
 8005be4:	f44f 7300 	movcs.w	r3, #512	@ 0x200
 8005be8:	60bb      	str	r3, [r7, #8]

    /* Prepare EP to Receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, hmsc->bot_data, len);
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	f103 0210 	add.w	r2, r3, #16
 8005bf0:	68bb      	ldr	r3, [r7, #8]
 8005bf2:	2101      	movs	r1, #1
 8005bf4:	6878      	ldr	r0, [r7, #4]
 8005bf6:	f001 fdd0 	bl	800779a <USBD_LL_PrepareReceive>
  }

  return 0;
 8005bfa:	2300      	movs	r3, #0
}
 8005bfc:	4618      	mov	r0, r3
 8005bfe:	3714      	adds	r7, #20
 8005c00:	46bd      	mov	sp, r7
 8005c02:	bd90      	pop	{r4, r7, pc}

08005c04 <SCSI_UpdateBotData>:
  * @param  length: Data length
  * @retval status
  */
static int8_t SCSI_UpdateBotData(USBD_MSC_BOT_HandleTypeDef *hmsc,
                                 uint8_t *pBuff, uint16_t length)
{
 8005c04:	b480      	push	{r7}
 8005c06:	b087      	sub	sp, #28
 8005c08:	af00      	add	r7, sp, #0
 8005c0a:	60f8      	str	r0, [r7, #12]
 8005c0c:	60b9      	str	r1, [r7, #8]
 8005c0e:	4613      	mov	r3, r2
 8005c10:	80fb      	strh	r3, [r7, #6]
  uint16_t len = length;
 8005c12:	88fb      	ldrh	r3, [r7, #6]
 8005c14:	82fb      	strh	r3, [r7, #22]

  if (hmsc == NULL)
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d102      	bne.n	8005c22 <SCSI_UpdateBotData+0x1e>
  {
    return -1;
 8005c1c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005c20:	e013      	b.n	8005c4a <SCSI_UpdateBotData+0x46>
  }

  hmsc->bot_data_length = len;
 8005c22:	8afa      	ldrh	r2, [r7, #22]
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	60da      	str	r2, [r3, #12]

  while (len != 0U)
 8005c28:	e00b      	b.n	8005c42 <SCSI_UpdateBotData+0x3e>
  {
    len--;
 8005c2a:	8afb      	ldrh	r3, [r7, #22]
 8005c2c:	3b01      	subs	r3, #1
 8005c2e:	82fb      	strh	r3, [r7, #22]
    hmsc->bot_data[len] = pBuff[len];
 8005c30:	8afb      	ldrh	r3, [r7, #22]
 8005c32:	68ba      	ldr	r2, [r7, #8]
 8005c34:	441a      	add	r2, r3
 8005c36:	8afb      	ldrh	r3, [r7, #22]
 8005c38:	7811      	ldrb	r1, [r2, #0]
 8005c3a:	68fa      	ldr	r2, [r7, #12]
 8005c3c:	4413      	add	r3, r2
 8005c3e:	460a      	mov	r2, r1
 8005c40:	741a      	strb	r2, [r3, #16]
  while (len != 0U)
 8005c42:	8afb      	ldrh	r3, [r7, #22]
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d1f0      	bne.n	8005c2a <SCSI_UpdateBotData+0x26>
  }

  return 0;
 8005c48:	2300      	movs	r3, #0
}
 8005c4a:	4618      	mov	r0, r3
 8005c4c:	371c      	adds	r7, #28
 8005c4e:	46bd      	mov	sp, r7
 8005c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c54:	4770      	bx	lr

08005c56 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8005c56:	b580      	push	{r7, lr}
 8005c58:	b086      	sub	sp, #24
 8005c5a:	af00      	add	r7, sp, #0
 8005c5c:	60f8      	str	r0, [r7, #12]
 8005c5e:	60b9      	str	r1, [r7, #8]
 8005c60:	4613      	mov	r3, r2
 8005c62:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d101      	bne.n	8005c6e <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8005c6a:	2303      	movs	r3, #3
 8005c6c:	e01f      	b.n	8005cae <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	2200      	movs	r2, #0
 8005c72:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData = NULL;
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	2200      	movs	r2, #0
 8005c7a:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0
  pdev->pConfDesc = NULL;
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	2200      	movs	r2, #0
 8005c82:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8005c86:	68bb      	ldr	r3, [r7, #8]
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d003      	beq.n	8005c94 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	68ba      	ldr	r2, [r7, #8]
 8005c90:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	2201      	movs	r2, #1
 8005c98:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	79fa      	ldrb	r2, [r7, #7]
 8005ca0:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8005ca2:	68f8      	ldr	r0, [r7, #12]
 8005ca4:	f001 fc04 	bl	80074b0 <USBD_LL_Init>
 8005ca8:	4603      	mov	r3, r0
 8005caa:	75fb      	strb	r3, [r7, #23]

  return ret;
 8005cac:	7dfb      	ldrb	r3, [r7, #23]
}
 8005cae:	4618      	mov	r0, r3
 8005cb0:	3718      	adds	r7, #24
 8005cb2:	46bd      	mov	sp, r7
 8005cb4:	bd80      	pop	{r7, pc}

08005cb6 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8005cb6:	b580      	push	{r7, lr}
 8005cb8:	b084      	sub	sp, #16
 8005cba:	af00      	add	r7, sp, #0
 8005cbc:	6078      	str	r0, [r7, #4]
 8005cbe:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8005cc0:	2300      	movs	r3, #0
 8005cc2:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8005cc4:	683b      	ldr	r3, [r7, #0]
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d101      	bne.n	8005cce <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8005cca:	2303      	movs	r3, #3
 8005ccc:	e016      	b.n	8005cfc <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	683a      	ldr	r2, [r7, #0]
 8005cd2:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005cdc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d00b      	beq.n	8005cfa <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005ce8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005cea:	f107 020e 	add.w	r2, r7, #14
 8005cee:	4610      	mov	r0, r2
 8005cf0:	4798      	blx	r3
 8005cf2:	4602      	mov	r2, r0
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8005cfa:	2300      	movs	r3, #0
}
 8005cfc:	4618      	mov	r0, r3
 8005cfe:	3710      	adds	r7, #16
 8005d00:	46bd      	mov	sp, r7
 8005d02:	bd80      	pop	{r7, pc}

08005d04 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8005d04:	b580      	push	{r7, lr}
 8005d06:	b082      	sub	sp, #8
 8005d08:	af00      	add	r7, sp, #0
 8005d0a:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8005d0c:	6878      	ldr	r0, [r7, #4]
 8005d0e:	f001 fc1b 	bl	8007548 <USBD_LL_Start>
 8005d12:	4603      	mov	r3, r0
}
 8005d14:	4618      	mov	r0, r3
 8005d16:	3708      	adds	r7, #8
 8005d18:	46bd      	mov	sp, r7
 8005d1a:	bd80      	pop	{r7, pc}

08005d1c <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8005d1c:	b480      	push	{r7}
 8005d1e:	b083      	sub	sp, #12
 8005d20:	af00      	add	r7, sp, #0
 8005d22:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005d24:	2300      	movs	r3, #0
}
 8005d26:	4618      	mov	r0, r3
 8005d28:	370c      	adds	r7, #12
 8005d2a:	46bd      	mov	sp, r7
 8005d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d30:	4770      	bx	lr

08005d32 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005d32:	b580      	push	{r7, lr}
 8005d34:	b084      	sub	sp, #16
 8005d36:	af00      	add	r7, sp, #0
 8005d38:	6078      	str	r0, [r7, #4]
 8005d3a:	460b      	mov	r3, r1
 8005d3c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8005d3e:	2303      	movs	r3, #3
 8005d40:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d009      	beq.n	8005d60 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	78fa      	ldrb	r2, [r7, #3]
 8005d56:	4611      	mov	r1, r2
 8005d58:	6878      	ldr	r0, [r7, #4]
 8005d5a:	4798      	blx	r3
 8005d5c:	4603      	mov	r3, r0
 8005d5e:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8005d60:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d62:	4618      	mov	r0, r3
 8005d64:	3710      	adds	r7, #16
 8005d66:	46bd      	mov	sp, r7
 8005d68:	bd80      	pop	{r7, pc}

08005d6a <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005d6a:	b580      	push	{r7, lr}
 8005d6c:	b082      	sub	sp, #8
 8005d6e:	af00      	add	r7, sp, #0
 8005d70:	6078      	str	r0, [r7, #4]
 8005d72:	460b      	mov	r3, r1
 8005d74:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d007      	beq.n	8005d90 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005d86:	685b      	ldr	r3, [r3, #4]
 8005d88:	78fa      	ldrb	r2, [r7, #3]
 8005d8a:	4611      	mov	r1, r2
 8005d8c:	6878      	ldr	r0, [r7, #4]
 8005d8e:	4798      	blx	r3
  }

  return USBD_OK;
 8005d90:	2300      	movs	r3, #0
}
 8005d92:	4618      	mov	r0, r3
 8005d94:	3708      	adds	r7, #8
 8005d96:	46bd      	mov	sp, r7
 8005d98:	bd80      	pop	{r7, pc}

08005d9a <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8005d9a:	b580      	push	{r7, lr}
 8005d9c:	b084      	sub	sp, #16
 8005d9e:	af00      	add	r7, sp, #0
 8005da0:	6078      	str	r0, [r7, #4]
 8005da2:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8005daa:	6839      	ldr	r1, [r7, #0]
 8005dac:	4618      	mov	r0, r3
 8005dae:	f000 ff91 	bl	8006cd4 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	2201      	movs	r2, #1
 8005db6:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8005dc0:	461a      	mov	r2, r3
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8005dce:	f003 031f 	and.w	r3, r3, #31
 8005dd2:	2b02      	cmp	r3, #2
 8005dd4:	d01a      	beq.n	8005e0c <USBD_LL_SetupStage+0x72>
 8005dd6:	2b02      	cmp	r3, #2
 8005dd8:	d822      	bhi.n	8005e20 <USBD_LL_SetupStage+0x86>
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d002      	beq.n	8005de4 <USBD_LL_SetupStage+0x4a>
 8005dde:	2b01      	cmp	r3, #1
 8005de0:	d00a      	beq.n	8005df8 <USBD_LL_SetupStage+0x5e>
 8005de2:	e01d      	b.n	8005e20 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8005dea:	4619      	mov	r1, r3
 8005dec:	6878      	ldr	r0, [r7, #4]
 8005dee:	f000 fa63 	bl	80062b8 <USBD_StdDevReq>
 8005df2:	4603      	mov	r3, r0
 8005df4:	73fb      	strb	r3, [r7, #15]
      break;
 8005df6:	e020      	b.n	8005e3a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8005dfe:	4619      	mov	r1, r3
 8005e00:	6878      	ldr	r0, [r7, #4]
 8005e02:	f000 fac7 	bl	8006394 <USBD_StdItfReq>
 8005e06:	4603      	mov	r3, r0
 8005e08:	73fb      	strb	r3, [r7, #15]
      break;
 8005e0a:	e016      	b.n	8005e3a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8005e12:	4619      	mov	r1, r3
 8005e14:	6878      	ldr	r0, [r7, #4]
 8005e16:	f000 fb06 	bl	8006426 <USBD_StdEPReq>
 8005e1a:	4603      	mov	r3, r0
 8005e1c:	73fb      	strb	r3, [r7, #15]
      break;
 8005e1e:	e00c      	b.n	8005e3a <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8005e26:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8005e2a:	b2db      	uxtb	r3, r3
 8005e2c:	4619      	mov	r1, r3
 8005e2e:	6878      	ldr	r0, [r7, #4]
 8005e30:	f001 fc09 	bl	8007646 <USBD_LL_StallEP>
 8005e34:	4603      	mov	r3, r0
 8005e36:	73fb      	strb	r3, [r7, #15]
      break;
 8005e38:	bf00      	nop
  }

  return ret;
 8005e3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e3c:	4618      	mov	r0, r3
 8005e3e:	3710      	adds	r7, #16
 8005e40:	46bd      	mov	sp, r7
 8005e42:	bd80      	pop	{r7, pc}

08005e44 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8005e44:	b580      	push	{r7, lr}
 8005e46:	b086      	sub	sp, #24
 8005e48:	af00      	add	r7, sp, #0
 8005e4a:	60f8      	str	r0, [r7, #12]
 8005e4c:	460b      	mov	r3, r1
 8005e4e:	607a      	str	r2, [r7, #4]
 8005e50:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8005e52:	7afb      	ldrb	r3, [r7, #11]
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d138      	bne.n	8005eca <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8005e5e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8005e66:	2b03      	cmp	r3, #3
 8005e68:	d14a      	bne.n	8005f00 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8005e6a:	693b      	ldr	r3, [r7, #16]
 8005e6c:	689a      	ldr	r2, [r3, #8]
 8005e6e:	693b      	ldr	r3, [r7, #16]
 8005e70:	68db      	ldr	r3, [r3, #12]
 8005e72:	429a      	cmp	r2, r3
 8005e74:	d913      	bls.n	8005e9e <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8005e76:	693b      	ldr	r3, [r7, #16]
 8005e78:	689a      	ldr	r2, [r3, #8]
 8005e7a:	693b      	ldr	r3, [r7, #16]
 8005e7c:	68db      	ldr	r3, [r3, #12]
 8005e7e:	1ad2      	subs	r2, r2, r3
 8005e80:	693b      	ldr	r3, [r7, #16]
 8005e82:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8005e84:	693b      	ldr	r3, [r7, #16]
 8005e86:	68da      	ldr	r2, [r3, #12]
 8005e88:	693b      	ldr	r3, [r7, #16]
 8005e8a:	689b      	ldr	r3, [r3, #8]
 8005e8c:	4293      	cmp	r3, r2
 8005e8e:	bf28      	it	cs
 8005e90:	4613      	movcs	r3, r2
 8005e92:	461a      	mov	r2, r3
 8005e94:	6879      	ldr	r1, [r7, #4]
 8005e96:	68f8      	ldr	r0, [r7, #12]
 8005e98:	f000 fff3 	bl	8006e82 <USBD_CtlContinueRx>
 8005e9c:	e030      	b.n	8005f00 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005ea4:	b2db      	uxtb	r3, r3
 8005ea6:	2b03      	cmp	r3, #3
 8005ea8:	d10b      	bne.n	8005ec2 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005eb0:	691b      	ldr	r3, [r3, #16]
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d005      	beq.n	8005ec2 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005ebc:	691b      	ldr	r3, [r3, #16]
 8005ebe:	68f8      	ldr	r0, [r7, #12]
 8005ec0:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8005ec2:	68f8      	ldr	r0, [r7, #12]
 8005ec4:	f000 ffee 	bl	8006ea4 <USBD_CtlSendStatus>
 8005ec8:	e01a      	b.n	8005f00 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005ed0:	b2db      	uxtb	r3, r3
 8005ed2:	2b03      	cmp	r3, #3
 8005ed4:	d114      	bne.n	8005f00 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005edc:	699b      	ldr	r3, [r3, #24]
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d00e      	beq.n	8005f00 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005ee8:	699b      	ldr	r3, [r3, #24]
 8005eea:	7afa      	ldrb	r2, [r7, #11]
 8005eec:	4611      	mov	r1, r2
 8005eee:	68f8      	ldr	r0, [r7, #12]
 8005ef0:	4798      	blx	r3
 8005ef2:	4603      	mov	r3, r0
 8005ef4:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8005ef6:	7dfb      	ldrb	r3, [r7, #23]
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d001      	beq.n	8005f00 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 8005efc:	7dfb      	ldrb	r3, [r7, #23]
 8005efe:	e000      	b.n	8005f02 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 8005f00:	2300      	movs	r3, #0
}
 8005f02:	4618      	mov	r0, r3
 8005f04:	3718      	adds	r7, #24
 8005f06:	46bd      	mov	sp, r7
 8005f08:	bd80      	pop	{r7, pc}

08005f0a <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8005f0a:	b580      	push	{r7, lr}
 8005f0c:	b086      	sub	sp, #24
 8005f0e:	af00      	add	r7, sp, #0
 8005f10:	60f8      	str	r0, [r7, #12]
 8005f12:	460b      	mov	r3, r1
 8005f14:	607a      	str	r2, [r7, #4]
 8005f16:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8005f18:	7afb      	ldrb	r3, [r7, #11]
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d16b      	bne.n	8005ff6 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	3314      	adds	r3, #20
 8005f22:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8005f2a:	2b02      	cmp	r3, #2
 8005f2c:	d156      	bne.n	8005fdc <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 8005f2e:	693b      	ldr	r3, [r7, #16]
 8005f30:	689a      	ldr	r2, [r3, #8]
 8005f32:	693b      	ldr	r3, [r7, #16]
 8005f34:	68db      	ldr	r3, [r3, #12]
 8005f36:	429a      	cmp	r2, r3
 8005f38:	d914      	bls.n	8005f64 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8005f3a:	693b      	ldr	r3, [r7, #16]
 8005f3c:	689a      	ldr	r2, [r3, #8]
 8005f3e:	693b      	ldr	r3, [r7, #16]
 8005f40:	68db      	ldr	r3, [r3, #12]
 8005f42:	1ad2      	subs	r2, r2, r3
 8005f44:	693b      	ldr	r3, [r7, #16]
 8005f46:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8005f48:	693b      	ldr	r3, [r7, #16]
 8005f4a:	689b      	ldr	r3, [r3, #8]
 8005f4c:	461a      	mov	r2, r3
 8005f4e:	6879      	ldr	r1, [r7, #4]
 8005f50:	68f8      	ldr	r0, [r7, #12]
 8005f52:	f000 ff85 	bl	8006e60 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005f56:	2300      	movs	r3, #0
 8005f58:	2200      	movs	r2, #0
 8005f5a:	2100      	movs	r1, #0
 8005f5c:	68f8      	ldr	r0, [r7, #12]
 8005f5e:	f001 fc1c 	bl	800779a <USBD_LL_PrepareReceive>
 8005f62:	e03b      	b.n	8005fdc <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8005f64:	693b      	ldr	r3, [r7, #16]
 8005f66:	68da      	ldr	r2, [r3, #12]
 8005f68:	693b      	ldr	r3, [r7, #16]
 8005f6a:	689b      	ldr	r3, [r3, #8]
 8005f6c:	429a      	cmp	r2, r3
 8005f6e:	d11c      	bne.n	8005faa <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8005f70:	693b      	ldr	r3, [r7, #16]
 8005f72:	685a      	ldr	r2, [r3, #4]
 8005f74:	693b      	ldr	r3, [r7, #16]
 8005f76:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8005f78:	429a      	cmp	r2, r3
 8005f7a:	d316      	bcc.n	8005faa <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8005f7c:	693b      	ldr	r3, [r7, #16]
 8005f7e:	685a      	ldr	r2, [r3, #4]
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8005f86:	429a      	cmp	r2, r3
 8005f88:	d20f      	bcs.n	8005faa <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8005f8a:	2200      	movs	r2, #0
 8005f8c:	2100      	movs	r1, #0
 8005f8e:	68f8      	ldr	r0, [r7, #12]
 8005f90:	f000 ff66 	bl	8006e60 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	2200      	movs	r2, #0
 8005f98:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005f9c:	2300      	movs	r3, #0
 8005f9e:	2200      	movs	r2, #0
 8005fa0:	2100      	movs	r1, #0
 8005fa2:	68f8      	ldr	r0, [r7, #12]
 8005fa4:	f001 fbf9 	bl	800779a <USBD_LL_PrepareReceive>
 8005fa8:	e018      	b.n	8005fdc <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005fb0:	b2db      	uxtb	r3, r3
 8005fb2:	2b03      	cmp	r3, #3
 8005fb4:	d10b      	bne.n	8005fce <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005fbc:	68db      	ldr	r3, [r3, #12]
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d005      	beq.n	8005fce <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005fc8:	68db      	ldr	r3, [r3, #12]
 8005fca:	68f8      	ldr	r0, [r7, #12]
 8005fcc:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8005fce:	2180      	movs	r1, #128	@ 0x80
 8005fd0:	68f8      	ldr	r0, [r7, #12]
 8005fd2:	f001 fb38 	bl	8007646 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8005fd6:	68f8      	ldr	r0, [r7, #12]
 8005fd8:	f000 ff77 	bl	8006eca <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8005fe2:	2b01      	cmp	r3, #1
 8005fe4:	d122      	bne.n	800602c <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8005fe6:	68f8      	ldr	r0, [r7, #12]
 8005fe8:	f7ff fe98 	bl	8005d1c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	2200      	movs	r2, #0
 8005ff0:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8005ff4:	e01a      	b.n	800602c <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005ffc:	b2db      	uxtb	r3, r3
 8005ffe:	2b03      	cmp	r3, #3
 8006000:	d114      	bne.n	800602c <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006008:	695b      	ldr	r3, [r3, #20]
 800600a:	2b00      	cmp	r3, #0
 800600c:	d00e      	beq.n	800602c <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006014:	695b      	ldr	r3, [r3, #20]
 8006016:	7afa      	ldrb	r2, [r7, #11]
 8006018:	4611      	mov	r1, r2
 800601a:	68f8      	ldr	r0, [r7, #12]
 800601c:	4798      	blx	r3
 800601e:	4603      	mov	r3, r0
 8006020:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8006022:	7dfb      	ldrb	r3, [r7, #23]
 8006024:	2b00      	cmp	r3, #0
 8006026:	d001      	beq.n	800602c <USBD_LL_DataInStage+0x122>
        {
          return ret;
 8006028:	7dfb      	ldrb	r3, [r7, #23]
 800602a:	e000      	b.n	800602e <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 800602c:	2300      	movs	r3, #0
}
 800602e:	4618      	mov	r0, r3
 8006030:	3718      	adds	r7, #24
 8006032:	46bd      	mov	sp, r7
 8006034:	bd80      	pop	{r7, pc}

08006036 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8006036:	b580      	push	{r7, lr}
 8006038:	b082      	sub	sp, #8
 800603a:	af00      	add	r7, sp, #0
 800603c:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	2201      	movs	r2, #1
 8006042:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	2200      	movs	r2, #0
 800604a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	2200      	movs	r2, #0
 8006052:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	2200      	movs	r2, #0
 8006058:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4

  if (pdev->pClass == NULL)
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006062:	2b00      	cmp	r3, #0
 8006064:	d101      	bne.n	800606a <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 8006066:	2303      	movs	r3, #3
 8006068:	e02f      	b.n	80060ca <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8006070:	2b00      	cmp	r3, #0
 8006072:	d00f      	beq.n	8006094 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800607a:	685b      	ldr	r3, [r3, #4]
 800607c:	2b00      	cmp	r3, #0
 800607e:	d009      	beq.n	8006094 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006086:	685b      	ldr	r3, [r3, #4]
 8006088:	687a      	ldr	r2, [r7, #4]
 800608a:	6852      	ldr	r2, [r2, #4]
 800608c:	b2d2      	uxtb	r2, r2
 800608e:	4611      	mov	r1, r2
 8006090:	6878      	ldr	r0, [r7, #4]
 8006092:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006094:	2340      	movs	r3, #64	@ 0x40
 8006096:	2200      	movs	r2, #0
 8006098:	2100      	movs	r1, #0
 800609a:	6878      	ldr	r0, [r7, #4]
 800609c:	f001 fa6f 	bl	800757e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	2201      	movs	r2, #1
 80060a4:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	2240      	movs	r2, #64	@ 0x40
 80060ac:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80060b0:	2340      	movs	r3, #64	@ 0x40
 80060b2:	2200      	movs	r2, #0
 80060b4:	2180      	movs	r1, #128	@ 0x80
 80060b6:	6878      	ldr	r0, [r7, #4]
 80060b8:	f001 fa61 	bl	800757e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	2201      	movs	r2, #1
 80060c0:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	2240      	movs	r2, #64	@ 0x40
 80060c6:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 80060c8:	2300      	movs	r3, #0
}
 80060ca:	4618      	mov	r0, r3
 80060cc:	3708      	adds	r7, #8
 80060ce:	46bd      	mov	sp, r7
 80060d0:	bd80      	pop	{r7, pc}

080060d2 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80060d2:	b480      	push	{r7}
 80060d4:	b083      	sub	sp, #12
 80060d6:	af00      	add	r7, sp, #0
 80060d8:	6078      	str	r0, [r7, #4]
 80060da:	460b      	mov	r3, r1
 80060dc:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	78fa      	ldrb	r2, [r7, #3]
 80060e2:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80060e4:	2300      	movs	r3, #0
}
 80060e6:	4618      	mov	r0, r3
 80060e8:	370c      	adds	r7, #12
 80060ea:	46bd      	mov	sp, r7
 80060ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f0:	4770      	bx	lr

080060f2 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80060f2:	b480      	push	{r7}
 80060f4:	b083      	sub	sp, #12
 80060f6:	af00      	add	r7, sp, #0
 80060f8:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006100:	b2da      	uxtb	r2, r3
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	2204      	movs	r2, #4
 800610c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8006110:	2300      	movs	r3, #0
}
 8006112:	4618      	mov	r0, r3
 8006114:	370c      	adds	r7, #12
 8006116:	46bd      	mov	sp, r7
 8006118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800611c:	4770      	bx	lr

0800611e <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800611e:	b480      	push	{r7}
 8006120:	b083      	sub	sp, #12
 8006122:	af00      	add	r7, sp, #0
 8006124:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800612c:	b2db      	uxtb	r3, r3
 800612e:	2b04      	cmp	r3, #4
 8006130:	d106      	bne.n	8006140 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8006138:	b2da      	uxtb	r2, r3
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8006140:	2300      	movs	r3, #0
}
 8006142:	4618      	mov	r0, r3
 8006144:	370c      	adds	r7, #12
 8006146:	46bd      	mov	sp, r7
 8006148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800614c:	4770      	bx	lr

0800614e <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800614e:	b580      	push	{r7, lr}
 8006150:	b082      	sub	sp, #8
 8006152:	af00      	add	r7, sp, #0
 8006154:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800615c:	2b00      	cmp	r3, #0
 800615e:	d101      	bne.n	8006164 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 8006160:	2303      	movs	r3, #3
 8006162:	e012      	b.n	800618a <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800616a:	b2db      	uxtb	r3, r3
 800616c:	2b03      	cmp	r3, #3
 800616e:	d10b      	bne.n	8006188 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006176:	69db      	ldr	r3, [r3, #28]
 8006178:	2b00      	cmp	r3, #0
 800617a:	d005      	beq.n	8006188 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006182:	69db      	ldr	r3, [r3, #28]
 8006184:	6878      	ldr	r0, [r7, #4]
 8006186:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006188:	2300      	movs	r3, #0
}
 800618a:	4618      	mov	r0, r3
 800618c:	3708      	adds	r7, #8
 800618e:	46bd      	mov	sp, r7
 8006190:	bd80      	pop	{r7, pc}

08006192 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8006192:	b580      	push	{r7, lr}
 8006194:	b082      	sub	sp, #8
 8006196:	af00      	add	r7, sp, #0
 8006198:	6078      	str	r0, [r7, #4]
 800619a:	460b      	mov	r3, r1
 800619c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d101      	bne.n	80061ac <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 80061a8:	2303      	movs	r3, #3
 80061aa:	e014      	b.n	80061d6 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80061b2:	b2db      	uxtb	r3, r3
 80061b4:	2b03      	cmp	r3, #3
 80061b6:	d10d      	bne.n	80061d4 <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80061be:	6a1b      	ldr	r3, [r3, #32]
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d007      	beq.n	80061d4 <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80061ca:	6a1b      	ldr	r3, [r3, #32]
 80061cc:	78fa      	ldrb	r2, [r7, #3]
 80061ce:	4611      	mov	r1, r2
 80061d0:	6878      	ldr	r0, [r7, #4]
 80061d2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80061d4:	2300      	movs	r3, #0
}
 80061d6:	4618      	mov	r0, r3
 80061d8:	3708      	adds	r7, #8
 80061da:	46bd      	mov	sp, r7
 80061dc:	bd80      	pop	{r7, pc}

080061de <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80061de:	b580      	push	{r7, lr}
 80061e0:	b082      	sub	sp, #8
 80061e2:	af00      	add	r7, sp, #0
 80061e4:	6078      	str	r0, [r7, #4]
 80061e6:	460b      	mov	r3, r1
 80061e8:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d101      	bne.n	80061f8 <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 80061f4:	2303      	movs	r3, #3
 80061f6:	e014      	b.n	8006222 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80061fe:	b2db      	uxtb	r3, r3
 8006200:	2b03      	cmp	r3, #3
 8006202:	d10d      	bne.n	8006220 <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800620a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800620c:	2b00      	cmp	r3, #0
 800620e:	d007      	beq.n	8006220 <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006216:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006218:	78fa      	ldrb	r2, [r7, #3]
 800621a:	4611      	mov	r1, r2
 800621c:	6878      	ldr	r0, [r7, #4]
 800621e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006220:	2300      	movs	r3, #0
}
 8006222:	4618      	mov	r0, r3
 8006224:	3708      	adds	r7, #8
 8006226:	46bd      	mov	sp, r7
 8006228:	bd80      	pop	{r7, pc}

0800622a <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800622a:	b480      	push	{r7}
 800622c:	b083      	sub	sp, #12
 800622e:	af00      	add	r7, sp, #0
 8006230:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006232:	2300      	movs	r3, #0
}
 8006234:	4618      	mov	r0, r3
 8006236:	370c      	adds	r7, #12
 8006238:	46bd      	mov	sp, r7
 800623a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800623e:	4770      	bx	lr

08006240 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8006240:	b580      	push	{r7, lr}
 8006242:	b082      	sub	sp, #8
 8006244:	af00      	add	r7, sp, #0
 8006246:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	2201      	movs	r2, #1
 800624c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  if (pdev->pClass != NULL)
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006256:	2b00      	cmp	r3, #0
 8006258:	d009      	beq.n	800626e <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006260:	685b      	ldr	r3, [r3, #4]
 8006262:	687a      	ldr	r2, [r7, #4]
 8006264:	6852      	ldr	r2, [r2, #4]
 8006266:	b2d2      	uxtb	r2, r2
 8006268:	4611      	mov	r1, r2
 800626a:	6878      	ldr	r0, [r7, #4]
 800626c:	4798      	blx	r3
  }

  return USBD_OK;
 800626e:	2300      	movs	r3, #0
}
 8006270:	4618      	mov	r0, r3
 8006272:	3708      	adds	r7, #8
 8006274:	46bd      	mov	sp, r7
 8006276:	bd80      	pop	{r7, pc}

08006278 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8006278:	b480      	push	{r7}
 800627a:	b087      	sub	sp, #28
 800627c:	af00      	add	r7, sp, #0
 800627e:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8006284:	697b      	ldr	r3, [r7, #20]
 8006286:	781b      	ldrb	r3, [r3, #0]
 8006288:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800628a:	697b      	ldr	r3, [r7, #20]
 800628c:	3301      	adds	r3, #1
 800628e:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8006290:	697b      	ldr	r3, [r7, #20]
 8006292:	781b      	ldrb	r3, [r3, #0]
 8006294:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8006296:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800629a:	021b      	lsls	r3, r3, #8
 800629c:	b21a      	sxth	r2, r3
 800629e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80062a2:	4313      	orrs	r3, r2
 80062a4:	b21b      	sxth	r3, r3
 80062a6:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80062a8:	89fb      	ldrh	r3, [r7, #14]
}
 80062aa:	4618      	mov	r0, r3
 80062ac:	371c      	adds	r7, #28
 80062ae:	46bd      	mov	sp, r7
 80062b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062b4:	4770      	bx	lr
	...

080062b8 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80062b8:	b580      	push	{r7, lr}
 80062ba:	b084      	sub	sp, #16
 80062bc:	af00      	add	r7, sp, #0
 80062be:	6078      	str	r0, [r7, #4]
 80062c0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80062c2:	2300      	movs	r3, #0
 80062c4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80062c6:	683b      	ldr	r3, [r7, #0]
 80062c8:	781b      	ldrb	r3, [r3, #0]
 80062ca:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80062ce:	2b40      	cmp	r3, #64	@ 0x40
 80062d0:	d005      	beq.n	80062de <USBD_StdDevReq+0x26>
 80062d2:	2b40      	cmp	r3, #64	@ 0x40
 80062d4:	d853      	bhi.n	800637e <USBD_StdDevReq+0xc6>
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d00b      	beq.n	80062f2 <USBD_StdDevReq+0x3a>
 80062da:	2b20      	cmp	r3, #32
 80062dc:	d14f      	bne.n	800637e <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80062e4:	689b      	ldr	r3, [r3, #8]
 80062e6:	6839      	ldr	r1, [r7, #0]
 80062e8:	6878      	ldr	r0, [r7, #4]
 80062ea:	4798      	blx	r3
 80062ec:	4603      	mov	r3, r0
 80062ee:	73fb      	strb	r3, [r7, #15]
      break;
 80062f0:	e04a      	b.n	8006388 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80062f2:	683b      	ldr	r3, [r7, #0]
 80062f4:	785b      	ldrb	r3, [r3, #1]
 80062f6:	2b09      	cmp	r3, #9
 80062f8:	d83b      	bhi.n	8006372 <USBD_StdDevReq+0xba>
 80062fa:	a201      	add	r2, pc, #4	@ (adr r2, 8006300 <USBD_StdDevReq+0x48>)
 80062fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006300:	08006355 	.word	0x08006355
 8006304:	08006369 	.word	0x08006369
 8006308:	08006373 	.word	0x08006373
 800630c:	0800635f 	.word	0x0800635f
 8006310:	08006373 	.word	0x08006373
 8006314:	08006333 	.word	0x08006333
 8006318:	08006329 	.word	0x08006329
 800631c:	08006373 	.word	0x08006373
 8006320:	0800634b 	.word	0x0800634b
 8006324:	0800633d 	.word	0x0800633d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8006328:	6839      	ldr	r1, [r7, #0]
 800632a:	6878      	ldr	r0, [r7, #4]
 800632c:	f000 f9de 	bl	80066ec <USBD_GetDescriptor>
          break;
 8006330:	e024      	b.n	800637c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8006332:	6839      	ldr	r1, [r7, #0]
 8006334:	6878      	ldr	r0, [r7, #4]
 8006336:	f000 fb43 	bl	80069c0 <USBD_SetAddress>
          break;
 800633a:	e01f      	b.n	800637c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800633c:	6839      	ldr	r1, [r7, #0]
 800633e:	6878      	ldr	r0, [r7, #4]
 8006340:	f000 fb82 	bl	8006a48 <USBD_SetConfig>
 8006344:	4603      	mov	r3, r0
 8006346:	73fb      	strb	r3, [r7, #15]
          break;
 8006348:	e018      	b.n	800637c <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800634a:	6839      	ldr	r1, [r7, #0]
 800634c:	6878      	ldr	r0, [r7, #4]
 800634e:	f000 fc21 	bl	8006b94 <USBD_GetConfig>
          break;
 8006352:	e013      	b.n	800637c <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8006354:	6839      	ldr	r1, [r7, #0]
 8006356:	6878      	ldr	r0, [r7, #4]
 8006358:	f000 fc52 	bl	8006c00 <USBD_GetStatus>
          break;
 800635c:	e00e      	b.n	800637c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800635e:	6839      	ldr	r1, [r7, #0]
 8006360:	6878      	ldr	r0, [r7, #4]
 8006362:	f000 fc81 	bl	8006c68 <USBD_SetFeature>
          break;
 8006366:	e009      	b.n	800637c <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8006368:	6839      	ldr	r1, [r7, #0]
 800636a:	6878      	ldr	r0, [r7, #4]
 800636c:	f000 fc90 	bl	8006c90 <USBD_ClrFeature>
          break;
 8006370:	e004      	b.n	800637c <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 8006372:	6839      	ldr	r1, [r7, #0]
 8006374:	6878      	ldr	r0, [r7, #4]
 8006376:	f000 fce7 	bl	8006d48 <USBD_CtlError>
          break;
 800637a:	bf00      	nop
      }
      break;
 800637c:	e004      	b.n	8006388 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800637e:	6839      	ldr	r1, [r7, #0]
 8006380:	6878      	ldr	r0, [r7, #4]
 8006382:	f000 fce1 	bl	8006d48 <USBD_CtlError>
      break;
 8006386:	bf00      	nop
  }

  return ret;
 8006388:	7bfb      	ldrb	r3, [r7, #15]
}
 800638a:	4618      	mov	r0, r3
 800638c:	3710      	adds	r7, #16
 800638e:	46bd      	mov	sp, r7
 8006390:	bd80      	pop	{r7, pc}
 8006392:	bf00      	nop

08006394 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006394:	b580      	push	{r7, lr}
 8006396:	b084      	sub	sp, #16
 8006398:	af00      	add	r7, sp, #0
 800639a:	6078      	str	r0, [r7, #4]
 800639c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800639e:	2300      	movs	r3, #0
 80063a0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80063a2:	683b      	ldr	r3, [r7, #0]
 80063a4:	781b      	ldrb	r3, [r3, #0]
 80063a6:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80063aa:	2b40      	cmp	r3, #64	@ 0x40
 80063ac:	d005      	beq.n	80063ba <USBD_StdItfReq+0x26>
 80063ae:	2b40      	cmp	r3, #64	@ 0x40
 80063b0:	d82f      	bhi.n	8006412 <USBD_StdItfReq+0x7e>
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d001      	beq.n	80063ba <USBD_StdItfReq+0x26>
 80063b6:	2b20      	cmp	r3, #32
 80063b8:	d12b      	bne.n	8006412 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80063c0:	b2db      	uxtb	r3, r3
 80063c2:	3b01      	subs	r3, #1
 80063c4:	2b02      	cmp	r3, #2
 80063c6:	d81d      	bhi.n	8006404 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80063c8:	683b      	ldr	r3, [r7, #0]
 80063ca:	889b      	ldrh	r3, [r3, #4]
 80063cc:	b2db      	uxtb	r3, r3
 80063ce:	2b01      	cmp	r3, #1
 80063d0:	d813      	bhi.n	80063fa <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80063d8:	689b      	ldr	r3, [r3, #8]
 80063da:	6839      	ldr	r1, [r7, #0]
 80063dc:	6878      	ldr	r0, [r7, #4]
 80063de:	4798      	blx	r3
 80063e0:	4603      	mov	r3, r0
 80063e2:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80063e4:	683b      	ldr	r3, [r7, #0]
 80063e6:	88db      	ldrh	r3, [r3, #6]
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d110      	bne.n	800640e <USBD_StdItfReq+0x7a>
 80063ec:	7bfb      	ldrb	r3, [r7, #15]
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d10d      	bne.n	800640e <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 80063f2:	6878      	ldr	r0, [r7, #4]
 80063f4:	f000 fd56 	bl	8006ea4 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80063f8:	e009      	b.n	800640e <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 80063fa:	6839      	ldr	r1, [r7, #0]
 80063fc:	6878      	ldr	r0, [r7, #4]
 80063fe:	f000 fca3 	bl	8006d48 <USBD_CtlError>
          break;
 8006402:	e004      	b.n	800640e <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 8006404:	6839      	ldr	r1, [r7, #0]
 8006406:	6878      	ldr	r0, [r7, #4]
 8006408:	f000 fc9e 	bl	8006d48 <USBD_CtlError>
          break;
 800640c:	e000      	b.n	8006410 <USBD_StdItfReq+0x7c>
          break;
 800640e:	bf00      	nop
      }
      break;
 8006410:	e004      	b.n	800641c <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 8006412:	6839      	ldr	r1, [r7, #0]
 8006414:	6878      	ldr	r0, [r7, #4]
 8006416:	f000 fc97 	bl	8006d48 <USBD_CtlError>
      break;
 800641a:	bf00      	nop
  }

  return ret;
 800641c:	7bfb      	ldrb	r3, [r7, #15]
}
 800641e:	4618      	mov	r0, r3
 8006420:	3710      	adds	r7, #16
 8006422:	46bd      	mov	sp, r7
 8006424:	bd80      	pop	{r7, pc}

08006426 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006426:	b580      	push	{r7, lr}
 8006428:	b084      	sub	sp, #16
 800642a:	af00      	add	r7, sp, #0
 800642c:	6078      	str	r0, [r7, #4]
 800642e:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8006430:	2300      	movs	r3, #0
 8006432:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8006434:	683b      	ldr	r3, [r7, #0]
 8006436:	889b      	ldrh	r3, [r3, #4]
 8006438:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800643a:	683b      	ldr	r3, [r7, #0]
 800643c:	781b      	ldrb	r3, [r3, #0]
 800643e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8006442:	2b40      	cmp	r3, #64	@ 0x40
 8006444:	d007      	beq.n	8006456 <USBD_StdEPReq+0x30>
 8006446:	2b40      	cmp	r3, #64	@ 0x40
 8006448:	f200 8145 	bhi.w	80066d6 <USBD_StdEPReq+0x2b0>
 800644c:	2b00      	cmp	r3, #0
 800644e:	d00c      	beq.n	800646a <USBD_StdEPReq+0x44>
 8006450:	2b20      	cmp	r3, #32
 8006452:	f040 8140 	bne.w	80066d6 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800645c:	689b      	ldr	r3, [r3, #8]
 800645e:	6839      	ldr	r1, [r7, #0]
 8006460:	6878      	ldr	r0, [r7, #4]
 8006462:	4798      	blx	r3
 8006464:	4603      	mov	r3, r0
 8006466:	73fb      	strb	r3, [r7, #15]
      break;
 8006468:	e13a      	b.n	80066e0 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800646a:	683b      	ldr	r3, [r7, #0]
 800646c:	785b      	ldrb	r3, [r3, #1]
 800646e:	2b03      	cmp	r3, #3
 8006470:	d007      	beq.n	8006482 <USBD_StdEPReq+0x5c>
 8006472:	2b03      	cmp	r3, #3
 8006474:	f300 8129 	bgt.w	80066ca <USBD_StdEPReq+0x2a4>
 8006478:	2b00      	cmp	r3, #0
 800647a:	d07f      	beq.n	800657c <USBD_StdEPReq+0x156>
 800647c:	2b01      	cmp	r3, #1
 800647e:	d03c      	beq.n	80064fa <USBD_StdEPReq+0xd4>
 8006480:	e123      	b.n	80066ca <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006488:	b2db      	uxtb	r3, r3
 800648a:	2b02      	cmp	r3, #2
 800648c:	d002      	beq.n	8006494 <USBD_StdEPReq+0x6e>
 800648e:	2b03      	cmp	r3, #3
 8006490:	d016      	beq.n	80064c0 <USBD_StdEPReq+0x9a>
 8006492:	e02c      	b.n	80064ee <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006494:	7bbb      	ldrb	r3, [r7, #14]
 8006496:	2b00      	cmp	r3, #0
 8006498:	d00d      	beq.n	80064b6 <USBD_StdEPReq+0x90>
 800649a:	7bbb      	ldrb	r3, [r7, #14]
 800649c:	2b80      	cmp	r3, #128	@ 0x80
 800649e:	d00a      	beq.n	80064b6 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80064a0:	7bbb      	ldrb	r3, [r7, #14]
 80064a2:	4619      	mov	r1, r3
 80064a4:	6878      	ldr	r0, [r7, #4]
 80064a6:	f001 f8ce 	bl	8007646 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80064aa:	2180      	movs	r1, #128	@ 0x80
 80064ac:	6878      	ldr	r0, [r7, #4]
 80064ae:	f001 f8ca 	bl	8007646 <USBD_LL_StallEP>
 80064b2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80064b4:	e020      	b.n	80064f8 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 80064b6:	6839      	ldr	r1, [r7, #0]
 80064b8:	6878      	ldr	r0, [r7, #4]
 80064ba:	f000 fc45 	bl	8006d48 <USBD_CtlError>
              break;
 80064be:	e01b      	b.n	80064f8 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80064c0:	683b      	ldr	r3, [r7, #0]
 80064c2:	885b      	ldrh	r3, [r3, #2]
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d10e      	bne.n	80064e6 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80064c8:	7bbb      	ldrb	r3, [r7, #14]
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d00b      	beq.n	80064e6 <USBD_StdEPReq+0xc0>
 80064ce:	7bbb      	ldrb	r3, [r7, #14]
 80064d0:	2b80      	cmp	r3, #128	@ 0x80
 80064d2:	d008      	beq.n	80064e6 <USBD_StdEPReq+0xc0>
 80064d4:	683b      	ldr	r3, [r7, #0]
 80064d6:	88db      	ldrh	r3, [r3, #6]
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d104      	bne.n	80064e6 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80064dc:	7bbb      	ldrb	r3, [r7, #14]
 80064de:	4619      	mov	r1, r3
 80064e0:	6878      	ldr	r0, [r7, #4]
 80064e2:	f001 f8b0 	bl	8007646 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80064e6:	6878      	ldr	r0, [r7, #4]
 80064e8:	f000 fcdc 	bl	8006ea4 <USBD_CtlSendStatus>

              break;
 80064ec:	e004      	b.n	80064f8 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 80064ee:	6839      	ldr	r1, [r7, #0]
 80064f0:	6878      	ldr	r0, [r7, #4]
 80064f2:	f000 fc29 	bl	8006d48 <USBD_CtlError>
              break;
 80064f6:	bf00      	nop
          }
          break;
 80064f8:	e0ec      	b.n	80066d4 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006500:	b2db      	uxtb	r3, r3
 8006502:	2b02      	cmp	r3, #2
 8006504:	d002      	beq.n	800650c <USBD_StdEPReq+0xe6>
 8006506:	2b03      	cmp	r3, #3
 8006508:	d016      	beq.n	8006538 <USBD_StdEPReq+0x112>
 800650a:	e030      	b.n	800656e <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800650c:	7bbb      	ldrb	r3, [r7, #14]
 800650e:	2b00      	cmp	r3, #0
 8006510:	d00d      	beq.n	800652e <USBD_StdEPReq+0x108>
 8006512:	7bbb      	ldrb	r3, [r7, #14]
 8006514:	2b80      	cmp	r3, #128	@ 0x80
 8006516:	d00a      	beq.n	800652e <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006518:	7bbb      	ldrb	r3, [r7, #14]
 800651a:	4619      	mov	r1, r3
 800651c:	6878      	ldr	r0, [r7, #4]
 800651e:	f001 f892 	bl	8007646 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8006522:	2180      	movs	r1, #128	@ 0x80
 8006524:	6878      	ldr	r0, [r7, #4]
 8006526:	f001 f88e 	bl	8007646 <USBD_LL_StallEP>
 800652a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800652c:	e025      	b.n	800657a <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 800652e:	6839      	ldr	r1, [r7, #0]
 8006530:	6878      	ldr	r0, [r7, #4]
 8006532:	f000 fc09 	bl	8006d48 <USBD_CtlError>
              break;
 8006536:	e020      	b.n	800657a <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006538:	683b      	ldr	r3, [r7, #0]
 800653a:	885b      	ldrh	r3, [r3, #2]
 800653c:	2b00      	cmp	r3, #0
 800653e:	d11b      	bne.n	8006578 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8006540:	7bbb      	ldrb	r3, [r7, #14]
 8006542:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006546:	2b00      	cmp	r3, #0
 8006548:	d004      	beq.n	8006554 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800654a:	7bbb      	ldrb	r3, [r7, #14]
 800654c:	4619      	mov	r1, r3
 800654e:	6878      	ldr	r0, [r7, #4]
 8006550:	f001 f898 	bl	8007684 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8006554:	6878      	ldr	r0, [r7, #4]
 8006556:	f000 fca5 	bl	8006ea4 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006560:	689b      	ldr	r3, [r3, #8]
 8006562:	6839      	ldr	r1, [r7, #0]
 8006564:	6878      	ldr	r0, [r7, #4]
 8006566:	4798      	blx	r3
 8006568:	4603      	mov	r3, r0
 800656a:	73fb      	strb	r3, [r7, #15]
              }
              break;
 800656c:	e004      	b.n	8006578 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 800656e:	6839      	ldr	r1, [r7, #0]
 8006570:	6878      	ldr	r0, [r7, #4]
 8006572:	f000 fbe9 	bl	8006d48 <USBD_CtlError>
              break;
 8006576:	e000      	b.n	800657a <USBD_StdEPReq+0x154>
              break;
 8006578:	bf00      	nop
          }
          break;
 800657a:	e0ab      	b.n	80066d4 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006582:	b2db      	uxtb	r3, r3
 8006584:	2b02      	cmp	r3, #2
 8006586:	d002      	beq.n	800658e <USBD_StdEPReq+0x168>
 8006588:	2b03      	cmp	r3, #3
 800658a:	d032      	beq.n	80065f2 <USBD_StdEPReq+0x1cc>
 800658c:	e097      	b.n	80066be <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800658e:	7bbb      	ldrb	r3, [r7, #14]
 8006590:	2b00      	cmp	r3, #0
 8006592:	d007      	beq.n	80065a4 <USBD_StdEPReq+0x17e>
 8006594:	7bbb      	ldrb	r3, [r7, #14]
 8006596:	2b80      	cmp	r3, #128	@ 0x80
 8006598:	d004      	beq.n	80065a4 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 800659a:	6839      	ldr	r1, [r7, #0]
 800659c:	6878      	ldr	r0, [r7, #4]
 800659e:	f000 fbd3 	bl	8006d48 <USBD_CtlError>
                break;
 80065a2:	e091      	b.n	80066c8 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80065a4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	da0b      	bge.n	80065c4 <USBD_StdEPReq+0x19e>
 80065ac:	7bbb      	ldrb	r3, [r7, #14]
 80065ae:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80065b2:	4613      	mov	r3, r2
 80065b4:	009b      	lsls	r3, r3, #2
 80065b6:	4413      	add	r3, r2
 80065b8:	009b      	lsls	r3, r3, #2
 80065ba:	3310      	adds	r3, #16
 80065bc:	687a      	ldr	r2, [r7, #4]
 80065be:	4413      	add	r3, r2
 80065c0:	3304      	adds	r3, #4
 80065c2:	e00b      	b.n	80065dc <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80065c4:	7bbb      	ldrb	r3, [r7, #14]
 80065c6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80065ca:	4613      	mov	r3, r2
 80065cc:	009b      	lsls	r3, r3, #2
 80065ce:	4413      	add	r3, r2
 80065d0:	009b      	lsls	r3, r3, #2
 80065d2:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80065d6:	687a      	ldr	r2, [r7, #4]
 80065d8:	4413      	add	r3, r2
 80065da:	3304      	adds	r3, #4
 80065dc:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80065de:	68bb      	ldr	r3, [r7, #8]
 80065e0:	2200      	movs	r2, #0
 80065e2:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80065e4:	68bb      	ldr	r3, [r7, #8]
 80065e6:	2202      	movs	r2, #2
 80065e8:	4619      	mov	r1, r3
 80065ea:	6878      	ldr	r0, [r7, #4]
 80065ec:	f000 fc1d 	bl	8006e2a <USBD_CtlSendData>
              break;
 80065f0:	e06a      	b.n	80066c8 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80065f2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	da11      	bge.n	800661e <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80065fa:	7bbb      	ldrb	r3, [r7, #14]
 80065fc:	f003 020f 	and.w	r2, r3, #15
 8006600:	6879      	ldr	r1, [r7, #4]
 8006602:	4613      	mov	r3, r2
 8006604:	009b      	lsls	r3, r3, #2
 8006606:	4413      	add	r3, r2
 8006608:	009b      	lsls	r3, r3, #2
 800660a:	440b      	add	r3, r1
 800660c:	3324      	adds	r3, #36	@ 0x24
 800660e:	881b      	ldrh	r3, [r3, #0]
 8006610:	2b00      	cmp	r3, #0
 8006612:	d117      	bne.n	8006644 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8006614:	6839      	ldr	r1, [r7, #0]
 8006616:	6878      	ldr	r0, [r7, #4]
 8006618:	f000 fb96 	bl	8006d48 <USBD_CtlError>
                  break;
 800661c:	e054      	b.n	80066c8 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800661e:	7bbb      	ldrb	r3, [r7, #14]
 8006620:	f003 020f 	and.w	r2, r3, #15
 8006624:	6879      	ldr	r1, [r7, #4]
 8006626:	4613      	mov	r3, r2
 8006628:	009b      	lsls	r3, r3, #2
 800662a:	4413      	add	r3, r2
 800662c:	009b      	lsls	r3, r3, #2
 800662e:	440b      	add	r3, r1
 8006630:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8006634:	881b      	ldrh	r3, [r3, #0]
 8006636:	2b00      	cmp	r3, #0
 8006638:	d104      	bne.n	8006644 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800663a:	6839      	ldr	r1, [r7, #0]
 800663c:	6878      	ldr	r0, [r7, #4]
 800663e:	f000 fb83 	bl	8006d48 <USBD_CtlError>
                  break;
 8006642:	e041      	b.n	80066c8 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006644:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006648:	2b00      	cmp	r3, #0
 800664a:	da0b      	bge.n	8006664 <USBD_StdEPReq+0x23e>
 800664c:	7bbb      	ldrb	r3, [r7, #14]
 800664e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006652:	4613      	mov	r3, r2
 8006654:	009b      	lsls	r3, r3, #2
 8006656:	4413      	add	r3, r2
 8006658:	009b      	lsls	r3, r3, #2
 800665a:	3310      	adds	r3, #16
 800665c:	687a      	ldr	r2, [r7, #4]
 800665e:	4413      	add	r3, r2
 8006660:	3304      	adds	r3, #4
 8006662:	e00b      	b.n	800667c <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006664:	7bbb      	ldrb	r3, [r7, #14]
 8006666:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800666a:	4613      	mov	r3, r2
 800666c:	009b      	lsls	r3, r3, #2
 800666e:	4413      	add	r3, r2
 8006670:	009b      	lsls	r3, r3, #2
 8006672:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8006676:	687a      	ldr	r2, [r7, #4]
 8006678:	4413      	add	r3, r2
 800667a:	3304      	adds	r3, #4
 800667c:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800667e:	7bbb      	ldrb	r3, [r7, #14]
 8006680:	2b00      	cmp	r3, #0
 8006682:	d002      	beq.n	800668a <USBD_StdEPReq+0x264>
 8006684:	7bbb      	ldrb	r3, [r7, #14]
 8006686:	2b80      	cmp	r3, #128	@ 0x80
 8006688:	d103      	bne.n	8006692 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 800668a:	68bb      	ldr	r3, [r7, #8]
 800668c:	2200      	movs	r2, #0
 800668e:	601a      	str	r2, [r3, #0]
 8006690:	e00e      	b.n	80066b0 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8006692:	7bbb      	ldrb	r3, [r7, #14]
 8006694:	4619      	mov	r1, r3
 8006696:	6878      	ldr	r0, [r7, #4]
 8006698:	f001 f813 	bl	80076c2 <USBD_LL_IsStallEP>
 800669c:	4603      	mov	r3, r0
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d003      	beq.n	80066aa <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 80066a2:	68bb      	ldr	r3, [r7, #8]
 80066a4:	2201      	movs	r2, #1
 80066a6:	601a      	str	r2, [r3, #0]
 80066a8:	e002      	b.n	80066b0 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 80066aa:	68bb      	ldr	r3, [r7, #8]
 80066ac:	2200      	movs	r2, #0
 80066ae:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80066b0:	68bb      	ldr	r3, [r7, #8]
 80066b2:	2202      	movs	r2, #2
 80066b4:	4619      	mov	r1, r3
 80066b6:	6878      	ldr	r0, [r7, #4]
 80066b8:	f000 fbb7 	bl	8006e2a <USBD_CtlSendData>
              break;
 80066bc:	e004      	b.n	80066c8 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 80066be:	6839      	ldr	r1, [r7, #0]
 80066c0:	6878      	ldr	r0, [r7, #4]
 80066c2:	f000 fb41 	bl	8006d48 <USBD_CtlError>
              break;
 80066c6:	bf00      	nop
          }
          break;
 80066c8:	e004      	b.n	80066d4 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 80066ca:	6839      	ldr	r1, [r7, #0]
 80066cc:	6878      	ldr	r0, [r7, #4]
 80066ce:	f000 fb3b 	bl	8006d48 <USBD_CtlError>
          break;
 80066d2:	bf00      	nop
      }
      break;
 80066d4:	e004      	b.n	80066e0 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 80066d6:	6839      	ldr	r1, [r7, #0]
 80066d8:	6878      	ldr	r0, [r7, #4]
 80066da:	f000 fb35 	bl	8006d48 <USBD_CtlError>
      break;
 80066de:	bf00      	nop
  }

  return ret;
 80066e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80066e2:	4618      	mov	r0, r3
 80066e4:	3710      	adds	r7, #16
 80066e6:	46bd      	mov	sp, r7
 80066e8:	bd80      	pop	{r7, pc}
	...

080066ec <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80066ec:	b580      	push	{r7, lr}
 80066ee:	b084      	sub	sp, #16
 80066f0:	af00      	add	r7, sp, #0
 80066f2:	6078      	str	r0, [r7, #4]
 80066f4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80066f6:	2300      	movs	r3, #0
 80066f8:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80066fa:	2300      	movs	r3, #0
 80066fc:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80066fe:	2300      	movs	r3, #0
 8006700:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8006702:	683b      	ldr	r3, [r7, #0]
 8006704:	885b      	ldrh	r3, [r3, #2]
 8006706:	0a1b      	lsrs	r3, r3, #8
 8006708:	b29b      	uxth	r3, r3
 800670a:	3b01      	subs	r3, #1
 800670c:	2b06      	cmp	r3, #6
 800670e:	f200 8128 	bhi.w	8006962 <USBD_GetDescriptor+0x276>
 8006712:	a201      	add	r2, pc, #4	@ (adr r2, 8006718 <USBD_GetDescriptor+0x2c>)
 8006714:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006718:	08006735 	.word	0x08006735
 800671c:	0800674d 	.word	0x0800674d
 8006720:	0800678d 	.word	0x0800678d
 8006724:	08006963 	.word	0x08006963
 8006728:	08006963 	.word	0x08006963
 800672c:	08006903 	.word	0x08006903
 8006730:	0800692f 	.word	0x0800692f
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	687a      	ldr	r2, [r7, #4]
 800673e:	7c12      	ldrb	r2, [r2, #16]
 8006740:	f107 0108 	add.w	r1, r7, #8
 8006744:	4610      	mov	r0, r2
 8006746:	4798      	blx	r3
 8006748:	60f8      	str	r0, [r7, #12]
      break;
 800674a:	e112      	b.n	8006972 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	7c1b      	ldrb	r3, [r3, #16]
 8006750:	2b00      	cmp	r3, #0
 8006752:	d10d      	bne.n	8006770 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800675a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800675c:	f107 0208 	add.w	r2, r7, #8
 8006760:	4610      	mov	r0, r2
 8006762:	4798      	blx	r3
 8006764:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	3301      	adds	r3, #1
 800676a:	2202      	movs	r2, #2
 800676c:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800676e:	e100      	b.n	8006972 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006776:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006778:	f107 0208 	add.w	r2, r7, #8
 800677c:	4610      	mov	r0, r2
 800677e:	4798      	blx	r3
 8006780:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	3301      	adds	r3, #1
 8006786:	2202      	movs	r2, #2
 8006788:	701a      	strb	r2, [r3, #0]
      break;
 800678a:	e0f2      	b.n	8006972 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800678c:	683b      	ldr	r3, [r7, #0]
 800678e:	885b      	ldrh	r3, [r3, #2]
 8006790:	b2db      	uxtb	r3, r3
 8006792:	2b05      	cmp	r3, #5
 8006794:	f200 80ac 	bhi.w	80068f0 <USBD_GetDescriptor+0x204>
 8006798:	a201      	add	r2, pc, #4	@ (adr r2, 80067a0 <USBD_GetDescriptor+0xb4>)
 800679a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800679e:	bf00      	nop
 80067a0:	080067b9 	.word	0x080067b9
 80067a4:	080067ed 	.word	0x080067ed
 80067a8:	08006821 	.word	0x08006821
 80067ac:	08006855 	.word	0x08006855
 80067b0:	08006889 	.word	0x08006889
 80067b4:	080068bd 	.word	0x080068bd
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80067be:	685b      	ldr	r3, [r3, #4]
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d00b      	beq.n	80067dc <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80067ca:	685b      	ldr	r3, [r3, #4]
 80067cc:	687a      	ldr	r2, [r7, #4]
 80067ce:	7c12      	ldrb	r2, [r2, #16]
 80067d0:	f107 0108 	add.w	r1, r7, #8
 80067d4:	4610      	mov	r0, r2
 80067d6:	4798      	blx	r3
 80067d8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80067da:	e091      	b.n	8006900 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80067dc:	6839      	ldr	r1, [r7, #0]
 80067de:	6878      	ldr	r0, [r7, #4]
 80067e0:	f000 fab2 	bl	8006d48 <USBD_CtlError>
            err++;
 80067e4:	7afb      	ldrb	r3, [r7, #11]
 80067e6:	3301      	adds	r3, #1
 80067e8:	72fb      	strb	r3, [r7, #11]
          break;
 80067ea:	e089      	b.n	8006900 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80067f2:	689b      	ldr	r3, [r3, #8]
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d00b      	beq.n	8006810 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80067fe:	689b      	ldr	r3, [r3, #8]
 8006800:	687a      	ldr	r2, [r7, #4]
 8006802:	7c12      	ldrb	r2, [r2, #16]
 8006804:	f107 0108 	add.w	r1, r7, #8
 8006808:	4610      	mov	r0, r2
 800680a:	4798      	blx	r3
 800680c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800680e:	e077      	b.n	8006900 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006810:	6839      	ldr	r1, [r7, #0]
 8006812:	6878      	ldr	r0, [r7, #4]
 8006814:	f000 fa98 	bl	8006d48 <USBD_CtlError>
            err++;
 8006818:	7afb      	ldrb	r3, [r7, #11]
 800681a:	3301      	adds	r3, #1
 800681c:	72fb      	strb	r3, [r7, #11]
          break;
 800681e:	e06f      	b.n	8006900 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006826:	68db      	ldr	r3, [r3, #12]
 8006828:	2b00      	cmp	r3, #0
 800682a:	d00b      	beq.n	8006844 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006832:	68db      	ldr	r3, [r3, #12]
 8006834:	687a      	ldr	r2, [r7, #4]
 8006836:	7c12      	ldrb	r2, [r2, #16]
 8006838:	f107 0108 	add.w	r1, r7, #8
 800683c:	4610      	mov	r0, r2
 800683e:	4798      	blx	r3
 8006840:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006842:	e05d      	b.n	8006900 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006844:	6839      	ldr	r1, [r7, #0]
 8006846:	6878      	ldr	r0, [r7, #4]
 8006848:	f000 fa7e 	bl	8006d48 <USBD_CtlError>
            err++;
 800684c:	7afb      	ldrb	r3, [r7, #11]
 800684e:	3301      	adds	r3, #1
 8006850:	72fb      	strb	r3, [r7, #11]
          break;
 8006852:	e055      	b.n	8006900 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800685a:	691b      	ldr	r3, [r3, #16]
 800685c:	2b00      	cmp	r3, #0
 800685e:	d00b      	beq.n	8006878 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006866:	691b      	ldr	r3, [r3, #16]
 8006868:	687a      	ldr	r2, [r7, #4]
 800686a:	7c12      	ldrb	r2, [r2, #16]
 800686c:	f107 0108 	add.w	r1, r7, #8
 8006870:	4610      	mov	r0, r2
 8006872:	4798      	blx	r3
 8006874:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006876:	e043      	b.n	8006900 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006878:	6839      	ldr	r1, [r7, #0]
 800687a:	6878      	ldr	r0, [r7, #4]
 800687c:	f000 fa64 	bl	8006d48 <USBD_CtlError>
            err++;
 8006880:	7afb      	ldrb	r3, [r7, #11]
 8006882:	3301      	adds	r3, #1
 8006884:	72fb      	strb	r3, [r7, #11]
          break;
 8006886:	e03b      	b.n	8006900 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800688e:	695b      	ldr	r3, [r3, #20]
 8006890:	2b00      	cmp	r3, #0
 8006892:	d00b      	beq.n	80068ac <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800689a:	695b      	ldr	r3, [r3, #20]
 800689c:	687a      	ldr	r2, [r7, #4]
 800689e:	7c12      	ldrb	r2, [r2, #16]
 80068a0:	f107 0108 	add.w	r1, r7, #8
 80068a4:	4610      	mov	r0, r2
 80068a6:	4798      	blx	r3
 80068a8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80068aa:	e029      	b.n	8006900 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80068ac:	6839      	ldr	r1, [r7, #0]
 80068ae:	6878      	ldr	r0, [r7, #4]
 80068b0:	f000 fa4a 	bl	8006d48 <USBD_CtlError>
            err++;
 80068b4:	7afb      	ldrb	r3, [r7, #11]
 80068b6:	3301      	adds	r3, #1
 80068b8:	72fb      	strb	r3, [r7, #11]
          break;
 80068ba:	e021      	b.n	8006900 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80068c2:	699b      	ldr	r3, [r3, #24]
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d00b      	beq.n	80068e0 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80068ce:	699b      	ldr	r3, [r3, #24]
 80068d0:	687a      	ldr	r2, [r7, #4]
 80068d2:	7c12      	ldrb	r2, [r2, #16]
 80068d4:	f107 0108 	add.w	r1, r7, #8
 80068d8:	4610      	mov	r0, r2
 80068da:	4798      	blx	r3
 80068dc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80068de:	e00f      	b.n	8006900 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80068e0:	6839      	ldr	r1, [r7, #0]
 80068e2:	6878      	ldr	r0, [r7, #4]
 80068e4:	f000 fa30 	bl	8006d48 <USBD_CtlError>
            err++;
 80068e8:	7afb      	ldrb	r3, [r7, #11]
 80068ea:	3301      	adds	r3, #1
 80068ec:	72fb      	strb	r3, [r7, #11]
          break;
 80068ee:	e007      	b.n	8006900 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 80068f0:	6839      	ldr	r1, [r7, #0]
 80068f2:	6878      	ldr	r0, [r7, #4]
 80068f4:	f000 fa28 	bl	8006d48 <USBD_CtlError>
          err++;
 80068f8:	7afb      	ldrb	r3, [r7, #11]
 80068fa:	3301      	adds	r3, #1
 80068fc:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 80068fe:	bf00      	nop
      }
      break;
 8006900:	e037      	b.n	8006972 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	7c1b      	ldrb	r3, [r3, #16]
 8006906:	2b00      	cmp	r3, #0
 8006908:	d109      	bne.n	800691e <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006910:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006912:	f107 0208 	add.w	r2, r7, #8
 8006916:	4610      	mov	r0, r2
 8006918:	4798      	blx	r3
 800691a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800691c:	e029      	b.n	8006972 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800691e:	6839      	ldr	r1, [r7, #0]
 8006920:	6878      	ldr	r0, [r7, #4]
 8006922:	f000 fa11 	bl	8006d48 <USBD_CtlError>
        err++;
 8006926:	7afb      	ldrb	r3, [r7, #11]
 8006928:	3301      	adds	r3, #1
 800692a:	72fb      	strb	r3, [r7, #11]
      break;
 800692c:	e021      	b.n	8006972 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	7c1b      	ldrb	r3, [r3, #16]
 8006932:	2b00      	cmp	r3, #0
 8006934:	d10d      	bne.n	8006952 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800693c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800693e:	f107 0208 	add.w	r2, r7, #8
 8006942:	4610      	mov	r0, r2
 8006944:	4798      	blx	r3
 8006946:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	3301      	adds	r3, #1
 800694c:	2207      	movs	r2, #7
 800694e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006950:	e00f      	b.n	8006972 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8006952:	6839      	ldr	r1, [r7, #0]
 8006954:	6878      	ldr	r0, [r7, #4]
 8006956:	f000 f9f7 	bl	8006d48 <USBD_CtlError>
        err++;
 800695a:	7afb      	ldrb	r3, [r7, #11]
 800695c:	3301      	adds	r3, #1
 800695e:	72fb      	strb	r3, [r7, #11]
      break;
 8006960:	e007      	b.n	8006972 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8006962:	6839      	ldr	r1, [r7, #0]
 8006964:	6878      	ldr	r0, [r7, #4]
 8006966:	f000 f9ef 	bl	8006d48 <USBD_CtlError>
      err++;
 800696a:	7afb      	ldrb	r3, [r7, #11]
 800696c:	3301      	adds	r3, #1
 800696e:	72fb      	strb	r3, [r7, #11]
      break;
 8006970:	bf00      	nop
  }

  if (err != 0U)
 8006972:	7afb      	ldrb	r3, [r7, #11]
 8006974:	2b00      	cmp	r3, #0
 8006976:	d11e      	bne.n	80069b6 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8006978:	683b      	ldr	r3, [r7, #0]
 800697a:	88db      	ldrh	r3, [r3, #6]
 800697c:	2b00      	cmp	r3, #0
 800697e:	d016      	beq.n	80069ae <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8006980:	893b      	ldrh	r3, [r7, #8]
 8006982:	2b00      	cmp	r3, #0
 8006984:	d00e      	beq.n	80069a4 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8006986:	683b      	ldr	r3, [r7, #0]
 8006988:	88da      	ldrh	r2, [r3, #6]
 800698a:	893b      	ldrh	r3, [r7, #8]
 800698c:	4293      	cmp	r3, r2
 800698e:	bf28      	it	cs
 8006990:	4613      	movcs	r3, r2
 8006992:	b29b      	uxth	r3, r3
 8006994:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8006996:	893b      	ldrh	r3, [r7, #8]
 8006998:	461a      	mov	r2, r3
 800699a:	68f9      	ldr	r1, [r7, #12]
 800699c:	6878      	ldr	r0, [r7, #4]
 800699e:	f000 fa44 	bl	8006e2a <USBD_CtlSendData>
 80069a2:	e009      	b.n	80069b8 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80069a4:	6839      	ldr	r1, [r7, #0]
 80069a6:	6878      	ldr	r0, [r7, #4]
 80069a8:	f000 f9ce 	bl	8006d48 <USBD_CtlError>
 80069ac:	e004      	b.n	80069b8 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80069ae:	6878      	ldr	r0, [r7, #4]
 80069b0:	f000 fa78 	bl	8006ea4 <USBD_CtlSendStatus>
 80069b4:	e000      	b.n	80069b8 <USBD_GetDescriptor+0x2cc>
    return;
 80069b6:	bf00      	nop
  }
}
 80069b8:	3710      	adds	r7, #16
 80069ba:	46bd      	mov	sp, r7
 80069bc:	bd80      	pop	{r7, pc}
 80069be:	bf00      	nop

080069c0 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80069c0:	b580      	push	{r7, lr}
 80069c2:	b084      	sub	sp, #16
 80069c4:	af00      	add	r7, sp, #0
 80069c6:	6078      	str	r0, [r7, #4]
 80069c8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80069ca:	683b      	ldr	r3, [r7, #0]
 80069cc:	889b      	ldrh	r3, [r3, #4]
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d131      	bne.n	8006a36 <USBD_SetAddress+0x76>
 80069d2:	683b      	ldr	r3, [r7, #0]
 80069d4:	88db      	ldrh	r3, [r3, #6]
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d12d      	bne.n	8006a36 <USBD_SetAddress+0x76>
 80069da:	683b      	ldr	r3, [r7, #0]
 80069dc:	885b      	ldrh	r3, [r3, #2]
 80069de:	2b7f      	cmp	r3, #127	@ 0x7f
 80069e0:	d829      	bhi.n	8006a36 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80069e2:	683b      	ldr	r3, [r7, #0]
 80069e4:	885b      	ldrh	r3, [r3, #2]
 80069e6:	b2db      	uxtb	r3, r3
 80069e8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80069ec:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80069f4:	b2db      	uxtb	r3, r3
 80069f6:	2b03      	cmp	r3, #3
 80069f8:	d104      	bne.n	8006a04 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80069fa:	6839      	ldr	r1, [r7, #0]
 80069fc:	6878      	ldr	r0, [r7, #4]
 80069fe:	f000 f9a3 	bl	8006d48 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006a02:	e01d      	b.n	8006a40 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	7bfa      	ldrb	r2, [r7, #15]
 8006a08:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8006a0c:	7bfb      	ldrb	r3, [r7, #15]
 8006a0e:	4619      	mov	r1, r3
 8006a10:	6878      	ldr	r0, [r7, #4]
 8006a12:	f000 fe82 	bl	800771a <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8006a16:	6878      	ldr	r0, [r7, #4]
 8006a18:	f000 fa44 	bl	8006ea4 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8006a1c:	7bfb      	ldrb	r3, [r7, #15]
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d004      	beq.n	8006a2c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	2202      	movs	r2, #2
 8006a26:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006a2a:	e009      	b.n	8006a40 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	2201      	movs	r2, #1
 8006a30:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006a34:	e004      	b.n	8006a40 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8006a36:	6839      	ldr	r1, [r7, #0]
 8006a38:	6878      	ldr	r0, [r7, #4]
 8006a3a:	f000 f985 	bl	8006d48 <USBD_CtlError>
  }
}
 8006a3e:	bf00      	nop
 8006a40:	bf00      	nop
 8006a42:	3710      	adds	r7, #16
 8006a44:	46bd      	mov	sp, r7
 8006a46:	bd80      	pop	{r7, pc}

08006a48 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006a48:	b580      	push	{r7, lr}
 8006a4a:	b084      	sub	sp, #16
 8006a4c:	af00      	add	r7, sp, #0
 8006a4e:	6078      	str	r0, [r7, #4]
 8006a50:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006a52:	2300      	movs	r3, #0
 8006a54:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8006a56:	683b      	ldr	r3, [r7, #0]
 8006a58:	885b      	ldrh	r3, [r3, #2]
 8006a5a:	b2da      	uxtb	r2, r3
 8006a5c:	4b4c      	ldr	r3, [pc, #304]	@ (8006b90 <USBD_SetConfig+0x148>)
 8006a5e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8006a60:	4b4b      	ldr	r3, [pc, #300]	@ (8006b90 <USBD_SetConfig+0x148>)
 8006a62:	781b      	ldrb	r3, [r3, #0]
 8006a64:	2b01      	cmp	r3, #1
 8006a66:	d905      	bls.n	8006a74 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8006a68:	6839      	ldr	r1, [r7, #0]
 8006a6a:	6878      	ldr	r0, [r7, #4]
 8006a6c:	f000 f96c 	bl	8006d48 <USBD_CtlError>
    return USBD_FAIL;
 8006a70:	2303      	movs	r3, #3
 8006a72:	e088      	b.n	8006b86 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006a7a:	b2db      	uxtb	r3, r3
 8006a7c:	2b02      	cmp	r3, #2
 8006a7e:	d002      	beq.n	8006a86 <USBD_SetConfig+0x3e>
 8006a80:	2b03      	cmp	r3, #3
 8006a82:	d025      	beq.n	8006ad0 <USBD_SetConfig+0x88>
 8006a84:	e071      	b.n	8006b6a <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8006a86:	4b42      	ldr	r3, [pc, #264]	@ (8006b90 <USBD_SetConfig+0x148>)
 8006a88:	781b      	ldrb	r3, [r3, #0]
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d01c      	beq.n	8006ac8 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 8006a8e:	4b40      	ldr	r3, [pc, #256]	@ (8006b90 <USBD_SetConfig+0x148>)
 8006a90:	781b      	ldrb	r3, [r3, #0]
 8006a92:	461a      	mov	r2, r3
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8006a98:	4b3d      	ldr	r3, [pc, #244]	@ (8006b90 <USBD_SetConfig+0x148>)
 8006a9a:	781b      	ldrb	r3, [r3, #0]
 8006a9c:	4619      	mov	r1, r3
 8006a9e:	6878      	ldr	r0, [r7, #4]
 8006aa0:	f7ff f947 	bl	8005d32 <USBD_SetClassConfig>
 8006aa4:	4603      	mov	r3, r0
 8006aa6:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8006aa8:	7bfb      	ldrb	r3, [r7, #15]
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d004      	beq.n	8006ab8 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 8006aae:	6839      	ldr	r1, [r7, #0]
 8006ab0:	6878      	ldr	r0, [r7, #4]
 8006ab2:	f000 f949 	bl	8006d48 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8006ab6:	e065      	b.n	8006b84 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8006ab8:	6878      	ldr	r0, [r7, #4]
 8006aba:	f000 f9f3 	bl	8006ea4 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	2203      	movs	r2, #3
 8006ac2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8006ac6:	e05d      	b.n	8006b84 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8006ac8:	6878      	ldr	r0, [r7, #4]
 8006aca:	f000 f9eb 	bl	8006ea4 <USBD_CtlSendStatus>
      break;
 8006ace:	e059      	b.n	8006b84 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8006ad0:	4b2f      	ldr	r3, [pc, #188]	@ (8006b90 <USBD_SetConfig+0x148>)
 8006ad2:	781b      	ldrb	r3, [r3, #0]
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d112      	bne.n	8006afe <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	2202      	movs	r2, #2
 8006adc:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8006ae0:	4b2b      	ldr	r3, [pc, #172]	@ (8006b90 <USBD_SetConfig+0x148>)
 8006ae2:	781b      	ldrb	r3, [r3, #0]
 8006ae4:	461a      	mov	r2, r3
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006aea:	4b29      	ldr	r3, [pc, #164]	@ (8006b90 <USBD_SetConfig+0x148>)
 8006aec:	781b      	ldrb	r3, [r3, #0]
 8006aee:	4619      	mov	r1, r3
 8006af0:	6878      	ldr	r0, [r7, #4]
 8006af2:	f7ff f93a 	bl	8005d6a <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8006af6:	6878      	ldr	r0, [r7, #4]
 8006af8:	f000 f9d4 	bl	8006ea4 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8006afc:	e042      	b.n	8006b84 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 8006afe:	4b24      	ldr	r3, [pc, #144]	@ (8006b90 <USBD_SetConfig+0x148>)
 8006b00:	781b      	ldrb	r3, [r3, #0]
 8006b02:	461a      	mov	r2, r3
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	685b      	ldr	r3, [r3, #4]
 8006b08:	429a      	cmp	r2, r3
 8006b0a:	d02a      	beq.n	8006b62 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	685b      	ldr	r3, [r3, #4]
 8006b10:	b2db      	uxtb	r3, r3
 8006b12:	4619      	mov	r1, r3
 8006b14:	6878      	ldr	r0, [r7, #4]
 8006b16:	f7ff f928 	bl	8005d6a <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8006b1a:	4b1d      	ldr	r3, [pc, #116]	@ (8006b90 <USBD_SetConfig+0x148>)
 8006b1c:	781b      	ldrb	r3, [r3, #0]
 8006b1e:	461a      	mov	r2, r3
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8006b24:	4b1a      	ldr	r3, [pc, #104]	@ (8006b90 <USBD_SetConfig+0x148>)
 8006b26:	781b      	ldrb	r3, [r3, #0]
 8006b28:	4619      	mov	r1, r3
 8006b2a:	6878      	ldr	r0, [r7, #4]
 8006b2c:	f7ff f901 	bl	8005d32 <USBD_SetClassConfig>
 8006b30:	4603      	mov	r3, r0
 8006b32:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8006b34:	7bfb      	ldrb	r3, [r7, #15]
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d00f      	beq.n	8006b5a <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 8006b3a:	6839      	ldr	r1, [r7, #0]
 8006b3c:	6878      	ldr	r0, [r7, #4]
 8006b3e:	f000 f903 	bl	8006d48 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	685b      	ldr	r3, [r3, #4]
 8006b46:	b2db      	uxtb	r3, r3
 8006b48:	4619      	mov	r1, r3
 8006b4a:	6878      	ldr	r0, [r7, #4]
 8006b4c:	f7ff f90d 	bl	8005d6a <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	2202      	movs	r2, #2
 8006b54:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8006b58:	e014      	b.n	8006b84 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8006b5a:	6878      	ldr	r0, [r7, #4]
 8006b5c:	f000 f9a2 	bl	8006ea4 <USBD_CtlSendStatus>
      break;
 8006b60:	e010      	b.n	8006b84 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8006b62:	6878      	ldr	r0, [r7, #4]
 8006b64:	f000 f99e 	bl	8006ea4 <USBD_CtlSendStatus>
      break;
 8006b68:	e00c      	b.n	8006b84 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8006b6a:	6839      	ldr	r1, [r7, #0]
 8006b6c:	6878      	ldr	r0, [r7, #4]
 8006b6e:	f000 f8eb 	bl	8006d48 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006b72:	4b07      	ldr	r3, [pc, #28]	@ (8006b90 <USBD_SetConfig+0x148>)
 8006b74:	781b      	ldrb	r3, [r3, #0]
 8006b76:	4619      	mov	r1, r3
 8006b78:	6878      	ldr	r0, [r7, #4]
 8006b7a:	f7ff f8f6 	bl	8005d6a <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8006b7e:	2303      	movs	r3, #3
 8006b80:	73fb      	strb	r3, [r7, #15]
      break;
 8006b82:	bf00      	nop
  }

  return ret;
 8006b84:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b86:	4618      	mov	r0, r3
 8006b88:	3710      	adds	r7, #16
 8006b8a:	46bd      	mov	sp, r7
 8006b8c:	bd80      	pop	{r7, pc}
 8006b8e:	bf00      	nop
 8006b90:	20000184 	.word	0x20000184

08006b94 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006b94:	b580      	push	{r7, lr}
 8006b96:	b082      	sub	sp, #8
 8006b98:	af00      	add	r7, sp, #0
 8006b9a:	6078      	str	r0, [r7, #4]
 8006b9c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8006b9e:	683b      	ldr	r3, [r7, #0]
 8006ba0:	88db      	ldrh	r3, [r3, #6]
 8006ba2:	2b01      	cmp	r3, #1
 8006ba4:	d004      	beq.n	8006bb0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8006ba6:	6839      	ldr	r1, [r7, #0]
 8006ba8:	6878      	ldr	r0, [r7, #4]
 8006baa:	f000 f8cd 	bl	8006d48 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8006bae:	e023      	b.n	8006bf8 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006bb6:	b2db      	uxtb	r3, r3
 8006bb8:	2b02      	cmp	r3, #2
 8006bba:	dc02      	bgt.n	8006bc2 <USBD_GetConfig+0x2e>
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	dc03      	bgt.n	8006bc8 <USBD_GetConfig+0x34>
 8006bc0:	e015      	b.n	8006bee <USBD_GetConfig+0x5a>
 8006bc2:	2b03      	cmp	r3, #3
 8006bc4:	d00b      	beq.n	8006bde <USBD_GetConfig+0x4a>
 8006bc6:	e012      	b.n	8006bee <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	2200      	movs	r2, #0
 8006bcc:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	3308      	adds	r3, #8
 8006bd2:	2201      	movs	r2, #1
 8006bd4:	4619      	mov	r1, r3
 8006bd6:	6878      	ldr	r0, [r7, #4]
 8006bd8:	f000 f927 	bl	8006e2a <USBD_CtlSendData>
        break;
 8006bdc:	e00c      	b.n	8006bf8 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	3304      	adds	r3, #4
 8006be2:	2201      	movs	r2, #1
 8006be4:	4619      	mov	r1, r3
 8006be6:	6878      	ldr	r0, [r7, #4]
 8006be8:	f000 f91f 	bl	8006e2a <USBD_CtlSendData>
        break;
 8006bec:	e004      	b.n	8006bf8 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8006bee:	6839      	ldr	r1, [r7, #0]
 8006bf0:	6878      	ldr	r0, [r7, #4]
 8006bf2:	f000 f8a9 	bl	8006d48 <USBD_CtlError>
        break;
 8006bf6:	bf00      	nop
}
 8006bf8:	bf00      	nop
 8006bfa:	3708      	adds	r7, #8
 8006bfc:	46bd      	mov	sp, r7
 8006bfe:	bd80      	pop	{r7, pc}

08006c00 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006c00:	b580      	push	{r7, lr}
 8006c02:	b082      	sub	sp, #8
 8006c04:	af00      	add	r7, sp, #0
 8006c06:	6078      	str	r0, [r7, #4]
 8006c08:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006c10:	b2db      	uxtb	r3, r3
 8006c12:	3b01      	subs	r3, #1
 8006c14:	2b02      	cmp	r3, #2
 8006c16:	d81e      	bhi.n	8006c56 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8006c18:	683b      	ldr	r3, [r7, #0]
 8006c1a:	88db      	ldrh	r3, [r3, #6]
 8006c1c:	2b02      	cmp	r3, #2
 8006c1e:	d004      	beq.n	8006c2a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8006c20:	6839      	ldr	r1, [r7, #0]
 8006c22:	6878      	ldr	r0, [r7, #4]
 8006c24:	f000 f890 	bl	8006d48 <USBD_CtlError>
        break;
 8006c28:	e01a      	b.n	8006c60 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	2201      	movs	r2, #1
 8006c2e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d005      	beq.n	8006c46 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	68db      	ldr	r3, [r3, #12]
 8006c3e:	f043 0202 	orr.w	r2, r3, #2
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	330c      	adds	r3, #12
 8006c4a:	2202      	movs	r2, #2
 8006c4c:	4619      	mov	r1, r3
 8006c4e:	6878      	ldr	r0, [r7, #4]
 8006c50:	f000 f8eb 	bl	8006e2a <USBD_CtlSendData>
      break;
 8006c54:	e004      	b.n	8006c60 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8006c56:	6839      	ldr	r1, [r7, #0]
 8006c58:	6878      	ldr	r0, [r7, #4]
 8006c5a:	f000 f875 	bl	8006d48 <USBD_CtlError>
      break;
 8006c5e:	bf00      	nop
  }
}
 8006c60:	bf00      	nop
 8006c62:	3708      	adds	r7, #8
 8006c64:	46bd      	mov	sp, r7
 8006c66:	bd80      	pop	{r7, pc}

08006c68 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006c68:	b580      	push	{r7, lr}
 8006c6a:	b082      	sub	sp, #8
 8006c6c:	af00      	add	r7, sp, #0
 8006c6e:	6078      	str	r0, [r7, #4]
 8006c70:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006c72:	683b      	ldr	r3, [r7, #0]
 8006c74:	885b      	ldrh	r3, [r3, #2]
 8006c76:	2b01      	cmp	r3, #1
 8006c78:	d106      	bne.n	8006c88 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	2201      	movs	r2, #1
 8006c7e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8006c82:	6878      	ldr	r0, [r7, #4]
 8006c84:	f000 f90e 	bl	8006ea4 <USBD_CtlSendStatus>
  }
}
 8006c88:	bf00      	nop
 8006c8a:	3708      	adds	r7, #8
 8006c8c:	46bd      	mov	sp, r7
 8006c8e:	bd80      	pop	{r7, pc}

08006c90 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006c90:	b580      	push	{r7, lr}
 8006c92:	b082      	sub	sp, #8
 8006c94:	af00      	add	r7, sp, #0
 8006c96:	6078      	str	r0, [r7, #4]
 8006c98:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006ca0:	b2db      	uxtb	r3, r3
 8006ca2:	3b01      	subs	r3, #1
 8006ca4:	2b02      	cmp	r3, #2
 8006ca6:	d80b      	bhi.n	8006cc0 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006ca8:	683b      	ldr	r3, [r7, #0]
 8006caa:	885b      	ldrh	r3, [r3, #2]
 8006cac:	2b01      	cmp	r3, #1
 8006cae:	d10c      	bne.n	8006cca <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	2200      	movs	r2, #0
 8006cb4:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8006cb8:	6878      	ldr	r0, [r7, #4]
 8006cba:	f000 f8f3 	bl	8006ea4 <USBD_CtlSendStatus>
      }
      break;
 8006cbe:	e004      	b.n	8006cca <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8006cc0:	6839      	ldr	r1, [r7, #0]
 8006cc2:	6878      	ldr	r0, [r7, #4]
 8006cc4:	f000 f840 	bl	8006d48 <USBD_CtlError>
      break;
 8006cc8:	e000      	b.n	8006ccc <USBD_ClrFeature+0x3c>
      break;
 8006cca:	bf00      	nop
  }
}
 8006ccc:	bf00      	nop
 8006cce:	3708      	adds	r7, #8
 8006cd0:	46bd      	mov	sp, r7
 8006cd2:	bd80      	pop	{r7, pc}

08006cd4 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8006cd4:	b580      	push	{r7, lr}
 8006cd6:	b084      	sub	sp, #16
 8006cd8:	af00      	add	r7, sp, #0
 8006cda:	6078      	str	r0, [r7, #4]
 8006cdc:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8006cde:	683b      	ldr	r3, [r7, #0]
 8006ce0:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	781a      	ldrb	r2, [r3, #0]
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	3301      	adds	r3, #1
 8006cee:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	781a      	ldrb	r2, [r3, #0]
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	3301      	adds	r3, #1
 8006cfc:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8006cfe:	68f8      	ldr	r0, [r7, #12]
 8006d00:	f7ff faba 	bl	8006278 <SWAPBYTE>
 8006d04:	4603      	mov	r3, r0
 8006d06:	461a      	mov	r2, r3
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	3301      	adds	r3, #1
 8006d10:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	3301      	adds	r3, #1
 8006d16:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8006d18:	68f8      	ldr	r0, [r7, #12]
 8006d1a:	f7ff faad 	bl	8006278 <SWAPBYTE>
 8006d1e:	4603      	mov	r3, r0
 8006d20:	461a      	mov	r2, r3
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	3301      	adds	r3, #1
 8006d2a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	3301      	adds	r3, #1
 8006d30:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8006d32:	68f8      	ldr	r0, [r7, #12]
 8006d34:	f7ff faa0 	bl	8006278 <SWAPBYTE>
 8006d38:	4603      	mov	r3, r0
 8006d3a:	461a      	mov	r2, r3
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	80da      	strh	r2, [r3, #6]
}
 8006d40:	bf00      	nop
 8006d42:	3710      	adds	r7, #16
 8006d44:	46bd      	mov	sp, r7
 8006d46:	bd80      	pop	{r7, pc}

08006d48 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006d48:	b580      	push	{r7, lr}
 8006d4a:	b082      	sub	sp, #8
 8006d4c:	af00      	add	r7, sp, #0
 8006d4e:	6078      	str	r0, [r7, #4]
 8006d50:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8006d52:	2180      	movs	r1, #128	@ 0x80
 8006d54:	6878      	ldr	r0, [r7, #4]
 8006d56:	f000 fc76 	bl	8007646 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8006d5a:	2100      	movs	r1, #0
 8006d5c:	6878      	ldr	r0, [r7, #4]
 8006d5e:	f000 fc72 	bl	8007646 <USBD_LL_StallEP>
}
 8006d62:	bf00      	nop
 8006d64:	3708      	adds	r7, #8
 8006d66:	46bd      	mov	sp, r7
 8006d68:	bd80      	pop	{r7, pc}

08006d6a <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8006d6a:	b580      	push	{r7, lr}
 8006d6c:	b086      	sub	sp, #24
 8006d6e:	af00      	add	r7, sp, #0
 8006d70:	60f8      	str	r0, [r7, #12]
 8006d72:	60b9      	str	r1, [r7, #8]
 8006d74:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8006d76:	2300      	movs	r3, #0
 8006d78:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d036      	beq.n	8006dee <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8006d84:	6938      	ldr	r0, [r7, #16]
 8006d86:	f000 f836 	bl	8006df6 <USBD_GetLen>
 8006d8a:	4603      	mov	r3, r0
 8006d8c:	3301      	adds	r3, #1
 8006d8e:	b29b      	uxth	r3, r3
 8006d90:	005b      	lsls	r3, r3, #1
 8006d92:	b29a      	uxth	r2, r3
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8006d98:	7dfb      	ldrb	r3, [r7, #23]
 8006d9a:	68ba      	ldr	r2, [r7, #8]
 8006d9c:	4413      	add	r3, r2
 8006d9e:	687a      	ldr	r2, [r7, #4]
 8006da0:	7812      	ldrb	r2, [r2, #0]
 8006da2:	701a      	strb	r2, [r3, #0]
  idx++;
 8006da4:	7dfb      	ldrb	r3, [r7, #23]
 8006da6:	3301      	adds	r3, #1
 8006da8:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8006daa:	7dfb      	ldrb	r3, [r7, #23]
 8006dac:	68ba      	ldr	r2, [r7, #8]
 8006dae:	4413      	add	r3, r2
 8006db0:	2203      	movs	r2, #3
 8006db2:	701a      	strb	r2, [r3, #0]
  idx++;
 8006db4:	7dfb      	ldrb	r3, [r7, #23]
 8006db6:	3301      	adds	r3, #1
 8006db8:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8006dba:	e013      	b.n	8006de4 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8006dbc:	7dfb      	ldrb	r3, [r7, #23]
 8006dbe:	68ba      	ldr	r2, [r7, #8]
 8006dc0:	4413      	add	r3, r2
 8006dc2:	693a      	ldr	r2, [r7, #16]
 8006dc4:	7812      	ldrb	r2, [r2, #0]
 8006dc6:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8006dc8:	693b      	ldr	r3, [r7, #16]
 8006dca:	3301      	adds	r3, #1
 8006dcc:	613b      	str	r3, [r7, #16]
    idx++;
 8006dce:	7dfb      	ldrb	r3, [r7, #23]
 8006dd0:	3301      	adds	r3, #1
 8006dd2:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8006dd4:	7dfb      	ldrb	r3, [r7, #23]
 8006dd6:	68ba      	ldr	r2, [r7, #8]
 8006dd8:	4413      	add	r3, r2
 8006dda:	2200      	movs	r2, #0
 8006ddc:	701a      	strb	r2, [r3, #0]
    idx++;
 8006dde:	7dfb      	ldrb	r3, [r7, #23]
 8006de0:	3301      	adds	r3, #1
 8006de2:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8006de4:	693b      	ldr	r3, [r7, #16]
 8006de6:	781b      	ldrb	r3, [r3, #0]
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d1e7      	bne.n	8006dbc <USBD_GetString+0x52>
 8006dec:	e000      	b.n	8006df0 <USBD_GetString+0x86>
    return;
 8006dee:	bf00      	nop
  }
}
 8006df0:	3718      	adds	r7, #24
 8006df2:	46bd      	mov	sp, r7
 8006df4:	bd80      	pop	{r7, pc}

08006df6 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8006df6:	b480      	push	{r7}
 8006df8:	b085      	sub	sp, #20
 8006dfa:	af00      	add	r7, sp, #0
 8006dfc:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8006dfe:	2300      	movs	r3, #0
 8006e00:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8006e06:	e005      	b.n	8006e14 <USBD_GetLen+0x1e>
  {
    len++;
 8006e08:	7bfb      	ldrb	r3, [r7, #15]
 8006e0a:	3301      	adds	r3, #1
 8006e0c:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8006e0e:	68bb      	ldr	r3, [r7, #8]
 8006e10:	3301      	adds	r3, #1
 8006e12:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8006e14:	68bb      	ldr	r3, [r7, #8]
 8006e16:	781b      	ldrb	r3, [r3, #0]
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d1f5      	bne.n	8006e08 <USBD_GetLen+0x12>
  }

  return len;
 8006e1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e1e:	4618      	mov	r0, r3
 8006e20:	3714      	adds	r7, #20
 8006e22:	46bd      	mov	sp, r7
 8006e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e28:	4770      	bx	lr

08006e2a <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8006e2a:	b580      	push	{r7, lr}
 8006e2c:	b084      	sub	sp, #16
 8006e2e:	af00      	add	r7, sp, #0
 8006e30:	60f8      	str	r0, [r7, #12]
 8006e32:	60b9      	str	r1, [r7, #8]
 8006e34:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	2202      	movs	r2, #2
 8006e3a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	687a      	ldr	r2, [r7, #4]
 8006e42:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	687a      	ldr	r2, [r7, #4]
 8006e48:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	68ba      	ldr	r2, [r7, #8]
 8006e4e:	2100      	movs	r1, #0
 8006e50:	68f8      	ldr	r0, [r7, #12]
 8006e52:	f000 fc81 	bl	8007758 <USBD_LL_Transmit>

  return USBD_OK;
 8006e56:	2300      	movs	r3, #0
}
 8006e58:	4618      	mov	r0, r3
 8006e5a:	3710      	adds	r7, #16
 8006e5c:	46bd      	mov	sp, r7
 8006e5e:	bd80      	pop	{r7, pc}

08006e60 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8006e60:	b580      	push	{r7, lr}
 8006e62:	b084      	sub	sp, #16
 8006e64:	af00      	add	r7, sp, #0
 8006e66:	60f8      	str	r0, [r7, #12]
 8006e68:	60b9      	str	r1, [r7, #8]
 8006e6a:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	68ba      	ldr	r2, [r7, #8]
 8006e70:	2100      	movs	r1, #0
 8006e72:	68f8      	ldr	r0, [r7, #12]
 8006e74:	f000 fc70 	bl	8007758 <USBD_LL_Transmit>

  return USBD_OK;
 8006e78:	2300      	movs	r3, #0
}
 8006e7a:	4618      	mov	r0, r3
 8006e7c:	3710      	adds	r7, #16
 8006e7e:	46bd      	mov	sp, r7
 8006e80:	bd80      	pop	{r7, pc}

08006e82 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8006e82:	b580      	push	{r7, lr}
 8006e84:	b084      	sub	sp, #16
 8006e86:	af00      	add	r7, sp, #0
 8006e88:	60f8      	str	r0, [r7, #12]
 8006e8a:	60b9      	str	r1, [r7, #8]
 8006e8c:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	68ba      	ldr	r2, [r7, #8]
 8006e92:	2100      	movs	r1, #0
 8006e94:	68f8      	ldr	r0, [r7, #12]
 8006e96:	f000 fc80 	bl	800779a <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006e9a:	2300      	movs	r3, #0
}
 8006e9c:	4618      	mov	r0, r3
 8006e9e:	3710      	adds	r7, #16
 8006ea0:	46bd      	mov	sp, r7
 8006ea2:	bd80      	pop	{r7, pc}

08006ea4 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8006ea4:	b580      	push	{r7, lr}
 8006ea6:	b082      	sub	sp, #8
 8006ea8:	af00      	add	r7, sp, #0
 8006eaa:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	2204      	movs	r2, #4
 8006eb0:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8006eb4:	2300      	movs	r3, #0
 8006eb6:	2200      	movs	r2, #0
 8006eb8:	2100      	movs	r1, #0
 8006eba:	6878      	ldr	r0, [r7, #4]
 8006ebc:	f000 fc4c 	bl	8007758 <USBD_LL_Transmit>

  return USBD_OK;
 8006ec0:	2300      	movs	r3, #0
}
 8006ec2:	4618      	mov	r0, r3
 8006ec4:	3708      	adds	r7, #8
 8006ec6:	46bd      	mov	sp, r7
 8006ec8:	bd80      	pop	{r7, pc}

08006eca <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8006eca:	b580      	push	{r7, lr}
 8006ecc:	b082      	sub	sp, #8
 8006ece:	af00      	add	r7, sp, #0
 8006ed0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	2205      	movs	r2, #5
 8006ed6:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006eda:	2300      	movs	r3, #0
 8006edc:	2200      	movs	r2, #0
 8006ede:	2100      	movs	r1, #0
 8006ee0:	6878      	ldr	r0, [r7, #4]
 8006ee2:	f000 fc5a 	bl	800779a <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006ee6:	2300      	movs	r3, #0
}
 8006ee8:	4618      	mov	r0, r3
 8006eea:	3708      	adds	r7, #8
 8006eec:	46bd      	mov	sp, r7
 8006eee:	bd80      	pop	{r7, pc}

08006ef0 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8006ef0:	b580      	push	{r7, lr}
 8006ef2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8006ef4:	2200      	movs	r2, #0
 8006ef6:	4912      	ldr	r1, [pc, #72]	@ (8006f40 <MX_USB_DEVICE_Init+0x50>)
 8006ef8:	4812      	ldr	r0, [pc, #72]	@ (8006f44 <MX_USB_DEVICE_Init+0x54>)
 8006efa:	f7fe feac 	bl	8005c56 <USBD_Init>
 8006efe:	4603      	mov	r3, r0
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d001      	beq.n	8006f08 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8006f04:	f7f9 fb9a 	bl	800063c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_MSC) != USBD_OK)
 8006f08:	490f      	ldr	r1, [pc, #60]	@ (8006f48 <MX_USB_DEVICE_Init+0x58>)
 8006f0a:	480e      	ldr	r0, [pc, #56]	@ (8006f44 <MX_USB_DEVICE_Init+0x54>)
 8006f0c:	f7fe fed3 	bl	8005cb6 <USBD_RegisterClass>
 8006f10:	4603      	mov	r3, r0
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d001      	beq.n	8006f1a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8006f16:	f7f9 fb91 	bl	800063c <Error_Handler>
  }
  if (USBD_MSC_RegisterStorage(&hUsbDeviceFS, &USBD_Storage_Interface_fops_FS) != USBD_OK)
 8006f1a:	490c      	ldr	r1, [pc, #48]	@ (8006f4c <MX_USB_DEVICE_Init+0x5c>)
 8006f1c:	4809      	ldr	r0, [pc, #36]	@ (8006f44 <MX_USB_DEVICE_Init+0x54>)
 8006f1e:	f7fd fa83 	bl	8004428 <USBD_MSC_RegisterStorage>
 8006f22:	4603      	mov	r3, r0
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d001      	beq.n	8006f2c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8006f28:	f7f9 fb88 	bl	800063c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8006f2c:	4805      	ldr	r0, [pc, #20]	@ (8006f44 <MX_USB_DEVICE_Init+0x54>)
 8006f2e:	f7fe fee9 	bl	8005d04 <USBD_Start>
 8006f32:	4603      	mov	r3, r0
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d001      	beq.n	8006f3c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8006f38:	f7f9 fb80 	bl	800063c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8006f3c:	bf00      	nop
 8006f3e:	bd80      	pop	{r7, pc}
 8006f40:	200000f4 	.word	0x200000f4
 8006f44:	20000188 	.word	0x20000188
 8006f48:	2000000c 	.word	0x2000000c
 8006f4c:	20000144 	.word	0x20000144

08006f50 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006f50:	b480      	push	{r7}
 8006f52:	b083      	sub	sp, #12
 8006f54:	af00      	add	r7, sp, #0
 8006f56:	4603      	mov	r3, r0
 8006f58:	6039      	str	r1, [r7, #0]
 8006f5a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8006f5c:	683b      	ldr	r3, [r7, #0]
 8006f5e:	2212      	movs	r2, #18
 8006f60:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8006f62:	4b03      	ldr	r3, [pc, #12]	@ (8006f70 <USBD_FS_DeviceDescriptor+0x20>)
}
 8006f64:	4618      	mov	r0, r3
 8006f66:	370c      	adds	r7, #12
 8006f68:	46bd      	mov	sp, r7
 8006f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f6e:	4770      	bx	lr
 8006f70:	20000110 	.word	0x20000110

08006f74 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006f74:	b480      	push	{r7}
 8006f76:	b083      	sub	sp, #12
 8006f78:	af00      	add	r7, sp, #0
 8006f7a:	4603      	mov	r3, r0
 8006f7c:	6039      	str	r1, [r7, #0]
 8006f7e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8006f80:	683b      	ldr	r3, [r7, #0]
 8006f82:	2204      	movs	r2, #4
 8006f84:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8006f86:	4b03      	ldr	r3, [pc, #12]	@ (8006f94 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8006f88:	4618      	mov	r0, r3
 8006f8a:	370c      	adds	r7, #12
 8006f8c:	46bd      	mov	sp, r7
 8006f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f92:	4770      	bx	lr
 8006f94:	20000124 	.word	0x20000124

08006f98 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006f98:	b580      	push	{r7, lr}
 8006f9a:	b082      	sub	sp, #8
 8006f9c:	af00      	add	r7, sp, #0
 8006f9e:	4603      	mov	r3, r0
 8006fa0:	6039      	str	r1, [r7, #0]
 8006fa2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8006fa4:	79fb      	ldrb	r3, [r7, #7]
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d105      	bne.n	8006fb6 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8006faa:	683a      	ldr	r2, [r7, #0]
 8006fac:	4907      	ldr	r1, [pc, #28]	@ (8006fcc <USBD_FS_ProductStrDescriptor+0x34>)
 8006fae:	4808      	ldr	r0, [pc, #32]	@ (8006fd0 <USBD_FS_ProductStrDescriptor+0x38>)
 8006fb0:	f7ff fedb 	bl	8006d6a <USBD_GetString>
 8006fb4:	e004      	b.n	8006fc0 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8006fb6:	683a      	ldr	r2, [r7, #0]
 8006fb8:	4904      	ldr	r1, [pc, #16]	@ (8006fcc <USBD_FS_ProductStrDescriptor+0x34>)
 8006fba:	4805      	ldr	r0, [pc, #20]	@ (8006fd0 <USBD_FS_ProductStrDescriptor+0x38>)
 8006fbc:	f7ff fed5 	bl	8006d6a <USBD_GetString>
  }
  return USBD_StrDesc;
 8006fc0:	4b02      	ldr	r3, [pc, #8]	@ (8006fcc <USBD_FS_ProductStrDescriptor+0x34>)
}
 8006fc2:	4618      	mov	r0, r3
 8006fc4:	3708      	adds	r7, #8
 8006fc6:	46bd      	mov	sp, r7
 8006fc8:	bd80      	pop	{r7, pc}
 8006fca:	bf00      	nop
 8006fcc:	20000458 	.word	0x20000458
 8006fd0:	080078fc 	.word	0x080078fc

08006fd4 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006fd4:	b580      	push	{r7, lr}
 8006fd6:	b082      	sub	sp, #8
 8006fd8:	af00      	add	r7, sp, #0
 8006fda:	4603      	mov	r3, r0
 8006fdc:	6039      	str	r1, [r7, #0]
 8006fde:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8006fe0:	683a      	ldr	r2, [r7, #0]
 8006fe2:	4904      	ldr	r1, [pc, #16]	@ (8006ff4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8006fe4:	4804      	ldr	r0, [pc, #16]	@ (8006ff8 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8006fe6:	f7ff fec0 	bl	8006d6a <USBD_GetString>
  return USBD_StrDesc;
 8006fea:	4b02      	ldr	r3, [pc, #8]	@ (8006ff4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8006fec:	4618      	mov	r0, r3
 8006fee:	3708      	adds	r7, #8
 8006ff0:	46bd      	mov	sp, r7
 8006ff2:	bd80      	pop	{r7, pc}
 8006ff4:	20000458 	.word	0x20000458
 8006ff8:	08007910 	.word	0x08007910

08006ffc <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006ffc:	b580      	push	{r7, lr}
 8006ffe:	b082      	sub	sp, #8
 8007000:	af00      	add	r7, sp, #0
 8007002:	4603      	mov	r3, r0
 8007004:	6039      	str	r1, [r7, #0]
 8007006:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8007008:	683b      	ldr	r3, [r7, #0]
 800700a:	221a      	movs	r2, #26
 800700c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800700e:	f000 f843 	bl	8007098 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8007012:	4b02      	ldr	r3, [pc, #8]	@ (800701c <USBD_FS_SerialStrDescriptor+0x20>)
}
 8007014:	4618      	mov	r0, r3
 8007016:	3708      	adds	r7, #8
 8007018:	46bd      	mov	sp, r7
 800701a:	bd80      	pop	{r7, pc}
 800701c:	20000128 	.word	0x20000128

08007020 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007020:	b580      	push	{r7, lr}
 8007022:	b082      	sub	sp, #8
 8007024:	af00      	add	r7, sp, #0
 8007026:	4603      	mov	r3, r0
 8007028:	6039      	str	r1, [r7, #0]
 800702a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800702c:	79fb      	ldrb	r3, [r7, #7]
 800702e:	2b00      	cmp	r3, #0
 8007030:	d105      	bne.n	800703e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007032:	683a      	ldr	r2, [r7, #0]
 8007034:	4907      	ldr	r1, [pc, #28]	@ (8007054 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007036:	4808      	ldr	r0, [pc, #32]	@ (8007058 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007038:	f7ff fe97 	bl	8006d6a <USBD_GetString>
 800703c:	e004      	b.n	8007048 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800703e:	683a      	ldr	r2, [r7, #0]
 8007040:	4904      	ldr	r1, [pc, #16]	@ (8007054 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007042:	4805      	ldr	r0, [pc, #20]	@ (8007058 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007044:	f7ff fe91 	bl	8006d6a <USBD_GetString>
  }
  return USBD_StrDesc;
 8007048:	4b02      	ldr	r3, [pc, #8]	@ (8007054 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800704a:	4618      	mov	r0, r3
 800704c:	3708      	adds	r7, #8
 800704e:	46bd      	mov	sp, r7
 8007050:	bd80      	pop	{r7, pc}
 8007052:	bf00      	nop
 8007054:	20000458 	.word	0x20000458
 8007058:	08007924 	.word	0x08007924

0800705c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800705c:	b580      	push	{r7, lr}
 800705e:	b082      	sub	sp, #8
 8007060:	af00      	add	r7, sp, #0
 8007062:	4603      	mov	r3, r0
 8007064:	6039      	str	r1, [r7, #0]
 8007066:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007068:	79fb      	ldrb	r3, [r7, #7]
 800706a:	2b00      	cmp	r3, #0
 800706c:	d105      	bne.n	800707a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800706e:	683a      	ldr	r2, [r7, #0]
 8007070:	4907      	ldr	r1, [pc, #28]	@ (8007090 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007072:	4808      	ldr	r0, [pc, #32]	@ (8007094 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007074:	f7ff fe79 	bl	8006d6a <USBD_GetString>
 8007078:	e004      	b.n	8007084 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800707a:	683a      	ldr	r2, [r7, #0]
 800707c:	4904      	ldr	r1, [pc, #16]	@ (8007090 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800707e:	4805      	ldr	r0, [pc, #20]	@ (8007094 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007080:	f7ff fe73 	bl	8006d6a <USBD_GetString>
  }
  return USBD_StrDesc;
 8007084:	4b02      	ldr	r3, [pc, #8]	@ (8007090 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8007086:	4618      	mov	r0, r3
 8007088:	3708      	adds	r7, #8
 800708a:	46bd      	mov	sp, r7
 800708c:	bd80      	pop	{r7, pc}
 800708e:	bf00      	nop
 8007090:	20000458 	.word	0x20000458
 8007094:	08007930 	.word	0x08007930

08007098 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8007098:	b580      	push	{r7, lr}
 800709a:	b084      	sub	sp, #16
 800709c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800709e:	4b0f      	ldr	r3, [pc, #60]	@ (80070dc <Get_SerialNum+0x44>)
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80070a4:	4b0e      	ldr	r3, [pc, #56]	@ (80070e0 <Get_SerialNum+0x48>)
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80070aa:	4b0e      	ldr	r3, [pc, #56]	@ (80070e4 <Get_SerialNum+0x4c>)
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80070b0:	68fa      	ldr	r2, [r7, #12]
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	4413      	add	r3, r2
 80070b6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d009      	beq.n	80070d2 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80070be:	2208      	movs	r2, #8
 80070c0:	4909      	ldr	r1, [pc, #36]	@ (80070e8 <Get_SerialNum+0x50>)
 80070c2:	68f8      	ldr	r0, [r7, #12]
 80070c4:	f000 f814 	bl	80070f0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80070c8:	2204      	movs	r2, #4
 80070ca:	4908      	ldr	r1, [pc, #32]	@ (80070ec <Get_SerialNum+0x54>)
 80070cc:	68b8      	ldr	r0, [r7, #8]
 80070ce:	f000 f80f 	bl	80070f0 <IntToUnicode>
  }
}
 80070d2:	bf00      	nop
 80070d4:	3710      	adds	r7, #16
 80070d6:	46bd      	mov	sp, r7
 80070d8:	bd80      	pop	{r7, pc}
 80070da:	bf00      	nop
 80070dc:	1fff7a10 	.word	0x1fff7a10
 80070e0:	1fff7a14 	.word	0x1fff7a14
 80070e4:	1fff7a18 	.word	0x1fff7a18
 80070e8:	2000012a 	.word	0x2000012a
 80070ec:	2000013a 	.word	0x2000013a

080070f0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80070f0:	b480      	push	{r7}
 80070f2:	b087      	sub	sp, #28
 80070f4:	af00      	add	r7, sp, #0
 80070f6:	60f8      	str	r0, [r7, #12]
 80070f8:	60b9      	str	r1, [r7, #8]
 80070fa:	4613      	mov	r3, r2
 80070fc:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80070fe:	2300      	movs	r3, #0
 8007100:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8007102:	2300      	movs	r3, #0
 8007104:	75fb      	strb	r3, [r7, #23]
 8007106:	e027      	b.n	8007158 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	0f1b      	lsrs	r3, r3, #28
 800710c:	2b09      	cmp	r3, #9
 800710e:	d80b      	bhi.n	8007128 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	0f1b      	lsrs	r3, r3, #28
 8007114:	b2da      	uxtb	r2, r3
 8007116:	7dfb      	ldrb	r3, [r7, #23]
 8007118:	005b      	lsls	r3, r3, #1
 800711a:	4619      	mov	r1, r3
 800711c:	68bb      	ldr	r3, [r7, #8]
 800711e:	440b      	add	r3, r1
 8007120:	3230      	adds	r2, #48	@ 0x30
 8007122:	b2d2      	uxtb	r2, r2
 8007124:	701a      	strb	r2, [r3, #0]
 8007126:	e00a      	b.n	800713e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	0f1b      	lsrs	r3, r3, #28
 800712c:	b2da      	uxtb	r2, r3
 800712e:	7dfb      	ldrb	r3, [r7, #23]
 8007130:	005b      	lsls	r3, r3, #1
 8007132:	4619      	mov	r1, r3
 8007134:	68bb      	ldr	r3, [r7, #8]
 8007136:	440b      	add	r3, r1
 8007138:	3237      	adds	r2, #55	@ 0x37
 800713a:	b2d2      	uxtb	r2, r2
 800713c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	011b      	lsls	r3, r3, #4
 8007142:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8007144:	7dfb      	ldrb	r3, [r7, #23]
 8007146:	005b      	lsls	r3, r3, #1
 8007148:	3301      	adds	r3, #1
 800714a:	68ba      	ldr	r2, [r7, #8]
 800714c:	4413      	add	r3, r2
 800714e:	2200      	movs	r2, #0
 8007150:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8007152:	7dfb      	ldrb	r3, [r7, #23]
 8007154:	3301      	adds	r3, #1
 8007156:	75fb      	strb	r3, [r7, #23]
 8007158:	7dfa      	ldrb	r2, [r7, #23]
 800715a:	79fb      	ldrb	r3, [r7, #7]
 800715c:	429a      	cmp	r2, r3
 800715e:	d3d3      	bcc.n	8007108 <IntToUnicode+0x18>
  }
}
 8007160:	bf00      	nop
 8007162:	bf00      	nop
 8007164:	371c      	adds	r7, #28
 8007166:	46bd      	mov	sp, r7
 8007168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800716c:	4770      	bx	lr

0800716e <STORAGE_Init_FS>:
  * @brief  Initializes over USB FS IP
  * @param  lun:
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Init_FS(uint8_t lun)
{
 800716e:	b480      	push	{r7}
 8007170:	b083      	sub	sp, #12
 8007172:	af00      	add	r7, sp, #0
 8007174:	4603      	mov	r3, r0
 8007176:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 2 */
  return (USBD_OK);
 8007178:	2300      	movs	r3, #0
  /* USER CODE END 2 */
}
 800717a:	4618      	mov	r0, r3
 800717c:	370c      	adds	r7, #12
 800717e:	46bd      	mov	sp, r7
 8007180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007184:	4770      	bx	lr

08007186 <STORAGE_GetCapacity_FS>:
  * @param  block_num: .
  * @param  block_size: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_GetCapacity_FS(uint8_t lun, uint32_t *block_num, uint16_t *block_size)
{
 8007186:	b480      	push	{r7}
 8007188:	b085      	sub	sp, #20
 800718a:	af00      	add	r7, sp, #0
 800718c:	4603      	mov	r3, r0
 800718e:	60b9      	str	r1, [r7, #8]
 8007190:	607a      	str	r2, [r7, #4]
 8007192:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 3 */
  *block_num  = STORAGE_BLK_NBR;
 8007194:	68bb      	ldr	r3, [r7, #8]
 8007196:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800719a:	601a      	str	r2, [r3, #0]
  *block_size = STORAGE_BLK_SIZ;
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80071a2:	801a      	strh	r2, [r3, #0]
  return (USBD_OK);
 80071a4:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80071a6:	4618      	mov	r0, r3
 80071a8:	3714      	adds	r7, #20
 80071aa:	46bd      	mov	sp, r7
 80071ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071b0:	4770      	bx	lr

080071b2 <STORAGE_IsReady_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsReady_FS(uint8_t lun)
{
 80071b2:	b480      	push	{r7}
 80071b4:	b083      	sub	sp, #12
 80071b6:	af00      	add	r7, sp, #0
 80071b8:	4603      	mov	r3, r0
 80071ba:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80071bc:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80071be:	4618      	mov	r0, r3
 80071c0:	370c      	adds	r7, #12
 80071c2:	46bd      	mov	sp, r7
 80071c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071c8:	4770      	bx	lr

080071ca <STORAGE_IsWriteProtected_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsWriteProtected_FS(uint8_t lun)
{
 80071ca:	b480      	push	{r7}
 80071cc:	b083      	sub	sp, #12
 80071ce:	af00      	add	r7, sp, #0
 80071d0:	4603      	mov	r3, r0
 80071d2:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 5 */
  return (USBD_OK);
 80071d4:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80071d6:	4618      	mov	r0, r3
 80071d8:	370c      	adds	r7, #12
 80071da:	46bd      	mov	sp, r7
 80071dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071e0:	4770      	bx	lr

080071e2 <STORAGE_Read_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Read_FS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 80071e2:	b480      	push	{r7}
 80071e4:	b085      	sub	sp, #20
 80071e6:	af00      	add	r7, sp, #0
 80071e8:	60b9      	str	r1, [r7, #8]
 80071ea:	607a      	str	r2, [r7, #4]
 80071ec:	461a      	mov	r2, r3
 80071ee:	4603      	mov	r3, r0
 80071f0:	73fb      	strb	r3, [r7, #15]
 80071f2:	4613      	mov	r3, r2
 80071f4:	81bb      	strh	r3, [r7, #12]
  /* USER CODE BEGIN 6 */
  return (USBD_OK);
 80071f6:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80071f8:	4618      	mov	r0, r3
 80071fa:	3714      	adds	r7, #20
 80071fc:	46bd      	mov	sp, r7
 80071fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007202:	4770      	bx	lr

08007204 <STORAGE_Write_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Write_FS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 8007204:	b480      	push	{r7}
 8007206:	b085      	sub	sp, #20
 8007208:	af00      	add	r7, sp, #0
 800720a:	60b9      	str	r1, [r7, #8]
 800720c:	607a      	str	r2, [r7, #4]
 800720e:	461a      	mov	r2, r3
 8007210:	4603      	mov	r3, r0
 8007212:	73fb      	strb	r3, [r7, #15]
 8007214:	4613      	mov	r3, r2
 8007216:	81bb      	strh	r3, [r7, #12]
  /* USER CODE BEGIN 7 */
  return (USBD_OK);
 8007218:	2300      	movs	r3, #0
  /* USER CODE END 7 */
}
 800721a:	4618      	mov	r0, r3
 800721c:	3714      	adds	r7, #20
 800721e:	46bd      	mov	sp, r7
 8007220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007224:	4770      	bx	lr

08007226 <STORAGE_GetMaxLun_FS>:
  * @brief  .
  * @param  None
  * @retval .
  */
int8_t STORAGE_GetMaxLun_FS(void)
{
 8007226:	b480      	push	{r7}
 8007228:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */
  return (STORAGE_LUN_NBR - 1);
 800722a:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 800722c:	4618      	mov	r0, r3
 800722e:	46bd      	mov	sp, r7
 8007230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007234:	4770      	bx	lr
	...

08007238 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8007238:	b580      	push	{r7, lr}
 800723a:	b08a      	sub	sp, #40	@ 0x28
 800723c:	af00      	add	r7, sp, #0
 800723e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007240:	f107 0314 	add.w	r3, r7, #20
 8007244:	2200      	movs	r2, #0
 8007246:	601a      	str	r2, [r3, #0]
 8007248:	605a      	str	r2, [r3, #4]
 800724a:	609a      	str	r2, [r3, #8]
 800724c:	60da      	str	r2, [r3, #12]
 800724e:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007258:	d13a      	bne.n	80072d0 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800725a:	2300      	movs	r3, #0
 800725c:	613b      	str	r3, [r7, #16]
 800725e:	4b1e      	ldr	r3, [pc, #120]	@ (80072d8 <HAL_PCD_MspInit+0xa0>)
 8007260:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007262:	4a1d      	ldr	r2, [pc, #116]	@ (80072d8 <HAL_PCD_MspInit+0xa0>)
 8007264:	f043 0301 	orr.w	r3, r3, #1
 8007268:	6313      	str	r3, [r2, #48]	@ 0x30
 800726a:	4b1b      	ldr	r3, [pc, #108]	@ (80072d8 <HAL_PCD_MspInit+0xa0>)
 800726c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800726e:	f003 0301 	and.w	r3, r3, #1
 8007272:	613b      	str	r3, [r7, #16]
 8007274:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8007276:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800727a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800727c:	2302      	movs	r3, #2
 800727e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007280:	2300      	movs	r3, #0
 8007282:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007284:	2303      	movs	r3, #3
 8007286:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8007288:	230a      	movs	r3, #10
 800728a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800728c:	f107 0314 	add.w	r3, r7, #20
 8007290:	4619      	mov	r1, r3
 8007292:	4812      	ldr	r0, [pc, #72]	@ (80072dc <HAL_PCD_MspInit+0xa4>)
 8007294:	f7f9 fc1e 	bl	8000ad4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8007298:	4b0f      	ldr	r3, [pc, #60]	@ (80072d8 <HAL_PCD_MspInit+0xa0>)
 800729a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800729c:	4a0e      	ldr	r2, [pc, #56]	@ (80072d8 <HAL_PCD_MspInit+0xa0>)
 800729e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80072a2:	6353      	str	r3, [r2, #52]	@ 0x34
 80072a4:	2300      	movs	r3, #0
 80072a6:	60fb      	str	r3, [r7, #12]
 80072a8:	4b0b      	ldr	r3, [pc, #44]	@ (80072d8 <HAL_PCD_MspInit+0xa0>)
 80072aa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80072ac:	4a0a      	ldr	r2, [pc, #40]	@ (80072d8 <HAL_PCD_MspInit+0xa0>)
 80072ae:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80072b2:	6453      	str	r3, [r2, #68]	@ 0x44
 80072b4:	4b08      	ldr	r3, [pc, #32]	@ (80072d8 <HAL_PCD_MspInit+0xa0>)
 80072b6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80072b8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80072bc:	60fb      	str	r3, [r7, #12]
 80072be:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80072c0:	2200      	movs	r2, #0
 80072c2:	2100      	movs	r1, #0
 80072c4:	2043      	movs	r0, #67	@ 0x43
 80072c6:	f7f9 fbce 	bl	8000a66 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80072ca:	2043      	movs	r0, #67	@ 0x43
 80072cc:	f7f9 fbe7 	bl	8000a9e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80072d0:	bf00      	nop
 80072d2:	3728      	adds	r7, #40	@ 0x28
 80072d4:	46bd      	mov	sp, r7
 80072d6:	bd80      	pop	{r7, pc}
 80072d8:	40023800 	.word	0x40023800
 80072dc:	40020000 	.word	0x40020000

080072e0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80072e0:	b580      	push	{r7, lr}
 80072e2:	b082      	sub	sp, #8
 80072e4:	af00      	add	r7, sp, #0
 80072e6:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	f8d3 2404 	ldr.w	r2, [r3, #1028]	@ 0x404
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	f503 7371 	add.w	r3, r3, #964	@ 0x3c4
 80072f4:	4619      	mov	r1, r3
 80072f6:	4610      	mov	r0, r2
 80072f8:	f7fe fd4f 	bl	8005d9a <USBD_LL_SetupStage>
}
 80072fc:	bf00      	nop
 80072fe:	3708      	adds	r7, #8
 8007300:	46bd      	mov	sp, r7
 8007302:	bd80      	pop	{r7, pc}

08007304 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007304:	b580      	push	{r7, lr}
 8007306:	b082      	sub	sp, #8
 8007308:	af00      	add	r7, sp, #0
 800730a:	6078      	str	r0, [r7, #4]
 800730c:	460b      	mov	r3, r1
 800730e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	f8d3 0404 	ldr.w	r0, [r3, #1028]	@ 0x404
 8007316:	78fa      	ldrb	r2, [r7, #3]
 8007318:	6879      	ldr	r1, [r7, #4]
 800731a:	4613      	mov	r3, r2
 800731c:	00db      	lsls	r3, r3, #3
 800731e:	1a9b      	subs	r3, r3, r2
 8007320:	009b      	lsls	r3, r3, #2
 8007322:	440b      	add	r3, r1
 8007324:	f503 7302 	add.w	r3, r3, #520	@ 0x208
 8007328:	681a      	ldr	r2, [r3, #0]
 800732a:	78fb      	ldrb	r3, [r7, #3]
 800732c:	4619      	mov	r1, r3
 800732e:	f7fe fd89 	bl	8005e44 <USBD_LL_DataOutStage>
}
 8007332:	bf00      	nop
 8007334:	3708      	adds	r7, #8
 8007336:	46bd      	mov	sp, r7
 8007338:	bd80      	pop	{r7, pc}

0800733a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800733a:	b580      	push	{r7, lr}
 800733c:	b082      	sub	sp, #8
 800733e:	af00      	add	r7, sp, #0
 8007340:	6078      	str	r0, [r7, #4]
 8007342:	460b      	mov	r3, r1
 8007344:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	f8d3 0404 	ldr.w	r0, [r3, #1028]	@ 0x404
 800734c:	78fa      	ldrb	r2, [r7, #3]
 800734e:	6879      	ldr	r1, [r7, #4]
 8007350:	4613      	mov	r3, r2
 8007352:	00db      	lsls	r3, r3, #3
 8007354:	1a9b      	subs	r3, r3, r2
 8007356:	009b      	lsls	r3, r3, #2
 8007358:	440b      	add	r3, r1
 800735a:	3348      	adds	r3, #72	@ 0x48
 800735c:	681a      	ldr	r2, [r3, #0]
 800735e:	78fb      	ldrb	r3, [r7, #3]
 8007360:	4619      	mov	r1, r3
 8007362:	f7fe fdd2 	bl	8005f0a <USBD_LL_DataInStage>
}
 8007366:	bf00      	nop
 8007368:	3708      	adds	r7, #8
 800736a:	46bd      	mov	sp, r7
 800736c:	bd80      	pop	{r7, pc}

0800736e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800736e:	b580      	push	{r7, lr}
 8007370:	b082      	sub	sp, #8
 8007372:	af00      	add	r7, sp, #0
 8007374:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 800737c:	4618      	mov	r0, r3
 800737e:	f7fe fee6 	bl	800614e <USBD_LL_SOF>
}
 8007382:	bf00      	nop
 8007384:	3708      	adds	r7, #8
 8007386:	46bd      	mov	sp, r7
 8007388:	bd80      	pop	{r7, pc}

0800738a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800738a:	b580      	push	{r7, lr}
 800738c:	b084      	sub	sp, #16
 800738e:	af00      	add	r7, sp, #0
 8007390:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8007392:	2301      	movs	r3, #1
 8007394:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	68db      	ldr	r3, [r3, #12]
 800739a:	2b02      	cmp	r3, #2
 800739c:	d001      	beq.n	80073a2 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800739e:	f7f9 f94d 	bl	800063c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 80073a8:	7bfa      	ldrb	r2, [r7, #15]
 80073aa:	4611      	mov	r1, r2
 80073ac:	4618      	mov	r0, r3
 80073ae:	f7fe fe90 	bl	80060d2 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 80073b8:	4618      	mov	r0, r3
 80073ba:	f7fe fe3c 	bl	8006036 <USBD_LL_Reset>
}
 80073be:	bf00      	nop
 80073c0:	3710      	adds	r7, #16
 80073c2:	46bd      	mov	sp, r7
 80073c4:	bd80      	pop	{r7, pc}
	...

080073c8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80073c8:	b580      	push	{r7, lr}
 80073ca:	b082      	sub	sp, #8
 80073cc:	af00      	add	r7, sp, #0
 80073ce:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 80073d6:	4618      	mov	r0, r3
 80073d8:	f7fe fe8b 	bl	80060f2 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	687a      	ldr	r2, [r7, #4]
 80073e8:	6812      	ldr	r2, [r2, #0]
 80073ea:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80073ee:	f043 0301 	orr.w	r3, r3, #1
 80073f2:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	6a1b      	ldr	r3, [r3, #32]
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d005      	beq.n	8007408 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80073fc:	4b04      	ldr	r3, [pc, #16]	@ (8007410 <HAL_PCD_SuspendCallback+0x48>)
 80073fe:	691b      	ldr	r3, [r3, #16]
 8007400:	4a03      	ldr	r2, [pc, #12]	@ (8007410 <HAL_PCD_SuspendCallback+0x48>)
 8007402:	f043 0306 	orr.w	r3, r3, #6
 8007406:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8007408:	bf00      	nop
 800740a:	3708      	adds	r7, #8
 800740c:	46bd      	mov	sp, r7
 800740e:	bd80      	pop	{r7, pc}
 8007410:	e000ed00 	.word	0xe000ed00

08007414 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007414:	b580      	push	{r7, lr}
 8007416:	b082      	sub	sp, #8
 8007418:	af00      	add	r7, sp, #0
 800741a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 8007422:	4618      	mov	r0, r3
 8007424:	f7fe fe7b 	bl	800611e <USBD_LL_Resume>
}
 8007428:	bf00      	nop
 800742a:	3708      	adds	r7, #8
 800742c:	46bd      	mov	sp, r7
 800742e:	bd80      	pop	{r7, pc}

08007430 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007430:	b580      	push	{r7, lr}
 8007432:	b082      	sub	sp, #8
 8007434:	af00      	add	r7, sp, #0
 8007436:	6078      	str	r0, [r7, #4]
 8007438:	460b      	mov	r3, r1
 800743a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 8007442:	78fa      	ldrb	r2, [r7, #3]
 8007444:	4611      	mov	r1, r2
 8007446:	4618      	mov	r0, r3
 8007448:	f7fe fec9 	bl	80061de <USBD_LL_IsoOUTIncomplete>
}
 800744c:	bf00      	nop
 800744e:	3708      	adds	r7, #8
 8007450:	46bd      	mov	sp, r7
 8007452:	bd80      	pop	{r7, pc}

08007454 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007454:	b580      	push	{r7, lr}
 8007456:	b082      	sub	sp, #8
 8007458:	af00      	add	r7, sp, #0
 800745a:	6078      	str	r0, [r7, #4]
 800745c:	460b      	mov	r3, r1
 800745e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 8007466:	78fa      	ldrb	r2, [r7, #3]
 8007468:	4611      	mov	r1, r2
 800746a:	4618      	mov	r0, r3
 800746c:	f7fe fe91 	bl	8006192 <USBD_LL_IsoINIncomplete>
}
 8007470:	bf00      	nop
 8007472:	3708      	adds	r7, #8
 8007474:	46bd      	mov	sp, r7
 8007476:	bd80      	pop	{r7, pc}

08007478 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007478:	b580      	push	{r7, lr}
 800747a:	b082      	sub	sp, #8
 800747c:	af00      	add	r7, sp, #0
 800747e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 8007486:	4618      	mov	r0, r3
 8007488:	f7fe fecf 	bl	800622a <USBD_LL_DevConnected>
}
 800748c:	bf00      	nop
 800748e:	3708      	adds	r7, #8
 8007490:	46bd      	mov	sp, r7
 8007492:	bd80      	pop	{r7, pc}

08007494 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007494:	b580      	push	{r7, lr}
 8007496:	b082      	sub	sp, #8
 8007498:	af00      	add	r7, sp, #0
 800749a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 80074a2:	4618      	mov	r0, r3
 80074a4:	f7fe fecc 	bl	8006240 <USBD_LL_DevDisconnected>
}
 80074a8:	bf00      	nop
 80074aa:	3708      	adds	r7, #8
 80074ac:	46bd      	mov	sp, r7
 80074ae:	bd80      	pop	{r7, pc}

080074b0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80074b0:	b580      	push	{r7, lr}
 80074b2:	b082      	sub	sp, #8
 80074b4:	af00      	add	r7, sp, #0
 80074b6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	781b      	ldrb	r3, [r3, #0]
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d13c      	bne.n	800753a <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 80074c0:	4a20      	ldr	r2, [pc, #128]	@ (8007544 <USBD_LL_Init+0x94>)
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	f8c2 3404 	str.w	r3, [r2, #1028]	@ 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	4a1e      	ldr	r2, [pc, #120]	@ (8007544 <USBD_LL_Init+0x94>)
 80074cc:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80074d0:	4b1c      	ldr	r3, [pc, #112]	@ (8007544 <USBD_LL_Init+0x94>)
 80074d2:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80074d6:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80074d8:	4b1a      	ldr	r3, [pc, #104]	@ (8007544 <USBD_LL_Init+0x94>)
 80074da:	2204      	movs	r2, #4
 80074dc:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80074de:	4b19      	ldr	r3, [pc, #100]	@ (8007544 <USBD_LL_Init+0x94>)
 80074e0:	2202      	movs	r2, #2
 80074e2:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80074e4:	4b17      	ldr	r3, [pc, #92]	@ (8007544 <USBD_LL_Init+0x94>)
 80074e6:	2200      	movs	r2, #0
 80074e8:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80074ea:	4b16      	ldr	r3, [pc, #88]	@ (8007544 <USBD_LL_Init+0x94>)
 80074ec:	2202      	movs	r2, #2
 80074ee:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80074f0:	4b14      	ldr	r3, [pc, #80]	@ (8007544 <USBD_LL_Init+0x94>)
 80074f2:	2200      	movs	r2, #0
 80074f4:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80074f6:	4b13      	ldr	r3, [pc, #76]	@ (8007544 <USBD_LL_Init+0x94>)
 80074f8:	2200      	movs	r2, #0
 80074fa:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80074fc:	4b11      	ldr	r3, [pc, #68]	@ (8007544 <USBD_LL_Init+0x94>)
 80074fe:	2200      	movs	r2, #0
 8007500:	625a      	str	r2, [r3, #36]	@ 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8007502:	4b10      	ldr	r3, [pc, #64]	@ (8007544 <USBD_LL_Init+0x94>)
 8007504:	2200      	movs	r2, #0
 8007506:	62da      	str	r2, [r3, #44]	@ 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8007508:	4b0e      	ldr	r3, [pc, #56]	@ (8007544 <USBD_LL_Init+0x94>)
 800750a:	2200      	movs	r2, #0
 800750c:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800750e:	480d      	ldr	r0, [pc, #52]	@ (8007544 <USBD_LL_Init+0x94>)
 8007510:	f7f9 fc64 	bl	8000ddc <HAL_PCD_Init>
 8007514:	4603      	mov	r3, r0
 8007516:	2b00      	cmp	r3, #0
 8007518:	d001      	beq.n	800751e <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800751a:	f7f9 f88f 	bl	800063c <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800751e:	2180      	movs	r1, #128	@ 0x80
 8007520:	4808      	ldr	r0, [pc, #32]	@ (8007544 <USBD_LL_Init+0x94>)
 8007522:	f7fa fdee 	bl	8002102 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8007526:	2240      	movs	r2, #64	@ 0x40
 8007528:	2100      	movs	r1, #0
 800752a:	4806      	ldr	r0, [pc, #24]	@ (8007544 <USBD_LL_Init+0x94>)
 800752c:	f7fa fda2 	bl	8002074 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8007530:	2280      	movs	r2, #128	@ 0x80
 8007532:	2101      	movs	r1, #1
 8007534:	4803      	ldr	r0, [pc, #12]	@ (8007544 <USBD_LL_Init+0x94>)
 8007536:	f7fa fd9d 	bl	8002074 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800753a:	2300      	movs	r3, #0
}
 800753c:	4618      	mov	r0, r3
 800753e:	3708      	adds	r7, #8
 8007540:	46bd      	mov	sp, r7
 8007542:	bd80      	pop	{r7, pc}
 8007544:	20000658 	.word	0x20000658

08007548 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8007548:	b580      	push	{r7, lr}
 800754a:	b084      	sub	sp, #16
 800754c:	af00      	add	r7, sp, #0
 800754e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007550:	2300      	movs	r3, #0
 8007552:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007554:	2300      	movs	r3, #0
 8007556:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800755e:	4618      	mov	r0, r3
 8007560:	f7f9 fd59 	bl	8001016 <HAL_PCD_Start>
 8007564:	4603      	mov	r3, r0
 8007566:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007568:	7bfb      	ldrb	r3, [r7, #15]
 800756a:	4618      	mov	r0, r3
 800756c:	f000 f962 	bl	8007834 <USBD_Get_USB_Status>
 8007570:	4603      	mov	r3, r0
 8007572:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007574:	7bbb      	ldrb	r3, [r7, #14]
}
 8007576:	4618      	mov	r0, r3
 8007578:	3710      	adds	r7, #16
 800757a:	46bd      	mov	sp, r7
 800757c:	bd80      	pop	{r7, pc}

0800757e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800757e:	b580      	push	{r7, lr}
 8007580:	b084      	sub	sp, #16
 8007582:	af00      	add	r7, sp, #0
 8007584:	6078      	str	r0, [r7, #4]
 8007586:	4608      	mov	r0, r1
 8007588:	4611      	mov	r1, r2
 800758a:	461a      	mov	r2, r3
 800758c:	4603      	mov	r3, r0
 800758e:	70fb      	strb	r3, [r7, #3]
 8007590:	460b      	mov	r3, r1
 8007592:	70bb      	strb	r3, [r7, #2]
 8007594:	4613      	mov	r3, r2
 8007596:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007598:	2300      	movs	r3, #0
 800759a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800759c:	2300      	movs	r3, #0
 800759e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 80075a6:	78bb      	ldrb	r3, [r7, #2]
 80075a8:	883a      	ldrh	r2, [r7, #0]
 80075aa:	78f9      	ldrb	r1, [r7, #3]
 80075ac:	f7fa f93d 	bl	800182a <HAL_PCD_EP_Open>
 80075b0:	4603      	mov	r3, r0
 80075b2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80075b4:	7bfb      	ldrb	r3, [r7, #15]
 80075b6:	4618      	mov	r0, r3
 80075b8:	f000 f93c 	bl	8007834 <USBD_Get_USB_Status>
 80075bc:	4603      	mov	r3, r0
 80075be:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80075c0:	7bbb      	ldrb	r3, [r7, #14]
}
 80075c2:	4618      	mov	r0, r3
 80075c4:	3710      	adds	r7, #16
 80075c6:	46bd      	mov	sp, r7
 80075c8:	bd80      	pop	{r7, pc}

080075ca <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80075ca:	b580      	push	{r7, lr}
 80075cc:	b084      	sub	sp, #16
 80075ce:	af00      	add	r7, sp, #0
 80075d0:	6078      	str	r0, [r7, #4]
 80075d2:	460b      	mov	r3, r1
 80075d4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80075d6:	2300      	movs	r3, #0
 80075d8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80075da:	2300      	movs	r3, #0
 80075dc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 80075e4:	78fa      	ldrb	r2, [r7, #3]
 80075e6:	4611      	mov	r1, r2
 80075e8:	4618      	mov	r0, r3
 80075ea:	f7fa f986 	bl	80018fa <HAL_PCD_EP_Close>
 80075ee:	4603      	mov	r3, r0
 80075f0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80075f2:	7bfb      	ldrb	r3, [r7, #15]
 80075f4:	4618      	mov	r0, r3
 80075f6:	f000 f91d 	bl	8007834 <USBD_Get_USB_Status>
 80075fa:	4603      	mov	r3, r0
 80075fc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80075fe:	7bbb      	ldrb	r3, [r7, #14]
}
 8007600:	4618      	mov	r0, r3
 8007602:	3710      	adds	r7, #16
 8007604:	46bd      	mov	sp, r7
 8007606:	bd80      	pop	{r7, pc}

08007608 <USBD_LL_FlushEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_FlushEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007608:	b580      	push	{r7, lr}
 800760a:	b084      	sub	sp, #16
 800760c:	af00      	add	r7, sp, #0
 800760e:	6078      	str	r0, [r7, #4]
 8007610:	460b      	mov	r3, r1
 8007612:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007614:	2300      	movs	r3, #0
 8007616:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007618:	2300      	movs	r3, #0
 800761a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Flush(pdev->pData, ep_addr);
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 8007622:	78fa      	ldrb	r2, [r7, #3]
 8007624:	4611      	mov	r1, r2
 8007626:	4618      	mov	r0, r3
 8007628:	f7fa fb18 	bl	8001c5c <HAL_PCD_EP_Flush>
 800762c:	4603      	mov	r3, r0
 800762e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007630:	7bfb      	ldrb	r3, [r7, #15]
 8007632:	4618      	mov	r0, r3
 8007634:	f000 f8fe 	bl	8007834 <USBD_Get_USB_Status>
 8007638:	4603      	mov	r3, r0
 800763a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800763c:	7bbb      	ldrb	r3, [r7, #14]
}
 800763e:	4618      	mov	r0, r3
 8007640:	3710      	adds	r7, #16
 8007642:	46bd      	mov	sp, r7
 8007644:	bd80      	pop	{r7, pc}

08007646 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007646:	b580      	push	{r7, lr}
 8007648:	b084      	sub	sp, #16
 800764a:	af00      	add	r7, sp, #0
 800764c:	6078      	str	r0, [r7, #4]
 800764e:	460b      	mov	r3, r1
 8007650:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007652:	2300      	movs	r3, #0
 8007654:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007656:	2300      	movs	r3, #0
 8007658:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 8007660:	78fa      	ldrb	r2, [r7, #3]
 8007662:	4611      	mov	r1, r2
 8007664:	4618      	mov	r0, r3
 8007666:	f7fa fa3f 	bl	8001ae8 <HAL_PCD_EP_SetStall>
 800766a:	4603      	mov	r3, r0
 800766c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800766e:	7bfb      	ldrb	r3, [r7, #15]
 8007670:	4618      	mov	r0, r3
 8007672:	f000 f8df 	bl	8007834 <USBD_Get_USB_Status>
 8007676:	4603      	mov	r3, r0
 8007678:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800767a:	7bbb      	ldrb	r3, [r7, #14]
}
 800767c:	4618      	mov	r0, r3
 800767e:	3710      	adds	r7, #16
 8007680:	46bd      	mov	sp, r7
 8007682:	bd80      	pop	{r7, pc}

08007684 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007684:	b580      	push	{r7, lr}
 8007686:	b084      	sub	sp, #16
 8007688:	af00      	add	r7, sp, #0
 800768a:	6078      	str	r0, [r7, #4]
 800768c:	460b      	mov	r3, r1
 800768e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007690:	2300      	movs	r3, #0
 8007692:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007694:	2300      	movs	r3, #0
 8007696:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800769e:	78fa      	ldrb	r2, [r7, #3]
 80076a0:	4611      	mov	r1, r2
 80076a2:	4618      	mov	r0, r3
 80076a4:	f7fa fa84 	bl	8001bb0 <HAL_PCD_EP_ClrStall>
 80076a8:	4603      	mov	r3, r0
 80076aa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80076ac:	7bfb      	ldrb	r3, [r7, #15]
 80076ae:	4618      	mov	r0, r3
 80076b0:	f000 f8c0 	bl	8007834 <USBD_Get_USB_Status>
 80076b4:	4603      	mov	r3, r0
 80076b6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80076b8:	7bbb      	ldrb	r3, [r7, #14]
}
 80076ba:	4618      	mov	r0, r3
 80076bc:	3710      	adds	r7, #16
 80076be:	46bd      	mov	sp, r7
 80076c0:	bd80      	pop	{r7, pc}

080076c2 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80076c2:	b480      	push	{r7}
 80076c4:	b085      	sub	sp, #20
 80076c6:	af00      	add	r7, sp, #0
 80076c8:	6078      	str	r0, [r7, #4]
 80076ca:	460b      	mov	r3, r1
 80076cc:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 80076d4:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80076d6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80076da:	2b00      	cmp	r3, #0
 80076dc:	da0b      	bge.n	80076f6 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80076de:	78fb      	ldrb	r3, [r7, #3]
 80076e0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80076e4:	68f9      	ldr	r1, [r7, #12]
 80076e6:	4613      	mov	r3, r2
 80076e8:	00db      	lsls	r3, r3, #3
 80076ea:	1a9b      	subs	r3, r3, r2
 80076ec:	009b      	lsls	r3, r3, #2
 80076ee:	440b      	add	r3, r1
 80076f0:	333e      	adds	r3, #62	@ 0x3e
 80076f2:	781b      	ldrb	r3, [r3, #0]
 80076f4:	e00b      	b.n	800770e <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80076f6:	78fb      	ldrb	r3, [r7, #3]
 80076f8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80076fc:	68f9      	ldr	r1, [r7, #12]
 80076fe:	4613      	mov	r3, r2
 8007700:	00db      	lsls	r3, r3, #3
 8007702:	1a9b      	subs	r3, r3, r2
 8007704:	009b      	lsls	r3, r3, #2
 8007706:	440b      	add	r3, r1
 8007708:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800770c:	781b      	ldrb	r3, [r3, #0]
  }
}
 800770e:	4618      	mov	r0, r3
 8007710:	3714      	adds	r7, #20
 8007712:	46bd      	mov	sp, r7
 8007714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007718:	4770      	bx	lr

0800771a <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800771a:	b580      	push	{r7, lr}
 800771c:	b084      	sub	sp, #16
 800771e:	af00      	add	r7, sp, #0
 8007720:	6078      	str	r0, [r7, #4]
 8007722:	460b      	mov	r3, r1
 8007724:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007726:	2300      	movs	r3, #0
 8007728:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800772a:	2300      	movs	r3, #0
 800772c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 8007734:	78fa      	ldrb	r2, [r7, #3]
 8007736:	4611      	mov	r1, r2
 8007738:	4618      	mov	r0, r3
 800773a:	f7fa f851 	bl	80017e0 <HAL_PCD_SetAddress>
 800773e:	4603      	mov	r3, r0
 8007740:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007742:	7bfb      	ldrb	r3, [r7, #15]
 8007744:	4618      	mov	r0, r3
 8007746:	f000 f875 	bl	8007834 <USBD_Get_USB_Status>
 800774a:	4603      	mov	r3, r0
 800774c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800774e:	7bbb      	ldrb	r3, [r7, #14]
}
 8007750:	4618      	mov	r0, r3
 8007752:	3710      	adds	r7, #16
 8007754:	46bd      	mov	sp, r7
 8007756:	bd80      	pop	{r7, pc}

08007758 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007758:	b580      	push	{r7, lr}
 800775a:	b086      	sub	sp, #24
 800775c:	af00      	add	r7, sp, #0
 800775e:	60f8      	str	r0, [r7, #12]
 8007760:	607a      	str	r2, [r7, #4]
 8007762:	603b      	str	r3, [r7, #0]
 8007764:	460b      	mov	r3, r1
 8007766:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007768:	2300      	movs	r3, #0
 800776a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800776c:	2300      	movs	r3, #0
 800776e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 8007776:	7af9      	ldrb	r1, [r7, #11]
 8007778:	683b      	ldr	r3, [r7, #0]
 800777a:	687a      	ldr	r2, [r7, #4]
 800777c:	f7fa f96a 	bl	8001a54 <HAL_PCD_EP_Transmit>
 8007780:	4603      	mov	r3, r0
 8007782:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007784:	7dfb      	ldrb	r3, [r7, #23]
 8007786:	4618      	mov	r0, r3
 8007788:	f000 f854 	bl	8007834 <USBD_Get_USB_Status>
 800778c:	4603      	mov	r3, r0
 800778e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007790:	7dbb      	ldrb	r3, [r7, #22]
}
 8007792:	4618      	mov	r0, r3
 8007794:	3718      	adds	r7, #24
 8007796:	46bd      	mov	sp, r7
 8007798:	bd80      	pop	{r7, pc}

0800779a <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800779a:	b580      	push	{r7, lr}
 800779c:	b086      	sub	sp, #24
 800779e:	af00      	add	r7, sp, #0
 80077a0:	60f8      	str	r0, [r7, #12]
 80077a2:	607a      	str	r2, [r7, #4]
 80077a4:	603b      	str	r3, [r7, #0]
 80077a6:	460b      	mov	r3, r1
 80077a8:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80077aa:	2300      	movs	r3, #0
 80077ac:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80077ae:	2300      	movs	r3, #0
 80077b0:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 80077b8:	7af9      	ldrb	r1, [r7, #11]
 80077ba:	683b      	ldr	r3, [r7, #0]
 80077bc:	687a      	ldr	r2, [r7, #4]
 80077be:	f7fa f8e6 	bl	800198e <HAL_PCD_EP_Receive>
 80077c2:	4603      	mov	r3, r0
 80077c4:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80077c6:	7dfb      	ldrb	r3, [r7, #23]
 80077c8:	4618      	mov	r0, r3
 80077ca:	f000 f833 	bl	8007834 <USBD_Get_USB_Status>
 80077ce:	4603      	mov	r3, r0
 80077d0:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80077d2:	7dbb      	ldrb	r3, [r7, #22]
}
 80077d4:	4618      	mov	r0, r3
 80077d6:	3718      	adds	r7, #24
 80077d8:	46bd      	mov	sp, r7
 80077da:	bd80      	pop	{r7, pc}

080077dc <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80077dc:	b580      	push	{r7, lr}
 80077de:	b082      	sub	sp, #8
 80077e0:	af00      	add	r7, sp, #0
 80077e2:	6078      	str	r0, [r7, #4]
 80077e4:	460b      	mov	r3, r1
 80077e6:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 80077ee:	78fa      	ldrb	r2, [r7, #3]
 80077f0:	4611      	mov	r1, r2
 80077f2:	4618      	mov	r0, r3
 80077f4:	f7fa f916 	bl	8001a24 <HAL_PCD_EP_GetRxCount>
 80077f8:	4603      	mov	r3, r0
}
 80077fa:	4618      	mov	r0, r3
 80077fc:	3708      	adds	r7, #8
 80077fe:	46bd      	mov	sp, r7
 8007800:	bd80      	pop	{r7, pc}
	...

08007804 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8007804:	b480      	push	{r7}
 8007806:	b083      	sub	sp, #12
 8007808:	af00      	add	r7, sp, #0
 800780a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_MSC_BOT_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800780c:	4b03      	ldr	r3, [pc, #12]	@ (800781c <USBD_static_malloc+0x18>)
}
 800780e:	4618      	mov	r0, r3
 8007810:	370c      	adds	r7, #12
 8007812:	46bd      	mov	sp, r7
 8007814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007818:	4770      	bx	lr
 800781a:	bf00      	nop
 800781c:	20000a60 	.word	0x20000a60

08007820 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8007820:	b480      	push	{r7}
 8007822:	b083      	sub	sp, #12
 8007824:	af00      	add	r7, sp, #0
 8007826:	6078      	str	r0, [r7, #4]

}
 8007828:	bf00      	nop
 800782a:	370c      	adds	r7, #12
 800782c:	46bd      	mov	sp, r7
 800782e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007832:	4770      	bx	lr

08007834 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8007834:	b480      	push	{r7}
 8007836:	b085      	sub	sp, #20
 8007838:	af00      	add	r7, sp, #0
 800783a:	4603      	mov	r3, r0
 800783c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800783e:	2300      	movs	r3, #0
 8007840:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8007842:	79fb      	ldrb	r3, [r7, #7]
 8007844:	2b03      	cmp	r3, #3
 8007846:	d817      	bhi.n	8007878 <USBD_Get_USB_Status+0x44>
 8007848:	a201      	add	r2, pc, #4	@ (adr r2, 8007850 <USBD_Get_USB_Status+0x1c>)
 800784a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800784e:	bf00      	nop
 8007850:	08007861 	.word	0x08007861
 8007854:	08007867 	.word	0x08007867
 8007858:	0800786d 	.word	0x0800786d
 800785c:	08007873 	.word	0x08007873
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8007860:	2300      	movs	r3, #0
 8007862:	73fb      	strb	r3, [r7, #15]
    break;
 8007864:	e00b      	b.n	800787e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8007866:	2303      	movs	r3, #3
 8007868:	73fb      	strb	r3, [r7, #15]
    break;
 800786a:	e008      	b.n	800787e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800786c:	2301      	movs	r3, #1
 800786e:	73fb      	strb	r3, [r7, #15]
    break;
 8007870:	e005      	b.n	800787e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8007872:	2303      	movs	r3, #3
 8007874:	73fb      	strb	r3, [r7, #15]
    break;
 8007876:	e002      	b.n	800787e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8007878:	2303      	movs	r3, #3
 800787a:	73fb      	strb	r3, [r7, #15]
    break;
 800787c:	bf00      	nop
  }
  return usb_status;
 800787e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007880:	4618      	mov	r0, r3
 8007882:	3714      	adds	r7, #20
 8007884:	46bd      	mov	sp, r7
 8007886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800788a:	4770      	bx	lr

0800788c <memset>:
 800788c:	4402      	add	r2, r0
 800788e:	4603      	mov	r3, r0
 8007890:	4293      	cmp	r3, r2
 8007892:	d100      	bne.n	8007896 <memset+0xa>
 8007894:	4770      	bx	lr
 8007896:	f803 1b01 	strb.w	r1, [r3], #1
 800789a:	e7f9      	b.n	8007890 <memset+0x4>

0800789c <__libc_init_array>:
 800789c:	b570      	push	{r4, r5, r6, lr}
 800789e:	4d0d      	ldr	r5, [pc, #52]	@ (80078d4 <__libc_init_array+0x38>)
 80078a0:	4c0d      	ldr	r4, [pc, #52]	@ (80078d8 <__libc_init_array+0x3c>)
 80078a2:	1b64      	subs	r4, r4, r5
 80078a4:	10a4      	asrs	r4, r4, #2
 80078a6:	2600      	movs	r6, #0
 80078a8:	42a6      	cmp	r6, r4
 80078aa:	d109      	bne.n	80078c0 <__libc_init_array+0x24>
 80078ac:	4d0b      	ldr	r5, [pc, #44]	@ (80078dc <__libc_init_array+0x40>)
 80078ae:	4c0c      	ldr	r4, [pc, #48]	@ (80078e0 <__libc_init_array+0x44>)
 80078b0:	f000 f818 	bl	80078e4 <_init>
 80078b4:	1b64      	subs	r4, r4, r5
 80078b6:	10a4      	asrs	r4, r4, #2
 80078b8:	2600      	movs	r6, #0
 80078ba:	42a6      	cmp	r6, r4
 80078bc:	d105      	bne.n	80078ca <__libc_init_array+0x2e>
 80078be:	bd70      	pop	{r4, r5, r6, pc}
 80078c0:	f855 3b04 	ldr.w	r3, [r5], #4
 80078c4:	4798      	blx	r3
 80078c6:	3601      	adds	r6, #1
 80078c8:	e7ee      	b.n	80078a8 <__libc_init_array+0xc>
 80078ca:	f855 3b04 	ldr.w	r3, [r5], #4
 80078ce:	4798      	blx	r3
 80078d0:	3601      	adds	r6, #1
 80078d2:	e7f2      	b.n	80078ba <__libc_init_array+0x1e>
 80078d4:	0800797c 	.word	0x0800797c
 80078d8:	0800797c 	.word	0x0800797c
 80078dc:	0800797c 	.word	0x0800797c
 80078e0:	08007980 	.word	0x08007980

080078e4 <_init>:
 80078e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80078e6:	bf00      	nop
 80078e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80078ea:	bc08      	pop	{r3}
 80078ec:	469e      	mov	lr, r3
 80078ee:	4770      	bx	lr

080078f0 <_fini>:
 80078f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80078f2:	bf00      	nop
 80078f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80078f6:	bc08      	pop	{r3}
 80078f8:	469e      	mov	lr, r3
 80078fa:	4770      	bx	lr
