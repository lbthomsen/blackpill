
pwm_ic.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000593c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003ec  08005ae0  08005ae0  00015ae0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005ecc  08005ecc  000202dc  2**0
                  CONTENTS
  4 .ARM          00000008  08005ecc  08005ecc  00015ecc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005ed4  08005ed4  000202dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005ed4  08005ed4  00015ed4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005ed8  08005ed8  00015ed8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002dc  20000000  08005edc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000258  200002dc  080061b8  000202dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000534  080061b8  00020534  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000202dc  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002030c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000ff48  00000000  00000000  0002034f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001d84  00000000  00000000  00030297  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_loclists 00008379  00000000  00000000  0003201b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000bd8  00000000  00000000  0003a398  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000943  00000000  00000000  0003af70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00016f7d  00000000  00000000  0003b8b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00011d66  00000000  00000000  00052830  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    0008f654  00000000  00000000  00064596  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00003070  00000000  00000000  000f3bec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000004d  00000000  00000000  000f6c5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200002dc 	.word	0x200002dc
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08005ac4 	.word	0x08005ac4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200002e0 	.word	0x200002e0
 80001dc:	08005ac4 	.word	0x08005ac4

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_uldivmod>:
 8000bb8:	b953      	cbnz	r3, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bba:	b94a      	cbnz	r2, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bbc:	2900      	cmp	r1, #0
 8000bbe:	bf08      	it	eq
 8000bc0:	2800      	cmpeq	r0, #0
 8000bc2:	bf1c      	itt	ne
 8000bc4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000bc8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000bcc:	f000 b970 	b.w	8000eb0 <__aeabi_idiv0>
 8000bd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bd8:	f000 f806 	bl	8000be8 <__udivmoddi4>
 8000bdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000be0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000be4:	b004      	add	sp, #16
 8000be6:	4770      	bx	lr

08000be8 <__udivmoddi4>:
 8000be8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bec:	9e08      	ldr	r6, [sp, #32]
 8000bee:	460d      	mov	r5, r1
 8000bf0:	4604      	mov	r4, r0
 8000bf2:	460f      	mov	r7, r1
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d14a      	bne.n	8000c8e <__udivmoddi4+0xa6>
 8000bf8:	428a      	cmp	r2, r1
 8000bfa:	4694      	mov	ip, r2
 8000bfc:	d965      	bls.n	8000cca <__udivmoddi4+0xe2>
 8000bfe:	fab2 f382 	clz	r3, r2
 8000c02:	b143      	cbz	r3, 8000c16 <__udivmoddi4+0x2e>
 8000c04:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c08:	f1c3 0220 	rsb	r2, r3, #32
 8000c0c:	409f      	lsls	r7, r3
 8000c0e:	fa20 f202 	lsr.w	r2, r0, r2
 8000c12:	4317      	orrs	r7, r2
 8000c14:	409c      	lsls	r4, r3
 8000c16:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c1a:	fa1f f58c 	uxth.w	r5, ip
 8000c1e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c22:	0c22      	lsrs	r2, r4, #16
 8000c24:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c28:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c2c:	fb01 f005 	mul.w	r0, r1, r5
 8000c30:	4290      	cmp	r0, r2
 8000c32:	d90a      	bls.n	8000c4a <__udivmoddi4+0x62>
 8000c34:	eb1c 0202 	adds.w	r2, ip, r2
 8000c38:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000c3c:	f080 811c 	bcs.w	8000e78 <__udivmoddi4+0x290>
 8000c40:	4290      	cmp	r0, r2
 8000c42:	f240 8119 	bls.w	8000e78 <__udivmoddi4+0x290>
 8000c46:	3902      	subs	r1, #2
 8000c48:	4462      	add	r2, ip
 8000c4a:	1a12      	subs	r2, r2, r0
 8000c4c:	b2a4      	uxth	r4, r4
 8000c4e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c52:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c56:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c5a:	fb00 f505 	mul.w	r5, r0, r5
 8000c5e:	42a5      	cmp	r5, r4
 8000c60:	d90a      	bls.n	8000c78 <__udivmoddi4+0x90>
 8000c62:	eb1c 0404 	adds.w	r4, ip, r4
 8000c66:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000c6a:	f080 8107 	bcs.w	8000e7c <__udivmoddi4+0x294>
 8000c6e:	42a5      	cmp	r5, r4
 8000c70:	f240 8104 	bls.w	8000e7c <__udivmoddi4+0x294>
 8000c74:	4464      	add	r4, ip
 8000c76:	3802      	subs	r0, #2
 8000c78:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c7c:	1b64      	subs	r4, r4, r5
 8000c7e:	2100      	movs	r1, #0
 8000c80:	b11e      	cbz	r6, 8000c8a <__udivmoddi4+0xa2>
 8000c82:	40dc      	lsrs	r4, r3
 8000c84:	2300      	movs	r3, #0
 8000c86:	e9c6 4300 	strd	r4, r3, [r6]
 8000c8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c8e:	428b      	cmp	r3, r1
 8000c90:	d908      	bls.n	8000ca4 <__udivmoddi4+0xbc>
 8000c92:	2e00      	cmp	r6, #0
 8000c94:	f000 80ed 	beq.w	8000e72 <__udivmoddi4+0x28a>
 8000c98:	2100      	movs	r1, #0
 8000c9a:	e9c6 0500 	strd	r0, r5, [r6]
 8000c9e:	4608      	mov	r0, r1
 8000ca0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ca4:	fab3 f183 	clz	r1, r3
 8000ca8:	2900      	cmp	r1, #0
 8000caa:	d149      	bne.n	8000d40 <__udivmoddi4+0x158>
 8000cac:	42ab      	cmp	r3, r5
 8000cae:	d302      	bcc.n	8000cb6 <__udivmoddi4+0xce>
 8000cb0:	4282      	cmp	r2, r0
 8000cb2:	f200 80f8 	bhi.w	8000ea6 <__udivmoddi4+0x2be>
 8000cb6:	1a84      	subs	r4, r0, r2
 8000cb8:	eb65 0203 	sbc.w	r2, r5, r3
 8000cbc:	2001      	movs	r0, #1
 8000cbe:	4617      	mov	r7, r2
 8000cc0:	2e00      	cmp	r6, #0
 8000cc2:	d0e2      	beq.n	8000c8a <__udivmoddi4+0xa2>
 8000cc4:	e9c6 4700 	strd	r4, r7, [r6]
 8000cc8:	e7df      	b.n	8000c8a <__udivmoddi4+0xa2>
 8000cca:	b902      	cbnz	r2, 8000cce <__udivmoddi4+0xe6>
 8000ccc:	deff      	udf	#255	; 0xff
 8000cce:	fab2 f382 	clz	r3, r2
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	f040 8090 	bne.w	8000df8 <__udivmoddi4+0x210>
 8000cd8:	1a8a      	subs	r2, r1, r2
 8000cda:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cde:	fa1f fe8c 	uxth.w	lr, ip
 8000ce2:	2101      	movs	r1, #1
 8000ce4:	fbb2 f5f7 	udiv	r5, r2, r7
 8000ce8:	fb07 2015 	mls	r0, r7, r5, r2
 8000cec:	0c22      	lsrs	r2, r4, #16
 8000cee:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000cf2:	fb0e f005 	mul.w	r0, lr, r5
 8000cf6:	4290      	cmp	r0, r2
 8000cf8:	d908      	bls.n	8000d0c <__udivmoddi4+0x124>
 8000cfa:	eb1c 0202 	adds.w	r2, ip, r2
 8000cfe:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000d02:	d202      	bcs.n	8000d0a <__udivmoddi4+0x122>
 8000d04:	4290      	cmp	r0, r2
 8000d06:	f200 80cb 	bhi.w	8000ea0 <__udivmoddi4+0x2b8>
 8000d0a:	4645      	mov	r5, r8
 8000d0c:	1a12      	subs	r2, r2, r0
 8000d0e:	b2a4      	uxth	r4, r4
 8000d10:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d14:	fb07 2210 	mls	r2, r7, r0, r2
 8000d18:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d1c:	fb0e fe00 	mul.w	lr, lr, r0
 8000d20:	45a6      	cmp	lr, r4
 8000d22:	d908      	bls.n	8000d36 <__udivmoddi4+0x14e>
 8000d24:	eb1c 0404 	adds.w	r4, ip, r4
 8000d28:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000d2c:	d202      	bcs.n	8000d34 <__udivmoddi4+0x14c>
 8000d2e:	45a6      	cmp	lr, r4
 8000d30:	f200 80bb 	bhi.w	8000eaa <__udivmoddi4+0x2c2>
 8000d34:	4610      	mov	r0, r2
 8000d36:	eba4 040e 	sub.w	r4, r4, lr
 8000d3a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d3e:	e79f      	b.n	8000c80 <__udivmoddi4+0x98>
 8000d40:	f1c1 0720 	rsb	r7, r1, #32
 8000d44:	408b      	lsls	r3, r1
 8000d46:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d4a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d4e:	fa05 f401 	lsl.w	r4, r5, r1
 8000d52:	fa20 f307 	lsr.w	r3, r0, r7
 8000d56:	40fd      	lsrs	r5, r7
 8000d58:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d5c:	4323      	orrs	r3, r4
 8000d5e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000d62:	fa1f fe8c 	uxth.w	lr, ip
 8000d66:	fb09 5518 	mls	r5, r9, r8, r5
 8000d6a:	0c1c      	lsrs	r4, r3, #16
 8000d6c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d70:	fb08 f50e 	mul.w	r5, r8, lr
 8000d74:	42a5      	cmp	r5, r4
 8000d76:	fa02 f201 	lsl.w	r2, r2, r1
 8000d7a:	fa00 f001 	lsl.w	r0, r0, r1
 8000d7e:	d90b      	bls.n	8000d98 <__udivmoddi4+0x1b0>
 8000d80:	eb1c 0404 	adds.w	r4, ip, r4
 8000d84:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000d88:	f080 8088 	bcs.w	8000e9c <__udivmoddi4+0x2b4>
 8000d8c:	42a5      	cmp	r5, r4
 8000d8e:	f240 8085 	bls.w	8000e9c <__udivmoddi4+0x2b4>
 8000d92:	f1a8 0802 	sub.w	r8, r8, #2
 8000d96:	4464      	add	r4, ip
 8000d98:	1b64      	subs	r4, r4, r5
 8000d9a:	b29d      	uxth	r5, r3
 8000d9c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000da0:	fb09 4413 	mls	r4, r9, r3, r4
 8000da4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000da8:	fb03 fe0e 	mul.w	lr, r3, lr
 8000dac:	45a6      	cmp	lr, r4
 8000dae:	d908      	bls.n	8000dc2 <__udivmoddi4+0x1da>
 8000db0:	eb1c 0404 	adds.w	r4, ip, r4
 8000db4:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000db8:	d26c      	bcs.n	8000e94 <__udivmoddi4+0x2ac>
 8000dba:	45a6      	cmp	lr, r4
 8000dbc:	d96a      	bls.n	8000e94 <__udivmoddi4+0x2ac>
 8000dbe:	3b02      	subs	r3, #2
 8000dc0:	4464      	add	r4, ip
 8000dc2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000dc6:	fba3 9502 	umull	r9, r5, r3, r2
 8000dca:	eba4 040e 	sub.w	r4, r4, lr
 8000dce:	42ac      	cmp	r4, r5
 8000dd0:	46c8      	mov	r8, r9
 8000dd2:	46ae      	mov	lr, r5
 8000dd4:	d356      	bcc.n	8000e84 <__udivmoddi4+0x29c>
 8000dd6:	d053      	beq.n	8000e80 <__udivmoddi4+0x298>
 8000dd8:	b156      	cbz	r6, 8000df0 <__udivmoddi4+0x208>
 8000dda:	ebb0 0208 	subs.w	r2, r0, r8
 8000dde:	eb64 040e 	sbc.w	r4, r4, lr
 8000de2:	fa04 f707 	lsl.w	r7, r4, r7
 8000de6:	40ca      	lsrs	r2, r1
 8000de8:	40cc      	lsrs	r4, r1
 8000dea:	4317      	orrs	r7, r2
 8000dec:	e9c6 7400 	strd	r7, r4, [r6]
 8000df0:	4618      	mov	r0, r3
 8000df2:	2100      	movs	r1, #0
 8000df4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000df8:	f1c3 0120 	rsb	r1, r3, #32
 8000dfc:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e00:	fa20 f201 	lsr.w	r2, r0, r1
 8000e04:	fa25 f101 	lsr.w	r1, r5, r1
 8000e08:	409d      	lsls	r5, r3
 8000e0a:	432a      	orrs	r2, r5
 8000e0c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e10:	fa1f fe8c 	uxth.w	lr, ip
 8000e14:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e18:	fb07 1510 	mls	r5, r7, r0, r1
 8000e1c:	0c11      	lsrs	r1, r2, #16
 8000e1e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e22:	fb00 f50e 	mul.w	r5, r0, lr
 8000e26:	428d      	cmp	r5, r1
 8000e28:	fa04 f403 	lsl.w	r4, r4, r3
 8000e2c:	d908      	bls.n	8000e40 <__udivmoddi4+0x258>
 8000e2e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e32:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000e36:	d22f      	bcs.n	8000e98 <__udivmoddi4+0x2b0>
 8000e38:	428d      	cmp	r5, r1
 8000e3a:	d92d      	bls.n	8000e98 <__udivmoddi4+0x2b0>
 8000e3c:	3802      	subs	r0, #2
 8000e3e:	4461      	add	r1, ip
 8000e40:	1b49      	subs	r1, r1, r5
 8000e42:	b292      	uxth	r2, r2
 8000e44:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e48:	fb07 1115 	mls	r1, r7, r5, r1
 8000e4c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e50:	fb05 f10e 	mul.w	r1, r5, lr
 8000e54:	4291      	cmp	r1, r2
 8000e56:	d908      	bls.n	8000e6a <__udivmoddi4+0x282>
 8000e58:	eb1c 0202 	adds.w	r2, ip, r2
 8000e5c:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000e60:	d216      	bcs.n	8000e90 <__udivmoddi4+0x2a8>
 8000e62:	4291      	cmp	r1, r2
 8000e64:	d914      	bls.n	8000e90 <__udivmoddi4+0x2a8>
 8000e66:	3d02      	subs	r5, #2
 8000e68:	4462      	add	r2, ip
 8000e6a:	1a52      	subs	r2, r2, r1
 8000e6c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000e70:	e738      	b.n	8000ce4 <__udivmoddi4+0xfc>
 8000e72:	4631      	mov	r1, r6
 8000e74:	4630      	mov	r0, r6
 8000e76:	e708      	b.n	8000c8a <__udivmoddi4+0xa2>
 8000e78:	4639      	mov	r1, r7
 8000e7a:	e6e6      	b.n	8000c4a <__udivmoddi4+0x62>
 8000e7c:	4610      	mov	r0, r2
 8000e7e:	e6fb      	b.n	8000c78 <__udivmoddi4+0x90>
 8000e80:	4548      	cmp	r0, r9
 8000e82:	d2a9      	bcs.n	8000dd8 <__udivmoddi4+0x1f0>
 8000e84:	ebb9 0802 	subs.w	r8, r9, r2
 8000e88:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000e8c:	3b01      	subs	r3, #1
 8000e8e:	e7a3      	b.n	8000dd8 <__udivmoddi4+0x1f0>
 8000e90:	4645      	mov	r5, r8
 8000e92:	e7ea      	b.n	8000e6a <__udivmoddi4+0x282>
 8000e94:	462b      	mov	r3, r5
 8000e96:	e794      	b.n	8000dc2 <__udivmoddi4+0x1da>
 8000e98:	4640      	mov	r0, r8
 8000e9a:	e7d1      	b.n	8000e40 <__udivmoddi4+0x258>
 8000e9c:	46d0      	mov	r8, sl
 8000e9e:	e77b      	b.n	8000d98 <__udivmoddi4+0x1b0>
 8000ea0:	3d02      	subs	r5, #2
 8000ea2:	4462      	add	r2, ip
 8000ea4:	e732      	b.n	8000d0c <__udivmoddi4+0x124>
 8000ea6:	4608      	mov	r0, r1
 8000ea8:	e70a      	b.n	8000cc0 <__udivmoddi4+0xd8>
 8000eaa:	4464      	add	r4, ip
 8000eac:	3802      	subs	r0, #2
 8000eae:	e742      	b.n	8000d36 <__udivmoddi4+0x14e>

08000eb0 <__aeabi_idiv0>:
 8000eb0:	4770      	bx	lr
 8000eb2:	bf00      	nop

08000eb4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000eb4:	b530      	push	{r4, r5, lr}
 8000eb6:	b08b      	sub	sp, #44	; 0x2c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eb8:	2400      	movs	r4, #0
 8000eba:	9405      	str	r4, [sp, #20]
 8000ebc:	9406      	str	r4, [sp, #24]
 8000ebe:	9407      	str	r4, [sp, #28]
 8000ec0:	9408      	str	r4, [sp, #32]
 8000ec2:	9409      	str	r4, [sp, #36]	; 0x24

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ec4:	9401      	str	r4, [sp, #4]
 8000ec6:	4b1e      	ldr	r3, [pc, #120]	; (8000f40 <MX_GPIO_Init+0x8c>)
 8000ec8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000eca:	f042 0204 	orr.w	r2, r2, #4
 8000ece:	631a      	str	r2, [r3, #48]	; 0x30
 8000ed0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000ed2:	f002 0204 	and.w	r2, r2, #4
 8000ed6:	9201      	str	r2, [sp, #4]
 8000ed8:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000eda:	9402      	str	r4, [sp, #8]
 8000edc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000ede:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000ee2:	631a      	str	r2, [r3, #48]	; 0x30
 8000ee4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000ee6:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8000eea:	9202      	str	r2, [sp, #8]
 8000eec:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eee:	9403      	str	r4, [sp, #12]
 8000ef0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000ef2:	f042 0201 	orr.w	r2, r2, #1
 8000ef6:	631a      	str	r2, [r3, #48]	; 0x30
 8000ef8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000efa:	f002 0201 	and.w	r2, r2, #1
 8000efe:	9203      	str	r2, [sp, #12]
 8000f00:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f02:	9404      	str	r4, [sp, #16]
 8000f04:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000f06:	f042 0202 	orr.w	r2, r2, #2
 8000f0a:	631a      	str	r2, [r3, #48]	; 0x30
 8000f0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f0e:	f003 0302 	and.w	r3, r3, #2
 8000f12:	9304      	str	r3, [sp, #16]
 8000f14:	9b04      	ldr	r3, [sp, #16]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8000f16:	4d0b      	ldr	r5, [pc, #44]	; (8000f44 <MX_GPIO_Init+0x90>)
 8000f18:	2201      	movs	r2, #1
 8000f1a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f1e:	4628      	mov	r0, r5
 8000f20:	f000 fd26 	bl	8001970 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000f24:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f28:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000f2a:	2311      	movs	r3, #17
 8000f2c:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f2e:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f30:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000f32:	a905      	add	r1, sp, #20
 8000f34:	4628      	mov	r0, r5
 8000f36:	f000 fc37 	bl	80017a8 <HAL_GPIO_Init>

}
 8000f3a:	b00b      	add	sp, #44	; 0x2c
 8000f3c:	bd30      	pop	{r4, r5, pc}
 8000f3e:	bf00      	nop
 8000f40:	40023800 	.word	0x40023800
 8000f44:	40020800 	.word	0x40020800

08000f48 <_write>:
	if (fd == 1 || fd == 2) {
 8000f48:	3801      	subs	r0, #1
 8000f4a:	2801      	cmp	r0, #1
 8000f4c:	d80a      	bhi.n	8000f64 <_write+0x1c>
int _write(int fd, char *ptr, int len) {
 8000f4e:	b510      	push	{r4, lr}
 8000f50:	4614      	mov	r4, r2
		hstatus = HAL_UART_Transmit(&huart1, (uint8_t*) ptr, len,
 8000f52:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000f56:	b292      	uxth	r2, r2
 8000f58:	4805      	ldr	r0, [pc, #20]	; (8000f70 <_write+0x28>)
 8000f5a:	f002 f83a 	bl	8002fd2 <HAL_UART_Transmit>
		if (hstatus == HAL_OK)
 8000f5e:	b920      	cbnz	r0, 8000f6a <_write+0x22>
			return len;
 8000f60:	4620      	mov	r0, r4
}
 8000f62:	bd10      	pop	{r4, pc}
	return -1;
 8000f64:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 8000f68:	4770      	bx	lr
			return -1;
 8000f6a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000f6e:	e7f8      	b.n	8000f62 <_write+0x1a>
 8000f70:	20000398 	.word	0x20000398

08000f74 <HAL_TIM_IC_CaptureCallback>:
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) {
 8000f74:	b538      	push	{r3, r4, r5, lr}
	if (htim->Instance == TIM2) {
 8000f76:	6803      	ldr	r3, [r0, #0]
 8000f78:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000f7c:	d000      	beq.n	8000f80 <HAL_TIM_IC_CaptureCallback+0xc>
}
 8000f7e:	bd38      	pop	{r3, r4, r5, pc}
 8000f80:	4604      	mov	r4, r0
		cnt_full = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1) + 2;
 8000f82:	2100      	movs	r1, #0
 8000f84:	f001 f930 	bl	80021e8 <HAL_TIM_ReadCapturedValue>
 8000f88:	3002      	adds	r0, #2
 8000f8a:	4d11      	ldr	r5, [pc, #68]	; (8000fd0 <HAL_TIM_IC_CaptureCallback+0x5c>)
 8000f8c:	6028      	str	r0, [r5, #0]
		cnt_high = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2) + 2;
 8000f8e:	2104      	movs	r1, #4
 8000f90:	4620      	mov	r0, r4
 8000f92:	f001 f929 	bl	80021e8 <HAL_TIM_ReadCapturedValue>
 8000f96:	3002      	adds	r0, #2
 8000f98:	4b0e      	ldr	r3, [pc, #56]	; (8000fd4 <HAL_TIM_IC_CaptureCallback+0x60>)
 8000f9a:	6018      	str	r0, [r3, #0]
		freq = (float) TIMER_CLOCK_FREQ / (cnt_full);
 8000f9c:	ed95 7a00 	vldr	s14, [r5]
 8000fa0:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8000fa4:	eddf 6a0c 	vldr	s13, [pc, #48]	; 8000fd8 <HAL_TIM_IC_CaptureCallback+0x64>
 8000fa8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000fac:	4b0b      	ldr	r3, [pc, #44]	; (8000fdc <HAL_TIM_IC_CaptureCallback+0x68>)
 8000fae:	edc3 7a00 	vstr	s15, [r3]
		duty = (float) 100 * cnt_high / cnt_full;
 8000fb2:	ee07 0a90 	vmov	s15, r0
 8000fb6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000fba:	eddf 6a09 	vldr	s13, [pc, #36]	; 8000fe0 <HAL_TIM_IC_CaptureCallback+0x6c>
 8000fbe:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8000fc2:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8000fc6:	4b07      	ldr	r3, [pc, #28]	; (8000fe4 <HAL_TIM_IC_CaptureCallback+0x70>)
 8000fc8:	edc3 6a00 	vstr	s13, [r3]
}
 8000fcc:	e7d7      	b.n	8000f7e <HAL_TIM_IC_CaptureCallback+0xa>
 8000fce:	bf00      	nop
 8000fd0:	200002f8 	.word	0x200002f8
 8000fd4:	200002fc 	.word	0x200002fc
 8000fd8:	4cbebc20 	.word	0x4cbebc20
 8000fdc:	20000304 	.word	0x20000304
 8000fe0:	42c80000 	.word	0x42c80000
 8000fe4:	20000300 	.word	0x20000300

08000fe8 <Error_Handler>:
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000fe8:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000fea:	e7fe      	b.n	8000fea <Error_Handler+0x2>

08000fec <MX_TIM4_Init>:
{
 8000fec:	b500      	push	{lr}
 8000fee:	b08f      	sub	sp, #60	; 0x3c
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	930a      	str	r3, [sp, #40]	; 0x28
 8000ff4:	930b      	str	r3, [sp, #44]	; 0x2c
 8000ff6:	930c      	str	r3, [sp, #48]	; 0x30
 8000ff8:	930d      	str	r3, [sp, #52]	; 0x34
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ffa:	9308      	str	r3, [sp, #32]
 8000ffc:	9309      	str	r3, [sp, #36]	; 0x24
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000ffe:	9301      	str	r3, [sp, #4]
 8001000:	9302      	str	r3, [sp, #8]
 8001002:	9303      	str	r3, [sp, #12]
 8001004:	9304      	str	r3, [sp, #16]
 8001006:	9305      	str	r3, [sp, #20]
 8001008:	9306      	str	r3, [sp, #24]
 800100a:	9307      	str	r3, [sp, #28]
  htim4.Instance = TIM4;
 800100c:	481f      	ldr	r0, [pc, #124]	; (800108c <MX_TIM4_Init+0xa0>)
 800100e:	4a20      	ldr	r2, [pc, #128]	; (8001090 <MX_TIM4_Init+0xa4>)
 8001010:	6002      	str	r2, [r0, #0]
  htim4.Init.Prescaler = 99;
 8001012:	2263      	movs	r2, #99	; 0x63
 8001014:	6042      	str	r2, [r0, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001016:	6083      	str	r3, [r0, #8]
  htim4.Init.Period = 999;
 8001018:	f240 32e7 	movw	r2, #999	; 0x3e7
 800101c:	60c2      	str	r2, [r0, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800101e:	6103      	str	r3, [r0, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001020:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001022:	f001 fa09 	bl	8002438 <HAL_TIM_Base_Init>
 8001026:	bb30      	cbnz	r0, 8001076 <MX_TIM4_Init+0x8a>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001028:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800102c:	930a      	str	r3, [sp, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800102e:	a90a      	add	r1, sp, #40	; 0x28
 8001030:	4816      	ldr	r0, [pc, #88]	; (800108c <MX_TIM4_Init+0xa0>)
 8001032:	f001 fbca 	bl	80027ca <HAL_TIM_ConfigClockSource>
 8001036:	bb00      	cbnz	r0, 800107a <MX_TIM4_Init+0x8e>
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001038:	4814      	ldr	r0, [pc, #80]	; (800108c <MX_TIM4_Init+0xa0>)
 800103a:	f001 fa29 	bl	8002490 <HAL_TIM_PWM_Init>
 800103e:	b9f0      	cbnz	r0, 800107e <MX_TIM4_Init+0x92>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001040:	2300      	movs	r3, #0
 8001042:	9308      	str	r3, [sp, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001044:	9309      	str	r3, [sp, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001046:	a908      	add	r1, sp, #32
 8001048:	4810      	ldr	r0, [pc, #64]	; (800108c <MX_TIM4_Init+0xa0>)
 800104a:	f001 fe89 	bl	8002d60 <HAL_TIMEx_MasterConfigSynchronization>
 800104e:	b9c0      	cbnz	r0, 8001082 <MX_TIM4_Init+0x96>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001050:	2360      	movs	r3, #96	; 0x60
 8001052:	9301      	str	r3, [sp, #4]
  sConfigOC.Pulse = 900;
 8001054:	f44f 7361 	mov.w	r3, #900	; 0x384
 8001058:	9302      	str	r3, [sp, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800105a:	2200      	movs	r2, #0
 800105c:	9203      	str	r2, [sp, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800105e:	9205      	str	r2, [sp, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001060:	a901      	add	r1, sp, #4
 8001062:	480a      	ldr	r0, [pc, #40]	; (800108c <MX_TIM4_Init+0xa0>)
 8001064:	f001 fa9e 	bl	80025a4 <HAL_TIM_PWM_ConfigChannel>
 8001068:	b968      	cbnz	r0, 8001086 <MX_TIM4_Init+0x9a>
  HAL_TIM_MspPostInit(&htim4);
 800106a:	4808      	ldr	r0, [pc, #32]	; (800108c <MX_TIM4_Init+0xa0>)
 800106c:	f000 f9e0 	bl	8001430 <HAL_TIM_MspPostInit>
}
 8001070:	b00f      	add	sp, #60	; 0x3c
 8001072:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8001076:	f7ff ffb7 	bl	8000fe8 <Error_Handler>
    Error_Handler();
 800107a:	f7ff ffb5 	bl	8000fe8 <Error_Handler>
    Error_Handler();
 800107e:	f7ff ffb3 	bl	8000fe8 <Error_Handler>
    Error_Handler();
 8001082:	f7ff ffb1 	bl	8000fe8 <Error_Handler>
    Error_Handler();
 8001086:	f7ff ffaf 	bl	8000fe8 <Error_Handler>
 800108a:	bf00      	nop
 800108c:	20000350 	.word	0x20000350
 8001090:	40000800 	.word	0x40000800

08001094 <MX_USART1_UART_Init>:
{
 8001094:	b508      	push	{r3, lr}
  huart1.Instance = USART1;
 8001096:	480a      	ldr	r0, [pc, #40]	; (80010c0 <MX_USART1_UART_Init+0x2c>)
 8001098:	4b0a      	ldr	r3, [pc, #40]	; (80010c4 <MX_USART1_UART_Init+0x30>)
 800109a:	6003      	str	r3, [r0, #0]
  huart1.Init.BaudRate = 921600;
 800109c:	f44f 2361 	mov.w	r3, #921600	; 0xe1000
 80010a0:	6043      	str	r3, [r0, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80010a2:	2300      	movs	r3, #0
 80010a4:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80010a6:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80010a8:	6103      	str	r3, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80010aa:	220c      	movs	r2, #12
 80010ac:	6142      	str	r2, [r0, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80010ae:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80010b0:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80010b2:	f001 ff5f 	bl	8002f74 <HAL_UART_Init>
 80010b6:	b900      	cbnz	r0, 80010ba <MX_USART1_UART_Init+0x26>
}
 80010b8:	bd08      	pop	{r3, pc}
    Error_Handler();
 80010ba:	f7ff ff95 	bl	8000fe8 <Error_Handler>
 80010be:	bf00      	nop
 80010c0:	20000398 	.word	0x20000398
 80010c4:	40011000 	.word	0x40011000

080010c8 <MX_TIM2_Init>:
{
 80010c8:	b500      	push	{lr}
 80010ca:	b091      	sub	sp, #68	; 0x44
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80010cc:	2300      	movs	r3, #0
 80010ce:	930c      	str	r3, [sp, #48]	; 0x30
 80010d0:	930d      	str	r3, [sp, #52]	; 0x34
 80010d2:	930e      	str	r3, [sp, #56]	; 0x38
 80010d4:	930f      	str	r3, [sp, #60]	; 0x3c
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80010d6:	9307      	str	r3, [sp, #28]
 80010d8:	9308      	str	r3, [sp, #32]
 80010da:	9309      	str	r3, [sp, #36]	; 0x24
 80010dc:	930a      	str	r3, [sp, #40]	; 0x28
 80010de:	930b      	str	r3, [sp, #44]	; 0x2c
  TIM_IC_InitTypeDef sConfigIC = {0};
 80010e0:	9303      	str	r3, [sp, #12]
 80010e2:	9304      	str	r3, [sp, #16]
 80010e4:	9305      	str	r3, [sp, #20]
 80010e6:	9306      	str	r3, [sp, #24]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010e8:	9301      	str	r3, [sp, #4]
 80010ea:	9302      	str	r3, [sp, #8]
  htim2.Instance = TIM2;
 80010ec:	482b      	ldr	r0, [pc, #172]	; (800119c <MX_TIM2_Init+0xd4>)
 80010ee:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80010f2:	6002      	str	r2, [r0, #0]
  htim2.Init.Prescaler = 0;
 80010f4:	6043      	str	r3, [r0, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010f6:	6083      	str	r3, [r0, #8]
  htim2.Init.Period = 4294967295;
 80010f8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80010fc:	60c2      	str	r2, [r0, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010fe:	6103      	str	r3, [r0, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001100:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001102:	f001 f999 	bl	8002438 <HAL_TIM_Base_Init>
 8001106:	2800      	cmp	r0, #0
 8001108:	d139      	bne.n	800117e <MX_TIM2_Init+0xb6>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800110a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800110e:	930c      	str	r3, [sp, #48]	; 0x30
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001110:	a90c      	add	r1, sp, #48	; 0x30
 8001112:	4822      	ldr	r0, [pc, #136]	; (800119c <MX_TIM2_Init+0xd4>)
 8001114:	f001 fb59 	bl	80027ca <HAL_TIM_ConfigClockSource>
 8001118:	2800      	cmp	r0, #0
 800111a:	d132      	bne.n	8001182 <MX_TIM2_Init+0xba>
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 800111c:	481f      	ldr	r0, [pc, #124]	; (800119c <MX_TIM2_Init+0xd4>)
 800111e:	f001 f9e3 	bl	80024e8 <HAL_TIM_IC_Init>
 8001122:	2800      	cmp	r0, #0
 8001124:	d12f      	bne.n	8001186 <MX_TIM2_Init+0xbe>
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8001126:	2304      	movs	r3, #4
 8001128:	9307      	str	r3, [sp, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 800112a:	2350      	movs	r3, #80	; 0x50
 800112c:	9308      	str	r3, [sp, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800112e:	2300      	movs	r3, #0
 8001130:	9309      	str	r3, [sp, #36]	; 0x24
  sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 8001132:	930a      	str	r3, [sp, #40]	; 0x28
  sSlaveConfig.TriggerFilter = 0;
 8001134:	930b      	str	r3, [sp, #44]	; 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 8001136:	a907      	add	r1, sp, #28
 8001138:	4818      	ldr	r0, [pc, #96]	; (800119c <MX_TIM2_Init+0xd4>)
 800113a:	f001 fc21 	bl	8002980 <HAL_TIM_SlaveConfigSynchro>
 800113e:	bb20      	cbnz	r0, 800118a <MX_TIM2_Init+0xc2>
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001140:	2200      	movs	r2, #0
 8001142:	9203      	str	r2, [sp, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001144:	2301      	movs	r3, #1
 8001146:	9304      	str	r3, [sp, #16]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001148:	9205      	str	r2, [sp, #20]
  sConfigIC.ICFilter = 0;
 800114a:	9206      	str	r2, [sp, #24]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800114c:	a903      	add	r1, sp, #12
 800114e:	4813      	ldr	r0, [pc, #76]	; (800119c <MX_TIM2_Init+0xd4>)
 8001150:	f001 facc 	bl	80026ec <HAL_TIM_IC_ConfigChannel>
 8001154:	b9d8      	cbnz	r0, 800118e <MX_TIM2_Init+0xc6>
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8001156:	2302      	movs	r3, #2
 8001158:	9303      	str	r3, [sp, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 800115a:	9304      	str	r3, [sp, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 800115c:	2204      	movs	r2, #4
 800115e:	a903      	add	r1, sp, #12
 8001160:	480e      	ldr	r0, [pc, #56]	; (800119c <MX_TIM2_Init+0xd4>)
 8001162:	f001 fac3 	bl	80026ec <HAL_TIM_IC_ConfigChannel>
 8001166:	b9a0      	cbnz	r0, 8001192 <MX_TIM2_Init+0xca>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001168:	2300      	movs	r3, #0
 800116a:	9301      	str	r3, [sp, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800116c:	9302      	str	r3, [sp, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800116e:	a901      	add	r1, sp, #4
 8001170:	480a      	ldr	r0, [pc, #40]	; (800119c <MX_TIM2_Init+0xd4>)
 8001172:	f001 fdf5 	bl	8002d60 <HAL_TIMEx_MasterConfigSynchronization>
 8001176:	b970      	cbnz	r0, 8001196 <MX_TIM2_Init+0xce>
}
 8001178:	b011      	add	sp, #68	; 0x44
 800117a:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 800117e:	f7ff ff33 	bl	8000fe8 <Error_Handler>
    Error_Handler();
 8001182:	f7ff ff31 	bl	8000fe8 <Error_Handler>
    Error_Handler();
 8001186:	f7ff ff2f 	bl	8000fe8 <Error_Handler>
    Error_Handler();
 800118a:	f7ff ff2d 	bl	8000fe8 <Error_Handler>
    Error_Handler();
 800118e:	f7ff ff2b 	bl	8000fe8 <Error_Handler>
    Error_Handler();
 8001192:	f7ff ff29 	bl	8000fe8 <Error_Handler>
    Error_Handler();
 8001196:	f7ff ff27 	bl	8000fe8 <Error_Handler>
 800119a:	bf00      	nop
 800119c:	20000308 	.word	0x20000308

080011a0 <SystemClock_Config>:
{
 80011a0:	b500      	push	{lr}
 80011a2:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011a4:	2230      	movs	r2, #48	; 0x30
 80011a6:	2100      	movs	r1, #0
 80011a8:	a808      	add	r0, sp, #32
 80011aa:	f002 fd04 	bl	8003bb6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011ae:	2300      	movs	r3, #0
 80011b0:	9303      	str	r3, [sp, #12]
 80011b2:	9304      	str	r3, [sp, #16]
 80011b4:	9305      	str	r3, [sp, #20]
 80011b6:	9306      	str	r3, [sp, #24]
 80011b8:	9307      	str	r3, [sp, #28]
  __HAL_RCC_PWR_CLK_ENABLE();
 80011ba:	9301      	str	r3, [sp, #4]
 80011bc:	4a1f      	ldr	r2, [pc, #124]	; (800123c <SystemClock_Config+0x9c>)
 80011be:	6c11      	ldr	r1, [r2, #64]	; 0x40
 80011c0:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 80011c4:	6411      	str	r1, [r2, #64]	; 0x40
 80011c6:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80011c8:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 80011cc:	9201      	str	r2, [sp, #4]
 80011ce:	9a01      	ldr	r2, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80011d0:	9302      	str	r3, [sp, #8]
 80011d2:	4b1b      	ldr	r3, [pc, #108]	; (8001240 <SystemClock_Config+0xa0>)
 80011d4:	681a      	ldr	r2, [r3, #0]
 80011d6:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 80011da:	601a      	str	r2, [r3, #0]
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80011e2:	9302      	str	r3, [sp, #8]
 80011e4:	9b02      	ldr	r3, [sp, #8]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80011e6:	2301      	movs	r3, #1
 80011e8:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80011ea:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80011ee:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011f0:	2302      	movs	r3, #2
 80011f2:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80011f4:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80011f8:	920f      	str	r2, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 12;
 80011fa:	220c      	movs	r2, #12
 80011fc:	9210      	str	r2, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 96;
 80011fe:	2260      	movs	r2, #96	; 0x60
 8001200:	9211      	str	r2, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001202:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001204:	2304      	movs	r3, #4
 8001206:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001208:	a808      	add	r0, sp, #32
 800120a:	f000 fbc1 	bl	8001990 <HAL_RCC_OscConfig>
 800120e:	b988      	cbnz	r0, 8001234 <SystemClock_Config+0x94>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001210:	230f      	movs	r3, #15
 8001212:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001214:	2302      	movs	r3, #2
 8001216:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001218:	2300      	movs	r3, #0
 800121a:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800121c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001220:	9206      	str	r2, [sp, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001222:	9307      	str	r3, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001224:	2103      	movs	r1, #3
 8001226:	a803      	add	r0, sp, #12
 8001228:	f000 fe02 	bl	8001e30 <HAL_RCC_ClockConfig>
 800122c:	b920      	cbnz	r0, 8001238 <SystemClock_Config+0x98>
}
 800122e:	b015      	add	sp, #84	; 0x54
 8001230:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8001234:	f7ff fed8 	bl	8000fe8 <Error_Handler>
    Error_Handler();
 8001238:	f7ff fed6 	bl	8000fe8 <Error_Handler>
 800123c:	40023800 	.word	0x40023800
 8001240:	40007000 	.word	0x40007000

08001244 <main>:
{
 8001244:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001248:	b084      	sub	sp, #16
  HAL_Init();
 800124a:	f000 fa15 	bl	8001678 <HAL_Init>
  SystemClock_Config();
 800124e:	f7ff ffa7 	bl	80011a0 <SystemClock_Config>
  MX_GPIO_Init();
 8001252:	f7ff fe2f 	bl	8000eb4 <MX_GPIO_Init>
  MX_TIM4_Init();
 8001256:	f7ff fec9 	bl	8000fec <MX_TIM4_Init>
  MX_USART1_UART_Init();
 800125a:	f7ff ff1b 	bl	8001094 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 800125e:	f7ff ff33 	bl	80010c8 <MX_TIM2_Init>
	DBG("Firing up PWM");
 8001262:	4832      	ldr	r0, [pc, #200]	; (800132c <main+0xe8>)
 8001264:	f002 fc4a 	bl	8003afc <iprintf>
 8001268:	200a      	movs	r0, #10
 800126a:	f002 fc59 	bl	8003b20 <putchar>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);   // Output PWM Generation
 800126e:	2100      	movs	r1, #0
 8001270:	482f      	ldr	r0, [pc, #188]	; (8001330 <main+0xec>)
 8001272:	f001 fbbd 	bl	80029f0 <HAL_TIM_PWM_Start>
	DBG("Firing up PWM Input Capture");
 8001276:	482f      	ldr	r0, [pc, #188]	; (8001334 <main+0xf0>)
 8001278:	f002 fc40 	bl	8003afc <iprintf>
 800127c:	200a      	movs	r0, #10
 800127e:	f002 fc4f 	bl	8003b20 <putchar>
	HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1); // Primary channel - rising edge - rinse and repeat
 8001282:	4c2d      	ldr	r4, [pc, #180]	; (8001338 <main+0xf4>)
 8001284:	2100      	movs	r1, #0
 8001286:	4620      	mov	r0, r4
 8001288:	f001 fcb8 	bl	8002bfc <HAL_TIM_IC_Start_IT>
	HAL_TIM_IC_Start(&htim2, TIM_CHANNEL_2);    // Secondary channel - falling edge - stop second counter
 800128c:	2104      	movs	r1, #4
 800128e:	4620      	mov	r0, r4
 8001290:	f001 fc26 	bl	8002ae0 <HAL_TIM_IC_Start>
	uint32_t now = 0, last_blink = 0, last_print = 0, last_change = 0;
 8001294:	2700      	movs	r7, #0
 8001296:	463e      	mov	r6, r7
 8001298:	463d      	mov	r5, r7
 800129a:	e000      	b.n	800129e <main+0x5a>
			last_change = now;
 800129c:	4627      	mov	r7, r4
		now = HAL_GetTick();
 800129e:	f000 fa11 	bl	80016c4 <HAL_GetTick>
 80012a2:	4604      	mov	r4, r0
		if (now - last_blink >= 500) {
 80012a4:	1b43      	subs	r3, r0, r5
 80012a6:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80012aa:	d21b      	bcs.n	80012e4 <main+0xa0>
		if (now - last_print >= 1000) {
 80012ac:	1ba3      	subs	r3, r4, r6
 80012ae:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80012b2:	d21e      	bcs.n	80012f2 <main+0xae>
		if (now - last_change >= 2000) {
 80012b4:	1be3      	subs	r3, r4, r7
 80012b6:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80012ba:	d3f0      	bcc.n	800129e <main+0x5a>
			__HAL_TIM_SET_PRESCALER(&htim4, pwm_vals[pwm_vals_idx][0]);
 80012bc:	491f      	ldr	r1, [pc, #124]	; (800133c <main+0xf8>)
 80012be:	680b      	ldr	r3, [r1, #0]
 80012c0:	4a1b      	ldr	r2, [pc, #108]	; (8001330 <main+0xec>)
 80012c2:	6810      	ldr	r0, [r2, #0]
 80012c4:	4a1e      	ldr	r2, [pc, #120]	; (8001340 <main+0xfc>)
 80012c6:	f852 7033 	ldr.w	r7, [r2, r3, lsl #3]
 80012ca:	6287      	str	r7, [r0, #40]	; 0x28
			__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, pwm_vals[pwm_vals_idx][1]);
 80012cc:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 80012d0:	6852      	ldr	r2, [r2, #4]
 80012d2:	6342      	str	r2, [r0, #52]	; 0x34
			++pwm_vals_idx;
 80012d4:	3301      	adds	r3, #1
 80012d6:	600b      	str	r3, [r1, #0]
			if (pwm_vals_idx >= sizeof(pwm_vals) / sizeof(pwm_vals[0])) {
 80012d8:	2b20      	cmp	r3, #32
 80012da:	d9df      	bls.n	800129c <main+0x58>
				pwm_vals_idx = 0;
 80012dc:	2200      	movs	r2, #0
 80012de:	600a      	str	r2, [r1, #0]
			last_change = now;
 80012e0:	4627      	mov	r7, r4
 80012e2:	e7dc      	b.n	800129e <main+0x5a>
			HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 80012e4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80012e8:	4816      	ldr	r0, [pc, #88]	; (8001344 <main+0x100>)
 80012ea:	f000 fb47 	bl	800197c <HAL_GPIO_TogglePin>
			last_blink = now;
 80012ee:	4625      	mov	r5, r4
 80012f0:	e7dc      	b.n	80012ac <main+0x68>
			DBG("Tick %5lu count = %8lu freq = %10.4f Hz duty = %7.4f %%", now / 1000, cnt_full, freq, duty);
 80012f2:	4b15      	ldr	r3, [pc, #84]	; (8001348 <main+0x104>)
 80012f4:	f8d3 8000 	ldr.w	r8, [r3]
 80012f8:	4e14      	ldr	r6, [pc, #80]	; (800134c <main+0x108>)
 80012fa:	fba6 3604 	umull	r3, r6, r6, r4
 80012fe:	09b6      	lsrs	r6, r6, #6
 8001300:	4b13      	ldr	r3, [pc, #76]	; (8001350 <main+0x10c>)
 8001302:	6818      	ldr	r0, [r3, #0]
 8001304:	f7ff f928 	bl	8000558 <__aeabi_f2d>
 8001308:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800130c:	4b11      	ldr	r3, [pc, #68]	; (8001354 <main+0x110>)
 800130e:	6818      	ldr	r0, [r3, #0]
 8001310:	f7ff f922 	bl	8000558 <__aeabi_f2d>
 8001314:	e9cd 0100 	strd	r0, r1, [sp]
 8001318:	4642      	mov	r2, r8
 800131a:	4631      	mov	r1, r6
 800131c:	480e      	ldr	r0, [pc, #56]	; (8001358 <main+0x114>)
 800131e:	f002 fbed 	bl	8003afc <iprintf>
 8001322:	200a      	movs	r0, #10
 8001324:	f002 fbfc 	bl	8003b20 <putchar>
			last_print = now;
 8001328:	4626      	mov	r6, r4
 800132a:	e7c3      	b.n	80012b4 <main+0x70>
 800132c:	08005ae0 	.word	0x08005ae0
 8001330:	20000350 	.word	0x20000350
 8001334:	08005af0 	.word	0x08005af0
 8001338:	20000308 	.word	0x20000308
 800133c:	200003dc 	.word	0x200003dc
 8001340:	20000000 	.word	0x20000000
 8001344:	40020800 	.word	0x40020800
 8001348:	200002f8 	.word	0x200002f8
 800134c:	10624dd3 	.word	0x10624dd3
 8001350:	20000300 	.word	0x20000300
 8001354:	20000304 	.word	0x20000304
 8001358:	08005b0c 	.word	0x08005b0c

0800135c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800135c:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800135e:	2100      	movs	r1, #0
 8001360:	9100      	str	r1, [sp, #0]
 8001362:	4b0b      	ldr	r3, [pc, #44]	; (8001390 <HAL_MspInit+0x34>)
 8001364:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001366:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800136a:	645a      	str	r2, [r3, #68]	; 0x44
 800136c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800136e:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8001372:	9200      	str	r2, [sp, #0]
 8001374:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001376:	9101      	str	r1, [sp, #4]
 8001378:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800137a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800137e:	641a      	str	r2, [r3, #64]	; 0x40
 8001380:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001382:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001386:	9301      	str	r3, [sp, #4]
 8001388:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800138a:	b002      	add	sp, #8
 800138c:	4770      	bx	lr
 800138e:	bf00      	nop
 8001390:	40023800 	.word	0x40023800

08001394 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001394:	b510      	push	{r4, lr}
 8001396:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001398:	2300      	movs	r3, #0
 800139a:	9303      	str	r3, [sp, #12]
 800139c:	9304      	str	r3, [sp, #16]
 800139e:	9305      	str	r3, [sp, #20]
 80013a0:	9306      	str	r3, [sp, #24]
 80013a2:	9307      	str	r3, [sp, #28]
  if(htim_base->Instance==TIM2)
 80013a4:	6803      	ldr	r3, [r0, #0]
 80013a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80013aa:	d004      	beq.n	80013b6 <HAL_TIM_Base_MspInit+0x22>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
  else if(htim_base->Instance==TIM4)
 80013ac:	4a1d      	ldr	r2, [pc, #116]	; (8001424 <HAL_TIM_Base_MspInit+0x90>)
 80013ae:	4293      	cmp	r3, r2
 80013b0:	d02b      	beq.n	800140a <HAL_TIM_Base_MspInit+0x76>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80013b2:	b008      	add	sp, #32
 80013b4:	bd10      	pop	{r4, pc}
    __HAL_RCC_TIM2_CLK_ENABLE();
 80013b6:	2400      	movs	r4, #0
 80013b8:	9400      	str	r4, [sp, #0]
 80013ba:	f503 330e 	add.w	r3, r3, #145408	; 0x23800
 80013be:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80013c0:	f042 0201 	orr.w	r2, r2, #1
 80013c4:	641a      	str	r2, [r3, #64]	; 0x40
 80013c6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80013c8:	f002 0201 	and.w	r2, r2, #1
 80013cc:	9200      	str	r2, [sp, #0]
 80013ce:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013d0:	9401      	str	r4, [sp, #4]
 80013d2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80013d4:	f042 0201 	orr.w	r2, r2, #1
 80013d8:	631a      	str	r2, [r3, #48]	; 0x30
 80013da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013dc:	f003 0301 	and.w	r3, r3, #1
 80013e0:	9301      	str	r3, [sp, #4]
 80013e2:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = PWM_IN_Pin;
 80013e4:	2320      	movs	r3, #32
 80013e6:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013e8:	2302      	movs	r3, #2
 80013ea:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80013ec:	2301      	movs	r3, #1
 80013ee:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(PWM_IN_GPIO_Port, &GPIO_InitStruct);
 80013f0:	a903      	add	r1, sp, #12
 80013f2:	480d      	ldr	r0, [pc, #52]	; (8001428 <HAL_TIM_Base_MspInit+0x94>)
 80013f4:	f000 f9d8 	bl	80017a8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80013f8:	4622      	mov	r2, r4
 80013fa:	4621      	mov	r1, r4
 80013fc:	201c      	movs	r0, #28
 80013fe:	f000 f979 	bl	80016f4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001402:	201c      	movs	r0, #28
 8001404:	f000 f9ae 	bl	8001764 <HAL_NVIC_EnableIRQ>
 8001408:	e7d3      	b.n	80013b2 <HAL_TIM_Base_MspInit+0x1e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800140a:	2300      	movs	r3, #0
 800140c:	9302      	str	r3, [sp, #8]
 800140e:	4b07      	ldr	r3, [pc, #28]	; (800142c <HAL_TIM_Base_MspInit+0x98>)
 8001410:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001412:	f042 0204 	orr.w	r2, r2, #4
 8001416:	641a      	str	r2, [r3, #64]	; 0x40
 8001418:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800141a:	f003 0304 	and.w	r3, r3, #4
 800141e:	9302      	str	r3, [sp, #8]
 8001420:	9b02      	ldr	r3, [sp, #8]
}
 8001422:	e7c6      	b.n	80013b2 <HAL_TIM_Base_MspInit+0x1e>
 8001424:	40000800 	.word	0x40000800
 8001428:	40020000 	.word	0x40020000
 800142c:	40023800 	.word	0x40023800

08001430 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001430:	b500      	push	{lr}
 8001432:	b087      	sub	sp, #28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001434:	2300      	movs	r3, #0
 8001436:	9301      	str	r3, [sp, #4]
 8001438:	9302      	str	r3, [sp, #8]
 800143a:	9303      	str	r3, [sp, #12]
 800143c:	9304      	str	r3, [sp, #16]
 800143e:	9305      	str	r3, [sp, #20]
  if(htim->Instance==TIM4)
 8001440:	6802      	ldr	r2, [r0, #0]
 8001442:	4b0e      	ldr	r3, [pc, #56]	; (800147c <HAL_TIM_MspPostInit+0x4c>)
 8001444:	429a      	cmp	r2, r3
 8001446:	d002      	beq.n	800144e <HAL_TIM_MspPostInit+0x1e>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8001448:	b007      	add	sp, #28
 800144a:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800144e:	2300      	movs	r3, #0
 8001450:	9300      	str	r3, [sp, #0]
 8001452:	4b0b      	ldr	r3, [pc, #44]	; (8001480 <HAL_TIM_MspPostInit+0x50>)
 8001454:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001456:	f042 0202 	orr.w	r2, r2, #2
 800145a:	631a      	str	r2, [r3, #48]	; 0x30
 800145c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800145e:	f003 0302 	and.w	r3, r3, #2
 8001462:	9300      	str	r3, [sp, #0]
 8001464:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = PWM_OUT_Pin;
 8001466:	2340      	movs	r3, #64	; 0x40
 8001468:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800146a:	2302      	movs	r3, #2
 800146c:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800146e:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(PWM_OUT_GPIO_Port, &GPIO_InitStruct);
 8001470:	a901      	add	r1, sp, #4
 8001472:	4804      	ldr	r0, [pc, #16]	; (8001484 <HAL_TIM_MspPostInit+0x54>)
 8001474:	f000 f998 	bl	80017a8 <HAL_GPIO_Init>
}
 8001478:	e7e6      	b.n	8001448 <HAL_TIM_MspPostInit+0x18>
 800147a:	bf00      	nop
 800147c:	40000800 	.word	0x40000800
 8001480:	40023800 	.word	0x40023800
 8001484:	40020400 	.word	0x40020400

08001488 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001488:	b500      	push	{lr}
 800148a:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800148c:	2300      	movs	r3, #0
 800148e:	9303      	str	r3, [sp, #12]
 8001490:	9304      	str	r3, [sp, #16]
 8001492:	9305      	str	r3, [sp, #20]
 8001494:	9306      	str	r3, [sp, #24]
 8001496:	9307      	str	r3, [sp, #28]
  if(huart->Instance==USART1)
 8001498:	6802      	ldr	r2, [r0, #0]
 800149a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800149e:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
 80014a2:	429a      	cmp	r2, r3
 80014a4:	d002      	beq.n	80014ac <HAL_UART_MspInit+0x24>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80014a6:	b009      	add	sp, #36	; 0x24
 80014a8:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_USART1_CLK_ENABLE();
 80014ac:	2100      	movs	r1, #0
 80014ae:	9101      	str	r1, [sp, #4]
 80014b0:	f503 3394 	add.w	r3, r3, #75776	; 0x12800
 80014b4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80014b6:	f042 0210 	orr.w	r2, r2, #16
 80014ba:	645a      	str	r2, [r3, #68]	; 0x44
 80014bc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80014be:	f002 0210 	and.w	r2, r2, #16
 80014c2:	9201      	str	r2, [sp, #4]
 80014c4:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014c6:	9102      	str	r1, [sp, #8]
 80014c8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80014ca:	f042 0201 	orr.w	r2, r2, #1
 80014ce:	631a      	str	r2, [r3, #48]	; 0x30
 80014d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014d2:	f003 0301 	and.w	r3, r3, #1
 80014d6:	9302      	str	r3, [sp, #8]
 80014d8:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80014da:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80014de:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014e0:	2302      	movs	r3, #2
 80014e2:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014e4:	2303      	movs	r3, #3
 80014e6:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80014e8:	2307      	movs	r3, #7
 80014ea:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014ec:	a903      	add	r1, sp, #12
 80014ee:	4802      	ldr	r0, [pc, #8]	; (80014f8 <HAL_UART_MspInit+0x70>)
 80014f0:	f000 f95a 	bl	80017a8 <HAL_GPIO_Init>
}
 80014f4:	e7d7      	b.n	80014a6 <HAL_UART_MspInit+0x1e>
 80014f6:	bf00      	nop
 80014f8:	40020000 	.word	0x40020000

080014fc <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80014fc:	e7fe      	b.n	80014fc <NMI_Handler>

080014fe <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014fe:	e7fe      	b.n	80014fe <HardFault_Handler>

08001500 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001500:	e7fe      	b.n	8001500 <MemManage_Handler>

08001502 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001502:	e7fe      	b.n	8001502 <BusFault_Handler>

08001504 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001504:	e7fe      	b.n	8001504 <UsageFault_Handler>

08001506 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001506:	4770      	bx	lr

08001508 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001508:	4770      	bx	lr

0800150a <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800150a:	4770      	bx	lr

0800150c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800150c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800150e:	f000 f8cd 	bl	80016ac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001512:	bd08      	pop	{r3, pc}

08001514 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001514:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001516:	4802      	ldr	r0, [pc, #8]	; (8001520 <TIM2_IRQHandler+0xc>)
 8001518:	f000 fe83 	bl	8002222 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800151c:	bd08      	pop	{r3, pc}
 800151e:	bf00      	nop
 8001520:	20000308 	.word	0x20000308

08001524 <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 8001524:	2001      	movs	r0, #1
 8001526:	4770      	bx	lr

08001528 <_kill>:

int _kill(int pid, int sig)
{
 8001528:	b508      	push	{r3, lr}
	errno = EINVAL;
 800152a:	f002 fb97 	bl	8003c5c <__errno>
 800152e:	2316      	movs	r3, #22
 8001530:	6003      	str	r3, [r0, #0]
	return -1;
}
 8001532:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001536:	bd08      	pop	{r3, pc}

08001538 <_exit>:

void _exit (int status)
{
 8001538:	b508      	push	{r3, lr}
	_kill(status, -1);
 800153a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800153e:	f7ff fff3 	bl	8001528 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001542:	e7fe      	b.n	8001542 <_exit+0xa>

08001544 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001544:	b570      	push	{r4, r5, r6, lr}
 8001546:	460c      	mov	r4, r1
 8001548:	4616      	mov	r6, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800154a:	2500      	movs	r5, #0
 800154c:	e006      	b.n	800155c <_read+0x18>
	{
		*ptr++ = __io_getchar();
 800154e:	f3af 8000 	nop.w
 8001552:	4621      	mov	r1, r4
 8001554:	f801 0b01 	strb.w	r0, [r1], #1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001558:	3501      	adds	r5, #1
		*ptr++ = __io_getchar();
 800155a:	460c      	mov	r4, r1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800155c:	42b5      	cmp	r5, r6
 800155e:	dbf6      	blt.n	800154e <_read+0xa>
	}

return len;
}
 8001560:	4630      	mov	r0, r6
 8001562:	bd70      	pop	{r4, r5, r6, pc}

08001564 <_close>:
}

int _close(int file)
{
	return -1;
}
 8001564:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001568:	4770      	bx	lr

0800156a <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 800156a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800156e:	604b      	str	r3, [r1, #4]
	return 0;
}
 8001570:	2000      	movs	r0, #0
 8001572:	4770      	bx	lr

08001574 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 8001574:	2001      	movs	r0, #1
 8001576:	4770      	bx	lr

08001578 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 8001578:	2000      	movs	r0, #0
 800157a:	4770      	bx	lr

0800157c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800157c:	b510      	push	{r4, lr}
 800157e:	4603      	mov	r3, r0
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001580:	4a0c      	ldr	r2, [pc, #48]	; (80015b4 <_sbrk+0x38>)
 8001582:	490d      	ldr	r1, [pc, #52]	; (80015b8 <_sbrk+0x3c>)
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001584:	480d      	ldr	r0, [pc, #52]	; (80015bc <_sbrk+0x40>)
 8001586:	6800      	ldr	r0, [r0, #0]
 8001588:	b140      	cbz	r0, 800159c <_sbrk+0x20>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800158a:	480c      	ldr	r0, [pc, #48]	; (80015bc <_sbrk+0x40>)
 800158c:	6800      	ldr	r0, [r0, #0]
 800158e:	4403      	add	r3, r0
 8001590:	1a52      	subs	r2, r2, r1
 8001592:	4293      	cmp	r3, r2
 8001594:	d806      	bhi.n	80015a4 <_sbrk+0x28>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 8001596:	4a09      	ldr	r2, [pc, #36]	; (80015bc <_sbrk+0x40>)
 8001598:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
}
 800159a:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 800159c:	4807      	ldr	r0, [pc, #28]	; (80015bc <_sbrk+0x40>)
 800159e:	4c08      	ldr	r4, [pc, #32]	; (80015c0 <_sbrk+0x44>)
 80015a0:	6004      	str	r4, [r0, #0]
 80015a2:	e7f2      	b.n	800158a <_sbrk+0xe>
    errno = ENOMEM;
 80015a4:	f002 fb5a 	bl	8003c5c <__errno>
 80015a8:	230c      	movs	r3, #12
 80015aa:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 80015ac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80015b0:	e7f3      	b.n	800159a <_sbrk+0x1e>
 80015b2:	bf00      	nop
 80015b4:	20020000 	.word	0x20020000
 80015b8:	00000400 	.word	0x00000400
 80015bc:	200003e0 	.word	0x200003e0
 80015c0:	20000538 	.word	0x20000538

080015c4 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80015c4:	4a03      	ldr	r2, [pc, #12]	; (80015d4 <SystemInit+0x10>)
 80015c6:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80015ca:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80015ce:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80015d2:	4770      	bx	lr
 80015d4:	e000ed00 	.word	0xe000ed00

080015d8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80015d8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001610 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80015dc:	480d      	ldr	r0, [pc, #52]	; (8001614 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80015de:	490e      	ldr	r1, [pc, #56]	; (8001618 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80015e0:	4a0e      	ldr	r2, [pc, #56]	; (800161c <LoopFillZerobss+0x1e>)
  movs r3, #0
 80015e2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80015e4:	e002      	b.n	80015ec <LoopCopyDataInit>

080015e6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80015e6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80015e8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80015ea:	3304      	adds	r3, #4

080015ec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80015ec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80015ee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80015f0:	d3f9      	bcc.n	80015e6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80015f2:	4a0b      	ldr	r2, [pc, #44]	; (8001620 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80015f4:	4c0b      	ldr	r4, [pc, #44]	; (8001624 <LoopFillZerobss+0x26>)
  movs r3, #0
 80015f6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80015f8:	e001      	b.n	80015fe <LoopFillZerobss>

080015fa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80015fa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80015fc:	3204      	adds	r2, #4

080015fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80015fe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001600:	d3fb      	bcc.n	80015fa <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001602:	f7ff ffdf 	bl	80015c4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001606:	f002 fb2f 	bl	8003c68 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800160a:	f7ff fe1b 	bl	8001244 <main>
  bx  lr    
 800160e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001610:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001614:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001618:	200002dc 	.word	0x200002dc
  ldr r2, =_sidata
 800161c:	08005edc 	.word	0x08005edc
  ldr r2, =_sbss
 8001620:	200002dc 	.word	0x200002dc
  ldr r4, =_ebss
 8001624:	20000534 	.word	0x20000534

08001628 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001628:	e7fe      	b.n	8001628 <ADC_IRQHandler>
	...

0800162c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800162c:	b510      	push	{r4, lr}
 800162e:	4604      	mov	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001630:	4b0e      	ldr	r3, [pc, #56]	; (800166c <HAL_InitTick+0x40>)
 8001632:	781a      	ldrb	r2, [r3, #0]
 8001634:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001638:	fbb3 f3f2 	udiv	r3, r3, r2
 800163c:	4a0c      	ldr	r2, [pc, #48]	; (8001670 <HAL_InitTick+0x44>)
 800163e:	6810      	ldr	r0, [r2, #0]
 8001640:	fbb0 f0f3 	udiv	r0, r0, r3
 8001644:	f000 f89c 	bl	8001780 <HAL_SYSTICK_Config>
 8001648:	b968      	cbnz	r0, 8001666 <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800164a:	2c0f      	cmp	r4, #15
 800164c:	d901      	bls.n	8001652 <HAL_InitTick+0x26>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 800164e:	2001      	movs	r0, #1
 8001650:	e00a      	b.n	8001668 <HAL_InitTick+0x3c>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001652:	2200      	movs	r2, #0
 8001654:	4621      	mov	r1, r4
 8001656:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800165a:	f000 f84b 	bl	80016f4 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800165e:	4b05      	ldr	r3, [pc, #20]	; (8001674 <HAL_InitTick+0x48>)
 8001660:	601c      	str	r4, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001662:	2000      	movs	r0, #0
 8001664:	e000      	b.n	8001668 <HAL_InitTick+0x3c>
    return HAL_ERROR;
 8001666:	2001      	movs	r0, #1
}
 8001668:	bd10      	pop	{r4, pc}
 800166a:	bf00      	nop
 800166c:	2000010c 	.word	0x2000010c
 8001670:	20000108 	.word	0x20000108
 8001674:	20000110 	.word	0x20000110

08001678 <HAL_Init>:
{
 8001678:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800167a:	4b0b      	ldr	r3, [pc, #44]	; (80016a8 <HAL_Init+0x30>)
 800167c:	681a      	ldr	r2, [r3, #0]
 800167e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001682:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001684:	681a      	ldr	r2, [r3, #0]
 8001686:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800168a:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800168c:	681a      	ldr	r2, [r3, #0]
 800168e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001692:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001694:	2003      	movs	r0, #3
 8001696:	f000 f81b 	bl	80016d0 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 800169a:	200f      	movs	r0, #15
 800169c:	f7ff ffc6 	bl	800162c <HAL_InitTick>
  HAL_MspInit();
 80016a0:	f7ff fe5c 	bl	800135c <HAL_MspInit>
}
 80016a4:	2000      	movs	r0, #0
 80016a6:	bd08      	pop	{r3, pc}
 80016a8:	40023c00 	.word	0x40023c00

080016ac <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80016ac:	4a03      	ldr	r2, [pc, #12]	; (80016bc <HAL_IncTick+0x10>)
 80016ae:	6811      	ldr	r1, [r2, #0]
 80016b0:	4b03      	ldr	r3, [pc, #12]	; (80016c0 <HAL_IncTick+0x14>)
 80016b2:	781b      	ldrb	r3, [r3, #0]
 80016b4:	440b      	add	r3, r1
 80016b6:	6013      	str	r3, [r2, #0]
}
 80016b8:	4770      	bx	lr
 80016ba:	bf00      	nop
 80016bc:	200003e4 	.word	0x200003e4
 80016c0:	2000010c 	.word	0x2000010c

080016c4 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80016c4:	4b01      	ldr	r3, [pc, #4]	; (80016cc <HAL_GetTick+0x8>)
 80016c6:	6818      	ldr	r0, [r3, #0]
}
 80016c8:	4770      	bx	lr
 80016ca:	bf00      	nop
 80016cc:	200003e4 	.word	0x200003e4

080016d0 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80016d0:	4a07      	ldr	r2, [pc, #28]	; (80016f0 <HAL_NVIC_SetPriorityGrouping+0x20>)
 80016d2:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80016d4:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80016d8:	041b      	lsls	r3, r3, #16
 80016da:	0c1b      	lsrs	r3, r3, #16
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80016dc:	0200      	lsls	r0, r0, #8
 80016de:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80016e2:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 80016e4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80016e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 80016ec:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80016ee:	4770      	bx	lr
 80016f0:	e000ed00 	.word	0xe000ed00

080016f4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80016f4:	b500      	push	{lr}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80016f6:	4b19      	ldr	r3, [pc, #100]	; (800175c <HAL_NVIC_SetPriority+0x68>)
 80016f8:	68db      	ldr	r3, [r3, #12]
 80016fa:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80016fe:	f1c3 0c07 	rsb	ip, r3, #7
 8001702:	f1bc 0f04 	cmp.w	ip, #4
 8001706:	bf28      	it	cs
 8001708:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800170c:	f103 0e04 	add.w	lr, r3, #4
 8001710:	f1be 0f06 	cmp.w	lr, #6
 8001714:	d918      	bls.n	8001748 <HAL_NVIC_SetPriority+0x54>
 8001716:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001718:	f04f 3eff 	mov.w	lr, #4294967295	; 0xffffffff
 800171c:	fa0e fc0c 	lsl.w	ip, lr, ip
 8001720:	ea21 010c 	bic.w	r1, r1, ip
 8001724:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001726:	fa0e fe03 	lsl.w	lr, lr, r3
 800172a:	ea22 020e 	bic.w	r2, r2, lr
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800172e:	430a      	orrs	r2, r1
  if ((int32_t)(IRQn) >= 0)
 8001730:	2800      	cmp	r0, #0
 8001732:	db0b      	blt.n	800174c <HAL_NVIC_SetPriority+0x58>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001734:	0112      	lsls	r2, r2, #4
 8001736:	b2d2      	uxtb	r2, r2
 8001738:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 800173c:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8001740:	f880 2300 	strb.w	r2, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8001744:	f85d fb04 	ldr.w	pc, [sp], #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001748:	2300      	movs	r3, #0
 800174a:	e7e5      	b.n	8001718 <HAL_NVIC_SetPriority+0x24>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800174c:	f000 000f 	and.w	r0, r0, #15
 8001750:	0112      	lsls	r2, r2, #4
 8001752:	b2d2      	uxtb	r2, r2
 8001754:	4b02      	ldr	r3, [pc, #8]	; (8001760 <HAL_NVIC_SetPriority+0x6c>)
 8001756:	541a      	strb	r2, [r3, r0]
 8001758:	e7f4      	b.n	8001744 <HAL_NVIC_SetPriority+0x50>
 800175a:	bf00      	nop
 800175c:	e000ed00 	.word	0xe000ed00
 8001760:	e000ed14 	.word	0xe000ed14

08001764 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8001764:	2800      	cmp	r0, #0
 8001766:	db07      	blt.n	8001778 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001768:	f000 021f 	and.w	r2, r0, #31
 800176c:	0940      	lsrs	r0, r0, #5
 800176e:	2301      	movs	r3, #1
 8001770:	4093      	lsls	r3, r2
 8001772:	4a02      	ldr	r2, [pc, #8]	; (800177c <HAL_NVIC_EnableIRQ+0x18>)
 8001774:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8001778:	4770      	bx	lr
 800177a:	bf00      	nop
 800177c:	e000e100 	.word	0xe000e100

08001780 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001780:	3801      	subs	r0, #1
 8001782:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8001786:	d20b      	bcs.n	80017a0 <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001788:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800178c:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800178e:	4a05      	ldr	r2, [pc, #20]	; (80017a4 <HAL_SYSTICK_Config+0x24>)
 8001790:	21f0      	movs	r1, #240	; 0xf0
 8001792:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001796:	2000      	movs	r0, #0
 8001798:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800179a:	2207      	movs	r2, #7
 800179c:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800179e:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80017a0:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80017a2:	4770      	bx	lr
 80017a4:	e000ed00 	.word	0xe000ed00

080017a8 <HAL_GPIO_Init>:
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80017a8:	2300      	movs	r3, #0
 80017aa:	2b0f      	cmp	r3, #15
 80017ac:	f200 80d7 	bhi.w	800195e <HAL_GPIO_Init+0x1b6>
{
 80017b0:	b570      	push	{r4, r5, r6, lr}
 80017b2:	b082      	sub	sp, #8
 80017b4:	e065      	b.n	8001882 <HAL_GPIO_Init+0xda>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80017b6:	6885      	ldr	r5, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80017b8:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 80017bc:	2403      	movs	r4, #3
 80017be:	fa04 f40e 	lsl.w	r4, r4, lr
 80017c2:	ea25 0504 	bic.w	r5, r5, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 80017c6:	68cc      	ldr	r4, [r1, #12]
 80017c8:	fa04 f40e 	lsl.w	r4, r4, lr
 80017cc:	432c      	orrs	r4, r5
        GPIOx->OSPEEDR = temp;
 80017ce:	6084      	str	r4, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80017d0:	6844      	ldr	r4, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80017d2:	ea24 0402 	bic.w	r4, r4, r2
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80017d6:	684a      	ldr	r2, [r1, #4]
 80017d8:	f3c2 1200 	ubfx	r2, r2, #4, #1
 80017dc:	409a      	lsls	r2, r3
 80017de:	4322      	orrs	r2, r4
        GPIOx->OTYPER = temp;
 80017e0:	6042      	str	r2, [r0, #4]
 80017e2:	e05c      	b.n	800189e <HAL_GPIO_Init+0xf6>
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80017e4:	08dc      	lsrs	r4, r3, #3
 80017e6:	3408      	adds	r4, #8
 80017e8:	f850 2024 	ldr.w	r2, [r0, r4, lsl #2]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80017ec:	f003 0507 	and.w	r5, r3, #7
 80017f0:	00ad      	lsls	r5, r5, #2
 80017f2:	f04f 0e0f 	mov.w	lr, #15
 80017f6:	fa0e fe05 	lsl.w	lr, lr, r5
 80017fa:	ea22 0e0e 	bic.w	lr, r2, lr
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80017fe:	690a      	ldr	r2, [r1, #16]
 8001800:	40aa      	lsls	r2, r5
 8001802:	ea42 020e 	orr.w	r2, r2, lr
        GPIOx->AFR[position >> 3U] = temp;
 8001806:	f840 2024 	str.w	r2, [r0, r4, lsl #2]
 800180a:	e05c      	b.n	80018c6 <HAL_GPIO_Init+0x11e>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800180c:	2204      	movs	r2, #4
 800180e:	e000      	b.n	8001812 <HAL_GPIO_Init+0x6a>
 8001810:	2200      	movs	r2, #0
 8001812:	fa02 f20e 	lsl.w	r2, r2, lr
 8001816:	432a      	orrs	r2, r5
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001818:	3402      	adds	r4, #2
 800181a:	4d51      	ldr	r5, [pc, #324]	; (8001960 <HAL_GPIO_Init+0x1b8>)
 800181c:	f845 2024 	str.w	r2, [r5, r4, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001820:	4a50      	ldr	r2, [pc, #320]	; (8001964 <HAL_GPIO_Init+0x1bc>)
 8001822:	6814      	ldr	r4, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8001824:	ea6f 020c 	mvn.w	r2, ip
 8001828:	ea24 050c 	bic.w	r5, r4, ip
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800182c:	684e      	ldr	r6, [r1, #4]
 800182e:	f416 3f80 	tst.w	r6, #65536	; 0x10000
 8001832:	d001      	beq.n	8001838 <HAL_GPIO_Init+0x90>
        {
          temp |= iocurrent;
 8001834:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->IMR = temp;
 8001838:	4c4a      	ldr	r4, [pc, #296]	; (8001964 <HAL_GPIO_Init+0x1bc>)
 800183a:	6025      	str	r5, [r4, #0]

        temp = EXTI->EMR;
 800183c:	6864      	ldr	r4, [r4, #4]
        temp &= ~((uint32_t)iocurrent);
 800183e:	ea02 0504 	and.w	r5, r2, r4
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001842:	684e      	ldr	r6, [r1, #4]
 8001844:	f416 3f00 	tst.w	r6, #131072	; 0x20000
 8001848:	d001      	beq.n	800184e <HAL_GPIO_Init+0xa6>
        {
          temp |= iocurrent;
 800184a:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->EMR = temp;
 800184e:	4c45      	ldr	r4, [pc, #276]	; (8001964 <HAL_GPIO_Init+0x1bc>)
 8001850:	6065      	str	r5, [r4, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001852:	68a4      	ldr	r4, [r4, #8]
        temp &= ~((uint32_t)iocurrent);
 8001854:	ea02 0504 	and.w	r5, r2, r4
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001858:	684e      	ldr	r6, [r1, #4]
 800185a:	f416 1f80 	tst.w	r6, #1048576	; 0x100000
 800185e:	d001      	beq.n	8001864 <HAL_GPIO_Init+0xbc>
        {
          temp |= iocurrent;
 8001860:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->RTSR = temp;
 8001864:	4c3f      	ldr	r4, [pc, #252]	; (8001964 <HAL_GPIO_Init+0x1bc>)
 8001866:	60a5      	str	r5, [r4, #8]

        temp = EXTI->FTSR;
 8001868:	68e4      	ldr	r4, [r4, #12]
        temp &= ~((uint32_t)iocurrent);
 800186a:	4022      	ands	r2, r4
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800186c:	684d      	ldr	r5, [r1, #4]
 800186e:	f415 1f00 	tst.w	r5, #2097152	; 0x200000
 8001872:	d001      	beq.n	8001878 <HAL_GPIO_Init+0xd0>
        {
          temp |= iocurrent;
 8001874:	ea4c 0204 	orr.w	r2, ip, r4
        }
        EXTI->FTSR = temp;
 8001878:	4c3a      	ldr	r4, [pc, #232]	; (8001964 <HAL_GPIO_Init+0x1bc>)
 800187a:	60e2      	str	r2, [r4, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800187c:	3301      	adds	r3, #1
 800187e:	2b0f      	cmp	r3, #15
 8001880:	d86b      	bhi.n	800195a <HAL_GPIO_Init+0x1b2>
    ioposition = 0x01U << position;
 8001882:	2201      	movs	r2, #1
 8001884:	409a      	lsls	r2, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001886:	680c      	ldr	r4, [r1, #0]
 8001888:	ea04 0c02 	and.w	ip, r4, r2
    if(iocurrent == ioposition)
 800188c:	ea32 0404 	bics.w	r4, r2, r4
 8001890:	d1f4      	bne.n	800187c <HAL_GPIO_Init+0xd4>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001892:	684c      	ldr	r4, [r1, #4]
 8001894:	f004 0403 	and.w	r4, r4, #3
 8001898:	3c01      	subs	r4, #1
 800189a:	2c01      	cmp	r4, #1
 800189c:	d98b      	bls.n	80017b6 <HAL_GPIO_Init+0xe>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800189e:	684a      	ldr	r2, [r1, #4]
 80018a0:	f002 0203 	and.w	r2, r2, #3
 80018a4:	2a03      	cmp	r2, #3
 80018a6:	d009      	beq.n	80018bc <HAL_GPIO_Init+0x114>
        temp = GPIOx->PUPDR;
 80018a8:	68c4      	ldr	r4, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80018aa:	005d      	lsls	r5, r3, #1
 80018ac:	2203      	movs	r2, #3
 80018ae:	40aa      	lsls	r2, r5
 80018b0:	ea24 0402 	bic.w	r4, r4, r2
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80018b4:	688a      	ldr	r2, [r1, #8]
 80018b6:	40aa      	lsls	r2, r5
 80018b8:	4322      	orrs	r2, r4
        GPIOx->PUPDR = temp;
 80018ba:	60c2      	str	r2, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80018bc:	684a      	ldr	r2, [r1, #4]
 80018be:	f002 0203 	and.w	r2, r2, #3
 80018c2:	2a02      	cmp	r2, #2
 80018c4:	d08e      	beq.n	80017e4 <HAL_GPIO_Init+0x3c>
      temp = GPIOx->MODER;
 80018c6:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80018c8:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 80018cc:	2203      	movs	r2, #3
 80018ce:	fa02 f20e 	lsl.w	r2, r2, lr
 80018d2:	ea24 0402 	bic.w	r4, r4, r2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80018d6:	684a      	ldr	r2, [r1, #4]
 80018d8:	f002 0203 	and.w	r2, r2, #3
 80018dc:	fa02 f20e 	lsl.w	r2, r2, lr
 80018e0:	4322      	orrs	r2, r4
      GPIOx->MODER = temp;
 80018e2:	6002      	str	r2, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80018e4:	684a      	ldr	r2, [r1, #4]
 80018e6:	f412 3f40 	tst.w	r2, #196608	; 0x30000
 80018ea:	d0c7      	beq.n	800187c <HAL_GPIO_Init+0xd4>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018ec:	2200      	movs	r2, #0
 80018ee:	9201      	str	r2, [sp, #4]
 80018f0:	4a1d      	ldr	r2, [pc, #116]	; (8001968 <HAL_GPIO_Init+0x1c0>)
 80018f2:	6c54      	ldr	r4, [r2, #68]	; 0x44
 80018f4:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
 80018f8:	6454      	str	r4, [r2, #68]	; 0x44
 80018fa:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80018fc:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8001900:	9201      	str	r2, [sp, #4]
 8001902:	9a01      	ldr	r2, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 8001904:	089c      	lsrs	r4, r3, #2
 8001906:	1ca5      	adds	r5, r4, #2
 8001908:	4a15      	ldr	r2, [pc, #84]	; (8001960 <HAL_GPIO_Init+0x1b8>)
 800190a:	f852 5025 	ldr.w	r5, [r2, r5, lsl #2]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800190e:	f003 0e03 	and.w	lr, r3, #3
 8001912:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8001916:	220f      	movs	r2, #15
 8001918:	fa02 f20e 	lsl.w	r2, r2, lr
 800191c:	ea25 0502 	bic.w	r5, r5, r2
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001920:	4a12      	ldr	r2, [pc, #72]	; (800196c <HAL_GPIO_Init+0x1c4>)
 8001922:	4290      	cmp	r0, r2
 8001924:	f43f af74 	beq.w	8001810 <HAL_GPIO_Init+0x68>
 8001928:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800192c:	4290      	cmp	r0, r2
 800192e:	d00e      	beq.n	800194e <HAL_GPIO_Init+0x1a6>
 8001930:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001934:	4290      	cmp	r0, r2
 8001936:	d00c      	beq.n	8001952 <HAL_GPIO_Init+0x1aa>
 8001938:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800193c:	4290      	cmp	r0, r2
 800193e:	d00a      	beq.n	8001956 <HAL_GPIO_Init+0x1ae>
 8001940:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001944:	4290      	cmp	r0, r2
 8001946:	f43f af61 	beq.w	800180c <HAL_GPIO_Init+0x64>
 800194a:	2207      	movs	r2, #7
 800194c:	e761      	b.n	8001812 <HAL_GPIO_Init+0x6a>
 800194e:	2201      	movs	r2, #1
 8001950:	e75f      	b.n	8001812 <HAL_GPIO_Init+0x6a>
 8001952:	2202      	movs	r2, #2
 8001954:	e75d      	b.n	8001812 <HAL_GPIO_Init+0x6a>
 8001956:	2203      	movs	r2, #3
 8001958:	e75b      	b.n	8001812 <HAL_GPIO_Init+0x6a>
      }
    }
  }
}
 800195a:	b002      	add	sp, #8
 800195c:	bd70      	pop	{r4, r5, r6, pc}
 800195e:	4770      	bx	lr
 8001960:	40013800 	.word	0x40013800
 8001964:	40013c00 	.word	0x40013c00
 8001968:	40023800 	.word	0x40023800
 800196c:	40020000 	.word	0x40020000

08001970 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001970:	b10a      	cbz	r2, 8001976 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001972:	6181      	str	r1, [r0, #24]
 8001974:	4770      	bx	lr
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001976:	0409      	lsls	r1, r1, #16
 8001978:	6181      	str	r1, [r0, #24]
  }
}
 800197a:	4770      	bx	lr

0800197c <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800197c:	6943      	ldr	r3, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800197e:	ea01 0203 	and.w	r2, r1, r3
 8001982:	ea21 0103 	bic.w	r1, r1, r3
 8001986:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800198a:	6181      	str	r1, [r0, #24]
}
 800198c:	4770      	bx	lr
	...

08001990 <HAL_RCC_OscConfig>:
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001990:	2800      	cmp	r0, #0
 8001992:	f000 81e0 	beq.w	8001d56 <HAL_RCC_OscConfig+0x3c6>
{
 8001996:	b570      	push	{r4, r5, r6, lr}
 8001998:	b082      	sub	sp, #8
 800199a:	4604      	mov	r4, r0
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800199c:	6803      	ldr	r3, [r0, #0]
 800199e:	f013 0f01 	tst.w	r3, #1
 80019a2:	d03b      	beq.n	8001a1c <HAL_RCC_OscConfig+0x8c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80019a4:	4b9f      	ldr	r3, [pc, #636]	; (8001c24 <HAL_RCC_OscConfig+0x294>)
 80019a6:	689b      	ldr	r3, [r3, #8]
 80019a8:	f003 030c 	and.w	r3, r3, #12
 80019ac:	2b04      	cmp	r3, #4
 80019ae:	d02c      	beq.n	8001a0a <HAL_RCC_OscConfig+0x7a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80019b0:	4b9c      	ldr	r3, [pc, #624]	; (8001c24 <HAL_RCC_OscConfig+0x294>)
 80019b2:	689b      	ldr	r3, [r3, #8]
 80019b4:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80019b8:	2b08      	cmp	r3, #8
 80019ba:	d021      	beq.n	8001a00 <HAL_RCC_OscConfig+0x70>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80019bc:	6863      	ldr	r3, [r4, #4]
 80019be:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80019c2:	d04f      	beq.n	8001a64 <HAL_RCC_OscConfig+0xd4>
 80019c4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80019c8:	d052      	beq.n	8001a70 <HAL_RCC_OscConfig+0xe0>
 80019ca:	4b96      	ldr	r3, [pc, #600]	; (8001c24 <HAL_RCC_OscConfig+0x294>)
 80019cc:	681a      	ldr	r2, [r3, #0]
 80019ce:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80019d2:	601a      	str	r2, [r3, #0]
 80019d4:	681a      	ldr	r2, [r3, #0]
 80019d6:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80019da:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80019dc:	6863      	ldr	r3, [r4, #4]
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d050      	beq.n	8001a84 <HAL_RCC_OscConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019e2:	f7ff fe6f 	bl	80016c4 <HAL_GetTick>
 80019e6:	4605      	mov	r5, r0

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019e8:	4b8e      	ldr	r3, [pc, #568]	; (8001c24 <HAL_RCC_OscConfig+0x294>)
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80019f0:	d114      	bne.n	8001a1c <HAL_RCC_OscConfig+0x8c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80019f2:	f7ff fe67 	bl	80016c4 <HAL_GetTick>
 80019f6:	1b40      	subs	r0, r0, r5
 80019f8:	2864      	cmp	r0, #100	; 0x64
 80019fa:	d9f5      	bls.n	80019e8 <HAL_RCC_OscConfig+0x58>
          {
            return HAL_TIMEOUT;
 80019fc:	2003      	movs	r0, #3
 80019fe:	e1b1      	b.n	8001d64 <HAL_RCC_OscConfig+0x3d4>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001a00:	4b88      	ldr	r3, [pc, #544]	; (8001c24 <HAL_RCC_OscConfig+0x294>)
 8001a02:	685b      	ldr	r3, [r3, #4]
 8001a04:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8001a08:	d0d8      	beq.n	80019bc <HAL_RCC_OscConfig+0x2c>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a0a:	4b86      	ldr	r3, [pc, #536]	; (8001c24 <HAL_RCC_OscConfig+0x294>)
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8001a12:	d003      	beq.n	8001a1c <HAL_RCC_OscConfig+0x8c>
 8001a14:	6863      	ldr	r3, [r4, #4]
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	f000 819f 	beq.w	8001d5a <HAL_RCC_OscConfig+0x3ca>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a1c:	6823      	ldr	r3, [r4, #0]
 8001a1e:	f013 0f02 	tst.w	r3, #2
 8001a22:	d054      	beq.n	8001ace <HAL_RCC_OscConfig+0x13e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001a24:	4b7f      	ldr	r3, [pc, #508]	; (8001c24 <HAL_RCC_OscConfig+0x294>)
 8001a26:	689b      	ldr	r3, [r3, #8]
 8001a28:	f013 0f0c 	tst.w	r3, #12
 8001a2c:	d03e      	beq.n	8001aac <HAL_RCC_OscConfig+0x11c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001a2e:	4b7d      	ldr	r3, [pc, #500]	; (8001c24 <HAL_RCC_OscConfig+0x294>)
 8001a30:	689b      	ldr	r3, [r3, #8]
 8001a32:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001a36:	2b08      	cmp	r3, #8
 8001a38:	d033      	beq.n	8001aa2 <HAL_RCC_OscConfig+0x112>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001a3a:	68e3      	ldr	r3, [r4, #12]
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d068      	beq.n	8001b12 <HAL_RCC_OscConfig+0x182>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001a40:	4b79      	ldr	r3, [pc, #484]	; (8001c28 <HAL_RCC_OscConfig+0x298>)
 8001a42:	2201      	movs	r2, #1
 8001a44:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a46:	f7ff fe3d 	bl	80016c4 <HAL_GetTick>
 8001a4a:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a4c:	4b75      	ldr	r3, [pc, #468]	; (8001c24 <HAL_RCC_OscConfig+0x294>)
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	f013 0f02 	tst.w	r3, #2
 8001a54:	d154      	bne.n	8001b00 <HAL_RCC_OscConfig+0x170>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001a56:	f7ff fe35 	bl	80016c4 <HAL_GetTick>
 8001a5a:	1b40      	subs	r0, r0, r5
 8001a5c:	2802      	cmp	r0, #2
 8001a5e:	d9f5      	bls.n	8001a4c <HAL_RCC_OscConfig+0xbc>
          {
            return HAL_TIMEOUT;
 8001a60:	2003      	movs	r0, #3
 8001a62:	e17f      	b.n	8001d64 <HAL_RCC_OscConfig+0x3d4>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a64:	4a6f      	ldr	r2, [pc, #444]	; (8001c24 <HAL_RCC_OscConfig+0x294>)
 8001a66:	6813      	ldr	r3, [r2, #0]
 8001a68:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a6c:	6013      	str	r3, [r2, #0]
 8001a6e:	e7b5      	b.n	80019dc <HAL_RCC_OscConfig+0x4c>
 8001a70:	4b6c      	ldr	r3, [pc, #432]	; (8001c24 <HAL_RCC_OscConfig+0x294>)
 8001a72:	681a      	ldr	r2, [r3, #0]
 8001a74:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8001a78:	601a      	str	r2, [r3, #0]
 8001a7a:	681a      	ldr	r2, [r3, #0]
 8001a7c:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001a80:	601a      	str	r2, [r3, #0]
 8001a82:	e7ab      	b.n	80019dc <HAL_RCC_OscConfig+0x4c>
        tickstart = HAL_GetTick();
 8001a84:	f7ff fe1e 	bl	80016c4 <HAL_GetTick>
 8001a88:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a8a:	4b66      	ldr	r3, [pc, #408]	; (8001c24 <HAL_RCC_OscConfig+0x294>)
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8001a92:	d0c3      	beq.n	8001a1c <HAL_RCC_OscConfig+0x8c>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001a94:	f7ff fe16 	bl	80016c4 <HAL_GetTick>
 8001a98:	1b40      	subs	r0, r0, r5
 8001a9a:	2864      	cmp	r0, #100	; 0x64
 8001a9c:	d9f5      	bls.n	8001a8a <HAL_RCC_OscConfig+0xfa>
            return HAL_TIMEOUT;
 8001a9e:	2003      	movs	r0, #3
 8001aa0:	e160      	b.n	8001d64 <HAL_RCC_OscConfig+0x3d4>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001aa2:	4b60      	ldr	r3, [pc, #384]	; (8001c24 <HAL_RCC_OscConfig+0x294>)
 8001aa4:	685b      	ldr	r3, [r3, #4]
 8001aa6:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8001aaa:	d1c6      	bne.n	8001a3a <HAL_RCC_OscConfig+0xaa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001aac:	4b5d      	ldr	r3, [pc, #372]	; (8001c24 <HAL_RCC_OscConfig+0x294>)
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	f013 0f02 	tst.w	r3, #2
 8001ab4:	d003      	beq.n	8001abe <HAL_RCC_OscConfig+0x12e>
 8001ab6:	68e3      	ldr	r3, [r4, #12]
 8001ab8:	2b01      	cmp	r3, #1
 8001aba:	f040 8150 	bne.w	8001d5e <HAL_RCC_OscConfig+0x3ce>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001abe:	4a59      	ldr	r2, [pc, #356]	; (8001c24 <HAL_RCC_OscConfig+0x294>)
 8001ac0:	6813      	ldr	r3, [r2, #0]
 8001ac2:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001ac6:	6921      	ldr	r1, [r4, #16]
 8001ac8:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001acc:	6013      	str	r3, [r2, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001ace:	6823      	ldr	r3, [r4, #0]
 8001ad0:	f013 0f08 	tst.w	r3, #8
 8001ad4:	d042      	beq.n	8001b5c <HAL_RCC_OscConfig+0x1cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001ad6:	6963      	ldr	r3, [r4, #20]
 8001ad8:	b36b      	cbz	r3, 8001b36 <HAL_RCC_OscConfig+0x1a6>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001ada:	4b53      	ldr	r3, [pc, #332]	; (8001c28 <HAL_RCC_OscConfig+0x298>)
 8001adc:	2201      	movs	r2, #1
 8001ade:	f8c3 2e80 	str.w	r2, [r3, #3712]	; 0xe80

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ae2:	f7ff fdef 	bl	80016c4 <HAL_GetTick>
 8001ae6:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ae8:	4b4e      	ldr	r3, [pc, #312]	; (8001c24 <HAL_RCC_OscConfig+0x294>)
 8001aea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001aec:	f013 0f02 	tst.w	r3, #2
 8001af0:	d134      	bne.n	8001b5c <HAL_RCC_OscConfig+0x1cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001af2:	f7ff fde7 	bl	80016c4 <HAL_GetTick>
 8001af6:	1b40      	subs	r0, r0, r5
 8001af8:	2802      	cmp	r0, #2
 8001afa:	d9f5      	bls.n	8001ae8 <HAL_RCC_OscConfig+0x158>
        {
          return HAL_TIMEOUT;
 8001afc:	2003      	movs	r0, #3
 8001afe:	e131      	b.n	8001d64 <HAL_RCC_OscConfig+0x3d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b00:	4a48      	ldr	r2, [pc, #288]	; (8001c24 <HAL_RCC_OscConfig+0x294>)
 8001b02:	6813      	ldr	r3, [r2, #0]
 8001b04:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001b08:	6921      	ldr	r1, [r4, #16]
 8001b0a:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001b0e:	6013      	str	r3, [r2, #0]
 8001b10:	e7dd      	b.n	8001ace <HAL_RCC_OscConfig+0x13e>
        __HAL_RCC_HSI_DISABLE();
 8001b12:	4b45      	ldr	r3, [pc, #276]	; (8001c28 <HAL_RCC_OscConfig+0x298>)
 8001b14:	2200      	movs	r2, #0
 8001b16:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001b18:	f7ff fdd4 	bl	80016c4 <HAL_GetTick>
 8001b1c:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b1e:	4b41      	ldr	r3, [pc, #260]	; (8001c24 <HAL_RCC_OscConfig+0x294>)
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	f013 0f02 	tst.w	r3, #2
 8001b26:	d0d2      	beq.n	8001ace <HAL_RCC_OscConfig+0x13e>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001b28:	f7ff fdcc 	bl	80016c4 <HAL_GetTick>
 8001b2c:	1b40      	subs	r0, r0, r5
 8001b2e:	2802      	cmp	r0, #2
 8001b30:	d9f5      	bls.n	8001b1e <HAL_RCC_OscConfig+0x18e>
            return HAL_TIMEOUT;
 8001b32:	2003      	movs	r0, #3
 8001b34:	e116      	b.n	8001d64 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001b36:	4b3c      	ldr	r3, [pc, #240]	; (8001c28 <HAL_RCC_OscConfig+0x298>)
 8001b38:	2200      	movs	r2, #0
 8001b3a:	f8c3 2e80 	str.w	r2, [r3, #3712]	; 0xe80

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b3e:	f7ff fdc1 	bl	80016c4 <HAL_GetTick>
 8001b42:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b44:	4b37      	ldr	r3, [pc, #220]	; (8001c24 <HAL_RCC_OscConfig+0x294>)
 8001b46:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001b48:	f013 0f02 	tst.w	r3, #2
 8001b4c:	d006      	beq.n	8001b5c <HAL_RCC_OscConfig+0x1cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001b4e:	f7ff fdb9 	bl	80016c4 <HAL_GetTick>
 8001b52:	1b40      	subs	r0, r0, r5
 8001b54:	2802      	cmp	r0, #2
 8001b56:	d9f5      	bls.n	8001b44 <HAL_RCC_OscConfig+0x1b4>
        {
          return HAL_TIMEOUT;
 8001b58:	2003      	movs	r0, #3
 8001b5a:	e103      	b.n	8001d64 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b5c:	6823      	ldr	r3, [r4, #0]
 8001b5e:	f013 0f04 	tst.w	r3, #4
 8001b62:	d077      	beq.n	8001c54 <HAL_RCC_OscConfig+0x2c4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001b64:	4b2f      	ldr	r3, [pc, #188]	; (8001c24 <HAL_RCC_OscConfig+0x294>)
 8001b66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b68:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8001b6c:	d133      	bne.n	8001bd6 <HAL_RCC_OscConfig+0x246>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b6e:	2300      	movs	r3, #0
 8001b70:	9301      	str	r3, [sp, #4]
 8001b72:	4b2c      	ldr	r3, [pc, #176]	; (8001c24 <HAL_RCC_OscConfig+0x294>)
 8001b74:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001b76:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001b7a:	641a      	str	r2, [r3, #64]	; 0x40
 8001b7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b82:	9301      	str	r3, [sp, #4]
 8001b84:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8001b86:	2501      	movs	r5, #1
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b88:	4b28      	ldr	r3, [pc, #160]	; (8001c2c <HAL_RCC_OscConfig+0x29c>)
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	f413 7f80 	tst.w	r3, #256	; 0x100
 8001b90:	d023      	beq.n	8001bda <HAL_RCC_OscConfig+0x24a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b92:	68a3      	ldr	r3, [r4, #8]
 8001b94:	2b01      	cmp	r3, #1
 8001b96:	d034      	beq.n	8001c02 <HAL_RCC_OscConfig+0x272>
 8001b98:	2b05      	cmp	r3, #5
 8001b9a:	d038      	beq.n	8001c0e <HAL_RCC_OscConfig+0x27e>
 8001b9c:	4b21      	ldr	r3, [pc, #132]	; (8001c24 <HAL_RCC_OscConfig+0x294>)
 8001b9e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001ba0:	f022 0201 	bic.w	r2, r2, #1
 8001ba4:	671a      	str	r2, [r3, #112]	; 0x70
 8001ba6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001ba8:	f022 0204 	bic.w	r2, r2, #4
 8001bac:	671a      	str	r2, [r3, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001bae:	68a3      	ldr	r3, [r4, #8]
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d03d      	beq.n	8001c30 <HAL_RCC_OscConfig+0x2a0>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bb4:	f7ff fd86 	bl	80016c4 <HAL_GetTick>
 8001bb8:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001bba:	4b1a      	ldr	r3, [pc, #104]	; (8001c24 <HAL_RCC_OscConfig+0x294>)
 8001bbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bbe:	f013 0f02 	tst.w	r3, #2
 8001bc2:	d146      	bne.n	8001c52 <HAL_RCC_OscConfig+0x2c2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001bc4:	f7ff fd7e 	bl	80016c4 <HAL_GetTick>
 8001bc8:	1b80      	subs	r0, r0, r6
 8001bca:	f241 3388 	movw	r3, #5000	; 0x1388
 8001bce:	4298      	cmp	r0, r3
 8001bd0:	d9f3      	bls.n	8001bba <HAL_RCC_OscConfig+0x22a>
        {
          return HAL_TIMEOUT;
 8001bd2:	2003      	movs	r0, #3
 8001bd4:	e0c6      	b.n	8001d64 <HAL_RCC_OscConfig+0x3d4>
    FlagStatus       pwrclkchanged = RESET;
 8001bd6:	2500      	movs	r5, #0
 8001bd8:	e7d6      	b.n	8001b88 <HAL_RCC_OscConfig+0x1f8>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001bda:	4a14      	ldr	r2, [pc, #80]	; (8001c2c <HAL_RCC_OscConfig+0x29c>)
 8001bdc:	6813      	ldr	r3, [r2, #0]
 8001bde:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001be2:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8001be4:	f7ff fd6e 	bl	80016c4 <HAL_GetTick>
 8001be8:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001bea:	4b10      	ldr	r3, [pc, #64]	; (8001c2c <HAL_RCC_OscConfig+0x29c>)
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	f413 7f80 	tst.w	r3, #256	; 0x100
 8001bf2:	d1ce      	bne.n	8001b92 <HAL_RCC_OscConfig+0x202>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001bf4:	f7ff fd66 	bl	80016c4 <HAL_GetTick>
 8001bf8:	1b80      	subs	r0, r0, r6
 8001bfa:	2802      	cmp	r0, #2
 8001bfc:	d9f5      	bls.n	8001bea <HAL_RCC_OscConfig+0x25a>
          return HAL_TIMEOUT;
 8001bfe:	2003      	movs	r0, #3
 8001c00:	e0b0      	b.n	8001d64 <HAL_RCC_OscConfig+0x3d4>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c02:	4a08      	ldr	r2, [pc, #32]	; (8001c24 <HAL_RCC_OscConfig+0x294>)
 8001c04:	6f13      	ldr	r3, [r2, #112]	; 0x70
 8001c06:	f043 0301 	orr.w	r3, r3, #1
 8001c0a:	6713      	str	r3, [r2, #112]	; 0x70
 8001c0c:	e7cf      	b.n	8001bae <HAL_RCC_OscConfig+0x21e>
 8001c0e:	4b05      	ldr	r3, [pc, #20]	; (8001c24 <HAL_RCC_OscConfig+0x294>)
 8001c10:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001c12:	f042 0204 	orr.w	r2, r2, #4
 8001c16:	671a      	str	r2, [r3, #112]	; 0x70
 8001c18:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001c1a:	f042 0201 	orr.w	r2, r2, #1
 8001c1e:	671a      	str	r2, [r3, #112]	; 0x70
 8001c20:	e7c5      	b.n	8001bae <HAL_RCC_OscConfig+0x21e>
 8001c22:	bf00      	nop
 8001c24:	40023800 	.word	0x40023800
 8001c28:	42470000 	.word	0x42470000
 8001c2c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c30:	f7ff fd48 	bl	80016c4 <HAL_GetTick>
 8001c34:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c36:	4b52      	ldr	r3, [pc, #328]	; (8001d80 <HAL_RCC_OscConfig+0x3f0>)
 8001c38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c3a:	f013 0f02 	tst.w	r3, #2
 8001c3e:	d008      	beq.n	8001c52 <HAL_RCC_OscConfig+0x2c2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001c40:	f7ff fd40 	bl	80016c4 <HAL_GetTick>
 8001c44:	1b80      	subs	r0, r0, r6
 8001c46:	f241 3388 	movw	r3, #5000	; 0x1388
 8001c4a:	4298      	cmp	r0, r3
 8001c4c:	d9f3      	bls.n	8001c36 <HAL_RCC_OscConfig+0x2a6>
        {
          return HAL_TIMEOUT;
 8001c4e:	2003      	movs	r0, #3
 8001c50:	e088      	b.n	8001d64 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001c52:	b9ed      	cbnz	r5, 8001c90 <HAL_RCC_OscConfig+0x300>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001c54:	69a3      	ldr	r3, [r4, #24]
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	f000 8083 	beq.w	8001d62 <HAL_RCC_OscConfig+0x3d2>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001c5c:	4a48      	ldr	r2, [pc, #288]	; (8001d80 <HAL_RCC_OscConfig+0x3f0>)
 8001c5e:	6892      	ldr	r2, [r2, #8]
 8001c60:	f002 020c 	and.w	r2, r2, #12
 8001c64:	2a08      	cmp	r2, #8
 8001c66:	d051      	beq.n	8001d0c <HAL_RCC_OscConfig+0x37c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001c68:	2b02      	cmp	r3, #2
 8001c6a:	d017      	beq.n	8001c9c <HAL_RCC_OscConfig+0x30c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c6c:	4b45      	ldr	r3, [pc, #276]	; (8001d84 <HAL_RCC_OscConfig+0x3f4>)
 8001c6e:	2200      	movs	r2, #0
 8001c70:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c72:	f7ff fd27 	bl	80016c4 <HAL_GetTick>
 8001c76:	4604      	mov	r4, r0

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c78:	4b41      	ldr	r3, [pc, #260]	; (8001d80 <HAL_RCC_OscConfig+0x3f0>)
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001c80:	d042      	beq.n	8001d08 <HAL_RCC_OscConfig+0x378>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c82:	f7ff fd1f 	bl	80016c4 <HAL_GetTick>
 8001c86:	1b00      	subs	r0, r0, r4
 8001c88:	2802      	cmp	r0, #2
 8001c8a:	d9f5      	bls.n	8001c78 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8001c8c:	2003      	movs	r0, #3
 8001c8e:	e069      	b.n	8001d64 <HAL_RCC_OscConfig+0x3d4>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c90:	4a3b      	ldr	r2, [pc, #236]	; (8001d80 <HAL_RCC_OscConfig+0x3f0>)
 8001c92:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8001c94:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001c98:	6413      	str	r3, [r2, #64]	; 0x40
 8001c9a:	e7db      	b.n	8001c54 <HAL_RCC_OscConfig+0x2c4>
        __HAL_RCC_PLL_DISABLE();
 8001c9c:	4b39      	ldr	r3, [pc, #228]	; (8001d84 <HAL_RCC_OscConfig+0x3f4>)
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	661a      	str	r2, [r3, #96]	; 0x60
        tickstart = HAL_GetTick();
 8001ca2:	f7ff fd0f 	bl	80016c4 <HAL_GetTick>
 8001ca6:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ca8:	4b35      	ldr	r3, [pc, #212]	; (8001d80 <HAL_RCC_OscConfig+0x3f0>)
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001cb0:	d006      	beq.n	8001cc0 <HAL_RCC_OscConfig+0x330>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001cb2:	f7ff fd07 	bl	80016c4 <HAL_GetTick>
 8001cb6:	1b40      	subs	r0, r0, r5
 8001cb8:	2802      	cmp	r0, #2
 8001cba:	d9f5      	bls.n	8001ca8 <HAL_RCC_OscConfig+0x318>
            return HAL_TIMEOUT;
 8001cbc:	2003      	movs	r0, #3
 8001cbe:	e051      	b.n	8001d64 <HAL_RCC_OscConfig+0x3d4>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001cc0:	69e3      	ldr	r3, [r4, #28]
 8001cc2:	6a22      	ldr	r2, [r4, #32]
 8001cc4:	4313      	orrs	r3, r2
 8001cc6:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001cc8:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8001ccc:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8001cce:	0852      	lsrs	r2, r2, #1
 8001cd0:	3a01      	subs	r2, #1
 8001cd2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8001cd6:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001cd8:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8001cdc:	4a28      	ldr	r2, [pc, #160]	; (8001d80 <HAL_RCC_OscConfig+0x3f0>)
 8001cde:	6053      	str	r3, [r2, #4]
        __HAL_RCC_PLL_ENABLE();
 8001ce0:	4b28      	ldr	r3, [pc, #160]	; (8001d84 <HAL_RCC_OscConfig+0x3f4>)
 8001ce2:	2201      	movs	r2, #1
 8001ce4:	661a      	str	r2, [r3, #96]	; 0x60
        tickstart = HAL_GetTick();
 8001ce6:	f7ff fced 	bl	80016c4 <HAL_GetTick>
 8001cea:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001cec:	4b24      	ldr	r3, [pc, #144]	; (8001d80 <HAL_RCC_OscConfig+0x3f0>)
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001cf4:	d106      	bne.n	8001d04 <HAL_RCC_OscConfig+0x374>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001cf6:	f7ff fce5 	bl	80016c4 <HAL_GetTick>
 8001cfa:	1b00      	subs	r0, r0, r4
 8001cfc:	2802      	cmp	r0, #2
 8001cfe:	d9f5      	bls.n	8001cec <HAL_RCC_OscConfig+0x35c>
            return HAL_TIMEOUT;
 8001d00:	2003      	movs	r0, #3
 8001d02:	e02f      	b.n	8001d64 <HAL_RCC_OscConfig+0x3d4>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 8001d04:	2000      	movs	r0, #0
 8001d06:	e02d      	b.n	8001d64 <HAL_RCC_OscConfig+0x3d4>
 8001d08:	2000      	movs	r0, #0
 8001d0a:	e02b      	b.n	8001d64 <HAL_RCC_OscConfig+0x3d4>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001d0c:	2b01      	cmp	r3, #1
 8001d0e:	d02b      	beq.n	8001d68 <HAL_RCC_OscConfig+0x3d8>
        pll_config = RCC->PLLCFGR;
 8001d10:	4b1b      	ldr	r3, [pc, #108]	; (8001d80 <HAL_RCC_OscConfig+0x3f0>)
 8001d12:	685b      	ldr	r3, [r3, #4]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d14:	f403 0180 	and.w	r1, r3, #4194304	; 0x400000
 8001d18:	69e2      	ldr	r2, [r4, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001d1a:	4291      	cmp	r1, r2
 8001d1c:	d126      	bne.n	8001d6c <HAL_RCC_OscConfig+0x3dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001d1e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001d22:	6a21      	ldr	r1, [r4, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d24:	428a      	cmp	r2, r1
 8001d26:	d123      	bne.n	8001d70 <HAL_RCC_OscConfig+0x3e0>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001d28:	6a61      	ldr	r1, [r4, #36]	; 0x24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001d2a:	f647 72c0 	movw	r2, #32704	; 0x7fc0
 8001d2e:	401a      	ands	r2, r3
 8001d30:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 8001d34:	d11e      	bne.n	8001d74 <HAL_RCC_OscConfig+0x3e4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001d36:	f403 3140 	and.w	r1, r3, #196608	; 0x30000
 8001d3a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8001d3c:	0852      	lsrs	r2, r2, #1
 8001d3e:	3a01      	subs	r2, #1
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001d40:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 8001d44:	d118      	bne.n	8001d78 <HAL_RCC_OscConfig+0x3e8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001d46:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 8001d4a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001d4c:	ebb3 6f02 	cmp.w	r3, r2, lsl #24
 8001d50:	d114      	bne.n	8001d7c <HAL_RCC_OscConfig+0x3ec>
  return HAL_OK;
 8001d52:	2000      	movs	r0, #0
 8001d54:	e006      	b.n	8001d64 <HAL_RCC_OscConfig+0x3d4>
    return HAL_ERROR;
 8001d56:	2001      	movs	r0, #1
}
 8001d58:	4770      	bx	lr
        return HAL_ERROR;
 8001d5a:	2001      	movs	r0, #1
 8001d5c:	e002      	b.n	8001d64 <HAL_RCC_OscConfig+0x3d4>
        return HAL_ERROR;
 8001d5e:	2001      	movs	r0, #1
 8001d60:	e000      	b.n	8001d64 <HAL_RCC_OscConfig+0x3d4>
  return HAL_OK;
 8001d62:	2000      	movs	r0, #0
}
 8001d64:	b002      	add	sp, #8
 8001d66:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 8001d68:	2001      	movs	r0, #1
 8001d6a:	e7fb      	b.n	8001d64 <HAL_RCC_OscConfig+0x3d4>
          return HAL_ERROR;
 8001d6c:	2001      	movs	r0, #1
 8001d6e:	e7f9      	b.n	8001d64 <HAL_RCC_OscConfig+0x3d4>
 8001d70:	2001      	movs	r0, #1
 8001d72:	e7f7      	b.n	8001d64 <HAL_RCC_OscConfig+0x3d4>
 8001d74:	2001      	movs	r0, #1
 8001d76:	e7f5      	b.n	8001d64 <HAL_RCC_OscConfig+0x3d4>
 8001d78:	2001      	movs	r0, #1
 8001d7a:	e7f3      	b.n	8001d64 <HAL_RCC_OscConfig+0x3d4>
 8001d7c:	2001      	movs	r0, #1
 8001d7e:	e7f1      	b.n	8001d64 <HAL_RCC_OscConfig+0x3d4>
 8001d80:	40023800 	.word	0x40023800
 8001d84:	42470000 	.word	0x42470000

08001d88 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001d88:	b508      	push	{r3, lr}
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001d8a:	4b26      	ldr	r3, [pc, #152]	; (8001e24 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001d8c:	689b      	ldr	r3, [r3, #8]
 8001d8e:	f003 030c 	and.w	r3, r3, #12
 8001d92:	2b04      	cmp	r3, #4
 8001d94:	d041      	beq.n	8001e1a <HAL_RCC_GetSysClockFreq+0x92>
 8001d96:	2b08      	cmp	r3, #8
 8001d98:	d141      	bne.n	8001e1e <HAL_RCC_GetSysClockFreq+0x96>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001d9a:	4b22      	ldr	r3, [pc, #136]	; (8001e24 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001d9c:	685a      	ldr	r2, [r3, #4]
 8001d9e:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001da2:	685b      	ldr	r3, [r3, #4]
 8001da4:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8001da8:	d012      	beq.n	8001dd0 <HAL_RCC_GetSysClockFreq+0x48>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001daa:	4b1e      	ldr	r3, [pc, #120]	; (8001e24 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001dac:	6859      	ldr	r1, [r3, #4]
 8001dae:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8001db2:	481d      	ldr	r0, [pc, #116]	; (8001e28 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001db4:	2300      	movs	r3, #0
 8001db6:	fba1 0100 	umull	r0, r1, r1, r0
 8001dba:	f7fe fefd 	bl	8000bb8 <__aeabi_uldivmod>
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001dbe:	4b19      	ldr	r3, [pc, #100]	; (8001e24 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001dc0:	685b      	ldr	r3, [r3, #4]
 8001dc2:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8001dc6:	3301      	adds	r3, #1
 8001dc8:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco/pllp;
 8001dca:	fbb0 f0f3 	udiv	r0, r0, r3
      break;
 8001dce:	e027      	b.n	8001e20 <HAL_RCC_GetSysClockFreq+0x98>
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001dd0:	4b14      	ldr	r3, [pc, #80]	; (8001e24 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001dd2:	6858      	ldr	r0, [r3, #4]
 8001dd4:	f3c0 1088 	ubfx	r0, r0, #6, #9
 8001dd8:	ea4f 1c40 	mov.w	ip, r0, lsl #5
 8001ddc:	ebbc 0c00 	subs.w	ip, ip, r0
 8001de0:	eb6e 0e0e 	sbc.w	lr, lr, lr
 8001de4:	ea4f 138e 	mov.w	r3, lr, lsl #6
 8001de8:	ea43 639c 	orr.w	r3, r3, ip, lsr #26
 8001dec:	ea4f 118c 	mov.w	r1, ip, lsl #6
 8001df0:	ebb1 010c 	subs.w	r1, r1, ip
 8001df4:	eb63 030e 	sbc.w	r3, r3, lr
 8001df8:	00db      	lsls	r3, r3, #3
 8001dfa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001dfe:	00c9      	lsls	r1, r1, #3
 8001e00:	eb11 0c00 	adds.w	ip, r1, r0
 8001e04:	f143 0300 	adc.w	r3, r3, #0
 8001e08:	0299      	lsls	r1, r3, #10
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	ea4f 208c 	mov.w	r0, ip, lsl #10
 8001e10:	ea41 519c 	orr.w	r1, r1, ip, lsr #22
 8001e14:	f7fe fed0 	bl	8000bb8 <__aeabi_uldivmod>
 8001e18:	e7d1      	b.n	8001dbe <HAL_RCC_GetSysClockFreq+0x36>
      sysclockfreq = HSE_VALUE;
 8001e1a:	4803      	ldr	r0, [pc, #12]	; (8001e28 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001e1c:	e000      	b.n	8001e20 <HAL_RCC_GetSysClockFreq+0x98>
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001e1e:	4803      	ldr	r0, [pc, #12]	; (8001e2c <HAL_RCC_GetSysClockFreq+0xa4>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8001e20:	bd08      	pop	{r3, pc}
 8001e22:	bf00      	nop
 8001e24:	40023800 	.word	0x40023800
 8001e28:	017d7840 	.word	0x017d7840
 8001e2c:	00f42400 	.word	0x00f42400

08001e30 <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 8001e30:	2800      	cmp	r0, #0
 8001e32:	f000 809b 	beq.w	8001f6c <HAL_RCC_ClockConfig+0x13c>
{
 8001e36:	b570      	push	{r4, r5, r6, lr}
 8001e38:	460d      	mov	r5, r1
 8001e3a:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001e3c:	4b4f      	ldr	r3, [pc, #316]	; (8001f7c <HAL_RCC_ClockConfig+0x14c>)
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	f003 0307 	and.w	r3, r3, #7
 8001e44:	428b      	cmp	r3, r1
 8001e46:	d208      	bcs.n	8001e5a <HAL_RCC_ClockConfig+0x2a>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e48:	b2cb      	uxtb	r3, r1
 8001e4a:	4a4c      	ldr	r2, [pc, #304]	; (8001f7c <HAL_RCC_ClockConfig+0x14c>)
 8001e4c:	7013      	strb	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e4e:	6813      	ldr	r3, [r2, #0]
 8001e50:	f003 0307 	and.w	r3, r3, #7
 8001e54:	428b      	cmp	r3, r1
 8001e56:	f040 808b 	bne.w	8001f70 <HAL_RCC_ClockConfig+0x140>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e5a:	6823      	ldr	r3, [r4, #0]
 8001e5c:	f013 0f02 	tst.w	r3, #2
 8001e60:	d017      	beq.n	8001e92 <HAL_RCC_ClockConfig+0x62>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e62:	f013 0f04 	tst.w	r3, #4
 8001e66:	d004      	beq.n	8001e72 <HAL_RCC_ClockConfig+0x42>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001e68:	4a45      	ldr	r2, [pc, #276]	; (8001f80 <HAL_RCC_ClockConfig+0x150>)
 8001e6a:	6893      	ldr	r3, [r2, #8]
 8001e6c:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001e70:	6093      	str	r3, [r2, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e72:	6823      	ldr	r3, [r4, #0]
 8001e74:	f013 0f08 	tst.w	r3, #8
 8001e78:	d004      	beq.n	8001e84 <HAL_RCC_ClockConfig+0x54>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001e7a:	4a41      	ldr	r2, [pc, #260]	; (8001f80 <HAL_RCC_ClockConfig+0x150>)
 8001e7c:	6893      	ldr	r3, [r2, #8]
 8001e7e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001e82:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e84:	4a3e      	ldr	r2, [pc, #248]	; (8001f80 <HAL_RCC_ClockConfig+0x150>)
 8001e86:	6893      	ldr	r3, [r2, #8]
 8001e88:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001e8c:	68a1      	ldr	r1, [r4, #8]
 8001e8e:	430b      	orrs	r3, r1
 8001e90:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e92:	6823      	ldr	r3, [r4, #0]
 8001e94:	f013 0f01 	tst.w	r3, #1
 8001e98:	d032      	beq.n	8001f00 <HAL_RCC_ClockConfig+0xd0>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e9a:	6863      	ldr	r3, [r4, #4]
 8001e9c:	2b01      	cmp	r3, #1
 8001e9e:	d021      	beq.n	8001ee4 <HAL_RCC_ClockConfig+0xb4>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001ea0:	1e9a      	subs	r2, r3, #2
 8001ea2:	2a01      	cmp	r2, #1
 8001ea4:	d925      	bls.n	8001ef2 <HAL_RCC_ClockConfig+0xc2>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ea6:	4a36      	ldr	r2, [pc, #216]	; (8001f80 <HAL_RCC_ClockConfig+0x150>)
 8001ea8:	6812      	ldr	r2, [r2, #0]
 8001eaa:	f012 0f02 	tst.w	r2, #2
 8001eae:	d061      	beq.n	8001f74 <HAL_RCC_ClockConfig+0x144>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001eb0:	4933      	ldr	r1, [pc, #204]	; (8001f80 <HAL_RCC_ClockConfig+0x150>)
 8001eb2:	688a      	ldr	r2, [r1, #8]
 8001eb4:	f022 0203 	bic.w	r2, r2, #3
 8001eb8:	4313      	orrs	r3, r2
 8001eba:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 8001ebc:	f7ff fc02 	bl	80016c4 <HAL_GetTick>
 8001ec0:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ec2:	4b2f      	ldr	r3, [pc, #188]	; (8001f80 <HAL_RCC_ClockConfig+0x150>)
 8001ec4:	689b      	ldr	r3, [r3, #8]
 8001ec6:	f003 030c 	and.w	r3, r3, #12
 8001eca:	6862      	ldr	r2, [r4, #4]
 8001ecc:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8001ed0:	d016      	beq.n	8001f00 <HAL_RCC_ClockConfig+0xd0>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ed2:	f7ff fbf7 	bl	80016c4 <HAL_GetTick>
 8001ed6:	1b80      	subs	r0, r0, r6
 8001ed8:	f241 3388 	movw	r3, #5000	; 0x1388
 8001edc:	4298      	cmp	r0, r3
 8001ede:	d9f0      	bls.n	8001ec2 <HAL_RCC_ClockConfig+0x92>
        return HAL_TIMEOUT;
 8001ee0:	2003      	movs	r0, #3
 8001ee2:	e042      	b.n	8001f6a <HAL_RCC_ClockConfig+0x13a>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ee4:	4a26      	ldr	r2, [pc, #152]	; (8001f80 <HAL_RCC_ClockConfig+0x150>)
 8001ee6:	6812      	ldr	r2, [r2, #0]
 8001ee8:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 8001eec:	d1e0      	bne.n	8001eb0 <HAL_RCC_ClockConfig+0x80>
        return HAL_ERROR;
 8001eee:	2001      	movs	r0, #1
 8001ef0:	e03b      	b.n	8001f6a <HAL_RCC_ClockConfig+0x13a>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ef2:	4a23      	ldr	r2, [pc, #140]	; (8001f80 <HAL_RCC_ClockConfig+0x150>)
 8001ef4:	6812      	ldr	r2, [r2, #0]
 8001ef6:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8001efa:	d1d9      	bne.n	8001eb0 <HAL_RCC_ClockConfig+0x80>
        return HAL_ERROR;
 8001efc:	2001      	movs	r0, #1
 8001efe:	e034      	b.n	8001f6a <HAL_RCC_ClockConfig+0x13a>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001f00:	4b1e      	ldr	r3, [pc, #120]	; (8001f7c <HAL_RCC_ClockConfig+0x14c>)
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	f003 0307 	and.w	r3, r3, #7
 8001f08:	42ab      	cmp	r3, r5
 8001f0a:	d907      	bls.n	8001f1c <HAL_RCC_ClockConfig+0xec>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f0c:	b2ea      	uxtb	r2, r5
 8001f0e:	4b1b      	ldr	r3, [pc, #108]	; (8001f7c <HAL_RCC_ClockConfig+0x14c>)
 8001f10:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	f003 0307 	and.w	r3, r3, #7
 8001f18:	42ab      	cmp	r3, r5
 8001f1a:	d12d      	bne.n	8001f78 <HAL_RCC_ClockConfig+0x148>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f1c:	6823      	ldr	r3, [r4, #0]
 8001f1e:	f013 0f04 	tst.w	r3, #4
 8001f22:	d006      	beq.n	8001f32 <HAL_RCC_ClockConfig+0x102>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001f24:	4a16      	ldr	r2, [pc, #88]	; (8001f80 <HAL_RCC_ClockConfig+0x150>)
 8001f26:	6893      	ldr	r3, [r2, #8]
 8001f28:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8001f2c:	68e1      	ldr	r1, [r4, #12]
 8001f2e:	430b      	orrs	r3, r1
 8001f30:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f32:	6823      	ldr	r3, [r4, #0]
 8001f34:	f013 0f08 	tst.w	r3, #8
 8001f38:	d007      	beq.n	8001f4a <HAL_RCC_ClockConfig+0x11a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001f3a:	4a11      	ldr	r2, [pc, #68]	; (8001f80 <HAL_RCC_ClockConfig+0x150>)
 8001f3c:	6893      	ldr	r3, [r2, #8]
 8001f3e:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8001f42:	6921      	ldr	r1, [r4, #16]
 8001f44:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001f48:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001f4a:	f7ff ff1d 	bl	8001d88 <HAL_RCC_GetSysClockFreq>
 8001f4e:	4b0c      	ldr	r3, [pc, #48]	; (8001f80 <HAL_RCC_ClockConfig+0x150>)
 8001f50:	689b      	ldr	r3, [r3, #8]
 8001f52:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001f56:	4a0b      	ldr	r2, [pc, #44]	; (8001f84 <HAL_RCC_ClockConfig+0x154>)
 8001f58:	5cd3      	ldrb	r3, [r2, r3]
 8001f5a:	40d8      	lsrs	r0, r3
 8001f5c:	4b0a      	ldr	r3, [pc, #40]	; (8001f88 <HAL_RCC_ClockConfig+0x158>)
 8001f5e:	6018      	str	r0, [r3, #0]
  HAL_InitTick (uwTickPrio);
 8001f60:	4b0a      	ldr	r3, [pc, #40]	; (8001f8c <HAL_RCC_ClockConfig+0x15c>)
 8001f62:	6818      	ldr	r0, [r3, #0]
 8001f64:	f7ff fb62 	bl	800162c <HAL_InitTick>
  return HAL_OK;
 8001f68:	2000      	movs	r0, #0
}
 8001f6a:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8001f6c:	2001      	movs	r0, #1
}
 8001f6e:	4770      	bx	lr
      return HAL_ERROR;
 8001f70:	2001      	movs	r0, #1
 8001f72:	e7fa      	b.n	8001f6a <HAL_RCC_ClockConfig+0x13a>
        return HAL_ERROR;
 8001f74:	2001      	movs	r0, #1
 8001f76:	e7f8      	b.n	8001f6a <HAL_RCC_ClockConfig+0x13a>
      return HAL_ERROR;
 8001f78:	2001      	movs	r0, #1
 8001f7a:	e7f6      	b.n	8001f6a <HAL_RCC_ClockConfig+0x13a>
 8001f7c:	40023c00 	.word	0x40023c00
 8001f80:	40023800 	.word	0x40023800
 8001f84:	08005b44 	.word	0x08005b44
 8001f88:	20000108 	.word	0x20000108
 8001f8c:	20000110 	.word	0x20000110

08001f90 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8001f90:	4b01      	ldr	r3, [pc, #4]	; (8001f98 <HAL_RCC_GetHCLKFreq+0x8>)
 8001f92:	6818      	ldr	r0, [r3, #0]
 8001f94:	4770      	bx	lr
 8001f96:	bf00      	nop
 8001f98:	20000108 	.word	0x20000108

08001f9c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001f9c:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001f9e:	f7ff fff7 	bl	8001f90 <HAL_RCC_GetHCLKFreq>
 8001fa2:	4b04      	ldr	r3, [pc, #16]	; (8001fb4 <HAL_RCC_GetPCLK1Freq+0x18>)
 8001fa4:	689b      	ldr	r3, [r3, #8]
 8001fa6:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8001faa:	4a03      	ldr	r2, [pc, #12]	; (8001fb8 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8001fac:	5cd3      	ldrb	r3, [r2, r3]
}
 8001fae:	40d8      	lsrs	r0, r3
 8001fb0:	bd08      	pop	{r3, pc}
 8001fb2:	bf00      	nop
 8001fb4:	40023800 	.word	0x40023800
 8001fb8:	08005b54 	.word	0x08005b54

08001fbc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001fbc:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001fbe:	f7ff ffe7 	bl	8001f90 <HAL_RCC_GetHCLKFreq>
 8001fc2:	4b04      	ldr	r3, [pc, #16]	; (8001fd4 <HAL_RCC_GetPCLK2Freq+0x18>)
 8001fc4:	689b      	ldr	r3, [r3, #8]
 8001fc6:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8001fca:	4a03      	ldr	r2, [pc, #12]	; (8001fd8 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8001fcc:	5cd3      	ldrb	r3, [r2, r3]
}
 8001fce:	40d8      	lsrs	r0, r3
 8001fd0:	bd08      	pop	{r3, pc}
 8001fd2:	bf00      	nop
 8001fd4:	40023800 	.word	0x40023800
 8001fd8:	08005b54 	.word	0x08005b54

08001fdc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8001fdc:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001fde:	6a03      	ldr	r3, [r0, #32]
 8001fe0:	f023 0301 	bic.w	r3, r3, #1
 8001fe4:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001fe6:	6a02      	ldr	r2, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001fe8:	6845      	ldr	r5, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001fea:	6983      	ldr	r3, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8001fec:	f023 0373 	bic.w	r3, r3, #115	; 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001ff0:	680c      	ldr	r4, [r1, #0]
 8001ff2:	431c      	orrs	r4, r3

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8001ff4:	f022 0202 	bic.w	r2, r2, #2
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8001ff8:	688b      	ldr	r3, [r1, #8]
 8001ffa:	4313      	orrs	r3, r2

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8001ffc:	4a0d      	ldr	r2, [pc, #52]	; (8002034 <TIM_OC1_SetConfig+0x58>)
 8001ffe:	4290      	cmp	r0, r2
 8002000:	d009      	beq.n	8002016 <TIM_OC1_SetConfig+0x3a>
    tmpccer |= OC_Config->OCNPolarity;
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002002:	4a0c      	ldr	r2, [pc, #48]	; (8002034 <TIM_OC1_SetConfig+0x58>)
 8002004:	4290      	cmp	r0, r2
 8002006:	d00d      	beq.n	8002024 <TIM_OC1_SetConfig+0x48>
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002008:	6045      	str	r5, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800200a:	6184      	str	r4, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800200c:	684a      	ldr	r2, [r1, #4]
 800200e:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002010:	6203      	str	r3, [r0, #32]
}
 8002012:	bc30      	pop	{r4, r5}
 8002014:	4770      	bx	lr
    tmpccer &= ~TIM_CCER_CC1NP;
 8002016:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 800201a:	68ca      	ldr	r2, [r1, #12]
 800201c:	431a      	orrs	r2, r3
    tmpccer &= ~TIM_CCER_CC1NE;
 800201e:	f022 0304 	bic.w	r3, r2, #4
 8002022:	e7ee      	b.n	8002002 <TIM_OC1_SetConfig+0x26>
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002024:	f425 7540 	bic.w	r5, r5, #768	; 0x300
    tmpcr2 |= OC_Config->OCIdleState;
 8002028:	694a      	ldr	r2, [r1, #20]
 800202a:	432a      	orrs	r2, r5
    tmpcr2 |= OC_Config->OCNIdleState;
 800202c:	698d      	ldr	r5, [r1, #24]
 800202e:	4315      	orrs	r5, r2
 8002030:	e7ea      	b.n	8002008 <TIM_OC1_SetConfig+0x2c>
 8002032:	bf00      	nop
 8002034:	40010000 	.word	0x40010000

08002038 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002038:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800203a:	6a03      	ldr	r3, [r0, #32]
 800203c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002040:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002042:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002044:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002046:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002048:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800204c:	680d      	ldr	r5, [r1, #0]
 800204e:	4315      	orrs	r5, r2

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002050:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002054:	688a      	ldr	r2, [r1, #8]
 8002056:	ea43 2302 	orr.w	r3, r3, r2, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800205a:	4a0f      	ldr	r2, [pc, #60]	; (8002098 <TIM_OC3_SetConfig+0x60>)
 800205c:	4290      	cmp	r0, r2
 800205e:	d009      	beq.n	8002074 <TIM_OC3_SetConfig+0x3c>
    tmpccer |= (OC_Config->OCNPolarity << 8U);
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002060:	4a0d      	ldr	r2, [pc, #52]	; (8002098 <TIM_OC3_SetConfig+0x60>)
 8002062:	4290      	cmp	r0, r2
 8002064:	d00e      	beq.n	8002084 <TIM_OC3_SetConfig+0x4c>
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002066:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002068:	61c5      	str	r5, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800206a:	684a      	ldr	r2, [r1, #4]
 800206c:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800206e:	6203      	str	r3, [r0, #32]
}
 8002070:	bc30      	pop	{r4, r5}
 8002072:	4770      	bx	lr
    tmpccer &= ~TIM_CCER_CC3NP;
 8002074:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002078:	68ca      	ldr	r2, [r1, #12]
 800207a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    tmpccer &= ~TIM_CCER_CC3NE;
 800207e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002082:	e7ed      	b.n	8002060 <TIM_OC3_SetConfig+0x28>
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002084:	f424 5440 	bic.w	r4, r4, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002088:	694a      	ldr	r2, [r1, #20]
 800208a:	ea44 1402 	orr.w	r4, r4, r2, lsl #4
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800208e:	698a      	ldr	r2, [r1, #24]
 8002090:	ea44 1402 	orr.w	r4, r4, r2, lsl #4
 8002094:	e7e7      	b.n	8002066 <TIM_OC3_SetConfig+0x2e>
 8002096:	bf00      	nop
 8002098:	40010000 	.word	0x40010000

0800209c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800209c:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800209e:	6a03      	ldr	r3, [r0, #32]
 80020a0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80020a4:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80020a6:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80020a8:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80020aa:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80020ac:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80020b0:	680d      	ldr	r5, [r1, #0]
 80020b2:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80020b6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80020ba:	688d      	ldr	r5, [r1, #8]
 80020bc:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80020c0:	4d07      	ldr	r5, [pc, #28]	; (80020e0 <TIM_OC4_SetConfig+0x44>)
 80020c2:	42a8      	cmp	r0, r5
 80020c4:	d006      	beq.n	80020d4 <TIM_OC4_SetConfig+0x38>
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80020c6:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80020c8:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80020ca:	684a      	ldr	r2, [r1, #4]
 80020cc:	6402      	str	r2, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80020ce:	6203      	str	r3, [r0, #32]
}
 80020d0:	bc30      	pop	{r4, r5}
 80020d2:	4770      	bx	lr
    tmpcr2 &= ~TIM_CR2_OIS4;
 80020d4:	f424 4480 	bic.w	r4, r4, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80020d8:	694d      	ldr	r5, [r1, #20]
 80020da:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
 80020de:	e7f2      	b.n	80020c6 <TIM_OC4_SetConfig+0x2a>
 80020e0:	40010000 	.word	0x40010000

080020e4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80020e4:	b410      	push	{r4}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80020e6:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80020e8:	6a04      	ldr	r4, [r0, #32]
 80020ea:	f024 0401 	bic.w	r4, r4, #1
 80020ee:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 80020f0:	6984      	ldr	r4, [r0, #24]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80020f2:	f024 0cf0 	bic.w	ip, r4, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80020f6:	ea4c 1202 	orr.w	r2, ip, r2, lsl #4

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80020fa:	f023 030a 	bic.w	r3, r3, #10
  tmpccer |= TIM_ICPolarity;
 80020fe:	430b      	orrs	r3, r1

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002100:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8002102:	6203      	str	r3, [r0, #32]
}
 8002104:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002108:	4770      	bx	lr

0800210a <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800210a:	b430      	push	{r4, r5}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800210c:	6a04      	ldr	r4, [r0, #32]
 800210e:	f024 0410 	bic.w	r4, r4, #16
 8002112:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002114:	6984      	ldr	r4, [r0, #24]
  tmpccer = TIMx->CCER;
 8002116:	6a05      	ldr	r5, [r0, #32]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8002118:	f424 7c40 	bic.w	ip, r4, #768	; 0x300
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800211c:	ea4c 2c02 	orr.w	ip, ip, r2, lsl #8

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002120:	f42c 4c70 	bic.w	ip, ip, #61440	; 0xf000
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8002124:	031b      	lsls	r3, r3, #12
 8002126:	b29b      	uxth	r3, r3
 8002128:	ea43 030c 	orr.w	r3, r3, ip

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800212c:	f025 05a0 	bic.w	r5, r5, #160	; 0xa0
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8002130:	0109      	lsls	r1, r1, #4
 8002132:	f001 01a0 	and.w	r1, r1, #160	; 0xa0
 8002136:	4329      	orrs	r1, r5

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002138:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 800213a:	6201      	str	r1, [r0, #32]
}
 800213c:	bc30      	pop	{r4, r5}
 800213e:	4770      	bx	lr

08002140 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002140:	b410      	push	{r4}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002142:	6a03      	ldr	r3, [r0, #32]
 8002144:	f023 0310 	bic.w	r3, r3, #16
 8002148:	6203      	str	r3, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 800214a:	6984      	ldr	r4, [r0, #24]
  tmpccer = TIMx->CCER;
 800214c:	6a03      	ldr	r3, [r0, #32]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800214e:	f424 4c70 	bic.w	ip, r4, #61440	; 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002152:	ea4c 3202 	orr.w	r2, ip, r2, lsl #12

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002156:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 800215a:	ea43 1301 	orr.w	r3, r3, r1, lsl #4

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800215e:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8002160:	6203      	str	r3, [r0, #32]
}
 8002162:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002166:	4770      	bx	lr

08002168 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8002168:	b430      	push	{r4, r5}
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800216a:	6a04      	ldr	r4, [r0, #32]
 800216c:	f424 7480 	bic.w	r4, r4, #256	; 0x100
 8002170:	6204      	str	r4, [r0, #32]
  tmpccmr2 = TIMx->CCMR2;
 8002172:	69c4      	ldr	r4, [r0, #28]
  tmpccer = TIMx->CCER;
 8002174:	6a05      	ldr	r5, [r0, #32]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8002176:	f024 0c03 	bic.w	ip, r4, #3
  tmpccmr2 |= TIM_ICSelection;
 800217a:	ea4c 0c02 	orr.w	ip, ip, r2

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800217e:	f02c 0cf0 	bic.w	ip, ip, #240	; 0xf0
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8002182:	011b      	lsls	r3, r3, #4
 8002184:	b2db      	uxtb	r3, r3
 8002186:	ea43 030c 	orr.w	r3, r3, ip

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800218a:	f425 6520 	bic.w	r5, r5, #2560	; 0xa00
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800218e:	0209      	lsls	r1, r1, #8
 8002190:	f401 6120 	and.w	r1, r1, #2560	; 0xa00
 8002194:	4329      	orrs	r1, r5

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8002196:	61c3      	str	r3, [r0, #28]
  TIMx->CCER = tmpccer;
 8002198:	6201      	str	r1, [r0, #32]
}
 800219a:	bc30      	pop	{r4, r5}
 800219c:	4770      	bx	lr

0800219e <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800219e:	b430      	push	{r4, r5}
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80021a0:	6a04      	ldr	r4, [r0, #32]
 80021a2:	f424 5480 	bic.w	r4, r4, #4096	; 0x1000
 80021a6:	6204      	str	r4, [r0, #32]
  tmpccmr2 = TIMx->CCMR2;
 80021a8:	69c4      	ldr	r4, [r0, #28]
  tmpccer = TIMx->CCER;
 80021aa:	6a05      	ldr	r5, [r0, #32]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80021ac:	f424 7c40 	bic.w	ip, r4, #768	; 0x300
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80021b0:	ea4c 2c02 	orr.w	ip, ip, r2, lsl #8

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80021b4:	f42c 4c70 	bic.w	ip, ip, #61440	; 0xf000
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80021b8:	031b      	lsls	r3, r3, #12
 80021ba:	b29b      	uxth	r3, r3
 80021bc:	ea43 030c 	orr.w	r3, r3, ip

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80021c0:	f425 4520 	bic.w	r5, r5, #40960	; 0xa000
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80021c4:	0309      	lsls	r1, r1, #12
 80021c6:	f401 4120 	and.w	r1, r1, #40960	; 0xa000
 80021ca:	4329      	orrs	r1, r5

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80021cc:	61c3      	str	r3, [r0, #28]
  TIMx->CCER = tmpccer ;
 80021ce:	6201      	str	r1, [r0, #32]
}
 80021d0:	bc30      	pop	{r4, r5}
 80021d2:	4770      	bx	lr

080021d4 <TIM_ITRx_SetConfig>:
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80021d4:	6883      	ldr	r3, [r0, #8]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80021d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80021da:	430b      	orrs	r3, r1
 80021dc:	f043 0307 	orr.w	r3, r3, #7
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80021e0:	6083      	str	r3, [r0, #8]
}
 80021e2:	4770      	bx	lr

080021e4 <HAL_TIM_PWM_MspInit>:
}
 80021e4:	4770      	bx	lr

080021e6 <HAL_TIM_IC_MspInit>:
}
 80021e6:	4770      	bx	lr

080021e8 <HAL_TIM_ReadCapturedValue>:
  switch (Channel)
 80021e8:	290c      	cmp	r1, #12
 80021ea:	d814      	bhi.n	8002216 <HAL_TIM_ReadCapturedValue+0x2e>
 80021ec:	e8df f001 	tbb	[pc, r1]
 80021f0:	13131307 	.word	0x13131307
 80021f4:	1313130a 	.word	0x1313130a
 80021f8:	1313130d 	.word	0x1313130d
 80021fc:	10          	.byte	0x10
 80021fd:	00          	.byte	0x00
      tmpreg =  htim->Instance->CCR1;
 80021fe:	6803      	ldr	r3, [r0, #0]
 8002200:	6b58      	ldr	r0, [r3, #52]	; 0x34
      break;
 8002202:	4770      	bx	lr
      tmpreg =   htim->Instance->CCR2;
 8002204:	6803      	ldr	r3, [r0, #0]
 8002206:	6b98      	ldr	r0, [r3, #56]	; 0x38
      break;
 8002208:	4770      	bx	lr
      tmpreg =   htim->Instance->CCR3;
 800220a:	6803      	ldr	r3, [r0, #0]
 800220c:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
      break;
 800220e:	4770      	bx	lr
      tmpreg =   htim->Instance->CCR4;
 8002210:	6803      	ldr	r3, [r0, #0]
 8002212:	6c18      	ldr	r0, [r3, #64]	; 0x40
      break;
 8002214:	4770      	bx	lr
  switch (Channel)
 8002216:	2000      	movs	r0, #0
}
 8002218:	4770      	bx	lr

0800221a <HAL_TIM_PeriodElapsedCallback>:
}
 800221a:	4770      	bx	lr

0800221c <HAL_TIM_OC_DelayElapsedCallback>:
}
 800221c:	4770      	bx	lr

0800221e <HAL_TIM_PWM_PulseFinishedCallback>:
}
 800221e:	4770      	bx	lr

08002220 <HAL_TIM_TriggerCallback>:
}
 8002220:	4770      	bx	lr

08002222 <HAL_TIM_IRQHandler>:
{
 8002222:	b510      	push	{r4, lr}
 8002224:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002226:	6803      	ldr	r3, [r0, #0]
 8002228:	691a      	ldr	r2, [r3, #16]
 800222a:	f012 0f02 	tst.w	r2, #2
 800222e:	d011      	beq.n	8002254 <HAL_TIM_IRQHandler+0x32>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002230:	68da      	ldr	r2, [r3, #12]
 8002232:	f012 0f02 	tst.w	r2, #2
 8002236:	d00d      	beq.n	8002254 <HAL_TIM_IRQHandler+0x32>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002238:	f06f 0202 	mvn.w	r2, #2
 800223c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800223e:	2301      	movs	r3, #1
 8002240:	7703      	strb	r3, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002242:	6803      	ldr	r3, [r0, #0]
 8002244:	699b      	ldr	r3, [r3, #24]
 8002246:	f013 0f03 	tst.w	r3, #3
 800224a:	d070      	beq.n	800232e <HAL_TIM_IRQHandler+0x10c>
          HAL_TIM_IC_CaptureCallback(htim);
 800224c:	f7fe fe92 	bl	8000f74 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002250:	2300      	movs	r3, #0
 8002252:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002254:	6823      	ldr	r3, [r4, #0]
 8002256:	691a      	ldr	r2, [r3, #16]
 8002258:	f012 0f04 	tst.w	r2, #4
 800225c:	d012      	beq.n	8002284 <HAL_TIM_IRQHandler+0x62>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800225e:	68da      	ldr	r2, [r3, #12]
 8002260:	f012 0f04 	tst.w	r2, #4
 8002264:	d00e      	beq.n	8002284 <HAL_TIM_IRQHandler+0x62>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002266:	f06f 0204 	mvn.w	r2, #4
 800226a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800226c:	2302      	movs	r3, #2
 800226e:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002270:	6823      	ldr	r3, [r4, #0]
 8002272:	699b      	ldr	r3, [r3, #24]
 8002274:	f413 7f40 	tst.w	r3, #768	; 0x300
 8002278:	d05f      	beq.n	800233a <HAL_TIM_IRQHandler+0x118>
        HAL_TIM_IC_CaptureCallback(htim);
 800227a:	4620      	mov	r0, r4
 800227c:	f7fe fe7a 	bl	8000f74 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002280:	2300      	movs	r3, #0
 8002282:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002284:	6823      	ldr	r3, [r4, #0]
 8002286:	691a      	ldr	r2, [r3, #16]
 8002288:	f012 0f08 	tst.w	r2, #8
 800228c:	d012      	beq.n	80022b4 <HAL_TIM_IRQHandler+0x92>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800228e:	68da      	ldr	r2, [r3, #12]
 8002290:	f012 0f08 	tst.w	r2, #8
 8002294:	d00e      	beq.n	80022b4 <HAL_TIM_IRQHandler+0x92>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002296:	f06f 0208 	mvn.w	r2, #8
 800229a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800229c:	2304      	movs	r3, #4
 800229e:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80022a0:	6823      	ldr	r3, [r4, #0]
 80022a2:	69db      	ldr	r3, [r3, #28]
 80022a4:	f013 0f03 	tst.w	r3, #3
 80022a8:	d04e      	beq.n	8002348 <HAL_TIM_IRQHandler+0x126>
        HAL_TIM_IC_CaptureCallback(htim);
 80022aa:	4620      	mov	r0, r4
 80022ac:	f7fe fe62 	bl	8000f74 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80022b0:	2300      	movs	r3, #0
 80022b2:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80022b4:	6823      	ldr	r3, [r4, #0]
 80022b6:	691a      	ldr	r2, [r3, #16]
 80022b8:	f012 0f10 	tst.w	r2, #16
 80022bc:	d012      	beq.n	80022e4 <HAL_TIM_IRQHandler+0xc2>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80022be:	68da      	ldr	r2, [r3, #12]
 80022c0:	f012 0f10 	tst.w	r2, #16
 80022c4:	d00e      	beq.n	80022e4 <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80022c6:	f06f 0210 	mvn.w	r2, #16
 80022ca:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80022cc:	2308      	movs	r3, #8
 80022ce:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80022d0:	6823      	ldr	r3, [r4, #0]
 80022d2:	69db      	ldr	r3, [r3, #28]
 80022d4:	f413 7f40 	tst.w	r3, #768	; 0x300
 80022d8:	d03d      	beq.n	8002356 <HAL_TIM_IRQHandler+0x134>
        HAL_TIM_IC_CaptureCallback(htim);
 80022da:	4620      	mov	r0, r4
 80022dc:	f7fe fe4a 	bl	8000f74 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80022e0:	2300      	movs	r3, #0
 80022e2:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80022e4:	6823      	ldr	r3, [r4, #0]
 80022e6:	691a      	ldr	r2, [r3, #16]
 80022e8:	f012 0f01 	tst.w	r2, #1
 80022ec:	d003      	beq.n	80022f6 <HAL_TIM_IRQHandler+0xd4>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80022ee:	68da      	ldr	r2, [r3, #12]
 80022f0:	f012 0f01 	tst.w	r2, #1
 80022f4:	d136      	bne.n	8002364 <HAL_TIM_IRQHandler+0x142>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80022f6:	6823      	ldr	r3, [r4, #0]
 80022f8:	691a      	ldr	r2, [r3, #16]
 80022fa:	f012 0f80 	tst.w	r2, #128	; 0x80
 80022fe:	d003      	beq.n	8002308 <HAL_TIM_IRQHandler+0xe6>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002300:	68da      	ldr	r2, [r3, #12]
 8002302:	f012 0f80 	tst.w	r2, #128	; 0x80
 8002306:	d134      	bne.n	8002372 <HAL_TIM_IRQHandler+0x150>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002308:	6823      	ldr	r3, [r4, #0]
 800230a:	691a      	ldr	r2, [r3, #16]
 800230c:	f012 0f40 	tst.w	r2, #64	; 0x40
 8002310:	d003      	beq.n	800231a <HAL_TIM_IRQHandler+0xf8>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002312:	68da      	ldr	r2, [r3, #12]
 8002314:	f012 0f40 	tst.w	r2, #64	; 0x40
 8002318:	d132      	bne.n	8002380 <HAL_TIM_IRQHandler+0x15e>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800231a:	6823      	ldr	r3, [r4, #0]
 800231c:	691a      	ldr	r2, [r3, #16]
 800231e:	f012 0f20 	tst.w	r2, #32
 8002322:	d003      	beq.n	800232c <HAL_TIM_IRQHandler+0x10a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002324:	68da      	ldr	r2, [r3, #12]
 8002326:	f012 0f20 	tst.w	r2, #32
 800232a:	d130      	bne.n	800238e <HAL_TIM_IRQHandler+0x16c>
}
 800232c:	bd10      	pop	{r4, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800232e:	f7ff ff75 	bl	800221c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002332:	4620      	mov	r0, r4
 8002334:	f7ff ff73 	bl	800221e <HAL_TIM_PWM_PulseFinishedCallback>
 8002338:	e78a      	b.n	8002250 <HAL_TIM_IRQHandler+0x2e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800233a:	4620      	mov	r0, r4
 800233c:	f7ff ff6e 	bl	800221c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002340:	4620      	mov	r0, r4
 8002342:	f7ff ff6c 	bl	800221e <HAL_TIM_PWM_PulseFinishedCallback>
 8002346:	e79b      	b.n	8002280 <HAL_TIM_IRQHandler+0x5e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002348:	4620      	mov	r0, r4
 800234a:	f7ff ff67 	bl	800221c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800234e:	4620      	mov	r0, r4
 8002350:	f7ff ff65 	bl	800221e <HAL_TIM_PWM_PulseFinishedCallback>
 8002354:	e7ac      	b.n	80022b0 <HAL_TIM_IRQHandler+0x8e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002356:	4620      	mov	r0, r4
 8002358:	f7ff ff60 	bl	800221c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800235c:	4620      	mov	r0, r4
 800235e:	f7ff ff5e 	bl	800221e <HAL_TIM_PWM_PulseFinishedCallback>
 8002362:	e7bd      	b.n	80022e0 <HAL_TIM_IRQHandler+0xbe>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002364:	f06f 0201 	mvn.w	r2, #1
 8002368:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 800236a:	4620      	mov	r0, r4
 800236c:	f7ff ff55 	bl	800221a <HAL_TIM_PeriodElapsedCallback>
 8002370:	e7c1      	b.n	80022f6 <HAL_TIM_IRQHandler+0xd4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002372:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002376:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8002378:	4620      	mov	r0, r4
 800237a:	f000 fd30 	bl	8002dde <HAL_TIMEx_BreakCallback>
 800237e:	e7c3      	b.n	8002308 <HAL_TIM_IRQHandler+0xe6>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002380:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002384:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8002386:	4620      	mov	r0, r4
 8002388:	f7ff ff4a 	bl	8002220 <HAL_TIM_TriggerCallback>
 800238c:	e7c5      	b.n	800231a <HAL_TIM_IRQHandler+0xf8>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800238e:	f06f 0220 	mvn.w	r2, #32
 8002392:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 8002394:	4620      	mov	r0, r4
 8002396:	f000 fd21 	bl	8002ddc <HAL_TIMEx_CommutCallback>
}
 800239a:	e7c7      	b.n	800232c <HAL_TIM_IRQHandler+0x10a>

0800239c <TIM_Base_SetConfig>:
  tmpcr1 = TIMx->CR1;
 800239c:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800239e:	4a25      	ldr	r2, [pc, #148]	; (8002434 <TIM_Base_SetConfig+0x98>)
 80023a0:	4290      	cmp	r0, r2
 80023a2:	d00e      	beq.n	80023c2 <TIM_Base_SetConfig+0x26>
 80023a4:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80023a8:	d00b      	beq.n	80023c2 <TIM_Base_SetConfig+0x26>
 80023aa:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 80023ae:	4290      	cmp	r0, r2
 80023b0:	d007      	beq.n	80023c2 <TIM_Base_SetConfig+0x26>
 80023b2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80023b6:	4290      	cmp	r0, r2
 80023b8:	d003      	beq.n	80023c2 <TIM_Base_SetConfig+0x26>
 80023ba:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80023be:	4290      	cmp	r0, r2
 80023c0:	d103      	bne.n	80023ca <TIM_Base_SetConfig+0x2e>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80023c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80023c6:	684a      	ldr	r2, [r1, #4]
 80023c8:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80023ca:	4a1a      	ldr	r2, [pc, #104]	; (8002434 <TIM_Base_SetConfig+0x98>)
 80023cc:	4290      	cmp	r0, r2
 80023ce:	d01a      	beq.n	8002406 <TIM_Base_SetConfig+0x6a>
 80023d0:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80023d4:	d017      	beq.n	8002406 <TIM_Base_SetConfig+0x6a>
 80023d6:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 80023da:	4290      	cmp	r0, r2
 80023dc:	d013      	beq.n	8002406 <TIM_Base_SetConfig+0x6a>
 80023de:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80023e2:	4290      	cmp	r0, r2
 80023e4:	d00f      	beq.n	8002406 <TIM_Base_SetConfig+0x6a>
 80023e6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80023ea:	4290      	cmp	r0, r2
 80023ec:	d00b      	beq.n	8002406 <TIM_Base_SetConfig+0x6a>
 80023ee:	f502 329a 	add.w	r2, r2, #78848	; 0x13400
 80023f2:	4290      	cmp	r0, r2
 80023f4:	d007      	beq.n	8002406 <TIM_Base_SetConfig+0x6a>
 80023f6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80023fa:	4290      	cmp	r0, r2
 80023fc:	d003      	beq.n	8002406 <TIM_Base_SetConfig+0x6a>
 80023fe:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002402:	4290      	cmp	r0, r2
 8002404:	d103      	bne.n	800240e <TIM_Base_SetConfig+0x72>
    tmpcr1 &= ~TIM_CR1_CKD;
 8002406:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800240a:	68ca      	ldr	r2, [r1, #12]
 800240c:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800240e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002412:	694a      	ldr	r2, [r1, #20]
 8002414:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8002416:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002418:	688b      	ldr	r3, [r1, #8]
 800241a:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800241c:	680b      	ldr	r3, [r1, #0]
 800241e:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002420:	4b04      	ldr	r3, [pc, #16]	; (8002434 <TIM_Base_SetConfig+0x98>)
 8002422:	4298      	cmp	r0, r3
 8002424:	d002      	beq.n	800242c <TIM_Base_SetConfig+0x90>
  TIMx->EGR = TIM_EGR_UG;
 8002426:	2301      	movs	r3, #1
 8002428:	6143      	str	r3, [r0, #20]
}
 800242a:	4770      	bx	lr
    TIMx->RCR = Structure->RepetitionCounter;
 800242c:	690b      	ldr	r3, [r1, #16]
 800242e:	6303      	str	r3, [r0, #48]	; 0x30
 8002430:	e7f9      	b.n	8002426 <TIM_Base_SetConfig+0x8a>
 8002432:	bf00      	nop
 8002434:	40010000 	.word	0x40010000

08002438 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 8002438:	b340      	cbz	r0, 800248c <HAL_TIM_Base_Init+0x54>
{
 800243a:	b510      	push	{r4, lr}
 800243c:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 800243e:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8002442:	b1f3      	cbz	r3, 8002482 <HAL_TIM_Base_Init+0x4a>
  htim->State = HAL_TIM_STATE_BUSY;
 8002444:	2302      	movs	r3, #2
 8002446:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800244a:	4621      	mov	r1, r4
 800244c:	f851 0b04 	ldr.w	r0, [r1], #4
 8002450:	f7ff ffa4 	bl	800239c <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002454:	2301      	movs	r3, #1
 8002456:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800245a:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 800245e:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8002462:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8002466:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800246a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800246e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002472:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8002476:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 800247a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 800247e:	2000      	movs	r0, #0
}
 8002480:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8002482:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8002486:	f7fe ff85 	bl	8001394 <HAL_TIM_Base_MspInit>
 800248a:	e7db      	b.n	8002444 <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 800248c:	2001      	movs	r0, #1
}
 800248e:	4770      	bx	lr

08002490 <HAL_TIM_PWM_Init>:
  if (htim == NULL)
 8002490:	b340      	cbz	r0, 80024e4 <HAL_TIM_PWM_Init+0x54>
{
 8002492:	b510      	push	{r4, lr}
 8002494:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 8002496:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800249a:	b1f3      	cbz	r3, 80024da <HAL_TIM_PWM_Init+0x4a>
  htim->State = HAL_TIM_STATE_BUSY;
 800249c:	2302      	movs	r3, #2
 800249e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80024a2:	4621      	mov	r1, r4
 80024a4:	f851 0b04 	ldr.w	r0, [r1], #4
 80024a8:	f7ff ff78 	bl	800239c <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80024ac:	2301      	movs	r3, #1
 80024ae:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80024b2:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 80024b6:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 80024ba:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 80024be:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80024c2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80024c6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80024ca:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 80024ce:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 80024d2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 80024d6:	2000      	movs	r0, #0
}
 80024d8:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 80024da:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 80024de:	f7ff fe81 	bl	80021e4 <HAL_TIM_PWM_MspInit>
 80024e2:	e7db      	b.n	800249c <HAL_TIM_PWM_Init+0xc>
    return HAL_ERROR;
 80024e4:	2001      	movs	r0, #1
}
 80024e6:	4770      	bx	lr

080024e8 <HAL_TIM_IC_Init>:
  if (htim == NULL)
 80024e8:	b340      	cbz	r0, 800253c <HAL_TIM_IC_Init+0x54>
{
 80024ea:	b510      	push	{r4, lr}
 80024ec:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 80024ee:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80024f2:	b1f3      	cbz	r3, 8002532 <HAL_TIM_IC_Init+0x4a>
  htim->State = HAL_TIM_STATE_BUSY;
 80024f4:	2302      	movs	r3, #2
 80024f6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80024fa:	4621      	mov	r1, r4
 80024fc:	f851 0b04 	ldr.w	r0, [r1], #4
 8002500:	f7ff ff4c 	bl	800239c <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002504:	2301      	movs	r3, #1
 8002506:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800250a:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 800250e:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8002512:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8002516:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800251a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800251e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002522:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8002526:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 800252a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 800252e:	2000      	movs	r0, #0
}
 8002530:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8002532:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_IC_MspInit(htim);
 8002536:	f7ff fe56 	bl	80021e6 <HAL_TIM_IC_MspInit>
 800253a:	e7db      	b.n	80024f4 <HAL_TIM_IC_Init+0xc>
    return HAL_ERROR;
 800253c:	2001      	movs	r0, #1
}
 800253e:	4770      	bx	lr

08002540 <TIM_OC2_SetConfig>:
{
 8002540:	b430      	push	{r4, r5}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002542:	6a03      	ldr	r3, [r0, #32]
 8002544:	f023 0310 	bic.w	r3, r3, #16
 8002548:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 800254a:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 800254c:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 800254e:	6982      	ldr	r2, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002550:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002554:	680d      	ldr	r5, [r1, #0]
 8002556:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer &= ~TIM_CCER_CC2P;
 800255a:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800255e:	688d      	ldr	r5, [r1, #8]
 8002560:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002564:	4d0e      	ldr	r5, [pc, #56]	; (80025a0 <TIM_OC2_SetConfig+0x60>)
 8002566:	42a8      	cmp	r0, r5
 8002568:	d009      	beq.n	800257e <TIM_OC2_SetConfig+0x3e>
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800256a:	4d0d      	ldr	r5, [pc, #52]	; (80025a0 <TIM_OC2_SetConfig+0x60>)
 800256c:	42a8      	cmp	r0, r5
 800256e:	d00e      	beq.n	800258e <TIM_OC2_SetConfig+0x4e>
  TIMx->CR2 = tmpcr2;
 8002570:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8002572:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8002574:	684a      	ldr	r2, [r1, #4]
 8002576:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8002578:	6203      	str	r3, [r0, #32]
}
 800257a:	bc30      	pop	{r4, r5}
 800257c:	4770      	bx	lr
    tmpccer &= ~TIM_CCER_CC2NP;
 800257e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002582:	68cd      	ldr	r5, [r1, #12]
 8002584:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpccer &= ~TIM_CCER_CC2NE;
 8002588:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800258c:	e7ed      	b.n	800256a <TIM_OC2_SetConfig+0x2a>
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800258e:	f424 6440 	bic.w	r4, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002592:	694d      	ldr	r5, [r1, #20]
 8002594:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002598:	698d      	ldr	r5, [r1, #24]
 800259a:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
 800259e:	e7e7      	b.n	8002570 <TIM_OC2_SetConfig+0x30>
 80025a0:	40010000 	.word	0x40010000

080025a4 <HAL_TIM_PWM_ConfigChannel>:
{
 80025a4:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 80025a6:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80025aa:	2b01      	cmp	r3, #1
 80025ac:	d066      	beq.n	800267c <HAL_TIM_PWM_ConfigChannel+0xd8>
 80025ae:	4604      	mov	r4, r0
 80025b0:	460d      	mov	r5, r1
 80025b2:	2301      	movs	r3, #1
 80025b4:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  switch (Channel)
 80025b8:	2a0c      	cmp	r2, #12
 80025ba:	d85a      	bhi.n	8002672 <HAL_TIM_PWM_ConfigChannel+0xce>
 80025bc:	e8df f002 	tbb	[pc, r2]
 80025c0:	59595907 	.word	0x59595907
 80025c4:	5959591b 	.word	0x5959591b
 80025c8:	59595930 	.word	0x59595930
 80025cc:	44          	.byte	0x44
 80025cd:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80025ce:	6800      	ldr	r0, [r0, #0]
 80025d0:	f7ff fd04 	bl	8001fdc <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80025d4:	6822      	ldr	r2, [r4, #0]
 80025d6:	6993      	ldr	r3, [r2, #24]
 80025d8:	f043 0308 	orr.w	r3, r3, #8
 80025dc:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80025de:	6822      	ldr	r2, [r4, #0]
 80025e0:	6993      	ldr	r3, [r2, #24]
 80025e2:	f023 0304 	bic.w	r3, r3, #4
 80025e6:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80025e8:	6822      	ldr	r2, [r4, #0]
 80025ea:	6993      	ldr	r3, [r2, #24]
 80025ec:	6929      	ldr	r1, [r5, #16]
 80025ee:	430b      	orrs	r3, r1
 80025f0:	6193      	str	r3, [r2, #24]
  HAL_StatusTypeDef status = HAL_OK;
 80025f2:	2000      	movs	r0, #0
      break;
 80025f4:	e03e      	b.n	8002674 <HAL_TIM_PWM_ConfigChannel+0xd0>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80025f6:	6800      	ldr	r0, [r0, #0]
 80025f8:	f7ff ffa2 	bl	8002540 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80025fc:	6822      	ldr	r2, [r4, #0]
 80025fe:	6993      	ldr	r3, [r2, #24]
 8002600:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002604:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002606:	6822      	ldr	r2, [r4, #0]
 8002608:	6993      	ldr	r3, [r2, #24]
 800260a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800260e:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002610:	6822      	ldr	r2, [r4, #0]
 8002612:	6993      	ldr	r3, [r2, #24]
 8002614:	6929      	ldr	r1, [r5, #16]
 8002616:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800261a:	6193      	str	r3, [r2, #24]
  HAL_StatusTypeDef status = HAL_OK;
 800261c:	2000      	movs	r0, #0
      break;
 800261e:	e029      	b.n	8002674 <HAL_TIM_PWM_ConfigChannel+0xd0>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002620:	6800      	ldr	r0, [r0, #0]
 8002622:	f7ff fd09 	bl	8002038 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002626:	6822      	ldr	r2, [r4, #0]
 8002628:	69d3      	ldr	r3, [r2, #28]
 800262a:	f043 0308 	orr.w	r3, r3, #8
 800262e:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002630:	6822      	ldr	r2, [r4, #0]
 8002632:	69d3      	ldr	r3, [r2, #28]
 8002634:	f023 0304 	bic.w	r3, r3, #4
 8002638:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800263a:	6822      	ldr	r2, [r4, #0]
 800263c:	69d3      	ldr	r3, [r2, #28]
 800263e:	6929      	ldr	r1, [r5, #16]
 8002640:	430b      	orrs	r3, r1
 8002642:	61d3      	str	r3, [r2, #28]
  HAL_StatusTypeDef status = HAL_OK;
 8002644:	2000      	movs	r0, #0
      break;
 8002646:	e015      	b.n	8002674 <HAL_TIM_PWM_ConfigChannel+0xd0>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002648:	6800      	ldr	r0, [r0, #0]
 800264a:	f7ff fd27 	bl	800209c <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800264e:	6822      	ldr	r2, [r4, #0]
 8002650:	69d3      	ldr	r3, [r2, #28]
 8002652:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002656:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002658:	6822      	ldr	r2, [r4, #0]
 800265a:	69d3      	ldr	r3, [r2, #28]
 800265c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002660:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002662:	6822      	ldr	r2, [r4, #0]
 8002664:	69d3      	ldr	r3, [r2, #28]
 8002666:	6929      	ldr	r1, [r5, #16]
 8002668:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800266c:	61d3      	str	r3, [r2, #28]
  HAL_StatusTypeDef status = HAL_OK;
 800266e:	2000      	movs	r0, #0
      break;
 8002670:	e000      	b.n	8002674 <HAL_TIM_PWM_ConfigChannel+0xd0>
  switch (Channel)
 8002672:	2001      	movs	r0, #1
  __HAL_UNLOCK(htim);
 8002674:	2300      	movs	r3, #0
 8002676:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 800267a:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(htim);
 800267c:	2002      	movs	r0, #2
 800267e:	e7fc      	b.n	800267a <HAL_TIM_PWM_ConfigChannel+0xd6>

08002680 <TIM_TI1_SetConfig>:
{
 8002680:	b470      	push	{r4, r5, r6}
 8002682:	4694      	mov	ip, r2
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002684:	6a04      	ldr	r4, [r0, #32]
 8002686:	f024 0401 	bic.w	r4, r4, #1
 800268a:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 800268c:	6984      	ldr	r4, [r0, #24]
  tmpccer = TIMx->CCER;
 800268e:	6a06      	ldr	r6, [r0, #32]
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8002690:	4d14      	ldr	r5, [pc, #80]	; (80026e4 <TIM_TI1_SetConfig+0x64>)
 8002692:	42a8      	cmp	r0, r5
 8002694:	d014      	beq.n	80026c0 <TIM_TI1_SetConfig+0x40>
 8002696:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800269a:	d011      	beq.n	80026c0 <TIM_TI1_SetConfig+0x40>
 800269c:	4a12      	ldr	r2, [pc, #72]	; (80026e8 <TIM_TI1_SetConfig+0x68>)
 800269e:	4290      	cmp	r0, r2
 80026a0:	d00e      	beq.n	80026c0 <TIM_TI1_SetConfig+0x40>
 80026a2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80026a6:	4290      	cmp	r0, r2
 80026a8:	d00a      	beq.n	80026c0 <TIM_TI1_SetConfig+0x40>
 80026aa:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80026ae:	4290      	cmp	r0, r2
 80026b0:	d006      	beq.n	80026c0 <TIM_TI1_SetConfig+0x40>
 80026b2:	f502 329a 	add.w	r2, r2, #78848	; 0x13400
 80026b6:	4290      	cmp	r0, r2
 80026b8:	d002      	beq.n	80026c0 <TIM_TI1_SetConfig+0x40>
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80026ba:	f044 0201 	orr.w	r2, r4, #1
 80026be:	e003      	b.n	80026c8 <TIM_TI1_SetConfig+0x48>
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80026c0:	f024 0203 	bic.w	r2, r4, #3
    tmpccmr1 |= TIM_ICSelection;
 80026c4:	ea42 020c 	orr.w	r2, r2, ip
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80026c8:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80026cc:	011b      	lsls	r3, r3, #4
 80026ce:	b2db      	uxtb	r3, r3
 80026d0:	4313      	orrs	r3, r2
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80026d2:	f026 020a 	bic.w	r2, r6, #10
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80026d6:	f001 010a 	and.w	r1, r1, #10
 80026da:	4311      	orrs	r1, r2
  TIMx->CCMR1 = tmpccmr1;
 80026dc:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 80026de:	6201      	str	r1, [r0, #32]
}
 80026e0:	bc70      	pop	{r4, r5, r6}
 80026e2:	4770      	bx	lr
 80026e4:	40010000 	.word	0x40010000
 80026e8:	40000400 	.word	0x40000400

080026ec <HAL_TIM_IC_ConfigChannel>:
{
 80026ec:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 80026ee:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80026f2:	2b01      	cmp	r3, #1
 80026f4:	d05a      	beq.n	80027ac <HAL_TIM_IC_ConfigChannel+0xc0>
 80026f6:	4604      	mov	r4, r0
 80026f8:	460d      	mov	r5, r1
 80026fa:	2301      	movs	r3, #1
 80026fc:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  if (Channel == TIM_CHANNEL_1)
 8002700:	b152      	cbz	r2, 8002718 <HAL_TIM_IC_ConfigChannel+0x2c>
  else if (Channel == TIM_CHANNEL_2)
 8002702:	2a04      	cmp	r2, #4
 8002704:	d01a      	beq.n	800273c <HAL_TIM_IC_ConfigChannel+0x50>
  else if (Channel == TIM_CHANNEL_3)
 8002706:	2a08      	cmp	r2, #8
 8002708:	d02b      	beq.n	8002762 <HAL_TIM_IC_ConfigChannel+0x76>
  else if (Channel == TIM_CHANNEL_4)
 800270a:	2a0c      	cmp	r2, #12
 800270c:	d03b      	beq.n	8002786 <HAL_TIM_IC_ConfigChannel+0x9a>
    status = HAL_ERROR;
 800270e:	2001      	movs	r0, #1
  __HAL_UNLOCK(htim);
 8002710:	2300      	movs	r3, #0
 8002712:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 8002716:	bd38      	pop	{r3, r4, r5, pc}
    TIM_TI1_SetConfig(htim->Instance,
 8002718:	68cb      	ldr	r3, [r1, #12]
 800271a:	684a      	ldr	r2, [r1, #4]
 800271c:	6809      	ldr	r1, [r1, #0]
 800271e:	6800      	ldr	r0, [r0, #0]
 8002720:	f7ff ffae 	bl	8002680 <TIM_TI1_SetConfig>
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8002724:	6822      	ldr	r2, [r4, #0]
 8002726:	6993      	ldr	r3, [r2, #24]
 8002728:	f023 030c 	bic.w	r3, r3, #12
 800272c:	6193      	str	r3, [r2, #24]
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800272e:	6822      	ldr	r2, [r4, #0]
 8002730:	6993      	ldr	r3, [r2, #24]
 8002732:	68a9      	ldr	r1, [r5, #8]
 8002734:	430b      	orrs	r3, r1
 8002736:	6193      	str	r3, [r2, #24]
  HAL_StatusTypeDef status = HAL_OK;
 8002738:	2000      	movs	r0, #0
 800273a:	e7e9      	b.n	8002710 <HAL_TIM_IC_ConfigChannel+0x24>
    TIM_TI2_SetConfig(htim->Instance,
 800273c:	68cb      	ldr	r3, [r1, #12]
 800273e:	684a      	ldr	r2, [r1, #4]
 8002740:	6809      	ldr	r1, [r1, #0]
 8002742:	6800      	ldr	r0, [r0, #0]
 8002744:	f7ff fce1 	bl	800210a <TIM_TI2_SetConfig>
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8002748:	6822      	ldr	r2, [r4, #0]
 800274a:	6993      	ldr	r3, [r2, #24]
 800274c:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8002750:	6193      	str	r3, [r2, #24]
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8002752:	6822      	ldr	r2, [r4, #0]
 8002754:	6993      	ldr	r3, [r2, #24]
 8002756:	68a9      	ldr	r1, [r5, #8]
 8002758:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800275c:	6193      	str	r3, [r2, #24]
  HAL_StatusTypeDef status = HAL_OK;
 800275e:	2000      	movs	r0, #0
 8002760:	e7d6      	b.n	8002710 <HAL_TIM_IC_ConfigChannel+0x24>
    TIM_TI3_SetConfig(htim->Instance,
 8002762:	68cb      	ldr	r3, [r1, #12]
 8002764:	684a      	ldr	r2, [r1, #4]
 8002766:	6809      	ldr	r1, [r1, #0]
 8002768:	6800      	ldr	r0, [r0, #0]
 800276a:	f7ff fcfd 	bl	8002168 <TIM_TI3_SetConfig>
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800276e:	6822      	ldr	r2, [r4, #0]
 8002770:	69d3      	ldr	r3, [r2, #28]
 8002772:	f023 030c 	bic.w	r3, r3, #12
 8002776:	61d3      	str	r3, [r2, #28]
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8002778:	6822      	ldr	r2, [r4, #0]
 800277a:	69d3      	ldr	r3, [r2, #28]
 800277c:	68a9      	ldr	r1, [r5, #8]
 800277e:	430b      	orrs	r3, r1
 8002780:	61d3      	str	r3, [r2, #28]
  HAL_StatusTypeDef status = HAL_OK;
 8002782:	2000      	movs	r0, #0
 8002784:	e7c4      	b.n	8002710 <HAL_TIM_IC_ConfigChannel+0x24>
    TIM_TI4_SetConfig(htim->Instance,
 8002786:	68cb      	ldr	r3, [r1, #12]
 8002788:	684a      	ldr	r2, [r1, #4]
 800278a:	6809      	ldr	r1, [r1, #0]
 800278c:	6800      	ldr	r0, [r0, #0]
 800278e:	f7ff fd06 	bl	800219e <TIM_TI4_SetConfig>
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8002792:	6822      	ldr	r2, [r4, #0]
 8002794:	69d3      	ldr	r3, [r2, #28]
 8002796:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800279a:	61d3      	str	r3, [r2, #28]
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800279c:	6822      	ldr	r2, [r4, #0]
 800279e:	69d3      	ldr	r3, [r2, #28]
 80027a0:	68a9      	ldr	r1, [r5, #8]
 80027a2:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80027a6:	61d3      	str	r3, [r2, #28]
  HAL_StatusTypeDef status = HAL_OK;
 80027a8:	2000      	movs	r0, #0
 80027aa:	e7b1      	b.n	8002710 <HAL_TIM_IC_ConfigChannel+0x24>
  __HAL_LOCK(htim);
 80027ac:	2002      	movs	r0, #2
 80027ae:	e7b2      	b.n	8002716 <HAL_TIM_IC_ConfigChannel+0x2a>

080027b0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80027b0:	b410      	push	{r4}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80027b2:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80027b4:	f424 4c7f 	bic.w	ip, r4, #65280	; 0xff00

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80027b8:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 80027bc:	430a      	orrs	r2, r1
 80027be:	ea42 020c 	orr.w	r2, r2, ip

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80027c2:	6082      	str	r2, [r0, #8]
}
 80027c4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80027c8:	4770      	bx	lr

080027ca <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 80027ca:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80027ce:	2b01      	cmp	r3, #1
 80027d0:	d078      	beq.n	80028c4 <HAL_TIM_ConfigClockSource+0xfa>
{
 80027d2:	b510      	push	{r4, lr}
 80027d4:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 80027d6:	2301      	movs	r3, #1
 80027d8:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 80027dc:	2302      	movs	r3, #2
 80027de:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 80027e2:	6802      	ldr	r2, [r0, #0]
 80027e4:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80027e6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80027ea:	f023 0377 	bic.w	r3, r3, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 80027ee:	6093      	str	r3, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 80027f0:	680b      	ldr	r3, [r1, #0]
 80027f2:	2b60      	cmp	r3, #96	; 0x60
 80027f4:	d04c      	beq.n	8002890 <HAL_TIM_ConfigClockSource+0xc6>
 80027f6:	d829      	bhi.n	800284c <HAL_TIM_ConfigClockSource+0x82>
 80027f8:	2b40      	cmp	r3, #64	; 0x40
 80027fa:	d054      	beq.n	80028a6 <HAL_TIM_ConfigClockSource+0xdc>
 80027fc:	d90c      	bls.n	8002818 <HAL_TIM_ConfigClockSource+0x4e>
 80027fe:	2b50      	cmp	r3, #80	; 0x50
 8002800:	d122      	bne.n	8002848 <HAL_TIM_ConfigClockSource+0x7e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002802:	68ca      	ldr	r2, [r1, #12]
 8002804:	6849      	ldr	r1, [r1, #4]
 8002806:	6800      	ldr	r0, [r0, #0]
 8002808:	f7ff fc6c 	bl	80020e4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800280c:	2150      	movs	r1, #80	; 0x50
 800280e:	6820      	ldr	r0, [r4, #0]
 8002810:	f7ff fce0 	bl	80021d4 <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8002814:	2000      	movs	r0, #0
      break;
 8002816:	e005      	b.n	8002824 <HAL_TIM_ConfigClockSource+0x5a>
  switch (sClockSourceConfig->ClockSource)
 8002818:	2b20      	cmp	r3, #32
 800281a:	d00d      	beq.n	8002838 <HAL_TIM_ConfigClockSource+0x6e>
 800281c:	d909      	bls.n	8002832 <HAL_TIM_ConfigClockSource+0x68>
 800281e:	2b30      	cmp	r3, #48	; 0x30
 8002820:	d00a      	beq.n	8002838 <HAL_TIM_ConfigClockSource+0x6e>
      status = HAL_ERROR;
 8002822:	2001      	movs	r0, #1
  htim->State = HAL_TIM_STATE_READY;
 8002824:	2301      	movs	r3, #1
 8002826:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 800282a:	2300      	movs	r3, #0
 800282c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 8002830:	bd10      	pop	{r4, pc}
  switch (sClockSourceConfig->ClockSource)
 8002832:	b10b      	cbz	r3, 8002838 <HAL_TIM_ConfigClockSource+0x6e>
 8002834:	2b10      	cmp	r3, #16
 8002836:	d105      	bne.n	8002844 <HAL_TIM_ConfigClockSource+0x7a>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002838:	4619      	mov	r1, r3
 800283a:	6820      	ldr	r0, [r4, #0]
 800283c:	f7ff fcca 	bl	80021d4 <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8002840:	2000      	movs	r0, #0
      break;
 8002842:	e7ef      	b.n	8002824 <HAL_TIM_ConfigClockSource+0x5a>
      status = HAL_ERROR;
 8002844:	2001      	movs	r0, #1
 8002846:	e7ed      	b.n	8002824 <HAL_TIM_ConfigClockSource+0x5a>
 8002848:	2001      	movs	r0, #1
 800284a:	e7eb      	b.n	8002824 <HAL_TIM_ConfigClockSource+0x5a>
  switch (sClockSourceConfig->ClockSource)
 800284c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002850:	d034      	beq.n	80028bc <HAL_TIM_ConfigClockSource+0xf2>
 8002852:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002856:	d10c      	bne.n	8002872 <HAL_TIM_ConfigClockSource+0xa8>
      TIM_ETR_SetConfig(htim->Instance,
 8002858:	68cb      	ldr	r3, [r1, #12]
 800285a:	684a      	ldr	r2, [r1, #4]
 800285c:	6889      	ldr	r1, [r1, #8]
 800285e:	6800      	ldr	r0, [r0, #0]
 8002860:	f7ff ffa6 	bl	80027b0 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002864:	6822      	ldr	r2, [r4, #0]
 8002866:	6893      	ldr	r3, [r2, #8]
 8002868:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800286c:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 800286e:	2000      	movs	r0, #0
      break;
 8002870:	e7d8      	b.n	8002824 <HAL_TIM_ConfigClockSource+0x5a>
  switch (sClockSourceConfig->ClockSource)
 8002872:	2b70      	cmp	r3, #112	; 0x70
 8002874:	d124      	bne.n	80028c0 <HAL_TIM_ConfigClockSource+0xf6>
      TIM_ETR_SetConfig(htim->Instance,
 8002876:	68cb      	ldr	r3, [r1, #12]
 8002878:	684a      	ldr	r2, [r1, #4]
 800287a:	6889      	ldr	r1, [r1, #8]
 800287c:	6800      	ldr	r0, [r0, #0]
 800287e:	f7ff ff97 	bl	80027b0 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002882:	6822      	ldr	r2, [r4, #0]
 8002884:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002886:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR = tmpsmcr;
 800288a:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 800288c:	2000      	movs	r0, #0
      break;
 800288e:	e7c9      	b.n	8002824 <HAL_TIM_ConfigClockSource+0x5a>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002890:	68ca      	ldr	r2, [r1, #12]
 8002892:	6849      	ldr	r1, [r1, #4]
 8002894:	6800      	ldr	r0, [r0, #0]
 8002896:	f7ff fc53 	bl	8002140 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800289a:	2160      	movs	r1, #96	; 0x60
 800289c:	6820      	ldr	r0, [r4, #0]
 800289e:	f7ff fc99 	bl	80021d4 <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 80028a2:	2000      	movs	r0, #0
      break;
 80028a4:	e7be      	b.n	8002824 <HAL_TIM_ConfigClockSource+0x5a>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80028a6:	68ca      	ldr	r2, [r1, #12]
 80028a8:	6849      	ldr	r1, [r1, #4]
 80028aa:	6800      	ldr	r0, [r0, #0]
 80028ac:	f7ff fc1a 	bl	80020e4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80028b0:	2140      	movs	r1, #64	; 0x40
 80028b2:	6820      	ldr	r0, [r4, #0]
 80028b4:	f7ff fc8e 	bl	80021d4 <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 80028b8:	2000      	movs	r0, #0
      break;
 80028ba:	e7b3      	b.n	8002824 <HAL_TIM_ConfigClockSource+0x5a>
  switch (sClockSourceConfig->ClockSource)
 80028bc:	2000      	movs	r0, #0
 80028be:	e7b1      	b.n	8002824 <HAL_TIM_ConfigClockSource+0x5a>
      status = HAL_ERROR;
 80028c0:	2001      	movs	r0, #1
 80028c2:	e7af      	b.n	8002824 <HAL_TIM_ConfigClockSource+0x5a>
  __HAL_LOCK(htim);
 80028c4:	2002      	movs	r0, #2
}
 80028c6:	4770      	bx	lr

080028c8 <TIM_SlaveTimer_SetConfig>:
{
 80028c8:	b510      	push	{r4, lr}
  tmpsmcr = htim->Instance->SMCR;
 80028ca:	6804      	ldr	r4, [r0, #0]
 80028cc:	68a2      	ldr	r2, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80028ce:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= sSlaveConfig->InputTrigger;
 80028d2:	684b      	ldr	r3, [r1, #4]
 80028d4:	4313      	orrs	r3, r2
  tmpsmcr &= ~TIM_SMCR_SMS;
 80028d6:	f023 0307 	bic.w	r3, r3, #7
  tmpsmcr |= sSlaveConfig->SlaveMode;
 80028da:	680a      	ldr	r2, [r1, #0]
 80028dc:	431a      	orrs	r2, r3
  htim->Instance->SMCR = tmpsmcr;
 80028de:	60a2      	str	r2, [r4, #8]
  switch (sSlaveConfig->InputTrigger)
 80028e0:	684b      	ldr	r3, [r1, #4]
 80028e2:	2b50      	cmp	r3, #80	; 0x50
 80028e4:	d032      	beq.n	800294c <TIM_SlaveTimer_SetConfig+0x84>
 80028e6:	d90b      	bls.n	8002900 <TIM_SlaveTimer_SetConfig+0x38>
 80028e8:	2b60      	cmp	r3, #96	; 0x60
 80028ea:	d036      	beq.n	800295a <TIM_SlaveTimer_SetConfig+0x92>
 80028ec:	2b70      	cmp	r3, #112	; 0x70
 80028ee:	d143      	bne.n	8002978 <TIM_SlaveTimer_SetConfig+0xb0>
      TIM_ETR_SetConfig(htim->Instance,
 80028f0:	690b      	ldr	r3, [r1, #16]
 80028f2:	688a      	ldr	r2, [r1, #8]
 80028f4:	68c9      	ldr	r1, [r1, #12]
 80028f6:	6800      	ldr	r0, [r0, #0]
 80028f8:	f7ff ff5a 	bl	80027b0 <TIM_ETR_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 80028fc:	2000      	movs	r0, #0
      break;
 80028fe:	e00f      	b.n	8002920 <TIM_SlaveTimer_SetConfig+0x58>
  switch (sSlaveConfig->InputTrigger)
 8002900:	2b40      	cmp	r3, #64	; 0x40
 8002902:	d00e      	beq.n	8002922 <TIM_SlaveTimer_SetConfig+0x5a>
 8002904:	d901      	bls.n	800290a <TIM_SlaveTimer_SetConfig+0x42>
      status = HAL_ERROR;
 8002906:	2001      	movs	r0, #1
 8002908:	e00a      	b.n	8002920 <TIM_SlaveTimer_SetConfig+0x58>
  switch (sSlaveConfig->InputTrigger)
 800290a:	2b20      	cmp	r3, #32
 800290c:	d02c      	beq.n	8002968 <TIM_SlaveTimer_SetConfig+0xa0>
 800290e:	d903      	bls.n	8002918 <TIM_SlaveTimer_SetConfig+0x50>
 8002910:	2b30      	cmp	r3, #48	; 0x30
 8002912:	d12f      	bne.n	8002974 <TIM_SlaveTimer_SetConfig+0xac>
 8002914:	2000      	movs	r0, #0
 8002916:	e003      	b.n	8002920 <TIM_SlaveTimer_SetConfig+0x58>
 8002918:	b343      	cbz	r3, 800296c <TIM_SlaveTimer_SetConfig+0xa4>
 800291a:	2b10      	cmp	r3, #16
 800291c:	d128      	bne.n	8002970 <TIM_SlaveTimer_SetConfig+0xa8>
 800291e:	2000      	movs	r0, #0
}
 8002920:	bd10      	pop	{r4, pc}
      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8002922:	680b      	ldr	r3, [r1, #0]
 8002924:	2b05      	cmp	r3, #5
 8002926:	d029      	beq.n	800297c <TIM_SlaveTimer_SetConfig+0xb4>
      tmpccer = htim->Instance->CCER;
 8002928:	6803      	ldr	r3, [r0, #0]
 800292a:	6a1c      	ldr	r4, [r3, #32]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 800292c:	6a1a      	ldr	r2, [r3, #32]
 800292e:	f022 0201 	bic.w	r2, r2, #1
 8002932:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8002934:	6802      	ldr	r2, [r0, #0]
 8002936:	6993      	ldr	r3, [r2, #24]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002938:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 800293c:	6909      	ldr	r1, [r1, #16]
 800293e:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
      htim->Instance->CCMR1 = tmpccmr1;
 8002942:	6193      	str	r3, [r2, #24]
      htim->Instance->CCER = tmpccer;
 8002944:	6803      	ldr	r3, [r0, #0]
 8002946:	621c      	str	r4, [r3, #32]
  HAL_StatusTypeDef status = HAL_OK;
 8002948:	2000      	movs	r0, #0
      break;
 800294a:	e7e9      	b.n	8002920 <TIM_SlaveTimer_SetConfig+0x58>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800294c:	690a      	ldr	r2, [r1, #16]
 800294e:	6889      	ldr	r1, [r1, #8]
 8002950:	6800      	ldr	r0, [r0, #0]
 8002952:	f7ff fbc7 	bl	80020e4 <TIM_TI1_ConfigInputStage>
  HAL_StatusTypeDef status = HAL_OK;
 8002956:	2000      	movs	r0, #0
      break;
 8002958:	e7e2      	b.n	8002920 <TIM_SlaveTimer_SetConfig+0x58>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800295a:	690a      	ldr	r2, [r1, #16]
 800295c:	6889      	ldr	r1, [r1, #8]
 800295e:	6800      	ldr	r0, [r0, #0]
 8002960:	f7ff fbee 	bl	8002140 <TIM_TI2_ConfigInputStage>
  HAL_StatusTypeDef status = HAL_OK;
 8002964:	2000      	movs	r0, #0
      break;
 8002966:	e7db      	b.n	8002920 <TIM_SlaveTimer_SetConfig+0x58>
  switch (sSlaveConfig->InputTrigger)
 8002968:	2000      	movs	r0, #0
 800296a:	e7d9      	b.n	8002920 <TIM_SlaveTimer_SetConfig+0x58>
 800296c:	2000      	movs	r0, #0
 800296e:	e7d7      	b.n	8002920 <TIM_SlaveTimer_SetConfig+0x58>
      status = HAL_ERROR;
 8002970:	2001      	movs	r0, #1
 8002972:	e7d5      	b.n	8002920 <TIM_SlaveTimer_SetConfig+0x58>
 8002974:	2001      	movs	r0, #1
 8002976:	e7d3      	b.n	8002920 <TIM_SlaveTimer_SetConfig+0x58>
 8002978:	2001      	movs	r0, #1
 800297a:	e7d1      	b.n	8002920 <TIM_SlaveTimer_SetConfig+0x58>
        return HAL_ERROR;
 800297c:	2001      	movs	r0, #1
 800297e:	e7cf      	b.n	8002920 <TIM_SlaveTimer_SetConfig+0x58>

08002980 <HAL_TIM_SlaveConfigSynchro>:
  __HAL_LOCK(htim);
 8002980:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8002984:	2b01      	cmp	r3, #1
 8002986:	d022      	beq.n	80029ce <HAL_TIM_SlaveConfigSynchro+0x4e>
{
 8002988:	b510      	push	{r4, lr}
 800298a:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 800298c:	2301      	movs	r3, #1
 800298e:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 8002992:	2302      	movs	r3, #2
 8002994:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8002998:	f7ff ff96 	bl	80028c8 <TIM_SlaveTimer_SetConfig>
 800299c:	b980      	cbnz	r0, 80029c0 <HAL_TIM_SlaveConfigSynchro+0x40>
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 800299e:	6822      	ldr	r2, [r4, #0]
 80029a0:	68d3      	ldr	r3, [r2, #12]
 80029a2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80029a6:	60d3      	str	r3, [r2, #12]
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 80029a8:	6822      	ldr	r2, [r4, #0]
 80029aa:	68d3      	ldr	r3, [r2, #12]
 80029ac:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80029b0:	60d3      	str	r3, [r2, #12]
  htim->State = HAL_TIM_STATE_READY;
 80029b2:	2301      	movs	r3, #1
 80029b4:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 80029b8:	2300      	movs	r3, #0
 80029ba:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 80029be:	bd10      	pop	{r4, pc}
    htim->State = HAL_TIM_STATE_READY;
 80029c0:	2001      	movs	r0, #1
 80029c2:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 80029c6:	2300      	movs	r3, #0
 80029c8:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    return HAL_ERROR;
 80029cc:	e7f7      	b.n	80029be <HAL_TIM_SlaveConfigSynchro+0x3e>
  __HAL_LOCK(htim);
 80029ce:	2002      	movs	r0, #2
}
 80029d0:	4770      	bx	lr

080029d2 <TIM_CCxChannelCmd>:

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80029d2:	f001 011f 	and.w	r1, r1, #31
 80029d6:	f04f 0c01 	mov.w	ip, #1
 80029da:	fa0c fc01 	lsl.w	ip, ip, r1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80029de:	6a03      	ldr	r3, [r0, #32]
 80029e0:	ea23 030c 	bic.w	r3, r3, ip
 80029e4:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80029e6:	6a03      	ldr	r3, [r0, #32]
 80029e8:	408a      	lsls	r2, r1
 80029ea:	4313      	orrs	r3, r2
 80029ec:	6203      	str	r3, [r0, #32]
}
 80029ee:	4770      	bx	lr

080029f0 <HAL_TIM_PWM_Start>:
{
 80029f0:	b510      	push	{r4, lr}
 80029f2:	4604      	mov	r4, r0
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80029f4:	4608      	mov	r0, r1
 80029f6:	2900      	cmp	r1, #0
 80029f8:	d132      	bne.n	8002a60 <HAL_TIM_PWM_Start+0x70>
 80029fa:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
 80029fe:	b2db      	uxtb	r3, r3
 8002a00:	3b01      	subs	r3, #1
 8002a02:	bf18      	it	ne
 8002a04:	2301      	movne	r3, #1
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d163      	bne.n	8002ad2 <HAL_TIM_PWM_Start+0xe2>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002a0a:	2800      	cmp	r0, #0
 8002a0c:	d141      	bne.n	8002a92 <HAL_TIM_PWM_Start+0xa2>
 8002a0e:	2302      	movs	r3, #2
 8002a10:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002a14:	2201      	movs	r2, #1
 8002a16:	4601      	mov	r1, r0
 8002a18:	6820      	ldr	r0, [r4, #0]
 8002a1a:	f7ff ffda 	bl	80029d2 <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002a1e:	6823      	ldr	r3, [r4, #0]
 8002a20:	4a2e      	ldr	r2, [pc, #184]	; (8002adc <HAL_TIM_PWM_Start+0xec>)
 8002a22:	4293      	cmp	r3, r2
 8002a24:	d045      	beq.n	8002ab2 <HAL_TIM_PWM_Start+0xc2>
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002a26:	6823      	ldr	r3, [r4, #0]
 8002a28:	4a2c      	ldr	r2, [pc, #176]	; (8002adc <HAL_TIM_PWM_Start+0xec>)
 8002a2a:	4293      	cmp	r3, r2
 8002a2c:	d046      	beq.n	8002abc <HAL_TIM_PWM_Start+0xcc>
 8002a2e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a32:	d043      	beq.n	8002abc <HAL_TIM_PWM_Start+0xcc>
 8002a34:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8002a38:	4293      	cmp	r3, r2
 8002a3a:	d03f      	beq.n	8002abc <HAL_TIM_PWM_Start+0xcc>
 8002a3c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002a40:	4293      	cmp	r3, r2
 8002a42:	d03b      	beq.n	8002abc <HAL_TIM_PWM_Start+0xcc>
 8002a44:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002a48:	4293      	cmp	r3, r2
 8002a4a:	d037      	beq.n	8002abc <HAL_TIM_PWM_Start+0xcc>
 8002a4c:	f502 329a 	add.w	r2, r2, #78848	; 0x13400
 8002a50:	4293      	cmp	r3, r2
 8002a52:	d033      	beq.n	8002abc <HAL_TIM_PWM_Start+0xcc>
    __HAL_TIM_ENABLE(htim);
 8002a54:	681a      	ldr	r2, [r3, #0]
 8002a56:	f042 0201 	orr.w	r2, r2, #1
 8002a5a:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8002a5c:	2000      	movs	r0, #0
 8002a5e:	e037      	b.n	8002ad0 <HAL_TIM_PWM_Start+0xe0>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002a60:	2904      	cmp	r1, #4
 8002a62:	d008      	beq.n	8002a76 <HAL_TIM_PWM_Start+0x86>
 8002a64:	2908      	cmp	r1, #8
 8002a66:	d00d      	beq.n	8002a84 <HAL_TIM_PWM_Start+0x94>
 8002a68:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8002a6c:	b2db      	uxtb	r3, r3
 8002a6e:	3b01      	subs	r3, #1
 8002a70:	bf18      	it	ne
 8002a72:	2301      	movne	r3, #1
 8002a74:	e7c7      	b.n	8002a06 <HAL_TIM_PWM_Start+0x16>
 8002a76:	f894 303f 	ldrb.w	r3, [r4, #63]	; 0x3f
 8002a7a:	b2db      	uxtb	r3, r3
 8002a7c:	3b01      	subs	r3, #1
 8002a7e:	bf18      	it	ne
 8002a80:	2301      	movne	r3, #1
 8002a82:	e7c0      	b.n	8002a06 <HAL_TIM_PWM_Start+0x16>
 8002a84:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 8002a88:	b2db      	uxtb	r3, r3
 8002a8a:	3b01      	subs	r3, #1
 8002a8c:	bf18      	it	ne
 8002a8e:	2301      	movne	r3, #1
 8002a90:	e7b9      	b.n	8002a06 <HAL_TIM_PWM_Start+0x16>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002a92:	2804      	cmp	r0, #4
 8002a94:	d005      	beq.n	8002aa2 <HAL_TIM_PWM_Start+0xb2>
 8002a96:	2808      	cmp	r0, #8
 8002a98:	d007      	beq.n	8002aaa <HAL_TIM_PWM_Start+0xba>
 8002a9a:	2302      	movs	r3, #2
 8002a9c:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 8002aa0:	e7b8      	b.n	8002a14 <HAL_TIM_PWM_Start+0x24>
 8002aa2:	2302      	movs	r3, #2
 8002aa4:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8002aa8:	e7b4      	b.n	8002a14 <HAL_TIM_PWM_Start+0x24>
 8002aaa:	2302      	movs	r3, #2
 8002aac:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8002ab0:	e7b0      	b.n	8002a14 <HAL_TIM_PWM_Start+0x24>
    __HAL_TIM_MOE_ENABLE(htim);
 8002ab2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002ab4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002ab8:	645a      	str	r2, [r3, #68]	; 0x44
 8002aba:	e7b4      	b.n	8002a26 <HAL_TIM_PWM_Start+0x36>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002abc:	689a      	ldr	r2, [r3, #8]
 8002abe:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ac2:	2a06      	cmp	r2, #6
 8002ac4:	d007      	beq.n	8002ad6 <HAL_TIM_PWM_Start+0xe6>
      __HAL_TIM_ENABLE(htim);
 8002ac6:	681a      	ldr	r2, [r3, #0]
 8002ac8:	f042 0201 	orr.w	r2, r2, #1
 8002acc:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8002ace:	2000      	movs	r0, #0
}
 8002ad0:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8002ad2:	2001      	movs	r0, #1
 8002ad4:	e7fc      	b.n	8002ad0 <HAL_TIM_PWM_Start+0xe0>
  return HAL_OK;
 8002ad6:	2000      	movs	r0, #0
 8002ad8:	e7fa      	b.n	8002ad0 <HAL_TIM_PWM_Start+0xe0>
 8002ada:	bf00      	nop
 8002adc:	40010000 	.word	0x40010000

08002ae0 <HAL_TIM_IC_Start>:
{
 8002ae0:	b510      	push	{r4, lr}
 8002ae2:	4604      	mov	r4, r0
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8002ae4:	460b      	mov	r3, r1
 8002ae6:	2900      	cmp	r1, #0
 8002ae8:	d137      	bne.n	8002b5a <HAL_TIM_IC_Start+0x7a>
 8002aea:	f890 003e 	ldrb.w	r0, [r0, #62]	; 0x3e
 8002aee:	b2c0      	uxtb	r0, r0
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d142      	bne.n	8002b7a <HAL_TIM_IC_Start+0x9a>
 8002af4:	f894 2042 	ldrb.w	r2, [r4, #66]	; 0x42
 8002af8:	b2d2      	uxtb	r2, r2
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8002afa:	2801      	cmp	r0, #1
 8002afc:	d178      	bne.n	8002bf0 <HAL_TIM_IC_Start+0x110>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8002afe:	2a01      	cmp	r2, #1
 8002b00:	d177      	bne.n	8002bf2 <HAL_TIM_IC_Start+0x112>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d149      	bne.n	8002b9a <HAL_TIM_IC_Start+0xba>
 8002b06:	2202      	movs	r2, #2
 8002b08:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d154      	bne.n	8002bba <HAL_TIM_IC_Start+0xda>
 8002b10:	2202      	movs	r2, #2
 8002b12:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002b16:	2201      	movs	r2, #1
 8002b18:	4619      	mov	r1, r3
 8002b1a:	6820      	ldr	r0, [r4, #0]
 8002b1c:	f7ff ff59 	bl	80029d2 <TIM_CCxChannelCmd>
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002b20:	6823      	ldr	r3, [r4, #0]
 8002b22:	4a35      	ldr	r2, [pc, #212]	; (8002bf8 <HAL_TIM_IC_Start+0x118>)
 8002b24:	4293      	cmp	r3, r2
 8002b26:	d058      	beq.n	8002bda <HAL_TIM_IC_Start+0xfa>
 8002b28:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b2c:	d055      	beq.n	8002bda <HAL_TIM_IC_Start+0xfa>
 8002b2e:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8002b32:	4293      	cmp	r3, r2
 8002b34:	d051      	beq.n	8002bda <HAL_TIM_IC_Start+0xfa>
 8002b36:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002b3a:	4293      	cmp	r3, r2
 8002b3c:	d04d      	beq.n	8002bda <HAL_TIM_IC_Start+0xfa>
 8002b3e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002b42:	4293      	cmp	r3, r2
 8002b44:	d049      	beq.n	8002bda <HAL_TIM_IC_Start+0xfa>
 8002b46:	f502 329a 	add.w	r2, r2, #78848	; 0x13400
 8002b4a:	4293      	cmp	r3, r2
 8002b4c:	d045      	beq.n	8002bda <HAL_TIM_IC_Start+0xfa>
    __HAL_TIM_ENABLE(htim);
 8002b4e:	681a      	ldr	r2, [r3, #0]
 8002b50:	f042 0201 	orr.w	r2, r2, #1
 8002b54:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8002b56:	2000      	movs	r0, #0
 8002b58:	e04b      	b.n	8002bf2 <HAL_TIM_IC_Start+0x112>
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8002b5a:	2904      	cmp	r1, #4
 8002b5c:	d005      	beq.n	8002b6a <HAL_TIM_IC_Start+0x8a>
 8002b5e:	2908      	cmp	r1, #8
 8002b60:	d007      	beq.n	8002b72 <HAL_TIM_IC_Start+0x92>
 8002b62:	f890 0041 	ldrb.w	r0, [r0, #65]	; 0x41
 8002b66:	b2c0      	uxtb	r0, r0
 8002b68:	e7c2      	b.n	8002af0 <HAL_TIM_IC_Start+0x10>
 8002b6a:	f890 003f 	ldrb.w	r0, [r0, #63]	; 0x3f
 8002b6e:	b2c0      	uxtb	r0, r0
 8002b70:	e7be      	b.n	8002af0 <HAL_TIM_IC_Start+0x10>
 8002b72:	f890 0040 	ldrb.w	r0, [r0, #64]	; 0x40
 8002b76:	b2c0      	uxtb	r0, r0
 8002b78:	e7ba      	b.n	8002af0 <HAL_TIM_IC_Start+0x10>
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8002b7a:	2b04      	cmp	r3, #4
 8002b7c:	d005      	beq.n	8002b8a <HAL_TIM_IC_Start+0xaa>
 8002b7e:	2b08      	cmp	r3, #8
 8002b80:	d007      	beq.n	8002b92 <HAL_TIM_IC_Start+0xb2>
 8002b82:	f894 2045 	ldrb.w	r2, [r4, #69]	; 0x45
 8002b86:	b2d2      	uxtb	r2, r2
 8002b88:	e7b7      	b.n	8002afa <HAL_TIM_IC_Start+0x1a>
 8002b8a:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8002b8e:	b2d2      	uxtb	r2, r2
 8002b90:	e7b3      	b.n	8002afa <HAL_TIM_IC_Start+0x1a>
 8002b92:	f894 2044 	ldrb.w	r2, [r4, #68]	; 0x44
 8002b96:	b2d2      	uxtb	r2, r2
 8002b98:	e7af      	b.n	8002afa <HAL_TIM_IC_Start+0x1a>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002b9a:	2b04      	cmp	r3, #4
 8002b9c:	d005      	beq.n	8002baa <HAL_TIM_IC_Start+0xca>
 8002b9e:	2b08      	cmp	r3, #8
 8002ba0:	d007      	beq.n	8002bb2 <HAL_TIM_IC_Start+0xd2>
 8002ba2:	2202      	movs	r2, #2
 8002ba4:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
 8002ba8:	e7b0      	b.n	8002b0c <HAL_TIM_IC_Start+0x2c>
 8002baa:	2202      	movs	r2, #2
 8002bac:	f884 203f 	strb.w	r2, [r4, #63]	; 0x3f
 8002bb0:	e7ac      	b.n	8002b0c <HAL_TIM_IC_Start+0x2c>
 8002bb2:	2202      	movs	r2, #2
 8002bb4:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
 8002bb8:	e7a8      	b.n	8002b0c <HAL_TIM_IC_Start+0x2c>
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002bba:	2b04      	cmp	r3, #4
 8002bbc:	d005      	beq.n	8002bca <HAL_TIM_IC_Start+0xea>
 8002bbe:	2b08      	cmp	r3, #8
 8002bc0:	d007      	beq.n	8002bd2 <HAL_TIM_IC_Start+0xf2>
 8002bc2:	2202      	movs	r2, #2
 8002bc4:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 8002bc8:	e7a5      	b.n	8002b16 <HAL_TIM_IC_Start+0x36>
 8002bca:	2202      	movs	r2, #2
 8002bcc:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8002bd0:	e7a1      	b.n	8002b16 <HAL_TIM_IC_Start+0x36>
 8002bd2:	2202      	movs	r2, #2
 8002bd4:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
 8002bd8:	e79d      	b.n	8002b16 <HAL_TIM_IC_Start+0x36>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002bda:	689a      	ldr	r2, [r3, #8]
 8002bdc:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002be0:	2a06      	cmp	r2, #6
 8002be2:	d007      	beq.n	8002bf4 <HAL_TIM_IC_Start+0x114>
      __HAL_TIM_ENABLE(htim);
 8002be4:	681a      	ldr	r2, [r3, #0]
 8002be6:	f042 0201 	orr.w	r2, r2, #1
 8002bea:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8002bec:	2000      	movs	r0, #0
 8002bee:	e000      	b.n	8002bf2 <HAL_TIM_IC_Start+0x112>
    return HAL_ERROR;
 8002bf0:	2001      	movs	r0, #1
}
 8002bf2:	bd10      	pop	{r4, pc}
  return HAL_OK;
 8002bf4:	2000      	movs	r0, #0
 8002bf6:	e7fc      	b.n	8002bf2 <HAL_TIM_IC_Start+0x112>
 8002bf8:	40010000 	.word	0x40010000

08002bfc <HAL_TIM_IC_Start_IT>:
{
 8002bfc:	b510      	push	{r4, lr}
 8002bfe:	4604      	mov	r4, r0
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8002c00:	460b      	mov	r3, r1
 8002c02:	bb09      	cbnz	r1, 8002c48 <HAL_TIM_IC_Start_IT+0x4c>
 8002c04:	f890 003e 	ldrb.w	r0, [r0, #62]	; 0x3e
 8002c08:	b2c0      	uxtb	r0, r0
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8002c0a:	bb6b      	cbnz	r3, 8002c68 <HAL_TIM_IC_Start_IT+0x6c>
 8002c0c:	f894 2042 	ldrb.w	r2, [r4, #66]	; 0x42
 8002c10:	b2d2      	uxtb	r2, r2
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8002c12:	2801      	cmp	r0, #1
 8002c14:	f040 809c 	bne.w	8002d50 <HAL_TIM_IC_Start_IT+0x154>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8002c18:	2a01      	cmp	r2, #1
 8002c1a:	f040 809a 	bne.w	8002d52 <HAL_TIM_IC_Start_IT+0x156>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002c1e:	bb9b      	cbnz	r3, 8002c88 <HAL_TIM_IC_Start_IT+0x8c>
 8002c20:	2102      	movs	r1, #2
 8002c22:	f884 103e 	strb.w	r1, [r4, #62]	; 0x3e
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d13e      	bne.n	8002ca8 <HAL_TIM_IC_Start_IT+0xac>
 8002c2a:	2102      	movs	r1, #2
 8002c2c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
  switch (Channel)
 8002c30:	2b0c      	cmp	r3, #12
 8002c32:	f200 808f 	bhi.w	8002d54 <HAL_TIM_IC_Start_IT+0x158>
 8002c36:	e8df f003 	tbb	[pc, r3]
 8002c3a:	8d47      	.short	0x8d47
 8002c3c:	8d6e8d8d 	.word	0x8d6e8d8d
 8002c40:	8d748d8d 	.word	0x8d748d8d
 8002c44:	8d8d      	.short	0x8d8d
 8002c46:	7a          	.byte	0x7a
 8002c47:	00          	.byte	0x00
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8002c48:	2904      	cmp	r1, #4
 8002c4a:	d005      	beq.n	8002c58 <HAL_TIM_IC_Start_IT+0x5c>
 8002c4c:	2908      	cmp	r1, #8
 8002c4e:	d007      	beq.n	8002c60 <HAL_TIM_IC_Start_IT+0x64>
 8002c50:	f890 0041 	ldrb.w	r0, [r0, #65]	; 0x41
 8002c54:	b2c0      	uxtb	r0, r0
 8002c56:	e7d8      	b.n	8002c0a <HAL_TIM_IC_Start_IT+0xe>
 8002c58:	f890 003f 	ldrb.w	r0, [r0, #63]	; 0x3f
 8002c5c:	b2c0      	uxtb	r0, r0
 8002c5e:	e7d4      	b.n	8002c0a <HAL_TIM_IC_Start_IT+0xe>
 8002c60:	f890 0040 	ldrb.w	r0, [r0, #64]	; 0x40
 8002c64:	b2c0      	uxtb	r0, r0
 8002c66:	e7d0      	b.n	8002c0a <HAL_TIM_IC_Start_IT+0xe>
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8002c68:	2b04      	cmp	r3, #4
 8002c6a:	d005      	beq.n	8002c78 <HAL_TIM_IC_Start_IT+0x7c>
 8002c6c:	2b08      	cmp	r3, #8
 8002c6e:	d007      	beq.n	8002c80 <HAL_TIM_IC_Start_IT+0x84>
 8002c70:	f894 2045 	ldrb.w	r2, [r4, #69]	; 0x45
 8002c74:	b2d2      	uxtb	r2, r2
 8002c76:	e7cc      	b.n	8002c12 <HAL_TIM_IC_Start_IT+0x16>
 8002c78:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8002c7c:	b2d2      	uxtb	r2, r2
 8002c7e:	e7c8      	b.n	8002c12 <HAL_TIM_IC_Start_IT+0x16>
 8002c80:	f894 2044 	ldrb.w	r2, [r4, #68]	; 0x44
 8002c84:	b2d2      	uxtb	r2, r2
 8002c86:	e7c4      	b.n	8002c12 <HAL_TIM_IC_Start_IT+0x16>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002c88:	2b04      	cmp	r3, #4
 8002c8a:	d005      	beq.n	8002c98 <HAL_TIM_IC_Start_IT+0x9c>
 8002c8c:	2b08      	cmp	r3, #8
 8002c8e:	d007      	beq.n	8002ca0 <HAL_TIM_IC_Start_IT+0xa4>
 8002c90:	2102      	movs	r1, #2
 8002c92:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
 8002c96:	e7c6      	b.n	8002c26 <HAL_TIM_IC_Start_IT+0x2a>
 8002c98:	2102      	movs	r1, #2
 8002c9a:	f884 103f 	strb.w	r1, [r4, #63]	; 0x3f
 8002c9e:	e7c2      	b.n	8002c26 <HAL_TIM_IC_Start_IT+0x2a>
 8002ca0:	2102      	movs	r1, #2
 8002ca2:	f884 1040 	strb.w	r1, [r4, #64]	; 0x40
 8002ca6:	e7be      	b.n	8002c26 <HAL_TIM_IC_Start_IT+0x2a>
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002ca8:	2b04      	cmp	r3, #4
 8002caa:	d005      	beq.n	8002cb8 <HAL_TIM_IC_Start_IT+0xbc>
 8002cac:	2b08      	cmp	r3, #8
 8002cae:	d007      	beq.n	8002cc0 <HAL_TIM_IC_Start_IT+0xc4>
 8002cb0:	2102      	movs	r1, #2
 8002cb2:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8002cb6:	e7bb      	b.n	8002c30 <HAL_TIM_IC_Start_IT+0x34>
 8002cb8:	2102      	movs	r1, #2
 8002cba:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002cbe:	e7b7      	b.n	8002c30 <HAL_TIM_IC_Start_IT+0x34>
 8002cc0:	2102      	movs	r1, #2
 8002cc2:	f884 1044 	strb.w	r1, [r4, #68]	; 0x44
 8002cc6:	e7b3      	b.n	8002c30 <HAL_TIM_IC_Start_IT+0x34>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8002cc8:	6821      	ldr	r1, [r4, #0]
 8002cca:	68ca      	ldr	r2, [r1, #12]
 8002ccc:	f042 0202 	orr.w	r2, r2, #2
 8002cd0:	60ca      	str	r2, [r1, #12]
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002cd2:	2201      	movs	r2, #1
 8002cd4:	4619      	mov	r1, r3
 8002cd6:	6820      	ldr	r0, [r4, #0]
 8002cd8:	f7ff fe7b 	bl	80029d2 <TIM_CCxChannelCmd>
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002cdc:	6823      	ldr	r3, [r4, #0]
 8002cde:	4a1f      	ldr	r2, [pc, #124]	; (8002d5c <HAL_TIM_IC_Start_IT+0x160>)
 8002ce0:	4293      	cmp	r3, r2
 8002ce2:	d02a      	beq.n	8002d3a <HAL_TIM_IC_Start_IT+0x13e>
 8002ce4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ce8:	d027      	beq.n	8002d3a <HAL_TIM_IC_Start_IT+0x13e>
 8002cea:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8002cee:	4293      	cmp	r3, r2
 8002cf0:	d023      	beq.n	8002d3a <HAL_TIM_IC_Start_IT+0x13e>
 8002cf2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002cf6:	4293      	cmp	r3, r2
 8002cf8:	d01f      	beq.n	8002d3a <HAL_TIM_IC_Start_IT+0x13e>
 8002cfa:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002cfe:	4293      	cmp	r3, r2
 8002d00:	d01b      	beq.n	8002d3a <HAL_TIM_IC_Start_IT+0x13e>
 8002d02:	f502 329a 	add.w	r2, r2, #78848	; 0x13400
 8002d06:	4293      	cmp	r3, r2
 8002d08:	d017      	beq.n	8002d3a <HAL_TIM_IC_Start_IT+0x13e>
      __HAL_TIM_ENABLE(htim);
 8002d0a:	681a      	ldr	r2, [r3, #0]
 8002d0c:	f042 0201 	orr.w	r2, r2, #1
 8002d10:	601a      	str	r2, [r3, #0]
 8002d12:	2000      	movs	r0, #0
 8002d14:	e01d      	b.n	8002d52 <HAL_TIM_IC_Start_IT+0x156>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8002d16:	6821      	ldr	r1, [r4, #0]
 8002d18:	68ca      	ldr	r2, [r1, #12]
 8002d1a:	f042 0204 	orr.w	r2, r2, #4
 8002d1e:	60ca      	str	r2, [r1, #12]
  if (status == HAL_OK)
 8002d20:	e7d7      	b.n	8002cd2 <HAL_TIM_IC_Start_IT+0xd6>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8002d22:	6821      	ldr	r1, [r4, #0]
 8002d24:	68ca      	ldr	r2, [r1, #12]
 8002d26:	f042 0208 	orr.w	r2, r2, #8
 8002d2a:	60ca      	str	r2, [r1, #12]
  if (status == HAL_OK)
 8002d2c:	e7d1      	b.n	8002cd2 <HAL_TIM_IC_Start_IT+0xd6>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8002d2e:	6821      	ldr	r1, [r4, #0]
 8002d30:	68ca      	ldr	r2, [r1, #12]
 8002d32:	f042 0210 	orr.w	r2, r2, #16
 8002d36:	60ca      	str	r2, [r1, #12]
  if (status == HAL_OK)
 8002d38:	e7cb      	b.n	8002cd2 <HAL_TIM_IC_Start_IT+0xd6>
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002d3a:	689a      	ldr	r2, [r3, #8]
 8002d3c:	f002 0207 	and.w	r2, r2, #7
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d40:	2a06      	cmp	r2, #6
 8002d42:	d009      	beq.n	8002d58 <HAL_TIM_IC_Start_IT+0x15c>
        __HAL_TIM_ENABLE(htim);
 8002d44:	681a      	ldr	r2, [r3, #0]
 8002d46:	f042 0201 	orr.w	r2, r2, #1
 8002d4a:	601a      	str	r2, [r3, #0]
 8002d4c:	2000      	movs	r0, #0
 8002d4e:	e000      	b.n	8002d52 <HAL_TIM_IC_Start_IT+0x156>
    return HAL_ERROR;
 8002d50:	2001      	movs	r0, #1
}
 8002d52:	bd10      	pop	{r4, pc}
  switch (Channel)
 8002d54:	4610      	mov	r0, r2
 8002d56:	e7fc      	b.n	8002d52 <HAL_TIM_IC_Start_IT+0x156>
 8002d58:	2000      	movs	r0, #0
 8002d5a:	e7fa      	b.n	8002d52 <HAL_TIM_IC_Start_IT+0x156>
 8002d5c:	40010000 	.word	0x40010000

08002d60 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002d60:	f890 203c 	ldrb.w	r2, [r0, #60]	; 0x3c
 8002d64:	2a01      	cmp	r2, #1
 8002d66:	d035      	beq.n	8002dd4 <HAL_TIMEx_MasterConfigSynchronization+0x74>
{
 8002d68:	b410      	push	{r4}
 8002d6a:	4603      	mov	r3, r0
  __HAL_LOCK(htim);
 8002d6c:	2201      	movs	r2, #1
 8002d6e:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d72:	2202      	movs	r2, #2
 8002d74:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002d78:	6802      	ldr	r2, [r0, #0]
 8002d7a:	6850      	ldr	r0, [r2, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002d7c:	6894      	ldr	r4, [r2, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002d7e:	f020 0c70 	bic.w	ip, r0, #112	; 0x70
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002d82:	6808      	ldr	r0, [r1, #0]
 8002d84:	ea40 000c 	orr.w	r0, r0, ip

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002d88:	6050      	str	r0, [r2, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002d8a:	681a      	ldr	r2, [r3, #0]
 8002d8c:	4812      	ldr	r0, [pc, #72]	; (8002dd8 <HAL_TIMEx_MasterConfigSynchronization+0x78>)
 8002d8e:	4282      	cmp	r2, r0
 8002d90:	d012      	beq.n	8002db8 <HAL_TIMEx_MasterConfigSynchronization+0x58>
 8002d92:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 8002d96:	d00f      	beq.n	8002db8 <HAL_TIMEx_MasterConfigSynchronization+0x58>
 8002d98:	f5a0 407c 	sub.w	r0, r0, #64512	; 0xfc00
 8002d9c:	4282      	cmp	r2, r0
 8002d9e:	d00b      	beq.n	8002db8 <HAL_TIMEx_MasterConfigSynchronization+0x58>
 8002da0:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 8002da4:	4282      	cmp	r2, r0
 8002da6:	d007      	beq.n	8002db8 <HAL_TIMEx_MasterConfigSynchronization+0x58>
 8002da8:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 8002dac:	4282      	cmp	r2, r0
 8002dae:	d003      	beq.n	8002db8 <HAL_TIMEx_MasterConfigSynchronization+0x58>
 8002db0:	f500 309a 	add.w	r0, r0, #78848	; 0x13400
 8002db4:	4282      	cmp	r2, r0
 8002db6:	d104      	bne.n	8002dc2 <HAL_TIMEx_MasterConfigSynchronization+0x62>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002db8:	f024 0480 	bic.w	r4, r4, #128	; 0x80
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002dbc:	6849      	ldr	r1, [r1, #4]
 8002dbe:	4321      	orrs	r1, r4

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002dc0:	6091      	str	r1, [r2, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002dc2:	2201      	movs	r2, #1
 8002dc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002dc8:	2000      	movs	r0, #0
 8002dca:	f883 003c 	strb.w	r0, [r3, #60]	; 0x3c

  return HAL_OK;
}
 8002dce:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002dd2:	4770      	bx	lr
  __HAL_LOCK(htim);
 8002dd4:	2002      	movs	r0, #2
}
 8002dd6:	4770      	bx	lr
 8002dd8:	40010000 	.word	0x40010000

08002ddc <HAL_TIMEx_CommutCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002ddc:	4770      	bx	lr

08002dde <HAL_TIMEx_BreakCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002dde:	4770      	bx	lr

08002de0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002de0:	b510      	push	{r4, lr}
 8002de2:	4604      	mov	r4, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002de4:	6802      	ldr	r2, [r0, #0]
 8002de6:	6913      	ldr	r3, [r2, #16]
 8002de8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002dec:	68c1      	ldr	r1, [r0, #12]
 8002dee:	430b      	orrs	r3, r1
 8002df0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002df2:	6883      	ldr	r3, [r0, #8]
 8002df4:	6902      	ldr	r2, [r0, #16]
 8002df6:	431a      	orrs	r2, r3
 8002df8:	6943      	ldr	r3, [r0, #20]
 8002dfa:	431a      	orrs	r2, r3
 8002dfc:	69c3      	ldr	r3, [r0, #28]
 8002dfe:	431a      	orrs	r2, r3
  MODIFY_REG(huart->Instance->CR1,
 8002e00:	6801      	ldr	r1, [r0, #0]
 8002e02:	68cb      	ldr	r3, [r1, #12]
 8002e04:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8002e08:	f023 030c 	bic.w	r3, r3, #12
 8002e0c:	4313      	orrs	r3, r2
 8002e0e:	60cb      	str	r3, [r1, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002e10:	6802      	ldr	r2, [r0, #0]
 8002e12:	6953      	ldr	r3, [r2, #20]
 8002e14:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002e18:	6981      	ldr	r1, [r0, #24]
 8002e1a:	430b      	orrs	r3, r1
 8002e1c:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002e1e:	6803      	ldr	r3, [r0, #0]
 8002e20:	4a31      	ldr	r2, [pc, #196]	; (8002ee8 <UART_SetConfig+0x108>)
 8002e22:	4293      	cmp	r3, r2
 8002e24:	d006      	beq.n	8002e34 <UART_SetConfig+0x54>
 8002e26:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002e2a:	4293      	cmp	r3, r2
 8002e2c:	d002      	beq.n	8002e34 <UART_SetConfig+0x54>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002e2e:	f7ff f8b5 	bl	8001f9c <HAL_RCC_GetPCLK1Freq>
 8002e32:	e001      	b.n	8002e38 <UART_SetConfig+0x58>
      pclk = HAL_RCC_GetPCLK2Freq();
 8002e34:	f7ff f8c2 	bl	8001fbc <HAL_RCC_GetPCLK2Freq>
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002e38:	69e3      	ldr	r3, [r4, #28]
 8002e3a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002e3e:	d029      	beq.n	8002e94 <UART_SetConfig+0xb4>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002e40:	2100      	movs	r1, #0
 8002e42:	1803      	adds	r3, r0, r0
 8002e44:	4149      	adcs	r1, r1
 8002e46:	181b      	adds	r3, r3, r0
 8002e48:	f141 0100 	adc.w	r1, r1, #0
 8002e4c:	00c9      	lsls	r1, r1, #3
 8002e4e:	ea41 7153 	orr.w	r1, r1, r3, lsr #29
 8002e52:	00db      	lsls	r3, r3, #3
 8002e54:	1818      	adds	r0, r3, r0
 8002e56:	6863      	ldr	r3, [r4, #4]
 8002e58:	ea4f 0283 	mov.w	r2, r3, lsl #2
 8002e5c:	ea4f 7393 	mov.w	r3, r3, lsr #30
 8002e60:	f141 0100 	adc.w	r1, r1, #0
 8002e64:	f7fd fea8 	bl	8000bb8 <__aeabi_uldivmod>
 8002e68:	4a20      	ldr	r2, [pc, #128]	; (8002eec <UART_SetConfig+0x10c>)
 8002e6a:	fba2 3100 	umull	r3, r1, r2, r0
 8002e6e:	0949      	lsrs	r1, r1, #5
 8002e70:	2364      	movs	r3, #100	; 0x64
 8002e72:	fb03 0311 	mls	r3, r3, r1, r0
 8002e76:	011b      	lsls	r3, r3, #4
 8002e78:	3332      	adds	r3, #50	; 0x32
 8002e7a:	fba2 2303 	umull	r2, r3, r2, r3
 8002e7e:	095b      	lsrs	r3, r3, #5
 8002e80:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002e84:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8002e88:	f003 030f 	and.w	r3, r3, #15
 8002e8c:	6821      	ldr	r1, [r4, #0]
 8002e8e:	4413      	add	r3, r2
 8002e90:	608b      	str	r3, [r1, #8]
  }
}
 8002e92:	bd10      	pop	{r4, pc}
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002e94:	2300      	movs	r3, #0
 8002e96:	1802      	adds	r2, r0, r0
 8002e98:	eb43 0103 	adc.w	r1, r3, r3
 8002e9c:	1812      	adds	r2, r2, r0
 8002e9e:	f141 0100 	adc.w	r1, r1, #0
 8002ea2:	00c9      	lsls	r1, r1, #3
 8002ea4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002ea8:	00d2      	lsls	r2, r2, #3
 8002eaa:	1810      	adds	r0, r2, r0
 8002eac:	f141 0100 	adc.w	r1, r1, #0
 8002eb0:	6862      	ldr	r2, [r4, #4]
 8002eb2:	1892      	adds	r2, r2, r2
 8002eb4:	415b      	adcs	r3, r3
 8002eb6:	f7fd fe7f 	bl	8000bb8 <__aeabi_uldivmod>
 8002eba:	4a0c      	ldr	r2, [pc, #48]	; (8002eec <UART_SetConfig+0x10c>)
 8002ebc:	fba2 3100 	umull	r3, r1, r2, r0
 8002ec0:	0949      	lsrs	r1, r1, #5
 8002ec2:	2364      	movs	r3, #100	; 0x64
 8002ec4:	fb03 0311 	mls	r3, r3, r1, r0
 8002ec8:	00db      	lsls	r3, r3, #3
 8002eca:	3332      	adds	r3, #50	; 0x32
 8002ecc:	fba2 2303 	umull	r2, r3, r2, r3
 8002ed0:	095b      	lsrs	r3, r3, #5
 8002ed2:	005a      	lsls	r2, r3, #1
 8002ed4:	f402 72f8 	and.w	r2, r2, #496	; 0x1f0
 8002ed8:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8002edc:	f003 0307 	and.w	r3, r3, #7
 8002ee0:	6821      	ldr	r1, [r4, #0]
 8002ee2:	4413      	add	r3, r2
 8002ee4:	608b      	str	r3, [r1, #8]
 8002ee6:	e7d4      	b.n	8002e92 <UART_SetConfig+0xb2>
 8002ee8:	40011000 	.word	0x40011000
 8002eec:	51eb851f 	.word	0x51eb851f

08002ef0 <UART_WaitOnFlagUntilTimeout>:
{
 8002ef0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002ef4:	4605      	mov	r5, r0
 8002ef6:	460f      	mov	r7, r1
 8002ef8:	4616      	mov	r6, r2
 8002efa:	4699      	mov	r9, r3
 8002efc:	f8dd 8020 	ldr.w	r8, [sp, #32]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002f00:	682b      	ldr	r3, [r5, #0]
 8002f02:	681c      	ldr	r4, [r3, #0]
 8002f04:	ea37 0404 	bics.w	r4, r7, r4
 8002f08:	bf0c      	ite	eq
 8002f0a:	2401      	moveq	r4, #1
 8002f0c:	2400      	movne	r4, #0
 8002f0e:	42b4      	cmp	r4, r6
 8002f10:	d12d      	bne.n	8002f6e <UART_WaitOnFlagUntilTimeout+0x7e>
    if (Timeout != HAL_MAX_DELAY)
 8002f12:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
 8002f16:	d0f3      	beq.n	8002f00 <UART_WaitOnFlagUntilTimeout+0x10>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002f18:	f1b8 0f00 	cmp.w	r8, #0
 8002f1c:	d005      	beq.n	8002f2a <UART_WaitOnFlagUntilTimeout+0x3a>
 8002f1e:	f7fe fbd1 	bl	80016c4 <HAL_GetTick>
 8002f22:	eba0 0009 	sub.w	r0, r0, r9
 8002f26:	4540      	cmp	r0, r8
 8002f28:	d9ea      	bls.n	8002f00 <UART_WaitOnFlagUntilTimeout+0x10>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002f2a:	682a      	ldr	r2, [r5, #0]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f2c:	f102 030c 	add.w	r3, r2, #12
 8002f30:	e853 3f00 	ldrex	r3, [r3]
 8002f34:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f38:	320c      	adds	r2, #12
 8002f3a:	e842 3100 	strex	r1, r3, [r2]
 8002f3e:	2900      	cmp	r1, #0
 8002f40:	d1f3      	bne.n	8002f2a <UART_WaitOnFlagUntilTimeout+0x3a>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002f42:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f44:	f102 0314 	add.w	r3, r2, #20
 8002f48:	e853 3f00 	ldrex	r3, [r3]
 8002f4c:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f50:	3214      	adds	r2, #20
 8002f52:	e842 3100 	strex	r1, r3, [r2]
 8002f56:	2900      	cmp	r1, #0
 8002f58:	d1f3      	bne.n	8002f42 <UART_WaitOnFlagUntilTimeout+0x52>
        huart->gState  = HAL_UART_STATE_READY;
 8002f5a:	2320      	movs	r3, #32
 8002f5c:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002f60:	f885 303e 	strb.w	r3, [r5, #62]	; 0x3e
        __HAL_UNLOCK(huart);
 8002f64:	2300      	movs	r3, #0
 8002f66:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
        return HAL_TIMEOUT;
 8002f6a:	2003      	movs	r0, #3
 8002f6c:	e000      	b.n	8002f70 <UART_WaitOnFlagUntilTimeout+0x80>
  return HAL_OK;
 8002f6e:	2000      	movs	r0, #0
}
 8002f70:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08002f74 <HAL_UART_Init>:
  if (huart == NULL)
 8002f74:	b358      	cbz	r0, 8002fce <HAL_UART_Init+0x5a>
{
 8002f76:	b510      	push	{r4, lr}
 8002f78:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 8002f7a:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8002f7e:	b30b      	cbz	r3, 8002fc4 <HAL_UART_Init+0x50>
  huart->gState = HAL_UART_STATE_BUSY;
 8002f80:	2324      	movs	r3, #36	; 0x24
 8002f82:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UART_DISABLE(huart);
 8002f86:	6822      	ldr	r2, [r4, #0]
 8002f88:	68d3      	ldr	r3, [r2, #12]
 8002f8a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002f8e:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8002f90:	4620      	mov	r0, r4
 8002f92:	f7ff ff25 	bl	8002de0 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002f96:	6822      	ldr	r2, [r4, #0]
 8002f98:	6913      	ldr	r3, [r2, #16]
 8002f9a:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8002f9e:	6113      	str	r3, [r2, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002fa0:	6822      	ldr	r2, [r4, #0]
 8002fa2:	6953      	ldr	r3, [r2, #20]
 8002fa4:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 8002fa8:	6153      	str	r3, [r2, #20]
  __HAL_UART_ENABLE(huart);
 8002faa:	6822      	ldr	r2, [r4, #0]
 8002fac:	68d3      	ldr	r3, [r2, #12]
 8002fae:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002fb2:	60d3      	str	r3, [r2, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002fb4:	2000      	movs	r0, #0
 8002fb6:	6420      	str	r0, [r4, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002fb8:	2320      	movs	r3, #32
 8002fba:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002fbe:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
}
 8002fc2:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8002fc4:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_UART_MspInit(huart);
 8002fc8:	f7fe fa5e 	bl	8001488 <HAL_UART_MspInit>
 8002fcc:	e7d8      	b.n	8002f80 <HAL_UART_Init+0xc>
    return HAL_ERROR;
 8002fce:	2001      	movs	r0, #1
}
 8002fd0:	4770      	bx	lr

08002fd2 <HAL_UART_Transmit>:
{
 8002fd2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002fd6:	b082      	sub	sp, #8
 8002fd8:	461e      	mov	r6, r3
  if (huart->gState == HAL_UART_STATE_READY)
 8002fda:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8002fde:	b2db      	uxtb	r3, r3
 8002fe0:	2b20      	cmp	r3, #32
 8002fe2:	d154      	bne.n	800308e <HAL_UART_Transmit+0xbc>
 8002fe4:	4604      	mov	r4, r0
 8002fe6:	460d      	mov	r5, r1
 8002fe8:	4690      	mov	r8, r2
    if ((pData == NULL) || (Size == 0U))
 8002fea:	2900      	cmp	r1, #0
 8002fec:	d053      	beq.n	8003096 <HAL_UART_Transmit+0xc4>
 8002fee:	2a00      	cmp	r2, #0
 8002ff0:	d053      	beq.n	800309a <HAL_UART_Transmit+0xc8>
    __HAL_LOCK(huart);
 8002ff2:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8002ff6:	2b01      	cmp	r3, #1
 8002ff8:	d051      	beq.n	800309e <HAL_UART_Transmit+0xcc>
 8002ffa:	2301      	movs	r3, #1
 8002ffc:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003000:	2300      	movs	r3, #0
 8003002:	6403      	str	r3, [r0, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003004:	2321      	movs	r3, #33	; 0x21
 8003006:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
    tickstart = HAL_GetTick();
 800300a:	f7fe fb5b 	bl	80016c4 <HAL_GetTick>
 800300e:	4607      	mov	r7, r0
    huart->TxXferSize = Size;
 8003010:	f8a4 8024 	strh.w	r8, [r4, #36]	; 0x24
    huart->TxXferCount = Size;
 8003014:	f8a4 8026 	strh.w	r8, [r4, #38]	; 0x26
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003018:	68a3      	ldr	r3, [r4, #8]
 800301a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800301e:	d005      	beq.n	800302c <HAL_UART_Transmit+0x5a>
      pdata16bits = NULL;
 8003020:	f04f 0800 	mov.w	r8, #0
    __HAL_UNLOCK(huart);
 8003024:	2300      	movs	r3, #0
 8003026:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    while (huart->TxXferCount > 0U)
 800302a:	e012      	b.n	8003052 <HAL_UART_Transmit+0x80>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800302c:	6923      	ldr	r3, [r4, #16]
 800302e:	b113      	cbz	r3, 8003036 <HAL_UART_Transmit+0x64>
      pdata16bits = NULL;
 8003030:	f04f 0800 	mov.w	r8, #0
 8003034:	e7f6      	b.n	8003024 <HAL_UART_Transmit+0x52>
      pdata16bits = (uint16_t *) pData;
 8003036:	46a8      	mov	r8, r5
      pdata8bits  = NULL;
 8003038:	2500      	movs	r5, #0
 800303a:	e7f3      	b.n	8003024 <HAL_UART_Transmit+0x52>
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800303c:	f838 3b02 	ldrh.w	r3, [r8], #2
 8003040:	6822      	ldr	r2, [r4, #0]
 8003042:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003046:	6053      	str	r3, [r2, #4]
      huart->TxXferCount--;
 8003048:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 800304a:	b292      	uxth	r2, r2
 800304c:	3a01      	subs	r2, #1
 800304e:	b292      	uxth	r2, r2
 8003050:	84e2      	strh	r2, [r4, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003052:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8003054:	b29b      	uxth	r3, r3
 8003056:	b173      	cbz	r3, 8003076 <HAL_UART_Transmit+0xa4>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003058:	9600      	str	r6, [sp, #0]
 800305a:	463b      	mov	r3, r7
 800305c:	2200      	movs	r2, #0
 800305e:	2180      	movs	r1, #128	; 0x80
 8003060:	4620      	mov	r0, r4
 8003062:	f7ff ff45 	bl	8002ef0 <UART_WaitOnFlagUntilTimeout>
 8003066:	b9e0      	cbnz	r0, 80030a2 <HAL_UART_Transmit+0xd0>
      if (pdata8bits == NULL)
 8003068:	2d00      	cmp	r5, #0
 800306a:	d0e7      	beq.n	800303c <HAL_UART_Transmit+0x6a>
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800306c:	f815 2b01 	ldrb.w	r2, [r5], #1
 8003070:	6823      	ldr	r3, [r4, #0]
 8003072:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003074:	e7e8      	b.n	8003048 <HAL_UART_Transmit+0x76>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003076:	9600      	str	r6, [sp, #0]
 8003078:	463b      	mov	r3, r7
 800307a:	2200      	movs	r2, #0
 800307c:	2140      	movs	r1, #64	; 0x40
 800307e:	4620      	mov	r0, r4
 8003080:	f7ff ff36 	bl	8002ef0 <UART_WaitOnFlagUntilTimeout>
 8003084:	b978      	cbnz	r0, 80030a6 <HAL_UART_Transmit+0xd4>
    huart->gState = HAL_UART_STATE_READY;
 8003086:	2320      	movs	r3, #32
 8003088:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    return HAL_OK;
 800308c:	e000      	b.n	8003090 <HAL_UART_Transmit+0xbe>
    return HAL_BUSY;
 800308e:	2002      	movs	r0, #2
}
 8003090:	b002      	add	sp, #8
 8003092:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      return  HAL_ERROR;
 8003096:	2001      	movs	r0, #1
 8003098:	e7fa      	b.n	8003090 <HAL_UART_Transmit+0xbe>
 800309a:	2001      	movs	r0, #1
 800309c:	e7f8      	b.n	8003090 <HAL_UART_Transmit+0xbe>
    __HAL_LOCK(huart);
 800309e:	2002      	movs	r0, #2
 80030a0:	e7f6      	b.n	8003090 <HAL_UART_Transmit+0xbe>
        return HAL_TIMEOUT;
 80030a2:	2003      	movs	r0, #3
 80030a4:	e7f4      	b.n	8003090 <HAL_UART_Transmit+0xbe>
      return HAL_TIMEOUT;
 80030a6:	2003      	movs	r0, #3
 80030a8:	e7f2      	b.n	8003090 <HAL_UART_Transmit+0xbe>

080030aa <__cvt>:
 80030aa:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80030ae:	ec55 4b10 	vmov	r4, r5, d0
 80030b2:	2d00      	cmp	r5, #0
 80030b4:	460e      	mov	r6, r1
 80030b6:	4619      	mov	r1, r3
 80030b8:	462b      	mov	r3, r5
 80030ba:	bfbb      	ittet	lt
 80030bc:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80030c0:	461d      	movlt	r5, r3
 80030c2:	2300      	movge	r3, #0
 80030c4:	232d      	movlt	r3, #45	; 0x2d
 80030c6:	700b      	strb	r3, [r1, #0]
 80030c8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80030ca:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80030ce:	4691      	mov	r9, r2
 80030d0:	f023 0820 	bic.w	r8, r3, #32
 80030d4:	bfbc      	itt	lt
 80030d6:	4622      	movlt	r2, r4
 80030d8:	4614      	movlt	r4, r2
 80030da:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80030de:	d005      	beq.n	80030ec <__cvt+0x42>
 80030e0:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80030e4:	d100      	bne.n	80030e8 <__cvt+0x3e>
 80030e6:	3601      	adds	r6, #1
 80030e8:	2102      	movs	r1, #2
 80030ea:	e000      	b.n	80030ee <__cvt+0x44>
 80030ec:	2103      	movs	r1, #3
 80030ee:	ab03      	add	r3, sp, #12
 80030f0:	9301      	str	r3, [sp, #4]
 80030f2:	ab02      	add	r3, sp, #8
 80030f4:	9300      	str	r3, [sp, #0]
 80030f6:	ec45 4b10 	vmov	d0, r4, r5
 80030fa:	4653      	mov	r3, sl
 80030fc:	4632      	mov	r2, r6
 80030fe:	f000 fe63 	bl	8003dc8 <_dtoa_r>
 8003102:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8003106:	4607      	mov	r7, r0
 8003108:	d102      	bne.n	8003110 <__cvt+0x66>
 800310a:	f019 0f01 	tst.w	r9, #1
 800310e:	d022      	beq.n	8003156 <__cvt+0xac>
 8003110:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8003114:	eb07 0906 	add.w	r9, r7, r6
 8003118:	d110      	bne.n	800313c <__cvt+0x92>
 800311a:	783b      	ldrb	r3, [r7, #0]
 800311c:	2b30      	cmp	r3, #48	; 0x30
 800311e:	d10a      	bne.n	8003136 <__cvt+0x8c>
 8003120:	2200      	movs	r2, #0
 8003122:	2300      	movs	r3, #0
 8003124:	4620      	mov	r0, r4
 8003126:	4629      	mov	r1, r5
 8003128:	f7fd fcd6 	bl	8000ad8 <__aeabi_dcmpeq>
 800312c:	b918      	cbnz	r0, 8003136 <__cvt+0x8c>
 800312e:	f1c6 0601 	rsb	r6, r6, #1
 8003132:	f8ca 6000 	str.w	r6, [sl]
 8003136:	f8da 3000 	ldr.w	r3, [sl]
 800313a:	4499      	add	r9, r3
 800313c:	2200      	movs	r2, #0
 800313e:	2300      	movs	r3, #0
 8003140:	4620      	mov	r0, r4
 8003142:	4629      	mov	r1, r5
 8003144:	f7fd fcc8 	bl	8000ad8 <__aeabi_dcmpeq>
 8003148:	b108      	cbz	r0, 800314e <__cvt+0xa4>
 800314a:	f8cd 900c 	str.w	r9, [sp, #12]
 800314e:	2230      	movs	r2, #48	; 0x30
 8003150:	9b03      	ldr	r3, [sp, #12]
 8003152:	454b      	cmp	r3, r9
 8003154:	d307      	bcc.n	8003166 <__cvt+0xbc>
 8003156:	9b03      	ldr	r3, [sp, #12]
 8003158:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800315a:	1bdb      	subs	r3, r3, r7
 800315c:	4638      	mov	r0, r7
 800315e:	6013      	str	r3, [r2, #0]
 8003160:	b004      	add	sp, #16
 8003162:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003166:	1c59      	adds	r1, r3, #1
 8003168:	9103      	str	r1, [sp, #12]
 800316a:	701a      	strb	r2, [r3, #0]
 800316c:	e7f0      	b.n	8003150 <__cvt+0xa6>

0800316e <__exponent>:
 800316e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003170:	4603      	mov	r3, r0
 8003172:	2900      	cmp	r1, #0
 8003174:	bfb8      	it	lt
 8003176:	4249      	neglt	r1, r1
 8003178:	f803 2b02 	strb.w	r2, [r3], #2
 800317c:	bfb4      	ite	lt
 800317e:	222d      	movlt	r2, #45	; 0x2d
 8003180:	222b      	movge	r2, #43	; 0x2b
 8003182:	2909      	cmp	r1, #9
 8003184:	7042      	strb	r2, [r0, #1]
 8003186:	dd2a      	ble.n	80031de <__exponent+0x70>
 8003188:	f10d 0207 	add.w	r2, sp, #7
 800318c:	4617      	mov	r7, r2
 800318e:	260a      	movs	r6, #10
 8003190:	4694      	mov	ip, r2
 8003192:	fb91 f5f6 	sdiv	r5, r1, r6
 8003196:	fb06 1415 	mls	r4, r6, r5, r1
 800319a:	3430      	adds	r4, #48	; 0x30
 800319c:	f80c 4c01 	strb.w	r4, [ip, #-1]
 80031a0:	460c      	mov	r4, r1
 80031a2:	2c63      	cmp	r4, #99	; 0x63
 80031a4:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
 80031a8:	4629      	mov	r1, r5
 80031aa:	dcf1      	bgt.n	8003190 <__exponent+0x22>
 80031ac:	3130      	adds	r1, #48	; 0x30
 80031ae:	f1ac 0402 	sub.w	r4, ip, #2
 80031b2:	f802 1c01 	strb.w	r1, [r2, #-1]
 80031b6:	1c41      	adds	r1, r0, #1
 80031b8:	4622      	mov	r2, r4
 80031ba:	42ba      	cmp	r2, r7
 80031bc:	d30a      	bcc.n	80031d4 <__exponent+0x66>
 80031be:	f10d 0209 	add.w	r2, sp, #9
 80031c2:	eba2 020c 	sub.w	r2, r2, ip
 80031c6:	42bc      	cmp	r4, r7
 80031c8:	bf88      	it	hi
 80031ca:	2200      	movhi	r2, #0
 80031cc:	4413      	add	r3, r2
 80031ce:	1a18      	subs	r0, r3, r0
 80031d0:	b003      	add	sp, #12
 80031d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80031d4:	f812 5b01 	ldrb.w	r5, [r2], #1
 80031d8:	f801 5f01 	strb.w	r5, [r1, #1]!
 80031dc:	e7ed      	b.n	80031ba <__exponent+0x4c>
 80031de:	2330      	movs	r3, #48	; 0x30
 80031e0:	3130      	adds	r1, #48	; 0x30
 80031e2:	7083      	strb	r3, [r0, #2]
 80031e4:	70c1      	strb	r1, [r0, #3]
 80031e6:	1d03      	adds	r3, r0, #4
 80031e8:	e7f1      	b.n	80031ce <__exponent+0x60>
	...

080031ec <_printf_float>:
 80031ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80031f0:	ed2d 8b02 	vpush	{d8}
 80031f4:	b08d      	sub	sp, #52	; 0x34
 80031f6:	460c      	mov	r4, r1
 80031f8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80031fc:	4616      	mov	r6, r2
 80031fe:	461f      	mov	r7, r3
 8003200:	4605      	mov	r5, r0
 8003202:	f000 fce1 	bl	8003bc8 <_localeconv_r>
 8003206:	f8d0 a000 	ldr.w	sl, [r0]
 800320a:	4650      	mov	r0, sl
 800320c:	f7fd f838 	bl	8000280 <strlen>
 8003210:	2300      	movs	r3, #0
 8003212:	930a      	str	r3, [sp, #40]	; 0x28
 8003214:	6823      	ldr	r3, [r4, #0]
 8003216:	9305      	str	r3, [sp, #20]
 8003218:	f8d8 3000 	ldr.w	r3, [r8]
 800321c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8003220:	3307      	adds	r3, #7
 8003222:	f023 0307 	bic.w	r3, r3, #7
 8003226:	f103 0208 	add.w	r2, r3, #8
 800322a:	f8c8 2000 	str.w	r2, [r8]
 800322e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8003232:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8003236:	9307      	str	r3, [sp, #28]
 8003238:	f8cd 8018 	str.w	r8, [sp, #24]
 800323c:	ee08 0a10 	vmov	s16, r0
 8003240:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8003244:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003248:	4b9e      	ldr	r3, [pc, #632]	; (80034c4 <_printf_float+0x2d8>)
 800324a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800324e:	f7fd fc75 	bl	8000b3c <__aeabi_dcmpun>
 8003252:	bb88      	cbnz	r0, 80032b8 <_printf_float+0xcc>
 8003254:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003258:	4b9a      	ldr	r3, [pc, #616]	; (80034c4 <_printf_float+0x2d8>)
 800325a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800325e:	f7fd fc4f 	bl	8000b00 <__aeabi_dcmple>
 8003262:	bb48      	cbnz	r0, 80032b8 <_printf_float+0xcc>
 8003264:	2200      	movs	r2, #0
 8003266:	2300      	movs	r3, #0
 8003268:	4640      	mov	r0, r8
 800326a:	4649      	mov	r1, r9
 800326c:	f7fd fc3e 	bl	8000aec <__aeabi_dcmplt>
 8003270:	b110      	cbz	r0, 8003278 <_printf_float+0x8c>
 8003272:	232d      	movs	r3, #45	; 0x2d
 8003274:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003278:	4a93      	ldr	r2, [pc, #588]	; (80034c8 <_printf_float+0x2dc>)
 800327a:	4b94      	ldr	r3, [pc, #592]	; (80034cc <_printf_float+0x2e0>)
 800327c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8003280:	bf94      	ite	ls
 8003282:	4690      	movls	r8, r2
 8003284:	4698      	movhi	r8, r3
 8003286:	2303      	movs	r3, #3
 8003288:	6123      	str	r3, [r4, #16]
 800328a:	9b05      	ldr	r3, [sp, #20]
 800328c:	f023 0304 	bic.w	r3, r3, #4
 8003290:	6023      	str	r3, [r4, #0]
 8003292:	f04f 0900 	mov.w	r9, #0
 8003296:	9700      	str	r7, [sp, #0]
 8003298:	4633      	mov	r3, r6
 800329a:	aa0b      	add	r2, sp, #44	; 0x2c
 800329c:	4621      	mov	r1, r4
 800329e:	4628      	mov	r0, r5
 80032a0:	f000 f9da 	bl	8003658 <_printf_common>
 80032a4:	3001      	adds	r0, #1
 80032a6:	f040 8090 	bne.w	80033ca <_printf_float+0x1de>
 80032aa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80032ae:	b00d      	add	sp, #52	; 0x34
 80032b0:	ecbd 8b02 	vpop	{d8}
 80032b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80032b8:	4642      	mov	r2, r8
 80032ba:	464b      	mov	r3, r9
 80032bc:	4640      	mov	r0, r8
 80032be:	4649      	mov	r1, r9
 80032c0:	f7fd fc3c 	bl	8000b3c <__aeabi_dcmpun>
 80032c4:	b140      	cbz	r0, 80032d8 <_printf_float+0xec>
 80032c6:	464b      	mov	r3, r9
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	bfbc      	itt	lt
 80032cc:	232d      	movlt	r3, #45	; 0x2d
 80032ce:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80032d2:	4a7f      	ldr	r2, [pc, #508]	; (80034d0 <_printf_float+0x2e4>)
 80032d4:	4b7f      	ldr	r3, [pc, #508]	; (80034d4 <_printf_float+0x2e8>)
 80032d6:	e7d1      	b.n	800327c <_printf_float+0x90>
 80032d8:	6863      	ldr	r3, [r4, #4]
 80032da:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80032de:	9206      	str	r2, [sp, #24]
 80032e0:	1c5a      	adds	r2, r3, #1
 80032e2:	d13f      	bne.n	8003364 <_printf_float+0x178>
 80032e4:	2306      	movs	r3, #6
 80032e6:	6063      	str	r3, [r4, #4]
 80032e8:	9b05      	ldr	r3, [sp, #20]
 80032ea:	6861      	ldr	r1, [r4, #4]
 80032ec:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80032f0:	2300      	movs	r3, #0
 80032f2:	9303      	str	r3, [sp, #12]
 80032f4:	ab0a      	add	r3, sp, #40	; 0x28
 80032f6:	e9cd b301 	strd	fp, r3, [sp, #4]
 80032fa:	ab09      	add	r3, sp, #36	; 0x24
 80032fc:	ec49 8b10 	vmov	d0, r8, r9
 8003300:	9300      	str	r3, [sp, #0]
 8003302:	6022      	str	r2, [r4, #0]
 8003304:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8003308:	4628      	mov	r0, r5
 800330a:	f7ff fece 	bl	80030aa <__cvt>
 800330e:	9b06      	ldr	r3, [sp, #24]
 8003310:	9909      	ldr	r1, [sp, #36]	; 0x24
 8003312:	2b47      	cmp	r3, #71	; 0x47
 8003314:	4680      	mov	r8, r0
 8003316:	d108      	bne.n	800332a <_printf_float+0x13e>
 8003318:	1cc8      	adds	r0, r1, #3
 800331a:	db02      	blt.n	8003322 <_printf_float+0x136>
 800331c:	6863      	ldr	r3, [r4, #4]
 800331e:	4299      	cmp	r1, r3
 8003320:	dd41      	ble.n	80033a6 <_printf_float+0x1ba>
 8003322:	f1ab 0302 	sub.w	r3, fp, #2
 8003326:	fa5f fb83 	uxtb.w	fp, r3
 800332a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800332e:	d820      	bhi.n	8003372 <_printf_float+0x186>
 8003330:	3901      	subs	r1, #1
 8003332:	465a      	mov	r2, fp
 8003334:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8003338:	9109      	str	r1, [sp, #36]	; 0x24
 800333a:	f7ff ff18 	bl	800316e <__exponent>
 800333e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003340:	1813      	adds	r3, r2, r0
 8003342:	2a01      	cmp	r2, #1
 8003344:	4681      	mov	r9, r0
 8003346:	6123      	str	r3, [r4, #16]
 8003348:	dc02      	bgt.n	8003350 <_printf_float+0x164>
 800334a:	6822      	ldr	r2, [r4, #0]
 800334c:	07d2      	lsls	r2, r2, #31
 800334e:	d501      	bpl.n	8003354 <_printf_float+0x168>
 8003350:	3301      	adds	r3, #1
 8003352:	6123      	str	r3, [r4, #16]
 8003354:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8003358:	2b00      	cmp	r3, #0
 800335a:	d09c      	beq.n	8003296 <_printf_float+0xaa>
 800335c:	232d      	movs	r3, #45	; 0x2d
 800335e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003362:	e798      	b.n	8003296 <_printf_float+0xaa>
 8003364:	9a06      	ldr	r2, [sp, #24]
 8003366:	2a47      	cmp	r2, #71	; 0x47
 8003368:	d1be      	bne.n	80032e8 <_printf_float+0xfc>
 800336a:	2b00      	cmp	r3, #0
 800336c:	d1bc      	bne.n	80032e8 <_printf_float+0xfc>
 800336e:	2301      	movs	r3, #1
 8003370:	e7b9      	b.n	80032e6 <_printf_float+0xfa>
 8003372:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8003376:	d118      	bne.n	80033aa <_printf_float+0x1be>
 8003378:	2900      	cmp	r1, #0
 800337a:	6863      	ldr	r3, [r4, #4]
 800337c:	dd0b      	ble.n	8003396 <_printf_float+0x1aa>
 800337e:	6121      	str	r1, [r4, #16]
 8003380:	b913      	cbnz	r3, 8003388 <_printf_float+0x19c>
 8003382:	6822      	ldr	r2, [r4, #0]
 8003384:	07d0      	lsls	r0, r2, #31
 8003386:	d502      	bpl.n	800338e <_printf_float+0x1a2>
 8003388:	3301      	adds	r3, #1
 800338a:	440b      	add	r3, r1
 800338c:	6123      	str	r3, [r4, #16]
 800338e:	65a1      	str	r1, [r4, #88]	; 0x58
 8003390:	f04f 0900 	mov.w	r9, #0
 8003394:	e7de      	b.n	8003354 <_printf_float+0x168>
 8003396:	b913      	cbnz	r3, 800339e <_printf_float+0x1b2>
 8003398:	6822      	ldr	r2, [r4, #0]
 800339a:	07d2      	lsls	r2, r2, #31
 800339c:	d501      	bpl.n	80033a2 <_printf_float+0x1b6>
 800339e:	3302      	adds	r3, #2
 80033a0:	e7f4      	b.n	800338c <_printf_float+0x1a0>
 80033a2:	2301      	movs	r3, #1
 80033a4:	e7f2      	b.n	800338c <_printf_float+0x1a0>
 80033a6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80033aa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80033ac:	4299      	cmp	r1, r3
 80033ae:	db05      	blt.n	80033bc <_printf_float+0x1d0>
 80033b0:	6823      	ldr	r3, [r4, #0]
 80033b2:	6121      	str	r1, [r4, #16]
 80033b4:	07d8      	lsls	r0, r3, #31
 80033b6:	d5ea      	bpl.n	800338e <_printf_float+0x1a2>
 80033b8:	1c4b      	adds	r3, r1, #1
 80033ba:	e7e7      	b.n	800338c <_printf_float+0x1a0>
 80033bc:	2900      	cmp	r1, #0
 80033be:	bfd4      	ite	le
 80033c0:	f1c1 0202 	rsble	r2, r1, #2
 80033c4:	2201      	movgt	r2, #1
 80033c6:	4413      	add	r3, r2
 80033c8:	e7e0      	b.n	800338c <_printf_float+0x1a0>
 80033ca:	6823      	ldr	r3, [r4, #0]
 80033cc:	055a      	lsls	r2, r3, #21
 80033ce:	d407      	bmi.n	80033e0 <_printf_float+0x1f4>
 80033d0:	6923      	ldr	r3, [r4, #16]
 80033d2:	4642      	mov	r2, r8
 80033d4:	4631      	mov	r1, r6
 80033d6:	4628      	mov	r0, r5
 80033d8:	47b8      	blx	r7
 80033da:	3001      	adds	r0, #1
 80033dc:	d12c      	bne.n	8003438 <_printf_float+0x24c>
 80033de:	e764      	b.n	80032aa <_printf_float+0xbe>
 80033e0:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80033e4:	f240 80e0 	bls.w	80035a8 <_printf_float+0x3bc>
 80033e8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80033ec:	2200      	movs	r2, #0
 80033ee:	2300      	movs	r3, #0
 80033f0:	f7fd fb72 	bl	8000ad8 <__aeabi_dcmpeq>
 80033f4:	2800      	cmp	r0, #0
 80033f6:	d034      	beq.n	8003462 <_printf_float+0x276>
 80033f8:	4a37      	ldr	r2, [pc, #220]	; (80034d8 <_printf_float+0x2ec>)
 80033fa:	2301      	movs	r3, #1
 80033fc:	4631      	mov	r1, r6
 80033fe:	4628      	mov	r0, r5
 8003400:	47b8      	blx	r7
 8003402:	3001      	adds	r0, #1
 8003404:	f43f af51 	beq.w	80032aa <_printf_float+0xbe>
 8003408:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800340c:	429a      	cmp	r2, r3
 800340e:	db02      	blt.n	8003416 <_printf_float+0x22a>
 8003410:	6823      	ldr	r3, [r4, #0]
 8003412:	07d8      	lsls	r0, r3, #31
 8003414:	d510      	bpl.n	8003438 <_printf_float+0x24c>
 8003416:	ee18 3a10 	vmov	r3, s16
 800341a:	4652      	mov	r2, sl
 800341c:	4631      	mov	r1, r6
 800341e:	4628      	mov	r0, r5
 8003420:	47b8      	blx	r7
 8003422:	3001      	adds	r0, #1
 8003424:	f43f af41 	beq.w	80032aa <_printf_float+0xbe>
 8003428:	f04f 0800 	mov.w	r8, #0
 800342c:	f104 091a 	add.w	r9, r4, #26
 8003430:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003432:	3b01      	subs	r3, #1
 8003434:	4543      	cmp	r3, r8
 8003436:	dc09      	bgt.n	800344c <_printf_float+0x260>
 8003438:	6823      	ldr	r3, [r4, #0]
 800343a:	079b      	lsls	r3, r3, #30
 800343c:	f100 8107 	bmi.w	800364e <_printf_float+0x462>
 8003440:	68e0      	ldr	r0, [r4, #12]
 8003442:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003444:	4298      	cmp	r0, r3
 8003446:	bfb8      	it	lt
 8003448:	4618      	movlt	r0, r3
 800344a:	e730      	b.n	80032ae <_printf_float+0xc2>
 800344c:	2301      	movs	r3, #1
 800344e:	464a      	mov	r2, r9
 8003450:	4631      	mov	r1, r6
 8003452:	4628      	mov	r0, r5
 8003454:	47b8      	blx	r7
 8003456:	3001      	adds	r0, #1
 8003458:	f43f af27 	beq.w	80032aa <_printf_float+0xbe>
 800345c:	f108 0801 	add.w	r8, r8, #1
 8003460:	e7e6      	b.n	8003430 <_printf_float+0x244>
 8003462:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003464:	2b00      	cmp	r3, #0
 8003466:	dc39      	bgt.n	80034dc <_printf_float+0x2f0>
 8003468:	4a1b      	ldr	r2, [pc, #108]	; (80034d8 <_printf_float+0x2ec>)
 800346a:	2301      	movs	r3, #1
 800346c:	4631      	mov	r1, r6
 800346e:	4628      	mov	r0, r5
 8003470:	47b8      	blx	r7
 8003472:	3001      	adds	r0, #1
 8003474:	f43f af19 	beq.w	80032aa <_printf_float+0xbe>
 8003478:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800347c:	4313      	orrs	r3, r2
 800347e:	d102      	bne.n	8003486 <_printf_float+0x29a>
 8003480:	6823      	ldr	r3, [r4, #0]
 8003482:	07d9      	lsls	r1, r3, #31
 8003484:	d5d8      	bpl.n	8003438 <_printf_float+0x24c>
 8003486:	ee18 3a10 	vmov	r3, s16
 800348a:	4652      	mov	r2, sl
 800348c:	4631      	mov	r1, r6
 800348e:	4628      	mov	r0, r5
 8003490:	47b8      	blx	r7
 8003492:	3001      	adds	r0, #1
 8003494:	f43f af09 	beq.w	80032aa <_printf_float+0xbe>
 8003498:	f04f 0900 	mov.w	r9, #0
 800349c:	f104 0a1a 	add.w	sl, r4, #26
 80034a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80034a2:	425b      	negs	r3, r3
 80034a4:	454b      	cmp	r3, r9
 80034a6:	dc01      	bgt.n	80034ac <_printf_float+0x2c0>
 80034a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80034aa:	e792      	b.n	80033d2 <_printf_float+0x1e6>
 80034ac:	2301      	movs	r3, #1
 80034ae:	4652      	mov	r2, sl
 80034b0:	4631      	mov	r1, r6
 80034b2:	4628      	mov	r0, r5
 80034b4:	47b8      	blx	r7
 80034b6:	3001      	adds	r0, #1
 80034b8:	f43f aef7 	beq.w	80032aa <_printf_float+0xbe>
 80034bc:	f109 0901 	add.w	r9, r9, #1
 80034c0:	e7ee      	b.n	80034a0 <_printf_float+0x2b4>
 80034c2:	bf00      	nop
 80034c4:	7fefffff 	.word	0x7fefffff
 80034c8:	08005b5c 	.word	0x08005b5c
 80034cc:	08005b60 	.word	0x08005b60
 80034d0:	08005b64 	.word	0x08005b64
 80034d4:	08005b68 	.word	0x08005b68
 80034d8:	08005b6c 	.word	0x08005b6c
 80034dc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80034de:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80034e0:	429a      	cmp	r2, r3
 80034e2:	bfa8      	it	ge
 80034e4:	461a      	movge	r2, r3
 80034e6:	2a00      	cmp	r2, #0
 80034e8:	4691      	mov	r9, r2
 80034ea:	dc37      	bgt.n	800355c <_printf_float+0x370>
 80034ec:	f04f 0b00 	mov.w	fp, #0
 80034f0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80034f4:	f104 021a 	add.w	r2, r4, #26
 80034f8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80034fa:	9305      	str	r3, [sp, #20]
 80034fc:	eba3 0309 	sub.w	r3, r3, r9
 8003500:	455b      	cmp	r3, fp
 8003502:	dc33      	bgt.n	800356c <_printf_float+0x380>
 8003504:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003508:	429a      	cmp	r2, r3
 800350a:	db3b      	blt.n	8003584 <_printf_float+0x398>
 800350c:	6823      	ldr	r3, [r4, #0]
 800350e:	07da      	lsls	r2, r3, #31
 8003510:	d438      	bmi.n	8003584 <_printf_float+0x398>
 8003512:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8003516:	eba2 0903 	sub.w	r9, r2, r3
 800351a:	9b05      	ldr	r3, [sp, #20]
 800351c:	1ad2      	subs	r2, r2, r3
 800351e:	4591      	cmp	r9, r2
 8003520:	bfa8      	it	ge
 8003522:	4691      	movge	r9, r2
 8003524:	f1b9 0f00 	cmp.w	r9, #0
 8003528:	dc35      	bgt.n	8003596 <_printf_float+0x3aa>
 800352a:	f04f 0800 	mov.w	r8, #0
 800352e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003532:	f104 0a1a 	add.w	sl, r4, #26
 8003536:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800353a:	1a9b      	subs	r3, r3, r2
 800353c:	eba3 0309 	sub.w	r3, r3, r9
 8003540:	4543      	cmp	r3, r8
 8003542:	f77f af79 	ble.w	8003438 <_printf_float+0x24c>
 8003546:	2301      	movs	r3, #1
 8003548:	4652      	mov	r2, sl
 800354a:	4631      	mov	r1, r6
 800354c:	4628      	mov	r0, r5
 800354e:	47b8      	blx	r7
 8003550:	3001      	adds	r0, #1
 8003552:	f43f aeaa 	beq.w	80032aa <_printf_float+0xbe>
 8003556:	f108 0801 	add.w	r8, r8, #1
 800355a:	e7ec      	b.n	8003536 <_printf_float+0x34a>
 800355c:	4613      	mov	r3, r2
 800355e:	4631      	mov	r1, r6
 8003560:	4642      	mov	r2, r8
 8003562:	4628      	mov	r0, r5
 8003564:	47b8      	blx	r7
 8003566:	3001      	adds	r0, #1
 8003568:	d1c0      	bne.n	80034ec <_printf_float+0x300>
 800356a:	e69e      	b.n	80032aa <_printf_float+0xbe>
 800356c:	2301      	movs	r3, #1
 800356e:	4631      	mov	r1, r6
 8003570:	4628      	mov	r0, r5
 8003572:	9205      	str	r2, [sp, #20]
 8003574:	47b8      	blx	r7
 8003576:	3001      	adds	r0, #1
 8003578:	f43f ae97 	beq.w	80032aa <_printf_float+0xbe>
 800357c:	9a05      	ldr	r2, [sp, #20]
 800357e:	f10b 0b01 	add.w	fp, fp, #1
 8003582:	e7b9      	b.n	80034f8 <_printf_float+0x30c>
 8003584:	ee18 3a10 	vmov	r3, s16
 8003588:	4652      	mov	r2, sl
 800358a:	4631      	mov	r1, r6
 800358c:	4628      	mov	r0, r5
 800358e:	47b8      	blx	r7
 8003590:	3001      	adds	r0, #1
 8003592:	d1be      	bne.n	8003512 <_printf_float+0x326>
 8003594:	e689      	b.n	80032aa <_printf_float+0xbe>
 8003596:	9a05      	ldr	r2, [sp, #20]
 8003598:	464b      	mov	r3, r9
 800359a:	4442      	add	r2, r8
 800359c:	4631      	mov	r1, r6
 800359e:	4628      	mov	r0, r5
 80035a0:	47b8      	blx	r7
 80035a2:	3001      	adds	r0, #1
 80035a4:	d1c1      	bne.n	800352a <_printf_float+0x33e>
 80035a6:	e680      	b.n	80032aa <_printf_float+0xbe>
 80035a8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80035aa:	2a01      	cmp	r2, #1
 80035ac:	dc01      	bgt.n	80035b2 <_printf_float+0x3c6>
 80035ae:	07db      	lsls	r3, r3, #31
 80035b0:	d53a      	bpl.n	8003628 <_printf_float+0x43c>
 80035b2:	2301      	movs	r3, #1
 80035b4:	4642      	mov	r2, r8
 80035b6:	4631      	mov	r1, r6
 80035b8:	4628      	mov	r0, r5
 80035ba:	47b8      	blx	r7
 80035bc:	3001      	adds	r0, #1
 80035be:	f43f ae74 	beq.w	80032aa <_printf_float+0xbe>
 80035c2:	ee18 3a10 	vmov	r3, s16
 80035c6:	4652      	mov	r2, sl
 80035c8:	4631      	mov	r1, r6
 80035ca:	4628      	mov	r0, r5
 80035cc:	47b8      	blx	r7
 80035ce:	3001      	adds	r0, #1
 80035d0:	f43f ae6b 	beq.w	80032aa <_printf_float+0xbe>
 80035d4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80035d8:	2200      	movs	r2, #0
 80035da:	2300      	movs	r3, #0
 80035dc:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 80035e0:	f7fd fa7a 	bl	8000ad8 <__aeabi_dcmpeq>
 80035e4:	b9d8      	cbnz	r0, 800361e <_printf_float+0x432>
 80035e6:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 80035ea:	f108 0201 	add.w	r2, r8, #1
 80035ee:	4631      	mov	r1, r6
 80035f0:	4628      	mov	r0, r5
 80035f2:	47b8      	blx	r7
 80035f4:	3001      	adds	r0, #1
 80035f6:	d10e      	bne.n	8003616 <_printf_float+0x42a>
 80035f8:	e657      	b.n	80032aa <_printf_float+0xbe>
 80035fa:	2301      	movs	r3, #1
 80035fc:	4652      	mov	r2, sl
 80035fe:	4631      	mov	r1, r6
 8003600:	4628      	mov	r0, r5
 8003602:	47b8      	blx	r7
 8003604:	3001      	adds	r0, #1
 8003606:	f43f ae50 	beq.w	80032aa <_printf_float+0xbe>
 800360a:	f108 0801 	add.w	r8, r8, #1
 800360e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003610:	3b01      	subs	r3, #1
 8003612:	4543      	cmp	r3, r8
 8003614:	dcf1      	bgt.n	80035fa <_printf_float+0x40e>
 8003616:	464b      	mov	r3, r9
 8003618:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800361c:	e6da      	b.n	80033d4 <_printf_float+0x1e8>
 800361e:	f04f 0800 	mov.w	r8, #0
 8003622:	f104 0a1a 	add.w	sl, r4, #26
 8003626:	e7f2      	b.n	800360e <_printf_float+0x422>
 8003628:	2301      	movs	r3, #1
 800362a:	4642      	mov	r2, r8
 800362c:	e7df      	b.n	80035ee <_printf_float+0x402>
 800362e:	2301      	movs	r3, #1
 8003630:	464a      	mov	r2, r9
 8003632:	4631      	mov	r1, r6
 8003634:	4628      	mov	r0, r5
 8003636:	47b8      	blx	r7
 8003638:	3001      	adds	r0, #1
 800363a:	f43f ae36 	beq.w	80032aa <_printf_float+0xbe>
 800363e:	f108 0801 	add.w	r8, r8, #1
 8003642:	68e3      	ldr	r3, [r4, #12]
 8003644:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8003646:	1a5b      	subs	r3, r3, r1
 8003648:	4543      	cmp	r3, r8
 800364a:	dcf0      	bgt.n	800362e <_printf_float+0x442>
 800364c:	e6f8      	b.n	8003440 <_printf_float+0x254>
 800364e:	f04f 0800 	mov.w	r8, #0
 8003652:	f104 0919 	add.w	r9, r4, #25
 8003656:	e7f4      	b.n	8003642 <_printf_float+0x456>

08003658 <_printf_common>:
 8003658:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800365c:	4616      	mov	r6, r2
 800365e:	4699      	mov	r9, r3
 8003660:	688a      	ldr	r2, [r1, #8]
 8003662:	690b      	ldr	r3, [r1, #16]
 8003664:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003668:	4293      	cmp	r3, r2
 800366a:	bfb8      	it	lt
 800366c:	4613      	movlt	r3, r2
 800366e:	6033      	str	r3, [r6, #0]
 8003670:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003674:	4607      	mov	r7, r0
 8003676:	460c      	mov	r4, r1
 8003678:	b10a      	cbz	r2, 800367e <_printf_common+0x26>
 800367a:	3301      	adds	r3, #1
 800367c:	6033      	str	r3, [r6, #0]
 800367e:	6823      	ldr	r3, [r4, #0]
 8003680:	0699      	lsls	r1, r3, #26
 8003682:	bf42      	ittt	mi
 8003684:	6833      	ldrmi	r3, [r6, #0]
 8003686:	3302      	addmi	r3, #2
 8003688:	6033      	strmi	r3, [r6, #0]
 800368a:	6825      	ldr	r5, [r4, #0]
 800368c:	f015 0506 	ands.w	r5, r5, #6
 8003690:	d106      	bne.n	80036a0 <_printf_common+0x48>
 8003692:	f104 0a19 	add.w	sl, r4, #25
 8003696:	68e3      	ldr	r3, [r4, #12]
 8003698:	6832      	ldr	r2, [r6, #0]
 800369a:	1a9b      	subs	r3, r3, r2
 800369c:	42ab      	cmp	r3, r5
 800369e:	dc26      	bgt.n	80036ee <_printf_common+0x96>
 80036a0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80036a4:	1e13      	subs	r3, r2, #0
 80036a6:	6822      	ldr	r2, [r4, #0]
 80036a8:	bf18      	it	ne
 80036aa:	2301      	movne	r3, #1
 80036ac:	0692      	lsls	r2, r2, #26
 80036ae:	d42b      	bmi.n	8003708 <_printf_common+0xb0>
 80036b0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80036b4:	4649      	mov	r1, r9
 80036b6:	4638      	mov	r0, r7
 80036b8:	47c0      	blx	r8
 80036ba:	3001      	adds	r0, #1
 80036bc:	d01e      	beq.n	80036fc <_printf_common+0xa4>
 80036be:	6823      	ldr	r3, [r4, #0]
 80036c0:	6922      	ldr	r2, [r4, #16]
 80036c2:	f003 0306 	and.w	r3, r3, #6
 80036c6:	2b04      	cmp	r3, #4
 80036c8:	bf02      	ittt	eq
 80036ca:	68e5      	ldreq	r5, [r4, #12]
 80036cc:	6833      	ldreq	r3, [r6, #0]
 80036ce:	1aed      	subeq	r5, r5, r3
 80036d0:	68a3      	ldr	r3, [r4, #8]
 80036d2:	bf0c      	ite	eq
 80036d4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80036d8:	2500      	movne	r5, #0
 80036da:	4293      	cmp	r3, r2
 80036dc:	bfc4      	itt	gt
 80036de:	1a9b      	subgt	r3, r3, r2
 80036e0:	18ed      	addgt	r5, r5, r3
 80036e2:	2600      	movs	r6, #0
 80036e4:	341a      	adds	r4, #26
 80036e6:	42b5      	cmp	r5, r6
 80036e8:	d11a      	bne.n	8003720 <_printf_common+0xc8>
 80036ea:	2000      	movs	r0, #0
 80036ec:	e008      	b.n	8003700 <_printf_common+0xa8>
 80036ee:	2301      	movs	r3, #1
 80036f0:	4652      	mov	r2, sl
 80036f2:	4649      	mov	r1, r9
 80036f4:	4638      	mov	r0, r7
 80036f6:	47c0      	blx	r8
 80036f8:	3001      	adds	r0, #1
 80036fa:	d103      	bne.n	8003704 <_printf_common+0xac>
 80036fc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003700:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003704:	3501      	adds	r5, #1
 8003706:	e7c6      	b.n	8003696 <_printf_common+0x3e>
 8003708:	18e1      	adds	r1, r4, r3
 800370a:	1c5a      	adds	r2, r3, #1
 800370c:	2030      	movs	r0, #48	; 0x30
 800370e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003712:	4422      	add	r2, r4
 8003714:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003718:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800371c:	3302      	adds	r3, #2
 800371e:	e7c7      	b.n	80036b0 <_printf_common+0x58>
 8003720:	2301      	movs	r3, #1
 8003722:	4622      	mov	r2, r4
 8003724:	4649      	mov	r1, r9
 8003726:	4638      	mov	r0, r7
 8003728:	47c0      	blx	r8
 800372a:	3001      	adds	r0, #1
 800372c:	d0e6      	beq.n	80036fc <_printf_common+0xa4>
 800372e:	3601      	adds	r6, #1
 8003730:	e7d9      	b.n	80036e6 <_printf_common+0x8e>
	...

08003734 <_printf_i>:
 8003734:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003738:	7e0f      	ldrb	r7, [r1, #24]
 800373a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800373c:	2f78      	cmp	r7, #120	; 0x78
 800373e:	4691      	mov	r9, r2
 8003740:	4680      	mov	r8, r0
 8003742:	460c      	mov	r4, r1
 8003744:	469a      	mov	sl, r3
 8003746:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800374a:	d807      	bhi.n	800375c <_printf_i+0x28>
 800374c:	2f62      	cmp	r7, #98	; 0x62
 800374e:	d80a      	bhi.n	8003766 <_printf_i+0x32>
 8003750:	2f00      	cmp	r7, #0
 8003752:	f000 80d4 	beq.w	80038fe <_printf_i+0x1ca>
 8003756:	2f58      	cmp	r7, #88	; 0x58
 8003758:	f000 80c0 	beq.w	80038dc <_printf_i+0x1a8>
 800375c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003760:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003764:	e03a      	b.n	80037dc <_printf_i+0xa8>
 8003766:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800376a:	2b15      	cmp	r3, #21
 800376c:	d8f6      	bhi.n	800375c <_printf_i+0x28>
 800376e:	a101      	add	r1, pc, #4	; (adr r1, 8003774 <_printf_i+0x40>)
 8003770:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003774:	080037cd 	.word	0x080037cd
 8003778:	080037e1 	.word	0x080037e1
 800377c:	0800375d 	.word	0x0800375d
 8003780:	0800375d 	.word	0x0800375d
 8003784:	0800375d 	.word	0x0800375d
 8003788:	0800375d 	.word	0x0800375d
 800378c:	080037e1 	.word	0x080037e1
 8003790:	0800375d 	.word	0x0800375d
 8003794:	0800375d 	.word	0x0800375d
 8003798:	0800375d 	.word	0x0800375d
 800379c:	0800375d 	.word	0x0800375d
 80037a0:	080038e5 	.word	0x080038e5
 80037a4:	0800380d 	.word	0x0800380d
 80037a8:	0800389f 	.word	0x0800389f
 80037ac:	0800375d 	.word	0x0800375d
 80037b0:	0800375d 	.word	0x0800375d
 80037b4:	08003907 	.word	0x08003907
 80037b8:	0800375d 	.word	0x0800375d
 80037bc:	0800380d 	.word	0x0800380d
 80037c0:	0800375d 	.word	0x0800375d
 80037c4:	0800375d 	.word	0x0800375d
 80037c8:	080038a7 	.word	0x080038a7
 80037cc:	682b      	ldr	r3, [r5, #0]
 80037ce:	1d1a      	adds	r2, r3, #4
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	602a      	str	r2, [r5, #0]
 80037d4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80037d8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80037dc:	2301      	movs	r3, #1
 80037de:	e09f      	b.n	8003920 <_printf_i+0x1ec>
 80037e0:	6820      	ldr	r0, [r4, #0]
 80037e2:	682b      	ldr	r3, [r5, #0]
 80037e4:	0607      	lsls	r7, r0, #24
 80037e6:	f103 0104 	add.w	r1, r3, #4
 80037ea:	6029      	str	r1, [r5, #0]
 80037ec:	d501      	bpl.n	80037f2 <_printf_i+0xbe>
 80037ee:	681e      	ldr	r6, [r3, #0]
 80037f0:	e003      	b.n	80037fa <_printf_i+0xc6>
 80037f2:	0646      	lsls	r6, r0, #25
 80037f4:	d5fb      	bpl.n	80037ee <_printf_i+0xba>
 80037f6:	f9b3 6000 	ldrsh.w	r6, [r3]
 80037fa:	2e00      	cmp	r6, #0
 80037fc:	da03      	bge.n	8003806 <_printf_i+0xd2>
 80037fe:	232d      	movs	r3, #45	; 0x2d
 8003800:	4276      	negs	r6, r6
 8003802:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003806:	485a      	ldr	r0, [pc, #360]	; (8003970 <_printf_i+0x23c>)
 8003808:	230a      	movs	r3, #10
 800380a:	e012      	b.n	8003832 <_printf_i+0xfe>
 800380c:	682b      	ldr	r3, [r5, #0]
 800380e:	6820      	ldr	r0, [r4, #0]
 8003810:	1d19      	adds	r1, r3, #4
 8003812:	6029      	str	r1, [r5, #0]
 8003814:	0605      	lsls	r5, r0, #24
 8003816:	d501      	bpl.n	800381c <_printf_i+0xe8>
 8003818:	681e      	ldr	r6, [r3, #0]
 800381a:	e002      	b.n	8003822 <_printf_i+0xee>
 800381c:	0641      	lsls	r1, r0, #25
 800381e:	d5fb      	bpl.n	8003818 <_printf_i+0xe4>
 8003820:	881e      	ldrh	r6, [r3, #0]
 8003822:	4853      	ldr	r0, [pc, #332]	; (8003970 <_printf_i+0x23c>)
 8003824:	2f6f      	cmp	r7, #111	; 0x6f
 8003826:	bf0c      	ite	eq
 8003828:	2308      	moveq	r3, #8
 800382a:	230a      	movne	r3, #10
 800382c:	2100      	movs	r1, #0
 800382e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003832:	6865      	ldr	r5, [r4, #4]
 8003834:	60a5      	str	r5, [r4, #8]
 8003836:	2d00      	cmp	r5, #0
 8003838:	bfa2      	ittt	ge
 800383a:	6821      	ldrge	r1, [r4, #0]
 800383c:	f021 0104 	bicge.w	r1, r1, #4
 8003840:	6021      	strge	r1, [r4, #0]
 8003842:	b90e      	cbnz	r6, 8003848 <_printf_i+0x114>
 8003844:	2d00      	cmp	r5, #0
 8003846:	d04b      	beq.n	80038e0 <_printf_i+0x1ac>
 8003848:	4615      	mov	r5, r2
 800384a:	fbb6 f1f3 	udiv	r1, r6, r3
 800384e:	fb03 6711 	mls	r7, r3, r1, r6
 8003852:	5dc7      	ldrb	r7, [r0, r7]
 8003854:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003858:	4637      	mov	r7, r6
 800385a:	42bb      	cmp	r3, r7
 800385c:	460e      	mov	r6, r1
 800385e:	d9f4      	bls.n	800384a <_printf_i+0x116>
 8003860:	2b08      	cmp	r3, #8
 8003862:	d10b      	bne.n	800387c <_printf_i+0x148>
 8003864:	6823      	ldr	r3, [r4, #0]
 8003866:	07de      	lsls	r6, r3, #31
 8003868:	d508      	bpl.n	800387c <_printf_i+0x148>
 800386a:	6923      	ldr	r3, [r4, #16]
 800386c:	6861      	ldr	r1, [r4, #4]
 800386e:	4299      	cmp	r1, r3
 8003870:	bfde      	ittt	le
 8003872:	2330      	movle	r3, #48	; 0x30
 8003874:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003878:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800387c:	1b52      	subs	r2, r2, r5
 800387e:	6122      	str	r2, [r4, #16]
 8003880:	f8cd a000 	str.w	sl, [sp]
 8003884:	464b      	mov	r3, r9
 8003886:	aa03      	add	r2, sp, #12
 8003888:	4621      	mov	r1, r4
 800388a:	4640      	mov	r0, r8
 800388c:	f7ff fee4 	bl	8003658 <_printf_common>
 8003890:	3001      	adds	r0, #1
 8003892:	d14a      	bne.n	800392a <_printf_i+0x1f6>
 8003894:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003898:	b004      	add	sp, #16
 800389a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800389e:	6823      	ldr	r3, [r4, #0]
 80038a0:	f043 0320 	orr.w	r3, r3, #32
 80038a4:	6023      	str	r3, [r4, #0]
 80038a6:	4833      	ldr	r0, [pc, #204]	; (8003974 <_printf_i+0x240>)
 80038a8:	2778      	movs	r7, #120	; 0x78
 80038aa:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80038ae:	6823      	ldr	r3, [r4, #0]
 80038b0:	6829      	ldr	r1, [r5, #0]
 80038b2:	061f      	lsls	r7, r3, #24
 80038b4:	f851 6b04 	ldr.w	r6, [r1], #4
 80038b8:	d402      	bmi.n	80038c0 <_printf_i+0x18c>
 80038ba:	065f      	lsls	r7, r3, #25
 80038bc:	bf48      	it	mi
 80038be:	b2b6      	uxthmi	r6, r6
 80038c0:	07df      	lsls	r7, r3, #31
 80038c2:	bf48      	it	mi
 80038c4:	f043 0320 	orrmi.w	r3, r3, #32
 80038c8:	6029      	str	r1, [r5, #0]
 80038ca:	bf48      	it	mi
 80038cc:	6023      	strmi	r3, [r4, #0]
 80038ce:	b91e      	cbnz	r6, 80038d8 <_printf_i+0x1a4>
 80038d0:	6823      	ldr	r3, [r4, #0]
 80038d2:	f023 0320 	bic.w	r3, r3, #32
 80038d6:	6023      	str	r3, [r4, #0]
 80038d8:	2310      	movs	r3, #16
 80038da:	e7a7      	b.n	800382c <_printf_i+0xf8>
 80038dc:	4824      	ldr	r0, [pc, #144]	; (8003970 <_printf_i+0x23c>)
 80038de:	e7e4      	b.n	80038aa <_printf_i+0x176>
 80038e0:	4615      	mov	r5, r2
 80038e2:	e7bd      	b.n	8003860 <_printf_i+0x12c>
 80038e4:	682b      	ldr	r3, [r5, #0]
 80038e6:	6826      	ldr	r6, [r4, #0]
 80038e8:	6961      	ldr	r1, [r4, #20]
 80038ea:	1d18      	adds	r0, r3, #4
 80038ec:	6028      	str	r0, [r5, #0]
 80038ee:	0635      	lsls	r5, r6, #24
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	d501      	bpl.n	80038f8 <_printf_i+0x1c4>
 80038f4:	6019      	str	r1, [r3, #0]
 80038f6:	e002      	b.n	80038fe <_printf_i+0x1ca>
 80038f8:	0670      	lsls	r0, r6, #25
 80038fa:	d5fb      	bpl.n	80038f4 <_printf_i+0x1c0>
 80038fc:	8019      	strh	r1, [r3, #0]
 80038fe:	2300      	movs	r3, #0
 8003900:	6123      	str	r3, [r4, #16]
 8003902:	4615      	mov	r5, r2
 8003904:	e7bc      	b.n	8003880 <_printf_i+0x14c>
 8003906:	682b      	ldr	r3, [r5, #0]
 8003908:	1d1a      	adds	r2, r3, #4
 800390a:	602a      	str	r2, [r5, #0]
 800390c:	681d      	ldr	r5, [r3, #0]
 800390e:	6862      	ldr	r2, [r4, #4]
 8003910:	2100      	movs	r1, #0
 8003912:	4628      	mov	r0, r5
 8003914:	f7fc fc64 	bl	80001e0 <memchr>
 8003918:	b108      	cbz	r0, 800391e <_printf_i+0x1ea>
 800391a:	1b40      	subs	r0, r0, r5
 800391c:	6060      	str	r0, [r4, #4]
 800391e:	6863      	ldr	r3, [r4, #4]
 8003920:	6123      	str	r3, [r4, #16]
 8003922:	2300      	movs	r3, #0
 8003924:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003928:	e7aa      	b.n	8003880 <_printf_i+0x14c>
 800392a:	6923      	ldr	r3, [r4, #16]
 800392c:	462a      	mov	r2, r5
 800392e:	4649      	mov	r1, r9
 8003930:	4640      	mov	r0, r8
 8003932:	47d0      	blx	sl
 8003934:	3001      	adds	r0, #1
 8003936:	d0ad      	beq.n	8003894 <_printf_i+0x160>
 8003938:	6823      	ldr	r3, [r4, #0]
 800393a:	079b      	lsls	r3, r3, #30
 800393c:	d413      	bmi.n	8003966 <_printf_i+0x232>
 800393e:	68e0      	ldr	r0, [r4, #12]
 8003940:	9b03      	ldr	r3, [sp, #12]
 8003942:	4298      	cmp	r0, r3
 8003944:	bfb8      	it	lt
 8003946:	4618      	movlt	r0, r3
 8003948:	e7a6      	b.n	8003898 <_printf_i+0x164>
 800394a:	2301      	movs	r3, #1
 800394c:	4632      	mov	r2, r6
 800394e:	4649      	mov	r1, r9
 8003950:	4640      	mov	r0, r8
 8003952:	47d0      	blx	sl
 8003954:	3001      	adds	r0, #1
 8003956:	d09d      	beq.n	8003894 <_printf_i+0x160>
 8003958:	3501      	adds	r5, #1
 800395a:	68e3      	ldr	r3, [r4, #12]
 800395c:	9903      	ldr	r1, [sp, #12]
 800395e:	1a5b      	subs	r3, r3, r1
 8003960:	42ab      	cmp	r3, r5
 8003962:	dcf2      	bgt.n	800394a <_printf_i+0x216>
 8003964:	e7eb      	b.n	800393e <_printf_i+0x20a>
 8003966:	2500      	movs	r5, #0
 8003968:	f104 0619 	add.w	r6, r4, #25
 800396c:	e7f5      	b.n	800395a <_printf_i+0x226>
 800396e:	bf00      	nop
 8003970:	08005b6e 	.word	0x08005b6e
 8003974:	08005b7f 	.word	0x08005b7f

08003978 <std>:
 8003978:	2300      	movs	r3, #0
 800397a:	b510      	push	{r4, lr}
 800397c:	4604      	mov	r4, r0
 800397e:	e9c0 3300 	strd	r3, r3, [r0]
 8003982:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003986:	6083      	str	r3, [r0, #8]
 8003988:	8181      	strh	r1, [r0, #12]
 800398a:	6643      	str	r3, [r0, #100]	; 0x64
 800398c:	81c2      	strh	r2, [r0, #14]
 800398e:	6183      	str	r3, [r0, #24]
 8003990:	4619      	mov	r1, r3
 8003992:	2208      	movs	r2, #8
 8003994:	305c      	adds	r0, #92	; 0x5c
 8003996:	f000 f90e 	bl	8003bb6 <memset>
 800399a:	4b0d      	ldr	r3, [pc, #52]	; (80039d0 <std+0x58>)
 800399c:	6263      	str	r3, [r4, #36]	; 0x24
 800399e:	4b0d      	ldr	r3, [pc, #52]	; (80039d4 <std+0x5c>)
 80039a0:	62a3      	str	r3, [r4, #40]	; 0x28
 80039a2:	4b0d      	ldr	r3, [pc, #52]	; (80039d8 <std+0x60>)
 80039a4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80039a6:	4b0d      	ldr	r3, [pc, #52]	; (80039dc <std+0x64>)
 80039a8:	6323      	str	r3, [r4, #48]	; 0x30
 80039aa:	4b0d      	ldr	r3, [pc, #52]	; (80039e0 <std+0x68>)
 80039ac:	6224      	str	r4, [r4, #32]
 80039ae:	429c      	cmp	r4, r3
 80039b0:	d006      	beq.n	80039c0 <std+0x48>
 80039b2:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80039b6:	4294      	cmp	r4, r2
 80039b8:	d002      	beq.n	80039c0 <std+0x48>
 80039ba:	33d0      	adds	r3, #208	; 0xd0
 80039bc:	429c      	cmp	r4, r3
 80039be:	d105      	bne.n	80039cc <std+0x54>
 80039c0:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80039c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80039c8:	f000 b972 	b.w	8003cb0 <__retarget_lock_init_recursive>
 80039cc:	bd10      	pop	{r4, pc}
 80039ce:	bf00      	nop
 80039d0:	08003b31 	.word	0x08003b31
 80039d4:	08003b53 	.word	0x08003b53
 80039d8:	08003b8b 	.word	0x08003b8b
 80039dc:	08003baf 	.word	0x08003baf
 80039e0:	200003e8 	.word	0x200003e8

080039e4 <stdio_exit_handler>:
 80039e4:	4a02      	ldr	r2, [pc, #8]	; (80039f0 <stdio_exit_handler+0xc>)
 80039e6:	4903      	ldr	r1, [pc, #12]	; (80039f4 <stdio_exit_handler+0x10>)
 80039e8:	4803      	ldr	r0, [pc, #12]	; (80039f8 <stdio_exit_handler+0x14>)
 80039ea:	f000 b869 	b.w	8003ac0 <_fwalk_sglue>
 80039ee:	bf00      	nop
 80039f0:	20000114 	.word	0x20000114
 80039f4:	08005639 	.word	0x08005639
 80039f8:	20000120 	.word	0x20000120

080039fc <cleanup_stdio>:
 80039fc:	6841      	ldr	r1, [r0, #4]
 80039fe:	4b0c      	ldr	r3, [pc, #48]	; (8003a30 <cleanup_stdio+0x34>)
 8003a00:	4299      	cmp	r1, r3
 8003a02:	b510      	push	{r4, lr}
 8003a04:	4604      	mov	r4, r0
 8003a06:	d001      	beq.n	8003a0c <cleanup_stdio+0x10>
 8003a08:	f001 fe16 	bl	8005638 <_fflush_r>
 8003a0c:	68a1      	ldr	r1, [r4, #8]
 8003a0e:	4b09      	ldr	r3, [pc, #36]	; (8003a34 <cleanup_stdio+0x38>)
 8003a10:	4299      	cmp	r1, r3
 8003a12:	d002      	beq.n	8003a1a <cleanup_stdio+0x1e>
 8003a14:	4620      	mov	r0, r4
 8003a16:	f001 fe0f 	bl	8005638 <_fflush_r>
 8003a1a:	68e1      	ldr	r1, [r4, #12]
 8003a1c:	4b06      	ldr	r3, [pc, #24]	; (8003a38 <cleanup_stdio+0x3c>)
 8003a1e:	4299      	cmp	r1, r3
 8003a20:	d004      	beq.n	8003a2c <cleanup_stdio+0x30>
 8003a22:	4620      	mov	r0, r4
 8003a24:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003a28:	f001 be06 	b.w	8005638 <_fflush_r>
 8003a2c:	bd10      	pop	{r4, pc}
 8003a2e:	bf00      	nop
 8003a30:	200003e8 	.word	0x200003e8
 8003a34:	20000450 	.word	0x20000450
 8003a38:	200004b8 	.word	0x200004b8

08003a3c <global_stdio_init.part.0>:
 8003a3c:	b510      	push	{r4, lr}
 8003a3e:	4b0b      	ldr	r3, [pc, #44]	; (8003a6c <global_stdio_init.part.0+0x30>)
 8003a40:	4c0b      	ldr	r4, [pc, #44]	; (8003a70 <global_stdio_init.part.0+0x34>)
 8003a42:	4a0c      	ldr	r2, [pc, #48]	; (8003a74 <global_stdio_init.part.0+0x38>)
 8003a44:	601a      	str	r2, [r3, #0]
 8003a46:	4620      	mov	r0, r4
 8003a48:	2200      	movs	r2, #0
 8003a4a:	2104      	movs	r1, #4
 8003a4c:	f7ff ff94 	bl	8003978 <std>
 8003a50:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8003a54:	2201      	movs	r2, #1
 8003a56:	2109      	movs	r1, #9
 8003a58:	f7ff ff8e 	bl	8003978 <std>
 8003a5c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8003a60:	2202      	movs	r2, #2
 8003a62:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003a66:	2112      	movs	r1, #18
 8003a68:	f7ff bf86 	b.w	8003978 <std>
 8003a6c:	20000520 	.word	0x20000520
 8003a70:	200003e8 	.word	0x200003e8
 8003a74:	080039e5 	.word	0x080039e5

08003a78 <__sfp_lock_acquire>:
 8003a78:	4801      	ldr	r0, [pc, #4]	; (8003a80 <__sfp_lock_acquire+0x8>)
 8003a7a:	f000 b91a 	b.w	8003cb2 <__retarget_lock_acquire_recursive>
 8003a7e:	bf00      	nop
 8003a80:	20000529 	.word	0x20000529

08003a84 <__sfp_lock_release>:
 8003a84:	4801      	ldr	r0, [pc, #4]	; (8003a8c <__sfp_lock_release+0x8>)
 8003a86:	f000 b915 	b.w	8003cb4 <__retarget_lock_release_recursive>
 8003a8a:	bf00      	nop
 8003a8c:	20000529 	.word	0x20000529

08003a90 <__sinit>:
 8003a90:	b510      	push	{r4, lr}
 8003a92:	4604      	mov	r4, r0
 8003a94:	f7ff fff0 	bl	8003a78 <__sfp_lock_acquire>
 8003a98:	6a23      	ldr	r3, [r4, #32]
 8003a9a:	b11b      	cbz	r3, 8003aa4 <__sinit+0x14>
 8003a9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003aa0:	f7ff bff0 	b.w	8003a84 <__sfp_lock_release>
 8003aa4:	4b04      	ldr	r3, [pc, #16]	; (8003ab8 <__sinit+0x28>)
 8003aa6:	6223      	str	r3, [r4, #32]
 8003aa8:	4b04      	ldr	r3, [pc, #16]	; (8003abc <__sinit+0x2c>)
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d1f5      	bne.n	8003a9c <__sinit+0xc>
 8003ab0:	f7ff ffc4 	bl	8003a3c <global_stdio_init.part.0>
 8003ab4:	e7f2      	b.n	8003a9c <__sinit+0xc>
 8003ab6:	bf00      	nop
 8003ab8:	080039fd 	.word	0x080039fd
 8003abc:	20000520 	.word	0x20000520

08003ac0 <_fwalk_sglue>:
 8003ac0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003ac4:	4607      	mov	r7, r0
 8003ac6:	4688      	mov	r8, r1
 8003ac8:	4614      	mov	r4, r2
 8003aca:	2600      	movs	r6, #0
 8003acc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003ad0:	f1b9 0901 	subs.w	r9, r9, #1
 8003ad4:	d505      	bpl.n	8003ae2 <_fwalk_sglue+0x22>
 8003ad6:	6824      	ldr	r4, [r4, #0]
 8003ad8:	2c00      	cmp	r4, #0
 8003ada:	d1f7      	bne.n	8003acc <_fwalk_sglue+0xc>
 8003adc:	4630      	mov	r0, r6
 8003ade:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003ae2:	89ab      	ldrh	r3, [r5, #12]
 8003ae4:	2b01      	cmp	r3, #1
 8003ae6:	d907      	bls.n	8003af8 <_fwalk_sglue+0x38>
 8003ae8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003aec:	3301      	adds	r3, #1
 8003aee:	d003      	beq.n	8003af8 <_fwalk_sglue+0x38>
 8003af0:	4629      	mov	r1, r5
 8003af2:	4638      	mov	r0, r7
 8003af4:	47c0      	blx	r8
 8003af6:	4306      	orrs	r6, r0
 8003af8:	3568      	adds	r5, #104	; 0x68
 8003afa:	e7e9      	b.n	8003ad0 <_fwalk_sglue+0x10>

08003afc <iprintf>:
 8003afc:	b40f      	push	{r0, r1, r2, r3}
 8003afe:	b507      	push	{r0, r1, r2, lr}
 8003b00:	4906      	ldr	r1, [pc, #24]	; (8003b1c <iprintf+0x20>)
 8003b02:	ab04      	add	r3, sp, #16
 8003b04:	6808      	ldr	r0, [r1, #0]
 8003b06:	f853 2b04 	ldr.w	r2, [r3], #4
 8003b0a:	6881      	ldr	r1, [r0, #8]
 8003b0c:	9301      	str	r3, [sp, #4]
 8003b0e:	f001 fbf3 	bl	80052f8 <_vfiprintf_r>
 8003b12:	b003      	add	sp, #12
 8003b14:	f85d eb04 	ldr.w	lr, [sp], #4
 8003b18:	b004      	add	sp, #16
 8003b1a:	4770      	bx	lr
 8003b1c:	2000016c 	.word	0x2000016c

08003b20 <putchar>:
 8003b20:	4b02      	ldr	r3, [pc, #8]	; (8003b2c <putchar+0xc>)
 8003b22:	4601      	mov	r1, r0
 8003b24:	6818      	ldr	r0, [r3, #0]
 8003b26:	6882      	ldr	r2, [r0, #8]
 8003b28:	f001 bdae 	b.w	8005688 <_putc_r>
 8003b2c:	2000016c 	.word	0x2000016c

08003b30 <__sread>:
 8003b30:	b510      	push	{r4, lr}
 8003b32:	460c      	mov	r4, r1
 8003b34:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003b38:	f000 f86c 	bl	8003c14 <_read_r>
 8003b3c:	2800      	cmp	r0, #0
 8003b3e:	bfab      	itete	ge
 8003b40:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003b42:	89a3      	ldrhlt	r3, [r4, #12]
 8003b44:	181b      	addge	r3, r3, r0
 8003b46:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003b4a:	bfac      	ite	ge
 8003b4c:	6563      	strge	r3, [r4, #84]	; 0x54
 8003b4e:	81a3      	strhlt	r3, [r4, #12]
 8003b50:	bd10      	pop	{r4, pc}

08003b52 <__swrite>:
 8003b52:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003b56:	461f      	mov	r7, r3
 8003b58:	898b      	ldrh	r3, [r1, #12]
 8003b5a:	05db      	lsls	r3, r3, #23
 8003b5c:	4605      	mov	r5, r0
 8003b5e:	460c      	mov	r4, r1
 8003b60:	4616      	mov	r6, r2
 8003b62:	d505      	bpl.n	8003b70 <__swrite+0x1e>
 8003b64:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003b68:	2302      	movs	r3, #2
 8003b6a:	2200      	movs	r2, #0
 8003b6c:	f000 f840 	bl	8003bf0 <_lseek_r>
 8003b70:	89a3      	ldrh	r3, [r4, #12]
 8003b72:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003b76:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003b7a:	81a3      	strh	r3, [r4, #12]
 8003b7c:	4632      	mov	r2, r6
 8003b7e:	463b      	mov	r3, r7
 8003b80:	4628      	mov	r0, r5
 8003b82:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003b86:	f000 b857 	b.w	8003c38 <_write_r>

08003b8a <__sseek>:
 8003b8a:	b510      	push	{r4, lr}
 8003b8c:	460c      	mov	r4, r1
 8003b8e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003b92:	f000 f82d 	bl	8003bf0 <_lseek_r>
 8003b96:	1c43      	adds	r3, r0, #1
 8003b98:	89a3      	ldrh	r3, [r4, #12]
 8003b9a:	bf15      	itete	ne
 8003b9c:	6560      	strne	r0, [r4, #84]	; 0x54
 8003b9e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003ba2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003ba6:	81a3      	strheq	r3, [r4, #12]
 8003ba8:	bf18      	it	ne
 8003baa:	81a3      	strhne	r3, [r4, #12]
 8003bac:	bd10      	pop	{r4, pc}

08003bae <__sclose>:
 8003bae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003bb2:	f000 b80d 	b.w	8003bd0 <_close_r>

08003bb6 <memset>:
 8003bb6:	4402      	add	r2, r0
 8003bb8:	4603      	mov	r3, r0
 8003bba:	4293      	cmp	r3, r2
 8003bbc:	d100      	bne.n	8003bc0 <memset+0xa>
 8003bbe:	4770      	bx	lr
 8003bc0:	f803 1b01 	strb.w	r1, [r3], #1
 8003bc4:	e7f9      	b.n	8003bba <memset+0x4>
	...

08003bc8 <_localeconv_r>:
 8003bc8:	4800      	ldr	r0, [pc, #0]	; (8003bcc <_localeconv_r+0x4>)
 8003bca:	4770      	bx	lr
 8003bcc:	20000260 	.word	0x20000260

08003bd0 <_close_r>:
 8003bd0:	b538      	push	{r3, r4, r5, lr}
 8003bd2:	4d06      	ldr	r5, [pc, #24]	; (8003bec <_close_r+0x1c>)
 8003bd4:	2300      	movs	r3, #0
 8003bd6:	4604      	mov	r4, r0
 8003bd8:	4608      	mov	r0, r1
 8003bda:	602b      	str	r3, [r5, #0]
 8003bdc:	f7fd fcc2 	bl	8001564 <_close>
 8003be0:	1c43      	adds	r3, r0, #1
 8003be2:	d102      	bne.n	8003bea <_close_r+0x1a>
 8003be4:	682b      	ldr	r3, [r5, #0]
 8003be6:	b103      	cbz	r3, 8003bea <_close_r+0x1a>
 8003be8:	6023      	str	r3, [r4, #0]
 8003bea:	bd38      	pop	{r3, r4, r5, pc}
 8003bec:	20000524 	.word	0x20000524

08003bf0 <_lseek_r>:
 8003bf0:	b538      	push	{r3, r4, r5, lr}
 8003bf2:	4d07      	ldr	r5, [pc, #28]	; (8003c10 <_lseek_r+0x20>)
 8003bf4:	4604      	mov	r4, r0
 8003bf6:	4608      	mov	r0, r1
 8003bf8:	4611      	mov	r1, r2
 8003bfa:	2200      	movs	r2, #0
 8003bfc:	602a      	str	r2, [r5, #0]
 8003bfe:	461a      	mov	r2, r3
 8003c00:	f7fd fcba 	bl	8001578 <_lseek>
 8003c04:	1c43      	adds	r3, r0, #1
 8003c06:	d102      	bne.n	8003c0e <_lseek_r+0x1e>
 8003c08:	682b      	ldr	r3, [r5, #0]
 8003c0a:	b103      	cbz	r3, 8003c0e <_lseek_r+0x1e>
 8003c0c:	6023      	str	r3, [r4, #0]
 8003c0e:	bd38      	pop	{r3, r4, r5, pc}
 8003c10:	20000524 	.word	0x20000524

08003c14 <_read_r>:
 8003c14:	b538      	push	{r3, r4, r5, lr}
 8003c16:	4d07      	ldr	r5, [pc, #28]	; (8003c34 <_read_r+0x20>)
 8003c18:	4604      	mov	r4, r0
 8003c1a:	4608      	mov	r0, r1
 8003c1c:	4611      	mov	r1, r2
 8003c1e:	2200      	movs	r2, #0
 8003c20:	602a      	str	r2, [r5, #0]
 8003c22:	461a      	mov	r2, r3
 8003c24:	f7fd fc8e 	bl	8001544 <_read>
 8003c28:	1c43      	adds	r3, r0, #1
 8003c2a:	d102      	bne.n	8003c32 <_read_r+0x1e>
 8003c2c:	682b      	ldr	r3, [r5, #0]
 8003c2e:	b103      	cbz	r3, 8003c32 <_read_r+0x1e>
 8003c30:	6023      	str	r3, [r4, #0]
 8003c32:	bd38      	pop	{r3, r4, r5, pc}
 8003c34:	20000524 	.word	0x20000524

08003c38 <_write_r>:
 8003c38:	b538      	push	{r3, r4, r5, lr}
 8003c3a:	4d07      	ldr	r5, [pc, #28]	; (8003c58 <_write_r+0x20>)
 8003c3c:	4604      	mov	r4, r0
 8003c3e:	4608      	mov	r0, r1
 8003c40:	4611      	mov	r1, r2
 8003c42:	2200      	movs	r2, #0
 8003c44:	602a      	str	r2, [r5, #0]
 8003c46:	461a      	mov	r2, r3
 8003c48:	f7fd f97e 	bl	8000f48 <_write>
 8003c4c:	1c43      	adds	r3, r0, #1
 8003c4e:	d102      	bne.n	8003c56 <_write_r+0x1e>
 8003c50:	682b      	ldr	r3, [r5, #0]
 8003c52:	b103      	cbz	r3, 8003c56 <_write_r+0x1e>
 8003c54:	6023      	str	r3, [r4, #0]
 8003c56:	bd38      	pop	{r3, r4, r5, pc}
 8003c58:	20000524 	.word	0x20000524

08003c5c <__errno>:
 8003c5c:	4b01      	ldr	r3, [pc, #4]	; (8003c64 <__errno+0x8>)
 8003c5e:	6818      	ldr	r0, [r3, #0]
 8003c60:	4770      	bx	lr
 8003c62:	bf00      	nop
 8003c64:	2000016c 	.word	0x2000016c

08003c68 <__libc_init_array>:
 8003c68:	b570      	push	{r4, r5, r6, lr}
 8003c6a:	4d0d      	ldr	r5, [pc, #52]	; (8003ca0 <__libc_init_array+0x38>)
 8003c6c:	4c0d      	ldr	r4, [pc, #52]	; (8003ca4 <__libc_init_array+0x3c>)
 8003c6e:	1b64      	subs	r4, r4, r5
 8003c70:	10a4      	asrs	r4, r4, #2
 8003c72:	2600      	movs	r6, #0
 8003c74:	42a6      	cmp	r6, r4
 8003c76:	d109      	bne.n	8003c8c <__libc_init_array+0x24>
 8003c78:	4d0b      	ldr	r5, [pc, #44]	; (8003ca8 <__libc_init_array+0x40>)
 8003c7a:	4c0c      	ldr	r4, [pc, #48]	; (8003cac <__libc_init_array+0x44>)
 8003c7c:	f001 ff22 	bl	8005ac4 <_init>
 8003c80:	1b64      	subs	r4, r4, r5
 8003c82:	10a4      	asrs	r4, r4, #2
 8003c84:	2600      	movs	r6, #0
 8003c86:	42a6      	cmp	r6, r4
 8003c88:	d105      	bne.n	8003c96 <__libc_init_array+0x2e>
 8003c8a:	bd70      	pop	{r4, r5, r6, pc}
 8003c8c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003c90:	4798      	blx	r3
 8003c92:	3601      	adds	r6, #1
 8003c94:	e7ee      	b.n	8003c74 <__libc_init_array+0xc>
 8003c96:	f855 3b04 	ldr.w	r3, [r5], #4
 8003c9a:	4798      	blx	r3
 8003c9c:	3601      	adds	r6, #1
 8003c9e:	e7f2      	b.n	8003c86 <__libc_init_array+0x1e>
 8003ca0:	08005ed4 	.word	0x08005ed4
 8003ca4:	08005ed4 	.word	0x08005ed4
 8003ca8:	08005ed4 	.word	0x08005ed4
 8003cac:	08005ed8 	.word	0x08005ed8

08003cb0 <__retarget_lock_init_recursive>:
 8003cb0:	4770      	bx	lr

08003cb2 <__retarget_lock_acquire_recursive>:
 8003cb2:	4770      	bx	lr

08003cb4 <__retarget_lock_release_recursive>:
 8003cb4:	4770      	bx	lr

08003cb6 <quorem>:
 8003cb6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003cba:	6903      	ldr	r3, [r0, #16]
 8003cbc:	690c      	ldr	r4, [r1, #16]
 8003cbe:	42a3      	cmp	r3, r4
 8003cc0:	4607      	mov	r7, r0
 8003cc2:	db7e      	blt.n	8003dc2 <quorem+0x10c>
 8003cc4:	3c01      	subs	r4, #1
 8003cc6:	f101 0814 	add.w	r8, r1, #20
 8003cca:	f100 0514 	add.w	r5, r0, #20
 8003cce:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8003cd2:	9301      	str	r3, [sp, #4]
 8003cd4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8003cd8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8003cdc:	3301      	adds	r3, #1
 8003cde:	429a      	cmp	r2, r3
 8003ce0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8003ce4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8003ce8:	fbb2 f6f3 	udiv	r6, r2, r3
 8003cec:	d331      	bcc.n	8003d52 <quorem+0x9c>
 8003cee:	f04f 0e00 	mov.w	lr, #0
 8003cf2:	4640      	mov	r0, r8
 8003cf4:	46ac      	mov	ip, r5
 8003cf6:	46f2      	mov	sl, lr
 8003cf8:	f850 2b04 	ldr.w	r2, [r0], #4
 8003cfc:	b293      	uxth	r3, r2
 8003cfe:	fb06 e303 	mla	r3, r6, r3, lr
 8003d02:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8003d06:	0c1a      	lsrs	r2, r3, #16
 8003d08:	b29b      	uxth	r3, r3
 8003d0a:	ebaa 0303 	sub.w	r3, sl, r3
 8003d0e:	f8dc a000 	ldr.w	sl, [ip]
 8003d12:	fa13 f38a 	uxtah	r3, r3, sl
 8003d16:	fb06 220e 	mla	r2, r6, lr, r2
 8003d1a:	9300      	str	r3, [sp, #0]
 8003d1c:	9b00      	ldr	r3, [sp, #0]
 8003d1e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8003d22:	b292      	uxth	r2, r2
 8003d24:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8003d28:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8003d2c:	f8bd 3000 	ldrh.w	r3, [sp]
 8003d30:	4581      	cmp	r9, r0
 8003d32:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8003d36:	f84c 3b04 	str.w	r3, [ip], #4
 8003d3a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8003d3e:	d2db      	bcs.n	8003cf8 <quorem+0x42>
 8003d40:	f855 300b 	ldr.w	r3, [r5, fp]
 8003d44:	b92b      	cbnz	r3, 8003d52 <quorem+0x9c>
 8003d46:	9b01      	ldr	r3, [sp, #4]
 8003d48:	3b04      	subs	r3, #4
 8003d4a:	429d      	cmp	r5, r3
 8003d4c:	461a      	mov	r2, r3
 8003d4e:	d32c      	bcc.n	8003daa <quorem+0xf4>
 8003d50:	613c      	str	r4, [r7, #16]
 8003d52:	4638      	mov	r0, r7
 8003d54:	f001 f9a6 	bl	80050a4 <__mcmp>
 8003d58:	2800      	cmp	r0, #0
 8003d5a:	db22      	blt.n	8003da2 <quorem+0xec>
 8003d5c:	3601      	adds	r6, #1
 8003d5e:	4629      	mov	r1, r5
 8003d60:	2000      	movs	r0, #0
 8003d62:	f858 2b04 	ldr.w	r2, [r8], #4
 8003d66:	f8d1 c000 	ldr.w	ip, [r1]
 8003d6a:	b293      	uxth	r3, r2
 8003d6c:	1ac3      	subs	r3, r0, r3
 8003d6e:	0c12      	lsrs	r2, r2, #16
 8003d70:	fa13 f38c 	uxtah	r3, r3, ip
 8003d74:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8003d78:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8003d7c:	b29b      	uxth	r3, r3
 8003d7e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8003d82:	45c1      	cmp	r9, r8
 8003d84:	f841 3b04 	str.w	r3, [r1], #4
 8003d88:	ea4f 4022 	mov.w	r0, r2, asr #16
 8003d8c:	d2e9      	bcs.n	8003d62 <quorem+0xac>
 8003d8e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8003d92:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8003d96:	b922      	cbnz	r2, 8003da2 <quorem+0xec>
 8003d98:	3b04      	subs	r3, #4
 8003d9a:	429d      	cmp	r5, r3
 8003d9c:	461a      	mov	r2, r3
 8003d9e:	d30a      	bcc.n	8003db6 <quorem+0x100>
 8003da0:	613c      	str	r4, [r7, #16]
 8003da2:	4630      	mov	r0, r6
 8003da4:	b003      	add	sp, #12
 8003da6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003daa:	6812      	ldr	r2, [r2, #0]
 8003dac:	3b04      	subs	r3, #4
 8003dae:	2a00      	cmp	r2, #0
 8003db0:	d1ce      	bne.n	8003d50 <quorem+0x9a>
 8003db2:	3c01      	subs	r4, #1
 8003db4:	e7c9      	b.n	8003d4a <quorem+0x94>
 8003db6:	6812      	ldr	r2, [r2, #0]
 8003db8:	3b04      	subs	r3, #4
 8003dba:	2a00      	cmp	r2, #0
 8003dbc:	d1f0      	bne.n	8003da0 <quorem+0xea>
 8003dbe:	3c01      	subs	r4, #1
 8003dc0:	e7eb      	b.n	8003d9a <quorem+0xe4>
 8003dc2:	2000      	movs	r0, #0
 8003dc4:	e7ee      	b.n	8003da4 <quorem+0xee>
	...

08003dc8 <_dtoa_r>:
 8003dc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003dcc:	ed2d 8b04 	vpush	{d8-d9}
 8003dd0:	69c5      	ldr	r5, [r0, #28]
 8003dd2:	b093      	sub	sp, #76	; 0x4c
 8003dd4:	ed8d 0b02 	vstr	d0, [sp, #8]
 8003dd8:	ec57 6b10 	vmov	r6, r7, d0
 8003ddc:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8003de0:	9107      	str	r1, [sp, #28]
 8003de2:	4604      	mov	r4, r0
 8003de4:	920a      	str	r2, [sp, #40]	; 0x28
 8003de6:	930d      	str	r3, [sp, #52]	; 0x34
 8003de8:	b975      	cbnz	r5, 8003e08 <_dtoa_r+0x40>
 8003dea:	2010      	movs	r0, #16
 8003dec:	f000 fe2a 	bl	8004a44 <malloc>
 8003df0:	4602      	mov	r2, r0
 8003df2:	61e0      	str	r0, [r4, #28]
 8003df4:	b920      	cbnz	r0, 8003e00 <_dtoa_r+0x38>
 8003df6:	4bae      	ldr	r3, [pc, #696]	; (80040b0 <_dtoa_r+0x2e8>)
 8003df8:	21ef      	movs	r1, #239	; 0xef
 8003dfa:	48ae      	ldr	r0, [pc, #696]	; (80040b4 <_dtoa_r+0x2ec>)
 8003dfc:	f001 fd2c 	bl	8005858 <__assert_func>
 8003e00:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8003e04:	6005      	str	r5, [r0, #0]
 8003e06:	60c5      	str	r5, [r0, #12]
 8003e08:	69e3      	ldr	r3, [r4, #28]
 8003e0a:	6819      	ldr	r1, [r3, #0]
 8003e0c:	b151      	cbz	r1, 8003e24 <_dtoa_r+0x5c>
 8003e0e:	685a      	ldr	r2, [r3, #4]
 8003e10:	604a      	str	r2, [r1, #4]
 8003e12:	2301      	movs	r3, #1
 8003e14:	4093      	lsls	r3, r2
 8003e16:	608b      	str	r3, [r1, #8]
 8003e18:	4620      	mov	r0, r4
 8003e1a:	f000 ff07 	bl	8004c2c <_Bfree>
 8003e1e:	69e3      	ldr	r3, [r4, #28]
 8003e20:	2200      	movs	r2, #0
 8003e22:	601a      	str	r2, [r3, #0]
 8003e24:	1e3b      	subs	r3, r7, #0
 8003e26:	bfbb      	ittet	lt
 8003e28:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8003e2c:	9303      	strlt	r3, [sp, #12]
 8003e2e:	2300      	movge	r3, #0
 8003e30:	2201      	movlt	r2, #1
 8003e32:	bfac      	ite	ge
 8003e34:	f8c8 3000 	strge.w	r3, [r8]
 8003e38:	f8c8 2000 	strlt.w	r2, [r8]
 8003e3c:	4b9e      	ldr	r3, [pc, #632]	; (80040b8 <_dtoa_r+0x2f0>)
 8003e3e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8003e42:	ea33 0308 	bics.w	r3, r3, r8
 8003e46:	d11b      	bne.n	8003e80 <_dtoa_r+0xb8>
 8003e48:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8003e4a:	f242 730f 	movw	r3, #9999	; 0x270f
 8003e4e:	6013      	str	r3, [r2, #0]
 8003e50:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8003e54:	4333      	orrs	r3, r6
 8003e56:	f000 8593 	beq.w	8004980 <_dtoa_r+0xbb8>
 8003e5a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003e5c:	b963      	cbnz	r3, 8003e78 <_dtoa_r+0xb0>
 8003e5e:	4b97      	ldr	r3, [pc, #604]	; (80040bc <_dtoa_r+0x2f4>)
 8003e60:	e027      	b.n	8003eb2 <_dtoa_r+0xea>
 8003e62:	4b97      	ldr	r3, [pc, #604]	; (80040c0 <_dtoa_r+0x2f8>)
 8003e64:	9300      	str	r3, [sp, #0]
 8003e66:	3308      	adds	r3, #8
 8003e68:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8003e6a:	6013      	str	r3, [r2, #0]
 8003e6c:	9800      	ldr	r0, [sp, #0]
 8003e6e:	b013      	add	sp, #76	; 0x4c
 8003e70:	ecbd 8b04 	vpop	{d8-d9}
 8003e74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003e78:	4b90      	ldr	r3, [pc, #576]	; (80040bc <_dtoa_r+0x2f4>)
 8003e7a:	9300      	str	r3, [sp, #0]
 8003e7c:	3303      	adds	r3, #3
 8003e7e:	e7f3      	b.n	8003e68 <_dtoa_r+0xa0>
 8003e80:	ed9d 7b02 	vldr	d7, [sp, #8]
 8003e84:	2200      	movs	r2, #0
 8003e86:	ec51 0b17 	vmov	r0, r1, d7
 8003e8a:	eeb0 8a47 	vmov.f32	s16, s14
 8003e8e:	eef0 8a67 	vmov.f32	s17, s15
 8003e92:	2300      	movs	r3, #0
 8003e94:	f7fc fe20 	bl	8000ad8 <__aeabi_dcmpeq>
 8003e98:	4681      	mov	r9, r0
 8003e9a:	b160      	cbz	r0, 8003eb6 <_dtoa_r+0xee>
 8003e9c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8003e9e:	2301      	movs	r3, #1
 8003ea0:	6013      	str	r3, [r2, #0]
 8003ea2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	f000 8568 	beq.w	800497a <_dtoa_r+0xbb2>
 8003eaa:	4b86      	ldr	r3, [pc, #536]	; (80040c4 <_dtoa_r+0x2fc>)
 8003eac:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8003eae:	6013      	str	r3, [r2, #0]
 8003eb0:	3b01      	subs	r3, #1
 8003eb2:	9300      	str	r3, [sp, #0]
 8003eb4:	e7da      	b.n	8003e6c <_dtoa_r+0xa4>
 8003eb6:	aa10      	add	r2, sp, #64	; 0x40
 8003eb8:	a911      	add	r1, sp, #68	; 0x44
 8003eba:	4620      	mov	r0, r4
 8003ebc:	eeb0 0a48 	vmov.f32	s0, s16
 8003ec0:	eef0 0a68 	vmov.f32	s1, s17
 8003ec4:	f001 f994 	bl	80051f0 <__d2b>
 8003ec8:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8003ecc:	4682      	mov	sl, r0
 8003ece:	2d00      	cmp	r5, #0
 8003ed0:	d07f      	beq.n	8003fd2 <_dtoa_r+0x20a>
 8003ed2:	ee18 3a90 	vmov	r3, s17
 8003ed6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003eda:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8003ede:	ec51 0b18 	vmov	r0, r1, d8
 8003ee2:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8003ee6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8003eea:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8003eee:	4619      	mov	r1, r3
 8003ef0:	2200      	movs	r2, #0
 8003ef2:	4b75      	ldr	r3, [pc, #468]	; (80040c8 <_dtoa_r+0x300>)
 8003ef4:	f7fc f9d0 	bl	8000298 <__aeabi_dsub>
 8003ef8:	a367      	add	r3, pc, #412	; (adr r3, 8004098 <_dtoa_r+0x2d0>)
 8003efa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003efe:	f7fc fb83 	bl	8000608 <__aeabi_dmul>
 8003f02:	a367      	add	r3, pc, #412	; (adr r3, 80040a0 <_dtoa_r+0x2d8>)
 8003f04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f08:	f7fc f9c8 	bl	800029c <__adddf3>
 8003f0c:	4606      	mov	r6, r0
 8003f0e:	4628      	mov	r0, r5
 8003f10:	460f      	mov	r7, r1
 8003f12:	f7fc fb0f 	bl	8000534 <__aeabi_i2d>
 8003f16:	a364      	add	r3, pc, #400	; (adr r3, 80040a8 <_dtoa_r+0x2e0>)
 8003f18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f1c:	f7fc fb74 	bl	8000608 <__aeabi_dmul>
 8003f20:	4602      	mov	r2, r0
 8003f22:	460b      	mov	r3, r1
 8003f24:	4630      	mov	r0, r6
 8003f26:	4639      	mov	r1, r7
 8003f28:	f7fc f9b8 	bl	800029c <__adddf3>
 8003f2c:	4606      	mov	r6, r0
 8003f2e:	460f      	mov	r7, r1
 8003f30:	f7fc fe1a 	bl	8000b68 <__aeabi_d2iz>
 8003f34:	2200      	movs	r2, #0
 8003f36:	4683      	mov	fp, r0
 8003f38:	2300      	movs	r3, #0
 8003f3a:	4630      	mov	r0, r6
 8003f3c:	4639      	mov	r1, r7
 8003f3e:	f7fc fdd5 	bl	8000aec <__aeabi_dcmplt>
 8003f42:	b148      	cbz	r0, 8003f58 <_dtoa_r+0x190>
 8003f44:	4658      	mov	r0, fp
 8003f46:	f7fc faf5 	bl	8000534 <__aeabi_i2d>
 8003f4a:	4632      	mov	r2, r6
 8003f4c:	463b      	mov	r3, r7
 8003f4e:	f7fc fdc3 	bl	8000ad8 <__aeabi_dcmpeq>
 8003f52:	b908      	cbnz	r0, 8003f58 <_dtoa_r+0x190>
 8003f54:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8003f58:	f1bb 0f16 	cmp.w	fp, #22
 8003f5c:	d857      	bhi.n	800400e <_dtoa_r+0x246>
 8003f5e:	4b5b      	ldr	r3, [pc, #364]	; (80040cc <_dtoa_r+0x304>)
 8003f60:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8003f64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f68:	ec51 0b18 	vmov	r0, r1, d8
 8003f6c:	f7fc fdbe 	bl	8000aec <__aeabi_dcmplt>
 8003f70:	2800      	cmp	r0, #0
 8003f72:	d04e      	beq.n	8004012 <_dtoa_r+0x24a>
 8003f74:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8003f78:	2300      	movs	r3, #0
 8003f7a:	930c      	str	r3, [sp, #48]	; 0x30
 8003f7c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8003f7e:	1b5b      	subs	r3, r3, r5
 8003f80:	1e5a      	subs	r2, r3, #1
 8003f82:	bf45      	ittet	mi
 8003f84:	f1c3 0301 	rsbmi	r3, r3, #1
 8003f88:	9305      	strmi	r3, [sp, #20]
 8003f8a:	2300      	movpl	r3, #0
 8003f8c:	2300      	movmi	r3, #0
 8003f8e:	9206      	str	r2, [sp, #24]
 8003f90:	bf54      	ite	pl
 8003f92:	9305      	strpl	r3, [sp, #20]
 8003f94:	9306      	strmi	r3, [sp, #24]
 8003f96:	f1bb 0f00 	cmp.w	fp, #0
 8003f9a:	db3c      	blt.n	8004016 <_dtoa_r+0x24e>
 8003f9c:	9b06      	ldr	r3, [sp, #24]
 8003f9e:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8003fa2:	445b      	add	r3, fp
 8003fa4:	9306      	str	r3, [sp, #24]
 8003fa6:	2300      	movs	r3, #0
 8003fa8:	9308      	str	r3, [sp, #32]
 8003faa:	9b07      	ldr	r3, [sp, #28]
 8003fac:	2b09      	cmp	r3, #9
 8003fae:	d868      	bhi.n	8004082 <_dtoa_r+0x2ba>
 8003fb0:	2b05      	cmp	r3, #5
 8003fb2:	bfc4      	itt	gt
 8003fb4:	3b04      	subgt	r3, #4
 8003fb6:	9307      	strgt	r3, [sp, #28]
 8003fb8:	9b07      	ldr	r3, [sp, #28]
 8003fba:	f1a3 0302 	sub.w	r3, r3, #2
 8003fbe:	bfcc      	ite	gt
 8003fc0:	2500      	movgt	r5, #0
 8003fc2:	2501      	movle	r5, #1
 8003fc4:	2b03      	cmp	r3, #3
 8003fc6:	f200 8085 	bhi.w	80040d4 <_dtoa_r+0x30c>
 8003fca:	e8df f003 	tbb	[pc, r3]
 8003fce:	3b2e      	.short	0x3b2e
 8003fd0:	5839      	.short	0x5839
 8003fd2:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8003fd6:	441d      	add	r5, r3
 8003fd8:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8003fdc:	2b20      	cmp	r3, #32
 8003fde:	bfc1      	itttt	gt
 8003fe0:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8003fe4:	fa08 f803 	lslgt.w	r8, r8, r3
 8003fe8:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 8003fec:	fa26 f303 	lsrgt.w	r3, r6, r3
 8003ff0:	bfd6      	itet	le
 8003ff2:	f1c3 0320 	rsble	r3, r3, #32
 8003ff6:	ea48 0003 	orrgt.w	r0, r8, r3
 8003ffa:	fa06 f003 	lslle.w	r0, r6, r3
 8003ffe:	f7fc fa89 	bl	8000514 <__aeabi_ui2d>
 8004002:	2201      	movs	r2, #1
 8004004:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8004008:	3d01      	subs	r5, #1
 800400a:	920e      	str	r2, [sp, #56]	; 0x38
 800400c:	e76f      	b.n	8003eee <_dtoa_r+0x126>
 800400e:	2301      	movs	r3, #1
 8004010:	e7b3      	b.n	8003f7a <_dtoa_r+0x1b2>
 8004012:	900c      	str	r0, [sp, #48]	; 0x30
 8004014:	e7b2      	b.n	8003f7c <_dtoa_r+0x1b4>
 8004016:	9b05      	ldr	r3, [sp, #20]
 8004018:	eba3 030b 	sub.w	r3, r3, fp
 800401c:	9305      	str	r3, [sp, #20]
 800401e:	f1cb 0300 	rsb	r3, fp, #0
 8004022:	9308      	str	r3, [sp, #32]
 8004024:	2300      	movs	r3, #0
 8004026:	930b      	str	r3, [sp, #44]	; 0x2c
 8004028:	e7bf      	b.n	8003faa <_dtoa_r+0x1e2>
 800402a:	2300      	movs	r3, #0
 800402c:	9309      	str	r3, [sp, #36]	; 0x24
 800402e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004030:	2b00      	cmp	r3, #0
 8004032:	dc52      	bgt.n	80040da <_dtoa_r+0x312>
 8004034:	2301      	movs	r3, #1
 8004036:	9301      	str	r3, [sp, #4]
 8004038:	9304      	str	r3, [sp, #16]
 800403a:	461a      	mov	r2, r3
 800403c:	920a      	str	r2, [sp, #40]	; 0x28
 800403e:	e00b      	b.n	8004058 <_dtoa_r+0x290>
 8004040:	2301      	movs	r3, #1
 8004042:	e7f3      	b.n	800402c <_dtoa_r+0x264>
 8004044:	2300      	movs	r3, #0
 8004046:	9309      	str	r3, [sp, #36]	; 0x24
 8004048:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800404a:	445b      	add	r3, fp
 800404c:	9301      	str	r3, [sp, #4]
 800404e:	3301      	adds	r3, #1
 8004050:	2b01      	cmp	r3, #1
 8004052:	9304      	str	r3, [sp, #16]
 8004054:	bfb8      	it	lt
 8004056:	2301      	movlt	r3, #1
 8004058:	69e0      	ldr	r0, [r4, #28]
 800405a:	2100      	movs	r1, #0
 800405c:	2204      	movs	r2, #4
 800405e:	f102 0614 	add.w	r6, r2, #20
 8004062:	429e      	cmp	r6, r3
 8004064:	d93d      	bls.n	80040e2 <_dtoa_r+0x31a>
 8004066:	6041      	str	r1, [r0, #4]
 8004068:	4620      	mov	r0, r4
 800406a:	f000 fd9f 	bl	8004bac <_Balloc>
 800406e:	9000      	str	r0, [sp, #0]
 8004070:	2800      	cmp	r0, #0
 8004072:	d139      	bne.n	80040e8 <_dtoa_r+0x320>
 8004074:	4b16      	ldr	r3, [pc, #88]	; (80040d0 <_dtoa_r+0x308>)
 8004076:	4602      	mov	r2, r0
 8004078:	f240 11af 	movw	r1, #431	; 0x1af
 800407c:	e6bd      	b.n	8003dfa <_dtoa_r+0x32>
 800407e:	2301      	movs	r3, #1
 8004080:	e7e1      	b.n	8004046 <_dtoa_r+0x27e>
 8004082:	2501      	movs	r5, #1
 8004084:	2300      	movs	r3, #0
 8004086:	9307      	str	r3, [sp, #28]
 8004088:	9509      	str	r5, [sp, #36]	; 0x24
 800408a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800408e:	9301      	str	r3, [sp, #4]
 8004090:	9304      	str	r3, [sp, #16]
 8004092:	2200      	movs	r2, #0
 8004094:	2312      	movs	r3, #18
 8004096:	e7d1      	b.n	800403c <_dtoa_r+0x274>
 8004098:	636f4361 	.word	0x636f4361
 800409c:	3fd287a7 	.word	0x3fd287a7
 80040a0:	8b60c8b3 	.word	0x8b60c8b3
 80040a4:	3fc68a28 	.word	0x3fc68a28
 80040a8:	509f79fb 	.word	0x509f79fb
 80040ac:	3fd34413 	.word	0x3fd34413
 80040b0:	08005b9d 	.word	0x08005b9d
 80040b4:	08005bb4 	.word	0x08005bb4
 80040b8:	7ff00000 	.word	0x7ff00000
 80040bc:	08005b99 	.word	0x08005b99
 80040c0:	08005b90 	.word	0x08005b90
 80040c4:	08005b6d 	.word	0x08005b6d
 80040c8:	3ff80000 	.word	0x3ff80000
 80040cc:	08005ca0 	.word	0x08005ca0
 80040d0:	08005c0c 	.word	0x08005c0c
 80040d4:	2301      	movs	r3, #1
 80040d6:	9309      	str	r3, [sp, #36]	; 0x24
 80040d8:	e7d7      	b.n	800408a <_dtoa_r+0x2c2>
 80040da:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80040dc:	9301      	str	r3, [sp, #4]
 80040de:	9304      	str	r3, [sp, #16]
 80040e0:	e7ba      	b.n	8004058 <_dtoa_r+0x290>
 80040e2:	3101      	adds	r1, #1
 80040e4:	0052      	lsls	r2, r2, #1
 80040e6:	e7ba      	b.n	800405e <_dtoa_r+0x296>
 80040e8:	69e3      	ldr	r3, [r4, #28]
 80040ea:	9a00      	ldr	r2, [sp, #0]
 80040ec:	601a      	str	r2, [r3, #0]
 80040ee:	9b04      	ldr	r3, [sp, #16]
 80040f0:	2b0e      	cmp	r3, #14
 80040f2:	f200 80a8 	bhi.w	8004246 <_dtoa_r+0x47e>
 80040f6:	2d00      	cmp	r5, #0
 80040f8:	f000 80a5 	beq.w	8004246 <_dtoa_r+0x47e>
 80040fc:	f1bb 0f00 	cmp.w	fp, #0
 8004100:	dd38      	ble.n	8004174 <_dtoa_r+0x3ac>
 8004102:	4bc0      	ldr	r3, [pc, #768]	; (8004404 <_dtoa_r+0x63c>)
 8004104:	f00b 020f 	and.w	r2, fp, #15
 8004108:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800410c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8004110:	e9d3 6700 	ldrd	r6, r7, [r3]
 8004114:	ea4f 182b 	mov.w	r8, fp, asr #4
 8004118:	d019      	beq.n	800414e <_dtoa_r+0x386>
 800411a:	4bbb      	ldr	r3, [pc, #748]	; (8004408 <_dtoa_r+0x640>)
 800411c:	ec51 0b18 	vmov	r0, r1, d8
 8004120:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8004124:	f7fc fb9a 	bl	800085c <__aeabi_ddiv>
 8004128:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800412c:	f008 080f 	and.w	r8, r8, #15
 8004130:	2503      	movs	r5, #3
 8004132:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8004408 <_dtoa_r+0x640>
 8004136:	f1b8 0f00 	cmp.w	r8, #0
 800413a:	d10a      	bne.n	8004152 <_dtoa_r+0x38a>
 800413c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004140:	4632      	mov	r2, r6
 8004142:	463b      	mov	r3, r7
 8004144:	f7fc fb8a 	bl	800085c <__aeabi_ddiv>
 8004148:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800414c:	e02b      	b.n	80041a6 <_dtoa_r+0x3de>
 800414e:	2502      	movs	r5, #2
 8004150:	e7ef      	b.n	8004132 <_dtoa_r+0x36a>
 8004152:	f018 0f01 	tst.w	r8, #1
 8004156:	d008      	beq.n	800416a <_dtoa_r+0x3a2>
 8004158:	4630      	mov	r0, r6
 800415a:	4639      	mov	r1, r7
 800415c:	e9d9 2300 	ldrd	r2, r3, [r9]
 8004160:	f7fc fa52 	bl	8000608 <__aeabi_dmul>
 8004164:	3501      	adds	r5, #1
 8004166:	4606      	mov	r6, r0
 8004168:	460f      	mov	r7, r1
 800416a:	ea4f 0868 	mov.w	r8, r8, asr #1
 800416e:	f109 0908 	add.w	r9, r9, #8
 8004172:	e7e0      	b.n	8004136 <_dtoa_r+0x36e>
 8004174:	f000 809f 	beq.w	80042b6 <_dtoa_r+0x4ee>
 8004178:	f1cb 0600 	rsb	r6, fp, #0
 800417c:	4ba1      	ldr	r3, [pc, #644]	; (8004404 <_dtoa_r+0x63c>)
 800417e:	4fa2      	ldr	r7, [pc, #648]	; (8004408 <_dtoa_r+0x640>)
 8004180:	f006 020f 	and.w	r2, r6, #15
 8004184:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004188:	e9d3 2300 	ldrd	r2, r3, [r3]
 800418c:	ec51 0b18 	vmov	r0, r1, d8
 8004190:	f7fc fa3a 	bl	8000608 <__aeabi_dmul>
 8004194:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004198:	1136      	asrs	r6, r6, #4
 800419a:	2300      	movs	r3, #0
 800419c:	2502      	movs	r5, #2
 800419e:	2e00      	cmp	r6, #0
 80041a0:	d17e      	bne.n	80042a0 <_dtoa_r+0x4d8>
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d1d0      	bne.n	8004148 <_dtoa_r+0x380>
 80041a6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80041a8:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	f000 8084 	beq.w	80042ba <_dtoa_r+0x4f2>
 80041b2:	4b96      	ldr	r3, [pc, #600]	; (800440c <_dtoa_r+0x644>)
 80041b4:	2200      	movs	r2, #0
 80041b6:	4640      	mov	r0, r8
 80041b8:	4649      	mov	r1, r9
 80041ba:	f7fc fc97 	bl	8000aec <__aeabi_dcmplt>
 80041be:	2800      	cmp	r0, #0
 80041c0:	d07b      	beq.n	80042ba <_dtoa_r+0x4f2>
 80041c2:	9b04      	ldr	r3, [sp, #16]
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d078      	beq.n	80042ba <_dtoa_r+0x4f2>
 80041c8:	9b01      	ldr	r3, [sp, #4]
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	dd39      	ble.n	8004242 <_dtoa_r+0x47a>
 80041ce:	4b90      	ldr	r3, [pc, #576]	; (8004410 <_dtoa_r+0x648>)
 80041d0:	2200      	movs	r2, #0
 80041d2:	4640      	mov	r0, r8
 80041d4:	4649      	mov	r1, r9
 80041d6:	f7fc fa17 	bl	8000608 <__aeabi_dmul>
 80041da:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80041de:	9e01      	ldr	r6, [sp, #4]
 80041e0:	f10b 37ff 	add.w	r7, fp, #4294967295	; 0xffffffff
 80041e4:	3501      	adds	r5, #1
 80041e6:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80041ea:	4628      	mov	r0, r5
 80041ec:	f7fc f9a2 	bl	8000534 <__aeabi_i2d>
 80041f0:	4642      	mov	r2, r8
 80041f2:	464b      	mov	r3, r9
 80041f4:	f7fc fa08 	bl	8000608 <__aeabi_dmul>
 80041f8:	4b86      	ldr	r3, [pc, #536]	; (8004414 <_dtoa_r+0x64c>)
 80041fa:	2200      	movs	r2, #0
 80041fc:	f7fc f84e 	bl	800029c <__adddf3>
 8004200:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8004204:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004208:	9303      	str	r3, [sp, #12]
 800420a:	2e00      	cmp	r6, #0
 800420c:	d158      	bne.n	80042c0 <_dtoa_r+0x4f8>
 800420e:	4b82      	ldr	r3, [pc, #520]	; (8004418 <_dtoa_r+0x650>)
 8004210:	2200      	movs	r2, #0
 8004212:	4640      	mov	r0, r8
 8004214:	4649      	mov	r1, r9
 8004216:	f7fc f83f 	bl	8000298 <__aeabi_dsub>
 800421a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800421e:	4680      	mov	r8, r0
 8004220:	4689      	mov	r9, r1
 8004222:	f7fc fc81 	bl	8000b28 <__aeabi_dcmpgt>
 8004226:	2800      	cmp	r0, #0
 8004228:	f040 8296 	bne.w	8004758 <_dtoa_r+0x990>
 800422c:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8004230:	4640      	mov	r0, r8
 8004232:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8004236:	4649      	mov	r1, r9
 8004238:	f7fc fc58 	bl	8000aec <__aeabi_dcmplt>
 800423c:	2800      	cmp	r0, #0
 800423e:	f040 8289 	bne.w	8004754 <_dtoa_r+0x98c>
 8004242:	ed8d 8b02 	vstr	d8, [sp, #8]
 8004246:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004248:	2b00      	cmp	r3, #0
 800424a:	f2c0 814e 	blt.w	80044ea <_dtoa_r+0x722>
 800424e:	f1bb 0f0e 	cmp.w	fp, #14
 8004252:	f300 814a 	bgt.w	80044ea <_dtoa_r+0x722>
 8004256:	4b6b      	ldr	r3, [pc, #428]	; (8004404 <_dtoa_r+0x63c>)
 8004258:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800425c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004260:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004262:	2b00      	cmp	r3, #0
 8004264:	f280 80dc 	bge.w	8004420 <_dtoa_r+0x658>
 8004268:	9b04      	ldr	r3, [sp, #16]
 800426a:	2b00      	cmp	r3, #0
 800426c:	f300 80d8 	bgt.w	8004420 <_dtoa_r+0x658>
 8004270:	f040 826f 	bne.w	8004752 <_dtoa_r+0x98a>
 8004274:	4b68      	ldr	r3, [pc, #416]	; (8004418 <_dtoa_r+0x650>)
 8004276:	2200      	movs	r2, #0
 8004278:	4640      	mov	r0, r8
 800427a:	4649      	mov	r1, r9
 800427c:	f7fc f9c4 	bl	8000608 <__aeabi_dmul>
 8004280:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004284:	f7fc fc46 	bl	8000b14 <__aeabi_dcmpge>
 8004288:	9e04      	ldr	r6, [sp, #16]
 800428a:	4637      	mov	r7, r6
 800428c:	2800      	cmp	r0, #0
 800428e:	f040 8245 	bne.w	800471c <_dtoa_r+0x954>
 8004292:	9d00      	ldr	r5, [sp, #0]
 8004294:	2331      	movs	r3, #49	; 0x31
 8004296:	f805 3b01 	strb.w	r3, [r5], #1
 800429a:	f10b 0b01 	add.w	fp, fp, #1
 800429e:	e241      	b.n	8004724 <_dtoa_r+0x95c>
 80042a0:	07f2      	lsls	r2, r6, #31
 80042a2:	d505      	bpl.n	80042b0 <_dtoa_r+0x4e8>
 80042a4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80042a8:	f7fc f9ae 	bl	8000608 <__aeabi_dmul>
 80042ac:	3501      	adds	r5, #1
 80042ae:	2301      	movs	r3, #1
 80042b0:	1076      	asrs	r6, r6, #1
 80042b2:	3708      	adds	r7, #8
 80042b4:	e773      	b.n	800419e <_dtoa_r+0x3d6>
 80042b6:	2502      	movs	r5, #2
 80042b8:	e775      	b.n	80041a6 <_dtoa_r+0x3de>
 80042ba:	9e04      	ldr	r6, [sp, #16]
 80042bc:	465f      	mov	r7, fp
 80042be:	e792      	b.n	80041e6 <_dtoa_r+0x41e>
 80042c0:	9900      	ldr	r1, [sp, #0]
 80042c2:	4b50      	ldr	r3, [pc, #320]	; (8004404 <_dtoa_r+0x63c>)
 80042c4:	ed9d 7b02 	vldr	d7, [sp, #8]
 80042c8:	4431      	add	r1, r6
 80042ca:	9102      	str	r1, [sp, #8]
 80042cc:	9909      	ldr	r1, [sp, #36]	; 0x24
 80042ce:	eeb0 9a47 	vmov.f32	s18, s14
 80042d2:	eef0 9a67 	vmov.f32	s19, s15
 80042d6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80042da:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80042de:	2900      	cmp	r1, #0
 80042e0:	d044      	beq.n	800436c <_dtoa_r+0x5a4>
 80042e2:	494e      	ldr	r1, [pc, #312]	; (800441c <_dtoa_r+0x654>)
 80042e4:	2000      	movs	r0, #0
 80042e6:	f7fc fab9 	bl	800085c <__aeabi_ddiv>
 80042ea:	ec53 2b19 	vmov	r2, r3, d9
 80042ee:	f7fb ffd3 	bl	8000298 <__aeabi_dsub>
 80042f2:	9d00      	ldr	r5, [sp, #0]
 80042f4:	ec41 0b19 	vmov	d9, r0, r1
 80042f8:	4649      	mov	r1, r9
 80042fa:	4640      	mov	r0, r8
 80042fc:	f7fc fc34 	bl	8000b68 <__aeabi_d2iz>
 8004300:	4606      	mov	r6, r0
 8004302:	f7fc f917 	bl	8000534 <__aeabi_i2d>
 8004306:	4602      	mov	r2, r0
 8004308:	460b      	mov	r3, r1
 800430a:	4640      	mov	r0, r8
 800430c:	4649      	mov	r1, r9
 800430e:	f7fb ffc3 	bl	8000298 <__aeabi_dsub>
 8004312:	3630      	adds	r6, #48	; 0x30
 8004314:	f805 6b01 	strb.w	r6, [r5], #1
 8004318:	ec53 2b19 	vmov	r2, r3, d9
 800431c:	4680      	mov	r8, r0
 800431e:	4689      	mov	r9, r1
 8004320:	f7fc fbe4 	bl	8000aec <__aeabi_dcmplt>
 8004324:	2800      	cmp	r0, #0
 8004326:	d164      	bne.n	80043f2 <_dtoa_r+0x62a>
 8004328:	4642      	mov	r2, r8
 800432a:	464b      	mov	r3, r9
 800432c:	4937      	ldr	r1, [pc, #220]	; (800440c <_dtoa_r+0x644>)
 800432e:	2000      	movs	r0, #0
 8004330:	f7fb ffb2 	bl	8000298 <__aeabi_dsub>
 8004334:	ec53 2b19 	vmov	r2, r3, d9
 8004338:	f7fc fbd8 	bl	8000aec <__aeabi_dcmplt>
 800433c:	2800      	cmp	r0, #0
 800433e:	f040 80b6 	bne.w	80044ae <_dtoa_r+0x6e6>
 8004342:	9b02      	ldr	r3, [sp, #8]
 8004344:	429d      	cmp	r5, r3
 8004346:	f43f af7c 	beq.w	8004242 <_dtoa_r+0x47a>
 800434a:	4b31      	ldr	r3, [pc, #196]	; (8004410 <_dtoa_r+0x648>)
 800434c:	ec51 0b19 	vmov	r0, r1, d9
 8004350:	2200      	movs	r2, #0
 8004352:	f7fc f959 	bl	8000608 <__aeabi_dmul>
 8004356:	4b2e      	ldr	r3, [pc, #184]	; (8004410 <_dtoa_r+0x648>)
 8004358:	ec41 0b19 	vmov	d9, r0, r1
 800435c:	2200      	movs	r2, #0
 800435e:	4640      	mov	r0, r8
 8004360:	4649      	mov	r1, r9
 8004362:	f7fc f951 	bl	8000608 <__aeabi_dmul>
 8004366:	4680      	mov	r8, r0
 8004368:	4689      	mov	r9, r1
 800436a:	e7c5      	b.n	80042f8 <_dtoa_r+0x530>
 800436c:	ec51 0b17 	vmov	r0, r1, d7
 8004370:	f7fc f94a 	bl	8000608 <__aeabi_dmul>
 8004374:	9b02      	ldr	r3, [sp, #8]
 8004376:	9d00      	ldr	r5, [sp, #0]
 8004378:	930f      	str	r3, [sp, #60]	; 0x3c
 800437a:	ec41 0b19 	vmov	d9, r0, r1
 800437e:	4649      	mov	r1, r9
 8004380:	4640      	mov	r0, r8
 8004382:	f7fc fbf1 	bl	8000b68 <__aeabi_d2iz>
 8004386:	4606      	mov	r6, r0
 8004388:	f7fc f8d4 	bl	8000534 <__aeabi_i2d>
 800438c:	3630      	adds	r6, #48	; 0x30
 800438e:	4602      	mov	r2, r0
 8004390:	460b      	mov	r3, r1
 8004392:	4640      	mov	r0, r8
 8004394:	4649      	mov	r1, r9
 8004396:	f7fb ff7f 	bl	8000298 <__aeabi_dsub>
 800439a:	f805 6b01 	strb.w	r6, [r5], #1
 800439e:	9b02      	ldr	r3, [sp, #8]
 80043a0:	429d      	cmp	r5, r3
 80043a2:	4680      	mov	r8, r0
 80043a4:	4689      	mov	r9, r1
 80043a6:	f04f 0200 	mov.w	r2, #0
 80043aa:	d124      	bne.n	80043f6 <_dtoa_r+0x62e>
 80043ac:	4b1b      	ldr	r3, [pc, #108]	; (800441c <_dtoa_r+0x654>)
 80043ae:	ec51 0b19 	vmov	r0, r1, d9
 80043b2:	f7fb ff73 	bl	800029c <__adddf3>
 80043b6:	4602      	mov	r2, r0
 80043b8:	460b      	mov	r3, r1
 80043ba:	4640      	mov	r0, r8
 80043bc:	4649      	mov	r1, r9
 80043be:	f7fc fbb3 	bl	8000b28 <__aeabi_dcmpgt>
 80043c2:	2800      	cmp	r0, #0
 80043c4:	d173      	bne.n	80044ae <_dtoa_r+0x6e6>
 80043c6:	ec53 2b19 	vmov	r2, r3, d9
 80043ca:	4914      	ldr	r1, [pc, #80]	; (800441c <_dtoa_r+0x654>)
 80043cc:	2000      	movs	r0, #0
 80043ce:	f7fb ff63 	bl	8000298 <__aeabi_dsub>
 80043d2:	4602      	mov	r2, r0
 80043d4:	460b      	mov	r3, r1
 80043d6:	4640      	mov	r0, r8
 80043d8:	4649      	mov	r1, r9
 80043da:	f7fc fb87 	bl	8000aec <__aeabi_dcmplt>
 80043de:	2800      	cmp	r0, #0
 80043e0:	f43f af2f 	beq.w	8004242 <_dtoa_r+0x47a>
 80043e4:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80043e6:	1e6b      	subs	r3, r5, #1
 80043e8:	930f      	str	r3, [sp, #60]	; 0x3c
 80043ea:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80043ee:	2b30      	cmp	r3, #48	; 0x30
 80043f0:	d0f8      	beq.n	80043e4 <_dtoa_r+0x61c>
 80043f2:	46bb      	mov	fp, r7
 80043f4:	e04a      	b.n	800448c <_dtoa_r+0x6c4>
 80043f6:	4b06      	ldr	r3, [pc, #24]	; (8004410 <_dtoa_r+0x648>)
 80043f8:	f7fc f906 	bl	8000608 <__aeabi_dmul>
 80043fc:	4680      	mov	r8, r0
 80043fe:	4689      	mov	r9, r1
 8004400:	e7bd      	b.n	800437e <_dtoa_r+0x5b6>
 8004402:	bf00      	nop
 8004404:	08005ca0 	.word	0x08005ca0
 8004408:	08005c78 	.word	0x08005c78
 800440c:	3ff00000 	.word	0x3ff00000
 8004410:	40240000 	.word	0x40240000
 8004414:	401c0000 	.word	0x401c0000
 8004418:	40140000 	.word	0x40140000
 800441c:	3fe00000 	.word	0x3fe00000
 8004420:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8004424:	9d00      	ldr	r5, [sp, #0]
 8004426:	4642      	mov	r2, r8
 8004428:	464b      	mov	r3, r9
 800442a:	4630      	mov	r0, r6
 800442c:	4639      	mov	r1, r7
 800442e:	f7fc fa15 	bl	800085c <__aeabi_ddiv>
 8004432:	f7fc fb99 	bl	8000b68 <__aeabi_d2iz>
 8004436:	9001      	str	r0, [sp, #4]
 8004438:	f7fc f87c 	bl	8000534 <__aeabi_i2d>
 800443c:	4642      	mov	r2, r8
 800443e:	464b      	mov	r3, r9
 8004440:	f7fc f8e2 	bl	8000608 <__aeabi_dmul>
 8004444:	4602      	mov	r2, r0
 8004446:	460b      	mov	r3, r1
 8004448:	4630      	mov	r0, r6
 800444a:	4639      	mov	r1, r7
 800444c:	f7fb ff24 	bl	8000298 <__aeabi_dsub>
 8004450:	9e01      	ldr	r6, [sp, #4]
 8004452:	9f04      	ldr	r7, [sp, #16]
 8004454:	3630      	adds	r6, #48	; 0x30
 8004456:	f805 6b01 	strb.w	r6, [r5], #1
 800445a:	9e00      	ldr	r6, [sp, #0]
 800445c:	1bae      	subs	r6, r5, r6
 800445e:	42b7      	cmp	r7, r6
 8004460:	4602      	mov	r2, r0
 8004462:	460b      	mov	r3, r1
 8004464:	d134      	bne.n	80044d0 <_dtoa_r+0x708>
 8004466:	f7fb ff19 	bl	800029c <__adddf3>
 800446a:	4642      	mov	r2, r8
 800446c:	464b      	mov	r3, r9
 800446e:	4606      	mov	r6, r0
 8004470:	460f      	mov	r7, r1
 8004472:	f7fc fb59 	bl	8000b28 <__aeabi_dcmpgt>
 8004476:	b9c8      	cbnz	r0, 80044ac <_dtoa_r+0x6e4>
 8004478:	4642      	mov	r2, r8
 800447a:	464b      	mov	r3, r9
 800447c:	4630      	mov	r0, r6
 800447e:	4639      	mov	r1, r7
 8004480:	f7fc fb2a 	bl	8000ad8 <__aeabi_dcmpeq>
 8004484:	b110      	cbz	r0, 800448c <_dtoa_r+0x6c4>
 8004486:	9b01      	ldr	r3, [sp, #4]
 8004488:	07db      	lsls	r3, r3, #31
 800448a:	d40f      	bmi.n	80044ac <_dtoa_r+0x6e4>
 800448c:	4651      	mov	r1, sl
 800448e:	4620      	mov	r0, r4
 8004490:	f000 fbcc 	bl	8004c2c <_Bfree>
 8004494:	2300      	movs	r3, #0
 8004496:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8004498:	702b      	strb	r3, [r5, #0]
 800449a:	f10b 0301 	add.w	r3, fp, #1
 800449e:	6013      	str	r3, [r2, #0]
 80044a0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	f43f ace2 	beq.w	8003e6c <_dtoa_r+0xa4>
 80044a8:	601d      	str	r5, [r3, #0]
 80044aa:	e4df      	b.n	8003e6c <_dtoa_r+0xa4>
 80044ac:	465f      	mov	r7, fp
 80044ae:	462b      	mov	r3, r5
 80044b0:	461d      	mov	r5, r3
 80044b2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80044b6:	2a39      	cmp	r2, #57	; 0x39
 80044b8:	d106      	bne.n	80044c8 <_dtoa_r+0x700>
 80044ba:	9a00      	ldr	r2, [sp, #0]
 80044bc:	429a      	cmp	r2, r3
 80044be:	d1f7      	bne.n	80044b0 <_dtoa_r+0x6e8>
 80044c0:	9900      	ldr	r1, [sp, #0]
 80044c2:	2230      	movs	r2, #48	; 0x30
 80044c4:	3701      	adds	r7, #1
 80044c6:	700a      	strb	r2, [r1, #0]
 80044c8:	781a      	ldrb	r2, [r3, #0]
 80044ca:	3201      	adds	r2, #1
 80044cc:	701a      	strb	r2, [r3, #0]
 80044ce:	e790      	b.n	80043f2 <_dtoa_r+0x62a>
 80044d0:	4ba3      	ldr	r3, [pc, #652]	; (8004760 <_dtoa_r+0x998>)
 80044d2:	2200      	movs	r2, #0
 80044d4:	f7fc f898 	bl	8000608 <__aeabi_dmul>
 80044d8:	2200      	movs	r2, #0
 80044da:	2300      	movs	r3, #0
 80044dc:	4606      	mov	r6, r0
 80044de:	460f      	mov	r7, r1
 80044e0:	f7fc fafa 	bl	8000ad8 <__aeabi_dcmpeq>
 80044e4:	2800      	cmp	r0, #0
 80044e6:	d09e      	beq.n	8004426 <_dtoa_r+0x65e>
 80044e8:	e7d0      	b.n	800448c <_dtoa_r+0x6c4>
 80044ea:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80044ec:	2a00      	cmp	r2, #0
 80044ee:	f000 80ca 	beq.w	8004686 <_dtoa_r+0x8be>
 80044f2:	9a07      	ldr	r2, [sp, #28]
 80044f4:	2a01      	cmp	r2, #1
 80044f6:	f300 80ad 	bgt.w	8004654 <_dtoa_r+0x88c>
 80044fa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80044fc:	2a00      	cmp	r2, #0
 80044fe:	f000 80a5 	beq.w	800464c <_dtoa_r+0x884>
 8004502:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8004506:	9e08      	ldr	r6, [sp, #32]
 8004508:	9d05      	ldr	r5, [sp, #20]
 800450a:	9a05      	ldr	r2, [sp, #20]
 800450c:	441a      	add	r2, r3
 800450e:	9205      	str	r2, [sp, #20]
 8004510:	9a06      	ldr	r2, [sp, #24]
 8004512:	2101      	movs	r1, #1
 8004514:	441a      	add	r2, r3
 8004516:	4620      	mov	r0, r4
 8004518:	9206      	str	r2, [sp, #24]
 800451a:	f000 fc3d 	bl	8004d98 <__i2b>
 800451e:	4607      	mov	r7, r0
 8004520:	b165      	cbz	r5, 800453c <_dtoa_r+0x774>
 8004522:	9b06      	ldr	r3, [sp, #24]
 8004524:	2b00      	cmp	r3, #0
 8004526:	dd09      	ble.n	800453c <_dtoa_r+0x774>
 8004528:	42ab      	cmp	r3, r5
 800452a:	9a05      	ldr	r2, [sp, #20]
 800452c:	bfa8      	it	ge
 800452e:	462b      	movge	r3, r5
 8004530:	1ad2      	subs	r2, r2, r3
 8004532:	9205      	str	r2, [sp, #20]
 8004534:	9a06      	ldr	r2, [sp, #24]
 8004536:	1aed      	subs	r5, r5, r3
 8004538:	1ad3      	subs	r3, r2, r3
 800453a:	9306      	str	r3, [sp, #24]
 800453c:	9b08      	ldr	r3, [sp, #32]
 800453e:	b1f3      	cbz	r3, 800457e <_dtoa_r+0x7b6>
 8004540:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004542:	2b00      	cmp	r3, #0
 8004544:	f000 80a3 	beq.w	800468e <_dtoa_r+0x8c6>
 8004548:	2e00      	cmp	r6, #0
 800454a:	dd10      	ble.n	800456e <_dtoa_r+0x7a6>
 800454c:	4639      	mov	r1, r7
 800454e:	4632      	mov	r2, r6
 8004550:	4620      	mov	r0, r4
 8004552:	f000 fce1 	bl	8004f18 <__pow5mult>
 8004556:	4652      	mov	r2, sl
 8004558:	4601      	mov	r1, r0
 800455a:	4607      	mov	r7, r0
 800455c:	4620      	mov	r0, r4
 800455e:	f000 fc31 	bl	8004dc4 <__multiply>
 8004562:	4651      	mov	r1, sl
 8004564:	4680      	mov	r8, r0
 8004566:	4620      	mov	r0, r4
 8004568:	f000 fb60 	bl	8004c2c <_Bfree>
 800456c:	46c2      	mov	sl, r8
 800456e:	9b08      	ldr	r3, [sp, #32]
 8004570:	1b9a      	subs	r2, r3, r6
 8004572:	d004      	beq.n	800457e <_dtoa_r+0x7b6>
 8004574:	4651      	mov	r1, sl
 8004576:	4620      	mov	r0, r4
 8004578:	f000 fcce 	bl	8004f18 <__pow5mult>
 800457c:	4682      	mov	sl, r0
 800457e:	2101      	movs	r1, #1
 8004580:	4620      	mov	r0, r4
 8004582:	f000 fc09 	bl	8004d98 <__i2b>
 8004586:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004588:	2b00      	cmp	r3, #0
 800458a:	4606      	mov	r6, r0
 800458c:	f340 8081 	ble.w	8004692 <_dtoa_r+0x8ca>
 8004590:	461a      	mov	r2, r3
 8004592:	4601      	mov	r1, r0
 8004594:	4620      	mov	r0, r4
 8004596:	f000 fcbf 	bl	8004f18 <__pow5mult>
 800459a:	9b07      	ldr	r3, [sp, #28]
 800459c:	2b01      	cmp	r3, #1
 800459e:	4606      	mov	r6, r0
 80045a0:	dd7a      	ble.n	8004698 <_dtoa_r+0x8d0>
 80045a2:	f04f 0800 	mov.w	r8, #0
 80045a6:	6933      	ldr	r3, [r6, #16]
 80045a8:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80045ac:	6918      	ldr	r0, [r3, #16]
 80045ae:	f000 fba5 	bl	8004cfc <__hi0bits>
 80045b2:	f1c0 0020 	rsb	r0, r0, #32
 80045b6:	9b06      	ldr	r3, [sp, #24]
 80045b8:	4418      	add	r0, r3
 80045ba:	f010 001f 	ands.w	r0, r0, #31
 80045be:	f000 8094 	beq.w	80046ea <_dtoa_r+0x922>
 80045c2:	f1c0 0320 	rsb	r3, r0, #32
 80045c6:	2b04      	cmp	r3, #4
 80045c8:	f340 8085 	ble.w	80046d6 <_dtoa_r+0x90e>
 80045cc:	9b05      	ldr	r3, [sp, #20]
 80045ce:	f1c0 001c 	rsb	r0, r0, #28
 80045d2:	4403      	add	r3, r0
 80045d4:	9305      	str	r3, [sp, #20]
 80045d6:	9b06      	ldr	r3, [sp, #24]
 80045d8:	4403      	add	r3, r0
 80045da:	4405      	add	r5, r0
 80045dc:	9306      	str	r3, [sp, #24]
 80045de:	9b05      	ldr	r3, [sp, #20]
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	dd05      	ble.n	80045f0 <_dtoa_r+0x828>
 80045e4:	4651      	mov	r1, sl
 80045e6:	461a      	mov	r2, r3
 80045e8:	4620      	mov	r0, r4
 80045ea:	f000 fcef 	bl	8004fcc <__lshift>
 80045ee:	4682      	mov	sl, r0
 80045f0:	9b06      	ldr	r3, [sp, #24]
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	dd05      	ble.n	8004602 <_dtoa_r+0x83a>
 80045f6:	4631      	mov	r1, r6
 80045f8:	461a      	mov	r2, r3
 80045fa:	4620      	mov	r0, r4
 80045fc:	f000 fce6 	bl	8004fcc <__lshift>
 8004600:	4606      	mov	r6, r0
 8004602:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004604:	2b00      	cmp	r3, #0
 8004606:	d072      	beq.n	80046ee <_dtoa_r+0x926>
 8004608:	4631      	mov	r1, r6
 800460a:	4650      	mov	r0, sl
 800460c:	f000 fd4a 	bl	80050a4 <__mcmp>
 8004610:	2800      	cmp	r0, #0
 8004612:	da6c      	bge.n	80046ee <_dtoa_r+0x926>
 8004614:	2300      	movs	r3, #0
 8004616:	4651      	mov	r1, sl
 8004618:	220a      	movs	r2, #10
 800461a:	4620      	mov	r0, r4
 800461c:	f000 fb28 	bl	8004c70 <__multadd>
 8004620:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004622:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8004626:	4682      	mov	sl, r0
 8004628:	2b00      	cmp	r3, #0
 800462a:	f000 81b0 	beq.w	800498e <_dtoa_r+0xbc6>
 800462e:	2300      	movs	r3, #0
 8004630:	4639      	mov	r1, r7
 8004632:	220a      	movs	r2, #10
 8004634:	4620      	mov	r0, r4
 8004636:	f000 fb1b 	bl	8004c70 <__multadd>
 800463a:	9b01      	ldr	r3, [sp, #4]
 800463c:	2b00      	cmp	r3, #0
 800463e:	4607      	mov	r7, r0
 8004640:	f300 8096 	bgt.w	8004770 <_dtoa_r+0x9a8>
 8004644:	9b07      	ldr	r3, [sp, #28]
 8004646:	2b02      	cmp	r3, #2
 8004648:	dc59      	bgt.n	80046fe <_dtoa_r+0x936>
 800464a:	e091      	b.n	8004770 <_dtoa_r+0x9a8>
 800464c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800464e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8004652:	e758      	b.n	8004506 <_dtoa_r+0x73e>
 8004654:	9b04      	ldr	r3, [sp, #16]
 8004656:	1e5e      	subs	r6, r3, #1
 8004658:	9b08      	ldr	r3, [sp, #32]
 800465a:	42b3      	cmp	r3, r6
 800465c:	bfbf      	itttt	lt
 800465e:	9b08      	ldrlt	r3, [sp, #32]
 8004660:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 8004662:	9608      	strlt	r6, [sp, #32]
 8004664:	1af3      	sublt	r3, r6, r3
 8004666:	bfb4      	ite	lt
 8004668:	18d2      	addlt	r2, r2, r3
 800466a:	1b9e      	subge	r6, r3, r6
 800466c:	9b04      	ldr	r3, [sp, #16]
 800466e:	bfbc      	itt	lt
 8004670:	920b      	strlt	r2, [sp, #44]	; 0x2c
 8004672:	2600      	movlt	r6, #0
 8004674:	2b00      	cmp	r3, #0
 8004676:	bfb7      	itett	lt
 8004678:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800467c:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8004680:	1a9d      	sublt	r5, r3, r2
 8004682:	2300      	movlt	r3, #0
 8004684:	e741      	b.n	800450a <_dtoa_r+0x742>
 8004686:	9e08      	ldr	r6, [sp, #32]
 8004688:	9d05      	ldr	r5, [sp, #20]
 800468a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800468c:	e748      	b.n	8004520 <_dtoa_r+0x758>
 800468e:	9a08      	ldr	r2, [sp, #32]
 8004690:	e770      	b.n	8004574 <_dtoa_r+0x7ac>
 8004692:	9b07      	ldr	r3, [sp, #28]
 8004694:	2b01      	cmp	r3, #1
 8004696:	dc19      	bgt.n	80046cc <_dtoa_r+0x904>
 8004698:	9b02      	ldr	r3, [sp, #8]
 800469a:	b9bb      	cbnz	r3, 80046cc <_dtoa_r+0x904>
 800469c:	9b03      	ldr	r3, [sp, #12]
 800469e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80046a2:	b99b      	cbnz	r3, 80046cc <_dtoa_r+0x904>
 80046a4:	9b03      	ldr	r3, [sp, #12]
 80046a6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80046aa:	0d1b      	lsrs	r3, r3, #20
 80046ac:	051b      	lsls	r3, r3, #20
 80046ae:	b183      	cbz	r3, 80046d2 <_dtoa_r+0x90a>
 80046b0:	9b05      	ldr	r3, [sp, #20]
 80046b2:	3301      	adds	r3, #1
 80046b4:	9305      	str	r3, [sp, #20]
 80046b6:	9b06      	ldr	r3, [sp, #24]
 80046b8:	3301      	adds	r3, #1
 80046ba:	9306      	str	r3, [sp, #24]
 80046bc:	f04f 0801 	mov.w	r8, #1
 80046c0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	f47f af6f 	bne.w	80045a6 <_dtoa_r+0x7de>
 80046c8:	2001      	movs	r0, #1
 80046ca:	e774      	b.n	80045b6 <_dtoa_r+0x7ee>
 80046cc:	f04f 0800 	mov.w	r8, #0
 80046d0:	e7f6      	b.n	80046c0 <_dtoa_r+0x8f8>
 80046d2:	4698      	mov	r8, r3
 80046d4:	e7f4      	b.n	80046c0 <_dtoa_r+0x8f8>
 80046d6:	d082      	beq.n	80045de <_dtoa_r+0x816>
 80046d8:	9a05      	ldr	r2, [sp, #20]
 80046da:	331c      	adds	r3, #28
 80046dc:	441a      	add	r2, r3
 80046de:	9205      	str	r2, [sp, #20]
 80046e0:	9a06      	ldr	r2, [sp, #24]
 80046e2:	441a      	add	r2, r3
 80046e4:	441d      	add	r5, r3
 80046e6:	9206      	str	r2, [sp, #24]
 80046e8:	e779      	b.n	80045de <_dtoa_r+0x816>
 80046ea:	4603      	mov	r3, r0
 80046ec:	e7f4      	b.n	80046d8 <_dtoa_r+0x910>
 80046ee:	9b04      	ldr	r3, [sp, #16]
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	dc37      	bgt.n	8004764 <_dtoa_r+0x99c>
 80046f4:	9b07      	ldr	r3, [sp, #28]
 80046f6:	2b02      	cmp	r3, #2
 80046f8:	dd34      	ble.n	8004764 <_dtoa_r+0x99c>
 80046fa:	9b04      	ldr	r3, [sp, #16]
 80046fc:	9301      	str	r3, [sp, #4]
 80046fe:	9b01      	ldr	r3, [sp, #4]
 8004700:	b963      	cbnz	r3, 800471c <_dtoa_r+0x954>
 8004702:	4631      	mov	r1, r6
 8004704:	2205      	movs	r2, #5
 8004706:	4620      	mov	r0, r4
 8004708:	f000 fab2 	bl	8004c70 <__multadd>
 800470c:	4601      	mov	r1, r0
 800470e:	4606      	mov	r6, r0
 8004710:	4650      	mov	r0, sl
 8004712:	f000 fcc7 	bl	80050a4 <__mcmp>
 8004716:	2800      	cmp	r0, #0
 8004718:	f73f adbb 	bgt.w	8004292 <_dtoa_r+0x4ca>
 800471c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800471e:	9d00      	ldr	r5, [sp, #0]
 8004720:	ea6f 0b03 	mvn.w	fp, r3
 8004724:	f04f 0800 	mov.w	r8, #0
 8004728:	4631      	mov	r1, r6
 800472a:	4620      	mov	r0, r4
 800472c:	f000 fa7e 	bl	8004c2c <_Bfree>
 8004730:	2f00      	cmp	r7, #0
 8004732:	f43f aeab 	beq.w	800448c <_dtoa_r+0x6c4>
 8004736:	f1b8 0f00 	cmp.w	r8, #0
 800473a:	d005      	beq.n	8004748 <_dtoa_r+0x980>
 800473c:	45b8      	cmp	r8, r7
 800473e:	d003      	beq.n	8004748 <_dtoa_r+0x980>
 8004740:	4641      	mov	r1, r8
 8004742:	4620      	mov	r0, r4
 8004744:	f000 fa72 	bl	8004c2c <_Bfree>
 8004748:	4639      	mov	r1, r7
 800474a:	4620      	mov	r0, r4
 800474c:	f000 fa6e 	bl	8004c2c <_Bfree>
 8004750:	e69c      	b.n	800448c <_dtoa_r+0x6c4>
 8004752:	2600      	movs	r6, #0
 8004754:	4637      	mov	r7, r6
 8004756:	e7e1      	b.n	800471c <_dtoa_r+0x954>
 8004758:	46bb      	mov	fp, r7
 800475a:	4637      	mov	r7, r6
 800475c:	e599      	b.n	8004292 <_dtoa_r+0x4ca>
 800475e:	bf00      	nop
 8004760:	40240000 	.word	0x40240000
 8004764:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004766:	2b00      	cmp	r3, #0
 8004768:	f000 80c8 	beq.w	80048fc <_dtoa_r+0xb34>
 800476c:	9b04      	ldr	r3, [sp, #16]
 800476e:	9301      	str	r3, [sp, #4]
 8004770:	2d00      	cmp	r5, #0
 8004772:	dd05      	ble.n	8004780 <_dtoa_r+0x9b8>
 8004774:	4639      	mov	r1, r7
 8004776:	462a      	mov	r2, r5
 8004778:	4620      	mov	r0, r4
 800477a:	f000 fc27 	bl	8004fcc <__lshift>
 800477e:	4607      	mov	r7, r0
 8004780:	f1b8 0f00 	cmp.w	r8, #0
 8004784:	d05b      	beq.n	800483e <_dtoa_r+0xa76>
 8004786:	6879      	ldr	r1, [r7, #4]
 8004788:	4620      	mov	r0, r4
 800478a:	f000 fa0f 	bl	8004bac <_Balloc>
 800478e:	4605      	mov	r5, r0
 8004790:	b928      	cbnz	r0, 800479e <_dtoa_r+0x9d6>
 8004792:	4b83      	ldr	r3, [pc, #524]	; (80049a0 <_dtoa_r+0xbd8>)
 8004794:	4602      	mov	r2, r0
 8004796:	f240 21ef 	movw	r1, #751	; 0x2ef
 800479a:	f7ff bb2e 	b.w	8003dfa <_dtoa_r+0x32>
 800479e:	693a      	ldr	r2, [r7, #16]
 80047a0:	3202      	adds	r2, #2
 80047a2:	0092      	lsls	r2, r2, #2
 80047a4:	f107 010c 	add.w	r1, r7, #12
 80047a8:	300c      	adds	r0, #12
 80047aa:	f001 f847 	bl	800583c <memcpy>
 80047ae:	2201      	movs	r2, #1
 80047b0:	4629      	mov	r1, r5
 80047b2:	4620      	mov	r0, r4
 80047b4:	f000 fc0a 	bl	8004fcc <__lshift>
 80047b8:	9b00      	ldr	r3, [sp, #0]
 80047ba:	3301      	adds	r3, #1
 80047bc:	9304      	str	r3, [sp, #16]
 80047be:	e9dd 2300 	ldrd	r2, r3, [sp]
 80047c2:	4413      	add	r3, r2
 80047c4:	9308      	str	r3, [sp, #32]
 80047c6:	9b02      	ldr	r3, [sp, #8]
 80047c8:	f003 0301 	and.w	r3, r3, #1
 80047cc:	46b8      	mov	r8, r7
 80047ce:	9306      	str	r3, [sp, #24]
 80047d0:	4607      	mov	r7, r0
 80047d2:	9b04      	ldr	r3, [sp, #16]
 80047d4:	4631      	mov	r1, r6
 80047d6:	3b01      	subs	r3, #1
 80047d8:	4650      	mov	r0, sl
 80047da:	9301      	str	r3, [sp, #4]
 80047dc:	f7ff fa6b 	bl	8003cb6 <quorem>
 80047e0:	4641      	mov	r1, r8
 80047e2:	9002      	str	r0, [sp, #8]
 80047e4:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80047e8:	4650      	mov	r0, sl
 80047ea:	f000 fc5b 	bl	80050a4 <__mcmp>
 80047ee:	463a      	mov	r2, r7
 80047f0:	9005      	str	r0, [sp, #20]
 80047f2:	4631      	mov	r1, r6
 80047f4:	4620      	mov	r0, r4
 80047f6:	f000 fc71 	bl	80050dc <__mdiff>
 80047fa:	68c2      	ldr	r2, [r0, #12]
 80047fc:	4605      	mov	r5, r0
 80047fe:	bb02      	cbnz	r2, 8004842 <_dtoa_r+0xa7a>
 8004800:	4601      	mov	r1, r0
 8004802:	4650      	mov	r0, sl
 8004804:	f000 fc4e 	bl	80050a4 <__mcmp>
 8004808:	4602      	mov	r2, r0
 800480a:	4629      	mov	r1, r5
 800480c:	4620      	mov	r0, r4
 800480e:	9209      	str	r2, [sp, #36]	; 0x24
 8004810:	f000 fa0c 	bl	8004c2c <_Bfree>
 8004814:	9b07      	ldr	r3, [sp, #28]
 8004816:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004818:	9d04      	ldr	r5, [sp, #16]
 800481a:	ea43 0102 	orr.w	r1, r3, r2
 800481e:	9b06      	ldr	r3, [sp, #24]
 8004820:	4319      	orrs	r1, r3
 8004822:	d110      	bne.n	8004846 <_dtoa_r+0xa7e>
 8004824:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8004828:	d029      	beq.n	800487e <_dtoa_r+0xab6>
 800482a:	9b05      	ldr	r3, [sp, #20]
 800482c:	2b00      	cmp	r3, #0
 800482e:	dd02      	ble.n	8004836 <_dtoa_r+0xa6e>
 8004830:	9b02      	ldr	r3, [sp, #8]
 8004832:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8004836:	9b01      	ldr	r3, [sp, #4]
 8004838:	f883 9000 	strb.w	r9, [r3]
 800483c:	e774      	b.n	8004728 <_dtoa_r+0x960>
 800483e:	4638      	mov	r0, r7
 8004840:	e7ba      	b.n	80047b8 <_dtoa_r+0x9f0>
 8004842:	2201      	movs	r2, #1
 8004844:	e7e1      	b.n	800480a <_dtoa_r+0xa42>
 8004846:	9b05      	ldr	r3, [sp, #20]
 8004848:	2b00      	cmp	r3, #0
 800484a:	db04      	blt.n	8004856 <_dtoa_r+0xa8e>
 800484c:	9907      	ldr	r1, [sp, #28]
 800484e:	430b      	orrs	r3, r1
 8004850:	9906      	ldr	r1, [sp, #24]
 8004852:	430b      	orrs	r3, r1
 8004854:	d120      	bne.n	8004898 <_dtoa_r+0xad0>
 8004856:	2a00      	cmp	r2, #0
 8004858:	dded      	ble.n	8004836 <_dtoa_r+0xa6e>
 800485a:	4651      	mov	r1, sl
 800485c:	2201      	movs	r2, #1
 800485e:	4620      	mov	r0, r4
 8004860:	f000 fbb4 	bl	8004fcc <__lshift>
 8004864:	4631      	mov	r1, r6
 8004866:	4682      	mov	sl, r0
 8004868:	f000 fc1c 	bl	80050a4 <__mcmp>
 800486c:	2800      	cmp	r0, #0
 800486e:	dc03      	bgt.n	8004878 <_dtoa_r+0xab0>
 8004870:	d1e1      	bne.n	8004836 <_dtoa_r+0xa6e>
 8004872:	f019 0f01 	tst.w	r9, #1
 8004876:	d0de      	beq.n	8004836 <_dtoa_r+0xa6e>
 8004878:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800487c:	d1d8      	bne.n	8004830 <_dtoa_r+0xa68>
 800487e:	9a01      	ldr	r2, [sp, #4]
 8004880:	2339      	movs	r3, #57	; 0x39
 8004882:	7013      	strb	r3, [r2, #0]
 8004884:	462b      	mov	r3, r5
 8004886:	461d      	mov	r5, r3
 8004888:	3b01      	subs	r3, #1
 800488a:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800488e:	2a39      	cmp	r2, #57	; 0x39
 8004890:	d06c      	beq.n	800496c <_dtoa_r+0xba4>
 8004892:	3201      	adds	r2, #1
 8004894:	701a      	strb	r2, [r3, #0]
 8004896:	e747      	b.n	8004728 <_dtoa_r+0x960>
 8004898:	2a00      	cmp	r2, #0
 800489a:	dd07      	ble.n	80048ac <_dtoa_r+0xae4>
 800489c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80048a0:	d0ed      	beq.n	800487e <_dtoa_r+0xab6>
 80048a2:	9a01      	ldr	r2, [sp, #4]
 80048a4:	f109 0301 	add.w	r3, r9, #1
 80048a8:	7013      	strb	r3, [r2, #0]
 80048aa:	e73d      	b.n	8004728 <_dtoa_r+0x960>
 80048ac:	9b04      	ldr	r3, [sp, #16]
 80048ae:	9a08      	ldr	r2, [sp, #32]
 80048b0:	f803 9c01 	strb.w	r9, [r3, #-1]
 80048b4:	4293      	cmp	r3, r2
 80048b6:	d043      	beq.n	8004940 <_dtoa_r+0xb78>
 80048b8:	4651      	mov	r1, sl
 80048ba:	2300      	movs	r3, #0
 80048bc:	220a      	movs	r2, #10
 80048be:	4620      	mov	r0, r4
 80048c0:	f000 f9d6 	bl	8004c70 <__multadd>
 80048c4:	45b8      	cmp	r8, r7
 80048c6:	4682      	mov	sl, r0
 80048c8:	f04f 0300 	mov.w	r3, #0
 80048cc:	f04f 020a 	mov.w	r2, #10
 80048d0:	4641      	mov	r1, r8
 80048d2:	4620      	mov	r0, r4
 80048d4:	d107      	bne.n	80048e6 <_dtoa_r+0xb1e>
 80048d6:	f000 f9cb 	bl	8004c70 <__multadd>
 80048da:	4680      	mov	r8, r0
 80048dc:	4607      	mov	r7, r0
 80048de:	9b04      	ldr	r3, [sp, #16]
 80048e0:	3301      	adds	r3, #1
 80048e2:	9304      	str	r3, [sp, #16]
 80048e4:	e775      	b.n	80047d2 <_dtoa_r+0xa0a>
 80048e6:	f000 f9c3 	bl	8004c70 <__multadd>
 80048ea:	4639      	mov	r1, r7
 80048ec:	4680      	mov	r8, r0
 80048ee:	2300      	movs	r3, #0
 80048f0:	220a      	movs	r2, #10
 80048f2:	4620      	mov	r0, r4
 80048f4:	f000 f9bc 	bl	8004c70 <__multadd>
 80048f8:	4607      	mov	r7, r0
 80048fa:	e7f0      	b.n	80048de <_dtoa_r+0xb16>
 80048fc:	9b04      	ldr	r3, [sp, #16]
 80048fe:	9301      	str	r3, [sp, #4]
 8004900:	9d00      	ldr	r5, [sp, #0]
 8004902:	4631      	mov	r1, r6
 8004904:	4650      	mov	r0, sl
 8004906:	f7ff f9d6 	bl	8003cb6 <quorem>
 800490a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800490e:	9b00      	ldr	r3, [sp, #0]
 8004910:	f805 9b01 	strb.w	r9, [r5], #1
 8004914:	1aea      	subs	r2, r5, r3
 8004916:	9b01      	ldr	r3, [sp, #4]
 8004918:	4293      	cmp	r3, r2
 800491a:	dd07      	ble.n	800492c <_dtoa_r+0xb64>
 800491c:	4651      	mov	r1, sl
 800491e:	2300      	movs	r3, #0
 8004920:	220a      	movs	r2, #10
 8004922:	4620      	mov	r0, r4
 8004924:	f000 f9a4 	bl	8004c70 <__multadd>
 8004928:	4682      	mov	sl, r0
 800492a:	e7ea      	b.n	8004902 <_dtoa_r+0xb3a>
 800492c:	9b01      	ldr	r3, [sp, #4]
 800492e:	2b00      	cmp	r3, #0
 8004930:	bfc8      	it	gt
 8004932:	461d      	movgt	r5, r3
 8004934:	9b00      	ldr	r3, [sp, #0]
 8004936:	bfd8      	it	le
 8004938:	2501      	movle	r5, #1
 800493a:	441d      	add	r5, r3
 800493c:	f04f 0800 	mov.w	r8, #0
 8004940:	4651      	mov	r1, sl
 8004942:	2201      	movs	r2, #1
 8004944:	4620      	mov	r0, r4
 8004946:	f000 fb41 	bl	8004fcc <__lshift>
 800494a:	4631      	mov	r1, r6
 800494c:	4682      	mov	sl, r0
 800494e:	f000 fba9 	bl	80050a4 <__mcmp>
 8004952:	2800      	cmp	r0, #0
 8004954:	dc96      	bgt.n	8004884 <_dtoa_r+0xabc>
 8004956:	d102      	bne.n	800495e <_dtoa_r+0xb96>
 8004958:	f019 0f01 	tst.w	r9, #1
 800495c:	d192      	bne.n	8004884 <_dtoa_r+0xabc>
 800495e:	462b      	mov	r3, r5
 8004960:	461d      	mov	r5, r3
 8004962:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8004966:	2a30      	cmp	r2, #48	; 0x30
 8004968:	d0fa      	beq.n	8004960 <_dtoa_r+0xb98>
 800496a:	e6dd      	b.n	8004728 <_dtoa_r+0x960>
 800496c:	9a00      	ldr	r2, [sp, #0]
 800496e:	429a      	cmp	r2, r3
 8004970:	d189      	bne.n	8004886 <_dtoa_r+0xabe>
 8004972:	f10b 0b01 	add.w	fp, fp, #1
 8004976:	2331      	movs	r3, #49	; 0x31
 8004978:	e796      	b.n	80048a8 <_dtoa_r+0xae0>
 800497a:	4b0a      	ldr	r3, [pc, #40]	; (80049a4 <_dtoa_r+0xbdc>)
 800497c:	f7ff ba99 	b.w	8003eb2 <_dtoa_r+0xea>
 8004980:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004982:	2b00      	cmp	r3, #0
 8004984:	f47f aa6d 	bne.w	8003e62 <_dtoa_r+0x9a>
 8004988:	4b07      	ldr	r3, [pc, #28]	; (80049a8 <_dtoa_r+0xbe0>)
 800498a:	f7ff ba92 	b.w	8003eb2 <_dtoa_r+0xea>
 800498e:	9b01      	ldr	r3, [sp, #4]
 8004990:	2b00      	cmp	r3, #0
 8004992:	dcb5      	bgt.n	8004900 <_dtoa_r+0xb38>
 8004994:	9b07      	ldr	r3, [sp, #28]
 8004996:	2b02      	cmp	r3, #2
 8004998:	f73f aeb1 	bgt.w	80046fe <_dtoa_r+0x936>
 800499c:	e7b0      	b.n	8004900 <_dtoa_r+0xb38>
 800499e:	bf00      	nop
 80049a0:	08005c0c 	.word	0x08005c0c
 80049a4:	08005b6c 	.word	0x08005b6c
 80049a8:	08005b90 	.word	0x08005b90

080049ac <_free_r>:
 80049ac:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80049ae:	2900      	cmp	r1, #0
 80049b0:	d044      	beq.n	8004a3c <_free_r+0x90>
 80049b2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80049b6:	9001      	str	r0, [sp, #4]
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	f1a1 0404 	sub.w	r4, r1, #4
 80049be:	bfb8      	it	lt
 80049c0:	18e4      	addlt	r4, r4, r3
 80049c2:	f000 f8e7 	bl	8004b94 <__malloc_lock>
 80049c6:	4a1e      	ldr	r2, [pc, #120]	; (8004a40 <_free_r+0x94>)
 80049c8:	9801      	ldr	r0, [sp, #4]
 80049ca:	6813      	ldr	r3, [r2, #0]
 80049cc:	b933      	cbnz	r3, 80049dc <_free_r+0x30>
 80049ce:	6063      	str	r3, [r4, #4]
 80049d0:	6014      	str	r4, [r2, #0]
 80049d2:	b003      	add	sp, #12
 80049d4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80049d8:	f000 b8e2 	b.w	8004ba0 <__malloc_unlock>
 80049dc:	42a3      	cmp	r3, r4
 80049de:	d908      	bls.n	80049f2 <_free_r+0x46>
 80049e0:	6825      	ldr	r5, [r4, #0]
 80049e2:	1961      	adds	r1, r4, r5
 80049e4:	428b      	cmp	r3, r1
 80049e6:	bf01      	itttt	eq
 80049e8:	6819      	ldreq	r1, [r3, #0]
 80049ea:	685b      	ldreq	r3, [r3, #4]
 80049ec:	1949      	addeq	r1, r1, r5
 80049ee:	6021      	streq	r1, [r4, #0]
 80049f0:	e7ed      	b.n	80049ce <_free_r+0x22>
 80049f2:	461a      	mov	r2, r3
 80049f4:	685b      	ldr	r3, [r3, #4]
 80049f6:	b10b      	cbz	r3, 80049fc <_free_r+0x50>
 80049f8:	42a3      	cmp	r3, r4
 80049fa:	d9fa      	bls.n	80049f2 <_free_r+0x46>
 80049fc:	6811      	ldr	r1, [r2, #0]
 80049fe:	1855      	adds	r5, r2, r1
 8004a00:	42a5      	cmp	r5, r4
 8004a02:	d10b      	bne.n	8004a1c <_free_r+0x70>
 8004a04:	6824      	ldr	r4, [r4, #0]
 8004a06:	4421      	add	r1, r4
 8004a08:	1854      	adds	r4, r2, r1
 8004a0a:	42a3      	cmp	r3, r4
 8004a0c:	6011      	str	r1, [r2, #0]
 8004a0e:	d1e0      	bne.n	80049d2 <_free_r+0x26>
 8004a10:	681c      	ldr	r4, [r3, #0]
 8004a12:	685b      	ldr	r3, [r3, #4]
 8004a14:	6053      	str	r3, [r2, #4]
 8004a16:	440c      	add	r4, r1
 8004a18:	6014      	str	r4, [r2, #0]
 8004a1a:	e7da      	b.n	80049d2 <_free_r+0x26>
 8004a1c:	d902      	bls.n	8004a24 <_free_r+0x78>
 8004a1e:	230c      	movs	r3, #12
 8004a20:	6003      	str	r3, [r0, #0]
 8004a22:	e7d6      	b.n	80049d2 <_free_r+0x26>
 8004a24:	6825      	ldr	r5, [r4, #0]
 8004a26:	1961      	adds	r1, r4, r5
 8004a28:	428b      	cmp	r3, r1
 8004a2a:	bf04      	itt	eq
 8004a2c:	6819      	ldreq	r1, [r3, #0]
 8004a2e:	685b      	ldreq	r3, [r3, #4]
 8004a30:	6063      	str	r3, [r4, #4]
 8004a32:	bf04      	itt	eq
 8004a34:	1949      	addeq	r1, r1, r5
 8004a36:	6021      	streq	r1, [r4, #0]
 8004a38:	6054      	str	r4, [r2, #4]
 8004a3a:	e7ca      	b.n	80049d2 <_free_r+0x26>
 8004a3c:	b003      	add	sp, #12
 8004a3e:	bd30      	pop	{r4, r5, pc}
 8004a40:	2000052c 	.word	0x2000052c

08004a44 <malloc>:
 8004a44:	4b02      	ldr	r3, [pc, #8]	; (8004a50 <malloc+0xc>)
 8004a46:	4601      	mov	r1, r0
 8004a48:	6818      	ldr	r0, [r3, #0]
 8004a4a:	f000 b823 	b.w	8004a94 <_malloc_r>
 8004a4e:	bf00      	nop
 8004a50:	2000016c 	.word	0x2000016c

08004a54 <sbrk_aligned>:
 8004a54:	b570      	push	{r4, r5, r6, lr}
 8004a56:	4e0e      	ldr	r6, [pc, #56]	; (8004a90 <sbrk_aligned+0x3c>)
 8004a58:	460c      	mov	r4, r1
 8004a5a:	6831      	ldr	r1, [r6, #0]
 8004a5c:	4605      	mov	r5, r0
 8004a5e:	b911      	cbnz	r1, 8004a66 <sbrk_aligned+0x12>
 8004a60:	f000 fedc 	bl	800581c <_sbrk_r>
 8004a64:	6030      	str	r0, [r6, #0]
 8004a66:	4621      	mov	r1, r4
 8004a68:	4628      	mov	r0, r5
 8004a6a:	f000 fed7 	bl	800581c <_sbrk_r>
 8004a6e:	1c43      	adds	r3, r0, #1
 8004a70:	d00a      	beq.n	8004a88 <sbrk_aligned+0x34>
 8004a72:	1cc4      	adds	r4, r0, #3
 8004a74:	f024 0403 	bic.w	r4, r4, #3
 8004a78:	42a0      	cmp	r0, r4
 8004a7a:	d007      	beq.n	8004a8c <sbrk_aligned+0x38>
 8004a7c:	1a21      	subs	r1, r4, r0
 8004a7e:	4628      	mov	r0, r5
 8004a80:	f000 fecc 	bl	800581c <_sbrk_r>
 8004a84:	3001      	adds	r0, #1
 8004a86:	d101      	bne.n	8004a8c <sbrk_aligned+0x38>
 8004a88:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8004a8c:	4620      	mov	r0, r4
 8004a8e:	bd70      	pop	{r4, r5, r6, pc}
 8004a90:	20000530 	.word	0x20000530

08004a94 <_malloc_r>:
 8004a94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004a98:	1ccd      	adds	r5, r1, #3
 8004a9a:	f025 0503 	bic.w	r5, r5, #3
 8004a9e:	3508      	adds	r5, #8
 8004aa0:	2d0c      	cmp	r5, #12
 8004aa2:	bf38      	it	cc
 8004aa4:	250c      	movcc	r5, #12
 8004aa6:	2d00      	cmp	r5, #0
 8004aa8:	4607      	mov	r7, r0
 8004aaa:	db01      	blt.n	8004ab0 <_malloc_r+0x1c>
 8004aac:	42a9      	cmp	r1, r5
 8004aae:	d905      	bls.n	8004abc <_malloc_r+0x28>
 8004ab0:	230c      	movs	r3, #12
 8004ab2:	603b      	str	r3, [r7, #0]
 8004ab4:	2600      	movs	r6, #0
 8004ab6:	4630      	mov	r0, r6
 8004ab8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004abc:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8004b90 <_malloc_r+0xfc>
 8004ac0:	f000 f868 	bl	8004b94 <__malloc_lock>
 8004ac4:	f8d8 3000 	ldr.w	r3, [r8]
 8004ac8:	461c      	mov	r4, r3
 8004aca:	bb5c      	cbnz	r4, 8004b24 <_malloc_r+0x90>
 8004acc:	4629      	mov	r1, r5
 8004ace:	4638      	mov	r0, r7
 8004ad0:	f7ff ffc0 	bl	8004a54 <sbrk_aligned>
 8004ad4:	1c43      	adds	r3, r0, #1
 8004ad6:	4604      	mov	r4, r0
 8004ad8:	d155      	bne.n	8004b86 <_malloc_r+0xf2>
 8004ada:	f8d8 4000 	ldr.w	r4, [r8]
 8004ade:	4626      	mov	r6, r4
 8004ae0:	2e00      	cmp	r6, #0
 8004ae2:	d145      	bne.n	8004b70 <_malloc_r+0xdc>
 8004ae4:	2c00      	cmp	r4, #0
 8004ae6:	d048      	beq.n	8004b7a <_malloc_r+0xe6>
 8004ae8:	6823      	ldr	r3, [r4, #0]
 8004aea:	4631      	mov	r1, r6
 8004aec:	4638      	mov	r0, r7
 8004aee:	eb04 0903 	add.w	r9, r4, r3
 8004af2:	f000 fe93 	bl	800581c <_sbrk_r>
 8004af6:	4581      	cmp	r9, r0
 8004af8:	d13f      	bne.n	8004b7a <_malloc_r+0xe6>
 8004afa:	6821      	ldr	r1, [r4, #0]
 8004afc:	1a6d      	subs	r5, r5, r1
 8004afe:	4629      	mov	r1, r5
 8004b00:	4638      	mov	r0, r7
 8004b02:	f7ff ffa7 	bl	8004a54 <sbrk_aligned>
 8004b06:	3001      	adds	r0, #1
 8004b08:	d037      	beq.n	8004b7a <_malloc_r+0xe6>
 8004b0a:	6823      	ldr	r3, [r4, #0]
 8004b0c:	442b      	add	r3, r5
 8004b0e:	6023      	str	r3, [r4, #0]
 8004b10:	f8d8 3000 	ldr.w	r3, [r8]
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d038      	beq.n	8004b8a <_malloc_r+0xf6>
 8004b18:	685a      	ldr	r2, [r3, #4]
 8004b1a:	42a2      	cmp	r2, r4
 8004b1c:	d12b      	bne.n	8004b76 <_malloc_r+0xe2>
 8004b1e:	2200      	movs	r2, #0
 8004b20:	605a      	str	r2, [r3, #4]
 8004b22:	e00f      	b.n	8004b44 <_malloc_r+0xb0>
 8004b24:	6822      	ldr	r2, [r4, #0]
 8004b26:	1b52      	subs	r2, r2, r5
 8004b28:	d41f      	bmi.n	8004b6a <_malloc_r+0xd6>
 8004b2a:	2a0b      	cmp	r2, #11
 8004b2c:	d917      	bls.n	8004b5e <_malloc_r+0xca>
 8004b2e:	1961      	adds	r1, r4, r5
 8004b30:	42a3      	cmp	r3, r4
 8004b32:	6025      	str	r5, [r4, #0]
 8004b34:	bf18      	it	ne
 8004b36:	6059      	strne	r1, [r3, #4]
 8004b38:	6863      	ldr	r3, [r4, #4]
 8004b3a:	bf08      	it	eq
 8004b3c:	f8c8 1000 	streq.w	r1, [r8]
 8004b40:	5162      	str	r2, [r4, r5]
 8004b42:	604b      	str	r3, [r1, #4]
 8004b44:	4638      	mov	r0, r7
 8004b46:	f104 060b 	add.w	r6, r4, #11
 8004b4a:	f000 f829 	bl	8004ba0 <__malloc_unlock>
 8004b4e:	f026 0607 	bic.w	r6, r6, #7
 8004b52:	1d23      	adds	r3, r4, #4
 8004b54:	1af2      	subs	r2, r6, r3
 8004b56:	d0ae      	beq.n	8004ab6 <_malloc_r+0x22>
 8004b58:	1b9b      	subs	r3, r3, r6
 8004b5a:	50a3      	str	r3, [r4, r2]
 8004b5c:	e7ab      	b.n	8004ab6 <_malloc_r+0x22>
 8004b5e:	42a3      	cmp	r3, r4
 8004b60:	6862      	ldr	r2, [r4, #4]
 8004b62:	d1dd      	bne.n	8004b20 <_malloc_r+0x8c>
 8004b64:	f8c8 2000 	str.w	r2, [r8]
 8004b68:	e7ec      	b.n	8004b44 <_malloc_r+0xb0>
 8004b6a:	4623      	mov	r3, r4
 8004b6c:	6864      	ldr	r4, [r4, #4]
 8004b6e:	e7ac      	b.n	8004aca <_malloc_r+0x36>
 8004b70:	4634      	mov	r4, r6
 8004b72:	6876      	ldr	r6, [r6, #4]
 8004b74:	e7b4      	b.n	8004ae0 <_malloc_r+0x4c>
 8004b76:	4613      	mov	r3, r2
 8004b78:	e7cc      	b.n	8004b14 <_malloc_r+0x80>
 8004b7a:	230c      	movs	r3, #12
 8004b7c:	603b      	str	r3, [r7, #0]
 8004b7e:	4638      	mov	r0, r7
 8004b80:	f000 f80e 	bl	8004ba0 <__malloc_unlock>
 8004b84:	e797      	b.n	8004ab6 <_malloc_r+0x22>
 8004b86:	6025      	str	r5, [r4, #0]
 8004b88:	e7dc      	b.n	8004b44 <_malloc_r+0xb0>
 8004b8a:	605b      	str	r3, [r3, #4]
 8004b8c:	deff      	udf	#255	; 0xff
 8004b8e:	bf00      	nop
 8004b90:	2000052c 	.word	0x2000052c

08004b94 <__malloc_lock>:
 8004b94:	4801      	ldr	r0, [pc, #4]	; (8004b9c <__malloc_lock+0x8>)
 8004b96:	f7ff b88c 	b.w	8003cb2 <__retarget_lock_acquire_recursive>
 8004b9a:	bf00      	nop
 8004b9c:	20000528 	.word	0x20000528

08004ba0 <__malloc_unlock>:
 8004ba0:	4801      	ldr	r0, [pc, #4]	; (8004ba8 <__malloc_unlock+0x8>)
 8004ba2:	f7ff b887 	b.w	8003cb4 <__retarget_lock_release_recursive>
 8004ba6:	bf00      	nop
 8004ba8:	20000528 	.word	0x20000528

08004bac <_Balloc>:
 8004bac:	b570      	push	{r4, r5, r6, lr}
 8004bae:	69c6      	ldr	r6, [r0, #28]
 8004bb0:	4604      	mov	r4, r0
 8004bb2:	460d      	mov	r5, r1
 8004bb4:	b976      	cbnz	r6, 8004bd4 <_Balloc+0x28>
 8004bb6:	2010      	movs	r0, #16
 8004bb8:	f7ff ff44 	bl	8004a44 <malloc>
 8004bbc:	4602      	mov	r2, r0
 8004bbe:	61e0      	str	r0, [r4, #28]
 8004bc0:	b920      	cbnz	r0, 8004bcc <_Balloc+0x20>
 8004bc2:	4b18      	ldr	r3, [pc, #96]	; (8004c24 <_Balloc+0x78>)
 8004bc4:	4818      	ldr	r0, [pc, #96]	; (8004c28 <_Balloc+0x7c>)
 8004bc6:	216b      	movs	r1, #107	; 0x6b
 8004bc8:	f000 fe46 	bl	8005858 <__assert_func>
 8004bcc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8004bd0:	6006      	str	r6, [r0, #0]
 8004bd2:	60c6      	str	r6, [r0, #12]
 8004bd4:	69e6      	ldr	r6, [r4, #28]
 8004bd6:	68f3      	ldr	r3, [r6, #12]
 8004bd8:	b183      	cbz	r3, 8004bfc <_Balloc+0x50>
 8004bda:	69e3      	ldr	r3, [r4, #28]
 8004bdc:	68db      	ldr	r3, [r3, #12]
 8004bde:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8004be2:	b9b8      	cbnz	r0, 8004c14 <_Balloc+0x68>
 8004be4:	2101      	movs	r1, #1
 8004be6:	fa01 f605 	lsl.w	r6, r1, r5
 8004bea:	1d72      	adds	r2, r6, #5
 8004bec:	0092      	lsls	r2, r2, #2
 8004bee:	4620      	mov	r0, r4
 8004bf0:	f000 fe50 	bl	8005894 <_calloc_r>
 8004bf4:	b160      	cbz	r0, 8004c10 <_Balloc+0x64>
 8004bf6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8004bfa:	e00e      	b.n	8004c1a <_Balloc+0x6e>
 8004bfc:	2221      	movs	r2, #33	; 0x21
 8004bfe:	2104      	movs	r1, #4
 8004c00:	4620      	mov	r0, r4
 8004c02:	f000 fe47 	bl	8005894 <_calloc_r>
 8004c06:	69e3      	ldr	r3, [r4, #28]
 8004c08:	60f0      	str	r0, [r6, #12]
 8004c0a:	68db      	ldr	r3, [r3, #12]
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d1e4      	bne.n	8004bda <_Balloc+0x2e>
 8004c10:	2000      	movs	r0, #0
 8004c12:	bd70      	pop	{r4, r5, r6, pc}
 8004c14:	6802      	ldr	r2, [r0, #0]
 8004c16:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8004c1a:	2300      	movs	r3, #0
 8004c1c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8004c20:	e7f7      	b.n	8004c12 <_Balloc+0x66>
 8004c22:	bf00      	nop
 8004c24:	08005b9d 	.word	0x08005b9d
 8004c28:	08005c1d 	.word	0x08005c1d

08004c2c <_Bfree>:
 8004c2c:	b570      	push	{r4, r5, r6, lr}
 8004c2e:	69c6      	ldr	r6, [r0, #28]
 8004c30:	4605      	mov	r5, r0
 8004c32:	460c      	mov	r4, r1
 8004c34:	b976      	cbnz	r6, 8004c54 <_Bfree+0x28>
 8004c36:	2010      	movs	r0, #16
 8004c38:	f7ff ff04 	bl	8004a44 <malloc>
 8004c3c:	4602      	mov	r2, r0
 8004c3e:	61e8      	str	r0, [r5, #28]
 8004c40:	b920      	cbnz	r0, 8004c4c <_Bfree+0x20>
 8004c42:	4b09      	ldr	r3, [pc, #36]	; (8004c68 <_Bfree+0x3c>)
 8004c44:	4809      	ldr	r0, [pc, #36]	; (8004c6c <_Bfree+0x40>)
 8004c46:	218f      	movs	r1, #143	; 0x8f
 8004c48:	f000 fe06 	bl	8005858 <__assert_func>
 8004c4c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8004c50:	6006      	str	r6, [r0, #0]
 8004c52:	60c6      	str	r6, [r0, #12]
 8004c54:	b13c      	cbz	r4, 8004c66 <_Bfree+0x3a>
 8004c56:	69eb      	ldr	r3, [r5, #28]
 8004c58:	6862      	ldr	r2, [r4, #4]
 8004c5a:	68db      	ldr	r3, [r3, #12]
 8004c5c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004c60:	6021      	str	r1, [r4, #0]
 8004c62:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8004c66:	bd70      	pop	{r4, r5, r6, pc}
 8004c68:	08005b9d 	.word	0x08005b9d
 8004c6c:	08005c1d 	.word	0x08005c1d

08004c70 <__multadd>:
 8004c70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004c74:	690d      	ldr	r5, [r1, #16]
 8004c76:	4607      	mov	r7, r0
 8004c78:	460c      	mov	r4, r1
 8004c7a:	461e      	mov	r6, r3
 8004c7c:	f101 0c14 	add.w	ip, r1, #20
 8004c80:	2000      	movs	r0, #0
 8004c82:	f8dc 3000 	ldr.w	r3, [ip]
 8004c86:	b299      	uxth	r1, r3
 8004c88:	fb02 6101 	mla	r1, r2, r1, r6
 8004c8c:	0c1e      	lsrs	r6, r3, #16
 8004c8e:	0c0b      	lsrs	r3, r1, #16
 8004c90:	fb02 3306 	mla	r3, r2, r6, r3
 8004c94:	b289      	uxth	r1, r1
 8004c96:	3001      	adds	r0, #1
 8004c98:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8004c9c:	4285      	cmp	r5, r0
 8004c9e:	f84c 1b04 	str.w	r1, [ip], #4
 8004ca2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8004ca6:	dcec      	bgt.n	8004c82 <__multadd+0x12>
 8004ca8:	b30e      	cbz	r6, 8004cee <__multadd+0x7e>
 8004caa:	68a3      	ldr	r3, [r4, #8]
 8004cac:	42ab      	cmp	r3, r5
 8004cae:	dc19      	bgt.n	8004ce4 <__multadd+0x74>
 8004cb0:	6861      	ldr	r1, [r4, #4]
 8004cb2:	4638      	mov	r0, r7
 8004cb4:	3101      	adds	r1, #1
 8004cb6:	f7ff ff79 	bl	8004bac <_Balloc>
 8004cba:	4680      	mov	r8, r0
 8004cbc:	b928      	cbnz	r0, 8004cca <__multadd+0x5a>
 8004cbe:	4602      	mov	r2, r0
 8004cc0:	4b0c      	ldr	r3, [pc, #48]	; (8004cf4 <__multadd+0x84>)
 8004cc2:	480d      	ldr	r0, [pc, #52]	; (8004cf8 <__multadd+0x88>)
 8004cc4:	21ba      	movs	r1, #186	; 0xba
 8004cc6:	f000 fdc7 	bl	8005858 <__assert_func>
 8004cca:	6922      	ldr	r2, [r4, #16]
 8004ccc:	3202      	adds	r2, #2
 8004cce:	f104 010c 	add.w	r1, r4, #12
 8004cd2:	0092      	lsls	r2, r2, #2
 8004cd4:	300c      	adds	r0, #12
 8004cd6:	f000 fdb1 	bl	800583c <memcpy>
 8004cda:	4621      	mov	r1, r4
 8004cdc:	4638      	mov	r0, r7
 8004cde:	f7ff ffa5 	bl	8004c2c <_Bfree>
 8004ce2:	4644      	mov	r4, r8
 8004ce4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8004ce8:	3501      	adds	r5, #1
 8004cea:	615e      	str	r6, [r3, #20]
 8004cec:	6125      	str	r5, [r4, #16]
 8004cee:	4620      	mov	r0, r4
 8004cf0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004cf4:	08005c0c 	.word	0x08005c0c
 8004cf8:	08005c1d 	.word	0x08005c1d

08004cfc <__hi0bits>:
 8004cfc:	0c03      	lsrs	r3, r0, #16
 8004cfe:	041b      	lsls	r3, r3, #16
 8004d00:	b9d3      	cbnz	r3, 8004d38 <__hi0bits+0x3c>
 8004d02:	0400      	lsls	r0, r0, #16
 8004d04:	2310      	movs	r3, #16
 8004d06:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8004d0a:	bf04      	itt	eq
 8004d0c:	0200      	lsleq	r0, r0, #8
 8004d0e:	3308      	addeq	r3, #8
 8004d10:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8004d14:	bf04      	itt	eq
 8004d16:	0100      	lsleq	r0, r0, #4
 8004d18:	3304      	addeq	r3, #4
 8004d1a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8004d1e:	bf04      	itt	eq
 8004d20:	0080      	lsleq	r0, r0, #2
 8004d22:	3302      	addeq	r3, #2
 8004d24:	2800      	cmp	r0, #0
 8004d26:	db05      	blt.n	8004d34 <__hi0bits+0x38>
 8004d28:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8004d2c:	f103 0301 	add.w	r3, r3, #1
 8004d30:	bf08      	it	eq
 8004d32:	2320      	moveq	r3, #32
 8004d34:	4618      	mov	r0, r3
 8004d36:	4770      	bx	lr
 8004d38:	2300      	movs	r3, #0
 8004d3a:	e7e4      	b.n	8004d06 <__hi0bits+0xa>

08004d3c <__lo0bits>:
 8004d3c:	6803      	ldr	r3, [r0, #0]
 8004d3e:	f013 0207 	ands.w	r2, r3, #7
 8004d42:	d00c      	beq.n	8004d5e <__lo0bits+0x22>
 8004d44:	07d9      	lsls	r1, r3, #31
 8004d46:	d422      	bmi.n	8004d8e <__lo0bits+0x52>
 8004d48:	079a      	lsls	r2, r3, #30
 8004d4a:	bf49      	itett	mi
 8004d4c:	085b      	lsrmi	r3, r3, #1
 8004d4e:	089b      	lsrpl	r3, r3, #2
 8004d50:	6003      	strmi	r3, [r0, #0]
 8004d52:	2201      	movmi	r2, #1
 8004d54:	bf5c      	itt	pl
 8004d56:	6003      	strpl	r3, [r0, #0]
 8004d58:	2202      	movpl	r2, #2
 8004d5a:	4610      	mov	r0, r2
 8004d5c:	4770      	bx	lr
 8004d5e:	b299      	uxth	r1, r3
 8004d60:	b909      	cbnz	r1, 8004d66 <__lo0bits+0x2a>
 8004d62:	0c1b      	lsrs	r3, r3, #16
 8004d64:	2210      	movs	r2, #16
 8004d66:	b2d9      	uxtb	r1, r3
 8004d68:	b909      	cbnz	r1, 8004d6e <__lo0bits+0x32>
 8004d6a:	3208      	adds	r2, #8
 8004d6c:	0a1b      	lsrs	r3, r3, #8
 8004d6e:	0719      	lsls	r1, r3, #28
 8004d70:	bf04      	itt	eq
 8004d72:	091b      	lsreq	r3, r3, #4
 8004d74:	3204      	addeq	r2, #4
 8004d76:	0799      	lsls	r1, r3, #30
 8004d78:	bf04      	itt	eq
 8004d7a:	089b      	lsreq	r3, r3, #2
 8004d7c:	3202      	addeq	r2, #2
 8004d7e:	07d9      	lsls	r1, r3, #31
 8004d80:	d403      	bmi.n	8004d8a <__lo0bits+0x4e>
 8004d82:	085b      	lsrs	r3, r3, #1
 8004d84:	f102 0201 	add.w	r2, r2, #1
 8004d88:	d003      	beq.n	8004d92 <__lo0bits+0x56>
 8004d8a:	6003      	str	r3, [r0, #0]
 8004d8c:	e7e5      	b.n	8004d5a <__lo0bits+0x1e>
 8004d8e:	2200      	movs	r2, #0
 8004d90:	e7e3      	b.n	8004d5a <__lo0bits+0x1e>
 8004d92:	2220      	movs	r2, #32
 8004d94:	e7e1      	b.n	8004d5a <__lo0bits+0x1e>
	...

08004d98 <__i2b>:
 8004d98:	b510      	push	{r4, lr}
 8004d9a:	460c      	mov	r4, r1
 8004d9c:	2101      	movs	r1, #1
 8004d9e:	f7ff ff05 	bl	8004bac <_Balloc>
 8004da2:	4602      	mov	r2, r0
 8004da4:	b928      	cbnz	r0, 8004db2 <__i2b+0x1a>
 8004da6:	4b05      	ldr	r3, [pc, #20]	; (8004dbc <__i2b+0x24>)
 8004da8:	4805      	ldr	r0, [pc, #20]	; (8004dc0 <__i2b+0x28>)
 8004daa:	f240 1145 	movw	r1, #325	; 0x145
 8004dae:	f000 fd53 	bl	8005858 <__assert_func>
 8004db2:	2301      	movs	r3, #1
 8004db4:	6144      	str	r4, [r0, #20]
 8004db6:	6103      	str	r3, [r0, #16]
 8004db8:	bd10      	pop	{r4, pc}
 8004dba:	bf00      	nop
 8004dbc:	08005c0c 	.word	0x08005c0c
 8004dc0:	08005c1d 	.word	0x08005c1d

08004dc4 <__multiply>:
 8004dc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004dc8:	4691      	mov	r9, r2
 8004dca:	690a      	ldr	r2, [r1, #16]
 8004dcc:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8004dd0:	429a      	cmp	r2, r3
 8004dd2:	bfb8      	it	lt
 8004dd4:	460b      	movlt	r3, r1
 8004dd6:	460c      	mov	r4, r1
 8004dd8:	bfbc      	itt	lt
 8004dda:	464c      	movlt	r4, r9
 8004ddc:	4699      	movlt	r9, r3
 8004dde:	6927      	ldr	r7, [r4, #16]
 8004de0:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8004de4:	68a3      	ldr	r3, [r4, #8]
 8004de6:	6861      	ldr	r1, [r4, #4]
 8004de8:	eb07 060a 	add.w	r6, r7, sl
 8004dec:	42b3      	cmp	r3, r6
 8004dee:	b085      	sub	sp, #20
 8004df0:	bfb8      	it	lt
 8004df2:	3101      	addlt	r1, #1
 8004df4:	f7ff feda 	bl	8004bac <_Balloc>
 8004df8:	b930      	cbnz	r0, 8004e08 <__multiply+0x44>
 8004dfa:	4602      	mov	r2, r0
 8004dfc:	4b44      	ldr	r3, [pc, #272]	; (8004f10 <__multiply+0x14c>)
 8004dfe:	4845      	ldr	r0, [pc, #276]	; (8004f14 <__multiply+0x150>)
 8004e00:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8004e04:	f000 fd28 	bl	8005858 <__assert_func>
 8004e08:	f100 0514 	add.w	r5, r0, #20
 8004e0c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8004e10:	462b      	mov	r3, r5
 8004e12:	2200      	movs	r2, #0
 8004e14:	4543      	cmp	r3, r8
 8004e16:	d321      	bcc.n	8004e5c <__multiply+0x98>
 8004e18:	f104 0314 	add.w	r3, r4, #20
 8004e1c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8004e20:	f109 0314 	add.w	r3, r9, #20
 8004e24:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8004e28:	9202      	str	r2, [sp, #8]
 8004e2a:	1b3a      	subs	r2, r7, r4
 8004e2c:	3a15      	subs	r2, #21
 8004e2e:	f022 0203 	bic.w	r2, r2, #3
 8004e32:	3204      	adds	r2, #4
 8004e34:	f104 0115 	add.w	r1, r4, #21
 8004e38:	428f      	cmp	r7, r1
 8004e3a:	bf38      	it	cc
 8004e3c:	2204      	movcc	r2, #4
 8004e3e:	9201      	str	r2, [sp, #4]
 8004e40:	9a02      	ldr	r2, [sp, #8]
 8004e42:	9303      	str	r3, [sp, #12]
 8004e44:	429a      	cmp	r2, r3
 8004e46:	d80c      	bhi.n	8004e62 <__multiply+0x9e>
 8004e48:	2e00      	cmp	r6, #0
 8004e4a:	dd03      	ble.n	8004e54 <__multiply+0x90>
 8004e4c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d05b      	beq.n	8004f0c <__multiply+0x148>
 8004e54:	6106      	str	r6, [r0, #16]
 8004e56:	b005      	add	sp, #20
 8004e58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004e5c:	f843 2b04 	str.w	r2, [r3], #4
 8004e60:	e7d8      	b.n	8004e14 <__multiply+0x50>
 8004e62:	f8b3 a000 	ldrh.w	sl, [r3]
 8004e66:	f1ba 0f00 	cmp.w	sl, #0
 8004e6a:	d024      	beq.n	8004eb6 <__multiply+0xf2>
 8004e6c:	f104 0e14 	add.w	lr, r4, #20
 8004e70:	46a9      	mov	r9, r5
 8004e72:	f04f 0c00 	mov.w	ip, #0
 8004e76:	f85e 2b04 	ldr.w	r2, [lr], #4
 8004e7a:	f8d9 1000 	ldr.w	r1, [r9]
 8004e7e:	fa1f fb82 	uxth.w	fp, r2
 8004e82:	b289      	uxth	r1, r1
 8004e84:	fb0a 110b 	mla	r1, sl, fp, r1
 8004e88:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8004e8c:	f8d9 2000 	ldr.w	r2, [r9]
 8004e90:	4461      	add	r1, ip
 8004e92:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8004e96:	fb0a c20b 	mla	r2, sl, fp, ip
 8004e9a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8004e9e:	b289      	uxth	r1, r1
 8004ea0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8004ea4:	4577      	cmp	r7, lr
 8004ea6:	f849 1b04 	str.w	r1, [r9], #4
 8004eaa:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8004eae:	d8e2      	bhi.n	8004e76 <__multiply+0xb2>
 8004eb0:	9a01      	ldr	r2, [sp, #4]
 8004eb2:	f845 c002 	str.w	ip, [r5, r2]
 8004eb6:	9a03      	ldr	r2, [sp, #12]
 8004eb8:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8004ebc:	3304      	adds	r3, #4
 8004ebe:	f1b9 0f00 	cmp.w	r9, #0
 8004ec2:	d021      	beq.n	8004f08 <__multiply+0x144>
 8004ec4:	6829      	ldr	r1, [r5, #0]
 8004ec6:	f104 0c14 	add.w	ip, r4, #20
 8004eca:	46ae      	mov	lr, r5
 8004ecc:	f04f 0a00 	mov.w	sl, #0
 8004ed0:	f8bc b000 	ldrh.w	fp, [ip]
 8004ed4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8004ed8:	fb09 220b 	mla	r2, r9, fp, r2
 8004edc:	4452      	add	r2, sl
 8004ede:	b289      	uxth	r1, r1
 8004ee0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8004ee4:	f84e 1b04 	str.w	r1, [lr], #4
 8004ee8:	f85c 1b04 	ldr.w	r1, [ip], #4
 8004eec:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8004ef0:	f8be 1000 	ldrh.w	r1, [lr]
 8004ef4:	fb09 110a 	mla	r1, r9, sl, r1
 8004ef8:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8004efc:	4567      	cmp	r7, ip
 8004efe:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8004f02:	d8e5      	bhi.n	8004ed0 <__multiply+0x10c>
 8004f04:	9a01      	ldr	r2, [sp, #4]
 8004f06:	50a9      	str	r1, [r5, r2]
 8004f08:	3504      	adds	r5, #4
 8004f0a:	e799      	b.n	8004e40 <__multiply+0x7c>
 8004f0c:	3e01      	subs	r6, #1
 8004f0e:	e79b      	b.n	8004e48 <__multiply+0x84>
 8004f10:	08005c0c 	.word	0x08005c0c
 8004f14:	08005c1d 	.word	0x08005c1d

08004f18 <__pow5mult>:
 8004f18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004f1c:	4615      	mov	r5, r2
 8004f1e:	f012 0203 	ands.w	r2, r2, #3
 8004f22:	4606      	mov	r6, r0
 8004f24:	460f      	mov	r7, r1
 8004f26:	d007      	beq.n	8004f38 <__pow5mult+0x20>
 8004f28:	4c25      	ldr	r4, [pc, #148]	; (8004fc0 <__pow5mult+0xa8>)
 8004f2a:	3a01      	subs	r2, #1
 8004f2c:	2300      	movs	r3, #0
 8004f2e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8004f32:	f7ff fe9d 	bl	8004c70 <__multadd>
 8004f36:	4607      	mov	r7, r0
 8004f38:	10ad      	asrs	r5, r5, #2
 8004f3a:	d03d      	beq.n	8004fb8 <__pow5mult+0xa0>
 8004f3c:	69f4      	ldr	r4, [r6, #28]
 8004f3e:	b97c      	cbnz	r4, 8004f60 <__pow5mult+0x48>
 8004f40:	2010      	movs	r0, #16
 8004f42:	f7ff fd7f 	bl	8004a44 <malloc>
 8004f46:	4602      	mov	r2, r0
 8004f48:	61f0      	str	r0, [r6, #28]
 8004f4a:	b928      	cbnz	r0, 8004f58 <__pow5mult+0x40>
 8004f4c:	4b1d      	ldr	r3, [pc, #116]	; (8004fc4 <__pow5mult+0xac>)
 8004f4e:	481e      	ldr	r0, [pc, #120]	; (8004fc8 <__pow5mult+0xb0>)
 8004f50:	f240 11b3 	movw	r1, #435	; 0x1b3
 8004f54:	f000 fc80 	bl	8005858 <__assert_func>
 8004f58:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8004f5c:	6004      	str	r4, [r0, #0]
 8004f5e:	60c4      	str	r4, [r0, #12]
 8004f60:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8004f64:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8004f68:	b94c      	cbnz	r4, 8004f7e <__pow5mult+0x66>
 8004f6a:	f240 2171 	movw	r1, #625	; 0x271
 8004f6e:	4630      	mov	r0, r6
 8004f70:	f7ff ff12 	bl	8004d98 <__i2b>
 8004f74:	2300      	movs	r3, #0
 8004f76:	f8c8 0008 	str.w	r0, [r8, #8]
 8004f7a:	4604      	mov	r4, r0
 8004f7c:	6003      	str	r3, [r0, #0]
 8004f7e:	f04f 0900 	mov.w	r9, #0
 8004f82:	07eb      	lsls	r3, r5, #31
 8004f84:	d50a      	bpl.n	8004f9c <__pow5mult+0x84>
 8004f86:	4639      	mov	r1, r7
 8004f88:	4622      	mov	r2, r4
 8004f8a:	4630      	mov	r0, r6
 8004f8c:	f7ff ff1a 	bl	8004dc4 <__multiply>
 8004f90:	4639      	mov	r1, r7
 8004f92:	4680      	mov	r8, r0
 8004f94:	4630      	mov	r0, r6
 8004f96:	f7ff fe49 	bl	8004c2c <_Bfree>
 8004f9a:	4647      	mov	r7, r8
 8004f9c:	106d      	asrs	r5, r5, #1
 8004f9e:	d00b      	beq.n	8004fb8 <__pow5mult+0xa0>
 8004fa0:	6820      	ldr	r0, [r4, #0]
 8004fa2:	b938      	cbnz	r0, 8004fb4 <__pow5mult+0x9c>
 8004fa4:	4622      	mov	r2, r4
 8004fa6:	4621      	mov	r1, r4
 8004fa8:	4630      	mov	r0, r6
 8004faa:	f7ff ff0b 	bl	8004dc4 <__multiply>
 8004fae:	6020      	str	r0, [r4, #0]
 8004fb0:	f8c0 9000 	str.w	r9, [r0]
 8004fb4:	4604      	mov	r4, r0
 8004fb6:	e7e4      	b.n	8004f82 <__pow5mult+0x6a>
 8004fb8:	4638      	mov	r0, r7
 8004fba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004fbe:	bf00      	nop
 8004fc0:	08005d68 	.word	0x08005d68
 8004fc4:	08005b9d 	.word	0x08005b9d
 8004fc8:	08005c1d 	.word	0x08005c1d

08004fcc <__lshift>:
 8004fcc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004fd0:	460c      	mov	r4, r1
 8004fd2:	6849      	ldr	r1, [r1, #4]
 8004fd4:	6923      	ldr	r3, [r4, #16]
 8004fd6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8004fda:	68a3      	ldr	r3, [r4, #8]
 8004fdc:	4607      	mov	r7, r0
 8004fde:	4691      	mov	r9, r2
 8004fe0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8004fe4:	f108 0601 	add.w	r6, r8, #1
 8004fe8:	42b3      	cmp	r3, r6
 8004fea:	db0b      	blt.n	8005004 <__lshift+0x38>
 8004fec:	4638      	mov	r0, r7
 8004fee:	f7ff fddd 	bl	8004bac <_Balloc>
 8004ff2:	4605      	mov	r5, r0
 8004ff4:	b948      	cbnz	r0, 800500a <__lshift+0x3e>
 8004ff6:	4602      	mov	r2, r0
 8004ff8:	4b28      	ldr	r3, [pc, #160]	; (800509c <__lshift+0xd0>)
 8004ffa:	4829      	ldr	r0, [pc, #164]	; (80050a0 <__lshift+0xd4>)
 8004ffc:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8005000:	f000 fc2a 	bl	8005858 <__assert_func>
 8005004:	3101      	adds	r1, #1
 8005006:	005b      	lsls	r3, r3, #1
 8005008:	e7ee      	b.n	8004fe8 <__lshift+0x1c>
 800500a:	2300      	movs	r3, #0
 800500c:	f100 0114 	add.w	r1, r0, #20
 8005010:	f100 0210 	add.w	r2, r0, #16
 8005014:	4618      	mov	r0, r3
 8005016:	4553      	cmp	r3, sl
 8005018:	db33      	blt.n	8005082 <__lshift+0xb6>
 800501a:	6920      	ldr	r0, [r4, #16]
 800501c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8005020:	f104 0314 	add.w	r3, r4, #20
 8005024:	f019 091f 	ands.w	r9, r9, #31
 8005028:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800502c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8005030:	d02b      	beq.n	800508a <__lshift+0xbe>
 8005032:	f1c9 0e20 	rsb	lr, r9, #32
 8005036:	468a      	mov	sl, r1
 8005038:	2200      	movs	r2, #0
 800503a:	6818      	ldr	r0, [r3, #0]
 800503c:	fa00 f009 	lsl.w	r0, r0, r9
 8005040:	4310      	orrs	r0, r2
 8005042:	f84a 0b04 	str.w	r0, [sl], #4
 8005046:	f853 2b04 	ldr.w	r2, [r3], #4
 800504a:	459c      	cmp	ip, r3
 800504c:	fa22 f20e 	lsr.w	r2, r2, lr
 8005050:	d8f3      	bhi.n	800503a <__lshift+0x6e>
 8005052:	ebac 0304 	sub.w	r3, ip, r4
 8005056:	3b15      	subs	r3, #21
 8005058:	f023 0303 	bic.w	r3, r3, #3
 800505c:	3304      	adds	r3, #4
 800505e:	f104 0015 	add.w	r0, r4, #21
 8005062:	4584      	cmp	ip, r0
 8005064:	bf38      	it	cc
 8005066:	2304      	movcc	r3, #4
 8005068:	50ca      	str	r2, [r1, r3]
 800506a:	b10a      	cbz	r2, 8005070 <__lshift+0xa4>
 800506c:	f108 0602 	add.w	r6, r8, #2
 8005070:	3e01      	subs	r6, #1
 8005072:	4638      	mov	r0, r7
 8005074:	612e      	str	r6, [r5, #16]
 8005076:	4621      	mov	r1, r4
 8005078:	f7ff fdd8 	bl	8004c2c <_Bfree>
 800507c:	4628      	mov	r0, r5
 800507e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005082:	f842 0f04 	str.w	r0, [r2, #4]!
 8005086:	3301      	adds	r3, #1
 8005088:	e7c5      	b.n	8005016 <__lshift+0x4a>
 800508a:	3904      	subs	r1, #4
 800508c:	f853 2b04 	ldr.w	r2, [r3], #4
 8005090:	f841 2f04 	str.w	r2, [r1, #4]!
 8005094:	459c      	cmp	ip, r3
 8005096:	d8f9      	bhi.n	800508c <__lshift+0xc0>
 8005098:	e7ea      	b.n	8005070 <__lshift+0xa4>
 800509a:	bf00      	nop
 800509c:	08005c0c 	.word	0x08005c0c
 80050a0:	08005c1d 	.word	0x08005c1d

080050a4 <__mcmp>:
 80050a4:	b530      	push	{r4, r5, lr}
 80050a6:	6902      	ldr	r2, [r0, #16]
 80050a8:	690c      	ldr	r4, [r1, #16]
 80050aa:	1b12      	subs	r2, r2, r4
 80050ac:	d10e      	bne.n	80050cc <__mcmp+0x28>
 80050ae:	f100 0314 	add.w	r3, r0, #20
 80050b2:	3114      	adds	r1, #20
 80050b4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80050b8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80050bc:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80050c0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80050c4:	42a5      	cmp	r5, r4
 80050c6:	d003      	beq.n	80050d0 <__mcmp+0x2c>
 80050c8:	d305      	bcc.n	80050d6 <__mcmp+0x32>
 80050ca:	2201      	movs	r2, #1
 80050cc:	4610      	mov	r0, r2
 80050ce:	bd30      	pop	{r4, r5, pc}
 80050d0:	4283      	cmp	r3, r0
 80050d2:	d3f3      	bcc.n	80050bc <__mcmp+0x18>
 80050d4:	e7fa      	b.n	80050cc <__mcmp+0x28>
 80050d6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80050da:	e7f7      	b.n	80050cc <__mcmp+0x28>

080050dc <__mdiff>:
 80050dc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80050e0:	460c      	mov	r4, r1
 80050e2:	4606      	mov	r6, r0
 80050e4:	4611      	mov	r1, r2
 80050e6:	4620      	mov	r0, r4
 80050e8:	4690      	mov	r8, r2
 80050ea:	f7ff ffdb 	bl	80050a4 <__mcmp>
 80050ee:	1e05      	subs	r5, r0, #0
 80050f0:	d110      	bne.n	8005114 <__mdiff+0x38>
 80050f2:	4629      	mov	r1, r5
 80050f4:	4630      	mov	r0, r6
 80050f6:	f7ff fd59 	bl	8004bac <_Balloc>
 80050fa:	b930      	cbnz	r0, 800510a <__mdiff+0x2e>
 80050fc:	4b3a      	ldr	r3, [pc, #232]	; (80051e8 <__mdiff+0x10c>)
 80050fe:	4602      	mov	r2, r0
 8005100:	f240 2137 	movw	r1, #567	; 0x237
 8005104:	4839      	ldr	r0, [pc, #228]	; (80051ec <__mdiff+0x110>)
 8005106:	f000 fba7 	bl	8005858 <__assert_func>
 800510a:	2301      	movs	r3, #1
 800510c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8005110:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005114:	bfa4      	itt	ge
 8005116:	4643      	movge	r3, r8
 8005118:	46a0      	movge	r8, r4
 800511a:	4630      	mov	r0, r6
 800511c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8005120:	bfa6      	itte	ge
 8005122:	461c      	movge	r4, r3
 8005124:	2500      	movge	r5, #0
 8005126:	2501      	movlt	r5, #1
 8005128:	f7ff fd40 	bl	8004bac <_Balloc>
 800512c:	b920      	cbnz	r0, 8005138 <__mdiff+0x5c>
 800512e:	4b2e      	ldr	r3, [pc, #184]	; (80051e8 <__mdiff+0x10c>)
 8005130:	4602      	mov	r2, r0
 8005132:	f240 2145 	movw	r1, #581	; 0x245
 8005136:	e7e5      	b.n	8005104 <__mdiff+0x28>
 8005138:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800513c:	6926      	ldr	r6, [r4, #16]
 800513e:	60c5      	str	r5, [r0, #12]
 8005140:	f104 0914 	add.w	r9, r4, #20
 8005144:	f108 0514 	add.w	r5, r8, #20
 8005148:	f100 0e14 	add.w	lr, r0, #20
 800514c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8005150:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8005154:	f108 0210 	add.w	r2, r8, #16
 8005158:	46f2      	mov	sl, lr
 800515a:	2100      	movs	r1, #0
 800515c:	f859 3b04 	ldr.w	r3, [r9], #4
 8005160:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8005164:	fa11 f88b 	uxtah	r8, r1, fp
 8005168:	b299      	uxth	r1, r3
 800516a:	0c1b      	lsrs	r3, r3, #16
 800516c:	eba8 0801 	sub.w	r8, r8, r1
 8005170:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8005174:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8005178:	fa1f f888 	uxth.w	r8, r8
 800517c:	1419      	asrs	r1, r3, #16
 800517e:	454e      	cmp	r6, r9
 8005180:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8005184:	f84a 3b04 	str.w	r3, [sl], #4
 8005188:	d8e8      	bhi.n	800515c <__mdiff+0x80>
 800518a:	1b33      	subs	r3, r6, r4
 800518c:	3b15      	subs	r3, #21
 800518e:	f023 0303 	bic.w	r3, r3, #3
 8005192:	3304      	adds	r3, #4
 8005194:	3415      	adds	r4, #21
 8005196:	42a6      	cmp	r6, r4
 8005198:	bf38      	it	cc
 800519a:	2304      	movcc	r3, #4
 800519c:	441d      	add	r5, r3
 800519e:	4473      	add	r3, lr
 80051a0:	469e      	mov	lr, r3
 80051a2:	462e      	mov	r6, r5
 80051a4:	4566      	cmp	r6, ip
 80051a6:	d30e      	bcc.n	80051c6 <__mdiff+0xea>
 80051a8:	f10c 0203 	add.w	r2, ip, #3
 80051ac:	1b52      	subs	r2, r2, r5
 80051ae:	f022 0203 	bic.w	r2, r2, #3
 80051b2:	3d03      	subs	r5, #3
 80051b4:	45ac      	cmp	ip, r5
 80051b6:	bf38      	it	cc
 80051b8:	2200      	movcc	r2, #0
 80051ba:	4413      	add	r3, r2
 80051bc:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 80051c0:	b17a      	cbz	r2, 80051e2 <__mdiff+0x106>
 80051c2:	6107      	str	r7, [r0, #16]
 80051c4:	e7a4      	b.n	8005110 <__mdiff+0x34>
 80051c6:	f856 8b04 	ldr.w	r8, [r6], #4
 80051ca:	fa11 f288 	uxtah	r2, r1, r8
 80051ce:	1414      	asrs	r4, r2, #16
 80051d0:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80051d4:	b292      	uxth	r2, r2
 80051d6:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80051da:	f84e 2b04 	str.w	r2, [lr], #4
 80051de:	1421      	asrs	r1, r4, #16
 80051e0:	e7e0      	b.n	80051a4 <__mdiff+0xc8>
 80051e2:	3f01      	subs	r7, #1
 80051e4:	e7ea      	b.n	80051bc <__mdiff+0xe0>
 80051e6:	bf00      	nop
 80051e8:	08005c0c 	.word	0x08005c0c
 80051ec:	08005c1d 	.word	0x08005c1d

080051f0 <__d2b>:
 80051f0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80051f4:	460f      	mov	r7, r1
 80051f6:	2101      	movs	r1, #1
 80051f8:	ec59 8b10 	vmov	r8, r9, d0
 80051fc:	4616      	mov	r6, r2
 80051fe:	f7ff fcd5 	bl	8004bac <_Balloc>
 8005202:	4604      	mov	r4, r0
 8005204:	b930      	cbnz	r0, 8005214 <__d2b+0x24>
 8005206:	4602      	mov	r2, r0
 8005208:	4b24      	ldr	r3, [pc, #144]	; (800529c <__d2b+0xac>)
 800520a:	4825      	ldr	r0, [pc, #148]	; (80052a0 <__d2b+0xb0>)
 800520c:	f240 310f 	movw	r1, #783	; 0x30f
 8005210:	f000 fb22 	bl	8005858 <__assert_func>
 8005214:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8005218:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800521c:	bb2d      	cbnz	r5, 800526a <__d2b+0x7a>
 800521e:	9301      	str	r3, [sp, #4]
 8005220:	f1b8 0300 	subs.w	r3, r8, #0
 8005224:	d026      	beq.n	8005274 <__d2b+0x84>
 8005226:	4668      	mov	r0, sp
 8005228:	9300      	str	r3, [sp, #0]
 800522a:	f7ff fd87 	bl	8004d3c <__lo0bits>
 800522e:	e9dd 1200 	ldrd	r1, r2, [sp]
 8005232:	b1e8      	cbz	r0, 8005270 <__d2b+0x80>
 8005234:	f1c0 0320 	rsb	r3, r0, #32
 8005238:	fa02 f303 	lsl.w	r3, r2, r3
 800523c:	430b      	orrs	r3, r1
 800523e:	40c2      	lsrs	r2, r0
 8005240:	6163      	str	r3, [r4, #20]
 8005242:	9201      	str	r2, [sp, #4]
 8005244:	9b01      	ldr	r3, [sp, #4]
 8005246:	61a3      	str	r3, [r4, #24]
 8005248:	2b00      	cmp	r3, #0
 800524a:	bf14      	ite	ne
 800524c:	2202      	movne	r2, #2
 800524e:	2201      	moveq	r2, #1
 8005250:	6122      	str	r2, [r4, #16]
 8005252:	b1bd      	cbz	r5, 8005284 <__d2b+0x94>
 8005254:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8005258:	4405      	add	r5, r0
 800525a:	603d      	str	r5, [r7, #0]
 800525c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8005260:	6030      	str	r0, [r6, #0]
 8005262:	4620      	mov	r0, r4
 8005264:	b003      	add	sp, #12
 8005266:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800526a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800526e:	e7d6      	b.n	800521e <__d2b+0x2e>
 8005270:	6161      	str	r1, [r4, #20]
 8005272:	e7e7      	b.n	8005244 <__d2b+0x54>
 8005274:	a801      	add	r0, sp, #4
 8005276:	f7ff fd61 	bl	8004d3c <__lo0bits>
 800527a:	9b01      	ldr	r3, [sp, #4]
 800527c:	6163      	str	r3, [r4, #20]
 800527e:	3020      	adds	r0, #32
 8005280:	2201      	movs	r2, #1
 8005282:	e7e5      	b.n	8005250 <__d2b+0x60>
 8005284:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8005288:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800528c:	6038      	str	r0, [r7, #0]
 800528e:	6918      	ldr	r0, [r3, #16]
 8005290:	f7ff fd34 	bl	8004cfc <__hi0bits>
 8005294:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8005298:	e7e2      	b.n	8005260 <__d2b+0x70>
 800529a:	bf00      	nop
 800529c:	08005c0c 	.word	0x08005c0c
 80052a0:	08005c1d 	.word	0x08005c1d

080052a4 <__sfputc_r>:
 80052a4:	6893      	ldr	r3, [r2, #8]
 80052a6:	3b01      	subs	r3, #1
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	b410      	push	{r4}
 80052ac:	6093      	str	r3, [r2, #8]
 80052ae:	da08      	bge.n	80052c2 <__sfputc_r+0x1e>
 80052b0:	6994      	ldr	r4, [r2, #24]
 80052b2:	42a3      	cmp	r3, r4
 80052b4:	db01      	blt.n	80052ba <__sfputc_r+0x16>
 80052b6:	290a      	cmp	r1, #10
 80052b8:	d103      	bne.n	80052c2 <__sfputc_r+0x1e>
 80052ba:	f85d 4b04 	ldr.w	r4, [sp], #4
 80052be:	f000 ba17 	b.w	80056f0 <__swbuf_r>
 80052c2:	6813      	ldr	r3, [r2, #0]
 80052c4:	1c58      	adds	r0, r3, #1
 80052c6:	6010      	str	r0, [r2, #0]
 80052c8:	7019      	strb	r1, [r3, #0]
 80052ca:	4608      	mov	r0, r1
 80052cc:	f85d 4b04 	ldr.w	r4, [sp], #4
 80052d0:	4770      	bx	lr

080052d2 <__sfputs_r>:
 80052d2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80052d4:	4606      	mov	r6, r0
 80052d6:	460f      	mov	r7, r1
 80052d8:	4614      	mov	r4, r2
 80052da:	18d5      	adds	r5, r2, r3
 80052dc:	42ac      	cmp	r4, r5
 80052de:	d101      	bne.n	80052e4 <__sfputs_r+0x12>
 80052e0:	2000      	movs	r0, #0
 80052e2:	e007      	b.n	80052f4 <__sfputs_r+0x22>
 80052e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80052e8:	463a      	mov	r2, r7
 80052ea:	4630      	mov	r0, r6
 80052ec:	f7ff ffda 	bl	80052a4 <__sfputc_r>
 80052f0:	1c43      	adds	r3, r0, #1
 80052f2:	d1f3      	bne.n	80052dc <__sfputs_r+0xa>
 80052f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080052f8 <_vfiprintf_r>:
 80052f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80052fc:	460d      	mov	r5, r1
 80052fe:	b09d      	sub	sp, #116	; 0x74
 8005300:	4614      	mov	r4, r2
 8005302:	4698      	mov	r8, r3
 8005304:	4606      	mov	r6, r0
 8005306:	b118      	cbz	r0, 8005310 <_vfiprintf_r+0x18>
 8005308:	6a03      	ldr	r3, [r0, #32]
 800530a:	b90b      	cbnz	r3, 8005310 <_vfiprintf_r+0x18>
 800530c:	f7fe fbc0 	bl	8003a90 <__sinit>
 8005310:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005312:	07d9      	lsls	r1, r3, #31
 8005314:	d405      	bmi.n	8005322 <_vfiprintf_r+0x2a>
 8005316:	89ab      	ldrh	r3, [r5, #12]
 8005318:	059a      	lsls	r2, r3, #22
 800531a:	d402      	bmi.n	8005322 <_vfiprintf_r+0x2a>
 800531c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800531e:	f7fe fcc8 	bl	8003cb2 <__retarget_lock_acquire_recursive>
 8005322:	89ab      	ldrh	r3, [r5, #12]
 8005324:	071b      	lsls	r3, r3, #28
 8005326:	d501      	bpl.n	800532c <_vfiprintf_r+0x34>
 8005328:	692b      	ldr	r3, [r5, #16]
 800532a:	b99b      	cbnz	r3, 8005354 <_vfiprintf_r+0x5c>
 800532c:	4629      	mov	r1, r5
 800532e:	4630      	mov	r0, r6
 8005330:	f000 fa1c 	bl	800576c <__swsetup_r>
 8005334:	b170      	cbz	r0, 8005354 <_vfiprintf_r+0x5c>
 8005336:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005338:	07dc      	lsls	r4, r3, #31
 800533a:	d504      	bpl.n	8005346 <_vfiprintf_r+0x4e>
 800533c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005340:	b01d      	add	sp, #116	; 0x74
 8005342:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005346:	89ab      	ldrh	r3, [r5, #12]
 8005348:	0598      	lsls	r0, r3, #22
 800534a:	d4f7      	bmi.n	800533c <_vfiprintf_r+0x44>
 800534c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800534e:	f7fe fcb1 	bl	8003cb4 <__retarget_lock_release_recursive>
 8005352:	e7f3      	b.n	800533c <_vfiprintf_r+0x44>
 8005354:	2300      	movs	r3, #0
 8005356:	9309      	str	r3, [sp, #36]	; 0x24
 8005358:	2320      	movs	r3, #32
 800535a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800535e:	f8cd 800c 	str.w	r8, [sp, #12]
 8005362:	2330      	movs	r3, #48	; 0x30
 8005364:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8005518 <_vfiprintf_r+0x220>
 8005368:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800536c:	f04f 0901 	mov.w	r9, #1
 8005370:	4623      	mov	r3, r4
 8005372:	469a      	mov	sl, r3
 8005374:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005378:	b10a      	cbz	r2, 800537e <_vfiprintf_r+0x86>
 800537a:	2a25      	cmp	r2, #37	; 0x25
 800537c:	d1f9      	bne.n	8005372 <_vfiprintf_r+0x7a>
 800537e:	ebba 0b04 	subs.w	fp, sl, r4
 8005382:	d00b      	beq.n	800539c <_vfiprintf_r+0xa4>
 8005384:	465b      	mov	r3, fp
 8005386:	4622      	mov	r2, r4
 8005388:	4629      	mov	r1, r5
 800538a:	4630      	mov	r0, r6
 800538c:	f7ff ffa1 	bl	80052d2 <__sfputs_r>
 8005390:	3001      	adds	r0, #1
 8005392:	f000 80a9 	beq.w	80054e8 <_vfiprintf_r+0x1f0>
 8005396:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005398:	445a      	add	r2, fp
 800539a:	9209      	str	r2, [sp, #36]	; 0x24
 800539c:	f89a 3000 	ldrb.w	r3, [sl]
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	f000 80a1 	beq.w	80054e8 <_vfiprintf_r+0x1f0>
 80053a6:	2300      	movs	r3, #0
 80053a8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80053ac:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80053b0:	f10a 0a01 	add.w	sl, sl, #1
 80053b4:	9304      	str	r3, [sp, #16]
 80053b6:	9307      	str	r3, [sp, #28]
 80053b8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80053bc:	931a      	str	r3, [sp, #104]	; 0x68
 80053be:	4654      	mov	r4, sl
 80053c0:	2205      	movs	r2, #5
 80053c2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80053c6:	4854      	ldr	r0, [pc, #336]	; (8005518 <_vfiprintf_r+0x220>)
 80053c8:	f7fa ff0a 	bl	80001e0 <memchr>
 80053cc:	9a04      	ldr	r2, [sp, #16]
 80053ce:	b9d8      	cbnz	r0, 8005408 <_vfiprintf_r+0x110>
 80053d0:	06d1      	lsls	r1, r2, #27
 80053d2:	bf44      	itt	mi
 80053d4:	2320      	movmi	r3, #32
 80053d6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80053da:	0713      	lsls	r3, r2, #28
 80053dc:	bf44      	itt	mi
 80053de:	232b      	movmi	r3, #43	; 0x2b
 80053e0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80053e4:	f89a 3000 	ldrb.w	r3, [sl]
 80053e8:	2b2a      	cmp	r3, #42	; 0x2a
 80053ea:	d015      	beq.n	8005418 <_vfiprintf_r+0x120>
 80053ec:	9a07      	ldr	r2, [sp, #28]
 80053ee:	4654      	mov	r4, sl
 80053f0:	2000      	movs	r0, #0
 80053f2:	f04f 0c0a 	mov.w	ip, #10
 80053f6:	4621      	mov	r1, r4
 80053f8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80053fc:	3b30      	subs	r3, #48	; 0x30
 80053fe:	2b09      	cmp	r3, #9
 8005400:	d94d      	bls.n	800549e <_vfiprintf_r+0x1a6>
 8005402:	b1b0      	cbz	r0, 8005432 <_vfiprintf_r+0x13a>
 8005404:	9207      	str	r2, [sp, #28]
 8005406:	e014      	b.n	8005432 <_vfiprintf_r+0x13a>
 8005408:	eba0 0308 	sub.w	r3, r0, r8
 800540c:	fa09 f303 	lsl.w	r3, r9, r3
 8005410:	4313      	orrs	r3, r2
 8005412:	9304      	str	r3, [sp, #16]
 8005414:	46a2      	mov	sl, r4
 8005416:	e7d2      	b.n	80053be <_vfiprintf_r+0xc6>
 8005418:	9b03      	ldr	r3, [sp, #12]
 800541a:	1d19      	adds	r1, r3, #4
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	9103      	str	r1, [sp, #12]
 8005420:	2b00      	cmp	r3, #0
 8005422:	bfbb      	ittet	lt
 8005424:	425b      	neglt	r3, r3
 8005426:	f042 0202 	orrlt.w	r2, r2, #2
 800542a:	9307      	strge	r3, [sp, #28]
 800542c:	9307      	strlt	r3, [sp, #28]
 800542e:	bfb8      	it	lt
 8005430:	9204      	strlt	r2, [sp, #16]
 8005432:	7823      	ldrb	r3, [r4, #0]
 8005434:	2b2e      	cmp	r3, #46	; 0x2e
 8005436:	d10c      	bne.n	8005452 <_vfiprintf_r+0x15a>
 8005438:	7863      	ldrb	r3, [r4, #1]
 800543a:	2b2a      	cmp	r3, #42	; 0x2a
 800543c:	d134      	bne.n	80054a8 <_vfiprintf_r+0x1b0>
 800543e:	9b03      	ldr	r3, [sp, #12]
 8005440:	1d1a      	adds	r2, r3, #4
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	9203      	str	r2, [sp, #12]
 8005446:	2b00      	cmp	r3, #0
 8005448:	bfb8      	it	lt
 800544a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800544e:	3402      	adds	r4, #2
 8005450:	9305      	str	r3, [sp, #20]
 8005452:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8005528 <_vfiprintf_r+0x230>
 8005456:	7821      	ldrb	r1, [r4, #0]
 8005458:	2203      	movs	r2, #3
 800545a:	4650      	mov	r0, sl
 800545c:	f7fa fec0 	bl	80001e0 <memchr>
 8005460:	b138      	cbz	r0, 8005472 <_vfiprintf_r+0x17a>
 8005462:	9b04      	ldr	r3, [sp, #16]
 8005464:	eba0 000a 	sub.w	r0, r0, sl
 8005468:	2240      	movs	r2, #64	; 0x40
 800546a:	4082      	lsls	r2, r0
 800546c:	4313      	orrs	r3, r2
 800546e:	3401      	adds	r4, #1
 8005470:	9304      	str	r3, [sp, #16]
 8005472:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005476:	4829      	ldr	r0, [pc, #164]	; (800551c <_vfiprintf_r+0x224>)
 8005478:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800547c:	2206      	movs	r2, #6
 800547e:	f7fa feaf 	bl	80001e0 <memchr>
 8005482:	2800      	cmp	r0, #0
 8005484:	d03f      	beq.n	8005506 <_vfiprintf_r+0x20e>
 8005486:	4b26      	ldr	r3, [pc, #152]	; (8005520 <_vfiprintf_r+0x228>)
 8005488:	bb1b      	cbnz	r3, 80054d2 <_vfiprintf_r+0x1da>
 800548a:	9b03      	ldr	r3, [sp, #12]
 800548c:	3307      	adds	r3, #7
 800548e:	f023 0307 	bic.w	r3, r3, #7
 8005492:	3308      	adds	r3, #8
 8005494:	9303      	str	r3, [sp, #12]
 8005496:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005498:	443b      	add	r3, r7
 800549a:	9309      	str	r3, [sp, #36]	; 0x24
 800549c:	e768      	b.n	8005370 <_vfiprintf_r+0x78>
 800549e:	fb0c 3202 	mla	r2, ip, r2, r3
 80054a2:	460c      	mov	r4, r1
 80054a4:	2001      	movs	r0, #1
 80054a6:	e7a6      	b.n	80053f6 <_vfiprintf_r+0xfe>
 80054a8:	2300      	movs	r3, #0
 80054aa:	3401      	adds	r4, #1
 80054ac:	9305      	str	r3, [sp, #20]
 80054ae:	4619      	mov	r1, r3
 80054b0:	f04f 0c0a 	mov.w	ip, #10
 80054b4:	4620      	mov	r0, r4
 80054b6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80054ba:	3a30      	subs	r2, #48	; 0x30
 80054bc:	2a09      	cmp	r2, #9
 80054be:	d903      	bls.n	80054c8 <_vfiprintf_r+0x1d0>
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d0c6      	beq.n	8005452 <_vfiprintf_r+0x15a>
 80054c4:	9105      	str	r1, [sp, #20]
 80054c6:	e7c4      	b.n	8005452 <_vfiprintf_r+0x15a>
 80054c8:	fb0c 2101 	mla	r1, ip, r1, r2
 80054cc:	4604      	mov	r4, r0
 80054ce:	2301      	movs	r3, #1
 80054d0:	e7f0      	b.n	80054b4 <_vfiprintf_r+0x1bc>
 80054d2:	ab03      	add	r3, sp, #12
 80054d4:	9300      	str	r3, [sp, #0]
 80054d6:	462a      	mov	r2, r5
 80054d8:	4b12      	ldr	r3, [pc, #72]	; (8005524 <_vfiprintf_r+0x22c>)
 80054da:	a904      	add	r1, sp, #16
 80054dc:	4630      	mov	r0, r6
 80054de:	f7fd fe85 	bl	80031ec <_printf_float>
 80054e2:	4607      	mov	r7, r0
 80054e4:	1c78      	adds	r0, r7, #1
 80054e6:	d1d6      	bne.n	8005496 <_vfiprintf_r+0x19e>
 80054e8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80054ea:	07d9      	lsls	r1, r3, #31
 80054ec:	d405      	bmi.n	80054fa <_vfiprintf_r+0x202>
 80054ee:	89ab      	ldrh	r3, [r5, #12]
 80054f0:	059a      	lsls	r2, r3, #22
 80054f2:	d402      	bmi.n	80054fa <_vfiprintf_r+0x202>
 80054f4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80054f6:	f7fe fbdd 	bl	8003cb4 <__retarget_lock_release_recursive>
 80054fa:	89ab      	ldrh	r3, [r5, #12]
 80054fc:	065b      	lsls	r3, r3, #25
 80054fe:	f53f af1d 	bmi.w	800533c <_vfiprintf_r+0x44>
 8005502:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005504:	e71c      	b.n	8005340 <_vfiprintf_r+0x48>
 8005506:	ab03      	add	r3, sp, #12
 8005508:	9300      	str	r3, [sp, #0]
 800550a:	462a      	mov	r2, r5
 800550c:	4b05      	ldr	r3, [pc, #20]	; (8005524 <_vfiprintf_r+0x22c>)
 800550e:	a904      	add	r1, sp, #16
 8005510:	4630      	mov	r0, r6
 8005512:	f7fe f90f 	bl	8003734 <_printf_i>
 8005516:	e7e4      	b.n	80054e2 <_vfiprintf_r+0x1ea>
 8005518:	08005d74 	.word	0x08005d74
 800551c:	08005d7e 	.word	0x08005d7e
 8005520:	080031ed 	.word	0x080031ed
 8005524:	080052d3 	.word	0x080052d3
 8005528:	08005d7a 	.word	0x08005d7a

0800552c <__sflush_r>:
 800552c:	898a      	ldrh	r2, [r1, #12]
 800552e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005532:	4605      	mov	r5, r0
 8005534:	0710      	lsls	r0, r2, #28
 8005536:	460c      	mov	r4, r1
 8005538:	d458      	bmi.n	80055ec <__sflush_r+0xc0>
 800553a:	684b      	ldr	r3, [r1, #4]
 800553c:	2b00      	cmp	r3, #0
 800553e:	dc05      	bgt.n	800554c <__sflush_r+0x20>
 8005540:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005542:	2b00      	cmp	r3, #0
 8005544:	dc02      	bgt.n	800554c <__sflush_r+0x20>
 8005546:	2000      	movs	r0, #0
 8005548:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800554c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800554e:	2e00      	cmp	r6, #0
 8005550:	d0f9      	beq.n	8005546 <__sflush_r+0x1a>
 8005552:	2300      	movs	r3, #0
 8005554:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005558:	682f      	ldr	r7, [r5, #0]
 800555a:	6a21      	ldr	r1, [r4, #32]
 800555c:	602b      	str	r3, [r5, #0]
 800555e:	d032      	beq.n	80055c6 <__sflush_r+0x9a>
 8005560:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005562:	89a3      	ldrh	r3, [r4, #12]
 8005564:	075a      	lsls	r2, r3, #29
 8005566:	d505      	bpl.n	8005574 <__sflush_r+0x48>
 8005568:	6863      	ldr	r3, [r4, #4]
 800556a:	1ac0      	subs	r0, r0, r3
 800556c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800556e:	b10b      	cbz	r3, 8005574 <__sflush_r+0x48>
 8005570:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005572:	1ac0      	subs	r0, r0, r3
 8005574:	2300      	movs	r3, #0
 8005576:	4602      	mov	r2, r0
 8005578:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800557a:	6a21      	ldr	r1, [r4, #32]
 800557c:	4628      	mov	r0, r5
 800557e:	47b0      	blx	r6
 8005580:	1c43      	adds	r3, r0, #1
 8005582:	89a3      	ldrh	r3, [r4, #12]
 8005584:	d106      	bne.n	8005594 <__sflush_r+0x68>
 8005586:	6829      	ldr	r1, [r5, #0]
 8005588:	291d      	cmp	r1, #29
 800558a:	d82b      	bhi.n	80055e4 <__sflush_r+0xb8>
 800558c:	4a29      	ldr	r2, [pc, #164]	; (8005634 <__sflush_r+0x108>)
 800558e:	410a      	asrs	r2, r1
 8005590:	07d6      	lsls	r6, r2, #31
 8005592:	d427      	bmi.n	80055e4 <__sflush_r+0xb8>
 8005594:	2200      	movs	r2, #0
 8005596:	6062      	str	r2, [r4, #4]
 8005598:	04d9      	lsls	r1, r3, #19
 800559a:	6922      	ldr	r2, [r4, #16]
 800559c:	6022      	str	r2, [r4, #0]
 800559e:	d504      	bpl.n	80055aa <__sflush_r+0x7e>
 80055a0:	1c42      	adds	r2, r0, #1
 80055a2:	d101      	bne.n	80055a8 <__sflush_r+0x7c>
 80055a4:	682b      	ldr	r3, [r5, #0]
 80055a6:	b903      	cbnz	r3, 80055aa <__sflush_r+0x7e>
 80055a8:	6560      	str	r0, [r4, #84]	; 0x54
 80055aa:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80055ac:	602f      	str	r7, [r5, #0]
 80055ae:	2900      	cmp	r1, #0
 80055b0:	d0c9      	beq.n	8005546 <__sflush_r+0x1a>
 80055b2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80055b6:	4299      	cmp	r1, r3
 80055b8:	d002      	beq.n	80055c0 <__sflush_r+0x94>
 80055ba:	4628      	mov	r0, r5
 80055bc:	f7ff f9f6 	bl	80049ac <_free_r>
 80055c0:	2000      	movs	r0, #0
 80055c2:	6360      	str	r0, [r4, #52]	; 0x34
 80055c4:	e7c0      	b.n	8005548 <__sflush_r+0x1c>
 80055c6:	2301      	movs	r3, #1
 80055c8:	4628      	mov	r0, r5
 80055ca:	47b0      	blx	r6
 80055cc:	1c41      	adds	r1, r0, #1
 80055ce:	d1c8      	bne.n	8005562 <__sflush_r+0x36>
 80055d0:	682b      	ldr	r3, [r5, #0]
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d0c5      	beq.n	8005562 <__sflush_r+0x36>
 80055d6:	2b1d      	cmp	r3, #29
 80055d8:	d001      	beq.n	80055de <__sflush_r+0xb2>
 80055da:	2b16      	cmp	r3, #22
 80055dc:	d101      	bne.n	80055e2 <__sflush_r+0xb6>
 80055de:	602f      	str	r7, [r5, #0]
 80055e0:	e7b1      	b.n	8005546 <__sflush_r+0x1a>
 80055e2:	89a3      	ldrh	r3, [r4, #12]
 80055e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80055e8:	81a3      	strh	r3, [r4, #12]
 80055ea:	e7ad      	b.n	8005548 <__sflush_r+0x1c>
 80055ec:	690f      	ldr	r7, [r1, #16]
 80055ee:	2f00      	cmp	r7, #0
 80055f0:	d0a9      	beq.n	8005546 <__sflush_r+0x1a>
 80055f2:	0793      	lsls	r3, r2, #30
 80055f4:	680e      	ldr	r6, [r1, #0]
 80055f6:	bf08      	it	eq
 80055f8:	694b      	ldreq	r3, [r1, #20]
 80055fa:	600f      	str	r7, [r1, #0]
 80055fc:	bf18      	it	ne
 80055fe:	2300      	movne	r3, #0
 8005600:	eba6 0807 	sub.w	r8, r6, r7
 8005604:	608b      	str	r3, [r1, #8]
 8005606:	f1b8 0f00 	cmp.w	r8, #0
 800560a:	dd9c      	ble.n	8005546 <__sflush_r+0x1a>
 800560c:	6a21      	ldr	r1, [r4, #32]
 800560e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005610:	4643      	mov	r3, r8
 8005612:	463a      	mov	r2, r7
 8005614:	4628      	mov	r0, r5
 8005616:	47b0      	blx	r6
 8005618:	2800      	cmp	r0, #0
 800561a:	dc06      	bgt.n	800562a <__sflush_r+0xfe>
 800561c:	89a3      	ldrh	r3, [r4, #12]
 800561e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005622:	81a3      	strh	r3, [r4, #12]
 8005624:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005628:	e78e      	b.n	8005548 <__sflush_r+0x1c>
 800562a:	4407      	add	r7, r0
 800562c:	eba8 0800 	sub.w	r8, r8, r0
 8005630:	e7e9      	b.n	8005606 <__sflush_r+0xda>
 8005632:	bf00      	nop
 8005634:	dfbffffe 	.word	0xdfbffffe

08005638 <_fflush_r>:
 8005638:	b538      	push	{r3, r4, r5, lr}
 800563a:	690b      	ldr	r3, [r1, #16]
 800563c:	4605      	mov	r5, r0
 800563e:	460c      	mov	r4, r1
 8005640:	b913      	cbnz	r3, 8005648 <_fflush_r+0x10>
 8005642:	2500      	movs	r5, #0
 8005644:	4628      	mov	r0, r5
 8005646:	bd38      	pop	{r3, r4, r5, pc}
 8005648:	b118      	cbz	r0, 8005652 <_fflush_r+0x1a>
 800564a:	6a03      	ldr	r3, [r0, #32]
 800564c:	b90b      	cbnz	r3, 8005652 <_fflush_r+0x1a>
 800564e:	f7fe fa1f 	bl	8003a90 <__sinit>
 8005652:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005656:	2b00      	cmp	r3, #0
 8005658:	d0f3      	beq.n	8005642 <_fflush_r+0xa>
 800565a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800565c:	07d0      	lsls	r0, r2, #31
 800565e:	d404      	bmi.n	800566a <_fflush_r+0x32>
 8005660:	0599      	lsls	r1, r3, #22
 8005662:	d402      	bmi.n	800566a <_fflush_r+0x32>
 8005664:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005666:	f7fe fb24 	bl	8003cb2 <__retarget_lock_acquire_recursive>
 800566a:	4628      	mov	r0, r5
 800566c:	4621      	mov	r1, r4
 800566e:	f7ff ff5d 	bl	800552c <__sflush_r>
 8005672:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005674:	07da      	lsls	r2, r3, #31
 8005676:	4605      	mov	r5, r0
 8005678:	d4e4      	bmi.n	8005644 <_fflush_r+0xc>
 800567a:	89a3      	ldrh	r3, [r4, #12]
 800567c:	059b      	lsls	r3, r3, #22
 800567e:	d4e1      	bmi.n	8005644 <_fflush_r+0xc>
 8005680:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005682:	f7fe fb17 	bl	8003cb4 <__retarget_lock_release_recursive>
 8005686:	e7dd      	b.n	8005644 <_fflush_r+0xc>

08005688 <_putc_r>:
 8005688:	b570      	push	{r4, r5, r6, lr}
 800568a:	460d      	mov	r5, r1
 800568c:	4614      	mov	r4, r2
 800568e:	4606      	mov	r6, r0
 8005690:	b118      	cbz	r0, 800569a <_putc_r+0x12>
 8005692:	6a03      	ldr	r3, [r0, #32]
 8005694:	b90b      	cbnz	r3, 800569a <_putc_r+0x12>
 8005696:	f7fe f9fb 	bl	8003a90 <__sinit>
 800569a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800569c:	07d8      	lsls	r0, r3, #31
 800569e:	d405      	bmi.n	80056ac <_putc_r+0x24>
 80056a0:	89a3      	ldrh	r3, [r4, #12]
 80056a2:	0599      	lsls	r1, r3, #22
 80056a4:	d402      	bmi.n	80056ac <_putc_r+0x24>
 80056a6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80056a8:	f7fe fb03 	bl	8003cb2 <__retarget_lock_acquire_recursive>
 80056ac:	68a3      	ldr	r3, [r4, #8]
 80056ae:	3b01      	subs	r3, #1
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	60a3      	str	r3, [r4, #8]
 80056b4:	da05      	bge.n	80056c2 <_putc_r+0x3a>
 80056b6:	69a2      	ldr	r2, [r4, #24]
 80056b8:	4293      	cmp	r3, r2
 80056ba:	db12      	blt.n	80056e2 <_putc_r+0x5a>
 80056bc:	b2eb      	uxtb	r3, r5
 80056be:	2b0a      	cmp	r3, #10
 80056c0:	d00f      	beq.n	80056e2 <_putc_r+0x5a>
 80056c2:	6823      	ldr	r3, [r4, #0]
 80056c4:	1c5a      	adds	r2, r3, #1
 80056c6:	6022      	str	r2, [r4, #0]
 80056c8:	701d      	strb	r5, [r3, #0]
 80056ca:	b2ed      	uxtb	r5, r5
 80056cc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80056ce:	07da      	lsls	r2, r3, #31
 80056d0:	d405      	bmi.n	80056de <_putc_r+0x56>
 80056d2:	89a3      	ldrh	r3, [r4, #12]
 80056d4:	059b      	lsls	r3, r3, #22
 80056d6:	d402      	bmi.n	80056de <_putc_r+0x56>
 80056d8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80056da:	f7fe faeb 	bl	8003cb4 <__retarget_lock_release_recursive>
 80056de:	4628      	mov	r0, r5
 80056e0:	bd70      	pop	{r4, r5, r6, pc}
 80056e2:	4629      	mov	r1, r5
 80056e4:	4622      	mov	r2, r4
 80056e6:	4630      	mov	r0, r6
 80056e8:	f000 f802 	bl	80056f0 <__swbuf_r>
 80056ec:	4605      	mov	r5, r0
 80056ee:	e7ed      	b.n	80056cc <_putc_r+0x44>

080056f0 <__swbuf_r>:
 80056f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80056f2:	460e      	mov	r6, r1
 80056f4:	4614      	mov	r4, r2
 80056f6:	4605      	mov	r5, r0
 80056f8:	b118      	cbz	r0, 8005702 <__swbuf_r+0x12>
 80056fa:	6a03      	ldr	r3, [r0, #32]
 80056fc:	b90b      	cbnz	r3, 8005702 <__swbuf_r+0x12>
 80056fe:	f7fe f9c7 	bl	8003a90 <__sinit>
 8005702:	69a3      	ldr	r3, [r4, #24]
 8005704:	60a3      	str	r3, [r4, #8]
 8005706:	89a3      	ldrh	r3, [r4, #12]
 8005708:	071a      	lsls	r2, r3, #28
 800570a:	d525      	bpl.n	8005758 <__swbuf_r+0x68>
 800570c:	6923      	ldr	r3, [r4, #16]
 800570e:	b31b      	cbz	r3, 8005758 <__swbuf_r+0x68>
 8005710:	6823      	ldr	r3, [r4, #0]
 8005712:	6922      	ldr	r2, [r4, #16]
 8005714:	1a98      	subs	r0, r3, r2
 8005716:	6963      	ldr	r3, [r4, #20]
 8005718:	b2f6      	uxtb	r6, r6
 800571a:	4283      	cmp	r3, r0
 800571c:	4637      	mov	r7, r6
 800571e:	dc04      	bgt.n	800572a <__swbuf_r+0x3a>
 8005720:	4621      	mov	r1, r4
 8005722:	4628      	mov	r0, r5
 8005724:	f7ff ff88 	bl	8005638 <_fflush_r>
 8005728:	b9e0      	cbnz	r0, 8005764 <__swbuf_r+0x74>
 800572a:	68a3      	ldr	r3, [r4, #8]
 800572c:	3b01      	subs	r3, #1
 800572e:	60a3      	str	r3, [r4, #8]
 8005730:	6823      	ldr	r3, [r4, #0]
 8005732:	1c5a      	adds	r2, r3, #1
 8005734:	6022      	str	r2, [r4, #0]
 8005736:	701e      	strb	r6, [r3, #0]
 8005738:	6962      	ldr	r2, [r4, #20]
 800573a:	1c43      	adds	r3, r0, #1
 800573c:	429a      	cmp	r2, r3
 800573e:	d004      	beq.n	800574a <__swbuf_r+0x5a>
 8005740:	89a3      	ldrh	r3, [r4, #12]
 8005742:	07db      	lsls	r3, r3, #31
 8005744:	d506      	bpl.n	8005754 <__swbuf_r+0x64>
 8005746:	2e0a      	cmp	r6, #10
 8005748:	d104      	bne.n	8005754 <__swbuf_r+0x64>
 800574a:	4621      	mov	r1, r4
 800574c:	4628      	mov	r0, r5
 800574e:	f7ff ff73 	bl	8005638 <_fflush_r>
 8005752:	b938      	cbnz	r0, 8005764 <__swbuf_r+0x74>
 8005754:	4638      	mov	r0, r7
 8005756:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005758:	4621      	mov	r1, r4
 800575a:	4628      	mov	r0, r5
 800575c:	f000 f806 	bl	800576c <__swsetup_r>
 8005760:	2800      	cmp	r0, #0
 8005762:	d0d5      	beq.n	8005710 <__swbuf_r+0x20>
 8005764:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8005768:	e7f4      	b.n	8005754 <__swbuf_r+0x64>
	...

0800576c <__swsetup_r>:
 800576c:	b538      	push	{r3, r4, r5, lr}
 800576e:	4b2a      	ldr	r3, [pc, #168]	; (8005818 <__swsetup_r+0xac>)
 8005770:	4605      	mov	r5, r0
 8005772:	6818      	ldr	r0, [r3, #0]
 8005774:	460c      	mov	r4, r1
 8005776:	b118      	cbz	r0, 8005780 <__swsetup_r+0x14>
 8005778:	6a03      	ldr	r3, [r0, #32]
 800577a:	b90b      	cbnz	r3, 8005780 <__swsetup_r+0x14>
 800577c:	f7fe f988 	bl	8003a90 <__sinit>
 8005780:	89a3      	ldrh	r3, [r4, #12]
 8005782:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005786:	0718      	lsls	r0, r3, #28
 8005788:	d422      	bmi.n	80057d0 <__swsetup_r+0x64>
 800578a:	06d9      	lsls	r1, r3, #27
 800578c:	d407      	bmi.n	800579e <__swsetup_r+0x32>
 800578e:	2309      	movs	r3, #9
 8005790:	602b      	str	r3, [r5, #0]
 8005792:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005796:	81a3      	strh	r3, [r4, #12]
 8005798:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800579c:	e034      	b.n	8005808 <__swsetup_r+0x9c>
 800579e:	0758      	lsls	r0, r3, #29
 80057a0:	d512      	bpl.n	80057c8 <__swsetup_r+0x5c>
 80057a2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80057a4:	b141      	cbz	r1, 80057b8 <__swsetup_r+0x4c>
 80057a6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80057aa:	4299      	cmp	r1, r3
 80057ac:	d002      	beq.n	80057b4 <__swsetup_r+0x48>
 80057ae:	4628      	mov	r0, r5
 80057b0:	f7ff f8fc 	bl	80049ac <_free_r>
 80057b4:	2300      	movs	r3, #0
 80057b6:	6363      	str	r3, [r4, #52]	; 0x34
 80057b8:	89a3      	ldrh	r3, [r4, #12]
 80057ba:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80057be:	81a3      	strh	r3, [r4, #12]
 80057c0:	2300      	movs	r3, #0
 80057c2:	6063      	str	r3, [r4, #4]
 80057c4:	6923      	ldr	r3, [r4, #16]
 80057c6:	6023      	str	r3, [r4, #0]
 80057c8:	89a3      	ldrh	r3, [r4, #12]
 80057ca:	f043 0308 	orr.w	r3, r3, #8
 80057ce:	81a3      	strh	r3, [r4, #12]
 80057d0:	6923      	ldr	r3, [r4, #16]
 80057d2:	b94b      	cbnz	r3, 80057e8 <__swsetup_r+0x7c>
 80057d4:	89a3      	ldrh	r3, [r4, #12]
 80057d6:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80057da:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80057de:	d003      	beq.n	80057e8 <__swsetup_r+0x7c>
 80057e0:	4621      	mov	r1, r4
 80057e2:	4628      	mov	r0, r5
 80057e4:	f000 f8c4 	bl	8005970 <__smakebuf_r>
 80057e8:	89a0      	ldrh	r0, [r4, #12]
 80057ea:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80057ee:	f010 0301 	ands.w	r3, r0, #1
 80057f2:	d00a      	beq.n	800580a <__swsetup_r+0x9e>
 80057f4:	2300      	movs	r3, #0
 80057f6:	60a3      	str	r3, [r4, #8]
 80057f8:	6963      	ldr	r3, [r4, #20]
 80057fa:	425b      	negs	r3, r3
 80057fc:	61a3      	str	r3, [r4, #24]
 80057fe:	6923      	ldr	r3, [r4, #16]
 8005800:	b943      	cbnz	r3, 8005814 <__swsetup_r+0xa8>
 8005802:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005806:	d1c4      	bne.n	8005792 <__swsetup_r+0x26>
 8005808:	bd38      	pop	{r3, r4, r5, pc}
 800580a:	0781      	lsls	r1, r0, #30
 800580c:	bf58      	it	pl
 800580e:	6963      	ldrpl	r3, [r4, #20]
 8005810:	60a3      	str	r3, [r4, #8]
 8005812:	e7f4      	b.n	80057fe <__swsetup_r+0x92>
 8005814:	2000      	movs	r0, #0
 8005816:	e7f7      	b.n	8005808 <__swsetup_r+0x9c>
 8005818:	2000016c 	.word	0x2000016c

0800581c <_sbrk_r>:
 800581c:	b538      	push	{r3, r4, r5, lr}
 800581e:	4d06      	ldr	r5, [pc, #24]	; (8005838 <_sbrk_r+0x1c>)
 8005820:	2300      	movs	r3, #0
 8005822:	4604      	mov	r4, r0
 8005824:	4608      	mov	r0, r1
 8005826:	602b      	str	r3, [r5, #0]
 8005828:	f7fb fea8 	bl	800157c <_sbrk>
 800582c:	1c43      	adds	r3, r0, #1
 800582e:	d102      	bne.n	8005836 <_sbrk_r+0x1a>
 8005830:	682b      	ldr	r3, [r5, #0]
 8005832:	b103      	cbz	r3, 8005836 <_sbrk_r+0x1a>
 8005834:	6023      	str	r3, [r4, #0]
 8005836:	bd38      	pop	{r3, r4, r5, pc}
 8005838:	20000524 	.word	0x20000524

0800583c <memcpy>:
 800583c:	440a      	add	r2, r1
 800583e:	4291      	cmp	r1, r2
 8005840:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8005844:	d100      	bne.n	8005848 <memcpy+0xc>
 8005846:	4770      	bx	lr
 8005848:	b510      	push	{r4, lr}
 800584a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800584e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005852:	4291      	cmp	r1, r2
 8005854:	d1f9      	bne.n	800584a <memcpy+0xe>
 8005856:	bd10      	pop	{r4, pc}

08005858 <__assert_func>:
 8005858:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800585a:	4614      	mov	r4, r2
 800585c:	461a      	mov	r2, r3
 800585e:	4b09      	ldr	r3, [pc, #36]	; (8005884 <__assert_func+0x2c>)
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	4605      	mov	r5, r0
 8005864:	68d8      	ldr	r0, [r3, #12]
 8005866:	b14c      	cbz	r4, 800587c <__assert_func+0x24>
 8005868:	4b07      	ldr	r3, [pc, #28]	; (8005888 <__assert_func+0x30>)
 800586a:	9100      	str	r1, [sp, #0]
 800586c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8005870:	4906      	ldr	r1, [pc, #24]	; (800588c <__assert_func+0x34>)
 8005872:	462b      	mov	r3, r5
 8005874:	f000 f844 	bl	8005900 <fiprintf>
 8005878:	f000 f8d8 	bl	8005a2c <abort>
 800587c:	4b04      	ldr	r3, [pc, #16]	; (8005890 <__assert_func+0x38>)
 800587e:	461c      	mov	r4, r3
 8005880:	e7f3      	b.n	800586a <__assert_func+0x12>
 8005882:	bf00      	nop
 8005884:	2000016c 	.word	0x2000016c
 8005888:	08005d8f 	.word	0x08005d8f
 800588c:	08005d9c 	.word	0x08005d9c
 8005890:	08005dca 	.word	0x08005dca

08005894 <_calloc_r>:
 8005894:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005896:	fba1 2402 	umull	r2, r4, r1, r2
 800589a:	b94c      	cbnz	r4, 80058b0 <_calloc_r+0x1c>
 800589c:	4611      	mov	r1, r2
 800589e:	9201      	str	r2, [sp, #4]
 80058a0:	f7ff f8f8 	bl	8004a94 <_malloc_r>
 80058a4:	9a01      	ldr	r2, [sp, #4]
 80058a6:	4605      	mov	r5, r0
 80058a8:	b930      	cbnz	r0, 80058b8 <_calloc_r+0x24>
 80058aa:	4628      	mov	r0, r5
 80058ac:	b003      	add	sp, #12
 80058ae:	bd30      	pop	{r4, r5, pc}
 80058b0:	220c      	movs	r2, #12
 80058b2:	6002      	str	r2, [r0, #0]
 80058b4:	2500      	movs	r5, #0
 80058b6:	e7f8      	b.n	80058aa <_calloc_r+0x16>
 80058b8:	4621      	mov	r1, r4
 80058ba:	f7fe f97c 	bl	8003bb6 <memset>
 80058be:	e7f4      	b.n	80058aa <_calloc_r+0x16>

080058c0 <__ascii_mbtowc>:
 80058c0:	b082      	sub	sp, #8
 80058c2:	b901      	cbnz	r1, 80058c6 <__ascii_mbtowc+0x6>
 80058c4:	a901      	add	r1, sp, #4
 80058c6:	b142      	cbz	r2, 80058da <__ascii_mbtowc+0x1a>
 80058c8:	b14b      	cbz	r3, 80058de <__ascii_mbtowc+0x1e>
 80058ca:	7813      	ldrb	r3, [r2, #0]
 80058cc:	600b      	str	r3, [r1, #0]
 80058ce:	7812      	ldrb	r2, [r2, #0]
 80058d0:	1e10      	subs	r0, r2, #0
 80058d2:	bf18      	it	ne
 80058d4:	2001      	movne	r0, #1
 80058d6:	b002      	add	sp, #8
 80058d8:	4770      	bx	lr
 80058da:	4610      	mov	r0, r2
 80058dc:	e7fb      	b.n	80058d6 <__ascii_mbtowc+0x16>
 80058de:	f06f 0001 	mvn.w	r0, #1
 80058e2:	e7f8      	b.n	80058d6 <__ascii_mbtowc+0x16>

080058e4 <__ascii_wctomb>:
 80058e4:	b149      	cbz	r1, 80058fa <__ascii_wctomb+0x16>
 80058e6:	2aff      	cmp	r2, #255	; 0xff
 80058e8:	bf85      	ittet	hi
 80058ea:	238a      	movhi	r3, #138	; 0x8a
 80058ec:	6003      	strhi	r3, [r0, #0]
 80058ee:	700a      	strbls	r2, [r1, #0]
 80058f0:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 80058f4:	bf98      	it	ls
 80058f6:	2001      	movls	r0, #1
 80058f8:	4770      	bx	lr
 80058fa:	4608      	mov	r0, r1
 80058fc:	4770      	bx	lr
	...

08005900 <fiprintf>:
 8005900:	b40e      	push	{r1, r2, r3}
 8005902:	b503      	push	{r0, r1, lr}
 8005904:	4601      	mov	r1, r0
 8005906:	ab03      	add	r3, sp, #12
 8005908:	4805      	ldr	r0, [pc, #20]	; (8005920 <fiprintf+0x20>)
 800590a:	f853 2b04 	ldr.w	r2, [r3], #4
 800590e:	6800      	ldr	r0, [r0, #0]
 8005910:	9301      	str	r3, [sp, #4]
 8005912:	f7ff fcf1 	bl	80052f8 <_vfiprintf_r>
 8005916:	b002      	add	sp, #8
 8005918:	f85d eb04 	ldr.w	lr, [sp], #4
 800591c:	b003      	add	sp, #12
 800591e:	4770      	bx	lr
 8005920:	2000016c 	.word	0x2000016c

08005924 <__swhatbuf_r>:
 8005924:	b570      	push	{r4, r5, r6, lr}
 8005926:	460c      	mov	r4, r1
 8005928:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800592c:	2900      	cmp	r1, #0
 800592e:	b096      	sub	sp, #88	; 0x58
 8005930:	4615      	mov	r5, r2
 8005932:	461e      	mov	r6, r3
 8005934:	da0d      	bge.n	8005952 <__swhatbuf_r+0x2e>
 8005936:	89a3      	ldrh	r3, [r4, #12]
 8005938:	f013 0f80 	tst.w	r3, #128	; 0x80
 800593c:	f04f 0100 	mov.w	r1, #0
 8005940:	bf0c      	ite	eq
 8005942:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8005946:	2340      	movne	r3, #64	; 0x40
 8005948:	2000      	movs	r0, #0
 800594a:	6031      	str	r1, [r6, #0]
 800594c:	602b      	str	r3, [r5, #0]
 800594e:	b016      	add	sp, #88	; 0x58
 8005950:	bd70      	pop	{r4, r5, r6, pc}
 8005952:	466a      	mov	r2, sp
 8005954:	f000 f848 	bl	80059e8 <_fstat_r>
 8005958:	2800      	cmp	r0, #0
 800595a:	dbec      	blt.n	8005936 <__swhatbuf_r+0x12>
 800595c:	9901      	ldr	r1, [sp, #4]
 800595e:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8005962:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8005966:	4259      	negs	r1, r3
 8005968:	4159      	adcs	r1, r3
 800596a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800596e:	e7eb      	b.n	8005948 <__swhatbuf_r+0x24>

08005970 <__smakebuf_r>:
 8005970:	898b      	ldrh	r3, [r1, #12]
 8005972:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005974:	079d      	lsls	r5, r3, #30
 8005976:	4606      	mov	r6, r0
 8005978:	460c      	mov	r4, r1
 800597a:	d507      	bpl.n	800598c <__smakebuf_r+0x1c>
 800597c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005980:	6023      	str	r3, [r4, #0]
 8005982:	6123      	str	r3, [r4, #16]
 8005984:	2301      	movs	r3, #1
 8005986:	6163      	str	r3, [r4, #20]
 8005988:	b002      	add	sp, #8
 800598a:	bd70      	pop	{r4, r5, r6, pc}
 800598c:	ab01      	add	r3, sp, #4
 800598e:	466a      	mov	r2, sp
 8005990:	f7ff ffc8 	bl	8005924 <__swhatbuf_r>
 8005994:	9900      	ldr	r1, [sp, #0]
 8005996:	4605      	mov	r5, r0
 8005998:	4630      	mov	r0, r6
 800599a:	f7ff f87b 	bl	8004a94 <_malloc_r>
 800599e:	b948      	cbnz	r0, 80059b4 <__smakebuf_r+0x44>
 80059a0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80059a4:	059a      	lsls	r2, r3, #22
 80059a6:	d4ef      	bmi.n	8005988 <__smakebuf_r+0x18>
 80059a8:	f023 0303 	bic.w	r3, r3, #3
 80059ac:	f043 0302 	orr.w	r3, r3, #2
 80059b0:	81a3      	strh	r3, [r4, #12]
 80059b2:	e7e3      	b.n	800597c <__smakebuf_r+0xc>
 80059b4:	89a3      	ldrh	r3, [r4, #12]
 80059b6:	6020      	str	r0, [r4, #0]
 80059b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80059bc:	81a3      	strh	r3, [r4, #12]
 80059be:	9b00      	ldr	r3, [sp, #0]
 80059c0:	6163      	str	r3, [r4, #20]
 80059c2:	9b01      	ldr	r3, [sp, #4]
 80059c4:	6120      	str	r0, [r4, #16]
 80059c6:	b15b      	cbz	r3, 80059e0 <__smakebuf_r+0x70>
 80059c8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80059cc:	4630      	mov	r0, r6
 80059ce:	f000 f81d 	bl	8005a0c <_isatty_r>
 80059d2:	b128      	cbz	r0, 80059e0 <__smakebuf_r+0x70>
 80059d4:	89a3      	ldrh	r3, [r4, #12]
 80059d6:	f023 0303 	bic.w	r3, r3, #3
 80059da:	f043 0301 	orr.w	r3, r3, #1
 80059de:	81a3      	strh	r3, [r4, #12]
 80059e0:	89a3      	ldrh	r3, [r4, #12]
 80059e2:	431d      	orrs	r5, r3
 80059e4:	81a5      	strh	r5, [r4, #12]
 80059e6:	e7cf      	b.n	8005988 <__smakebuf_r+0x18>

080059e8 <_fstat_r>:
 80059e8:	b538      	push	{r3, r4, r5, lr}
 80059ea:	4d07      	ldr	r5, [pc, #28]	; (8005a08 <_fstat_r+0x20>)
 80059ec:	2300      	movs	r3, #0
 80059ee:	4604      	mov	r4, r0
 80059f0:	4608      	mov	r0, r1
 80059f2:	4611      	mov	r1, r2
 80059f4:	602b      	str	r3, [r5, #0]
 80059f6:	f7fb fdb8 	bl	800156a <_fstat>
 80059fa:	1c43      	adds	r3, r0, #1
 80059fc:	d102      	bne.n	8005a04 <_fstat_r+0x1c>
 80059fe:	682b      	ldr	r3, [r5, #0]
 8005a00:	b103      	cbz	r3, 8005a04 <_fstat_r+0x1c>
 8005a02:	6023      	str	r3, [r4, #0]
 8005a04:	bd38      	pop	{r3, r4, r5, pc}
 8005a06:	bf00      	nop
 8005a08:	20000524 	.word	0x20000524

08005a0c <_isatty_r>:
 8005a0c:	b538      	push	{r3, r4, r5, lr}
 8005a0e:	4d06      	ldr	r5, [pc, #24]	; (8005a28 <_isatty_r+0x1c>)
 8005a10:	2300      	movs	r3, #0
 8005a12:	4604      	mov	r4, r0
 8005a14:	4608      	mov	r0, r1
 8005a16:	602b      	str	r3, [r5, #0]
 8005a18:	f7fb fdac 	bl	8001574 <_isatty>
 8005a1c:	1c43      	adds	r3, r0, #1
 8005a1e:	d102      	bne.n	8005a26 <_isatty_r+0x1a>
 8005a20:	682b      	ldr	r3, [r5, #0]
 8005a22:	b103      	cbz	r3, 8005a26 <_isatty_r+0x1a>
 8005a24:	6023      	str	r3, [r4, #0]
 8005a26:	bd38      	pop	{r3, r4, r5, pc}
 8005a28:	20000524 	.word	0x20000524

08005a2c <abort>:
 8005a2c:	b508      	push	{r3, lr}
 8005a2e:	2006      	movs	r0, #6
 8005a30:	f000 f82c 	bl	8005a8c <raise>
 8005a34:	2001      	movs	r0, #1
 8005a36:	f7fb fd7f 	bl	8001538 <_exit>

08005a3a <_raise_r>:
 8005a3a:	291f      	cmp	r1, #31
 8005a3c:	b538      	push	{r3, r4, r5, lr}
 8005a3e:	4604      	mov	r4, r0
 8005a40:	460d      	mov	r5, r1
 8005a42:	d904      	bls.n	8005a4e <_raise_r+0x14>
 8005a44:	2316      	movs	r3, #22
 8005a46:	6003      	str	r3, [r0, #0]
 8005a48:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005a4c:	bd38      	pop	{r3, r4, r5, pc}
 8005a4e:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8005a50:	b112      	cbz	r2, 8005a58 <_raise_r+0x1e>
 8005a52:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8005a56:	b94b      	cbnz	r3, 8005a6c <_raise_r+0x32>
 8005a58:	4620      	mov	r0, r4
 8005a5a:	f000 f831 	bl	8005ac0 <_getpid_r>
 8005a5e:	462a      	mov	r2, r5
 8005a60:	4601      	mov	r1, r0
 8005a62:	4620      	mov	r0, r4
 8005a64:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005a68:	f000 b818 	b.w	8005a9c <_kill_r>
 8005a6c:	2b01      	cmp	r3, #1
 8005a6e:	d00a      	beq.n	8005a86 <_raise_r+0x4c>
 8005a70:	1c59      	adds	r1, r3, #1
 8005a72:	d103      	bne.n	8005a7c <_raise_r+0x42>
 8005a74:	2316      	movs	r3, #22
 8005a76:	6003      	str	r3, [r0, #0]
 8005a78:	2001      	movs	r0, #1
 8005a7a:	e7e7      	b.n	8005a4c <_raise_r+0x12>
 8005a7c:	2400      	movs	r4, #0
 8005a7e:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8005a82:	4628      	mov	r0, r5
 8005a84:	4798      	blx	r3
 8005a86:	2000      	movs	r0, #0
 8005a88:	e7e0      	b.n	8005a4c <_raise_r+0x12>
	...

08005a8c <raise>:
 8005a8c:	4b02      	ldr	r3, [pc, #8]	; (8005a98 <raise+0xc>)
 8005a8e:	4601      	mov	r1, r0
 8005a90:	6818      	ldr	r0, [r3, #0]
 8005a92:	f7ff bfd2 	b.w	8005a3a <_raise_r>
 8005a96:	bf00      	nop
 8005a98:	2000016c 	.word	0x2000016c

08005a9c <_kill_r>:
 8005a9c:	b538      	push	{r3, r4, r5, lr}
 8005a9e:	4d07      	ldr	r5, [pc, #28]	; (8005abc <_kill_r+0x20>)
 8005aa0:	2300      	movs	r3, #0
 8005aa2:	4604      	mov	r4, r0
 8005aa4:	4608      	mov	r0, r1
 8005aa6:	4611      	mov	r1, r2
 8005aa8:	602b      	str	r3, [r5, #0]
 8005aaa:	f7fb fd3d 	bl	8001528 <_kill>
 8005aae:	1c43      	adds	r3, r0, #1
 8005ab0:	d102      	bne.n	8005ab8 <_kill_r+0x1c>
 8005ab2:	682b      	ldr	r3, [r5, #0]
 8005ab4:	b103      	cbz	r3, 8005ab8 <_kill_r+0x1c>
 8005ab6:	6023      	str	r3, [r4, #0]
 8005ab8:	bd38      	pop	{r3, r4, r5, pc}
 8005aba:	bf00      	nop
 8005abc:	20000524 	.word	0x20000524

08005ac0 <_getpid_r>:
 8005ac0:	f7fb bd30 	b.w	8001524 <_getpid>

08005ac4 <_init>:
 8005ac4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ac6:	bf00      	nop
 8005ac8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005aca:	bc08      	pop	{r3}
 8005acc:	469e      	mov	lr, r3
 8005ace:	4770      	bx	lr

08005ad0 <_fini>:
 8005ad0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ad2:	bf00      	nop
 8005ad4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005ad6:	bc08      	pop	{r3}
 8005ad8:	469e      	mov	lr, r3
 8005ada:	4770      	bx	lr
