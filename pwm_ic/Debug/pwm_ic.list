
pwm_ic.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000059fc  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000454  08005ba0  08005ba0  00015ba0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005ff4  08005ff4  0002023c  2**0
                  CONTENTS
  4 .ARM          00000008  08005ff4  08005ff4  00015ff4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005ffc  08005ffc  0002023c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005ffc  08005ffc  00015ffc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006000  08006000  00016000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000023c  20000000  08006004  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000011c  2000023c  08006240  0002023c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000358  08006240  00020358  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002023c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000127c2  00000000  00000000  0002026c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002042  00000000  00000000  00032a2e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    0000d313  00000000  00000000  00034a70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000bd8  00000000  00000000  00041d88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000b90  00000000  00000000  00042960  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00017229  00000000  00000000  000434f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00011f7b  00000000  00000000  0005a719  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008f601  00000000  00000000  0006c694  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  000fbc95  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003100  00000000  00000000  000fbce8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000023c 	.word	0x2000023c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08005b84 	.word	0x08005b84

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000240 	.word	0x20000240
 80001dc:	08005b84 	.word	0x08005b84

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_uldivmod>:
 8000bb8:	b953      	cbnz	r3, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bba:	b94a      	cbnz	r2, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bbc:	2900      	cmp	r1, #0
 8000bbe:	bf08      	it	eq
 8000bc0:	2800      	cmpeq	r0, #0
 8000bc2:	bf1c      	itt	ne
 8000bc4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000bc8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000bcc:	f000 b96e 	b.w	8000eac <__aeabi_idiv0>
 8000bd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bd8:	f000 f806 	bl	8000be8 <__udivmoddi4>
 8000bdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000be0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000be4:	b004      	add	sp, #16
 8000be6:	4770      	bx	lr

08000be8 <__udivmoddi4>:
 8000be8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bec:	9d08      	ldr	r5, [sp, #32]
 8000bee:	4604      	mov	r4, r0
 8000bf0:	468c      	mov	ip, r1
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	f040 8083 	bne.w	8000cfe <__udivmoddi4+0x116>
 8000bf8:	428a      	cmp	r2, r1
 8000bfa:	4617      	mov	r7, r2
 8000bfc:	d947      	bls.n	8000c8e <__udivmoddi4+0xa6>
 8000bfe:	fab2 f282 	clz	r2, r2
 8000c02:	b142      	cbz	r2, 8000c16 <__udivmoddi4+0x2e>
 8000c04:	f1c2 0020 	rsb	r0, r2, #32
 8000c08:	fa24 f000 	lsr.w	r0, r4, r0
 8000c0c:	4091      	lsls	r1, r2
 8000c0e:	4097      	lsls	r7, r2
 8000c10:	ea40 0c01 	orr.w	ip, r0, r1
 8000c14:	4094      	lsls	r4, r2
 8000c16:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c1a:	0c23      	lsrs	r3, r4, #16
 8000c1c:	fbbc f6f8 	udiv	r6, ip, r8
 8000c20:	fa1f fe87 	uxth.w	lr, r7
 8000c24:	fb08 c116 	mls	r1, r8, r6, ip
 8000c28:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c2c:	fb06 f10e 	mul.w	r1, r6, lr
 8000c30:	4299      	cmp	r1, r3
 8000c32:	d909      	bls.n	8000c48 <__udivmoddi4+0x60>
 8000c34:	18fb      	adds	r3, r7, r3
 8000c36:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000c3a:	f080 8119 	bcs.w	8000e70 <__udivmoddi4+0x288>
 8000c3e:	4299      	cmp	r1, r3
 8000c40:	f240 8116 	bls.w	8000e70 <__udivmoddi4+0x288>
 8000c44:	3e02      	subs	r6, #2
 8000c46:	443b      	add	r3, r7
 8000c48:	1a5b      	subs	r3, r3, r1
 8000c4a:	b2a4      	uxth	r4, r4
 8000c4c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c50:	fb08 3310 	mls	r3, r8, r0, r3
 8000c54:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c58:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c5c:	45a6      	cmp	lr, r4
 8000c5e:	d909      	bls.n	8000c74 <__udivmoddi4+0x8c>
 8000c60:	193c      	adds	r4, r7, r4
 8000c62:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000c66:	f080 8105 	bcs.w	8000e74 <__udivmoddi4+0x28c>
 8000c6a:	45a6      	cmp	lr, r4
 8000c6c:	f240 8102 	bls.w	8000e74 <__udivmoddi4+0x28c>
 8000c70:	3802      	subs	r0, #2
 8000c72:	443c      	add	r4, r7
 8000c74:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c78:	eba4 040e 	sub.w	r4, r4, lr
 8000c7c:	2600      	movs	r6, #0
 8000c7e:	b11d      	cbz	r5, 8000c88 <__udivmoddi4+0xa0>
 8000c80:	40d4      	lsrs	r4, r2
 8000c82:	2300      	movs	r3, #0
 8000c84:	e9c5 4300 	strd	r4, r3, [r5]
 8000c88:	4631      	mov	r1, r6
 8000c8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c8e:	b902      	cbnz	r2, 8000c92 <__udivmoddi4+0xaa>
 8000c90:	deff      	udf	#255	; 0xff
 8000c92:	fab2 f282 	clz	r2, r2
 8000c96:	2a00      	cmp	r2, #0
 8000c98:	d150      	bne.n	8000d3c <__udivmoddi4+0x154>
 8000c9a:	1bcb      	subs	r3, r1, r7
 8000c9c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ca0:	fa1f f887 	uxth.w	r8, r7
 8000ca4:	2601      	movs	r6, #1
 8000ca6:	fbb3 fcfe 	udiv	ip, r3, lr
 8000caa:	0c21      	lsrs	r1, r4, #16
 8000cac:	fb0e 331c 	mls	r3, lr, ip, r3
 8000cb0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cb4:	fb08 f30c 	mul.w	r3, r8, ip
 8000cb8:	428b      	cmp	r3, r1
 8000cba:	d907      	bls.n	8000ccc <__udivmoddi4+0xe4>
 8000cbc:	1879      	adds	r1, r7, r1
 8000cbe:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000cc2:	d202      	bcs.n	8000cca <__udivmoddi4+0xe2>
 8000cc4:	428b      	cmp	r3, r1
 8000cc6:	f200 80e9 	bhi.w	8000e9c <__udivmoddi4+0x2b4>
 8000cca:	4684      	mov	ip, r0
 8000ccc:	1ac9      	subs	r1, r1, r3
 8000cce:	b2a3      	uxth	r3, r4
 8000cd0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000cd4:	fb0e 1110 	mls	r1, lr, r0, r1
 8000cd8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000cdc:	fb08 f800 	mul.w	r8, r8, r0
 8000ce0:	45a0      	cmp	r8, r4
 8000ce2:	d907      	bls.n	8000cf4 <__udivmoddi4+0x10c>
 8000ce4:	193c      	adds	r4, r7, r4
 8000ce6:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000cea:	d202      	bcs.n	8000cf2 <__udivmoddi4+0x10a>
 8000cec:	45a0      	cmp	r8, r4
 8000cee:	f200 80d9 	bhi.w	8000ea4 <__udivmoddi4+0x2bc>
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	eba4 0408 	sub.w	r4, r4, r8
 8000cf8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000cfc:	e7bf      	b.n	8000c7e <__udivmoddi4+0x96>
 8000cfe:	428b      	cmp	r3, r1
 8000d00:	d909      	bls.n	8000d16 <__udivmoddi4+0x12e>
 8000d02:	2d00      	cmp	r5, #0
 8000d04:	f000 80b1 	beq.w	8000e6a <__udivmoddi4+0x282>
 8000d08:	2600      	movs	r6, #0
 8000d0a:	e9c5 0100 	strd	r0, r1, [r5]
 8000d0e:	4630      	mov	r0, r6
 8000d10:	4631      	mov	r1, r6
 8000d12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d16:	fab3 f683 	clz	r6, r3
 8000d1a:	2e00      	cmp	r6, #0
 8000d1c:	d14a      	bne.n	8000db4 <__udivmoddi4+0x1cc>
 8000d1e:	428b      	cmp	r3, r1
 8000d20:	d302      	bcc.n	8000d28 <__udivmoddi4+0x140>
 8000d22:	4282      	cmp	r2, r0
 8000d24:	f200 80b8 	bhi.w	8000e98 <__udivmoddi4+0x2b0>
 8000d28:	1a84      	subs	r4, r0, r2
 8000d2a:	eb61 0103 	sbc.w	r1, r1, r3
 8000d2e:	2001      	movs	r0, #1
 8000d30:	468c      	mov	ip, r1
 8000d32:	2d00      	cmp	r5, #0
 8000d34:	d0a8      	beq.n	8000c88 <__udivmoddi4+0xa0>
 8000d36:	e9c5 4c00 	strd	r4, ip, [r5]
 8000d3a:	e7a5      	b.n	8000c88 <__udivmoddi4+0xa0>
 8000d3c:	f1c2 0320 	rsb	r3, r2, #32
 8000d40:	fa20 f603 	lsr.w	r6, r0, r3
 8000d44:	4097      	lsls	r7, r2
 8000d46:	fa01 f002 	lsl.w	r0, r1, r2
 8000d4a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d4e:	40d9      	lsrs	r1, r3
 8000d50:	4330      	orrs	r0, r6
 8000d52:	0c03      	lsrs	r3, r0, #16
 8000d54:	fbb1 f6fe 	udiv	r6, r1, lr
 8000d58:	fa1f f887 	uxth.w	r8, r7
 8000d5c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000d60:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d64:	fb06 f108 	mul.w	r1, r6, r8
 8000d68:	4299      	cmp	r1, r3
 8000d6a:	fa04 f402 	lsl.w	r4, r4, r2
 8000d6e:	d909      	bls.n	8000d84 <__udivmoddi4+0x19c>
 8000d70:	18fb      	adds	r3, r7, r3
 8000d72:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000d76:	f080 808d 	bcs.w	8000e94 <__udivmoddi4+0x2ac>
 8000d7a:	4299      	cmp	r1, r3
 8000d7c:	f240 808a 	bls.w	8000e94 <__udivmoddi4+0x2ac>
 8000d80:	3e02      	subs	r6, #2
 8000d82:	443b      	add	r3, r7
 8000d84:	1a5b      	subs	r3, r3, r1
 8000d86:	b281      	uxth	r1, r0
 8000d88:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d8c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d90:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d94:	fb00 f308 	mul.w	r3, r0, r8
 8000d98:	428b      	cmp	r3, r1
 8000d9a:	d907      	bls.n	8000dac <__udivmoddi4+0x1c4>
 8000d9c:	1879      	adds	r1, r7, r1
 8000d9e:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000da2:	d273      	bcs.n	8000e8c <__udivmoddi4+0x2a4>
 8000da4:	428b      	cmp	r3, r1
 8000da6:	d971      	bls.n	8000e8c <__udivmoddi4+0x2a4>
 8000da8:	3802      	subs	r0, #2
 8000daa:	4439      	add	r1, r7
 8000dac:	1acb      	subs	r3, r1, r3
 8000dae:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000db2:	e778      	b.n	8000ca6 <__udivmoddi4+0xbe>
 8000db4:	f1c6 0c20 	rsb	ip, r6, #32
 8000db8:	fa03 f406 	lsl.w	r4, r3, r6
 8000dbc:	fa22 f30c 	lsr.w	r3, r2, ip
 8000dc0:	431c      	orrs	r4, r3
 8000dc2:	fa20 f70c 	lsr.w	r7, r0, ip
 8000dc6:	fa01 f306 	lsl.w	r3, r1, r6
 8000dca:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000dce:	fa21 f10c 	lsr.w	r1, r1, ip
 8000dd2:	431f      	orrs	r7, r3
 8000dd4:	0c3b      	lsrs	r3, r7, #16
 8000dd6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000dda:	fa1f f884 	uxth.w	r8, r4
 8000dde:	fb0e 1119 	mls	r1, lr, r9, r1
 8000de2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000de6:	fb09 fa08 	mul.w	sl, r9, r8
 8000dea:	458a      	cmp	sl, r1
 8000dec:	fa02 f206 	lsl.w	r2, r2, r6
 8000df0:	fa00 f306 	lsl.w	r3, r0, r6
 8000df4:	d908      	bls.n	8000e08 <__udivmoddi4+0x220>
 8000df6:	1861      	adds	r1, r4, r1
 8000df8:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000dfc:	d248      	bcs.n	8000e90 <__udivmoddi4+0x2a8>
 8000dfe:	458a      	cmp	sl, r1
 8000e00:	d946      	bls.n	8000e90 <__udivmoddi4+0x2a8>
 8000e02:	f1a9 0902 	sub.w	r9, r9, #2
 8000e06:	4421      	add	r1, r4
 8000e08:	eba1 010a 	sub.w	r1, r1, sl
 8000e0c:	b2bf      	uxth	r7, r7
 8000e0e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e12:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e16:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000e1a:	fb00 f808 	mul.w	r8, r0, r8
 8000e1e:	45b8      	cmp	r8, r7
 8000e20:	d907      	bls.n	8000e32 <__udivmoddi4+0x24a>
 8000e22:	19e7      	adds	r7, r4, r7
 8000e24:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000e28:	d22e      	bcs.n	8000e88 <__udivmoddi4+0x2a0>
 8000e2a:	45b8      	cmp	r8, r7
 8000e2c:	d92c      	bls.n	8000e88 <__udivmoddi4+0x2a0>
 8000e2e:	3802      	subs	r0, #2
 8000e30:	4427      	add	r7, r4
 8000e32:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e36:	eba7 0708 	sub.w	r7, r7, r8
 8000e3a:	fba0 8902 	umull	r8, r9, r0, r2
 8000e3e:	454f      	cmp	r7, r9
 8000e40:	46c6      	mov	lr, r8
 8000e42:	4649      	mov	r1, r9
 8000e44:	d31a      	bcc.n	8000e7c <__udivmoddi4+0x294>
 8000e46:	d017      	beq.n	8000e78 <__udivmoddi4+0x290>
 8000e48:	b15d      	cbz	r5, 8000e62 <__udivmoddi4+0x27a>
 8000e4a:	ebb3 020e 	subs.w	r2, r3, lr
 8000e4e:	eb67 0701 	sbc.w	r7, r7, r1
 8000e52:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000e56:	40f2      	lsrs	r2, r6
 8000e58:	ea4c 0202 	orr.w	r2, ip, r2
 8000e5c:	40f7      	lsrs	r7, r6
 8000e5e:	e9c5 2700 	strd	r2, r7, [r5]
 8000e62:	2600      	movs	r6, #0
 8000e64:	4631      	mov	r1, r6
 8000e66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e6a:	462e      	mov	r6, r5
 8000e6c:	4628      	mov	r0, r5
 8000e6e:	e70b      	b.n	8000c88 <__udivmoddi4+0xa0>
 8000e70:	4606      	mov	r6, r0
 8000e72:	e6e9      	b.n	8000c48 <__udivmoddi4+0x60>
 8000e74:	4618      	mov	r0, r3
 8000e76:	e6fd      	b.n	8000c74 <__udivmoddi4+0x8c>
 8000e78:	4543      	cmp	r3, r8
 8000e7a:	d2e5      	bcs.n	8000e48 <__udivmoddi4+0x260>
 8000e7c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000e80:	eb69 0104 	sbc.w	r1, r9, r4
 8000e84:	3801      	subs	r0, #1
 8000e86:	e7df      	b.n	8000e48 <__udivmoddi4+0x260>
 8000e88:	4608      	mov	r0, r1
 8000e8a:	e7d2      	b.n	8000e32 <__udivmoddi4+0x24a>
 8000e8c:	4660      	mov	r0, ip
 8000e8e:	e78d      	b.n	8000dac <__udivmoddi4+0x1c4>
 8000e90:	4681      	mov	r9, r0
 8000e92:	e7b9      	b.n	8000e08 <__udivmoddi4+0x220>
 8000e94:	4666      	mov	r6, ip
 8000e96:	e775      	b.n	8000d84 <__udivmoddi4+0x19c>
 8000e98:	4630      	mov	r0, r6
 8000e9a:	e74a      	b.n	8000d32 <__udivmoddi4+0x14a>
 8000e9c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ea0:	4439      	add	r1, r7
 8000ea2:	e713      	b.n	8000ccc <__udivmoddi4+0xe4>
 8000ea4:	3802      	subs	r0, #2
 8000ea6:	443c      	add	r4, r7
 8000ea8:	e724      	b.n	8000cf4 <__udivmoddi4+0x10c>
 8000eaa:	bf00      	nop

08000eac <__aeabi_idiv0>:
 8000eac:	4770      	bx	lr
 8000eae:	bf00      	nop

08000eb0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000eb0:	b530      	push	{r4, r5, lr}
 8000eb2:	b08b      	sub	sp, #44	; 0x2c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eb4:	2400      	movs	r4, #0
 8000eb6:	9405      	str	r4, [sp, #20]
 8000eb8:	9406      	str	r4, [sp, #24]
 8000eba:	9407      	str	r4, [sp, #28]
 8000ebc:	9408      	str	r4, [sp, #32]
 8000ebe:	9409      	str	r4, [sp, #36]	; 0x24

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ec0:	9401      	str	r4, [sp, #4]
 8000ec2:	4b23      	ldr	r3, [pc, #140]	; (8000f50 <MX_GPIO_Init+0xa0>)
 8000ec4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000ec6:	f042 0204 	orr.w	r2, r2, #4
 8000eca:	631a      	str	r2, [r3, #48]	; 0x30
 8000ecc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000ece:	f002 0204 	and.w	r2, r2, #4
 8000ed2:	9201      	str	r2, [sp, #4]
 8000ed4:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ed6:	9402      	str	r4, [sp, #8]
 8000ed8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000eda:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000ede:	631a      	str	r2, [r3, #48]	; 0x30
 8000ee0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000ee2:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8000ee6:	9202      	str	r2, [sp, #8]
 8000ee8:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eea:	9403      	str	r4, [sp, #12]
 8000eec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000eee:	f042 0201 	orr.w	r2, r2, #1
 8000ef2:	631a      	str	r2, [r3, #48]	; 0x30
 8000ef4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000ef6:	f002 0201 	and.w	r2, r2, #1
 8000efa:	9203      	str	r2, [sp, #12]
 8000efc:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000efe:	9404      	str	r4, [sp, #16]
 8000f00:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000f02:	f042 0202 	orr.w	r2, r2, #2
 8000f06:	631a      	str	r2, [r3, #48]	; 0x30
 8000f08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f0a:	f003 0302 	and.w	r3, r3, #2
 8000f0e:	9304      	str	r3, [sp, #16]
 8000f10:	9b04      	ldr	r3, [sp, #16]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8000f12:	4d10      	ldr	r5, [pc, #64]	; (8000f54 <MX_GPIO_Init+0xa4>)
 8000f14:	2201      	movs	r2, #1
 8000f16:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f1a:	4628      	mov	r0, r5
 8000f1c:	f000 fd20 	bl	8001960 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000f20:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f24:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000f26:	2311      	movs	r3, #17
 8000f28:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f2a:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f2c:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000f2e:	a905      	add	r1, sp, #20
 8000f30:	4628      	mov	r0, r5
 8000f32:	f000 fc3d 	bl	80017b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : BTN_Pin */
  GPIO_InitStruct.Pin = BTN_Pin;
 8000f36:	2301      	movs	r3, #1
 8000f38:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000f3a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000f3e:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f40:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(BTN_GPIO_Port, &GPIO_InitStruct);
 8000f42:	a905      	add	r1, sp, #20
 8000f44:	4804      	ldr	r0, [pc, #16]	; (8000f58 <MX_GPIO_Init+0xa8>)
 8000f46:	f000 fc33 	bl	80017b0 <HAL_GPIO_Init>

}
 8000f4a:	b00b      	add	sp, #44	; 0x2c
 8000f4c:	bd30      	pop	{r4, r5, pc}
 8000f4e:	bf00      	nop
 8000f50:	40023800 	.word	0x40023800
 8000f54:	40020800 	.word	0x40020800
 8000f58:	40020000 	.word	0x40020000

08000f5c <_write>:
	if (fd == 1 || fd == 2) {
 8000f5c:	3801      	subs	r0, #1
 8000f5e:	2801      	cmp	r0, #1
 8000f60:	d80a      	bhi.n	8000f78 <_write+0x1c>
int _write(int fd, char *ptr, int len) {
 8000f62:	b510      	push	{r4, lr}
 8000f64:	4614      	mov	r4, r2
		hstatus = HAL_UART_Transmit(&huart1, (uint8_t*) ptr, len,
 8000f66:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000f6a:	b292      	uxth	r2, r2
 8000f6c:	4805      	ldr	r0, [pc, #20]	; (8000f84 <_write+0x28>)
 8000f6e:	f002 f822 	bl	8002fb6 <HAL_UART_Transmit>
		if (hstatus == HAL_OK)
 8000f72:	b920      	cbnz	r0, 8000f7e <_write+0x22>
			return len;
 8000f74:	4620      	mov	r0, r4
}
 8000f76:	bd10      	pop	{r4, pc}
	return -1;
 8000f78:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 8000f7c:	4770      	bx	lr
			return -1;
 8000f7e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000f82:	e7f8      	b.n	8000f76 <_write+0x1a>
 8000f84:	200002b8 	.word	0x200002b8

08000f88 <HAL_TIM_IC_CaptureCallback>:
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) {
 8000f88:	b538      	push	{r3, r4, r5, lr}
	if (htim->Instance == TIM2) {
 8000f8a:	6803      	ldr	r3, [r0, #0]
 8000f8c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000f90:	d000      	beq.n	8000f94 <HAL_TIM_IC_CaptureCallback+0xc>
}
 8000f92:	bd38      	pop	{r3, r4, r5, pc}
 8000f94:	4604      	mov	r4, r0
		uint32_t cl = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 8000f96:	2100      	movs	r1, #0
 8000f98:	f001 f914 	bl	80021c4 <HAL_TIM_ReadCapturedValue>
 8000f9c:	4605      	mov	r5, r0
		uint32_t ch = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2);
 8000f9e:	2104      	movs	r1, #4
 8000fa0:	4620      	mov	r0, r4
 8000fa2:	f001 f90f 	bl	80021c4 <HAL_TIM_ReadCapturedValue>
 8000fa6:	ee07 0a10 	vmov	s14, r0
		freq = (float) TIMER_CLOCK_FREQ / (cl + 1);
 8000faa:	1c6b      	adds	r3, r5, #1
 8000fac:	ee07 3a90 	vmov	s15, r3
 8000fb0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000fb4:	ed9f 6a0b 	vldr	s12, [pc, #44]	; 8000fe4 <HAL_TIM_IC_CaptureCallback+0x5c>
 8000fb8:	eec6 6a27 	vdiv.f32	s13, s12, s15
 8000fbc:	4b0a      	ldr	r3, [pc, #40]	; (8000fe8 <HAL_TIM_IC_CaptureCallback+0x60>)
 8000fbe:	edc3 6a00 	vstr	s13, [r3]
		duty = (float) 100 * ch / cl;
 8000fc2:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8000fc6:	eddf 7a09 	vldr	s15, [pc, #36]	; 8000fec <HAL_TIM_IC_CaptureCallback+0x64>
 8000fca:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000fce:	ee07 5a90 	vmov	s15, r5
 8000fd2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000fd6:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8000fda:	4b05      	ldr	r3, [pc, #20]	; (8000ff0 <HAL_TIM_IC_CaptureCallback+0x68>)
 8000fdc:	edc3 6a00 	vstr	s13, [r3]
}
 8000fe0:	e7d7      	b.n	8000f92 <HAL_TIM_IC_CaptureCallback+0xa>
 8000fe2:	bf00      	nop
 8000fe4:	4cb71b00 	.word	0x4cb71b00
 8000fe8:	2000025c 	.word	0x2000025c
 8000fec:	42c80000 	.word	0x42c80000
 8000ff0:	20000258 	.word	0x20000258

08000ff4 <Error_Handler>:
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ff4:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000ff6:	e7fe      	b.n	8000ff6 <Error_Handler+0x2>

08000ff8 <MX_TIM4_Init>:
{
 8000ff8:	b500      	push	{lr}
 8000ffa:	b08f      	sub	sp, #60	; 0x3c
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	930a      	str	r3, [sp, #40]	; 0x28
 8001000:	930b      	str	r3, [sp, #44]	; 0x2c
 8001002:	930c      	str	r3, [sp, #48]	; 0x30
 8001004:	930d      	str	r3, [sp, #52]	; 0x34
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001006:	9308      	str	r3, [sp, #32]
 8001008:	9309      	str	r3, [sp, #36]	; 0x24
  TIM_OC_InitTypeDef sConfigOC = {0};
 800100a:	9301      	str	r3, [sp, #4]
 800100c:	9302      	str	r3, [sp, #8]
 800100e:	9303      	str	r3, [sp, #12]
 8001010:	9304      	str	r3, [sp, #16]
 8001012:	9305      	str	r3, [sp, #20]
 8001014:	9306      	str	r3, [sp, #24]
 8001016:	9307      	str	r3, [sp, #28]
  htim4.Instance = TIM4;
 8001018:	481f      	ldr	r0, [pc, #124]	; (8001098 <MX_TIM4_Init+0xa0>)
 800101a:	4a20      	ldr	r2, [pc, #128]	; (800109c <MX_TIM4_Init+0xa4>)
 800101c:	6002      	str	r2, [r0, #0]
  htim4.Init.Prescaler = 47;
 800101e:	222f      	movs	r2, #47	; 0x2f
 8001020:	6042      	str	r2, [r0, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001022:	6083      	str	r3, [r0, #8]
  htim4.Init.Period = 999;
 8001024:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001028:	60c2      	str	r2, [r0, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800102a:	6103      	str	r3, [r0, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800102c:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800102e:	f001 f9f1 	bl	8002414 <HAL_TIM_Base_Init>
 8001032:	bb30      	cbnz	r0, 8001082 <MX_TIM4_Init+0x8a>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001034:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001038:	930a      	str	r3, [sp, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800103a:	a90a      	add	r1, sp, #40	; 0x28
 800103c:	4816      	ldr	r0, [pc, #88]	; (8001098 <MX_TIM4_Init+0xa0>)
 800103e:	f001 fbaf 	bl	80027a0 <HAL_TIM_ConfigClockSource>
 8001042:	bb00      	cbnz	r0, 8001086 <MX_TIM4_Init+0x8e>
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001044:	4814      	ldr	r0, [pc, #80]	; (8001098 <MX_TIM4_Init+0xa0>)
 8001046:	f001 fa11 	bl	800246c <HAL_TIM_PWM_Init>
 800104a:	b9f0      	cbnz	r0, 800108a <MX_TIM4_Init+0x92>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800104c:	2300      	movs	r3, #0
 800104e:	9308      	str	r3, [sp, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001050:	9309      	str	r3, [sp, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001052:	a908      	add	r1, sp, #32
 8001054:	4810      	ldr	r0, [pc, #64]	; (8001098 <MX_TIM4_Init+0xa0>)
 8001056:	f001 fe71 	bl	8002d3c <HAL_TIMEx_MasterConfigSynchronization>
 800105a:	b9c0      	cbnz	r0, 800108e <MX_TIM4_Init+0x96>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800105c:	2360      	movs	r3, #96	; 0x60
 800105e:	9301      	str	r3, [sp, #4]
  sConfigOC.Pulse = 900;
 8001060:	f44f 7361 	mov.w	r3, #900	; 0x384
 8001064:	9302      	str	r3, [sp, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001066:	2200      	movs	r2, #0
 8001068:	9203      	str	r2, [sp, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800106a:	9205      	str	r2, [sp, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800106c:	a901      	add	r1, sp, #4
 800106e:	480a      	ldr	r0, [pc, #40]	; (8001098 <MX_TIM4_Init+0xa0>)
 8001070:	f001 fa86 	bl	8002580 <HAL_TIM_PWM_ConfigChannel>
 8001074:	b968      	cbnz	r0, 8001092 <MX_TIM4_Init+0x9a>
  HAL_TIM_MspPostInit(&htim4);
 8001076:	4808      	ldr	r0, [pc, #32]	; (8001098 <MX_TIM4_Init+0xa0>)
 8001078:	f000 f9de 	bl	8001438 <HAL_TIM_MspPostInit>
}
 800107c:	b00f      	add	sp, #60	; 0x3c
 800107e:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8001082:	f7ff ffb7 	bl	8000ff4 <Error_Handler>
    Error_Handler();
 8001086:	f7ff ffb5 	bl	8000ff4 <Error_Handler>
    Error_Handler();
 800108a:	f7ff ffb3 	bl	8000ff4 <Error_Handler>
    Error_Handler();
 800108e:	f7ff ffb1 	bl	8000ff4 <Error_Handler>
    Error_Handler();
 8001092:	f7ff ffaf 	bl	8000ff4 <Error_Handler>
 8001096:	bf00      	nop
 8001098:	20000270 	.word	0x20000270
 800109c:	40000800 	.word	0x40000800

080010a0 <MX_USART1_UART_Init>:
{
 80010a0:	b508      	push	{r3, lr}
  huart1.Instance = USART1;
 80010a2:	480a      	ldr	r0, [pc, #40]	; (80010cc <MX_USART1_UART_Init+0x2c>)
 80010a4:	4b0a      	ldr	r3, [pc, #40]	; (80010d0 <MX_USART1_UART_Init+0x30>)
 80010a6:	6003      	str	r3, [r0, #0]
  huart1.Init.BaudRate = 921600;
 80010a8:	f44f 2361 	mov.w	r3, #921600	; 0xe1000
 80010ac:	6043      	str	r3, [r0, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80010ae:	2300      	movs	r3, #0
 80010b0:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80010b2:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80010b4:	6103      	str	r3, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80010b6:	220c      	movs	r2, #12
 80010b8:	6142      	str	r2, [r0, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80010ba:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80010bc:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80010be:	f001 ff4b 	bl	8002f58 <HAL_UART_Init>
 80010c2:	b900      	cbnz	r0, 80010c6 <MX_USART1_UART_Init+0x26>
}
 80010c4:	bd08      	pop	{r3, pc}
    Error_Handler();
 80010c6:	f7ff ff95 	bl	8000ff4 <Error_Handler>
 80010ca:	bf00      	nop
 80010cc:	200002b8 	.word	0x200002b8
 80010d0:	40011000 	.word	0x40011000

080010d4 <MX_TIM2_Init>:
{
 80010d4:	b500      	push	{lr}
 80010d6:	b091      	sub	sp, #68	; 0x44
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80010d8:	2300      	movs	r3, #0
 80010da:	930c      	str	r3, [sp, #48]	; 0x30
 80010dc:	930d      	str	r3, [sp, #52]	; 0x34
 80010de:	930e      	str	r3, [sp, #56]	; 0x38
 80010e0:	930f      	str	r3, [sp, #60]	; 0x3c
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80010e2:	9307      	str	r3, [sp, #28]
 80010e4:	9308      	str	r3, [sp, #32]
 80010e6:	9309      	str	r3, [sp, #36]	; 0x24
 80010e8:	930a      	str	r3, [sp, #40]	; 0x28
 80010ea:	930b      	str	r3, [sp, #44]	; 0x2c
  TIM_IC_InitTypeDef sConfigIC = {0};
 80010ec:	9303      	str	r3, [sp, #12]
 80010ee:	9304      	str	r3, [sp, #16]
 80010f0:	9305      	str	r3, [sp, #20]
 80010f2:	9306      	str	r3, [sp, #24]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010f4:	9301      	str	r3, [sp, #4]
 80010f6:	9302      	str	r3, [sp, #8]
  htim2.Instance = TIM2;
 80010f8:	482b      	ldr	r0, [pc, #172]	; (80011a8 <MX_TIM2_Init+0xd4>)
 80010fa:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80010fe:	6002      	str	r2, [r0, #0]
  htim2.Init.Prescaler = 0;
 8001100:	6043      	str	r3, [r0, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001102:	6083      	str	r3, [r0, #8]
  htim2.Init.Period = 4294967295;
 8001104:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001108:	60c2      	str	r2, [r0, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800110a:	6103      	str	r3, [r0, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800110c:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800110e:	f001 f981 	bl	8002414 <HAL_TIM_Base_Init>
 8001112:	2800      	cmp	r0, #0
 8001114:	d139      	bne.n	800118a <MX_TIM2_Init+0xb6>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001116:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800111a:	930c      	str	r3, [sp, #48]	; 0x30
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800111c:	a90c      	add	r1, sp, #48	; 0x30
 800111e:	4822      	ldr	r0, [pc, #136]	; (80011a8 <MX_TIM2_Init+0xd4>)
 8001120:	f001 fb3e 	bl	80027a0 <HAL_TIM_ConfigClockSource>
 8001124:	2800      	cmp	r0, #0
 8001126:	d132      	bne.n	800118e <MX_TIM2_Init+0xba>
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8001128:	481f      	ldr	r0, [pc, #124]	; (80011a8 <MX_TIM2_Init+0xd4>)
 800112a:	f001 f9cb 	bl	80024c4 <HAL_TIM_IC_Init>
 800112e:	2800      	cmp	r0, #0
 8001130:	d12f      	bne.n	8001192 <MX_TIM2_Init+0xbe>
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8001132:	2304      	movs	r3, #4
 8001134:	9307      	str	r3, [sp, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8001136:	2350      	movs	r3, #80	; 0x50
 8001138:	9308      	str	r3, [sp, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800113a:	2300      	movs	r3, #0
 800113c:	9309      	str	r3, [sp, #36]	; 0x24
  sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 800113e:	930a      	str	r3, [sp, #40]	; 0x28
  sSlaveConfig.TriggerFilter = 0;
 8001140:	930b      	str	r3, [sp, #44]	; 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 8001142:	a907      	add	r1, sp, #28
 8001144:	4818      	ldr	r0, [pc, #96]	; (80011a8 <MX_TIM2_Init+0xd4>)
 8001146:	f001 fc06 	bl	8002956 <HAL_TIM_SlaveConfigSynchro>
 800114a:	bb20      	cbnz	r0, 8001196 <MX_TIM2_Init+0xc2>
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800114c:	2200      	movs	r2, #0
 800114e:	9203      	str	r2, [sp, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001150:	2301      	movs	r3, #1
 8001152:	9304      	str	r3, [sp, #16]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001154:	9205      	str	r2, [sp, #20]
  sConfigIC.ICFilter = 0;
 8001156:	9206      	str	r2, [sp, #24]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001158:	a903      	add	r1, sp, #12
 800115a:	4813      	ldr	r0, [pc, #76]	; (80011a8 <MX_TIM2_Init+0xd4>)
 800115c:	f001 fab2 	bl	80026c4 <HAL_TIM_IC_ConfigChannel>
 8001160:	b9d8      	cbnz	r0, 800119a <MX_TIM2_Init+0xc6>
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8001162:	2302      	movs	r3, #2
 8001164:	9303      	str	r3, [sp, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8001166:	9304      	str	r3, [sp, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8001168:	2204      	movs	r2, #4
 800116a:	a903      	add	r1, sp, #12
 800116c:	480e      	ldr	r0, [pc, #56]	; (80011a8 <MX_TIM2_Init+0xd4>)
 800116e:	f001 faa9 	bl	80026c4 <HAL_TIM_IC_ConfigChannel>
 8001172:	b9a0      	cbnz	r0, 800119e <MX_TIM2_Init+0xca>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001174:	2300      	movs	r3, #0
 8001176:	9301      	str	r3, [sp, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001178:	9302      	str	r3, [sp, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800117a:	a901      	add	r1, sp, #4
 800117c:	480a      	ldr	r0, [pc, #40]	; (80011a8 <MX_TIM2_Init+0xd4>)
 800117e:	f001 fddd 	bl	8002d3c <HAL_TIMEx_MasterConfigSynchronization>
 8001182:	b970      	cbnz	r0, 80011a2 <MX_TIM2_Init+0xce>
}
 8001184:	b011      	add	sp, #68	; 0x44
 8001186:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 800118a:	f7ff ff33 	bl	8000ff4 <Error_Handler>
    Error_Handler();
 800118e:	f7ff ff31 	bl	8000ff4 <Error_Handler>
    Error_Handler();
 8001192:	f7ff ff2f 	bl	8000ff4 <Error_Handler>
    Error_Handler();
 8001196:	f7ff ff2d 	bl	8000ff4 <Error_Handler>
    Error_Handler();
 800119a:	f7ff ff2b 	bl	8000ff4 <Error_Handler>
    Error_Handler();
 800119e:	f7ff ff29 	bl	8000ff4 <Error_Handler>
    Error_Handler();
 80011a2:	f7ff ff27 	bl	8000ff4 <Error_Handler>
 80011a6:	bf00      	nop
 80011a8:	200002fc 	.word	0x200002fc

080011ac <SystemClock_Config>:
{
 80011ac:	b500      	push	{lr}
 80011ae:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011b0:	2230      	movs	r2, #48	; 0x30
 80011b2:	2100      	movs	r1, #0
 80011b4:	a808      	add	r0, sp, #32
 80011b6:	f001 ff95 	bl	80030e4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011ba:	2300      	movs	r3, #0
 80011bc:	9303      	str	r3, [sp, #12]
 80011be:	9304      	str	r3, [sp, #16]
 80011c0:	9305      	str	r3, [sp, #20]
 80011c2:	9306      	str	r3, [sp, #24]
 80011c4:	9307      	str	r3, [sp, #28]
  __HAL_RCC_PWR_CLK_ENABLE();
 80011c6:	9301      	str	r3, [sp, #4]
 80011c8:	4a1f      	ldr	r2, [pc, #124]	; (8001248 <SystemClock_Config+0x9c>)
 80011ca:	6c11      	ldr	r1, [r2, #64]	; 0x40
 80011cc:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 80011d0:	6411      	str	r1, [r2, #64]	; 0x40
 80011d2:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80011d4:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 80011d8:	9201      	str	r2, [sp, #4]
 80011da:	9a01      	ldr	r2, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80011dc:	9302      	str	r3, [sp, #8]
 80011de:	4b1b      	ldr	r3, [pc, #108]	; (800124c <SystemClock_Config+0xa0>)
 80011e0:	681a      	ldr	r2, [r3, #0]
 80011e2:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 80011e6:	601a      	str	r2, [r3, #0]
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80011ee:	9302      	str	r3, [sp, #8]
 80011f0:	9b02      	ldr	r3, [sp, #8]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80011f2:	2301      	movs	r3, #1
 80011f4:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80011f6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80011fa:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011fc:	2302      	movs	r3, #2
 80011fe:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001200:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001204:	920f      	str	r2, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8001206:	2219      	movs	r2, #25
 8001208:	9210      	str	r2, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 800120a:	22c0      	movs	r2, #192	; 0xc0
 800120c:	9211      	str	r2, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800120e:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001210:	2304      	movs	r3, #4
 8001212:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001214:	a808      	add	r0, sp, #32
 8001216:	f000 fbb3 	bl	8001980 <HAL_RCC_OscConfig>
 800121a:	b988      	cbnz	r0, 8001240 <SystemClock_Config+0x94>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800121c:	230f      	movs	r3, #15
 800121e:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001220:	2302      	movs	r3, #2
 8001222:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001224:	2300      	movs	r3, #0
 8001226:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001228:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800122c:	9206      	str	r2, [sp, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800122e:	9307      	str	r3, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001230:	2103      	movs	r1, #3
 8001232:	a803      	add	r0, sp, #12
 8001234:	f000 fdf0 	bl	8001e18 <HAL_RCC_ClockConfig>
 8001238:	b920      	cbnz	r0, 8001244 <SystemClock_Config+0x98>
}
 800123a:	b015      	add	sp, #84	; 0x54
 800123c:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8001240:	f7ff fed8 	bl	8000ff4 <Error_Handler>
    Error_Handler();
 8001244:	f7ff fed6 	bl	8000ff4 <Error_Handler>
 8001248:	40023800 	.word	0x40023800
 800124c:	40007000 	.word	0x40007000

08001250 <main>:
{
 8001250:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001254:	b083      	sub	sp, #12
  HAL_Init();
 8001256:	f000 fa15 	bl	8001684 <HAL_Init>
  SystemClock_Config();
 800125a:	f7ff ffa7 	bl	80011ac <SystemClock_Config>
  MX_GPIO_Init();
 800125e:	f7ff fe27 	bl	8000eb0 <MX_GPIO_Init>
  MX_TIM4_Init();
 8001262:	f7ff fec9 	bl	8000ff8 <MX_TIM4_Init>
  MX_USART1_UART_Init();
 8001266:	f7ff ff1b 	bl	80010a0 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 800126a:	f7ff ff33 	bl	80010d4 <MX_TIM2_Init>
	DBG("Firing up PWM Input Capture");
 800126e:	4831      	ldr	r0, [pc, #196]	; (8001334 <main+0xe4>)
 8001270:	f002 fbaa 	bl	80039c8 <iprintf>
 8001274:	200a      	movs	r0, #10
 8001276:	f002 fbbf 	bl	80039f8 <putchar>
	HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1); // Primary channel - rising edge
 800127a:	4c2f      	ldr	r4, [pc, #188]	; (8001338 <main+0xe8>)
 800127c:	2100      	movs	r1, #0
 800127e:	4620      	mov	r0, r4
 8001280:	f001 fcaa 	bl	8002bd8 <HAL_TIM_IC_Start_IT>
	HAL_TIM_IC_Start(&htim2, TIM_CHANNEL_2);    // Secondary channel - falling edge
 8001284:	2104      	movs	r1, #4
 8001286:	4620      	mov	r0, r4
 8001288:	f001 fc18 	bl	8002abc <HAL_TIM_IC_Start>
	DBG("Firing up PWM");
 800128c:	482b      	ldr	r0, [pc, #172]	; (800133c <main+0xec>)
 800128e:	f002 fb9b 	bl	80039c8 <iprintf>
 8001292:	200a      	movs	r0, #10
 8001294:	f002 fbb0 	bl	80039f8 <putchar>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);   // Output PWM Generation
 8001298:	2100      	movs	r1, #0
 800129a:	4829      	ldr	r0, [pc, #164]	; (8001340 <main+0xf0>)
 800129c:	f001 fb96 	bl	80029cc <HAL_TIM_PWM_Start>
	uint32_t now = 0, last_blink = 0, last_print = 0, last_change = 0;
 80012a0:	2700      	movs	r7, #0
 80012a2:	463e      	mov	r6, r7
 80012a4:	463d      	mov	r5, r7
 80012a6:	e000      	b.n	80012aa <main+0x5a>
			last_change = now;
 80012a8:	4627      	mov	r7, r4
		now = HAL_GetTick();
 80012aa:	f000 fa11 	bl	80016d0 <HAL_GetTick>
 80012ae:	4604      	mov	r4, r0
		if (now - last_blink >= 500) {
 80012b0:	1b43      	subs	r3, r0, r5
 80012b2:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80012b6:	d21b      	bcs.n	80012f0 <main+0xa0>
		if (now - last_print >= 1000) {
 80012b8:	1ba3      	subs	r3, r4, r6
 80012ba:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80012be:	d21e      	bcs.n	80012fe <main+0xae>
		if (now - last_change >= 2000) {
 80012c0:	1be3      	subs	r3, r4, r7
 80012c2:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80012c6:	d3f0      	bcc.n	80012aa <main+0x5a>
			__HAL_TIM_SET_PRESCALER(&htim4, pwm_vals[pwm_vals_count][0]);
 80012c8:	491e      	ldr	r1, [pc, #120]	; (8001344 <main+0xf4>)
 80012ca:	680b      	ldr	r3, [r1, #0]
 80012cc:	4a1c      	ldr	r2, [pc, #112]	; (8001340 <main+0xf0>)
 80012ce:	6810      	ldr	r0, [r2, #0]
 80012d0:	4a1d      	ldr	r2, [pc, #116]	; (8001348 <main+0xf8>)
 80012d2:	f852 7033 	ldr.w	r7, [r2, r3, lsl #3]
 80012d6:	6287      	str	r7, [r0, #40]	; 0x28
			__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, pwm_vals[pwm_vals_count][1]);
 80012d8:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 80012dc:	6852      	ldr	r2, [r2, #4]
 80012de:	6342      	str	r2, [r0, #52]	; 0x34
			++pwm_vals_count;
 80012e0:	3301      	adds	r3, #1
 80012e2:	600b      	str	r3, [r1, #0]
			if (pwm_vals_count >= sizeof(pwm_vals) / sizeof(pwm_vals[0])) {
 80012e4:	2b0b      	cmp	r3, #11
 80012e6:	d9df      	bls.n	80012a8 <main+0x58>
				pwm_vals_count = 0;
 80012e8:	2200      	movs	r2, #0
 80012ea:	600a      	str	r2, [r1, #0]
			last_change = now;
 80012ec:	4627      	mov	r7, r4
 80012ee:	e7dc      	b.n	80012aa <main+0x5a>
			HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 80012f0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80012f4:	4815      	ldr	r0, [pc, #84]	; (800134c <main+0xfc>)
 80012f6:	f000 fb39 	bl	800196c <HAL_GPIO_TogglePin>
			last_blink = now;
 80012fa:	4625      	mov	r5, r4
 80012fc:	e7dc      	b.n	80012b8 <main+0x68>
			DBG("Tick %4lu freq = %4.1f Hz duty = %2.1f %%", now / 1000, freq, duty);
 80012fe:	4b14      	ldr	r3, [pc, #80]	; (8001350 <main+0x100>)
 8001300:	6818      	ldr	r0, [r3, #0]
 8001302:	f7ff f929 	bl	8000558 <__aeabi_f2d>
 8001306:	4680      	mov	r8, r0
 8001308:	4689      	mov	r9, r1
 800130a:	4e12      	ldr	r6, [pc, #72]	; (8001354 <main+0x104>)
 800130c:	fba6 3604 	umull	r3, r6, r6, r4
 8001310:	09b6      	lsrs	r6, r6, #6
 8001312:	4b11      	ldr	r3, [pc, #68]	; (8001358 <main+0x108>)
 8001314:	6818      	ldr	r0, [r3, #0]
 8001316:	f7ff f91f 	bl	8000558 <__aeabi_f2d>
 800131a:	e9cd 0100 	strd	r0, r1, [sp]
 800131e:	4642      	mov	r2, r8
 8001320:	464b      	mov	r3, r9
 8001322:	4631      	mov	r1, r6
 8001324:	480d      	ldr	r0, [pc, #52]	; (800135c <main+0x10c>)
 8001326:	f002 fb4f 	bl	80039c8 <iprintf>
 800132a:	200a      	movs	r0, #10
 800132c:	f002 fb64 	bl	80039f8 <putchar>
			last_print = now;
 8001330:	4626      	mov	r6, r4
 8001332:	e7c5      	b.n	80012c0 <main+0x70>
 8001334:	08005ba0 	.word	0x08005ba0
 8001338:	200002fc 	.word	0x200002fc
 800133c:	08005bbc 	.word	0x08005bbc
 8001340:	20000270 	.word	0x20000270
 8001344:	20000260 	.word	0x20000260
 8001348:	20000000 	.word	0x20000000
 800134c:	40020800 	.word	0x40020800
 8001350:	2000025c 	.word	0x2000025c
 8001354:	10624dd3 	.word	0x10624dd3
 8001358:	20000258 	.word	0x20000258
 800135c:	08005bcc 	.word	0x08005bcc

08001360 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001360:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001362:	2100      	movs	r1, #0
 8001364:	9100      	str	r1, [sp, #0]
 8001366:	4b0b      	ldr	r3, [pc, #44]	; (8001394 <HAL_MspInit+0x34>)
 8001368:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800136a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800136e:	645a      	str	r2, [r3, #68]	; 0x44
 8001370:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001372:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8001376:	9200      	str	r2, [sp, #0]
 8001378:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 800137a:	9101      	str	r1, [sp, #4]
 800137c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800137e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001382:	641a      	str	r2, [r3, #64]	; 0x40
 8001384:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001386:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800138a:	9301      	str	r3, [sp, #4]
 800138c:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800138e:	b002      	add	sp, #8
 8001390:	4770      	bx	lr
 8001392:	bf00      	nop
 8001394:	40023800 	.word	0x40023800

08001398 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001398:	b510      	push	{r4, lr}
 800139a:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800139c:	2300      	movs	r3, #0
 800139e:	9303      	str	r3, [sp, #12]
 80013a0:	9304      	str	r3, [sp, #16]
 80013a2:	9305      	str	r3, [sp, #20]
 80013a4:	9306      	str	r3, [sp, #24]
 80013a6:	9307      	str	r3, [sp, #28]
  if(htim_base->Instance==TIM2)
 80013a8:	6803      	ldr	r3, [r0, #0]
 80013aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80013ae:	d004      	beq.n	80013ba <HAL_TIM_Base_MspInit+0x22>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
  else if(htim_base->Instance==TIM4)
 80013b0:	4a1e      	ldr	r2, [pc, #120]	; (800142c <HAL_TIM_Base_MspInit+0x94>)
 80013b2:	4293      	cmp	r3, r2
 80013b4:	d02d      	beq.n	8001412 <HAL_TIM_Base_MspInit+0x7a>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80013b6:	b008      	add	sp, #32
 80013b8:	bd10      	pop	{r4, pc}
    __HAL_RCC_TIM2_CLK_ENABLE();
 80013ba:	2400      	movs	r4, #0
 80013bc:	9400      	str	r4, [sp, #0]
 80013be:	f503 330e 	add.w	r3, r3, #145408	; 0x23800
 80013c2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80013c4:	f042 0201 	orr.w	r2, r2, #1
 80013c8:	641a      	str	r2, [r3, #64]	; 0x40
 80013ca:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80013cc:	f002 0201 	and.w	r2, r2, #1
 80013d0:	9200      	str	r2, [sp, #0]
 80013d2:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013d4:	9401      	str	r4, [sp, #4]
 80013d6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80013d8:	f042 0201 	orr.w	r2, r2, #1
 80013dc:	631a      	str	r2, [r3, #48]	; 0x30
 80013de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013e0:	f003 0301 	and.w	r3, r3, #1
 80013e4:	9301      	str	r3, [sp, #4]
 80013e6:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = PWM_IN_Pin;
 80013e8:	2320      	movs	r3, #32
 80013ea:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013ec:	2302      	movs	r3, #2
 80013ee:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013f0:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013f2:	9406      	str	r4, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80013f4:	2301      	movs	r3, #1
 80013f6:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(PWM_IN_GPIO_Port, &GPIO_InitStruct);
 80013f8:	a903      	add	r1, sp, #12
 80013fa:	480d      	ldr	r0, [pc, #52]	; (8001430 <HAL_TIM_Base_MspInit+0x98>)
 80013fc:	f000 f9d8 	bl	80017b0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001400:	4622      	mov	r2, r4
 8001402:	4621      	mov	r1, r4
 8001404:	201c      	movs	r0, #28
 8001406:	f000 f97b 	bl	8001700 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800140a:	201c      	movs	r0, #28
 800140c:	f000 f9ac 	bl	8001768 <HAL_NVIC_EnableIRQ>
 8001410:	e7d1      	b.n	80013b6 <HAL_TIM_Base_MspInit+0x1e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001412:	2300      	movs	r3, #0
 8001414:	9302      	str	r3, [sp, #8]
 8001416:	4b07      	ldr	r3, [pc, #28]	; (8001434 <HAL_TIM_Base_MspInit+0x9c>)
 8001418:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800141a:	f042 0204 	orr.w	r2, r2, #4
 800141e:	641a      	str	r2, [r3, #64]	; 0x40
 8001420:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001422:	f003 0304 	and.w	r3, r3, #4
 8001426:	9302      	str	r3, [sp, #8]
 8001428:	9b02      	ldr	r3, [sp, #8]
}
 800142a:	e7c4      	b.n	80013b6 <HAL_TIM_Base_MspInit+0x1e>
 800142c:	40000800 	.word	0x40000800
 8001430:	40020000 	.word	0x40020000
 8001434:	40023800 	.word	0x40023800

08001438 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001438:	b500      	push	{lr}
 800143a:	b087      	sub	sp, #28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800143c:	2300      	movs	r3, #0
 800143e:	9301      	str	r3, [sp, #4]
 8001440:	9302      	str	r3, [sp, #8]
 8001442:	9303      	str	r3, [sp, #12]
 8001444:	9304      	str	r3, [sp, #16]
 8001446:	9305      	str	r3, [sp, #20]
  if(htim->Instance==TIM4)
 8001448:	6802      	ldr	r2, [r0, #0]
 800144a:	4b0f      	ldr	r3, [pc, #60]	; (8001488 <HAL_TIM_MspPostInit+0x50>)
 800144c:	429a      	cmp	r2, r3
 800144e:	d002      	beq.n	8001456 <HAL_TIM_MspPostInit+0x1e>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8001450:	b007      	add	sp, #28
 8001452:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001456:	2300      	movs	r3, #0
 8001458:	9300      	str	r3, [sp, #0]
 800145a:	4a0c      	ldr	r2, [pc, #48]	; (800148c <HAL_TIM_MspPostInit+0x54>)
 800145c:	6b11      	ldr	r1, [r2, #48]	; 0x30
 800145e:	f041 0102 	orr.w	r1, r1, #2
 8001462:	6311      	str	r1, [r2, #48]	; 0x30
 8001464:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001466:	f002 0202 	and.w	r2, r2, #2
 800146a:	9200      	str	r2, [sp, #0]
 800146c:	9a00      	ldr	r2, [sp, #0]
    GPIO_InitStruct.Pin = PWM_OUT_Pin;
 800146e:	2240      	movs	r2, #64	; 0x40
 8001470:	9201      	str	r2, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001472:	2202      	movs	r2, #2
 8001474:	9202      	str	r2, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001476:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001478:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800147a:	9205      	str	r2, [sp, #20]
    HAL_GPIO_Init(PWM_OUT_GPIO_Port, &GPIO_InitStruct);
 800147c:	a901      	add	r1, sp, #4
 800147e:	4804      	ldr	r0, [pc, #16]	; (8001490 <HAL_TIM_MspPostInit+0x58>)
 8001480:	f000 f996 	bl	80017b0 <HAL_GPIO_Init>
}
 8001484:	e7e4      	b.n	8001450 <HAL_TIM_MspPostInit+0x18>
 8001486:	bf00      	nop
 8001488:	40000800 	.word	0x40000800
 800148c:	40023800 	.word	0x40023800
 8001490:	40020400 	.word	0x40020400

08001494 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001494:	b500      	push	{lr}
 8001496:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001498:	2300      	movs	r3, #0
 800149a:	9303      	str	r3, [sp, #12]
 800149c:	9304      	str	r3, [sp, #16]
 800149e:	9305      	str	r3, [sp, #20]
 80014a0:	9306      	str	r3, [sp, #24]
 80014a2:	9307      	str	r3, [sp, #28]
  if(huart->Instance==USART1)
 80014a4:	6802      	ldr	r2, [r0, #0]
 80014a6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80014aa:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
 80014ae:	429a      	cmp	r2, r3
 80014b0:	d002      	beq.n	80014b8 <HAL_UART_MspInit+0x24>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80014b2:	b009      	add	sp, #36	; 0x24
 80014b4:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_USART1_CLK_ENABLE();
 80014b8:	2200      	movs	r2, #0
 80014ba:	9201      	str	r2, [sp, #4]
 80014bc:	f503 3394 	add.w	r3, r3, #75776	; 0x12800
 80014c0:	6c59      	ldr	r1, [r3, #68]	; 0x44
 80014c2:	f041 0110 	orr.w	r1, r1, #16
 80014c6:	6459      	str	r1, [r3, #68]	; 0x44
 80014c8:	6c59      	ldr	r1, [r3, #68]	; 0x44
 80014ca:	f001 0110 	and.w	r1, r1, #16
 80014ce:	9101      	str	r1, [sp, #4]
 80014d0:	9901      	ldr	r1, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014d2:	9202      	str	r2, [sp, #8]
 80014d4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80014d6:	f041 0101 	orr.w	r1, r1, #1
 80014da:	6319      	str	r1, [r3, #48]	; 0x30
 80014dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014de:	f003 0301 	and.w	r3, r3, #1
 80014e2:	9302      	str	r3, [sp, #8]
 80014e4:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80014e6:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80014ea:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014ec:	2302      	movs	r3, #2
 80014ee:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014f0:	9205      	str	r2, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014f2:	2303      	movs	r3, #3
 80014f4:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80014f6:	2307      	movs	r3, #7
 80014f8:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014fa:	a903      	add	r1, sp, #12
 80014fc:	4801      	ldr	r0, [pc, #4]	; (8001504 <HAL_UART_MspInit+0x70>)
 80014fe:	f000 f957 	bl	80017b0 <HAL_GPIO_Init>
}
 8001502:	e7d6      	b.n	80014b2 <HAL_UART_MspInit+0x1e>
 8001504:	40020000 	.word	0x40020000

08001508 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001508:	e7fe      	b.n	8001508 <NMI_Handler>

0800150a <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800150a:	e7fe      	b.n	800150a <HardFault_Handler>

0800150c <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800150c:	e7fe      	b.n	800150c <MemManage_Handler>

0800150e <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800150e:	e7fe      	b.n	800150e <BusFault_Handler>

08001510 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001510:	e7fe      	b.n	8001510 <UsageFault_Handler>

08001512 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001512:	4770      	bx	lr

08001514 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001514:	4770      	bx	lr

08001516 <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001516:	4770      	bx	lr

08001518 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001518:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800151a:	f000 f8cd 	bl	80016b8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800151e:	bd08      	pop	{r3, pc}

08001520 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001520:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001522:	4802      	ldr	r0, [pc, #8]	; (800152c <TIM2_IRQHandler+0xc>)
 8001524:	f000 fe6b 	bl	80021fe <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001528:	bd08      	pop	{r3, pc}
 800152a:	bf00      	nop
 800152c:	200002fc 	.word	0x200002fc

08001530 <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 8001530:	2001      	movs	r0, #1
 8001532:	4770      	bx	lr

08001534 <_kill>:

int _kill(int pid, int sig)
{
 8001534:	b508      	push	{r3, lr}
	errno = EINVAL;
 8001536:	f001 fdab 	bl	8003090 <__errno>
 800153a:	2316      	movs	r3, #22
 800153c:	6003      	str	r3, [r0, #0]
	return -1;
}
 800153e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001542:	bd08      	pop	{r3, pc}

08001544 <_exit>:

void _exit (int status)
{
 8001544:	b508      	push	{r3, lr}
	_kill(status, -1);
 8001546:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800154a:	f7ff fff3 	bl	8001534 <_kill>
	while (1) {}		/* Make sure we hang here */
 800154e:	e7fe      	b.n	800154e <_exit+0xa>

08001550 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001550:	b570      	push	{r4, r5, r6, lr}
 8001552:	460c      	mov	r4, r1
 8001554:	4616      	mov	r6, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001556:	2500      	movs	r5, #0
 8001558:	42b5      	cmp	r5, r6
 800155a:	da07      	bge.n	800156c <_read+0x1c>
	{
		*ptr++ = __io_getchar();
 800155c:	f3af 8000 	nop.w
 8001560:	4621      	mov	r1, r4
 8001562:	f801 0b01 	strb.w	r0, [r1], #1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001566:	3501      	adds	r5, #1
		*ptr++ = __io_getchar();
 8001568:	460c      	mov	r4, r1
 800156a:	e7f5      	b.n	8001558 <_read+0x8>
	}

return len;
}
 800156c:	4630      	mov	r0, r6
 800156e:	bd70      	pop	{r4, r5, r6, pc}

08001570 <_close>:
}

int _close(int file)
{
	return -1;
}
 8001570:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001574:	4770      	bx	lr

08001576 <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 8001576:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800157a:	604b      	str	r3, [r1, #4]
	return 0;
}
 800157c:	2000      	movs	r0, #0
 800157e:	4770      	bx	lr

08001580 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 8001580:	2001      	movs	r0, #1
 8001582:	4770      	bx	lr

08001584 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 8001584:	2000      	movs	r0, #0
 8001586:	4770      	bx	lr

08001588 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001588:	b510      	push	{r4, lr}
 800158a:	4603      	mov	r3, r0
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800158c:	4a0c      	ldr	r2, [pc, #48]	; (80015c0 <_sbrk+0x38>)
 800158e:	490d      	ldr	r1, [pc, #52]	; (80015c4 <_sbrk+0x3c>)
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001590:	480d      	ldr	r0, [pc, #52]	; (80015c8 <_sbrk+0x40>)
 8001592:	6800      	ldr	r0, [r0, #0]
 8001594:	b140      	cbz	r0, 80015a8 <_sbrk+0x20>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001596:	480c      	ldr	r0, [pc, #48]	; (80015c8 <_sbrk+0x40>)
 8001598:	6800      	ldr	r0, [r0, #0]
 800159a:	4403      	add	r3, r0
 800159c:	1a52      	subs	r2, r2, r1
 800159e:	4293      	cmp	r3, r2
 80015a0:	d806      	bhi.n	80015b0 <_sbrk+0x28>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 80015a2:	4a09      	ldr	r2, [pc, #36]	; (80015c8 <_sbrk+0x40>)
 80015a4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
}
 80015a6:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 80015a8:	4807      	ldr	r0, [pc, #28]	; (80015c8 <_sbrk+0x40>)
 80015aa:	4c08      	ldr	r4, [pc, #32]	; (80015cc <_sbrk+0x44>)
 80015ac:	6004      	str	r4, [r0, #0]
 80015ae:	e7f2      	b.n	8001596 <_sbrk+0xe>
    errno = ENOMEM;
 80015b0:	f001 fd6e 	bl	8003090 <__errno>
 80015b4:	230c      	movs	r3, #12
 80015b6:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 80015b8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80015bc:	e7f3      	b.n	80015a6 <_sbrk+0x1e>
 80015be:	bf00      	nop
 80015c0:	20020000 	.word	0x20020000
 80015c4:	00000400 	.word	0x00000400
 80015c8:	20000264 	.word	0x20000264
 80015cc:	20000358 	.word	0x20000358

080015d0 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80015d0:	4a03      	ldr	r2, [pc, #12]	; (80015e0 <SystemInit+0x10>)
 80015d2:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80015d6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80015da:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80015de:	4770      	bx	lr
 80015e0:	e000ed00 	.word	0xe000ed00

080015e4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80015e4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800161c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80015e8:	480d      	ldr	r0, [pc, #52]	; (8001620 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80015ea:	490e      	ldr	r1, [pc, #56]	; (8001624 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80015ec:	4a0e      	ldr	r2, [pc, #56]	; (8001628 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80015ee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80015f0:	e002      	b.n	80015f8 <LoopCopyDataInit>

080015f2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80015f2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80015f4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80015f6:	3304      	adds	r3, #4

080015f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80015f8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80015fa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80015fc:	d3f9      	bcc.n	80015f2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80015fe:	4a0b      	ldr	r2, [pc, #44]	; (800162c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001600:	4c0b      	ldr	r4, [pc, #44]	; (8001630 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001602:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001604:	e001      	b.n	800160a <LoopFillZerobss>

08001606 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001606:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001608:	3204      	adds	r2, #4

0800160a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800160a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800160c:	d3fb      	bcc.n	8001606 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800160e:	f7ff ffdf 	bl	80015d0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001612:	f001 fd43 	bl	800309c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001616:	f7ff fe1b 	bl	8001250 <main>
  bx  lr    
 800161a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800161c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001620:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001624:	2000023c 	.word	0x2000023c
  ldr r2, =_sidata
 8001628:	08006004 	.word	0x08006004
  ldr r2, =_sbss
 800162c:	2000023c 	.word	0x2000023c
  ldr r4, =_ebss
 8001630:	20000358 	.word	0x20000358

08001634 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001634:	e7fe      	b.n	8001634 <ADC_IRQHandler>
	...

08001638 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001638:	b510      	push	{r4, lr}
 800163a:	4604      	mov	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800163c:	4b0e      	ldr	r3, [pc, #56]	; (8001678 <HAL_InitTick+0x40>)
 800163e:	7818      	ldrb	r0, [r3, #0]
 8001640:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001644:	fbb3 f3f0 	udiv	r3, r3, r0
 8001648:	4a0c      	ldr	r2, [pc, #48]	; (800167c <HAL_InitTick+0x44>)
 800164a:	6810      	ldr	r0, [r2, #0]
 800164c:	fbb0 f0f3 	udiv	r0, r0, r3
 8001650:	f000 f898 	bl	8001784 <HAL_SYSTICK_Config>
 8001654:	b968      	cbnz	r0, 8001672 <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001656:	2c0f      	cmp	r4, #15
 8001658:	d901      	bls.n	800165e <HAL_InitTick+0x26>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 800165a:	2001      	movs	r0, #1
 800165c:	e00a      	b.n	8001674 <HAL_InitTick+0x3c>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800165e:	2200      	movs	r2, #0
 8001660:	4621      	mov	r1, r4
 8001662:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001666:	f000 f84b 	bl	8001700 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800166a:	4b05      	ldr	r3, [pc, #20]	; (8001680 <HAL_InitTick+0x48>)
 800166c:	601c      	str	r4, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800166e:	2000      	movs	r0, #0
 8001670:	e000      	b.n	8001674 <HAL_InitTick+0x3c>
    return HAL_ERROR;
 8001672:	2001      	movs	r0, #1
}
 8001674:	bd10      	pop	{r4, pc}
 8001676:	bf00      	nop
 8001678:	20000064 	.word	0x20000064
 800167c:	20000060 	.word	0x20000060
 8001680:	20000068 	.word	0x20000068

08001684 <HAL_Init>:
{
 8001684:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001686:	4b0b      	ldr	r3, [pc, #44]	; (80016b4 <HAL_Init+0x30>)
 8001688:	681a      	ldr	r2, [r3, #0]
 800168a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800168e:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001690:	681a      	ldr	r2, [r3, #0]
 8001692:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001696:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001698:	681a      	ldr	r2, [r3, #0]
 800169a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800169e:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80016a0:	2003      	movs	r0, #3
 80016a2:	f000 f81b 	bl	80016dc <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80016a6:	200f      	movs	r0, #15
 80016a8:	f7ff ffc6 	bl	8001638 <HAL_InitTick>
  HAL_MspInit();
 80016ac:	f7ff fe58 	bl	8001360 <HAL_MspInit>
}
 80016b0:	2000      	movs	r0, #0
 80016b2:	bd08      	pop	{r3, pc}
 80016b4:	40023c00 	.word	0x40023c00

080016b8 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80016b8:	4a03      	ldr	r2, [pc, #12]	; (80016c8 <HAL_IncTick+0x10>)
 80016ba:	6811      	ldr	r1, [r2, #0]
 80016bc:	4b03      	ldr	r3, [pc, #12]	; (80016cc <HAL_IncTick+0x14>)
 80016be:	781b      	ldrb	r3, [r3, #0]
 80016c0:	440b      	add	r3, r1
 80016c2:	6013      	str	r3, [r2, #0]
}
 80016c4:	4770      	bx	lr
 80016c6:	bf00      	nop
 80016c8:	20000344 	.word	0x20000344
 80016cc:	20000064 	.word	0x20000064

080016d0 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80016d0:	4b01      	ldr	r3, [pc, #4]	; (80016d8 <HAL_GetTick+0x8>)
 80016d2:	6818      	ldr	r0, [r3, #0]
}
 80016d4:	4770      	bx	lr
 80016d6:	bf00      	nop
 80016d8:	20000344 	.word	0x20000344

080016dc <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80016dc:	4a07      	ldr	r2, [pc, #28]	; (80016fc <HAL_NVIC_SetPriorityGrouping+0x20>)
 80016de:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80016e0:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80016e4:	041b      	lsls	r3, r3, #16
 80016e6:	0c1b      	lsrs	r3, r3, #16
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80016e8:	0200      	lsls	r0, r0, #8
 80016ea:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80016ee:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 80016f0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80016f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 80016f8:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80016fa:	4770      	bx	lr
 80016fc:	e000ed00 	.word	0xe000ed00

08001700 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001700:	b430      	push	{r4, r5}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001702:	4b17      	ldr	r3, [pc, #92]	; (8001760 <HAL_NVIC_SetPriority+0x60>)
 8001704:	68db      	ldr	r3, [r3, #12]
 8001706:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800170a:	f1c3 0407 	rsb	r4, r3, #7
 800170e:	2c04      	cmp	r4, #4
 8001710:	bf28      	it	cs
 8001712:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001714:	1d1d      	adds	r5, r3, #4
 8001716:	2d06      	cmp	r5, #6
 8001718:	d918      	bls.n	800174c <HAL_NVIC_SetPriority+0x4c>
 800171a:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800171c:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8001720:	fa05 f404 	lsl.w	r4, r5, r4
 8001724:	ea21 0104 	bic.w	r1, r1, r4
 8001728:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800172a:	fa05 f303 	lsl.w	r3, r5, r3
 800172e:	ea22 0303 	bic.w	r3, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001732:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) >= 0)
 8001734:	2800      	cmp	r0, #0
 8001736:	db0b      	blt.n	8001750 <HAL_NVIC_SetPriority+0x50>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001738:	0109      	lsls	r1, r1, #4
 800173a:	b2c9      	uxtb	r1, r1
 800173c:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8001740:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8001744:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8001748:	bc30      	pop	{r4, r5}
 800174a:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800174c:	2300      	movs	r3, #0
 800174e:	e7e5      	b.n	800171c <HAL_NVIC_SetPriority+0x1c>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001750:	f000 000f 	and.w	r0, r0, #15
 8001754:	0109      	lsls	r1, r1, #4
 8001756:	b2c9      	uxtb	r1, r1
 8001758:	4b02      	ldr	r3, [pc, #8]	; (8001764 <HAL_NVIC_SetPriority+0x64>)
 800175a:	5419      	strb	r1, [r3, r0]
 800175c:	e7f4      	b.n	8001748 <HAL_NVIC_SetPriority+0x48>
 800175e:	bf00      	nop
 8001760:	e000ed00 	.word	0xe000ed00
 8001764:	e000ed14 	.word	0xe000ed14

08001768 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8001768:	2800      	cmp	r0, #0
 800176a:	db07      	blt.n	800177c <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800176c:	f000 021f 	and.w	r2, r0, #31
 8001770:	0940      	lsrs	r0, r0, #5
 8001772:	2301      	movs	r3, #1
 8001774:	4093      	lsls	r3, r2
 8001776:	4a02      	ldr	r2, [pc, #8]	; (8001780 <HAL_NVIC_EnableIRQ+0x18>)
 8001778:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 800177c:	4770      	bx	lr
 800177e:	bf00      	nop
 8001780:	e000e100 	.word	0xe000e100

08001784 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001784:	3801      	subs	r0, #1
 8001786:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800178a:	d20a      	bcs.n	80017a2 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800178c:	4b06      	ldr	r3, [pc, #24]	; (80017a8 <HAL_SYSTICK_Config+0x24>)
 800178e:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001790:	4a06      	ldr	r2, [pc, #24]	; (80017ac <HAL_SYSTICK_Config+0x28>)
 8001792:	21f0      	movs	r1, #240	; 0xf0
 8001794:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001798:	2000      	movs	r0, #0
 800179a:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800179c:	2207      	movs	r2, #7
 800179e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80017a0:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80017a2:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80017a4:	4770      	bx	lr
 80017a6:	bf00      	nop
 80017a8:	e000e010 	.word	0xe000e010
 80017ac:	e000ed00 	.word	0xe000ed00

080017b0 <HAL_GPIO_Init>:
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80017b0:	2300      	movs	r3, #0
 80017b2:	2b0f      	cmp	r3, #15
 80017b4:	f200 80cb 	bhi.w	800194e <HAL_GPIO_Init+0x19e>
{
 80017b8:	b4f0      	push	{r4, r5, r6, r7}
 80017ba:	b082      	sub	sp, #8
 80017bc:	e05d      	b.n	800187a <HAL_GPIO_Init+0xca>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80017be:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80017c0:	005f      	lsls	r7, r3, #1
 80017c2:	2403      	movs	r4, #3
 80017c4:	40bc      	lsls	r4, r7
 80017c6:	ea26 0604 	bic.w	r6, r6, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 80017ca:	68cc      	ldr	r4, [r1, #12]
 80017cc:	40bc      	lsls	r4, r7
 80017ce:	4334      	orrs	r4, r6
        GPIOx->OSPEEDR = temp;
 80017d0:	6084      	str	r4, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80017d2:	6846      	ldr	r6, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80017d4:	ea26 0602 	bic.w	r6, r6, r2
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80017d8:	684c      	ldr	r4, [r1, #4]
 80017da:	f3c4 1200 	ubfx	r2, r4, #4, #1
 80017de:	409a      	lsls	r2, r3
 80017e0:	4332      	orrs	r2, r6
        GPIOx->OTYPER = temp;
 80017e2:	6042      	str	r2, [r0, #4]
 80017e4:	e057      	b.n	8001896 <HAL_GPIO_Init+0xe6>
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80017e6:	08dc      	lsrs	r4, r3, #3
 80017e8:	3408      	adds	r4, #8
 80017ea:	f850 7024 	ldr.w	r7, [r0, r4, lsl #2]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80017ee:	f003 0207 	and.w	r2, r3, #7
 80017f2:	0096      	lsls	r6, r2, #2
 80017f4:	220f      	movs	r2, #15
 80017f6:	40b2      	lsls	r2, r6
 80017f8:	ea27 0702 	bic.w	r7, r7, r2
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80017fc:	690a      	ldr	r2, [r1, #16]
 80017fe:	40b2      	lsls	r2, r6
 8001800:	433a      	orrs	r2, r7
        GPIOx->AFR[position >> 3U] = temp;
 8001802:	f840 2024 	str.w	r2, [r0, r4, lsl #2]
 8001806:	e05a      	b.n	80018be <HAL_GPIO_Init+0x10e>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001808:	2204      	movs	r2, #4
 800180a:	e000      	b.n	800180e <HAL_GPIO_Init+0x5e>
 800180c:	2200      	movs	r2, #0
 800180e:	40b2      	lsls	r2, r6
 8001810:	433a      	orrs	r2, r7
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001812:	3402      	adds	r4, #2
 8001814:	4e4e      	ldr	r6, [pc, #312]	; (8001950 <HAL_GPIO_Init+0x1a0>)
 8001816:	f846 2024 	str.w	r2, [r6, r4, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800181a:	4a4e      	ldr	r2, [pc, #312]	; (8001954 <HAL_GPIO_Init+0x1a4>)
 800181c:	6814      	ldr	r4, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 800181e:	43ea      	mvns	r2, r5
 8001820:	ea24 0605 	bic.w	r6, r4, r5
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001824:	684f      	ldr	r7, [r1, #4]
 8001826:	f417 3f80 	tst.w	r7, #65536	; 0x10000
 800182a:	d001      	beq.n	8001830 <HAL_GPIO_Init+0x80>
        {
          temp |= iocurrent;
 800182c:	ea45 0604 	orr.w	r6, r5, r4
        }
        EXTI->IMR = temp;
 8001830:	4c48      	ldr	r4, [pc, #288]	; (8001954 <HAL_GPIO_Init+0x1a4>)
 8001832:	6026      	str	r6, [r4, #0]

        temp = EXTI->EMR;
 8001834:	6864      	ldr	r4, [r4, #4]
        temp &= ~((uint32_t)iocurrent);
 8001836:	ea02 0604 	and.w	r6, r2, r4
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800183a:	684f      	ldr	r7, [r1, #4]
 800183c:	f417 3f00 	tst.w	r7, #131072	; 0x20000
 8001840:	d001      	beq.n	8001846 <HAL_GPIO_Init+0x96>
        {
          temp |= iocurrent;
 8001842:	ea45 0604 	orr.w	r6, r5, r4
        }
        EXTI->EMR = temp;
 8001846:	4c43      	ldr	r4, [pc, #268]	; (8001954 <HAL_GPIO_Init+0x1a4>)
 8001848:	6066      	str	r6, [r4, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800184a:	68a4      	ldr	r4, [r4, #8]
        temp &= ~((uint32_t)iocurrent);
 800184c:	ea02 0604 	and.w	r6, r2, r4
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001850:	684f      	ldr	r7, [r1, #4]
 8001852:	f417 1f80 	tst.w	r7, #1048576	; 0x100000
 8001856:	d001      	beq.n	800185c <HAL_GPIO_Init+0xac>
        {
          temp |= iocurrent;
 8001858:	ea45 0604 	orr.w	r6, r5, r4
        }
        EXTI->RTSR = temp;
 800185c:	4c3d      	ldr	r4, [pc, #244]	; (8001954 <HAL_GPIO_Init+0x1a4>)
 800185e:	60a6      	str	r6, [r4, #8]

        temp = EXTI->FTSR;
 8001860:	68e4      	ldr	r4, [r4, #12]
        temp &= ~((uint32_t)iocurrent);
 8001862:	4022      	ands	r2, r4
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001864:	684e      	ldr	r6, [r1, #4]
 8001866:	f416 1f00 	tst.w	r6, #2097152	; 0x200000
 800186a:	d001      	beq.n	8001870 <HAL_GPIO_Init+0xc0>
        {
          temp |= iocurrent;
 800186c:	ea45 0204 	orr.w	r2, r5, r4
        }
        EXTI->FTSR = temp;
 8001870:	4c38      	ldr	r4, [pc, #224]	; (8001954 <HAL_GPIO_Init+0x1a4>)
 8001872:	60e2      	str	r2, [r4, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001874:	3301      	adds	r3, #1
 8001876:	2b0f      	cmp	r3, #15
 8001878:	d866      	bhi.n	8001948 <HAL_GPIO_Init+0x198>
    ioposition = 0x01U << position;
 800187a:	2201      	movs	r2, #1
 800187c:	409a      	lsls	r2, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800187e:	680c      	ldr	r4, [r1, #0]
 8001880:	ea04 0502 	and.w	r5, r4, r2
    if(iocurrent == ioposition)
 8001884:	ea32 0404 	bics.w	r4, r2, r4
 8001888:	d1f4      	bne.n	8001874 <HAL_GPIO_Init+0xc4>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800188a:	684c      	ldr	r4, [r1, #4]
 800188c:	f004 0403 	and.w	r4, r4, #3
 8001890:	3c01      	subs	r4, #1
 8001892:	2c01      	cmp	r4, #1
 8001894:	d993      	bls.n	80017be <HAL_GPIO_Init+0xe>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001896:	684a      	ldr	r2, [r1, #4]
 8001898:	f002 0203 	and.w	r2, r2, #3
 800189c:	2a03      	cmp	r2, #3
 800189e:	d009      	beq.n	80018b4 <HAL_GPIO_Init+0x104>
        temp = GPIOx->PUPDR;
 80018a0:	68c4      	ldr	r4, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80018a2:	005e      	lsls	r6, r3, #1
 80018a4:	2203      	movs	r2, #3
 80018a6:	40b2      	lsls	r2, r6
 80018a8:	ea24 0402 	bic.w	r4, r4, r2
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80018ac:	688a      	ldr	r2, [r1, #8]
 80018ae:	40b2      	lsls	r2, r6
 80018b0:	4322      	orrs	r2, r4
        GPIOx->PUPDR = temp;
 80018b2:	60c2      	str	r2, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80018b4:	684a      	ldr	r2, [r1, #4]
 80018b6:	f002 0203 	and.w	r2, r2, #3
 80018ba:	2a02      	cmp	r2, #2
 80018bc:	d093      	beq.n	80017e6 <HAL_GPIO_Init+0x36>
      temp = GPIOx->MODER;
 80018be:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80018c0:	005e      	lsls	r6, r3, #1
 80018c2:	2203      	movs	r2, #3
 80018c4:	40b2      	lsls	r2, r6
 80018c6:	ea24 0402 	bic.w	r4, r4, r2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80018ca:	684a      	ldr	r2, [r1, #4]
 80018cc:	f002 0203 	and.w	r2, r2, #3
 80018d0:	40b2      	lsls	r2, r6
 80018d2:	4322      	orrs	r2, r4
      GPIOx->MODER = temp;
 80018d4:	6002      	str	r2, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80018d6:	684a      	ldr	r2, [r1, #4]
 80018d8:	f412 3f40 	tst.w	r2, #196608	; 0x30000
 80018dc:	d0ca      	beq.n	8001874 <HAL_GPIO_Init+0xc4>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018de:	2200      	movs	r2, #0
 80018e0:	9201      	str	r2, [sp, #4]
 80018e2:	4a1d      	ldr	r2, [pc, #116]	; (8001958 <HAL_GPIO_Init+0x1a8>)
 80018e4:	6c54      	ldr	r4, [r2, #68]	; 0x44
 80018e6:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
 80018ea:	6454      	str	r4, [r2, #68]	; 0x44
 80018ec:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80018ee:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 80018f2:	9201      	str	r2, [sp, #4]
 80018f4:	9a01      	ldr	r2, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 80018f6:	089c      	lsrs	r4, r3, #2
 80018f8:	1ca6      	adds	r6, r4, #2
 80018fa:	4a15      	ldr	r2, [pc, #84]	; (8001950 <HAL_GPIO_Init+0x1a0>)
 80018fc:	f852 7026 	ldr.w	r7, [r2, r6, lsl #2]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001900:	f003 0203 	and.w	r2, r3, #3
 8001904:	0096      	lsls	r6, r2, #2
 8001906:	220f      	movs	r2, #15
 8001908:	40b2      	lsls	r2, r6
 800190a:	ea27 0702 	bic.w	r7, r7, r2
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800190e:	4a13      	ldr	r2, [pc, #76]	; (800195c <HAL_GPIO_Init+0x1ac>)
 8001910:	4290      	cmp	r0, r2
 8001912:	f43f af7b 	beq.w	800180c <HAL_GPIO_Init+0x5c>
 8001916:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800191a:	4290      	cmp	r0, r2
 800191c:	d00e      	beq.n	800193c <HAL_GPIO_Init+0x18c>
 800191e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001922:	4290      	cmp	r0, r2
 8001924:	d00c      	beq.n	8001940 <HAL_GPIO_Init+0x190>
 8001926:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800192a:	4290      	cmp	r0, r2
 800192c:	d00a      	beq.n	8001944 <HAL_GPIO_Init+0x194>
 800192e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001932:	4290      	cmp	r0, r2
 8001934:	f43f af68 	beq.w	8001808 <HAL_GPIO_Init+0x58>
 8001938:	2207      	movs	r2, #7
 800193a:	e768      	b.n	800180e <HAL_GPIO_Init+0x5e>
 800193c:	2201      	movs	r2, #1
 800193e:	e766      	b.n	800180e <HAL_GPIO_Init+0x5e>
 8001940:	2202      	movs	r2, #2
 8001942:	e764      	b.n	800180e <HAL_GPIO_Init+0x5e>
 8001944:	2203      	movs	r2, #3
 8001946:	e762      	b.n	800180e <HAL_GPIO_Init+0x5e>
      }
    }
  }
}
 8001948:	b002      	add	sp, #8
 800194a:	bcf0      	pop	{r4, r5, r6, r7}
 800194c:	4770      	bx	lr
 800194e:	4770      	bx	lr
 8001950:	40013800 	.word	0x40013800
 8001954:	40013c00 	.word	0x40013c00
 8001958:	40023800 	.word	0x40023800
 800195c:	40020000 	.word	0x40020000

08001960 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001960:	b10a      	cbz	r2, 8001966 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001962:	6181      	str	r1, [r0, #24]
 8001964:	4770      	bx	lr
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001966:	0409      	lsls	r1, r1, #16
 8001968:	6181      	str	r1, [r0, #24]
  }
}
 800196a:	4770      	bx	lr

0800196c <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800196c:	6943      	ldr	r3, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800196e:	ea01 0203 	and.w	r2, r1, r3
 8001972:	ea21 0103 	bic.w	r1, r1, r3
 8001976:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800197a:	6181      	str	r1, [r0, #24]
}
 800197c:	4770      	bx	lr
	...

08001980 <HAL_RCC_OscConfig>:
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001980:	2800      	cmp	r0, #0
 8001982:	f000 81df 	beq.w	8001d44 <HAL_RCC_OscConfig+0x3c4>
{
 8001986:	b570      	push	{r4, r5, r6, lr}
 8001988:	b082      	sub	sp, #8
 800198a:	4604      	mov	r4, r0
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800198c:	6803      	ldr	r3, [r0, #0]
 800198e:	f013 0f01 	tst.w	r3, #1
 8001992:	d03b      	beq.n	8001a0c <HAL_RCC_OscConfig+0x8c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001994:	4ba6      	ldr	r3, [pc, #664]	; (8001c30 <HAL_RCC_OscConfig+0x2b0>)
 8001996:	689b      	ldr	r3, [r3, #8]
 8001998:	f003 030c 	and.w	r3, r3, #12
 800199c:	2b04      	cmp	r3, #4
 800199e:	d02c      	beq.n	80019fa <HAL_RCC_OscConfig+0x7a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80019a0:	4ba3      	ldr	r3, [pc, #652]	; (8001c30 <HAL_RCC_OscConfig+0x2b0>)
 80019a2:	689b      	ldr	r3, [r3, #8]
 80019a4:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80019a8:	2b08      	cmp	r3, #8
 80019aa:	d021      	beq.n	80019f0 <HAL_RCC_OscConfig+0x70>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80019ac:	6863      	ldr	r3, [r4, #4]
 80019ae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80019b2:	d04f      	beq.n	8001a54 <HAL_RCC_OscConfig+0xd4>
 80019b4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80019b8:	d052      	beq.n	8001a60 <HAL_RCC_OscConfig+0xe0>
 80019ba:	4b9d      	ldr	r3, [pc, #628]	; (8001c30 <HAL_RCC_OscConfig+0x2b0>)
 80019bc:	681a      	ldr	r2, [r3, #0]
 80019be:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80019c2:	601a      	str	r2, [r3, #0]
 80019c4:	681a      	ldr	r2, [r3, #0]
 80019c6:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80019ca:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80019cc:	6863      	ldr	r3, [r4, #4]
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d050      	beq.n	8001a74 <HAL_RCC_OscConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019d2:	f7ff fe7d 	bl	80016d0 <HAL_GetTick>
 80019d6:	4605      	mov	r5, r0

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019d8:	4b95      	ldr	r3, [pc, #596]	; (8001c30 <HAL_RCC_OscConfig+0x2b0>)
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80019e0:	d114      	bne.n	8001a0c <HAL_RCC_OscConfig+0x8c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80019e2:	f7ff fe75 	bl	80016d0 <HAL_GetTick>
 80019e6:	1b40      	subs	r0, r0, r5
 80019e8:	2864      	cmp	r0, #100	; 0x64
 80019ea:	d9f5      	bls.n	80019d8 <HAL_RCC_OscConfig+0x58>
          {
            return HAL_TIMEOUT;
 80019ec:	2003      	movs	r0, #3
 80019ee:	e1b0      	b.n	8001d52 <HAL_RCC_OscConfig+0x3d2>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80019f0:	4b8f      	ldr	r3, [pc, #572]	; (8001c30 <HAL_RCC_OscConfig+0x2b0>)
 80019f2:	685b      	ldr	r3, [r3, #4]
 80019f4:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 80019f8:	d0d8      	beq.n	80019ac <HAL_RCC_OscConfig+0x2c>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019fa:	4b8d      	ldr	r3, [pc, #564]	; (8001c30 <HAL_RCC_OscConfig+0x2b0>)
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8001a02:	d003      	beq.n	8001a0c <HAL_RCC_OscConfig+0x8c>
 8001a04:	6863      	ldr	r3, [r4, #4]
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	f000 819e 	beq.w	8001d48 <HAL_RCC_OscConfig+0x3c8>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a0c:	6823      	ldr	r3, [r4, #0]
 8001a0e:	f013 0f02 	tst.w	r3, #2
 8001a12:	d054      	beq.n	8001abe <HAL_RCC_OscConfig+0x13e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001a14:	4b86      	ldr	r3, [pc, #536]	; (8001c30 <HAL_RCC_OscConfig+0x2b0>)
 8001a16:	689b      	ldr	r3, [r3, #8]
 8001a18:	f013 0f0c 	tst.w	r3, #12
 8001a1c:	d03e      	beq.n	8001a9c <HAL_RCC_OscConfig+0x11c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001a1e:	4b84      	ldr	r3, [pc, #528]	; (8001c30 <HAL_RCC_OscConfig+0x2b0>)
 8001a20:	689b      	ldr	r3, [r3, #8]
 8001a22:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001a26:	2b08      	cmp	r3, #8
 8001a28:	d033      	beq.n	8001a92 <HAL_RCC_OscConfig+0x112>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001a2a:	68e3      	ldr	r3, [r4, #12]
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d067      	beq.n	8001b00 <HAL_RCC_OscConfig+0x180>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001a30:	4b80      	ldr	r3, [pc, #512]	; (8001c34 <HAL_RCC_OscConfig+0x2b4>)
 8001a32:	2201      	movs	r2, #1
 8001a34:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a36:	f7ff fe4b 	bl	80016d0 <HAL_GetTick>
 8001a3a:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a3c:	4b7c      	ldr	r3, [pc, #496]	; (8001c30 <HAL_RCC_OscConfig+0x2b0>)
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	f013 0f02 	tst.w	r3, #2
 8001a44:	d153      	bne.n	8001aee <HAL_RCC_OscConfig+0x16e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001a46:	f7ff fe43 	bl	80016d0 <HAL_GetTick>
 8001a4a:	1b40      	subs	r0, r0, r5
 8001a4c:	2802      	cmp	r0, #2
 8001a4e:	d9f5      	bls.n	8001a3c <HAL_RCC_OscConfig+0xbc>
          {
            return HAL_TIMEOUT;
 8001a50:	2003      	movs	r0, #3
 8001a52:	e17e      	b.n	8001d52 <HAL_RCC_OscConfig+0x3d2>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a54:	4a76      	ldr	r2, [pc, #472]	; (8001c30 <HAL_RCC_OscConfig+0x2b0>)
 8001a56:	6813      	ldr	r3, [r2, #0]
 8001a58:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a5c:	6013      	str	r3, [r2, #0]
 8001a5e:	e7b5      	b.n	80019cc <HAL_RCC_OscConfig+0x4c>
 8001a60:	4b73      	ldr	r3, [pc, #460]	; (8001c30 <HAL_RCC_OscConfig+0x2b0>)
 8001a62:	681a      	ldr	r2, [r3, #0]
 8001a64:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8001a68:	601a      	str	r2, [r3, #0]
 8001a6a:	681a      	ldr	r2, [r3, #0]
 8001a6c:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001a70:	601a      	str	r2, [r3, #0]
 8001a72:	e7ab      	b.n	80019cc <HAL_RCC_OscConfig+0x4c>
        tickstart = HAL_GetTick();
 8001a74:	f7ff fe2c 	bl	80016d0 <HAL_GetTick>
 8001a78:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a7a:	4b6d      	ldr	r3, [pc, #436]	; (8001c30 <HAL_RCC_OscConfig+0x2b0>)
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8001a82:	d0c3      	beq.n	8001a0c <HAL_RCC_OscConfig+0x8c>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001a84:	f7ff fe24 	bl	80016d0 <HAL_GetTick>
 8001a88:	1b40      	subs	r0, r0, r5
 8001a8a:	2864      	cmp	r0, #100	; 0x64
 8001a8c:	d9f5      	bls.n	8001a7a <HAL_RCC_OscConfig+0xfa>
            return HAL_TIMEOUT;
 8001a8e:	2003      	movs	r0, #3
 8001a90:	e15f      	b.n	8001d52 <HAL_RCC_OscConfig+0x3d2>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001a92:	4b67      	ldr	r3, [pc, #412]	; (8001c30 <HAL_RCC_OscConfig+0x2b0>)
 8001a94:	685b      	ldr	r3, [r3, #4]
 8001a96:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8001a9a:	d1c6      	bne.n	8001a2a <HAL_RCC_OscConfig+0xaa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a9c:	4b64      	ldr	r3, [pc, #400]	; (8001c30 <HAL_RCC_OscConfig+0x2b0>)
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	f013 0f02 	tst.w	r3, #2
 8001aa4:	d003      	beq.n	8001aae <HAL_RCC_OscConfig+0x12e>
 8001aa6:	68e3      	ldr	r3, [r4, #12]
 8001aa8:	2b01      	cmp	r3, #1
 8001aaa:	f040 814f 	bne.w	8001d4c <HAL_RCC_OscConfig+0x3cc>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001aae:	4a60      	ldr	r2, [pc, #384]	; (8001c30 <HAL_RCC_OscConfig+0x2b0>)
 8001ab0:	6813      	ldr	r3, [r2, #0]
 8001ab2:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001ab6:	6921      	ldr	r1, [r4, #16]
 8001ab8:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001abc:	6013      	str	r3, [r2, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001abe:	6823      	ldr	r3, [r4, #0]
 8001ac0:	f013 0f08 	tst.w	r3, #8
 8001ac4:	d040      	beq.n	8001b48 <HAL_RCC_OscConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001ac6:	6963      	ldr	r3, [r4, #20]
 8001ac8:	b363      	cbz	r3, 8001b24 <HAL_RCC_OscConfig+0x1a4>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001aca:	4b5b      	ldr	r3, [pc, #364]	; (8001c38 <HAL_RCC_OscConfig+0x2b8>)
 8001acc:	2201      	movs	r2, #1
 8001ace:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ad0:	f7ff fdfe 	bl	80016d0 <HAL_GetTick>
 8001ad4:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ad6:	4b56      	ldr	r3, [pc, #344]	; (8001c30 <HAL_RCC_OscConfig+0x2b0>)
 8001ad8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001ada:	f013 0f02 	tst.w	r3, #2
 8001ade:	d133      	bne.n	8001b48 <HAL_RCC_OscConfig+0x1c8>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001ae0:	f7ff fdf6 	bl	80016d0 <HAL_GetTick>
 8001ae4:	1b40      	subs	r0, r0, r5
 8001ae6:	2802      	cmp	r0, #2
 8001ae8:	d9f5      	bls.n	8001ad6 <HAL_RCC_OscConfig+0x156>
        {
          return HAL_TIMEOUT;
 8001aea:	2003      	movs	r0, #3
 8001aec:	e131      	b.n	8001d52 <HAL_RCC_OscConfig+0x3d2>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001aee:	4a50      	ldr	r2, [pc, #320]	; (8001c30 <HAL_RCC_OscConfig+0x2b0>)
 8001af0:	6813      	ldr	r3, [r2, #0]
 8001af2:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001af6:	6921      	ldr	r1, [r4, #16]
 8001af8:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001afc:	6013      	str	r3, [r2, #0]
 8001afe:	e7de      	b.n	8001abe <HAL_RCC_OscConfig+0x13e>
        __HAL_RCC_HSI_DISABLE();
 8001b00:	4b4c      	ldr	r3, [pc, #304]	; (8001c34 <HAL_RCC_OscConfig+0x2b4>)
 8001b02:	2200      	movs	r2, #0
 8001b04:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001b06:	f7ff fde3 	bl	80016d0 <HAL_GetTick>
 8001b0a:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b0c:	4b48      	ldr	r3, [pc, #288]	; (8001c30 <HAL_RCC_OscConfig+0x2b0>)
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	f013 0f02 	tst.w	r3, #2
 8001b14:	d0d3      	beq.n	8001abe <HAL_RCC_OscConfig+0x13e>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001b16:	f7ff fddb 	bl	80016d0 <HAL_GetTick>
 8001b1a:	1b40      	subs	r0, r0, r5
 8001b1c:	2802      	cmp	r0, #2
 8001b1e:	d9f5      	bls.n	8001b0c <HAL_RCC_OscConfig+0x18c>
            return HAL_TIMEOUT;
 8001b20:	2003      	movs	r0, #3
 8001b22:	e116      	b.n	8001d52 <HAL_RCC_OscConfig+0x3d2>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001b24:	4b44      	ldr	r3, [pc, #272]	; (8001c38 <HAL_RCC_OscConfig+0x2b8>)
 8001b26:	2200      	movs	r2, #0
 8001b28:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b2a:	f7ff fdd1 	bl	80016d0 <HAL_GetTick>
 8001b2e:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b30:	4b3f      	ldr	r3, [pc, #252]	; (8001c30 <HAL_RCC_OscConfig+0x2b0>)
 8001b32:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001b34:	f013 0f02 	tst.w	r3, #2
 8001b38:	d006      	beq.n	8001b48 <HAL_RCC_OscConfig+0x1c8>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001b3a:	f7ff fdc9 	bl	80016d0 <HAL_GetTick>
 8001b3e:	1b40      	subs	r0, r0, r5
 8001b40:	2802      	cmp	r0, #2
 8001b42:	d9f5      	bls.n	8001b30 <HAL_RCC_OscConfig+0x1b0>
        {
          return HAL_TIMEOUT;
 8001b44:	2003      	movs	r0, #3
 8001b46:	e104      	b.n	8001d52 <HAL_RCC_OscConfig+0x3d2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b48:	6823      	ldr	r3, [r4, #0]
 8001b4a:	f013 0f04 	tst.w	r3, #4
 8001b4e:	d078      	beq.n	8001c42 <HAL_RCC_OscConfig+0x2c2>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001b50:	4b37      	ldr	r3, [pc, #220]	; (8001c30 <HAL_RCC_OscConfig+0x2b0>)
 8001b52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b54:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8001b58:	d10d      	bne.n	8001b76 <HAL_RCC_OscConfig+0x1f6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	9301      	str	r3, [sp, #4]
 8001b5e:	4b34      	ldr	r3, [pc, #208]	; (8001c30 <HAL_RCC_OscConfig+0x2b0>)
 8001b60:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001b62:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001b66:	641a      	str	r2, [r3, #64]	; 0x40
 8001b68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b6e:	9301      	str	r3, [sp, #4]
 8001b70:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8001b72:	2501      	movs	r5, #1
 8001b74:	e000      	b.n	8001b78 <HAL_RCC_OscConfig+0x1f8>
    FlagStatus       pwrclkchanged = RESET;
 8001b76:	2500      	movs	r5, #0
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b78:	4b30      	ldr	r3, [pc, #192]	; (8001c3c <HAL_RCC_OscConfig+0x2bc>)
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	f413 7f80 	tst.w	r3, #256	; 0x100
 8001b80:	d021      	beq.n	8001bc6 <HAL_RCC_OscConfig+0x246>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b82:	68a3      	ldr	r3, [r4, #8]
 8001b84:	2b01      	cmp	r3, #1
 8001b86:	d032      	beq.n	8001bee <HAL_RCC_OscConfig+0x26e>
 8001b88:	2b05      	cmp	r3, #5
 8001b8a:	d036      	beq.n	8001bfa <HAL_RCC_OscConfig+0x27a>
 8001b8c:	4b28      	ldr	r3, [pc, #160]	; (8001c30 <HAL_RCC_OscConfig+0x2b0>)
 8001b8e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001b90:	f022 0201 	bic.w	r2, r2, #1
 8001b94:	671a      	str	r2, [r3, #112]	; 0x70
 8001b96:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001b98:	f022 0204 	bic.w	r2, r2, #4
 8001b9c:	671a      	str	r2, [r3, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001b9e:	68a3      	ldr	r3, [r4, #8]
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d034      	beq.n	8001c0e <HAL_RCC_OscConfig+0x28e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ba4:	f7ff fd94 	bl	80016d0 <HAL_GetTick>
 8001ba8:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001baa:	4b21      	ldr	r3, [pc, #132]	; (8001c30 <HAL_RCC_OscConfig+0x2b0>)
 8001bac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bae:	f013 0f02 	tst.w	r3, #2
 8001bb2:	d145      	bne.n	8001c40 <HAL_RCC_OscConfig+0x2c0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001bb4:	f7ff fd8c 	bl	80016d0 <HAL_GetTick>
 8001bb8:	1b80      	subs	r0, r0, r6
 8001bba:	f241 3388 	movw	r3, #5000	; 0x1388
 8001bbe:	4298      	cmp	r0, r3
 8001bc0:	d9f3      	bls.n	8001baa <HAL_RCC_OscConfig+0x22a>
        {
          return HAL_TIMEOUT;
 8001bc2:	2003      	movs	r0, #3
 8001bc4:	e0c5      	b.n	8001d52 <HAL_RCC_OscConfig+0x3d2>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001bc6:	4a1d      	ldr	r2, [pc, #116]	; (8001c3c <HAL_RCC_OscConfig+0x2bc>)
 8001bc8:	6813      	ldr	r3, [r2, #0]
 8001bca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001bce:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8001bd0:	f7ff fd7e 	bl	80016d0 <HAL_GetTick>
 8001bd4:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001bd6:	4b19      	ldr	r3, [pc, #100]	; (8001c3c <HAL_RCC_OscConfig+0x2bc>)
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f413 7f80 	tst.w	r3, #256	; 0x100
 8001bde:	d1d0      	bne.n	8001b82 <HAL_RCC_OscConfig+0x202>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001be0:	f7ff fd76 	bl	80016d0 <HAL_GetTick>
 8001be4:	1b80      	subs	r0, r0, r6
 8001be6:	2802      	cmp	r0, #2
 8001be8:	d9f5      	bls.n	8001bd6 <HAL_RCC_OscConfig+0x256>
          return HAL_TIMEOUT;
 8001bea:	2003      	movs	r0, #3
 8001bec:	e0b1      	b.n	8001d52 <HAL_RCC_OscConfig+0x3d2>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001bee:	4a10      	ldr	r2, [pc, #64]	; (8001c30 <HAL_RCC_OscConfig+0x2b0>)
 8001bf0:	6f13      	ldr	r3, [r2, #112]	; 0x70
 8001bf2:	f043 0301 	orr.w	r3, r3, #1
 8001bf6:	6713      	str	r3, [r2, #112]	; 0x70
 8001bf8:	e7d1      	b.n	8001b9e <HAL_RCC_OscConfig+0x21e>
 8001bfa:	4b0d      	ldr	r3, [pc, #52]	; (8001c30 <HAL_RCC_OscConfig+0x2b0>)
 8001bfc:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001bfe:	f042 0204 	orr.w	r2, r2, #4
 8001c02:	671a      	str	r2, [r3, #112]	; 0x70
 8001c04:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001c06:	f042 0201 	orr.w	r2, r2, #1
 8001c0a:	671a      	str	r2, [r3, #112]	; 0x70
 8001c0c:	e7c7      	b.n	8001b9e <HAL_RCC_OscConfig+0x21e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c0e:	f7ff fd5f 	bl	80016d0 <HAL_GetTick>
 8001c12:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c14:	4b06      	ldr	r3, [pc, #24]	; (8001c30 <HAL_RCC_OscConfig+0x2b0>)
 8001c16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c18:	f013 0f02 	tst.w	r3, #2
 8001c1c:	d010      	beq.n	8001c40 <HAL_RCC_OscConfig+0x2c0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001c1e:	f7ff fd57 	bl	80016d0 <HAL_GetTick>
 8001c22:	1b80      	subs	r0, r0, r6
 8001c24:	f241 3388 	movw	r3, #5000	; 0x1388
 8001c28:	4298      	cmp	r0, r3
 8001c2a:	d9f3      	bls.n	8001c14 <HAL_RCC_OscConfig+0x294>
        {
          return HAL_TIMEOUT;
 8001c2c:	2003      	movs	r0, #3
 8001c2e:	e090      	b.n	8001d52 <HAL_RCC_OscConfig+0x3d2>
 8001c30:	40023800 	.word	0x40023800
 8001c34:	42470000 	.word	0x42470000
 8001c38:	42470e80 	.word	0x42470e80
 8001c3c:	40007000 	.word	0x40007000
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001c40:	b9ed      	cbnz	r5, 8001c7e <HAL_RCC_OscConfig+0x2fe>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001c42:	69a3      	ldr	r3, [r4, #24]
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	f000 8083 	beq.w	8001d50 <HAL_RCC_OscConfig+0x3d0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001c4a:	4a49      	ldr	r2, [pc, #292]	; (8001d70 <HAL_RCC_OscConfig+0x3f0>)
 8001c4c:	6892      	ldr	r2, [r2, #8]
 8001c4e:	f002 020c 	and.w	r2, r2, #12
 8001c52:	2a08      	cmp	r2, #8
 8001c54:	d051      	beq.n	8001cfa <HAL_RCC_OscConfig+0x37a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001c56:	2b02      	cmp	r3, #2
 8001c58:	d017      	beq.n	8001c8a <HAL_RCC_OscConfig+0x30a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c5a:	4b46      	ldr	r3, [pc, #280]	; (8001d74 <HAL_RCC_OscConfig+0x3f4>)
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c60:	f7ff fd36 	bl	80016d0 <HAL_GetTick>
 8001c64:	4604      	mov	r4, r0

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c66:	4b42      	ldr	r3, [pc, #264]	; (8001d70 <HAL_RCC_OscConfig+0x3f0>)
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001c6e:	d042      	beq.n	8001cf6 <HAL_RCC_OscConfig+0x376>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c70:	f7ff fd2e 	bl	80016d0 <HAL_GetTick>
 8001c74:	1b00      	subs	r0, r0, r4
 8001c76:	2802      	cmp	r0, #2
 8001c78:	d9f5      	bls.n	8001c66 <HAL_RCC_OscConfig+0x2e6>
          {
            return HAL_TIMEOUT;
 8001c7a:	2003      	movs	r0, #3
 8001c7c:	e069      	b.n	8001d52 <HAL_RCC_OscConfig+0x3d2>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c7e:	4a3c      	ldr	r2, [pc, #240]	; (8001d70 <HAL_RCC_OscConfig+0x3f0>)
 8001c80:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8001c82:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001c86:	6413      	str	r3, [r2, #64]	; 0x40
 8001c88:	e7db      	b.n	8001c42 <HAL_RCC_OscConfig+0x2c2>
        __HAL_RCC_PLL_DISABLE();
 8001c8a:	4b3a      	ldr	r3, [pc, #232]	; (8001d74 <HAL_RCC_OscConfig+0x3f4>)
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001c90:	f7ff fd1e 	bl	80016d0 <HAL_GetTick>
 8001c94:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c96:	4b36      	ldr	r3, [pc, #216]	; (8001d70 <HAL_RCC_OscConfig+0x3f0>)
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001c9e:	d006      	beq.n	8001cae <HAL_RCC_OscConfig+0x32e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ca0:	f7ff fd16 	bl	80016d0 <HAL_GetTick>
 8001ca4:	1b40      	subs	r0, r0, r5
 8001ca6:	2802      	cmp	r0, #2
 8001ca8:	d9f5      	bls.n	8001c96 <HAL_RCC_OscConfig+0x316>
            return HAL_TIMEOUT;
 8001caa:	2003      	movs	r0, #3
 8001cac:	e051      	b.n	8001d52 <HAL_RCC_OscConfig+0x3d2>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001cae:	69e3      	ldr	r3, [r4, #28]
 8001cb0:	6a22      	ldr	r2, [r4, #32]
 8001cb2:	4313      	orrs	r3, r2
 8001cb4:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001cb6:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8001cba:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8001cbc:	0852      	lsrs	r2, r2, #1
 8001cbe:	3a01      	subs	r2, #1
 8001cc0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8001cc4:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001cc6:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8001cca:	4a29      	ldr	r2, [pc, #164]	; (8001d70 <HAL_RCC_OscConfig+0x3f0>)
 8001ccc:	6053      	str	r3, [r2, #4]
        __HAL_RCC_PLL_ENABLE();
 8001cce:	4b29      	ldr	r3, [pc, #164]	; (8001d74 <HAL_RCC_OscConfig+0x3f4>)
 8001cd0:	2201      	movs	r2, #1
 8001cd2:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001cd4:	f7ff fcfc 	bl	80016d0 <HAL_GetTick>
 8001cd8:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001cda:	4b25      	ldr	r3, [pc, #148]	; (8001d70 <HAL_RCC_OscConfig+0x3f0>)
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001ce2:	d106      	bne.n	8001cf2 <HAL_RCC_OscConfig+0x372>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ce4:	f7ff fcf4 	bl	80016d0 <HAL_GetTick>
 8001ce8:	1b00      	subs	r0, r0, r4
 8001cea:	2802      	cmp	r0, #2
 8001cec:	d9f5      	bls.n	8001cda <HAL_RCC_OscConfig+0x35a>
            return HAL_TIMEOUT;
 8001cee:	2003      	movs	r0, #3
 8001cf0:	e02f      	b.n	8001d52 <HAL_RCC_OscConfig+0x3d2>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 8001cf2:	2000      	movs	r0, #0
 8001cf4:	e02d      	b.n	8001d52 <HAL_RCC_OscConfig+0x3d2>
 8001cf6:	2000      	movs	r0, #0
 8001cf8:	e02b      	b.n	8001d52 <HAL_RCC_OscConfig+0x3d2>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001cfa:	2b01      	cmp	r3, #1
 8001cfc:	d02b      	beq.n	8001d56 <HAL_RCC_OscConfig+0x3d6>
        pll_config = RCC->PLLCFGR;
 8001cfe:	4b1c      	ldr	r3, [pc, #112]	; (8001d70 <HAL_RCC_OscConfig+0x3f0>)
 8001d00:	685b      	ldr	r3, [r3, #4]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d02:	f403 0180 	and.w	r1, r3, #4194304	; 0x400000
 8001d06:	69e2      	ldr	r2, [r4, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001d08:	4291      	cmp	r1, r2
 8001d0a:	d126      	bne.n	8001d5a <HAL_RCC_OscConfig+0x3da>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001d0c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001d10:	6a21      	ldr	r1, [r4, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d12:	428a      	cmp	r2, r1
 8001d14:	d123      	bne.n	8001d5e <HAL_RCC_OscConfig+0x3de>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001d16:	6a61      	ldr	r1, [r4, #36]	; 0x24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001d18:	f647 72c0 	movw	r2, #32704	; 0x7fc0
 8001d1c:	401a      	ands	r2, r3
 8001d1e:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 8001d22:	d11e      	bne.n	8001d62 <HAL_RCC_OscConfig+0x3e2>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001d24:	f403 3140 	and.w	r1, r3, #196608	; 0x30000
 8001d28:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8001d2a:	0852      	lsrs	r2, r2, #1
 8001d2c:	3a01      	subs	r2, #1
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001d2e:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 8001d32:	d118      	bne.n	8001d66 <HAL_RCC_OscConfig+0x3e6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001d34:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 8001d38:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001d3a:	ebb3 6f02 	cmp.w	r3, r2, lsl #24
 8001d3e:	d114      	bne.n	8001d6a <HAL_RCC_OscConfig+0x3ea>
  return HAL_OK;
 8001d40:	2000      	movs	r0, #0
 8001d42:	e006      	b.n	8001d52 <HAL_RCC_OscConfig+0x3d2>
    return HAL_ERROR;
 8001d44:	2001      	movs	r0, #1
}
 8001d46:	4770      	bx	lr
        return HAL_ERROR;
 8001d48:	2001      	movs	r0, #1
 8001d4a:	e002      	b.n	8001d52 <HAL_RCC_OscConfig+0x3d2>
        return HAL_ERROR;
 8001d4c:	2001      	movs	r0, #1
 8001d4e:	e000      	b.n	8001d52 <HAL_RCC_OscConfig+0x3d2>
  return HAL_OK;
 8001d50:	2000      	movs	r0, #0
}
 8001d52:	b002      	add	sp, #8
 8001d54:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 8001d56:	2001      	movs	r0, #1
 8001d58:	e7fb      	b.n	8001d52 <HAL_RCC_OscConfig+0x3d2>
          return HAL_ERROR;
 8001d5a:	2001      	movs	r0, #1
 8001d5c:	e7f9      	b.n	8001d52 <HAL_RCC_OscConfig+0x3d2>
 8001d5e:	2001      	movs	r0, #1
 8001d60:	e7f7      	b.n	8001d52 <HAL_RCC_OscConfig+0x3d2>
 8001d62:	2001      	movs	r0, #1
 8001d64:	e7f5      	b.n	8001d52 <HAL_RCC_OscConfig+0x3d2>
 8001d66:	2001      	movs	r0, #1
 8001d68:	e7f3      	b.n	8001d52 <HAL_RCC_OscConfig+0x3d2>
 8001d6a:	2001      	movs	r0, #1
 8001d6c:	e7f1      	b.n	8001d52 <HAL_RCC_OscConfig+0x3d2>
 8001d6e:	bf00      	nop
 8001d70:	40023800 	.word	0x40023800
 8001d74:	42470060 	.word	0x42470060

08001d78 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001d78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001d7a:	4b24      	ldr	r3, [pc, #144]	; (8001e0c <HAL_RCC_GetSysClockFreq+0x94>)
 8001d7c:	689b      	ldr	r3, [r3, #8]
 8001d7e:	f003 030c 	and.w	r3, r3, #12
 8001d82:	2b04      	cmp	r3, #4
 8001d84:	d03d      	beq.n	8001e02 <HAL_RCC_GetSysClockFreq+0x8a>
 8001d86:	2b08      	cmp	r3, #8
 8001d88:	d13d      	bne.n	8001e06 <HAL_RCC_GetSysClockFreq+0x8e>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001d8a:	4b20      	ldr	r3, [pc, #128]	; (8001e0c <HAL_RCC_GetSysClockFreq+0x94>)
 8001d8c:	685a      	ldr	r2, [r3, #4]
 8001d8e:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001d92:	685b      	ldr	r3, [r3, #4]
 8001d94:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8001d98:	d012      	beq.n	8001dc0 <HAL_RCC_GetSysClockFreq+0x48>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001d9a:	4b1c      	ldr	r3, [pc, #112]	; (8001e0c <HAL_RCC_GetSysClockFreq+0x94>)
 8001d9c:	6859      	ldr	r1, [r3, #4]
 8001d9e:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8001da2:	2300      	movs	r3, #0
 8001da4:	481a      	ldr	r0, [pc, #104]	; (8001e10 <HAL_RCC_GetSysClockFreq+0x98>)
 8001da6:	fba1 0100 	umull	r0, r1, r1, r0
 8001daa:	f7fe ff05 	bl	8000bb8 <__aeabi_uldivmod>
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001dae:	4b17      	ldr	r3, [pc, #92]	; (8001e0c <HAL_RCC_GetSysClockFreq+0x94>)
 8001db0:	685b      	ldr	r3, [r3, #4]
 8001db2:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8001db6:	3301      	adds	r3, #1
 8001db8:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco/pllp;
 8001dba:	fbb0 f0f3 	udiv	r0, r0, r3
      break;
 8001dbe:	e023      	b.n	8001e08 <HAL_RCC_GetSysClockFreq+0x90>
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001dc0:	4b12      	ldr	r3, [pc, #72]	; (8001e0c <HAL_RCC_GetSysClockFreq+0x94>)
 8001dc2:	685b      	ldr	r3, [r3, #4]
 8001dc4:	f3c3 1388 	ubfx	r3, r3, #6, #9
 8001dc8:	015c      	lsls	r4, r3, #5
 8001dca:	2500      	movs	r5, #0
 8001dcc:	1ae4      	subs	r4, r4, r3
 8001dce:	f165 0500 	sbc.w	r5, r5, #0
 8001dd2:	01ae      	lsls	r6, r5, #6
 8001dd4:	ea46 6694 	orr.w	r6, r6, r4, lsr #26
 8001dd8:	01a7      	lsls	r7, r4, #6
 8001dda:	1b38      	subs	r0, r7, r4
 8001ddc:	eb66 0105 	sbc.w	r1, r6, r5
 8001de0:	00cc      	lsls	r4, r1, #3
 8001de2:	ea44 7450 	orr.w	r4, r4, r0, lsr #29
 8001de6:	00c5      	lsls	r5, r0, #3
 8001de8:	18e8      	adds	r0, r5, r3
 8001dea:	f144 0100 	adc.w	r1, r4, #0
 8001dee:	028b      	lsls	r3, r1, #10
 8001df0:	ea43 5390 	orr.w	r3, r3, r0, lsr #22
 8001df4:	0284      	lsls	r4, r0, #10
 8001df6:	4620      	mov	r0, r4
 8001df8:	4619      	mov	r1, r3
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	f7fe fedc 	bl	8000bb8 <__aeabi_uldivmod>
 8001e00:	e7d5      	b.n	8001dae <HAL_RCC_GetSysClockFreq+0x36>
      sysclockfreq = HSE_VALUE;
 8001e02:	4803      	ldr	r0, [pc, #12]	; (8001e10 <HAL_RCC_GetSysClockFreq+0x98>)
 8001e04:	e000      	b.n	8001e08 <HAL_RCC_GetSysClockFreq+0x90>
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001e06:	4803      	ldr	r0, [pc, #12]	; (8001e14 <HAL_RCC_GetSysClockFreq+0x9c>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8001e08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001e0a:	bf00      	nop
 8001e0c:	40023800 	.word	0x40023800
 8001e10:	017d7840 	.word	0x017d7840
 8001e14:	00f42400 	.word	0x00f42400

08001e18 <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 8001e18:	2800      	cmp	r0, #0
 8001e1a:	f000 809b 	beq.w	8001f54 <HAL_RCC_ClockConfig+0x13c>
{
 8001e1e:	b570      	push	{r4, r5, r6, lr}
 8001e20:	460d      	mov	r5, r1
 8001e22:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001e24:	4b4f      	ldr	r3, [pc, #316]	; (8001f64 <HAL_RCC_ClockConfig+0x14c>)
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	f003 0307 	and.w	r3, r3, #7
 8001e2c:	428b      	cmp	r3, r1
 8001e2e:	d208      	bcs.n	8001e42 <HAL_RCC_ClockConfig+0x2a>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e30:	b2cb      	uxtb	r3, r1
 8001e32:	4a4c      	ldr	r2, [pc, #304]	; (8001f64 <HAL_RCC_ClockConfig+0x14c>)
 8001e34:	7013      	strb	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e36:	6813      	ldr	r3, [r2, #0]
 8001e38:	f003 0307 	and.w	r3, r3, #7
 8001e3c:	428b      	cmp	r3, r1
 8001e3e:	f040 808b 	bne.w	8001f58 <HAL_RCC_ClockConfig+0x140>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e42:	6823      	ldr	r3, [r4, #0]
 8001e44:	f013 0f02 	tst.w	r3, #2
 8001e48:	d017      	beq.n	8001e7a <HAL_RCC_ClockConfig+0x62>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e4a:	f013 0f04 	tst.w	r3, #4
 8001e4e:	d004      	beq.n	8001e5a <HAL_RCC_ClockConfig+0x42>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001e50:	4a45      	ldr	r2, [pc, #276]	; (8001f68 <HAL_RCC_ClockConfig+0x150>)
 8001e52:	6893      	ldr	r3, [r2, #8]
 8001e54:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001e58:	6093      	str	r3, [r2, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e5a:	6823      	ldr	r3, [r4, #0]
 8001e5c:	f013 0f08 	tst.w	r3, #8
 8001e60:	d004      	beq.n	8001e6c <HAL_RCC_ClockConfig+0x54>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001e62:	4a41      	ldr	r2, [pc, #260]	; (8001f68 <HAL_RCC_ClockConfig+0x150>)
 8001e64:	6893      	ldr	r3, [r2, #8]
 8001e66:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001e6a:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e6c:	4a3e      	ldr	r2, [pc, #248]	; (8001f68 <HAL_RCC_ClockConfig+0x150>)
 8001e6e:	6893      	ldr	r3, [r2, #8]
 8001e70:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001e74:	68a1      	ldr	r1, [r4, #8]
 8001e76:	430b      	orrs	r3, r1
 8001e78:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e7a:	6823      	ldr	r3, [r4, #0]
 8001e7c:	f013 0f01 	tst.w	r3, #1
 8001e80:	d032      	beq.n	8001ee8 <HAL_RCC_ClockConfig+0xd0>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e82:	6863      	ldr	r3, [r4, #4]
 8001e84:	2b01      	cmp	r3, #1
 8001e86:	d021      	beq.n	8001ecc <HAL_RCC_ClockConfig+0xb4>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001e88:	1e9a      	subs	r2, r3, #2
 8001e8a:	2a01      	cmp	r2, #1
 8001e8c:	d925      	bls.n	8001eda <HAL_RCC_ClockConfig+0xc2>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e8e:	4a36      	ldr	r2, [pc, #216]	; (8001f68 <HAL_RCC_ClockConfig+0x150>)
 8001e90:	6812      	ldr	r2, [r2, #0]
 8001e92:	f012 0f02 	tst.w	r2, #2
 8001e96:	d061      	beq.n	8001f5c <HAL_RCC_ClockConfig+0x144>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001e98:	4933      	ldr	r1, [pc, #204]	; (8001f68 <HAL_RCC_ClockConfig+0x150>)
 8001e9a:	688a      	ldr	r2, [r1, #8]
 8001e9c:	f022 0203 	bic.w	r2, r2, #3
 8001ea0:	4313      	orrs	r3, r2
 8001ea2:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 8001ea4:	f7ff fc14 	bl	80016d0 <HAL_GetTick>
 8001ea8:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001eaa:	4b2f      	ldr	r3, [pc, #188]	; (8001f68 <HAL_RCC_ClockConfig+0x150>)
 8001eac:	689b      	ldr	r3, [r3, #8]
 8001eae:	f003 030c 	and.w	r3, r3, #12
 8001eb2:	6862      	ldr	r2, [r4, #4]
 8001eb4:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8001eb8:	d016      	beq.n	8001ee8 <HAL_RCC_ClockConfig+0xd0>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001eba:	f7ff fc09 	bl	80016d0 <HAL_GetTick>
 8001ebe:	1b80      	subs	r0, r0, r6
 8001ec0:	f241 3388 	movw	r3, #5000	; 0x1388
 8001ec4:	4298      	cmp	r0, r3
 8001ec6:	d9f0      	bls.n	8001eaa <HAL_RCC_ClockConfig+0x92>
        return HAL_TIMEOUT;
 8001ec8:	2003      	movs	r0, #3
 8001eca:	e042      	b.n	8001f52 <HAL_RCC_ClockConfig+0x13a>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ecc:	4a26      	ldr	r2, [pc, #152]	; (8001f68 <HAL_RCC_ClockConfig+0x150>)
 8001ece:	6812      	ldr	r2, [r2, #0]
 8001ed0:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 8001ed4:	d1e0      	bne.n	8001e98 <HAL_RCC_ClockConfig+0x80>
        return HAL_ERROR;
 8001ed6:	2001      	movs	r0, #1
 8001ed8:	e03b      	b.n	8001f52 <HAL_RCC_ClockConfig+0x13a>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001eda:	4a23      	ldr	r2, [pc, #140]	; (8001f68 <HAL_RCC_ClockConfig+0x150>)
 8001edc:	6812      	ldr	r2, [r2, #0]
 8001ede:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8001ee2:	d1d9      	bne.n	8001e98 <HAL_RCC_ClockConfig+0x80>
        return HAL_ERROR;
 8001ee4:	2001      	movs	r0, #1
 8001ee6:	e034      	b.n	8001f52 <HAL_RCC_ClockConfig+0x13a>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001ee8:	4b1e      	ldr	r3, [pc, #120]	; (8001f64 <HAL_RCC_ClockConfig+0x14c>)
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	f003 0307 	and.w	r3, r3, #7
 8001ef0:	42ab      	cmp	r3, r5
 8001ef2:	d907      	bls.n	8001f04 <HAL_RCC_ClockConfig+0xec>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ef4:	b2ea      	uxtb	r2, r5
 8001ef6:	4b1b      	ldr	r3, [pc, #108]	; (8001f64 <HAL_RCC_ClockConfig+0x14c>)
 8001ef8:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	f003 0307 	and.w	r3, r3, #7
 8001f00:	42ab      	cmp	r3, r5
 8001f02:	d12d      	bne.n	8001f60 <HAL_RCC_ClockConfig+0x148>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f04:	6823      	ldr	r3, [r4, #0]
 8001f06:	f013 0f04 	tst.w	r3, #4
 8001f0a:	d006      	beq.n	8001f1a <HAL_RCC_ClockConfig+0x102>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001f0c:	4a16      	ldr	r2, [pc, #88]	; (8001f68 <HAL_RCC_ClockConfig+0x150>)
 8001f0e:	6893      	ldr	r3, [r2, #8]
 8001f10:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8001f14:	68e1      	ldr	r1, [r4, #12]
 8001f16:	430b      	orrs	r3, r1
 8001f18:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f1a:	6823      	ldr	r3, [r4, #0]
 8001f1c:	f013 0f08 	tst.w	r3, #8
 8001f20:	d007      	beq.n	8001f32 <HAL_RCC_ClockConfig+0x11a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001f22:	4a11      	ldr	r2, [pc, #68]	; (8001f68 <HAL_RCC_ClockConfig+0x150>)
 8001f24:	6893      	ldr	r3, [r2, #8]
 8001f26:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8001f2a:	6921      	ldr	r1, [r4, #16]
 8001f2c:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001f30:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001f32:	f7ff ff21 	bl	8001d78 <HAL_RCC_GetSysClockFreq>
 8001f36:	4b0c      	ldr	r3, [pc, #48]	; (8001f68 <HAL_RCC_ClockConfig+0x150>)
 8001f38:	689b      	ldr	r3, [r3, #8]
 8001f3a:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001f3e:	4a0b      	ldr	r2, [pc, #44]	; (8001f6c <HAL_RCC_ClockConfig+0x154>)
 8001f40:	5cd3      	ldrb	r3, [r2, r3]
 8001f42:	40d8      	lsrs	r0, r3
 8001f44:	4b0a      	ldr	r3, [pc, #40]	; (8001f70 <HAL_RCC_ClockConfig+0x158>)
 8001f46:	6018      	str	r0, [r3, #0]
  HAL_InitTick (uwTickPrio);
 8001f48:	4b0a      	ldr	r3, [pc, #40]	; (8001f74 <HAL_RCC_ClockConfig+0x15c>)
 8001f4a:	6818      	ldr	r0, [r3, #0]
 8001f4c:	f7ff fb74 	bl	8001638 <HAL_InitTick>
  return HAL_OK;
 8001f50:	2000      	movs	r0, #0
}
 8001f52:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8001f54:	2001      	movs	r0, #1
}
 8001f56:	4770      	bx	lr
      return HAL_ERROR;
 8001f58:	2001      	movs	r0, #1
 8001f5a:	e7fa      	b.n	8001f52 <HAL_RCC_ClockConfig+0x13a>
        return HAL_ERROR;
 8001f5c:	2001      	movs	r0, #1
 8001f5e:	e7f8      	b.n	8001f52 <HAL_RCC_ClockConfig+0x13a>
      return HAL_ERROR;
 8001f60:	2001      	movs	r0, #1
 8001f62:	e7f6      	b.n	8001f52 <HAL_RCC_ClockConfig+0x13a>
 8001f64:	40023c00 	.word	0x40023c00
 8001f68:	40023800 	.word	0x40023800
 8001f6c:	08005bf8 	.word	0x08005bf8
 8001f70:	20000060 	.word	0x20000060
 8001f74:	20000068 	.word	0x20000068

08001f78 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8001f78:	4b01      	ldr	r3, [pc, #4]	; (8001f80 <HAL_RCC_GetHCLKFreq+0x8>)
 8001f7a:	6818      	ldr	r0, [r3, #0]
 8001f7c:	4770      	bx	lr
 8001f7e:	bf00      	nop
 8001f80:	20000060 	.word	0x20000060

08001f84 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001f84:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001f86:	f7ff fff7 	bl	8001f78 <HAL_RCC_GetHCLKFreq>
 8001f8a:	4b04      	ldr	r3, [pc, #16]	; (8001f9c <HAL_RCC_GetPCLK1Freq+0x18>)
 8001f8c:	689b      	ldr	r3, [r3, #8]
 8001f8e:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8001f92:	4a03      	ldr	r2, [pc, #12]	; (8001fa0 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8001f94:	5cd3      	ldrb	r3, [r2, r3]
}
 8001f96:	40d8      	lsrs	r0, r3
 8001f98:	bd08      	pop	{r3, pc}
 8001f9a:	bf00      	nop
 8001f9c:	40023800 	.word	0x40023800
 8001fa0:	08005c08 	.word	0x08005c08

08001fa4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001fa4:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001fa6:	f7ff ffe7 	bl	8001f78 <HAL_RCC_GetHCLKFreq>
 8001faa:	4b04      	ldr	r3, [pc, #16]	; (8001fbc <HAL_RCC_GetPCLK2Freq+0x18>)
 8001fac:	689b      	ldr	r3, [r3, #8]
 8001fae:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8001fb2:	4a03      	ldr	r2, [pc, #12]	; (8001fc0 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8001fb4:	5cd3      	ldrb	r3, [r2, r3]
}
 8001fb6:	40d8      	lsrs	r0, r3
 8001fb8:	bd08      	pop	{r3, pc}
 8001fba:	bf00      	nop
 8001fbc:	40023800 	.word	0x40023800
 8001fc0:	08005c08 	.word	0x08005c08

08001fc4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8001fc4:	b470      	push	{r4, r5, r6}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001fc6:	6a03      	ldr	r3, [r0, #32]
 8001fc8:	f023 0301 	bic.w	r3, r3, #1
 8001fcc:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001fce:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001fd0:	6846      	ldr	r6, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001fd2:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8001fd4:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001fd8:	680c      	ldr	r4, [r1, #0]
 8001fda:	ea44 0502 	orr.w	r5, r4, r2

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8001fde:	f023 0202 	bic.w	r2, r3, #2
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8001fe2:	688b      	ldr	r3, [r1, #8]
 8001fe4:	4313      	orrs	r3, r2

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8001fe6:	4c0d      	ldr	r4, [pc, #52]	; (800201c <TIM_OC1_SetConfig+0x58>)
 8001fe8:	42a0      	cmp	r0, r4
 8001fea:	d009      	beq.n	8002000 <TIM_OC1_SetConfig+0x3c>
    tmpccer |= OC_Config->OCNPolarity;
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001fec:	4c0b      	ldr	r4, [pc, #44]	; (800201c <TIM_OC1_SetConfig+0x58>)
 8001fee:	42a0      	cmp	r0, r4
 8001ff0:	d00d      	beq.n	800200e <TIM_OC1_SetConfig+0x4a>
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001ff2:	6046      	str	r6, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8001ff4:	6185      	str	r5, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8001ff6:	684a      	ldr	r2, [r1, #4]
 8001ff8:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001ffa:	6203      	str	r3, [r0, #32]
}
 8001ffc:	bc70      	pop	{r4, r5, r6}
 8001ffe:	4770      	bx	lr
    tmpccer &= ~TIM_CCER_CC1NP;
 8002000:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 8002004:	68ca      	ldr	r2, [r1, #12]
 8002006:	4313      	orrs	r3, r2
    tmpccer &= ~TIM_CCER_CC1NE;
 8002008:	f023 0304 	bic.w	r3, r3, #4
 800200c:	e7ee      	b.n	8001fec <TIM_OC1_SetConfig+0x28>
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800200e:	f426 7640 	bic.w	r6, r6, #768	; 0x300
    tmpcr2 |= OC_Config->OCIdleState;
 8002012:	694a      	ldr	r2, [r1, #20]
 8002014:	4332      	orrs	r2, r6
    tmpcr2 |= OC_Config->OCNIdleState;
 8002016:	698e      	ldr	r6, [r1, #24]
 8002018:	4316      	orrs	r6, r2
 800201a:	e7ea      	b.n	8001ff2 <TIM_OC1_SetConfig+0x2e>
 800201c:	40010000 	.word	0x40010000

08002020 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002020:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002022:	6a03      	ldr	r3, [r0, #32]
 8002024:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002028:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800202a:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800202c:	6845      	ldr	r5, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800202e:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002030:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002034:	680c      	ldr	r4, [r1, #0]
 8002036:	4322      	orrs	r2, r4

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002038:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800203c:	688c      	ldr	r4, [r1, #8]
 800203e:	ea43 2304 	orr.w	r3, r3, r4, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002042:	4c0f      	ldr	r4, [pc, #60]	; (8002080 <TIM_OC3_SetConfig+0x60>)
 8002044:	42a0      	cmp	r0, r4
 8002046:	d009      	beq.n	800205c <TIM_OC3_SetConfig+0x3c>
    tmpccer |= (OC_Config->OCNPolarity << 8U);
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002048:	4c0d      	ldr	r4, [pc, #52]	; (8002080 <TIM_OC3_SetConfig+0x60>)
 800204a:	42a0      	cmp	r0, r4
 800204c:	d00e      	beq.n	800206c <TIM_OC3_SetConfig+0x4c>
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800204e:	6045      	str	r5, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002050:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002052:	684a      	ldr	r2, [r1, #4]
 8002054:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002056:	6203      	str	r3, [r0, #32]
}
 8002058:	bc30      	pop	{r4, r5}
 800205a:	4770      	bx	lr
    tmpccer &= ~TIM_CCER_CC3NP;
 800205c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002060:	68cc      	ldr	r4, [r1, #12]
 8002062:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
    tmpccer &= ~TIM_CCER_CC3NE;
 8002066:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800206a:	e7ed      	b.n	8002048 <TIM_OC3_SetConfig+0x28>
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800206c:	f425 5540 	bic.w	r5, r5, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002070:	694c      	ldr	r4, [r1, #20]
 8002072:	ea45 1504 	orr.w	r5, r5, r4, lsl #4
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002076:	698c      	ldr	r4, [r1, #24]
 8002078:	ea45 1504 	orr.w	r5, r5, r4, lsl #4
 800207c:	e7e7      	b.n	800204e <TIM_OC3_SetConfig+0x2e>
 800207e:	bf00      	nop
 8002080:	40010000 	.word	0x40010000

08002084 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002084:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002086:	6a03      	ldr	r3, [r0, #32]
 8002088:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800208c:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800208e:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002090:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002092:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002094:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002098:	680d      	ldr	r5, [r1, #0]
 800209a:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800209e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80020a2:	688d      	ldr	r5, [r1, #8]
 80020a4:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80020a8:	4d07      	ldr	r5, [pc, #28]	; (80020c8 <TIM_OC4_SetConfig+0x44>)
 80020aa:	42a8      	cmp	r0, r5
 80020ac:	d006      	beq.n	80020bc <TIM_OC4_SetConfig+0x38>
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80020ae:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80020b0:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80020b2:	684a      	ldr	r2, [r1, #4]
 80020b4:	6402      	str	r2, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80020b6:	6203      	str	r3, [r0, #32]
}
 80020b8:	bc30      	pop	{r4, r5}
 80020ba:	4770      	bx	lr
    tmpcr2 &= ~TIM_CR2_OIS4;
 80020bc:	f424 4480 	bic.w	r4, r4, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80020c0:	694d      	ldr	r5, [r1, #20]
 80020c2:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
 80020c6:	e7f2      	b.n	80020ae <TIM_OC4_SetConfig+0x2a>
 80020c8:	40010000 	.word	0x40010000

080020cc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80020cc:	b430      	push	{r4, r5}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80020ce:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80020d0:	6a05      	ldr	r5, [r0, #32]
 80020d2:	f025 0501 	bic.w	r5, r5, #1
 80020d6:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 80020d8:	6984      	ldr	r4, [r0, #24]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80020da:	f024 04f0 	bic.w	r4, r4, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80020de:	ea44 1402 	orr.w	r4, r4, r2, lsl #4

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80020e2:	f023 030a 	bic.w	r3, r3, #10
  tmpccer |= TIM_ICPolarity;
 80020e6:	430b      	orrs	r3, r1

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80020e8:	6184      	str	r4, [r0, #24]
  TIMx->CCER = tmpccer;
 80020ea:	6203      	str	r3, [r0, #32]
}
 80020ec:	bc30      	pop	{r4, r5}
 80020ee:	4770      	bx	lr

080020f0 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80020f0:	b430      	push	{r4, r5}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80020f2:	6a05      	ldr	r5, [r0, #32]
 80020f4:	f025 0510 	bic.w	r5, r5, #16
 80020f8:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 80020fa:	6984      	ldr	r4, [r0, #24]
  tmpccer = TIMx->CCER;
 80020fc:	6a05      	ldr	r5, [r0, #32]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80020fe:	f424 7440 	bic.w	r4, r4, #768	; 0x300
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8002102:	ea44 2402 	orr.w	r4, r4, r2, lsl #8

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002106:	f424 4470 	bic.w	r4, r4, #61440	; 0xf000
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800210a:	031b      	lsls	r3, r3, #12
 800210c:	b29b      	uxth	r3, r3
 800210e:	4323      	orrs	r3, r4

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002110:	f025 05a0 	bic.w	r5, r5, #160	; 0xa0
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8002114:	0109      	lsls	r1, r1, #4
 8002116:	f001 01a0 	and.w	r1, r1, #160	; 0xa0
 800211a:	4329      	orrs	r1, r5

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800211c:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 800211e:	6201      	str	r1, [r0, #32]
}
 8002120:	bc30      	pop	{r4, r5}
 8002122:	4770      	bx	lr

08002124 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002124:	b430      	push	{r4, r5}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002126:	6a05      	ldr	r5, [r0, #32]
 8002128:	f025 0510 	bic.w	r5, r5, #16
 800212c:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 800212e:	6984      	ldr	r4, [r0, #24]
  tmpccer = TIMx->CCER;
 8002130:	6a03      	ldr	r3, [r0, #32]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002132:	f424 4470 	bic.w	r4, r4, #61440	; 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002136:	ea44 3402 	orr.w	r4, r4, r2, lsl #12

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800213a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 800213e:	ea43 1301 	orr.w	r3, r3, r1, lsl #4

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002142:	6184      	str	r4, [r0, #24]
  TIMx->CCER = tmpccer;
 8002144:	6203      	str	r3, [r0, #32]
}
 8002146:	bc30      	pop	{r4, r5}
 8002148:	4770      	bx	lr

0800214a <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800214a:	b430      	push	{r4, r5}
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800214c:	6a05      	ldr	r5, [r0, #32]
 800214e:	f425 7580 	bic.w	r5, r5, #256	; 0x100
 8002152:	6205      	str	r5, [r0, #32]
  tmpccmr2 = TIMx->CCMR2;
 8002154:	69c4      	ldr	r4, [r0, #28]
  tmpccer = TIMx->CCER;
 8002156:	6a05      	ldr	r5, [r0, #32]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8002158:	f024 0403 	bic.w	r4, r4, #3
  tmpccmr2 |= TIM_ICSelection;
 800215c:	4314      	orrs	r4, r2

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800215e:	f024 04f0 	bic.w	r4, r4, #240	; 0xf0
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8002162:	011b      	lsls	r3, r3, #4
 8002164:	b2db      	uxtb	r3, r3
 8002166:	4323      	orrs	r3, r4

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8002168:	f425 6520 	bic.w	r5, r5, #2560	; 0xa00
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800216c:	0209      	lsls	r1, r1, #8
 800216e:	f401 6120 	and.w	r1, r1, #2560	; 0xa00
 8002172:	4329      	orrs	r1, r5

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8002174:	61c3      	str	r3, [r0, #28]
  TIMx->CCER = tmpccer;
 8002176:	6201      	str	r1, [r0, #32]
}
 8002178:	bc30      	pop	{r4, r5}
 800217a:	4770      	bx	lr

0800217c <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800217c:	b430      	push	{r4, r5}
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800217e:	6a05      	ldr	r5, [r0, #32]
 8002180:	f425 5580 	bic.w	r5, r5, #4096	; 0x1000
 8002184:	6205      	str	r5, [r0, #32]
  tmpccmr2 = TIMx->CCMR2;
 8002186:	69c4      	ldr	r4, [r0, #28]
  tmpccer = TIMx->CCER;
 8002188:	6a05      	ldr	r5, [r0, #32]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800218a:	f424 7440 	bic.w	r4, r4, #768	; 0x300
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800218e:	ea44 2402 	orr.w	r4, r4, r2, lsl #8

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8002192:	f424 4470 	bic.w	r4, r4, #61440	; 0xf000
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8002196:	031b      	lsls	r3, r3, #12
 8002198:	b29b      	uxth	r3, r3
 800219a:	4323      	orrs	r3, r4

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800219c:	f425 4520 	bic.w	r5, r5, #40960	; 0xa000
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80021a0:	0309      	lsls	r1, r1, #12
 80021a2:	f401 4120 	and.w	r1, r1, #40960	; 0xa000
 80021a6:	4329      	orrs	r1, r5

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80021a8:	61c3      	str	r3, [r0, #28]
  TIMx->CCER = tmpccer ;
 80021aa:	6201      	str	r1, [r0, #32]
}
 80021ac:	bc30      	pop	{r4, r5}
 80021ae:	4770      	bx	lr

080021b0 <TIM_ITRx_SetConfig>:
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80021b0:	6883      	ldr	r3, [r0, #8]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80021b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80021b6:	430b      	orrs	r3, r1
 80021b8:	f043 0307 	orr.w	r3, r3, #7
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80021bc:	6083      	str	r3, [r0, #8]
}
 80021be:	4770      	bx	lr

080021c0 <HAL_TIM_PWM_MspInit>:
}
 80021c0:	4770      	bx	lr

080021c2 <HAL_TIM_IC_MspInit>:
}
 80021c2:	4770      	bx	lr

080021c4 <HAL_TIM_ReadCapturedValue>:
  switch (Channel)
 80021c4:	290c      	cmp	r1, #12
 80021c6:	d814      	bhi.n	80021f2 <HAL_TIM_ReadCapturedValue+0x2e>
 80021c8:	e8df f001 	tbb	[pc, r1]
 80021cc:	13131307 	.word	0x13131307
 80021d0:	1313130a 	.word	0x1313130a
 80021d4:	1313130d 	.word	0x1313130d
 80021d8:	10          	.byte	0x10
 80021d9:	00          	.byte	0x00
      tmpreg =  htim->Instance->CCR1;
 80021da:	6803      	ldr	r3, [r0, #0]
 80021dc:	6b58      	ldr	r0, [r3, #52]	; 0x34
      break;
 80021de:	4770      	bx	lr
      tmpreg =   htim->Instance->CCR2;
 80021e0:	6803      	ldr	r3, [r0, #0]
 80021e2:	6b98      	ldr	r0, [r3, #56]	; 0x38
      break;
 80021e4:	4770      	bx	lr
      tmpreg =   htim->Instance->CCR3;
 80021e6:	6803      	ldr	r3, [r0, #0]
 80021e8:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
      break;
 80021ea:	4770      	bx	lr
      tmpreg =   htim->Instance->CCR4;
 80021ec:	6803      	ldr	r3, [r0, #0]
 80021ee:	6c18      	ldr	r0, [r3, #64]	; 0x40
      break;
 80021f0:	4770      	bx	lr
{
 80021f2:	2000      	movs	r0, #0
}
 80021f4:	4770      	bx	lr

080021f6 <HAL_TIM_PeriodElapsedCallback>:
}
 80021f6:	4770      	bx	lr

080021f8 <HAL_TIM_OC_DelayElapsedCallback>:
}
 80021f8:	4770      	bx	lr

080021fa <HAL_TIM_PWM_PulseFinishedCallback>:
}
 80021fa:	4770      	bx	lr

080021fc <HAL_TIM_TriggerCallback>:
}
 80021fc:	4770      	bx	lr

080021fe <HAL_TIM_IRQHandler>:
{
 80021fe:	b510      	push	{r4, lr}
 8002200:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002202:	6803      	ldr	r3, [r0, #0]
 8002204:	691a      	ldr	r2, [r3, #16]
 8002206:	f012 0f02 	tst.w	r2, #2
 800220a:	d011      	beq.n	8002230 <HAL_TIM_IRQHandler+0x32>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800220c:	68da      	ldr	r2, [r3, #12]
 800220e:	f012 0f02 	tst.w	r2, #2
 8002212:	d00d      	beq.n	8002230 <HAL_TIM_IRQHandler+0x32>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002214:	f06f 0202 	mvn.w	r2, #2
 8002218:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800221a:	2301      	movs	r3, #1
 800221c:	7703      	strb	r3, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800221e:	6803      	ldr	r3, [r0, #0]
 8002220:	699b      	ldr	r3, [r3, #24]
 8002222:	f013 0f03 	tst.w	r3, #3
 8002226:	d070      	beq.n	800230a <HAL_TIM_IRQHandler+0x10c>
          HAL_TIM_IC_CaptureCallback(htim);
 8002228:	f7fe feae 	bl	8000f88 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800222c:	2300      	movs	r3, #0
 800222e:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002230:	6823      	ldr	r3, [r4, #0]
 8002232:	691a      	ldr	r2, [r3, #16]
 8002234:	f012 0f04 	tst.w	r2, #4
 8002238:	d012      	beq.n	8002260 <HAL_TIM_IRQHandler+0x62>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800223a:	68da      	ldr	r2, [r3, #12]
 800223c:	f012 0f04 	tst.w	r2, #4
 8002240:	d00e      	beq.n	8002260 <HAL_TIM_IRQHandler+0x62>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002242:	f06f 0204 	mvn.w	r2, #4
 8002246:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002248:	2302      	movs	r3, #2
 800224a:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800224c:	6823      	ldr	r3, [r4, #0]
 800224e:	699b      	ldr	r3, [r3, #24]
 8002250:	f413 7f40 	tst.w	r3, #768	; 0x300
 8002254:	d05f      	beq.n	8002316 <HAL_TIM_IRQHandler+0x118>
        HAL_TIM_IC_CaptureCallback(htim);
 8002256:	4620      	mov	r0, r4
 8002258:	f7fe fe96 	bl	8000f88 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800225c:	2300      	movs	r3, #0
 800225e:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002260:	6823      	ldr	r3, [r4, #0]
 8002262:	691a      	ldr	r2, [r3, #16]
 8002264:	f012 0f08 	tst.w	r2, #8
 8002268:	d012      	beq.n	8002290 <HAL_TIM_IRQHandler+0x92>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800226a:	68da      	ldr	r2, [r3, #12]
 800226c:	f012 0f08 	tst.w	r2, #8
 8002270:	d00e      	beq.n	8002290 <HAL_TIM_IRQHandler+0x92>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002272:	f06f 0208 	mvn.w	r2, #8
 8002276:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002278:	2304      	movs	r3, #4
 800227a:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800227c:	6823      	ldr	r3, [r4, #0]
 800227e:	69db      	ldr	r3, [r3, #28]
 8002280:	f013 0f03 	tst.w	r3, #3
 8002284:	d04e      	beq.n	8002324 <HAL_TIM_IRQHandler+0x126>
        HAL_TIM_IC_CaptureCallback(htim);
 8002286:	4620      	mov	r0, r4
 8002288:	f7fe fe7e 	bl	8000f88 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800228c:	2300      	movs	r3, #0
 800228e:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002290:	6823      	ldr	r3, [r4, #0]
 8002292:	691a      	ldr	r2, [r3, #16]
 8002294:	f012 0f10 	tst.w	r2, #16
 8002298:	d012      	beq.n	80022c0 <HAL_TIM_IRQHandler+0xc2>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800229a:	68da      	ldr	r2, [r3, #12]
 800229c:	f012 0f10 	tst.w	r2, #16
 80022a0:	d00e      	beq.n	80022c0 <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80022a2:	f06f 0210 	mvn.w	r2, #16
 80022a6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80022a8:	2308      	movs	r3, #8
 80022aa:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80022ac:	6823      	ldr	r3, [r4, #0]
 80022ae:	69db      	ldr	r3, [r3, #28]
 80022b0:	f413 7f40 	tst.w	r3, #768	; 0x300
 80022b4:	d03d      	beq.n	8002332 <HAL_TIM_IRQHandler+0x134>
        HAL_TIM_IC_CaptureCallback(htim);
 80022b6:	4620      	mov	r0, r4
 80022b8:	f7fe fe66 	bl	8000f88 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80022bc:	2300      	movs	r3, #0
 80022be:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80022c0:	6823      	ldr	r3, [r4, #0]
 80022c2:	691a      	ldr	r2, [r3, #16]
 80022c4:	f012 0f01 	tst.w	r2, #1
 80022c8:	d003      	beq.n	80022d2 <HAL_TIM_IRQHandler+0xd4>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80022ca:	68da      	ldr	r2, [r3, #12]
 80022cc:	f012 0f01 	tst.w	r2, #1
 80022d0:	d136      	bne.n	8002340 <HAL_TIM_IRQHandler+0x142>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80022d2:	6823      	ldr	r3, [r4, #0]
 80022d4:	691a      	ldr	r2, [r3, #16]
 80022d6:	f012 0f80 	tst.w	r2, #128	; 0x80
 80022da:	d003      	beq.n	80022e4 <HAL_TIM_IRQHandler+0xe6>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80022dc:	68da      	ldr	r2, [r3, #12]
 80022de:	f012 0f80 	tst.w	r2, #128	; 0x80
 80022e2:	d134      	bne.n	800234e <HAL_TIM_IRQHandler+0x150>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80022e4:	6823      	ldr	r3, [r4, #0]
 80022e6:	691a      	ldr	r2, [r3, #16]
 80022e8:	f012 0f40 	tst.w	r2, #64	; 0x40
 80022ec:	d003      	beq.n	80022f6 <HAL_TIM_IRQHandler+0xf8>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80022ee:	68da      	ldr	r2, [r3, #12]
 80022f0:	f012 0f40 	tst.w	r2, #64	; 0x40
 80022f4:	d132      	bne.n	800235c <HAL_TIM_IRQHandler+0x15e>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80022f6:	6823      	ldr	r3, [r4, #0]
 80022f8:	691a      	ldr	r2, [r3, #16]
 80022fa:	f012 0f20 	tst.w	r2, #32
 80022fe:	d003      	beq.n	8002308 <HAL_TIM_IRQHandler+0x10a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002300:	68da      	ldr	r2, [r3, #12]
 8002302:	f012 0f20 	tst.w	r2, #32
 8002306:	d130      	bne.n	800236a <HAL_TIM_IRQHandler+0x16c>
}
 8002308:	bd10      	pop	{r4, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800230a:	f7ff ff75 	bl	80021f8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800230e:	4620      	mov	r0, r4
 8002310:	f7ff ff73 	bl	80021fa <HAL_TIM_PWM_PulseFinishedCallback>
 8002314:	e78a      	b.n	800222c <HAL_TIM_IRQHandler+0x2e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002316:	4620      	mov	r0, r4
 8002318:	f7ff ff6e 	bl	80021f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800231c:	4620      	mov	r0, r4
 800231e:	f7ff ff6c 	bl	80021fa <HAL_TIM_PWM_PulseFinishedCallback>
 8002322:	e79b      	b.n	800225c <HAL_TIM_IRQHandler+0x5e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002324:	4620      	mov	r0, r4
 8002326:	f7ff ff67 	bl	80021f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800232a:	4620      	mov	r0, r4
 800232c:	f7ff ff65 	bl	80021fa <HAL_TIM_PWM_PulseFinishedCallback>
 8002330:	e7ac      	b.n	800228c <HAL_TIM_IRQHandler+0x8e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002332:	4620      	mov	r0, r4
 8002334:	f7ff ff60 	bl	80021f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002338:	4620      	mov	r0, r4
 800233a:	f7ff ff5e 	bl	80021fa <HAL_TIM_PWM_PulseFinishedCallback>
 800233e:	e7bd      	b.n	80022bc <HAL_TIM_IRQHandler+0xbe>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002340:	f06f 0201 	mvn.w	r2, #1
 8002344:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8002346:	4620      	mov	r0, r4
 8002348:	f7ff ff55 	bl	80021f6 <HAL_TIM_PeriodElapsedCallback>
 800234c:	e7c1      	b.n	80022d2 <HAL_TIM_IRQHandler+0xd4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800234e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002352:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8002354:	4620      	mov	r0, r4
 8002356:	f000 fd2e 	bl	8002db6 <HAL_TIMEx_BreakCallback>
 800235a:	e7c3      	b.n	80022e4 <HAL_TIM_IRQHandler+0xe6>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800235c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002360:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8002362:	4620      	mov	r0, r4
 8002364:	f7ff ff4a 	bl	80021fc <HAL_TIM_TriggerCallback>
 8002368:	e7c5      	b.n	80022f6 <HAL_TIM_IRQHandler+0xf8>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800236a:	f06f 0220 	mvn.w	r2, #32
 800236e:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 8002370:	4620      	mov	r0, r4
 8002372:	f000 fd1f 	bl	8002db4 <HAL_TIMEx_CommutCallback>
}
 8002376:	e7c7      	b.n	8002308 <HAL_TIM_IRQHandler+0x10a>

08002378 <TIM_Base_SetConfig>:
  tmpcr1 = TIMx->CR1;
 8002378:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800237a:	4a25      	ldr	r2, [pc, #148]	; (8002410 <TIM_Base_SetConfig+0x98>)
 800237c:	4290      	cmp	r0, r2
 800237e:	d00e      	beq.n	800239e <TIM_Base_SetConfig+0x26>
 8002380:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8002384:	d00b      	beq.n	800239e <TIM_Base_SetConfig+0x26>
 8002386:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 800238a:	4290      	cmp	r0, r2
 800238c:	d007      	beq.n	800239e <TIM_Base_SetConfig+0x26>
 800238e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002392:	4290      	cmp	r0, r2
 8002394:	d003      	beq.n	800239e <TIM_Base_SetConfig+0x26>
 8002396:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800239a:	4290      	cmp	r0, r2
 800239c:	d103      	bne.n	80023a6 <TIM_Base_SetConfig+0x2e>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800239e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80023a2:	684a      	ldr	r2, [r1, #4]
 80023a4:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80023a6:	4a1a      	ldr	r2, [pc, #104]	; (8002410 <TIM_Base_SetConfig+0x98>)
 80023a8:	4290      	cmp	r0, r2
 80023aa:	d01a      	beq.n	80023e2 <TIM_Base_SetConfig+0x6a>
 80023ac:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80023b0:	d017      	beq.n	80023e2 <TIM_Base_SetConfig+0x6a>
 80023b2:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 80023b6:	4290      	cmp	r0, r2
 80023b8:	d013      	beq.n	80023e2 <TIM_Base_SetConfig+0x6a>
 80023ba:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80023be:	4290      	cmp	r0, r2
 80023c0:	d00f      	beq.n	80023e2 <TIM_Base_SetConfig+0x6a>
 80023c2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80023c6:	4290      	cmp	r0, r2
 80023c8:	d00b      	beq.n	80023e2 <TIM_Base_SetConfig+0x6a>
 80023ca:	f502 329a 	add.w	r2, r2, #78848	; 0x13400
 80023ce:	4290      	cmp	r0, r2
 80023d0:	d007      	beq.n	80023e2 <TIM_Base_SetConfig+0x6a>
 80023d2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80023d6:	4290      	cmp	r0, r2
 80023d8:	d003      	beq.n	80023e2 <TIM_Base_SetConfig+0x6a>
 80023da:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80023de:	4290      	cmp	r0, r2
 80023e0:	d103      	bne.n	80023ea <TIM_Base_SetConfig+0x72>
    tmpcr1 &= ~TIM_CR1_CKD;
 80023e2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80023e6:	68ca      	ldr	r2, [r1, #12]
 80023e8:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80023ea:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80023ee:	694a      	ldr	r2, [r1, #20]
 80023f0:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 80023f2:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80023f4:	688b      	ldr	r3, [r1, #8]
 80023f6:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 80023f8:	680b      	ldr	r3, [r1, #0]
 80023fa:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80023fc:	4b04      	ldr	r3, [pc, #16]	; (8002410 <TIM_Base_SetConfig+0x98>)
 80023fe:	4298      	cmp	r0, r3
 8002400:	d002      	beq.n	8002408 <TIM_Base_SetConfig+0x90>
  TIMx->EGR = TIM_EGR_UG;
 8002402:	2301      	movs	r3, #1
 8002404:	6143      	str	r3, [r0, #20]
}
 8002406:	4770      	bx	lr
    TIMx->RCR = Structure->RepetitionCounter;
 8002408:	690b      	ldr	r3, [r1, #16]
 800240a:	6303      	str	r3, [r0, #48]	; 0x30
 800240c:	e7f9      	b.n	8002402 <TIM_Base_SetConfig+0x8a>
 800240e:	bf00      	nop
 8002410:	40010000 	.word	0x40010000

08002414 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 8002414:	b340      	cbz	r0, 8002468 <HAL_TIM_Base_Init+0x54>
{
 8002416:	b510      	push	{r4, lr}
 8002418:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 800241a:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800241e:	b1f3      	cbz	r3, 800245e <HAL_TIM_Base_Init+0x4a>
  htim->State = HAL_TIM_STATE_BUSY;
 8002420:	2302      	movs	r3, #2
 8002422:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002426:	4621      	mov	r1, r4
 8002428:	f851 0b04 	ldr.w	r0, [r1], #4
 800242c:	f7ff ffa4 	bl	8002378 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002430:	2301      	movs	r3, #1
 8002432:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002436:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 800243a:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 800243e:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8002442:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002446:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800244a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800244e:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8002452:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 8002456:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 800245a:	2000      	movs	r0, #0
}
 800245c:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 800245e:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8002462:	f7fe ff99 	bl	8001398 <HAL_TIM_Base_MspInit>
 8002466:	e7db      	b.n	8002420 <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 8002468:	2001      	movs	r0, #1
}
 800246a:	4770      	bx	lr

0800246c <HAL_TIM_PWM_Init>:
  if (htim == NULL)
 800246c:	b340      	cbz	r0, 80024c0 <HAL_TIM_PWM_Init+0x54>
{
 800246e:	b510      	push	{r4, lr}
 8002470:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 8002472:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8002476:	b1f3      	cbz	r3, 80024b6 <HAL_TIM_PWM_Init+0x4a>
  htim->State = HAL_TIM_STATE_BUSY;
 8002478:	2302      	movs	r3, #2
 800247a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800247e:	4621      	mov	r1, r4
 8002480:	f851 0b04 	ldr.w	r0, [r1], #4
 8002484:	f7ff ff78 	bl	8002378 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002488:	2301      	movs	r3, #1
 800248a:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800248e:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8002492:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8002496:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 800249a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800249e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80024a2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80024a6:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 80024aa:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 80024ae:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 80024b2:	2000      	movs	r0, #0
}
 80024b4:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 80024b6:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 80024ba:	f7ff fe81 	bl	80021c0 <HAL_TIM_PWM_MspInit>
 80024be:	e7db      	b.n	8002478 <HAL_TIM_PWM_Init+0xc>
    return HAL_ERROR;
 80024c0:	2001      	movs	r0, #1
}
 80024c2:	4770      	bx	lr

080024c4 <HAL_TIM_IC_Init>:
  if (htim == NULL)
 80024c4:	b340      	cbz	r0, 8002518 <HAL_TIM_IC_Init+0x54>
{
 80024c6:	b510      	push	{r4, lr}
 80024c8:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 80024ca:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80024ce:	b1f3      	cbz	r3, 800250e <HAL_TIM_IC_Init+0x4a>
  htim->State = HAL_TIM_STATE_BUSY;
 80024d0:	2302      	movs	r3, #2
 80024d2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80024d6:	4621      	mov	r1, r4
 80024d8:	f851 0b04 	ldr.w	r0, [r1], #4
 80024dc:	f7ff ff4c 	bl	8002378 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80024e0:	2301      	movs	r3, #1
 80024e2:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80024e6:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 80024ea:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 80024ee:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 80024f2:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80024f6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80024fa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80024fe:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8002502:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 8002506:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 800250a:	2000      	movs	r0, #0
}
 800250c:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 800250e:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_IC_MspInit(htim);
 8002512:	f7ff fe56 	bl	80021c2 <HAL_TIM_IC_MspInit>
 8002516:	e7db      	b.n	80024d0 <HAL_TIM_IC_Init+0xc>
    return HAL_ERROR;
 8002518:	2001      	movs	r0, #1
}
 800251a:	4770      	bx	lr

0800251c <TIM_OC2_SetConfig>:
{
 800251c:	b430      	push	{r4, r5}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800251e:	6a03      	ldr	r3, [r0, #32]
 8002520:	f023 0310 	bic.w	r3, r3, #16
 8002524:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8002526:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 8002528:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 800252a:	6982      	ldr	r2, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800252c:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002530:	680d      	ldr	r5, [r1, #0]
 8002532:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer &= ~TIM_CCER_CC2P;
 8002536:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800253a:	688d      	ldr	r5, [r1, #8]
 800253c:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002540:	4d0e      	ldr	r5, [pc, #56]	; (800257c <TIM_OC2_SetConfig+0x60>)
 8002542:	42a8      	cmp	r0, r5
 8002544:	d009      	beq.n	800255a <TIM_OC2_SetConfig+0x3e>
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002546:	4d0d      	ldr	r5, [pc, #52]	; (800257c <TIM_OC2_SetConfig+0x60>)
 8002548:	42a8      	cmp	r0, r5
 800254a:	d00e      	beq.n	800256a <TIM_OC2_SetConfig+0x4e>
  TIMx->CR2 = tmpcr2;
 800254c:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 800254e:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8002550:	684a      	ldr	r2, [r1, #4]
 8002552:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8002554:	6203      	str	r3, [r0, #32]
}
 8002556:	bc30      	pop	{r4, r5}
 8002558:	4770      	bx	lr
    tmpccer &= ~TIM_CCER_CC2NP;
 800255a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800255e:	68cd      	ldr	r5, [r1, #12]
 8002560:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpccer &= ~TIM_CCER_CC2NE;
 8002564:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002568:	e7ed      	b.n	8002546 <TIM_OC2_SetConfig+0x2a>
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800256a:	f424 6440 	bic.w	r4, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800256e:	694d      	ldr	r5, [r1, #20]
 8002570:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002574:	698d      	ldr	r5, [r1, #24]
 8002576:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
 800257a:	e7e7      	b.n	800254c <TIM_OC2_SetConfig+0x30>
 800257c:	40010000 	.word	0x40010000

08002580 <HAL_TIM_PWM_ConfigChannel>:
{
 8002580:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 8002582:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8002586:	2b01      	cmp	r3, #1
 8002588:	d066      	beq.n	8002658 <HAL_TIM_PWM_ConfigChannel+0xd8>
 800258a:	4604      	mov	r4, r0
 800258c:	460d      	mov	r5, r1
 800258e:	2301      	movs	r3, #1
 8002590:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  switch (Channel)
 8002594:	2a0c      	cmp	r2, #12
 8002596:	d85a      	bhi.n	800264e <HAL_TIM_PWM_ConfigChannel+0xce>
 8002598:	e8df f002 	tbb	[pc, r2]
 800259c:	59595907 	.word	0x59595907
 80025a0:	5959591b 	.word	0x5959591b
 80025a4:	59595930 	.word	0x59595930
 80025a8:	44          	.byte	0x44
 80025a9:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80025aa:	6800      	ldr	r0, [r0, #0]
 80025ac:	f7ff fd0a 	bl	8001fc4 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80025b0:	6822      	ldr	r2, [r4, #0]
 80025b2:	6993      	ldr	r3, [r2, #24]
 80025b4:	f043 0308 	orr.w	r3, r3, #8
 80025b8:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80025ba:	6822      	ldr	r2, [r4, #0]
 80025bc:	6993      	ldr	r3, [r2, #24]
 80025be:	f023 0304 	bic.w	r3, r3, #4
 80025c2:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80025c4:	6822      	ldr	r2, [r4, #0]
 80025c6:	6993      	ldr	r3, [r2, #24]
 80025c8:	6929      	ldr	r1, [r5, #16]
 80025ca:	430b      	orrs	r3, r1
 80025cc:	6193      	str	r3, [r2, #24]
  HAL_StatusTypeDef status = HAL_OK;
 80025ce:	2000      	movs	r0, #0
      break;
 80025d0:	e03e      	b.n	8002650 <HAL_TIM_PWM_ConfigChannel+0xd0>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80025d2:	6800      	ldr	r0, [r0, #0]
 80025d4:	f7ff ffa2 	bl	800251c <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80025d8:	6822      	ldr	r2, [r4, #0]
 80025da:	6993      	ldr	r3, [r2, #24]
 80025dc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80025e0:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80025e2:	6822      	ldr	r2, [r4, #0]
 80025e4:	6993      	ldr	r3, [r2, #24]
 80025e6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80025ea:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80025ec:	6822      	ldr	r2, [r4, #0]
 80025ee:	6993      	ldr	r3, [r2, #24]
 80025f0:	6929      	ldr	r1, [r5, #16]
 80025f2:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80025f6:	6193      	str	r3, [r2, #24]
  HAL_StatusTypeDef status = HAL_OK;
 80025f8:	2000      	movs	r0, #0
      break;
 80025fa:	e029      	b.n	8002650 <HAL_TIM_PWM_ConfigChannel+0xd0>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80025fc:	6800      	ldr	r0, [r0, #0]
 80025fe:	f7ff fd0f 	bl	8002020 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002602:	6822      	ldr	r2, [r4, #0]
 8002604:	69d3      	ldr	r3, [r2, #28]
 8002606:	f043 0308 	orr.w	r3, r3, #8
 800260a:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800260c:	6822      	ldr	r2, [r4, #0]
 800260e:	69d3      	ldr	r3, [r2, #28]
 8002610:	f023 0304 	bic.w	r3, r3, #4
 8002614:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002616:	6822      	ldr	r2, [r4, #0]
 8002618:	69d3      	ldr	r3, [r2, #28]
 800261a:	6929      	ldr	r1, [r5, #16]
 800261c:	430b      	orrs	r3, r1
 800261e:	61d3      	str	r3, [r2, #28]
  HAL_StatusTypeDef status = HAL_OK;
 8002620:	2000      	movs	r0, #0
      break;
 8002622:	e015      	b.n	8002650 <HAL_TIM_PWM_ConfigChannel+0xd0>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002624:	6800      	ldr	r0, [r0, #0]
 8002626:	f7ff fd2d 	bl	8002084 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800262a:	6822      	ldr	r2, [r4, #0]
 800262c:	69d3      	ldr	r3, [r2, #28]
 800262e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002632:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002634:	6822      	ldr	r2, [r4, #0]
 8002636:	69d3      	ldr	r3, [r2, #28]
 8002638:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800263c:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800263e:	6822      	ldr	r2, [r4, #0]
 8002640:	69d3      	ldr	r3, [r2, #28]
 8002642:	6929      	ldr	r1, [r5, #16]
 8002644:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8002648:	61d3      	str	r3, [r2, #28]
  HAL_StatusTypeDef status = HAL_OK;
 800264a:	2000      	movs	r0, #0
      break;
 800264c:	e000      	b.n	8002650 <HAL_TIM_PWM_ConfigChannel+0xd0>
  __HAL_LOCK(htim);
 800264e:	2001      	movs	r0, #1
  __HAL_UNLOCK(htim);
 8002650:	2300      	movs	r3, #0
 8002652:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 8002656:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(htim);
 8002658:	2002      	movs	r0, #2
 800265a:	e7fc      	b.n	8002656 <HAL_TIM_PWM_ConfigChannel+0xd6>

0800265c <TIM_TI1_SetConfig>:
{
 800265c:	b470      	push	{r4, r5, r6}
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800265e:	6a04      	ldr	r4, [r0, #32]
 8002660:	f024 0401 	bic.w	r4, r4, #1
 8002664:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002666:	6984      	ldr	r4, [r0, #24]
  tmpccer = TIMx->CCER;
 8002668:	6a06      	ldr	r6, [r0, #32]
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800266a:	4d15      	ldr	r5, [pc, #84]	; (80026c0 <TIM_TI1_SetConfig+0x64>)
 800266c:	42a8      	cmp	r0, r5
 800266e:	d015      	beq.n	800269c <TIM_TI1_SetConfig+0x40>
 8002670:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8002674:	d012      	beq.n	800269c <TIM_TI1_SetConfig+0x40>
 8002676:	f5a5 457c 	sub.w	r5, r5, #64512	; 0xfc00
 800267a:	42a8      	cmp	r0, r5
 800267c:	d00e      	beq.n	800269c <TIM_TI1_SetConfig+0x40>
 800267e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002682:	42a8      	cmp	r0, r5
 8002684:	d00a      	beq.n	800269c <TIM_TI1_SetConfig+0x40>
 8002686:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800268a:	42a8      	cmp	r0, r5
 800268c:	d006      	beq.n	800269c <TIM_TI1_SetConfig+0x40>
 800268e:	f505 359a 	add.w	r5, r5, #78848	; 0x13400
 8002692:	42a8      	cmp	r0, r5
 8002694:	d002      	beq.n	800269c <TIM_TI1_SetConfig+0x40>
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8002696:	f044 0201 	orr.w	r2, r4, #1
 800269a:	e002      	b.n	80026a2 <TIM_TI1_SetConfig+0x46>
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800269c:	f024 0403 	bic.w	r4, r4, #3
    tmpccmr1 |= TIM_ICSelection;
 80026a0:	4322      	orrs	r2, r4
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80026a2:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80026a6:	011b      	lsls	r3, r3, #4
 80026a8:	b2db      	uxtb	r3, r3
 80026aa:	4313      	orrs	r3, r2
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80026ac:	f026 020a 	bic.w	r2, r6, #10
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80026b0:	f001 010a 	and.w	r1, r1, #10
 80026b4:	4311      	orrs	r1, r2
  TIMx->CCMR1 = tmpccmr1;
 80026b6:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 80026b8:	6201      	str	r1, [r0, #32]
}
 80026ba:	bc70      	pop	{r4, r5, r6}
 80026bc:	4770      	bx	lr
 80026be:	bf00      	nop
 80026c0:	40010000 	.word	0x40010000

080026c4 <HAL_TIM_IC_ConfigChannel>:
{
 80026c4:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 80026c6:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80026ca:	2b01      	cmp	r3, #1
 80026cc:	d05a      	beq.n	8002784 <HAL_TIM_IC_ConfigChannel+0xc0>
 80026ce:	4604      	mov	r4, r0
 80026d0:	460d      	mov	r5, r1
 80026d2:	2301      	movs	r3, #1
 80026d4:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  if (Channel == TIM_CHANNEL_1)
 80026d8:	b152      	cbz	r2, 80026f0 <HAL_TIM_IC_ConfigChannel+0x2c>
  else if (Channel == TIM_CHANNEL_2)
 80026da:	2a04      	cmp	r2, #4
 80026dc:	d01a      	beq.n	8002714 <HAL_TIM_IC_ConfigChannel+0x50>
  else if (Channel == TIM_CHANNEL_3)
 80026de:	2a08      	cmp	r2, #8
 80026e0:	d02b      	beq.n	800273a <HAL_TIM_IC_ConfigChannel+0x76>
  else if (Channel == TIM_CHANNEL_4)
 80026e2:	2a0c      	cmp	r2, #12
 80026e4:	d03b      	beq.n	800275e <HAL_TIM_IC_ConfigChannel+0x9a>
    status = HAL_ERROR;
 80026e6:	2001      	movs	r0, #1
  __HAL_UNLOCK(htim);
 80026e8:	2300      	movs	r3, #0
 80026ea:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 80026ee:	bd38      	pop	{r3, r4, r5, pc}
    TIM_TI1_SetConfig(htim->Instance,
 80026f0:	68cb      	ldr	r3, [r1, #12]
 80026f2:	684a      	ldr	r2, [r1, #4]
 80026f4:	6809      	ldr	r1, [r1, #0]
 80026f6:	6800      	ldr	r0, [r0, #0]
 80026f8:	f7ff ffb0 	bl	800265c <TIM_TI1_SetConfig>
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80026fc:	6822      	ldr	r2, [r4, #0]
 80026fe:	6993      	ldr	r3, [r2, #24]
 8002700:	f023 030c 	bic.w	r3, r3, #12
 8002704:	6193      	str	r3, [r2, #24]
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8002706:	6822      	ldr	r2, [r4, #0]
 8002708:	6993      	ldr	r3, [r2, #24]
 800270a:	68a9      	ldr	r1, [r5, #8]
 800270c:	430b      	orrs	r3, r1
 800270e:	6193      	str	r3, [r2, #24]
  HAL_StatusTypeDef status = HAL_OK;
 8002710:	2000      	movs	r0, #0
 8002712:	e7e9      	b.n	80026e8 <HAL_TIM_IC_ConfigChannel+0x24>
    TIM_TI2_SetConfig(htim->Instance,
 8002714:	68cb      	ldr	r3, [r1, #12]
 8002716:	684a      	ldr	r2, [r1, #4]
 8002718:	6809      	ldr	r1, [r1, #0]
 800271a:	6800      	ldr	r0, [r0, #0]
 800271c:	f7ff fce8 	bl	80020f0 <TIM_TI2_SetConfig>
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8002720:	6822      	ldr	r2, [r4, #0]
 8002722:	6993      	ldr	r3, [r2, #24]
 8002724:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8002728:	6193      	str	r3, [r2, #24]
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800272a:	6822      	ldr	r2, [r4, #0]
 800272c:	6993      	ldr	r3, [r2, #24]
 800272e:	68a9      	ldr	r1, [r5, #8]
 8002730:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8002734:	6193      	str	r3, [r2, #24]
  HAL_StatusTypeDef status = HAL_OK;
 8002736:	2000      	movs	r0, #0
 8002738:	e7d6      	b.n	80026e8 <HAL_TIM_IC_ConfigChannel+0x24>
    TIM_TI3_SetConfig(htim->Instance,
 800273a:	68cb      	ldr	r3, [r1, #12]
 800273c:	684a      	ldr	r2, [r1, #4]
 800273e:	6809      	ldr	r1, [r1, #0]
 8002740:	6800      	ldr	r0, [r0, #0]
 8002742:	f7ff fd02 	bl	800214a <TIM_TI3_SetConfig>
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8002746:	6822      	ldr	r2, [r4, #0]
 8002748:	69d3      	ldr	r3, [r2, #28]
 800274a:	f023 030c 	bic.w	r3, r3, #12
 800274e:	61d3      	str	r3, [r2, #28]
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8002750:	6822      	ldr	r2, [r4, #0]
 8002752:	69d3      	ldr	r3, [r2, #28]
 8002754:	68a9      	ldr	r1, [r5, #8]
 8002756:	430b      	orrs	r3, r1
 8002758:	61d3      	str	r3, [r2, #28]
  HAL_StatusTypeDef status = HAL_OK;
 800275a:	2000      	movs	r0, #0
 800275c:	e7c4      	b.n	80026e8 <HAL_TIM_IC_ConfigChannel+0x24>
    TIM_TI4_SetConfig(htim->Instance,
 800275e:	68cb      	ldr	r3, [r1, #12]
 8002760:	684a      	ldr	r2, [r1, #4]
 8002762:	6809      	ldr	r1, [r1, #0]
 8002764:	6800      	ldr	r0, [r0, #0]
 8002766:	f7ff fd09 	bl	800217c <TIM_TI4_SetConfig>
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800276a:	6822      	ldr	r2, [r4, #0]
 800276c:	69d3      	ldr	r3, [r2, #28]
 800276e:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8002772:	61d3      	str	r3, [r2, #28]
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8002774:	6822      	ldr	r2, [r4, #0]
 8002776:	69d3      	ldr	r3, [r2, #28]
 8002778:	68a9      	ldr	r1, [r5, #8]
 800277a:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800277e:	61d3      	str	r3, [r2, #28]
  HAL_StatusTypeDef status = HAL_OK;
 8002780:	2000      	movs	r0, #0
 8002782:	e7b1      	b.n	80026e8 <HAL_TIM_IC_ConfigChannel+0x24>
  __HAL_LOCK(htim);
 8002784:	2002      	movs	r0, #2
 8002786:	e7b2      	b.n	80026ee <HAL_TIM_IC_ConfigChannel+0x2a>

08002788 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002788:	b410      	push	{r4}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800278a:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800278c:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002790:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 8002794:	430a      	orrs	r2, r1
 8002796:	4322      	orrs	r2, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002798:	6082      	str	r2, [r0, #8]
}
 800279a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800279e:	4770      	bx	lr

080027a0 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 80027a0:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80027a4:	2b01      	cmp	r3, #1
 80027a6:	d078      	beq.n	800289a <HAL_TIM_ConfigClockSource+0xfa>
{
 80027a8:	b510      	push	{r4, lr}
 80027aa:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 80027ac:	2301      	movs	r3, #1
 80027ae:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 80027b2:	2302      	movs	r3, #2
 80027b4:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 80027b8:	6802      	ldr	r2, [r0, #0]
 80027ba:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80027bc:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80027c0:	f023 0377 	bic.w	r3, r3, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 80027c4:	6093      	str	r3, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 80027c6:	680b      	ldr	r3, [r1, #0]
 80027c8:	2b60      	cmp	r3, #96	; 0x60
 80027ca:	d04c      	beq.n	8002866 <HAL_TIM_ConfigClockSource+0xc6>
 80027cc:	d829      	bhi.n	8002822 <HAL_TIM_ConfigClockSource+0x82>
 80027ce:	2b40      	cmp	r3, #64	; 0x40
 80027d0:	d054      	beq.n	800287c <HAL_TIM_ConfigClockSource+0xdc>
 80027d2:	d90c      	bls.n	80027ee <HAL_TIM_ConfigClockSource+0x4e>
 80027d4:	2b50      	cmp	r3, #80	; 0x50
 80027d6:	d122      	bne.n	800281e <HAL_TIM_ConfigClockSource+0x7e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80027d8:	68ca      	ldr	r2, [r1, #12]
 80027da:	6849      	ldr	r1, [r1, #4]
 80027dc:	6800      	ldr	r0, [r0, #0]
 80027de:	f7ff fc75 	bl	80020cc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80027e2:	2150      	movs	r1, #80	; 0x50
 80027e4:	6820      	ldr	r0, [r4, #0]
 80027e6:	f7ff fce3 	bl	80021b0 <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 80027ea:	2000      	movs	r0, #0
      break;
 80027ec:	e005      	b.n	80027fa <HAL_TIM_ConfigClockSource+0x5a>
  switch (sClockSourceConfig->ClockSource)
 80027ee:	2b20      	cmp	r3, #32
 80027f0:	d00d      	beq.n	800280e <HAL_TIM_ConfigClockSource+0x6e>
 80027f2:	d909      	bls.n	8002808 <HAL_TIM_ConfigClockSource+0x68>
 80027f4:	2b30      	cmp	r3, #48	; 0x30
 80027f6:	d00a      	beq.n	800280e <HAL_TIM_ConfigClockSource+0x6e>
      status = HAL_ERROR;
 80027f8:	2001      	movs	r0, #1
  htim->State = HAL_TIM_STATE_READY;
 80027fa:	2301      	movs	r3, #1
 80027fc:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8002800:	2300      	movs	r3, #0
 8002802:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 8002806:	bd10      	pop	{r4, pc}
  switch (sClockSourceConfig->ClockSource)
 8002808:	b10b      	cbz	r3, 800280e <HAL_TIM_ConfigClockSource+0x6e>
 800280a:	2b10      	cmp	r3, #16
 800280c:	d105      	bne.n	800281a <HAL_TIM_ConfigClockSource+0x7a>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800280e:	4619      	mov	r1, r3
 8002810:	6820      	ldr	r0, [r4, #0]
 8002812:	f7ff fccd 	bl	80021b0 <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8002816:	2000      	movs	r0, #0
      break;
 8002818:	e7ef      	b.n	80027fa <HAL_TIM_ConfigClockSource+0x5a>
      status = HAL_ERROR;
 800281a:	2001      	movs	r0, #1
 800281c:	e7ed      	b.n	80027fa <HAL_TIM_ConfigClockSource+0x5a>
 800281e:	2001      	movs	r0, #1
 8002820:	e7eb      	b.n	80027fa <HAL_TIM_ConfigClockSource+0x5a>
  switch (sClockSourceConfig->ClockSource)
 8002822:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002826:	d034      	beq.n	8002892 <HAL_TIM_ConfigClockSource+0xf2>
 8002828:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800282c:	d10c      	bne.n	8002848 <HAL_TIM_ConfigClockSource+0xa8>
      TIM_ETR_SetConfig(htim->Instance,
 800282e:	68cb      	ldr	r3, [r1, #12]
 8002830:	684a      	ldr	r2, [r1, #4]
 8002832:	6889      	ldr	r1, [r1, #8]
 8002834:	6800      	ldr	r0, [r0, #0]
 8002836:	f7ff ffa7 	bl	8002788 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800283a:	6822      	ldr	r2, [r4, #0]
 800283c:	6893      	ldr	r3, [r2, #8]
 800283e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002842:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8002844:	2000      	movs	r0, #0
      break;
 8002846:	e7d8      	b.n	80027fa <HAL_TIM_ConfigClockSource+0x5a>
  switch (sClockSourceConfig->ClockSource)
 8002848:	2b70      	cmp	r3, #112	; 0x70
 800284a:	d124      	bne.n	8002896 <HAL_TIM_ConfigClockSource+0xf6>
      TIM_ETR_SetConfig(htim->Instance,
 800284c:	68cb      	ldr	r3, [r1, #12]
 800284e:	684a      	ldr	r2, [r1, #4]
 8002850:	6889      	ldr	r1, [r1, #8]
 8002852:	6800      	ldr	r0, [r0, #0]
 8002854:	f7ff ff98 	bl	8002788 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002858:	6822      	ldr	r2, [r4, #0]
 800285a:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800285c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR = tmpsmcr;
 8002860:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8002862:	2000      	movs	r0, #0
      break;
 8002864:	e7c9      	b.n	80027fa <HAL_TIM_ConfigClockSource+0x5a>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002866:	68ca      	ldr	r2, [r1, #12]
 8002868:	6849      	ldr	r1, [r1, #4]
 800286a:	6800      	ldr	r0, [r0, #0]
 800286c:	f7ff fc5a 	bl	8002124 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002870:	2160      	movs	r1, #96	; 0x60
 8002872:	6820      	ldr	r0, [r4, #0]
 8002874:	f7ff fc9c 	bl	80021b0 <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8002878:	2000      	movs	r0, #0
      break;
 800287a:	e7be      	b.n	80027fa <HAL_TIM_ConfigClockSource+0x5a>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800287c:	68ca      	ldr	r2, [r1, #12]
 800287e:	6849      	ldr	r1, [r1, #4]
 8002880:	6800      	ldr	r0, [r0, #0]
 8002882:	f7ff fc23 	bl	80020cc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002886:	2140      	movs	r1, #64	; 0x40
 8002888:	6820      	ldr	r0, [r4, #0]
 800288a:	f7ff fc91 	bl	80021b0 <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 800288e:	2000      	movs	r0, #0
      break;
 8002890:	e7b3      	b.n	80027fa <HAL_TIM_ConfigClockSource+0x5a>
  switch (sClockSourceConfig->ClockSource)
 8002892:	2000      	movs	r0, #0
 8002894:	e7b1      	b.n	80027fa <HAL_TIM_ConfigClockSource+0x5a>
      status = HAL_ERROR;
 8002896:	2001      	movs	r0, #1
 8002898:	e7af      	b.n	80027fa <HAL_TIM_ConfigClockSource+0x5a>
  __HAL_LOCK(htim);
 800289a:	2002      	movs	r0, #2
}
 800289c:	4770      	bx	lr

0800289e <TIM_SlaveTimer_SetConfig>:
{
 800289e:	b510      	push	{r4, lr}
  tmpsmcr = htim->Instance->SMCR;
 80028a0:	6804      	ldr	r4, [r0, #0]
 80028a2:	68a2      	ldr	r2, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80028a4:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= sSlaveConfig->InputTrigger;
 80028a8:	684b      	ldr	r3, [r1, #4]
 80028aa:	4313      	orrs	r3, r2
  tmpsmcr &= ~TIM_SMCR_SMS;
 80028ac:	f023 0307 	bic.w	r3, r3, #7
  tmpsmcr |= sSlaveConfig->SlaveMode;
 80028b0:	680a      	ldr	r2, [r1, #0]
 80028b2:	4313      	orrs	r3, r2
  htim->Instance->SMCR = tmpsmcr;
 80028b4:	60a3      	str	r3, [r4, #8]
  switch (sSlaveConfig->InputTrigger)
 80028b6:	684b      	ldr	r3, [r1, #4]
 80028b8:	2b50      	cmp	r3, #80	; 0x50
 80028ba:	d032      	beq.n	8002922 <TIM_SlaveTimer_SetConfig+0x84>
 80028bc:	d90b      	bls.n	80028d6 <TIM_SlaveTimer_SetConfig+0x38>
 80028be:	2b60      	cmp	r3, #96	; 0x60
 80028c0:	d036      	beq.n	8002930 <TIM_SlaveTimer_SetConfig+0x92>
 80028c2:	2b70      	cmp	r3, #112	; 0x70
 80028c4:	d143      	bne.n	800294e <TIM_SlaveTimer_SetConfig+0xb0>
      TIM_ETR_SetConfig(htim->Instance,
 80028c6:	690b      	ldr	r3, [r1, #16]
 80028c8:	688a      	ldr	r2, [r1, #8]
 80028ca:	68c9      	ldr	r1, [r1, #12]
 80028cc:	6800      	ldr	r0, [r0, #0]
 80028ce:	f7ff ff5b 	bl	8002788 <TIM_ETR_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 80028d2:	2000      	movs	r0, #0
      break;
 80028d4:	e00f      	b.n	80028f6 <TIM_SlaveTimer_SetConfig+0x58>
  switch (sSlaveConfig->InputTrigger)
 80028d6:	2b40      	cmp	r3, #64	; 0x40
 80028d8:	d00e      	beq.n	80028f8 <TIM_SlaveTimer_SetConfig+0x5a>
 80028da:	d901      	bls.n	80028e0 <TIM_SlaveTimer_SetConfig+0x42>
      status = HAL_ERROR;
 80028dc:	2001      	movs	r0, #1
 80028de:	e00a      	b.n	80028f6 <TIM_SlaveTimer_SetConfig+0x58>
  switch (sSlaveConfig->InputTrigger)
 80028e0:	2b20      	cmp	r3, #32
 80028e2:	d02c      	beq.n	800293e <TIM_SlaveTimer_SetConfig+0xa0>
 80028e4:	d903      	bls.n	80028ee <TIM_SlaveTimer_SetConfig+0x50>
 80028e6:	2b30      	cmp	r3, #48	; 0x30
 80028e8:	d12f      	bne.n	800294a <TIM_SlaveTimer_SetConfig+0xac>
 80028ea:	2000      	movs	r0, #0
 80028ec:	e003      	b.n	80028f6 <TIM_SlaveTimer_SetConfig+0x58>
 80028ee:	b343      	cbz	r3, 8002942 <TIM_SlaveTimer_SetConfig+0xa4>
 80028f0:	2b10      	cmp	r3, #16
 80028f2:	d128      	bne.n	8002946 <TIM_SlaveTimer_SetConfig+0xa8>
 80028f4:	2000      	movs	r0, #0
}
 80028f6:	bd10      	pop	{r4, pc}
      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 80028f8:	680b      	ldr	r3, [r1, #0]
 80028fa:	2b05      	cmp	r3, #5
 80028fc:	d029      	beq.n	8002952 <TIM_SlaveTimer_SetConfig+0xb4>
      tmpccer = htim->Instance->CCER;
 80028fe:	6803      	ldr	r3, [r0, #0]
 8002900:	6a1c      	ldr	r4, [r3, #32]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8002902:	6a1a      	ldr	r2, [r3, #32]
 8002904:	f022 0201 	bic.w	r2, r2, #1
 8002908:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 800290a:	6802      	ldr	r2, [r0, #0]
 800290c:	6993      	ldr	r3, [r2, #24]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800290e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8002912:	6909      	ldr	r1, [r1, #16]
 8002914:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
      htim->Instance->CCMR1 = tmpccmr1;
 8002918:	6193      	str	r3, [r2, #24]
      htim->Instance->CCER = tmpccer;
 800291a:	6803      	ldr	r3, [r0, #0]
 800291c:	621c      	str	r4, [r3, #32]
  HAL_StatusTypeDef status = HAL_OK;
 800291e:	2000      	movs	r0, #0
      break;
 8002920:	e7e9      	b.n	80028f6 <TIM_SlaveTimer_SetConfig+0x58>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002922:	690a      	ldr	r2, [r1, #16]
 8002924:	6889      	ldr	r1, [r1, #8]
 8002926:	6800      	ldr	r0, [r0, #0]
 8002928:	f7ff fbd0 	bl	80020cc <TIM_TI1_ConfigInputStage>
  HAL_StatusTypeDef status = HAL_OK;
 800292c:	2000      	movs	r0, #0
      break;
 800292e:	e7e2      	b.n	80028f6 <TIM_SlaveTimer_SetConfig+0x58>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002930:	690a      	ldr	r2, [r1, #16]
 8002932:	6889      	ldr	r1, [r1, #8]
 8002934:	6800      	ldr	r0, [r0, #0]
 8002936:	f7ff fbf5 	bl	8002124 <TIM_TI2_ConfigInputStage>
  HAL_StatusTypeDef status = HAL_OK;
 800293a:	2000      	movs	r0, #0
      break;
 800293c:	e7db      	b.n	80028f6 <TIM_SlaveTimer_SetConfig+0x58>
  switch (sSlaveConfig->InputTrigger)
 800293e:	2000      	movs	r0, #0
 8002940:	e7d9      	b.n	80028f6 <TIM_SlaveTimer_SetConfig+0x58>
 8002942:	2000      	movs	r0, #0
 8002944:	e7d7      	b.n	80028f6 <TIM_SlaveTimer_SetConfig+0x58>
      status = HAL_ERROR;
 8002946:	2001      	movs	r0, #1
 8002948:	e7d5      	b.n	80028f6 <TIM_SlaveTimer_SetConfig+0x58>
 800294a:	2001      	movs	r0, #1
 800294c:	e7d3      	b.n	80028f6 <TIM_SlaveTimer_SetConfig+0x58>
 800294e:	2001      	movs	r0, #1
 8002950:	e7d1      	b.n	80028f6 <TIM_SlaveTimer_SetConfig+0x58>
        return HAL_ERROR;
 8002952:	2001      	movs	r0, #1
 8002954:	e7cf      	b.n	80028f6 <TIM_SlaveTimer_SetConfig+0x58>

08002956 <HAL_TIM_SlaveConfigSynchro>:
  __HAL_LOCK(htim);
 8002956:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800295a:	2b01      	cmp	r3, #1
 800295c:	d022      	beq.n	80029a4 <HAL_TIM_SlaveConfigSynchro+0x4e>
{
 800295e:	b510      	push	{r4, lr}
 8002960:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 8002962:	2301      	movs	r3, #1
 8002964:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 8002968:	2302      	movs	r3, #2
 800296a:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 800296e:	f7ff ff96 	bl	800289e <TIM_SlaveTimer_SetConfig>
 8002972:	b980      	cbnz	r0, 8002996 <HAL_TIM_SlaveConfigSynchro+0x40>
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8002974:	6822      	ldr	r2, [r4, #0]
 8002976:	68d3      	ldr	r3, [r2, #12]
 8002978:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800297c:	60d3      	str	r3, [r2, #12]
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 800297e:	6822      	ldr	r2, [r4, #0]
 8002980:	68d3      	ldr	r3, [r2, #12]
 8002982:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002986:	60d3      	str	r3, [r2, #12]
  htim->State = HAL_TIM_STATE_READY;
 8002988:	2301      	movs	r3, #1
 800298a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 800298e:	2300      	movs	r3, #0
 8002990:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 8002994:	bd10      	pop	{r4, pc}
    htim->State = HAL_TIM_STATE_READY;
 8002996:	2001      	movs	r0, #1
 8002998:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 800299c:	2300      	movs	r3, #0
 800299e:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    return HAL_ERROR;
 80029a2:	e7f7      	b.n	8002994 <HAL_TIM_SlaveConfigSynchro+0x3e>
  __HAL_LOCK(htim);
 80029a4:	2002      	movs	r0, #2
}
 80029a6:	4770      	bx	lr

080029a8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80029a8:	b410      	push	{r4}

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80029aa:	f001 011f 	and.w	r1, r1, #31
 80029ae:	2301      	movs	r3, #1
 80029b0:	fa03 f401 	lsl.w	r4, r3, r1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80029b4:	6a03      	ldr	r3, [r0, #32]
 80029b6:	ea23 0304 	bic.w	r3, r3, r4
 80029ba:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80029bc:	6a03      	ldr	r3, [r0, #32]
 80029be:	fa02 f101 	lsl.w	r1, r2, r1
 80029c2:	430b      	orrs	r3, r1
 80029c4:	6203      	str	r3, [r0, #32]
}
 80029c6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80029ca:	4770      	bx	lr

080029cc <HAL_TIM_PWM_Start>:
{
 80029cc:	b510      	push	{r4, lr}
 80029ce:	4604      	mov	r4, r0
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80029d0:	4608      	mov	r0, r1
 80029d2:	2900      	cmp	r1, #0
 80029d4:	d132      	bne.n	8002a3c <HAL_TIM_PWM_Start+0x70>
 80029d6:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
 80029da:	b2db      	uxtb	r3, r3
 80029dc:	3b01      	subs	r3, #1
 80029de:	bf18      	it	ne
 80029e0:	2301      	movne	r3, #1
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d163      	bne.n	8002aae <HAL_TIM_PWM_Start+0xe2>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80029e6:	2800      	cmp	r0, #0
 80029e8:	d141      	bne.n	8002a6e <HAL_TIM_PWM_Start+0xa2>
 80029ea:	2302      	movs	r3, #2
 80029ec:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80029f0:	2201      	movs	r2, #1
 80029f2:	4601      	mov	r1, r0
 80029f4:	6820      	ldr	r0, [r4, #0]
 80029f6:	f7ff ffd7 	bl	80029a8 <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80029fa:	6823      	ldr	r3, [r4, #0]
 80029fc:	4a2e      	ldr	r2, [pc, #184]	; (8002ab8 <HAL_TIM_PWM_Start+0xec>)
 80029fe:	4293      	cmp	r3, r2
 8002a00:	d045      	beq.n	8002a8e <HAL_TIM_PWM_Start+0xc2>
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002a02:	6823      	ldr	r3, [r4, #0]
 8002a04:	4a2c      	ldr	r2, [pc, #176]	; (8002ab8 <HAL_TIM_PWM_Start+0xec>)
 8002a06:	4293      	cmp	r3, r2
 8002a08:	d046      	beq.n	8002a98 <HAL_TIM_PWM_Start+0xcc>
 8002a0a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a0e:	d043      	beq.n	8002a98 <HAL_TIM_PWM_Start+0xcc>
 8002a10:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8002a14:	4293      	cmp	r3, r2
 8002a16:	d03f      	beq.n	8002a98 <HAL_TIM_PWM_Start+0xcc>
 8002a18:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002a1c:	4293      	cmp	r3, r2
 8002a1e:	d03b      	beq.n	8002a98 <HAL_TIM_PWM_Start+0xcc>
 8002a20:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002a24:	4293      	cmp	r3, r2
 8002a26:	d037      	beq.n	8002a98 <HAL_TIM_PWM_Start+0xcc>
 8002a28:	f502 329a 	add.w	r2, r2, #78848	; 0x13400
 8002a2c:	4293      	cmp	r3, r2
 8002a2e:	d033      	beq.n	8002a98 <HAL_TIM_PWM_Start+0xcc>
    __HAL_TIM_ENABLE(htim);
 8002a30:	681a      	ldr	r2, [r3, #0]
 8002a32:	f042 0201 	orr.w	r2, r2, #1
 8002a36:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8002a38:	2000      	movs	r0, #0
 8002a3a:	e037      	b.n	8002aac <HAL_TIM_PWM_Start+0xe0>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002a3c:	2904      	cmp	r1, #4
 8002a3e:	d008      	beq.n	8002a52 <HAL_TIM_PWM_Start+0x86>
 8002a40:	2908      	cmp	r1, #8
 8002a42:	d00d      	beq.n	8002a60 <HAL_TIM_PWM_Start+0x94>
 8002a44:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8002a48:	b2db      	uxtb	r3, r3
 8002a4a:	3b01      	subs	r3, #1
 8002a4c:	bf18      	it	ne
 8002a4e:	2301      	movne	r3, #1
 8002a50:	e7c7      	b.n	80029e2 <HAL_TIM_PWM_Start+0x16>
 8002a52:	f894 303f 	ldrb.w	r3, [r4, #63]	; 0x3f
 8002a56:	b2db      	uxtb	r3, r3
 8002a58:	3b01      	subs	r3, #1
 8002a5a:	bf18      	it	ne
 8002a5c:	2301      	movne	r3, #1
 8002a5e:	e7c0      	b.n	80029e2 <HAL_TIM_PWM_Start+0x16>
 8002a60:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 8002a64:	b2db      	uxtb	r3, r3
 8002a66:	3b01      	subs	r3, #1
 8002a68:	bf18      	it	ne
 8002a6a:	2301      	movne	r3, #1
 8002a6c:	e7b9      	b.n	80029e2 <HAL_TIM_PWM_Start+0x16>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002a6e:	2804      	cmp	r0, #4
 8002a70:	d005      	beq.n	8002a7e <HAL_TIM_PWM_Start+0xb2>
 8002a72:	2808      	cmp	r0, #8
 8002a74:	d007      	beq.n	8002a86 <HAL_TIM_PWM_Start+0xba>
 8002a76:	2302      	movs	r3, #2
 8002a78:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 8002a7c:	e7b8      	b.n	80029f0 <HAL_TIM_PWM_Start+0x24>
 8002a7e:	2302      	movs	r3, #2
 8002a80:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8002a84:	e7b4      	b.n	80029f0 <HAL_TIM_PWM_Start+0x24>
 8002a86:	2302      	movs	r3, #2
 8002a88:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8002a8c:	e7b0      	b.n	80029f0 <HAL_TIM_PWM_Start+0x24>
    __HAL_TIM_MOE_ENABLE(htim);
 8002a8e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002a90:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002a94:	645a      	str	r2, [r3, #68]	; 0x44
 8002a96:	e7b4      	b.n	8002a02 <HAL_TIM_PWM_Start+0x36>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002a98:	689a      	ldr	r2, [r3, #8]
 8002a9a:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a9e:	2a06      	cmp	r2, #6
 8002aa0:	d007      	beq.n	8002ab2 <HAL_TIM_PWM_Start+0xe6>
      __HAL_TIM_ENABLE(htim);
 8002aa2:	681a      	ldr	r2, [r3, #0]
 8002aa4:	f042 0201 	orr.w	r2, r2, #1
 8002aa8:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8002aaa:	2000      	movs	r0, #0
}
 8002aac:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8002aae:	2001      	movs	r0, #1
 8002ab0:	e7fc      	b.n	8002aac <HAL_TIM_PWM_Start+0xe0>
  return HAL_OK;
 8002ab2:	2000      	movs	r0, #0
 8002ab4:	e7fa      	b.n	8002aac <HAL_TIM_PWM_Start+0xe0>
 8002ab6:	bf00      	nop
 8002ab8:	40010000 	.word	0x40010000

08002abc <HAL_TIM_IC_Start>:
{
 8002abc:	b510      	push	{r4, lr}
 8002abe:	4604      	mov	r4, r0
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8002ac0:	460b      	mov	r3, r1
 8002ac2:	2900      	cmp	r1, #0
 8002ac4:	d137      	bne.n	8002b36 <HAL_TIM_IC_Start+0x7a>
 8002ac6:	f890 003e 	ldrb.w	r0, [r0, #62]	; 0x3e
 8002aca:	b2c0      	uxtb	r0, r0
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d142      	bne.n	8002b56 <HAL_TIM_IC_Start+0x9a>
 8002ad0:	f894 2042 	ldrb.w	r2, [r4, #66]	; 0x42
 8002ad4:	b2d2      	uxtb	r2, r2
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8002ad6:	2801      	cmp	r0, #1
 8002ad8:	d178      	bne.n	8002bcc <HAL_TIM_IC_Start+0x110>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8002ada:	2a01      	cmp	r2, #1
 8002adc:	d177      	bne.n	8002bce <HAL_TIM_IC_Start+0x112>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d149      	bne.n	8002b76 <HAL_TIM_IC_Start+0xba>
 8002ae2:	2202      	movs	r2, #2
 8002ae4:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d154      	bne.n	8002b96 <HAL_TIM_IC_Start+0xda>
 8002aec:	2202      	movs	r2, #2
 8002aee:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002af2:	2201      	movs	r2, #1
 8002af4:	4619      	mov	r1, r3
 8002af6:	6820      	ldr	r0, [r4, #0]
 8002af8:	f7ff ff56 	bl	80029a8 <TIM_CCxChannelCmd>
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002afc:	6823      	ldr	r3, [r4, #0]
 8002afe:	4a35      	ldr	r2, [pc, #212]	; (8002bd4 <HAL_TIM_IC_Start+0x118>)
 8002b00:	4293      	cmp	r3, r2
 8002b02:	d058      	beq.n	8002bb6 <HAL_TIM_IC_Start+0xfa>
 8002b04:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b08:	d055      	beq.n	8002bb6 <HAL_TIM_IC_Start+0xfa>
 8002b0a:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8002b0e:	4293      	cmp	r3, r2
 8002b10:	d051      	beq.n	8002bb6 <HAL_TIM_IC_Start+0xfa>
 8002b12:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002b16:	4293      	cmp	r3, r2
 8002b18:	d04d      	beq.n	8002bb6 <HAL_TIM_IC_Start+0xfa>
 8002b1a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002b1e:	4293      	cmp	r3, r2
 8002b20:	d049      	beq.n	8002bb6 <HAL_TIM_IC_Start+0xfa>
 8002b22:	f502 329a 	add.w	r2, r2, #78848	; 0x13400
 8002b26:	4293      	cmp	r3, r2
 8002b28:	d045      	beq.n	8002bb6 <HAL_TIM_IC_Start+0xfa>
    __HAL_TIM_ENABLE(htim);
 8002b2a:	681a      	ldr	r2, [r3, #0]
 8002b2c:	f042 0201 	orr.w	r2, r2, #1
 8002b30:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8002b32:	2000      	movs	r0, #0
 8002b34:	e04b      	b.n	8002bce <HAL_TIM_IC_Start+0x112>
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8002b36:	2904      	cmp	r1, #4
 8002b38:	d005      	beq.n	8002b46 <HAL_TIM_IC_Start+0x8a>
 8002b3a:	2908      	cmp	r1, #8
 8002b3c:	d007      	beq.n	8002b4e <HAL_TIM_IC_Start+0x92>
 8002b3e:	f890 0041 	ldrb.w	r0, [r0, #65]	; 0x41
 8002b42:	b2c0      	uxtb	r0, r0
 8002b44:	e7c2      	b.n	8002acc <HAL_TIM_IC_Start+0x10>
 8002b46:	f890 003f 	ldrb.w	r0, [r0, #63]	; 0x3f
 8002b4a:	b2c0      	uxtb	r0, r0
 8002b4c:	e7be      	b.n	8002acc <HAL_TIM_IC_Start+0x10>
 8002b4e:	f890 0040 	ldrb.w	r0, [r0, #64]	; 0x40
 8002b52:	b2c0      	uxtb	r0, r0
 8002b54:	e7ba      	b.n	8002acc <HAL_TIM_IC_Start+0x10>
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8002b56:	2b04      	cmp	r3, #4
 8002b58:	d005      	beq.n	8002b66 <HAL_TIM_IC_Start+0xaa>
 8002b5a:	2b08      	cmp	r3, #8
 8002b5c:	d007      	beq.n	8002b6e <HAL_TIM_IC_Start+0xb2>
 8002b5e:	f894 2045 	ldrb.w	r2, [r4, #69]	; 0x45
 8002b62:	b2d2      	uxtb	r2, r2
 8002b64:	e7b7      	b.n	8002ad6 <HAL_TIM_IC_Start+0x1a>
 8002b66:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8002b6a:	b2d2      	uxtb	r2, r2
 8002b6c:	e7b3      	b.n	8002ad6 <HAL_TIM_IC_Start+0x1a>
 8002b6e:	f894 2044 	ldrb.w	r2, [r4, #68]	; 0x44
 8002b72:	b2d2      	uxtb	r2, r2
 8002b74:	e7af      	b.n	8002ad6 <HAL_TIM_IC_Start+0x1a>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002b76:	2b04      	cmp	r3, #4
 8002b78:	d005      	beq.n	8002b86 <HAL_TIM_IC_Start+0xca>
 8002b7a:	2b08      	cmp	r3, #8
 8002b7c:	d007      	beq.n	8002b8e <HAL_TIM_IC_Start+0xd2>
 8002b7e:	2202      	movs	r2, #2
 8002b80:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
 8002b84:	e7b0      	b.n	8002ae8 <HAL_TIM_IC_Start+0x2c>
 8002b86:	2202      	movs	r2, #2
 8002b88:	f884 203f 	strb.w	r2, [r4, #63]	; 0x3f
 8002b8c:	e7ac      	b.n	8002ae8 <HAL_TIM_IC_Start+0x2c>
 8002b8e:	2202      	movs	r2, #2
 8002b90:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
 8002b94:	e7a8      	b.n	8002ae8 <HAL_TIM_IC_Start+0x2c>
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002b96:	2b04      	cmp	r3, #4
 8002b98:	d005      	beq.n	8002ba6 <HAL_TIM_IC_Start+0xea>
 8002b9a:	2b08      	cmp	r3, #8
 8002b9c:	d007      	beq.n	8002bae <HAL_TIM_IC_Start+0xf2>
 8002b9e:	2202      	movs	r2, #2
 8002ba0:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 8002ba4:	e7a5      	b.n	8002af2 <HAL_TIM_IC_Start+0x36>
 8002ba6:	2202      	movs	r2, #2
 8002ba8:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8002bac:	e7a1      	b.n	8002af2 <HAL_TIM_IC_Start+0x36>
 8002bae:	2202      	movs	r2, #2
 8002bb0:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
 8002bb4:	e79d      	b.n	8002af2 <HAL_TIM_IC_Start+0x36>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002bb6:	689a      	ldr	r2, [r3, #8]
 8002bb8:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002bbc:	2a06      	cmp	r2, #6
 8002bbe:	d007      	beq.n	8002bd0 <HAL_TIM_IC_Start+0x114>
      __HAL_TIM_ENABLE(htim);
 8002bc0:	681a      	ldr	r2, [r3, #0]
 8002bc2:	f042 0201 	orr.w	r2, r2, #1
 8002bc6:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8002bc8:	2000      	movs	r0, #0
 8002bca:	e000      	b.n	8002bce <HAL_TIM_IC_Start+0x112>
    return HAL_ERROR;
 8002bcc:	2001      	movs	r0, #1
}
 8002bce:	bd10      	pop	{r4, pc}
  return HAL_OK;
 8002bd0:	2000      	movs	r0, #0
 8002bd2:	e7fc      	b.n	8002bce <HAL_TIM_IC_Start+0x112>
 8002bd4:	40010000 	.word	0x40010000

08002bd8 <HAL_TIM_IC_Start_IT>:
{
 8002bd8:	b510      	push	{r4, lr}
 8002bda:	4604      	mov	r4, r0
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8002bdc:	460b      	mov	r3, r1
 8002bde:	bb09      	cbnz	r1, 8002c24 <HAL_TIM_IC_Start_IT+0x4c>
 8002be0:	f890 003e 	ldrb.w	r0, [r0, #62]	; 0x3e
 8002be4:	b2c0      	uxtb	r0, r0
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8002be6:	bb6b      	cbnz	r3, 8002c44 <HAL_TIM_IC_Start_IT+0x6c>
 8002be8:	f894 2042 	ldrb.w	r2, [r4, #66]	; 0x42
 8002bec:	b2d2      	uxtb	r2, r2
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8002bee:	2801      	cmp	r0, #1
 8002bf0:	f040 809c 	bne.w	8002d2c <HAL_TIM_IC_Start_IT+0x154>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8002bf4:	2a01      	cmp	r2, #1
 8002bf6:	f040 809a 	bne.w	8002d2e <HAL_TIM_IC_Start_IT+0x156>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002bfa:	bb9b      	cbnz	r3, 8002c64 <HAL_TIM_IC_Start_IT+0x8c>
 8002bfc:	2102      	movs	r1, #2
 8002bfe:	f884 103e 	strb.w	r1, [r4, #62]	; 0x3e
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d13e      	bne.n	8002c84 <HAL_TIM_IC_Start_IT+0xac>
 8002c06:	2102      	movs	r1, #2
 8002c08:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
  switch (Channel)
 8002c0c:	2b0c      	cmp	r3, #12
 8002c0e:	f200 808f 	bhi.w	8002d30 <HAL_TIM_IC_Start_IT+0x158>
 8002c12:	e8df f003 	tbb	[pc, r3]
 8002c16:	8d47      	.short	0x8d47
 8002c18:	8d6e8d8d 	.word	0x8d6e8d8d
 8002c1c:	8d748d8d 	.word	0x8d748d8d
 8002c20:	8d8d      	.short	0x8d8d
 8002c22:	7a          	.byte	0x7a
 8002c23:	00          	.byte	0x00
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8002c24:	2904      	cmp	r1, #4
 8002c26:	d005      	beq.n	8002c34 <HAL_TIM_IC_Start_IT+0x5c>
 8002c28:	2908      	cmp	r1, #8
 8002c2a:	d007      	beq.n	8002c3c <HAL_TIM_IC_Start_IT+0x64>
 8002c2c:	f890 0041 	ldrb.w	r0, [r0, #65]	; 0x41
 8002c30:	b2c0      	uxtb	r0, r0
 8002c32:	e7d8      	b.n	8002be6 <HAL_TIM_IC_Start_IT+0xe>
 8002c34:	f890 003f 	ldrb.w	r0, [r0, #63]	; 0x3f
 8002c38:	b2c0      	uxtb	r0, r0
 8002c3a:	e7d4      	b.n	8002be6 <HAL_TIM_IC_Start_IT+0xe>
 8002c3c:	f890 0040 	ldrb.w	r0, [r0, #64]	; 0x40
 8002c40:	b2c0      	uxtb	r0, r0
 8002c42:	e7d0      	b.n	8002be6 <HAL_TIM_IC_Start_IT+0xe>
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8002c44:	2b04      	cmp	r3, #4
 8002c46:	d005      	beq.n	8002c54 <HAL_TIM_IC_Start_IT+0x7c>
 8002c48:	2b08      	cmp	r3, #8
 8002c4a:	d007      	beq.n	8002c5c <HAL_TIM_IC_Start_IT+0x84>
 8002c4c:	f894 2045 	ldrb.w	r2, [r4, #69]	; 0x45
 8002c50:	b2d2      	uxtb	r2, r2
 8002c52:	e7cc      	b.n	8002bee <HAL_TIM_IC_Start_IT+0x16>
 8002c54:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8002c58:	b2d2      	uxtb	r2, r2
 8002c5a:	e7c8      	b.n	8002bee <HAL_TIM_IC_Start_IT+0x16>
 8002c5c:	f894 2044 	ldrb.w	r2, [r4, #68]	; 0x44
 8002c60:	b2d2      	uxtb	r2, r2
 8002c62:	e7c4      	b.n	8002bee <HAL_TIM_IC_Start_IT+0x16>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002c64:	2b04      	cmp	r3, #4
 8002c66:	d005      	beq.n	8002c74 <HAL_TIM_IC_Start_IT+0x9c>
 8002c68:	2b08      	cmp	r3, #8
 8002c6a:	d007      	beq.n	8002c7c <HAL_TIM_IC_Start_IT+0xa4>
 8002c6c:	2102      	movs	r1, #2
 8002c6e:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
 8002c72:	e7c6      	b.n	8002c02 <HAL_TIM_IC_Start_IT+0x2a>
 8002c74:	2102      	movs	r1, #2
 8002c76:	f884 103f 	strb.w	r1, [r4, #63]	; 0x3f
 8002c7a:	e7c2      	b.n	8002c02 <HAL_TIM_IC_Start_IT+0x2a>
 8002c7c:	2102      	movs	r1, #2
 8002c7e:	f884 1040 	strb.w	r1, [r4, #64]	; 0x40
 8002c82:	e7be      	b.n	8002c02 <HAL_TIM_IC_Start_IT+0x2a>
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002c84:	2b04      	cmp	r3, #4
 8002c86:	d005      	beq.n	8002c94 <HAL_TIM_IC_Start_IT+0xbc>
 8002c88:	2b08      	cmp	r3, #8
 8002c8a:	d007      	beq.n	8002c9c <HAL_TIM_IC_Start_IT+0xc4>
 8002c8c:	2102      	movs	r1, #2
 8002c8e:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8002c92:	e7bb      	b.n	8002c0c <HAL_TIM_IC_Start_IT+0x34>
 8002c94:	2102      	movs	r1, #2
 8002c96:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002c9a:	e7b7      	b.n	8002c0c <HAL_TIM_IC_Start_IT+0x34>
 8002c9c:	2102      	movs	r1, #2
 8002c9e:	f884 1044 	strb.w	r1, [r4, #68]	; 0x44
 8002ca2:	e7b3      	b.n	8002c0c <HAL_TIM_IC_Start_IT+0x34>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8002ca4:	6821      	ldr	r1, [r4, #0]
 8002ca6:	68ca      	ldr	r2, [r1, #12]
 8002ca8:	f042 0202 	orr.w	r2, r2, #2
 8002cac:	60ca      	str	r2, [r1, #12]
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002cae:	2201      	movs	r2, #1
 8002cb0:	4619      	mov	r1, r3
 8002cb2:	6820      	ldr	r0, [r4, #0]
 8002cb4:	f7ff fe78 	bl	80029a8 <TIM_CCxChannelCmd>
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002cb8:	6823      	ldr	r3, [r4, #0]
 8002cba:	4a1f      	ldr	r2, [pc, #124]	; (8002d38 <HAL_TIM_IC_Start_IT+0x160>)
 8002cbc:	4293      	cmp	r3, r2
 8002cbe:	d02a      	beq.n	8002d16 <HAL_TIM_IC_Start_IT+0x13e>
 8002cc0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002cc4:	d027      	beq.n	8002d16 <HAL_TIM_IC_Start_IT+0x13e>
 8002cc6:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8002cca:	4293      	cmp	r3, r2
 8002ccc:	d023      	beq.n	8002d16 <HAL_TIM_IC_Start_IT+0x13e>
 8002cce:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002cd2:	4293      	cmp	r3, r2
 8002cd4:	d01f      	beq.n	8002d16 <HAL_TIM_IC_Start_IT+0x13e>
 8002cd6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002cda:	4293      	cmp	r3, r2
 8002cdc:	d01b      	beq.n	8002d16 <HAL_TIM_IC_Start_IT+0x13e>
 8002cde:	f502 329a 	add.w	r2, r2, #78848	; 0x13400
 8002ce2:	4293      	cmp	r3, r2
 8002ce4:	d017      	beq.n	8002d16 <HAL_TIM_IC_Start_IT+0x13e>
      __HAL_TIM_ENABLE(htim);
 8002ce6:	681a      	ldr	r2, [r3, #0]
 8002ce8:	f042 0201 	orr.w	r2, r2, #1
 8002cec:	601a      	str	r2, [r3, #0]
 8002cee:	2000      	movs	r0, #0
 8002cf0:	e01d      	b.n	8002d2e <HAL_TIM_IC_Start_IT+0x156>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8002cf2:	6821      	ldr	r1, [r4, #0]
 8002cf4:	68ca      	ldr	r2, [r1, #12]
 8002cf6:	f042 0204 	orr.w	r2, r2, #4
 8002cfa:	60ca      	str	r2, [r1, #12]
  if (status == HAL_OK)
 8002cfc:	e7d7      	b.n	8002cae <HAL_TIM_IC_Start_IT+0xd6>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8002cfe:	6821      	ldr	r1, [r4, #0]
 8002d00:	68ca      	ldr	r2, [r1, #12]
 8002d02:	f042 0208 	orr.w	r2, r2, #8
 8002d06:	60ca      	str	r2, [r1, #12]
  if (status == HAL_OK)
 8002d08:	e7d1      	b.n	8002cae <HAL_TIM_IC_Start_IT+0xd6>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8002d0a:	6821      	ldr	r1, [r4, #0]
 8002d0c:	68ca      	ldr	r2, [r1, #12]
 8002d0e:	f042 0210 	orr.w	r2, r2, #16
 8002d12:	60ca      	str	r2, [r1, #12]
  if (status == HAL_OK)
 8002d14:	e7cb      	b.n	8002cae <HAL_TIM_IC_Start_IT+0xd6>
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002d16:	689a      	ldr	r2, [r3, #8]
 8002d18:	f002 0207 	and.w	r2, r2, #7
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d1c:	2a06      	cmp	r2, #6
 8002d1e:	d009      	beq.n	8002d34 <HAL_TIM_IC_Start_IT+0x15c>
        __HAL_TIM_ENABLE(htim);
 8002d20:	681a      	ldr	r2, [r3, #0]
 8002d22:	f042 0201 	orr.w	r2, r2, #1
 8002d26:	601a      	str	r2, [r3, #0]
 8002d28:	2000      	movs	r0, #0
 8002d2a:	e000      	b.n	8002d2e <HAL_TIM_IC_Start_IT+0x156>
    return HAL_ERROR;
 8002d2c:	2001      	movs	r0, #1
}
 8002d2e:	bd10      	pop	{r4, pc}
        __HAL_TIM_ENABLE(htim);
 8002d30:	4610      	mov	r0, r2
 8002d32:	e7fc      	b.n	8002d2e <HAL_TIM_IC_Start_IT+0x156>
 8002d34:	2000      	movs	r0, #0
 8002d36:	e7fa      	b.n	8002d2e <HAL_TIM_IC_Start_IT+0x156>
 8002d38:	40010000 	.word	0x40010000

08002d3c <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002d3c:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8002d40:	2b01      	cmp	r3, #1
 8002d42:	d033      	beq.n	8002dac <HAL_TIMEx_MasterConfigSynchronization+0x70>
{
 8002d44:	b430      	push	{r4, r5}
  __HAL_LOCK(htim);
 8002d46:	2301      	movs	r3, #1
 8002d48:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d4c:	2302      	movs	r3, #2
 8002d4e:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002d52:	6803      	ldr	r3, [r0, #0]
 8002d54:	685c      	ldr	r4, [r3, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002d56:	689d      	ldr	r5, [r3, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002d58:	f024 0470 	bic.w	r4, r4, #112	; 0x70
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002d5c:	680a      	ldr	r2, [r1, #0]
 8002d5e:	4322      	orrs	r2, r4

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002d60:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002d62:	6803      	ldr	r3, [r0, #0]
 8002d64:	4a12      	ldr	r2, [pc, #72]	; (8002db0 <HAL_TIMEx_MasterConfigSynchronization+0x74>)
 8002d66:	4293      	cmp	r3, r2
 8002d68:	d012      	beq.n	8002d90 <HAL_TIMEx_MasterConfigSynchronization+0x54>
 8002d6a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d6e:	d00f      	beq.n	8002d90 <HAL_TIMEx_MasterConfigSynchronization+0x54>
 8002d70:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8002d74:	4293      	cmp	r3, r2
 8002d76:	d00b      	beq.n	8002d90 <HAL_TIMEx_MasterConfigSynchronization+0x54>
 8002d78:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002d7c:	4293      	cmp	r3, r2
 8002d7e:	d007      	beq.n	8002d90 <HAL_TIMEx_MasterConfigSynchronization+0x54>
 8002d80:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002d84:	4293      	cmp	r3, r2
 8002d86:	d003      	beq.n	8002d90 <HAL_TIMEx_MasterConfigSynchronization+0x54>
 8002d88:	f502 329a 	add.w	r2, r2, #78848	; 0x13400
 8002d8c:	4293      	cmp	r3, r2
 8002d8e:	d104      	bne.n	8002d9a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002d90:	f025 0580 	bic.w	r5, r5, #128	; 0x80
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002d94:	684a      	ldr	r2, [r1, #4]
 8002d96:	4315      	orrs	r5, r2

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002d98:	609d      	str	r5, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002d9a:	2301      	movs	r3, #1
 8002d9c:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002da0:	2300      	movs	r3, #0
 8002da2:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
 8002da6:	4618      	mov	r0, r3
}
 8002da8:	bc30      	pop	{r4, r5}
 8002daa:	4770      	bx	lr
  __HAL_LOCK(htim);
 8002dac:	2002      	movs	r0, #2
}
 8002dae:	4770      	bx	lr
 8002db0:	40010000 	.word	0x40010000

08002db4 <HAL_TIMEx_CommutCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002db4:	4770      	bx	lr

08002db6 <HAL_TIMEx_BreakCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002db6:	4770      	bx	lr

08002db8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002db8:	b570      	push	{r4, r5, r6, lr}
 8002dba:	4604      	mov	r4, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002dbc:	6802      	ldr	r2, [r0, #0]
 8002dbe:	6913      	ldr	r3, [r2, #16]
 8002dc0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002dc4:	68c1      	ldr	r1, [r0, #12]
 8002dc6:	430b      	orrs	r3, r1
 8002dc8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002dca:	6883      	ldr	r3, [r0, #8]
 8002dcc:	6902      	ldr	r2, [r0, #16]
 8002dce:	4313      	orrs	r3, r2
 8002dd0:	6942      	ldr	r2, [r0, #20]
 8002dd2:	4313      	orrs	r3, r2
 8002dd4:	69c2      	ldr	r2, [r0, #28]
 8002dd6:	431a      	orrs	r2, r3
  MODIFY_REG(huart->Instance->CR1,
 8002dd8:	6801      	ldr	r1, [r0, #0]
 8002dda:	68cb      	ldr	r3, [r1, #12]
 8002ddc:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8002de0:	f023 030c 	bic.w	r3, r3, #12
 8002de4:	4313      	orrs	r3, r2
 8002de6:	60cb      	str	r3, [r1, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002de8:	6802      	ldr	r2, [r0, #0]
 8002dea:	6953      	ldr	r3, [r2, #20]
 8002dec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002df0:	6981      	ldr	r1, [r0, #24]
 8002df2:	430b      	orrs	r3, r1
 8002df4:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002df6:	6803      	ldr	r3, [r0, #0]
 8002df8:	4a34      	ldr	r2, [pc, #208]	; (8002ecc <UART_SetConfig+0x114>)
 8002dfa:	4293      	cmp	r3, r2
 8002dfc:	d006      	beq.n	8002e0c <UART_SetConfig+0x54>
 8002dfe:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002e02:	4293      	cmp	r3, r2
 8002e04:	d002      	beq.n	8002e0c <UART_SetConfig+0x54>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002e06:	f7ff f8bd 	bl	8001f84 <HAL_RCC_GetPCLK1Freq>
 8002e0a:	e001      	b.n	8002e10 <UART_SetConfig+0x58>
      pclk = HAL_RCC_GetPCLK2Freq();
 8002e0c:	f7ff f8ca 	bl	8001fa4 <HAL_RCC_GetPCLK2Freq>
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002e10:	69e3      	ldr	r3, [r4, #28]
 8002e12:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002e16:	d02a      	beq.n	8002e6e <UART_SetConfig+0xb6>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002e18:	2600      	movs	r6, #0
 8002e1a:	1805      	adds	r5, r0, r0
 8002e1c:	eb46 0106 	adc.w	r1, r6, r6
 8002e20:	182d      	adds	r5, r5, r0
 8002e22:	eb46 0101 	adc.w	r1, r6, r1
 8002e26:	00cb      	lsls	r3, r1, #3
 8002e28:	ea43 7355 	orr.w	r3, r3, r5, lsr #29
 8002e2c:	00ea      	lsls	r2, r5, #3
 8002e2e:	4615      	mov	r5, r2
 8002e30:	4619      	mov	r1, r3
 8002e32:	6863      	ldr	r3, [r4, #4]
 8002e34:	009a      	lsls	r2, r3, #2
 8002e36:	0f9b      	lsrs	r3, r3, #30
 8002e38:	1828      	adds	r0, r5, r0
 8002e3a:	eb46 0101 	adc.w	r1, r6, r1
 8002e3e:	f7fd febb 	bl	8000bb8 <__aeabi_uldivmod>
 8002e42:	4d23      	ldr	r5, [pc, #140]	; (8002ed0 <UART_SetConfig+0x118>)
 8002e44:	fba5 3200 	umull	r3, r2, r5, r0
 8002e48:	0951      	lsrs	r1, r2, #5
 8002e4a:	2364      	movs	r3, #100	; 0x64
 8002e4c:	fb03 0311 	mls	r3, r3, r1, r0
 8002e50:	011b      	lsls	r3, r3, #4
 8002e52:	3332      	adds	r3, #50	; 0x32
 8002e54:	fba5 2303 	umull	r2, r3, r5, r3
 8002e58:	095b      	lsrs	r3, r3, #5
 8002e5a:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002e5e:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8002e62:	f003 030f 	and.w	r3, r3, #15
 8002e66:	6821      	ldr	r1, [r4, #0]
 8002e68:	4413      	add	r3, r2
 8002e6a:	608b      	str	r3, [r1, #8]
  }
}
 8002e6c:	bd70      	pop	{r4, r5, r6, pc}
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002e6e:	2600      	movs	r6, #0
 8002e70:	1805      	adds	r5, r0, r0
 8002e72:	eb46 0106 	adc.w	r1, r6, r6
 8002e76:	182d      	adds	r5, r5, r0
 8002e78:	eb46 0101 	adc.w	r1, r6, r1
 8002e7c:	00cb      	lsls	r3, r1, #3
 8002e7e:	ea43 7355 	orr.w	r3, r3, r5, lsr #29
 8002e82:	00ea      	lsls	r2, r5, #3
 8002e84:	4615      	mov	r5, r2
 8002e86:	4619      	mov	r1, r3
 8002e88:	6862      	ldr	r2, [r4, #4]
 8002e8a:	4633      	mov	r3, r6
 8002e8c:	1892      	adds	r2, r2, r2
 8002e8e:	eb46 0303 	adc.w	r3, r6, r3
 8002e92:	1828      	adds	r0, r5, r0
 8002e94:	eb46 0101 	adc.w	r1, r6, r1
 8002e98:	f7fd fe8e 	bl	8000bb8 <__aeabi_uldivmod>
 8002e9c:	4d0c      	ldr	r5, [pc, #48]	; (8002ed0 <UART_SetConfig+0x118>)
 8002e9e:	fba5 3200 	umull	r3, r2, r5, r0
 8002ea2:	0951      	lsrs	r1, r2, #5
 8002ea4:	2364      	movs	r3, #100	; 0x64
 8002ea6:	fb03 0311 	mls	r3, r3, r1, r0
 8002eaa:	00db      	lsls	r3, r3, #3
 8002eac:	3332      	adds	r3, #50	; 0x32
 8002eae:	fba5 2303 	umull	r2, r3, r5, r3
 8002eb2:	095b      	lsrs	r3, r3, #5
 8002eb4:	005a      	lsls	r2, r3, #1
 8002eb6:	f402 72f8 	and.w	r2, r2, #496	; 0x1f0
 8002eba:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8002ebe:	f003 0307 	and.w	r3, r3, #7
 8002ec2:	6821      	ldr	r1, [r4, #0]
 8002ec4:	4413      	add	r3, r2
 8002ec6:	608b      	str	r3, [r1, #8]
 8002ec8:	e7d0      	b.n	8002e6c <UART_SetConfig+0xb4>
 8002eca:	bf00      	nop
 8002ecc:	40011000 	.word	0x40011000
 8002ed0:	51eb851f 	.word	0x51eb851f

08002ed4 <UART_WaitOnFlagUntilTimeout>:
{
 8002ed4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002ed8:	4605      	mov	r5, r0
 8002eda:	460f      	mov	r7, r1
 8002edc:	4616      	mov	r6, r2
 8002ede:	4699      	mov	r9, r3
 8002ee0:	f8dd 8020 	ldr.w	r8, [sp, #32]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002ee4:	682c      	ldr	r4, [r5, #0]
 8002ee6:	6824      	ldr	r4, [r4, #0]
 8002ee8:	ea37 0304 	bics.w	r3, r7, r4
 8002eec:	bf0c      	ite	eq
 8002eee:	2401      	moveq	r4, #1
 8002ef0:	2400      	movne	r4, #0
 8002ef2:	42b4      	cmp	r4, r6
 8002ef4:	d12d      	bne.n	8002f52 <UART_WaitOnFlagUntilTimeout+0x7e>
    if (Timeout != HAL_MAX_DELAY)
 8002ef6:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
 8002efa:	d0f3      	beq.n	8002ee4 <UART_WaitOnFlagUntilTimeout+0x10>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002efc:	f1b8 0f00 	cmp.w	r8, #0
 8002f00:	d005      	beq.n	8002f0e <UART_WaitOnFlagUntilTimeout+0x3a>
 8002f02:	f7fe fbe5 	bl	80016d0 <HAL_GetTick>
 8002f06:	eba0 0009 	sub.w	r0, r0, r9
 8002f0a:	4540      	cmp	r0, r8
 8002f0c:	d9ea      	bls.n	8002ee4 <UART_WaitOnFlagUntilTimeout+0x10>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002f0e:	682a      	ldr	r2, [r5, #0]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f10:	f102 030c 	add.w	r3, r2, #12
 8002f14:	e853 3f00 	ldrex	r3, [r3]
 8002f18:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f1c:	320c      	adds	r2, #12
 8002f1e:	e842 3100 	strex	r1, r3, [r2]
 8002f22:	2900      	cmp	r1, #0
 8002f24:	d1f3      	bne.n	8002f0e <UART_WaitOnFlagUntilTimeout+0x3a>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002f26:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f28:	f102 0314 	add.w	r3, r2, #20
 8002f2c:	e853 3f00 	ldrex	r3, [r3]
 8002f30:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f34:	3214      	adds	r2, #20
 8002f36:	e842 3100 	strex	r1, r3, [r2]
 8002f3a:	2900      	cmp	r1, #0
 8002f3c:	d1f3      	bne.n	8002f26 <UART_WaitOnFlagUntilTimeout+0x52>
        huart->gState  = HAL_UART_STATE_READY;
 8002f3e:	2320      	movs	r3, #32
 8002f40:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002f44:	f885 303e 	strb.w	r3, [r5, #62]	; 0x3e
        __HAL_UNLOCK(huart);
 8002f48:	2300      	movs	r3, #0
 8002f4a:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
        return HAL_TIMEOUT;
 8002f4e:	2003      	movs	r0, #3
 8002f50:	e000      	b.n	8002f54 <UART_WaitOnFlagUntilTimeout+0x80>
  return HAL_OK;
 8002f52:	2000      	movs	r0, #0
}
 8002f54:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08002f58 <HAL_UART_Init>:
  if (huart == NULL)
 8002f58:	b358      	cbz	r0, 8002fb2 <HAL_UART_Init+0x5a>
{
 8002f5a:	b510      	push	{r4, lr}
 8002f5c:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 8002f5e:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8002f62:	b30b      	cbz	r3, 8002fa8 <HAL_UART_Init+0x50>
  huart->gState = HAL_UART_STATE_BUSY;
 8002f64:	2324      	movs	r3, #36	; 0x24
 8002f66:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UART_DISABLE(huart);
 8002f6a:	6822      	ldr	r2, [r4, #0]
 8002f6c:	68d3      	ldr	r3, [r2, #12]
 8002f6e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002f72:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8002f74:	4620      	mov	r0, r4
 8002f76:	f7ff ff1f 	bl	8002db8 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002f7a:	6822      	ldr	r2, [r4, #0]
 8002f7c:	6913      	ldr	r3, [r2, #16]
 8002f7e:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8002f82:	6113      	str	r3, [r2, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002f84:	6822      	ldr	r2, [r4, #0]
 8002f86:	6953      	ldr	r3, [r2, #20]
 8002f88:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 8002f8c:	6153      	str	r3, [r2, #20]
  __HAL_UART_ENABLE(huart);
 8002f8e:	6822      	ldr	r2, [r4, #0]
 8002f90:	68d3      	ldr	r3, [r2, #12]
 8002f92:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002f96:	60d3      	str	r3, [r2, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f98:	2000      	movs	r0, #0
 8002f9a:	6420      	str	r0, [r4, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002f9c:	2320      	movs	r3, #32
 8002f9e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002fa2:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
}
 8002fa6:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8002fa8:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_UART_MspInit(huart);
 8002fac:	f7fe fa72 	bl	8001494 <HAL_UART_MspInit>
 8002fb0:	e7d8      	b.n	8002f64 <HAL_UART_Init+0xc>
    return HAL_ERROR;
 8002fb2:	2001      	movs	r0, #1
}
 8002fb4:	4770      	bx	lr

08002fb6 <HAL_UART_Transmit>:
{
 8002fb6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002fba:	b082      	sub	sp, #8
 8002fbc:	461e      	mov	r6, r3
  if (huart->gState == HAL_UART_STATE_READY)
 8002fbe:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8002fc2:	b2db      	uxtb	r3, r3
 8002fc4:	2b20      	cmp	r3, #32
 8002fc6:	d154      	bne.n	8003072 <HAL_UART_Transmit+0xbc>
 8002fc8:	4604      	mov	r4, r0
 8002fca:	460d      	mov	r5, r1
 8002fcc:	4690      	mov	r8, r2
    if ((pData == NULL) || (Size == 0U))
 8002fce:	2900      	cmp	r1, #0
 8002fd0:	d053      	beq.n	800307a <HAL_UART_Transmit+0xc4>
 8002fd2:	2a00      	cmp	r2, #0
 8002fd4:	d053      	beq.n	800307e <HAL_UART_Transmit+0xc8>
    __HAL_LOCK(huart);
 8002fd6:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8002fda:	2b01      	cmp	r3, #1
 8002fdc:	d051      	beq.n	8003082 <HAL_UART_Transmit+0xcc>
 8002fde:	2301      	movs	r3, #1
 8002fe0:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002fe4:	2300      	movs	r3, #0
 8002fe6:	6403      	str	r3, [r0, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002fe8:	2321      	movs	r3, #33	; 0x21
 8002fea:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
    tickstart = HAL_GetTick();
 8002fee:	f7fe fb6f 	bl	80016d0 <HAL_GetTick>
 8002ff2:	4607      	mov	r7, r0
    huart->TxXferSize = Size;
 8002ff4:	f8a4 8024 	strh.w	r8, [r4, #36]	; 0x24
    huart->TxXferCount = Size;
 8002ff8:	f8a4 8026 	strh.w	r8, [r4, #38]	; 0x26
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002ffc:	68a3      	ldr	r3, [r4, #8]
 8002ffe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003002:	d005      	beq.n	8003010 <HAL_UART_Transmit+0x5a>
      pdata16bits = NULL;
 8003004:	f04f 0800 	mov.w	r8, #0
    __HAL_UNLOCK(huart);
 8003008:	2300      	movs	r3, #0
 800300a:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    while (huart->TxXferCount > 0U)
 800300e:	e012      	b.n	8003036 <HAL_UART_Transmit+0x80>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003010:	6923      	ldr	r3, [r4, #16]
 8003012:	b113      	cbz	r3, 800301a <HAL_UART_Transmit+0x64>
      pdata16bits = NULL;
 8003014:	f04f 0800 	mov.w	r8, #0
 8003018:	e7f6      	b.n	8003008 <HAL_UART_Transmit+0x52>
      pdata16bits = (uint16_t *) pData;
 800301a:	46a8      	mov	r8, r5
      pdata8bits  = NULL;
 800301c:	2500      	movs	r5, #0
 800301e:	e7f3      	b.n	8003008 <HAL_UART_Transmit+0x52>
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003020:	f838 3b02 	ldrh.w	r3, [r8], #2
 8003024:	6822      	ldr	r2, [r4, #0]
 8003026:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800302a:	6053      	str	r3, [r2, #4]
      huart->TxXferCount--;
 800302c:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 800302e:	b292      	uxth	r2, r2
 8003030:	3a01      	subs	r2, #1
 8003032:	b292      	uxth	r2, r2
 8003034:	84e2      	strh	r2, [r4, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003036:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8003038:	b29b      	uxth	r3, r3
 800303a:	b173      	cbz	r3, 800305a <HAL_UART_Transmit+0xa4>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800303c:	9600      	str	r6, [sp, #0]
 800303e:	463b      	mov	r3, r7
 8003040:	2200      	movs	r2, #0
 8003042:	2180      	movs	r1, #128	; 0x80
 8003044:	4620      	mov	r0, r4
 8003046:	f7ff ff45 	bl	8002ed4 <UART_WaitOnFlagUntilTimeout>
 800304a:	b9e0      	cbnz	r0, 8003086 <HAL_UART_Transmit+0xd0>
      if (pdata8bits == NULL)
 800304c:	2d00      	cmp	r5, #0
 800304e:	d0e7      	beq.n	8003020 <HAL_UART_Transmit+0x6a>
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003050:	f815 2b01 	ldrb.w	r2, [r5], #1
 8003054:	6823      	ldr	r3, [r4, #0]
 8003056:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003058:	e7e8      	b.n	800302c <HAL_UART_Transmit+0x76>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800305a:	9600      	str	r6, [sp, #0]
 800305c:	463b      	mov	r3, r7
 800305e:	2200      	movs	r2, #0
 8003060:	2140      	movs	r1, #64	; 0x40
 8003062:	4620      	mov	r0, r4
 8003064:	f7ff ff36 	bl	8002ed4 <UART_WaitOnFlagUntilTimeout>
 8003068:	b978      	cbnz	r0, 800308a <HAL_UART_Transmit+0xd4>
    huart->gState = HAL_UART_STATE_READY;
 800306a:	2320      	movs	r3, #32
 800306c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    return HAL_OK;
 8003070:	e000      	b.n	8003074 <HAL_UART_Transmit+0xbe>
    return HAL_BUSY;
 8003072:	2002      	movs	r0, #2
}
 8003074:	b002      	add	sp, #8
 8003076:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      return  HAL_ERROR;
 800307a:	2001      	movs	r0, #1
 800307c:	e7fa      	b.n	8003074 <HAL_UART_Transmit+0xbe>
 800307e:	2001      	movs	r0, #1
 8003080:	e7f8      	b.n	8003074 <HAL_UART_Transmit+0xbe>
    __HAL_LOCK(huart);
 8003082:	2002      	movs	r0, #2
 8003084:	e7f6      	b.n	8003074 <HAL_UART_Transmit+0xbe>
        return HAL_TIMEOUT;
 8003086:	2003      	movs	r0, #3
 8003088:	e7f4      	b.n	8003074 <HAL_UART_Transmit+0xbe>
      return HAL_TIMEOUT;
 800308a:	2003      	movs	r0, #3
 800308c:	e7f2      	b.n	8003074 <HAL_UART_Transmit+0xbe>
	...

08003090 <__errno>:
 8003090:	4b01      	ldr	r3, [pc, #4]	; (8003098 <__errno+0x8>)
 8003092:	6818      	ldr	r0, [r3, #0]
 8003094:	4770      	bx	lr
 8003096:	bf00      	nop
 8003098:	2000006c 	.word	0x2000006c

0800309c <__libc_init_array>:
 800309c:	b570      	push	{r4, r5, r6, lr}
 800309e:	4d0d      	ldr	r5, [pc, #52]	; (80030d4 <__libc_init_array+0x38>)
 80030a0:	4c0d      	ldr	r4, [pc, #52]	; (80030d8 <__libc_init_array+0x3c>)
 80030a2:	1b64      	subs	r4, r4, r5
 80030a4:	10a4      	asrs	r4, r4, #2
 80030a6:	2600      	movs	r6, #0
 80030a8:	42a6      	cmp	r6, r4
 80030aa:	d109      	bne.n	80030c0 <__libc_init_array+0x24>
 80030ac:	4d0b      	ldr	r5, [pc, #44]	; (80030dc <__libc_init_array+0x40>)
 80030ae:	4c0c      	ldr	r4, [pc, #48]	; (80030e0 <__libc_init_array+0x44>)
 80030b0:	f002 fd68 	bl	8005b84 <_init>
 80030b4:	1b64      	subs	r4, r4, r5
 80030b6:	10a4      	asrs	r4, r4, #2
 80030b8:	2600      	movs	r6, #0
 80030ba:	42a6      	cmp	r6, r4
 80030bc:	d105      	bne.n	80030ca <__libc_init_array+0x2e>
 80030be:	bd70      	pop	{r4, r5, r6, pc}
 80030c0:	f855 3b04 	ldr.w	r3, [r5], #4
 80030c4:	4798      	blx	r3
 80030c6:	3601      	adds	r6, #1
 80030c8:	e7ee      	b.n	80030a8 <__libc_init_array+0xc>
 80030ca:	f855 3b04 	ldr.w	r3, [r5], #4
 80030ce:	4798      	blx	r3
 80030d0:	3601      	adds	r6, #1
 80030d2:	e7f2      	b.n	80030ba <__libc_init_array+0x1e>
 80030d4:	08005ffc 	.word	0x08005ffc
 80030d8:	08005ffc 	.word	0x08005ffc
 80030dc:	08005ffc 	.word	0x08005ffc
 80030e0:	08006000 	.word	0x08006000

080030e4 <memset>:
 80030e4:	4402      	add	r2, r0
 80030e6:	4603      	mov	r3, r0
 80030e8:	4293      	cmp	r3, r2
 80030ea:	d100      	bne.n	80030ee <memset+0xa>
 80030ec:	4770      	bx	lr
 80030ee:	f803 1b01 	strb.w	r1, [r3], #1
 80030f2:	e7f9      	b.n	80030e8 <memset+0x4>

080030f4 <__cvt>:
 80030f4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80030f8:	ec55 4b10 	vmov	r4, r5, d0
 80030fc:	2d00      	cmp	r5, #0
 80030fe:	460e      	mov	r6, r1
 8003100:	4619      	mov	r1, r3
 8003102:	462b      	mov	r3, r5
 8003104:	bfbb      	ittet	lt
 8003106:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800310a:	461d      	movlt	r5, r3
 800310c:	2300      	movge	r3, #0
 800310e:	232d      	movlt	r3, #45	; 0x2d
 8003110:	700b      	strb	r3, [r1, #0]
 8003112:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003114:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8003118:	4691      	mov	r9, r2
 800311a:	f023 0820 	bic.w	r8, r3, #32
 800311e:	bfbc      	itt	lt
 8003120:	4622      	movlt	r2, r4
 8003122:	4614      	movlt	r4, r2
 8003124:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8003128:	d005      	beq.n	8003136 <__cvt+0x42>
 800312a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800312e:	d100      	bne.n	8003132 <__cvt+0x3e>
 8003130:	3601      	adds	r6, #1
 8003132:	2102      	movs	r1, #2
 8003134:	e000      	b.n	8003138 <__cvt+0x44>
 8003136:	2103      	movs	r1, #3
 8003138:	ab03      	add	r3, sp, #12
 800313a:	9301      	str	r3, [sp, #4]
 800313c:	ab02      	add	r3, sp, #8
 800313e:	9300      	str	r3, [sp, #0]
 8003140:	ec45 4b10 	vmov	d0, r4, r5
 8003144:	4653      	mov	r3, sl
 8003146:	4632      	mov	r2, r6
 8003148:	f000 fcfa 	bl	8003b40 <_dtoa_r>
 800314c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8003150:	4607      	mov	r7, r0
 8003152:	d102      	bne.n	800315a <__cvt+0x66>
 8003154:	f019 0f01 	tst.w	r9, #1
 8003158:	d022      	beq.n	80031a0 <__cvt+0xac>
 800315a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800315e:	eb07 0906 	add.w	r9, r7, r6
 8003162:	d110      	bne.n	8003186 <__cvt+0x92>
 8003164:	783b      	ldrb	r3, [r7, #0]
 8003166:	2b30      	cmp	r3, #48	; 0x30
 8003168:	d10a      	bne.n	8003180 <__cvt+0x8c>
 800316a:	2200      	movs	r2, #0
 800316c:	2300      	movs	r3, #0
 800316e:	4620      	mov	r0, r4
 8003170:	4629      	mov	r1, r5
 8003172:	f7fd fcb1 	bl	8000ad8 <__aeabi_dcmpeq>
 8003176:	b918      	cbnz	r0, 8003180 <__cvt+0x8c>
 8003178:	f1c6 0601 	rsb	r6, r6, #1
 800317c:	f8ca 6000 	str.w	r6, [sl]
 8003180:	f8da 3000 	ldr.w	r3, [sl]
 8003184:	4499      	add	r9, r3
 8003186:	2200      	movs	r2, #0
 8003188:	2300      	movs	r3, #0
 800318a:	4620      	mov	r0, r4
 800318c:	4629      	mov	r1, r5
 800318e:	f7fd fca3 	bl	8000ad8 <__aeabi_dcmpeq>
 8003192:	b108      	cbz	r0, 8003198 <__cvt+0xa4>
 8003194:	f8cd 900c 	str.w	r9, [sp, #12]
 8003198:	2230      	movs	r2, #48	; 0x30
 800319a:	9b03      	ldr	r3, [sp, #12]
 800319c:	454b      	cmp	r3, r9
 800319e:	d307      	bcc.n	80031b0 <__cvt+0xbc>
 80031a0:	9b03      	ldr	r3, [sp, #12]
 80031a2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80031a4:	1bdb      	subs	r3, r3, r7
 80031a6:	4638      	mov	r0, r7
 80031a8:	6013      	str	r3, [r2, #0]
 80031aa:	b004      	add	sp, #16
 80031ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80031b0:	1c59      	adds	r1, r3, #1
 80031b2:	9103      	str	r1, [sp, #12]
 80031b4:	701a      	strb	r2, [r3, #0]
 80031b6:	e7f0      	b.n	800319a <__cvt+0xa6>

080031b8 <__exponent>:
 80031b8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80031ba:	4603      	mov	r3, r0
 80031bc:	2900      	cmp	r1, #0
 80031be:	bfb8      	it	lt
 80031c0:	4249      	neglt	r1, r1
 80031c2:	f803 2b02 	strb.w	r2, [r3], #2
 80031c6:	bfb4      	ite	lt
 80031c8:	222d      	movlt	r2, #45	; 0x2d
 80031ca:	222b      	movge	r2, #43	; 0x2b
 80031cc:	2909      	cmp	r1, #9
 80031ce:	7042      	strb	r2, [r0, #1]
 80031d0:	dd2a      	ble.n	8003228 <__exponent+0x70>
 80031d2:	f10d 0407 	add.w	r4, sp, #7
 80031d6:	46a4      	mov	ip, r4
 80031d8:	270a      	movs	r7, #10
 80031da:	46a6      	mov	lr, r4
 80031dc:	460a      	mov	r2, r1
 80031de:	fb91 f6f7 	sdiv	r6, r1, r7
 80031e2:	fb07 1516 	mls	r5, r7, r6, r1
 80031e6:	3530      	adds	r5, #48	; 0x30
 80031e8:	2a63      	cmp	r2, #99	; 0x63
 80031ea:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 80031ee:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80031f2:	4631      	mov	r1, r6
 80031f4:	dcf1      	bgt.n	80031da <__exponent+0x22>
 80031f6:	3130      	adds	r1, #48	; 0x30
 80031f8:	f1ae 0502 	sub.w	r5, lr, #2
 80031fc:	f804 1c01 	strb.w	r1, [r4, #-1]
 8003200:	1c44      	adds	r4, r0, #1
 8003202:	4629      	mov	r1, r5
 8003204:	4561      	cmp	r1, ip
 8003206:	d30a      	bcc.n	800321e <__exponent+0x66>
 8003208:	f10d 0209 	add.w	r2, sp, #9
 800320c:	eba2 020e 	sub.w	r2, r2, lr
 8003210:	4565      	cmp	r5, ip
 8003212:	bf88      	it	hi
 8003214:	2200      	movhi	r2, #0
 8003216:	4413      	add	r3, r2
 8003218:	1a18      	subs	r0, r3, r0
 800321a:	b003      	add	sp, #12
 800321c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800321e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003222:	f804 2f01 	strb.w	r2, [r4, #1]!
 8003226:	e7ed      	b.n	8003204 <__exponent+0x4c>
 8003228:	2330      	movs	r3, #48	; 0x30
 800322a:	3130      	adds	r1, #48	; 0x30
 800322c:	7083      	strb	r3, [r0, #2]
 800322e:	70c1      	strb	r1, [r0, #3]
 8003230:	1d03      	adds	r3, r0, #4
 8003232:	e7f1      	b.n	8003218 <__exponent+0x60>

08003234 <_printf_float>:
 8003234:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003238:	ed2d 8b02 	vpush	{d8}
 800323c:	b08d      	sub	sp, #52	; 0x34
 800323e:	460c      	mov	r4, r1
 8003240:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8003244:	4616      	mov	r6, r2
 8003246:	461f      	mov	r7, r3
 8003248:	4605      	mov	r5, r0
 800324a:	f001 fb5b 	bl	8004904 <_localeconv_r>
 800324e:	f8d0 a000 	ldr.w	sl, [r0]
 8003252:	4650      	mov	r0, sl
 8003254:	f7fc ffc4 	bl	80001e0 <strlen>
 8003258:	2300      	movs	r3, #0
 800325a:	930a      	str	r3, [sp, #40]	; 0x28
 800325c:	6823      	ldr	r3, [r4, #0]
 800325e:	9305      	str	r3, [sp, #20]
 8003260:	f8d8 3000 	ldr.w	r3, [r8]
 8003264:	f894 b018 	ldrb.w	fp, [r4, #24]
 8003268:	3307      	adds	r3, #7
 800326a:	f023 0307 	bic.w	r3, r3, #7
 800326e:	f103 0208 	add.w	r2, r3, #8
 8003272:	f8c8 2000 	str.w	r2, [r8]
 8003276:	e9d3 2300 	ldrd	r2, r3, [r3]
 800327a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800327e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8003282:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8003286:	9307      	str	r3, [sp, #28]
 8003288:	f8cd 8018 	str.w	r8, [sp, #24]
 800328c:	ee08 0a10 	vmov	s16, r0
 8003290:	4b9f      	ldr	r3, [pc, #636]	; (8003510 <_printf_float+0x2dc>)
 8003292:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003296:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800329a:	f7fd fc4f 	bl	8000b3c <__aeabi_dcmpun>
 800329e:	bb88      	cbnz	r0, 8003304 <_printf_float+0xd0>
 80032a0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80032a4:	4b9a      	ldr	r3, [pc, #616]	; (8003510 <_printf_float+0x2dc>)
 80032a6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80032aa:	f7fd fc29 	bl	8000b00 <__aeabi_dcmple>
 80032ae:	bb48      	cbnz	r0, 8003304 <_printf_float+0xd0>
 80032b0:	2200      	movs	r2, #0
 80032b2:	2300      	movs	r3, #0
 80032b4:	4640      	mov	r0, r8
 80032b6:	4649      	mov	r1, r9
 80032b8:	f7fd fc18 	bl	8000aec <__aeabi_dcmplt>
 80032bc:	b110      	cbz	r0, 80032c4 <_printf_float+0x90>
 80032be:	232d      	movs	r3, #45	; 0x2d
 80032c0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80032c4:	4b93      	ldr	r3, [pc, #588]	; (8003514 <_printf_float+0x2e0>)
 80032c6:	4894      	ldr	r0, [pc, #592]	; (8003518 <_printf_float+0x2e4>)
 80032c8:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80032cc:	bf94      	ite	ls
 80032ce:	4698      	movls	r8, r3
 80032d0:	4680      	movhi	r8, r0
 80032d2:	2303      	movs	r3, #3
 80032d4:	6123      	str	r3, [r4, #16]
 80032d6:	9b05      	ldr	r3, [sp, #20]
 80032d8:	f023 0204 	bic.w	r2, r3, #4
 80032dc:	6022      	str	r2, [r4, #0]
 80032de:	f04f 0900 	mov.w	r9, #0
 80032e2:	9700      	str	r7, [sp, #0]
 80032e4:	4633      	mov	r3, r6
 80032e6:	aa0b      	add	r2, sp, #44	; 0x2c
 80032e8:	4621      	mov	r1, r4
 80032ea:	4628      	mov	r0, r5
 80032ec:	f000 f9d8 	bl	80036a0 <_printf_common>
 80032f0:	3001      	adds	r0, #1
 80032f2:	f040 8090 	bne.w	8003416 <_printf_float+0x1e2>
 80032f6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80032fa:	b00d      	add	sp, #52	; 0x34
 80032fc:	ecbd 8b02 	vpop	{d8}
 8003300:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003304:	4642      	mov	r2, r8
 8003306:	464b      	mov	r3, r9
 8003308:	4640      	mov	r0, r8
 800330a:	4649      	mov	r1, r9
 800330c:	f7fd fc16 	bl	8000b3c <__aeabi_dcmpun>
 8003310:	b140      	cbz	r0, 8003324 <_printf_float+0xf0>
 8003312:	464b      	mov	r3, r9
 8003314:	2b00      	cmp	r3, #0
 8003316:	bfbc      	itt	lt
 8003318:	232d      	movlt	r3, #45	; 0x2d
 800331a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800331e:	487f      	ldr	r0, [pc, #508]	; (800351c <_printf_float+0x2e8>)
 8003320:	4b7f      	ldr	r3, [pc, #508]	; (8003520 <_printf_float+0x2ec>)
 8003322:	e7d1      	b.n	80032c8 <_printf_float+0x94>
 8003324:	6863      	ldr	r3, [r4, #4]
 8003326:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800332a:	9206      	str	r2, [sp, #24]
 800332c:	1c5a      	adds	r2, r3, #1
 800332e:	d13f      	bne.n	80033b0 <_printf_float+0x17c>
 8003330:	2306      	movs	r3, #6
 8003332:	6063      	str	r3, [r4, #4]
 8003334:	9b05      	ldr	r3, [sp, #20]
 8003336:	6861      	ldr	r1, [r4, #4]
 8003338:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800333c:	2300      	movs	r3, #0
 800333e:	9303      	str	r3, [sp, #12]
 8003340:	ab0a      	add	r3, sp, #40	; 0x28
 8003342:	e9cd b301 	strd	fp, r3, [sp, #4]
 8003346:	ab09      	add	r3, sp, #36	; 0x24
 8003348:	ec49 8b10 	vmov	d0, r8, r9
 800334c:	9300      	str	r3, [sp, #0]
 800334e:	6022      	str	r2, [r4, #0]
 8003350:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8003354:	4628      	mov	r0, r5
 8003356:	f7ff fecd 	bl	80030f4 <__cvt>
 800335a:	9b06      	ldr	r3, [sp, #24]
 800335c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800335e:	2b47      	cmp	r3, #71	; 0x47
 8003360:	4680      	mov	r8, r0
 8003362:	d108      	bne.n	8003376 <_printf_float+0x142>
 8003364:	1cc8      	adds	r0, r1, #3
 8003366:	db02      	blt.n	800336e <_printf_float+0x13a>
 8003368:	6863      	ldr	r3, [r4, #4]
 800336a:	4299      	cmp	r1, r3
 800336c:	dd41      	ble.n	80033f2 <_printf_float+0x1be>
 800336e:	f1ab 0b02 	sub.w	fp, fp, #2
 8003372:	fa5f fb8b 	uxtb.w	fp, fp
 8003376:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800337a:	d820      	bhi.n	80033be <_printf_float+0x18a>
 800337c:	3901      	subs	r1, #1
 800337e:	465a      	mov	r2, fp
 8003380:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8003384:	9109      	str	r1, [sp, #36]	; 0x24
 8003386:	f7ff ff17 	bl	80031b8 <__exponent>
 800338a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800338c:	1813      	adds	r3, r2, r0
 800338e:	2a01      	cmp	r2, #1
 8003390:	4681      	mov	r9, r0
 8003392:	6123      	str	r3, [r4, #16]
 8003394:	dc02      	bgt.n	800339c <_printf_float+0x168>
 8003396:	6822      	ldr	r2, [r4, #0]
 8003398:	07d2      	lsls	r2, r2, #31
 800339a:	d501      	bpl.n	80033a0 <_printf_float+0x16c>
 800339c:	3301      	adds	r3, #1
 800339e:	6123      	str	r3, [r4, #16]
 80033a0:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d09c      	beq.n	80032e2 <_printf_float+0xae>
 80033a8:	232d      	movs	r3, #45	; 0x2d
 80033aa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80033ae:	e798      	b.n	80032e2 <_printf_float+0xae>
 80033b0:	9a06      	ldr	r2, [sp, #24]
 80033b2:	2a47      	cmp	r2, #71	; 0x47
 80033b4:	d1be      	bne.n	8003334 <_printf_float+0x100>
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d1bc      	bne.n	8003334 <_printf_float+0x100>
 80033ba:	2301      	movs	r3, #1
 80033bc:	e7b9      	b.n	8003332 <_printf_float+0xfe>
 80033be:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80033c2:	d118      	bne.n	80033f6 <_printf_float+0x1c2>
 80033c4:	2900      	cmp	r1, #0
 80033c6:	6863      	ldr	r3, [r4, #4]
 80033c8:	dd0b      	ble.n	80033e2 <_printf_float+0x1ae>
 80033ca:	6121      	str	r1, [r4, #16]
 80033cc:	b913      	cbnz	r3, 80033d4 <_printf_float+0x1a0>
 80033ce:	6822      	ldr	r2, [r4, #0]
 80033d0:	07d0      	lsls	r0, r2, #31
 80033d2:	d502      	bpl.n	80033da <_printf_float+0x1a6>
 80033d4:	3301      	adds	r3, #1
 80033d6:	440b      	add	r3, r1
 80033d8:	6123      	str	r3, [r4, #16]
 80033da:	65a1      	str	r1, [r4, #88]	; 0x58
 80033dc:	f04f 0900 	mov.w	r9, #0
 80033e0:	e7de      	b.n	80033a0 <_printf_float+0x16c>
 80033e2:	b913      	cbnz	r3, 80033ea <_printf_float+0x1b6>
 80033e4:	6822      	ldr	r2, [r4, #0]
 80033e6:	07d2      	lsls	r2, r2, #31
 80033e8:	d501      	bpl.n	80033ee <_printf_float+0x1ba>
 80033ea:	3302      	adds	r3, #2
 80033ec:	e7f4      	b.n	80033d8 <_printf_float+0x1a4>
 80033ee:	2301      	movs	r3, #1
 80033f0:	e7f2      	b.n	80033d8 <_printf_float+0x1a4>
 80033f2:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80033f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80033f8:	4299      	cmp	r1, r3
 80033fa:	db05      	blt.n	8003408 <_printf_float+0x1d4>
 80033fc:	6823      	ldr	r3, [r4, #0]
 80033fe:	6121      	str	r1, [r4, #16]
 8003400:	07d8      	lsls	r0, r3, #31
 8003402:	d5ea      	bpl.n	80033da <_printf_float+0x1a6>
 8003404:	1c4b      	adds	r3, r1, #1
 8003406:	e7e7      	b.n	80033d8 <_printf_float+0x1a4>
 8003408:	2900      	cmp	r1, #0
 800340a:	bfd4      	ite	le
 800340c:	f1c1 0202 	rsble	r2, r1, #2
 8003410:	2201      	movgt	r2, #1
 8003412:	4413      	add	r3, r2
 8003414:	e7e0      	b.n	80033d8 <_printf_float+0x1a4>
 8003416:	6823      	ldr	r3, [r4, #0]
 8003418:	055a      	lsls	r2, r3, #21
 800341a:	d407      	bmi.n	800342c <_printf_float+0x1f8>
 800341c:	6923      	ldr	r3, [r4, #16]
 800341e:	4642      	mov	r2, r8
 8003420:	4631      	mov	r1, r6
 8003422:	4628      	mov	r0, r5
 8003424:	47b8      	blx	r7
 8003426:	3001      	adds	r0, #1
 8003428:	d12c      	bne.n	8003484 <_printf_float+0x250>
 800342a:	e764      	b.n	80032f6 <_printf_float+0xc2>
 800342c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8003430:	f240 80e0 	bls.w	80035f4 <_printf_float+0x3c0>
 8003434:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8003438:	2200      	movs	r2, #0
 800343a:	2300      	movs	r3, #0
 800343c:	f7fd fb4c 	bl	8000ad8 <__aeabi_dcmpeq>
 8003440:	2800      	cmp	r0, #0
 8003442:	d034      	beq.n	80034ae <_printf_float+0x27a>
 8003444:	4a37      	ldr	r2, [pc, #220]	; (8003524 <_printf_float+0x2f0>)
 8003446:	2301      	movs	r3, #1
 8003448:	4631      	mov	r1, r6
 800344a:	4628      	mov	r0, r5
 800344c:	47b8      	blx	r7
 800344e:	3001      	adds	r0, #1
 8003450:	f43f af51 	beq.w	80032f6 <_printf_float+0xc2>
 8003454:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003458:	429a      	cmp	r2, r3
 800345a:	db02      	blt.n	8003462 <_printf_float+0x22e>
 800345c:	6823      	ldr	r3, [r4, #0]
 800345e:	07d8      	lsls	r0, r3, #31
 8003460:	d510      	bpl.n	8003484 <_printf_float+0x250>
 8003462:	ee18 3a10 	vmov	r3, s16
 8003466:	4652      	mov	r2, sl
 8003468:	4631      	mov	r1, r6
 800346a:	4628      	mov	r0, r5
 800346c:	47b8      	blx	r7
 800346e:	3001      	adds	r0, #1
 8003470:	f43f af41 	beq.w	80032f6 <_printf_float+0xc2>
 8003474:	f04f 0800 	mov.w	r8, #0
 8003478:	f104 091a 	add.w	r9, r4, #26
 800347c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800347e:	3b01      	subs	r3, #1
 8003480:	4543      	cmp	r3, r8
 8003482:	dc09      	bgt.n	8003498 <_printf_float+0x264>
 8003484:	6823      	ldr	r3, [r4, #0]
 8003486:	079b      	lsls	r3, r3, #30
 8003488:	f100 8105 	bmi.w	8003696 <_printf_float+0x462>
 800348c:	68e0      	ldr	r0, [r4, #12]
 800348e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003490:	4298      	cmp	r0, r3
 8003492:	bfb8      	it	lt
 8003494:	4618      	movlt	r0, r3
 8003496:	e730      	b.n	80032fa <_printf_float+0xc6>
 8003498:	2301      	movs	r3, #1
 800349a:	464a      	mov	r2, r9
 800349c:	4631      	mov	r1, r6
 800349e:	4628      	mov	r0, r5
 80034a0:	47b8      	blx	r7
 80034a2:	3001      	adds	r0, #1
 80034a4:	f43f af27 	beq.w	80032f6 <_printf_float+0xc2>
 80034a8:	f108 0801 	add.w	r8, r8, #1
 80034ac:	e7e6      	b.n	800347c <_printf_float+0x248>
 80034ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	dc39      	bgt.n	8003528 <_printf_float+0x2f4>
 80034b4:	4a1b      	ldr	r2, [pc, #108]	; (8003524 <_printf_float+0x2f0>)
 80034b6:	2301      	movs	r3, #1
 80034b8:	4631      	mov	r1, r6
 80034ba:	4628      	mov	r0, r5
 80034bc:	47b8      	blx	r7
 80034be:	3001      	adds	r0, #1
 80034c0:	f43f af19 	beq.w	80032f6 <_printf_float+0xc2>
 80034c4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80034c8:	4313      	orrs	r3, r2
 80034ca:	d102      	bne.n	80034d2 <_printf_float+0x29e>
 80034cc:	6823      	ldr	r3, [r4, #0]
 80034ce:	07d9      	lsls	r1, r3, #31
 80034d0:	d5d8      	bpl.n	8003484 <_printf_float+0x250>
 80034d2:	ee18 3a10 	vmov	r3, s16
 80034d6:	4652      	mov	r2, sl
 80034d8:	4631      	mov	r1, r6
 80034da:	4628      	mov	r0, r5
 80034dc:	47b8      	blx	r7
 80034de:	3001      	adds	r0, #1
 80034e0:	f43f af09 	beq.w	80032f6 <_printf_float+0xc2>
 80034e4:	f04f 0900 	mov.w	r9, #0
 80034e8:	f104 0a1a 	add.w	sl, r4, #26
 80034ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80034ee:	425b      	negs	r3, r3
 80034f0:	454b      	cmp	r3, r9
 80034f2:	dc01      	bgt.n	80034f8 <_printf_float+0x2c4>
 80034f4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80034f6:	e792      	b.n	800341e <_printf_float+0x1ea>
 80034f8:	2301      	movs	r3, #1
 80034fa:	4652      	mov	r2, sl
 80034fc:	4631      	mov	r1, r6
 80034fe:	4628      	mov	r0, r5
 8003500:	47b8      	blx	r7
 8003502:	3001      	adds	r0, #1
 8003504:	f43f aef7 	beq.w	80032f6 <_printf_float+0xc2>
 8003508:	f109 0901 	add.w	r9, r9, #1
 800350c:	e7ee      	b.n	80034ec <_printf_float+0x2b8>
 800350e:	bf00      	nop
 8003510:	7fefffff 	.word	0x7fefffff
 8003514:	08005c14 	.word	0x08005c14
 8003518:	08005c18 	.word	0x08005c18
 800351c:	08005c20 	.word	0x08005c20
 8003520:	08005c1c 	.word	0x08005c1c
 8003524:	08005c24 	.word	0x08005c24
 8003528:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800352a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800352c:	429a      	cmp	r2, r3
 800352e:	bfa8      	it	ge
 8003530:	461a      	movge	r2, r3
 8003532:	2a00      	cmp	r2, #0
 8003534:	4691      	mov	r9, r2
 8003536:	dc37      	bgt.n	80035a8 <_printf_float+0x374>
 8003538:	f04f 0b00 	mov.w	fp, #0
 800353c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003540:	f104 021a 	add.w	r2, r4, #26
 8003544:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003546:	9305      	str	r3, [sp, #20]
 8003548:	eba3 0309 	sub.w	r3, r3, r9
 800354c:	455b      	cmp	r3, fp
 800354e:	dc33      	bgt.n	80035b8 <_printf_float+0x384>
 8003550:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003554:	429a      	cmp	r2, r3
 8003556:	db3b      	blt.n	80035d0 <_printf_float+0x39c>
 8003558:	6823      	ldr	r3, [r4, #0]
 800355a:	07da      	lsls	r2, r3, #31
 800355c:	d438      	bmi.n	80035d0 <_printf_float+0x39c>
 800355e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003560:	9b05      	ldr	r3, [sp, #20]
 8003562:	9909      	ldr	r1, [sp, #36]	; 0x24
 8003564:	1ad3      	subs	r3, r2, r3
 8003566:	eba2 0901 	sub.w	r9, r2, r1
 800356a:	4599      	cmp	r9, r3
 800356c:	bfa8      	it	ge
 800356e:	4699      	movge	r9, r3
 8003570:	f1b9 0f00 	cmp.w	r9, #0
 8003574:	dc35      	bgt.n	80035e2 <_printf_float+0x3ae>
 8003576:	f04f 0800 	mov.w	r8, #0
 800357a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800357e:	f104 0a1a 	add.w	sl, r4, #26
 8003582:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003586:	1a9b      	subs	r3, r3, r2
 8003588:	eba3 0309 	sub.w	r3, r3, r9
 800358c:	4543      	cmp	r3, r8
 800358e:	f77f af79 	ble.w	8003484 <_printf_float+0x250>
 8003592:	2301      	movs	r3, #1
 8003594:	4652      	mov	r2, sl
 8003596:	4631      	mov	r1, r6
 8003598:	4628      	mov	r0, r5
 800359a:	47b8      	blx	r7
 800359c:	3001      	adds	r0, #1
 800359e:	f43f aeaa 	beq.w	80032f6 <_printf_float+0xc2>
 80035a2:	f108 0801 	add.w	r8, r8, #1
 80035a6:	e7ec      	b.n	8003582 <_printf_float+0x34e>
 80035a8:	4613      	mov	r3, r2
 80035aa:	4631      	mov	r1, r6
 80035ac:	4642      	mov	r2, r8
 80035ae:	4628      	mov	r0, r5
 80035b0:	47b8      	blx	r7
 80035b2:	3001      	adds	r0, #1
 80035b4:	d1c0      	bne.n	8003538 <_printf_float+0x304>
 80035b6:	e69e      	b.n	80032f6 <_printf_float+0xc2>
 80035b8:	2301      	movs	r3, #1
 80035ba:	4631      	mov	r1, r6
 80035bc:	4628      	mov	r0, r5
 80035be:	9205      	str	r2, [sp, #20]
 80035c0:	47b8      	blx	r7
 80035c2:	3001      	adds	r0, #1
 80035c4:	f43f ae97 	beq.w	80032f6 <_printf_float+0xc2>
 80035c8:	9a05      	ldr	r2, [sp, #20]
 80035ca:	f10b 0b01 	add.w	fp, fp, #1
 80035ce:	e7b9      	b.n	8003544 <_printf_float+0x310>
 80035d0:	ee18 3a10 	vmov	r3, s16
 80035d4:	4652      	mov	r2, sl
 80035d6:	4631      	mov	r1, r6
 80035d8:	4628      	mov	r0, r5
 80035da:	47b8      	blx	r7
 80035dc:	3001      	adds	r0, #1
 80035de:	d1be      	bne.n	800355e <_printf_float+0x32a>
 80035e0:	e689      	b.n	80032f6 <_printf_float+0xc2>
 80035e2:	9a05      	ldr	r2, [sp, #20]
 80035e4:	464b      	mov	r3, r9
 80035e6:	4442      	add	r2, r8
 80035e8:	4631      	mov	r1, r6
 80035ea:	4628      	mov	r0, r5
 80035ec:	47b8      	blx	r7
 80035ee:	3001      	adds	r0, #1
 80035f0:	d1c1      	bne.n	8003576 <_printf_float+0x342>
 80035f2:	e680      	b.n	80032f6 <_printf_float+0xc2>
 80035f4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80035f6:	2a01      	cmp	r2, #1
 80035f8:	dc01      	bgt.n	80035fe <_printf_float+0x3ca>
 80035fa:	07db      	lsls	r3, r3, #31
 80035fc:	d538      	bpl.n	8003670 <_printf_float+0x43c>
 80035fe:	2301      	movs	r3, #1
 8003600:	4642      	mov	r2, r8
 8003602:	4631      	mov	r1, r6
 8003604:	4628      	mov	r0, r5
 8003606:	47b8      	blx	r7
 8003608:	3001      	adds	r0, #1
 800360a:	f43f ae74 	beq.w	80032f6 <_printf_float+0xc2>
 800360e:	ee18 3a10 	vmov	r3, s16
 8003612:	4652      	mov	r2, sl
 8003614:	4631      	mov	r1, r6
 8003616:	4628      	mov	r0, r5
 8003618:	47b8      	blx	r7
 800361a:	3001      	adds	r0, #1
 800361c:	f43f ae6b 	beq.w	80032f6 <_printf_float+0xc2>
 8003620:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8003624:	2200      	movs	r2, #0
 8003626:	2300      	movs	r3, #0
 8003628:	f7fd fa56 	bl	8000ad8 <__aeabi_dcmpeq>
 800362c:	b9d8      	cbnz	r0, 8003666 <_printf_float+0x432>
 800362e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003630:	f108 0201 	add.w	r2, r8, #1
 8003634:	3b01      	subs	r3, #1
 8003636:	4631      	mov	r1, r6
 8003638:	4628      	mov	r0, r5
 800363a:	47b8      	blx	r7
 800363c:	3001      	adds	r0, #1
 800363e:	d10e      	bne.n	800365e <_printf_float+0x42a>
 8003640:	e659      	b.n	80032f6 <_printf_float+0xc2>
 8003642:	2301      	movs	r3, #1
 8003644:	4652      	mov	r2, sl
 8003646:	4631      	mov	r1, r6
 8003648:	4628      	mov	r0, r5
 800364a:	47b8      	blx	r7
 800364c:	3001      	adds	r0, #1
 800364e:	f43f ae52 	beq.w	80032f6 <_printf_float+0xc2>
 8003652:	f108 0801 	add.w	r8, r8, #1
 8003656:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003658:	3b01      	subs	r3, #1
 800365a:	4543      	cmp	r3, r8
 800365c:	dcf1      	bgt.n	8003642 <_printf_float+0x40e>
 800365e:	464b      	mov	r3, r9
 8003660:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8003664:	e6dc      	b.n	8003420 <_printf_float+0x1ec>
 8003666:	f04f 0800 	mov.w	r8, #0
 800366a:	f104 0a1a 	add.w	sl, r4, #26
 800366e:	e7f2      	b.n	8003656 <_printf_float+0x422>
 8003670:	2301      	movs	r3, #1
 8003672:	4642      	mov	r2, r8
 8003674:	e7df      	b.n	8003636 <_printf_float+0x402>
 8003676:	2301      	movs	r3, #1
 8003678:	464a      	mov	r2, r9
 800367a:	4631      	mov	r1, r6
 800367c:	4628      	mov	r0, r5
 800367e:	47b8      	blx	r7
 8003680:	3001      	adds	r0, #1
 8003682:	f43f ae38 	beq.w	80032f6 <_printf_float+0xc2>
 8003686:	f108 0801 	add.w	r8, r8, #1
 800368a:	68e3      	ldr	r3, [r4, #12]
 800368c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800368e:	1a5b      	subs	r3, r3, r1
 8003690:	4543      	cmp	r3, r8
 8003692:	dcf0      	bgt.n	8003676 <_printf_float+0x442>
 8003694:	e6fa      	b.n	800348c <_printf_float+0x258>
 8003696:	f04f 0800 	mov.w	r8, #0
 800369a:	f104 0919 	add.w	r9, r4, #25
 800369e:	e7f4      	b.n	800368a <_printf_float+0x456>

080036a0 <_printf_common>:
 80036a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80036a4:	4616      	mov	r6, r2
 80036a6:	4699      	mov	r9, r3
 80036a8:	688a      	ldr	r2, [r1, #8]
 80036aa:	690b      	ldr	r3, [r1, #16]
 80036ac:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80036b0:	4293      	cmp	r3, r2
 80036b2:	bfb8      	it	lt
 80036b4:	4613      	movlt	r3, r2
 80036b6:	6033      	str	r3, [r6, #0]
 80036b8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80036bc:	4607      	mov	r7, r0
 80036be:	460c      	mov	r4, r1
 80036c0:	b10a      	cbz	r2, 80036c6 <_printf_common+0x26>
 80036c2:	3301      	adds	r3, #1
 80036c4:	6033      	str	r3, [r6, #0]
 80036c6:	6823      	ldr	r3, [r4, #0]
 80036c8:	0699      	lsls	r1, r3, #26
 80036ca:	bf42      	ittt	mi
 80036cc:	6833      	ldrmi	r3, [r6, #0]
 80036ce:	3302      	addmi	r3, #2
 80036d0:	6033      	strmi	r3, [r6, #0]
 80036d2:	6825      	ldr	r5, [r4, #0]
 80036d4:	f015 0506 	ands.w	r5, r5, #6
 80036d8:	d106      	bne.n	80036e8 <_printf_common+0x48>
 80036da:	f104 0a19 	add.w	sl, r4, #25
 80036de:	68e3      	ldr	r3, [r4, #12]
 80036e0:	6832      	ldr	r2, [r6, #0]
 80036e2:	1a9b      	subs	r3, r3, r2
 80036e4:	42ab      	cmp	r3, r5
 80036e6:	dc26      	bgt.n	8003736 <_printf_common+0x96>
 80036e8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80036ec:	1e13      	subs	r3, r2, #0
 80036ee:	6822      	ldr	r2, [r4, #0]
 80036f0:	bf18      	it	ne
 80036f2:	2301      	movne	r3, #1
 80036f4:	0692      	lsls	r2, r2, #26
 80036f6:	d42b      	bmi.n	8003750 <_printf_common+0xb0>
 80036f8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80036fc:	4649      	mov	r1, r9
 80036fe:	4638      	mov	r0, r7
 8003700:	47c0      	blx	r8
 8003702:	3001      	adds	r0, #1
 8003704:	d01e      	beq.n	8003744 <_printf_common+0xa4>
 8003706:	6823      	ldr	r3, [r4, #0]
 8003708:	68e5      	ldr	r5, [r4, #12]
 800370a:	6832      	ldr	r2, [r6, #0]
 800370c:	f003 0306 	and.w	r3, r3, #6
 8003710:	2b04      	cmp	r3, #4
 8003712:	bf08      	it	eq
 8003714:	1aad      	subeq	r5, r5, r2
 8003716:	68a3      	ldr	r3, [r4, #8]
 8003718:	6922      	ldr	r2, [r4, #16]
 800371a:	bf0c      	ite	eq
 800371c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003720:	2500      	movne	r5, #0
 8003722:	4293      	cmp	r3, r2
 8003724:	bfc4      	itt	gt
 8003726:	1a9b      	subgt	r3, r3, r2
 8003728:	18ed      	addgt	r5, r5, r3
 800372a:	2600      	movs	r6, #0
 800372c:	341a      	adds	r4, #26
 800372e:	42b5      	cmp	r5, r6
 8003730:	d11a      	bne.n	8003768 <_printf_common+0xc8>
 8003732:	2000      	movs	r0, #0
 8003734:	e008      	b.n	8003748 <_printf_common+0xa8>
 8003736:	2301      	movs	r3, #1
 8003738:	4652      	mov	r2, sl
 800373a:	4649      	mov	r1, r9
 800373c:	4638      	mov	r0, r7
 800373e:	47c0      	blx	r8
 8003740:	3001      	adds	r0, #1
 8003742:	d103      	bne.n	800374c <_printf_common+0xac>
 8003744:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003748:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800374c:	3501      	adds	r5, #1
 800374e:	e7c6      	b.n	80036de <_printf_common+0x3e>
 8003750:	18e1      	adds	r1, r4, r3
 8003752:	1c5a      	adds	r2, r3, #1
 8003754:	2030      	movs	r0, #48	; 0x30
 8003756:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800375a:	4422      	add	r2, r4
 800375c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003760:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003764:	3302      	adds	r3, #2
 8003766:	e7c7      	b.n	80036f8 <_printf_common+0x58>
 8003768:	2301      	movs	r3, #1
 800376a:	4622      	mov	r2, r4
 800376c:	4649      	mov	r1, r9
 800376e:	4638      	mov	r0, r7
 8003770:	47c0      	blx	r8
 8003772:	3001      	adds	r0, #1
 8003774:	d0e6      	beq.n	8003744 <_printf_common+0xa4>
 8003776:	3601      	adds	r6, #1
 8003778:	e7d9      	b.n	800372e <_printf_common+0x8e>
	...

0800377c <_printf_i>:
 800377c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003780:	460c      	mov	r4, r1
 8003782:	4691      	mov	r9, r2
 8003784:	7e27      	ldrb	r7, [r4, #24]
 8003786:	990c      	ldr	r1, [sp, #48]	; 0x30
 8003788:	2f78      	cmp	r7, #120	; 0x78
 800378a:	4680      	mov	r8, r0
 800378c:	469a      	mov	sl, r3
 800378e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003792:	d807      	bhi.n	80037a4 <_printf_i+0x28>
 8003794:	2f62      	cmp	r7, #98	; 0x62
 8003796:	d80a      	bhi.n	80037ae <_printf_i+0x32>
 8003798:	2f00      	cmp	r7, #0
 800379a:	f000 80d8 	beq.w	800394e <_printf_i+0x1d2>
 800379e:	2f58      	cmp	r7, #88	; 0x58
 80037a0:	f000 80a3 	beq.w	80038ea <_printf_i+0x16e>
 80037a4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80037a8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80037ac:	e03a      	b.n	8003824 <_printf_i+0xa8>
 80037ae:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80037b2:	2b15      	cmp	r3, #21
 80037b4:	d8f6      	bhi.n	80037a4 <_printf_i+0x28>
 80037b6:	a001      	add	r0, pc, #4	; (adr r0, 80037bc <_printf_i+0x40>)
 80037b8:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80037bc:	08003815 	.word	0x08003815
 80037c0:	08003829 	.word	0x08003829
 80037c4:	080037a5 	.word	0x080037a5
 80037c8:	080037a5 	.word	0x080037a5
 80037cc:	080037a5 	.word	0x080037a5
 80037d0:	080037a5 	.word	0x080037a5
 80037d4:	08003829 	.word	0x08003829
 80037d8:	080037a5 	.word	0x080037a5
 80037dc:	080037a5 	.word	0x080037a5
 80037e0:	080037a5 	.word	0x080037a5
 80037e4:	080037a5 	.word	0x080037a5
 80037e8:	08003935 	.word	0x08003935
 80037ec:	08003859 	.word	0x08003859
 80037f0:	08003917 	.word	0x08003917
 80037f4:	080037a5 	.word	0x080037a5
 80037f8:	080037a5 	.word	0x080037a5
 80037fc:	08003957 	.word	0x08003957
 8003800:	080037a5 	.word	0x080037a5
 8003804:	08003859 	.word	0x08003859
 8003808:	080037a5 	.word	0x080037a5
 800380c:	080037a5 	.word	0x080037a5
 8003810:	0800391f 	.word	0x0800391f
 8003814:	680b      	ldr	r3, [r1, #0]
 8003816:	1d1a      	adds	r2, r3, #4
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	600a      	str	r2, [r1, #0]
 800381c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003820:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003824:	2301      	movs	r3, #1
 8003826:	e0a3      	b.n	8003970 <_printf_i+0x1f4>
 8003828:	6825      	ldr	r5, [r4, #0]
 800382a:	6808      	ldr	r0, [r1, #0]
 800382c:	062e      	lsls	r6, r5, #24
 800382e:	f100 0304 	add.w	r3, r0, #4
 8003832:	d50a      	bpl.n	800384a <_printf_i+0xce>
 8003834:	6805      	ldr	r5, [r0, #0]
 8003836:	600b      	str	r3, [r1, #0]
 8003838:	2d00      	cmp	r5, #0
 800383a:	da03      	bge.n	8003844 <_printf_i+0xc8>
 800383c:	232d      	movs	r3, #45	; 0x2d
 800383e:	426d      	negs	r5, r5
 8003840:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003844:	485e      	ldr	r0, [pc, #376]	; (80039c0 <_printf_i+0x244>)
 8003846:	230a      	movs	r3, #10
 8003848:	e019      	b.n	800387e <_printf_i+0x102>
 800384a:	f015 0f40 	tst.w	r5, #64	; 0x40
 800384e:	6805      	ldr	r5, [r0, #0]
 8003850:	600b      	str	r3, [r1, #0]
 8003852:	bf18      	it	ne
 8003854:	b22d      	sxthne	r5, r5
 8003856:	e7ef      	b.n	8003838 <_printf_i+0xbc>
 8003858:	680b      	ldr	r3, [r1, #0]
 800385a:	6825      	ldr	r5, [r4, #0]
 800385c:	1d18      	adds	r0, r3, #4
 800385e:	6008      	str	r0, [r1, #0]
 8003860:	0628      	lsls	r0, r5, #24
 8003862:	d501      	bpl.n	8003868 <_printf_i+0xec>
 8003864:	681d      	ldr	r5, [r3, #0]
 8003866:	e002      	b.n	800386e <_printf_i+0xf2>
 8003868:	0669      	lsls	r1, r5, #25
 800386a:	d5fb      	bpl.n	8003864 <_printf_i+0xe8>
 800386c:	881d      	ldrh	r5, [r3, #0]
 800386e:	4854      	ldr	r0, [pc, #336]	; (80039c0 <_printf_i+0x244>)
 8003870:	2f6f      	cmp	r7, #111	; 0x6f
 8003872:	bf0c      	ite	eq
 8003874:	2308      	moveq	r3, #8
 8003876:	230a      	movne	r3, #10
 8003878:	2100      	movs	r1, #0
 800387a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800387e:	6866      	ldr	r6, [r4, #4]
 8003880:	60a6      	str	r6, [r4, #8]
 8003882:	2e00      	cmp	r6, #0
 8003884:	bfa2      	ittt	ge
 8003886:	6821      	ldrge	r1, [r4, #0]
 8003888:	f021 0104 	bicge.w	r1, r1, #4
 800388c:	6021      	strge	r1, [r4, #0]
 800388e:	b90d      	cbnz	r5, 8003894 <_printf_i+0x118>
 8003890:	2e00      	cmp	r6, #0
 8003892:	d04d      	beq.n	8003930 <_printf_i+0x1b4>
 8003894:	4616      	mov	r6, r2
 8003896:	fbb5 f1f3 	udiv	r1, r5, r3
 800389a:	fb03 5711 	mls	r7, r3, r1, r5
 800389e:	5dc7      	ldrb	r7, [r0, r7]
 80038a0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80038a4:	462f      	mov	r7, r5
 80038a6:	42bb      	cmp	r3, r7
 80038a8:	460d      	mov	r5, r1
 80038aa:	d9f4      	bls.n	8003896 <_printf_i+0x11a>
 80038ac:	2b08      	cmp	r3, #8
 80038ae:	d10b      	bne.n	80038c8 <_printf_i+0x14c>
 80038b0:	6823      	ldr	r3, [r4, #0]
 80038b2:	07df      	lsls	r7, r3, #31
 80038b4:	d508      	bpl.n	80038c8 <_printf_i+0x14c>
 80038b6:	6923      	ldr	r3, [r4, #16]
 80038b8:	6861      	ldr	r1, [r4, #4]
 80038ba:	4299      	cmp	r1, r3
 80038bc:	bfde      	ittt	le
 80038be:	2330      	movle	r3, #48	; 0x30
 80038c0:	f806 3c01 	strble.w	r3, [r6, #-1]
 80038c4:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 80038c8:	1b92      	subs	r2, r2, r6
 80038ca:	6122      	str	r2, [r4, #16]
 80038cc:	f8cd a000 	str.w	sl, [sp]
 80038d0:	464b      	mov	r3, r9
 80038d2:	aa03      	add	r2, sp, #12
 80038d4:	4621      	mov	r1, r4
 80038d6:	4640      	mov	r0, r8
 80038d8:	f7ff fee2 	bl	80036a0 <_printf_common>
 80038dc:	3001      	adds	r0, #1
 80038de:	d14c      	bne.n	800397a <_printf_i+0x1fe>
 80038e0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80038e4:	b004      	add	sp, #16
 80038e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80038ea:	4835      	ldr	r0, [pc, #212]	; (80039c0 <_printf_i+0x244>)
 80038ec:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80038f0:	6823      	ldr	r3, [r4, #0]
 80038f2:	680e      	ldr	r6, [r1, #0]
 80038f4:	061f      	lsls	r7, r3, #24
 80038f6:	f856 5b04 	ldr.w	r5, [r6], #4
 80038fa:	600e      	str	r6, [r1, #0]
 80038fc:	d514      	bpl.n	8003928 <_printf_i+0x1ac>
 80038fe:	07d9      	lsls	r1, r3, #31
 8003900:	bf44      	itt	mi
 8003902:	f043 0320 	orrmi.w	r3, r3, #32
 8003906:	6023      	strmi	r3, [r4, #0]
 8003908:	b91d      	cbnz	r5, 8003912 <_printf_i+0x196>
 800390a:	6823      	ldr	r3, [r4, #0]
 800390c:	f023 0320 	bic.w	r3, r3, #32
 8003910:	6023      	str	r3, [r4, #0]
 8003912:	2310      	movs	r3, #16
 8003914:	e7b0      	b.n	8003878 <_printf_i+0xfc>
 8003916:	6823      	ldr	r3, [r4, #0]
 8003918:	f043 0320 	orr.w	r3, r3, #32
 800391c:	6023      	str	r3, [r4, #0]
 800391e:	2378      	movs	r3, #120	; 0x78
 8003920:	4828      	ldr	r0, [pc, #160]	; (80039c4 <_printf_i+0x248>)
 8003922:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003926:	e7e3      	b.n	80038f0 <_printf_i+0x174>
 8003928:	065e      	lsls	r6, r3, #25
 800392a:	bf48      	it	mi
 800392c:	b2ad      	uxthmi	r5, r5
 800392e:	e7e6      	b.n	80038fe <_printf_i+0x182>
 8003930:	4616      	mov	r6, r2
 8003932:	e7bb      	b.n	80038ac <_printf_i+0x130>
 8003934:	680b      	ldr	r3, [r1, #0]
 8003936:	6826      	ldr	r6, [r4, #0]
 8003938:	6960      	ldr	r0, [r4, #20]
 800393a:	1d1d      	adds	r5, r3, #4
 800393c:	600d      	str	r5, [r1, #0]
 800393e:	0635      	lsls	r5, r6, #24
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	d501      	bpl.n	8003948 <_printf_i+0x1cc>
 8003944:	6018      	str	r0, [r3, #0]
 8003946:	e002      	b.n	800394e <_printf_i+0x1d2>
 8003948:	0671      	lsls	r1, r6, #25
 800394a:	d5fb      	bpl.n	8003944 <_printf_i+0x1c8>
 800394c:	8018      	strh	r0, [r3, #0]
 800394e:	2300      	movs	r3, #0
 8003950:	6123      	str	r3, [r4, #16]
 8003952:	4616      	mov	r6, r2
 8003954:	e7ba      	b.n	80038cc <_printf_i+0x150>
 8003956:	680b      	ldr	r3, [r1, #0]
 8003958:	1d1a      	adds	r2, r3, #4
 800395a:	600a      	str	r2, [r1, #0]
 800395c:	681e      	ldr	r6, [r3, #0]
 800395e:	6862      	ldr	r2, [r4, #4]
 8003960:	2100      	movs	r1, #0
 8003962:	4630      	mov	r0, r6
 8003964:	f7fc fc44 	bl	80001f0 <memchr>
 8003968:	b108      	cbz	r0, 800396e <_printf_i+0x1f2>
 800396a:	1b80      	subs	r0, r0, r6
 800396c:	6060      	str	r0, [r4, #4]
 800396e:	6863      	ldr	r3, [r4, #4]
 8003970:	6123      	str	r3, [r4, #16]
 8003972:	2300      	movs	r3, #0
 8003974:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003978:	e7a8      	b.n	80038cc <_printf_i+0x150>
 800397a:	6923      	ldr	r3, [r4, #16]
 800397c:	4632      	mov	r2, r6
 800397e:	4649      	mov	r1, r9
 8003980:	4640      	mov	r0, r8
 8003982:	47d0      	blx	sl
 8003984:	3001      	adds	r0, #1
 8003986:	d0ab      	beq.n	80038e0 <_printf_i+0x164>
 8003988:	6823      	ldr	r3, [r4, #0]
 800398a:	079b      	lsls	r3, r3, #30
 800398c:	d413      	bmi.n	80039b6 <_printf_i+0x23a>
 800398e:	68e0      	ldr	r0, [r4, #12]
 8003990:	9b03      	ldr	r3, [sp, #12]
 8003992:	4298      	cmp	r0, r3
 8003994:	bfb8      	it	lt
 8003996:	4618      	movlt	r0, r3
 8003998:	e7a4      	b.n	80038e4 <_printf_i+0x168>
 800399a:	2301      	movs	r3, #1
 800399c:	4632      	mov	r2, r6
 800399e:	4649      	mov	r1, r9
 80039a0:	4640      	mov	r0, r8
 80039a2:	47d0      	blx	sl
 80039a4:	3001      	adds	r0, #1
 80039a6:	d09b      	beq.n	80038e0 <_printf_i+0x164>
 80039a8:	3501      	adds	r5, #1
 80039aa:	68e3      	ldr	r3, [r4, #12]
 80039ac:	9903      	ldr	r1, [sp, #12]
 80039ae:	1a5b      	subs	r3, r3, r1
 80039b0:	42ab      	cmp	r3, r5
 80039b2:	dcf2      	bgt.n	800399a <_printf_i+0x21e>
 80039b4:	e7eb      	b.n	800398e <_printf_i+0x212>
 80039b6:	2500      	movs	r5, #0
 80039b8:	f104 0619 	add.w	r6, r4, #25
 80039bc:	e7f5      	b.n	80039aa <_printf_i+0x22e>
 80039be:	bf00      	nop
 80039c0:	08005c26 	.word	0x08005c26
 80039c4:	08005c37 	.word	0x08005c37

080039c8 <iprintf>:
 80039c8:	b40f      	push	{r0, r1, r2, r3}
 80039ca:	4b0a      	ldr	r3, [pc, #40]	; (80039f4 <iprintf+0x2c>)
 80039cc:	b513      	push	{r0, r1, r4, lr}
 80039ce:	681c      	ldr	r4, [r3, #0]
 80039d0:	b124      	cbz	r4, 80039dc <iprintf+0x14>
 80039d2:	69a3      	ldr	r3, [r4, #24]
 80039d4:	b913      	cbnz	r3, 80039dc <iprintf+0x14>
 80039d6:	4620      	mov	r0, r4
 80039d8:	f000 fef6 	bl	80047c8 <__sinit>
 80039dc:	ab05      	add	r3, sp, #20
 80039de:	9a04      	ldr	r2, [sp, #16]
 80039e0:	68a1      	ldr	r1, [r4, #8]
 80039e2:	9301      	str	r3, [sp, #4]
 80039e4:	4620      	mov	r0, r4
 80039e6:	f001 fc0d 	bl	8005204 <_vfiprintf_r>
 80039ea:	b002      	add	sp, #8
 80039ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80039f0:	b004      	add	sp, #16
 80039f2:	4770      	bx	lr
 80039f4:	2000006c 	.word	0x2000006c

080039f8 <putchar>:
 80039f8:	4b09      	ldr	r3, [pc, #36]	; (8003a20 <putchar+0x28>)
 80039fa:	b513      	push	{r0, r1, r4, lr}
 80039fc:	681c      	ldr	r4, [r3, #0]
 80039fe:	4601      	mov	r1, r0
 8003a00:	b134      	cbz	r4, 8003a10 <putchar+0x18>
 8003a02:	69a3      	ldr	r3, [r4, #24]
 8003a04:	b923      	cbnz	r3, 8003a10 <putchar+0x18>
 8003a06:	9001      	str	r0, [sp, #4]
 8003a08:	4620      	mov	r0, r4
 8003a0a:	f000 fedd 	bl	80047c8 <__sinit>
 8003a0e:	9901      	ldr	r1, [sp, #4]
 8003a10:	68a2      	ldr	r2, [r4, #8]
 8003a12:	4620      	mov	r0, r4
 8003a14:	b002      	add	sp, #8
 8003a16:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003a1a:	f001 bd23 	b.w	8005464 <_putc_r>
 8003a1e:	bf00      	nop
 8003a20:	2000006c 	.word	0x2000006c

08003a24 <quorem>:
 8003a24:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003a28:	6903      	ldr	r3, [r0, #16]
 8003a2a:	690c      	ldr	r4, [r1, #16]
 8003a2c:	42a3      	cmp	r3, r4
 8003a2e:	4607      	mov	r7, r0
 8003a30:	f2c0 8081 	blt.w	8003b36 <quorem+0x112>
 8003a34:	3c01      	subs	r4, #1
 8003a36:	f101 0814 	add.w	r8, r1, #20
 8003a3a:	f100 0514 	add.w	r5, r0, #20
 8003a3e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8003a42:	9301      	str	r3, [sp, #4]
 8003a44:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8003a48:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8003a4c:	3301      	adds	r3, #1
 8003a4e:	429a      	cmp	r2, r3
 8003a50:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8003a54:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8003a58:	fbb2 f6f3 	udiv	r6, r2, r3
 8003a5c:	d331      	bcc.n	8003ac2 <quorem+0x9e>
 8003a5e:	f04f 0e00 	mov.w	lr, #0
 8003a62:	4640      	mov	r0, r8
 8003a64:	46ac      	mov	ip, r5
 8003a66:	46f2      	mov	sl, lr
 8003a68:	f850 2b04 	ldr.w	r2, [r0], #4
 8003a6c:	b293      	uxth	r3, r2
 8003a6e:	fb06 e303 	mla	r3, r6, r3, lr
 8003a72:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8003a76:	b29b      	uxth	r3, r3
 8003a78:	ebaa 0303 	sub.w	r3, sl, r3
 8003a7c:	0c12      	lsrs	r2, r2, #16
 8003a7e:	f8dc a000 	ldr.w	sl, [ip]
 8003a82:	fb06 e202 	mla	r2, r6, r2, lr
 8003a86:	fa13 f38a 	uxtah	r3, r3, sl
 8003a8a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8003a8e:	fa1f fa82 	uxth.w	sl, r2
 8003a92:	f8dc 2000 	ldr.w	r2, [ip]
 8003a96:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8003a9a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8003a9e:	b29b      	uxth	r3, r3
 8003aa0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8003aa4:	4581      	cmp	r9, r0
 8003aa6:	f84c 3b04 	str.w	r3, [ip], #4
 8003aaa:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8003aae:	d2db      	bcs.n	8003a68 <quorem+0x44>
 8003ab0:	f855 300b 	ldr.w	r3, [r5, fp]
 8003ab4:	b92b      	cbnz	r3, 8003ac2 <quorem+0x9e>
 8003ab6:	9b01      	ldr	r3, [sp, #4]
 8003ab8:	3b04      	subs	r3, #4
 8003aba:	429d      	cmp	r5, r3
 8003abc:	461a      	mov	r2, r3
 8003abe:	d32e      	bcc.n	8003b1e <quorem+0xfa>
 8003ac0:	613c      	str	r4, [r7, #16]
 8003ac2:	4638      	mov	r0, r7
 8003ac4:	f001 f9ba 	bl	8004e3c <__mcmp>
 8003ac8:	2800      	cmp	r0, #0
 8003aca:	db24      	blt.n	8003b16 <quorem+0xf2>
 8003acc:	3601      	adds	r6, #1
 8003ace:	4628      	mov	r0, r5
 8003ad0:	f04f 0c00 	mov.w	ip, #0
 8003ad4:	f858 2b04 	ldr.w	r2, [r8], #4
 8003ad8:	f8d0 e000 	ldr.w	lr, [r0]
 8003adc:	b293      	uxth	r3, r2
 8003ade:	ebac 0303 	sub.w	r3, ip, r3
 8003ae2:	0c12      	lsrs	r2, r2, #16
 8003ae4:	fa13 f38e 	uxtah	r3, r3, lr
 8003ae8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8003aec:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8003af0:	b29b      	uxth	r3, r3
 8003af2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8003af6:	45c1      	cmp	r9, r8
 8003af8:	f840 3b04 	str.w	r3, [r0], #4
 8003afc:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8003b00:	d2e8      	bcs.n	8003ad4 <quorem+0xb0>
 8003b02:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8003b06:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8003b0a:	b922      	cbnz	r2, 8003b16 <quorem+0xf2>
 8003b0c:	3b04      	subs	r3, #4
 8003b0e:	429d      	cmp	r5, r3
 8003b10:	461a      	mov	r2, r3
 8003b12:	d30a      	bcc.n	8003b2a <quorem+0x106>
 8003b14:	613c      	str	r4, [r7, #16]
 8003b16:	4630      	mov	r0, r6
 8003b18:	b003      	add	sp, #12
 8003b1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003b1e:	6812      	ldr	r2, [r2, #0]
 8003b20:	3b04      	subs	r3, #4
 8003b22:	2a00      	cmp	r2, #0
 8003b24:	d1cc      	bne.n	8003ac0 <quorem+0x9c>
 8003b26:	3c01      	subs	r4, #1
 8003b28:	e7c7      	b.n	8003aba <quorem+0x96>
 8003b2a:	6812      	ldr	r2, [r2, #0]
 8003b2c:	3b04      	subs	r3, #4
 8003b2e:	2a00      	cmp	r2, #0
 8003b30:	d1f0      	bne.n	8003b14 <quorem+0xf0>
 8003b32:	3c01      	subs	r4, #1
 8003b34:	e7eb      	b.n	8003b0e <quorem+0xea>
 8003b36:	2000      	movs	r0, #0
 8003b38:	e7ee      	b.n	8003b18 <quorem+0xf4>
 8003b3a:	0000      	movs	r0, r0
 8003b3c:	0000      	movs	r0, r0
	...

08003b40 <_dtoa_r>:
 8003b40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003b44:	ed2d 8b02 	vpush	{d8}
 8003b48:	ec57 6b10 	vmov	r6, r7, d0
 8003b4c:	b095      	sub	sp, #84	; 0x54
 8003b4e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8003b50:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8003b54:	9105      	str	r1, [sp, #20]
 8003b56:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8003b5a:	4604      	mov	r4, r0
 8003b5c:	9209      	str	r2, [sp, #36]	; 0x24
 8003b5e:	930f      	str	r3, [sp, #60]	; 0x3c
 8003b60:	b975      	cbnz	r5, 8003b80 <_dtoa_r+0x40>
 8003b62:	2010      	movs	r0, #16
 8003b64:	f000 fed6 	bl	8004914 <malloc>
 8003b68:	4602      	mov	r2, r0
 8003b6a:	6260      	str	r0, [r4, #36]	; 0x24
 8003b6c:	b920      	cbnz	r0, 8003b78 <_dtoa_r+0x38>
 8003b6e:	4bb2      	ldr	r3, [pc, #712]	; (8003e38 <_dtoa_r+0x2f8>)
 8003b70:	21ea      	movs	r1, #234	; 0xea
 8003b72:	48b2      	ldr	r0, [pc, #712]	; (8003e3c <_dtoa_r+0x2fc>)
 8003b74:	f001 fde4 	bl	8005740 <__assert_func>
 8003b78:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8003b7c:	6005      	str	r5, [r0, #0]
 8003b7e:	60c5      	str	r5, [r0, #12]
 8003b80:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003b82:	6819      	ldr	r1, [r3, #0]
 8003b84:	b151      	cbz	r1, 8003b9c <_dtoa_r+0x5c>
 8003b86:	685a      	ldr	r2, [r3, #4]
 8003b88:	604a      	str	r2, [r1, #4]
 8003b8a:	2301      	movs	r3, #1
 8003b8c:	4093      	lsls	r3, r2
 8003b8e:	608b      	str	r3, [r1, #8]
 8003b90:	4620      	mov	r0, r4
 8003b92:	f000 ff15 	bl	80049c0 <_Bfree>
 8003b96:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003b98:	2200      	movs	r2, #0
 8003b9a:	601a      	str	r2, [r3, #0]
 8003b9c:	1e3b      	subs	r3, r7, #0
 8003b9e:	bfb9      	ittee	lt
 8003ba0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8003ba4:	9303      	strlt	r3, [sp, #12]
 8003ba6:	2300      	movge	r3, #0
 8003ba8:	f8c8 3000 	strge.w	r3, [r8]
 8003bac:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8003bb0:	4ba3      	ldr	r3, [pc, #652]	; (8003e40 <_dtoa_r+0x300>)
 8003bb2:	bfbc      	itt	lt
 8003bb4:	2201      	movlt	r2, #1
 8003bb6:	f8c8 2000 	strlt.w	r2, [r8]
 8003bba:	ea33 0309 	bics.w	r3, r3, r9
 8003bbe:	d11b      	bne.n	8003bf8 <_dtoa_r+0xb8>
 8003bc0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8003bc2:	f242 730f 	movw	r3, #9999	; 0x270f
 8003bc6:	6013      	str	r3, [r2, #0]
 8003bc8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8003bcc:	4333      	orrs	r3, r6
 8003bce:	f000 857a 	beq.w	80046c6 <_dtoa_r+0xb86>
 8003bd2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003bd4:	b963      	cbnz	r3, 8003bf0 <_dtoa_r+0xb0>
 8003bd6:	4b9b      	ldr	r3, [pc, #620]	; (8003e44 <_dtoa_r+0x304>)
 8003bd8:	e024      	b.n	8003c24 <_dtoa_r+0xe4>
 8003bda:	4b9b      	ldr	r3, [pc, #620]	; (8003e48 <_dtoa_r+0x308>)
 8003bdc:	9300      	str	r3, [sp, #0]
 8003bde:	3308      	adds	r3, #8
 8003be0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8003be2:	6013      	str	r3, [r2, #0]
 8003be4:	9800      	ldr	r0, [sp, #0]
 8003be6:	b015      	add	sp, #84	; 0x54
 8003be8:	ecbd 8b02 	vpop	{d8}
 8003bec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003bf0:	4b94      	ldr	r3, [pc, #592]	; (8003e44 <_dtoa_r+0x304>)
 8003bf2:	9300      	str	r3, [sp, #0]
 8003bf4:	3303      	adds	r3, #3
 8003bf6:	e7f3      	b.n	8003be0 <_dtoa_r+0xa0>
 8003bf8:	ed9d 7b02 	vldr	d7, [sp, #8]
 8003bfc:	2200      	movs	r2, #0
 8003bfe:	ec51 0b17 	vmov	r0, r1, d7
 8003c02:	2300      	movs	r3, #0
 8003c04:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8003c08:	f7fc ff66 	bl	8000ad8 <__aeabi_dcmpeq>
 8003c0c:	4680      	mov	r8, r0
 8003c0e:	b158      	cbz	r0, 8003c28 <_dtoa_r+0xe8>
 8003c10:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8003c12:	2301      	movs	r3, #1
 8003c14:	6013      	str	r3, [r2, #0]
 8003c16:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	f000 8551 	beq.w	80046c0 <_dtoa_r+0xb80>
 8003c1e:	488b      	ldr	r0, [pc, #556]	; (8003e4c <_dtoa_r+0x30c>)
 8003c20:	6018      	str	r0, [r3, #0]
 8003c22:	1e43      	subs	r3, r0, #1
 8003c24:	9300      	str	r3, [sp, #0]
 8003c26:	e7dd      	b.n	8003be4 <_dtoa_r+0xa4>
 8003c28:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8003c2c:	aa12      	add	r2, sp, #72	; 0x48
 8003c2e:	a913      	add	r1, sp, #76	; 0x4c
 8003c30:	4620      	mov	r0, r4
 8003c32:	f001 f9a7 	bl	8004f84 <__d2b>
 8003c36:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8003c3a:	4683      	mov	fp, r0
 8003c3c:	2d00      	cmp	r5, #0
 8003c3e:	d07c      	beq.n	8003d3a <_dtoa_r+0x1fa>
 8003c40:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003c42:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8003c46:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003c4a:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8003c4e:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8003c52:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8003c56:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8003c5a:	4b7d      	ldr	r3, [pc, #500]	; (8003e50 <_dtoa_r+0x310>)
 8003c5c:	2200      	movs	r2, #0
 8003c5e:	4630      	mov	r0, r6
 8003c60:	4639      	mov	r1, r7
 8003c62:	f7fc fb19 	bl	8000298 <__aeabi_dsub>
 8003c66:	a36e      	add	r3, pc, #440	; (adr r3, 8003e20 <_dtoa_r+0x2e0>)
 8003c68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c6c:	f7fc fccc 	bl	8000608 <__aeabi_dmul>
 8003c70:	a36d      	add	r3, pc, #436	; (adr r3, 8003e28 <_dtoa_r+0x2e8>)
 8003c72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c76:	f7fc fb11 	bl	800029c <__adddf3>
 8003c7a:	4606      	mov	r6, r0
 8003c7c:	4628      	mov	r0, r5
 8003c7e:	460f      	mov	r7, r1
 8003c80:	f7fc fc58 	bl	8000534 <__aeabi_i2d>
 8003c84:	a36a      	add	r3, pc, #424	; (adr r3, 8003e30 <_dtoa_r+0x2f0>)
 8003c86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c8a:	f7fc fcbd 	bl	8000608 <__aeabi_dmul>
 8003c8e:	4602      	mov	r2, r0
 8003c90:	460b      	mov	r3, r1
 8003c92:	4630      	mov	r0, r6
 8003c94:	4639      	mov	r1, r7
 8003c96:	f7fc fb01 	bl	800029c <__adddf3>
 8003c9a:	4606      	mov	r6, r0
 8003c9c:	460f      	mov	r7, r1
 8003c9e:	f7fc ff63 	bl	8000b68 <__aeabi_d2iz>
 8003ca2:	2200      	movs	r2, #0
 8003ca4:	4682      	mov	sl, r0
 8003ca6:	2300      	movs	r3, #0
 8003ca8:	4630      	mov	r0, r6
 8003caa:	4639      	mov	r1, r7
 8003cac:	f7fc ff1e 	bl	8000aec <__aeabi_dcmplt>
 8003cb0:	b148      	cbz	r0, 8003cc6 <_dtoa_r+0x186>
 8003cb2:	4650      	mov	r0, sl
 8003cb4:	f7fc fc3e 	bl	8000534 <__aeabi_i2d>
 8003cb8:	4632      	mov	r2, r6
 8003cba:	463b      	mov	r3, r7
 8003cbc:	f7fc ff0c 	bl	8000ad8 <__aeabi_dcmpeq>
 8003cc0:	b908      	cbnz	r0, 8003cc6 <_dtoa_r+0x186>
 8003cc2:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8003cc6:	f1ba 0f16 	cmp.w	sl, #22
 8003cca:	d854      	bhi.n	8003d76 <_dtoa_r+0x236>
 8003ccc:	4b61      	ldr	r3, [pc, #388]	; (8003e54 <_dtoa_r+0x314>)
 8003cce:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8003cd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cd6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8003cda:	f7fc ff07 	bl	8000aec <__aeabi_dcmplt>
 8003cde:	2800      	cmp	r0, #0
 8003ce0:	d04b      	beq.n	8003d7a <_dtoa_r+0x23a>
 8003ce2:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8003ce6:	2300      	movs	r3, #0
 8003ce8:	930e      	str	r3, [sp, #56]	; 0x38
 8003cea:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8003cec:	1b5d      	subs	r5, r3, r5
 8003cee:	1e6b      	subs	r3, r5, #1
 8003cf0:	9304      	str	r3, [sp, #16]
 8003cf2:	bf43      	ittte	mi
 8003cf4:	2300      	movmi	r3, #0
 8003cf6:	f1c5 0801 	rsbmi	r8, r5, #1
 8003cfa:	9304      	strmi	r3, [sp, #16]
 8003cfc:	f04f 0800 	movpl.w	r8, #0
 8003d00:	f1ba 0f00 	cmp.w	sl, #0
 8003d04:	db3b      	blt.n	8003d7e <_dtoa_r+0x23e>
 8003d06:	9b04      	ldr	r3, [sp, #16]
 8003d08:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8003d0c:	4453      	add	r3, sl
 8003d0e:	9304      	str	r3, [sp, #16]
 8003d10:	2300      	movs	r3, #0
 8003d12:	9306      	str	r3, [sp, #24]
 8003d14:	9b05      	ldr	r3, [sp, #20]
 8003d16:	2b09      	cmp	r3, #9
 8003d18:	d869      	bhi.n	8003dee <_dtoa_r+0x2ae>
 8003d1a:	2b05      	cmp	r3, #5
 8003d1c:	bfc4      	itt	gt
 8003d1e:	3b04      	subgt	r3, #4
 8003d20:	9305      	strgt	r3, [sp, #20]
 8003d22:	9b05      	ldr	r3, [sp, #20]
 8003d24:	f1a3 0302 	sub.w	r3, r3, #2
 8003d28:	bfcc      	ite	gt
 8003d2a:	2500      	movgt	r5, #0
 8003d2c:	2501      	movle	r5, #1
 8003d2e:	2b03      	cmp	r3, #3
 8003d30:	d869      	bhi.n	8003e06 <_dtoa_r+0x2c6>
 8003d32:	e8df f003 	tbb	[pc, r3]
 8003d36:	4e2c      	.short	0x4e2c
 8003d38:	5a4c      	.short	0x5a4c
 8003d3a:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8003d3e:	441d      	add	r5, r3
 8003d40:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8003d44:	2b20      	cmp	r3, #32
 8003d46:	bfc1      	itttt	gt
 8003d48:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8003d4c:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8003d50:	fa09 f303 	lslgt.w	r3, r9, r3
 8003d54:	fa26 f000 	lsrgt.w	r0, r6, r0
 8003d58:	bfda      	itte	le
 8003d5a:	f1c3 0320 	rsble	r3, r3, #32
 8003d5e:	fa06 f003 	lslle.w	r0, r6, r3
 8003d62:	4318      	orrgt	r0, r3
 8003d64:	f7fc fbd6 	bl	8000514 <__aeabi_ui2d>
 8003d68:	2301      	movs	r3, #1
 8003d6a:	4606      	mov	r6, r0
 8003d6c:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8003d70:	3d01      	subs	r5, #1
 8003d72:	9310      	str	r3, [sp, #64]	; 0x40
 8003d74:	e771      	b.n	8003c5a <_dtoa_r+0x11a>
 8003d76:	2301      	movs	r3, #1
 8003d78:	e7b6      	b.n	8003ce8 <_dtoa_r+0x1a8>
 8003d7a:	900e      	str	r0, [sp, #56]	; 0x38
 8003d7c:	e7b5      	b.n	8003cea <_dtoa_r+0x1aa>
 8003d7e:	f1ca 0300 	rsb	r3, sl, #0
 8003d82:	9306      	str	r3, [sp, #24]
 8003d84:	2300      	movs	r3, #0
 8003d86:	eba8 080a 	sub.w	r8, r8, sl
 8003d8a:	930d      	str	r3, [sp, #52]	; 0x34
 8003d8c:	e7c2      	b.n	8003d14 <_dtoa_r+0x1d4>
 8003d8e:	2300      	movs	r3, #0
 8003d90:	9308      	str	r3, [sp, #32]
 8003d92:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	dc39      	bgt.n	8003e0c <_dtoa_r+0x2cc>
 8003d98:	f04f 0901 	mov.w	r9, #1
 8003d9c:	f8cd 9004 	str.w	r9, [sp, #4]
 8003da0:	464b      	mov	r3, r9
 8003da2:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8003da6:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8003da8:	2200      	movs	r2, #0
 8003daa:	6042      	str	r2, [r0, #4]
 8003dac:	2204      	movs	r2, #4
 8003dae:	f102 0614 	add.w	r6, r2, #20
 8003db2:	429e      	cmp	r6, r3
 8003db4:	6841      	ldr	r1, [r0, #4]
 8003db6:	d92f      	bls.n	8003e18 <_dtoa_r+0x2d8>
 8003db8:	4620      	mov	r0, r4
 8003dba:	f000 fdc1 	bl	8004940 <_Balloc>
 8003dbe:	9000      	str	r0, [sp, #0]
 8003dc0:	2800      	cmp	r0, #0
 8003dc2:	d14b      	bne.n	8003e5c <_dtoa_r+0x31c>
 8003dc4:	4b24      	ldr	r3, [pc, #144]	; (8003e58 <_dtoa_r+0x318>)
 8003dc6:	4602      	mov	r2, r0
 8003dc8:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8003dcc:	e6d1      	b.n	8003b72 <_dtoa_r+0x32>
 8003dce:	2301      	movs	r3, #1
 8003dd0:	e7de      	b.n	8003d90 <_dtoa_r+0x250>
 8003dd2:	2300      	movs	r3, #0
 8003dd4:	9308      	str	r3, [sp, #32]
 8003dd6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003dd8:	eb0a 0903 	add.w	r9, sl, r3
 8003ddc:	f109 0301 	add.w	r3, r9, #1
 8003de0:	2b01      	cmp	r3, #1
 8003de2:	9301      	str	r3, [sp, #4]
 8003de4:	bfb8      	it	lt
 8003de6:	2301      	movlt	r3, #1
 8003de8:	e7dd      	b.n	8003da6 <_dtoa_r+0x266>
 8003dea:	2301      	movs	r3, #1
 8003dec:	e7f2      	b.n	8003dd4 <_dtoa_r+0x294>
 8003dee:	2501      	movs	r5, #1
 8003df0:	2300      	movs	r3, #0
 8003df2:	9305      	str	r3, [sp, #20]
 8003df4:	9508      	str	r5, [sp, #32]
 8003df6:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 8003dfa:	2200      	movs	r2, #0
 8003dfc:	f8cd 9004 	str.w	r9, [sp, #4]
 8003e00:	2312      	movs	r3, #18
 8003e02:	9209      	str	r2, [sp, #36]	; 0x24
 8003e04:	e7cf      	b.n	8003da6 <_dtoa_r+0x266>
 8003e06:	2301      	movs	r3, #1
 8003e08:	9308      	str	r3, [sp, #32]
 8003e0a:	e7f4      	b.n	8003df6 <_dtoa_r+0x2b6>
 8003e0c:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8003e10:	f8cd 9004 	str.w	r9, [sp, #4]
 8003e14:	464b      	mov	r3, r9
 8003e16:	e7c6      	b.n	8003da6 <_dtoa_r+0x266>
 8003e18:	3101      	adds	r1, #1
 8003e1a:	6041      	str	r1, [r0, #4]
 8003e1c:	0052      	lsls	r2, r2, #1
 8003e1e:	e7c6      	b.n	8003dae <_dtoa_r+0x26e>
 8003e20:	636f4361 	.word	0x636f4361
 8003e24:	3fd287a7 	.word	0x3fd287a7
 8003e28:	8b60c8b3 	.word	0x8b60c8b3
 8003e2c:	3fc68a28 	.word	0x3fc68a28
 8003e30:	509f79fb 	.word	0x509f79fb
 8003e34:	3fd34413 	.word	0x3fd34413
 8003e38:	08005c55 	.word	0x08005c55
 8003e3c:	08005c6c 	.word	0x08005c6c
 8003e40:	7ff00000 	.word	0x7ff00000
 8003e44:	08005c51 	.word	0x08005c51
 8003e48:	08005c48 	.word	0x08005c48
 8003e4c:	08005c25 	.word	0x08005c25
 8003e50:	3ff80000 	.word	0x3ff80000
 8003e54:	08005dc8 	.word	0x08005dc8
 8003e58:	08005ccb 	.word	0x08005ccb
 8003e5c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003e5e:	9a00      	ldr	r2, [sp, #0]
 8003e60:	601a      	str	r2, [r3, #0]
 8003e62:	9b01      	ldr	r3, [sp, #4]
 8003e64:	2b0e      	cmp	r3, #14
 8003e66:	f200 80ad 	bhi.w	8003fc4 <_dtoa_r+0x484>
 8003e6a:	2d00      	cmp	r5, #0
 8003e6c:	f000 80aa 	beq.w	8003fc4 <_dtoa_r+0x484>
 8003e70:	f1ba 0f00 	cmp.w	sl, #0
 8003e74:	dd36      	ble.n	8003ee4 <_dtoa_r+0x3a4>
 8003e76:	4ac3      	ldr	r2, [pc, #780]	; (8004184 <_dtoa_r+0x644>)
 8003e78:	f00a 030f 	and.w	r3, sl, #15
 8003e7c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8003e80:	ed93 7b00 	vldr	d7, [r3]
 8003e84:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8003e88:	ea4f 172a 	mov.w	r7, sl, asr #4
 8003e8c:	eeb0 8a47 	vmov.f32	s16, s14
 8003e90:	eef0 8a67 	vmov.f32	s17, s15
 8003e94:	d016      	beq.n	8003ec4 <_dtoa_r+0x384>
 8003e96:	4bbc      	ldr	r3, [pc, #752]	; (8004188 <_dtoa_r+0x648>)
 8003e98:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8003e9c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8003ea0:	f7fc fcdc 	bl	800085c <__aeabi_ddiv>
 8003ea4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003ea8:	f007 070f 	and.w	r7, r7, #15
 8003eac:	2503      	movs	r5, #3
 8003eae:	4eb6      	ldr	r6, [pc, #728]	; (8004188 <_dtoa_r+0x648>)
 8003eb0:	b957      	cbnz	r7, 8003ec8 <_dtoa_r+0x388>
 8003eb2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003eb6:	ec53 2b18 	vmov	r2, r3, d8
 8003eba:	f7fc fccf 	bl	800085c <__aeabi_ddiv>
 8003ebe:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003ec2:	e029      	b.n	8003f18 <_dtoa_r+0x3d8>
 8003ec4:	2502      	movs	r5, #2
 8003ec6:	e7f2      	b.n	8003eae <_dtoa_r+0x36e>
 8003ec8:	07f9      	lsls	r1, r7, #31
 8003eca:	d508      	bpl.n	8003ede <_dtoa_r+0x39e>
 8003ecc:	ec51 0b18 	vmov	r0, r1, d8
 8003ed0:	e9d6 2300 	ldrd	r2, r3, [r6]
 8003ed4:	f7fc fb98 	bl	8000608 <__aeabi_dmul>
 8003ed8:	ec41 0b18 	vmov	d8, r0, r1
 8003edc:	3501      	adds	r5, #1
 8003ede:	107f      	asrs	r7, r7, #1
 8003ee0:	3608      	adds	r6, #8
 8003ee2:	e7e5      	b.n	8003eb0 <_dtoa_r+0x370>
 8003ee4:	f000 80a6 	beq.w	8004034 <_dtoa_r+0x4f4>
 8003ee8:	f1ca 0600 	rsb	r6, sl, #0
 8003eec:	4ba5      	ldr	r3, [pc, #660]	; (8004184 <_dtoa_r+0x644>)
 8003eee:	4fa6      	ldr	r7, [pc, #664]	; (8004188 <_dtoa_r+0x648>)
 8003ef0:	f006 020f 	and.w	r2, r6, #15
 8003ef4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8003ef8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003efc:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8003f00:	f7fc fb82 	bl	8000608 <__aeabi_dmul>
 8003f04:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003f08:	1136      	asrs	r6, r6, #4
 8003f0a:	2300      	movs	r3, #0
 8003f0c:	2502      	movs	r5, #2
 8003f0e:	2e00      	cmp	r6, #0
 8003f10:	f040 8085 	bne.w	800401e <_dtoa_r+0x4de>
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d1d2      	bne.n	8003ebe <_dtoa_r+0x37e>
 8003f18:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	f000 808c 	beq.w	8004038 <_dtoa_r+0x4f8>
 8003f20:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8003f24:	4b99      	ldr	r3, [pc, #612]	; (800418c <_dtoa_r+0x64c>)
 8003f26:	2200      	movs	r2, #0
 8003f28:	4630      	mov	r0, r6
 8003f2a:	4639      	mov	r1, r7
 8003f2c:	f7fc fdde 	bl	8000aec <__aeabi_dcmplt>
 8003f30:	2800      	cmp	r0, #0
 8003f32:	f000 8081 	beq.w	8004038 <_dtoa_r+0x4f8>
 8003f36:	9b01      	ldr	r3, [sp, #4]
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d07d      	beq.n	8004038 <_dtoa_r+0x4f8>
 8003f3c:	f1b9 0f00 	cmp.w	r9, #0
 8003f40:	dd3c      	ble.n	8003fbc <_dtoa_r+0x47c>
 8003f42:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 8003f46:	9307      	str	r3, [sp, #28]
 8003f48:	2200      	movs	r2, #0
 8003f4a:	4b91      	ldr	r3, [pc, #580]	; (8004190 <_dtoa_r+0x650>)
 8003f4c:	4630      	mov	r0, r6
 8003f4e:	4639      	mov	r1, r7
 8003f50:	f7fc fb5a 	bl	8000608 <__aeabi_dmul>
 8003f54:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003f58:	3501      	adds	r5, #1
 8003f5a:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8003f5e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8003f62:	4628      	mov	r0, r5
 8003f64:	f7fc fae6 	bl	8000534 <__aeabi_i2d>
 8003f68:	4632      	mov	r2, r6
 8003f6a:	463b      	mov	r3, r7
 8003f6c:	f7fc fb4c 	bl	8000608 <__aeabi_dmul>
 8003f70:	4b88      	ldr	r3, [pc, #544]	; (8004194 <_dtoa_r+0x654>)
 8003f72:	2200      	movs	r2, #0
 8003f74:	f7fc f992 	bl	800029c <__adddf3>
 8003f78:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8003f7c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003f80:	9303      	str	r3, [sp, #12]
 8003f82:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d15c      	bne.n	8004042 <_dtoa_r+0x502>
 8003f88:	4b83      	ldr	r3, [pc, #524]	; (8004198 <_dtoa_r+0x658>)
 8003f8a:	2200      	movs	r2, #0
 8003f8c:	4630      	mov	r0, r6
 8003f8e:	4639      	mov	r1, r7
 8003f90:	f7fc f982 	bl	8000298 <__aeabi_dsub>
 8003f94:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8003f98:	4606      	mov	r6, r0
 8003f9a:	460f      	mov	r7, r1
 8003f9c:	f7fc fdc4 	bl	8000b28 <__aeabi_dcmpgt>
 8003fa0:	2800      	cmp	r0, #0
 8003fa2:	f040 8296 	bne.w	80044d2 <_dtoa_r+0x992>
 8003fa6:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8003faa:	4630      	mov	r0, r6
 8003fac:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8003fb0:	4639      	mov	r1, r7
 8003fb2:	f7fc fd9b 	bl	8000aec <__aeabi_dcmplt>
 8003fb6:	2800      	cmp	r0, #0
 8003fb8:	f040 8288 	bne.w	80044cc <_dtoa_r+0x98c>
 8003fbc:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8003fc0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003fc4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	f2c0 8158 	blt.w	800427c <_dtoa_r+0x73c>
 8003fcc:	f1ba 0f0e 	cmp.w	sl, #14
 8003fd0:	f300 8154 	bgt.w	800427c <_dtoa_r+0x73c>
 8003fd4:	4b6b      	ldr	r3, [pc, #428]	; (8004184 <_dtoa_r+0x644>)
 8003fd6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8003fda:	e9d3 8900 	ldrd	r8, r9, [r3]
 8003fde:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	f280 80e3 	bge.w	80041ac <_dtoa_r+0x66c>
 8003fe6:	9b01      	ldr	r3, [sp, #4]
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	f300 80df 	bgt.w	80041ac <_dtoa_r+0x66c>
 8003fee:	f040 826d 	bne.w	80044cc <_dtoa_r+0x98c>
 8003ff2:	4b69      	ldr	r3, [pc, #420]	; (8004198 <_dtoa_r+0x658>)
 8003ff4:	2200      	movs	r2, #0
 8003ff6:	4640      	mov	r0, r8
 8003ff8:	4649      	mov	r1, r9
 8003ffa:	f7fc fb05 	bl	8000608 <__aeabi_dmul>
 8003ffe:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004002:	f7fc fd87 	bl	8000b14 <__aeabi_dcmpge>
 8004006:	9e01      	ldr	r6, [sp, #4]
 8004008:	4637      	mov	r7, r6
 800400a:	2800      	cmp	r0, #0
 800400c:	f040 8243 	bne.w	8004496 <_dtoa_r+0x956>
 8004010:	9d00      	ldr	r5, [sp, #0]
 8004012:	2331      	movs	r3, #49	; 0x31
 8004014:	f805 3b01 	strb.w	r3, [r5], #1
 8004018:	f10a 0a01 	add.w	sl, sl, #1
 800401c:	e23f      	b.n	800449e <_dtoa_r+0x95e>
 800401e:	07f2      	lsls	r2, r6, #31
 8004020:	d505      	bpl.n	800402e <_dtoa_r+0x4ee>
 8004022:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004026:	f7fc faef 	bl	8000608 <__aeabi_dmul>
 800402a:	3501      	adds	r5, #1
 800402c:	2301      	movs	r3, #1
 800402e:	1076      	asrs	r6, r6, #1
 8004030:	3708      	adds	r7, #8
 8004032:	e76c      	b.n	8003f0e <_dtoa_r+0x3ce>
 8004034:	2502      	movs	r5, #2
 8004036:	e76f      	b.n	8003f18 <_dtoa_r+0x3d8>
 8004038:	9b01      	ldr	r3, [sp, #4]
 800403a:	f8cd a01c 	str.w	sl, [sp, #28]
 800403e:	930c      	str	r3, [sp, #48]	; 0x30
 8004040:	e78d      	b.n	8003f5e <_dtoa_r+0x41e>
 8004042:	9900      	ldr	r1, [sp, #0]
 8004044:	980c      	ldr	r0, [sp, #48]	; 0x30
 8004046:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004048:	4b4e      	ldr	r3, [pc, #312]	; (8004184 <_dtoa_r+0x644>)
 800404a:	ed9d 7b02 	vldr	d7, [sp, #8]
 800404e:	4401      	add	r1, r0
 8004050:	9102      	str	r1, [sp, #8]
 8004052:	9908      	ldr	r1, [sp, #32]
 8004054:	eeb0 8a47 	vmov.f32	s16, s14
 8004058:	eef0 8a67 	vmov.f32	s17, s15
 800405c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004060:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8004064:	2900      	cmp	r1, #0
 8004066:	d045      	beq.n	80040f4 <_dtoa_r+0x5b4>
 8004068:	494c      	ldr	r1, [pc, #304]	; (800419c <_dtoa_r+0x65c>)
 800406a:	2000      	movs	r0, #0
 800406c:	f7fc fbf6 	bl	800085c <__aeabi_ddiv>
 8004070:	ec53 2b18 	vmov	r2, r3, d8
 8004074:	f7fc f910 	bl	8000298 <__aeabi_dsub>
 8004078:	9d00      	ldr	r5, [sp, #0]
 800407a:	ec41 0b18 	vmov	d8, r0, r1
 800407e:	4639      	mov	r1, r7
 8004080:	4630      	mov	r0, r6
 8004082:	f7fc fd71 	bl	8000b68 <__aeabi_d2iz>
 8004086:	900c      	str	r0, [sp, #48]	; 0x30
 8004088:	f7fc fa54 	bl	8000534 <__aeabi_i2d>
 800408c:	4602      	mov	r2, r0
 800408e:	460b      	mov	r3, r1
 8004090:	4630      	mov	r0, r6
 8004092:	4639      	mov	r1, r7
 8004094:	f7fc f900 	bl	8000298 <__aeabi_dsub>
 8004098:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800409a:	3330      	adds	r3, #48	; 0x30
 800409c:	f805 3b01 	strb.w	r3, [r5], #1
 80040a0:	ec53 2b18 	vmov	r2, r3, d8
 80040a4:	4606      	mov	r6, r0
 80040a6:	460f      	mov	r7, r1
 80040a8:	f7fc fd20 	bl	8000aec <__aeabi_dcmplt>
 80040ac:	2800      	cmp	r0, #0
 80040ae:	d165      	bne.n	800417c <_dtoa_r+0x63c>
 80040b0:	4632      	mov	r2, r6
 80040b2:	463b      	mov	r3, r7
 80040b4:	4935      	ldr	r1, [pc, #212]	; (800418c <_dtoa_r+0x64c>)
 80040b6:	2000      	movs	r0, #0
 80040b8:	f7fc f8ee 	bl	8000298 <__aeabi_dsub>
 80040bc:	ec53 2b18 	vmov	r2, r3, d8
 80040c0:	f7fc fd14 	bl	8000aec <__aeabi_dcmplt>
 80040c4:	2800      	cmp	r0, #0
 80040c6:	f040 80b9 	bne.w	800423c <_dtoa_r+0x6fc>
 80040ca:	9b02      	ldr	r3, [sp, #8]
 80040cc:	429d      	cmp	r5, r3
 80040ce:	f43f af75 	beq.w	8003fbc <_dtoa_r+0x47c>
 80040d2:	4b2f      	ldr	r3, [pc, #188]	; (8004190 <_dtoa_r+0x650>)
 80040d4:	ec51 0b18 	vmov	r0, r1, d8
 80040d8:	2200      	movs	r2, #0
 80040da:	f7fc fa95 	bl	8000608 <__aeabi_dmul>
 80040de:	4b2c      	ldr	r3, [pc, #176]	; (8004190 <_dtoa_r+0x650>)
 80040e0:	ec41 0b18 	vmov	d8, r0, r1
 80040e4:	2200      	movs	r2, #0
 80040e6:	4630      	mov	r0, r6
 80040e8:	4639      	mov	r1, r7
 80040ea:	f7fc fa8d 	bl	8000608 <__aeabi_dmul>
 80040ee:	4606      	mov	r6, r0
 80040f0:	460f      	mov	r7, r1
 80040f2:	e7c4      	b.n	800407e <_dtoa_r+0x53e>
 80040f4:	ec51 0b17 	vmov	r0, r1, d7
 80040f8:	f7fc fa86 	bl	8000608 <__aeabi_dmul>
 80040fc:	9b02      	ldr	r3, [sp, #8]
 80040fe:	9d00      	ldr	r5, [sp, #0]
 8004100:	930c      	str	r3, [sp, #48]	; 0x30
 8004102:	ec41 0b18 	vmov	d8, r0, r1
 8004106:	4639      	mov	r1, r7
 8004108:	4630      	mov	r0, r6
 800410a:	f7fc fd2d 	bl	8000b68 <__aeabi_d2iz>
 800410e:	9011      	str	r0, [sp, #68]	; 0x44
 8004110:	f7fc fa10 	bl	8000534 <__aeabi_i2d>
 8004114:	4602      	mov	r2, r0
 8004116:	460b      	mov	r3, r1
 8004118:	4630      	mov	r0, r6
 800411a:	4639      	mov	r1, r7
 800411c:	f7fc f8bc 	bl	8000298 <__aeabi_dsub>
 8004120:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004122:	3330      	adds	r3, #48	; 0x30
 8004124:	f805 3b01 	strb.w	r3, [r5], #1
 8004128:	9b02      	ldr	r3, [sp, #8]
 800412a:	429d      	cmp	r5, r3
 800412c:	4606      	mov	r6, r0
 800412e:	460f      	mov	r7, r1
 8004130:	f04f 0200 	mov.w	r2, #0
 8004134:	d134      	bne.n	80041a0 <_dtoa_r+0x660>
 8004136:	4b19      	ldr	r3, [pc, #100]	; (800419c <_dtoa_r+0x65c>)
 8004138:	ec51 0b18 	vmov	r0, r1, d8
 800413c:	f7fc f8ae 	bl	800029c <__adddf3>
 8004140:	4602      	mov	r2, r0
 8004142:	460b      	mov	r3, r1
 8004144:	4630      	mov	r0, r6
 8004146:	4639      	mov	r1, r7
 8004148:	f7fc fcee 	bl	8000b28 <__aeabi_dcmpgt>
 800414c:	2800      	cmp	r0, #0
 800414e:	d175      	bne.n	800423c <_dtoa_r+0x6fc>
 8004150:	ec53 2b18 	vmov	r2, r3, d8
 8004154:	4911      	ldr	r1, [pc, #68]	; (800419c <_dtoa_r+0x65c>)
 8004156:	2000      	movs	r0, #0
 8004158:	f7fc f89e 	bl	8000298 <__aeabi_dsub>
 800415c:	4602      	mov	r2, r0
 800415e:	460b      	mov	r3, r1
 8004160:	4630      	mov	r0, r6
 8004162:	4639      	mov	r1, r7
 8004164:	f7fc fcc2 	bl	8000aec <__aeabi_dcmplt>
 8004168:	2800      	cmp	r0, #0
 800416a:	f43f af27 	beq.w	8003fbc <_dtoa_r+0x47c>
 800416e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004170:	1e6b      	subs	r3, r5, #1
 8004172:	930c      	str	r3, [sp, #48]	; 0x30
 8004174:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8004178:	2b30      	cmp	r3, #48	; 0x30
 800417a:	d0f8      	beq.n	800416e <_dtoa_r+0x62e>
 800417c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8004180:	e04a      	b.n	8004218 <_dtoa_r+0x6d8>
 8004182:	bf00      	nop
 8004184:	08005dc8 	.word	0x08005dc8
 8004188:	08005da0 	.word	0x08005da0
 800418c:	3ff00000 	.word	0x3ff00000
 8004190:	40240000 	.word	0x40240000
 8004194:	401c0000 	.word	0x401c0000
 8004198:	40140000 	.word	0x40140000
 800419c:	3fe00000 	.word	0x3fe00000
 80041a0:	4baf      	ldr	r3, [pc, #700]	; (8004460 <_dtoa_r+0x920>)
 80041a2:	f7fc fa31 	bl	8000608 <__aeabi_dmul>
 80041a6:	4606      	mov	r6, r0
 80041a8:	460f      	mov	r7, r1
 80041aa:	e7ac      	b.n	8004106 <_dtoa_r+0x5c6>
 80041ac:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80041b0:	9d00      	ldr	r5, [sp, #0]
 80041b2:	4642      	mov	r2, r8
 80041b4:	464b      	mov	r3, r9
 80041b6:	4630      	mov	r0, r6
 80041b8:	4639      	mov	r1, r7
 80041ba:	f7fc fb4f 	bl	800085c <__aeabi_ddiv>
 80041be:	f7fc fcd3 	bl	8000b68 <__aeabi_d2iz>
 80041c2:	9002      	str	r0, [sp, #8]
 80041c4:	f7fc f9b6 	bl	8000534 <__aeabi_i2d>
 80041c8:	4642      	mov	r2, r8
 80041ca:	464b      	mov	r3, r9
 80041cc:	f7fc fa1c 	bl	8000608 <__aeabi_dmul>
 80041d0:	4602      	mov	r2, r0
 80041d2:	460b      	mov	r3, r1
 80041d4:	4630      	mov	r0, r6
 80041d6:	4639      	mov	r1, r7
 80041d8:	f7fc f85e 	bl	8000298 <__aeabi_dsub>
 80041dc:	9e02      	ldr	r6, [sp, #8]
 80041de:	9f01      	ldr	r7, [sp, #4]
 80041e0:	3630      	adds	r6, #48	; 0x30
 80041e2:	f805 6b01 	strb.w	r6, [r5], #1
 80041e6:	9e00      	ldr	r6, [sp, #0]
 80041e8:	1bae      	subs	r6, r5, r6
 80041ea:	42b7      	cmp	r7, r6
 80041ec:	4602      	mov	r2, r0
 80041ee:	460b      	mov	r3, r1
 80041f0:	d137      	bne.n	8004262 <_dtoa_r+0x722>
 80041f2:	f7fc f853 	bl	800029c <__adddf3>
 80041f6:	4642      	mov	r2, r8
 80041f8:	464b      	mov	r3, r9
 80041fa:	4606      	mov	r6, r0
 80041fc:	460f      	mov	r7, r1
 80041fe:	f7fc fc93 	bl	8000b28 <__aeabi_dcmpgt>
 8004202:	b9c8      	cbnz	r0, 8004238 <_dtoa_r+0x6f8>
 8004204:	4642      	mov	r2, r8
 8004206:	464b      	mov	r3, r9
 8004208:	4630      	mov	r0, r6
 800420a:	4639      	mov	r1, r7
 800420c:	f7fc fc64 	bl	8000ad8 <__aeabi_dcmpeq>
 8004210:	b110      	cbz	r0, 8004218 <_dtoa_r+0x6d8>
 8004212:	9b02      	ldr	r3, [sp, #8]
 8004214:	07d9      	lsls	r1, r3, #31
 8004216:	d40f      	bmi.n	8004238 <_dtoa_r+0x6f8>
 8004218:	4620      	mov	r0, r4
 800421a:	4659      	mov	r1, fp
 800421c:	f000 fbd0 	bl	80049c0 <_Bfree>
 8004220:	2300      	movs	r3, #0
 8004222:	702b      	strb	r3, [r5, #0]
 8004224:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004226:	f10a 0001 	add.w	r0, sl, #1
 800422a:	6018      	str	r0, [r3, #0]
 800422c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800422e:	2b00      	cmp	r3, #0
 8004230:	f43f acd8 	beq.w	8003be4 <_dtoa_r+0xa4>
 8004234:	601d      	str	r5, [r3, #0]
 8004236:	e4d5      	b.n	8003be4 <_dtoa_r+0xa4>
 8004238:	f8cd a01c 	str.w	sl, [sp, #28]
 800423c:	462b      	mov	r3, r5
 800423e:	461d      	mov	r5, r3
 8004240:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8004244:	2a39      	cmp	r2, #57	; 0x39
 8004246:	d108      	bne.n	800425a <_dtoa_r+0x71a>
 8004248:	9a00      	ldr	r2, [sp, #0]
 800424a:	429a      	cmp	r2, r3
 800424c:	d1f7      	bne.n	800423e <_dtoa_r+0x6fe>
 800424e:	9a07      	ldr	r2, [sp, #28]
 8004250:	9900      	ldr	r1, [sp, #0]
 8004252:	3201      	adds	r2, #1
 8004254:	9207      	str	r2, [sp, #28]
 8004256:	2230      	movs	r2, #48	; 0x30
 8004258:	700a      	strb	r2, [r1, #0]
 800425a:	781a      	ldrb	r2, [r3, #0]
 800425c:	3201      	adds	r2, #1
 800425e:	701a      	strb	r2, [r3, #0]
 8004260:	e78c      	b.n	800417c <_dtoa_r+0x63c>
 8004262:	4b7f      	ldr	r3, [pc, #508]	; (8004460 <_dtoa_r+0x920>)
 8004264:	2200      	movs	r2, #0
 8004266:	f7fc f9cf 	bl	8000608 <__aeabi_dmul>
 800426a:	2200      	movs	r2, #0
 800426c:	2300      	movs	r3, #0
 800426e:	4606      	mov	r6, r0
 8004270:	460f      	mov	r7, r1
 8004272:	f7fc fc31 	bl	8000ad8 <__aeabi_dcmpeq>
 8004276:	2800      	cmp	r0, #0
 8004278:	d09b      	beq.n	80041b2 <_dtoa_r+0x672>
 800427a:	e7cd      	b.n	8004218 <_dtoa_r+0x6d8>
 800427c:	9a08      	ldr	r2, [sp, #32]
 800427e:	2a00      	cmp	r2, #0
 8004280:	f000 80c4 	beq.w	800440c <_dtoa_r+0x8cc>
 8004284:	9a05      	ldr	r2, [sp, #20]
 8004286:	2a01      	cmp	r2, #1
 8004288:	f300 80a8 	bgt.w	80043dc <_dtoa_r+0x89c>
 800428c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800428e:	2a00      	cmp	r2, #0
 8004290:	f000 80a0 	beq.w	80043d4 <_dtoa_r+0x894>
 8004294:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8004298:	9e06      	ldr	r6, [sp, #24]
 800429a:	4645      	mov	r5, r8
 800429c:	9a04      	ldr	r2, [sp, #16]
 800429e:	2101      	movs	r1, #1
 80042a0:	441a      	add	r2, r3
 80042a2:	4620      	mov	r0, r4
 80042a4:	4498      	add	r8, r3
 80042a6:	9204      	str	r2, [sp, #16]
 80042a8:	f000 fc46 	bl	8004b38 <__i2b>
 80042ac:	4607      	mov	r7, r0
 80042ae:	2d00      	cmp	r5, #0
 80042b0:	dd0b      	ble.n	80042ca <_dtoa_r+0x78a>
 80042b2:	9b04      	ldr	r3, [sp, #16]
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	dd08      	ble.n	80042ca <_dtoa_r+0x78a>
 80042b8:	42ab      	cmp	r3, r5
 80042ba:	9a04      	ldr	r2, [sp, #16]
 80042bc:	bfa8      	it	ge
 80042be:	462b      	movge	r3, r5
 80042c0:	eba8 0803 	sub.w	r8, r8, r3
 80042c4:	1aed      	subs	r5, r5, r3
 80042c6:	1ad3      	subs	r3, r2, r3
 80042c8:	9304      	str	r3, [sp, #16]
 80042ca:	9b06      	ldr	r3, [sp, #24]
 80042cc:	b1fb      	cbz	r3, 800430e <_dtoa_r+0x7ce>
 80042ce:	9b08      	ldr	r3, [sp, #32]
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	f000 809f 	beq.w	8004414 <_dtoa_r+0x8d4>
 80042d6:	2e00      	cmp	r6, #0
 80042d8:	dd11      	ble.n	80042fe <_dtoa_r+0x7be>
 80042da:	4639      	mov	r1, r7
 80042dc:	4632      	mov	r2, r6
 80042de:	4620      	mov	r0, r4
 80042e0:	f000 fce6 	bl	8004cb0 <__pow5mult>
 80042e4:	465a      	mov	r2, fp
 80042e6:	4601      	mov	r1, r0
 80042e8:	4607      	mov	r7, r0
 80042ea:	4620      	mov	r0, r4
 80042ec:	f000 fc3a 	bl	8004b64 <__multiply>
 80042f0:	4659      	mov	r1, fp
 80042f2:	9007      	str	r0, [sp, #28]
 80042f4:	4620      	mov	r0, r4
 80042f6:	f000 fb63 	bl	80049c0 <_Bfree>
 80042fa:	9b07      	ldr	r3, [sp, #28]
 80042fc:	469b      	mov	fp, r3
 80042fe:	9b06      	ldr	r3, [sp, #24]
 8004300:	1b9a      	subs	r2, r3, r6
 8004302:	d004      	beq.n	800430e <_dtoa_r+0x7ce>
 8004304:	4659      	mov	r1, fp
 8004306:	4620      	mov	r0, r4
 8004308:	f000 fcd2 	bl	8004cb0 <__pow5mult>
 800430c:	4683      	mov	fp, r0
 800430e:	2101      	movs	r1, #1
 8004310:	4620      	mov	r0, r4
 8004312:	f000 fc11 	bl	8004b38 <__i2b>
 8004316:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004318:	2b00      	cmp	r3, #0
 800431a:	4606      	mov	r6, r0
 800431c:	dd7c      	ble.n	8004418 <_dtoa_r+0x8d8>
 800431e:	461a      	mov	r2, r3
 8004320:	4601      	mov	r1, r0
 8004322:	4620      	mov	r0, r4
 8004324:	f000 fcc4 	bl	8004cb0 <__pow5mult>
 8004328:	9b05      	ldr	r3, [sp, #20]
 800432a:	2b01      	cmp	r3, #1
 800432c:	4606      	mov	r6, r0
 800432e:	dd76      	ble.n	800441e <_dtoa_r+0x8de>
 8004330:	2300      	movs	r3, #0
 8004332:	9306      	str	r3, [sp, #24]
 8004334:	6933      	ldr	r3, [r6, #16]
 8004336:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800433a:	6918      	ldr	r0, [r3, #16]
 800433c:	f000 fbac 	bl	8004a98 <__hi0bits>
 8004340:	f1c0 0020 	rsb	r0, r0, #32
 8004344:	9b04      	ldr	r3, [sp, #16]
 8004346:	4418      	add	r0, r3
 8004348:	f010 001f 	ands.w	r0, r0, #31
 800434c:	f000 8086 	beq.w	800445c <_dtoa_r+0x91c>
 8004350:	f1c0 0320 	rsb	r3, r0, #32
 8004354:	2b04      	cmp	r3, #4
 8004356:	dd7f      	ble.n	8004458 <_dtoa_r+0x918>
 8004358:	f1c0 001c 	rsb	r0, r0, #28
 800435c:	9b04      	ldr	r3, [sp, #16]
 800435e:	4403      	add	r3, r0
 8004360:	4480      	add	r8, r0
 8004362:	4405      	add	r5, r0
 8004364:	9304      	str	r3, [sp, #16]
 8004366:	f1b8 0f00 	cmp.w	r8, #0
 800436a:	dd05      	ble.n	8004378 <_dtoa_r+0x838>
 800436c:	4659      	mov	r1, fp
 800436e:	4642      	mov	r2, r8
 8004370:	4620      	mov	r0, r4
 8004372:	f000 fcf7 	bl	8004d64 <__lshift>
 8004376:	4683      	mov	fp, r0
 8004378:	9b04      	ldr	r3, [sp, #16]
 800437a:	2b00      	cmp	r3, #0
 800437c:	dd05      	ble.n	800438a <_dtoa_r+0x84a>
 800437e:	4631      	mov	r1, r6
 8004380:	461a      	mov	r2, r3
 8004382:	4620      	mov	r0, r4
 8004384:	f000 fcee 	bl	8004d64 <__lshift>
 8004388:	4606      	mov	r6, r0
 800438a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800438c:	2b00      	cmp	r3, #0
 800438e:	d069      	beq.n	8004464 <_dtoa_r+0x924>
 8004390:	4631      	mov	r1, r6
 8004392:	4658      	mov	r0, fp
 8004394:	f000 fd52 	bl	8004e3c <__mcmp>
 8004398:	2800      	cmp	r0, #0
 800439a:	da63      	bge.n	8004464 <_dtoa_r+0x924>
 800439c:	2300      	movs	r3, #0
 800439e:	4659      	mov	r1, fp
 80043a0:	220a      	movs	r2, #10
 80043a2:	4620      	mov	r0, r4
 80043a4:	f000 fb2e 	bl	8004a04 <__multadd>
 80043a8:	9b08      	ldr	r3, [sp, #32]
 80043aa:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80043ae:	4683      	mov	fp, r0
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	f000 818f 	beq.w	80046d4 <_dtoa_r+0xb94>
 80043b6:	4639      	mov	r1, r7
 80043b8:	2300      	movs	r3, #0
 80043ba:	220a      	movs	r2, #10
 80043bc:	4620      	mov	r0, r4
 80043be:	f000 fb21 	bl	8004a04 <__multadd>
 80043c2:	f1b9 0f00 	cmp.w	r9, #0
 80043c6:	4607      	mov	r7, r0
 80043c8:	f300 808e 	bgt.w	80044e8 <_dtoa_r+0x9a8>
 80043cc:	9b05      	ldr	r3, [sp, #20]
 80043ce:	2b02      	cmp	r3, #2
 80043d0:	dc50      	bgt.n	8004474 <_dtoa_r+0x934>
 80043d2:	e089      	b.n	80044e8 <_dtoa_r+0x9a8>
 80043d4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80043d6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80043da:	e75d      	b.n	8004298 <_dtoa_r+0x758>
 80043dc:	9b01      	ldr	r3, [sp, #4]
 80043de:	1e5e      	subs	r6, r3, #1
 80043e0:	9b06      	ldr	r3, [sp, #24]
 80043e2:	42b3      	cmp	r3, r6
 80043e4:	bfbf      	itttt	lt
 80043e6:	9b06      	ldrlt	r3, [sp, #24]
 80043e8:	9606      	strlt	r6, [sp, #24]
 80043ea:	1af2      	sublt	r2, r6, r3
 80043ec:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 80043ee:	bfb6      	itet	lt
 80043f0:	189b      	addlt	r3, r3, r2
 80043f2:	1b9e      	subge	r6, r3, r6
 80043f4:	930d      	strlt	r3, [sp, #52]	; 0x34
 80043f6:	9b01      	ldr	r3, [sp, #4]
 80043f8:	bfb8      	it	lt
 80043fa:	2600      	movlt	r6, #0
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	bfb5      	itete	lt
 8004400:	eba8 0503 	sublt.w	r5, r8, r3
 8004404:	9b01      	ldrge	r3, [sp, #4]
 8004406:	2300      	movlt	r3, #0
 8004408:	4645      	movge	r5, r8
 800440a:	e747      	b.n	800429c <_dtoa_r+0x75c>
 800440c:	9e06      	ldr	r6, [sp, #24]
 800440e:	9f08      	ldr	r7, [sp, #32]
 8004410:	4645      	mov	r5, r8
 8004412:	e74c      	b.n	80042ae <_dtoa_r+0x76e>
 8004414:	9a06      	ldr	r2, [sp, #24]
 8004416:	e775      	b.n	8004304 <_dtoa_r+0x7c4>
 8004418:	9b05      	ldr	r3, [sp, #20]
 800441a:	2b01      	cmp	r3, #1
 800441c:	dc18      	bgt.n	8004450 <_dtoa_r+0x910>
 800441e:	9b02      	ldr	r3, [sp, #8]
 8004420:	b9b3      	cbnz	r3, 8004450 <_dtoa_r+0x910>
 8004422:	9b03      	ldr	r3, [sp, #12]
 8004424:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004428:	b9a3      	cbnz	r3, 8004454 <_dtoa_r+0x914>
 800442a:	9b03      	ldr	r3, [sp, #12]
 800442c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004430:	0d1b      	lsrs	r3, r3, #20
 8004432:	051b      	lsls	r3, r3, #20
 8004434:	b12b      	cbz	r3, 8004442 <_dtoa_r+0x902>
 8004436:	9b04      	ldr	r3, [sp, #16]
 8004438:	3301      	adds	r3, #1
 800443a:	9304      	str	r3, [sp, #16]
 800443c:	f108 0801 	add.w	r8, r8, #1
 8004440:	2301      	movs	r3, #1
 8004442:	9306      	str	r3, [sp, #24]
 8004444:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004446:	2b00      	cmp	r3, #0
 8004448:	f47f af74 	bne.w	8004334 <_dtoa_r+0x7f4>
 800444c:	2001      	movs	r0, #1
 800444e:	e779      	b.n	8004344 <_dtoa_r+0x804>
 8004450:	2300      	movs	r3, #0
 8004452:	e7f6      	b.n	8004442 <_dtoa_r+0x902>
 8004454:	9b02      	ldr	r3, [sp, #8]
 8004456:	e7f4      	b.n	8004442 <_dtoa_r+0x902>
 8004458:	d085      	beq.n	8004366 <_dtoa_r+0x826>
 800445a:	4618      	mov	r0, r3
 800445c:	301c      	adds	r0, #28
 800445e:	e77d      	b.n	800435c <_dtoa_r+0x81c>
 8004460:	40240000 	.word	0x40240000
 8004464:	9b01      	ldr	r3, [sp, #4]
 8004466:	2b00      	cmp	r3, #0
 8004468:	dc38      	bgt.n	80044dc <_dtoa_r+0x99c>
 800446a:	9b05      	ldr	r3, [sp, #20]
 800446c:	2b02      	cmp	r3, #2
 800446e:	dd35      	ble.n	80044dc <_dtoa_r+0x99c>
 8004470:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8004474:	f1b9 0f00 	cmp.w	r9, #0
 8004478:	d10d      	bne.n	8004496 <_dtoa_r+0x956>
 800447a:	4631      	mov	r1, r6
 800447c:	464b      	mov	r3, r9
 800447e:	2205      	movs	r2, #5
 8004480:	4620      	mov	r0, r4
 8004482:	f000 fabf 	bl	8004a04 <__multadd>
 8004486:	4601      	mov	r1, r0
 8004488:	4606      	mov	r6, r0
 800448a:	4658      	mov	r0, fp
 800448c:	f000 fcd6 	bl	8004e3c <__mcmp>
 8004490:	2800      	cmp	r0, #0
 8004492:	f73f adbd 	bgt.w	8004010 <_dtoa_r+0x4d0>
 8004496:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004498:	9d00      	ldr	r5, [sp, #0]
 800449a:	ea6f 0a03 	mvn.w	sl, r3
 800449e:	f04f 0800 	mov.w	r8, #0
 80044a2:	4631      	mov	r1, r6
 80044a4:	4620      	mov	r0, r4
 80044a6:	f000 fa8b 	bl	80049c0 <_Bfree>
 80044aa:	2f00      	cmp	r7, #0
 80044ac:	f43f aeb4 	beq.w	8004218 <_dtoa_r+0x6d8>
 80044b0:	f1b8 0f00 	cmp.w	r8, #0
 80044b4:	d005      	beq.n	80044c2 <_dtoa_r+0x982>
 80044b6:	45b8      	cmp	r8, r7
 80044b8:	d003      	beq.n	80044c2 <_dtoa_r+0x982>
 80044ba:	4641      	mov	r1, r8
 80044bc:	4620      	mov	r0, r4
 80044be:	f000 fa7f 	bl	80049c0 <_Bfree>
 80044c2:	4639      	mov	r1, r7
 80044c4:	4620      	mov	r0, r4
 80044c6:	f000 fa7b 	bl	80049c0 <_Bfree>
 80044ca:	e6a5      	b.n	8004218 <_dtoa_r+0x6d8>
 80044cc:	2600      	movs	r6, #0
 80044ce:	4637      	mov	r7, r6
 80044d0:	e7e1      	b.n	8004496 <_dtoa_r+0x956>
 80044d2:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80044d4:	f8dd a01c 	ldr.w	sl, [sp, #28]
 80044d8:	4637      	mov	r7, r6
 80044da:	e599      	b.n	8004010 <_dtoa_r+0x4d0>
 80044dc:	9b08      	ldr	r3, [sp, #32]
 80044de:	f8dd 9004 	ldr.w	r9, [sp, #4]
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	f000 80fd 	beq.w	80046e2 <_dtoa_r+0xba2>
 80044e8:	2d00      	cmp	r5, #0
 80044ea:	dd05      	ble.n	80044f8 <_dtoa_r+0x9b8>
 80044ec:	4639      	mov	r1, r7
 80044ee:	462a      	mov	r2, r5
 80044f0:	4620      	mov	r0, r4
 80044f2:	f000 fc37 	bl	8004d64 <__lshift>
 80044f6:	4607      	mov	r7, r0
 80044f8:	9b06      	ldr	r3, [sp, #24]
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d05c      	beq.n	80045b8 <_dtoa_r+0xa78>
 80044fe:	6879      	ldr	r1, [r7, #4]
 8004500:	4620      	mov	r0, r4
 8004502:	f000 fa1d 	bl	8004940 <_Balloc>
 8004506:	4605      	mov	r5, r0
 8004508:	b928      	cbnz	r0, 8004516 <_dtoa_r+0x9d6>
 800450a:	4b80      	ldr	r3, [pc, #512]	; (800470c <_dtoa_r+0xbcc>)
 800450c:	4602      	mov	r2, r0
 800450e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8004512:	f7ff bb2e 	b.w	8003b72 <_dtoa_r+0x32>
 8004516:	693a      	ldr	r2, [r7, #16]
 8004518:	3202      	adds	r2, #2
 800451a:	0092      	lsls	r2, r2, #2
 800451c:	f107 010c 	add.w	r1, r7, #12
 8004520:	300c      	adds	r0, #12
 8004522:	f000 f9ff 	bl	8004924 <memcpy>
 8004526:	2201      	movs	r2, #1
 8004528:	4629      	mov	r1, r5
 800452a:	4620      	mov	r0, r4
 800452c:	f000 fc1a 	bl	8004d64 <__lshift>
 8004530:	9b00      	ldr	r3, [sp, #0]
 8004532:	3301      	adds	r3, #1
 8004534:	9301      	str	r3, [sp, #4]
 8004536:	9b00      	ldr	r3, [sp, #0]
 8004538:	444b      	add	r3, r9
 800453a:	9307      	str	r3, [sp, #28]
 800453c:	9b02      	ldr	r3, [sp, #8]
 800453e:	f003 0301 	and.w	r3, r3, #1
 8004542:	46b8      	mov	r8, r7
 8004544:	9306      	str	r3, [sp, #24]
 8004546:	4607      	mov	r7, r0
 8004548:	9b01      	ldr	r3, [sp, #4]
 800454a:	4631      	mov	r1, r6
 800454c:	3b01      	subs	r3, #1
 800454e:	4658      	mov	r0, fp
 8004550:	9302      	str	r3, [sp, #8]
 8004552:	f7ff fa67 	bl	8003a24 <quorem>
 8004556:	4603      	mov	r3, r0
 8004558:	3330      	adds	r3, #48	; 0x30
 800455a:	9004      	str	r0, [sp, #16]
 800455c:	4641      	mov	r1, r8
 800455e:	4658      	mov	r0, fp
 8004560:	9308      	str	r3, [sp, #32]
 8004562:	f000 fc6b 	bl	8004e3c <__mcmp>
 8004566:	463a      	mov	r2, r7
 8004568:	4681      	mov	r9, r0
 800456a:	4631      	mov	r1, r6
 800456c:	4620      	mov	r0, r4
 800456e:	f000 fc81 	bl	8004e74 <__mdiff>
 8004572:	68c2      	ldr	r2, [r0, #12]
 8004574:	9b08      	ldr	r3, [sp, #32]
 8004576:	4605      	mov	r5, r0
 8004578:	bb02      	cbnz	r2, 80045bc <_dtoa_r+0xa7c>
 800457a:	4601      	mov	r1, r0
 800457c:	4658      	mov	r0, fp
 800457e:	f000 fc5d 	bl	8004e3c <__mcmp>
 8004582:	9b08      	ldr	r3, [sp, #32]
 8004584:	4602      	mov	r2, r0
 8004586:	4629      	mov	r1, r5
 8004588:	4620      	mov	r0, r4
 800458a:	e9cd 3208 	strd	r3, r2, [sp, #32]
 800458e:	f000 fa17 	bl	80049c0 <_Bfree>
 8004592:	9b05      	ldr	r3, [sp, #20]
 8004594:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004596:	9d01      	ldr	r5, [sp, #4]
 8004598:	ea43 0102 	orr.w	r1, r3, r2
 800459c:	9b06      	ldr	r3, [sp, #24]
 800459e:	430b      	orrs	r3, r1
 80045a0:	9b08      	ldr	r3, [sp, #32]
 80045a2:	d10d      	bne.n	80045c0 <_dtoa_r+0xa80>
 80045a4:	2b39      	cmp	r3, #57	; 0x39
 80045a6:	d029      	beq.n	80045fc <_dtoa_r+0xabc>
 80045a8:	f1b9 0f00 	cmp.w	r9, #0
 80045ac:	dd01      	ble.n	80045b2 <_dtoa_r+0xa72>
 80045ae:	9b04      	ldr	r3, [sp, #16]
 80045b0:	3331      	adds	r3, #49	; 0x31
 80045b2:	9a02      	ldr	r2, [sp, #8]
 80045b4:	7013      	strb	r3, [r2, #0]
 80045b6:	e774      	b.n	80044a2 <_dtoa_r+0x962>
 80045b8:	4638      	mov	r0, r7
 80045ba:	e7b9      	b.n	8004530 <_dtoa_r+0x9f0>
 80045bc:	2201      	movs	r2, #1
 80045be:	e7e2      	b.n	8004586 <_dtoa_r+0xa46>
 80045c0:	f1b9 0f00 	cmp.w	r9, #0
 80045c4:	db06      	blt.n	80045d4 <_dtoa_r+0xa94>
 80045c6:	9905      	ldr	r1, [sp, #20]
 80045c8:	ea41 0909 	orr.w	r9, r1, r9
 80045cc:	9906      	ldr	r1, [sp, #24]
 80045ce:	ea59 0101 	orrs.w	r1, r9, r1
 80045d2:	d120      	bne.n	8004616 <_dtoa_r+0xad6>
 80045d4:	2a00      	cmp	r2, #0
 80045d6:	ddec      	ble.n	80045b2 <_dtoa_r+0xa72>
 80045d8:	4659      	mov	r1, fp
 80045da:	2201      	movs	r2, #1
 80045dc:	4620      	mov	r0, r4
 80045de:	9301      	str	r3, [sp, #4]
 80045e0:	f000 fbc0 	bl	8004d64 <__lshift>
 80045e4:	4631      	mov	r1, r6
 80045e6:	4683      	mov	fp, r0
 80045e8:	f000 fc28 	bl	8004e3c <__mcmp>
 80045ec:	2800      	cmp	r0, #0
 80045ee:	9b01      	ldr	r3, [sp, #4]
 80045f0:	dc02      	bgt.n	80045f8 <_dtoa_r+0xab8>
 80045f2:	d1de      	bne.n	80045b2 <_dtoa_r+0xa72>
 80045f4:	07da      	lsls	r2, r3, #31
 80045f6:	d5dc      	bpl.n	80045b2 <_dtoa_r+0xa72>
 80045f8:	2b39      	cmp	r3, #57	; 0x39
 80045fa:	d1d8      	bne.n	80045ae <_dtoa_r+0xa6e>
 80045fc:	9a02      	ldr	r2, [sp, #8]
 80045fe:	2339      	movs	r3, #57	; 0x39
 8004600:	7013      	strb	r3, [r2, #0]
 8004602:	462b      	mov	r3, r5
 8004604:	461d      	mov	r5, r3
 8004606:	3b01      	subs	r3, #1
 8004608:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800460c:	2a39      	cmp	r2, #57	; 0x39
 800460e:	d050      	beq.n	80046b2 <_dtoa_r+0xb72>
 8004610:	3201      	adds	r2, #1
 8004612:	701a      	strb	r2, [r3, #0]
 8004614:	e745      	b.n	80044a2 <_dtoa_r+0x962>
 8004616:	2a00      	cmp	r2, #0
 8004618:	dd03      	ble.n	8004622 <_dtoa_r+0xae2>
 800461a:	2b39      	cmp	r3, #57	; 0x39
 800461c:	d0ee      	beq.n	80045fc <_dtoa_r+0xabc>
 800461e:	3301      	adds	r3, #1
 8004620:	e7c7      	b.n	80045b2 <_dtoa_r+0xa72>
 8004622:	9a01      	ldr	r2, [sp, #4]
 8004624:	9907      	ldr	r1, [sp, #28]
 8004626:	f802 3c01 	strb.w	r3, [r2, #-1]
 800462a:	428a      	cmp	r2, r1
 800462c:	d02a      	beq.n	8004684 <_dtoa_r+0xb44>
 800462e:	4659      	mov	r1, fp
 8004630:	2300      	movs	r3, #0
 8004632:	220a      	movs	r2, #10
 8004634:	4620      	mov	r0, r4
 8004636:	f000 f9e5 	bl	8004a04 <__multadd>
 800463a:	45b8      	cmp	r8, r7
 800463c:	4683      	mov	fp, r0
 800463e:	f04f 0300 	mov.w	r3, #0
 8004642:	f04f 020a 	mov.w	r2, #10
 8004646:	4641      	mov	r1, r8
 8004648:	4620      	mov	r0, r4
 800464a:	d107      	bne.n	800465c <_dtoa_r+0xb1c>
 800464c:	f000 f9da 	bl	8004a04 <__multadd>
 8004650:	4680      	mov	r8, r0
 8004652:	4607      	mov	r7, r0
 8004654:	9b01      	ldr	r3, [sp, #4]
 8004656:	3301      	adds	r3, #1
 8004658:	9301      	str	r3, [sp, #4]
 800465a:	e775      	b.n	8004548 <_dtoa_r+0xa08>
 800465c:	f000 f9d2 	bl	8004a04 <__multadd>
 8004660:	4639      	mov	r1, r7
 8004662:	4680      	mov	r8, r0
 8004664:	2300      	movs	r3, #0
 8004666:	220a      	movs	r2, #10
 8004668:	4620      	mov	r0, r4
 800466a:	f000 f9cb 	bl	8004a04 <__multadd>
 800466e:	4607      	mov	r7, r0
 8004670:	e7f0      	b.n	8004654 <_dtoa_r+0xb14>
 8004672:	f1b9 0f00 	cmp.w	r9, #0
 8004676:	9a00      	ldr	r2, [sp, #0]
 8004678:	bfcc      	ite	gt
 800467a:	464d      	movgt	r5, r9
 800467c:	2501      	movle	r5, #1
 800467e:	4415      	add	r5, r2
 8004680:	f04f 0800 	mov.w	r8, #0
 8004684:	4659      	mov	r1, fp
 8004686:	2201      	movs	r2, #1
 8004688:	4620      	mov	r0, r4
 800468a:	9301      	str	r3, [sp, #4]
 800468c:	f000 fb6a 	bl	8004d64 <__lshift>
 8004690:	4631      	mov	r1, r6
 8004692:	4683      	mov	fp, r0
 8004694:	f000 fbd2 	bl	8004e3c <__mcmp>
 8004698:	2800      	cmp	r0, #0
 800469a:	dcb2      	bgt.n	8004602 <_dtoa_r+0xac2>
 800469c:	d102      	bne.n	80046a4 <_dtoa_r+0xb64>
 800469e:	9b01      	ldr	r3, [sp, #4]
 80046a0:	07db      	lsls	r3, r3, #31
 80046a2:	d4ae      	bmi.n	8004602 <_dtoa_r+0xac2>
 80046a4:	462b      	mov	r3, r5
 80046a6:	461d      	mov	r5, r3
 80046a8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80046ac:	2a30      	cmp	r2, #48	; 0x30
 80046ae:	d0fa      	beq.n	80046a6 <_dtoa_r+0xb66>
 80046b0:	e6f7      	b.n	80044a2 <_dtoa_r+0x962>
 80046b2:	9a00      	ldr	r2, [sp, #0]
 80046b4:	429a      	cmp	r2, r3
 80046b6:	d1a5      	bne.n	8004604 <_dtoa_r+0xac4>
 80046b8:	f10a 0a01 	add.w	sl, sl, #1
 80046bc:	2331      	movs	r3, #49	; 0x31
 80046be:	e779      	b.n	80045b4 <_dtoa_r+0xa74>
 80046c0:	4b13      	ldr	r3, [pc, #76]	; (8004710 <_dtoa_r+0xbd0>)
 80046c2:	f7ff baaf 	b.w	8003c24 <_dtoa_r+0xe4>
 80046c6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	f47f aa86 	bne.w	8003bda <_dtoa_r+0x9a>
 80046ce:	4b11      	ldr	r3, [pc, #68]	; (8004714 <_dtoa_r+0xbd4>)
 80046d0:	f7ff baa8 	b.w	8003c24 <_dtoa_r+0xe4>
 80046d4:	f1b9 0f00 	cmp.w	r9, #0
 80046d8:	dc03      	bgt.n	80046e2 <_dtoa_r+0xba2>
 80046da:	9b05      	ldr	r3, [sp, #20]
 80046dc:	2b02      	cmp	r3, #2
 80046de:	f73f aec9 	bgt.w	8004474 <_dtoa_r+0x934>
 80046e2:	9d00      	ldr	r5, [sp, #0]
 80046e4:	4631      	mov	r1, r6
 80046e6:	4658      	mov	r0, fp
 80046e8:	f7ff f99c 	bl	8003a24 <quorem>
 80046ec:	f100 0330 	add.w	r3, r0, #48	; 0x30
 80046f0:	f805 3b01 	strb.w	r3, [r5], #1
 80046f4:	9a00      	ldr	r2, [sp, #0]
 80046f6:	1aaa      	subs	r2, r5, r2
 80046f8:	4591      	cmp	r9, r2
 80046fa:	ddba      	ble.n	8004672 <_dtoa_r+0xb32>
 80046fc:	4659      	mov	r1, fp
 80046fe:	2300      	movs	r3, #0
 8004700:	220a      	movs	r2, #10
 8004702:	4620      	mov	r0, r4
 8004704:	f000 f97e 	bl	8004a04 <__multadd>
 8004708:	4683      	mov	fp, r0
 800470a:	e7eb      	b.n	80046e4 <_dtoa_r+0xba4>
 800470c:	08005ccb 	.word	0x08005ccb
 8004710:	08005c24 	.word	0x08005c24
 8004714:	08005c48 	.word	0x08005c48

08004718 <std>:
 8004718:	2300      	movs	r3, #0
 800471a:	b510      	push	{r4, lr}
 800471c:	4604      	mov	r4, r0
 800471e:	e9c0 3300 	strd	r3, r3, [r0]
 8004722:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004726:	6083      	str	r3, [r0, #8]
 8004728:	8181      	strh	r1, [r0, #12]
 800472a:	6643      	str	r3, [r0, #100]	; 0x64
 800472c:	81c2      	strh	r2, [r0, #14]
 800472e:	6183      	str	r3, [r0, #24]
 8004730:	4619      	mov	r1, r3
 8004732:	2208      	movs	r2, #8
 8004734:	305c      	adds	r0, #92	; 0x5c
 8004736:	f7fe fcd5 	bl	80030e4 <memset>
 800473a:	4b05      	ldr	r3, [pc, #20]	; (8004750 <std+0x38>)
 800473c:	6263      	str	r3, [r4, #36]	; 0x24
 800473e:	4b05      	ldr	r3, [pc, #20]	; (8004754 <std+0x3c>)
 8004740:	62a3      	str	r3, [r4, #40]	; 0x28
 8004742:	4b05      	ldr	r3, [pc, #20]	; (8004758 <std+0x40>)
 8004744:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004746:	4b05      	ldr	r3, [pc, #20]	; (800475c <std+0x44>)
 8004748:	6224      	str	r4, [r4, #32]
 800474a:	6323      	str	r3, [r4, #48]	; 0x30
 800474c:	bd10      	pop	{r4, pc}
 800474e:	bf00      	nop
 8004750:	08005515 	.word	0x08005515
 8004754:	08005537 	.word	0x08005537
 8004758:	0800556f 	.word	0x0800556f
 800475c:	08005593 	.word	0x08005593

08004760 <_cleanup_r>:
 8004760:	4901      	ldr	r1, [pc, #4]	; (8004768 <_cleanup_r+0x8>)
 8004762:	f000 b8af 	b.w	80048c4 <_fwalk_reent>
 8004766:	bf00      	nop
 8004768:	080058a9 	.word	0x080058a9

0800476c <__sfmoreglue>:
 800476c:	b570      	push	{r4, r5, r6, lr}
 800476e:	1e4a      	subs	r2, r1, #1
 8004770:	2568      	movs	r5, #104	; 0x68
 8004772:	4355      	muls	r5, r2
 8004774:	460e      	mov	r6, r1
 8004776:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800477a:	f000 fcbf 	bl	80050fc <_malloc_r>
 800477e:	4604      	mov	r4, r0
 8004780:	b140      	cbz	r0, 8004794 <__sfmoreglue+0x28>
 8004782:	2100      	movs	r1, #0
 8004784:	e9c0 1600 	strd	r1, r6, [r0]
 8004788:	300c      	adds	r0, #12
 800478a:	60a0      	str	r0, [r4, #8]
 800478c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004790:	f7fe fca8 	bl	80030e4 <memset>
 8004794:	4620      	mov	r0, r4
 8004796:	bd70      	pop	{r4, r5, r6, pc}

08004798 <__sfp_lock_acquire>:
 8004798:	4801      	ldr	r0, [pc, #4]	; (80047a0 <__sfp_lock_acquire+0x8>)
 800479a:	f000 b8b8 	b.w	800490e <__retarget_lock_acquire_recursive>
 800479e:	bf00      	nop
 80047a0:	20000350 	.word	0x20000350

080047a4 <__sfp_lock_release>:
 80047a4:	4801      	ldr	r0, [pc, #4]	; (80047ac <__sfp_lock_release+0x8>)
 80047a6:	f000 b8b3 	b.w	8004910 <__retarget_lock_release_recursive>
 80047aa:	bf00      	nop
 80047ac:	20000350 	.word	0x20000350

080047b0 <__sinit_lock_acquire>:
 80047b0:	4801      	ldr	r0, [pc, #4]	; (80047b8 <__sinit_lock_acquire+0x8>)
 80047b2:	f000 b8ac 	b.w	800490e <__retarget_lock_acquire_recursive>
 80047b6:	bf00      	nop
 80047b8:	2000034b 	.word	0x2000034b

080047bc <__sinit_lock_release>:
 80047bc:	4801      	ldr	r0, [pc, #4]	; (80047c4 <__sinit_lock_release+0x8>)
 80047be:	f000 b8a7 	b.w	8004910 <__retarget_lock_release_recursive>
 80047c2:	bf00      	nop
 80047c4:	2000034b 	.word	0x2000034b

080047c8 <__sinit>:
 80047c8:	b510      	push	{r4, lr}
 80047ca:	4604      	mov	r4, r0
 80047cc:	f7ff fff0 	bl	80047b0 <__sinit_lock_acquire>
 80047d0:	69a3      	ldr	r3, [r4, #24]
 80047d2:	b11b      	cbz	r3, 80047dc <__sinit+0x14>
 80047d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80047d8:	f7ff bff0 	b.w	80047bc <__sinit_lock_release>
 80047dc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80047e0:	6523      	str	r3, [r4, #80]	; 0x50
 80047e2:	4b13      	ldr	r3, [pc, #76]	; (8004830 <__sinit+0x68>)
 80047e4:	4a13      	ldr	r2, [pc, #76]	; (8004834 <__sinit+0x6c>)
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	62a2      	str	r2, [r4, #40]	; 0x28
 80047ea:	42a3      	cmp	r3, r4
 80047ec:	bf04      	itt	eq
 80047ee:	2301      	moveq	r3, #1
 80047f0:	61a3      	streq	r3, [r4, #24]
 80047f2:	4620      	mov	r0, r4
 80047f4:	f000 f820 	bl	8004838 <__sfp>
 80047f8:	6060      	str	r0, [r4, #4]
 80047fa:	4620      	mov	r0, r4
 80047fc:	f000 f81c 	bl	8004838 <__sfp>
 8004800:	60a0      	str	r0, [r4, #8]
 8004802:	4620      	mov	r0, r4
 8004804:	f000 f818 	bl	8004838 <__sfp>
 8004808:	2200      	movs	r2, #0
 800480a:	60e0      	str	r0, [r4, #12]
 800480c:	2104      	movs	r1, #4
 800480e:	6860      	ldr	r0, [r4, #4]
 8004810:	f7ff ff82 	bl	8004718 <std>
 8004814:	68a0      	ldr	r0, [r4, #8]
 8004816:	2201      	movs	r2, #1
 8004818:	2109      	movs	r1, #9
 800481a:	f7ff ff7d 	bl	8004718 <std>
 800481e:	68e0      	ldr	r0, [r4, #12]
 8004820:	2202      	movs	r2, #2
 8004822:	2112      	movs	r1, #18
 8004824:	f7ff ff78 	bl	8004718 <std>
 8004828:	2301      	movs	r3, #1
 800482a:	61a3      	str	r3, [r4, #24]
 800482c:	e7d2      	b.n	80047d4 <__sinit+0xc>
 800482e:	bf00      	nop
 8004830:	08005c10 	.word	0x08005c10
 8004834:	08004761 	.word	0x08004761

08004838 <__sfp>:
 8004838:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800483a:	4607      	mov	r7, r0
 800483c:	f7ff ffac 	bl	8004798 <__sfp_lock_acquire>
 8004840:	4b1e      	ldr	r3, [pc, #120]	; (80048bc <__sfp+0x84>)
 8004842:	681e      	ldr	r6, [r3, #0]
 8004844:	69b3      	ldr	r3, [r6, #24]
 8004846:	b913      	cbnz	r3, 800484e <__sfp+0x16>
 8004848:	4630      	mov	r0, r6
 800484a:	f7ff ffbd 	bl	80047c8 <__sinit>
 800484e:	3648      	adds	r6, #72	; 0x48
 8004850:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004854:	3b01      	subs	r3, #1
 8004856:	d503      	bpl.n	8004860 <__sfp+0x28>
 8004858:	6833      	ldr	r3, [r6, #0]
 800485a:	b30b      	cbz	r3, 80048a0 <__sfp+0x68>
 800485c:	6836      	ldr	r6, [r6, #0]
 800485e:	e7f7      	b.n	8004850 <__sfp+0x18>
 8004860:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004864:	b9d5      	cbnz	r5, 800489c <__sfp+0x64>
 8004866:	4b16      	ldr	r3, [pc, #88]	; (80048c0 <__sfp+0x88>)
 8004868:	60e3      	str	r3, [r4, #12]
 800486a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800486e:	6665      	str	r5, [r4, #100]	; 0x64
 8004870:	f000 f84c 	bl	800490c <__retarget_lock_init_recursive>
 8004874:	f7ff ff96 	bl	80047a4 <__sfp_lock_release>
 8004878:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800487c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8004880:	6025      	str	r5, [r4, #0]
 8004882:	61a5      	str	r5, [r4, #24]
 8004884:	2208      	movs	r2, #8
 8004886:	4629      	mov	r1, r5
 8004888:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800488c:	f7fe fc2a 	bl	80030e4 <memset>
 8004890:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004894:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004898:	4620      	mov	r0, r4
 800489a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800489c:	3468      	adds	r4, #104	; 0x68
 800489e:	e7d9      	b.n	8004854 <__sfp+0x1c>
 80048a0:	2104      	movs	r1, #4
 80048a2:	4638      	mov	r0, r7
 80048a4:	f7ff ff62 	bl	800476c <__sfmoreglue>
 80048a8:	4604      	mov	r4, r0
 80048aa:	6030      	str	r0, [r6, #0]
 80048ac:	2800      	cmp	r0, #0
 80048ae:	d1d5      	bne.n	800485c <__sfp+0x24>
 80048b0:	f7ff ff78 	bl	80047a4 <__sfp_lock_release>
 80048b4:	230c      	movs	r3, #12
 80048b6:	603b      	str	r3, [r7, #0]
 80048b8:	e7ee      	b.n	8004898 <__sfp+0x60>
 80048ba:	bf00      	nop
 80048bc:	08005c10 	.word	0x08005c10
 80048c0:	ffff0001 	.word	0xffff0001

080048c4 <_fwalk_reent>:
 80048c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80048c8:	4606      	mov	r6, r0
 80048ca:	4688      	mov	r8, r1
 80048cc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80048d0:	2700      	movs	r7, #0
 80048d2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80048d6:	f1b9 0901 	subs.w	r9, r9, #1
 80048da:	d505      	bpl.n	80048e8 <_fwalk_reent+0x24>
 80048dc:	6824      	ldr	r4, [r4, #0]
 80048de:	2c00      	cmp	r4, #0
 80048e0:	d1f7      	bne.n	80048d2 <_fwalk_reent+0xe>
 80048e2:	4638      	mov	r0, r7
 80048e4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80048e8:	89ab      	ldrh	r3, [r5, #12]
 80048ea:	2b01      	cmp	r3, #1
 80048ec:	d907      	bls.n	80048fe <_fwalk_reent+0x3a>
 80048ee:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80048f2:	3301      	adds	r3, #1
 80048f4:	d003      	beq.n	80048fe <_fwalk_reent+0x3a>
 80048f6:	4629      	mov	r1, r5
 80048f8:	4630      	mov	r0, r6
 80048fa:	47c0      	blx	r8
 80048fc:	4307      	orrs	r7, r0
 80048fe:	3568      	adds	r5, #104	; 0x68
 8004900:	e7e9      	b.n	80048d6 <_fwalk_reent+0x12>
	...

08004904 <_localeconv_r>:
 8004904:	4800      	ldr	r0, [pc, #0]	; (8004908 <_localeconv_r+0x4>)
 8004906:	4770      	bx	lr
 8004908:	200001c0 	.word	0x200001c0

0800490c <__retarget_lock_init_recursive>:
 800490c:	4770      	bx	lr

0800490e <__retarget_lock_acquire_recursive>:
 800490e:	4770      	bx	lr

08004910 <__retarget_lock_release_recursive>:
 8004910:	4770      	bx	lr
	...

08004914 <malloc>:
 8004914:	4b02      	ldr	r3, [pc, #8]	; (8004920 <malloc+0xc>)
 8004916:	4601      	mov	r1, r0
 8004918:	6818      	ldr	r0, [r3, #0]
 800491a:	f000 bbef 	b.w	80050fc <_malloc_r>
 800491e:	bf00      	nop
 8004920:	2000006c 	.word	0x2000006c

08004924 <memcpy>:
 8004924:	440a      	add	r2, r1
 8004926:	4291      	cmp	r1, r2
 8004928:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800492c:	d100      	bne.n	8004930 <memcpy+0xc>
 800492e:	4770      	bx	lr
 8004930:	b510      	push	{r4, lr}
 8004932:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004936:	f803 4f01 	strb.w	r4, [r3, #1]!
 800493a:	4291      	cmp	r1, r2
 800493c:	d1f9      	bne.n	8004932 <memcpy+0xe>
 800493e:	bd10      	pop	{r4, pc}

08004940 <_Balloc>:
 8004940:	b570      	push	{r4, r5, r6, lr}
 8004942:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8004944:	4604      	mov	r4, r0
 8004946:	460d      	mov	r5, r1
 8004948:	b976      	cbnz	r6, 8004968 <_Balloc+0x28>
 800494a:	2010      	movs	r0, #16
 800494c:	f7ff ffe2 	bl	8004914 <malloc>
 8004950:	4602      	mov	r2, r0
 8004952:	6260      	str	r0, [r4, #36]	; 0x24
 8004954:	b920      	cbnz	r0, 8004960 <_Balloc+0x20>
 8004956:	4b18      	ldr	r3, [pc, #96]	; (80049b8 <_Balloc+0x78>)
 8004958:	4818      	ldr	r0, [pc, #96]	; (80049bc <_Balloc+0x7c>)
 800495a:	2166      	movs	r1, #102	; 0x66
 800495c:	f000 fef0 	bl	8005740 <__assert_func>
 8004960:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8004964:	6006      	str	r6, [r0, #0]
 8004966:	60c6      	str	r6, [r0, #12]
 8004968:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800496a:	68f3      	ldr	r3, [r6, #12]
 800496c:	b183      	cbz	r3, 8004990 <_Balloc+0x50>
 800496e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004970:	68db      	ldr	r3, [r3, #12]
 8004972:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8004976:	b9b8      	cbnz	r0, 80049a8 <_Balloc+0x68>
 8004978:	2101      	movs	r1, #1
 800497a:	fa01 f605 	lsl.w	r6, r1, r5
 800497e:	1d72      	adds	r2, r6, #5
 8004980:	0092      	lsls	r2, r2, #2
 8004982:	4620      	mov	r0, r4
 8004984:	f000 fb5a 	bl	800503c <_calloc_r>
 8004988:	b160      	cbz	r0, 80049a4 <_Balloc+0x64>
 800498a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800498e:	e00e      	b.n	80049ae <_Balloc+0x6e>
 8004990:	2221      	movs	r2, #33	; 0x21
 8004992:	2104      	movs	r1, #4
 8004994:	4620      	mov	r0, r4
 8004996:	f000 fb51 	bl	800503c <_calloc_r>
 800499a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800499c:	60f0      	str	r0, [r6, #12]
 800499e:	68db      	ldr	r3, [r3, #12]
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d1e4      	bne.n	800496e <_Balloc+0x2e>
 80049a4:	2000      	movs	r0, #0
 80049a6:	bd70      	pop	{r4, r5, r6, pc}
 80049a8:	6802      	ldr	r2, [r0, #0]
 80049aa:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80049ae:	2300      	movs	r3, #0
 80049b0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80049b4:	e7f7      	b.n	80049a6 <_Balloc+0x66>
 80049b6:	bf00      	nop
 80049b8:	08005c55 	.word	0x08005c55
 80049bc:	08005d3c 	.word	0x08005d3c

080049c0 <_Bfree>:
 80049c0:	b570      	push	{r4, r5, r6, lr}
 80049c2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80049c4:	4605      	mov	r5, r0
 80049c6:	460c      	mov	r4, r1
 80049c8:	b976      	cbnz	r6, 80049e8 <_Bfree+0x28>
 80049ca:	2010      	movs	r0, #16
 80049cc:	f7ff ffa2 	bl	8004914 <malloc>
 80049d0:	4602      	mov	r2, r0
 80049d2:	6268      	str	r0, [r5, #36]	; 0x24
 80049d4:	b920      	cbnz	r0, 80049e0 <_Bfree+0x20>
 80049d6:	4b09      	ldr	r3, [pc, #36]	; (80049fc <_Bfree+0x3c>)
 80049d8:	4809      	ldr	r0, [pc, #36]	; (8004a00 <_Bfree+0x40>)
 80049da:	218a      	movs	r1, #138	; 0x8a
 80049dc:	f000 feb0 	bl	8005740 <__assert_func>
 80049e0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80049e4:	6006      	str	r6, [r0, #0]
 80049e6:	60c6      	str	r6, [r0, #12]
 80049e8:	b13c      	cbz	r4, 80049fa <_Bfree+0x3a>
 80049ea:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80049ec:	6862      	ldr	r2, [r4, #4]
 80049ee:	68db      	ldr	r3, [r3, #12]
 80049f0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80049f4:	6021      	str	r1, [r4, #0]
 80049f6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80049fa:	bd70      	pop	{r4, r5, r6, pc}
 80049fc:	08005c55 	.word	0x08005c55
 8004a00:	08005d3c 	.word	0x08005d3c

08004a04 <__multadd>:
 8004a04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004a08:	690e      	ldr	r6, [r1, #16]
 8004a0a:	4607      	mov	r7, r0
 8004a0c:	4698      	mov	r8, r3
 8004a0e:	460c      	mov	r4, r1
 8004a10:	f101 0014 	add.w	r0, r1, #20
 8004a14:	2300      	movs	r3, #0
 8004a16:	6805      	ldr	r5, [r0, #0]
 8004a18:	b2a9      	uxth	r1, r5
 8004a1a:	fb02 8101 	mla	r1, r2, r1, r8
 8004a1e:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8004a22:	0c2d      	lsrs	r5, r5, #16
 8004a24:	fb02 c505 	mla	r5, r2, r5, ip
 8004a28:	b289      	uxth	r1, r1
 8004a2a:	3301      	adds	r3, #1
 8004a2c:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8004a30:	429e      	cmp	r6, r3
 8004a32:	f840 1b04 	str.w	r1, [r0], #4
 8004a36:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8004a3a:	dcec      	bgt.n	8004a16 <__multadd+0x12>
 8004a3c:	f1b8 0f00 	cmp.w	r8, #0
 8004a40:	d022      	beq.n	8004a88 <__multadd+0x84>
 8004a42:	68a3      	ldr	r3, [r4, #8]
 8004a44:	42b3      	cmp	r3, r6
 8004a46:	dc19      	bgt.n	8004a7c <__multadd+0x78>
 8004a48:	6861      	ldr	r1, [r4, #4]
 8004a4a:	4638      	mov	r0, r7
 8004a4c:	3101      	adds	r1, #1
 8004a4e:	f7ff ff77 	bl	8004940 <_Balloc>
 8004a52:	4605      	mov	r5, r0
 8004a54:	b928      	cbnz	r0, 8004a62 <__multadd+0x5e>
 8004a56:	4602      	mov	r2, r0
 8004a58:	4b0d      	ldr	r3, [pc, #52]	; (8004a90 <__multadd+0x8c>)
 8004a5a:	480e      	ldr	r0, [pc, #56]	; (8004a94 <__multadd+0x90>)
 8004a5c:	21b5      	movs	r1, #181	; 0xb5
 8004a5e:	f000 fe6f 	bl	8005740 <__assert_func>
 8004a62:	6922      	ldr	r2, [r4, #16]
 8004a64:	3202      	adds	r2, #2
 8004a66:	f104 010c 	add.w	r1, r4, #12
 8004a6a:	0092      	lsls	r2, r2, #2
 8004a6c:	300c      	adds	r0, #12
 8004a6e:	f7ff ff59 	bl	8004924 <memcpy>
 8004a72:	4621      	mov	r1, r4
 8004a74:	4638      	mov	r0, r7
 8004a76:	f7ff ffa3 	bl	80049c0 <_Bfree>
 8004a7a:	462c      	mov	r4, r5
 8004a7c:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8004a80:	3601      	adds	r6, #1
 8004a82:	f8c3 8014 	str.w	r8, [r3, #20]
 8004a86:	6126      	str	r6, [r4, #16]
 8004a88:	4620      	mov	r0, r4
 8004a8a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004a8e:	bf00      	nop
 8004a90:	08005ccb 	.word	0x08005ccb
 8004a94:	08005d3c 	.word	0x08005d3c

08004a98 <__hi0bits>:
 8004a98:	0c03      	lsrs	r3, r0, #16
 8004a9a:	041b      	lsls	r3, r3, #16
 8004a9c:	b9d3      	cbnz	r3, 8004ad4 <__hi0bits+0x3c>
 8004a9e:	0400      	lsls	r0, r0, #16
 8004aa0:	2310      	movs	r3, #16
 8004aa2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8004aa6:	bf04      	itt	eq
 8004aa8:	0200      	lsleq	r0, r0, #8
 8004aaa:	3308      	addeq	r3, #8
 8004aac:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8004ab0:	bf04      	itt	eq
 8004ab2:	0100      	lsleq	r0, r0, #4
 8004ab4:	3304      	addeq	r3, #4
 8004ab6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8004aba:	bf04      	itt	eq
 8004abc:	0080      	lsleq	r0, r0, #2
 8004abe:	3302      	addeq	r3, #2
 8004ac0:	2800      	cmp	r0, #0
 8004ac2:	db05      	blt.n	8004ad0 <__hi0bits+0x38>
 8004ac4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8004ac8:	f103 0301 	add.w	r3, r3, #1
 8004acc:	bf08      	it	eq
 8004ace:	2320      	moveq	r3, #32
 8004ad0:	4618      	mov	r0, r3
 8004ad2:	4770      	bx	lr
 8004ad4:	2300      	movs	r3, #0
 8004ad6:	e7e4      	b.n	8004aa2 <__hi0bits+0xa>

08004ad8 <__lo0bits>:
 8004ad8:	6803      	ldr	r3, [r0, #0]
 8004ada:	f013 0207 	ands.w	r2, r3, #7
 8004ade:	4601      	mov	r1, r0
 8004ae0:	d00b      	beq.n	8004afa <__lo0bits+0x22>
 8004ae2:	07da      	lsls	r2, r3, #31
 8004ae4:	d424      	bmi.n	8004b30 <__lo0bits+0x58>
 8004ae6:	0798      	lsls	r0, r3, #30
 8004ae8:	bf49      	itett	mi
 8004aea:	085b      	lsrmi	r3, r3, #1
 8004aec:	089b      	lsrpl	r3, r3, #2
 8004aee:	2001      	movmi	r0, #1
 8004af0:	600b      	strmi	r3, [r1, #0]
 8004af2:	bf5c      	itt	pl
 8004af4:	600b      	strpl	r3, [r1, #0]
 8004af6:	2002      	movpl	r0, #2
 8004af8:	4770      	bx	lr
 8004afa:	b298      	uxth	r0, r3
 8004afc:	b9b0      	cbnz	r0, 8004b2c <__lo0bits+0x54>
 8004afe:	0c1b      	lsrs	r3, r3, #16
 8004b00:	2010      	movs	r0, #16
 8004b02:	f013 0fff 	tst.w	r3, #255	; 0xff
 8004b06:	bf04      	itt	eq
 8004b08:	0a1b      	lsreq	r3, r3, #8
 8004b0a:	3008      	addeq	r0, #8
 8004b0c:	071a      	lsls	r2, r3, #28
 8004b0e:	bf04      	itt	eq
 8004b10:	091b      	lsreq	r3, r3, #4
 8004b12:	3004      	addeq	r0, #4
 8004b14:	079a      	lsls	r2, r3, #30
 8004b16:	bf04      	itt	eq
 8004b18:	089b      	lsreq	r3, r3, #2
 8004b1a:	3002      	addeq	r0, #2
 8004b1c:	07da      	lsls	r2, r3, #31
 8004b1e:	d403      	bmi.n	8004b28 <__lo0bits+0x50>
 8004b20:	085b      	lsrs	r3, r3, #1
 8004b22:	f100 0001 	add.w	r0, r0, #1
 8004b26:	d005      	beq.n	8004b34 <__lo0bits+0x5c>
 8004b28:	600b      	str	r3, [r1, #0]
 8004b2a:	4770      	bx	lr
 8004b2c:	4610      	mov	r0, r2
 8004b2e:	e7e8      	b.n	8004b02 <__lo0bits+0x2a>
 8004b30:	2000      	movs	r0, #0
 8004b32:	4770      	bx	lr
 8004b34:	2020      	movs	r0, #32
 8004b36:	4770      	bx	lr

08004b38 <__i2b>:
 8004b38:	b510      	push	{r4, lr}
 8004b3a:	460c      	mov	r4, r1
 8004b3c:	2101      	movs	r1, #1
 8004b3e:	f7ff feff 	bl	8004940 <_Balloc>
 8004b42:	4602      	mov	r2, r0
 8004b44:	b928      	cbnz	r0, 8004b52 <__i2b+0x1a>
 8004b46:	4b05      	ldr	r3, [pc, #20]	; (8004b5c <__i2b+0x24>)
 8004b48:	4805      	ldr	r0, [pc, #20]	; (8004b60 <__i2b+0x28>)
 8004b4a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8004b4e:	f000 fdf7 	bl	8005740 <__assert_func>
 8004b52:	2301      	movs	r3, #1
 8004b54:	6144      	str	r4, [r0, #20]
 8004b56:	6103      	str	r3, [r0, #16]
 8004b58:	bd10      	pop	{r4, pc}
 8004b5a:	bf00      	nop
 8004b5c:	08005ccb 	.word	0x08005ccb
 8004b60:	08005d3c 	.word	0x08005d3c

08004b64 <__multiply>:
 8004b64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b68:	4614      	mov	r4, r2
 8004b6a:	690a      	ldr	r2, [r1, #16]
 8004b6c:	6923      	ldr	r3, [r4, #16]
 8004b6e:	429a      	cmp	r2, r3
 8004b70:	bfb8      	it	lt
 8004b72:	460b      	movlt	r3, r1
 8004b74:	460d      	mov	r5, r1
 8004b76:	bfbc      	itt	lt
 8004b78:	4625      	movlt	r5, r4
 8004b7a:	461c      	movlt	r4, r3
 8004b7c:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8004b80:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8004b84:	68ab      	ldr	r3, [r5, #8]
 8004b86:	6869      	ldr	r1, [r5, #4]
 8004b88:	eb0a 0709 	add.w	r7, sl, r9
 8004b8c:	42bb      	cmp	r3, r7
 8004b8e:	b085      	sub	sp, #20
 8004b90:	bfb8      	it	lt
 8004b92:	3101      	addlt	r1, #1
 8004b94:	f7ff fed4 	bl	8004940 <_Balloc>
 8004b98:	b930      	cbnz	r0, 8004ba8 <__multiply+0x44>
 8004b9a:	4602      	mov	r2, r0
 8004b9c:	4b42      	ldr	r3, [pc, #264]	; (8004ca8 <__multiply+0x144>)
 8004b9e:	4843      	ldr	r0, [pc, #268]	; (8004cac <__multiply+0x148>)
 8004ba0:	f240 115d 	movw	r1, #349	; 0x15d
 8004ba4:	f000 fdcc 	bl	8005740 <__assert_func>
 8004ba8:	f100 0614 	add.w	r6, r0, #20
 8004bac:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8004bb0:	4633      	mov	r3, r6
 8004bb2:	2200      	movs	r2, #0
 8004bb4:	4543      	cmp	r3, r8
 8004bb6:	d31e      	bcc.n	8004bf6 <__multiply+0x92>
 8004bb8:	f105 0c14 	add.w	ip, r5, #20
 8004bbc:	f104 0314 	add.w	r3, r4, #20
 8004bc0:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8004bc4:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8004bc8:	9202      	str	r2, [sp, #8]
 8004bca:	ebac 0205 	sub.w	r2, ip, r5
 8004bce:	3a15      	subs	r2, #21
 8004bd0:	f022 0203 	bic.w	r2, r2, #3
 8004bd4:	3204      	adds	r2, #4
 8004bd6:	f105 0115 	add.w	r1, r5, #21
 8004bda:	458c      	cmp	ip, r1
 8004bdc:	bf38      	it	cc
 8004bde:	2204      	movcc	r2, #4
 8004be0:	9201      	str	r2, [sp, #4]
 8004be2:	9a02      	ldr	r2, [sp, #8]
 8004be4:	9303      	str	r3, [sp, #12]
 8004be6:	429a      	cmp	r2, r3
 8004be8:	d808      	bhi.n	8004bfc <__multiply+0x98>
 8004bea:	2f00      	cmp	r7, #0
 8004bec:	dc55      	bgt.n	8004c9a <__multiply+0x136>
 8004bee:	6107      	str	r7, [r0, #16]
 8004bf0:	b005      	add	sp, #20
 8004bf2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004bf6:	f843 2b04 	str.w	r2, [r3], #4
 8004bfa:	e7db      	b.n	8004bb4 <__multiply+0x50>
 8004bfc:	f8b3 a000 	ldrh.w	sl, [r3]
 8004c00:	f1ba 0f00 	cmp.w	sl, #0
 8004c04:	d020      	beq.n	8004c48 <__multiply+0xe4>
 8004c06:	f105 0e14 	add.w	lr, r5, #20
 8004c0a:	46b1      	mov	r9, r6
 8004c0c:	2200      	movs	r2, #0
 8004c0e:	f85e 4b04 	ldr.w	r4, [lr], #4
 8004c12:	f8d9 b000 	ldr.w	fp, [r9]
 8004c16:	b2a1      	uxth	r1, r4
 8004c18:	fa1f fb8b 	uxth.w	fp, fp
 8004c1c:	fb0a b101 	mla	r1, sl, r1, fp
 8004c20:	4411      	add	r1, r2
 8004c22:	f8d9 2000 	ldr.w	r2, [r9]
 8004c26:	0c24      	lsrs	r4, r4, #16
 8004c28:	0c12      	lsrs	r2, r2, #16
 8004c2a:	fb0a 2404 	mla	r4, sl, r4, r2
 8004c2e:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8004c32:	b289      	uxth	r1, r1
 8004c34:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8004c38:	45f4      	cmp	ip, lr
 8004c3a:	f849 1b04 	str.w	r1, [r9], #4
 8004c3e:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8004c42:	d8e4      	bhi.n	8004c0e <__multiply+0xaa>
 8004c44:	9901      	ldr	r1, [sp, #4]
 8004c46:	5072      	str	r2, [r6, r1]
 8004c48:	9a03      	ldr	r2, [sp, #12]
 8004c4a:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8004c4e:	3304      	adds	r3, #4
 8004c50:	f1b9 0f00 	cmp.w	r9, #0
 8004c54:	d01f      	beq.n	8004c96 <__multiply+0x132>
 8004c56:	6834      	ldr	r4, [r6, #0]
 8004c58:	f105 0114 	add.w	r1, r5, #20
 8004c5c:	46b6      	mov	lr, r6
 8004c5e:	f04f 0a00 	mov.w	sl, #0
 8004c62:	880a      	ldrh	r2, [r1, #0]
 8004c64:	f8be b002 	ldrh.w	fp, [lr, #2]
 8004c68:	fb09 b202 	mla	r2, r9, r2, fp
 8004c6c:	4492      	add	sl, r2
 8004c6e:	b2a4      	uxth	r4, r4
 8004c70:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8004c74:	f84e 4b04 	str.w	r4, [lr], #4
 8004c78:	f851 4b04 	ldr.w	r4, [r1], #4
 8004c7c:	f8be 2000 	ldrh.w	r2, [lr]
 8004c80:	0c24      	lsrs	r4, r4, #16
 8004c82:	fb09 2404 	mla	r4, r9, r4, r2
 8004c86:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8004c8a:	458c      	cmp	ip, r1
 8004c8c:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8004c90:	d8e7      	bhi.n	8004c62 <__multiply+0xfe>
 8004c92:	9a01      	ldr	r2, [sp, #4]
 8004c94:	50b4      	str	r4, [r6, r2]
 8004c96:	3604      	adds	r6, #4
 8004c98:	e7a3      	b.n	8004be2 <__multiply+0x7e>
 8004c9a:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d1a5      	bne.n	8004bee <__multiply+0x8a>
 8004ca2:	3f01      	subs	r7, #1
 8004ca4:	e7a1      	b.n	8004bea <__multiply+0x86>
 8004ca6:	bf00      	nop
 8004ca8:	08005ccb 	.word	0x08005ccb
 8004cac:	08005d3c 	.word	0x08005d3c

08004cb0 <__pow5mult>:
 8004cb0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004cb4:	4615      	mov	r5, r2
 8004cb6:	f012 0203 	ands.w	r2, r2, #3
 8004cba:	4606      	mov	r6, r0
 8004cbc:	460f      	mov	r7, r1
 8004cbe:	d007      	beq.n	8004cd0 <__pow5mult+0x20>
 8004cc0:	4c25      	ldr	r4, [pc, #148]	; (8004d58 <__pow5mult+0xa8>)
 8004cc2:	3a01      	subs	r2, #1
 8004cc4:	2300      	movs	r3, #0
 8004cc6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8004cca:	f7ff fe9b 	bl	8004a04 <__multadd>
 8004cce:	4607      	mov	r7, r0
 8004cd0:	10ad      	asrs	r5, r5, #2
 8004cd2:	d03d      	beq.n	8004d50 <__pow5mult+0xa0>
 8004cd4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8004cd6:	b97c      	cbnz	r4, 8004cf8 <__pow5mult+0x48>
 8004cd8:	2010      	movs	r0, #16
 8004cda:	f7ff fe1b 	bl	8004914 <malloc>
 8004cde:	4602      	mov	r2, r0
 8004ce0:	6270      	str	r0, [r6, #36]	; 0x24
 8004ce2:	b928      	cbnz	r0, 8004cf0 <__pow5mult+0x40>
 8004ce4:	4b1d      	ldr	r3, [pc, #116]	; (8004d5c <__pow5mult+0xac>)
 8004ce6:	481e      	ldr	r0, [pc, #120]	; (8004d60 <__pow5mult+0xb0>)
 8004ce8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8004cec:	f000 fd28 	bl	8005740 <__assert_func>
 8004cf0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8004cf4:	6004      	str	r4, [r0, #0]
 8004cf6:	60c4      	str	r4, [r0, #12]
 8004cf8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8004cfc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8004d00:	b94c      	cbnz	r4, 8004d16 <__pow5mult+0x66>
 8004d02:	f240 2171 	movw	r1, #625	; 0x271
 8004d06:	4630      	mov	r0, r6
 8004d08:	f7ff ff16 	bl	8004b38 <__i2b>
 8004d0c:	2300      	movs	r3, #0
 8004d0e:	f8c8 0008 	str.w	r0, [r8, #8]
 8004d12:	4604      	mov	r4, r0
 8004d14:	6003      	str	r3, [r0, #0]
 8004d16:	f04f 0900 	mov.w	r9, #0
 8004d1a:	07eb      	lsls	r3, r5, #31
 8004d1c:	d50a      	bpl.n	8004d34 <__pow5mult+0x84>
 8004d1e:	4639      	mov	r1, r7
 8004d20:	4622      	mov	r2, r4
 8004d22:	4630      	mov	r0, r6
 8004d24:	f7ff ff1e 	bl	8004b64 <__multiply>
 8004d28:	4639      	mov	r1, r7
 8004d2a:	4680      	mov	r8, r0
 8004d2c:	4630      	mov	r0, r6
 8004d2e:	f7ff fe47 	bl	80049c0 <_Bfree>
 8004d32:	4647      	mov	r7, r8
 8004d34:	106d      	asrs	r5, r5, #1
 8004d36:	d00b      	beq.n	8004d50 <__pow5mult+0xa0>
 8004d38:	6820      	ldr	r0, [r4, #0]
 8004d3a:	b938      	cbnz	r0, 8004d4c <__pow5mult+0x9c>
 8004d3c:	4622      	mov	r2, r4
 8004d3e:	4621      	mov	r1, r4
 8004d40:	4630      	mov	r0, r6
 8004d42:	f7ff ff0f 	bl	8004b64 <__multiply>
 8004d46:	6020      	str	r0, [r4, #0]
 8004d48:	f8c0 9000 	str.w	r9, [r0]
 8004d4c:	4604      	mov	r4, r0
 8004d4e:	e7e4      	b.n	8004d1a <__pow5mult+0x6a>
 8004d50:	4638      	mov	r0, r7
 8004d52:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004d56:	bf00      	nop
 8004d58:	08005e90 	.word	0x08005e90
 8004d5c:	08005c55 	.word	0x08005c55
 8004d60:	08005d3c 	.word	0x08005d3c

08004d64 <__lshift>:
 8004d64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004d68:	460c      	mov	r4, r1
 8004d6a:	6849      	ldr	r1, [r1, #4]
 8004d6c:	6923      	ldr	r3, [r4, #16]
 8004d6e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8004d72:	68a3      	ldr	r3, [r4, #8]
 8004d74:	4607      	mov	r7, r0
 8004d76:	4691      	mov	r9, r2
 8004d78:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8004d7c:	f108 0601 	add.w	r6, r8, #1
 8004d80:	42b3      	cmp	r3, r6
 8004d82:	db0b      	blt.n	8004d9c <__lshift+0x38>
 8004d84:	4638      	mov	r0, r7
 8004d86:	f7ff fddb 	bl	8004940 <_Balloc>
 8004d8a:	4605      	mov	r5, r0
 8004d8c:	b948      	cbnz	r0, 8004da2 <__lshift+0x3e>
 8004d8e:	4602      	mov	r2, r0
 8004d90:	4b28      	ldr	r3, [pc, #160]	; (8004e34 <__lshift+0xd0>)
 8004d92:	4829      	ldr	r0, [pc, #164]	; (8004e38 <__lshift+0xd4>)
 8004d94:	f240 11d9 	movw	r1, #473	; 0x1d9
 8004d98:	f000 fcd2 	bl	8005740 <__assert_func>
 8004d9c:	3101      	adds	r1, #1
 8004d9e:	005b      	lsls	r3, r3, #1
 8004da0:	e7ee      	b.n	8004d80 <__lshift+0x1c>
 8004da2:	2300      	movs	r3, #0
 8004da4:	f100 0114 	add.w	r1, r0, #20
 8004da8:	f100 0210 	add.w	r2, r0, #16
 8004dac:	4618      	mov	r0, r3
 8004dae:	4553      	cmp	r3, sl
 8004db0:	db33      	blt.n	8004e1a <__lshift+0xb6>
 8004db2:	6920      	ldr	r0, [r4, #16]
 8004db4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8004db8:	f104 0314 	add.w	r3, r4, #20
 8004dbc:	f019 091f 	ands.w	r9, r9, #31
 8004dc0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8004dc4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8004dc8:	d02b      	beq.n	8004e22 <__lshift+0xbe>
 8004dca:	f1c9 0e20 	rsb	lr, r9, #32
 8004dce:	468a      	mov	sl, r1
 8004dd0:	2200      	movs	r2, #0
 8004dd2:	6818      	ldr	r0, [r3, #0]
 8004dd4:	fa00 f009 	lsl.w	r0, r0, r9
 8004dd8:	4302      	orrs	r2, r0
 8004dda:	f84a 2b04 	str.w	r2, [sl], #4
 8004dde:	f853 2b04 	ldr.w	r2, [r3], #4
 8004de2:	459c      	cmp	ip, r3
 8004de4:	fa22 f20e 	lsr.w	r2, r2, lr
 8004de8:	d8f3      	bhi.n	8004dd2 <__lshift+0x6e>
 8004dea:	ebac 0304 	sub.w	r3, ip, r4
 8004dee:	3b15      	subs	r3, #21
 8004df0:	f023 0303 	bic.w	r3, r3, #3
 8004df4:	3304      	adds	r3, #4
 8004df6:	f104 0015 	add.w	r0, r4, #21
 8004dfa:	4584      	cmp	ip, r0
 8004dfc:	bf38      	it	cc
 8004dfe:	2304      	movcc	r3, #4
 8004e00:	50ca      	str	r2, [r1, r3]
 8004e02:	b10a      	cbz	r2, 8004e08 <__lshift+0xa4>
 8004e04:	f108 0602 	add.w	r6, r8, #2
 8004e08:	3e01      	subs	r6, #1
 8004e0a:	4638      	mov	r0, r7
 8004e0c:	612e      	str	r6, [r5, #16]
 8004e0e:	4621      	mov	r1, r4
 8004e10:	f7ff fdd6 	bl	80049c0 <_Bfree>
 8004e14:	4628      	mov	r0, r5
 8004e16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004e1a:	f842 0f04 	str.w	r0, [r2, #4]!
 8004e1e:	3301      	adds	r3, #1
 8004e20:	e7c5      	b.n	8004dae <__lshift+0x4a>
 8004e22:	3904      	subs	r1, #4
 8004e24:	f853 2b04 	ldr.w	r2, [r3], #4
 8004e28:	f841 2f04 	str.w	r2, [r1, #4]!
 8004e2c:	459c      	cmp	ip, r3
 8004e2e:	d8f9      	bhi.n	8004e24 <__lshift+0xc0>
 8004e30:	e7ea      	b.n	8004e08 <__lshift+0xa4>
 8004e32:	bf00      	nop
 8004e34:	08005ccb 	.word	0x08005ccb
 8004e38:	08005d3c 	.word	0x08005d3c

08004e3c <__mcmp>:
 8004e3c:	b530      	push	{r4, r5, lr}
 8004e3e:	6902      	ldr	r2, [r0, #16]
 8004e40:	690c      	ldr	r4, [r1, #16]
 8004e42:	1b12      	subs	r2, r2, r4
 8004e44:	d10e      	bne.n	8004e64 <__mcmp+0x28>
 8004e46:	f100 0314 	add.w	r3, r0, #20
 8004e4a:	3114      	adds	r1, #20
 8004e4c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8004e50:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8004e54:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8004e58:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8004e5c:	42a5      	cmp	r5, r4
 8004e5e:	d003      	beq.n	8004e68 <__mcmp+0x2c>
 8004e60:	d305      	bcc.n	8004e6e <__mcmp+0x32>
 8004e62:	2201      	movs	r2, #1
 8004e64:	4610      	mov	r0, r2
 8004e66:	bd30      	pop	{r4, r5, pc}
 8004e68:	4283      	cmp	r3, r0
 8004e6a:	d3f3      	bcc.n	8004e54 <__mcmp+0x18>
 8004e6c:	e7fa      	b.n	8004e64 <__mcmp+0x28>
 8004e6e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004e72:	e7f7      	b.n	8004e64 <__mcmp+0x28>

08004e74 <__mdiff>:
 8004e74:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e78:	460c      	mov	r4, r1
 8004e7a:	4606      	mov	r6, r0
 8004e7c:	4611      	mov	r1, r2
 8004e7e:	4620      	mov	r0, r4
 8004e80:	4617      	mov	r7, r2
 8004e82:	f7ff ffdb 	bl	8004e3c <__mcmp>
 8004e86:	1e05      	subs	r5, r0, #0
 8004e88:	d110      	bne.n	8004eac <__mdiff+0x38>
 8004e8a:	4629      	mov	r1, r5
 8004e8c:	4630      	mov	r0, r6
 8004e8e:	f7ff fd57 	bl	8004940 <_Balloc>
 8004e92:	b930      	cbnz	r0, 8004ea2 <__mdiff+0x2e>
 8004e94:	4b39      	ldr	r3, [pc, #228]	; (8004f7c <__mdiff+0x108>)
 8004e96:	4602      	mov	r2, r0
 8004e98:	f240 2132 	movw	r1, #562	; 0x232
 8004e9c:	4838      	ldr	r0, [pc, #224]	; (8004f80 <__mdiff+0x10c>)
 8004e9e:	f000 fc4f 	bl	8005740 <__assert_func>
 8004ea2:	2301      	movs	r3, #1
 8004ea4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8004ea8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004eac:	bfa4      	itt	ge
 8004eae:	463b      	movge	r3, r7
 8004eb0:	4627      	movge	r7, r4
 8004eb2:	4630      	mov	r0, r6
 8004eb4:	6879      	ldr	r1, [r7, #4]
 8004eb6:	bfa6      	itte	ge
 8004eb8:	461c      	movge	r4, r3
 8004eba:	2500      	movge	r5, #0
 8004ebc:	2501      	movlt	r5, #1
 8004ebe:	f7ff fd3f 	bl	8004940 <_Balloc>
 8004ec2:	b920      	cbnz	r0, 8004ece <__mdiff+0x5a>
 8004ec4:	4b2d      	ldr	r3, [pc, #180]	; (8004f7c <__mdiff+0x108>)
 8004ec6:	4602      	mov	r2, r0
 8004ec8:	f44f 7110 	mov.w	r1, #576	; 0x240
 8004ecc:	e7e6      	b.n	8004e9c <__mdiff+0x28>
 8004ece:	693e      	ldr	r6, [r7, #16]
 8004ed0:	60c5      	str	r5, [r0, #12]
 8004ed2:	6925      	ldr	r5, [r4, #16]
 8004ed4:	f107 0114 	add.w	r1, r7, #20
 8004ed8:	f104 0914 	add.w	r9, r4, #20
 8004edc:	f100 0e14 	add.w	lr, r0, #20
 8004ee0:	f107 0210 	add.w	r2, r7, #16
 8004ee4:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8004ee8:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8004eec:	46f2      	mov	sl, lr
 8004eee:	2700      	movs	r7, #0
 8004ef0:	f859 3b04 	ldr.w	r3, [r9], #4
 8004ef4:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8004ef8:	fa1f f883 	uxth.w	r8, r3
 8004efc:	fa17 f78b 	uxtah	r7, r7, fp
 8004f00:	0c1b      	lsrs	r3, r3, #16
 8004f02:	eba7 0808 	sub.w	r8, r7, r8
 8004f06:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8004f0a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8004f0e:	fa1f f888 	uxth.w	r8, r8
 8004f12:	141f      	asrs	r7, r3, #16
 8004f14:	454d      	cmp	r5, r9
 8004f16:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8004f1a:	f84a 3b04 	str.w	r3, [sl], #4
 8004f1e:	d8e7      	bhi.n	8004ef0 <__mdiff+0x7c>
 8004f20:	1b2b      	subs	r3, r5, r4
 8004f22:	3b15      	subs	r3, #21
 8004f24:	f023 0303 	bic.w	r3, r3, #3
 8004f28:	3304      	adds	r3, #4
 8004f2a:	3415      	adds	r4, #21
 8004f2c:	42a5      	cmp	r5, r4
 8004f2e:	bf38      	it	cc
 8004f30:	2304      	movcc	r3, #4
 8004f32:	4419      	add	r1, r3
 8004f34:	4473      	add	r3, lr
 8004f36:	469e      	mov	lr, r3
 8004f38:	460d      	mov	r5, r1
 8004f3a:	4565      	cmp	r5, ip
 8004f3c:	d30e      	bcc.n	8004f5c <__mdiff+0xe8>
 8004f3e:	f10c 0203 	add.w	r2, ip, #3
 8004f42:	1a52      	subs	r2, r2, r1
 8004f44:	f022 0203 	bic.w	r2, r2, #3
 8004f48:	3903      	subs	r1, #3
 8004f4a:	458c      	cmp	ip, r1
 8004f4c:	bf38      	it	cc
 8004f4e:	2200      	movcc	r2, #0
 8004f50:	441a      	add	r2, r3
 8004f52:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8004f56:	b17b      	cbz	r3, 8004f78 <__mdiff+0x104>
 8004f58:	6106      	str	r6, [r0, #16]
 8004f5a:	e7a5      	b.n	8004ea8 <__mdiff+0x34>
 8004f5c:	f855 8b04 	ldr.w	r8, [r5], #4
 8004f60:	fa17 f488 	uxtah	r4, r7, r8
 8004f64:	1422      	asrs	r2, r4, #16
 8004f66:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8004f6a:	b2a4      	uxth	r4, r4
 8004f6c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8004f70:	f84e 4b04 	str.w	r4, [lr], #4
 8004f74:	1417      	asrs	r7, r2, #16
 8004f76:	e7e0      	b.n	8004f3a <__mdiff+0xc6>
 8004f78:	3e01      	subs	r6, #1
 8004f7a:	e7ea      	b.n	8004f52 <__mdiff+0xde>
 8004f7c:	08005ccb 	.word	0x08005ccb
 8004f80:	08005d3c 	.word	0x08005d3c

08004f84 <__d2b>:
 8004f84:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8004f88:	4689      	mov	r9, r1
 8004f8a:	2101      	movs	r1, #1
 8004f8c:	ec57 6b10 	vmov	r6, r7, d0
 8004f90:	4690      	mov	r8, r2
 8004f92:	f7ff fcd5 	bl	8004940 <_Balloc>
 8004f96:	4604      	mov	r4, r0
 8004f98:	b930      	cbnz	r0, 8004fa8 <__d2b+0x24>
 8004f9a:	4602      	mov	r2, r0
 8004f9c:	4b25      	ldr	r3, [pc, #148]	; (8005034 <__d2b+0xb0>)
 8004f9e:	4826      	ldr	r0, [pc, #152]	; (8005038 <__d2b+0xb4>)
 8004fa0:	f240 310a 	movw	r1, #778	; 0x30a
 8004fa4:	f000 fbcc 	bl	8005740 <__assert_func>
 8004fa8:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8004fac:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8004fb0:	bb35      	cbnz	r5, 8005000 <__d2b+0x7c>
 8004fb2:	2e00      	cmp	r6, #0
 8004fb4:	9301      	str	r3, [sp, #4]
 8004fb6:	d028      	beq.n	800500a <__d2b+0x86>
 8004fb8:	4668      	mov	r0, sp
 8004fba:	9600      	str	r6, [sp, #0]
 8004fbc:	f7ff fd8c 	bl	8004ad8 <__lo0bits>
 8004fc0:	9900      	ldr	r1, [sp, #0]
 8004fc2:	b300      	cbz	r0, 8005006 <__d2b+0x82>
 8004fc4:	9a01      	ldr	r2, [sp, #4]
 8004fc6:	f1c0 0320 	rsb	r3, r0, #32
 8004fca:	fa02 f303 	lsl.w	r3, r2, r3
 8004fce:	430b      	orrs	r3, r1
 8004fd0:	40c2      	lsrs	r2, r0
 8004fd2:	6163      	str	r3, [r4, #20]
 8004fd4:	9201      	str	r2, [sp, #4]
 8004fd6:	9b01      	ldr	r3, [sp, #4]
 8004fd8:	61a3      	str	r3, [r4, #24]
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	bf14      	ite	ne
 8004fde:	2202      	movne	r2, #2
 8004fe0:	2201      	moveq	r2, #1
 8004fe2:	6122      	str	r2, [r4, #16]
 8004fe4:	b1d5      	cbz	r5, 800501c <__d2b+0x98>
 8004fe6:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8004fea:	4405      	add	r5, r0
 8004fec:	f8c9 5000 	str.w	r5, [r9]
 8004ff0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8004ff4:	f8c8 0000 	str.w	r0, [r8]
 8004ff8:	4620      	mov	r0, r4
 8004ffa:	b003      	add	sp, #12
 8004ffc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005000:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005004:	e7d5      	b.n	8004fb2 <__d2b+0x2e>
 8005006:	6161      	str	r1, [r4, #20]
 8005008:	e7e5      	b.n	8004fd6 <__d2b+0x52>
 800500a:	a801      	add	r0, sp, #4
 800500c:	f7ff fd64 	bl	8004ad8 <__lo0bits>
 8005010:	9b01      	ldr	r3, [sp, #4]
 8005012:	6163      	str	r3, [r4, #20]
 8005014:	2201      	movs	r2, #1
 8005016:	6122      	str	r2, [r4, #16]
 8005018:	3020      	adds	r0, #32
 800501a:	e7e3      	b.n	8004fe4 <__d2b+0x60>
 800501c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8005020:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8005024:	f8c9 0000 	str.w	r0, [r9]
 8005028:	6918      	ldr	r0, [r3, #16]
 800502a:	f7ff fd35 	bl	8004a98 <__hi0bits>
 800502e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8005032:	e7df      	b.n	8004ff4 <__d2b+0x70>
 8005034:	08005ccb 	.word	0x08005ccb
 8005038:	08005d3c 	.word	0x08005d3c

0800503c <_calloc_r>:
 800503c:	b513      	push	{r0, r1, r4, lr}
 800503e:	434a      	muls	r2, r1
 8005040:	4611      	mov	r1, r2
 8005042:	9201      	str	r2, [sp, #4]
 8005044:	f000 f85a 	bl	80050fc <_malloc_r>
 8005048:	4604      	mov	r4, r0
 800504a:	b118      	cbz	r0, 8005054 <_calloc_r+0x18>
 800504c:	9a01      	ldr	r2, [sp, #4]
 800504e:	2100      	movs	r1, #0
 8005050:	f7fe f848 	bl	80030e4 <memset>
 8005054:	4620      	mov	r0, r4
 8005056:	b002      	add	sp, #8
 8005058:	bd10      	pop	{r4, pc}
	...

0800505c <_free_r>:
 800505c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800505e:	2900      	cmp	r1, #0
 8005060:	d048      	beq.n	80050f4 <_free_r+0x98>
 8005062:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005066:	9001      	str	r0, [sp, #4]
 8005068:	2b00      	cmp	r3, #0
 800506a:	f1a1 0404 	sub.w	r4, r1, #4
 800506e:	bfb8      	it	lt
 8005070:	18e4      	addlt	r4, r4, r3
 8005072:	f000 fcef 	bl	8005a54 <__malloc_lock>
 8005076:	4a20      	ldr	r2, [pc, #128]	; (80050f8 <_free_r+0x9c>)
 8005078:	9801      	ldr	r0, [sp, #4]
 800507a:	6813      	ldr	r3, [r2, #0]
 800507c:	4615      	mov	r5, r2
 800507e:	b933      	cbnz	r3, 800508e <_free_r+0x32>
 8005080:	6063      	str	r3, [r4, #4]
 8005082:	6014      	str	r4, [r2, #0]
 8005084:	b003      	add	sp, #12
 8005086:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800508a:	f000 bce9 	b.w	8005a60 <__malloc_unlock>
 800508e:	42a3      	cmp	r3, r4
 8005090:	d90b      	bls.n	80050aa <_free_r+0x4e>
 8005092:	6821      	ldr	r1, [r4, #0]
 8005094:	1862      	adds	r2, r4, r1
 8005096:	4293      	cmp	r3, r2
 8005098:	bf04      	itt	eq
 800509a:	681a      	ldreq	r2, [r3, #0]
 800509c:	685b      	ldreq	r3, [r3, #4]
 800509e:	6063      	str	r3, [r4, #4]
 80050a0:	bf04      	itt	eq
 80050a2:	1852      	addeq	r2, r2, r1
 80050a4:	6022      	streq	r2, [r4, #0]
 80050a6:	602c      	str	r4, [r5, #0]
 80050a8:	e7ec      	b.n	8005084 <_free_r+0x28>
 80050aa:	461a      	mov	r2, r3
 80050ac:	685b      	ldr	r3, [r3, #4]
 80050ae:	b10b      	cbz	r3, 80050b4 <_free_r+0x58>
 80050b0:	42a3      	cmp	r3, r4
 80050b2:	d9fa      	bls.n	80050aa <_free_r+0x4e>
 80050b4:	6811      	ldr	r1, [r2, #0]
 80050b6:	1855      	adds	r5, r2, r1
 80050b8:	42a5      	cmp	r5, r4
 80050ba:	d10b      	bne.n	80050d4 <_free_r+0x78>
 80050bc:	6824      	ldr	r4, [r4, #0]
 80050be:	4421      	add	r1, r4
 80050c0:	1854      	adds	r4, r2, r1
 80050c2:	42a3      	cmp	r3, r4
 80050c4:	6011      	str	r1, [r2, #0]
 80050c6:	d1dd      	bne.n	8005084 <_free_r+0x28>
 80050c8:	681c      	ldr	r4, [r3, #0]
 80050ca:	685b      	ldr	r3, [r3, #4]
 80050cc:	6053      	str	r3, [r2, #4]
 80050ce:	4421      	add	r1, r4
 80050d0:	6011      	str	r1, [r2, #0]
 80050d2:	e7d7      	b.n	8005084 <_free_r+0x28>
 80050d4:	d902      	bls.n	80050dc <_free_r+0x80>
 80050d6:	230c      	movs	r3, #12
 80050d8:	6003      	str	r3, [r0, #0]
 80050da:	e7d3      	b.n	8005084 <_free_r+0x28>
 80050dc:	6825      	ldr	r5, [r4, #0]
 80050de:	1961      	adds	r1, r4, r5
 80050e0:	428b      	cmp	r3, r1
 80050e2:	bf04      	itt	eq
 80050e4:	6819      	ldreq	r1, [r3, #0]
 80050e6:	685b      	ldreq	r3, [r3, #4]
 80050e8:	6063      	str	r3, [r4, #4]
 80050ea:	bf04      	itt	eq
 80050ec:	1949      	addeq	r1, r1, r5
 80050ee:	6021      	streq	r1, [r4, #0]
 80050f0:	6054      	str	r4, [r2, #4]
 80050f2:	e7c7      	b.n	8005084 <_free_r+0x28>
 80050f4:	b003      	add	sp, #12
 80050f6:	bd30      	pop	{r4, r5, pc}
 80050f8:	20000268 	.word	0x20000268

080050fc <_malloc_r>:
 80050fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80050fe:	1ccd      	adds	r5, r1, #3
 8005100:	f025 0503 	bic.w	r5, r5, #3
 8005104:	3508      	adds	r5, #8
 8005106:	2d0c      	cmp	r5, #12
 8005108:	bf38      	it	cc
 800510a:	250c      	movcc	r5, #12
 800510c:	2d00      	cmp	r5, #0
 800510e:	4606      	mov	r6, r0
 8005110:	db01      	blt.n	8005116 <_malloc_r+0x1a>
 8005112:	42a9      	cmp	r1, r5
 8005114:	d903      	bls.n	800511e <_malloc_r+0x22>
 8005116:	230c      	movs	r3, #12
 8005118:	6033      	str	r3, [r6, #0]
 800511a:	2000      	movs	r0, #0
 800511c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800511e:	f000 fc99 	bl	8005a54 <__malloc_lock>
 8005122:	4921      	ldr	r1, [pc, #132]	; (80051a8 <_malloc_r+0xac>)
 8005124:	680a      	ldr	r2, [r1, #0]
 8005126:	4614      	mov	r4, r2
 8005128:	b99c      	cbnz	r4, 8005152 <_malloc_r+0x56>
 800512a:	4f20      	ldr	r7, [pc, #128]	; (80051ac <_malloc_r+0xb0>)
 800512c:	683b      	ldr	r3, [r7, #0]
 800512e:	b923      	cbnz	r3, 800513a <_malloc_r+0x3e>
 8005130:	4621      	mov	r1, r4
 8005132:	4630      	mov	r0, r6
 8005134:	f000 f9de 	bl	80054f4 <_sbrk_r>
 8005138:	6038      	str	r0, [r7, #0]
 800513a:	4629      	mov	r1, r5
 800513c:	4630      	mov	r0, r6
 800513e:	f000 f9d9 	bl	80054f4 <_sbrk_r>
 8005142:	1c43      	adds	r3, r0, #1
 8005144:	d123      	bne.n	800518e <_malloc_r+0x92>
 8005146:	230c      	movs	r3, #12
 8005148:	6033      	str	r3, [r6, #0]
 800514a:	4630      	mov	r0, r6
 800514c:	f000 fc88 	bl	8005a60 <__malloc_unlock>
 8005150:	e7e3      	b.n	800511a <_malloc_r+0x1e>
 8005152:	6823      	ldr	r3, [r4, #0]
 8005154:	1b5b      	subs	r3, r3, r5
 8005156:	d417      	bmi.n	8005188 <_malloc_r+0x8c>
 8005158:	2b0b      	cmp	r3, #11
 800515a:	d903      	bls.n	8005164 <_malloc_r+0x68>
 800515c:	6023      	str	r3, [r4, #0]
 800515e:	441c      	add	r4, r3
 8005160:	6025      	str	r5, [r4, #0]
 8005162:	e004      	b.n	800516e <_malloc_r+0x72>
 8005164:	6863      	ldr	r3, [r4, #4]
 8005166:	42a2      	cmp	r2, r4
 8005168:	bf0c      	ite	eq
 800516a:	600b      	streq	r3, [r1, #0]
 800516c:	6053      	strne	r3, [r2, #4]
 800516e:	4630      	mov	r0, r6
 8005170:	f000 fc76 	bl	8005a60 <__malloc_unlock>
 8005174:	f104 000b 	add.w	r0, r4, #11
 8005178:	1d23      	adds	r3, r4, #4
 800517a:	f020 0007 	bic.w	r0, r0, #7
 800517e:	1ac2      	subs	r2, r0, r3
 8005180:	d0cc      	beq.n	800511c <_malloc_r+0x20>
 8005182:	1a1b      	subs	r3, r3, r0
 8005184:	50a3      	str	r3, [r4, r2]
 8005186:	e7c9      	b.n	800511c <_malloc_r+0x20>
 8005188:	4622      	mov	r2, r4
 800518a:	6864      	ldr	r4, [r4, #4]
 800518c:	e7cc      	b.n	8005128 <_malloc_r+0x2c>
 800518e:	1cc4      	adds	r4, r0, #3
 8005190:	f024 0403 	bic.w	r4, r4, #3
 8005194:	42a0      	cmp	r0, r4
 8005196:	d0e3      	beq.n	8005160 <_malloc_r+0x64>
 8005198:	1a21      	subs	r1, r4, r0
 800519a:	4630      	mov	r0, r6
 800519c:	f000 f9aa 	bl	80054f4 <_sbrk_r>
 80051a0:	3001      	adds	r0, #1
 80051a2:	d1dd      	bne.n	8005160 <_malloc_r+0x64>
 80051a4:	e7cf      	b.n	8005146 <_malloc_r+0x4a>
 80051a6:	bf00      	nop
 80051a8:	20000268 	.word	0x20000268
 80051ac:	2000026c 	.word	0x2000026c

080051b0 <__sfputc_r>:
 80051b0:	6893      	ldr	r3, [r2, #8]
 80051b2:	3b01      	subs	r3, #1
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	b410      	push	{r4}
 80051b8:	6093      	str	r3, [r2, #8]
 80051ba:	da08      	bge.n	80051ce <__sfputc_r+0x1e>
 80051bc:	6994      	ldr	r4, [r2, #24]
 80051be:	42a3      	cmp	r3, r4
 80051c0:	db01      	blt.n	80051c6 <__sfputc_r+0x16>
 80051c2:	290a      	cmp	r1, #10
 80051c4:	d103      	bne.n	80051ce <__sfputc_r+0x1e>
 80051c6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80051ca:	f000 b9e7 	b.w	800559c <__swbuf_r>
 80051ce:	6813      	ldr	r3, [r2, #0]
 80051d0:	1c58      	adds	r0, r3, #1
 80051d2:	6010      	str	r0, [r2, #0]
 80051d4:	7019      	strb	r1, [r3, #0]
 80051d6:	4608      	mov	r0, r1
 80051d8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80051dc:	4770      	bx	lr

080051de <__sfputs_r>:
 80051de:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80051e0:	4606      	mov	r6, r0
 80051e2:	460f      	mov	r7, r1
 80051e4:	4614      	mov	r4, r2
 80051e6:	18d5      	adds	r5, r2, r3
 80051e8:	42ac      	cmp	r4, r5
 80051ea:	d101      	bne.n	80051f0 <__sfputs_r+0x12>
 80051ec:	2000      	movs	r0, #0
 80051ee:	e007      	b.n	8005200 <__sfputs_r+0x22>
 80051f0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80051f4:	463a      	mov	r2, r7
 80051f6:	4630      	mov	r0, r6
 80051f8:	f7ff ffda 	bl	80051b0 <__sfputc_r>
 80051fc:	1c43      	adds	r3, r0, #1
 80051fe:	d1f3      	bne.n	80051e8 <__sfputs_r+0xa>
 8005200:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005204 <_vfiprintf_r>:
 8005204:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005208:	460d      	mov	r5, r1
 800520a:	b09d      	sub	sp, #116	; 0x74
 800520c:	4614      	mov	r4, r2
 800520e:	4698      	mov	r8, r3
 8005210:	4606      	mov	r6, r0
 8005212:	b118      	cbz	r0, 800521c <_vfiprintf_r+0x18>
 8005214:	6983      	ldr	r3, [r0, #24]
 8005216:	b90b      	cbnz	r3, 800521c <_vfiprintf_r+0x18>
 8005218:	f7ff fad6 	bl	80047c8 <__sinit>
 800521c:	4b89      	ldr	r3, [pc, #548]	; (8005444 <_vfiprintf_r+0x240>)
 800521e:	429d      	cmp	r5, r3
 8005220:	d11b      	bne.n	800525a <_vfiprintf_r+0x56>
 8005222:	6875      	ldr	r5, [r6, #4]
 8005224:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005226:	07d9      	lsls	r1, r3, #31
 8005228:	d405      	bmi.n	8005236 <_vfiprintf_r+0x32>
 800522a:	89ab      	ldrh	r3, [r5, #12]
 800522c:	059a      	lsls	r2, r3, #22
 800522e:	d402      	bmi.n	8005236 <_vfiprintf_r+0x32>
 8005230:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005232:	f7ff fb6c 	bl	800490e <__retarget_lock_acquire_recursive>
 8005236:	89ab      	ldrh	r3, [r5, #12]
 8005238:	071b      	lsls	r3, r3, #28
 800523a:	d501      	bpl.n	8005240 <_vfiprintf_r+0x3c>
 800523c:	692b      	ldr	r3, [r5, #16]
 800523e:	b9eb      	cbnz	r3, 800527c <_vfiprintf_r+0x78>
 8005240:	4629      	mov	r1, r5
 8005242:	4630      	mov	r0, r6
 8005244:	f000 fa0e 	bl	8005664 <__swsetup_r>
 8005248:	b1c0      	cbz	r0, 800527c <_vfiprintf_r+0x78>
 800524a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800524c:	07dc      	lsls	r4, r3, #31
 800524e:	d50e      	bpl.n	800526e <_vfiprintf_r+0x6a>
 8005250:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005254:	b01d      	add	sp, #116	; 0x74
 8005256:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800525a:	4b7b      	ldr	r3, [pc, #492]	; (8005448 <_vfiprintf_r+0x244>)
 800525c:	429d      	cmp	r5, r3
 800525e:	d101      	bne.n	8005264 <_vfiprintf_r+0x60>
 8005260:	68b5      	ldr	r5, [r6, #8]
 8005262:	e7df      	b.n	8005224 <_vfiprintf_r+0x20>
 8005264:	4b79      	ldr	r3, [pc, #484]	; (800544c <_vfiprintf_r+0x248>)
 8005266:	429d      	cmp	r5, r3
 8005268:	bf08      	it	eq
 800526a:	68f5      	ldreq	r5, [r6, #12]
 800526c:	e7da      	b.n	8005224 <_vfiprintf_r+0x20>
 800526e:	89ab      	ldrh	r3, [r5, #12]
 8005270:	0598      	lsls	r0, r3, #22
 8005272:	d4ed      	bmi.n	8005250 <_vfiprintf_r+0x4c>
 8005274:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005276:	f7ff fb4b 	bl	8004910 <__retarget_lock_release_recursive>
 800527a:	e7e9      	b.n	8005250 <_vfiprintf_r+0x4c>
 800527c:	2300      	movs	r3, #0
 800527e:	9309      	str	r3, [sp, #36]	; 0x24
 8005280:	2320      	movs	r3, #32
 8005282:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005286:	f8cd 800c 	str.w	r8, [sp, #12]
 800528a:	2330      	movs	r3, #48	; 0x30
 800528c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8005450 <_vfiprintf_r+0x24c>
 8005290:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005294:	f04f 0901 	mov.w	r9, #1
 8005298:	4623      	mov	r3, r4
 800529a:	469a      	mov	sl, r3
 800529c:	f813 2b01 	ldrb.w	r2, [r3], #1
 80052a0:	b10a      	cbz	r2, 80052a6 <_vfiprintf_r+0xa2>
 80052a2:	2a25      	cmp	r2, #37	; 0x25
 80052a4:	d1f9      	bne.n	800529a <_vfiprintf_r+0x96>
 80052a6:	ebba 0b04 	subs.w	fp, sl, r4
 80052aa:	d00b      	beq.n	80052c4 <_vfiprintf_r+0xc0>
 80052ac:	465b      	mov	r3, fp
 80052ae:	4622      	mov	r2, r4
 80052b0:	4629      	mov	r1, r5
 80052b2:	4630      	mov	r0, r6
 80052b4:	f7ff ff93 	bl	80051de <__sfputs_r>
 80052b8:	3001      	adds	r0, #1
 80052ba:	f000 80aa 	beq.w	8005412 <_vfiprintf_r+0x20e>
 80052be:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80052c0:	445a      	add	r2, fp
 80052c2:	9209      	str	r2, [sp, #36]	; 0x24
 80052c4:	f89a 3000 	ldrb.w	r3, [sl]
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	f000 80a2 	beq.w	8005412 <_vfiprintf_r+0x20e>
 80052ce:	2300      	movs	r3, #0
 80052d0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80052d4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80052d8:	f10a 0a01 	add.w	sl, sl, #1
 80052dc:	9304      	str	r3, [sp, #16]
 80052de:	9307      	str	r3, [sp, #28]
 80052e0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80052e4:	931a      	str	r3, [sp, #104]	; 0x68
 80052e6:	4654      	mov	r4, sl
 80052e8:	2205      	movs	r2, #5
 80052ea:	f814 1b01 	ldrb.w	r1, [r4], #1
 80052ee:	4858      	ldr	r0, [pc, #352]	; (8005450 <_vfiprintf_r+0x24c>)
 80052f0:	f7fa ff7e 	bl	80001f0 <memchr>
 80052f4:	9a04      	ldr	r2, [sp, #16]
 80052f6:	b9d8      	cbnz	r0, 8005330 <_vfiprintf_r+0x12c>
 80052f8:	06d1      	lsls	r1, r2, #27
 80052fa:	bf44      	itt	mi
 80052fc:	2320      	movmi	r3, #32
 80052fe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005302:	0713      	lsls	r3, r2, #28
 8005304:	bf44      	itt	mi
 8005306:	232b      	movmi	r3, #43	; 0x2b
 8005308:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800530c:	f89a 3000 	ldrb.w	r3, [sl]
 8005310:	2b2a      	cmp	r3, #42	; 0x2a
 8005312:	d015      	beq.n	8005340 <_vfiprintf_r+0x13c>
 8005314:	9a07      	ldr	r2, [sp, #28]
 8005316:	4654      	mov	r4, sl
 8005318:	2000      	movs	r0, #0
 800531a:	f04f 0c0a 	mov.w	ip, #10
 800531e:	4621      	mov	r1, r4
 8005320:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005324:	3b30      	subs	r3, #48	; 0x30
 8005326:	2b09      	cmp	r3, #9
 8005328:	d94e      	bls.n	80053c8 <_vfiprintf_r+0x1c4>
 800532a:	b1b0      	cbz	r0, 800535a <_vfiprintf_r+0x156>
 800532c:	9207      	str	r2, [sp, #28]
 800532e:	e014      	b.n	800535a <_vfiprintf_r+0x156>
 8005330:	eba0 0308 	sub.w	r3, r0, r8
 8005334:	fa09 f303 	lsl.w	r3, r9, r3
 8005338:	4313      	orrs	r3, r2
 800533a:	9304      	str	r3, [sp, #16]
 800533c:	46a2      	mov	sl, r4
 800533e:	e7d2      	b.n	80052e6 <_vfiprintf_r+0xe2>
 8005340:	9b03      	ldr	r3, [sp, #12]
 8005342:	1d19      	adds	r1, r3, #4
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	9103      	str	r1, [sp, #12]
 8005348:	2b00      	cmp	r3, #0
 800534a:	bfbb      	ittet	lt
 800534c:	425b      	neglt	r3, r3
 800534e:	f042 0202 	orrlt.w	r2, r2, #2
 8005352:	9307      	strge	r3, [sp, #28]
 8005354:	9307      	strlt	r3, [sp, #28]
 8005356:	bfb8      	it	lt
 8005358:	9204      	strlt	r2, [sp, #16]
 800535a:	7823      	ldrb	r3, [r4, #0]
 800535c:	2b2e      	cmp	r3, #46	; 0x2e
 800535e:	d10c      	bne.n	800537a <_vfiprintf_r+0x176>
 8005360:	7863      	ldrb	r3, [r4, #1]
 8005362:	2b2a      	cmp	r3, #42	; 0x2a
 8005364:	d135      	bne.n	80053d2 <_vfiprintf_r+0x1ce>
 8005366:	9b03      	ldr	r3, [sp, #12]
 8005368:	1d1a      	adds	r2, r3, #4
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	9203      	str	r2, [sp, #12]
 800536e:	2b00      	cmp	r3, #0
 8005370:	bfb8      	it	lt
 8005372:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8005376:	3402      	adds	r4, #2
 8005378:	9305      	str	r3, [sp, #20]
 800537a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8005460 <_vfiprintf_r+0x25c>
 800537e:	7821      	ldrb	r1, [r4, #0]
 8005380:	2203      	movs	r2, #3
 8005382:	4650      	mov	r0, sl
 8005384:	f7fa ff34 	bl	80001f0 <memchr>
 8005388:	b140      	cbz	r0, 800539c <_vfiprintf_r+0x198>
 800538a:	2340      	movs	r3, #64	; 0x40
 800538c:	eba0 000a 	sub.w	r0, r0, sl
 8005390:	fa03 f000 	lsl.w	r0, r3, r0
 8005394:	9b04      	ldr	r3, [sp, #16]
 8005396:	4303      	orrs	r3, r0
 8005398:	3401      	adds	r4, #1
 800539a:	9304      	str	r3, [sp, #16]
 800539c:	f814 1b01 	ldrb.w	r1, [r4], #1
 80053a0:	482c      	ldr	r0, [pc, #176]	; (8005454 <_vfiprintf_r+0x250>)
 80053a2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80053a6:	2206      	movs	r2, #6
 80053a8:	f7fa ff22 	bl	80001f0 <memchr>
 80053ac:	2800      	cmp	r0, #0
 80053ae:	d03f      	beq.n	8005430 <_vfiprintf_r+0x22c>
 80053b0:	4b29      	ldr	r3, [pc, #164]	; (8005458 <_vfiprintf_r+0x254>)
 80053b2:	bb1b      	cbnz	r3, 80053fc <_vfiprintf_r+0x1f8>
 80053b4:	9b03      	ldr	r3, [sp, #12]
 80053b6:	3307      	adds	r3, #7
 80053b8:	f023 0307 	bic.w	r3, r3, #7
 80053bc:	3308      	adds	r3, #8
 80053be:	9303      	str	r3, [sp, #12]
 80053c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80053c2:	443b      	add	r3, r7
 80053c4:	9309      	str	r3, [sp, #36]	; 0x24
 80053c6:	e767      	b.n	8005298 <_vfiprintf_r+0x94>
 80053c8:	fb0c 3202 	mla	r2, ip, r2, r3
 80053cc:	460c      	mov	r4, r1
 80053ce:	2001      	movs	r0, #1
 80053d0:	e7a5      	b.n	800531e <_vfiprintf_r+0x11a>
 80053d2:	2300      	movs	r3, #0
 80053d4:	3401      	adds	r4, #1
 80053d6:	9305      	str	r3, [sp, #20]
 80053d8:	4619      	mov	r1, r3
 80053da:	f04f 0c0a 	mov.w	ip, #10
 80053de:	4620      	mov	r0, r4
 80053e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80053e4:	3a30      	subs	r2, #48	; 0x30
 80053e6:	2a09      	cmp	r2, #9
 80053e8:	d903      	bls.n	80053f2 <_vfiprintf_r+0x1ee>
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d0c5      	beq.n	800537a <_vfiprintf_r+0x176>
 80053ee:	9105      	str	r1, [sp, #20]
 80053f0:	e7c3      	b.n	800537a <_vfiprintf_r+0x176>
 80053f2:	fb0c 2101 	mla	r1, ip, r1, r2
 80053f6:	4604      	mov	r4, r0
 80053f8:	2301      	movs	r3, #1
 80053fa:	e7f0      	b.n	80053de <_vfiprintf_r+0x1da>
 80053fc:	ab03      	add	r3, sp, #12
 80053fe:	9300      	str	r3, [sp, #0]
 8005400:	462a      	mov	r2, r5
 8005402:	4b16      	ldr	r3, [pc, #88]	; (800545c <_vfiprintf_r+0x258>)
 8005404:	a904      	add	r1, sp, #16
 8005406:	4630      	mov	r0, r6
 8005408:	f7fd ff14 	bl	8003234 <_printf_float>
 800540c:	4607      	mov	r7, r0
 800540e:	1c78      	adds	r0, r7, #1
 8005410:	d1d6      	bne.n	80053c0 <_vfiprintf_r+0x1bc>
 8005412:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005414:	07d9      	lsls	r1, r3, #31
 8005416:	d405      	bmi.n	8005424 <_vfiprintf_r+0x220>
 8005418:	89ab      	ldrh	r3, [r5, #12]
 800541a:	059a      	lsls	r2, r3, #22
 800541c:	d402      	bmi.n	8005424 <_vfiprintf_r+0x220>
 800541e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005420:	f7ff fa76 	bl	8004910 <__retarget_lock_release_recursive>
 8005424:	89ab      	ldrh	r3, [r5, #12]
 8005426:	065b      	lsls	r3, r3, #25
 8005428:	f53f af12 	bmi.w	8005250 <_vfiprintf_r+0x4c>
 800542c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800542e:	e711      	b.n	8005254 <_vfiprintf_r+0x50>
 8005430:	ab03      	add	r3, sp, #12
 8005432:	9300      	str	r3, [sp, #0]
 8005434:	462a      	mov	r2, r5
 8005436:	4b09      	ldr	r3, [pc, #36]	; (800545c <_vfiprintf_r+0x258>)
 8005438:	a904      	add	r1, sp, #16
 800543a:	4630      	mov	r0, r6
 800543c:	f7fe f99e 	bl	800377c <_printf_i>
 8005440:	e7e4      	b.n	800540c <_vfiprintf_r+0x208>
 8005442:	bf00      	nop
 8005444:	08005cfc 	.word	0x08005cfc
 8005448:	08005d1c 	.word	0x08005d1c
 800544c:	08005cdc 	.word	0x08005cdc
 8005450:	08005e9c 	.word	0x08005e9c
 8005454:	08005ea6 	.word	0x08005ea6
 8005458:	08003235 	.word	0x08003235
 800545c:	080051df 	.word	0x080051df
 8005460:	08005ea2 	.word	0x08005ea2

08005464 <_putc_r>:
 8005464:	b570      	push	{r4, r5, r6, lr}
 8005466:	460d      	mov	r5, r1
 8005468:	4614      	mov	r4, r2
 800546a:	4606      	mov	r6, r0
 800546c:	b118      	cbz	r0, 8005476 <_putc_r+0x12>
 800546e:	6983      	ldr	r3, [r0, #24]
 8005470:	b90b      	cbnz	r3, 8005476 <_putc_r+0x12>
 8005472:	f7ff f9a9 	bl	80047c8 <__sinit>
 8005476:	4b1c      	ldr	r3, [pc, #112]	; (80054e8 <_putc_r+0x84>)
 8005478:	429c      	cmp	r4, r3
 800547a:	d124      	bne.n	80054c6 <_putc_r+0x62>
 800547c:	6874      	ldr	r4, [r6, #4]
 800547e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005480:	07d8      	lsls	r0, r3, #31
 8005482:	d405      	bmi.n	8005490 <_putc_r+0x2c>
 8005484:	89a3      	ldrh	r3, [r4, #12]
 8005486:	0599      	lsls	r1, r3, #22
 8005488:	d402      	bmi.n	8005490 <_putc_r+0x2c>
 800548a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800548c:	f7ff fa3f 	bl	800490e <__retarget_lock_acquire_recursive>
 8005490:	68a3      	ldr	r3, [r4, #8]
 8005492:	3b01      	subs	r3, #1
 8005494:	2b00      	cmp	r3, #0
 8005496:	60a3      	str	r3, [r4, #8]
 8005498:	da05      	bge.n	80054a6 <_putc_r+0x42>
 800549a:	69a2      	ldr	r2, [r4, #24]
 800549c:	4293      	cmp	r3, r2
 800549e:	db1c      	blt.n	80054da <_putc_r+0x76>
 80054a0:	b2eb      	uxtb	r3, r5
 80054a2:	2b0a      	cmp	r3, #10
 80054a4:	d019      	beq.n	80054da <_putc_r+0x76>
 80054a6:	6823      	ldr	r3, [r4, #0]
 80054a8:	1c5a      	adds	r2, r3, #1
 80054aa:	6022      	str	r2, [r4, #0]
 80054ac:	701d      	strb	r5, [r3, #0]
 80054ae:	b2ed      	uxtb	r5, r5
 80054b0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80054b2:	07da      	lsls	r2, r3, #31
 80054b4:	d405      	bmi.n	80054c2 <_putc_r+0x5e>
 80054b6:	89a3      	ldrh	r3, [r4, #12]
 80054b8:	059b      	lsls	r3, r3, #22
 80054ba:	d402      	bmi.n	80054c2 <_putc_r+0x5e>
 80054bc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80054be:	f7ff fa27 	bl	8004910 <__retarget_lock_release_recursive>
 80054c2:	4628      	mov	r0, r5
 80054c4:	bd70      	pop	{r4, r5, r6, pc}
 80054c6:	4b09      	ldr	r3, [pc, #36]	; (80054ec <_putc_r+0x88>)
 80054c8:	429c      	cmp	r4, r3
 80054ca:	d101      	bne.n	80054d0 <_putc_r+0x6c>
 80054cc:	68b4      	ldr	r4, [r6, #8]
 80054ce:	e7d6      	b.n	800547e <_putc_r+0x1a>
 80054d0:	4b07      	ldr	r3, [pc, #28]	; (80054f0 <_putc_r+0x8c>)
 80054d2:	429c      	cmp	r4, r3
 80054d4:	bf08      	it	eq
 80054d6:	68f4      	ldreq	r4, [r6, #12]
 80054d8:	e7d1      	b.n	800547e <_putc_r+0x1a>
 80054da:	4629      	mov	r1, r5
 80054dc:	4622      	mov	r2, r4
 80054de:	4630      	mov	r0, r6
 80054e0:	f000 f85c 	bl	800559c <__swbuf_r>
 80054e4:	4605      	mov	r5, r0
 80054e6:	e7e3      	b.n	80054b0 <_putc_r+0x4c>
 80054e8:	08005cfc 	.word	0x08005cfc
 80054ec:	08005d1c 	.word	0x08005d1c
 80054f0:	08005cdc 	.word	0x08005cdc

080054f4 <_sbrk_r>:
 80054f4:	b538      	push	{r3, r4, r5, lr}
 80054f6:	4d06      	ldr	r5, [pc, #24]	; (8005510 <_sbrk_r+0x1c>)
 80054f8:	2300      	movs	r3, #0
 80054fa:	4604      	mov	r4, r0
 80054fc:	4608      	mov	r0, r1
 80054fe:	602b      	str	r3, [r5, #0]
 8005500:	f7fc f842 	bl	8001588 <_sbrk>
 8005504:	1c43      	adds	r3, r0, #1
 8005506:	d102      	bne.n	800550e <_sbrk_r+0x1a>
 8005508:	682b      	ldr	r3, [r5, #0]
 800550a:	b103      	cbz	r3, 800550e <_sbrk_r+0x1a>
 800550c:	6023      	str	r3, [r4, #0]
 800550e:	bd38      	pop	{r3, r4, r5, pc}
 8005510:	20000354 	.word	0x20000354

08005514 <__sread>:
 8005514:	b510      	push	{r4, lr}
 8005516:	460c      	mov	r4, r1
 8005518:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800551c:	f000 faa6 	bl	8005a6c <_read_r>
 8005520:	2800      	cmp	r0, #0
 8005522:	bfab      	itete	ge
 8005524:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005526:	89a3      	ldrhlt	r3, [r4, #12]
 8005528:	181b      	addge	r3, r3, r0
 800552a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800552e:	bfac      	ite	ge
 8005530:	6563      	strge	r3, [r4, #84]	; 0x54
 8005532:	81a3      	strhlt	r3, [r4, #12]
 8005534:	bd10      	pop	{r4, pc}

08005536 <__swrite>:
 8005536:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800553a:	461f      	mov	r7, r3
 800553c:	898b      	ldrh	r3, [r1, #12]
 800553e:	05db      	lsls	r3, r3, #23
 8005540:	4605      	mov	r5, r0
 8005542:	460c      	mov	r4, r1
 8005544:	4616      	mov	r6, r2
 8005546:	d505      	bpl.n	8005554 <__swrite+0x1e>
 8005548:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800554c:	2302      	movs	r3, #2
 800554e:	2200      	movs	r2, #0
 8005550:	f000 f9f8 	bl	8005944 <_lseek_r>
 8005554:	89a3      	ldrh	r3, [r4, #12]
 8005556:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800555a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800555e:	81a3      	strh	r3, [r4, #12]
 8005560:	4632      	mov	r2, r6
 8005562:	463b      	mov	r3, r7
 8005564:	4628      	mov	r0, r5
 8005566:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800556a:	f000 b869 	b.w	8005640 <_write_r>

0800556e <__sseek>:
 800556e:	b510      	push	{r4, lr}
 8005570:	460c      	mov	r4, r1
 8005572:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005576:	f000 f9e5 	bl	8005944 <_lseek_r>
 800557a:	1c43      	adds	r3, r0, #1
 800557c:	89a3      	ldrh	r3, [r4, #12]
 800557e:	bf15      	itete	ne
 8005580:	6560      	strne	r0, [r4, #84]	; 0x54
 8005582:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005586:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800558a:	81a3      	strheq	r3, [r4, #12]
 800558c:	bf18      	it	ne
 800558e:	81a3      	strhne	r3, [r4, #12]
 8005590:	bd10      	pop	{r4, pc}

08005592 <__sclose>:
 8005592:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005596:	f000 b8f1 	b.w	800577c <_close_r>
	...

0800559c <__swbuf_r>:
 800559c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800559e:	460e      	mov	r6, r1
 80055a0:	4614      	mov	r4, r2
 80055a2:	4605      	mov	r5, r0
 80055a4:	b118      	cbz	r0, 80055ae <__swbuf_r+0x12>
 80055a6:	6983      	ldr	r3, [r0, #24]
 80055a8:	b90b      	cbnz	r3, 80055ae <__swbuf_r+0x12>
 80055aa:	f7ff f90d 	bl	80047c8 <__sinit>
 80055ae:	4b21      	ldr	r3, [pc, #132]	; (8005634 <__swbuf_r+0x98>)
 80055b0:	429c      	cmp	r4, r3
 80055b2:	d12b      	bne.n	800560c <__swbuf_r+0x70>
 80055b4:	686c      	ldr	r4, [r5, #4]
 80055b6:	69a3      	ldr	r3, [r4, #24]
 80055b8:	60a3      	str	r3, [r4, #8]
 80055ba:	89a3      	ldrh	r3, [r4, #12]
 80055bc:	071a      	lsls	r2, r3, #28
 80055be:	d52f      	bpl.n	8005620 <__swbuf_r+0x84>
 80055c0:	6923      	ldr	r3, [r4, #16]
 80055c2:	b36b      	cbz	r3, 8005620 <__swbuf_r+0x84>
 80055c4:	6923      	ldr	r3, [r4, #16]
 80055c6:	6820      	ldr	r0, [r4, #0]
 80055c8:	1ac0      	subs	r0, r0, r3
 80055ca:	6963      	ldr	r3, [r4, #20]
 80055cc:	b2f6      	uxtb	r6, r6
 80055ce:	4283      	cmp	r3, r0
 80055d0:	4637      	mov	r7, r6
 80055d2:	dc04      	bgt.n	80055de <__swbuf_r+0x42>
 80055d4:	4621      	mov	r1, r4
 80055d6:	4628      	mov	r0, r5
 80055d8:	f000 f966 	bl	80058a8 <_fflush_r>
 80055dc:	bb30      	cbnz	r0, 800562c <__swbuf_r+0x90>
 80055de:	68a3      	ldr	r3, [r4, #8]
 80055e0:	3b01      	subs	r3, #1
 80055e2:	60a3      	str	r3, [r4, #8]
 80055e4:	6823      	ldr	r3, [r4, #0]
 80055e6:	1c5a      	adds	r2, r3, #1
 80055e8:	6022      	str	r2, [r4, #0]
 80055ea:	701e      	strb	r6, [r3, #0]
 80055ec:	6963      	ldr	r3, [r4, #20]
 80055ee:	3001      	adds	r0, #1
 80055f0:	4283      	cmp	r3, r0
 80055f2:	d004      	beq.n	80055fe <__swbuf_r+0x62>
 80055f4:	89a3      	ldrh	r3, [r4, #12]
 80055f6:	07db      	lsls	r3, r3, #31
 80055f8:	d506      	bpl.n	8005608 <__swbuf_r+0x6c>
 80055fa:	2e0a      	cmp	r6, #10
 80055fc:	d104      	bne.n	8005608 <__swbuf_r+0x6c>
 80055fe:	4621      	mov	r1, r4
 8005600:	4628      	mov	r0, r5
 8005602:	f000 f951 	bl	80058a8 <_fflush_r>
 8005606:	b988      	cbnz	r0, 800562c <__swbuf_r+0x90>
 8005608:	4638      	mov	r0, r7
 800560a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800560c:	4b0a      	ldr	r3, [pc, #40]	; (8005638 <__swbuf_r+0x9c>)
 800560e:	429c      	cmp	r4, r3
 8005610:	d101      	bne.n	8005616 <__swbuf_r+0x7a>
 8005612:	68ac      	ldr	r4, [r5, #8]
 8005614:	e7cf      	b.n	80055b6 <__swbuf_r+0x1a>
 8005616:	4b09      	ldr	r3, [pc, #36]	; (800563c <__swbuf_r+0xa0>)
 8005618:	429c      	cmp	r4, r3
 800561a:	bf08      	it	eq
 800561c:	68ec      	ldreq	r4, [r5, #12]
 800561e:	e7ca      	b.n	80055b6 <__swbuf_r+0x1a>
 8005620:	4621      	mov	r1, r4
 8005622:	4628      	mov	r0, r5
 8005624:	f000 f81e 	bl	8005664 <__swsetup_r>
 8005628:	2800      	cmp	r0, #0
 800562a:	d0cb      	beq.n	80055c4 <__swbuf_r+0x28>
 800562c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8005630:	e7ea      	b.n	8005608 <__swbuf_r+0x6c>
 8005632:	bf00      	nop
 8005634:	08005cfc 	.word	0x08005cfc
 8005638:	08005d1c 	.word	0x08005d1c
 800563c:	08005cdc 	.word	0x08005cdc

08005640 <_write_r>:
 8005640:	b538      	push	{r3, r4, r5, lr}
 8005642:	4d07      	ldr	r5, [pc, #28]	; (8005660 <_write_r+0x20>)
 8005644:	4604      	mov	r4, r0
 8005646:	4608      	mov	r0, r1
 8005648:	4611      	mov	r1, r2
 800564a:	2200      	movs	r2, #0
 800564c:	602a      	str	r2, [r5, #0]
 800564e:	461a      	mov	r2, r3
 8005650:	f7fb fc84 	bl	8000f5c <_write>
 8005654:	1c43      	adds	r3, r0, #1
 8005656:	d102      	bne.n	800565e <_write_r+0x1e>
 8005658:	682b      	ldr	r3, [r5, #0]
 800565a:	b103      	cbz	r3, 800565e <_write_r+0x1e>
 800565c:	6023      	str	r3, [r4, #0]
 800565e:	bd38      	pop	{r3, r4, r5, pc}
 8005660:	20000354 	.word	0x20000354

08005664 <__swsetup_r>:
 8005664:	4b32      	ldr	r3, [pc, #200]	; (8005730 <__swsetup_r+0xcc>)
 8005666:	b570      	push	{r4, r5, r6, lr}
 8005668:	681d      	ldr	r5, [r3, #0]
 800566a:	4606      	mov	r6, r0
 800566c:	460c      	mov	r4, r1
 800566e:	b125      	cbz	r5, 800567a <__swsetup_r+0x16>
 8005670:	69ab      	ldr	r3, [r5, #24]
 8005672:	b913      	cbnz	r3, 800567a <__swsetup_r+0x16>
 8005674:	4628      	mov	r0, r5
 8005676:	f7ff f8a7 	bl	80047c8 <__sinit>
 800567a:	4b2e      	ldr	r3, [pc, #184]	; (8005734 <__swsetup_r+0xd0>)
 800567c:	429c      	cmp	r4, r3
 800567e:	d10f      	bne.n	80056a0 <__swsetup_r+0x3c>
 8005680:	686c      	ldr	r4, [r5, #4]
 8005682:	89a3      	ldrh	r3, [r4, #12]
 8005684:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005688:	0719      	lsls	r1, r3, #28
 800568a:	d42c      	bmi.n	80056e6 <__swsetup_r+0x82>
 800568c:	06dd      	lsls	r5, r3, #27
 800568e:	d411      	bmi.n	80056b4 <__swsetup_r+0x50>
 8005690:	2309      	movs	r3, #9
 8005692:	6033      	str	r3, [r6, #0]
 8005694:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005698:	81a3      	strh	r3, [r4, #12]
 800569a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800569e:	e03e      	b.n	800571e <__swsetup_r+0xba>
 80056a0:	4b25      	ldr	r3, [pc, #148]	; (8005738 <__swsetup_r+0xd4>)
 80056a2:	429c      	cmp	r4, r3
 80056a4:	d101      	bne.n	80056aa <__swsetup_r+0x46>
 80056a6:	68ac      	ldr	r4, [r5, #8]
 80056a8:	e7eb      	b.n	8005682 <__swsetup_r+0x1e>
 80056aa:	4b24      	ldr	r3, [pc, #144]	; (800573c <__swsetup_r+0xd8>)
 80056ac:	429c      	cmp	r4, r3
 80056ae:	bf08      	it	eq
 80056b0:	68ec      	ldreq	r4, [r5, #12]
 80056b2:	e7e6      	b.n	8005682 <__swsetup_r+0x1e>
 80056b4:	0758      	lsls	r0, r3, #29
 80056b6:	d512      	bpl.n	80056de <__swsetup_r+0x7a>
 80056b8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80056ba:	b141      	cbz	r1, 80056ce <__swsetup_r+0x6a>
 80056bc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80056c0:	4299      	cmp	r1, r3
 80056c2:	d002      	beq.n	80056ca <__swsetup_r+0x66>
 80056c4:	4630      	mov	r0, r6
 80056c6:	f7ff fcc9 	bl	800505c <_free_r>
 80056ca:	2300      	movs	r3, #0
 80056cc:	6363      	str	r3, [r4, #52]	; 0x34
 80056ce:	89a3      	ldrh	r3, [r4, #12]
 80056d0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80056d4:	81a3      	strh	r3, [r4, #12]
 80056d6:	2300      	movs	r3, #0
 80056d8:	6063      	str	r3, [r4, #4]
 80056da:	6923      	ldr	r3, [r4, #16]
 80056dc:	6023      	str	r3, [r4, #0]
 80056de:	89a3      	ldrh	r3, [r4, #12]
 80056e0:	f043 0308 	orr.w	r3, r3, #8
 80056e4:	81a3      	strh	r3, [r4, #12]
 80056e6:	6923      	ldr	r3, [r4, #16]
 80056e8:	b94b      	cbnz	r3, 80056fe <__swsetup_r+0x9a>
 80056ea:	89a3      	ldrh	r3, [r4, #12]
 80056ec:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80056f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80056f4:	d003      	beq.n	80056fe <__swsetup_r+0x9a>
 80056f6:	4621      	mov	r1, r4
 80056f8:	4630      	mov	r0, r6
 80056fa:	f000 f959 	bl	80059b0 <__smakebuf_r>
 80056fe:	89a0      	ldrh	r0, [r4, #12]
 8005700:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005704:	f010 0301 	ands.w	r3, r0, #1
 8005708:	d00a      	beq.n	8005720 <__swsetup_r+0xbc>
 800570a:	2300      	movs	r3, #0
 800570c:	60a3      	str	r3, [r4, #8]
 800570e:	6963      	ldr	r3, [r4, #20]
 8005710:	425b      	negs	r3, r3
 8005712:	61a3      	str	r3, [r4, #24]
 8005714:	6923      	ldr	r3, [r4, #16]
 8005716:	b943      	cbnz	r3, 800572a <__swsetup_r+0xc6>
 8005718:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800571c:	d1ba      	bne.n	8005694 <__swsetup_r+0x30>
 800571e:	bd70      	pop	{r4, r5, r6, pc}
 8005720:	0781      	lsls	r1, r0, #30
 8005722:	bf58      	it	pl
 8005724:	6963      	ldrpl	r3, [r4, #20]
 8005726:	60a3      	str	r3, [r4, #8]
 8005728:	e7f4      	b.n	8005714 <__swsetup_r+0xb0>
 800572a:	2000      	movs	r0, #0
 800572c:	e7f7      	b.n	800571e <__swsetup_r+0xba>
 800572e:	bf00      	nop
 8005730:	2000006c 	.word	0x2000006c
 8005734:	08005cfc 	.word	0x08005cfc
 8005738:	08005d1c 	.word	0x08005d1c
 800573c:	08005cdc 	.word	0x08005cdc

08005740 <__assert_func>:
 8005740:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8005742:	4614      	mov	r4, r2
 8005744:	461a      	mov	r2, r3
 8005746:	4b09      	ldr	r3, [pc, #36]	; (800576c <__assert_func+0x2c>)
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	4605      	mov	r5, r0
 800574c:	68d8      	ldr	r0, [r3, #12]
 800574e:	b14c      	cbz	r4, 8005764 <__assert_func+0x24>
 8005750:	4b07      	ldr	r3, [pc, #28]	; (8005770 <__assert_func+0x30>)
 8005752:	9100      	str	r1, [sp, #0]
 8005754:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8005758:	4906      	ldr	r1, [pc, #24]	; (8005774 <__assert_func+0x34>)
 800575a:	462b      	mov	r3, r5
 800575c:	f000 f8e0 	bl	8005920 <fiprintf>
 8005760:	f000 f9a3 	bl	8005aaa <abort>
 8005764:	4b04      	ldr	r3, [pc, #16]	; (8005778 <__assert_func+0x38>)
 8005766:	461c      	mov	r4, r3
 8005768:	e7f3      	b.n	8005752 <__assert_func+0x12>
 800576a:	bf00      	nop
 800576c:	2000006c 	.word	0x2000006c
 8005770:	08005ead 	.word	0x08005ead
 8005774:	08005eba 	.word	0x08005eba
 8005778:	08005ee8 	.word	0x08005ee8

0800577c <_close_r>:
 800577c:	b538      	push	{r3, r4, r5, lr}
 800577e:	4d06      	ldr	r5, [pc, #24]	; (8005798 <_close_r+0x1c>)
 8005780:	2300      	movs	r3, #0
 8005782:	4604      	mov	r4, r0
 8005784:	4608      	mov	r0, r1
 8005786:	602b      	str	r3, [r5, #0]
 8005788:	f7fb fef2 	bl	8001570 <_close>
 800578c:	1c43      	adds	r3, r0, #1
 800578e:	d102      	bne.n	8005796 <_close_r+0x1a>
 8005790:	682b      	ldr	r3, [r5, #0]
 8005792:	b103      	cbz	r3, 8005796 <_close_r+0x1a>
 8005794:	6023      	str	r3, [r4, #0]
 8005796:	bd38      	pop	{r3, r4, r5, pc}
 8005798:	20000354 	.word	0x20000354

0800579c <__sflush_r>:
 800579c:	898a      	ldrh	r2, [r1, #12]
 800579e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80057a2:	4605      	mov	r5, r0
 80057a4:	0710      	lsls	r0, r2, #28
 80057a6:	460c      	mov	r4, r1
 80057a8:	d458      	bmi.n	800585c <__sflush_r+0xc0>
 80057aa:	684b      	ldr	r3, [r1, #4]
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	dc05      	bgt.n	80057bc <__sflush_r+0x20>
 80057b0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	dc02      	bgt.n	80057bc <__sflush_r+0x20>
 80057b6:	2000      	movs	r0, #0
 80057b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80057bc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80057be:	2e00      	cmp	r6, #0
 80057c0:	d0f9      	beq.n	80057b6 <__sflush_r+0x1a>
 80057c2:	2300      	movs	r3, #0
 80057c4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80057c8:	682f      	ldr	r7, [r5, #0]
 80057ca:	602b      	str	r3, [r5, #0]
 80057cc:	d032      	beq.n	8005834 <__sflush_r+0x98>
 80057ce:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80057d0:	89a3      	ldrh	r3, [r4, #12]
 80057d2:	075a      	lsls	r2, r3, #29
 80057d4:	d505      	bpl.n	80057e2 <__sflush_r+0x46>
 80057d6:	6863      	ldr	r3, [r4, #4]
 80057d8:	1ac0      	subs	r0, r0, r3
 80057da:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80057dc:	b10b      	cbz	r3, 80057e2 <__sflush_r+0x46>
 80057de:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80057e0:	1ac0      	subs	r0, r0, r3
 80057e2:	2300      	movs	r3, #0
 80057e4:	4602      	mov	r2, r0
 80057e6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80057e8:	6a21      	ldr	r1, [r4, #32]
 80057ea:	4628      	mov	r0, r5
 80057ec:	47b0      	blx	r6
 80057ee:	1c43      	adds	r3, r0, #1
 80057f0:	89a3      	ldrh	r3, [r4, #12]
 80057f2:	d106      	bne.n	8005802 <__sflush_r+0x66>
 80057f4:	6829      	ldr	r1, [r5, #0]
 80057f6:	291d      	cmp	r1, #29
 80057f8:	d82c      	bhi.n	8005854 <__sflush_r+0xb8>
 80057fa:	4a2a      	ldr	r2, [pc, #168]	; (80058a4 <__sflush_r+0x108>)
 80057fc:	40ca      	lsrs	r2, r1
 80057fe:	07d6      	lsls	r6, r2, #31
 8005800:	d528      	bpl.n	8005854 <__sflush_r+0xb8>
 8005802:	2200      	movs	r2, #0
 8005804:	6062      	str	r2, [r4, #4]
 8005806:	04d9      	lsls	r1, r3, #19
 8005808:	6922      	ldr	r2, [r4, #16]
 800580a:	6022      	str	r2, [r4, #0]
 800580c:	d504      	bpl.n	8005818 <__sflush_r+0x7c>
 800580e:	1c42      	adds	r2, r0, #1
 8005810:	d101      	bne.n	8005816 <__sflush_r+0x7a>
 8005812:	682b      	ldr	r3, [r5, #0]
 8005814:	b903      	cbnz	r3, 8005818 <__sflush_r+0x7c>
 8005816:	6560      	str	r0, [r4, #84]	; 0x54
 8005818:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800581a:	602f      	str	r7, [r5, #0]
 800581c:	2900      	cmp	r1, #0
 800581e:	d0ca      	beq.n	80057b6 <__sflush_r+0x1a>
 8005820:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005824:	4299      	cmp	r1, r3
 8005826:	d002      	beq.n	800582e <__sflush_r+0x92>
 8005828:	4628      	mov	r0, r5
 800582a:	f7ff fc17 	bl	800505c <_free_r>
 800582e:	2000      	movs	r0, #0
 8005830:	6360      	str	r0, [r4, #52]	; 0x34
 8005832:	e7c1      	b.n	80057b8 <__sflush_r+0x1c>
 8005834:	6a21      	ldr	r1, [r4, #32]
 8005836:	2301      	movs	r3, #1
 8005838:	4628      	mov	r0, r5
 800583a:	47b0      	blx	r6
 800583c:	1c41      	adds	r1, r0, #1
 800583e:	d1c7      	bne.n	80057d0 <__sflush_r+0x34>
 8005840:	682b      	ldr	r3, [r5, #0]
 8005842:	2b00      	cmp	r3, #0
 8005844:	d0c4      	beq.n	80057d0 <__sflush_r+0x34>
 8005846:	2b1d      	cmp	r3, #29
 8005848:	d001      	beq.n	800584e <__sflush_r+0xb2>
 800584a:	2b16      	cmp	r3, #22
 800584c:	d101      	bne.n	8005852 <__sflush_r+0xb6>
 800584e:	602f      	str	r7, [r5, #0]
 8005850:	e7b1      	b.n	80057b6 <__sflush_r+0x1a>
 8005852:	89a3      	ldrh	r3, [r4, #12]
 8005854:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005858:	81a3      	strh	r3, [r4, #12]
 800585a:	e7ad      	b.n	80057b8 <__sflush_r+0x1c>
 800585c:	690f      	ldr	r7, [r1, #16]
 800585e:	2f00      	cmp	r7, #0
 8005860:	d0a9      	beq.n	80057b6 <__sflush_r+0x1a>
 8005862:	0793      	lsls	r3, r2, #30
 8005864:	680e      	ldr	r6, [r1, #0]
 8005866:	bf08      	it	eq
 8005868:	694b      	ldreq	r3, [r1, #20]
 800586a:	600f      	str	r7, [r1, #0]
 800586c:	bf18      	it	ne
 800586e:	2300      	movne	r3, #0
 8005870:	eba6 0807 	sub.w	r8, r6, r7
 8005874:	608b      	str	r3, [r1, #8]
 8005876:	f1b8 0f00 	cmp.w	r8, #0
 800587a:	dd9c      	ble.n	80057b6 <__sflush_r+0x1a>
 800587c:	6a21      	ldr	r1, [r4, #32]
 800587e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005880:	4643      	mov	r3, r8
 8005882:	463a      	mov	r2, r7
 8005884:	4628      	mov	r0, r5
 8005886:	47b0      	blx	r6
 8005888:	2800      	cmp	r0, #0
 800588a:	dc06      	bgt.n	800589a <__sflush_r+0xfe>
 800588c:	89a3      	ldrh	r3, [r4, #12]
 800588e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005892:	81a3      	strh	r3, [r4, #12]
 8005894:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005898:	e78e      	b.n	80057b8 <__sflush_r+0x1c>
 800589a:	4407      	add	r7, r0
 800589c:	eba8 0800 	sub.w	r8, r8, r0
 80058a0:	e7e9      	b.n	8005876 <__sflush_r+0xda>
 80058a2:	bf00      	nop
 80058a4:	20400001 	.word	0x20400001

080058a8 <_fflush_r>:
 80058a8:	b538      	push	{r3, r4, r5, lr}
 80058aa:	690b      	ldr	r3, [r1, #16]
 80058ac:	4605      	mov	r5, r0
 80058ae:	460c      	mov	r4, r1
 80058b0:	b913      	cbnz	r3, 80058b8 <_fflush_r+0x10>
 80058b2:	2500      	movs	r5, #0
 80058b4:	4628      	mov	r0, r5
 80058b6:	bd38      	pop	{r3, r4, r5, pc}
 80058b8:	b118      	cbz	r0, 80058c2 <_fflush_r+0x1a>
 80058ba:	6983      	ldr	r3, [r0, #24]
 80058bc:	b90b      	cbnz	r3, 80058c2 <_fflush_r+0x1a>
 80058be:	f7fe ff83 	bl	80047c8 <__sinit>
 80058c2:	4b14      	ldr	r3, [pc, #80]	; (8005914 <_fflush_r+0x6c>)
 80058c4:	429c      	cmp	r4, r3
 80058c6:	d11b      	bne.n	8005900 <_fflush_r+0x58>
 80058c8:	686c      	ldr	r4, [r5, #4]
 80058ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d0ef      	beq.n	80058b2 <_fflush_r+0xa>
 80058d2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80058d4:	07d0      	lsls	r0, r2, #31
 80058d6:	d404      	bmi.n	80058e2 <_fflush_r+0x3a>
 80058d8:	0599      	lsls	r1, r3, #22
 80058da:	d402      	bmi.n	80058e2 <_fflush_r+0x3a>
 80058dc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80058de:	f7ff f816 	bl	800490e <__retarget_lock_acquire_recursive>
 80058e2:	4628      	mov	r0, r5
 80058e4:	4621      	mov	r1, r4
 80058e6:	f7ff ff59 	bl	800579c <__sflush_r>
 80058ea:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80058ec:	07da      	lsls	r2, r3, #31
 80058ee:	4605      	mov	r5, r0
 80058f0:	d4e0      	bmi.n	80058b4 <_fflush_r+0xc>
 80058f2:	89a3      	ldrh	r3, [r4, #12]
 80058f4:	059b      	lsls	r3, r3, #22
 80058f6:	d4dd      	bmi.n	80058b4 <_fflush_r+0xc>
 80058f8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80058fa:	f7ff f809 	bl	8004910 <__retarget_lock_release_recursive>
 80058fe:	e7d9      	b.n	80058b4 <_fflush_r+0xc>
 8005900:	4b05      	ldr	r3, [pc, #20]	; (8005918 <_fflush_r+0x70>)
 8005902:	429c      	cmp	r4, r3
 8005904:	d101      	bne.n	800590a <_fflush_r+0x62>
 8005906:	68ac      	ldr	r4, [r5, #8]
 8005908:	e7df      	b.n	80058ca <_fflush_r+0x22>
 800590a:	4b04      	ldr	r3, [pc, #16]	; (800591c <_fflush_r+0x74>)
 800590c:	429c      	cmp	r4, r3
 800590e:	bf08      	it	eq
 8005910:	68ec      	ldreq	r4, [r5, #12]
 8005912:	e7da      	b.n	80058ca <_fflush_r+0x22>
 8005914:	08005cfc 	.word	0x08005cfc
 8005918:	08005d1c 	.word	0x08005d1c
 800591c:	08005cdc 	.word	0x08005cdc

08005920 <fiprintf>:
 8005920:	b40e      	push	{r1, r2, r3}
 8005922:	b503      	push	{r0, r1, lr}
 8005924:	4601      	mov	r1, r0
 8005926:	ab03      	add	r3, sp, #12
 8005928:	4805      	ldr	r0, [pc, #20]	; (8005940 <fiprintf+0x20>)
 800592a:	f853 2b04 	ldr.w	r2, [r3], #4
 800592e:	6800      	ldr	r0, [r0, #0]
 8005930:	9301      	str	r3, [sp, #4]
 8005932:	f7ff fc67 	bl	8005204 <_vfiprintf_r>
 8005936:	b002      	add	sp, #8
 8005938:	f85d eb04 	ldr.w	lr, [sp], #4
 800593c:	b003      	add	sp, #12
 800593e:	4770      	bx	lr
 8005940:	2000006c 	.word	0x2000006c

08005944 <_lseek_r>:
 8005944:	b538      	push	{r3, r4, r5, lr}
 8005946:	4d07      	ldr	r5, [pc, #28]	; (8005964 <_lseek_r+0x20>)
 8005948:	4604      	mov	r4, r0
 800594a:	4608      	mov	r0, r1
 800594c:	4611      	mov	r1, r2
 800594e:	2200      	movs	r2, #0
 8005950:	602a      	str	r2, [r5, #0]
 8005952:	461a      	mov	r2, r3
 8005954:	f7fb fe16 	bl	8001584 <_lseek>
 8005958:	1c43      	adds	r3, r0, #1
 800595a:	d102      	bne.n	8005962 <_lseek_r+0x1e>
 800595c:	682b      	ldr	r3, [r5, #0]
 800595e:	b103      	cbz	r3, 8005962 <_lseek_r+0x1e>
 8005960:	6023      	str	r3, [r4, #0]
 8005962:	bd38      	pop	{r3, r4, r5, pc}
 8005964:	20000354 	.word	0x20000354

08005968 <__swhatbuf_r>:
 8005968:	b570      	push	{r4, r5, r6, lr}
 800596a:	460e      	mov	r6, r1
 800596c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005970:	2900      	cmp	r1, #0
 8005972:	b096      	sub	sp, #88	; 0x58
 8005974:	4614      	mov	r4, r2
 8005976:	461d      	mov	r5, r3
 8005978:	da07      	bge.n	800598a <__swhatbuf_r+0x22>
 800597a:	2300      	movs	r3, #0
 800597c:	602b      	str	r3, [r5, #0]
 800597e:	89b3      	ldrh	r3, [r6, #12]
 8005980:	061a      	lsls	r2, r3, #24
 8005982:	d410      	bmi.n	80059a6 <__swhatbuf_r+0x3e>
 8005984:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005988:	e00e      	b.n	80059a8 <__swhatbuf_r+0x40>
 800598a:	466a      	mov	r2, sp
 800598c:	f000 f894 	bl	8005ab8 <_fstat_r>
 8005990:	2800      	cmp	r0, #0
 8005992:	dbf2      	blt.n	800597a <__swhatbuf_r+0x12>
 8005994:	9a01      	ldr	r2, [sp, #4]
 8005996:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800599a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800599e:	425a      	negs	r2, r3
 80059a0:	415a      	adcs	r2, r3
 80059a2:	602a      	str	r2, [r5, #0]
 80059a4:	e7ee      	b.n	8005984 <__swhatbuf_r+0x1c>
 80059a6:	2340      	movs	r3, #64	; 0x40
 80059a8:	2000      	movs	r0, #0
 80059aa:	6023      	str	r3, [r4, #0]
 80059ac:	b016      	add	sp, #88	; 0x58
 80059ae:	bd70      	pop	{r4, r5, r6, pc}

080059b0 <__smakebuf_r>:
 80059b0:	898b      	ldrh	r3, [r1, #12]
 80059b2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80059b4:	079d      	lsls	r5, r3, #30
 80059b6:	4606      	mov	r6, r0
 80059b8:	460c      	mov	r4, r1
 80059ba:	d507      	bpl.n	80059cc <__smakebuf_r+0x1c>
 80059bc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80059c0:	6023      	str	r3, [r4, #0]
 80059c2:	6123      	str	r3, [r4, #16]
 80059c4:	2301      	movs	r3, #1
 80059c6:	6163      	str	r3, [r4, #20]
 80059c8:	b002      	add	sp, #8
 80059ca:	bd70      	pop	{r4, r5, r6, pc}
 80059cc:	ab01      	add	r3, sp, #4
 80059ce:	466a      	mov	r2, sp
 80059d0:	f7ff ffca 	bl	8005968 <__swhatbuf_r>
 80059d4:	9900      	ldr	r1, [sp, #0]
 80059d6:	4605      	mov	r5, r0
 80059d8:	4630      	mov	r0, r6
 80059da:	f7ff fb8f 	bl	80050fc <_malloc_r>
 80059de:	b948      	cbnz	r0, 80059f4 <__smakebuf_r+0x44>
 80059e0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80059e4:	059a      	lsls	r2, r3, #22
 80059e6:	d4ef      	bmi.n	80059c8 <__smakebuf_r+0x18>
 80059e8:	f023 0303 	bic.w	r3, r3, #3
 80059ec:	f043 0302 	orr.w	r3, r3, #2
 80059f0:	81a3      	strh	r3, [r4, #12]
 80059f2:	e7e3      	b.n	80059bc <__smakebuf_r+0xc>
 80059f4:	4b0d      	ldr	r3, [pc, #52]	; (8005a2c <__smakebuf_r+0x7c>)
 80059f6:	62b3      	str	r3, [r6, #40]	; 0x28
 80059f8:	89a3      	ldrh	r3, [r4, #12]
 80059fa:	6020      	str	r0, [r4, #0]
 80059fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005a00:	81a3      	strh	r3, [r4, #12]
 8005a02:	9b00      	ldr	r3, [sp, #0]
 8005a04:	6163      	str	r3, [r4, #20]
 8005a06:	9b01      	ldr	r3, [sp, #4]
 8005a08:	6120      	str	r0, [r4, #16]
 8005a0a:	b15b      	cbz	r3, 8005a24 <__smakebuf_r+0x74>
 8005a0c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005a10:	4630      	mov	r0, r6
 8005a12:	f000 f863 	bl	8005adc <_isatty_r>
 8005a16:	b128      	cbz	r0, 8005a24 <__smakebuf_r+0x74>
 8005a18:	89a3      	ldrh	r3, [r4, #12]
 8005a1a:	f023 0303 	bic.w	r3, r3, #3
 8005a1e:	f043 0301 	orr.w	r3, r3, #1
 8005a22:	81a3      	strh	r3, [r4, #12]
 8005a24:	89a0      	ldrh	r0, [r4, #12]
 8005a26:	4305      	orrs	r5, r0
 8005a28:	81a5      	strh	r5, [r4, #12]
 8005a2a:	e7cd      	b.n	80059c8 <__smakebuf_r+0x18>
 8005a2c:	08004761 	.word	0x08004761

08005a30 <__ascii_mbtowc>:
 8005a30:	b082      	sub	sp, #8
 8005a32:	b901      	cbnz	r1, 8005a36 <__ascii_mbtowc+0x6>
 8005a34:	a901      	add	r1, sp, #4
 8005a36:	b142      	cbz	r2, 8005a4a <__ascii_mbtowc+0x1a>
 8005a38:	b14b      	cbz	r3, 8005a4e <__ascii_mbtowc+0x1e>
 8005a3a:	7813      	ldrb	r3, [r2, #0]
 8005a3c:	600b      	str	r3, [r1, #0]
 8005a3e:	7812      	ldrb	r2, [r2, #0]
 8005a40:	1e10      	subs	r0, r2, #0
 8005a42:	bf18      	it	ne
 8005a44:	2001      	movne	r0, #1
 8005a46:	b002      	add	sp, #8
 8005a48:	4770      	bx	lr
 8005a4a:	4610      	mov	r0, r2
 8005a4c:	e7fb      	b.n	8005a46 <__ascii_mbtowc+0x16>
 8005a4e:	f06f 0001 	mvn.w	r0, #1
 8005a52:	e7f8      	b.n	8005a46 <__ascii_mbtowc+0x16>

08005a54 <__malloc_lock>:
 8005a54:	4801      	ldr	r0, [pc, #4]	; (8005a5c <__malloc_lock+0x8>)
 8005a56:	f7fe bf5a 	b.w	800490e <__retarget_lock_acquire_recursive>
 8005a5a:	bf00      	nop
 8005a5c:	2000034c 	.word	0x2000034c

08005a60 <__malloc_unlock>:
 8005a60:	4801      	ldr	r0, [pc, #4]	; (8005a68 <__malloc_unlock+0x8>)
 8005a62:	f7fe bf55 	b.w	8004910 <__retarget_lock_release_recursive>
 8005a66:	bf00      	nop
 8005a68:	2000034c 	.word	0x2000034c

08005a6c <_read_r>:
 8005a6c:	b538      	push	{r3, r4, r5, lr}
 8005a6e:	4d07      	ldr	r5, [pc, #28]	; (8005a8c <_read_r+0x20>)
 8005a70:	4604      	mov	r4, r0
 8005a72:	4608      	mov	r0, r1
 8005a74:	4611      	mov	r1, r2
 8005a76:	2200      	movs	r2, #0
 8005a78:	602a      	str	r2, [r5, #0]
 8005a7a:	461a      	mov	r2, r3
 8005a7c:	f7fb fd68 	bl	8001550 <_read>
 8005a80:	1c43      	adds	r3, r0, #1
 8005a82:	d102      	bne.n	8005a8a <_read_r+0x1e>
 8005a84:	682b      	ldr	r3, [r5, #0]
 8005a86:	b103      	cbz	r3, 8005a8a <_read_r+0x1e>
 8005a88:	6023      	str	r3, [r4, #0]
 8005a8a:	bd38      	pop	{r3, r4, r5, pc}
 8005a8c:	20000354 	.word	0x20000354

08005a90 <__ascii_wctomb>:
 8005a90:	b149      	cbz	r1, 8005aa6 <__ascii_wctomb+0x16>
 8005a92:	2aff      	cmp	r2, #255	; 0xff
 8005a94:	bf85      	ittet	hi
 8005a96:	238a      	movhi	r3, #138	; 0x8a
 8005a98:	6003      	strhi	r3, [r0, #0]
 8005a9a:	700a      	strbls	r2, [r1, #0]
 8005a9c:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8005aa0:	bf98      	it	ls
 8005aa2:	2001      	movls	r0, #1
 8005aa4:	4770      	bx	lr
 8005aa6:	4608      	mov	r0, r1
 8005aa8:	4770      	bx	lr

08005aaa <abort>:
 8005aaa:	b508      	push	{r3, lr}
 8005aac:	2006      	movs	r0, #6
 8005aae:	f000 f84d 	bl	8005b4c <raise>
 8005ab2:	2001      	movs	r0, #1
 8005ab4:	f7fb fd46 	bl	8001544 <_exit>

08005ab8 <_fstat_r>:
 8005ab8:	b538      	push	{r3, r4, r5, lr}
 8005aba:	4d07      	ldr	r5, [pc, #28]	; (8005ad8 <_fstat_r+0x20>)
 8005abc:	2300      	movs	r3, #0
 8005abe:	4604      	mov	r4, r0
 8005ac0:	4608      	mov	r0, r1
 8005ac2:	4611      	mov	r1, r2
 8005ac4:	602b      	str	r3, [r5, #0]
 8005ac6:	f7fb fd56 	bl	8001576 <_fstat>
 8005aca:	1c43      	adds	r3, r0, #1
 8005acc:	d102      	bne.n	8005ad4 <_fstat_r+0x1c>
 8005ace:	682b      	ldr	r3, [r5, #0]
 8005ad0:	b103      	cbz	r3, 8005ad4 <_fstat_r+0x1c>
 8005ad2:	6023      	str	r3, [r4, #0]
 8005ad4:	bd38      	pop	{r3, r4, r5, pc}
 8005ad6:	bf00      	nop
 8005ad8:	20000354 	.word	0x20000354

08005adc <_isatty_r>:
 8005adc:	b538      	push	{r3, r4, r5, lr}
 8005ade:	4d06      	ldr	r5, [pc, #24]	; (8005af8 <_isatty_r+0x1c>)
 8005ae0:	2300      	movs	r3, #0
 8005ae2:	4604      	mov	r4, r0
 8005ae4:	4608      	mov	r0, r1
 8005ae6:	602b      	str	r3, [r5, #0]
 8005ae8:	f7fb fd4a 	bl	8001580 <_isatty>
 8005aec:	1c43      	adds	r3, r0, #1
 8005aee:	d102      	bne.n	8005af6 <_isatty_r+0x1a>
 8005af0:	682b      	ldr	r3, [r5, #0]
 8005af2:	b103      	cbz	r3, 8005af6 <_isatty_r+0x1a>
 8005af4:	6023      	str	r3, [r4, #0]
 8005af6:	bd38      	pop	{r3, r4, r5, pc}
 8005af8:	20000354 	.word	0x20000354

08005afc <_raise_r>:
 8005afc:	291f      	cmp	r1, #31
 8005afe:	b538      	push	{r3, r4, r5, lr}
 8005b00:	4604      	mov	r4, r0
 8005b02:	460d      	mov	r5, r1
 8005b04:	d904      	bls.n	8005b10 <_raise_r+0x14>
 8005b06:	2316      	movs	r3, #22
 8005b08:	6003      	str	r3, [r0, #0]
 8005b0a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005b0e:	bd38      	pop	{r3, r4, r5, pc}
 8005b10:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8005b12:	b112      	cbz	r2, 8005b1a <_raise_r+0x1e>
 8005b14:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8005b18:	b94b      	cbnz	r3, 8005b2e <_raise_r+0x32>
 8005b1a:	4620      	mov	r0, r4
 8005b1c:	f000 f830 	bl	8005b80 <_getpid_r>
 8005b20:	462a      	mov	r2, r5
 8005b22:	4601      	mov	r1, r0
 8005b24:	4620      	mov	r0, r4
 8005b26:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005b2a:	f000 b817 	b.w	8005b5c <_kill_r>
 8005b2e:	2b01      	cmp	r3, #1
 8005b30:	d00a      	beq.n	8005b48 <_raise_r+0x4c>
 8005b32:	1c59      	adds	r1, r3, #1
 8005b34:	d103      	bne.n	8005b3e <_raise_r+0x42>
 8005b36:	2316      	movs	r3, #22
 8005b38:	6003      	str	r3, [r0, #0]
 8005b3a:	2001      	movs	r0, #1
 8005b3c:	e7e7      	b.n	8005b0e <_raise_r+0x12>
 8005b3e:	2400      	movs	r4, #0
 8005b40:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8005b44:	4628      	mov	r0, r5
 8005b46:	4798      	blx	r3
 8005b48:	2000      	movs	r0, #0
 8005b4a:	e7e0      	b.n	8005b0e <_raise_r+0x12>

08005b4c <raise>:
 8005b4c:	4b02      	ldr	r3, [pc, #8]	; (8005b58 <raise+0xc>)
 8005b4e:	4601      	mov	r1, r0
 8005b50:	6818      	ldr	r0, [r3, #0]
 8005b52:	f7ff bfd3 	b.w	8005afc <_raise_r>
 8005b56:	bf00      	nop
 8005b58:	2000006c 	.word	0x2000006c

08005b5c <_kill_r>:
 8005b5c:	b538      	push	{r3, r4, r5, lr}
 8005b5e:	4d07      	ldr	r5, [pc, #28]	; (8005b7c <_kill_r+0x20>)
 8005b60:	2300      	movs	r3, #0
 8005b62:	4604      	mov	r4, r0
 8005b64:	4608      	mov	r0, r1
 8005b66:	4611      	mov	r1, r2
 8005b68:	602b      	str	r3, [r5, #0]
 8005b6a:	f7fb fce3 	bl	8001534 <_kill>
 8005b6e:	1c43      	adds	r3, r0, #1
 8005b70:	d102      	bne.n	8005b78 <_kill_r+0x1c>
 8005b72:	682b      	ldr	r3, [r5, #0]
 8005b74:	b103      	cbz	r3, 8005b78 <_kill_r+0x1c>
 8005b76:	6023      	str	r3, [r4, #0]
 8005b78:	bd38      	pop	{r3, r4, r5, pc}
 8005b7a:	bf00      	nop
 8005b7c:	20000354 	.word	0x20000354

08005b80 <_getpid_r>:
 8005b80:	f7fb bcd6 	b.w	8001530 <_getpid>

08005b84 <_init>:
 8005b84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b86:	bf00      	nop
 8005b88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005b8a:	bc08      	pop	{r3}
 8005b8c:	469e      	mov	lr, r3
 8005b8e:	4770      	bx	lr

08005b90 <_fini>:
 8005b90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b92:	bf00      	nop
 8005b94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005b96:	bc08      	pop	{r3}
 8005b98:	469e      	mov	lr, r3
 8005b9a:	4770      	bx	lr
