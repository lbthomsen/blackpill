
pwm_ic.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000595c  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000041c  08005b00  08005b00  00006b00  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005f1c  08005f1c  000072c4  2**0
                  CONTENTS
  4 .ARM          00000008  08005f1c  08005f1c  00006f1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005f24  08005f24  000072c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005f24  08005f24  00006f24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005f28  08005f28  00006f28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002c4  20000000  08005f2c  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000254  200002c4  080061f0  000072c4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000518  080061f0  00007518  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000072c4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010165  00000000  00000000  000072f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001dc5  00000000  00000000  00017459  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loclists 00008cbd  00000000  00000000  0001921e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000c30  00000000  00000000  00021ee0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000948  00000000  00000000  00022b10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00017083  00000000  00000000  00023458  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000108fd  00000000  00000000  0003a4db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008ff18  00000000  00000000  0004add8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000dacf0  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003144  00000000  00000000  000dad34  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000004d  00000000  00000000  000dde78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200002c4 	.word	0x200002c4
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08005ae4 	.word	0x08005ae4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200002c8 	.word	0x200002c8
 80001dc:	08005ae4 	.word	0x08005ae4

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_uldivmod>:
 8000bb8:	b953      	cbnz	r3, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bba:	b94a      	cbnz	r2, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bbc:	2900      	cmp	r1, #0
 8000bbe:	bf08      	it	eq
 8000bc0:	2800      	cmpeq	r0, #0
 8000bc2:	bf1c      	itt	ne
 8000bc4:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000bc8:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000bcc:	f000 b988 	b.w	8000ee0 <__aeabi_idiv0>
 8000bd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bd8:	f000 f806 	bl	8000be8 <__udivmoddi4>
 8000bdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000be0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000be4:	b004      	add	sp, #16
 8000be6:	4770      	bx	lr

08000be8 <__udivmoddi4>:
 8000be8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bec:	9d08      	ldr	r5, [sp, #32]
 8000bee:	468e      	mov	lr, r1
 8000bf0:	4604      	mov	r4, r0
 8000bf2:	4688      	mov	r8, r1
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d14a      	bne.n	8000c8e <__udivmoddi4+0xa6>
 8000bf8:	428a      	cmp	r2, r1
 8000bfa:	4617      	mov	r7, r2
 8000bfc:	d962      	bls.n	8000cc4 <__udivmoddi4+0xdc>
 8000bfe:	fab2 f682 	clz	r6, r2
 8000c02:	b14e      	cbz	r6, 8000c18 <__udivmoddi4+0x30>
 8000c04:	f1c6 0320 	rsb	r3, r6, #32
 8000c08:	fa01 f806 	lsl.w	r8, r1, r6
 8000c0c:	fa20 f303 	lsr.w	r3, r0, r3
 8000c10:	40b7      	lsls	r7, r6
 8000c12:	ea43 0808 	orr.w	r8, r3, r8
 8000c16:	40b4      	lsls	r4, r6
 8000c18:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c1c:	fa1f fc87 	uxth.w	ip, r7
 8000c20:	fbb8 f1fe 	udiv	r1, r8, lr
 8000c24:	0c23      	lsrs	r3, r4, #16
 8000c26:	fb0e 8811 	mls	r8, lr, r1, r8
 8000c2a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c2e:	fb01 f20c 	mul.w	r2, r1, ip
 8000c32:	429a      	cmp	r2, r3
 8000c34:	d909      	bls.n	8000c4a <__udivmoddi4+0x62>
 8000c36:	18fb      	adds	r3, r7, r3
 8000c38:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000c3c:	f080 80ea 	bcs.w	8000e14 <__udivmoddi4+0x22c>
 8000c40:	429a      	cmp	r2, r3
 8000c42:	f240 80e7 	bls.w	8000e14 <__udivmoddi4+0x22c>
 8000c46:	3902      	subs	r1, #2
 8000c48:	443b      	add	r3, r7
 8000c4a:	1a9a      	subs	r2, r3, r2
 8000c4c:	b2a3      	uxth	r3, r4
 8000c4e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c52:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c56:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000c5a:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c5e:	459c      	cmp	ip, r3
 8000c60:	d909      	bls.n	8000c76 <__udivmoddi4+0x8e>
 8000c62:	18fb      	adds	r3, r7, r3
 8000c64:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000c68:	f080 80d6 	bcs.w	8000e18 <__udivmoddi4+0x230>
 8000c6c:	459c      	cmp	ip, r3
 8000c6e:	f240 80d3 	bls.w	8000e18 <__udivmoddi4+0x230>
 8000c72:	443b      	add	r3, r7
 8000c74:	3802      	subs	r0, #2
 8000c76:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c7a:	eba3 030c 	sub.w	r3, r3, ip
 8000c7e:	2100      	movs	r1, #0
 8000c80:	b11d      	cbz	r5, 8000c8a <__udivmoddi4+0xa2>
 8000c82:	40f3      	lsrs	r3, r6
 8000c84:	2200      	movs	r2, #0
 8000c86:	e9c5 3200 	strd	r3, r2, [r5]
 8000c8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c8e:	428b      	cmp	r3, r1
 8000c90:	d905      	bls.n	8000c9e <__udivmoddi4+0xb6>
 8000c92:	b10d      	cbz	r5, 8000c98 <__udivmoddi4+0xb0>
 8000c94:	e9c5 0100 	strd	r0, r1, [r5]
 8000c98:	2100      	movs	r1, #0
 8000c9a:	4608      	mov	r0, r1
 8000c9c:	e7f5      	b.n	8000c8a <__udivmoddi4+0xa2>
 8000c9e:	fab3 f183 	clz	r1, r3
 8000ca2:	2900      	cmp	r1, #0
 8000ca4:	d146      	bne.n	8000d34 <__udivmoddi4+0x14c>
 8000ca6:	4573      	cmp	r3, lr
 8000ca8:	d302      	bcc.n	8000cb0 <__udivmoddi4+0xc8>
 8000caa:	4282      	cmp	r2, r0
 8000cac:	f200 8105 	bhi.w	8000eba <__udivmoddi4+0x2d2>
 8000cb0:	1a84      	subs	r4, r0, r2
 8000cb2:	eb6e 0203 	sbc.w	r2, lr, r3
 8000cb6:	2001      	movs	r0, #1
 8000cb8:	4690      	mov	r8, r2
 8000cba:	2d00      	cmp	r5, #0
 8000cbc:	d0e5      	beq.n	8000c8a <__udivmoddi4+0xa2>
 8000cbe:	e9c5 4800 	strd	r4, r8, [r5]
 8000cc2:	e7e2      	b.n	8000c8a <__udivmoddi4+0xa2>
 8000cc4:	2a00      	cmp	r2, #0
 8000cc6:	f000 8090 	beq.w	8000dea <__udivmoddi4+0x202>
 8000cca:	fab2 f682 	clz	r6, r2
 8000cce:	2e00      	cmp	r6, #0
 8000cd0:	f040 80a4 	bne.w	8000e1c <__udivmoddi4+0x234>
 8000cd4:	1a8a      	subs	r2, r1, r2
 8000cd6:	0c03      	lsrs	r3, r0, #16
 8000cd8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cdc:	b280      	uxth	r0, r0
 8000cde:	b2bc      	uxth	r4, r7
 8000ce0:	2101      	movs	r1, #1
 8000ce2:	fbb2 fcfe 	udiv	ip, r2, lr
 8000ce6:	fb0e 221c 	mls	r2, lr, ip, r2
 8000cea:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000cee:	fb04 f20c 	mul.w	r2, r4, ip
 8000cf2:	429a      	cmp	r2, r3
 8000cf4:	d907      	bls.n	8000d06 <__udivmoddi4+0x11e>
 8000cf6:	18fb      	adds	r3, r7, r3
 8000cf8:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 8000cfc:	d202      	bcs.n	8000d04 <__udivmoddi4+0x11c>
 8000cfe:	429a      	cmp	r2, r3
 8000d00:	f200 80e0 	bhi.w	8000ec4 <__udivmoddi4+0x2dc>
 8000d04:	46c4      	mov	ip, r8
 8000d06:	1a9b      	subs	r3, r3, r2
 8000d08:	fbb3 f2fe 	udiv	r2, r3, lr
 8000d0c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000d10:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000d14:	fb02 f404 	mul.w	r4, r2, r4
 8000d18:	429c      	cmp	r4, r3
 8000d1a:	d907      	bls.n	8000d2c <__udivmoddi4+0x144>
 8000d1c:	18fb      	adds	r3, r7, r3
 8000d1e:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 8000d22:	d202      	bcs.n	8000d2a <__udivmoddi4+0x142>
 8000d24:	429c      	cmp	r4, r3
 8000d26:	f200 80ca 	bhi.w	8000ebe <__udivmoddi4+0x2d6>
 8000d2a:	4602      	mov	r2, r0
 8000d2c:	1b1b      	subs	r3, r3, r4
 8000d2e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000d32:	e7a5      	b.n	8000c80 <__udivmoddi4+0x98>
 8000d34:	f1c1 0620 	rsb	r6, r1, #32
 8000d38:	408b      	lsls	r3, r1
 8000d3a:	fa22 f706 	lsr.w	r7, r2, r6
 8000d3e:	431f      	orrs	r7, r3
 8000d40:	fa0e f401 	lsl.w	r4, lr, r1
 8000d44:	fa20 f306 	lsr.w	r3, r0, r6
 8000d48:	fa2e fe06 	lsr.w	lr, lr, r6
 8000d4c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000d50:	4323      	orrs	r3, r4
 8000d52:	fa00 f801 	lsl.w	r8, r0, r1
 8000d56:	fa1f fc87 	uxth.w	ip, r7
 8000d5a:	fbbe f0f9 	udiv	r0, lr, r9
 8000d5e:	0c1c      	lsrs	r4, r3, #16
 8000d60:	fb09 ee10 	mls	lr, r9, r0, lr
 8000d64:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000d68:	fb00 fe0c 	mul.w	lr, r0, ip
 8000d6c:	45a6      	cmp	lr, r4
 8000d6e:	fa02 f201 	lsl.w	r2, r2, r1
 8000d72:	d909      	bls.n	8000d88 <__udivmoddi4+0x1a0>
 8000d74:	193c      	adds	r4, r7, r4
 8000d76:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 8000d7a:	f080 809c 	bcs.w	8000eb6 <__udivmoddi4+0x2ce>
 8000d7e:	45a6      	cmp	lr, r4
 8000d80:	f240 8099 	bls.w	8000eb6 <__udivmoddi4+0x2ce>
 8000d84:	3802      	subs	r0, #2
 8000d86:	443c      	add	r4, r7
 8000d88:	eba4 040e 	sub.w	r4, r4, lr
 8000d8c:	fa1f fe83 	uxth.w	lr, r3
 8000d90:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d94:	fb09 4413 	mls	r4, r9, r3, r4
 8000d98:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000d9c:	fb03 fc0c 	mul.w	ip, r3, ip
 8000da0:	45a4      	cmp	ip, r4
 8000da2:	d908      	bls.n	8000db6 <__udivmoddi4+0x1ce>
 8000da4:	193c      	adds	r4, r7, r4
 8000da6:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 8000daa:	f080 8082 	bcs.w	8000eb2 <__udivmoddi4+0x2ca>
 8000dae:	45a4      	cmp	ip, r4
 8000db0:	d97f      	bls.n	8000eb2 <__udivmoddi4+0x2ca>
 8000db2:	3b02      	subs	r3, #2
 8000db4:	443c      	add	r4, r7
 8000db6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000dba:	eba4 040c 	sub.w	r4, r4, ip
 8000dbe:	fba0 ec02 	umull	lr, ip, r0, r2
 8000dc2:	4564      	cmp	r4, ip
 8000dc4:	4673      	mov	r3, lr
 8000dc6:	46e1      	mov	r9, ip
 8000dc8:	d362      	bcc.n	8000e90 <__udivmoddi4+0x2a8>
 8000dca:	d05f      	beq.n	8000e8c <__udivmoddi4+0x2a4>
 8000dcc:	b15d      	cbz	r5, 8000de6 <__udivmoddi4+0x1fe>
 8000dce:	ebb8 0203 	subs.w	r2, r8, r3
 8000dd2:	eb64 0409 	sbc.w	r4, r4, r9
 8000dd6:	fa04 f606 	lsl.w	r6, r4, r6
 8000dda:	fa22 f301 	lsr.w	r3, r2, r1
 8000dde:	431e      	orrs	r6, r3
 8000de0:	40cc      	lsrs	r4, r1
 8000de2:	e9c5 6400 	strd	r6, r4, [r5]
 8000de6:	2100      	movs	r1, #0
 8000de8:	e74f      	b.n	8000c8a <__udivmoddi4+0xa2>
 8000dea:	fbb1 fcf2 	udiv	ip, r1, r2
 8000dee:	0c01      	lsrs	r1, r0, #16
 8000df0:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000df4:	b280      	uxth	r0, r0
 8000df6:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000dfa:	463b      	mov	r3, r7
 8000dfc:	4638      	mov	r0, r7
 8000dfe:	463c      	mov	r4, r7
 8000e00:	46b8      	mov	r8, r7
 8000e02:	46be      	mov	lr, r7
 8000e04:	2620      	movs	r6, #32
 8000e06:	fbb1 f1f7 	udiv	r1, r1, r7
 8000e0a:	eba2 0208 	sub.w	r2, r2, r8
 8000e0e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000e12:	e766      	b.n	8000ce2 <__udivmoddi4+0xfa>
 8000e14:	4601      	mov	r1, r0
 8000e16:	e718      	b.n	8000c4a <__udivmoddi4+0x62>
 8000e18:	4610      	mov	r0, r2
 8000e1a:	e72c      	b.n	8000c76 <__udivmoddi4+0x8e>
 8000e1c:	f1c6 0220 	rsb	r2, r6, #32
 8000e20:	fa2e f302 	lsr.w	r3, lr, r2
 8000e24:	40b7      	lsls	r7, r6
 8000e26:	40b1      	lsls	r1, r6
 8000e28:	fa20 f202 	lsr.w	r2, r0, r2
 8000e2c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e30:	430a      	orrs	r2, r1
 8000e32:	fbb3 f8fe 	udiv	r8, r3, lr
 8000e36:	b2bc      	uxth	r4, r7
 8000e38:	fb0e 3318 	mls	r3, lr, r8, r3
 8000e3c:	0c11      	lsrs	r1, r2, #16
 8000e3e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e42:	fb08 f904 	mul.w	r9, r8, r4
 8000e46:	40b0      	lsls	r0, r6
 8000e48:	4589      	cmp	r9, r1
 8000e4a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000e4e:	b280      	uxth	r0, r0
 8000e50:	d93e      	bls.n	8000ed0 <__udivmoddi4+0x2e8>
 8000e52:	1879      	adds	r1, r7, r1
 8000e54:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000e58:	d201      	bcs.n	8000e5e <__udivmoddi4+0x276>
 8000e5a:	4589      	cmp	r9, r1
 8000e5c:	d81f      	bhi.n	8000e9e <__udivmoddi4+0x2b6>
 8000e5e:	eba1 0109 	sub.w	r1, r1, r9
 8000e62:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e66:	fb09 f804 	mul.w	r8, r9, r4
 8000e6a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e6e:	b292      	uxth	r2, r2
 8000e70:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e74:	4542      	cmp	r2, r8
 8000e76:	d229      	bcs.n	8000ecc <__udivmoddi4+0x2e4>
 8000e78:	18ba      	adds	r2, r7, r2
 8000e7a:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 8000e7e:	d2c4      	bcs.n	8000e0a <__udivmoddi4+0x222>
 8000e80:	4542      	cmp	r2, r8
 8000e82:	d2c2      	bcs.n	8000e0a <__udivmoddi4+0x222>
 8000e84:	f1a9 0102 	sub.w	r1, r9, #2
 8000e88:	443a      	add	r2, r7
 8000e8a:	e7be      	b.n	8000e0a <__udivmoddi4+0x222>
 8000e8c:	45f0      	cmp	r8, lr
 8000e8e:	d29d      	bcs.n	8000dcc <__udivmoddi4+0x1e4>
 8000e90:	ebbe 0302 	subs.w	r3, lr, r2
 8000e94:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000e98:	3801      	subs	r0, #1
 8000e9a:	46e1      	mov	r9, ip
 8000e9c:	e796      	b.n	8000dcc <__udivmoddi4+0x1e4>
 8000e9e:	eba7 0909 	sub.w	r9, r7, r9
 8000ea2:	4449      	add	r1, r9
 8000ea4:	f1a8 0c02 	sub.w	ip, r8, #2
 8000ea8:	fbb1 f9fe 	udiv	r9, r1, lr
 8000eac:	fb09 f804 	mul.w	r8, r9, r4
 8000eb0:	e7db      	b.n	8000e6a <__udivmoddi4+0x282>
 8000eb2:	4673      	mov	r3, lr
 8000eb4:	e77f      	b.n	8000db6 <__udivmoddi4+0x1ce>
 8000eb6:	4650      	mov	r0, sl
 8000eb8:	e766      	b.n	8000d88 <__udivmoddi4+0x1a0>
 8000eba:	4608      	mov	r0, r1
 8000ebc:	e6fd      	b.n	8000cba <__udivmoddi4+0xd2>
 8000ebe:	443b      	add	r3, r7
 8000ec0:	3a02      	subs	r2, #2
 8000ec2:	e733      	b.n	8000d2c <__udivmoddi4+0x144>
 8000ec4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ec8:	443b      	add	r3, r7
 8000eca:	e71c      	b.n	8000d06 <__udivmoddi4+0x11e>
 8000ecc:	4649      	mov	r1, r9
 8000ece:	e79c      	b.n	8000e0a <__udivmoddi4+0x222>
 8000ed0:	eba1 0109 	sub.w	r1, r1, r9
 8000ed4:	46c4      	mov	ip, r8
 8000ed6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000eda:	fb09 f804 	mul.w	r8, r9, r4
 8000ede:	e7c4      	b.n	8000e6a <__udivmoddi4+0x282>

08000ee0 <__aeabi_idiv0>:
 8000ee0:	4770      	bx	lr
 8000ee2:	bf00      	nop

08000ee4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ee4:	b530      	push	{r4, r5, lr}
 8000ee6:	b08b      	sub	sp, #44	@ 0x2c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ee8:	2400      	movs	r4, #0
 8000eea:	9405      	str	r4, [sp, #20]
 8000eec:	9406      	str	r4, [sp, #24]
 8000eee:	9407      	str	r4, [sp, #28]
 8000ef0:	9408      	str	r4, [sp, #32]
 8000ef2:	9409      	str	r4, [sp, #36]	@ 0x24
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ef4:	9401      	str	r4, [sp, #4]
 8000ef6:	4b1e      	ldr	r3, [pc, #120]	@ (8000f70 <MX_GPIO_Init+0x8c>)
 8000ef8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000efa:	f042 0204 	orr.w	r2, r2, #4
 8000efe:	631a      	str	r2, [r3, #48]	@ 0x30
 8000f00:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000f02:	f002 0204 	and.w	r2, r2, #4
 8000f06:	9201      	str	r2, [sp, #4]
 8000f08:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f0a:	9402      	str	r4, [sp, #8]
 8000f0c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000f0e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8000f12:	631a      	str	r2, [r3, #48]	@ 0x30
 8000f14:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000f16:	f002 0280 	and.w	r2, r2, #128	@ 0x80
 8000f1a:	9202      	str	r2, [sp, #8]
 8000f1c:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f1e:	9403      	str	r4, [sp, #12]
 8000f20:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000f22:	f042 0201 	orr.w	r2, r2, #1
 8000f26:	631a      	str	r2, [r3, #48]	@ 0x30
 8000f28:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000f2a:	f002 0201 	and.w	r2, r2, #1
 8000f2e:	9203      	str	r2, [sp, #12]
 8000f30:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f32:	9404      	str	r4, [sp, #16]
 8000f34:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000f36:	f042 0202 	orr.w	r2, r2, #2
 8000f3a:	631a      	str	r2, [r3, #48]	@ 0x30
 8000f3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f3e:	f003 0302 	and.w	r3, r3, #2
 8000f42:	9304      	str	r3, [sp, #16]
 8000f44:	9b04      	ldr	r3, [sp, #16]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8000f46:	4d0b      	ldr	r5, [pc, #44]	@ (8000f74 <MX_GPIO_Init+0x90>)
 8000f48:	2201      	movs	r2, #1
 8000f4a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000f4e:	4628      	mov	r0, r5
 8000f50:	f000 fd3c 	bl	80019cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000f54:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000f58:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000f5a:	2311      	movs	r3, #17
 8000f5c:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f5e:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f60:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000f62:	a905      	add	r1, sp, #20
 8000f64:	4628      	mov	r0, r5
 8000f66:	f000 fc4d 	bl	8001804 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 8000f6a:	b00b      	add	sp, #44	@ 0x2c
 8000f6c:	bd30      	pop	{r4, r5, pc}
 8000f6e:	bf00      	nop
 8000f70:	40023800 	.word	0x40023800
 8000f74:	40020800 	.word	0x40020800

08000f78 <_write>:
    if (fd == 1 || fd == 2) {
 8000f78:	3801      	subs	r0, #1
 8000f7a:	2801      	cmp	r0, #1
 8000f7c:	d80a      	bhi.n	8000f94 <_write+0x1c>
int _write(int fd, char *ptr, int len) {
 8000f7e:	b510      	push	{r4, lr}
 8000f80:	4614      	mov	r4, r2
        hstatus = HAL_UART_Transmit(&huart1, (uint8_t*) ptr, len,
 8000f82:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000f86:	b292      	uxth	r2, r2
 8000f88:	4805      	ldr	r0, [pc, #20]	@ (8000fa0 <_write+0x28>)
 8000f8a:	f002 f876 	bl	800307a <HAL_UART_Transmit>
        if (hstatus == HAL_OK)
 8000f8e:	b920      	cbnz	r0, 8000f9a <_write+0x22>
            return len;
 8000f90:	4620      	mov	r0, r4
}
 8000f92:	bd10      	pop	{r4, pc}
    return -1;
 8000f94:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
}
 8000f98:	4770      	bx	lr
            return -1;
 8000f9a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000f9e:	e7f8      	b.n	8000f92 <_write+0x1a>
 8000fa0:	200002ec 	.word	0x200002ec

08000fa4 <HAL_TIM_IC_CaptureCallback>:
    if (htim->Instance == TIM2) {
 8000fa4:	6803      	ldr	r3, [r0, #0]
 8000fa6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000faa:	d000      	beq.n	8000fae <HAL_TIM_IC_CaptureCallback+0xa>
 8000fac:	4770      	bx	lr
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) {
 8000fae:	b510      	push	{r4, lr}
 8000fb0:	4604      	mov	r4, r0
        cnt_full = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1) + 2;
 8000fb2:	2100      	movs	r1, #0
 8000fb4:	f001 f93e 	bl	8002234 <HAL_TIM_ReadCapturedValue>
 8000fb8:	3002      	adds	r0, #2
 8000fba:	4b05      	ldr	r3, [pc, #20]	@ (8000fd0 <HAL_TIM_IC_CaptureCallback+0x2c>)
 8000fbc:	6018      	str	r0, [r3, #0]
        cnt_high = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2) + 2;
 8000fbe:	2104      	movs	r1, #4
 8000fc0:	4620      	mov	r0, r4
 8000fc2:	f001 f937 	bl	8002234 <HAL_TIM_ReadCapturedValue>
 8000fc6:	3002      	adds	r0, #2
 8000fc8:	4b02      	ldr	r3, [pc, #8]	@ (8000fd4 <HAL_TIM_IC_CaptureCallback+0x30>)
 8000fca:	6018      	str	r0, [r3, #0]
}
 8000fcc:	bd10      	pop	{r4, pc}
 8000fce:	bf00      	nop
 8000fd0:	200002e4 	.word	0x200002e4
 8000fd4:	200002e0 	.word	0x200002e0

08000fd8 <Error_Handler>:
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000fd8:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add his own implementation to report the HAL error return state */
    __disable_irq();
    while (1) {
 8000fda:	e7fe      	b.n	8000fda <Error_Handler+0x2>

08000fdc <MX_TIM4_Init>:
{
 8000fdc:	b500      	push	{lr}
 8000fde:	b08f      	sub	sp, #60	@ 0x3c
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	930a      	str	r3, [sp, #40]	@ 0x28
 8000fe4:	930b      	str	r3, [sp, #44]	@ 0x2c
 8000fe6:	930c      	str	r3, [sp, #48]	@ 0x30
 8000fe8:	930d      	str	r3, [sp, #52]	@ 0x34
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000fea:	9308      	str	r3, [sp, #32]
 8000fec:	9309      	str	r3, [sp, #36]	@ 0x24
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000fee:	9301      	str	r3, [sp, #4]
 8000ff0:	9302      	str	r3, [sp, #8]
 8000ff2:	9303      	str	r3, [sp, #12]
 8000ff4:	9304      	str	r3, [sp, #16]
 8000ff6:	9305      	str	r3, [sp, #20]
 8000ff8:	9306      	str	r3, [sp, #24]
 8000ffa:	9307      	str	r3, [sp, #28]
  htim4.Instance = TIM4;
 8000ffc:	481e      	ldr	r0, [pc, #120]	@ (8001078 <MX_TIM4_Init+0x9c>)
 8000ffe:	4a1f      	ldr	r2, [pc, #124]	@ (800107c <MX_TIM4_Init+0xa0>)
 8001000:	6002      	str	r2, [r0, #0]
  htim4.Init.Prescaler = 0;
 8001002:	6043      	str	r3, [r0, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001004:	6083      	str	r3, [r0, #8]
  htim4.Init.Period = 99;
 8001006:	2263      	movs	r2, #99	@ 0x63
 8001008:	60c2      	str	r2, [r0, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800100a:	6103      	str	r3, [r0, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800100c:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800100e:	f001 fa2f 	bl	8002470 <HAL_TIM_Base_Init>
 8001012:	bb38      	cbnz	r0, 8001064 <MX_TIM4_Init+0x88>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001014:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001018:	930a      	str	r3, [sp, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800101a:	a90a      	add	r1, sp, #40	@ 0x28
 800101c:	4816      	ldr	r0, [pc, #88]	@ (8001078 <MX_TIM4_Init+0x9c>)
 800101e:	f001 fbf0 	bl	8002802 <HAL_TIM_ConfigClockSource>
 8001022:	bb08      	cbnz	r0, 8001068 <MX_TIM4_Init+0x8c>
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001024:	4814      	ldr	r0, [pc, #80]	@ (8001078 <MX_TIM4_Init+0x9c>)
 8001026:	f001 fa4f 	bl	80024c8 <HAL_TIM_PWM_Init>
 800102a:	b9f8      	cbnz	r0, 800106c <MX_TIM4_Init+0x90>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800102c:	2300      	movs	r3, #0
 800102e:	9308      	str	r3, [sp, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001030:	9309      	str	r3, [sp, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001032:	a908      	add	r1, sp, #32
 8001034:	4810      	ldr	r0, [pc, #64]	@ (8001078 <MX_TIM4_Init+0x9c>)
 8001036:	f001 feb7 	bl	8002da8 <HAL_TIMEx_MasterConfigSynchronization>
 800103a:	b9c8      	cbnz	r0, 8001070 <MX_TIM4_Init+0x94>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800103c:	2360      	movs	r3, #96	@ 0x60
 800103e:	9301      	str	r3, [sp, #4]
  sConfigOC.Pulse = 0;
 8001040:	2300      	movs	r3, #0
 8001042:	9302      	str	r3, [sp, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001044:	9303      	str	r3, [sp, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8001046:	2304      	movs	r3, #4
 8001048:	9305      	str	r3, [sp, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800104a:	220c      	movs	r2, #12
 800104c:	eb0d 0103 	add.w	r1, sp, r3
 8001050:	4809      	ldr	r0, [pc, #36]	@ (8001078 <MX_TIM4_Init+0x9c>)
 8001052:	f001 fabf 	bl	80025d4 <HAL_TIM_PWM_ConfigChannel>
 8001056:	b968      	cbnz	r0, 8001074 <MX_TIM4_Init+0x98>
  HAL_TIM_MspPostInit(&htim4);
 8001058:	4807      	ldr	r0, [pc, #28]	@ (8001078 <MX_TIM4_Init+0x9c>)
 800105a:	f000 fa07 	bl	800146c <HAL_TIM_MspPostInit>
}
 800105e:	b00f      	add	sp, #60	@ 0x3c
 8001060:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8001064:	f7ff ffb8 	bl	8000fd8 <Error_Handler>
    Error_Handler();
 8001068:	f7ff ffb6 	bl	8000fd8 <Error_Handler>
    Error_Handler();
 800106c:	f7ff ffb4 	bl	8000fd8 <Error_Handler>
    Error_Handler();
 8001070:	f7ff ffb2 	bl	8000fd8 <Error_Handler>
    Error_Handler();
 8001074:	f7ff ffb0 	bl	8000fd8 <Error_Handler>
 8001078:	20000334 	.word	0x20000334
 800107c:	40000800 	.word	0x40000800

08001080 <MX_USART1_UART_Init>:
{
 8001080:	b508      	push	{r3, lr}
  huart1.Instance = USART1;
 8001082:	4809      	ldr	r0, [pc, #36]	@ (80010a8 <MX_USART1_UART_Init+0x28>)
 8001084:	4b09      	ldr	r3, [pc, #36]	@ (80010ac <MX_USART1_UART_Init+0x2c>)
 8001086:	6003      	str	r3, [r0, #0]
  huart1.Init.BaudRate = 2000000;
 8001088:	4b09      	ldr	r3, [pc, #36]	@ (80010b0 <MX_USART1_UART_Init+0x30>)
 800108a:	6043      	str	r3, [r0, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800108c:	2300      	movs	r3, #0
 800108e:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001090:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001092:	6103      	str	r3, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001094:	220c      	movs	r2, #12
 8001096:	6142      	str	r2, [r0, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001098:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800109a:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800109c:	f001 ffbd 	bl	800301a <HAL_UART_Init>
 80010a0:	b900      	cbnz	r0, 80010a4 <MX_USART1_UART_Init+0x24>
}
 80010a2:	bd08      	pop	{r3, pc}
    Error_Handler();
 80010a4:	f7ff ff98 	bl	8000fd8 <Error_Handler>
 80010a8:	200002ec 	.word	0x200002ec
 80010ac:	40011000 	.word	0x40011000
 80010b0:	001e8480 	.word	0x001e8480

080010b4 <MX_TIM2_Init>:
{
 80010b4:	b500      	push	{lr}
 80010b6:	b091      	sub	sp, #68	@ 0x44
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80010b8:	2300      	movs	r3, #0
 80010ba:	930c      	str	r3, [sp, #48]	@ 0x30
 80010bc:	930d      	str	r3, [sp, #52]	@ 0x34
 80010be:	930e      	str	r3, [sp, #56]	@ 0x38
 80010c0:	930f      	str	r3, [sp, #60]	@ 0x3c
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80010c2:	9307      	str	r3, [sp, #28]
 80010c4:	9308      	str	r3, [sp, #32]
 80010c6:	9309      	str	r3, [sp, #36]	@ 0x24
 80010c8:	930a      	str	r3, [sp, #40]	@ 0x28
 80010ca:	930b      	str	r3, [sp, #44]	@ 0x2c
  TIM_IC_InitTypeDef sConfigIC = {0};
 80010cc:	9303      	str	r3, [sp, #12]
 80010ce:	9304      	str	r3, [sp, #16]
 80010d0:	9305      	str	r3, [sp, #20]
 80010d2:	9306      	str	r3, [sp, #24]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010d4:	9301      	str	r3, [sp, #4]
 80010d6:	9302      	str	r3, [sp, #8]
  htim2.Instance = TIM2;
 80010d8:	482b      	ldr	r0, [pc, #172]	@ (8001188 <MX_TIM2_Init+0xd4>)
 80010da:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80010de:	6002      	str	r2, [r0, #0]
  htim2.Init.Prescaler = 0;
 80010e0:	6043      	str	r3, [r0, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010e2:	6083      	str	r3, [r0, #8]
  htim2.Init.Period = 4294967295;
 80010e4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80010e8:	60c2      	str	r2, [r0, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010ea:	6103      	str	r3, [r0, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010ec:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80010ee:	f001 f9bf 	bl	8002470 <HAL_TIM_Base_Init>
 80010f2:	2800      	cmp	r0, #0
 80010f4:	d139      	bne.n	800116a <MX_TIM2_Init+0xb6>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80010f6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80010fa:	930c      	str	r3, [sp, #48]	@ 0x30
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80010fc:	a90c      	add	r1, sp, #48	@ 0x30
 80010fe:	4822      	ldr	r0, [pc, #136]	@ (8001188 <MX_TIM2_Init+0xd4>)
 8001100:	f001 fb7f 	bl	8002802 <HAL_TIM_ConfigClockSource>
 8001104:	2800      	cmp	r0, #0
 8001106:	d132      	bne.n	800116e <MX_TIM2_Init+0xba>
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8001108:	481f      	ldr	r0, [pc, #124]	@ (8001188 <MX_TIM2_Init+0xd4>)
 800110a:	f001 fa09 	bl	8002520 <HAL_TIM_IC_Init>
 800110e:	2800      	cmp	r0, #0
 8001110:	d12f      	bne.n	8001172 <MX_TIM2_Init+0xbe>
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8001112:	2304      	movs	r3, #4
 8001114:	9307      	str	r3, [sp, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8001116:	2350      	movs	r3, #80	@ 0x50
 8001118:	9308      	str	r3, [sp, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800111a:	2300      	movs	r3, #0
 800111c:	9309      	str	r3, [sp, #36]	@ 0x24
  sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 800111e:	930a      	str	r3, [sp, #40]	@ 0x28
  sSlaveConfig.TriggerFilter = 0;
 8001120:	930b      	str	r3, [sp, #44]	@ 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 8001122:	a907      	add	r1, sp, #28
 8001124:	4818      	ldr	r0, [pc, #96]	@ (8001188 <MX_TIM2_Init+0xd4>)
 8001126:	f001 fc47 	bl	80029b8 <HAL_TIM_SlaveConfigSynchro>
 800112a:	bb20      	cbnz	r0, 8001176 <MX_TIM2_Init+0xc2>
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800112c:	2200      	movs	r2, #0
 800112e:	9203      	str	r2, [sp, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001130:	2301      	movs	r3, #1
 8001132:	9304      	str	r3, [sp, #16]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001134:	9205      	str	r2, [sp, #20]
  sConfigIC.ICFilter = 0;
 8001136:	9206      	str	r2, [sp, #24]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001138:	a903      	add	r1, sp, #12
 800113a:	4813      	ldr	r0, [pc, #76]	@ (8001188 <MX_TIM2_Init+0xd4>)
 800113c:	f001 faee 	bl	800271c <HAL_TIM_IC_ConfigChannel>
 8001140:	b9d8      	cbnz	r0, 800117a <MX_TIM2_Init+0xc6>
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8001142:	2302      	movs	r3, #2
 8001144:	9303      	str	r3, [sp, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8001146:	9304      	str	r3, [sp, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8001148:	2204      	movs	r2, #4
 800114a:	a903      	add	r1, sp, #12
 800114c:	480e      	ldr	r0, [pc, #56]	@ (8001188 <MX_TIM2_Init+0xd4>)
 800114e:	f001 fae5 	bl	800271c <HAL_TIM_IC_ConfigChannel>
 8001152:	b9a0      	cbnz	r0, 800117e <MX_TIM2_Init+0xca>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001154:	2300      	movs	r3, #0
 8001156:	9301      	str	r3, [sp, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001158:	9302      	str	r3, [sp, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800115a:	a901      	add	r1, sp, #4
 800115c:	480a      	ldr	r0, [pc, #40]	@ (8001188 <MX_TIM2_Init+0xd4>)
 800115e:	f001 fe23 	bl	8002da8 <HAL_TIMEx_MasterConfigSynchronization>
 8001162:	b970      	cbnz	r0, 8001182 <MX_TIM2_Init+0xce>
}
 8001164:	b011      	add	sp, #68	@ 0x44
 8001166:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 800116a:	f7ff ff35 	bl	8000fd8 <Error_Handler>
    Error_Handler();
 800116e:	f7ff ff33 	bl	8000fd8 <Error_Handler>
    Error_Handler();
 8001172:	f7ff ff31 	bl	8000fd8 <Error_Handler>
    Error_Handler();
 8001176:	f7ff ff2f 	bl	8000fd8 <Error_Handler>
    Error_Handler();
 800117a:	f7ff ff2d 	bl	8000fd8 <Error_Handler>
    Error_Handler();
 800117e:	f7ff ff2b 	bl	8000fd8 <Error_Handler>
    Error_Handler();
 8001182:	f7ff ff29 	bl	8000fd8 <Error_Handler>
 8001186:	bf00      	nop
 8001188:	2000037c 	.word	0x2000037c

0800118c <SystemClock_Config>:
{
 800118c:	b500      	push	{lr}
 800118e:	b095      	sub	sp, #84	@ 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001190:	2230      	movs	r2, #48	@ 0x30
 8001192:	2100      	movs	r1, #0
 8001194:	a808      	add	r0, sp, #32
 8001196:	f002 fd4a 	bl	8003c2e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800119a:	2300      	movs	r3, #0
 800119c:	9303      	str	r3, [sp, #12]
 800119e:	9304      	str	r3, [sp, #16]
 80011a0:	9305      	str	r3, [sp, #20]
 80011a2:	9306      	str	r3, [sp, #24]
 80011a4:	9307      	str	r3, [sp, #28]
  __HAL_RCC_PWR_CLK_ENABLE();
 80011a6:	9301      	str	r3, [sp, #4]
 80011a8:	4a1f      	ldr	r2, [pc, #124]	@ (8001228 <SystemClock_Config+0x9c>)
 80011aa:	6c11      	ldr	r1, [r2, #64]	@ 0x40
 80011ac:	f041 5180 	orr.w	r1, r1, #268435456	@ 0x10000000
 80011b0:	6411      	str	r1, [r2, #64]	@ 0x40
 80011b2:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80011b4:	f002 5280 	and.w	r2, r2, #268435456	@ 0x10000000
 80011b8:	9201      	str	r2, [sp, #4]
 80011ba:	9a01      	ldr	r2, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80011bc:	9302      	str	r3, [sp, #8]
 80011be:	4b1b      	ldr	r3, [pc, #108]	@ (800122c <SystemClock_Config+0xa0>)
 80011c0:	681a      	ldr	r2, [r3, #0]
 80011c2:	f442 4240 	orr.w	r2, r2, #49152	@ 0xc000
 80011c6:	601a      	str	r2, [r3, #0]
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80011ce:	9302      	str	r3, [sp, #8]
 80011d0:	9b02      	ldr	r3, [sp, #8]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80011d2:	2301      	movs	r3, #1
 80011d4:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80011d6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80011da:	9309      	str	r3, [sp, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011dc:	2302      	movs	r3, #2
 80011de:	930e      	str	r3, [sp, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80011e0:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 80011e4:	920f      	str	r2, [sp, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 12;
 80011e6:	220c      	movs	r2, #12
 80011e8:	9210      	str	r2, [sp, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 96;
 80011ea:	2260      	movs	r2, #96	@ 0x60
 80011ec:	9211      	str	r2, [sp, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80011ee:	9312      	str	r3, [sp, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80011f0:	2304      	movs	r3, #4
 80011f2:	9313      	str	r3, [sp, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011f4:	a808      	add	r0, sp, #32
 80011f6:	f000 fbf9 	bl	80019ec <HAL_RCC_OscConfig>
 80011fa:	b988      	cbnz	r0, 8001220 <SystemClock_Config+0x94>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011fc:	230f      	movs	r3, #15
 80011fe:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001200:	2302      	movs	r3, #2
 8001202:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001204:	2300      	movs	r3, #0
 8001206:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001208:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800120c:	9206      	str	r2, [sp, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800120e:	9307      	str	r3, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001210:	2103      	movs	r1, #3
 8001212:	a803      	add	r0, sp, #12
 8001214:	f000 fe3a 	bl	8001e8c <HAL_RCC_ClockConfig>
 8001218:	b920      	cbnz	r0, 8001224 <SystemClock_Config+0x98>
}
 800121a:	b015      	add	sp, #84	@ 0x54
 800121c:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8001220:	f7ff feda 	bl	8000fd8 <Error_Handler>
    Error_Handler();
 8001224:	f7ff fed8 	bl	8000fd8 <Error_Handler>
 8001228:	40023800 	.word	0x40023800
 800122c:	40007000 	.word	0x40007000

08001230 <main>:
{
 8001230:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001234:	ed2d 8b02 	vpush	{d8}
 8001238:	b084      	sub	sp, #16
  HAL_Init();
 800123a:	f000 fa3b 	bl	80016b4 <HAL_Init>
  SystemClock_Config();
 800123e:	f7ff ffa5 	bl	800118c <SystemClock_Config>
  MX_GPIO_Init();
 8001242:	f7ff fe4f 	bl	8000ee4 <MX_GPIO_Init>
  MX_TIM4_Init();
 8001246:	f7ff fec9 	bl	8000fdc <MX_TIM4_Init>
  MX_USART1_UART_Init();
 800124a:	f7ff ff19 	bl	8001080 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 800124e:	f7ff ff31 	bl	80010b4 <MX_TIM2_Init>
    DBG("Firing up PWM");
 8001252:	4842      	ldr	r0, [pc, #264]	@ (800135c <main+0x12c>)
 8001254:	f002 fc8e 	bl	8003b74 <iprintf>
 8001258:	200a      	movs	r0, #10
 800125a:	f002 fc9d 	bl	8003b98 <putchar>
    HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);   // Output PWM Generation
 800125e:	210c      	movs	r1, #12
 8001260:	483f      	ldr	r0, [pc, #252]	@ (8001360 <main+0x130>)
 8001262:	f001 fbe1 	bl	8002a28 <HAL_TIM_PWM_Start>
    DBG("Firing up PWM Input Capture");
 8001266:	483f      	ldr	r0, [pc, #252]	@ (8001364 <main+0x134>)
 8001268:	f002 fc84 	bl	8003b74 <iprintf>
 800126c:	200a      	movs	r0, #10
 800126e:	f002 fc93 	bl	8003b98 <putchar>
    HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1); // Primary channel - rising edge - rinse and repeat
 8001272:	4c3d      	ldr	r4, [pc, #244]	@ (8001368 <main+0x138>)
 8001274:	2100      	movs	r1, #0
 8001276:	4620      	mov	r0, r4
 8001278:	f001 fcd4 	bl	8002c24 <HAL_TIM_IC_Start_IT>
    HAL_TIM_IC_Start(&htim2, TIM_CHANNEL_2);    // Secondary channel - falling edge - stop second counter
 800127c:	2104      	movs	r1, #4
 800127e:	4620      	mov	r0, r4
 8001280:	f001 fc4a 	bl	8002b18 <HAL_TIM_IC_Start>
    uint32_t now = 0, next_blink = 500, next_print = 1000, next_change = 0;
 8001284:	2500      	movs	r5, #0
 8001286:	f44f 777a 	mov.w	r7, #1000	@ 0x3e8
 800128a:	f44f 76fa 	mov.w	r6, #500	@ 0x1f4
 800128e:	e03b      	b.n	8001308 <main+0xd8>
            HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8001290:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001294:	4835      	ldr	r0, [pc, #212]	@ (800136c <main+0x13c>)
 8001296:	f000 fb9f 	bl	80019d8 <HAL_GPIO_TogglePin>
            next_blink = now + 500;
 800129a:	f504 76fa 	add.w	r6, r4, #500	@ 0x1f4
 800129e:	e038      	b.n	8001312 <main+0xe2>
            float freq = (float) TIMER_CLOCK_FREQ / (cnt_full);
 80012a0:	4b33      	ldr	r3, [pc, #204]	@ (8001370 <main+0x140>)
 80012a2:	f8d3 8000 	ldr.w	r8, [r3]
 80012a6:	ee07 8a90 	vmov	s15, r8
 80012aa:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80012ae:	eddf 7a31 	vldr	s15, [pc, #196]	@ 8001374 <main+0x144>
 80012b2:	ee87 8a87 	vdiv.f32	s16, s15, s14
            float duty = (float) 100 * cnt_high / cnt_full;
 80012b6:	4b30      	ldr	r3, [pc, #192]	@ (8001378 <main+0x148>)
 80012b8:	edd3 7a00 	vldr	s15, [r3]
 80012bc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80012c0:	eddf 6a2e 	vldr	s13, [pc, #184]	@ 800137c <main+0x14c>
 80012c4:	ee67 7aa6 	vmul.f32	s15, s15, s13
            DBG("Tick %5lu count = %8lu freq = %10.2f Hz duty = %7.2f %%", now / 1000, cnt_full, freq, duty);
 80012c8:	4f2d      	ldr	r7, [pc, #180]	@ (8001380 <main+0x150>)
 80012ca:	fba7 3704 	umull	r3, r7, r7, r4
 80012ce:	09bf      	lsrs	r7, r7, #6
 80012d0:	eec7 7a87 	vdiv.f32	s15, s15, s14
 80012d4:	ee17 0a90 	vmov	r0, s15
 80012d8:	f7ff f93e 	bl	8000558 <__aeabi_f2d>
 80012dc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80012e0:	ee18 0a10 	vmov	r0, s16
 80012e4:	f7ff f938 	bl	8000558 <__aeabi_f2d>
 80012e8:	e9cd 0100 	strd	r0, r1, [sp]
 80012ec:	4642      	mov	r2, r8
 80012ee:	4639      	mov	r1, r7
 80012f0:	4824      	ldr	r0, [pc, #144]	@ (8001384 <main+0x154>)
 80012f2:	f002 fc3f 	bl	8003b74 <iprintf>
 80012f6:	200a      	movs	r0, #10
 80012f8:	f002 fc4e 	bl	8003b98 <putchar>
            next_print = now + 1000;
 80012fc:	f504 777a 	add.w	r7, r4, #1000	@ 0x3e8
 8001300:	e009      	b.n	8001316 <main+0xe6>
            next_change = now + 10000;
 8001302:	f504 551c 	add.w	r5, r4, #9984	@ 0x2700
 8001306:	3510      	adds	r5, #16
        now = HAL_GetTick();
 8001308:	f000 f9fa 	bl	8001700 <HAL_GetTick>
 800130c:	4604      	mov	r4, r0
        if (now >= next_blink) {
 800130e:	4286      	cmp	r6, r0
 8001310:	d9be      	bls.n	8001290 <main+0x60>
        if (now >= next_print) {
 8001312:	42a7      	cmp	r7, r4
 8001314:	d9c4      	bls.n	80012a0 <main+0x70>
        if (now >= next_change) {
 8001316:	42a5      	cmp	r5, r4
 8001318:	d8f6      	bhi.n	8001308 <main+0xd8>
            printf("Setting prescaler = %lu compare = %lu\n", pwm_vals[pwm_vals_idx][0], pwm_vals[pwm_vals_idx][1]);
 800131a:	f8df 8074 	ldr.w	r8, [pc, #116]	@ 8001390 <main+0x160>
 800131e:	f8d8 3000 	ldr.w	r3, [r8]
 8001322:	4d19      	ldr	r5, [pc, #100]	@ (8001388 <main+0x158>)
 8001324:	eb05 02c3 	add.w	r2, r5, r3, lsl #3
 8001328:	6852      	ldr	r2, [r2, #4]
 800132a:	f855 1033 	ldr.w	r1, [r5, r3, lsl #3]
 800132e:	4817      	ldr	r0, [pc, #92]	@ (800138c <main+0x15c>)
 8001330:	f002 fc20 	bl	8003b74 <iprintf>
            __HAL_TIM_SET_PRESCALER(&htim4, pwm_vals[pwm_vals_idx][0]);
 8001334:	f8d8 3000 	ldr.w	r3, [r8]
 8001338:	4a09      	ldr	r2, [pc, #36]	@ (8001360 <main+0x130>)
 800133a:	6812      	ldr	r2, [r2, #0]
 800133c:	f855 1033 	ldr.w	r1, [r5, r3, lsl #3]
 8001340:	6291      	str	r1, [r2, #40]	@ 0x28
            __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_4, pwm_vals[pwm_vals_idx][1]);
 8001342:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 8001346:	6869      	ldr	r1, [r5, #4]
 8001348:	6411      	str	r1, [r2, #64]	@ 0x40
            ++pwm_vals_idx;
 800134a:	3301      	adds	r3, #1
 800134c:	f8c8 3000 	str.w	r3, [r8]
            if (pwm_vals_idx >= sizeof(pwm_vals) / sizeof(pwm_vals[0])) {
 8001350:	2b1d      	cmp	r3, #29
 8001352:	d9d6      	bls.n	8001302 <main+0xd2>
                pwm_vals_idx = 0;
 8001354:	2200      	movs	r2, #0
 8001356:	f8c8 2000 	str.w	r2, [r8]
 800135a:	e7d2      	b.n	8001302 <main+0xd2>
 800135c:	08005b00 	.word	0x08005b00
 8001360:	20000334 	.word	0x20000334
 8001364:	08005b10 	.word	0x08005b10
 8001368:	2000037c 	.word	0x2000037c
 800136c:	40020800 	.word	0x40020800
 8001370:	200002e4 	.word	0x200002e4
 8001374:	4cbebc20 	.word	0x4cbebc20
 8001378:	200002e0 	.word	0x200002e0
 800137c:	42c80000 	.word	0x42c80000
 8001380:	10624dd3 	.word	0x10624dd3
 8001384:	08005b2c 	.word	0x08005b2c
 8001388:	20000000 	.word	0x20000000
 800138c:	08005b64 	.word	0x08005b64
 8001390:	200002e8 	.word	0x200002e8

08001394 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001394:	b082      	sub	sp, #8

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001396:	2100      	movs	r1, #0
 8001398:	9100      	str	r1, [sp, #0]
 800139a:	4b0b      	ldr	r3, [pc, #44]	@ (80013c8 <HAL_MspInit+0x34>)
 800139c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800139e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80013a2:	645a      	str	r2, [r3, #68]	@ 0x44
 80013a4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80013a6:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 80013aa:	9200      	str	r2, [sp, #0]
 80013ac:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80013ae:	9101      	str	r1, [sp, #4]
 80013b0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80013b2:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 80013b6:	641a      	str	r2, [r3, #64]	@ 0x40
 80013b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013ba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80013be:	9301      	str	r3, [sp, #4]
 80013c0:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013c2:	b002      	add	sp, #8
 80013c4:	4770      	bx	lr
 80013c6:	bf00      	nop
 80013c8:	40023800 	.word	0x40023800

080013cc <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80013cc:	b510      	push	{r4, lr}
 80013ce:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013d0:	2300      	movs	r3, #0
 80013d2:	9303      	str	r3, [sp, #12]
 80013d4:	9304      	str	r3, [sp, #16]
 80013d6:	9305      	str	r3, [sp, #20]
 80013d8:	9306      	str	r3, [sp, #24]
 80013da:	9307      	str	r3, [sp, #28]
  if(htim_base->Instance==TIM2)
 80013dc:	6803      	ldr	r3, [r0, #0]
 80013de:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80013e2:	d004      	beq.n	80013ee <HAL_TIM_Base_MspInit+0x22>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
    /* USER CODE BEGIN TIM2_MspInit 1 */

    /* USER CODE END TIM2_MspInit 1 */
  }
  else if(htim_base->Instance==TIM4)
 80013e4:	4a1e      	ldr	r2, [pc, #120]	@ (8001460 <HAL_TIM_Base_MspInit+0x94>)
 80013e6:	4293      	cmp	r3, r2
 80013e8:	d02d      	beq.n	8001446 <HAL_TIM_Base_MspInit+0x7a>
    /* USER CODE BEGIN TIM4_MspInit 1 */

    /* USER CODE END TIM4_MspInit 1 */
  }

}
 80013ea:	b008      	add	sp, #32
 80013ec:	bd10      	pop	{r4, pc}
    __HAL_RCC_TIM2_CLK_ENABLE();
 80013ee:	2400      	movs	r4, #0
 80013f0:	9400      	str	r4, [sp, #0]
 80013f2:	f503 330e 	add.w	r3, r3, #145408	@ 0x23800
 80013f6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80013f8:	f042 0201 	orr.w	r2, r2, #1
 80013fc:	641a      	str	r2, [r3, #64]	@ 0x40
 80013fe:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001400:	f002 0201 	and.w	r2, r2, #1
 8001404:	9200      	str	r2, [sp, #0]
 8001406:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001408:	9401      	str	r4, [sp, #4]
 800140a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800140c:	f042 0201 	orr.w	r2, r2, #1
 8001410:	631a      	str	r2, [r3, #48]	@ 0x30
 8001412:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001414:	f003 0301 	and.w	r3, r3, #1
 8001418:	9301      	str	r3, [sp, #4]
 800141a:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = PWM_IN_Pin;
 800141c:	2320      	movs	r3, #32
 800141e:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001420:	2302      	movs	r3, #2
 8001422:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001424:	2303      	movs	r3, #3
 8001426:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001428:	2301      	movs	r3, #1
 800142a:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(PWM_IN_GPIO_Port, &GPIO_InitStruct);
 800142c:	a903      	add	r1, sp, #12
 800142e:	480d      	ldr	r0, [pc, #52]	@ (8001464 <HAL_TIM_Base_MspInit+0x98>)
 8001430:	f000 f9e8 	bl	8001804 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001434:	4622      	mov	r2, r4
 8001436:	4621      	mov	r1, r4
 8001438:	201c      	movs	r0, #28
 800143a:	f000 f9bb 	bl	80017b4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800143e:	201c      	movs	r0, #28
 8001440:	f000 f9c8 	bl	80017d4 <HAL_NVIC_EnableIRQ>
 8001444:	e7d1      	b.n	80013ea <HAL_TIM_Base_MspInit+0x1e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001446:	2300      	movs	r3, #0
 8001448:	9302      	str	r3, [sp, #8]
 800144a:	4b07      	ldr	r3, [pc, #28]	@ (8001468 <HAL_TIM_Base_MspInit+0x9c>)
 800144c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800144e:	f042 0204 	orr.w	r2, r2, #4
 8001452:	641a      	str	r2, [r3, #64]	@ 0x40
 8001454:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001456:	f003 0304 	and.w	r3, r3, #4
 800145a:	9302      	str	r3, [sp, #8]
 800145c:	9b02      	ldr	r3, [sp, #8]
}
 800145e:	e7c4      	b.n	80013ea <HAL_TIM_Base_MspInit+0x1e>
 8001460:	40000800 	.word	0x40000800
 8001464:	40020000 	.word	0x40020000
 8001468:	40023800 	.word	0x40023800

0800146c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800146c:	b500      	push	{lr}
 800146e:	b087      	sub	sp, #28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001470:	2300      	movs	r3, #0
 8001472:	9301      	str	r3, [sp, #4]
 8001474:	9302      	str	r3, [sp, #8]
 8001476:	9303      	str	r3, [sp, #12]
 8001478:	9304      	str	r3, [sp, #16]
 800147a:	9305      	str	r3, [sp, #20]
  if(htim->Instance==TIM4)
 800147c:	6802      	ldr	r2, [r0, #0]
 800147e:	4b0e      	ldr	r3, [pc, #56]	@ (80014b8 <HAL_TIM_MspPostInit+0x4c>)
 8001480:	429a      	cmp	r2, r3
 8001482:	d002      	beq.n	800148a <HAL_TIM_MspPostInit+0x1e>
    /* USER CODE BEGIN TIM4_MspPostInit 1 */

    /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8001484:	b007      	add	sp, #28
 8001486:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800148a:	2300      	movs	r3, #0
 800148c:	9300      	str	r3, [sp, #0]
 800148e:	4b0b      	ldr	r3, [pc, #44]	@ (80014bc <HAL_TIM_MspPostInit+0x50>)
 8001490:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001492:	f042 0202 	orr.w	r2, r2, #2
 8001496:	631a      	str	r2, [r3, #48]	@ 0x30
 8001498:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800149a:	f003 0302 	and.w	r3, r3, #2
 800149e:	9300      	str	r3, [sp, #0]
 80014a0:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = PWM_OUT_Pin;
 80014a2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80014a6:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014a8:	2302      	movs	r3, #2
 80014aa:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80014ac:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(PWM_OUT_GPIO_Port, &GPIO_InitStruct);
 80014ae:	a901      	add	r1, sp, #4
 80014b0:	4803      	ldr	r0, [pc, #12]	@ (80014c0 <HAL_TIM_MspPostInit+0x54>)
 80014b2:	f000 f9a7 	bl	8001804 <HAL_GPIO_Init>
}
 80014b6:	e7e5      	b.n	8001484 <HAL_TIM_MspPostInit+0x18>
 80014b8:	40000800 	.word	0x40000800
 80014bc:	40023800 	.word	0x40023800
 80014c0:	40020400 	.word	0x40020400

080014c4 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80014c4:	b500      	push	{lr}
 80014c6:	b089      	sub	sp, #36	@ 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014c8:	2300      	movs	r3, #0
 80014ca:	9303      	str	r3, [sp, #12]
 80014cc:	9304      	str	r3, [sp, #16]
 80014ce:	9305      	str	r3, [sp, #20]
 80014d0:	9306      	str	r3, [sp, #24]
 80014d2:	9307      	str	r3, [sp, #28]
  if(huart->Instance==USART1)
 80014d4:	6802      	ldr	r2, [r0, #0]
 80014d6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80014da:	f503 3388 	add.w	r3, r3, #69632	@ 0x11000
 80014de:	429a      	cmp	r2, r3
 80014e0:	d002      	beq.n	80014e8 <HAL_UART_MspInit+0x24>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 80014e2:	b009      	add	sp, #36	@ 0x24
 80014e4:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_USART1_CLK_ENABLE();
 80014e8:	2100      	movs	r1, #0
 80014ea:	9101      	str	r1, [sp, #4]
 80014ec:	f503 3394 	add.w	r3, r3, #75776	@ 0x12800
 80014f0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80014f2:	f042 0210 	orr.w	r2, r2, #16
 80014f6:	645a      	str	r2, [r3, #68]	@ 0x44
 80014f8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80014fa:	f002 0210 	and.w	r2, r2, #16
 80014fe:	9201      	str	r2, [sp, #4]
 8001500:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001502:	9102      	str	r1, [sp, #8]
 8001504:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001506:	f042 0201 	orr.w	r2, r2, #1
 800150a:	631a      	str	r2, [r3, #48]	@ 0x30
 800150c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800150e:	f003 0301 	and.w	r3, r3, #1
 8001512:	9302      	str	r3, [sp, #8]
 8001514:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001516:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 800151a:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800151c:	2302      	movs	r3, #2
 800151e:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001520:	2303      	movs	r3, #3
 8001522:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001524:	2307      	movs	r3, #7
 8001526:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001528:	a903      	add	r1, sp, #12
 800152a:	4802      	ldr	r0, [pc, #8]	@ (8001534 <HAL_UART_MspInit+0x70>)
 800152c:	f000 f96a 	bl	8001804 <HAL_GPIO_Init>
}
 8001530:	e7d7      	b.n	80014e2 <HAL_UART_MspInit+0x1e>
 8001532:	bf00      	nop
 8001534:	40020000 	.word	0x40020000

08001538 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001538:	e7fe      	b.n	8001538 <NMI_Handler>

0800153a <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800153a:	e7fe      	b.n	800153a <HardFault_Handler>

0800153c <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800153c:	e7fe      	b.n	800153c <MemManage_Handler>

0800153e <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800153e:	e7fe      	b.n	800153e <BusFault_Handler>

08001540 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001540:	e7fe      	b.n	8001540 <UsageFault_Handler>

08001542 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001542:	4770      	bx	lr

08001544 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001544:	4770      	bx	lr

08001546 <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001546:	4770      	bx	lr

08001548 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001548:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800154a:	f000 f8cd 	bl	80016e8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800154e:	bd08      	pop	{r3, pc}

08001550 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001550:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001552:	4802      	ldr	r0, [pc, #8]	@ (800155c <TIM2_IRQHandler+0xc>)
 8001554:	f000 fe8b 	bl	800226e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001558:	bd08      	pop	{r3, pc}
 800155a:	bf00      	nop
 800155c:	2000037c 	.word	0x2000037c

08001560 <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 8001560:	2001      	movs	r0, #1
 8001562:	4770      	bx	lr

08001564 <_kill>:

int _kill(int pid, int sig)
{
 8001564:	b508      	push	{r3, lr}
	errno = EINVAL;
 8001566:	f002 fbb5 	bl	8003cd4 <__errno>
 800156a:	2316      	movs	r3, #22
 800156c:	6003      	str	r3, [r0, #0]
	return -1;
}
 800156e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001572:	bd08      	pop	{r3, pc}

08001574 <_exit>:

void _exit (int status)
{
 8001574:	b508      	push	{r3, lr}
	_kill(status, -1);
 8001576:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800157a:	f7ff fff3 	bl	8001564 <_kill>
	while (1) {}		/* Make sure we hang here */
 800157e:	e7fe      	b.n	800157e <_exit+0xa>

08001580 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001580:	b570      	push	{r4, r5, r6, lr}
 8001582:	460c      	mov	r4, r1
 8001584:	4616      	mov	r6, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001586:	2500      	movs	r5, #0
 8001588:	e006      	b.n	8001598 <_read+0x18>
	{
		*ptr++ = __io_getchar();
 800158a:	f3af 8000 	nop.w
 800158e:	4621      	mov	r1, r4
 8001590:	f801 0b01 	strb.w	r0, [r1], #1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001594:	3501      	adds	r5, #1
		*ptr++ = __io_getchar();
 8001596:	460c      	mov	r4, r1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001598:	42b5      	cmp	r5, r6
 800159a:	dbf6      	blt.n	800158a <_read+0xa>
	}

return len;
}
 800159c:	4630      	mov	r0, r6
 800159e:	bd70      	pop	{r4, r5, r6, pc}

080015a0 <_close>:
}

int _close(int file)
{
	return -1;
}
 80015a0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80015a4:	4770      	bx	lr

080015a6 <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 80015a6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80015aa:	604b      	str	r3, [r1, #4]
	return 0;
}
 80015ac:	2000      	movs	r0, #0
 80015ae:	4770      	bx	lr

080015b0 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 80015b0:	2001      	movs	r0, #1
 80015b2:	4770      	bx	lr

080015b4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 80015b4:	2000      	movs	r0, #0
 80015b6:	4770      	bx	lr

080015b8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80015b8:	b510      	push	{r4, lr}
 80015ba:	4603      	mov	r3, r0
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80015bc:	4a0c      	ldr	r2, [pc, #48]	@ (80015f0 <_sbrk+0x38>)
 80015be:	490d      	ldr	r1, [pc, #52]	@ (80015f4 <_sbrk+0x3c>)
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80015c0:	480d      	ldr	r0, [pc, #52]	@ (80015f8 <_sbrk+0x40>)
 80015c2:	6800      	ldr	r0, [r0, #0]
 80015c4:	b140      	cbz	r0, 80015d8 <_sbrk+0x20>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80015c6:	480c      	ldr	r0, [pc, #48]	@ (80015f8 <_sbrk+0x40>)
 80015c8:	6800      	ldr	r0, [r0, #0]
 80015ca:	4403      	add	r3, r0
 80015cc:	1a52      	subs	r2, r2, r1
 80015ce:	4293      	cmp	r3, r2
 80015d0:	d806      	bhi.n	80015e0 <_sbrk+0x28>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 80015d2:	4a09      	ldr	r2, [pc, #36]	@ (80015f8 <_sbrk+0x40>)
 80015d4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
}
 80015d6:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 80015d8:	4807      	ldr	r0, [pc, #28]	@ (80015f8 <_sbrk+0x40>)
 80015da:	4c08      	ldr	r4, [pc, #32]	@ (80015fc <_sbrk+0x44>)
 80015dc:	6004      	str	r4, [r0, #0]
 80015de:	e7f2      	b.n	80015c6 <_sbrk+0xe>
    errno = ENOMEM;
 80015e0:	f002 fb78 	bl	8003cd4 <__errno>
 80015e4:	230c      	movs	r3, #12
 80015e6:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 80015e8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80015ec:	e7f3      	b.n	80015d6 <_sbrk+0x1e>
 80015ee:	bf00      	nop
 80015f0:	20020000 	.word	0x20020000
 80015f4:	00000400 	.word	0x00000400
 80015f8:	200003c4 	.word	0x200003c4
 80015fc:	20000518 	.word	0x20000518

08001600 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001600:	4a03      	ldr	r2, [pc, #12]	@ (8001610 <SystemInit+0x10>)
 8001602:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 8001606:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800160a:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800160e:	4770      	bx	lr
 8001610:	e000ed00 	.word	0xe000ed00

08001614 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001614:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800164c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001618:	480d      	ldr	r0, [pc, #52]	@ (8001650 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800161a:	490e      	ldr	r1, [pc, #56]	@ (8001654 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800161c:	4a0e      	ldr	r2, [pc, #56]	@ (8001658 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800161e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001620:	e002      	b.n	8001628 <LoopCopyDataInit>

08001622 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001622:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001624:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001626:	3304      	adds	r3, #4

08001628 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001628:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800162a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800162c:	d3f9      	bcc.n	8001622 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800162e:	4a0b      	ldr	r2, [pc, #44]	@ (800165c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001630:	4c0b      	ldr	r4, [pc, #44]	@ (8001660 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001632:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001634:	e001      	b.n	800163a <LoopFillZerobss>

08001636 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001636:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001638:	3204      	adds	r2, #4

0800163a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800163a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800163c:	d3fb      	bcc.n	8001636 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800163e:	f7ff ffdf 	bl	8001600 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001642:	f002 fb4d 	bl	8003ce0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001646:	f7ff fdf3 	bl	8001230 <main>
  bx  lr    
 800164a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800164c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001650:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001654:	200002c4 	.word	0x200002c4
  ldr r2, =_sidata
 8001658:	08005f2c 	.word	0x08005f2c
  ldr r2, =_sbss
 800165c:	200002c4 	.word	0x200002c4
  ldr r4, =_ebss
 8001660:	20000518 	.word	0x20000518

08001664 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001664:	e7fe      	b.n	8001664 <ADC_IRQHandler>
	...

08001668 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001668:	b510      	push	{r4, lr}
 800166a:	4604      	mov	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800166c:	4b0e      	ldr	r3, [pc, #56]	@ (80016a8 <HAL_InitTick+0x40>)
 800166e:	781a      	ldrb	r2, [r3, #0]
 8001670:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001674:	fbb3 f3f2 	udiv	r3, r3, r2
 8001678:	4a0c      	ldr	r2, [pc, #48]	@ (80016ac <HAL_InitTick+0x44>)
 800167a:	6810      	ldr	r0, [r2, #0]
 800167c:	fbb0 f0f3 	udiv	r0, r0, r3
 8001680:	f000 f8ac 	bl	80017dc <HAL_SYSTICK_Config>
 8001684:	b968      	cbnz	r0, 80016a2 <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001686:	2c0f      	cmp	r4, #15
 8001688:	d901      	bls.n	800168e <HAL_InitTick+0x26>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 800168a:	2001      	movs	r0, #1
 800168c:	e00a      	b.n	80016a4 <HAL_InitTick+0x3c>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800168e:	2200      	movs	r2, #0
 8001690:	4621      	mov	r1, r4
 8001692:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001696:	f000 f88d 	bl	80017b4 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800169a:	4b05      	ldr	r3, [pc, #20]	@ (80016b0 <HAL_InitTick+0x48>)
 800169c:	601c      	str	r4, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800169e:	2000      	movs	r0, #0
 80016a0:	e000      	b.n	80016a4 <HAL_InitTick+0x3c>
    return HAL_ERROR;
 80016a2:	2001      	movs	r0, #1
}
 80016a4:	bd10      	pop	{r4, pc}
 80016a6:	bf00      	nop
 80016a8:	200000f4 	.word	0x200000f4
 80016ac:	200000f0 	.word	0x200000f0
 80016b0:	200000f8 	.word	0x200000f8

080016b4 <HAL_Init>:
{
 80016b4:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80016b6:	4b0b      	ldr	r3, [pc, #44]	@ (80016e4 <HAL_Init+0x30>)
 80016b8:	681a      	ldr	r2, [r3, #0]
 80016ba:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80016be:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80016c0:	681a      	ldr	r2, [r3, #0]
 80016c2:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80016c6:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80016c8:	681a      	ldr	r2, [r3, #0]
 80016ca:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80016ce:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80016d0:	2003      	movs	r0, #3
 80016d2:	f000 f85d 	bl	8001790 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80016d6:	200f      	movs	r0, #15
 80016d8:	f7ff ffc6 	bl	8001668 <HAL_InitTick>
  HAL_MspInit();
 80016dc:	f7ff fe5a 	bl	8001394 <HAL_MspInit>
}
 80016e0:	2000      	movs	r0, #0
 80016e2:	bd08      	pop	{r3, pc}
 80016e4:	40023c00 	.word	0x40023c00

080016e8 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80016e8:	4a03      	ldr	r2, [pc, #12]	@ (80016f8 <HAL_IncTick+0x10>)
 80016ea:	6811      	ldr	r1, [r2, #0]
 80016ec:	4b03      	ldr	r3, [pc, #12]	@ (80016fc <HAL_IncTick+0x14>)
 80016ee:	781b      	ldrb	r3, [r3, #0]
 80016f0:	440b      	add	r3, r1
 80016f2:	6013      	str	r3, [r2, #0]
}
 80016f4:	4770      	bx	lr
 80016f6:	bf00      	nop
 80016f8:	200003c8 	.word	0x200003c8
 80016fc:	200000f4 	.word	0x200000f4

08001700 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8001700:	4b01      	ldr	r3, [pc, #4]	@ (8001708 <HAL_GetTick+0x8>)
 8001702:	6818      	ldr	r0, [r3, #0]
}
 8001704:	4770      	bx	lr
 8001706:	bf00      	nop
 8001708:	200003c8 	.word	0x200003c8

0800170c <__NVIC_EnableIRQ>:
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
 800170c:	2800      	cmp	r0, #0
 800170e:	db07      	blt.n	8001720 <__NVIC_EnableIRQ+0x14>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001710:	f000 021f 	and.w	r2, r0, #31
 8001714:	0940      	lsrs	r0, r0, #5
 8001716:	2301      	movs	r3, #1
 8001718:	4093      	lsls	r3, r2
 800171a:	4a02      	ldr	r2, [pc, #8]	@ (8001724 <__NVIC_EnableIRQ+0x18>)
 800171c:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001720:	4770      	bx	lr
 8001722:	bf00      	nop
 8001724:	e000e100 	.word	0xe000e100

08001728 <__NVIC_SetPriority>:
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
 8001728:	2800      	cmp	r0, #0
 800172a:	db08      	blt.n	800173e <__NVIC_SetPriority+0x16>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800172c:	0109      	lsls	r1, r1, #4
 800172e:	b2c9      	uxtb	r1, r1
 8001730:	f100 4060 	add.w	r0, r0, #3758096384	@ 0xe0000000
 8001734:	f500 4061 	add.w	r0, r0, #57600	@ 0xe100
 8001738:	f880 1300 	strb.w	r1, [r0, #768]	@ 0x300
 800173c:	4770      	bx	lr
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800173e:	f000 000f 	and.w	r0, r0, #15
 8001742:	0109      	lsls	r1, r1, #4
 8001744:	b2c9      	uxtb	r1, r1
 8001746:	4b01      	ldr	r3, [pc, #4]	@ (800174c <__NVIC_SetPriority+0x24>)
 8001748:	5419      	strb	r1, [r3, r0]
  }
}
 800174a:	4770      	bx	lr
 800174c:	e000ed14 	.word	0xe000ed14

08001750 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001750:	b500      	push	{lr}
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001752:	f000 0007 	and.w	r0, r0, #7
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001756:	f1c0 0c07 	rsb	ip, r0, #7
 800175a:	f1bc 0f04 	cmp.w	ip, #4
 800175e:	bf28      	it	cs
 8001760:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001764:	1d03      	adds	r3, r0, #4
 8001766:	2b06      	cmp	r3, #6
 8001768:	d90f      	bls.n	800178a <NVIC_EncodePriority+0x3a>
 800176a:	1ec3      	subs	r3, r0, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800176c:	f04f 3eff 	mov.w	lr, #4294967295	@ 0xffffffff
 8001770:	fa0e f00c 	lsl.w	r0, lr, ip
 8001774:	ea21 0100 	bic.w	r1, r1, r0
 8001778:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800177a:	fa0e fe03 	lsl.w	lr, lr, r3
 800177e:	ea22 020e 	bic.w	r2, r2, lr
         );
}
 8001782:	ea41 0002 	orr.w	r0, r1, r2
 8001786:	f85d fb04 	ldr.w	pc, [sp], #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800178a:	2300      	movs	r3, #0
 800178c:	e7ee      	b.n	800176c <NVIC_EncodePriority+0x1c>
	...

08001790 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001790:	4a07      	ldr	r2, [pc, #28]	@ (80017b0 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8001792:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001794:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8001798:	041b      	lsls	r3, r3, #16
 800179a:	0c1b      	lsrs	r3, r3, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800179c:	0200      	lsls	r0, r0, #8
 800179e:	f400 60e0 	and.w	r0, r0, #1792	@ 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80017a2:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 80017a4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80017a8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 80017ac:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80017ae:	4770      	bx	lr
 80017b0:	e000ed00 	.word	0xe000ed00

080017b4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80017b4:	b510      	push	{r4, lr}
 80017b6:	4604      	mov	r4, r0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017b8:	4b05      	ldr	r3, [pc, #20]	@ (80017d0 <HAL_NVIC_SetPriority+0x1c>)
 80017ba:	68d8      	ldr	r0, [r3, #12]
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80017bc:	f3c0 2002 	ubfx	r0, r0, #8, #3
 80017c0:	f7ff ffc6 	bl	8001750 <NVIC_EncodePriority>
 80017c4:	4601      	mov	r1, r0
 80017c6:	4620      	mov	r0, r4
 80017c8:	f7ff ffae 	bl	8001728 <__NVIC_SetPriority>
}
 80017cc:	bd10      	pop	{r4, pc}
 80017ce:	bf00      	nop
 80017d0:	e000ed00 	.word	0xe000ed00

080017d4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017d4:	b508      	push	{r3, lr}
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80017d6:	f7ff ff99 	bl	800170c <__NVIC_EnableIRQ>
}
 80017da:	bd08      	pop	{r3, pc}

080017dc <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80017dc:	3801      	subs	r0, #1
 80017de:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 80017e2:	d20b      	bcs.n	80017fc <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80017e4:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80017e8:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017ea:	4a05      	ldr	r2, [pc, #20]	@ (8001800 <HAL_SYSTICK_Config+0x24>)
 80017ec:	21f0      	movs	r1, #240	@ 0xf0
 80017ee:	f882 1023 	strb.w	r1, [r2, #35]	@ 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80017f2:	2000      	movs	r0, #0
 80017f4:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80017f6:	2207      	movs	r2, #7
 80017f8:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80017fa:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80017fc:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80017fe:	4770      	bx	lr
 8001800:	e000ed00 	.word	0xe000ed00

08001804 <HAL_GPIO_Init>:
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001804:	2300      	movs	r3, #0
 8001806:	2b0f      	cmp	r3, #15
 8001808:	f200 80d7 	bhi.w	80019ba <HAL_GPIO_Init+0x1b6>
{
 800180c:	b570      	push	{r4, r5, r6, lr}
 800180e:	b082      	sub	sp, #8
 8001810:	e065      	b.n	80018de <HAL_GPIO_Init+0xda>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001812:	6885      	ldr	r5, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001814:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 8001818:	2403      	movs	r4, #3
 800181a:	fa04 f40e 	lsl.w	r4, r4, lr
 800181e:	ea25 0504 	bic.w	r5, r5, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001822:	68cc      	ldr	r4, [r1, #12]
 8001824:	fa04 f40e 	lsl.w	r4, r4, lr
 8001828:	432c      	orrs	r4, r5
        GPIOx->OSPEEDR = temp;
 800182a:	6084      	str	r4, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800182c:	6844      	ldr	r4, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800182e:	ea24 0402 	bic.w	r4, r4, r2
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001832:	684a      	ldr	r2, [r1, #4]
 8001834:	f3c2 1200 	ubfx	r2, r2, #4, #1
 8001838:	409a      	lsls	r2, r3
 800183a:	4322      	orrs	r2, r4
        GPIOx->OTYPER = temp;
 800183c:	6042      	str	r2, [r0, #4]
 800183e:	e05c      	b.n	80018fa <HAL_GPIO_Init+0xf6>
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001840:	08dc      	lsrs	r4, r3, #3
 8001842:	3408      	adds	r4, #8
 8001844:	f850 2024 	ldr.w	r2, [r0, r4, lsl #2]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001848:	f003 0507 	and.w	r5, r3, #7
 800184c:	00ad      	lsls	r5, r5, #2
 800184e:	f04f 0e0f 	mov.w	lr, #15
 8001852:	fa0e fe05 	lsl.w	lr, lr, r5
 8001856:	ea22 0e0e 	bic.w	lr, r2, lr
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800185a:	690a      	ldr	r2, [r1, #16]
 800185c:	40aa      	lsls	r2, r5
 800185e:	ea42 020e 	orr.w	r2, r2, lr
        GPIOx->AFR[position >> 3U] = temp;
 8001862:	f840 2024 	str.w	r2, [r0, r4, lsl #2]
 8001866:	e05c      	b.n	8001922 <HAL_GPIO_Init+0x11e>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001868:	2204      	movs	r2, #4
 800186a:	e000      	b.n	800186e <HAL_GPIO_Init+0x6a>
 800186c:	2200      	movs	r2, #0
 800186e:	fa02 f20e 	lsl.w	r2, r2, lr
 8001872:	432a      	orrs	r2, r5
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001874:	3402      	adds	r4, #2
 8001876:	4d51      	ldr	r5, [pc, #324]	@ (80019bc <HAL_GPIO_Init+0x1b8>)
 8001878:	f845 2024 	str.w	r2, [r5, r4, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800187c:	4a50      	ldr	r2, [pc, #320]	@ (80019c0 <HAL_GPIO_Init+0x1bc>)
 800187e:	6894      	ldr	r4, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
 8001880:	ea6f 020c 	mvn.w	r2, ip
 8001884:	ea24 050c 	bic.w	r5, r4, ip
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001888:	684e      	ldr	r6, [r1, #4]
 800188a:	f416 1f80 	tst.w	r6, #1048576	@ 0x100000
 800188e:	d001      	beq.n	8001894 <HAL_GPIO_Init+0x90>
        {
          temp |= iocurrent;
 8001890:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->RTSR = temp;
 8001894:	4c4a      	ldr	r4, [pc, #296]	@ (80019c0 <HAL_GPIO_Init+0x1bc>)
 8001896:	60a5      	str	r5, [r4, #8]

        temp = EXTI->FTSR;
 8001898:	68e4      	ldr	r4, [r4, #12]
        temp &= ~((uint32_t)iocurrent);
 800189a:	ea02 0504 	and.w	r5, r2, r4
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800189e:	684e      	ldr	r6, [r1, #4]
 80018a0:	f416 1f00 	tst.w	r6, #2097152	@ 0x200000
 80018a4:	d001      	beq.n	80018aa <HAL_GPIO_Init+0xa6>
        {
          temp |= iocurrent;
 80018a6:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->FTSR = temp;
 80018aa:	4c45      	ldr	r4, [pc, #276]	@ (80019c0 <HAL_GPIO_Init+0x1bc>)
 80018ac:	60e5      	str	r5, [r4, #12]

        temp = EXTI->EMR;
 80018ae:	6864      	ldr	r4, [r4, #4]
        temp &= ~((uint32_t)iocurrent);
 80018b0:	ea02 0504 	and.w	r5, r2, r4
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80018b4:	684e      	ldr	r6, [r1, #4]
 80018b6:	f416 3f00 	tst.w	r6, #131072	@ 0x20000
 80018ba:	d001      	beq.n	80018c0 <HAL_GPIO_Init+0xbc>
        {
          temp |= iocurrent;
 80018bc:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->EMR = temp;
 80018c0:	4c3f      	ldr	r4, [pc, #252]	@ (80019c0 <HAL_GPIO_Init+0x1bc>)
 80018c2:	6065      	str	r5, [r4, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80018c4:	6824      	ldr	r4, [r4, #0]
        temp &= ~((uint32_t)iocurrent);
 80018c6:	4022      	ands	r2, r4
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80018c8:	684d      	ldr	r5, [r1, #4]
 80018ca:	f415 3f80 	tst.w	r5, #65536	@ 0x10000
 80018ce:	d001      	beq.n	80018d4 <HAL_GPIO_Init+0xd0>
        {
          temp |= iocurrent;
 80018d0:	ea4c 0204 	orr.w	r2, ip, r4
        }
        EXTI->IMR = temp;
 80018d4:	4c3a      	ldr	r4, [pc, #232]	@ (80019c0 <HAL_GPIO_Init+0x1bc>)
 80018d6:	6022      	str	r2, [r4, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80018d8:	3301      	adds	r3, #1
 80018da:	2b0f      	cmp	r3, #15
 80018dc:	d86b      	bhi.n	80019b6 <HAL_GPIO_Init+0x1b2>
    ioposition = 0x01U << position;
 80018de:	2201      	movs	r2, #1
 80018e0:	409a      	lsls	r2, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80018e2:	680c      	ldr	r4, [r1, #0]
 80018e4:	ea04 0c02 	and.w	ip, r4, r2
    if(iocurrent == ioposition)
 80018e8:	ea32 0404 	bics.w	r4, r2, r4
 80018ec:	d1f4      	bne.n	80018d8 <HAL_GPIO_Init+0xd4>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80018ee:	684c      	ldr	r4, [r1, #4]
 80018f0:	f004 0403 	and.w	r4, r4, #3
 80018f4:	3c01      	subs	r4, #1
 80018f6:	2c01      	cmp	r4, #1
 80018f8:	d98b      	bls.n	8001812 <HAL_GPIO_Init+0xe>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80018fa:	684a      	ldr	r2, [r1, #4]
 80018fc:	f002 0203 	and.w	r2, r2, #3
 8001900:	2a03      	cmp	r2, #3
 8001902:	d009      	beq.n	8001918 <HAL_GPIO_Init+0x114>
        temp = GPIOx->PUPDR;
 8001904:	68c4      	ldr	r4, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001906:	005d      	lsls	r5, r3, #1
 8001908:	2203      	movs	r2, #3
 800190a:	40aa      	lsls	r2, r5
 800190c:	ea24 0402 	bic.w	r4, r4, r2
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001910:	688a      	ldr	r2, [r1, #8]
 8001912:	40aa      	lsls	r2, r5
 8001914:	4322      	orrs	r2, r4
        GPIOx->PUPDR = temp;
 8001916:	60c2      	str	r2, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001918:	684a      	ldr	r2, [r1, #4]
 800191a:	f002 0203 	and.w	r2, r2, #3
 800191e:	2a02      	cmp	r2, #2
 8001920:	d08e      	beq.n	8001840 <HAL_GPIO_Init+0x3c>
      temp = GPIOx->MODER;
 8001922:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001924:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 8001928:	2203      	movs	r2, #3
 800192a:	fa02 f20e 	lsl.w	r2, r2, lr
 800192e:	ea24 0402 	bic.w	r4, r4, r2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001932:	684a      	ldr	r2, [r1, #4]
 8001934:	f002 0203 	and.w	r2, r2, #3
 8001938:	fa02 f20e 	lsl.w	r2, r2, lr
 800193c:	4322      	orrs	r2, r4
      GPIOx->MODER = temp;
 800193e:	6002      	str	r2, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001940:	684a      	ldr	r2, [r1, #4]
 8001942:	f412 3f40 	tst.w	r2, #196608	@ 0x30000
 8001946:	d0c7      	beq.n	80018d8 <HAL_GPIO_Init+0xd4>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001948:	2200      	movs	r2, #0
 800194a:	9201      	str	r2, [sp, #4]
 800194c:	4a1d      	ldr	r2, [pc, #116]	@ (80019c4 <HAL_GPIO_Init+0x1c0>)
 800194e:	6c54      	ldr	r4, [r2, #68]	@ 0x44
 8001950:	f444 4480 	orr.w	r4, r4, #16384	@ 0x4000
 8001954:	6454      	str	r4, [r2, #68]	@ 0x44
 8001956:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8001958:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 800195c:	9201      	str	r2, [sp, #4]
 800195e:	9a01      	ldr	r2, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 8001960:	089c      	lsrs	r4, r3, #2
 8001962:	1ca5      	adds	r5, r4, #2
 8001964:	4a15      	ldr	r2, [pc, #84]	@ (80019bc <HAL_GPIO_Init+0x1b8>)
 8001966:	f852 5025 	ldr.w	r5, [r2, r5, lsl #2]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800196a:	f003 0e03 	and.w	lr, r3, #3
 800196e:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8001972:	220f      	movs	r2, #15
 8001974:	fa02 f20e 	lsl.w	r2, r2, lr
 8001978:	ea25 0502 	bic.w	r5, r5, r2
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800197c:	4a12      	ldr	r2, [pc, #72]	@ (80019c8 <HAL_GPIO_Init+0x1c4>)
 800197e:	4290      	cmp	r0, r2
 8001980:	f43f af74 	beq.w	800186c <HAL_GPIO_Init+0x68>
 8001984:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8001988:	4290      	cmp	r0, r2
 800198a:	d00e      	beq.n	80019aa <HAL_GPIO_Init+0x1a6>
 800198c:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8001990:	4290      	cmp	r0, r2
 8001992:	d00c      	beq.n	80019ae <HAL_GPIO_Init+0x1aa>
 8001994:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8001998:	4290      	cmp	r0, r2
 800199a:	d00a      	beq.n	80019b2 <HAL_GPIO_Init+0x1ae>
 800199c:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80019a0:	4290      	cmp	r0, r2
 80019a2:	f43f af61 	beq.w	8001868 <HAL_GPIO_Init+0x64>
 80019a6:	2207      	movs	r2, #7
 80019a8:	e761      	b.n	800186e <HAL_GPIO_Init+0x6a>
 80019aa:	2201      	movs	r2, #1
 80019ac:	e75f      	b.n	800186e <HAL_GPIO_Init+0x6a>
 80019ae:	2202      	movs	r2, #2
 80019b0:	e75d      	b.n	800186e <HAL_GPIO_Init+0x6a>
 80019b2:	2203      	movs	r2, #3
 80019b4:	e75b      	b.n	800186e <HAL_GPIO_Init+0x6a>
      }
    }
  }
}
 80019b6:	b002      	add	sp, #8
 80019b8:	bd70      	pop	{r4, r5, r6, pc}
 80019ba:	4770      	bx	lr
 80019bc:	40013800 	.word	0x40013800
 80019c0:	40013c00 	.word	0x40013c00
 80019c4:	40023800 	.word	0x40023800
 80019c8:	40020000 	.word	0x40020000

080019cc <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80019cc:	b10a      	cbz	r2, 80019d2 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
 80019ce:	6181      	str	r1, [r0, #24]
 80019d0:	4770      	bx	lr
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80019d2:	0409      	lsls	r1, r1, #16
 80019d4:	6181      	str	r1, [r0, #24]
  }
}
 80019d6:	4770      	bx	lr

080019d8 <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80019d8:	6943      	ldr	r3, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80019da:	ea01 0203 	and.w	r2, r1, r3
 80019de:	ea21 0103 	bic.w	r1, r1, r3
 80019e2:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80019e6:	6181      	str	r1, [r0, #24]
}
 80019e8:	4770      	bx	lr
	...

080019ec <HAL_RCC_OscConfig>:
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80019ec:	2800      	cmp	r0, #0
 80019ee:	f000 81e0 	beq.w	8001db2 <HAL_RCC_OscConfig+0x3c6>
{
 80019f2:	b570      	push	{r4, r5, r6, lr}
 80019f4:	b082      	sub	sp, #8
 80019f6:	4604      	mov	r4, r0
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80019f8:	6803      	ldr	r3, [r0, #0]
 80019fa:	f013 0f01 	tst.w	r3, #1
 80019fe:	d03b      	beq.n	8001a78 <HAL_RCC_OscConfig+0x8c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001a00:	4b9f      	ldr	r3, [pc, #636]	@ (8001c80 <HAL_RCC_OscConfig+0x294>)
 8001a02:	689b      	ldr	r3, [r3, #8]
 8001a04:	f003 030c 	and.w	r3, r3, #12
 8001a08:	2b04      	cmp	r3, #4
 8001a0a:	d02c      	beq.n	8001a66 <HAL_RCC_OscConfig+0x7a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001a0c:	4b9c      	ldr	r3, [pc, #624]	@ (8001c80 <HAL_RCC_OscConfig+0x294>)
 8001a0e:	689b      	ldr	r3, [r3, #8]
 8001a10:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001a14:	2b08      	cmp	r3, #8
 8001a16:	d021      	beq.n	8001a5c <HAL_RCC_OscConfig+0x70>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a18:	6863      	ldr	r3, [r4, #4]
 8001a1a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001a1e:	d04f      	beq.n	8001ac0 <HAL_RCC_OscConfig+0xd4>
 8001a20:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001a24:	d052      	beq.n	8001acc <HAL_RCC_OscConfig+0xe0>
 8001a26:	4b96      	ldr	r3, [pc, #600]	@ (8001c80 <HAL_RCC_OscConfig+0x294>)
 8001a28:	681a      	ldr	r2, [r3, #0]
 8001a2a:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8001a2e:	601a      	str	r2, [r3, #0]
 8001a30:	681a      	ldr	r2, [r3, #0]
 8001a32:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8001a36:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001a38:	6863      	ldr	r3, [r4, #4]
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d050      	beq.n	8001ae0 <HAL_RCC_OscConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a3e:	f7ff fe5f 	bl	8001700 <HAL_GetTick>
 8001a42:	4605      	mov	r5, r0

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a44:	4b8e      	ldr	r3, [pc, #568]	@ (8001c80 <HAL_RCC_OscConfig+0x294>)
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8001a4c:	d114      	bne.n	8001a78 <HAL_RCC_OscConfig+0x8c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a4e:	f7ff fe57 	bl	8001700 <HAL_GetTick>
 8001a52:	1b40      	subs	r0, r0, r5
 8001a54:	2864      	cmp	r0, #100	@ 0x64
 8001a56:	d9f5      	bls.n	8001a44 <HAL_RCC_OscConfig+0x58>
          {
            return HAL_TIMEOUT;
 8001a58:	2003      	movs	r0, #3
 8001a5a:	e1b1      	b.n	8001dc0 <HAL_RCC_OscConfig+0x3d4>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001a5c:	4b88      	ldr	r3, [pc, #544]	@ (8001c80 <HAL_RCC_OscConfig+0x294>)
 8001a5e:	685b      	ldr	r3, [r3, #4]
 8001a60:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 8001a64:	d0d8      	beq.n	8001a18 <HAL_RCC_OscConfig+0x2c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a66:	4b86      	ldr	r3, [pc, #536]	@ (8001c80 <HAL_RCC_OscConfig+0x294>)
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8001a6e:	d003      	beq.n	8001a78 <HAL_RCC_OscConfig+0x8c>
 8001a70:	6863      	ldr	r3, [r4, #4]
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	f000 819f 	beq.w	8001db6 <HAL_RCC_OscConfig+0x3ca>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a78:	6823      	ldr	r3, [r4, #0]
 8001a7a:	f013 0f02 	tst.w	r3, #2
 8001a7e:	d054      	beq.n	8001b2a <HAL_RCC_OscConfig+0x13e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001a80:	4b7f      	ldr	r3, [pc, #508]	@ (8001c80 <HAL_RCC_OscConfig+0x294>)
 8001a82:	689b      	ldr	r3, [r3, #8]
 8001a84:	f013 0f0c 	tst.w	r3, #12
 8001a88:	d03e      	beq.n	8001b08 <HAL_RCC_OscConfig+0x11c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001a8a:	4b7d      	ldr	r3, [pc, #500]	@ (8001c80 <HAL_RCC_OscConfig+0x294>)
 8001a8c:	689b      	ldr	r3, [r3, #8]
 8001a8e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001a92:	2b08      	cmp	r3, #8
 8001a94:	d033      	beq.n	8001afe <HAL_RCC_OscConfig+0x112>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001a96:	68e3      	ldr	r3, [r4, #12]
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d068      	beq.n	8001b6e <HAL_RCC_OscConfig+0x182>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001a9c:	4b79      	ldr	r3, [pc, #484]	@ (8001c84 <HAL_RCC_OscConfig+0x298>)
 8001a9e:	2201      	movs	r2, #1
 8001aa0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001aa2:	f7ff fe2d 	bl	8001700 <HAL_GetTick>
 8001aa6:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001aa8:	4b75      	ldr	r3, [pc, #468]	@ (8001c80 <HAL_RCC_OscConfig+0x294>)
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	f013 0f02 	tst.w	r3, #2
 8001ab0:	d154      	bne.n	8001b5c <HAL_RCC_OscConfig+0x170>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ab2:	f7ff fe25 	bl	8001700 <HAL_GetTick>
 8001ab6:	1b40      	subs	r0, r0, r5
 8001ab8:	2802      	cmp	r0, #2
 8001aba:	d9f5      	bls.n	8001aa8 <HAL_RCC_OscConfig+0xbc>
          {
            return HAL_TIMEOUT;
 8001abc:	2003      	movs	r0, #3
 8001abe:	e17f      	b.n	8001dc0 <HAL_RCC_OscConfig+0x3d4>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ac0:	4a6f      	ldr	r2, [pc, #444]	@ (8001c80 <HAL_RCC_OscConfig+0x294>)
 8001ac2:	6813      	ldr	r3, [r2, #0]
 8001ac4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001ac8:	6013      	str	r3, [r2, #0]
 8001aca:	e7b5      	b.n	8001a38 <HAL_RCC_OscConfig+0x4c>
 8001acc:	4b6c      	ldr	r3, [pc, #432]	@ (8001c80 <HAL_RCC_OscConfig+0x294>)
 8001ace:	681a      	ldr	r2, [r3, #0]
 8001ad0:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8001ad4:	601a      	str	r2, [r3, #0]
 8001ad6:	681a      	ldr	r2, [r3, #0]
 8001ad8:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8001adc:	601a      	str	r2, [r3, #0]
 8001ade:	e7ab      	b.n	8001a38 <HAL_RCC_OscConfig+0x4c>
        tickstart = HAL_GetTick();
 8001ae0:	f7ff fe0e 	bl	8001700 <HAL_GetTick>
 8001ae4:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ae6:	4b66      	ldr	r3, [pc, #408]	@ (8001c80 <HAL_RCC_OscConfig+0x294>)
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8001aee:	d0c3      	beq.n	8001a78 <HAL_RCC_OscConfig+0x8c>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001af0:	f7ff fe06 	bl	8001700 <HAL_GetTick>
 8001af4:	1b40      	subs	r0, r0, r5
 8001af6:	2864      	cmp	r0, #100	@ 0x64
 8001af8:	d9f5      	bls.n	8001ae6 <HAL_RCC_OscConfig+0xfa>
            return HAL_TIMEOUT;
 8001afa:	2003      	movs	r0, #3
 8001afc:	e160      	b.n	8001dc0 <HAL_RCC_OscConfig+0x3d4>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001afe:	4b60      	ldr	r3, [pc, #384]	@ (8001c80 <HAL_RCC_OscConfig+0x294>)
 8001b00:	685b      	ldr	r3, [r3, #4]
 8001b02:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 8001b06:	d1c6      	bne.n	8001a96 <HAL_RCC_OscConfig+0xaa>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b08:	4b5d      	ldr	r3, [pc, #372]	@ (8001c80 <HAL_RCC_OscConfig+0x294>)
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	f013 0f02 	tst.w	r3, #2
 8001b10:	d003      	beq.n	8001b1a <HAL_RCC_OscConfig+0x12e>
 8001b12:	68e3      	ldr	r3, [r4, #12]
 8001b14:	2b01      	cmp	r3, #1
 8001b16:	f040 8150 	bne.w	8001dba <HAL_RCC_OscConfig+0x3ce>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b1a:	4a59      	ldr	r2, [pc, #356]	@ (8001c80 <HAL_RCC_OscConfig+0x294>)
 8001b1c:	6813      	ldr	r3, [r2, #0]
 8001b1e:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8001b22:	6921      	ldr	r1, [r4, #16]
 8001b24:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001b28:	6013      	str	r3, [r2, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b2a:	6823      	ldr	r3, [r4, #0]
 8001b2c:	f013 0f08 	tst.w	r3, #8
 8001b30:	d042      	beq.n	8001bb8 <HAL_RCC_OscConfig+0x1cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001b32:	6963      	ldr	r3, [r4, #20]
 8001b34:	b36b      	cbz	r3, 8001b92 <HAL_RCC_OscConfig+0x1a6>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b36:	4b53      	ldr	r3, [pc, #332]	@ (8001c84 <HAL_RCC_OscConfig+0x298>)
 8001b38:	2201      	movs	r2, #1
 8001b3a:	f8c3 2e80 	str.w	r2, [r3, #3712]	@ 0xe80

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b3e:	f7ff fddf 	bl	8001700 <HAL_GetTick>
 8001b42:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b44:	4b4e      	ldr	r3, [pc, #312]	@ (8001c80 <HAL_RCC_OscConfig+0x294>)
 8001b46:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001b48:	f013 0f02 	tst.w	r3, #2
 8001b4c:	d134      	bne.n	8001bb8 <HAL_RCC_OscConfig+0x1cc>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b4e:	f7ff fdd7 	bl	8001700 <HAL_GetTick>
 8001b52:	1b40      	subs	r0, r0, r5
 8001b54:	2802      	cmp	r0, #2
 8001b56:	d9f5      	bls.n	8001b44 <HAL_RCC_OscConfig+0x158>
        {
          return HAL_TIMEOUT;
 8001b58:	2003      	movs	r0, #3
 8001b5a:	e131      	b.n	8001dc0 <HAL_RCC_OscConfig+0x3d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b5c:	4a48      	ldr	r2, [pc, #288]	@ (8001c80 <HAL_RCC_OscConfig+0x294>)
 8001b5e:	6813      	ldr	r3, [r2, #0]
 8001b60:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8001b64:	6921      	ldr	r1, [r4, #16]
 8001b66:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001b6a:	6013      	str	r3, [r2, #0]
 8001b6c:	e7dd      	b.n	8001b2a <HAL_RCC_OscConfig+0x13e>
        __HAL_RCC_HSI_DISABLE();
 8001b6e:	4b45      	ldr	r3, [pc, #276]	@ (8001c84 <HAL_RCC_OscConfig+0x298>)
 8001b70:	2200      	movs	r2, #0
 8001b72:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001b74:	f7ff fdc4 	bl	8001700 <HAL_GetTick>
 8001b78:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b7a:	4b41      	ldr	r3, [pc, #260]	@ (8001c80 <HAL_RCC_OscConfig+0x294>)
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	f013 0f02 	tst.w	r3, #2
 8001b82:	d0d2      	beq.n	8001b2a <HAL_RCC_OscConfig+0x13e>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b84:	f7ff fdbc 	bl	8001700 <HAL_GetTick>
 8001b88:	1b40      	subs	r0, r0, r5
 8001b8a:	2802      	cmp	r0, #2
 8001b8c:	d9f5      	bls.n	8001b7a <HAL_RCC_OscConfig+0x18e>
            return HAL_TIMEOUT;
 8001b8e:	2003      	movs	r0, #3
 8001b90:	e116      	b.n	8001dc0 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001b92:	4b3c      	ldr	r3, [pc, #240]	@ (8001c84 <HAL_RCC_OscConfig+0x298>)
 8001b94:	2200      	movs	r2, #0
 8001b96:	f8c3 2e80 	str.w	r2, [r3, #3712]	@ 0xe80

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b9a:	f7ff fdb1 	bl	8001700 <HAL_GetTick>
 8001b9e:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ba0:	4b37      	ldr	r3, [pc, #220]	@ (8001c80 <HAL_RCC_OscConfig+0x294>)
 8001ba2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001ba4:	f013 0f02 	tst.w	r3, #2
 8001ba8:	d006      	beq.n	8001bb8 <HAL_RCC_OscConfig+0x1cc>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001baa:	f7ff fda9 	bl	8001700 <HAL_GetTick>
 8001bae:	1b40      	subs	r0, r0, r5
 8001bb0:	2802      	cmp	r0, #2
 8001bb2:	d9f5      	bls.n	8001ba0 <HAL_RCC_OscConfig+0x1b4>
        {
          return HAL_TIMEOUT;
 8001bb4:	2003      	movs	r0, #3
 8001bb6:	e103      	b.n	8001dc0 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001bb8:	6823      	ldr	r3, [r4, #0]
 8001bba:	f013 0f04 	tst.w	r3, #4
 8001bbe:	d077      	beq.n	8001cb0 <HAL_RCC_OscConfig+0x2c4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001bc0:	4b2f      	ldr	r3, [pc, #188]	@ (8001c80 <HAL_RCC_OscConfig+0x294>)
 8001bc2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bc4:	f013 5f80 	tst.w	r3, #268435456	@ 0x10000000
 8001bc8:	d133      	bne.n	8001c32 <HAL_RCC_OscConfig+0x246>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001bca:	2300      	movs	r3, #0
 8001bcc:	9301      	str	r3, [sp, #4]
 8001bce:	4b2c      	ldr	r3, [pc, #176]	@ (8001c80 <HAL_RCC_OscConfig+0x294>)
 8001bd0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001bd2:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8001bd6:	641a      	str	r2, [r3, #64]	@ 0x40
 8001bd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bda:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001bde:	9301      	str	r3, [sp, #4]
 8001be0:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8001be2:	2501      	movs	r5, #1
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001be4:	4b28      	ldr	r3, [pc, #160]	@ (8001c88 <HAL_RCC_OscConfig+0x29c>)
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8001bec:	d023      	beq.n	8001c36 <HAL_RCC_OscConfig+0x24a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001bee:	68a3      	ldr	r3, [r4, #8]
 8001bf0:	2b01      	cmp	r3, #1
 8001bf2:	d034      	beq.n	8001c5e <HAL_RCC_OscConfig+0x272>
 8001bf4:	2b05      	cmp	r3, #5
 8001bf6:	d038      	beq.n	8001c6a <HAL_RCC_OscConfig+0x27e>
 8001bf8:	4b21      	ldr	r3, [pc, #132]	@ (8001c80 <HAL_RCC_OscConfig+0x294>)
 8001bfa:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8001bfc:	f022 0201 	bic.w	r2, r2, #1
 8001c00:	671a      	str	r2, [r3, #112]	@ 0x70
 8001c02:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8001c04:	f022 0204 	bic.w	r2, r2, #4
 8001c08:	671a      	str	r2, [r3, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001c0a:	68a3      	ldr	r3, [r4, #8]
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d03d      	beq.n	8001c8c <HAL_RCC_OscConfig+0x2a0>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c10:	f7ff fd76 	bl	8001700 <HAL_GetTick>
 8001c14:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c16:	4b1a      	ldr	r3, [pc, #104]	@ (8001c80 <HAL_RCC_OscConfig+0x294>)
 8001c18:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001c1a:	f013 0f02 	tst.w	r3, #2
 8001c1e:	d146      	bne.n	8001cae <HAL_RCC_OscConfig+0x2c2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c20:	f7ff fd6e 	bl	8001700 <HAL_GetTick>
 8001c24:	1b80      	subs	r0, r0, r6
 8001c26:	f241 3388 	movw	r3, #5000	@ 0x1388
 8001c2a:	4298      	cmp	r0, r3
 8001c2c:	d9f3      	bls.n	8001c16 <HAL_RCC_OscConfig+0x22a>
        {
          return HAL_TIMEOUT;
 8001c2e:	2003      	movs	r0, #3
 8001c30:	e0c6      	b.n	8001dc0 <HAL_RCC_OscConfig+0x3d4>
    FlagStatus       pwrclkchanged = RESET;
 8001c32:	2500      	movs	r5, #0
 8001c34:	e7d6      	b.n	8001be4 <HAL_RCC_OscConfig+0x1f8>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001c36:	4a14      	ldr	r2, [pc, #80]	@ (8001c88 <HAL_RCC_OscConfig+0x29c>)
 8001c38:	6813      	ldr	r3, [r2, #0]
 8001c3a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001c3e:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8001c40:	f7ff fd5e 	bl	8001700 <HAL_GetTick>
 8001c44:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c46:	4b10      	ldr	r3, [pc, #64]	@ (8001c88 <HAL_RCC_OscConfig+0x29c>)
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8001c4e:	d1ce      	bne.n	8001bee <HAL_RCC_OscConfig+0x202>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c50:	f7ff fd56 	bl	8001700 <HAL_GetTick>
 8001c54:	1b80      	subs	r0, r0, r6
 8001c56:	2802      	cmp	r0, #2
 8001c58:	d9f5      	bls.n	8001c46 <HAL_RCC_OscConfig+0x25a>
          return HAL_TIMEOUT;
 8001c5a:	2003      	movs	r0, #3
 8001c5c:	e0b0      	b.n	8001dc0 <HAL_RCC_OscConfig+0x3d4>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c5e:	4a08      	ldr	r2, [pc, #32]	@ (8001c80 <HAL_RCC_OscConfig+0x294>)
 8001c60:	6f13      	ldr	r3, [r2, #112]	@ 0x70
 8001c62:	f043 0301 	orr.w	r3, r3, #1
 8001c66:	6713      	str	r3, [r2, #112]	@ 0x70
 8001c68:	e7cf      	b.n	8001c0a <HAL_RCC_OscConfig+0x21e>
 8001c6a:	4b05      	ldr	r3, [pc, #20]	@ (8001c80 <HAL_RCC_OscConfig+0x294>)
 8001c6c:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8001c6e:	f042 0204 	orr.w	r2, r2, #4
 8001c72:	671a      	str	r2, [r3, #112]	@ 0x70
 8001c74:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8001c76:	f042 0201 	orr.w	r2, r2, #1
 8001c7a:	671a      	str	r2, [r3, #112]	@ 0x70
 8001c7c:	e7c5      	b.n	8001c0a <HAL_RCC_OscConfig+0x21e>
 8001c7e:	bf00      	nop
 8001c80:	40023800 	.word	0x40023800
 8001c84:	42470000 	.word	0x42470000
 8001c88:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c8c:	f7ff fd38 	bl	8001700 <HAL_GetTick>
 8001c90:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c92:	4b52      	ldr	r3, [pc, #328]	@ (8001ddc <HAL_RCC_OscConfig+0x3f0>)
 8001c94:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001c96:	f013 0f02 	tst.w	r3, #2
 8001c9a:	d008      	beq.n	8001cae <HAL_RCC_OscConfig+0x2c2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c9c:	f7ff fd30 	bl	8001700 <HAL_GetTick>
 8001ca0:	1b80      	subs	r0, r0, r6
 8001ca2:	f241 3388 	movw	r3, #5000	@ 0x1388
 8001ca6:	4298      	cmp	r0, r3
 8001ca8:	d9f3      	bls.n	8001c92 <HAL_RCC_OscConfig+0x2a6>
        {
          return HAL_TIMEOUT;
 8001caa:	2003      	movs	r0, #3
 8001cac:	e088      	b.n	8001dc0 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001cae:	b9ed      	cbnz	r5, 8001cec <HAL_RCC_OscConfig+0x300>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001cb0:	69a3      	ldr	r3, [r4, #24]
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	f000 8083 	beq.w	8001dbe <HAL_RCC_OscConfig+0x3d2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001cb8:	4a48      	ldr	r2, [pc, #288]	@ (8001ddc <HAL_RCC_OscConfig+0x3f0>)
 8001cba:	6892      	ldr	r2, [r2, #8]
 8001cbc:	f002 020c 	and.w	r2, r2, #12
 8001cc0:	2a08      	cmp	r2, #8
 8001cc2:	d051      	beq.n	8001d68 <HAL_RCC_OscConfig+0x37c>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001cc4:	2b02      	cmp	r3, #2
 8001cc6:	d017      	beq.n	8001cf8 <HAL_RCC_OscConfig+0x30c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001cc8:	4b45      	ldr	r3, [pc, #276]	@ (8001de0 <HAL_RCC_OscConfig+0x3f4>)
 8001cca:	2200      	movs	r2, #0
 8001ccc:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cce:	f7ff fd17 	bl	8001700 <HAL_GetTick>
 8001cd2:	4604      	mov	r4, r0

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001cd4:	4b41      	ldr	r3, [pc, #260]	@ (8001ddc <HAL_RCC_OscConfig+0x3f0>)
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8001cdc:	d042      	beq.n	8001d64 <HAL_RCC_OscConfig+0x378>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001cde:	f7ff fd0f 	bl	8001700 <HAL_GetTick>
 8001ce2:	1b00      	subs	r0, r0, r4
 8001ce4:	2802      	cmp	r0, #2
 8001ce6:	d9f5      	bls.n	8001cd4 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8001ce8:	2003      	movs	r0, #3
 8001cea:	e069      	b.n	8001dc0 <HAL_RCC_OscConfig+0x3d4>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001cec:	4a3b      	ldr	r2, [pc, #236]	@ (8001ddc <HAL_RCC_OscConfig+0x3f0>)
 8001cee:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8001cf0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001cf4:	6413      	str	r3, [r2, #64]	@ 0x40
 8001cf6:	e7db      	b.n	8001cb0 <HAL_RCC_OscConfig+0x2c4>
        __HAL_RCC_PLL_DISABLE();
 8001cf8:	4b39      	ldr	r3, [pc, #228]	@ (8001de0 <HAL_RCC_OscConfig+0x3f4>)
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	661a      	str	r2, [r3, #96]	@ 0x60
        tickstart = HAL_GetTick();
 8001cfe:	f7ff fcff 	bl	8001700 <HAL_GetTick>
 8001d02:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d04:	4b35      	ldr	r3, [pc, #212]	@ (8001ddc <HAL_RCC_OscConfig+0x3f0>)
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8001d0c:	d006      	beq.n	8001d1c <HAL_RCC_OscConfig+0x330>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d0e:	f7ff fcf7 	bl	8001700 <HAL_GetTick>
 8001d12:	1b40      	subs	r0, r0, r5
 8001d14:	2802      	cmp	r0, #2
 8001d16:	d9f5      	bls.n	8001d04 <HAL_RCC_OscConfig+0x318>
            return HAL_TIMEOUT;
 8001d18:	2003      	movs	r0, #3
 8001d1a:	e051      	b.n	8001dc0 <HAL_RCC_OscConfig+0x3d4>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001d1c:	69e3      	ldr	r3, [r4, #28]
 8001d1e:	6a22      	ldr	r2, [r4, #32]
 8001d20:	4313      	orrs	r3, r2
 8001d22:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8001d24:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8001d28:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8001d2a:	0852      	lsrs	r2, r2, #1
 8001d2c:	3a01      	subs	r2, #1
 8001d2e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8001d32:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8001d34:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8001d38:	4a28      	ldr	r2, [pc, #160]	@ (8001ddc <HAL_RCC_OscConfig+0x3f0>)
 8001d3a:	6053      	str	r3, [r2, #4]
        __HAL_RCC_PLL_ENABLE();
 8001d3c:	4b28      	ldr	r3, [pc, #160]	@ (8001de0 <HAL_RCC_OscConfig+0x3f4>)
 8001d3e:	2201      	movs	r2, #1
 8001d40:	661a      	str	r2, [r3, #96]	@ 0x60
        tickstart = HAL_GetTick();
 8001d42:	f7ff fcdd 	bl	8001700 <HAL_GetTick>
 8001d46:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d48:	4b24      	ldr	r3, [pc, #144]	@ (8001ddc <HAL_RCC_OscConfig+0x3f0>)
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8001d50:	d106      	bne.n	8001d60 <HAL_RCC_OscConfig+0x374>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d52:	f7ff fcd5 	bl	8001700 <HAL_GetTick>
 8001d56:	1b00      	subs	r0, r0, r4
 8001d58:	2802      	cmp	r0, #2
 8001d5a:	d9f5      	bls.n	8001d48 <HAL_RCC_OscConfig+0x35c>
            return HAL_TIMEOUT;
 8001d5c:	2003      	movs	r0, #3
 8001d5e:	e02f      	b.n	8001dc0 <HAL_RCC_OscConfig+0x3d4>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 8001d60:	2000      	movs	r0, #0
 8001d62:	e02d      	b.n	8001dc0 <HAL_RCC_OscConfig+0x3d4>
 8001d64:	2000      	movs	r0, #0
 8001d66:	e02b      	b.n	8001dc0 <HAL_RCC_OscConfig+0x3d4>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001d68:	2b01      	cmp	r3, #1
 8001d6a:	d02b      	beq.n	8001dc4 <HAL_RCC_OscConfig+0x3d8>
        pll_config = RCC->PLLCFGR;
 8001d6c:	4b1b      	ldr	r3, [pc, #108]	@ (8001ddc <HAL_RCC_OscConfig+0x3f0>)
 8001d6e:	685b      	ldr	r3, [r3, #4]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d70:	f403 0180 	and.w	r1, r3, #4194304	@ 0x400000
 8001d74:	69e2      	ldr	r2, [r4, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001d76:	4291      	cmp	r1, r2
 8001d78:	d126      	bne.n	8001dc8 <HAL_RCC_OscConfig+0x3dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001d7a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001d7e:	6a21      	ldr	r1, [r4, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d80:	428a      	cmp	r2, r1
 8001d82:	d123      	bne.n	8001dcc <HAL_RCC_OscConfig+0x3e0>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001d84:	6a61      	ldr	r1, [r4, #36]	@ 0x24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001d86:	f647 72c0 	movw	r2, #32704	@ 0x7fc0
 8001d8a:	401a      	ands	r2, r3
 8001d8c:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 8001d90:	d11e      	bne.n	8001dd0 <HAL_RCC_OscConfig+0x3e4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001d92:	f403 3140 	and.w	r1, r3, #196608	@ 0x30000
 8001d96:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8001d98:	0852      	lsrs	r2, r2, #1
 8001d9a:	3a01      	subs	r2, #1
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001d9c:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 8001da0:	d118      	bne.n	8001dd4 <HAL_RCC_OscConfig+0x3e8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001da2:	f003 6370 	and.w	r3, r3, #251658240	@ 0xf000000
 8001da6:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001da8:	ebb3 6f02 	cmp.w	r3, r2, lsl #24
 8001dac:	d114      	bne.n	8001dd8 <HAL_RCC_OscConfig+0x3ec>
  return HAL_OK;
 8001dae:	2000      	movs	r0, #0
 8001db0:	e006      	b.n	8001dc0 <HAL_RCC_OscConfig+0x3d4>
    return HAL_ERROR;
 8001db2:	2001      	movs	r0, #1
}
 8001db4:	4770      	bx	lr
        return HAL_ERROR;
 8001db6:	2001      	movs	r0, #1
 8001db8:	e002      	b.n	8001dc0 <HAL_RCC_OscConfig+0x3d4>
        return HAL_ERROR;
 8001dba:	2001      	movs	r0, #1
 8001dbc:	e000      	b.n	8001dc0 <HAL_RCC_OscConfig+0x3d4>
  return HAL_OK;
 8001dbe:	2000      	movs	r0, #0
}
 8001dc0:	b002      	add	sp, #8
 8001dc2:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 8001dc4:	2001      	movs	r0, #1
 8001dc6:	e7fb      	b.n	8001dc0 <HAL_RCC_OscConfig+0x3d4>
          return HAL_ERROR;
 8001dc8:	2001      	movs	r0, #1
 8001dca:	e7f9      	b.n	8001dc0 <HAL_RCC_OscConfig+0x3d4>
 8001dcc:	2001      	movs	r0, #1
 8001dce:	e7f7      	b.n	8001dc0 <HAL_RCC_OscConfig+0x3d4>
 8001dd0:	2001      	movs	r0, #1
 8001dd2:	e7f5      	b.n	8001dc0 <HAL_RCC_OscConfig+0x3d4>
 8001dd4:	2001      	movs	r0, #1
 8001dd6:	e7f3      	b.n	8001dc0 <HAL_RCC_OscConfig+0x3d4>
 8001dd8:	2001      	movs	r0, #1
 8001dda:	e7f1      	b.n	8001dc0 <HAL_RCC_OscConfig+0x3d4>
 8001ddc:	40023800 	.word	0x40023800
 8001de0:	42470000 	.word	0x42470000

08001de4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001de4:	b508      	push	{r3, lr}
  uint32_t pllvco = 0U;
  uint32_t pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001de6:	4b26      	ldr	r3, [pc, #152]	@ (8001e80 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001de8:	689b      	ldr	r3, [r3, #8]
 8001dea:	f003 030c 	and.w	r3, r3, #12
 8001dee:	2b04      	cmp	r3, #4
 8001df0:	d041      	beq.n	8001e76 <HAL_RCC_GetSysClockFreq+0x92>
 8001df2:	2b08      	cmp	r3, #8
 8001df4:	d141      	bne.n	8001e7a <HAL_RCC_GetSysClockFreq+0x96>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001df6:	4b22      	ldr	r3, [pc, #136]	@ (8001e80 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001df8:	685a      	ldr	r2, [r3, #4]
 8001dfa:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001dfe:	685b      	ldr	r3, [r3, #4]
 8001e00:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 8001e04:	d012      	beq.n	8001e2c <HAL_RCC_GetSysClockFreq+0x48>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001e06:	4b1e      	ldr	r3, [pc, #120]	@ (8001e80 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001e08:	6859      	ldr	r1, [r3, #4]
 8001e0a:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8001e0e:	481d      	ldr	r0, [pc, #116]	@ (8001e84 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001e10:	2300      	movs	r3, #0
 8001e12:	fba1 0100 	umull	r0, r1, r1, r0
 8001e16:	f7fe fecf 	bl	8000bb8 <__aeabi_uldivmod>
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8001e1a:	4b19      	ldr	r3, [pc, #100]	@ (8001e80 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001e1c:	685b      	ldr	r3, [r3, #4]
 8001e1e:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8001e22:	3301      	adds	r3, #1
 8001e24:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco / pllp;
 8001e26:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8001e2a:	bd08      	pop	{r3, pc}
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001e2c:	4b14      	ldr	r3, [pc, #80]	@ (8001e80 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001e2e:	6858      	ldr	r0, [r3, #4]
 8001e30:	f3c0 1088 	ubfx	r0, r0, #6, #9
 8001e34:	ea4f 1c40 	mov.w	ip, r0, lsl #5
 8001e38:	ebbc 0c00 	subs.w	ip, ip, r0
 8001e3c:	eb6e 0e0e 	sbc.w	lr, lr, lr
 8001e40:	ea4f 138e 	mov.w	r3, lr, lsl #6
 8001e44:	ea43 639c 	orr.w	r3, r3, ip, lsr #26
 8001e48:	ea4f 118c 	mov.w	r1, ip, lsl #6
 8001e4c:	ebb1 010c 	subs.w	r1, r1, ip
 8001e50:	eb63 030e 	sbc.w	r3, r3, lr
 8001e54:	00db      	lsls	r3, r3, #3
 8001e56:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001e5a:	00c9      	lsls	r1, r1, #3
 8001e5c:	eb11 0c00 	adds.w	ip, r1, r0
 8001e60:	f143 0300 	adc.w	r3, r3, #0
 8001e64:	0299      	lsls	r1, r3, #10
 8001e66:	2300      	movs	r3, #0
 8001e68:	ea4f 208c 	mov.w	r0, ip, lsl #10
 8001e6c:	ea41 519c 	orr.w	r1, r1, ip, lsr #22
 8001e70:	f7fe fea2 	bl	8000bb8 <__aeabi_uldivmod>
 8001e74:	e7d1      	b.n	8001e1a <HAL_RCC_GetSysClockFreq+0x36>
      sysclockfreq = HSE_VALUE;
 8001e76:	4803      	ldr	r0, [pc, #12]	@ (8001e84 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001e78:	e7d7      	b.n	8001e2a <HAL_RCC_GetSysClockFreq+0x46>
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001e7a:	4803      	ldr	r0, [pc, #12]	@ (8001e88 <HAL_RCC_GetSysClockFreq+0xa4>)
  return sysclockfreq;
 8001e7c:	e7d5      	b.n	8001e2a <HAL_RCC_GetSysClockFreq+0x46>
 8001e7e:	bf00      	nop
 8001e80:	40023800 	.word	0x40023800
 8001e84:	017d7840 	.word	0x017d7840
 8001e88:	00f42400 	.word	0x00f42400

08001e8c <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 8001e8c:	2800      	cmp	r0, #0
 8001e8e:	f000 809b 	beq.w	8001fc8 <HAL_RCC_ClockConfig+0x13c>
{
 8001e92:	b570      	push	{r4, r5, r6, lr}
 8001e94:	460d      	mov	r5, r1
 8001e96:	4604      	mov	r4, r0
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001e98:	4b4f      	ldr	r3, [pc, #316]	@ (8001fd8 <HAL_RCC_ClockConfig+0x14c>)
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	f003 0307 	and.w	r3, r3, #7
 8001ea0:	428b      	cmp	r3, r1
 8001ea2:	d208      	bcs.n	8001eb6 <HAL_RCC_ClockConfig+0x2a>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ea4:	b2cb      	uxtb	r3, r1
 8001ea6:	4a4c      	ldr	r2, [pc, #304]	@ (8001fd8 <HAL_RCC_ClockConfig+0x14c>)
 8001ea8:	7013      	strb	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001eaa:	6813      	ldr	r3, [r2, #0]
 8001eac:	f003 0307 	and.w	r3, r3, #7
 8001eb0:	428b      	cmp	r3, r1
 8001eb2:	f040 808b 	bne.w	8001fcc <HAL_RCC_ClockConfig+0x140>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001eb6:	6823      	ldr	r3, [r4, #0]
 8001eb8:	f013 0f02 	tst.w	r3, #2
 8001ebc:	d017      	beq.n	8001eee <HAL_RCC_ClockConfig+0x62>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ebe:	f013 0f04 	tst.w	r3, #4
 8001ec2:	d004      	beq.n	8001ece <HAL_RCC_ClockConfig+0x42>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001ec4:	4a45      	ldr	r2, [pc, #276]	@ (8001fdc <HAL_RCC_ClockConfig+0x150>)
 8001ec6:	6893      	ldr	r3, [r2, #8]
 8001ec8:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001ecc:	6093      	str	r3, [r2, #8]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ece:	6823      	ldr	r3, [r4, #0]
 8001ed0:	f013 0f08 	tst.w	r3, #8
 8001ed4:	d004      	beq.n	8001ee0 <HAL_RCC_ClockConfig+0x54>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001ed6:	4a41      	ldr	r2, [pc, #260]	@ (8001fdc <HAL_RCC_ClockConfig+0x150>)
 8001ed8:	6893      	ldr	r3, [r2, #8]
 8001eda:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001ede:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ee0:	4a3e      	ldr	r2, [pc, #248]	@ (8001fdc <HAL_RCC_ClockConfig+0x150>)
 8001ee2:	6893      	ldr	r3, [r2, #8]
 8001ee4:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001ee8:	68a1      	ldr	r1, [r4, #8]
 8001eea:	430b      	orrs	r3, r1
 8001eec:	6093      	str	r3, [r2, #8]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001eee:	6823      	ldr	r3, [r4, #0]
 8001ef0:	f013 0f01 	tst.w	r3, #1
 8001ef4:	d032      	beq.n	8001f5c <HAL_RCC_ClockConfig+0xd0>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ef6:	6863      	ldr	r3, [r4, #4]
 8001ef8:	2b01      	cmp	r3, #1
 8001efa:	d021      	beq.n	8001f40 <HAL_RCC_ClockConfig+0xb4>
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001efc:	1e9a      	subs	r2, r3, #2
 8001efe:	2a01      	cmp	r2, #1
 8001f00:	d925      	bls.n	8001f4e <HAL_RCC_ClockConfig+0xc2>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f02:	4a36      	ldr	r2, [pc, #216]	@ (8001fdc <HAL_RCC_ClockConfig+0x150>)
 8001f04:	6812      	ldr	r2, [r2, #0]
 8001f06:	f012 0f02 	tst.w	r2, #2
 8001f0a:	d061      	beq.n	8001fd0 <HAL_RCC_ClockConfig+0x144>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001f0c:	4933      	ldr	r1, [pc, #204]	@ (8001fdc <HAL_RCC_ClockConfig+0x150>)
 8001f0e:	688a      	ldr	r2, [r1, #8]
 8001f10:	f022 0203 	bic.w	r2, r2, #3
 8001f14:	4313      	orrs	r3, r2
 8001f16:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 8001f18:	f7ff fbf2 	bl	8001700 <HAL_GetTick>
 8001f1c:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f1e:	4b2f      	ldr	r3, [pc, #188]	@ (8001fdc <HAL_RCC_ClockConfig+0x150>)
 8001f20:	689b      	ldr	r3, [r3, #8]
 8001f22:	f003 030c 	and.w	r3, r3, #12
 8001f26:	6862      	ldr	r2, [r4, #4]
 8001f28:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8001f2c:	d016      	beq.n	8001f5c <HAL_RCC_ClockConfig+0xd0>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f2e:	f7ff fbe7 	bl	8001700 <HAL_GetTick>
 8001f32:	1b80      	subs	r0, r0, r6
 8001f34:	f241 3388 	movw	r3, #5000	@ 0x1388
 8001f38:	4298      	cmp	r0, r3
 8001f3a:	d9f0      	bls.n	8001f1e <HAL_RCC_ClockConfig+0x92>
        return HAL_TIMEOUT;
 8001f3c:	2003      	movs	r0, #3
 8001f3e:	e042      	b.n	8001fc6 <HAL_RCC_ClockConfig+0x13a>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f40:	4a26      	ldr	r2, [pc, #152]	@ (8001fdc <HAL_RCC_ClockConfig+0x150>)
 8001f42:	6812      	ldr	r2, [r2, #0]
 8001f44:	f412 3f00 	tst.w	r2, #131072	@ 0x20000
 8001f48:	d1e0      	bne.n	8001f0c <HAL_RCC_ClockConfig+0x80>
        return HAL_ERROR;
 8001f4a:	2001      	movs	r0, #1
 8001f4c:	e03b      	b.n	8001fc6 <HAL_RCC_ClockConfig+0x13a>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f4e:	4a23      	ldr	r2, [pc, #140]	@ (8001fdc <HAL_RCC_ClockConfig+0x150>)
 8001f50:	6812      	ldr	r2, [r2, #0]
 8001f52:	f012 7f00 	tst.w	r2, #33554432	@ 0x2000000
 8001f56:	d1d9      	bne.n	8001f0c <HAL_RCC_ClockConfig+0x80>
        return HAL_ERROR;
 8001f58:	2001      	movs	r0, #1
 8001f5a:	e034      	b.n	8001fc6 <HAL_RCC_ClockConfig+0x13a>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001f5c:	4b1e      	ldr	r3, [pc, #120]	@ (8001fd8 <HAL_RCC_ClockConfig+0x14c>)
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	f003 0307 	and.w	r3, r3, #7
 8001f64:	42ab      	cmp	r3, r5
 8001f66:	d907      	bls.n	8001f78 <HAL_RCC_ClockConfig+0xec>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f68:	b2ea      	uxtb	r2, r5
 8001f6a:	4b1b      	ldr	r3, [pc, #108]	@ (8001fd8 <HAL_RCC_ClockConfig+0x14c>)
 8001f6c:	701a      	strb	r2, [r3, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	f003 0307 	and.w	r3, r3, #7
 8001f74:	42ab      	cmp	r3, r5
 8001f76:	d12d      	bne.n	8001fd4 <HAL_RCC_ClockConfig+0x148>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f78:	6823      	ldr	r3, [r4, #0]
 8001f7a:	f013 0f04 	tst.w	r3, #4
 8001f7e:	d006      	beq.n	8001f8e <HAL_RCC_ClockConfig+0x102>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001f80:	4a16      	ldr	r2, [pc, #88]	@ (8001fdc <HAL_RCC_ClockConfig+0x150>)
 8001f82:	6893      	ldr	r3, [r2, #8]
 8001f84:	f423 53e0 	bic.w	r3, r3, #7168	@ 0x1c00
 8001f88:	68e1      	ldr	r1, [r4, #12]
 8001f8a:	430b      	orrs	r3, r1
 8001f8c:	6093      	str	r3, [r2, #8]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f8e:	6823      	ldr	r3, [r4, #0]
 8001f90:	f013 0f08 	tst.w	r3, #8
 8001f94:	d007      	beq.n	8001fa6 <HAL_RCC_ClockConfig+0x11a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001f96:	4a11      	ldr	r2, [pc, #68]	@ (8001fdc <HAL_RCC_ClockConfig+0x150>)
 8001f98:	6893      	ldr	r3, [r2, #8]
 8001f9a:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 8001f9e:	6921      	ldr	r1, [r4, #16]
 8001fa0:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001fa4:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001fa6:	f7ff ff1d 	bl	8001de4 <HAL_RCC_GetSysClockFreq>
 8001faa:	4b0c      	ldr	r3, [pc, #48]	@ (8001fdc <HAL_RCC_ClockConfig+0x150>)
 8001fac:	689b      	ldr	r3, [r3, #8]
 8001fae:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001fb2:	4a0b      	ldr	r2, [pc, #44]	@ (8001fe0 <HAL_RCC_ClockConfig+0x154>)
 8001fb4:	5cd3      	ldrb	r3, [r2, r3]
 8001fb6:	40d8      	lsrs	r0, r3
 8001fb8:	4b0a      	ldr	r3, [pc, #40]	@ (8001fe4 <HAL_RCC_ClockConfig+0x158>)
 8001fba:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 8001fbc:	4b0a      	ldr	r3, [pc, #40]	@ (8001fe8 <HAL_RCC_ClockConfig+0x15c>)
 8001fbe:	6818      	ldr	r0, [r3, #0]
 8001fc0:	f7ff fb52 	bl	8001668 <HAL_InitTick>
  return HAL_OK;
 8001fc4:	2000      	movs	r0, #0
}
 8001fc6:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8001fc8:	2001      	movs	r0, #1
}
 8001fca:	4770      	bx	lr
      return HAL_ERROR;
 8001fcc:	2001      	movs	r0, #1
 8001fce:	e7fa      	b.n	8001fc6 <HAL_RCC_ClockConfig+0x13a>
        return HAL_ERROR;
 8001fd0:	2001      	movs	r0, #1
 8001fd2:	e7f8      	b.n	8001fc6 <HAL_RCC_ClockConfig+0x13a>
      return HAL_ERROR;
 8001fd4:	2001      	movs	r0, #1
 8001fd6:	e7f6      	b.n	8001fc6 <HAL_RCC_ClockConfig+0x13a>
 8001fd8:	40023c00 	.word	0x40023c00
 8001fdc:	40023800 	.word	0x40023800
 8001fe0:	08005b94 	.word	0x08005b94
 8001fe4:	200000f0 	.word	0x200000f0
 8001fe8:	200000f8 	.word	0x200000f8

08001fec <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8001fec:	4b01      	ldr	r3, [pc, #4]	@ (8001ff4 <HAL_RCC_GetHCLKFreq+0x8>)
 8001fee:	6818      	ldr	r0, [r3, #0]
 8001ff0:	4770      	bx	lr
 8001ff2:	bf00      	nop
 8001ff4:	200000f0 	.word	0x200000f0

08001ff8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001ff8:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001ffa:	f7ff fff7 	bl	8001fec <HAL_RCC_GetHCLKFreq>
 8001ffe:	4b04      	ldr	r3, [pc, #16]	@ (8002010 <HAL_RCC_GetPCLK1Freq+0x18>)
 8002000:	689b      	ldr	r3, [r3, #8]
 8002002:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8002006:	4a03      	ldr	r2, [pc, #12]	@ (8002014 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8002008:	5cd3      	ldrb	r3, [r2, r3]
}
 800200a:	40d8      	lsrs	r0, r3
 800200c:	bd08      	pop	{r3, pc}
 800200e:	bf00      	nop
 8002010:	40023800 	.word	0x40023800
 8002014:	08005b8c 	.word	0x08005b8c

08002018 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002018:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800201a:	f7ff ffe7 	bl	8001fec <HAL_RCC_GetHCLKFreq>
 800201e:	4b04      	ldr	r3, [pc, #16]	@ (8002030 <HAL_RCC_GetPCLK2Freq+0x18>)
 8002020:	689b      	ldr	r3, [r3, #8]
 8002022:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8002026:	4a03      	ldr	r2, [pc, #12]	@ (8002034 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8002028:	5cd3      	ldrb	r3, [r2, r3]
}
 800202a:	40d8      	lsrs	r0, r3
 800202c:	bd08      	pop	{r3, pc}
 800202e:	bf00      	nop
 8002030:	40023800 	.word	0x40023800
 8002034:	08005b8c 	.word	0x08005b8c

08002038 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002038:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800203a:	6a02      	ldr	r2, [r0, #32]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800203c:	6a03      	ldr	r3, [r0, #32]
 800203e:	f023 0301 	bic.w	r3, r3, #1
 8002042:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002044:	6845      	ldr	r5, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002046:	6983      	ldr	r3, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002048:	f023 0373 	bic.w	r3, r3, #115	@ 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800204c:	680c      	ldr	r4, [r1, #0]
 800204e:	431c      	orrs	r4, r3

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002050:	f022 0202 	bic.w	r2, r2, #2
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002054:	688b      	ldr	r3, [r1, #8]
 8002056:	4313      	orrs	r3, r2

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002058:	4a0b      	ldr	r2, [pc, #44]	@ (8002088 <TIM_OC1_SetConfig+0x50>)
 800205a:	4290      	cmp	r0, r2
 800205c:	d006      	beq.n	800206c <TIM_OC1_SetConfig+0x34>
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800205e:	6045      	str	r5, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002060:	6184      	str	r4, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002062:	684a      	ldr	r2, [r1, #4]
 8002064:	6342      	str	r2, [r0, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002066:	6203      	str	r3, [r0, #32]
}
 8002068:	bc30      	pop	{r4, r5}
 800206a:	4770      	bx	lr
    tmpccer &= ~TIM_CCER_CC1NP;
 800206c:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 8002070:	68ca      	ldr	r2, [r1, #12]
 8002072:	431a      	orrs	r2, r3
    tmpccer &= ~TIM_CCER_CC1NE;
 8002074:	f022 0304 	bic.w	r3, r2, #4
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002078:	f425 7540 	bic.w	r5, r5, #768	@ 0x300
    tmpcr2 |= OC_Config->OCIdleState;
 800207c:	694a      	ldr	r2, [r1, #20]
 800207e:	432a      	orrs	r2, r5
    tmpcr2 |= OC_Config->OCNIdleState;
 8002080:	698d      	ldr	r5, [r1, #24]
 8002082:	4315      	orrs	r5, r2
 8002084:	e7eb      	b.n	800205e <TIM_OC1_SetConfig+0x26>
 8002086:	bf00      	nop
 8002088:	40010000 	.word	0x40010000

0800208c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800208c:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800208e:	6a03      	ldr	r3, [r0, #32]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002090:	6a02      	ldr	r2, [r0, #32]
 8002092:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002096:	6202      	str	r2, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002098:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800209a:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800209c:	f022 0273 	bic.w	r2, r2, #115	@ 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80020a0:	680d      	ldr	r5, [r1, #0]
 80020a2:	4315      	orrs	r5, r2

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80020a4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80020a8:	688a      	ldr	r2, [r1, #8]
 80020aa:	ea43 2302 	orr.w	r3, r3, r2, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80020ae:	4a0d      	ldr	r2, [pc, #52]	@ (80020e4 <TIM_OC3_SetConfig+0x58>)
 80020b0:	4290      	cmp	r0, r2
 80020b2:	d006      	beq.n	80020c2 <TIM_OC3_SetConfig+0x36>
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80020b4:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80020b6:	61c5      	str	r5, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80020b8:	684a      	ldr	r2, [r1, #4]
 80020ba:	63c2      	str	r2, [r0, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80020bc:	6203      	str	r3, [r0, #32]
}
 80020be:	bc30      	pop	{r4, r5}
 80020c0:	4770      	bx	lr
    tmpccer &= ~TIM_CCER_CC3NP;
 80020c2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80020c6:	68ca      	ldr	r2, [r1, #12]
 80020c8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    tmpccer &= ~TIM_CCER_CC3NE;
 80020cc:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80020d0:	f424 5440 	bic.w	r4, r4, #12288	@ 0x3000
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80020d4:	694a      	ldr	r2, [r1, #20]
 80020d6:	ea44 1402 	orr.w	r4, r4, r2, lsl #4
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80020da:	698a      	ldr	r2, [r1, #24]
 80020dc:	ea44 1402 	orr.w	r4, r4, r2, lsl #4
 80020e0:	e7e8      	b.n	80020b4 <TIM_OC3_SetConfig+0x28>
 80020e2:	bf00      	nop
 80020e4:	40010000 	.word	0x40010000

080020e8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80020e8:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80020ea:	6a03      	ldr	r3, [r0, #32]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80020ec:	6a02      	ldr	r2, [r0, #32]
 80020ee:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80020f2:	6202      	str	r2, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80020f4:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80020f6:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80020f8:	f422 42e6 	bic.w	r2, r2, #29440	@ 0x7300

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80020fc:	680d      	ldr	r5, [r1, #0]
 80020fe:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002102:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002106:	688d      	ldr	r5, [r1, #8]
 8002108:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800210c:	4d07      	ldr	r5, [pc, #28]	@ (800212c <TIM_OC4_SetConfig+0x44>)
 800210e:	42a8      	cmp	r0, r5
 8002110:	d006      	beq.n	8002120 <TIM_OC4_SetConfig+0x38>
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002112:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002114:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002116:	684a      	ldr	r2, [r1, #4]
 8002118:	6402      	str	r2, [r0, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800211a:	6203      	str	r3, [r0, #32]
}
 800211c:	bc30      	pop	{r4, r5}
 800211e:	4770      	bx	lr
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002120:	f424 4480 	bic.w	r4, r4, #16384	@ 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002124:	694d      	ldr	r5, [r1, #20]
 8002126:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
 800212a:	e7f2      	b.n	8002112 <TIM_OC4_SetConfig+0x2a>
 800212c:	40010000 	.word	0x40010000

08002130 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002130:	b410      	push	{r4}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002132:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002134:	6a04      	ldr	r4, [r0, #32]
 8002136:	f024 0401 	bic.w	r4, r4, #1
 800213a:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 800213c:	6984      	ldr	r4, [r0, #24]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800213e:	f024 0cf0 	bic.w	ip, r4, #240	@ 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002142:	ea4c 1202 	orr.w	r2, ip, r2, lsl #4

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002146:	f023 030a 	bic.w	r3, r3, #10
  tmpccer |= TIM_ICPolarity;
 800214a:	430b      	orrs	r3, r1

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800214c:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 800214e:	6203      	str	r3, [r0, #32]
}
 8002150:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002154:	4770      	bx	lr

08002156 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8002156:	b430      	push	{r4, r5}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002158:	6a05      	ldr	r5, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800215a:	6a04      	ldr	r4, [r0, #32]
 800215c:	f024 0410 	bic.w	r4, r4, #16
 8002160:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002162:	6984      	ldr	r4, [r0, #24]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8002164:	f424 7c40 	bic.w	ip, r4, #768	@ 0x300
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8002168:	ea4c 2c02 	orr.w	ip, ip, r2, lsl #8

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800216c:	f42c 4c70 	bic.w	ip, ip, #61440	@ 0xf000
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8002170:	031b      	lsls	r3, r3, #12
 8002172:	b29b      	uxth	r3, r3
 8002174:	ea43 030c 	orr.w	r3, r3, ip

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002178:	f025 05a0 	bic.w	r5, r5, #160	@ 0xa0
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800217c:	0109      	lsls	r1, r1, #4
 800217e:	f001 01a0 	and.w	r1, r1, #160	@ 0xa0
 8002182:	4329      	orrs	r1, r5

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002184:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8002186:	6201      	str	r1, [r0, #32]
}
 8002188:	bc30      	pop	{r4, r5}
 800218a:	4770      	bx	lr

0800218c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800218c:	b410      	push	{r4}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800218e:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002190:	6a04      	ldr	r4, [r0, #32]
 8002192:	f024 0410 	bic.w	r4, r4, #16
 8002196:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002198:	6984      	ldr	r4, [r0, #24]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800219a:	f424 4c70 	bic.w	ip, r4, #61440	@ 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800219e:	ea4c 3202 	orr.w	r2, ip, r2, lsl #12

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80021a2:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 80021a6:	ea43 1301 	orr.w	r3, r3, r1, lsl #4

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80021aa:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 80021ac:	6203      	str	r3, [r0, #32]
}
 80021ae:	f85d 4b04 	ldr.w	r4, [sp], #4
 80021b2:	4770      	bx	lr

080021b4 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80021b4:	b430      	push	{r4, r5}
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 80021b6:	6a05      	ldr	r5, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80021b8:	6a04      	ldr	r4, [r0, #32]
 80021ba:	f424 7480 	bic.w	r4, r4, #256	@ 0x100
 80021be:	6204      	str	r4, [r0, #32]
  tmpccmr2 = TIMx->CCMR2;
 80021c0:	69c4      	ldr	r4, [r0, #28]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80021c2:	f024 0c03 	bic.w	ip, r4, #3
  tmpccmr2 |= TIM_ICSelection;
 80021c6:	ea4c 0c02 	orr.w	ip, ip, r2

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80021ca:	f02c 0cf0 	bic.w	ip, ip, #240	@ 0xf0
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80021ce:	011b      	lsls	r3, r3, #4
 80021d0:	b2db      	uxtb	r3, r3
 80021d2:	ea43 030c 	orr.w	r3, r3, ip

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80021d6:	f425 6520 	bic.w	r5, r5, #2560	@ 0xa00
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80021da:	0209      	lsls	r1, r1, #8
 80021dc:	f401 6120 	and.w	r1, r1, #2560	@ 0xa00
 80021e0:	4329      	orrs	r1, r5

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80021e2:	61c3      	str	r3, [r0, #28]
  TIMx->CCER = tmpccer;
 80021e4:	6201      	str	r1, [r0, #32]
}
 80021e6:	bc30      	pop	{r4, r5}
 80021e8:	4770      	bx	lr

080021ea <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80021ea:	b430      	push	{r4, r5}
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 80021ec:	6a05      	ldr	r5, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80021ee:	6a04      	ldr	r4, [r0, #32]
 80021f0:	f424 5480 	bic.w	r4, r4, #4096	@ 0x1000
 80021f4:	6204      	str	r4, [r0, #32]
  tmpccmr2 = TIMx->CCMR2;
 80021f6:	69c4      	ldr	r4, [r0, #28]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80021f8:	f424 7c40 	bic.w	ip, r4, #768	@ 0x300
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80021fc:	ea4c 2c02 	orr.w	ip, ip, r2, lsl #8

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8002200:	f42c 4c70 	bic.w	ip, ip, #61440	@ 0xf000
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8002204:	031b      	lsls	r3, r3, #12
 8002206:	b29b      	uxth	r3, r3
 8002208:	ea43 030c 	orr.w	r3, r3, ip

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800220c:	f425 4520 	bic.w	r5, r5, #40960	@ 0xa000
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8002210:	0309      	lsls	r1, r1, #12
 8002212:	f401 4120 	and.w	r1, r1, #40960	@ 0xa000
 8002216:	4329      	orrs	r1, r5

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8002218:	61c3      	str	r3, [r0, #28]
  TIMx->CCER = tmpccer ;
 800221a:	6201      	str	r1, [r0, #32]
}
 800221c:	bc30      	pop	{r4, r5}
 800221e:	4770      	bx	lr

08002220 <TIM_ITRx_SetConfig>:
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002220:	6883      	ldr	r3, [r0, #8]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002222:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002226:	430b      	orrs	r3, r1
 8002228:	f043 0307 	orr.w	r3, r3, #7
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800222c:	6083      	str	r3, [r0, #8]
}
 800222e:	4770      	bx	lr

08002230 <HAL_TIM_PWM_MspInit>:
}
 8002230:	4770      	bx	lr

08002232 <HAL_TIM_IC_MspInit>:
}
 8002232:	4770      	bx	lr

08002234 <HAL_TIM_ReadCapturedValue>:
  switch (Channel)
 8002234:	290c      	cmp	r1, #12
 8002236:	d814      	bhi.n	8002262 <HAL_TIM_ReadCapturedValue+0x2e>
 8002238:	e8df f001 	tbb	[pc, r1]
 800223c:	13131307 	.word	0x13131307
 8002240:	1313130a 	.word	0x1313130a
 8002244:	1313130d 	.word	0x1313130d
 8002248:	10          	.byte	0x10
 8002249:	00          	.byte	0x00
      tmpreg =  htim->Instance->CCR1;
 800224a:	6803      	ldr	r3, [r0, #0]
 800224c:	6b58      	ldr	r0, [r3, #52]	@ 0x34
      break;
 800224e:	4770      	bx	lr
      tmpreg =   htim->Instance->CCR2;
 8002250:	6803      	ldr	r3, [r0, #0]
 8002252:	6b98      	ldr	r0, [r3, #56]	@ 0x38
      break;
 8002254:	4770      	bx	lr
      tmpreg =   htim->Instance->CCR3;
 8002256:	6803      	ldr	r3, [r0, #0]
 8002258:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
      break;
 800225a:	4770      	bx	lr
      tmpreg =   htim->Instance->CCR4;
 800225c:	6803      	ldr	r3, [r0, #0]
 800225e:	6c18      	ldr	r0, [r3, #64]	@ 0x40
      break;
 8002260:	4770      	bx	lr
  switch (Channel)
 8002262:	2000      	movs	r0, #0
}
 8002264:	4770      	bx	lr

08002266 <HAL_TIM_PeriodElapsedCallback>:
}
 8002266:	4770      	bx	lr

08002268 <HAL_TIM_OC_DelayElapsedCallback>:
}
 8002268:	4770      	bx	lr

0800226a <HAL_TIM_PWM_PulseFinishedCallback>:
}
 800226a:	4770      	bx	lr

0800226c <HAL_TIM_TriggerCallback>:
}
 800226c:	4770      	bx	lr

0800226e <HAL_TIM_IRQHandler>:
{
 800226e:	b570      	push	{r4, r5, r6, lr}
 8002270:	4604      	mov	r4, r0
  uint32_t itsource = htim->Instance->DIER;
 8002272:	6803      	ldr	r3, [r0, #0]
 8002274:	68de      	ldr	r6, [r3, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002276:	691d      	ldr	r5, [r3, #16]
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002278:	f015 0f02 	tst.w	r5, #2
 800227c:	d010      	beq.n	80022a0 <HAL_TIM_IRQHandler+0x32>
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800227e:	f016 0f02 	tst.w	r6, #2
 8002282:	d00d      	beq.n	80022a0 <HAL_TIM_IRQHandler+0x32>
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002284:	f06f 0202 	mvn.w	r2, #2
 8002288:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800228a:	2301      	movs	r3, #1
 800228c:	7703      	strb	r3, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800228e:	6803      	ldr	r3, [r0, #0]
 8002290:	699b      	ldr	r3, [r3, #24]
 8002292:	f013 0f03 	tst.w	r3, #3
 8002296:	d05e      	beq.n	8002356 <HAL_TIM_IRQHandler+0xe8>
          HAL_TIM_IC_CaptureCallback(htim);
 8002298:	f7fe fe84 	bl	8000fa4 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800229c:	2300      	movs	r3, #0
 800229e:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80022a0:	f015 0f04 	tst.w	r5, #4
 80022a4:	d012      	beq.n	80022cc <HAL_TIM_IRQHandler+0x5e>
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80022a6:	f016 0f04 	tst.w	r6, #4
 80022aa:	d00f      	beq.n	80022cc <HAL_TIM_IRQHandler+0x5e>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80022ac:	6823      	ldr	r3, [r4, #0]
 80022ae:	f06f 0204 	mvn.w	r2, #4
 80022b2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80022b4:	2302      	movs	r3, #2
 80022b6:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80022b8:	6823      	ldr	r3, [r4, #0]
 80022ba:	699b      	ldr	r3, [r3, #24]
 80022bc:	f413 7f40 	tst.w	r3, #768	@ 0x300
 80022c0:	d04f      	beq.n	8002362 <HAL_TIM_IRQHandler+0xf4>
        HAL_TIM_IC_CaptureCallback(htim);
 80022c2:	4620      	mov	r0, r4
 80022c4:	f7fe fe6e 	bl	8000fa4 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80022c8:	2300      	movs	r3, #0
 80022ca:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80022cc:	f015 0f08 	tst.w	r5, #8
 80022d0:	d012      	beq.n	80022f8 <HAL_TIM_IRQHandler+0x8a>
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80022d2:	f016 0f08 	tst.w	r6, #8
 80022d6:	d00f      	beq.n	80022f8 <HAL_TIM_IRQHandler+0x8a>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80022d8:	6823      	ldr	r3, [r4, #0]
 80022da:	f06f 0208 	mvn.w	r2, #8
 80022de:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80022e0:	2304      	movs	r3, #4
 80022e2:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80022e4:	6823      	ldr	r3, [r4, #0]
 80022e6:	69db      	ldr	r3, [r3, #28]
 80022e8:	f013 0f03 	tst.w	r3, #3
 80022ec:	d040      	beq.n	8002370 <HAL_TIM_IRQHandler+0x102>
        HAL_TIM_IC_CaptureCallback(htim);
 80022ee:	4620      	mov	r0, r4
 80022f0:	f7fe fe58 	bl	8000fa4 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80022f4:	2300      	movs	r3, #0
 80022f6:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80022f8:	f015 0f10 	tst.w	r5, #16
 80022fc:	d012      	beq.n	8002324 <HAL_TIM_IRQHandler+0xb6>
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80022fe:	f016 0f10 	tst.w	r6, #16
 8002302:	d00f      	beq.n	8002324 <HAL_TIM_IRQHandler+0xb6>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002304:	6823      	ldr	r3, [r4, #0]
 8002306:	f06f 0210 	mvn.w	r2, #16
 800230a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800230c:	2308      	movs	r3, #8
 800230e:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002310:	6823      	ldr	r3, [r4, #0]
 8002312:	69db      	ldr	r3, [r3, #28]
 8002314:	f413 7f40 	tst.w	r3, #768	@ 0x300
 8002318:	d031      	beq.n	800237e <HAL_TIM_IRQHandler+0x110>
        HAL_TIM_IC_CaptureCallback(htim);
 800231a:	4620      	mov	r0, r4
 800231c:	f7fe fe42 	bl	8000fa4 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002320:	2300      	movs	r3, #0
 8002322:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002324:	f015 0f01 	tst.w	r5, #1
 8002328:	d002      	beq.n	8002330 <HAL_TIM_IRQHandler+0xc2>
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800232a:	f016 0f01 	tst.w	r6, #1
 800232e:	d12d      	bne.n	800238c <HAL_TIM_IRQHandler+0x11e>
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002330:	f015 0f80 	tst.w	r5, #128	@ 0x80
 8002334:	d002      	beq.n	800233c <HAL_TIM_IRQHandler+0xce>
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002336:	f016 0f80 	tst.w	r6, #128	@ 0x80
 800233a:	d12f      	bne.n	800239c <HAL_TIM_IRQHandler+0x12e>
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800233c:	f015 0f40 	tst.w	r5, #64	@ 0x40
 8002340:	d002      	beq.n	8002348 <HAL_TIM_IRQHandler+0xda>
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002342:	f016 0f40 	tst.w	r6, #64	@ 0x40
 8002346:	d131      	bne.n	80023ac <HAL_TIM_IRQHandler+0x13e>
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002348:	f015 0f20 	tst.w	r5, #32
 800234c:	d002      	beq.n	8002354 <HAL_TIM_IRQHandler+0xe6>
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800234e:	f016 0f20 	tst.w	r6, #32
 8002352:	d133      	bne.n	80023bc <HAL_TIM_IRQHandler+0x14e>
}
 8002354:	bd70      	pop	{r4, r5, r6, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002356:	f7ff ff87 	bl	8002268 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800235a:	4620      	mov	r0, r4
 800235c:	f7ff ff85 	bl	800226a <HAL_TIM_PWM_PulseFinishedCallback>
 8002360:	e79c      	b.n	800229c <HAL_TIM_IRQHandler+0x2e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002362:	4620      	mov	r0, r4
 8002364:	f7ff ff80 	bl	8002268 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002368:	4620      	mov	r0, r4
 800236a:	f7ff ff7e 	bl	800226a <HAL_TIM_PWM_PulseFinishedCallback>
 800236e:	e7ab      	b.n	80022c8 <HAL_TIM_IRQHandler+0x5a>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002370:	4620      	mov	r0, r4
 8002372:	f7ff ff79 	bl	8002268 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002376:	4620      	mov	r0, r4
 8002378:	f7ff ff77 	bl	800226a <HAL_TIM_PWM_PulseFinishedCallback>
 800237c:	e7ba      	b.n	80022f4 <HAL_TIM_IRQHandler+0x86>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800237e:	4620      	mov	r0, r4
 8002380:	f7ff ff72 	bl	8002268 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002384:	4620      	mov	r0, r4
 8002386:	f7ff ff70 	bl	800226a <HAL_TIM_PWM_PulseFinishedCallback>
 800238a:	e7c9      	b.n	8002320 <HAL_TIM_IRQHandler+0xb2>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800238c:	6823      	ldr	r3, [r4, #0]
 800238e:	f06f 0201 	mvn.w	r2, #1
 8002392:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8002394:	4620      	mov	r0, r4
 8002396:	f7ff ff66 	bl	8002266 <HAL_TIM_PeriodElapsedCallback>
 800239a:	e7c9      	b.n	8002330 <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800239c:	6823      	ldr	r3, [r4, #0]
 800239e:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80023a2:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 80023a4:	4620      	mov	r0, r4
 80023a6:	f000 fd3e 	bl	8002e26 <HAL_TIMEx_BreakCallback>
 80023aa:	e7c7      	b.n	800233c <HAL_TIM_IRQHandler+0xce>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80023ac:	6823      	ldr	r3, [r4, #0]
 80023ae:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80023b2:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 80023b4:	4620      	mov	r0, r4
 80023b6:	f7ff ff59 	bl	800226c <HAL_TIM_TriggerCallback>
 80023ba:	e7c5      	b.n	8002348 <HAL_TIM_IRQHandler+0xda>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80023bc:	6823      	ldr	r3, [r4, #0]
 80023be:	f06f 0220 	mvn.w	r2, #32
 80023c2:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 80023c4:	4620      	mov	r0, r4
 80023c6:	f000 fd2d 	bl	8002e24 <HAL_TIMEx_CommutCallback>
}
 80023ca:	e7c3      	b.n	8002354 <HAL_TIM_IRQHandler+0xe6>

080023cc <TIM_Base_SetConfig>:
  tmpcr1 = TIMx->CR1;
 80023cc:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80023ce:	4a27      	ldr	r2, [pc, #156]	@ (800246c <TIM_Base_SetConfig+0xa0>)
 80023d0:	4290      	cmp	r0, r2
 80023d2:	d00e      	beq.n	80023f2 <TIM_Base_SetConfig+0x26>
 80023d4:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 80023d8:	d00b      	beq.n	80023f2 <TIM_Base_SetConfig+0x26>
 80023da:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 80023de:	4290      	cmp	r0, r2
 80023e0:	d007      	beq.n	80023f2 <TIM_Base_SetConfig+0x26>
 80023e2:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80023e6:	4290      	cmp	r0, r2
 80023e8:	d003      	beq.n	80023f2 <TIM_Base_SetConfig+0x26>
 80023ea:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80023ee:	4290      	cmp	r0, r2
 80023f0:	d103      	bne.n	80023fa <TIM_Base_SetConfig+0x2e>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80023f2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 80023f6:	684a      	ldr	r2, [r1, #4]
 80023f8:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80023fa:	4a1c      	ldr	r2, [pc, #112]	@ (800246c <TIM_Base_SetConfig+0xa0>)
 80023fc:	4290      	cmp	r0, r2
 80023fe:	d01a      	beq.n	8002436 <TIM_Base_SetConfig+0x6a>
 8002400:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 8002404:	d017      	beq.n	8002436 <TIM_Base_SetConfig+0x6a>
 8002406:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 800240a:	4290      	cmp	r0, r2
 800240c:	d013      	beq.n	8002436 <TIM_Base_SetConfig+0x6a>
 800240e:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8002412:	4290      	cmp	r0, r2
 8002414:	d00f      	beq.n	8002436 <TIM_Base_SetConfig+0x6a>
 8002416:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800241a:	4290      	cmp	r0, r2
 800241c:	d00b      	beq.n	8002436 <TIM_Base_SetConfig+0x6a>
 800241e:	f502 329a 	add.w	r2, r2, #78848	@ 0x13400
 8002422:	4290      	cmp	r0, r2
 8002424:	d007      	beq.n	8002436 <TIM_Base_SetConfig+0x6a>
 8002426:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800242a:	4290      	cmp	r0, r2
 800242c:	d003      	beq.n	8002436 <TIM_Base_SetConfig+0x6a>
 800242e:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8002432:	4290      	cmp	r0, r2
 8002434:	d103      	bne.n	800243e <TIM_Base_SetConfig+0x72>
    tmpcr1 &= ~TIM_CR1_CKD;
 8002436:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800243a:	68ca      	ldr	r2, [r1, #12]
 800243c:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800243e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002442:	694a      	ldr	r2, [r1, #20]
 8002444:	4313      	orrs	r3, r2
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002446:	688a      	ldr	r2, [r1, #8]
 8002448:	62c2      	str	r2, [r0, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 800244a:	680a      	ldr	r2, [r1, #0]
 800244c:	6282      	str	r2, [r0, #40]	@ 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800244e:	4a07      	ldr	r2, [pc, #28]	@ (800246c <TIM_Base_SetConfig+0xa0>)
 8002450:	4290      	cmp	r0, r2
 8002452:	d007      	beq.n	8002464 <TIM_Base_SetConfig+0x98>
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8002454:	6802      	ldr	r2, [r0, #0]
 8002456:	f042 0204 	orr.w	r2, r2, #4
 800245a:	6002      	str	r2, [r0, #0]
  TIMx->EGR = TIM_EGR_UG;
 800245c:	2201      	movs	r2, #1
 800245e:	6142      	str	r2, [r0, #20]
  TIMx->CR1 = tmpcr1;
 8002460:	6003      	str	r3, [r0, #0]
}
 8002462:	4770      	bx	lr
    TIMx->RCR = Structure->RepetitionCounter;
 8002464:	690a      	ldr	r2, [r1, #16]
 8002466:	6302      	str	r2, [r0, #48]	@ 0x30
 8002468:	e7f4      	b.n	8002454 <TIM_Base_SetConfig+0x88>
 800246a:	bf00      	nop
 800246c:	40010000 	.word	0x40010000

08002470 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 8002470:	b340      	cbz	r0, 80024c4 <HAL_TIM_Base_Init+0x54>
{
 8002472:	b510      	push	{r4, lr}
 8002474:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 8002476:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 800247a:	b1f3      	cbz	r3, 80024ba <HAL_TIM_Base_Init+0x4a>
  htim->State = HAL_TIM_STATE_BUSY;
 800247c:	2302      	movs	r3, #2
 800247e:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002482:	4621      	mov	r1, r4
 8002484:	f851 0b04 	ldr.w	r0, [r1], #4
 8002488:	f7ff ffa0 	bl	80023cc <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800248c:	2301      	movs	r3, #1
 800248e:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002492:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 8002496:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 800249a:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 800249e:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80024a2:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80024a6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80024aa:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 80024ae:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
  htim->State = HAL_TIM_STATE_READY;
 80024b2:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  return HAL_OK;
 80024b6:	2000      	movs	r0, #0
}
 80024b8:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 80024ba:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
    HAL_TIM_Base_MspInit(htim);
 80024be:	f7fe ff85 	bl	80013cc <HAL_TIM_Base_MspInit>
 80024c2:	e7db      	b.n	800247c <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 80024c4:	2001      	movs	r0, #1
}
 80024c6:	4770      	bx	lr

080024c8 <HAL_TIM_PWM_Init>:
  if (htim == NULL)
 80024c8:	b340      	cbz	r0, 800251c <HAL_TIM_PWM_Init+0x54>
{
 80024ca:	b510      	push	{r4, lr}
 80024cc:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 80024ce:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 80024d2:	b1f3      	cbz	r3, 8002512 <HAL_TIM_PWM_Init+0x4a>
  htim->State = HAL_TIM_STATE_BUSY;
 80024d4:	2302      	movs	r3, #2
 80024d6:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80024da:	4621      	mov	r1, r4
 80024dc:	f851 0b04 	ldr.w	r0, [r1], #4
 80024e0:	f7ff ff74 	bl	80023cc <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80024e4:	2301      	movs	r3, #1
 80024e6:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80024ea:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 80024ee:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 80024f2:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 80024f6:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80024fa:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80024fe:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8002502:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 8002506:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
  htim->State = HAL_TIM_STATE_READY;
 800250a:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  return HAL_OK;
 800250e:	2000      	movs	r0, #0
}
 8002510:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8002512:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
    HAL_TIM_PWM_MspInit(htim);
 8002516:	f7ff fe8b 	bl	8002230 <HAL_TIM_PWM_MspInit>
 800251a:	e7db      	b.n	80024d4 <HAL_TIM_PWM_Init+0xc>
    return HAL_ERROR;
 800251c:	2001      	movs	r0, #1
}
 800251e:	4770      	bx	lr

08002520 <HAL_TIM_IC_Init>:
  if (htim == NULL)
 8002520:	b340      	cbz	r0, 8002574 <HAL_TIM_IC_Init+0x54>
{
 8002522:	b510      	push	{r4, lr}
 8002524:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 8002526:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 800252a:	b1f3      	cbz	r3, 800256a <HAL_TIM_IC_Init+0x4a>
  htim->State = HAL_TIM_STATE_BUSY;
 800252c:	2302      	movs	r3, #2
 800252e:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002532:	4621      	mov	r1, r4
 8002534:	f851 0b04 	ldr.w	r0, [r1], #4
 8002538:	f7ff ff48 	bl	80023cc <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800253c:	2301      	movs	r3, #1
 800253e:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002542:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 8002546:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 800254a:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 800254e:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002552:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8002556:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800255a:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 800255e:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
  htim->State = HAL_TIM_STATE_READY;
 8002562:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  return HAL_OK;
 8002566:	2000      	movs	r0, #0
}
 8002568:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 800256a:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
    HAL_TIM_IC_MspInit(htim);
 800256e:	f7ff fe60 	bl	8002232 <HAL_TIM_IC_MspInit>
 8002572:	e7db      	b.n	800252c <HAL_TIM_IC_Init+0xc>
    return HAL_ERROR;
 8002574:	2001      	movs	r0, #1
}
 8002576:	4770      	bx	lr

08002578 <TIM_OC2_SetConfig>:
{
 8002578:	b430      	push	{r4, r5}
  tmpccer = TIMx->CCER;
 800257a:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800257c:	6a02      	ldr	r2, [r0, #32]
 800257e:	f022 0210 	bic.w	r2, r2, #16
 8002582:	6202      	str	r2, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 8002584:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8002586:	6982      	ldr	r2, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002588:	f422 42e6 	bic.w	r2, r2, #29440	@ 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800258c:	680d      	ldr	r5, [r1, #0]
 800258e:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer &= ~TIM_CCER_CC2P;
 8002592:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002596:	688d      	ldr	r5, [r1, #8]
 8002598:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800259c:	4d0c      	ldr	r5, [pc, #48]	@ (80025d0 <TIM_OC2_SetConfig+0x58>)
 800259e:	42a8      	cmp	r0, r5
 80025a0:	d006      	beq.n	80025b0 <TIM_OC2_SetConfig+0x38>
  TIMx->CR2 = tmpcr2;
 80025a2:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 80025a4:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 80025a6:	684a      	ldr	r2, [r1, #4]
 80025a8:	6382      	str	r2, [r0, #56]	@ 0x38
  TIMx->CCER = tmpccer;
 80025aa:	6203      	str	r3, [r0, #32]
}
 80025ac:	bc30      	pop	{r4, r5}
 80025ae:	4770      	bx	lr
    tmpccer &= ~TIM_CCER_CC2NP;
 80025b0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80025b4:	68cd      	ldr	r5, [r1, #12]
 80025b6:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpccer &= ~TIM_CCER_CC2NE;
 80025ba:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80025be:	f424 6440 	bic.w	r4, r4, #3072	@ 0xc00
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80025c2:	694d      	ldr	r5, [r1, #20]
 80025c4:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80025c8:	698d      	ldr	r5, [r1, #24]
 80025ca:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
 80025ce:	e7e8      	b.n	80025a2 <TIM_OC2_SetConfig+0x2a>
 80025d0:	40010000 	.word	0x40010000

080025d4 <HAL_TIM_PWM_ConfigChannel>:
{
 80025d4:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 80025d6:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 80025da:	2b01      	cmp	r3, #1
 80025dc:	d066      	beq.n	80026ac <HAL_TIM_PWM_ConfigChannel+0xd8>
 80025de:	4604      	mov	r4, r0
 80025e0:	460d      	mov	r5, r1
 80025e2:	2301      	movs	r3, #1
 80025e4:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
  switch (Channel)
 80025e8:	2a0c      	cmp	r2, #12
 80025ea:	d85a      	bhi.n	80026a2 <HAL_TIM_PWM_ConfigChannel+0xce>
 80025ec:	e8df f002 	tbb	[pc, r2]
 80025f0:	59595907 	.word	0x59595907
 80025f4:	5959591b 	.word	0x5959591b
 80025f8:	59595930 	.word	0x59595930
 80025fc:	44          	.byte	0x44
 80025fd:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80025fe:	6800      	ldr	r0, [r0, #0]
 8002600:	f7ff fd1a 	bl	8002038 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002604:	6822      	ldr	r2, [r4, #0]
 8002606:	6993      	ldr	r3, [r2, #24]
 8002608:	f043 0308 	orr.w	r3, r3, #8
 800260c:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800260e:	6822      	ldr	r2, [r4, #0]
 8002610:	6993      	ldr	r3, [r2, #24]
 8002612:	f023 0304 	bic.w	r3, r3, #4
 8002616:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002618:	6822      	ldr	r2, [r4, #0]
 800261a:	6993      	ldr	r3, [r2, #24]
 800261c:	6929      	ldr	r1, [r5, #16]
 800261e:	430b      	orrs	r3, r1
 8002620:	6193      	str	r3, [r2, #24]
  HAL_StatusTypeDef status = HAL_OK;
 8002622:	2000      	movs	r0, #0
      break;
 8002624:	e03e      	b.n	80026a4 <HAL_TIM_PWM_ConfigChannel+0xd0>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002626:	6800      	ldr	r0, [r0, #0]
 8002628:	f7ff ffa6 	bl	8002578 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800262c:	6822      	ldr	r2, [r4, #0]
 800262e:	6993      	ldr	r3, [r2, #24]
 8002630:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002634:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002636:	6822      	ldr	r2, [r4, #0]
 8002638:	6993      	ldr	r3, [r2, #24]
 800263a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800263e:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002640:	6822      	ldr	r2, [r4, #0]
 8002642:	6993      	ldr	r3, [r2, #24]
 8002644:	6929      	ldr	r1, [r5, #16]
 8002646:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800264a:	6193      	str	r3, [r2, #24]
  HAL_StatusTypeDef status = HAL_OK;
 800264c:	2000      	movs	r0, #0
      break;
 800264e:	e029      	b.n	80026a4 <HAL_TIM_PWM_ConfigChannel+0xd0>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002650:	6800      	ldr	r0, [r0, #0]
 8002652:	f7ff fd1b 	bl	800208c <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002656:	6822      	ldr	r2, [r4, #0]
 8002658:	69d3      	ldr	r3, [r2, #28]
 800265a:	f043 0308 	orr.w	r3, r3, #8
 800265e:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002660:	6822      	ldr	r2, [r4, #0]
 8002662:	69d3      	ldr	r3, [r2, #28]
 8002664:	f023 0304 	bic.w	r3, r3, #4
 8002668:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800266a:	6822      	ldr	r2, [r4, #0]
 800266c:	69d3      	ldr	r3, [r2, #28]
 800266e:	6929      	ldr	r1, [r5, #16]
 8002670:	430b      	orrs	r3, r1
 8002672:	61d3      	str	r3, [r2, #28]
  HAL_StatusTypeDef status = HAL_OK;
 8002674:	2000      	movs	r0, #0
      break;
 8002676:	e015      	b.n	80026a4 <HAL_TIM_PWM_ConfigChannel+0xd0>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002678:	6800      	ldr	r0, [r0, #0]
 800267a:	f7ff fd35 	bl	80020e8 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800267e:	6822      	ldr	r2, [r4, #0]
 8002680:	69d3      	ldr	r3, [r2, #28]
 8002682:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002686:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002688:	6822      	ldr	r2, [r4, #0]
 800268a:	69d3      	ldr	r3, [r2, #28]
 800268c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002690:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002692:	6822      	ldr	r2, [r4, #0]
 8002694:	69d3      	ldr	r3, [r2, #28]
 8002696:	6929      	ldr	r1, [r5, #16]
 8002698:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800269c:	61d3      	str	r3, [r2, #28]
  HAL_StatusTypeDef status = HAL_OK;
 800269e:	2000      	movs	r0, #0
      break;
 80026a0:	e000      	b.n	80026a4 <HAL_TIM_PWM_ConfigChannel+0xd0>
  switch (Channel)
 80026a2:	2001      	movs	r0, #1
  __HAL_UNLOCK(htim);
 80026a4:	2300      	movs	r3, #0
 80026a6:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
}
 80026aa:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(htim);
 80026ac:	2002      	movs	r0, #2
 80026ae:	e7fc      	b.n	80026aa <HAL_TIM_PWM_ConfigChannel+0xd6>

080026b0 <TIM_TI1_SetConfig>:
{
 80026b0:	b470      	push	{r4, r5, r6}
 80026b2:	4694      	mov	ip, r2
  tmpccer = TIMx->CCER;
 80026b4:	6a06      	ldr	r6, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80026b6:	6a04      	ldr	r4, [r0, #32]
 80026b8:	f024 0401 	bic.w	r4, r4, #1
 80026bc:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 80026be:	6984      	ldr	r4, [r0, #24]
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80026c0:	4d14      	ldr	r5, [pc, #80]	@ (8002714 <TIM_TI1_SetConfig+0x64>)
 80026c2:	42a8      	cmp	r0, r5
 80026c4:	d014      	beq.n	80026f0 <TIM_TI1_SetConfig+0x40>
 80026c6:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 80026ca:	d011      	beq.n	80026f0 <TIM_TI1_SetConfig+0x40>
 80026cc:	4a12      	ldr	r2, [pc, #72]	@ (8002718 <TIM_TI1_SetConfig+0x68>)
 80026ce:	4290      	cmp	r0, r2
 80026d0:	d00e      	beq.n	80026f0 <TIM_TI1_SetConfig+0x40>
 80026d2:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80026d6:	4290      	cmp	r0, r2
 80026d8:	d00a      	beq.n	80026f0 <TIM_TI1_SetConfig+0x40>
 80026da:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80026de:	4290      	cmp	r0, r2
 80026e0:	d006      	beq.n	80026f0 <TIM_TI1_SetConfig+0x40>
 80026e2:	f502 329a 	add.w	r2, r2, #78848	@ 0x13400
 80026e6:	4290      	cmp	r0, r2
 80026e8:	d002      	beq.n	80026f0 <TIM_TI1_SetConfig+0x40>
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80026ea:	f044 0201 	orr.w	r2, r4, #1
 80026ee:	e003      	b.n	80026f8 <TIM_TI1_SetConfig+0x48>
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80026f0:	f024 0203 	bic.w	r2, r4, #3
    tmpccmr1 |= TIM_ICSelection;
 80026f4:	ea42 020c 	orr.w	r2, r2, ip
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80026f8:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80026fc:	011b      	lsls	r3, r3, #4
 80026fe:	b2db      	uxtb	r3, r3
 8002700:	4313      	orrs	r3, r2
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002702:	f026 020a 	bic.w	r2, r6, #10
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8002706:	f001 010a 	and.w	r1, r1, #10
 800270a:	4311      	orrs	r1, r2
  TIMx->CCMR1 = tmpccmr1;
 800270c:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 800270e:	6201      	str	r1, [r0, #32]
}
 8002710:	bc70      	pop	{r4, r5, r6}
 8002712:	4770      	bx	lr
 8002714:	40010000 	.word	0x40010000
 8002718:	40000400 	.word	0x40000400

0800271c <HAL_TIM_IC_ConfigChannel>:
{
 800271c:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 800271e:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 8002722:	2b01      	cmp	r3, #1
 8002724:	d05e      	beq.n	80027e4 <HAL_TIM_IC_ConfigChannel+0xc8>
 8002726:	4604      	mov	r4, r0
 8002728:	460d      	mov	r5, r1
 800272a:	2301      	movs	r3, #1
 800272c:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
  if (Channel == TIM_CHANNEL_1)
 8002730:	2a0c      	cmp	r2, #12
 8002732:	d852      	bhi.n	80027da <HAL_TIM_IC_ConfigChannel+0xbe>
 8002734:	e8df f002 	tbb	[pc, r2]
 8002738:	51515107 	.word	0x51515107
 800273c:	51515119 	.word	0x51515119
 8002740:	5151512c 	.word	0x5151512c
 8002744:	3e          	.byte	0x3e
 8002745:	00          	.byte	0x00
    TIM_TI1_SetConfig(htim->Instance,
 8002746:	68cb      	ldr	r3, [r1, #12]
 8002748:	684a      	ldr	r2, [r1, #4]
 800274a:	6809      	ldr	r1, [r1, #0]
 800274c:	6800      	ldr	r0, [r0, #0]
 800274e:	f7ff ffaf 	bl	80026b0 <TIM_TI1_SetConfig>
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8002752:	6822      	ldr	r2, [r4, #0]
 8002754:	6993      	ldr	r3, [r2, #24]
 8002756:	f023 030c 	bic.w	r3, r3, #12
 800275a:	6193      	str	r3, [r2, #24]
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800275c:	6822      	ldr	r2, [r4, #0]
 800275e:	6993      	ldr	r3, [r2, #24]
 8002760:	68a9      	ldr	r1, [r5, #8]
 8002762:	430b      	orrs	r3, r1
 8002764:	6193      	str	r3, [r2, #24]
  HAL_StatusTypeDef status = HAL_OK;
 8002766:	2000      	movs	r0, #0
 8002768:	e038      	b.n	80027dc <HAL_TIM_IC_ConfigChannel+0xc0>
    TIM_TI2_SetConfig(htim->Instance,
 800276a:	68cb      	ldr	r3, [r1, #12]
 800276c:	684a      	ldr	r2, [r1, #4]
 800276e:	6809      	ldr	r1, [r1, #0]
 8002770:	6800      	ldr	r0, [r0, #0]
 8002772:	f7ff fcf0 	bl	8002156 <TIM_TI2_SetConfig>
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8002776:	6822      	ldr	r2, [r4, #0]
 8002778:	6993      	ldr	r3, [r2, #24]
 800277a:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 800277e:	6193      	str	r3, [r2, #24]
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8002780:	6822      	ldr	r2, [r4, #0]
 8002782:	6993      	ldr	r3, [r2, #24]
 8002784:	68a9      	ldr	r1, [r5, #8]
 8002786:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800278a:	6193      	str	r3, [r2, #24]
  HAL_StatusTypeDef status = HAL_OK;
 800278c:	2000      	movs	r0, #0
 800278e:	e025      	b.n	80027dc <HAL_TIM_IC_ConfigChannel+0xc0>
    TIM_TI3_SetConfig(htim->Instance,
 8002790:	68cb      	ldr	r3, [r1, #12]
 8002792:	684a      	ldr	r2, [r1, #4]
 8002794:	6809      	ldr	r1, [r1, #0]
 8002796:	6800      	ldr	r0, [r0, #0]
 8002798:	f7ff fd0c 	bl	80021b4 <TIM_TI3_SetConfig>
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800279c:	6822      	ldr	r2, [r4, #0]
 800279e:	69d3      	ldr	r3, [r2, #28]
 80027a0:	f023 030c 	bic.w	r3, r3, #12
 80027a4:	61d3      	str	r3, [r2, #28]
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80027a6:	6822      	ldr	r2, [r4, #0]
 80027a8:	69d3      	ldr	r3, [r2, #28]
 80027aa:	68a9      	ldr	r1, [r5, #8]
 80027ac:	430b      	orrs	r3, r1
 80027ae:	61d3      	str	r3, [r2, #28]
  HAL_StatusTypeDef status = HAL_OK;
 80027b0:	2000      	movs	r0, #0
 80027b2:	e013      	b.n	80027dc <HAL_TIM_IC_ConfigChannel+0xc0>
    TIM_TI4_SetConfig(htim->Instance,
 80027b4:	68cb      	ldr	r3, [r1, #12]
 80027b6:	684a      	ldr	r2, [r1, #4]
 80027b8:	6809      	ldr	r1, [r1, #0]
 80027ba:	6800      	ldr	r0, [r0, #0]
 80027bc:	f7ff fd15 	bl	80021ea <TIM_TI4_SetConfig>
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80027c0:	6822      	ldr	r2, [r4, #0]
 80027c2:	69d3      	ldr	r3, [r2, #28]
 80027c4:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 80027c8:	61d3      	str	r3, [r2, #28]
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80027ca:	6822      	ldr	r2, [r4, #0]
 80027cc:	69d3      	ldr	r3, [r2, #28]
 80027ce:	68a9      	ldr	r1, [r5, #8]
 80027d0:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80027d4:	61d3      	str	r3, [r2, #28]
  HAL_StatusTypeDef status = HAL_OK;
 80027d6:	2000      	movs	r0, #0
 80027d8:	e000      	b.n	80027dc <HAL_TIM_IC_ConfigChannel+0xc0>
  __HAL_LOCK(htim);
 80027da:	2001      	movs	r0, #1
  __HAL_UNLOCK(htim);
 80027dc:	2300      	movs	r3, #0
 80027de:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
}
 80027e2:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(htim);
 80027e4:	2002      	movs	r0, #2
 80027e6:	e7fc      	b.n	80027e2 <HAL_TIM_IC_ConfigChannel+0xc6>

080027e8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80027e8:	b410      	push	{r4}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80027ea:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80027ec:	f424 4c7f 	bic.w	ip, r4, #65280	@ 0xff00

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80027f0:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 80027f4:	430a      	orrs	r2, r1
 80027f6:	ea42 020c 	orr.w	r2, r2, ip

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80027fa:	6082      	str	r2, [r0, #8]
}
 80027fc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002800:	4770      	bx	lr

08002802 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8002802:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 8002806:	2b01      	cmp	r3, #1
 8002808:	d078      	beq.n	80028fc <HAL_TIM_ConfigClockSource+0xfa>
{
 800280a:	b510      	push	{r4, lr}
 800280c:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 800280e:	2301      	movs	r3, #1
 8002810:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 8002814:	2302      	movs	r3, #2
 8002816:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
  tmpsmcr = htim->Instance->SMCR;
 800281a:	6802      	ldr	r2, [r0, #0]
 800281c:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800281e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002822:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
  htim->Instance->SMCR = tmpsmcr;
 8002826:	6093      	str	r3, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 8002828:	680b      	ldr	r3, [r1, #0]
 800282a:	2b60      	cmp	r3, #96	@ 0x60
 800282c:	d04c      	beq.n	80028c8 <HAL_TIM_ConfigClockSource+0xc6>
 800282e:	d823      	bhi.n	8002878 <HAL_TIM_ConfigClockSource+0x76>
 8002830:	2b40      	cmp	r3, #64	@ 0x40
 8002832:	d054      	beq.n	80028de <HAL_TIM_ConfigClockSource+0xdc>
 8002834:	d811      	bhi.n	800285a <HAL_TIM_ConfigClockSource+0x58>
 8002836:	2b20      	cmp	r3, #32
 8002838:	d003      	beq.n	8002842 <HAL_TIM_ConfigClockSource+0x40>
 800283a:	d80a      	bhi.n	8002852 <HAL_TIM_ConfigClockSource+0x50>
 800283c:	b10b      	cbz	r3, 8002842 <HAL_TIM_ConfigClockSource+0x40>
 800283e:	2b10      	cmp	r3, #16
 8002840:	d105      	bne.n	800284e <HAL_TIM_ConfigClockSource+0x4c>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002842:	4619      	mov	r1, r3
 8002844:	6820      	ldr	r0, [r4, #0]
 8002846:	f7ff fceb 	bl	8002220 <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 800284a:	2000      	movs	r0, #0
      break;
 800284c:	e028      	b.n	80028a0 <HAL_TIM_ConfigClockSource+0x9e>
      status = HAL_ERROR;
 800284e:	2001      	movs	r0, #1
 8002850:	e026      	b.n	80028a0 <HAL_TIM_ConfigClockSource+0x9e>
  switch (sClockSourceConfig->ClockSource)
 8002852:	2b30      	cmp	r3, #48	@ 0x30
 8002854:	d0f5      	beq.n	8002842 <HAL_TIM_ConfigClockSource+0x40>
      status = HAL_ERROR;
 8002856:	2001      	movs	r0, #1
 8002858:	e022      	b.n	80028a0 <HAL_TIM_ConfigClockSource+0x9e>
  switch (sClockSourceConfig->ClockSource)
 800285a:	2b50      	cmp	r3, #80	@ 0x50
 800285c:	d10a      	bne.n	8002874 <HAL_TIM_ConfigClockSource+0x72>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800285e:	68ca      	ldr	r2, [r1, #12]
 8002860:	6849      	ldr	r1, [r1, #4]
 8002862:	6800      	ldr	r0, [r0, #0]
 8002864:	f7ff fc64 	bl	8002130 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002868:	2150      	movs	r1, #80	@ 0x50
 800286a:	6820      	ldr	r0, [r4, #0]
 800286c:	f7ff fcd8 	bl	8002220 <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8002870:	2000      	movs	r0, #0
      break;
 8002872:	e015      	b.n	80028a0 <HAL_TIM_ConfigClockSource+0x9e>
      status = HAL_ERROR;
 8002874:	2001      	movs	r0, #1
 8002876:	e013      	b.n	80028a0 <HAL_TIM_ConfigClockSource+0x9e>
  switch (sClockSourceConfig->ClockSource)
 8002878:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800287c:	d03a      	beq.n	80028f4 <HAL_TIM_ConfigClockSource+0xf2>
 800287e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002882:	d014      	beq.n	80028ae <HAL_TIM_ConfigClockSource+0xac>
 8002884:	2b70      	cmp	r3, #112	@ 0x70
 8002886:	d137      	bne.n	80028f8 <HAL_TIM_ConfigClockSource+0xf6>
      TIM_ETR_SetConfig(htim->Instance,
 8002888:	68cb      	ldr	r3, [r1, #12]
 800288a:	684a      	ldr	r2, [r1, #4]
 800288c:	6889      	ldr	r1, [r1, #8]
 800288e:	6800      	ldr	r0, [r0, #0]
 8002890:	f7ff ffaa 	bl	80027e8 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002894:	6822      	ldr	r2, [r4, #0]
 8002896:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002898:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
      htim->Instance->SMCR = tmpsmcr;
 800289c:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 800289e:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 80028a0:	2301      	movs	r3, #1
 80028a2:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  __HAL_UNLOCK(htim);
 80028a6:	2300      	movs	r3, #0
 80028a8:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
}
 80028ac:	bd10      	pop	{r4, pc}
      TIM_ETR_SetConfig(htim->Instance,
 80028ae:	68cb      	ldr	r3, [r1, #12]
 80028b0:	684a      	ldr	r2, [r1, #4]
 80028b2:	6889      	ldr	r1, [r1, #8]
 80028b4:	6800      	ldr	r0, [r0, #0]
 80028b6:	f7ff ff97 	bl	80027e8 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80028ba:	6822      	ldr	r2, [r4, #0]
 80028bc:	6893      	ldr	r3, [r2, #8]
 80028be:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80028c2:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80028c4:	2000      	movs	r0, #0
      break;
 80028c6:	e7eb      	b.n	80028a0 <HAL_TIM_ConfigClockSource+0x9e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80028c8:	68ca      	ldr	r2, [r1, #12]
 80028ca:	6849      	ldr	r1, [r1, #4]
 80028cc:	6800      	ldr	r0, [r0, #0]
 80028ce:	f7ff fc5d 	bl	800218c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80028d2:	2160      	movs	r1, #96	@ 0x60
 80028d4:	6820      	ldr	r0, [r4, #0]
 80028d6:	f7ff fca3 	bl	8002220 <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 80028da:	2000      	movs	r0, #0
      break;
 80028dc:	e7e0      	b.n	80028a0 <HAL_TIM_ConfigClockSource+0x9e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80028de:	68ca      	ldr	r2, [r1, #12]
 80028e0:	6849      	ldr	r1, [r1, #4]
 80028e2:	6800      	ldr	r0, [r0, #0]
 80028e4:	f7ff fc24 	bl	8002130 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80028e8:	2140      	movs	r1, #64	@ 0x40
 80028ea:	6820      	ldr	r0, [r4, #0]
 80028ec:	f7ff fc98 	bl	8002220 <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 80028f0:	2000      	movs	r0, #0
      break;
 80028f2:	e7d5      	b.n	80028a0 <HAL_TIM_ConfigClockSource+0x9e>
  switch (sClockSourceConfig->ClockSource)
 80028f4:	2000      	movs	r0, #0
 80028f6:	e7d3      	b.n	80028a0 <HAL_TIM_ConfigClockSource+0x9e>
      status = HAL_ERROR;
 80028f8:	2001      	movs	r0, #1
 80028fa:	e7d1      	b.n	80028a0 <HAL_TIM_ConfigClockSource+0x9e>
  __HAL_LOCK(htim);
 80028fc:	2002      	movs	r0, #2
}
 80028fe:	4770      	bx	lr

08002900 <TIM_SlaveTimer_SetConfig>:
{
 8002900:	b510      	push	{r4, lr}
  tmpsmcr = htim->Instance->SMCR;
 8002902:	6804      	ldr	r4, [r0, #0]
 8002904:	68a2      	ldr	r2, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8002906:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
  tmpsmcr |= sSlaveConfig->InputTrigger;
 800290a:	684b      	ldr	r3, [r1, #4]
 800290c:	4313      	orrs	r3, r2
  tmpsmcr &= ~TIM_SMCR_SMS;
 800290e:	f023 0307 	bic.w	r3, r3, #7
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8002912:	680a      	ldr	r2, [r1, #0]
 8002914:	431a      	orrs	r2, r3
  htim->Instance->SMCR = tmpsmcr;
 8002916:	60a2      	str	r2, [r4, #8]
  switch (sSlaveConfig->InputTrigger)
 8002918:	684b      	ldr	r3, [r1, #4]
 800291a:	2b50      	cmp	r3, #80	@ 0x50
 800291c:	d030      	beq.n	8002980 <TIM_SlaveTimer_SetConfig+0x80>
 800291e:	d90b      	bls.n	8002938 <TIM_SlaveTimer_SetConfig+0x38>
 8002920:	2b60      	cmp	r3, #96	@ 0x60
 8002922:	d034      	beq.n	800298e <TIM_SlaveTimer_SetConfig+0x8e>
 8002924:	2b70      	cmp	r3, #112	@ 0x70
 8002926:	d143      	bne.n	80029b0 <TIM_SlaveTimer_SetConfig+0xb0>
      TIM_ETR_SetConfig(htim->Instance,
 8002928:	690b      	ldr	r3, [r1, #16]
 800292a:	688a      	ldr	r2, [r1, #8]
 800292c:	68c9      	ldr	r1, [r1, #12]
 800292e:	6800      	ldr	r0, [r0, #0]
 8002930:	f7ff ff5a 	bl	80027e8 <TIM_ETR_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8002934:	2000      	movs	r0, #0
}
 8002936:	bd10      	pop	{r4, pc}
  switch (sSlaveConfig->InputTrigger)
 8002938:	2b40      	cmp	r3, #64	@ 0x40
 800293a:	d00c      	beq.n	8002956 <TIM_SlaveTimer_SetConfig+0x56>
 800293c:	d82e      	bhi.n	800299c <TIM_SlaveTimer_SetConfig+0x9c>
 800293e:	2b20      	cmp	r3, #32
 8002940:	d02e      	beq.n	80029a0 <TIM_SlaveTimer_SetConfig+0xa0>
 8002942:	d804      	bhi.n	800294e <TIM_SlaveTimer_SetConfig+0x4e>
 8002944:	b373      	cbz	r3, 80029a4 <TIM_SlaveTimer_SetConfig+0xa4>
 8002946:	2b10      	cmp	r3, #16
 8002948:	d12e      	bne.n	80029a8 <TIM_SlaveTimer_SetConfig+0xa8>
 800294a:	2000      	movs	r0, #0
 800294c:	e7f3      	b.n	8002936 <TIM_SlaveTimer_SetConfig+0x36>
 800294e:	2b30      	cmp	r3, #48	@ 0x30
 8002950:	d12c      	bne.n	80029ac <TIM_SlaveTimer_SetConfig+0xac>
 8002952:	2000      	movs	r0, #0
 8002954:	e7ef      	b.n	8002936 <TIM_SlaveTimer_SetConfig+0x36>
      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8002956:	680b      	ldr	r3, [r1, #0]
 8002958:	2b05      	cmp	r3, #5
 800295a:	d02b      	beq.n	80029b4 <TIM_SlaveTimer_SetConfig+0xb4>
      tmpccer = htim->Instance->CCER;
 800295c:	6803      	ldr	r3, [r0, #0]
 800295e:	6a1c      	ldr	r4, [r3, #32]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8002960:	6a1a      	ldr	r2, [r3, #32]
 8002962:	f022 0201 	bic.w	r2, r2, #1
 8002966:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8002968:	6802      	ldr	r2, [r0, #0]
 800296a:	6993      	ldr	r3, [r2, #24]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800296c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8002970:	6909      	ldr	r1, [r1, #16]
 8002972:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
      htim->Instance->CCMR1 = tmpccmr1;
 8002976:	6193      	str	r3, [r2, #24]
      htim->Instance->CCER = tmpccer;
 8002978:	6803      	ldr	r3, [r0, #0]
 800297a:	621c      	str	r4, [r3, #32]
  HAL_StatusTypeDef status = HAL_OK;
 800297c:	2000      	movs	r0, #0
      break;
 800297e:	e7da      	b.n	8002936 <TIM_SlaveTimer_SetConfig+0x36>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002980:	690a      	ldr	r2, [r1, #16]
 8002982:	6889      	ldr	r1, [r1, #8]
 8002984:	6800      	ldr	r0, [r0, #0]
 8002986:	f7ff fbd3 	bl	8002130 <TIM_TI1_ConfigInputStage>
  HAL_StatusTypeDef status = HAL_OK;
 800298a:	2000      	movs	r0, #0
      break;
 800298c:	e7d3      	b.n	8002936 <TIM_SlaveTimer_SetConfig+0x36>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800298e:	690a      	ldr	r2, [r1, #16]
 8002990:	6889      	ldr	r1, [r1, #8]
 8002992:	6800      	ldr	r0, [r0, #0]
 8002994:	f7ff fbfa 	bl	800218c <TIM_TI2_ConfigInputStage>
  HAL_StatusTypeDef status = HAL_OK;
 8002998:	2000      	movs	r0, #0
      break;
 800299a:	e7cc      	b.n	8002936 <TIM_SlaveTimer_SetConfig+0x36>
      status = HAL_ERROR;
 800299c:	2001      	movs	r0, #1
 800299e:	e7ca      	b.n	8002936 <TIM_SlaveTimer_SetConfig+0x36>
  switch (sSlaveConfig->InputTrigger)
 80029a0:	2000      	movs	r0, #0
 80029a2:	e7c8      	b.n	8002936 <TIM_SlaveTimer_SetConfig+0x36>
 80029a4:	2000      	movs	r0, #0
 80029a6:	e7c6      	b.n	8002936 <TIM_SlaveTimer_SetConfig+0x36>
      status = HAL_ERROR;
 80029a8:	2001      	movs	r0, #1
 80029aa:	e7c4      	b.n	8002936 <TIM_SlaveTimer_SetConfig+0x36>
 80029ac:	2001      	movs	r0, #1
 80029ae:	e7c2      	b.n	8002936 <TIM_SlaveTimer_SetConfig+0x36>
 80029b0:	2001      	movs	r0, #1
 80029b2:	e7c0      	b.n	8002936 <TIM_SlaveTimer_SetConfig+0x36>
        return HAL_ERROR;
 80029b4:	2001      	movs	r0, #1
 80029b6:	e7be      	b.n	8002936 <TIM_SlaveTimer_SetConfig+0x36>

080029b8 <HAL_TIM_SlaveConfigSynchro>:
  __HAL_LOCK(htim);
 80029b8:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 80029bc:	2b01      	cmp	r3, #1
 80029be:	d022      	beq.n	8002a06 <HAL_TIM_SlaveConfigSynchro+0x4e>
{
 80029c0:	b510      	push	{r4, lr}
 80029c2:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 80029c4:	2301      	movs	r3, #1
 80029c6:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 80029ca:	2302      	movs	r3, #2
 80029cc:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 80029d0:	f7ff ff96 	bl	8002900 <TIM_SlaveTimer_SetConfig>
 80029d4:	b980      	cbnz	r0, 80029f8 <HAL_TIM_SlaveConfigSynchro+0x40>
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 80029d6:	6822      	ldr	r2, [r4, #0]
 80029d8:	68d3      	ldr	r3, [r2, #12]
 80029da:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80029de:	60d3      	str	r3, [r2, #12]
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 80029e0:	6822      	ldr	r2, [r4, #0]
 80029e2:	68d3      	ldr	r3, [r2, #12]
 80029e4:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80029e8:	60d3      	str	r3, [r2, #12]
  htim->State = HAL_TIM_STATE_READY;
 80029ea:	2301      	movs	r3, #1
 80029ec:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  __HAL_UNLOCK(htim);
 80029f0:	2300      	movs	r3, #0
 80029f2:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
}
 80029f6:	bd10      	pop	{r4, pc}
    htim->State = HAL_TIM_STATE_READY;
 80029f8:	2001      	movs	r0, #1
 80029fa:	f884 003d 	strb.w	r0, [r4, #61]	@ 0x3d
    __HAL_UNLOCK(htim);
 80029fe:	2300      	movs	r3, #0
 8002a00:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
    return HAL_ERROR;
 8002a04:	e7f7      	b.n	80029f6 <HAL_TIM_SlaveConfigSynchro+0x3e>
  __HAL_LOCK(htim);
 8002a06:	2002      	movs	r0, #2
}
 8002a08:	4770      	bx	lr

08002a0a <TIM_CCxChannelCmd>:

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002a0a:	f001 011f 	and.w	r1, r1, #31
 8002a0e:	f04f 0c01 	mov.w	ip, #1
 8002a12:	fa0c fc01 	lsl.w	ip, ip, r1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002a16:	6a03      	ldr	r3, [r0, #32]
 8002a18:	ea23 030c 	bic.w	r3, r3, ip
 8002a1c:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002a1e:	6a03      	ldr	r3, [r0, #32]
 8002a20:	408a      	lsls	r2, r1
 8002a22:	4313      	orrs	r3, r2
 8002a24:	6203      	str	r3, [r0, #32]
}
 8002a26:	4770      	bx	lr

08002a28 <HAL_TIM_PWM_Start>:
{
 8002a28:	b510      	push	{r4, lr}
 8002a2a:	4604      	mov	r4, r0
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002a2c:	4608      	mov	r0, r1
 8002a2e:	2900      	cmp	r1, #0
 8002a30:	d132      	bne.n	8002a98 <HAL_TIM_PWM_Start+0x70>
 8002a32:	f894 303e 	ldrb.w	r3, [r4, #62]	@ 0x3e
 8002a36:	b2db      	uxtb	r3, r3
 8002a38:	3b01      	subs	r3, #1
 8002a3a:	bf18      	it	ne
 8002a3c:	2301      	movne	r3, #1
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d163      	bne.n	8002b0a <HAL_TIM_PWM_Start+0xe2>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002a42:	2800      	cmp	r0, #0
 8002a44:	d141      	bne.n	8002aca <HAL_TIM_PWM_Start+0xa2>
 8002a46:	2302      	movs	r3, #2
 8002a48:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002a4c:	2201      	movs	r2, #1
 8002a4e:	4601      	mov	r1, r0
 8002a50:	6820      	ldr	r0, [r4, #0]
 8002a52:	f7ff ffda 	bl	8002a0a <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002a56:	6823      	ldr	r3, [r4, #0]
 8002a58:	4a2e      	ldr	r2, [pc, #184]	@ (8002b14 <HAL_TIM_PWM_Start+0xec>)
 8002a5a:	4293      	cmp	r3, r2
 8002a5c:	d045      	beq.n	8002aea <HAL_TIM_PWM_Start+0xc2>
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002a5e:	6823      	ldr	r3, [r4, #0]
 8002a60:	4a2c      	ldr	r2, [pc, #176]	@ (8002b14 <HAL_TIM_PWM_Start+0xec>)
 8002a62:	4293      	cmp	r3, r2
 8002a64:	d046      	beq.n	8002af4 <HAL_TIM_PWM_Start+0xcc>
 8002a66:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002a6a:	d043      	beq.n	8002af4 <HAL_TIM_PWM_Start+0xcc>
 8002a6c:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 8002a70:	4293      	cmp	r3, r2
 8002a72:	d03f      	beq.n	8002af4 <HAL_TIM_PWM_Start+0xcc>
 8002a74:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8002a78:	4293      	cmp	r3, r2
 8002a7a:	d03b      	beq.n	8002af4 <HAL_TIM_PWM_Start+0xcc>
 8002a7c:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8002a80:	4293      	cmp	r3, r2
 8002a82:	d037      	beq.n	8002af4 <HAL_TIM_PWM_Start+0xcc>
 8002a84:	f502 329a 	add.w	r2, r2, #78848	@ 0x13400
 8002a88:	4293      	cmp	r3, r2
 8002a8a:	d033      	beq.n	8002af4 <HAL_TIM_PWM_Start+0xcc>
    __HAL_TIM_ENABLE(htim);
 8002a8c:	681a      	ldr	r2, [r3, #0]
 8002a8e:	f042 0201 	orr.w	r2, r2, #1
 8002a92:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8002a94:	2000      	movs	r0, #0
 8002a96:	e037      	b.n	8002b08 <HAL_TIM_PWM_Start+0xe0>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002a98:	2904      	cmp	r1, #4
 8002a9a:	d008      	beq.n	8002aae <HAL_TIM_PWM_Start+0x86>
 8002a9c:	2908      	cmp	r1, #8
 8002a9e:	d00d      	beq.n	8002abc <HAL_TIM_PWM_Start+0x94>
 8002aa0:	f894 3041 	ldrb.w	r3, [r4, #65]	@ 0x41
 8002aa4:	b2db      	uxtb	r3, r3
 8002aa6:	3b01      	subs	r3, #1
 8002aa8:	bf18      	it	ne
 8002aaa:	2301      	movne	r3, #1
 8002aac:	e7c7      	b.n	8002a3e <HAL_TIM_PWM_Start+0x16>
 8002aae:	f894 303f 	ldrb.w	r3, [r4, #63]	@ 0x3f
 8002ab2:	b2db      	uxtb	r3, r3
 8002ab4:	3b01      	subs	r3, #1
 8002ab6:	bf18      	it	ne
 8002ab8:	2301      	movne	r3, #1
 8002aba:	e7c0      	b.n	8002a3e <HAL_TIM_PWM_Start+0x16>
 8002abc:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 8002ac0:	b2db      	uxtb	r3, r3
 8002ac2:	3b01      	subs	r3, #1
 8002ac4:	bf18      	it	ne
 8002ac6:	2301      	movne	r3, #1
 8002ac8:	e7b9      	b.n	8002a3e <HAL_TIM_PWM_Start+0x16>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002aca:	2804      	cmp	r0, #4
 8002acc:	d005      	beq.n	8002ada <HAL_TIM_PWM_Start+0xb2>
 8002ace:	2808      	cmp	r0, #8
 8002ad0:	d007      	beq.n	8002ae2 <HAL_TIM_PWM_Start+0xba>
 8002ad2:	2302      	movs	r3, #2
 8002ad4:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
 8002ad8:	e7b8      	b.n	8002a4c <HAL_TIM_PWM_Start+0x24>
 8002ada:	2302      	movs	r3, #2
 8002adc:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 8002ae0:	e7b4      	b.n	8002a4c <HAL_TIM_PWM_Start+0x24>
 8002ae2:	2302      	movs	r3, #2
 8002ae4:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 8002ae8:	e7b0      	b.n	8002a4c <HAL_TIM_PWM_Start+0x24>
    __HAL_TIM_MOE_ENABLE(htim);
 8002aea:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002aec:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002af0:	645a      	str	r2, [r3, #68]	@ 0x44
 8002af2:	e7b4      	b.n	8002a5e <HAL_TIM_PWM_Start+0x36>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002af4:	689a      	ldr	r2, [r3, #8]
 8002af6:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002afa:	2a06      	cmp	r2, #6
 8002afc:	d007      	beq.n	8002b0e <HAL_TIM_PWM_Start+0xe6>
      __HAL_TIM_ENABLE(htim);
 8002afe:	681a      	ldr	r2, [r3, #0]
 8002b00:	f042 0201 	orr.w	r2, r2, #1
 8002b04:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8002b06:	2000      	movs	r0, #0
}
 8002b08:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8002b0a:	2001      	movs	r0, #1
 8002b0c:	e7fc      	b.n	8002b08 <HAL_TIM_PWM_Start+0xe0>
  return HAL_OK;
 8002b0e:	2000      	movs	r0, #0
 8002b10:	e7fa      	b.n	8002b08 <HAL_TIM_PWM_Start+0xe0>
 8002b12:	bf00      	nop
 8002b14:	40010000 	.word	0x40010000

08002b18 <HAL_TIM_IC_Start>:
{
 8002b18:	b510      	push	{r4, lr}
 8002b1a:	4604      	mov	r4, r0
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8002b1c:	460b      	mov	r3, r1
 8002b1e:	bb91      	cbnz	r1, 8002b86 <HAL_TIM_IC_Start+0x6e>
 8002b20:	f890 003e 	ldrb.w	r0, [r0, #62]	@ 0x3e
 8002b24:	b2c0      	uxtb	r0, r0
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8002b26:	f894 2042 	ldrb.w	r2, [r4, #66]	@ 0x42
 8002b2a:	b2d2      	uxtb	r2, r2
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8002b2c:	2801      	cmp	r0, #1
 8002b2e:	d173      	bne.n	8002c18 <HAL_TIM_IC_Start+0x100>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8002b30:	2a01      	cmp	r2, #1
 8002b32:	d172      	bne.n	8002c1a <HAL_TIM_IC_Start+0x102>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d145      	bne.n	8002bc4 <HAL_TIM_IC_Start+0xac>
 8002b38:	2202      	movs	r2, #2
 8002b3a:	f884 203e 	strb.w	r2, [r4, #62]	@ 0x3e
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002b3e:	f884 2042 	strb.w	r2, [r4, #66]	@ 0x42
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002b42:	2201      	movs	r2, #1
 8002b44:	4619      	mov	r1, r3
 8002b46:	6820      	ldr	r0, [r4, #0]
 8002b48:	f7ff ff5f 	bl	8002a0a <TIM_CCxChannelCmd>
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002b4c:	6823      	ldr	r3, [r4, #0]
 8002b4e:	4a34      	ldr	r2, [pc, #208]	@ (8002c20 <HAL_TIM_IC_Start+0x108>)
 8002b50:	4293      	cmp	r3, r2
 8002b52:	d056      	beq.n	8002c02 <HAL_TIM_IC_Start+0xea>
 8002b54:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002b58:	d053      	beq.n	8002c02 <HAL_TIM_IC_Start+0xea>
 8002b5a:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 8002b5e:	4293      	cmp	r3, r2
 8002b60:	d04f      	beq.n	8002c02 <HAL_TIM_IC_Start+0xea>
 8002b62:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8002b66:	4293      	cmp	r3, r2
 8002b68:	d04b      	beq.n	8002c02 <HAL_TIM_IC_Start+0xea>
 8002b6a:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8002b6e:	4293      	cmp	r3, r2
 8002b70:	d047      	beq.n	8002c02 <HAL_TIM_IC_Start+0xea>
 8002b72:	f502 329a 	add.w	r2, r2, #78848	@ 0x13400
 8002b76:	4293      	cmp	r3, r2
 8002b78:	d043      	beq.n	8002c02 <HAL_TIM_IC_Start+0xea>
    __HAL_TIM_ENABLE(htim);
 8002b7a:	681a      	ldr	r2, [r3, #0]
 8002b7c:	f042 0201 	orr.w	r2, r2, #1
 8002b80:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8002b82:	2000      	movs	r0, #0
 8002b84:	e049      	b.n	8002c1a <HAL_TIM_IC_Start+0x102>
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8002b86:	2904      	cmp	r1, #4
 8002b88:	d00c      	beq.n	8002ba4 <HAL_TIM_IC_Start+0x8c>
 8002b8a:	2908      	cmp	r1, #8
 8002b8c:	d00e      	beq.n	8002bac <HAL_TIM_IC_Start+0x94>
 8002b8e:	f890 0041 	ldrb.w	r0, [r0, #65]	@ 0x41
 8002b92:	b2c0      	uxtb	r0, r0
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8002b94:	2b04      	cmp	r3, #4
 8002b96:	d00d      	beq.n	8002bb4 <HAL_TIM_IC_Start+0x9c>
 8002b98:	2b08      	cmp	r3, #8
 8002b9a:	d00f      	beq.n	8002bbc <HAL_TIM_IC_Start+0xa4>
 8002b9c:	f894 2045 	ldrb.w	r2, [r4, #69]	@ 0x45
 8002ba0:	b2d2      	uxtb	r2, r2
 8002ba2:	e7c3      	b.n	8002b2c <HAL_TIM_IC_Start+0x14>
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8002ba4:	f890 003f 	ldrb.w	r0, [r0, #63]	@ 0x3f
 8002ba8:	b2c0      	uxtb	r0, r0
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8002baa:	e7f3      	b.n	8002b94 <HAL_TIM_IC_Start+0x7c>
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8002bac:	f890 0040 	ldrb.w	r0, [r0, #64]	@ 0x40
 8002bb0:	b2c0      	uxtb	r0, r0
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8002bb2:	e7ef      	b.n	8002b94 <HAL_TIM_IC_Start+0x7c>
 8002bb4:	f894 2043 	ldrb.w	r2, [r4, #67]	@ 0x43
 8002bb8:	b2d2      	uxtb	r2, r2
 8002bba:	e7b7      	b.n	8002b2c <HAL_TIM_IC_Start+0x14>
 8002bbc:	f894 2044 	ldrb.w	r2, [r4, #68]	@ 0x44
 8002bc0:	b2d2      	uxtb	r2, r2
 8002bc2:	e7b3      	b.n	8002b2c <HAL_TIM_IC_Start+0x14>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002bc4:	2b04      	cmp	r3, #4
 8002bc6:	d00c      	beq.n	8002be2 <HAL_TIM_IC_Start+0xca>
 8002bc8:	2b08      	cmp	r3, #8
 8002bca:	d00e      	beq.n	8002bea <HAL_TIM_IC_Start+0xd2>
 8002bcc:	2202      	movs	r2, #2
 8002bce:	f884 2041 	strb.w	r2, [r4, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002bd2:	2b04      	cmp	r3, #4
 8002bd4:	d00d      	beq.n	8002bf2 <HAL_TIM_IC_Start+0xda>
 8002bd6:	2b08      	cmp	r3, #8
 8002bd8:	d00f      	beq.n	8002bfa <HAL_TIM_IC_Start+0xe2>
 8002bda:	2202      	movs	r2, #2
 8002bdc:	f884 2045 	strb.w	r2, [r4, #69]	@ 0x45
 8002be0:	e7af      	b.n	8002b42 <HAL_TIM_IC_Start+0x2a>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002be2:	2202      	movs	r2, #2
 8002be4:	f884 203f 	strb.w	r2, [r4, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002be8:	e7f3      	b.n	8002bd2 <HAL_TIM_IC_Start+0xba>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002bea:	2202      	movs	r2, #2
 8002bec:	f884 2040 	strb.w	r2, [r4, #64]	@ 0x40
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002bf0:	e7ef      	b.n	8002bd2 <HAL_TIM_IC_Start+0xba>
 8002bf2:	2202      	movs	r2, #2
 8002bf4:	f884 2043 	strb.w	r2, [r4, #67]	@ 0x43
 8002bf8:	e7a3      	b.n	8002b42 <HAL_TIM_IC_Start+0x2a>
 8002bfa:	2202      	movs	r2, #2
 8002bfc:	f884 2044 	strb.w	r2, [r4, #68]	@ 0x44
 8002c00:	e79f      	b.n	8002b42 <HAL_TIM_IC_Start+0x2a>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002c02:	689a      	ldr	r2, [r3, #8]
 8002c04:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c08:	2a06      	cmp	r2, #6
 8002c0a:	d007      	beq.n	8002c1c <HAL_TIM_IC_Start+0x104>
      __HAL_TIM_ENABLE(htim);
 8002c0c:	681a      	ldr	r2, [r3, #0]
 8002c0e:	f042 0201 	orr.w	r2, r2, #1
 8002c12:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8002c14:	2000      	movs	r0, #0
 8002c16:	e000      	b.n	8002c1a <HAL_TIM_IC_Start+0x102>
    return HAL_ERROR;
 8002c18:	2001      	movs	r0, #1
}
 8002c1a:	bd10      	pop	{r4, pc}
  return HAL_OK;
 8002c1c:	2000      	movs	r0, #0
 8002c1e:	e7fc      	b.n	8002c1a <HAL_TIM_IC_Start+0x102>
 8002c20:	40010000 	.word	0x40010000

08002c24 <HAL_TIM_IC_Start_IT>:
{
 8002c24:	b510      	push	{r4, lr}
 8002c26:	4604      	mov	r4, r0
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8002c28:	460b      	mov	r3, r1
 8002c2a:	2900      	cmp	r1, #0
 8002c2c:	d13b      	bne.n	8002ca6 <HAL_TIM_IC_Start_IT+0x82>
 8002c2e:	f890 003e 	ldrb.w	r0, [r0, #62]	@ 0x3e
 8002c32:	b2c0      	uxtb	r0, r0
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8002c34:	f894 2042 	ldrb.w	r2, [r4, #66]	@ 0x42
 8002c38:	b2d2      	uxtb	r2, r2
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8002c3a:	2801      	cmp	r0, #1
 8002c3c:	f040 80ab 	bne.w	8002d96 <HAL_TIM_IC_Start_IT+0x172>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8002c40:	2a01      	cmp	r2, #1
 8002c42:	f040 80a9 	bne.w	8002d98 <HAL_TIM_IC_Start_IT+0x174>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d14c      	bne.n	8002ce4 <HAL_TIM_IC_Start_IT+0xc0>
 8002c4a:	2202      	movs	r2, #2
 8002c4c:	f884 203e 	strb.w	r2, [r4, #62]	@ 0x3e
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002c50:	f884 2042 	strb.w	r2, [r4, #66]	@ 0x42
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8002c54:	6821      	ldr	r1, [r4, #0]
 8002c56:	68ca      	ldr	r2, [r1, #12]
 8002c58:	f042 0202 	orr.w	r2, r2, #2
 8002c5c:	60ca      	str	r2, [r1, #12]
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002c5e:	2201      	movs	r2, #1
 8002c60:	4619      	mov	r1, r3
 8002c62:	6820      	ldr	r0, [r4, #0]
 8002c64:	f7ff fed1 	bl	8002a0a <TIM_CCxChannelCmd>
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002c68:	6823      	ldr	r3, [r4, #0]
 8002c6a:	4a4e      	ldr	r2, [pc, #312]	@ (8002da4 <HAL_TIM_IC_Start_IT+0x180>)
 8002c6c:	4293      	cmp	r3, r2
 8002c6e:	f000 8087 	beq.w	8002d80 <HAL_TIM_IC_Start_IT+0x15c>
 8002c72:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002c76:	f000 8083 	beq.w	8002d80 <HAL_TIM_IC_Start_IT+0x15c>
 8002c7a:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 8002c7e:	4293      	cmp	r3, r2
 8002c80:	d07e      	beq.n	8002d80 <HAL_TIM_IC_Start_IT+0x15c>
 8002c82:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8002c86:	4293      	cmp	r3, r2
 8002c88:	d07a      	beq.n	8002d80 <HAL_TIM_IC_Start_IT+0x15c>
 8002c8a:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8002c8e:	4293      	cmp	r3, r2
 8002c90:	d076      	beq.n	8002d80 <HAL_TIM_IC_Start_IT+0x15c>
 8002c92:	f502 329a 	add.w	r2, r2, #78848	@ 0x13400
 8002c96:	4293      	cmp	r3, r2
 8002c98:	d072      	beq.n	8002d80 <HAL_TIM_IC_Start_IT+0x15c>
      __HAL_TIM_ENABLE(htim);
 8002c9a:	681a      	ldr	r2, [r3, #0]
 8002c9c:	f042 0201 	orr.w	r2, r2, #1
 8002ca0:	601a      	str	r2, [r3, #0]
 8002ca2:	2000      	movs	r0, #0
 8002ca4:	e078      	b.n	8002d98 <HAL_TIM_IC_Start_IT+0x174>
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8002ca6:	2904      	cmp	r1, #4
 8002ca8:	d00c      	beq.n	8002cc4 <HAL_TIM_IC_Start_IT+0xa0>
 8002caa:	2908      	cmp	r1, #8
 8002cac:	d00e      	beq.n	8002ccc <HAL_TIM_IC_Start_IT+0xa8>
 8002cae:	f890 0041 	ldrb.w	r0, [r0, #65]	@ 0x41
 8002cb2:	b2c0      	uxtb	r0, r0
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8002cb4:	2b04      	cmp	r3, #4
 8002cb6:	d00d      	beq.n	8002cd4 <HAL_TIM_IC_Start_IT+0xb0>
 8002cb8:	2b08      	cmp	r3, #8
 8002cba:	d00f      	beq.n	8002cdc <HAL_TIM_IC_Start_IT+0xb8>
 8002cbc:	f894 2045 	ldrb.w	r2, [r4, #69]	@ 0x45
 8002cc0:	b2d2      	uxtb	r2, r2
 8002cc2:	e7ba      	b.n	8002c3a <HAL_TIM_IC_Start_IT+0x16>
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8002cc4:	f890 003f 	ldrb.w	r0, [r0, #63]	@ 0x3f
 8002cc8:	b2c0      	uxtb	r0, r0
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8002cca:	e7f3      	b.n	8002cb4 <HAL_TIM_IC_Start_IT+0x90>
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8002ccc:	f890 0040 	ldrb.w	r0, [r0, #64]	@ 0x40
 8002cd0:	b2c0      	uxtb	r0, r0
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8002cd2:	e7ef      	b.n	8002cb4 <HAL_TIM_IC_Start_IT+0x90>
 8002cd4:	f894 2043 	ldrb.w	r2, [r4, #67]	@ 0x43
 8002cd8:	b2d2      	uxtb	r2, r2
 8002cda:	e7ae      	b.n	8002c3a <HAL_TIM_IC_Start_IT+0x16>
 8002cdc:	f894 2044 	ldrb.w	r2, [r4, #68]	@ 0x44
 8002ce0:	b2d2      	uxtb	r2, r2
 8002ce2:	e7aa      	b.n	8002c3a <HAL_TIM_IC_Start_IT+0x16>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002ce4:	2b04      	cmp	r3, #4
 8002ce6:	d02b      	beq.n	8002d40 <HAL_TIM_IC_Start_IT+0x11c>
 8002ce8:	2b08      	cmp	r3, #8
 8002cea:	d02d      	beq.n	8002d48 <HAL_TIM_IC_Start_IT+0x124>
 8002cec:	2102      	movs	r1, #2
 8002cee:	f884 1041 	strb.w	r1, [r4, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002cf2:	2b04      	cmp	r3, #4
 8002cf4:	d02c      	beq.n	8002d50 <HAL_TIM_IC_Start_IT+0x12c>
 8002cf6:	2b08      	cmp	r3, #8
 8002cf8:	d033      	beq.n	8002d62 <HAL_TIM_IC_Start_IT+0x13e>
 8002cfa:	2102      	movs	r1, #2
 8002cfc:	f884 1045 	strb.w	r1, [r4, #69]	@ 0x45
  switch (Channel)
 8002d00:	2b0c      	cmp	r3, #12
 8002d02:	d84a      	bhi.n	8002d9a <HAL_TIM_IC_Start_IT+0x176>
 8002d04:	a101      	add	r1, pc, #4	@ (adr r1, 8002d0c <HAL_TIM_IC_Start_IT+0xe8>)
 8002d06:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002d0a:	bf00      	nop
 8002d0c:	08002c55 	.word	0x08002c55
 8002d10:	08002d9b 	.word	0x08002d9b
 8002d14:	08002d9b 	.word	0x08002d9b
 8002d18:	08002d9b 	.word	0x08002d9b
 8002d1c:	08002d57 	.word	0x08002d57
 8002d20:	08002d9b 	.word	0x08002d9b
 8002d24:	08002d9b 	.word	0x08002d9b
 8002d28:	08002d9b 	.word	0x08002d9b
 8002d2c:	08002d69 	.word	0x08002d69
 8002d30:	08002d9b 	.word	0x08002d9b
 8002d34:	08002d9b 	.word	0x08002d9b
 8002d38:	08002d9b 	.word	0x08002d9b
 8002d3c:	08002d75 	.word	0x08002d75
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002d40:	2102      	movs	r1, #2
 8002d42:	f884 103f 	strb.w	r1, [r4, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002d46:	e7d4      	b.n	8002cf2 <HAL_TIM_IC_Start_IT+0xce>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002d48:	2102      	movs	r1, #2
 8002d4a:	f884 1040 	strb.w	r1, [r4, #64]	@ 0x40
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002d4e:	e7d0      	b.n	8002cf2 <HAL_TIM_IC_Start_IT+0xce>
 8002d50:	2202      	movs	r2, #2
 8002d52:	f884 2043 	strb.w	r2, [r4, #67]	@ 0x43
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8002d56:	6821      	ldr	r1, [r4, #0]
 8002d58:	68ca      	ldr	r2, [r1, #12]
 8002d5a:	f042 0204 	orr.w	r2, r2, #4
 8002d5e:	60ca      	str	r2, [r1, #12]
  if (status == HAL_OK)
 8002d60:	e77d      	b.n	8002c5e <HAL_TIM_IC_Start_IT+0x3a>
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002d62:	2202      	movs	r2, #2
 8002d64:	f884 2044 	strb.w	r2, [r4, #68]	@ 0x44
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8002d68:	6821      	ldr	r1, [r4, #0]
 8002d6a:	68ca      	ldr	r2, [r1, #12]
 8002d6c:	f042 0208 	orr.w	r2, r2, #8
 8002d70:	60ca      	str	r2, [r1, #12]
  if (status == HAL_OK)
 8002d72:	e774      	b.n	8002c5e <HAL_TIM_IC_Start_IT+0x3a>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8002d74:	6821      	ldr	r1, [r4, #0]
 8002d76:	68ca      	ldr	r2, [r1, #12]
 8002d78:	f042 0210 	orr.w	r2, r2, #16
 8002d7c:	60ca      	str	r2, [r1, #12]
  if (status == HAL_OK)
 8002d7e:	e76e      	b.n	8002c5e <HAL_TIM_IC_Start_IT+0x3a>
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002d80:	689a      	ldr	r2, [r3, #8]
 8002d82:	f002 0207 	and.w	r2, r2, #7
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d86:	2a06      	cmp	r2, #6
 8002d88:	d009      	beq.n	8002d9e <HAL_TIM_IC_Start_IT+0x17a>
        __HAL_TIM_ENABLE(htim);
 8002d8a:	681a      	ldr	r2, [r3, #0]
 8002d8c:	f042 0201 	orr.w	r2, r2, #1
 8002d90:	601a      	str	r2, [r3, #0]
 8002d92:	2000      	movs	r0, #0
 8002d94:	e000      	b.n	8002d98 <HAL_TIM_IC_Start_IT+0x174>
    return HAL_ERROR;
 8002d96:	2001      	movs	r0, #1
}
 8002d98:	bd10      	pop	{r4, pc}
  switch (Channel)
 8002d9a:	4610      	mov	r0, r2
 8002d9c:	e7fc      	b.n	8002d98 <HAL_TIM_IC_Start_IT+0x174>
 8002d9e:	2000      	movs	r0, #0
 8002da0:	e7fa      	b.n	8002d98 <HAL_TIM_IC_Start_IT+0x174>
 8002da2:	bf00      	nop
 8002da4:	40010000 	.word	0x40010000

08002da8 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002da8:	f890 203c 	ldrb.w	r2, [r0, #60]	@ 0x3c
 8002dac:	2a01      	cmp	r2, #1
 8002dae:	d035      	beq.n	8002e1c <HAL_TIMEx_MasterConfigSynchronization+0x74>
{
 8002db0:	b410      	push	{r4}
 8002db2:	4603      	mov	r3, r0
  __HAL_LOCK(htim);
 8002db4:	2201      	movs	r2, #1
 8002db6:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002dba:	2202      	movs	r2, #2
 8002dbc:	f880 203d 	strb.w	r2, [r0, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002dc0:	6802      	ldr	r2, [r0, #0]
 8002dc2:	6850      	ldr	r0, [r2, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002dc4:	6894      	ldr	r4, [r2, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002dc6:	f020 0c70 	bic.w	ip, r0, #112	@ 0x70
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002dca:	6808      	ldr	r0, [r1, #0]
 8002dcc:	ea40 000c 	orr.w	r0, r0, ip

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002dd0:	6050      	str	r0, [r2, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002dd2:	681a      	ldr	r2, [r3, #0]
 8002dd4:	4812      	ldr	r0, [pc, #72]	@ (8002e20 <HAL_TIMEx_MasterConfigSynchronization+0x78>)
 8002dd6:	4282      	cmp	r2, r0
 8002dd8:	d012      	beq.n	8002e00 <HAL_TIMEx_MasterConfigSynchronization+0x58>
 8002dda:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
 8002dde:	d00f      	beq.n	8002e00 <HAL_TIMEx_MasterConfigSynchronization+0x58>
 8002de0:	f5a0 407c 	sub.w	r0, r0, #64512	@ 0xfc00
 8002de4:	4282      	cmp	r2, r0
 8002de6:	d00b      	beq.n	8002e00 <HAL_TIMEx_MasterConfigSynchronization+0x58>
 8002de8:	f500 6080 	add.w	r0, r0, #1024	@ 0x400
 8002dec:	4282      	cmp	r2, r0
 8002dee:	d007      	beq.n	8002e00 <HAL_TIMEx_MasterConfigSynchronization+0x58>
 8002df0:	f500 6080 	add.w	r0, r0, #1024	@ 0x400
 8002df4:	4282      	cmp	r2, r0
 8002df6:	d003      	beq.n	8002e00 <HAL_TIMEx_MasterConfigSynchronization+0x58>
 8002df8:	f500 309a 	add.w	r0, r0, #78848	@ 0x13400
 8002dfc:	4282      	cmp	r2, r0
 8002dfe:	d104      	bne.n	8002e0a <HAL_TIMEx_MasterConfigSynchronization+0x62>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002e00:	f024 0480 	bic.w	r4, r4, #128	@ 0x80
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002e04:	6849      	ldr	r1, [r1, #4]
 8002e06:	4321      	orrs	r1, r4

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002e08:	6091      	str	r1, [r2, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002e0a:	2201      	movs	r2, #1
 8002e0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002e10:	2000      	movs	r0, #0
 8002e12:	f883 003c 	strb.w	r0, [r3, #60]	@ 0x3c

  return HAL_OK;
}
 8002e16:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002e1a:	4770      	bx	lr
  __HAL_LOCK(htim);
 8002e1c:	2002      	movs	r0, #2
}
 8002e1e:	4770      	bx	lr
 8002e20:	40010000 	.word	0x40010000

08002e24 <HAL_TIMEx_CommutCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002e24:	4770      	bx	lr

08002e26 <HAL_TIMEx_BreakCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002e26:	4770      	bx	lr

08002e28 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002e28:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e2a:	f102 030c 	add.w	r3, r2, #12
 8002e2e:	e853 3f00 	ldrex	r3, [r3]
 8002e32:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e36:	320c      	adds	r2, #12
 8002e38:	e842 3100 	strex	r1, r3, [r2]
 8002e3c:	2900      	cmp	r1, #0
 8002e3e:	d1f3      	bne.n	8002e28 <UART_EndRxTransfer>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002e40:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e42:	f102 0314 	add.w	r3, r2, #20
 8002e46:	e853 3f00 	ldrex	r3, [r3]
 8002e4a:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e4e:	3214      	adds	r2, #20
 8002e50:	e842 3100 	strex	r1, r3, [r2]
 8002e54:	2900      	cmp	r1, #0
 8002e56:	d1f3      	bne.n	8002e40 <UART_EndRxTransfer+0x18>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002e58:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8002e5a:	2b01      	cmp	r3, #1
 8002e5c:	d005      	beq.n	8002e6a <UART_EndRxTransfer+0x42>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002e5e:	2320      	movs	r3, #32
 8002e60:	f880 3042 	strb.w	r3, [r0, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002e64:	2300      	movs	r3, #0
 8002e66:	6303      	str	r3, [r0, #48]	@ 0x30
}
 8002e68:	4770      	bx	lr
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002e6a:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e6c:	f102 030c 	add.w	r3, r2, #12
 8002e70:	e853 3f00 	ldrex	r3, [r3]
 8002e74:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e78:	320c      	adds	r2, #12
 8002e7a:	e842 3100 	strex	r1, r3, [r2]
 8002e7e:	2900      	cmp	r1, #0
 8002e80:	d1f3      	bne.n	8002e6a <UART_EndRxTransfer+0x42>
 8002e82:	e7ec      	b.n	8002e5e <UART_EndRxTransfer+0x36>

08002e84 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002e84:	b510      	push	{r4, lr}
 8002e86:	4604      	mov	r4, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002e88:	6802      	ldr	r2, [r0, #0]
 8002e8a:	6913      	ldr	r3, [r2, #16]
 8002e8c:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002e90:	68c1      	ldr	r1, [r0, #12]
 8002e92:	430b      	orrs	r3, r1
 8002e94:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002e96:	6883      	ldr	r3, [r0, #8]
 8002e98:	6902      	ldr	r2, [r0, #16]
 8002e9a:	431a      	orrs	r2, r3
 8002e9c:	6943      	ldr	r3, [r0, #20]
 8002e9e:	431a      	orrs	r2, r3
 8002ea0:	69c3      	ldr	r3, [r0, #28]
 8002ea2:	431a      	orrs	r2, r3
  MODIFY_REG(huart->Instance->CR1,
 8002ea4:	6801      	ldr	r1, [r0, #0]
 8002ea6:	68cb      	ldr	r3, [r1, #12]
 8002ea8:	f423 4316 	bic.w	r3, r3, #38400	@ 0x9600
 8002eac:	f023 030c 	bic.w	r3, r3, #12
 8002eb0:	4313      	orrs	r3, r2
 8002eb2:	60cb      	str	r3, [r1, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002eb4:	6802      	ldr	r2, [r0, #0]
 8002eb6:	6953      	ldr	r3, [r2, #20]
 8002eb8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002ebc:	6981      	ldr	r1, [r0, #24]
 8002ebe:	430b      	orrs	r3, r1
 8002ec0:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002ec2:	6803      	ldr	r3, [r0, #0]
 8002ec4:	4a31      	ldr	r2, [pc, #196]	@ (8002f8c <UART_SetConfig+0x108>)
 8002ec6:	4293      	cmp	r3, r2
 8002ec8:	d006      	beq.n	8002ed8 <UART_SetConfig+0x54>
 8002eca:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8002ece:	4293      	cmp	r3, r2
 8002ed0:	d002      	beq.n	8002ed8 <UART_SetConfig+0x54>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002ed2:	f7ff f891 	bl	8001ff8 <HAL_RCC_GetPCLK1Freq>
 8002ed6:	e001      	b.n	8002edc <UART_SetConfig+0x58>
      pclk = HAL_RCC_GetPCLK2Freq();
 8002ed8:	f7ff f89e 	bl	8002018 <HAL_RCC_GetPCLK2Freq>
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002edc:	69e3      	ldr	r3, [r4, #28]
 8002ede:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002ee2:	d029      	beq.n	8002f38 <UART_SetConfig+0xb4>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002ee4:	2100      	movs	r1, #0
 8002ee6:	1803      	adds	r3, r0, r0
 8002ee8:	4149      	adcs	r1, r1
 8002eea:	181b      	adds	r3, r3, r0
 8002eec:	f141 0100 	adc.w	r1, r1, #0
 8002ef0:	00c9      	lsls	r1, r1, #3
 8002ef2:	ea41 7153 	orr.w	r1, r1, r3, lsr #29
 8002ef6:	00db      	lsls	r3, r3, #3
 8002ef8:	1818      	adds	r0, r3, r0
 8002efa:	6863      	ldr	r3, [r4, #4]
 8002efc:	ea4f 0283 	mov.w	r2, r3, lsl #2
 8002f00:	ea4f 7393 	mov.w	r3, r3, lsr #30
 8002f04:	f141 0100 	adc.w	r1, r1, #0
 8002f08:	f7fd fe56 	bl	8000bb8 <__aeabi_uldivmod>
 8002f0c:	4a20      	ldr	r2, [pc, #128]	@ (8002f90 <UART_SetConfig+0x10c>)
 8002f0e:	fba2 3100 	umull	r3, r1, r2, r0
 8002f12:	0949      	lsrs	r1, r1, #5
 8002f14:	2364      	movs	r3, #100	@ 0x64
 8002f16:	fb03 0311 	mls	r3, r3, r1, r0
 8002f1a:	011b      	lsls	r3, r3, #4
 8002f1c:	3332      	adds	r3, #50	@ 0x32
 8002f1e:	fba2 2303 	umull	r2, r3, r2, r3
 8002f22:	095b      	lsrs	r3, r3, #5
 8002f24:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8002f28:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8002f2c:	f003 030f 	and.w	r3, r3, #15
 8002f30:	6821      	ldr	r1, [r4, #0]
 8002f32:	4413      	add	r3, r2
 8002f34:	608b      	str	r3, [r1, #8]
  }
}
 8002f36:	bd10      	pop	{r4, pc}
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002f38:	2300      	movs	r3, #0
 8002f3a:	1802      	adds	r2, r0, r0
 8002f3c:	eb43 0103 	adc.w	r1, r3, r3
 8002f40:	1812      	adds	r2, r2, r0
 8002f42:	f141 0100 	adc.w	r1, r1, #0
 8002f46:	00c9      	lsls	r1, r1, #3
 8002f48:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002f4c:	00d2      	lsls	r2, r2, #3
 8002f4e:	1810      	adds	r0, r2, r0
 8002f50:	f141 0100 	adc.w	r1, r1, #0
 8002f54:	6862      	ldr	r2, [r4, #4]
 8002f56:	1892      	adds	r2, r2, r2
 8002f58:	415b      	adcs	r3, r3
 8002f5a:	f7fd fe2d 	bl	8000bb8 <__aeabi_uldivmod>
 8002f5e:	4a0c      	ldr	r2, [pc, #48]	@ (8002f90 <UART_SetConfig+0x10c>)
 8002f60:	fba2 3100 	umull	r3, r1, r2, r0
 8002f64:	0949      	lsrs	r1, r1, #5
 8002f66:	2364      	movs	r3, #100	@ 0x64
 8002f68:	fb03 0311 	mls	r3, r3, r1, r0
 8002f6c:	00db      	lsls	r3, r3, #3
 8002f6e:	3332      	adds	r3, #50	@ 0x32
 8002f70:	fba2 2303 	umull	r2, r3, r2, r3
 8002f74:	095b      	lsrs	r3, r3, #5
 8002f76:	005a      	lsls	r2, r3, #1
 8002f78:	f402 72f8 	and.w	r2, r2, #496	@ 0x1f0
 8002f7c:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8002f80:	f003 0307 	and.w	r3, r3, #7
 8002f84:	6821      	ldr	r1, [r4, #0]
 8002f86:	4413      	add	r3, r2
 8002f88:	608b      	str	r3, [r1, #8]
 8002f8a:	e7d4      	b.n	8002f36 <UART_SetConfig+0xb2>
 8002f8c:	40011000 	.word	0x40011000
 8002f90:	51eb851f 	.word	0x51eb851f

08002f94 <UART_WaitOnFlagUntilTimeout>:
{
 8002f94:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002f98:	b083      	sub	sp, #12
 8002f9a:	4605      	mov	r5, r0
 8002f9c:	460e      	mov	r6, r1
 8002f9e:	4617      	mov	r7, r2
 8002fa0:	4699      	mov	r9, r3
 8002fa2:	f8dd 8028 	ldr.w	r8, [sp, #40]	@ 0x28
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002fa6:	682b      	ldr	r3, [r5, #0]
 8002fa8:	681c      	ldr	r4, [r3, #0]
 8002faa:	ea36 0404 	bics.w	r4, r6, r4
 8002fae:	bf0c      	ite	eq
 8002fb0:	2401      	moveq	r4, #1
 8002fb2:	2400      	movne	r4, #0
 8002fb4:	42bc      	cmp	r4, r7
 8002fb6:	d128      	bne.n	800300a <UART_WaitOnFlagUntilTimeout+0x76>
    if (Timeout != HAL_MAX_DELAY)
 8002fb8:	f1b8 3fff 	cmp.w	r8, #4294967295	@ 0xffffffff
 8002fbc:	d0f3      	beq.n	8002fa6 <UART_WaitOnFlagUntilTimeout+0x12>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002fbe:	f7fe fb9f 	bl	8001700 <HAL_GetTick>
 8002fc2:	eba0 0009 	sub.w	r0, r0, r9
 8002fc6:	4540      	cmp	r0, r8
 8002fc8:	d823      	bhi.n	8003012 <UART_WaitOnFlagUntilTimeout+0x7e>
 8002fca:	f1b8 0f00 	cmp.w	r8, #0
 8002fce:	d022      	beq.n	8003016 <UART_WaitOnFlagUntilTimeout+0x82>
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002fd0:	682b      	ldr	r3, [r5, #0]
 8002fd2:	68da      	ldr	r2, [r3, #12]
 8002fd4:	f012 0f04 	tst.w	r2, #4
 8002fd8:	d0e5      	beq.n	8002fa6 <UART_WaitOnFlagUntilTimeout+0x12>
 8002fda:	2e80      	cmp	r6, #128	@ 0x80
 8002fdc:	d0e3      	beq.n	8002fa6 <UART_WaitOnFlagUntilTimeout+0x12>
 8002fde:	2e40      	cmp	r6, #64	@ 0x40
 8002fe0:	d0e1      	beq.n	8002fa6 <UART_WaitOnFlagUntilTimeout+0x12>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002fe2:	681a      	ldr	r2, [r3, #0]
 8002fe4:	f012 0f08 	tst.w	r2, #8
 8002fe8:	d0dd      	beq.n	8002fa6 <UART_WaitOnFlagUntilTimeout+0x12>
          __HAL_UART_CLEAR_OREFLAG(huart);
 8002fea:	2400      	movs	r4, #0
 8002fec:	9401      	str	r4, [sp, #4]
 8002fee:	681a      	ldr	r2, [r3, #0]
 8002ff0:	9201      	str	r2, [sp, #4]
 8002ff2:	685b      	ldr	r3, [r3, #4]
 8002ff4:	9301      	str	r3, [sp, #4]
 8002ff6:	9b01      	ldr	r3, [sp, #4]
          UART_EndRxTransfer(huart);
 8002ff8:	4628      	mov	r0, r5
 8002ffa:	f7ff ff15 	bl	8002e28 <UART_EndRxTransfer>
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002ffe:	2308      	movs	r3, #8
 8003000:	646b      	str	r3, [r5, #68]	@ 0x44
          __HAL_UNLOCK(huart);
 8003002:	f885 4040 	strb.w	r4, [r5, #64]	@ 0x40
          return HAL_ERROR;
 8003006:	2001      	movs	r0, #1
 8003008:	e000      	b.n	800300c <UART_WaitOnFlagUntilTimeout+0x78>
  return HAL_OK;
 800300a:	2000      	movs	r0, #0
}
 800300c:	b003      	add	sp, #12
 800300e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        return HAL_TIMEOUT;
 8003012:	2003      	movs	r0, #3
 8003014:	e7fa      	b.n	800300c <UART_WaitOnFlagUntilTimeout+0x78>
 8003016:	2003      	movs	r0, #3
 8003018:	e7f8      	b.n	800300c <UART_WaitOnFlagUntilTimeout+0x78>

0800301a <HAL_UART_Init>:
  if (huart == NULL)
 800301a:	b360      	cbz	r0, 8003076 <HAL_UART_Init+0x5c>
{
 800301c:	b510      	push	{r4, lr}
 800301e:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 8003020:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 8003024:	b313      	cbz	r3, 800306c <HAL_UART_Init+0x52>
  huart->gState = HAL_UART_STATE_BUSY;
 8003026:	2324      	movs	r3, #36	@ 0x24
 8003028:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  __HAL_UART_DISABLE(huart);
 800302c:	6822      	ldr	r2, [r4, #0]
 800302e:	68d3      	ldr	r3, [r2, #12]
 8003030:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003034:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8003036:	4620      	mov	r0, r4
 8003038:	f7ff ff24 	bl	8002e84 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800303c:	6822      	ldr	r2, [r4, #0]
 800303e:	6913      	ldr	r3, [r2, #16]
 8003040:	f423 4390 	bic.w	r3, r3, #18432	@ 0x4800
 8003044:	6113      	str	r3, [r2, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003046:	6822      	ldr	r2, [r4, #0]
 8003048:	6953      	ldr	r3, [r2, #20]
 800304a:	f023 032a 	bic.w	r3, r3, #42	@ 0x2a
 800304e:	6153      	str	r3, [r2, #20]
  __HAL_UART_ENABLE(huart);
 8003050:	6822      	ldr	r2, [r4, #0]
 8003052:	68d3      	ldr	r3, [r2, #12]
 8003054:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8003058:	60d3      	str	r3, [r2, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800305a:	2000      	movs	r0, #0
 800305c:	6460      	str	r0, [r4, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800305e:	2320      	movs	r3, #32
 8003060:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003064:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003068:	6360      	str	r0, [r4, #52]	@ 0x34
}
 800306a:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 800306c:	f880 3040 	strb.w	r3, [r0, #64]	@ 0x40
    HAL_UART_MspInit(huart);
 8003070:	f7fe fa28 	bl	80014c4 <HAL_UART_MspInit>
 8003074:	e7d7      	b.n	8003026 <HAL_UART_Init+0xc>
    return HAL_ERROR;
 8003076:	2001      	movs	r0, #1
}
 8003078:	4770      	bx	lr

0800307a <HAL_UART_Transmit>:
{
 800307a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800307e:	b082      	sub	sp, #8
 8003080:	461e      	mov	r6, r3
  if (huart->gState == HAL_UART_STATE_READY)
 8003082:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 8003086:	b2db      	uxtb	r3, r3
 8003088:	2b20      	cmp	r3, #32
 800308a:	d156      	bne.n	800313a <HAL_UART_Transmit+0xc0>
 800308c:	4604      	mov	r4, r0
 800308e:	460d      	mov	r5, r1
 8003090:	4690      	mov	r8, r2
    if ((pData == NULL) || (Size == 0U))
 8003092:	2900      	cmp	r1, #0
 8003094:	d055      	beq.n	8003142 <HAL_UART_Transmit+0xc8>
 8003096:	b90a      	cbnz	r2, 800309c <HAL_UART_Transmit+0x22>
      return  HAL_ERROR;
 8003098:	2001      	movs	r0, #1
 800309a:	e04f      	b.n	800313c <HAL_UART_Transmit+0xc2>
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800309c:	2300      	movs	r3, #0
 800309e:	6443      	str	r3, [r0, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80030a0:	2321      	movs	r3, #33	@ 0x21
 80030a2:	f880 3041 	strb.w	r3, [r0, #65]	@ 0x41
    tickstart = HAL_GetTick();
 80030a6:	f7fe fb2b 	bl	8001700 <HAL_GetTick>
 80030aa:	4607      	mov	r7, r0
    huart->TxXferSize = Size;
 80030ac:	f8a4 8024 	strh.w	r8, [r4, #36]	@ 0x24
    huart->TxXferCount = Size;
 80030b0:	f8a4 8026 	strh.w	r8, [r4, #38]	@ 0x26
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80030b4:	68a3      	ldr	r3, [r4, #8]
 80030b6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80030ba:	d002      	beq.n	80030c2 <HAL_UART_Transmit+0x48>
      pdata16bits = NULL;
 80030bc:	f04f 0800 	mov.w	r8, #0
 80030c0:	e014      	b.n	80030ec <HAL_UART_Transmit+0x72>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80030c2:	6923      	ldr	r3, [r4, #16]
 80030c4:	b32b      	cbz	r3, 8003112 <HAL_UART_Transmit+0x98>
      pdata16bits = NULL;
 80030c6:	f04f 0800 	mov.w	r8, #0
 80030ca:	e00f      	b.n	80030ec <HAL_UART_Transmit+0x72>
        huart->gState = HAL_UART_STATE_READY;
 80030cc:	2320      	movs	r3, #32
 80030ce:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
        return HAL_TIMEOUT;
 80030d2:	2003      	movs	r0, #3
 80030d4:	e032      	b.n	800313c <HAL_UART_Transmit+0xc2>
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80030d6:	f838 3b02 	ldrh.w	r3, [r8], #2
 80030da:	6822      	ldr	r2, [r4, #0]
 80030dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80030e0:	6053      	str	r3, [r2, #4]
      huart->TxXferCount--;
 80030e2:	8ce2      	ldrh	r2, [r4, #38]	@ 0x26
 80030e4:	b292      	uxth	r2, r2
 80030e6:	3a01      	subs	r2, #1
 80030e8:	b292      	uxth	r2, r2
 80030ea:	84e2      	strh	r2, [r4, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80030ec:	8ce3      	ldrh	r3, [r4, #38]	@ 0x26
 80030ee:	b29b      	uxth	r3, r3
 80030f0:	b193      	cbz	r3, 8003118 <HAL_UART_Transmit+0x9e>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80030f2:	9600      	str	r6, [sp, #0]
 80030f4:	463b      	mov	r3, r7
 80030f6:	2200      	movs	r2, #0
 80030f8:	2180      	movs	r1, #128	@ 0x80
 80030fa:	4620      	mov	r0, r4
 80030fc:	f7ff ff4a 	bl	8002f94 <UART_WaitOnFlagUntilTimeout>
 8003100:	2800      	cmp	r0, #0
 8003102:	d1e3      	bne.n	80030cc <HAL_UART_Transmit+0x52>
      if (pdata8bits == NULL)
 8003104:	2d00      	cmp	r5, #0
 8003106:	d0e6      	beq.n	80030d6 <HAL_UART_Transmit+0x5c>
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003108:	f815 2b01 	ldrb.w	r2, [r5], #1
 800310c:	6823      	ldr	r3, [r4, #0]
 800310e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003110:	e7e7      	b.n	80030e2 <HAL_UART_Transmit+0x68>
      pdata16bits = (const uint16_t *) pData;
 8003112:	46a8      	mov	r8, r5
      pdata8bits  = NULL;
 8003114:	2500      	movs	r5, #0
 8003116:	e7e9      	b.n	80030ec <HAL_UART_Transmit+0x72>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003118:	9600      	str	r6, [sp, #0]
 800311a:	463b      	mov	r3, r7
 800311c:	2200      	movs	r2, #0
 800311e:	2140      	movs	r1, #64	@ 0x40
 8003120:	4620      	mov	r0, r4
 8003122:	f7ff ff37 	bl	8002f94 <UART_WaitOnFlagUntilTimeout>
 8003126:	b918      	cbnz	r0, 8003130 <HAL_UART_Transmit+0xb6>
    huart->gState = HAL_UART_STATE_READY;
 8003128:	2320      	movs	r3, #32
 800312a:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
    return HAL_OK;
 800312e:	e005      	b.n	800313c <HAL_UART_Transmit+0xc2>
      huart->gState = HAL_UART_STATE_READY;
 8003130:	2320      	movs	r3, #32
 8003132:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
      return HAL_TIMEOUT;
 8003136:	2003      	movs	r0, #3
 8003138:	e000      	b.n	800313c <HAL_UART_Transmit+0xc2>
    return HAL_BUSY;
 800313a:	2002      	movs	r0, #2
}
 800313c:	b002      	add	sp, #8
 800313e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      return  HAL_ERROR;
 8003142:	2001      	movs	r0, #1
 8003144:	e7fa      	b.n	800313c <HAL_UART_Transmit+0xc2>

08003146 <__cvt>:
 8003146:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800314a:	ec57 6b10 	vmov	r6, r7, d0
 800314e:	2f00      	cmp	r7, #0
 8003150:	460c      	mov	r4, r1
 8003152:	4619      	mov	r1, r3
 8003154:	463b      	mov	r3, r7
 8003156:	bfbb      	ittet	lt
 8003158:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800315c:	461f      	movlt	r7, r3
 800315e:	2300      	movge	r3, #0
 8003160:	232d      	movlt	r3, #45	@ 0x2d
 8003162:	700b      	strb	r3, [r1, #0]
 8003164:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8003166:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800316a:	4691      	mov	r9, r2
 800316c:	f023 0820 	bic.w	r8, r3, #32
 8003170:	bfbc      	itt	lt
 8003172:	4632      	movlt	r2, r6
 8003174:	4616      	movlt	r6, r2
 8003176:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800317a:	d005      	beq.n	8003188 <__cvt+0x42>
 800317c:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8003180:	d100      	bne.n	8003184 <__cvt+0x3e>
 8003182:	3401      	adds	r4, #1
 8003184:	2102      	movs	r1, #2
 8003186:	e000      	b.n	800318a <__cvt+0x44>
 8003188:	2103      	movs	r1, #3
 800318a:	ab03      	add	r3, sp, #12
 800318c:	9301      	str	r3, [sp, #4]
 800318e:	ab02      	add	r3, sp, #8
 8003190:	9300      	str	r3, [sp, #0]
 8003192:	ec47 6b10 	vmov	d0, r6, r7
 8003196:	4653      	mov	r3, sl
 8003198:	4622      	mov	r2, r4
 800319a:	f000 fe51 	bl	8003e40 <_dtoa_r>
 800319e:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80031a2:	4605      	mov	r5, r0
 80031a4:	d119      	bne.n	80031da <__cvt+0x94>
 80031a6:	f019 0f01 	tst.w	r9, #1
 80031aa:	d00e      	beq.n	80031ca <__cvt+0x84>
 80031ac:	eb00 0904 	add.w	r9, r0, r4
 80031b0:	2200      	movs	r2, #0
 80031b2:	2300      	movs	r3, #0
 80031b4:	4630      	mov	r0, r6
 80031b6:	4639      	mov	r1, r7
 80031b8:	f7fd fc8e 	bl	8000ad8 <__aeabi_dcmpeq>
 80031bc:	b108      	cbz	r0, 80031c2 <__cvt+0x7c>
 80031be:	f8cd 900c 	str.w	r9, [sp, #12]
 80031c2:	2230      	movs	r2, #48	@ 0x30
 80031c4:	9b03      	ldr	r3, [sp, #12]
 80031c6:	454b      	cmp	r3, r9
 80031c8:	d31e      	bcc.n	8003208 <__cvt+0xc2>
 80031ca:	9b03      	ldr	r3, [sp, #12]
 80031cc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80031ce:	1b5b      	subs	r3, r3, r5
 80031d0:	4628      	mov	r0, r5
 80031d2:	6013      	str	r3, [r2, #0]
 80031d4:	b004      	add	sp, #16
 80031d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80031da:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80031de:	eb00 0904 	add.w	r9, r0, r4
 80031e2:	d1e5      	bne.n	80031b0 <__cvt+0x6a>
 80031e4:	7803      	ldrb	r3, [r0, #0]
 80031e6:	2b30      	cmp	r3, #48	@ 0x30
 80031e8:	d10a      	bne.n	8003200 <__cvt+0xba>
 80031ea:	2200      	movs	r2, #0
 80031ec:	2300      	movs	r3, #0
 80031ee:	4630      	mov	r0, r6
 80031f0:	4639      	mov	r1, r7
 80031f2:	f7fd fc71 	bl	8000ad8 <__aeabi_dcmpeq>
 80031f6:	b918      	cbnz	r0, 8003200 <__cvt+0xba>
 80031f8:	f1c4 0401 	rsb	r4, r4, #1
 80031fc:	f8ca 4000 	str.w	r4, [sl]
 8003200:	f8da 3000 	ldr.w	r3, [sl]
 8003204:	4499      	add	r9, r3
 8003206:	e7d3      	b.n	80031b0 <__cvt+0x6a>
 8003208:	1c59      	adds	r1, r3, #1
 800320a:	9103      	str	r1, [sp, #12]
 800320c:	701a      	strb	r2, [r3, #0]
 800320e:	e7d9      	b.n	80031c4 <__cvt+0x7e>

08003210 <__exponent>:
 8003210:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003212:	2900      	cmp	r1, #0
 8003214:	bfba      	itte	lt
 8003216:	4249      	neglt	r1, r1
 8003218:	232d      	movlt	r3, #45	@ 0x2d
 800321a:	232b      	movge	r3, #43	@ 0x2b
 800321c:	2909      	cmp	r1, #9
 800321e:	7002      	strb	r2, [r0, #0]
 8003220:	7043      	strb	r3, [r0, #1]
 8003222:	dd29      	ble.n	8003278 <__exponent+0x68>
 8003224:	f10d 0307 	add.w	r3, sp, #7
 8003228:	461d      	mov	r5, r3
 800322a:	270a      	movs	r7, #10
 800322c:	461a      	mov	r2, r3
 800322e:	fbb1 f6f7 	udiv	r6, r1, r7
 8003232:	fb07 1416 	mls	r4, r7, r6, r1
 8003236:	3430      	adds	r4, #48	@ 0x30
 8003238:	f802 4c01 	strb.w	r4, [r2, #-1]
 800323c:	460c      	mov	r4, r1
 800323e:	2c63      	cmp	r4, #99	@ 0x63
 8003240:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 8003244:	4631      	mov	r1, r6
 8003246:	dcf1      	bgt.n	800322c <__exponent+0x1c>
 8003248:	3130      	adds	r1, #48	@ 0x30
 800324a:	1e94      	subs	r4, r2, #2
 800324c:	f803 1c01 	strb.w	r1, [r3, #-1]
 8003250:	1c41      	adds	r1, r0, #1
 8003252:	4623      	mov	r3, r4
 8003254:	42ab      	cmp	r3, r5
 8003256:	d30a      	bcc.n	800326e <__exponent+0x5e>
 8003258:	f10d 0309 	add.w	r3, sp, #9
 800325c:	1a9b      	subs	r3, r3, r2
 800325e:	42ac      	cmp	r4, r5
 8003260:	bf88      	it	hi
 8003262:	2300      	movhi	r3, #0
 8003264:	3302      	adds	r3, #2
 8003266:	4403      	add	r3, r0
 8003268:	1a18      	subs	r0, r3, r0
 800326a:	b003      	add	sp, #12
 800326c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800326e:	f813 6b01 	ldrb.w	r6, [r3], #1
 8003272:	f801 6f01 	strb.w	r6, [r1, #1]!
 8003276:	e7ed      	b.n	8003254 <__exponent+0x44>
 8003278:	2330      	movs	r3, #48	@ 0x30
 800327a:	3130      	adds	r1, #48	@ 0x30
 800327c:	7083      	strb	r3, [r0, #2]
 800327e:	70c1      	strb	r1, [r0, #3]
 8003280:	1d03      	adds	r3, r0, #4
 8003282:	e7f1      	b.n	8003268 <__exponent+0x58>

08003284 <_printf_float>:
 8003284:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003288:	b08d      	sub	sp, #52	@ 0x34
 800328a:	460c      	mov	r4, r1
 800328c:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8003290:	4616      	mov	r6, r2
 8003292:	461f      	mov	r7, r3
 8003294:	4605      	mov	r5, r0
 8003296:	f000 fcd3 	bl	8003c40 <_localeconv_r>
 800329a:	6803      	ldr	r3, [r0, #0]
 800329c:	9304      	str	r3, [sp, #16]
 800329e:	4618      	mov	r0, r3
 80032a0:	f7fc ffee 	bl	8000280 <strlen>
 80032a4:	2300      	movs	r3, #0
 80032a6:	930a      	str	r3, [sp, #40]	@ 0x28
 80032a8:	f8d8 3000 	ldr.w	r3, [r8]
 80032ac:	9005      	str	r0, [sp, #20]
 80032ae:	3307      	adds	r3, #7
 80032b0:	f023 0307 	bic.w	r3, r3, #7
 80032b4:	f103 0208 	add.w	r2, r3, #8
 80032b8:	f894 a018 	ldrb.w	sl, [r4, #24]
 80032bc:	f8d4 b000 	ldr.w	fp, [r4]
 80032c0:	f8c8 2000 	str.w	r2, [r8]
 80032c4:	e9d3 8900 	ldrd	r8, r9, [r3]
 80032c8:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80032cc:	9307      	str	r3, [sp, #28]
 80032ce:	f8cd 8018 	str.w	r8, [sp, #24]
 80032d2:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80032d6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80032da:	4b9c      	ldr	r3, [pc, #624]	@ (800354c <_printf_float+0x2c8>)
 80032dc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80032e0:	f7fd fc2c 	bl	8000b3c <__aeabi_dcmpun>
 80032e4:	bb70      	cbnz	r0, 8003344 <_printf_float+0xc0>
 80032e6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80032ea:	4b98      	ldr	r3, [pc, #608]	@ (800354c <_printf_float+0x2c8>)
 80032ec:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80032f0:	f7fd fc06 	bl	8000b00 <__aeabi_dcmple>
 80032f4:	bb30      	cbnz	r0, 8003344 <_printf_float+0xc0>
 80032f6:	2200      	movs	r2, #0
 80032f8:	2300      	movs	r3, #0
 80032fa:	4640      	mov	r0, r8
 80032fc:	4649      	mov	r1, r9
 80032fe:	f7fd fbf5 	bl	8000aec <__aeabi_dcmplt>
 8003302:	b110      	cbz	r0, 800330a <_printf_float+0x86>
 8003304:	232d      	movs	r3, #45	@ 0x2d
 8003306:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800330a:	4a91      	ldr	r2, [pc, #580]	@ (8003550 <_printf_float+0x2cc>)
 800330c:	4b91      	ldr	r3, [pc, #580]	@ (8003554 <_printf_float+0x2d0>)
 800330e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8003312:	bf8c      	ite	hi
 8003314:	4690      	movhi	r8, r2
 8003316:	4698      	movls	r8, r3
 8003318:	2303      	movs	r3, #3
 800331a:	6123      	str	r3, [r4, #16]
 800331c:	f02b 0304 	bic.w	r3, fp, #4
 8003320:	6023      	str	r3, [r4, #0]
 8003322:	f04f 0900 	mov.w	r9, #0
 8003326:	9700      	str	r7, [sp, #0]
 8003328:	4633      	mov	r3, r6
 800332a:	aa0b      	add	r2, sp, #44	@ 0x2c
 800332c:	4621      	mov	r1, r4
 800332e:	4628      	mov	r0, r5
 8003330:	f000 f9d2 	bl	80036d8 <_printf_common>
 8003334:	3001      	adds	r0, #1
 8003336:	f040 808d 	bne.w	8003454 <_printf_float+0x1d0>
 800333a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800333e:	b00d      	add	sp, #52	@ 0x34
 8003340:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003344:	4642      	mov	r2, r8
 8003346:	464b      	mov	r3, r9
 8003348:	4640      	mov	r0, r8
 800334a:	4649      	mov	r1, r9
 800334c:	f7fd fbf6 	bl	8000b3c <__aeabi_dcmpun>
 8003350:	b140      	cbz	r0, 8003364 <_printf_float+0xe0>
 8003352:	464b      	mov	r3, r9
 8003354:	2b00      	cmp	r3, #0
 8003356:	bfbc      	itt	lt
 8003358:	232d      	movlt	r3, #45	@ 0x2d
 800335a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800335e:	4a7e      	ldr	r2, [pc, #504]	@ (8003558 <_printf_float+0x2d4>)
 8003360:	4b7e      	ldr	r3, [pc, #504]	@ (800355c <_printf_float+0x2d8>)
 8003362:	e7d4      	b.n	800330e <_printf_float+0x8a>
 8003364:	6863      	ldr	r3, [r4, #4]
 8003366:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800336a:	9206      	str	r2, [sp, #24]
 800336c:	1c5a      	adds	r2, r3, #1
 800336e:	d13b      	bne.n	80033e8 <_printf_float+0x164>
 8003370:	2306      	movs	r3, #6
 8003372:	6063      	str	r3, [r4, #4]
 8003374:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8003378:	2300      	movs	r3, #0
 800337a:	6022      	str	r2, [r4, #0]
 800337c:	9303      	str	r3, [sp, #12]
 800337e:	ab0a      	add	r3, sp, #40	@ 0x28
 8003380:	e9cd a301 	strd	sl, r3, [sp, #4]
 8003384:	ab09      	add	r3, sp, #36	@ 0x24
 8003386:	9300      	str	r3, [sp, #0]
 8003388:	6861      	ldr	r1, [r4, #4]
 800338a:	ec49 8b10 	vmov	d0, r8, r9
 800338e:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8003392:	4628      	mov	r0, r5
 8003394:	f7ff fed7 	bl	8003146 <__cvt>
 8003398:	9b06      	ldr	r3, [sp, #24]
 800339a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800339c:	2b47      	cmp	r3, #71	@ 0x47
 800339e:	4680      	mov	r8, r0
 80033a0:	d129      	bne.n	80033f6 <_printf_float+0x172>
 80033a2:	1cc8      	adds	r0, r1, #3
 80033a4:	db02      	blt.n	80033ac <_printf_float+0x128>
 80033a6:	6863      	ldr	r3, [r4, #4]
 80033a8:	4299      	cmp	r1, r3
 80033aa:	dd41      	ble.n	8003430 <_printf_float+0x1ac>
 80033ac:	f1aa 0a02 	sub.w	sl, sl, #2
 80033b0:	fa5f fa8a 	uxtb.w	sl, sl
 80033b4:	3901      	subs	r1, #1
 80033b6:	4652      	mov	r2, sl
 80033b8:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80033bc:	9109      	str	r1, [sp, #36]	@ 0x24
 80033be:	f7ff ff27 	bl	8003210 <__exponent>
 80033c2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80033c4:	1813      	adds	r3, r2, r0
 80033c6:	2a01      	cmp	r2, #1
 80033c8:	4681      	mov	r9, r0
 80033ca:	6123      	str	r3, [r4, #16]
 80033cc:	dc02      	bgt.n	80033d4 <_printf_float+0x150>
 80033ce:	6822      	ldr	r2, [r4, #0]
 80033d0:	07d2      	lsls	r2, r2, #31
 80033d2:	d501      	bpl.n	80033d8 <_printf_float+0x154>
 80033d4:	3301      	adds	r3, #1
 80033d6:	6123      	str	r3, [r4, #16]
 80033d8:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d0a2      	beq.n	8003326 <_printf_float+0xa2>
 80033e0:	232d      	movs	r3, #45	@ 0x2d
 80033e2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80033e6:	e79e      	b.n	8003326 <_printf_float+0xa2>
 80033e8:	9a06      	ldr	r2, [sp, #24]
 80033ea:	2a47      	cmp	r2, #71	@ 0x47
 80033ec:	d1c2      	bne.n	8003374 <_printf_float+0xf0>
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d1c0      	bne.n	8003374 <_printf_float+0xf0>
 80033f2:	2301      	movs	r3, #1
 80033f4:	e7bd      	b.n	8003372 <_printf_float+0xee>
 80033f6:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80033fa:	d9db      	bls.n	80033b4 <_printf_float+0x130>
 80033fc:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8003400:	d118      	bne.n	8003434 <_printf_float+0x1b0>
 8003402:	2900      	cmp	r1, #0
 8003404:	6863      	ldr	r3, [r4, #4]
 8003406:	dd0b      	ble.n	8003420 <_printf_float+0x19c>
 8003408:	6121      	str	r1, [r4, #16]
 800340a:	b913      	cbnz	r3, 8003412 <_printf_float+0x18e>
 800340c:	6822      	ldr	r2, [r4, #0]
 800340e:	07d0      	lsls	r0, r2, #31
 8003410:	d502      	bpl.n	8003418 <_printf_float+0x194>
 8003412:	3301      	adds	r3, #1
 8003414:	440b      	add	r3, r1
 8003416:	6123      	str	r3, [r4, #16]
 8003418:	65a1      	str	r1, [r4, #88]	@ 0x58
 800341a:	f04f 0900 	mov.w	r9, #0
 800341e:	e7db      	b.n	80033d8 <_printf_float+0x154>
 8003420:	b913      	cbnz	r3, 8003428 <_printf_float+0x1a4>
 8003422:	6822      	ldr	r2, [r4, #0]
 8003424:	07d2      	lsls	r2, r2, #31
 8003426:	d501      	bpl.n	800342c <_printf_float+0x1a8>
 8003428:	3302      	adds	r3, #2
 800342a:	e7f4      	b.n	8003416 <_printf_float+0x192>
 800342c:	2301      	movs	r3, #1
 800342e:	e7f2      	b.n	8003416 <_printf_float+0x192>
 8003430:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8003434:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8003436:	4299      	cmp	r1, r3
 8003438:	db05      	blt.n	8003446 <_printf_float+0x1c2>
 800343a:	6823      	ldr	r3, [r4, #0]
 800343c:	6121      	str	r1, [r4, #16]
 800343e:	07d8      	lsls	r0, r3, #31
 8003440:	d5ea      	bpl.n	8003418 <_printf_float+0x194>
 8003442:	1c4b      	adds	r3, r1, #1
 8003444:	e7e7      	b.n	8003416 <_printf_float+0x192>
 8003446:	2900      	cmp	r1, #0
 8003448:	bfd4      	ite	le
 800344a:	f1c1 0202 	rsble	r2, r1, #2
 800344e:	2201      	movgt	r2, #1
 8003450:	4413      	add	r3, r2
 8003452:	e7e0      	b.n	8003416 <_printf_float+0x192>
 8003454:	6823      	ldr	r3, [r4, #0]
 8003456:	055a      	lsls	r2, r3, #21
 8003458:	d407      	bmi.n	800346a <_printf_float+0x1e6>
 800345a:	6923      	ldr	r3, [r4, #16]
 800345c:	4642      	mov	r2, r8
 800345e:	4631      	mov	r1, r6
 8003460:	4628      	mov	r0, r5
 8003462:	47b8      	blx	r7
 8003464:	3001      	adds	r0, #1
 8003466:	d12b      	bne.n	80034c0 <_printf_float+0x23c>
 8003468:	e767      	b.n	800333a <_printf_float+0xb6>
 800346a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800346e:	f240 80dd 	bls.w	800362c <_printf_float+0x3a8>
 8003472:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8003476:	2200      	movs	r2, #0
 8003478:	2300      	movs	r3, #0
 800347a:	f7fd fb2d 	bl	8000ad8 <__aeabi_dcmpeq>
 800347e:	2800      	cmp	r0, #0
 8003480:	d033      	beq.n	80034ea <_printf_float+0x266>
 8003482:	4a37      	ldr	r2, [pc, #220]	@ (8003560 <_printf_float+0x2dc>)
 8003484:	2301      	movs	r3, #1
 8003486:	4631      	mov	r1, r6
 8003488:	4628      	mov	r0, r5
 800348a:	47b8      	blx	r7
 800348c:	3001      	adds	r0, #1
 800348e:	f43f af54 	beq.w	800333a <_printf_float+0xb6>
 8003492:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8003496:	4543      	cmp	r3, r8
 8003498:	db02      	blt.n	80034a0 <_printf_float+0x21c>
 800349a:	6823      	ldr	r3, [r4, #0]
 800349c:	07d8      	lsls	r0, r3, #31
 800349e:	d50f      	bpl.n	80034c0 <_printf_float+0x23c>
 80034a0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80034a4:	4631      	mov	r1, r6
 80034a6:	4628      	mov	r0, r5
 80034a8:	47b8      	blx	r7
 80034aa:	3001      	adds	r0, #1
 80034ac:	f43f af45 	beq.w	800333a <_printf_float+0xb6>
 80034b0:	f04f 0900 	mov.w	r9, #0
 80034b4:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 80034b8:	f104 0a1a 	add.w	sl, r4, #26
 80034bc:	45c8      	cmp	r8, r9
 80034be:	dc09      	bgt.n	80034d4 <_printf_float+0x250>
 80034c0:	6823      	ldr	r3, [r4, #0]
 80034c2:	079b      	lsls	r3, r3, #30
 80034c4:	f100 8103 	bmi.w	80036ce <_printf_float+0x44a>
 80034c8:	68e0      	ldr	r0, [r4, #12]
 80034ca:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80034cc:	4298      	cmp	r0, r3
 80034ce:	bfb8      	it	lt
 80034d0:	4618      	movlt	r0, r3
 80034d2:	e734      	b.n	800333e <_printf_float+0xba>
 80034d4:	2301      	movs	r3, #1
 80034d6:	4652      	mov	r2, sl
 80034d8:	4631      	mov	r1, r6
 80034da:	4628      	mov	r0, r5
 80034dc:	47b8      	blx	r7
 80034de:	3001      	adds	r0, #1
 80034e0:	f43f af2b 	beq.w	800333a <_printf_float+0xb6>
 80034e4:	f109 0901 	add.w	r9, r9, #1
 80034e8:	e7e8      	b.n	80034bc <_printf_float+0x238>
 80034ea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	dc39      	bgt.n	8003564 <_printf_float+0x2e0>
 80034f0:	4a1b      	ldr	r2, [pc, #108]	@ (8003560 <_printf_float+0x2dc>)
 80034f2:	2301      	movs	r3, #1
 80034f4:	4631      	mov	r1, r6
 80034f6:	4628      	mov	r0, r5
 80034f8:	47b8      	blx	r7
 80034fa:	3001      	adds	r0, #1
 80034fc:	f43f af1d 	beq.w	800333a <_printf_float+0xb6>
 8003500:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8003504:	ea59 0303 	orrs.w	r3, r9, r3
 8003508:	d102      	bne.n	8003510 <_printf_float+0x28c>
 800350a:	6823      	ldr	r3, [r4, #0]
 800350c:	07d9      	lsls	r1, r3, #31
 800350e:	d5d7      	bpl.n	80034c0 <_printf_float+0x23c>
 8003510:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003514:	4631      	mov	r1, r6
 8003516:	4628      	mov	r0, r5
 8003518:	47b8      	blx	r7
 800351a:	3001      	adds	r0, #1
 800351c:	f43f af0d 	beq.w	800333a <_printf_float+0xb6>
 8003520:	f04f 0a00 	mov.w	sl, #0
 8003524:	f104 0b1a 	add.w	fp, r4, #26
 8003528:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800352a:	425b      	negs	r3, r3
 800352c:	4553      	cmp	r3, sl
 800352e:	dc01      	bgt.n	8003534 <_printf_float+0x2b0>
 8003530:	464b      	mov	r3, r9
 8003532:	e793      	b.n	800345c <_printf_float+0x1d8>
 8003534:	2301      	movs	r3, #1
 8003536:	465a      	mov	r2, fp
 8003538:	4631      	mov	r1, r6
 800353a:	4628      	mov	r0, r5
 800353c:	47b8      	blx	r7
 800353e:	3001      	adds	r0, #1
 8003540:	f43f aefb 	beq.w	800333a <_printf_float+0xb6>
 8003544:	f10a 0a01 	add.w	sl, sl, #1
 8003548:	e7ee      	b.n	8003528 <_printf_float+0x2a4>
 800354a:	bf00      	nop
 800354c:	7fefffff 	.word	0x7fefffff
 8003550:	08005ba8 	.word	0x08005ba8
 8003554:	08005ba4 	.word	0x08005ba4
 8003558:	08005bb0 	.word	0x08005bb0
 800355c:	08005bac 	.word	0x08005bac
 8003560:	08005bb4 	.word	0x08005bb4
 8003564:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8003566:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800356a:	4553      	cmp	r3, sl
 800356c:	bfa8      	it	ge
 800356e:	4653      	movge	r3, sl
 8003570:	2b00      	cmp	r3, #0
 8003572:	4699      	mov	r9, r3
 8003574:	dc36      	bgt.n	80035e4 <_printf_float+0x360>
 8003576:	f04f 0b00 	mov.w	fp, #0
 800357a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800357e:	f104 021a 	add.w	r2, r4, #26
 8003582:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8003584:	9306      	str	r3, [sp, #24]
 8003586:	eba3 0309 	sub.w	r3, r3, r9
 800358a:	455b      	cmp	r3, fp
 800358c:	dc31      	bgt.n	80035f2 <_printf_float+0x36e>
 800358e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003590:	459a      	cmp	sl, r3
 8003592:	dc3a      	bgt.n	800360a <_printf_float+0x386>
 8003594:	6823      	ldr	r3, [r4, #0]
 8003596:	07da      	lsls	r2, r3, #31
 8003598:	d437      	bmi.n	800360a <_printf_float+0x386>
 800359a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800359c:	ebaa 0903 	sub.w	r9, sl, r3
 80035a0:	9b06      	ldr	r3, [sp, #24]
 80035a2:	ebaa 0303 	sub.w	r3, sl, r3
 80035a6:	4599      	cmp	r9, r3
 80035a8:	bfa8      	it	ge
 80035aa:	4699      	movge	r9, r3
 80035ac:	f1b9 0f00 	cmp.w	r9, #0
 80035b0:	dc33      	bgt.n	800361a <_printf_float+0x396>
 80035b2:	f04f 0800 	mov.w	r8, #0
 80035b6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80035ba:	f104 0b1a 	add.w	fp, r4, #26
 80035be:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80035c0:	ebaa 0303 	sub.w	r3, sl, r3
 80035c4:	eba3 0309 	sub.w	r3, r3, r9
 80035c8:	4543      	cmp	r3, r8
 80035ca:	f77f af79 	ble.w	80034c0 <_printf_float+0x23c>
 80035ce:	2301      	movs	r3, #1
 80035d0:	465a      	mov	r2, fp
 80035d2:	4631      	mov	r1, r6
 80035d4:	4628      	mov	r0, r5
 80035d6:	47b8      	blx	r7
 80035d8:	3001      	adds	r0, #1
 80035da:	f43f aeae 	beq.w	800333a <_printf_float+0xb6>
 80035de:	f108 0801 	add.w	r8, r8, #1
 80035e2:	e7ec      	b.n	80035be <_printf_float+0x33a>
 80035e4:	4642      	mov	r2, r8
 80035e6:	4631      	mov	r1, r6
 80035e8:	4628      	mov	r0, r5
 80035ea:	47b8      	blx	r7
 80035ec:	3001      	adds	r0, #1
 80035ee:	d1c2      	bne.n	8003576 <_printf_float+0x2f2>
 80035f0:	e6a3      	b.n	800333a <_printf_float+0xb6>
 80035f2:	2301      	movs	r3, #1
 80035f4:	4631      	mov	r1, r6
 80035f6:	4628      	mov	r0, r5
 80035f8:	9206      	str	r2, [sp, #24]
 80035fa:	47b8      	blx	r7
 80035fc:	3001      	adds	r0, #1
 80035fe:	f43f ae9c 	beq.w	800333a <_printf_float+0xb6>
 8003602:	9a06      	ldr	r2, [sp, #24]
 8003604:	f10b 0b01 	add.w	fp, fp, #1
 8003608:	e7bb      	b.n	8003582 <_printf_float+0x2fe>
 800360a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800360e:	4631      	mov	r1, r6
 8003610:	4628      	mov	r0, r5
 8003612:	47b8      	blx	r7
 8003614:	3001      	adds	r0, #1
 8003616:	d1c0      	bne.n	800359a <_printf_float+0x316>
 8003618:	e68f      	b.n	800333a <_printf_float+0xb6>
 800361a:	9a06      	ldr	r2, [sp, #24]
 800361c:	464b      	mov	r3, r9
 800361e:	4442      	add	r2, r8
 8003620:	4631      	mov	r1, r6
 8003622:	4628      	mov	r0, r5
 8003624:	47b8      	blx	r7
 8003626:	3001      	adds	r0, #1
 8003628:	d1c3      	bne.n	80035b2 <_printf_float+0x32e>
 800362a:	e686      	b.n	800333a <_printf_float+0xb6>
 800362c:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8003630:	f1ba 0f01 	cmp.w	sl, #1
 8003634:	dc01      	bgt.n	800363a <_printf_float+0x3b6>
 8003636:	07db      	lsls	r3, r3, #31
 8003638:	d536      	bpl.n	80036a8 <_printf_float+0x424>
 800363a:	2301      	movs	r3, #1
 800363c:	4642      	mov	r2, r8
 800363e:	4631      	mov	r1, r6
 8003640:	4628      	mov	r0, r5
 8003642:	47b8      	blx	r7
 8003644:	3001      	adds	r0, #1
 8003646:	f43f ae78 	beq.w	800333a <_printf_float+0xb6>
 800364a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800364e:	4631      	mov	r1, r6
 8003650:	4628      	mov	r0, r5
 8003652:	47b8      	blx	r7
 8003654:	3001      	adds	r0, #1
 8003656:	f43f ae70 	beq.w	800333a <_printf_float+0xb6>
 800365a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800365e:	2200      	movs	r2, #0
 8003660:	2300      	movs	r3, #0
 8003662:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 8003666:	f7fd fa37 	bl	8000ad8 <__aeabi_dcmpeq>
 800366a:	b9c0      	cbnz	r0, 800369e <_printf_float+0x41a>
 800366c:	4653      	mov	r3, sl
 800366e:	f108 0201 	add.w	r2, r8, #1
 8003672:	4631      	mov	r1, r6
 8003674:	4628      	mov	r0, r5
 8003676:	47b8      	blx	r7
 8003678:	3001      	adds	r0, #1
 800367a:	d10c      	bne.n	8003696 <_printf_float+0x412>
 800367c:	e65d      	b.n	800333a <_printf_float+0xb6>
 800367e:	2301      	movs	r3, #1
 8003680:	465a      	mov	r2, fp
 8003682:	4631      	mov	r1, r6
 8003684:	4628      	mov	r0, r5
 8003686:	47b8      	blx	r7
 8003688:	3001      	adds	r0, #1
 800368a:	f43f ae56 	beq.w	800333a <_printf_float+0xb6>
 800368e:	f108 0801 	add.w	r8, r8, #1
 8003692:	45d0      	cmp	r8, sl
 8003694:	dbf3      	blt.n	800367e <_printf_float+0x3fa>
 8003696:	464b      	mov	r3, r9
 8003698:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800369c:	e6df      	b.n	800345e <_printf_float+0x1da>
 800369e:	f04f 0800 	mov.w	r8, #0
 80036a2:	f104 0b1a 	add.w	fp, r4, #26
 80036a6:	e7f4      	b.n	8003692 <_printf_float+0x40e>
 80036a8:	2301      	movs	r3, #1
 80036aa:	4642      	mov	r2, r8
 80036ac:	e7e1      	b.n	8003672 <_printf_float+0x3ee>
 80036ae:	2301      	movs	r3, #1
 80036b0:	464a      	mov	r2, r9
 80036b2:	4631      	mov	r1, r6
 80036b4:	4628      	mov	r0, r5
 80036b6:	47b8      	blx	r7
 80036b8:	3001      	adds	r0, #1
 80036ba:	f43f ae3e 	beq.w	800333a <_printf_float+0xb6>
 80036be:	f108 0801 	add.w	r8, r8, #1
 80036c2:	68e3      	ldr	r3, [r4, #12]
 80036c4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80036c6:	1a5b      	subs	r3, r3, r1
 80036c8:	4543      	cmp	r3, r8
 80036ca:	dcf0      	bgt.n	80036ae <_printf_float+0x42a>
 80036cc:	e6fc      	b.n	80034c8 <_printf_float+0x244>
 80036ce:	f04f 0800 	mov.w	r8, #0
 80036d2:	f104 0919 	add.w	r9, r4, #25
 80036d6:	e7f4      	b.n	80036c2 <_printf_float+0x43e>

080036d8 <_printf_common>:
 80036d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80036dc:	4616      	mov	r6, r2
 80036de:	4698      	mov	r8, r3
 80036e0:	688a      	ldr	r2, [r1, #8]
 80036e2:	690b      	ldr	r3, [r1, #16]
 80036e4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80036e8:	4293      	cmp	r3, r2
 80036ea:	bfb8      	it	lt
 80036ec:	4613      	movlt	r3, r2
 80036ee:	6033      	str	r3, [r6, #0]
 80036f0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80036f4:	4607      	mov	r7, r0
 80036f6:	460c      	mov	r4, r1
 80036f8:	b10a      	cbz	r2, 80036fe <_printf_common+0x26>
 80036fa:	3301      	adds	r3, #1
 80036fc:	6033      	str	r3, [r6, #0]
 80036fe:	6823      	ldr	r3, [r4, #0]
 8003700:	0699      	lsls	r1, r3, #26
 8003702:	bf42      	ittt	mi
 8003704:	6833      	ldrmi	r3, [r6, #0]
 8003706:	3302      	addmi	r3, #2
 8003708:	6033      	strmi	r3, [r6, #0]
 800370a:	6825      	ldr	r5, [r4, #0]
 800370c:	f015 0506 	ands.w	r5, r5, #6
 8003710:	d106      	bne.n	8003720 <_printf_common+0x48>
 8003712:	f104 0a19 	add.w	sl, r4, #25
 8003716:	68e3      	ldr	r3, [r4, #12]
 8003718:	6832      	ldr	r2, [r6, #0]
 800371a:	1a9b      	subs	r3, r3, r2
 800371c:	42ab      	cmp	r3, r5
 800371e:	dc26      	bgt.n	800376e <_printf_common+0x96>
 8003720:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8003724:	6822      	ldr	r2, [r4, #0]
 8003726:	3b00      	subs	r3, #0
 8003728:	bf18      	it	ne
 800372a:	2301      	movne	r3, #1
 800372c:	0692      	lsls	r2, r2, #26
 800372e:	d42b      	bmi.n	8003788 <_printf_common+0xb0>
 8003730:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8003734:	4641      	mov	r1, r8
 8003736:	4638      	mov	r0, r7
 8003738:	47c8      	blx	r9
 800373a:	3001      	adds	r0, #1
 800373c:	d01e      	beq.n	800377c <_printf_common+0xa4>
 800373e:	6823      	ldr	r3, [r4, #0]
 8003740:	6922      	ldr	r2, [r4, #16]
 8003742:	f003 0306 	and.w	r3, r3, #6
 8003746:	2b04      	cmp	r3, #4
 8003748:	bf02      	ittt	eq
 800374a:	68e5      	ldreq	r5, [r4, #12]
 800374c:	6833      	ldreq	r3, [r6, #0]
 800374e:	1aed      	subeq	r5, r5, r3
 8003750:	68a3      	ldr	r3, [r4, #8]
 8003752:	bf0c      	ite	eq
 8003754:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003758:	2500      	movne	r5, #0
 800375a:	4293      	cmp	r3, r2
 800375c:	bfc4      	itt	gt
 800375e:	1a9b      	subgt	r3, r3, r2
 8003760:	18ed      	addgt	r5, r5, r3
 8003762:	2600      	movs	r6, #0
 8003764:	341a      	adds	r4, #26
 8003766:	42b5      	cmp	r5, r6
 8003768:	d11a      	bne.n	80037a0 <_printf_common+0xc8>
 800376a:	2000      	movs	r0, #0
 800376c:	e008      	b.n	8003780 <_printf_common+0xa8>
 800376e:	2301      	movs	r3, #1
 8003770:	4652      	mov	r2, sl
 8003772:	4641      	mov	r1, r8
 8003774:	4638      	mov	r0, r7
 8003776:	47c8      	blx	r9
 8003778:	3001      	adds	r0, #1
 800377a:	d103      	bne.n	8003784 <_printf_common+0xac>
 800377c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003780:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003784:	3501      	adds	r5, #1
 8003786:	e7c6      	b.n	8003716 <_printf_common+0x3e>
 8003788:	18e1      	adds	r1, r4, r3
 800378a:	1c5a      	adds	r2, r3, #1
 800378c:	2030      	movs	r0, #48	@ 0x30
 800378e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8003792:	4422      	add	r2, r4
 8003794:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8003798:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800379c:	3302      	adds	r3, #2
 800379e:	e7c7      	b.n	8003730 <_printf_common+0x58>
 80037a0:	2301      	movs	r3, #1
 80037a2:	4622      	mov	r2, r4
 80037a4:	4641      	mov	r1, r8
 80037a6:	4638      	mov	r0, r7
 80037a8:	47c8      	blx	r9
 80037aa:	3001      	adds	r0, #1
 80037ac:	d0e6      	beq.n	800377c <_printf_common+0xa4>
 80037ae:	3601      	adds	r6, #1
 80037b0:	e7d9      	b.n	8003766 <_printf_common+0x8e>
	...

080037b4 <_printf_i>:
 80037b4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80037b8:	7e0f      	ldrb	r7, [r1, #24]
 80037ba:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80037bc:	2f78      	cmp	r7, #120	@ 0x78
 80037be:	4691      	mov	r9, r2
 80037c0:	4680      	mov	r8, r0
 80037c2:	460c      	mov	r4, r1
 80037c4:	469a      	mov	sl, r3
 80037c6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80037ca:	d807      	bhi.n	80037dc <_printf_i+0x28>
 80037cc:	2f62      	cmp	r7, #98	@ 0x62
 80037ce:	d80a      	bhi.n	80037e6 <_printf_i+0x32>
 80037d0:	2f00      	cmp	r7, #0
 80037d2:	f000 80d1 	beq.w	8003978 <_printf_i+0x1c4>
 80037d6:	2f58      	cmp	r7, #88	@ 0x58
 80037d8:	f000 80b8 	beq.w	800394c <_printf_i+0x198>
 80037dc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80037e0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80037e4:	e03a      	b.n	800385c <_printf_i+0xa8>
 80037e6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80037ea:	2b15      	cmp	r3, #21
 80037ec:	d8f6      	bhi.n	80037dc <_printf_i+0x28>
 80037ee:	a101      	add	r1, pc, #4	@ (adr r1, 80037f4 <_printf_i+0x40>)
 80037f0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80037f4:	0800384d 	.word	0x0800384d
 80037f8:	08003861 	.word	0x08003861
 80037fc:	080037dd 	.word	0x080037dd
 8003800:	080037dd 	.word	0x080037dd
 8003804:	080037dd 	.word	0x080037dd
 8003808:	080037dd 	.word	0x080037dd
 800380c:	08003861 	.word	0x08003861
 8003810:	080037dd 	.word	0x080037dd
 8003814:	080037dd 	.word	0x080037dd
 8003818:	080037dd 	.word	0x080037dd
 800381c:	080037dd 	.word	0x080037dd
 8003820:	0800395f 	.word	0x0800395f
 8003824:	0800388b 	.word	0x0800388b
 8003828:	08003919 	.word	0x08003919
 800382c:	080037dd 	.word	0x080037dd
 8003830:	080037dd 	.word	0x080037dd
 8003834:	08003981 	.word	0x08003981
 8003838:	080037dd 	.word	0x080037dd
 800383c:	0800388b 	.word	0x0800388b
 8003840:	080037dd 	.word	0x080037dd
 8003844:	080037dd 	.word	0x080037dd
 8003848:	08003921 	.word	0x08003921
 800384c:	6833      	ldr	r3, [r6, #0]
 800384e:	1d1a      	adds	r2, r3, #4
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	6032      	str	r2, [r6, #0]
 8003854:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003858:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800385c:	2301      	movs	r3, #1
 800385e:	e09c      	b.n	800399a <_printf_i+0x1e6>
 8003860:	6833      	ldr	r3, [r6, #0]
 8003862:	6820      	ldr	r0, [r4, #0]
 8003864:	1d19      	adds	r1, r3, #4
 8003866:	6031      	str	r1, [r6, #0]
 8003868:	0606      	lsls	r6, r0, #24
 800386a:	d501      	bpl.n	8003870 <_printf_i+0xbc>
 800386c:	681d      	ldr	r5, [r3, #0]
 800386e:	e003      	b.n	8003878 <_printf_i+0xc4>
 8003870:	0645      	lsls	r5, r0, #25
 8003872:	d5fb      	bpl.n	800386c <_printf_i+0xb8>
 8003874:	f9b3 5000 	ldrsh.w	r5, [r3]
 8003878:	2d00      	cmp	r5, #0
 800387a:	da03      	bge.n	8003884 <_printf_i+0xd0>
 800387c:	232d      	movs	r3, #45	@ 0x2d
 800387e:	426d      	negs	r5, r5
 8003880:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003884:	4858      	ldr	r0, [pc, #352]	@ (80039e8 <_printf_i+0x234>)
 8003886:	230a      	movs	r3, #10
 8003888:	e011      	b.n	80038ae <_printf_i+0xfa>
 800388a:	6821      	ldr	r1, [r4, #0]
 800388c:	6833      	ldr	r3, [r6, #0]
 800388e:	0608      	lsls	r0, r1, #24
 8003890:	f853 5b04 	ldr.w	r5, [r3], #4
 8003894:	d402      	bmi.n	800389c <_printf_i+0xe8>
 8003896:	0649      	lsls	r1, r1, #25
 8003898:	bf48      	it	mi
 800389a:	b2ad      	uxthmi	r5, r5
 800389c:	2f6f      	cmp	r7, #111	@ 0x6f
 800389e:	4852      	ldr	r0, [pc, #328]	@ (80039e8 <_printf_i+0x234>)
 80038a0:	6033      	str	r3, [r6, #0]
 80038a2:	bf14      	ite	ne
 80038a4:	230a      	movne	r3, #10
 80038a6:	2308      	moveq	r3, #8
 80038a8:	2100      	movs	r1, #0
 80038aa:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80038ae:	6866      	ldr	r6, [r4, #4]
 80038b0:	60a6      	str	r6, [r4, #8]
 80038b2:	2e00      	cmp	r6, #0
 80038b4:	db05      	blt.n	80038c2 <_printf_i+0x10e>
 80038b6:	6821      	ldr	r1, [r4, #0]
 80038b8:	432e      	orrs	r6, r5
 80038ba:	f021 0104 	bic.w	r1, r1, #4
 80038be:	6021      	str	r1, [r4, #0]
 80038c0:	d04b      	beq.n	800395a <_printf_i+0x1a6>
 80038c2:	4616      	mov	r6, r2
 80038c4:	fbb5 f1f3 	udiv	r1, r5, r3
 80038c8:	fb03 5711 	mls	r7, r3, r1, r5
 80038cc:	5dc7      	ldrb	r7, [r0, r7]
 80038ce:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80038d2:	462f      	mov	r7, r5
 80038d4:	42bb      	cmp	r3, r7
 80038d6:	460d      	mov	r5, r1
 80038d8:	d9f4      	bls.n	80038c4 <_printf_i+0x110>
 80038da:	2b08      	cmp	r3, #8
 80038dc:	d10b      	bne.n	80038f6 <_printf_i+0x142>
 80038de:	6823      	ldr	r3, [r4, #0]
 80038e0:	07df      	lsls	r7, r3, #31
 80038e2:	d508      	bpl.n	80038f6 <_printf_i+0x142>
 80038e4:	6923      	ldr	r3, [r4, #16]
 80038e6:	6861      	ldr	r1, [r4, #4]
 80038e8:	4299      	cmp	r1, r3
 80038ea:	bfde      	ittt	le
 80038ec:	2330      	movle	r3, #48	@ 0x30
 80038ee:	f806 3c01 	strble.w	r3, [r6, #-1]
 80038f2:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 80038f6:	1b92      	subs	r2, r2, r6
 80038f8:	6122      	str	r2, [r4, #16]
 80038fa:	f8cd a000 	str.w	sl, [sp]
 80038fe:	464b      	mov	r3, r9
 8003900:	aa03      	add	r2, sp, #12
 8003902:	4621      	mov	r1, r4
 8003904:	4640      	mov	r0, r8
 8003906:	f7ff fee7 	bl	80036d8 <_printf_common>
 800390a:	3001      	adds	r0, #1
 800390c:	d14a      	bne.n	80039a4 <_printf_i+0x1f0>
 800390e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003912:	b004      	add	sp, #16
 8003914:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003918:	6823      	ldr	r3, [r4, #0]
 800391a:	f043 0320 	orr.w	r3, r3, #32
 800391e:	6023      	str	r3, [r4, #0]
 8003920:	4832      	ldr	r0, [pc, #200]	@ (80039ec <_printf_i+0x238>)
 8003922:	2778      	movs	r7, #120	@ 0x78
 8003924:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8003928:	6823      	ldr	r3, [r4, #0]
 800392a:	6831      	ldr	r1, [r6, #0]
 800392c:	061f      	lsls	r7, r3, #24
 800392e:	f851 5b04 	ldr.w	r5, [r1], #4
 8003932:	d402      	bmi.n	800393a <_printf_i+0x186>
 8003934:	065f      	lsls	r7, r3, #25
 8003936:	bf48      	it	mi
 8003938:	b2ad      	uxthmi	r5, r5
 800393a:	6031      	str	r1, [r6, #0]
 800393c:	07d9      	lsls	r1, r3, #31
 800393e:	bf44      	itt	mi
 8003940:	f043 0320 	orrmi.w	r3, r3, #32
 8003944:	6023      	strmi	r3, [r4, #0]
 8003946:	b11d      	cbz	r5, 8003950 <_printf_i+0x19c>
 8003948:	2310      	movs	r3, #16
 800394a:	e7ad      	b.n	80038a8 <_printf_i+0xf4>
 800394c:	4826      	ldr	r0, [pc, #152]	@ (80039e8 <_printf_i+0x234>)
 800394e:	e7e9      	b.n	8003924 <_printf_i+0x170>
 8003950:	6823      	ldr	r3, [r4, #0]
 8003952:	f023 0320 	bic.w	r3, r3, #32
 8003956:	6023      	str	r3, [r4, #0]
 8003958:	e7f6      	b.n	8003948 <_printf_i+0x194>
 800395a:	4616      	mov	r6, r2
 800395c:	e7bd      	b.n	80038da <_printf_i+0x126>
 800395e:	6833      	ldr	r3, [r6, #0]
 8003960:	6825      	ldr	r5, [r4, #0]
 8003962:	6961      	ldr	r1, [r4, #20]
 8003964:	1d18      	adds	r0, r3, #4
 8003966:	6030      	str	r0, [r6, #0]
 8003968:	062e      	lsls	r6, r5, #24
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	d501      	bpl.n	8003972 <_printf_i+0x1be>
 800396e:	6019      	str	r1, [r3, #0]
 8003970:	e002      	b.n	8003978 <_printf_i+0x1c4>
 8003972:	0668      	lsls	r0, r5, #25
 8003974:	d5fb      	bpl.n	800396e <_printf_i+0x1ba>
 8003976:	8019      	strh	r1, [r3, #0]
 8003978:	2300      	movs	r3, #0
 800397a:	6123      	str	r3, [r4, #16]
 800397c:	4616      	mov	r6, r2
 800397e:	e7bc      	b.n	80038fa <_printf_i+0x146>
 8003980:	6833      	ldr	r3, [r6, #0]
 8003982:	1d1a      	adds	r2, r3, #4
 8003984:	6032      	str	r2, [r6, #0]
 8003986:	681e      	ldr	r6, [r3, #0]
 8003988:	6862      	ldr	r2, [r4, #4]
 800398a:	2100      	movs	r1, #0
 800398c:	4630      	mov	r0, r6
 800398e:	f7fc fc27 	bl	80001e0 <memchr>
 8003992:	b108      	cbz	r0, 8003998 <_printf_i+0x1e4>
 8003994:	1b80      	subs	r0, r0, r6
 8003996:	6060      	str	r0, [r4, #4]
 8003998:	6863      	ldr	r3, [r4, #4]
 800399a:	6123      	str	r3, [r4, #16]
 800399c:	2300      	movs	r3, #0
 800399e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80039a2:	e7aa      	b.n	80038fa <_printf_i+0x146>
 80039a4:	6923      	ldr	r3, [r4, #16]
 80039a6:	4632      	mov	r2, r6
 80039a8:	4649      	mov	r1, r9
 80039aa:	4640      	mov	r0, r8
 80039ac:	47d0      	blx	sl
 80039ae:	3001      	adds	r0, #1
 80039b0:	d0ad      	beq.n	800390e <_printf_i+0x15a>
 80039b2:	6823      	ldr	r3, [r4, #0]
 80039b4:	079b      	lsls	r3, r3, #30
 80039b6:	d413      	bmi.n	80039e0 <_printf_i+0x22c>
 80039b8:	68e0      	ldr	r0, [r4, #12]
 80039ba:	9b03      	ldr	r3, [sp, #12]
 80039bc:	4298      	cmp	r0, r3
 80039be:	bfb8      	it	lt
 80039c0:	4618      	movlt	r0, r3
 80039c2:	e7a6      	b.n	8003912 <_printf_i+0x15e>
 80039c4:	2301      	movs	r3, #1
 80039c6:	4632      	mov	r2, r6
 80039c8:	4649      	mov	r1, r9
 80039ca:	4640      	mov	r0, r8
 80039cc:	47d0      	blx	sl
 80039ce:	3001      	adds	r0, #1
 80039d0:	d09d      	beq.n	800390e <_printf_i+0x15a>
 80039d2:	3501      	adds	r5, #1
 80039d4:	68e3      	ldr	r3, [r4, #12]
 80039d6:	9903      	ldr	r1, [sp, #12]
 80039d8:	1a5b      	subs	r3, r3, r1
 80039da:	42ab      	cmp	r3, r5
 80039dc:	dcf2      	bgt.n	80039c4 <_printf_i+0x210>
 80039de:	e7eb      	b.n	80039b8 <_printf_i+0x204>
 80039e0:	2500      	movs	r5, #0
 80039e2:	f104 0619 	add.w	r6, r4, #25
 80039e6:	e7f5      	b.n	80039d4 <_printf_i+0x220>
 80039e8:	08005bb6 	.word	0x08005bb6
 80039ec:	08005bc7 	.word	0x08005bc7

080039f0 <std>:
 80039f0:	2300      	movs	r3, #0
 80039f2:	b510      	push	{r4, lr}
 80039f4:	4604      	mov	r4, r0
 80039f6:	e9c0 3300 	strd	r3, r3, [r0]
 80039fa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80039fe:	6083      	str	r3, [r0, #8]
 8003a00:	8181      	strh	r1, [r0, #12]
 8003a02:	6643      	str	r3, [r0, #100]	@ 0x64
 8003a04:	81c2      	strh	r2, [r0, #14]
 8003a06:	6183      	str	r3, [r0, #24]
 8003a08:	4619      	mov	r1, r3
 8003a0a:	2208      	movs	r2, #8
 8003a0c:	305c      	adds	r0, #92	@ 0x5c
 8003a0e:	f000 f90e 	bl	8003c2e <memset>
 8003a12:	4b0d      	ldr	r3, [pc, #52]	@ (8003a48 <std+0x58>)
 8003a14:	6263      	str	r3, [r4, #36]	@ 0x24
 8003a16:	4b0d      	ldr	r3, [pc, #52]	@ (8003a4c <std+0x5c>)
 8003a18:	62a3      	str	r3, [r4, #40]	@ 0x28
 8003a1a:	4b0d      	ldr	r3, [pc, #52]	@ (8003a50 <std+0x60>)
 8003a1c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8003a1e:	4b0d      	ldr	r3, [pc, #52]	@ (8003a54 <std+0x64>)
 8003a20:	6323      	str	r3, [r4, #48]	@ 0x30
 8003a22:	4b0d      	ldr	r3, [pc, #52]	@ (8003a58 <std+0x68>)
 8003a24:	6224      	str	r4, [r4, #32]
 8003a26:	429c      	cmp	r4, r3
 8003a28:	d006      	beq.n	8003a38 <std+0x48>
 8003a2a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8003a2e:	4294      	cmp	r4, r2
 8003a30:	d002      	beq.n	8003a38 <std+0x48>
 8003a32:	33d0      	adds	r3, #208	@ 0xd0
 8003a34:	429c      	cmp	r4, r3
 8003a36:	d105      	bne.n	8003a44 <std+0x54>
 8003a38:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8003a3c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003a40:	f000 b972 	b.w	8003d28 <__retarget_lock_init_recursive>
 8003a44:	bd10      	pop	{r4, pc}
 8003a46:	bf00      	nop
 8003a48:	08003ba9 	.word	0x08003ba9
 8003a4c:	08003bcb 	.word	0x08003bcb
 8003a50:	08003c03 	.word	0x08003c03
 8003a54:	08003c27 	.word	0x08003c27
 8003a58:	200003cc 	.word	0x200003cc

08003a5c <stdio_exit_handler>:
 8003a5c:	4a02      	ldr	r2, [pc, #8]	@ (8003a68 <stdio_exit_handler+0xc>)
 8003a5e:	4903      	ldr	r1, [pc, #12]	@ (8003a6c <stdio_exit_handler+0x10>)
 8003a60:	4803      	ldr	r0, [pc, #12]	@ (8003a70 <stdio_exit_handler+0x14>)
 8003a62:	f000 b869 	b.w	8003b38 <_fwalk_sglue>
 8003a66:	bf00      	nop
 8003a68:	200000fc 	.word	0x200000fc
 8003a6c:	08005661 	.word	0x08005661
 8003a70:	2000010c 	.word	0x2000010c

08003a74 <cleanup_stdio>:
 8003a74:	6841      	ldr	r1, [r0, #4]
 8003a76:	4b0c      	ldr	r3, [pc, #48]	@ (8003aa8 <cleanup_stdio+0x34>)
 8003a78:	4299      	cmp	r1, r3
 8003a7a:	b510      	push	{r4, lr}
 8003a7c:	4604      	mov	r4, r0
 8003a7e:	d001      	beq.n	8003a84 <cleanup_stdio+0x10>
 8003a80:	f001 fdee 	bl	8005660 <_fflush_r>
 8003a84:	68a1      	ldr	r1, [r4, #8]
 8003a86:	4b09      	ldr	r3, [pc, #36]	@ (8003aac <cleanup_stdio+0x38>)
 8003a88:	4299      	cmp	r1, r3
 8003a8a:	d002      	beq.n	8003a92 <cleanup_stdio+0x1e>
 8003a8c:	4620      	mov	r0, r4
 8003a8e:	f001 fde7 	bl	8005660 <_fflush_r>
 8003a92:	68e1      	ldr	r1, [r4, #12]
 8003a94:	4b06      	ldr	r3, [pc, #24]	@ (8003ab0 <cleanup_stdio+0x3c>)
 8003a96:	4299      	cmp	r1, r3
 8003a98:	d004      	beq.n	8003aa4 <cleanup_stdio+0x30>
 8003a9a:	4620      	mov	r0, r4
 8003a9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003aa0:	f001 bdde 	b.w	8005660 <_fflush_r>
 8003aa4:	bd10      	pop	{r4, pc}
 8003aa6:	bf00      	nop
 8003aa8:	200003cc 	.word	0x200003cc
 8003aac:	20000434 	.word	0x20000434
 8003ab0:	2000049c 	.word	0x2000049c

08003ab4 <global_stdio_init.part.0>:
 8003ab4:	b510      	push	{r4, lr}
 8003ab6:	4b0b      	ldr	r3, [pc, #44]	@ (8003ae4 <global_stdio_init.part.0+0x30>)
 8003ab8:	4c0b      	ldr	r4, [pc, #44]	@ (8003ae8 <global_stdio_init.part.0+0x34>)
 8003aba:	4a0c      	ldr	r2, [pc, #48]	@ (8003aec <global_stdio_init.part.0+0x38>)
 8003abc:	601a      	str	r2, [r3, #0]
 8003abe:	4620      	mov	r0, r4
 8003ac0:	2200      	movs	r2, #0
 8003ac2:	2104      	movs	r1, #4
 8003ac4:	f7ff ff94 	bl	80039f0 <std>
 8003ac8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8003acc:	2201      	movs	r2, #1
 8003ace:	2109      	movs	r1, #9
 8003ad0:	f7ff ff8e 	bl	80039f0 <std>
 8003ad4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8003ad8:	2202      	movs	r2, #2
 8003ada:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003ade:	2112      	movs	r1, #18
 8003ae0:	f7ff bf86 	b.w	80039f0 <std>
 8003ae4:	20000504 	.word	0x20000504
 8003ae8:	200003cc 	.word	0x200003cc
 8003aec:	08003a5d 	.word	0x08003a5d

08003af0 <__sfp_lock_acquire>:
 8003af0:	4801      	ldr	r0, [pc, #4]	@ (8003af8 <__sfp_lock_acquire+0x8>)
 8003af2:	f000 b91a 	b.w	8003d2a <__retarget_lock_acquire_recursive>
 8003af6:	bf00      	nop
 8003af8:	2000050d 	.word	0x2000050d

08003afc <__sfp_lock_release>:
 8003afc:	4801      	ldr	r0, [pc, #4]	@ (8003b04 <__sfp_lock_release+0x8>)
 8003afe:	f000 b915 	b.w	8003d2c <__retarget_lock_release_recursive>
 8003b02:	bf00      	nop
 8003b04:	2000050d 	.word	0x2000050d

08003b08 <__sinit>:
 8003b08:	b510      	push	{r4, lr}
 8003b0a:	4604      	mov	r4, r0
 8003b0c:	f7ff fff0 	bl	8003af0 <__sfp_lock_acquire>
 8003b10:	6a23      	ldr	r3, [r4, #32]
 8003b12:	b11b      	cbz	r3, 8003b1c <__sinit+0x14>
 8003b14:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003b18:	f7ff bff0 	b.w	8003afc <__sfp_lock_release>
 8003b1c:	4b04      	ldr	r3, [pc, #16]	@ (8003b30 <__sinit+0x28>)
 8003b1e:	6223      	str	r3, [r4, #32]
 8003b20:	4b04      	ldr	r3, [pc, #16]	@ (8003b34 <__sinit+0x2c>)
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d1f5      	bne.n	8003b14 <__sinit+0xc>
 8003b28:	f7ff ffc4 	bl	8003ab4 <global_stdio_init.part.0>
 8003b2c:	e7f2      	b.n	8003b14 <__sinit+0xc>
 8003b2e:	bf00      	nop
 8003b30:	08003a75 	.word	0x08003a75
 8003b34:	20000504 	.word	0x20000504

08003b38 <_fwalk_sglue>:
 8003b38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003b3c:	4607      	mov	r7, r0
 8003b3e:	4688      	mov	r8, r1
 8003b40:	4614      	mov	r4, r2
 8003b42:	2600      	movs	r6, #0
 8003b44:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003b48:	f1b9 0901 	subs.w	r9, r9, #1
 8003b4c:	d505      	bpl.n	8003b5a <_fwalk_sglue+0x22>
 8003b4e:	6824      	ldr	r4, [r4, #0]
 8003b50:	2c00      	cmp	r4, #0
 8003b52:	d1f7      	bne.n	8003b44 <_fwalk_sglue+0xc>
 8003b54:	4630      	mov	r0, r6
 8003b56:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003b5a:	89ab      	ldrh	r3, [r5, #12]
 8003b5c:	2b01      	cmp	r3, #1
 8003b5e:	d907      	bls.n	8003b70 <_fwalk_sglue+0x38>
 8003b60:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003b64:	3301      	adds	r3, #1
 8003b66:	d003      	beq.n	8003b70 <_fwalk_sglue+0x38>
 8003b68:	4629      	mov	r1, r5
 8003b6a:	4638      	mov	r0, r7
 8003b6c:	47c0      	blx	r8
 8003b6e:	4306      	orrs	r6, r0
 8003b70:	3568      	adds	r5, #104	@ 0x68
 8003b72:	e7e9      	b.n	8003b48 <_fwalk_sglue+0x10>

08003b74 <iprintf>:
 8003b74:	b40f      	push	{r0, r1, r2, r3}
 8003b76:	b507      	push	{r0, r1, r2, lr}
 8003b78:	4906      	ldr	r1, [pc, #24]	@ (8003b94 <iprintf+0x20>)
 8003b7a:	ab04      	add	r3, sp, #16
 8003b7c:	6808      	ldr	r0, [r1, #0]
 8003b7e:	f853 2b04 	ldr.w	r2, [r3], #4
 8003b82:	6881      	ldr	r1, [r0, #8]
 8003b84:	9301      	str	r3, [sp, #4]
 8003b86:	f001 fbcf 	bl	8005328 <_vfiprintf_r>
 8003b8a:	b003      	add	sp, #12
 8003b8c:	f85d eb04 	ldr.w	lr, [sp], #4
 8003b90:	b004      	add	sp, #16
 8003b92:	4770      	bx	lr
 8003b94:	20000108 	.word	0x20000108

08003b98 <putchar>:
 8003b98:	4b02      	ldr	r3, [pc, #8]	@ (8003ba4 <putchar+0xc>)
 8003b9a:	4601      	mov	r1, r0
 8003b9c:	6818      	ldr	r0, [r3, #0]
 8003b9e:	6882      	ldr	r2, [r0, #8]
 8003ba0:	f001 bd86 	b.w	80056b0 <_putc_r>
 8003ba4:	20000108 	.word	0x20000108

08003ba8 <__sread>:
 8003ba8:	b510      	push	{r4, lr}
 8003baa:	460c      	mov	r4, r1
 8003bac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003bb0:	f000 f86c 	bl	8003c8c <_read_r>
 8003bb4:	2800      	cmp	r0, #0
 8003bb6:	bfab      	itete	ge
 8003bb8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8003bba:	89a3      	ldrhlt	r3, [r4, #12]
 8003bbc:	181b      	addge	r3, r3, r0
 8003bbe:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8003bc2:	bfac      	ite	ge
 8003bc4:	6563      	strge	r3, [r4, #84]	@ 0x54
 8003bc6:	81a3      	strhlt	r3, [r4, #12]
 8003bc8:	bd10      	pop	{r4, pc}

08003bca <__swrite>:
 8003bca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003bce:	461f      	mov	r7, r3
 8003bd0:	898b      	ldrh	r3, [r1, #12]
 8003bd2:	05db      	lsls	r3, r3, #23
 8003bd4:	4605      	mov	r5, r0
 8003bd6:	460c      	mov	r4, r1
 8003bd8:	4616      	mov	r6, r2
 8003bda:	d505      	bpl.n	8003be8 <__swrite+0x1e>
 8003bdc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003be0:	2302      	movs	r3, #2
 8003be2:	2200      	movs	r2, #0
 8003be4:	f000 f840 	bl	8003c68 <_lseek_r>
 8003be8:	89a3      	ldrh	r3, [r4, #12]
 8003bea:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003bee:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003bf2:	81a3      	strh	r3, [r4, #12]
 8003bf4:	4632      	mov	r2, r6
 8003bf6:	463b      	mov	r3, r7
 8003bf8:	4628      	mov	r0, r5
 8003bfa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003bfe:	f000 b857 	b.w	8003cb0 <_write_r>

08003c02 <__sseek>:
 8003c02:	b510      	push	{r4, lr}
 8003c04:	460c      	mov	r4, r1
 8003c06:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003c0a:	f000 f82d 	bl	8003c68 <_lseek_r>
 8003c0e:	1c43      	adds	r3, r0, #1
 8003c10:	89a3      	ldrh	r3, [r4, #12]
 8003c12:	bf15      	itete	ne
 8003c14:	6560      	strne	r0, [r4, #84]	@ 0x54
 8003c16:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8003c1a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8003c1e:	81a3      	strheq	r3, [r4, #12]
 8003c20:	bf18      	it	ne
 8003c22:	81a3      	strhne	r3, [r4, #12]
 8003c24:	bd10      	pop	{r4, pc}

08003c26 <__sclose>:
 8003c26:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003c2a:	f000 b80d 	b.w	8003c48 <_close_r>

08003c2e <memset>:
 8003c2e:	4402      	add	r2, r0
 8003c30:	4603      	mov	r3, r0
 8003c32:	4293      	cmp	r3, r2
 8003c34:	d100      	bne.n	8003c38 <memset+0xa>
 8003c36:	4770      	bx	lr
 8003c38:	f803 1b01 	strb.w	r1, [r3], #1
 8003c3c:	e7f9      	b.n	8003c32 <memset+0x4>
	...

08003c40 <_localeconv_r>:
 8003c40:	4800      	ldr	r0, [pc, #0]	@ (8003c44 <_localeconv_r+0x4>)
 8003c42:	4770      	bx	lr
 8003c44:	20000248 	.word	0x20000248

08003c48 <_close_r>:
 8003c48:	b538      	push	{r3, r4, r5, lr}
 8003c4a:	4d06      	ldr	r5, [pc, #24]	@ (8003c64 <_close_r+0x1c>)
 8003c4c:	2300      	movs	r3, #0
 8003c4e:	4604      	mov	r4, r0
 8003c50:	4608      	mov	r0, r1
 8003c52:	602b      	str	r3, [r5, #0]
 8003c54:	f7fd fca4 	bl	80015a0 <_close>
 8003c58:	1c43      	adds	r3, r0, #1
 8003c5a:	d102      	bne.n	8003c62 <_close_r+0x1a>
 8003c5c:	682b      	ldr	r3, [r5, #0]
 8003c5e:	b103      	cbz	r3, 8003c62 <_close_r+0x1a>
 8003c60:	6023      	str	r3, [r4, #0]
 8003c62:	bd38      	pop	{r3, r4, r5, pc}
 8003c64:	20000508 	.word	0x20000508

08003c68 <_lseek_r>:
 8003c68:	b538      	push	{r3, r4, r5, lr}
 8003c6a:	4d07      	ldr	r5, [pc, #28]	@ (8003c88 <_lseek_r+0x20>)
 8003c6c:	4604      	mov	r4, r0
 8003c6e:	4608      	mov	r0, r1
 8003c70:	4611      	mov	r1, r2
 8003c72:	2200      	movs	r2, #0
 8003c74:	602a      	str	r2, [r5, #0]
 8003c76:	461a      	mov	r2, r3
 8003c78:	f7fd fc9c 	bl	80015b4 <_lseek>
 8003c7c:	1c43      	adds	r3, r0, #1
 8003c7e:	d102      	bne.n	8003c86 <_lseek_r+0x1e>
 8003c80:	682b      	ldr	r3, [r5, #0]
 8003c82:	b103      	cbz	r3, 8003c86 <_lseek_r+0x1e>
 8003c84:	6023      	str	r3, [r4, #0]
 8003c86:	bd38      	pop	{r3, r4, r5, pc}
 8003c88:	20000508 	.word	0x20000508

08003c8c <_read_r>:
 8003c8c:	b538      	push	{r3, r4, r5, lr}
 8003c8e:	4d07      	ldr	r5, [pc, #28]	@ (8003cac <_read_r+0x20>)
 8003c90:	4604      	mov	r4, r0
 8003c92:	4608      	mov	r0, r1
 8003c94:	4611      	mov	r1, r2
 8003c96:	2200      	movs	r2, #0
 8003c98:	602a      	str	r2, [r5, #0]
 8003c9a:	461a      	mov	r2, r3
 8003c9c:	f7fd fc70 	bl	8001580 <_read>
 8003ca0:	1c43      	adds	r3, r0, #1
 8003ca2:	d102      	bne.n	8003caa <_read_r+0x1e>
 8003ca4:	682b      	ldr	r3, [r5, #0]
 8003ca6:	b103      	cbz	r3, 8003caa <_read_r+0x1e>
 8003ca8:	6023      	str	r3, [r4, #0]
 8003caa:	bd38      	pop	{r3, r4, r5, pc}
 8003cac:	20000508 	.word	0x20000508

08003cb0 <_write_r>:
 8003cb0:	b538      	push	{r3, r4, r5, lr}
 8003cb2:	4d07      	ldr	r5, [pc, #28]	@ (8003cd0 <_write_r+0x20>)
 8003cb4:	4604      	mov	r4, r0
 8003cb6:	4608      	mov	r0, r1
 8003cb8:	4611      	mov	r1, r2
 8003cba:	2200      	movs	r2, #0
 8003cbc:	602a      	str	r2, [r5, #0]
 8003cbe:	461a      	mov	r2, r3
 8003cc0:	f7fd f95a 	bl	8000f78 <_write>
 8003cc4:	1c43      	adds	r3, r0, #1
 8003cc6:	d102      	bne.n	8003cce <_write_r+0x1e>
 8003cc8:	682b      	ldr	r3, [r5, #0]
 8003cca:	b103      	cbz	r3, 8003cce <_write_r+0x1e>
 8003ccc:	6023      	str	r3, [r4, #0]
 8003cce:	bd38      	pop	{r3, r4, r5, pc}
 8003cd0:	20000508 	.word	0x20000508

08003cd4 <__errno>:
 8003cd4:	4b01      	ldr	r3, [pc, #4]	@ (8003cdc <__errno+0x8>)
 8003cd6:	6818      	ldr	r0, [r3, #0]
 8003cd8:	4770      	bx	lr
 8003cda:	bf00      	nop
 8003cdc:	20000108 	.word	0x20000108

08003ce0 <__libc_init_array>:
 8003ce0:	b570      	push	{r4, r5, r6, lr}
 8003ce2:	4d0d      	ldr	r5, [pc, #52]	@ (8003d18 <__libc_init_array+0x38>)
 8003ce4:	4c0d      	ldr	r4, [pc, #52]	@ (8003d1c <__libc_init_array+0x3c>)
 8003ce6:	1b64      	subs	r4, r4, r5
 8003ce8:	10a4      	asrs	r4, r4, #2
 8003cea:	2600      	movs	r6, #0
 8003cec:	42a6      	cmp	r6, r4
 8003cee:	d109      	bne.n	8003d04 <__libc_init_array+0x24>
 8003cf0:	4d0b      	ldr	r5, [pc, #44]	@ (8003d20 <__libc_init_array+0x40>)
 8003cf2:	4c0c      	ldr	r4, [pc, #48]	@ (8003d24 <__libc_init_array+0x44>)
 8003cf4:	f001 fef6 	bl	8005ae4 <_init>
 8003cf8:	1b64      	subs	r4, r4, r5
 8003cfa:	10a4      	asrs	r4, r4, #2
 8003cfc:	2600      	movs	r6, #0
 8003cfe:	42a6      	cmp	r6, r4
 8003d00:	d105      	bne.n	8003d0e <__libc_init_array+0x2e>
 8003d02:	bd70      	pop	{r4, r5, r6, pc}
 8003d04:	f855 3b04 	ldr.w	r3, [r5], #4
 8003d08:	4798      	blx	r3
 8003d0a:	3601      	adds	r6, #1
 8003d0c:	e7ee      	b.n	8003cec <__libc_init_array+0xc>
 8003d0e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003d12:	4798      	blx	r3
 8003d14:	3601      	adds	r6, #1
 8003d16:	e7f2      	b.n	8003cfe <__libc_init_array+0x1e>
 8003d18:	08005f24 	.word	0x08005f24
 8003d1c:	08005f24 	.word	0x08005f24
 8003d20:	08005f24 	.word	0x08005f24
 8003d24:	08005f28 	.word	0x08005f28

08003d28 <__retarget_lock_init_recursive>:
 8003d28:	4770      	bx	lr

08003d2a <__retarget_lock_acquire_recursive>:
 8003d2a:	4770      	bx	lr

08003d2c <__retarget_lock_release_recursive>:
 8003d2c:	4770      	bx	lr

08003d2e <quorem>:
 8003d2e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003d32:	6903      	ldr	r3, [r0, #16]
 8003d34:	690c      	ldr	r4, [r1, #16]
 8003d36:	42a3      	cmp	r3, r4
 8003d38:	4607      	mov	r7, r0
 8003d3a:	db7e      	blt.n	8003e3a <quorem+0x10c>
 8003d3c:	3c01      	subs	r4, #1
 8003d3e:	f101 0814 	add.w	r8, r1, #20
 8003d42:	00a3      	lsls	r3, r4, #2
 8003d44:	f100 0514 	add.w	r5, r0, #20
 8003d48:	9300      	str	r3, [sp, #0]
 8003d4a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8003d4e:	9301      	str	r3, [sp, #4]
 8003d50:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8003d54:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8003d58:	3301      	adds	r3, #1
 8003d5a:	429a      	cmp	r2, r3
 8003d5c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8003d60:	fbb2 f6f3 	udiv	r6, r2, r3
 8003d64:	d32e      	bcc.n	8003dc4 <quorem+0x96>
 8003d66:	f04f 0a00 	mov.w	sl, #0
 8003d6a:	46c4      	mov	ip, r8
 8003d6c:	46ae      	mov	lr, r5
 8003d6e:	46d3      	mov	fp, sl
 8003d70:	f85c 3b04 	ldr.w	r3, [ip], #4
 8003d74:	b298      	uxth	r0, r3
 8003d76:	fb06 a000 	mla	r0, r6, r0, sl
 8003d7a:	0c02      	lsrs	r2, r0, #16
 8003d7c:	0c1b      	lsrs	r3, r3, #16
 8003d7e:	fb06 2303 	mla	r3, r6, r3, r2
 8003d82:	f8de 2000 	ldr.w	r2, [lr]
 8003d86:	b280      	uxth	r0, r0
 8003d88:	b292      	uxth	r2, r2
 8003d8a:	1a12      	subs	r2, r2, r0
 8003d8c:	445a      	add	r2, fp
 8003d8e:	f8de 0000 	ldr.w	r0, [lr]
 8003d92:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8003d96:	b29b      	uxth	r3, r3
 8003d98:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8003d9c:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8003da0:	b292      	uxth	r2, r2
 8003da2:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8003da6:	45e1      	cmp	r9, ip
 8003da8:	f84e 2b04 	str.w	r2, [lr], #4
 8003dac:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8003db0:	d2de      	bcs.n	8003d70 <quorem+0x42>
 8003db2:	9b00      	ldr	r3, [sp, #0]
 8003db4:	58eb      	ldr	r3, [r5, r3]
 8003db6:	b92b      	cbnz	r3, 8003dc4 <quorem+0x96>
 8003db8:	9b01      	ldr	r3, [sp, #4]
 8003dba:	3b04      	subs	r3, #4
 8003dbc:	429d      	cmp	r5, r3
 8003dbe:	461a      	mov	r2, r3
 8003dc0:	d32f      	bcc.n	8003e22 <quorem+0xf4>
 8003dc2:	613c      	str	r4, [r7, #16]
 8003dc4:	4638      	mov	r0, r7
 8003dc6:	f001 f97d 	bl	80050c4 <__mcmp>
 8003dca:	2800      	cmp	r0, #0
 8003dcc:	db25      	blt.n	8003e1a <quorem+0xec>
 8003dce:	4629      	mov	r1, r5
 8003dd0:	2000      	movs	r0, #0
 8003dd2:	f858 2b04 	ldr.w	r2, [r8], #4
 8003dd6:	f8d1 c000 	ldr.w	ip, [r1]
 8003dda:	fa1f fe82 	uxth.w	lr, r2
 8003dde:	fa1f f38c 	uxth.w	r3, ip
 8003de2:	eba3 030e 	sub.w	r3, r3, lr
 8003de6:	4403      	add	r3, r0
 8003de8:	0c12      	lsrs	r2, r2, #16
 8003dea:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8003dee:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8003df2:	b29b      	uxth	r3, r3
 8003df4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8003df8:	45c1      	cmp	r9, r8
 8003dfa:	f841 3b04 	str.w	r3, [r1], #4
 8003dfe:	ea4f 4022 	mov.w	r0, r2, asr #16
 8003e02:	d2e6      	bcs.n	8003dd2 <quorem+0xa4>
 8003e04:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8003e08:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8003e0c:	b922      	cbnz	r2, 8003e18 <quorem+0xea>
 8003e0e:	3b04      	subs	r3, #4
 8003e10:	429d      	cmp	r5, r3
 8003e12:	461a      	mov	r2, r3
 8003e14:	d30b      	bcc.n	8003e2e <quorem+0x100>
 8003e16:	613c      	str	r4, [r7, #16]
 8003e18:	3601      	adds	r6, #1
 8003e1a:	4630      	mov	r0, r6
 8003e1c:	b003      	add	sp, #12
 8003e1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003e22:	6812      	ldr	r2, [r2, #0]
 8003e24:	3b04      	subs	r3, #4
 8003e26:	2a00      	cmp	r2, #0
 8003e28:	d1cb      	bne.n	8003dc2 <quorem+0x94>
 8003e2a:	3c01      	subs	r4, #1
 8003e2c:	e7c6      	b.n	8003dbc <quorem+0x8e>
 8003e2e:	6812      	ldr	r2, [r2, #0]
 8003e30:	3b04      	subs	r3, #4
 8003e32:	2a00      	cmp	r2, #0
 8003e34:	d1ef      	bne.n	8003e16 <quorem+0xe8>
 8003e36:	3c01      	subs	r4, #1
 8003e38:	e7ea      	b.n	8003e10 <quorem+0xe2>
 8003e3a:	2000      	movs	r0, #0
 8003e3c:	e7ee      	b.n	8003e1c <quorem+0xee>
	...

08003e40 <_dtoa_r>:
 8003e40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003e44:	69c7      	ldr	r7, [r0, #28]
 8003e46:	b097      	sub	sp, #92	@ 0x5c
 8003e48:	ed8d 0b04 	vstr	d0, [sp, #16]
 8003e4c:	ec55 4b10 	vmov	r4, r5, d0
 8003e50:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 8003e52:	9107      	str	r1, [sp, #28]
 8003e54:	4681      	mov	r9, r0
 8003e56:	920c      	str	r2, [sp, #48]	@ 0x30
 8003e58:	9311      	str	r3, [sp, #68]	@ 0x44
 8003e5a:	b97f      	cbnz	r7, 8003e7c <_dtoa_r+0x3c>
 8003e5c:	2010      	movs	r0, #16
 8003e5e:	f000 fe09 	bl	8004a74 <malloc>
 8003e62:	4602      	mov	r2, r0
 8003e64:	f8c9 001c 	str.w	r0, [r9, #28]
 8003e68:	b920      	cbnz	r0, 8003e74 <_dtoa_r+0x34>
 8003e6a:	4ba9      	ldr	r3, [pc, #676]	@ (8004110 <_dtoa_r+0x2d0>)
 8003e6c:	21ef      	movs	r1, #239	@ 0xef
 8003e6e:	48a9      	ldr	r0, [pc, #676]	@ (8004114 <_dtoa_r+0x2d4>)
 8003e70:	f001 fd04 	bl	800587c <__assert_func>
 8003e74:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8003e78:	6007      	str	r7, [r0, #0]
 8003e7a:	60c7      	str	r7, [r0, #12]
 8003e7c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8003e80:	6819      	ldr	r1, [r3, #0]
 8003e82:	b159      	cbz	r1, 8003e9c <_dtoa_r+0x5c>
 8003e84:	685a      	ldr	r2, [r3, #4]
 8003e86:	604a      	str	r2, [r1, #4]
 8003e88:	2301      	movs	r3, #1
 8003e8a:	4093      	lsls	r3, r2
 8003e8c:	608b      	str	r3, [r1, #8]
 8003e8e:	4648      	mov	r0, r9
 8003e90:	f000 fee6 	bl	8004c60 <_Bfree>
 8003e94:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8003e98:	2200      	movs	r2, #0
 8003e9a:	601a      	str	r2, [r3, #0]
 8003e9c:	1e2b      	subs	r3, r5, #0
 8003e9e:	bfb9      	ittee	lt
 8003ea0:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8003ea4:	9305      	strlt	r3, [sp, #20]
 8003ea6:	2300      	movge	r3, #0
 8003ea8:	6033      	strge	r3, [r6, #0]
 8003eaa:	9f05      	ldr	r7, [sp, #20]
 8003eac:	4b9a      	ldr	r3, [pc, #616]	@ (8004118 <_dtoa_r+0x2d8>)
 8003eae:	bfbc      	itt	lt
 8003eb0:	2201      	movlt	r2, #1
 8003eb2:	6032      	strlt	r2, [r6, #0]
 8003eb4:	43bb      	bics	r3, r7
 8003eb6:	d112      	bne.n	8003ede <_dtoa_r+0x9e>
 8003eb8:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8003eba:	f242 730f 	movw	r3, #9999	@ 0x270f
 8003ebe:	6013      	str	r3, [r2, #0]
 8003ec0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8003ec4:	4323      	orrs	r3, r4
 8003ec6:	f000 855a 	beq.w	800497e <_dtoa_r+0xb3e>
 8003eca:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8003ecc:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 800412c <_dtoa_r+0x2ec>
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	f000 855c 	beq.w	800498e <_dtoa_r+0xb4e>
 8003ed6:	f10a 0303 	add.w	r3, sl, #3
 8003eda:	f000 bd56 	b.w	800498a <_dtoa_r+0xb4a>
 8003ede:	ed9d 7b04 	vldr	d7, [sp, #16]
 8003ee2:	2200      	movs	r2, #0
 8003ee4:	ec51 0b17 	vmov	r0, r1, d7
 8003ee8:	2300      	movs	r3, #0
 8003eea:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 8003eee:	f7fc fdf3 	bl	8000ad8 <__aeabi_dcmpeq>
 8003ef2:	4680      	mov	r8, r0
 8003ef4:	b158      	cbz	r0, 8003f0e <_dtoa_r+0xce>
 8003ef6:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8003ef8:	2301      	movs	r3, #1
 8003efa:	6013      	str	r3, [r2, #0]
 8003efc:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8003efe:	b113      	cbz	r3, 8003f06 <_dtoa_r+0xc6>
 8003f00:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8003f02:	4b86      	ldr	r3, [pc, #536]	@ (800411c <_dtoa_r+0x2dc>)
 8003f04:	6013      	str	r3, [r2, #0]
 8003f06:	f8df a228 	ldr.w	sl, [pc, #552]	@ 8004130 <_dtoa_r+0x2f0>
 8003f0a:	f000 bd40 	b.w	800498e <_dtoa_r+0xb4e>
 8003f0e:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 8003f12:	aa14      	add	r2, sp, #80	@ 0x50
 8003f14:	a915      	add	r1, sp, #84	@ 0x54
 8003f16:	4648      	mov	r0, r9
 8003f18:	f001 f984 	bl	8005224 <__d2b>
 8003f1c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8003f20:	9002      	str	r0, [sp, #8]
 8003f22:	2e00      	cmp	r6, #0
 8003f24:	d078      	beq.n	8004018 <_dtoa_r+0x1d8>
 8003f26:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8003f28:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 8003f2c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003f30:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8003f34:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8003f38:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8003f3c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8003f40:	4619      	mov	r1, r3
 8003f42:	2200      	movs	r2, #0
 8003f44:	4b76      	ldr	r3, [pc, #472]	@ (8004120 <_dtoa_r+0x2e0>)
 8003f46:	f7fc f9a7 	bl	8000298 <__aeabi_dsub>
 8003f4a:	a36b      	add	r3, pc, #428	@ (adr r3, 80040f8 <_dtoa_r+0x2b8>)
 8003f4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f50:	f7fc fb5a 	bl	8000608 <__aeabi_dmul>
 8003f54:	a36a      	add	r3, pc, #424	@ (adr r3, 8004100 <_dtoa_r+0x2c0>)
 8003f56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f5a:	f7fc f99f 	bl	800029c <__adddf3>
 8003f5e:	4604      	mov	r4, r0
 8003f60:	4630      	mov	r0, r6
 8003f62:	460d      	mov	r5, r1
 8003f64:	f7fc fae6 	bl	8000534 <__aeabi_i2d>
 8003f68:	a367      	add	r3, pc, #412	@ (adr r3, 8004108 <_dtoa_r+0x2c8>)
 8003f6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f6e:	f7fc fb4b 	bl	8000608 <__aeabi_dmul>
 8003f72:	4602      	mov	r2, r0
 8003f74:	460b      	mov	r3, r1
 8003f76:	4620      	mov	r0, r4
 8003f78:	4629      	mov	r1, r5
 8003f7a:	f7fc f98f 	bl	800029c <__adddf3>
 8003f7e:	4604      	mov	r4, r0
 8003f80:	460d      	mov	r5, r1
 8003f82:	f7fc fdf1 	bl	8000b68 <__aeabi_d2iz>
 8003f86:	2200      	movs	r2, #0
 8003f88:	4607      	mov	r7, r0
 8003f8a:	2300      	movs	r3, #0
 8003f8c:	4620      	mov	r0, r4
 8003f8e:	4629      	mov	r1, r5
 8003f90:	f7fc fdac 	bl	8000aec <__aeabi_dcmplt>
 8003f94:	b140      	cbz	r0, 8003fa8 <_dtoa_r+0x168>
 8003f96:	4638      	mov	r0, r7
 8003f98:	f7fc facc 	bl	8000534 <__aeabi_i2d>
 8003f9c:	4622      	mov	r2, r4
 8003f9e:	462b      	mov	r3, r5
 8003fa0:	f7fc fd9a 	bl	8000ad8 <__aeabi_dcmpeq>
 8003fa4:	b900      	cbnz	r0, 8003fa8 <_dtoa_r+0x168>
 8003fa6:	3f01      	subs	r7, #1
 8003fa8:	2f16      	cmp	r7, #22
 8003faa:	d852      	bhi.n	8004052 <_dtoa_r+0x212>
 8003fac:	4b5d      	ldr	r3, [pc, #372]	@ (8004124 <_dtoa_r+0x2e4>)
 8003fae:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8003fb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fb6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8003fba:	f7fc fd97 	bl	8000aec <__aeabi_dcmplt>
 8003fbe:	2800      	cmp	r0, #0
 8003fc0:	d049      	beq.n	8004056 <_dtoa_r+0x216>
 8003fc2:	3f01      	subs	r7, #1
 8003fc4:	2300      	movs	r3, #0
 8003fc6:	9310      	str	r3, [sp, #64]	@ 0x40
 8003fc8:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8003fca:	1b9b      	subs	r3, r3, r6
 8003fcc:	1e5a      	subs	r2, r3, #1
 8003fce:	bf45      	ittet	mi
 8003fd0:	f1c3 0301 	rsbmi	r3, r3, #1
 8003fd4:	9300      	strmi	r3, [sp, #0]
 8003fd6:	2300      	movpl	r3, #0
 8003fd8:	2300      	movmi	r3, #0
 8003fda:	9206      	str	r2, [sp, #24]
 8003fdc:	bf54      	ite	pl
 8003fde:	9300      	strpl	r3, [sp, #0]
 8003fe0:	9306      	strmi	r3, [sp, #24]
 8003fe2:	2f00      	cmp	r7, #0
 8003fe4:	db39      	blt.n	800405a <_dtoa_r+0x21a>
 8003fe6:	9b06      	ldr	r3, [sp, #24]
 8003fe8:	970d      	str	r7, [sp, #52]	@ 0x34
 8003fea:	443b      	add	r3, r7
 8003fec:	9306      	str	r3, [sp, #24]
 8003fee:	2300      	movs	r3, #0
 8003ff0:	9308      	str	r3, [sp, #32]
 8003ff2:	9b07      	ldr	r3, [sp, #28]
 8003ff4:	2b09      	cmp	r3, #9
 8003ff6:	d863      	bhi.n	80040c0 <_dtoa_r+0x280>
 8003ff8:	2b05      	cmp	r3, #5
 8003ffa:	bfc4      	itt	gt
 8003ffc:	3b04      	subgt	r3, #4
 8003ffe:	9307      	strgt	r3, [sp, #28]
 8004000:	9b07      	ldr	r3, [sp, #28]
 8004002:	f1a3 0302 	sub.w	r3, r3, #2
 8004006:	bfcc      	ite	gt
 8004008:	2400      	movgt	r4, #0
 800400a:	2401      	movle	r4, #1
 800400c:	2b03      	cmp	r3, #3
 800400e:	d863      	bhi.n	80040d8 <_dtoa_r+0x298>
 8004010:	e8df f003 	tbb	[pc, r3]
 8004014:	2b375452 	.word	0x2b375452
 8004018:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800401c:	441e      	add	r6, r3
 800401e:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8004022:	2b20      	cmp	r3, #32
 8004024:	bfc1      	itttt	gt
 8004026:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800402a:	409f      	lslgt	r7, r3
 800402c:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8004030:	fa24 f303 	lsrgt.w	r3, r4, r3
 8004034:	bfd6      	itet	le
 8004036:	f1c3 0320 	rsble	r3, r3, #32
 800403a:	ea47 0003 	orrgt.w	r0, r7, r3
 800403e:	fa04 f003 	lslle.w	r0, r4, r3
 8004042:	f7fc fa67 	bl	8000514 <__aeabi_ui2d>
 8004046:	2201      	movs	r2, #1
 8004048:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800404c:	3e01      	subs	r6, #1
 800404e:	9212      	str	r2, [sp, #72]	@ 0x48
 8004050:	e776      	b.n	8003f40 <_dtoa_r+0x100>
 8004052:	2301      	movs	r3, #1
 8004054:	e7b7      	b.n	8003fc6 <_dtoa_r+0x186>
 8004056:	9010      	str	r0, [sp, #64]	@ 0x40
 8004058:	e7b6      	b.n	8003fc8 <_dtoa_r+0x188>
 800405a:	9b00      	ldr	r3, [sp, #0]
 800405c:	1bdb      	subs	r3, r3, r7
 800405e:	9300      	str	r3, [sp, #0]
 8004060:	427b      	negs	r3, r7
 8004062:	9308      	str	r3, [sp, #32]
 8004064:	2300      	movs	r3, #0
 8004066:	930d      	str	r3, [sp, #52]	@ 0x34
 8004068:	e7c3      	b.n	8003ff2 <_dtoa_r+0x1b2>
 800406a:	2301      	movs	r3, #1
 800406c:	9309      	str	r3, [sp, #36]	@ 0x24
 800406e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8004070:	eb07 0b03 	add.w	fp, r7, r3
 8004074:	f10b 0301 	add.w	r3, fp, #1
 8004078:	2b01      	cmp	r3, #1
 800407a:	9303      	str	r3, [sp, #12]
 800407c:	bfb8      	it	lt
 800407e:	2301      	movlt	r3, #1
 8004080:	e006      	b.n	8004090 <_dtoa_r+0x250>
 8004082:	2301      	movs	r3, #1
 8004084:	9309      	str	r3, [sp, #36]	@ 0x24
 8004086:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8004088:	2b00      	cmp	r3, #0
 800408a:	dd28      	ble.n	80040de <_dtoa_r+0x29e>
 800408c:	469b      	mov	fp, r3
 800408e:	9303      	str	r3, [sp, #12]
 8004090:	f8d9 001c 	ldr.w	r0, [r9, #28]
 8004094:	2100      	movs	r1, #0
 8004096:	2204      	movs	r2, #4
 8004098:	f102 0514 	add.w	r5, r2, #20
 800409c:	429d      	cmp	r5, r3
 800409e:	d926      	bls.n	80040ee <_dtoa_r+0x2ae>
 80040a0:	6041      	str	r1, [r0, #4]
 80040a2:	4648      	mov	r0, r9
 80040a4:	f000 fd9c 	bl	8004be0 <_Balloc>
 80040a8:	4682      	mov	sl, r0
 80040aa:	2800      	cmp	r0, #0
 80040ac:	d142      	bne.n	8004134 <_dtoa_r+0x2f4>
 80040ae:	4b1e      	ldr	r3, [pc, #120]	@ (8004128 <_dtoa_r+0x2e8>)
 80040b0:	4602      	mov	r2, r0
 80040b2:	f240 11af 	movw	r1, #431	@ 0x1af
 80040b6:	e6da      	b.n	8003e6e <_dtoa_r+0x2e>
 80040b8:	2300      	movs	r3, #0
 80040ba:	e7e3      	b.n	8004084 <_dtoa_r+0x244>
 80040bc:	2300      	movs	r3, #0
 80040be:	e7d5      	b.n	800406c <_dtoa_r+0x22c>
 80040c0:	2401      	movs	r4, #1
 80040c2:	2300      	movs	r3, #0
 80040c4:	9307      	str	r3, [sp, #28]
 80040c6:	9409      	str	r4, [sp, #36]	@ 0x24
 80040c8:	f04f 3bff 	mov.w	fp, #4294967295	@ 0xffffffff
 80040cc:	2200      	movs	r2, #0
 80040ce:	f8cd b00c 	str.w	fp, [sp, #12]
 80040d2:	2312      	movs	r3, #18
 80040d4:	920c      	str	r2, [sp, #48]	@ 0x30
 80040d6:	e7db      	b.n	8004090 <_dtoa_r+0x250>
 80040d8:	2301      	movs	r3, #1
 80040da:	9309      	str	r3, [sp, #36]	@ 0x24
 80040dc:	e7f4      	b.n	80040c8 <_dtoa_r+0x288>
 80040de:	f04f 0b01 	mov.w	fp, #1
 80040e2:	f8cd b00c 	str.w	fp, [sp, #12]
 80040e6:	465b      	mov	r3, fp
 80040e8:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 80040ec:	e7d0      	b.n	8004090 <_dtoa_r+0x250>
 80040ee:	3101      	adds	r1, #1
 80040f0:	0052      	lsls	r2, r2, #1
 80040f2:	e7d1      	b.n	8004098 <_dtoa_r+0x258>
 80040f4:	f3af 8000 	nop.w
 80040f8:	636f4361 	.word	0x636f4361
 80040fc:	3fd287a7 	.word	0x3fd287a7
 8004100:	8b60c8b3 	.word	0x8b60c8b3
 8004104:	3fc68a28 	.word	0x3fc68a28
 8004108:	509f79fb 	.word	0x509f79fb
 800410c:	3fd34413 	.word	0x3fd34413
 8004110:	08005be5 	.word	0x08005be5
 8004114:	08005bfc 	.word	0x08005bfc
 8004118:	7ff00000 	.word	0x7ff00000
 800411c:	08005bb5 	.word	0x08005bb5
 8004120:	3ff80000 	.word	0x3ff80000
 8004124:	08005d50 	.word	0x08005d50
 8004128:	08005c54 	.word	0x08005c54
 800412c:	08005be1 	.word	0x08005be1
 8004130:	08005bb4 	.word	0x08005bb4
 8004134:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8004138:	6018      	str	r0, [r3, #0]
 800413a:	9b03      	ldr	r3, [sp, #12]
 800413c:	2b0e      	cmp	r3, #14
 800413e:	f200 80a1 	bhi.w	8004284 <_dtoa_r+0x444>
 8004142:	2c00      	cmp	r4, #0
 8004144:	f000 809e 	beq.w	8004284 <_dtoa_r+0x444>
 8004148:	2f00      	cmp	r7, #0
 800414a:	dd33      	ble.n	80041b4 <_dtoa_r+0x374>
 800414c:	4b9c      	ldr	r3, [pc, #624]	@ (80043c0 <_dtoa_r+0x580>)
 800414e:	f007 020f 	and.w	r2, r7, #15
 8004152:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004156:	ed93 7b00 	vldr	d7, [r3]
 800415a:	05f8      	lsls	r0, r7, #23
 800415c:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 8004160:	ea4f 1427 	mov.w	r4, r7, asr #4
 8004164:	d516      	bpl.n	8004194 <_dtoa_r+0x354>
 8004166:	4b97      	ldr	r3, [pc, #604]	@ (80043c4 <_dtoa_r+0x584>)
 8004168:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800416c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8004170:	f7fc fb74 	bl	800085c <__aeabi_ddiv>
 8004174:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004178:	f004 040f 	and.w	r4, r4, #15
 800417c:	2603      	movs	r6, #3
 800417e:	4d91      	ldr	r5, [pc, #580]	@ (80043c4 <_dtoa_r+0x584>)
 8004180:	b954      	cbnz	r4, 8004198 <_dtoa_r+0x358>
 8004182:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8004186:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800418a:	f7fc fb67 	bl	800085c <__aeabi_ddiv>
 800418e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004192:	e028      	b.n	80041e6 <_dtoa_r+0x3a6>
 8004194:	2602      	movs	r6, #2
 8004196:	e7f2      	b.n	800417e <_dtoa_r+0x33e>
 8004198:	07e1      	lsls	r1, r4, #31
 800419a:	d508      	bpl.n	80041ae <_dtoa_r+0x36e>
 800419c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 80041a0:	e9d5 2300 	ldrd	r2, r3, [r5]
 80041a4:	f7fc fa30 	bl	8000608 <__aeabi_dmul>
 80041a8:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80041ac:	3601      	adds	r6, #1
 80041ae:	1064      	asrs	r4, r4, #1
 80041b0:	3508      	adds	r5, #8
 80041b2:	e7e5      	b.n	8004180 <_dtoa_r+0x340>
 80041b4:	f000 80af 	beq.w	8004316 <_dtoa_r+0x4d6>
 80041b8:	427c      	negs	r4, r7
 80041ba:	4b81      	ldr	r3, [pc, #516]	@ (80043c0 <_dtoa_r+0x580>)
 80041bc:	4d81      	ldr	r5, [pc, #516]	@ (80043c4 <_dtoa_r+0x584>)
 80041be:	f004 020f 	and.w	r2, r4, #15
 80041c2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80041c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041ca:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80041ce:	f7fc fa1b 	bl	8000608 <__aeabi_dmul>
 80041d2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80041d6:	1124      	asrs	r4, r4, #4
 80041d8:	2300      	movs	r3, #0
 80041da:	2602      	movs	r6, #2
 80041dc:	2c00      	cmp	r4, #0
 80041de:	f040 808f 	bne.w	8004300 <_dtoa_r+0x4c0>
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d1d3      	bne.n	800418e <_dtoa_r+0x34e>
 80041e6:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80041e8:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	f000 8094 	beq.w	800431a <_dtoa_r+0x4da>
 80041f2:	4b75      	ldr	r3, [pc, #468]	@ (80043c8 <_dtoa_r+0x588>)
 80041f4:	2200      	movs	r2, #0
 80041f6:	4620      	mov	r0, r4
 80041f8:	4629      	mov	r1, r5
 80041fa:	f7fc fc77 	bl	8000aec <__aeabi_dcmplt>
 80041fe:	2800      	cmp	r0, #0
 8004200:	f000 808b 	beq.w	800431a <_dtoa_r+0x4da>
 8004204:	9b03      	ldr	r3, [sp, #12]
 8004206:	2b00      	cmp	r3, #0
 8004208:	f000 8087 	beq.w	800431a <_dtoa_r+0x4da>
 800420c:	f1bb 0f00 	cmp.w	fp, #0
 8004210:	dd34      	ble.n	800427c <_dtoa_r+0x43c>
 8004212:	4620      	mov	r0, r4
 8004214:	4b6d      	ldr	r3, [pc, #436]	@ (80043cc <_dtoa_r+0x58c>)
 8004216:	2200      	movs	r2, #0
 8004218:	4629      	mov	r1, r5
 800421a:	f7fc f9f5 	bl	8000608 <__aeabi_dmul>
 800421e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004222:	f107 38ff 	add.w	r8, r7, #4294967295	@ 0xffffffff
 8004226:	3601      	adds	r6, #1
 8004228:	465c      	mov	r4, fp
 800422a:	4630      	mov	r0, r6
 800422c:	f7fc f982 	bl	8000534 <__aeabi_i2d>
 8004230:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004234:	f7fc f9e8 	bl	8000608 <__aeabi_dmul>
 8004238:	4b65      	ldr	r3, [pc, #404]	@ (80043d0 <_dtoa_r+0x590>)
 800423a:	2200      	movs	r2, #0
 800423c:	f7fc f82e 	bl	800029c <__adddf3>
 8004240:	4605      	mov	r5, r0
 8004242:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8004246:	2c00      	cmp	r4, #0
 8004248:	d16a      	bne.n	8004320 <_dtoa_r+0x4e0>
 800424a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800424e:	4b61      	ldr	r3, [pc, #388]	@ (80043d4 <_dtoa_r+0x594>)
 8004250:	2200      	movs	r2, #0
 8004252:	f7fc f821 	bl	8000298 <__aeabi_dsub>
 8004256:	4602      	mov	r2, r0
 8004258:	460b      	mov	r3, r1
 800425a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800425e:	462a      	mov	r2, r5
 8004260:	4633      	mov	r3, r6
 8004262:	f7fc fc61 	bl	8000b28 <__aeabi_dcmpgt>
 8004266:	2800      	cmp	r0, #0
 8004268:	f040 8298 	bne.w	800479c <_dtoa_r+0x95c>
 800426c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004270:	462a      	mov	r2, r5
 8004272:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8004276:	f7fc fc39 	bl	8000aec <__aeabi_dcmplt>
 800427a:	bb38      	cbnz	r0, 80042cc <_dtoa_r+0x48c>
 800427c:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 8004280:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8004284:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8004286:	2b00      	cmp	r3, #0
 8004288:	f2c0 8157 	blt.w	800453a <_dtoa_r+0x6fa>
 800428c:	2f0e      	cmp	r7, #14
 800428e:	f300 8154 	bgt.w	800453a <_dtoa_r+0x6fa>
 8004292:	4b4b      	ldr	r3, [pc, #300]	@ (80043c0 <_dtoa_r+0x580>)
 8004294:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8004298:	ed93 7b00 	vldr	d7, [r3]
 800429c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800429e:	2b00      	cmp	r3, #0
 80042a0:	ed8d 7b00 	vstr	d7, [sp]
 80042a4:	f280 80e5 	bge.w	8004472 <_dtoa_r+0x632>
 80042a8:	9b03      	ldr	r3, [sp, #12]
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	f300 80e1 	bgt.w	8004472 <_dtoa_r+0x632>
 80042b0:	d10c      	bne.n	80042cc <_dtoa_r+0x48c>
 80042b2:	4b48      	ldr	r3, [pc, #288]	@ (80043d4 <_dtoa_r+0x594>)
 80042b4:	2200      	movs	r2, #0
 80042b6:	ec51 0b17 	vmov	r0, r1, d7
 80042ba:	f7fc f9a5 	bl	8000608 <__aeabi_dmul>
 80042be:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80042c2:	f7fc fc27 	bl	8000b14 <__aeabi_dcmpge>
 80042c6:	2800      	cmp	r0, #0
 80042c8:	f000 8266 	beq.w	8004798 <_dtoa_r+0x958>
 80042cc:	2400      	movs	r4, #0
 80042ce:	4625      	mov	r5, r4
 80042d0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80042d2:	4656      	mov	r6, sl
 80042d4:	ea6f 0803 	mvn.w	r8, r3
 80042d8:	2700      	movs	r7, #0
 80042da:	4621      	mov	r1, r4
 80042dc:	4648      	mov	r0, r9
 80042de:	f000 fcbf 	bl	8004c60 <_Bfree>
 80042e2:	2d00      	cmp	r5, #0
 80042e4:	f000 80bd 	beq.w	8004462 <_dtoa_r+0x622>
 80042e8:	b12f      	cbz	r7, 80042f6 <_dtoa_r+0x4b6>
 80042ea:	42af      	cmp	r7, r5
 80042ec:	d003      	beq.n	80042f6 <_dtoa_r+0x4b6>
 80042ee:	4639      	mov	r1, r7
 80042f0:	4648      	mov	r0, r9
 80042f2:	f000 fcb5 	bl	8004c60 <_Bfree>
 80042f6:	4629      	mov	r1, r5
 80042f8:	4648      	mov	r0, r9
 80042fa:	f000 fcb1 	bl	8004c60 <_Bfree>
 80042fe:	e0b0      	b.n	8004462 <_dtoa_r+0x622>
 8004300:	07e2      	lsls	r2, r4, #31
 8004302:	d505      	bpl.n	8004310 <_dtoa_r+0x4d0>
 8004304:	e9d5 2300 	ldrd	r2, r3, [r5]
 8004308:	f7fc f97e 	bl	8000608 <__aeabi_dmul>
 800430c:	3601      	adds	r6, #1
 800430e:	2301      	movs	r3, #1
 8004310:	1064      	asrs	r4, r4, #1
 8004312:	3508      	adds	r5, #8
 8004314:	e762      	b.n	80041dc <_dtoa_r+0x39c>
 8004316:	2602      	movs	r6, #2
 8004318:	e765      	b.n	80041e6 <_dtoa_r+0x3a6>
 800431a:	9c03      	ldr	r4, [sp, #12]
 800431c:	46b8      	mov	r8, r7
 800431e:	e784      	b.n	800422a <_dtoa_r+0x3ea>
 8004320:	4b27      	ldr	r3, [pc, #156]	@ (80043c0 <_dtoa_r+0x580>)
 8004322:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8004324:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8004328:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800432c:	4454      	add	r4, sl
 800432e:	2900      	cmp	r1, #0
 8004330:	d054      	beq.n	80043dc <_dtoa_r+0x59c>
 8004332:	4929      	ldr	r1, [pc, #164]	@ (80043d8 <_dtoa_r+0x598>)
 8004334:	2000      	movs	r0, #0
 8004336:	f7fc fa91 	bl	800085c <__aeabi_ddiv>
 800433a:	4633      	mov	r3, r6
 800433c:	462a      	mov	r2, r5
 800433e:	f7fb ffab 	bl	8000298 <__aeabi_dsub>
 8004342:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8004346:	4656      	mov	r6, sl
 8004348:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800434c:	f7fc fc0c 	bl	8000b68 <__aeabi_d2iz>
 8004350:	4605      	mov	r5, r0
 8004352:	f7fc f8ef 	bl	8000534 <__aeabi_i2d>
 8004356:	4602      	mov	r2, r0
 8004358:	460b      	mov	r3, r1
 800435a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800435e:	f7fb ff9b 	bl	8000298 <__aeabi_dsub>
 8004362:	3530      	adds	r5, #48	@ 0x30
 8004364:	4602      	mov	r2, r0
 8004366:	460b      	mov	r3, r1
 8004368:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800436c:	f806 5b01 	strb.w	r5, [r6], #1
 8004370:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8004374:	f7fc fbba 	bl	8000aec <__aeabi_dcmplt>
 8004378:	2800      	cmp	r0, #0
 800437a:	d172      	bne.n	8004462 <_dtoa_r+0x622>
 800437c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004380:	4911      	ldr	r1, [pc, #68]	@ (80043c8 <_dtoa_r+0x588>)
 8004382:	2000      	movs	r0, #0
 8004384:	f7fb ff88 	bl	8000298 <__aeabi_dsub>
 8004388:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800438c:	f7fc fbae 	bl	8000aec <__aeabi_dcmplt>
 8004390:	2800      	cmp	r0, #0
 8004392:	f040 80b4 	bne.w	80044fe <_dtoa_r+0x6be>
 8004396:	42a6      	cmp	r6, r4
 8004398:	f43f af70 	beq.w	800427c <_dtoa_r+0x43c>
 800439c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 80043a0:	4b0a      	ldr	r3, [pc, #40]	@ (80043cc <_dtoa_r+0x58c>)
 80043a2:	2200      	movs	r2, #0
 80043a4:	f7fc f930 	bl	8000608 <__aeabi_dmul>
 80043a8:	4b08      	ldr	r3, [pc, #32]	@ (80043cc <_dtoa_r+0x58c>)
 80043aa:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80043ae:	2200      	movs	r2, #0
 80043b0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80043b4:	f7fc f928 	bl	8000608 <__aeabi_dmul>
 80043b8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80043bc:	e7c4      	b.n	8004348 <_dtoa_r+0x508>
 80043be:	bf00      	nop
 80043c0:	08005d50 	.word	0x08005d50
 80043c4:	08005d28 	.word	0x08005d28
 80043c8:	3ff00000 	.word	0x3ff00000
 80043cc:	40240000 	.word	0x40240000
 80043d0:	401c0000 	.word	0x401c0000
 80043d4:	40140000 	.word	0x40140000
 80043d8:	3fe00000 	.word	0x3fe00000
 80043dc:	4631      	mov	r1, r6
 80043de:	4628      	mov	r0, r5
 80043e0:	f7fc f912 	bl	8000608 <__aeabi_dmul>
 80043e4:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80043e8:	9413      	str	r4, [sp, #76]	@ 0x4c
 80043ea:	4656      	mov	r6, sl
 80043ec:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80043f0:	f7fc fbba 	bl	8000b68 <__aeabi_d2iz>
 80043f4:	4605      	mov	r5, r0
 80043f6:	f7fc f89d 	bl	8000534 <__aeabi_i2d>
 80043fa:	4602      	mov	r2, r0
 80043fc:	460b      	mov	r3, r1
 80043fe:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004402:	f7fb ff49 	bl	8000298 <__aeabi_dsub>
 8004406:	3530      	adds	r5, #48	@ 0x30
 8004408:	f806 5b01 	strb.w	r5, [r6], #1
 800440c:	4602      	mov	r2, r0
 800440e:	460b      	mov	r3, r1
 8004410:	42a6      	cmp	r6, r4
 8004412:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8004416:	f04f 0200 	mov.w	r2, #0
 800441a:	d124      	bne.n	8004466 <_dtoa_r+0x626>
 800441c:	4baf      	ldr	r3, [pc, #700]	@ (80046dc <_dtoa_r+0x89c>)
 800441e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8004422:	f7fb ff3b 	bl	800029c <__adddf3>
 8004426:	4602      	mov	r2, r0
 8004428:	460b      	mov	r3, r1
 800442a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800442e:	f7fc fb7b 	bl	8000b28 <__aeabi_dcmpgt>
 8004432:	2800      	cmp	r0, #0
 8004434:	d163      	bne.n	80044fe <_dtoa_r+0x6be>
 8004436:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800443a:	49a8      	ldr	r1, [pc, #672]	@ (80046dc <_dtoa_r+0x89c>)
 800443c:	2000      	movs	r0, #0
 800443e:	f7fb ff2b 	bl	8000298 <__aeabi_dsub>
 8004442:	4602      	mov	r2, r0
 8004444:	460b      	mov	r3, r1
 8004446:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800444a:	f7fc fb4f 	bl	8000aec <__aeabi_dcmplt>
 800444e:	2800      	cmp	r0, #0
 8004450:	f43f af14 	beq.w	800427c <_dtoa_r+0x43c>
 8004454:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8004456:	1e73      	subs	r3, r6, #1
 8004458:	9313      	str	r3, [sp, #76]	@ 0x4c
 800445a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800445e:	2b30      	cmp	r3, #48	@ 0x30
 8004460:	d0f8      	beq.n	8004454 <_dtoa_r+0x614>
 8004462:	4647      	mov	r7, r8
 8004464:	e03b      	b.n	80044de <_dtoa_r+0x69e>
 8004466:	4b9e      	ldr	r3, [pc, #632]	@ (80046e0 <_dtoa_r+0x8a0>)
 8004468:	f7fc f8ce 	bl	8000608 <__aeabi_dmul>
 800446c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004470:	e7bc      	b.n	80043ec <_dtoa_r+0x5ac>
 8004472:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8004476:	4656      	mov	r6, sl
 8004478:	e9dd 2300 	ldrd	r2, r3, [sp]
 800447c:	4620      	mov	r0, r4
 800447e:	4629      	mov	r1, r5
 8004480:	f7fc f9ec 	bl	800085c <__aeabi_ddiv>
 8004484:	f7fc fb70 	bl	8000b68 <__aeabi_d2iz>
 8004488:	4680      	mov	r8, r0
 800448a:	f7fc f853 	bl	8000534 <__aeabi_i2d>
 800448e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004492:	f7fc f8b9 	bl	8000608 <__aeabi_dmul>
 8004496:	4602      	mov	r2, r0
 8004498:	460b      	mov	r3, r1
 800449a:	4620      	mov	r0, r4
 800449c:	4629      	mov	r1, r5
 800449e:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80044a2:	f7fb fef9 	bl	8000298 <__aeabi_dsub>
 80044a6:	f806 4b01 	strb.w	r4, [r6], #1
 80044aa:	9d03      	ldr	r5, [sp, #12]
 80044ac:	eba6 040a 	sub.w	r4, r6, sl
 80044b0:	42a5      	cmp	r5, r4
 80044b2:	4602      	mov	r2, r0
 80044b4:	460b      	mov	r3, r1
 80044b6:	d133      	bne.n	8004520 <_dtoa_r+0x6e0>
 80044b8:	f7fb fef0 	bl	800029c <__adddf3>
 80044bc:	e9dd 2300 	ldrd	r2, r3, [sp]
 80044c0:	4604      	mov	r4, r0
 80044c2:	460d      	mov	r5, r1
 80044c4:	f7fc fb30 	bl	8000b28 <__aeabi_dcmpgt>
 80044c8:	b9c0      	cbnz	r0, 80044fc <_dtoa_r+0x6bc>
 80044ca:	e9dd 2300 	ldrd	r2, r3, [sp]
 80044ce:	4620      	mov	r0, r4
 80044d0:	4629      	mov	r1, r5
 80044d2:	f7fc fb01 	bl	8000ad8 <__aeabi_dcmpeq>
 80044d6:	b110      	cbz	r0, 80044de <_dtoa_r+0x69e>
 80044d8:	f018 0f01 	tst.w	r8, #1
 80044dc:	d10e      	bne.n	80044fc <_dtoa_r+0x6bc>
 80044de:	9902      	ldr	r1, [sp, #8]
 80044e0:	4648      	mov	r0, r9
 80044e2:	f000 fbbd 	bl	8004c60 <_Bfree>
 80044e6:	2300      	movs	r3, #0
 80044e8:	7033      	strb	r3, [r6, #0]
 80044ea:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80044ec:	3701      	adds	r7, #1
 80044ee:	601f      	str	r7, [r3, #0]
 80044f0:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	f000 824b 	beq.w	800498e <_dtoa_r+0xb4e>
 80044f8:	601e      	str	r6, [r3, #0]
 80044fa:	e248      	b.n	800498e <_dtoa_r+0xb4e>
 80044fc:	46b8      	mov	r8, r7
 80044fe:	4633      	mov	r3, r6
 8004500:	461e      	mov	r6, r3
 8004502:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8004506:	2a39      	cmp	r2, #57	@ 0x39
 8004508:	d106      	bne.n	8004518 <_dtoa_r+0x6d8>
 800450a:	459a      	cmp	sl, r3
 800450c:	d1f8      	bne.n	8004500 <_dtoa_r+0x6c0>
 800450e:	2230      	movs	r2, #48	@ 0x30
 8004510:	f108 0801 	add.w	r8, r8, #1
 8004514:	f88a 2000 	strb.w	r2, [sl]
 8004518:	781a      	ldrb	r2, [r3, #0]
 800451a:	3201      	adds	r2, #1
 800451c:	701a      	strb	r2, [r3, #0]
 800451e:	e7a0      	b.n	8004462 <_dtoa_r+0x622>
 8004520:	4b6f      	ldr	r3, [pc, #444]	@ (80046e0 <_dtoa_r+0x8a0>)
 8004522:	2200      	movs	r2, #0
 8004524:	f7fc f870 	bl	8000608 <__aeabi_dmul>
 8004528:	2200      	movs	r2, #0
 800452a:	2300      	movs	r3, #0
 800452c:	4604      	mov	r4, r0
 800452e:	460d      	mov	r5, r1
 8004530:	f7fc fad2 	bl	8000ad8 <__aeabi_dcmpeq>
 8004534:	2800      	cmp	r0, #0
 8004536:	d09f      	beq.n	8004478 <_dtoa_r+0x638>
 8004538:	e7d1      	b.n	80044de <_dtoa_r+0x69e>
 800453a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800453c:	2a00      	cmp	r2, #0
 800453e:	f000 80ea 	beq.w	8004716 <_dtoa_r+0x8d6>
 8004542:	9a07      	ldr	r2, [sp, #28]
 8004544:	2a01      	cmp	r2, #1
 8004546:	f300 80cd 	bgt.w	80046e4 <_dtoa_r+0x8a4>
 800454a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800454c:	2a00      	cmp	r2, #0
 800454e:	f000 80c1 	beq.w	80046d4 <_dtoa_r+0x894>
 8004552:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8004556:	9c08      	ldr	r4, [sp, #32]
 8004558:	9e00      	ldr	r6, [sp, #0]
 800455a:	9a00      	ldr	r2, [sp, #0]
 800455c:	441a      	add	r2, r3
 800455e:	9200      	str	r2, [sp, #0]
 8004560:	9a06      	ldr	r2, [sp, #24]
 8004562:	2101      	movs	r1, #1
 8004564:	441a      	add	r2, r3
 8004566:	4648      	mov	r0, r9
 8004568:	9206      	str	r2, [sp, #24]
 800456a:	f000 fc2d 	bl	8004dc8 <__i2b>
 800456e:	4605      	mov	r5, r0
 8004570:	b166      	cbz	r6, 800458c <_dtoa_r+0x74c>
 8004572:	9b06      	ldr	r3, [sp, #24]
 8004574:	2b00      	cmp	r3, #0
 8004576:	dd09      	ble.n	800458c <_dtoa_r+0x74c>
 8004578:	42b3      	cmp	r3, r6
 800457a:	9a00      	ldr	r2, [sp, #0]
 800457c:	bfa8      	it	ge
 800457e:	4633      	movge	r3, r6
 8004580:	1ad2      	subs	r2, r2, r3
 8004582:	9200      	str	r2, [sp, #0]
 8004584:	9a06      	ldr	r2, [sp, #24]
 8004586:	1af6      	subs	r6, r6, r3
 8004588:	1ad3      	subs	r3, r2, r3
 800458a:	9306      	str	r3, [sp, #24]
 800458c:	9b08      	ldr	r3, [sp, #32]
 800458e:	b30b      	cbz	r3, 80045d4 <_dtoa_r+0x794>
 8004590:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004592:	2b00      	cmp	r3, #0
 8004594:	f000 80c6 	beq.w	8004724 <_dtoa_r+0x8e4>
 8004598:	2c00      	cmp	r4, #0
 800459a:	f000 80c0 	beq.w	800471e <_dtoa_r+0x8de>
 800459e:	4629      	mov	r1, r5
 80045a0:	4622      	mov	r2, r4
 80045a2:	4648      	mov	r0, r9
 80045a4:	f000 fcc8 	bl	8004f38 <__pow5mult>
 80045a8:	9a02      	ldr	r2, [sp, #8]
 80045aa:	4601      	mov	r1, r0
 80045ac:	4605      	mov	r5, r0
 80045ae:	4648      	mov	r0, r9
 80045b0:	f000 fc20 	bl	8004df4 <__multiply>
 80045b4:	9902      	ldr	r1, [sp, #8]
 80045b6:	4680      	mov	r8, r0
 80045b8:	4648      	mov	r0, r9
 80045ba:	f000 fb51 	bl	8004c60 <_Bfree>
 80045be:	9b08      	ldr	r3, [sp, #32]
 80045c0:	1b1b      	subs	r3, r3, r4
 80045c2:	9308      	str	r3, [sp, #32]
 80045c4:	f000 80b1 	beq.w	800472a <_dtoa_r+0x8ea>
 80045c8:	9a08      	ldr	r2, [sp, #32]
 80045ca:	4641      	mov	r1, r8
 80045cc:	4648      	mov	r0, r9
 80045ce:	f000 fcb3 	bl	8004f38 <__pow5mult>
 80045d2:	9002      	str	r0, [sp, #8]
 80045d4:	2101      	movs	r1, #1
 80045d6:	4648      	mov	r0, r9
 80045d8:	f000 fbf6 	bl	8004dc8 <__i2b>
 80045dc:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80045de:	4604      	mov	r4, r0
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	f000 81d8 	beq.w	8004996 <_dtoa_r+0xb56>
 80045e6:	461a      	mov	r2, r3
 80045e8:	4601      	mov	r1, r0
 80045ea:	4648      	mov	r0, r9
 80045ec:	f000 fca4 	bl	8004f38 <__pow5mult>
 80045f0:	9b07      	ldr	r3, [sp, #28]
 80045f2:	2b01      	cmp	r3, #1
 80045f4:	4604      	mov	r4, r0
 80045f6:	f300 809f 	bgt.w	8004738 <_dtoa_r+0x8f8>
 80045fa:	9b04      	ldr	r3, [sp, #16]
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	f040 8097 	bne.w	8004730 <_dtoa_r+0x8f0>
 8004602:	9b05      	ldr	r3, [sp, #20]
 8004604:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004608:	2b00      	cmp	r3, #0
 800460a:	f040 8093 	bne.w	8004734 <_dtoa_r+0x8f4>
 800460e:	9b05      	ldr	r3, [sp, #20]
 8004610:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004614:	0d1b      	lsrs	r3, r3, #20
 8004616:	051b      	lsls	r3, r3, #20
 8004618:	b133      	cbz	r3, 8004628 <_dtoa_r+0x7e8>
 800461a:	9b00      	ldr	r3, [sp, #0]
 800461c:	3301      	adds	r3, #1
 800461e:	9300      	str	r3, [sp, #0]
 8004620:	9b06      	ldr	r3, [sp, #24]
 8004622:	3301      	adds	r3, #1
 8004624:	9306      	str	r3, [sp, #24]
 8004626:	2301      	movs	r3, #1
 8004628:	9308      	str	r3, [sp, #32]
 800462a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800462c:	2b00      	cmp	r3, #0
 800462e:	f000 81b8 	beq.w	80049a2 <_dtoa_r+0xb62>
 8004632:	6923      	ldr	r3, [r4, #16]
 8004634:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8004638:	6918      	ldr	r0, [r3, #16]
 800463a:	f000 fb79 	bl	8004d30 <__hi0bits>
 800463e:	f1c0 0020 	rsb	r0, r0, #32
 8004642:	9b06      	ldr	r3, [sp, #24]
 8004644:	4418      	add	r0, r3
 8004646:	f010 001f 	ands.w	r0, r0, #31
 800464a:	f000 8082 	beq.w	8004752 <_dtoa_r+0x912>
 800464e:	f1c0 0320 	rsb	r3, r0, #32
 8004652:	2b04      	cmp	r3, #4
 8004654:	dd73      	ble.n	800473e <_dtoa_r+0x8fe>
 8004656:	9b00      	ldr	r3, [sp, #0]
 8004658:	f1c0 001c 	rsb	r0, r0, #28
 800465c:	4403      	add	r3, r0
 800465e:	9300      	str	r3, [sp, #0]
 8004660:	9b06      	ldr	r3, [sp, #24]
 8004662:	4403      	add	r3, r0
 8004664:	4406      	add	r6, r0
 8004666:	9306      	str	r3, [sp, #24]
 8004668:	9b00      	ldr	r3, [sp, #0]
 800466a:	2b00      	cmp	r3, #0
 800466c:	dd05      	ble.n	800467a <_dtoa_r+0x83a>
 800466e:	9902      	ldr	r1, [sp, #8]
 8004670:	461a      	mov	r2, r3
 8004672:	4648      	mov	r0, r9
 8004674:	f000 fcba 	bl	8004fec <__lshift>
 8004678:	9002      	str	r0, [sp, #8]
 800467a:	9b06      	ldr	r3, [sp, #24]
 800467c:	2b00      	cmp	r3, #0
 800467e:	dd05      	ble.n	800468c <_dtoa_r+0x84c>
 8004680:	4621      	mov	r1, r4
 8004682:	461a      	mov	r2, r3
 8004684:	4648      	mov	r0, r9
 8004686:	f000 fcb1 	bl	8004fec <__lshift>
 800468a:	4604      	mov	r4, r0
 800468c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800468e:	2b00      	cmp	r3, #0
 8004690:	d061      	beq.n	8004756 <_dtoa_r+0x916>
 8004692:	9802      	ldr	r0, [sp, #8]
 8004694:	4621      	mov	r1, r4
 8004696:	f000 fd15 	bl	80050c4 <__mcmp>
 800469a:	2800      	cmp	r0, #0
 800469c:	da5b      	bge.n	8004756 <_dtoa_r+0x916>
 800469e:	2300      	movs	r3, #0
 80046a0:	9902      	ldr	r1, [sp, #8]
 80046a2:	220a      	movs	r2, #10
 80046a4:	4648      	mov	r0, r9
 80046a6:	f000 fafd 	bl	8004ca4 <__multadd>
 80046aa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80046ac:	9002      	str	r0, [sp, #8]
 80046ae:	f107 38ff 	add.w	r8, r7, #4294967295	@ 0xffffffff
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	f000 8177 	beq.w	80049a6 <_dtoa_r+0xb66>
 80046b8:	4629      	mov	r1, r5
 80046ba:	2300      	movs	r3, #0
 80046bc:	220a      	movs	r2, #10
 80046be:	4648      	mov	r0, r9
 80046c0:	f000 faf0 	bl	8004ca4 <__multadd>
 80046c4:	f1bb 0f00 	cmp.w	fp, #0
 80046c8:	4605      	mov	r5, r0
 80046ca:	dc6f      	bgt.n	80047ac <_dtoa_r+0x96c>
 80046cc:	9b07      	ldr	r3, [sp, #28]
 80046ce:	2b02      	cmp	r3, #2
 80046d0:	dc49      	bgt.n	8004766 <_dtoa_r+0x926>
 80046d2:	e06b      	b.n	80047ac <_dtoa_r+0x96c>
 80046d4:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80046d6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80046da:	e73c      	b.n	8004556 <_dtoa_r+0x716>
 80046dc:	3fe00000 	.word	0x3fe00000
 80046e0:	40240000 	.word	0x40240000
 80046e4:	9b03      	ldr	r3, [sp, #12]
 80046e6:	1e5c      	subs	r4, r3, #1
 80046e8:	9b08      	ldr	r3, [sp, #32]
 80046ea:	42a3      	cmp	r3, r4
 80046ec:	db09      	blt.n	8004702 <_dtoa_r+0x8c2>
 80046ee:	1b1c      	subs	r4, r3, r4
 80046f0:	9b03      	ldr	r3, [sp, #12]
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	f6bf af30 	bge.w	8004558 <_dtoa_r+0x718>
 80046f8:	9b00      	ldr	r3, [sp, #0]
 80046fa:	9a03      	ldr	r2, [sp, #12]
 80046fc:	1a9e      	subs	r6, r3, r2
 80046fe:	2300      	movs	r3, #0
 8004700:	e72b      	b.n	800455a <_dtoa_r+0x71a>
 8004702:	9b08      	ldr	r3, [sp, #32]
 8004704:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8004706:	9408      	str	r4, [sp, #32]
 8004708:	1ae3      	subs	r3, r4, r3
 800470a:	441a      	add	r2, r3
 800470c:	9e00      	ldr	r6, [sp, #0]
 800470e:	9b03      	ldr	r3, [sp, #12]
 8004710:	920d      	str	r2, [sp, #52]	@ 0x34
 8004712:	2400      	movs	r4, #0
 8004714:	e721      	b.n	800455a <_dtoa_r+0x71a>
 8004716:	9c08      	ldr	r4, [sp, #32]
 8004718:	9e00      	ldr	r6, [sp, #0]
 800471a:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 800471c:	e728      	b.n	8004570 <_dtoa_r+0x730>
 800471e:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8004722:	e751      	b.n	80045c8 <_dtoa_r+0x788>
 8004724:	9a08      	ldr	r2, [sp, #32]
 8004726:	9902      	ldr	r1, [sp, #8]
 8004728:	e750      	b.n	80045cc <_dtoa_r+0x78c>
 800472a:	f8cd 8008 	str.w	r8, [sp, #8]
 800472e:	e751      	b.n	80045d4 <_dtoa_r+0x794>
 8004730:	2300      	movs	r3, #0
 8004732:	e779      	b.n	8004628 <_dtoa_r+0x7e8>
 8004734:	9b04      	ldr	r3, [sp, #16]
 8004736:	e777      	b.n	8004628 <_dtoa_r+0x7e8>
 8004738:	2300      	movs	r3, #0
 800473a:	9308      	str	r3, [sp, #32]
 800473c:	e779      	b.n	8004632 <_dtoa_r+0x7f2>
 800473e:	d093      	beq.n	8004668 <_dtoa_r+0x828>
 8004740:	9a00      	ldr	r2, [sp, #0]
 8004742:	331c      	adds	r3, #28
 8004744:	441a      	add	r2, r3
 8004746:	9200      	str	r2, [sp, #0]
 8004748:	9a06      	ldr	r2, [sp, #24]
 800474a:	441a      	add	r2, r3
 800474c:	441e      	add	r6, r3
 800474e:	9206      	str	r2, [sp, #24]
 8004750:	e78a      	b.n	8004668 <_dtoa_r+0x828>
 8004752:	4603      	mov	r3, r0
 8004754:	e7f4      	b.n	8004740 <_dtoa_r+0x900>
 8004756:	9b03      	ldr	r3, [sp, #12]
 8004758:	2b00      	cmp	r3, #0
 800475a:	46b8      	mov	r8, r7
 800475c:	dc20      	bgt.n	80047a0 <_dtoa_r+0x960>
 800475e:	469b      	mov	fp, r3
 8004760:	9b07      	ldr	r3, [sp, #28]
 8004762:	2b02      	cmp	r3, #2
 8004764:	dd1e      	ble.n	80047a4 <_dtoa_r+0x964>
 8004766:	f1bb 0f00 	cmp.w	fp, #0
 800476a:	f47f adb1 	bne.w	80042d0 <_dtoa_r+0x490>
 800476e:	4621      	mov	r1, r4
 8004770:	465b      	mov	r3, fp
 8004772:	2205      	movs	r2, #5
 8004774:	4648      	mov	r0, r9
 8004776:	f000 fa95 	bl	8004ca4 <__multadd>
 800477a:	4601      	mov	r1, r0
 800477c:	4604      	mov	r4, r0
 800477e:	9802      	ldr	r0, [sp, #8]
 8004780:	f000 fca0 	bl	80050c4 <__mcmp>
 8004784:	2800      	cmp	r0, #0
 8004786:	f77f ada3 	ble.w	80042d0 <_dtoa_r+0x490>
 800478a:	4656      	mov	r6, sl
 800478c:	2331      	movs	r3, #49	@ 0x31
 800478e:	f806 3b01 	strb.w	r3, [r6], #1
 8004792:	f108 0801 	add.w	r8, r8, #1
 8004796:	e59f      	b.n	80042d8 <_dtoa_r+0x498>
 8004798:	9c03      	ldr	r4, [sp, #12]
 800479a:	46b8      	mov	r8, r7
 800479c:	4625      	mov	r5, r4
 800479e:	e7f4      	b.n	800478a <_dtoa_r+0x94a>
 80047a0:	f8dd b00c 	ldr.w	fp, [sp, #12]
 80047a4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	f000 8101 	beq.w	80049ae <_dtoa_r+0xb6e>
 80047ac:	2e00      	cmp	r6, #0
 80047ae:	dd05      	ble.n	80047bc <_dtoa_r+0x97c>
 80047b0:	4629      	mov	r1, r5
 80047b2:	4632      	mov	r2, r6
 80047b4:	4648      	mov	r0, r9
 80047b6:	f000 fc19 	bl	8004fec <__lshift>
 80047ba:	4605      	mov	r5, r0
 80047bc:	9b08      	ldr	r3, [sp, #32]
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d05c      	beq.n	800487c <_dtoa_r+0xa3c>
 80047c2:	6869      	ldr	r1, [r5, #4]
 80047c4:	4648      	mov	r0, r9
 80047c6:	f000 fa0b 	bl	8004be0 <_Balloc>
 80047ca:	4606      	mov	r6, r0
 80047cc:	b928      	cbnz	r0, 80047da <_dtoa_r+0x99a>
 80047ce:	4b82      	ldr	r3, [pc, #520]	@ (80049d8 <_dtoa_r+0xb98>)
 80047d0:	4602      	mov	r2, r0
 80047d2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80047d6:	f7ff bb4a 	b.w	8003e6e <_dtoa_r+0x2e>
 80047da:	692a      	ldr	r2, [r5, #16]
 80047dc:	3202      	adds	r2, #2
 80047de:	0092      	lsls	r2, r2, #2
 80047e0:	f105 010c 	add.w	r1, r5, #12
 80047e4:	300c      	adds	r0, #12
 80047e6:	f001 f83b 	bl	8005860 <memcpy>
 80047ea:	2201      	movs	r2, #1
 80047ec:	4631      	mov	r1, r6
 80047ee:	4648      	mov	r0, r9
 80047f0:	f000 fbfc 	bl	8004fec <__lshift>
 80047f4:	f10a 0301 	add.w	r3, sl, #1
 80047f8:	9300      	str	r3, [sp, #0]
 80047fa:	eb0a 030b 	add.w	r3, sl, fp
 80047fe:	9308      	str	r3, [sp, #32]
 8004800:	9b04      	ldr	r3, [sp, #16]
 8004802:	f003 0301 	and.w	r3, r3, #1
 8004806:	462f      	mov	r7, r5
 8004808:	9306      	str	r3, [sp, #24]
 800480a:	4605      	mov	r5, r0
 800480c:	9b00      	ldr	r3, [sp, #0]
 800480e:	9802      	ldr	r0, [sp, #8]
 8004810:	4621      	mov	r1, r4
 8004812:	f103 3bff 	add.w	fp, r3, #4294967295	@ 0xffffffff
 8004816:	f7ff fa8a 	bl	8003d2e <quorem>
 800481a:	4603      	mov	r3, r0
 800481c:	3330      	adds	r3, #48	@ 0x30
 800481e:	9003      	str	r0, [sp, #12]
 8004820:	4639      	mov	r1, r7
 8004822:	9802      	ldr	r0, [sp, #8]
 8004824:	9309      	str	r3, [sp, #36]	@ 0x24
 8004826:	f000 fc4d 	bl	80050c4 <__mcmp>
 800482a:	462a      	mov	r2, r5
 800482c:	9004      	str	r0, [sp, #16]
 800482e:	4621      	mov	r1, r4
 8004830:	4648      	mov	r0, r9
 8004832:	f000 fc63 	bl	80050fc <__mdiff>
 8004836:	68c2      	ldr	r2, [r0, #12]
 8004838:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800483a:	4606      	mov	r6, r0
 800483c:	bb02      	cbnz	r2, 8004880 <_dtoa_r+0xa40>
 800483e:	4601      	mov	r1, r0
 8004840:	9802      	ldr	r0, [sp, #8]
 8004842:	f000 fc3f 	bl	80050c4 <__mcmp>
 8004846:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004848:	4602      	mov	r2, r0
 800484a:	4631      	mov	r1, r6
 800484c:	4648      	mov	r0, r9
 800484e:	920c      	str	r2, [sp, #48]	@ 0x30
 8004850:	9309      	str	r3, [sp, #36]	@ 0x24
 8004852:	f000 fa05 	bl	8004c60 <_Bfree>
 8004856:	9b07      	ldr	r3, [sp, #28]
 8004858:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800485a:	9e00      	ldr	r6, [sp, #0]
 800485c:	ea42 0103 	orr.w	r1, r2, r3
 8004860:	9b06      	ldr	r3, [sp, #24]
 8004862:	4319      	orrs	r1, r3
 8004864:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004866:	d10d      	bne.n	8004884 <_dtoa_r+0xa44>
 8004868:	2b39      	cmp	r3, #57	@ 0x39
 800486a:	d027      	beq.n	80048bc <_dtoa_r+0xa7c>
 800486c:	9a04      	ldr	r2, [sp, #16]
 800486e:	2a00      	cmp	r2, #0
 8004870:	dd01      	ble.n	8004876 <_dtoa_r+0xa36>
 8004872:	9b03      	ldr	r3, [sp, #12]
 8004874:	3331      	adds	r3, #49	@ 0x31
 8004876:	f88b 3000 	strb.w	r3, [fp]
 800487a:	e52e      	b.n	80042da <_dtoa_r+0x49a>
 800487c:	4628      	mov	r0, r5
 800487e:	e7b9      	b.n	80047f4 <_dtoa_r+0x9b4>
 8004880:	2201      	movs	r2, #1
 8004882:	e7e2      	b.n	800484a <_dtoa_r+0xa0a>
 8004884:	9904      	ldr	r1, [sp, #16]
 8004886:	2900      	cmp	r1, #0
 8004888:	db04      	blt.n	8004894 <_dtoa_r+0xa54>
 800488a:	9807      	ldr	r0, [sp, #28]
 800488c:	4301      	orrs	r1, r0
 800488e:	9806      	ldr	r0, [sp, #24]
 8004890:	4301      	orrs	r1, r0
 8004892:	d120      	bne.n	80048d6 <_dtoa_r+0xa96>
 8004894:	2a00      	cmp	r2, #0
 8004896:	ddee      	ble.n	8004876 <_dtoa_r+0xa36>
 8004898:	9902      	ldr	r1, [sp, #8]
 800489a:	9300      	str	r3, [sp, #0]
 800489c:	2201      	movs	r2, #1
 800489e:	4648      	mov	r0, r9
 80048a0:	f000 fba4 	bl	8004fec <__lshift>
 80048a4:	4621      	mov	r1, r4
 80048a6:	9002      	str	r0, [sp, #8]
 80048a8:	f000 fc0c 	bl	80050c4 <__mcmp>
 80048ac:	2800      	cmp	r0, #0
 80048ae:	9b00      	ldr	r3, [sp, #0]
 80048b0:	dc02      	bgt.n	80048b8 <_dtoa_r+0xa78>
 80048b2:	d1e0      	bne.n	8004876 <_dtoa_r+0xa36>
 80048b4:	07da      	lsls	r2, r3, #31
 80048b6:	d5de      	bpl.n	8004876 <_dtoa_r+0xa36>
 80048b8:	2b39      	cmp	r3, #57	@ 0x39
 80048ba:	d1da      	bne.n	8004872 <_dtoa_r+0xa32>
 80048bc:	2339      	movs	r3, #57	@ 0x39
 80048be:	f88b 3000 	strb.w	r3, [fp]
 80048c2:	4633      	mov	r3, r6
 80048c4:	461e      	mov	r6, r3
 80048c6:	3b01      	subs	r3, #1
 80048c8:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80048cc:	2a39      	cmp	r2, #57	@ 0x39
 80048ce:	d04e      	beq.n	800496e <_dtoa_r+0xb2e>
 80048d0:	3201      	adds	r2, #1
 80048d2:	701a      	strb	r2, [r3, #0]
 80048d4:	e501      	b.n	80042da <_dtoa_r+0x49a>
 80048d6:	2a00      	cmp	r2, #0
 80048d8:	dd03      	ble.n	80048e2 <_dtoa_r+0xaa2>
 80048da:	2b39      	cmp	r3, #57	@ 0x39
 80048dc:	d0ee      	beq.n	80048bc <_dtoa_r+0xa7c>
 80048de:	3301      	adds	r3, #1
 80048e0:	e7c9      	b.n	8004876 <_dtoa_r+0xa36>
 80048e2:	9a00      	ldr	r2, [sp, #0]
 80048e4:	9908      	ldr	r1, [sp, #32]
 80048e6:	f802 3c01 	strb.w	r3, [r2, #-1]
 80048ea:	428a      	cmp	r2, r1
 80048ec:	d028      	beq.n	8004940 <_dtoa_r+0xb00>
 80048ee:	9902      	ldr	r1, [sp, #8]
 80048f0:	2300      	movs	r3, #0
 80048f2:	220a      	movs	r2, #10
 80048f4:	4648      	mov	r0, r9
 80048f6:	f000 f9d5 	bl	8004ca4 <__multadd>
 80048fa:	42af      	cmp	r7, r5
 80048fc:	9002      	str	r0, [sp, #8]
 80048fe:	f04f 0300 	mov.w	r3, #0
 8004902:	f04f 020a 	mov.w	r2, #10
 8004906:	4639      	mov	r1, r7
 8004908:	4648      	mov	r0, r9
 800490a:	d107      	bne.n	800491c <_dtoa_r+0xadc>
 800490c:	f000 f9ca 	bl	8004ca4 <__multadd>
 8004910:	4607      	mov	r7, r0
 8004912:	4605      	mov	r5, r0
 8004914:	9b00      	ldr	r3, [sp, #0]
 8004916:	3301      	adds	r3, #1
 8004918:	9300      	str	r3, [sp, #0]
 800491a:	e777      	b.n	800480c <_dtoa_r+0x9cc>
 800491c:	f000 f9c2 	bl	8004ca4 <__multadd>
 8004920:	4629      	mov	r1, r5
 8004922:	4607      	mov	r7, r0
 8004924:	2300      	movs	r3, #0
 8004926:	220a      	movs	r2, #10
 8004928:	4648      	mov	r0, r9
 800492a:	f000 f9bb 	bl	8004ca4 <__multadd>
 800492e:	4605      	mov	r5, r0
 8004930:	e7f0      	b.n	8004914 <_dtoa_r+0xad4>
 8004932:	f1bb 0f00 	cmp.w	fp, #0
 8004936:	bfcc      	ite	gt
 8004938:	465e      	movgt	r6, fp
 800493a:	2601      	movle	r6, #1
 800493c:	4456      	add	r6, sl
 800493e:	2700      	movs	r7, #0
 8004940:	9902      	ldr	r1, [sp, #8]
 8004942:	9300      	str	r3, [sp, #0]
 8004944:	2201      	movs	r2, #1
 8004946:	4648      	mov	r0, r9
 8004948:	f000 fb50 	bl	8004fec <__lshift>
 800494c:	4621      	mov	r1, r4
 800494e:	9002      	str	r0, [sp, #8]
 8004950:	f000 fbb8 	bl	80050c4 <__mcmp>
 8004954:	2800      	cmp	r0, #0
 8004956:	dcb4      	bgt.n	80048c2 <_dtoa_r+0xa82>
 8004958:	d102      	bne.n	8004960 <_dtoa_r+0xb20>
 800495a:	9b00      	ldr	r3, [sp, #0]
 800495c:	07db      	lsls	r3, r3, #31
 800495e:	d4b0      	bmi.n	80048c2 <_dtoa_r+0xa82>
 8004960:	4633      	mov	r3, r6
 8004962:	461e      	mov	r6, r3
 8004964:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8004968:	2a30      	cmp	r2, #48	@ 0x30
 800496a:	d0fa      	beq.n	8004962 <_dtoa_r+0xb22>
 800496c:	e4b5      	b.n	80042da <_dtoa_r+0x49a>
 800496e:	459a      	cmp	sl, r3
 8004970:	d1a8      	bne.n	80048c4 <_dtoa_r+0xa84>
 8004972:	2331      	movs	r3, #49	@ 0x31
 8004974:	f108 0801 	add.w	r8, r8, #1
 8004978:	f88a 3000 	strb.w	r3, [sl]
 800497c:	e4ad      	b.n	80042da <_dtoa_r+0x49a>
 800497e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8004980:	f8df a058 	ldr.w	sl, [pc, #88]	@ 80049dc <_dtoa_r+0xb9c>
 8004984:	b11b      	cbz	r3, 800498e <_dtoa_r+0xb4e>
 8004986:	f10a 0308 	add.w	r3, sl, #8
 800498a:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800498c:	6013      	str	r3, [r2, #0]
 800498e:	4650      	mov	r0, sl
 8004990:	b017      	add	sp, #92	@ 0x5c
 8004992:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004996:	9b07      	ldr	r3, [sp, #28]
 8004998:	2b01      	cmp	r3, #1
 800499a:	f77f ae2e 	ble.w	80045fa <_dtoa_r+0x7ba>
 800499e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80049a0:	9308      	str	r3, [sp, #32]
 80049a2:	2001      	movs	r0, #1
 80049a4:	e64d      	b.n	8004642 <_dtoa_r+0x802>
 80049a6:	f1bb 0f00 	cmp.w	fp, #0
 80049aa:	f77f aed9 	ble.w	8004760 <_dtoa_r+0x920>
 80049ae:	4656      	mov	r6, sl
 80049b0:	9802      	ldr	r0, [sp, #8]
 80049b2:	4621      	mov	r1, r4
 80049b4:	f7ff f9bb 	bl	8003d2e <quorem>
 80049b8:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 80049bc:	f806 3b01 	strb.w	r3, [r6], #1
 80049c0:	eba6 020a 	sub.w	r2, r6, sl
 80049c4:	4593      	cmp	fp, r2
 80049c6:	ddb4      	ble.n	8004932 <_dtoa_r+0xaf2>
 80049c8:	9902      	ldr	r1, [sp, #8]
 80049ca:	2300      	movs	r3, #0
 80049cc:	220a      	movs	r2, #10
 80049ce:	4648      	mov	r0, r9
 80049d0:	f000 f968 	bl	8004ca4 <__multadd>
 80049d4:	9002      	str	r0, [sp, #8]
 80049d6:	e7eb      	b.n	80049b0 <_dtoa_r+0xb70>
 80049d8:	08005c54 	.word	0x08005c54
 80049dc:	08005bd8 	.word	0x08005bd8

080049e0 <_free_r>:
 80049e0:	b538      	push	{r3, r4, r5, lr}
 80049e2:	4605      	mov	r5, r0
 80049e4:	2900      	cmp	r1, #0
 80049e6:	d041      	beq.n	8004a6c <_free_r+0x8c>
 80049e8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80049ec:	1f0c      	subs	r4, r1, #4
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	bfb8      	it	lt
 80049f2:	18e4      	addlt	r4, r4, r3
 80049f4:	f000 f8e8 	bl	8004bc8 <__malloc_lock>
 80049f8:	4a1d      	ldr	r2, [pc, #116]	@ (8004a70 <_free_r+0x90>)
 80049fa:	6813      	ldr	r3, [r2, #0]
 80049fc:	b933      	cbnz	r3, 8004a0c <_free_r+0x2c>
 80049fe:	6063      	str	r3, [r4, #4]
 8004a00:	6014      	str	r4, [r2, #0]
 8004a02:	4628      	mov	r0, r5
 8004a04:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004a08:	f000 b8e4 	b.w	8004bd4 <__malloc_unlock>
 8004a0c:	42a3      	cmp	r3, r4
 8004a0e:	d908      	bls.n	8004a22 <_free_r+0x42>
 8004a10:	6820      	ldr	r0, [r4, #0]
 8004a12:	1821      	adds	r1, r4, r0
 8004a14:	428b      	cmp	r3, r1
 8004a16:	bf01      	itttt	eq
 8004a18:	6819      	ldreq	r1, [r3, #0]
 8004a1a:	685b      	ldreq	r3, [r3, #4]
 8004a1c:	1809      	addeq	r1, r1, r0
 8004a1e:	6021      	streq	r1, [r4, #0]
 8004a20:	e7ed      	b.n	80049fe <_free_r+0x1e>
 8004a22:	461a      	mov	r2, r3
 8004a24:	685b      	ldr	r3, [r3, #4]
 8004a26:	b10b      	cbz	r3, 8004a2c <_free_r+0x4c>
 8004a28:	42a3      	cmp	r3, r4
 8004a2a:	d9fa      	bls.n	8004a22 <_free_r+0x42>
 8004a2c:	6811      	ldr	r1, [r2, #0]
 8004a2e:	1850      	adds	r0, r2, r1
 8004a30:	42a0      	cmp	r0, r4
 8004a32:	d10b      	bne.n	8004a4c <_free_r+0x6c>
 8004a34:	6820      	ldr	r0, [r4, #0]
 8004a36:	4401      	add	r1, r0
 8004a38:	1850      	adds	r0, r2, r1
 8004a3a:	4283      	cmp	r3, r0
 8004a3c:	6011      	str	r1, [r2, #0]
 8004a3e:	d1e0      	bne.n	8004a02 <_free_r+0x22>
 8004a40:	6818      	ldr	r0, [r3, #0]
 8004a42:	685b      	ldr	r3, [r3, #4]
 8004a44:	6053      	str	r3, [r2, #4]
 8004a46:	4408      	add	r0, r1
 8004a48:	6010      	str	r0, [r2, #0]
 8004a4a:	e7da      	b.n	8004a02 <_free_r+0x22>
 8004a4c:	d902      	bls.n	8004a54 <_free_r+0x74>
 8004a4e:	230c      	movs	r3, #12
 8004a50:	602b      	str	r3, [r5, #0]
 8004a52:	e7d6      	b.n	8004a02 <_free_r+0x22>
 8004a54:	6820      	ldr	r0, [r4, #0]
 8004a56:	1821      	adds	r1, r4, r0
 8004a58:	428b      	cmp	r3, r1
 8004a5a:	bf04      	itt	eq
 8004a5c:	6819      	ldreq	r1, [r3, #0]
 8004a5e:	685b      	ldreq	r3, [r3, #4]
 8004a60:	6063      	str	r3, [r4, #4]
 8004a62:	bf04      	itt	eq
 8004a64:	1809      	addeq	r1, r1, r0
 8004a66:	6021      	streq	r1, [r4, #0]
 8004a68:	6054      	str	r4, [r2, #4]
 8004a6a:	e7ca      	b.n	8004a02 <_free_r+0x22>
 8004a6c:	bd38      	pop	{r3, r4, r5, pc}
 8004a6e:	bf00      	nop
 8004a70:	20000514 	.word	0x20000514

08004a74 <malloc>:
 8004a74:	4b02      	ldr	r3, [pc, #8]	@ (8004a80 <malloc+0xc>)
 8004a76:	4601      	mov	r1, r0
 8004a78:	6818      	ldr	r0, [r3, #0]
 8004a7a:	f000 b825 	b.w	8004ac8 <_malloc_r>
 8004a7e:	bf00      	nop
 8004a80:	20000108 	.word	0x20000108

08004a84 <sbrk_aligned>:
 8004a84:	b570      	push	{r4, r5, r6, lr}
 8004a86:	4e0f      	ldr	r6, [pc, #60]	@ (8004ac4 <sbrk_aligned+0x40>)
 8004a88:	460c      	mov	r4, r1
 8004a8a:	6831      	ldr	r1, [r6, #0]
 8004a8c:	4605      	mov	r5, r0
 8004a8e:	b911      	cbnz	r1, 8004a96 <sbrk_aligned+0x12>
 8004a90:	f000 fed6 	bl	8005840 <_sbrk_r>
 8004a94:	6030      	str	r0, [r6, #0]
 8004a96:	4621      	mov	r1, r4
 8004a98:	4628      	mov	r0, r5
 8004a9a:	f000 fed1 	bl	8005840 <_sbrk_r>
 8004a9e:	1c43      	adds	r3, r0, #1
 8004aa0:	d103      	bne.n	8004aaa <sbrk_aligned+0x26>
 8004aa2:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8004aa6:	4620      	mov	r0, r4
 8004aa8:	bd70      	pop	{r4, r5, r6, pc}
 8004aaa:	1cc4      	adds	r4, r0, #3
 8004aac:	f024 0403 	bic.w	r4, r4, #3
 8004ab0:	42a0      	cmp	r0, r4
 8004ab2:	d0f8      	beq.n	8004aa6 <sbrk_aligned+0x22>
 8004ab4:	1a21      	subs	r1, r4, r0
 8004ab6:	4628      	mov	r0, r5
 8004ab8:	f000 fec2 	bl	8005840 <_sbrk_r>
 8004abc:	3001      	adds	r0, #1
 8004abe:	d1f2      	bne.n	8004aa6 <sbrk_aligned+0x22>
 8004ac0:	e7ef      	b.n	8004aa2 <sbrk_aligned+0x1e>
 8004ac2:	bf00      	nop
 8004ac4:	20000510 	.word	0x20000510

08004ac8 <_malloc_r>:
 8004ac8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004acc:	1ccd      	adds	r5, r1, #3
 8004ace:	f025 0503 	bic.w	r5, r5, #3
 8004ad2:	3508      	adds	r5, #8
 8004ad4:	2d0c      	cmp	r5, #12
 8004ad6:	bf38      	it	cc
 8004ad8:	250c      	movcc	r5, #12
 8004ada:	2d00      	cmp	r5, #0
 8004adc:	4606      	mov	r6, r0
 8004ade:	db01      	blt.n	8004ae4 <_malloc_r+0x1c>
 8004ae0:	42a9      	cmp	r1, r5
 8004ae2:	d904      	bls.n	8004aee <_malloc_r+0x26>
 8004ae4:	230c      	movs	r3, #12
 8004ae6:	6033      	str	r3, [r6, #0]
 8004ae8:	2000      	movs	r0, #0
 8004aea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004aee:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004bc4 <_malloc_r+0xfc>
 8004af2:	f000 f869 	bl	8004bc8 <__malloc_lock>
 8004af6:	f8d8 3000 	ldr.w	r3, [r8]
 8004afa:	461c      	mov	r4, r3
 8004afc:	bb44      	cbnz	r4, 8004b50 <_malloc_r+0x88>
 8004afe:	4629      	mov	r1, r5
 8004b00:	4630      	mov	r0, r6
 8004b02:	f7ff ffbf 	bl	8004a84 <sbrk_aligned>
 8004b06:	1c43      	adds	r3, r0, #1
 8004b08:	4604      	mov	r4, r0
 8004b0a:	d158      	bne.n	8004bbe <_malloc_r+0xf6>
 8004b0c:	f8d8 4000 	ldr.w	r4, [r8]
 8004b10:	4627      	mov	r7, r4
 8004b12:	2f00      	cmp	r7, #0
 8004b14:	d143      	bne.n	8004b9e <_malloc_r+0xd6>
 8004b16:	2c00      	cmp	r4, #0
 8004b18:	d04b      	beq.n	8004bb2 <_malloc_r+0xea>
 8004b1a:	6823      	ldr	r3, [r4, #0]
 8004b1c:	4639      	mov	r1, r7
 8004b1e:	4630      	mov	r0, r6
 8004b20:	eb04 0903 	add.w	r9, r4, r3
 8004b24:	f000 fe8c 	bl	8005840 <_sbrk_r>
 8004b28:	4581      	cmp	r9, r0
 8004b2a:	d142      	bne.n	8004bb2 <_malloc_r+0xea>
 8004b2c:	6821      	ldr	r1, [r4, #0]
 8004b2e:	1a6d      	subs	r5, r5, r1
 8004b30:	4629      	mov	r1, r5
 8004b32:	4630      	mov	r0, r6
 8004b34:	f7ff ffa6 	bl	8004a84 <sbrk_aligned>
 8004b38:	3001      	adds	r0, #1
 8004b3a:	d03a      	beq.n	8004bb2 <_malloc_r+0xea>
 8004b3c:	6823      	ldr	r3, [r4, #0]
 8004b3e:	442b      	add	r3, r5
 8004b40:	6023      	str	r3, [r4, #0]
 8004b42:	f8d8 3000 	ldr.w	r3, [r8]
 8004b46:	685a      	ldr	r2, [r3, #4]
 8004b48:	bb62      	cbnz	r2, 8004ba4 <_malloc_r+0xdc>
 8004b4a:	f8c8 7000 	str.w	r7, [r8]
 8004b4e:	e00f      	b.n	8004b70 <_malloc_r+0xa8>
 8004b50:	6822      	ldr	r2, [r4, #0]
 8004b52:	1b52      	subs	r2, r2, r5
 8004b54:	d420      	bmi.n	8004b98 <_malloc_r+0xd0>
 8004b56:	2a0b      	cmp	r2, #11
 8004b58:	d917      	bls.n	8004b8a <_malloc_r+0xc2>
 8004b5a:	1961      	adds	r1, r4, r5
 8004b5c:	42a3      	cmp	r3, r4
 8004b5e:	6025      	str	r5, [r4, #0]
 8004b60:	bf18      	it	ne
 8004b62:	6059      	strne	r1, [r3, #4]
 8004b64:	6863      	ldr	r3, [r4, #4]
 8004b66:	bf08      	it	eq
 8004b68:	f8c8 1000 	streq.w	r1, [r8]
 8004b6c:	5162      	str	r2, [r4, r5]
 8004b6e:	604b      	str	r3, [r1, #4]
 8004b70:	4630      	mov	r0, r6
 8004b72:	f000 f82f 	bl	8004bd4 <__malloc_unlock>
 8004b76:	f104 000b 	add.w	r0, r4, #11
 8004b7a:	1d23      	adds	r3, r4, #4
 8004b7c:	f020 0007 	bic.w	r0, r0, #7
 8004b80:	1ac2      	subs	r2, r0, r3
 8004b82:	bf1c      	itt	ne
 8004b84:	1a1b      	subne	r3, r3, r0
 8004b86:	50a3      	strne	r3, [r4, r2]
 8004b88:	e7af      	b.n	8004aea <_malloc_r+0x22>
 8004b8a:	6862      	ldr	r2, [r4, #4]
 8004b8c:	42a3      	cmp	r3, r4
 8004b8e:	bf0c      	ite	eq
 8004b90:	f8c8 2000 	streq.w	r2, [r8]
 8004b94:	605a      	strne	r2, [r3, #4]
 8004b96:	e7eb      	b.n	8004b70 <_malloc_r+0xa8>
 8004b98:	4623      	mov	r3, r4
 8004b9a:	6864      	ldr	r4, [r4, #4]
 8004b9c:	e7ae      	b.n	8004afc <_malloc_r+0x34>
 8004b9e:	463c      	mov	r4, r7
 8004ba0:	687f      	ldr	r7, [r7, #4]
 8004ba2:	e7b6      	b.n	8004b12 <_malloc_r+0x4a>
 8004ba4:	461a      	mov	r2, r3
 8004ba6:	685b      	ldr	r3, [r3, #4]
 8004ba8:	42a3      	cmp	r3, r4
 8004baa:	d1fb      	bne.n	8004ba4 <_malloc_r+0xdc>
 8004bac:	2300      	movs	r3, #0
 8004bae:	6053      	str	r3, [r2, #4]
 8004bb0:	e7de      	b.n	8004b70 <_malloc_r+0xa8>
 8004bb2:	230c      	movs	r3, #12
 8004bb4:	6033      	str	r3, [r6, #0]
 8004bb6:	4630      	mov	r0, r6
 8004bb8:	f000 f80c 	bl	8004bd4 <__malloc_unlock>
 8004bbc:	e794      	b.n	8004ae8 <_malloc_r+0x20>
 8004bbe:	6005      	str	r5, [r0, #0]
 8004bc0:	e7d6      	b.n	8004b70 <_malloc_r+0xa8>
 8004bc2:	bf00      	nop
 8004bc4:	20000514 	.word	0x20000514

08004bc8 <__malloc_lock>:
 8004bc8:	4801      	ldr	r0, [pc, #4]	@ (8004bd0 <__malloc_lock+0x8>)
 8004bca:	f7ff b8ae 	b.w	8003d2a <__retarget_lock_acquire_recursive>
 8004bce:	bf00      	nop
 8004bd0:	2000050c 	.word	0x2000050c

08004bd4 <__malloc_unlock>:
 8004bd4:	4801      	ldr	r0, [pc, #4]	@ (8004bdc <__malloc_unlock+0x8>)
 8004bd6:	f7ff b8a9 	b.w	8003d2c <__retarget_lock_release_recursive>
 8004bda:	bf00      	nop
 8004bdc:	2000050c 	.word	0x2000050c

08004be0 <_Balloc>:
 8004be0:	b570      	push	{r4, r5, r6, lr}
 8004be2:	69c6      	ldr	r6, [r0, #28]
 8004be4:	4604      	mov	r4, r0
 8004be6:	460d      	mov	r5, r1
 8004be8:	b976      	cbnz	r6, 8004c08 <_Balloc+0x28>
 8004bea:	2010      	movs	r0, #16
 8004bec:	f7ff ff42 	bl	8004a74 <malloc>
 8004bf0:	4602      	mov	r2, r0
 8004bf2:	61e0      	str	r0, [r4, #28]
 8004bf4:	b920      	cbnz	r0, 8004c00 <_Balloc+0x20>
 8004bf6:	4b18      	ldr	r3, [pc, #96]	@ (8004c58 <_Balloc+0x78>)
 8004bf8:	4818      	ldr	r0, [pc, #96]	@ (8004c5c <_Balloc+0x7c>)
 8004bfa:	216b      	movs	r1, #107	@ 0x6b
 8004bfc:	f000 fe3e 	bl	800587c <__assert_func>
 8004c00:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8004c04:	6006      	str	r6, [r0, #0]
 8004c06:	60c6      	str	r6, [r0, #12]
 8004c08:	69e6      	ldr	r6, [r4, #28]
 8004c0a:	68f3      	ldr	r3, [r6, #12]
 8004c0c:	b183      	cbz	r3, 8004c30 <_Balloc+0x50>
 8004c0e:	69e3      	ldr	r3, [r4, #28]
 8004c10:	68db      	ldr	r3, [r3, #12]
 8004c12:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8004c16:	b9b8      	cbnz	r0, 8004c48 <_Balloc+0x68>
 8004c18:	2101      	movs	r1, #1
 8004c1a:	fa01 f605 	lsl.w	r6, r1, r5
 8004c1e:	1d72      	adds	r2, r6, #5
 8004c20:	0092      	lsls	r2, r2, #2
 8004c22:	4620      	mov	r0, r4
 8004c24:	f000 fe48 	bl	80058b8 <_calloc_r>
 8004c28:	b160      	cbz	r0, 8004c44 <_Balloc+0x64>
 8004c2a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8004c2e:	e00e      	b.n	8004c4e <_Balloc+0x6e>
 8004c30:	2221      	movs	r2, #33	@ 0x21
 8004c32:	2104      	movs	r1, #4
 8004c34:	4620      	mov	r0, r4
 8004c36:	f000 fe3f 	bl	80058b8 <_calloc_r>
 8004c3a:	69e3      	ldr	r3, [r4, #28]
 8004c3c:	60f0      	str	r0, [r6, #12]
 8004c3e:	68db      	ldr	r3, [r3, #12]
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d1e4      	bne.n	8004c0e <_Balloc+0x2e>
 8004c44:	2000      	movs	r0, #0
 8004c46:	bd70      	pop	{r4, r5, r6, pc}
 8004c48:	6802      	ldr	r2, [r0, #0]
 8004c4a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8004c4e:	2300      	movs	r3, #0
 8004c50:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8004c54:	e7f7      	b.n	8004c46 <_Balloc+0x66>
 8004c56:	bf00      	nop
 8004c58:	08005be5 	.word	0x08005be5
 8004c5c:	08005c65 	.word	0x08005c65

08004c60 <_Bfree>:
 8004c60:	b570      	push	{r4, r5, r6, lr}
 8004c62:	69c6      	ldr	r6, [r0, #28]
 8004c64:	4605      	mov	r5, r0
 8004c66:	460c      	mov	r4, r1
 8004c68:	b976      	cbnz	r6, 8004c88 <_Bfree+0x28>
 8004c6a:	2010      	movs	r0, #16
 8004c6c:	f7ff ff02 	bl	8004a74 <malloc>
 8004c70:	4602      	mov	r2, r0
 8004c72:	61e8      	str	r0, [r5, #28]
 8004c74:	b920      	cbnz	r0, 8004c80 <_Bfree+0x20>
 8004c76:	4b09      	ldr	r3, [pc, #36]	@ (8004c9c <_Bfree+0x3c>)
 8004c78:	4809      	ldr	r0, [pc, #36]	@ (8004ca0 <_Bfree+0x40>)
 8004c7a:	218f      	movs	r1, #143	@ 0x8f
 8004c7c:	f000 fdfe 	bl	800587c <__assert_func>
 8004c80:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8004c84:	6006      	str	r6, [r0, #0]
 8004c86:	60c6      	str	r6, [r0, #12]
 8004c88:	b13c      	cbz	r4, 8004c9a <_Bfree+0x3a>
 8004c8a:	69eb      	ldr	r3, [r5, #28]
 8004c8c:	6862      	ldr	r2, [r4, #4]
 8004c8e:	68db      	ldr	r3, [r3, #12]
 8004c90:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004c94:	6021      	str	r1, [r4, #0]
 8004c96:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8004c9a:	bd70      	pop	{r4, r5, r6, pc}
 8004c9c:	08005be5 	.word	0x08005be5
 8004ca0:	08005c65 	.word	0x08005c65

08004ca4 <__multadd>:
 8004ca4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004ca8:	690d      	ldr	r5, [r1, #16]
 8004caa:	4607      	mov	r7, r0
 8004cac:	460c      	mov	r4, r1
 8004cae:	461e      	mov	r6, r3
 8004cb0:	f101 0c14 	add.w	ip, r1, #20
 8004cb4:	2000      	movs	r0, #0
 8004cb6:	f8dc 3000 	ldr.w	r3, [ip]
 8004cba:	b299      	uxth	r1, r3
 8004cbc:	fb02 6101 	mla	r1, r2, r1, r6
 8004cc0:	0c1e      	lsrs	r6, r3, #16
 8004cc2:	0c0b      	lsrs	r3, r1, #16
 8004cc4:	fb02 3306 	mla	r3, r2, r6, r3
 8004cc8:	b289      	uxth	r1, r1
 8004cca:	3001      	adds	r0, #1
 8004ccc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8004cd0:	4285      	cmp	r5, r0
 8004cd2:	f84c 1b04 	str.w	r1, [ip], #4
 8004cd6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8004cda:	dcec      	bgt.n	8004cb6 <__multadd+0x12>
 8004cdc:	b30e      	cbz	r6, 8004d22 <__multadd+0x7e>
 8004cde:	68a3      	ldr	r3, [r4, #8]
 8004ce0:	42ab      	cmp	r3, r5
 8004ce2:	dc19      	bgt.n	8004d18 <__multadd+0x74>
 8004ce4:	6861      	ldr	r1, [r4, #4]
 8004ce6:	4638      	mov	r0, r7
 8004ce8:	3101      	adds	r1, #1
 8004cea:	f7ff ff79 	bl	8004be0 <_Balloc>
 8004cee:	4680      	mov	r8, r0
 8004cf0:	b928      	cbnz	r0, 8004cfe <__multadd+0x5a>
 8004cf2:	4602      	mov	r2, r0
 8004cf4:	4b0c      	ldr	r3, [pc, #48]	@ (8004d28 <__multadd+0x84>)
 8004cf6:	480d      	ldr	r0, [pc, #52]	@ (8004d2c <__multadd+0x88>)
 8004cf8:	21ba      	movs	r1, #186	@ 0xba
 8004cfa:	f000 fdbf 	bl	800587c <__assert_func>
 8004cfe:	6922      	ldr	r2, [r4, #16]
 8004d00:	3202      	adds	r2, #2
 8004d02:	f104 010c 	add.w	r1, r4, #12
 8004d06:	0092      	lsls	r2, r2, #2
 8004d08:	300c      	adds	r0, #12
 8004d0a:	f000 fda9 	bl	8005860 <memcpy>
 8004d0e:	4621      	mov	r1, r4
 8004d10:	4638      	mov	r0, r7
 8004d12:	f7ff ffa5 	bl	8004c60 <_Bfree>
 8004d16:	4644      	mov	r4, r8
 8004d18:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8004d1c:	3501      	adds	r5, #1
 8004d1e:	615e      	str	r6, [r3, #20]
 8004d20:	6125      	str	r5, [r4, #16]
 8004d22:	4620      	mov	r0, r4
 8004d24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004d28:	08005c54 	.word	0x08005c54
 8004d2c:	08005c65 	.word	0x08005c65

08004d30 <__hi0bits>:
 8004d30:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8004d34:	4603      	mov	r3, r0
 8004d36:	bf36      	itet	cc
 8004d38:	0403      	lslcc	r3, r0, #16
 8004d3a:	2000      	movcs	r0, #0
 8004d3c:	2010      	movcc	r0, #16
 8004d3e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004d42:	bf3c      	itt	cc
 8004d44:	021b      	lslcc	r3, r3, #8
 8004d46:	3008      	addcc	r0, #8
 8004d48:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004d4c:	bf3c      	itt	cc
 8004d4e:	011b      	lslcc	r3, r3, #4
 8004d50:	3004      	addcc	r0, #4
 8004d52:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004d56:	bf3c      	itt	cc
 8004d58:	009b      	lslcc	r3, r3, #2
 8004d5a:	3002      	addcc	r0, #2
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	db05      	blt.n	8004d6c <__hi0bits+0x3c>
 8004d60:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8004d64:	f100 0001 	add.w	r0, r0, #1
 8004d68:	bf08      	it	eq
 8004d6a:	2020      	moveq	r0, #32
 8004d6c:	4770      	bx	lr

08004d6e <__lo0bits>:
 8004d6e:	6803      	ldr	r3, [r0, #0]
 8004d70:	4602      	mov	r2, r0
 8004d72:	f013 0007 	ands.w	r0, r3, #7
 8004d76:	d00b      	beq.n	8004d90 <__lo0bits+0x22>
 8004d78:	07d9      	lsls	r1, r3, #31
 8004d7a:	d421      	bmi.n	8004dc0 <__lo0bits+0x52>
 8004d7c:	0798      	lsls	r0, r3, #30
 8004d7e:	bf49      	itett	mi
 8004d80:	085b      	lsrmi	r3, r3, #1
 8004d82:	089b      	lsrpl	r3, r3, #2
 8004d84:	2001      	movmi	r0, #1
 8004d86:	6013      	strmi	r3, [r2, #0]
 8004d88:	bf5c      	itt	pl
 8004d8a:	6013      	strpl	r3, [r2, #0]
 8004d8c:	2002      	movpl	r0, #2
 8004d8e:	4770      	bx	lr
 8004d90:	b299      	uxth	r1, r3
 8004d92:	b909      	cbnz	r1, 8004d98 <__lo0bits+0x2a>
 8004d94:	0c1b      	lsrs	r3, r3, #16
 8004d96:	2010      	movs	r0, #16
 8004d98:	b2d9      	uxtb	r1, r3
 8004d9a:	b909      	cbnz	r1, 8004da0 <__lo0bits+0x32>
 8004d9c:	3008      	adds	r0, #8
 8004d9e:	0a1b      	lsrs	r3, r3, #8
 8004da0:	0719      	lsls	r1, r3, #28
 8004da2:	bf04      	itt	eq
 8004da4:	091b      	lsreq	r3, r3, #4
 8004da6:	3004      	addeq	r0, #4
 8004da8:	0799      	lsls	r1, r3, #30
 8004daa:	bf04      	itt	eq
 8004dac:	089b      	lsreq	r3, r3, #2
 8004dae:	3002      	addeq	r0, #2
 8004db0:	07d9      	lsls	r1, r3, #31
 8004db2:	d403      	bmi.n	8004dbc <__lo0bits+0x4e>
 8004db4:	085b      	lsrs	r3, r3, #1
 8004db6:	f100 0001 	add.w	r0, r0, #1
 8004dba:	d003      	beq.n	8004dc4 <__lo0bits+0x56>
 8004dbc:	6013      	str	r3, [r2, #0]
 8004dbe:	4770      	bx	lr
 8004dc0:	2000      	movs	r0, #0
 8004dc2:	4770      	bx	lr
 8004dc4:	2020      	movs	r0, #32
 8004dc6:	4770      	bx	lr

08004dc8 <__i2b>:
 8004dc8:	b510      	push	{r4, lr}
 8004dca:	460c      	mov	r4, r1
 8004dcc:	2101      	movs	r1, #1
 8004dce:	f7ff ff07 	bl	8004be0 <_Balloc>
 8004dd2:	4602      	mov	r2, r0
 8004dd4:	b928      	cbnz	r0, 8004de2 <__i2b+0x1a>
 8004dd6:	4b05      	ldr	r3, [pc, #20]	@ (8004dec <__i2b+0x24>)
 8004dd8:	4805      	ldr	r0, [pc, #20]	@ (8004df0 <__i2b+0x28>)
 8004dda:	f240 1145 	movw	r1, #325	@ 0x145
 8004dde:	f000 fd4d 	bl	800587c <__assert_func>
 8004de2:	2301      	movs	r3, #1
 8004de4:	6144      	str	r4, [r0, #20]
 8004de6:	6103      	str	r3, [r0, #16]
 8004de8:	bd10      	pop	{r4, pc}
 8004dea:	bf00      	nop
 8004dec:	08005c54 	.word	0x08005c54
 8004df0:	08005c65 	.word	0x08005c65

08004df4 <__multiply>:
 8004df4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004df8:	4617      	mov	r7, r2
 8004dfa:	690a      	ldr	r2, [r1, #16]
 8004dfc:	693b      	ldr	r3, [r7, #16]
 8004dfe:	429a      	cmp	r2, r3
 8004e00:	bfa8      	it	ge
 8004e02:	463b      	movge	r3, r7
 8004e04:	4689      	mov	r9, r1
 8004e06:	bfa4      	itt	ge
 8004e08:	460f      	movge	r7, r1
 8004e0a:	4699      	movge	r9, r3
 8004e0c:	693d      	ldr	r5, [r7, #16]
 8004e0e:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8004e12:	68bb      	ldr	r3, [r7, #8]
 8004e14:	6879      	ldr	r1, [r7, #4]
 8004e16:	eb05 060a 	add.w	r6, r5, sl
 8004e1a:	42b3      	cmp	r3, r6
 8004e1c:	b085      	sub	sp, #20
 8004e1e:	bfb8      	it	lt
 8004e20:	3101      	addlt	r1, #1
 8004e22:	f7ff fedd 	bl	8004be0 <_Balloc>
 8004e26:	b930      	cbnz	r0, 8004e36 <__multiply+0x42>
 8004e28:	4602      	mov	r2, r0
 8004e2a:	4b41      	ldr	r3, [pc, #260]	@ (8004f30 <__multiply+0x13c>)
 8004e2c:	4841      	ldr	r0, [pc, #260]	@ (8004f34 <__multiply+0x140>)
 8004e2e:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8004e32:	f000 fd23 	bl	800587c <__assert_func>
 8004e36:	f100 0414 	add.w	r4, r0, #20
 8004e3a:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 8004e3e:	4623      	mov	r3, r4
 8004e40:	2200      	movs	r2, #0
 8004e42:	4573      	cmp	r3, lr
 8004e44:	d320      	bcc.n	8004e88 <__multiply+0x94>
 8004e46:	f107 0814 	add.w	r8, r7, #20
 8004e4a:	f109 0114 	add.w	r1, r9, #20
 8004e4e:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 8004e52:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 8004e56:	9302      	str	r3, [sp, #8]
 8004e58:	1beb      	subs	r3, r5, r7
 8004e5a:	3b15      	subs	r3, #21
 8004e5c:	f023 0303 	bic.w	r3, r3, #3
 8004e60:	3304      	adds	r3, #4
 8004e62:	3715      	adds	r7, #21
 8004e64:	42bd      	cmp	r5, r7
 8004e66:	bf38      	it	cc
 8004e68:	2304      	movcc	r3, #4
 8004e6a:	9301      	str	r3, [sp, #4]
 8004e6c:	9b02      	ldr	r3, [sp, #8]
 8004e6e:	9103      	str	r1, [sp, #12]
 8004e70:	428b      	cmp	r3, r1
 8004e72:	d80c      	bhi.n	8004e8e <__multiply+0x9a>
 8004e74:	2e00      	cmp	r6, #0
 8004e76:	dd03      	ble.n	8004e80 <__multiply+0x8c>
 8004e78:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d055      	beq.n	8004f2c <__multiply+0x138>
 8004e80:	6106      	str	r6, [r0, #16]
 8004e82:	b005      	add	sp, #20
 8004e84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004e88:	f843 2b04 	str.w	r2, [r3], #4
 8004e8c:	e7d9      	b.n	8004e42 <__multiply+0x4e>
 8004e8e:	f8b1 a000 	ldrh.w	sl, [r1]
 8004e92:	f1ba 0f00 	cmp.w	sl, #0
 8004e96:	d01f      	beq.n	8004ed8 <__multiply+0xe4>
 8004e98:	46c4      	mov	ip, r8
 8004e9a:	46a1      	mov	r9, r4
 8004e9c:	2700      	movs	r7, #0
 8004e9e:	f85c 2b04 	ldr.w	r2, [ip], #4
 8004ea2:	f8d9 3000 	ldr.w	r3, [r9]
 8004ea6:	fa1f fb82 	uxth.w	fp, r2
 8004eaa:	b29b      	uxth	r3, r3
 8004eac:	fb0a 330b 	mla	r3, sl, fp, r3
 8004eb0:	443b      	add	r3, r7
 8004eb2:	f8d9 7000 	ldr.w	r7, [r9]
 8004eb6:	0c12      	lsrs	r2, r2, #16
 8004eb8:	0c3f      	lsrs	r7, r7, #16
 8004eba:	fb0a 7202 	mla	r2, sl, r2, r7
 8004ebe:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 8004ec2:	b29b      	uxth	r3, r3
 8004ec4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004ec8:	4565      	cmp	r5, ip
 8004eca:	f849 3b04 	str.w	r3, [r9], #4
 8004ece:	ea4f 4712 	mov.w	r7, r2, lsr #16
 8004ed2:	d8e4      	bhi.n	8004e9e <__multiply+0xaa>
 8004ed4:	9b01      	ldr	r3, [sp, #4]
 8004ed6:	50e7      	str	r7, [r4, r3]
 8004ed8:	9b03      	ldr	r3, [sp, #12]
 8004eda:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8004ede:	3104      	adds	r1, #4
 8004ee0:	f1b9 0f00 	cmp.w	r9, #0
 8004ee4:	d020      	beq.n	8004f28 <__multiply+0x134>
 8004ee6:	6823      	ldr	r3, [r4, #0]
 8004ee8:	4647      	mov	r7, r8
 8004eea:	46a4      	mov	ip, r4
 8004eec:	f04f 0a00 	mov.w	sl, #0
 8004ef0:	f8b7 b000 	ldrh.w	fp, [r7]
 8004ef4:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8004ef8:	fb09 220b 	mla	r2, r9, fp, r2
 8004efc:	4452      	add	r2, sl
 8004efe:	b29b      	uxth	r3, r3
 8004f00:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004f04:	f84c 3b04 	str.w	r3, [ip], #4
 8004f08:	f857 3b04 	ldr.w	r3, [r7], #4
 8004f0c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8004f10:	f8bc 3000 	ldrh.w	r3, [ip]
 8004f14:	fb09 330a 	mla	r3, r9, sl, r3
 8004f18:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8004f1c:	42bd      	cmp	r5, r7
 8004f1e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8004f22:	d8e5      	bhi.n	8004ef0 <__multiply+0xfc>
 8004f24:	9a01      	ldr	r2, [sp, #4]
 8004f26:	50a3      	str	r3, [r4, r2]
 8004f28:	3404      	adds	r4, #4
 8004f2a:	e79f      	b.n	8004e6c <__multiply+0x78>
 8004f2c:	3e01      	subs	r6, #1
 8004f2e:	e7a1      	b.n	8004e74 <__multiply+0x80>
 8004f30:	08005c54 	.word	0x08005c54
 8004f34:	08005c65 	.word	0x08005c65

08004f38 <__pow5mult>:
 8004f38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004f3c:	4615      	mov	r5, r2
 8004f3e:	f012 0203 	ands.w	r2, r2, #3
 8004f42:	4607      	mov	r7, r0
 8004f44:	460e      	mov	r6, r1
 8004f46:	d007      	beq.n	8004f58 <__pow5mult+0x20>
 8004f48:	4c25      	ldr	r4, [pc, #148]	@ (8004fe0 <__pow5mult+0xa8>)
 8004f4a:	3a01      	subs	r2, #1
 8004f4c:	2300      	movs	r3, #0
 8004f4e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8004f52:	f7ff fea7 	bl	8004ca4 <__multadd>
 8004f56:	4606      	mov	r6, r0
 8004f58:	10ad      	asrs	r5, r5, #2
 8004f5a:	d03d      	beq.n	8004fd8 <__pow5mult+0xa0>
 8004f5c:	69fc      	ldr	r4, [r7, #28]
 8004f5e:	b97c      	cbnz	r4, 8004f80 <__pow5mult+0x48>
 8004f60:	2010      	movs	r0, #16
 8004f62:	f7ff fd87 	bl	8004a74 <malloc>
 8004f66:	4602      	mov	r2, r0
 8004f68:	61f8      	str	r0, [r7, #28]
 8004f6a:	b928      	cbnz	r0, 8004f78 <__pow5mult+0x40>
 8004f6c:	4b1d      	ldr	r3, [pc, #116]	@ (8004fe4 <__pow5mult+0xac>)
 8004f6e:	481e      	ldr	r0, [pc, #120]	@ (8004fe8 <__pow5mult+0xb0>)
 8004f70:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8004f74:	f000 fc82 	bl	800587c <__assert_func>
 8004f78:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8004f7c:	6004      	str	r4, [r0, #0]
 8004f7e:	60c4      	str	r4, [r0, #12]
 8004f80:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8004f84:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8004f88:	b94c      	cbnz	r4, 8004f9e <__pow5mult+0x66>
 8004f8a:	f240 2171 	movw	r1, #625	@ 0x271
 8004f8e:	4638      	mov	r0, r7
 8004f90:	f7ff ff1a 	bl	8004dc8 <__i2b>
 8004f94:	2300      	movs	r3, #0
 8004f96:	f8c8 0008 	str.w	r0, [r8, #8]
 8004f9a:	4604      	mov	r4, r0
 8004f9c:	6003      	str	r3, [r0, #0]
 8004f9e:	f04f 0900 	mov.w	r9, #0
 8004fa2:	07eb      	lsls	r3, r5, #31
 8004fa4:	d50a      	bpl.n	8004fbc <__pow5mult+0x84>
 8004fa6:	4631      	mov	r1, r6
 8004fa8:	4622      	mov	r2, r4
 8004faa:	4638      	mov	r0, r7
 8004fac:	f7ff ff22 	bl	8004df4 <__multiply>
 8004fb0:	4631      	mov	r1, r6
 8004fb2:	4680      	mov	r8, r0
 8004fb4:	4638      	mov	r0, r7
 8004fb6:	f7ff fe53 	bl	8004c60 <_Bfree>
 8004fba:	4646      	mov	r6, r8
 8004fbc:	106d      	asrs	r5, r5, #1
 8004fbe:	d00b      	beq.n	8004fd8 <__pow5mult+0xa0>
 8004fc0:	6820      	ldr	r0, [r4, #0]
 8004fc2:	b938      	cbnz	r0, 8004fd4 <__pow5mult+0x9c>
 8004fc4:	4622      	mov	r2, r4
 8004fc6:	4621      	mov	r1, r4
 8004fc8:	4638      	mov	r0, r7
 8004fca:	f7ff ff13 	bl	8004df4 <__multiply>
 8004fce:	6020      	str	r0, [r4, #0]
 8004fd0:	f8c0 9000 	str.w	r9, [r0]
 8004fd4:	4604      	mov	r4, r0
 8004fd6:	e7e4      	b.n	8004fa2 <__pow5mult+0x6a>
 8004fd8:	4630      	mov	r0, r6
 8004fda:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004fde:	bf00      	nop
 8004fe0:	08005d18 	.word	0x08005d18
 8004fe4:	08005be5 	.word	0x08005be5
 8004fe8:	08005c65 	.word	0x08005c65

08004fec <__lshift>:
 8004fec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004ff0:	460c      	mov	r4, r1
 8004ff2:	6849      	ldr	r1, [r1, #4]
 8004ff4:	6923      	ldr	r3, [r4, #16]
 8004ff6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8004ffa:	68a3      	ldr	r3, [r4, #8]
 8004ffc:	4607      	mov	r7, r0
 8004ffe:	4691      	mov	r9, r2
 8005000:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8005004:	f108 0601 	add.w	r6, r8, #1
 8005008:	42b3      	cmp	r3, r6
 800500a:	db0b      	blt.n	8005024 <__lshift+0x38>
 800500c:	4638      	mov	r0, r7
 800500e:	f7ff fde7 	bl	8004be0 <_Balloc>
 8005012:	4605      	mov	r5, r0
 8005014:	b948      	cbnz	r0, 800502a <__lshift+0x3e>
 8005016:	4602      	mov	r2, r0
 8005018:	4b28      	ldr	r3, [pc, #160]	@ (80050bc <__lshift+0xd0>)
 800501a:	4829      	ldr	r0, [pc, #164]	@ (80050c0 <__lshift+0xd4>)
 800501c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8005020:	f000 fc2c 	bl	800587c <__assert_func>
 8005024:	3101      	adds	r1, #1
 8005026:	005b      	lsls	r3, r3, #1
 8005028:	e7ee      	b.n	8005008 <__lshift+0x1c>
 800502a:	2300      	movs	r3, #0
 800502c:	f100 0114 	add.w	r1, r0, #20
 8005030:	f100 0210 	add.w	r2, r0, #16
 8005034:	4618      	mov	r0, r3
 8005036:	4553      	cmp	r3, sl
 8005038:	db33      	blt.n	80050a2 <__lshift+0xb6>
 800503a:	6920      	ldr	r0, [r4, #16]
 800503c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8005040:	f104 0314 	add.w	r3, r4, #20
 8005044:	f019 091f 	ands.w	r9, r9, #31
 8005048:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800504c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8005050:	d02b      	beq.n	80050aa <__lshift+0xbe>
 8005052:	f1c9 0e20 	rsb	lr, r9, #32
 8005056:	468a      	mov	sl, r1
 8005058:	2200      	movs	r2, #0
 800505a:	6818      	ldr	r0, [r3, #0]
 800505c:	fa00 f009 	lsl.w	r0, r0, r9
 8005060:	4310      	orrs	r0, r2
 8005062:	f84a 0b04 	str.w	r0, [sl], #4
 8005066:	f853 2b04 	ldr.w	r2, [r3], #4
 800506a:	459c      	cmp	ip, r3
 800506c:	fa22 f20e 	lsr.w	r2, r2, lr
 8005070:	d8f3      	bhi.n	800505a <__lshift+0x6e>
 8005072:	ebac 0304 	sub.w	r3, ip, r4
 8005076:	3b15      	subs	r3, #21
 8005078:	f023 0303 	bic.w	r3, r3, #3
 800507c:	3304      	adds	r3, #4
 800507e:	f104 0015 	add.w	r0, r4, #21
 8005082:	4560      	cmp	r0, ip
 8005084:	bf88      	it	hi
 8005086:	2304      	movhi	r3, #4
 8005088:	50ca      	str	r2, [r1, r3]
 800508a:	b10a      	cbz	r2, 8005090 <__lshift+0xa4>
 800508c:	f108 0602 	add.w	r6, r8, #2
 8005090:	3e01      	subs	r6, #1
 8005092:	4638      	mov	r0, r7
 8005094:	612e      	str	r6, [r5, #16]
 8005096:	4621      	mov	r1, r4
 8005098:	f7ff fde2 	bl	8004c60 <_Bfree>
 800509c:	4628      	mov	r0, r5
 800509e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80050a2:	f842 0f04 	str.w	r0, [r2, #4]!
 80050a6:	3301      	adds	r3, #1
 80050a8:	e7c5      	b.n	8005036 <__lshift+0x4a>
 80050aa:	3904      	subs	r1, #4
 80050ac:	f853 2b04 	ldr.w	r2, [r3], #4
 80050b0:	f841 2f04 	str.w	r2, [r1, #4]!
 80050b4:	459c      	cmp	ip, r3
 80050b6:	d8f9      	bhi.n	80050ac <__lshift+0xc0>
 80050b8:	e7ea      	b.n	8005090 <__lshift+0xa4>
 80050ba:	bf00      	nop
 80050bc:	08005c54 	.word	0x08005c54
 80050c0:	08005c65 	.word	0x08005c65

080050c4 <__mcmp>:
 80050c4:	690a      	ldr	r2, [r1, #16]
 80050c6:	4603      	mov	r3, r0
 80050c8:	6900      	ldr	r0, [r0, #16]
 80050ca:	1a80      	subs	r0, r0, r2
 80050cc:	b530      	push	{r4, r5, lr}
 80050ce:	d10e      	bne.n	80050ee <__mcmp+0x2a>
 80050d0:	3314      	adds	r3, #20
 80050d2:	3114      	adds	r1, #20
 80050d4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80050d8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80050dc:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80050e0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80050e4:	4295      	cmp	r5, r2
 80050e6:	d003      	beq.n	80050f0 <__mcmp+0x2c>
 80050e8:	d205      	bcs.n	80050f6 <__mcmp+0x32>
 80050ea:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80050ee:	bd30      	pop	{r4, r5, pc}
 80050f0:	42a3      	cmp	r3, r4
 80050f2:	d3f3      	bcc.n	80050dc <__mcmp+0x18>
 80050f4:	e7fb      	b.n	80050ee <__mcmp+0x2a>
 80050f6:	2001      	movs	r0, #1
 80050f8:	e7f9      	b.n	80050ee <__mcmp+0x2a>
	...

080050fc <__mdiff>:
 80050fc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005100:	4689      	mov	r9, r1
 8005102:	4606      	mov	r6, r0
 8005104:	4611      	mov	r1, r2
 8005106:	4648      	mov	r0, r9
 8005108:	4614      	mov	r4, r2
 800510a:	f7ff ffdb 	bl	80050c4 <__mcmp>
 800510e:	1e05      	subs	r5, r0, #0
 8005110:	d112      	bne.n	8005138 <__mdiff+0x3c>
 8005112:	4629      	mov	r1, r5
 8005114:	4630      	mov	r0, r6
 8005116:	f7ff fd63 	bl	8004be0 <_Balloc>
 800511a:	4602      	mov	r2, r0
 800511c:	b928      	cbnz	r0, 800512a <__mdiff+0x2e>
 800511e:	4b3f      	ldr	r3, [pc, #252]	@ (800521c <__mdiff+0x120>)
 8005120:	f240 2137 	movw	r1, #567	@ 0x237
 8005124:	483e      	ldr	r0, [pc, #248]	@ (8005220 <__mdiff+0x124>)
 8005126:	f000 fba9 	bl	800587c <__assert_func>
 800512a:	2301      	movs	r3, #1
 800512c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8005130:	4610      	mov	r0, r2
 8005132:	b003      	add	sp, #12
 8005134:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005138:	bfbc      	itt	lt
 800513a:	464b      	movlt	r3, r9
 800513c:	46a1      	movlt	r9, r4
 800513e:	4630      	mov	r0, r6
 8005140:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8005144:	bfba      	itte	lt
 8005146:	461c      	movlt	r4, r3
 8005148:	2501      	movlt	r5, #1
 800514a:	2500      	movge	r5, #0
 800514c:	f7ff fd48 	bl	8004be0 <_Balloc>
 8005150:	4602      	mov	r2, r0
 8005152:	b918      	cbnz	r0, 800515c <__mdiff+0x60>
 8005154:	4b31      	ldr	r3, [pc, #196]	@ (800521c <__mdiff+0x120>)
 8005156:	f240 2145 	movw	r1, #581	@ 0x245
 800515a:	e7e3      	b.n	8005124 <__mdiff+0x28>
 800515c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8005160:	6926      	ldr	r6, [r4, #16]
 8005162:	60c5      	str	r5, [r0, #12]
 8005164:	f109 0310 	add.w	r3, r9, #16
 8005168:	f109 0514 	add.w	r5, r9, #20
 800516c:	f104 0e14 	add.w	lr, r4, #20
 8005170:	f100 0b14 	add.w	fp, r0, #20
 8005174:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8005178:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800517c:	9301      	str	r3, [sp, #4]
 800517e:	46d9      	mov	r9, fp
 8005180:	f04f 0c00 	mov.w	ip, #0
 8005184:	9b01      	ldr	r3, [sp, #4]
 8005186:	f85e 0b04 	ldr.w	r0, [lr], #4
 800518a:	f853 af04 	ldr.w	sl, [r3, #4]!
 800518e:	9301      	str	r3, [sp, #4]
 8005190:	fa1f f38a 	uxth.w	r3, sl
 8005194:	4619      	mov	r1, r3
 8005196:	b283      	uxth	r3, r0
 8005198:	1acb      	subs	r3, r1, r3
 800519a:	0c00      	lsrs	r0, r0, #16
 800519c:	4463      	add	r3, ip
 800519e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80051a2:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80051a6:	b29b      	uxth	r3, r3
 80051a8:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80051ac:	4576      	cmp	r6, lr
 80051ae:	f849 3b04 	str.w	r3, [r9], #4
 80051b2:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80051b6:	d8e5      	bhi.n	8005184 <__mdiff+0x88>
 80051b8:	1b33      	subs	r3, r6, r4
 80051ba:	3b15      	subs	r3, #21
 80051bc:	f023 0303 	bic.w	r3, r3, #3
 80051c0:	3415      	adds	r4, #21
 80051c2:	3304      	adds	r3, #4
 80051c4:	42a6      	cmp	r6, r4
 80051c6:	bf38      	it	cc
 80051c8:	2304      	movcc	r3, #4
 80051ca:	441d      	add	r5, r3
 80051cc:	445b      	add	r3, fp
 80051ce:	461e      	mov	r6, r3
 80051d0:	462c      	mov	r4, r5
 80051d2:	4544      	cmp	r4, r8
 80051d4:	d30e      	bcc.n	80051f4 <__mdiff+0xf8>
 80051d6:	f108 0103 	add.w	r1, r8, #3
 80051da:	1b49      	subs	r1, r1, r5
 80051dc:	f021 0103 	bic.w	r1, r1, #3
 80051e0:	3d03      	subs	r5, #3
 80051e2:	45a8      	cmp	r8, r5
 80051e4:	bf38      	it	cc
 80051e6:	2100      	movcc	r1, #0
 80051e8:	440b      	add	r3, r1
 80051ea:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80051ee:	b191      	cbz	r1, 8005216 <__mdiff+0x11a>
 80051f0:	6117      	str	r7, [r2, #16]
 80051f2:	e79d      	b.n	8005130 <__mdiff+0x34>
 80051f4:	f854 1b04 	ldr.w	r1, [r4], #4
 80051f8:	46e6      	mov	lr, ip
 80051fa:	0c08      	lsrs	r0, r1, #16
 80051fc:	fa1c fc81 	uxtah	ip, ip, r1
 8005200:	4471      	add	r1, lr
 8005202:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8005206:	b289      	uxth	r1, r1
 8005208:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800520c:	f846 1b04 	str.w	r1, [r6], #4
 8005210:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8005214:	e7dd      	b.n	80051d2 <__mdiff+0xd6>
 8005216:	3f01      	subs	r7, #1
 8005218:	e7e7      	b.n	80051ea <__mdiff+0xee>
 800521a:	bf00      	nop
 800521c:	08005c54 	.word	0x08005c54
 8005220:	08005c65 	.word	0x08005c65

08005224 <__d2b>:
 8005224:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8005228:	460f      	mov	r7, r1
 800522a:	2101      	movs	r1, #1
 800522c:	ec59 8b10 	vmov	r8, r9, d0
 8005230:	4616      	mov	r6, r2
 8005232:	f7ff fcd5 	bl	8004be0 <_Balloc>
 8005236:	4604      	mov	r4, r0
 8005238:	b930      	cbnz	r0, 8005248 <__d2b+0x24>
 800523a:	4602      	mov	r2, r0
 800523c:	4b23      	ldr	r3, [pc, #140]	@ (80052cc <__d2b+0xa8>)
 800523e:	4824      	ldr	r0, [pc, #144]	@ (80052d0 <__d2b+0xac>)
 8005240:	f240 310f 	movw	r1, #783	@ 0x30f
 8005244:	f000 fb1a 	bl	800587c <__assert_func>
 8005248:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800524c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8005250:	b10d      	cbz	r5, 8005256 <__d2b+0x32>
 8005252:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005256:	9301      	str	r3, [sp, #4]
 8005258:	f1b8 0300 	subs.w	r3, r8, #0
 800525c:	d023      	beq.n	80052a6 <__d2b+0x82>
 800525e:	4668      	mov	r0, sp
 8005260:	9300      	str	r3, [sp, #0]
 8005262:	f7ff fd84 	bl	8004d6e <__lo0bits>
 8005266:	e9dd 1200 	ldrd	r1, r2, [sp]
 800526a:	b1d0      	cbz	r0, 80052a2 <__d2b+0x7e>
 800526c:	f1c0 0320 	rsb	r3, r0, #32
 8005270:	fa02 f303 	lsl.w	r3, r2, r3
 8005274:	430b      	orrs	r3, r1
 8005276:	40c2      	lsrs	r2, r0
 8005278:	6163      	str	r3, [r4, #20]
 800527a:	9201      	str	r2, [sp, #4]
 800527c:	9b01      	ldr	r3, [sp, #4]
 800527e:	61a3      	str	r3, [r4, #24]
 8005280:	2b00      	cmp	r3, #0
 8005282:	bf0c      	ite	eq
 8005284:	2201      	moveq	r2, #1
 8005286:	2202      	movne	r2, #2
 8005288:	6122      	str	r2, [r4, #16]
 800528a:	b1a5      	cbz	r5, 80052b6 <__d2b+0x92>
 800528c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8005290:	4405      	add	r5, r0
 8005292:	603d      	str	r5, [r7, #0]
 8005294:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8005298:	6030      	str	r0, [r6, #0]
 800529a:	4620      	mov	r0, r4
 800529c:	b003      	add	sp, #12
 800529e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80052a2:	6161      	str	r1, [r4, #20]
 80052a4:	e7ea      	b.n	800527c <__d2b+0x58>
 80052a6:	a801      	add	r0, sp, #4
 80052a8:	f7ff fd61 	bl	8004d6e <__lo0bits>
 80052ac:	9b01      	ldr	r3, [sp, #4]
 80052ae:	6163      	str	r3, [r4, #20]
 80052b0:	3020      	adds	r0, #32
 80052b2:	2201      	movs	r2, #1
 80052b4:	e7e8      	b.n	8005288 <__d2b+0x64>
 80052b6:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80052ba:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80052be:	6038      	str	r0, [r7, #0]
 80052c0:	6918      	ldr	r0, [r3, #16]
 80052c2:	f7ff fd35 	bl	8004d30 <__hi0bits>
 80052c6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80052ca:	e7e5      	b.n	8005298 <__d2b+0x74>
 80052cc:	08005c54 	.word	0x08005c54
 80052d0:	08005c65 	.word	0x08005c65

080052d4 <__sfputc_r>:
 80052d4:	6893      	ldr	r3, [r2, #8]
 80052d6:	3b01      	subs	r3, #1
 80052d8:	2b00      	cmp	r3, #0
 80052da:	b410      	push	{r4}
 80052dc:	6093      	str	r3, [r2, #8]
 80052de:	da08      	bge.n	80052f2 <__sfputc_r+0x1e>
 80052e0:	6994      	ldr	r4, [r2, #24]
 80052e2:	42a3      	cmp	r3, r4
 80052e4:	db01      	blt.n	80052ea <__sfputc_r+0x16>
 80052e6:	290a      	cmp	r1, #10
 80052e8:	d103      	bne.n	80052f2 <__sfputc_r+0x1e>
 80052ea:	f85d 4b04 	ldr.w	r4, [sp], #4
 80052ee:	f000 ba13 	b.w	8005718 <__swbuf_r>
 80052f2:	6813      	ldr	r3, [r2, #0]
 80052f4:	1c58      	adds	r0, r3, #1
 80052f6:	6010      	str	r0, [r2, #0]
 80052f8:	7019      	strb	r1, [r3, #0]
 80052fa:	4608      	mov	r0, r1
 80052fc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005300:	4770      	bx	lr

08005302 <__sfputs_r>:
 8005302:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005304:	4606      	mov	r6, r0
 8005306:	460f      	mov	r7, r1
 8005308:	4614      	mov	r4, r2
 800530a:	18d5      	adds	r5, r2, r3
 800530c:	42ac      	cmp	r4, r5
 800530e:	d101      	bne.n	8005314 <__sfputs_r+0x12>
 8005310:	2000      	movs	r0, #0
 8005312:	e007      	b.n	8005324 <__sfputs_r+0x22>
 8005314:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005318:	463a      	mov	r2, r7
 800531a:	4630      	mov	r0, r6
 800531c:	f7ff ffda 	bl	80052d4 <__sfputc_r>
 8005320:	1c43      	adds	r3, r0, #1
 8005322:	d1f3      	bne.n	800530c <__sfputs_r+0xa>
 8005324:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005328 <_vfiprintf_r>:
 8005328:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800532c:	460d      	mov	r5, r1
 800532e:	b09d      	sub	sp, #116	@ 0x74
 8005330:	4614      	mov	r4, r2
 8005332:	4698      	mov	r8, r3
 8005334:	4606      	mov	r6, r0
 8005336:	b118      	cbz	r0, 8005340 <_vfiprintf_r+0x18>
 8005338:	6a03      	ldr	r3, [r0, #32]
 800533a:	b90b      	cbnz	r3, 8005340 <_vfiprintf_r+0x18>
 800533c:	f7fe fbe4 	bl	8003b08 <__sinit>
 8005340:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005342:	07d9      	lsls	r1, r3, #31
 8005344:	d405      	bmi.n	8005352 <_vfiprintf_r+0x2a>
 8005346:	89ab      	ldrh	r3, [r5, #12]
 8005348:	059a      	lsls	r2, r3, #22
 800534a:	d402      	bmi.n	8005352 <_vfiprintf_r+0x2a>
 800534c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800534e:	f7fe fcec 	bl	8003d2a <__retarget_lock_acquire_recursive>
 8005352:	89ab      	ldrh	r3, [r5, #12]
 8005354:	071b      	lsls	r3, r3, #28
 8005356:	d501      	bpl.n	800535c <_vfiprintf_r+0x34>
 8005358:	692b      	ldr	r3, [r5, #16]
 800535a:	b99b      	cbnz	r3, 8005384 <_vfiprintf_r+0x5c>
 800535c:	4629      	mov	r1, r5
 800535e:	4630      	mov	r0, r6
 8005360:	f000 fa18 	bl	8005794 <__swsetup_r>
 8005364:	b170      	cbz	r0, 8005384 <_vfiprintf_r+0x5c>
 8005366:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005368:	07dc      	lsls	r4, r3, #31
 800536a:	d504      	bpl.n	8005376 <_vfiprintf_r+0x4e>
 800536c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005370:	b01d      	add	sp, #116	@ 0x74
 8005372:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005376:	89ab      	ldrh	r3, [r5, #12]
 8005378:	0598      	lsls	r0, r3, #22
 800537a:	d4f7      	bmi.n	800536c <_vfiprintf_r+0x44>
 800537c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800537e:	f7fe fcd5 	bl	8003d2c <__retarget_lock_release_recursive>
 8005382:	e7f3      	b.n	800536c <_vfiprintf_r+0x44>
 8005384:	2300      	movs	r3, #0
 8005386:	9309      	str	r3, [sp, #36]	@ 0x24
 8005388:	2320      	movs	r3, #32
 800538a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800538e:	f8cd 800c 	str.w	r8, [sp, #12]
 8005392:	2330      	movs	r3, #48	@ 0x30
 8005394:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8005544 <_vfiprintf_r+0x21c>
 8005398:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800539c:	f04f 0901 	mov.w	r9, #1
 80053a0:	4623      	mov	r3, r4
 80053a2:	469a      	mov	sl, r3
 80053a4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80053a8:	b10a      	cbz	r2, 80053ae <_vfiprintf_r+0x86>
 80053aa:	2a25      	cmp	r2, #37	@ 0x25
 80053ac:	d1f9      	bne.n	80053a2 <_vfiprintf_r+0x7a>
 80053ae:	ebba 0b04 	subs.w	fp, sl, r4
 80053b2:	d00b      	beq.n	80053cc <_vfiprintf_r+0xa4>
 80053b4:	465b      	mov	r3, fp
 80053b6:	4622      	mov	r2, r4
 80053b8:	4629      	mov	r1, r5
 80053ba:	4630      	mov	r0, r6
 80053bc:	f7ff ffa1 	bl	8005302 <__sfputs_r>
 80053c0:	3001      	adds	r0, #1
 80053c2:	f000 80a7 	beq.w	8005514 <_vfiprintf_r+0x1ec>
 80053c6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80053c8:	445a      	add	r2, fp
 80053ca:	9209      	str	r2, [sp, #36]	@ 0x24
 80053cc:	f89a 3000 	ldrb.w	r3, [sl]
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	f000 809f 	beq.w	8005514 <_vfiprintf_r+0x1ec>
 80053d6:	2300      	movs	r3, #0
 80053d8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80053dc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80053e0:	f10a 0a01 	add.w	sl, sl, #1
 80053e4:	9304      	str	r3, [sp, #16]
 80053e6:	9307      	str	r3, [sp, #28]
 80053e8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80053ec:	931a      	str	r3, [sp, #104]	@ 0x68
 80053ee:	4654      	mov	r4, sl
 80053f0:	2205      	movs	r2, #5
 80053f2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80053f6:	4853      	ldr	r0, [pc, #332]	@ (8005544 <_vfiprintf_r+0x21c>)
 80053f8:	f7fa fef2 	bl	80001e0 <memchr>
 80053fc:	9a04      	ldr	r2, [sp, #16]
 80053fe:	b9d8      	cbnz	r0, 8005438 <_vfiprintf_r+0x110>
 8005400:	06d1      	lsls	r1, r2, #27
 8005402:	bf44      	itt	mi
 8005404:	2320      	movmi	r3, #32
 8005406:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800540a:	0713      	lsls	r3, r2, #28
 800540c:	bf44      	itt	mi
 800540e:	232b      	movmi	r3, #43	@ 0x2b
 8005410:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005414:	f89a 3000 	ldrb.w	r3, [sl]
 8005418:	2b2a      	cmp	r3, #42	@ 0x2a
 800541a:	d015      	beq.n	8005448 <_vfiprintf_r+0x120>
 800541c:	9a07      	ldr	r2, [sp, #28]
 800541e:	4654      	mov	r4, sl
 8005420:	2000      	movs	r0, #0
 8005422:	f04f 0c0a 	mov.w	ip, #10
 8005426:	4621      	mov	r1, r4
 8005428:	f811 3b01 	ldrb.w	r3, [r1], #1
 800542c:	3b30      	subs	r3, #48	@ 0x30
 800542e:	2b09      	cmp	r3, #9
 8005430:	d94b      	bls.n	80054ca <_vfiprintf_r+0x1a2>
 8005432:	b1b0      	cbz	r0, 8005462 <_vfiprintf_r+0x13a>
 8005434:	9207      	str	r2, [sp, #28]
 8005436:	e014      	b.n	8005462 <_vfiprintf_r+0x13a>
 8005438:	eba0 0308 	sub.w	r3, r0, r8
 800543c:	fa09 f303 	lsl.w	r3, r9, r3
 8005440:	4313      	orrs	r3, r2
 8005442:	9304      	str	r3, [sp, #16]
 8005444:	46a2      	mov	sl, r4
 8005446:	e7d2      	b.n	80053ee <_vfiprintf_r+0xc6>
 8005448:	9b03      	ldr	r3, [sp, #12]
 800544a:	1d19      	adds	r1, r3, #4
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	9103      	str	r1, [sp, #12]
 8005450:	2b00      	cmp	r3, #0
 8005452:	bfbb      	ittet	lt
 8005454:	425b      	neglt	r3, r3
 8005456:	f042 0202 	orrlt.w	r2, r2, #2
 800545a:	9307      	strge	r3, [sp, #28]
 800545c:	9307      	strlt	r3, [sp, #28]
 800545e:	bfb8      	it	lt
 8005460:	9204      	strlt	r2, [sp, #16]
 8005462:	7823      	ldrb	r3, [r4, #0]
 8005464:	2b2e      	cmp	r3, #46	@ 0x2e
 8005466:	d10a      	bne.n	800547e <_vfiprintf_r+0x156>
 8005468:	7863      	ldrb	r3, [r4, #1]
 800546a:	2b2a      	cmp	r3, #42	@ 0x2a
 800546c:	d132      	bne.n	80054d4 <_vfiprintf_r+0x1ac>
 800546e:	9b03      	ldr	r3, [sp, #12]
 8005470:	1d1a      	adds	r2, r3, #4
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	9203      	str	r2, [sp, #12]
 8005476:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800547a:	3402      	adds	r4, #2
 800547c:	9305      	str	r3, [sp, #20]
 800547e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8005554 <_vfiprintf_r+0x22c>
 8005482:	7821      	ldrb	r1, [r4, #0]
 8005484:	2203      	movs	r2, #3
 8005486:	4650      	mov	r0, sl
 8005488:	f7fa feaa 	bl	80001e0 <memchr>
 800548c:	b138      	cbz	r0, 800549e <_vfiprintf_r+0x176>
 800548e:	9b04      	ldr	r3, [sp, #16]
 8005490:	eba0 000a 	sub.w	r0, r0, sl
 8005494:	2240      	movs	r2, #64	@ 0x40
 8005496:	4082      	lsls	r2, r0
 8005498:	4313      	orrs	r3, r2
 800549a:	3401      	adds	r4, #1
 800549c:	9304      	str	r3, [sp, #16]
 800549e:	f814 1b01 	ldrb.w	r1, [r4], #1
 80054a2:	4829      	ldr	r0, [pc, #164]	@ (8005548 <_vfiprintf_r+0x220>)
 80054a4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80054a8:	2206      	movs	r2, #6
 80054aa:	f7fa fe99 	bl	80001e0 <memchr>
 80054ae:	2800      	cmp	r0, #0
 80054b0:	d03f      	beq.n	8005532 <_vfiprintf_r+0x20a>
 80054b2:	4b26      	ldr	r3, [pc, #152]	@ (800554c <_vfiprintf_r+0x224>)
 80054b4:	bb1b      	cbnz	r3, 80054fe <_vfiprintf_r+0x1d6>
 80054b6:	9b03      	ldr	r3, [sp, #12]
 80054b8:	3307      	adds	r3, #7
 80054ba:	f023 0307 	bic.w	r3, r3, #7
 80054be:	3308      	adds	r3, #8
 80054c0:	9303      	str	r3, [sp, #12]
 80054c2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80054c4:	443b      	add	r3, r7
 80054c6:	9309      	str	r3, [sp, #36]	@ 0x24
 80054c8:	e76a      	b.n	80053a0 <_vfiprintf_r+0x78>
 80054ca:	fb0c 3202 	mla	r2, ip, r2, r3
 80054ce:	460c      	mov	r4, r1
 80054d0:	2001      	movs	r0, #1
 80054d2:	e7a8      	b.n	8005426 <_vfiprintf_r+0xfe>
 80054d4:	2300      	movs	r3, #0
 80054d6:	3401      	adds	r4, #1
 80054d8:	9305      	str	r3, [sp, #20]
 80054da:	4619      	mov	r1, r3
 80054dc:	f04f 0c0a 	mov.w	ip, #10
 80054e0:	4620      	mov	r0, r4
 80054e2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80054e6:	3a30      	subs	r2, #48	@ 0x30
 80054e8:	2a09      	cmp	r2, #9
 80054ea:	d903      	bls.n	80054f4 <_vfiprintf_r+0x1cc>
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d0c6      	beq.n	800547e <_vfiprintf_r+0x156>
 80054f0:	9105      	str	r1, [sp, #20]
 80054f2:	e7c4      	b.n	800547e <_vfiprintf_r+0x156>
 80054f4:	fb0c 2101 	mla	r1, ip, r1, r2
 80054f8:	4604      	mov	r4, r0
 80054fa:	2301      	movs	r3, #1
 80054fc:	e7f0      	b.n	80054e0 <_vfiprintf_r+0x1b8>
 80054fe:	ab03      	add	r3, sp, #12
 8005500:	9300      	str	r3, [sp, #0]
 8005502:	462a      	mov	r2, r5
 8005504:	4b12      	ldr	r3, [pc, #72]	@ (8005550 <_vfiprintf_r+0x228>)
 8005506:	a904      	add	r1, sp, #16
 8005508:	4630      	mov	r0, r6
 800550a:	f7fd febb 	bl	8003284 <_printf_float>
 800550e:	4607      	mov	r7, r0
 8005510:	1c78      	adds	r0, r7, #1
 8005512:	d1d6      	bne.n	80054c2 <_vfiprintf_r+0x19a>
 8005514:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005516:	07d9      	lsls	r1, r3, #31
 8005518:	d405      	bmi.n	8005526 <_vfiprintf_r+0x1fe>
 800551a:	89ab      	ldrh	r3, [r5, #12]
 800551c:	059a      	lsls	r2, r3, #22
 800551e:	d402      	bmi.n	8005526 <_vfiprintf_r+0x1fe>
 8005520:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005522:	f7fe fc03 	bl	8003d2c <__retarget_lock_release_recursive>
 8005526:	89ab      	ldrh	r3, [r5, #12]
 8005528:	065b      	lsls	r3, r3, #25
 800552a:	f53f af1f 	bmi.w	800536c <_vfiprintf_r+0x44>
 800552e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005530:	e71e      	b.n	8005370 <_vfiprintf_r+0x48>
 8005532:	ab03      	add	r3, sp, #12
 8005534:	9300      	str	r3, [sp, #0]
 8005536:	462a      	mov	r2, r5
 8005538:	4b05      	ldr	r3, [pc, #20]	@ (8005550 <_vfiprintf_r+0x228>)
 800553a:	a904      	add	r1, sp, #16
 800553c:	4630      	mov	r0, r6
 800553e:	f7fe f939 	bl	80037b4 <_printf_i>
 8005542:	e7e4      	b.n	800550e <_vfiprintf_r+0x1e6>
 8005544:	08005cbe 	.word	0x08005cbe
 8005548:	08005cc8 	.word	0x08005cc8
 800554c:	08003285 	.word	0x08003285
 8005550:	08005303 	.word	0x08005303
 8005554:	08005cc4 	.word	0x08005cc4

08005558 <__sflush_r>:
 8005558:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800555c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005560:	0716      	lsls	r6, r2, #28
 8005562:	4605      	mov	r5, r0
 8005564:	460c      	mov	r4, r1
 8005566:	d454      	bmi.n	8005612 <__sflush_r+0xba>
 8005568:	684b      	ldr	r3, [r1, #4]
 800556a:	2b00      	cmp	r3, #0
 800556c:	dc02      	bgt.n	8005574 <__sflush_r+0x1c>
 800556e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8005570:	2b00      	cmp	r3, #0
 8005572:	dd48      	ble.n	8005606 <__sflush_r+0xae>
 8005574:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005576:	2e00      	cmp	r6, #0
 8005578:	d045      	beq.n	8005606 <__sflush_r+0xae>
 800557a:	2300      	movs	r3, #0
 800557c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8005580:	682f      	ldr	r7, [r5, #0]
 8005582:	6a21      	ldr	r1, [r4, #32]
 8005584:	602b      	str	r3, [r5, #0]
 8005586:	d030      	beq.n	80055ea <__sflush_r+0x92>
 8005588:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800558a:	89a3      	ldrh	r3, [r4, #12]
 800558c:	0759      	lsls	r1, r3, #29
 800558e:	d505      	bpl.n	800559c <__sflush_r+0x44>
 8005590:	6863      	ldr	r3, [r4, #4]
 8005592:	1ad2      	subs	r2, r2, r3
 8005594:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8005596:	b10b      	cbz	r3, 800559c <__sflush_r+0x44>
 8005598:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800559a:	1ad2      	subs	r2, r2, r3
 800559c:	2300      	movs	r3, #0
 800559e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80055a0:	6a21      	ldr	r1, [r4, #32]
 80055a2:	4628      	mov	r0, r5
 80055a4:	47b0      	blx	r6
 80055a6:	1c43      	adds	r3, r0, #1
 80055a8:	89a3      	ldrh	r3, [r4, #12]
 80055aa:	d106      	bne.n	80055ba <__sflush_r+0x62>
 80055ac:	6829      	ldr	r1, [r5, #0]
 80055ae:	291d      	cmp	r1, #29
 80055b0:	d82b      	bhi.n	800560a <__sflush_r+0xb2>
 80055b2:	4a2a      	ldr	r2, [pc, #168]	@ (800565c <__sflush_r+0x104>)
 80055b4:	40ca      	lsrs	r2, r1
 80055b6:	07d6      	lsls	r6, r2, #31
 80055b8:	d527      	bpl.n	800560a <__sflush_r+0xb2>
 80055ba:	2200      	movs	r2, #0
 80055bc:	6062      	str	r2, [r4, #4]
 80055be:	04d9      	lsls	r1, r3, #19
 80055c0:	6922      	ldr	r2, [r4, #16]
 80055c2:	6022      	str	r2, [r4, #0]
 80055c4:	d504      	bpl.n	80055d0 <__sflush_r+0x78>
 80055c6:	1c42      	adds	r2, r0, #1
 80055c8:	d101      	bne.n	80055ce <__sflush_r+0x76>
 80055ca:	682b      	ldr	r3, [r5, #0]
 80055cc:	b903      	cbnz	r3, 80055d0 <__sflush_r+0x78>
 80055ce:	6560      	str	r0, [r4, #84]	@ 0x54
 80055d0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80055d2:	602f      	str	r7, [r5, #0]
 80055d4:	b1b9      	cbz	r1, 8005606 <__sflush_r+0xae>
 80055d6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80055da:	4299      	cmp	r1, r3
 80055dc:	d002      	beq.n	80055e4 <__sflush_r+0x8c>
 80055de:	4628      	mov	r0, r5
 80055e0:	f7ff f9fe 	bl	80049e0 <_free_r>
 80055e4:	2300      	movs	r3, #0
 80055e6:	6363      	str	r3, [r4, #52]	@ 0x34
 80055e8:	e00d      	b.n	8005606 <__sflush_r+0xae>
 80055ea:	2301      	movs	r3, #1
 80055ec:	4628      	mov	r0, r5
 80055ee:	47b0      	blx	r6
 80055f0:	4602      	mov	r2, r0
 80055f2:	1c50      	adds	r0, r2, #1
 80055f4:	d1c9      	bne.n	800558a <__sflush_r+0x32>
 80055f6:	682b      	ldr	r3, [r5, #0]
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d0c6      	beq.n	800558a <__sflush_r+0x32>
 80055fc:	2b1d      	cmp	r3, #29
 80055fe:	d001      	beq.n	8005604 <__sflush_r+0xac>
 8005600:	2b16      	cmp	r3, #22
 8005602:	d11e      	bne.n	8005642 <__sflush_r+0xea>
 8005604:	602f      	str	r7, [r5, #0]
 8005606:	2000      	movs	r0, #0
 8005608:	e022      	b.n	8005650 <__sflush_r+0xf8>
 800560a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800560e:	b21b      	sxth	r3, r3
 8005610:	e01b      	b.n	800564a <__sflush_r+0xf2>
 8005612:	690f      	ldr	r7, [r1, #16]
 8005614:	2f00      	cmp	r7, #0
 8005616:	d0f6      	beq.n	8005606 <__sflush_r+0xae>
 8005618:	0793      	lsls	r3, r2, #30
 800561a:	680e      	ldr	r6, [r1, #0]
 800561c:	bf08      	it	eq
 800561e:	694b      	ldreq	r3, [r1, #20]
 8005620:	600f      	str	r7, [r1, #0]
 8005622:	bf18      	it	ne
 8005624:	2300      	movne	r3, #0
 8005626:	eba6 0807 	sub.w	r8, r6, r7
 800562a:	608b      	str	r3, [r1, #8]
 800562c:	f1b8 0f00 	cmp.w	r8, #0
 8005630:	dde9      	ble.n	8005606 <__sflush_r+0xae>
 8005632:	6a21      	ldr	r1, [r4, #32]
 8005634:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8005636:	4643      	mov	r3, r8
 8005638:	463a      	mov	r2, r7
 800563a:	4628      	mov	r0, r5
 800563c:	47b0      	blx	r6
 800563e:	2800      	cmp	r0, #0
 8005640:	dc08      	bgt.n	8005654 <__sflush_r+0xfc>
 8005642:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005646:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800564a:	81a3      	strh	r3, [r4, #12]
 800564c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005650:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005654:	4407      	add	r7, r0
 8005656:	eba8 0800 	sub.w	r8, r8, r0
 800565a:	e7e7      	b.n	800562c <__sflush_r+0xd4>
 800565c:	20400001 	.word	0x20400001

08005660 <_fflush_r>:
 8005660:	b538      	push	{r3, r4, r5, lr}
 8005662:	690b      	ldr	r3, [r1, #16]
 8005664:	4605      	mov	r5, r0
 8005666:	460c      	mov	r4, r1
 8005668:	b913      	cbnz	r3, 8005670 <_fflush_r+0x10>
 800566a:	2500      	movs	r5, #0
 800566c:	4628      	mov	r0, r5
 800566e:	bd38      	pop	{r3, r4, r5, pc}
 8005670:	b118      	cbz	r0, 800567a <_fflush_r+0x1a>
 8005672:	6a03      	ldr	r3, [r0, #32]
 8005674:	b90b      	cbnz	r3, 800567a <_fflush_r+0x1a>
 8005676:	f7fe fa47 	bl	8003b08 <__sinit>
 800567a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800567e:	2b00      	cmp	r3, #0
 8005680:	d0f3      	beq.n	800566a <_fflush_r+0xa>
 8005682:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8005684:	07d0      	lsls	r0, r2, #31
 8005686:	d404      	bmi.n	8005692 <_fflush_r+0x32>
 8005688:	0599      	lsls	r1, r3, #22
 800568a:	d402      	bmi.n	8005692 <_fflush_r+0x32>
 800568c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800568e:	f7fe fb4c 	bl	8003d2a <__retarget_lock_acquire_recursive>
 8005692:	4628      	mov	r0, r5
 8005694:	4621      	mov	r1, r4
 8005696:	f7ff ff5f 	bl	8005558 <__sflush_r>
 800569a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800569c:	07da      	lsls	r2, r3, #31
 800569e:	4605      	mov	r5, r0
 80056a0:	d4e4      	bmi.n	800566c <_fflush_r+0xc>
 80056a2:	89a3      	ldrh	r3, [r4, #12]
 80056a4:	059b      	lsls	r3, r3, #22
 80056a6:	d4e1      	bmi.n	800566c <_fflush_r+0xc>
 80056a8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80056aa:	f7fe fb3f 	bl	8003d2c <__retarget_lock_release_recursive>
 80056ae:	e7dd      	b.n	800566c <_fflush_r+0xc>

080056b0 <_putc_r>:
 80056b0:	b570      	push	{r4, r5, r6, lr}
 80056b2:	460d      	mov	r5, r1
 80056b4:	4614      	mov	r4, r2
 80056b6:	4606      	mov	r6, r0
 80056b8:	b118      	cbz	r0, 80056c2 <_putc_r+0x12>
 80056ba:	6a03      	ldr	r3, [r0, #32]
 80056bc:	b90b      	cbnz	r3, 80056c2 <_putc_r+0x12>
 80056be:	f7fe fa23 	bl	8003b08 <__sinit>
 80056c2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80056c4:	07d8      	lsls	r0, r3, #31
 80056c6:	d405      	bmi.n	80056d4 <_putc_r+0x24>
 80056c8:	89a3      	ldrh	r3, [r4, #12]
 80056ca:	0599      	lsls	r1, r3, #22
 80056cc:	d402      	bmi.n	80056d4 <_putc_r+0x24>
 80056ce:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80056d0:	f7fe fb2b 	bl	8003d2a <__retarget_lock_acquire_recursive>
 80056d4:	68a3      	ldr	r3, [r4, #8]
 80056d6:	3b01      	subs	r3, #1
 80056d8:	2b00      	cmp	r3, #0
 80056da:	60a3      	str	r3, [r4, #8]
 80056dc:	da05      	bge.n	80056ea <_putc_r+0x3a>
 80056de:	69a2      	ldr	r2, [r4, #24]
 80056e0:	4293      	cmp	r3, r2
 80056e2:	db12      	blt.n	800570a <_putc_r+0x5a>
 80056e4:	b2eb      	uxtb	r3, r5
 80056e6:	2b0a      	cmp	r3, #10
 80056e8:	d00f      	beq.n	800570a <_putc_r+0x5a>
 80056ea:	6823      	ldr	r3, [r4, #0]
 80056ec:	1c5a      	adds	r2, r3, #1
 80056ee:	6022      	str	r2, [r4, #0]
 80056f0:	701d      	strb	r5, [r3, #0]
 80056f2:	b2ed      	uxtb	r5, r5
 80056f4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80056f6:	07da      	lsls	r2, r3, #31
 80056f8:	d405      	bmi.n	8005706 <_putc_r+0x56>
 80056fa:	89a3      	ldrh	r3, [r4, #12]
 80056fc:	059b      	lsls	r3, r3, #22
 80056fe:	d402      	bmi.n	8005706 <_putc_r+0x56>
 8005700:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005702:	f7fe fb13 	bl	8003d2c <__retarget_lock_release_recursive>
 8005706:	4628      	mov	r0, r5
 8005708:	bd70      	pop	{r4, r5, r6, pc}
 800570a:	4629      	mov	r1, r5
 800570c:	4622      	mov	r2, r4
 800570e:	4630      	mov	r0, r6
 8005710:	f000 f802 	bl	8005718 <__swbuf_r>
 8005714:	4605      	mov	r5, r0
 8005716:	e7ed      	b.n	80056f4 <_putc_r+0x44>

08005718 <__swbuf_r>:
 8005718:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800571a:	460e      	mov	r6, r1
 800571c:	4614      	mov	r4, r2
 800571e:	4605      	mov	r5, r0
 8005720:	b118      	cbz	r0, 800572a <__swbuf_r+0x12>
 8005722:	6a03      	ldr	r3, [r0, #32]
 8005724:	b90b      	cbnz	r3, 800572a <__swbuf_r+0x12>
 8005726:	f7fe f9ef 	bl	8003b08 <__sinit>
 800572a:	69a3      	ldr	r3, [r4, #24]
 800572c:	60a3      	str	r3, [r4, #8]
 800572e:	89a3      	ldrh	r3, [r4, #12]
 8005730:	071a      	lsls	r2, r3, #28
 8005732:	d501      	bpl.n	8005738 <__swbuf_r+0x20>
 8005734:	6923      	ldr	r3, [r4, #16]
 8005736:	b943      	cbnz	r3, 800574a <__swbuf_r+0x32>
 8005738:	4621      	mov	r1, r4
 800573a:	4628      	mov	r0, r5
 800573c:	f000 f82a 	bl	8005794 <__swsetup_r>
 8005740:	b118      	cbz	r0, 800574a <__swbuf_r+0x32>
 8005742:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8005746:	4638      	mov	r0, r7
 8005748:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800574a:	6823      	ldr	r3, [r4, #0]
 800574c:	6922      	ldr	r2, [r4, #16]
 800574e:	1a98      	subs	r0, r3, r2
 8005750:	6963      	ldr	r3, [r4, #20]
 8005752:	b2f6      	uxtb	r6, r6
 8005754:	4283      	cmp	r3, r0
 8005756:	4637      	mov	r7, r6
 8005758:	dc05      	bgt.n	8005766 <__swbuf_r+0x4e>
 800575a:	4621      	mov	r1, r4
 800575c:	4628      	mov	r0, r5
 800575e:	f7ff ff7f 	bl	8005660 <_fflush_r>
 8005762:	2800      	cmp	r0, #0
 8005764:	d1ed      	bne.n	8005742 <__swbuf_r+0x2a>
 8005766:	68a3      	ldr	r3, [r4, #8]
 8005768:	3b01      	subs	r3, #1
 800576a:	60a3      	str	r3, [r4, #8]
 800576c:	6823      	ldr	r3, [r4, #0]
 800576e:	1c5a      	adds	r2, r3, #1
 8005770:	6022      	str	r2, [r4, #0]
 8005772:	701e      	strb	r6, [r3, #0]
 8005774:	6962      	ldr	r2, [r4, #20]
 8005776:	1c43      	adds	r3, r0, #1
 8005778:	429a      	cmp	r2, r3
 800577a:	d004      	beq.n	8005786 <__swbuf_r+0x6e>
 800577c:	89a3      	ldrh	r3, [r4, #12]
 800577e:	07db      	lsls	r3, r3, #31
 8005780:	d5e1      	bpl.n	8005746 <__swbuf_r+0x2e>
 8005782:	2e0a      	cmp	r6, #10
 8005784:	d1df      	bne.n	8005746 <__swbuf_r+0x2e>
 8005786:	4621      	mov	r1, r4
 8005788:	4628      	mov	r0, r5
 800578a:	f7ff ff69 	bl	8005660 <_fflush_r>
 800578e:	2800      	cmp	r0, #0
 8005790:	d0d9      	beq.n	8005746 <__swbuf_r+0x2e>
 8005792:	e7d6      	b.n	8005742 <__swbuf_r+0x2a>

08005794 <__swsetup_r>:
 8005794:	b538      	push	{r3, r4, r5, lr}
 8005796:	4b29      	ldr	r3, [pc, #164]	@ (800583c <__swsetup_r+0xa8>)
 8005798:	4605      	mov	r5, r0
 800579a:	6818      	ldr	r0, [r3, #0]
 800579c:	460c      	mov	r4, r1
 800579e:	b118      	cbz	r0, 80057a8 <__swsetup_r+0x14>
 80057a0:	6a03      	ldr	r3, [r0, #32]
 80057a2:	b90b      	cbnz	r3, 80057a8 <__swsetup_r+0x14>
 80057a4:	f7fe f9b0 	bl	8003b08 <__sinit>
 80057a8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80057ac:	0719      	lsls	r1, r3, #28
 80057ae:	d422      	bmi.n	80057f6 <__swsetup_r+0x62>
 80057b0:	06da      	lsls	r2, r3, #27
 80057b2:	d407      	bmi.n	80057c4 <__swsetup_r+0x30>
 80057b4:	2209      	movs	r2, #9
 80057b6:	602a      	str	r2, [r5, #0]
 80057b8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80057bc:	81a3      	strh	r3, [r4, #12]
 80057be:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80057c2:	e033      	b.n	800582c <__swsetup_r+0x98>
 80057c4:	0758      	lsls	r0, r3, #29
 80057c6:	d512      	bpl.n	80057ee <__swsetup_r+0x5a>
 80057c8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80057ca:	b141      	cbz	r1, 80057de <__swsetup_r+0x4a>
 80057cc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80057d0:	4299      	cmp	r1, r3
 80057d2:	d002      	beq.n	80057da <__swsetup_r+0x46>
 80057d4:	4628      	mov	r0, r5
 80057d6:	f7ff f903 	bl	80049e0 <_free_r>
 80057da:	2300      	movs	r3, #0
 80057dc:	6363      	str	r3, [r4, #52]	@ 0x34
 80057de:	89a3      	ldrh	r3, [r4, #12]
 80057e0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80057e4:	81a3      	strh	r3, [r4, #12]
 80057e6:	2300      	movs	r3, #0
 80057e8:	6063      	str	r3, [r4, #4]
 80057ea:	6923      	ldr	r3, [r4, #16]
 80057ec:	6023      	str	r3, [r4, #0]
 80057ee:	89a3      	ldrh	r3, [r4, #12]
 80057f0:	f043 0308 	orr.w	r3, r3, #8
 80057f4:	81a3      	strh	r3, [r4, #12]
 80057f6:	6923      	ldr	r3, [r4, #16]
 80057f8:	b94b      	cbnz	r3, 800580e <__swsetup_r+0x7a>
 80057fa:	89a3      	ldrh	r3, [r4, #12]
 80057fc:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8005800:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005804:	d003      	beq.n	800580e <__swsetup_r+0x7a>
 8005806:	4621      	mov	r1, r4
 8005808:	4628      	mov	r0, r5
 800580a:	f000 f8c1 	bl	8005990 <__smakebuf_r>
 800580e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005812:	f013 0201 	ands.w	r2, r3, #1
 8005816:	d00a      	beq.n	800582e <__swsetup_r+0x9a>
 8005818:	2200      	movs	r2, #0
 800581a:	60a2      	str	r2, [r4, #8]
 800581c:	6962      	ldr	r2, [r4, #20]
 800581e:	4252      	negs	r2, r2
 8005820:	61a2      	str	r2, [r4, #24]
 8005822:	6922      	ldr	r2, [r4, #16]
 8005824:	b942      	cbnz	r2, 8005838 <__swsetup_r+0xa4>
 8005826:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800582a:	d1c5      	bne.n	80057b8 <__swsetup_r+0x24>
 800582c:	bd38      	pop	{r3, r4, r5, pc}
 800582e:	0799      	lsls	r1, r3, #30
 8005830:	bf58      	it	pl
 8005832:	6962      	ldrpl	r2, [r4, #20]
 8005834:	60a2      	str	r2, [r4, #8]
 8005836:	e7f4      	b.n	8005822 <__swsetup_r+0x8e>
 8005838:	2000      	movs	r0, #0
 800583a:	e7f7      	b.n	800582c <__swsetup_r+0x98>
 800583c:	20000108 	.word	0x20000108

08005840 <_sbrk_r>:
 8005840:	b538      	push	{r3, r4, r5, lr}
 8005842:	4d06      	ldr	r5, [pc, #24]	@ (800585c <_sbrk_r+0x1c>)
 8005844:	2300      	movs	r3, #0
 8005846:	4604      	mov	r4, r0
 8005848:	4608      	mov	r0, r1
 800584a:	602b      	str	r3, [r5, #0]
 800584c:	f7fb feb4 	bl	80015b8 <_sbrk>
 8005850:	1c43      	adds	r3, r0, #1
 8005852:	d102      	bne.n	800585a <_sbrk_r+0x1a>
 8005854:	682b      	ldr	r3, [r5, #0]
 8005856:	b103      	cbz	r3, 800585a <_sbrk_r+0x1a>
 8005858:	6023      	str	r3, [r4, #0]
 800585a:	bd38      	pop	{r3, r4, r5, pc}
 800585c:	20000508 	.word	0x20000508

08005860 <memcpy>:
 8005860:	440a      	add	r2, r1
 8005862:	4291      	cmp	r1, r2
 8005864:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8005868:	d100      	bne.n	800586c <memcpy+0xc>
 800586a:	4770      	bx	lr
 800586c:	b510      	push	{r4, lr}
 800586e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005872:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005876:	4291      	cmp	r1, r2
 8005878:	d1f9      	bne.n	800586e <memcpy+0xe>
 800587a:	bd10      	pop	{r4, pc}

0800587c <__assert_func>:
 800587c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800587e:	4614      	mov	r4, r2
 8005880:	461a      	mov	r2, r3
 8005882:	4b09      	ldr	r3, [pc, #36]	@ (80058a8 <__assert_func+0x2c>)
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	4605      	mov	r5, r0
 8005888:	68d8      	ldr	r0, [r3, #12]
 800588a:	b14c      	cbz	r4, 80058a0 <__assert_func+0x24>
 800588c:	4b07      	ldr	r3, [pc, #28]	@ (80058ac <__assert_func+0x30>)
 800588e:	9100      	str	r1, [sp, #0]
 8005890:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8005894:	4906      	ldr	r1, [pc, #24]	@ (80058b0 <__assert_func+0x34>)
 8005896:	462b      	mov	r3, r5
 8005898:	f000 f842 	bl	8005920 <fiprintf>
 800589c:	f000 f8d6 	bl	8005a4c <abort>
 80058a0:	4b04      	ldr	r3, [pc, #16]	@ (80058b4 <__assert_func+0x38>)
 80058a2:	461c      	mov	r4, r3
 80058a4:	e7f3      	b.n	800588e <__assert_func+0x12>
 80058a6:	bf00      	nop
 80058a8:	20000108 	.word	0x20000108
 80058ac:	08005cd9 	.word	0x08005cd9
 80058b0:	08005ce6 	.word	0x08005ce6
 80058b4:	08005d14 	.word	0x08005d14

080058b8 <_calloc_r>:
 80058b8:	b570      	push	{r4, r5, r6, lr}
 80058ba:	fba1 5402 	umull	r5, r4, r1, r2
 80058be:	b934      	cbnz	r4, 80058ce <_calloc_r+0x16>
 80058c0:	4629      	mov	r1, r5
 80058c2:	f7ff f901 	bl	8004ac8 <_malloc_r>
 80058c6:	4606      	mov	r6, r0
 80058c8:	b928      	cbnz	r0, 80058d6 <_calloc_r+0x1e>
 80058ca:	4630      	mov	r0, r6
 80058cc:	bd70      	pop	{r4, r5, r6, pc}
 80058ce:	220c      	movs	r2, #12
 80058d0:	6002      	str	r2, [r0, #0]
 80058d2:	2600      	movs	r6, #0
 80058d4:	e7f9      	b.n	80058ca <_calloc_r+0x12>
 80058d6:	462a      	mov	r2, r5
 80058d8:	4621      	mov	r1, r4
 80058da:	f7fe f9a8 	bl	8003c2e <memset>
 80058de:	e7f4      	b.n	80058ca <_calloc_r+0x12>

080058e0 <__ascii_mbtowc>:
 80058e0:	b082      	sub	sp, #8
 80058e2:	b901      	cbnz	r1, 80058e6 <__ascii_mbtowc+0x6>
 80058e4:	a901      	add	r1, sp, #4
 80058e6:	b142      	cbz	r2, 80058fa <__ascii_mbtowc+0x1a>
 80058e8:	b14b      	cbz	r3, 80058fe <__ascii_mbtowc+0x1e>
 80058ea:	7813      	ldrb	r3, [r2, #0]
 80058ec:	600b      	str	r3, [r1, #0]
 80058ee:	7812      	ldrb	r2, [r2, #0]
 80058f0:	1e10      	subs	r0, r2, #0
 80058f2:	bf18      	it	ne
 80058f4:	2001      	movne	r0, #1
 80058f6:	b002      	add	sp, #8
 80058f8:	4770      	bx	lr
 80058fa:	4610      	mov	r0, r2
 80058fc:	e7fb      	b.n	80058f6 <__ascii_mbtowc+0x16>
 80058fe:	f06f 0001 	mvn.w	r0, #1
 8005902:	e7f8      	b.n	80058f6 <__ascii_mbtowc+0x16>

08005904 <__ascii_wctomb>:
 8005904:	4603      	mov	r3, r0
 8005906:	4608      	mov	r0, r1
 8005908:	b141      	cbz	r1, 800591c <__ascii_wctomb+0x18>
 800590a:	2aff      	cmp	r2, #255	@ 0xff
 800590c:	d904      	bls.n	8005918 <__ascii_wctomb+0x14>
 800590e:	228a      	movs	r2, #138	@ 0x8a
 8005910:	601a      	str	r2, [r3, #0]
 8005912:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005916:	4770      	bx	lr
 8005918:	700a      	strb	r2, [r1, #0]
 800591a:	2001      	movs	r0, #1
 800591c:	4770      	bx	lr
	...

08005920 <fiprintf>:
 8005920:	b40e      	push	{r1, r2, r3}
 8005922:	b503      	push	{r0, r1, lr}
 8005924:	4601      	mov	r1, r0
 8005926:	ab03      	add	r3, sp, #12
 8005928:	4805      	ldr	r0, [pc, #20]	@ (8005940 <fiprintf+0x20>)
 800592a:	f853 2b04 	ldr.w	r2, [r3], #4
 800592e:	6800      	ldr	r0, [r0, #0]
 8005930:	9301      	str	r3, [sp, #4]
 8005932:	f7ff fcf9 	bl	8005328 <_vfiprintf_r>
 8005936:	b002      	add	sp, #8
 8005938:	f85d eb04 	ldr.w	lr, [sp], #4
 800593c:	b003      	add	sp, #12
 800593e:	4770      	bx	lr
 8005940:	20000108 	.word	0x20000108

08005944 <__swhatbuf_r>:
 8005944:	b570      	push	{r4, r5, r6, lr}
 8005946:	460c      	mov	r4, r1
 8005948:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800594c:	2900      	cmp	r1, #0
 800594e:	b096      	sub	sp, #88	@ 0x58
 8005950:	4615      	mov	r5, r2
 8005952:	461e      	mov	r6, r3
 8005954:	da0d      	bge.n	8005972 <__swhatbuf_r+0x2e>
 8005956:	89a3      	ldrh	r3, [r4, #12]
 8005958:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800595c:	f04f 0100 	mov.w	r1, #0
 8005960:	bf14      	ite	ne
 8005962:	2340      	movne	r3, #64	@ 0x40
 8005964:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8005968:	2000      	movs	r0, #0
 800596a:	6031      	str	r1, [r6, #0]
 800596c:	602b      	str	r3, [r5, #0]
 800596e:	b016      	add	sp, #88	@ 0x58
 8005970:	bd70      	pop	{r4, r5, r6, pc}
 8005972:	466a      	mov	r2, sp
 8005974:	f000 f848 	bl	8005a08 <_fstat_r>
 8005978:	2800      	cmp	r0, #0
 800597a:	dbec      	blt.n	8005956 <__swhatbuf_r+0x12>
 800597c:	9901      	ldr	r1, [sp, #4]
 800597e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8005982:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8005986:	4259      	negs	r1, r3
 8005988:	4159      	adcs	r1, r3
 800598a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800598e:	e7eb      	b.n	8005968 <__swhatbuf_r+0x24>

08005990 <__smakebuf_r>:
 8005990:	898b      	ldrh	r3, [r1, #12]
 8005992:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005994:	079d      	lsls	r5, r3, #30
 8005996:	4606      	mov	r6, r0
 8005998:	460c      	mov	r4, r1
 800599a:	d507      	bpl.n	80059ac <__smakebuf_r+0x1c>
 800599c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80059a0:	6023      	str	r3, [r4, #0]
 80059a2:	6123      	str	r3, [r4, #16]
 80059a4:	2301      	movs	r3, #1
 80059a6:	6163      	str	r3, [r4, #20]
 80059a8:	b003      	add	sp, #12
 80059aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80059ac:	ab01      	add	r3, sp, #4
 80059ae:	466a      	mov	r2, sp
 80059b0:	f7ff ffc8 	bl	8005944 <__swhatbuf_r>
 80059b4:	9f00      	ldr	r7, [sp, #0]
 80059b6:	4605      	mov	r5, r0
 80059b8:	4639      	mov	r1, r7
 80059ba:	4630      	mov	r0, r6
 80059bc:	f7ff f884 	bl	8004ac8 <_malloc_r>
 80059c0:	b948      	cbnz	r0, 80059d6 <__smakebuf_r+0x46>
 80059c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80059c6:	059a      	lsls	r2, r3, #22
 80059c8:	d4ee      	bmi.n	80059a8 <__smakebuf_r+0x18>
 80059ca:	f023 0303 	bic.w	r3, r3, #3
 80059ce:	f043 0302 	orr.w	r3, r3, #2
 80059d2:	81a3      	strh	r3, [r4, #12]
 80059d4:	e7e2      	b.n	800599c <__smakebuf_r+0xc>
 80059d6:	89a3      	ldrh	r3, [r4, #12]
 80059d8:	6020      	str	r0, [r4, #0]
 80059da:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80059de:	81a3      	strh	r3, [r4, #12]
 80059e0:	9b01      	ldr	r3, [sp, #4]
 80059e2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80059e6:	b15b      	cbz	r3, 8005a00 <__smakebuf_r+0x70>
 80059e8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80059ec:	4630      	mov	r0, r6
 80059ee:	f000 f81d 	bl	8005a2c <_isatty_r>
 80059f2:	b128      	cbz	r0, 8005a00 <__smakebuf_r+0x70>
 80059f4:	89a3      	ldrh	r3, [r4, #12]
 80059f6:	f023 0303 	bic.w	r3, r3, #3
 80059fa:	f043 0301 	orr.w	r3, r3, #1
 80059fe:	81a3      	strh	r3, [r4, #12]
 8005a00:	89a3      	ldrh	r3, [r4, #12]
 8005a02:	431d      	orrs	r5, r3
 8005a04:	81a5      	strh	r5, [r4, #12]
 8005a06:	e7cf      	b.n	80059a8 <__smakebuf_r+0x18>

08005a08 <_fstat_r>:
 8005a08:	b538      	push	{r3, r4, r5, lr}
 8005a0a:	4d07      	ldr	r5, [pc, #28]	@ (8005a28 <_fstat_r+0x20>)
 8005a0c:	2300      	movs	r3, #0
 8005a0e:	4604      	mov	r4, r0
 8005a10:	4608      	mov	r0, r1
 8005a12:	4611      	mov	r1, r2
 8005a14:	602b      	str	r3, [r5, #0]
 8005a16:	f7fb fdc6 	bl	80015a6 <_fstat>
 8005a1a:	1c43      	adds	r3, r0, #1
 8005a1c:	d102      	bne.n	8005a24 <_fstat_r+0x1c>
 8005a1e:	682b      	ldr	r3, [r5, #0]
 8005a20:	b103      	cbz	r3, 8005a24 <_fstat_r+0x1c>
 8005a22:	6023      	str	r3, [r4, #0]
 8005a24:	bd38      	pop	{r3, r4, r5, pc}
 8005a26:	bf00      	nop
 8005a28:	20000508 	.word	0x20000508

08005a2c <_isatty_r>:
 8005a2c:	b538      	push	{r3, r4, r5, lr}
 8005a2e:	4d06      	ldr	r5, [pc, #24]	@ (8005a48 <_isatty_r+0x1c>)
 8005a30:	2300      	movs	r3, #0
 8005a32:	4604      	mov	r4, r0
 8005a34:	4608      	mov	r0, r1
 8005a36:	602b      	str	r3, [r5, #0]
 8005a38:	f7fb fdba 	bl	80015b0 <_isatty>
 8005a3c:	1c43      	adds	r3, r0, #1
 8005a3e:	d102      	bne.n	8005a46 <_isatty_r+0x1a>
 8005a40:	682b      	ldr	r3, [r5, #0]
 8005a42:	b103      	cbz	r3, 8005a46 <_isatty_r+0x1a>
 8005a44:	6023      	str	r3, [r4, #0]
 8005a46:	bd38      	pop	{r3, r4, r5, pc}
 8005a48:	20000508 	.word	0x20000508

08005a4c <abort>:
 8005a4c:	b508      	push	{r3, lr}
 8005a4e:	2006      	movs	r0, #6
 8005a50:	f000 f82c 	bl	8005aac <raise>
 8005a54:	2001      	movs	r0, #1
 8005a56:	f7fb fd8d 	bl	8001574 <_exit>

08005a5a <_raise_r>:
 8005a5a:	291f      	cmp	r1, #31
 8005a5c:	b538      	push	{r3, r4, r5, lr}
 8005a5e:	4605      	mov	r5, r0
 8005a60:	460c      	mov	r4, r1
 8005a62:	d904      	bls.n	8005a6e <_raise_r+0x14>
 8005a64:	2316      	movs	r3, #22
 8005a66:	6003      	str	r3, [r0, #0]
 8005a68:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005a6c:	bd38      	pop	{r3, r4, r5, pc}
 8005a6e:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8005a70:	b112      	cbz	r2, 8005a78 <_raise_r+0x1e>
 8005a72:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8005a76:	b94b      	cbnz	r3, 8005a8c <_raise_r+0x32>
 8005a78:	4628      	mov	r0, r5
 8005a7a:	f000 f831 	bl	8005ae0 <_getpid_r>
 8005a7e:	4622      	mov	r2, r4
 8005a80:	4601      	mov	r1, r0
 8005a82:	4628      	mov	r0, r5
 8005a84:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005a88:	f000 b818 	b.w	8005abc <_kill_r>
 8005a8c:	2b01      	cmp	r3, #1
 8005a8e:	d00a      	beq.n	8005aa6 <_raise_r+0x4c>
 8005a90:	1c59      	adds	r1, r3, #1
 8005a92:	d103      	bne.n	8005a9c <_raise_r+0x42>
 8005a94:	2316      	movs	r3, #22
 8005a96:	6003      	str	r3, [r0, #0]
 8005a98:	2001      	movs	r0, #1
 8005a9a:	e7e7      	b.n	8005a6c <_raise_r+0x12>
 8005a9c:	2100      	movs	r1, #0
 8005a9e:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8005aa2:	4620      	mov	r0, r4
 8005aa4:	4798      	blx	r3
 8005aa6:	2000      	movs	r0, #0
 8005aa8:	e7e0      	b.n	8005a6c <_raise_r+0x12>
	...

08005aac <raise>:
 8005aac:	4b02      	ldr	r3, [pc, #8]	@ (8005ab8 <raise+0xc>)
 8005aae:	4601      	mov	r1, r0
 8005ab0:	6818      	ldr	r0, [r3, #0]
 8005ab2:	f7ff bfd2 	b.w	8005a5a <_raise_r>
 8005ab6:	bf00      	nop
 8005ab8:	20000108 	.word	0x20000108

08005abc <_kill_r>:
 8005abc:	b538      	push	{r3, r4, r5, lr}
 8005abe:	4d07      	ldr	r5, [pc, #28]	@ (8005adc <_kill_r+0x20>)
 8005ac0:	2300      	movs	r3, #0
 8005ac2:	4604      	mov	r4, r0
 8005ac4:	4608      	mov	r0, r1
 8005ac6:	4611      	mov	r1, r2
 8005ac8:	602b      	str	r3, [r5, #0]
 8005aca:	f7fb fd4b 	bl	8001564 <_kill>
 8005ace:	1c43      	adds	r3, r0, #1
 8005ad0:	d102      	bne.n	8005ad8 <_kill_r+0x1c>
 8005ad2:	682b      	ldr	r3, [r5, #0]
 8005ad4:	b103      	cbz	r3, 8005ad8 <_kill_r+0x1c>
 8005ad6:	6023      	str	r3, [r4, #0]
 8005ad8:	bd38      	pop	{r3, r4, r5, pc}
 8005ada:	bf00      	nop
 8005adc:	20000508 	.word	0x20000508

08005ae0 <_getpid_r>:
 8005ae0:	f7fb bd3e 	b.w	8001560 <_getpid>

08005ae4 <_init>:
 8005ae4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ae6:	bf00      	nop
 8005ae8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005aea:	bc08      	pop	{r3}
 8005aec:	469e      	mov	lr, r3
 8005aee:	4770      	bx	lr

08005af0 <_fini>:
 8005af0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005af2:	bf00      	nop
 8005af4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005af6:	bc08      	pop	{r3}
 8005af8:	469e      	mov	lr, r3
 8005afa:	4770      	bx	lr
