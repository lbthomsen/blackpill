
pwm_ic.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000058ac  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000041c  08005a50  08005a50  00006a50  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005e6c  08005e6c  000072dc  2**0
                  CONTENTS
  4 .ARM          00000008  08005e6c  08005e6c  00006e6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005e74  08005e74  000072dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005e74  08005e74  00006e74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005e78  08005e78  00006e78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002dc  20000000  08005e7c  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000254  200002e0  08006158  000072e0  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000534  08006158  00007534  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000072dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011f0d  00000000  00000000  0000730c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000022d9  00000000  00000000  00019219  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loclists 0000a9e3  00000000  00000000  0001b4f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000b40  00000000  00000000  00025ed8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000f1d  00000000  00000000  00026a18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001708b  00000000  00000000  00027935  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00012cd9  00000000  00000000  0003e9c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008fe53  00000000  00000000  00051699  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000e14ec  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002ff8  00000000  00000000  000e1530  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000004d  00000000  00000000  000e4528  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200002e0 	.word	0x200002e0
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08005a34 	.word	0x08005a34

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200002e4 	.word	0x200002e4
 80001dc:	08005a34 	.word	0x08005a34

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_uldivmod>:
 8000bb8:	b953      	cbnz	r3, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bba:	b94a      	cbnz	r2, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bbc:	2900      	cmp	r1, #0
 8000bbe:	bf08      	it	eq
 8000bc0:	2800      	cmpeq	r0, #0
 8000bc2:	bf1c      	itt	ne
 8000bc4:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000bc8:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000bcc:	f000 b988 	b.w	8000ee0 <__aeabi_idiv0>
 8000bd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bd8:	f000 f806 	bl	8000be8 <__udivmoddi4>
 8000bdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000be0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000be4:	b004      	add	sp, #16
 8000be6:	4770      	bx	lr

08000be8 <__udivmoddi4>:
 8000be8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bec:	9d08      	ldr	r5, [sp, #32]
 8000bee:	468e      	mov	lr, r1
 8000bf0:	4604      	mov	r4, r0
 8000bf2:	4688      	mov	r8, r1
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d14a      	bne.n	8000c8e <__udivmoddi4+0xa6>
 8000bf8:	428a      	cmp	r2, r1
 8000bfa:	4617      	mov	r7, r2
 8000bfc:	d962      	bls.n	8000cc4 <__udivmoddi4+0xdc>
 8000bfe:	fab2 f682 	clz	r6, r2
 8000c02:	b14e      	cbz	r6, 8000c18 <__udivmoddi4+0x30>
 8000c04:	f1c6 0320 	rsb	r3, r6, #32
 8000c08:	fa01 f806 	lsl.w	r8, r1, r6
 8000c0c:	fa20 f303 	lsr.w	r3, r0, r3
 8000c10:	40b7      	lsls	r7, r6
 8000c12:	ea43 0808 	orr.w	r8, r3, r8
 8000c16:	40b4      	lsls	r4, r6
 8000c18:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c1c:	fa1f fc87 	uxth.w	ip, r7
 8000c20:	fbb8 f1fe 	udiv	r1, r8, lr
 8000c24:	0c23      	lsrs	r3, r4, #16
 8000c26:	fb0e 8811 	mls	r8, lr, r1, r8
 8000c2a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c2e:	fb01 f20c 	mul.w	r2, r1, ip
 8000c32:	429a      	cmp	r2, r3
 8000c34:	d909      	bls.n	8000c4a <__udivmoddi4+0x62>
 8000c36:	18fb      	adds	r3, r7, r3
 8000c38:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000c3c:	f080 80ea 	bcs.w	8000e14 <__udivmoddi4+0x22c>
 8000c40:	429a      	cmp	r2, r3
 8000c42:	f240 80e7 	bls.w	8000e14 <__udivmoddi4+0x22c>
 8000c46:	3902      	subs	r1, #2
 8000c48:	443b      	add	r3, r7
 8000c4a:	1a9a      	subs	r2, r3, r2
 8000c4c:	b2a3      	uxth	r3, r4
 8000c4e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c52:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c56:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000c5a:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c5e:	459c      	cmp	ip, r3
 8000c60:	d909      	bls.n	8000c76 <__udivmoddi4+0x8e>
 8000c62:	18fb      	adds	r3, r7, r3
 8000c64:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000c68:	f080 80d6 	bcs.w	8000e18 <__udivmoddi4+0x230>
 8000c6c:	459c      	cmp	ip, r3
 8000c6e:	f240 80d3 	bls.w	8000e18 <__udivmoddi4+0x230>
 8000c72:	443b      	add	r3, r7
 8000c74:	3802      	subs	r0, #2
 8000c76:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c7a:	eba3 030c 	sub.w	r3, r3, ip
 8000c7e:	2100      	movs	r1, #0
 8000c80:	b11d      	cbz	r5, 8000c8a <__udivmoddi4+0xa2>
 8000c82:	40f3      	lsrs	r3, r6
 8000c84:	2200      	movs	r2, #0
 8000c86:	e9c5 3200 	strd	r3, r2, [r5]
 8000c8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c8e:	428b      	cmp	r3, r1
 8000c90:	d905      	bls.n	8000c9e <__udivmoddi4+0xb6>
 8000c92:	b10d      	cbz	r5, 8000c98 <__udivmoddi4+0xb0>
 8000c94:	e9c5 0100 	strd	r0, r1, [r5]
 8000c98:	2100      	movs	r1, #0
 8000c9a:	4608      	mov	r0, r1
 8000c9c:	e7f5      	b.n	8000c8a <__udivmoddi4+0xa2>
 8000c9e:	fab3 f183 	clz	r1, r3
 8000ca2:	2900      	cmp	r1, #0
 8000ca4:	d146      	bne.n	8000d34 <__udivmoddi4+0x14c>
 8000ca6:	4573      	cmp	r3, lr
 8000ca8:	d302      	bcc.n	8000cb0 <__udivmoddi4+0xc8>
 8000caa:	4282      	cmp	r2, r0
 8000cac:	f200 8105 	bhi.w	8000eba <__udivmoddi4+0x2d2>
 8000cb0:	1a84      	subs	r4, r0, r2
 8000cb2:	eb6e 0203 	sbc.w	r2, lr, r3
 8000cb6:	2001      	movs	r0, #1
 8000cb8:	4690      	mov	r8, r2
 8000cba:	2d00      	cmp	r5, #0
 8000cbc:	d0e5      	beq.n	8000c8a <__udivmoddi4+0xa2>
 8000cbe:	e9c5 4800 	strd	r4, r8, [r5]
 8000cc2:	e7e2      	b.n	8000c8a <__udivmoddi4+0xa2>
 8000cc4:	2a00      	cmp	r2, #0
 8000cc6:	f000 8090 	beq.w	8000dea <__udivmoddi4+0x202>
 8000cca:	fab2 f682 	clz	r6, r2
 8000cce:	2e00      	cmp	r6, #0
 8000cd0:	f040 80a4 	bne.w	8000e1c <__udivmoddi4+0x234>
 8000cd4:	1a8a      	subs	r2, r1, r2
 8000cd6:	0c03      	lsrs	r3, r0, #16
 8000cd8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cdc:	b280      	uxth	r0, r0
 8000cde:	b2bc      	uxth	r4, r7
 8000ce0:	2101      	movs	r1, #1
 8000ce2:	fbb2 fcfe 	udiv	ip, r2, lr
 8000ce6:	fb0e 221c 	mls	r2, lr, ip, r2
 8000cea:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000cee:	fb04 f20c 	mul.w	r2, r4, ip
 8000cf2:	429a      	cmp	r2, r3
 8000cf4:	d907      	bls.n	8000d06 <__udivmoddi4+0x11e>
 8000cf6:	18fb      	adds	r3, r7, r3
 8000cf8:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 8000cfc:	d202      	bcs.n	8000d04 <__udivmoddi4+0x11c>
 8000cfe:	429a      	cmp	r2, r3
 8000d00:	f200 80e0 	bhi.w	8000ec4 <__udivmoddi4+0x2dc>
 8000d04:	46c4      	mov	ip, r8
 8000d06:	1a9b      	subs	r3, r3, r2
 8000d08:	fbb3 f2fe 	udiv	r2, r3, lr
 8000d0c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000d10:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000d14:	fb02 f404 	mul.w	r4, r2, r4
 8000d18:	429c      	cmp	r4, r3
 8000d1a:	d907      	bls.n	8000d2c <__udivmoddi4+0x144>
 8000d1c:	18fb      	adds	r3, r7, r3
 8000d1e:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 8000d22:	d202      	bcs.n	8000d2a <__udivmoddi4+0x142>
 8000d24:	429c      	cmp	r4, r3
 8000d26:	f200 80ca 	bhi.w	8000ebe <__udivmoddi4+0x2d6>
 8000d2a:	4602      	mov	r2, r0
 8000d2c:	1b1b      	subs	r3, r3, r4
 8000d2e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000d32:	e7a5      	b.n	8000c80 <__udivmoddi4+0x98>
 8000d34:	f1c1 0620 	rsb	r6, r1, #32
 8000d38:	408b      	lsls	r3, r1
 8000d3a:	fa22 f706 	lsr.w	r7, r2, r6
 8000d3e:	431f      	orrs	r7, r3
 8000d40:	fa0e f401 	lsl.w	r4, lr, r1
 8000d44:	fa20 f306 	lsr.w	r3, r0, r6
 8000d48:	fa2e fe06 	lsr.w	lr, lr, r6
 8000d4c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000d50:	4323      	orrs	r3, r4
 8000d52:	fa00 f801 	lsl.w	r8, r0, r1
 8000d56:	fa1f fc87 	uxth.w	ip, r7
 8000d5a:	fbbe f0f9 	udiv	r0, lr, r9
 8000d5e:	0c1c      	lsrs	r4, r3, #16
 8000d60:	fb09 ee10 	mls	lr, r9, r0, lr
 8000d64:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000d68:	fb00 fe0c 	mul.w	lr, r0, ip
 8000d6c:	45a6      	cmp	lr, r4
 8000d6e:	fa02 f201 	lsl.w	r2, r2, r1
 8000d72:	d909      	bls.n	8000d88 <__udivmoddi4+0x1a0>
 8000d74:	193c      	adds	r4, r7, r4
 8000d76:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 8000d7a:	f080 809c 	bcs.w	8000eb6 <__udivmoddi4+0x2ce>
 8000d7e:	45a6      	cmp	lr, r4
 8000d80:	f240 8099 	bls.w	8000eb6 <__udivmoddi4+0x2ce>
 8000d84:	3802      	subs	r0, #2
 8000d86:	443c      	add	r4, r7
 8000d88:	eba4 040e 	sub.w	r4, r4, lr
 8000d8c:	fa1f fe83 	uxth.w	lr, r3
 8000d90:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d94:	fb09 4413 	mls	r4, r9, r3, r4
 8000d98:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000d9c:	fb03 fc0c 	mul.w	ip, r3, ip
 8000da0:	45a4      	cmp	ip, r4
 8000da2:	d908      	bls.n	8000db6 <__udivmoddi4+0x1ce>
 8000da4:	193c      	adds	r4, r7, r4
 8000da6:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 8000daa:	f080 8082 	bcs.w	8000eb2 <__udivmoddi4+0x2ca>
 8000dae:	45a4      	cmp	ip, r4
 8000db0:	d97f      	bls.n	8000eb2 <__udivmoddi4+0x2ca>
 8000db2:	3b02      	subs	r3, #2
 8000db4:	443c      	add	r4, r7
 8000db6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000dba:	eba4 040c 	sub.w	r4, r4, ip
 8000dbe:	fba0 ec02 	umull	lr, ip, r0, r2
 8000dc2:	4564      	cmp	r4, ip
 8000dc4:	4673      	mov	r3, lr
 8000dc6:	46e1      	mov	r9, ip
 8000dc8:	d362      	bcc.n	8000e90 <__udivmoddi4+0x2a8>
 8000dca:	d05f      	beq.n	8000e8c <__udivmoddi4+0x2a4>
 8000dcc:	b15d      	cbz	r5, 8000de6 <__udivmoddi4+0x1fe>
 8000dce:	ebb8 0203 	subs.w	r2, r8, r3
 8000dd2:	eb64 0409 	sbc.w	r4, r4, r9
 8000dd6:	fa04 f606 	lsl.w	r6, r4, r6
 8000dda:	fa22 f301 	lsr.w	r3, r2, r1
 8000dde:	431e      	orrs	r6, r3
 8000de0:	40cc      	lsrs	r4, r1
 8000de2:	e9c5 6400 	strd	r6, r4, [r5]
 8000de6:	2100      	movs	r1, #0
 8000de8:	e74f      	b.n	8000c8a <__udivmoddi4+0xa2>
 8000dea:	fbb1 fcf2 	udiv	ip, r1, r2
 8000dee:	0c01      	lsrs	r1, r0, #16
 8000df0:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000df4:	b280      	uxth	r0, r0
 8000df6:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000dfa:	463b      	mov	r3, r7
 8000dfc:	4638      	mov	r0, r7
 8000dfe:	463c      	mov	r4, r7
 8000e00:	46b8      	mov	r8, r7
 8000e02:	46be      	mov	lr, r7
 8000e04:	2620      	movs	r6, #32
 8000e06:	fbb1 f1f7 	udiv	r1, r1, r7
 8000e0a:	eba2 0208 	sub.w	r2, r2, r8
 8000e0e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000e12:	e766      	b.n	8000ce2 <__udivmoddi4+0xfa>
 8000e14:	4601      	mov	r1, r0
 8000e16:	e718      	b.n	8000c4a <__udivmoddi4+0x62>
 8000e18:	4610      	mov	r0, r2
 8000e1a:	e72c      	b.n	8000c76 <__udivmoddi4+0x8e>
 8000e1c:	f1c6 0220 	rsb	r2, r6, #32
 8000e20:	fa2e f302 	lsr.w	r3, lr, r2
 8000e24:	40b7      	lsls	r7, r6
 8000e26:	40b1      	lsls	r1, r6
 8000e28:	fa20 f202 	lsr.w	r2, r0, r2
 8000e2c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e30:	430a      	orrs	r2, r1
 8000e32:	fbb3 f8fe 	udiv	r8, r3, lr
 8000e36:	b2bc      	uxth	r4, r7
 8000e38:	fb0e 3318 	mls	r3, lr, r8, r3
 8000e3c:	0c11      	lsrs	r1, r2, #16
 8000e3e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e42:	fb08 f904 	mul.w	r9, r8, r4
 8000e46:	40b0      	lsls	r0, r6
 8000e48:	4589      	cmp	r9, r1
 8000e4a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000e4e:	b280      	uxth	r0, r0
 8000e50:	d93e      	bls.n	8000ed0 <__udivmoddi4+0x2e8>
 8000e52:	1879      	adds	r1, r7, r1
 8000e54:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000e58:	d201      	bcs.n	8000e5e <__udivmoddi4+0x276>
 8000e5a:	4589      	cmp	r9, r1
 8000e5c:	d81f      	bhi.n	8000e9e <__udivmoddi4+0x2b6>
 8000e5e:	eba1 0109 	sub.w	r1, r1, r9
 8000e62:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e66:	fb09 f804 	mul.w	r8, r9, r4
 8000e6a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e6e:	b292      	uxth	r2, r2
 8000e70:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e74:	4542      	cmp	r2, r8
 8000e76:	d229      	bcs.n	8000ecc <__udivmoddi4+0x2e4>
 8000e78:	18ba      	adds	r2, r7, r2
 8000e7a:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 8000e7e:	d2c4      	bcs.n	8000e0a <__udivmoddi4+0x222>
 8000e80:	4542      	cmp	r2, r8
 8000e82:	d2c2      	bcs.n	8000e0a <__udivmoddi4+0x222>
 8000e84:	f1a9 0102 	sub.w	r1, r9, #2
 8000e88:	443a      	add	r2, r7
 8000e8a:	e7be      	b.n	8000e0a <__udivmoddi4+0x222>
 8000e8c:	45f0      	cmp	r8, lr
 8000e8e:	d29d      	bcs.n	8000dcc <__udivmoddi4+0x1e4>
 8000e90:	ebbe 0302 	subs.w	r3, lr, r2
 8000e94:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000e98:	3801      	subs	r0, #1
 8000e9a:	46e1      	mov	r9, ip
 8000e9c:	e796      	b.n	8000dcc <__udivmoddi4+0x1e4>
 8000e9e:	eba7 0909 	sub.w	r9, r7, r9
 8000ea2:	4449      	add	r1, r9
 8000ea4:	f1a8 0c02 	sub.w	ip, r8, #2
 8000ea8:	fbb1 f9fe 	udiv	r9, r1, lr
 8000eac:	fb09 f804 	mul.w	r8, r9, r4
 8000eb0:	e7db      	b.n	8000e6a <__udivmoddi4+0x282>
 8000eb2:	4673      	mov	r3, lr
 8000eb4:	e77f      	b.n	8000db6 <__udivmoddi4+0x1ce>
 8000eb6:	4650      	mov	r0, sl
 8000eb8:	e766      	b.n	8000d88 <__udivmoddi4+0x1a0>
 8000eba:	4608      	mov	r0, r1
 8000ebc:	e6fd      	b.n	8000cba <__udivmoddi4+0xd2>
 8000ebe:	443b      	add	r3, r7
 8000ec0:	3a02      	subs	r2, #2
 8000ec2:	e733      	b.n	8000d2c <__udivmoddi4+0x144>
 8000ec4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ec8:	443b      	add	r3, r7
 8000eca:	e71c      	b.n	8000d06 <__udivmoddi4+0x11e>
 8000ecc:	4649      	mov	r1, r9
 8000ece:	e79c      	b.n	8000e0a <__udivmoddi4+0x222>
 8000ed0:	eba1 0109 	sub.w	r1, r1, r9
 8000ed4:	46c4      	mov	ip, r8
 8000ed6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000eda:	fb09 f804 	mul.w	r8, r9, r4
 8000ede:	e7c4      	b.n	8000e6a <__udivmoddi4+0x282>

08000ee0 <__aeabi_idiv0>:
 8000ee0:	4770      	bx	lr
 8000ee2:	bf00      	nop

08000ee4 <_write>:

// Send printf to uart1
int _write(int fd, char *ptr, int len) {
	HAL_StatusTypeDef hstatus;

	if (fd == 1 || fd == 2) {
 8000ee4:	3801      	subs	r0, #1
 8000ee6:	2801      	cmp	r0, #1
int _write(int fd, char *ptr, int len) {
 8000ee8:	b510      	push	{r4, lr}
	if (fd == 1 || fd == 2) {
 8000eea:	d809      	bhi.n	8000f00 <_write+0x1c>
		hstatus = HAL_UART_Transmit(&huart1, (uint8_t*) ptr, len,
 8000eec:	4614      	mov	r4, r2
 8000eee:	4806      	ldr	r0, [pc, #24]	@ (8000f08 <_write+0x24>)
 8000ef0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000ef4:	b292      	uxth	r2, r2
 8000ef6:	f002 f849 	bl	8002f8c <HAL_UART_Transmit>
				HAL_MAX_DELAY);
		if (hstatus == HAL_OK)
 8000efa:	b908      	cbnz	r0, 8000f00 <_write+0x1c>
			return len;
		else
			return -1;
	}
	return -1;
}
 8000efc:	4620      	mov	r0, r4
 8000efe:	bd10      	pop	{r4, pc}
			return -1;
 8000f00:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8000f04:	e7fa      	b.n	8000efc <_write+0x18>
 8000f06:	bf00      	nop
 8000f08:	20000308 	.word	0x20000308

08000f0c <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) {
	if (htim->Instance == TIM2) {
 8000f0c:	6803      	ldr	r3, [r0, #0]
 8000f0e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000f12:	d000      	beq.n	8000f16 <HAL_TIM_IC_CaptureCallback+0xa>
 8000f14:	4770      	bx	lr
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) {
 8000f16:	b510      	push	{r4, lr}
		cnt_full = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1) + 2;
 8000f18:	2100      	movs	r1, #0
 8000f1a:	4604      	mov	r4, r0
 8000f1c:	f001 feaa 	bl	8002c74 <HAL_TIM_ReadCapturedValue>
 8000f20:	4a05      	ldr	r2, [pc, #20]	@ (8000f38 <HAL_TIM_IC_CaptureCallback+0x2c>)
 8000f22:	1c83      	adds	r3, r0, #2
		cnt_high = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2) + 2;
 8000f24:	2104      	movs	r1, #4
 8000f26:	4620      	mov	r0, r4
		cnt_full = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1) + 2;
 8000f28:	6013      	str	r3, [r2, #0]
		cnt_high = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2) + 2;
 8000f2a:	f001 fea3 	bl	8002c74 <HAL_TIM_ReadCapturedValue>
 8000f2e:	4b03      	ldr	r3, [pc, #12]	@ (8000f3c <HAL_TIM_IC_CaptureCallback+0x30>)
 8000f30:	3002      	adds	r0, #2
 8000f32:	6018      	str	r0, [r3, #0]

//		freq = (float) TIMER_CLOCK_FREQ / (cnt_full);
//		duty = (float) 100 * cnt_high / cnt_full;
	}
}
 8000f34:	bd10      	pop	{r4, pc}
 8000f36:	bf00      	nop
 8000f38:	20000300 	.word	0x20000300
 8000f3c:	200002fc 	.word	0x200002fc

08000f40 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f40:	b510      	push	{r4, lr}
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f42:	2300      	movs	r3, #0
{
 8000f44:	b094      	sub	sp, #80	@ 0x50
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f46:	e9cd 330a 	strd	r3, r3, [sp, #40]	@ 0x28
 8000f4a:	e9cd 330c 	strd	r3, r3, [sp, #48]	@ 0x30
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f4e:	e9cd 3303 	strd	r3, r3, [sp, #12]
 8000f52:	e9cd 3305 	strd	r3, r3, [sp, #20]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f56:	4920      	ldr	r1, [pc, #128]	@ (8000fd8 <SystemClock_Config+0x98>)
 8000f58:	9301      	str	r3, [sp, #4]
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f5a:	9307      	str	r3, [sp, #28]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f5c:	6c08      	ldr	r0, [r1, #64]	@ 0x40
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000f5e:	4a1f      	ldr	r2, [pc, #124]	@ (8000fdc <SystemClock_Config+0x9c>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f60:	f040 5080 	orr.w	r0, r0, #268435456	@ 0x10000000
 8000f64:	6408      	str	r0, [r1, #64]	@ 0x40
 8000f66:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8000f68:	f001 5180 	and.w	r1, r1, #268435456	@ 0x10000000
 8000f6c:	9101      	str	r1, [sp, #4]
 8000f6e:	9901      	ldr	r1, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000f70:	9302      	str	r3, [sp, #8]
 8000f72:	6813      	ldr	r3, [r2, #0]
 8000f74:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000f78:	6013      	str	r3, [r2, #0]
 8000f7a:	6813      	ldr	r3, [r2, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000f7c:	2001      	movs	r0, #1
 8000f7e:	f44f 3180 	mov.w	r1, #65536	@ 0x10000
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000f82:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000f86:	e9cd 0108 	strd	r0, r1, [sp, #32]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000f8a:	9302      	str	r3, [sp, #8]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000f8c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f90:	2402      	movs	r4, #2
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000f92:	e9cd 410e 	strd	r4, r1, [sp, #56]	@ 0x38
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000f96:	9802      	ldr	r0, [sp, #8]
  RCC_OscInitStruct.PLL.PLLM = 12;
  RCC_OscInitStruct.PLL.PLLN = 96;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000f98:	2104      	movs	r1, #4
 8000f9a:	2002      	movs	r0, #2
 8000f9c:	e9cd 0112 	strd	r0, r1, [sp, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLM = 12;
 8000fa0:	220c      	movs	r2, #12
  RCC_OscInitStruct.PLL.PLLN = 96;
 8000fa2:	2360      	movs	r3, #96	@ 0x60
  RCC_OscInitStruct.PLL.PLLQ = 4;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fa4:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.PLL.PLLM = 12;
 8000fa6:	9210      	str	r2, [sp, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 96;
 8000fa8:	9311      	str	r3, [sp, #68]	@ 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000faa:	f000 fdd7 	bl	8001b5c <HAL_RCC_OscConfig>
 8000fae:	b108      	cbz	r0, 8000fb4 <SystemClock_Config+0x74>
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000fb0:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000fb2:	e7fe      	b.n	8000fb2 <SystemClock_Config+0x72>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fb4:	210f      	movs	r1, #15
 8000fb6:	4603      	mov	r3, r0
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000fb8:	e9cd 1403 	strd	r1, r4, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000fbc:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000fc0:	a803      	add	r0, sp, #12
 8000fc2:	2103      	movs	r1, #3
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000fc4:	e9cd 3205 	strd	r3, r2, [sp, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000fc8:	9307      	str	r3, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000fca:	f000 ffdd 	bl	8001f88 <HAL_RCC_ClockConfig>
 8000fce:	b108      	cbz	r0, 8000fd4 <SystemClock_Config+0x94>
 8000fd0:	b672      	cpsid	i
	while (1) {
 8000fd2:	e7fe      	b.n	8000fd2 <SystemClock_Config+0x92>
}
 8000fd4:	b014      	add	sp, #80	@ 0x50
 8000fd6:	bd10      	pop	{r4, pc}
 8000fd8:	40023800 	.word	0x40023800
 8000fdc:	40007000 	.word	0x40007000

08000fe0 <main>:
{
 8000fe0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000fe4:	ed2d 8b04 	vpush	{d8-d9}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fe8:	2500      	movs	r5, #0
{
 8000fea:	b09b      	sub	sp, #108	@ 0x6c
  HAL_Init();
 8000fec:	f000 fb4e 	bl	800168c <HAL_Init>
  SystemClock_Config();
 8000ff0:	f7ff ffa6 	bl	8000f40 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ff4:	e9cd 5512 	strd	r5, r5, [sp, #72]	@ 0x48
 8000ff8:	e9cd 5514 	strd	r5, r5, [sp, #80]	@ 0x50
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ffc:	4ba1      	ldr	r3, [pc, #644]	@ (8001284 <main+0x2a4>)
 8000ffe:	9504      	str	r5, [sp, #16]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001000:	9516      	str	r5, [sp, #88]	@ 0x58
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001002:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
  htim4.Instance = TIM4;
 8001004:	4ca0      	ldr	r4, [pc, #640]	@ (8001288 <main+0x2a8>)
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8001006:	48a1      	ldr	r0, [pc, #644]	@ (800128c <main+0x2ac>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001008:	f042 0204 	orr.w	r2, r2, #4
 800100c:	631a      	str	r2, [r3, #48]	@ 0x30
 800100e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001010:	f001 0104 	and.w	r1, r1, #4
 8001014:	9104      	str	r1, [sp, #16]
 8001016:	9904      	ldr	r1, [sp, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001018:	9505      	str	r5, [sp, #20]
 800101a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800101c:	f041 0180 	orr.w	r1, r1, #128	@ 0x80
 8001020:	6319      	str	r1, [r3, #48]	@ 0x30
 8001022:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001024:	f001 0180 	and.w	r1, r1, #128	@ 0x80
 8001028:	9105      	str	r1, [sp, #20]
 800102a:	9905      	ldr	r1, [sp, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800102c:	9506      	str	r5, [sp, #24]
 800102e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8001030:	2201      	movs	r2, #1
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001032:	4311      	orrs	r1, r2
 8001034:	6319      	str	r1, [r3, #48]	@ 0x30
 8001036:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001038:	4011      	ands	r1, r2
 800103a:	9106      	str	r1, [sp, #24]
 800103c:	9906      	ldr	r1, [sp, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800103e:	9507      	str	r5, [sp, #28]
 8001040:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001042:	f041 0102 	orr.w	r1, r1, #2
 8001046:	6319      	str	r1, [r3, #48]	@ 0x30
 8001048:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800104a:	f003 0302 	and.w	r3, r3, #2
 800104e:	9307      	str	r3, [sp, #28]
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8001050:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001054:	9b07      	ldr	r3, [sp, #28]
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8001056:	f000 fd73 	bl	8001b40 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = LED_Pin;
 800105a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 800105e:	2311      	movs	r3, #17
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8001060:	488a      	ldr	r0, [pc, #552]	@ (800128c <main+0x2ac>)
 8001062:	a912      	add	r1, sp, #72	@ 0x48
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8001064:	e9cd 2312 	strd	r2, r3, [sp, #72]	@ 0x48
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001068:	e9cd 5514 	strd	r5, r5, [sp, #80]	@ 0x50
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 800106c:	f000 fbb0 	bl	80017d0 <HAL_GPIO_Init>
  htim4.Instance = TIM4;
 8001070:	4a87      	ldr	r2, [pc, #540]	@ (8001290 <main+0x2b0>)
 8001072:	6022      	str	r2, [r4, #0]
  htim4.Init.Period = 99;
 8001074:	2363      	movs	r3, #99	@ 0x63
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001076:	4620      	mov	r0, r4
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001078:	e9cd 5512 	strd	r5, r5, [sp, #72]	@ 0x48
 800107c:	e9cd 5514 	strd	r5, r5, [sp, #80]	@ 0x50
 8001080:	e9cd 5516 	strd	r5, r5, [sp, #88]	@ 0x58
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001084:	e9c4 5501 	strd	r5, r5, [r4, #4]
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001088:	e9cd 550f 	strd	r5, r5, [sp, #60]	@ 0x3c
 800108c:	950e      	str	r5, [sp, #56]	@ 0x38
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800108e:	950a      	str	r5, [sp, #40]	@ 0x28
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001090:	9518      	str	r5, [sp, #96]	@ 0x60
  htim4.Init.Period = 99;
 8001092:	60e3      	str	r3, [r4, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001094:	6125      	str	r5, [r4, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001096:	61a5      	str	r5, [r4, #24]
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001098:	9511      	str	r5, [sp, #68]	@ 0x44
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800109a:	950b      	str	r5, [sp, #44]	@ 0x2c
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800109c:	f001 f832 	bl	8002104 <HAL_TIM_Base_Init>
 80010a0:	b108      	cbz	r0, 80010a6 <main+0xc6>
 80010a2:	b672      	cpsid	i
	while (1) {
 80010a4:	e7fe      	b.n	80010a4 <main+0xc4>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80010a6:	f44f 5680 	mov.w	r6, #4096	@ 0x1000
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80010aa:	a90e      	add	r1, sp, #56	@ 0x38
 80010ac:	4620      	mov	r0, r4
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80010ae:	960e      	str	r6, [sp, #56]	@ 0x38
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80010b0:	f001 fcb0 	bl	8002a14 <HAL_TIM_ConfigClockSource>
 80010b4:	b108      	cbz	r0, 80010ba <main+0xda>
 80010b6:	b672      	cpsid	i
	while (1) {
 80010b8:	e7fe      	b.n	80010b8 <main+0xd8>
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80010ba:	4620      	mov	r0, r4
 80010bc:	f001 f89e 	bl	80021fc <HAL_TIM_PWM_Init>
 80010c0:	b108      	cbz	r0, 80010c6 <main+0xe6>
 80010c2:	b672      	cpsid	i
	while (1) {
 80010c4:	e7fe      	b.n	80010c4 <main+0xe4>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010c6:	2200      	movs	r2, #0
 80010c8:	2300      	movs	r3, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80010ca:	a90a      	add	r1, sp, #40	@ 0x28
 80010cc:	4620      	mov	r0, r4
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010ce:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80010d2:	f001 fe8d 	bl	8002df0 <HAL_TIMEx_MasterConfigSynchronization>
 80010d6:	4602      	mov	r2, r0
 80010d8:	b108      	cbz	r0, 80010de <main+0xfe>
 80010da:	b672      	cpsid	i
	while (1) {
 80010dc:	e7fe      	b.n	80010dc <main+0xfc>
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80010de:	9014      	str	r0, [sp, #80]	@ 0x50
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80010e0:	9016      	str	r0, [sp, #88]	@ 0x58
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80010e2:	a912      	add	r1, sp, #72	@ 0x48
 80010e4:	4620      	mov	r0, r4
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80010e6:	f04f 0860 	mov.w	r8, #96	@ 0x60
 80010ea:	f44f 7961 	mov.w	r9, #900	@ 0x384
 80010ee:	e9cd 8912 	strd	r8, r9, [sp, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80010f2:	f001 fb9d 	bl	8002830 <HAL_TIM_PWM_ConfigChannel>
 80010f6:	4605      	mov	r5, r0
 80010f8:	b108      	cbz	r0, 80010fe <main+0x11e>
 80010fa:	b672      	cpsid	i
	while (1) {
 80010fc:	e7fe      	b.n	80010fc <main+0x11c>
  HAL_TIM_MspPostInit(&htim4);
 80010fe:	4620      	mov	r0, r4
 8001100:	f000 f996 	bl	8001430 <HAL_TIM_MspPostInit>
  huart1.Instance = USART1;
 8001104:	4863      	ldr	r0, [pc, #396]	@ (8001294 <main+0x2b4>)
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001106:	e9c0 5502 	strd	r5, r5, [r0, #8]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800110a:	e9c0 5506 	strd	r5, r5, [r0, #24]
  huart1.Init.Parity = UART_PARITY_NONE;
 800110e:	6105      	str	r5, [r0, #16]
  huart1.Init.BaudRate = 921600;
 8001110:	4d61      	ldr	r5, [pc, #388]	@ (8001298 <main+0x2b8>)
 8001112:	f44f 2361 	mov.w	r3, #921600	@ 0xe1000
 8001116:	e9c0 5300 	strd	r5, r3, [r0]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800111a:	230c      	movs	r3, #12
 800111c:	6143      	str	r3, [r0, #20]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800111e:	f001 fea3 	bl	8002e68 <HAL_UART_Init>
 8001122:	b108      	cbz	r0, 8001128 <main+0x148>
 8001124:	b672      	cpsid	i
	while (1) {
 8001126:	e7fe      	b.n	8001126 <main+0x146>
  htim2.Instance = TIM2;
 8001128:	4d5c      	ldr	r5, [pc, #368]	@ (800129c <main+0x2bc>)
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 800112a:	9016      	str	r0, [sp, #88]	@ 0x58
  htim2.Instance = TIM2;
 800112c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001130:	e9cd 000e 	strd	r0, r0, [sp, #56]	@ 0x38
 8001134:	e9cd 0010 	strd	r0, r0, [sp, #64]	@ 0x40
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8001138:	e9cd 0012 	strd	r0, r0, [sp, #72]	@ 0x48
 800113c:	e9cd 0014 	strd	r0, r0, [sp, #80]	@ 0x50
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001140:	e9cd 000a 	strd	r0, r0, [sp, #40]	@ 0x28
 8001144:	e9cd 000c 	strd	r0, r0, [sp, #48]	@ 0x30
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001148:	e9cd 0008 	strd	r0, r0, [sp, #32]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800114c:	e9c5 0001 	strd	r0, r0, [r5, #4]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001150:	6128      	str	r0, [r5, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001152:	61a8      	str	r0, [r5, #24]
  htim2.Instance = TIM2;
 8001154:	602b      	str	r3, [r5, #0]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001156:	4628      	mov	r0, r5
  htim2.Init.Period = 4294967295;
 8001158:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800115c:	60eb      	str	r3, [r5, #12]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800115e:	f000 ffd1 	bl	8002104 <HAL_TIM_Base_Init>
 8001162:	b108      	cbz	r0, 8001168 <main+0x188>
 8001164:	b672      	cpsid	i
	while (1) {
 8001166:	e7fe      	b.n	8001166 <main+0x186>
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001168:	a90e      	add	r1, sp, #56	@ 0x38
 800116a:	4628      	mov	r0, r5
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800116c:	960e      	str	r6, [sp, #56]	@ 0x38
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800116e:	f001 fc51 	bl	8002a14 <HAL_TIM_ConfigClockSource>
 8001172:	b108      	cbz	r0, 8001178 <main+0x198>
 8001174:	b672      	cpsid	i
	while (1) {
 8001176:	e7fe      	b.n	8001176 <main+0x196>
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8001178:	4628      	mov	r0, r5
 800117a:	f001 f917 	bl	80023ac <HAL_TIM_IC_Init>
 800117e:	4603      	mov	r3, r0
 8001180:	b108      	cbz	r0, 8001186 <main+0x1a6>
 8001182:	b672      	cpsid	i
	while (1) {
 8001184:	e7fe      	b.n	8001184 <main+0x1a4>
  sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 8001186:	e9cd 3314 	strd	r3, r3, [sp, #80]	@ 0x50
  sSlaveConfig.TriggerFilter = 0;
 800118a:	9316      	str	r3, [sp, #88]	@ 0x58
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 800118c:	2204      	movs	r2, #4
 800118e:	2350      	movs	r3, #80	@ 0x50
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 8001190:	a912      	add	r1, sp, #72	@ 0x48
 8001192:	4628      	mov	r0, r5
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8001194:	e9cd 2312 	strd	r2, r3, [sp, #72]	@ 0x48
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 8001198:	f001 fce6 	bl	8002b68 <HAL_TIM_SlaveConfigSynchro>
 800119c:	b108      	cbz	r0, 80011a2 <main+0x1c2>
 800119e:	b672      	cpsid	i
	while (1) {
 80011a0:	e7fe      	b.n	80011a0 <main+0x1c0>
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80011a2:	2200      	movs	r2, #0
 80011a4:	2301      	movs	r3, #1
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80011a6:	483d      	ldr	r0, [pc, #244]	@ (800129c <main+0x2bc>)
 80011a8:	a90a      	add	r1, sp, #40	@ 0x28
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80011aa:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
  sConfigIC.ICFilter = 0;
 80011ae:	e9cd 220c 	strd	r2, r2, [sp, #48]	@ 0x30
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80011b2:	f001 fa7b 	bl	80026ac <HAL_TIM_IC_ConfigChannel>
 80011b6:	b108      	cbz	r0, 80011bc <main+0x1dc>
 80011b8:	b672      	cpsid	i
	while (1) {
 80011ba:	e7fe      	b.n	80011ba <main+0x1da>
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 80011bc:	2202      	movs	r2, #2
 80011be:	2302      	movs	r3, #2
 80011c0:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 80011c4:	4835      	ldr	r0, [pc, #212]	@ (800129c <main+0x2bc>)
 80011c6:	a90a      	add	r1, sp, #40	@ 0x28
 80011c8:	2204      	movs	r2, #4
 80011ca:	f001 fa6f 	bl	80026ac <HAL_TIM_IC_ConfigChannel>
 80011ce:	b108      	cbz	r0, 80011d4 <main+0x1f4>
 80011d0:	b672      	cpsid	i
	while (1) {
 80011d2:	e7fe      	b.n	80011d2 <main+0x1f2>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011d4:	2200      	movs	r2, #0
 80011d6:	2300      	movs	r3, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80011d8:	4830      	ldr	r0, [pc, #192]	@ (800129c <main+0x2bc>)
 80011da:	a908      	add	r1, sp, #32
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011dc:	e9cd 2308 	strd	r2, r3, [sp, #32]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80011e0:	f001 fe06 	bl	8002df0 <HAL_TIMEx_MasterConfigSynchronization>
 80011e4:	4605      	mov	r5, r0
 80011e6:	b108      	cbz	r0, 80011ec <main+0x20c>
 80011e8:	b672      	cpsid	i
	while (1) {
 80011ea:	e7fe      	b.n	80011ea <main+0x20a>
	DBG("Firing up PWM");
 80011ec:	482c      	ldr	r0, [pc, #176]	@ (80012a0 <main+0x2c0>)
 80011ee:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 80012b8 <main+0x2d8>
 80011f2:	f8df 80c8 	ldr.w	r8, [pc, #200]	@ 80012bc <main+0x2dc>
	        float duty = (float) 100 * cnt_high / cnt_full;
 80011f6:	ed9f 9a2b 	vldr	s18, [pc, #172]	@ 80012a4 <main+0x2c4>
		    float freq = (float) TIMER_CLOCK_FREQ / (cnt_full);
 80011fa:	eddf 8a2b 	vldr	s17, [pc, #172]	@ 80012a8 <main+0x2c8>
 80011fe:	4f2b      	ldr	r7, [pc, #172]	@ (80012ac <main+0x2cc>)
	DBG("Firing up PWM");
 8001200:	f002 fc60 	bl	8003ac4 <iprintf>
 8001204:	200a      	movs	r0, #10
 8001206:	f002 fc6f 	bl	8003ae8 <putchar>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);   // Output PWM Generation
 800120a:	4629      	mov	r1, r5
 800120c:	481e      	ldr	r0, [pc, #120]	@ (8001288 <main+0x2a8>)
 800120e:	f001 f86f 	bl	80022f0 <HAL_TIM_PWM_Start>
	DBG("Firing up PWM Input Capture");
 8001212:	4827      	ldr	r0, [pc, #156]	@ (80012b0 <main+0x2d0>)
 8001214:	f002 fc56 	bl	8003ac4 <iprintf>
 8001218:	200a      	movs	r0, #10
 800121a:	f002 fc65 	bl	8003ae8 <putchar>
	HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1); // Primary channel - rising edge - rinse and repeat
 800121e:	4629      	mov	r1, r5
 8001220:	481e      	ldr	r0, [pc, #120]	@ (800129c <main+0x2bc>)
 8001222:	f001 f9bd 	bl	80025a0 <HAL_TIM_IC_Start_IT>
	HAL_TIM_IC_Start(&htim2, TIM_CHANNEL_2);    // Secondary channel - falling edge - stop second counter
 8001226:	481d      	ldr	r0, [pc, #116]	@ (800129c <main+0x2bc>)
 8001228:	2104      	movs	r1, #4
 800122a:	f001 f939 	bl	80024a0 <HAL_TIM_IC_Start>
	uint32_t now = 0, next_blink = 500, next_print = 1000, next_change = 0;
 800122e:	f44f 7b7a 	mov.w	fp, #1000	@ 0x3e8
 8001232:	f44f 79fa 	mov.w	r9, #500	@ 0x1f4
		now = HAL_GetTick();
 8001236:	f000 fa4f 	bl	80016d8 <HAL_GetTick>
		if (now >= next_blink) {
 800123a:	4581      	cmp	r9, r0
		now = HAL_GetTick();
 800123c:	4606      	mov	r6, r0
		if (now >= next_blink) {
 800123e:	d973      	bls.n	8001328 <main+0x348>
		if (now >= next_print) {
 8001240:	45b3      	cmp	fp, r6
 8001242:	d93d      	bls.n	80012c0 <main+0x2e0>
		if (now >= next_change) {
 8001244:	42b5      	cmp	r5, r6
 8001246:	d8f6      	bhi.n	8001236 <main+0x256>
		    printf("Setting prescaler = %lu compare = %lu\n", pwm_vals[pwm_vals_idx][0], pwm_vals[pwm_vals_idx][1]);
 8001248:	f8d8 3000 	ldr.w	r3, [r8]
 800124c:	4819      	ldr	r0, [pc, #100]	@ (80012b4 <main+0x2d4>)
 800124e:	f857 1033 	ldr.w	r1, [r7, r3, lsl #3]
 8001252:	eb07 02c3 	add.w	r2, r7, r3, lsl #3
			next_change = now + 2000;
 8001256:	f506 65fa 	add.w	r5, r6, #2000	@ 0x7d0
		    printf("Setting prescaler = %lu compare = %lu\n", pwm_vals[pwm_vals_idx][0], pwm_vals[pwm_vals_idx][1]);
 800125a:	6852      	ldr	r2, [r2, #4]
 800125c:	f002 fc32 	bl	8003ac4 <iprintf>
			__HAL_TIM_SET_PRESCALER(&htim4, pwm_vals[pwm_vals_idx][0]);
 8001260:	f8d8 3000 	ldr.w	r3, [r8]
 8001264:	6821      	ldr	r1, [r4, #0]
 8001266:	f857 2033 	ldr.w	r2, [r7, r3, lsl #3]
 800126a:	628a      	str	r2, [r1, #40]	@ 0x28
			++pwm_vals_idx;
 800126c:	1c5a      	adds	r2, r3, #1
			__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, pwm_vals[pwm_vals_idx][1]);
 800126e:	eb07 03c3 	add.w	r3, r7, r3, lsl #3
 8001272:	2a21      	cmp	r2, #33	@ 0x21
 8001274:	685b      	ldr	r3, [r3, #4]
 8001276:	634b      	str	r3, [r1, #52]	@ 0x34
			if (pwm_vals_idx >= sizeof(pwm_vals) / sizeof(pwm_vals[0])) {
 8001278:	bf28      	it	cs
 800127a:	2200      	movcs	r2, #0
			++pwm_vals_idx;
 800127c:	f8c8 2000 	str.w	r2, [r8]
			next_change = now + 2000;
 8001280:	e7d9      	b.n	8001236 <main+0x256>
 8001282:	bf00      	nop
 8001284:	40023800 	.word	0x40023800
 8001288:	20000350 	.word	0x20000350
 800128c:	40020800 	.word	0x40020800
 8001290:	40000800 	.word	0x40000800
 8001294:	20000308 	.word	0x20000308
 8001298:	40011000 	.word	0x40011000
 800129c:	20000398 	.word	0x20000398
 80012a0:	08005a50 	.word	0x08005a50
 80012a4:	42c80000 	.word	0x42c80000
 80012a8:	4cbebc20 	.word	0x4cbebc20
 80012ac:	20000000 	.word	0x20000000
 80012b0:	08005a60 	.word	0x08005a60
 80012b4:	08005ab4 	.word	0x08005ab4
 80012b8:	200002fc 	.word	0x200002fc
 80012bc:	20000304 	.word	0x20000304
		    float freq = (float) TIMER_CLOCK_FREQ / (cnt_full);
 80012c0:	4b1d      	ldr	r3, [pc, #116]	@ (8001338 <main+0x358>)
 80012c2:	681a      	ldr	r2, [r3, #0]
 80012c4:	ee07 2a90 	vmov	s15, r2
 80012c8:	eeb8 8a67 	vcvt.f32.u32	s16, s15
	        float duty = (float) 100 * cnt_high / cnt_full;
 80012cc:	edda 7a00 	vldr	s15, [sl]
 80012d0:	eef8 7a67 	vcvt.f32.u32	s15, s15
		    float freq = (float) TIMER_CLOCK_FREQ / (cnt_full);
 80012d4:	f240 3300 	movw	r3, #768	@ 0x300
	        float duty = (float) 100 * cnt_high / cnt_full;
 80012d8:	ee67 7a89 	vmul.f32	s15, s15, s18
		    float freq = (float) TIMER_CLOCK_FREQ / (cnt_full);
 80012dc:	f2c2 0300 	movt	r3, #8192	@ 0x2000
			DBG("Tick %5lu count = %8lu freq = %10.2f Hz duty = %7.2f %%", now / 1000, cnt_full, freq, duty);
 80012e0:	eec7 7a88 	vdiv.f32	s15, s15, s16
		    float freq = (float) TIMER_CLOCK_FREQ / (cnt_full);
 80012e4:	601a      	str	r2, [r3, #0]
			DBG("Tick %5lu count = %8lu freq = %10.2f Hz duty = %7.2f %%", now / 1000, cnt_full, freq, duty);
 80012e6:	f44f 7b7a 	mov.w	fp, #1000	@ 0x3e8
 80012ea:	fbb6 fbfb 	udiv	fp, r6, fp
 80012ee:	ee17 0a90 	vmov	r0, s15
 80012f2:	f7ff f931 	bl	8000558 <__aeabi_f2d>
 80012f6:	eec8 7a88 	vdiv.f32	s15, s17, s16
 80012fa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80012fe:	ee17 0a90 	vmov	r0, s15
 8001302:	f7ff f929 	bl	8000558 <__aeabi_f2d>
 8001306:	f240 3300 	movw	r3, #768	@ 0x300
 800130a:	e9cd 0100 	strd	r0, r1, [sp]
 800130e:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8001312:	4659      	mov	r1, fp
 8001314:	681a      	ldr	r2, [r3, #0]
 8001316:	4809      	ldr	r0, [pc, #36]	@ (800133c <main+0x35c>)
 8001318:	f002 fbd4 	bl	8003ac4 <iprintf>
 800131c:	200a      	movs	r0, #10
 800131e:	f002 fbe3 	bl	8003ae8 <putchar>
			next_print = now + 1000;
 8001322:	f506 7b7a 	add.w	fp, r6, #1000	@ 0x3e8
 8001326:	e78d      	b.n	8001244 <main+0x264>
			HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8001328:	4805      	ldr	r0, [pc, #20]	@ (8001340 <main+0x360>)
 800132a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800132e:	f000 fc0b 	bl	8001b48 <HAL_GPIO_TogglePin>
			next_blink = now + 500;
 8001332:	f506 79fa 	add.w	r9, r6, #500	@ 0x1f4
 8001336:	e783      	b.n	8001240 <main+0x260>
 8001338:	20000300 	.word	0x20000300
 800133c:	08005a7c 	.word	0x08005a7c
 8001340:	40020800 	.word	0x40020800

08001344 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001344:	b082      	sub	sp, #8

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001346:	4b0c      	ldr	r3, [pc, #48]	@ (8001378 <HAL_MspInit+0x34>)
 8001348:	2100      	movs	r1, #0
 800134a:	9100      	str	r1, [sp, #0]
 800134c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800134e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001352:	645a      	str	r2, [r3, #68]	@ 0x44
 8001354:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001356:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 800135a:	9200      	str	r2, [sp, #0]
 800135c:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 800135e:	9101      	str	r1, [sp, #4]
 8001360:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001362:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8001366:	641a      	str	r2, [r3, #64]	@ 0x40
 8001368:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800136a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800136e:	9301      	str	r3, [sp, #4]
 8001370:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001372:	b002      	add	sp, #8
 8001374:	4770      	bx	lr
 8001376:	bf00      	nop
 8001378:	40023800 	.word	0x40023800
 800137c:	00000000 	.word	0x00000000

08001380 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001380:	b530      	push	{r4, r5, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(htim_base->Instance==TIM2)
 8001382:	6803      	ldr	r3, [r0, #0]
{
 8001384:	b08b      	sub	sp, #44	@ 0x2c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001386:	2400      	movs	r4, #0
  if(htim_base->Instance==TIM2)
 8001388:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800138c:	e9cd 4404 	strd	r4, r4, [sp, #16]
 8001390:	e9cd 4406 	strd	r4, r4, [sp, #24]
 8001394:	9408      	str	r4, [sp, #32]
  if(htim_base->Instance==TIM2)
 8001396:	d011      	beq.n	80013bc <HAL_TIM_Base_MspInit+0x3c>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
  else if(htim_base->Instance==TIM4)
 8001398:	4a21      	ldr	r2, [pc, #132]	@ (8001420 <HAL_TIM_Base_MspInit+0xa0>)
 800139a:	4293      	cmp	r3, r2
 800139c:	d001      	beq.n	80013a2 <HAL_TIM_Base_MspInit+0x22>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800139e:	b00b      	add	sp, #44	@ 0x2c
 80013a0:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_TIM4_CLK_ENABLE();
 80013a2:	4b20      	ldr	r3, [pc, #128]	@ (8001424 <HAL_TIM_Base_MspInit+0xa4>)
 80013a4:	9403      	str	r4, [sp, #12]
 80013a6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80013a8:	f042 0204 	orr.w	r2, r2, #4
 80013ac:	641a      	str	r2, [r3, #64]	@ 0x40
 80013ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013b0:	f003 0304 	and.w	r3, r3, #4
 80013b4:	9303      	str	r3, [sp, #12]
 80013b6:	9b03      	ldr	r3, [sp, #12]
}
 80013b8:	b00b      	add	sp, #44	@ 0x2c
 80013ba:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_TIM2_CLK_ENABLE();
 80013bc:	f503 330e 	add.w	r3, r3, #145408	@ 0x23800
 80013c0:	9401      	str	r4, [sp, #4]
 80013c2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
    HAL_GPIO_Init(PWM_IN_GPIO_Port, &GPIO_InitStruct);
 80013c4:	4818      	ldr	r0, [pc, #96]	@ (8001428 <HAL_TIM_Base_MspInit+0xa8>)
    __HAL_RCC_TIM2_CLK_ENABLE();
 80013c6:	f042 0201 	orr.w	r2, r2, #1
 80013ca:	641a      	str	r2, [r3, #64]	@ 0x40
 80013cc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80013ce:	f002 0201 	and.w	r2, r2, #1
 80013d2:	9201      	str	r2, [sp, #4]
 80013d4:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013d6:	9402      	str	r4, [sp, #8]
 80013d8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80013da:	f042 0201 	orr.w	r2, r2, #1
 80013de:	631a      	str	r2, [r3, #48]	@ 0x30
 80013e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
    GPIO_InitStruct.Pin = PWM_IN_Pin;
 80013e2:	ed9f 7b0d 	vldr	d7, [pc, #52]	@ 8001418 <HAL_TIM_Base_MspInit+0x98>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013e6:	f003 0301 	and.w	r3, r3, #1
 80013ea:	9302      	str	r3, [sp, #8]
    HAL_GPIO_Init(PWM_IN_GPIO_Port, &GPIO_InitStruct);
 80013ec:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013ee:	2303      	movs	r3, #3
 80013f0:	2501      	movs	r5, #1
    GPIO_InitStruct.Pin = PWM_IN_Pin;
 80013f2:	ed8d 7b04 	vstr	d7, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013f6:	e9cd 3507 	strd	r3, r5, [sp, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013fa:	9a02      	ldr	r2, [sp, #8]
    HAL_GPIO_Init(PWM_IN_GPIO_Port, &GPIO_InitStruct);
 80013fc:	f000 f9e8 	bl	80017d0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM2_IRQn, 1, 0);
 8001400:	4622      	mov	r2, r4
 8001402:	4629      	mov	r1, r5
 8001404:	201c      	movs	r0, #28
 8001406:	f000 f97f 	bl	8001708 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800140a:	201c      	movs	r0, #28
 800140c:	f000 f9b8 	bl	8001780 <HAL_NVIC_EnableIRQ>
}
 8001410:	b00b      	add	sp, #44	@ 0x2c
 8001412:	bd30      	pop	{r4, r5, pc}
 8001414:	f3af 8000 	nop.w
 8001418:	00000020 	.word	0x00000020
 800141c:	00000002 	.word	0x00000002
 8001420:	40000800 	.word	0x40000800
 8001424:	40023800 	.word	0x40023800
 8001428:	40020000 	.word	0x40020000
 800142c:	00000000 	.word	0x00000000

08001430 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001430:	b500      	push	{lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(htim->Instance==TIM4)
 8001432:	4a17      	ldr	r2, [pc, #92]	@ (8001490 <HAL_TIM_MspPostInit+0x60>)
 8001434:	6801      	ldr	r1, [r0, #0]
{
 8001436:	b089      	sub	sp, #36	@ 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001438:	2300      	movs	r3, #0
  if(htim->Instance==TIM4)
 800143a:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800143c:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8001440:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8001444:	9306      	str	r3, [sp, #24]
  if(htim->Instance==TIM4)
 8001446:	d002      	beq.n	800144e <HAL_TIM_MspPostInit+0x1e>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8001448:	b009      	add	sp, #36	@ 0x24
 800144a:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800144e:	f502 320c 	add.w	r2, r2, #143360	@ 0x23000
 8001452:	9301      	str	r3, [sp, #4]
 8001454:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 8001456:	f043 0302 	orr.w	r3, r3, #2
 800145a:	6313      	str	r3, [r2, #48]	@ 0x30
 800145c:	6b13      	ldr	r3, [r2, #48]	@ 0x30
    GPIO_InitStruct.Pin = PWM_OUT_Pin;
 800145e:	ed9f 7b0a 	vldr	d7, [pc, #40]	@ 8001488 <HAL_TIM_MspPostInit+0x58>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001462:	f003 0302 	and.w	r3, r3, #2
 8001466:	9301      	str	r3, [sp, #4]
 8001468:	9801      	ldr	r0, [sp, #4]
    HAL_GPIO_Init(PWM_OUT_GPIO_Port, &GPIO_InitStruct);
 800146a:	480a      	ldr	r0, [pc, #40]	@ (8001494 <HAL_TIM_MspPostInit+0x64>)
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800146c:	2203      	movs	r2, #3
 800146e:	2302      	movs	r3, #2
    HAL_GPIO_Init(PWM_OUT_GPIO_Port, &GPIO_InitStruct);
 8001470:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Pin = PWM_OUT_Pin;
 8001472:	ed8d 7b02 	vstr	d7, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001476:	9205      	str	r2, [sp, #20]
 8001478:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(PWM_OUT_GPIO_Port, &GPIO_InitStruct);
 800147a:	f000 f9a9 	bl	80017d0 <HAL_GPIO_Init>
}
 800147e:	b009      	add	sp, #36	@ 0x24
 8001480:	f85d fb04 	ldr.w	pc, [sp], #4
 8001484:	f3af 8000 	nop.w
 8001488:	00000040 	.word	0x00000040
 800148c:	00000002 	.word	0x00000002
 8001490:	40000800 	.word	0x40000800
 8001494:	40020400 	.word	0x40020400

08001498 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001498:	b510      	push	{r4, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(huart->Instance==USART1)
 800149a:	4a1b      	ldr	r2, [pc, #108]	@ (8001508 <HAL_UART_MspInit+0x70>)
 800149c:	6801      	ldr	r1, [r0, #0]
{
 800149e:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014a0:	2300      	movs	r3, #0
  if(huart->Instance==USART1)
 80014a2:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014a4:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80014a8:	e9cd 3304 	strd	r3, r3, [sp, #16]
 80014ac:	9306      	str	r3, [sp, #24]
  if(huart->Instance==USART1)
 80014ae:	d001      	beq.n	80014b4 <HAL_UART_MspInit+0x1c>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 80014b0:	b008      	add	sp, #32
 80014b2:	bd10      	pop	{r4, pc}
    __HAL_RCC_USART1_CLK_ENABLE();
 80014b4:	f502 3294 	add.w	r2, r2, #75776	@ 0x12800
 80014b8:	9300      	str	r3, [sp, #0]
 80014ba:	6c50      	ldr	r0, [r2, #68]	@ 0x44
 80014bc:	f040 0010 	orr.w	r0, r0, #16
 80014c0:	6450      	str	r0, [r2, #68]	@ 0x44
 80014c2:	6c50      	ldr	r0, [r2, #68]	@ 0x44
 80014c4:	f000 0010 	and.w	r0, r0, #16
 80014c8:	9000      	str	r0, [sp, #0]
 80014ca:	9800      	ldr	r0, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014cc:	9301      	str	r3, [sp, #4]
 80014ce:	6b13      	ldr	r3, [r2, #48]	@ 0x30
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014d0:	480e      	ldr	r0, [pc, #56]	@ (800150c <HAL_UART_MspInit+0x74>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014d2:	f043 0301 	orr.w	r3, r3, #1
 80014d6:	6313      	str	r3, [r2, #48]	@ 0x30
 80014d8:	6b13      	ldr	r3, [r2, #48]	@ 0x30
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80014da:	ed9f 7b09 	vldr	d7, [pc, #36]	@ 8001500 <HAL_UART_MspInit+0x68>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014de:	f003 0301 	and.w	r3, r3, #1
 80014e2:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014e4:	2203      	movs	r2, #3
 80014e6:	2307      	movs	r3, #7
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014e8:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80014ea:	ed8d 7b02 	vstr	d7, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014ee:	e9cd 2305 	strd	r2, r3, [sp, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014f2:	9c01      	ldr	r4, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014f4:	f000 f96c 	bl	80017d0 <HAL_GPIO_Init>
}
 80014f8:	b008      	add	sp, #32
 80014fa:	bd10      	pop	{r4, pc}
 80014fc:	f3af 8000 	nop.w
 8001500:	00000600 	.word	0x00000600
 8001504:	00000002 	.word	0x00000002
 8001508:	40011000 	.word	0x40011000
 800150c:	40020000 	.word	0x40020000

08001510 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001510:	e7fe      	b.n	8001510 <NMI_Handler>
 8001512:	bf00      	nop

08001514 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001514:	e7fe      	b.n	8001514 <HardFault_Handler>
 8001516:	bf00      	nop

08001518 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001518:	e7fe      	b.n	8001518 <MemManage_Handler>
 800151a:	bf00      	nop

0800151c <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800151c:	e7fe      	b.n	800151c <BusFault_Handler>
 800151e:	bf00      	nop

08001520 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001520:	e7fe      	b.n	8001520 <UsageFault_Handler>
 8001522:	bf00      	nop

08001524 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001524:	4770      	bx	lr
 8001526:	bf00      	nop

08001528 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
 8001528:	4770      	bx	lr
 800152a:	bf00      	nop

0800152c <PendSV_Handler>:
}

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
 800152c:	4770      	bx	lr
 800152e:	bf00      	nop

08001530 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001530:	f000 b8c6 	b.w	80016c0 <HAL_IncTick>

08001534 <TIM2_IRQHandler>:
void TIM2_IRQHandler(void)
{
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001534:	4801      	ldr	r0, [pc, #4]	@ (800153c <TIM2_IRQHandler+0x8>)
 8001536:	f001 bbbf 	b.w	8002cb8 <HAL_TIM_IRQHandler>
 800153a:	bf00      	nop
 800153c:	20000398 	.word	0x20000398

08001540 <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 8001540:	2001      	movs	r0, #1
 8001542:	4770      	bx	lr

08001544 <_kill>:

int _kill(int pid, int sig)
{
 8001544:	b508      	push	{r3, lr}
	errno = EINVAL;
 8001546:	f002 fb6d 	bl	8003c24 <__errno>
 800154a:	2316      	movs	r3, #22
 800154c:	6003      	str	r3, [r0, #0]
	return -1;
}
 800154e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001552:	bd08      	pop	{r3, pc}

08001554 <_exit>:

void _exit (int status)
{
 8001554:	b508      	push	{r3, lr}
	errno = EINVAL;
 8001556:	f002 fb65 	bl	8003c24 <__errno>
 800155a:	2316      	movs	r3, #22
 800155c:	6003      	str	r3, [r0, #0]
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
 800155e:	e7fe      	b.n	800155e <_exit+0xa>

08001560 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001560:	b570      	push	{r4, r5, r6, lr}
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001562:	1e16      	subs	r6, r2, #0
 8001564:	dd07      	ble.n	8001576 <_read+0x16>
 8001566:	460c      	mov	r4, r1
 8001568:	198d      	adds	r5, r1, r6
	{
		*ptr++ = __io_getchar();
 800156a:	f3af 8000 	nop.w
 800156e:	f804 0b01 	strb.w	r0, [r4], #1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001572:	42a5      	cmp	r5, r4
 8001574:	d1f9      	bne.n	800156a <_read+0xa>
	}

return len;
}
 8001576:	4630      	mov	r0, r6
 8001578:	bd70      	pop	{r4, r5, r6, pc}
 800157a:	bf00      	nop

0800157c <_close>:
}

int _close(int file)
{
	return -1;
}
 800157c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001580:	4770      	bx	lr
 8001582:	bf00      	nop

08001584 <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 8001584:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001588:	604b      	str	r3, [r1, #4]
	return 0;
}
 800158a:	2000      	movs	r0, #0
 800158c:	4770      	bx	lr
 800158e:	bf00      	nop

08001590 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 8001590:	2001      	movs	r0, #1
 8001592:	4770      	bx	lr

08001594 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 8001594:	2000      	movs	r0, #0
 8001596:	4770      	bx	lr

08001598 <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001598:	490c      	ldr	r1, [pc, #48]	@ (80015cc <_sbrk+0x34>)
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800159a:	4a0d      	ldr	r2, [pc, #52]	@ (80015d0 <_sbrk+0x38>)
  if (NULL == __sbrk_heap_end)
 800159c:	680b      	ldr	r3, [r1, #0]
{
 800159e:	b510      	push	{r4, lr}
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80015a0:	4c0c      	ldr	r4, [pc, #48]	@ (80015d4 <_sbrk+0x3c>)
 80015a2:	1b12      	subs	r2, r2, r4
  if (NULL == __sbrk_heap_end)
 80015a4:	b12b      	cbz	r3, 80015b2 <_sbrk+0x1a>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80015a6:	4418      	add	r0, r3
 80015a8:	4290      	cmp	r0, r2
 80015aa:	d807      	bhi.n	80015bc <_sbrk+0x24>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 80015ac:	6008      	str	r0, [r1, #0]

  return (void *)prev_heap_end;
}
 80015ae:	4618      	mov	r0, r3
 80015b0:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 80015b2:	4b09      	ldr	r3, [pc, #36]	@ (80015d8 <_sbrk+0x40>)
 80015b4:	600b      	str	r3, [r1, #0]
  if (__sbrk_heap_end + incr > max_heap)
 80015b6:	4418      	add	r0, r3
 80015b8:	4290      	cmp	r0, r2
 80015ba:	d9f7      	bls.n	80015ac <_sbrk+0x14>
    errno = ENOMEM;
 80015bc:	f002 fb32 	bl	8003c24 <__errno>
 80015c0:	230c      	movs	r3, #12
 80015c2:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 80015c4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80015c8:	4618      	mov	r0, r3
 80015ca:	bd10      	pop	{r4, pc}
 80015cc:	200003e0 	.word	0x200003e0
 80015d0:	20020000 	.word	0x20020000
 80015d4:	00000400 	.word	0x00000400
 80015d8:	20000538 	.word	0x20000538

080015dc <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80015dc:	4a03      	ldr	r2, [pc, #12]	@ (80015ec <SystemInit+0x10>)
 80015de:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 80015e2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80015e6:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80015ea:	4770      	bx	lr
 80015ec:	e000ed00 	.word	0xe000ed00

080015f0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80015f0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001628 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80015f4:	480d      	ldr	r0, [pc, #52]	@ (800162c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80015f6:	490e      	ldr	r1, [pc, #56]	@ (8001630 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80015f8:	4a0e      	ldr	r2, [pc, #56]	@ (8001634 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80015fa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80015fc:	e002      	b.n	8001604 <LoopCopyDataInit>

080015fe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80015fe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001600:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001602:	3304      	adds	r3, #4

08001604 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001604:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001606:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001608:	d3f9      	bcc.n	80015fe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800160a:	4a0b      	ldr	r2, [pc, #44]	@ (8001638 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800160c:	4c0b      	ldr	r4, [pc, #44]	@ (800163c <LoopFillZerobss+0x26>)
  movs r3, #0
 800160e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001610:	e001      	b.n	8001616 <LoopFillZerobss>

08001612 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001612:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001614:	3204      	adds	r2, #4

08001616 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001616:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001618:	d3fb      	bcc.n	8001612 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800161a:	f7ff ffdf 	bl	80015dc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800161e:	f002 fb07 	bl	8003c30 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001622:	f7ff fcdd 	bl	8000fe0 <main>
  bx  lr    
 8001626:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001628:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800162c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001630:	200002dc 	.word	0x200002dc
  ldr r2, =_sidata
 8001634:	08005e7c 	.word	0x08005e7c
  ldr r2, =_sbss
 8001638:	200002e0 	.word	0x200002e0
  ldr r4, =_ebss
 800163c:	20000534 	.word	0x20000534

08001640 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001640:	e7fe      	b.n	8001640 <ADC_IRQHandler>
	...

08001644 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001644:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001646:	4a0e      	ldr	r2, [pc, #56]	@ (8001680 <HAL_InitTick+0x3c>)
 8001648:	4b0e      	ldr	r3, [pc, #56]	@ (8001684 <HAL_InitTick+0x40>)
 800164a:	7812      	ldrb	r2, [r2, #0]
{
 800164c:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800164e:	6818      	ldr	r0, [r3, #0]
 8001650:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001654:	fbb3 f3f2 	udiv	r3, r3, r2
 8001658:	fbb0 f0f3 	udiv	r0, r0, r3
 800165c:	f000 f89e 	bl	800179c <HAL_SYSTICK_Config>
 8001660:	b908      	cbnz	r0, 8001666 <HAL_InitTick+0x22>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001662:	2d0f      	cmp	r5, #15
 8001664:	d901      	bls.n	800166a <HAL_InitTick+0x26>
    return HAL_ERROR;
 8001666:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8001668:	bd38      	pop	{r3, r4, r5, pc}
 800166a:	4604      	mov	r4, r0
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800166c:	4602      	mov	r2, r0
 800166e:	4629      	mov	r1, r5
 8001670:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001674:	f000 f848 	bl	8001708 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001678:	4b03      	ldr	r3, [pc, #12]	@ (8001688 <HAL_InitTick+0x44>)
 800167a:	4620      	mov	r0, r4
 800167c:	601d      	str	r5, [r3, #0]
}
 800167e:	bd38      	pop	{r3, r4, r5, pc}
 8001680:	2000010c 	.word	0x2000010c
 8001684:	20000108 	.word	0x20000108
 8001688:	20000110 	.word	0x20000110

0800168c <HAL_Init>:
{
 800168c:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800168e:	4b0b      	ldr	r3, [pc, #44]	@ (80016bc <HAL_Init+0x30>)
 8001690:	681a      	ldr	r2, [r3, #0]
 8001692:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001696:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001698:	681a      	ldr	r2, [r3, #0]
 800169a:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800169e:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80016a0:	681a      	ldr	r2, [r3, #0]
 80016a2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80016a6:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80016a8:	2003      	movs	r0, #3
 80016aa:	f000 f81b 	bl	80016e4 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80016ae:	200f      	movs	r0, #15
 80016b0:	f7ff ffc8 	bl	8001644 <HAL_InitTick>
  HAL_MspInit();
 80016b4:	f7ff fe46 	bl	8001344 <HAL_MspInit>
}
 80016b8:	2000      	movs	r0, #0
 80016ba:	bd08      	pop	{r3, pc}
 80016bc:	40023c00 	.word	0x40023c00

080016c0 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80016c0:	4a03      	ldr	r2, [pc, #12]	@ (80016d0 <HAL_IncTick+0x10>)
 80016c2:	4b04      	ldr	r3, [pc, #16]	@ (80016d4 <HAL_IncTick+0x14>)
 80016c4:	6811      	ldr	r1, [r2, #0]
 80016c6:	781b      	ldrb	r3, [r3, #0]
 80016c8:	440b      	add	r3, r1
 80016ca:	6013      	str	r3, [r2, #0]
}
 80016cc:	4770      	bx	lr
 80016ce:	bf00      	nop
 80016d0:	200003e4 	.word	0x200003e4
 80016d4:	2000010c 	.word	0x2000010c

080016d8 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80016d8:	4b01      	ldr	r3, [pc, #4]	@ (80016e0 <HAL_GetTick+0x8>)
 80016da:	6818      	ldr	r0, [r3, #0]
}
 80016dc:	4770      	bx	lr
 80016de:	bf00      	nop
 80016e0:	200003e4 	.word	0x200003e4

080016e4 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80016e4:	4907      	ldr	r1, [pc, #28]	@ (8001704 <HAL_NVIC_SetPriorityGrouping+0x20>)
 80016e6:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80016e8:	0203      	lsls	r3, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80016ea:	f64f 00ff 	movw	r0, #63743	@ 0xf8ff
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80016ee:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80016f2:	4002      	ands	r2, r0
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80016f4:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80016f6:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80016fa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 80016fe:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8001700:	4770      	bx	lr
 8001702:	bf00      	nop
 8001704:	e000ed00 	.word	0xe000ed00

08001708 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001708:	4b1b      	ldr	r3, [pc, #108]	@ (8001778 <HAL_NVIC_SetPriority+0x70>)
 800170a:	68db      	ldr	r3, [r3, #12]
 800170c:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001710:	b500      	push	{lr}
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001712:	f1c3 0e07 	rsb	lr, r3, #7
 8001716:	f1be 0f04 	cmp.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800171a:	f103 0c04 	add.w	ip, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800171e:	bf28      	it	cs
 8001720:	f04f 0e04 	movcs.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001724:	f1bc 0f06 	cmp.w	ip, #6
 8001728:	d91c      	bls.n	8001764 <HAL_NVIC_SetPriority+0x5c>
 800172a:	f1a3 0c03 	sub.w	ip, r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800172e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001732:	fa03 f30c 	lsl.w	r3, r3, ip
 8001736:	ea22 0203 	bic.w	r2, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800173a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800173e:	fa03 f30e 	lsl.w	r3, r3, lr
 8001742:	ea21 0303 	bic.w	r3, r1, r3
 8001746:	fa03 f30c 	lsl.w	r3, r3, ip
 800174a:	4313      	orrs	r3, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800174c:	011b      	lsls	r3, r3, #4
  if ((int32_t)(IRQn) >= 0)
 800174e:	2800      	cmp	r0, #0
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001750:	b2db      	uxtb	r3, r3
  if ((int32_t)(IRQn) >= 0)
 8001752:	db0a      	blt.n	800176a <HAL_NVIC_SetPriority+0x62>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001754:	f100 4060 	add.w	r0, r0, #3758096384	@ 0xe0000000
 8001758:	f500 4061 	add.w	r0, r0, #57600	@ 0xe100
 800175c:	f880 3300 	strb.w	r3, [r0, #768]	@ 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8001760:	f85d fb04 	ldr.w	pc, [sp], #4
 8001764:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001766:	4694      	mov	ip, r2
 8001768:	e7e7      	b.n	800173a <HAL_NVIC_SetPriority+0x32>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800176a:	4a04      	ldr	r2, [pc, #16]	@ (800177c <HAL_NVIC_SetPriority+0x74>)
 800176c:	f000 000f 	and.w	r0, r0, #15
 8001770:	4402      	add	r2, r0
 8001772:	7613      	strb	r3, [r2, #24]
 8001774:	f85d fb04 	ldr.w	pc, [sp], #4
 8001778:	e000ed00 	.word	0xe000ed00
 800177c:	e000ecfc 	.word	0xe000ecfc

08001780 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8001780:	2800      	cmp	r0, #0
 8001782:	db07      	blt.n	8001794 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001784:	4a04      	ldr	r2, [pc, #16]	@ (8001798 <HAL_NVIC_EnableIRQ+0x18>)
 8001786:	0941      	lsrs	r1, r0, #5
 8001788:	2301      	movs	r3, #1
 800178a:	f000 001f 	and.w	r0, r0, #31
 800178e:	4083      	lsls	r3, r0
 8001790:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8001794:	4770      	bx	lr
 8001796:	bf00      	nop
 8001798:	e000e100 	.word	0xe000e100

0800179c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800179c:	3801      	subs	r0, #1
 800179e:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 80017a2:	d301      	bcc.n	80017a8 <HAL_SYSTICK_Config+0xc>
  {
    return (1UL);                                                   /* Reload value impossible */
 80017a4:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80017a6:	4770      	bx	lr
{
 80017a8:	b410      	push	{r4}
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80017aa:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017ae:	4c07      	ldr	r4, [pc, #28]	@ (80017cc <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80017b0:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017b2:	f04f 0cf0 	mov.w	ip, #240	@ 0xf0
 80017b6:	f884 c023 	strb.w	ip, [r4, #35]	@ 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80017ba:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80017bc:	2107      	movs	r1, #7
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80017be:	4610      	mov	r0, r2
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80017c0:	619a      	str	r2, [r3, #24]
}
 80017c2:	f85d 4b04 	ldr.w	r4, [sp], #4
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80017c6:	6119      	str	r1, [r3, #16]
 80017c8:	4770      	bx	lr
 80017ca:	bf00      	nop
 80017cc:	e000ed00 	.word	0xe000ed00

080017d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80017d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80017d4:	4bc0      	ldr	r3, [pc, #768]	@ (8001ad8 <HAL_GPIO_Init+0x308>)
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80017d6:	680a      	ldr	r2, [r1, #0]
 80017d8:	4298      	cmp	r0, r3
{
 80017da:	b085      	sub	sp, #20
  for(position = 0U; position < GPIO_NUMBER; position++)
 80017dc:	f04f 0300 	mov.w	r3, #0
    ioposition = 0x01U << position;
 80017e0:	f04f 0b01 	mov.w	fp, #1
 80017e4:	f000 80c4 	beq.w	8001970 <HAL_GPIO_Init+0x1a0>
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017e8:	f8df a2fc 	ldr.w	sl, [pc, #764]	@ 8001ae8 <HAL_GPIO_Init+0x318>

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80017ec:	4689      	mov	r9, r1
 80017ee:	e002      	b.n	80017f6 <HAL_GPIO_Init+0x26>
  for(position = 0U; position < GPIO_NUMBER; position++)
 80017f0:	3301      	adds	r3, #1
 80017f2:	2b10      	cmp	r3, #16
 80017f4:	d07b      	beq.n	80018ee <HAL_GPIO_Init+0x11e>
    ioposition = 0x01U << position;
 80017f6:	fa0b f103 	lsl.w	r1, fp, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80017fa:	ea01 0802 	and.w	r8, r1, r2
    if(iocurrent == ioposition)
 80017fe:	4391      	bics	r1, r2
 8001800:	d1f6      	bne.n	80017f0 <HAL_GPIO_Init+0x20>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001802:	f8d9 4004 	ldr.w	r4, [r9, #4]
 8001806:	f004 0c03 	and.w	ip, r4, #3
 800180a:	0059      	lsls	r1, r3, #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800180c:	2503      	movs	r5, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800180e:	f10c 36ff 	add.w	r6, ip, #4294967295	@ 0xffffffff
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001812:	408d      	lsls	r5, r1
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001814:	2e01      	cmp	r6, #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001816:	ea6f 0505 	mvn.w	r5, r5
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800181a:	d96b      	bls.n	80018f4 <HAL_GPIO_Init+0x124>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800181c:	f1bc 0f03 	cmp.w	ip, #3
 8001820:	f040 8174 	bne.w	8001b0c <HAL_GPIO_Init+0x33c>
      temp = GPIOx->MODER;
 8001824:	6806      	ldr	r6, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001826:	fa0c f101 	lsl.w	r1, ip, r1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800182a:	4035      	ands	r5, r6
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800182c:	4329      	orrs	r1, r5
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800182e:	f414 3f40 	tst.w	r4, #196608	@ 0x30000
      GPIOx->MODER = temp;
 8001832:	6001      	str	r1, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001834:	d0dc      	beq.n	80017f0 <HAL_GPIO_Init+0x20>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001836:	2100      	movs	r1, #0
 8001838:	9103      	str	r1, [sp, #12]
 800183a:	f8da 1044 	ldr.w	r1, [sl, #68]	@ 0x44
 800183e:	f441 4180 	orr.w	r1, r1, #16384	@ 0x4000
 8001842:	f8ca 1044 	str.w	r1, [sl, #68]	@ 0x44
 8001846:	f8da 1044 	ldr.w	r1, [sl, #68]	@ 0x44
 800184a:	f401 4180 	and.w	r1, r1, #16384	@ 0x4000
 800184e:	9103      	str	r1, [sp, #12]
 8001850:	9903      	ldr	r1, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2U];
 8001852:	f023 0103 	bic.w	r1, r3, #3
 8001856:	f101 4180 	add.w	r1, r1, #1073741824	@ 0x40000000
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800185a:	f003 0603 	and.w	r6, r3, #3
 800185e:	270f      	movs	r7, #15
 8001860:	f501 319c 	add.w	r1, r1, #79872	@ 0x13800
 8001864:	00b6      	lsls	r6, r6, #2
 8001866:	fa07 fc06 	lsl.w	ip, r7, r6
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800186a:	4f9c      	ldr	r7, [pc, #624]	@ (8001adc <HAL_GPIO_Init+0x30c>)
        temp = SYSCFG->EXTICR[position >> 2U];
 800186c:	688d      	ldr	r5, [r1, #8]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800186e:	42b8      	cmp	r0, r7
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001870:	ea25 050c 	bic.w	r5, r5, ip
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001874:	d076      	beq.n	8001964 <HAL_GPIO_Init+0x194>
 8001876:	4f9a      	ldr	r7, [pc, #616]	@ (8001ae0 <HAL_GPIO_Init+0x310>)
 8001878:	42b8      	cmp	r0, r7
 800187a:	f000 813b 	beq.w	8001af4 <HAL_GPIO_Init+0x324>
 800187e:	f8df c26c 	ldr.w	ip, [pc, #620]	@ 8001aec <HAL_GPIO_Init+0x31c>
 8001882:	4560      	cmp	r0, ip
 8001884:	f000 813c 	beq.w	8001b00 <HAL_GPIO_Init+0x330>
 8001888:	f8df c264 	ldr.w	ip, [pc, #612]	@ 8001af0 <HAL_GPIO_Init+0x320>
 800188c:	4560      	cmp	r0, ip
 800188e:	bf0c      	ite	eq
 8001890:	f04f 0c04 	moveq.w	ip, #4
 8001894:	f04f 0c07 	movne.w	ip, #7
 8001898:	fa0c f606 	lsl.w	r6, ip, r6
 800189c:	4335      	orrs	r5, r6
        SYSCFG->EXTICR[position >> 2U] = temp;
 800189e:	608d      	str	r5, [r1, #8]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80018a0:	4990      	ldr	r1, [pc, #576]	@ (8001ae4 <HAL_GPIO_Init+0x314>)
 80018a2:	6889      	ldr	r1, [r1, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80018a4:	02e6      	lsls	r6, r4, #11
        temp &= ~((uint32_t)iocurrent);
 80018a6:	ea6f 0508 	mvn.w	r5, r8
        {
          temp |= iocurrent;
        }
        EXTI->RTSR = temp;
 80018aa:	4e8e      	ldr	r6, [pc, #568]	@ (8001ae4 <HAL_GPIO_Init+0x314>)
        temp &= ~((uint32_t)iocurrent);
 80018ac:	bf54      	ite	pl
 80018ae:	4029      	andpl	r1, r5
          temp |= iocurrent;
 80018b0:	ea48 0101 	orrmi.w	r1, r8, r1
        EXTI->RTSR = temp;
 80018b4:	60b1      	str	r1, [r6, #8]

        temp = EXTI->FTSR;
 80018b6:	68f1      	ldr	r1, [r6, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
        {
          temp |= iocurrent;
        }
        EXTI->FTSR = temp;
 80018b8:	4e8a      	ldr	r6, [pc, #552]	@ (8001ae4 <HAL_GPIO_Init+0x314>)
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80018ba:	02a7      	lsls	r7, r4, #10
        temp &= ~((uint32_t)iocurrent);
 80018bc:	bf54      	ite	pl
 80018be:	4029      	andpl	r1, r5
          temp |= iocurrent;
 80018c0:	ea48 0101 	orrmi.w	r1, r8, r1
        EXTI->FTSR = temp;
 80018c4:	60f1      	str	r1, [r6, #12]

        temp = EXTI->EMR;
 80018c6:	6871      	ldr	r1, [r6, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80018c8:	03a6      	lsls	r6, r4, #14
        {
          temp |= iocurrent;
        }
        EXTI->EMR = temp;
 80018ca:	4e86      	ldr	r6, [pc, #536]	@ (8001ae4 <HAL_GPIO_Init+0x314>)
        temp &= ~((uint32_t)iocurrent);
 80018cc:	bf54      	ite	pl
 80018ce:	4029      	andpl	r1, r5
          temp |= iocurrent;
 80018d0:	ea48 0101 	orrmi.w	r1, r8, r1
        EXTI->EMR = temp;
 80018d4:	6071      	str	r1, [r6, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80018d6:	6831      	ldr	r1, [r6, #0]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80018d8:	03e4      	lsls	r4, r4, #15
  for(position = 0U; position < GPIO_NUMBER; position++)
 80018da:	f103 0301 	add.w	r3, r3, #1
        {
          temp |= iocurrent;
        }
        EXTI->IMR = temp;
 80018de:	4c81      	ldr	r4, [pc, #516]	@ (8001ae4 <HAL_GPIO_Init+0x314>)
        temp &= ~((uint32_t)iocurrent);
 80018e0:	bf54      	ite	pl
 80018e2:	4029      	andpl	r1, r5
          temp |= iocurrent;
 80018e4:	ea48 0101 	orrmi.w	r1, r8, r1
  for(position = 0U; position < GPIO_NUMBER; position++)
 80018e8:	2b10      	cmp	r3, #16
        EXTI->IMR = temp;
 80018ea:	6021      	str	r1, [r4, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80018ec:	d183      	bne.n	80017f6 <HAL_GPIO_Init+0x26>
      }
    }
  }
}
 80018ee:	b005      	add	sp, #20
 80018f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp = GPIOx->OSPEEDR; 
 80018f4:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80018f6:	ea06 0e05 	and.w	lr, r6, r5
        temp |= (GPIO_Init->Speed << (position * 2U));
 80018fa:	f8d9 600c 	ldr.w	r6, [r9, #12]
 80018fe:	408e      	lsls	r6, r1
 8001900:	ea46 060e 	orr.w	r6, r6, lr
        GPIOx->OSPEEDR = temp;
 8001904:	6086      	str	r6, [r0, #8]
        temp = GPIOx->OTYPER;
 8001906:	6846      	ldr	r6, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001908:	ea26 0e08 	bic.w	lr, r6, r8
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800190c:	f3c4 1600 	ubfx	r6, r4, #4, #1
 8001910:	409e      	lsls	r6, r3
 8001912:	ea46 060e 	orr.w	r6, r6, lr
        GPIOx->OTYPER = temp;
 8001916:	6046      	str	r6, [r0, #4]
        temp = GPIOx->PUPDR;
 8001918:	68c6      	ldr	r6, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800191a:	ea06 0e05 	and.w	lr, r6, r5
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800191e:	f8d9 6008 	ldr.w	r6, [r9, #8]
 8001922:	408e      	lsls	r6, r1
 8001924:	ea46 060e 	orr.w	r6, r6, lr
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001928:	f1bc 0f02 	cmp.w	ip, #2
        GPIOx->PUPDR = temp;
 800192c:	60c6      	str	r6, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800192e:	f47f af79 	bne.w	8001824 <HAL_GPIO_Init+0x54>
        temp = GPIOx->AFR[position >> 3U];
 8001932:	08de      	lsrs	r6, r3, #3
 8001934:	eb00 0686 	add.w	r6, r0, r6, lsl #2
 8001938:	9601      	str	r6, [sp, #4]
 800193a:	6a37      	ldr	r7, [r6, #32]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800193c:	f8d9 6010 	ldr.w	r6, [r9, #16]
        temp = GPIOx->AFR[position >> 3U];
 8001940:	9700      	str	r7, [sp, #0]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001942:	f003 0e07 	and.w	lr, r3, #7
 8001946:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 800194a:	270f      	movs	r7, #15
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800194c:	fa06 f60e 	lsl.w	r6, r6, lr
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001950:	fa07 fe0e 	lsl.w	lr, r7, lr
 8001954:	9f00      	ldr	r7, [sp, #0]
 8001956:	ea27 0e0e 	bic.w	lr, r7, lr
        GPIOx->AFR[position >> 3U] = temp;
 800195a:	9f01      	ldr	r7, [sp, #4]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800195c:	ea46 060e 	orr.w	r6, r6, lr
        GPIOx->AFR[position >> 3U] = temp;
 8001960:	623e      	str	r6, [r7, #32]
 8001962:	e75f      	b.n	8001824 <HAL_GPIO_Init+0x54>
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001964:	f04f 0c01 	mov.w	ip, #1
 8001968:	fa0c f606 	lsl.w	r6, ip, r6
 800196c:	4335      	orrs	r5, r6
 800196e:	e796      	b.n	800189e <HAL_GPIO_Init+0xce>
        temp = EXTI->RTSR;
 8001970:	f8df 8170 	ldr.w	r8, [pc, #368]	@ 8001ae4 <HAL_GPIO_Init+0x314>
 8001974:	e002      	b.n	800197c <HAL_GPIO_Init+0x1ac>
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001976:	3301      	adds	r3, #1
 8001978:	2b10      	cmp	r3, #16
 800197a:	d0b8      	beq.n	80018ee <HAL_GPIO_Init+0x11e>
    ioposition = 0x01U << position;
 800197c:	fa0b f403 	lsl.w	r4, fp, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001980:	ea02 0604 	and.w	r6, r2, r4
    if(iocurrent == ioposition)
 8001984:	4394      	bics	r4, r2
 8001986:	d1f6      	bne.n	8001976 <HAL_GPIO_Init+0x1a6>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001988:	684d      	ldr	r5, [r1, #4]
 800198a:	f005 0403 	and.w	r4, r5, #3
 800198e:	9400      	str	r4, [sp, #0]
 8001990:	005f      	lsls	r7, r3, #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001992:	2403      	movs	r4, #3
 8001994:	fa04 fc07 	lsl.w	ip, r4, r7
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001998:	9c00      	ldr	r4, [sp, #0]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800199a:	ea6f 0a0c 	mvn.w	sl, ip
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800199e:	f104 3cff 	add.w	ip, r4, #4294967295	@ 0xffffffff
 80019a2:	f1bc 0f01 	cmp.w	ip, #1
 80019a6:	d94c      	bls.n	8001a42 <HAL_GPIO_Init+0x272>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80019a8:	2c03      	cmp	r4, #3
 80019aa:	f040 80b9 	bne.w	8001b20 <HAL_GPIO_Init+0x350>
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80019ae:	9c00      	ldr	r4, [sp, #0]
 80019b0:	40bc      	lsls	r4, r7
      temp = GPIOx->MODER;
 80019b2:	6807      	ldr	r7, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80019b4:	ea07 070a 	and.w	r7, r7, sl
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80019b8:	433c      	orrs	r4, r7
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80019ba:	f415 3f40 	tst.w	r5, #196608	@ 0x30000
      GPIOx->MODER = temp;
 80019be:	6004      	str	r4, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80019c0:	d0d9      	beq.n	8001976 <HAL_GPIO_Init+0x1a6>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019c2:	4f49      	ldr	r7, [pc, #292]	@ (8001ae8 <HAL_GPIO_Init+0x318>)
 80019c4:	2400      	movs	r4, #0
 80019c6:	9403      	str	r4, [sp, #12]
 80019c8:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 80019ca:	f444 4480 	orr.w	r4, r4, #16384	@ 0x4000
 80019ce:	647c      	str	r4, [r7, #68]	@ 0x44
 80019d0:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 80019d2:	f404 4480 	and.w	r4, r4, #16384	@ 0x4000
 80019d6:	9403      	str	r4, [sp, #12]
 80019d8:	9c03      	ldr	r4, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2U];
 80019da:	f023 0403 	bic.w	r4, r3, #3
 80019de:	f104 4480 	add.w	r4, r4, #1073741824	@ 0x40000000
 80019e2:	f504 349c 	add.w	r4, r4, #79872	@ 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80019e6:	f003 0703 	and.w	r7, r3, #3
 80019ea:	f04f 0c0f 	mov.w	ip, #15
 80019ee:	00bf      	lsls	r7, r7, #2
 80019f0:	fa0c f707 	lsl.w	r7, ip, r7
        temp = SYSCFG->EXTICR[position >> 2U];
 80019f4:	f8d4 c008 	ldr.w	ip, [r4, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80019f8:	ea2c 0707 	bic.w	r7, ip, r7
        SYSCFG->EXTICR[position >> 2U] = temp;
 80019fc:	60a7      	str	r7, [r4, #8]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80019fe:	f415 1f80 	tst.w	r5, #1048576	@ 0x100000
        temp = EXTI->RTSR;
 8001a02:	f8d8 4008 	ldr.w	r4, [r8, #8]
        temp &= ~((uint32_t)iocurrent);
 8001a06:	ea6f 0706 	mvn.w	r7, r6
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001a0a:	d162      	bne.n	8001ad2 <HAL_GPIO_Init+0x302>
        temp &= ~((uint32_t)iocurrent);
 8001a0c:	403c      	ands	r4, r7
        EXTI->RTSR = temp;
 8001a0e:	f8c8 4008 	str.w	r4, [r8, #8]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001a12:	f415 1f00 	tst.w	r5, #2097152	@ 0x200000
        temp = EXTI->FTSR;
 8001a16:	f8d8 400c 	ldr.w	r4, [r8, #12]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001a1a:	d158      	bne.n	8001ace <HAL_GPIO_Init+0x2fe>
        temp &= ~((uint32_t)iocurrent);
 8001a1c:	403c      	ands	r4, r7
        EXTI->FTSR = temp;
 8001a1e:	f8c8 400c 	str.w	r4, [r8, #12]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001a22:	f415 3f00 	tst.w	r5, #131072	@ 0x20000
        temp = EXTI->EMR;
 8001a26:	f8d8 4004 	ldr.w	r4, [r8, #4]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001a2a:	d14e      	bne.n	8001aca <HAL_GPIO_Init+0x2fa>
        temp &= ~((uint32_t)iocurrent);
 8001a2c:	403c      	ands	r4, r7
        EXTI->EMR = temp;
 8001a2e:	f8c8 4004 	str.w	r4, [r8, #4]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001a32:	03ed      	lsls	r5, r5, #15
        temp = EXTI->IMR;
 8001a34:	f8d8 4000 	ldr.w	r4, [r8]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001a38:	d445      	bmi.n	8001ac6 <HAL_GPIO_Init+0x2f6>
        temp &= ~((uint32_t)iocurrent);
 8001a3a:	403c      	ands	r4, r7
        EXTI->IMR = temp;
 8001a3c:	f8c8 4000 	str.w	r4, [r8]
 8001a40:	e799      	b.n	8001976 <HAL_GPIO_Init+0x1a6>
        temp = GPIOx->OSPEEDR; 
 8001a42:	f8d0 e008 	ldr.w	lr, [r0, #8]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001a46:	68cc      	ldr	r4, [r1, #12]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001a48:	ea0a 0e0e 	and.w	lr, sl, lr
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001a4c:	fa04 fc07 	lsl.w	ip, r4, r7
 8001a50:	ea4c 0c0e 	orr.w	ip, ip, lr
        GPIOx->OSPEEDR = temp;
 8001a54:	f8c0 c008 	str.w	ip, [r0, #8]
        temp = GPIOx->OTYPER;
 8001a58:	f8d0 e004 	ldr.w	lr, [r0, #4]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001a5c:	f3c5 1c00 	ubfx	ip, r5, #4, #1
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001a60:	ea2e 0e06 	bic.w	lr, lr, r6
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001a64:	fa0c fc03 	lsl.w	ip, ip, r3
 8001a68:	ea4c 0c0e 	orr.w	ip, ip, lr
        GPIOx->OTYPER = temp;
 8001a6c:	f8c0 c004 	str.w	ip, [r0, #4]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001a70:	688c      	ldr	r4, [r1, #8]
        temp = GPIOx->PUPDR;
 8001a72:	f8d0 e00c 	ldr.w	lr, [r0, #12]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001a76:	fa04 fc07 	lsl.w	ip, r4, r7
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a7a:	9c00      	ldr	r4, [sp, #0]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001a7c:	ea0a 0e0e 	and.w	lr, sl, lr
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001a80:	ea4c 0c0e 	orr.w	ip, ip, lr
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a84:	2c02      	cmp	r4, #2
        GPIOx->PUPDR = temp;
 8001a86:	f8c0 c00c 	str.w	ip, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a8a:	d190      	bne.n	80019ae <HAL_GPIO_Init+0x1de>
        temp = GPIOx->AFR[position >> 3U];
 8001a8c:	ea4f 0cd3 	mov.w	ip, r3, lsr #3
 8001a90:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001a94:	690c      	ldr	r4, [r1, #16]
 8001a96:	f10c 4c80 	add.w	ip, ip, #1073741824	@ 0x40000000
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001a9a:	f003 0e07 	and.w	lr, r3, #7
 8001a9e:	f50c 3c00 	add.w	ip, ip, #131072	@ 0x20000
 8001aa2:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001aa6:	fa04 f40e 	lsl.w	r4, r4, lr
        temp = GPIOx->AFR[position >> 3U];
 8001aaa:	f8dc 9020 	ldr.w	r9, [ip, #32]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001aae:	9401      	str	r4, [sp, #4]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001ab0:	240f      	movs	r4, #15
 8001ab2:	fa04 fe0e 	lsl.w	lr, r4, lr
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001ab6:	9c01      	ldr	r4, [sp, #4]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001ab8:	ea29 090e 	bic.w	r9, r9, lr
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001abc:	ea44 0e09 	orr.w	lr, r4, r9
        GPIOx->AFR[position >> 3U] = temp;
 8001ac0:	f8cc e020 	str.w	lr, [ip, #32]
 8001ac4:	e773      	b.n	80019ae <HAL_GPIO_Init+0x1de>
          temp |= iocurrent;
 8001ac6:	4334      	orrs	r4, r6
 8001ac8:	e7b8      	b.n	8001a3c <HAL_GPIO_Init+0x26c>
          temp |= iocurrent;
 8001aca:	4334      	orrs	r4, r6
 8001acc:	e7af      	b.n	8001a2e <HAL_GPIO_Init+0x25e>
          temp |= iocurrent;
 8001ace:	4334      	orrs	r4, r6
 8001ad0:	e7a5      	b.n	8001a1e <HAL_GPIO_Init+0x24e>
          temp |= iocurrent;
 8001ad2:	4334      	orrs	r4, r6
 8001ad4:	e79b      	b.n	8001a0e <HAL_GPIO_Init+0x23e>
 8001ad6:	bf00      	nop
 8001ad8:	40020000 	.word	0x40020000
 8001adc:	40020400 	.word	0x40020400
 8001ae0:	40020800 	.word	0x40020800
 8001ae4:	40013c00 	.word	0x40013c00
 8001ae8:	40023800 	.word	0x40023800
 8001aec:	40020c00 	.word	0x40020c00
 8001af0:	40021000 	.word	0x40021000
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001af4:	f04f 0c02 	mov.w	ip, #2
 8001af8:	fa0c f606 	lsl.w	r6, ip, r6
 8001afc:	4335      	orrs	r5, r6
 8001afe:	e6ce      	b.n	800189e <HAL_GPIO_Init+0xce>
 8001b00:	f04f 0c03 	mov.w	ip, #3
 8001b04:	fa0c f606 	lsl.w	r6, ip, r6
 8001b08:	4335      	orrs	r5, r6
 8001b0a:	e6c8      	b.n	800189e <HAL_GPIO_Init+0xce>
        temp = GPIOx->PUPDR;
 8001b0c:	68c6      	ldr	r6, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001b0e:	ea06 0e05 	and.w	lr, r6, r5
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001b12:	f8d9 6008 	ldr.w	r6, [r9, #8]
 8001b16:	408e      	lsls	r6, r1
 8001b18:	ea46 060e 	orr.w	r6, r6, lr
        GPIOx->PUPDR = temp;
 8001b1c:	60c6      	str	r6, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b1e:	e681      	b.n	8001824 <HAL_GPIO_Init+0x54>
        temp = GPIOx->PUPDR;
 8001b20:	f8df e018 	ldr.w	lr, [pc, #24]	@ 8001b3c <HAL_GPIO_Init+0x36c>
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001b24:	688c      	ldr	r4, [r1, #8]
        temp = GPIOx->PUPDR;
 8001b26:	f8de 900c 	ldr.w	r9, [lr, #12]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001b2a:	fa04 fc07 	lsl.w	ip, r4, r7
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001b2e:	ea0a 0909 	and.w	r9, sl, r9
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001b32:	ea4c 0c09 	orr.w	ip, ip, r9
        GPIOx->PUPDR = temp;
 8001b36:	f8ce c00c 	str.w	ip, [lr, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b3a:	e738      	b.n	80019ae <HAL_GPIO_Init+0x1de>
 8001b3c:	40020000 	.word	0x40020000

08001b40 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001b40:	b902      	cbnz	r2, 8001b44 <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001b42:	0409      	lsls	r1, r1, #16
 8001b44:	6181      	str	r1, [r0, #24]
  }
}
 8001b46:	4770      	bx	lr

08001b48 <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001b48:	6943      	ldr	r3, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001b4a:	ea01 0203 	and.w	r2, r1, r3
 8001b4e:	ea21 0103 	bic.w	r1, r1, r3
 8001b52:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8001b56:	6181      	str	r1, [r0, #24]
}
 8001b58:	4770      	bx	lr
 8001b5a:	bf00      	nop

08001b5c <HAL_RCC_OscConfig>:
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001b5c:	2800      	cmp	r0, #0
 8001b5e:	f000 81d8 	beq.w	8001f12 <HAL_RCC_OscConfig+0x3b6>
{
 8001b62:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b66:	6803      	ldr	r3, [r0, #0]
 8001b68:	07dd      	lsls	r5, r3, #31
{
 8001b6a:	b082      	sub	sp, #8
 8001b6c:	4604      	mov	r4, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b6e:	d52f      	bpl.n	8001bd0 <HAL_RCC_OscConfig+0x74>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001b70:	499d      	ldr	r1, [pc, #628]	@ (8001de8 <HAL_RCC_OscConfig+0x28c>)
 8001b72:	688a      	ldr	r2, [r1, #8]
 8001b74:	f002 020c 	and.w	r2, r2, #12
 8001b78:	2a04      	cmp	r2, #4
 8001b7a:	f000 80ec 	beq.w	8001d56 <HAL_RCC_OscConfig+0x1fa>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001b7e:	688a      	ldr	r2, [r1, #8]
 8001b80:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001b84:	2a08      	cmp	r2, #8
 8001b86:	f000 80e2 	beq.w	8001d4e <HAL_RCC_OscConfig+0x1f2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b8a:	6863      	ldr	r3, [r4, #4]
 8001b8c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001b90:	f000 80eb 	beq.w	8001d6a <HAL_RCC_OscConfig+0x20e>
 8001b94:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001b98:	f000 8173 	beq.w	8001e82 <HAL_RCC_OscConfig+0x326>
 8001b9c:	4d92      	ldr	r5, [pc, #584]	@ (8001de8 <HAL_RCC_OscConfig+0x28c>)
 8001b9e:	682a      	ldr	r2, [r5, #0]
 8001ba0:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8001ba4:	602a      	str	r2, [r5, #0]
 8001ba6:	682a      	ldr	r2, [r5, #0]
 8001ba8:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8001bac:	602a      	str	r2, [r5, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	f040 80e0 	bne.w	8001d74 <HAL_RCC_OscConfig+0x218>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bb4:	f7ff fd90 	bl	80016d8 <HAL_GetTick>
 8001bb8:	4606      	mov	r6, r0

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001bba:	e005      	b.n	8001bc8 <HAL_RCC_OscConfig+0x6c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001bbc:	f7ff fd8c 	bl	80016d8 <HAL_GetTick>
 8001bc0:	1b80      	subs	r0, r0, r6
 8001bc2:	2864      	cmp	r0, #100	@ 0x64
 8001bc4:	f200 8100 	bhi.w	8001dc8 <HAL_RCC_OscConfig+0x26c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001bc8:	682b      	ldr	r3, [r5, #0]
 8001bca:	039f      	lsls	r7, r3, #14
 8001bcc:	d4f6      	bmi.n	8001bbc <HAL_RCC_OscConfig+0x60>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001bce:	6823      	ldr	r3, [r4, #0]
 8001bd0:	079d      	lsls	r5, r3, #30
 8001bd2:	d528      	bpl.n	8001c26 <HAL_RCC_OscConfig+0xca>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001bd4:	4a84      	ldr	r2, [pc, #528]	@ (8001de8 <HAL_RCC_OscConfig+0x28c>)
 8001bd6:	6891      	ldr	r1, [r2, #8]
 8001bd8:	f011 0f0c 	tst.w	r1, #12
 8001bdc:	f000 809b 	beq.w	8001d16 <HAL_RCC_OscConfig+0x1ba>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001be0:	6891      	ldr	r1, [r2, #8]
 8001be2:	f001 010c 	and.w	r1, r1, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001be6:	2908      	cmp	r1, #8
 8001be8:	f000 8091 	beq.w	8001d0e <HAL_RCC_OscConfig+0x1b2>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001bec:	68e3      	ldr	r3, [r4, #12]
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	f000 810c 	beq.w	8001e0c <HAL_RCC_OscConfig+0x2b0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001bf4:	4b7d      	ldr	r3, [pc, #500]	@ (8001dec <HAL_RCC_OscConfig+0x290>)

        /* Get Start Tick*/
        tickstart = HAL_GetTick();

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001bf6:	4e7c      	ldr	r6, [pc, #496]	@ (8001de8 <HAL_RCC_OscConfig+0x28c>)
        __HAL_RCC_HSI_ENABLE();
 8001bf8:	2201      	movs	r2, #1
 8001bfa:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001bfc:	f7ff fd6c 	bl	80016d8 <HAL_GetTick>
 8001c00:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c02:	e005      	b.n	8001c10 <HAL_RCC_OscConfig+0xb4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001c04:	f7ff fd68 	bl	80016d8 <HAL_GetTick>
 8001c08:	1b40      	subs	r0, r0, r5
 8001c0a:	2802      	cmp	r0, #2
 8001c0c:	f200 80dc 	bhi.w	8001dc8 <HAL_RCC_OscConfig+0x26c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c10:	6833      	ldr	r3, [r6, #0]
 8001c12:	079f      	lsls	r7, r3, #30
 8001c14:	d5f6      	bpl.n	8001c04 <HAL_RCC_OscConfig+0xa8>
            return HAL_TIMEOUT;
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c16:	6833      	ldr	r3, [r6, #0]
 8001c18:	6922      	ldr	r2, [r4, #16]
 8001c1a:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8001c1e:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8001c22:	6033      	str	r3, [r6, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c24:	6823      	ldr	r3, [r4, #0]
 8001c26:	071a      	lsls	r2, r3, #28
 8001c28:	d45c      	bmi.n	8001ce4 <HAL_RCC_OscConfig+0x188>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c2a:	075d      	lsls	r5, r3, #29
 8001c2c:	d53a      	bpl.n	8001ca4 <HAL_RCC_OscConfig+0x148>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c2e:	4a6e      	ldr	r2, [pc, #440]	@ (8001de8 <HAL_RCC_OscConfig+0x28c>)
 8001c30:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8001c32:	f013 5380 	ands.w	r3, r3, #268435456	@ 0x10000000
 8001c36:	f040 8088 	bne.w	8001d4a <HAL_RCC_OscConfig+0x1ee>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c3a:	9301      	str	r3, [sp, #4]
 8001c3c:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8001c3e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001c42:	6413      	str	r3, [r2, #64]	@ 0x40
 8001c44:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8001c46:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c4a:	9301      	str	r3, [sp, #4]
 8001c4c:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8001c4e:	2501      	movs	r5, #1
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c50:	4e67      	ldr	r6, [pc, #412]	@ (8001df0 <HAL_RCC_OscConfig+0x294>)
 8001c52:	6833      	ldr	r3, [r6, #0]
 8001c54:	05d8      	lsls	r0, r3, #23
 8001c56:	f140 80a7 	bpl.w	8001da8 <HAL_RCC_OscConfig+0x24c>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c5a:	68a3      	ldr	r3, [r4, #8]
 8001c5c:	2b01      	cmp	r3, #1
 8001c5e:	f000 80b7 	beq.w	8001dd0 <HAL_RCC_OscConfig+0x274>
 8001c62:	2b05      	cmp	r3, #5
 8001c64:	f000 811d 	beq.w	8001ea2 <HAL_RCC_OscConfig+0x346>
 8001c68:	4e5f      	ldr	r6, [pc, #380]	@ (8001de8 <HAL_RCC_OscConfig+0x28c>)
 8001c6a:	6f32      	ldr	r2, [r6, #112]	@ 0x70
 8001c6c:	f022 0201 	bic.w	r2, r2, #1
 8001c70:	6732      	str	r2, [r6, #112]	@ 0x70
 8001c72:	6f32      	ldr	r2, [r6, #112]	@ 0x70
 8001c74:	f022 0204 	bic.w	r2, r2, #4
 8001c78:	6732      	str	r2, [r6, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	f040 80ad 	bne.w	8001dda <HAL_RCC_OscConfig+0x27e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c80:	f7ff fd2a 	bl	80016d8 <HAL_GetTick>

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001c84:	f241 3888 	movw	r8, #5000	@ 0x1388
      tickstart = HAL_GetTick();
 8001c88:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c8a:	e005      	b.n	8001c98 <HAL_RCC_OscConfig+0x13c>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001c8c:	f7ff fd24 	bl	80016d8 <HAL_GetTick>
 8001c90:	1bc0      	subs	r0, r0, r7
 8001c92:	4540      	cmp	r0, r8
 8001c94:	f200 8098 	bhi.w	8001dc8 <HAL_RCC_OscConfig+0x26c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c98:	6f33      	ldr	r3, [r6, #112]	@ 0x70
 8001c9a:	079b      	lsls	r3, r3, #30
 8001c9c:	d4f6      	bmi.n	8001c8c <HAL_RCC_OscConfig+0x130>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001c9e:	2d00      	cmp	r5, #0
 8001ca0:	f040 80f9 	bne.w	8001e96 <HAL_RCC_OscConfig+0x33a>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001ca4:	69a3      	ldr	r3, [r4, #24]
 8001ca6:	b1cb      	cbz	r3, 8001cdc <HAL_RCC_OscConfig+0x180>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001ca8:	4d4f      	ldr	r5, [pc, #316]	@ (8001de8 <HAL_RCC_OscConfig+0x28c>)
 8001caa:	68aa      	ldr	r2, [r5, #8]
 8001cac:	f002 020c 	and.w	r2, r2, #12
 8001cb0:	2a08      	cmp	r2, #8
 8001cb2:	f000 80bc 	beq.w	8001e2e <HAL_RCC_OscConfig+0x2d2>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001cb6:	2b02      	cmp	r3, #2
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001cb8:	4b4c      	ldr	r3, [pc, #304]	@ (8001dec <HAL_RCC_OscConfig+0x290>)
 8001cba:	f04f 0200 	mov.w	r2, #0
 8001cbe:	661a      	str	r2, [r3, #96]	@ 0x60
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001cc0:	f000 80f9 	beq.w	8001eb6 <HAL_RCC_OscConfig+0x35a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cc4:	f7ff fd08 	bl	80016d8 <HAL_GetTick>
 8001cc8:	4604      	mov	r4, r0

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001cca:	e004      	b.n	8001cd6 <HAL_RCC_OscConfig+0x17a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ccc:	f7ff fd04 	bl	80016d8 <HAL_GetTick>
 8001cd0:	1b00      	subs	r0, r0, r4
 8001cd2:	2802      	cmp	r0, #2
 8001cd4:	d878      	bhi.n	8001dc8 <HAL_RCC_OscConfig+0x26c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001cd6:	682b      	ldr	r3, [r5, #0]
 8001cd8:	019b      	lsls	r3, r3, #6
 8001cda:	d4f7      	bmi.n	8001ccc <HAL_RCC_OscConfig+0x170>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 8001cdc:	2000      	movs	r0, #0
}
 8001cde:	b002      	add	sp, #8
 8001ce0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001ce4:	6963      	ldr	r3, [r4, #20]
 8001ce6:	b1fb      	cbz	r3, 8001d28 <HAL_RCC_OscConfig+0x1cc>
      __HAL_RCC_LSI_ENABLE();
 8001ce8:	4b40      	ldr	r3, [pc, #256]	@ (8001dec <HAL_RCC_OscConfig+0x290>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001cea:	4e3f      	ldr	r6, [pc, #252]	@ (8001de8 <HAL_RCC_OscConfig+0x28c>)
      __HAL_RCC_LSI_ENABLE();
 8001cec:	2201      	movs	r2, #1
 8001cee:	f8c3 2e80 	str.w	r2, [r3, #3712]	@ 0xe80
      tickstart = HAL_GetTick();
 8001cf2:	f7ff fcf1 	bl	80016d8 <HAL_GetTick>
 8001cf6:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001cf8:	e004      	b.n	8001d04 <HAL_RCC_OscConfig+0x1a8>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001cfa:	f7ff fced 	bl	80016d8 <HAL_GetTick>
 8001cfe:	1b40      	subs	r0, r0, r5
 8001d00:	2802      	cmp	r0, #2
 8001d02:	d861      	bhi.n	8001dc8 <HAL_RCC_OscConfig+0x26c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d04:	6f73      	ldr	r3, [r6, #116]	@ 0x74
 8001d06:	079b      	lsls	r3, r3, #30
 8001d08:	d5f7      	bpl.n	8001cfa <HAL_RCC_OscConfig+0x19e>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d0a:	6823      	ldr	r3, [r4, #0]
 8001d0c:	e78d      	b.n	8001c2a <HAL_RCC_OscConfig+0xce>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001d0e:	6852      	ldr	r2, [r2, #4]
 8001d10:	0251      	lsls	r1, r2, #9
 8001d12:	f53f af6b 	bmi.w	8001bec <HAL_RCC_OscConfig+0x90>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d16:	4a34      	ldr	r2, [pc, #208]	@ (8001de8 <HAL_RCC_OscConfig+0x28c>)
 8001d18:	6812      	ldr	r2, [r2, #0]
 8001d1a:	0792      	lsls	r2, r2, #30
 8001d1c:	d538      	bpl.n	8001d90 <HAL_RCC_OscConfig+0x234>
 8001d1e:	68e2      	ldr	r2, [r4, #12]
 8001d20:	2a01      	cmp	r2, #1
 8001d22:	d035      	beq.n	8001d90 <HAL_RCC_OscConfig+0x234>
    return HAL_ERROR;
 8001d24:	2001      	movs	r0, #1
 8001d26:	e7da      	b.n	8001cde <HAL_RCC_OscConfig+0x182>
      __HAL_RCC_LSI_DISABLE();
 8001d28:	4a30      	ldr	r2, [pc, #192]	@ (8001dec <HAL_RCC_OscConfig+0x290>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d2a:	4e2f      	ldr	r6, [pc, #188]	@ (8001de8 <HAL_RCC_OscConfig+0x28c>)
      __HAL_RCC_LSI_DISABLE();
 8001d2c:	f8c2 3e80 	str.w	r3, [r2, #3712]	@ 0xe80
      tickstart = HAL_GetTick();
 8001d30:	f7ff fcd2 	bl	80016d8 <HAL_GetTick>
 8001d34:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d36:	e004      	b.n	8001d42 <HAL_RCC_OscConfig+0x1e6>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001d38:	f7ff fcce 	bl	80016d8 <HAL_GetTick>
 8001d3c:	1b40      	subs	r0, r0, r5
 8001d3e:	2802      	cmp	r0, #2
 8001d40:	d842      	bhi.n	8001dc8 <HAL_RCC_OscConfig+0x26c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d42:	6f73      	ldr	r3, [r6, #116]	@ 0x74
 8001d44:	079f      	lsls	r7, r3, #30
 8001d46:	d4f7      	bmi.n	8001d38 <HAL_RCC_OscConfig+0x1dc>
 8001d48:	e7df      	b.n	8001d0a <HAL_RCC_OscConfig+0x1ae>
    FlagStatus       pwrclkchanged = RESET;
 8001d4a:	2500      	movs	r5, #0
 8001d4c:	e780      	b.n	8001c50 <HAL_RCC_OscConfig+0xf4>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001d4e:	684a      	ldr	r2, [r1, #4]
 8001d50:	0251      	lsls	r1, r2, #9
 8001d52:	f57f af1a 	bpl.w	8001b8a <HAL_RCC_OscConfig+0x2e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d56:	4a24      	ldr	r2, [pc, #144]	@ (8001de8 <HAL_RCC_OscConfig+0x28c>)
 8001d58:	6812      	ldr	r2, [r2, #0]
 8001d5a:	0392      	lsls	r2, r2, #14
 8001d5c:	f57f af38 	bpl.w	8001bd0 <HAL_RCC_OscConfig+0x74>
 8001d60:	6862      	ldr	r2, [r4, #4]
 8001d62:	2a00      	cmp	r2, #0
 8001d64:	f47f af34 	bne.w	8001bd0 <HAL_RCC_OscConfig+0x74>
 8001d68:	e7dc      	b.n	8001d24 <HAL_RCC_OscConfig+0x1c8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d6a:	4a1f      	ldr	r2, [pc, #124]	@ (8001de8 <HAL_RCC_OscConfig+0x28c>)
 8001d6c:	6813      	ldr	r3, [r2, #0]
 8001d6e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001d72:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8001d74:	f7ff fcb0 	bl	80016d8 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d78:	4e1b      	ldr	r6, [pc, #108]	@ (8001de8 <HAL_RCC_OscConfig+0x28c>)
        tickstart = HAL_GetTick();
 8001d7a:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d7c:	e004      	b.n	8001d88 <HAL_RCC_OscConfig+0x22c>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001d7e:	f7ff fcab 	bl	80016d8 <HAL_GetTick>
 8001d82:	1b40      	subs	r0, r0, r5
 8001d84:	2864      	cmp	r0, #100	@ 0x64
 8001d86:	d81f      	bhi.n	8001dc8 <HAL_RCC_OscConfig+0x26c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d88:	6833      	ldr	r3, [r6, #0]
 8001d8a:	039b      	lsls	r3, r3, #14
 8001d8c:	d5f7      	bpl.n	8001d7e <HAL_RCC_OscConfig+0x222>
 8001d8e:	e71e      	b.n	8001bce <HAL_RCC_OscConfig+0x72>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d90:	4915      	ldr	r1, [pc, #84]	@ (8001de8 <HAL_RCC_OscConfig+0x28c>)
 8001d92:	6920      	ldr	r0, [r4, #16]
 8001d94:	680a      	ldr	r2, [r1, #0]
 8001d96:	f022 02f8 	bic.w	r2, r2, #248	@ 0xf8
 8001d9a:	ea42 02c0 	orr.w	r2, r2, r0, lsl #3
 8001d9e:	600a      	str	r2, [r1, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001da0:	071a      	lsls	r2, r3, #28
 8001da2:	f57f af42 	bpl.w	8001c2a <HAL_RCC_OscConfig+0xce>
 8001da6:	e79d      	b.n	8001ce4 <HAL_RCC_OscConfig+0x188>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001da8:	6833      	ldr	r3, [r6, #0]
 8001daa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001dae:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8001db0:	f7ff fc92 	bl	80016d8 <HAL_GetTick>
 8001db4:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001db6:	6833      	ldr	r3, [r6, #0]
 8001db8:	05d9      	lsls	r1, r3, #23
 8001dba:	f53f af4e 	bmi.w	8001c5a <HAL_RCC_OscConfig+0xfe>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001dbe:	f7ff fc8b 	bl	80016d8 <HAL_GetTick>
 8001dc2:	1bc0      	subs	r0, r0, r7
 8001dc4:	2802      	cmp	r0, #2
 8001dc6:	d9f6      	bls.n	8001db6 <HAL_RCC_OscConfig+0x25a>
            return HAL_TIMEOUT;
 8001dc8:	2003      	movs	r0, #3
}
 8001dca:	b002      	add	sp, #8
 8001dcc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001dd0:	4a05      	ldr	r2, [pc, #20]	@ (8001de8 <HAL_RCC_OscConfig+0x28c>)
 8001dd2:	6f13      	ldr	r3, [r2, #112]	@ 0x70
 8001dd4:	f043 0301 	orr.w	r3, r3, #1
 8001dd8:	6713      	str	r3, [r2, #112]	@ 0x70
      tickstart = HAL_GetTick();
 8001dda:	f7ff fc7d 	bl	80016d8 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001dde:	4f02      	ldr	r7, [pc, #8]	@ (8001de8 <HAL_RCC_OscConfig+0x28c>)
      tickstart = HAL_GetTick();
 8001de0:	4606      	mov	r6, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001de2:	f241 3888 	movw	r8, #5000	@ 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001de6:	e00a      	b.n	8001dfe <HAL_RCC_OscConfig+0x2a2>
 8001de8:	40023800 	.word	0x40023800
 8001dec:	42470000 	.word	0x42470000
 8001df0:	40007000 	.word	0x40007000
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001df4:	f7ff fc70 	bl	80016d8 <HAL_GetTick>
 8001df8:	1b80      	subs	r0, r0, r6
 8001dfa:	4540      	cmp	r0, r8
 8001dfc:	d8e4      	bhi.n	8001dc8 <HAL_RCC_OscConfig+0x26c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001dfe:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001e00:	079a      	lsls	r2, r3, #30
 8001e02:	d5f7      	bpl.n	8001df4 <HAL_RCC_OscConfig+0x298>
    if(pwrclkchanged == SET)
 8001e04:	2d00      	cmp	r5, #0
 8001e06:	f43f af4d 	beq.w	8001ca4 <HAL_RCC_OscConfig+0x148>
 8001e0a:	e044      	b.n	8001e96 <HAL_RCC_OscConfig+0x33a>
        __HAL_RCC_HSI_DISABLE();
 8001e0c:	4a42      	ldr	r2, [pc, #264]	@ (8001f18 <HAL_RCC_OscConfig+0x3bc>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e0e:	4e43      	ldr	r6, [pc, #268]	@ (8001f1c <HAL_RCC_OscConfig+0x3c0>)
        __HAL_RCC_HSI_DISABLE();
 8001e10:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8001e12:	f7ff fc61 	bl	80016d8 <HAL_GetTick>
 8001e16:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e18:	e004      	b.n	8001e24 <HAL_RCC_OscConfig+0x2c8>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001e1a:	f7ff fc5d 	bl	80016d8 <HAL_GetTick>
 8001e1e:	1b40      	subs	r0, r0, r5
 8001e20:	2802      	cmp	r0, #2
 8001e22:	d8d1      	bhi.n	8001dc8 <HAL_RCC_OscConfig+0x26c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e24:	6833      	ldr	r3, [r6, #0]
 8001e26:	0799      	lsls	r1, r3, #30
 8001e28:	d4f7      	bmi.n	8001e1a <HAL_RCC_OscConfig+0x2be>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e2a:	6823      	ldr	r3, [r4, #0]
 8001e2c:	e6fb      	b.n	8001c26 <HAL_RCC_OscConfig+0xca>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001e2e:	2b01      	cmp	r3, #1
 8001e30:	f43f af78 	beq.w	8001d24 <HAL_RCC_OscConfig+0x1c8>
        pll_config = RCC->PLLCFGR;
 8001e34:	686b      	ldr	r3, [r5, #4]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001e36:	69e2      	ldr	r2, [r4, #28]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e38:	f403 0180 	and.w	r1, r3, #4194304	@ 0x400000
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001e3c:	4291      	cmp	r1, r2
 8001e3e:	f47f af71 	bne.w	8001d24 <HAL_RCC_OscConfig+0x1c8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e42:	6a22      	ldr	r2, [r4, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001e44:	f003 013f 	and.w	r1, r3, #63	@ 0x3f
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e48:	4291      	cmp	r1, r2
 8001e4a:	f47f af6b 	bne.w	8001d24 <HAL_RCC_OscConfig+0x1c8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001e4e:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8001e50:	f647 72c0 	movw	r2, #32704	@ 0x7fc0
 8001e54:	401a      	ands	r2, r3
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001e56:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 8001e5a:	f47f af63 	bne.w	8001d24 <HAL_RCC_OscConfig+0x1c8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001e5e:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8001e60:	0852      	lsrs	r2, r2, #1
 8001e62:	f403 3140 	and.w	r1, r3, #196608	@ 0x30000
 8001e66:	3a01      	subs	r2, #1
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001e68:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 8001e6c:	f47f af5a 	bne.w	8001d24 <HAL_RCC_OscConfig+0x1c8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001e70:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8001e72:	f003 6370 	and.w	r3, r3, #251658240	@ 0xf000000
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001e76:	ebb3 6f02 	cmp.w	r3, r2, lsl #24
 8001e7a:	bf14      	ite	ne
 8001e7c:	2001      	movne	r0, #1
 8001e7e:	2000      	moveq	r0, #0
 8001e80:	e72d      	b.n	8001cde <HAL_RCC_OscConfig+0x182>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e82:	4b26      	ldr	r3, [pc, #152]	@ (8001f1c <HAL_RCC_OscConfig+0x3c0>)
 8001e84:	681a      	ldr	r2, [r3, #0]
 8001e86:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8001e8a:	601a      	str	r2, [r3, #0]
 8001e8c:	681a      	ldr	r2, [r3, #0]
 8001e8e:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8001e92:	601a      	str	r2, [r3, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001e94:	e76e      	b.n	8001d74 <HAL_RCC_OscConfig+0x218>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e96:	4a21      	ldr	r2, [pc, #132]	@ (8001f1c <HAL_RCC_OscConfig+0x3c0>)
 8001e98:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8001e9a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001e9e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001ea0:	e700      	b.n	8001ca4 <HAL_RCC_OscConfig+0x148>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ea2:	4b1e      	ldr	r3, [pc, #120]	@ (8001f1c <HAL_RCC_OscConfig+0x3c0>)
 8001ea4:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8001ea6:	f042 0204 	orr.w	r2, r2, #4
 8001eaa:	671a      	str	r2, [r3, #112]	@ 0x70
 8001eac:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8001eae:	f042 0201 	orr.w	r2, r2, #1
 8001eb2:	671a      	str	r2, [r3, #112]	@ 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001eb4:	e791      	b.n	8001dda <HAL_RCC_OscConfig+0x27e>
        tickstart = HAL_GetTick();
 8001eb6:	f7ff fc0f 	bl	80016d8 <HAL_GetTick>
 8001eba:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ebc:	e005      	b.n	8001eca <HAL_RCC_OscConfig+0x36e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ebe:	f7ff fc0b 	bl	80016d8 <HAL_GetTick>
 8001ec2:	1b80      	subs	r0, r0, r6
 8001ec4:	2802      	cmp	r0, #2
 8001ec6:	f63f af7f 	bhi.w	8001dc8 <HAL_RCC_OscConfig+0x26c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001eca:	682b      	ldr	r3, [r5, #0]
 8001ecc:	0199      	lsls	r1, r3, #6
 8001ece:	d4f6      	bmi.n	8001ebe <HAL_RCC_OscConfig+0x362>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001ed0:	e9d4 3107 	ldrd	r3, r1, [r4, #28]
 8001ed4:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8001ed6:	430b      	orrs	r3, r1
 8001ed8:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8001edc:	e9d4 200a 	ldrd	r2, r0, [r4, #40]	@ 0x28
 8001ee0:	0852      	lsrs	r2, r2, #1
        __HAL_RCC_PLL_ENABLE();
 8001ee2:	490d      	ldr	r1, [pc, #52]	@ (8001f18 <HAL_RCC_OscConfig+0x3bc>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001ee4:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 8001ee8:	3a01      	subs	r2, #1
 8001eea:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
        __HAL_RCC_PLL_ENABLE();
 8001eee:	2201      	movs	r2, #1
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001ef0:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8001ef2:	660a      	str	r2, [r1, #96]	@ 0x60
        tickstart = HAL_GetTick();
 8001ef4:	f7ff fbf0 	bl	80016d8 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ef8:	4d08      	ldr	r5, [pc, #32]	@ (8001f1c <HAL_RCC_OscConfig+0x3c0>)
        tickstart = HAL_GetTick();
 8001efa:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001efc:	e005      	b.n	8001f0a <HAL_RCC_OscConfig+0x3ae>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001efe:	f7ff fbeb 	bl	80016d8 <HAL_GetTick>
 8001f02:	1b00      	subs	r0, r0, r4
 8001f04:	2802      	cmp	r0, #2
 8001f06:	f63f af5f 	bhi.w	8001dc8 <HAL_RCC_OscConfig+0x26c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f0a:	682b      	ldr	r3, [r5, #0]
 8001f0c:	019a      	lsls	r2, r3, #6
 8001f0e:	d5f6      	bpl.n	8001efe <HAL_RCC_OscConfig+0x3a2>
 8001f10:	e6e4      	b.n	8001cdc <HAL_RCC_OscConfig+0x180>
    return HAL_ERROR;
 8001f12:	2001      	movs	r0, #1
}
 8001f14:	4770      	bx	lr
 8001f16:	bf00      	nop
 8001f18:	42470000 	.word	0x42470000
 8001f1c:	40023800 	.word	0x40023800

08001f20 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001f20:	4916      	ldr	r1, [pc, #88]	@ (8001f7c <HAL_RCC_GetSysClockFreq+0x5c>)
{
 8001f22:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001f24:	688b      	ldr	r3, [r1, #8]
 8001f26:	f003 030c 	and.w	r3, r3, #12
 8001f2a:	2b04      	cmp	r3, #4
 8001f2c:	d01b      	beq.n	8001f66 <HAL_RCC_GetSysClockFreq+0x46>
 8001f2e:	2b08      	cmp	r3, #8
 8001f30:	d001      	beq.n	8001f36 <HAL_RCC_GetSysClockFreq+0x16>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001f32:	4813      	ldr	r0, [pc, #76]	@ (8001f80 <HAL_RCC_GetSysClockFreq+0x60>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8001f34:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001f36:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001f38:	684b      	ldr	r3, [r1, #4]
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001f3a:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001f3c:	f413 0380 	ands.w	r3, r3, #4194304	@ 0x400000
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001f40:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001f44:	d111      	bne.n	8001f6a <HAL_RCC_GetSysClockFreq+0x4a>
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001f46:	480e      	ldr	r0, [pc, #56]	@ (8001f80 <HAL_RCC_GetSysClockFreq+0x60>)
 8001f48:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8001f4c:	fba1 0100 	umull	r0, r1, r1, r0
 8001f50:	f7fe fe32 	bl	8000bb8 <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001f54:	4b09      	ldr	r3, [pc, #36]	@ (8001f7c <HAL_RCC_GetSysClockFreq+0x5c>)
 8001f56:	685b      	ldr	r3, [r3, #4]
 8001f58:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8001f5c:	3301      	adds	r3, #1
 8001f5e:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco/pllp;
 8001f60:	fbb0 f0f3 	udiv	r0, r0, r3
}
 8001f64:	bd08      	pop	{r3, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001f66:	4807      	ldr	r0, [pc, #28]	@ (8001f84 <HAL_RCC_GetSysClockFreq+0x64>)
}
 8001f68:	bd08      	pop	{r3, pc}
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001f6a:	4806      	ldr	r0, [pc, #24]	@ (8001f84 <HAL_RCC_GetSysClockFreq+0x64>)
 8001f6c:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8001f70:	2300      	movs	r3, #0
 8001f72:	fba1 0100 	umull	r0, r1, r1, r0
 8001f76:	f7fe fe1f 	bl	8000bb8 <__aeabi_uldivmod>
 8001f7a:	e7eb      	b.n	8001f54 <HAL_RCC_GetSysClockFreq+0x34>
 8001f7c:	40023800 	.word	0x40023800
 8001f80:	00f42400 	.word	0x00f42400
 8001f84:	017d7840 	.word	0x017d7840

08001f88 <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 8001f88:	2800      	cmp	r0, #0
 8001f8a:	f000 8087 	beq.w	800209c <HAL_RCC_ClockConfig+0x114>
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001f8e:	4a48      	ldr	r2, [pc, #288]	@ (80020b0 <HAL_RCC_ClockConfig+0x128>)
 8001f90:	6813      	ldr	r3, [r2, #0]
 8001f92:	f003 0307 	and.w	r3, r3, #7
 8001f96:	428b      	cmp	r3, r1
{
 8001f98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001f9c:	460d      	mov	r5, r1
 8001f9e:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001fa0:	d209      	bcs.n	8001fb6 <HAL_RCC_ClockConfig+0x2e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fa2:	b2cb      	uxtb	r3, r1
 8001fa4:	7013      	strb	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fa6:	6813      	ldr	r3, [r2, #0]
 8001fa8:	f003 0307 	and.w	r3, r3, #7
 8001fac:	428b      	cmp	r3, r1
 8001fae:	d002      	beq.n	8001fb6 <HAL_RCC_ClockConfig+0x2e>
    return HAL_ERROR;
 8001fb0:	2001      	movs	r0, #1
}
 8001fb2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001fb6:	6823      	ldr	r3, [r4, #0]
 8001fb8:	0798      	lsls	r0, r3, #30
 8001fba:	d514      	bpl.n	8001fe6 <HAL_RCC_ClockConfig+0x5e>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001fbc:	0759      	lsls	r1, r3, #29
 8001fbe:	d504      	bpl.n	8001fca <HAL_RCC_ClockConfig+0x42>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001fc0:	493c      	ldr	r1, [pc, #240]	@ (80020b4 <HAL_RCC_ClockConfig+0x12c>)
 8001fc2:	688a      	ldr	r2, [r1, #8]
 8001fc4:	f442 52e0 	orr.w	r2, r2, #7168	@ 0x1c00
 8001fc8:	608a      	str	r2, [r1, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001fca:	071a      	lsls	r2, r3, #28
 8001fcc:	d504      	bpl.n	8001fd8 <HAL_RCC_ClockConfig+0x50>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001fce:	4939      	ldr	r1, [pc, #228]	@ (80020b4 <HAL_RCC_ClockConfig+0x12c>)
 8001fd0:	688a      	ldr	r2, [r1, #8]
 8001fd2:	f442 4260 	orr.w	r2, r2, #57344	@ 0xe000
 8001fd6:	608a      	str	r2, [r1, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001fd8:	4936      	ldr	r1, [pc, #216]	@ (80020b4 <HAL_RCC_ClockConfig+0x12c>)
 8001fda:	68a0      	ldr	r0, [r4, #8]
 8001fdc:	688a      	ldr	r2, [r1, #8]
 8001fde:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
 8001fe2:	4302      	orrs	r2, r0
 8001fe4:	608a      	str	r2, [r1, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001fe6:	07df      	lsls	r7, r3, #31
 8001fe8:	d521      	bpl.n	800202e <HAL_RCC_ClockConfig+0xa6>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001fea:	6862      	ldr	r2, [r4, #4]
 8001fec:	2a01      	cmp	r2, #1
 8001fee:	d057      	beq.n	80020a0 <HAL_RCC_ClockConfig+0x118>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001ff0:	1e93      	subs	r3, r2, #2
 8001ff2:	2b01      	cmp	r3, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ff4:	4b2f      	ldr	r3, [pc, #188]	@ (80020b4 <HAL_RCC_ClockConfig+0x12c>)
 8001ff6:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001ff8:	d94d      	bls.n	8002096 <HAL_RCC_ClockConfig+0x10e>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ffa:	0799      	lsls	r1, r3, #30
 8001ffc:	d5d8      	bpl.n	8001fb0 <HAL_RCC_ClockConfig+0x28>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001ffe:	4e2d      	ldr	r6, [pc, #180]	@ (80020b4 <HAL_RCC_ClockConfig+0x12c>)
 8002000:	68b3      	ldr	r3, [r6, #8]
 8002002:	f023 0303 	bic.w	r3, r3, #3
 8002006:	4313      	orrs	r3, r2
 8002008:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 800200a:	f7ff fb65 	bl	80016d8 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800200e:	f241 3888 	movw	r8, #5000	@ 0x1388
    tickstart = HAL_GetTick();
 8002012:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002014:	e004      	b.n	8002020 <HAL_RCC_ClockConfig+0x98>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002016:	f7ff fb5f 	bl	80016d8 <HAL_GetTick>
 800201a:	1bc0      	subs	r0, r0, r7
 800201c:	4540      	cmp	r0, r8
 800201e:	d844      	bhi.n	80020aa <HAL_RCC_ClockConfig+0x122>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002020:	68b3      	ldr	r3, [r6, #8]
 8002022:	6862      	ldr	r2, [r4, #4]
 8002024:	f003 030c 	and.w	r3, r3, #12
 8002028:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 800202c:	d1f3      	bne.n	8002016 <HAL_RCC_ClockConfig+0x8e>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800202e:	4a20      	ldr	r2, [pc, #128]	@ (80020b0 <HAL_RCC_ClockConfig+0x128>)
 8002030:	6813      	ldr	r3, [r2, #0]
 8002032:	f003 0307 	and.w	r3, r3, #7
 8002036:	42ab      	cmp	r3, r5
 8002038:	d906      	bls.n	8002048 <HAL_RCC_ClockConfig+0xc0>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800203a:	b2eb      	uxtb	r3, r5
 800203c:	7013      	strb	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800203e:	6813      	ldr	r3, [r2, #0]
 8002040:	f003 0307 	and.w	r3, r3, #7
 8002044:	42ab      	cmp	r3, r5
 8002046:	d1b3      	bne.n	8001fb0 <HAL_RCC_ClockConfig+0x28>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002048:	6823      	ldr	r3, [r4, #0]
 800204a:	075a      	lsls	r2, r3, #29
 800204c:	d506      	bpl.n	800205c <HAL_RCC_ClockConfig+0xd4>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800204e:	4919      	ldr	r1, [pc, #100]	@ (80020b4 <HAL_RCC_ClockConfig+0x12c>)
 8002050:	68e0      	ldr	r0, [r4, #12]
 8002052:	688a      	ldr	r2, [r1, #8]
 8002054:	f422 52e0 	bic.w	r2, r2, #7168	@ 0x1c00
 8002058:	4302      	orrs	r2, r0
 800205a:	608a      	str	r2, [r1, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800205c:	071b      	lsls	r3, r3, #28
 800205e:	d507      	bpl.n	8002070 <HAL_RCC_ClockConfig+0xe8>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002060:	4a14      	ldr	r2, [pc, #80]	@ (80020b4 <HAL_RCC_ClockConfig+0x12c>)
 8002062:	6921      	ldr	r1, [r4, #16]
 8002064:	6893      	ldr	r3, [r2, #8]
 8002066:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 800206a:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800206e:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002070:	f7ff ff56 	bl	8001f20 <HAL_RCC_GetSysClockFreq>
 8002074:	4a0f      	ldr	r2, [pc, #60]	@ (80020b4 <HAL_RCC_ClockConfig+0x12c>)
 8002076:	4c10      	ldr	r4, [pc, #64]	@ (80020b8 <HAL_RCC_ClockConfig+0x130>)
 8002078:	6892      	ldr	r2, [r2, #8]
 800207a:	4910      	ldr	r1, [pc, #64]	@ (80020bc <HAL_RCC_ClockConfig+0x134>)
 800207c:	f3c2 1203 	ubfx	r2, r2, #4, #4
 8002080:	4603      	mov	r3, r0
 8002082:	5ca2      	ldrb	r2, [r4, r2]
  HAL_InitTick (uwTickPrio);
 8002084:	480e      	ldr	r0, [pc, #56]	@ (80020c0 <HAL_RCC_ClockConfig+0x138>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002086:	40d3      	lsrs	r3, r2
  HAL_InitTick (uwTickPrio);
 8002088:	6800      	ldr	r0, [r0, #0]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800208a:	600b      	str	r3, [r1, #0]
  HAL_InitTick (uwTickPrio);
 800208c:	f7ff fada 	bl	8001644 <HAL_InitTick>
  return HAL_OK;
 8002090:	2000      	movs	r0, #0
}
 8002092:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002096:	0198      	lsls	r0, r3, #6
 8002098:	d4b1      	bmi.n	8001ffe <HAL_RCC_ClockConfig+0x76>
 800209a:	e789      	b.n	8001fb0 <HAL_RCC_ClockConfig+0x28>
    return HAL_ERROR;
 800209c:	2001      	movs	r0, #1
}
 800209e:	4770      	bx	lr
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020a0:	4b04      	ldr	r3, [pc, #16]	@ (80020b4 <HAL_RCC_ClockConfig+0x12c>)
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	039e      	lsls	r6, r3, #14
 80020a6:	d4aa      	bmi.n	8001ffe <HAL_RCC_ClockConfig+0x76>
 80020a8:	e782      	b.n	8001fb0 <HAL_RCC_ClockConfig+0x28>
        return HAL_TIMEOUT;
 80020aa:	2003      	movs	r0, #3
 80020ac:	e781      	b.n	8001fb2 <HAL_RCC_ClockConfig+0x2a>
 80020ae:	bf00      	nop
 80020b0:	40023c00 	.word	0x40023c00
 80020b4:	40023800 	.word	0x40023800
 80020b8:	08005ae4 	.word	0x08005ae4
 80020bc:	20000108 	.word	0x20000108
 80020c0:	20000110 	.word	0x20000110

080020c4 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80020c4:	4b04      	ldr	r3, [pc, #16]	@ (80020d8 <HAL_RCC_GetPCLK1Freq+0x14>)
  return SystemCoreClock;
 80020c6:	4905      	ldr	r1, [pc, #20]	@ (80020dc <HAL_RCC_GetPCLK1Freq+0x18>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80020c8:	689b      	ldr	r3, [r3, #8]
 80020ca:	4a05      	ldr	r2, [pc, #20]	@ (80020e0 <HAL_RCC_GetPCLK1Freq+0x1c>)
 80020cc:	6808      	ldr	r0, [r1, #0]
 80020ce:	f3c3 2382 	ubfx	r3, r3, #10, #3
 80020d2:	5cd3      	ldrb	r3, [r2, r3]
}
 80020d4:	40d8      	lsrs	r0, r3
 80020d6:	4770      	bx	lr
 80020d8:	40023800 	.word	0x40023800
 80020dc:	20000108 	.word	0x20000108
 80020e0:	08005adc 	.word	0x08005adc

080020e4 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80020e4:	4b04      	ldr	r3, [pc, #16]	@ (80020f8 <HAL_RCC_GetPCLK2Freq+0x14>)
  return SystemCoreClock;
 80020e6:	4905      	ldr	r1, [pc, #20]	@ (80020fc <HAL_RCC_GetPCLK2Freq+0x18>)
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80020e8:	689b      	ldr	r3, [r3, #8]
 80020ea:	4a05      	ldr	r2, [pc, #20]	@ (8002100 <HAL_RCC_GetPCLK2Freq+0x1c>)
 80020ec:	6808      	ldr	r0, [r1, #0]
 80020ee:	f3c3 3342 	ubfx	r3, r3, #13, #3
 80020f2:	5cd3      	ldrb	r3, [r2, r3]
}
 80020f4:	40d8      	lsrs	r0, r3
 80020f6:	4770      	bx	lr
 80020f8:	40023800 	.word	0x40023800
 80020fc:	20000108 	.word	0x20000108
 8002100:	08005adc 	.word	0x08005adc

08002104 <HAL_TIM_Base_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002104:	2800      	cmp	r0, #0
 8002106:	d071      	beq.n	80021ec <HAL_TIM_Base_Init+0xe8>
{
 8002108:	b570      	push	{r4, r5, r6, lr}
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800210a:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 800210e:	4604      	mov	r4, r0
 8002110:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8002114:	2b00      	cmp	r3, #0
 8002116:	d053      	beq.n	80021c0 <HAL_TIM_Base_Init+0xbc>

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002118:	6822      	ldr	r2, [r4, #0]
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800211a:	4e35      	ldr	r6, [pc, #212]	@ (80021f0 <HAL_TIM_Base_Init+0xec>)

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800211c:	6861      	ldr	r1, [r4, #4]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800211e:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002120:	69a5      	ldr	r5, [r4, #24]
  htim->State = HAL_TIM_STATE_BUSY;
 8002122:	2302      	movs	r3, #2
 8002124:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002128:	42b2      	cmp	r2, r6
  tmpcr1 = TIMx->CR1;
 800212a:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800212c:	d04d      	beq.n	80021ca <HAL_TIM_Base_Init+0xc6>
 800212e:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
 8002132:	d017      	beq.n	8002164 <HAL_TIM_Base_Init+0x60>
 8002134:	f5a6 467c 	sub.w	r6, r6, #64512	@ 0xfc00
 8002138:	42b2      	cmp	r2, r6
 800213a:	d013      	beq.n	8002164 <HAL_TIM_Base_Init+0x60>
 800213c:	f506 6680 	add.w	r6, r6, #1024	@ 0x400
 8002140:	42b2      	cmp	r2, r6
 8002142:	d00f      	beq.n	8002164 <HAL_TIM_Base_Init+0x60>
 8002144:	f506 6680 	add.w	r6, r6, #1024	@ 0x400
 8002148:	42b2      	cmp	r2, r6
 800214a:	d00b      	beq.n	8002164 <HAL_TIM_Base_Init+0x60>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800214c:	4e29      	ldr	r6, [pc, #164]	@ (80021f4 <HAL_TIM_Base_Init+0xf0>)
 800214e:	42b2      	cmp	r2, r6
 8002150:	d00c      	beq.n	800216c <HAL_TIM_Base_Init+0x68>
 8002152:	f506 6680 	add.w	r6, r6, #1024	@ 0x400
 8002156:	42b2      	cmp	r2, r6
 8002158:	d008      	beq.n	800216c <HAL_TIM_Base_Init+0x68>
 800215a:	f506 6680 	add.w	r6, r6, #1024	@ 0x400
 800215e:	42b2      	cmp	r2, r6
 8002160:	d108      	bne.n	8002174 <HAL_TIM_Base_Init+0x70>
 8002162:	e003      	b.n	800216c <HAL_TIM_Base_Init+0x68>
    tmpcr1 |= Structure->CounterMode;
 8002164:	68a6      	ldr	r6, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002166:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 800216a:	4333      	orrs	r3, r6
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800216c:	6926      	ldr	r6, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
 800216e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002172:	4333      	orrs	r3, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002174:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002178:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 800217a:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800217c:	62d0      	str	r0, [r2, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 800217e:	6291      	str	r1, [r2, #40]	@ 0x28
    TIMx->RCR = Structure->RepetitionCounter;
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002180:	2301      	movs	r3, #1
 8002182:	6153      	str	r3, [r2, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002184:	6913      	ldr	r3, [r2, #16]
 8002186:	07db      	lsls	r3, r3, #31
 8002188:	d503      	bpl.n	8002192 <HAL_TIM_Base_Init+0x8e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800218a:	6913      	ldr	r3, [r2, #16]
 800218c:	f023 0301 	bic.w	r3, r3, #1
 8002190:	6113      	str	r3, [r2, #16]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002192:	2301      	movs	r3, #1
 8002194:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002198:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 800219c:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 80021a0:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 80021a4:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80021a8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80021ac:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80021b0:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 80021b4:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
  htim->State = HAL_TIM_STATE_READY;
 80021b8:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  return HAL_OK;
 80021bc:	2000      	movs	r0, #0
}
 80021be:	bd70      	pop	{r4, r5, r6, pc}
    htim->Lock = HAL_UNLOCKED;
 80021c0:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
    HAL_TIM_Base_MspInit(htim);
 80021c4:	f7ff f8dc 	bl	8001380 <HAL_TIM_Base_MspInit>
 80021c8:	e7a6      	b.n	8002118 <HAL_TIM_Base_Init+0x14>
    tmpcr1 |= Structure->CounterMode;
 80021ca:	68a6      	ldr	r6, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80021cc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 80021d0:	4333      	orrs	r3, r6
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80021d2:	6926      	ldr	r6, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
 80021d4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80021d8:	4333      	orrs	r3, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80021da:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80021de:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 80021e0:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80021e2:	62d0      	str	r0, [r2, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 80021e4:	6291      	str	r1, [r2, #40]	@ 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 80021e6:	6963      	ldr	r3, [r4, #20]
 80021e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80021ea:	e7c9      	b.n	8002180 <HAL_TIM_Base_Init+0x7c>
    return HAL_ERROR;
 80021ec:	2001      	movs	r0, #1
}
 80021ee:	4770      	bx	lr
 80021f0:	40010000 	.word	0x40010000
 80021f4:	40014000 	.word	0x40014000

080021f8 <HAL_TIM_PWM_MspInit>:
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
 80021f8:	4770      	bx	lr
 80021fa:	bf00      	nop

080021fc <HAL_TIM_PWM_Init>:
  if (htim == NULL)
 80021fc:	2800      	cmp	r0, #0
 80021fe:	d071      	beq.n	80022e4 <HAL_TIM_PWM_Init+0xe8>
{
 8002200:	b570      	push	{r4, r5, r6, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 8002202:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8002206:	4604      	mov	r4, r0
 8002208:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 800220c:	2b00      	cmp	r3, #0
 800220e:	d053      	beq.n	80022b8 <HAL_TIM_PWM_Init+0xbc>
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002210:	6822      	ldr	r2, [r4, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002212:	4e35      	ldr	r6, [pc, #212]	@ (80022e8 <HAL_TIM_PWM_Init+0xec>)
  TIMx->PSC = Structure->Prescaler;
 8002214:	6861      	ldr	r1, [r4, #4]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002216:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002218:	69a5      	ldr	r5, [r4, #24]
  htim->State = HAL_TIM_STATE_BUSY;
 800221a:	2302      	movs	r3, #2
 800221c:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002220:	42b2      	cmp	r2, r6
  tmpcr1 = TIMx->CR1;
 8002222:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002224:	d04d      	beq.n	80022c2 <HAL_TIM_PWM_Init+0xc6>
 8002226:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
 800222a:	d017      	beq.n	800225c <HAL_TIM_PWM_Init+0x60>
 800222c:	f5a6 467c 	sub.w	r6, r6, #64512	@ 0xfc00
 8002230:	42b2      	cmp	r2, r6
 8002232:	d013      	beq.n	800225c <HAL_TIM_PWM_Init+0x60>
 8002234:	f506 6680 	add.w	r6, r6, #1024	@ 0x400
 8002238:	42b2      	cmp	r2, r6
 800223a:	d00f      	beq.n	800225c <HAL_TIM_PWM_Init+0x60>
 800223c:	f506 6680 	add.w	r6, r6, #1024	@ 0x400
 8002240:	42b2      	cmp	r2, r6
 8002242:	d00b      	beq.n	800225c <HAL_TIM_PWM_Init+0x60>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002244:	4e29      	ldr	r6, [pc, #164]	@ (80022ec <HAL_TIM_PWM_Init+0xf0>)
 8002246:	42b2      	cmp	r2, r6
 8002248:	d00c      	beq.n	8002264 <HAL_TIM_PWM_Init+0x68>
 800224a:	f506 6680 	add.w	r6, r6, #1024	@ 0x400
 800224e:	42b2      	cmp	r2, r6
 8002250:	d008      	beq.n	8002264 <HAL_TIM_PWM_Init+0x68>
 8002252:	f506 6680 	add.w	r6, r6, #1024	@ 0x400
 8002256:	42b2      	cmp	r2, r6
 8002258:	d108      	bne.n	800226c <HAL_TIM_PWM_Init+0x70>
 800225a:	e003      	b.n	8002264 <HAL_TIM_PWM_Init+0x68>
    tmpcr1 |= Structure->CounterMode;
 800225c:	68a6      	ldr	r6, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800225e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 8002262:	4333      	orrs	r3, r6
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002264:	6926      	ldr	r6, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
 8002266:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800226a:	4333      	orrs	r3, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800226c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002270:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 8002272:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002274:	62d0      	str	r0, [r2, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8002276:	6291      	str	r1, [r2, #40]	@ 0x28
  TIMx->EGR = TIM_EGR_UG;
 8002278:	2301      	movs	r3, #1
 800227a:	6153      	str	r3, [r2, #20]
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800227c:	6913      	ldr	r3, [r2, #16]
 800227e:	07db      	lsls	r3, r3, #31
 8002280:	d503      	bpl.n	800228a <HAL_TIM_PWM_Init+0x8e>
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002282:	6913      	ldr	r3, [r2, #16]
 8002284:	f023 0301 	bic.w	r3, r3, #1
 8002288:	6113      	str	r3, [r2, #16]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800228a:	2301      	movs	r3, #1
 800228c:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002290:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 8002294:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 8002298:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 800229c:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80022a0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80022a4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80022a8:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 80022ac:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
  htim->State = HAL_TIM_STATE_READY;
 80022b0:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  return HAL_OK;
 80022b4:	2000      	movs	r0, #0
}
 80022b6:	bd70      	pop	{r4, r5, r6, pc}
    htim->Lock = HAL_UNLOCKED;
 80022b8:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
    HAL_TIM_PWM_MspInit(htim);
 80022bc:	f7ff ff9c 	bl	80021f8 <HAL_TIM_PWM_MspInit>
 80022c0:	e7a6      	b.n	8002210 <HAL_TIM_PWM_Init+0x14>
    tmpcr1 |= Structure->CounterMode;
 80022c2:	68a6      	ldr	r6, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80022c4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 80022c8:	4333      	orrs	r3, r6
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80022ca:	6926      	ldr	r6, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
 80022cc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80022d0:	4333      	orrs	r3, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80022d2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80022d6:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 80022d8:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80022da:	62d0      	str	r0, [r2, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 80022dc:	6291      	str	r1, [r2, #40]	@ 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 80022de:	6963      	ldr	r3, [r4, #20]
 80022e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80022e2:	e7c9      	b.n	8002278 <HAL_TIM_PWM_Init+0x7c>
    return HAL_ERROR;
 80022e4:	2001      	movs	r0, #1
}
 80022e6:	4770      	bx	lr
 80022e8:	40010000 	.word	0x40010000
 80022ec:	40014000 	.word	0x40014000

080022f0 <HAL_TIM_PWM_Start>:
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
 80022f0:	bb91      	cbnz	r1, 8002358 <HAL_TIM_PWM_Start+0x68>
 80022f2:	f890 303e 	ldrb.w	r3, [r0, #62]	@ 0x3e
 80022f6:	2b01      	cmp	r3, #1
 80022f8:	d13a      	bne.n	8002370 <HAL_TIM_PWM_Start+0x80>
 80022fa:	2302      	movs	r3, #2
 80022fc:	f880 303e 	strb.w	r3, [r0, #62]	@ 0x3e
 8002300:	6803      	ldr	r3, [r0, #0]
 8002302:	f001 011f 	and.w	r1, r1, #31
 8002306:	6a18      	ldr	r0, [r3, #32]
 8002308:	2201      	movs	r2, #1
 800230a:	408a      	lsls	r2, r1
 800230c:	ea20 0002 	bic.w	r0, r0, r2
 8002310:	6218      	str	r0, [r3, #32]
 8002312:	6a18      	ldr	r0, [r3, #32]
 8002314:	4922      	ldr	r1, [pc, #136]	@ (80023a0 <HAL_TIM_PWM_Start+0xb0>)
 8002316:	4302      	orrs	r2, r0
 8002318:	428b      	cmp	r3, r1
 800231a:	621a      	str	r2, [r3, #32]
 800231c:	d032      	beq.n	8002384 <HAL_TIM_PWM_Start+0x94>
 800231e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002322:	d00e      	beq.n	8002342 <HAL_TIM_PWM_Start+0x52>
 8002324:	4a1f      	ldr	r2, [pc, #124]	@ (80023a4 <HAL_TIM_PWM_Start+0xb4>)
 8002326:	4293      	cmp	r3, r2
 8002328:	d00b      	beq.n	8002342 <HAL_TIM_PWM_Start+0x52>
 800232a:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800232e:	4293      	cmp	r3, r2
 8002330:	d007      	beq.n	8002342 <HAL_TIM_PWM_Start+0x52>
 8002332:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8002336:	4293      	cmp	r3, r2
 8002338:	d003      	beq.n	8002342 <HAL_TIM_PWM_Start+0x52>
 800233a:	f502 329a 	add.w	r2, r2, #78848	@ 0x13400
 800233e:	4293      	cmp	r3, r2
 8002340:	d104      	bne.n	800234c <HAL_TIM_PWM_Start+0x5c>
 8002342:	689a      	ldr	r2, [r3, #8]
 8002344:	f002 0207 	and.w	r2, r2, #7
 8002348:	2a06      	cmp	r2, #6
 800234a:	d003      	beq.n	8002354 <HAL_TIM_PWM_Start+0x64>
 800234c:	681a      	ldr	r2, [r3, #0]
 800234e:	f042 0201 	orr.w	r2, r2, #1
 8002352:	601a      	str	r2, [r3, #0]
 8002354:	2000      	movs	r0, #0
 8002356:	4770      	bx	lr
 8002358:	2904      	cmp	r1, #4
 800235a:	d00b      	beq.n	8002374 <HAL_TIM_PWM_Start+0x84>
 800235c:	2908      	cmp	r1, #8
 800235e:	d016      	beq.n	800238e <HAL_TIM_PWM_Start+0x9e>
 8002360:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 8002364:	2b01      	cmp	r3, #1
 8002366:	d103      	bne.n	8002370 <HAL_TIM_PWM_Start+0x80>
 8002368:	2302      	movs	r3, #2
 800236a:	f880 3041 	strb.w	r3, [r0, #65]	@ 0x41
 800236e:	e7c7      	b.n	8002300 <HAL_TIM_PWM_Start+0x10>
 8002370:	2001      	movs	r0, #1
 8002372:	4770      	bx	lr
 8002374:	f890 303f 	ldrb.w	r3, [r0, #63]	@ 0x3f
 8002378:	2b01      	cmp	r3, #1
 800237a:	d1f9      	bne.n	8002370 <HAL_TIM_PWM_Start+0x80>
 800237c:	2302      	movs	r3, #2
 800237e:	f880 303f 	strb.w	r3, [r0, #63]	@ 0x3f
 8002382:	e7bd      	b.n	8002300 <HAL_TIM_PWM_Start+0x10>
 8002384:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002386:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800238a:	645a      	str	r2, [r3, #68]	@ 0x44
 800238c:	e7d9      	b.n	8002342 <HAL_TIM_PWM_Start+0x52>
 800238e:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 8002392:	2b01      	cmp	r3, #1
 8002394:	d1ec      	bne.n	8002370 <HAL_TIM_PWM_Start+0x80>
 8002396:	2302      	movs	r3, #2
 8002398:	f880 3040 	strb.w	r3, [r0, #64]	@ 0x40
 800239c:	e7b0      	b.n	8002300 <HAL_TIM_PWM_Start+0x10>
 800239e:	bf00      	nop
 80023a0:	40010000 	.word	0x40010000
 80023a4:	40000400 	.word	0x40000400

080023a8 <HAL_TIM_IC_MspInit>:
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
 80023a8:	4770      	bx	lr
 80023aa:	bf00      	nop

080023ac <HAL_TIM_IC_Init>:
  if (htim == NULL)
 80023ac:	2800      	cmp	r0, #0
 80023ae:	d071      	beq.n	8002494 <HAL_TIM_IC_Init+0xe8>
{
 80023b0:	b570      	push	{r4, r5, r6, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 80023b2:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 80023b6:	4604      	mov	r4, r0
 80023b8:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d053      	beq.n	8002468 <HAL_TIM_IC_Init+0xbc>
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80023c0:	6822      	ldr	r2, [r4, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80023c2:	4e35      	ldr	r6, [pc, #212]	@ (8002498 <HAL_TIM_IC_Init+0xec>)
  TIMx->PSC = Structure->Prescaler;
 80023c4:	6861      	ldr	r1, [r4, #4]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80023c6:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80023c8:	69a5      	ldr	r5, [r4, #24]
  htim->State = HAL_TIM_STATE_BUSY;
 80023ca:	2302      	movs	r3, #2
 80023cc:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80023d0:	42b2      	cmp	r2, r6
  tmpcr1 = TIMx->CR1;
 80023d2:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80023d4:	d04d      	beq.n	8002472 <HAL_TIM_IC_Init+0xc6>
 80023d6:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
 80023da:	d017      	beq.n	800240c <HAL_TIM_IC_Init+0x60>
 80023dc:	f5a6 467c 	sub.w	r6, r6, #64512	@ 0xfc00
 80023e0:	42b2      	cmp	r2, r6
 80023e2:	d013      	beq.n	800240c <HAL_TIM_IC_Init+0x60>
 80023e4:	f506 6680 	add.w	r6, r6, #1024	@ 0x400
 80023e8:	42b2      	cmp	r2, r6
 80023ea:	d00f      	beq.n	800240c <HAL_TIM_IC_Init+0x60>
 80023ec:	f506 6680 	add.w	r6, r6, #1024	@ 0x400
 80023f0:	42b2      	cmp	r2, r6
 80023f2:	d00b      	beq.n	800240c <HAL_TIM_IC_Init+0x60>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80023f4:	4e29      	ldr	r6, [pc, #164]	@ (800249c <HAL_TIM_IC_Init+0xf0>)
 80023f6:	42b2      	cmp	r2, r6
 80023f8:	d00c      	beq.n	8002414 <HAL_TIM_IC_Init+0x68>
 80023fa:	f506 6680 	add.w	r6, r6, #1024	@ 0x400
 80023fe:	42b2      	cmp	r2, r6
 8002400:	d008      	beq.n	8002414 <HAL_TIM_IC_Init+0x68>
 8002402:	f506 6680 	add.w	r6, r6, #1024	@ 0x400
 8002406:	42b2      	cmp	r2, r6
 8002408:	d108      	bne.n	800241c <HAL_TIM_IC_Init+0x70>
 800240a:	e003      	b.n	8002414 <HAL_TIM_IC_Init+0x68>
    tmpcr1 |= Structure->CounterMode;
 800240c:	68a6      	ldr	r6, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800240e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 8002412:	4333      	orrs	r3, r6
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002414:	6926      	ldr	r6, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
 8002416:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800241a:	4333      	orrs	r3, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800241c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002420:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 8002422:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002424:	62d0      	str	r0, [r2, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8002426:	6291      	str	r1, [r2, #40]	@ 0x28
  TIMx->EGR = TIM_EGR_UG;
 8002428:	2301      	movs	r3, #1
 800242a:	6153      	str	r3, [r2, #20]
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800242c:	6913      	ldr	r3, [r2, #16]
 800242e:	07db      	lsls	r3, r3, #31
 8002430:	d503      	bpl.n	800243a <HAL_TIM_IC_Init+0x8e>
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002432:	6913      	ldr	r3, [r2, #16]
 8002434:	f023 0301 	bic.w	r3, r3, #1
 8002438:	6113      	str	r3, [r2, #16]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800243a:	2301      	movs	r3, #1
 800243c:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002440:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 8002444:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 8002448:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 800244c:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002450:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8002454:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8002458:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 800245c:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
  htim->State = HAL_TIM_STATE_READY;
 8002460:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  return HAL_OK;
 8002464:	2000      	movs	r0, #0
}
 8002466:	bd70      	pop	{r4, r5, r6, pc}
    htim->Lock = HAL_UNLOCKED;
 8002468:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
    HAL_TIM_IC_MspInit(htim);
 800246c:	f7ff ff9c 	bl	80023a8 <HAL_TIM_IC_MspInit>
 8002470:	e7a6      	b.n	80023c0 <HAL_TIM_IC_Init+0x14>
    tmpcr1 |= Structure->CounterMode;
 8002472:	68a6      	ldr	r6, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002474:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 8002478:	4333      	orrs	r3, r6
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800247a:	6926      	ldr	r6, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
 800247c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002480:	4333      	orrs	r3, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002482:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002486:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 8002488:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800248a:	62d0      	str	r0, [r2, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 800248c:	6291      	str	r1, [r2, #40]	@ 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 800248e:	6963      	ldr	r3, [r4, #20]
 8002490:	6313      	str	r3, [r2, #48]	@ 0x30
 8002492:	e7c9      	b.n	8002428 <HAL_TIM_IC_Init+0x7c>
    return HAL_ERROR;
 8002494:	2001      	movs	r0, #1
}
 8002496:	4770      	bx	lr
 8002498:	40010000 	.word	0x40010000
 800249c:	40014000 	.word	0x40014000

080024a0 <HAL_TIM_IC_Start>:
{
 80024a0:	4603      	mov	r3, r0
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80024a2:	b959      	cbnz	r1, 80024bc <HAL_TIM_IC_Start+0x1c>
 80024a4:	f890 c03e 	ldrb.w	ip, [r0, #62]	@ 0x3e
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80024a8:	f890 2042 	ldrb.w	r2, [r0, #66]	@ 0x42
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 80024ac:	f1bc 0f01 	cmp.w	ip, #1
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80024b0:	fa5f f08c 	uxtb.w	r0, ip
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80024b4:	b2d2      	uxtb	r2, r2
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 80024b6:	d017      	beq.n	80024e8 <HAL_TIM_IC_Start+0x48>
    return HAL_ERROR;
 80024b8:	2001      	movs	r0, #1
}
 80024ba:	4770      	bx	lr
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80024bc:	2904      	cmp	r1, #4
 80024be:	d046      	beq.n	800254e <HAL_TIM_IC_Start+0xae>
 80024c0:	2908      	cmp	r1, #8
 80024c2:	d056      	beq.n	8002572 <HAL_TIM_IC_Start+0xd2>
 80024c4:	f890 c041 	ldrb.w	ip, [r0, #65]	@ 0x41
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80024c8:	f890 2045 	ldrb.w	r2, [r0, #69]	@ 0x45
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 80024cc:	f1bc 0f01 	cmp.w	ip, #1
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80024d0:	fa5f f08c 	uxtb.w	r0, ip
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80024d4:	b2d2      	uxtb	r2, r2
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 80024d6:	d1ef      	bne.n	80024b8 <HAL_TIM_IC_Start+0x18>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 80024d8:	2a01      	cmp	r2, #1
 80024da:	d1ee      	bne.n	80024ba <HAL_TIM_IC_Start+0x1a>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80024dc:	2202      	movs	r2, #2
 80024de:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80024e2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80024e6:	e006      	b.n	80024f6 <HAL_TIM_IC_Start+0x56>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 80024e8:	2a01      	cmp	r2, #1
 80024ea:	d1e6      	bne.n	80024ba <HAL_TIM_IC_Start+0x1a>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80024ec:	2202      	movs	r2, #2
 80024ee:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80024f2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80024f6:	681b      	ldr	r3, [r3, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80024f8:	f001 011f 	and.w	r1, r1, #31

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80024fc:	6a18      	ldr	r0, [r3, #32]
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80024fe:	2201      	movs	r2, #1
 8002500:	408a      	lsls	r2, r1
  TIMx->CCER &= ~tmp;
 8002502:	ea20 0002 	bic.w	r0, r0, r2
 8002506:	6218      	str	r0, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002508:	6a18      	ldr	r0, [r3, #32]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800250a:	4923      	ldr	r1, [pc, #140]	@ (8002598 <HAL_TIM_IC_Start+0xf8>)
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800250c:	4302      	orrs	r2, r0
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800250e:	428b      	cmp	r3, r1
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002510:	621a      	str	r2, [r3, #32]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002512:	d011      	beq.n	8002538 <HAL_TIM_IC_Start+0x98>
 8002514:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002518:	d00e      	beq.n	8002538 <HAL_TIM_IC_Start+0x98>
 800251a:	4a20      	ldr	r2, [pc, #128]	@ (800259c <HAL_TIM_IC_Start+0xfc>)
 800251c:	4293      	cmp	r3, r2
 800251e:	d00b      	beq.n	8002538 <HAL_TIM_IC_Start+0x98>
 8002520:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8002524:	4293      	cmp	r3, r2
 8002526:	d007      	beq.n	8002538 <HAL_TIM_IC_Start+0x98>
 8002528:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800252c:	4293      	cmp	r3, r2
 800252e:	d003      	beq.n	8002538 <HAL_TIM_IC_Start+0x98>
 8002530:	f502 329a 	add.w	r2, r2, #78848	@ 0x13400
 8002534:	4293      	cmp	r3, r2
 8002536:	d104      	bne.n	8002542 <HAL_TIM_IC_Start+0xa2>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002538:	689a      	ldr	r2, [r3, #8]
 800253a:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800253e:	2a06      	cmp	r2, #6
 8002540:	d003      	beq.n	800254a <HAL_TIM_IC_Start+0xaa>
      __HAL_TIM_ENABLE(htim);
 8002542:	681a      	ldr	r2, [r3, #0]
 8002544:	f042 0201 	orr.w	r2, r2, #1
 8002548:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 800254a:	2000      	movs	r0, #0
 800254c:	4770      	bx	lr
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800254e:	f890 c03f 	ldrb.w	ip, [r0, #63]	@ 0x3f
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8002552:	f890 2043 	ldrb.w	r2, [r0, #67]	@ 0x43
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8002556:	f1bc 0f01 	cmp.w	ip, #1
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800255a:	fa5f f08c 	uxtb.w	r0, ip
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 800255e:	b2d2      	uxtb	r2, r2
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8002560:	d1aa      	bne.n	80024b8 <HAL_TIM_IC_Start+0x18>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8002562:	2a01      	cmp	r2, #1
 8002564:	d1a9      	bne.n	80024ba <HAL_TIM_IC_Start+0x1a>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002566:	2202      	movs	r2, #2
 8002568:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800256c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002570:	e7c1      	b.n	80024f6 <HAL_TIM_IC_Start+0x56>
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8002572:	f890 c040 	ldrb.w	ip, [r0, #64]	@ 0x40
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8002576:	f890 2044 	ldrb.w	r2, [r0, #68]	@ 0x44
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 800257a:	f1bc 0f01 	cmp.w	ip, #1
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800257e:	fa5f f08c 	uxtb.w	r0, ip
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8002582:	b2d2      	uxtb	r2, r2
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8002584:	d198      	bne.n	80024b8 <HAL_TIM_IC_Start+0x18>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8002586:	2a01      	cmp	r2, #1
 8002588:	d197      	bne.n	80024ba <HAL_TIM_IC_Start+0x1a>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800258a:	2202      	movs	r2, #2
 800258c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002590:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002594:	e7af      	b.n	80024f6 <HAL_TIM_IC_Start+0x56>
 8002596:	bf00      	nop
 8002598:	40010000 	.word	0x40010000
 800259c:	40000400 	.word	0x40000400

080025a0 <HAL_TIM_IC_Start_IT>:
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80025a0:	2900      	cmp	r1, #0
 80025a2:	d13b      	bne.n	800261c <HAL_TIM_IC_Start_IT+0x7c>
 80025a4:	f890 203e 	ldrb.w	r2, [r0, #62]	@ 0x3e
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80025a8:	f890 3042 	ldrb.w	r3, [r0, #66]	@ 0x42
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 80025ac:	2a01      	cmp	r2, #1
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80025ae:	b2db      	uxtb	r3, r3
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 80025b0:	d155      	bne.n	800265e <HAL_TIM_IC_Start_IT+0xbe>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 80025b2:	2b01      	cmp	r3, #1
 80025b4:	d153      	bne.n	800265e <HAL_TIM_IC_Start_IT+0xbe>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80025b6:	2202      	movs	r2, #2
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80025b8:	6803      	ldr	r3, [r0, #0]
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80025ba:	f880 203e 	strb.w	r2, [r0, #62]	@ 0x3e
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80025be:	f880 2042 	strb.w	r2, [r0, #66]	@ 0x42
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80025c2:	68da      	ldr	r2, [r3, #12]
 80025c4:	f042 0202 	orr.w	r2, r2, #2
 80025c8:	60da      	str	r2, [r3, #12]
  TIMx->CCER &= ~tmp;
 80025ca:	6a18      	ldr	r0, [r3, #32]
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80025cc:	2201      	movs	r2, #1
 80025ce:	408a      	lsls	r2, r1
  TIMx->CCER &= ~tmp;
 80025d0:	ea20 0002 	bic.w	r0, r0, r2
 80025d4:	6218      	str	r0, [r3, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80025d6:	6a18      	ldr	r0, [r3, #32]
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80025d8:	4932      	ldr	r1, [pc, #200]	@ (80026a4 <HAL_TIM_IC_Start_IT+0x104>)
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80025da:	4302      	orrs	r2, r0
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80025dc:	428b      	cmp	r3, r1
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80025de:	621a      	str	r2, [r3, #32]
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80025e0:	d011      	beq.n	8002606 <HAL_TIM_IC_Start_IT+0x66>
 80025e2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80025e6:	d00e      	beq.n	8002606 <HAL_TIM_IC_Start_IT+0x66>
 80025e8:	4a2f      	ldr	r2, [pc, #188]	@ (80026a8 <HAL_TIM_IC_Start_IT+0x108>)
 80025ea:	4293      	cmp	r3, r2
 80025ec:	d00b      	beq.n	8002606 <HAL_TIM_IC_Start_IT+0x66>
 80025ee:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80025f2:	4293      	cmp	r3, r2
 80025f4:	d007      	beq.n	8002606 <HAL_TIM_IC_Start_IT+0x66>
 80025f6:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80025fa:	4293      	cmp	r3, r2
 80025fc:	d003      	beq.n	8002606 <HAL_TIM_IC_Start_IT+0x66>
 80025fe:	f502 329a 	add.w	r2, r2, #78848	@ 0x13400
 8002602:	4293      	cmp	r3, r2
 8002604:	d104      	bne.n	8002610 <HAL_TIM_IC_Start_IT+0x70>
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002606:	689a      	ldr	r2, [r3, #8]
 8002608:	f002 0207 	and.w	r2, r2, #7
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800260c:	2a06      	cmp	r2, #6
 800260e:	d003      	beq.n	8002618 <HAL_TIM_IC_Start_IT+0x78>
      __HAL_TIM_ENABLE(htim);
 8002610:	681a      	ldr	r2, [r3, #0]
 8002612:	f042 0201 	orr.w	r2, r2, #1
 8002616:	601a      	str	r2, [r3, #0]
{
 8002618:	2000      	movs	r0, #0
 800261a:	4770      	bx	lr
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800261c:	2904      	cmp	r1, #4
 800261e:	d017      	beq.n	8002650 <HAL_TIM_IC_Start_IT+0xb0>
 8002620:	2908      	cmp	r1, #8
 8002622:	d01e      	beq.n	8002662 <HAL_TIM_IC_Start_IT+0xc2>
 8002624:	f890 2041 	ldrb.w	r2, [r0, #65]	@ 0x41
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8002628:	f890 3045 	ldrb.w	r3, [r0, #69]	@ 0x45
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 800262c:	2a01      	cmp	r2, #1
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 800262e:	b2db      	uxtb	r3, r3
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8002630:	d115      	bne.n	800265e <HAL_TIM_IC_Start_IT+0xbe>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8002632:	2b01      	cmp	r3, #1
 8002634:	d113      	bne.n	800265e <HAL_TIM_IC_Start_IT+0xbe>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002636:	2302      	movs	r3, #2
  switch (Channel)
 8002638:	290c      	cmp	r1, #12
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800263a:	f880 3041 	strb.w	r3, [r0, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800263e:	f880 3045 	strb.w	r3, [r0, #69]	@ 0x45
  switch (Channel)
 8002642:	d10c      	bne.n	800265e <HAL_TIM_IC_Start_IT+0xbe>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8002644:	6803      	ldr	r3, [r0, #0]
 8002646:	68da      	ldr	r2, [r3, #12]
 8002648:	f042 0210 	orr.w	r2, r2, #16
 800264c:	60da      	str	r2, [r3, #12]
  if (status == HAL_OK)
 800264e:	e7bc      	b.n	80025ca <HAL_TIM_IC_Start_IT+0x2a>
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8002650:	f890 203f 	ldrb.w	r2, [r0, #63]	@ 0x3f
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8002654:	f890 3043 	ldrb.w	r3, [r0, #67]	@ 0x43
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8002658:	2a01      	cmp	r2, #1
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 800265a:	b2db      	uxtb	r3, r3
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 800265c:	d015      	beq.n	800268a <HAL_TIM_IC_Start_IT+0xea>
{
 800265e:	2001      	movs	r0, #1
}
 8002660:	4770      	bx	lr
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8002662:	f890 2040 	ldrb.w	r2, [r0, #64]	@ 0x40
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8002666:	f890 3044 	ldrb.w	r3, [r0, #68]	@ 0x44
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 800266a:	2a01      	cmp	r2, #1
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 800266c:	b2db      	uxtb	r3, r3
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 800266e:	d1f6      	bne.n	800265e <HAL_TIM_IC_Start_IT+0xbe>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8002670:	2b01      	cmp	r3, #1
 8002672:	d1f4      	bne.n	800265e <HAL_TIM_IC_Start_IT+0xbe>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002674:	2202      	movs	r2, #2
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8002676:	6803      	ldr	r3, [r0, #0]
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002678:	f880 2040 	strb.w	r2, [r0, #64]	@ 0x40
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800267c:	f880 2044 	strb.w	r2, [r0, #68]	@ 0x44
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8002680:	68da      	ldr	r2, [r3, #12]
 8002682:	f042 0208 	orr.w	r2, r2, #8
 8002686:	60da      	str	r2, [r3, #12]
  if (status == HAL_OK)
 8002688:	e79f      	b.n	80025ca <HAL_TIM_IC_Start_IT+0x2a>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 800268a:	2b01      	cmp	r3, #1
 800268c:	d1e7      	bne.n	800265e <HAL_TIM_IC_Start_IT+0xbe>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800268e:	2202      	movs	r2, #2
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8002690:	6803      	ldr	r3, [r0, #0]
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002692:	f880 203f 	strb.w	r2, [r0, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002696:	f880 2043 	strb.w	r2, [r0, #67]	@ 0x43
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800269a:	68da      	ldr	r2, [r3, #12]
 800269c:	f042 0204 	orr.w	r2, r2, #4
 80026a0:	60da      	str	r2, [r3, #12]
  if (status == HAL_OK)
 80026a2:	e792      	b.n	80025ca <HAL_TIM_IC_Start_IT+0x2a>
 80026a4:	40010000 	.word	0x40010000
 80026a8:	40000400 	.word	0x40000400

080026ac <HAL_TIM_IC_ConfigChannel>:
{
 80026ac:	4603      	mov	r3, r0
  __HAL_LOCK(htim);
 80026ae:	f890 003c 	ldrb.w	r0, [r0, #60]	@ 0x3c
 80026b2:	2801      	cmp	r0, #1
 80026b4:	f000 80b7 	beq.w	8002826 <HAL_TIM_IC_ConfigChannel+0x17a>
 80026b8:	2001      	movs	r0, #1
{
 80026ba:	b4f0      	push	{r4, r5, r6, r7}
  __HAL_LOCK(htim);
 80026bc:	f883 003c 	strb.w	r0, [r3, #60]	@ 0x3c
  if (Channel == TIM_CHANNEL_1)
 80026c0:	2a0c      	cmp	r2, #12
 80026c2:	d808      	bhi.n	80026d6 <HAL_TIM_IC_ConfigChannel+0x2a>
 80026c4:	e8df f002 	tbb	[pc, r2]
 80026c8:	07070734 	.word	0x07070734
 80026cc:	07070758 	.word	0x07070758
 80026d0:	0707077a 	.word	0x0707077a
 80026d4:	0d          	.byte	0x0d
 80026d5:	00          	.byte	0x00
  __HAL_UNLOCK(htim);
 80026d6:	2200      	movs	r2, #0
 80026d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  __HAL_LOCK(htim);
 80026dc:	2001      	movs	r0, #1
}
 80026de:	bcf0      	pop	{r4, r5, r6, r7}
 80026e0:	4770      	bx	lr
    TIM_TI4_SetConfig(htim->Instance,
 80026e2:	681a      	ldr	r2, [r3, #0]
                      sConfig->ICFilter);
 80026e4:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 80026e6:	6a14      	ldr	r4, [r2, #32]
                      sConfig->ICSelection,
 80026e8:	e9d1 0500 	ldrd	r0, r5, [r1]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80026ec:	0300      	lsls	r0, r0, #12
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80026ee:	f424 4420 	bic.w	r4, r4, #40960	@ 0xa000
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80026f2:	f400 4020 	and.w	r0, r0, #40960	@ 0xa000
 80026f6:	4320      	orrs	r0, r4
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80026f8:	6a14      	ldr	r4, [r2, #32]
 80026fa:	f424 5480 	bic.w	r4, r4, #4096	@ 0x1000
 80026fe:	6214      	str	r4, [r2, #32]
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8002700:	688c      	ldr	r4, [r1, #8]
  tmpccmr2 = TIMx->CCMR2;
 8002702:	69d1      	ldr	r1, [r2, #28]
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8002704:	f421 7140 	bic.w	r1, r1, #768	@ 0x300
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8002708:	ea41 2105 	orr.w	r1, r1, r5, lsl #8
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800270c:	f366 310f 	bfi	r1, r6, #12, #4
  TIMx->CCMR2 = tmpccmr2;
 8002710:	61d1      	str	r1, [r2, #28]
  TIMx->CCER = tmpccer ;
 8002712:	6210      	str	r0, [r2, #32]
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8002714:	69d1      	ldr	r1, [r2, #28]
 8002716:	f421 6140 	bic.w	r1, r1, #3072	@ 0xc00
 800271a:	61d1      	str	r1, [r2, #28]
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800271c:	69d1      	ldr	r1, [r2, #28]
 800271e:	ea41 2104 	orr.w	r1, r1, r4, lsl #8
 8002722:	61d1      	str	r1, [r2, #28]
  __HAL_UNLOCK(htim);
 8002724:	2200      	movs	r2, #0
 8002726:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  HAL_StatusTypeDef status = HAL_OK;
 800272a:	2000      	movs	r0, #0
}
 800272c:	bcf0      	pop	{r4, r5, r6, r7}
 800272e:	4770      	bx	lr
    TIM_TI1_SetConfig(htim->Instance,
 8002730:	681a      	ldr	r2, [r3, #0]
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8002732:	f8df c0f8 	ldr.w	ip, [pc, #248]	@ 800282c <HAL_TIM_IC_ConfigChannel+0x180>
  tmpccer = TIMx->CCER;
 8002736:	6a15      	ldr	r5, [r2, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002738:	6a16      	ldr	r6, [r2, #32]
                      sConfig->ICFilter);
 800273a:	68cf      	ldr	r7, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800273c:	f026 0601 	bic.w	r6, r6, #1
                      sConfig->ICSelection,
 8002740:	e9d1 0400 	ldrd	r0, r4, [r1]
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8002744:	4562      	cmp	r2, ip
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002746:	6216      	str	r6, [r2, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002748:	6996      	ldr	r6, [r2, #24]
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800274a:	d057      	beq.n	80027fc <HAL_TIM_IC_ConfigChannel+0x150>
 800274c:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
 8002750:	d054      	beq.n	80027fc <HAL_TIM_IC_ConfigChannel+0x150>
 8002752:	f5ac 4c7c 	sub.w	ip, ip, #64512	@ 0xfc00
 8002756:	4562      	cmp	r2, ip
 8002758:	d050      	beq.n	80027fc <HAL_TIM_IC_ConfigChannel+0x150>
 800275a:	f50c 6c80 	add.w	ip, ip, #1024	@ 0x400
 800275e:	4562      	cmp	r2, ip
 8002760:	d04c      	beq.n	80027fc <HAL_TIM_IC_ConfigChannel+0x150>
 8002762:	f50c 6c80 	add.w	ip, ip, #1024	@ 0x400
 8002766:	4562      	cmp	r2, ip
 8002768:	d048      	beq.n	80027fc <HAL_TIM_IC_ConfigChannel+0x150>
 800276a:	f50c 3c9a 	add.w	ip, ip, #78848	@ 0x13400
 800276e:	4562      	cmp	r2, ip
 8002770:	d044      	beq.n	80027fc <HAL_TIM_IC_ConfigChannel+0x150>
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8002772:	f046 0401 	orr.w	r4, r6, #1
 8002776:	e044      	b.n	8002802 <HAL_TIM_IC_ConfigChannel+0x156>
    TIM_TI2_SetConfig(htim->Instance,
 8002778:	681a      	ldr	r2, [r3, #0]
                      sConfig->ICFilter);
 800277a:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 800277c:	6a14      	ldr	r4, [r2, #32]
                      sConfig->ICSelection,
 800277e:	e9d1 0500 	ldrd	r0, r5, [r1]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8002782:	0100      	lsls	r0, r0, #4
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002784:	f024 04a0 	bic.w	r4, r4, #160	@ 0xa0
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8002788:	f000 00a0 	and.w	r0, r0, #160	@ 0xa0
 800278c:	4320      	orrs	r0, r4
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800278e:	6a14      	ldr	r4, [r2, #32]
 8002790:	f024 0410 	bic.w	r4, r4, #16
 8002794:	6214      	str	r4, [r2, #32]
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8002796:	688c      	ldr	r4, [r1, #8]
  tmpccmr1 = TIMx->CCMR1;
 8002798:	6991      	ldr	r1, [r2, #24]
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800279a:	f421 7140 	bic.w	r1, r1, #768	@ 0x300
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800279e:	ea41 2105 	orr.w	r1, r1, r5, lsl #8
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80027a2:	f366 310f 	bfi	r1, r6, #12, #4
  TIMx->CCMR1 = tmpccmr1 ;
 80027a6:	6191      	str	r1, [r2, #24]
  TIMx->CCER = tmpccer;
 80027a8:	6210      	str	r0, [r2, #32]
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80027aa:	6991      	ldr	r1, [r2, #24]
 80027ac:	f421 6140 	bic.w	r1, r1, #3072	@ 0xc00
 80027b0:	6191      	str	r1, [r2, #24]
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80027b2:	6991      	ldr	r1, [r2, #24]
 80027b4:	ea41 2104 	orr.w	r1, r1, r4, lsl #8
 80027b8:	6191      	str	r1, [r2, #24]
 80027ba:	e7b3      	b.n	8002724 <HAL_TIM_IC_ConfigChannel+0x78>
    TIM_TI3_SetConfig(htim->Instance,
 80027bc:	681a      	ldr	r2, [r3, #0]
                      sConfig->ICFilter);
 80027be:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 80027c0:	6a15      	ldr	r5, [r2, #32]
                      sConfig->ICSelection,
 80027c2:	e9d1 0400 	ldrd	r0, r4, [r1]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80027c6:	0200      	lsls	r0, r0, #8
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80027c8:	f425 6520 	bic.w	r5, r5, #2560	@ 0xa00
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80027cc:	f400 6020 	and.w	r0, r0, #2560	@ 0xa00
 80027d0:	4328      	orrs	r0, r5
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80027d2:	6a15      	ldr	r5, [r2, #32]
 80027d4:	f425 7580 	bic.w	r5, r5, #256	@ 0x100
 80027d8:	6215      	str	r5, [r2, #32]
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80027da:	688d      	ldr	r5, [r1, #8]
  tmpccmr2 = TIMx->CCMR2;
 80027dc:	69d1      	ldr	r1, [r2, #28]
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80027de:	f021 0103 	bic.w	r1, r1, #3
  tmpccmr2 |= TIM_ICSelection;
 80027e2:	4321      	orrs	r1, r4
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80027e4:	f366 1107 	bfi	r1, r6, #4, #4
  TIMx->CCMR2 = tmpccmr2;
 80027e8:	61d1      	str	r1, [r2, #28]
  TIMx->CCER = tmpccer;
 80027ea:	6210      	str	r0, [r2, #32]
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80027ec:	69d1      	ldr	r1, [r2, #28]
 80027ee:	f021 010c 	bic.w	r1, r1, #12
 80027f2:	61d1      	str	r1, [r2, #28]
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80027f4:	69d1      	ldr	r1, [r2, #28]
 80027f6:	4329      	orrs	r1, r5
 80027f8:	61d1      	str	r1, [r2, #28]
 80027fa:	e793      	b.n	8002724 <HAL_TIM_IC_ConfigChannel+0x78>
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80027fc:	f026 0603 	bic.w	r6, r6, #3
    tmpccmr1 |= TIM_ICSelection;
 8002800:	4334      	orrs	r4, r6
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8002802:	f367 1407 	bfi	r4, r7, #4, #4
  TIMx->CCMR1 = tmpccmr1;
 8002806:	6194      	str	r4, [r2, #24]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8002808:	f000 000a 	and.w	r0, r0, #10
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800280c:	f025 040a 	bic.w	r4, r5, #10
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8002810:	4320      	orrs	r0, r4
  TIMx->CCER = tmpccer;
 8002812:	6210      	str	r0, [r2, #32]
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8002814:	6990      	ldr	r0, [r2, #24]
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8002816:	688c      	ldr	r4, [r1, #8]
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8002818:	f020 000c 	bic.w	r0, r0, #12
 800281c:	6190      	str	r0, [r2, #24]
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800281e:	6991      	ldr	r1, [r2, #24]
 8002820:	4321      	orrs	r1, r4
 8002822:	6191      	str	r1, [r2, #24]
 8002824:	e77e      	b.n	8002724 <HAL_TIM_IC_ConfigChannel+0x78>
  __HAL_LOCK(htim);
 8002826:	2002      	movs	r0, #2
}
 8002828:	4770      	bx	lr
 800282a:	bf00      	nop
 800282c:	40010000 	.word	0x40010000

08002830 <HAL_TIM_PWM_ConfigChannel>:
{
 8002830:	4603      	mov	r3, r0
  __HAL_LOCK(htim);
 8002832:	f890 003c 	ldrb.w	r0, [r0, #60]	@ 0x3c
 8002836:	2801      	cmp	r0, #1
 8002838:	f000 80b6 	beq.w	80029a8 <HAL_TIM_PWM_ConfigChannel+0x178>
 800283c:	2001      	movs	r0, #1
{
 800283e:	b4f0      	push	{r4, r5, r6, r7}
  __HAL_LOCK(htim);
 8002840:	f883 003c 	strb.w	r0, [r3, #60]	@ 0x3c
  switch (Channel)
 8002844:	2a0c      	cmp	r2, #12
 8002846:	d808      	bhi.n	800285a <HAL_TIM_PWM_ConfigChannel+0x2a>
 8002848:	e8df f002 	tbb	[pc, r2]
 800284c:	0707073b 	.word	0x0707073b
 8002850:	07070760 	.word	0x07070760
 8002854:	07070788 	.word	0x07070788
 8002858:	0d          	.byte	0x0d
 8002859:	00          	.byte	0x00
  __HAL_UNLOCK(htim);
 800285a:	2200      	movs	r2, #0
 800285c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  switch (Channel)
 8002860:	2001      	movs	r0, #1
}
 8002862:	bcf0      	pop	{r4, r5, r6, r7}
 8002864:	4770      	bx	lr
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002866:	681a      	ldr	r2, [r3, #0]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002868:	680e      	ldr	r6, [r1, #0]
  tmpccer = TIMx->CCER;
 800286a:	6a10      	ldr	r0, [r2, #32]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800286c:	6a14      	ldr	r4, [r2, #32]
 800286e:	f424 5480 	bic.w	r4, r4, #4096	@ 0x1000
 8002872:	6214      	str	r4, [r2, #32]
  tmpcr2 =  TIMx->CR2;
 8002874:	6855      	ldr	r5, [r2, #4]
  tmpccmrx = TIMx->CCMR2;
 8002876:	69d4      	ldr	r4, [r2, #28]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002878:	f424 44e6 	bic.w	r4, r4, #29440	@ 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800287c:	ea44 2406 	orr.w	r4, r4, r6, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002880:	688e      	ldr	r6, [r1, #8]
  tmpccer &= ~TIM_CCER_CC4P;
 8002882:	f420 5000 	bic.w	r0, r0, #8192	@ 0x2000
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002886:	ea40 3006 	orr.w	r0, r0, r6, lsl #12
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800288a:	4e61      	ldr	r6, [pc, #388]	@ (8002a10 <HAL_TIM_PWM_ConfigChannel+0x1e0>)
 800288c:	42b2      	cmp	r2, r6
 800288e:	f000 80a9 	beq.w	80029e4 <HAL_TIM_PWM_ConfigChannel+0x1b4>
  TIMx->CR2 = tmpcr2;
 8002892:	6055      	str	r5, [r2, #4]
  TIMx->CCMR2 = tmpccmrx;
 8002894:	61d4      	str	r4, [r2, #28]
  TIMx->CCR4 = OC_Config->Pulse;
 8002896:	684c      	ldr	r4, [r1, #4]
 8002898:	6414      	str	r4, [r2, #64]	@ 0x40
  TIMx->CCER = tmpccer;
 800289a:	6210      	str	r0, [r2, #32]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800289c:	69d0      	ldr	r0, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800289e:	690c      	ldr	r4, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80028a0:	f440 6000 	orr.w	r0, r0, #2048	@ 0x800
 80028a4:	61d0      	str	r0, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80028a6:	69d1      	ldr	r1, [r2, #28]
 80028a8:	f421 6180 	bic.w	r1, r1, #1024	@ 0x400
 80028ac:	61d1      	str	r1, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80028ae:	69d1      	ldr	r1, [r2, #28]
 80028b0:	ea41 2104 	orr.w	r1, r1, r4, lsl #8
 80028b4:	61d1      	str	r1, [r2, #28]
  __HAL_UNLOCK(htim);
 80028b6:	2200      	movs	r2, #0
 80028b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  HAL_StatusTypeDef status = HAL_OK;
 80028bc:	2000      	movs	r0, #0
}
 80028be:	bcf0      	pop	{r4, r5, r6, r7}
 80028c0:	4770      	bx	lr
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80028c2:	681a      	ldr	r2, [r3, #0]
  tmpccmrx |= OC_Config->OCMode;
 80028c4:	680e      	ldr	r6, [r1, #0]
  tmpccer = TIMx->CCER;
 80028c6:	6a10      	ldr	r0, [r2, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80028c8:	6a14      	ldr	r4, [r2, #32]
 80028ca:	f024 0401 	bic.w	r4, r4, #1
 80028ce:	6214      	str	r4, [r2, #32]
  tmpcr2 =  TIMx->CR2;
 80028d0:	6855      	ldr	r5, [r2, #4]
  tmpccmrx = TIMx->CCMR1;
 80028d2:	6994      	ldr	r4, [r2, #24]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80028d4:	f024 0473 	bic.w	r4, r4, #115	@ 0x73
  tmpccmrx |= OC_Config->OCMode;
 80028d8:	4334      	orrs	r4, r6
  tmpccer |= OC_Config->OCPolarity;
 80028da:	688e      	ldr	r6, [r1, #8]
  tmpccer &= ~TIM_CCER_CC1P;
 80028dc:	f020 0002 	bic.w	r0, r0, #2
  tmpccer |= OC_Config->OCPolarity;
 80028e0:	4330      	orrs	r0, r6
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80028e2:	4e4b      	ldr	r6, [pc, #300]	@ (8002a10 <HAL_TIM_PWM_ConfigChannel+0x1e0>)
 80028e4:	42b2      	cmp	r2, r6
 80028e6:	d061      	beq.n	80029ac <HAL_TIM_PWM_ConfigChannel+0x17c>
  TIMx->CR2 = tmpcr2;
 80028e8:	6055      	str	r5, [r2, #4]
  TIMx->CCMR1 = tmpccmrx;
 80028ea:	6194      	str	r4, [r2, #24]
  TIMx->CCR1 = OC_Config->Pulse;
 80028ec:	684c      	ldr	r4, [r1, #4]
 80028ee:	6354      	str	r4, [r2, #52]	@ 0x34
  TIMx->CCER = tmpccer;
 80028f0:	6210      	str	r0, [r2, #32]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80028f2:	6990      	ldr	r0, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80028f4:	690c      	ldr	r4, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80028f6:	f040 0008 	orr.w	r0, r0, #8
 80028fa:	6190      	str	r0, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80028fc:	6991      	ldr	r1, [r2, #24]
 80028fe:	f021 0104 	bic.w	r1, r1, #4
 8002902:	6191      	str	r1, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002904:	6991      	ldr	r1, [r2, #24]
 8002906:	4321      	orrs	r1, r4
 8002908:	6191      	str	r1, [r2, #24]
      break;
 800290a:	e7d4      	b.n	80028b6 <HAL_TIM_PWM_ConfigChannel+0x86>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800290c:	681a      	ldr	r2, [r3, #0]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800290e:	680e      	ldr	r6, [r1, #0]
  tmpccer = TIMx->CCER;
 8002910:	6a10      	ldr	r0, [r2, #32]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002912:	6a14      	ldr	r4, [r2, #32]
 8002914:	f024 0410 	bic.w	r4, r4, #16
 8002918:	6214      	str	r4, [r2, #32]
  tmpcr2 =  TIMx->CR2;
 800291a:	6855      	ldr	r5, [r2, #4]
  tmpccmrx = TIMx->CCMR1;
 800291c:	6994      	ldr	r4, [r2, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800291e:	f424 44e6 	bic.w	r4, r4, #29440	@ 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002922:	ea44 2406 	orr.w	r4, r4, r6, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002926:	688e      	ldr	r6, [r1, #8]
  tmpccer &= ~TIM_CCER_CC2P;
 8002928:	f020 0020 	bic.w	r0, r0, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800292c:	ea40 1006 	orr.w	r0, r0, r6, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002930:	4e37      	ldr	r6, [pc, #220]	@ (8002a10 <HAL_TIM_PWM_ConfigChannel+0x1e0>)
 8002932:	42b2      	cmp	r2, r6
 8002934:	d047      	beq.n	80029c6 <HAL_TIM_PWM_ConfigChannel+0x196>
  TIMx->CR2 = tmpcr2;
 8002936:	6055      	str	r5, [r2, #4]
  TIMx->CCMR1 = tmpccmrx;
 8002938:	6194      	str	r4, [r2, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 800293a:	684c      	ldr	r4, [r1, #4]
 800293c:	6394      	str	r4, [r2, #56]	@ 0x38
  TIMx->CCER = tmpccer;
 800293e:	6210      	str	r0, [r2, #32]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002940:	6990      	ldr	r0, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002942:	690c      	ldr	r4, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002944:	f440 6000 	orr.w	r0, r0, #2048	@ 0x800
 8002948:	6190      	str	r0, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800294a:	6991      	ldr	r1, [r2, #24]
 800294c:	f421 6180 	bic.w	r1, r1, #1024	@ 0x400
 8002950:	6191      	str	r1, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002952:	6991      	ldr	r1, [r2, #24]
 8002954:	ea41 2104 	orr.w	r1, r1, r4, lsl #8
 8002958:	6191      	str	r1, [r2, #24]
      break;
 800295a:	e7ac      	b.n	80028b6 <HAL_TIM_PWM_ConfigChannel+0x86>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800295c:	681a      	ldr	r2, [r3, #0]
  tmpccmrx |= OC_Config->OCMode;
 800295e:	680e      	ldr	r6, [r1, #0]
  tmpccer = TIMx->CCER;
 8002960:	6a10      	ldr	r0, [r2, #32]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002962:	6a14      	ldr	r4, [r2, #32]
 8002964:	f424 7480 	bic.w	r4, r4, #256	@ 0x100
 8002968:	6214      	str	r4, [r2, #32]
  tmpcr2 =  TIMx->CR2;
 800296a:	6855      	ldr	r5, [r2, #4]
  tmpccmrx = TIMx->CCMR2;
 800296c:	69d4      	ldr	r4, [r2, #28]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800296e:	f024 0473 	bic.w	r4, r4, #115	@ 0x73
  tmpccmrx |= OC_Config->OCMode;
 8002972:	4334      	orrs	r4, r6
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002974:	688e      	ldr	r6, [r1, #8]
  tmpccer &= ~TIM_CCER_CC3P;
 8002976:	f420 7000 	bic.w	r0, r0, #512	@ 0x200
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800297a:	ea40 2006 	orr.w	r0, r0, r6, lsl #8
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800297e:	4e24      	ldr	r6, [pc, #144]	@ (8002a10 <HAL_TIM_PWM_ConfigChannel+0x1e0>)
 8002980:	42b2      	cmp	r2, r6
 8002982:	d035      	beq.n	80029f0 <HAL_TIM_PWM_ConfigChannel+0x1c0>
  TIMx->CR2 = tmpcr2;
 8002984:	6055      	str	r5, [r2, #4]
  TIMx->CCMR2 = tmpccmrx;
 8002986:	61d4      	str	r4, [r2, #28]
  TIMx->CCR3 = OC_Config->Pulse;
 8002988:	684c      	ldr	r4, [r1, #4]
 800298a:	63d4      	str	r4, [r2, #60]	@ 0x3c
  TIMx->CCER = tmpccer;
 800298c:	6210      	str	r0, [r2, #32]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800298e:	69d0      	ldr	r0, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002990:	690c      	ldr	r4, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002992:	f040 0008 	orr.w	r0, r0, #8
 8002996:	61d0      	str	r0, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002998:	69d1      	ldr	r1, [r2, #28]
 800299a:	f021 0104 	bic.w	r1, r1, #4
 800299e:	61d1      	str	r1, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80029a0:	69d1      	ldr	r1, [r2, #28]
 80029a2:	4321      	orrs	r1, r4
 80029a4:	61d1      	str	r1, [r2, #28]
      break;
 80029a6:	e786      	b.n	80028b6 <HAL_TIM_PWM_ConfigChannel+0x86>
  __HAL_LOCK(htim);
 80029a8:	2002      	movs	r0, #2
}
 80029aa:	4770      	bx	lr
    tmpccer |= OC_Config->OCNPolarity;
 80029ac:	68ce      	ldr	r6, [r1, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 80029ae:	f020 0008 	bic.w	r0, r0, #8
    tmpccer |= OC_Config->OCNPolarity;
 80029b2:	4330      	orrs	r0, r6
    tmpcr2 |= OC_Config->OCNIdleState;
 80029b4:	e9d1 6705 	ldrd	r6, r7, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80029b8:	f425 7540 	bic.w	r5, r5, #768	@ 0x300
    tmpcr2 |= OC_Config->OCNIdleState;
 80029bc:	433e      	orrs	r6, r7
    tmpccer &= ~TIM_CCER_CC1NE;
 80029be:	f020 0004 	bic.w	r0, r0, #4
    tmpcr2 |= OC_Config->OCNIdleState;
 80029c2:	4335      	orrs	r5, r6
 80029c4:	e790      	b.n	80028e8 <HAL_TIM_PWM_ConfigChannel+0xb8>
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80029c6:	68ce      	ldr	r6, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 80029c8:	f020 0080 	bic.w	r0, r0, #128	@ 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80029cc:	ea40 1006 	orr.w	r0, r0, r6, lsl #4
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80029d0:	e9d1 6705 	ldrd	r6, r7, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80029d4:	f425 6540 	bic.w	r5, r5, #3072	@ 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80029d8:	433e      	orrs	r6, r7
    tmpccer &= ~TIM_CCER_CC2NE;
 80029da:	f020 0040 	bic.w	r0, r0, #64	@ 0x40
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80029de:	ea45 0586 	orr.w	r5, r5, r6, lsl #2
 80029e2:	e7a8      	b.n	8002936 <HAL_TIM_PWM_ConfigChannel+0x106>
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80029e4:	694e      	ldr	r6, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4;
 80029e6:	f425 4580 	bic.w	r5, r5, #16384	@ 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80029ea:	ea45 1586 	orr.w	r5, r5, r6, lsl #6
 80029ee:	e750      	b.n	8002892 <HAL_TIM_PWM_ConfigChannel+0x62>
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80029f0:	68ce      	ldr	r6, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 80029f2:	f420 6000 	bic.w	r0, r0, #2048	@ 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80029f6:	ea40 2006 	orr.w	r0, r0, r6, lsl #8
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80029fa:	e9d1 6705 	ldrd	r6, r7, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80029fe:	f425 5540 	bic.w	r5, r5, #12288	@ 0x3000
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002a02:	433e      	orrs	r6, r7
    tmpccer &= ~TIM_CCER_CC3NE;
 8002a04:	f420 6080 	bic.w	r0, r0, #1024	@ 0x400
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002a08:	ea45 1506 	orr.w	r5, r5, r6, lsl #4
 8002a0c:	e7ba      	b.n	8002984 <HAL_TIM_PWM_ConfigChannel+0x154>
 8002a0e:	bf00      	nop
 8002a10:	40010000 	.word	0x40010000

08002a14 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8002a14:	f890 203c 	ldrb.w	r2, [r0, #60]	@ 0x3c
 8002a18:	2a01      	cmp	r2, #1
 8002a1a:	d06e      	beq.n	8002afa <HAL_TIM_ConfigClockSource+0xe6>
 8002a1c:	4603      	mov	r3, r0
  tmpsmcr = htim->Instance->SMCR;
 8002a1e:	6802      	ldr	r2, [r0, #0]
{
 8002a20:	b430      	push	{r4, r5}
  __HAL_LOCK(htim);
 8002a22:	2001      	movs	r0, #1
  htim->State = HAL_TIM_STATE_BUSY;
 8002a24:	2402      	movs	r4, #2
  __HAL_LOCK(htim);
 8002a26:	f883 003c 	strb.w	r0, [r3, #60]	@ 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 8002a2a:	f883 403d 	strb.w	r4, [r3, #61]	@ 0x3d
  tmpsmcr = htim->Instance->SMCR;
 8002a2e:	6894      	ldr	r4, [r2, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002a30:	f424 447f 	bic.w	r4, r4, #65280	@ 0xff00
 8002a34:	f024 0477 	bic.w	r4, r4, #119	@ 0x77
  htim->Instance->SMCR = tmpsmcr;
 8002a38:	6094      	str	r4, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 8002a3a:	680c      	ldr	r4, [r1, #0]
 8002a3c:	2c60      	cmp	r4, #96	@ 0x60
 8002a3e:	d076      	beq.n	8002b2e <HAL_TIM_ConfigClockSource+0x11a>
 8002a40:	d811      	bhi.n	8002a66 <HAL_TIM_ConfigClockSource+0x52>
 8002a42:	2c40      	cmp	r4, #64	@ 0x40
 8002a44:	d05b      	beq.n	8002afe <HAL_TIM_ConfigClockSource+0xea>
 8002a46:	d82e      	bhi.n	8002aa6 <HAL_TIM_ConfigClockSource+0x92>
 8002a48:	2c20      	cmp	r4, #32
 8002a4a:	d004      	beq.n	8002a56 <HAL_TIM_ConfigClockSource+0x42>
 8002a4c:	f200 8088 	bhi.w	8002b60 <HAL_TIM_ConfigClockSource+0x14c>
 8002a50:	f034 0110 	bics.w	r1, r4, #16
 8002a54:	d11f      	bne.n	8002a96 <HAL_TIM_ConfigClockSource+0x82>
  tmpsmcr = TIMx->SMCR;
 8002a56:	6891      	ldr	r1, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8002a58:	f021 0170 	bic.w	r1, r1, #112	@ 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002a5c:	4321      	orrs	r1, r4
 8002a5e:	f041 0107 	orr.w	r1, r1, #7
  TIMx->SMCR = tmpsmcr;
 8002a62:	6091      	str	r1, [r2, #8]
}
 8002a64:	e016      	b.n	8002a94 <HAL_TIM_ConfigClockSource+0x80>
  switch (sClockSourceConfig->ClockSource)
 8002a66:	f5b4 5f80 	cmp.w	r4, #4096	@ 0x1000
 8002a6a:	d013      	beq.n	8002a94 <HAL_TIM_ConfigClockSource+0x80>
 8002a6c:	f5b4 5f00 	cmp.w	r4, #8192	@ 0x2000
 8002a70:	d033      	beq.n	8002ada <HAL_TIM_ConfigClockSource+0xc6>
 8002a72:	2c70      	cmp	r4, #112	@ 0x70
 8002a74:	d10f      	bne.n	8002a96 <HAL_TIM_ConfigClockSource+0x82>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002a76:	e9d1 5001 	ldrd	r5, r0, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 8002a7a:	6894      	ldr	r4, [r2, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002a7c:	4328      	orrs	r0, r5
 8002a7e:	68cd      	ldr	r5, [r1, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002a80:	f424 417f 	bic.w	r1, r4, #65280	@ 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002a84:	ea40 2005 	orr.w	r0, r0, r5, lsl #8
 8002a88:	4308      	orrs	r0, r1
  TIMx->SMCR = tmpsmcr;
 8002a8a:	6090      	str	r0, [r2, #8]
      tmpsmcr = htim->Instance->SMCR;
 8002a8c:	6891      	ldr	r1, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002a8e:	f041 0177 	orr.w	r1, r1, #119	@ 0x77
      htim->Instance->SMCR = tmpsmcr;
 8002a92:	6091      	str	r1, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8002a94:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8002a96:	2101      	movs	r1, #1
  __HAL_UNLOCK(htim);
 8002a98:	2200      	movs	r2, #0
  htim->State = HAL_TIM_STATE_READY;
 8002a9a:	f883 103d 	strb.w	r1, [r3, #61]	@ 0x3d
  __HAL_UNLOCK(htim);
 8002a9e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 8002aa2:	bc30      	pop	{r4, r5}
 8002aa4:	4770      	bx	lr
  switch (sClockSourceConfig->ClockSource)
 8002aa6:	2c50      	cmp	r4, #80	@ 0x50
 8002aa8:	d1f5      	bne.n	8002a96 <HAL_TIM_ConfigClockSource+0x82>
                               sClockSourceConfig->ClockPolarity,
 8002aaa:	6848      	ldr	r0, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 8002aac:	68cc      	ldr	r4, [r1, #12]
  tmpccer = TIMx->CCER;
 8002aae:	6a11      	ldr	r1, [r2, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002ab0:	f021 010a 	bic.w	r1, r1, #10
  tmpccer |= TIM_ICPolarity;
 8002ab4:	4308      	orrs	r0, r1
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002ab6:	6a11      	ldr	r1, [r2, #32]
 8002ab8:	f021 0101 	bic.w	r1, r1, #1
 8002abc:	6211      	str	r1, [r2, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002abe:	6991      	ldr	r1, [r2, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002ac0:	f021 01f0 	bic.w	r1, r1, #240	@ 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002ac4:	ea41 1104 	orr.w	r1, r1, r4, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8002ac8:	6191      	str	r1, [r2, #24]
  TIMx->CCER = tmpccer;
 8002aca:	6210      	str	r0, [r2, #32]
  tmpsmcr = TIMx->SMCR;
 8002acc:	6891      	ldr	r1, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8002ace:	f021 0170 	bic.w	r1, r1, #112	@ 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002ad2:	f041 0157 	orr.w	r1, r1, #87	@ 0x57
  TIMx->SMCR = tmpsmcr;
 8002ad6:	6091      	str	r1, [r2, #8]
}
 8002ad8:	e7dc      	b.n	8002a94 <HAL_TIM_ConfigClockSource+0x80>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002ada:	e9d1 5001 	ldrd	r5, r0, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 8002ade:	6894      	ldr	r4, [r2, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002ae0:	4328      	orrs	r0, r5
 8002ae2:	68cd      	ldr	r5, [r1, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002ae4:	f424 417f 	bic.w	r1, r4, #65280	@ 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002ae8:	ea40 2005 	orr.w	r0, r0, r5, lsl #8
 8002aec:	4308      	orrs	r0, r1
  TIMx->SMCR = tmpsmcr;
 8002aee:	6090      	str	r0, [r2, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002af0:	6891      	ldr	r1, [r2, #8]
 8002af2:	f441 4180 	orr.w	r1, r1, #16384	@ 0x4000
 8002af6:	6091      	str	r1, [r2, #8]
      break;
 8002af8:	e7cc      	b.n	8002a94 <HAL_TIM_ConfigClockSource+0x80>
  __HAL_LOCK(htim);
 8002afa:	2002      	movs	r0, #2
}
 8002afc:	4770      	bx	lr
                               sClockSourceConfig->ClockPolarity,
 8002afe:	6848      	ldr	r0, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 8002b00:	68cc      	ldr	r4, [r1, #12]
  tmpccer = TIMx->CCER;
 8002b02:	6a11      	ldr	r1, [r2, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002b04:	f021 010a 	bic.w	r1, r1, #10
  tmpccer |= TIM_ICPolarity;
 8002b08:	4308      	orrs	r0, r1
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002b0a:	6a11      	ldr	r1, [r2, #32]
 8002b0c:	f021 0101 	bic.w	r1, r1, #1
 8002b10:	6211      	str	r1, [r2, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002b12:	6991      	ldr	r1, [r2, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002b14:	f021 01f0 	bic.w	r1, r1, #240	@ 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002b18:	ea41 1104 	orr.w	r1, r1, r4, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8002b1c:	6191      	str	r1, [r2, #24]
  TIMx->CCER = tmpccer;
 8002b1e:	6210      	str	r0, [r2, #32]
  tmpsmcr = TIMx->SMCR;
 8002b20:	6891      	ldr	r1, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8002b22:	f021 0170 	bic.w	r1, r1, #112	@ 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002b26:	f041 0147 	orr.w	r1, r1, #71	@ 0x47
  TIMx->SMCR = tmpsmcr;
 8002b2a:	6091      	str	r1, [r2, #8]
}
 8002b2c:	e7b2      	b.n	8002a94 <HAL_TIM_ConfigClockSource+0x80>
                               sClockSourceConfig->ClockPolarity,
 8002b2e:	6848      	ldr	r0, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 8002b30:	68cc      	ldr	r4, [r1, #12]
  tmpccer = TIMx->CCER;
 8002b32:	6a11      	ldr	r1, [r2, #32]
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002b34:	f021 01a0 	bic.w	r1, r1, #160	@ 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8002b38:	ea41 1100 	orr.w	r1, r1, r0, lsl #4
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002b3c:	6a10      	ldr	r0, [r2, #32]
 8002b3e:	f020 0010 	bic.w	r0, r0, #16
 8002b42:	6210      	str	r0, [r2, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002b44:	6990      	ldr	r0, [r2, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002b46:	f420 4070 	bic.w	r0, r0, #61440	@ 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002b4a:	ea40 3004 	orr.w	r0, r0, r4, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 8002b4e:	6190      	str	r0, [r2, #24]
  TIMx->CCER = tmpccer;
 8002b50:	6211      	str	r1, [r2, #32]
  tmpsmcr = TIMx->SMCR;
 8002b52:	6891      	ldr	r1, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8002b54:	f021 0170 	bic.w	r1, r1, #112	@ 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002b58:	f041 0167 	orr.w	r1, r1, #103	@ 0x67
  TIMx->SMCR = tmpsmcr;
 8002b5c:	6091      	str	r1, [r2, #8]
}
 8002b5e:	e799      	b.n	8002a94 <HAL_TIM_ConfigClockSource+0x80>
  switch (sClockSourceConfig->ClockSource)
 8002b60:	2c30      	cmp	r4, #48	@ 0x30
 8002b62:	f43f af78 	beq.w	8002a56 <HAL_TIM_ConfigClockSource+0x42>
 8002b66:	e796      	b.n	8002a96 <HAL_TIM_ConfigClockSource+0x82>

08002b68 <HAL_TIM_SlaveConfigSynchro>:
  __HAL_LOCK(htim);
 8002b68:	f890 203c 	ldrb.w	r2, [r0, #60]	@ 0x3c
 8002b6c:	2a01      	cmp	r2, #1
 8002b6e:	d046      	beq.n	8002bfe <HAL_TIM_SlaveConfigSynchro+0x96>
 8002b70:	4603      	mov	r3, r0
{
 8002b72:	b430      	push	{r4, r5}
  tmpsmcr = htim->Instance->SMCR;
 8002b74:	6800      	ldr	r0, [r0, #0]
  __HAL_LOCK(htim);
 8002b76:	2401      	movs	r4, #1
  htim->State = HAL_TIM_STATE_BUSY;
 8002b78:	2202      	movs	r2, #2
  __HAL_LOCK(htim);
 8002b7a:	f883 403c 	strb.w	r4, [r3, #60]	@ 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 8002b7e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  tmpsmcr = htim->Instance->SMCR;
 8002b82:	6882      	ldr	r2, [r0, #8]
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8002b84:	684c      	ldr	r4, [r1, #4]
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8002b86:	680d      	ldr	r5, [r1, #0]
  tmpsmcr &= ~TIM_SMCR_TS;
 8002b88:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8002b8c:	4322      	orrs	r2, r4
  tmpsmcr &= ~TIM_SMCR_SMS;
 8002b8e:	f022 0207 	bic.w	r2, r2, #7
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8002b92:	432a      	orrs	r2, r5
  switch (sSlaveConfig->InputTrigger)
 8002b94:	2c50      	cmp	r4, #80	@ 0x50
  htim->Instance->SMCR = tmpsmcr;
 8002b96:	6082      	str	r2, [r0, #8]
  switch (sSlaveConfig->InputTrigger)
 8002b98:	d056      	beq.n	8002c48 <HAL_TIM_SlaveConfigSynchro+0xe0>
 8002b9a:	d91f      	bls.n	8002bdc <HAL_TIM_SlaveConfigSynchro+0x74>
 8002b9c:	2c60      	cmp	r4, #96	@ 0x60
 8002b9e:	d030      	beq.n	8002c02 <HAL_TIM_SlaveConfigSynchro+0x9a>
 8002ba0:	2c70      	cmp	r4, #112	@ 0x70
 8002ba2:	d124      	bne.n	8002bee <HAL_TIM_SlaveConfigSynchro+0x86>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002ba4:	e9d1 5202 	ldrd	r5, r2, [r1, #8]
  tmpsmcr = TIMx->SMCR;
 8002ba8:	6884      	ldr	r4, [r0, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002baa:	432a      	orrs	r2, r5
 8002bac:	690d      	ldr	r5, [r1, #16]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002bae:	f424 417f 	bic.w	r1, r4, #65280	@ 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002bb2:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
 8002bb6:	430a      	orrs	r2, r1
  TIMx->SMCR = tmpsmcr;
 8002bb8:	6082      	str	r2, [r0, #8]
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8002bba:	68c2      	ldr	r2, [r0, #12]
 8002bbc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002bc0:	60c2      	str	r2, [r0, #12]
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8002bc2:	68c2      	ldr	r2, [r0, #12]
  __HAL_UNLOCK(htim);
 8002bc4:	2100      	movs	r1, #0
  htim->State = HAL_TIM_STATE_READY;
 8002bc6:	2401      	movs	r4, #1
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8002bc8:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8002bcc:	60c2      	str	r2, [r0, #12]
  htim->State = HAL_TIM_STATE_READY;
 8002bce:	f883 403d 	strb.w	r4, [r3, #61]	@ 0x3d
  __HAL_UNLOCK(htim);
 8002bd2:	f883 103c 	strb.w	r1, [r3, #60]	@ 0x3c
  return HAL_OK;
 8002bd6:	4608      	mov	r0, r1
}
 8002bd8:	bc30      	pop	{r4, r5}
 8002bda:	4770      	bx	lr
  switch (sSlaveConfig->InputTrigger)
 8002bdc:	2c40      	cmp	r4, #64	@ 0x40
 8002bde:	d023      	beq.n	8002c28 <HAL_TIM_SlaveConfigSynchro+0xc0>
 8002be0:	d805      	bhi.n	8002bee <HAL_TIM_SlaveConfigSynchro+0x86>
 8002be2:	2c20      	cmp	r4, #32
 8002be4:	d0e9      	beq.n	8002bba <HAL_TIM_SlaveConfigSynchro+0x52>
 8002be6:	d841      	bhi.n	8002c6c <HAL_TIM_SlaveConfigSynchro+0x104>
 8002be8:	f034 0210 	bics.w	r2, r4, #16
 8002bec:	d0e5      	beq.n	8002bba <HAL_TIM_SlaveConfigSynchro+0x52>
    htim->State = HAL_TIM_STATE_READY;
 8002bee:	2001      	movs	r0, #1
    __HAL_UNLOCK(htim);
 8002bf0:	2200      	movs	r2, #0
    htim->State = HAL_TIM_STATE_READY;
 8002bf2:	f883 003d 	strb.w	r0, [r3, #61]	@ 0x3d
    __HAL_UNLOCK(htim);
 8002bf6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 8002bfa:	bc30      	pop	{r4, r5}
 8002bfc:	4770      	bx	lr
  __HAL_LOCK(htim);
 8002bfe:	2002      	movs	r0, #2
}
 8002c00:	4770      	bx	lr
  tmpccer = TIMx->CCER;
 8002c02:	6a02      	ldr	r2, [r0, #32]
                               sSlaveConfig->TriggerPolarity,
 8002c04:	688d      	ldr	r5, [r1, #8]
                               sSlaveConfig->TriggerFilter);
 8002c06:	690c      	ldr	r4, [r1, #16]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002c08:	6a01      	ldr	r1, [r0, #32]
 8002c0a:	f021 0110 	bic.w	r1, r1, #16
 8002c0e:	6201      	str	r1, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002c10:	6981      	ldr	r1, [r0, #24]
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002c12:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002c16:	f421 4170 	bic.w	r1, r1, #61440	@ 0xf000
  tmpccer |= (TIM_ICPolarity << 4U);
 8002c1a:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002c1e:	ea41 3104 	orr.w	r1, r1, r4, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 8002c22:	6181      	str	r1, [r0, #24]
  TIMx->CCER = tmpccer;
 8002c24:	6202      	str	r2, [r0, #32]
      break;
 8002c26:	e7c8      	b.n	8002bba <HAL_TIM_SlaveConfigSynchro+0x52>
      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8002c28:	2d05      	cmp	r5, #5
 8002c2a:	d0e0      	beq.n	8002bee <HAL_TIM_SlaveConfigSynchro+0x86>
      tmpccer = htim->Instance->CCER;
 8002c2c:	6a04      	ldr	r4, [r0, #32]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8002c2e:	6a02      	ldr	r2, [r0, #32]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8002c30:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8002c32:	f022 0201 	bic.w	r2, r2, #1
 8002c36:	6202      	str	r2, [r0, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8002c38:	6982      	ldr	r2, [r0, #24]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002c3a:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8002c3e:	ea42 1201 	orr.w	r2, r2, r1, lsl #4
      htim->Instance->CCMR1 = tmpccmr1;
 8002c42:	6182      	str	r2, [r0, #24]
      htim->Instance->CCER = tmpccer;
 8002c44:	6204      	str	r4, [r0, #32]
      break;
 8002c46:	e7b8      	b.n	8002bba <HAL_TIM_SlaveConfigSynchro+0x52>
                               sSlaveConfig->TriggerPolarity,
 8002c48:	688a      	ldr	r2, [r1, #8]
                               sSlaveConfig->TriggerFilter);
 8002c4a:	690c      	ldr	r4, [r1, #16]
  tmpccer = TIMx->CCER;
 8002c4c:	6a01      	ldr	r1, [r0, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002c4e:	f021 010a 	bic.w	r1, r1, #10
  tmpccer |= TIM_ICPolarity;
 8002c52:	4311      	orrs	r1, r2
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002c54:	6a02      	ldr	r2, [r0, #32]
 8002c56:	f022 0201 	bic.w	r2, r2, #1
 8002c5a:	6202      	str	r2, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002c5c:	6982      	ldr	r2, [r0, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002c5e:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002c62:	ea42 1204 	orr.w	r2, r2, r4, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8002c66:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8002c68:	6201      	str	r1, [r0, #32]
      break;
 8002c6a:	e7a6      	b.n	8002bba <HAL_TIM_SlaveConfigSynchro+0x52>
  switch (sSlaveConfig->InputTrigger)
 8002c6c:	2c30      	cmp	r4, #48	@ 0x30
 8002c6e:	d0a4      	beq.n	8002bba <HAL_TIM_SlaveConfigSynchro+0x52>
 8002c70:	e7bd      	b.n	8002bee <HAL_TIM_SlaveConfigSynchro+0x86>
 8002c72:	bf00      	nop

08002c74 <HAL_TIM_ReadCapturedValue>:
  switch (Channel)
 8002c74:	290c      	cmp	r1, #12
 8002c76:	d808      	bhi.n	8002c8a <HAL_TIM_ReadCapturedValue+0x16>
 8002c78:	e8df f001 	tbb	[pc, r1]
 8002c7c:	07070712 	.word	0x07070712
 8002c80:	0707070f 	.word	0x0707070f
 8002c84:	0707070c 	.word	0x0707070c
 8002c88:	09          	.byte	0x09
 8002c89:	00          	.byte	0x00
 8002c8a:	2000      	movs	r0, #0
}
 8002c8c:	4770      	bx	lr
      tmpreg =   htim->Instance->CCR4;
 8002c8e:	6803      	ldr	r3, [r0, #0]
 8002c90:	6c18      	ldr	r0, [r3, #64]	@ 0x40
      break;
 8002c92:	4770      	bx	lr
      tmpreg =   htim->Instance->CCR3;
 8002c94:	6803      	ldr	r3, [r0, #0]
 8002c96:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
      break;
 8002c98:	4770      	bx	lr
      tmpreg =   htim->Instance->CCR2;
 8002c9a:	6803      	ldr	r3, [r0, #0]
 8002c9c:	6b98      	ldr	r0, [r3, #56]	@ 0x38
      break;
 8002c9e:	4770      	bx	lr
      tmpreg =  htim->Instance->CCR1;
 8002ca0:	6803      	ldr	r3, [r0, #0]
 8002ca2:	6b58      	ldr	r0, [r3, #52]	@ 0x34
      break;
 8002ca4:	4770      	bx	lr
 8002ca6:	bf00      	nop

08002ca8 <HAL_TIM_PeriodElapsedCallback>:
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
 8002ca8:	4770      	bx	lr
 8002caa:	bf00      	nop

08002cac <HAL_TIM_OC_DelayElapsedCallback>:
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
 8002cac:	4770      	bx	lr
 8002cae:	bf00      	nop

08002cb0 <HAL_TIM_PWM_PulseFinishedCallback>:
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
 8002cb0:	4770      	bx	lr
 8002cb2:	bf00      	nop

08002cb4 <HAL_TIM_TriggerCallback>:
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
 8002cb4:	4770      	bx	lr
 8002cb6:	bf00      	nop

08002cb8 <HAL_TIM_IRQHandler>:
  uint32_t itsource = htim->Instance->DIER;
 8002cb8:	6803      	ldr	r3, [r0, #0]
{
 8002cba:	b570      	push	{r4, r5, r6, lr}
  uint32_t itsource = htim->Instance->DIER;
 8002cbc:	68de      	ldr	r6, [r3, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002cbe:	691d      	ldr	r5, [r3, #16]
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002cc0:	07a9      	lsls	r1, r5, #30
{
 8002cc2:	4604      	mov	r4, r0
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002cc4:	d501      	bpl.n	8002cca <HAL_TIM_IRQHandler+0x12>
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002cc6:	07b2      	lsls	r2, r6, #30
 8002cc8:	d451      	bmi.n	8002d6e <HAL_TIM_IRQHandler+0xb6>
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002cca:	0769      	lsls	r1, r5, #29
 8002ccc:	d501      	bpl.n	8002cd2 <HAL_TIM_IRQHandler+0x1a>
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002cce:	0772      	lsls	r2, r6, #29
 8002cd0:	d43a      	bmi.n	8002d48 <HAL_TIM_IRQHandler+0x90>
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002cd2:	072b      	lsls	r3, r5, #28
 8002cd4:	d501      	bpl.n	8002cda <HAL_TIM_IRQHandler+0x22>
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002cd6:	0730      	lsls	r0, r6, #28
 8002cd8:	d424      	bmi.n	8002d24 <HAL_TIM_IRQHandler+0x6c>
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002cda:	06ea      	lsls	r2, r5, #27
 8002cdc:	d501      	bpl.n	8002ce2 <HAL_TIM_IRQHandler+0x2a>
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002cde:	06f3      	lsls	r3, r6, #27
 8002ce0:	d410      	bmi.n	8002d04 <HAL_TIM_IRQHandler+0x4c>
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002ce2:	07e8      	lsls	r0, r5, #31
 8002ce4:	d501      	bpl.n	8002cea <HAL_TIM_IRQHandler+0x32>
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002ce6:	07f1      	lsls	r1, r6, #31
 8002ce8:	d457      	bmi.n	8002d9a <HAL_TIM_IRQHandler+0xe2>
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002cea:	062a      	lsls	r2, r5, #24
 8002cec:	d501      	bpl.n	8002cf2 <HAL_TIM_IRQHandler+0x3a>
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002cee:	0633      	lsls	r3, r6, #24
 8002cf0:	d45b      	bmi.n	8002daa <HAL_TIM_IRQHandler+0xf2>
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002cf2:	0668      	lsls	r0, r5, #25
 8002cf4:	d501      	bpl.n	8002cfa <HAL_TIM_IRQHandler+0x42>
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002cf6:	0671      	lsls	r1, r6, #25
 8002cf8:	d45f      	bmi.n	8002dba <HAL_TIM_IRQHandler+0x102>
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002cfa:	06aa      	lsls	r2, r5, #26
 8002cfc:	d501      	bpl.n	8002d02 <HAL_TIM_IRQHandler+0x4a>
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002cfe:	06b3      	lsls	r3, r6, #26
 8002d00:	d442      	bmi.n	8002d88 <HAL_TIM_IRQHandler+0xd0>
}
 8002d02:	bd70      	pop	{r4, r5, r6, pc}
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002d04:	6823      	ldr	r3, [r4, #0]
 8002d06:	f06f 0210 	mvn.w	r2, #16
 8002d0a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002d0c:	2208      	movs	r2, #8
 8002d0e:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002d10:	69db      	ldr	r3, [r3, #28]
 8002d12:	f413 7f40 	tst.w	r3, #768	@ 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 8002d16:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002d18:	d063      	beq.n	8002de2 <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 8002d1a:	f7fe f8f7 	bl	8000f0c <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d1e:	2300      	movs	r3, #0
 8002d20:	7723      	strb	r3, [r4, #28]
 8002d22:	e7de      	b.n	8002ce2 <HAL_TIM_IRQHandler+0x2a>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002d24:	6823      	ldr	r3, [r4, #0]
 8002d26:	f06f 0208 	mvn.w	r2, #8
 8002d2a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002d2c:	2204      	movs	r2, #4
 8002d2e:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002d30:	69db      	ldr	r3, [r3, #28]
 8002d32:	0799      	lsls	r1, r3, #30
        HAL_TIM_IC_CaptureCallback(htim);
 8002d34:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002d36:	d151      	bne.n	8002ddc <HAL_TIM_IRQHandler+0x124>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d38:	f7ff ffb8 	bl	8002cac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d3c:	4620      	mov	r0, r4
 8002d3e:	f7ff ffb7 	bl	8002cb0 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d42:	2300      	movs	r3, #0
 8002d44:	7723      	strb	r3, [r4, #28]
 8002d46:	e7c8      	b.n	8002cda <HAL_TIM_IRQHandler+0x22>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002d48:	6823      	ldr	r3, [r4, #0]
 8002d4a:	f06f 0204 	mvn.w	r2, #4
 8002d4e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002d50:	2202      	movs	r2, #2
 8002d52:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002d54:	699b      	ldr	r3, [r3, #24]
 8002d56:	f413 7f40 	tst.w	r3, #768	@ 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 8002d5a:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002d5c:	d13b      	bne.n	8002dd6 <HAL_TIM_IRQHandler+0x11e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d5e:	f7ff ffa5 	bl	8002cac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d62:	4620      	mov	r0, r4
 8002d64:	f7ff ffa4 	bl	8002cb0 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d68:	2300      	movs	r3, #0
 8002d6a:	7723      	strb	r3, [r4, #28]
 8002d6c:	e7b1      	b.n	8002cd2 <HAL_TIM_IRQHandler+0x1a>
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002d6e:	f06f 0202 	mvn.w	r2, #2
 8002d72:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002d74:	2201      	movs	r2, #1
 8002d76:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002d78:	699b      	ldr	r3, [r3, #24]
 8002d7a:	079b      	lsls	r3, r3, #30
 8002d7c:	d025      	beq.n	8002dca <HAL_TIM_IRQHandler+0x112>
          HAL_TIM_IC_CaptureCallback(htim);
 8002d7e:	f7fe f8c5 	bl	8000f0c <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d82:	2300      	movs	r3, #0
 8002d84:	7723      	strb	r3, [r4, #28]
 8002d86:	e7a0      	b.n	8002cca <HAL_TIM_IRQHandler+0x12>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002d88:	6823      	ldr	r3, [r4, #0]
 8002d8a:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutCallback(htim);
 8002d8e:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002d90:	611a      	str	r2, [r3, #16]
}
 8002d92:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      HAL_TIMEx_CommutCallback(htim);
 8002d96:	f000 b863 	b.w	8002e60 <HAL_TIMEx_CommutCallback>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002d9a:	6823      	ldr	r3, [r4, #0]
 8002d9c:	f06f 0201 	mvn.w	r2, #1
 8002da0:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8002da2:	4620      	mov	r0, r4
 8002da4:	f7ff ff80 	bl	8002ca8 <HAL_TIM_PeriodElapsedCallback>
 8002da8:	e79f      	b.n	8002cea <HAL_TIM_IRQHandler+0x32>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002daa:	6823      	ldr	r3, [r4, #0]
 8002dac:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8002db0:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8002db2:	4620      	mov	r0, r4
 8002db4:	f000 f856 	bl	8002e64 <HAL_TIMEx_BreakCallback>
 8002db8:	e79b      	b.n	8002cf2 <HAL_TIM_IRQHandler+0x3a>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002dba:	6823      	ldr	r3, [r4, #0]
 8002dbc:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002dc0:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8002dc2:	4620      	mov	r0, r4
 8002dc4:	f7ff ff76 	bl	8002cb4 <HAL_TIM_TriggerCallback>
 8002dc8:	e797      	b.n	8002cfa <HAL_TIM_IRQHandler+0x42>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002dca:	f7ff ff6f 	bl	8002cac <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002dce:	4620      	mov	r0, r4
 8002dd0:	f7ff ff6e 	bl	8002cb0 <HAL_TIM_PWM_PulseFinishedCallback>
 8002dd4:	e7d5      	b.n	8002d82 <HAL_TIM_IRQHandler+0xca>
        HAL_TIM_IC_CaptureCallback(htim);
 8002dd6:	f7fe f899 	bl	8000f0c <HAL_TIM_IC_CaptureCallback>
 8002dda:	e7c5      	b.n	8002d68 <HAL_TIM_IRQHandler+0xb0>
        HAL_TIM_IC_CaptureCallback(htim);
 8002ddc:	f7fe f896 	bl	8000f0c <HAL_TIM_IC_CaptureCallback>
 8002de0:	e7af      	b.n	8002d42 <HAL_TIM_IRQHandler+0x8a>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002de2:	f7ff ff63 	bl	8002cac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002de6:	4620      	mov	r0, r4
 8002de8:	f7ff ff62 	bl	8002cb0 <HAL_TIM_PWM_PulseFinishedCallback>
 8002dec:	e797      	b.n	8002d1e <HAL_TIM_IRQHandler+0x66>
 8002dee:	bf00      	nop

08002df0 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002df0:	f890 203c 	ldrb.w	r2, [r0, #60]	@ 0x3c
 8002df4:	2a01      	cmp	r2, #1
 8002df6:	d02f      	beq.n	8002e58 <HAL_TIMEx_MasterConfigSynchronization+0x68>
 8002df8:	4603      	mov	r3, r0

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002dfa:	6802      	ldr	r2, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8002dfc:	2002      	movs	r0, #2
{
 8002dfe:	b430      	push	{r4, r5}
  htim->State = HAL_TIM_STATE_BUSY;
 8002e00:	f883 003d 	strb.w	r0, [r3, #61]	@ 0x3d
  tmpcr2 = htim->Instance->CR2;
 8002e04:	6850      	ldr	r0, [r2, #4]
  tmpsmcr = htim->Instance->SMCR;

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002e06:	680d      	ldr	r5, [r1, #0]
  tmpsmcr = htim->Instance->SMCR;
 8002e08:	6894      	ldr	r4, [r2, #8]
  tmpcr2 &= ~TIM_CR2_MMS;
 8002e0a:	f020 0070 	bic.w	r0, r0, #112	@ 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002e0e:	4328      	orrs	r0, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002e10:	6050      	str	r0, [r2, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002e12:	4812      	ldr	r0, [pc, #72]	@ (8002e5c <HAL_TIMEx_MasterConfigSynchronization+0x6c>)
 8002e14:	4282      	cmp	r2, r0
 8002e16:	d012      	beq.n	8002e3e <HAL_TIMEx_MasterConfigSynchronization+0x4e>
 8002e18:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
 8002e1c:	d00f      	beq.n	8002e3e <HAL_TIMEx_MasterConfigSynchronization+0x4e>
 8002e1e:	f5a0 407c 	sub.w	r0, r0, #64512	@ 0xfc00
 8002e22:	4282      	cmp	r2, r0
 8002e24:	d00b      	beq.n	8002e3e <HAL_TIMEx_MasterConfigSynchronization+0x4e>
 8002e26:	f500 6080 	add.w	r0, r0, #1024	@ 0x400
 8002e2a:	4282      	cmp	r2, r0
 8002e2c:	d007      	beq.n	8002e3e <HAL_TIMEx_MasterConfigSynchronization+0x4e>
 8002e2e:	f500 6080 	add.w	r0, r0, #1024	@ 0x400
 8002e32:	4282      	cmp	r2, r0
 8002e34:	d003      	beq.n	8002e3e <HAL_TIMEx_MasterConfigSynchronization+0x4e>
 8002e36:	f500 309a 	add.w	r0, r0, #78848	@ 0x13400
 8002e3a:	4282      	cmp	r2, r0
 8002e3c:	d104      	bne.n	8002e48 <HAL_TIMEx_MasterConfigSynchronization+0x58>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002e3e:	6849      	ldr	r1, [r1, #4]
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002e40:	f024 0480 	bic.w	r4, r4, #128	@ 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002e44:	430c      	orrs	r4, r1

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002e46:	6094      	str	r4, [r2, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;

  __HAL_UNLOCK(htim);
 8002e48:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8002e4a:	2201      	movs	r2, #1
 8002e4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  __HAL_UNLOCK(htim);
 8002e50:	f883 003c 	strb.w	r0, [r3, #60]	@ 0x3c

  return HAL_OK;
}
 8002e54:	bc30      	pop	{r4, r5}
 8002e56:	4770      	bx	lr
  __HAL_LOCK(htim);
 8002e58:	2002      	movs	r0, #2
}
 8002e5a:	4770      	bx	lr
 8002e5c:	40010000 	.word	0x40010000

08002e60 <HAL_TIMEx_CommutCallback>:
/**
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
 8002e60:	4770      	bx	lr
 8002e62:	bf00      	nop

08002e64 <HAL_TIMEx_BreakCallback>:
/**
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
 8002e64:	4770      	bx	lr
 8002e66:	bf00      	nop

08002e68 <HAL_UART_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002e68:	2800      	cmp	r0, #0
 8002e6a:	f000 8087 	beq.w	8002f7c <HAL_UART_Init+0x114>
{
 8002e6e:	b538      	push	{r3, r4, r5, lr}
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002e70:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 8002e74:	4604      	mov	r4, r0
 8002e76:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d079      	beq.n	8002f72 <HAL_UART_Init+0x10a>
  }

  huart->gState = HAL_UART_STATE_BUSY;

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002e7e:	6823      	ldr	r3, [r4, #0]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002e80:	68e0      	ldr	r0, [r4, #12]
  huart->gState = HAL_UART_STATE_BUSY;
 8002e82:	2224      	movs	r2, #36	@ 0x24
 8002e84:	f884 2041 	strb.w	r2, [r4, #65]	@ 0x41
  __HAL_UART_DISABLE(huart);
 8002e88:	68da      	ldr	r2, [r3, #12]
 8002e8a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002e8e:	60da      	str	r2, [r3, #12]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002e90:	6919      	ldr	r1, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002e92:	68a2      	ldr	r2, [r4, #8]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002e94:	f421 5140 	bic.w	r1, r1, #12288	@ 0x3000
 8002e98:	4301      	orrs	r1, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002e9a:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002e9c:	6119      	str	r1, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002e9e:	4302      	orrs	r2, r0
 8002ea0:	6960      	ldr	r0, [r4, #20]
  MODIFY_REG(huart->Instance->CR1,
 8002ea2:	68d9      	ldr	r1, [r3, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002ea4:	4302      	orrs	r2, r0
 8002ea6:	69e0      	ldr	r0, [r4, #28]
  MODIFY_REG(huart->Instance->CR1,
 8002ea8:	f421 4116 	bic.w	r1, r1, #38400	@ 0x9600
 8002eac:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002eb0:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1,
 8002eb2:	430a      	orrs	r2, r1
 8002eb4:	60da      	str	r2, [r3, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002eb6:	695a      	ldr	r2, [r3, #20]
 8002eb8:	69a0      	ldr	r0, [r4, #24]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002eba:	4931      	ldr	r1, [pc, #196]	@ (8002f80 <HAL_UART_Init+0x118>)
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002ebc:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8002ec0:	4302      	orrs	r2, r0
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002ec2:	428b      	cmp	r3, r1
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002ec4:	615a      	str	r2, [r3, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002ec6:	d036      	beq.n	8002f36 <HAL_UART_Init+0xce>
 8002ec8:	4a2e      	ldr	r2, [pc, #184]	@ (8002f84 <HAL_UART_Init+0x11c>)
 8002eca:	4293      	cmp	r3, r2
 8002ecc:	d033      	beq.n	8002f36 <HAL_UART_Init+0xce>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002ece:	f7ff f8f9 	bl	80020c4 <HAL_RCC_GetPCLK1Freq>
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002ed2:	69e2      	ldr	r2, [r4, #28]
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002ed4:	2119      	movs	r1, #25
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002ed6:	f5b2 4f00 	cmp.w	r2, #32768	@ 0x8000
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002eda:	e9d4 5300 	ldrd	r5, r3, [r4]
 8002ede:	fba0 0101 	umull	r0, r1, r0, r1
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002ee2:	d02b      	beq.n	8002f3c <HAL_UART_Init+0xd4>
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002ee4:	009a      	lsls	r2, r3, #2
 8002ee6:	0f9b      	lsrs	r3, r3, #30
 8002ee8:	f7fd fe66 	bl	8000bb8 <__aeabi_uldivmod>
 8002eec:	4a26      	ldr	r2, [pc, #152]	@ (8002f88 <HAL_UART_Init+0x120>)
 8002eee:	fba2 1300 	umull	r1, r3, r2, r0
 8002ef2:	095b      	lsrs	r3, r3, #5
 8002ef4:	2164      	movs	r1, #100	@ 0x64
 8002ef6:	fb01 0013 	mls	r0, r1, r3, r0
 8002efa:	0100      	lsls	r0, r0, #4
 8002efc:	3032      	adds	r0, #50	@ 0x32
 8002efe:	fba2 2000 	umull	r2, r0, r2, r0
 8002f02:	011b      	lsls	r3, r3, #4
 8002f04:	eb03 1350 	add.w	r3, r3, r0, lsr #5
 8002f08:	60ab      	str	r3, [r5, #8]
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002f0a:	692a      	ldr	r2, [r5, #16]
 8002f0c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002f10:	612a      	str	r2, [r5, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002f12:	696a      	ldr	r2, [r5, #20]
 8002f14:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002f18:	616a      	str	r2, [r5, #20]
  __HAL_UART_ENABLE(huart);
 8002f1a:	68ea      	ldr	r2, [r5, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f1c:	2300      	movs	r3, #0
  huart->gState = HAL_UART_STATE_READY;
 8002f1e:	2120      	movs	r1, #32
  __HAL_UART_ENABLE(huart);
 8002f20:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002f24:	60ea      	str	r2, [r5, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f26:	6463      	str	r3, [r4, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002f28:	f884 1041 	strb.w	r1, [r4, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002f2c:	f884 1042 	strb.w	r1, [r4, #66]	@ 0x42
  return HAL_OK;
 8002f30:	4618      	mov	r0, r3
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002f32:	6363      	str	r3, [r4, #52]	@ 0x34
}
 8002f34:	bd38      	pop	{r3, r4, r5, pc}
      pclk = HAL_RCC_GetPCLK2Freq();
 8002f36:	f7ff f8d5 	bl	80020e4 <HAL_RCC_GetPCLK2Freq>
 8002f3a:	e7ca      	b.n	8002ed2 <HAL_UART_Init+0x6a>
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002f3c:	18da      	adds	r2, r3, r3
 8002f3e:	f04f 0300 	mov.w	r3, #0
 8002f42:	415b      	adcs	r3, r3
 8002f44:	f7fd fe38 	bl	8000bb8 <__aeabi_uldivmod>
 8002f48:	4a0f      	ldr	r2, [pc, #60]	@ (8002f88 <HAL_UART_Init+0x120>)
 8002f4a:	fba2 3100 	umull	r3, r1, r2, r0
 8002f4e:	0949      	lsrs	r1, r1, #5
 8002f50:	2364      	movs	r3, #100	@ 0x64
 8002f52:	fb03 0311 	mls	r3, r3, r1, r0
 8002f56:	00db      	lsls	r3, r3, #3
 8002f58:	3332      	adds	r3, #50	@ 0x32
 8002f5a:	fba2 2303 	umull	r2, r3, r2, r3
 8002f5e:	f3c3 1242 	ubfx	r2, r3, #5, #3
 8002f62:	091b      	lsrs	r3, r3, #4
 8002f64:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8002f68:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8002f6c:	4413      	add	r3, r2
 8002f6e:	60ab      	str	r3, [r5, #8]
 8002f70:	e7cb      	b.n	8002f0a <HAL_UART_Init+0xa2>
    huart->Lock = HAL_UNLOCKED;
 8002f72:	f880 2040 	strb.w	r2, [r0, #64]	@ 0x40
    HAL_UART_MspInit(huart);
 8002f76:	f7fe fa8f 	bl	8001498 <HAL_UART_MspInit>
 8002f7a:	e780      	b.n	8002e7e <HAL_UART_Init+0x16>
    return HAL_ERROR;
 8002f7c:	2001      	movs	r0, #1
}
 8002f7e:	4770      	bx	lr
 8002f80:	40011000 	.word	0x40011000
 8002f84:	40011400 	.word	0x40011400
 8002f88:	51eb851f 	.word	0x51eb851f

08002f8c <HAL_UART_Transmit>:
{
 8002f8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002f90:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_READY)
 8002f92:	f890 0041 	ldrb.w	r0, [r0, #65]	@ 0x41
 8002f96:	2820      	cmp	r0, #32
 8002f98:	d155      	bne.n	8003046 <HAL_UART_Transmit+0xba>
    if ((pData == NULL) || (Size == 0U))
 8002f9a:	460d      	mov	r5, r1
 8002f9c:	b109      	cbz	r1, 8002fa2 <HAL_UART_Transmit+0x16>
 8002f9e:	4616      	mov	r6, r2
 8002fa0:	b912      	cbnz	r2, 8002fa8 <HAL_UART_Transmit+0x1c>
      return  HAL_ERROR;
 8002fa2:	2001      	movs	r0, #1
}
 8002fa4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002fa8:	461f      	mov	r7, r3
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002faa:	f04f 0800 	mov.w	r8, #0
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002fae:	2321      	movs	r3, #33	@ 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002fb0:	f8c4 8044 	str.w	r8, [r4, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002fb4:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
    tickstart = HAL_GetTick();
 8002fb8:	f7fe fb8e 	bl	80016d8 <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002fbc:	68a3      	ldr	r3, [r4, #8]
    huart->TxXferSize = Size;
 8002fbe:	84a6      	strh	r6, [r4, #36]	@ 0x24
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002fc0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
    tickstart = HAL_GetTick();
 8002fc4:	4681      	mov	r9, r0
    huart->TxXferCount = Size;
 8002fc6:	84e6      	strh	r6, [r4, #38]	@ 0x26
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002fc8:	d040      	beq.n	800304c <HAL_UART_Transmit+0xc0>
    while (huart->TxXferCount > 0U)
 8002fca:	8ce3      	ldrh	r3, [r4, #38]	@ 0x26
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002fcc:	6822      	ldr	r2, [r4, #0]
    while (huart->TxXferCount > 0U)
 8002fce:	b29b      	uxth	r3, r3
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d047      	beq.n	8003064 <HAL_UART_Transmit+0xd8>
 8002fd4:	1c7b      	adds	r3, r7, #1
 8002fd6:	d124      	bne.n	8003022 <HAL_UART_Transmit+0x96>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002fd8:	6813      	ldr	r3, [r2, #0]
 8002fda:	061f      	lsls	r7, r3, #24
 8002fdc:	d5fc      	bpl.n	8002fd8 <HAL_UART_Transmit+0x4c>
      if (pdata8bits == NULL)
 8002fde:	2d00      	cmp	r5, #0
 8002fe0:	d02c      	beq.n	800303c <HAL_UART_Transmit+0xb0>
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002fe2:	f815 3b01 	ldrb.w	r3, [r5], #1
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002fe6:	6053      	str	r3, [r2, #4]
      huart->TxXferCount--;
 8002fe8:	8ce3      	ldrh	r3, [r4, #38]	@ 0x26
 8002fea:	3b01      	subs	r3, #1
 8002fec:	b29b      	uxth	r3, r3
 8002fee:	84e3      	strh	r3, [r4, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8002ff0:	8ce3      	ldrh	r3, [r4, #38]	@ 0x26
 8002ff2:	b29b      	uxth	r3, r3
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d1ef      	bne.n	8002fd8 <HAL_UART_Transmit+0x4c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002ff8:	6813      	ldr	r3, [r2, #0]
 8002ffa:	0659      	lsls	r1, r3, #25
 8002ffc:	d5fc      	bpl.n	8002ff8 <HAL_UART_Transmit+0x6c>
    huart->gState = HAL_UART_STATE_READY;
 8002ffe:	2320      	movs	r3, #32
 8003000:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
    return HAL_OK;
 8003004:	2000      	movs	r0, #0
}
 8003006:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if (pdata8bits == NULL)
 800300a:	2d00      	cmp	r5, #0
 800300c:	d03d      	beq.n	800308a <HAL_UART_Transmit+0xfe>
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800300e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8003012:	6053      	str	r3, [r2, #4]
      huart->TxXferCount--;
 8003014:	8ce3      	ldrh	r3, [r4, #38]	@ 0x26
 8003016:	3b01      	subs	r3, #1
 8003018:	b29b      	uxth	r3, r3
 800301a:	84e3      	strh	r3, [r4, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800301c:	8ce3      	ldrh	r3, [r4, #38]	@ 0x26
 800301e:	b29b      	uxth	r3, r3
 8003020:	b313      	cbz	r3, 8003068 <HAL_UART_Transmit+0xdc>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003022:	6813      	ldr	r3, [r2, #0]
 8003024:	061e      	lsls	r6, r3, #24
 8003026:	d4f0      	bmi.n	800300a <HAL_UART_Transmit+0x7e>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003028:	f7fe fb56 	bl	80016d8 <HAL_GetTick>
 800302c:	eba0 0309 	sub.w	r3, r0, r9
 8003030:	429f      	cmp	r7, r3
 8003032:	d311      	bcc.n	8003058 <HAL_UART_Transmit+0xcc>
 8003034:	b187      	cbz	r7, 8003058 <HAL_UART_Transmit+0xcc>
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003036:	6822      	ldr	r2, [r4, #0]
 8003038:	68d3      	ldr	r3, [r2, #12]
 800303a:	e7f2      	b.n	8003022 <HAL_UART_Transmit+0x96>
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800303c:	f838 3b02 	ldrh.w	r3, [r8], #2
 8003040:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003044:	e7cf      	b.n	8002fe6 <HAL_UART_Transmit+0x5a>
    return HAL_BUSY;
 8003046:	2002      	movs	r0, #2
}
 8003048:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800304c:	6923      	ldr	r3, [r4, #16]
 800304e:	2b00      	cmp	r3, #0
 8003050:	d1bb      	bne.n	8002fca <HAL_UART_Transmit+0x3e>
      pdata16bits = (const uint16_t *) pData;
 8003052:	46a8      	mov	r8, r5
      pdata8bits  = NULL;
 8003054:	461d      	mov	r5, r3
 8003056:	e7b8      	b.n	8002fca <HAL_UART_Transmit+0x3e>
        huart->gState = HAL_UART_STATE_READY;
 8003058:	2320      	movs	r3, #32
 800305a:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
        return HAL_TIMEOUT;
 800305e:	2003      	movs	r0, #3
}
 8003060:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003064:	1c78      	adds	r0, r7, #1
 8003066:	d0c7      	beq.n	8002ff8 <HAL_UART_Transmit+0x6c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003068:	6813      	ldr	r3, [r2, #0]
 800306a:	065b      	lsls	r3, r3, #25
 800306c:	d4c7      	bmi.n	8002ffe <HAL_UART_Transmit+0x72>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800306e:	f7fe fb33 	bl	80016d8 <HAL_GetTick>
 8003072:	eba0 0309 	sub.w	r3, r0, r9
 8003076:	429f      	cmp	r7, r3
 8003078:	d3ee      	bcc.n	8003058 <HAL_UART_Transmit+0xcc>
 800307a:	2f00      	cmp	r7, #0
 800307c:	d0ec      	beq.n	8003058 <HAL_UART_Transmit+0xcc>
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800307e:	6822      	ldr	r2, [r4, #0]
 8003080:	68d3      	ldr	r3, [r2, #12]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003082:	6813      	ldr	r3, [r2, #0]
 8003084:	065b      	lsls	r3, r3, #25
 8003086:	d5f2      	bpl.n	800306e <HAL_UART_Transmit+0xe2>
 8003088:	e7b9      	b.n	8002ffe <HAL_UART_Transmit+0x72>
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800308a:	f838 3b02 	ldrh.w	r3, [r8], #2
 800308e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003092:	e7be      	b.n	8003012 <HAL_UART_Transmit+0x86>

08003094 <__cvt>:
 8003094:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003098:	ec57 6b10 	vmov	r6, r7, d0
 800309c:	2f00      	cmp	r7, #0
 800309e:	460c      	mov	r4, r1
 80030a0:	4619      	mov	r1, r3
 80030a2:	463b      	mov	r3, r7
 80030a4:	bfbb      	ittet	lt
 80030a6:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 80030aa:	461f      	movlt	r7, r3
 80030ac:	2300      	movge	r3, #0
 80030ae:	232d      	movlt	r3, #45	@ 0x2d
 80030b0:	700b      	strb	r3, [r1, #0]
 80030b2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80030b4:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 80030b8:	4691      	mov	r9, r2
 80030ba:	f023 0820 	bic.w	r8, r3, #32
 80030be:	bfbc      	itt	lt
 80030c0:	4632      	movlt	r2, r6
 80030c2:	4616      	movlt	r6, r2
 80030c4:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80030c8:	d005      	beq.n	80030d6 <__cvt+0x42>
 80030ca:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80030ce:	d100      	bne.n	80030d2 <__cvt+0x3e>
 80030d0:	3401      	adds	r4, #1
 80030d2:	2102      	movs	r1, #2
 80030d4:	e000      	b.n	80030d8 <__cvt+0x44>
 80030d6:	2103      	movs	r1, #3
 80030d8:	ab03      	add	r3, sp, #12
 80030da:	9301      	str	r3, [sp, #4]
 80030dc:	ab02      	add	r3, sp, #8
 80030de:	9300      	str	r3, [sp, #0]
 80030e0:	ec47 6b10 	vmov	d0, r6, r7
 80030e4:	4653      	mov	r3, sl
 80030e6:	4622      	mov	r2, r4
 80030e8:	f000 fe52 	bl	8003d90 <_dtoa_r>
 80030ec:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80030f0:	4605      	mov	r5, r0
 80030f2:	d119      	bne.n	8003128 <__cvt+0x94>
 80030f4:	f019 0f01 	tst.w	r9, #1
 80030f8:	d00e      	beq.n	8003118 <__cvt+0x84>
 80030fa:	eb00 0904 	add.w	r9, r0, r4
 80030fe:	2200      	movs	r2, #0
 8003100:	2300      	movs	r3, #0
 8003102:	4630      	mov	r0, r6
 8003104:	4639      	mov	r1, r7
 8003106:	f7fd fce7 	bl	8000ad8 <__aeabi_dcmpeq>
 800310a:	b108      	cbz	r0, 8003110 <__cvt+0x7c>
 800310c:	f8cd 900c 	str.w	r9, [sp, #12]
 8003110:	2230      	movs	r2, #48	@ 0x30
 8003112:	9b03      	ldr	r3, [sp, #12]
 8003114:	454b      	cmp	r3, r9
 8003116:	d31e      	bcc.n	8003156 <__cvt+0xc2>
 8003118:	9b03      	ldr	r3, [sp, #12]
 800311a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800311c:	1b5b      	subs	r3, r3, r5
 800311e:	4628      	mov	r0, r5
 8003120:	6013      	str	r3, [r2, #0]
 8003122:	b004      	add	sp, #16
 8003124:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003128:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800312c:	eb00 0904 	add.w	r9, r0, r4
 8003130:	d1e5      	bne.n	80030fe <__cvt+0x6a>
 8003132:	7803      	ldrb	r3, [r0, #0]
 8003134:	2b30      	cmp	r3, #48	@ 0x30
 8003136:	d10a      	bne.n	800314e <__cvt+0xba>
 8003138:	2200      	movs	r2, #0
 800313a:	2300      	movs	r3, #0
 800313c:	4630      	mov	r0, r6
 800313e:	4639      	mov	r1, r7
 8003140:	f7fd fcca 	bl	8000ad8 <__aeabi_dcmpeq>
 8003144:	b918      	cbnz	r0, 800314e <__cvt+0xba>
 8003146:	f1c4 0401 	rsb	r4, r4, #1
 800314a:	f8ca 4000 	str.w	r4, [sl]
 800314e:	f8da 3000 	ldr.w	r3, [sl]
 8003152:	4499      	add	r9, r3
 8003154:	e7d3      	b.n	80030fe <__cvt+0x6a>
 8003156:	1c59      	adds	r1, r3, #1
 8003158:	9103      	str	r1, [sp, #12]
 800315a:	701a      	strb	r2, [r3, #0]
 800315c:	e7d9      	b.n	8003112 <__cvt+0x7e>

0800315e <__exponent>:
 800315e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003160:	2900      	cmp	r1, #0
 8003162:	bfba      	itte	lt
 8003164:	4249      	neglt	r1, r1
 8003166:	232d      	movlt	r3, #45	@ 0x2d
 8003168:	232b      	movge	r3, #43	@ 0x2b
 800316a:	2909      	cmp	r1, #9
 800316c:	7002      	strb	r2, [r0, #0]
 800316e:	7043      	strb	r3, [r0, #1]
 8003170:	dd29      	ble.n	80031c6 <__exponent+0x68>
 8003172:	f10d 0307 	add.w	r3, sp, #7
 8003176:	461d      	mov	r5, r3
 8003178:	270a      	movs	r7, #10
 800317a:	461a      	mov	r2, r3
 800317c:	fbb1 f6f7 	udiv	r6, r1, r7
 8003180:	fb07 1416 	mls	r4, r7, r6, r1
 8003184:	3430      	adds	r4, #48	@ 0x30
 8003186:	f802 4c01 	strb.w	r4, [r2, #-1]
 800318a:	460c      	mov	r4, r1
 800318c:	2c63      	cmp	r4, #99	@ 0x63
 800318e:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 8003192:	4631      	mov	r1, r6
 8003194:	dcf1      	bgt.n	800317a <__exponent+0x1c>
 8003196:	3130      	adds	r1, #48	@ 0x30
 8003198:	1e94      	subs	r4, r2, #2
 800319a:	f803 1c01 	strb.w	r1, [r3, #-1]
 800319e:	1c41      	adds	r1, r0, #1
 80031a0:	4623      	mov	r3, r4
 80031a2:	42ab      	cmp	r3, r5
 80031a4:	d30a      	bcc.n	80031bc <__exponent+0x5e>
 80031a6:	f10d 0309 	add.w	r3, sp, #9
 80031aa:	1a9b      	subs	r3, r3, r2
 80031ac:	42ac      	cmp	r4, r5
 80031ae:	bf88      	it	hi
 80031b0:	2300      	movhi	r3, #0
 80031b2:	3302      	adds	r3, #2
 80031b4:	4403      	add	r3, r0
 80031b6:	1a18      	subs	r0, r3, r0
 80031b8:	b003      	add	sp, #12
 80031ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80031bc:	f813 6b01 	ldrb.w	r6, [r3], #1
 80031c0:	f801 6f01 	strb.w	r6, [r1, #1]!
 80031c4:	e7ed      	b.n	80031a2 <__exponent+0x44>
 80031c6:	2330      	movs	r3, #48	@ 0x30
 80031c8:	3130      	adds	r1, #48	@ 0x30
 80031ca:	7083      	strb	r3, [r0, #2]
 80031cc:	70c1      	strb	r1, [r0, #3]
 80031ce:	1d03      	adds	r3, r0, #4
 80031d0:	e7f1      	b.n	80031b6 <__exponent+0x58>
	...

080031d4 <_printf_float>:
 80031d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80031d8:	b08d      	sub	sp, #52	@ 0x34
 80031da:	460c      	mov	r4, r1
 80031dc:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 80031e0:	4616      	mov	r6, r2
 80031e2:	461f      	mov	r7, r3
 80031e4:	4605      	mov	r5, r0
 80031e6:	f000 fcd3 	bl	8003b90 <_localeconv_r>
 80031ea:	6803      	ldr	r3, [r0, #0]
 80031ec:	9304      	str	r3, [sp, #16]
 80031ee:	4618      	mov	r0, r3
 80031f0:	f7fd f846 	bl	8000280 <strlen>
 80031f4:	2300      	movs	r3, #0
 80031f6:	930a      	str	r3, [sp, #40]	@ 0x28
 80031f8:	f8d8 3000 	ldr.w	r3, [r8]
 80031fc:	9005      	str	r0, [sp, #20]
 80031fe:	3307      	adds	r3, #7
 8003200:	f023 0307 	bic.w	r3, r3, #7
 8003204:	f103 0208 	add.w	r2, r3, #8
 8003208:	f894 a018 	ldrb.w	sl, [r4, #24]
 800320c:	f8d4 b000 	ldr.w	fp, [r4]
 8003210:	f8c8 2000 	str.w	r2, [r8]
 8003214:	e9d3 8900 	ldrd	r8, r9, [r3]
 8003218:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800321c:	9307      	str	r3, [sp, #28]
 800321e:	f8cd 8018 	str.w	r8, [sp, #24]
 8003222:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8003226:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800322a:	4b9c      	ldr	r3, [pc, #624]	@ (800349c <_printf_float+0x2c8>)
 800322c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003230:	f7fd fc84 	bl	8000b3c <__aeabi_dcmpun>
 8003234:	bb70      	cbnz	r0, 8003294 <_printf_float+0xc0>
 8003236:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800323a:	4b98      	ldr	r3, [pc, #608]	@ (800349c <_printf_float+0x2c8>)
 800323c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003240:	f7fd fc5e 	bl	8000b00 <__aeabi_dcmple>
 8003244:	bb30      	cbnz	r0, 8003294 <_printf_float+0xc0>
 8003246:	2200      	movs	r2, #0
 8003248:	2300      	movs	r3, #0
 800324a:	4640      	mov	r0, r8
 800324c:	4649      	mov	r1, r9
 800324e:	f7fd fc4d 	bl	8000aec <__aeabi_dcmplt>
 8003252:	b110      	cbz	r0, 800325a <_printf_float+0x86>
 8003254:	232d      	movs	r3, #45	@ 0x2d
 8003256:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800325a:	4a91      	ldr	r2, [pc, #580]	@ (80034a0 <_printf_float+0x2cc>)
 800325c:	4b91      	ldr	r3, [pc, #580]	@ (80034a4 <_printf_float+0x2d0>)
 800325e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8003262:	bf8c      	ite	hi
 8003264:	4690      	movhi	r8, r2
 8003266:	4698      	movls	r8, r3
 8003268:	2303      	movs	r3, #3
 800326a:	6123      	str	r3, [r4, #16]
 800326c:	f02b 0304 	bic.w	r3, fp, #4
 8003270:	6023      	str	r3, [r4, #0]
 8003272:	f04f 0900 	mov.w	r9, #0
 8003276:	9700      	str	r7, [sp, #0]
 8003278:	4633      	mov	r3, r6
 800327a:	aa0b      	add	r2, sp, #44	@ 0x2c
 800327c:	4621      	mov	r1, r4
 800327e:	4628      	mov	r0, r5
 8003280:	f000 f9d2 	bl	8003628 <_printf_common>
 8003284:	3001      	adds	r0, #1
 8003286:	f040 808d 	bne.w	80033a4 <_printf_float+0x1d0>
 800328a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800328e:	b00d      	add	sp, #52	@ 0x34
 8003290:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003294:	4642      	mov	r2, r8
 8003296:	464b      	mov	r3, r9
 8003298:	4640      	mov	r0, r8
 800329a:	4649      	mov	r1, r9
 800329c:	f7fd fc4e 	bl	8000b3c <__aeabi_dcmpun>
 80032a0:	b140      	cbz	r0, 80032b4 <_printf_float+0xe0>
 80032a2:	464b      	mov	r3, r9
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	bfbc      	itt	lt
 80032a8:	232d      	movlt	r3, #45	@ 0x2d
 80032aa:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80032ae:	4a7e      	ldr	r2, [pc, #504]	@ (80034a8 <_printf_float+0x2d4>)
 80032b0:	4b7e      	ldr	r3, [pc, #504]	@ (80034ac <_printf_float+0x2d8>)
 80032b2:	e7d4      	b.n	800325e <_printf_float+0x8a>
 80032b4:	6863      	ldr	r3, [r4, #4]
 80032b6:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 80032ba:	9206      	str	r2, [sp, #24]
 80032bc:	1c5a      	adds	r2, r3, #1
 80032be:	d13b      	bne.n	8003338 <_printf_float+0x164>
 80032c0:	2306      	movs	r3, #6
 80032c2:	6063      	str	r3, [r4, #4]
 80032c4:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 80032c8:	2300      	movs	r3, #0
 80032ca:	6022      	str	r2, [r4, #0]
 80032cc:	9303      	str	r3, [sp, #12]
 80032ce:	ab0a      	add	r3, sp, #40	@ 0x28
 80032d0:	e9cd a301 	strd	sl, r3, [sp, #4]
 80032d4:	ab09      	add	r3, sp, #36	@ 0x24
 80032d6:	9300      	str	r3, [sp, #0]
 80032d8:	6861      	ldr	r1, [r4, #4]
 80032da:	ec49 8b10 	vmov	d0, r8, r9
 80032de:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 80032e2:	4628      	mov	r0, r5
 80032e4:	f7ff fed6 	bl	8003094 <__cvt>
 80032e8:	9b06      	ldr	r3, [sp, #24]
 80032ea:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80032ec:	2b47      	cmp	r3, #71	@ 0x47
 80032ee:	4680      	mov	r8, r0
 80032f0:	d129      	bne.n	8003346 <_printf_float+0x172>
 80032f2:	1cc8      	adds	r0, r1, #3
 80032f4:	db02      	blt.n	80032fc <_printf_float+0x128>
 80032f6:	6863      	ldr	r3, [r4, #4]
 80032f8:	4299      	cmp	r1, r3
 80032fa:	dd41      	ble.n	8003380 <_printf_float+0x1ac>
 80032fc:	f1aa 0a02 	sub.w	sl, sl, #2
 8003300:	fa5f fa8a 	uxtb.w	sl, sl
 8003304:	3901      	subs	r1, #1
 8003306:	4652      	mov	r2, sl
 8003308:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800330c:	9109      	str	r1, [sp, #36]	@ 0x24
 800330e:	f7ff ff26 	bl	800315e <__exponent>
 8003312:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8003314:	1813      	adds	r3, r2, r0
 8003316:	2a01      	cmp	r2, #1
 8003318:	4681      	mov	r9, r0
 800331a:	6123      	str	r3, [r4, #16]
 800331c:	dc02      	bgt.n	8003324 <_printf_float+0x150>
 800331e:	6822      	ldr	r2, [r4, #0]
 8003320:	07d2      	lsls	r2, r2, #31
 8003322:	d501      	bpl.n	8003328 <_printf_float+0x154>
 8003324:	3301      	adds	r3, #1
 8003326:	6123      	str	r3, [r4, #16]
 8003328:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800332c:	2b00      	cmp	r3, #0
 800332e:	d0a2      	beq.n	8003276 <_printf_float+0xa2>
 8003330:	232d      	movs	r3, #45	@ 0x2d
 8003332:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003336:	e79e      	b.n	8003276 <_printf_float+0xa2>
 8003338:	9a06      	ldr	r2, [sp, #24]
 800333a:	2a47      	cmp	r2, #71	@ 0x47
 800333c:	d1c2      	bne.n	80032c4 <_printf_float+0xf0>
 800333e:	2b00      	cmp	r3, #0
 8003340:	d1c0      	bne.n	80032c4 <_printf_float+0xf0>
 8003342:	2301      	movs	r3, #1
 8003344:	e7bd      	b.n	80032c2 <_printf_float+0xee>
 8003346:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800334a:	d9db      	bls.n	8003304 <_printf_float+0x130>
 800334c:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8003350:	d118      	bne.n	8003384 <_printf_float+0x1b0>
 8003352:	2900      	cmp	r1, #0
 8003354:	6863      	ldr	r3, [r4, #4]
 8003356:	dd0b      	ble.n	8003370 <_printf_float+0x19c>
 8003358:	6121      	str	r1, [r4, #16]
 800335a:	b913      	cbnz	r3, 8003362 <_printf_float+0x18e>
 800335c:	6822      	ldr	r2, [r4, #0]
 800335e:	07d0      	lsls	r0, r2, #31
 8003360:	d502      	bpl.n	8003368 <_printf_float+0x194>
 8003362:	3301      	adds	r3, #1
 8003364:	440b      	add	r3, r1
 8003366:	6123      	str	r3, [r4, #16]
 8003368:	65a1      	str	r1, [r4, #88]	@ 0x58
 800336a:	f04f 0900 	mov.w	r9, #0
 800336e:	e7db      	b.n	8003328 <_printf_float+0x154>
 8003370:	b913      	cbnz	r3, 8003378 <_printf_float+0x1a4>
 8003372:	6822      	ldr	r2, [r4, #0]
 8003374:	07d2      	lsls	r2, r2, #31
 8003376:	d501      	bpl.n	800337c <_printf_float+0x1a8>
 8003378:	3302      	adds	r3, #2
 800337a:	e7f4      	b.n	8003366 <_printf_float+0x192>
 800337c:	2301      	movs	r3, #1
 800337e:	e7f2      	b.n	8003366 <_printf_float+0x192>
 8003380:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8003384:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8003386:	4299      	cmp	r1, r3
 8003388:	db05      	blt.n	8003396 <_printf_float+0x1c2>
 800338a:	6823      	ldr	r3, [r4, #0]
 800338c:	6121      	str	r1, [r4, #16]
 800338e:	07d8      	lsls	r0, r3, #31
 8003390:	d5ea      	bpl.n	8003368 <_printf_float+0x194>
 8003392:	1c4b      	adds	r3, r1, #1
 8003394:	e7e7      	b.n	8003366 <_printf_float+0x192>
 8003396:	2900      	cmp	r1, #0
 8003398:	bfd4      	ite	le
 800339a:	f1c1 0202 	rsble	r2, r1, #2
 800339e:	2201      	movgt	r2, #1
 80033a0:	4413      	add	r3, r2
 80033a2:	e7e0      	b.n	8003366 <_printf_float+0x192>
 80033a4:	6823      	ldr	r3, [r4, #0]
 80033a6:	055a      	lsls	r2, r3, #21
 80033a8:	d407      	bmi.n	80033ba <_printf_float+0x1e6>
 80033aa:	6923      	ldr	r3, [r4, #16]
 80033ac:	4642      	mov	r2, r8
 80033ae:	4631      	mov	r1, r6
 80033b0:	4628      	mov	r0, r5
 80033b2:	47b8      	blx	r7
 80033b4:	3001      	adds	r0, #1
 80033b6:	d12b      	bne.n	8003410 <_printf_float+0x23c>
 80033b8:	e767      	b.n	800328a <_printf_float+0xb6>
 80033ba:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80033be:	f240 80dd 	bls.w	800357c <_printf_float+0x3a8>
 80033c2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80033c6:	2200      	movs	r2, #0
 80033c8:	2300      	movs	r3, #0
 80033ca:	f7fd fb85 	bl	8000ad8 <__aeabi_dcmpeq>
 80033ce:	2800      	cmp	r0, #0
 80033d0:	d033      	beq.n	800343a <_printf_float+0x266>
 80033d2:	4a37      	ldr	r2, [pc, #220]	@ (80034b0 <_printf_float+0x2dc>)
 80033d4:	2301      	movs	r3, #1
 80033d6:	4631      	mov	r1, r6
 80033d8:	4628      	mov	r0, r5
 80033da:	47b8      	blx	r7
 80033dc:	3001      	adds	r0, #1
 80033de:	f43f af54 	beq.w	800328a <_printf_float+0xb6>
 80033e2:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 80033e6:	4543      	cmp	r3, r8
 80033e8:	db02      	blt.n	80033f0 <_printf_float+0x21c>
 80033ea:	6823      	ldr	r3, [r4, #0]
 80033ec:	07d8      	lsls	r0, r3, #31
 80033ee:	d50f      	bpl.n	8003410 <_printf_float+0x23c>
 80033f0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80033f4:	4631      	mov	r1, r6
 80033f6:	4628      	mov	r0, r5
 80033f8:	47b8      	blx	r7
 80033fa:	3001      	adds	r0, #1
 80033fc:	f43f af45 	beq.w	800328a <_printf_float+0xb6>
 8003400:	f04f 0900 	mov.w	r9, #0
 8003404:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 8003408:	f104 0a1a 	add.w	sl, r4, #26
 800340c:	45c8      	cmp	r8, r9
 800340e:	dc09      	bgt.n	8003424 <_printf_float+0x250>
 8003410:	6823      	ldr	r3, [r4, #0]
 8003412:	079b      	lsls	r3, r3, #30
 8003414:	f100 8103 	bmi.w	800361e <_printf_float+0x44a>
 8003418:	68e0      	ldr	r0, [r4, #12]
 800341a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800341c:	4298      	cmp	r0, r3
 800341e:	bfb8      	it	lt
 8003420:	4618      	movlt	r0, r3
 8003422:	e734      	b.n	800328e <_printf_float+0xba>
 8003424:	2301      	movs	r3, #1
 8003426:	4652      	mov	r2, sl
 8003428:	4631      	mov	r1, r6
 800342a:	4628      	mov	r0, r5
 800342c:	47b8      	blx	r7
 800342e:	3001      	adds	r0, #1
 8003430:	f43f af2b 	beq.w	800328a <_printf_float+0xb6>
 8003434:	f109 0901 	add.w	r9, r9, #1
 8003438:	e7e8      	b.n	800340c <_printf_float+0x238>
 800343a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800343c:	2b00      	cmp	r3, #0
 800343e:	dc39      	bgt.n	80034b4 <_printf_float+0x2e0>
 8003440:	4a1b      	ldr	r2, [pc, #108]	@ (80034b0 <_printf_float+0x2dc>)
 8003442:	2301      	movs	r3, #1
 8003444:	4631      	mov	r1, r6
 8003446:	4628      	mov	r0, r5
 8003448:	47b8      	blx	r7
 800344a:	3001      	adds	r0, #1
 800344c:	f43f af1d 	beq.w	800328a <_printf_float+0xb6>
 8003450:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8003454:	ea59 0303 	orrs.w	r3, r9, r3
 8003458:	d102      	bne.n	8003460 <_printf_float+0x28c>
 800345a:	6823      	ldr	r3, [r4, #0]
 800345c:	07d9      	lsls	r1, r3, #31
 800345e:	d5d7      	bpl.n	8003410 <_printf_float+0x23c>
 8003460:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003464:	4631      	mov	r1, r6
 8003466:	4628      	mov	r0, r5
 8003468:	47b8      	blx	r7
 800346a:	3001      	adds	r0, #1
 800346c:	f43f af0d 	beq.w	800328a <_printf_float+0xb6>
 8003470:	f04f 0a00 	mov.w	sl, #0
 8003474:	f104 0b1a 	add.w	fp, r4, #26
 8003478:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800347a:	425b      	negs	r3, r3
 800347c:	4553      	cmp	r3, sl
 800347e:	dc01      	bgt.n	8003484 <_printf_float+0x2b0>
 8003480:	464b      	mov	r3, r9
 8003482:	e793      	b.n	80033ac <_printf_float+0x1d8>
 8003484:	2301      	movs	r3, #1
 8003486:	465a      	mov	r2, fp
 8003488:	4631      	mov	r1, r6
 800348a:	4628      	mov	r0, r5
 800348c:	47b8      	blx	r7
 800348e:	3001      	adds	r0, #1
 8003490:	f43f aefb 	beq.w	800328a <_printf_float+0xb6>
 8003494:	f10a 0a01 	add.w	sl, sl, #1
 8003498:	e7ee      	b.n	8003478 <_printf_float+0x2a4>
 800349a:	bf00      	nop
 800349c:	7fefffff 	.word	0x7fefffff
 80034a0:	08005af8 	.word	0x08005af8
 80034a4:	08005af4 	.word	0x08005af4
 80034a8:	08005b00 	.word	0x08005b00
 80034ac:	08005afc 	.word	0x08005afc
 80034b0:	08005b04 	.word	0x08005b04
 80034b4:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80034b6:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80034ba:	4553      	cmp	r3, sl
 80034bc:	bfa8      	it	ge
 80034be:	4653      	movge	r3, sl
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	4699      	mov	r9, r3
 80034c4:	dc36      	bgt.n	8003534 <_printf_float+0x360>
 80034c6:	f04f 0b00 	mov.w	fp, #0
 80034ca:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80034ce:	f104 021a 	add.w	r2, r4, #26
 80034d2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80034d4:	9306      	str	r3, [sp, #24]
 80034d6:	eba3 0309 	sub.w	r3, r3, r9
 80034da:	455b      	cmp	r3, fp
 80034dc:	dc31      	bgt.n	8003542 <_printf_float+0x36e>
 80034de:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80034e0:	459a      	cmp	sl, r3
 80034e2:	dc3a      	bgt.n	800355a <_printf_float+0x386>
 80034e4:	6823      	ldr	r3, [r4, #0]
 80034e6:	07da      	lsls	r2, r3, #31
 80034e8:	d437      	bmi.n	800355a <_printf_float+0x386>
 80034ea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80034ec:	ebaa 0903 	sub.w	r9, sl, r3
 80034f0:	9b06      	ldr	r3, [sp, #24]
 80034f2:	ebaa 0303 	sub.w	r3, sl, r3
 80034f6:	4599      	cmp	r9, r3
 80034f8:	bfa8      	it	ge
 80034fa:	4699      	movge	r9, r3
 80034fc:	f1b9 0f00 	cmp.w	r9, #0
 8003500:	dc33      	bgt.n	800356a <_printf_float+0x396>
 8003502:	f04f 0800 	mov.w	r8, #0
 8003506:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800350a:	f104 0b1a 	add.w	fp, r4, #26
 800350e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003510:	ebaa 0303 	sub.w	r3, sl, r3
 8003514:	eba3 0309 	sub.w	r3, r3, r9
 8003518:	4543      	cmp	r3, r8
 800351a:	f77f af79 	ble.w	8003410 <_printf_float+0x23c>
 800351e:	2301      	movs	r3, #1
 8003520:	465a      	mov	r2, fp
 8003522:	4631      	mov	r1, r6
 8003524:	4628      	mov	r0, r5
 8003526:	47b8      	blx	r7
 8003528:	3001      	adds	r0, #1
 800352a:	f43f aeae 	beq.w	800328a <_printf_float+0xb6>
 800352e:	f108 0801 	add.w	r8, r8, #1
 8003532:	e7ec      	b.n	800350e <_printf_float+0x33a>
 8003534:	4642      	mov	r2, r8
 8003536:	4631      	mov	r1, r6
 8003538:	4628      	mov	r0, r5
 800353a:	47b8      	blx	r7
 800353c:	3001      	adds	r0, #1
 800353e:	d1c2      	bne.n	80034c6 <_printf_float+0x2f2>
 8003540:	e6a3      	b.n	800328a <_printf_float+0xb6>
 8003542:	2301      	movs	r3, #1
 8003544:	4631      	mov	r1, r6
 8003546:	4628      	mov	r0, r5
 8003548:	9206      	str	r2, [sp, #24]
 800354a:	47b8      	blx	r7
 800354c:	3001      	adds	r0, #1
 800354e:	f43f ae9c 	beq.w	800328a <_printf_float+0xb6>
 8003552:	9a06      	ldr	r2, [sp, #24]
 8003554:	f10b 0b01 	add.w	fp, fp, #1
 8003558:	e7bb      	b.n	80034d2 <_printf_float+0x2fe>
 800355a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800355e:	4631      	mov	r1, r6
 8003560:	4628      	mov	r0, r5
 8003562:	47b8      	blx	r7
 8003564:	3001      	adds	r0, #1
 8003566:	d1c0      	bne.n	80034ea <_printf_float+0x316>
 8003568:	e68f      	b.n	800328a <_printf_float+0xb6>
 800356a:	9a06      	ldr	r2, [sp, #24]
 800356c:	464b      	mov	r3, r9
 800356e:	4442      	add	r2, r8
 8003570:	4631      	mov	r1, r6
 8003572:	4628      	mov	r0, r5
 8003574:	47b8      	blx	r7
 8003576:	3001      	adds	r0, #1
 8003578:	d1c3      	bne.n	8003502 <_printf_float+0x32e>
 800357a:	e686      	b.n	800328a <_printf_float+0xb6>
 800357c:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8003580:	f1ba 0f01 	cmp.w	sl, #1
 8003584:	dc01      	bgt.n	800358a <_printf_float+0x3b6>
 8003586:	07db      	lsls	r3, r3, #31
 8003588:	d536      	bpl.n	80035f8 <_printf_float+0x424>
 800358a:	2301      	movs	r3, #1
 800358c:	4642      	mov	r2, r8
 800358e:	4631      	mov	r1, r6
 8003590:	4628      	mov	r0, r5
 8003592:	47b8      	blx	r7
 8003594:	3001      	adds	r0, #1
 8003596:	f43f ae78 	beq.w	800328a <_printf_float+0xb6>
 800359a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800359e:	4631      	mov	r1, r6
 80035a0:	4628      	mov	r0, r5
 80035a2:	47b8      	blx	r7
 80035a4:	3001      	adds	r0, #1
 80035a6:	f43f ae70 	beq.w	800328a <_printf_float+0xb6>
 80035aa:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80035ae:	2200      	movs	r2, #0
 80035b0:	2300      	movs	r3, #0
 80035b2:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 80035b6:	f7fd fa8f 	bl	8000ad8 <__aeabi_dcmpeq>
 80035ba:	b9c0      	cbnz	r0, 80035ee <_printf_float+0x41a>
 80035bc:	4653      	mov	r3, sl
 80035be:	f108 0201 	add.w	r2, r8, #1
 80035c2:	4631      	mov	r1, r6
 80035c4:	4628      	mov	r0, r5
 80035c6:	47b8      	blx	r7
 80035c8:	3001      	adds	r0, #1
 80035ca:	d10c      	bne.n	80035e6 <_printf_float+0x412>
 80035cc:	e65d      	b.n	800328a <_printf_float+0xb6>
 80035ce:	2301      	movs	r3, #1
 80035d0:	465a      	mov	r2, fp
 80035d2:	4631      	mov	r1, r6
 80035d4:	4628      	mov	r0, r5
 80035d6:	47b8      	blx	r7
 80035d8:	3001      	adds	r0, #1
 80035da:	f43f ae56 	beq.w	800328a <_printf_float+0xb6>
 80035de:	f108 0801 	add.w	r8, r8, #1
 80035e2:	45d0      	cmp	r8, sl
 80035e4:	dbf3      	blt.n	80035ce <_printf_float+0x3fa>
 80035e6:	464b      	mov	r3, r9
 80035e8:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80035ec:	e6df      	b.n	80033ae <_printf_float+0x1da>
 80035ee:	f04f 0800 	mov.w	r8, #0
 80035f2:	f104 0b1a 	add.w	fp, r4, #26
 80035f6:	e7f4      	b.n	80035e2 <_printf_float+0x40e>
 80035f8:	2301      	movs	r3, #1
 80035fa:	4642      	mov	r2, r8
 80035fc:	e7e1      	b.n	80035c2 <_printf_float+0x3ee>
 80035fe:	2301      	movs	r3, #1
 8003600:	464a      	mov	r2, r9
 8003602:	4631      	mov	r1, r6
 8003604:	4628      	mov	r0, r5
 8003606:	47b8      	blx	r7
 8003608:	3001      	adds	r0, #1
 800360a:	f43f ae3e 	beq.w	800328a <_printf_float+0xb6>
 800360e:	f108 0801 	add.w	r8, r8, #1
 8003612:	68e3      	ldr	r3, [r4, #12]
 8003614:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8003616:	1a5b      	subs	r3, r3, r1
 8003618:	4543      	cmp	r3, r8
 800361a:	dcf0      	bgt.n	80035fe <_printf_float+0x42a>
 800361c:	e6fc      	b.n	8003418 <_printf_float+0x244>
 800361e:	f04f 0800 	mov.w	r8, #0
 8003622:	f104 0919 	add.w	r9, r4, #25
 8003626:	e7f4      	b.n	8003612 <_printf_float+0x43e>

08003628 <_printf_common>:
 8003628:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800362c:	4616      	mov	r6, r2
 800362e:	4698      	mov	r8, r3
 8003630:	688a      	ldr	r2, [r1, #8]
 8003632:	690b      	ldr	r3, [r1, #16]
 8003634:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003638:	4293      	cmp	r3, r2
 800363a:	bfb8      	it	lt
 800363c:	4613      	movlt	r3, r2
 800363e:	6033      	str	r3, [r6, #0]
 8003640:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8003644:	4607      	mov	r7, r0
 8003646:	460c      	mov	r4, r1
 8003648:	b10a      	cbz	r2, 800364e <_printf_common+0x26>
 800364a:	3301      	adds	r3, #1
 800364c:	6033      	str	r3, [r6, #0]
 800364e:	6823      	ldr	r3, [r4, #0]
 8003650:	0699      	lsls	r1, r3, #26
 8003652:	bf42      	ittt	mi
 8003654:	6833      	ldrmi	r3, [r6, #0]
 8003656:	3302      	addmi	r3, #2
 8003658:	6033      	strmi	r3, [r6, #0]
 800365a:	6825      	ldr	r5, [r4, #0]
 800365c:	f015 0506 	ands.w	r5, r5, #6
 8003660:	d106      	bne.n	8003670 <_printf_common+0x48>
 8003662:	f104 0a19 	add.w	sl, r4, #25
 8003666:	68e3      	ldr	r3, [r4, #12]
 8003668:	6832      	ldr	r2, [r6, #0]
 800366a:	1a9b      	subs	r3, r3, r2
 800366c:	42ab      	cmp	r3, r5
 800366e:	dc26      	bgt.n	80036be <_printf_common+0x96>
 8003670:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8003674:	6822      	ldr	r2, [r4, #0]
 8003676:	3b00      	subs	r3, #0
 8003678:	bf18      	it	ne
 800367a:	2301      	movne	r3, #1
 800367c:	0692      	lsls	r2, r2, #26
 800367e:	d42b      	bmi.n	80036d8 <_printf_common+0xb0>
 8003680:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8003684:	4641      	mov	r1, r8
 8003686:	4638      	mov	r0, r7
 8003688:	47c8      	blx	r9
 800368a:	3001      	adds	r0, #1
 800368c:	d01e      	beq.n	80036cc <_printf_common+0xa4>
 800368e:	6823      	ldr	r3, [r4, #0]
 8003690:	6922      	ldr	r2, [r4, #16]
 8003692:	f003 0306 	and.w	r3, r3, #6
 8003696:	2b04      	cmp	r3, #4
 8003698:	bf02      	ittt	eq
 800369a:	68e5      	ldreq	r5, [r4, #12]
 800369c:	6833      	ldreq	r3, [r6, #0]
 800369e:	1aed      	subeq	r5, r5, r3
 80036a0:	68a3      	ldr	r3, [r4, #8]
 80036a2:	bf0c      	ite	eq
 80036a4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80036a8:	2500      	movne	r5, #0
 80036aa:	4293      	cmp	r3, r2
 80036ac:	bfc4      	itt	gt
 80036ae:	1a9b      	subgt	r3, r3, r2
 80036b0:	18ed      	addgt	r5, r5, r3
 80036b2:	2600      	movs	r6, #0
 80036b4:	341a      	adds	r4, #26
 80036b6:	42b5      	cmp	r5, r6
 80036b8:	d11a      	bne.n	80036f0 <_printf_common+0xc8>
 80036ba:	2000      	movs	r0, #0
 80036bc:	e008      	b.n	80036d0 <_printf_common+0xa8>
 80036be:	2301      	movs	r3, #1
 80036c0:	4652      	mov	r2, sl
 80036c2:	4641      	mov	r1, r8
 80036c4:	4638      	mov	r0, r7
 80036c6:	47c8      	blx	r9
 80036c8:	3001      	adds	r0, #1
 80036ca:	d103      	bne.n	80036d4 <_printf_common+0xac>
 80036cc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80036d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80036d4:	3501      	adds	r5, #1
 80036d6:	e7c6      	b.n	8003666 <_printf_common+0x3e>
 80036d8:	18e1      	adds	r1, r4, r3
 80036da:	1c5a      	adds	r2, r3, #1
 80036dc:	2030      	movs	r0, #48	@ 0x30
 80036de:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80036e2:	4422      	add	r2, r4
 80036e4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80036e8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80036ec:	3302      	adds	r3, #2
 80036ee:	e7c7      	b.n	8003680 <_printf_common+0x58>
 80036f0:	2301      	movs	r3, #1
 80036f2:	4622      	mov	r2, r4
 80036f4:	4641      	mov	r1, r8
 80036f6:	4638      	mov	r0, r7
 80036f8:	47c8      	blx	r9
 80036fa:	3001      	adds	r0, #1
 80036fc:	d0e6      	beq.n	80036cc <_printf_common+0xa4>
 80036fe:	3601      	adds	r6, #1
 8003700:	e7d9      	b.n	80036b6 <_printf_common+0x8e>
	...

08003704 <_printf_i>:
 8003704:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003708:	7e0f      	ldrb	r7, [r1, #24]
 800370a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800370c:	2f78      	cmp	r7, #120	@ 0x78
 800370e:	4691      	mov	r9, r2
 8003710:	4680      	mov	r8, r0
 8003712:	460c      	mov	r4, r1
 8003714:	469a      	mov	sl, r3
 8003716:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800371a:	d807      	bhi.n	800372c <_printf_i+0x28>
 800371c:	2f62      	cmp	r7, #98	@ 0x62
 800371e:	d80a      	bhi.n	8003736 <_printf_i+0x32>
 8003720:	2f00      	cmp	r7, #0
 8003722:	f000 80d1 	beq.w	80038c8 <_printf_i+0x1c4>
 8003726:	2f58      	cmp	r7, #88	@ 0x58
 8003728:	f000 80b8 	beq.w	800389c <_printf_i+0x198>
 800372c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003730:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8003734:	e03a      	b.n	80037ac <_printf_i+0xa8>
 8003736:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800373a:	2b15      	cmp	r3, #21
 800373c:	d8f6      	bhi.n	800372c <_printf_i+0x28>
 800373e:	a101      	add	r1, pc, #4	@ (adr r1, 8003744 <_printf_i+0x40>)
 8003740:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003744:	0800379d 	.word	0x0800379d
 8003748:	080037b1 	.word	0x080037b1
 800374c:	0800372d 	.word	0x0800372d
 8003750:	0800372d 	.word	0x0800372d
 8003754:	0800372d 	.word	0x0800372d
 8003758:	0800372d 	.word	0x0800372d
 800375c:	080037b1 	.word	0x080037b1
 8003760:	0800372d 	.word	0x0800372d
 8003764:	0800372d 	.word	0x0800372d
 8003768:	0800372d 	.word	0x0800372d
 800376c:	0800372d 	.word	0x0800372d
 8003770:	080038af 	.word	0x080038af
 8003774:	080037db 	.word	0x080037db
 8003778:	08003869 	.word	0x08003869
 800377c:	0800372d 	.word	0x0800372d
 8003780:	0800372d 	.word	0x0800372d
 8003784:	080038d1 	.word	0x080038d1
 8003788:	0800372d 	.word	0x0800372d
 800378c:	080037db 	.word	0x080037db
 8003790:	0800372d 	.word	0x0800372d
 8003794:	0800372d 	.word	0x0800372d
 8003798:	08003871 	.word	0x08003871
 800379c:	6833      	ldr	r3, [r6, #0]
 800379e:	1d1a      	adds	r2, r3, #4
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	6032      	str	r2, [r6, #0]
 80037a4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80037a8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80037ac:	2301      	movs	r3, #1
 80037ae:	e09c      	b.n	80038ea <_printf_i+0x1e6>
 80037b0:	6833      	ldr	r3, [r6, #0]
 80037b2:	6820      	ldr	r0, [r4, #0]
 80037b4:	1d19      	adds	r1, r3, #4
 80037b6:	6031      	str	r1, [r6, #0]
 80037b8:	0606      	lsls	r6, r0, #24
 80037ba:	d501      	bpl.n	80037c0 <_printf_i+0xbc>
 80037bc:	681d      	ldr	r5, [r3, #0]
 80037be:	e003      	b.n	80037c8 <_printf_i+0xc4>
 80037c0:	0645      	lsls	r5, r0, #25
 80037c2:	d5fb      	bpl.n	80037bc <_printf_i+0xb8>
 80037c4:	f9b3 5000 	ldrsh.w	r5, [r3]
 80037c8:	2d00      	cmp	r5, #0
 80037ca:	da03      	bge.n	80037d4 <_printf_i+0xd0>
 80037cc:	232d      	movs	r3, #45	@ 0x2d
 80037ce:	426d      	negs	r5, r5
 80037d0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80037d4:	4858      	ldr	r0, [pc, #352]	@ (8003938 <_printf_i+0x234>)
 80037d6:	230a      	movs	r3, #10
 80037d8:	e011      	b.n	80037fe <_printf_i+0xfa>
 80037da:	6821      	ldr	r1, [r4, #0]
 80037dc:	6833      	ldr	r3, [r6, #0]
 80037de:	0608      	lsls	r0, r1, #24
 80037e0:	f853 5b04 	ldr.w	r5, [r3], #4
 80037e4:	d402      	bmi.n	80037ec <_printf_i+0xe8>
 80037e6:	0649      	lsls	r1, r1, #25
 80037e8:	bf48      	it	mi
 80037ea:	b2ad      	uxthmi	r5, r5
 80037ec:	2f6f      	cmp	r7, #111	@ 0x6f
 80037ee:	4852      	ldr	r0, [pc, #328]	@ (8003938 <_printf_i+0x234>)
 80037f0:	6033      	str	r3, [r6, #0]
 80037f2:	bf14      	ite	ne
 80037f4:	230a      	movne	r3, #10
 80037f6:	2308      	moveq	r3, #8
 80037f8:	2100      	movs	r1, #0
 80037fa:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80037fe:	6866      	ldr	r6, [r4, #4]
 8003800:	60a6      	str	r6, [r4, #8]
 8003802:	2e00      	cmp	r6, #0
 8003804:	db05      	blt.n	8003812 <_printf_i+0x10e>
 8003806:	6821      	ldr	r1, [r4, #0]
 8003808:	432e      	orrs	r6, r5
 800380a:	f021 0104 	bic.w	r1, r1, #4
 800380e:	6021      	str	r1, [r4, #0]
 8003810:	d04b      	beq.n	80038aa <_printf_i+0x1a6>
 8003812:	4616      	mov	r6, r2
 8003814:	fbb5 f1f3 	udiv	r1, r5, r3
 8003818:	fb03 5711 	mls	r7, r3, r1, r5
 800381c:	5dc7      	ldrb	r7, [r0, r7]
 800381e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003822:	462f      	mov	r7, r5
 8003824:	42bb      	cmp	r3, r7
 8003826:	460d      	mov	r5, r1
 8003828:	d9f4      	bls.n	8003814 <_printf_i+0x110>
 800382a:	2b08      	cmp	r3, #8
 800382c:	d10b      	bne.n	8003846 <_printf_i+0x142>
 800382e:	6823      	ldr	r3, [r4, #0]
 8003830:	07df      	lsls	r7, r3, #31
 8003832:	d508      	bpl.n	8003846 <_printf_i+0x142>
 8003834:	6923      	ldr	r3, [r4, #16]
 8003836:	6861      	ldr	r1, [r4, #4]
 8003838:	4299      	cmp	r1, r3
 800383a:	bfde      	ittt	le
 800383c:	2330      	movle	r3, #48	@ 0x30
 800383e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003842:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8003846:	1b92      	subs	r2, r2, r6
 8003848:	6122      	str	r2, [r4, #16]
 800384a:	f8cd a000 	str.w	sl, [sp]
 800384e:	464b      	mov	r3, r9
 8003850:	aa03      	add	r2, sp, #12
 8003852:	4621      	mov	r1, r4
 8003854:	4640      	mov	r0, r8
 8003856:	f7ff fee7 	bl	8003628 <_printf_common>
 800385a:	3001      	adds	r0, #1
 800385c:	d14a      	bne.n	80038f4 <_printf_i+0x1f0>
 800385e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003862:	b004      	add	sp, #16
 8003864:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003868:	6823      	ldr	r3, [r4, #0]
 800386a:	f043 0320 	orr.w	r3, r3, #32
 800386e:	6023      	str	r3, [r4, #0]
 8003870:	4832      	ldr	r0, [pc, #200]	@ (800393c <_printf_i+0x238>)
 8003872:	2778      	movs	r7, #120	@ 0x78
 8003874:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8003878:	6823      	ldr	r3, [r4, #0]
 800387a:	6831      	ldr	r1, [r6, #0]
 800387c:	061f      	lsls	r7, r3, #24
 800387e:	f851 5b04 	ldr.w	r5, [r1], #4
 8003882:	d402      	bmi.n	800388a <_printf_i+0x186>
 8003884:	065f      	lsls	r7, r3, #25
 8003886:	bf48      	it	mi
 8003888:	b2ad      	uxthmi	r5, r5
 800388a:	6031      	str	r1, [r6, #0]
 800388c:	07d9      	lsls	r1, r3, #31
 800388e:	bf44      	itt	mi
 8003890:	f043 0320 	orrmi.w	r3, r3, #32
 8003894:	6023      	strmi	r3, [r4, #0]
 8003896:	b11d      	cbz	r5, 80038a0 <_printf_i+0x19c>
 8003898:	2310      	movs	r3, #16
 800389a:	e7ad      	b.n	80037f8 <_printf_i+0xf4>
 800389c:	4826      	ldr	r0, [pc, #152]	@ (8003938 <_printf_i+0x234>)
 800389e:	e7e9      	b.n	8003874 <_printf_i+0x170>
 80038a0:	6823      	ldr	r3, [r4, #0]
 80038a2:	f023 0320 	bic.w	r3, r3, #32
 80038a6:	6023      	str	r3, [r4, #0]
 80038a8:	e7f6      	b.n	8003898 <_printf_i+0x194>
 80038aa:	4616      	mov	r6, r2
 80038ac:	e7bd      	b.n	800382a <_printf_i+0x126>
 80038ae:	6833      	ldr	r3, [r6, #0]
 80038b0:	6825      	ldr	r5, [r4, #0]
 80038b2:	6961      	ldr	r1, [r4, #20]
 80038b4:	1d18      	adds	r0, r3, #4
 80038b6:	6030      	str	r0, [r6, #0]
 80038b8:	062e      	lsls	r6, r5, #24
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	d501      	bpl.n	80038c2 <_printf_i+0x1be>
 80038be:	6019      	str	r1, [r3, #0]
 80038c0:	e002      	b.n	80038c8 <_printf_i+0x1c4>
 80038c2:	0668      	lsls	r0, r5, #25
 80038c4:	d5fb      	bpl.n	80038be <_printf_i+0x1ba>
 80038c6:	8019      	strh	r1, [r3, #0]
 80038c8:	2300      	movs	r3, #0
 80038ca:	6123      	str	r3, [r4, #16]
 80038cc:	4616      	mov	r6, r2
 80038ce:	e7bc      	b.n	800384a <_printf_i+0x146>
 80038d0:	6833      	ldr	r3, [r6, #0]
 80038d2:	1d1a      	adds	r2, r3, #4
 80038d4:	6032      	str	r2, [r6, #0]
 80038d6:	681e      	ldr	r6, [r3, #0]
 80038d8:	6862      	ldr	r2, [r4, #4]
 80038da:	2100      	movs	r1, #0
 80038dc:	4630      	mov	r0, r6
 80038de:	f7fc fc7f 	bl	80001e0 <memchr>
 80038e2:	b108      	cbz	r0, 80038e8 <_printf_i+0x1e4>
 80038e4:	1b80      	subs	r0, r0, r6
 80038e6:	6060      	str	r0, [r4, #4]
 80038e8:	6863      	ldr	r3, [r4, #4]
 80038ea:	6123      	str	r3, [r4, #16]
 80038ec:	2300      	movs	r3, #0
 80038ee:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80038f2:	e7aa      	b.n	800384a <_printf_i+0x146>
 80038f4:	6923      	ldr	r3, [r4, #16]
 80038f6:	4632      	mov	r2, r6
 80038f8:	4649      	mov	r1, r9
 80038fa:	4640      	mov	r0, r8
 80038fc:	47d0      	blx	sl
 80038fe:	3001      	adds	r0, #1
 8003900:	d0ad      	beq.n	800385e <_printf_i+0x15a>
 8003902:	6823      	ldr	r3, [r4, #0]
 8003904:	079b      	lsls	r3, r3, #30
 8003906:	d413      	bmi.n	8003930 <_printf_i+0x22c>
 8003908:	68e0      	ldr	r0, [r4, #12]
 800390a:	9b03      	ldr	r3, [sp, #12]
 800390c:	4298      	cmp	r0, r3
 800390e:	bfb8      	it	lt
 8003910:	4618      	movlt	r0, r3
 8003912:	e7a6      	b.n	8003862 <_printf_i+0x15e>
 8003914:	2301      	movs	r3, #1
 8003916:	4632      	mov	r2, r6
 8003918:	4649      	mov	r1, r9
 800391a:	4640      	mov	r0, r8
 800391c:	47d0      	blx	sl
 800391e:	3001      	adds	r0, #1
 8003920:	d09d      	beq.n	800385e <_printf_i+0x15a>
 8003922:	3501      	adds	r5, #1
 8003924:	68e3      	ldr	r3, [r4, #12]
 8003926:	9903      	ldr	r1, [sp, #12]
 8003928:	1a5b      	subs	r3, r3, r1
 800392a:	42ab      	cmp	r3, r5
 800392c:	dcf2      	bgt.n	8003914 <_printf_i+0x210>
 800392e:	e7eb      	b.n	8003908 <_printf_i+0x204>
 8003930:	2500      	movs	r5, #0
 8003932:	f104 0619 	add.w	r6, r4, #25
 8003936:	e7f5      	b.n	8003924 <_printf_i+0x220>
 8003938:	08005b06 	.word	0x08005b06
 800393c:	08005b17 	.word	0x08005b17

08003940 <std>:
 8003940:	2300      	movs	r3, #0
 8003942:	b510      	push	{r4, lr}
 8003944:	4604      	mov	r4, r0
 8003946:	e9c0 3300 	strd	r3, r3, [r0]
 800394a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800394e:	6083      	str	r3, [r0, #8]
 8003950:	8181      	strh	r1, [r0, #12]
 8003952:	6643      	str	r3, [r0, #100]	@ 0x64
 8003954:	81c2      	strh	r2, [r0, #14]
 8003956:	6183      	str	r3, [r0, #24]
 8003958:	4619      	mov	r1, r3
 800395a:	2208      	movs	r2, #8
 800395c:	305c      	adds	r0, #92	@ 0x5c
 800395e:	f000 f90e 	bl	8003b7e <memset>
 8003962:	4b0d      	ldr	r3, [pc, #52]	@ (8003998 <std+0x58>)
 8003964:	6263      	str	r3, [r4, #36]	@ 0x24
 8003966:	4b0d      	ldr	r3, [pc, #52]	@ (800399c <std+0x5c>)
 8003968:	62a3      	str	r3, [r4, #40]	@ 0x28
 800396a:	4b0d      	ldr	r3, [pc, #52]	@ (80039a0 <std+0x60>)
 800396c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800396e:	4b0d      	ldr	r3, [pc, #52]	@ (80039a4 <std+0x64>)
 8003970:	6323      	str	r3, [r4, #48]	@ 0x30
 8003972:	4b0d      	ldr	r3, [pc, #52]	@ (80039a8 <std+0x68>)
 8003974:	6224      	str	r4, [r4, #32]
 8003976:	429c      	cmp	r4, r3
 8003978:	d006      	beq.n	8003988 <std+0x48>
 800397a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800397e:	4294      	cmp	r4, r2
 8003980:	d002      	beq.n	8003988 <std+0x48>
 8003982:	33d0      	adds	r3, #208	@ 0xd0
 8003984:	429c      	cmp	r4, r3
 8003986:	d105      	bne.n	8003994 <std+0x54>
 8003988:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800398c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003990:	f000 b972 	b.w	8003c78 <__retarget_lock_init_recursive>
 8003994:	bd10      	pop	{r4, pc}
 8003996:	bf00      	nop
 8003998:	08003af9 	.word	0x08003af9
 800399c:	08003b1b 	.word	0x08003b1b
 80039a0:	08003b53 	.word	0x08003b53
 80039a4:	08003b77 	.word	0x08003b77
 80039a8:	200003e8 	.word	0x200003e8

080039ac <stdio_exit_handler>:
 80039ac:	4a02      	ldr	r2, [pc, #8]	@ (80039b8 <stdio_exit_handler+0xc>)
 80039ae:	4903      	ldr	r1, [pc, #12]	@ (80039bc <stdio_exit_handler+0x10>)
 80039b0:	4803      	ldr	r0, [pc, #12]	@ (80039c0 <stdio_exit_handler+0x14>)
 80039b2:	f000 b869 	b.w	8003a88 <_fwalk_sglue>
 80039b6:	bf00      	nop
 80039b8:	20000114 	.word	0x20000114
 80039bc:	080055b1 	.word	0x080055b1
 80039c0:	20000124 	.word	0x20000124

080039c4 <cleanup_stdio>:
 80039c4:	6841      	ldr	r1, [r0, #4]
 80039c6:	4b0c      	ldr	r3, [pc, #48]	@ (80039f8 <cleanup_stdio+0x34>)
 80039c8:	4299      	cmp	r1, r3
 80039ca:	b510      	push	{r4, lr}
 80039cc:	4604      	mov	r4, r0
 80039ce:	d001      	beq.n	80039d4 <cleanup_stdio+0x10>
 80039d0:	f001 fdee 	bl	80055b0 <_fflush_r>
 80039d4:	68a1      	ldr	r1, [r4, #8]
 80039d6:	4b09      	ldr	r3, [pc, #36]	@ (80039fc <cleanup_stdio+0x38>)
 80039d8:	4299      	cmp	r1, r3
 80039da:	d002      	beq.n	80039e2 <cleanup_stdio+0x1e>
 80039dc:	4620      	mov	r0, r4
 80039de:	f001 fde7 	bl	80055b0 <_fflush_r>
 80039e2:	68e1      	ldr	r1, [r4, #12]
 80039e4:	4b06      	ldr	r3, [pc, #24]	@ (8003a00 <cleanup_stdio+0x3c>)
 80039e6:	4299      	cmp	r1, r3
 80039e8:	d004      	beq.n	80039f4 <cleanup_stdio+0x30>
 80039ea:	4620      	mov	r0, r4
 80039ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80039f0:	f001 bdde 	b.w	80055b0 <_fflush_r>
 80039f4:	bd10      	pop	{r4, pc}
 80039f6:	bf00      	nop
 80039f8:	200003e8 	.word	0x200003e8
 80039fc:	20000450 	.word	0x20000450
 8003a00:	200004b8 	.word	0x200004b8

08003a04 <global_stdio_init.part.0>:
 8003a04:	b510      	push	{r4, lr}
 8003a06:	4b0b      	ldr	r3, [pc, #44]	@ (8003a34 <global_stdio_init.part.0+0x30>)
 8003a08:	4c0b      	ldr	r4, [pc, #44]	@ (8003a38 <global_stdio_init.part.0+0x34>)
 8003a0a:	4a0c      	ldr	r2, [pc, #48]	@ (8003a3c <global_stdio_init.part.0+0x38>)
 8003a0c:	601a      	str	r2, [r3, #0]
 8003a0e:	4620      	mov	r0, r4
 8003a10:	2200      	movs	r2, #0
 8003a12:	2104      	movs	r1, #4
 8003a14:	f7ff ff94 	bl	8003940 <std>
 8003a18:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8003a1c:	2201      	movs	r2, #1
 8003a1e:	2109      	movs	r1, #9
 8003a20:	f7ff ff8e 	bl	8003940 <std>
 8003a24:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8003a28:	2202      	movs	r2, #2
 8003a2a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003a2e:	2112      	movs	r1, #18
 8003a30:	f7ff bf86 	b.w	8003940 <std>
 8003a34:	20000520 	.word	0x20000520
 8003a38:	200003e8 	.word	0x200003e8
 8003a3c:	080039ad 	.word	0x080039ad

08003a40 <__sfp_lock_acquire>:
 8003a40:	4801      	ldr	r0, [pc, #4]	@ (8003a48 <__sfp_lock_acquire+0x8>)
 8003a42:	f000 b91a 	b.w	8003c7a <__retarget_lock_acquire_recursive>
 8003a46:	bf00      	nop
 8003a48:	20000529 	.word	0x20000529

08003a4c <__sfp_lock_release>:
 8003a4c:	4801      	ldr	r0, [pc, #4]	@ (8003a54 <__sfp_lock_release+0x8>)
 8003a4e:	f000 b915 	b.w	8003c7c <__retarget_lock_release_recursive>
 8003a52:	bf00      	nop
 8003a54:	20000529 	.word	0x20000529

08003a58 <__sinit>:
 8003a58:	b510      	push	{r4, lr}
 8003a5a:	4604      	mov	r4, r0
 8003a5c:	f7ff fff0 	bl	8003a40 <__sfp_lock_acquire>
 8003a60:	6a23      	ldr	r3, [r4, #32]
 8003a62:	b11b      	cbz	r3, 8003a6c <__sinit+0x14>
 8003a64:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003a68:	f7ff bff0 	b.w	8003a4c <__sfp_lock_release>
 8003a6c:	4b04      	ldr	r3, [pc, #16]	@ (8003a80 <__sinit+0x28>)
 8003a6e:	6223      	str	r3, [r4, #32]
 8003a70:	4b04      	ldr	r3, [pc, #16]	@ (8003a84 <__sinit+0x2c>)
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d1f5      	bne.n	8003a64 <__sinit+0xc>
 8003a78:	f7ff ffc4 	bl	8003a04 <global_stdio_init.part.0>
 8003a7c:	e7f2      	b.n	8003a64 <__sinit+0xc>
 8003a7e:	bf00      	nop
 8003a80:	080039c5 	.word	0x080039c5
 8003a84:	20000520 	.word	0x20000520

08003a88 <_fwalk_sglue>:
 8003a88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003a8c:	4607      	mov	r7, r0
 8003a8e:	4688      	mov	r8, r1
 8003a90:	4614      	mov	r4, r2
 8003a92:	2600      	movs	r6, #0
 8003a94:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003a98:	f1b9 0901 	subs.w	r9, r9, #1
 8003a9c:	d505      	bpl.n	8003aaa <_fwalk_sglue+0x22>
 8003a9e:	6824      	ldr	r4, [r4, #0]
 8003aa0:	2c00      	cmp	r4, #0
 8003aa2:	d1f7      	bne.n	8003a94 <_fwalk_sglue+0xc>
 8003aa4:	4630      	mov	r0, r6
 8003aa6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003aaa:	89ab      	ldrh	r3, [r5, #12]
 8003aac:	2b01      	cmp	r3, #1
 8003aae:	d907      	bls.n	8003ac0 <_fwalk_sglue+0x38>
 8003ab0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003ab4:	3301      	adds	r3, #1
 8003ab6:	d003      	beq.n	8003ac0 <_fwalk_sglue+0x38>
 8003ab8:	4629      	mov	r1, r5
 8003aba:	4638      	mov	r0, r7
 8003abc:	47c0      	blx	r8
 8003abe:	4306      	orrs	r6, r0
 8003ac0:	3568      	adds	r5, #104	@ 0x68
 8003ac2:	e7e9      	b.n	8003a98 <_fwalk_sglue+0x10>

08003ac4 <iprintf>:
 8003ac4:	b40f      	push	{r0, r1, r2, r3}
 8003ac6:	b507      	push	{r0, r1, r2, lr}
 8003ac8:	4906      	ldr	r1, [pc, #24]	@ (8003ae4 <iprintf+0x20>)
 8003aca:	ab04      	add	r3, sp, #16
 8003acc:	6808      	ldr	r0, [r1, #0]
 8003ace:	f853 2b04 	ldr.w	r2, [r3], #4
 8003ad2:	6881      	ldr	r1, [r0, #8]
 8003ad4:	9301      	str	r3, [sp, #4]
 8003ad6:	f001 fbcf 	bl	8005278 <_vfiprintf_r>
 8003ada:	b003      	add	sp, #12
 8003adc:	f85d eb04 	ldr.w	lr, [sp], #4
 8003ae0:	b004      	add	sp, #16
 8003ae2:	4770      	bx	lr
 8003ae4:	20000120 	.word	0x20000120

08003ae8 <putchar>:
 8003ae8:	4b02      	ldr	r3, [pc, #8]	@ (8003af4 <putchar+0xc>)
 8003aea:	4601      	mov	r1, r0
 8003aec:	6818      	ldr	r0, [r3, #0]
 8003aee:	6882      	ldr	r2, [r0, #8]
 8003af0:	f001 bd86 	b.w	8005600 <_putc_r>
 8003af4:	20000120 	.word	0x20000120

08003af8 <__sread>:
 8003af8:	b510      	push	{r4, lr}
 8003afa:	460c      	mov	r4, r1
 8003afc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003b00:	f000 f86c 	bl	8003bdc <_read_r>
 8003b04:	2800      	cmp	r0, #0
 8003b06:	bfab      	itete	ge
 8003b08:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8003b0a:	89a3      	ldrhlt	r3, [r4, #12]
 8003b0c:	181b      	addge	r3, r3, r0
 8003b0e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8003b12:	bfac      	ite	ge
 8003b14:	6563      	strge	r3, [r4, #84]	@ 0x54
 8003b16:	81a3      	strhlt	r3, [r4, #12]
 8003b18:	bd10      	pop	{r4, pc}

08003b1a <__swrite>:
 8003b1a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003b1e:	461f      	mov	r7, r3
 8003b20:	898b      	ldrh	r3, [r1, #12]
 8003b22:	05db      	lsls	r3, r3, #23
 8003b24:	4605      	mov	r5, r0
 8003b26:	460c      	mov	r4, r1
 8003b28:	4616      	mov	r6, r2
 8003b2a:	d505      	bpl.n	8003b38 <__swrite+0x1e>
 8003b2c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003b30:	2302      	movs	r3, #2
 8003b32:	2200      	movs	r2, #0
 8003b34:	f000 f840 	bl	8003bb8 <_lseek_r>
 8003b38:	89a3      	ldrh	r3, [r4, #12]
 8003b3a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003b3e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003b42:	81a3      	strh	r3, [r4, #12]
 8003b44:	4632      	mov	r2, r6
 8003b46:	463b      	mov	r3, r7
 8003b48:	4628      	mov	r0, r5
 8003b4a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003b4e:	f000 b857 	b.w	8003c00 <_write_r>

08003b52 <__sseek>:
 8003b52:	b510      	push	{r4, lr}
 8003b54:	460c      	mov	r4, r1
 8003b56:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003b5a:	f000 f82d 	bl	8003bb8 <_lseek_r>
 8003b5e:	1c43      	adds	r3, r0, #1
 8003b60:	89a3      	ldrh	r3, [r4, #12]
 8003b62:	bf15      	itete	ne
 8003b64:	6560      	strne	r0, [r4, #84]	@ 0x54
 8003b66:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8003b6a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8003b6e:	81a3      	strheq	r3, [r4, #12]
 8003b70:	bf18      	it	ne
 8003b72:	81a3      	strhne	r3, [r4, #12]
 8003b74:	bd10      	pop	{r4, pc}

08003b76 <__sclose>:
 8003b76:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003b7a:	f000 b80d 	b.w	8003b98 <_close_r>

08003b7e <memset>:
 8003b7e:	4402      	add	r2, r0
 8003b80:	4603      	mov	r3, r0
 8003b82:	4293      	cmp	r3, r2
 8003b84:	d100      	bne.n	8003b88 <memset+0xa>
 8003b86:	4770      	bx	lr
 8003b88:	f803 1b01 	strb.w	r1, [r3], #1
 8003b8c:	e7f9      	b.n	8003b82 <memset+0x4>
	...

08003b90 <_localeconv_r>:
 8003b90:	4800      	ldr	r0, [pc, #0]	@ (8003b94 <_localeconv_r+0x4>)
 8003b92:	4770      	bx	lr
 8003b94:	20000260 	.word	0x20000260

08003b98 <_close_r>:
 8003b98:	b538      	push	{r3, r4, r5, lr}
 8003b9a:	4d06      	ldr	r5, [pc, #24]	@ (8003bb4 <_close_r+0x1c>)
 8003b9c:	2300      	movs	r3, #0
 8003b9e:	4604      	mov	r4, r0
 8003ba0:	4608      	mov	r0, r1
 8003ba2:	602b      	str	r3, [r5, #0]
 8003ba4:	f7fd fcea 	bl	800157c <_close>
 8003ba8:	1c43      	adds	r3, r0, #1
 8003baa:	d102      	bne.n	8003bb2 <_close_r+0x1a>
 8003bac:	682b      	ldr	r3, [r5, #0]
 8003bae:	b103      	cbz	r3, 8003bb2 <_close_r+0x1a>
 8003bb0:	6023      	str	r3, [r4, #0]
 8003bb2:	bd38      	pop	{r3, r4, r5, pc}
 8003bb4:	20000524 	.word	0x20000524

08003bb8 <_lseek_r>:
 8003bb8:	b538      	push	{r3, r4, r5, lr}
 8003bba:	4d07      	ldr	r5, [pc, #28]	@ (8003bd8 <_lseek_r+0x20>)
 8003bbc:	4604      	mov	r4, r0
 8003bbe:	4608      	mov	r0, r1
 8003bc0:	4611      	mov	r1, r2
 8003bc2:	2200      	movs	r2, #0
 8003bc4:	602a      	str	r2, [r5, #0]
 8003bc6:	461a      	mov	r2, r3
 8003bc8:	f7fd fce4 	bl	8001594 <_lseek>
 8003bcc:	1c43      	adds	r3, r0, #1
 8003bce:	d102      	bne.n	8003bd6 <_lseek_r+0x1e>
 8003bd0:	682b      	ldr	r3, [r5, #0]
 8003bd2:	b103      	cbz	r3, 8003bd6 <_lseek_r+0x1e>
 8003bd4:	6023      	str	r3, [r4, #0]
 8003bd6:	bd38      	pop	{r3, r4, r5, pc}
 8003bd8:	20000524 	.word	0x20000524

08003bdc <_read_r>:
 8003bdc:	b538      	push	{r3, r4, r5, lr}
 8003bde:	4d07      	ldr	r5, [pc, #28]	@ (8003bfc <_read_r+0x20>)
 8003be0:	4604      	mov	r4, r0
 8003be2:	4608      	mov	r0, r1
 8003be4:	4611      	mov	r1, r2
 8003be6:	2200      	movs	r2, #0
 8003be8:	602a      	str	r2, [r5, #0]
 8003bea:	461a      	mov	r2, r3
 8003bec:	f7fd fcb8 	bl	8001560 <_read>
 8003bf0:	1c43      	adds	r3, r0, #1
 8003bf2:	d102      	bne.n	8003bfa <_read_r+0x1e>
 8003bf4:	682b      	ldr	r3, [r5, #0]
 8003bf6:	b103      	cbz	r3, 8003bfa <_read_r+0x1e>
 8003bf8:	6023      	str	r3, [r4, #0]
 8003bfa:	bd38      	pop	{r3, r4, r5, pc}
 8003bfc:	20000524 	.word	0x20000524

08003c00 <_write_r>:
 8003c00:	b538      	push	{r3, r4, r5, lr}
 8003c02:	4d07      	ldr	r5, [pc, #28]	@ (8003c20 <_write_r+0x20>)
 8003c04:	4604      	mov	r4, r0
 8003c06:	4608      	mov	r0, r1
 8003c08:	4611      	mov	r1, r2
 8003c0a:	2200      	movs	r2, #0
 8003c0c:	602a      	str	r2, [r5, #0]
 8003c0e:	461a      	mov	r2, r3
 8003c10:	f7fd f968 	bl	8000ee4 <_write>
 8003c14:	1c43      	adds	r3, r0, #1
 8003c16:	d102      	bne.n	8003c1e <_write_r+0x1e>
 8003c18:	682b      	ldr	r3, [r5, #0]
 8003c1a:	b103      	cbz	r3, 8003c1e <_write_r+0x1e>
 8003c1c:	6023      	str	r3, [r4, #0]
 8003c1e:	bd38      	pop	{r3, r4, r5, pc}
 8003c20:	20000524 	.word	0x20000524

08003c24 <__errno>:
 8003c24:	4b01      	ldr	r3, [pc, #4]	@ (8003c2c <__errno+0x8>)
 8003c26:	6818      	ldr	r0, [r3, #0]
 8003c28:	4770      	bx	lr
 8003c2a:	bf00      	nop
 8003c2c:	20000120 	.word	0x20000120

08003c30 <__libc_init_array>:
 8003c30:	b570      	push	{r4, r5, r6, lr}
 8003c32:	4d0d      	ldr	r5, [pc, #52]	@ (8003c68 <__libc_init_array+0x38>)
 8003c34:	4c0d      	ldr	r4, [pc, #52]	@ (8003c6c <__libc_init_array+0x3c>)
 8003c36:	1b64      	subs	r4, r4, r5
 8003c38:	10a4      	asrs	r4, r4, #2
 8003c3a:	2600      	movs	r6, #0
 8003c3c:	42a6      	cmp	r6, r4
 8003c3e:	d109      	bne.n	8003c54 <__libc_init_array+0x24>
 8003c40:	4d0b      	ldr	r5, [pc, #44]	@ (8003c70 <__libc_init_array+0x40>)
 8003c42:	4c0c      	ldr	r4, [pc, #48]	@ (8003c74 <__libc_init_array+0x44>)
 8003c44:	f001 fef6 	bl	8005a34 <_init>
 8003c48:	1b64      	subs	r4, r4, r5
 8003c4a:	10a4      	asrs	r4, r4, #2
 8003c4c:	2600      	movs	r6, #0
 8003c4e:	42a6      	cmp	r6, r4
 8003c50:	d105      	bne.n	8003c5e <__libc_init_array+0x2e>
 8003c52:	bd70      	pop	{r4, r5, r6, pc}
 8003c54:	f855 3b04 	ldr.w	r3, [r5], #4
 8003c58:	4798      	blx	r3
 8003c5a:	3601      	adds	r6, #1
 8003c5c:	e7ee      	b.n	8003c3c <__libc_init_array+0xc>
 8003c5e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003c62:	4798      	blx	r3
 8003c64:	3601      	adds	r6, #1
 8003c66:	e7f2      	b.n	8003c4e <__libc_init_array+0x1e>
 8003c68:	08005e74 	.word	0x08005e74
 8003c6c:	08005e74 	.word	0x08005e74
 8003c70:	08005e74 	.word	0x08005e74
 8003c74:	08005e78 	.word	0x08005e78

08003c78 <__retarget_lock_init_recursive>:
 8003c78:	4770      	bx	lr

08003c7a <__retarget_lock_acquire_recursive>:
 8003c7a:	4770      	bx	lr

08003c7c <__retarget_lock_release_recursive>:
 8003c7c:	4770      	bx	lr

08003c7e <quorem>:
 8003c7e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003c82:	6903      	ldr	r3, [r0, #16]
 8003c84:	690c      	ldr	r4, [r1, #16]
 8003c86:	42a3      	cmp	r3, r4
 8003c88:	4607      	mov	r7, r0
 8003c8a:	db7e      	blt.n	8003d8a <quorem+0x10c>
 8003c8c:	3c01      	subs	r4, #1
 8003c8e:	f101 0814 	add.w	r8, r1, #20
 8003c92:	00a3      	lsls	r3, r4, #2
 8003c94:	f100 0514 	add.w	r5, r0, #20
 8003c98:	9300      	str	r3, [sp, #0]
 8003c9a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8003c9e:	9301      	str	r3, [sp, #4]
 8003ca0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8003ca4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8003ca8:	3301      	adds	r3, #1
 8003caa:	429a      	cmp	r2, r3
 8003cac:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8003cb0:	fbb2 f6f3 	udiv	r6, r2, r3
 8003cb4:	d32e      	bcc.n	8003d14 <quorem+0x96>
 8003cb6:	f04f 0a00 	mov.w	sl, #0
 8003cba:	46c4      	mov	ip, r8
 8003cbc:	46ae      	mov	lr, r5
 8003cbe:	46d3      	mov	fp, sl
 8003cc0:	f85c 3b04 	ldr.w	r3, [ip], #4
 8003cc4:	b298      	uxth	r0, r3
 8003cc6:	fb06 a000 	mla	r0, r6, r0, sl
 8003cca:	0c02      	lsrs	r2, r0, #16
 8003ccc:	0c1b      	lsrs	r3, r3, #16
 8003cce:	fb06 2303 	mla	r3, r6, r3, r2
 8003cd2:	f8de 2000 	ldr.w	r2, [lr]
 8003cd6:	b280      	uxth	r0, r0
 8003cd8:	b292      	uxth	r2, r2
 8003cda:	1a12      	subs	r2, r2, r0
 8003cdc:	445a      	add	r2, fp
 8003cde:	f8de 0000 	ldr.w	r0, [lr]
 8003ce2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8003ce6:	b29b      	uxth	r3, r3
 8003ce8:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8003cec:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8003cf0:	b292      	uxth	r2, r2
 8003cf2:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8003cf6:	45e1      	cmp	r9, ip
 8003cf8:	f84e 2b04 	str.w	r2, [lr], #4
 8003cfc:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8003d00:	d2de      	bcs.n	8003cc0 <quorem+0x42>
 8003d02:	9b00      	ldr	r3, [sp, #0]
 8003d04:	58eb      	ldr	r3, [r5, r3]
 8003d06:	b92b      	cbnz	r3, 8003d14 <quorem+0x96>
 8003d08:	9b01      	ldr	r3, [sp, #4]
 8003d0a:	3b04      	subs	r3, #4
 8003d0c:	429d      	cmp	r5, r3
 8003d0e:	461a      	mov	r2, r3
 8003d10:	d32f      	bcc.n	8003d72 <quorem+0xf4>
 8003d12:	613c      	str	r4, [r7, #16]
 8003d14:	4638      	mov	r0, r7
 8003d16:	f001 f97d 	bl	8005014 <__mcmp>
 8003d1a:	2800      	cmp	r0, #0
 8003d1c:	db25      	blt.n	8003d6a <quorem+0xec>
 8003d1e:	4629      	mov	r1, r5
 8003d20:	2000      	movs	r0, #0
 8003d22:	f858 2b04 	ldr.w	r2, [r8], #4
 8003d26:	f8d1 c000 	ldr.w	ip, [r1]
 8003d2a:	fa1f fe82 	uxth.w	lr, r2
 8003d2e:	fa1f f38c 	uxth.w	r3, ip
 8003d32:	eba3 030e 	sub.w	r3, r3, lr
 8003d36:	4403      	add	r3, r0
 8003d38:	0c12      	lsrs	r2, r2, #16
 8003d3a:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8003d3e:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8003d42:	b29b      	uxth	r3, r3
 8003d44:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8003d48:	45c1      	cmp	r9, r8
 8003d4a:	f841 3b04 	str.w	r3, [r1], #4
 8003d4e:	ea4f 4022 	mov.w	r0, r2, asr #16
 8003d52:	d2e6      	bcs.n	8003d22 <quorem+0xa4>
 8003d54:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8003d58:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8003d5c:	b922      	cbnz	r2, 8003d68 <quorem+0xea>
 8003d5e:	3b04      	subs	r3, #4
 8003d60:	429d      	cmp	r5, r3
 8003d62:	461a      	mov	r2, r3
 8003d64:	d30b      	bcc.n	8003d7e <quorem+0x100>
 8003d66:	613c      	str	r4, [r7, #16]
 8003d68:	3601      	adds	r6, #1
 8003d6a:	4630      	mov	r0, r6
 8003d6c:	b003      	add	sp, #12
 8003d6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003d72:	6812      	ldr	r2, [r2, #0]
 8003d74:	3b04      	subs	r3, #4
 8003d76:	2a00      	cmp	r2, #0
 8003d78:	d1cb      	bne.n	8003d12 <quorem+0x94>
 8003d7a:	3c01      	subs	r4, #1
 8003d7c:	e7c6      	b.n	8003d0c <quorem+0x8e>
 8003d7e:	6812      	ldr	r2, [r2, #0]
 8003d80:	3b04      	subs	r3, #4
 8003d82:	2a00      	cmp	r2, #0
 8003d84:	d1ef      	bne.n	8003d66 <quorem+0xe8>
 8003d86:	3c01      	subs	r4, #1
 8003d88:	e7ea      	b.n	8003d60 <quorem+0xe2>
 8003d8a:	2000      	movs	r0, #0
 8003d8c:	e7ee      	b.n	8003d6c <quorem+0xee>
	...

08003d90 <_dtoa_r>:
 8003d90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003d94:	69c7      	ldr	r7, [r0, #28]
 8003d96:	b097      	sub	sp, #92	@ 0x5c
 8003d98:	ed8d 0b04 	vstr	d0, [sp, #16]
 8003d9c:	ec55 4b10 	vmov	r4, r5, d0
 8003da0:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 8003da2:	9107      	str	r1, [sp, #28]
 8003da4:	4681      	mov	r9, r0
 8003da6:	920c      	str	r2, [sp, #48]	@ 0x30
 8003da8:	9311      	str	r3, [sp, #68]	@ 0x44
 8003daa:	b97f      	cbnz	r7, 8003dcc <_dtoa_r+0x3c>
 8003dac:	2010      	movs	r0, #16
 8003dae:	f000 fe09 	bl	80049c4 <malloc>
 8003db2:	4602      	mov	r2, r0
 8003db4:	f8c9 001c 	str.w	r0, [r9, #28]
 8003db8:	b920      	cbnz	r0, 8003dc4 <_dtoa_r+0x34>
 8003dba:	4ba9      	ldr	r3, [pc, #676]	@ (8004060 <_dtoa_r+0x2d0>)
 8003dbc:	21ef      	movs	r1, #239	@ 0xef
 8003dbe:	48a9      	ldr	r0, [pc, #676]	@ (8004064 <_dtoa_r+0x2d4>)
 8003dc0:	f001 fd04 	bl	80057cc <__assert_func>
 8003dc4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8003dc8:	6007      	str	r7, [r0, #0]
 8003dca:	60c7      	str	r7, [r0, #12]
 8003dcc:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8003dd0:	6819      	ldr	r1, [r3, #0]
 8003dd2:	b159      	cbz	r1, 8003dec <_dtoa_r+0x5c>
 8003dd4:	685a      	ldr	r2, [r3, #4]
 8003dd6:	604a      	str	r2, [r1, #4]
 8003dd8:	2301      	movs	r3, #1
 8003dda:	4093      	lsls	r3, r2
 8003ddc:	608b      	str	r3, [r1, #8]
 8003dde:	4648      	mov	r0, r9
 8003de0:	f000 fee6 	bl	8004bb0 <_Bfree>
 8003de4:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8003de8:	2200      	movs	r2, #0
 8003dea:	601a      	str	r2, [r3, #0]
 8003dec:	1e2b      	subs	r3, r5, #0
 8003dee:	bfb9      	ittee	lt
 8003df0:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8003df4:	9305      	strlt	r3, [sp, #20]
 8003df6:	2300      	movge	r3, #0
 8003df8:	6033      	strge	r3, [r6, #0]
 8003dfa:	9f05      	ldr	r7, [sp, #20]
 8003dfc:	4b9a      	ldr	r3, [pc, #616]	@ (8004068 <_dtoa_r+0x2d8>)
 8003dfe:	bfbc      	itt	lt
 8003e00:	2201      	movlt	r2, #1
 8003e02:	6032      	strlt	r2, [r6, #0]
 8003e04:	43bb      	bics	r3, r7
 8003e06:	d112      	bne.n	8003e2e <_dtoa_r+0x9e>
 8003e08:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8003e0a:	f242 730f 	movw	r3, #9999	@ 0x270f
 8003e0e:	6013      	str	r3, [r2, #0]
 8003e10:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8003e14:	4323      	orrs	r3, r4
 8003e16:	f000 855a 	beq.w	80048ce <_dtoa_r+0xb3e>
 8003e1a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8003e1c:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 800407c <_dtoa_r+0x2ec>
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	f000 855c 	beq.w	80048de <_dtoa_r+0xb4e>
 8003e26:	f10a 0303 	add.w	r3, sl, #3
 8003e2a:	f000 bd56 	b.w	80048da <_dtoa_r+0xb4a>
 8003e2e:	ed9d 7b04 	vldr	d7, [sp, #16]
 8003e32:	2200      	movs	r2, #0
 8003e34:	ec51 0b17 	vmov	r0, r1, d7
 8003e38:	2300      	movs	r3, #0
 8003e3a:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 8003e3e:	f7fc fe4b 	bl	8000ad8 <__aeabi_dcmpeq>
 8003e42:	4680      	mov	r8, r0
 8003e44:	b158      	cbz	r0, 8003e5e <_dtoa_r+0xce>
 8003e46:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8003e48:	2301      	movs	r3, #1
 8003e4a:	6013      	str	r3, [r2, #0]
 8003e4c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8003e4e:	b113      	cbz	r3, 8003e56 <_dtoa_r+0xc6>
 8003e50:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8003e52:	4b86      	ldr	r3, [pc, #536]	@ (800406c <_dtoa_r+0x2dc>)
 8003e54:	6013      	str	r3, [r2, #0]
 8003e56:	f8df a228 	ldr.w	sl, [pc, #552]	@ 8004080 <_dtoa_r+0x2f0>
 8003e5a:	f000 bd40 	b.w	80048de <_dtoa_r+0xb4e>
 8003e5e:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 8003e62:	aa14      	add	r2, sp, #80	@ 0x50
 8003e64:	a915      	add	r1, sp, #84	@ 0x54
 8003e66:	4648      	mov	r0, r9
 8003e68:	f001 f984 	bl	8005174 <__d2b>
 8003e6c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8003e70:	9002      	str	r0, [sp, #8]
 8003e72:	2e00      	cmp	r6, #0
 8003e74:	d078      	beq.n	8003f68 <_dtoa_r+0x1d8>
 8003e76:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8003e78:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 8003e7c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003e80:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8003e84:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8003e88:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8003e8c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8003e90:	4619      	mov	r1, r3
 8003e92:	2200      	movs	r2, #0
 8003e94:	4b76      	ldr	r3, [pc, #472]	@ (8004070 <_dtoa_r+0x2e0>)
 8003e96:	f7fc f9ff 	bl	8000298 <__aeabi_dsub>
 8003e9a:	a36b      	add	r3, pc, #428	@ (adr r3, 8004048 <_dtoa_r+0x2b8>)
 8003e9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ea0:	f7fc fbb2 	bl	8000608 <__aeabi_dmul>
 8003ea4:	a36a      	add	r3, pc, #424	@ (adr r3, 8004050 <_dtoa_r+0x2c0>)
 8003ea6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003eaa:	f7fc f9f7 	bl	800029c <__adddf3>
 8003eae:	4604      	mov	r4, r0
 8003eb0:	4630      	mov	r0, r6
 8003eb2:	460d      	mov	r5, r1
 8003eb4:	f7fc fb3e 	bl	8000534 <__aeabi_i2d>
 8003eb8:	a367      	add	r3, pc, #412	@ (adr r3, 8004058 <_dtoa_r+0x2c8>)
 8003eba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ebe:	f7fc fba3 	bl	8000608 <__aeabi_dmul>
 8003ec2:	4602      	mov	r2, r0
 8003ec4:	460b      	mov	r3, r1
 8003ec6:	4620      	mov	r0, r4
 8003ec8:	4629      	mov	r1, r5
 8003eca:	f7fc f9e7 	bl	800029c <__adddf3>
 8003ece:	4604      	mov	r4, r0
 8003ed0:	460d      	mov	r5, r1
 8003ed2:	f7fc fe49 	bl	8000b68 <__aeabi_d2iz>
 8003ed6:	2200      	movs	r2, #0
 8003ed8:	4607      	mov	r7, r0
 8003eda:	2300      	movs	r3, #0
 8003edc:	4620      	mov	r0, r4
 8003ede:	4629      	mov	r1, r5
 8003ee0:	f7fc fe04 	bl	8000aec <__aeabi_dcmplt>
 8003ee4:	b140      	cbz	r0, 8003ef8 <_dtoa_r+0x168>
 8003ee6:	4638      	mov	r0, r7
 8003ee8:	f7fc fb24 	bl	8000534 <__aeabi_i2d>
 8003eec:	4622      	mov	r2, r4
 8003eee:	462b      	mov	r3, r5
 8003ef0:	f7fc fdf2 	bl	8000ad8 <__aeabi_dcmpeq>
 8003ef4:	b900      	cbnz	r0, 8003ef8 <_dtoa_r+0x168>
 8003ef6:	3f01      	subs	r7, #1
 8003ef8:	2f16      	cmp	r7, #22
 8003efa:	d852      	bhi.n	8003fa2 <_dtoa_r+0x212>
 8003efc:	4b5d      	ldr	r3, [pc, #372]	@ (8004074 <_dtoa_r+0x2e4>)
 8003efe:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8003f02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f06:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8003f0a:	f7fc fdef 	bl	8000aec <__aeabi_dcmplt>
 8003f0e:	2800      	cmp	r0, #0
 8003f10:	d049      	beq.n	8003fa6 <_dtoa_r+0x216>
 8003f12:	3f01      	subs	r7, #1
 8003f14:	2300      	movs	r3, #0
 8003f16:	9310      	str	r3, [sp, #64]	@ 0x40
 8003f18:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8003f1a:	1b9b      	subs	r3, r3, r6
 8003f1c:	1e5a      	subs	r2, r3, #1
 8003f1e:	bf45      	ittet	mi
 8003f20:	f1c3 0301 	rsbmi	r3, r3, #1
 8003f24:	9300      	strmi	r3, [sp, #0]
 8003f26:	2300      	movpl	r3, #0
 8003f28:	2300      	movmi	r3, #0
 8003f2a:	9206      	str	r2, [sp, #24]
 8003f2c:	bf54      	ite	pl
 8003f2e:	9300      	strpl	r3, [sp, #0]
 8003f30:	9306      	strmi	r3, [sp, #24]
 8003f32:	2f00      	cmp	r7, #0
 8003f34:	db39      	blt.n	8003faa <_dtoa_r+0x21a>
 8003f36:	9b06      	ldr	r3, [sp, #24]
 8003f38:	970d      	str	r7, [sp, #52]	@ 0x34
 8003f3a:	443b      	add	r3, r7
 8003f3c:	9306      	str	r3, [sp, #24]
 8003f3e:	2300      	movs	r3, #0
 8003f40:	9308      	str	r3, [sp, #32]
 8003f42:	9b07      	ldr	r3, [sp, #28]
 8003f44:	2b09      	cmp	r3, #9
 8003f46:	d863      	bhi.n	8004010 <_dtoa_r+0x280>
 8003f48:	2b05      	cmp	r3, #5
 8003f4a:	bfc4      	itt	gt
 8003f4c:	3b04      	subgt	r3, #4
 8003f4e:	9307      	strgt	r3, [sp, #28]
 8003f50:	9b07      	ldr	r3, [sp, #28]
 8003f52:	f1a3 0302 	sub.w	r3, r3, #2
 8003f56:	bfcc      	ite	gt
 8003f58:	2400      	movgt	r4, #0
 8003f5a:	2401      	movle	r4, #1
 8003f5c:	2b03      	cmp	r3, #3
 8003f5e:	d863      	bhi.n	8004028 <_dtoa_r+0x298>
 8003f60:	e8df f003 	tbb	[pc, r3]
 8003f64:	2b375452 	.word	0x2b375452
 8003f68:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8003f6c:	441e      	add	r6, r3
 8003f6e:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8003f72:	2b20      	cmp	r3, #32
 8003f74:	bfc1      	itttt	gt
 8003f76:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8003f7a:	409f      	lslgt	r7, r3
 8003f7c:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8003f80:	fa24 f303 	lsrgt.w	r3, r4, r3
 8003f84:	bfd6      	itet	le
 8003f86:	f1c3 0320 	rsble	r3, r3, #32
 8003f8a:	ea47 0003 	orrgt.w	r0, r7, r3
 8003f8e:	fa04 f003 	lslle.w	r0, r4, r3
 8003f92:	f7fc fabf 	bl	8000514 <__aeabi_ui2d>
 8003f96:	2201      	movs	r2, #1
 8003f98:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8003f9c:	3e01      	subs	r6, #1
 8003f9e:	9212      	str	r2, [sp, #72]	@ 0x48
 8003fa0:	e776      	b.n	8003e90 <_dtoa_r+0x100>
 8003fa2:	2301      	movs	r3, #1
 8003fa4:	e7b7      	b.n	8003f16 <_dtoa_r+0x186>
 8003fa6:	9010      	str	r0, [sp, #64]	@ 0x40
 8003fa8:	e7b6      	b.n	8003f18 <_dtoa_r+0x188>
 8003faa:	9b00      	ldr	r3, [sp, #0]
 8003fac:	1bdb      	subs	r3, r3, r7
 8003fae:	9300      	str	r3, [sp, #0]
 8003fb0:	427b      	negs	r3, r7
 8003fb2:	9308      	str	r3, [sp, #32]
 8003fb4:	2300      	movs	r3, #0
 8003fb6:	930d      	str	r3, [sp, #52]	@ 0x34
 8003fb8:	e7c3      	b.n	8003f42 <_dtoa_r+0x1b2>
 8003fba:	2301      	movs	r3, #1
 8003fbc:	9309      	str	r3, [sp, #36]	@ 0x24
 8003fbe:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8003fc0:	eb07 0b03 	add.w	fp, r7, r3
 8003fc4:	f10b 0301 	add.w	r3, fp, #1
 8003fc8:	2b01      	cmp	r3, #1
 8003fca:	9303      	str	r3, [sp, #12]
 8003fcc:	bfb8      	it	lt
 8003fce:	2301      	movlt	r3, #1
 8003fd0:	e006      	b.n	8003fe0 <_dtoa_r+0x250>
 8003fd2:	2301      	movs	r3, #1
 8003fd4:	9309      	str	r3, [sp, #36]	@ 0x24
 8003fd6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	dd28      	ble.n	800402e <_dtoa_r+0x29e>
 8003fdc:	469b      	mov	fp, r3
 8003fde:	9303      	str	r3, [sp, #12]
 8003fe0:	f8d9 001c 	ldr.w	r0, [r9, #28]
 8003fe4:	2100      	movs	r1, #0
 8003fe6:	2204      	movs	r2, #4
 8003fe8:	f102 0514 	add.w	r5, r2, #20
 8003fec:	429d      	cmp	r5, r3
 8003fee:	d926      	bls.n	800403e <_dtoa_r+0x2ae>
 8003ff0:	6041      	str	r1, [r0, #4]
 8003ff2:	4648      	mov	r0, r9
 8003ff4:	f000 fd9c 	bl	8004b30 <_Balloc>
 8003ff8:	4682      	mov	sl, r0
 8003ffa:	2800      	cmp	r0, #0
 8003ffc:	d142      	bne.n	8004084 <_dtoa_r+0x2f4>
 8003ffe:	4b1e      	ldr	r3, [pc, #120]	@ (8004078 <_dtoa_r+0x2e8>)
 8004000:	4602      	mov	r2, r0
 8004002:	f240 11af 	movw	r1, #431	@ 0x1af
 8004006:	e6da      	b.n	8003dbe <_dtoa_r+0x2e>
 8004008:	2300      	movs	r3, #0
 800400a:	e7e3      	b.n	8003fd4 <_dtoa_r+0x244>
 800400c:	2300      	movs	r3, #0
 800400e:	e7d5      	b.n	8003fbc <_dtoa_r+0x22c>
 8004010:	2401      	movs	r4, #1
 8004012:	2300      	movs	r3, #0
 8004014:	9307      	str	r3, [sp, #28]
 8004016:	9409      	str	r4, [sp, #36]	@ 0x24
 8004018:	f04f 3bff 	mov.w	fp, #4294967295	@ 0xffffffff
 800401c:	2200      	movs	r2, #0
 800401e:	f8cd b00c 	str.w	fp, [sp, #12]
 8004022:	2312      	movs	r3, #18
 8004024:	920c      	str	r2, [sp, #48]	@ 0x30
 8004026:	e7db      	b.n	8003fe0 <_dtoa_r+0x250>
 8004028:	2301      	movs	r3, #1
 800402a:	9309      	str	r3, [sp, #36]	@ 0x24
 800402c:	e7f4      	b.n	8004018 <_dtoa_r+0x288>
 800402e:	f04f 0b01 	mov.w	fp, #1
 8004032:	f8cd b00c 	str.w	fp, [sp, #12]
 8004036:	465b      	mov	r3, fp
 8004038:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 800403c:	e7d0      	b.n	8003fe0 <_dtoa_r+0x250>
 800403e:	3101      	adds	r1, #1
 8004040:	0052      	lsls	r2, r2, #1
 8004042:	e7d1      	b.n	8003fe8 <_dtoa_r+0x258>
 8004044:	f3af 8000 	nop.w
 8004048:	636f4361 	.word	0x636f4361
 800404c:	3fd287a7 	.word	0x3fd287a7
 8004050:	8b60c8b3 	.word	0x8b60c8b3
 8004054:	3fc68a28 	.word	0x3fc68a28
 8004058:	509f79fb 	.word	0x509f79fb
 800405c:	3fd34413 	.word	0x3fd34413
 8004060:	08005b35 	.word	0x08005b35
 8004064:	08005b4c 	.word	0x08005b4c
 8004068:	7ff00000 	.word	0x7ff00000
 800406c:	08005b05 	.word	0x08005b05
 8004070:	3ff80000 	.word	0x3ff80000
 8004074:	08005ca0 	.word	0x08005ca0
 8004078:	08005ba4 	.word	0x08005ba4
 800407c:	08005b31 	.word	0x08005b31
 8004080:	08005b04 	.word	0x08005b04
 8004084:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8004088:	6018      	str	r0, [r3, #0]
 800408a:	9b03      	ldr	r3, [sp, #12]
 800408c:	2b0e      	cmp	r3, #14
 800408e:	f200 80a1 	bhi.w	80041d4 <_dtoa_r+0x444>
 8004092:	2c00      	cmp	r4, #0
 8004094:	f000 809e 	beq.w	80041d4 <_dtoa_r+0x444>
 8004098:	2f00      	cmp	r7, #0
 800409a:	dd33      	ble.n	8004104 <_dtoa_r+0x374>
 800409c:	4b9c      	ldr	r3, [pc, #624]	@ (8004310 <_dtoa_r+0x580>)
 800409e:	f007 020f 	and.w	r2, r7, #15
 80040a2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80040a6:	ed93 7b00 	vldr	d7, [r3]
 80040aa:	05f8      	lsls	r0, r7, #23
 80040ac:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 80040b0:	ea4f 1427 	mov.w	r4, r7, asr #4
 80040b4:	d516      	bpl.n	80040e4 <_dtoa_r+0x354>
 80040b6:	4b97      	ldr	r3, [pc, #604]	@ (8004314 <_dtoa_r+0x584>)
 80040b8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80040bc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80040c0:	f7fc fbcc 	bl	800085c <__aeabi_ddiv>
 80040c4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80040c8:	f004 040f 	and.w	r4, r4, #15
 80040cc:	2603      	movs	r6, #3
 80040ce:	4d91      	ldr	r5, [pc, #580]	@ (8004314 <_dtoa_r+0x584>)
 80040d0:	b954      	cbnz	r4, 80040e8 <_dtoa_r+0x358>
 80040d2:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80040d6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80040da:	f7fc fbbf 	bl	800085c <__aeabi_ddiv>
 80040de:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80040e2:	e028      	b.n	8004136 <_dtoa_r+0x3a6>
 80040e4:	2602      	movs	r6, #2
 80040e6:	e7f2      	b.n	80040ce <_dtoa_r+0x33e>
 80040e8:	07e1      	lsls	r1, r4, #31
 80040ea:	d508      	bpl.n	80040fe <_dtoa_r+0x36e>
 80040ec:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 80040f0:	e9d5 2300 	ldrd	r2, r3, [r5]
 80040f4:	f7fc fa88 	bl	8000608 <__aeabi_dmul>
 80040f8:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80040fc:	3601      	adds	r6, #1
 80040fe:	1064      	asrs	r4, r4, #1
 8004100:	3508      	adds	r5, #8
 8004102:	e7e5      	b.n	80040d0 <_dtoa_r+0x340>
 8004104:	f000 80af 	beq.w	8004266 <_dtoa_r+0x4d6>
 8004108:	427c      	negs	r4, r7
 800410a:	4b81      	ldr	r3, [pc, #516]	@ (8004310 <_dtoa_r+0x580>)
 800410c:	4d81      	ldr	r5, [pc, #516]	@ (8004314 <_dtoa_r+0x584>)
 800410e:	f004 020f 	and.w	r2, r4, #15
 8004112:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004116:	e9d3 2300 	ldrd	r2, r3, [r3]
 800411a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800411e:	f7fc fa73 	bl	8000608 <__aeabi_dmul>
 8004122:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004126:	1124      	asrs	r4, r4, #4
 8004128:	2300      	movs	r3, #0
 800412a:	2602      	movs	r6, #2
 800412c:	2c00      	cmp	r4, #0
 800412e:	f040 808f 	bne.w	8004250 <_dtoa_r+0x4c0>
 8004132:	2b00      	cmp	r3, #0
 8004134:	d1d3      	bne.n	80040de <_dtoa_r+0x34e>
 8004136:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8004138:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800413c:	2b00      	cmp	r3, #0
 800413e:	f000 8094 	beq.w	800426a <_dtoa_r+0x4da>
 8004142:	4b75      	ldr	r3, [pc, #468]	@ (8004318 <_dtoa_r+0x588>)
 8004144:	2200      	movs	r2, #0
 8004146:	4620      	mov	r0, r4
 8004148:	4629      	mov	r1, r5
 800414a:	f7fc fccf 	bl	8000aec <__aeabi_dcmplt>
 800414e:	2800      	cmp	r0, #0
 8004150:	f000 808b 	beq.w	800426a <_dtoa_r+0x4da>
 8004154:	9b03      	ldr	r3, [sp, #12]
 8004156:	2b00      	cmp	r3, #0
 8004158:	f000 8087 	beq.w	800426a <_dtoa_r+0x4da>
 800415c:	f1bb 0f00 	cmp.w	fp, #0
 8004160:	dd34      	ble.n	80041cc <_dtoa_r+0x43c>
 8004162:	4620      	mov	r0, r4
 8004164:	4b6d      	ldr	r3, [pc, #436]	@ (800431c <_dtoa_r+0x58c>)
 8004166:	2200      	movs	r2, #0
 8004168:	4629      	mov	r1, r5
 800416a:	f7fc fa4d 	bl	8000608 <__aeabi_dmul>
 800416e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004172:	f107 38ff 	add.w	r8, r7, #4294967295	@ 0xffffffff
 8004176:	3601      	adds	r6, #1
 8004178:	465c      	mov	r4, fp
 800417a:	4630      	mov	r0, r6
 800417c:	f7fc f9da 	bl	8000534 <__aeabi_i2d>
 8004180:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004184:	f7fc fa40 	bl	8000608 <__aeabi_dmul>
 8004188:	4b65      	ldr	r3, [pc, #404]	@ (8004320 <_dtoa_r+0x590>)
 800418a:	2200      	movs	r2, #0
 800418c:	f7fc f886 	bl	800029c <__adddf3>
 8004190:	4605      	mov	r5, r0
 8004192:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8004196:	2c00      	cmp	r4, #0
 8004198:	d16a      	bne.n	8004270 <_dtoa_r+0x4e0>
 800419a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800419e:	4b61      	ldr	r3, [pc, #388]	@ (8004324 <_dtoa_r+0x594>)
 80041a0:	2200      	movs	r2, #0
 80041a2:	f7fc f879 	bl	8000298 <__aeabi_dsub>
 80041a6:	4602      	mov	r2, r0
 80041a8:	460b      	mov	r3, r1
 80041aa:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80041ae:	462a      	mov	r2, r5
 80041b0:	4633      	mov	r3, r6
 80041b2:	f7fc fcb9 	bl	8000b28 <__aeabi_dcmpgt>
 80041b6:	2800      	cmp	r0, #0
 80041b8:	f040 8298 	bne.w	80046ec <_dtoa_r+0x95c>
 80041bc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80041c0:	462a      	mov	r2, r5
 80041c2:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80041c6:	f7fc fc91 	bl	8000aec <__aeabi_dcmplt>
 80041ca:	bb38      	cbnz	r0, 800421c <_dtoa_r+0x48c>
 80041cc:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 80041d0:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80041d4:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	f2c0 8157 	blt.w	800448a <_dtoa_r+0x6fa>
 80041dc:	2f0e      	cmp	r7, #14
 80041de:	f300 8154 	bgt.w	800448a <_dtoa_r+0x6fa>
 80041e2:	4b4b      	ldr	r3, [pc, #300]	@ (8004310 <_dtoa_r+0x580>)
 80041e4:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80041e8:	ed93 7b00 	vldr	d7, [r3]
 80041ec:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	ed8d 7b00 	vstr	d7, [sp]
 80041f4:	f280 80e5 	bge.w	80043c2 <_dtoa_r+0x632>
 80041f8:	9b03      	ldr	r3, [sp, #12]
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	f300 80e1 	bgt.w	80043c2 <_dtoa_r+0x632>
 8004200:	d10c      	bne.n	800421c <_dtoa_r+0x48c>
 8004202:	4b48      	ldr	r3, [pc, #288]	@ (8004324 <_dtoa_r+0x594>)
 8004204:	2200      	movs	r2, #0
 8004206:	ec51 0b17 	vmov	r0, r1, d7
 800420a:	f7fc f9fd 	bl	8000608 <__aeabi_dmul>
 800420e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004212:	f7fc fc7f 	bl	8000b14 <__aeabi_dcmpge>
 8004216:	2800      	cmp	r0, #0
 8004218:	f000 8266 	beq.w	80046e8 <_dtoa_r+0x958>
 800421c:	2400      	movs	r4, #0
 800421e:	4625      	mov	r5, r4
 8004220:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8004222:	4656      	mov	r6, sl
 8004224:	ea6f 0803 	mvn.w	r8, r3
 8004228:	2700      	movs	r7, #0
 800422a:	4621      	mov	r1, r4
 800422c:	4648      	mov	r0, r9
 800422e:	f000 fcbf 	bl	8004bb0 <_Bfree>
 8004232:	2d00      	cmp	r5, #0
 8004234:	f000 80bd 	beq.w	80043b2 <_dtoa_r+0x622>
 8004238:	b12f      	cbz	r7, 8004246 <_dtoa_r+0x4b6>
 800423a:	42af      	cmp	r7, r5
 800423c:	d003      	beq.n	8004246 <_dtoa_r+0x4b6>
 800423e:	4639      	mov	r1, r7
 8004240:	4648      	mov	r0, r9
 8004242:	f000 fcb5 	bl	8004bb0 <_Bfree>
 8004246:	4629      	mov	r1, r5
 8004248:	4648      	mov	r0, r9
 800424a:	f000 fcb1 	bl	8004bb0 <_Bfree>
 800424e:	e0b0      	b.n	80043b2 <_dtoa_r+0x622>
 8004250:	07e2      	lsls	r2, r4, #31
 8004252:	d505      	bpl.n	8004260 <_dtoa_r+0x4d0>
 8004254:	e9d5 2300 	ldrd	r2, r3, [r5]
 8004258:	f7fc f9d6 	bl	8000608 <__aeabi_dmul>
 800425c:	3601      	adds	r6, #1
 800425e:	2301      	movs	r3, #1
 8004260:	1064      	asrs	r4, r4, #1
 8004262:	3508      	adds	r5, #8
 8004264:	e762      	b.n	800412c <_dtoa_r+0x39c>
 8004266:	2602      	movs	r6, #2
 8004268:	e765      	b.n	8004136 <_dtoa_r+0x3a6>
 800426a:	9c03      	ldr	r4, [sp, #12]
 800426c:	46b8      	mov	r8, r7
 800426e:	e784      	b.n	800417a <_dtoa_r+0x3ea>
 8004270:	4b27      	ldr	r3, [pc, #156]	@ (8004310 <_dtoa_r+0x580>)
 8004272:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8004274:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8004278:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800427c:	4454      	add	r4, sl
 800427e:	2900      	cmp	r1, #0
 8004280:	d054      	beq.n	800432c <_dtoa_r+0x59c>
 8004282:	4929      	ldr	r1, [pc, #164]	@ (8004328 <_dtoa_r+0x598>)
 8004284:	2000      	movs	r0, #0
 8004286:	f7fc fae9 	bl	800085c <__aeabi_ddiv>
 800428a:	4633      	mov	r3, r6
 800428c:	462a      	mov	r2, r5
 800428e:	f7fc f803 	bl	8000298 <__aeabi_dsub>
 8004292:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8004296:	4656      	mov	r6, sl
 8004298:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800429c:	f7fc fc64 	bl	8000b68 <__aeabi_d2iz>
 80042a0:	4605      	mov	r5, r0
 80042a2:	f7fc f947 	bl	8000534 <__aeabi_i2d>
 80042a6:	4602      	mov	r2, r0
 80042a8:	460b      	mov	r3, r1
 80042aa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80042ae:	f7fb fff3 	bl	8000298 <__aeabi_dsub>
 80042b2:	3530      	adds	r5, #48	@ 0x30
 80042b4:	4602      	mov	r2, r0
 80042b6:	460b      	mov	r3, r1
 80042b8:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80042bc:	f806 5b01 	strb.w	r5, [r6], #1
 80042c0:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80042c4:	f7fc fc12 	bl	8000aec <__aeabi_dcmplt>
 80042c8:	2800      	cmp	r0, #0
 80042ca:	d172      	bne.n	80043b2 <_dtoa_r+0x622>
 80042cc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80042d0:	4911      	ldr	r1, [pc, #68]	@ (8004318 <_dtoa_r+0x588>)
 80042d2:	2000      	movs	r0, #0
 80042d4:	f7fb ffe0 	bl	8000298 <__aeabi_dsub>
 80042d8:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80042dc:	f7fc fc06 	bl	8000aec <__aeabi_dcmplt>
 80042e0:	2800      	cmp	r0, #0
 80042e2:	f040 80b4 	bne.w	800444e <_dtoa_r+0x6be>
 80042e6:	42a6      	cmp	r6, r4
 80042e8:	f43f af70 	beq.w	80041cc <_dtoa_r+0x43c>
 80042ec:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 80042f0:	4b0a      	ldr	r3, [pc, #40]	@ (800431c <_dtoa_r+0x58c>)
 80042f2:	2200      	movs	r2, #0
 80042f4:	f7fc f988 	bl	8000608 <__aeabi_dmul>
 80042f8:	4b08      	ldr	r3, [pc, #32]	@ (800431c <_dtoa_r+0x58c>)
 80042fa:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80042fe:	2200      	movs	r2, #0
 8004300:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004304:	f7fc f980 	bl	8000608 <__aeabi_dmul>
 8004308:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800430c:	e7c4      	b.n	8004298 <_dtoa_r+0x508>
 800430e:	bf00      	nop
 8004310:	08005ca0 	.word	0x08005ca0
 8004314:	08005c78 	.word	0x08005c78
 8004318:	3ff00000 	.word	0x3ff00000
 800431c:	40240000 	.word	0x40240000
 8004320:	401c0000 	.word	0x401c0000
 8004324:	40140000 	.word	0x40140000
 8004328:	3fe00000 	.word	0x3fe00000
 800432c:	4631      	mov	r1, r6
 800432e:	4628      	mov	r0, r5
 8004330:	f7fc f96a 	bl	8000608 <__aeabi_dmul>
 8004334:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8004338:	9413      	str	r4, [sp, #76]	@ 0x4c
 800433a:	4656      	mov	r6, sl
 800433c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004340:	f7fc fc12 	bl	8000b68 <__aeabi_d2iz>
 8004344:	4605      	mov	r5, r0
 8004346:	f7fc f8f5 	bl	8000534 <__aeabi_i2d>
 800434a:	4602      	mov	r2, r0
 800434c:	460b      	mov	r3, r1
 800434e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004352:	f7fb ffa1 	bl	8000298 <__aeabi_dsub>
 8004356:	3530      	adds	r5, #48	@ 0x30
 8004358:	f806 5b01 	strb.w	r5, [r6], #1
 800435c:	4602      	mov	r2, r0
 800435e:	460b      	mov	r3, r1
 8004360:	42a6      	cmp	r6, r4
 8004362:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8004366:	f04f 0200 	mov.w	r2, #0
 800436a:	d124      	bne.n	80043b6 <_dtoa_r+0x626>
 800436c:	4baf      	ldr	r3, [pc, #700]	@ (800462c <_dtoa_r+0x89c>)
 800436e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8004372:	f7fb ff93 	bl	800029c <__adddf3>
 8004376:	4602      	mov	r2, r0
 8004378:	460b      	mov	r3, r1
 800437a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800437e:	f7fc fbd3 	bl	8000b28 <__aeabi_dcmpgt>
 8004382:	2800      	cmp	r0, #0
 8004384:	d163      	bne.n	800444e <_dtoa_r+0x6be>
 8004386:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800438a:	49a8      	ldr	r1, [pc, #672]	@ (800462c <_dtoa_r+0x89c>)
 800438c:	2000      	movs	r0, #0
 800438e:	f7fb ff83 	bl	8000298 <__aeabi_dsub>
 8004392:	4602      	mov	r2, r0
 8004394:	460b      	mov	r3, r1
 8004396:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800439a:	f7fc fba7 	bl	8000aec <__aeabi_dcmplt>
 800439e:	2800      	cmp	r0, #0
 80043a0:	f43f af14 	beq.w	80041cc <_dtoa_r+0x43c>
 80043a4:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 80043a6:	1e73      	subs	r3, r6, #1
 80043a8:	9313      	str	r3, [sp, #76]	@ 0x4c
 80043aa:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80043ae:	2b30      	cmp	r3, #48	@ 0x30
 80043b0:	d0f8      	beq.n	80043a4 <_dtoa_r+0x614>
 80043b2:	4647      	mov	r7, r8
 80043b4:	e03b      	b.n	800442e <_dtoa_r+0x69e>
 80043b6:	4b9e      	ldr	r3, [pc, #632]	@ (8004630 <_dtoa_r+0x8a0>)
 80043b8:	f7fc f926 	bl	8000608 <__aeabi_dmul>
 80043bc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80043c0:	e7bc      	b.n	800433c <_dtoa_r+0x5ac>
 80043c2:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 80043c6:	4656      	mov	r6, sl
 80043c8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80043cc:	4620      	mov	r0, r4
 80043ce:	4629      	mov	r1, r5
 80043d0:	f7fc fa44 	bl	800085c <__aeabi_ddiv>
 80043d4:	f7fc fbc8 	bl	8000b68 <__aeabi_d2iz>
 80043d8:	4680      	mov	r8, r0
 80043da:	f7fc f8ab 	bl	8000534 <__aeabi_i2d>
 80043de:	e9dd 2300 	ldrd	r2, r3, [sp]
 80043e2:	f7fc f911 	bl	8000608 <__aeabi_dmul>
 80043e6:	4602      	mov	r2, r0
 80043e8:	460b      	mov	r3, r1
 80043ea:	4620      	mov	r0, r4
 80043ec:	4629      	mov	r1, r5
 80043ee:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80043f2:	f7fb ff51 	bl	8000298 <__aeabi_dsub>
 80043f6:	f806 4b01 	strb.w	r4, [r6], #1
 80043fa:	9d03      	ldr	r5, [sp, #12]
 80043fc:	eba6 040a 	sub.w	r4, r6, sl
 8004400:	42a5      	cmp	r5, r4
 8004402:	4602      	mov	r2, r0
 8004404:	460b      	mov	r3, r1
 8004406:	d133      	bne.n	8004470 <_dtoa_r+0x6e0>
 8004408:	f7fb ff48 	bl	800029c <__adddf3>
 800440c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004410:	4604      	mov	r4, r0
 8004412:	460d      	mov	r5, r1
 8004414:	f7fc fb88 	bl	8000b28 <__aeabi_dcmpgt>
 8004418:	b9c0      	cbnz	r0, 800444c <_dtoa_r+0x6bc>
 800441a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800441e:	4620      	mov	r0, r4
 8004420:	4629      	mov	r1, r5
 8004422:	f7fc fb59 	bl	8000ad8 <__aeabi_dcmpeq>
 8004426:	b110      	cbz	r0, 800442e <_dtoa_r+0x69e>
 8004428:	f018 0f01 	tst.w	r8, #1
 800442c:	d10e      	bne.n	800444c <_dtoa_r+0x6bc>
 800442e:	9902      	ldr	r1, [sp, #8]
 8004430:	4648      	mov	r0, r9
 8004432:	f000 fbbd 	bl	8004bb0 <_Bfree>
 8004436:	2300      	movs	r3, #0
 8004438:	7033      	strb	r3, [r6, #0]
 800443a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800443c:	3701      	adds	r7, #1
 800443e:	601f      	str	r7, [r3, #0]
 8004440:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8004442:	2b00      	cmp	r3, #0
 8004444:	f000 824b 	beq.w	80048de <_dtoa_r+0xb4e>
 8004448:	601e      	str	r6, [r3, #0]
 800444a:	e248      	b.n	80048de <_dtoa_r+0xb4e>
 800444c:	46b8      	mov	r8, r7
 800444e:	4633      	mov	r3, r6
 8004450:	461e      	mov	r6, r3
 8004452:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8004456:	2a39      	cmp	r2, #57	@ 0x39
 8004458:	d106      	bne.n	8004468 <_dtoa_r+0x6d8>
 800445a:	459a      	cmp	sl, r3
 800445c:	d1f8      	bne.n	8004450 <_dtoa_r+0x6c0>
 800445e:	2230      	movs	r2, #48	@ 0x30
 8004460:	f108 0801 	add.w	r8, r8, #1
 8004464:	f88a 2000 	strb.w	r2, [sl]
 8004468:	781a      	ldrb	r2, [r3, #0]
 800446a:	3201      	adds	r2, #1
 800446c:	701a      	strb	r2, [r3, #0]
 800446e:	e7a0      	b.n	80043b2 <_dtoa_r+0x622>
 8004470:	4b6f      	ldr	r3, [pc, #444]	@ (8004630 <_dtoa_r+0x8a0>)
 8004472:	2200      	movs	r2, #0
 8004474:	f7fc f8c8 	bl	8000608 <__aeabi_dmul>
 8004478:	2200      	movs	r2, #0
 800447a:	2300      	movs	r3, #0
 800447c:	4604      	mov	r4, r0
 800447e:	460d      	mov	r5, r1
 8004480:	f7fc fb2a 	bl	8000ad8 <__aeabi_dcmpeq>
 8004484:	2800      	cmp	r0, #0
 8004486:	d09f      	beq.n	80043c8 <_dtoa_r+0x638>
 8004488:	e7d1      	b.n	800442e <_dtoa_r+0x69e>
 800448a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800448c:	2a00      	cmp	r2, #0
 800448e:	f000 80ea 	beq.w	8004666 <_dtoa_r+0x8d6>
 8004492:	9a07      	ldr	r2, [sp, #28]
 8004494:	2a01      	cmp	r2, #1
 8004496:	f300 80cd 	bgt.w	8004634 <_dtoa_r+0x8a4>
 800449a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800449c:	2a00      	cmp	r2, #0
 800449e:	f000 80c1 	beq.w	8004624 <_dtoa_r+0x894>
 80044a2:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 80044a6:	9c08      	ldr	r4, [sp, #32]
 80044a8:	9e00      	ldr	r6, [sp, #0]
 80044aa:	9a00      	ldr	r2, [sp, #0]
 80044ac:	441a      	add	r2, r3
 80044ae:	9200      	str	r2, [sp, #0]
 80044b0:	9a06      	ldr	r2, [sp, #24]
 80044b2:	2101      	movs	r1, #1
 80044b4:	441a      	add	r2, r3
 80044b6:	4648      	mov	r0, r9
 80044b8:	9206      	str	r2, [sp, #24]
 80044ba:	f000 fc2d 	bl	8004d18 <__i2b>
 80044be:	4605      	mov	r5, r0
 80044c0:	b166      	cbz	r6, 80044dc <_dtoa_r+0x74c>
 80044c2:	9b06      	ldr	r3, [sp, #24]
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	dd09      	ble.n	80044dc <_dtoa_r+0x74c>
 80044c8:	42b3      	cmp	r3, r6
 80044ca:	9a00      	ldr	r2, [sp, #0]
 80044cc:	bfa8      	it	ge
 80044ce:	4633      	movge	r3, r6
 80044d0:	1ad2      	subs	r2, r2, r3
 80044d2:	9200      	str	r2, [sp, #0]
 80044d4:	9a06      	ldr	r2, [sp, #24]
 80044d6:	1af6      	subs	r6, r6, r3
 80044d8:	1ad3      	subs	r3, r2, r3
 80044da:	9306      	str	r3, [sp, #24]
 80044dc:	9b08      	ldr	r3, [sp, #32]
 80044de:	b30b      	cbz	r3, 8004524 <_dtoa_r+0x794>
 80044e0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	f000 80c6 	beq.w	8004674 <_dtoa_r+0x8e4>
 80044e8:	2c00      	cmp	r4, #0
 80044ea:	f000 80c0 	beq.w	800466e <_dtoa_r+0x8de>
 80044ee:	4629      	mov	r1, r5
 80044f0:	4622      	mov	r2, r4
 80044f2:	4648      	mov	r0, r9
 80044f4:	f000 fcc8 	bl	8004e88 <__pow5mult>
 80044f8:	9a02      	ldr	r2, [sp, #8]
 80044fa:	4601      	mov	r1, r0
 80044fc:	4605      	mov	r5, r0
 80044fe:	4648      	mov	r0, r9
 8004500:	f000 fc20 	bl	8004d44 <__multiply>
 8004504:	9902      	ldr	r1, [sp, #8]
 8004506:	4680      	mov	r8, r0
 8004508:	4648      	mov	r0, r9
 800450a:	f000 fb51 	bl	8004bb0 <_Bfree>
 800450e:	9b08      	ldr	r3, [sp, #32]
 8004510:	1b1b      	subs	r3, r3, r4
 8004512:	9308      	str	r3, [sp, #32]
 8004514:	f000 80b1 	beq.w	800467a <_dtoa_r+0x8ea>
 8004518:	9a08      	ldr	r2, [sp, #32]
 800451a:	4641      	mov	r1, r8
 800451c:	4648      	mov	r0, r9
 800451e:	f000 fcb3 	bl	8004e88 <__pow5mult>
 8004522:	9002      	str	r0, [sp, #8]
 8004524:	2101      	movs	r1, #1
 8004526:	4648      	mov	r0, r9
 8004528:	f000 fbf6 	bl	8004d18 <__i2b>
 800452c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800452e:	4604      	mov	r4, r0
 8004530:	2b00      	cmp	r3, #0
 8004532:	f000 81d8 	beq.w	80048e6 <_dtoa_r+0xb56>
 8004536:	461a      	mov	r2, r3
 8004538:	4601      	mov	r1, r0
 800453a:	4648      	mov	r0, r9
 800453c:	f000 fca4 	bl	8004e88 <__pow5mult>
 8004540:	9b07      	ldr	r3, [sp, #28]
 8004542:	2b01      	cmp	r3, #1
 8004544:	4604      	mov	r4, r0
 8004546:	f300 809f 	bgt.w	8004688 <_dtoa_r+0x8f8>
 800454a:	9b04      	ldr	r3, [sp, #16]
 800454c:	2b00      	cmp	r3, #0
 800454e:	f040 8097 	bne.w	8004680 <_dtoa_r+0x8f0>
 8004552:	9b05      	ldr	r3, [sp, #20]
 8004554:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004558:	2b00      	cmp	r3, #0
 800455a:	f040 8093 	bne.w	8004684 <_dtoa_r+0x8f4>
 800455e:	9b05      	ldr	r3, [sp, #20]
 8004560:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004564:	0d1b      	lsrs	r3, r3, #20
 8004566:	051b      	lsls	r3, r3, #20
 8004568:	b133      	cbz	r3, 8004578 <_dtoa_r+0x7e8>
 800456a:	9b00      	ldr	r3, [sp, #0]
 800456c:	3301      	adds	r3, #1
 800456e:	9300      	str	r3, [sp, #0]
 8004570:	9b06      	ldr	r3, [sp, #24]
 8004572:	3301      	adds	r3, #1
 8004574:	9306      	str	r3, [sp, #24]
 8004576:	2301      	movs	r3, #1
 8004578:	9308      	str	r3, [sp, #32]
 800457a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800457c:	2b00      	cmp	r3, #0
 800457e:	f000 81b8 	beq.w	80048f2 <_dtoa_r+0xb62>
 8004582:	6923      	ldr	r3, [r4, #16]
 8004584:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8004588:	6918      	ldr	r0, [r3, #16]
 800458a:	f000 fb79 	bl	8004c80 <__hi0bits>
 800458e:	f1c0 0020 	rsb	r0, r0, #32
 8004592:	9b06      	ldr	r3, [sp, #24]
 8004594:	4418      	add	r0, r3
 8004596:	f010 001f 	ands.w	r0, r0, #31
 800459a:	f000 8082 	beq.w	80046a2 <_dtoa_r+0x912>
 800459e:	f1c0 0320 	rsb	r3, r0, #32
 80045a2:	2b04      	cmp	r3, #4
 80045a4:	dd73      	ble.n	800468e <_dtoa_r+0x8fe>
 80045a6:	9b00      	ldr	r3, [sp, #0]
 80045a8:	f1c0 001c 	rsb	r0, r0, #28
 80045ac:	4403      	add	r3, r0
 80045ae:	9300      	str	r3, [sp, #0]
 80045b0:	9b06      	ldr	r3, [sp, #24]
 80045b2:	4403      	add	r3, r0
 80045b4:	4406      	add	r6, r0
 80045b6:	9306      	str	r3, [sp, #24]
 80045b8:	9b00      	ldr	r3, [sp, #0]
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	dd05      	ble.n	80045ca <_dtoa_r+0x83a>
 80045be:	9902      	ldr	r1, [sp, #8]
 80045c0:	461a      	mov	r2, r3
 80045c2:	4648      	mov	r0, r9
 80045c4:	f000 fcba 	bl	8004f3c <__lshift>
 80045c8:	9002      	str	r0, [sp, #8]
 80045ca:	9b06      	ldr	r3, [sp, #24]
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	dd05      	ble.n	80045dc <_dtoa_r+0x84c>
 80045d0:	4621      	mov	r1, r4
 80045d2:	461a      	mov	r2, r3
 80045d4:	4648      	mov	r0, r9
 80045d6:	f000 fcb1 	bl	8004f3c <__lshift>
 80045da:	4604      	mov	r4, r0
 80045dc:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d061      	beq.n	80046a6 <_dtoa_r+0x916>
 80045e2:	9802      	ldr	r0, [sp, #8]
 80045e4:	4621      	mov	r1, r4
 80045e6:	f000 fd15 	bl	8005014 <__mcmp>
 80045ea:	2800      	cmp	r0, #0
 80045ec:	da5b      	bge.n	80046a6 <_dtoa_r+0x916>
 80045ee:	2300      	movs	r3, #0
 80045f0:	9902      	ldr	r1, [sp, #8]
 80045f2:	220a      	movs	r2, #10
 80045f4:	4648      	mov	r0, r9
 80045f6:	f000 fafd 	bl	8004bf4 <__multadd>
 80045fa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80045fc:	9002      	str	r0, [sp, #8]
 80045fe:	f107 38ff 	add.w	r8, r7, #4294967295	@ 0xffffffff
 8004602:	2b00      	cmp	r3, #0
 8004604:	f000 8177 	beq.w	80048f6 <_dtoa_r+0xb66>
 8004608:	4629      	mov	r1, r5
 800460a:	2300      	movs	r3, #0
 800460c:	220a      	movs	r2, #10
 800460e:	4648      	mov	r0, r9
 8004610:	f000 faf0 	bl	8004bf4 <__multadd>
 8004614:	f1bb 0f00 	cmp.w	fp, #0
 8004618:	4605      	mov	r5, r0
 800461a:	dc6f      	bgt.n	80046fc <_dtoa_r+0x96c>
 800461c:	9b07      	ldr	r3, [sp, #28]
 800461e:	2b02      	cmp	r3, #2
 8004620:	dc49      	bgt.n	80046b6 <_dtoa_r+0x926>
 8004622:	e06b      	b.n	80046fc <_dtoa_r+0x96c>
 8004624:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8004626:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800462a:	e73c      	b.n	80044a6 <_dtoa_r+0x716>
 800462c:	3fe00000 	.word	0x3fe00000
 8004630:	40240000 	.word	0x40240000
 8004634:	9b03      	ldr	r3, [sp, #12]
 8004636:	1e5c      	subs	r4, r3, #1
 8004638:	9b08      	ldr	r3, [sp, #32]
 800463a:	42a3      	cmp	r3, r4
 800463c:	db09      	blt.n	8004652 <_dtoa_r+0x8c2>
 800463e:	1b1c      	subs	r4, r3, r4
 8004640:	9b03      	ldr	r3, [sp, #12]
 8004642:	2b00      	cmp	r3, #0
 8004644:	f6bf af30 	bge.w	80044a8 <_dtoa_r+0x718>
 8004648:	9b00      	ldr	r3, [sp, #0]
 800464a:	9a03      	ldr	r2, [sp, #12]
 800464c:	1a9e      	subs	r6, r3, r2
 800464e:	2300      	movs	r3, #0
 8004650:	e72b      	b.n	80044aa <_dtoa_r+0x71a>
 8004652:	9b08      	ldr	r3, [sp, #32]
 8004654:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8004656:	9408      	str	r4, [sp, #32]
 8004658:	1ae3      	subs	r3, r4, r3
 800465a:	441a      	add	r2, r3
 800465c:	9e00      	ldr	r6, [sp, #0]
 800465e:	9b03      	ldr	r3, [sp, #12]
 8004660:	920d      	str	r2, [sp, #52]	@ 0x34
 8004662:	2400      	movs	r4, #0
 8004664:	e721      	b.n	80044aa <_dtoa_r+0x71a>
 8004666:	9c08      	ldr	r4, [sp, #32]
 8004668:	9e00      	ldr	r6, [sp, #0]
 800466a:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 800466c:	e728      	b.n	80044c0 <_dtoa_r+0x730>
 800466e:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8004672:	e751      	b.n	8004518 <_dtoa_r+0x788>
 8004674:	9a08      	ldr	r2, [sp, #32]
 8004676:	9902      	ldr	r1, [sp, #8]
 8004678:	e750      	b.n	800451c <_dtoa_r+0x78c>
 800467a:	f8cd 8008 	str.w	r8, [sp, #8]
 800467e:	e751      	b.n	8004524 <_dtoa_r+0x794>
 8004680:	2300      	movs	r3, #0
 8004682:	e779      	b.n	8004578 <_dtoa_r+0x7e8>
 8004684:	9b04      	ldr	r3, [sp, #16]
 8004686:	e777      	b.n	8004578 <_dtoa_r+0x7e8>
 8004688:	2300      	movs	r3, #0
 800468a:	9308      	str	r3, [sp, #32]
 800468c:	e779      	b.n	8004582 <_dtoa_r+0x7f2>
 800468e:	d093      	beq.n	80045b8 <_dtoa_r+0x828>
 8004690:	9a00      	ldr	r2, [sp, #0]
 8004692:	331c      	adds	r3, #28
 8004694:	441a      	add	r2, r3
 8004696:	9200      	str	r2, [sp, #0]
 8004698:	9a06      	ldr	r2, [sp, #24]
 800469a:	441a      	add	r2, r3
 800469c:	441e      	add	r6, r3
 800469e:	9206      	str	r2, [sp, #24]
 80046a0:	e78a      	b.n	80045b8 <_dtoa_r+0x828>
 80046a2:	4603      	mov	r3, r0
 80046a4:	e7f4      	b.n	8004690 <_dtoa_r+0x900>
 80046a6:	9b03      	ldr	r3, [sp, #12]
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	46b8      	mov	r8, r7
 80046ac:	dc20      	bgt.n	80046f0 <_dtoa_r+0x960>
 80046ae:	469b      	mov	fp, r3
 80046b0:	9b07      	ldr	r3, [sp, #28]
 80046b2:	2b02      	cmp	r3, #2
 80046b4:	dd1e      	ble.n	80046f4 <_dtoa_r+0x964>
 80046b6:	f1bb 0f00 	cmp.w	fp, #0
 80046ba:	f47f adb1 	bne.w	8004220 <_dtoa_r+0x490>
 80046be:	4621      	mov	r1, r4
 80046c0:	465b      	mov	r3, fp
 80046c2:	2205      	movs	r2, #5
 80046c4:	4648      	mov	r0, r9
 80046c6:	f000 fa95 	bl	8004bf4 <__multadd>
 80046ca:	4601      	mov	r1, r0
 80046cc:	4604      	mov	r4, r0
 80046ce:	9802      	ldr	r0, [sp, #8]
 80046d0:	f000 fca0 	bl	8005014 <__mcmp>
 80046d4:	2800      	cmp	r0, #0
 80046d6:	f77f ada3 	ble.w	8004220 <_dtoa_r+0x490>
 80046da:	4656      	mov	r6, sl
 80046dc:	2331      	movs	r3, #49	@ 0x31
 80046de:	f806 3b01 	strb.w	r3, [r6], #1
 80046e2:	f108 0801 	add.w	r8, r8, #1
 80046e6:	e59f      	b.n	8004228 <_dtoa_r+0x498>
 80046e8:	9c03      	ldr	r4, [sp, #12]
 80046ea:	46b8      	mov	r8, r7
 80046ec:	4625      	mov	r5, r4
 80046ee:	e7f4      	b.n	80046da <_dtoa_r+0x94a>
 80046f0:	f8dd b00c 	ldr.w	fp, [sp, #12]
 80046f4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	f000 8101 	beq.w	80048fe <_dtoa_r+0xb6e>
 80046fc:	2e00      	cmp	r6, #0
 80046fe:	dd05      	ble.n	800470c <_dtoa_r+0x97c>
 8004700:	4629      	mov	r1, r5
 8004702:	4632      	mov	r2, r6
 8004704:	4648      	mov	r0, r9
 8004706:	f000 fc19 	bl	8004f3c <__lshift>
 800470a:	4605      	mov	r5, r0
 800470c:	9b08      	ldr	r3, [sp, #32]
 800470e:	2b00      	cmp	r3, #0
 8004710:	d05c      	beq.n	80047cc <_dtoa_r+0xa3c>
 8004712:	6869      	ldr	r1, [r5, #4]
 8004714:	4648      	mov	r0, r9
 8004716:	f000 fa0b 	bl	8004b30 <_Balloc>
 800471a:	4606      	mov	r6, r0
 800471c:	b928      	cbnz	r0, 800472a <_dtoa_r+0x99a>
 800471e:	4b82      	ldr	r3, [pc, #520]	@ (8004928 <_dtoa_r+0xb98>)
 8004720:	4602      	mov	r2, r0
 8004722:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8004726:	f7ff bb4a 	b.w	8003dbe <_dtoa_r+0x2e>
 800472a:	692a      	ldr	r2, [r5, #16]
 800472c:	3202      	adds	r2, #2
 800472e:	0092      	lsls	r2, r2, #2
 8004730:	f105 010c 	add.w	r1, r5, #12
 8004734:	300c      	adds	r0, #12
 8004736:	f001 f83b 	bl	80057b0 <memcpy>
 800473a:	2201      	movs	r2, #1
 800473c:	4631      	mov	r1, r6
 800473e:	4648      	mov	r0, r9
 8004740:	f000 fbfc 	bl	8004f3c <__lshift>
 8004744:	f10a 0301 	add.w	r3, sl, #1
 8004748:	9300      	str	r3, [sp, #0]
 800474a:	eb0a 030b 	add.w	r3, sl, fp
 800474e:	9308      	str	r3, [sp, #32]
 8004750:	9b04      	ldr	r3, [sp, #16]
 8004752:	f003 0301 	and.w	r3, r3, #1
 8004756:	462f      	mov	r7, r5
 8004758:	9306      	str	r3, [sp, #24]
 800475a:	4605      	mov	r5, r0
 800475c:	9b00      	ldr	r3, [sp, #0]
 800475e:	9802      	ldr	r0, [sp, #8]
 8004760:	4621      	mov	r1, r4
 8004762:	f103 3bff 	add.w	fp, r3, #4294967295	@ 0xffffffff
 8004766:	f7ff fa8a 	bl	8003c7e <quorem>
 800476a:	4603      	mov	r3, r0
 800476c:	3330      	adds	r3, #48	@ 0x30
 800476e:	9003      	str	r0, [sp, #12]
 8004770:	4639      	mov	r1, r7
 8004772:	9802      	ldr	r0, [sp, #8]
 8004774:	9309      	str	r3, [sp, #36]	@ 0x24
 8004776:	f000 fc4d 	bl	8005014 <__mcmp>
 800477a:	462a      	mov	r2, r5
 800477c:	9004      	str	r0, [sp, #16]
 800477e:	4621      	mov	r1, r4
 8004780:	4648      	mov	r0, r9
 8004782:	f000 fc63 	bl	800504c <__mdiff>
 8004786:	68c2      	ldr	r2, [r0, #12]
 8004788:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800478a:	4606      	mov	r6, r0
 800478c:	bb02      	cbnz	r2, 80047d0 <_dtoa_r+0xa40>
 800478e:	4601      	mov	r1, r0
 8004790:	9802      	ldr	r0, [sp, #8]
 8004792:	f000 fc3f 	bl	8005014 <__mcmp>
 8004796:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004798:	4602      	mov	r2, r0
 800479a:	4631      	mov	r1, r6
 800479c:	4648      	mov	r0, r9
 800479e:	920c      	str	r2, [sp, #48]	@ 0x30
 80047a0:	9309      	str	r3, [sp, #36]	@ 0x24
 80047a2:	f000 fa05 	bl	8004bb0 <_Bfree>
 80047a6:	9b07      	ldr	r3, [sp, #28]
 80047a8:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80047aa:	9e00      	ldr	r6, [sp, #0]
 80047ac:	ea42 0103 	orr.w	r1, r2, r3
 80047b0:	9b06      	ldr	r3, [sp, #24]
 80047b2:	4319      	orrs	r1, r3
 80047b4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80047b6:	d10d      	bne.n	80047d4 <_dtoa_r+0xa44>
 80047b8:	2b39      	cmp	r3, #57	@ 0x39
 80047ba:	d027      	beq.n	800480c <_dtoa_r+0xa7c>
 80047bc:	9a04      	ldr	r2, [sp, #16]
 80047be:	2a00      	cmp	r2, #0
 80047c0:	dd01      	ble.n	80047c6 <_dtoa_r+0xa36>
 80047c2:	9b03      	ldr	r3, [sp, #12]
 80047c4:	3331      	adds	r3, #49	@ 0x31
 80047c6:	f88b 3000 	strb.w	r3, [fp]
 80047ca:	e52e      	b.n	800422a <_dtoa_r+0x49a>
 80047cc:	4628      	mov	r0, r5
 80047ce:	e7b9      	b.n	8004744 <_dtoa_r+0x9b4>
 80047d0:	2201      	movs	r2, #1
 80047d2:	e7e2      	b.n	800479a <_dtoa_r+0xa0a>
 80047d4:	9904      	ldr	r1, [sp, #16]
 80047d6:	2900      	cmp	r1, #0
 80047d8:	db04      	blt.n	80047e4 <_dtoa_r+0xa54>
 80047da:	9807      	ldr	r0, [sp, #28]
 80047dc:	4301      	orrs	r1, r0
 80047de:	9806      	ldr	r0, [sp, #24]
 80047e0:	4301      	orrs	r1, r0
 80047e2:	d120      	bne.n	8004826 <_dtoa_r+0xa96>
 80047e4:	2a00      	cmp	r2, #0
 80047e6:	ddee      	ble.n	80047c6 <_dtoa_r+0xa36>
 80047e8:	9902      	ldr	r1, [sp, #8]
 80047ea:	9300      	str	r3, [sp, #0]
 80047ec:	2201      	movs	r2, #1
 80047ee:	4648      	mov	r0, r9
 80047f0:	f000 fba4 	bl	8004f3c <__lshift>
 80047f4:	4621      	mov	r1, r4
 80047f6:	9002      	str	r0, [sp, #8]
 80047f8:	f000 fc0c 	bl	8005014 <__mcmp>
 80047fc:	2800      	cmp	r0, #0
 80047fe:	9b00      	ldr	r3, [sp, #0]
 8004800:	dc02      	bgt.n	8004808 <_dtoa_r+0xa78>
 8004802:	d1e0      	bne.n	80047c6 <_dtoa_r+0xa36>
 8004804:	07da      	lsls	r2, r3, #31
 8004806:	d5de      	bpl.n	80047c6 <_dtoa_r+0xa36>
 8004808:	2b39      	cmp	r3, #57	@ 0x39
 800480a:	d1da      	bne.n	80047c2 <_dtoa_r+0xa32>
 800480c:	2339      	movs	r3, #57	@ 0x39
 800480e:	f88b 3000 	strb.w	r3, [fp]
 8004812:	4633      	mov	r3, r6
 8004814:	461e      	mov	r6, r3
 8004816:	3b01      	subs	r3, #1
 8004818:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800481c:	2a39      	cmp	r2, #57	@ 0x39
 800481e:	d04e      	beq.n	80048be <_dtoa_r+0xb2e>
 8004820:	3201      	adds	r2, #1
 8004822:	701a      	strb	r2, [r3, #0]
 8004824:	e501      	b.n	800422a <_dtoa_r+0x49a>
 8004826:	2a00      	cmp	r2, #0
 8004828:	dd03      	ble.n	8004832 <_dtoa_r+0xaa2>
 800482a:	2b39      	cmp	r3, #57	@ 0x39
 800482c:	d0ee      	beq.n	800480c <_dtoa_r+0xa7c>
 800482e:	3301      	adds	r3, #1
 8004830:	e7c9      	b.n	80047c6 <_dtoa_r+0xa36>
 8004832:	9a00      	ldr	r2, [sp, #0]
 8004834:	9908      	ldr	r1, [sp, #32]
 8004836:	f802 3c01 	strb.w	r3, [r2, #-1]
 800483a:	428a      	cmp	r2, r1
 800483c:	d028      	beq.n	8004890 <_dtoa_r+0xb00>
 800483e:	9902      	ldr	r1, [sp, #8]
 8004840:	2300      	movs	r3, #0
 8004842:	220a      	movs	r2, #10
 8004844:	4648      	mov	r0, r9
 8004846:	f000 f9d5 	bl	8004bf4 <__multadd>
 800484a:	42af      	cmp	r7, r5
 800484c:	9002      	str	r0, [sp, #8]
 800484e:	f04f 0300 	mov.w	r3, #0
 8004852:	f04f 020a 	mov.w	r2, #10
 8004856:	4639      	mov	r1, r7
 8004858:	4648      	mov	r0, r9
 800485a:	d107      	bne.n	800486c <_dtoa_r+0xadc>
 800485c:	f000 f9ca 	bl	8004bf4 <__multadd>
 8004860:	4607      	mov	r7, r0
 8004862:	4605      	mov	r5, r0
 8004864:	9b00      	ldr	r3, [sp, #0]
 8004866:	3301      	adds	r3, #1
 8004868:	9300      	str	r3, [sp, #0]
 800486a:	e777      	b.n	800475c <_dtoa_r+0x9cc>
 800486c:	f000 f9c2 	bl	8004bf4 <__multadd>
 8004870:	4629      	mov	r1, r5
 8004872:	4607      	mov	r7, r0
 8004874:	2300      	movs	r3, #0
 8004876:	220a      	movs	r2, #10
 8004878:	4648      	mov	r0, r9
 800487a:	f000 f9bb 	bl	8004bf4 <__multadd>
 800487e:	4605      	mov	r5, r0
 8004880:	e7f0      	b.n	8004864 <_dtoa_r+0xad4>
 8004882:	f1bb 0f00 	cmp.w	fp, #0
 8004886:	bfcc      	ite	gt
 8004888:	465e      	movgt	r6, fp
 800488a:	2601      	movle	r6, #1
 800488c:	4456      	add	r6, sl
 800488e:	2700      	movs	r7, #0
 8004890:	9902      	ldr	r1, [sp, #8]
 8004892:	9300      	str	r3, [sp, #0]
 8004894:	2201      	movs	r2, #1
 8004896:	4648      	mov	r0, r9
 8004898:	f000 fb50 	bl	8004f3c <__lshift>
 800489c:	4621      	mov	r1, r4
 800489e:	9002      	str	r0, [sp, #8]
 80048a0:	f000 fbb8 	bl	8005014 <__mcmp>
 80048a4:	2800      	cmp	r0, #0
 80048a6:	dcb4      	bgt.n	8004812 <_dtoa_r+0xa82>
 80048a8:	d102      	bne.n	80048b0 <_dtoa_r+0xb20>
 80048aa:	9b00      	ldr	r3, [sp, #0]
 80048ac:	07db      	lsls	r3, r3, #31
 80048ae:	d4b0      	bmi.n	8004812 <_dtoa_r+0xa82>
 80048b0:	4633      	mov	r3, r6
 80048b2:	461e      	mov	r6, r3
 80048b4:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80048b8:	2a30      	cmp	r2, #48	@ 0x30
 80048ba:	d0fa      	beq.n	80048b2 <_dtoa_r+0xb22>
 80048bc:	e4b5      	b.n	800422a <_dtoa_r+0x49a>
 80048be:	459a      	cmp	sl, r3
 80048c0:	d1a8      	bne.n	8004814 <_dtoa_r+0xa84>
 80048c2:	2331      	movs	r3, #49	@ 0x31
 80048c4:	f108 0801 	add.w	r8, r8, #1
 80048c8:	f88a 3000 	strb.w	r3, [sl]
 80048cc:	e4ad      	b.n	800422a <_dtoa_r+0x49a>
 80048ce:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80048d0:	f8df a058 	ldr.w	sl, [pc, #88]	@ 800492c <_dtoa_r+0xb9c>
 80048d4:	b11b      	cbz	r3, 80048de <_dtoa_r+0xb4e>
 80048d6:	f10a 0308 	add.w	r3, sl, #8
 80048da:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 80048dc:	6013      	str	r3, [r2, #0]
 80048de:	4650      	mov	r0, sl
 80048e0:	b017      	add	sp, #92	@ 0x5c
 80048e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80048e6:	9b07      	ldr	r3, [sp, #28]
 80048e8:	2b01      	cmp	r3, #1
 80048ea:	f77f ae2e 	ble.w	800454a <_dtoa_r+0x7ba>
 80048ee:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80048f0:	9308      	str	r3, [sp, #32]
 80048f2:	2001      	movs	r0, #1
 80048f4:	e64d      	b.n	8004592 <_dtoa_r+0x802>
 80048f6:	f1bb 0f00 	cmp.w	fp, #0
 80048fa:	f77f aed9 	ble.w	80046b0 <_dtoa_r+0x920>
 80048fe:	4656      	mov	r6, sl
 8004900:	9802      	ldr	r0, [sp, #8]
 8004902:	4621      	mov	r1, r4
 8004904:	f7ff f9bb 	bl	8003c7e <quorem>
 8004908:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 800490c:	f806 3b01 	strb.w	r3, [r6], #1
 8004910:	eba6 020a 	sub.w	r2, r6, sl
 8004914:	4593      	cmp	fp, r2
 8004916:	ddb4      	ble.n	8004882 <_dtoa_r+0xaf2>
 8004918:	9902      	ldr	r1, [sp, #8]
 800491a:	2300      	movs	r3, #0
 800491c:	220a      	movs	r2, #10
 800491e:	4648      	mov	r0, r9
 8004920:	f000 f968 	bl	8004bf4 <__multadd>
 8004924:	9002      	str	r0, [sp, #8]
 8004926:	e7eb      	b.n	8004900 <_dtoa_r+0xb70>
 8004928:	08005ba4 	.word	0x08005ba4
 800492c:	08005b28 	.word	0x08005b28

08004930 <_free_r>:
 8004930:	b538      	push	{r3, r4, r5, lr}
 8004932:	4605      	mov	r5, r0
 8004934:	2900      	cmp	r1, #0
 8004936:	d041      	beq.n	80049bc <_free_r+0x8c>
 8004938:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800493c:	1f0c      	subs	r4, r1, #4
 800493e:	2b00      	cmp	r3, #0
 8004940:	bfb8      	it	lt
 8004942:	18e4      	addlt	r4, r4, r3
 8004944:	f000 f8e8 	bl	8004b18 <__malloc_lock>
 8004948:	4a1d      	ldr	r2, [pc, #116]	@ (80049c0 <_free_r+0x90>)
 800494a:	6813      	ldr	r3, [r2, #0]
 800494c:	b933      	cbnz	r3, 800495c <_free_r+0x2c>
 800494e:	6063      	str	r3, [r4, #4]
 8004950:	6014      	str	r4, [r2, #0]
 8004952:	4628      	mov	r0, r5
 8004954:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004958:	f000 b8e4 	b.w	8004b24 <__malloc_unlock>
 800495c:	42a3      	cmp	r3, r4
 800495e:	d908      	bls.n	8004972 <_free_r+0x42>
 8004960:	6820      	ldr	r0, [r4, #0]
 8004962:	1821      	adds	r1, r4, r0
 8004964:	428b      	cmp	r3, r1
 8004966:	bf01      	itttt	eq
 8004968:	6819      	ldreq	r1, [r3, #0]
 800496a:	685b      	ldreq	r3, [r3, #4]
 800496c:	1809      	addeq	r1, r1, r0
 800496e:	6021      	streq	r1, [r4, #0]
 8004970:	e7ed      	b.n	800494e <_free_r+0x1e>
 8004972:	461a      	mov	r2, r3
 8004974:	685b      	ldr	r3, [r3, #4]
 8004976:	b10b      	cbz	r3, 800497c <_free_r+0x4c>
 8004978:	42a3      	cmp	r3, r4
 800497a:	d9fa      	bls.n	8004972 <_free_r+0x42>
 800497c:	6811      	ldr	r1, [r2, #0]
 800497e:	1850      	adds	r0, r2, r1
 8004980:	42a0      	cmp	r0, r4
 8004982:	d10b      	bne.n	800499c <_free_r+0x6c>
 8004984:	6820      	ldr	r0, [r4, #0]
 8004986:	4401      	add	r1, r0
 8004988:	1850      	adds	r0, r2, r1
 800498a:	4283      	cmp	r3, r0
 800498c:	6011      	str	r1, [r2, #0]
 800498e:	d1e0      	bne.n	8004952 <_free_r+0x22>
 8004990:	6818      	ldr	r0, [r3, #0]
 8004992:	685b      	ldr	r3, [r3, #4]
 8004994:	6053      	str	r3, [r2, #4]
 8004996:	4408      	add	r0, r1
 8004998:	6010      	str	r0, [r2, #0]
 800499a:	e7da      	b.n	8004952 <_free_r+0x22>
 800499c:	d902      	bls.n	80049a4 <_free_r+0x74>
 800499e:	230c      	movs	r3, #12
 80049a0:	602b      	str	r3, [r5, #0]
 80049a2:	e7d6      	b.n	8004952 <_free_r+0x22>
 80049a4:	6820      	ldr	r0, [r4, #0]
 80049a6:	1821      	adds	r1, r4, r0
 80049a8:	428b      	cmp	r3, r1
 80049aa:	bf04      	itt	eq
 80049ac:	6819      	ldreq	r1, [r3, #0]
 80049ae:	685b      	ldreq	r3, [r3, #4]
 80049b0:	6063      	str	r3, [r4, #4]
 80049b2:	bf04      	itt	eq
 80049b4:	1809      	addeq	r1, r1, r0
 80049b6:	6021      	streq	r1, [r4, #0]
 80049b8:	6054      	str	r4, [r2, #4]
 80049ba:	e7ca      	b.n	8004952 <_free_r+0x22>
 80049bc:	bd38      	pop	{r3, r4, r5, pc}
 80049be:	bf00      	nop
 80049c0:	20000530 	.word	0x20000530

080049c4 <malloc>:
 80049c4:	4b02      	ldr	r3, [pc, #8]	@ (80049d0 <malloc+0xc>)
 80049c6:	4601      	mov	r1, r0
 80049c8:	6818      	ldr	r0, [r3, #0]
 80049ca:	f000 b825 	b.w	8004a18 <_malloc_r>
 80049ce:	bf00      	nop
 80049d0:	20000120 	.word	0x20000120

080049d4 <sbrk_aligned>:
 80049d4:	b570      	push	{r4, r5, r6, lr}
 80049d6:	4e0f      	ldr	r6, [pc, #60]	@ (8004a14 <sbrk_aligned+0x40>)
 80049d8:	460c      	mov	r4, r1
 80049da:	6831      	ldr	r1, [r6, #0]
 80049dc:	4605      	mov	r5, r0
 80049de:	b911      	cbnz	r1, 80049e6 <sbrk_aligned+0x12>
 80049e0:	f000 fed6 	bl	8005790 <_sbrk_r>
 80049e4:	6030      	str	r0, [r6, #0]
 80049e6:	4621      	mov	r1, r4
 80049e8:	4628      	mov	r0, r5
 80049ea:	f000 fed1 	bl	8005790 <_sbrk_r>
 80049ee:	1c43      	adds	r3, r0, #1
 80049f0:	d103      	bne.n	80049fa <sbrk_aligned+0x26>
 80049f2:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 80049f6:	4620      	mov	r0, r4
 80049f8:	bd70      	pop	{r4, r5, r6, pc}
 80049fa:	1cc4      	adds	r4, r0, #3
 80049fc:	f024 0403 	bic.w	r4, r4, #3
 8004a00:	42a0      	cmp	r0, r4
 8004a02:	d0f8      	beq.n	80049f6 <sbrk_aligned+0x22>
 8004a04:	1a21      	subs	r1, r4, r0
 8004a06:	4628      	mov	r0, r5
 8004a08:	f000 fec2 	bl	8005790 <_sbrk_r>
 8004a0c:	3001      	adds	r0, #1
 8004a0e:	d1f2      	bne.n	80049f6 <sbrk_aligned+0x22>
 8004a10:	e7ef      	b.n	80049f2 <sbrk_aligned+0x1e>
 8004a12:	bf00      	nop
 8004a14:	2000052c 	.word	0x2000052c

08004a18 <_malloc_r>:
 8004a18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004a1c:	1ccd      	adds	r5, r1, #3
 8004a1e:	f025 0503 	bic.w	r5, r5, #3
 8004a22:	3508      	adds	r5, #8
 8004a24:	2d0c      	cmp	r5, #12
 8004a26:	bf38      	it	cc
 8004a28:	250c      	movcc	r5, #12
 8004a2a:	2d00      	cmp	r5, #0
 8004a2c:	4606      	mov	r6, r0
 8004a2e:	db01      	blt.n	8004a34 <_malloc_r+0x1c>
 8004a30:	42a9      	cmp	r1, r5
 8004a32:	d904      	bls.n	8004a3e <_malloc_r+0x26>
 8004a34:	230c      	movs	r3, #12
 8004a36:	6033      	str	r3, [r6, #0]
 8004a38:	2000      	movs	r0, #0
 8004a3a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004a3e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004b14 <_malloc_r+0xfc>
 8004a42:	f000 f869 	bl	8004b18 <__malloc_lock>
 8004a46:	f8d8 3000 	ldr.w	r3, [r8]
 8004a4a:	461c      	mov	r4, r3
 8004a4c:	bb44      	cbnz	r4, 8004aa0 <_malloc_r+0x88>
 8004a4e:	4629      	mov	r1, r5
 8004a50:	4630      	mov	r0, r6
 8004a52:	f7ff ffbf 	bl	80049d4 <sbrk_aligned>
 8004a56:	1c43      	adds	r3, r0, #1
 8004a58:	4604      	mov	r4, r0
 8004a5a:	d158      	bne.n	8004b0e <_malloc_r+0xf6>
 8004a5c:	f8d8 4000 	ldr.w	r4, [r8]
 8004a60:	4627      	mov	r7, r4
 8004a62:	2f00      	cmp	r7, #0
 8004a64:	d143      	bne.n	8004aee <_malloc_r+0xd6>
 8004a66:	2c00      	cmp	r4, #0
 8004a68:	d04b      	beq.n	8004b02 <_malloc_r+0xea>
 8004a6a:	6823      	ldr	r3, [r4, #0]
 8004a6c:	4639      	mov	r1, r7
 8004a6e:	4630      	mov	r0, r6
 8004a70:	eb04 0903 	add.w	r9, r4, r3
 8004a74:	f000 fe8c 	bl	8005790 <_sbrk_r>
 8004a78:	4581      	cmp	r9, r0
 8004a7a:	d142      	bne.n	8004b02 <_malloc_r+0xea>
 8004a7c:	6821      	ldr	r1, [r4, #0]
 8004a7e:	1a6d      	subs	r5, r5, r1
 8004a80:	4629      	mov	r1, r5
 8004a82:	4630      	mov	r0, r6
 8004a84:	f7ff ffa6 	bl	80049d4 <sbrk_aligned>
 8004a88:	3001      	adds	r0, #1
 8004a8a:	d03a      	beq.n	8004b02 <_malloc_r+0xea>
 8004a8c:	6823      	ldr	r3, [r4, #0]
 8004a8e:	442b      	add	r3, r5
 8004a90:	6023      	str	r3, [r4, #0]
 8004a92:	f8d8 3000 	ldr.w	r3, [r8]
 8004a96:	685a      	ldr	r2, [r3, #4]
 8004a98:	bb62      	cbnz	r2, 8004af4 <_malloc_r+0xdc>
 8004a9a:	f8c8 7000 	str.w	r7, [r8]
 8004a9e:	e00f      	b.n	8004ac0 <_malloc_r+0xa8>
 8004aa0:	6822      	ldr	r2, [r4, #0]
 8004aa2:	1b52      	subs	r2, r2, r5
 8004aa4:	d420      	bmi.n	8004ae8 <_malloc_r+0xd0>
 8004aa6:	2a0b      	cmp	r2, #11
 8004aa8:	d917      	bls.n	8004ada <_malloc_r+0xc2>
 8004aaa:	1961      	adds	r1, r4, r5
 8004aac:	42a3      	cmp	r3, r4
 8004aae:	6025      	str	r5, [r4, #0]
 8004ab0:	bf18      	it	ne
 8004ab2:	6059      	strne	r1, [r3, #4]
 8004ab4:	6863      	ldr	r3, [r4, #4]
 8004ab6:	bf08      	it	eq
 8004ab8:	f8c8 1000 	streq.w	r1, [r8]
 8004abc:	5162      	str	r2, [r4, r5]
 8004abe:	604b      	str	r3, [r1, #4]
 8004ac0:	4630      	mov	r0, r6
 8004ac2:	f000 f82f 	bl	8004b24 <__malloc_unlock>
 8004ac6:	f104 000b 	add.w	r0, r4, #11
 8004aca:	1d23      	adds	r3, r4, #4
 8004acc:	f020 0007 	bic.w	r0, r0, #7
 8004ad0:	1ac2      	subs	r2, r0, r3
 8004ad2:	bf1c      	itt	ne
 8004ad4:	1a1b      	subne	r3, r3, r0
 8004ad6:	50a3      	strne	r3, [r4, r2]
 8004ad8:	e7af      	b.n	8004a3a <_malloc_r+0x22>
 8004ada:	6862      	ldr	r2, [r4, #4]
 8004adc:	42a3      	cmp	r3, r4
 8004ade:	bf0c      	ite	eq
 8004ae0:	f8c8 2000 	streq.w	r2, [r8]
 8004ae4:	605a      	strne	r2, [r3, #4]
 8004ae6:	e7eb      	b.n	8004ac0 <_malloc_r+0xa8>
 8004ae8:	4623      	mov	r3, r4
 8004aea:	6864      	ldr	r4, [r4, #4]
 8004aec:	e7ae      	b.n	8004a4c <_malloc_r+0x34>
 8004aee:	463c      	mov	r4, r7
 8004af0:	687f      	ldr	r7, [r7, #4]
 8004af2:	e7b6      	b.n	8004a62 <_malloc_r+0x4a>
 8004af4:	461a      	mov	r2, r3
 8004af6:	685b      	ldr	r3, [r3, #4]
 8004af8:	42a3      	cmp	r3, r4
 8004afa:	d1fb      	bne.n	8004af4 <_malloc_r+0xdc>
 8004afc:	2300      	movs	r3, #0
 8004afe:	6053      	str	r3, [r2, #4]
 8004b00:	e7de      	b.n	8004ac0 <_malloc_r+0xa8>
 8004b02:	230c      	movs	r3, #12
 8004b04:	6033      	str	r3, [r6, #0]
 8004b06:	4630      	mov	r0, r6
 8004b08:	f000 f80c 	bl	8004b24 <__malloc_unlock>
 8004b0c:	e794      	b.n	8004a38 <_malloc_r+0x20>
 8004b0e:	6005      	str	r5, [r0, #0]
 8004b10:	e7d6      	b.n	8004ac0 <_malloc_r+0xa8>
 8004b12:	bf00      	nop
 8004b14:	20000530 	.word	0x20000530

08004b18 <__malloc_lock>:
 8004b18:	4801      	ldr	r0, [pc, #4]	@ (8004b20 <__malloc_lock+0x8>)
 8004b1a:	f7ff b8ae 	b.w	8003c7a <__retarget_lock_acquire_recursive>
 8004b1e:	bf00      	nop
 8004b20:	20000528 	.word	0x20000528

08004b24 <__malloc_unlock>:
 8004b24:	4801      	ldr	r0, [pc, #4]	@ (8004b2c <__malloc_unlock+0x8>)
 8004b26:	f7ff b8a9 	b.w	8003c7c <__retarget_lock_release_recursive>
 8004b2a:	bf00      	nop
 8004b2c:	20000528 	.word	0x20000528

08004b30 <_Balloc>:
 8004b30:	b570      	push	{r4, r5, r6, lr}
 8004b32:	69c6      	ldr	r6, [r0, #28]
 8004b34:	4604      	mov	r4, r0
 8004b36:	460d      	mov	r5, r1
 8004b38:	b976      	cbnz	r6, 8004b58 <_Balloc+0x28>
 8004b3a:	2010      	movs	r0, #16
 8004b3c:	f7ff ff42 	bl	80049c4 <malloc>
 8004b40:	4602      	mov	r2, r0
 8004b42:	61e0      	str	r0, [r4, #28]
 8004b44:	b920      	cbnz	r0, 8004b50 <_Balloc+0x20>
 8004b46:	4b18      	ldr	r3, [pc, #96]	@ (8004ba8 <_Balloc+0x78>)
 8004b48:	4818      	ldr	r0, [pc, #96]	@ (8004bac <_Balloc+0x7c>)
 8004b4a:	216b      	movs	r1, #107	@ 0x6b
 8004b4c:	f000 fe3e 	bl	80057cc <__assert_func>
 8004b50:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8004b54:	6006      	str	r6, [r0, #0]
 8004b56:	60c6      	str	r6, [r0, #12]
 8004b58:	69e6      	ldr	r6, [r4, #28]
 8004b5a:	68f3      	ldr	r3, [r6, #12]
 8004b5c:	b183      	cbz	r3, 8004b80 <_Balloc+0x50>
 8004b5e:	69e3      	ldr	r3, [r4, #28]
 8004b60:	68db      	ldr	r3, [r3, #12]
 8004b62:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8004b66:	b9b8      	cbnz	r0, 8004b98 <_Balloc+0x68>
 8004b68:	2101      	movs	r1, #1
 8004b6a:	fa01 f605 	lsl.w	r6, r1, r5
 8004b6e:	1d72      	adds	r2, r6, #5
 8004b70:	0092      	lsls	r2, r2, #2
 8004b72:	4620      	mov	r0, r4
 8004b74:	f000 fe48 	bl	8005808 <_calloc_r>
 8004b78:	b160      	cbz	r0, 8004b94 <_Balloc+0x64>
 8004b7a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8004b7e:	e00e      	b.n	8004b9e <_Balloc+0x6e>
 8004b80:	2221      	movs	r2, #33	@ 0x21
 8004b82:	2104      	movs	r1, #4
 8004b84:	4620      	mov	r0, r4
 8004b86:	f000 fe3f 	bl	8005808 <_calloc_r>
 8004b8a:	69e3      	ldr	r3, [r4, #28]
 8004b8c:	60f0      	str	r0, [r6, #12]
 8004b8e:	68db      	ldr	r3, [r3, #12]
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d1e4      	bne.n	8004b5e <_Balloc+0x2e>
 8004b94:	2000      	movs	r0, #0
 8004b96:	bd70      	pop	{r4, r5, r6, pc}
 8004b98:	6802      	ldr	r2, [r0, #0]
 8004b9a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8004b9e:	2300      	movs	r3, #0
 8004ba0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8004ba4:	e7f7      	b.n	8004b96 <_Balloc+0x66>
 8004ba6:	bf00      	nop
 8004ba8:	08005b35 	.word	0x08005b35
 8004bac:	08005bb5 	.word	0x08005bb5

08004bb0 <_Bfree>:
 8004bb0:	b570      	push	{r4, r5, r6, lr}
 8004bb2:	69c6      	ldr	r6, [r0, #28]
 8004bb4:	4605      	mov	r5, r0
 8004bb6:	460c      	mov	r4, r1
 8004bb8:	b976      	cbnz	r6, 8004bd8 <_Bfree+0x28>
 8004bba:	2010      	movs	r0, #16
 8004bbc:	f7ff ff02 	bl	80049c4 <malloc>
 8004bc0:	4602      	mov	r2, r0
 8004bc2:	61e8      	str	r0, [r5, #28]
 8004bc4:	b920      	cbnz	r0, 8004bd0 <_Bfree+0x20>
 8004bc6:	4b09      	ldr	r3, [pc, #36]	@ (8004bec <_Bfree+0x3c>)
 8004bc8:	4809      	ldr	r0, [pc, #36]	@ (8004bf0 <_Bfree+0x40>)
 8004bca:	218f      	movs	r1, #143	@ 0x8f
 8004bcc:	f000 fdfe 	bl	80057cc <__assert_func>
 8004bd0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8004bd4:	6006      	str	r6, [r0, #0]
 8004bd6:	60c6      	str	r6, [r0, #12]
 8004bd8:	b13c      	cbz	r4, 8004bea <_Bfree+0x3a>
 8004bda:	69eb      	ldr	r3, [r5, #28]
 8004bdc:	6862      	ldr	r2, [r4, #4]
 8004bde:	68db      	ldr	r3, [r3, #12]
 8004be0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004be4:	6021      	str	r1, [r4, #0]
 8004be6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8004bea:	bd70      	pop	{r4, r5, r6, pc}
 8004bec:	08005b35 	.word	0x08005b35
 8004bf0:	08005bb5 	.word	0x08005bb5

08004bf4 <__multadd>:
 8004bf4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004bf8:	690d      	ldr	r5, [r1, #16]
 8004bfa:	4607      	mov	r7, r0
 8004bfc:	460c      	mov	r4, r1
 8004bfe:	461e      	mov	r6, r3
 8004c00:	f101 0c14 	add.w	ip, r1, #20
 8004c04:	2000      	movs	r0, #0
 8004c06:	f8dc 3000 	ldr.w	r3, [ip]
 8004c0a:	b299      	uxth	r1, r3
 8004c0c:	fb02 6101 	mla	r1, r2, r1, r6
 8004c10:	0c1e      	lsrs	r6, r3, #16
 8004c12:	0c0b      	lsrs	r3, r1, #16
 8004c14:	fb02 3306 	mla	r3, r2, r6, r3
 8004c18:	b289      	uxth	r1, r1
 8004c1a:	3001      	adds	r0, #1
 8004c1c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8004c20:	4285      	cmp	r5, r0
 8004c22:	f84c 1b04 	str.w	r1, [ip], #4
 8004c26:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8004c2a:	dcec      	bgt.n	8004c06 <__multadd+0x12>
 8004c2c:	b30e      	cbz	r6, 8004c72 <__multadd+0x7e>
 8004c2e:	68a3      	ldr	r3, [r4, #8]
 8004c30:	42ab      	cmp	r3, r5
 8004c32:	dc19      	bgt.n	8004c68 <__multadd+0x74>
 8004c34:	6861      	ldr	r1, [r4, #4]
 8004c36:	4638      	mov	r0, r7
 8004c38:	3101      	adds	r1, #1
 8004c3a:	f7ff ff79 	bl	8004b30 <_Balloc>
 8004c3e:	4680      	mov	r8, r0
 8004c40:	b928      	cbnz	r0, 8004c4e <__multadd+0x5a>
 8004c42:	4602      	mov	r2, r0
 8004c44:	4b0c      	ldr	r3, [pc, #48]	@ (8004c78 <__multadd+0x84>)
 8004c46:	480d      	ldr	r0, [pc, #52]	@ (8004c7c <__multadd+0x88>)
 8004c48:	21ba      	movs	r1, #186	@ 0xba
 8004c4a:	f000 fdbf 	bl	80057cc <__assert_func>
 8004c4e:	6922      	ldr	r2, [r4, #16]
 8004c50:	3202      	adds	r2, #2
 8004c52:	f104 010c 	add.w	r1, r4, #12
 8004c56:	0092      	lsls	r2, r2, #2
 8004c58:	300c      	adds	r0, #12
 8004c5a:	f000 fda9 	bl	80057b0 <memcpy>
 8004c5e:	4621      	mov	r1, r4
 8004c60:	4638      	mov	r0, r7
 8004c62:	f7ff ffa5 	bl	8004bb0 <_Bfree>
 8004c66:	4644      	mov	r4, r8
 8004c68:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8004c6c:	3501      	adds	r5, #1
 8004c6e:	615e      	str	r6, [r3, #20]
 8004c70:	6125      	str	r5, [r4, #16]
 8004c72:	4620      	mov	r0, r4
 8004c74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004c78:	08005ba4 	.word	0x08005ba4
 8004c7c:	08005bb5 	.word	0x08005bb5

08004c80 <__hi0bits>:
 8004c80:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8004c84:	4603      	mov	r3, r0
 8004c86:	bf36      	itet	cc
 8004c88:	0403      	lslcc	r3, r0, #16
 8004c8a:	2000      	movcs	r0, #0
 8004c8c:	2010      	movcc	r0, #16
 8004c8e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004c92:	bf3c      	itt	cc
 8004c94:	021b      	lslcc	r3, r3, #8
 8004c96:	3008      	addcc	r0, #8
 8004c98:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004c9c:	bf3c      	itt	cc
 8004c9e:	011b      	lslcc	r3, r3, #4
 8004ca0:	3004      	addcc	r0, #4
 8004ca2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004ca6:	bf3c      	itt	cc
 8004ca8:	009b      	lslcc	r3, r3, #2
 8004caa:	3002      	addcc	r0, #2
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	db05      	blt.n	8004cbc <__hi0bits+0x3c>
 8004cb0:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8004cb4:	f100 0001 	add.w	r0, r0, #1
 8004cb8:	bf08      	it	eq
 8004cba:	2020      	moveq	r0, #32
 8004cbc:	4770      	bx	lr

08004cbe <__lo0bits>:
 8004cbe:	6803      	ldr	r3, [r0, #0]
 8004cc0:	4602      	mov	r2, r0
 8004cc2:	f013 0007 	ands.w	r0, r3, #7
 8004cc6:	d00b      	beq.n	8004ce0 <__lo0bits+0x22>
 8004cc8:	07d9      	lsls	r1, r3, #31
 8004cca:	d421      	bmi.n	8004d10 <__lo0bits+0x52>
 8004ccc:	0798      	lsls	r0, r3, #30
 8004cce:	bf49      	itett	mi
 8004cd0:	085b      	lsrmi	r3, r3, #1
 8004cd2:	089b      	lsrpl	r3, r3, #2
 8004cd4:	2001      	movmi	r0, #1
 8004cd6:	6013      	strmi	r3, [r2, #0]
 8004cd8:	bf5c      	itt	pl
 8004cda:	6013      	strpl	r3, [r2, #0]
 8004cdc:	2002      	movpl	r0, #2
 8004cde:	4770      	bx	lr
 8004ce0:	b299      	uxth	r1, r3
 8004ce2:	b909      	cbnz	r1, 8004ce8 <__lo0bits+0x2a>
 8004ce4:	0c1b      	lsrs	r3, r3, #16
 8004ce6:	2010      	movs	r0, #16
 8004ce8:	b2d9      	uxtb	r1, r3
 8004cea:	b909      	cbnz	r1, 8004cf0 <__lo0bits+0x32>
 8004cec:	3008      	adds	r0, #8
 8004cee:	0a1b      	lsrs	r3, r3, #8
 8004cf0:	0719      	lsls	r1, r3, #28
 8004cf2:	bf04      	itt	eq
 8004cf4:	091b      	lsreq	r3, r3, #4
 8004cf6:	3004      	addeq	r0, #4
 8004cf8:	0799      	lsls	r1, r3, #30
 8004cfa:	bf04      	itt	eq
 8004cfc:	089b      	lsreq	r3, r3, #2
 8004cfe:	3002      	addeq	r0, #2
 8004d00:	07d9      	lsls	r1, r3, #31
 8004d02:	d403      	bmi.n	8004d0c <__lo0bits+0x4e>
 8004d04:	085b      	lsrs	r3, r3, #1
 8004d06:	f100 0001 	add.w	r0, r0, #1
 8004d0a:	d003      	beq.n	8004d14 <__lo0bits+0x56>
 8004d0c:	6013      	str	r3, [r2, #0]
 8004d0e:	4770      	bx	lr
 8004d10:	2000      	movs	r0, #0
 8004d12:	4770      	bx	lr
 8004d14:	2020      	movs	r0, #32
 8004d16:	4770      	bx	lr

08004d18 <__i2b>:
 8004d18:	b510      	push	{r4, lr}
 8004d1a:	460c      	mov	r4, r1
 8004d1c:	2101      	movs	r1, #1
 8004d1e:	f7ff ff07 	bl	8004b30 <_Balloc>
 8004d22:	4602      	mov	r2, r0
 8004d24:	b928      	cbnz	r0, 8004d32 <__i2b+0x1a>
 8004d26:	4b05      	ldr	r3, [pc, #20]	@ (8004d3c <__i2b+0x24>)
 8004d28:	4805      	ldr	r0, [pc, #20]	@ (8004d40 <__i2b+0x28>)
 8004d2a:	f240 1145 	movw	r1, #325	@ 0x145
 8004d2e:	f000 fd4d 	bl	80057cc <__assert_func>
 8004d32:	2301      	movs	r3, #1
 8004d34:	6144      	str	r4, [r0, #20]
 8004d36:	6103      	str	r3, [r0, #16]
 8004d38:	bd10      	pop	{r4, pc}
 8004d3a:	bf00      	nop
 8004d3c:	08005ba4 	.word	0x08005ba4
 8004d40:	08005bb5 	.word	0x08005bb5

08004d44 <__multiply>:
 8004d44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d48:	4617      	mov	r7, r2
 8004d4a:	690a      	ldr	r2, [r1, #16]
 8004d4c:	693b      	ldr	r3, [r7, #16]
 8004d4e:	429a      	cmp	r2, r3
 8004d50:	bfa8      	it	ge
 8004d52:	463b      	movge	r3, r7
 8004d54:	4689      	mov	r9, r1
 8004d56:	bfa4      	itt	ge
 8004d58:	460f      	movge	r7, r1
 8004d5a:	4699      	movge	r9, r3
 8004d5c:	693d      	ldr	r5, [r7, #16]
 8004d5e:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8004d62:	68bb      	ldr	r3, [r7, #8]
 8004d64:	6879      	ldr	r1, [r7, #4]
 8004d66:	eb05 060a 	add.w	r6, r5, sl
 8004d6a:	42b3      	cmp	r3, r6
 8004d6c:	b085      	sub	sp, #20
 8004d6e:	bfb8      	it	lt
 8004d70:	3101      	addlt	r1, #1
 8004d72:	f7ff fedd 	bl	8004b30 <_Balloc>
 8004d76:	b930      	cbnz	r0, 8004d86 <__multiply+0x42>
 8004d78:	4602      	mov	r2, r0
 8004d7a:	4b41      	ldr	r3, [pc, #260]	@ (8004e80 <__multiply+0x13c>)
 8004d7c:	4841      	ldr	r0, [pc, #260]	@ (8004e84 <__multiply+0x140>)
 8004d7e:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8004d82:	f000 fd23 	bl	80057cc <__assert_func>
 8004d86:	f100 0414 	add.w	r4, r0, #20
 8004d8a:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 8004d8e:	4623      	mov	r3, r4
 8004d90:	2200      	movs	r2, #0
 8004d92:	4573      	cmp	r3, lr
 8004d94:	d320      	bcc.n	8004dd8 <__multiply+0x94>
 8004d96:	f107 0814 	add.w	r8, r7, #20
 8004d9a:	f109 0114 	add.w	r1, r9, #20
 8004d9e:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 8004da2:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 8004da6:	9302      	str	r3, [sp, #8]
 8004da8:	1beb      	subs	r3, r5, r7
 8004daa:	3b15      	subs	r3, #21
 8004dac:	f023 0303 	bic.w	r3, r3, #3
 8004db0:	3304      	adds	r3, #4
 8004db2:	3715      	adds	r7, #21
 8004db4:	42bd      	cmp	r5, r7
 8004db6:	bf38      	it	cc
 8004db8:	2304      	movcc	r3, #4
 8004dba:	9301      	str	r3, [sp, #4]
 8004dbc:	9b02      	ldr	r3, [sp, #8]
 8004dbe:	9103      	str	r1, [sp, #12]
 8004dc0:	428b      	cmp	r3, r1
 8004dc2:	d80c      	bhi.n	8004dde <__multiply+0x9a>
 8004dc4:	2e00      	cmp	r6, #0
 8004dc6:	dd03      	ble.n	8004dd0 <__multiply+0x8c>
 8004dc8:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d055      	beq.n	8004e7c <__multiply+0x138>
 8004dd0:	6106      	str	r6, [r0, #16]
 8004dd2:	b005      	add	sp, #20
 8004dd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004dd8:	f843 2b04 	str.w	r2, [r3], #4
 8004ddc:	e7d9      	b.n	8004d92 <__multiply+0x4e>
 8004dde:	f8b1 a000 	ldrh.w	sl, [r1]
 8004de2:	f1ba 0f00 	cmp.w	sl, #0
 8004de6:	d01f      	beq.n	8004e28 <__multiply+0xe4>
 8004de8:	46c4      	mov	ip, r8
 8004dea:	46a1      	mov	r9, r4
 8004dec:	2700      	movs	r7, #0
 8004dee:	f85c 2b04 	ldr.w	r2, [ip], #4
 8004df2:	f8d9 3000 	ldr.w	r3, [r9]
 8004df6:	fa1f fb82 	uxth.w	fp, r2
 8004dfa:	b29b      	uxth	r3, r3
 8004dfc:	fb0a 330b 	mla	r3, sl, fp, r3
 8004e00:	443b      	add	r3, r7
 8004e02:	f8d9 7000 	ldr.w	r7, [r9]
 8004e06:	0c12      	lsrs	r2, r2, #16
 8004e08:	0c3f      	lsrs	r7, r7, #16
 8004e0a:	fb0a 7202 	mla	r2, sl, r2, r7
 8004e0e:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 8004e12:	b29b      	uxth	r3, r3
 8004e14:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004e18:	4565      	cmp	r5, ip
 8004e1a:	f849 3b04 	str.w	r3, [r9], #4
 8004e1e:	ea4f 4712 	mov.w	r7, r2, lsr #16
 8004e22:	d8e4      	bhi.n	8004dee <__multiply+0xaa>
 8004e24:	9b01      	ldr	r3, [sp, #4]
 8004e26:	50e7      	str	r7, [r4, r3]
 8004e28:	9b03      	ldr	r3, [sp, #12]
 8004e2a:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8004e2e:	3104      	adds	r1, #4
 8004e30:	f1b9 0f00 	cmp.w	r9, #0
 8004e34:	d020      	beq.n	8004e78 <__multiply+0x134>
 8004e36:	6823      	ldr	r3, [r4, #0]
 8004e38:	4647      	mov	r7, r8
 8004e3a:	46a4      	mov	ip, r4
 8004e3c:	f04f 0a00 	mov.w	sl, #0
 8004e40:	f8b7 b000 	ldrh.w	fp, [r7]
 8004e44:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8004e48:	fb09 220b 	mla	r2, r9, fp, r2
 8004e4c:	4452      	add	r2, sl
 8004e4e:	b29b      	uxth	r3, r3
 8004e50:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004e54:	f84c 3b04 	str.w	r3, [ip], #4
 8004e58:	f857 3b04 	ldr.w	r3, [r7], #4
 8004e5c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8004e60:	f8bc 3000 	ldrh.w	r3, [ip]
 8004e64:	fb09 330a 	mla	r3, r9, sl, r3
 8004e68:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8004e6c:	42bd      	cmp	r5, r7
 8004e6e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8004e72:	d8e5      	bhi.n	8004e40 <__multiply+0xfc>
 8004e74:	9a01      	ldr	r2, [sp, #4]
 8004e76:	50a3      	str	r3, [r4, r2]
 8004e78:	3404      	adds	r4, #4
 8004e7a:	e79f      	b.n	8004dbc <__multiply+0x78>
 8004e7c:	3e01      	subs	r6, #1
 8004e7e:	e7a1      	b.n	8004dc4 <__multiply+0x80>
 8004e80:	08005ba4 	.word	0x08005ba4
 8004e84:	08005bb5 	.word	0x08005bb5

08004e88 <__pow5mult>:
 8004e88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004e8c:	4615      	mov	r5, r2
 8004e8e:	f012 0203 	ands.w	r2, r2, #3
 8004e92:	4607      	mov	r7, r0
 8004e94:	460e      	mov	r6, r1
 8004e96:	d007      	beq.n	8004ea8 <__pow5mult+0x20>
 8004e98:	4c25      	ldr	r4, [pc, #148]	@ (8004f30 <__pow5mult+0xa8>)
 8004e9a:	3a01      	subs	r2, #1
 8004e9c:	2300      	movs	r3, #0
 8004e9e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8004ea2:	f7ff fea7 	bl	8004bf4 <__multadd>
 8004ea6:	4606      	mov	r6, r0
 8004ea8:	10ad      	asrs	r5, r5, #2
 8004eaa:	d03d      	beq.n	8004f28 <__pow5mult+0xa0>
 8004eac:	69fc      	ldr	r4, [r7, #28]
 8004eae:	b97c      	cbnz	r4, 8004ed0 <__pow5mult+0x48>
 8004eb0:	2010      	movs	r0, #16
 8004eb2:	f7ff fd87 	bl	80049c4 <malloc>
 8004eb6:	4602      	mov	r2, r0
 8004eb8:	61f8      	str	r0, [r7, #28]
 8004eba:	b928      	cbnz	r0, 8004ec8 <__pow5mult+0x40>
 8004ebc:	4b1d      	ldr	r3, [pc, #116]	@ (8004f34 <__pow5mult+0xac>)
 8004ebe:	481e      	ldr	r0, [pc, #120]	@ (8004f38 <__pow5mult+0xb0>)
 8004ec0:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8004ec4:	f000 fc82 	bl	80057cc <__assert_func>
 8004ec8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8004ecc:	6004      	str	r4, [r0, #0]
 8004ece:	60c4      	str	r4, [r0, #12]
 8004ed0:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8004ed4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8004ed8:	b94c      	cbnz	r4, 8004eee <__pow5mult+0x66>
 8004eda:	f240 2171 	movw	r1, #625	@ 0x271
 8004ede:	4638      	mov	r0, r7
 8004ee0:	f7ff ff1a 	bl	8004d18 <__i2b>
 8004ee4:	2300      	movs	r3, #0
 8004ee6:	f8c8 0008 	str.w	r0, [r8, #8]
 8004eea:	4604      	mov	r4, r0
 8004eec:	6003      	str	r3, [r0, #0]
 8004eee:	f04f 0900 	mov.w	r9, #0
 8004ef2:	07eb      	lsls	r3, r5, #31
 8004ef4:	d50a      	bpl.n	8004f0c <__pow5mult+0x84>
 8004ef6:	4631      	mov	r1, r6
 8004ef8:	4622      	mov	r2, r4
 8004efa:	4638      	mov	r0, r7
 8004efc:	f7ff ff22 	bl	8004d44 <__multiply>
 8004f00:	4631      	mov	r1, r6
 8004f02:	4680      	mov	r8, r0
 8004f04:	4638      	mov	r0, r7
 8004f06:	f7ff fe53 	bl	8004bb0 <_Bfree>
 8004f0a:	4646      	mov	r6, r8
 8004f0c:	106d      	asrs	r5, r5, #1
 8004f0e:	d00b      	beq.n	8004f28 <__pow5mult+0xa0>
 8004f10:	6820      	ldr	r0, [r4, #0]
 8004f12:	b938      	cbnz	r0, 8004f24 <__pow5mult+0x9c>
 8004f14:	4622      	mov	r2, r4
 8004f16:	4621      	mov	r1, r4
 8004f18:	4638      	mov	r0, r7
 8004f1a:	f7ff ff13 	bl	8004d44 <__multiply>
 8004f1e:	6020      	str	r0, [r4, #0]
 8004f20:	f8c0 9000 	str.w	r9, [r0]
 8004f24:	4604      	mov	r4, r0
 8004f26:	e7e4      	b.n	8004ef2 <__pow5mult+0x6a>
 8004f28:	4630      	mov	r0, r6
 8004f2a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004f2e:	bf00      	nop
 8004f30:	08005c68 	.word	0x08005c68
 8004f34:	08005b35 	.word	0x08005b35
 8004f38:	08005bb5 	.word	0x08005bb5

08004f3c <__lshift>:
 8004f3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004f40:	460c      	mov	r4, r1
 8004f42:	6849      	ldr	r1, [r1, #4]
 8004f44:	6923      	ldr	r3, [r4, #16]
 8004f46:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8004f4a:	68a3      	ldr	r3, [r4, #8]
 8004f4c:	4607      	mov	r7, r0
 8004f4e:	4691      	mov	r9, r2
 8004f50:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8004f54:	f108 0601 	add.w	r6, r8, #1
 8004f58:	42b3      	cmp	r3, r6
 8004f5a:	db0b      	blt.n	8004f74 <__lshift+0x38>
 8004f5c:	4638      	mov	r0, r7
 8004f5e:	f7ff fde7 	bl	8004b30 <_Balloc>
 8004f62:	4605      	mov	r5, r0
 8004f64:	b948      	cbnz	r0, 8004f7a <__lshift+0x3e>
 8004f66:	4602      	mov	r2, r0
 8004f68:	4b28      	ldr	r3, [pc, #160]	@ (800500c <__lshift+0xd0>)
 8004f6a:	4829      	ldr	r0, [pc, #164]	@ (8005010 <__lshift+0xd4>)
 8004f6c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8004f70:	f000 fc2c 	bl	80057cc <__assert_func>
 8004f74:	3101      	adds	r1, #1
 8004f76:	005b      	lsls	r3, r3, #1
 8004f78:	e7ee      	b.n	8004f58 <__lshift+0x1c>
 8004f7a:	2300      	movs	r3, #0
 8004f7c:	f100 0114 	add.w	r1, r0, #20
 8004f80:	f100 0210 	add.w	r2, r0, #16
 8004f84:	4618      	mov	r0, r3
 8004f86:	4553      	cmp	r3, sl
 8004f88:	db33      	blt.n	8004ff2 <__lshift+0xb6>
 8004f8a:	6920      	ldr	r0, [r4, #16]
 8004f8c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8004f90:	f104 0314 	add.w	r3, r4, #20
 8004f94:	f019 091f 	ands.w	r9, r9, #31
 8004f98:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8004f9c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8004fa0:	d02b      	beq.n	8004ffa <__lshift+0xbe>
 8004fa2:	f1c9 0e20 	rsb	lr, r9, #32
 8004fa6:	468a      	mov	sl, r1
 8004fa8:	2200      	movs	r2, #0
 8004faa:	6818      	ldr	r0, [r3, #0]
 8004fac:	fa00 f009 	lsl.w	r0, r0, r9
 8004fb0:	4310      	orrs	r0, r2
 8004fb2:	f84a 0b04 	str.w	r0, [sl], #4
 8004fb6:	f853 2b04 	ldr.w	r2, [r3], #4
 8004fba:	459c      	cmp	ip, r3
 8004fbc:	fa22 f20e 	lsr.w	r2, r2, lr
 8004fc0:	d8f3      	bhi.n	8004faa <__lshift+0x6e>
 8004fc2:	ebac 0304 	sub.w	r3, ip, r4
 8004fc6:	3b15      	subs	r3, #21
 8004fc8:	f023 0303 	bic.w	r3, r3, #3
 8004fcc:	3304      	adds	r3, #4
 8004fce:	f104 0015 	add.w	r0, r4, #21
 8004fd2:	4560      	cmp	r0, ip
 8004fd4:	bf88      	it	hi
 8004fd6:	2304      	movhi	r3, #4
 8004fd8:	50ca      	str	r2, [r1, r3]
 8004fda:	b10a      	cbz	r2, 8004fe0 <__lshift+0xa4>
 8004fdc:	f108 0602 	add.w	r6, r8, #2
 8004fe0:	3e01      	subs	r6, #1
 8004fe2:	4638      	mov	r0, r7
 8004fe4:	612e      	str	r6, [r5, #16]
 8004fe6:	4621      	mov	r1, r4
 8004fe8:	f7ff fde2 	bl	8004bb0 <_Bfree>
 8004fec:	4628      	mov	r0, r5
 8004fee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004ff2:	f842 0f04 	str.w	r0, [r2, #4]!
 8004ff6:	3301      	adds	r3, #1
 8004ff8:	e7c5      	b.n	8004f86 <__lshift+0x4a>
 8004ffa:	3904      	subs	r1, #4
 8004ffc:	f853 2b04 	ldr.w	r2, [r3], #4
 8005000:	f841 2f04 	str.w	r2, [r1, #4]!
 8005004:	459c      	cmp	ip, r3
 8005006:	d8f9      	bhi.n	8004ffc <__lshift+0xc0>
 8005008:	e7ea      	b.n	8004fe0 <__lshift+0xa4>
 800500a:	bf00      	nop
 800500c:	08005ba4 	.word	0x08005ba4
 8005010:	08005bb5 	.word	0x08005bb5

08005014 <__mcmp>:
 8005014:	690a      	ldr	r2, [r1, #16]
 8005016:	4603      	mov	r3, r0
 8005018:	6900      	ldr	r0, [r0, #16]
 800501a:	1a80      	subs	r0, r0, r2
 800501c:	b530      	push	{r4, r5, lr}
 800501e:	d10e      	bne.n	800503e <__mcmp+0x2a>
 8005020:	3314      	adds	r3, #20
 8005022:	3114      	adds	r1, #20
 8005024:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8005028:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800502c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8005030:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8005034:	4295      	cmp	r5, r2
 8005036:	d003      	beq.n	8005040 <__mcmp+0x2c>
 8005038:	d205      	bcs.n	8005046 <__mcmp+0x32>
 800503a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800503e:	bd30      	pop	{r4, r5, pc}
 8005040:	42a3      	cmp	r3, r4
 8005042:	d3f3      	bcc.n	800502c <__mcmp+0x18>
 8005044:	e7fb      	b.n	800503e <__mcmp+0x2a>
 8005046:	2001      	movs	r0, #1
 8005048:	e7f9      	b.n	800503e <__mcmp+0x2a>
	...

0800504c <__mdiff>:
 800504c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005050:	4689      	mov	r9, r1
 8005052:	4606      	mov	r6, r0
 8005054:	4611      	mov	r1, r2
 8005056:	4648      	mov	r0, r9
 8005058:	4614      	mov	r4, r2
 800505a:	f7ff ffdb 	bl	8005014 <__mcmp>
 800505e:	1e05      	subs	r5, r0, #0
 8005060:	d112      	bne.n	8005088 <__mdiff+0x3c>
 8005062:	4629      	mov	r1, r5
 8005064:	4630      	mov	r0, r6
 8005066:	f7ff fd63 	bl	8004b30 <_Balloc>
 800506a:	4602      	mov	r2, r0
 800506c:	b928      	cbnz	r0, 800507a <__mdiff+0x2e>
 800506e:	4b3f      	ldr	r3, [pc, #252]	@ (800516c <__mdiff+0x120>)
 8005070:	f240 2137 	movw	r1, #567	@ 0x237
 8005074:	483e      	ldr	r0, [pc, #248]	@ (8005170 <__mdiff+0x124>)
 8005076:	f000 fba9 	bl	80057cc <__assert_func>
 800507a:	2301      	movs	r3, #1
 800507c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8005080:	4610      	mov	r0, r2
 8005082:	b003      	add	sp, #12
 8005084:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005088:	bfbc      	itt	lt
 800508a:	464b      	movlt	r3, r9
 800508c:	46a1      	movlt	r9, r4
 800508e:	4630      	mov	r0, r6
 8005090:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8005094:	bfba      	itte	lt
 8005096:	461c      	movlt	r4, r3
 8005098:	2501      	movlt	r5, #1
 800509a:	2500      	movge	r5, #0
 800509c:	f7ff fd48 	bl	8004b30 <_Balloc>
 80050a0:	4602      	mov	r2, r0
 80050a2:	b918      	cbnz	r0, 80050ac <__mdiff+0x60>
 80050a4:	4b31      	ldr	r3, [pc, #196]	@ (800516c <__mdiff+0x120>)
 80050a6:	f240 2145 	movw	r1, #581	@ 0x245
 80050aa:	e7e3      	b.n	8005074 <__mdiff+0x28>
 80050ac:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80050b0:	6926      	ldr	r6, [r4, #16]
 80050b2:	60c5      	str	r5, [r0, #12]
 80050b4:	f109 0310 	add.w	r3, r9, #16
 80050b8:	f109 0514 	add.w	r5, r9, #20
 80050bc:	f104 0e14 	add.w	lr, r4, #20
 80050c0:	f100 0b14 	add.w	fp, r0, #20
 80050c4:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80050c8:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80050cc:	9301      	str	r3, [sp, #4]
 80050ce:	46d9      	mov	r9, fp
 80050d0:	f04f 0c00 	mov.w	ip, #0
 80050d4:	9b01      	ldr	r3, [sp, #4]
 80050d6:	f85e 0b04 	ldr.w	r0, [lr], #4
 80050da:	f853 af04 	ldr.w	sl, [r3, #4]!
 80050de:	9301      	str	r3, [sp, #4]
 80050e0:	fa1f f38a 	uxth.w	r3, sl
 80050e4:	4619      	mov	r1, r3
 80050e6:	b283      	uxth	r3, r0
 80050e8:	1acb      	subs	r3, r1, r3
 80050ea:	0c00      	lsrs	r0, r0, #16
 80050ec:	4463      	add	r3, ip
 80050ee:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80050f2:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80050f6:	b29b      	uxth	r3, r3
 80050f8:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80050fc:	4576      	cmp	r6, lr
 80050fe:	f849 3b04 	str.w	r3, [r9], #4
 8005102:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8005106:	d8e5      	bhi.n	80050d4 <__mdiff+0x88>
 8005108:	1b33      	subs	r3, r6, r4
 800510a:	3b15      	subs	r3, #21
 800510c:	f023 0303 	bic.w	r3, r3, #3
 8005110:	3415      	adds	r4, #21
 8005112:	3304      	adds	r3, #4
 8005114:	42a6      	cmp	r6, r4
 8005116:	bf38      	it	cc
 8005118:	2304      	movcc	r3, #4
 800511a:	441d      	add	r5, r3
 800511c:	445b      	add	r3, fp
 800511e:	461e      	mov	r6, r3
 8005120:	462c      	mov	r4, r5
 8005122:	4544      	cmp	r4, r8
 8005124:	d30e      	bcc.n	8005144 <__mdiff+0xf8>
 8005126:	f108 0103 	add.w	r1, r8, #3
 800512a:	1b49      	subs	r1, r1, r5
 800512c:	f021 0103 	bic.w	r1, r1, #3
 8005130:	3d03      	subs	r5, #3
 8005132:	45a8      	cmp	r8, r5
 8005134:	bf38      	it	cc
 8005136:	2100      	movcc	r1, #0
 8005138:	440b      	add	r3, r1
 800513a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800513e:	b191      	cbz	r1, 8005166 <__mdiff+0x11a>
 8005140:	6117      	str	r7, [r2, #16]
 8005142:	e79d      	b.n	8005080 <__mdiff+0x34>
 8005144:	f854 1b04 	ldr.w	r1, [r4], #4
 8005148:	46e6      	mov	lr, ip
 800514a:	0c08      	lsrs	r0, r1, #16
 800514c:	fa1c fc81 	uxtah	ip, ip, r1
 8005150:	4471      	add	r1, lr
 8005152:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8005156:	b289      	uxth	r1, r1
 8005158:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800515c:	f846 1b04 	str.w	r1, [r6], #4
 8005160:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8005164:	e7dd      	b.n	8005122 <__mdiff+0xd6>
 8005166:	3f01      	subs	r7, #1
 8005168:	e7e7      	b.n	800513a <__mdiff+0xee>
 800516a:	bf00      	nop
 800516c:	08005ba4 	.word	0x08005ba4
 8005170:	08005bb5 	.word	0x08005bb5

08005174 <__d2b>:
 8005174:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8005178:	460f      	mov	r7, r1
 800517a:	2101      	movs	r1, #1
 800517c:	ec59 8b10 	vmov	r8, r9, d0
 8005180:	4616      	mov	r6, r2
 8005182:	f7ff fcd5 	bl	8004b30 <_Balloc>
 8005186:	4604      	mov	r4, r0
 8005188:	b930      	cbnz	r0, 8005198 <__d2b+0x24>
 800518a:	4602      	mov	r2, r0
 800518c:	4b23      	ldr	r3, [pc, #140]	@ (800521c <__d2b+0xa8>)
 800518e:	4824      	ldr	r0, [pc, #144]	@ (8005220 <__d2b+0xac>)
 8005190:	f240 310f 	movw	r1, #783	@ 0x30f
 8005194:	f000 fb1a 	bl	80057cc <__assert_func>
 8005198:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800519c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80051a0:	b10d      	cbz	r5, 80051a6 <__d2b+0x32>
 80051a2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80051a6:	9301      	str	r3, [sp, #4]
 80051a8:	f1b8 0300 	subs.w	r3, r8, #0
 80051ac:	d023      	beq.n	80051f6 <__d2b+0x82>
 80051ae:	4668      	mov	r0, sp
 80051b0:	9300      	str	r3, [sp, #0]
 80051b2:	f7ff fd84 	bl	8004cbe <__lo0bits>
 80051b6:	e9dd 1200 	ldrd	r1, r2, [sp]
 80051ba:	b1d0      	cbz	r0, 80051f2 <__d2b+0x7e>
 80051bc:	f1c0 0320 	rsb	r3, r0, #32
 80051c0:	fa02 f303 	lsl.w	r3, r2, r3
 80051c4:	430b      	orrs	r3, r1
 80051c6:	40c2      	lsrs	r2, r0
 80051c8:	6163      	str	r3, [r4, #20]
 80051ca:	9201      	str	r2, [sp, #4]
 80051cc:	9b01      	ldr	r3, [sp, #4]
 80051ce:	61a3      	str	r3, [r4, #24]
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	bf0c      	ite	eq
 80051d4:	2201      	moveq	r2, #1
 80051d6:	2202      	movne	r2, #2
 80051d8:	6122      	str	r2, [r4, #16]
 80051da:	b1a5      	cbz	r5, 8005206 <__d2b+0x92>
 80051dc:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80051e0:	4405      	add	r5, r0
 80051e2:	603d      	str	r5, [r7, #0]
 80051e4:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80051e8:	6030      	str	r0, [r6, #0]
 80051ea:	4620      	mov	r0, r4
 80051ec:	b003      	add	sp, #12
 80051ee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80051f2:	6161      	str	r1, [r4, #20]
 80051f4:	e7ea      	b.n	80051cc <__d2b+0x58>
 80051f6:	a801      	add	r0, sp, #4
 80051f8:	f7ff fd61 	bl	8004cbe <__lo0bits>
 80051fc:	9b01      	ldr	r3, [sp, #4]
 80051fe:	6163      	str	r3, [r4, #20]
 8005200:	3020      	adds	r0, #32
 8005202:	2201      	movs	r2, #1
 8005204:	e7e8      	b.n	80051d8 <__d2b+0x64>
 8005206:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800520a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800520e:	6038      	str	r0, [r7, #0]
 8005210:	6918      	ldr	r0, [r3, #16]
 8005212:	f7ff fd35 	bl	8004c80 <__hi0bits>
 8005216:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800521a:	e7e5      	b.n	80051e8 <__d2b+0x74>
 800521c:	08005ba4 	.word	0x08005ba4
 8005220:	08005bb5 	.word	0x08005bb5

08005224 <__sfputc_r>:
 8005224:	6893      	ldr	r3, [r2, #8]
 8005226:	3b01      	subs	r3, #1
 8005228:	2b00      	cmp	r3, #0
 800522a:	b410      	push	{r4}
 800522c:	6093      	str	r3, [r2, #8]
 800522e:	da08      	bge.n	8005242 <__sfputc_r+0x1e>
 8005230:	6994      	ldr	r4, [r2, #24]
 8005232:	42a3      	cmp	r3, r4
 8005234:	db01      	blt.n	800523a <__sfputc_r+0x16>
 8005236:	290a      	cmp	r1, #10
 8005238:	d103      	bne.n	8005242 <__sfputc_r+0x1e>
 800523a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800523e:	f000 ba13 	b.w	8005668 <__swbuf_r>
 8005242:	6813      	ldr	r3, [r2, #0]
 8005244:	1c58      	adds	r0, r3, #1
 8005246:	6010      	str	r0, [r2, #0]
 8005248:	7019      	strb	r1, [r3, #0]
 800524a:	4608      	mov	r0, r1
 800524c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005250:	4770      	bx	lr

08005252 <__sfputs_r>:
 8005252:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005254:	4606      	mov	r6, r0
 8005256:	460f      	mov	r7, r1
 8005258:	4614      	mov	r4, r2
 800525a:	18d5      	adds	r5, r2, r3
 800525c:	42ac      	cmp	r4, r5
 800525e:	d101      	bne.n	8005264 <__sfputs_r+0x12>
 8005260:	2000      	movs	r0, #0
 8005262:	e007      	b.n	8005274 <__sfputs_r+0x22>
 8005264:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005268:	463a      	mov	r2, r7
 800526a:	4630      	mov	r0, r6
 800526c:	f7ff ffda 	bl	8005224 <__sfputc_r>
 8005270:	1c43      	adds	r3, r0, #1
 8005272:	d1f3      	bne.n	800525c <__sfputs_r+0xa>
 8005274:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005278 <_vfiprintf_r>:
 8005278:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800527c:	460d      	mov	r5, r1
 800527e:	b09d      	sub	sp, #116	@ 0x74
 8005280:	4614      	mov	r4, r2
 8005282:	4698      	mov	r8, r3
 8005284:	4606      	mov	r6, r0
 8005286:	b118      	cbz	r0, 8005290 <_vfiprintf_r+0x18>
 8005288:	6a03      	ldr	r3, [r0, #32]
 800528a:	b90b      	cbnz	r3, 8005290 <_vfiprintf_r+0x18>
 800528c:	f7fe fbe4 	bl	8003a58 <__sinit>
 8005290:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005292:	07d9      	lsls	r1, r3, #31
 8005294:	d405      	bmi.n	80052a2 <_vfiprintf_r+0x2a>
 8005296:	89ab      	ldrh	r3, [r5, #12]
 8005298:	059a      	lsls	r2, r3, #22
 800529a:	d402      	bmi.n	80052a2 <_vfiprintf_r+0x2a>
 800529c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800529e:	f7fe fcec 	bl	8003c7a <__retarget_lock_acquire_recursive>
 80052a2:	89ab      	ldrh	r3, [r5, #12]
 80052a4:	071b      	lsls	r3, r3, #28
 80052a6:	d501      	bpl.n	80052ac <_vfiprintf_r+0x34>
 80052a8:	692b      	ldr	r3, [r5, #16]
 80052aa:	b99b      	cbnz	r3, 80052d4 <_vfiprintf_r+0x5c>
 80052ac:	4629      	mov	r1, r5
 80052ae:	4630      	mov	r0, r6
 80052b0:	f000 fa18 	bl	80056e4 <__swsetup_r>
 80052b4:	b170      	cbz	r0, 80052d4 <_vfiprintf_r+0x5c>
 80052b6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80052b8:	07dc      	lsls	r4, r3, #31
 80052ba:	d504      	bpl.n	80052c6 <_vfiprintf_r+0x4e>
 80052bc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80052c0:	b01d      	add	sp, #116	@ 0x74
 80052c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80052c6:	89ab      	ldrh	r3, [r5, #12]
 80052c8:	0598      	lsls	r0, r3, #22
 80052ca:	d4f7      	bmi.n	80052bc <_vfiprintf_r+0x44>
 80052cc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80052ce:	f7fe fcd5 	bl	8003c7c <__retarget_lock_release_recursive>
 80052d2:	e7f3      	b.n	80052bc <_vfiprintf_r+0x44>
 80052d4:	2300      	movs	r3, #0
 80052d6:	9309      	str	r3, [sp, #36]	@ 0x24
 80052d8:	2320      	movs	r3, #32
 80052da:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80052de:	f8cd 800c 	str.w	r8, [sp, #12]
 80052e2:	2330      	movs	r3, #48	@ 0x30
 80052e4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8005494 <_vfiprintf_r+0x21c>
 80052e8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80052ec:	f04f 0901 	mov.w	r9, #1
 80052f0:	4623      	mov	r3, r4
 80052f2:	469a      	mov	sl, r3
 80052f4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80052f8:	b10a      	cbz	r2, 80052fe <_vfiprintf_r+0x86>
 80052fa:	2a25      	cmp	r2, #37	@ 0x25
 80052fc:	d1f9      	bne.n	80052f2 <_vfiprintf_r+0x7a>
 80052fe:	ebba 0b04 	subs.w	fp, sl, r4
 8005302:	d00b      	beq.n	800531c <_vfiprintf_r+0xa4>
 8005304:	465b      	mov	r3, fp
 8005306:	4622      	mov	r2, r4
 8005308:	4629      	mov	r1, r5
 800530a:	4630      	mov	r0, r6
 800530c:	f7ff ffa1 	bl	8005252 <__sfputs_r>
 8005310:	3001      	adds	r0, #1
 8005312:	f000 80a7 	beq.w	8005464 <_vfiprintf_r+0x1ec>
 8005316:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005318:	445a      	add	r2, fp
 800531a:	9209      	str	r2, [sp, #36]	@ 0x24
 800531c:	f89a 3000 	ldrb.w	r3, [sl]
 8005320:	2b00      	cmp	r3, #0
 8005322:	f000 809f 	beq.w	8005464 <_vfiprintf_r+0x1ec>
 8005326:	2300      	movs	r3, #0
 8005328:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800532c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005330:	f10a 0a01 	add.w	sl, sl, #1
 8005334:	9304      	str	r3, [sp, #16]
 8005336:	9307      	str	r3, [sp, #28]
 8005338:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800533c:	931a      	str	r3, [sp, #104]	@ 0x68
 800533e:	4654      	mov	r4, sl
 8005340:	2205      	movs	r2, #5
 8005342:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005346:	4853      	ldr	r0, [pc, #332]	@ (8005494 <_vfiprintf_r+0x21c>)
 8005348:	f7fa ff4a 	bl	80001e0 <memchr>
 800534c:	9a04      	ldr	r2, [sp, #16]
 800534e:	b9d8      	cbnz	r0, 8005388 <_vfiprintf_r+0x110>
 8005350:	06d1      	lsls	r1, r2, #27
 8005352:	bf44      	itt	mi
 8005354:	2320      	movmi	r3, #32
 8005356:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800535a:	0713      	lsls	r3, r2, #28
 800535c:	bf44      	itt	mi
 800535e:	232b      	movmi	r3, #43	@ 0x2b
 8005360:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005364:	f89a 3000 	ldrb.w	r3, [sl]
 8005368:	2b2a      	cmp	r3, #42	@ 0x2a
 800536a:	d015      	beq.n	8005398 <_vfiprintf_r+0x120>
 800536c:	9a07      	ldr	r2, [sp, #28]
 800536e:	4654      	mov	r4, sl
 8005370:	2000      	movs	r0, #0
 8005372:	f04f 0c0a 	mov.w	ip, #10
 8005376:	4621      	mov	r1, r4
 8005378:	f811 3b01 	ldrb.w	r3, [r1], #1
 800537c:	3b30      	subs	r3, #48	@ 0x30
 800537e:	2b09      	cmp	r3, #9
 8005380:	d94b      	bls.n	800541a <_vfiprintf_r+0x1a2>
 8005382:	b1b0      	cbz	r0, 80053b2 <_vfiprintf_r+0x13a>
 8005384:	9207      	str	r2, [sp, #28]
 8005386:	e014      	b.n	80053b2 <_vfiprintf_r+0x13a>
 8005388:	eba0 0308 	sub.w	r3, r0, r8
 800538c:	fa09 f303 	lsl.w	r3, r9, r3
 8005390:	4313      	orrs	r3, r2
 8005392:	9304      	str	r3, [sp, #16]
 8005394:	46a2      	mov	sl, r4
 8005396:	e7d2      	b.n	800533e <_vfiprintf_r+0xc6>
 8005398:	9b03      	ldr	r3, [sp, #12]
 800539a:	1d19      	adds	r1, r3, #4
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	9103      	str	r1, [sp, #12]
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	bfbb      	ittet	lt
 80053a4:	425b      	neglt	r3, r3
 80053a6:	f042 0202 	orrlt.w	r2, r2, #2
 80053aa:	9307      	strge	r3, [sp, #28]
 80053ac:	9307      	strlt	r3, [sp, #28]
 80053ae:	bfb8      	it	lt
 80053b0:	9204      	strlt	r2, [sp, #16]
 80053b2:	7823      	ldrb	r3, [r4, #0]
 80053b4:	2b2e      	cmp	r3, #46	@ 0x2e
 80053b6:	d10a      	bne.n	80053ce <_vfiprintf_r+0x156>
 80053b8:	7863      	ldrb	r3, [r4, #1]
 80053ba:	2b2a      	cmp	r3, #42	@ 0x2a
 80053bc:	d132      	bne.n	8005424 <_vfiprintf_r+0x1ac>
 80053be:	9b03      	ldr	r3, [sp, #12]
 80053c0:	1d1a      	adds	r2, r3, #4
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	9203      	str	r2, [sp, #12]
 80053c6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80053ca:	3402      	adds	r4, #2
 80053cc:	9305      	str	r3, [sp, #20]
 80053ce:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80054a4 <_vfiprintf_r+0x22c>
 80053d2:	7821      	ldrb	r1, [r4, #0]
 80053d4:	2203      	movs	r2, #3
 80053d6:	4650      	mov	r0, sl
 80053d8:	f7fa ff02 	bl	80001e0 <memchr>
 80053dc:	b138      	cbz	r0, 80053ee <_vfiprintf_r+0x176>
 80053de:	9b04      	ldr	r3, [sp, #16]
 80053e0:	eba0 000a 	sub.w	r0, r0, sl
 80053e4:	2240      	movs	r2, #64	@ 0x40
 80053e6:	4082      	lsls	r2, r0
 80053e8:	4313      	orrs	r3, r2
 80053ea:	3401      	adds	r4, #1
 80053ec:	9304      	str	r3, [sp, #16]
 80053ee:	f814 1b01 	ldrb.w	r1, [r4], #1
 80053f2:	4829      	ldr	r0, [pc, #164]	@ (8005498 <_vfiprintf_r+0x220>)
 80053f4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80053f8:	2206      	movs	r2, #6
 80053fa:	f7fa fef1 	bl	80001e0 <memchr>
 80053fe:	2800      	cmp	r0, #0
 8005400:	d03f      	beq.n	8005482 <_vfiprintf_r+0x20a>
 8005402:	4b26      	ldr	r3, [pc, #152]	@ (800549c <_vfiprintf_r+0x224>)
 8005404:	bb1b      	cbnz	r3, 800544e <_vfiprintf_r+0x1d6>
 8005406:	9b03      	ldr	r3, [sp, #12]
 8005408:	3307      	adds	r3, #7
 800540a:	f023 0307 	bic.w	r3, r3, #7
 800540e:	3308      	adds	r3, #8
 8005410:	9303      	str	r3, [sp, #12]
 8005412:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005414:	443b      	add	r3, r7
 8005416:	9309      	str	r3, [sp, #36]	@ 0x24
 8005418:	e76a      	b.n	80052f0 <_vfiprintf_r+0x78>
 800541a:	fb0c 3202 	mla	r2, ip, r2, r3
 800541e:	460c      	mov	r4, r1
 8005420:	2001      	movs	r0, #1
 8005422:	e7a8      	b.n	8005376 <_vfiprintf_r+0xfe>
 8005424:	2300      	movs	r3, #0
 8005426:	3401      	adds	r4, #1
 8005428:	9305      	str	r3, [sp, #20]
 800542a:	4619      	mov	r1, r3
 800542c:	f04f 0c0a 	mov.w	ip, #10
 8005430:	4620      	mov	r0, r4
 8005432:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005436:	3a30      	subs	r2, #48	@ 0x30
 8005438:	2a09      	cmp	r2, #9
 800543a:	d903      	bls.n	8005444 <_vfiprintf_r+0x1cc>
 800543c:	2b00      	cmp	r3, #0
 800543e:	d0c6      	beq.n	80053ce <_vfiprintf_r+0x156>
 8005440:	9105      	str	r1, [sp, #20]
 8005442:	e7c4      	b.n	80053ce <_vfiprintf_r+0x156>
 8005444:	fb0c 2101 	mla	r1, ip, r1, r2
 8005448:	4604      	mov	r4, r0
 800544a:	2301      	movs	r3, #1
 800544c:	e7f0      	b.n	8005430 <_vfiprintf_r+0x1b8>
 800544e:	ab03      	add	r3, sp, #12
 8005450:	9300      	str	r3, [sp, #0]
 8005452:	462a      	mov	r2, r5
 8005454:	4b12      	ldr	r3, [pc, #72]	@ (80054a0 <_vfiprintf_r+0x228>)
 8005456:	a904      	add	r1, sp, #16
 8005458:	4630      	mov	r0, r6
 800545a:	f7fd febb 	bl	80031d4 <_printf_float>
 800545e:	4607      	mov	r7, r0
 8005460:	1c78      	adds	r0, r7, #1
 8005462:	d1d6      	bne.n	8005412 <_vfiprintf_r+0x19a>
 8005464:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005466:	07d9      	lsls	r1, r3, #31
 8005468:	d405      	bmi.n	8005476 <_vfiprintf_r+0x1fe>
 800546a:	89ab      	ldrh	r3, [r5, #12]
 800546c:	059a      	lsls	r2, r3, #22
 800546e:	d402      	bmi.n	8005476 <_vfiprintf_r+0x1fe>
 8005470:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005472:	f7fe fc03 	bl	8003c7c <__retarget_lock_release_recursive>
 8005476:	89ab      	ldrh	r3, [r5, #12]
 8005478:	065b      	lsls	r3, r3, #25
 800547a:	f53f af1f 	bmi.w	80052bc <_vfiprintf_r+0x44>
 800547e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005480:	e71e      	b.n	80052c0 <_vfiprintf_r+0x48>
 8005482:	ab03      	add	r3, sp, #12
 8005484:	9300      	str	r3, [sp, #0]
 8005486:	462a      	mov	r2, r5
 8005488:	4b05      	ldr	r3, [pc, #20]	@ (80054a0 <_vfiprintf_r+0x228>)
 800548a:	a904      	add	r1, sp, #16
 800548c:	4630      	mov	r0, r6
 800548e:	f7fe f939 	bl	8003704 <_printf_i>
 8005492:	e7e4      	b.n	800545e <_vfiprintf_r+0x1e6>
 8005494:	08005c0e 	.word	0x08005c0e
 8005498:	08005c18 	.word	0x08005c18
 800549c:	080031d5 	.word	0x080031d5
 80054a0:	08005253 	.word	0x08005253
 80054a4:	08005c14 	.word	0x08005c14

080054a8 <__sflush_r>:
 80054a8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80054ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80054b0:	0716      	lsls	r6, r2, #28
 80054b2:	4605      	mov	r5, r0
 80054b4:	460c      	mov	r4, r1
 80054b6:	d454      	bmi.n	8005562 <__sflush_r+0xba>
 80054b8:	684b      	ldr	r3, [r1, #4]
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	dc02      	bgt.n	80054c4 <__sflush_r+0x1c>
 80054be:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	dd48      	ble.n	8005556 <__sflush_r+0xae>
 80054c4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80054c6:	2e00      	cmp	r6, #0
 80054c8:	d045      	beq.n	8005556 <__sflush_r+0xae>
 80054ca:	2300      	movs	r3, #0
 80054cc:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80054d0:	682f      	ldr	r7, [r5, #0]
 80054d2:	6a21      	ldr	r1, [r4, #32]
 80054d4:	602b      	str	r3, [r5, #0]
 80054d6:	d030      	beq.n	800553a <__sflush_r+0x92>
 80054d8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80054da:	89a3      	ldrh	r3, [r4, #12]
 80054dc:	0759      	lsls	r1, r3, #29
 80054de:	d505      	bpl.n	80054ec <__sflush_r+0x44>
 80054e0:	6863      	ldr	r3, [r4, #4]
 80054e2:	1ad2      	subs	r2, r2, r3
 80054e4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80054e6:	b10b      	cbz	r3, 80054ec <__sflush_r+0x44>
 80054e8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80054ea:	1ad2      	subs	r2, r2, r3
 80054ec:	2300      	movs	r3, #0
 80054ee:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80054f0:	6a21      	ldr	r1, [r4, #32]
 80054f2:	4628      	mov	r0, r5
 80054f4:	47b0      	blx	r6
 80054f6:	1c43      	adds	r3, r0, #1
 80054f8:	89a3      	ldrh	r3, [r4, #12]
 80054fa:	d106      	bne.n	800550a <__sflush_r+0x62>
 80054fc:	6829      	ldr	r1, [r5, #0]
 80054fe:	291d      	cmp	r1, #29
 8005500:	d82b      	bhi.n	800555a <__sflush_r+0xb2>
 8005502:	4a2a      	ldr	r2, [pc, #168]	@ (80055ac <__sflush_r+0x104>)
 8005504:	40ca      	lsrs	r2, r1
 8005506:	07d6      	lsls	r6, r2, #31
 8005508:	d527      	bpl.n	800555a <__sflush_r+0xb2>
 800550a:	2200      	movs	r2, #0
 800550c:	6062      	str	r2, [r4, #4]
 800550e:	04d9      	lsls	r1, r3, #19
 8005510:	6922      	ldr	r2, [r4, #16]
 8005512:	6022      	str	r2, [r4, #0]
 8005514:	d504      	bpl.n	8005520 <__sflush_r+0x78>
 8005516:	1c42      	adds	r2, r0, #1
 8005518:	d101      	bne.n	800551e <__sflush_r+0x76>
 800551a:	682b      	ldr	r3, [r5, #0]
 800551c:	b903      	cbnz	r3, 8005520 <__sflush_r+0x78>
 800551e:	6560      	str	r0, [r4, #84]	@ 0x54
 8005520:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005522:	602f      	str	r7, [r5, #0]
 8005524:	b1b9      	cbz	r1, 8005556 <__sflush_r+0xae>
 8005526:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800552a:	4299      	cmp	r1, r3
 800552c:	d002      	beq.n	8005534 <__sflush_r+0x8c>
 800552e:	4628      	mov	r0, r5
 8005530:	f7ff f9fe 	bl	8004930 <_free_r>
 8005534:	2300      	movs	r3, #0
 8005536:	6363      	str	r3, [r4, #52]	@ 0x34
 8005538:	e00d      	b.n	8005556 <__sflush_r+0xae>
 800553a:	2301      	movs	r3, #1
 800553c:	4628      	mov	r0, r5
 800553e:	47b0      	blx	r6
 8005540:	4602      	mov	r2, r0
 8005542:	1c50      	adds	r0, r2, #1
 8005544:	d1c9      	bne.n	80054da <__sflush_r+0x32>
 8005546:	682b      	ldr	r3, [r5, #0]
 8005548:	2b00      	cmp	r3, #0
 800554a:	d0c6      	beq.n	80054da <__sflush_r+0x32>
 800554c:	2b1d      	cmp	r3, #29
 800554e:	d001      	beq.n	8005554 <__sflush_r+0xac>
 8005550:	2b16      	cmp	r3, #22
 8005552:	d11e      	bne.n	8005592 <__sflush_r+0xea>
 8005554:	602f      	str	r7, [r5, #0]
 8005556:	2000      	movs	r0, #0
 8005558:	e022      	b.n	80055a0 <__sflush_r+0xf8>
 800555a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800555e:	b21b      	sxth	r3, r3
 8005560:	e01b      	b.n	800559a <__sflush_r+0xf2>
 8005562:	690f      	ldr	r7, [r1, #16]
 8005564:	2f00      	cmp	r7, #0
 8005566:	d0f6      	beq.n	8005556 <__sflush_r+0xae>
 8005568:	0793      	lsls	r3, r2, #30
 800556a:	680e      	ldr	r6, [r1, #0]
 800556c:	bf08      	it	eq
 800556e:	694b      	ldreq	r3, [r1, #20]
 8005570:	600f      	str	r7, [r1, #0]
 8005572:	bf18      	it	ne
 8005574:	2300      	movne	r3, #0
 8005576:	eba6 0807 	sub.w	r8, r6, r7
 800557a:	608b      	str	r3, [r1, #8]
 800557c:	f1b8 0f00 	cmp.w	r8, #0
 8005580:	dde9      	ble.n	8005556 <__sflush_r+0xae>
 8005582:	6a21      	ldr	r1, [r4, #32]
 8005584:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8005586:	4643      	mov	r3, r8
 8005588:	463a      	mov	r2, r7
 800558a:	4628      	mov	r0, r5
 800558c:	47b0      	blx	r6
 800558e:	2800      	cmp	r0, #0
 8005590:	dc08      	bgt.n	80055a4 <__sflush_r+0xfc>
 8005592:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005596:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800559a:	81a3      	strh	r3, [r4, #12]
 800559c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80055a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80055a4:	4407      	add	r7, r0
 80055a6:	eba8 0800 	sub.w	r8, r8, r0
 80055aa:	e7e7      	b.n	800557c <__sflush_r+0xd4>
 80055ac:	20400001 	.word	0x20400001

080055b0 <_fflush_r>:
 80055b0:	b538      	push	{r3, r4, r5, lr}
 80055b2:	690b      	ldr	r3, [r1, #16]
 80055b4:	4605      	mov	r5, r0
 80055b6:	460c      	mov	r4, r1
 80055b8:	b913      	cbnz	r3, 80055c0 <_fflush_r+0x10>
 80055ba:	2500      	movs	r5, #0
 80055bc:	4628      	mov	r0, r5
 80055be:	bd38      	pop	{r3, r4, r5, pc}
 80055c0:	b118      	cbz	r0, 80055ca <_fflush_r+0x1a>
 80055c2:	6a03      	ldr	r3, [r0, #32]
 80055c4:	b90b      	cbnz	r3, 80055ca <_fflush_r+0x1a>
 80055c6:	f7fe fa47 	bl	8003a58 <__sinit>
 80055ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d0f3      	beq.n	80055ba <_fflush_r+0xa>
 80055d2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80055d4:	07d0      	lsls	r0, r2, #31
 80055d6:	d404      	bmi.n	80055e2 <_fflush_r+0x32>
 80055d8:	0599      	lsls	r1, r3, #22
 80055da:	d402      	bmi.n	80055e2 <_fflush_r+0x32>
 80055dc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80055de:	f7fe fb4c 	bl	8003c7a <__retarget_lock_acquire_recursive>
 80055e2:	4628      	mov	r0, r5
 80055e4:	4621      	mov	r1, r4
 80055e6:	f7ff ff5f 	bl	80054a8 <__sflush_r>
 80055ea:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80055ec:	07da      	lsls	r2, r3, #31
 80055ee:	4605      	mov	r5, r0
 80055f0:	d4e4      	bmi.n	80055bc <_fflush_r+0xc>
 80055f2:	89a3      	ldrh	r3, [r4, #12]
 80055f4:	059b      	lsls	r3, r3, #22
 80055f6:	d4e1      	bmi.n	80055bc <_fflush_r+0xc>
 80055f8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80055fa:	f7fe fb3f 	bl	8003c7c <__retarget_lock_release_recursive>
 80055fe:	e7dd      	b.n	80055bc <_fflush_r+0xc>

08005600 <_putc_r>:
 8005600:	b570      	push	{r4, r5, r6, lr}
 8005602:	460d      	mov	r5, r1
 8005604:	4614      	mov	r4, r2
 8005606:	4606      	mov	r6, r0
 8005608:	b118      	cbz	r0, 8005612 <_putc_r+0x12>
 800560a:	6a03      	ldr	r3, [r0, #32]
 800560c:	b90b      	cbnz	r3, 8005612 <_putc_r+0x12>
 800560e:	f7fe fa23 	bl	8003a58 <__sinit>
 8005612:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005614:	07d8      	lsls	r0, r3, #31
 8005616:	d405      	bmi.n	8005624 <_putc_r+0x24>
 8005618:	89a3      	ldrh	r3, [r4, #12]
 800561a:	0599      	lsls	r1, r3, #22
 800561c:	d402      	bmi.n	8005624 <_putc_r+0x24>
 800561e:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005620:	f7fe fb2b 	bl	8003c7a <__retarget_lock_acquire_recursive>
 8005624:	68a3      	ldr	r3, [r4, #8]
 8005626:	3b01      	subs	r3, #1
 8005628:	2b00      	cmp	r3, #0
 800562a:	60a3      	str	r3, [r4, #8]
 800562c:	da05      	bge.n	800563a <_putc_r+0x3a>
 800562e:	69a2      	ldr	r2, [r4, #24]
 8005630:	4293      	cmp	r3, r2
 8005632:	db12      	blt.n	800565a <_putc_r+0x5a>
 8005634:	b2eb      	uxtb	r3, r5
 8005636:	2b0a      	cmp	r3, #10
 8005638:	d00f      	beq.n	800565a <_putc_r+0x5a>
 800563a:	6823      	ldr	r3, [r4, #0]
 800563c:	1c5a      	adds	r2, r3, #1
 800563e:	6022      	str	r2, [r4, #0]
 8005640:	701d      	strb	r5, [r3, #0]
 8005642:	b2ed      	uxtb	r5, r5
 8005644:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005646:	07da      	lsls	r2, r3, #31
 8005648:	d405      	bmi.n	8005656 <_putc_r+0x56>
 800564a:	89a3      	ldrh	r3, [r4, #12]
 800564c:	059b      	lsls	r3, r3, #22
 800564e:	d402      	bmi.n	8005656 <_putc_r+0x56>
 8005650:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005652:	f7fe fb13 	bl	8003c7c <__retarget_lock_release_recursive>
 8005656:	4628      	mov	r0, r5
 8005658:	bd70      	pop	{r4, r5, r6, pc}
 800565a:	4629      	mov	r1, r5
 800565c:	4622      	mov	r2, r4
 800565e:	4630      	mov	r0, r6
 8005660:	f000 f802 	bl	8005668 <__swbuf_r>
 8005664:	4605      	mov	r5, r0
 8005666:	e7ed      	b.n	8005644 <_putc_r+0x44>

08005668 <__swbuf_r>:
 8005668:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800566a:	460e      	mov	r6, r1
 800566c:	4614      	mov	r4, r2
 800566e:	4605      	mov	r5, r0
 8005670:	b118      	cbz	r0, 800567a <__swbuf_r+0x12>
 8005672:	6a03      	ldr	r3, [r0, #32]
 8005674:	b90b      	cbnz	r3, 800567a <__swbuf_r+0x12>
 8005676:	f7fe f9ef 	bl	8003a58 <__sinit>
 800567a:	69a3      	ldr	r3, [r4, #24]
 800567c:	60a3      	str	r3, [r4, #8]
 800567e:	89a3      	ldrh	r3, [r4, #12]
 8005680:	071a      	lsls	r2, r3, #28
 8005682:	d501      	bpl.n	8005688 <__swbuf_r+0x20>
 8005684:	6923      	ldr	r3, [r4, #16]
 8005686:	b943      	cbnz	r3, 800569a <__swbuf_r+0x32>
 8005688:	4621      	mov	r1, r4
 800568a:	4628      	mov	r0, r5
 800568c:	f000 f82a 	bl	80056e4 <__swsetup_r>
 8005690:	b118      	cbz	r0, 800569a <__swbuf_r+0x32>
 8005692:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8005696:	4638      	mov	r0, r7
 8005698:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800569a:	6823      	ldr	r3, [r4, #0]
 800569c:	6922      	ldr	r2, [r4, #16]
 800569e:	1a98      	subs	r0, r3, r2
 80056a0:	6963      	ldr	r3, [r4, #20]
 80056a2:	b2f6      	uxtb	r6, r6
 80056a4:	4283      	cmp	r3, r0
 80056a6:	4637      	mov	r7, r6
 80056a8:	dc05      	bgt.n	80056b6 <__swbuf_r+0x4e>
 80056aa:	4621      	mov	r1, r4
 80056ac:	4628      	mov	r0, r5
 80056ae:	f7ff ff7f 	bl	80055b0 <_fflush_r>
 80056b2:	2800      	cmp	r0, #0
 80056b4:	d1ed      	bne.n	8005692 <__swbuf_r+0x2a>
 80056b6:	68a3      	ldr	r3, [r4, #8]
 80056b8:	3b01      	subs	r3, #1
 80056ba:	60a3      	str	r3, [r4, #8]
 80056bc:	6823      	ldr	r3, [r4, #0]
 80056be:	1c5a      	adds	r2, r3, #1
 80056c0:	6022      	str	r2, [r4, #0]
 80056c2:	701e      	strb	r6, [r3, #0]
 80056c4:	6962      	ldr	r2, [r4, #20]
 80056c6:	1c43      	adds	r3, r0, #1
 80056c8:	429a      	cmp	r2, r3
 80056ca:	d004      	beq.n	80056d6 <__swbuf_r+0x6e>
 80056cc:	89a3      	ldrh	r3, [r4, #12]
 80056ce:	07db      	lsls	r3, r3, #31
 80056d0:	d5e1      	bpl.n	8005696 <__swbuf_r+0x2e>
 80056d2:	2e0a      	cmp	r6, #10
 80056d4:	d1df      	bne.n	8005696 <__swbuf_r+0x2e>
 80056d6:	4621      	mov	r1, r4
 80056d8:	4628      	mov	r0, r5
 80056da:	f7ff ff69 	bl	80055b0 <_fflush_r>
 80056de:	2800      	cmp	r0, #0
 80056e0:	d0d9      	beq.n	8005696 <__swbuf_r+0x2e>
 80056e2:	e7d6      	b.n	8005692 <__swbuf_r+0x2a>

080056e4 <__swsetup_r>:
 80056e4:	b538      	push	{r3, r4, r5, lr}
 80056e6:	4b29      	ldr	r3, [pc, #164]	@ (800578c <__swsetup_r+0xa8>)
 80056e8:	4605      	mov	r5, r0
 80056ea:	6818      	ldr	r0, [r3, #0]
 80056ec:	460c      	mov	r4, r1
 80056ee:	b118      	cbz	r0, 80056f8 <__swsetup_r+0x14>
 80056f0:	6a03      	ldr	r3, [r0, #32]
 80056f2:	b90b      	cbnz	r3, 80056f8 <__swsetup_r+0x14>
 80056f4:	f7fe f9b0 	bl	8003a58 <__sinit>
 80056f8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80056fc:	0719      	lsls	r1, r3, #28
 80056fe:	d422      	bmi.n	8005746 <__swsetup_r+0x62>
 8005700:	06da      	lsls	r2, r3, #27
 8005702:	d407      	bmi.n	8005714 <__swsetup_r+0x30>
 8005704:	2209      	movs	r2, #9
 8005706:	602a      	str	r2, [r5, #0]
 8005708:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800570c:	81a3      	strh	r3, [r4, #12]
 800570e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005712:	e033      	b.n	800577c <__swsetup_r+0x98>
 8005714:	0758      	lsls	r0, r3, #29
 8005716:	d512      	bpl.n	800573e <__swsetup_r+0x5a>
 8005718:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800571a:	b141      	cbz	r1, 800572e <__swsetup_r+0x4a>
 800571c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005720:	4299      	cmp	r1, r3
 8005722:	d002      	beq.n	800572a <__swsetup_r+0x46>
 8005724:	4628      	mov	r0, r5
 8005726:	f7ff f903 	bl	8004930 <_free_r>
 800572a:	2300      	movs	r3, #0
 800572c:	6363      	str	r3, [r4, #52]	@ 0x34
 800572e:	89a3      	ldrh	r3, [r4, #12]
 8005730:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8005734:	81a3      	strh	r3, [r4, #12]
 8005736:	2300      	movs	r3, #0
 8005738:	6063      	str	r3, [r4, #4]
 800573a:	6923      	ldr	r3, [r4, #16]
 800573c:	6023      	str	r3, [r4, #0]
 800573e:	89a3      	ldrh	r3, [r4, #12]
 8005740:	f043 0308 	orr.w	r3, r3, #8
 8005744:	81a3      	strh	r3, [r4, #12]
 8005746:	6923      	ldr	r3, [r4, #16]
 8005748:	b94b      	cbnz	r3, 800575e <__swsetup_r+0x7a>
 800574a:	89a3      	ldrh	r3, [r4, #12]
 800574c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8005750:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005754:	d003      	beq.n	800575e <__swsetup_r+0x7a>
 8005756:	4621      	mov	r1, r4
 8005758:	4628      	mov	r0, r5
 800575a:	f000 f8c1 	bl	80058e0 <__smakebuf_r>
 800575e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005762:	f013 0201 	ands.w	r2, r3, #1
 8005766:	d00a      	beq.n	800577e <__swsetup_r+0x9a>
 8005768:	2200      	movs	r2, #0
 800576a:	60a2      	str	r2, [r4, #8]
 800576c:	6962      	ldr	r2, [r4, #20]
 800576e:	4252      	negs	r2, r2
 8005770:	61a2      	str	r2, [r4, #24]
 8005772:	6922      	ldr	r2, [r4, #16]
 8005774:	b942      	cbnz	r2, 8005788 <__swsetup_r+0xa4>
 8005776:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800577a:	d1c5      	bne.n	8005708 <__swsetup_r+0x24>
 800577c:	bd38      	pop	{r3, r4, r5, pc}
 800577e:	0799      	lsls	r1, r3, #30
 8005780:	bf58      	it	pl
 8005782:	6962      	ldrpl	r2, [r4, #20]
 8005784:	60a2      	str	r2, [r4, #8]
 8005786:	e7f4      	b.n	8005772 <__swsetup_r+0x8e>
 8005788:	2000      	movs	r0, #0
 800578a:	e7f7      	b.n	800577c <__swsetup_r+0x98>
 800578c:	20000120 	.word	0x20000120

08005790 <_sbrk_r>:
 8005790:	b538      	push	{r3, r4, r5, lr}
 8005792:	4d06      	ldr	r5, [pc, #24]	@ (80057ac <_sbrk_r+0x1c>)
 8005794:	2300      	movs	r3, #0
 8005796:	4604      	mov	r4, r0
 8005798:	4608      	mov	r0, r1
 800579a:	602b      	str	r3, [r5, #0]
 800579c:	f7fb fefc 	bl	8001598 <_sbrk>
 80057a0:	1c43      	adds	r3, r0, #1
 80057a2:	d102      	bne.n	80057aa <_sbrk_r+0x1a>
 80057a4:	682b      	ldr	r3, [r5, #0]
 80057a6:	b103      	cbz	r3, 80057aa <_sbrk_r+0x1a>
 80057a8:	6023      	str	r3, [r4, #0]
 80057aa:	bd38      	pop	{r3, r4, r5, pc}
 80057ac:	20000524 	.word	0x20000524

080057b0 <memcpy>:
 80057b0:	440a      	add	r2, r1
 80057b2:	4291      	cmp	r1, r2
 80057b4:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 80057b8:	d100      	bne.n	80057bc <memcpy+0xc>
 80057ba:	4770      	bx	lr
 80057bc:	b510      	push	{r4, lr}
 80057be:	f811 4b01 	ldrb.w	r4, [r1], #1
 80057c2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80057c6:	4291      	cmp	r1, r2
 80057c8:	d1f9      	bne.n	80057be <memcpy+0xe>
 80057ca:	bd10      	pop	{r4, pc}

080057cc <__assert_func>:
 80057cc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80057ce:	4614      	mov	r4, r2
 80057d0:	461a      	mov	r2, r3
 80057d2:	4b09      	ldr	r3, [pc, #36]	@ (80057f8 <__assert_func+0x2c>)
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	4605      	mov	r5, r0
 80057d8:	68d8      	ldr	r0, [r3, #12]
 80057da:	b14c      	cbz	r4, 80057f0 <__assert_func+0x24>
 80057dc:	4b07      	ldr	r3, [pc, #28]	@ (80057fc <__assert_func+0x30>)
 80057de:	9100      	str	r1, [sp, #0]
 80057e0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80057e4:	4906      	ldr	r1, [pc, #24]	@ (8005800 <__assert_func+0x34>)
 80057e6:	462b      	mov	r3, r5
 80057e8:	f000 f842 	bl	8005870 <fiprintf>
 80057ec:	f000 f8d6 	bl	800599c <abort>
 80057f0:	4b04      	ldr	r3, [pc, #16]	@ (8005804 <__assert_func+0x38>)
 80057f2:	461c      	mov	r4, r3
 80057f4:	e7f3      	b.n	80057de <__assert_func+0x12>
 80057f6:	bf00      	nop
 80057f8:	20000120 	.word	0x20000120
 80057fc:	08005c29 	.word	0x08005c29
 8005800:	08005c36 	.word	0x08005c36
 8005804:	08005c64 	.word	0x08005c64

08005808 <_calloc_r>:
 8005808:	b570      	push	{r4, r5, r6, lr}
 800580a:	fba1 5402 	umull	r5, r4, r1, r2
 800580e:	b934      	cbnz	r4, 800581e <_calloc_r+0x16>
 8005810:	4629      	mov	r1, r5
 8005812:	f7ff f901 	bl	8004a18 <_malloc_r>
 8005816:	4606      	mov	r6, r0
 8005818:	b928      	cbnz	r0, 8005826 <_calloc_r+0x1e>
 800581a:	4630      	mov	r0, r6
 800581c:	bd70      	pop	{r4, r5, r6, pc}
 800581e:	220c      	movs	r2, #12
 8005820:	6002      	str	r2, [r0, #0]
 8005822:	2600      	movs	r6, #0
 8005824:	e7f9      	b.n	800581a <_calloc_r+0x12>
 8005826:	462a      	mov	r2, r5
 8005828:	4621      	mov	r1, r4
 800582a:	f7fe f9a8 	bl	8003b7e <memset>
 800582e:	e7f4      	b.n	800581a <_calloc_r+0x12>

08005830 <__ascii_mbtowc>:
 8005830:	b082      	sub	sp, #8
 8005832:	b901      	cbnz	r1, 8005836 <__ascii_mbtowc+0x6>
 8005834:	a901      	add	r1, sp, #4
 8005836:	b142      	cbz	r2, 800584a <__ascii_mbtowc+0x1a>
 8005838:	b14b      	cbz	r3, 800584e <__ascii_mbtowc+0x1e>
 800583a:	7813      	ldrb	r3, [r2, #0]
 800583c:	600b      	str	r3, [r1, #0]
 800583e:	7812      	ldrb	r2, [r2, #0]
 8005840:	1e10      	subs	r0, r2, #0
 8005842:	bf18      	it	ne
 8005844:	2001      	movne	r0, #1
 8005846:	b002      	add	sp, #8
 8005848:	4770      	bx	lr
 800584a:	4610      	mov	r0, r2
 800584c:	e7fb      	b.n	8005846 <__ascii_mbtowc+0x16>
 800584e:	f06f 0001 	mvn.w	r0, #1
 8005852:	e7f8      	b.n	8005846 <__ascii_mbtowc+0x16>

08005854 <__ascii_wctomb>:
 8005854:	4603      	mov	r3, r0
 8005856:	4608      	mov	r0, r1
 8005858:	b141      	cbz	r1, 800586c <__ascii_wctomb+0x18>
 800585a:	2aff      	cmp	r2, #255	@ 0xff
 800585c:	d904      	bls.n	8005868 <__ascii_wctomb+0x14>
 800585e:	228a      	movs	r2, #138	@ 0x8a
 8005860:	601a      	str	r2, [r3, #0]
 8005862:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005866:	4770      	bx	lr
 8005868:	700a      	strb	r2, [r1, #0]
 800586a:	2001      	movs	r0, #1
 800586c:	4770      	bx	lr
	...

08005870 <fiprintf>:
 8005870:	b40e      	push	{r1, r2, r3}
 8005872:	b503      	push	{r0, r1, lr}
 8005874:	4601      	mov	r1, r0
 8005876:	ab03      	add	r3, sp, #12
 8005878:	4805      	ldr	r0, [pc, #20]	@ (8005890 <fiprintf+0x20>)
 800587a:	f853 2b04 	ldr.w	r2, [r3], #4
 800587e:	6800      	ldr	r0, [r0, #0]
 8005880:	9301      	str	r3, [sp, #4]
 8005882:	f7ff fcf9 	bl	8005278 <_vfiprintf_r>
 8005886:	b002      	add	sp, #8
 8005888:	f85d eb04 	ldr.w	lr, [sp], #4
 800588c:	b003      	add	sp, #12
 800588e:	4770      	bx	lr
 8005890:	20000120 	.word	0x20000120

08005894 <__swhatbuf_r>:
 8005894:	b570      	push	{r4, r5, r6, lr}
 8005896:	460c      	mov	r4, r1
 8005898:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800589c:	2900      	cmp	r1, #0
 800589e:	b096      	sub	sp, #88	@ 0x58
 80058a0:	4615      	mov	r5, r2
 80058a2:	461e      	mov	r6, r3
 80058a4:	da0d      	bge.n	80058c2 <__swhatbuf_r+0x2e>
 80058a6:	89a3      	ldrh	r3, [r4, #12]
 80058a8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80058ac:	f04f 0100 	mov.w	r1, #0
 80058b0:	bf14      	ite	ne
 80058b2:	2340      	movne	r3, #64	@ 0x40
 80058b4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80058b8:	2000      	movs	r0, #0
 80058ba:	6031      	str	r1, [r6, #0]
 80058bc:	602b      	str	r3, [r5, #0]
 80058be:	b016      	add	sp, #88	@ 0x58
 80058c0:	bd70      	pop	{r4, r5, r6, pc}
 80058c2:	466a      	mov	r2, sp
 80058c4:	f000 f848 	bl	8005958 <_fstat_r>
 80058c8:	2800      	cmp	r0, #0
 80058ca:	dbec      	blt.n	80058a6 <__swhatbuf_r+0x12>
 80058cc:	9901      	ldr	r1, [sp, #4]
 80058ce:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80058d2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80058d6:	4259      	negs	r1, r3
 80058d8:	4159      	adcs	r1, r3
 80058da:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80058de:	e7eb      	b.n	80058b8 <__swhatbuf_r+0x24>

080058e0 <__smakebuf_r>:
 80058e0:	898b      	ldrh	r3, [r1, #12]
 80058e2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80058e4:	079d      	lsls	r5, r3, #30
 80058e6:	4606      	mov	r6, r0
 80058e8:	460c      	mov	r4, r1
 80058ea:	d507      	bpl.n	80058fc <__smakebuf_r+0x1c>
 80058ec:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80058f0:	6023      	str	r3, [r4, #0]
 80058f2:	6123      	str	r3, [r4, #16]
 80058f4:	2301      	movs	r3, #1
 80058f6:	6163      	str	r3, [r4, #20]
 80058f8:	b003      	add	sp, #12
 80058fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80058fc:	ab01      	add	r3, sp, #4
 80058fe:	466a      	mov	r2, sp
 8005900:	f7ff ffc8 	bl	8005894 <__swhatbuf_r>
 8005904:	9f00      	ldr	r7, [sp, #0]
 8005906:	4605      	mov	r5, r0
 8005908:	4639      	mov	r1, r7
 800590a:	4630      	mov	r0, r6
 800590c:	f7ff f884 	bl	8004a18 <_malloc_r>
 8005910:	b948      	cbnz	r0, 8005926 <__smakebuf_r+0x46>
 8005912:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005916:	059a      	lsls	r2, r3, #22
 8005918:	d4ee      	bmi.n	80058f8 <__smakebuf_r+0x18>
 800591a:	f023 0303 	bic.w	r3, r3, #3
 800591e:	f043 0302 	orr.w	r3, r3, #2
 8005922:	81a3      	strh	r3, [r4, #12]
 8005924:	e7e2      	b.n	80058ec <__smakebuf_r+0xc>
 8005926:	89a3      	ldrh	r3, [r4, #12]
 8005928:	6020      	str	r0, [r4, #0]
 800592a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800592e:	81a3      	strh	r3, [r4, #12]
 8005930:	9b01      	ldr	r3, [sp, #4]
 8005932:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8005936:	b15b      	cbz	r3, 8005950 <__smakebuf_r+0x70>
 8005938:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800593c:	4630      	mov	r0, r6
 800593e:	f000 f81d 	bl	800597c <_isatty_r>
 8005942:	b128      	cbz	r0, 8005950 <__smakebuf_r+0x70>
 8005944:	89a3      	ldrh	r3, [r4, #12]
 8005946:	f023 0303 	bic.w	r3, r3, #3
 800594a:	f043 0301 	orr.w	r3, r3, #1
 800594e:	81a3      	strh	r3, [r4, #12]
 8005950:	89a3      	ldrh	r3, [r4, #12]
 8005952:	431d      	orrs	r5, r3
 8005954:	81a5      	strh	r5, [r4, #12]
 8005956:	e7cf      	b.n	80058f8 <__smakebuf_r+0x18>

08005958 <_fstat_r>:
 8005958:	b538      	push	{r3, r4, r5, lr}
 800595a:	4d07      	ldr	r5, [pc, #28]	@ (8005978 <_fstat_r+0x20>)
 800595c:	2300      	movs	r3, #0
 800595e:	4604      	mov	r4, r0
 8005960:	4608      	mov	r0, r1
 8005962:	4611      	mov	r1, r2
 8005964:	602b      	str	r3, [r5, #0]
 8005966:	f7fb fe0d 	bl	8001584 <_fstat>
 800596a:	1c43      	adds	r3, r0, #1
 800596c:	d102      	bne.n	8005974 <_fstat_r+0x1c>
 800596e:	682b      	ldr	r3, [r5, #0]
 8005970:	b103      	cbz	r3, 8005974 <_fstat_r+0x1c>
 8005972:	6023      	str	r3, [r4, #0]
 8005974:	bd38      	pop	{r3, r4, r5, pc}
 8005976:	bf00      	nop
 8005978:	20000524 	.word	0x20000524

0800597c <_isatty_r>:
 800597c:	b538      	push	{r3, r4, r5, lr}
 800597e:	4d06      	ldr	r5, [pc, #24]	@ (8005998 <_isatty_r+0x1c>)
 8005980:	2300      	movs	r3, #0
 8005982:	4604      	mov	r4, r0
 8005984:	4608      	mov	r0, r1
 8005986:	602b      	str	r3, [r5, #0]
 8005988:	f7fb fe02 	bl	8001590 <_isatty>
 800598c:	1c43      	adds	r3, r0, #1
 800598e:	d102      	bne.n	8005996 <_isatty_r+0x1a>
 8005990:	682b      	ldr	r3, [r5, #0]
 8005992:	b103      	cbz	r3, 8005996 <_isatty_r+0x1a>
 8005994:	6023      	str	r3, [r4, #0]
 8005996:	bd38      	pop	{r3, r4, r5, pc}
 8005998:	20000524 	.word	0x20000524

0800599c <abort>:
 800599c:	b508      	push	{r3, lr}
 800599e:	2006      	movs	r0, #6
 80059a0:	f000 f82c 	bl	80059fc <raise>
 80059a4:	2001      	movs	r0, #1
 80059a6:	f7fb fdd5 	bl	8001554 <_exit>

080059aa <_raise_r>:
 80059aa:	291f      	cmp	r1, #31
 80059ac:	b538      	push	{r3, r4, r5, lr}
 80059ae:	4605      	mov	r5, r0
 80059b0:	460c      	mov	r4, r1
 80059b2:	d904      	bls.n	80059be <_raise_r+0x14>
 80059b4:	2316      	movs	r3, #22
 80059b6:	6003      	str	r3, [r0, #0]
 80059b8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80059bc:	bd38      	pop	{r3, r4, r5, pc}
 80059be:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80059c0:	b112      	cbz	r2, 80059c8 <_raise_r+0x1e>
 80059c2:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80059c6:	b94b      	cbnz	r3, 80059dc <_raise_r+0x32>
 80059c8:	4628      	mov	r0, r5
 80059ca:	f000 f831 	bl	8005a30 <_getpid_r>
 80059ce:	4622      	mov	r2, r4
 80059d0:	4601      	mov	r1, r0
 80059d2:	4628      	mov	r0, r5
 80059d4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80059d8:	f000 b818 	b.w	8005a0c <_kill_r>
 80059dc:	2b01      	cmp	r3, #1
 80059de:	d00a      	beq.n	80059f6 <_raise_r+0x4c>
 80059e0:	1c59      	adds	r1, r3, #1
 80059e2:	d103      	bne.n	80059ec <_raise_r+0x42>
 80059e4:	2316      	movs	r3, #22
 80059e6:	6003      	str	r3, [r0, #0]
 80059e8:	2001      	movs	r0, #1
 80059ea:	e7e7      	b.n	80059bc <_raise_r+0x12>
 80059ec:	2100      	movs	r1, #0
 80059ee:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80059f2:	4620      	mov	r0, r4
 80059f4:	4798      	blx	r3
 80059f6:	2000      	movs	r0, #0
 80059f8:	e7e0      	b.n	80059bc <_raise_r+0x12>
	...

080059fc <raise>:
 80059fc:	4b02      	ldr	r3, [pc, #8]	@ (8005a08 <raise+0xc>)
 80059fe:	4601      	mov	r1, r0
 8005a00:	6818      	ldr	r0, [r3, #0]
 8005a02:	f7ff bfd2 	b.w	80059aa <_raise_r>
 8005a06:	bf00      	nop
 8005a08:	20000120 	.word	0x20000120

08005a0c <_kill_r>:
 8005a0c:	b538      	push	{r3, r4, r5, lr}
 8005a0e:	4d07      	ldr	r5, [pc, #28]	@ (8005a2c <_kill_r+0x20>)
 8005a10:	2300      	movs	r3, #0
 8005a12:	4604      	mov	r4, r0
 8005a14:	4608      	mov	r0, r1
 8005a16:	4611      	mov	r1, r2
 8005a18:	602b      	str	r3, [r5, #0]
 8005a1a:	f7fb fd93 	bl	8001544 <_kill>
 8005a1e:	1c43      	adds	r3, r0, #1
 8005a20:	d102      	bne.n	8005a28 <_kill_r+0x1c>
 8005a22:	682b      	ldr	r3, [r5, #0]
 8005a24:	b103      	cbz	r3, 8005a28 <_kill_r+0x1c>
 8005a26:	6023      	str	r3, [r4, #0]
 8005a28:	bd38      	pop	{r3, r4, r5, pc}
 8005a2a:	bf00      	nop
 8005a2c:	20000524 	.word	0x20000524

08005a30 <_getpid_r>:
 8005a30:	f7fb bd86 	b.w	8001540 <_getpid>

08005a34 <_init>:
 8005a34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a36:	bf00      	nop
 8005a38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005a3a:	bc08      	pop	{r3}
 8005a3c:	469e      	mov	lr, r3
 8005a3e:	4770      	bx	lr

08005a40 <_fini>:
 8005a40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a42:	bf00      	nop
 8005a44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005a46:	bc08      	pop	{r3}
 8005a48:	469e      	mov	lr, r3
 8005a4a:	4770      	bx	lr
