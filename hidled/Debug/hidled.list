
hidled.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006440  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000168  080065e0  080065e0  000075e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006748  08006748  000081c4  2**0
                  CONTENTS
  4 .ARM          00000008  08006748  08006748  00007748  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006750  08006750  000081c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006750  08006750  00007750  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006754  08006754  00007754  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001c4  20000000  08006758  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004c0c  200001c4  0800691c  000081c4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004dd0  0800691c  00008dd0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000081c4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00023058  00000000  00000000  000081f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004c8b  00000000  00000000  0002b24c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001800  00000000  00000000  0002fed8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001283  00000000  00000000  000316d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001bdff  00000000  00000000  0003295b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00023828  00000000  00000000  0004e75a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009c98b  00000000  00000000  00071f82  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0010e90d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000049a0  00000000  00000000  0010e950  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loclists 0000ea73  00000000  00000000  001132f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000004d  00000000  00000000  00121d63  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001c4 	.word	0x200001c4
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080065c8 	.word	0x080065c8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001c8 	.word	0x200001c8
 80001dc:	080065c8 	.word	0x080065c8

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80002a4:	f000 b96a 	b.w	800057c <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	460c      	mov	r4, r1
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	d14e      	bne.n	800036a <__udivmoddi4+0xaa>
 80002cc:	4694      	mov	ip, r2
 80002ce:	458c      	cmp	ip, r1
 80002d0:	4686      	mov	lr, r0
 80002d2:	fab2 f282 	clz	r2, r2
 80002d6:	d962      	bls.n	800039e <__udivmoddi4+0xde>
 80002d8:	b14a      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002da:	f1c2 0320 	rsb	r3, r2, #32
 80002de:	4091      	lsls	r1, r2
 80002e0:	fa20 f303 	lsr.w	r3, r0, r3
 80002e4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002e8:	4319      	orrs	r1, r3
 80002ea:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f2:	fa1f f68c 	uxth.w	r6, ip
 80002f6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002fe:	fb07 1114 	mls	r1, r7, r4, r1
 8000302:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000306:	fb04 f106 	mul.w	r1, r4, r6
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000316:	f080 8112 	bcs.w	800053e <__udivmoddi4+0x27e>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 810f 	bls.w	800053e <__udivmoddi4+0x27e>
 8000320:	3c02      	subs	r4, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a59      	subs	r1, r3, r1
 8000326:	fa1f f38e 	uxth.w	r3, lr
 800032a:	fbb1 f0f7 	udiv	r0, r1, r7
 800032e:	fb07 1110 	mls	r1, r7, r0, r1
 8000332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000336:	fb00 f606 	mul.w	r6, r0, r6
 800033a:	429e      	cmp	r6, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x94>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000346:	f080 80fc 	bcs.w	8000542 <__udivmoddi4+0x282>
 800034a:	429e      	cmp	r6, r3
 800034c:	f240 80f9 	bls.w	8000542 <__udivmoddi4+0x282>
 8000350:	4463      	add	r3, ip
 8000352:	3802      	subs	r0, #2
 8000354:	1b9b      	subs	r3, r3, r6
 8000356:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800035a:	2100      	movs	r1, #0
 800035c:	b11d      	cbz	r5, 8000366 <__udivmoddi4+0xa6>
 800035e:	40d3      	lsrs	r3, r2
 8000360:	2200      	movs	r2, #0
 8000362:	e9c5 3200 	strd	r3, r2, [r5]
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d905      	bls.n	800037a <__udivmoddi4+0xba>
 800036e:	b10d      	cbz	r5, 8000374 <__udivmoddi4+0xb4>
 8000370:	e9c5 0100 	strd	r0, r1, [r5]
 8000374:	2100      	movs	r1, #0
 8000376:	4608      	mov	r0, r1
 8000378:	e7f5      	b.n	8000366 <__udivmoddi4+0xa6>
 800037a:	fab3 f183 	clz	r1, r3
 800037e:	2900      	cmp	r1, #0
 8000380:	d146      	bne.n	8000410 <__udivmoddi4+0x150>
 8000382:	42a3      	cmp	r3, r4
 8000384:	d302      	bcc.n	800038c <__udivmoddi4+0xcc>
 8000386:	4290      	cmp	r0, r2
 8000388:	f0c0 80f0 	bcc.w	800056c <__udivmoddi4+0x2ac>
 800038c:	1a86      	subs	r6, r0, r2
 800038e:	eb64 0303 	sbc.w	r3, r4, r3
 8000392:	2001      	movs	r0, #1
 8000394:	2d00      	cmp	r5, #0
 8000396:	d0e6      	beq.n	8000366 <__udivmoddi4+0xa6>
 8000398:	e9c5 6300 	strd	r6, r3, [r5]
 800039c:	e7e3      	b.n	8000366 <__udivmoddi4+0xa6>
 800039e:	2a00      	cmp	r2, #0
 80003a0:	f040 8090 	bne.w	80004c4 <__udivmoddi4+0x204>
 80003a4:	eba1 040c 	sub.w	r4, r1, ip
 80003a8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003ac:	fa1f f78c 	uxth.w	r7, ip
 80003b0:	2101      	movs	r1, #1
 80003b2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003b6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ba:	fb08 4416 	mls	r4, r8, r6, r4
 80003be:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003c2:	fb07 f006 	mul.w	r0, r7, r6
 80003c6:	4298      	cmp	r0, r3
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x11c>
 80003ca:	eb1c 0303 	adds.w	r3, ip, r3
 80003ce:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x11a>
 80003d4:	4298      	cmp	r0, r3
 80003d6:	f200 80cd 	bhi.w	8000574 <__udivmoddi4+0x2b4>
 80003da:	4626      	mov	r6, r4
 80003dc:	1a1c      	subs	r4, r3, r0
 80003de:	fa1f f38e 	uxth.w	r3, lr
 80003e2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003e6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ee:	fb00 f707 	mul.w	r7, r0, r7
 80003f2:	429f      	cmp	r7, r3
 80003f4:	d908      	bls.n	8000408 <__udivmoddi4+0x148>
 80003f6:	eb1c 0303 	adds.w	r3, ip, r3
 80003fa:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 80003fe:	d202      	bcs.n	8000406 <__udivmoddi4+0x146>
 8000400:	429f      	cmp	r7, r3
 8000402:	f200 80b0 	bhi.w	8000566 <__udivmoddi4+0x2a6>
 8000406:	4620      	mov	r0, r4
 8000408:	1bdb      	subs	r3, r3, r7
 800040a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800040e:	e7a5      	b.n	800035c <__udivmoddi4+0x9c>
 8000410:	f1c1 0620 	rsb	r6, r1, #32
 8000414:	408b      	lsls	r3, r1
 8000416:	fa22 f706 	lsr.w	r7, r2, r6
 800041a:	431f      	orrs	r7, r3
 800041c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000420:	fa04 f301 	lsl.w	r3, r4, r1
 8000424:	ea43 030c 	orr.w	r3, r3, ip
 8000428:	40f4      	lsrs	r4, r6
 800042a:	fa00 f801 	lsl.w	r8, r0, r1
 800042e:	0c38      	lsrs	r0, r7, #16
 8000430:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000434:	fbb4 fef0 	udiv	lr, r4, r0
 8000438:	fa1f fc87 	uxth.w	ip, r7
 800043c:	fb00 441e 	mls	r4, r0, lr, r4
 8000440:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000444:	fb0e f90c 	mul.w	r9, lr, ip
 8000448:	45a1      	cmp	r9, r4
 800044a:	fa02 f201 	lsl.w	r2, r2, r1
 800044e:	d90a      	bls.n	8000466 <__udivmoddi4+0x1a6>
 8000450:	193c      	adds	r4, r7, r4
 8000452:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000456:	f080 8084 	bcs.w	8000562 <__udivmoddi4+0x2a2>
 800045a:	45a1      	cmp	r9, r4
 800045c:	f240 8081 	bls.w	8000562 <__udivmoddi4+0x2a2>
 8000460:	f1ae 0e02 	sub.w	lr, lr, #2
 8000464:	443c      	add	r4, r7
 8000466:	eba4 0409 	sub.w	r4, r4, r9
 800046a:	fa1f f983 	uxth.w	r9, r3
 800046e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000472:	fb00 4413 	mls	r4, r0, r3, r4
 8000476:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800047a:	fb03 fc0c 	mul.w	ip, r3, ip
 800047e:	45a4      	cmp	ip, r4
 8000480:	d907      	bls.n	8000492 <__udivmoddi4+0x1d2>
 8000482:	193c      	adds	r4, r7, r4
 8000484:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000488:	d267      	bcs.n	800055a <__udivmoddi4+0x29a>
 800048a:	45a4      	cmp	ip, r4
 800048c:	d965      	bls.n	800055a <__udivmoddi4+0x29a>
 800048e:	3b02      	subs	r3, #2
 8000490:	443c      	add	r4, r7
 8000492:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000496:	fba0 9302 	umull	r9, r3, r0, r2
 800049a:	eba4 040c 	sub.w	r4, r4, ip
 800049e:	429c      	cmp	r4, r3
 80004a0:	46ce      	mov	lr, r9
 80004a2:	469c      	mov	ip, r3
 80004a4:	d351      	bcc.n	800054a <__udivmoddi4+0x28a>
 80004a6:	d04e      	beq.n	8000546 <__udivmoddi4+0x286>
 80004a8:	b155      	cbz	r5, 80004c0 <__udivmoddi4+0x200>
 80004aa:	ebb8 030e 	subs.w	r3, r8, lr
 80004ae:	eb64 040c 	sbc.w	r4, r4, ip
 80004b2:	fa04 f606 	lsl.w	r6, r4, r6
 80004b6:	40cb      	lsrs	r3, r1
 80004b8:	431e      	orrs	r6, r3
 80004ba:	40cc      	lsrs	r4, r1
 80004bc:	e9c5 6400 	strd	r6, r4, [r5]
 80004c0:	2100      	movs	r1, #0
 80004c2:	e750      	b.n	8000366 <__udivmoddi4+0xa6>
 80004c4:	f1c2 0320 	rsb	r3, r2, #32
 80004c8:	fa20 f103 	lsr.w	r1, r0, r3
 80004cc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d0:	fa24 f303 	lsr.w	r3, r4, r3
 80004d4:	4094      	lsls	r4, r2
 80004d6:	430c      	orrs	r4, r1
 80004d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004dc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004e0:	fa1f f78c 	uxth.w	r7, ip
 80004e4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004e8:	fb08 3110 	mls	r1, r8, r0, r3
 80004ec:	0c23      	lsrs	r3, r4, #16
 80004ee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004f2:	fb00 f107 	mul.w	r1, r0, r7
 80004f6:	4299      	cmp	r1, r3
 80004f8:	d908      	bls.n	800050c <__udivmoddi4+0x24c>
 80004fa:	eb1c 0303 	adds.w	r3, ip, r3
 80004fe:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000502:	d22c      	bcs.n	800055e <__udivmoddi4+0x29e>
 8000504:	4299      	cmp	r1, r3
 8000506:	d92a      	bls.n	800055e <__udivmoddi4+0x29e>
 8000508:	3802      	subs	r0, #2
 800050a:	4463      	add	r3, ip
 800050c:	1a5b      	subs	r3, r3, r1
 800050e:	b2a4      	uxth	r4, r4
 8000510:	fbb3 f1f8 	udiv	r1, r3, r8
 8000514:	fb08 3311 	mls	r3, r8, r1, r3
 8000518:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800051c:	fb01 f307 	mul.w	r3, r1, r7
 8000520:	42a3      	cmp	r3, r4
 8000522:	d908      	bls.n	8000536 <__udivmoddi4+0x276>
 8000524:	eb1c 0404 	adds.w	r4, ip, r4
 8000528:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 800052c:	d213      	bcs.n	8000556 <__udivmoddi4+0x296>
 800052e:	42a3      	cmp	r3, r4
 8000530:	d911      	bls.n	8000556 <__udivmoddi4+0x296>
 8000532:	3902      	subs	r1, #2
 8000534:	4464      	add	r4, ip
 8000536:	1ae4      	subs	r4, r4, r3
 8000538:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800053c:	e739      	b.n	80003b2 <__udivmoddi4+0xf2>
 800053e:	4604      	mov	r4, r0
 8000540:	e6f0      	b.n	8000324 <__udivmoddi4+0x64>
 8000542:	4608      	mov	r0, r1
 8000544:	e706      	b.n	8000354 <__udivmoddi4+0x94>
 8000546:	45c8      	cmp	r8, r9
 8000548:	d2ae      	bcs.n	80004a8 <__udivmoddi4+0x1e8>
 800054a:	ebb9 0e02 	subs.w	lr, r9, r2
 800054e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000552:	3801      	subs	r0, #1
 8000554:	e7a8      	b.n	80004a8 <__udivmoddi4+0x1e8>
 8000556:	4631      	mov	r1, r6
 8000558:	e7ed      	b.n	8000536 <__udivmoddi4+0x276>
 800055a:	4603      	mov	r3, r0
 800055c:	e799      	b.n	8000492 <__udivmoddi4+0x1d2>
 800055e:	4630      	mov	r0, r6
 8000560:	e7d4      	b.n	800050c <__udivmoddi4+0x24c>
 8000562:	46d6      	mov	lr, sl
 8000564:	e77f      	b.n	8000466 <__udivmoddi4+0x1a6>
 8000566:	4463      	add	r3, ip
 8000568:	3802      	subs	r0, #2
 800056a:	e74d      	b.n	8000408 <__udivmoddi4+0x148>
 800056c:	4606      	mov	r6, r0
 800056e:	4623      	mov	r3, r4
 8000570:	4608      	mov	r0, r1
 8000572:	e70f      	b.n	8000394 <__udivmoddi4+0xd4>
 8000574:	3e02      	subs	r6, #2
 8000576:	4463      	add	r3, ip
 8000578:	e730      	b.n	80003dc <__udivmoddi4+0x11c>
 800057a:	bf00      	nop

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <vApplicationGetIdleTaskMemory>:
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000580:	4b03      	ldr	r3, [pc, #12]	@ (8000590 <vApplicationGetIdleTaskMemory+0x10>)
 8000582:	6003      	str	r3, [r0, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000584:	4b03      	ldr	r3, [pc, #12]	@ (8000594 <vApplicationGetIdleTaskMemory+0x14>)
 8000586:	600b      	str	r3, [r1, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000588:	2380      	movs	r3, #128	@ 0x80
 800058a:	6013      	str	r3, [r2, #0]
  /* place for user code */
}
 800058c:	4770      	bx	lr
 800058e:	bf00      	nop
 8000590:	200003e0 	.word	0x200003e0
 8000594:	200001e0 	.word	0x200001e0

08000598 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000598:	b082      	sub	sp, #8
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800059a:	2100      	movs	r1, #0
 800059c:	9100      	str	r1, [sp, #0]
 800059e:	4b0b      	ldr	r3, [pc, #44]	@ (80005cc <MX_GPIO_Init+0x34>)
 80005a0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80005a2:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80005a6:	631a      	str	r2, [r3, #48]	@ 0x30
 80005a8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80005aa:	f002 0280 	and.w	r2, r2, #128	@ 0x80
 80005ae:	9200      	str	r2, [sp, #0]
 80005b0:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005b2:	9101      	str	r1, [sp, #4]
 80005b4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80005b6:	f042 0201 	orr.w	r2, r2, #1
 80005ba:	631a      	str	r2, [r3, #48]	@ 0x30
 80005bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005be:	f003 0301 	and.w	r3, r3, #1
 80005c2:	9301      	str	r3, [sp, #4]
 80005c4:	9b01      	ldr	r3, [sp, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80005c6:	b002      	add	sp, #8
 80005c8:	4770      	bx	lr
 80005ca:	bf00      	nop
 80005cc:	40023800 	.word	0x40023800

080005d0 <startMainTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_startMainTask */
void startMainTask(void const * argument)
{
 80005d0:	b500      	push	{lr}
 80005d2:	b089      	sub	sp, #36	@ 0x24
	char buf[32];

  /* Infinite loop */
  for(;;)
  {
	sprintf(buf, "Tick %lu", osKernelSysTick() / 1000);
 80005d4:	f002 fe6d 	bl	80032b2 <osKernelSysTick>
 80005d8:	4b09      	ldr	r3, [pc, #36]	@ (8000600 <startMainTask+0x30>)
 80005da:	fba3 3200 	umull	r3, r2, r3, r0
 80005de:	0992      	lsrs	r2, r2, #6
 80005e0:	4908      	ldr	r1, [pc, #32]	@ (8000604 <startMainTask+0x34>)
 80005e2:	4668      	mov	r0, sp
 80005e4:	f004 ff34 	bl	8005450 <siprintf>
	USBD_CUSTOM_HID_SendReport_FS((uint8_t *)&buf, strlen(buf));
 80005e8:	4668      	mov	r0, sp
 80005ea:	f7ff fdf9 	bl	80001e0 <strlen>
 80005ee:	b281      	uxth	r1, r0
 80005f0:	4668      	mov	r0, sp
 80005f2:	f004 fc07 	bl	8004e04 <USBD_CUSTOM_HID_SendReport_FS>
    osDelay(1000);
 80005f6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80005fa:	f002 fe97 	bl	800332c <osDelay>
  for(;;)
 80005fe:	e7e9      	b.n	80005d4 <startMainTask+0x4>
 8000600:	10624dd3 	.word	0x10624dd3
 8000604:	08006618 	.word	0x08006618

08000608 <startAliveTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_startAliveTask */
void startAliveTask(void const * argument)
{
 8000608:	b508      	push	{r3, lr}
  /* USER CODE BEGIN startAliveTask */
  /* Infinite loop */
  for(;;)
  {
	  DBG("Alive for %lu seconds!", osKernelSysTick() / 1000);
 800060a:	f002 fe52 	bl	80032b2 <osKernelSysTick>
 800060e:	4b07      	ldr	r3, [pc, #28]	@ (800062c <startAliveTask+0x24>)
 8000610:	fba3 3100 	umull	r3, r1, r3, r0
 8000614:	0989      	lsrs	r1, r1, #6
 8000616:	4806      	ldr	r0, [pc, #24]	@ (8000630 <startAliveTask+0x28>)
 8000618:	f004 ff00 	bl	800541c <iprintf>
 800061c:	200a      	movs	r0, #10
 800061e:	f004 ff0f 	bl	8005440 <putchar>
	  osDelay(10000);
 8000622:	f242 7010 	movw	r0, #10000	@ 0x2710
 8000626:	f002 fe81 	bl	800332c <osDelay>
  for(;;)
 800062a:	e7ee      	b.n	800060a <startAliveTask+0x2>
 800062c:	10624dd3 	.word	0x10624dd3
 8000630:	08006624 	.word	0x08006624

08000634 <_write>:
  if (fd == 1 || fd == 2) {
 8000634:	3801      	subs	r0, #1
 8000636:	2801      	cmp	r0, #1
 8000638:	d80a      	bhi.n	8000650 <_write+0x1c>
int _write(int fd, char* ptr, int len) {
 800063a:	b510      	push	{r4, lr}
 800063c:	4614      	mov	r4, r2
    hstatus = HAL_UART_Transmit(&huart1, (uint8_t *) ptr, len, HAL_MAX_DELAY);
 800063e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000642:	b292      	uxth	r2, r2
 8000644:	4805      	ldr	r0, [pc, #20]	@ (800065c <_write+0x28>)
 8000646:	f001 fffc 	bl	8002642 <HAL_UART_Transmit>
    if (hstatus == HAL_OK)
 800064a:	b920      	cbnz	r0, 8000656 <_write+0x22>
      return len;
 800064c:	4620      	mov	r0, r4
}
 800064e:	bd10      	pop	{r4, pc}
  return -1;
 8000650:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
}
 8000654:	4770      	bx	lr
      return -1;
 8000656:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800065a:	e7f8      	b.n	800064e <_write+0x1a>
 800065c:	20000488 	.word	0x20000488

08000660 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000660:	b508      	push	{r3, lr}
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM11) {
 8000662:	6802      	ldr	r2, [r0, #0]
 8000664:	4b03      	ldr	r3, [pc, #12]	@ (8000674 <HAL_TIM_PeriodElapsedCallback+0x14>)
 8000666:	429a      	cmp	r2, r3
 8000668:	d000      	beq.n	800066c <HAL_TIM_PeriodElapsedCallback+0xc>
    HAL_IncTick();
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800066a:	bd08      	pop	{r3, pc}
    HAL_IncTick();
 800066c:	f000 fa62 	bl	8000b34 <HAL_IncTick>
}
 8000670:	e7fb      	b.n	800066a <HAL_TIM_PeriodElapsedCallback+0xa>
 8000672:	bf00      	nop
 8000674:	40014800 	.word	0x40014800

08000678 <Error_Handler>:
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000678:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800067a:	e7fe      	b.n	800067a <Error_Handler+0x2>

0800067c <MX_USART1_UART_Init>:
{
 800067c:	b508      	push	{r3, lr}
  huart1.Instance = USART1;
 800067e:	480a      	ldr	r0, [pc, #40]	@ (80006a8 <MX_USART1_UART_Init+0x2c>)
 8000680:	4b0a      	ldr	r3, [pc, #40]	@ (80006ac <MX_USART1_UART_Init+0x30>)
 8000682:	6003      	str	r3, [r0, #0]
  huart1.Init.BaudRate = 921600;
 8000684:	f44f 2361 	mov.w	r3, #921600	@ 0xe1000
 8000688:	6043      	str	r3, [r0, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800068a:	2300      	movs	r3, #0
 800068c:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800068e:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000690:	6103      	str	r3, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000692:	220c      	movs	r2, #12
 8000694:	6142      	str	r2, [r0, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000696:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000698:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800069a:	f001 ffa2 	bl	80025e2 <HAL_UART_Init>
 800069e:	b900      	cbnz	r0, 80006a2 <MX_USART1_UART_Init+0x26>
}
 80006a0:	bd08      	pop	{r3, pc}
    Error_Handler();
 80006a2:	f7ff ffe9 	bl	8000678 <Error_Handler>
 80006a6:	bf00      	nop
 80006a8:	20000488 	.word	0x20000488
 80006ac:	40011000 	.word	0x40011000

080006b0 <MX_USB_OTG_FS_PCD_Init>:
{
 80006b0:	b508      	push	{r3, lr}
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80006b2:	480b      	ldr	r0, [pc, #44]	@ (80006e0 <MX_USB_OTG_FS_PCD_Init+0x30>)
 80006b4:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80006b8:	6003      	str	r3, [r0, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80006ba:	2304      	movs	r3, #4
 80006bc:	7103      	strb	r3, [r0, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80006be:	2202      	movs	r2, #2
 80006c0:	71c2      	strb	r2, [r0, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80006c2:	2300      	movs	r3, #0
 80006c4:	7183      	strb	r3, [r0, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80006c6:	7242      	strb	r2, [r0, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80006c8:	7283      	strb	r3, [r0, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80006ca:	72c3      	strb	r3, [r0, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80006cc:	7303      	strb	r3, [r0, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80006ce:	7383      	strb	r3, [r0, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80006d0:	73c3      	strb	r3, [r0, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80006d2:	f000 fc09 	bl	8000ee8 <HAL_PCD_Init>
 80006d6:	b900      	cbnz	r0, 80006da <MX_USB_OTG_FS_PCD_Init+0x2a>
}
 80006d8:	bd08      	pop	{r3, pc}
    Error_Handler();
 80006da:	f7ff ffcd 	bl	8000678 <Error_Handler>
 80006de:	bf00      	nop
 80006e0:	2000459c 	.word	0x2000459c

080006e4 <SystemClock_Config>:
{
 80006e4:	b500      	push	{lr}
 80006e6:	b095      	sub	sp, #84	@ 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006e8:	2230      	movs	r2, #48	@ 0x30
 80006ea:	2100      	movs	r1, #0
 80006ec:	a808      	add	r0, sp, #32
 80006ee:	f004 ff12 	bl	8005516 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006f2:	2300      	movs	r3, #0
 80006f4:	9303      	str	r3, [sp, #12]
 80006f6:	9304      	str	r3, [sp, #16]
 80006f8:	9305      	str	r3, [sp, #20]
 80006fa:	9306      	str	r3, [sp, #24]
 80006fc:	9307      	str	r3, [sp, #28]
  __HAL_RCC_PWR_CLK_ENABLE();
 80006fe:	9301      	str	r3, [sp, #4]
 8000700:	4a1f      	ldr	r2, [pc, #124]	@ (8000780 <SystemClock_Config+0x9c>)
 8000702:	6c11      	ldr	r1, [r2, #64]	@ 0x40
 8000704:	f041 5180 	orr.w	r1, r1, #268435456	@ 0x10000000
 8000708:	6411      	str	r1, [r2, #64]	@ 0x40
 800070a:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800070c:	f002 5280 	and.w	r2, r2, #268435456	@ 0x10000000
 8000710:	9201      	str	r2, [sp, #4]
 8000712:	9a01      	ldr	r2, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000714:	9302      	str	r3, [sp, #8]
 8000716:	4b1b      	ldr	r3, [pc, #108]	@ (8000784 <SystemClock_Config+0xa0>)
 8000718:	681a      	ldr	r2, [r3, #0]
 800071a:	f442 4240 	orr.w	r2, r2, #49152	@ 0xc000
 800071e:	601a      	str	r2, [r3, #0]
 8000720:	681b      	ldr	r3, [r3, #0]
 8000722:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000726:	9302      	str	r3, [sp, #8]
 8000728:	9b02      	ldr	r3, [sp, #8]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800072a:	2301      	movs	r3, #1
 800072c:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800072e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000732:	9309      	str	r3, [sp, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000734:	2302      	movs	r3, #2
 8000736:	930e      	str	r3, [sp, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000738:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 800073c:	920f      	str	r2, [sp, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 800073e:	2219      	movs	r2, #25
 8000740:	9210      	str	r2, [sp, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8000742:	22c0      	movs	r2, #192	@ 0xc0
 8000744:	9211      	str	r2, [sp, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000746:	9312      	str	r3, [sp, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000748:	2304      	movs	r3, #4
 800074a:	9313      	str	r3, [sp, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800074c:	a808      	add	r0, sp, #32
 800074e:	f001 f995 	bl	8001a7c <HAL_RCC_OscConfig>
 8000752:	b988      	cbnz	r0, 8000778 <SystemClock_Config+0x94>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000754:	230f      	movs	r3, #15
 8000756:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000758:	2302      	movs	r3, #2
 800075a:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800075c:	2300      	movs	r3, #0
 800075e:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000760:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000764:	9206      	str	r2, [sp, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000766:	9307      	str	r3, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000768:	2103      	movs	r1, #3
 800076a:	a803      	add	r0, sp, #12
 800076c:	f001 fbd6 	bl	8001f1c <HAL_RCC_ClockConfig>
 8000770:	b920      	cbnz	r0, 800077c <SystemClock_Config+0x98>
}
 8000772:	b015      	add	sp, #84	@ 0x54
 8000774:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8000778:	f7ff ff7e 	bl	8000678 <Error_Handler>
    Error_Handler();
 800077c:	f7ff ff7c 	bl	8000678 <Error_Handler>
 8000780:	40023800 	.word	0x40023800
 8000784:	40007000 	.word	0x40007000

08000788 <main>:
{
 8000788:	b500      	push	{lr}
 800078a:	b08f      	sub	sp, #60	@ 0x3c
  HAL_Init();
 800078c:	f000 f9b8 	bl	8000b00 <HAL_Init>
  SystemClock_Config();
 8000790:	f7ff ffa8 	bl	80006e4 <SystemClock_Config>
  MX_GPIO_Init();
 8000794:	f7ff ff00 	bl	8000598 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000798:	f7ff ff70 	bl	800067c <MX_USART1_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 800079c:	f7ff ff88 	bl	80006b0 <MX_USB_OTG_FS_PCD_Init>
  MX_USB_DEVICE_Init();
 80007a0:	f003 fcd8 	bl	8004154 <MX_USB_DEVICE_Init>
  DBG("Starting");
 80007a4:	4815      	ldr	r0, [pc, #84]	@ (80007fc <main+0x74>)
 80007a6:	f004 fe39 	bl	800541c <iprintf>
 80007aa:	200a      	movs	r0, #10
 80007ac:	f004 fe48 	bl	8005440 <putchar>
  osThreadDef(mainTask, startMainTask, osPriorityNormal, 0, 128);
 80007b0:	4c13      	ldr	r4, [pc, #76]	@ (8000800 <main+0x78>)
 80007b2:	f10d 0c1c 	add.w	ip, sp, #28
 80007b6:	46a6      	mov	lr, r4
 80007b8:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80007bc:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80007c0:	e89e 0007 	ldmia.w	lr, {r0, r1, r2}
 80007c4:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
  mainTaskHandle = osThreadCreate(osThread(mainTask), NULL);
 80007c8:	2100      	movs	r1, #0
 80007ca:	a807      	add	r0, sp, #28
 80007cc:	f002 fd7b 	bl	80032c6 <osThreadCreate>
 80007d0:	4b0c      	ldr	r3, [pc, #48]	@ (8000804 <main+0x7c>)
 80007d2:	6018      	str	r0, [r3, #0]
  osThreadDef(aliveTask, startAliveTask, osPriorityLow, 0, 128);
 80007d4:	46ee      	mov	lr, sp
 80007d6:	f104 0c1c 	add.w	ip, r4, #28
 80007da:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80007de:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80007e2:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 80007e6:	e88e 0007 	stmia.w	lr, {r0, r1, r2}
  aliveTaskHandle = osThreadCreate(osThread(aliveTask), NULL);
 80007ea:	2100      	movs	r1, #0
 80007ec:	4668      	mov	r0, sp
 80007ee:	f002 fd6a 	bl	80032c6 <osThreadCreate>
 80007f2:	4b05      	ldr	r3, [pc, #20]	@ (8000808 <main+0x80>)
 80007f4:	6018      	str	r0, [r3, #0]
  osKernelStart();
 80007f6:	f002 fd57 	bl	80032a8 <osKernelStart>
  while (1)
 80007fa:	e7fe      	b.n	80007fa <main+0x72>
 80007fc:	0800663c 	.word	0x0800663c
 8000800:	080065e0 	.word	0x080065e0
 8000804:	20000484 	.word	0x20000484
 8000808:	20000480 	.word	0x20000480

0800080c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800080c:	b500      	push	{lr}
 800080e:	b083      	sub	sp, #12

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000810:	2200      	movs	r2, #0
 8000812:	9200      	str	r2, [sp, #0]
 8000814:	4b0d      	ldr	r3, [pc, #52]	@ (800084c <HAL_MspInit+0x40>)
 8000816:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 8000818:	f441 4180 	orr.w	r1, r1, #16384	@ 0x4000
 800081c:	6459      	str	r1, [r3, #68]	@ 0x44
 800081e:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 8000820:	f401 4180 	and.w	r1, r1, #16384	@ 0x4000
 8000824:	9100      	str	r1, [sp, #0]
 8000826:	9900      	ldr	r1, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000828:	9201      	str	r2, [sp, #4]
 800082a:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 800082c:	f041 5180 	orr.w	r1, r1, #268435456	@ 0x10000000
 8000830:	6419      	str	r1, [r3, #64]	@ 0x40
 8000832:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000834:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000838:	9301      	str	r3, [sp, #4]
 800083a:	9b01      	ldr	r3, [sp, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800083c:	210f      	movs	r1, #15
 800083e:	f06f 0001 	mvn.w	r0, #1
 8000842:	f000 f9f1 	bl	8000c28 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000846:	b003      	add	sp, #12
 8000848:	f85d fb04 	ldr.w	pc, [sp], #4
 800084c:	40023800 	.word	0x40023800

08000850 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000850:	b500      	push	{lr}
 8000852:	b089      	sub	sp, #36	@ 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000854:	2300      	movs	r3, #0
 8000856:	9303      	str	r3, [sp, #12]
 8000858:	9304      	str	r3, [sp, #16]
 800085a:	9305      	str	r3, [sp, #20]
 800085c:	9306      	str	r3, [sp, #24]
 800085e:	9307      	str	r3, [sp, #28]
  if(huart->Instance==USART1)
 8000860:	6802      	ldr	r2, [r0, #0]
 8000862:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8000866:	f503 3388 	add.w	r3, r3, #69632	@ 0x11000
 800086a:	429a      	cmp	r2, r3
 800086c:	d002      	beq.n	8000874 <HAL_UART_MspInit+0x24>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 800086e:	b009      	add	sp, #36	@ 0x24
 8000870:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_USART1_CLK_ENABLE();
 8000874:	2100      	movs	r1, #0
 8000876:	9101      	str	r1, [sp, #4]
 8000878:	f503 3394 	add.w	r3, r3, #75776	@ 0x12800
 800087c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800087e:	f042 0210 	orr.w	r2, r2, #16
 8000882:	645a      	str	r2, [r3, #68]	@ 0x44
 8000884:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8000886:	f002 0210 	and.w	r2, r2, #16
 800088a:	9201      	str	r2, [sp, #4]
 800088c:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800088e:	9102      	str	r1, [sp, #8]
 8000890:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000892:	f042 0201 	orr.w	r2, r2, #1
 8000896:	631a      	str	r2, [r3, #48]	@ 0x30
 8000898:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800089a:	f003 0301 	and.w	r3, r3, #1
 800089e:	9302      	str	r3, [sp, #8]
 80008a0:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80008a2:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80008a6:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008a8:	2302      	movs	r3, #2
 80008aa:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008ac:	2303      	movs	r3, #3
 80008ae:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80008b0:	2307      	movs	r3, #7
 80008b2:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008b4:	a903      	add	r1, sp, #12
 80008b6:	4802      	ldr	r0, [pc, #8]	@ (80008c0 <HAL_UART_MspInit+0x70>)
 80008b8:	f000 f9ca 	bl	8000c50 <HAL_GPIO_Init>
}
 80008bc:	e7d7      	b.n	800086e <HAL_UART_MspInit+0x1e>
 80008be:	bf00      	nop
 80008c0:	40020000 	.word	0x40020000

080008c4 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80008c4:	b530      	push	{r4, r5, lr}
 80008c6:	b089      	sub	sp, #36	@ 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008c8:	2300      	movs	r3, #0
 80008ca:	9303      	str	r3, [sp, #12]
 80008cc:	9304      	str	r3, [sp, #16]
 80008ce:	9305      	str	r3, [sp, #20]
 80008d0:	9306      	str	r3, [sp, #24]
 80008d2:	9307      	str	r3, [sp, #28]
  if(hpcd->Instance==USB_OTG_FS)
 80008d4:	6803      	ldr	r3, [r0, #0]
 80008d6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80008da:	d001      	beq.n	80008e0 <HAL_PCD_MspInit+0x1c>
	HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
  /* USER CODE END USB_OTG_FS_MspInit 1 */

  }

}
 80008dc:	b009      	add	sp, #36	@ 0x24
 80008de:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008e0:	2500      	movs	r5, #0
 80008e2:	9501      	str	r5, [sp, #4]
 80008e4:	4c1a      	ldr	r4, [pc, #104]	@ (8000950 <HAL_PCD_MspInit+0x8c>)
 80008e6:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80008e8:	f043 0301 	orr.w	r3, r3, #1
 80008ec:	6323      	str	r3, [r4, #48]	@ 0x30
 80008ee:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80008f0:	f003 0301 	and.w	r3, r3, #1
 80008f4:	9301      	str	r3, [sp, #4]
 80008f6:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80008f8:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80008fc:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008fe:	2302      	movs	r3, #2
 8000900:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000902:	2303      	movs	r3, #3
 8000904:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000906:	230a      	movs	r3, #10
 8000908:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800090a:	a903      	add	r1, sp, #12
 800090c:	4811      	ldr	r0, [pc, #68]	@ (8000954 <HAL_PCD_MspInit+0x90>)
 800090e:	f000 f99f 	bl	8000c50 <HAL_GPIO_Init>
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000912:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8000914:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000918:	6363      	str	r3, [r4, #52]	@ 0x34
 800091a:	9502      	str	r5, [sp, #8]
 800091c:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 800091e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000922:	6463      	str	r3, [r4, #68]	@ 0x44
 8000924:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8000926:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800092a:	9302      	str	r3, [sp, #8]
 800092c:	9b02      	ldr	r3, [sp, #8]
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 800092e:	462a      	mov	r2, r5
 8000930:	2105      	movs	r1, #5
 8000932:	2043      	movs	r0, #67	@ 0x43
 8000934:	f000 f978 	bl	8000c28 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8000938:	2043      	movs	r0, #67	@ 0x43
 800093a:	f000 f985 	bl	8000c48 <HAL_NVIC_EnableIRQ>
	HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800093e:	462a      	mov	r2, r5
 8000940:	4629      	mov	r1, r5
 8000942:	2043      	movs	r0, #67	@ 0x43
 8000944:	f000 f970 	bl	8000c28 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8000948:	2043      	movs	r0, #67	@ 0x43
 800094a:	f000 f97d 	bl	8000c48 <HAL_NVIC_EnableIRQ>
}
 800094e:	e7c5      	b.n	80008dc <HAL_PCD_MspInit+0x18>
 8000950:	40023800 	.word	0x40023800
 8000954:	40020000 	.word	0x40020000

08000958 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000958:	b530      	push	{r4, r5, lr}
 800095a:	b089      	sub	sp, #36	@ 0x24
 800095c:	4605      	mov	r5, r0
  uint32_t              uwPrescalerValue = 0U;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM11 clock */
  __HAL_RCC_TIM11_CLK_ENABLE();
 800095e:	2400      	movs	r4, #0
 8000960:	9401      	str	r4, [sp, #4]
 8000962:	4b1d      	ldr	r3, [pc, #116]	@ (80009d8 <HAL_InitTick+0x80>)
 8000964:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8000966:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 800096a:	645a      	str	r2, [r3, #68]	@ 0x44
 800096c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800096e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000972:	9301      	str	r3, [sp, #4]
 8000974:	9b01      	ldr	r3, [sp, #4]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000976:	a902      	add	r1, sp, #8
 8000978:	a803      	add	r0, sp, #12
 800097a:	f001 fba5 	bl	80020c8 <HAL_RCC_GetClockConfig>
  /* Compute TIM11 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 800097e:	f001 fb93 	bl	80020a8 <HAL_RCC_GetPCLK2Freq>

  /* Compute the prescaler value to have TIM11 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000982:	4a16      	ldr	r2, [pc, #88]	@ (80009dc <HAL_InitTick+0x84>)
 8000984:	fba2 2300 	umull	r2, r3, r2, r0
 8000988:	0c9b      	lsrs	r3, r3, #18
 800098a:	3b01      	subs	r3, #1

  /* Initialize TIM11 */
  htim11.Instance = TIM11;
 800098c:	4814      	ldr	r0, [pc, #80]	@ (80009e0 <HAL_InitTick+0x88>)
 800098e:	4a15      	ldr	r2, [pc, #84]	@ (80009e4 <HAL_InitTick+0x8c>)
 8000990:	6002      	str	r2, [r0, #0]
  + Period = [(TIM11CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim11.Init.Period = (1000000U / 1000U) - 1U;
 8000992:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000996:	60c2      	str	r2, [r0, #12]
  htim11.Init.Prescaler = uwPrescalerValue;
 8000998:	6043      	str	r3, [r0, #4]
  htim11.Init.ClockDivision = 0;
 800099a:	6104      	str	r4, [r0, #16]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 800099c:	6084      	str	r4, [r0, #8]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800099e:	6184      	str	r4, [r0, #24]

  status = HAL_TIM_Base_Init(&htim11);
 80009a0:	f001 fcf8 	bl	8002394 <HAL_TIM_Base_Init>
  if (status == HAL_OK)
 80009a4:	4604      	mov	r4, r0
 80009a6:	b110      	cbz	r0, 80009ae <HAL_InitTick+0x56>
    }
  }

 /* Return function status */
  return status;
}
 80009a8:	4620      	mov	r0, r4
 80009aa:	b009      	add	sp, #36	@ 0x24
 80009ac:	bd30      	pop	{r4, r5, pc}
    status = HAL_TIM_Base_Start_IT(&htim11);
 80009ae:	480c      	ldr	r0, [pc, #48]	@ (80009e0 <HAL_InitTick+0x88>)
 80009b0:	f001 fbaa 	bl	8002108 <HAL_TIM_Base_Start_IT>
    if (status == HAL_OK)
 80009b4:	4604      	mov	r4, r0
 80009b6:	2800      	cmp	r0, #0
 80009b8:	d1f6      	bne.n	80009a8 <HAL_InitTick+0x50>
        HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 80009ba:	201a      	movs	r0, #26
 80009bc:	f000 f944 	bl	8000c48 <HAL_NVIC_EnableIRQ>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009c0:	2d0f      	cmp	r5, #15
 80009c2:	d901      	bls.n	80009c8 <HAL_InitTick+0x70>
        status = HAL_ERROR;
 80009c4:	2401      	movs	r4, #1
 80009c6:	e7ef      	b.n	80009a8 <HAL_InitTick+0x50>
        HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, TickPriority, 0U);
 80009c8:	2200      	movs	r2, #0
 80009ca:	4629      	mov	r1, r5
 80009cc:	201a      	movs	r0, #26
 80009ce:	f000 f92b 	bl	8000c28 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80009d2:	4b05      	ldr	r3, [pc, #20]	@ (80009e8 <HAL_InitTick+0x90>)
 80009d4:	601d      	str	r5, [r3, #0]
 80009d6:	e7e7      	b.n	80009a8 <HAL_InitTick+0x50>
 80009d8:	40023800 	.word	0x40023800
 80009dc:	431bde83 	.word	0x431bde83
 80009e0:	200004d0 	.word	0x200004d0
 80009e4:	40014800 	.word	0x40014800
 80009e8:	20000008 	.word	0x20000008

080009ec <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80009ec:	e7fe      	b.n	80009ec <NMI_Handler>

080009ee <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009ee:	e7fe      	b.n	80009ee <HardFault_Handler>

080009f0 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009f0:	e7fe      	b.n	80009f0 <MemManage_Handler>

080009f2 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009f2:	e7fe      	b.n	80009f2 <BusFault_Handler>

080009f4 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009f4:	e7fe      	b.n	80009f4 <UsageFault_Handler>

080009f6 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009f6:	4770      	bx	lr

080009f8 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 80009f8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 80009fa:	4802      	ldr	r0, [pc, #8]	@ (8000a04 <TIM1_TRG_COM_TIM11_IRQHandler+0xc>)
 80009fc:	f001 fbc4 	bl	8002188 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8000a00:	bd08      	pop	{r3, pc}
 8000a02:	bf00      	nop
 8000a04:	200004d0 	.word	0x200004d0

08000a08 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000a08:	b508      	push	{r3, lr}
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000a0a:	4802      	ldr	r0, [pc, #8]	@ (8000a14 <OTG_FS_IRQHandler+0xc>)
 8000a0c:	f000 fd2c 	bl	8001468 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000a10:	bd08      	pop	{r3, pc}
 8000a12:	bf00      	nop
 8000a14:	2000459c 	.word	0x2000459c

08000a18 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000a18:	b570      	push	{r4, r5, r6, lr}
 8000a1a:	460c      	mov	r4, r1
 8000a1c:	4616      	mov	r6, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a1e:	2500      	movs	r5, #0
 8000a20:	e006      	b.n	8000a30 <_read+0x18>
	{
		*ptr++ = __io_getchar();
 8000a22:	f3af 8000 	nop.w
 8000a26:	4621      	mov	r1, r4
 8000a28:	f801 0b01 	strb.w	r0, [r1], #1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a2c:	3501      	adds	r5, #1
		*ptr++ = __io_getchar();
 8000a2e:	460c      	mov	r4, r1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a30:	42b5      	cmp	r5, r6
 8000a32:	dbf6      	blt.n	8000a22 <_read+0xa>
	}

return len;
}
 8000a34:	4630      	mov	r0, r6
 8000a36:	bd70      	pop	{r4, r5, r6, pc}

08000a38 <_close>:
}

int _close(int file)
{
	return -1;
}
 8000a38:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000a3c:	4770      	bx	lr

08000a3e <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 8000a3e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000a42:	604b      	str	r3, [r1, #4]
	return 0;
}
 8000a44:	2000      	movs	r0, #0
 8000a46:	4770      	bx	lr

08000a48 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 8000a48:	2001      	movs	r0, #1
 8000a4a:	4770      	bx	lr

08000a4c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 8000a4c:	2000      	movs	r0, #0
 8000a4e:	4770      	bx	lr

08000a50 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000a50:	b510      	push	{r4, lr}
 8000a52:	4603      	mov	r3, r0
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000a54:	4a0c      	ldr	r2, [pc, #48]	@ (8000a88 <_sbrk+0x38>)
 8000a56:	490d      	ldr	r1, [pc, #52]	@ (8000a8c <_sbrk+0x3c>)
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000a58:	480d      	ldr	r0, [pc, #52]	@ (8000a90 <_sbrk+0x40>)
 8000a5a:	6800      	ldr	r0, [r0, #0]
 8000a5c:	b140      	cbz	r0, 8000a70 <_sbrk+0x20>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000a5e:	480c      	ldr	r0, [pc, #48]	@ (8000a90 <_sbrk+0x40>)
 8000a60:	6800      	ldr	r0, [r0, #0]
 8000a62:	4403      	add	r3, r0
 8000a64:	1a52      	subs	r2, r2, r1
 8000a66:	4293      	cmp	r3, r2
 8000a68:	d806      	bhi.n	8000a78 <_sbrk+0x28>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 8000a6a:	4a09      	ldr	r2, [pc, #36]	@ (8000a90 <_sbrk+0x40>)
 8000a6c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
}
 8000a6e:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 8000a70:	4807      	ldr	r0, [pc, #28]	@ (8000a90 <_sbrk+0x40>)
 8000a72:	4c08      	ldr	r4, [pc, #32]	@ (8000a94 <_sbrk+0x44>)
 8000a74:	6004      	str	r4, [r0, #0]
 8000a76:	e7f2      	b.n	8000a5e <_sbrk+0xe>
    errno = ENOMEM;
 8000a78:	f004 fdf2 	bl	8005660 <__errno>
 8000a7c:	230c      	movs	r3, #12
 8000a7e:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8000a80:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000a84:	e7f3      	b.n	8000a6e <_sbrk+0x1e>
 8000a86:	bf00      	nop
 8000a88:	20020000 	.word	0x20020000
 8000a8c:	00000400 	.word	0x00000400
 8000a90:	20000518 	.word	0x20000518
 8000a94:	20004dd0 	.word	0x20004dd0

08000a98 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a98:	4a03      	ldr	r2, [pc, #12]	@ (8000aa8 <SystemInit+0x10>)
 8000a9a:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 8000a9e:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000aa2:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000aa6:	4770      	bx	lr
 8000aa8:	e000ed00 	.word	0xe000ed00

08000aac <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000aac:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000ae4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000ab0:	480d      	ldr	r0, [pc, #52]	@ (8000ae8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000ab2:	490e      	ldr	r1, [pc, #56]	@ (8000aec <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000ab4:	4a0e      	ldr	r2, [pc, #56]	@ (8000af0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000ab6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ab8:	e002      	b.n	8000ac0 <LoopCopyDataInit>

08000aba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000aba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000abc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000abe:	3304      	adds	r3, #4

08000ac0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ac0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ac2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ac4:	d3f9      	bcc.n	8000aba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ac6:	4a0b      	ldr	r2, [pc, #44]	@ (8000af4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000ac8:	4c0b      	ldr	r4, [pc, #44]	@ (8000af8 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000aca:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000acc:	e001      	b.n	8000ad2 <LoopFillZerobss>

08000ace <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ace:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ad0:	3204      	adds	r2, #4

08000ad2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ad2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ad4:	d3fb      	bcc.n	8000ace <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000ad6:	f7ff ffdf 	bl	8000a98 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000ada:	f004 fdc7 	bl	800566c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ade:	f7ff fe53 	bl	8000788 <main>
  bx  lr    
 8000ae2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000ae4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000ae8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000aec:	200001c4 	.word	0x200001c4
  ldr r2, =_sidata
 8000af0:	08006758 	.word	0x08006758
  ldr r2, =_sbss
 8000af4:	200001c4 	.word	0x200001c4
  ldr r4, =_ebss
 8000af8:	20004dd0 	.word	0x20004dd0

08000afc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000afc:	e7fe      	b.n	8000afc <ADC_IRQHandler>
	...

08000b00 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b00:	b508      	push	{r3, lr}
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000b02:	4b0b      	ldr	r3, [pc, #44]	@ (8000b30 <HAL_Init+0x30>)
 8000b04:	681a      	ldr	r2, [r3, #0]
 8000b06:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8000b0a:	601a      	str	r2, [r3, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000b0c:	681a      	ldr	r2, [r3, #0]
 8000b0e:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8000b12:	601a      	str	r2, [r3, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b14:	681a      	ldr	r2, [r3, #0]
 8000b16:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8000b1a:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b1c:	2003      	movs	r0, #3
 8000b1e:	f000 f871 	bl	8000c04 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b22:	200f      	movs	r0, #15
 8000b24:	f7ff ff18 	bl	8000958 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b28:	f7ff fe70 	bl	800080c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 8000b2c:	2000      	movs	r0, #0
 8000b2e:	bd08      	pop	{r3, pc}
 8000b30:	40023c00 	.word	0x40023c00

08000b34 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000b34:	4a03      	ldr	r2, [pc, #12]	@ (8000b44 <HAL_IncTick+0x10>)
 8000b36:	6811      	ldr	r1, [r2, #0]
 8000b38:	4b03      	ldr	r3, [pc, #12]	@ (8000b48 <HAL_IncTick+0x14>)
 8000b3a:	781b      	ldrb	r3, [r3, #0]
 8000b3c:	440b      	add	r3, r1
 8000b3e:	6013      	str	r3, [r2, #0]
}
 8000b40:	4770      	bx	lr
 8000b42:	bf00      	nop
 8000b44:	2000051c 	.word	0x2000051c
 8000b48:	20000004 	.word	0x20000004

08000b4c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000b4c:	4b01      	ldr	r3, [pc, #4]	@ (8000b54 <HAL_GetTick+0x8>)
 8000b4e:	6818      	ldr	r0, [r3, #0]
}
 8000b50:	4770      	bx	lr
 8000b52:	bf00      	nop
 8000b54:	2000051c 	.word	0x2000051c

08000b58 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b58:	b538      	push	{r3, r4, r5, lr}
 8000b5a:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000b5c:	f7ff fff6 	bl	8000b4c <HAL_GetTick>
 8000b60:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b62:	f1b4 3fff 	cmp.w	r4, #4294967295	@ 0xffffffff
 8000b66:	d002      	beq.n	8000b6e <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 8000b68:	4b04      	ldr	r3, [pc, #16]	@ (8000b7c <HAL_Delay+0x24>)
 8000b6a:	781b      	ldrb	r3, [r3, #0]
 8000b6c:	441c      	add	r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000b6e:	f7ff ffed 	bl	8000b4c <HAL_GetTick>
 8000b72:	1b40      	subs	r0, r0, r5
 8000b74:	42a0      	cmp	r0, r4
 8000b76:	d3fa      	bcc.n	8000b6e <HAL_Delay+0x16>
  {
  }
}
 8000b78:	bd38      	pop	{r3, r4, r5, pc}
 8000b7a:	bf00      	nop
 8000b7c:	20000004 	.word	0x20000004

08000b80 <__NVIC_EnableIRQ>:
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
 8000b80:	2800      	cmp	r0, #0
 8000b82:	db07      	blt.n	8000b94 <__NVIC_EnableIRQ+0x14>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b84:	f000 021f 	and.w	r2, r0, #31
 8000b88:	0940      	lsrs	r0, r0, #5
 8000b8a:	2301      	movs	r3, #1
 8000b8c:	4093      	lsls	r3, r2
 8000b8e:	4a02      	ldr	r2, [pc, #8]	@ (8000b98 <__NVIC_EnableIRQ+0x18>)
 8000b90:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000b94:	4770      	bx	lr
 8000b96:	bf00      	nop
 8000b98:	e000e100 	.word	0xe000e100

08000b9c <__NVIC_SetPriority>:
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
 8000b9c:	2800      	cmp	r0, #0
 8000b9e:	db08      	blt.n	8000bb2 <__NVIC_SetPriority+0x16>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ba0:	0109      	lsls	r1, r1, #4
 8000ba2:	b2c9      	uxtb	r1, r1
 8000ba4:	f100 4060 	add.w	r0, r0, #3758096384	@ 0xe0000000
 8000ba8:	f500 4061 	add.w	r0, r0, #57600	@ 0xe100
 8000bac:	f880 1300 	strb.w	r1, [r0, #768]	@ 0x300
 8000bb0:	4770      	bx	lr
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bb2:	f000 000f 	and.w	r0, r0, #15
 8000bb6:	0109      	lsls	r1, r1, #4
 8000bb8:	b2c9      	uxtb	r1, r1
 8000bba:	4b01      	ldr	r3, [pc, #4]	@ (8000bc0 <__NVIC_SetPriority+0x24>)
 8000bbc:	5419      	strb	r1, [r3, r0]
  }
}
 8000bbe:	4770      	bx	lr
 8000bc0:	e000ed14 	.word	0xe000ed14

08000bc4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000bc4:	b500      	push	{lr}
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000bc6:	f000 0007 	and.w	r0, r0, #7
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000bca:	f1c0 0c07 	rsb	ip, r0, #7
 8000bce:	f1bc 0f04 	cmp.w	ip, #4
 8000bd2:	bf28      	it	cs
 8000bd4:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000bd8:	1d03      	adds	r3, r0, #4
 8000bda:	2b06      	cmp	r3, #6
 8000bdc:	d90f      	bls.n	8000bfe <NVIC_EncodePriority+0x3a>
 8000bde:	1ec3      	subs	r3, r0, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000be0:	f04f 3eff 	mov.w	lr, #4294967295	@ 0xffffffff
 8000be4:	fa0e f00c 	lsl.w	r0, lr, ip
 8000be8:	ea21 0100 	bic.w	r1, r1, r0
 8000bec:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000bee:	fa0e fe03 	lsl.w	lr, lr, r3
 8000bf2:	ea22 020e 	bic.w	r2, r2, lr
         );
}
 8000bf6:	ea41 0002 	orr.w	r0, r1, r2
 8000bfa:	f85d fb04 	ldr.w	pc, [sp], #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000bfe:	2300      	movs	r3, #0
 8000c00:	e7ee      	b.n	8000be0 <NVIC_EncodePriority+0x1c>
	...

08000c04 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c04:	4a07      	ldr	r2, [pc, #28]	@ (8000c24 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8000c06:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c08:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8000c0c:	041b      	lsls	r3, r3, #16
 8000c0e:	0c1b      	lsrs	r3, r3, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c10:	0200      	lsls	r0, r0, #8
 8000c12:	f400 60e0 	and.w	r0, r0, #1792	@ 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c16:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 8000c18:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000c1c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 8000c20:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8000c22:	4770      	bx	lr
 8000c24:	e000ed00 	.word	0xe000ed00

08000c28 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c28:	b510      	push	{r4, lr}
 8000c2a:	4604      	mov	r4, r0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c2c:	4b05      	ldr	r3, [pc, #20]	@ (8000c44 <HAL_NVIC_SetPriority+0x1c>)
 8000c2e:	68d8      	ldr	r0, [r3, #12]
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c30:	f3c0 2002 	ubfx	r0, r0, #8, #3
 8000c34:	f7ff ffc6 	bl	8000bc4 <NVIC_EncodePriority>
 8000c38:	4601      	mov	r1, r0
 8000c3a:	4620      	mov	r0, r4
 8000c3c:	f7ff ffae 	bl	8000b9c <__NVIC_SetPriority>
}
 8000c40:	bd10      	pop	{r4, pc}
 8000c42:	bf00      	nop
 8000c44:	e000ed00 	.word	0xe000ed00

08000c48 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c48:	b508      	push	{r3, lr}
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000c4a:	f7ff ff99 	bl	8000b80 <__NVIC_EnableIRQ>
}
 8000c4e:	bd08      	pop	{r3, pc}

08000c50 <HAL_GPIO_Init>:
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000c50:	2300      	movs	r3, #0
 8000c52:	2b0f      	cmp	r3, #15
 8000c54:	f200 80d7 	bhi.w	8000e06 <HAL_GPIO_Init+0x1b6>
{
 8000c58:	b570      	push	{r4, r5, r6, lr}
 8000c5a:	b082      	sub	sp, #8
 8000c5c:	e065      	b.n	8000d2a <HAL_GPIO_Init+0xda>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000c5e:	6885      	ldr	r5, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000c60:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 8000c64:	2403      	movs	r4, #3
 8000c66:	fa04 f40e 	lsl.w	r4, r4, lr
 8000c6a:	ea25 0504 	bic.w	r5, r5, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000c6e:	68cc      	ldr	r4, [r1, #12]
 8000c70:	fa04 f40e 	lsl.w	r4, r4, lr
 8000c74:	432c      	orrs	r4, r5
        GPIOx->OSPEEDR = temp;
 8000c76:	6084      	str	r4, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000c78:	6844      	ldr	r4, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000c7a:	ea24 0402 	bic.w	r4, r4, r2
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000c7e:	684a      	ldr	r2, [r1, #4]
 8000c80:	f3c2 1200 	ubfx	r2, r2, #4, #1
 8000c84:	409a      	lsls	r2, r3
 8000c86:	4322      	orrs	r2, r4
        GPIOx->OTYPER = temp;
 8000c88:	6042      	str	r2, [r0, #4]
 8000c8a:	e05c      	b.n	8000d46 <HAL_GPIO_Init+0xf6>
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000c8c:	08dc      	lsrs	r4, r3, #3
 8000c8e:	3408      	adds	r4, #8
 8000c90:	f850 2024 	ldr.w	r2, [r0, r4, lsl #2]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000c94:	f003 0507 	and.w	r5, r3, #7
 8000c98:	00ad      	lsls	r5, r5, #2
 8000c9a:	f04f 0e0f 	mov.w	lr, #15
 8000c9e:	fa0e fe05 	lsl.w	lr, lr, r5
 8000ca2:	ea22 0e0e 	bic.w	lr, r2, lr
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000ca6:	690a      	ldr	r2, [r1, #16]
 8000ca8:	40aa      	lsls	r2, r5
 8000caa:	ea42 020e 	orr.w	r2, r2, lr
        GPIOx->AFR[position >> 3U] = temp;
 8000cae:	f840 2024 	str.w	r2, [r0, r4, lsl #2]
 8000cb2:	e05c      	b.n	8000d6e <HAL_GPIO_Init+0x11e>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000cb4:	2204      	movs	r2, #4
 8000cb6:	e000      	b.n	8000cba <HAL_GPIO_Init+0x6a>
 8000cb8:	2200      	movs	r2, #0
 8000cba:	fa02 f20e 	lsl.w	r2, r2, lr
 8000cbe:	432a      	orrs	r2, r5
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000cc0:	3402      	adds	r4, #2
 8000cc2:	4d51      	ldr	r5, [pc, #324]	@ (8000e08 <HAL_GPIO_Init+0x1b8>)
 8000cc4:	f845 2024 	str.w	r2, [r5, r4, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000cc8:	4a50      	ldr	r2, [pc, #320]	@ (8000e0c <HAL_GPIO_Init+0x1bc>)
 8000cca:	6894      	ldr	r4, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
 8000ccc:	ea6f 020c 	mvn.w	r2, ip
 8000cd0:	ea24 050c 	bic.w	r5, r4, ip
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000cd4:	684e      	ldr	r6, [r1, #4]
 8000cd6:	f416 1f80 	tst.w	r6, #1048576	@ 0x100000
 8000cda:	d001      	beq.n	8000ce0 <HAL_GPIO_Init+0x90>
        {
          temp |= iocurrent;
 8000cdc:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->RTSR = temp;
 8000ce0:	4c4a      	ldr	r4, [pc, #296]	@ (8000e0c <HAL_GPIO_Init+0x1bc>)
 8000ce2:	60a5      	str	r5, [r4, #8]

        temp = EXTI->FTSR;
 8000ce4:	68e4      	ldr	r4, [r4, #12]
        temp &= ~((uint32_t)iocurrent);
 8000ce6:	ea02 0504 	and.w	r5, r2, r4
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000cea:	684e      	ldr	r6, [r1, #4]
 8000cec:	f416 1f00 	tst.w	r6, #2097152	@ 0x200000
 8000cf0:	d001      	beq.n	8000cf6 <HAL_GPIO_Init+0xa6>
        {
          temp |= iocurrent;
 8000cf2:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->FTSR = temp;
 8000cf6:	4c45      	ldr	r4, [pc, #276]	@ (8000e0c <HAL_GPIO_Init+0x1bc>)
 8000cf8:	60e5      	str	r5, [r4, #12]

        temp = EXTI->EMR;
 8000cfa:	6864      	ldr	r4, [r4, #4]
        temp &= ~((uint32_t)iocurrent);
 8000cfc:	ea02 0504 	and.w	r5, r2, r4
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000d00:	684e      	ldr	r6, [r1, #4]
 8000d02:	f416 3f00 	tst.w	r6, #131072	@ 0x20000
 8000d06:	d001      	beq.n	8000d0c <HAL_GPIO_Init+0xbc>
        {
          temp |= iocurrent;
 8000d08:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->EMR = temp;
 8000d0c:	4c3f      	ldr	r4, [pc, #252]	@ (8000e0c <HAL_GPIO_Init+0x1bc>)
 8000d0e:	6065      	str	r5, [r4, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000d10:	6824      	ldr	r4, [r4, #0]
        temp &= ~((uint32_t)iocurrent);
 8000d12:	4022      	ands	r2, r4
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000d14:	684d      	ldr	r5, [r1, #4]
 8000d16:	f415 3f80 	tst.w	r5, #65536	@ 0x10000
 8000d1a:	d001      	beq.n	8000d20 <HAL_GPIO_Init+0xd0>
        {
          temp |= iocurrent;
 8000d1c:	ea4c 0204 	orr.w	r2, ip, r4
        }
        EXTI->IMR = temp;
 8000d20:	4c3a      	ldr	r4, [pc, #232]	@ (8000e0c <HAL_GPIO_Init+0x1bc>)
 8000d22:	6022      	str	r2, [r4, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000d24:	3301      	adds	r3, #1
 8000d26:	2b0f      	cmp	r3, #15
 8000d28:	d86b      	bhi.n	8000e02 <HAL_GPIO_Init+0x1b2>
    ioposition = 0x01U << position;
 8000d2a:	2201      	movs	r2, #1
 8000d2c:	409a      	lsls	r2, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000d2e:	680c      	ldr	r4, [r1, #0]
 8000d30:	ea04 0c02 	and.w	ip, r4, r2
    if(iocurrent == ioposition)
 8000d34:	ea32 0404 	bics.w	r4, r2, r4
 8000d38:	d1f4      	bne.n	8000d24 <HAL_GPIO_Init+0xd4>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000d3a:	684c      	ldr	r4, [r1, #4]
 8000d3c:	f004 0403 	and.w	r4, r4, #3
 8000d40:	3c01      	subs	r4, #1
 8000d42:	2c01      	cmp	r4, #1
 8000d44:	d98b      	bls.n	8000c5e <HAL_GPIO_Init+0xe>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000d46:	684a      	ldr	r2, [r1, #4]
 8000d48:	f002 0203 	and.w	r2, r2, #3
 8000d4c:	2a03      	cmp	r2, #3
 8000d4e:	d009      	beq.n	8000d64 <HAL_GPIO_Init+0x114>
        temp = GPIOx->PUPDR;
 8000d50:	68c4      	ldr	r4, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000d52:	005d      	lsls	r5, r3, #1
 8000d54:	2203      	movs	r2, #3
 8000d56:	40aa      	lsls	r2, r5
 8000d58:	ea24 0402 	bic.w	r4, r4, r2
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000d5c:	688a      	ldr	r2, [r1, #8]
 8000d5e:	40aa      	lsls	r2, r5
 8000d60:	4322      	orrs	r2, r4
        GPIOx->PUPDR = temp;
 8000d62:	60c2      	str	r2, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d64:	684a      	ldr	r2, [r1, #4]
 8000d66:	f002 0203 	and.w	r2, r2, #3
 8000d6a:	2a02      	cmp	r2, #2
 8000d6c:	d08e      	beq.n	8000c8c <HAL_GPIO_Init+0x3c>
      temp = GPIOx->MODER;
 8000d6e:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000d70:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 8000d74:	2203      	movs	r2, #3
 8000d76:	fa02 f20e 	lsl.w	r2, r2, lr
 8000d7a:	ea24 0402 	bic.w	r4, r4, r2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000d7e:	684a      	ldr	r2, [r1, #4]
 8000d80:	f002 0203 	and.w	r2, r2, #3
 8000d84:	fa02 f20e 	lsl.w	r2, r2, lr
 8000d88:	4322      	orrs	r2, r4
      GPIOx->MODER = temp;
 8000d8a:	6002      	str	r2, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000d8c:	684a      	ldr	r2, [r1, #4]
 8000d8e:	f412 3f40 	tst.w	r2, #196608	@ 0x30000
 8000d92:	d0c7      	beq.n	8000d24 <HAL_GPIO_Init+0xd4>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d94:	2200      	movs	r2, #0
 8000d96:	9201      	str	r2, [sp, #4]
 8000d98:	4a1d      	ldr	r2, [pc, #116]	@ (8000e10 <HAL_GPIO_Init+0x1c0>)
 8000d9a:	6c54      	ldr	r4, [r2, #68]	@ 0x44
 8000d9c:	f444 4480 	orr.w	r4, r4, #16384	@ 0x4000
 8000da0:	6454      	str	r4, [r2, #68]	@ 0x44
 8000da2:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8000da4:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 8000da8:	9201      	str	r2, [sp, #4]
 8000daa:	9a01      	ldr	r2, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 8000dac:	089c      	lsrs	r4, r3, #2
 8000dae:	1ca5      	adds	r5, r4, #2
 8000db0:	4a15      	ldr	r2, [pc, #84]	@ (8000e08 <HAL_GPIO_Init+0x1b8>)
 8000db2:	f852 5025 	ldr.w	r5, [r2, r5, lsl #2]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000db6:	f003 0e03 	and.w	lr, r3, #3
 8000dba:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8000dbe:	220f      	movs	r2, #15
 8000dc0:	fa02 f20e 	lsl.w	r2, r2, lr
 8000dc4:	ea25 0502 	bic.w	r5, r5, r2
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000dc8:	4a12      	ldr	r2, [pc, #72]	@ (8000e14 <HAL_GPIO_Init+0x1c4>)
 8000dca:	4290      	cmp	r0, r2
 8000dcc:	f43f af74 	beq.w	8000cb8 <HAL_GPIO_Init+0x68>
 8000dd0:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8000dd4:	4290      	cmp	r0, r2
 8000dd6:	d00e      	beq.n	8000df6 <HAL_GPIO_Init+0x1a6>
 8000dd8:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8000ddc:	4290      	cmp	r0, r2
 8000dde:	d00c      	beq.n	8000dfa <HAL_GPIO_Init+0x1aa>
 8000de0:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8000de4:	4290      	cmp	r0, r2
 8000de6:	d00a      	beq.n	8000dfe <HAL_GPIO_Init+0x1ae>
 8000de8:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8000dec:	4290      	cmp	r0, r2
 8000dee:	f43f af61 	beq.w	8000cb4 <HAL_GPIO_Init+0x64>
 8000df2:	2207      	movs	r2, #7
 8000df4:	e761      	b.n	8000cba <HAL_GPIO_Init+0x6a>
 8000df6:	2201      	movs	r2, #1
 8000df8:	e75f      	b.n	8000cba <HAL_GPIO_Init+0x6a>
 8000dfa:	2202      	movs	r2, #2
 8000dfc:	e75d      	b.n	8000cba <HAL_GPIO_Init+0x6a>
 8000dfe:	2203      	movs	r2, #3
 8000e00:	e75b      	b.n	8000cba <HAL_GPIO_Init+0x6a>
      }
    }
  }
}
 8000e02:	b002      	add	sp, #8
 8000e04:	bd70      	pop	{r4, r5, r6, pc}
 8000e06:	4770      	bx	lr
 8000e08:	40013800 	.word	0x40013800
 8000e0c:	40013c00 	.word	0x40013c00
 8000e10:	40023800 	.word	0x40023800
 8000e14:	40020000 	.word	0x40020000

08000e18 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8000e18:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000e1c:	b083      	sub	sp, #12
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8000e1e:	f8d0 8000 	ldr.w	r8, [r0]
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];

  if (ep->xfer_count > ep->xfer_len)
 8000e22:	eb01 03c1 	add.w	r3, r1, r1, lsl #3
 8000e26:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8000e2a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8000e2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000e2e:	429a      	cmp	r2, r3
 8000e30:	d854      	bhi.n	8000edc <PCD_WriteEmptyTxFifo+0xc4>
 8000e32:	4607      	mov	r7, r0
 8000e34:	460c      	mov	r4, r1
  {
    return HAL_ERROR;
  }

  len = ep->xfer_len - ep->xfer_count;
 8000e36:	1a9b      	subs	r3, r3, r2

  if (len > ep->maxpacket)
 8000e38:	eb01 02c1 	add.w	r2, r1, r1, lsl #3
 8000e3c:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8000e40:	69d2      	ldr	r2, [r2, #28]
 8000e42:	429a      	cmp	r2, r3
 8000e44:	d300      	bcc.n	8000e48 <PCD_WriteEmptyTxFifo+0x30>
  len = ep->xfer_len - ep->xfer_count;
 8000e46:	461a      	mov	r2, r3
  {
    len = ep->maxpacket;
  }

  len32b = (len + 3U) / 4U;
 8000e48:	f102 0903 	add.w	r9, r2, #3
 8000e4c:	ea4f 0999 	mov.w	r9, r9, lsr #2

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8000e50:	e015      	b.n	8000e7e <PCD_WriteEmptyTxFifo+0x66>

    if (len > ep->maxpacket)
    {
      len = ep->maxpacket;
    }
    len32b = (len + 3U) / 4U;
 8000e52:	f106 0903 	add.w	r9, r6, #3
 8000e56:	ea4f 0999 	mov.w	r9, r9, lsr #2

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
                          (uint8_t)hpcd->Init.dma_enable);
 8000e5a:	79bb      	ldrb	r3, [r7, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8000e5c:	eb04 05c4 	add.w	r5, r4, r4, lsl #3
 8000e60:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8000e64:	6a29      	ldr	r1, [r5, #32]
 8000e66:	9300      	str	r3, [sp, #0]
 8000e68:	b2b3      	uxth	r3, r6
 8000e6a:	b2e2      	uxtb	r2, r4
 8000e6c:	4640      	mov	r0, r8
 8000e6e:	f001 ff82 	bl	8002d76 <USB_WritePacket>

    ep->xfer_buff  += len;
 8000e72:	6a2b      	ldr	r3, [r5, #32]
 8000e74:	4433      	add	r3, r6
 8000e76:	622b      	str	r3, [r5, #32]
    ep->xfer_count += len;
 8000e78:	6aab      	ldr	r3, [r5, #40]	@ 0x28
 8000e7a:	4433      	add	r3, r6
 8000e7c:	62ab      	str	r3, [r5, #40]	@ 0x28
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8000e7e:	eb08 1344 	add.w	r3, r8, r4, lsl #5
 8000e82:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8000e86:	699b      	ldr	r3, [r3, #24]
 8000e88:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8000e8a:	454b      	cmp	r3, r9
 8000e8c:	d312      	bcc.n	8000eb4 <PCD_WriteEmptyTxFifo+0x9c>
 8000e8e:	eb04 03c4 	add.w	r3, r4, r4, lsl #3
 8000e92:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8000e96:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8000e98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8000e9a:	429a      	cmp	r2, r3
 8000e9c:	d20a      	bcs.n	8000eb4 <PCD_WriteEmptyTxFifo+0x9c>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8000e9e:	b14b      	cbz	r3, 8000eb4 <PCD_WriteEmptyTxFifo+0x9c>
    len = ep->xfer_len - ep->xfer_count;
 8000ea0:	1a9b      	subs	r3, r3, r2
    if (len > ep->maxpacket)
 8000ea2:	eb04 02c4 	add.w	r2, r4, r4, lsl #3
 8000ea6:	eb07 0282 	add.w	r2, r7, r2, lsl #2
 8000eaa:	69d6      	ldr	r6, [r2, #28]
 8000eac:	429e      	cmp	r6, r3
 8000eae:	d3d0      	bcc.n	8000e52 <PCD_WriteEmptyTxFifo+0x3a>
    len = ep->xfer_len - ep->xfer_count;
 8000eb0:	461e      	mov	r6, r3
 8000eb2:	e7ce      	b.n	8000e52 <PCD_WriteEmptyTxFifo+0x3a>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8000eb4:	eb04 03c4 	add.w	r3, r4, r4, lsl #3
 8000eb8:	eb07 0783 	add.w	r7, r7, r3, lsl #2
 8000ebc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000ebe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000ec0:	429a      	cmp	r2, r3
 8000ec2:	d80f      	bhi.n	8000ee4 <PCD_WriteEmptyTxFifo+0xcc>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8000ec4:	f004 040f 	and.w	r4, r4, #15
 8000ec8:	2201      	movs	r2, #1
 8000eca:	40a2      	lsls	r2, r4
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8000ecc:	f8d8 3834 	ldr.w	r3, [r8, #2100]	@ 0x834
 8000ed0:	ea23 0302 	bic.w	r3, r3, r2
 8000ed4:	f8c8 3834 	str.w	r3, [r8, #2100]	@ 0x834
  }

  return HAL_OK;
 8000ed8:	2000      	movs	r0, #0
 8000eda:	e000      	b.n	8000ede <PCD_WriteEmptyTxFifo+0xc6>
    return HAL_ERROR;
 8000edc:	2001      	movs	r0, #1
}
 8000ede:	b003      	add	sp, #12
 8000ee0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  return HAL_OK;
 8000ee4:	2000      	movs	r0, #0
 8000ee6:	e7fa      	b.n	8000ede <PCD_WriteEmptyTxFifo+0xc6>

08000ee8 <HAL_PCD_Init>:
{
 8000ee8:	b530      	push	{r4, r5, lr}
 8000eea:	b083      	sub	sp, #12
  if (hpcd == NULL)
 8000eec:	2800      	cmp	r0, #0
 8000eee:	d07a      	beq.n	8000fe6 <HAL_PCD_Init+0xfe>
 8000ef0:	4604      	mov	r4, r0
  USBx = hpcd->Instance;
 8000ef2:	6805      	ldr	r5, [r0, #0]
  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000ef4:	f890 3495 	ldrb.w	r3, [r0, #1173]	@ 0x495
 8000ef8:	b1c3      	cbz	r3, 8000f2c <HAL_PCD_Init+0x44>
  hpcd->State = HAL_PCD_STATE_BUSY;
 8000efa:	2303      	movs	r3, #3
 8000efc:	f884 3495 	strb.w	r3, [r4, #1173]	@ 0x495
  if (USBx == USB_OTG_FS)
 8000f00:	f1b5 4fa0 	cmp.w	r5, #1342177280	@ 0x50000000
 8000f04:	d017      	beq.n	8000f36 <HAL_PCD_Init+0x4e>
  __HAL_PCD_DISABLE(hpcd);
 8000f06:	6820      	ldr	r0, [r4, #0]
 8000f08:	f001 fce8 	bl	80028dc <USB_DisableGlobalInt>
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000f0c:	7c23      	ldrb	r3, [r4, #16]
 8000f0e:	f88d 3000 	strb.w	r3, [sp]
 8000f12:	1d23      	adds	r3, r4, #4
 8000f14:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000f16:	6820      	ldr	r0, [r4, #0]
 8000f18:	f001 fc1e 	bl	8002758 <USB_CoreInit>
 8000f1c:	b170      	cbz	r0, 8000f3c <HAL_PCD_Init+0x54>
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000f1e:	2302      	movs	r3, #2
 8000f20:	f884 3495 	strb.w	r3, [r4, #1173]	@ 0x495
    return HAL_ERROR;
 8000f24:	2501      	movs	r5, #1
}
 8000f26:	4628      	mov	r0, r5
 8000f28:	b003      	add	sp, #12
 8000f2a:	bd30      	pop	{r4, r5, pc}
    hpcd->Lock = HAL_UNLOCKED;
 8000f2c:	f880 3494 	strb.w	r3, [r0, #1172]	@ 0x494
    HAL_PCD_MspInit(hpcd);
 8000f30:	f7ff fcc8 	bl	80008c4 <HAL_PCD_MspInit>
 8000f34:	e7e1      	b.n	8000efa <HAL_PCD_Init+0x12>
    hpcd->Init.dma_enable = 0U;
 8000f36:	2300      	movs	r3, #0
 8000f38:	71a3      	strb	r3, [r4, #6]
 8000f3a:	e7e4      	b.n	8000f06 <HAL_PCD_Init+0x1e>
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8000f3c:	2100      	movs	r1, #0
 8000f3e:	6820      	ldr	r0, [r4, #0]
 8000f40:	f002 f935 	bl	80031ae <USB_SetCurrentMode>
 8000f44:	4602      	mov	r2, r0
 8000f46:	b908      	cbnz	r0, 8000f4c <HAL_PCD_Init+0x64>
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000f48:	4603      	mov	r3, r0
 8000f4a:	e017      	b.n	8000f7c <HAL_PCD_Init+0x94>
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000f4c:	2302      	movs	r3, #2
 8000f4e:	f884 3495 	strb.w	r3, [r4, #1173]	@ 0x495
    return HAL_ERROR;
 8000f52:	2501      	movs	r5, #1
 8000f54:	e7e7      	b.n	8000f26 <HAL_PCD_Init+0x3e>
    hpcd->IN_ep[i].is_in = 1U;
 8000f56:	eb03 01c3 	add.w	r1, r3, r3, lsl #3
 8000f5a:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8000f5e:	2001      	movs	r0, #1
 8000f60:	7548      	strb	r0, [r1, #21]
    hpcd->IN_ep[i].num = i;
 8000f62:	750b      	strb	r3, [r1, #20]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8000f64:	85cb      	strh	r3, [r1, #46]	@ 0x2e
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8000f66:	2000      	movs	r0, #0
 8000f68:	7608      	strb	r0, [r1, #24]
    hpcd->IN_ep[i].maxpacket = 0U;
 8000f6a:	61c8      	str	r0, [r1, #28]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8000f6c:	6208      	str	r0, [r1, #32]
    hpcd->IN_ep[i].xfer_len = 0U;
 8000f6e:	eb03 01c3 	add.w	r1, r3, r3, lsl #3
 8000f72:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8000f76:	6248      	str	r0, [r1, #36]	@ 0x24
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000f78:	3301      	adds	r3, #1
 8000f7a:	b2db      	uxtb	r3, r3
 8000f7c:	7920      	ldrb	r0, [r4, #4]
 8000f7e:	4298      	cmp	r0, r3
 8000f80:	d8e9      	bhi.n	8000f56 <HAL_PCD_Init+0x6e>
 8000f82:	e016      	b.n	8000fb2 <HAL_PCD_Init+0xca>
    hpcd->OUT_ep[i].is_in = 0U;
 8000f84:	eb02 03c2 	add.w	r3, r2, r2, lsl #3
 8000f88:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8000f8c:	2100      	movs	r1, #0
 8000f8e:	f883 1255 	strb.w	r1, [r3, #597]	@ 0x255
    hpcd->OUT_ep[i].num = i;
 8000f92:	f883 2254 	strb.w	r2, [r3, #596]	@ 0x254
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8000f96:	f883 1258 	strb.w	r1, [r3, #600]	@ 0x258
    hpcd->OUT_ep[i].maxpacket = 0U;
 8000f9a:	f8c3 125c 	str.w	r1, [r3, #604]	@ 0x25c
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8000f9e:	f8c3 1260 	str.w	r1, [r3, #608]	@ 0x260
    hpcd->OUT_ep[i].xfer_len = 0U;
 8000fa2:	eb02 03c2 	add.w	r3, r2, r2, lsl #3
 8000fa6:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8000faa:	f8c3 1264 	str.w	r1, [r3, #612]	@ 0x264
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000fae:	3201      	adds	r2, #1
 8000fb0:	b2d2      	uxtb	r2, r2
 8000fb2:	4290      	cmp	r0, r2
 8000fb4:	d8e6      	bhi.n	8000f84 <HAL_PCD_Init+0x9c>
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000fb6:	7c23      	ldrb	r3, [r4, #16]
 8000fb8:	f88d 3000 	strb.w	r3, [sp]
 8000fbc:	1d23      	adds	r3, r4, #4
 8000fbe:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000fc0:	6820      	ldr	r0, [r4, #0]
 8000fc2:	f001 fce1 	bl	8002988 <USB_DevInit>
 8000fc6:	4605      	mov	r5, r0
 8000fc8:	b120      	cbz	r0, 8000fd4 <HAL_PCD_Init+0xec>
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000fca:	2302      	movs	r3, #2
 8000fcc:	f884 3495 	strb.w	r3, [r4, #1173]	@ 0x495
    return HAL_ERROR;
 8000fd0:	2501      	movs	r5, #1
 8000fd2:	e7a8      	b.n	8000f26 <HAL_PCD_Init+0x3e>
  hpcd->USB_Address = 0U;
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	7463      	strb	r3, [r4, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8000fd8:	2301      	movs	r3, #1
 8000fda:	f884 3495 	strb.w	r3, [r4, #1173]	@ 0x495
  (void)USB_DevDisconnect(hpcd->Instance);
 8000fde:	6820      	ldr	r0, [r4, #0]
 8000fe0:	f002 f8a4 	bl	800312c <USB_DevDisconnect>
  return HAL_OK;
 8000fe4:	e79f      	b.n	8000f26 <HAL_PCD_Init+0x3e>
    return HAL_ERROR;
 8000fe6:	2501      	movs	r5, #1
 8000fe8:	e79d      	b.n	8000f26 <HAL_PCD_Init+0x3e>

08000fea <HAL_PCD_Start>:
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8000fea:	6803      	ldr	r3, [r0, #0]
  __HAL_LOCK(hpcd);
 8000fec:	f890 2494 	ldrb.w	r2, [r0, #1172]	@ 0x494
 8000ff0:	2a01      	cmp	r2, #1
 8000ff2:	d01a      	beq.n	800102a <HAL_PCD_Start+0x40>
{
 8000ff4:	b510      	push	{r4, lr}
 8000ff6:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 8000ff8:	2201      	movs	r2, #1
 8000ffa:	f880 2494 	strb.w	r2, [r0, #1172]	@ 0x494
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8000ffe:	68da      	ldr	r2, [r3, #12]
 8001000:	f012 0f40 	tst.w	r2, #64	@ 0x40
 8001004:	d002      	beq.n	800100c <HAL_PCD_Start+0x22>
      (hpcd->Init.battery_charging_enable == 1U))
 8001006:	7b42      	ldrb	r2, [r0, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8001008:	2a01      	cmp	r2, #1
 800100a:	d009      	beq.n	8001020 <HAL_PCD_Start+0x36>
  __HAL_PCD_ENABLE(hpcd);
 800100c:	6820      	ldr	r0, [r4, #0]
 800100e:	f001 fc5f 	bl	80028d0 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001012:	6820      	ldr	r0, [r4, #0]
 8001014:	f002 f87c 	bl	8003110 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001018:	2000      	movs	r0, #0
 800101a:	f884 0494 	strb.w	r0, [r4, #1172]	@ 0x494
}
 800101e:	bd10      	pop	{r4, pc}
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8001020:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001022:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8001026:	639a      	str	r2, [r3, #56]	@ 0x38
 8001028:	e7f0      	b.n	800100c <HAL_PCD_Start+0x22>
  __HAL_LOCK(hpcd);
 800102a:	2002      	movs	r0, #2
}
 800102c:	4770      	bx	lr
	...

08001030 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8001030:	b570      	push	{r4, r5, r6, lr}
 8001032:	4604      	mov	r4, r0
 8001034:	460d      	mov	r5, r1
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001036:	6800      	ldr	r0, [r0, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8001038:	6c06      	ldr	r6, [r0, #64]	@ 0x40
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800103a:	eb00 1341 	add.w	r3, r0, r1, lsl #5
 800103e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001042:	689a      	ldr	r2, [r3, #8]

  if (hpcd->Init.dma_enable == 1U)
 8001044:	79a1      	ldrb	r1, [r4, #6]
 8001046:	2901      	cmp	r1, #1
 8001048:	d011      	beq.n	800106e <PCD_EP_OutXfrComplete_int+0x3e>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800104a:	4938      	ldr	r1, [pc, #224]	@ (800112c <PCD_EP_OutXfrComplete_int+0xfc>)
 800104c:	428e      	cmp	r6, r1
 800104e:	d056      	beq.n	80010fe <PCD_EP_OutXfrComplete_int+0xce>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8001050:	b93d      	cbnz	r5, 8001062 <PCD_EP_OutXfrComplete_int+0x32>
 8001052:	eb05 03c5 	add.w	r3, r5, r5, lsl #3
 8001056:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800105a:	f8d3 3264 	ldr.w	r3, [r3, #612]	@ 0x264
 800105e:	2b00      	cmp	r3, #0
 8001060:	d05e      	beq.n	8001120 <PCD_EP_OutXfrComplete_int+0xf0>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8001062:	b2e9      	uxtb	r1, r5
 8001064:	4620      	mov	r0, r4
 8001066:	f003 f8a7 	bl	80041b8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
}
 800106a:	2000      	movs	r0, #0
 800106c:	bd70      	pop	{r4, r5, r6, pc}
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800106e:	f012 0f08 	tst.w	r2, #8
 8001072:	d009      	beq.n	8001088 <PCD_EP_OutXfrComplete_int+0x58>
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8001074:	492e      	ldr	r1, [pc, #184]	@ (8001130 <PCD_EP_OutXfrComplete_int+0x100>)
 8001076:	428e      	cmp	r6, r1
 8001078:	d9f7      	bls.n	800106a <PCD_EP_OutXfrComplete_int+0x3a>
 800107a:	f412 4f00 	tst.w	r2, #32768	@ 0x8000
 800107e:	d0f4      	beq.n	800106a <PCD_EP_OutXfrComplete_int+0x3a>
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8001080:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001084:	609a      	str	r2, [r3, #8]
 8001086:	e7f0      	b.n	800106a <PCD_EP_OutXfrComplete_int+0x3a>
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8001088:	f012 0f20 	tst.w	r2, #32
 800108c:	d002      	beq.n	8001094 <PCD_EP_OutXfrComplete_int+0x64>
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800108e:	2220      	movs	r2, #32
 8001090:	609a      	str	r2, [r3, #8]
 8001092:	e7ea      	b.n	800106a <PCD_EP_OutXfrComplete_int+0x3a>
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8001094:	f012 0f28 	tst.w	r2, #40	@ 0x28
 8001098:	d1e7      	bne.n	800106a <PCD_EP_OutXfrComplete_int+0x3a>
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800109a:	4925      	ldr	r1, [pc, #148]	@ (8001130 <PCD_EP_OutXfrComplete_int+0x100>)
 800109c:	428e      	cmp	r6, r1
 800109e:	d906      	bls.n	80010ae <PCD_EP_OutXfrComplete_int+0x7e>
 80010a0:	f412 4f00 	tst.w	r2, #32768	@ 0x8000
 80010a4:	d003      	beq.n	80010ae <PCD_EP_OutXfrComplete_int+0x7e>
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80010a6:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80010aa:	609a      	str	r2, [r3, #8]
 80010ac:	e7dd      	b.n	800106a <PCD_EP_OutXfrComplete_int+0x3a>
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80010ae:	eb05 02c5 	add.w	r2, r5, r5, lsl #3
 80010b2:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 80010b6:	f8d2 1274 	ldr.w	r1, [r2, #628]	@ 0x274
 80010ba:	691b      	ldr	r3, [r3, #16]
 80010bc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80010c0:	1acb      	subs	r3, r1, r3
 80010c2:	f8c2 3268 	str.w	r3, [r2, #616]	@ 0x268
        if (epnum == 0U)
 80010c6:	b97d      	cbnz	r5, 80010e8 <PCD_EP_OutXfrComplete_int+0xb8>
          if (ep->xfer_len == 0U)
 80010c8:	eb05 02c5 	add.w	r2, r5, r5, lsl #3
 80010cc:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 80010d0:	f8d2 2264 	ldr.w	r2, [r2, #612]	@ 0x264
 80010d4:	b16a      	cbz	r2, 80010f2 <PCD_EP_OutXfrComplete_int+0xc2>
            ep->xfer_buff += ep->xfer_count;
 80010d6:	eb05 02c5 	add.w	r2, r5, r5, lsl #3
 80010da:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 80010de:	f8d2 1260 	ldr.w	r1, [r2, #608]	@ 0x260
 80010e2:	4419      	add	r1, r3
 80010e4:	f8c2 1260 	str.w	r1, [r2, #608]	@ 0x260
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80010e8:	b2e9      	uxtb	r1, r5
 80010ea:	4620      	mov	r0, r4
 80010ec:	f003 f864 	bl	80041b8 <HAL_PCD_DataOutStageCallback>
 80010f0:	e7bb      	b.n	800106a <PCD_EP_OutXfrComplete_int+0x3a>
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80010f2:	f204 429c 	addw	r2, r4, #1180	@ 0x49c
 80010f6:	2101      	movs	r1, #1
 80010f8:	f002 f89a 	bl	8003230 <USB_EP0_OutStart>
 80010fc:	e7f4      	b.n	80010e8 <PCD_EP_OutXfrComplete_int+0xb8>
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80010fe:	f412 4f00 	tst.w	r2, #32768	@ 0x8000
 8001102:	d003      	beq.n	800110c <PCD_EP_OutXfrComplete_int+0xdc>
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8001104:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001108:	609a      	str	r2, [r3, #8]
 800110a:	e7ae      	b.n	800106a <PCD_EP_OutXfrComplete_int+0x3a>
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800110c:	f012 0f20 	tst.w	r2, #32
 8001110:	d001      	beq.n	8001116 <PCD_EP_OutXfrComplete_int+0xe6>
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001112:	2220      	movs	r2, #32
 8001114:	609a      	str	r2, [r3, #8]
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8001116:	b2e9      	uxtb	r1, r5
 8001118:	4620      	mov	r0, r4
 800111a:	f003 f84d 	bl	80041b8 <HAL_PCD_DataOutStageCallback>
 800111e:	e7a4      	b.n	800106a <PCD_EP_OutXfrComplete_int+0x3a>
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8001120:	f204 429c 	addw	r2, r4, #1180	@ 0x49c
 8001124:	2100      	movs	r1, #0
 8001126:	f002 f883 	bl	8003230 <USB_EP0_OutStart>
 800112a:	e79a      	b.n	8001062 <PCD_EP_OutXfrComplete_int+0x32>
 800112c:	4f54310a 	.word	0x4f54310a
 8001130:	4f54300a 	.word	0x4f54300a

08001134 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8001134:	b538      	push	{r3, r4, r5, lr}
 8001136:	4604      	mov	r4, r0
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001138:	6803      	ldr	r3, [r0, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800113a:	6c1d      	ldr	r5, [r3, #64]	@ 0x40
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800113c:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8001140:	f8d3 1b08 	ldr.w	r1, [r3, #2824]	@ 0xb08

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8001144:	4a0e      	ldr	r2, [pc, #56]	@ (8001180 <PCD_EP_OutSetupPacket_int+0x4c>)
 8001146:	4295      	cmp	r5, r2
 8001148:	d907      	bls.n	800115a <PCD_EP_OutSetupPacket_int+0x26>
 800114a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800114e:	f411 4f00 	tst.w	r1, #32768	@ 0x8000
 8001152:	d002      	beq.n	800115a <PCD_EP_OutSetupPacket_int+0x26>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8001154:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001158:	609a      	str	r2, [r3, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800115a:	4620      	mov	r0, r4
 800115c:	f003 f824 	bl	80041a8 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8001160:	4b07      	ldr	r3, [pc, #28]	@ (8001180 <PCD_EP_OutSetupPacket_int+0x4c>)
 8001162:	429d      	cmp	r5, r3
 8001164:	d902      	bls.n	800116c <PCD_EP_OutSetupPacket_int+0x38>
 8001166:	79a3      	ldrb	r3, [r4, #6]
 8001168:	2b01      	cmp	r3, #1
 800116a:	d001      	beq.n	8001170 <PCD_EP_OutSetupPacket_int+0x3c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
  }

  return HAL_OK;
}
 800116c:	2000      	movs	r0, #0
 800116e:	bd38      	pop	{r3, r4, r5, pc}
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001170:	f204 429c 	addw	r2, r4, #1180	@ 0x49c
 8001174:	2101      	movs	r1, #1
 8001176:	6820      	ldr	r0, [r4, #0]
 8001178:	f002 f85a 	bl	8003230 <USB_EP0_OutStart>
 800117c:	e7f6      	b.n	800116c <PCD_EP_OutSetupPacket_int+0x38>
 800117e:	bf00      	nop
 8001180:	4f54300a 	.word	0x4f54300a

08001184 <HAL_PCD_SetAddress>:
  __HAL_LOCK(hpcd);
 8001184:	f890 3494 	ldrb.w	r3, [r0, #1172]	@ 0x494
 8001188:	2b01      	cmp	r3, #1
 800118a:	d00c      	beq.n	80011a6 <HAL_PCD_SetAddress+0x22>
{
 800118c:	b510      	push	{r4, lr}
 800118e:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 8001190:	2301      	movs	r3, #1
 8001192:	f880 3494 	strb.w	r3, [r0, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8001196:	7441      	strb	r1, [r0, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001198:	6800      	ldr	r0, [r0, #0]
 800119a:	f001 ffa9 	bl	80030f0 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800119e:	2000      	movs	r0, #0
 80011a0:	f884 0494 	strb.w	r0, [r4, #1172]	@ 0x494
}
 80011a4:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 80011a6:	2002      	movs	r0, #2
}
 80011a8:	4770      	bx	lr

080011aa <HAL_PCD_EP_Open>:
{
 80011aa:	b538      	push	{r3, r4, r5, lr}
 80011ac:	4605      	mov	r5, r0
 80011ae:	468c      	mov	ip, r1
  if ((ep_addr & 0x80U) == 0x80U)
 80011b0:	f011 0f80 	tst.w	r1, #128	@ 0x80
 80011b4:	d12b      	bne.n	800120e <HAL_PCD_EP_Open+0x64>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80011b6:	f001 0e0f 	and.w	lr, r1, #15
 80011ba:	eb0e 04ce 	add.w	r4, lr, lr, lsl #3
 80011be:	00a4      	lsls	r4, r4, #2
 80011c0:	f504 7414 	add.w	r4, r4, #592	@ 0x250
 80011c4:	4404      	add	r4, r0
 80011c6:	1d21      	adds	r1, r4, #4
    ep->is_in = 0U;
 80011c8:	eb0e 0ece 	add.w	lr, lr, lr, lsl #3
 80011cc:	eb00 0e8e 	add.w	lr, r0, lr, lsl #2
 80011d0:	2000      	movs	r0, #0
 80011d2:	f88e 0255 	strb.w	r0, [lr, #597]	@ 0x255
  ep->num = ep_addr & EP_ADDR_MSK;
 80011d6:	f00c 0c0f 	and.w	ip, ip, #15
 80011da:	f881 c000 	strb.w	ip, [r1]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 80011de:	f3c2 020a 	ubfx	r2, r2, #0, #11
 80011e2:	608a      	str	r2, [r1, #8]
  ep->type = ep_type;
 80011e4:	710b      	strb	r3, [r1, #4]
  if (ep->is_in != 0U)
 80011e6:	784a      	ldrb	r2, [r1, #1]
 80011e8:	b10a      	cbz	r2, 80011ee <HAL_PCD_EP_Open+0x44>
    ep->tx_fifo_num = ep->num;
 80011ea:	f8a1 c01a 	strh.w	ip, [r1, #26]
  if (ep_type == EP_TYPE_BULK)
 80011ee:	2b02      	cmp	r3, #2
 80011f0:	d01c      	beq.n	800122c <HAL_PCD_EP_Open+0x82>
  __HAL_LOCK(hpcd);
 80011f2:	f895 3494 	ldrb.w	r3, [r5, #1172]	@ 0x494
 80011f6:	2b01      	cmp	r3, #1
 80011f8:	d01b      	beq.n	8001232 <HAL_PCD_EP_Open+0x88>
 80011fa:	2301      	movs	r3, #1
 80011fc:	f885 3494 	strb.w	r3, [r5, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001200:	6828      	ldr	r0, [r5, #0]
 8001202:	f001 fc9c 	bl	8002b3e <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001206:	2000      	movs	r0, #0
 8001208:	f885 0494 	strb.w	r0, [r5, #1172]	@ 0x494
}
 800120c:	bd38      	pop	{r3, r4, r5, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800120e:	f001 000f 	and.w	r0, r1, #15
 8001212:	eb00 01c0 	add.w	r1, r0, r0, lsl #3
 8001216:	0089      	lsls	r1, r1, #2
 8001218:	3110      	adds	r1, #16
 800121a:	4429      	add	r1, r5
 800121c:	3104      	adds	r1, #4
    ep->is_in = 1U;
 800121e:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
 8001222:	eb05 0080 	add.w	r0, r5, r0, lsl #2
 8001226:	2401      	movs	r4, #1
 8001228:	7544      	strb	r4, [r0, #21]
 800122a:	e7d4      	b.n	80011d6 <HAL_PCD_EP_Open+0x2c>
    ep->data_pid_start = 0U;
 800122c:	2300      	movs	r3, #0
 800122e:	714b      	strb	r3, [r1, #5]
 8001230:	e7df      	b.n	80011f2 <HAL_PCD_EP_Open+0x48>
  __HAL_LOCK(hpcd);
 8001232:	2002      	movs	r0, #2
 8001234:	e7ea      	b.n	800120c <HAL_PCD_EP_Open+0x62>

08001236 <HAL_PCD_EP_Close>:
{
 8001236:	b510      	push	{r4, lr}
 8001238:	4604      	mov	r4, r0
 800123a:	460a      	mov	r2, r1
  if ((ep_addr & 0x80U) == 0x80U)
 800123c:	f011 0f80 	tst.w	r1, #128	@ 0x80
 8001240:	d120      	bne.n	8001284 <HAL_PCD_EP_Close+0x4e>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001242:	f001 000f 	and.w	r0, r1, #15
 8001246:	eb00 03c0 	add.w	r3, r0, r0, lsl #3
 800124a:	009b      	lsls	r3, r3, #2
 800124c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001250:	4423      	add	r3, r4
 8001252:	1d19      	adds	r1, r3, #4
    ep->is_in = 0U;
 8001254:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
 8001258:	eb04 0080 	add.w	r0, r4, r0, lsl #2
 800125c:	2300      	movs	r3, #0
 800125e:	f880 3255 	strb.w	r3, [r0, #597]	@ 0x255
  ep->num = ep_addr & EP_ADDR_MSK;
 8001262:	f002 020f 	and.w	r2, r2, #15
 8001266:	700a      	strb	r2, [r1, #0]
  __HAL_LOCK(hpcd);
 8001268:	f894 3494 	ldrb.w	r3, [r4, #1172]	@ 0x494
 800126c:	2b01      	cmp	r3, #1
 800126e:	d018      	beq.n	80012a2 <HAL_PCD_EP_Close+0x6c>
 8001270:	2301      	movs	r3, #1
 8001272:	f884 3494 	strb.w	r3, [r4, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001276:	6820      	ldr	r0, [r4, #0]
 8001278:	f001 fcae 	bl	8002bd8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800127c:	2000      	movs	r0, #0
 800127e:	f884 0494 	strb.w	r0, [r4, #1172]	@ 0x494
}
 8001282:	bd10      	pop	{r4, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001284:	f001 000f 	and.w	r0, r1, #15
 8001288:	eb00 03c0 	add.w	r3, r0, r0, lsl #3
 800128c:	009b      	lsls	r3, r3, #2
 800128e:	3310      	adds	r3, #16
 8001290:	4423      	add	r3, r4
 8001292:	1d19      	adds	r1, r3, #4
    ep->is_in = 1U;
 8001294:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
 8001298:	eb04 0080 	add.w	r0, r4, r0, lsl #2
 800129c:	2301      	movs	r3, #1
 800129e:	7543      	strb	r3, [r0, #21]
 80012a0:	e7df      	b.n	8001262 <HAL_PCD_EP_Close+0x2c>
  __HAL_LOCK(hpcd);
 80012a2:	2002      	movs	r0, #2
 80012a4:	e7ed      	b.n	8001282 <HAL_PCD_EP_Close+0x4c>

080012a6 <HAL_PCD_EP_Receive>:
{
 80012a6:	b510      	push	{r4, lr}
 80012a8:	4614      	mov	r4, r2
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80012aa:	f001 0c0f 	and.w	ip, r1, #15
 80012ae:	eb0c 01cc 	add.w	r1, ip, ip, lsl #3
 80012b2:	0089      	lsls	r1, r1, #2
 80012b4:	f501 7114 	add.w	r1, r1, #592	@ 0x250
 80012b8:	4401      	add	r1, r0
 80012ba:	3104      	adds	r1, #4
  ep->xfer_buff = pBuf;
 80012bc:	eb0c 0ecc 	add.w	lr, ip, ip, lsl #3
 80012c0:	eb00 0e8e 	add.w	lr, r0, lr, lsl #2
 80012c4:	f8ce 2260 	str.w	r2, [lr, #608]	@ 0x260
  ep->xfer_len = len;
 80012c8:	f8ce 3264 	str.w	r3, [lr, #612]	@ 0x264
  ep->xfer_count = 0U;
 80012cc:	2300      	movs	r3, #0
 80012ce:	f8ce 3268 	str.w	r3, [lr, #616]	@ 0x268
  ep->is_in = 0U;
 80012d2:	f88e 3255 	strb.w	r3, [lr, #597]	@ 0x255
  ep->num = ep_addr & EP_ADDR_MSK;
 80012d6:	f88e c254 	strb.w	ip, [lr, #596]	@ 0x254
  if (hpcd->Init.dma_enable == 1U)
 80012da:	7982      	ldrb	r2, [r0, #6]
 80012dc:	2a01      	cmp	r2, #1
 80012de:	d004      	beq.n	80012ea <HAL_PCD_EP_Receive+0x44>
  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80012e0:	6800      	ldr	r0, [r0, #0]
 80012e2:	f001 fd5f 	bl	8002da4 <USB_EPStartXfer>
}
 80012e6:	2000      	movs	r0, #0
 80012e8:	bd10      	pop	{r4, pc}
    ep->dma_addr = (uint32_t)pBuf;
 80012ea:	f8ce 4270 	str.w	r4, [lr, #624]	@ 0x270
 80012ee:	e7f7      	b.n	80012e0 <HAL_PCD_EP_Receive+0x3a>

080012f0 <HAL_PCD_EP_Transmit>:
{
 80012f0:	b510      	push	{r4, lr}
 80012f2:	4614      	mov	r4, r2
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80012f4:	f001 0c0f 	and.w	ip, r1, #15
 80012f8:	eb0c 01cc 	add.w	r1, ip, ip, lsl #3
 80012fc:	0089      	lsls	r1, r1, #2
 80012fe:	3110      	adds	r1, #16
 8001300:	4401      	add	r1, r0
 8001302:	3104      	adds	r1, #4
  ep->xfer_buff = pBuf;
 8001304:	eb0c 0ecc 	add.w	lr, ip, ip, lsl #3
 8001308:	eb00 0e8e 	add.w	lr, r0, lr, lsl #2
 800130c:	f8ce 2020 	str.w	r2, [lr, #32]
  ep->xfer_len = len;
 8001310:	f8ce 3024 	str.w	r3, [lr, #36]	@ 0x24
  ep->xfer_count = 0U;
 8001314:	2300      	movs	r3, #0
 8001316:	f8ce 3028 	str.w	r3, [lr, #40]	@ 0x28
  ep->is_in = 1U;
 800131a:	2301      	movs	r3, #1
 800131c:	f88e 3015 	strb.w	r3, [lr, #21]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001320:	f88e c014 	strb.w	ip, [lr, #20]
  if (hpcd->Init.dma_enable == 1U)
 8001324:	7982      	ldrb	r2, [r0, #6]
 8001326:	429a      	cmp	r2, r3
 8001328:	d004      	beq.n	8001334 <HAL_PCD_EP_Transmit+0x44>
  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800132a:	6800      	ldr	r0, [r0, #0]
 800132c:	f001 fd3a 	bl	8002da4 <USB_EPStartXfer>
}
 8001330:	2000      	movs	r0, #0
 8001332:	bd10      	pop	{r4, pc}
    ep->dma_addr = (uint32_t)pBuf;
 8001334:	f8ce 4030 	str.w	r4, [lr, #48]	@ 0x30
 8001338:	e7f7      	b.n	800132a <HAL_PCD_EP_Transmit+0x3a>

0800133a <HAL_PCD_EP_SetStall>:
{
 800133a:	b538      	push	{r3, r4, r5, lr}
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800133c:	f001 050f 	and.w	r5, r1, #15
 8001340:	7902      	ldrb	r2, [r0, #4]
 8001342:	42aa      	cmp	r2, r5
 8001344:	d338      	bcc.n	80013b8 <HAL_PCD_EP_SetStall+0x7e>
 8001346:	4604      	mov	r4, r0
 8001348:	460b      	mov	r3, r1
  if ((0x80U & ep_addr) == 0x80U)
 800134a:	f011 0f80 	tst.w	r1, #128	@ 0x80
 800134e:	d11f      	bne.n	8001390 <HAL_PCD_EP_SetStall+0x56>
    ep = &hpcd->OUT_ep[ep_addr];
 8001350:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 8001354:	0089      	lsls	r1, r1, #2
 8001356:	f501 7114 	add.w	r1, r1, #592	@ 0x250
 800135a:	4401      	add	r1, r0
 800135c:	3104      	adds	r1, #4
    ep->is_in = 0U;
 800135e:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
 8001362:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8001366:	2200      	movs	r2, #0
 8001368:	f883 2255 	strb.w	r2, [r3, #597]	@ 0x255
  ep->is_stall = 1U;
 800136c:	2301      	movs	r3, #1
 800136e:	708b      	strb	r3, [r1, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001370:	700d      	strb	r5, [r1, #0]
  __HAL_LOCK(hpcd);
 8001372:	f894 3494 	ldrb.w	r3, [r4, #1172]	@ 0x494
 8001376:	2b01      	cmp	r3, #1
 8001378:	d020      	beq.n	80013bc <HAL_PCD_EP_SetStall+0x82>
 800137a:	2301      	movs	r3, #1
 800137c:	f884 3494 	strb.w	r3, [r4, #1172]	@ 0x494
  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001380:	6820      	ldr	r0, [r4, #0]
 8001382:	f001 fe5a 	bl	800303a <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001386:	b185      	cbz	r5, 80013aa <HAL_PCD_EP_SetStall+0x70>
  __HAL_UNLOCK(hpcd);
 8001388:	2000      	movs	r0, #0
 800138a:	f884 0494 	strb.w	r0, [r4, #1172]	@ 0x494
}
 800138e:	bd38      	pop	{r3, r4, r5, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001390:	eb05 01c5 	add.w	r1, r5, r5, lsl #3
 8001394:	0089      	lsls	r1, r1, #2
 8001396:	3110      	adds	r1, #16
 8001398:	4401      	add	r1, r0
 800139a:	3104      	adds	r1, #4
    ep->is_in = 1U;
 800139c:	eb05 03c5 	add.w	r3, r5, r5, lsl #3
 80013a0:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 80013a4:	2201      	movs	r2, #1
 80013a6:	755a      	strb	r2, [r3, #21]
 80013a8:	e7e0      	b.n	800136c <HAL_PCD_EP_SetStall+0x32>
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80013aa:	f204 429c 	addw	r2, r4, #1180	@ 0x49c
 80013ae:	79a1      	ldrb	r1, [r4, #6]
 80013b0:	6820      	ldr	r0, [r4, #0]
 80013b2:	f001 ff3d 	bl	8003230 <USB_EP0_OutStart>
 80013b6:	e7e7      	b.n	8001388 <HAL_PCD_EP_SetStall+0x4e>
    return HAL_ERROR;
 80013b8:	2001      	movs	r0, #1
 80013ba:	e7e8      	b.n	800138e <HAL_PCD_EP_SetStall+0x54>
  __HAL_LOCK(hpcd);
 80013bc:	2002      	movs	r0, #2
 80013be:	e7e6      	b.n	800138e <HAL_PCD_EP_SetStall+0x54>

080013c0 <HAL_PCD_EP_ClrStall>:
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80013c0:	f001 030f 	and.w	r3, r1, #15
 80013c4:	7902      	ldrb	r2, [r0, #4]
 80013c6:	429a      	cmp	r2, r3
 80013c8:	d330      	bcc.n	800142c <HAL_PCD_EP_ClrStall+0x6c>
{
 80013ca:	b510      	push	{r4, lr}
 80013cc:	4604      	mov	r4, r0
  if ((0x80U & ep_addr) == 0x80U)
 80013ce:	f011 0f80 	tst.w	r1, #128	@ 0x80
 80013d2:	d11e      	bne.n	8001412 <HAL_PCD_EP_ClrStall+0x52>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80013d4:	eb03 01c3 	add.w	r1, r3, r3, lsl #3
 80013d8:	0089      	lsls	r1, r1, #2
 80013da:	f501 7114 	add.w	r1, r1, #592	@ 0x250
 80013de:	4401      	add	r1, r0
 80013e0:	3104      	adds	r1, #4
    ep->is_in = 0U;
 80013e2:	eb03 02c3 	add.w	r2, r3, r3, lsl #3
 80013e6:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 80013ea:	2000      	movs	r0, #0
 80013ec:	f882 0255 	strb.w	r0, [r2, #597]	@ 0x255
  ep->is_stall = 0U;
 80013f0:	2200      	movs	r2, #0
 80013f2:	708a      	strb	r2, [r1, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80013f4:	700b      	strb	r3, [r1, #0]
  __HAL_LOCK(hpcd);
 80013f6:	f894 3494 	ldrb.w	r3, [r4, #1172]	@ 0x494
 80013fa:	2b01      	cmp	r3, #1
 80013fc:	d018      	beq.n	8001430 <HAL_PCD_EP_ClrStall+0x70>
 80013fe:	2301      	movs	r3, #1
 8001400:	f884 3494 	strb.w	r3, [r4, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001404:	6820      	ldr	r0, [r4, #0]
 8001406:	f001 fe45 	bl	8003094 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800140a:	2000      	movs	r0, #0
 800140c:	f884 0494 	strb.w	r0, [r4, #1172]	@ 0x494
}
 8001410:	bd10      	pop	{r4, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001412:	eb03 01c3 	add.w	r1, r3, r3, lsl #3
 8001416:	0089      	lsls	r1, r1, #2
 8001418:	3110      	adds	r1, #16
 800141a:	4401      	add	r1, r0
 800141c:	3104      	adds	r1, #4
    ep->is_in = 1U;
 800141e:	eb03 02c3 	add.w	r2, r3, r3, lsl #3
 8001422:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8001426:	2001      	movs	r0, #1
 8001428:	7550      	strb	r0, [r2, #21]
 800142a:	e7e1      	b.n	80013f0 <HAL_PCD_EP_ClrStall+0x30>
    return HAL_ERROR;
 800142c:	2001      	movs	r0, #1
}
 800142e:	4770      	bx	lr
  __HAL_LOCK(hpcd);
 8001430:	2002      	movs	r0, #2
 8001432:	e7ed      	b.n	8001410 <HAL_PCD_EP_ClrStall+0x50>

08001434 <HAL_PCD_EP_Abort>:
{
 8001434:	b508      	push	{r3, lr}
  if ((0x80U & ep_addr) == 0x80U)
 8001436:	f011 0f80 	tst.w	r1, #128	@ 0x80
 800143a:	d10c      	bne.n	8001456 <HAL_PCD_EP_Abort+0x22>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800143c:	f001 010f 	and.w	r1, r1, #15
 8001440:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 8001444:	0089      	lsls	r1, r1, #2
 8001446:	f501 7114 	add.w	r1, r1, #592	@ 0x250
 800144a:	4401      	add	r1, r0
 800144c:	3104      	adds	r1, #4
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800144e:	6800      	ldr	r0, [r0, #0]
 8001450:	f001 fc32 	bl	8002cb8 <USB_EPStopXfer>
}
 8001454:	bd08      	pop	{r3, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001456:	f001 010f 	and.w	r1, r1, #15
 800145a:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 800145e:	0089      	lsls	r1, r1, #2
 8001460:	3110      	adds	r1, #16
 8001462:	4401      	add	r1, r0
 8001464:	3104      	adds	r1, #4
 8001466:	e7f2      	b.n	800144e <HAL_PCD_EP_Abort+0x1a>

08001468 <HAL_PCD_IRQHandler>:
{
 8001468:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800146c:	b083      	sub	sp, #12
 800146e:	4604      	mov	r4, r0
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001470:	6805      	ldr	r5, [r0, #0]
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8001472:	4628      	mov	r0, r5
 8001474:	f001 fe97 	bl	80031a6 <USB_GetMode>
 8001478:	b110      	cbz	r0, 8001480 <HAL_PCD_IRQHandler+0x18>
}
 800147a:	b003      	add	sp, #12
 800147c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001480:	4606      	mov	r6, r0
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8001482:	6820      	ldr	r0, [r4, #0]
 8001484:	f001 fe60 	bl	8003148 <USB_ReadInterrupts>
 8001488:	2800      	cmp	r0, #0
 800148a:	d0f6      	beq.n	800147a <HAL_PCD_IRQHandler+0x12>
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 800148c:	f505 6700 	add.w	r7, r5, #2048	@ 0x800
 8001490:	68bb      	ldr	r3, [r7, #8]
 8001492:	f3c3 230d 	ubfx	r3, r3, #8, #14
 8001496:	f8c4 34d4 	str.w	r3, [r4, #1236]	@ 0x4d4
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800149a:	6820      	ldr	r0, [r4, #0]
 800149c:	f001 fe54 	bl	8003148 <USB_ReadInterrupts>
 80014a0:	f010 0f02 	tst.w	r0, #2
 80014a4:	d004      	beq.n	80014b0 <HAL_PCD_IRQHandler+0x48>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80014a6:	6822      	ldr	r2, [r4, #0]
 80014a8:	6953      	ldr	r3, [r2, #20]
 80014aa:	f003 0302 	and.w	r3, r3, #2
 80014ae:	6153      	str	r3, [r2, #20]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80014b0:	6820      	ldr	r0, [r4, #0]
 80014b2:	f001 fe49 	bl	8003148 <USB_ReadInterrupts>
 80014b6:	f010 0f10 	tst.w	r0, #16
 80014ba:	d013      	beq.n	80014e4 <HAL_PCD_IRQHandler+0x7c>
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80014bc:	6822      	ldr	r2, [r4, #0]
 80014be:	6993      	ldr	r3, [r2, #24]
 80014c0:	f023 0310 	bic.w	r3, r3, #16
 80014c4:	6193      	str	r3, [r2, #24]
      RegVal = USBx->GRXSTSP;
 80014c6:	f8d5 8020 	ldr.w	r8, [r5, #32]
      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80014ca:	f008 090f 	and.w	r9, r8, #15
      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80014ce:	f3c8 4343 	ubfx	r3, r8, #17, #4
 80014d2:	2b02      	cmp	r3, #2
 80014d4:	d04b      	beq.n	800156e <HAL_PCD_IRQHandler+0x106>
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80014d6:	2b06      	cmp	r3, #6
 80014d8:	d06f      	beq.n	80015ba <HAL_PCD_IRQHandler+0x152>
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80014da:	6822      	ldr	r2, [r4, #0]
 80014dc:	6993      	ldr	r3, [r2, #24]
 80014de:	f043 0310 	orr.w	r3, r3, #16
 80014e2:	6193      	str	r3, [r2, #24]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80014e4:	6820      	ldr	r0, [r4, #0]
 80014e6:	f001 fe2f 	bl	8003148 <USB_ReadInterrupts>
 80014ea:	f410 2f00 	tst.w	r0, #524288	@ 0x80000
 80014ee:	d176      	bne.n	80015de <HAL_PCD_IRQHandler+0x176>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80014f0:	6820      	ldr	r0, [r4, #0]
 80014f2:	f001 fe29 	bl	8003148 <USB_ReadInterrupts>
 80014f6:	f410 2f80 	tst.w	r0, #262144	@ 0x40000
 80014fa:	f040 80e0 	bne.w	80016be <HAL_PCD_IRQHandler+0x256>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80014fe:	6820      	ldr	r0, [r4, #0]
 8001500:	f001 fe22 	bl	8003148 <USB_ReadInterrupts>
 8001504:	2800      	cmp	r0, #0
 8001506:	f2c0 8161 	blt.w	80017cc <HAL_PCD_IRQHandler+0x364>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800150a:	6820      	ldr	r0, [r4, #0]
 800150c:	f001 fe1c 	bl	8003148 <USB_ReadInterrupts>
 8001510:	f410 6f00 	tst.w	r0, #2048	@ 0x800
 8001514:	d009      	beq.n	800152a <HAL_PCD_IRQHandler+0xc2>
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8001516:	68bb      	ldr	r3, [r7, #8]
 8001518:	f013 0f01 	tst.w	r3, #1
 800151c:	f040 816e 	bne.w	80017fc <HAL_PCD_IRQHandler+0x394>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8001520:	6822      	ldr	r2, [r4, #0]
 8001522:	6953      	ldr	r3, [r2, #20]
 8001524:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001528:	6153      	str	r3, [r2, #20]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800152a:	6820      	ldr	r0, [r4, #0]
 800152c:	f001 fe0c 	bl	8003148 <USB_ReadInterrupts>
 8001530:	f410 5f80 	tst.w	r0, #4096	@ 0x1000
 8001534:	f040 8166 	bne.w	8001804 <HAL_PCD_IRQHandler+0x39c>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8001538:	6820      	ldr	r0, [r4, #0]
 800153a:	f001 fe05 	bl	8003148 <USB_ReadInterrupts>
 800153e:	f410 5f00 	tst.w	r0, #8192	@ 0x2000
 8001542:	f040 81b3 	bne.w	80018ac <HAL_PCD_IRQHandler+0x444>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8001546:	6820      	ldr	r0, [r4, #0]
 8001548:	f001 fdfe 	bl	8003148 <USB_ReadInterrupts>
 800154c:	f010 0f08 	tst.w	r0, #8
 8001550:	f040 81c4 	bne.w	80018dc <HAL_PCD_IRQHandler+0x474>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8001554:	6820      	ldr	r0, [r4, #0]
 8001556:	f001 fdf7 	bl	8003148 <USB_ReadInterrupts>
 800155a:	f010 0f80 	tst.w	r0, #128	@ 0x80
 800155e:	f000 81d7 	beq.w	8001910 <HAL_PCD_IRQHandler+0x4a8>
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8001562:	69ab      	ldr	r3, [r5, #24]
 8001564:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001568:	61ab      	str	r3, [r5, #24]
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800156a:	2601      	movs	r6, #1
 800156c:	e1c0      	b.n	80018f0 <HAL_PCD_IRQHandler+0x488>
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 800156e:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8001572:	ea18 0f03 	tst.w	r8, r3
 8001576:	d0b0      	beq.n	80014da <HAL_PCD_IRQHandler+0x72>
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8001578:	ea4f 1a18 	mov.w	sl, r8, lsr #4
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800157c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001580:	9301      	str	r3, [sp, #4]
 8001582:	eb09 0bc9 	add.w	fp, r9, r9, lsl #3
 8001586:	eb04 0b8b 	add.w	fp, r4, fp, lsl #2
 800158a:	f3c8 120a 	ubfx	r2, r8, #4, #11
 800158e:	f8db 1260 	ldr.w	r1, [fp, #608]	@ 0x260
 8001592:	4628      	mov	r0, r5
 8001594:	f001 fd2e 	bl	8002ff4 <USB_ReadPacket>
          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001598:	f8db 3260 	ldr.w	r3, [fp, #608]	@ 0x260
 800159c:	f3ca 0a0a 	ubfx	sl, sl, #0, #11
 80015a0:	4453      	add	r3, sl
 80015a2:	f8cb 3260 	str.w	r3, [fp, #608]	@ 0x260
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80015a6:	f8db 3268 	ldr.w	r3, [fp, #616]	@ 0x268
 80015aa:	9a01      	ldr	r2, [sp, #4]
 80015ac:	444a      	add	r2, r9
 80015ae:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 80015b2:	4453      	add	r3, sl
 80015b4:	f8c2 3268 	str.w	r3, [r2, #616]	@ 0x268
 80015b8:	e78f      	b.n	80014da <HAL_PCD_IRQHandler+0x72>
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80015ba:	2208      	movs	r2, #8
 80015bc:	f204 419c 	addw	r1, r4, #1180	@ 0x49c
 80015c0:	4628      	mov	r0, r5
 80015c2:	f001 fd17 	bl	8002ff4 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80015c6:	eb09 03c9 	add.w	r3, r9, r9, lsl #3
 80015ca:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80015ce:	f8d3 2268 	ldr.w	r2, [r3, #616]	@ 0x268
 80015d2:	f3c8 180a 	ubfx	r8, r8, #4, #11
 80015d6:	4442      	add	r2, r8
 80015d8:	f8c3 2268 	str.w	r2, [r3, #616]	@ 0x268
 80015dc:	e77d      	b.n	80014da <HAL_PCD_IRQHandler+0x72>
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80015de:	6820      	ldr	r0, [r4, #0]
 80015e0:	f001 fdb6 	bl	8003150 <USB_ReadDevAllOutEpInterrupt>
 80015e4:	4680      	mov	r8, r0
      epnum = 0U;
 80015e6:	46b1      	mov	r9, r6
      while (ep_intr != 0U)
 80015e8:	e035      	b.n	8001656 <HAL_PCD_IRQHandler+0x1ee>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80015ea:	eb05 1349 	add.w	r3, r5, r9, lsl #5
 80015ee:	2201      	movs	r2, #1
 80015f0:	f8c3 2b08 	str.w	r2, [r3, #2824]	@ 0xb08
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80015f4:	4649      	mov	r1, r9
 80015f6:	4620      	mov	r0, r4
 80015f8:	f7ff fd1a 	bl	8001030 <PCD_EP_OutXfrComplete_int>
 80015fc:	e03c      	b.n	8001678 <HAL_PCD_IRQHandler+0x210>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80015fe:	eb05 1349 	add.w	r3, r5, r9, lsl #5
 8001602:	2208      	movs	r2, #8
 8001604:	f8c3 2b08 	str.w	r2, [r3, #2824]	@ 0xb08
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8001608:	4649      	mov	r1, r9
 800160a:	4620      	mov	r0, r4
 800160c:	f7ff fd92 	bl	8001134 <PCD_EP_OutSetupPacket_int>
 8001610:	e035      	b.n	800167e <HAL_PCD_IRQHandler+0x216>
            if (ep->is_iso_incomplete == 1U)
 8001612:	eb09 03c9 	add.w	r3, r9, r9, lsl #3
 8001616:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800161a:	f893 3257 	ldrb.w	r3, [r3, #599]	@ 0x257
 800161e:	2b01      	cmp	r3, #1
 8001620:	d041      	beq.n	80016a6 <HAL_PCD_IRQHandler+0x23e>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8001622:	eb05 1349 	add.w	r3, r5, r9, lsl #5
 8001626:	2202      	movs	r2, #2
 8001628:	f8c3 2b08 	str.w	r2, [r3, #2824]	@ 0xb08
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800162c:	f01a 0f20 	tst.w	sl, #32
 8001630:	d004      	beq.n	800163c <HAL_PCD_IRQHandler+0x1d4>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001632:	eb05 1349 	add.w	r3, r5, r9, lsl #5
 8001636:	2220      	movs	r2, #32
 8001638:	f8c3 2b08 	str.w	r2, [r3, #2824]	@ 0xb08
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800163c:	f41a 5f00 	tst.w	sl, #8192	@ 0x2000
 8001640:	d005      	beq.n	800164e <HAL_PCD_IRQHandler+0x1e6>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8001642:	eb05 1349 	add.w	r3, r5, r9, lsl #5
 8001646:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800164a:	f8c3 2b08 	str.w	r2, [r3, #2824]	@ 0xb08
        epnum++;
 800164e:	f109 0901 	add.w	r9, r9, #1
        ep_intr >>= 1U;
 8001652:	ea4f 0858 	mov.w	r8, r8, lsr #1
      while (ep_intr != 0U)
 8001656:	f1b8 0f00 	cmp.w	r8, #0
 800165a:	f43f af49 	beq.w	80014f0 <HAL_PCD_IRQHandler+0x88>
        if ((ep_intr & 0x1U) != 0U)
 800165e:	f018 0f01 	tst.w	r8, #1
 8001662:	d0f4      	beq.n	800164e <HAL_PCD_IRQHandler+0x1e6>
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001664:	fa5f fb89 	uxtb.w	fp, r9
 8001668:	4659      	mov	r1, fp
 800166a:	6820      	ldr	r0, [r4, #0]
 800166c:	f001 fd80 	bl	8003170 <USB_ReadDevOutEPInterrupt>
 8001670:	4682      	mov	sl, r0
          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8001672:	f010 0f01 	tst.w	r0, #1
 8001676:	d1b8      	bne.n	80015ea <HAL_PCD_IRQHandler+0x182>
          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8001678:	f01a 0f08 	tst.w	sl, #8
 800167c:	d1bf      	bne.n	80015fe <HAL_PCD_IRQHandler+0x196>
          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800167e:	f01a 0f10 	tst.w	sl, #16
 8001682:	d004      	beq.n	800168e <HAL_PCD_IRQHandler+0x226>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8001684:	eb05 1349 	add.w	r3, r5, r9, lsl #5
 8001688:	2210      	movs	r2, #16
 800168a:	f8c3 2b08 	str.w	r2, [r3, #2824]	@ 0xb08
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 800168e:	f01a 0f02 	tst.w	sl, #2
 8001692:	d0cb      	beq.n	800162c <HAL_PCD_IRQHandler+0x1c4>
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8001694:	696b      	ldr	r3, [r5, #20]
 8001696:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800169a:	d0ba      	beq.n	8001612 <HAL_PCD_IRQHandler+0x1aa>
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80016a2:	607b      	str	r3, [r7, #4]
 80016a4:	e7b5      	b.n	8001612 <HAL_PCD_IRQHandler+0x1aa>
              ep->is_iso_incomplete = 0U;
 80016a6:	eb09 03c9 	add.w	r3, r9, r9, lsl #3
 80016aa:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80016ae:	2200      	movs	r2, #0
 80016b0:	f883 2257 	strb.w	r2, [r3, #599]	@ 0x257
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80016b4:	4659      	mov	r1, fp
 80016b6:	4620      	mov	r0, r4
 80016b8:	f002 fdcc 	bl	8004254 <HAL_PCD_ISOOUTIncompleteCallback>
 80016bc:	e7b1      	b.n	8001622 <HAL_PCD_IRQHandler+0x1ba>
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80016be:	6820      	ldr	r0, [r4, #0]
 80016c0:	f001 fd4e 	bl	8003160 <USB_ReadDevAllInEpInterrupt>
 80016c4:	4680      	mov	r8, r0
      epnum = 0U;
 80016c6:	46b1      	mov	r9, r6
      while (ep_intr != 0U)
 80016c8:	e025      	b.n	8001716 <HAL_PCD_IRQHandler+0x2ae>
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80016ca:	4659      	mov	r1, fp
 80016cc:	4620      	mov	r0, r4
 80016ce:	f002 fd7f 	bl	80041d0 <HAL_PCD_DataInStageCallback>
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80016d2:	f01a 0f08 	tst.w	sl, #8
 80016d6:	d004      	beq.n	80016e2 <HAL_PCD_IRQHandler+0x27a>
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80016d8:	eb05 1349 	add.w	r3, r5, r9, lsl #5
 80016dc:	2208      	movs	r2, #8
 80016de:	f8c3 2908 	str.w	r2, [r3, #2312]	@ 0x908
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80016e2:	f01a 0f10 	tst.w	sl, #16
 80016e6:	d004      	beq.n	80016f2 <HAL_PCD_IRQHandler+0x28a>
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80016e8:	eb05 1349 	add.w	r3, r5, r9, lsl #5
 80016ec:	2210      	movs	r2, #16
 80016ee:	f8c3 2908 	str.w	r2, [r3, #2312]	@ 0x908
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80016f2:	f01a 0f40 	tst.w	sl, #64	@ 0x40
 80016f6:	d004      	beq.n	8001702 <HAL_PCD_IRQHandler+0x29a>
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80016f8:	eb05 1349 	add.w	r3, r5, r9, lsl #5
 80016fc:	2240      	movs	r2, #64	@ 0x40
 80016fe:	f8c3 2908 	str.w	r2, [r3, #2312]	@ 0x908
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8001702:	f01a 0f02 	tst.w	sl, #2
 8001706:	d140      	bne.n	800178a <HAL_PCD_IRQHandler+0x322>
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8001708:	f01a 0f80 	tst.w	sl, #128	@ 0x80
 800170c:	d159      	bne.n	80017c2 <HAL_PCD_IRQHandler+0x35a>
        epnum++;
 800170e:	f109 0901 	add.w	r9, r9, #1
        ep_intr >>= 1U;
 8001712:	ea4f 0858 	mov.w	r8, r8, lsr #1
      while (ep_intr != 0U)
 8001716:	f1b8 0f00 	cmp.w	r8, #0
 800171a:	f43f aef0 	beq.w	80014fe <HAL_PCD_IRQHandler+0x96>
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800171e:	f018 0f01 	tst.w	r8, #1
 8001722:	d0f4      	beq.n	800170e <HAL_PCD_IRQHandler+0x2a6>
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001724:	fa5f fb89 	uxtb.w	fp, r9
 8001728:	4659      	mov	r1, fp
 800172a:	6820      	ldr	r0, [r4, #0]
 800172c:	f001 fd29 	bl	8003182 <USB_ReadDevInEPInterrupt>
 8001730:	4682      	mov	sl, r0
          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8001732:	f010 0f01 	tst.w	r0, #1
 8001736:	d0cc      	beq.n	80016d2 <HAL_PCD_IRQHandler+0x26a>
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001738:	f009 020f 	and.w	r2, r9, #15
 800173c:	2101      	movs	r1, #1
 800173e:	fa01 f202 	lsl.w	r2, r1, r2
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001742:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001744:	ea23 0302 	bic.w	r3, r3, r2
 8001748:	637b      	str	r3, [r7, #52]	@ 0x34
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800174a:	eb05 1349 	add.w	r3, r5, r9, lsl #5
 800174e:	f8c3 1908 	str.w	r1, [r3, #2312]	@ 0x908
            if (hpcd->Init.dma_enable == 1U)
 8001752:	79a3      	ldrb	r3, [r4, #6]
 8001754:	428b      	cmp	r3, r1
 8001756:	d1b8      	bne.n	80016ca <HAL_PCD_IRQHandler+0x262>
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8001758:	eb09 03c9 	add.w	r3, r9, r9, lsl #3
 800175c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8001760:	6a1a      	ldr	r2, [r3, #32]
 8001762:	69d9      	ldr	r1, [r3, #28]
 8001764:	440a      	add	r2, r1
 8001766:	621a      	str	r2, [r3, #32]
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8001768:	f1b9 0f00 	cmp.w	r9, #0
 800176c:	d1ad      	bne.n	80016ca <HAL_PCD_IRQHandler+0x262>
 800176e:	eb09 03c9 	add.w	r3, r9, r9, lsl #3
 8001772:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8001776:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001778:	2b00      	cmp	r3, #0
 800177a:	d1a6      	bne.n	80016ca <HAL_PCD_IRQHandler+0x262>
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800177c:	f204 429c 	addw	r2, r4, #1180	@ 0x49c
 8001780:	2101      	movs	r1, #1
 8001782:	6820      	ldr	r0, [r4, #0]
 8001784:	f001 fd54 	bl	8003230 <USB_EP0_OutStart>
 8001788:	e79f      	b.n	80016ca <HAL_PCD_IRQHandler+0x262>
            (void)USB_FlushTxFifo(USBx, epnum);
 800178a:	4649      	mov	r1, r9
 800178c:	4628      	mov	r0, r5
 800178e:	f001 f8ab 	bl	80028e8 <USB_FlushTxFifo>
            if (ep->is_iso_incomplete == 1U)
 8001792:	eb09 03c9 	add.w	r3, r9, r9, lsl #3
 8001796:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800179a:	7ddb      	ldrb	r3, [r3, #23]
 800179c:	2b01      	cmp	r3, #1
 800179e:	d005      	beq.n	80017ac <HAL_PCD_IRQHandler+0x344>
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80017a0:	eb05 1349 	add.w	r3, r5, r9, lsl #5
 80017a4:	2202      	movs	r2, #2
 80017a6:	f8c3 2908 	str.w	r2, [r3, #2312]	@ 0x908
 80017aa:	e7ad      	b.n	8001708 <HAL_PCD_IRQHandler+0x2a0>
              ep->is_iso_incomplete = 0U;
 80017ac:	eb09 03c9 	add.w	r3, r9, r9, lsl #3
 80017b0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80017b4:	2200      	movs	r2, #0
 80017b6:	75da      	strb	r2, [r3, #23]
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80017b8:	4659      	mov	r1, fp
 80017ba:	4620      	mov	r0, r4
 80017bc:	f002 fd50 	bl	8004260 <HAL_PCD_ISOINIncompleteCallback>
 80017c0:	e7ee      	b.n	80017a0 <HAL_PCD_IRQHandler+0x338>
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80017c2:	4649      	mov	r1, r9
 80017c4:	4620      	mov	r0, r4
 80017c6:	f7ff fb27 	bl	8000e18 <PCD_WriteEmptyTxFifo>
 80017ca:	e7a0      	b.n	800170e <HAL_PCD_IRQHandler+0x2a6>
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	f023 0301 	bic.w	r3, r3, #1
 80017d2:	607b      	str	r3, [r7, #4]
      if (hpcd->LPM_State == LPM_L1)
 80017d4:	f894 34cc 	ldrb.w	r3, [r4, #1228]	@ 0x4cc
 80017d8:	2b01      	cmp	r3, #1
 80017da:	d008      	beq.n	80017ee <HAL_PCD_IRQHandler+0x386>
        HAL_PCD_ResumeCallback(hpcd);
 80017dc:	4620      	mov	r0, r4
 80017de:	f002 fd33 	bl	8004248 <HAL_PCD_ResumeCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80017e2:	6822      	ldr	r2, [r4, #0]
 80017e4:	6953      	ldr	r3, [r2, #20]
 80017e6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80017ea:	6153      	str	r3, [r2, #20]
 80017ec:	e68d      	b.n	800150a <HAL_PCD_IRQHandler+0xa2>
        hpcd->LPM_State = LPM_L0;
 80017ee:	2100      	movs	r1, #0
 80017f0:	f884 14cc 	strb.w	r1, [r4, #1228]	@ 0x4cc
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80017f4:	4620      	mov	r0, r4
 80017f6:	f000 f93f 	bl	8001a78 <HAL_PCDEx_LPM_Callback>
 80017fa:	e7f2      	b.n	80017e2 <HAL_PCD_IRQHandler+0x37a>
        HAL_PCD_SuspendCallback(hpcd);
 80017fc:	4620      	mov	r0, r4
 80017fe:	f002 fd0b 	bl	8004218 <HAL_PCD_SuspendCallback>
 8001802:	e68d      	b.n	8001520 <HAL_PCD_IRQHandler+0xb8>
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	f023 0301 	bic.w	r3, r3, #1
 800180a:	607b      	str	r3, [r7, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800180c:	2110      	movs	r1, #16
 800180e:	6820      	ldr	r0, [r4, #0]
 8001810:	f001 f86a 	bl	80028e8 <USB_FlushTxFifo>
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001814:	e01a      	b.n	800184c <HAL_PCD_IRQHandler+0x3e4>
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8001816:	eb05 1346 	add.w	r3, r5, r6, lsl #5
 800181a:	f64f 317f 	movw	r1, #64383	@ 0xfb7f
 800181e:	f8c3 1908 	str.w	r1, [r3, #2312]	@ 0x908
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8001822:	f8d3 2900 	ldr.w	r2, [r3, #2304]	@ 0x900
 8001826:	f422 1200 	bic.w	r2, r2, #2097152	@ 0x200000
 800182a:	f8c3 2900 	str.w	r2, [r3, #2304]	@ 0x900
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800182e:	f8c3 1b08 	str.w	r1, [r3, #2824]	@ 0xb08
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8001832:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	@ 0xb00
 8001836:	f422 1200 	bic.w	r2, r2, #2097152	@ 0x200000
 800183a:	f8c3 2b00 	str.w	r2, [r3, #2816]	@ 0xb00
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800183e:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	@ 0xb00
 8001842:	f042 6200 	orr.w	r2, r2, #134217728	@ 0x8000000
 8001846:	f8c3 2b00 	str.w	r2, [r3, #2816]	@ 0xb00
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800184a:	3601      	adds	r6, #1
 800184c:	7923      	ldrb	r3, [r4, #4]
 800184e:	42b3      	cmp	r3, r6
 8001850:	d8e1      	bhi.n	8001816 <HAL_PCD_IRQHandler+0x3ae>
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8001852:	69fb      	ldr	r3, [r7, #28]
 8001854:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8001858:	61fb      	str	r3, [r7, #28]
      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800185a:	7be3      	ldrb	r3, [r4, #15]
 800185c:	b1db      	cbz	r3, 8001896 <HAL_PCD_IRQHandler+0x42e>
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800185e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001862:	f043 030b 	orr.w	r3, r3, #11
 8001866:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800186a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800186c:	f043 030b 	orr.w	r3, r3, #11
 8001870:	647b      	str	r3, [r7, #68]	@ 0x44
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8001872:	f8d5 3800 	ldr.w	r3, [r5, #2048]	@ 0x800
 8001876:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800187a:	f8c5 3800 	str.w	r3, [r5, #2048]	@ 0x800
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800187e:	f204 429c 	addw	r2, r4, #1180	@ 0x49c
 8001882:	79a1      	ldrb	r1, [r4, #6]
 8001884:	6820      	ldr	r0, [r4, #0]
 8001886:	f001 fcd3 	bl	8003230 <USB_EP0_OutStart>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800188a:	6822      	ldr	r2, [r4, #0]
 800188c:	6953      	ldr	r3, [r2, #20]
 800188e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001892:	6153      	str	r3, [r2, #20]
 8001894:	e650      	b.n	8001538 <HAL_PCD_IRQHandler+0xd0>
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8001896:	697b      	ldr	r3, [r7, #20]
 8001898:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800189c:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 80018a0:	617b      	str	r3, [r7, #20]
        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80018a2:	693b      	ldr	r3, [r7, #16]
 80018a4:	f043 030b 	orr.w	r3, r3, #11
 80018a8:	613b      	str	r3, [r7, #16]
 80018aa:	e7e2      	b.n	8001872 <HAL_PCD_IRQHandler+0x40a>
      (void)USB_ActivateSetup(hpcd->Instance);
 80018ac:	6820      	ldr	r0, [r4, #0]
 80018ae:	f001 fcaf 	bl	8003210 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80018b2:	6820      	ldr	r0, [r4, #0]
 80018b4:	f001 f932 	bl	8002b1c <USB_GetDevSpeed>
 80018b8:	71e0      	strb	r0, [r4, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80018ba:	6826      	ldr	r6, [r4, #0]
 80018bc:	f000 fbde 	bl	800207c <HAL_RCC_GetHCLKFreq>
 80018c0:	4601      	mov	r1, r0
 80018c2:	79e2      	ldrb	r2, [r4, #7]
 80018c4:	4630      	mov	r0, r6
 80018c6:	f000 ff91 	bl	80027ec <USB_SetTurnaroundTime>
      HAL_PCD_ResetCallback(hpcd);
 80018ca:	4620      	mov	r0, r4
 80018cc:	f002 fc91 	bl	80041f2 <HAL_PCD_ResetCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80018d0:	6822      	ldr	r2, [r4, #0]
 80018d2:	6953      	ldr	r3, [r2, #20]
 80018d4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80018d8:	6153      	str	r3, [r2, #20]
 80018da:	e634      	b.n	8001546 <HAL_PCD_IRQHandler+0xde>
      HAL_PCD_SOFCallback(hpcd);
 80018dc:	4620      	mov	r0, r4
 80018de:	f002 fc82 	bl	80041e6 <HAL_PCD_SOFCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80018e2:	6822      	ldr	r2, [r4, #0]
 80018e4:	6953      	ldr	r3, [r2, #20]
 80018e6:	f003 0308 	and.w	r3, r3, #8
 80018ea:	6153      	str	r3, [r2, #20]
 80018ec:	e632      	b.n	8001554 <HAL_PCD_IRQHandler+0xec>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80018ee:	3601      	adds	r6, #1
 80018f0:	7923      	ldrb	r3, [r4, #4]
 80018f2:	42b3      	cmp	r3, r6
 80018f4:	d90c      	bls.n	8001910 <HAL_PCD_IRQHandler+0x4a8>
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80018f6:	eb06 03c6 	add.w	r3, r6, r6, lsl #3
 80018fa:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80018fe:	f893 3257 	ldrb.w	r3, [r3, #599]	@ 0x257
 8001902:	2b01      	cmp	r3, #1
 8001904:	d1f3      	bne.n	80018ee <HAL_PCD_IRQHandler+0x486>
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8001906:	b2f1      	uxtb	r1, r6
 8001908:	4620      	mov	r0, r4
 800190a:	f7ff fd93 	bl	8001434 <HAL_PCD_EP_Abort>
 800190e:	e7ee      	b.n	80018ee <HAL_PCD_IRQHandler+0x486>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8001910:	6820      	ldr	r0, [r4, #0]
 8001912:	f001 fc19 	bl	8003148 <USB_ReadInterrupts>
 8001916:	f410 1f80 	tst.w	r0, #1048576	@ 0x100000
 800191a:	d125      	bne.n	8001968 <HAL_PCD_IRQHandler+0x500>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800191c:	6820      	ldr	r0, [r4, #0]
 800191e:	f001 fc13 	bl	8003148 <USB_ReadInterrupts>
 8001922:	f410 1f00 	tst.w	r0, #2097152	@ 0x200000
 8001926:	d059      	beq.n	80019dc <HAL_PCD_IRQHandler+0x574>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001928:	2301      	movs	r3, #1
 800192a:	e026      	b.n	800197a <HAL_PCD_IRQHandler+0x512>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800192c:	3601      	adds	r6, #1
 800192e:	7923      	ldrb	r3, [r4, #4]
 8001930:	42b3      	cmp	r3, r6
 8001932:	d91b      	bls.n	800196c <HAL_PCD_IRQHandler+0x504>
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8001934:	eb05 1346 	add.w	r3, r5, r6, lsl #5
 8001938:	f8d3 2900 	ldr.w	r2, [r3, #2304]	@ 0x900
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800193c:	eb06 03c6 	add.w	r3, r6, r6, lsl #3
 8001940:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8001944:	7e1b      	ldrb	r3, [r3, #24]
 8001946:	2b01      	cmp	r3, #1
 8001948:	d1f0      	bne.n	800192c <HAL_PCD_IRQHandler+0x4c4>
 800194a:	2a00      	cmp	r2, #0
 800194c:	daee      	bge.n	800192c <HAL_PCD_IRQHandler+0x4c4>
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800194e:	eb06 03c6 	add.w	r3, r6, r6, lsl #3
 8001952:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8001956:	2201      	movs	r2, #1
 8001958:	75da      	strb	r2, [r3, #23]
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 800195a:	f066 017f 	orn	r1, r6, #127	@ 0x7f
 800195e:	b2c9      	uxtb	r1, r1
 8001960:	4620      	mov	r0, r4
 8001962:	f7ff fd67 	bl	8001434 <HAL_PCD_EP_Abort>
 8001966:	e7e1      	b.n	800192c <HAL_PCD_IRQHandler+0x4c4>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001968:	2601      	movs	r6, #1
 800196a:	e7e0      	b.n	800192e <HAL_PCD_IRQHandler+0x4c6>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800196c:	6822      	ldr	r2, [r4, #0]
 800196e:	6953      	ldr	r3, [r2, #20]
 8001970:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001974:	6153      	str	r3, [r2, #20]
 8001976:	e7d1      	b.n	800191c <HAL_PCD_IRQHandler+0x4b4>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001978:	3301      	adds	r3, #1
 800197a:	7922      	ldrb	r2, [r4, #4]
 800197c:	429a      	cmp	r2, r3
 800197e:	d928      	bls.n	80019d2 <HAL_PCD_IRQHandler+0x56a>
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8001980:	eb05 1243 	add.w	r2, r5, r3, lsl #5
 8001984:	f8d2 1b00 	ldr.w	r1, [r2, #2816]	@ 0xb00
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8001988:	eb03 02c3 	add.w	r2, r3, r3, lsl #3
 800198c:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8001990:	f892 2258 	ldrb.w	r2, [r2, #600]	@ 0x258
 8001994:	2a01      	cmp	r2, #1
 8001996:	d1ef      	bne.n	8001978 <HAL_PCD_IRQHandler+0x510>
 8001998:	2900      	cmp	r1, #0
 800199a:	daed      	bge.n	8001978 <HAL_PCD_IRQHandler+0x510>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 800199c:	f401 3180 	and.w	r1, r1, #65536	@ 0x10000
 80019a0:	f8d4 24d4 	ldr.w	r2, [r4, #1236]	@ 0x4d4
 80019a4:	f002 0201 	and.w	r2, r2, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80019a8:	4291      	cmp	r1, r2
 80019aa:	d1e5      	bne.n	8001978 <HAL_PCD_IRQHandler+0x510>
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80019ac:	eb03 02c3 	add.w	r2, r3, r3, lsl #3
 80019b0:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 80019b4:	2101      	movs	r1, #1
 80019b6:	f882 1257 	strb.w	r1, [r2, #599]	@ 0x257
          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80019ba:	69aa      	ldr	r2, [r5, #24]
 80019bc:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80019c0:	61aa      	str	r2, [r5, #24]
          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80019c2:	696a      	ldr	r2, [r5, #20]
 80019c4:	f012 0f80 	tst.w	r2, #128	@ 0x80
 80019c8:	d1d6      	bne.n	8001978 <HAL_PCD_IRQHandler+0x510>
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80019d0:	607b      	str	r3, [r7, #4]
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80019d2:	6822      	ldr	r2, [r4, #0]
 80019d4:	6953      	ldr	r3, [r2, #20]
 80019d6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80019da:	6153      	str	r3, [r2, #20]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80019dc:	6820      	ldr	r0, [r4, #0]
 80019de:	f001 fbb3 	bl	8003148 <USB_ReadInterrupts>
 80019e2:	f010 4f80 	tst.w	r0, #1073741824	@ 0x40000000
 80019e6:	d110      	bne.n	8001a0a <HAL_PCD_IRQHandler+0x5a2>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80019e8:	6820      	ldr	r0, [r4, #0]
 80019ea:	f001 fbad 	bl	8003148 <USB_ReadInterrupts>
 80019ee:	f010 0f04 	tst.w	r0, #4
 80019f2:	f43f ad42 	beq.w	800147a <HAL_PCD_IRQHandler+0x12>
      RegVal = hpcd->Instance->GOTGINT;
 80019f6:	6823      	ldr	r3, [r4, #0]
 80019f8:	685d      	ldr	r5, [r3, #4]
      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80019fa:	f015 0f04 	tst.w	r5, #4
 80019fe:	d10d      	bne.n	8001a1c <HAL_PCD_IRQHandler+0x5b4>
      hpcd->Instance->GOTGINT |= RegVal;
 8001a00:	6822      	ldr	r2, [r4, #0]
 8001a02:	6853      	ldr	r3, [r2, #4]
 8001a04:	432b      	orrs	r3, r5
 8001a06:	6053      	str	r3, [r2, #4]
 8001a08:	e537      	b.n	800147a <HAL_PCD_IRQHandler+0x12>
      HAL_PCD_ConnectCallback(hpcd);
 8001a0a:	4620      	mov	r0, r4
 8001a0c:	f002 fc2e 	bl	800426c <HAL_PCD_ConnectCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8001a10:	6822      	ldr	r2, [r4, #0]
 8001a12:	6953      	ldr	r3, [r2, #20]
 8001a14:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8001a18:	6153      	str	r3, [r2, #20]
 8001a1a:	e7e5      	b.n	80019e8 <HAL_PCD_IRQHandler+0x580>
        HAL_PCD_DisconnectCallback(hpcd);
 8001a1c:	4620      	mov	r0, r4
 8001a1e:	f002 fc2b 	bl	8004278 <HAL_PCD_DisconnectCallback>
 8001a22:	e7ed      	b.n	8001a00 <HAL_PCD_IRQHandler+0x598>

08001a24 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8001a24:	b410      	push	{r4}
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8001a26:	6804      	ldr	r4, [r0, #0]
 8001a28:	6a60      	ldr	r0, [r4, #36]	@ 0x24

  if (fifo == 0U)
 8001a2a:	b931      	cbnz	r1, 8001a3a <HAL_PCDEx_SetTxFiFo+0x16>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8001a2c:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 8001a30:	62a0      	str	r0, [r4, #40]	@ 0x28
    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
  }

  return HAL_OK;
}
 8001a32:	2000      	movs	r0, #0
 8001a34:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001a38:	4770      	bx	lr
 8001a3a:	468c      	mov	ip, r1
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8001a3c:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8001a3e:	eb00 4013 	add.w	r0, r0, r3, lsr #16
    for (i = 0U; i < (fifo - 1U); i++)
 8001a42:	2300      	movs	r3, #0
 8001a44:	e008      	b.n	8001a58 <HAL_PCDEx_SetTxFiFo+0x34>
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8001a46:	f103 0140 	add.w	r1, r3, #64	@ 0x40
 8001a4a:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8001a4e:	6849      	ldr	r1, [r1, #4]
 8001a50:	eb00 4011 	add.w	r0, r0, r1, lsr #16
    for (i = 0U; i < (fifo - 1U); i++)
 8001a54:	3301      	adds	r3, #1
 8001a56:	b2db      	uxtb	r3, r3
 8001a58:	f10c 31ff 	add.w	r1, ip, #4294967295	@ 0xffffffff
 8001a5c:	428b      	cmp	r3, r1
 8001a5e:	d3f2      	bcc.n	8001a46 <HAL_PCDEx_SetTxFiFo+0x22>
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8001a60:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 8001a64:	f10c 013f 	add.w	r1, ip, #63	@ 0x3f
 8001a68:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 8001a6c:	6060      	str	r0, [r4, #4]
 8001a6e:	e7e0      	b.n	8001a32 <HAL_PCDEx_SetTxFiFo+0xe>

08001a70 <HAL_PCDEx_SetRxFiFo>:
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
  hpcd->Instance->GRXFSIZ = size;
 8001a70:	6803      	ldr	r3, [r0, #0]
 8001a72:	6259      	str	r1, [r3, #36]	@ 0x24

  return HAL_OK;
}
 8001a74:	2000      	movs	r0, #0
 8001a76:	4770      	bx	lr

08001a78 <HAL_PCDEx_LPM_Callback>:
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8001a78:	4770      	bx	lr
	...

08001a7c <HAL_RCC_OscConfig>:
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001a7c:	2800      	cmp	r0, #0
 8001a7e:	f000 81e0 	beq.w	8001e42 <HAL_RCC_OscConfig+0x3c6>
{
 8001a82:	b570      	push	{r4, r5, r6, lr}
 8001a84:	b082      	sub	sp, #8
 8001a86:	4604      	mov	r4, r0
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a88:	6803      	ldr	r3, [r0, #0]
 8001a8a:	f013 0f01 	tst.w	r3, #1
 8001a8e:	d03b      	beq.n	8001b08 <HAL_RCC_OscConfig+0x8c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001a90:	4b9f      	ldr	r3, [pc, #636]	@ (8001d10 <HAL_RCC_OscConfig+0x294>)
 8001a92:	689b      	ldr	r3, [r3, #8]
 8001a94:	f003 030c 	and.w	r3, r3, #12
 8001a98:	2b04      	cmp	r3, #4
 8001a9a:	d02c      	beq.n	8001af6 <HAL_RCC_OscConfig+0x7a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001a9c:	4b9c      	ldr	r3, [pc, #624]	@ (8001d10 <HAL_RCC_OscConfig+0x294>)
 8001a9e:	689b      	ldr	r3, [r3, #8]
 8001aa0:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001aa4:	2b08      	cmp	r3, #8
 8001aa6:	d021      	beq.n	8001aec <HAL_RCC_OscConfig+0x70>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001aa8:	6863      	ldr	r3, [r4, #4]
 8001aaa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001aae:	d04f      	beq.n	8001b50 <HAL_RCC_OscConfig+0xd4>
 8001ab0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001ab4:	d052      	beq.n	8001b5c <HAL_RCC_OscConfig+0xe0>
 8001ab6:	4b96      	ldr	r3, [pc, #600]	@ (8001d10 <HAL_RCC_OscConfig+0x294>)
 8001ab8:	681a      	ldr	r2, [r3, #0]
 8001aba:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8001abe:	601a      	str	r2, [r3, #0]
 8001ac0:	681a      	ldr	r2, [r3, #0]
 8001ac2:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8001ac6:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001ac8:	6863      	ldr	r3, [r4, #4]
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d050      	beq.n	8001b70 <HAL_RCC_OscConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ace:	f7ff f83d 	bl	8000b4c <HAL_GetTick>
 8001ad2:	4605      	mov	r5, r0

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ad4:	4b8e      	ldr	r3, [pc, #568]	@ (8001d10 <HAL_RCC_OscConfig+0x294>)
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8001adc:	d114      	bne.n	8001b08 <HAL_RCC_OscConfig+0x8c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ade:	f7ff f835 	bl	8000b4c <HAL_GetTick>
 8001ae2:	1b40      	subs	r0, r0, r5
 8001ae4:	2864      	cmp	r0, #100	@ 0x64
 8001ae6:	d9f5      	bls.n	8001ad4 <HAL_RCC_OscConfig+0x58>
          {
            return HAL_TIMEOUT;
 8001ae8:	2003      	movs	r0, #3
 8001aea:	e1b1      	b.n	8001e50 <HAL_RCC_OscConfig+0x3d4>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001aec:	4b88      	ldr	r3, [pc, #544]	@ (8001d10 <HAL_RCC_OscConfig+0x294>)
 8001aee:	685b      	ldr	r3, [r3, #4]
 8001af0:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 8001af4:	d0d8      	beq.n	8001aa8 <HAL_RCC_OscConfig+0x2c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001af6:	4b86      	ldr	r3, [pc, #536]	@ (8001d10 <HAL_RCC_OscConfig+0x294>)
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8001afe:	d003      	beq.n	8001b08 <HAL_RCC_OscConfig+0x8c>
 8001b00:	6863      	ldr	r3, [r4, #4]
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	f000 819f 	beq.w	8001e46 <HAL_RCC_OscConfig+0x3ca>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b08:	6823      	ldr	r3, [r4, #0]
 8001b0a:	f013 0f02 	tst.w	r3, #2
 8001b0e:	d054      	beq.n	8001bba <HAL_RCC_OscConfig+0x13e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001b10:	4b7f      	ldr	r3, [pc, #508]	@ (8001d10 <HAL_RCC_OscConfig+0x294>)
 8001b12:	689b      	ldr	r3, [r3, #8]
 8001b14:	f013 0f0c 	tst.w	r3, #12
 8001b18:	d03e      	beq.n	8001b98 <HAL_RCC_OscConfig+0x11c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001b1a:	4b7d      	ldr	r3, [pc, #500]	@ (8001d10 <HAL_RCC_OscConfig+0x294>)
 8001b1c:	689b      	ldr	r3, [r3, #8]
 8001b1e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001b22:	2b08      	cmp	r3, #8
 8001b24:	d033      	beq.n	8001b8e <HAL_RCC_OscConfig+0x112>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001b26:	68e3      	ldr	r3, [r4, #12]
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d068      	beq.n	8001bfe <HAL_RCC_OscConfig+0x182>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001b2c:	4b79      	ldr	r3, [pc, #484]	@ (8001d14 <HAL_RCC_OscConfig+0x298>)
 8001b2e:	2201      	movs	r2, #1
 8001b30:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b32:	f7ff f80b 	bl	8000b4c <HAL_GetTick>
 8001b36:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b38:	4b75      	ldr	r3, [pc, #468]	@ (8001d10 <HAL_RCC_OscConfig+0x294>)
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	f013 0f02 	tst.w	r3, #2
 8001b40:	d154      	bne.n	8001bec <HAL_RCC_OscConfig+0x170>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b42:	f7ff f803 	bl	8000b4c <HAL_GetTick>
 8001b46:	1b40      	subs	r0, r0, r5
 8001b48:	2802      	cmp	r0, #2
 8001b4a:	d9f5      	bls.n	8001b38 <HAL_RCC_OscConfig+0xbc>
          {
            return HAL_TIMEOUT;
 8001b4c:	2003      	movs	r0, #3
 8001b4e:	e17f      	b.n	8001e50 <HAL_RCC_OscConfig+0x3d4>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b50:	4a6f      	ldr	r2, [pc, #444]	@ (8001d10 <HAL_RCC_OscConfig+0x294>)
 8001b52:	6813      	ldr	r3, [r2, #0]
 8001b54:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001b58:	6013      	str	r3, [r2, #0]
 8001b5a:	e7b5      	b.n	8001ac8 <HAL_RCC_OscConfig+0x4c>
 8001b5c:	4b6c      	ldr	r3, [pc, #432]	@ (8001d10 <HAL_RCC_OscConfig+0x294>)
 8001b5e:	681a      	ldr	r2, [r3, #0]
 8001b60:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8001b64:	601a      	str	r2, [r3, #0]
 8001b66:	681a      	ldr	r2, [r3, #0]
 8001b68:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8001b6c:	601a      	str	r2, [r3, #0]
 8001b6e:	e7ab      	b.n	8001ac8 <HAL_RCC_OscConfig+0x4c>
        tickstart = HAL_GetTick();
 8001b70:	f7fe ffec 	bl	8000b4c <HAL_GetTick>
 8001b74:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b76:	4b66      	ldr	r3, [pc, #408]	@ (8001d10 <HAL_RCC_OscConfig+0x294>)
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8001b7e:	d0c3      	beq.n	8001b08 <HAL_RCC_OscConfig+0x8c>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b80:	f7fe ffe4 	bl	8000b4c <HAL_GetTick>
 8001b84:	1b40      	subs	r0, r0, r5
 8001b86:	2864      	cmp	r0, #100	@ 0x64
 8001b88:	d9f5      	bls.n	8001b76 <HAL_RCC_OscConfig+0xfa>
            return HAL_TIMEOUT;
 8001b8a:	2003      	movs	r0, #3
 8001b8c:	e160      	b.n	8001e50 <HAL_RCC_OscConfig+0x3d4>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001b8e:	4b60      	ldr	r3, [pc, #384]	@ (8001d10 <HAL_RCC_OscConfig+0x294>)
 8001b90:	685b      	ldr	r3, [r3, #4]
 8001b92:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 8001b96:	d1c6      	bne.n	8001b26 <HAL_RCC_OscConfig+0xaa>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b98:	4b5d      	ldr	r3, [pc, #372]	@ (8001d10 <HAL_RCC_OscConfig+0x294>)
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	f013 0f02 	tst.w	r3, #2
 8001ba0:	d003      	beq.n	8001baa <HAL_RCC_OscConfig+0x12e>
 8001ba2:	68e3      	ldr	r3, [r4, #12]
 8001ba4:	2b01      	cmp	r3, #1
 8001ba6:	f040 8150 	bne.w	8001e4a <HAL_RCC_OscConfig+0x3ce>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001baa:	4a59      	ldr	r2, [pc, #356]	@ (8001d10 <HAL_RCC_OscConfig+0x294>)
 8001bac:	6813      	ldr	r3, [r2, #0]
 8001bae:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8001bb2:	6921      	ldr	r1, [r4, #16]
 8001bb4:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001bb8:	6013      	str	r3, [r2, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001bba:	6823      	ldr	r3, [r4, #0]
 8001bbc:	f013 0f08 	tst.w	r3, #8
 8001bc0:	d042      	beq.n	8001c48 <HAL_RCC_OscConfig+0x1cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001bc2:	6963      	ldr	r3, [r4, #20]
 8001bc4:	b36b      	cbz	r3, 8001c22 <HAL_RCC_OscConfig+0x1a6>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001bc6:	4b53      	ldr	r3, [pc, #332]	@ (8001d14 <HAL_RCC_OscConfig+0x298>)
 8001bc8:	2201      	movs	r2, #1
 8001bca:	f8c3 2e80 	str.w	r2, [r3, #3712]	@ 0xe80

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bce:	f7fe ffbd 	bl	8000b4c <HAL_GetTick>
 8001bd2:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001bd4:	4b4e      	ldr	r3, [pc, #312]	@ (8001d10 <HAL_RCC_OscConfig+0x294>)
 8001bd6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001bd8:	f013 0f02 	tst.w	r3, #2
 8001bdc:	d134      	bne.n	8001c48 <HAL_RCC_OscConfig+0x1cc>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001bde:	f7fe ffb5 	bl	8000b4c <HAL_GetTick>
 8001be2:	1b40      	subs	r0, r0, r5
 8001be4:	2802      	cmp	r0, #2
 8001be6:	d9f5      	bls.n	8001bd4 <HAL_RCC_OscConfig+0x158>
        {
          return HAL_TIMEOUT;
 8001be8:	2003      	movs	r0, #3
 8001bea:	e131      	b.n	8001e50 <HAL_RCC_OscConfig+0x3d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bec:	4a48      	ldr	r2, [pc, #288]	@ (8001d10 <HAL_RCC_OscConfig+0x294>)
 8001bee:	6813      	ldr	r3, [r2, #0]
 8001bf0:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8001bf4:	6921      	ldr	r1, [r4, #16]
 8001bf6:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001bfa:	6013      	str	r3, [r2, #0]
 8001bfc:	e7dd      	b.n	8001bba <HAL_RCC_OscConfig+0x13e>
        __HAL_RCC_HSI_DISABLE();
 8001bfe:	4b45      	ldr	r3, [pc, #276]	@ (8001d14 <HAL_RCC_OscConfig+0x298>)
 8001c00:	2200      	movs	r2, #0
 8001c02:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001c04:	f7fe ffa2 	bl	8000b4c <HAL_GetTick>
 8001c08:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c0a:	4b41      	ldr	r3, [pc, #260]	@ (8001d10 <HAL_RCC_OscConfig+0x294>)
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	f013 0f02 	tst.w	r3, #2
 8001c12:	d0d2      	beq.n	8001bba <HAL_RCC_OscConfig+0x13e>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c14:	f7fe ff9a 	bl	8000b4c <HAL_GetTick>
 8001c18:	1b40      	subs	r0, r0, r5
 8001c1a:	2802      	cmp	r0, #2
 8001c1c:	d9f5      	bls.n	8001c0a <HAL_RCC_OscConfig+0x18e>
            return HAL_TIMEOUT;
 8001c1e:	2003      	movs	r0, #3
 8001c20:	e116      	b.n	8001e50 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001c22:	4b3c      	ldr	r3, [pc, #240]	@ (8001d14 <HAL_RCC_OscConfig+0x298>)
 8001c24:	2200      	movs	r2, #0
 8001c26:	f8c3 2e80 	str.w	r2, [r3, #3712]	@ 0xe80

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c2a:	f7fe ff8f 	bl	8000b4c <HAL_GetTick>
 8001c2e:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c30:	4b37      	ldr	r3, [pc, #220]	@ (8001d10 <HAL_RCC_OscConfig+0x294>)
 8001c32:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001c34:	f013 0f02 	tst.w	r3, #2
 8001c38:	d006      	beq.n	8001c48 <HAL_RCC_OscConfig+0x1cc>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c3a:	f7fe ff87 	bl	8000b4c <HAL_GetTick>
 8001c3e:	1b40      	subs	r0, r0, r5
 8001c40:	2802      	cmp	r0, #2
 8001c42:	d9f5      	bls.n	8001c30 <HAL_RCC_OscConfig+0x1b4>
        {
          return HAL_TIMEOUT;
 8001c44:	2003      	movs	r0, #3
 8001c46:	e103      	b.n	8001e50 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c48:	6823      	ldr	r3, [r4, #0]
 8001c4a:	f013 0f04 	tst.w	r3, #4
 8001c4e:	d077      	beq.n	8001d40 <HAL_RCC_OscConfig+0x2c4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c50:	4b2f      	ldr	r3, [pc, #188]	@ (8001d10 <HAL_RCC_OscConfig+0x294>)
 8001c52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c54:	f013 5f80 	tst.w	r3, #268435456	@ 0x10000000
 8001c58:	d133      	bne.n	8001cc2 <HAL_RCC_OscConfig+0x246>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	9301      	str	r3, [sp, #4]
 8001c5e:	4b2c      	ldr	r3, [pc, #176]	@ (8001d10 <HAL_RCC_OscConfig+0x294>)
 8001c60:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001c62:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8001c66:	641a      	str	r2, [r3, #64]	@ 0x40
 8001c68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c6a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c6e:	9301      	str	r3, [sp, #4]
 8001c70:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8001c72:	2501      	movs	r5, #1
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c74:	4b28      	ldr	r3, [pc, #160]	@ (8001d18 <HAL_RCC_OscConfig+0x29c>)
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8001c7c:	d023      	beq.n	8001cc6 <HAL_RCC_OscConfig+0x24a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c7e:	68a3      	ldr	r3, [r4, #8]
 8001c80:	2b01      	cmp	r3, #1
 8001c82:	d034      	beq.n	8001cee <HAL_RCC_OscConfig+0x272>
 8001c84:	2b05      	cmp	r3, #5
 8001c86:	d038      	beq.n	8001cfa <HAL_RCC_OscConfig+0x27e>
 8001c88:	4b21      	ldr	r3, [pc, #132]	@ (8001d10 <HAL_RCC_OscConfig+0x294>)
 8001c8a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8001c8c:	f022 0201 	bic.w	r2, r2, #1
 8001c90:	671a      	str	r2, [r3, #112]	@ 0x70
 8001c92:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8001c94:	f022 0204 	bic.w	r2, r2, #4
 8001c98:	671a      	str	r2, [r3, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001c9a:	68a3      	ldr	r3, [r4, #8]
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d03d      	beq.n	8001d1c <HAL_RCC_OscConfig+0x2a0>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ca0:	f7fe ff54 	bl	8000b4c <HAL_GetTick>
 8001ca4:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ca6:	4b1a      	ldr	r3, [pc, #104]	@ (8001d10 <HAL_RCC_OscConfig+0x294>)
 8001ca8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001caa:	f013 0f02 	tst.w	r3, #2
 8001cae:	d146      	bne.n	8001d3e <HAL_RCC_OscConfig+0x2c2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001cb0:	f7fe ff4c 	bl	8000b4c <HAL_GetTick>
 8001cb4:	1b80      	subs	r0, r0, r6
 8001cb6:	f241 3388 	movw	r3, #5000	@ 0x1388
 8001cba:	4298      	cmp	r0, r3
 8001cbc:	d9f3      	bls.n	8001ca6 <HAL_RCC_OscConfig+0x22a>
        {
          return HAL_TIMEOUT;
 8001cbe:	2003      	movs	r0, #3
 8001cc0:	e0c6      	b.n	8001e50 <HAL_RCC_OscConfig+0x3d4>
    FlagStatus       pwrclkchanged = RESET;
 8001cc2:	2500      	movs	r5, #0
 8001cc4:	e7d6      	b.n	8001c74 <HAL_RCC_OscConfig+0x1f8>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001cc6:	4a14      	ldr	r2, [pc, #80]	@ (8001d18 <HAL_RCC_OscConfig+0x29c>)
 8001cc8:	6813      	ldr	r3, [r2, #0]
 8001cca:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001cce:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8001cd0:	f7fe ff3c 	bl	8000b4c <HAL_GetTick>
 8001cd4:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cd6:	4b10      	ldr	r3, [pc, #64]	@ (8001d18 <HAL_RCC_OscConfig+0x29c>)
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8001cde:	d1ce      	bne.n	8001c7e <HAL_RCC_OscConfig+0x202>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ce0:	f7fe ff34 	bl	8000b4c <HAL_GetTick>
 8001ce4:	1b80      	subs	r0, r0, r6
 8001ce6:	2802      	cmp	r0, #2
 8001ce8:	d9f5      	bls.n	8001cd6 <HAL_RCC_OscConfig+0x25a>
          return HAL_TIMEOUT;
 8001cea:	2003      	movs	r0, #3
 8001cec:	e0b0      	b.n	8001e50 <HAL_RCC_OscConfig+0x3d4>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001cee:	4a08      	ldr	r2, [pc, #32]	@ (8001d10 <HAL_RCC_OscConfig+0x294>)
 8001cf0:	6f13      	ldr	r3, [r2, #112]	@ 0x70
 8001cf2:	f043 0301 	orr.w	r3, r3, #1
 8001cf6:	6713      	str	r3, [r2, #112]	@ 0x70
 8001cf8:	e7cf      	b.n	8001c9a <HAL_RCC_OscConfig+0x21e>
 8001cfa:	4b05      	ldr	r3, [pc, #20]	@ (8001d10 <HAL_RCC_OscConfig+0x294>)
 8001cfc:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8001cfe:	f042 0204 	orr.w	r2, r2, #4
 8001d02:	671a      	str	r2, [r3, #112]	@ 0x70
 8001d04:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8001d06:	f042 0201 	orr.w	r2, r2, #1
 8001d0a:	671a      	str	r2, [r3, #112]	@ 0x70
 8001d0c:	e7c5      	b.n	8001c9a <HAL_RCC_OscConfig+0x21e>
 8001d0e:	bf00      	nop
 8001d10:	40023800 	.word	0x40023800
 8001d14:	42470000 	.word	0x42470000
 8001d18:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d1c:	f7fe ff16 	bl	8000b4c <HAL_GetTick>
 8001d20:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d22:	4b52      	ldr	r3, [pc, #328]	@ (8001e6c <HAL_RCC_OscConfig+0x3f0>)
 8001d24:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d26:	f013 0f02 	tst.w	r3, #2
 8001d2a:	d008      	beq.n	8001d3e <HAL_RCC_OscConfig+0x2c2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d2c:	f7fe ff0e 	bl	8000b4c <HAL_GetTick>
 8001d30:	1b80      	subs	r0, r0, r6
 8001d32:	f241 3388 	movw	r3, #5000	@ 0x1388
 8001d36:	4298      	cmp	r0, r3
 8001d38:	d9f3      	bls.n	8001d22 <HAL_RCC_OscConfig+0x2a6>
        {
          return HAL_TIMEOUT;
 8001d3a:	2003      	movs	r0, #3
 8001d3c:	e088      	b.n	8001e50 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001d3e:	b9ed      	cbnz	r5, 8001d7c <HAL_RCC_OscConfig+0x300>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001d40:	69a3      	ldr	r3, [r4, #24]
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	f000 8083 	beq.w	8001e4e <HAL_RCC_OscConfig+0x3d2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001d48:	4a48      	ldr	r2, [pc, #288]	@ (8001e6c <HAL_RCC_OscConfig+0x3f0>)
 8001d4a:	6892      	ldr	r2, [r2, #8]
 8001d4c:	f002 020c 	and.w	r2, r2, #12
 8001d50:	2a08      	cmp	r2, #8
 8001d52:	d051      	beq.n	8001df8 <HAL_RCC_OscConfig+0x37c>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001d54:	2b02      	cmp	r3, #2
 8001d56:	d017      	beq.n	8001d88 <HAL_RCC_OscConfig+0x30c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d58:	4b45      	ldr	r3, [pc, #276]	@ (8001e70 <HAL_RCC_OscConfig+0x3f4>)
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d5e:	f7fe fef5 	bl	8000b4c <HAL_GetTick>
 8001d62:	4604      	mov	r4, r0

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d64:	4b41      	ldr	r3, [pc, #260]	@ (8001e6c <HAL_RCC_OscConfig+0x3f0>)
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8001d6c:	d042      	beq.n	8001df4 <HAL_RCC_OscConfig+0x378>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d6e:	f7fe feed 	bl	8000b4c <HAL_GetTick>
 8001d72:	1b00      	subs	r0, r0, r4
 8001d74:	2802      	cmp	r0, #2
 8001d76:	d9f5      	bls.n	8001d64 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8001d78:	2003      	movs	r0, #3
 8001d7a:	e069      	b.n	8001e50 <HAL_RCC_OscConfig+0x3d4>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d7c:	4a3b      	ldr	r2, [pc, #236]	@ (8001e6c <HAL_RCC_OscConfig+0x3f0>)
 8001d7e:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8001d80:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001d84:	6413      	str	r3, [r2, #64]	@ 0x40
 8001d86:	e7db      	b.n	8001d40 <HAL_RCC_OscConfig+0x2c4>
        __HAL_RCC_PLL_DISABLE();
 8001d88:	4b39      	ldr	r3, [pc, #228]	@ (8001e70 <HAL_RCC_OscConfig+0x3f4>)
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	661a      	str	r2, [r3, #96]	@ 0x60
        tickstart = HAL_GetTick();
 8001d8e:	f7fe fedd 	bl	8000b4c <HAL_GetTick>
 8001d92:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d94:	4b35      	ldr	r3, [pc, #212]	@ (8001e6c <HAL_RCC_OscConfig+0x3f0>)
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8001d9c:	d006      	beq.n	8001dac <HAL_RCC_OscConfig+0x330>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d9e:	f7fe fed5 	bl	8000b4c <HAL_GetTick>
 8001da2:	1b40      	subs	r0, r0, r5
 8001da4:	2802      	cmp	r0, #2
 8001da6:	d9f5      	bls.n	8001d94 <HAL_RCC_OscConfig+0x318>
            return HAL_TIMEOUT;
 8001da8:	2003      	movs	r0, #3
 8001daa:	e051      	b.n	8001e50 <HAL_RCC_OscConfig+0x3d4>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001dac:	69e3      	ldr	r3, [r4, #28]
 8001dae:	6a22      	ldr	r2, [r4, #32]
 8001db0:	4313      	orrs	r3, r2
 8001db2:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8001db4:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8001db8:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8001dba:	0852      	lsrs	r2, r2, #1
 8001dbc:	3a01      	subs	r2, #1
 8001dbe:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8001dc2:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8001dc4:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8001dc8:	4a28      	ldr	r2, [pc, #160]	@ (8001e6c <HAL_RCC_OscConfig+0x3f0>)
 8001dca:	6053      	str	r3, [r2, #4]
        __HAL_RCC_PLL_ENABLE();
 8001dcc:	4b28      	ldr	r3, [pc, #160]	@ (8001e70 <HAL_RCC_OscConfig+0x3f4>)
 8001dce:	2201      	movs	r2, #1
 8001dd0:	661a      	str	r2, [r3, #96]	@ 0x60
        tickstart = HAL_GetTick();
 8001dd2:	f7fe febb 	bl	8000b4c <HAL_GetTick>
 8001dd6:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001dd8:	4b24      	ldr	r3, [pc, #144]	@ (8001e6c <HAL_RCC_OscConfig+0x3f0>)
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8001de0:	d106      	bne.n	8001df0 <HAL_RCC_OscConfig+0x374>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001de2:	f7fe feb3 	bl	8000b4c <HAL_GetTick>
 8001de6:	1b00      	subs	r0, r0, r4
 8001de8:	2802      	cmp	r0, #2
 8001dea:	d9f5      	bls.n	8001dd8 <HAL_RCC_OscConfig+0x35c>
            return HAL_TIMEOUT;
 8001dec:	2003      	movs	r0, #3
 8001dee:	e02f      	b.n	8001e50 <HAL_RCC_OscConfig+0x3d4>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 8001df0:	2000      	movs	r0, #0
 8001df2:	e02d      	b.n	8001e50 <HAL_RCC_OscConfig+0x3d4>
 8001df4:	2000      	movs	r0, #0
 8001df6:	e02b      	b.n	8001e50 <HAL_RCC_OscConfig+0x3d4>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001df8:	2b01      	cmp	r3, #1
 8001dfa:	d02b      	beq.n	8001e54 <HAL_RCC_OscConfig+0x3d8>
        pll_config = RCC->PLLCFGR;
 8001dfc:	4b1b      	ldr	r3, [pc, #108]	@ (8001e6c <HAL_RCC_OscConfig+0x3f0>)
 8001dfe:	685b      	ldr	r3, [r3, #4]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e00:	f403 0180 	and.w	r1, r3, #4194304	@ 0x400000
 8001e04:	69e2      	ldr	r2, [r4, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001e06:	4291      	cmp	r1, r2
 8001e08:	d126      	bne.n	8001e58 <HAL_RCC_OscConfig+0x3dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001e0a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001e0e:	6a21      	ldr	r1, [r4, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e10:	428a      	cmp	r2, r1
 8001e12:	d123      	bne.n	8001e5c <HAL_RCC_OscConfig+0x3e0>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001e14:	6a61      	ldr	r1, [r4, #36]	@ 0x24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001e16:	f647 72c0 	movw	r2, #32704	@ 0x7fc0
 8001e1a:	401a      	ands	r2, r3
 8001e1c:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 8001e20:	d11e      	bne.n	8001e60 <HAL_RCC_OscConfig+0x3e4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001e22:	f403 3140 	and.w	r1, r3, #196608	@ 0x30000
 8001e26:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8001e28:	0852      	lsrs	r2, r2, #1
 8001e2a:	3a01      	subs	r2, #1
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001e2c:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 8001e30:	d118      	bne.n	8001e64 <HAL_RCC_OscConfig+0x3e8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001e32:	f003 6370 	and.w	r3, r3, #251658240	@ 0xf000000
 8001e36:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001e38:	ebb3 6f02 	cmp.w	r3, r2, lsl #24
 8001e3c:	d114      	bne.n	8001e68 <HAL_RCC_OscConfig+0x3ec>
  return HAL_OK;
 8001e3e:	2000      	movs	r0, #0
 8001e40:	e006      	b.n	8001e50 <HAL_RCC_OscConfig+0x3d4>
    return HAL_ERROR;
 8001e42:	2001      	movs	r0, #1
}
 8001e44:	4770      	bx	lr
        return HAL_ERROR;
 8001e46:	2001      	movs	r0, #1
 8001e48:	e002      	b.n	8001e50 <HAL_RCC_OscConfig+0x3d4>
        return HAL_ERROR;
 8001e4a:	2001      	movs	r0, #1
 8001e4c:	e000      	b.n	8001e50 <HAL_RCC_OscConfig+0x3d4>
  return HAL_OK;
 8001e4e:	2000      	movs	r0, #0
}
 8001e50:	b002      	add	sp, #8
 8001e52:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 8001e54:	2001      	movs	r0, #1
 8001e56:	e7fb      	b.n	8001e50 <HAL_RCC_OscConfig+0x3d4>
          return HAL_ERROR;
 8001e58:	2001      	movs	r0, #1
 8001e5a:	e7f9      	b.n	8001e50 <HAL_RCC_OscConfig+0x3d4>
 8001e5c:	2001      	movs	r0, #1
 8001e5e:	e7f7      	b.n	8001e50 <HAL_RCC_OscConfig+0x3d4>
 8001e60:	2001      	movs	r0, #1
 8001e62:	e7f5      	b.n	8001e50 <HAL_RCC_OscConfig+0x3d4>
 8001e64:	2001      	movs	r0, #1
 8001e66:	e7f3      	b.n	8001e50 <HAL_RCC_OscConfig+0x3d4>
 8001e68:	2001      	movs	r0, #1
 8001e6a:	e7f1      	b.n	8001e50 <HAL_RCC_OscConfig+0x3d4>
 8001e6c:	40023800 	.word	0x40023800
 8001e70:	42470000 	.word	0x42470000

08001e74 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001e74:	b508      	push	{r3, lr}
  uint32_t pllvco = 0U;
  uint32_t pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001e76:	4b26      	ldr	r3, [pc, #152]	@ (8001f10 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001e78:	689b      	ldr	r3, [r3, #8]
 8001e7a:	f003 030c 	and.w	r3, r3, #12
 8001e7e:	2b04      	cmp	r3, #4
 8001e80:	d041      	beq.n	8001f06 <HAL_RCC_GetSysClockFreq+0x92>
 8001e82:	2b08      	cmp	r3, #8
 8001e84:	d141      	bne.n	8001f0a <HAL_RCC_GetSysClockFreq+0x96>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001e86:	4b22      	ldr	r3, [pc, #136]	@ (8001f10 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001e88:	685a      	ldr	r2, [r3, #4]
 8001e8a:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001e8e:	685b      	ldr	r3, [r3, #4]
 8001e90:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 8001e94:	d012      	beq.n	8001ebc <HAL_RCC_GetSysClockFreq+0x48>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001e96:	4b1e      	ldr	r3, [pc, #120]	@ (8001f10 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001e98:	6859      	ldr	r1, [r3, #4]
 8001e9a:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8001e9e:	481d      	ldr	r0, [pc, #116]	@ (8001f14 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001ea0:	2300      	movs	r3, #0
 8001ea2:	fba1 0100 	umull	r0, r1, r1, r0
 8001ea6:	f7fe f9f3 	bl	8000290 <__aeabi_uldivmod>
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8001eaa:	4b19      	ldr	r3, [pc, #100]	@ (8001f10 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001eac:	685b      	ldr	r3, [r3, #4]
 8001eae:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8001eb2:	3301      	adds	r3, #1
 8001eb4:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco / pllp;
 8001eb6:	fbb0 f0f3 	udiv	r0, r0, r3
      break;
 8001eba:	e027      	b.n	8001f0c <HAL_RCC_GetSysClockFreq+0x98>
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001ebc:	4b14      	ldr	r3, [pc, #80]	@ (8001f10 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001ebe:	6858      	ldr	r0, [r3, #4]
 8001ec0:	f3c0 1088 	ubfx	r0, r0, #6, #9
 8001ec4:	ea4f 1c40 	mov.w	ip, r0, lsl #5
 8001ec8:	ebbc 0c00 	subs.w	ip, ip, r0
 8001ecc:	eb6e 0e0e 	sbc.w	lr, lr, lr
 8001ed0:	ea4f 138e 	mov.w	r3, lr, lsl #6
 8001ed4:	ea43 639c 	orr.w	r3, r3, ip, lsr #26
 8001ed8:	ea4f 118c 	mov.w	r1, ip, lsl #6
 8001edc:	ebb1 010c 	subs.w	r1, r1, ip
 8001ee0:	eb63 030e 	sbc.w	r3, r3, lr
 8001ee4:	00db      	lsls	r3, r3, #3
 8001ee6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001eea:	00c9      	lsls	r1, r1, #3
 8001eec:	eb11 0c00 	adds.w	ip, r1, r0
 8001ef0:	f143 0300 	adc.w	r3, r3, #0
 8001ef4:	0299      	lsls	r1, r3, #10
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	ea4f 208c 	mov.w	r0, ip, lsl #10
 8001efc:	ea41 519c 	orr.w	r1, r1, ip, lsr #22
 8001f00:	f7fe f9c6 	bl	8000290 <__aeabi_uldivmod>
 8001f04:	e7d1      	b.n	8001eaa <HAL_RCC_GetSysClockFreq+0x36>
      sysclockfreq = HSE_VALUE;
 8001f06:	4803      	ldr	r0, [pc, #12]	@ (8001f14 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001f08:	e000      	b.n	8001f0c <HAL_RCC_GetSysClockFreq+0x98>
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001f0a:	4803      	ldr	r0, [pc, #12]	@ (8001f18 <HAL_RCC_GetSysClockFreq+0xa4>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8001f0c:	bd08      	pop	{r3, pc}
 8001f0e:	bf00      	nop
 8001f10:	40023800 	.word	0x40023800
 8001f14:	017d7840 	.word	0x017d7840
 8001f18:	00f42400 	.word	0x00f42400

08001f1c <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 8001f1c:	2800      	cmp	r0, #0
 8001f1e:	f000 809b 	beq.w	8002058 <HAL_RCC_ClockConfig+0x13c>
{
 8001f22:	b570      	push	{r4, r5, r6, lr}
 8001f24:	460d      	mov	r5, r1
 8001f26:	4604      	mov	r4, r0
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001f28:	4b4f      	ldr	r3, [pc, #316]	@ (8002068 <HAL_RCC_ClockConfig+0x14c>)
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	f003 0307 	and.w	r3, r3, #7
 8001f30:	428b      	cmp	r3, r1
 8001f32:	d208      	bcs.n	8001f46 <HAL_RCC_ClockConfig+0x2a>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f34:	b2cb      	uxtb	r3, r1
 8001f36:	4a4c      	ldr	r2, [pc, #304]	@ (8002068 <HAL_RCC_ClockConfig+0x14c>)
 8001f38:	7013      	strb	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f3a:	6813      	ldr	r3, [r2, #0]
 8001f3c:	f003 0307 	and.w	r3, r3, #7
 8001f40:	428b      	cmp	r3, r1
 8001f42:	f040 808b 	bne.w	800205c <HAL_RCC_ClockConfig+0x140>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f46:	6823      	ldr	r3, [r4, #0]
 8001f48:	f013 0f02 	tst.w	r3, #2
 8001f4c:	d017      	beq.n	8001f7e <HAL_RCC_ClockConfig+0x62>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f4e:	f013 0f04 	tst.w	r3, #4
 8001f52:	d004      	beq.n	8001f5e <HAL_RCC_ClockConfig+0x42>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001f54:	4a45      	ldr	r2, [pc, #276]	@ (800206c <HAL_RCC_ClockConfig+0x150>)
 8001f56:	6893      	ldr	r3, [r2, #8]
 8001f58:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001f5c:	6093      	str	r3, [r2, #8]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f5e:	6823      	ldr	r3, [r4, #0]
 8001f60:	f013 0f08 	tst.w	r3, #8
 8001f64:	d004      	beq.n	8001f70 <HAL_RCC_ClockConfig+0x54>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001f66:	4a41      	ldr	r2, [pc, #260]	@ (800206c <HAL_RCC_ClockConfig+0x150>)
 8001f68:	6893      	ldr	r3, [r2, #8]
 8001f6a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001f6e:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f70:	4a3e      	ldr	r2, [pc, #248]	@ (800206c <HAL_RCC_ClockConfig+0x150>)
 8001f72:	6893      	ldr	r3, [r2, #8]
 8001f74:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001f78:	68a1      	ldr	r1, [r4, #8]
 8001f7a:	430b      	orrs	r3, r1
 8001f7c:	6093      	str	r3, [r2, #8]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f7e:	6823      	ldr	r3, [r4, #0]
 8001f80:	f013 0f01 	tst.w	r3, #1
 8001f84:	d032      	beq.n	8001fec <HAL_RCC_ClockConfig+0xd0>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f86:	6863      	ldr	r3, [r4, #4]
 8001f88:	2b01      	cmp	r3, #1
 8001f8a:	d021      	beq.n	8001fd0 <HAL_RCC_ClockConfig+0xb4>
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001f8c:	1e9a      	subs	r2, r3, #2
 8001f8e:	2a01      	cmp	r2, #1
 8001f90:	d925      	bls.n	8001fde <HAL_RCC_ClockConfig+0xc2>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f92:	4a36      	ldr	r2, [pc, #216]	@ (800206c <HAL_RCC_ClockConfig+0x150>)
 8001f94:	6812      	ldr	r2, [r2, #0]
 8001f96:	f012 0f02 	tst.w	r2, #2
 8001f9a:	d061      	beq.n	8002060 <HAL_RCC_ClockConfig+0x144>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001f9c:	4933      	ldr	r1, [pc, #204]	@ (800206c <HAL_RCC_ClockConfig+0x150>)
 8001f9e:	688a      	ldr	r2, [r1, #8]
 8001fa0:	f022 0203 	bic.w	r2, r2, #3
 8001fa4:	4313      	orrs	r3, r2
 8001fa6:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 8001fa8:	f7fe fdd0 	bl	8000b4c <HAL_GetTick>
 8001fac:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fae:	4b2f      	ldr	r3, [pc, #188]	@ (800206c <HAL_RCC_ClockConfig+0x150>)
 8001fb0:	689b      	ldr	r3, [r3, #8]
 8001fb2:	f003 030c 	and.w	r3, r3, #12
 8001fb6:	6862      	ldr	r2, [r4, #4]
 8001fb8:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8001fbc:	d016      	beq.n	8001fec <HAL_RCC_ClockConfig+0xd0>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001fbe:	f7fe fdc5 	bl	8000b4c <HAL_GetTick>
 8001fc2:	1b80      	subs	r0, r0, r6
 8001fc4:	f241 3388 	movw	r3, #5000	@ 0x1388
 8001fc8:	4298      	cmp	r0, r3
 8001fca:	d9f0      	bls.n	8001fae <HAL_RCC_ClockConfig+0x92>
        return HAL_TIMEOUT;
 8001fcc:	2003      	movs	r0, #3
 8001fce:	e042      	b.n	8002056 <HAL_RCC_ClockConfig+0x13a>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fd0:	4a26      	ldr	r2, [pc, #152]	@ (800206c <HAL_RCC_ClockConfig+0x150>)
 8001fd2:	6812      	ldr	r2, [r2, #0]
 8001fd4:	f412 3f00 	tst.w	r2, #131072	@ 0x20000
 8001fd8:	d1e0      	bne.n	8001f9c <HAL_RCC_ClockConfig+0x80>
        return HAL_ERROR;
 8001fda:	2001      	movs	r0, #1
 8001fdc:	e03b      	b.n	8002056 <HAL_RCC_ClockConfig+0x13a>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001fde:	4a23      	ldr	r2, [pc, #140]	@ (800206c <HAL_RCC_ClockConfig+0x150>)
 8001fe0:	6812      	ldr	r2, [r2, #0]
 8001fe2:	f012 7f00 	tst.w	r2, #33554432	@ 0x2000000
 8001fe6:	d1d9      	bne.n	8001f9c <HAL_RCC_ClockConfig+0x80>
        return HAL_ERROR;
 8001fe8:	2001      	movs	r0, #1
 8001fea:	e034      	b.n	8002056 <HAL_RCC_ClockConfig+0x13a>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001fec:	4b1e      	ldr	r3, [pc, #120]	@ (8002068 <HAL_RCC_ClockConfig+0x14c>)
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	f003 0307 	and.w	r3, r3, #7
 8001ff4:	42ab      	cmp	r3, r5
 8001ff6:	d907      	bls.n	8002008 <HAL_RCC_ClockConfig+0xec>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ff8:	b2ea      	uxtb	r2, r5
 8001ffa:	4b1b      	ldr	r3, [pc, #108]	@ (8002068 <HAL_RCC_ClockConfig+0x14c>)
 8001ffc:	701a      	strb	r2, [r3, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f003 0307 	and.w	r3, r3, #7
 8002004:	42ab      	cmp	r3, r5
 8002006:	d12d      	bne.n	8002064 <HAL_RCC_ClockConfig+0x148>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002008:	6823      	ldr	r3, [r4, #0]
 800200a:	f013 0f04 	tst.w	r3, #4
 800200e:	d006      	beq.n	800201e <HAL_RCC_ClockConfig+0x102>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002010:	4a16      	ldr	r2, [pc, #88]	@ (800206c <HAL_RCC_ClockConfig+0x150>)
 8002012:	6893      	ldr	r3, [r2, #8]
 8002014:	f423 53e0 	bic.w	r3, r3, #7168	@ 0x1c00
 8002018:	68e1      	ldr	r1, [r4, #12]
 800201a:	430b      	orrs	r3, r1
 800201c:	6093      	str	r3, [r2, #8]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800201e:	6823      	ldr	r3, [r4, #0]
 8002020:	f013 0f08 	tst.w	r3, #8
 8002024:	d007      	beq.n	8002036 <HAL_RCC_ClockConfig+0x11a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002026:	4a11      	ldr	r2, [pc, #68]	@ (800206c <HAL_RCC_ClockConfig+0x150>)
 8002028:	6893      	ldr	r3, [r2, #8]
 800202a:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 800202e:	6921      	ldr	r1, [r4, #16]
 8002030:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8002034:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002036:	f7ff ff1d 	bl	8001e74 <HAL_RCC_GetSysClockFreq>
 800203a:	4b0c      	ldr	r3, [pc, #48]	@ (800206c <HAL_RCC_ClockConfig+0x150>)
 800203c:	689b      	ldr	r3, [r3, #8]
 800203e:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8002042:	4a0b      	ldr	r2, [pc, #44]	@ (8002070 <HAL_RCC_ClockConfig+0x154>)
 8002044:	5cd3      	ldrb	r3, [r2, r3]
 8002046:	40d8      	lsrs	r0, r3
 8002048:	4b0a      	ldr	r3, [pc, #40]	@ (8002074 <HAL_RCC_ClockConfig+0x158>)
 800204a:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 800204c:	4b0a      	ldr	r3, [pc, #40]	@ (8002078 <HAL_RCC_ClockConfig+0x15c>)
 800204e:	6818      	ldr	r0, [r3, #0]
 8002050:	f7fe fc82 	bl	8000958 <HAL_InitTick>
  return HAL_OK;
 8002054:	2000      	movs	r0, #0
}
 8002056:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8002058:	2001      	movs	r0, #1
}
 800205a:	4770      	bx	lr
      return HAL_ERROR;
 800205c:	2001      	movs	r0, #1
 800205e:	e7fa      	b.n	8002056 <HAL_RCC_ClockConfig+0x13a>
        return HAL_ERROR;
 8002060:	2001      	movs	r0, #1
 8002062:	e7f8      	b.n	8002056 <HAL_RCC_ClockConfig+0x13a>
      return HAL_ERROR;
 8002064:	2001      	movs	r0, #1
 8002066:	e7f6      	b.n	8002056 <HAL_RCC_ClockConfig+0x13a>
 8002068:	40023c00 	.word	0x40023c00
 800206c:	40023800 	.word	0x40023800
 8002070:	08006668 	.word	0x08006668
 8002074:	20000000 	.word	0x20000000
 8002078:	20000008 	.word	0x20000008

0800207c <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 800207c:	4b01      	ldr	r3, [pc, #4]	@ (8002084 <HAL_RCC_GetHCLKFreq+0x8>)
 800207e:	6818      	ldr	r0, [r3, #0]
 8002080:	4770      	bx	lr
 8002082:	bf00      	nop
 8002084:	20000000 	.word	0x20000000

08002088 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002088:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800208a:	f7ff fff7 	bl	800207c <HAL_RCC_GetHCLKFreq>
 800208e:	4b04      	ldr	r3, [pc, #16]	@ (80020a0 <HAL_RCC_GetPCLK1Freq+0x18>)
 8002090:	689b      	ldr	r3, [r3, #8]
 8002092:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8002096:	4a03      	ldr	r2, [pc, #12]	@ (80020a4 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8002098:	5cd3      	ldrb	r3, [r2, r3]
}
 800209a:	40d8      	lsrs	r0, r3
 800209c:	bd08      	pop	{r3, pc}
 800209e:	bf00      	nop
 80020a0:	40023800 	.word	0x40023800
 80020a4:	08006660 	.word	0x08006660

080020a8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80020a8:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80020aa:	f7ff ffe7 	bl	800207c <HAL_RCC_GetHCLKFreq>
 80020ae:	4b04      	ldr	r3, [pc, #16]	@ (80020c0 <HAL_RCC_GetPCLK2Freq+0x18>)
 80020b0:	689b      	ldr	r3, [r3, #8]
 80020b2:	f3c3 3342 	ubfx	r3, r3, #13, #3
 80020b6:	4a03      	ldr	r2, [pc, #12]	@ (80020c4 <HAL_RCC_GetPCLK2Freq+0x1c>)
 80020b8:	5cd3      	ldrb	r3, [r2, r3]
}
 80020ba:	40d8      	lsrs	r0, r3
 80020bc:	bd08      	pop	{r3, pc}
 80020be:	bf00      	nop
 80020c0:	40023800 	.word	0x40023800
 80020c4:	08006660 	.word	0x08006660

080020c8 <HAL_RCC_GetClockConfig>:
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80020c8:	230f      	movs	r3, #15
 80020ca:	6003      	str	r3, [r0, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80020cc:	4b0b      	ldr	r3, [pc, #44]	@ (80020fc <HAL_RCC_GetClockConfig+0x34>)
 80020ce:	689a      	ldr	r2, [r3, #8]
 80020d0:	f002 0203 	and.w	r2, r2, #3
 80020d4:	6042      	str	r2, [r0, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80020d6:	689a      	ldr	r2, [r3, #8]
 80020d8:	f002 02f0 	and.w	r2, r2, #240	@ 0xf0
 80020dc:	6082      	str	r2, [r0, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80020de:	689a      	ldr	r2, [r3, #8]
 80020e0:	f402 52e0 	and.w	r2, r2, #7168	@ 0x1c00
 80020e4:	60c2      	str	r2, [r0, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80020e6:	689b      	ldr	r3, [r3, #8]
 80020e8:	08db      	lsrs	r3, r3, #3
 80020ea:	f403 53e0 	and.w	r3, r3, #7168	@ 0x1c00
 80020ee:	6103      	str	r3, [r0, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80020f0:	4b03      	ldr	r3, [pc, #12]	@ (8002100 <HAL_RCC_GetClockConfig+0x38>)
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f003 0307 	and.w	r3, r3, #7
 80020f8:	600b      	str	r3, [r1, #0]
}
 80020fa:	4770      	bx	lr
 80020fc:	40023800 	.word	0x40023800
 8002100:	40023c00 	.word	0x40023c00

08002104 <HAL_TIM_Base_MspInit>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002104:	4770      	bx	lr
	...

08002108 <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002108:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 800210c:	b2db      	uxtb	r3, r3
 800210e:	2b01      	cmp	r3, #1
 8002110:	d12f      	bne.n	8002172 <HAL_TIM_Base_Start_IT+0x6a>
  {
    return HAL_ERROR;
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002112:	2302      	movs	r3, #2
 8002114:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002118:	6802      	ldr	r2, [r0, #0]
 800211a:	68d3      	ldr	r3, [r2, #12]
 800211c:	f043 0301 	orr.w	r3, r3, #1
 8002120:	60d3      	str	r3, [r2, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002122:	6803      	ldr	r3, [r0, #0]
 8002124:	4a15      	ldr	r2, [pc, #84]	@ (800217c <HAL_TIM_Base_Start_IT+0x74>)
 8002126:	4293      	cmp	r3, r2
 8002128:	d018      	beq.n	800215c <HAL_TIM_Base_Start_IT+0x54>
 800212a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800212e:	d015      	beq.n	800215c <HAL_TIM_Base_Start_IT+0x54>
 8002130:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 8002134:	4293      	cmp	r3, r2
 8002136:	d011      	beq.n	800215c <HAL_TIM_Base_Start_IT+0x54>
 8002138:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800213c:	4293      	cmp	r3, r2
 800213e:	d00d      	beq.n	800215c <HAL_TIM_Base_Start_IT+0x54>
 8002140:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8002144:	4293      	cmp	r3, r2
 8002146:	d009      	beq.n	800215c <HAL_TIM_Base_Start_IT+0x54>
 8002148:	f502 329a 	add.w	r2, r2, #78848	@ 0x13400
 800214c:	4293      	cmp	r3, r2
 800214e:	d005      	beq.n	800215c <HAL_TIM_Base_Start_IT+0x54>
      __HAL_TIM_ENABLE(htim);
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002150:	681a      	ldr	r2, [r3, #0]
 8002152:	f042 0201 	orr.w	r2, r2, #1
 8002156:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002158:	2000      	movs	r0, #0
 800215a:	4770      	bx	lr
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800215c:	689a      	ldr	r2, [r3, #8]
 800215e:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002162:	2a06      	cmp	r2, #6
 8002164:	d007      	beq.n	8002176 <HAL_TIM_Base_Start_IT+0x6e>
      __HAL_TIM_ENABLE(htim);
 8002166:	681a      	ldr	r2, [r3, #0]
 8002168:	f042 0201 	orr.w	r2, r2, #1
 800216c:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 800216e:	2000      	movs	r0, #0
 8002170:	4770      	bx	lr
    return HAL_ERROR;
 8002172:	2001      	movs	r0, #1
 8002174:	4770      	bx	lr
  return HAL_OK;
 8002176:	2000      	movs	r0, #0
}
 8002178:	4770      	bx	lr
 800217a:	bf00      	nop
 800217c:	40010000 	.word	0x40010000

08002180 <HAL_TIM_OC_DelayElapsedCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002180:	4770      	bx	lr

08002182 <HAL_TIM_IC_CaptureCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002182:	4770      	bx	lr

08002184 <HAL_TIM_PWM_PulseFinishedCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002184:	4770      	bx	lr

08002186 <HAL_TIM_TriggerCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002186:	4770      	bx	lr

08002188 <HAL_TIM_IRQHandler>:
{
 8002188:	b570      	push	{r4, r5, r6, lr}
 800218a:	4604      	mov	r4, r0
  uint32_t itsource = htim->Instance->DIER;
 800218c:	6803      	ldr	r3, [r0, #0]
 800218e:	68de      	ldr	r6, [r3, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002190:	691d      	ldr	r5, [r3, #16]
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002192:	f015 0f02 	tst.w	r5, #2
 8002196:	d010      	beq.n	80021ba <HAL_TIM_IRQHandler+0x32>
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002198:	f016 0f02 	tst.w	r6, #2
 800219c:	d00d      	beq.n	80021ba <HAL_TIM_IRQHandler+0x32>
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800219e:	f06f 0202 	mvn.w	r2, #2
 80021a2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80021a4:	2301      	movs	r3, #1
 80021a6:	7703      	strb	r3, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80021a8:	6803      	ldr	r3, [r0, #0]
 80021aa:	699b      	ldr	r3, [r3, #24]
 80021ac:	f013 0f03 	tst.w	r3, #3
 80021b0:	d05e      	beq.n	8002270 <HAL_TIM_IRQHandler+0xe8>
          HAL_TIM_IC_CaptureCallback(htim);
 80021b2:	f7ff ffe6 	bl	8002182 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80021b6:	2300      	movs	r3, #0
 80021b8:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80021ba:	f015 0f04 	tst.w	r5, #4
 80021be:	d012      	beq.n	80021e6 <HAL_TIM_IRQHandler+0x5e>
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80021c0:	f016 0f04 	tst.w	r6, #4
 80021c4:	d00f      	beq.n	80021e6 <HAL_TIM_IRQHandler+0x5e>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80021c6:	6823      	ldr	r3, [r4, #0]
 80021c8:	f06f 0204 	mvn.w	r2, #4
 80021cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80021ce:	2302      	movs	r3, #2
 80021d0:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80021d2:	6823      	ldr	r3, [r4, #0]
 80021d4:	699b      	ldr	r3, [r3, #24]
 80021d6:	f413 7f40 	tst.w	r3, #768	@ 0x300
 80021da:	d04f      	beq.n	800227c <HAL_TIM_IRQHandler+0xf4>
        HAL_TIM_IC_CaptureCallback(htim);
 80021dc:	4620      	mov	r0, r4
 80021de:	f7ff ffd0 	bl	8002182 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80021e2:	2300      	movs	r3, #0
 80021e4:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80021e6:	f015 0f08 	tst.w	r5, #8
 80021ea:	d012      	beq.n	8002212 <HAL_TIM_IRQHandler+0x8a>
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80021ec:	f016 0f08 	tst.w	r6, #8
 80021f0:	d00f      	beq.n	8002212 <HAL_TIM_IRQHandler+0x8a>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80021f2:	6823      	ldr	r3, [r4, #0]
 80021f4:	f06f 0208 	mvn.w	r2, #8
 80021f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80021fa:	2304      	movs	r3, #4
 80021fc:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80021fe:	6823      	ldr	r3, [r4, #0]
 8002200:	69db      	ldr	r3, [r3, #28]
 8002202:	f013 0f03 	tst.w	r3, #3
 8002206:	d040      	beq.n	800228a <HAL_TIM_IRQHandler+0x102>
        HAL_TIM_IC_CaptureCallback(htim);
 8002208:	4620      	mov	r0, r4
 800220a:	f7ff ffba 	bl	8002182 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800220e:	2300      	movs	r3, #0
 8002210:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002212:	f015 0f10 	tst.w	r5, #16
 8002216:	d012      	beq.n	800223e <HAL_TIM_IRQHandler+0xb6>
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002218:	f016 0f10 	tst.w	r6, #16
 800221c:	d00f      	beq.n	800223e <HAL_TIM_IRQHandler+0xb6>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800221e:	6823      	ldr	r3, [r4, #0]
 8002220:	f06f 0210 	mvn.w	r2, #16
 8002224:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002226:	2308      	movs	r3, #8
 8002228:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800222a:	6823      	ldr	r3, [r4, #0]
 800222c:	69db      	ldr	r3, [r3, #28]
 800222e:	f413 7f40 	tst.w	r3, #768	@ 0x300
 8002232:	d031      	beq.n	8002298 <HAL_TIM_IRQHandler+0x110>
        HAL_TIM_IC_CaptureCallback(htim);
 8002234:	4620      	mov	r0, r4
 8002236:	f7ff ffa4 	bl	8002182 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800223a:	2300      	movs	r3, #0
 800223c:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800223e:	f015 0f01 	tst.w	r5, #1
 8002242:	d002      	beq.n	800224a <HAL_TIM_IRQHandler+0xc2>
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002244:	f016 0f01 	tst.w	r6, #1
 8002248:	d12d      	bne.n	80022a6 <HAL_TIM_IRQHandler+0x11e>
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800224a:	f015 0f80 	tst.w	r5, #128	@ 0x80
 800224e:	d002      	beq.n	8002256 <HAL_TIM_IRQHandler+0xce>
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002250:	f016 0f80 	tst.w	r6, #128	@ 0x80
 8002254:	d12f      	bne.n	80022b6 <HAL_TIM_IRQHandler+0x12e>
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002256:	f015 0f40 	tst.w	r5, #64	@ 0x40
 800225a:	d002      	beq.n	8002262 <HAL_TIM_IRQHandler+0xda>
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800225c:	f016 0f40 	tst.w	r6, #64	@ 0x40
 8002260:	d131      	bne.n	80022c6 <HAL_TIM_IRQHandler+0x13e>
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002262:	f015 0f20 	tst.w	r5, #32
 8002266:	d002      	beq.n	800226e <HAL_TIM_IRQHandler+0xe6>
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002268:	f016 0f20 	tst.w	r6, #32
 800226c:	d133      	bne.n	80022d6 <HAL_TIM_IRQHandler+0x14e>
}
 800226e:	bd70      	pop	{r4, r5, r6, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002270:	f7ff ff86 	bl	8002180 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002274:	4620      	mov	r0, r4
 8002276:	f7ff ff85 	bl	8002184 <HAL_TIM_PWM_PulseFinishedCallback>
 800227a:	e79c      	b.n	80021b6 <HAL_TIM_IRQHandler+0x2e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800227c:	4620      	mov	r0, r4
 800227e:	f7ff ff7f 	bl	8002180 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002282:	4620      	mov	r0, r4
 8002284:	f7ff ff7e 	bl	8002184 <HAL_TIM_PWM_PulseFinishedCallback>
 8002288:	e7ab      	b.n	80021e2 <HAL_TIM_IRQHandler+0x5a>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800228a:	4620      	mov	r0, r4
 800228c:	f7ff ff78 	bl	8002180 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002290:	4620      	mov	r0, r4
 8002292:	f7ff ff77 	bl	8002184 <HAL_TIM_PWM_PulseFinishedCallback>
 8002296:	e7ba      	b.n	800220e <HAL_TIM_IRQHandler+0x86>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002298:	4620      	mov	r0, r4
 800229a:	f7ff ff71 	bl	8002180 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800229e:	4620      	mov	r0, r4
 80022a0:	f7ff ff70 	bl	8002184 <HAL_TIM_PWM_PulseFinishedCallback>
 80022a4:	e7c9      	b.n	800223a <HAL_TIM_IRQHandler+0xb2>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80022a6:	6823      	ldr	r3, [r4, #0]
 80022a8:	f06f 0201 	mvn.w	r2, #1
 80022ac:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 80022ae:	4620      	mov	r0, r4
 80022b0:	f7fe f9d6 	bl	8000660 <HAL_TIM_PeriodElapsedCallback>
 80022b4:	e7c9      	b.n	800224a <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80022b6:	6823      	ldr	r3, [r4, #0]
 80022b8:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80022bc:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 80022be:	4620      	mov	r0, r4
 80022c0:	f000 f895 	bl	80023ee <HAL_TIMEx_BreakCallback>
 80022c4:	e7c7      	b.n	8002256 <HAL_TIM_IRQHandler+0xce>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80022c6:	6823      	ldr	r3, [r4, #0]
 80022c8:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80022cc:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 80022ce:	4620      	mov	r0, r4
 80022d0:	f7ff ff59 	bl	8002186 <HAL_TIM_TriggerCallback>
 80022d4:	e7c5      	b.n	8002262 <HAL_TIM_IRQHandler+0xda>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80022d6:	6823      	ldr	r3, [r4, #0]
 80022d8:	f06f 0220 	mvn.w	r2, #32
 80022dc:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 80022de:	4620      	mov	r0, r4
 80022e0:	f000 f884 	bl	80023ec <HAL_TIMEx_CommutCallback>
}
 80022e4:	e7c3      	b.n	800226e <HAL_TIM_IRQHandler+0xe6>
	...

080022e8 <TIM_Base_SetConfig>:
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80022e8:	6803      	ldr	r3, [r0, #0]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80022ea:	4a29      	ldr	r2, [pc, #164]	@ (8002390 <TIM_Base_SetConfig+0xa8>)
 80022ec:	4290      	cmp	r0, r2
 80022ee:	d00e      	beq.n	800230e <TIM_Base_SetConfig+0x26>
 80022f0:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 80022f4:	d00b      	beq.n	800230e <TIM_Base_SetConfig+0x26>
 80022f6:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 80022fa:	4290      	cmp	r0, r2
 80022fc:	d007      	beq.n	800230e <TIM_Base_SetConfig+0x26>
 80022fe:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8002302:	4290      	cmp	r0, r2
 8002304:	d003      	beq.n	800230e <TIM_Base_SetConfig+0x26>
 8002306:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800230a:	4290      	cmp	r0, r2
 800230c:	d103      	bne.n	8002316 <TIM_Base_SetConfig+0x2e>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800230e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 8002312:	684a      	ldr	r2, [r1, #4]
 8002314:	4313      	orrs	r3, r2
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002316:	4a1e      	ldr	r2, [pc, #120]	@ (8002390 <TIM_Base_SetConfig+0xa8>)
 8002318:	4290      	cmp	r0, r2
 800231a:	d01a      	beq.n	8002352 <TIM_Base_SetConfig+0x6a>
 800231c:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 8002320:	d017      	beq.n	8002352 <TIM_Base_SetConfig+0x6a>
 8002322:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 8002326:	4290      	cmp	r0, r2
 8002328:	d013      	beq.n	8002352 <TIM_Base_SetConfig+0x6a>
 800232a:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800232e:	4290      	cmp	r0, r2
 8002330:	d00f      	beq.n	8002352 <TIM_Base_SetConfig+0x6a>
 8002332:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8002336:	4290      	cmp	r0, r2
 8002338:	d00b      	beq.n	8002352 <TIM_Base_SetConfig+0x6a>
 800233a:	f502 329a 	add.w	r2, r2, #78848	@ 0x13400
 800233e:	4290      	cmp	r0, r2
 8002340:	d007      	beq.n	8002352 <TIM_Base_SetConfig+0x6a>
 8002342:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8002346:	4290      	cmp	r0, r2
 8002348:	d003      	beq.n	8002352 <TIM_Base_SetConfig+0x6a>
 800234a:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800234e:	4290      	cmp	r0, r2
 8002350:	d103      	bne.n	800235a <TIM_Base_SetConfig+0x72>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002352:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002356:	68ca      	ldr	r2, [r1, #12]
 8002358:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800235a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800235e:	694a      	ldr	r2, [r1, #20]
 8002360:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 8002362:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002364:	688b      	ldr	r3, [r1, #8]
 8002366:	62c3      	str	r3, [r0, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002368:	680b      	ldr	r3, [r1, #0]
 800236a:	6283      	str	r3, [r0, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800236c:	4b08      	ldr	r3, [pc, #32]	@ (8002390 <TIM_Base_SetConfig+0xa8>)
 800236e:	4298      	cmp	r0, r3
 8002370:	d00a      	beq.n	8002388 <TIM_Base_SetConfig+0xa0>
    TIMx->RCR = Structure->RepetitionCounter;
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002372:	2301      	movs	r3, #1
 8002374:	6143      	str	r3, [r0, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002376:	6903      	ldr	r3, [r0, #16]
 8002378:	f013 0f01 	tst.w	r3, #1
 800237c:	d003      	beq.n	8002386 <TIM_Base_SetConfig+0x9e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800237e:	6903      	ldr	r3, [r0, #16]
 8002380:	f023 0301 	bic.w	r3, r3, #1
 8002384:	6103      	str	r3, [r0, #16]
  }
}
 8002386:	4770      	bx	lr
    TIMx->RCR = Structure->RepetitionCounter;
 8002388:	690b      	ldr	r3, [r1, #16]
 800238a:	6303      	str	r3, [r0, #48]	@ 0x30
 800238c:	e7f1      	b.n	8002372 <TIM_Base_SetConfig+0x8a>
 800238e:	bf00      	nop
 8002390:	40010000 	.word	0x40010000

08002394 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 8002394:	b340      	cbz	r0, 80023e8 <HAL_TIM_Base_Init+0x54>
{
 8002396:	b510      	push	{r4, lr}
 8002398:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 800239a:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 800239e:	b1f3      	cbz	r3, 80023de <HAL_TIM_Base_Init+0x4a>
  htim->State = HAL_TIM_STATE_BUSY;
 80023a0:	2302      	movs	r3, #2
 80023a2:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80023a6:	4621      	mov	r1, r4
 80023a8:	f851 0b04 	ldr.w	r0, [r1], #4
 80023ac:	f7ff ff9c 	bl	80022e8 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80023b0:	2301      	movs	r3, #1
 80023b2:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80023b6:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 80023ba:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 80023be:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 80023c2:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80023c6:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80023ca:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80023ce:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 80023d2:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
  htim->State = HAL_TIM_STATE_READY;
 80023d6:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  return HAL_OK;
 80023da:	2000      	movs	r0, #0
}
 80023dc:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 80023de:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
    HAL_TIM_Base_MspInit(htim);
 80023e2:	f7ff fe8f 	bl	8002104 <HAL_TIM_Base_MspInit>
 80023e6:	e7db      	b.n	80023a0 <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 80023e8:	2001      	movs	r0, #1
}
 80023ea:	4770      	bx	lr

080023ec <HAL_TIMEx_CommutCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80023ec:	4770      	bx	lr

080023ee <HAL_TIMEx_BreakCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80023ee:	4770      	bx	lr

080023f0 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80023f0:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80023f2:	f102 030c 	add.w	r3, r2, #12
 80023f6:	e853 3f00 	ldrex	r3, [r3]
 80023fa:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80023fe:	320c      	adds	r2, #12
 8002400:	e842 3100 	strex	r1, r3, [r2]
 8002404:	2900      	cmp	r1, #0
 8002406:	d1f3      	bne.n	80023f0 <UART_EndRxTransfer>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002408:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800240a:	f102 0314 	add.w	r3, r2, #20
 800240e:	e853 3f00 	ldrex	r3, [r3]
 8002412:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002416:	3214      	adds	r2, #20
 8002418:	e842 3100 	strex	r1, r3, [r2]
 800241c:	2900      	cmp	r1, #0
 800241e:	d1f3      	bne.n	8002408 <UART_EndRxTransfer+0x18>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002420:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8002422:	2b01      	cmp	r3, #1
 8002424:	d005      	beq.n	8002432 <UART_EndRxTransfer+0x42>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002426:	2320      	movs	r3, #32
 8002428:	f880 3042 	strb.w	r3, [r0, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800242c:	2300      	movs	r3, #0
 800242e:	6303      	str	r3, [r0, #48]	@ 0x30
}
 8002430:	4770      	bx	lr
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002432:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002434:	f102 030c 	add.w	r3, r2, #12
 8002438:	e853 3f00 	ldrex	r3, [r3]
 800243c:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002440:	320c      	adds	r2, #12
 8002442:	e842 3100 	strex	r1, r3, [r2]
 8002446:	2900      	cmp	r1, #0
 8002448:	d1f3      	bne.n	8002432 <UART_EndRxTransfer+0x42>
 800244a:	e7ec      	b.n	8002426 <UART_EndRxTransfer+0x36>

0800244c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800244c:	b510      	push	{r4, lr}
 800244e:	4604      	mov	r4, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002450:	6802      	ldr	r2, [r0, #0]
 8002452:	6913      	ldr	r3, [r2, #16]
 8002454:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002458:	68c1      	ldr	r1, [r0, #12]
 800245a:	430b      	orrs	r3, r1
 800245c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800245e:	6883      	ldr	r3, [r0, #8]
 8002460:	6902      	ldr	r2, [r0, #16]
 8002462:	431a      	orrs	r2, r3
 8002464:	6943      	ldr	r3, [r0, #20]
 8002466:	431a      	orrs	r2, r3
 8002468:	69c3      	ldr	r3, [r0, #28]
 800246a:	431a      	orrs	r2, r3
  MODIFY_REG(huart->Instance->CR1,
 800246c:	6801      	ldr	r1, [r0, #0]
 800246e:	68cb      	ldr	r3, [r1, #12]
 8002470:	f423 4316 	bic.w	r3, r3, #38400	@ 0x9600
 8002474:	f023 030c 	bic.w	r3, r3, #12
 8002478:	4313      	orrs	r3, r2
 800247a:	60cb      	str	r3, [r1, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800247c:	6802      	ldr	r2, [r0, #0]
 800247e:	6953      	ldr	r3, [r2, #20]
 8002480:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002484:	6981      	ldr	r1, [r0, #24]
 8002486:	430b      	orrs	r3, r1
 8002488:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800248a:	6803      	ldr	r3, [r0, #0]
 800248c:	4a31      	ldr	r2, [pc, #196]	@ (8002554 <UART_SetConfig+0x108>)
 800248e:	4293      	cmp	r3, r2
 8002490:	d006      	beq.n	80024a0 <UART_SetConfig+0x54>
 8002492:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8002496:	4293      	cmp	r3, r2
 8002498:	d002      	beq.n	80024a0 <UART_SetConfig+0x54>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800249a:	f7ff fdf5 	bl	8002088 <HAL_RCC_GetPCLK1Freq>
 800249e:	e001      	b.n	80024a4 <UART_SetConfig+0x58>
      pclk = HAL_RCC_GetPCLK2Freq();
 80024a0:	f7ff fe02 	bl	80020a8 <HAL_RCC_GetPCLK2Freq>
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80024a4:	69e3      	ldr	r3, [r4, #28]
 80024a6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80024aa:	d029      	beq.n	8002500 <UART_SetConfig+0xb4>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80024ac:	2100      	movs	r1, #0
 80024ae:	1803      	adds	r3, r0, r0
 80024b0:	4149      	adcs	r1, r1
 80024b2:	181b      	adds	r3, r3, r0
 80024b4:	f141 0100 	adc.w	r1, r1, #0
 80024b8:	00c9      	lsls	r1, r1, #3
 80024ba:	ea41 7153 	orr.w	r1, r1, r3, lsr #29
 80024be:	00db      	lsls	r3, r3, #3
 80024c0:	1818      	adds	r0, r3, r0
 80024c2:	6863      	ldr	r3, [r4, #4]
 80024c4:	ea4f 0283 	mov.w	r2, r3, lsl #2
 80024c8:	ea4f 7393 	mov.w	r3, r3, lsr #30
 80024cc:	f141 0100 	adc.w	r1, r1, #0
 80024d0:	f7fd fede 	bl	8000290 <__aeabi_uldivmod>
 80024d4:	4a20      	ldr	r2, [pc, #128]	@ (8002558 <UART_SetConfig+0x10c>)
 80024d6:	fba2 3100 	umull	r3, r1, r2, r0
 80024da:	0949      	lsrs	r1, r1, #5
 80024dc:	2364      	movs	r3, #100	@ 0x64
 80024de:	fb03 0311 	mls	r3, r3, r1, r0
 80024e2:	011b      	lsls	r3, r3, #4
 80024e4:	3332      	adds	r3, #50	@ 0x32
 80024e6:	fba2 2303 	umull	r2, r3, r2, r3
 80024ea:	095b      	lsrs	r3, r3, #5
 80024ec:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80024f0:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 80024f4:	f003 030f 	and.w	r3, r3, #15
 80024f8:	6821      	ldr	r1, [r4, #0]
 80024fa:	4413      	add	r3, r2
 80024fc:	608b      	str	r3, [r1, #8]
  }
}
 80024fe:	bd10      	pop	{r4, pc}
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002500:	2300      	movs	r3, #0
 8002502:	1802      	adds	r2, r0, r0
 8002504:	eb43 0103 	adc.w	r1, r3, r3
 8002508:	1812      	adds	r2, r2, r0
 800250a:	f141 0100 	adc.w	r1, r1, #0
 800250e:	00c9      	lsls	r1, r1, #3
 8002510:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002514:	00d2      	lsls	r2, r2, #3
 8002516:	1810      	adds	r0, r2, r0
 8002518:	f141 0100 	adc.w	r1, r1, #0
 800251c:	6862      	ldr	r2, [r4, #4]
 800251e:	1892      	adds	r2, r2, r2
 8002520:	415b      	adcs	r3, r3
 8002522:	f7fd feb5 	bl	8000290 <__aeabi_uldivmod>
 8002526:	4a0c      	ldr	r2, [pc, #48]	@ (8002558 <UART_SetConfig+0x10c>)
 8002528:	fba2 3100 	umull	r3, r1, r2, r0
 800252c:	0949      	lsrs	r1, r1, #5
 800252e:	2364      	movs	r3, #100	@ 0x64
 8002530:	fb03 0311 	mls	r3, r3, r1, r0
 8002534:	00db      	lsls	r3, r3, #3
 8002536:	3332      	adds	r3, #50	@ 0x32
 8002538:	fba2 2303 	umull	r2, r3, r2, r3
 800253c:	095b      	lsrs	r3, r3, #5
 800253e:	005a      	lsls	r2, r3, #1
 8002540:	f402 72f8 	and.w	r2, r2, #496	@ 0x1f0
 8002544:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8002548:	f003 0307 	and.w	r3, r3, #7
 800254c:	6821      	ldr	r1, [r4, #0]
 800254e:	4413      	add	r3, r2
 8002550:	608b      	str	r3, [r1, #8]
 8002552:	e7d4      	b.n	80024fe <UART_SetConfig+0xb2>
 8002554:	40011000 	.word	0x40011000
 8002558:	51eb851f 	.word	0x51eb851f

0800255c <UART_WaitOnFlagUntilTimeout>:
{
 800255c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002560:	b083      	sub	sp, #12
 8002562:	4605      	mov	r5, r0
 8002564:	460e      	mov	r6, r1
 8002566:	4617      	mov	r7, r2
 8002568:	4699      	mov	r9, r3
 800256a:	f8dd 8028 	ldr.w	r8, [sp, #40]	@ 0x28
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800256e:	682b      	ldr	r3, [r5, #0]
 8002570:	681c      	ldr	r4, [r3, #0]
 8002572:	ea36 0404 	bics.w	r4, r6, r4
 8002576:	bf0c      	ite	eq
 8002578:	2401      	moveq	r4, #1
 800257a:	2400      	movne	r4, #0
 800257c:	42bc      	cmp	r4, r7
 800257e:	d128      	bne.n	80025d2 <UART_WaitOnFlagUntilTimeout+0x76>
    if (Timeout != HAL_MAX_DELAY)
 8002580:	f1b8 3fff 	cmp.w	r8, #4294967295	@ 0xffffffff
 8002584:	d0f3      	beq.n	800256e <UART_WaitOnFlagUntilTimeout+0x12>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002586:	f7fe fae1 	bl	8000b4c <HAL_GetTick>
 800258a:	eba0 0009 	sub.w	r0, r0, r9
 800258e:	4540      	cmp	r0, r8
 8002590:	d823      	bhi.n	80025da <UART_WaitOnFlagUntilTimeout+0x7e>
 8002592:	f1b8 0f00 	cmp.w	r8, #0
 8002596:	d022      	beq.n	80025de <UART_WaitOnFlagUntilTimeout+0x82>
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002598:	682b      	ldr	r3, [r5, #0]
 800259a:	68da      	ldr	r2, [r3, #12]
 800259c:	f012 0f04 	tst.w	r2, #4
 80025a0:	d0e5      	beq.n	800256e <UART_WaitOnFlagUntilTimeout+0x12>
 80025a2:	2e80      	cmp	r6, #128	@ 0x80
 80025a4:	d0e3      	beq.n	800256e <UART_WaitOnFlagUntilTimeout+0x12>
 80025a6:	2e40      	cmp	r6, #64	@ 0x40
 80025a8:	d0e1      	beq.n	800256e <UART_WaitOnFlagUntilTimeout+0x12>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80025aa:	681a      	ldr	r2, [r3, #0]
 80025ac:	f012 0f08 	tst.w	r2, #8
 80025b0:	d0dd      	beq.n	800256e <UART_WaitOnFlagUntilTimeout+0x12>
          __HAL_UART_CLEAR_OREFLAG(huart);
 80025b2:	2400      	movs	r4, #0
 80025b4:	9401      	str	r4, [sp, #4]
 80025b6:	681a      	ldr	r2, [r3, #0]
 80025b8:	9201      	str	r2, [sp, #4]
 80025ba:	685b      	ldr	r3, [r3, #4]
 80025bc:	9301      	str	r3, [sp, #4]
 80025be:	9b01      	ldr	r3, [sp, #4]
          UART_EndRxTransfer(huart);
 80025c0:	4628      	mov	r0, r5
 80025c2:	f7ff ff15 	bl	80023f0 <UART_EndRxTransfer>
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80025c6:	2308      	movs	r3, #8
 80025c8:	646b      	str	r3, [r5, #68]	@ 0x44
          __HAL_UNLOCK(huart);
 80025ca:	f885 4040 	strb.w	r4, [r5, #64]	@ 0x40
          return HAL_ERROR;
 80025ce:	2001      	movs	r0, #1
 80025d0:	e000      	b.n	80025d4 <UART_WaitOnFlagUntilTimeout+0x78>
  return HAL_OK;
 80025d2:	2000      	movs	r0, #0
}
 80025d4:	b003      	add	sp, #12
 80025d6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        return HAL_TIMEOUT;
 80025da:	2003      	movs	r0, #3
 80025dc:	e7fa      	b.n	80025d4 <UART_WaitOnFlagUntilTimeout+0x78>
 80025de:	2003      	movs	r0, #3
 80025e0:	e7f8      	b.n	80025d4 <UART_WaitOnFlagUntilTimeout+0x78>

080025e2 <HAL_UART_Init>:
  if (huart == NULL)
 80025e2:	b360      	cbz	r0, 800263e <HAL_UART_Init+0x5c>
{
 80025e4:	b510      	push	{r4, lr}
 80025e6:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 80025e8:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 80025ec:	b313      	cbz	r3, 8002634 <HAL_UART_Init+0x52>
  huart->gState = HAL_UART_STATE_BUSY;
 80025ee:	2324      	movs	r3, #36	@ 0x24
 80025f0:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  __HAL_UART_DISABLE(huart);
 80025f4:	6822      	ldr	r2, [r4, #0]
 80025f6:	68d3      	ldr	r3, [r2, #12]
 80025f8:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80025fc:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 80025fe:	4620      	mov	r0, r4
 8002600:	f7ff ff24 	bl	800244c <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002604:	6822      	ldr	r2, [r4, #0]
 8002606:	6913      	ldr	r3, [r2, #16]
 8002608:	f423 4390 	bic.w	r3, r3, #18432	@ 0x4800
 800260c:	6113      	str	r3, [r2, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800260e:	6822      	ldr	r2, [r4, #0]
 8002610:	6953      	ldr	r3, [r2, #20]
 8002612:	f023 032a 	bic.w	r3, r3, #42	@ 0x2a
 8002616:	6153      	str	r3, [r2, #20]
  __HAL_UART_ENABLE(huart);
 8002618:	6822      	ldr	r2, [r4, #0]
 800261a:	68d3      	ldr	r3, [r2, #12]
 800261c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002620:	60d3      	str	r3, [r2, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002622:	2000      	movs	r0, #0
 8002624:	6460      	str	r0, [r4, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002626:	2320      	movs	r3, #32
 8002628:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800262c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002630:	6360      	str	r0, [r4, #52]	@ 0x34
}
 8002632:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8002634:	f880 3040 	strb.w	r3, [r0, #64]	@ 0x40
    HAL_UART_MspInit(huart);
 8002638:	f7fe f90a 	bl	8000850 <HAL_UART_MspInit>
 800263c:	e7d7      	b.n	80025ee <HAL_UART_Init+0xc>
    return HAL_ERROR;
 800263e:	2001      	movs	r0, #1
}
 8002640:	4770      	bx	lr

08002642 <HAL_UART_Transmit>:
{
 8002642:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002646:	b082      	sub	sp, #8
 8002648:	461e      	mov	r6, r3
  if (huart->gState == HAL_UART_STATE_READY)
 800264a:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 800264e:	b2db      	uxtb	r3, r3
 8002650:	2b20      	cmp	r3, #32
 8002652:	d156      	bne.n	8002702 <HAL_UART_Transmit+0xc0>
 8002654:	4604      	mov	r4, r0
 8002656:	460d      	mov	r5, r1
 8002658:	4690      	mov	r8, r2
    if ((pData == NULL) || (Size == 0U))
 800265a:	2900      	cmp	r1, #0
 800265c:	d055      	beq.n	800270a <HAL_UART_Transmit+0xc8>
 800265e:	b90a      	cbnz	r2, 8002664 <HAL_UART_Transmit+0x22>
      return  HAL_ERROR;
 8002660:	2001      	movs	r0, #1
 8002662:	e04f      	b.n	8002704 <HAL_UART_Transmit+0xc2>
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002664:	2300      	movs	r3, #0
 8002666:	6443      	str	r3, [r0, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002668:	2321      	movs	r3, #33	@ 0x21
 800266a:	f880 3041 	strb.w	r3, [r0, #65]	@ 0x41
    tickstart = HAL_GetTick();
 800266e:	f7fe fa6d 	bl	8000b4c <HAL_GetTick>
 8002672:	4607      	mov	r7, r0
    huart->TxXferSize = Size;
 8002674:	f8a4 8024 	strh.w	r8, [r4, #36]	@ 0x24
    huart->TxXferCount = Size;
 8002678:	f8a4 8026 	strh.w	r8, [r4, #38]	@ 0x26
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800267c:	68a3      	ldr	r3, [r4, #8]
 800267e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002682:	d002      	beq.n	800268a <HAL_UART_Transmit+0x48>
      pdata16bits = NULL;
 8002684:	f04f 0800 	mov.w	r8, #0
 8002688:	e014      	b.n	80026b4 <HAL_UART_Transmit+0x72>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800268a:	6923      	ldr	r3, [r4, #16]
 800268c:	b32b      	cbz	r3, 80026da <HAL_UART_Transmit+0x98>
      pdata16bits = NULL;
 800268e:	f04f 0800 	mov.w	r8, #0
 8002692:	e00f      	b.n	80026b4 <HAL_UART_Transmit+0x72>
        huart->gState = HAL_UART_STATE_READY;
 8002694:	2320      	movs	r3, #32
 8002696:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
        return HAL_TIMEOUT;
 800269a:	2003      	movs	r0, #3
 800269c:	e032      	b.n	8002704 <HAL_UART_Transmit+0xc2>
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800269e:	f838 3b02 	ldrh.w	r3, [r8], #2
 80026a2:	6822      	ldr	r2, [r4, #0]
 80026a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80026a8:	6053      	str	r3, [r2, #4]
      huart->TxXferCount--;
 80026aa:	8ce2      	ldrh	r2, [r4, #38]	@ 0x26
 80026ac:	b292      	uxth	r2, r2
 80026ae:	3a01      	subs	r2, #1
 80026b0:	b292      	uxth	r2, r2
 80026b2:	84e2      	strh	r2, [r4, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80026b4:	8ce3      	ldrh	r3, [r4, #38]	@ 0x26
 80026b6:	b29b      	uxth	r3, r3
 80026b8:	b193      	cbz	r3, 80026e0 <HAL_UART_Transmit+0x9e>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80026ba:	9600      	str	r6, [sp, #0]
 80026bc:	463b      	mov	r3, r7
 80026be:	2200      	movs	r2, #0
 80026c0:	2180      	movs	r1, #128	@ 0x80
 80026c2:	4620      	mov	r0, r4
 80026c4:	f7ff ff4a 	bl	800255c <UART_WaitOnFlagUntilTimeout>
 80026c8:	2800      	cmp	r0, #0
 80026ca:	d1e3      	bne.n	8002694 <HAL_UART_Transmit+0x52>
      if (pdata8bits == NULL)
 80026cc:	2d00      	cmp	r5, #0
 80026ce:	d0e6      	beq.n	800269e <HAL_UART_Transmit+0x5c>
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80026d0:	f815 2b01 	ldrb.w	r2, [r5], #1
 80026d4:	6823      	ldr	r3, [r4, #0]
 80026d6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80026d8:	e7e7      	b.n	80026aa <HAL_UART_Transmit+0x68>
      pdata16bits = (const uint16_t *) pData;
 80026da:	46a8      	mov	r8, r5
      pdata8bits  = NULL;
 80026dc:	2500      	movs	r5, #0
 80026de:	e7e9      	b.n	80026b4 <HAL_UART_Transmit+0x72>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80026e0:	9600      	str	r6, [sp, #0]
 80026e2:	463b      	mov	r3, r7
 80026e4:	2200      	movs	r2, #0
 80026e6:	2140      	movs	r1, #64	@ 0x40
 80026e8:	4620      	mov	r0, r4
 80026ea:	f7ff ff37 	bl	800255c <UART_WaitOnFlagUntilTimeout>
 80026ee:	b918      	cbnz	r0, 80026f8 <HAL_UART_Transmit+0xb6>
    huart->gState = HAL_UART_STATE_READY;
 80026f0:	2320      	movs	r3, #32
 80026f2:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
    return HAL_OK;
 80026f6:	e005      	b.n	8002704 <HAL_UART_Transmit+0xc2>
      huart->gState = HAL_UART_STATE_READY;
 80026f8:	2320      	movs	r3, #32
 80026fa:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
      return HAL_TIMEOUT;
 80026fe:	2003      	movs	r0, #3
 8002700:	e000      	b.n	8002704 <HAL_UART_Transmit+0xc2>
    return HAL_BUSY;
 8002702:	2002      	movs	r0, #2
}
 8002704:	b002      	add	sp, #8
 8002706:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      return  HAL_ERROR;
 800270a:	2001      	movs	r0, #1
 800270c:	e7fa      	b.n	8002704 <HAL_UART_Transmit+0xc2>

0800270e <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800270e:	b082      	sub	sp, #8
  __IO uint32_t count = 0U;
 8002710:	2300      	movs	r3, #0
 8002712:	9301      	str	r3, [sp, #4]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8002714:	9b01      	ldr	r3, [sp, #4]
 8002716:	3301      	adds	r3, #1
 8002718:	9301      	str	r3, [sp, #4]

    if (count > HAL_USB_TIMEOUT)
 800271a:	9b01      	ldr	r3, [sp, #4]
 800271c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8002720:	d815      	bhi.n	800274e <USB_CoreReset+0x40>
    {
      return HAL_TIMEOUT;
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8002722:	6903      	ldr	r3, [r0, #16]
 8002724:	2b00      	cmp	r3, #0
 8002726:	daf5      	bge.n	8002714 <USB_CoreReset+0x6>

  /* Core Soft Reset */
  count = 0U;
 8002728:	2300      	movs	r3, #0
 800272a:	9301      	str	r3, [sp, #4]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800272c:	6903      	ldr	r3, [r0, #16]
 800272e:	f043 0301 	orr.w	r3, r3, #1
 8002732:	6103      	str	r3, [r0, #16]

  do
  {
    count++;
 8002734:	9b01      	ldr	r3, [sp, #4]
 8002736:	3301      	adds	r3, #1
 8002738:	9301      	str	r3, [sp, #4]

    if (count > HAL_USB_TIMEOUT)
 800273a:	9b01      	ldr	r3, [sp, #4]
 800273c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8002740:	d808      	bhi.n	8002754 <USB_CoreReset+0x46>
    {
      return HAL_TIMEOUT;
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8002742:	6903      	ldr	r3, [r0, #16]
 8002744:	f013 0f01 	tst.w	r3, #1
 8002748:	d1f4      	bne.n	8002734 <USB_CoreReset+0x26>

  return HAL_OK;
 800274a:	2000      	movs	r0, #0
 800274c:	e000      	b.n	8002750 <USB_CoreReset+0x42>
      return HAL_TIMEOUT;
 800274e:	2003      	movs	r0, #3
}
 8002750:	b002      	add	sp, #8
 8002752:	4770      	bx	lr
      return HAL_TIMEOUT;
 8002754:	2003      	movs	r0, #3
 8002756:	e7fb      	b.n	8002750 <USB_CoreReset+0x42>

08002758 <USB_CoreInit>:
{
 8002758:	b084      	sub	sp, #16
 800275a:	b510      	push	{r4, lr}
 800275c:	4604      	mov	r4, r0
 800275e:	a803      	add	r0, sp, #12
 8002760:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8002764:	f89d 3011 	ldrb.w	r3, [sp, #17]
 8002768:	2b01      	cmp	r3, #1
 800276a:	d121      	bne.n	80027b0 <USB_CoreInit+0x58>
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800276c:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800276e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002772:	63a3      	str	r3, [r4, #56]	@ 0x38
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8002774:	68e3      	ldr	r3, [r4, #12]
 8002776:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 800277a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800277e:	60e3      	str	r3, [r4, #12]
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8002780:	68e3      	ldr	r3, [r4, #12]
 8002782:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8002786:	60e3      	str	r3, [r4, #12]
    if (cfg.use_external_vbus == 1U)
 8002788:	f89d 3018 	ldrb.w	r3, [sp, #24]
 800278c:	2b01      	cmp	r3, #1
 800278e:	d00a      	beq.n	80027a6 <USB_CoreInit+0x4e>
    ret = USB_CoreReset(USBx);
 8002790:	4620      	mov	r0, r4
 8002792:	f7ff ffbc 	bl	800270e <USB_CoreReset>
  if (cfg.dma_enable == 1U)
 8002796:	f89d 300e 	ldrb.w	r3, [sp, #14]
 800279a:	2b01      	cmp	r3, #1
 800279c:	d01c      	beq.n	80027d8 <USB_CoreInit+0x80>
}
 800279e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80027a2:	b004      	add	sp, #16
 80027a4:	4770      	bx	lr
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80027a6:	68e3      	ldr	r3, [r4, #12]
 80027a8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80027ac:	60e3      	str	r3, [r4, #12]
 80027ae:	e7ef      	b.n	8002790 <USB_CoreInit+0x38>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80027b0:	68e3      	ldr	r3, [r4, #12]
 80027b2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80027b6:	60e3      	str	r3, [r4, #12]
    ret = USB_CoreReset(USBx);
 80027b8:	4620      	mov	r0, r4
 80027ba:	f7ff ffa8 	bl	800270e <USB_CoreReset>
    if (cfg.battery_charging_enable == 0U)
 80027be:	f89d 3015 	ldrb.w	r3, [sp, #21]
 80027c2:	b923      	cbnz	r3, 80027ce <USB_CoreInit+0x76>
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80027c4:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80027c6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80027ca:	63a3      	str	r3, [r4, #56]	@ 0x38
 80027cc:	e7e3      	b.n	8002796 <USB_CoreInit+0x3e>
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80027ce:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80027d0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80027d4:	63a3      	str	r3, [r4, #56]	@ 0x38
 80027d6:	e7de      	b.n	8002796 <USB_CoreInit+0x3e>
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80027d8:	68a3      	ldr	r3, [r4, #8]
 80027da:	f043 0306 	orr.w	r3, r3, #6
 80027de:	60a3      	str	r3, [r4, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80027e0:	68a3      	ldr	r3, [r4, #8]
 80027e2:	f043 0320 	orr.w	r3, r3, #32
 80027e6:	60a3      	str	r3, [r4, #8]
 80027e8:	e7d9      	b.n	800279e <USB_CoreInit+0x46>
	...

080027ec <USB_SetTurnaroundTime>:
  if (speed == USBD_FS_SPEED)
 80027ec:	2a02      	cmp	r2, #2
 80027ee:	d00a      	beq.n	8002806 <USB_SetTurnaroundTime+0x1a>
    UsbTrd = USBD_HS_TRDT_VALUE;
 80027f0:	2209      	movs	r2, #9
  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80027f2:	68c3      	ldr	r3, [r0, #12]
 80027f4:	f423 5370 	bic.w	r3, r3, #15360	@ 0x3c00
 80027f8:	60c3      	str	r3, [r0, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80027fa:	68c3      	ldr	r3, [r0, #12]
 80027fc:	ea43 2382 	orr.w	r3, r3, r2, lsl #10
 8002800:	60c3      	str	r3, [r0, #12]
}
 8002802:	2000      	movs	r0, #0
 8002804:	4770      	bx	lr
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8002806:	4b23      	ldr	r3, [pc, #140]	@ (8002894 <USB_SetTurnaroundTime+0xa8>)
 8002808:	440b      	add	r3, r1
 800280a:	4a23      	ldr	r2, [pc, #140]	@ (8002898 <USB_SetTurnaroundTime+0xac>)
 800280c:	4293      	cmp	r3, r2
 800280e:	d92f      	bls.n	8002870 <USB_SetTurnaroundTime+0x84>
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8002810:	4b22      	ldr	r3, [pc, #136]	@ (800289c <USB_SetTurnaroundTime+0xb0>)
 8002812:	440b      	add	r3, r1
 8002814:	4a22      	ldr	r2, [pc, #136]	@ (80028a0 <USB_SetTurnaroundTime+0xb4>)
 8002816:	4293      	cmp	r3, r2
 8002818:	d92c      	bls.n	8002874 <USB_SetTurnaroundTime+0x88>
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800281a:	f5a1 0374 	sub.w	r3, r1, #15990784	@ 0xf40000
 800281e:	f5a3 5310 	sub.w	r3, r3, #9216	@ 0x2400
 8002822:	4a20      	ldr	r2, [pc, #128]	@ (80028a4 <USB_SetTurnaroundTime+0xb8>)
 8002824:	4293      	cmp	r3, r2
 8002826:	d927      	bls.n	8002878 <USB_SetTurnaroundTime+0x8c>
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8002828:	f1a1 7383 	sub.w	r3, r1, #17170432	@ 0x1060000
 800282c:	f5a3 43e7 	sub.w	r3, r3, #29568	@ 0x7380
 8002830:	4a1d      	ldr	r2, [pc, #116]	@ (80028a8 <USB_SetTurnaroundTime+0xbc>)
 8002832:	4293      	cmp	r3, r2
 8002834:	d322      	bcc.n	800287c <USB_SetTurnaroundTime+0x90>
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8002836:	4b1d      	ldr	r3, [pc, #116]	@ (80028ac <USB_SetTurnaroundTime+0xc0>)
 8002838:	440b      	add	r3, r1
 800283a:	4a1d      	ldr	r2, [pc, #116]	@ (80028b0 <USB_SetTurnaroundTime+0xc4>)
 800283c:	4293      	cmp	r3, r2
 800283e:	d91f      	bls.n	8002880 <USB_SetTurnaroundTime+0x94>
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8002840:	4b1c      	ldr	r3, [pc, #112]	@ (80028b4 <USB_SetTurnaroundTime+0xc8>)
 8002842:	440b      	add	r3, r1
 8002844:	4a1c      	ldr	r2, [pc, #112]	@ (80028b8 <USB_SetTurnaroundTime+0xcc>)
 8002846:	4293      	cmp	r3, r2
 8002848:	d31c      	bcc.n	8002884 <USB_SetTurnaroundTime+0x98>
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800284a:	4b1c      	ldr	r3, [pc, #112]	@ (80028bc <USB_SetTurnaroundTime+0xd0>)
 800284c:	440b      	add	r3, r1
 800284e:	4a1c      	ldr	r2, [pc, #112]	@ (80028c0 <USB_SetTurnaroundTime+0xd4>)
 8002850:	4293      	cmp	r3, r2
 8002852:	d319      	bcc.n	8002888 <USB_SetTurnaroundTime+0x9c>
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8002854:	f1a1 73b7 	sub.w	r3, r1, #23986176	@ 0x16e0000
 8002858:	f5a3 5358 	sub.w	r3, r3, #13824	@ 0x3600
 800285c:	4a19      	ldr	r2, [pc, #100]	@ (80028c4 <USB_SetTurnaroundTime+0xd8>)
 800285e:	4293      	cmp	r3, r2
 8002860:	d314      	bcc.n	800288c <USB_SetTurnaroundTime+0xa0>
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8002862:	4b19      	ldr	r3, [pc, #100]	@ (80028c8 <USB_SetTurnaroundTime+0xdc>)
 8002864:	440b      	add	r3, r1
 8002866:	4a19      	ldr	r2, [pc, #100]	@ (80028cc <USB_SetTurnaroundTime+0xe0>)
 8002868:	4293      	cmp	r3, r2
 800286a:	d211      	bcs.n	8002890 <USB_SetTurnaroundTime+0xa4>
      UsbTrd = 0x7U;
 800286c:	2207      	movs	r2, #7
 800286e:	e7c0      	b.n	80027f2 <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0xFU;
 8002870:	220f      	movs	r2, #15
 8002872:	e7be      	b.n	80027f2 <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0xEU;
 8002874:	220e      	movs	r2, #14
 8002876:	e7bc      	b.n	80027f2 <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0xDU;
 8002878:	220d      	movs	r2, #13
 800287a:	e7ba      	b.n	80027f2 <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0xCU;
 800287c:	220c      	movs	r2, #12
 800287e:	e7b8      	b.n	80027f2 <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0xBU;
 8002880:	220b      	movs	r2, #11
 8002882:	e7b6      	b.n	80027f2 <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0xAU;
 8002884:	220a      	movs	r2, #10
 8002886:	e7b4      	b.n	80027f2 <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0x9U;
 8002888:	2209      	movs	r2, #9
 800288a:	e7b2      	b.n	80027f2 <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0x8U;
 800288c:	2208      	movs	r2, #8
 800288e:	e7b0      	b.n	80027f2 <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0x6U;
 8002890:	2206      	movs	r2, #6
 8002892:	e7ae      	b.n	80027f2 <USB_SetTurnaroundTime+0x6>
 8002894:	ff275340 	.word	0xff275340
 8002898:	000c34ff 	.word	0x000c34ff
 800289c:	ff1b1e40 	.word	0xff1b1e40
 80028a0:	000f423f 	.word	0x000f423f
 80028a4:	00124f7f 	.word	0x00124f7f
 80028a8:	0013d620 	.word	0x0013d620
 80028ac:	fee5b660 	.word	0xfee5b660
 80028b0:	0016e35f 	.word	0x0016e35f
 80028b4:	feced300 	.word	0xfeced300
 80028b8:	001b7740 	.word	0x001b7740
 80028bc:	feb35bc0 	.word	0xfeb35bc0
 80028c0:	002191c0 	.word	0x002191c0
 80028c4:	00387520 	.word	0x00387520
 80028c8:	fe5954e0 	.word	0xfe5954e0
 80028cc:	00419ce0 	.word	0x00419ce0

080028d0 <USB_EnableGlobalInt>:
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80028d0:	6883      	ldr	r3, [r0, #8]
 80028d2:	f043 0301 	orr.w	r3, r3, #1
 80028d6:	6083      	str	r3, [r0, #8]
}
 80028d8:	2000      	movs	r0, #0
 80028da:	4770      	bx	lr

080028dc <USB_DisableGlobalInt>:
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80028dc:	6883      	ldr	r3, [r0, #8]
 80028de:	f023 0301 	bic.w	r3, r3, #1
 80028e2:	6083      	str	r3, [r0, #8]
}
 80028e4:	2000      	movs	r0, #0
 80028e6:	4770      	bx	lr

080028e8 <USB_FlushTxFifo>:
{
 80028e8:	b082      	sub	sp, #8
  __IO uint32_t count = 0U;
 80028ea:	2300      	movs	r3, #0
 80028ec:	9301      	str	r3, [sp, #4]
    count++;
 80028ee:	9b01      	ldr	r3, [sp, #4]
 80028f0:	3301      	adds	r3, #1
 80028f2:	9301      	str	r3, [sp, #4]
    if (count > HAL_USB_TIMEOUT)
 80028f4:	9b01      	ldr	r3, [sp, #4]
 80028f6:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80028fa:	d815      	bhi.n	8002928 <USB_FlushTxFifo+0x40>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80028fc:	6903      	ldr	r3, [r0, #16]
 80028fe:	2b00      	cmp	r3, #0
 8002900:	daf5      	bge.n	80028ee <USB_FlushTxFifo+0x6>
  count = 0U;
 8002902:	2300      	movs	r3, #0
 8002904:	9301      	str	r3, [sp, #4]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8002906:	0189      	lsls	r1, r1, #6
 8002908:	f041 0120 	orr.w	r1, r1, #32
 800290c:	6101      	str	r1, [r0, #16]
    count++;
 800290e:	9b01      	ldr	r3, [sp, #4]
 8002910:	3301      	adds	r3, #1
 8002912:	9301      	str	r3, [sp, #4]
    if (count > HAL_USB_TIMEOUT)
 8002914:	9b01      	ldr	r3, [sp, #4]
 8002916:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800291a:	d808      	bhi.n	800292e <USB_FlushTxFifo+0x46>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800291c:	6903      	ldr	r3, [r0, #16]
 800291e:	f013 0f20 	tst.w	r3, #32
 8002922:	d1f4      	bne.n	800290e <USB_FlushTxFifo+0x26>
  return HAL_OK;
 8002924:	2000      	movs	r0, #0
 8002926:	e000      	b.n	800292a <USB_FlushTxFifo+0x42>
      return HAL_TIMEOUT;
 8002928:	2003      	movs	r0, #3
}
 800292a:	b002      	add	sp, #8
 800292c:	4770      	bx	lr
      return HAL_TIMEOUT;
 800292e:	2003      	movs	r0, #3
 8002930:	e7fb      	b.n	800292a <USB_FlushTxFifo+0x42>

08002932 <USB_FlushRxFifo>:
{
 8002932:	b082      	sub	sp, #8
  __IO uint32_t count = 0U;
 8002934:	2300      	movs	r3, #0
 8002936:	9301      	str	r3, [sp, #4]
    count++;
 8002938:	9b01      	ldr	r3, [sp, #4]
 800293a:	3301      	adds	r3, #1
 800293c:	9301      	str	r3, [sp, #4]
    if (count > HAL_USB_TIMEOUT)
 800293e:	9b01      	ldr	r3, [sp, #4]
 8002940:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8002944:	d813      	bhi.n	800296e <USB_FlushRxFifo+0x3c>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8002946:	6903      	ldr	r3, [r0, #16]
 8002948:	2b00      	cmp	r3, #0
 800294a:	daf5      	bge.n	8002938 <USB_FlushRxFifo+0x6>
  count = 0U;
 800294c:	2300      	movs	r3, #0
 800294e:	9301      	str	r3, [sp, #4]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8002950:	2310      	movs	r3, #16
 8002952:	6103      	str	r3, [r0, #16]
    count++;
 8002954:	9b01      	ldr	r3, [sp, #4]
 8002956:	3301      	adds	r3, #1
 8002958:	9301      	str	r3, [sp, #4]
    if (count > HAL_USB_TIMEOUT)
 800295a:	9b01      	ldr	r3, [sp, #4]
 800295c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8002960:	d808      	bhi.n	8002974 <USB_FlushRxFifo+0x42>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8002962:	6903      	ldr	r3, [r0, #16]
 8002964:	f013 0f10 	tst.w	r3, #16
 8002968:	d1f4      	bne.n	8002954 <USB_FlushRxFifo+0x22>
  return HAL_OK;
 800296a:	2000      	movs	r0, #0
 800296c:	e000      	b.n	8002970 <USB_FlushRxFifo+0x3e>
      return HAL_TIMEOUT;
 800296e:	2003      	movs	r0, #3
}
 8002970:	b002      	add	sp, #8
 8002972:	4770      	bx	lr
      return HAL_TIMEOUT;
 8002974:	2003      	movs	r0, #3
 8002976:	e7fb      	b.n	8002970 <USB_FlushRxFifo+0x3e>

08002978 <USB_SetDevSpeed>:
  USBx_DEVICE->DCFG |= speed;
 8002978:	f8d0 3800 	ldr.w	r3, [r0, #2048]	@ 0x800
 800297c:	4319      	orrs	r1, r3
 800297e:	f8c0 1800 	str.w	r1, [r0, #2048]	@ 0x800
}
 8002982:	2000      	movs	r0, #0
 8002984:	4770      	bx	lr
	...

08002988 <USB_DevInit>:
{
 8002988:	b084      	sub	sp, #16
 800298a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800298c:	4604      	mov	r4, r0
 800298e:	a807      	add	r0, sp, #28
 8002990:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  for (i = 0U; i < 15U; i++)
 8002994:	2300      	movs	r3, #0
 8002996:	e006      	b.n	80029a6 <USB_DevInit+0x1e>
    USBx->DIEPTXF[i] = 0U;
 8002998:	f103 0240 	add.w	r2, r3, #64	@ 0x40
 800299c:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 80029a0:	2100      	movs	r1, #0
 80029a2:	6051      	str	r1, [r2, #4]
  for (i = 0U; i < 15U; i++)
 80029a4:	3301      	adds	r3, #1
 80029a6:	2b0e      	cmp	r3, #14
 80029a8:	d9f6      	bls.n	8002998 <USB_DevInit+0x10>
  if (cfg.vbus_sensing_enable == 0U)
 80029aa:	f89d 6026 	ldrb.w	r6, [sp, #38]	@ 0x26
 80029ae:	bb06      	cbnz	r6, 80029f2 <USB_DevInit+0x6a>
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80029b0:	f8d4 3804 	ldr.w	r3, [r4, #2052]	@ 0x804
 80029b4:	f043 0302 	orr.w	r3, r3, #2
 80029b8:	f8c4 3804 	str.w	r3, [r4, #2052]	@ 0x804
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80029bc:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80029be:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80029c2:	63a3      	str	r3, [r4, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80029c4:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80029c6:	f423 2300 	bic.w	r3, r3, #524288	@ 0x80000
 80029ca:	63a3      	str	r3, [r4, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80029cc:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80029ce:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80029d2:	63a3      	str	r3, [r4, #56]	@ 0x38
  USBx_PCGCCTL = 0U;
 80029d4:	2300      	movs	r3, #0
 80029d6:	f8c4 3e00 	str.w	r3, [r4, #3584]	@ 0xe00
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80029da:	f89d 3021 	ldrb.w	r3, [sp, #33]	@ 0x21
 80029de:	2b01      	cmp	r3, #1
 80029e0:	d115      	bne.n	8002a0e <USB_DevInit+0x86>
    if (cfg.speed == USBD_HS_SPEED)
 80029e2:	f89d 301f 	ldrb.w	r3, [sp, #31]
 80029e6:	b96b      	cbnz	r3, 8002a04 <USB_DevInit+0x7c>
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80029e8:	2100      	movs	r1, #0
 80029ea:	4620      	mov	r0, r4
 80029ec:	f7ff ffc4 	bl	8002978 <USB_SetDevSpeed>
 80029f0:	e011      	b.n	8002a16 <USB_DevInit+0x8e>
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80029f2:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80029f4:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80029f8:	63a3      	str	r3, [r4, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80029fa:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80029fc:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8002a00:	63a3      	str	r3, [r4, #56]	@ 0x38
 8002a02:	e7e7      	b.n	80029d4 <USB_DevInit+0x4c>
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8002a04:	2101      	movs	r1, #1
 8002a06:	4620      	mov	r0, r4
 8002a08:	f7ff ffb6 	bl	8002978 <USB_SetDevSpeed>
 8002a0c:	e003      	b.n	8002a16 <USB_DevInit+0x8e>
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8002a0e:	2103      	movs	r1, #3
 8002a10:	4620      	mov	r0, r4
 8002a12:	f7ff ffb1 	bl	8002978 <USB_SetDevSpeed>
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8002a16:	2110      	movs	r1, #16
 8002a18:	4620      	mov	r0, r4
 8002a1a:	f7ff ff65 	bl	80028e8 <USB_FlushTxFifo>
 8002a1e:	4605      	mov	r5, r0
 8002a20:	b100      	cbz	r0, 8002a24 <USB_DevInit+0x9c>
    ret = HAL_ERROR;
 8002a22:	2501      	movs	r5, #1
  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8002a24:	4620      	mov	r0, r4
 8002a26:	f7ff ff84 	bl	8002932 <USB_FlushRxFifo>
 8002a2a:	b100      	cbz	r0, 8002a2e <USB_DevInit+0xa6>
    ret = HAL_ERROR;
 8002a2c:	2501      	movs	r5, #1
  USBx_DEVICE->DIEPMSK = 0U;
 8002a2e:	f504 6c00 	add.w	ip, r4, #2048	@ 0x800
 8002a32:	2300      	movs	r3, #0
 8002a34:	f8cc 3010 	str.w	r3, [ip, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8002a38:	f8cc 3014 	str.w	r3, [ip, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8002a3c:	f8cc 301c 	str.w	r3, [ip, #28]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002a40:	e00a      	b.n	8002a58 <USB_DevInit+0xd0>
      if (i == 0U)
 8002a42:	b9cb      	cbnz	r3, 8002a78 <USB_DevInit+0xf0>
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8002a44:	f04f 6000 	mov.w	r0, #134217728	@ 0x8000000
 8002a48:	f8c2 0900 	str.w	r0, [r2, #2304]	@ 0x900
    USBx_INEP(i)->DIEPTSIZ = 0U;
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	610a      	str	r2, [r1, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8002a50:	f64f 327f 	movw	r2, #64383	@ 0xfb7f
 8002a54:	608a      	str	r2, [r1, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002a56:	3301      	adds	r3, #1
 8002a58:	f89d 101c 	ldrb.w	r1, [sp, #28]
 8002a5c:	4299      	cmp	r1, r3
 8002a5e:	d910      	bls.n	8002a82 <USB_DevInit+0xfa>
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8002a60:	eb04 1243 	add.w	r2, r4, r3, lsl #5
 8002a64:	f502 6110 	add.w	r1, r2, #2304	@ 0x900
 8002a68:	f8d2 0900 	ldr.w	r0, [r2, #2304]	@ 0x900
 8002a6c:	2800      	cmp	r0, #0
 8002a6e:	dbe8      	blt.n	8002a42 <USB_DevInit+0xba>
      USBx_INEP(i)->DIEPCTL = 0U;
 8002a70:	2000      	movs	r0, #0
 8002a72:	f8c2 0900 	str.w	r0, [r2, #2304]	@ 0x900
 8002a76:	e7e9      	b.n	8002a4c <USB_DevInit+0xc4>
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8002a78:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002a7c:	f8c2 0900 	str.w	r0, [r2, #2304]	@ 0x900
 8002a80:	e7e4      	b.n	8002a4c <USB_DevInit+0xc4>
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002a82:	2300      	movs	r3, #0
 8002a84:	e00a      	b.n	8002a9c <USB_DevInit+0x114>
      if (i == 0U)
 8002a86:	b1bb      	cbz	r3, 8002ab8 <USB_DevInit+0x130>
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8002a88:	f04f 4790 	mov.w	r7, #1207959552	@ 0x48000000
 8002a8c:	f8c2 7b00 	str.w	r7, [r2, #2816]	@ 0xb00
    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8002a90:	2200      	movs	r2, #0
 8002a92:	6102      	str	r2, [r0, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8002a94:	f64f 327f 	movw	r2, #64383	@ 0xfb7f
 8002a98:	6082      	str	r2, [r0, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002a9a:	3301      	adds	r3, #1
 8002a9c:	4299      	cmp	r1, r3
 8002a9e:	d910      	bls.n	8002ac2 <USB_DevInit+0x13a>
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8002aa0:	eb04 1243 	add.w	r2, r4, r3, lsl #5
 8002aa4:	f502 6030 	add.w	r0, r2, #2816	@ 0xb00
 8002aa8:	f8d2 7b00 	ldr.w	r7, [r2, #2816]	@ 0xb00
 8002aac:	2f00      	cmp	r7, #0
 8002aae:	dbea      	blt.n	8002a86 <USB_DevInit+0xfe>
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8002ab0:	2700      	movs	r7, #0
 8002ab2:	f8c2 7b00 	str.w	r7, [r2, #2816]	@ 0xb00
 8002ab6:	e7eb      	b.n	8002a90 <USB_DevInit+0x108>
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8002ab8:	f04f 6700 	mov.w	r7, #134217728	@ 0x8000000
 8002abc:	f8c2 7b00 	str.w	r7, [r2, #2816]	@ 0xb00
 8002ac0:	e7e6      	b.n	8002a90 <USB_DevInit+0x108>
  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8002ac2:	f8dc 3010 	ldr.w	r3, [ip, #16]
 8002ac6:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002aca:	f8cc 3010 	str.w	r3, [ip, #16]
  USBx->GINTMSK = 0U;
 8002ace:	2300      	movs	r3, #0
 8002ad0:	61a3      	str	r3, [r4, #24]
  USBx->GINTSTS = 0xBFFFFFFFU;
 8002ad2:	f06f 4380 	mvn.w	r3, #1073741824	@ 0x40000000
 8002ad6:	6163      	str	r3, [r4, #20]
  if (cfg.dma_enable == 0U)
 8002ad8:	f89d 301e 	ldrb.w	r3, [sp, #30]
 8002adc:	b91b      	cbnz	r3, 8002ae6 <USB_DevInit+0x15e>
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8002ade:	69a3      	ldr	r3, [r4, #24]
 8002ae0:	f043 0310 	orr.w	r3, r3, #16
 8002ae4:	61a3      	str	r3, [r4, #24]
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8002ae6:	69a2      	ldr	r2, [r4, #24]
 8002ae8:	4b0b      	ldr	r3, [pc, #44]	@ (8002b18 <USB_DevInit+0x190>)
 8002aea:	4313      	orrs	r3, r2
 8002aec:	61a3      	str	r3, [r4, #24]
  if (cfg.Sof_enable != 0U)
 8002aee:	f89d 3022 	ldrb.w	r3, [sp, #34]	@ 0x22
 8002af2:	b11b      	cbz	r3, 8002afc <USB_DevInit+0x174>
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8002af4:	69a3      	ldr	r3, [r4, #24]
 8002af6:	f043 0308 	orr.w	r3, r3, #8
 8002afa:	61a3      	str	r3, [r4, #24]
  if (cfg.vbus_sensing_enable == 1U)
 8002afc:	2e01      	cmp	r6, #1
 8002afe:	d004      	beq.n	8002b0a <USB_DevInit+0x182>
}
 8002b00:	4628      	mov	r0, r5
 8002b02:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8002b06:	b004      	add	sp, #16
 8002b08:	4770      	bx	lr
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8002b0a:	69a3      	ldr	r3, [r4, #24]
 8002b0c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8002b10:	f043 0304 	orr.w	r3, r3, #4
 8002b14:	61a3      	str	r3, [r4, #24]
 8002b16:	e7f3      	b.n	8002b00 <USB_DevInit+0x178>
 8002b18:	803c3800 	.word	0x803c3800

08002b1c <USB_GetDevSpeed>:
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8002b1c:	f8d0 3808 	ldr.w	r3, [r0, #2056]	@ 0x808
  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8002b20:	f013 0306 	ands.w	r3, r3, #6
 8002b24:	d007      	beq.n	8002b36 <USB_GetDevSpeed+0x1a>
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8002b26:	2b02      	cmp	r3, #2
 8002b28:	d007      	beq.n	8002b3a <USB_GetDevSpeed+0x1e>
 8002b2a:	2b06      	cmp	r3, #6
 8002b2c:	d001      	beq.n	8002b32 <USB_GetDevSpeed+0x16>
    speed = 0xFU;
 8002b2e:	200f      	movs	r0, #15
}
 8002b30:	4770      	bx	lr
    speed = USBD_FS_SPEED;
 8002b32:	2002      	movs	r0, #2
 8002b34:	4770      	bx	lr
    speed = USBD_HS_SPEED;
 8002b36:	2000      	movs	r0, #0
 8002b38:	4770      	bx	lr
    speed = USBD_FS_SPEED;
 8002b3a:	2002      	movs	r0, #2
 8002b3c:	4770      	bx	lr

08002b3e <USB_ActivateEndpoint>:
{
 8002b3e:	b510      	push	{r4, lr}
  uint32_t epnum = (uint32_t)ep->num;
 8002b40:	f891 c000 	ldrb.w	ip, [r1]
  if (ep->is_in == 1U)
 8002b44:	784b      	ldrb	r3, [r1, #1]
 8002b46:	2b01      	cmp	r3, #1
 8002b48:	d023      	beq.n	8002b92 <USB_ActivateEndpoint+0x54>
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8002b4a:	f500 6e00 	add.w	lr, r0, #2048	@ 0x800
 8002b4e:	f8d0 381c 	ldr.w	r3, [r0, #2076]	@ 0x81c
 8002b52:	f00c 040f 	and.w	r4, ip, #15
 8002b56:	2201      	movs	r2, #1
 8002b58:	40a2      	lsls	r2, r4
 8002b5a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8002b5e:	f8c0 381c 	str.w	r3, [r0, #2076]	@ 0x81c
    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8002b62:	eb00 104c 	add.w	r0, r0, ip, lsl #5
 8002b66:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	@ 0xb00
 8002b6a:	f413 4f00 	tst.w	r3, #32768	@ 0x8000
 8002b6e:	d10e      	bne.n	8002b8e <USB_ActivateEndpoint+0x50>
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8002b70:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	@ 0xb00
 8002b74:	688a      	ldr	r2, [r1, #8]
 8002b76:	f3c2 020a 	ubfx	r2, r2, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8002b7a:	7909      	ldrb	r1, [r1, #4]
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8002b7c:	ea42 4281 	orr.w	r2, r2, r1, lsl #18
 8002b80:	4313      	orrs	r3, r2
 8002b82:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002b86:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002b8a:	f8c0 3b00 	str.w	r3, [r0, #2816]	@ 0xb00
}
 8002b8e:	2000      	movs	r0, #0
 8002b90:	bd10      	pop	{r4, pc}
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8002b92:	f8d0 281c 	ldr.w	r2, [r0, #2076]	@ 0x81c
 8002b96:	f00c 0e0f 	and.w	lr, ip, #15
 8002b9a:	fa03 f30e 	lsl.w	r3, r3, lr
 8002b9e:	b29b      	uxth	r3, r3
 8002ba0:	4313      	orrs	r3, r2
 8002ba2:	f8c0 381c 	str.w	r3, [r0, #2076]	@ 0x81c
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8002ba6:	eb00 104c 	add.w	r0, r0, ip, lsl #5
 8002baa:	f8d0 3900 	ldr.w	r3, [r0, #2304]	@ 0x900
 8002bae:	f413 4f00 	tst.w	r3, #32768	@ 0x8000
 8002bb2:	d1ec      	bne.n	8002b8e <USB_ActivateEndpoint+0x50>
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8002bb4:	f8d0 3900 	ldr.w	r3, [r0, #2304]	@ 0x900
 8002bb8:	688a      	ldr	r2, [r1, #8]
 8002bba:	f3c2 020a 	ubfx	r2, r2, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8002bbe:	7909      	ldrb	r1, [r1, #4]
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8002bc0:	ea42 4281 	orr.w	r2, r2, r1, lsl #18
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8002bc4:	ea42 528c 	orr.w	r2, r2, ip, lsl #22
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8002bc8:	4313      	orrs	r3, r2
 8002bca:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002bce:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002bd2:	f8c0 3900 	str.w	r3, [r0, #2304]	@ 0x900
 8002bd6:	e7da      	b.n	8002b8e <USB_ActivateEndpoint+0x50>

08002bd8 <USB_DeactivateEndpoint>:
{
 8002bd8:	b430      	push	{r4, r5}
  uint32_t epnum = (uint32_t)ep->num;
 8002bda:	780b      	ldrb	r3, [r1, #0]
  if (ep->is_in == 1U)
 8002bdc:	784a      	ldrb	r2, [r1, #1]
 8002bde:	2a01      	cmp	r2, #1
 8002be0:	d026      	beq.n	8002c30 <USB_DeactivateEndpoint+0x58>
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8002be2:	eb00 1343 	add.w	r3, r0, r3, lsl #5
 8002be6:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	@ 0xb00
 8002bea:	2a00      	cmp	r2, #0
 8002bec:	db52      	blt.n	8002c94 <USB_DeactivateEndpoint+0xbc>
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8002bee:	f8d0 483c 	ldr.w	r4, [r0, #2108]	@ 0x83c
 8002bf2:	780a      	ldrb	r2, [r1, #0]
 8002bf4:	f002 020f 	and.w	r2, r2, #15
 8002bf8:	f04f 0c01 	mov.w	ip, #1
 8002bfc:	fa0c f202 	lsl.w	r2, ip, r2
 8002c00:	ea24 4202 	bic.w	r2, r4, r2, lsl #16
 8002c04:	f8c0 283c 	str.w	r2, [r0, #2108]	@ 0x83c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8002c08:	f8d0 281c 	ldr.w	r2, [r0, #2076]	@ 0x81c
 8002c0c:	7809      	ldrb	r1, [r1, #0]
 8002c0e:	f001 010f 	and.w	r1, r1, #15
 8002c12:	fa0c fc01 	lsl.w	ip, ip, r1
 8002c16:	ea22 420c 	bic.w	r2, r2, ip, lsl #16
 8002c1a:	f8c0 281c 	str.w	r2, [r0, #2076]	@ 0x81c
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8002c1e:	f8d3 1b00 	ldr.w	r1, [r3, #2816]	@ 0xb00
 8002c22:	4a23      	ldr	r2, [pc, #140]	@ (8002cb0 <USB_DeactivateEndpoint+0xd8>)
 8002c24:	400a      	ands	r2, r1
 8002c26:	f8c3 2b00 	str.w	r2, [r3, #2816]	@ 0xb00
}
 8002c2a:	2000      	movs	r0, #0
 8002c2c:	bc30      	pop	{r4, r5}
 8002c2e:	4770      	bx	lr
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8002c30:	eb00 1343 	add.w	r3, r0, r3, lsl #5
 8002c34:	f8d3 2900 	ldr.w	r2, [r3, #2304]	@ 0x900
 8002c38:	2a00      	cmp	r2, #0
 8002c3a:	db1e      	blt.n	8002c7a <USB_DeactivateEndpoint+0xa2>
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8002c3c:	f8d0 583c 	ldr.w	r5, [r0, #2108]	@ 0x83c
 8002c40:	780a      	ldrb	r2, [r1, #0]
 8002c42:	f002 020f 	and.w	r2, r2, #15
 8002c46:	2401      	movs	r4, #1
 8002c48:	fa04 f202 	lsl.w	r2, r4, r2
 8002c4c:	b292      	uxth	r2, r2
 8002c4e:	ea25 0202 	bic.w	r2, r5, r2
 8002c52:	f8c0 283c 	str.w	r2, [r0, #2108]	@ 0x83c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8002c56:	f8d0 281c 	ldr.w	r2, [r0, #2076]	@ 0x81c
 8002c5a:	7809      	ldrb	r1, [r1, #0]
 8002c5c:	f001 010f 	and.w	r1, r1, #15
 8002c60:	408c      	lsls	r4, r1
 8002c62:	b2a4      	uxth	r4, r4
 8002c64:	ea22 0204 	bic.w	r2, r2, r4
 8002c68:	f8c0 281c 	str.w	r2, [r0, #2076]	@ 0x81c
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8002c6c:	f8d3 1900 	ldr.w	r1, [r3, #2304]	@ 0x900
 8002c70:	4a10      	ldr	r2, [pc, #64]	@ (8002cb4 <USB_DeactivateEndpoint+0xdc>)
 8002c72:	400a      	ands	r2, r1
 8002c74:	f8c3 2900 	str.w	r2, [r3, #2304]	@ 0x900
 8002c78:	e7d7      	b.n	8002c2a <USB_DeactivateEndpoint+0x52>
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8002c7a:	f8d3 2900 	ldr.w	r2, [r3, #2304]	@ 0x900
 8002c7e:	f042 6200 	orr.w	r2, r2, #134217728	@ 0x8000000
 8002c82:	f8c3 2900 	str.w	r2, [r3, #2304]	@ 0x900
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8002c86:	f8d3 2900 	ldr.w	r2, [r3, #2304]	@ 0x900
 8002c8a:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002c8e:	f8c3 2900 	str.w	r2, [r3, #2304]	@ 0x900
 8002c92:	e7d3      	b.n	8002c3c <USB_DeactivateEndpoint+0x64>
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002c94:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	@ 0xb00
 8002c98:	f042 6200 	orr.w	r2, r2, #134217728	@ 0x8000000
 8002c9c:	f8c3 2b00 	str.w	r2, [r3, #2816]	@ 0xb00
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8002ca0:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	@ 0xb00
 8002ca4:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002ca8:	f8c3 2b00 	str.w	r2, [r3, #2816]	@ 0xb00
 8002cac:	e79f      	b.n	8002bee <USB_DeactivateEndpoint+0x16>
 8002cae:	bf00      	nop
 8002cb0:	eff37800 	.word	0xeff37800
 8002cb4:	ec337800 	.word	0xec337800

08002cb8 <USB_EPStopXfer>:
{
 8002cb8:	b410      	push	{r4}
 8002cba:	b083      	sub	sp, #12
 8002cbc:	4602      	mov	r2, r0
  __IO uint32_t count = 0U;
 8002cbe:	2300      	movs	r3, #0
 8002cc0:	9301      	str	r3, [sp, #4]
  if (ep->is_in == 1U)
 8002cc2:	7848      	ldrb	r0, [r1, #1]
 8002cc4:	2801      	cmp	r0, #1
 8002cc6:	d00b      	beq.n	8002ce0 <USB_EPStopXfer+0x28>
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8002cc8:	780b      	ldrb	r3, [r1, #0]
 8002cca:	eb02 1343 	add.w	r3, r2, r3, lsl #5
 8002cce:	f8d3 0b00 	ldr.w	r0, [r3, #2816]	@ 0xb00
 8002cd2:	2800      	cmp	r0, #0
 8002cd4:	db2d      	blt.n	8002d32 <USB_EPStopXfer+0x7a>
  HAL_StatusTypeDef ret = HAL_OK;
 8002cd6:	2000      	movs	r0, #0
}
 8002cd8:	b003      	add	sp, #12
 8002cda:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002cde:	4770      	bx	lr
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8002ce0:	780b      	ldrb	r3, [r1, #0]
 8002ce2:	eb02 1343 	add.w	r3, r2, r3, lsl #5
 8002ce6:	f8d3 4900 	ldr.w	r4, [r3, #2304]	@ 0x900
 8002cea:	2c00      	cmp	r4, #0
 8002cec:	db01      	blt.n	8002cf2 <USB_EPStopXfer+0x3a>
  HAL_StatusTypeDef ret = HAL_OK;
 8002cee:	2000      	movs	r0, #0
 8002cf0:	e7f2      	b.n	8002cd8 <USB_EPStopXfer+0x20>
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8002cf2:	f8d3 4900 	ldr.w	r4, [r3, #2304]	@ 0x900
 8002cf6:	f044 6400 	orr.w	r4, r4, #134217728	@ 0x8000000
 8002cfa:	f8c3 4900 	str.w	r4, [r3, #2304]	@ 0x900
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8002cfe:	780b      	ldrb	r3, [r1, #0]
 8002d00:	eb02 1343 	add.w	r3, r2, r3, lsl #5
 8002d04:	f8d3 4900 	ldr.w	r4, [r3, #2304]	@ 0x900
 8002d08:	f044 4480 	orr.w	r4, r4, #1073741824	@ 0x40000000
 8002d0c:	f8c3 4900 	str.w	r4, [r3, #2304]	@ 0x900
        count++;
 8002d10:	9b01      	ldr	r3, [sp, #4]
 8002d12:	3301      	adds	r3, #1
 8002d14:	9301      	str	r3, [sp, #4]
        if (count > 10000U)
 8002d16:	9c01      	ldr	r4, [sp, #4]
 8002d18:	f242 7310 	movw	r3, #10000	@ 0x2710
 8002d1c:	429c      	cmp	r4, r3
 8002d1e:	d8db      	bhi.n	8002cd8 <USB_EPStopXfer+0x20>
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8002d20:	780b      	ldrb	r3, [r1, #0]
 8002d22:	eb02 1343 	add.w	r3, r2, r3, lsl #5
 8002d26:	f8d3 3900 	ldr.w	r3, [r3, #2304]	@ 0x900
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	dbf0      	blt.n	8002d10 <USB_EPStopXfer+0x58>
  HAL_StatusTypeDef ret = HAL_OK;
 8002d2e:	2000      	movs	r0, #0
 8002d30:	e7d2      	b.n	8002cd8 <USB_EPStopXfer+0x20>
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8002d32:	f8d3 0b00 	ldr.w	r0, [r3, #2816]	@ 0xb00
 8002d36:	f040 6000 	orr.w	r0, r0, #134217728	@ 0x8000000
 8002d3a:	f8c3 0b00 	str.w	r0, [r3, #2816]	@ 0xb00
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8002d3e:	780b      	ldrb	r3, [r1, #0]
 8002d40:	eb02 1343 	add.w	r3, r2, r3, lsl #5
 8002d44:	f8d3 0b00 	ldr.w	r0, [r3, #2816]	@ 0xb00
 8002d48:	f040 4080 	orr.w	r0, r0, #1073741824	@ 0x40000000
 8002d4c:	f8c3 0b00 	str.w	r0, [r3, #2816]	@ 0xb00
        count++;
 8002d50:	9b01      	ldr	r3, [sp, #4]
 8002d52:	3301      	adds	r3, #1
 8002d54:	9301      	str	r3, [sp, #4]
        if (count > 10000U)
 8002d56:	9801      	ldr	r0, [sp, #4]
 8002d58:	f242 7310 	movw	r3, #10000	@ 0x2710
 8002d5c:	4298      	cmp	r0, r3
 8002d5e:	d808      	bhi.n	8002d72 <USB_EPStopXfer+0xba>
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8002d60:	780b      	ldrb	r3, [r1, #0]
 8002d62:	eb02 1343 	add.w	r3, r2, r3, lsl #5
 8002d66:	f8d3 3b00 	ldr.w	r3, [r3, #2816]	@ 0xb00
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	dbf0      	blt.n	8002d50 <USB_EPStopXfer+0x98>
  HAL_StatusTypeDef ret = HAL_OK;
 8002d6e:	2000      	movs	r0, #0
 8002d70:	e7b2      	b.n	8002cd8 <USB_EPStopXfer+0x20>
          ret = HAL_ERROR;
 8002d72:	2001      	movs	r0, #1
 8002d74:	e7b0      	b.n	8002cd8 <USB_EPStopXfer+0x20>

08002d76 <USB_WritePacket>:
{
 8002d76:	b510      	push	{r4, lr}
 8002d78:	f89d 4008 	ldrb.w	r4, [sp, #8]
  if (dma == 0U)
 8002d7c:	b984      	cbnz	r4, 8002da0 <USB_WritePacket+0x2a>
    count32b = ((uint32_t)len + 3U) / 4U;
 8002d7e:	3303      	adds	r3, #3
 8002d80:	ea4f 0e93 	mov.w	lr, r3, lsr #2
    for (i = 0U; i < count32b; i++)
 8002d84:	f04f 0c00 	mov.w	ip, #0
 8002d88:	e008      	b.n	8002d9c <USB_WritePacket+0x26>
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8002d8a:	eb00 3302 	add.w	r3, r0, r2, lsl #12
 8002d8e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002d92:	f851 4b04 	ldr.w	r4, [r1], #4
 8002d96:	601c      	str	r4, [r3, #0]
    for (i = 0U; i < count32b; i++)
 8002d98:	f10c 0c01 	add.w	ip, ip, #1
 8002d9c:	45f4      	cmp	ip, lr
 8002d9e:	d3f4      	bcc.n	8002d8a <USB_WritePacket+0x14>
}
 8002da0:	2000      	movs	r0, #0
 8002da2:	bd10      	pop	{r4, pc}

08002da4 <USB_EPStartXfer>:
{
 8002da4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002da6:	b083      	sub	sp, #12
  uint32_t epnum = (uint32_t)ep->num;
 8002da8:	780c      	ldrb	r4, [r1, #0]
  if (ep->is_in == 1U)
 8002daa:	784b      	ldrb	r3, [r1, #1]
 8002dac:	2b01      	cmp	r3, #1
 8002dae:	d02f      	beq.n	8002e10 <USB_EPStartXfer+0x6c>
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8002db0:	eb00 1c44 	add.w	ip, r0, r4, lsl #5
 8002db4:	f50c 6330 	add.w	r3, ip, #2816	@ 0xb00
 8002db8:	691d      	ldr	r5, [r3, #16]
 8002dba:	0ced      	lsrs	r5, r5, #19
 8002dbc:	04ed      	lsls	r5, r5, #19
 8002dbe:	611d      	str	r5, [r3, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8002dc0:	691d      	ldr	r5, [r3, #16]
 8002dc2:	f025 55ff 	bic.w	r5, r5, #534773760	@ 0x1fe00000
 8002dc6:	f425 15c0 	bic.w	r5, r5, #1572864	@ 0x180000
 8002dca:	611d      	str	r5, [r3, #16]
    if (epnum == 0U)
 8002dcc:	2c00      	cmp	r4, #0
 8002dce:	f040 80d2 	bne.w	8002f76 <USB_EPStartXfer+0x1d2>
      if (ep->xfer_len > 0U)
 8002dd2:	690c      	ldr	r4, [r1, #16]
 8002dd4:	b10c      	cbz	r4, 8002dda <USB_EPStartXfer+0x36>
        ep->xfer_len = ep->maxpacket;
 8002dd6:	688c      	ldr	r4, [r1, #8]
 8002dd8:	610c      	str	r4, [r1, #16]
      ep->xfer_size = ep->maxpacket;
 8002dda:	688c      	ldr	r4, [r1, #8]
 8002ddc:	620c      	str	r4, [r1, #32]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8002dde:	691d      	ldr	r5, [r3, #16]
 8002de0:	f3c4 0412 	ubfx	r4, r4, #0, #19
 8002de4:	432c      	orrs	r4, r5
 8002de6:	611c      	str	r4, [r3, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8002de8:	691c      	ldr	r4, [r3, #16]
 8002dea:	f444 2400 	orr.w	r4, r4, #524288	@ 0x80000
 8002dee:	611c      	str	r4, [r3, #16]
    if (dma == 1U)
 8002df0:	2a01      	cmp	r2, #1
 8002df2:	f000 80e3 	beq.w	8002fbc <USB_EPStartXfer+0x218>
    if (ep->type == EP_TYPE_ISOC)
 8002df6:	790b      	ldrb	r3, [r1, #4]
 8002df8:	2b01      	cmp	r3, #1
 8002dfa:	f000 80e5 	beq.w	8002fc8 <USB_EPStartXfer+0x224>
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8002dfe:	f8dc 3b00 	ldr.w	r3, [ip, #2816]	@ 0xb00
 8002e02:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8002e06:	f8cc 3b00 	str.w	r3, [ip, #2816]	@ 0xb00
}
 8002e0a:	2000      	movs	r0, #0
 8002e0c:	b003      	add	sp, #12
 8002e0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (ep->xfer_len == 0U)
 8002e10:	690b      	ldr	r3, [r1, #16]
 8002e12:	bb83      	cbnz	r3, 8002e76 <USB_EPStartXfer+0xd2>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8002e14:	eb00 1344 	add.w	r3, r0, r4, lsl #5
 8002e18:	f8d3 5910 	ldr.w	r5, [r3, #2320]	@ 0x910
 8002e1c:	f025 55ff 	bic.w	r5, r5, #534773760	@ 0x1fe00000
 8002e20:	f425 15c0 	bic.w	r5, r5, #1572864	@ 0x180000
 8002e24:	f8c3 5910 	str.w	r5, [r3, #2320]	@ 0x910
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8002e28:	f8d3 5910 	ldr.w	r5, [r3, #2320]	@ 0x910
 8002e2c:	f445 2500 	orr.w	r5, r5, #524288	@ 0x80000
 8002e30:	f8c3 5910 	str.w	r5, [r3, #2320]	@ 0x910
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8002e34:	f8d3 5910 	ldr.w	r5, [r3, #2320]	@ 0x910
 8002e38:	0ced      	lsrs	r5, r5, #19
 8002e3a:	04ed      	lsls	r5, r5, #19
 8002e3c:	f8c3 5910 	str.w	r5, [r3, #2320]	@ 0x910
    if (dma == 1U)
 8002e40:	2a01      	cmp	r2, #1
 8002e42:	d056      	beq.n	8002ef2 <USB_EPStartXfer+0x14e>
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8002e44:	eb00 1444 	add.w	r4, r0, r4, lsl #5
 8002e48:	f8d4 3900 	ldr.w	r3, [r4, #2304]	@ 0x900
 8002e4c:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8002e50:	f8c4 3900 	str.w	r3, [r4, #2304]	@ 0x900
      if (ep->type != EP_TYPE_ISOC)
 8002e54:	790b      	ldrb	r3, [r1, #4]
 8002e56:	2b01      	cmp	r3, #1
 8002e58:	d074      	beq.n	8002f44 <USB_EPStartXfer+0x1a0>
        if (ep->xfer_len > 0U)
 8002e5a:	690b      	ldr	r3, [r1, #16]
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d0d4      	beq.n	8002e0a <USB_EPStartXfer+0x66>
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8002e60:	f8d0 3834 	ldr.w	r3, [r0, #2100]	@ 0x834
 8002e64:	7809      	ldrb	r1, [r1, #0]
 8002e66:	f001 010f 	and.w	r1, r1, #15
 8002e6a:	2201      	movs	r2, #1
 8002e6c:	408a      	lsls	r2, r1
 8002e6e:	4313      	orrs	r3, r2
 8002e70:	f8c0 3834 	str.w	r3, [r0, #2100]	@ 0x834
 8002e74:	e7c9      	b.n	8002e0a <USB_EPStartXfer+0x66>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8002e76:	eb00 1344 	add.w	r3, r0, r4, lsl #5
 8002e7a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002e7e:	691d      	ldr	r5, [r3, #16]
 8002e80:	0ced      	lsrs	r5, r5, #19
 8002e82:	04ed      	lsls	r5, r5, #19
 8002e84:	611d      	str	r5, [r3, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8002e86:	691d      	ldr	r5, [r3, #16]
 8002e88:	f025 55ff 	bic.w	r5, r5, #534773760	@ 0x1fe00000
 8002e8c:	f425 15c0 	bic.w	r5, r5, #1572864	@ 0x180000
 8002e90:	611d      	str	r5, [r3, #16]
      if (epnum == 0U)
 8002e92:	b984      	cbnz	r4, 8002eb6 <USB_EPStartXfer+0x112>
        if (ep->xfer_len > ep->maxpacket)
 8002e94:	690e      	ldr	r6, [r1, #16]
 8002e96:	688d      	ldr	r5, [r1, #8]
 8002e98:	42ae      	cmp	r6, r5
 8002e9a:	d900      	bls.n	8002e9e <USB_EPStartXfer+0xfa>
          ep->xfer_len = ep->maxpacket;
 8002e9c:	610d      	str	r5, [r1, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8002e9e:	691d      	ldr	r5, [r3, #16]
 8002ea0:	f445 2500 	orr.w	r5, r5, #524288	@ 0x80000
 8002ea4:	611d      	str	r5, [r3, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8002ea6:	691d      	ldr	r5, [r3, #16]
 8002ea8:	690e      	ldr	r6, [r1, #16]
 8002eaa:	f3c6 0c12 	ubfx	ip, r6, #0, #19
 8002eae:	ea45 050c 	orr.w	r5, r5, ip
 8002eb2:	611d      	str	r5, [r3, #16]
 8002eb4:	e7c4      	b.n	8002e40 <USB_EPStartXfer+0x9c>
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8002eb6:	690d      	ldr	r5, [r1, #16]
 8002eb8:	688e      	ldr	r6, [r1, #8]
 8002eba:	4435      	add	r5, r6
 8002ebc:	3d01      	subs	r5, #1
 8002ebe:	fbb5 f5f6 	udiv	r5, r5, r6
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (pktcnt << 19));
 8002ec2:	691e      	ldr	r6, [r3, #16]
 8002ec4:	fa1f fc85 	uxth.w	ip, r5
 8002ec8:	4f49      	ldr	r7, [pc, #292]	@ (8002ff0 <USB_EPStartXfer+0x24c>)
 8002eca:	ea07 45c5 	and.w	r5, r7, r5, lsl #19
 8002ece:	4335      	orrs	r5, r6
 8002ed0:	611d      	str	r5, [r3, #16]
        if (ep->type == EP_TYPE_ISOC)
 8002ed2:	790d      	ldrb	r5, [r1, #4]
 8002ed4:	2d01      	cmp	r5, #1
 8002ed6:	d1e6      	bne.n	8002ea6 <USB_EPStartXfer+0x102>
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8002ed8:	691d      	ldr	r5, [r3, #16]
 8002eda:	f025 45c0 	bic.w	r5, r5, #1610612736	@ 0x60000000
 8002ede:	611d      	str	r5, [r3, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (pktcnt << 29));
 8002ee0:	691d      	ldr	r5, [r3, #16]
 8002ee2:	ea4f 7c4c 	mov.w	ip, ip, lsl #29
 8002ee6:	f00c 4cc0 	and.w	ip, ip, #1610612736	@ 0x60000000
 8002eea:	ea45 050c 	orr.w	r5, r5, ip
 8002eee:	611d      	str	r5, [r3, #16]
 8002ef0:	e7d9      	b.n	8002ea6 <USB_EPStartXfer+0x102>
      if ((uint32_t)ep->dma_addr != 0U)
 8002ef2:	69cb      	ldr	r3, [r1, #28]
 8002ef4:	b11b      	cbz	r3, 8002efe <USB_EPStartXfer+0x15a>
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8002ef6:	eb00 1244 	add.w	r2, r0, r4, lsl #5
 8002efa:	f8c2 3914 	str.w	r3, [r2, #2324]	@ 0x914
      if (ep->type == EP_TYPE_ISOC)
 8002efe:	790b      	ldrb	r3, [r1, #4]
 8002f00:	2b01      	cmp	r3, #1
 8002f02:	d008      	beq.n	8002f16 <USB_EPStartXfer+0x172>
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8002f04:	eb00 1444 	add.w	r4, r0, r4, lsl #5
 8002f08:	f8d4 3900 	ldr.w	r3, [r4, #2304]	@ 0x900
 8002f0c:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8002f10:	f8c4 3900 	str.w	r3, [r4, #2304]	@ 0x900
 8002f14:	e779      	b.n	8002e0a <USB_EPStartXfer+0x66>
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8002f16:	f8d0 3808 	ldr.w	r3, [r0, #2056]	@ 0x808
 8002f1a:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8002f1e:	d108      	bne.n	8002f32 <USB_EPStartXfer+0x18e>
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8002f20:	eb00 1244 	add.w	r2, r0, r4, lsl #5
 8002f24:	f8d2 3900 	ldr.w	r3, [r2, #2304]	@ 0x900
 8002f28:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8002f2c:	f8c2 3900 	str.w	r3, [r2, #2304]	@ 0x900
 8002f30:	e7e8      	b.n	8002f04 <USB_EPStartXfer+0x160>
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8002f32:	eb00 1244 	add.w	r2, r0, r4, lsl #5
 8002f36:	f8d2 3900 	ldr.w	r3, [r2, #2304]	@ 0x900
 8002f3a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002f3e:	f8c2 3900 	str.w	r3, [r2, #2304]	@ 0x900
 8002f42:	e7df      	b.n	8002f04 <USB_EPStartXfer+0x160>
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8002f44:	f8d0 3808 	ldr.w	r3, [r0, #2056]	@ 0x808
 8002f48:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8002f4c:	d10c      	bne.n	8002f68 <USB_EPStartXfer+0x1c4>
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8002f4e:	f8d4 3900 	ldr.w	r3, [r4, #2304]	@ 0x900
 8002f52:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8002f56:	f8c4 3900 	str.w	r3, [r4, #2304]	@ 0x900
        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8002f5a:	9200      	str	r2, [sp, #0]
 8002f5c:	8a0b      	ldrh	r3, [r1, #16]
 8002f5e:	780a      	ldrb	r2, [r1, #0]
 8002f60:	68c9      	ldr	r1, [r1, #12]
 8002f62:	f7ff ff08 	bl	8002d76 <USB_WritePacket>
 8002f66:	e750      	b.n	8002e0a <USB_EPStartXfer+0x66>
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8002f68:	f8d4 3900 	ldr.w	r3, [r4, #2304]	@ 0x900
 8002f6c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002f70:	f8c4 3900 	str.w	r3, [r4, #2304]	@ 0x900
 8002f74:	e7f1      	b.n	8002f5a <USB_EPStartXfer+0x1b6>
      if (ep->xfer_len == 0U)
 8002f76:	690c      	ldr	r4, [r1, #16]
 8002f78:	b954      	cbnz	r4, 8002f90 <USB_EPStartXfer+0x1ec>
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8002f7a:	691c      	ldr	r4, [r3, #16]
 8002f7c:	688d      	ldr	r5, [r1, #8]
 8002f7e:	f3c5 0512 	ubfx	r5, r5, #0, #19
 8002f82:	432c      	orrs	r4, r5
 8002f84:	611c      	str	r4, [r3, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8002f86:	691c      	ldr	r4, [r3, #16]
 8002f88:	f444 2400 	orr.w	r4, r4, #524288	@ 0x80000
 8002f8c:	611c      	str	r4, [r3, #16]
 8002f8e:	e72f      	b.n	8002df0 <USB_EPStartXfer+0x4c>
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8002f90:	688d      	ldr	r5, [r1, #8]
 8002f92:	442c      	add	r4, r5
 8002f94:	3c01      	subs	r4, #1
 8002f96:	fbb4 f4f5 	udiv	r4, r4, r5
        ep->xfer_size = ep->maxpacket * pktcnt;
 8002f9a:	b2a4      	uxth	r4, r4
 8002f9c:	fb04 f505 	mul.w	r5, r4, r5
 8002fa0:	620d      	str	r5, [r1, #32]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8002fa2:	691d      	ldr	r5, [r3, #16]
 8002fa4:	4e12      	ldr	r6, [pc, #72]	@ (8002ff0 <USB_EPStartXfer+0x24c>)
 8002fa6:	ea06 44c4 	and.w	r4, r6, r4, lsl #19
 8002faa:	432c      	orrs	r4, r5
 8002fac:	611c      	str	r4, [r3, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8002fae:	691c      	ldr	r4, [r3, #16]
 8002fb0:	6a0d      	ldr	r5, [r1, #32]
 8002fb2:	f3c5 0512 	ubfx	r5, r5, #0, #19
 8002fb6:	432c      	orrs	r4, r5
 8002fb8:	611c      	str	r4, [r3, #16]
 8002fba:	e719      	b.n	8002df0 <USB_EPStartXfer+0x4c>
      if ((uint32_t)ep->xfer_buff != 0U)
 8002fbc:	68ca      	ldr	r2, [r1, #12]
 8002fbe:	2a00      	cmp	r2, #0
 8002fc0:	f43f af19 	beq.w	8002df6 <USB_EPStartXfer+0x52>
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8002fc4:	615a      	str	r2, [r3, #20]
 8002fc6:	e716      	b.n	8002df6 <USB_EPStartXfer+0x52>
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8002fc8:	f8d0 3808 	ldr.w	r3, [r0, #2056]	@ 0x808
 8002fcc:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8002fd0:	d106      	bne.n	8002fe0 <USB_EPStartXfer+0x23c>
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8002fd2:	f8dc 3b00 	ldr.w	r3, [ip, #2816]	@ 0xb00
 8002fd6:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8002fda:	f8cc 3b00 	str.w	r3, [ip, #2816]	@ 0xb00
 8002fde:	e70e      	b.n	8002dfe <USB_EPStartXfer+0x5a>
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8002fe0:	f8dc 3b00 	ldr.w	r3, [ip, #2816]	@ 0xb00
 8002fe4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002fe8:	f8cc 3b00 	str.w	r3, [ip, #2816]	@ 0xb00
 8002fec:	e707      	b.n	8002dfe <USB_EPStartXfer+0x5a>
 8002fee:	bf00      	nop
 8002ff0:	1ff80000 	.word	0x1ff80000

08002ff4 <USB_ReadPacket>:
{
 8002ff4:	b510      	push	{r4, lr}
 8002ff6:	4684      	mov	ip, r0
 8002ff8:	4608      	mov	r0, r1
  uint32_t count32b = (uint32_t)len >> 2U;
 8002ffa:	ea4f 0e92 	mov.w	lr, r2, lsr #2
  uint16_t remaining_bytes = len % 4U;
 8002ffe:	f002 0203 	and.w	r2, r2, #3
  for (i = 0U; i < count32b; i++)
 8003002:	2300      	movs	r3, #0
 8003004:	e005      	b.n	8003012 <USB_ReadPacket+0x1e>
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8003006:	f50c 5180 	add.w	r1, ip, #4096	@ 0x1000
 800300a:	6809      	ldr	r1, [r1, #0]
 800300c:	f840 1b04 	str.w	r1, [r0], #4
  for (i = 0U; i < count32b; i++)
 8003010:	3301      	adds	r3, #1
 8003012:	4573      	cmp	r3, lr
 8003014:	d3f7      	bcc.n	8003006 <USB_ReadPacket+0x12>
  if (remaining_bytes != 0U)
 8003016:	b17a      	cbz	r2, 8003038 <USB_ReadPacket+0x44>
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8003018:	f50c 5c80 	add.w	ip, ip, #4096	@ 0x1000
 800301c:	f8dc 4000 	ldr.w	r4, [ip]
    i = 0U;
 8003020:	2100      	movs	r1, #0
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8003022:	b2cb      	uxtb	r3, r1
 8003024:	00db      	lsls	r3, r3, #3
 8003026:	fa24 f303 	lsr.w	r3, r4, r3
 800302a:	f800 3b01 	strb.w	r3, [r0], #1
      i++;
 800302e:	3101      	adds	r1, #1
      remaining_bytes--;
 8003030:	3a01      	subs	r2, #1
 8003032:	b292      	uxth	r2, r2
    } while (remaining_bytes != 0U);
 8003034:	2a00      	cmp	r2, #0
 8003036:	d1f4      	bne.n	8003022 <USB_ReadPacket+0x2e>
}
 8003038:	bd10      	pop	{r4, pc}

0800303a <USB_EPSetStall>:
  uint32_t epnum = (uint32_t)ep->num;
 800303a:	780b      	ldrb	r3, [r1, #0]
  if (ep->is_in == 1U)
 800303c:	784a      	ldrb	r2, [r1, #1]
 800303e:	2a01      	cmp	r2, #1
 8003040:	d014      	beq.n	800306c <USB_EPSetStall+0x32>
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8003042:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 8003046:	f8d0 2b00 	ldr.w	r2, [r0, #2816]	@ 0xb00
 800304a:	2a00      	cmp	r2, #0
 800304c:	db06      	blt.n	800305c <USB_EPSetStall+0x22>
 800304e:	b12b      	cbz	r3, 800305c <USB_EPSetStall+0x22>
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8003050:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	@ 0xb00
 8003054:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003058:	f8c0 3b00 	str.w	r3, [r0, #2816]	@ 0xb00
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800305c:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	@ 0xb00
 8003060:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8003064:	f8c0 3b00 	str.w	r3, [r0, #2816]	@ 0xb00
}
 8003068:	2000      	movs	r0, #0
 800306a:	4770      	bx	lr
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800306c:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 8003070:	f8d0 2900 	ldr.w	r2, [r0, #2304]	@ 0x900
 8003074:	2a00      	cmp	r2, #0
 8003076:	db06      	blt.n	8003086 <USB_EPSetStall+0x4c>
 8003078:	b12b      	cbz	r3, 8003086 <USB_EPSetStall+0x4c>
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800307a:	f8d0 3900 	ldr.w	r3, [r0, #2304]	@ 0x900
 800307e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003082:	f8c0 3900 	str.w	r3, [r0, #2304]	@ 0x900
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8003086:	f8d0 3900 	ldr.w	r3, [r0, #2304]	@ 0x900
 800308a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800308e:	f8c0 3900 	str.w	r3, [r0, #2304]	@ 0x900
 8003092:	e7e9      	b.n	8003068 <USB_EPSetStall+0x2e>

08003094 <USB_EPClearStall>:
  uint32_t epnum = (uint32_t)ep->num;
 8003094:	780b      	ldrb	r3, [r1, #0]
  if (ep->is_in == 1U)
 8003096:	784a      	ldrb	r2, [r1, #1]
 8003098:	2a01      	cmp	r2, #1
 800309a:	d00e      	beq.n	80030ba <USB_EPClearStall+0x26>
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800309c:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 80030a0:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	@ 0xb00
 80030a4:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80030a8:	f8c0 3b00 	str.w	r3, [r0, #2816]	@ 0xb00
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80030ac:	790b      	ldrb	r3, [r1, #4]
 80030ae:	3b02      	subs	r3, #2
 80030b0:	b2db      	uxtb	r3, r3
 80030b2:	2b01      	cmp	r3, #1
 80030b4:	d915      	bls.n	80030e2 <USB_EPClearStall+0x4e>
}
 80030b6:	2000      	movs	r0, #0
 80030b8:	4770      	bx	lr
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80030ba:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 80030be:	f8d0 3900 	ldr.w	r3, [r0, #2304]	@ 0x900
 80030c2:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80030c6:	f8c0 3900 	str.w	r3, [r0, #2304]	@ 0x900
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80030ca:	790b      	ldrb	r3, [r1, #4]
 80030cc:	3b02      	subs	r3, #2
 80030ce:	b2db      	uxtb	r3, r3
 80030d0:	2b01      	cmp	r3, #1
 80030d2:	d8f0      	bhi.n	80030b6 <USB_EPClearStall+0x22>
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80030d4:	f8d0 3900 	ldr.w	r3, [r0, #2304]	@ 0x900
 80030d8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80030dc:	f8c0 3900 	str.w	r3, [r0, #2304]	@ 0x900
 80030e0:	e7e9      	b.n	80030b6 <USB_EPClearStall+0x22>
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80030e2:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	@ 0xb00
 80030e6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80030ea:	f8c0 3b00 	str.w	r3, [r0, #2816]	@ 0xb00
 80030ee:	e7e2      	b.n	80030b6 <USB_EPClearStall+0x22>

080030f0 <USB_SetDevAddress>:
  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80030f0:	f8d0 3800 	ldr.w	r3, [r0, #2048]	@ 0x800
 80030f4:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 80030f8:	f8c0 3800 	str.w	r3, [r0, #2048]	@ 0x800
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80030fc:	f8d0 3800 	ldr.w	r3, [r0, #2048]	@ 0x800
 8003100:	0109      	lsls	r1, r1, #4
 8003102:	f401 61fe 	and.w	r1, r1, #2032	@ 0x7f0
 8003106:	430b      	orrs	r3, r1
 8003108:	f8c0 3800 	str.w	r3, [r0, #2048]	@ 0x800
}
 800310c:	2000      	movs	r0, #0
 800310e:	4770      	bx	lr

08003110 <USB_DevConnect>:
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8003110:	f8d0 3e00 	ldr.w	r3, [r0, #3584]	@ 0xe00
 8003114:	f023 0303 	bic.w	r3, r3, #3
 8003118:	f8c0 3e00 	str.w	r3, [r0, #3584]	@ 0xe00
  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800311c:	f8d0 3804 	ldr.w	r3, [r0, #2052]	@ 0x804
 8003120:	f023 0302 	bic.w	r3, r3, #2
 8003124:	f8c0 3804 	str.w	r3, [r0, #2052]	@ 0x804
}
 8003128:	2000      	movs	r0, #0
 800312a:	4770      	bx	lr

0800312c <USB_DevDisconnect>:
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800312c:	f8d0 3e00 	ldr.w	r3, [r0, #3584]	@ 0xe00
 8003130:	f023 0303 	bic.w	r3, r3, #3
 8003134:	f8c0 3e00 	str.w	r3, [r0, #3584]	@ 0xe00
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003138:	f8d0 3804 	ldr.w	r3, [r0, #2052]	@ 0x804
 800313c:	f043 0302 	orr.w	r3, r3, #2
 8003140:	f8c0 3804 	str.w	r3, [r0, #2052]	@ 0x804
}
 8003144:	2000      	movs	r0, #0
 8003146:	4770      	bx	lr

08003148 <USB_ReadInterrupts>:
  tmpreg = USBx->GINTSTS;
 8003148:	6942      	ldr	r2, [r0, #20]
  tmpreg &= USBx->GINTMSK;
 800314a:	6980      	ldr	r0, [r0, #24]
}
 800314c:	4010      	ands	r0, r2
 800314e:	4770      	bx	lr

08003150 <USB_ReadDevAllOutEpInterrupt>:
  tmpreg  = USBx_DEVICE->DAINT;
 8003150:	f8d0 3818 	ldr.w	r3, [r0, #2072]	@ 0x818
 8003154:	f500 6000 	add.w	r0, r0, #2048	@ 0x800
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8003158:	69c0      	ldr	r0, [r0, #28]
 800315a:	4018      	ands	r0, r3
}
 800315c:	0c00      	lsrs	r0, r0, #16
 800315e:	4770      	bx	lr

08003160 <USB_ReadDevAllInEpInterrupt>:
  tmpreg  = USBx_DEVICE->DAINT;
 8003160:	f8d0 3818 	ldr.w	r3, [r0, #2072]	@ 0x818
 8003164:	f500 6000 	add.w	r0, r0, #2048	@ 0x800
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8003168:	69c0      	ldr	r0, [r0, #28]
 800316a:	4018      	ands	r0, r3
}
 800316c:	b280      	uxth	r0, r0
 800316e:	4770      	bx	lr

08003170 <USB_ReadDevOutEPInterrupt>:
  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8003170:	eb00 1141 	add.w	r1, r0, r1, lsl #5
 8003174:	f8d1 2b08 	ldr.w	r2, [r1, #2824]	@ 0xb08
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8003178:	f500 6000 	add.w	r0, r0, #2048	@ 0x800
 800317c:	6940      	ldr	r0, [r0, #20]
}
 800317e:	4010      	ands	r0, r2
 8003180:	4770      	bx	lr

08003182 <USB_ReadDevInEPInterrupt>:
  msk = USBx_DEVICE->DIEPMSK;
 8003182:	f8d0 2810 	ldr.w	r2, [r0, #2064]	@ 0x810
  emp = USBx_DEVICE->DIEPEMPMSK;
 8003186:	f8d0 3834 	ldr.w	r3, [r0, #2100]	@ 0x834
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800318a:	f001 0c0f 	and.w	ip, r1, #15
 800318e:	fa23 f30c 	lsr.w	r3, r3, ip
 8003192:	01db      	lsls	r3, r3, #7
 8003194:	b2db      	uxtb	r3, r3
 8003196:	4313      	orrs	r3, r2
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8003198:	eb00 1041 	add.w	r0, r0, r1, lsl #5
 800319c:	f500 6010 	add.w	r0, r0, #2304	@ 0x900
 80031a0:	6880      	ldr	r0, [r0, #8]
}
 80031a2:	4018      	ands	r0, r3
 80031a4:	4770      	bx	lr

080031a6 <USB_GetMode>:
  return ((USBx->GINTSTS) & 0x1U);
 80031a6:	6940      	ldr	r0, [r0, #20]
}
 80031a8:	f000 0001 	and.w	r0, r0, #1
 80031ac:	4770      	bx	lr

080031ae <USB_SetCurrentMode>:
{
 80031ae:	b538      	push	{r3, r4, r5, lr}
 80031b0:	4605      	mov	r5, r0
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80031b2:	68c3      	ldr	r3, [r0, #12]
 80031b4:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 80031b8:	60c3      	str	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 80031ba:	2901      	cmp	r1, #1
 80031bc:	d013      	beq.n	80031e6 <USB_SetCurrentMode+0x38>
  else if (mode == USB_DEVICE_MODE)
 80031be:	bb19      	cbnz	r1, 8003208 <USB_SetCurrentMode+0x5a>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80031c0:	68c3      	ldr	r3, [r0, #12]
 80031c2:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80031c6:	60c3      	str	r3, [r0, #12]
  uint32_t ms = 0U;
 80031c8:	2400      	movs	r4, #0
      HAL_Delay(10U);
 80031ca:	200a      	movs	r0, #10
 80031cc:	f7fd fcc4 	bl	8000b58 <HAL_Delay>
      ms += 10U;
 80031d0:	340a      	adds	r4, #10
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80031d2:	4628      	mov	r0, r5
 80031d4:	f7ff ffe7 	bl	80031a6 <USB_GetMode>
 80031d8:	b108      	cbz	r0, 80031de <USB_SetCurrentMode+0x30>
 80031da:	2cc7      	cmp	r4, #199	@ 0xc7
 80031dc:	d9f5      	bls.n	80031ca <USB_SetCurrentMode+0x1c>
  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 80031de:	2cc8      	cmp	r4, #200	@ 0xc8
 80031e0:	d014      	beq.n	800320c <USB_SetCurrentMode+0x5e>
  return HAL_OK;
 80031e2:	2000      	movs	r0, #0
}
 80031e4:	bd38      	pop	{r3, r4, r5, pc}
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80031e6:	68c3      	ldr	r3, [r0, #12]
 80031e8:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80031ec:	60c3      	str	r3, [r0, #12]
  uint32_t ms = 0U;
 80031ee:	2400      	movs	r4, #0
      HAL_Delay(10U);
 80031f0:	200a      	movs	r0, #10
 80031f2:	f7fd fcb1 	bl	8000b58 <HAL_Delay>
      ms += 10U;
 80031f6:	340a      	adds	r4, #10
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80031f8:	4628      	mov	r0, r5
 80031fa:	f7ff ffd4 	bl	80031a6 <USB_GetMode>
 80031fe:	2801      	cmp	r0, #1
 8003200:	d0ed      	beq.n	80031de <USB_SetCurrentMode+0x30>
 8003202:	2cc7      	cmp	r4, #199	@ 0xc7
 8003204:	d9f4      	bls.n	80031f0 <USB_SetCurrentMode+0x42>
 8003206:	e7ea      	b.n	80031de <USB_SetCurrentMode+0x30>
    return HAL_ERROR;
 8003208:	2001      	movs	r0, #1
 800320a:	e7eb      	b.n	80031e4 <USB_SetCurrentMode+0x36>
    return HAL_ERROR;
 800320c:	2001      	movs	r0, #1
 800320e:	e7e9      	b.n	80031e4 <USB_SetCurrentMode+0x36>

08003210 <USB_ActivateSetup>:
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8003210:	f8d0 3900 	ldr.w	r3, [r0, #2304]	@ 0x900
 8003214:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8003218:	f023 0307 	bic.w	r3, r3, #7
 800321c:	f8c0 3900 	str.w	r3, [r0, #2304]	@ 0x900
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8003220:	f8d0 3804 	ldr.w	r3, [r0, #2052]	@ 0x804
 8003224:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003228:	f8c0 3804 	str.w	r3, [r0, #2052]	@ 0x804
}
 800322c:	2000      	movs	r0, #0
 800322e:	4770      	bx	lr

08003230 <USB_EP0_OutStart>:
{
 8003230:	b410      	push	{r4}
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8003232:	6c04      	ldr	r4, [r0, #64]	@ 0x40
  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8003234:	4b15      	ldr	r3, [pc, #84]	@ (800328c <USB_EP0_OutStart+0x5c>)
 8003236:	429c      	cmp	r4, r3
 8003238:	d903      	bls.n	8003242 <USB_EP0_OutStart+0x12>
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800323a:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	@ 0xb00
 800323e:	2b00      	cmp	r3, #0
 8003240:	db16      	blt.n	8003270 <USB_EP0_OutStart+0x40>
  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8003242:	2400      	movs	r4, #0
 8003244:	f8c0 4b10 	str.w	r4, [r0, #2832]	@ 0xb10
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8003248:	f8d0 4b10 	ldr.w	r4, [r0, #2832]	@ 0xb10
 800324c:	f444 2400 	orr.w	r4, r4, #524288	@ 0x80000
 8003250:	f8c0 4b10 	str.w	r4, [r0, #2832]	@ 0xb10
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8003254:	f8d0 4b10 	ldr.w	r4, [r0, #2832]	@ 0xb10
 8003258:	f044 0418 	orr.w	r4, r4, #24
 800325c:	f8c0 4b10 	str.w	r4, [r0, #2832]	@ 0xb10
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8003260:	f8d0 4b10 	ldr.w	r4, [r0, #2832]	@ 0xb10
 8003264:	f044 44c0 	orr.w	r4, r4, #1610612736	@ 0x60000000
 8003268:	f8c0 4b10 	str.w	r4, [r0, #2832]	@ 0xb10
  if (dma == 1U)
 800326c:	2901      	cmp	r1, #1
 800326e:	d003      	beq.n	8003278 <USB_EP0_OutStart+0x48>
}
 8003270:	2000      	movs	r0, #0
 8003272:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003276:	4770      	bx	lr
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8003278:	f8c0 2b14 	str.w	r2, [r0, #2836]	@ 0xb14
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800327c:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	@ 0xb00
 8003280:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 8003284:	f8c0 3b00 	str.w	r3, [r0, #2816]	@ 0xb00
 8003288:	e7f2      	b.n	8003270 <USB_EP0_OutStart+0x40>
 800328a:	bf00      	nop
 800328c:	4f54300a 	.word	0x4f54300a

08003290 <makeFreeRtosPriority>:
/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
  
  if (priority != osPriorityError) {
 8003290:	2884      	cmp	r0, #132	@ 0x84
 8003292:	d001      	beq.n	8003298 <makeFreeRtosPriority+0x8>
    fpriority += (priority - osPriorityIdle);
 8003294:	3003      	adds	r0, #3
 8003296:	4770      	bx	lr
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8003298:	2000      	movs	r0, #0
  }
  
  return fpriority;
}
 800329a:	4770      	bx	lr

0800329c <inHandlerMode>:
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800329c:	f3ef 8005 	mrs	r0, IPSR

/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
  return __get_IPSR() != 0;
}
 80032a0:	3800      	subs	r0, #0
 80032a2:	bf18      	it	ne
 80032a4:	2001      	movne	r0, #1
 80032a6:	4770      	bx	lr

080032a8 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80032a8:	b508      	push	{r3, lr}
  vTaskStartScheduler();
 80032aa:	f000 fa9b 	bl	80037e4 <vTaskStartScheduler>
  
  return osOK;
}
 80032ae:	2000      	movs	r0, #0
 80032b0:	bd08      	pop	{r3, pc}

080032b2 <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 80032b2:	b508      	push	{r3, lr}
  if (inHandlerMode()) {
 80032b4:	f7ff fff2 	bl	800329c <inHandlerMode>
 80032b8:	b110      	cbz	r0, 80032c0 <osKernelSysTick+0xe>
    return xTaskGetTickCountFromISR();
 80032ba:	f000 fae3 	bl	8003884 <xTaskGetTickCountFromISR>
  }
  else {
    return xTaskGetTickCount();
  }
}
 80032be:	bd08      	pop	{r3, pc}
    return xTaskGetTickCount();
 80032c0:	f000 fada 	bl	8003878 <xTaskGetTickCount>
 80032c4:	e7fb      	b.n	80032be <osKernelSysTick+0xc>

080032c6 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80032c6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80032ca:	b087      	sub	sp, #28
 80032cc:	460e      	mov	r6, r1
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80032ce:	6944      	ldr	r4, [r0, #20]
 80032d0:	b1c4      	cbz	r4, 8003304 <osThreadCreate+0x3e>
 80032d2:	6985      	ldr	r5, [r0, #24]
 80032d4:	b1b5      	cbz	r5, 8003304 <osThreadCreate+0x3e>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80032d6:	6847      	ldr	r7, [r0, #4]
 80032d8:	f8d0 8000 	ldr.w	r8, [r0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80032dc:	f8d0 9010 	ldr.w	r9, [r0, #16]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80032e0:	f9b0 0008 	ldrsh.w	r0, [r0, #8]
 80032e4:	f7ff ffd4 	bl	8003290 <makeFreeRtosPriority>
 80032e8:	9502      	str	r5, [sp, #8]
 80032ea:	9401      	str	r4, [sp, #4]
 80032ec:	9000      	str	r0, [sp, #0]
 80032ee:	4633      	mov	r3, r6
 80032f0:	464a      	mov	r2, r9
 80032f2:	4641      	mov	r1, r8
 80032f4:	4638      	mov	r0, r7
 80032f6:	f000 fa07 	bl	8003708 <xTaskCreateStatic>
 80032fa:	9005      	str	r0, [sp, #20]
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80032fc:	9805      	ldr	r0, [sp, #20]
}
 80032fe:	b007      	add	sp, #28
 8003300:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003304:	6844      	ldr	r4, [r0, #4]
 8003306:	6805      	ldr	r5, [r0, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8003308:	6907      	ldr	r7, [r0, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800330a:	f9b0 0008 	ldrsh.w	r0, [r0, #8]
 800330e:	f7ff ffbf 	bl	8003290 <makeFreeRtosPriority>
 8003312:	ab05      	add	r3, sp, #20
 8003314:	9301      	str	r3, [sp, #4]
 8003316:	9000      	str	r0, [sp, #0]
 8003318:	4633      	mov	r3, r6
 800331a:	b2ba      	uxth	r2, r7
 800331c:	4629      	mov	r1, r5
 800331e:	4620      	mov	r0, r4
 8003320:	f000 fa2d 	bl	800377e <xTaskCreate>
 8003324:	2801      	cmp	r0, #1
 8003326:	d0e9      	beq.n	80032fc <osThreadCreate+0x36>
      return NULL;
 8003328:	2000      	movs	r0, #0
 800332a:	e7e8      	b.n	80032fe <osThreadCreate+0x38>

0800332c <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800332c:	b508      	push	{r3, lr}
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800332e:	b900      	cbnz	r0, 8003332 <osDelay+0x6>
 8003330:	2001      	movs	r0, #1
 8003332:	f000 fbb7 	bl	8003aa4 <vTaskDelay>
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8003336:	2000      	movs	r0, #0
 8003338:	bd08      	pop	{r3, pc}

0800333a <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800333a:	f100 0308 	add.w	r3, r0, #8
 800333e:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003340:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003344:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003346:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003348:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800334a:	2300      	movs	r3, #0
 800334c:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800334e:	4770      	bx	lr

08003350 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003350:	2300      	movs	r3, #0
 8003352:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003354:	4770      	bx	lr

08003356 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 8003356:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003358:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800335a:	689a      	ldr	r2, [r3, #8]
 800335c:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800335e:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003360:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8003362:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 8003364:	6803      	ldr	r3, [r0, #0]
 8003366:	3301      	adds	r3, #1
 8003368:	6003      	str	r3, [r0, #0]
}
 800336a:	4770      	bx	lr

0800336c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800336c:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800336e:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003370:	f1b5 3fff 	cmp.w	r5, #4294967295	@ 0xffffffff
 8003374:	d011      	beq.n	800339a <vListInsert+0x2e>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003376:	f100 0308 	add.w	r3, r0, #8
 800337a:	461c      	mov	r4, r3
 800337c:	685b      	ldr	r3, [r3, #4]
 800337e:	681a      	ldr	r2, [r3, #0]
 8003380:	42aa      	cmp	r2, r5
 8003382:	d9fa      	bls.n	800337a <vListInsert+0xe>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003384:	6863      	ldr	r3, [r4, #4]
 8003386:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003388:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800338a:	608c      	str	r4, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 800338c:	6061      	str	r1, [r4, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800338e:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 8003390:	6803      	ldr	r3, [r0, #0]
 8003392:	3301      	adds	r3, #1
 8003394:	6003      	str	r3, [r0, #0]
}
 8003396:	bc30      	pop	{r4, r5}
 8003398:	4770      	bx	lr
		pxIterator = pxList->xListEnd.pxPrevious;
 800339a:	6904      	ldr	r4, [r0, #16]
 800339c:	e7f2      	b.n	8003384 <vListInsert+0x18>

0800339e <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800339e:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80033a0:	6841      	ldr	r1, [r0, #4]
 80033a2:	6882      	ldr	r2, [r0, #8]
 80033a4:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80033a6:	6841      	ldr	r1, [r0, #4]
 80033a8:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80033aa:	685a      	ldr	r2, [r3, #4]
 80033ac:	4282      	cmp	r2, r0
 80033ae:	d006      	beq.n	80033be <uxListRemove+0x20>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80033b0:	2200      	movs	r2, #0
 80033b2:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 80033b4:	681a      	ldr	r2, [r3, #0]
 80033b6:	3a01      	subs	r2, #1
 80033b8:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80033ba:	6818      	ldr	r0, [r3, #0]
}
 80033bc:	4770      	bx	lr
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80033be:	6882      	ldr	r2, [r0, #8]
 80033c0:	605a      	str	r2, [r3, #4]
 80033c2:	e7f5      	b.n	80033b0 <uxListRemove+0x12>

080033c4 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80033c4:	4b08      	ldr	r3, [pc, #32]	@ (80033e8 <prvResetNextTaskUnblockTime+0x24>)
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	b923      	cbnz	r3, 80033d6 <prvResetNextTaskUnblockTime+0x12>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80033cc:	4b07      	ldr	r3, [pc, #28]	@ (80033ec <prvResetNextTaskUnblockTime+0x28>)
 80033ce:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80033d2:	601a      	str	r2, [r3, #0]
 80033d4:	4770      	bx	lr
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80033d6:	4b04      	ldr	r3, [pc, #16]	@ (80033e8 <prvResetNextTaskUnblockTime+0x24>)
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	68db      	ldr	r3, [r3, #12]
 80033dc:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80033de:	685a      	ldr	r2, [r3, #4]
 80033e0:	4b02      	ldr	r3, [pc, #8]	@ (80033ec <prvResetNextTaskUnblockTime+0x28>)
 80033e2:	601a      	str	r2, [r3, #0]
	}
}
 80033e4:	4770      	bx	lr
 80033e6:	bf00      	nop
 80033e8:	20000590 	.word	0x20000590
 80033ec:	20000528 	.word	0x20000528

080033f0 <prvInitialiseNewTask>:
{
 80033f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80033f4:	4607      	mov	r7, r0
 80033f6:	4698      	mov	r8, r3
 80033f8:	9d08      	ldr	r5, [sp, #32]
 80033fa:	f8dd 9024 	ldr.w	r9, [sp, #36]	@ 0x24
 80033fe:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003400:	6b26      	ldr	r6, [r4, #48]	@ 0x30
 8003402:	f102 4280 	add.w	r2, r2, #1073741824	@ 0x40000000
 8003406:	3a01      	subs	r2, #1
 8003408:	eb06 0682 	add.w	r6, r6, r2, lsl #2
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800340c:	f026 0607 	bic.w	r6, r6, #7
	if( pcName != NULL )
 8003410:	2900      	cmp	r1, #0
 8003412:	d044      	beq.n	800349e <prvInitialiseNewTask+0xae>
 8003414:	4608      	mov	r0, r1
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003416:	f04f 0c00 	mov.w	ip, #0
 800341a:	f1bc 0f0f 	cmp.w	ip, #15
 800341e:	d809      	bhi.n	8003434 <prvInitialiseNewTask+0x44>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003420:	f810 200c 	ldrb.w	r2, [r0, ip]
 8003424:	eb04 030c 	add.w	r3, r4, ip
 8003428:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
			if( pcName[ x ] == ( char ) 0x00 )
 800342c:	b112      	cbz	r2, 8003434 <prvInitialiseNewTask+0x44>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800342e:	f10c 0c01 	add.w	ip, ip, #1
 8003432:	e7f2      	b.n	800341a <prvInitialiseNewTask+0x2a>
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003434:	2300      	movs	r3, #0
 8003436:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800343a:	2d06      	cmp	r5, #6
 800343c:	d900      	bls.n	8003440 <prvInitialiseNewTask+0x50>
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800343e:	2506      	movs	r5, #6
	pxNewTCB->uxPriority = uxPriority;
 8003440:	62e5      	str	r5, [r4, #44]	@ 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 8003442:	6465      	str	r5, [r4, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8003444:	f04f 0a00 	mov.w	sl, #0
 8003448:	f8c4 a048 	str.w	sl, [r4, #72]	@ 0x48
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800344c:	1d20      	adds	r0, r4, #4
 800344e:	f7ff ff7f 	bl	8003350 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003452:	f104 0018 	add.w	r0, r4, #24
 8003456:	f7ff ff7b 	bl	8003350 <vListInitialiseItem>
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800345a:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800345c:	f1c5 0507 	rsb	r5, r5, #7
 8003460:	61a5      	str	r5, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003462:	6264      	str	r4, [r4, #36]	@ 0x24
		pxNewTCB->ulNotifiedValue = 0;
 8003464:	f8c4 a098 	str.w	sl, [r4, #152]	@ 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003468:	f884 a09c 	strb.w	sl, [r4, #156]	@ 0x9c
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800346c:	224c      	movs	r2, #76	@ 0x4c
 800346e:	4651      	mov	r1, sl
 8003470:	18a0      	adds	r0, r4, r2
 8003472:	f002 f850 	bl	8005516 <memset>
 8003476:	4b0c      	ldr	r3, [pc, #48]	@ (80034a8 <prvInitialiseNewTask+0xb8>)
 8003478:	6523      	str	r3, [r4, #80]	@ 0x50
 800347a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800347e:	6562      	str	r2, [r4, #84]	@ 0x54
 8003480:	33d0      	adds	r3, #208	@ 0xd0
 8003482:	65a3      	str	r3, [r4, #88]	@ 0x58
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003484:	4642      	mov	r2, r8
 8003486:	4639      	mov	r1, r7
 8003488:	4630      	mov	r0, r6
 800348a:	f000 fbc1 	bl	8003c10 <pxPortInitialiseStack>
 800348e:	6020      	str	r0, [r4, #0]
	if( pxCreatedTask != NULL )
 8003490:	f1b9 0f00 	cmp.w	r9, #0
 8003494:	d001      	beq.n	800349a <prvInitialiseNewTask+0xaa>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003496:	f8c9 4000 	str.w	r4, [r9]
}
 800349a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800349e:	2300      	movs	r3, #0
 80034a0:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
 80034a4:	e7c9      	b.n	800343a <prvInitialiseNewTask+0x4a>
 80034a6:	bf00      	nop
 80034a8:	20004c84 	.word	0x20004c84

080034ac <prvInitialiseTaskLists>:
{
 80034ac:	b538      	push	{r3, r4, r5, lr}
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80034ae:	2400      	movs	r4, #0
 80034b0:	e007      	b.n	80034c2 <prvInitialiseTaskLists+0x16>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80034b2:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 80034b6:	0093      	lsls	r3, r2, #2
 80034b8:	480e      	ldr	r0, [pc, #56]	@ (80034f4 <prvInitialiseTaskLists+0x48>)
 80034ba:	4418      	add	r0, r3
 80034bc:	f7ff ff3d 	bl	800333a <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80034c0:	3401      	adds	r4, #1
 80034c2:	2c06      	cmp	r4, #6
 80034c4:	d9f5      	bls.n	80034b2 <prvInitialiseTaskLists+0x6>
	vListInitialise( &xDelayedTaskList1 );
 80034c6:	4d0c      	ldr	r5, [pc, #48]	@ (80034f8 <prvInitialiseTaskLists+0x4c>)
 80034c8:	4628      	mov	r0, r5
 80034ca:	f7ff ff36 	bl	800333a <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80034ce:	4c0b      	ldr	r4, [pc, #44]	@ (80034fc <prvInitialiseTaskLists+0x50>)
 80034d0:	4620      	mov	r0, r4
 80034d2:	f7ff ff32 	bl	800333a <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80034d6:	480a      	ldr	r0, [pc, #40]	@ (8003500 <prvInitialiseTaskLists+0x54>)
 80034d8:	f7ff ff2f 	bl	800333a <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
 80034dc:	4809      	ldr	r0, [pc, #36]	@ (8003504 <prvInitialiseTaskLists+0x58>)
 80034de:	f7ff ff2c 	bl	800333a <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
 80034e2:	4809      	ldr	r0, [pc, #36]	@ (8003508 <prvInitialiseTaskLists+0x5c>)
 80034e4:	f7ff ff29 	bl	800333a <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
 80034e8:	4b08      	ldr	r3, [pc, #32]	@ (800350c <prvInitialiseTaskLists+0x60>)
 80034ea:	601d      	str	r5, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80034ec:	4b08      	ldr	r3, [pc, #32]	@ (8003510 <prvInitialiseTaskLists+0x64>)
 80034ee:	601c      	str	r4, [r3, #0]
}
 80034f0:	bd38      	pop	{r3, r4, r5, pc}
 80034f2:	bf00      	nop
 80034f4:	200005bc 	.word	0x200005bc
 80034f8:	200005a8 	.word	0x200005a8
 80034fc:	20000594 	.word	0x20000594
 8003500:	20000578 	.word	0x20000578
 8003504:	20000564 	.word	0x20000564
 8003508:	2000054c 	.word	0x2000054c
 800350c:	20000590 	.word	0x20000590
 8003510:	2000058c 	.word	0x2000058c

08003514 <prvAddNewTaskToReadyList>:
{
 8003514:	b510      	push	{r4, lr}
 8003516:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 8003518:	f000 fba4 	bl	8003c64 <vPortEnterCritical>
		uxCurrentNumberOfTasks++;
 800351c:	4a21      	ldr	r2, [pc, #132]	@ (80035a4 <prvAddNewTaskToReadyList+0x90>)
 800351e:	6813      	ldr	r3, [r2, #0]
 8003520:	3301      	adds	r3, #1
 8003522:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003524:	4b20      	ldr	r3, [pc, #128]	@ (80035a8 <prvAddNewTaskToReadyList+0x94>)
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	b15b      	cbz	r3, 8003542 <prvAddNewTaskToReadyList+0x2e>
			if( xSchedulerRunning == pdFALSE )
 800352a:	4b20      	ldr	r3, [pc, #128]	@ (80035ac <prvAddNewTaskToReadyList+0x98>)
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	b96b      	cbnz	r3, 800354c <prvAddNewTaskToReadyList+0x38>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003530:	4b1d      	ldr	r3, [pc, #116]	@ (80035a8 <prvAddNewTaskToReadyList+0x94>)
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003536:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8003538:	429a      	cmp	r2, r3
 800353a:	d807      	bhi.n	800354c <prvAddNewTaskToReadyList+0x38>
					pxCurrentTCB = pxNewTCB;
 800353c:	4b1a      	ldr	r3, [pc, #104]	@ (80035a8 <prvAddNewTaskToReadyList+0x94>)
 800353e:	601c      	str	r4, [r3, #0]
 8003540:	e004      	b.n	800354c <prvAddNewTaskToReadyList+0x38>
			pxCurrentTCB = pxNewTCB;
 8003542:	4b19      	ldr	r3, [pc, #100]	@ (80035a8 <prvAddNewTaskToReadyList+0x94>)
 8003544:	601c      	str	r4, [r3, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003546:	6813      	ldr	r3, [r2, #0]
 8003548:	2b01      	cmp	r3, #1
 800354a:	d028      	beq.n	800359e <prvAddNewTaskToReadyList+0x8a>
		uxTaskNumber++;
 800354c:	4a18      	ldr	r2, [pc, #96]	@ (80035b0 <prvAddNewTaskToReadyList+0x9c>)
 800354e:	6813      	ldr	r3, [r2, #0]
 8003550:	3301      	adds	r3, #1
 8003552:	6013      	str	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 8003554:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 8003556:	2301      	movs	r3, #1
 8003558:	4083      	lsls	r3, r0
 800355a:	4a16      	ldr	r2, [pc, #88]	@ (80035b4 <prvAddNewTaskToReadyList+0xa0>)
 800355c:	6811      	ldr	r1, [r2, #0]
 800355e:	430b      	orrs	r3, r1
 8003560:	6013      	str	r3, [r2, #0]
 8003562:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8003566:	1d21      	adds	r1, r4, #4
 8003568:	4b13      	ldr	r3, [pc, #76]	@ (80035b8 <prvAddNewTaskToReadyList+0xa4>)
 800356a:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800356e:	f7ff fef2 	bl	8003356 <vListInsertEnd>
	taskEXIT_CRITICAL();
 8003572:	f000 fb99 	bl	8003ca8 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 8003576:	4b0d      	ldr	r3, [pc, #52]	@ (80035ac <prvAddNewTaskToReadyList+0x98>)
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	b17b      	cbz	r3, 800359c <prvAddNewTaskToReadyList+0x88>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800357c:	4b0a      	ldr	r3, [pc, #40]	@ (80035a8 <prvAddNewTaskToReadyList+0x94>)
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003582:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8003584:	429a      	cmp	r2, r3
 8003586:	d209      	bcs.n	800359c <prvAddNewTaskToReadyList+0x88>
			taskYIELD_IF_USING_PREEMPTION();
 8003588:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800358c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003590:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8003594:	f3bf 8f4f 	dsb	sy
 8003598:	f3bf 8f6f 	isb	sy
}
 800359c:	bd10      	pop	{r4, pc}
				prvInitialiseTaskLists();
 800359e:	f7ff ff85 	bl	80034ac <prvInitialiseTaskLists>
 80035a2:	e7d3      	b.n	800354c <prvAddNewTaskToReadyList+0x38>
 80035a4:	20000548 	.word	0x20000548
 80035a8:	20000648 	.word	0x20000648
 80035ac:	2000053c 	.word	0x2000053c
 80035b0:	2000052c 	.word	0x2000052c
 80035b4:	20000540 	.word	0x20000540
 80035b8:	200005bc 	.word	0x200005bc

080035bc <prvDeleteTCB>:
	{
 80035bc:	b510      	push	{r4, lr}
 80035be:	4604      	mov	r4, r0
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80035c0:	304c      	adds	r0, #76	@ 0x4c
 80035c2:	f001 ffc1 	bl	8005548 <_reclaim_reent>
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80035c6:	f894 309d 	ldrb.w	r3, [r4, #157]	@ 0x9d
 80035ca:	b163      	cbz	r3, 80035e6 <prvDeleteTCB+0x2a>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80035cc:	2b01      	cmp	r3, #1
 80035ce:	d011      	beq.n	80035f4 <prvDeleteTCB+0x38>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80035d0:	2b02      	cmp	r3, #2
 80035d2:	d00e      	beq.n	80035f2 <prvDeleteTCB+0x36>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80035d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80035d8:	f383 8811 	msr	BASEPRI, r3
 80035dc:	f3bf 8f6f 	isb	sy
 80035e0:	f3bf 8f4f 	dsb	sy
 80035e4:	e7fe      	b.n	80035e4 <prvDeleteTCB+0x28>
				vPortFree( pxTCB->pxStack );
 80035e6:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 80035e8:	f000 fd76 	bl	80040d8 <vPortFree>
				vPortFree( pxTCB );
 80035ec:	4620      	mov	r0, r4
 80035ee:	f000 fd73 	bl	80040d8 <vPortFree>
	}
 80035f2:	bd10      	pop	{r4, pc}
				vPortFree( pxTCB );
 80035f4:	4620      	mov	r0, r4
 80035f6:	f000 fd6f 	bl	80040d8 <vPortFree>
 80035fa:	e7fa      	b.n	80035f2 <prvDeleteTCB+0x36>

080035fc <prvCheckTasksWaitingTermination>:
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80035fc:	4b0f      	ldr	r3, [pc, #60]	@ (800363c <prvCheckTasksWaitingTermination+0x40>)
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	b1d3      	cbz	r3, 8003638 <prvCheckTasksWaitingTermination+0x3c>
{
 8003602:	b510      	push	{r4, lr}
			taskENTER_CRITICAL();
 8003604:	f000 fb2e 	bl	8003c64 <vPortEnterCritical>
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003608:	4b0d      	ldr	r3, [pc, #52]	@ (8003640 <prvCheckTasksWaitingTermination+0x44>)
 800360a:	68db      	ldr	r3, [r3, #12]
 800360c:	68dc      	ldr	r4, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800360e:	1d20      	adds	r0, r4, #4
 8003610:	f7ff fec5 	bl	800339e <uxListRemove>
				--uxCurrentNumberOfTasks;
 8003614:	4a0b      	ldr	r2, [pc, #44]	@ (8003644 <prvCheckTasksWaitingTermination+0x48>)
 8003616:	6813      	ldr	r3, [r2, #0]
 8003618:	3b01      	subs	r3, #1
 800361a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800361c:	4a07      	ldr	r2, [pc, #28]	@ (800363c <prvCheckTasksWaitingTermination+0x40>)
 800361e:	6813      	ldr	r3, [r2, #0]
 8003620:	3b01      	subs	r3, #1
 8003622:	6013      	str	r3, [r2, #0]
			taskEXIT_CRITICAL();
 8003624:	f000 fb40 	bl	8003ca8 <vPortExitCritical>
			prvDeleteTCB( pxTCB );
 8003628:	4620      	mov	r0, r4
 800362a:	f7ff ffc7 	bl	80035bc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800362e:	4b03      	ldr	r3, [pc, #12]	@ (800363c <prvCheckTasksWaitingTermination+0x40>)
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	2b00      	cmp	r3, #0
 8003634:	d1e6      	bne.n	8003604 <prvCheckTasksWaitingTermination+0x8>
}
 8003636:	bd10      	pop	{r4, pc}
 8003638:	4770      	bx	lr
 800363a:	bf00      	nop
 800363c:	20000560 	.word	0x20000560
 8003640:	20000564 	.word	0x20000564
 8003644:	20000548 	.word	0x20000548

08003648 <prvIdleTask>:
{
 8003648:	b508      	push	{r3, lr}
		prvCheckTasksWaitingTermination();
 800364a:	f7ff ffd7 	bl	80035fc <prvCheckTasksWaitingTermination>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800364e:	4b07      	ldr	r3, [pc, #28]	@ (800366c <prvIdleTask+0x24>)
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	2b01      	cmp	r3, #1
 8003654:	d9f9      	bls.n	800364a <prvIdleTask+0x2>
				taskYIELD();
 8003656:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800365a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800365e:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8003662:	f3bf 8f4f 	dsb	sy
 8003666:	f3bf 8f6f 	isb	sy
 800366a:	e7ee      	b.n	800364a <prvIdleTask+0x2>
 800366c:	200005bc 	.word	0x200005bc

08003670 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8003670:	b570      	push	{r4, r5, r6, lr}
 8003672:	4604      	mov	r4, r0
 8003674:	460d      	mov	r5, r1
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8003676:	4b1d      	ldr	r3, [pc, #116]	@ (80036ec <prvAddCurrentTaskToDelayedList+0x7c>)
 8003678:	681e      	ldr	r6, [r3, #0]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800367a:	4b1d      	ldr	r3, [pc, #116]	@ (80036f0 <prvAddCurrentTaskToDelayedList+0x80>)
 800367c:	6818      	ldr	r0, [r3, #0]
 800367e:	3004      	adds	r0, #4
 8003680:	f7ff fe8d 	bl	800339e <uxListRemove>
 8003684:	b948      	cbnz	r0, 800369a <prvAddCurrentTaskToDelayedList+0x2a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8003686:	4b1a      	ldr	r3, [pc, #104]	@ (80036f0 <prvAddCurrentTaskToDelayedList+0x80>)
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800368c:	2201      	movs	r2, #1
 800368e:	409a      	lsls	r2, r3
 8003690:	4918      	ldr	r1, [pc, #96]	@ (80036f4 <prvAddCurrentTaskToDelayedList+0x84>)
 8003692:	680b      	ldr	r3, [r1, #0]
 8003694:	ea23 0302 	bic.w	r3, r3, r2
 8003698:	600b      	str	r3, [r1, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800369a:	f1b4 3fff 	cmp.w	r4, #4294967295	@ 0xffffffff
 800369e:	d00d      	beq.n	80036bc <prvAddCurrentTaskToDelayedList+0x4c>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
 80036a0:	4434      	add	r4, r6

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80036a2:	4b13      	ldr	r3, [pc, #76]	@ (80036f0 <prvAddCurrentTaskToDelayedList+0x80>)
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	605c      	str	r4, [r3, #4]

			if( xTimeToWake < xConstTickCount )
 80036a8:	42a6      	cmp	r6, r4
 80036aa:	d910      	bls.n	80036ce <prvAddCurrentTaskToDelayedList+0x5e>
			{
				/* Wake time has overflowed.  Place this item in the overflow
				list. */
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80036ac:	4b12      	ldr	r3, [pc, #72]	@ (80036f8 <prvAddCurrentTaskToDelayedList+0x88>)
 80036ae:	6818      	ldr	r0, [r3, #0]
 80036b0:	4b0f      	ldr	r3, [pc, #60]	@ (80036f0 <prvAddCurrentTaskToDelayedList+0x80>)
 80036b2:	6819      	ldr	r1, [r3, #0]
 80036b4:	3104      	adds	r1, #4
 80036b6:	f7ff fe59 	bl	800336c <vListInsert>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80036ba:	bd70      	pop	{r4, r5, r6, pc}
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80036bc:	2d00      	cmp	r5, #0
 80036be:	d0ef      	beq.n	80036a0 <prvAddCurrentTaskToDelayedList+0x30>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80036c0:	4b0b      	ldr	r3, [pc, #44]	@ (80036f0 <prvAddCurrentTaskToDelayedList+0x80>)
 80036c2:	6819      	ldr	r1, [r3, #0]
 80036c4:	3104      	adds	r1, #4
 80036c6:	480d      	ldr	r0, [pc, #52]	@ (80036fc <prvAddCurrentTaskToDelayedList+0x8c>)
 80036c8:	f7ff fe45 	bl	8003356 <vListInsertEnd>
 80036cc:	e7f5      	b.n	80036ba <prvAddCurrentTaskToDelayedList+0x4a>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80036ce:	4b0c      	ldr	r3, [pc, #48]	@ (8003700 <prvAddCurrentTaskToDelayedList+0x90>)
 80036d0:	6818      	ldr	r0, [r3, #0]
 80036d2:	4b07      	ldr	r3, [pc, #28]	@ (80036f0 <prvAddCurrentTaskToDelayedList+0x80>)
 80036d4:	6819      	ldr	r1, [r3, #0]
 80036d6:	3104      	adds	r1, #4
 80036d8:	f7ff fe48 	bl	800336c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80036dc:	4b09      	ldr	r3, [pc, #36]	@ (8003704 <prvAddCurrentTaskToDelayedList+0x94>)
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	42a3      	cmp	r3, r4
 80036e2:	d9ea      	bls.n	80036ba <prvAddCurrentTaskToDelayedList+0x4a>
					xNextTaskUnblockTime = xTimeToWake;
 80036e4:	4b07      	ldr	r3, [pc, #28]	@ (8003704 <prvAddCurrentTaskToDelayedList+0x94>)
 80036e6:	601c      	str	r4, [r3, #0]
}
 80036e8:	e7e7      	b.n	80036ba <prvAddCurrentTaskToDelayedList+0x4a>
 80036ea:	bf00      	nop
 80036ec:	20000544 	.word	0x20000544
 80036f0:	20000648 	.word	0x20000648
 80036f4:	20000540 	.word	0x20000540
 80036f8:	2000058c 	.word	0x2000058c
 80036fc:	2000054c 	.word	0x2000054c
 8003700:	20000590 	.word	0x20000590
 8003704:	20000528 	.word	0x20000528

08003708 <xTaskCreateStatic>:
	{
 8003708:	b530      	push	{r4, r5, lr}
 800370a:	b087      	sub	sp, #28
 800370c:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
		configASSERT( puxStackBuffer != NULL );
 800370e:	b17c      	cbz	r4, 8003730 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8003710:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 8003712:	b1b5      	cbz	r5, 8003742 <xTaskCreateStatic+0x3a>
			volatile size_t xSize = sizeof( StaticTask_t );
 8003714:	25a0      	movs	r5, #160	@ 0xa0
 8003716:	9504      	str	r5, [sp, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003718:	9d04      	ldr	r5, [sp, #16]
 800371a:	2da0      	cmp	r5, #160	@ 0xa0
 800371c:	d01a      	beq.n	8003754 <xTaskCreateStatic+0x4c>
 800371e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003722:	f383 8811 	msr	BASEPRI, r3
 8003726:	f3bf 8f6f 	isb	sy
 800372a:	f3bf 8f4f 	dsb	sy
 800372e:	e7fe      	b.n	800372e <xTaskCreateStatic+0x26>
 8003730:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003734:	f383 8811 	msr	BASEPRI, r3
 8003738:	f3bf 8f6f 	isb	sy
 800373c:	f3bf 8f4f 	dsb	sy
		configASSERT( puxStackBuffer != NULL );
 8003740:	e7fe      	b.n	8003740 <xTaskCreateStatic+0x38>
 8003742:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003746:	f383 8811 	msr	BASEPRI, r3
 800374a:	f3bf 8f6f 	isb	sy
 800374e:	f3bf 8f4f 	dsb	sy
		configASSERT( pxTaskBuffer != NULL );
 8003752:	e7fe      	b.n	8003752 <xTaskCreateStatic+0x4a>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8003754:	9d04      	ldr	r5, [sp, #16]
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003756:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 8003758:	632c      	str	r4, [r5, #48]	@ 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800375a:	2402      	movs	r4, #2
 800375c:	f885 409d 	strb.w	r4, [r5, #157]	@ 0x9d
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003760:	2400      	movs	r4, #0
 8003762:	9403      	str	r4, [sp, #12]
 8003764:	9502      	str	r5, [sp, #8]
 8003766:	ac05      	add	r4, sp, #20
 8003768:	9401      	str	r4, [sp, #4]
 800376a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800376c:	9400      	str	r4, [sp, #0]
 800376e:	f7ff fe3f 	bl	80033f0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003772:	980c      	ldr	r0, [sp, #48]	@ 0x30
 8003774:	f7ff fece 	bl	8003514 <prvAddNewTaskToReadyList>
	}
 8003778:	9805      	ldr	r0, [sp, #20]
 800377a:	b007      	add	sp, #28
 800377c:	bd30      	pop	{r4, r5, pc}

0800377e <xTaskCreate>:
	{
 800377e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003782:	b085      	sub	sp, #20
 8003784:	4607      	mov	r7, r0
 8003786:	4688      	mov	r8, r1
 8003788:	4614      	mov	r4, r2
 800378a:	461e      	mov	r6, r3
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800378c:	0090      	lsls	r0, r2, #2
 800378e:	f000 fc21 	bl	8003fd4 <pvPortMalloc>
			if( pxStack != NULL )
 8003792:	b308      	cbz	r0, 80037d8 <xTaskCreate+0x5a>
 8003794:	4681      	mov	r9, r0
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003796:	20a0      	movs	r0, #160	@ 0xa0
 8003798:	f000 fc1c 	bl	8003fd4 <pvPortMalloc>
				if( pxNewTCB != NULL )
 800379c:	4605      	mov	r5, r0
 800379e:	b1a8      	cbz	r0, 80037cc <xTaskCreate+0x4e>
					pxNewTCB->pxStack = pxStack;
 80037a0:	f8c0 9030 	str.w	r9, [r0, #48]	@ 0x30
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80037a4:	2300      	movs	r3, #0
 80037a6:	f880 309d 	strb.w	r3, [r0, #157]	@ 0x9d
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80037aa:	9303      	str	r3, [sp, #12]
 80037ac:	9002      	str	r0, [sp, #8]
 80037ae:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80037b0:	9301      	str	r3, [sp, #4]
 80037b2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80037b4:	9300      	str	r3, [sp, #0]
 80037b6:	4633      	mov	r3, r6
 80037b8:	4622      	mov	r2, r4
 80037ba:	4641      	mov	r1, r8
 80037bc:	4638      	mov	r0, r7
 80037be:	f7ff fe17 	bl	80033f0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80037c2:	4628      	mov	r0, r5
 80037c4:	f7ff fea6 	bl	8003514 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80037c8:	2001      	movs	r0, #1
 80037ca:	e007      	b.n	80037dc <xTaskCreate+0x5e>
					vPortFree( pxStack );
 80037cc:	4648      	mov	r0, r9
 80037ce:	f000 fc83 	bl	80040d8 <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80037d2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80037d6:	e001      	b.n	80037dc <xTaskCreate+0x5e>
 80037d8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
	}
 80037dc:	b005      	add	sp, #20
 80037de:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

080037e4 <vTaskStartScheduler>:
{
 80037e4:	b510      	push	{r4, lr}
 80037e6:	b088      	sub	sp, #32
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80037e8:	2400      	movs	r4, #0
 80037ea:	9405      	str	r4, [sp, #20]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80037ec:	9406      	str	r4, [sp, #24]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80037ee:	aa07      	add	r2, sp, #28
 80037f0:	a906      	add	r1, sp, #24
 80037f2:	a805      	add	r0, sp, #20
 80037f4:	f7fc fec4 	bl	8000580 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80037f8:	9b05      	ldr	r3, [sp, #20]
 80037fa:	9302      	str	r3, [sp, #8]
 80037fc:	9b06      	ldr	r3, [sp, #24]
 80037fe:	9301      	str	r3, [sp, #4]
 8003800:	9400      	str	r4, [sp, #0]
 8003802:	4623      	mov	r3, r4
 8003804:	9a07      	ldr	r2, [sp, #28]
 8003806:	4910      	ldr	r1, [pc, #64]	@ (8003848 <vTaskStartScheduler+0x64>)
 8003808:	4810      	ldr	r0, [pc, #64]	@ (800384c <vTaskStartScheduler+0x68>)
 800380a:	f7ff ff7d 	bl	8003708 <xTaskCreateStatic>
 800380e:	4b10      	ldr	r3, [pc, #64]	@ (8003850 <vTaskStartScheduler+0x6c>)
 8003810:	6018      	str	r0, [r3, #0]
		if( xIdleTaskHandle != NULL )
 8003812:	b1b8      	cbz	r0, 8003844 <vTaskStartScheduler+0x60>
 8003814:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003818:	f383 8811 	msr	BASEPRI, r3
 800381c:	f3bf 8f6f 	isb	sy
 8003820:	f3bf 8f4f 	dsb	sy
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8003824:	4b0b      	ldr	r3, [pc, #44]	@ (8003854 <vTaskStartScheduler+0x70>)
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	334c      	adds	r3, #76	@ 0x4c
 800382a:	4a0b      	ldr	r2, [pc, #44]	@ (8003858 <vTaskStartScheduler+0x74>)
 800382c:	6013      	str	r3, [r2, #0]
		xNextTaskUnblockTime = portMAX_DELAY;
 800382e:	4b0b      	ldr	r3, [pc, #44]	@ (800385c <vTaskStartScheduler+0x78>)
 8003830:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003834:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003836:	4b0a      	ldr	r3, [pc, #40]	@ (8003860 <vTaskStartScheduler+0x7c>)
 8003838:	2201      	movs	r2, #1
 800383a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800383c:	4b09      	ldr	r3, [pc, #36]	@ (8003864 <vTaskStartScheduler+0x80>)
 800383e:	601c      	str	r4, [r3, #0]
		if( xPortStartScheduler() != pdFALSE )
 8003840:	f000 faaa 	bl	8003d98 <xPortStartScheduler>
}
 8003844:	b008      	add	sp, #32
 8003846:	bd10      	pop	{r4, pc}
 8003848:	08006678 	.word	0x08006678
 800384c:	08003649 	.word	0x08003649
 8003850:	20000524 	.word	0x20000524
 8003854:	20000648 	.word	0x20000648
 8003858:	20000174 	.word	0x20000174
 800385c:	20000528 	.word	0x20000528
 8003860:	2000053c 	.word	0x2000053c
 8003864:	20000544 	.word	0x20000544

08003868 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 8003868:	4a02      	ldr	r2, [pc, #8]	@ (8003874 <vTaskSuspendAll+0xc>)
 800386a:	6813      	ldr	r3, [r2, #0]
 800386c:	3301      	adds	r3, #1
 800386e:	6013      	str	r3, [r2, #0]
}
 8003870:	4770      	bx	lr
 8003872:	bf00      	nop
 8003874:	20000520 	.word	0x20000520

08003878 <xTaskGetTickCount>:
		xTicks = xTickCount;
 8003878:	4b01      	ldr	r3, [pc, #4]	@ (8003880 <xTaskGetTickCount+0x8>)
 800387a:	6818      	ldr	r0, [r3, #0]
}
 800387c:	4770      	bx	lr
 800387e:	bf00      	nop
 8003880:	20000544 	.word	0x20000544

08003884 <xTaskGetTickCountFromISR>:
{
 8003884:	b508      	push	{r3, lr}
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003886:	f000 fb13 	bl	8003eb0 <vPortValidateInterruptPriority>
		xReturn = xTickCount;
 800388a:	4b01      	ldr	r3, [pc, #4]	@ (8003890 <xTaskGetTickCountFromISR+0xc>)
 800388c:	6818      	ldr	r0, [r3, #0]
}
 800388e:	bd08      	pop	{r3, pc}
 8003890:	20000544 	.word	0x20000544

08003894 <xTaskIncrementTick>:
{
 8003894:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003896:	4b3a      	ldr	r3, [pc, #232]	@ (8003980 <xTaskIncrementTick+0xec>)
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	2b00      	cmp	r3, #0
 800389c:	d169      	bne.n	8003972 <xTaskIncrementTick+0xde>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800389e:	4b39      	ldr	r3, [pc, #228]	@ (8003984 <xTaskIncrementTick+0xf0>)
 80038a0:	681d      	ldr	r5, [r3, #0]
 80038a2:	3501      	adds	r5, #1
		xTickCount = xConstTickCount;
 80038a4:	601d      	str	r5, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80038a6:	b9c5      	cbnz	r5, 80038da <xTaskIncrementTick+0x46>
			taskSWITCH_DELAYED_LISTS();
 80038a8:	4b37      	ldr	r3, [pc, #220]	@ (8003988 <xTaskIncrementTick+0xf4>)
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	b143      	cbz	r3, 80038c2 <xTaskIncrementTick+0x2e>
 80038b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80038b4:	f383 8811 	msr	BASEPRI, r3
 80038b8:	f3bf 8f6f 	isb	sy
 80038bc:	f3bf 8f4f 	dsb	sy
 80038c0:	e7fe      	b.n	80038c0 <xTaskIncrementTick+0x2c>
 80038c2:	4a31      	ldr	r2, [pc, #196]	@ (8003988 <xTaskIncrementTick+0xf4>)
 80038c4:	6811      	ldr	r1, [r2, #0]
 80038c6:	4b31      	ldr	r3, [pc, #196]	@ (800398c <xTaskIncrementTick+0xf8>)
 80038c8:	6818      	ldr	r0, [r3, #0]
 80038ca:	6010      	str	r0, [r2, #0]
 80038cc:	6019      	str	r1, [r3, #0]
 80038ce:	4a30      	ldr	r2, [pc, #192]	@ (8003990 <xTaskIncrementTick+0xfc>)
 80038d0:	6813      	ldr	r3, [r2, #0]
 80038d2:	3301      	adds	r3, #1
 80038d4:	6013      	str	r3, [r2, #0]
 80038d6:	f7ff fd75 	bl	80033c4 <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 80038da:	4b2e      	ldr	r3, [pc, #184]	@ (8003994 <xTaskIncrementTick+0x100>)
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	42ab      	cmp	r3, r5
 80038e0:	d93d      	bls.n	800395e <xTaskIncrementTick+0xca>
BaseType_t xSwitchRequired = pdFALSE;
 80038e2:	2700      	movs	r7, #0
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80038e4:	4b2c      	ldr	r3, [pc, #176]	@ (8003998 <xTaskIncrementTick+0x104>)
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038ea:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80038ee:	009a      	lsls	r2, r3, #2
 80038f0:	4b2a      	ldr	r3, [pc, #168]	@ (800399c <xTaskIncrementTick+0x108>)
 80038f2:	589b      	ldr	r3, [r3, r2]
 80038f4:	2b01      	cmp	r3, #1
 80038f6:	d900      	bls.n	80038fa <xTaskIncrementTick+0x66>
				xSwitchRequired = pdTRUE;
 80038f8:	2701      	movs	r7, #1
			if( xYieldPending != pdFALSE )
 80038fa:	4b29      	ldr	r3, [pc, #164]	@ (80039a0 <xTaskIncrementTick+0x10c>)
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d03c      	beq.n	800397c <xTaskIncrementTick+0xe8>
				xSwitchRequired = pdTRUE;
 8003902:	2701      	movs	r7, #1
	return xSwitchRequired;
 8003904:	e03a      	b.n	800397c <xTaskIncrementTick+0xe8>
							xSwitchRequired = pdTRUE;
 8003906:	2701      	movs	r7, #1
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003908:	4b1f      	ldr	r3, [pc, #124]	@ (8003988 <xTaskIncrementTick+0xf4>)
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	b343      	cbz	r3, 8003962 <xTaskIncrementTick+0xce>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003910:	4b1d      	ldr	r3, [pc, #116]	@ (8003988 <xTaskIncrementTick+0xf4>)
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	68db      	ldr	r3, [r3, #12]
 8003916:	68dc      	ldr	r4, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003918:	6863      	ldr	r3, [r4, #4]
					if( xConstTickCount < xItemValue )
 800391a:	429d      	cmp	r5, r3
 800391c:	d326      	bcc.n	800396c <xTaskIncrementTick+0xd8>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800391e:	1d26      	adds	r6, r4, #4
 8003920:	4630      	mov	r0, r6
 8003922:	f7ff fd3c 	bl	800339e <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003926:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8003928:	b11b      	cbz	r3, 8003932 <xTaskIncrementTick+0x9e>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800392a:	f104 0018 	add.w	r0, r4, #24
 800392e:	f7ff fd36 	bl	800339e <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003932:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8003934:	2201      	movs	r2, #1
 8003936:	409a      	lsls	r2, r3
 8003938:	491a      	ldr	r1, [pc, #104]	@ (80039a4 <xTaskIncrementTick+0x110>)
 800393a:	6808      	ldr	r0, [r1, #0]
 800393c:	4302      	orrs	r2, r0
 800393e:	600a      	str	r2, [r1, #0]
 8003940:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8003944:	009a      	lsls	r2, r3, #2
 8003946:	4631      	mov	r1, r6
 8003948:	4814      	ldr	r0, [pc, #80]	@ (800399c <xTaskIncrementTick+0x108>)
 800394a:	4410      	add	r0, r2
 800394c:	f7ff fd03 	bl	8003356 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003950:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8003952:	4b11      	ldr	r3, [pc, #68]	@ (8003998 <xTaskIncrementTick+0x104>)
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003958:	429a      	cmp	r2, r3
 800395a:	d2d4      	bcs.n	8003906 <xTaskIncrementTick+0x72>
 800395c:	e7d4      	b.n	8003908 <xTaskIncrementTick+0x74>
BaseType_t xSwitchRequired = pdFALSE;
 800395e:	2700      	movs	r7, #0
 8003960:	e7d2      	b.n	8003908 <xTaskIncrementTick+0x74>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003962:	4b0c      	ldr	r3, [pc, #48]	@ (8003994 <xTaskIncrementTick+0x100>)
 8003964:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003968:	601a      	str	r2, [r3, #0]
					break;
 800396a:	e7bb      	b.n	80038e4 <xTaskIncrementTick+0x50>
						xNextTaskUnblockTime = xItemValue;
 800396c:	4a09      	ldr	r2, [pc, #36]	@ (8003994 <xTaskIncrementTick+0x100>)
 800396e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8003970:	e7b8      	b.n	80038e4 <xTaskIncrementTick+0x50>
		++xPendedTicks;
 8003972:	4a0d      	ldr	r2, [pc, #52]	@ (80039a8 <xTaskIncrementTick+0x114>)
 8003974:	6813      	ldr	r3, [r2, #0]
 8003976:	3301      	adds	r3, #1
 8003978:	6013      	str	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
 800397a:	2700      	movs	r7, #0
}
 800397c:	4638      	mov	r0, r7
 800397e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003980:	20000520 	.word	0x20000520
 8003984:	20000544 	.word	0x20000544
 8003988:	20000590 	.word	0x20000590
 800398c:	2000058c 	.word	0x2000058c
 8003990:	20000530 	.word	0x20000530
 8003994:	20000528 	.word	0x20000528
 8003998:	20000648 	.word	0x20000648
 800399c:	200005bc 	.word	0x200005bc
 80039a0:	20000534 	.word	0x20000534
 80039a4:	20000540 	.word	0x20000540
 80039a8:	20000538 	.word	0x20000538

080039ac <xTaskResumeAll>:
{
 80039ac:	b538      	push	{r3, r4, r5, lr}
	configASSERT( uxSchedulerSuspended );
 80039ae:	4b35      	ldr	r3, [pc, #212]	@ (8003a84 <xTaskResumeAll+0xd8>)
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	b943      	cbnz	r3, 80039c6 <xTaskResumeAll+0x1a>
 80039b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80039b8:	f383 8811 	msr	BASEPRI, r3
 80039bc:	f3bf 8f6f 	isb	sy
 80039c0:	f3bf 8f4f 	dsb	sy
 80039c4:	e7fe      	b.n	80039c4 <xTaskResumeAll+0x18>
	taskENTER_CRITICAL();
 80039c6:	f000 f94d 	bl	8003c64 <vPortEnterCritical>
		--uxSchedulerSuspended;
 80039ca:	4b2e      	ldr	r3, [pc, #184]	@ (8003a84 <xTaskResumeAll+0xd8>)
 80039cc:	681a      	ldr	r2, [r3, #0]
 80039ce:	3a01      	subs	r2, #1
 80039d0:	601a      	str	r2, [r3, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d14f      	bne.n	8003a78 <xTaskResumeAll+0xcc>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80039d8:	4b2b      	ldr	r3, [pc, #172]	@ (8003a88 <xTaskResumeAll+0xdc>)
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	b90b      	cbnz	r3, 80039e2 <xTaskResumeAll+0x36>
BaseType_t xAlreadyYielded = pdFALSE;
 80039de:	2400      	movs	r4, #0
 80039e0:	e04b      	b.n	8003a7a <xTaskResumeAll+0xce>
TCB_t *pxTCB = NULL;
 80039e2:	2400      	movs	r4, #0
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80039e4:	4b29      	ldr	r3, [pc, #164]	@ (8003a8c <xTaskResumeAll+0xe0>)
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	b31b      	cbz	r3, 8003a32 <xTaskResumeAll+0x86>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80039ea:	4b28      	ldr	r3, [pc, #160]	@ (8003a8c <xTaskResumeAll+0xe0>)
 80039ec:	68db      	ldr	r3, [r3, #12]
 80039ee:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80039f0:	f104 0018 	add.w	r0, r4, #24
 80039f4:	f7ff fcd3 	bl	800339e <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80039f8:	1d25      	adds	r5, r4, #4
 80039fa:	4628      	mov	r0, r5
 80039fc:	f7ff fccf 	bl	800339e <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003a00:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 8003a02:	2301      	movs	r3, #1
 8003a04:	4083      	lsls	r3, r0
 8003a06:	4a22      	ldr	r2, [pc, #136]	@ (8003a90 <xTaskResumeAll+0xe4>)
 8003a08:	6811      	ldr	r1, [r2, #0]
 8003a0a:	430b      	orrs	r3, r1
 8003a0c:	6013      	str	r3, [r2, #0]
 8003a0e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8003a12:	4629      	mov	r1, r5
 8003a14:	4b1f      	ldr	r3, [pc, #124]	@ (8003a94 <xTaskResumeAll+0xe8>)
 8003a16:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8003a1a:	f7ff fc9c 	bl	8003356 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003a1e:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8003a20:	4b1d      	ldr	r3, [pc, #116]	@ (8003a98 <xTaskResumeAll+0xec>)
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a26:	429a      	cmp	r2, r3
 8003a28:	d3dc      	bcc.n	80039e4 <xTaskResumeAll+0x38>
						xYieldPending = pdTRUE;
 8003a2a:	4b1c      	ldr	r3, [pc, #112]	@ (8003a9c <xTaskResumeAll+0xf0>)
 8003a2c:	2201      	movs	r2, #1
 8003a2e:	601a      	str	r2, [r3, #0]
 8003a30:	e7d8      	b.n	80039e4 <xTaskResumeAll+0x38>
				if( pxTCB != NULL )
 8003a32:	b10c      	cbz	r4, 8003a38 <xTaskResumeAll+0x8c>
					prvResetNextTaskUnblockTime();
 8003a34:	f7ff fcc6 	bl	80033c4 <prvResetNextTaskUnblockTime>
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003a38:	4b19      	ldr	r3, [pc, #100]	@ (8003aa0 <xTaskResumeAll+0xf4>)
 8003a3a:	681c      	ldr	r4, [r3, #0]
					if( xPendedCounts > ( TickType_t ) 0U )
 8003a3c:	b984      	cbnz	r4, 8003a60 <xTaskResumeAll+0xb4>
				if( xYieldPending != pdFALSE )
 8003a3e:	4b17      	ldr	r3, [pc, #92]	@ (8003a9c <xTaskResumeAll+0xf0>)
 8003a40:	681c      	ldr	r4, [r3, #0]
 8003a42:	b1d4      	cbz	r4, 8003a7a <xTaskResumeAll+0xce>
					taskYIELD_IF_USING_PREEMPTION();
 8003a44:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8003a48:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003a4c:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8003a50:	f3bf 8f4f 	dsb	sy
 8003a54:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 8003a58:	2401      	movs	r4, #1
 8003a5a:	e00e      	b.n	8003a7a <xTaskResumeAll+0xce>
						} while( xPendedCounts > ( TickType_t ) 0U );
 8003a5c:	3c01      	subs	r4, #1
 8003a5e:	d007      	beq.n	8003a70 <xTaskResumeAll+0xc4>
							if( xTaskIncrementTick() != pdFALSE )
 8003a60:	f7ff ff18 	bl	8003894 <xTaskIncrementTick>
 8003a64:	2800      	cmp	r0, #0
 8003a66:	d0f9      	beq.n	8003a5c <xTaskResumeAll+0xb0>
								xYieldPending = pdTRUE;
 8003a68:	4b0c      	ldr	r3, [pc, #48]	@ (8003a9c <xTaskResumeAll+0xf0>)
 8003a6a:	2201      	movs	r2, #1
 8003a6c:	601a      	str	r2, [r3, #0]
 8003a6e:	e7f5      	b.n	8003a5c <xTaskResumeAll+0xb0>
						xPendedTicks = 0;
 8003a70:	4b0b      	ldr	r3, [pc, #44]	@ (8003aa0 <xTaskResumeAll+0xf4>)
 8003a72:	2200      	movs	r2, #0
 8003a74:	601a      	str	r2, [r3, #0]
 8003a76:	e7e2      	b.n	8003a3e <xTaskResumeAll+0x92>
BaseType_t xAlreadyYielded = pdFALSE;
 8003a78:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8003a7a:	f000 f915 	bl	8003ca8 <vPortExitCritical>
}
 8003a7e:	4620      	mov	r0, r4
 8003a80:	bd38      	pop	{r3, r4, r5, pc}
 8003a82:	bf00      	nop
 8003a84:	20000520 	.word	0x20000520
 8003a88:	20000548 	.word	0x20000548
 8003a8c:	20000578 	.word	0x20000578
 8003a90:	20000540 	.word	0x20000540
 8003a94:	200005bc 	.word	0x200005bc
 8003a98:	20000648 	.word	0x20000648
 8003a9c:	20000534 	.word	0x20000534
 8003aa0:	20000538 	.word	0x20000538

08003aa4 <vTaskDelay>:
	{
 8003aa4:	b510      	push	{r4, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003aa6:	b1a8      	cbz	r0, 8003ad4 <vTaskDelay+0x30>
 8003aa8:	4604      	mov	r4, r0
			configASSERT( uxSchedulerSuspended == 0 );
 8003aaa:	4b10      	ldr	r3, [pc, #64]	@ (8003aec <vTaskDelay+0x48>)
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	b143      	cbz	r3, 8003ac2 <vTaskDelay+0x1e>
 8003ab0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ab4:	f383 8811 	msr	BASEPRI, r3
 8003ab8:	f3bf 8f6f 	isb	sy
 8003abc:	f3bf 8f4f 	dsb	sy
 8003ac0:	e7fe      	b.n	8003ac0 <vTaskDelay+0x1c>
			vTaskSuspendAll();
 8003ac2:	f7ff fed1 	bl	8003868 <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003ac6:	2100      	movs	r1, #0
 8003ac8:	4620      	mov	r0, r4
 8003aca:	f7ff fdd1 	bl	8003670 <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 8003ace:	f7ff ff6d 	bl	80039ac <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 8003ad2:	b948      	cbnz	r0, 8003ae8 <vTaskDelay+0x44>
			portYIELD_WITHIN_API();
 8003ad4:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8003ad8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003adc:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8003ae0:	f3bf 8f4f 	dsb	sy
 8003ae4:	f3bf 8f6f 	isb	sy
	}
 8003ae8:	bd10      	pop	{r4, pc}
 8003aea:	bf00      	nop
 8003aec:	20000520 	.word	0x20000520

08003af0 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003af0:	4b22      	ldr	r3, [pc, #136]	@ (8003b7c <vTaskSwitchContext+0x8c>)
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	b11b      	cbz	r3, 8003afe <vTaskSwitchContext+0xe>
		xYieldPending = pdTRUE;
 8003af6:	4b22      	ldr	r3, [pc, #136]	@ (8003b80 <vTaskSwitchContext+0x90>)
 8003af8:	2201      	movs	r2, #1
 8003afa:	601a      	str	r2, [r3, #0]
 8003afc:	4770      	bx	lr
		xYieldPending = pdFALSE;
 8003afe:	4b20      	ldr	r3, [pc, #128]	@ (8003b80 <vTaskSwitchContext+0x90>)
 8003b00:	2200      	movs	r2, #0
 8003b02:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003b04:	4b1f      	ldr	r3, [pc, #124]	@ (8003b84 <vTaskSwitchContext+0x94>)
 8003b06:	681b      	ldr	r3, [r3, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8003b08:	fab3 f383 	clz	r3, r3
 8003b0c:	b2db      	uxtb	r3, r3
 8003b0e:	f1c3 031f 	rsb	r3, r3, #31
 8003b12:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 8003b16:	008a      	lsls	r2, r1, #2
 8003b18:	491b      	ldr	r1, [pc, #108]	@ (8003b88 <vTaskSwitchContext+0x98>)
 8003b1a:	588a      	ldr	r2, [r1, r2]
 8003b1c:	b942      	cbnz	r2, 8003b30 <vTaskSwitchContext+0x40>
	__asm volatile
 8003b1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003b22:	f383 8811 	msr	BASEPRI, r3
 8003b26:	f3bf 8f6f 	isb	sy
 8003b2a:	f3bf 8f4f 	dsb	sy
 8003b2e:	e7fe      	b.n	8003b2e <vTaskSwitchContext+0x3e>
 8003b30:	4815      	ldr	r0, [pc, #84]	@ (8003b88 <vTaskSwitchContext+0x98>)
 8003b32:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 8003b36:	008a      	lsls	r2, r1, #2
 8003b38:	4402      	add	r2, r0
 8003b3a:	6851      	ldr	r1, [r2, #4]
 8003b3c:	6849      	ldr	r1, [r1, #4]
 8003b3e:	6051      	str	r1, [r2, #4]
 8003b40:	eb03 0c83 	add.w	ip, r3, r3, lsl #2
 8003b44:	ea4f 028c 	mov.w	r2, ip, lsl #2
 8003b48:	3208      	adds	r2, #8
 8003b4a:	4402      	add	r2, r0
 8003b4c:	4291      	cmp	r1, r2
 8003b4e:	d00d      	beq.n	8003b6c <vTaskSwitchContext+0x7c>
 8003b50:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8003b54:	009a      	lsls	r2, r3, #2
 8003b56:	4b0c      	ldr	r3, [pc, #48]	@ (8003b88 <vTaskSwitchContext+0x98>)
 8003b58:	4413      	add	r3, r2
 8003b5a:	685b      	ldr	r3, [r3, #4]
 8003b5c:	68da      	ldr	r2, [r3, #12]
 8003b5e:	4b0b      	ldr	r3, [pc, #44]	@ (8003b8c <vTaskSwitchContext+0x9c>)
 8003b60:	601a      	str	r2, [r3, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	334c      	adds	r3, #76	@ 0x4c
 8003b66:	4a0a      	ldr	r2, [pc, #40]	@ (8003b90 <vTaskSwitchContext+0xa0>)
 8003b68:	6013      	str	r3, [r2, #0]
}
 8003b6a:	4770      	bx	lr
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003b6c:	6848      	ldr	r0, [r1, #4]
 8003b6e:	4662      	mov	r2, ip
 8003b70:	0091      	lsls	r1, r2, #2
 8003b72:	4a05      	ldr	r2, [pc, #20]	@ (8003b88 <vTaskSwitchContext+0x98>)
 8003b74:	440a      	add	r2, r1
 8003b76:	6050      	str	r0, [r2, #4]
 8003b78:	e7ea      	b.n	8003b50 <vTaskSwitchContext+0x60>
 8003b7a:	bf00      	nop
 8003b7c:	20000520 	.word	0x20000520
 8003b80:	20000534 	.word	0x20000534
 8003b84:	20000540 	.word	0x20000540
 8003b88:	200005bc 	.word	0x200005bc
 8003b8c:	20000648 	.word	0x20000648
 8003b90:	20000174 	.word	0x20000174

08003b94 <prvTaskExitError>:
	return pxTopOfStack;
}
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8003b94:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
 8003b96:	2300      	movs	r3, #0
 8003b98:	9301      	str	r3, [sp, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8003b9a:	4b0d      	ldr	r3, [pc, #52]	@ (8003bd0 <prvTaskExitError+0x3c>)
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003ba2:	d008      	beq.n	8003bb6 <prvTaskExitError+0x22>
 8003ba4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ba8:	f383 8811 	msr	BASEPRI, r3
 8003bac:	f3bf 8f6f 	isb	sy
 8003bb0:	f3bf 8f4f 	dsb	sy
 8003bb4:	e7fe      	b.n	8003bb4 <prvTaskExitError+0x20>
 8003bb6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003bba:	f383 8811 	msr	BASEPRI, r3
 8003bbe:	f3bf 8f6f 	isb	sy
 8003bc2:	f3bf 8f4f 	dsb	sy
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8003bc6:	9b01      	ldr	r3, [sp, #4]
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d0fc      	beq.n	8003bc6 <prvTaskExitError+0x32>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8003bcc:	b002      	add	sp, #8
 8003bce:	4770      	bx	lr
 8003bd0:	2000000c 	.word	0x2000000c

08003bd4 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8003bd4:	4808      	ldr	r0, [pc, #32]	@ (8003bf8 <prvPortStartFirstTask+0x24>)
 8003bd6:	6800      	ldr	r0, [r0, #0]
 8003bd8:	6800      	ldr	r0, [r0, #0]
 8003bda:	f380 8808 	msr	MSP, r0
 8003bde:	f04f 0000 	mov.w	r0, #0
 8003be2:	f380 8814 	msr	CONTROL, r0
 8003be6:	b662      	cpsie	i
 8003be8:	b661      	cpsie	f
 8003bea:	f3bf 8f4f 	dsb	sy
 8003bee:	f3bf 8f6f 	isb	sy
 8003bf2:	df00      	svc	0
 8003bf4:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8003bf6:	0000      	.short	0x0000
 8003bf8:	e000ed08 	.word	0xe000ed08

08003bfc <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8003bfc:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8003c0c <vPortEnableVFP+0x10>
 8003c00:	6801      	ldr	r1, [r0, #0]
 8003c02:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8003c06:	6001      	str	r1, [r0, #0]
 8003c08:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8003c0a:	0000      	.short	0x0000
 8003c0c:	e000ed88 	.word	0xe000ed88

08003c10 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8003c10:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003c14:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8003c18:	f021 0101 	bic.w	r1, r1, #1
 8003c1c:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8003c20:	4b05      	ldr	r3, [pc, #20]	@ (8003c38 <pxPortInitialiseStack+0x28>)
 8003c22:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8003c26:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8003c2a:	f06f 0302 	mvn.w	r3, #2
 8003c2e:	f840 3c24 	str.w	r3, [r0, #-36]
}
 8003c32:	3844      	subs	r0, #68	@ 0x44
 8003c34:	4770      	bx	lr
 8003c36:	bf00      	nop
 8003c38:	08003b95 	.word	0x08003b95
 8003c3c:	00000000 	.word	0x00000000

08003c40 <SVC_Handler>:
	__asm volatile (
 8003c40:	4b07      	ldr	r3, [pc, #28]	@ (8003c60 <pxCurrentTCBConst2>)
 8003c42:	6819      	ldr	r1, [r3, #0]
 8003c44:	6808      	ldr	r0, [r1, #0]
 8003c46:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003c4a:	f380 8809 	msr	PSP, r0
 8003c4e:	f3bf 8f6f 	isb	sy
 8003c52:	f04f 0000 	mov.w	r0, #0
 8003c56:	f380 8811 	msr	BASEPRI, r0
 8003c5a:	4770      	bx	lr
 8003c5c:	f3af 8000 	nop.w

08003c60 <pxCurrentTCBConst2>:
 8003c60:	20000648 	.word	0x20000648

08003c64 <vPortEnterCritical>:
 8003c64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c68:	f383 8811 	msr	BASEPRI, r3
 8003c6c:	f3bf 8f6f 	isb	sy
 8003c70:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
 8003c74:	4a0b      	ldr	r2, [pc, #44]	@ (8003ca4 <vPortEnterCritical+0x40>)
 8003c76:	6813      	ldr	r3, [r2, #0]
 8003c78:	3301      	adds	r3, #1
 8003c7a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 8003c7c:	2b01      	cmp	r3, #1
 8003c7e:	d000      	beq.n	8003c82 <vPortEnterCritical+0x1e>
}
 8003c80:	4770      	bx	lr
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8003c82:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8003c86:	f8d3 3d04 	ldr.w	r3, [r3, #3332]	@ 0xd04
 8003c8a:	f013 0fff 	tst.w	r3, #255	@ 0xff
 8003c8e:	d0f7      	beq.n	8003c80 <vPortEnterCritical+0x1c>
 8003c90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c94:	f383 8811 	msr	BASEPRI, r3
 8003c98:	f3bf 8f6f 	isb	sy
 8003c9c:	f3bf 8f4f 	dsb	sy
 8003ca0:	e7fe      	b.n	8003ca0 <vPortEnterCritical+0x3c>
 8003ca2:	bf00      	nop
 8003ca4:	2000000c 	.word	0x2000000c

08003ca8 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 8003ca8:	4b09      	ldr	r3, [pc, #36]	@ (8003cd0 <vPortExitCritical+0x28>)
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	b943      	cbnz	r3, 8003cc0 <vPortExitCritical+0x18>
 8003cae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003cb2:	f383 8811 	msr	BASEPRI, r3
 8003cb6:	f3bf 8f6f 	isb	sy
 8003cba:	f3bf 8f4f 	dsb	sy
 8003cbe:	e7fe      	b.n	8003cbe <vPortExitCritical+0x16>
	uxCriticalNesting--;
 8003cc0:	3b01      	subs	r3, #1
 8003cc2:	4a03      	ldr	r2, [pc, #12]	@ (8003cd0 <vPortExitCritical+0x28>)
 8003cc4:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8003cc6:	b90b      	cbnz	r3, 8003ccc <vPortExitCritical+0x24>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003cc8:	f383 8811 	msr	BASEPRI, r3
}
 8003ccc:	4770      	bx	lr
 8003cce:	bf00      	nop
 8003cd0:	2000000c 	.word	0x2000000c
	...

08003ce0 <PendSV_Handler>:
	__asm volatile
 8003ce0:	f3ef 8009 	mrs	r0, PSP
 8003ce4:	f3bf 8f6f 	isb	sy
 8003ce8:	4b15      	ldr	r3, [pc, #84]	@ (8003d40 <pxCurrentTCBConst>)
 8003cea:	681a      	ldr	r2, [r3, #0]
 8003cec:	f01e 0f10 	tst.w	lr, #16
 8003cf0:	bf08      	it	eq
 8003cf2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8003cf6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003cfa:	6010      	str	r0, [r2, #0]
 8003cfc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8003d00:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8003d04:	f380 8811 	msr	BASEPRI, r0
 8003d08:	f3bf 8f4f 	dsb	sy
 8003d0c:	f3bf 8f6f 	isb	sy
 8003d10:	f7ff feee 	bl	8003af0 <vTaskSwitchContext>
 8003d14:	f04f 0000 	mov.w	r0, #0
 8003d18:	f380 8811 	msr	BASEPRI, r0
 8003d1c:	bc09      	pop	{r0, r3}
 8003d1e:	6819      	ldr	r1, [r3, #0]
 8003d20:	6808      	ldr	r0, [r1, #0]
 8003d22:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003d26:	f01e 0f10 	tst.w	lr, #16
 8003d2a:	bf08      	it	eq
 8003d2c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8003d30:	f380 8809 	msr	PSP, r0
 8003d34:	f3bf 8f6f 	isb	sy
 8003d38:	4770      	bx	lr
 8003d3a:	bf00      	nop
 8003d3c:	f3af 8000 	nop.w

08003d40 <pxCurrentTCBConst>:
 8003d40:	20000648 	.word	0x20000648

08003d44 <SysTick_Handler>:
{
 8003d44:	b508      	push	{r3, lr}
	__asm volatile
 8003d46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d4a:	f383 8811 	msr	BASEPRI, r3
 8003d4e:	f3bf 8f6f 	isb	sy
 8003d52:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
 8003d56:	f7ff fd9d 	bl	8003894 <xTaskIncrementTick>
 8003d5a:	b128      	cbz	r0, 8003d68 <SysTick_Handler+0x24>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8003d5c:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8003d60:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003d64:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
	__asm volatile
 8003d68:	2300      	movs	r3, #0
 8003d6a:	f383 8811 	msr	BASEPRI, r3
}
 8003d6e:	bd08      	pop	{r3, pc}

08003d70 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8003d70:	f04f 22e0 	mov.w	r2, #3758153728	@ 0xe000e000
 8003d74:	2300      	movs	r3, #0
 8003d76:	6113      	str	r3, [r2, #16]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8003d78:	6193      	str	r3, [r2, #24]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8003d7a:	4b05      	ldr	r3, [pc, #20]	@ (8003d90 <vPortSetupTimerInterrupt+0x20>)
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	4905      	ldr	r1, [pc, #20]	@ (8003d94 <vPortSetupTimerInterrupt+0x24>)
 8003d80:	fba1 1303 	umull	r1, r3, r1, r3
 8003d84:	099b      	lsrs	r3, r3, #6
 8003d86:	3b01      	subs	r3, #1
 8003d88:	6153      	str	r3, [r2, #20]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8003d8a:	2307      	movs	r3, #7
 8003d8c:	6113      	str	r3, [r2, #16]
}
 8003d8e:	4770      	bx	lr
 8003d90:	20000000 	.word	0x20000000
 8003d94:	10624dd3 	.word	0x10624dd3

08003d98 <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8003d98:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8003d9c:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	@ 0xd00
 8003da0:	4b3d      	ldr	r3, [pc, #244]	@ (8003e98 <xPortStartScheduler+0x100>)
 8003da2:	429a      	cmp	r2, r3
 8003da4:	d01c      	beq.n	8003de0 <xPortStartScheduler+0x48>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8003da6:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8003daa:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	@ 0xd00
 8003dae:	4b3b      	ldr	r3, [pc, #236]	@ (8003e9c <xPortStartScheduler+0x104>)
 8003db0:	429a      	cmp	r2, r3
 8003db2:	d01e      	beq.n	8003df2 <xPortStartScheduler+0x5a>
{
 8003db4:	b530      	push	{r4, r5, lr}
 8003db6:	b083      	sub	sp, #12
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8003db8:	4b39      	ldr	r3, [pc, #228]	@ (8003ea0 <xPortStartScheduler+0x108>)
 8003dba:	781a      	ldrb	r2, [r3, #0]
 8003dbc:	b2d2      	uxtb	r2, r2
 8003dbe:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8003dc0:	22ff      	movs	r2, #255	@ 0xff
 8003dc2:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003dc4:	781b      	ldrb	r3, [r3, #0]
 8003dc6:	b2db      	uxtb	r3, r3
 8003dc8:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003dcc:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8003dd0:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8003dd4:	4a33      	ldr	r2, [pc, #204]	@ (8003ea4 <xPortStartScheduler+0x10c>)
 8003dd6:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8003dd8:	4b33      	ldr	r3, [pc, #204]	@ (8003ea8 <xPortStartScheduler+0x110>)
 8003dda:	2207      	movs	r2, #7
 8003ddc:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003dde:	e01b      	b.n	8003e18 <xPortStartScheduler+0x80>
	__asm volatile
 8003de0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003de4:	f383 8811 	msr	BASEPRI, r3
 8003de8:	f3bf 8f6f 	isb	sy
 8003dec:	f3bf 8f4f 	dsb	sy
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8003df0:	e7fe      	b.n	8003df0 <xPortStartScheduler+0x58>
 8003df2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003df6:	f383 8811 	msr	BASEPRI, r3
 8003dfa:	f3bf 8f6f 	isb	sy
 8003dfe:	f3bf 8f4f 	dsb	sy
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8003e02:	e7fe      	b.n	8003e02 <xPortStartScheduler+0x6a>
			ulMaxPRIGROUPValue--;
 8003e04:	4a28      	ldr	r2, [pc, #160]	@ (8003ea8 <xPortStartScheduler+0x110>)
 8003e06:	6813      	ldr	r3, [r2, #0]
 8003e08:	3b01      	subs	r3, #1
 8003e0a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003e0c:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8003e10:	005b      	lsls	r3, r3, #1
 8003e12:	b2db      	uxtb	r3, r3
 8003e14:	f88d 3003 	strb.w	r3, [sp, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003e18:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8003e1c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8003e20:	d1f0      	bne.n	8003e04 <xPortStartScheduler+0x6c>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8003e22:	4b21      	ldr	r3, [pc, #132]	@ (8003ea8 <xPortStartScheduler+0x110>)
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	2b03      	cmp	r3, #3
 8003e28:	d008      	beq.n	8003e3c <xPortStartScheduler+0xa4>
 8003e2a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e2e:	f383 8811 	msr	BASEPRI, r3
 8003e32:	f3bf 8f6f 	isb	sy
 8003e36:	f3bf 8f4f 	dsb	sy
 8003e3a:	e7fe      	b.n	8003e3a <xPortStartScheduler+0xa2>
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003e3c:	021b      	lsls	r3, r3, #8
 8003e3e:	4a1a      	ldr	r2, [pc, #104]	@ (8003ea8 <xPortStartScheduler+0x110>)
 8003e40:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8003e42:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003e46:	6013      	str	r3, [r2, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8003e48:	9b01      	ldr	r3, [sp, #4]
 8003e4a:	b2db      	uxtb	r3, r3
 8003e4c:	4a14      	ldr	r2, [pc, #80]	@ (8003ea0 <xPortStartScheduler+0x108>)
 8003e4e:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8003e50:	f04f 24e0 	mov.w	r4, #3758153728	@ 0xe000e000
 8003e54:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	@ 0xd20
 8003e58:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003e5c:	f8c4 3d20 	str.w	r3, [r4, #3360]	@ 0xd20
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8003e60:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	@ 0xd20
 8003e64:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8003e68:	f8c4 3d20 	str.w	r3, [r4, #3360]	@ 0xd20
	vPortSetupTimerInterrupt();
 8003e6c:	f7ff ff80 	bl	8003d70 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 8003e70:	2500      	movs	r5, #0
 8003e72:	4b0e      	ldr	r3, [pc, #56]	@ (8003eac <xPortStartScheduler+0x114>)
 8003e74:	601d      	str	r5, [r3, #0]
	vPortEnableVFP();
 8003e76:	f7ff fec1 	bl	8003bfc <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8003e7a:	f8d4 3f34 	ldr.w	r3, [r4, #3892]	@ 0xf34
 8003e7e:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8003e82:	f8c4 3f34 	str.w	r3, [r4, #3892]	@ 0xf34
	prvPortStartFirstTask();
 8003e86:	f7ff fea5 	bl	8003bd4 <prvPortStartFirstTask>
	vTaskSwitchContext();
 8003e8a:	f7ff fe31 	bl	8003af0 <vTaskSwitchContext>
	prvTaskExitError();
 8003e8e:	f7ff fe81 	bl	8003b94 <prvTaskExitError>
}
 8003e92:	4628      	mov	r0, r5
 8003e94:	b003      	add	sp, #12
 8003e96:	bd30      	pop	{r4, r5, pc}
 8003e98:	410fc271 	.word	0x410fc271
 8003e9c:	410fc270 	.word	0x410fc270
 8003ea0:	e000e400 	.word	0xe000e400
 8003ea4:	20000650 	.word	0x20000650
 8003ea8:	2000064c 	.word	0x2000064c
 8003eac:	2000000c 	.word	0x2000000c

08003eb0 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8003eb0:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8003eb4:	2b0f      	cmp	r3, #15
 8003eb6:	d90f      	bls.n	8003ed8 <vPortValidateInterruptPriority+0x28>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8003eb8:	4a11      	ldr	r2, [pc, #68]	@ (8003f00 <vPortValidateInterruptPriority+0x50>)
 8003eba:	5c9b      	ldrb	r3, [r3, r2]
 8003ebc:	b2db      	uxtb	r3, r3
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8003ebe:	4a11      	ldr	r2, [pc, #68]	@ (8003f04 <vPortValidateInterruptPriority+0x54>)
 8003ec0:	7812      	ldrb	r2, [r2, #0]
 8003ec2:	429a      	cmp	r2, r3
 8003ec4:	d908      	bls.n	8003ed8 <vPortValidateInterruptPriority+0x28>
 8003ec6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003eca:	f383 8811 	msr	BASEPRI, r3
 8003ece:	f3bf 8f6f 	isb	sy
 8003ed2:	f3bf 8f4f 	dsb	sy
 8003ed6:	e7fe      	b.n	8003ed6 <vPortValidateInterruptPriority+0x26>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8003ed8:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8003edc:	f8d3 3d0c 	ldr.w	r3, [r3, #3340]	@ 0xd0c
 8003ee0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003ee4:	4a08      	ldr	r2, [pc, #32]	@ (8003f08 <vPortValidateInterruptPriority+0x58>)
 8003ee6:	6812      	ldr	r2, [r2, #0]
 8003ee8:	4293      	cmp	r3, r2
 8003eea:	d908      	bls.n	8003efe <vPortValidateInterruptPriority+0x4e>
 8003eec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ef0:	f383 8811 	msr	BASEPRI, r3
 8003ef4:	f3bf 8f6f 	isb	sy
 8003ef8:	f3bf 8f4f 	dsb	sy
 8003efc:	e7fe      	b.n	8003efc <vPortValidateInterruptPriority+0x4c>
	}
 8003efe:	4770      	bx	lr
 8003f00:	e000e3f0 	.word	0xe000e3f0
 8003f04:	20000650 	.word	0x20000650
 8003f08:	2000064c 	.word	0x2000064c

08003f0c <prvHeapInit>:
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8003f0c:	4a12      	ldr	r2, [pc, #72]	@ (8003f58 <prvHeapInit+0x4c>)

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8003f0e:	f012 0f07 	tst.w	r2, #7
 8003f12:	d01e      	beq.n	8003f52 <prvHeapInit+0x46>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8003f14:	1dd1      	adds	r1, r2, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003f16:	f021 0107 	bic.w	r1, r1, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8003f1a:	f5c1 5370 	rsb	r3, r1, #15360	@ 0x3c00
 8003f1e:	4413      	add	r3, r2
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003f20:	460a      	mov	r2, r1

	pucAlignedHeap = ( uint8_t * ) uxAddress;

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8003f22:	480e      	ldr	r0, [pc, #56]	@ (8003f5c <prvHeapInit+0x50>)
 8003f24:	6002      	str	r2, [r0, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8003f26:	2100      	movs	r1, #0
 8003f28:	6041      	str	r1, [r0, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8003f2a:	4413      	add	r3, r2
	uxAddress -= xHeapStructSize;
 8003f2c:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003f2e:	f023 0307 	bic.w	r3, r3, #7
	pxEnd = ( void * ) uxAddress;
 8003f32:	480b      	ldr	r0, [pc, #44]	@ (8003f60 <prvHeapInit+0x54>)
 8003f34:	6003      	str	r3, [r0, #0]
	pxEnd->xBlockSize = 0;
 8003f36:	6059      	str	r1, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8003f38:	6019      	str	r1, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8003f3a:	1a99      	subs	r1, r3, r2
 8003f3c:	6051      	str	r1, [r2, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8003f3e:	6013      	str	r3, [r2, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003f40:	4b08      	ldr	r3, [pc, #32]	@ (8003f64 <prvHeapInit+0x58>)
 8003f42:	6019      	str	r1, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003f44:	4b08      	ldr	r3, [pc, #32]	@ (8003f68 <prvHeapInit+0x5c>)
 8003f46:	6019      	str	r1, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8003f48:	4b08      	ldr	r3, [pc, #32]	@ (8003f6c <prvHeapInit+0x60>)
 8003f4a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8003f4e:	601a      	str	r2, [r3, #0]
}
 8003f50:	4770      	bx	lr
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8003f52:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8003f56:	e7e4      	b.n	8003f22 <prvHeapInit+0x16>
 8003f58:	20000674 	.word	0x20000674
 8003f5c:	2000066c 	.word	0x2000066c
 8003f60:	20000668 	.word	0x20000668
 8003f64:	20000660 	.word	0x20000660
 8003f68:	20000664 	.word	0x20000664
 8003f6c:	20000654 	.word	0x20000654

08003f70 <prvInsertBlockIntoFreeList>:
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8003f70:	4b16      	ldr	r3, [pc, #88]	@ (8003fcc <prvInsertBlockIntoFreeList+0x5c>)
 8003f72:	461a      	mov	r2, r3
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	4283      	cmp	r3, r0
 8003f78:	d3fb      	bcc.n	8003f72 <prvInsertBlockIntoFreeList+0x2>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8003f7a:	6851      	ldr	r1, [r2, #4]
 8003f7c:	eb02 0c01 	add.w	ip, r2, r1
 8003f80:	4584      	cmp	ip, r0
 8003f82:	d009      	beq.n	8003f98 <prvInsertBlockIntoFreeList+0x28>
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8003f84:	6841      	ldr	r1, [r0, #4]
 8003f86:	eb00 0c01 	add.w	ip, r0, r1
 8003f8a:	4563      	cmp	r3, ip
 8003f8c:	d009      	beq.n	8003fa2 <prvInsertBlockIntoFreeList+0x32>
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8003f8e:	6003      	str	r3, [r0, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8003f90:	4290      	cmp	r0, r2
 8003f92:	d019      	beq.n	8003fc8 <prvInsertBlockIntoFreeList+0x58>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8003f94:	6010      	str	r0, [r2, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
 8003f96:	4770      	bx	lr
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8003f98:	6840      	ldr	r0, [r0, #4]
 8003f9a:	4401      	add	r1, r0
 8003f9c:	6051      	str	r1, [r2, #4]
		pxBlockToInsert = pxIterator;
 8003f9e:	4610      	mov	r0, r2
 8003fa0:	e7f0      	b.n	8003f84 <prvInsertBlockIntoFreeList+0x14>
{
 8003fa2:	b410      	push	{r4}
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8003fa4:	4c0a      	ldr	r4, [pc, #40]	@ (8003fd0 <prvInsertBlockIntoFreeList+0x60>)
 8003fa6:	6824      	ldr	r4, [r4, #0]
 8003fa8:	42a3      	cmp	r3, r4
 8003faa:	d00b      	beq.n	8003fc4 <prvInsertBlockIntoFreeList+0x54>
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8003fac:	685b      	ldr	r3, [r3, #4]
 8003fae:	4419      	add	r1, r3
 8003fb0:	6041      	str	r1, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8003fb2:	6813      	ldr	r3, [r2, #0]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	6003      	str	r3, [r0, #0]
	if( pxIterator != pxBlockToInsert )
 8003fb8:	4290      	cmp	r0, r2
 8003fba:	d000      	beq.n	8003fbe <prvInsertBlockIntoFreeList+0x4e>
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8003fbc:	6010      	str	r0, [r2, #0]
	}
}
 8003fbe:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003fc2:	4770      	bx	lr
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8003fc4:	6004      	str	r4, [r0, #0]
 8003fc6:	e7f7      	b.n	8003fb8 <prvInsertBlockIntoFreeList+0x48>
 8003fc8:	4770      	bx	lr
 8003fca:	bf00      	nop
 8003fcc:	2000066c 	.word	0x2000066c
 8003fd0:	20000668 	.word	0x20000668

08003fd4 <pvPortMalloc>:
{
 8003fd4:	b538      	push	{r3, r4, r5, lr}
 8003fd6:	4604      	mov	r4, r0
	vTaskSuspendAll();
 8003fd8:	f7ff fc46 	bl	8003868 <vTaskSuspendAll>
		if( pxEnd == NULL )
 8003fdc:	4b38      	ldr	r3, [pc, #224]	@ (80040c0 <pvPortMalloc+0xec>)
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	b1b3      	cbz	r3, 8004010 <pvPortMalloc+0x3c>
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8003fe2:	4b38      	ldr	r3, [pc, #224]	@ (80040c4 <pvPortMalloc+0xf0>)
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	421c      	tst	r4, r3
 8003fe8:	d150      	bne.n	800408c <pvPortMalloc+0xb8>
			if( xWantedSize > 0 )
 8003fea:	2c00      	cmp	r4, #0
 8003fec:	d050      	beq.n	8004090 <pvPortMalloc+0xbc>
				xWantedSize += xHeapStructSize;
 8003fee:	f104 0208 	add.w	r2, r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003ff2:	f014 0f07 	tst.w	r4, #7
 8003ff6:	d002      	beq.n	8003ffe <pvPortMalloc+0x2a>
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8003ff8:	f022 0207 	bic.w	r2, r2, #7
 8003ffc:	3208      	adds	r2, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8003ffe:	2a00      	cmp	r2, #0
 8004000:	d055      	beq.n	80040ae <pvPortMalloc+0xda>
 8004002:	4b31      	ldr	r3, [pc, #196]	@ (80040c8 <pvPortMalloc+0xf4>)
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	4293      	cmp	r3, r2
 8004008:	d353      	bcc.n	80040b2 <pvPortMalloc+0xde>
				pxBlock = xStart.pxNextFreeBlock;
 800400a:	4930      	ldr	r1, [pc, #192]	@ (80040cc <pvPortMalloc+0xf8>)
 800400c:	680c      	ldr	r4, [r1, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800400e:	e004      	b.n	800401a <pvPortMalloc+0x46>
			prvHeapInit();
 8004010:	f7ff ff7c 	bl	8003f0c <prvHeapInit>
 8004014:	e7e5      	b.n	8003fe2 <pvPortMalloc+0xe>
					pxPreviousBlock = pxBlock;
 8004016:	4621      	mov	r1, r4
					pxBlock = pxBlock->pxNextFreeBlock;
 8004018:	461c      	mov	r4, r3
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800401a:	6863      	ldr	r3, [r4, #4]
 800401c:	4293      	cmp	r3, r2
 800401e:	d202      	bcs.n	8004026 <pvPortMalloc+0x52>
 8004020:	6823      	ldr	r3, [r4, #0]
 8004022:	2b00      	cmp	r3, #0
 8004024:	d1f7      	bne.n	8004016 <pvPortMalloc+0x42>
				if( pxBlock != pxEnd )
 8004026:	4b26      	ldr	r3, [pc, #152]	@ (80040c0 <pvPortMalloc+0xec>)
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	42a3      	cmp	r3, r4
 800402c:	d043      	beq.n	80040b6 <pvPortMalloc+0xe2>
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800402e:	680d      	ldr	r5, [r1, #0]
 8004030:	3508      	adds	r5, #8
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004032:	6823      	ldr	r3, [r4, #0]
 8004034:	600b      	str	r3, [r1, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004036:	6863      	ldr	r3, [r4, #4]
 8004038:	1a9b      	subs	r3, r3, r2
 800403a:	2b10      	cmp	r3, #16
 800403c:	d910      	bls.n	8004060 <pvPortMalloc+0x8c>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800403e:	18a0      	adds	r0, r4, r2
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004040:	f010 0f07 	tst.w	r0, #7
 8004044:	d008      	beq.n	8004058 <pvPortMalloc+0x84>
 8004046:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800404a:	f383 8811 	msr	BASEPRI, r3
 800404e:	f3bf 8f6f 	isb	sy
 8004052:	f3bf 8f4f 	dsb	sy
 8004056:	e7fe      	b.n	8004056 <pvPortMalloc+0x82>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004058:	6043      	str	r3, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 800405a:	6062      	str	r2, [r4, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800405c:	f7ff ff88 	bl	8003f70 <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004060:	6862      	ldr	r2, [r4, #4]
 8004062:	4919      	ldr	r1, [pc, #100]	@ (80040c8 <pvPortMalloc+0xf4>)
 8004064:	680b      	ldr	r3, [r1, #0]
 8004066:	1a9b      	subs	r3, r3, r2
 8004068:	600b      	str	r3, [r1, #0]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800406a:	4919      	ldr	r1, [pc, #100]	@ (80040d0 <pvPortMalloc+0xfc>)
 800406c:	6809      	ldr	r1, [r1, #0]
 800406e:	428b      	cmp	r3, r1
 8004070:	d201      	bcs.n	8004076 <pvPortMalloc+0xa2>
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004072:	4917      	ldr	r1, [pc, #92]	@ (80040d0 <pvPortMalloc+0xfc>)
 8004074:	600b      	str	r3, [r1, #0]
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004076:	4b13      	ldr	r3, [pc, #76]	@ (80040c4 <pvPortMalloc+0xf0>)
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	4313      	orrs	r3, r2
 800407c:	6063      	str	r3, [r4, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800407e:	2300      	movs	r3, #0
 8004080:	6023      	str	r3, [r4, #0]
					xNumberOfSuccessfulAllocations++;
 8004082:	4a14      	ldr	r2, [pc, #80]	@ (80040d4 <pvPortMalloc+0x100>)
 8004084:	6813      	ldr	r3, [r2, #0]
 8004086:	3301      	adds	r3, #1
 8004088:	6013      	str	r3, [r2, #0]
 800408a:	e002      	b.n	8004092 <pvPortMalloc+0xbe>
void *pvReturn = NULL;
 800408c:	2500      	movs	r5, #0
 800408e:	e000      	b.n	8004092 <pvPortMalloc+0xbe>
 8004090:	2500      	movs	r5, #0
	( void ) xTaskResumeAll();
 8004092:	f7ff fc8b 	bl	80039ac <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004096:	f015 0f07 	tst.w	r5, #7
 800409a:	d00e      	beq.n	80040ba <pvPortMalloc+0xe6>
 800409c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80040a0:	f383 8811 	msr	BASEPRI, r3
 80040a4:	f3bf 8f6f 	isb	sy
 80040a8:	f3bf 8f4f 	dsb	sy
 80040ac:	e7fe      	b.n	80040ac <pvPortMalloc+0xd8>
void *pvReturn = NULL;
 80040ae:	2500      	movs	r5, #0
 80040b0:	e7ef      	b.n	8004092 <pvPortMalloc+0xbe>
 80040b2:	2500      	movs	r5, #0
 80040b4:	e7ed      	b.n	8004092 <pvPortMalloc+0xbe>
 80040b6:	2500      	movs	r5, #0
 80040b8:	e7eb      	b.n	8004092 <pvPortMalloc+0xbe>
}
 80040ba:	4628      	mov	r0, r5
 80040bc:	bd38      	pop	{r3, r4, r5, pc}
 80040be:	bf00      	nop
 80040c0:	20000668 	.word	0x20000668
 80040c4:	20000654 	.word	0x20000654
 80040c8:	20000664 	.word	0x20000664
 80040cc:	2000066c 	.word	0x2000066c
 80040d0:	20000660 	.word	0x20000660
 80040d4:	2000065c 	.word	0x2000065c

080040d8 <vPortFree>:
	if( pv != NULL )
 80040d8:	2800      	cmp	r0, #0
 80040da:	d034      	beq.n	8004146 <vPortFree+0x6e>
{
 80040dc:	b538      	push	{r3, r4, r5, lr}
 80040de:	4604      	mov	r4, r0
		puc -= xHeapStructSize;
 80040e0:	f1a0 0508 	sub.w	r5, r0, #8
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80040e4:	f850 3c04 	ldr.w	r3, [r0, #-4]
 80040e8:	4a17      	ldr	r2, [pc, #92]	@ (8004148 <vPortFree+0x70>)
 80040ea:	6812      	ldr	r2, [r2, #0]
 80040ec:	4213      	tst	r3, r2
 80040ee:	d108      	bne.n	8004102 <vPortFree+0x2a>
 80040f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80040f4:	f383 8811 	msr	BASEPRI, r3
 80040f8:	f3bf 8f6f 	isb	sy
 80040fc:	f3bf 8f4f 	dsb	sy
 8004100:	e7fe      	b.n	8004100 <vPortFree+0x28>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004102:	f850 1c08 	ldr.w	r1, [r0, #-8]
 8004106:	b141      	cbz	r1, 800411a <vPortFree+0x42>
 8004108:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800410c:	f383 8811 	msr	BASEPRI, r3
 8004110:	f3bf 8f6f 	isb	sy
 8004114:	f3bf 8f4f 	dsb	sy
 8004118:	e7fe      	b.n	8004118 <vPortFree+0x40>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800411a:	ea23 0302 	bic.w	r3, r3, r2
 800411e:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 8004122:	f7ff fba1 	bl	8003868 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004126:	f854 1c04 	ldr.w	r1, [r4, #-4]
 800412a:	4a08      	ldr	r2, [pc, #32]	@ (800414c <vPortFree+0x74>)
 800412c:	6813      	ldr	r3, [r2, #0]
 800412e:	440b      	add	r3, r1
 8004130:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004132:	4628      	mov	r0, r5
 8004134:	f7ff ff1c 	bl	8003f70 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8004138:	4a05      	ldr	r2, [pc, #20]	@ (8004150 <vPortFree+0x78>)
 800413a:	6813      	ldr	r3, [r2, #0]
 800413c:	3301      	adds	r3, #1
 800413e:	6013      	str	r3, [r2, #0]
				( void ) xTaskResumeAll();
 8004140:	f7ff fc34 	bl	80039ac <xTaskResumeAll>
}
 8004144:	bd38      	pop	{r3, r4, r5, pc}
 8004146:	4770      	bx	lr
 8004148:	20000654 	.word	0x20000654
 800414c:	20000664 	.word	0x20000664
 8004150:	20000658 	.word	0x20000658

08004154 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8004154:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8004156:	2200      	movs	r2, #0
 8004158:	490f      	ldr	r1, [pc, #60]	@ (8004198 <MX_USB_DEVICE_Init+0x44>)
 800415a:	4810      	ldr	r0, [pc, #64]	@ (800419c <MX_USB_DEVICE_Init+0x48>)
 800415c:	f000 f92e 	bl	80043bc <USBD_Init>
 8004160:	b970      	cbnz	r0, 8004180 <MX_USB_DEVICE_Init+0x2c>
  {
    Error_Handler();
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CUSTOM_HID) != USBD_OK)
 8004162:	490f      	ldr	r1, [pc, #60]	@ (80041a0 <MX_USB_DEVICE_Init+0x4c>)
 8004164:	480d      	ldr	r0, [pc, #52]	@ (800419c <MX_USB_DEVICE_Init+0x48>)
 8004166:	f000 f94d 	bl	8004404 <USBD_RegisterClass>
 800416a:	b960      	cbnz	r0, 8004186 <MX_USB_DEVICE_Init+0x32>
  {
    Error_Handler();
  }
  if (USBD_CUSTOM_HID_RegisterInterface(&hUsbDeviceFS, &USBD_CustomHID_fops_FS) != USBD_OK)
 800416c:	490d      	ldr	r1, [pc, #52]	@ (80041a4 <MX_USB_DEVICE_Init+0x50>)
 800416e:	480b      	ldr	r0, [pc, #44]	@ (800419c <MX_USB_DEVICE_Init+0x48>)
 8004170:	f000 ffae 	bl	80050d0 <USBD_CUSTOM_HID_RegisterInterface>
 8004174:	b950      	cbnz	r0, 800418c <MX_USB_DEVICE_Init+0x38>
  {
    Error_Handler();
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8004176:	4809      	ldr	r0, [pc, #36]	@ (800419c <MX_USB_DEVICE_Init+0x48>)
 8004178:	f000 f968 	bl	800444c <USBD_Start>
 800417c:	b948      	cbnz	r0, 8004192 <MX_USB_DEVICE_Init+0x3e>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800417e:	bd08      	pop	{r3, pc}
    Error_Handler();
 8004180:	f7fc fa7a 	bl	8000678 <Error_Handler>
 8004184:	e7ed      	b.n	8004162 <MX_USB_DEVICE_Init+0xe>
    Error_Handler();
 8004186:	f7fc fa77 	bl	8000678 <Error_Handler>
 800418a:	e7ef      	b.n	800416c <MX_USB_DEVICE_Init+0x18>
    Error_Handler();
 800418c:	f7fc fa74 	bl	8000678 <Error_Handler>
 8004190:	e7f1      	b.n	8004176 <MX_USB_DEVICE_Init+0x22>
    Error_Handler();
 8004192:	f7fc fa71 	bl	8000678 <Error_Handler>
}
 8004196:	e7f2      	b.n	800417e <MX_USB_DEVICE_Init+0x2a>
 8004198:	2000014c 	.word	0x2000014c
 800419c:	20004274 	.word	0x20004274
 80041a0:	200000e0 	.word	0x200000e0
 80041a4:	20000010 	.word	0x20000010

080041a8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80041a8:	b508      	push	{r3, lr}
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80041aa:	f200 419c 	addw	r1, r0, #1180	@ 0x49c
 80041ae:	f8d0 04e0 	ldr.w	r0, [r0, #1248]	@ 0x4e0
 80041b2:	f000 f960 	bl	8004476 <USBD_LL_SetupStage>
}
 80041b6:	bd08      	pop	{r3, pc}

080041b8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80041b8:	b508      	push	{r3, lr}
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80041ba:	eb01 03c1 	add.w	r3, r1, r1, lsl #3
 80041be:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 80041c2:	f8d3 2260 	ldr.w	r2, [r3, #608]	@ 0x260
 80041c6:	f8d0 04e0 	ldr.w	r0, [r0, #1248]	@ 0x4e0
 80041ca:	f000 f980 	bl	80044ce <USBD_LL_DataOutStage>
}
 80041ce:	bd08      	pop	{r3, pc}

080041d0 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80041d0:	b508      	push	{r3, lr}
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80041d2:	eb01 03c1 	add.w	r3, r1, r1, lsl #3
 80041d6:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 80041da:	6a1a      	ldr	r2, [r3, #32]
 80041dc:	f8d0 04e0 	ldr.w	r0, [r0, #1248]	@ 0x4e0
 80041e0:	f000 f9b1 	bl	8004546 <USBD_LL_DataInStage>
}
 80041e4:	bd08      	pop	{r3, pc}

080041e6 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80041e6:	b508      	push	{r3, lr}
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80041e8:	f8d0 04e0 	ldr.w	r0, [r0, #1248]	@ 0x4e0
 80041ec:	f000 fa51 	bl	8004692 <USBD_LL_SOF>
}
 80041f0:	bd08      	pop	{r3, pc}

080041f2 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80041f2:	b510      	push	{r4, lr}
 80041f4:	4604      	mov	r4, r0
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80041f6:	79c3      	ldrb	r3, [r0, #7]
 80041f8:	2b02      	cmp	r3, #2
 80041fa:	d109      	bne.n	8004210 <HAL_PCD_ResetCallback+0x1e>
  {
    Error_Handler();
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80041fc:	2101      	movs	r1, #1
 80041fe:	f8d4 04e0 	ldr.w	r0, [r4, #1248]	@ 0x4e0
 8004202:	f000 fa2c 	bl	800465e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8004206:	f8d4 04e0 	ldr.w	r0, [r4, #1248]	@ 0x4e0
 800420a:	f000 f9fb 	bl	8004604 <USBD_LL_Reset>
}
 800420e:	bd10      	pop	{r4, pc}
    Error_Handler();
 8004210:	f7fc fa32 	bl	8000678 <Error_Handler>
 8004214:	e7f2      	b.n	80041fc <HAL_PCD_ResetCallback+0xa>
	...

08004218 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8004218:	b510      	push	{r4, lr}
 800421a:	4604      	mov	r4, r0
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800421c:	f8d0 04e0 	ldr.w	r0, [r0, #1248]	@ 0x4e0
 8004220:	f000 fa20 	bl	8004664 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8004224:	6822      	ldr	r2, [r4, #0]
 8004226:	f8d2 3e00 	ldr.w	r3, [r2, #3584]	@ 0xe00
 800422a:	f043 0301 	orr.w	r3, r3, #1
 800422e:	f8c2 3e00 	str.w	r3, [r2, #3584]	@ 0xe00
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8004232:	7ae3      	ldrb	r3, [r4, #11]
 8004234:	b123      	cbz	r3, 8004240 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8004236:	4a03      	ldr	r2, [pc, #12]	@ (8004244 <HAL_PCD_SuspendCallback+0x2c>)
 8004238:	6913      	ldr	r3, [r2, #16]
 800423a:	f043 0306 	orr.w	r3, r3, #6
 800423e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8004240:	bd10      	pop	{r4, pc}
 8004242:	bf00      	nop
 8004244:	e000ed00 	.word	0xe000ed00

08004248 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8004248:	b508      	push	{r3, lr}
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800424a:	f8d0 04e0 	ldr.w	r0, [r0, #1248]	@ 0x4e0
 800424e:	f000 fa13 	bl	8004678 <USBD_LL_Resume>
}
 8004252:	bd08      	pop	{r3, pc}

08004254 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8004254:	b508      	push	{r3, lr}
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8004256:	f8d0 04e0 	ldr.w	r0, [r0, #1248]	@ 0x4e0
 800425a:	f000 fa42 	bl	80046e2 <USBD_LL_IsoOUTIncomplete>
}
 800425e:	bd08      	pop	{r3, pc}

08004260 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8004260:	b508      	push	{r3, lr}
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8004262:	f8d0 04e0 	ldr.w	r0, [r0, #1248]	@ 0x4e0
 8004266:	f000 fa28 	bl	80046ba <USBD_LL_IsoINIncomplete>
}
 800426a:	bd08      	pop	{r3, pc}

0800426c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800426c:	b508      	push	{r3, lr}
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800426e:	f8d0 04e0 	ldr.w	r0, [r0, #1248]	@ 0x4e0
 8004272:	f000 fa4a 	bl	800470a <USBD_LL_DevConnected>
}
 8004276:	bd08      	pop	{r3, pc}

08004278 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8004278:	b508      	push	{r3, lr}
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800427a:	f8d0 04e0 	ldr.w	r0, [r0, #1248]	@ 0x4e0
 800427e:	f000 fa46 	bl	800470e <USBD_LL_DevDisconnected>
}
 8004282:	bd08      	pop	{r3, pc}

08004284 <USBD_LL_Init>:
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8004284:	7802      	ldrb	r2, [r0, #0]
 8004286:	b10a      	cbz	r2, 800428c <USBD_LL_Init+0x8>
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
  }
  return USBD_OK;
}
 8004288:	2000      	movs	r0, #0
 800428a:	4770      	bx	lr
{
 800428c:	b510      	push	{r4, lr}
 800428e:	4603      	mov	r3, r0
  hpcd_USB_OTG_FS.pData = pdev;
 8004290:	4815      	ldr	r0, [pc, #84]	@ (80042e8 <USBD_LL_Init+0x64>)
 8004292:	f8c0 34e0 	str.w	r3, [r0, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 8004296:	f8c3 02c4 	str.w	r0, [r3, #708]	@ 0x2c4
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800429a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800429e:	6003      	str	r3, [r0, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80042a0:	2304      	movs	r3, #4
 80042a2:	7103      	strb	r3, [r0, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80042a4:	2202      	movs	r2, #2
 80042a6:	71c2      	strb	r2, [r0, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80042a8:	2300      	movs	r3, #0
 80042aa:	7183      	strb	r3, [r0, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80042ac:	7242      	strb	r2, [r0, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80042ae:	7283      	strb	r3, [r0, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80042b0:	72c3      	strb	r3, [r0, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80042b2:	7303      	strb	r3, [r0, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80042b4:	7383      	strb	r3, [r0, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80042b6:	73c3      	strb	r3, [r0, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80042b8:	f7fc fe16 	bl	8000ee8 <HAL_PCD_Init>
 80042bc:	b980      	cbnz	r0, 80042e0 <USBD_LL_Init+0x5c>
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 80042be:	4c0a      	ldr	r4, [pc, #40]	@ (80042e8 <USBD_LL_Init+0x64>)
 80042c0:	2180      	movs	r1, #128	@ 0x80
 80042c2:	4620      	mov	r0, r4
 80042c4:	f7fd fbd4 	bl	8001a70 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 80042c8:	2240      	movs	r2, #64	@ 0x40
 80042ca:	2100      	movs	r1, #0
 80042cc:	4620      	mov	r0, r4
 80042ce:	f7fd fba9 	bl	8001a24 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 80042d2:	2280      	movs	r2, #128	@ 0x80
 80042d4:	2101      	movs	r1, #1
 80042d6:	4620      	mov	r0, r4
 80042d8:	f7fd fba4 	bl	8001a24 <HAL_PCDEx_SetTxFiFo>
}
 80042dc:	2000      	movs	r0, #0
 80042de:	bd10      	pop	{r4, pc}
    Error_Handler( );
 80042e0:	f7fc f9ca 	bl	8000678 <Error_Handler>
 80042e4:	e7eb      	b.n	80042be <USBD_LL_Init+0x3a>
 80042e6:	bf00      	nop
 80042e8:	2000459c 	.word	0x2000459c

080042ec <USBD_LL_IsStallEP>:
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80042ec:	f8d0 32c4 	ldr.w	r3, [r0, #708]	@ 0x2c4

  if((ep_addr & 0x80) == 0x80)
 80042f0:	f011 0f80 	tst.w	r1, #128	@ 0x80
 80042f4:	d108      	bne.n	8004308 <USBD_LL_IsStallEP+0x1c>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80042f6:	f001 017f 	and.w	r1, r1, #127	@ 0x7f
 80042fa:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 80042fe:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 8004302:	f893 0256 	ldrb.w	r0, [r3, #598]	@ 0x256
  }
}
 8004306:	4770      	bx	lr
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8004308:	f001 017f 	and.w	r1, r1, #127	@ 0x7f
 800430c:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 8004310:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 8004314:	7d98      	ldrb	r0, [r3, #22]
 8004316:	4770      	bx	lr

08004318 <USBD_static_malloc>:
  */
void *USBD_static_malloc(uint32_t size)
{
  static uint32_t mem[(sizeof(USBD_CUSTOM_HID_HandleTypeDef)/4+1)];/* On 32-bit boundary */
  return mem;
}
 8004318:	4800      	ldr	r0, [pc, #0]	@ (800431c <USBD_static_malloc+0x4>)
 800431a:	4770      	bx	lr
 800431c:	20004544 	.word	0x20004544

08004320 <USBD_static_free>:
  * @retval None
  */
void USBD_static_free(void *p)
{

}
 8004320:	4770      	bx	lr

08004322 <USBD_Get_USB_Status>:
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
  USBD_StatusTypeDef usb_status = USBD_OK;

  switch (hal_status)
 8004322:	2803      	cmp	r0, #3
 8004324:	d805      	bhi.n	8004332 <USBD_Get_USB_Status+0x10>
 8004326:	e8df f000 	tbb	[pc, r0]
 800432a:	0405      	.short	0x0405
 800432c:	0502      	.short	0x0502
    break;
    case HAL_ERROR :
      usb_status = USBD_FAIL;
    break;
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800432e:	2001      	movs	r0, #1
    break;
 8004330:	4770      	bx	lr
      usb_status = USBD_FAIL;
 8004332:	2003      	movs	r0, #3
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;
}
 8004334:	4770      	bx	lr

08004336 <USBD_LL_Start>:
{
 8004336:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_Start(pdev->pData);
 8004338:	f8d0 02c4 	ldr.w	r0, [r0, #708]	@ 0x2c4
 800433c:	f7fc fe55 	bl	8000fea <HAL_PCD_Start>
  usb_status =  USBD_Get_USB_Status(hal_status);
 8004340:	f7ff ffef 	bl	8004322 <USBD_Get_USB_Status>
}
 8004344:	bd08      	pop	{r3, pc}

08004346 <USBD_LL_OpenEP>:
{
 8004346:	b508      	push	{r3, lr}
 8004348:	4694      	mov	ip, r2
 800434a:	461a      	mov	r2, r3
  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800434c:	4663      	mov	r3, ip
 800434e:	f8d0 02c4 	ldr.w	r0, [r0, #708]	@ 0x2c4
 8004352:	f7fc ff2a 	bl	80011aa <HAL_PCD_EP_Open>
  usb_status =  USBD_Get_USB_Status(hal_status);
 8004356:	f7ff ffe4 	bl	8004322 <USBD_Get_USB_Status>
}
 800435a:	bd08      	pop	{r3, pc}

0800435c <USBD_LL_CloseEP>:
{
 800435c:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800435e:	f8d0 02c4 	ldr.w	r0, [r0, #708]	@ 0x2c4
 8004362:	f7fc ff68 	bl	8001236 <HAL_PCD_EP_Close>
  usb_status =  USBD_Get_USB_Status(hal_status);
 8004366:	f7ff ffdc 	bl	8004322 <USBD_Get_USB_Status>
}
 800436a:	bd08      	pop	{r3, pc}

0800436c <USBD_LL_StallEP>:
{
 800436c:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800436e:	f8d0 02c4 	ldr.w	r0, [r0, #708]	@ 0x2c4
 8004372:	f7fc ffe2 	bl	800133a <HAL_PCD_EP_SetStall>
  usb_status =  USBD_Get_USB_Status(hal_status);
 8004376:	f7ff ffd4 	bl	8004322 <USBD_Get_USB_Status>
}
 800437a:	bd08      	pop	{r3, pc}

0800437c <USBD_LL_ClearStallEP>:
{
 800437c:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800437e:	f8d0 02c4 	ldr.w	r0, [r0, #708]	@ 0x2c4
 8004382:	f7fd f81d 	bl	80013c0 <HAL_PCD_EP_ClrStall>
  usb_status =  USBD_Get_USB_Status(hal_status);
 8004386:	f7ff ffcc 	bl	8004322 <USBD_Get_USB_Status>
}
 800438a:	bd08      	pop	{r3, pc}

0800438c <USBD_LL_SetUSBAddress>:
{
 800438c:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800438e:	f8d0 02c4 	ldr.w	r0, [r0, #708]	@ 0x2c4
 8004392:	f7fc fef7 	bl	8001184 <HAL_PCD_SetAddress>
  usb_status =  USBD_Get_USB_Status(hal_status);
 8004396:	f7ff ffc4 	bl	8004322 <USBD_Get_USB_Status>
}
 800439a:	bd08      	pop	{r3, pc}

0800439c <USBD_LL_Transmit>:
{
 800439c:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800439e:	f8d0 02c4 	ldr.w	r0, [r0, #708]	@ 0x2c4
 80043a2:	f7fc ffa5 	bl	80012f0 <HAL_PCD_EP_Transmit>
  usb_status =  USBD_Get_USB_Status(hal_status);
 80043a6:	f7ff ffbc 	bl	8004322 <USBD_Get_USB_Status>
}
 80043aa:	bd08      	pop	{r3, pc}

080043ac <USBD_LL_PrepareReceive>:
{
 80043ac:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80043ae:	f8d0 02c4 	ldr.w	r0, [r0, #708]	@ 0x2c4
 80043b2:	f7fc ff78 	bl	80012a6 <HAL_PCD_EP_Receive>
  usb_status =  USBD_Get_USB_Status(hal_status);
 80043b6:	f7ff ffb4 	bl	8004322 <USBD_Get_USB_Status>
}
 80043ba:	bd08      	pop	{r3, pc}

080043bc <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80043bc:	b508      	push	{r3, lr}
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80043be:	b190      	cbz	r0, 80043e6 <USBD_Init+0x2a>
 80043c0:	4603      	mov	r3, r0
#endif
    return USBD_FAIL;
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 80043c2:	2000      	movs	r0, #0
 80043c4:	f8c3 02b8 	str.w	r0, [r3, #696]	@ 0x2b8
  pdev->pUserData = NULL;
 80043c8:	f8c3 02c0 	str.w	r0, [r3, #704]	@ 0x2c0
  pdev->pConfDesc = NULL;
 80043cc:	f8c3 02cc 	str.w	r0, [r3, #716]	@ 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80043d0:	b109      	cbz	r1, 80043d6 <USBD_Init+0x1a>
  {
    pdev->pDesc = pdesc;
 80043d2:	f8c3 12b4 	str.w	r1, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80043d6:	2101      	movs	r1, #1
 80043d8:	f883 129c 	strb.w	r1, [r3, #668]	@ 0x29c
  pdev->id = id;
 80043dc:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80043de:	4618      	mov	r0, r3
 80043e0:	f7ff ff50 	bl	8004284 <USBD_LL_Init>

  return ret;
}
 80043e4:	bd08      	pop	{r3, pc}
    USBD_ErrLog("Invalid Device handle");
 80043e6:	4805      	ldr	r0, [pc, #20]	@ (80043fc <USBD_Init+0x40>)
 80043e8:	f001 f818 	bl	800541c <iprintf>
 80043ec:	4804      	ldr	r0, [pc, #16]	@ (8004400 <USBD_Init+0x44>)
 80043ee:	f001 f815 	bl	800541c <iprintf>
 80043f2:	200a      	movs	r0, #10
 80043f4:	f001 f824 	bl	8005440 <putchar>
    return USBD_FAIL;
 80043f8:	2003      	movs	r0, #3
 80043fa:	e7f3      	b.n	80043e4 <USBD_Init+0x28>
 80043fc:	08006680 	.word	0x08006680
 8004400:	08006688 	.word	0x08006688

08004404 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8004404:	b510      	push	{r4, lr}
 8004406:	b082      	sub	sp, #8
  uint16_t len = 0U;
 8004408:	2300      	movs	r3, #0
 800440a:	f8ad 3006 	strh.w	r3, [sp, #6]

  if (pclass == NULL)
 800440e:	b161      	cbz	r1, 800442a <USBD_RegisterClass+0x26>
 8004410:	4604      	mov	r4, r0
#endif
    return USBD_FAIL;
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8004412:	f8c0 12b8 	str.w	r1, [r0, #696]	@ 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8004416:	6acb      	ldr	r3, [r1, #44]	@ 0x2c
 8004418:	b193      	cbz	r3, 8004440 <USBD_RegisterClass+0x3c>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 800441a:	f10d 0006 	add.w	r0, sp, #6
 800441e:	4798      	blx	r3
 8004420:	f8c4 02cc 	str.w	r0, [r4, #716]	@ 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8004424:	2000      	movs	r0, #0
}
 8004426:	b002      	add	sp, #8
 8004428:	bd10      	pop	{r4, pc}
    USBD_ErrLog("Invalid Class handle");
 800442a:	4806      	ldr	r0, [pc, #24]	@ (8004444 <USBD_RegisterClass+0x40>)
 800442c:	f000 fff6 	bl	800541c <iprintf>
 8004430:	4805      	ldr	r0, [pc, #20]	@ (8004448 <USBD_RegisterClass+0x44>)
 8004432:	f000 fff3 	bl	800541c <iprintf>
 8004436:	200a      	movs	r0, #10
 8004438:	f001 f802 	bl	8005440 <putchar>
    return USBD_FAIL;
 800443c:	2003      	movs	r0, #3
 800443e:	e7f2      	b.n	8004426 <USBD_RegisterClass+0x22>
  return USBD_OK;
 8004440:	2000      	movs	r0, #0
 8004442:	e7f0      	b.n	8004426 <USBD_RegisterClass+0x22>
 8004444:	08006680 	.word	0x08006680
 8004448:	080066a0 	.word	0x080066a0

0800444c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800444c:	b508      	push	{r3, lr}
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800444e:	f7ff ff72 	bl	8004336 <USBD_LL_Start>
}
 8004452:	bd08      	pop	{r3, pc}

08004454 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004454:	b508      	push	{r3, lr}
  USBD_StatusTypeDef ret = USBD_FAIL;

  if (pdev->pClass != NULL)
 8004456:	f8d0 32b8 	ldr.w	r3, [r0, #696]	@ 0x2b8
 800445a:	b113      	cbz	r3, 8004462 <USBD_SetClassConfig+0xe>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	4798      	blx	r3
  }

  return ret;
}
 8004460:	bd08      	pop	{r3, pc}
  USBD_StatusTypeDef ret = USBD_FAIL;
 8004462:	2003      	movs	r0, #3
 8004464:	e7fc      	b.n	8004460 <USBD_SetClassConfig+0xc>

08004466 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004466:	b508      	push	{r3, lr}
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8004468:	f8d0 32b8 	ldr.w	r3, [r0, #696]	@ 0x2b8
 800446c:	b10b      	cbz	r3, 8004472 <USBD_ClrClassConfig+0xc>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800446e:	685b      	ldr	r3, [r3, #4]
 8004470:	4798      	blx	r3
  }

  return USBD_OK;
}
 8004472:	2000      	movs	r0, #0
 8004474:	bd08      	pop	{r3, pc}

08004476 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8004476:	b538      	push	{r3, r4, r5, lr}
 8004478:	4604      	mov	r4, r0
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800447a:	f200 25aa 	addw	r5, r0, #682	@ 0x2aa
 800447e:	4628      	mov	r0, r5
 8004480:	f000 f965 	bl	800474e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8004484:	2301      	movs	r3, #1
 8004486:	f8c4 3294 	str.w	r3, [r4, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800448a:	f8b4 32b0 	ldrh.w	r3, [r4, #688]	@ 0x2b0
 800448e:	f8c4 3298 	str.w	r3, [r4, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8004492:	f894 12aa 	ldrb.w	r1, [r4, #682]	@ 0x2aa
 8004496:	f001 031f 	and.w	r3, r1, #31
 800449a:	2b01      	cmp	r3, #1
 800449c:	d00d      	beq.n	80044ba <USBD_LL_SetupStage+0x44>
 800449e:	2b02      	cmp	r3, #2
 80044a0:	d010      	beq.n	80044c4 <USBD_LL_SetupStage+0x4e>
 80044a2:	b12b      	cbz	r3, 80044b0 <USBD_LL_SetupStage+0x3a>
    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
      break;

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80044a4:	f001 0180 	and.w	r1, r1, #128	@ 0x80
 80044a8:	4620      	mov	r0, r4
 80044aa:	f7ff ff5f 	bl	800436c <USBD_LL_StallEP>
      break;
 80044ae:	e003      	b.n	80044b8 <USBD_LL_SetupStage+0x42>
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80044b0:	4629      	mov	r1, r5
 80044b2:	4620      	mov	r0, r4
 80044b4:	f000 fb09 	bl	8004aca <USBD_StdDevReq>
  }

  return ret;
}
 80044b8:	bd38      	pop	{r3, r4, r5, pc}
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80044ba:	4629      	mov	r1, r5
 80044bc:	4620      	mov	r0, r4
 80044be:	f000 fb3c 	bl	8004b3a <USBD_StdItfReq>
      break;
 80044c2:	e7f9      	b.n	80044b8 <USBD_LL_SetupStage+0x42>
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80044c4:	4629      	mov	r1, r5
 80044c6:	4620      	mov	r0, r4
 80044c8:	f000 fb6b 	bl	8004ba2 <USBD_StdEPReq>
      break;
 80044cc:	e7f4      	b.n	80044b8 <USBD_LL_SetupStage+0x42>

080044ce <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80044ce:	b538      	push	{r3, r4, r5, lr}
 80044d0:	4604      	mov	r4, r0
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80044d2:	460d      	mov	r5, r1
 80044d4:	bb41      	cbnz	r1, 8004528 <USBD_LL_DataOutStage+0x5a>
 80044d6:	4613      	mov	r3, r2
  {
    pep = &pdev->ep_out[0];

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80044d8:	f8d0 2294 	ldr.w	r2, [r0, #660]	@ 0x294
 80044dc:	2a03      	cmp	r2, #3
 80044de:	d001      	beq.n	80044e4 <USBD_LL_DataOutStage+0x16>
        }
      }
    }
  }

  return USBD_OK;
 80044e0:	4608      	mov	r0, r1
}
 80044e2:	bd38      	pop	{r3, r4, r5, pc}
      if (pep->rem_length > pep->maxpacket)
 80044e4:	f8d0 115c 	ldr.w	r1, [r0, #348]	@ 0x15c
 80044e8:	f8d0 2160 	ldr.w	r2, [r0, #352]	@ 0x160
 80044ec:	4291      	cmp	r1, r2
 80044ee:	d809      	bhi.n	8004504 <USBD_LL_DataOutStage+0x36>
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80044f0:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 80044f4:	b2db      	uxtb	r3, r3
 80044f6:	2b03      	cmp	r3, #3
 80044f8:	d00f      	beq.n	800451a <USBD_LL_DataOutStage+0x4c>
        (void)USBD_CtlSendStatus(pdev);
 80044fa:	4620      	mov	r0, r4
 80044fc:	f000 feb6 	bl	800526c <USBD_CtlSendStatus>
  return USBD_OK;
 8004500:	4628      	mov	r0, r5
 8004502:	e7ee      	b.n	80044e2 <USBD_LL_DataOutStage+0x14>
        pep->rem_length -= pep->maxpacket;
 8004504:	1a89      	subs	r1, r1, r2
 8004506:	f8c0 115c 	str.w	r1, [r0, #348]	@ 0x15c
        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800450a:	428a      	cmp	r2, r1
 800450c:	bf28      	it	cs
 800450e:	460a      	movcs	r2, r1
 8004510:	4619      	mov	r1, r3
 8004512:	f000 fea3 	bl	800525c <USBD_CtlContinueRx>
  return USBD_OK;
 8004516:	4628      	mov	r0, r5
 8004518:	e7e3      	b.n	80044e2 <USBD_LL_DataOutStage+0x14>
          if (pdev->pClass->EP0_RxReady != NULL)
 800451a:	f8d0 32b8 	ldr.w	r3, [r0, #696]	@ 0x2b8
 800451e:	691b      	ldr	r3, [r3, #16]
 8004520:	2b00      	cmp	r3, #0
 8004522:	d0ea      	beq.n	80044fa <USBD_LL_DataOutStage+0x2c>
            pdev->pClass->EP0_RxReady(pdev);
 8004524:	4798      	blx	r3
 8004526:	e7e8      	b.n	80044fa <USBD_LL_DataOutStage+0x2c>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004528:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 800452c:	b2db      	uxtb	r3, r3
 800452e:	2b03      	cmp	r3, #3
 8004530:	d001      	beq.n	8004536 <USBD_LL_DataOutStage+0x68>
  return USBD_OK;
 8004532:	2000      	movs	r0, #0
 8004534:	e7d5      	b.n	80044e2 <USBD_LL_DataOutStage+0x14>
      if (pdev->pClass->DataOut != NULL)
 8004536:	f8d0 32b8 	ldr.w	r3, [r0, #696]	@ 0x2b8
 800453a:	699b      	ldr	r3, [r3, #24]
 800453c:	b10b      	cbz	r3, 8004542 <USBD_LL_DataOutStage+0x74>
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800453e:	4798      	blx	r3
        if (ret != USBD_OK)
 8004540:	e7cf      	b.n	80044e2 <USBD_LL_DataOutStage+0x14>
  return USBD_OK;
 8004542:	2000      	movs	r0, #0
 8004544:	e7cd      	b.n	80044e2 <USBD_LL_DataOutStage+0x14>

08004546 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8004546:	b538      	push	{r3, r4, r5, lr}
 8004548:	4604      	mov	r4, r0
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800454a:	460d      	mov	r5, r1
 800454c:	2900      	cmp	r1, #0
 800454e:	d14a      	bne.n	80045e6 <USBD_LL_DataInStage+0xa0>
 8004550:	4613      	mov	r3, r2
  {
    pep = &pdev->ep_in[0];

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8004552:	f8d0 2294 	ldr.w	r2, [r0, #660]	@ 0x294
 8004556:	2a02      	cmp	r2, #2
 8004558:	d005      	beq.n	8004566 <USBD_LL_DataInStage+0x20>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800455a:	f894 32a0 	ldrb.w	r3, [r4, #672]	@ 0x2a0
 800455e:	2b01      	cmp	r3, #1
 8004560:	d03c      	beq.n	80045dc <USBD_LL_DataInStage+0x96>
        }
      }
    }
  }

  return USBD_OK;
 8004562:	4628      	mov	r0, r5
}
 8004564:	bd38      	pop	{r3, r4, r5, pc}
      if (pep->rem_length > pep->maxpacket)
 8004566:	69c2      	ldr	r2, [r0, #28]
 8004568:	6a01      	ldr	r1, [r0, #32]
 800456a:	428a      	cmp	r2, r1
 800456c:	d80e      	bhi.n	800458c <USBD_LL_DataInStage+0x46>
        if ((pep->maxpacket == pep->rem_length) &&
 800456e:	428a      	cmp	r2, r1
 8004570:	d018      	beq.n	80045a4 <USBD_LL_DataInStage+0x5e>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004572:	f894 329c 	ldrb.w	r3, [r4, #668]	@ 0x29c
 8004576:	b2db      	uxtb	r3, r3
 8004578:	2b03      	cmp	r3, #3
 800457a:	d027      	beq.n	80045cc <USBD_LL_DataInStage+0x86>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800457c:	2180      	movs	r1, #128	@ 0x80
 800457e:	4620      	mov	r0, r4
 8004580:	f7ff fef4 	bl	800436c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8004584:	4620      	mov	r0, r4
 8004586:	f000 fe7c 	bl	8005282 <USBD_CtlReceiveStatus>
 800458a:	e7e6      	b.n	800455a <USBD_LL_DataInStage+0x14>
        pep->rem_length -= pep->maxpacket;
 800458c:	1a52      	subs	r2, r2, r1
 800458e:	61c2      	str	r2, [r0, #28]
        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8004590:	4619      	mov	r1, r3
 8004592:	f000 fe4c 	bl	800522e <USBD_CtlContinueSendData>
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8004596:	2300      	movs	r3, #0
 8004598:	461a      	mov	r2, r3
 800459a:	4619      	mov	r1, r3
 800459c:	4620      	mov	r0, r4
 800459e:	f7ff ff05 	bl	80043ac <USBD_LL_PrepareReceive>
 80045a2:	e7da      	b.n	800455a <USBD_LL_DataInStage+0x14>
            (pep->total_length >= pep->maxpacket) &&
 80045a4:	6983      	ldr	r3, [r0, #24]
        if ((pep->maxpacket == pep->rem_length) &&
 80045a6:	4299      	cmp	r1, r3
 80045a8:	d8e3      	bhi.n	8004572 <USBD_LL_DataInStage+0x2c>
            (pep->total_length < pdev->ep0_data_len))
 80045aa:	f8d0 2298 	ldr.w	r2, [r0, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 80045ae:	4293      	cmp	r3, r2
 80045b0:	d2df      	bcs.n	8004572 <USBD_LL_DataInStage+0x2c>
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80045b2:	2200      	movs	r2, #0
 80045b4:	4611      	mov	r1, r2
 80045b6:	f000 fe3a 	bl	800522e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80045ba:	2100      	movs	r1, #0
 80045bc:	f8c4 1298 	str.w	r1, [r4, #664]	@ 0x298
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80045c0:	460b      	mov	r3, r1
 80045c2:	460a      	mov	r2, r1
 80045c4:	4620      	mov	r0, r4
 80045c6:	f7ff fef1 	bl	80043ac <USBD_LL_PrepareReceive>
 80045ca:	e7c6      	b.n	800455a <USBD_LL_DataInStage+0x14>
            if (pdev->pClass->EP0_TxSent != NULL)
 80045cc:	f8d4 32b8 	ldr.w	r3, [r4, #696]	@ 0x2b8
 80045d0:	68db      	ldr	r3, [r3, #12]
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d0d2      	beq.n	800457c <USBD_LL_DataInStage+0x36>
              pdev->pClass->EP0_TxSent(pdev);
 80045d6:	4620      	mov	r0, r4
 80045d8:	4798      	blx	r3
 80045da:	e7cf      	b.n	800457c <USBD_LL_DataInStage+0x36>
      pdev->dev_test_mode = 0U;
 80045dc:	2300      	movs	r3, #0
 80045de:	f884 32a0 	strb.w	r3, [r4, #672]	@ 0x2a0
  return USBD_OK;
 80045e2:	4628      	mov	r0, r5
 80045e4:	e7be      	b.n	8004564 <USBD_LL_DataInStage+0x1e>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80045e6:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 80045ea:	b2db      	uxtb	r3, r3
 80045ec:	2b03      	cmp	r3, #3
 80045ee:	d001      	beq.n	80045f4 <USBD_LL_DataInStage+0xae>
  return USBD_OK;
 80045f0:	2000      	movs	r0, #0
 80045f2:	e7b7      	b.n	8004564 <USBD_LL_DataInStage+0x1e>
      if (pdev->pClass->DataIn != NULL)
 80045f4:	f8d0 32b8 	ldr.w	r3, [r0, #696]	@ 0x2b8
 80045f8:	695b      	ldr	r3, [r3, #20]
 80045fa:	b10b      	cbz	r3, 8004600 <USBD_LL_DataInStage+0xba>
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 80045fc:	4798      	blx	r3
        if (ret != USBD_OK)
 80045fe:	e7b1      	b.n	8004564 <USBD_LL_DataInStage+0x1e>
  return USBD_OK;
 8004600:	2000      	movs	r0, #0
 8004602:	e7af      	b.n	8004564 <USBD_LL_DataInStage+0x1e>

08004604 <USBD_LL_Reset>:
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8004604:	2301      	movs	r3, #1
 8004606:	f880 329c 	strb.w	r3, [r0, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800460a:	2300      	movs	r3, #0
 800460c:	f8c0 3294 	str.w	r3, [r0, #660]	@ 0x294
  pdev->dev_config = 0U;
 8004610:	6043      	str	r3, [r0, #4]
  pdev->dev_remote_wakeup = 0U;
 8004612:	f8c0 32a4 	str.w	r3, [r0, #676]	@ 0x2a4

  if (pdev->pClass == NULL)
 8004616:	f8d0 32b8 	ldr.w	r3, [r0, #696]	@ 0x2b8
 800461a:	b1f3      	cbz	r3, 800465a <USBD_LL_Reset+0x56>
{
 800461c:	b570      	push	{r4, r5, r6, lr}
 800461e:	4604      	mov	r4, r0
  {
    return USBD_FAIL;
  }

  if (pdev->pClassData != NULL)
 8004620:	f8d0 22bc 	ldr.w	r2, [r0, #700]	@ 0x2bc
 8004624:	b11a      	cbz	r2, 800462e <USBD_LL_Reset+0x2a>
  {
    if (pdev->pClass->DeInit != NULL)
 8004626:	685b      	ldr	r3, [r3, #4]
 8004628:	b10b      	cbz	r3, 800462e <USBD_LL_Reset+0x2a>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800462a:	2100      	movs	r1, #0
 800462c:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800462e:	2340      	movs	r3, #64	@ 0x40
 8004630:	2200      	movs	r2, #0
 8004632:	4611      	mov	r1, r2
 8004634:	4620      	mov	r0, r4
 8004636:	f7ff fe86 	bl	8004346 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800463a:	2601      	movs	r6, #1
 800463c:	f8a4 6164 	strh.w	r6, [r4, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8004640:	2540      	movs	r5, #64	@ 0x40
 8004642:	f8c4 5160 	str.w	r5, [r4, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8004646:	462b      	mov	r3, r5
 8004648:	2200      	movs	r2, #0
 800464a:	2180      	movs	r1, #128	@ 0x80
 800464c:	4620      	mov	r0, r4
 800464e:	f7ff fe7a 	bl	8004346 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8004652:	84a6      	strh	r6, [r4, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8004654:	6225      	str	r5, [r4, #32]

  return USBD_OK;
 8004656:	2000      	movs	r0, #0
}
 8004658:	bd70      	pop	{r4, r5, r6, pc}
    return USBD_FAIL;
 800465a:	2003      	movs	r0, #3
}
 800465c:	4770      	bx	lr

0800465e <USBD_LL_SetSpeed>:
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
  pdev->dev_speed = speed;
 800465e:	7401      	strb	r1, [r0, #16]

  return USBD_OK;
}
 8004660:	2000      	movs	r0, #0
 8004662:	4770      	bx	lr

08004664 <USBD_LL_Suspend>:
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
  pdev->dev_old_state = pdev->dev_state;
 8004664:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 8004668:	b2db      	uxtb	r3, r3
 800466a:	f880 329d 	strb.w	r3, [r0, #669]	@ 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800466e:	2304      	movs	r3, #4
 8004670:	f880 329c 	strb.w	r3, [r0, #668]	@ 0x29c

  return USBD_OK;
}
 8004674:	2000      	movs	r0, #0
 8004676:	4770      	bx	lr

08004678 <USBD_LL_Resume>:
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8004678:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 800467c:	b2db      	uxtb	r3, r3
 800467e:	2b04      	cmp	r3, #4
 8004680:	d001      	beq.n	8004686 <USBD_LL_Resume+0xe>
  {
    pdev->dev_state = pdev->dev_old_state;
  }

  return USBD_OK;
}
 8004682:	2000      	movs	r0, #0
 8004684:	4770      	bx	lr
    pdev->dev_state = pdev->dev_old_state;
 8004686:	f890 329d 	ldrb.w	r3, [r0, #669]	@ 0x29d
 800468a:	b2db      	uxtb	r3, r3
 800468c:	f880 329c 	strb.w	r3, [r0, #668]	@ 0x29c
 8004690:	e7f7      	b.n	8004682 <USBD_LL_Resume+0xa>

08004692 <USBD_LL_SOF>:
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
  if (pdev->pClass == NULL)
 8004692:	f8d0 22b8 	ldr.w	r2, [r0, #696]	@ 0x2b8
 8004696:	b162      	cbz	r2, 80046b2 <USBD_LL_SOF+0x20>
{
 8004698:	b508      	push	{r3, lr}
  {
    return USBD_FAIL;
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800469a:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 800469e:	b2db      	uxtb	r3, r3
 80046a0:	2b03      	cmp	r3, #3
 80046a2:	d001      	beq.n	80046a8 <USBD_LL_SOF+0x16>
    {
      (void)pdev->pClass->SOF(pdev);
    }
  }

  return USBD_OK;
 80046a4:	2000      	movs	r0, #0
}
 80046a6:	bd08      	pop	{r3, pc}
    if (pdev->pClass->SOF != NULL)
 80046a8:	69d3      	ldr	r3, [r2, #28]
 80046aa:	b123      	cbz	r3, 80046b6 <USBD_LL_SOF+0x24>
      (void)pdev->pClass->SOF(pdev);
 80046ac:	4798      	blx	r3
  return USBD_OK;
 80046ae:	2000      	movs	r0, #0
 80046b0:	e7f9      	b.n	80046a6 <USBD_LL_SOF+0x14>
    return USBD_FAIL;
 80046b2:	2003      	movs	r0, #3
}
 80046b4:	4770      	bx	lr
  return USBD_OK;
 80046b6:	2000      	movs	r0, #0
 80046b8:	e7f5      	b.n	80046a6 <USBD_LL_SOF+0x14>

080046ba <USBD_LL_IsoINIncomplete>:
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
  if (pdev->pClass == NULL)
 80046ba:	f8d0 22b8 	ldr.w	r2, [r0, #696]	@ 0x2b8
 80046be:	b162      	cbz	r2, 80046da <USBD_LL_IsoINIncomplete+0x20>
{
 80046c0:	b508      	push	{r3, lr}
  {
    return USBD_FAIL;
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80046c2:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 80046c6:	b2db      	uxtb	r3, r3
 80046c8:	2b03      	cmp	r3, #3
 80046ca:	d001      	beq.n	80046d0 <USBD_LL_IsoINIncomplete+0x16>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
    }
  }

  return USBD_OK;
 80046cc:	2000      	movs	r0, #0
}
 80046ce:	bd08      	pop	{r3, pc}
    if (pdev->pClass->IsoINIncomplete != NULL)
 80046d0:	6a13      	ldr	r3, [r2, #32]
 80046d2:	b123      	cbz	r3, 80046de <USBD_LL_IsoINIncomplete+0x24>
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 80046d4:	4798      	blx	r3
  return USBD_OK;
 80046d6:	2000      	movs	r0, #0
 80046d8:	e7f9      	b.n	80046ce <USBD_LL_IsoINIncomplete+0x14>
    return USBD_FAIL;
 80046da:	2003      	movs	r0, #3
}
 80046dc:	4770      	bx	lr
  return USBD_OK;
 80046de:	2000      	movs	r0, #0
 80046e0:	e7f5      	b.n	80046ce <USBD_LL_IsoINIncomplete+0x14>

080046e2 <USBD_LL_IsoOUTIncomplete>:
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
  if (pdev->pClass == NULL)
 80046e2:	f8d0 22b8 	ldr.w	r2, [r0, #696]	@ 0x2b8
 80046e6:	b162      	cbz	r2, 8004702 <USBD_LL_IsoOUTIncomplete+0x20>
{
 80046e8:	b508      	push	{r3, lr}
  {
    return USBD_FAIL;
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80046ea:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 80046ee:	b2db      	uxtb	r3, r3
 80046f0:	2b03      	cmp	r3, #3
 80046f2:	d001      	beq.n	80046f8 <USBD_LL_IsoOUTIncomplete+0x16>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
    }
  }

  return USBD_OK;
 80046f4:	2000      	movs	r0, #0
}
 80046f6:	bd08      	pop	{r3, pc}
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 80046f8:	6a53      	ldr	r3, [r2, #36]	@ 0x24
 80046fa:	b123      	cbz	r3, 8004706 <USBD_LL_IsoOUTIncomplete+0x24>
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 80046fc:	4798      	blx	r3
  return USBD_OK;
 80046fe:	2000      	movs	r0, #0
 8004700:	e7f9      	b.n	80046f6 <USBD_LL_IsoOUTIncomplete+0x14>
    return USBD_FAIL;
 8004702:	2003      	movs	r0, #3
}
 8004704:	4770      	bx	lr
  return USBD_OK;
 8004706:	2000      	movs	r0, #0
 8004708:	e7f5      	b.n	80046f6 <USBD_LL_IsoOUTIncomplete+0x14>

0800470a <USBD_LL_DevConnected>:
{
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
}
 800470a:	2000      	movs	r0, #0
 800470c:	4770      	bx	lr

0800470e <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800470e:	b508      	push	{r3, lr}
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8004710:	2301      	movs	r3, #1
 8004712:	f880 329c 	strb.w	r3, [r0, #668]	@ 0x29c

  if (pdev->pClass != NULL)
 8004716:	f8d0 32b8 	ldr.w	r3, [r0, #696]	@ 0x2b8
 800471a:	b113      	cbz	r3, 8004722 <USBD_LL_DevDisconnected+0x14>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800471c:	685b      	ldr	r3, [r3, #4]
 800471e:	7901      	ldrb	r1, [r0, #4]
 8004720:	4798      	blx	r3
  }

  return USBD_OK;
}
 8004722:	2000      	movs	r0, #0
 8004724:	bd08      	pop	{r3, pc}

08004726 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8004726:	4603      	mov	r3, r0
  uint8_t  len = 0U;
 8004728:	2000      	movs	r0, #0
  uint8_t *pbuff = buf;

  while (*pbuff != (uint8_t)'\0')
 800472a:	e002      	b.n	8004732 <USBD_GetLen+0xc>
  {
    len++;
 800472c:	3001      	adds	r0, #1
 800472e:	b2c0      	uxtb	r0, r0
    pbuff++;
 8004730:	3301      	adds	r3, #1
  while (*pbuff != (uint8_t)'\0')
 8004732:	781a      	ldrb	r2, [r3, #0]
 8004734:	2a00      	cmp	r2, #0
 8004736:	d1f9      	bne.n	800472c <USBD_GetLen+0x6>
  }

  return len;
}
 8004738:	4770      	bx	lr

0800473a <USBD_SetFeature>:
{
 800473a:	b508      	push	{r3, lr}
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800473c:	884b      	ldrh	r3, [r1, #2]
 800473e:	2b01      	cmp	r3, #1
 8004740:	d000      	beq.n	8004744 <USBD_SetFeature+0xa>
}
 8004742:	bd08      	pop	{r3, pc}
    pdev->dev_remote_wakeup = 1U;
 8004744:	f8c0 32a4 	str.w	r3, [r0, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8004748:	f000 fd90 	bl	800526c <USBD_CtlSendStatus>
}
 800474c:	e7f9      	b.n	8004742 <USBD_SetFeature+0x8>

0800474e <USBD_ParseSetupRequest>:
  req->bmRequest = *(uint8_t *)(pbuff);
 800474e:	780b      	ldrb	r3, [r1, #0]
 8004750:	7003      	strb	r3, [r0, #0]
  req->bRequest = *(uint8_t *)(pbuff);
 8004752:	784b      	ldrb	r3, [r1, #1]
 8004754:	7043      	strb	r3, [r0, #1]
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;

  _Byte1 = *(uint8_t *)_pbuff;
 8004756:	788b      	ldrb	r3, [r1, #2]
  _pbuff++;
  _Byte2 = *(uint8_t *)_pbuff;
 8004758:	78ca      	ldrb	r2, [r1, #3]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800475a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  req->wValue = SWAPBYTE(pbuff);
 800475e:	8043      	strh	r3, [r0, #2]
  _Byte1 = *(uint8_t *)_pbuff;
 8004760:	790b      	ldrb	r3, [r1, #4]
  _Byte2 = *(uint8_t *)_pbuff;
 8004762:	794a      	ldrb	r2, [r1, #5]
  _SwapVal = (_Byte2 << 8) | _Byte1;
 8004764:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  req->wIndex = SWAPBYTE(pbuff);
 8004768:	8083      	strh	r3, [r0, #4]
  _Byte1 = *(uint8_t *)_pbuff;
 800476a:	798b      	ldrb	r3, [r1, #6]
  _Byte2 = *(uint8_t *)_pbuff;
 800476c:	79ca      	ldrb	r2, [r1, #7]
  _SwapVal = (_Byte2 << 8) | _Byte1;
 800476e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  req->wLength = SWAPBYTE(pbuff);
 8004772:	80c3      	strh	r3, [r0, #6]
}
 8004774:	4770      	bx	lr

08004776 <USBD_CtlError>:
{
 8004776:	b510      	push	{r4, lr}
 8004778:	4604      	mov	r4, r0
  (void)USBD_LL_StallEP(pdev, 0x80U);
 800477a:	2180      	movs	r1, #128	@ 0x80
 800477c:	f7ff fdf6 	bl	800436c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8004780:	2100      	movs	r1, #0
 8004782:	4620      	mov	r0, r4
 8004784:	f7ff fdf2 	bl	800436c <USBD_LL_StallEP>
}
 8004788:	bd10      	pop	{r4, pc}

0800478a <USBD_GetDescriptor>:
{
 800478a:	b530      	push	{r4, r5, lr}
 800478c:	b083      	sub	sp, #12
 800478e:	4604      	mov	r4, r0
 8004790:	460d      	mov	r5, r1
  uint16_t len = 0U;
 8004792:	2300      	movs	r3, #0
 8004794:	f8ad 3006 	strh.w	r3, [sp, #6]
  switch (req->wValue >> 8)
 8004798:	884a      	ldrh	r2, [r1, #2]
 800479a:	0a13      	lsrs	r3, r2, #8
 800479c:	3b01      	subs	r3, #1
 800479e:	2b06      	cmp	r3, #6
 80047a0:	f200 80ab 	bhi.w	80048fa <USBD_GetDescriptor+0x170>
 80047a4:	e8df f003 	tbb	[pc, r3]
 80047a8:	a9331f04 	.word	0xa9331f04
 80047ac:	8da9      	.short	0x8da9
 80047ae:	9a          	.byte	0x9a
 80047af:	00          	.byte	0x00
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80047b0:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	f10d 0106 	add.w	r1, sp, #6
 80047ba:	7c00      	ldrb	r0, [r0, #16]
 80047bc:	4798      	blx	r3
  if (req->wLength != 0U)
 80047be:	88ea      	ldrh	r2, [r5, #6]
 80047c0:	2a00      	cmp	r2, #0
 80047c2:	f000 80a3 	beq.w	800490c <USBD_GetDescriptor+0x182>
    if (len != 0U)
 80047c6:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	f000 8099 	beq.w	8004902 <USBD_GetDescriptor+0x178>
      len = MIN(len, req->wLength);
 80047d0:	429a      	cmp	r2, r3
 80047d2:	bf28      	it	cs
 80047d4:	461a      	movcs	r2, r3
 80047d6:	f8ad 2006 	strh.w	r2, [sp, #6]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80047da:	4601      	mov	r1, r0
 80047dc:	4620      	mov	r0, r4
 80047de:	f000 fd19 	bl	8005214 <USBD_CtlSendData>
}
 80047e2:	b003      	add	sp, #12
 80047e4:	bd30      	pop	{r4, r5, pc}
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80047e6:	7c03      	ldrb	r3, [r0, #16]
 80047e8:	b943      	cbnz	r3, 80047fc <USBD_GetDescriptor+0x72>
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80047ea:	f8d0 32b8 	ldr.w	r3, [r0, #696]	@ 0x2b8
 80047ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047f0:	f10d 0006 	add.w	r0, sp, #6
 80047f4:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80047f6:	2302      	movs	r3, #2
 80047f8:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 80047fa:	e7e0      	b.n	80047be <USBD_GetDescriptor+0x34>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80047fc:	f8d0 32b8 	ldr.w	r3, [r0, #696]	@ 0x2b8
 8004800:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004802:	f10d 0006 	add.w	r0, sp, #6
 8004806:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8004808:	2302      	movs	r3, #2
 800480a:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 800480c:	e7d7      	b.n	80047be <USBD_GetDescriptor+0x34>
      switch ((uint8_t)(req->wValue))
 800480e:	b2d2      	uxtb	r2, r2
 8004810:	2a05      	cmp	r2, #5
 8004812:	d852      	bhi.n	80048ba <USBD_GetDescriptor+0x130>
 8004814:	e8df f002 	tbb	[pc, r2]
 8004818:	2a1d1003 	.word	0x2a1d1003
 800481c:	4437      	.short	0x4437
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800481e:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 8004822:	685b      	ldr	r3, [r3, #4]
 8004824:	b123      	cbz	r3, 8004830 <USBD_GetDescriptor+0xa6>
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8004826:	f10d 0106 	add.w	r1, sp, #6
 800482a:	7c00      	ldrb	r0, [r0, #16]
 800482c:	4798      	blx	r3
  if (err != 0U)
 800482e:	e7c6      	b.n	80047be <USBD_GetDescriptor+0x34>
            USBD_CtlError(pdev, req);
 8004830:	4629      	mov	r1, r5
 8004832:	f7ff ffa0 	bl	8004776 <USBD_CtlError>
  if (err != 0U)
 8004836:	e7d4      	b.n	80047e2 <USBD_GetDescriptor+0x58>
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8004838:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 800483c:	689b      	ldr	r3, [r3, #8]
 800483e:	b123      	cbz	r3, 800484a <USBD_GetDescriptor+0xc0>
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8004840:	f10d 0106 	add.w	r1, sp, #6
 8004844:	7c00      	ldrb	r0, [r0, #16]
 8004846:	4798      	blx	r3
  if (err != 0U)
 8004848:	e7b9      	b.n	80047be <USBD_GetDescriptor+0x34>
            USBD_CtlError(pdev, req);
 800484a:	4629      	mov	r1, r5
 800484c:	f7ff ff93 	bl	8004776 <USBD_CtlError>
  if (err != 0U)
 8004850:	e7c7      	b.n	80047e2 <USBD_GetDescriptor+0x58>
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8004852:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 8004856:	68db      	ldr	r3, [r3, #12]
 8004858:	b123      	cbz	r3, 8004864 <USBD_GetDescriptor+0xda>
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800485a:	f10d 0106 	add.w	r1, sp, #6
 800485e:	7c00      	ldrb	r0, [r0, #16]
 8004860:	4798      	blx	r3
  if (err != 0U)
 8004862:	e7ac      	b.n	80047be <USBD_GetDescriptor+0x34>
            USBD_CtlError(pdev, req);
 8004864:	4629      	mov	r1, r5
 8004866:	f7ff ff86 	bl	8004776 <USBD_CtlError>
  if (err != 0U)
 800486a:	e7ba      	b.n	80047e2 <USBD_GetDescriptor+0x58>
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800486c:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 8004870:	691b      	ldr	r3, [r3, #16]
 8004872:	b123      	cbz	r3, 800487e <USBD_GetDescriptor+0xf4>
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8004874:	f10d 0106 	add.w	r1, sp, #6
 8004878:	7c00      	ldrb	r0, [r0, #16]
 800487a:	4798      	blx	r3
  if (err != 0U)
 800487c:	e79f      	b.n	80047be <USBD_GetDescriptor+0x34>
            USBD_CtlError(pdev, req);
 800487e:	4629      	mov	r1, r5
 8004880:	f7ff ff79 	bl	8004776 <USBD_CtlError>
  if (err != 0U)
 8004884:	e7ad      	b.n	80047e2 <USBD_GetDescriptor+0x58>
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8004886:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 800488a:	695b      	ldr	r3, [r3, #20]
 800488c:	b123      	cbz	r3, 8004898 <USBD_GetDescriptor+0x10e>
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800488e:	f10d 0106 	add.w	r1, sp, #6
 8004892:	7c00      	ldrb	r0, [r0, #16]
 8004894:	4798      	blx	r3
  if (err != 0U)
 8004896:	e792      	b.n	80047be <USBD_GetDescriptor+0x34>
            USBD_CtlError(pdev, req);
 8004898:	4629      	mov	r1, r5
 800489a:	f7ff ff6c 	bl	8004776 <USBD_CtlError>
  if (err != 0U)
 800489e:	e7a0      	b.n	80047e2 <USBD_GetDescriptor+0x58>
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80048a0:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 80048a4:	699b      	ldr	r3, [r3, #24]
 80048a6:	b123      	cbz	r3, 80048b2 <USBD_GetDescriptor+0x128>
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80048a8:	f10d 0106 	add.w	r1, sp, #6
 80048ac:	7c00      	ldrb	r0, [r0, #16]
 80048ae:	4798      	blx	r3
  if (err != 0U)
 80048b0:	e785      	b.n	80047be <USBD_GetDescriptor+0x34>
            USBD_CtlError(pdev, req);
 80048b2:	4629      	mov	r1, r5
 80048b4:	f7ff ff5f 	bl	8004776 <USBD_CtlError>
  if (err != 0U)
 80048b8:	e793      	b.n	80047e2 <USBD_GetDescriptor+0x58>
          USBD_CtlError(pdev, req);
 80048ba:	4629      	mov	r1, r5
 80048bc:	f7ff ff5b 	bl	8004776 <USBD_CtlError>
  if (err != 0U)
 80048c0:	e78f      	b.n	80047e2 <USBD_GetDescriptor+0x58>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80048c2:	7c03      	ldrb	r3, [r0, #16]
 80048c4:	b933      	cbnz	r3, 80048d4 <USBD_GetDescriptor+0x14a>
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80048c6:	f8d0 32b8 	ldr.w	r3, [r0, #696]	@ 0x2b8
 80048ca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80048cc:	f10d 0006 	add.w	r0, sp, #6
 80048d0:	4798      	blx	r3
  if (err != 0U)
 80048d2:	e774      	b.n	80047be <USBD_GetDescriptor+0x34>
        USBD_CtlError(pdev, req);
 80048d4:	4629      	mov	r1, r5
 80048d6:	f7ff ff4e 	bl	8004776 <USBD_CtlError>
  if (err != 0U)
 80048da:	e782      	b.n	80047e2 <USBD_GetDescriptor+0x58>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80048dc:	7c03      	ldrb	r3, [r0, #16]
 80048de:	b943      	cbnz	r3, 80048f2 <USBD_GetDescriptor+0x168>
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80048e0:	f8d0 32b8 	ldr.w	r3, [r0, #696]	@ 0x2b8
 80048e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80048e6:	f10d 0006 	add.w	r0, sp, #6
 80048ea:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80048ec:	2307      	movs	r3, #7
 80048ee:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 80048f0:	e765      	b.n	80047be <USBD_GetDescriptor+0x34>
        USBD_CtlError(pdev, req);
 80048f2:	4629      	mov	r1, r5
 80048f4:	f7ff ff3f 	bl	8004776 <USBD_CtlError>
  if (err != 0U)
 80048f8:	e773      	b.n	80047e2 <USBD_GetDescriptor+0x58>
      USBD_CtlError(pdev, req);
 80048fa:	4629      	mov	r1, r5
 80048fc:	f7ff ff3b 	bl	8004776 <USBD_CtlError>
    return;
 8004900:	e76f      	b.n	80047e2 <USBD_GetDescriptor+0x58>
      USBD_CtlError(pdev, req);
 8004902:	4629      	mov	r1, r5
 8004904:	4620      	mov	r0, r4
 8004906:	f7ff ff36 	bl	8004776 <USBD_CtlError>
 800490a:	e76a      	b.n	80047e2 <USBD_GetDescriptor+0x58>
    (void)USBD_CtlSendStatus(pdev);
 800490c:	4620      	mov	r0, r4
 800490e:	f000 fcad 	bl	800526c <USBD_CtlSendStatus>
 8004912:	e766      	b.n	80047e2 <USBD_GetDescriptor+0x58>

08004914 <USBD_SetAddress>:
{
 8004914:	b538      	push	{r3, r4, r5, lr}
 8004916:	4604      	mov	r4, r0
  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8004918:	888b      	ldrh	r3, [r1, #4]
 800491a:	b9fb      	cbnz	r3, 800495c <USBD_SetAddress+0x48>
 800491c:	88cb      	ldrh	r3, [r1, #6]
 800491e:	b9eb      	cbnz	r3, 800495c <USBD_SetAddress+0x48>
 8004920:	884b      	ldrh	r3, [r1, #2]
 8004922:	2b7f      	cmp	r3, #127	@ 0x7f
 8004924:	d81a      	bhi.n	800495c <USBD_SetAddress+0x48>
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8004926:	f003 057f 	and.w	r5, r3, #127	@ 0x7f
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800492a:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 800492e:	b2db      	uxtb	r3, r3
 8004930:	2b03      	cmp	r3, #3
 8004932:	d00c      	beq.n	800494e <USBD_SetAddress+0x3a>
      pdev->dev_address = dev_addr;
 8004934:	f880 529e 	strb.w	r5, [r0, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8004938:	4629      	mov	r1, r5
 800493a:	f7ff fd27 	bl	800438c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800493e:	4620      	mov	r0, r4
 8004940:	f000 fc94 	bl	800526c <USBD_CtlSendStatus>
      if (dev_addr != 0U)
 8004944:	b135      	cbz	r5, 8004954 <USBD_SetAddress+0x40>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8004946:	2302      	movs	r3, #2
 8004948:	f884 329c 	strb.w	r3, [r4, #668]	@ 0x29c
 800494c:	e009      	b.n	8004962 <USBD_SetAddress+0x4e>
      USBD_CtlError(pdev, req);
 800494e:	f7ff ff12 	bl	8004776 <USBD_CtlError>
 8004952:	e006      	b.n	8004962 <USBD_SetAddress+0x4e>
        pdev->dev_state = USBD_STATE_DEFAULT;
 8004954:	2301      	movs	r3, #1
 8004956:	f884 329c 	strb.w	r3, [r4, #668]	@ 0x29c
 800495a:	e002      	b.n	8004962 <USBD_SetAddress+0x4e>
    USBD_CtlError(pdev, req);
 800495c:	4620      	mov	r0, r4
 800495e:	f7ff ff0a 	bl	8004776 <USBD_CtlError>
}
 8004962:	bd38      	pop	{r3, r4, r5, pc}

08004964 <USBD_SetConfig>:
{
 8004964:	b570      	push	{r4, r5, r6, lr}
 8004966:	4604      	mov	r4, r0
 8004968:	460e      	mov	r6, r1
  cfgidx = (uint8_t)(req->wValue);
 800496a:	788d      	ldrb	r5, [r1, #2]
 800496c:	4b2e      	ldr	r3, [pc, #184]	@ (8004a28 <USBD_SetConfig+0xc4>)
 800496e:	701d      	strb	r5, [r3, #0]
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8004970:	2d01      	cmp	r5, #1
 8004972:	d810      	bhi.n	8004996 <USBD_SetConfig+0x32>
  switch (pdev->dev_state)
 8004974:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 8004978:	b2db      	uxtb	r3, r3
 800497a:	2b02      	cmp	r3, #2
 800497c:	d00f      	beq.n	800499e <USBD_SetConfig+0x3a>
 800497e:	2b03      	cmp	r3, #3
 8004980:	d023      	beq.n	80049ca <USBD_SetConfig+0x66>
      USBD_CtlError(pdev, req);
 8004982:	f7ff fef8 	bl	8004776 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8004986:	4b28      	ldr	r3, [pc, #160]	@ (8004a28 <USBD_SetConfig+0xc4>)
 8004988:	7819      	ldrb	r1, [r3, #0]
 800498a:	4620      	mov	r0, r4
 800498c:	f7ff fd6b 	bl	8004466 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8004990:	2503      	movs	r5, #3
}
 8004992:	4628      	mov	r0, r5
 8004994:	bd70      	pop	{r4, r5, r6, pc}
    USBD_CtlError(pdev, req);
 8004996:	f7ff feee 	bl	8004776 <USBD_CtlError>
    return USBD_FAIL;
 800499a:	2503      	movs	r5, #3
 800499c:	e7f9      	b.n	8004992 <USBD_SetConfig+0x2e>
      if (cfgidx != 0U)
 800499e:	b18d      	cbz	r5, 80049c4 <USBD_SetConfig+0x60>
        pdev->dev_config = cfgidx;
 80049a0:	6045      	str	r5, [r0, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80049a2:	4629      	mov	r1, r5
 80049a4:	f7ff fd56 	bl	8004454 <USBD_SetClassConfig>
        if (ret != USBD_OK)
 80049a8:	4605      	mov	r5, r0
 80049aa:	b120      	cbz	r0, 80049b6 <USBD_SetConfig+0x52>
          USBD_CtlError(pdev, req);
 80049ac:	4631      	mov	r1, r6
 80049ae:	4620      	mov	r0, r4
 80049b0:	f7ff fee1 	bl	8004776 <USBD_CtlError>
 80049b4:	e7ed      	b.n	8004992 <USBD_SetConfig+0x2e>
          (void)USBD_CtlSendStatus(pdev);
 80049b6:	4620      	mov	r0, r4
 80049b8:	f000 fc58 	bl	800526c <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80049bc:	2303      	movs	r3, #3
 80049be:	f884 329c 	strb.w	r3, [r4, #668]	@ 0x29c
 80049c2:	e7e6      	b.n	8004992 <USBD_SetConfig+0x2e>
        (void)USBD_CtlSendStatus(pdev);
 80049c4:	f000 fc52 	bl	800526c <USBD_CtlSendStatus>
 80049c8:	e7e3      	b.n	8004992 <USBD_SetConfig+0x2e>
      if (cfgidx == 0U)
 80049ca:	b1cd      	cbz	r5, 8004a00 <USBD_SetConfig+0x9c>
      else if (cfgidx != pdev->dev_config)
 80049cc:	6841      	ldr	r1, [r0, #4]
 80049ce:	428d      	cmp	r5, r1
 80049d0:	d025      	beq.n	8004a1e <USBD_SetConfig+0xba>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80049d2:	b2c9      	uxtb	r1, r1
 80049d4:	f7ff fd47 	bl	8004466 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80049d8:	4b13      	ldr	r3, [pc, #76]	@ (8004a28 <USBD_SetConfig+0xc4>)
 80049da:	7819      	ldrb	r1, [r3, #0]
 80049dc:	6061      	str	r1, [r4, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80049de:	4620      	mov	r0, r4
 80049e0:	f7ff fd38 	bl	8004454 <USBD_SetClassConfig>
        if (ret != USBD_OK)
 80049e4:	4605      	mov	r5, r0
 80049e6:	b1b0      	cbz	r0, 8004a16 <USBD_SetConfig+0xb2>
          USBD_CtlError(pdev, req);
 80049e8:	4631      	mov	r1, r6
 80049ea:	4620      	mov	r0, r4
 80049ec:	f7ff fec3 	bl	8004776 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80049f0:	7921      	ldrb	r1, [r4, #4]
 80049f2:	4620      	mov	r0, r4
 80049f4:	f7ff fd37 	bl	8004466 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80049f8:	2302      	movs	r3, #2
 80049fa:	f884 329c 	strb.w	r3, [r4, #668]	@ 0x29c
 80049fe:	e7c8      	b.n	8004992 <USBD_SetConfig+0x2e>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8004a00:	2302      	movs	r3, #2
 8004a02:	f880 329c 	strb.w	r3, [r0, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8004a06:	6045      	str	r5, [r0, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8004a08:	4629      	mov	r1, r5
 8004a0a:	f7ff fd2c 	bl	8004466 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8004a0e:	4620      	mov	r0, r4
 8004a10:	f000 fc2c 	bl	800526c <USBD_CtlSendStatus>
 8004a14:	e7bd      	b.n	8004992 <USBD_SetConfig+0x2e>
          (void)USBD_CtlSendStatus(pdev);
 8004a16:	4620      	mov	r0, r4
 8004a18:	f000 fc28 	bl	800526c <USBD_CtlSendStatus>
 8004a1c:	e7b9      	b.n	8004992 <USBD_SetConfig+0x2e>
        (void)USBD_CtlSendStatus(pdev);
 8004a1e:	f000 fc25 	bl	800526c <USBD_CtlSendStatus>
  USBD_StatusTypeDef ret = USBD_OK;
 8004a22:	2500      	movs	r5, #0
 8004a24:	e7b5      	b.n	8004992 <USBD_SetConfig+0x2e>
 8004a26:	bf00      	nop
 8004a28:	20004a80 	.word	0x20004a80

08004a2c <USBD_GetConfig>:
{
 8004a2c:	b508      	push	{r3, lr}
  if (req->wLength != 1U)
 8004a2e:	88cb      	ldrh	r3, [r1, #6]
 8004a30:	2b01      	cmp	r3, #1
 8004a32:	d10b      	bne.n	8004a4c <USBD_GetConfig+0x20>
    switch (pdev->dev_state)
 8004a34:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 8004a38:	b2db      	uxtb	r3, r3
 8004a3a:	2b02      	cmp	r3, #2
 8004a3c:	d909      	bls.n	8004a52 <USBD_GetConfig+0x26>
 8004a3e:	2b03      	cmp	r3, #3
 8004a40:	d109      	bne.n	8004a56 <USBD_GetConfig+0x2a>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8004a42:	2201      	movs	r2, #1
 8004a44:	1d01      	adds	r1, r0, #4
 8004a46:	f000 fbe5 	bl	8005214 <USBD_CtlSendData>
        break;
 8004a4a:	e001      	b.n	8004a50 <USBD_GetConfig+0x24>
    USBD_CtlError(pdev, req);
 8004a4c:	f7ff fe93 	bl	8004776 <USBD_CtlError>
}
 8004a50:	bd08      	pop	{r3, pc}
    switch (pdev->dev_state)
 8004a52:	b25b      	sxtb	r3, r3
 8004a54:	b913      	cbnz	r3, 8004a5c <USBD_GetConfig+0x30>
        USBD_CtlError(pdev, req);
 8004a56:	f7ff fe8e 	bl	8004776 <USBD_CtlError>
}
 8004a5a:	e7f9      	b.n	8004a50 <USBD_GetConfig+0x24>
        pdev->dev_default_config = 0U;
 8004a5c:	4601      	mov	r1, r0
 8004a5e:	2300      	movs	r3, #0
 8004a60:	f841 3f08 	str.w	r3, [r1, #8]!
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8004a64:	2201      	movs	r2, #1
 8004a66:	f000 fbd5 	bl	8005214 <USBD_CtlSendData>
        break;
 8004a6a:	e7f1      	b.n	8004a50 <USBD_GetConfig+0x24>

08004a6c <USBD_GetStatus>:
{
 8004a6c:	b508      	push	{r3, lr}
  switch (pdev->dev_state)
 8004a6e:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 8004a72:	3b01      	subs	r3, #1
 8004a74:	2b02      	cmp	r3, #2
 8004a76:	d812      	bhi.n	8004a9e <USBD_GetStatus+0x32>
      if (req->wLength != 0x2U)
 8004a78:	88cb      	ldrh	r3, [r1, #6]
 8004a7a:	2b02      	cmp	r3, #2
 8004a7c:	d10c      	bne.n	8004a98 <USBD_GetStatus+0x2c>
      pdev->dev_config_status = 0U;
 8004a7e:	2300      	movs	r3, #0
 8004a80:	60c3      	str	r3, [r0, #12]
      if (pdev->dev_remote_wakeup != 0U)
 8004a82:	f8d0 32a4 	ldr.w	r3, [r0, #676]	@ 0x2a4
 8004a86:	b10b      	cbz	r3, 8004a8c <USBD_GetStatus+0x20>
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8004a88:	2302      	movs	r3, #2
 8004a8a:	60c3      	str	r3, [r0, #12]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8004a8c:	2202      	movs	r2, #2
 8004a8e:	f100 010c 	add.w	r1, r0, #12
 8004a92:	f000 fbbf 	bl	8005214 <USBD_CtlSendData>
}
 8004a96:	bd08      	pop	{r3, pc}
        USBD_CtlError(pdev, req);
 8004a98:	f7ff fe6d 	bl	8004776 <USBD_CtlError>
        break;
 8004a9c:	e7fb      	b.n	8004a96 <USBD_GetStatus+0x2a>
      USBD_CtlError(pdev, req);
 8004a9e:	f7ff fe6a 	bl	8004776 <USBD_CtlError>
}
 8004aa2:	e7f8      	b.n	8004a96 <USBD_GetStatus+0x2a>

08004aa4 <USBD_ClrFeature>:
{
 8004aa4:	b508      	push	{r3, lr}
  switch (pdev->dev_state)
 8004aa6:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 8004aaa:	3b01      	subs	r3, #1
 8004aac:	2b02      	cmp	r3, #2
 8004aae:	d809      	bhi.n	8004ac4 <USBD_ClrFeature+0x20>
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8004ab0:	884b      	ldrh	r3, [r1, #2]
 8004ab2:	2b01      	cmp	r3, #1
 8004ab4:	d000      	beq.n	8004ab8 <USBD_ClrFeature+0x14>
}
 8004ab6:	bd08      	pop	{r3, pc}
        pdev->dev_remote_wakeup = 0U;
 8004ab8:	2300      	movs	r3, #0
 8004aba:	f8c0 32a4 	str.w	r3, [r0, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8004abe:	f000 fbd5 	bl	800526c <USBD_CtlSendStatus>
 8004ac2:	e7f8      	b.n	8004ab6 <USBD_ClrFeature+0x12>
      USBD_CtlError(pdev, req);
 8004ac4:	f7ff fe57 	bl	8004776 <USBD_CtlError>
}
 8004ac8:	e7f5      	b.n	8004ab6 <USBD_ClrFeature+0x12>

08004aca <USBD_StdDevReq>:
{
 8004aca:	b538      	push	{r3, r4, r5, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004acc:	780c      	ldrb	r4, [r1, #0]
 8004ace:	f004 0460 	and.w	r4, r4, #96	@ 0x60
 8004ad2:	2c20      	cmp	r4, #32
 8004ad4:	d006      	beq.n	8004ae4 <USBD_StdDevReq+0x1a>
 8004ad6:	2c40      	cmp	r4, #64	@ 0x40
 8004ad8:	d004      	beq.n	8004ae4 <USBD_StdDevReq+0x1a>
 8004ada:	b154      	cbz	r4, 8004af2 <USBD_StdDevReq+0x28>
      USBD_CtlError(pdev, req);
 8004adc:	f7ff fe4b 	bl	8004776 <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 8004ae0:	2400      	movs	r4, #0
      break;
 8004ae2:	e004      	b.n	8004aee <USBD_StdDevReq+0x24>
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8004ae4:	f8d0 32b8 	ldr.w	r3, [r0, #696]	@ 0x2b8
 8004ae8:	689b      	ldr	r3, [r3, #8]
 8004aea:	4798      	blx	r3
 8004aec:	4604      	mov	r4, r0
}
 8004aee:	4620      	mov	r0, r4
 8004af0:	bd38      	pop	{r3, r4, r5, pc}
      switch (req->bRequest)
 8004af2:	784d      	ldrb	r5, [r1, #1]
 8004af4:	2d09      	cmp	r5, #9
 8004af6:	d81d      	bhi.n	8004b34 <USBD_StdDevReq+0x6a>
 8004af8:	e8df f005 	tbb	[pc, r5]
 8004afc:	161c1912 	.word	0x161c1912
 8004b00:	1c05081c 	.word	0x1c05081c
 8004b04:	0b0f      	.short	0x0b0f
          USBD_GetDescriptor(pdev, req);
 8004b06:	f7ff fe40 	bl	800478a <USBD_GetDescriptor>
          break;
 8004b0a:	e7f0      	b.n	8004aee <USBD_StdDevReq+0x24>
          USBD_SetAddress(pdev, req);
 8004b0c:	f7ff ff02 	bl	8004914 <USBD_SetAddress>
          break;
 8004b10:	e7ed      	b.n	8004aee <USBD_StdDevReq+0x24>
          ret = USBD_SetConfig(pdev, req);
 8004b12:	f7ff ff27 	bl	8004964 <USBD_SetConfig>
 8004b16:	4604      	mov	r4, r0
          break;
 8004b18:	e7e9      	b.n	8004aee <USBD_StdDevReq+0x24>
          USBD_GetConfig(pdev, req);
 8004b1a:	f7ff ff87 	bl	8004a2c <USBD_GetConfig>
          break;
 8004b1e:	e7e6      	b.n	8004aee <USBD_StdDevReq+0x24>
          USBD_GetStatus(pdev, req);
 8004b20:	f7ff ffa4 	bl	8004a6c <USBD_GetStatus>
  USBD_StatusTypeDef ret = USBD_OK;
 8004b24:	462c      	mov	r4, r5
          break;
 8004b26:	e7e2      	b.n	8004aee <USBD_StdDevReq+0x24>
          USBD_SetFeature(pdev, req);
 8004b28:	f7ff fe07 	bl	800473a <USBD_SetFeature>
          break;
 8004b2c:	e7df      	b.n	8004aee <USBD_StdDevReq+0x24>
          USBD_ClrFeature(pdev, req);
 8004b2e:	f7ff ffb9 	bl	8004aa4 <USBD_ClrFeature>
          break;
 8004b32:	e7dc      	b.n	8004aee <USBD_StdDevReq+0x24>
          USBD_CtlError(pdev, req);
 8004b34:	f7ff fe1f 	bl	8004776 <USBD_CtlError>
          break;
 8004b38:	e7d9      	b.n	8004aee <USBD_StdDevReq+0x24>

08004b3a <USBD_StdItfReq>:
{
 8004b3a:	b570      	push	{r4, r5, r6, lr}
 8004b3c:	4605      	mov	r5, r0
 8004b3e:	460c      	mov	r4, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004b40:	780b      	ldrb	r3, [r1, #0]
 8004b42:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8004b46:	2b20      	cmp	r3, #32
 8004b48:	d007      	beq.n	8004b5a <USBD_StdItfReq+0x20>
 8004b4a:	2b40      	cmp	r3, #64	@ 0x40
 8004b4c:	d005      	beq.n	8004b5a <USBD_StdItfReq+0x20>
 8004b4e:	b123      	cbz	r3, 8004b5a <USBD_StdItfReq+0x20>
      USBD_CtlError(pdev, req);
 8004b50:	f7ff fe11 	bl	8004776 <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 8004b54:	2600      	movs	r6, #0
}
 8004b56:	4630      	mov	r0, r6
 8004b58:	bd70      	pop	{r4, r5, r6, pc}
      switch (pdev->dev_state)
 8004b5a:	f895 329c 	ldrb.w	r3, [r5, #668]	@ 0x29c
 8004b5e:	3b01      	subs	r3, #1
 8004b60:	2b02      	cmp	r3, #2
 8004b62:	d818      	bhi.n	8004b96 <USBD_StdItfReq+0x5c>
          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8004b64:	7923      	ldrb	r3, [r4, #4]
 8004b66:	2b01      	cmp	r3, #1
 8004b68:	d80f      	bhi.n	8004b8a <USBD_StdItfReq+0x50>
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8004b6a:	f8d5 32b8 	ldr.w	r3, [r5, #696]	@ 0x2b8
 8004b6e:	689b      	ldr	r3, [r3, #8]
 8004b70:	4621      	mov	r1, r4
 8004b72:	4628      	mov	r0, r5
 8004b74:	4798      	blx	r3
 8004b76:	4606      	mov	r6, r0
            if ((req->wLength == 0U) && (ret == USBD_OK))
 8004b78:	88e3      	ldrh	r3, [r4, #6]
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d1eb      	bne.n	8004b56 <USBD_StdItfReq+0x1c>
 8004b7e:	2800      	cmp	r0, #0
 8004b80:	d1e9      	bne.n	8004b56 <USBD_StdItfReq+0x1c>
              (void)USBD_CtlSendStatus(pdev);
 8004b82:	4628      	mov	r0, r5
 8004b84:	f000 fb72 	bl	800526c <USBD_CtlSendStatus>
 8004b88:	e7e5      	b.n	8004b56 <USBD_StdItfReq+0x1c>
            USBD_CtlError(pdev, req);
 8004b8a:	4621      	mov	r1, r4
 8004b8c:	4628      	mov	r0, r5
 8004b8e:	f7ff fdf2 	bl	8004776 <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 8004b92:	2600      	movs	r6, #0
 8004b94:	e7df      	b.n	8004b56 <USBD_StdItfReq+0x1c>
          USBD_CtlError(pdev, req);
 8004b96:	4621      	mov	r1, r4
 8004b98:	4628      	mov	r0, r5
 8004b9a:	f7ff fdec 	bl	8004776 <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 8004b9e:	2600      	movs	r6, #0
          break;
 8004ba0:	e7d9      	b.n	8004b56 <USBD_StdItfReq+0x1c>

08004ba2 <USBD_StdEPReq>:
{
 8004ba2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ba4:	4606      	mov	r6, r0
 8004ba6:	460d      	mov	r5, r1
  ep_addr = LOBYTE(req->wIndex);
 8004ba8:	888b      	ldrh	r3, [r1, #4]
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004baa:	780c      	ldrb	r4, [r1, #0]
 8004bac:	f004 0460 	and.w	r4, r4, #96	@ 0x60
 8004bb0:	2c20      	cmp	r4, #32
 8004bb2:	d008      	beq.n	8004bc6 <USBD_StdEPReq+0x24>
 8004bb4:	b2d9      	uxtb	r1, r3
 8004bb6:	2c40      	cmp	r4, #64	@ 0x40
 8004bb8:	d005      	beq.n	8004bc6 <USBD_StdEPReq+0x24>
 8004bba:	b16c      	cbz	r4, 8004bd8 <USBD_StdEPReq+0x36>
      USBD_CtlError(pdev, req);
 8004bbc:	4629      	mov	r1, r5
 8004bbe:	f7ff fdda 	bl	8004776 <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 8004bc2:	2400      	movs	r4, #0
      break;
 8004bc4:	e006      	b.n	8004bd4 <USBD_StdEPReq+0x32>
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8004bc6:	f8d6 32b8 	ldr.w	r3, [r6, #696]	@ 0x2b8
 8004bca:	689b      	ldr	r3, [r3, #8]
 8004bcc:	4629      	mov	r1, r5
 8004bce:	4630      	mov	r0, r6
 8004bd0:	4798      	blx	r3
 8004bd2:	4604      	mov	r4, r0
}
 8004bd4:	4620      	mov	r0, r4
 8004bd6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      switch (req->bRequest)
 8004bd8:	786f      	ldrb	r7, [r5, #1]
 8004bda:	2f01      	cmp	r7, #1
 8004bdc:	d02f      	beq.n	8004c3e <USBD_StdEPReq+0x9c>
 8004bde:	2f03      	cmp	r7, #3
 8004be0:	d005      	beq.n	8004bee <USBD_StdEPReq+0x4c>
 8004be2:	2f00      	cmp	r7, #0
 8004be4:	d059      	beq.n	8004c9a <USBD_StdEPReq+0xf8>
          USBD_CtlError(pdev, req);
 8004be6:	4629      	mov	r1, r5
 8004be8:	f7ff fdc5 	bl	8004776 <USBD_CtlError>
          break;
 8004bec:	e7f2      	b.n	8004bd4 <USBD_StdEPReq+0x32>
          switch (pdev->dev_state)
 8004bee:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 8004bf2:	b2db      	uxtb	r3, r3
 8004bf4:	2b02      	cmp	r3, #2
 8004bf6:	d005      	beq.n	8004c04 <USBD_StdEPReq+0x62>
 8004bf8:	2b03      	cmp	r3, #3
 8004bfa:	d012      	beq.n	8004c22 <USBD_StdEPReq+0x80>
              USBD_CtlError(pdev, req);
 8004bfc:	4629      	mov	r1, r5
 8004bfe:	f7ff fdba 	bl	8004776 <USBD_CtlError>
              break;
 8004c02:	e7e7      	b.n	8004bd4 <USBD_StdEPReq+0x32>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8004c04:	b109      	cbz	r1, 8004c0a <USBD_StdEPReq+0x68>
 8004c06:	2980      	cmp	r1, #128	@ 0x80
 8004c08:	d104      	bne.n	8004c14 <USBD_StdEPReq+0x72>
                USBD_CtlError(pdev, req);
 8004c0a:	4629      	mov	r1, r5
 8004c0c:	4630      	mov	r0, r6
 8004c0e:	f7ff fdb2 	bl	8004776 <USBD_CtlError>
 8004c12:	e7df      	b.n	8004bd4 <USBD_StdEPReq+0x32>
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8004c14:	f7ff fbaa 	bl	800436c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8004c18:	2180      	movs	r1, #128	@ 0x80
 8004c1a:	4630      	mov	r0, r6
 8004c1c:	f7ff fba6 	bl	800436c <USBD_LL_StallEP>
 8004c20:	e7d8      	b.n	8004bd4 <USBD_StdEPReq+0x32>
              if (req->wValue == USB_FEATURE_EP_HALT)
 8004c22:	886b      	ldrh	r3, [r5, #2]
 8004c24:	b923      	cbnz	r3, 8004c30 <USBD_StdEPReq+0x8e>
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8004c26:	b119      	cbz	r1, 8004c30 <USBD_StdEPReq+0x8e>
 8004c28:	2980      	cmp	r1, #128	@ 0x80
 8004c2a:	d001      	beq.n	8004c30 <USBD_StdEPReq+0x8e>
 8004c2c:	88eb      	ldrh	r3, [r5, #6]
 8004c2e:	b11b      	cbz	r3, 8004c38 <USBD_StdEPReq+0x96>
              (void)USBD_CtlSendStatus(pdev);
 8004c30:	4630      	mov	r0, r6
 8004c32:	f000 fb1b 	bl	800526c <USBD_CtlSendStatus>
              break;
 8004c36:	e7cd      	b.n	8004bd4 <USBD_StdEPReq+0x32>
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8004c38:	f7ff fb98 	bl	800436c <USBD_LL_StallEP>
 8004c3c:	e7f8      	b.n	8004c30 <USBD_StdEPReq+0x8e>
          switch (pdev->dev_state)
 8004c3e:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 8004c42:	b2db      	uxtb	r3, r3
 8004c44:	2b02      	cmp	r3, #2
 8004c46:	d005      	beq.n	8004c54 <USBD_StdEPReq+0xb2>
 8004c48:	2b03      	cmp	r3, #3
 8004c4a:	d012      	beq.n	8004c72 <USBD_StdEPReq+0xd0>
              USBD_CtlError(pdev, req);
 8004c4c:	4629      	mov	r1, r5
 8004c4e:	f7ff fd92 	bl	8004776 <USBD_CtlError>
              break;
 8004c52:	e7bf      	b.n	8004bd4 <USBD_StdEPReq+0x32>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8004c54:	b109      	cbz	r1, 8004c5a <USBD_StdEPReq+0xb8>
 8004c56:	2980      	cmp	r1, #128	@ 0x80
 8004c58:	d104      	bne.n	8004c64 <USBD_StdEPReq+0xc2>
                USBD_CtlError(pdev, req);
 8004c5a:	4629      	mov	r1, r5
 8004c5c:	4630      	mov	r0, r6
 8004c5e:	f7ff fd8a 	bl	8004776 <USBD_CtlError>
 8004c62:	e7b7      	b.n	8004bd4 <USBD_StdEPReq+0x32>
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8004c64:	f7ff fb82 	bl	800436c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8004c68:	2180      	movs	r1, #128	@ 0x80
 8004c6a:	4630      	mov	r0, r6
 8004c6c:	f7ff fb7e 	bl	800436c <USBD_LL_StallEP>
 8004c70:	e7b0      	b.n	8004bd4 <USBD_StdEPReq+0x32>
              if (req->wValue == USB_FEATURE_EP_HALT)
 8004c72:	886b      	ldrh	r3, [r5, #2]
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d1ad      	bne.n	8004bd4 <USBD_StdEPReq+0x32>
                if ((ep_addr & 0x7FU) != 0x00U)
 8004c78:	f011 0f7f 	tst.w	r1, #127	@ 0x7f
 8004c7c:	d10a      	bne.n	8004c94 <USBD_StdEPReq+0xf2>
                (void)USBD_CtlSendStatus(pdev);
 8004c7e:	4630      	mov	r0, r6
 8004c80:	f000 faf4 	bl	800526c <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8004c84:	f8d6 32b8 	ldr.w	r3, [r6, #696]	@ 0x2b8
 8004c88:	689b      	ldr	r3, [r3, #8]
 8004c8a:	4629      	mov	r1, r5
 8004c8c:	4630      	mov	r0, r6
 8004c8e:	4798      	blx	r3
 8004c90:	4604      	mov	r4, r0
 8004c92:	e79f      	b.n	8004bd4 <USBD_StdEPReq+0x32>
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8004c94:	f7ff fb72 	bl	800437c <USBD_LL_ClearStallEP>
 8004c98:	e7f1      	b.n	8004c7e <USBD_StdEPReq+0xdc>
          switch (pdev->dev_state)
 8004c9a:	f890 229c 	ldrb.w	r2, [r0, #668]	@ 0x29c
 8004c9e:	b2d2      	uxtb	r2, r2
 8004ca0:	2a02      	cmp	r2, #2
 8004ca2:	d006      	beq.n	8004cb2 <USBD_StdEPReq+0x110>
 8004ca4:	2a03      	cmp	r2, #3
 8004ca6:	d029      	beq.n	8004cfc <USBD_StdEPReq+0x15a>
              USBD_CtlError(pdev, req);
 8004ca8:	4629      	mov	r1, r5
 8004caa:	f7ff fd64 	bl	8004776 <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 8004cae:	463c      	mov	r4, r7
              break;
 8004cb0:	e790      	b.n	8004bd4 <USBD_StdEPReq+0x32>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8004cb2:	b109      	cbz	r1, 8004cb8 <USBD_StdEPReq+0x116>
 8004cb4:	2980      	cmp	r1, #128	@ 0x80
 8004cb6:	d113      	bne.n	8004ce0 <USBD_StdEPReq+0x13e>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8004cb8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8004cbc:	d115      	bne.n	8004cea <USBD_StdEPReq+0x148>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8004cbe:	f001 017f 	and.w	r1, r1, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8004cc2:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8004cc6:	0089      	lsls	r1, r1, #2
 8004cc8:	f501 71a8 	add.w	r1, r1, #336	@ 0x150
 8004ccc:	4431      	add	r1, r6
 8004cce:	3104      	adds	r1, #4
              pep->status = 0x0000U;
 8004cd0:	2300      	movs	r3, #0
 8004cd2:	600b      	str	r3, [r1, #0]
              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8004cd4:	2202      	movs	r2, #2
 8004cd6:	4630      	mov	r0, r6
 8004cd8:	f000 fa9c 	bl	8005214 <USBD_CtlSendData>
  USBD_StatusTypeDef ret = USBD_OK;
 8004cdc:	463c      	mov	r4, r7
              break;
 8004cde:	e779      	b.n	8004bd4 <USBD_StdEPReq+0x32>
                USBD_CtlError(pdev, req);
 8004ce0:	4629      	mov	r1, r5
 8004ce2:	f7ff fd48 	bl	8004776 <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 8004ce6:	463c      	mov	r4, r7
                break;
 8004ce8:	e774      	b.n	8004bd4 <USBD_StdEPReq+0x32>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8004cea:	f001 017f 	and.w	r1, r1, #127	@ 0x7f
 8004cee:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8004cf2:	0089      	lsls	r1, r1, #2
 8004cf4:	3110      	adds	r1, #16
 8004cf6:	4431      	add	r1, r6
 8004cf8:	3104      	adds	r1, #4
 8004cfa:	e7e9      	b.n	8004cd0 <USBD_StdEPReq+0x12e>
              if ((ep_addr & 0x80U) == 0x80U)
 8004cfc:	b25b      	sxtb	r3, r3
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	db1f      	blt.n	8004d42 <USBD_StdEPReq+0x1a0>
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8004d02:	f001 020f 	and.w	r2, r1, #15
 8004d06:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8004d0a:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8004d0e:	f8b2 2164 	ldrh.w	r2, [r2, #356]	@ 0x164
 8004d12:	b322      	cbz	r2, 8004d5e <USBD_StdEPReq+0x1bc>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	db27      	blt.n	8004d68 <USBD_StdEPReq+0x1c6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8004d18:	f001 037f 	and.w	r3, r1, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8004d1c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8004d20:	009c      	lsls	r4, r3, #2
 8004d22:	f504 74a8 	add.w	r4, r4, #336	@ 0x150
 8004d26:	4434      	add	r4, r6
 8004d28:	3404      	adds	r4, #4
              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8004d2a:	b109      	cbz	r1, 8004d30 <USBD_StdEPReq+0x18e>
 8004d2c:	2980      	cmp	r1, #128	@ 0x80
 8004d2e:	d124      	bne.n	8004d7a <USBD_StdEPReq+0x1d8>
                pep->status = 0x0000U;
 8004d30:	2300      	movs	r3, #0
 8004d32:	6023      	str	r3, [r4, #0]
              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8004d34:	2202      	movs	r2, #2
 8004d36:	4621      	mov	r1, r4
 8004d38:	4630      	mov	r0, r6
 8004d3a:	f000 fa6b 	bl	8005214 <USBD_CtlSendData>
  USBD_StatusTypeDef ret = USBD_OK;
 8004d3e:	463c      	mov	r4, r7
              break;
 8004d40:	e748      	b.n	8004bd4 <USBD_StdEPReq+0x32>
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8004d42:	f001 020f 	and.w	r2, r1, #15
 8004d46:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8004d4a:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8004d4e:	8c92      	ldrh	r2, [r2, #36]	@ 0x24
 8004d50:	2a00      	cmp	r2, #0
 8004d52:	d1df      	bne.n	8004d14 <USBD_StdEPReq+0x172>
                  USBD_CtlError(pdev, req);
 8004d54:	4629      	mov	r1, r5
 8004d56:	f7ff fd0e 	bl	8004776 <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 8004d5a:	463c      	mov	r4, r7
                  break;
 8004d5c:	e73a      	b.n	8004bd4 <USBD_StdEPReq+0x32>
                  USBD_CtlError(pdev, req);
 8004d5e:	4629      	mov	r1, r5
 8004d60:	f7ff fd09 	bl	8004776 <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 8004d64:	463c      	mov	r4, r7
                  break;
 8004d66:	e735      	b.n	8004bd4 <USBD_StdEPReq+0x32>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8004d68:	f001 037f 	and.w	r3, r1, #127	@ 0x7f
 8004d6c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8004d70:	009c      	lsls	r4, r3, #2
 8004d72:	3410      	adds	r4, #16
 8004d74:	4434      	add	r4, r6
 8004d76:	3404      	adds	r4, #4
 8004d78:	e7d7      	b.n	8004d2a <USBD_StdEPReq+0x188>
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8004d7a:	4630      	mov	r0, r6
 8004d7c:	f7ff fab6 	bl	80042ec <USBD_LL_IsStallEP>
 8004d80:	b110      	cbz	r0, 8004d88 <USBD_StdEPReq+0x1e6>
                pep->status = 0x0001U;
 8004d82:	2301      	movs	r3, #1
 8004d84:	6023      	str	r3, [r4, #0]
 8004d86:	e7d5      	b.n	8004d34 <USBD_StdEPReq+0x192>
                pep->status = 0x0000U;
 8004d88:	2300      	movs	r3, #0
 8004d8a:	6023      	str	r3, [r4, #0]
 8004d8c:	e7d2      	b.n	8004d34 <USBD_StdEPReq+0x192>

08004d8e <USBD_GetString>:
  if (desc == NULL)
 8004d8e:	b1d0      	cbz	r0, 8004dc6 <USBD_GetString+0x38>
{
 8004d90:	b570      	push	{r4, r5, r6, lr}
 8004d92:	460d      	mov	r5, r1
 8004d94:	4616      	mov	r6, r2
 8004d96:	4604      	mov	r4, r0
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8004d98:	f7ff fcc5 	bl	8004726 <USBD_GetLen>
 8004d9c:	1c43      	adds	r3, r0, #1
 8004d9e:	005b      	lsls	r3, r3, #1
 8004da0:	b29b      	uxth	r3, r3
 8004da2:	8033      	strh	r3, [r6, #0]
  unicode[idx] = *(uint8_t *)len;
 8004da4:	702b      	strb	r3, [r5, #0]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8004da6:	2303      	movs	r3, #3
 8004da8:	706b      	strb	r3, [r5, #1]
  idx++;
 8004daa:	2302      	movs	r3, #2
  while (*pdesc != (uint8_t)'\0')
 8004dac:	e007      	b.n	8004dbe <USBD_GetString+0x30>
    unicode[idx] = *pdesc;
 8004dae:	54ea      	strb	r2, [r5, r3]
    pdesc++;
 8004db0:	3401      	adds	r4, #1
    idx++;
 8004db2:	1c5a      	adds	r2, r3, #1
 8004db4:	b2d2      	uxtb	r2, r2
    unicode[idx] = 0U;
 8004db6:	2100      	movs	r1, #0
 8004db8:	54a9      	strb	r1, [r5, r2]
    idx++;
 8004dba:	3302      	adds	r3, #2
 8004dbc:	b2db      	uxtb	r3, r3
  while (*pdesc != (uint8_t)'\0')
 8004dbe:	7822      	ldrb	r2, [r4, #0]
 8004dc0:	2a00      	cmp	r2, #0
 8004dc2:	d1f4      	bne.n	8004dae <USBD_GetString+0x20>
}
 8004dc4:	bd70      	pop	{r4, r5, r6, pc}
 8004dc6:	4770      	bx	lr

08004dc8 <CUSTOM_HID_Init_FS>:
static int8_t CUSTOM_HID_Init_FS(void)
{
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
  /* USER CODE END 4 */
}
 8004dc8:	2000      	movs	r0, #0
 8004dca:	4770      	bx	lr

08004dcc <CUSTOM_HID_DeInit_FS>:
static int8_t CUSTOM_HID_DeInit_FS(void)
{
  /* USER CODE BEGIN 5 */
  return (USBD_OK);
  /* USER CODE END 5 */
}
 8004dcc:	2000      	movs	r0, #0
 8004dce:	4770      	bx	lr

08004dd0 <CUSTOM_HID_OutEvent_FS>:
  * @param  event_idx: Event index
  * @param  state: Event state
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_OutEvent_FS(uint8_t* state)
{
 8004dd0:	b500      	push	{lr}
 8004dd2:	b083      	sub	sp, #12
  /* USER CODE BEGIN 6 */

  DBG("OutEvent: %x %x %x %x %x", state[0], state[1], state[2], state[3], state[4]);
 8004dd4:	78c3      	ldrb	r3, [r0, #3]
 8004dd6:	7902      	ldrb	r2, [r0, #4]
 8004dd8:	9201      	str	r2, [sp, #4]
 8004dda:	9300      	str	r3, [sp, #0]
 8004ddc:	7883      	ldrb	r3, [r0, #2]
 8004dde:	7842      	ldrb	r2, [r0, #1]
 8004de0:	7801      	ldrb	r1, [r0, #0]
 8004de2:	4806      	ldr	r0, [pc, #24]	@ (8004dfc <CUSTOM_HID_OutEvent_FS+0x2c>)
 8004de4:	f000 fb1a 	bl	800541c <iprintf>
 8004de8:	200a      	movs	r0, #10
 8004dea:	f000 fb29 	bl	8005440 <putchar>
  case 1:
	  break;
  }

  /* Start next USB packet transfer once data processing is completed */
  USBD_CUSTOM_HID_ReceivePacket(&hUsbDeviceFS);
 8004dee:	4804      	ldr	r0, [pc, #16]	@ (8004e00 <CUSTOM_HID_OutEvent_FS+0x30>)
 8004df0:	f000 f962 	bl	80050b8 <USBD_CUSTOM_HID_ReceivePacket>

  return (USBD_OK);
  /* USER CODE END 6 */
}
 8004df4:	2000      	movs	r0, #0
 8004df6:	b003      	add	sp, #12
 8004df8:	f85d fb04 	ldr.w	pc, [sp], #4
 8004dfc:	080066b8 	.word	0x080066b8
 8004e00:	20004274 	.word	0x20004274

08004e04 <USBD_CUSTOM_HID_SendReport_FS>:
  * @param  len: The report length
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */

int8_t USBD_CUSTOM_HID_SendReport_FS(uint8_t *report, uint16_t len)
{
 8004e04:	b508      	push	{r3, lr}
 8004e06:	460a      	mov	r2, r1
  return USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS, report, len);
 8004e08:	4601      	mov	r1, r0
 8004e0a:	4802      	ldr	r0, [pc, #8]	@ (8004e14 <USBD_CUSTOM_HID_SendReport_FS+0x10>)
 8004e0c:	f000 f935 	bl	800507a <USBD_CUSTOM_HID_SendReport>
}
 8004e10:	b240      	sxtb	r0, r0
 8004e12:	bd08      	pop	{r3, pc}
 8004e14:	20004274 	.word	0x20004274

08004e18 <USBD_CUSTOM_HID_GetFSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetFSCfgDesc(uint16_t *length)
{
  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_CfgFSDesc);
 8004e18:	2329      	movs	r3, #41	@ 0x29
 8004e1a:	8003      	strh	r3, [r0, #0]

  return USBD_CUSTOM_HID_CfgFSDesc;
}
 8004e1c:	4800      	ldr	r0, [pc, #0]	@ (8004e20 <USBD_CUSTOM_HID_GetFSCfgDesc+0x8>)
 8004e1e:	4770      	bx	lr
 8004e20:	200000b4 	.word	0x200000b4

08004e24 <USBD_CUSTOM_HID_GetHSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetHSCfgDesc(uint16_t *length)
{
  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_CfgHSDesc);
 8004e24:	2329      	movs	r3, #41	@ 0x29
 8004e26:	8003      	strh	r3, [r0, #0]

  return USBD_CUSTOM_HID_CfgHSDesc;
}
 8004e28:	4800      	ldr	r0, [pc, #0]	@ (8004e2c <USBD_CUSTOM_HID_GetHSCfgDesc+0x8>)
 8004e2a:	4770      	bx	lr
 8004e2c:	20000088 	.word	0x20000088

08004e30 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_OtherSpeedCfgDesc);
 8004e30:	2329      	movs	r3, #41	@ 0x29
 8004e32:	8003      	strh	r3, [r0, #0]

  return USBD_CUSTOM_HID_OtherSpeedCfgDesc;
}
 8004e34:	4800      	ldr	r0, [pc, #0]	@ (8004e38 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x8>)
 8004e36:	4770      	bx	lr
 8004e38:	2000005c 	.word	0x2000005c

08004e3c <USBD_CUSTOM_HID_DataIn>:
{
  UNUSED(epnum);

  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData)->state = CUSTOM_HID_IDLE;
 8004e3c:	f8d0 32bc 	ldr.w	r3, [r0, #700]	@ 0x2bc
 8004e40:	2000      	movs	r0, #0
 8004e42:	f883 0050 	strb.w	r0, [r3, #80]	@ 0x50

  return (uint8_t)USBD_OK;
}
 8004e46:	4770      	bx	lr

08004e48 <USBD_CUSTOM_HID_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8004e48:	b508      	push	{r3, lr}
 8004e4a:	4603      	mov	r3, r0
  UNUSED(epnum);
  USBD_CUSTOM_HID_HandleTypeDef *hhid;

  if (pdev->pClassData == NULL)
 8004e4c:	f8d0 02bc 	ldr.w	r0, [r0, #700]	@ 0x2bc
 8004e50:	b128      	cbz	r0, 8004e5e <USBD_CUSTOM_HID_DataOut+0x16>

  hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData;

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application processing */
  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->OutEvent(hhid->Report_buf);
 8004e52:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8004e56:	68db      	ldr	r3, [r3, #12]
 8004e58:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8004e5a:	2000      	movs	r0, #0
}
 8004e5c:	bd08      	pop	{r3, pc}
    return (uint8_t)USBD_FAIL;
 8004e5e:	2003      	movs	r0, #3
 8004e60:	e7fc      	b.n	8004e5c <USBD_CUSTOM_HID_DataOut+0x14>

08004e62 <USBD_CUSTOM_HID_EP0_RxReady>:
  *         Handles control request data.
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8004e62:	b510      	push	{r4, lr}
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData;
 8004e64:	f8d0 42bc 	ldr.w	r4, [r0, #700]	@ 0x2bc

  if (hhid == NULL)
 8004e68:	b164      	cbz	r4, 8004e84 <USBD_CUSTOM_HID_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
  }

  if (hhid->IsReportAvailable == 1U)
 8004e6a:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8004e6c:	2b01      	cmp	r3, #1
 8004e6e:	d001      	beq.n	8004e74 <USBD_CUSTOM_HID_EP0_RxReady+0x12>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->OutEvent(hhid->Report_buf);
    hhid->IsReportAvailable = 0U;
  }

  return (uint8_t)USBD_OK;
 8004e70:	2000      	movs	r0, #0
}
 8004e72:	bd10      	pop	{r4, pc}
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->OutEvent(hhid->Report_buf);
 8004e74:	f8d0 32c0 	ldr.w	r3, [r0, #704]	@ 0x2c0
 8004e78:	68db      	ldr	r3, [r3, #12]
 8004e7a:	4620      	mov	r0, r4
 8004e7c:	4798      	blx	r3
    hhid->IsReportAvailable = 0U;
 8004e7e:	2000      	movs	r0, #0
 8004e80:	64e0      	str	r0, [r4, #76]	@ 0x4c
 8004e82:	e7f6      	b.n	8004e72 <USBD_CUSTOM_HID_EP0_RxReady+0x10>
    return (uint8_t)USBD_FAIL;
 8004e84:	2003      	movs	r0, #3
 8004e86:	e7f4      	b.n	8004e72 <USBD_CUSTOM_HID_EP0_RxReady+0x10>

08004e88 <USBD_CUSTOM_HID_GetDeviceQualifierDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetDeviceQualifierDesc(uint16_t *length)
{
  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_DeviceQualifierDesc);
 8004e88:	230a      	movs	r3, #10
 8004e8a:	8003      	strh	r3, [r0, #0]

  return USBD_CUSTOM_HID_DeviceQualifierDesc;
}
 8004e8c:	4800      	ldr	r0, [pc, #0]	@ (8004e90 <USBD_CUSTOM_HID_GetDeviceQualifierDesc+0x8>)
 8004e8e:	4770      	bx	lr
 8004e90:	20000044 	.word	0x20000044

08004e94 <USBD_CUSTOM_HID_Setup>:
{
 8004e94:	b530      	push	{r4, r5, lr}
 8004e96:	b083      	sub	sp, #12
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData;
 8004e98:	f8d0 32bc 	ldr.w	r3, [r0, #700]	@ 0x2bc
  uint16_t status_info = 0U;
 8004e9c:	2200      	movs	r2, #0
 8004e9e:	f8ad 2006 	strh.w	r2, [sp, #6]
  if (hhid == NULL)
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	f000 808e 	beq.w	8004fc4 <USBD_CUSTOM_HID_Setup+0x130>
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004ea8:	780c      	ldrb	r4, [r1, #0]
 8004eaa:	f014 0460 	ands.w	r4, r4, #96	@ 0x60
 8004eae:	d030      	beq.n	8004f12 <USBD_CUSTOM_HID_Setup+0x7e>
 8004eb0:	2c20      	cmp	r4, #32
 8004eb2:	f040 8081 	bne.w	8004fb8 <USBD_CUSTOM_HID_Setup+0x124>
      switch (req->bRequest)
 8004eb6:	784a      	ldrb	r2, [r1, #1]
 8004eb8:	3a02      	subs	r2, #2
 8004eba:	2a09      	cmp	r2, #9
 8004ebc:	d825      	bhi.n	8004f0a <USBD_CUSTOM_HID_Setup+0x76>
 8004ebe:	e8df f002 	tbb	[pc, r2]
 8004ec2:	0915      	.short	0x0915
 8004ec4:	24242424 	.word	0x24242424
 8004ec8:	05101c24 	.word	0x05101c24
          hhid->Protocol = (uint8_t)(req->wValue);
 8004ecc:	788a      	ldrb	r2, [r1, #2]
 8004ece:	641a      	str	r2, [r3, #64]	@ 0x40
  USBD_StatusTypeDef ret = USBD_OK;
 8004ed0:	2400      	movs	r4, #0
          break;
 8004ed2:	e074      	b.n	8004fbe <USBD_CUSTOM_HID_Setup+0x12a>
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->Protocol, 1U);
 8004ed4:	2201      	movs	r2, #1
 8004ed6:	f103 0140 	add.w	r1, r3, #64	@ 0x40
 8004eda:	f000 f99b 	bl	8005214 <USBD_CtlSendData>
  USBD_StatusTypeDef ret = USBD_OK;
 8004ede:	2400      	movs	r4, #0
          break;
 8004ee0:	e06d      	b.n	8004fbe <USBD_CUSTOM_HID_Setup+0x12a>
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 8004ee2:	884a      	ldrh	r2, [r1, #2]
 8004ee4:	0a12      	lsrs	r2, r2, #8
 8004ee6:	645a      	str	r2, [r3, #68]	@ 0x44
  USBD_StatusTypeDef ret = USBD_OK;
 8004ee8:	2400      	movs	r4, #0
          break;
 8004eea:	e068      	b.n	8004fbe <USBD_CUSTOM_HID_Setup+0x12a>
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->IdleState, 1U);
 8004eec:	2201      	movs	r2, #1
 8004eee:	f103 0144 	add.w	r1, r3, #68	@ 0x44
 8004ef2:	f000 f98f 	bl	8005214 <USBD_CtlSendData>
  USBD_StatusTypeDef ret = USBD_OK;
 8004ef6:	2400      	movs	r4, #0
          break;
 8004ef8:	e061      	b.n	8004fbe <USBD_CUSTOM_HID_Setup+0x12a>
          hhid->IsReportAvailable = 1U;
 8004efa:	2201      	movs	r2, #1
 8004efc:	64da      	str	r2, [r3, #76]	@ 0x4c
          (void)USBD_CtlPrepareRx(pdev, hhid->Report_buf, req->wLength);
 8004efe:	88ca      	ldrh	r2, [r1, #6]
 8004f00:	4619      	mov	r1, r3
 8004f02:	f000 f99c 	bl	800523e <USBD_CtlPrepareRx>
  USBD_StatusTypeDef ret = USBD_OK;
 8004f06:	2400      	movs	r4, #0
          break;
 8004f08:	e059      	b.n	8004fbe <USBD_CUSTOM_HID_Setup+0x12a>
          USBD_CtlError(pdev, req);
 8004f0a:	f7ff fc34 	bl	8004776 <USBD_CtlError>
          ret = USBD_FAIL;
 8004f0e:	2403      	movs	r4, #3
          break;
 8004f10:	e055      	b.n	8004fbe <USBD_CUSTOM_HID_Setup+0x12a>
      switch (req->bRequest)
 8004f12:	784d      	ldrb	r5, [r1, #1]
 8004f14:	2d0b      	cmp	r5, #11
 8004f16:	d84b      	bhi.n	8004fb0 <USBD_CUSTOM_HID_Setup+0x11c>
 8004f18:	e8df f005 	tbb	[pc, r5]
 8004f1c:	4a4a5106 	.word	0x4a4a5106
 8004f20:	4a164a4a 	.word	0x4a164a4a
 8004f24:	3e2f4a4a 	.word	0x3e2f4a4a
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004f28:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 8004f2c:	b2db      	uxtb	r3, r3
 8004f2e:	2b03      	cmp	r3, #3
 8004f30:	d003      	beq.n	8004f3a <USBD_CUSTOM_HID_Setup+0xa6>
            USBD_CtlError(pdev, req);
 8004f32:	f7ff fc20 	bl	8004776 <USBD_CtlError>
            ret = USBD_FAIL;
 8004f36:	2403      	movs	r4, #3
 8004f38:	e041      	b.n	8004fbe <USBD_CUSTOM_HID_Setup+0x12a>
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8004f3a:	2202      	movs	r2, #2
 8004f3c:	f10d 0106 	add.w	r1, sp, #6
 8004f40:	f000 f968 	bl	8005214 <USBD_CtlSendData>
  USBD_StatusTypeDef ret = USBD_OK;
 8004f44:	462c      	mov	r4, r5
 8004f46:	e03a      	b.n	8004fbe <USBD_CUSTOM_HID_Setup+0x12a>
          if ((req->wValue >> 8) == CUSTOM_HID_REPORT_DESC)
 8004f48:	884b      	ldrh	r3, [r1, #2]
 8004f4a:	0a1b      	lsrs	r3, r3, #8
 8004f4c:	2b22      	cmp	r3, #34	@ 0x22
 8004f4e:	d006      	beq.n	8004f5e <USBD_CUSTOM_HID_Setup+0xca>
            if ((req->wValue >> 8) == CUSTOM_HID_DESCRIPTOR_TYPE)
 8004f50:	2b21      	cmp	r3, #33	@ 0x21
 8004f52:	d00c      	beq.n	8004f6e <USBD_CUSTOM_HID_Setup+0xda>
  uint8_t  *pbuf = NULL;
 8004f54:	2100      	movs	r1, #0
  uint16_t len = 0U;
 8004f56:	460a      	mov	r2, r1
          (void)USBD_CtlSendData(pdev, pbuf, len);
 8004f58:	f000 f95c 	bl	8005214 <USBD_CtlSendData>
          break;
 8004f5c:	e02f      	b.n	8004fbe <USBD_CUSTOM_HID_Setup+0x12a>
            len = MIN(USBD_CUSTOM_HID_REPORT_DESC_SIZE, req->wLength);
 8004f5e:	88ca      	ldrh	r2, [r1, #6]
 8004f60:	2a21      	cmp	r2, #33	@ 0x21
 8004f62:	bf28      	it	cs
 8004f64:	2221      	movcs	r2, #33	@ 0x21
            pbuf = ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->pReport;
 8004f66:	f8d0 32c0 	ldr.w	r3, [r0, #704]	@ 0x2c0
 8004f6a:	6819      	ldr	r1, [r3, #0]
 8004f6c:	e7f4      	b.n	8004f58 <USBD_CUSTOM_HID_Setup+0xc4>
              len = MIN(USB_CUSTOM_HID_DESC_SIZ, req->wLength);
 8004f6e:	88ca      	ldrh	r2, [r1, #6]
 8004f70:	2a09      	cmp	r2, #9
 8004f72:	bf28      	it	cs
 8004f74:	2209      	movcs	r2, #9
              pbuf = USBD_CUSTOM_HID_Desc;
 8004f76:	4914      	ldr	r1, [pc, #80]	@ (8004fc8 <USBD_CUSTOM_HID_Setup+0x134>)
 8004f78:	e7ee      	b.n	8004f58 <USBD_CUSTOM_HID_Setup+0xc4>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004f7a:	f890 229c 	ldrb.w	r2, [r0, #668]	@ 0x29c
 8004f7e:	b2d2      	uxtb	r2, r2
 8004f80:	2a03      	cmp	r2, #3
 8004f82:	d003      	beq.n	8004f8c <USBD_CUSTOM_HID_Setup+0xf8>
            USBD_CtlError(pdev, req);
 8004f84:	f7ff fbf7 	bl	8004776 <USBD_CtlError>
            ret = USBD_FAIL;
 8004f88:	2403      	movs	r4, #3
 8004f8a:	e018      	b.n	8004fbe <USBD_CUSTOM_HID_Setup+0x12a>
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->AltSetting, 1U);
 8004f8c:	2201      	movs	r2, #1
 8004f8e:	f103 0148 	add.w	r1, r3, #72	@ 0x48
 8004f92:	f000 f93f 	bl	8005214 <USBD_CtlSendData>
 8004f96:	e012      	b.n	8004fbe <USBD_CUSTOM_HID_Setup+0x12a>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004f98:	f890 229c 	ldrb.w	r2, [r0, #668]	@ 0x29c
 8004f9c:	b2d2      	uxtb	r2, r2
 8004f9e:	2a03      	cmp	r2, #3
 8004fa0:	d102      	bne.n	8004fa8 <USBD_CUSTOM_HID_Setup+0x114>
            hhid->AltSetting = (uint8_t)(req->wValue);
 8004fa2:	788a      	ldrb	r2, [r1, #2]
 8004fa4:	649a      	str	r2, [r3, #72]	@ 0x48
 8004fa6:	e00a      	b.n	8004fbe <USBD_CUSTOM_HID_Setup+0x12a>
            USBD_CtlError(pdev, req);
 8004fa8:	f7ff fbe5 	bl	8004776 <USBD_CtlError>
            ret = USBD_FAIL;
 8004fac:	2403      	movs	r4, #3
 8004fae:	e006      	b.n	8004fbe <USBD_CUSTOM_HID_Setup+0x12a>
          USBD_CtlError(pdev, req);
 8004fb0:	f7ff fbe1 	bl	8004776 <USBD_CtlError>
          ret = USBD_FAIL;
 8004fb4:	2403      	movs	r4, #3
          break;
 8004fb6:	e002      	b.n	8004fbe <USBD_CUSTOM_HID_Setup+0x12a>
      USBD_CtlError(pdev, req);
 8004fb8:	f7ff fbdd 	bl	8004776 <USBD_CtlError>
      ret = USBD_FAIL;
 8004fbc:	2403      	movs	r4, #3
}
 8004fbe:	4620      	mov	r0, r4
 8004fc0:	b003      	add	sp, #12
 8004fc2:	bd30      	pop	{r4, r5, pc}
    return (uint8_t)USBD_FAIL;
 8004fc4:	2403      	movs	r4, #3
 8004fc6:	e7fa      	b.n	8004fbe <USBD_CUSTOM_HID_Setup+0x12a>
 8004fc8:	20000050 	.word	0x20000050

08004fcc <USBD_CUSTOM_HID_DeInit>:
{
 8004fcc:	b538      	push	{r3, r4, r5, lr}
 8004fce:	4604      	mov	r4, r0
  (void)USBD_LL_CloseEP(pdev, CUSTOM_HID_EPIN_ADDR);
 8004fd0:	2181      	movs	r1, #129	@ 0x81
 8004fd2:	f7ff f9c3 	bl	800435c <USBD_LL_CloseEP>
  pdev->ep_in[CUSTOM_HID_EPIN_ADDR & 0xFU].is_used = 0U;
 8004fd6:	2500      	movs	r5, #0
 8004fd8:	8725      	strh	r5, [r4, #56]	@ 0x38
  pdev->ep_in[CUSTOM_HID_EPIN_ADDR & 0xFU].bInterval = 0U;
 8004fda:	8765      	strh	r5, [r4, #58]	@ 0x3a
  (void)USBD_LL_CloseEP(pdev, CUSTOM_HID_EPOUT_ADDR);
 8004fdc:	2101      	movs	r1, #1
 8004fde:	4620      	mov	r0, r4
 8004fe0:	f7ff f9bc 	bl	800435c <USBD_LL_CloseEP>
  pdev->ep_out[CUSTOM_HID_EPOUT_ADDR & 0xFU].is_used = 0U;
 8004fe4:	f8a4 5178 	strh.w	r5, [r4, #376]	@ 0x178
  pdev->ep_out[CUSTOM_HID_EPOUT_ADDR & 0xFU].bInterval = 0U;
 8004fe8:	f8a4 517a 	strh.w	r5, [r4, #378]	@ 0x17a
  if (pdev->pClassData != NULL)
 8004fec:	f8d4 32bc 	ldr.w	r3, [r4, #700]	@ 0x2bc
 8004ff0:	b14b      	cbz	r3, 8005006 <USBD_CUSTOM_HID_DeInit+0x3a>
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->DeInit();
 8004ff2:	f8d4 32c0 	ldr.w	r3, [r4, #704]	@ 0x2c0
 8004ff6:	689b      	ldr	r3, [r3, #8]
 8004ff8:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8004ffa:	f8d4 02bc 	ldr.w	r0, [r4, #700]	@ 0x2bc
 8004ffe:	f7ff f98f 	bl	8004320 <USBD_static_free>
    pdev->pClassData = NULL;
 8005002:	f8c4 52bc 	str.w	r5, [r4, #700]	@ 0x2bc
}
 8005006:	2000      	movs	r0, #0
 8005008:	bd38      	pop	{r3, r4, r5, pc}

0800500a <USBD_CUSTOM_HID_Init>:
{
 800500a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800500c:	4604      	mov	r4, r0
  hhid = USBD_malloc(sizeof(USBD_CUSTOM_HID_HandleTypeDef));
 800500e:	2054      	movs	r0, #84	@ 0x54
 8005010:	f7ff f982 	bl	8004318 <USBD_static_malloc>
  if (hhid == NULL)
 8005014:	b338      	cbz	r0, 8005066 <USBD_CUSTOM_HID_Init+0x5c>
 8005016:	4607      	mov	r7, r0
  pdev->pClassData = (void *)hhid;
 8005018:	f8c4 02bc 	str.w	r0, [r4, #700]	@ 0x2bc
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800501c:	7c23      	ldrb	r3, [r4, #16]
 800501e:	bb3b      	cbnz	r3, 8005070 <USBD_CUSTOM_HID_Init+0x66>
    pdev->ep_in[CUSTOM_HID_EPIN_ADDR & 0xFU].bInterval = CUSTOM_HID_HS_BINTERVAL;
 8005020:	2305      	movs	r3, #5
 8005022:	8763      	strh	r3, [r4, #58]	@ 0x3a
    pdev->ep_out[CUSTOM_HID_EPOUT_ADDR & 0xFU].bInterval = CUSTOM_HID_HS_BINTERVAL;
 8005024:	f8a4 317a 	strh.w	r3, [r4, #378]	@ 0x17a
  (void)USBD_LL_OpenEP(pdev, CUSTOM_HID_EPIN_ADDR, USBD_EP_TYPE_INTR,
 8005028:	2340      	movs	r3, #64	@ 0x40
 800502a:	2203      	movs	r2, #3
 800502c:	2181      	movs	r1, #129	@ 0x81
 800502e:	4620      	mov	r0, r4
 8005030:	f7ff f989 	bl	8004346 <USBD_LL_OpenEP>
  pdev->ep_in[CUSTOM_HID_EPIN_ADDR & 0xFU].is_used = 1U;
 8005034:	2601      	movs	r6, #1
 8005036:	8726      	strh	r6, [r4, #56]	@ 0x38
  (void)USBD_LL_OpenEP(pdev, CUSTOM_HID_EPOUT_ADDR, USBD_EP_TYPE_INTR,
 8005038:	2340      	movs	r3, #64	@ 0x40
 800503a:	2203      	movs	r2, #3
 800503c:	4631      	mov	r1, r6
 800503e:	4620      	mov	r0, r4
 8005040:	f7ff f981 	bl	8004346 <USBD_LL_OpenEP>
  pdev->ep_out[CUSTOM_HID_EPOUT_ADDR & 0xFU].is_used = 1U;
 8005044:	f8a4 6178 	strh.w	r6, [r4, #376]	@ 0x178
  hhid->state = CUSTOM_HID_IDLE;
 8005048:	2500      	movs	r5, #0
 800504a:	f887 5050 	strb.w	r5, [r7, #80]	@ 0x50
  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->Init();
 800504e:	f8d4 32c0 	ldr.w	r3, [r4, #704]	@ 0x2c0
 8005052:	685b      	ldr	r3, [r3, #4]
 8005054:	4798      	blx	r3
  (void)USBD_LL_PrepareReceive(pdev, CUSTOM_HID_EPOUT_ADDR, hhid->Report_buf,
 8005056:	2340      	movs	r3, #64	@ 0x40
 8005058:	463a      	mov	r2, r7
 800505a:	4631      	mov	r1, r6
 800505c:	4620      	mov	r0, r4
 800505e:	f7ff f9a5 	bl	80043ac <USBD_LL_PrepareReceive>
  return (uint8_t)USBD_OK;
 8005062:	4628      	mov	r0, r5
}
 8005064:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    pdev->pClassData = NULL;
 8005066:	2300      	movs	r3, #0
 8005068:	f8c4 32bc 	str.w	r3, [r4, #700]	@ 0x2bc
    return (uint8_t)USBD_EMEM;
 800506c:	2002      	movs	r0, #2
 800506e:	e7f9      	b.n	8005064 <USBD_CUSTOM_HID_Init+0x5a>
    pdev->ep_in[CUSTOM_HID_EPIN_ADDR & 0xFU].bInterval = CUSTOM_HID_FS_BINTERVAL;
 8005070:	2301      	movs	r3, #1
 8005072:	8763      	strh	r3, [r4, #58]	@ 0x3a
    pdev->ep_out[CUSTOM_HID_EPOUT_ADDR & 0xFU].bInterval = CUSTOM_HID_FS_BINTERVAL;
 8005074:	f8a4 317a 	strh.w	r3, [r4, #378]	@ 0x17a
 8005078:	e7d6      	b.n	8005028 <USBD_CUSTOM_HID_Init+0x1e>

0800507a <USBD_CUSTOM_HID_SendReport>:
{
 800507a:	b510      	push	{r4, lr}
  if (pdev->pClassData == NULL)
 800507c:	f8d0 32bc 	ldr.w	r3, [r0, #700]	@ 0x2bc
 8005080:	b1c3      	cbz	r3, 80050b4 <USBD_CUSTOM_HID_SendReport+0x3a>
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005082:	f890 c29c 	ldrb.w	ip, [r0, #668]	@ 0x29c
 8005086:	fa5f fc8c 	uxtb.w	ip, ip
 800508a:	f1bc 0f03 	cmp.w	ip, #3
 800508e:	d002      	beq.n	8005096 <USBD_CUSTOM_HID_SendReport+0x1c>
  return (uint8_t)USBD_OK;
 8005090:	2400      	movs	r4, #0
}
 8005092:	4620      	mov	r0, r4
 8005094:	bd10      	pop	{r4, pc}
    if (hhid->state == CUSTOM_HID_IDLE)
 8005096:	f893 4050 	ldrb.w	r4, [r3, #80]	@ 0x50
 800509a:	b10c      	cbz	r4, 80050a0 <USBD_CUSTOM_HID_SendReport+0x26>
      return (uint8_t)USBD_BUSY;
 800509c:	2401      	movs	r4, #1
 800509e:	e7f8      	b.n	8005092 <USBD_CUSTOM_HID_SendReport+0x18>
      hhid->state = CUSTOM_HID_BUSY;
 80050a0:	f04f 0c01 	mov.w	ip, #1
 80050a4:	f883 c050 	strb.w	ip, [r3, #80]	@ 0x50
      (void)USBD_LL_Transmit(pdev, CUSTOM_HID_EPIN_ADDR, report, len);
 80050a8:	4613      	mov	r3, r2
 80050aa:	460a      	mov	r2, r1
 80050ac:	2181      	movs	r1, #129	@ 0x81
 80050ae:	f7ff f975 	bl	800439c <USBD_LL_Transmit>
 80050b2:	e7ee      	b.n	8005092 <USBD_CUSTOM_HID_SendReport+0x18>
    return (uint8_t)USBD_FAIL;
 80050b4:	2403      	movs	r4, #3
 80050b6:	e7ec      	b.n	8005092 <USBD_CUSTOM_HID_SendReport+0x18>

080050b8 <USBD_CUSTOM_HID_ReceivePacket>:
  if (pdev->pClassData == NULL)
 80050b8:	f8d0 22bc 	ldr.w	r2, [r0, #700]	@ 0x2bc
 80050bc:	b132      	cbz	r2, 80050cc <USBD_CUSTOM_HID_ReceivePacket+0x14>
{
 80050be:	b508      	push	{r3, lr}
  (void)USBD_LL_PrepareReceive(pdev, CUSTOM_HID_EPOUT_ADDR, hhid->Report_buf,
 80050c0:	2340      	movs	r3, #64	@ 0x40
 80050c2:	2101      	movs	r1, #1
 80050c4:	f7ff f972 	bl	80043ac <USBD_LL_PrepareReceive>
  return (uint8_t)USBD_OK;
 80050c8:	2000      	movs	r0, #0
}
 80050ca:	bd08      	pop	{r3, pc}
    return (uint8_t)USBD_FAIL;
 80050cc:	2003      	movs	r0, #3
}
 80050ce:	4770      	bx	lr

080050d0 <USBD_CUSTOM_HID_RegisterInterface>:
  * @retval status
  */
uint8_t USBD_CUSTOM_HID_RegisterInterface(USBD_HandleTypeDef *pdev,
                                          USBD_CUSTOM_HID_ItfTypeDef *fops)
{
  if (fops == NULL)
 80050d0:	b119      	cbz	r1, 80050da <USBD_CUSTOM_HID_RegisterInterface+0xa>
  {
    return (uint8_t)USBD_FAIL;
  }

  pdev->pUserData = fops;
 80050d2:	f8c0 12c0 	str.w	r1, [r0, #704]	@ 0x2c0

  return (uint8_t)USBD_OK;
 80050d6:	2000      	movs	r0, #0
 80050d8:	4770      	bx	lr
    return (uint8_t)USBD_FAIL;
 80050da:	2003      	movs	r0, #3
}
 80050dc:	4770      	bx	lr
	...

080050e0 <USBD_FS_DeviceDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80050e0:	2312      	movs	r3, #18
 80050e2:	800b      	strh	r3, [r1, #0]
  return USBD_FS_DeviceDesc;
}
 80050e4:	4800      	ldr	r0, [pc, #0]	@ (80050e8 <USBD_FS_DeviceDescriptor+0x8>)
 80050e6:	4770      	bx	lr
 80050e8:	20000138 	.word	0x20000138

080050ec <USBD_FS_LangIDStrDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80050ec:	2304      	movs	r3, #4
 80050ee:	800b      	strh	r3, [r1, #0]
  return USBD_LangIDDesc;
}
 80050f0:	4800      	ldr	r0, [pc, #0]	@ (80050f4 <USBD_FS_LangIDStrDescriptor+0x8>)
 80050f2:	4770      	bx	lr
 80050f4:	20000134 	.word	0x20000134

080050f8 <IntToUnicode>:
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
  uint8_t idx = 0;

  for (idx = 0; idx < len; idx++)
 80050f8:	2300      	movs	r3, #0
 80050fa:	4293      	cmp	r3, r2
 80050fc:	d21e      	bcs.n	800513c <IntToUnicode+0x44>
{
 80050fe:	b500      	push	{lr}
 8005100:	e010      	b.n	8005124 <IntToUnicode+0x2c>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8005102:	f10c 0c37 	add.w	ip, ip, #55	@ 0x37
 8005106:	f801 c013 	strb.w	ip, [r1, r3, lsl #1]
    }

    value = value << 4;
 800510a:	0100      	lsls	r0, r0, #4

    pbuf[2 * idx + 1] = 0;
 800510c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8005110:	f10c 0c01 	add.w	ip, ip, #1
 8005114:	f04f 0e00 	mov.w	lr, #0
 8005118:	f801 e00c 	strb.w	lr, [r1, ip]
  for (idx = 0; idx < len; idx++)
 800511c:	3301      	adds	r3, #1
 800511e:	b2db      	uxtb	r3, r3
 8005120:	4293      	cmp	r3, r2
 8005122:	d209      	bcs.n	8005138 <IntToUnicode+0x40>
    if (((value >> 28)) < 0xA)
 8005124:	ea4f 7c10 	mov.w	ip, r0, lsr #28
 8005128:	f1b0 4f20 	cmp.w	r0, #2684354560	@ 0xa0000000
 800512c:	d2e9      	bcs.n	8005102 <IntToUnicode+0xa>
      pbuf[2 * idx] = (value >> 28) + '0';
 800512e:	f10c 0c30 	add.w	ip, ip, #48	@ 0x30
 8005132:	f801 c013 	strb.w	ip, [r1, r3, lsl #1]
 8005136:	e7e8      	b.n	800510a <IntToUnicode+0x12>
  }
}
 8005138:	f85d fb04 	ldr.w	pc, [sp], #4
 800513c:	4770      	bx	lr
	...

08005140 <Get_SerialNum>:
{
 8005140:	b538      	push	{r3, r4, r5, lr}
  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8005142:	4b0b      	ldr	r3, [pc, #44]	@ (8005170 <Get_SerialNum+0x30>)
 8005144:	f8d3 0a10 	ldr.w	r0, [r3, #2576]	@ 0xa10
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8005148:	f8d3 4a14 	ldr.w	r4, [r3, #2580]	@ 0xa14
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800514c:	f8d3 3a18 	ldr.w	r3, [r3, #2584]	@ 0xa18
  if (deviceserial0 != 0)
 8005150:	18c0      	adds	r0, r0, r3
 8005152:	d100      	bne.n	8005156 <Get_SerialNum+0x16>
}
 8005154:	bd38      	pop	{r3, r4, r5, pc}
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8005156:	4d07      	ldr	r5, [pc, #28]	@ (8005174 <Get_SerialNum+0x34>)
 8005158:	2208      	movs	r2, #8
 800515a:	4629      	mov	r1, r5
 800515c:	f7ff ffcc 	bl	80050f8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8005160:	2204      	movs	r2, #4
 8005162:	f105 0110 	add.w	r1, r5, #16
 8005166:	4620      	mov	r0, r4
 8005168:	f7ff ffc6 	bl	80050f8 <IntToUnicode>
}
 800516c:	e7f2      	b.n	8005154 <Get_SerialNum+0x14>
 800516e:	bf00      	nop
 8005170:	1fff7000 	.word	0x1fff7000
 8005174:	2000011a 	.word	0x2000011a

08005178 <USBD_FS_SerialStrDescriptor>:
{
 8005178:	b508      	push	{r3, lr}
  *length = USB_SIZ_STRING_SERIAL;
 800517a:	231a      	movs	r3, #26
 800517c:	800b      	strh	r3, [r1, #0]
  Get_SerialNum();
 800517e:	f7ff ffdf 	bl	8005140 <Get_SerialNum>
}
 8005182:	4801      	ldr	r0, [pc, #4]	@ (8005188 <USBD_FS_SerialStrDescriptor+0x10>)
 8005184:	bd08      	pop	{r3, pc}
 8005186:	bf00      	nop
 8005188:	20000118 	.word	0x20000118

0800518c <USBD_FS_ProductStrDescriptor>:
{
 800518c:	b508      	push	{r3, lr}
 800518e:	460a      	mov	r2, r1
  if(speed == 0)
 8005190:	b928      	cbnz	r0, 800519e <USBD_FS_ProductStrDescriptor+0x12>
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8005192:	4905      	ldr	r1, [pc, #20]	@ (80051a8 <USBD_FS_ProductStrDescriptor+0x1c>)
 8005194:	4805      	ldr	r0, [pc, #20]	@ (80051ac <USBD_FS_ProductStrDescriptor+0x20>)
 8005196:	f7ff fdfa 	bl	8004d8e <USBD_GetString>
}
 800519a:	4803      	ldr	r0, [pc, #12]	@ (80051a8 <USBD_FS_ProductStrDescriptor+0x1c>)
 800519c:	bd08      	pop	{r3, pc}
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800519e:	4902      	ldr	r1, [pc, #8]	@ (80051a8 <USBD_FS_ProductStrDescriptor+0x1c>)
 80051a0:	4802      	ldr	r0, [pc, #8]	@ (80051ac <USBD_FS_ProductStrDescriptor+0x20>)
 80051a2:	f7ff fdf4 	bl	8004d8e <USBD_GetString>
 80051a6:	e7f8      	b.n	800519a <USBD_FS_ProductStrDescriptor+0xe>
 80051a8:	20004a84 	.word	0x20004a84
 80051ac:	080066d4 	.word	0x080066d4

080051b0 <USBD_FS_ManufacturerStrDescriptor>:
{
 80051b0:	b510      	push	{r4, lr}
 80051b2:	460a      	mov	r2, r1
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80051b4:	4c03      	ldr	r4, [pc, #12]	@ (80051c4 <USBD_FS_ManufacturerStrDescriptor+0x14>)
 80051b6:	4621      	mov	r1, r4
 80051b8:	4803      	ldr	r0, [pc, #12]	@ (80051c8 <USBD_FS_ManufacturerStrDescriptor+0x18>)
 80051ba:	f7ff fde8 	bl	8004d8e <USBD_GetString>
}
 80051be:	4620      	mov	r0, r4
 80051c0:	bd10      	pop	{r4, pc}
 80051c2:	bf00      	nop
 80051c4:	20004a84 	.word	0x20004a84
 80051c8:	080066e4 	.word	0x080066e4

080051cc <USBD_FS_ConfigStrDescriptor>:
{
 80051cc:	b508      	push	{r3, lr}
 80051ce:	460a      	mov	r2, r1
  if(speed == USBD_SPEED_HIGH)
 80051d0:	b928      	cbnz	r0, 80051de <USBD_FS_ConfigStrDescriptor+0x12>
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80051d2:	4905      	ldr	r1, [pc, #20]	@ (80051e8 <USBD_FS_ConfigStrDescriptor+0x1c>)
 80051d4:	4805      	ldr	r0, [pc, #20]	@ (80051ec <USBD_FS_ConfigStrDescriptor+0x20>)
 80051d6:	f7ff fdda 	bl	8004d8e <USBD_GetString>
}
 80051da:	4803      	ldr	r0, [pc, #12]	@ (80051e8 <USBD_FS_ConfigStrDescriptor+0x1c>)
 80051dc:	bd08      	pop	{r3, pc}
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80051de:	4902      	ldr	r1, [pc, #8]	@ (80051e8 <USBD_FS_ConfigStrDescriptor+0x1c>)
 80051e0:	4802      	ldr	r0, [pc, #8]	@ (80051ec <USBD_FS_ConfigStrDescriptor+0x20>)
 80051e2:	f7ff fdd4 	bl	8004d8e <USBD_GetString>
 80051e6:	e7f8      	b.n	80051da <USBD_FS_ConfigStrDescriptor+0xe>
 80051e8:	20004a84 	.word	0x20004a84
 80051ec:	080066ec 	.word	0x080066ec

080051f0 <USBD_FS_InterfaceStrDescriptor>:
{
 80051f0:	b508      	push	{r3, lr}
 80051f2:	460a      	mov	r2, r1
  if(speed == 0)
 80051f4:	b928      	cbnz	r0, 8005202 <USBD_FS_InterfaceStrDescriptor+0x12>
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80051f6:	4905      	ldr	r1, [pc, #20]	@ (800520c <USBD_FS_InterfaceStrDescriptor+0x1c>)
 80051f8:	4805      	ldr	r0, [pc, #20]	@ (8005210 <USBD_FS_InterfaceStrDescriptor+0x20>)
 80051fa:	f7ff fdc8 	bl	8004d8e <USBD_GetString>
}
 80051fe:	4803      	ldr	r0, [pc, #12]	@ (800520c <USBD_FS_InterfaceStrDescriptor+0x1c>)
 8005200:	bd08      	pop	{r3, pc}
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8005202:	4902      	ldr	r1, [pc, #8]	@ (800520c <USBD_FS_InterfaceStrDescriptor+0x1c>)
 8005204:	4802      	ldr	r0, [pc, #8]	@ (8005210 <USBD_FS_InterfaceStrDescriptor+0x20>)
 8005206:	f7ff fdc2 	bl	8004d8e <USBD_GetString>
 800520a:	e7f8      	b.n	80051fe <USBD_FS_InterfaceStrDescriptor+0xe>
 800520c:	20004a84 	.word	0x20004a84
 8005210:	08006700 	.word	0x08006700

08005214 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8005214:	b508      	push	{r3, lr}
 8005216:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8005218:	2202      	movs	r2, #2
 800521a:	f8c0 2294 	str.w	r2, [r0, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800521e:	6183      	str	r3, [r0, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8005220:	61c3      	str	r3, [r0, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8005222:	460a      	mov	r2, r1
 8005224:	2100      	movs	r1, #0
 8005226:	f7ff f8b9 	bl	800439c <USBD_LL_Transmit>

  return USBD_OK;
}
 800522a:	2000      	movs	r0, #0
 800522c:	bd08      	pop	{r3, pc}

0800522e <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800522e:	b508      	push	{r3, lr}
 8005230:	4613      	mov	r3, r2
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8005232:	460a      	mov	r2, r1
 8005234:	2100      	movs	r1, #0
 8005236:	f7ff f8b1 	bl	800439c <USBD_LL_Transmit>

  return USBD_OK;
}
 800523a:	2000      	movs	r0, #0
 800523c:	bd08      	pop	{r3, pc}

0800523e <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800523e:	b508      	push	{r3, lr}
 8005240:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8005242:	2203      	movs	r2, #3
 8005244:	f8c0 2294 	str.w	r2, [r0, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 8005248:	f8c0 3158 	str.w	r3, [r0, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800524c:	f8c0 315c 	str.w	r3, [r0, #348]	@ 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8005250:	460a      	mov	r2, r1
 8005252:	2100      	movs	r1, #0
 8005254:	f7ff f8aa 	bl	80043ac <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8005258:	2000      	movs	r0, #0
 800525a:	bd08      	pop	{r3, pc}

0800525c <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800525c:	b508      	push	{r3, lr}
 800525e:	4613      	mov	r3, r2
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8005260:	460a      	mov	r2, r1
 8005262:	2100      	movs	r1, #0
 8005264:	f7ff f8a2 	bl	80043ac <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8005268:	2000      	movs	r0, #0
 800526a:	bd08      	pop	{r3, pc}

0800526c <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800526c:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800526e:	2204      	movs	r2, #4
 8005270:	f8c0 2294 	str.w	r2, [r0, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8005274:	2300      	movs	r3, #0
 8005276:	461a      	mov	r2, r3
 8005278:	4619      	mov	r1, r3
 800527a:	f7ff f88f 	bl	800439c <USBD_LL_Transmit>

  return USBD_OK;
}
 800527e:	2000      	movs	r0, #0
 8005280:	bd08      	pop	{r3, pc}

08005282 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8005282:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8005284:	2205      	movs	r2, #5
 8005286:	f8c0 2294 	str.w	r2, [r0, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800528a:	2300      	movs	r3, #0
 800528c:	461a      	mov	r2, r3
 800528e:	4619      	mov	r1, r3
 8005290:	f7ff f88c 	bl	80043ac <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8005294:	2000      	movs	r0, #0
 8005296:	bd08      	pop	{r3, pc}

08005298 <std>:
 8005298:	2300      	movs	r3, #0
 800529a:	b510      	push	{r4, lr}
 800529c:	4604      	mov	r4, r0
 800529e:	e9c0 3300 	strd	r3, r3, [r0]
 80052a2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80052a6:	6083      	str	r3, [r0, #8]
 80052a8:	8181      	strh	r1, [r0, #12]
 80052aa:	6643      	str	r3, [r0, #100]	@ 0x64
 80052ac:	81c2      	strh	r2, [r0, #14]
 80052ae:	6183      	str	r3, [r0, #24]
 80052b0:	4619      	mov	r1, r3
 80052b2:	2208      	movs	r2, #8
 80052b4:	305c      	adds	r0, #92	@ 0x5c
 80052b6:	f000 f92e 	bl	8005516 <memset>
 80052ba:	4b0d      	ldr	r3, [pc, #52]	@ (80052f0 <std+0x58>)
 80052bc:	6263      	str	r3, [r4, #36]	@ 0x24
 80052be:	4b0d      	ldr	r3, [pc, #52]	@ (80052f4 <std+0x5c>)
 80052c0:	62a3      	str	r3, [r4, #40]	@ 0x28
 80052c2:	4b0d      	ldr	r3, [pc, #52]	@ (80052f8 <std+0x60>)
 80052c4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80052c6:	4b0d      	ldr	r3, [pc, #52]	@ (80052fc <std+0x64>)
 80052c8:	6323      	str	r3, [r4, #48]	@ 0x30
 80052ca:	4b0d      	ldr	r3, [pc, #52]	@ (8005300 <std+0x68>)
 80052cc:	6224      	str	r4, [r4, #32]
 80052ce:	429c      	cmp	r4, r3
 80052d0:	d006      	beq.n	80052e0 <std+0x48>
 80052d2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80052d6:	4294      	cmp	r4, r2
 80052d8:	d002      	beq.n	80052e0 <std+0x48>
 80052da:	33d0      	adds	r3, #208	@ 0xd0
 80052dc:	429c      	cmp	r4, r3
 80052de:	d105      	bne.n	80052ec <std+0x54>
 80052e0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80052e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80052e8:	f000 b9e4 	b.w	80056b4 <__retarget_lock_init_recursive>
 80052ec:	bd10      	pop	{r4, pc}
 80052ee:	bf00      	nop
 80052f0:	08005491 	.word	0x08005491
 80052f4:	080054b3 	.word	0x080054b3
 80052f8:	080054eb 	.word	0x080054eb
 80052fc:	0800550f 	.word	0x0800550f
 8005300:	20004c84 	.word	0x20004c84

08005304 <stdio_exit_handler>:
 8005304:	4a02      	ldr	r2, [pc, #8]	@ (8005310 <stdio_exit_handler+0xc>)
 8005306:	4903      	ldr	r1, [pc, #12]	@ (8005314 <stdio_exit_handler+0x10>)
 8005308:	4803      	ldr	r0, [pc, #12]	@ (8005318 <stdio_exit_handler+0x14>)
 800530a:	f000 b869 	b.w	80053e0 <_fwalk_sglue>
 800530e:	bf00      	nop
 8005310:	20000168 	.word	0x20000168
 8005314:	08006221 	.word	0x08006221
 8005318:	20000178 	.word	0x20000178

0800531c <cleanup_stdio>:
 800531c:	6841      	ldr	r1, [r0, #4]
 800531e:	4b0c      	ldr	r3, [pc, #48]	@ (8005350 <cleanup_stdio+0x34>)
 8005320:	4299      	cmp	r1, r3
 8005322:	b510      	push	{r4, lr}
 8005324:	4604      	mov	r4, r0
 8005326:	d001      	beq.n	800532c <cleanup_stdio+0x10>
 8005328:	f000 ff7a 	bl	8006220 <_fflush_r>
 800532c:	68a1      	ldr	r1, [r4, #8]
 800532e:	4b09      	ldr	r3, [pc, #36]	@ (8005354 <cleanup_stdio+0x38>)
 8005330:	4299      	cmp	r1, r3
 8005332:	d002      	beq.n	800533a <cleanup_stdio+0x1e>
 8005334:	4620      	mov	r0, r4
 8005336:	f000 ff73 	bl	8006220 <_fflush_r>
 800533a:	68e1      	ldr	r1, [r4, #12]
 800533c:	4b06      	ldr	r3, [pc, #24]	@ (8005358 <cleanup_stdio+0x3c>)
 800533e:	4299      	cmp	r1, r3
 8005340:	d004      	beq.n	800534c <cleanup_stdio+0x30>
 8005342:	4620      	mov	r0, r4
 8005344:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005348:	f000 bf6a 	b.w	8006220 <_fflush_r>
 800534c:	bd10      	pop	{r4, pc}
 800534e:	bf00      	nop
 8005350:	20004c84 	.word	0x20004c84
 8005354:	20004cec 	.word	0x20004cec
 8005358:	20004d54 	.word	0x20004d54

0800535c <global_stdio_init.part.0>:
 800535c:	b510      	push	{r4, lr}
 800535e:	4b0b      	ldr	r3, [pc, #44]	@ (800538c <global_stdio_init.part.0+0x30>)
 8005360:	4c0b      	ldr	r4, [pc, #44]	@ (8005390 <global_stdio_init.part.0+0x34>)
 8005362:	4a0c      	ldr	r2, [pc, #48]	@ (8005394 <global_stdio_init.part.0+0x38>)
 8005364:	601a      	str	r2, [r3, #0]
 8005366:	4620      	mov	r0, r4
 8005368:	2200      	movs	r2, #0
 800536a:	2104      	movs	r1, #4
 800536c:	f7ff ff94 	bl	8005298 <std>
 8005370:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8005374:	2201      	movs	r2, #1
 8005376:	2109      	movs	r1, #9
 8005378:	f7ff ff8e 	bl	8005298 <std>
 800537c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8005380:	2202      	movs	r2, #2
 8005382:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005386:	2112      	movs	r1, #18
 8005388:	f7ff bf86 	b.w	8005298 <std>
 800538c:	20004dbc 	.word	0x20004dbc
 8005390:	20004c84 	.word	0x20004c84
 8005394:	08005305 	.word	0x08005305

08005398 <__sfp_lock_acquire>:
 8005398:	4801      	ldr	r0, [pc, #4]	@ (80053a0 <__sfp_lock_acquire+0x8>)
 800539a:	f000 b98c 	b.w	80056b6 <__retarget_lock_acquire_recursive>
 800539e:	bf00      	nop
 80053a0:	20004dc5 	.word	0x20004dc5

080053a4 <__sfp_lock_release>:
 80053a4:	4801      	ldr	r0, [pc, #4]	@ (80053ac <__sfp_lock_release+0x8>)
 80053a6:	f000 b987 	b.w	80056b8 <__retarget_lock_release_recursive>
 80053aa:	bf00      	nop
 80053ac:	20004dc5 	.word	0x20004dc5

080053b0 <__sinit>:
 80053b0:	b510      	push	{r4, lr}
 80053b2:	4604      	mov	r4, r0
 80053b4:	f7ff fff0 	bl	8005398 <__sfp_lock_acquire>
 80053b8:	6a23      	ldr	r3, [r4, #32]
 80053ba:	b11b      	cbz	r3, 80053c4 <__sinit+0x14>
 80053bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80053c0:	f7ff bff0 	b.w	80053a4 <__sfp_lock_release>
 80053c4:	4b04      	ldr	r3, [pc, #16]	@ (80053d8 <__sinit+0x28>)
 80053c6:	6223      	str	r3, [r4, #32]
 80053c8:	4b04      	ldr	r3, [pc, #16]	@ (80053dc <__sinit+0x2c>)
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d1f5      	bne.n	80053bc <__sinit+0xc>
 80053d0:	f7ff ffc4 	bl	800535c <global_stdio_init.part.0>
 80053d4:	e7f2      	b.n	80053bc <__sinit+0xc>
 80053d6:	bf00      	nop
 80053d8:	0800531d 	.word	0x0800531d
 80053dc:	20004dbc 	.word	0x20004dbc

080053e0 <_fwalk_sglue>:
 80053e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80053e4:	4607      	mov	r7, r0
 80053e6:	4688      	mov	r8, r1
 80053e8:	4614      	mov	r4, r2
 80053ea:	2600      	movs	r6, #0
 80053ec:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80053f0:	f1b9 0901 	subs.w	r9, r9, #1
 80053f4:	d505      	bpl.n	8005402 <_fwalk_sglue+0x22>
 80053f6:	6824      	ldr	r4, [r4, #0]
 80053f8:	2c00      	cmp	r4, #0
 80053fa:	d1f7      	bne.n	80053ec <_fwalk_sglue+0xc>
 80053fc:	4630      	mov	r0, r6
 80053fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005402:	89ab      	ldrh	r3, [r5, #12]
 8005404:	2b01      	cmp	r3, #1
 8005406:	d907      	bls.n	8005418 <_fwalk_sglue+0x38>
 8005408:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800540c:	3301      	adds	r3, #1
 800540e:	d003      	beq.n	8005418 <_fwalk_sglue+0x38>
 8005410:	4629      	mov	r1, r5
 8005412:	4638      	mov	r0, r7
 8005414:	47c0      	blx	r8
 8005416:	4306      	orrs	r6, r0
 8005418:	3568      	adds	r5, #104	@ 0x68
 800541a:	e7e9      	b.n	80053f0 <_fwalk_sglue+0x10>

0800541c <iprintf>:
 800541c:	b40f      	push	{r0, r1, r2, r3}
 800541e:	b507      	push	{r0, r1, r2, lr}
 8005420:	4906      	ldr	r1, [pc, #24]	@ (800543c <iprintf+0x20>)
 8005422:	ab04      	add	r3, sp, #16
 8005424:	6808      	ldr	r0, [r1, #0]
 8005426:	f853 2b04 	ldr.w	r2, [r3], #4
 800542a:	6881      	ldr	r1, [r0, #8]
 800542c:	9301      	str	r3, [sp, #4]
 800542e:	f000 fbcd 	bl	8005bcc <_vfiprintf_r>
 8005432:	b003      	add	sp, #12
 8005434:	f85d eb04 	ldr.w	lr, [sp], #4
 8005438:	b004      	add	sp, #16
 800543a:	4770      	bx	lr
 800543c:	20000174 	.word	0x20000174

08005440 <putchar>:
 8005440:	4b02      	ldr	r3, [pc, #8]	@ (800544c <putchar+0xc>)
 8005442:	4601      	mov	r1, r0
 8005444:	6818      	ldr	r0, [r3, #0]
 8005446:	6882      	ldr	r2, [r0, #8]
 8005448:	f000 bf12 	b.w	8006270 <_putc_r>
 800544c:	20000174 	.word	0x20000174

08005450 <siprintf>:
 8005450:	b40e      	push	{r1, r2, r3}
 8005452:	b500      	push	{lr}
 8005454:	b09c      	sub	sp, #112	@ 0x70
 8005456:	ab1d      	add	r3, sp, #116	@ 0x74
 8005458:	9002      	str	r0, [sp, #8]
 800545a:	9006      	str	r0, [sp, #24]
 800545c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8005460:	4809      	ldr	r0, [pc, #36]	@ (8005488 <siprintf+0x38>)
 8005462:	9107      	str	r1, [sp, #28]
 8005464:	9104      	str	r1, [sp, #16]
 8005466:	4909      	ldr	r1, [pc, #36]	@ (800548c <siprintf+0x3c>)
 8005468:	f853 2b04 	ldr.w	r2, [r3], #4
 800546c:	9105      	str	r1, [sp, #20]
 800546e:	6800      	ldr	r0, [r0, #0]
 8005470:	9301      	str	r3, [sp, #4]
 8005472:	a902      	add	r1, sp, #8
 8005474:	f000 fa84 	bl	8005980 <_svfiprintf_r>
 8005478:	9b02      	ldr	r3, [sp, #8]
 800547a:	2200      	movs	r2, #0
 800547c:	701a      	strb	r2, [r3, #0]
 800547e:	b01c      	add	sp, #112	@ 0x70
 8005480:	f85d eb04 	ldr.w	lr, [sp], #4
 8005484:	b003      	add	sp, #12
 8005486:	4770      	bx	lr
 8005488:	20000174 	.word	0x20000174
 800548c:	ffff0208 	.word	0xffff0208

08005490 <__sread>:
 8005490:	b510      	push	{r4, lr}
 8005492:	460c      	mov	r4, r1
 8005494:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005498:	f000 f8be 	bl	8005618 <_read_r>
 800549c:	2800      	cmp	r0, #0
 800549e:	bfab      	itete	ge
 80054a0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80054a2:	89a3      	ldrhlt	r3, [r4, #12]
 80054a4:	181b      	addge	r3, r3, r0
 80054a6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80054aa:	bfac      	ite	ge
 80054ac:	6563      	strge	r3, [r4, #84]	@ 0x54
 80054ae:	81a3      	strhlt	r3, [r4, #12]
 80054b0:	bd10      	pop	{r4, pc}

080054b2 <__swrite>:
 80054b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80054b6:	461f      	mov	r7, r3
 80054b8:	898b      	ldrh	r3, [r1, #12]
 80054ba:	05db      	lsls	r3, r3, #23
 80054bc:	4605      	mov	r5, r0
 80054be:	460c      	mov	r4, r1
 80054c0:	4616      	mov	r6, r2
 80054c2:	d505      	bpl.n	80054d0 <__swrite+0x1e>
 80054c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80054c8:	2302      	movs	r3, #2
 80054ca:	2200      	movs	r2, #0
 80054cc:	f000 f892 	bl	80055f4 <_lseek_r>
 80054d0:	89a3      	ldrh	r3, [r4, #12]
 80054d2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80054d6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80054da:	81a3      	strh	r3, [r4, #12]
 80054dc:	4632      	mov	r2, r6
 80054de:	463b      	mov	r3, r7
 80054e0:	4628      	mov	r0, r5
 80054e2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80054e6:	f000 b8a9 	b.w	800563c <_write_r>

080054ea <__sseek>:
 80054ea:	b510      	push	{r4, lr}
 80054ec:	460c      	mov	r4, r1
 80054ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80054f2:	f000 f87f 	bl	80055f4 <_lseek_r>
 80054f6:	1c43      	adds	r3, r0, #1
 80054f8:	89a3      	ldrh	r3, [r4, #12]
 80054fa:	bf15      	itete	ne
 80054fc:	6560      	strne	r0, [r4, #84]	@ 0x54
 80054fe:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8005502:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8005506:	81a3      	strheq	r3, [r4, #12]
 8005508:	bf18      	it	ne
 800550a:	81a3      	strhne	r3, [r4, #12]
 800550c:	bd10      	pop	{r4, pc}

0800550e <__sclose>:
 800550e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005512:	f000 b809 	b.w	8005528 <_close_r>

08005516 <memset>:
 8005516:	4402      	add	r2, r0
 8005518:	4603      	mov	r3, r0
 800551a:	4293      	cmp	r3, r2
 800551c:	d100      	bne.n	8005520 <memset+0xa>
 800551e:	4770      	bx	lr
 8005520:	f803 1b01 	strb.w	r1, [r3], #1
 8005524:	e7f9      	b.n	800551a <memset+0x4>
	...

08005528 <_close_r>:
 8005528:	b538      	push	{r3, r4, r5, lr}
 800552a:	4d06      	ldr	r5, [pc, #24]	@ (8005544 <_close_r+0x1c>)
 800552c:	2300      	movs	r3, #0
 800552e:	4604      	mov	r4, r0
 8005530:	4608      	mov	r0, r1
 8005532:	602b      	str	r3, [r5, #0]
 8005534:	f7fb fa80 	bl	8000a38 <_close>
 8005538:	1c43      	adds	r3, r0, #1
 800553a:	d102      	bne.n	8005542 <_close_r+0x1a>
 800553c:	682b      	ldr	r3, [r5, #0]
 800553e:	b103      	cbz	r3, 8005542 <_close_r+0x1a>
 8005540:	6023      	str	r3, [r4, #0]
 8005542:	bd38      	pop	{r3, r4, r5, pc}
 8005544:	20004dc0 	.word	0x20004dc0

08005548 <_reclaim_reent>:
 8005548:	4b29      	ldr	r3, [pc, #164]	@ (80055f0 <_reclaim_reent+0xa8>)
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	4283      	cmp	r3, r0
 800554e:	b570      	push	{r4, r5, r6, lr}
 8005550:	4604      	mov	r4, r0
 8005552:	d04b      	beq.n	80055ec <_reclaim_reent+0xa4>
 8005554:	69c3      	ldr	r3, [r0, #28]
 8005556:	b1ab      	cbz	r3, 8005584 <_reclaim_reent+0x3c>
 8005558:	68db      	ldr	r3, [r3, #12]
 800555a:	b16b      	cbz	r3, 8005578 <_reclaim_reent+0x30>
 800555c:	2500      	movs	r5, #0
 800555e:	69e3      	ldr	r3, [r4, #28]
 8005560:	68db      	ldr	r3, [r3, #12]
 8005562:	5959      	ldr	r1, [r3, r5]
 8005564:	2900      	cmp	r1, #0
 8005566:	d13b      	bne.n	80055e0 <_reclaim_reent+0x98>
 8005568:	3504      	adds	r5, #4
 800556a:	2d80      	cmp	r5, #128	@ 0x80
 800556c:	d1f7      	bne.n	800555e <_reclaim_reent+0x16>
 800556e:	69e3      	ldr	r3, [r4, #28]
 8005570:	4620      	mov	r0, r4
 8005572:	68d9      	ldr	r1, [r3, #12]
 8005574:	f000 f8b0 	bl	80056d8 <_free_r>
 8005578:	69e3      	ldr	r3, [r4, #28]
 800557a:	6819      	ldr	r1, [r3, #0]
 800557c:	b111      	cbz	r1, 8005584 <_reclaim_reent+0x3c>
 800557e:	4620      	mov	r0, r4
 8005580:	f000 f8aa 	bl	80056d8 <_free_r>
 8005584:	6961      	ldr	r1, [r4, #20]
 8005586:	b111      	cbz	r1, 800558e <_reclaim_reent+0x46>
 8005588:	4620      	mov	r0, r4
 800558a:	f000 f8a5 	bl	80056d8 <_free_r>
 800558e:	69e1      	ldr	r1, [r4, #28]
 8005590:	b111      	cbz	r1, 8005598 <_reclaim_reent+0x50>
 8005592:	4620      	mov	r0, r4
 8005594:	f000 f8a0 	bl	80056d8 <_free_r>
 8005598:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800559a:	b111      	cbz	r1, 80055a2 <_reclaim_reent+0x5a>
 800559c:	4620      	mov	r0, r4
 800559e:	f000 f89b 	bl	80056d8 <_free_r>
 80055a2:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80055a4:	b111      	cbz	r1, 80055ac <_reclaim_reent+0x64>
 80055a6:	4620      	mov	r0, r4
 80055a8:	f000 f896 	bl	80056d8 <_free_r>
 80055ac:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 80055ae:	b111      	cbz	r1, 80055b6 <_reclaim_reent+0x6e>
 80055b0:	4620      	mov	r0, r4
 80055b2:	f000 f891 	bl	80056d8 <_free_r>
 80055b6:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 80055b8:	b111      	cbz	r1, 80055c0 <_reclaim_reent+0x78>
 80055ba:	4620      	mov	r0, r4
 80055bc:	f000 f88c 	bl	80056d8 <_free_r>
 80055c0:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 80055c2:	b111      	cbz	r1, 80055ca <_reclaim_reent+0x82>
 80055c4:	4620      	mov	r0, r4
 80055c6:	f000 f887 	bl	80056d8 <_free_r>
 80055ca:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 80055cc:	b111      	cbz	r1, 80055d4 <_reclaim_reent+0x8c>
 80055ce:	4620      	mov	r0, r4
 80055d0:	f000 f882 	bl	80056d8 <_free_r>
 80055d4:	6a23      	ldr	r3, [r4, #32]
 80055d6:	b14b      	cbz	r3, 80055ec <_reclaim_reent+0xa4>
 80055d8:	4620      	mov	r0, r4
 80055da:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80055de:	4718      	bx	r3
 80055e0:	680e      	ldr	r6, [r1, #0]
 80055e2:	4620      	mov	r0, r4
 80055e4:	f000 f878 	bl	80056d8 <_free_r>
 80055e8:	4631      	mov	r1, r6
 80055ea:	e7bb      	b.n	8005564 <_reclaim_reent+0x1c>
 80055ec:	bd70      	pop	{r4, r5, r6, pc}
 80055ee:	bf00      	nop
 80055f0:	20000174 	.word	0x20000174

080055f4 <_lseek_r>:
 80055f4:	b538      	push	{r3, r4, r5, lr}
 80055f6:	4d07      	ldr	r5, [pc, #28]	@ (8005614 <_lseek_r+0x20>)
 80055f8:	4604      	mov	r4, r0
 80055fa:	4608      	mov	r0, r1
 80055fc:	4611      	mov	r1, r2
 80055fe:	2200      	movs	r2, #0
 8005600:	602a      	str	r2, [r5, #0]
 8005602:	461a      	mov	r2, r3
 8005604:	f7fb fa22 	bl	8000a4c <_lseek>
 8005608:	1c43      	adds	r3, r0, #1
 800560a:	d102      	bne.n	8005612 <_lseek_r+0x1e>
 800560c:	682b      	ldr	r3, [r5, #0]
 800560e:	b103      	cbz	r3, 8005612 <_lseek_r+0x1e>
 8005610:	6023      	str	r3, [r4, #0]
 8005612:	bd38      	pop	{r3, r4, r5, pc}
 8005614:	20004dc0 	.word	0x20004dc0

08005618 <_read_r>:
 8005618:	b538      	push	{r3, r4, r5, lr}
 800561a:	4d07      	ldr	r5, [pc, #28]	@ (8005638 <_read_r+0x20>)
 800561c:	4604      	mov	r4, r0
 800561e:	4608      	mov	r0, r1
 8005620:	4611      	mov	r1, r2
 8005622:	2200      	movs	r2, #0
 8005624:	602a      	str	r2, [r5, #0]
 8005626:	461a      	mov	r2, r3
 8005628:	f7fb f9f6 	bl	8000a18 <_read>
 800562c:	1c43      	adds	r3, r0, #1
 800562e:	d102      	bne.n	8005636 <_read_r+0x1e>
 8005630:	682b      	ldr	r3, [r5, #0]
 8005632:	b103      	cbz	r3, 8005636 <_read_r+0x1e>
 8005634:	6023      	str	r3, [r4, #0]
 8005636:	bd38      	pop	{r3, r4, r5, pc}
 8005638:	20004dc0 	.word	0x20004dc0

0800563c <_write_r>:
 800563c:	b538      	push	{r3, r4, r5, lr}
 800563e:	4d07      	ldr	r5, [pc, #28]	@ (800565c <_write_r+0x20>)
 8005640:	4604      	mov	r4, r0
 8005642:	4608      	mov	r0, r1
 8005644:	4611      	mov	r1, r2
 8005646:	2200      	movs	r2, #0
 8005648:	602a      	str	r2, [r5, #0]
 800564a:	461a      	mov	r2, r3
 800564c:	f7fa fff2 	bl	8000634 <_write>
 8005650:	1c43      	adds	r3, r0, #1
 8005652:	d102      	bne.n	800565a <_write_r+0x1e>
 8005654:	682b      	ldr	r3, [r5, #0]
 8005656:	b103      	cbz	r3, 800565a <_write_r+0x1e>
 8005658:	6023      	str	r3, [r4, #0]
 800565a:	bd38      	pop	{r3, r4, r5, pc}
 800565c:	20004dc0 	.word	0x20004dc0

08005660 <__errno>:
 8005660:	4b01      	ldr	r3, [pc, #4]	@ (8005668 <__errno+0x8>)
 8005662:	6818      	ldr	r0, [r3, #0]
 8005664:	4770      	bx	lr
 8005666:	bf00      	nop
 8005668:	20000174 	.word	0x20000174

0800566c <__libc_init_array>:
 800566c:	b570      	push	{r4, r5, r6, lr}
 800566e:	4d0d      	ldr	r5, [pc, #52]	@ (80056a4 <__libc_init_array+0x38>)
 8005670:	4c0d      	ldr	r4, [pc, #52]	@ (80056a8 <__libc_init_array+0x3c>)
 8005672:	1b64      	subs	r4, r4, r5
 8005674:	10a4      	asrs	r4, r4, #2
 8005676:	2600      	movs	r6, #0
 8005678:	42a6      	cmp	r6, r4
 800567a:	d109      	bne.n	8005690 <__libc_init_array+0x24>
 800567c:	4d0b      	ldr	r5, [pc, #44]	@ (80056ac <__libc_init_array+0x40>)
 800567e:	4c0c      	ldr	r4, [pc, #48]	@ (80056b0 <__libc_init_array+0x44>)
 8005680:	f000 ffa2 	bl	80065c8 <_init>
 8005684:	1b64      	subs	r4, r4, r5
 8005686:	10a4      	asrs	r4, r4, #2
 8005688:	2600      	movs	r6, #0
 800568a:	42a6      	cmp	r6, r4
 800568c:	d105      	bne.n	800569a <__libc_init_array+0x2e>
 800568e:	bd70      	pop	{r4, r5, r6, pc}
 8005690:	f855 3b04 	ldr.w	r3, [r5], #4
 8005694:	4798      	blx	r3
 8005696:	3601      	adds	r6, #1
 8005698:	e7ee      	b.n	8005678 <__libc_init_array+0xc>
 800569a:	f855 3b04 	ldr.w	r3, [r5], #4
 800569e:	4798      	blx	r3
 80056a0:	3601      	adds	r6, #1
 80056a2:	e7f2      	b.n	800568a <__libc_init_array+0x1e>
 80056a4:	08006750 	.word	0x08006750
 80056a8:	08006750 	.word	0x08006750
 80056ac:	08006750 	.word	0x08006750
 80056b0:	08006754 	.word	0x08006754

080056b4 <__retarget_lock_init_recursive>:
 80056b4:	4770      	bx	lr

080056b6 <__retarget_lock_acquire_recursive>:
 80056b6:	4770      	bx	lr

080056b8 <__retarget_lock_release_recursive>:
 80056b8:	4770      	bx	lr

080056ba <memcpy>:
 80056ba:	440a      	add	r2, r1
 80056bc:	4291      	cmp	r1, r2
 80056be:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 80056c2:	d100      	bne.n	80056c6 <memcpy+0xc>
 80056c4:	4770      	bx	lr
 80056c6:	b510      	push	{r4, lr}
 80056c8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80056cc:	f803 4f01 	strb.w	r4, [r3, #1]!
 80056d0:	4291      	cmp	r1, r2
 80056d2:	d1f9      	bne.n	80056c8 <memcpy+0xe>
 80056d4:	bd10      	pop	{r4, pc}
	...

080056d8 <_free_r>:
 80056d8:	b538      	push	{r3, r4, r5, lr}
 80056da:	4605      	mov	r5, r0
 80056dc:	2900      	cmp	r1, #0
 80056de:	d041      	beq.n	8005764 <_free_r+0x8c>
 80056e0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80056e4:	1f0c      	subs	r4, r1, #4
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	bfb8      	it	lt
 80056ea:	18e4      	addlt	r4, r4, r3
 80056ec:	f000 f8e0 	bl	80058b0 <__malloc_lock>
 80056f0:	4a1d      	ldr	r2, [pc, #116]	@ (8005768 <_free_r+0x90>)
 80056f2:	6813      	ldr	r3, [r2, #0]
 80056f4:	b933      	cbnz	r3, 8005704 <_free_r+0x2c>
 80056f6:	6063      	str	r3, [r4, #4]
 80056f8:	6014      	str	r4, [r2, #0]
 80056fa:	4628      	mov	r0, r5
 80056fc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005700:	f000 b8dc 	b.w	80058bc <__malloc_unlock>
 8005704:	42a3      	cmp	r3, r4
 8005706:	d908      	bls.n	800571a <_free_r+0x42>
 8005708:	6820      	ldr	r0, [r4, #0]
 800570a:	1821      	adds	r1, r4, r0
 800570c:	428b      	cmp	r3, r1
 800570e:	bf01      	itttt	eq
 8005710:	6819      	ldreq	r1, [r3, #0]
 8005712:	685b      	ldreq	r3, [r3, #4]
 8005714:	1809      	addeq	r1, r1, r0
 8005716:	6021      	streq	r1, [r4, #0]
 8005718:	e7ed      	b.n	80056f6 <_free_r+0x1e>
 800571a:	461a      	mov	r2, r3
 800571c:	685b      	ldr	r3, [r3, #4]
 800571e:	b10b      	cbz	r3, 8005724 <_free_r+0x4c>
 8005720:	42a3      	cmp	r3, r4
 8005722:	d9fa      	bls.n	800571a <_free_r+0x42>
 8005724:	6811      	ldr	r1, [r2, #0]
 8005726:	1850      	adds	r0, r2, r1
 8005728:	42a0      	cmp	r0, r4
 800572a:	d10b      	bne.n	8005744 <_free_r+0x6c>
 800572c:	6820      	ldr	r0, [r4, #0]
 800572e:	4401      	add	r1, r0
 8005730:	1850      	adds	r0, r2, r1
 8005732:	4283      	cmp	r3, r0
 8005734:	6011      	str	r1, [r2, #0]
 8005736:	d1e0      	bne.n	80056fa <_free_r+0x22>
 8005738:	6818      	ldr	r0, [r3, #0]
 800573a:	685b      	ldr	r3, [r3, #4]
 800573c:	6053      	str	r3, [r2, #4]
 800573e:	4408      	add	r0, r1
 8005740:	6010      	str	r0, [r2, #0]
 8005742:	e7da      	b.n	80056fa <_free_r+0x22>
 8005744:	d902      	bls.n	800574c <_free_r+0x74>
 8005746:	230c      	movs	r3, #12
 8005748:	602b      	str	r3, [r5, #0]
 800574a:	e7d6      	b.n	80056fa <_free_r+0x22>
 800574c:	6820      	ldr	r0, [r4, #0]
 800574e:	1821      	adds	r1, r4, r0
 8005750:	428b      	cmp	r3, r1
 8005752:	bf04      	itt	eq
 8005754:	6819      	ldreq	r1, [r3, #0]
 8005756:	685b      	ldreq	r3, [r3, #4]
 8005758:	6063      	str	r3, [r4, #4]
 800575a:	bf04      	itt	eq
 800575c:	1809      	addeq	r1, r1, r0
 800575e:	6021      	streq	r1, [r4, #0]
 8005760:	6054      	str	r4, [r2, #4]
 8005762:	e7ca      	b.n	80056fa <_free_r+0x22>
 8005764:	bd38      	pop	{r3, r4, r5, pc}
 8005766:	bf00      	nop
 8005768:	20004dcc 	.word	0x20004dcc

0800576c <sbrk_aligned>:
 800576c:	b570      	push	{r4, r5, r6, lr}
 800576e:	4e0f      	ldr	r6, [pc, #60]	@ (80057ac <sbrk_aligned+0x40>)
 8005770:	460c      	mov	r4, r1
 8005772:	6831      	ldr	r1, [r6, #0]
 8005774:	4605      	mov	r5, r0
 8005776:	b911      	cbnz	r1, 800577e <sbrk_aligned+0x12>
 8005778:	f000 fe5c 	bl	8006434 <_sbrk_r>
 800577c:	6030      	str	r0, [r6, #0]
 800577e:	4621      	mov	r1, r4
 8005780:	4628      	mov	r0, r5
 8005782:	f000 fe57 	bl	8006434 <_sbrk_r>
 8005786:	1c43      	adds	r3, r0, #1
 8005788:	d103      	bne.n	8005792 <sbrk_aligned+0x26>
 800578a:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800578e:	4620      	mov	r0, r4
 8005790:	bd70      	pop	{r4, r5, r6, pc}
 8005792:	1cc4      	adds	r4, r0, #3
 8005794:	f024 0403 	bic.w	r4, r4, #3
 8005798:	42a0      	cmp	r0, r4
 800579a:	d0f8      	beq.n	800578e <sbrk_aligned+0x22>
 800579c:	1a21      	subs	r1, r4, r0
 800579e:	4628      	mov	r0, r5
 80057a0:	f000 fe48 	bl	8006434 <_sbrk_r>
 80057a4:	3001      	adds	r0, #1
 80057a6:	d1f2      	bne.n	800578e <sbrk_aligned+0x22>
 80057a8:	e7ef      	b.n	800578a <sbrk_aligned+0x1e>
 80057aa:	bf00      	nop
 80057ac:	20004dc8 	.word	0x20004dc8

080057b0 <_malloc_r>:
 80057b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80057b4:	1ccd      	adds	r5, r1, #3
 80057b6:	f025 0503 	bic.w	r5, r5, #3
 80057ba:	3508      	adds	r5, #8
 80057bc:	2d0c      	cmp	r5, #12
 80057be:	bf38      	it	cc
 80057c0:	250c      	movcc	r5, #12
 80057c2:	2d00      	cmp	r5, #0
 80057c4:	4606      	mov	r6, r0
 80057c6:	db01      	blt.n	80057cc <_malloc_r+0x1c>
 80057c8:	42a9      	cmp	r1, r5
 80057ca:	d904      	bls.n	80057d6 <_malloc_r+0x26>
 80057cc:	230c      	movs	r3, #12
 80057ce:	6033      	str	r3, [r6, #0]
 80057d0:	2000      	movs	r0, #0
 80057d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80057d6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80058ac <_malloc_r+0xfc>
 80057da:	f000 f869 	bl	80058b0 <__malloc_lock>
 80057de:	f8d8 3000 	ldr.w	r3, [r8]
 80057e2:	461c      	mov	r4, r3
 80057e4:	bb44      	cbnz	r4, 8005838 <_malloc_r+0x88>
 80057e6:	4629      	mov	r1, r5
 80057e8:	4630      	mov	r0, r6
 80057ea:	f7ff ffbf 	bl	800576c <sbrk_aligned>
 80057ee:	1c43      	adds	r3, r0, #1
 80057f0:	4604      	mov	r4, r0
 80057f2:	d158      	bne.n	80058a6 <_malloc_r+0xf6>
 80057f4:	f8d8 4000 	ldr.w	r4, [r8]
 80057f8:	4627      	mov	r7, r4
 80057fa:	2f00      	cmp	r7, #0
 80057fc:	d143      	bne.n	8005886 <_malloc_r+0xd6>
 80057fe:	2c00      	cmp	r4, #0
 8005800:	d04b      	beq.n	800589a <_malloc_r+0xea>
 8005802:	6823      	ldr	r3, [r4, #0]
 8005804:	4639      	mov	r1, r7
 8005806:	4630      	mov	r0, r6
 8005808:	eb04 0903 	add.w	r9, r4, r3
 800580c:	f000 fe12 	bl	8006434 <_sbrk_r>
 8005810:	4581      	cmp	r9, r0
 8005812:	d142      	bne.n	800589a <_malloc_r+0xea>
 8005814:	6821      	ldr	r1, [r4, #0]
 8005816:	1a6d      	subs	r5, r5, r1
 8005818:	4629      	mov	r1, r5
 800581a:	4630      	mov	r0, r6
 800581c:	f7ff ffa6 	bl	800576c <sbrk_aligned>
 8005820:	3001      	adds	r0, #1
 8005822:	d03a      	beq.n	800589a <_malloc_r+0xea>
 8005824:	6823      	ldr	r3, [r4, #0]
 8005826:	442b      	add	r3, r5
 8005828:	6023      	str	r3, [r4, #0]
 800582a:	f8d8 3000 	ldr.w	r3, [r8]
 800582e:	685a      	ldr	r2, [r3, #4]
 8005830:	bb62      	cbnz	r2, 800588c <_malloc_r+0xdc>
 8005832:	f8c8 7000 	str.w	r7, [r8]
 8005836:	e00f      	b.n	8005858 <_malloc_r+0xa8>
 8005838:	6822      	ldr	r2, [r4, #0]
 800583a:	1b52      	subs	r2, r2, r5
 800583c:	d420      	bmi.n	8005880 <_malloc_r+0xd0>
 800583e:	2a0b      	cmp	r2, #11
 8005840:	d917      	bls.n	8005872 <_malloc_r+0xc2>
 8005842:	1961      	adds	r1, r4, r5
 8005844:	42a3      	cmp	r3, r4
 8005846:	6025      	str	r5, [r4, #0]
 8005848:	bf18      	it	ne
 800584a:	6059      	strne	r1, [r3, #4]
 800584c:	6863      	ldr	r3, [r4, #4]
 800584e:	bf08      	it	eq
 8005850:	f8c8 1000 	streq.w	r1, [r8]
 8005854:	5162      	str	r2, [r4, r5]
 8005856:	604b      	str	r3, [r1, #4]
 8005858:	4630      	mov	r0, r6
 800585a:	f000 f82f 	bl	80058bc <__malloc_unlock>
 800585e:	f104 000b 	add.w	r0, r4, #11
 8005862:	1d23      	adds	r3, r4, #4
 8005864:	f020 0007 	bic.w	r0, r0, #7
 8005868:	1ac2      	subs	r2, r0, r3
 800586a:	bf1c      	itt	ne
 800586c:	1a1b      	subne	r3, r3, r0
 800586e:	50a3      	strne	r3, [r4, r2]
 8005870:	e7af      	b.n	80057d2 <_malloc_r+0x22>
 8005872:	6862      	ldr	r2, [r4, #4]
 8005874:	42a3      	cmp	r3, r4
 8005876:	bf0c      	ite	eq
 8005878:	f8c8 2000 	streq.w	r2, [r8]
 800587c:	605a      	strne	r2, [r3, #4]
 800587e:	e7eb      	b.n	8005858 <_malloc_r+0xa8>
 8005880:	4623      	mov	r3, r4
 8005882:	6864      	ldr	r4, [r4, #4]
 8005884:	e7ae      	b.n	80057e4 <_malloc_r+0x34>
 8005886:	463c      	mov	r4, r7
 8005888:	687f      	ldr	r7, [r7, #4]
 800588a:	e7b6      	b.n	80057fa <_malloc_r+0x4a>
 800588c:	461a      	mov	r2, r3
 800588e:	685b      	ldr	r3, [r3, #4]
 8005890:	42a3      	cmp	r3, r4
 8005892:	d1fb      	bne.n	800588c <_malloc_r+0xdc>
 8005894:	2300      	movs	r3, #0
 8005896:	6053      	str	r3, [r2, #4]
 8005898:	e7de      	b.n	8005858 <_malloc_r+0xa8>
 800589a:	230c      	movs	r3, #12
 800589c:	6033      	str	r3, [r6, #0]
 800589e:	4630      	mov	r0, r6
 80058a0:	f000 f80c 	bl	80058bc <__malloc_unlock>
 80058a4:	e794      	b.n	80057d0 <_malloc_r+0x20>
 80058a6:	6005      	str	r5, [r0, #0]
 80058a8:	e7d6      	b.n	8005858 <_malloc_r+0xa8>
 80058aa:	bf00      	nop
 80058ac:	20004dcc 	.word	0x20004dcc

080058b0 <__malloc_lock>:
 80058b0:	4801      	ldr	r0, [pc, #4]	@ (80058b8 <__malloc_lock+0x8>)
 80058b2:	f7ff bf00 	b.w	80056b6 <__retarget_lock_acquire_recursive>
 80058b6:	bf00      	nop
 80058b8:	20004dc4 	.word	0x20004dc4

080058bc <__malloc_unlock>:
 80058bc:	4801      	ldr	r0, [pc, #4]	@ (80058c4 <__malloc_unlock+0x8>)
 80058be:	f7ff befb 	b.w	80056b8 <__retarget_lock_release_recursive>
 80058c2:	bf00      	nop
 80058c4:	20004dc4 	.word	0x20004dc4

080058c8 <__ssputs_r>:
 80058c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80058cc:	688e      	ldr	r6, [r1, #8]
 80058ce:	461f      	mov	r7, r3
 80058d0:	42be      	cmp	r6, r7
 80058d2:	680b      	ldr	r3, [r1, #0]
 80058d4:	4682      	mov	sl, r0
 80058d6:	460c      	mov	r4, r1
 80058d8:	4690      	mov	r8, r2
 80058da:	d82d      	bhi.n	8005938 <__ssputs_r+0x70>
 80058dc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80058e0:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80058e4:	d026      	beq.n	8005934 <__ssputs_r+0x6c>
 80058e6:	6965      	ldr	r5, [r4, #20]
 80058e8:	6909      	ldr	r1, [r1, #16]
 80058ea:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80058ee:	eba3 0901 	sub.w	r9, r3, r1
 80058f2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80058f6:	1c7b      	adds	r3, r7, #1
 80058f8:	444b      	add	r3, r9
 80058fa:	106d      	asrs	r5, r5, #1
 80058fc:	429d      	cmp	r5, r3
 80058fe:	bf38      	it	cc
 8005900:	461d      	movcc	r5, r3
 8005902:	0553      	lsls	r3, r2, #21
 8005904:	d527      	bpl.n	8005956 <__ssputs_r+0x8e>
 8005906:	4629      	mov	r1, r5
 8005908:	f7ff ff52 	bl	80057b0 <_malloc_r>
 800590c:	4606      	mov	r6, r0
 800590e:	b360      	cbz	r0, 800596a <__ssputs_r+0xa2>
 8005910:	6921      	ldr	r1, [r4, #16]
 8005912:	464a      	mov	r2, r9
 8005914:	f7ff fed1 	bl	80056ba <memcpy>
 8005918:	89a3      	ldrh	r3, [r4, #12]
 800591a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800591e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005922:	81a3      	strh	r3, [r4, #12]
 8005924:	6126      	str	r6, [r4, #16]
 8005926:	6165      	str	r5, [r4, #20]
 8005928:	444e      	add	r6, r9
 800592a:	eba5 0509 	sub.w	r5, r5, r9
 800592e:	6026      	str	r6, [r4, #0]
 8005930:	60a5      	str	r5, [r4, #8]
 8005932:	463e      	mov	r6, r7
 8005934:	42be      	cmp	r6, r7
 8005936:	d900      	bls.n	800593a <__ssputs_r+0x72>
 8005938:	463e      	mov	r6, r7
 800593a:	6820      	ldr	r0, [r4, #0]
 800593c:	4632      	mov	r2, r6
 800593e:	4641      	mov	r1, r8
 8005940:	f000 fd5e 	bl	8006400 <memmove>
 8005944:	68a3      	ldr	r3, [r4, #8]
 8005946:	1b9b      	subs	r3, r3, r6
 8005948:	60a3      	str	r3, [r4, #8]
 800594a:	6823      	ldr	r3, [r4, #0]
 800594c:	4433      	add	r3, r6
 800594e:	6023      	str	r3, [r4, #0]
 8005950:	2000      	movs	r0, #0
 8005952:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005956:	462a      	mov	r2, r5
 8005958:	f000 fd7c 	bl	8006454 <_realloc_r>
 800595c:	4606      	mov	r6, r0
 800595e:	2800      	cmp	r0, #0
 8005960:	d1e0      	bne.n	8005924 <__ssputs_r+0x5c>
 8005962:	6921      	ldr	r1, [r4, #16]
 8005964:	4650      	mov	r0, sl
 8005966:	f7ff feb7 	bl	80056d8 <_free_r>
 800596a:	230c      	movs	r3, #12
 800596c:	f8ca 3000 	str.w	r3, [sl]
 8005970:	89a3      	ldrh	r3, [r4, #12]
 8005972:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005976:	81a3      	strh	r3, [r4, #12]
 8005978:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800597c:	e7e9      	b.n	8005952 <__ssputs_r+0x8a>
	...

08005980 <_svfiprintf_r>:
 8005980:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005984:	4698      	mov	r8, r3
 8005986:	898b      	ldrh	r3, [r1, #12]
 8005988:	061b      	lsls	r3, r3, #24
 800598a:	b09d      	sub	sp, #116	@ 0x74
 800598c:	4607      	mov	r7, r0
 800598e:	460d      	mov	r5, r1
 8005990:	4614      	mov	r4, r2
 8005992:	d510      	bpl.n	80059b6 <_svfiprintf_r+0x36>
 8005994:	690b      	ldr	r3, [r1, #16]
 8005996:	b973      	cbnz	r3, 80059b6 <_svfiprintf_r+0x36>
 8005998:	2140      	movs	r1, #64	@ 0x40
 800599a:	f7ff ff09 	bl	80057b0 <_malloc_r>
 800599e:	6028      	str	r0, [r5, #0]
 80059a0:	6128      	str	r0, [r5, #16]
 80059a2:	b930      	cbnz	r0, 80059b2 <_svfiprintf_r+0x32>
 80059a4:	230c      	movs	r3, #12
 80059a6:	603b      	str	r3, [r7, #0]
 80059a8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80059ac:	b01d      	add	sp, #116	@ 0x74
 80059ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80059b2:	2340      	movs	r3, #64	@ 0x40
 80059b4:	616b      	str	r3, [r5, #20]
 80059b6:	2300      	movs	r3, #0
 80059b8:	9309      	str	r3, [sp, #36]	@ 0x24
 80059ba:	2320      	movs	r3, #32
 80059bc:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80059c0:	f8cd 800c 	str.w	r8, [sp, #12]
 80059c4:	2330      	movs	r3, #48	@ 0x30
 80059c6:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8005b64 <_svfiprintf_r+0x1e4>
 80059ca:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80059ce:	f04f 0901 	mov.w	r9, #1
 80059d2:	4623      	mov	r3, r4
 80059d4:	469a      	mov	sl, r3
 80059d6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80059da:	b10a      	cbz	r2, 80059e0 <_svfiprintf_r+0x60>
 80059dc:	2a25      	cmp	r2, #37	@ 0x25
 80059de:	d1f9      	bne.n	80059d4 <_svfiprintf_r+0x54>
 80059e0:	ebba 0b04 	subs.w	fp, sl, r4
 80059e4:	d00b      	beq.n	80059fe <_svfiprintf_r+0x7e>
 80059e6:	465b      	mov	r3, fp
 80059e8:	4622      	mov	r2, r4
 80059ea:	4629      	mov	r1, r5
 80059ec:	4638      	mov	r0, r7
 80059ee:	f7ff ff6b 	bl	80058c8 <__ssputs_r>
 80059f2:	3001      	adds	r0, #1
 80059f4:	f000 80a7 	beq.w	8005b46 <_svfiprintf_r+0x1c6>
 80059f8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80059fa:	445a      	add	r2, fp
 80059fc:	9209      	str	r2, [sp, #36]	@ 0x24
 80059fe:	f89a 3000 	ldrb.w	r3, [sl]
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	f000 809f 	beq.w	8005b46 <_svfiprintf_r+0x1c6>
 8005a08:	2300      	movs	r3, #0
 8005a0a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005a0e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005a12:	f10a 0a01 	add.w	sl, sl, #1
 8005a16:	9304      	str	r3, [sp, #16]
 8005a18:	9307      	str	r3, [sp, #28]
 8005a1a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005a1e:	931a      	str	r3, [sp, #104]	@ 0x68
 8005a20:	4654      	mov	r4, sl
 8005a22:	2205      	movs	r2, #5
 8005a24:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005a28:	484e      	ldr	r0, [pc, #312]	@ (8005b64 <_svfiprintf_r+0x1e4>)
 8005a2a:	f7fa fbe1 	bl	80001f0 <memchr>
 8005a2e:	9a04      	ldr	r2, [sp, #16]
 8005a30:	b9d8      	cbnz	r0, 8005a6a <_svfiprintf_r+0xea>
 8005a32:	06d0      	lsls	r0, r2, #27
 8005a34:	bf44      	itt	mi
 8005a36:	2320      	movmi	r3, #32
 8005a38:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005a3c:	0711      	lsls	r1, r2, #28
 8005a3e:	bf44      	itt	mi
 8005a40:	232b      	movmi	r3, #43	@ 0x2b
 8005a42:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005a46:	f89a 3000 	ldrb.w	r3, [sl]
 8005a4a:	2b2a      	cmp	r3, #42	@ 0x2a
 8005a4c:	d015      	beq.n	8005a7a <_svfiprintf_r+0xfa>
 8005a4e:	9a07      	ldr	r2, [sp, #28]
 8005a50:	4654      	mov	r4, sl
 8005a52:	2000      	movs	r0, #0
 8005a54:	f04f 0c0a 	mov.w	ip, #10
 8005a58:	4621      	mov	r1, r4
 8005a5a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005a5e:	3b30      	subs	r3, #48	@ 0x30
 8005a60:	2b09      	cmp	r3, #9
 8005a62:	d94b      	bls.n	8005afc <_svfiprintf_r+0x17c>
 8005a64:	b1b0      	cbz	r0, 8005a94 <_svfiprintf_r+0x114>
 8005a66:	9207      	str	r2, [sp, #28]
 8005a68:	e014      	b.n	8005a94 <_svfiprintf_r+0x114>
 8005a6a:	eba0 0308 	sub.w	r3, r0, r8
 8005a6e:	fa09 f303 	lsl.w	r3, r9, r3
 8005a72:	4313      	orrs	r3, r2
 8005a74:	9304      	str	r3, [sp, #16]
 8005a76:	46a2      	mov	sl, r4
 8005a78:	e7d2      	b.n	8005a20 <_svfiprintf_r+0xa0>
 8005a7a:	9b03      	ldr	r3, [sp, #12]
 8005a7c:	1d19      	adds	r1, r3, #4
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	9103      	str	r1, [sp, #12]
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	bfbb      	ittet	lt
 8005a86:	425b      	neglt	r3, r3
 8005a88:	f042 0202 	orrlt.w	r2, r2, #2
 8005a8c:	9307      	strge	r3, [sp, #28]
 8005a8e:	9307      	strlt	r3, [sp, #28]
 8005a90:	bfb8      	it	lt
 8005a92:	9204      	strlt	r2, [sp, #16]
 8005a94:	7823      	ldrb	r3, [r4, #0]
 8005a96:	2b2e      	cmp	r3, #46	@ 0x2e
 8005a98:	d10a      	bne.n	8005ab0 <_svfiprintf_r+0x130>
 8005a9a:	7863      	ldrb	r3, [r4, #1]
 8005a9c:	2b2a      	cmp	r3, #42	@ 0x2a
 8005a9e:	d132      	bne.n	8005b06 <_svfiprintf_r+0x186>
 8005aa0:	9b03      	ldr	r3, [sp, #12]
 8005aa2:	1d1a      	adds	r2, r3, #4
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	9203      	str	r2, [sp, #12]
 8005aa8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005aac:	3402      	adds	r4, #2
 8005aae:	9305      	str	r3, [sp, #20]
 8005ab0:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8005b74 <_svfiprintf_r+0x1f4>
 8005ab4:	7821      	ldrb	r1, [r4, #0]
 8005ab6:	2203      	movs	r2, #3
 8005ab8:	4650      	mov	r0, sl
 8005aba:	f7fa fb99 	bl	80001f0 <memchr>
 8005abe:	b138      	cbz	r0, 8005ad0 <_svfiprintf_r+0x150>
 8005ac0:	9b04      	ldr	r3, [sp, #16]
 8005ac2:	eba0 000a 	sub.w	r0, r0, sl
 8005ac6:	2240      	movs	r2, #64	@ 0x40
 8005ac8:	4082      	lsls	r2, r0
 8005aca:	4313      	orrs	r3, r2
 8005acc:	3401      	adds	r4, #1
 8005ace:	9304      	str	r3, [sp, #16]
 8005ad0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005ad4:	4824      	ldr	r0, [pc, #144]	@ (8005b68 <_svfiprintf_r+0x1e8>)
 8005ad6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005ada:	2206      	movs	r2, #6
 8005adc:	f7fa fb88 	bl	80001f0 <memchr>
 8005ae0:	2800      	cmp	r0, #0
 8005ae2:	d036      	beq.n	8005b52 <_svfiprintf_r+0x1d2>
 8005ae4:	4b21      	ldr	r3, [pc, #132]	@ (8005b6c <_svfiprintf_r+0x1ec>)
 8005ae6:	bb1b      	cbnz	r3, 8005b30 <_svfiprintf_r+0x1b0>
 8005ae8:	9b03      	ldr	r3, [sp, #12]
 8005aea:	3307      	adds	r3, #7
 8005aec:	f023 0307 	bic.w	r3, r3, #7
 8005af0:	3308      	adds	r3, #8
 8005af2:	9303      	str	r3, [sp, #12]
 8005af4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005af6:	4433      	add	r3, r6
 8005af8:	9309      	str	r3, [sp, #36]	@ 0x24
 8005afa:	e76a      	b.n	80059d2 <_svfiprintf_r+0x52>
 8005afc:	fb0c 3202 	mla	r2, ip, r2, r3
 8005b00:	460c      	mov	r4, r1
 8005b02:	2001      	movs	r0, #1
 8005b04:	e7a8      	b.n	8005a58 <_svfiprintf_r+0xd8>
 8005b06:	2300      	movs	r3, #0
 8005b08:	3401      	adds	r4, #1
 8005b0a:	9305      	str	r3, [sp, #20]
 8005b0c:	4619      	mov	r1, r3
 8005b0e:	f04f 0c0a 	mov.w	ip, #10
 8005b12:	4620      	mov	r0, r4
 8005b14:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005b18:	3a30      	subs	r2, #48	@ 0x30
 8005b1a:	2a09      	cmp	r2, #9
 8005b1c:	d903      	bls.n	8005b26 <_svfiprintf_r+0x1a6>
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d0c6      	beq.n	8005ab0 <_svfiprintf_r+0x130>
 8005b22:	9105      	str	r1, [sp, #20]
 8005b24:	e7c4      	b.n	8005ab0 <_svfiprintf_r+0x130>
 8005b26:	fb0c 2101 	mla	r1, ip, r1, r2
 8005b2a:	4604      	mov	r4, r0
 8005b2c:	2301      	movs	r3, #1
 8005b2e:	e7f0      	b.n	8005b12 <_svfiprintf_r+0x192>
 8005b30:	ab03      	add	r3, sp, #12
 8005b32:	9300      	str	r3, [sp, #0]
 8005b34:	462a      	mov	r2, r5
 8005b36:	4b0e      	ldr	r3, [pc, #56]	@ (8005b70 <_svfiprintf_r+0x1f0>)
 8005b38:	a904      	add	r1, sp, #16
 8005b3a:	4638      	mov	r0, r7
 8005b3c:	f3af 8000 	nop.w
 8005b40:	1c42      	adds	r2, r0, #1
 8005b42:	4606      	mov	r6, r0
 8005b44:	d1d6      	bne.n	8005af4 <_svfiprintf_r+0x174>
 8005b46:	89ab      	ldrh	r3, [r5, #12]
 8005b48:	065b      	lsls	r3, r3, #25
 8005b4a:	f53f af2d 	bmi.w	80059a8 <_svfiprintf_r+0x28>
 8005b4e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005b50:	e72c      	b.n	80059ac <_svfiprintf_r+0x2c>
 8005b52:	ab03      	add	r3, sp, #12
 8005b54:	9300      	str	r3, [sp, #0]
 8005b56:	462a      	mov	r2, r5
 8005b58:	4b05      	ldr	r3, [pc, #20]	@ (8005b70 <_svfiprintf_r+0x1f0>)
 8005b5a:	a904      	add	r1, sp, #16
 8005b5c:	4638      	mov	r0, r7
 8005b5e:	f000 f9bb 	bl	8005ed8 <_printf_i>
 8005b62:	e7ed      	b.n	8005b40 <_svfiprintf_r+0x1c0>
 8005b64:	08006715 	.word	0x08006715
 8005b68:	0800671f 	.word	0x0800671f
 8005b6c:	00000000 	.word	0x00000000
 8005b70:	080058c9 	.word	0x080058c9
 8005b74:	0800671b 	.word	0x0800671b

08005b78 <__sfputc_r>:
 8005b78:	6893      	ldr	r3, [r2, #8]
 8005b7a:	3b01      	subs	r3, #1
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	b410      	push	{r4}
 8005b80:	6093      	str	r3, [r2, #8]
 8005b82:	da08      	bge.n	8005b96 <__sfputc_r+0x1e>
 8005b84:	6994      	ldr	r4, [r2, #24]
 8005b86:	42a3      	cmp	r3, r4
 8005b88:	db01      	blt.n	8005b8e <__sfputc_r+0x16>
 8005b8a:	290a      	cmp	r1, #10
 8005b8c:	d103      	bne.n	8005b96 <__sfputc_r+0x1e>
 8005b8e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005b92:	f000 bba1 	b.w	80062d8 <__swbuf_r>
 8005b96:	6813      	ldr	r3, [r2, #0]
 8005b98:	1c58      	adds	r0, r3, #1
 8005b9a:	6010      	str	r0, [r2, #0]
 8005b9c:	7019      	strb	r1, [r3, #0]
 8005b9e:	4608      	mov	r0, r1
 8005ba0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005ba4:	4770      	bx	lr

08005ba6 <__sfputs_r>:
 8005ba6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ba8:	4606      	mov	r6, r0
 8005baa:	460f      	mov	r7, r1
 8005bac:	4614      	mov	r4, r2
 8005bae:	18d5      	adds	r5, r2, r3
 8005bb0:	42ac      	cmp	r4, r5
 8005bb2:	d101      	bne.n	8005bb8 <__sfputs_r+0x12>
 8005bb4:	2000      	movs	r0, #0
 8005bb6:	e007      	b.n	8005bc8 <__sfputs_r+0x22>
 8005bb8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005bbc:	463a      	mov	r2, r7
 8005bbe:	4630      	mov	r0, r6
 8005bc0:	f7ff ffda 	bl	8005b78 <__sfputc_r>
 8005bc4:	1c43      	adds	r3, r0, #1
 8005bc6:	d1f3      	bne.n	8005bb0 <__sfputs_r+0xa>
 8005bc8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005bcc <_vfiprintf_r>:
 8005bcc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005bd0:	460d      	mov	r5, r1
 8005bd2:	b09d      	sub	sp, #116	@ 0x74
 8005bd4:	4614      	mov	r4, r2
 8005bd6:	4698      	mov	r8, r3
 8005bd8:	4606      	mov	r6, r0
 8005bda:	b118      	cbz	r0, 8005be4 <_vfiprintf_r+0x18>
 8005bdc:	6a03      	ldr	r3, [r0, #32]
 8005bde:	b90b      	cbnz	r3, 8005be4 <_vfiprintf_r+0x18>
 8005be0:	f7ff fbe6 	bl	80053b0 <__sinit>
 8005be4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005be6:	07d9      	lsls	r1, r3, #31
 8005be8:	d405      	bmi.n	8005bf6 <_vfiprintf_r+0x2a>
 8005bea:	89ab      	ldrh	r3, [r5, #12]
 8005bec:	059a      	lsls	r2, r3, #22
 8005bee:	d402      	bmi.n	8005bf6 <_vfiprintf_r+0x2a>
 8005bf0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005bf2:	f7ff fd60 	bl	80056b6 <__retarget_lock_acquire_recursive>
 8005bf6:	89ab      	ldrh	r3, [r5, #12]
 8005bf8:	071b      	lsls	r3, r3, #28
 8005bfa:	d501      	bpl.n	8005c00 <_vfiprintf_r+0x34>
 8005bfc:	692b      	ldr	r3, [r5, #16]
 8005bfe:	b99b      	cbnz	r3, 8005c28 <_vfiprintf_r+0x5c>
 8005c00:	4629      	mov	r1, r5
 8005c02:	4630      	mov	r0, r6
 8005c04:	f000 fba6 	bl	8006354 <__swsetup_r>
 8005c08:	b170      	cbz	r0, 8005c28 <_vfiprintf_r+0x5c>
 8005c0a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005c0c:	07dc      	lsls	r4, r3, #31
 8005c0e:	d504      	bpl.n	8005c1a <_vfiprintf_r+0x4e>
 8005c10:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005c14:	b01d      	add	sp, #116	@ 0x74
 8005c16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005c1a:	89ab      	ldrh	r3, [r5, #12]
 8005c1c:	0598      	lsls	r0, r3, #22
 8005c1e:	d4f7      	bmi.n	8005c10 <_vfiprintf_r+0x44>
 8005c20:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005c22:	f7ff fd49 	bl	80056b8 <__retarget_lock_release_recursive>
 8005c26:	e7f3      	b.n	8005c10 <_vfiprintf_r+0x44>
 8005c28:	2300      	movs	r3, #0
 8005c2a:	9309      	str	r3, [sp, #36]	@ 0x24
 8005c2c:	2320      	movs	r3, #32
 8005c2e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005c32:	f8cd 800c 	str.w	r8, [sp, #12]
 8005c36:	2330      	movs	r3, #48	@ 0x30
 8005c38:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8005de8 <_vfiprintf_r+0x21c>
 8005c3c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005c40:	f04f 0901 	mov.w	r9, #1
 8005c44:	4623      	mov	r3, r4
 8005c46:	469a      	mov	sl, r3
 8005c48:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005c4c:	b10a      	cbz	r2, 8005c52 <_vfiprintf_r+0x86>
 8005c4e:	2a25      	cmp	r2, #37	@ 0x25
 8005c50:	d1f9      	bne.n	8005c46 <_vfiprintf_r+0x7a>
 8005c52:	ebba 0b04 	subs.w	fp, sl, r4
 8005c56:	d00b      	beq.n	8005c70 <_vfiprintf_r+0xa4>
 8005c58:	465b      	mov	r3, fp
 8005c5a:	4622      	mov	r2, r4
 8005c5c:	4629      	mov	r1, r5
 8005c5e:	4630      	mov	r0, r6
 8005c60:	f7ff ffa1 	bl	8005ba6 <__sfputs_r>
 8005c64:	3001      	adds	r0, #1
 8005c66:	f000 80a7 	beq.w	8005db8 <_vfiprintf_r+0x1ec>
 8005c6a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005c6c:	445a      	add	r2, fp
 8005c6e:	9209      	str	r2, [sp, #36]	@ 0x24
 8005c70:	f89a 3000 	ldrb.w	r3, [sl]
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	f000 809f 	beq.w	8005db8 <_vfiprintf_r+0x1ec>
 8005c7a:	2300      	movs	r3, #0
 8005c7c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005c80:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005c84:	f10a 0a01 	add.w	sl, sl, #1
 8005c88:	9304      	str	r3, [sp, #16]
 8005c8a:	9307      	str	r3, [sp, #28]
 8005c8c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005c90:	931a      	str	r3, [sp, #104]	@ 0x68
 8005c92:	4654      	mov	r4, sl
 8005c94:	2205      	movs	r2, #5
 8005c96:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005c9a:	4853      	ldr	r0, [pc, #332]	@ (8005de8 <_vfiprintf_r+0x21c>)
 8005c9c:	f7fa faa8 	bl	80001f0 <memchr>
 8005ca0:	9a04      	ldr	r2, [sp, #16]
 8005ca2:	b9d8      	cbnz	r0, 8005cdc <_vfiprintf_r+0x110>
 8005ca4:	06d1      	lsls	r1, r2, #27
 8005ca6:	bf44      	itt	mi
 8005ca8:	2320      	movmi	r3, #32
 8005caa:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005cae:	0713      	lsls	r3, r2, #28
 8005cb0:	bf44      	itt	mi
 8005cb2:	232b      	movmi	r3, #43	@ 0x2b
 8005cb4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005cb8:	f89a 3000 	ldrb.w	r3, [sl]
 8005cbc:	2b2a      	cmp	r3, #42	@ 0x2a
 8005cbe:	d015      	beq.n	8005cec <_vfiprintf_r+0x120>
 8005cc0:	9a07      	ldr	r2, [sp, #28]
 8005cc2:	4654      	mov	r4, sl
 8005cc4:	2000      	movs	r0, #0
 8005cc6:	f04f 0c0a 	mov.w	ip, #10
 8005cca:	4621      	mov	r1, r4
 8005ccc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005cd0:	3b30      	subs	r3, #48	@ 0x30
 8005cd2:	2b09      	cmp	r3, #9
 8005cd4:	d94b      	bls.n	8005d6e <_vfiprintf_r+0x1a2>
 8005cd6:	b1b0      	cbz	r0, 8005d06 <_vfiprintf_r+0x13a>
 8005cd8:	9207      	str	r2, [sp, #28]
 8005cda:	e014      	b.n	8005d06 <_vfiprintf_r+0x13a>
 8005cdc:	eba0 0308 	sub.w	r3, r0, r8
 8005ce0:	fa09 f303 	lsl.w	r3, r9, r3
 8005ce4:	4313      	orrs	r3, r2
 8005ce6:	9304      	str	r3, [sp, #16]
 8005ce8:	46a2      	mov	sl, r4
 8005cea:	e7d2      	b.n	8005c92 <_vfiprintf_r+0xc6>
 8005cec:	9b03      	ldr	r3, [sp, #12]
 8005cee:	1d19      	adds	r1, r3, #4
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	9103      	str	r1, [sp, #12]
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	bfbb      	ittet	lt
 8005cf8:	425b      	neglt	r3, r3
 8005cfa:	f042 0202 	orrlt.w	r2, r2, #2
 8005cfe:	9307      	strge	r3, [sp, #28]
 8005d00:	9307      	strlt	r3, [sp, #28]
 8005d02:	bfb8      	it	lt
 8005d04:	9204      	strlt	r2, [sp, #16]
 8005d06:	7823      	ldrb	r3, [r4, #0]
 8005d08:	2b2e      	cmp	r3, #46	@ 0x2e
 8005d0a:	d10a      	bne.n	8005d22 <_vfiprintf_r+0x156>
 8005d0c:	7863      	ldrb	r3, [r4, #1]
 8005d0e:	2b2a      	cmp	r3, #42	@ 0x2a
 8005d10:	d132      	bne.n	8005d78 <_vfiprintf_r+0x1ac>
 8005d12:	9b03      	ldr	r3, [sp, #12]
 8005d14:	1d1a      	adds	r2, r3, #4
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	9203      	str	r2, [sp, #12]
 8005d1a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005d1e:	3402      	adds	r4, #2
 8005d20:	9305      	str	r3, [sp, #20]
 8005d22:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8005df8 <_vfiprintf_r+0x22c>
 8005d26:	7821      	ldrb	r1, [r4, #0]
 8005d28:	2203      	movs	r2, #3
 8005d2a:	4650      	mov	r0, sl
 8005d2c:	f7fa fa60 	bl	80001f0 <memchr>
 8005d30:	b138      	cbz	r0, 8005d42 <_vfiprintf_r+0x176>
 8005d32:	9b04      	ldr	r3, [sp, #16]
 8005d34:	eba0 000a 	sub.w	r0, r0, sl
 8005d38:	2240      	movs	r2, #64	@ 0x40
 8005d3a:	4082      	lsls	r2, r0
 8005d3c:	4313      	orrs	r3, r2
 8005d3e:	3401      	adds	r4, #1
 8005d40:	9304      	str	r3, [sp, #16]
 8005d42:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005d46:	4829      	ldr	r0, [pc, #164]	@ (8005dec <_vfiprintf_r+0x220>)
 8005d48:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005d4c:	2206      	movs	r2, #6
 8005d4e:	f7fa fa4f 	bl	80001f0 <memchr>
 8005d52:	2800      	cmp	r0, #0
 8005d54:	d03f      	beq.n	8005dd6 <_vfiprintf_r+0x20a>
 8005d56:	4b26      	ldr	r3, [pc, #152]	@ (8005df0 <_vfiprintf_r+0x224>)
 8005d58:	bb1b      	cbnz	r3, 8005da2 <_vfiprintf_r+0x1d6>
 8005d5a:	9b03      	ldr	r3, [sp, #12]
 8005d5c:	3307      	adds	r3, #7
 8005d5e:	f023 0307 	bic.w	r3, r3, #7
 8005d62:	3308      	adds	r3, #8
 8005d64:	9303      	str	r3, [sp, #12]
 8005d66:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005d68:	443b      	add	r3, r7
 8005d6a:	9309      	str	r3, [sp, #36]	@ 0x24
 8005d6c:	e76a      	b.n	8005c44 <_vfiprintf_r+0x78>
 8005d6e:	fb0c 3202 	mla	r2, ip, r2, r3
 8005d72:	460c      	mov	r4, r1
 8005d74:	2001      	movs	r0, #1
 8005d76:	e7a8      	b.n	8005cca <_vfiprintf_r+0xfe>
 8005d78:	2300      	movs	r3, #0
 8005d7a:	3401      	adds	r4, #1
 8005d7c:	9305      	str	r3, [sp, #20]
 8005d7e:	4619      	mov	r1, r3
 8005d80:	f04f 0c0a 	mov.w	ip, #10
 8005d84:	4620      	mov	r0, r4
 8005d86:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005d8a:	3a30      	subs	r2, #48	@ 0x30
 8005d8c:	2a09      	cmp	r2, #9
 8005d8e:	d903      	bls.n	8005d98 <_vfiprintf_r+0x1cc>
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d0c6      	beq.n	8005d22 <_vfiprintf_r+0x156>
 8005d94:	9105      	str	r1, [sp, #20]
 8005d96:	e7c4      	b.n	8005d22 <_vfiprintf_r+0x156>
 8005d98:	fb0c 2101 	mla	r1, ip, r1, r2
 8005d9c:	4604      	mov	r4, r0
 8005d9e:	2301      	movs	r3, #1
 8005da0:	e7f0      	b.n	8005d84 <_vfiprintf_r+0x1b8>
 8005da2:	ab03      	add	r3, sp, #12
 8005da4:	9300      	str	r3, [sp, #0]
 8005da6:	462a      	mov	r2, r5
 8005da8:	4b12      	ldr	r3, [pc, #72]	@ (8005df4 <_vfiprintf_r+0x228>)
 8005daa:	a904      	add	r1, sp, #16
 8005dac:	4630      	mov	r0, r6
 8005dae:	f3af 8000 	nop.w
 8005db2:	4607      	mov	r7, r0
 8005db4:	1c78      	adds	r0, r7, #1
 8005db6:	d1d6      	bne.n	8005d66 <_vfiprintf_r+0x19a>
 8005db8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005dba:	07d9      	lsls	r1, r3, #31
 8005dbc:	d405      	bmi.n	8005dca <_vfiprintf_r+0x1fe>
 8005dbe:	89ab      	ldrh	r3, [r5, #12]
 8005dc0:	059a      	lsls	r2, r3, #22
 8005dc2:	d402      	bmi.n	8005dca <_vfiprintf_r+0x1fe>
 8005dc4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005dc6:	f7ff fc77 	bl	80056b8 <__retarget_lock_release_recursive>
 8005dca:	89ab      	ldrh	r3, [r5, #12]
 8005dcc:	065b      	lsls	r3, r3, #25
 8005dce:	f53f af1f 	bmi.w	8005c10 <_vfiprintf_r+0x44>
 8005dd2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005dd4:	e71e      	b.n	8005c14 <_vfiprintf_r+0x48>
 8005dd6:	ab03      	add	r3, sp, #12
 8005dd8:	9300      	str	r3, [sp, #0]
 8005dda:	462a      	mov	r2, r5
 8005ddc:	4b05      	ldr	r3, [pc, #20]	@ (8005df4 <_vfiprintf_r+0x228>)
 8005dde:	a904      	add	r1, sp, #16
 8005de0:	4630      	mov	r0, r6
 8005de2:	f000 f879 	bl	8005ed8 <_printf_i>
 8005de6:	e7e4      	b.n	8005db2 <_vfiprintf_r+0x1e6>
 8005de8:	08006715 	.word	0x08006715
 8005dec:	0800671f 	.word	0x0800671f
 8005df0:	00000000 	.word	0x00000000
 8005df4:	08005ba7 	.word	0x08005ba7
 8005df8:	0800671b 	.word	0x0800671b

08005dfc <_printf_common>:
 8005dfc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005e00:	4616      	mov	r6, r2
 8005e02:	4698      	mov	r8, r3
 8005e04:	688a      	ldr	r2, [r1, #8]
 8005e06:	690b      	ldr	r3, [r1, #16]
 8005e08:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005e0c:	4293      	cmp	r3, r2
 8005e0e:	bfb8      	it	lt
 8005e10:	4613      	movlt	r3, r2
 8005e12:	6033      	str	r3, [r6, #0]
 8005e14:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005e18:	4607      	mov	r7, r0
 8005e1a:	460c      	mov	r4, r1
 8005e1c:	b10a      	cbz	r2, 8005e22 <_printf_common+0x26>
 8005e1e:	3301      	adds	r3, #1
 8005e20:	6033      	str	r3, [r6, #0]
 8005e22:	6823      	ldr	r3, [r4, #0]
 8005e24:	0699      	lsls	r1, r3, #26
 8005e26:	bf42      	ittt	mi
 8005e28:	6833      	ldrmi	r3, [r6, #0]
 8005e2a:	3302      	addmi	r3, #2
 8005e2c:	6033      	strmi	r3, [r6, #0]
 8005e2e:	6825      	ldr	r5, [r4, #0]
 8005e30:	f015 0506 	ands.w	r5, r5, #6
 8005e34:	d106      	bne.n	8005e44 <_printf_common+0x48>
 8005e36:	f104 0a19 	add.w	sl, r4, #25
 8005e3a:	68e3      	ldr	r3, [r4, #12]
 8005e3c:	6832      	ldr	r2, [r6, #0]
 8005e3e:	1a9b      	subs	r3, r3, r2
 8005e40:	42ab      	cmp	r3, r5
 8005e42:	dc26      	bgt.n	8005e92 <_printf_common+0x96>
 8005e44:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005e48:	6822      	ldr	r2, [r4, #0]
 8005e4a:	3b00      	subs	r3, #0
 8005e4c:	bf18      	it	ne
 8005e4e:	2301      	movne	r3, #1
 8005e50:	0692      	lsls	r2, r2, #26
 8005e52:	d42b      	bmi.n	8005eac <_printf_common+0xb0>
 8005e54:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005e58:	4641      	mov	r1, r8
 8005e5a:	4638      	mov	r0, r7
 8005e5c:	47c8      	blx	r9
 8005e5e:	3001      	adds	r0, #1
 8005e60:	d01e      	beq.n	8005ea0 <_printf_common+0xa4>
 8005e62:	6823      	ldr	r3, [r4, #0]
 8005e64:	6922      	ldr	r2, [r4, #16]
 8005e66:	f003 0306 	and.w	r3, r3, #6
 8005e6a:	2b04      	cmp	r3, #4
 8005e6c:	bf02      	ittt	eq
 8005e6e:	68e5      	ldreq	r5, [r4, #12]
 8005e70:	6833      	ldreq	r3, [r6, #0]
 8005e72:	1aed      	subeq	r5, r5, r3
 8005e74:	68a3      	ldr	r3, [r4, #8]
 8005e76:	bf0c      	ite	eq
 8005e78:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005e7c:	2500      	movne	r5, #0
 8005e7e:	4293      	cmp	r3, r2
 8005e80:	bfc4      	itt	gt
 8005e82:	1a9b      	subgt	r3, r3, r2
 8005e84:	18ed      	addgt	r5, r5, r3
 8005e86:	2600      	movs	r6, #0
 8005e88:	341a      	adds	r4, #26
 8005e8a:	42b5      	cmp	r5, r6
 8005e8c:	d11a      	bne.n	8005ec4 <_printf_common+0xc8>
 8005e8e:	2000      	movs	r0, #0
 8005e90:	e008      	b.n	8005ea4 <_printf_common+0xa8>
 8005e92:	2301      	movs	r3, #1
 8005e94:	4652      	mov	r2, sl
 8005e96:	4641      	mov	r1, r8
 8005e98:	4638      	mov	r0, r7
 8005e9a:	47c8      	blx	r9
 8005e9c:	3001      	adds	r0, #1
 8005e9e:	d103      	bne.n	8005ea8 <_printf_common+0xac>
 8005ea0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005ea4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005ea8:	3501      	adds	r5, #1
 8005eaa:	e7c6      	b.n	8005e3a <_printf_common+0x3e>
 8005eac:	18e1      	adds	r1, r4, r3
 8005eae:	1c5a      	adds	r2, r3, #1
 8005eb0:	2030      	movs	r0, #48	@ 0x30
 8005eb2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005eb6:	4422      	add	r2, r4
 8005eb8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005ebc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005ec0:	3302      	adds	r3, #2
 8005ec2:	e7c7      	b.n	8005e54 <_printf_common+0x58>
 8005ec4:	2301      	movs	r3, #1
 8005ec6:	4622      	mov	r2, r4
 8005ec8:	4641      	mov	r1, r8
 8005eca:	4638      	mov	r0, r7
 8005ecc:	47c8      	blx	r9
 8005ece:	3001      	adds	r0, #1
 8005ed0:	d0e6      	beq.n	8005ea0 <_printf_common+0xa4>
 8005ed2:	3601      	adds	r6, #1
 8005ed4:	e7d9      	b.n	8005e8a <_printf_common+0x8e>
	...

08005ed8 <_printf_i>:
 8005ed8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005edc:	7e0f      	ldrb	r7, [r1, #24]
 8005ede:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005ee0:	2f78      	cmp	r7, #120	@ 0x78
 8005ee2:	4691      	mov	r9, r2
 8005ee4:	4680      	mov	r8, r0
 8005ee6:	460c      	mov	r4, r1
 8005ee8:	469a      	mov	sl, r3
 8005eea:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005eee:	d807      	bhi.n	8005f00 <_printf_i+0x28>
 8005ef0:	2f62      	cmp	r7, #98	@ 0x62
 8005ef2:	d80a      	bhi.n	8005f0a <_printf_i+0x32>
 8005ef4:	2f00      	cmp	r7, #0
 8005ef6:	f000 80d2 	beq.w	800609e <_printf_i+0x1c6>
 8005efa:	2f58      	cmp	r7, #88	@ 0x58
 8005efc:	f000 80b9 	beq.w	8006072 <_printf_i+0x19a>
 8005f00:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005f04:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005f08:	e03a      	b.n	8005f80 <_printf_i+0xa8>
 8005f0a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005f0e:	2b15      	cmp	r3, #21
 8005f10:	d8f6      	bhi.n	8005f00 <_printf_i+0x28>
 8005f12:	a101      	add	r1, pc, #4	@ (adr r1, 8005f18 <_printf_i+0x40>)
 8005f14:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005f18:	08005f71 	.word	0x08005f71
 8005f1c:	08005f85 	.word	0x08005f85
 8005f20:	08005f01 	.word	0x08005f01
 8005f24:	08005f01 	.word	0x08005f01
 8005f28:	08005f01 	.word	0x08005f01
 8005f2c:	08005f01 	.word	0x08005f01
 8005f30:	08005f85 	.word	0x08005f85
 8005f34:	08005f01 	.word	0x08005f01
 8005f38:	08005f01 	.word	0x08005f01
 8005f3c:	08005f01 	.word	0x08005f01
 8005f40:	08005f01 	.word	0x08005f01
 8005f44:	08006085 	.word	0x08006085
 8005f48:	08005faf 	.word	0x08005faf
 8005f4c:	0800603f 	.word	0x0800603f
 8005f50:	08005f01 	.word	0x08005f01
 8005f54:	08005f01 	.word	0x08005f01
 8005f58:	080060a7 	.word	0x080060a7
 8005f5c:	08005f01 	.word	0x08005f01
 8005f60:	08005faf 	.word	0x08005faf
 8005f64:	08005f01 	.word	0x08005f01
 8005f68:	08005f01 	.word	0x08005f01
 8005f6c:	08006047 	.word	0x08006047
 8005f70:	6833      	ldr	r3, [r6, #0]
 8005f72:	1d1a      	adds	r2, r3, #4
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	6032      	str	r2, [r6, #0]
 8005f78:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005f7c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005f80:	2301      	movs	r3, #1
 8005f82:	e09d      	b.n	80060c0 <_printf_i+0x1e8>
 8005f84:	6833      	ldr	r3, [r6, #0]
 8005f86:	6820      	ldr	r0, [r4, #0]
 8005f88:	1d19      	adds	r1, r3, #4
 8005f8a:	6031      	str	r1, [r6, #0]
 8005f8c:	0606      	lsls	r6, r0, #24
 8005f8e:	d501      	bpl.n	8005f94 <_printf_i+0xbc>
 8005f90:	681d      	ldr	r5, [r3, #0]
 8005f92:	e003      	b.n	8005f9c <_printf_i+0xc4>
 8005f94:	0645      	lsls	r5, r0, #25
 8005f96:	d5fb      	bpl.n	8005f90 <_printf_i+0xb8>
 8005f98:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005f9c:	2d00      	cmp	r5, #0
 8005f9e:	da03      	bge.n	8005fa8 <_printf_i+0xd0>
 8005fa0:	232d      	movs	r3, #45	@ 0x2d
 8005fa2:	426d      	negs	r5, r5
 8005fa4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005fa8:	4859      	ldr	r0, [pc, #356]	@ (8006110 <_printf_i+0x238>)
 8005faa:	230a      	movs	r3, #10
 8005fac:	e011      	b.n	8005fd2 <_printf_i+0xfa>
 8005fae:	6821      	ldr	r1, [r4, #0]
 8005fb0:	6833      	ldr	r3, [r6, #0]
 8005fb2:	0608      	lsls	r0, r1, #24
 8005fb4:	f853 5b04 	ldr.w	r5, [r3], #4
 8005fb8:	d402      	bmi.n	8005fc0 <_printf_i+0xe8>
 8005fba:	0649      	lsls	r1, r1, #25
 8005fbc:	bf48      	it	mi
 8005fbe:	b2ad      	uxthmi	r5, r5
 8005fc0:	2f6f      	cmp	r7, #111	@ 0x6f
 8005fc2:	4853      	ldr	r0, [pc, #332]	@ (8006110 <_printf_i+0x238>)
 8005fc4:	6033      	str	r3, [r6, #0]
 8005fc6:	bf14      	ite	ne
 8005fc8:	230a      	movne	r3, #10
 8005fca:	2308      	moveq	r3, #8
 8005fcc:	2100      	movs	r1, #0
 8005fce:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005fd2:	6866      	ldr	r6, [r4, #4]
 8005fd4:	60a6      	str	r6, [r4, #8]
 8005fd6:	2e00      	cmp	r6, #0
 8005fd8:	bfa2      	ittt	ge
 8005fda:	6821      	ldrge	r1, [r4, #0]
 8005fdc:	f021 0104 	bicge.w	r1, r1, #4
 8005fe0:	6021      	strge	r1, [r4, #0]
 8005fe2:	b90d      	cbnz	r5, 8005fe8 <_printf_i+0x110>
 8005fe4:	2e00      	cmp	r6, #0
 8005fe6:	d04b      	beq.n	8006080 <_printf_i+0x1a8>
 8005fe8:	4616      	mov	r6, r2
 8005fea:	fbb5 f1f3 	udiv	r1, r5, r3
 8005fee:	fb03 5711 	mls	r7, r3, r1, r5
 8005ff2:	5dc7      	ldrb	r7, [r0, r7]
 8005ff4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005ff8:	462f      	mov	r7, r5
 8005ffa:	42bb      	cmp	r3, r7
 8005ffc:	460d      	mov	r5, r1
 8005ffe:	d9f4      	bls.n	8005fea <_printf_i+0x112>
 8006000:	2b08      	cmp	r3, #8
 8006002:	d10b      	bne.n	800601c <_printf_i+0x144>
 8006004:	6823      	ldr	r3, [r4, #0]
 8006006:	07df      	lsls	r7, r3, #31
 8006008:	d508      	bpl.n	800601c <_printf_i+0x144>
 800600a:	6923      	ldr	r3, [r4, #16]
 800600c:	6861      	ldr	r1, [r4, #4]
 800600e:	4299      	cmp	r1, r3
 8006010:	bfde      	ittt	le
 8006012:	2330      	movle	r3, #48	@ 0x30
 8006014:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006018:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800601c:	1b92      	subs	r2, r2, r6
 800601e:	6122      	str	r2, [r4, #16]
 8006020:	f8cd a000 	str.w	sl, [sp]
 8006024:	464b      	mov	r3, r9
 8006026:	aa03      	add	r2, sp, #12
 8006028:	4621      	mov	r1, r4
 800602a:	4640      	mov	r0, r8
 800602c:	f7ff fee6 	bl	8005dfc <_printf_common>
 8006030:	3001      	adds	r0, #1
 8006032:	d14a      	bne.n	80060ca <_printf_i+0x1f2>
 8006034:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006038:	b004      	add	sp, #16
 800603a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800603e:	6823      	ldr	r3, [r4, #0]
 8006040:	f043 0320 	orr.w	r3, r3, #32
 8006044:	6023      	str	r3, [r4, #0]
 8006046:	4833      	ldr	r0, [pc, #204]	@ (8006114 <_printf_i+0x23c>)
 8006048:	2778      	movs	r7, #120	@ 0x78
 800604a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800604e:	6823      	ldr	r3, [r4, #0]
 8006050:	6831      	ldr	r1, [r6, #0]
 8006052:	061f      	lsls	r7, r3, #24
 8006054:	f851 5b04 	ldr.w	r5, [r1], #4
 8006058:	d402      	bmi.n	8006060 <_printf_i+0x188>
 800605a:	065f      	lsls	r7, r3, #25
 800605c:	bf48      	it	mi
 800605e:	b2ad      	uxthmi	r5, r5
 8006060:	6031      	str	r1, [r6, #0]
 8006062:	07d9      	lsls	r1, r3, #31
 8006064:	bf44      	itt	mi
 8006066:	f043 0320 	orrmi.w	r3, r3, #32
 800606a:	6023      	strmi	r3, [r4, #0]
 800606c:	b11d      	cbz	r5, 8006076 <_printf_i+0x19e>
 800606e:	2310      	movs	r3, #16
 8006070:	e7ac      	b.n	8005fcc <_printf_i+0xf4>
 8006072:	4827      	ldr	r0, [pc, #156]	@ (8006110 <_printf_i+0x238>)
 8006074:	e7e9      	b.n	800604a <_printf_i+0x172>
 8006076:	6823      	ldr	r3, [r4, #0]
 8006078:	f023 0320 	bic.w	r3, r3, #32
 800607c:	6023      	str	r3, [r4, #0]
 800607e:	e7f6      	b.n	800606e <_printf_i+0x196>
 8006080:	4616      	mov	r6, r2
 8006082:	e7bd      	b.n	8006000 <_printf_i+0x128>
 8006084:	6833      	ldr	r3, [r6, #0]
 8006086:	6825      	ldr	r5, [r4, #0]
 8006088:	6961      	ldr	r1, [r4, #20]
 800608a:	1d18      	adds	r0, r3, #4
 800608c:	6030      	str	r0, [r6, #0]
 800608e:	062e      	lsls	r6, r5, #24
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	d501      	bpl.n	8006098 <_printf_i+0x1c0>
 8006094:	6019      	str	r1, [r3, #0]
 8006096:	e002      	b.n	800609e <_printf_i+0x1c6>
 8006098:	0668      	lsls	r0, r5, #25
 800609a:	d5fb      	bpl.n	8006094 <_printf_i+0x1bc>
 800609c:	8019      	strh	r1, [r3, #0]
 800609e:	2300      	movs	r3, #0
 80060a0:	6123      	str	r3, [r4, #16]
 80060a2:	4616      	mov	r6, r2
 80060a4:	e7bc      	b.n	8006020 <_printf_i+0x148>
 80060a6:	6833      	ldr	r3, [r6, #0]
 80060a8:	1d1a      	adds	r2, r3, #4
 80060aa:	6032      	str	r2, [r6, #0]
 80060ac:	681e      	ldr	r6, [r3, #0]
 80060ae:	6862      	ldr	r2, [r4, #4]
 80060b0:	2100      	movs	r1, #0
 80060b2:	4630      	mov	r0, r6
 80060b4:	f7fa f89c 	bl	80001f0 <memchr>
 80060b8:	b108      	cbz	r0, 80060be <_printf_i+0x1e6>
 80060ba:	1b80      	subs	r0, r0, r6
 80060bc:	6060      	str	r0, [r4, #4]
 80060be:	6863      	ldr	r3, [r4, #4]
 80060c0:	6123      	str	r3, [r4, #16]
 80060c2:	2300      	movs	r3, #0
 80060c4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80060c8:	e7aa      	b.n	8006020 <_printf_i+0x148>
 80060ca:	6923      	ldr	r3, [r4, #16]
 80060cc:	4632      	mov	r2, r6
 80060ce:	4649      	mov	r1, r9
 80060d0:	4640      	mov	r0, r8
 80060d2:	47d0      	blx	sl
 80060d4:	3001      	adds	r0, #1
 80060d6:	d0ad      	beq.n	8006034 <_printf_i+0x15c>
 80060d8:	6823      	ldr	r3, [r4, #0]
 80060da:	079b      	lsls	r3, r3, #30
 80060dc:	d413      	bmi.n	8006106 <_printf_i+0x22e>
 80060de:	68e0      	ldr	r0, [r4, #12]
 80060e0:	9b03      	ldr	r3, [sp, #12]
 80060e2:	4298      	cmp	r0, r3
 80060e4:	bfb8      	it	lt
 80060e6:	4618      	movlt	r0, r3
 80060e8:	e7a6      	b.n	8006038 <_printf_i+0x160>
 80060ea:	2301      	movs	r3, #1
 80060ec:	4632      	mov	r2, r6
 80060ee:	4649      	mov	r1, r9
 80060f0:	4640      	mov	r0, r8
 80060f2:	47d0      	blx	sl
 80060f4:	3001      	adds	r0, #1
 80060f6:	d09d      	beq.n	8006034 <_printf_i+0x15c>
 80060f8:	3501      	adds	r5, #1
 80060fa:	68e3      	ldr	r3, [r4, #12]
 80060fc:	9903      	ldr	r1, [sp, #12]
 80060fe:	1a5b      	subs	r3, r3, r1
 8006100:	42ab      	cmp	r3, r5
 8006102:	dcf2      	bgt.n	80060ea <_printf_i+0x212>
 8006104:	e7eb      	b.n	80060de <_printf_i+0x206>
 8006106:	2500      	movs	r5, #0
 8006108:	f104 0619 	add.w	r6, r4, #25
 800610c:	e7f5      	b.n	80060fa <_printf_i+0x222>
 800610e:	bf00      	nop
 8006110:	08006726 	.word	0x08006726
 8006114:	08006737 	.word	0x08006737

08006118 <__sflush_r>:
 8006118:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800611c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006120:	0716      	lsls	r6, r2, #28
 8006122:	4605      	mov	r5, r0
 8006124:	460c      	mov	r4, r1
 8006126:	d454      	bmi.n	80061d2 <__sflush_r+0xba>
 8006128:	684b      	ldr	r3, [r1, #4]
 800612a:	2b00      	cmp	r3, #0
 800612c:	dc02      	bgt.n	8006134 <__sflush_r+0x1c>
 800612e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8006130:	2b00      	cmp	r3, #0
 8006132:	dd48      	ble.n	80061c6 <__sflush_r+0xae>
 8006134:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006136:	2e00      	cmp	r6, #0
 8006138:	d045      	beq.n	80061c6 <__sflush_r+0xae>
 800613a:	2300      	movs	r3, #0
 800613c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8006140:	682f      	ldr	r7, [r5, #0]
 8006142:	6a21      	ldr	r1, [r4, #32]
 8006144:	602b      	str	r3, [r5, #0]
 8006146:	d030      	beq.n	80061aa <__sflush_r+0x92>
 8006148:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800614a:	89a3      	ldrh	r3, [r4, #12]
 800614c:	0759      	lsls	r1, r3, #29
 800614e:	d505      	bpl.n	800615c <__sflush_r+0x44>
 8006150:	6863      	ldr	r3, [r4, #4]
 8006152:	1ad2      	subs	r2, r2, r3
 8006154:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8006156:	b10b      	cbz	r3, 800615c <__sflush_r+0x44>
 8006158:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800615a:	1ad2      	subs	r2, r2, r3
 800615c:	2300      	movs	r3, #0
 800615e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006160:	6a21      	ldr	r1, [r4, #32]
 8006162:	4628      	mov	r0, r5
 8006164:	47b0      	blx	r6
 8006166:	1c43      	adds	r3, r0, #1
 8006168:	89a3      	ldrh	r3, [r4, #12]
 800616a:	d106      	bne.n	800617a <__sflush_r+0x62>
 800616c:	6829      	ldr	r1, [r5, #0]
 800616e:	291d      	cmp	r1, #29
 8006170:	d82b      	bhi.n	80061ca <__sflush_r+0xb2>
 8006172:	4a2a      	ldr	r2, [pc, #168]	@ (800621c <__sflush_r+0x104>)
 8006174:	410a      	asrs	r2, r1
 8006176:	07d6      	lsls	r6, r2, #31
 8006178:	d427      	bmi.n	80061ca <__sflush_r+0xb2>
 800617a:	2200      	movs	r2, #0
 800617c:	6062      	str	r2, [r4, #4]
 800617e:	04d9      	lsls	r1, r3, #19
 8006180:	6922      	ldr	r2, [r4, #16]
 8006182:	6022      	str	r2, [r4, #0]
 8006184:	d504      	bpl.n	8006190 <__sflush_r+0x78>
 8006186:	1c42      	adds	r2, r0, #1
 8006188:	d101      	bne.n	800618e <__sflush_r+0x76>
 800618a:	682b      	ldr	r3, [r5, #0]
 800618c:	b903      	cbnz	r3, 8006190 <__sflush_r+0x78>
 800618e:	6560      	str	r0, [r4, #84]	@ 0x54
 8006190:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006192:	602f      	str	r7, [r5, #0]
 8006194:	b1b9      	cbz	r1, 80061c6 <__sflush_r+0xae>
 8006196:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800619a:	4299      	cmp	r1, r3
 800619c:	d002      	beq.n	80061a4 <__sflush_r+0x8c>
 800619e:	4628      	mov	r0, r5
 80061a0:	f7ff fa9a 	bl	80056d8 <_free_r>
 80061a4:	2300      	movs	r3, #0
 80061a6:	6363      	str	r3, [r4, #52]	@ 0x34
 80061a8:	e00d      	b.n	80061c6 <__sflush_r+0xae>
 80061aa:	2301      	movs	r3, #1
 80061ac:	4628      	mov	r0, r5
 80061ae:	47b0      	blx	r6
 80061b0:	4602      	mov	r2, r0
 80061b2:	1c50      	adds	r0, r2, #1
 80061b4:	d1c9      	bne.n	800614a <__sflush_r+0x32>
 80061b6:	682b      	ldr	r3, [r5, #0]
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d0c6      	beq.n	800614a <__sflush_r+0x32>
 80061bc:	2b1d      	cmp	r3, #29
 80061be:	d001      	beq.n	80061c4 <__sflush_r+0xac>
 80061c0:	2b16      	cmp	r3, #22
 80061c2:	d11e      	bne.n	8006202 <__sflush_r+0xea>
 80061c4:	602f      	str	r7, [r5, #0]
 80061c6:	2000      	movs	r0, #0
 80061c8:	e022      	b.n	8006210 <__sflush_r+0xf8>
 80061ca:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80061ce:	b21b      	sxth	r3, r3
 80061d0:	e01b      	b.n	800620a <__sflush_r+0xf2>
 80061d2:	690f      	ldr	r7, [r1, #16]
 80061d4:	2f00      	cmp	r7, #0
 80061d6:	d0f6      	beq.n	80061c6 <__sflush_r+0xae>
 80061d8:	0793      	lsls	r3, r2, #30
 80061da:	680e      	ldr	r6, [r1, #0]
 80061dc:	bf08      	it	eq
 80061de:	694b      	ldreq	r3, [r1, #20]
 80061e0:	600f      	str	r7, [r1, #0]
 80061e2:	bf18      	it	ne
 80061e4:	2300      	movne	r3, #0
 80061e6:	eba6 0807 	sub.w	r8, r6, r7
 80061ea:	608b      	str	r3, [r1, #8]
 80061ec:	f1b8 0f00 	cmp.w	r8, #0
 80061f0:	dde9      	ble.n	80061c6 <__sflush_r+0xae>
 80061f2:	6a21      	ldr	r1, [r4, #32]
 80061f4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80061f6:	4643      	mov	r3, r8
 80061f8:	463a      	mov	r2, r7
 80061fa:	4628      	mov	r0, r5
 80061fc:	47b0      	blx	r6
 80061fe:	2800      	cmp	r0, #0
 8006200:	dc08      	bgt.n	8006214 <__sflush_r+0xfc>
 8006202:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006206:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800620a:	81a3      	strh	r3, [r4, #12]
 800620c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006210:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006214:	4407      	add	r7, r0
 8006216:	eba8 0800 	sub.w	r8, r8, r0
 800621a:	e7e7      	b.n	80061ec <__sflush_r+0xd4>
 800621c:	dfbffffe 	.word	0xdfbffffe

08006220 <_fflush_r>:
 8006220:	b538      	push	{r3, r4, r5, lr}
 8006222:	690b      	ldr	r3, [r1, #16]
 8006224:	4605      	mov	r5, r0
 8006226:	460c      	mov	r4, r1
 8006228:	b913      	cbnz	r3, 8006230 <_fflush_r+0x10>
 800622a:	2500      	movs	r5, #0
 800622c:	4628      	mov	r0, r5
 800622e:	bd38      	pop	{r3, r4, r5, pc}
 8006230:	b118      	cbz	r0, 800623a <_fflush_r+0x1a>
 8006232:	6a03      	ldr	r3, [r0, #32]
 8006234:	b90b      	cbnz	r3, 800623a <_fflush_r+0x1a>
 8006236:	f7ff f8bb 	bl	80053b0 <__sinit>
 800623a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800623e:	2b00      	cmp	r3, #0
 8006240:	d0f3      	beq.n	800622a <_fflush_r+0xa>
 8006242:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8006244:	07d0      	lsls	r0, r2, #31
 8006246:	d404      	bmi.n	8006252 <_fflush_r+0x32>
 8006248:	0599      	lsls	r1, r3, #22
 800624a:	d402      	bmi.n	8006252 <_fflush_r+0x32>
 800624c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800624e:	f7ff fa32 	bl	80056b6 <__retarget_lock_acquire_recursive>
 8006252:	4628      	mov	r0, r5
 8006254:	4621      	mov	r1, r4
 8006256:	f7ff ff5f 	bl	8006118 <__sflush_r>
 800625a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800625c:	07da      	lsls	r2, r3, #31
 800625e:	4605      	mov	r5, r0
 8006260:	d4e4      	bmi.n	800622c <_fflush_r+0xc>
 8006262:	89a3      	ldrh	r3, [r4, #12]
 8006264:	059b      	lsls	r3, r3, #22
 8006266:	d4e1      	bmi.n	800622c <_fflush_r+0xc>
 8006268:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800626a:	f7ff fa25 	bl	80056b8 <__retarget_lock_release_recursive>
 800626e:	e7dd      	b.n	800622c <_fflush_r+0xc>

08006270 <_putc_r>:
 8006270:	b570      	push	{r4, r5, r6, lr}
 8006272:	460d      	mov	r5, r1
 8006274:	4614      	mov	r4, r2
 8006276:	4606      	mov	r6, r0
 8006278:	b118      	cbz	r0, 8006282 <_putc_r+0x12>
 800627a:	6a03      	ldr	r3, [r0, #32]
 800627c:	b90b      	cbnz	r3, 8006282 <_putc_r+0x12>
 800627e:	f7ff f897 	bl	80053b0 <__sinit>
 8006282:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006284:	07d8      	lsls	r0, r3, #31
 8006286:	d405      	bmi.n	8006294 <_putc_r+0x24>
 8006288:	89a3      	ldrh	r3, [r4, #12]
 800628a:	0599      	lsls	r1, r3, #22
 800628c:	d402      	bmi.n	8006294 <_putc_r+0x24>
 800628e:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006290:	f7ff fa11 	bl	80056b6 <__retarget_lock_acquire_recursive>
 8006294:	68a3      	ldr	r3, [r4, #8]
 8006296:	3b01      	subs	r3, #1
 8006298:	2b00      	cmp	r3, #0
 800629a:	60a3      	str	r3, [r4, #8]
 800629c:	da05      	bge.n	80062aa <_putc_r+0x3a>
 800629e:	69a2      	ldr	r2, [r4, #24]
 80062a0:	4293      	cmp	r3, r2
 80062a2:	db12      	blt.n	80062ca <_putc_r+0x5a>
 80062a4:	b2eb      	uxtb	r3, r5
 80062a6:	2b0a      	cmp	r3, #10
 80062a8:	d00f      	beq.n	80062ca <_putc_r+0x5a>
 80062aa:	6823      	ldr	r3, [r4, #0]
 80062ac:	1c5a      	adds	r2, r3, #1
 80062ae:	6022      	str	r2, [r4, #0]
 80062b0:	701d      	strb	r5, [r3, #0]
 80062b2:	b2ed      	uxtb	r5, r5
 80062b4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80062b6:	07da      	lsls	r2, r3, #31
 80062b8:	d405      	bmi.n	80062c6 <_putc_r+0x56>
 80062ba:	89a3      	ldrh	r3, [r4, #12]
 80062bc:	059b      	lsls	r3, r3, #22
 80062be:	d402      	bmi.n	80062c6 <_putc_r+0x56>
 80062c0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80062c2:	f7ff f9f9 	bl	80056b8 <__retarget_lock_release_recursive>
 80062c6:	4628      	mov	r0, r5
 80062c8:	bd70      	pop	{r4, r5, r6, pc}
 80062ca:	4629      	mov	r1, r5
 80062cc:	4622      	mov	r2, r4
 80062ce:	4630      	mov	r0, r6
 80062d0:	f000 f802 	bl	80062d8 <__swbuf_r>
 80062d4:	4605      	mov	r5, r0
 80062d6:	e7ed      	b.n	80062b4 <_putc_r+0x44>

080062d8 <__swbuf_r>:
 80062d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80062da:	460e      	mov	r6, r1
 80062dc:	4614      	mov	r4, r2
 80062de:	4605      	mov	r5, r0
 80062e0:	b118      	cbz	r0, 80062ea <__swbuf_r+0x12>
 80062e2:	6a03      	ldr	r3, [r0, #32]
 80062e4:	b90b      	cbnz	r3, 80062ea <__swbuf_r+0x12>
 80062e6:	f7ff f863 	bl	80053b0 <__sinit>
 80062ea:	69a3      	ldr	r3, [r4, #24]
 80062ec:	60a3      	str	r3, [r4, #8]
 80062ee:	89a3      	ldrh	r3, [r4, #12]
 80062f0:	071a      	lsls	r2, r3, #28
 80062f2:	d501      	bpl.n	80062f8 <__swbuf_r+0x20>
 80062f4:	6923      	ldr	r3, [r4, #16]
 80062f6:	b943      	cbnz	r3, 800630a <__swbuf_r+0x32>
 80062f8:	4621      	mov	r1, r4
 80062fa:	4628      	mov	r0, r5
 80062fc:	f000 f82a 	bl	8006354 <__swsetup_r>
 8006300:	b118      	cbz	r0, 800630a <__swbuf_r+0x32>
 8006302:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8006306:	4638      	mov	r0, r7
 8006308:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800630a:	6823      	ldr	r3, [r4, #0]
 800630c:	6922      	ldr	r2, [r4, #16]
 800630e:	1a98      	subs	r0, r3, r2
 8006310:	6963      	ldr	r3, [r4, #20]
 8006312:	b2f6      	uxtb	r6, r6
 8006314:	4283      	cmp	r3, r0
 8006316:	4637      	mov	r7, r6
 8006318:	dc05      	bgt.n	8006326 <__swbuf_r+0x4e>
 800631a:	4621      	mov	r1, r4
 800631c:	4628      	mov	r0, r5
 800631e:	f7ff ff7f 	bl	8006220 <_fflush_r>
 8006322:	2800      	cmp	r0, #0
 8006324:	d1ed      	bne.n	8006302 <__swbuf_r+0x2a>
 8006326:	68a3      	ldr	r3, [r4, #8]
 8006328:	3b01      	subs	r3, #1
 800632a:	60a3      	str	r3, [r4, #8]
 800632c:	6823      	ldr	r3, [r4, #0]
 800632e:	1c5a      	adds	r2, r3, #1
 8006330:	6022      	str	r2, [r4, #0]
 8006332:	701e      	strb	r6, [r3, #0]
 8006334:	6962      	ldr	r2, [r4, #20]
 8006336:	1c43      	adds	r3, r0, #1
 8006338:	429a      	cmp	r2, r3
 800633a:	d004      	beq.n	8006346 <__swbuf_r+0x6e>
 800633c:	89a3      	ldrh	r3, [r4, #12]
 800633e:	07db      	lsls	r3, r3, #31
 8006340:	d5e1      	bpl.n	8006306 <__swbuf_r+0x2e>
 8006342:	2e0a      	cmp	r6, #10
 8006344:	d1df      	bne.n	8006306 <__swbuf_r+0x2e>
 8006346:	4621      	mov	r1, r4
 8006348:	4628      	mov	r0, r5
 800634a:	f7ff ff69 	bl	8006220 <_fflush_r>
 800634e:	2800      	cmp	r0, #0
 8006350:	d0d9      	beq.n	8006306 <__swbuf_r+0x2e>
 8006352:	e7d6      	b.n	8006302 <__swbuf_r+0x2a>

08006354 <__swsetup_r>:
 8006354:	b538      	push	{r3, r4, r5, lr}
 8006356:	4b29      	ldr	r3, [pc, #164]	@ (80063fc <__swsetup_r+0xa8>)
 8006358:	4605      	mov	r5, r0
 800635a:	6818      	ldr	r0, [r3, #0]
 800635c:	460c      	mov	r4, r1
 800635e:	b118      	cbz	r0, 8006368 <__swsetup_r+0x14>
 8006360:	6a03      	ldr	r3, [r0, #32]
 8006362:	b90b      	cbnz	r3, 8006368 <__swsetup_r+0x14>
 8006364:	f7ff f824 	bl	80053b0 <__sinit>
 8006368:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800636c:	0719      	lsls	r1, r3, #28
 800636e:	d422      	bmi.n	80063b6 <__swsetup_r+0x62>
 8006370:	06da      	lsls	r2, r3, #27
 8006372:	d407      	bmi.n	8006384 <__swsetup_r+0x30>
 8006374:	2209      	movs	r2, #9
 8006376:	602a      	str	r2, [r5, #0]
 8006378:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800637c:	81a3      	strh	r3, [r4, #12]
 800637e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006382:	e033      	b.n	80063ec <__swsetup_r+0x98>
 8006384:	0758      	lsls	r0, r3, #29
 8006386:	d512      	bpl.n	80063ae <__swsetup_r+0x5a>
 8006388:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800638a:	b141      	cbz	r1, 800639e <__swsetup_r+0x4a>
 800638c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006390:	4299      	cmp	r1, r3
 8006392:	d002      	beq.n	800639a <__swsetup_r+0x46>
 8006394:	4628      	mov	r0, r5
 8006396:	f7ff f99f 	bl	80056d8 <_free_r>
 800639a:	2300      	movs	r3, #0
 800639c:	6363      	str	r3, [r4, #52]	@ 0x34
 800639e:	89a3      	ldrh	r3, [r4, #12]
 80063a0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80063a4:	81a3      	strh	r3, [r4, #12]
 80063a6:	2300      	movs	r3, #0
 80063a8:	6063      	str	r3, [r4, #4]
 80063aa:	6923      	ldr	r3, [r4, #16]
 80063ac:	6023      	str	r3, [r4, #0]
 80063ae:	89a3      	ldrh	r3, [r4, #12]
 80063b0:	f043 0308 	orr.w	r3, r3, #8
 80063b4:	81a3      	strh	r3, [r4, #12]
 80063b6:	6923      	ldr	r3, [r4, #16]
 80063b8:	b94b      	cbnz	r3, 80063ce <__swsetup_r+0x7a>
 80063ba:	89a3      	ldrh	r3, [r4, #12]
 80063bc:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80063c0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80063c4:	d003      	beq.n	80063ce <__swsetup_r+0x7a>
 80063c6:	4621      	mov	r1, r4
 80063c8:	4628      	mov	r0, r5
 80063ca:	f000 f897 	bl	80064fc <__smakebuf_r>
 80063ce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80063d2:	f013 0201 	ands.w	r2, r3, #1
 80063d6:	d00a      	beq.n	80063ee <__swsetup_r+0x9a>
 80063d8:	2200      	movs	r2, #0
 80063da:	60a2      	str	r2, [r4, #8]
 80063dc:	6962      	ldr	r2, [r4, #20]
 80063de:	4252      	negs	r2, r2
 80063e0:	61a2      	str	r2, [r4, #24]
 80063e2:	6922      	ldr	r2, [r4, #16]
 80063e4:	b942      	cbnz	r2, 80063f8 <__swsetup_r+0xa4>
 80063e6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80063ea:	d1c5      	bne.n	8006378 <__swsetup_r+0x24>
 80063ec:	bd38      	pop	{r3, r4, r5, pc}
 80063ee:	0799      	lsls	r1, r3, #30
 80063f0:	bf58      	it	pl
 80063f2:	6962      	ldrpl	r2, [r4, #20]
 80063f4:	60a2      	str	r2, [r4, #8]
 80063f6:	e7f4      	b.n	80063e2 <__swsetup_r+0x8e>
 80063f8:	2000      	movs	r0, #0
 80063fa:	e7f7      	b.n	80063ec <__swsetup_r+0x98>
 80063fc:	20000174 	.word	0x20000174

08006400 <memmove>:
 8006400:	4288      	cmp	r0, r1
 8006402:	b510      	push	{r4, lr}
 8006404:	eb01 0402 	add.w	r4, r1, r2
 8006408:	d902      	bls.n	8006410 <memmove+0x10>
 800640a:	4284      	cmp	r4, r0
 800640c:	4623      	mov	r3, r4
 800640e:	d807      	bhi.n	8006420 <memmove+0x20>
 8006410:	1e43      	subs	r3, r0, #1
 8006412:	42a1      	cmp	r1, r4
 8006414:	d008      	beq.n	8006428 <memmove+0x28>
 8006416:	f811 2b01 	ldrb.w	r2, [r1], #1
 800641a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800641e:	e7f8      	b.n	8006412 <memmove+0x12>
 8006420:	4402      	add	r2, r0
 8006422:	4601      	mov	r1, r0
 8006424:	428a      	cmp	r2, r1
 8006426:	d100      	bne.n	800642a <memmove+0x2a>
 8006428:	bd10      	pop	{r4, pc}
 800642a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800642e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006432:	e7f7      	b.n	8006424 <memmove+0x24>

08006434 <_sbrk_r>:
 8006434:	b538      	push	{r3, r4, r5, lr}
 8006436:	4d06      	ldr	r5, [pc, #24]	@ (8006450 <_sbrk_r+0x1c>)
 8006438:	2300      	movs	r3, #0
 800643a:	4604      	mov	r4, r0
 800643c:	4608      	mov	r0, r1
 800643e:	602b      	str	r3, [r5, #0]
 8006440:	f7fa fb06 	bl	8000a50 <_sbrk>
 8006444:	1c43      	adds	r3, r0, #1
 8006446:	d102      	bne.n	800644e <_sbrk_r+0x1a>
 8006448:	682b      	ldr	r3, [r5, #0]
 800644a:	b103      	cbz	r3, 800644e <_sbrk_r+0x1a>
 800644c:	6023      	str	r3, [r4, #0]
 800644e:	bd38      	pop	{r3, r4, r5, pc}
 8006450:	20004dc0 	.word	0x20004dc0

08006454 <_realloc_r>:
 8006454:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006458:	4680      	mov	r8, r0
 800645a:	4615      	mov	r5, r2
 800645c:	460c      	mov	r4, r1
 800645e:	b921      	cbnz	r1, 800646a <_realloc_r+0x16>
 8006460:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006464:	4611      	mov	r1, r2
 8006466:	f7ff b9a3 	b.w	80057b0 <_malloc_r>
 800646a:	b92a      	cbnz	r2, 8006478 <_realloc_r+0x24>
 800646c:	f7ff f934 	bl	80056d8 <_free_r>
 8006470:	2400      	movs	r4, #0
 8006472:	4620      	mov	r0, r4
 8006474:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006478:	f000 f89e 	bl	80065b8 <_malloc_usable_size_r>
 800647c:	4285      	cmp	r5, r0
 800647e:	4606      	mov	r6, r0
 8006480:	d802      	bhi.n	8006488 <_realloc_r+0x34>
 8006482:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8006486:	d8f4      	bhi.n	8006472 <_realloc_r+0x1e>
 8006488:	4629      	mov	r1, r5
 800648a:	4640      	mov	r0, r8
 800648c:	f7ff f990 	bl	80057b0 <_malloc_r>
 8006490:	4607      	mov	r7, r0
 8006492:	2800      	cmp	r0, #0
 8006494:	d0ec      	beq.n	8006470 <_realloc_r+0x1c>
 8006496:	42b5      	cmp	r5, r6
 8006498:	462a      	mov	r2, r5
 800649a:	4621      	mov	r1, r4
 800649c:	bf28      	it	cs
 800649e:	4632      	movcs	r2, r6
 80064a0:	f7ff f90b 	bl	80056ba <memcpy>
 80064a4:	4621      	mov	r1, r4
 80064a6:	4640      	mov	r0, r8
 80064a8:	f7ff f916 	bl	80056d8 <_free_r>
 80064ac:	463c      	mov	r4, r7
 80064ae:	e7e0      	b.n	8006472 <_realloc_r+0x1e>

080064b0 <__swhatbuf_r>:
 80064b0:	b570      	push	{r4, r5, r6, lr}
 80064b2:	460c      	mov	r4, r1
 80064b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80064b8:	2900      	cmp	r1, #0
 80064ba:	b096      	sub	sp, #88	@ 0x58
 80064bc:	4615      	mov	r5, r2
 80064be:	461e      	mov	r6, r3
 80064c0:	da0d      	bge.n	80064de <__swhatbuf_r+0x2e>
 80064c2:	89a3      	ldrh	r3, [r4, #12]
 80064c4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80064c8:	f04f 0100 	mov.w	r1, #0
 80064cc:	bf14      	ite	ne
 80064ce:	2340      	movne	r3, #64	@ 0x40
 80064d0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80064d4:	2000      	movs	r0, #0
 80064d6:	6031      	str	r1, [r6, #0]
 80064d8:	602b      	str	r3, [r5, #0]
 80064da:	b016      	add	sp, #88	@ 0x58
 80064dc:	bd70      	pop	{r4, r5, r6, pc}
 80064de:	466a      	mov	r2, sp
 80064e0:	f000 f848 	bl	8006574 <_fstat_r>
 80064e4:	2800      	cmp	r0, #0
 80064e6:	dbec      	blt.n	80064c2 <__swhatbuf_r+0x12>
 80064e8:	9901      	ldr	r1, [sp, #4]
 80064ea:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80064ee:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80064f2:	4259      	negs	r1, r3
 80064f4:	4159      	adcs	r1, r3
 80064f6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80064fa:	e7eb      	b.n	80064d4 <__swhatbuf_r+0x24>

080064fc <__smakebuf_r>:
 80064fc:	898b      	ldrh	r3, [r1, #12]
 80064fe:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006500:	079d      	lsls	r5, r3, #30
 8006502:	4606      	mov	r6, r0
 8006504:	460c      	mov	r4, r1
 8006506:	d507      	bpl.n	8006518 <__smakebuf_r+0x1c>
 8006508:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800650c:	6023      	str	r3, [r4, #0]
 800650e:	6123      	str	r3, [r4, #16]
 8006510:	2301      	movs	r3, #1
 8006512:	6163      	str	r3, [r4, #20]
 8006514:	b003      	add	sp, #12
 8006516:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006518:	ab01      	add	r3, sp, #4
 800651a:	466a      	mov	r2, sp
 800651c:	f7ff ffc8 	bl	80064b0 <__swhatbuf_r>
 8006520:	9f00      	ldr	r7, [sp, #0]
 8006522:	4605      	mov	r5, r0
 8006524:	4639      	mov	r1, r7
 8006526:	4630      	mov	r0, r6
 8006528:	f7ff f942 	bl	80057b0 <_malloc_r>
 800652c:	b948      	cbnz	r0, 8006542 <__smakebuf_r+0x46>
 800652e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006532:	059a      	lsls	r2, r3, #22
 8006534:	d4ee      	bmi.n	8006514 <__smakebuf_r+0x18>
 8006536:	f023 0303 	bic.w	r3, r3, #3
 800653a:	f043 0302 	orr.w	r3, r3, #2
 800653e:	81a3      	strh	r3, [r4, #12]
 8006540:	e7e2      	b.n	8006508 <__smakebuf_r+0xc>
 8006542:	89a3      	ldrh	r3, [r4, #12]
 8006544:	6020      	str	r0, [r4, #0]
 8006546:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800654a:	81a3      	strh	r3, [r4, #12]
 800654c:	9b01      	ldr	r3, [sp, #4]
 800654e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8006552:	b15b      	cbz	r3, 800656c <__smakebuf_r+0x70>
 8006554:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006558:	4630      	mov	r0, r6
 800655a:	f000 f81d 	bl	8006598 <_isatty_r>
 800655e:	b128      	cbz	r0, 800656c <__smakebuf_r+0x70>
 8006560:	89a3      	ldrh	r3, [r4, #12]
 8006562:	f023 0303 	bic.w	r3, r3, #3
 8006566:	f043 0301 	orr.w	r3, r3, #1
 800656a:	81a3      	strh	r3, [r4, #12]
 800656c:	89a3      	ldrh	r3, [r4, #12]
 800656e:	431d      	orrs	r5, r3
 8006570:	81a5      	strh	r5, [r4, #12]
 8006572:	e7cf      	b.n	8006514 <__smakebuf_r+0x18>

08006574 <_fstat_r>:
 8006574:	b538      	push	{r3, r4, r5, lr}
 8006576:	4d07      	ldr	r5, [pc, #28]	@ (8006594 <_fstat_r+0x20>)
 8006578:	2300      	movs	r3, #0
 800657a:	4604      	mov	r4, r0
 800657c:	4608      	mov	r0, r1
 800657e:	4611      	mov	r1, r2
 8006580:	602b      	str	r3, [r5, #0]
 8006582:	f7fa fa5c 	bl	8000a3e <_fstat>
 8006586:	1c43      	adds	r3, r0, #1
 8006588:	d102      	bne.n	8006590 <_fstat_r+0x1c>
 800658a:	682b      	ldr	r3, [r5, #0]
 800658c:	b103      	cbz	r3, 8006590 <_fstat_r+0x1c>
 800658e:	6023      	str	r3, [r4, #0]
 8006590:	bd38      	pop	{r3, r4, r5, pc}
 8006592:	bf00      	nop
 8006594:	20004dc0 	.word	0x20004dc0

08006598 <_isatty_r>:
 8006598:	b538      	push	{r3, r4, r5, lr}
 800659a:	4d06      	ldr	r5, [pc, #24]	@ (80065b4 <_isatty_r+0x1c>)
 800659c:	2300      	movs	r3, #0
 800659e:	4604      	mov	r4, r0
 80065a0:	4608      	mov	r0, r1
 80065a2:	602b      	str	r3, [r5, #0]
 80065a4:	f7fa fa50 	bl	8000a48 <_isatty>
 80065a8:	1c43      	adds	r3, r0, #1
 80065aa:	d102      	bne.n	80065b2 <_isatty_r+0x1a>
 80065ac:	682b      	ldr	r3, [r5, #0]
 80065ae:	b103      	cbz	r3, 80065b2 <_isatty_r+0x1a>
 80065b0:	6023      	str	r3, [r4, #0]
 80065b2:	bd38      	pop	{r3, r4, r5, pc}
 80065b4:	20004dc0 	.word	0x20004dc0

080065b8 <_malloc_usable_size_r>:
 80065b8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80065bc:	1f18      	subs	r0, r3, #4
 80065be:	2b00      	cmp	r3, #0
 80065c0:	bfbc      	itt	lt
 80065c2:	580b      	ldrlt	r3, [r1, r0]
 80065c4:	18c0      	addlt	r0, r0, r3
 80065c6:	4770      	bx	lr

080065c8 <_init>:
 80065c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80065ca:	bf00      	nop
 80065cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80065ce:	bc08      	pop	{r3}
 80065d0:	469e      	mov	lr, r3
 80065d2:	4770      	bx	lr

080065d4 <_fini>:
 80065d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80065d6:	bf00      	nop
 80065d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80065da:	bc08      	pop	{r3}
 80065dc:	469e      	mov	lr, r3
 80065de:	4770      	bx	lr
