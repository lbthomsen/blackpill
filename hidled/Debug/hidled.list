
hidled.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006370  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001d0  08006510  08006510  00016510  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080066e0  080066e0  000201cc  2**0
                  CONTENTS
  4 .ARM          00000008  080066e0  080066e0  000166e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080066e8  080066e8  000201cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080066e8  080066e8  000166e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080066ec  080066ec  000166ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001cc  20000000  080066f0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004a08  200001cc  080068bc  000201cc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004bd4  080068bc  00024bd4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201cc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002c376  00000000  00000000  000201fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000054c5  00000000  00000000  0004c572  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001790  00000000  00000000  00051a38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001708  00000000  00000000  000531c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001c457  00000000  00000000  000548d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00023ded  00000000  00000000  00070d27  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009bd31  00000000  00000000  00094b14  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00130845  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004960  00000000  00000000  00130898  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loc    0001804f  00000000  00000000  001351f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001cc 	.word	0x200001cc
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080064f8 	.word	0x080064f8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001d0 	.word	0x200001d0
 80001dc:	080064f8 	.word	0x080064f8

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002a4:	f000 b96e 	b.w	8000584 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468c      	mov	ip, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	f040 8083 	bne.w	80003d6 <__udivmoddi4+0x116>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4617      	mov	r7, r2
 80002d4:	d947      	bls.n	8000366 <__udivmoddi4+0xa6>
 80002d6:	fab2 f282 	clz	r2, r2
 80002da:	b142      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002dc:	f1c2 0020 	rsb	r0, r2, #32
 80002e0:	fa24 f000 	lsr.w	r0, r4, r0
 80002e4:	4091      	lsls	r1, r2
 80002e6:	4097      	lsls	r7, r2
 80002e8:	ea40 0c01 	orr.w	ip, r0, r1
 80002ec:	4094      	lsls	r4, r2
 80002ee:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002f2:	0c23      	lsrs	r3, r4, #16
 80002f4:	fbbc f6f8 	udiv	r6, ip, r8
 80002f8:	fa1f fe87 	uxth.w	lr, r7
 80002fc:	fb08 c116 	mls	r1, r8, r6, ip
 8000300:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000304:	fb06 f10e 	mul.w	r1, r6, lr
 8000308:	4299      	cmp	r1, r3
 800030a:	d909      	bls.n	8000320 <__udivmoddi4+0x60>
 800030c:	18fb      	adds	r3, r7, r3
 800030e:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000312:	f080 8119 	bcs.w	8000548 <__udivmoddi4+0x288>
 8000316:	4299      	cmp	r1, r3
 8000318:	f240 8116 	bls.w	8000548 <__udivmoddi4+0x288>
 800031c:	3e02      	subs	r6, #2
 800031e:	443b      	add	r3, r7
 8000320:	1a5b      	subs	r3, r3, r1
 8000322:	b2a4      	uxth	r4, r4
 8000324:	fbb3 f0f8 	udiv	r0, r3, r8
 8000328:	fb08 3310 	mls	r3, r8, r0, r3
 800032c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000330:	fb00 fe0e 	mul.w	lr, r0, lr
 8000334:	45a6      	cmp	lr, r4
 8000336:	d909      	bls.n	800034c <__udivmoddi4+0x8c>
 8000338:	193c      	adds	r4, r7, r4
 800033a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800033e:	f080 8105 	bcs.w	800054c <__udivmoddi4+0x28c>
 8000342:	45a6      	cmp	lr, r4
 8000344:	f240 8102 	bls.w	800054c <__udivmoddi4+0x28c>
 8000348:	3802      	subs	r0, #2
 800034a:	443c      	add	r4, r7
 800034c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000350:	eba4 040e 	sub.w	r4, r4, lr
 8000354:	2600      	movs	r6, #0
 8000356:	b11d      	cbz	r5, 8000360 <__udivmoddi4+0xa0>
 8000358:	40d4      	lsrs	r4, r2
 800035a:	2300      	movs	r3, #0
 800035c:	e9c5 4300 	strd	r4, r3, [r5]
 8000360:	4631      	mov	r1, r6
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	b902      	cbnz	r2, 800036a <__udivmoddi4+0xaa>
 8000368:	deff      	udf	#255	; 0xff
 800036a:	fab2 f282 	clz	r2, r2
 800036e:	2a00      	cmp	r2, #0
 8000370:	d150      	bne.n	8000414 <__udivmoddi4+0x154>
 8000372:	1bcb      	subs	r3, r1, r7
 8000374:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000378:	fa1f f887 	uxth.w	r8, r7
 800037c:	2601      	movs	r6, #1
 800037e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000382:	0c21      	lsrs	r1, r4, #16
 8000384:	fb0e 331c 	mls	r3, lr, ip, r3
 8000388:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800038c:	fb08 f30c 	mul.w	r3, r8, ip
 8000390:	428b      	cmp	r3, r1
 8000392:	d907      	bls.n	80003a4 <__udivmoddi4+0xe4>
 8000394:	1879      	adds	r1, r7, r1
 8000396:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 800039a:	d202      	bcs.n	80003a2 <__udivmoddi4+0xe2>
 800039c:	428b      	cmp	r3, r1
 800039e:	f200 80e9 	bhi.w	8000574 <__udivmoddi4+0x2b4>
 80003a2:	4684      	mov	ip, r0
 80003a4:	1ac9      	subs	r1, r1, r3
 80003a6:	b2a3      	uxth	r3, r4
 80003a8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003ac:	fb0e 1110 	mls	r1, lr, r0, r1
 80003b0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003b4:	fb08 f800 	mul.w	r8, r8, r0
 80003b8:	45a0      	cmp	r8, r4
 80003ba:	d907      	bls.n	80003cc <__udivmoddi4+0x10c>
 80003bc:	193c      	adds	r4, r7, r4
 80003be:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x10a>
 80003c4:	45a0      	cmp	r8, r4
 80003c6:	f200 80d9 	bhi.w	800057c <__udivmoddi4+0x2bc>
 80003ca:	4618      	mov	r0, r3
 80003cc:	eba4 0408 	sub.w	r4, r4, r8
 80003d0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003d4:	e7bf      	b.n	8000356 <__udivmoddi4+0x96>
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d909      	bls.n	80003ee <__udivmoddi4+0x12e>
 80003da:	2d00      	cmp	r5, #0
 80003dc:	f000 80b1 	beq.w	8000542 <__udivmoddi4+0x282>
 80003e0:	2600      	movs	r6, #0
 80003e2:	e9c5 0100 	strd	r0, r1, [r5]
 80003e6:	4630      	mov	r0, r6
 80003e8:	4631      	mov	r1, r6
 80003ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ee:	fab3 f683 	clz	r6, r3
 80003f2:	2e00      	cmp	r6, #0
 80003f4:	d14a      	bne.n	800048c <__udivmoddi4+0x1cc>
 80003f6:	428b      	cmp	r3, r1
 80003f8:	d302      	bcc.n	8000400 <__udivmoddi4+0x140>
 80003fa:	4282      	cmp	r2, r0
 80003fc:	f200 80b8 	bhi.w	8000570 <__udivmoddi4+0x2b0>
 8000400:	1a84      	subs	r4, r0, r2
 8000402:	eb61 0103 	sbc.w	r1, r1, r3
 8000406:	2001      	movs	r0, #1
 8000408:	468c      	mov	ip, r1
 800040a:	2d00      	cmp	r5, #0
 800040c:	d0a8      	beq.n	8000360 <__udivmoddi4+0xa0>
 800040e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000412:	e7a5      	b.n	8000360 <__udivmoddi4+0xa0>
 8000414:	f1c2 0320 	rsb	r3, r2, #32
 8000418:	fa20 f603 	lsr.w	r6, r0, r3
 800041c:	4097      	lsls	r7, r2
 800041e:	fa01 f002 	lsl.w	r0, r1, r2
 8000422:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000426:	40d9      	lsrs	r1, r3
 8000428:	4330      	orrs	r0, r6
 800042a:	0c03      	lsrs	r3, r0, #16
 800042c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000430:	fa1f f887 	uxth.w	r8, r7
 8000434:	fb0e 1116 	mls	r1, lr, r6, r1
 8000438:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800043c:	fb06 f108 	mul.w	r1, r6, r8
 8000440:	4299      	cmp	r1, r3
 8000442:	fa04 f402 	lsl.w	r4, r4, r2
 8000446:	d909      	bls.n	800045c <__udivmoddi4+0x19c>
 8000448:	18fb      	adds	r3, r7, r3
 800044a:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 800044e:	f080 808d 	bcs.w	800056c <__udivmoddi4+0x2ac>
 8000452:	4299      	cmp	r1, r3
 8000454:	f240 808a 	bls.w	800056c <__udivmoddi4+0x2ac>
 8000458:	3e02      	subs	r6, #2
 800045a:	443b      	add	r3, r7
 800045c:	1a5b      	subs	r3, r3, r1
 800045e:	b281      	uxth	r1, r0
 8000460:	fbb3 f0fe 	udiv	r0, r3, lr
 8000464:	fb0e 3310 	mls	r3, lr, r0, r3
 8000468:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046c:	fb00 f308 	mul.w	r3, r0, r8
 8000470:	428b      	cmp	r3, r1
 8000472:	d907      	bls.n	8000484 <__udivmoddi4+0x1c4>
 8000474:	1879      	adds	r1, r7, r1
 8000476:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 800047a:	d273      	bcs.n	8000564 <__udivmoddi4+0x2a4>
 800047c:	428b      	cmp	r3, r1
 800047e:	d971      	bls.n	8000564 <__udivmoddi4+0x2a4>
 8000480:	3802      	subs	r0, #2
 8000482:	4439      	add	r1, r7
 8000484:	1acb      	subs	r3, r1, r3
 8000486:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800048a:	e778      	b.n	800037e <__udivmoddi4+0xbe>
 800048c:	f1c6 0c20 	rsb	ip, r6, #32
 8000490:	fa03 f406 	lsl.w	r4, r3, r6
 8000494:	fa22 f30c 	lsr.w	r3, r2, ip
 8000498:	431c      	orrs	r4, r3
 800049a:	fa20 f70c 	lsr.w	r7, r0, ip
 800049e:	fa01 f306 	lsl.w	r3, r1, r6
 80004a2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004a6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004aa:	431f      	orrs	r7, r3
 80004ac:	0c3b      	lsrs	r3, r7, #16
 80004ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80004b2:	fa1f f884 	uxth.w	r8, r4
 80004b6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ba:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004be:	fb09 fa08 	mul.w	sl, r9, r8
 80004c2:	458a      	cmp	sl, r1
 80004c4:	fa02 f206 	lsl.w	r2, r2, r6
 80004c8:	fa00 f306 	lsl.w	r3, r0, r6
 80004cc:	d908      	bls.n	80004e0 <__udivmoddi4+0x220>
 80004ce:	1861      	adds	r1, r4, r1
 80004d0:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80004d4:	d248      	bcs.n	8000568 <__udivmoddi4+0x2a8>
 80004d6:	458a      	cmp	sl, r1
 80004d8:	d946      	bls.n	8000568 <__udivmoddi4+0x2a8>
 80004da:	f1a9 0902 	sub.w	r9, r9, #2
 80004de:	4421      	add	r1, r4
 80004e0:	eba1 010a 	sub.w	r1, r1, sl
 80004e4:	b2bf      	uxth	r7, r7
 80004e6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ea:	fb0e 1110 	mls	r1, lr, r0, r1
 80004ee:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004f2:	fb00 f808 	mul.w	r8, r0, r8
 80004f6:	45b8      	cmp	r8, r7
 80004f8:	d907      	bls.n	800050a <__udivmoddi4+0x24a>
 80004fa:	19e7      	adds	r7, r4, r7
 80004fc:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000500:	d22e      	bcs.n	8000560 <__udivmoddi4+0x2a0>
 8000502:	45b8      	cmp	r8, r7
 8000504:	d92c      	bls.n	8000560 <__udivmoddi4+0x2a0>
 8000506:	3802      	subs	r0, #2
 8000508:	4427      	add	r7, r4
 800050a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800050e:	eba7 0708 	sub.w	r7, r7, r8
 8000512:	fba0 8902 	umull	r8, r9, r0, r2
 8000516:	454f      	cmp	r7, r9
 8000518:	46c6      	mov	lr, r8
 800051a:	4649      	mov	r1, r9
 800051c:	d31a      	bcc.n	8000554 <__udivmoddi4+0x294>
 800051e:	d017      	beq.n	8000550 <__udivmoddi4+0x290>
 8000520:	b15d      	cbz	r5, 800053a <__udivmoddi4+0x27a>
 8000522:	ebb3 020e 	subs.w	r2, r3, lr
 8000526:	eb67 0701 	sbc.w	r7, r7, r1
 800052a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800052e:	40f2      	lsrs	r2, r6
 8000530:	ea4c 0202 	orr.w	r2, ip, r2
 8000534:	40f7      	lsrs	r7, r6
 8000536:	e9c5 2700 	strd	r2, r7, [r5]
 800053a:	2600      	movs	r6, #0
 800053c:	4631      	mov	r1, r6
 800053e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e70b      	b.n	8000360 <__udivmoddi4+0xa0>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e9      	b.n	8000320 <__udivmoddi4+0x60>
 800054c:	4618      	mov	r0, r3
 800054e:	e6fd      	b.n	800034c <__udivmoddi4+0x8c>
 8000550:	4543      	cmp	r3, r8
 8000552:	d2e5      	bcs.n	8000520 <__udivmoddi4+0x260>
 8000554:	ebb8 0e02 	subs.w	lr, r8, r2
 8000558:	eb69 0104 	sbc.w	r1, r9, r4
 800055c:	3801      	subs	r0, #1
 800055e:	e7df      	b.n	8000520 <__udivmoddi4+0x260>
 8000560:	4608      	mov	r0, r1
 8000562:	e7d2      	b.n	800050a <__udivmoddi4+0x24a>
 8000564:	4660      	mov	r0, ip
 8000566:	e78d      	b.n	8000484 <__udivmoddi4+0x1c4>
 8000568:	4681      	mov	r9, r0
 800056a:	e7b9      	b.n	80004e0 <__udivmoddi4+0x220>
 800056c:	4666      	mov	r6, ip
 800056e:	e775      	b.n	800045c <__udivmoddi4+0x19c>
 8000570:	4630      	mov	r0, r6
 8000572:	e74a      	b.n	800040a <__udivmoddi4+0x14a>
 8000574:	f1ac 0c02 	sub.w	ip, ip, #2
 8000578:	4439      	add	r1, r7
 800057a:	e713      	b.n	80003a4 <__udivmoddi4+0xe4>
 800057c:	3802      	subs	r0, #2
 800057e:	443c      	add	r4, r7
 8000580:	e724      	b.n	80003cc <__udivmoddi4+0x10c>
 8000582:	bf00      	nop

08000584 <__aeabi_idiv0>:
 8000584:	4770      	bx	lr
 8000586:	bf00      	nop

08000588 <vApplicationGetIdleTaskMemory>:
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000588:	4b03      	ldr	r3, [pc, #12]	; (8000598 <vApplicationGetIdleTaskMemory+0x10>)
 800058a:	6003      	str	r3, [r0, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800058c:	4b03      	ldr	r3, [pc, #12]	; (800059c <vApplicationGetIdleTaskMemory+0x14>)
 800058e:	600b      	str	r3, [r1, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000590:	2380      	movs	r3, #128	; 0x80
 8000592:	6013      	str	r3, [r2, #0]
  /* place for user code */
}
 8000594:	4770      	bx	lr
 8000596:	bf00      	nop
 8000598:	200003e8 	.word	0x200003e8
 800059c:	200001e8 	.word	0x200001e8

080005a0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80005a0:	b082      	sub	sp, #8

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80005a2:	2100      	movs	r1, #0
 80005a4:	9100      	str	r1, [sp, #0]
 80005a6:	4b0b      	ldr	r3, [pc, #44]	; (80005d4 <MX_GPIO_Init+0x34>)
 80005a8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80005aa:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80005ae:	631a      	str	r2, [r3, #48]	; 0x30
 80005b0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80005b2:	f002 0280 	and.w	r2, r2, #128	; 0x80
 80005b6:	9200      	str	r2, [sp, #0]
 80005b8:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005ba:	9101      	str	r1, [sp, #4]
 80005bc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80005be:	f042 0201 	orr.w	r2, r2, #1
 80005c2:	631a      	str	r2, [r3, #48]	; 0x30
 80005c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005c6:	f003 0301 	and.w	r3, r3, #1
 80005ca:	9301      	str	r3, [sp, #4]
 80005cc:	9b01      	ldr	r3, [sp, #4]

}
 80005ce:	b002      	add	sp, #8
 80005d0:	4770      	bx	lr
 80005d2:	bf00      	nop
 80005d4:	40023800 	.word	0x40023800

080005d8 <startMainTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_startMainTask */
void startMainTask(void const * argument)
{
 80005d8:	b500      	push	{lr}
 80005da:	b089      	sub	sp, #36	; 0x24
	char buf[32];

  /* Infinite loop */
  for(;;)
  {
	sprintf(buf, "Tick %lu", osKernelSysTick() / 1000);
 80005dc:	f002 fd89 	bl	80030f2 <osKernelSysTick>
 80005e0:	4a09      	ldr	r2, [pc, #36]	; (8000608 <startMainTask+0x30>)
 80005e2:	fba2 3200 	umull	r3, r2, r2, r0
 80005e6:	0992      	lsrs	r2, r2, #6
 80005e8:	4908      	ldr	r1, [pc, #32]	; (800060c <startMainTask+0x34>)
 80005ea:	4668      	mov	r0, sp
 80005ec:	f004 ff9c 	bl	8005528 <siprintf>
	USBD_CUSTOM_HID_SendReport_FS((uint8_t *)&buf, strlen(buf));
 80005f0:	4668      	mov	r0, sp
 80005f2:	f7ff fdf5 	bl	80001e0 <strlen>
 80005f6:	b281      	uxth	r1, r0
 80005f8:	4668      	mov	r0, sp
 80005fa:	f004 fb1d 	bl	8004c38 <USBD_CUSTOM_HID_SendReport_FS>
    osDelay(1000);
 80005fe:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000602:	f002 fdb5 	bl	8003170 <osDelay>
  for(;;)
 8000606:	e7e9      	b.n	80005dc <startMainTask+0x4>
 8000608:	10624dd3 	.word	0x10624dd3
 800060c:	08006560 	.word	0x08006560

08000610 <startAliveTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_startAliveTask */
void startAliveTask(void const * argument)
{
 8000610:	b508      	push	{r3, lr}
  /* USER CODE BEGIN startAliveTask */
  /* Infinite loop */
  for(;;)
  {
	  DBG("Alive for %lu seconds!", osKernelSysTick() / 1000);
 8000612:	f002 fd6e 	bl	80030f2 <osKernelSysTick>
 8000616:	4907      	ldr	r1, [pc, #28]	; (8000634 <startAliveTask+0x24>)
 8000618:	fba1 3100 	umull	r3, r1, r1, r0
 800061c:	0989      	lsrs	r1, r1, #6
 800061e:	4806      	ldr	r0, [pc, #24]	; (8000638 <startAliveTask+0x28>)
 8000620:	f004 feda 	bl	80053d8 <iprintf>
 8000624:	200a      	movs	r0, #10
 8000626:	f004 feef 	bl	8005408 <putchar>
	  osDelay(10000);
 800062a:	f242 7010 	movw	r0, #10000	; 0x2710
 800062e:	f002 fd9f 	bl	8003170 <osDelay>
  for(;;)
 8000632:	e7ee      	b.n	8000612 <startAliveTask+0x2>
 8000634:	10624dd3 	.word	0x10624dd3
 8000638:	0800656c 	.word	0x0800656c

0800063c <_write>:
  if (fd == 1 || fd == 2) {
 800063c:	3801      	subs	r0, #1
 800063e:	2801      	cmp	r0, #1
 8000640:	d80a      	bhi.n	8000658 <_write+0x1c>
int _write(int fd, char* ptr, int len) {
 8000642:	b510      	push	{r4, lr}
 8000644:	4614      	mov	r4, r2
    hstatus = HAL_UART_Transmit(&huart1, (uint8_t *) ptr, len, HAL_MAX_DELAY);
 8000646:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800064a:	b292      	uxth	r2, r2
 800064c:	4805      	ldr	r0, [pc, #20]	; (8000664 <_write+0x28>)
 800064e:	f001 ff1a 	bl	8002486 <HAL_UART_Transmit>
    if (hstatus == HAL_OK)
 8000652:	b920      	cbnz	r0, 800065e <_write+0x22>
      return len;
 8000654:	4620      	mov	r0, r4
}
 8000656:	bd10      	pop	{r4, pc}
  return -1;
 8000658:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 800065c:	4770      	bx	lr
      return -1;
 800065e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000662:	e7f8      	b.n	8000656 <_write+0x1a>
 8000664:	20004664 	.word	0x20004664

08000668 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000668:	b508      	push	{r3, lr}
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM11) {
 800066a:	6802      	ldr	r2, [r0, #0]
 800066c:	4b03      	ldr	r3, [pc, #12]	; (800067c <HAL_TIM_PeriodElapsedCallback+0x14>)
 800066e:	429a      	cmp	r2, r3
 8000670:	d000      	beq.n	8000674 <HAL_TIM_PeriodElapsedCallback+0xc>
    HAL_IncTick();
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000672:	bd08      	pop	{r3, pc}
    HAL_IncTick();
 8000674:	f000 fa50 	bl	8000b18 <HAL_IncTick>
}
 8000678:	e7fb      	b.n	8000672 <HAL_TIM_PeriodElapsedCallback+0xa>
 800067a:	bf00      	nop
 800067c:	40014800 	.word	0x40014800

08000680 <Error_Handler>:
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000680:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000682:	e7fe      	b.n	8000682 <Error_Handler+0x2>

08000684 <MX_USART1_UART_Init>:
{
 8000684:	b508      	push	{r3, lr}
  huart1.Instance = USART1;
 8000686:	480a      	ldr	r0, [pc, #40]	; (80006b0 <MX_USART1_UART_Init+0x2c>)
 8000688:	4b0a      	ldr	r3, [pc, #40]	; (80006b4 <MX_USART1_UART_Init+0x30>)
 800068a:	6003      	str	r3, [r0, #0]
  huart1.Init.BaudRate = 921600;
 800068c:	f44f 2361 	mov.w	r3, #921600	; 0xe1000
 8000690:	6043      	str	r3, [r0, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000692:	2300      	movs	r3, #0
 8000694:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000696:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000698:	6103      	str	r3, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800069a:	220c      	movs	r2, #12
 800069c:	6142      	str	r2, [r0, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800069e:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80006a0:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80006a2:	f001 fec1 	bl	8002428 <HAL_UART_Init>
 80006a6:	b900      	cbnz	r0, 80006aa <MX_USART1_UART_Init+0x26>
}
 80006a8:	bd08      	pop	{r3, pc}
    Error_Handler();
 80006aa:	f7ff ffe9 	bl	8000680 <Error_Handler>
 80006ae:	bf00      	nop
 80006b0:	20004664 	.word	0x20004664
 80006b4:	40011000 	.word	0x40011000

080006b8 <MX_USB_OTG_FS_PCD_Init>:
{
 80006b8:	b508      	push	{r3, lr}
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80006ba:	480b      	ldr	r0, [pc, #44]	; (80006e8 <MX_USB_OTG_FS_PCD_Init+0x30>)
 80006bc:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80006c0:	6003      	str	r3, [r0, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80006c2:	2304      	movs	r3, #4
 80006c4:	6043      	str	r3, [r0, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80006c6:	2202      	movs	r2, #2
 80006c8:	60c2      	str	r2, [r0, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80006ca:	2300      	movs	r3, #0
 80006cc:	6103      	str	r3, [r0, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80006ce:	6182      	str	r2, [r0, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80006d0:	61c3      	str	r3, [r0, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80006d2:	6203      	str	r3, [r0, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80006d4:	6243      	str	r3, [r0, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80006d6:	62c3      	str	r3, [r0, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80006d8:	6303      	str	r3, [r0, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80006da:	f000 fbd8 	bl	8000e8e <HAL_PCD_Init>
 80006de:	b900      	cbnz	r0, 80006e2 <MX_USB_OTG_FS_PCD_Init+0x2a>
}
 80006e0:	bd08      	pop	{r3, pc}
    Error_Handler();
 80006e2:	f7ff ffcd 	bl	8000680 <Error_Handler>
 80006e6:	bf00      	nop
 80006e8:	2000425c 	.word	0x2000425c

080006ec <SystemClock_Config>:
{
 80006ec:	b500      	push	{lr}
 80006ee:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006f0:	2230      	movs	r2, #48	; 0x30
 80006f2:	2100      	movs	r1, #0
 80006f4:	a808      	add	r0, sp, #32
 80006f6:	f004 fe0c 	bl	8005312 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006fa:	2300      	movs	r3, #0
 80006fc:	9303      	str	r3, [sp, #12]
 80006fe:	9304      	str	r3, [sp, #16]
 8000700:	9305      	str	r3, [sp, #20]
 8000702:	9306      	str	r3, [sp, #24]
 8000704:	9307      	str	r3, [sp, #28]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000706:	9301      	str	r3, [sp, #4]
 8000708:	4a1f      	ldr	r2, [pc, #124]	; (8000788 <SystemClock_Config+0x9c>)
 800070a:	6c11      	ldr	r1, [r2, #64]	; 0x40
 800070c:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 8000710:	6411      	str	r1, [r2, #64]	; 0x40
 8000712:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8000714:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 8000718:	9201      	str	r2, [sp, #4]
 800071a:	9a01      	ldr	r2, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800071c:	9302      	str	r3, [sp, #8]
 800071e:	4b1b      	ldr	r3, [pc, #108]	; (800078c <SystemClock_Config+0xa0>)
 8000720:	681a      	ldr	r2, [r3, #0]
 8000722:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8000726:	601a      	str	r2, [r3, #0]
 8000728:	681b      	ldr	r3, [r3, #0]
 800072a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800072e:	9302      	str	r3, [sp, #8]
 8000730:	9b02      	ldr	r3, [sp, #8]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000732:	2301      	movs	r3, #1
 8000734:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000736:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800073a:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800073c:	2302      	movs	r3, #2
 800073e:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000740:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8000744:	920f      	str	r2, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000746:	2219      	movs	r2, #25
 8000748:	9210      	str	r2, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 800074a:	22c0      	movs	r2, #192	; 0xc0
 800074c:	9211      	str	r2, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800074e:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000750:	2304      	movs	r3, #4
 8000752:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000754:	a808      	add	r0, sp, #32
 8000756:	f001 f8db 	bl	8001910 <HAL_RCC_OscConfig>
 800075a:	b988      	cbnz	r0, 8000780 <SystemClock_Config+0x94>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800075c:	230f      	movs	r3, #15
 800075e:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000760:	2302      	movs	r3, #2
 8000762:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000764:	2300      	movs	r3, #0
 8000766:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000768:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800076c:	9206      	str	r2, [sp, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800076e:	9307      	str	r3, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000770:	2103      	movs	r1, #3
 8000772:	a803      	add	r0, sp, #12
 8000774:	f001 fb18 	bl	8001da8 <HAL_RCC_ClockConfig>
 8000778:	b920      	cbnz	r0, 8000784 <SystemClock_Config+0x98>
}
 800077a:	b015      	add	sp, #84	; 0x54
 800077c:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8000780:	f7ff ff7e 	bl	8000680 <Error_Handler>
    Error_Handler();
 8000784:	f7ff ff7c 	bl	8000680 <Error_Handler>
 8000788:	40023800 	.word	0x40023800
 800078c:	40007000 	.word	0x40007000

08000790 <main>:
{
 8000790:	b500      	push	{lr}
 8000792:	b08f      	sub	sp, #60	; 0x3c
  HAL_Init();
 8000794:	f000 f9a6 	bl	8000ae4 <HAL_Init>
  SystemClock_Config();
 8000798:	f7ff ffa8 	bl	80006ec <SystemClock_Config>
  MX_GPIO_Init();
 800079c:	f7ff ff00 	bl	80005a0 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80007a0:	f7ff ff70 	bl	8000684 <MX_USART1_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80007a4:	f7ff ff88 	bl	80006b8 <MX_USB_OTG_FS_PCD_Init>
  MX_USB_DEVICE_Init();
 80007a8:	f003 fbee 	bl	8003f88 <MX_USB_DEVICE_Init>
  DBG("Starting");
 80007ac:	4812      	ldr	r0, [pc, #72]	; (80007f8 <main+0x68>)
 80007ae:	f004 fe13 	bl	80053d8 <iprintf>
 80007b2:	200a      	movs	r0, #10
 80007b4:	f004 fe28 	bl	8005408 <putchar>
  osThreadDef(mainTask, startMainTask, osPriorityNormal, 0, 128);
 80007b8:	4c10      	ldr	r4, [pc, #64]	; (80007fc <main+0x6c>)
 80007ba:	ad07      	add	r5, sp, #28
 80007bc:	4626      	mov	r6, r4
 80007be:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80007c0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80007c2:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 80007c6:	e885 0007 	stmia.w	r5, {r0, r1, r2}
  mainTaskHandle = osThreadCreate(osThread(mainTask), NULL);
 80007ca:	2100      	movs	r1, #0
 80007cc:	a807      	add	r0, sp, #28
 80007ce:	f002 fc9a 	bl	8003106 <osThreadCreate>
 80007d2:	4b0b      	ldr	r3, [pc, #44]	; (8000800 <main+0x70>)
 80007d4:	6018      	str	r0, [r3, #0]
  osThreadDef(aliveTask, startAliveTask, osPriorityLow, 0, 128);
 80007d6:	466d      	mov	r5, sp
 80007d8:	341c      	adds	r4, #28
 80007da:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80007dc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80007de:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80007e2:	e885 0007 	stmia.w	r5, {r0, r1, r2}
  aliveTaskHandle = osThreadCreate(osThread(aliveTask), NULL);
 80007e6:	2100      	movs	r1, #0
 80007e8:	4668      	mov	r0, sp
 80007ea:	f002 fc8c 	bl	8003106 <osThreadCreate>
 80007ee:	4b05      	ldr	r3, [pc, #20]	; (8000804 <main+0x74>)
 80007f0:	6018      	str	r0, [r3, #0]
  osKernelStart();
 80007f2:	f002 fc79 	bl	80030e8 <osKernelStart>
  while (1)
 80007f6:	e7fe      	b.n	80007f6 <main+0x66>
 80007f8:	08006584 	.word	0x08006584
 80007fc:	08006510 	.word	0x08006510
 8000800:	20004254 	.word	0x20004254
 8000804:	20004258 	.word	0x20004258

08000808 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000808:	b500      	push	{lr}
 800080a:	b083      	sub	sp, #12
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800080c:	2200      	movs	r2, #0
 800080e:	9200      	str	r2, [sp, #0]
 8000810:	4b0d      	ldr	r3, [pc, #52]	; (8000848 <HAL_MspInit+0x40>)
 8000812:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8000814:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
 8000818:	6459      	str	r1, [r3, #68]	; 0x44
 800081a:	6c59      	ldr	r1, [r3, #68]	; 0x44
 800081c:	f401 4180 	and.w	r1, r1, #16384	; 0x4000
 8000820:	9100      	str	r1, [sp, #0]
 8000822:	9900      	ldr	r1, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000824:	9201      	str	r2, [sp, #4]
 8000826:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8000828:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 800082c:	6419      	str	r1, [r3, #64]	; 0x40
 800082e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000830:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000834:	9301      	str	r3, [sp, #4]
 8000836:	9b01      	ldr	r3, [sp, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000838:	210f      	movs	r1, #15
 800083a:	f06f 0001 	mvn.w	r0, #1
 800083e:	f000 f9a3 	bl	8000b88 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000842:	b003      	add	sp, #12
 8000844:	f85d fb04 	ldr.w	pc, [sp], #4
 8000848:	40023800 	.word	0x40023800

0800084c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800084c:	b500      	push	{lr}
 800084e:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000850:	2300      	movs	r3, #0
 8000852:	9303      	str	r3, [sp, #12]
 8000854:	9304      	str	r3, [sp, #16]
 8000856:	9305      	str	r3, [sp, #20]
 8000858:	9306      	str	r3, [sp, #24]
 800085a:	9307      	str	r3, [sp, #28]
  if(huart->Instance==USART1)
 800085c:	6802      	ldr	r2, [r0, #0]
 800085e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000862:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
 8000866:	429a      	cmp	r2, r3
 8000868:	d002      	beq.n	8000870 <HAL_UART_MspInit+0x24>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800086a:	b009      	add	sp, #36	; 0x24
 800086c:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_USART1_CLK_ENABLE();
 8000870:	2200      	movs	r2, #0
 8000872:	9201      	str	r2, [sp, #4]
 8000874:	f503 3394 	add.w	r3, r3, #75776	; 0x12800
 8000878:	6c59      	ldr	r1, [r3, #68]	; 0x44
 800087a:	f041 0110 	orr.w	r1, r1, #16
 800087e:	6459      	str	r1, [r3, #68]	; 0x44
 8000880:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8000882:	f001 0110 	and.w	r1, r1, #16
 8000886:	9101      	str	r1, [sp, #4]
 8000888:	9901      	ldr	r1, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800088a:	9202      	str	r2, [sp, #8]
 800088c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800088e:	f041 0101 	orr.w	r1, r1, #1
 8000892:	6319      	str	r1, [r3, #48]	; 0x30
 8000894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000896:	f003 0301 	and.w	r3, r3, #1
 800089a:	9302      	str	r3, [sp, #8]
 800089c:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800089e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80008a2:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008a4:	2302      	movs	r3, #2
 80008a6:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a8:	9205      	str	r2, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008aa:	2303      	movs	r3, #3
 80008ac:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80008ae:	2307      	movs	r3, #7
 80008b0:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008b2:	a903      	add	r1, sp, #12
 80008b4:	4801      	ldr	r0, [pc, #4]	; (80008bc <HAL_UART_MspInit+0x70>)
 80008b6:	f000 f9a9 	bl	8000c0c <HAL_GPIO_Init>
}
 80008ba:	e7d6      	b.n	800086a <HAL_UART_MspInit+0x1e>
 80008bc:	40020000 	.word	0x40020000

080008c0 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80008c0:	b530      	push	{r4, r5, lr}
 80008c2:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008c4:	2300      	movs	r3, #0
 80008c6:	9303      	str	r3, [sp, #12]
 80008c8:	9304      	str	r3, [sp, #16]
 80008ca:	9305      	str	r3, [sp, #20]
 80008cc:	9306      	str	r3, [sp, #24]
 80008ce:	9307      	str	r3, [sp, #28]
  if(hpcd->Instance==USB_OTG_FS)
 80008d0:	6803      	ldr	r3, [r0, #0]
 80008d2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80008d6:	d001      	beq.n	80008dc <HAL_PCD_MspInit+0x1c>
	HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
	HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 80008d8:	b009      	add	sp, #36	; 0x24
 80008da:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008dc:	2500      	movs	r5, #0
 80008de:	9501      	str	r5, [sp, #4]
 80008e0:	4c1b      	ldr	r4, [pc, #108]	; (8000950 <HAL_PCD_MspInit+0x90>)
 80008e2:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80008e4:	f043 0301 	orr.w	r3, r3, #1
 80008e8:	6323      	str	r3, [r4, #48]	; 0x30
 80008ea:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80008ec:	f003 0301 	and.w	r3, r3, #1
 80008f0:	9301      	str	r3, [sp, #4]
 80008f2:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80008f4:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80008f8:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008fa:	2302      	movs	r3, #2
 80008fc:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008fe:	9505      	str	r5, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000900:	2303      	movs	r3, #3
 8000902:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000904:	230a      	movs	r3, #10
 8000906:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000908:	a903      	add	r1, sp, #12
 800090a:	4812      	ldr	r0, [pc, #72]	; (8000954 <HAL_PCD_MspInit+0x94>)
 800090c:	f000 f97e 	bl	8000c0c <HAL_GPIO_Init>
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000910:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8000912:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000916:	6363      	str	r3, [r4, #52]	; 0x34
 8000918:	9502      	str	r5, [sp, #8]
 800091a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800091c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000920:	6463      	str	r3, [r4, #68]	; 0x44
 8000922:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000924:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000928:	9302      	str	r3, [sp, #8]
 800092a:	9b02      	ldr	r3, [sp, #8]
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 800092c:	462a      	mov	r2, r5
 800092e:	2105      	movs	r1, #5
 8000930:	2043      	movs	r0, #67	; 0x43
 8000932:	f000 f929 	bl	8000b88 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8000936:	2043      	movs	r0, #67	; 0x43
 8000938:	f000 f95a 	bl	8000bf0 <HAL_NVIC_EnableIRQ>
	HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800093c:	462a      	mov	r2, r5
 800093e:	4629      	mov	r1, r5
 8000940:	2043      	movs	r0, #67	; 0x43
 8000942:	f000 f921 	bl	8000b88 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8000946:	2043      	movs	r0, #67	; 0x43
 8000948:	f000 f952 	bl	8000bf0 <HAL_NVIC_EnableIRQ>
}
 800094c:	e7c4      	b.n	80008d8 <HAL_PCD_MspInit+0x18>
 800094e:	bf00      	nop
 8000950:	40023800 	.word	0x40023800
 8000954:	40020000 	.word	0x40020000

08000958 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000958:	b510      	push	{r4, lr}
 800095a:	b088      	sub	sp, #32
 800095c:	4601      	mov	r1, r0
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
  uint32_t              uwPrescalerValue = 0;
  uint32_t              pFLatency;
  /*Configure the TIM11 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, TickPriority ,0);
 800095e:	2200      	movs	r2, #0
 8000960:	201a      	movs	r0, #26
 8000962:	f000 f911 	bl	8000b88 <HAL_NVIC_SetPriority>

  /* Enable the TIM11 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8000966:	201a      	movs	r0, #26
 8000968:	f000 f942 	bl	8000bf0 <HAL_NVIC_EnableIRQ>

  /* Enable TIM11 clock */
  __HAL_RCC_TIM11_CLK_ENABLE();
 800096c:	2400      	movs	r4, #0
 800096e:	9401      	str	r4, [sp, #4]
 8000970:	4b13      	ldr	r3, [pc, #76]	; (80009c0 <HAL_InitTick+0x68>)
 8000972:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000974:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8000978:	645a      	str	r2, [r3, #68]	; 0x44
 800097a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800097c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000980:	9301      	str	r3, [sp, #4]
 8000982:	9b01      	ldr	r3, [sp, #4]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000984:	a902      	add	r1, sp, #8
 8000986:	a803      	add	r0, sp, #12
 8000988:	f001 fae4 	bl	8001f54 <HAL_RCC_GetClockConfig>

  /* Compute TIM11 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 800098c:	f001 fad2 	bl	8001f34 <HAL_RCC_GetPCLK2Freq>
  /* Compute the prescaler value to have TIM11 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000990:	4b0c      	ldr	r3, [pc, #48]	; (80009c4 <HAL_InitTick+0x6c>)
 8000992:	fba3 2300 	umull	r2, r3, r3, r0
 8000996:	0c9b      	lsrs	r3, r3, #18
 8000998:	3b01      	subs	r3, #1

  /* Initialize TIM11 */
  htim11.Instance = TIM11;
 800099a:	480b      	ldr	r0, [pc, #44]	; (80009c8 <HAL_InitTick+0x70>)
 800099c:	4a0b      	ldr	r2, [pc, #44]	; (80009cc <HAL_InitTick+0x74>)
 800099e:	6002      	str	r2, [r0, #0]
  + Period = [(TIM11CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim11.Init.Period = (1000000U / 1000U) - 1U;
 80009a0:	f240 32e7 	movw	r2, #999	; 0x3e7
 80009a4:	60c2      	str	r2, [r0, #12]
  htim11.Init.Prescaler = uwPrescalerValue;
 80009a6:	6043      	str	r3, [r0, #4]
  htim11.Init.ClockDivision = 0;
 80009a8:	6104      	str	r4, [r0, #16]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009aa:	6084      	str	r4, [r0, #8]

  if(HAL_TIM_Base_Init(&htim11) == HAL_OK)
 80009ac:	f001 fc3e 	bl	800222c <HAL_TIM_Base_Init>
 80009b0:	b110      	cbz	r0, 80009b8 <HAL_InitTick+0x60>
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim11);
  }

  /* Return function status */
  return HAL_ERROR;
 80009b2:	2001      	movs	r0, #1
}
 80009b4:	b008      	add	sp, #32
 80009b6:	bd10      	pop	{r4, pc}
    return HAL_TIM_Base_Start_IT(&htim11);
 80009b8:	4803      	ldr	r0, [pc, #12]	; (80009c8 <HAL_InitTick+0x70>)
 80009ba:	f001 faeb 	bl	8001f94 <HAL_TIM_Base_Start_IT>
 80009be:	e7f9      	b.n	80009b4 <HAL_InitTick+0x5c>
 80009c0:	40023800 	.word	0x40023800
 80009c4:	431bde83 	.word	0x431bde83
 80009c8:	200046a8 	.word	0x200046a8
 80009cc:	40014800 	.word	0x40014800

080009d0 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80009d0:	e7fe      	b.n	80009d0 <NMI_Handler>

080009d2 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009d2:	e7fe      	b.n	80009d2 <HardFault_Handler>

080009d4 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009d4:	e7fe      	b.n	80009d4 <MemManage_Handler>

080009d6 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009d6:	e7fe      	b.n	80009d6 <BusFault_Handler>

080009d8 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009d8:	e7fe      	b.n	80009d8 <UsageFault_Handler>

080009da <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009da:	4770      	bx	lr

080009dc <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 80009dc:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 80009de:	4802      	ldr	r0, [pc, #8]	; (80009e8 <TIM1_TRG_COM_TIM11_IRQHandler+0xc>)
 80009e0:	f001 fb18 	bl	8002014 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 80009e4:	bd08      	pop	{r3, pc}
 80009e6:	bf00      	nop
 80009e8:	200046a8 	.word	0x200046a8

080009ec <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80009ec:	b508      	push	{r3, lr}
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80009ee:	4802      	ldr	r0, [pc, #8]	; (80009f8 <OTG_FS_IRQHandler+0xc>)
 80009f0:	f000 fba6 	bl	8001140 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80009f4:	bd08      	pop	{r3, pc}
 80009f6:	bf00      	nop
 80009f8:	2000425c 	.word	0x2000425c

080009fc <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80009fc:	b570      	push	{r4, r5, r6, lr}
 80009fe:	460c      	mov	r4, r1
 8000a00:	4616      	mov	r6, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a02:	2500      	movs	r5, #0
 8000a04:	42b5      	cmp	r5, r6
 8000a06:	da07      	bge.n	8000a18 <_read+0x1c>
	{
		*ptr++ = __io_getchar();
 8000a08:	f3af 8000 	nop.w
 8000a0c:	4621      	mov	r1, r4
 8000a0e:	f801 0b01 	strb.w	r0, [r1], #1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a12:	3501      	adds	r5, #1
		*ptr++ = __io_getchar();
 8000a14:	460c      	mov	r4, r1
 8000a16:	e7f5      	b.n	8000a04 <_read+0x8>
	}

return len;
}
 8000a18:	4630      	mov	r0, r6
 8000a1a:	bd70      	pop	{r4, r5, r6, pc}

08000a1c <_close>:
}

int _close(int file)
{
	return -1;
}
 8000a1c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000a20:	4770      	bx	lr

08000a22 <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 8000a22:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a26:	604b      	str	r3, [r1, #4]
	return 0;
}
 8000a28:	2000      	movs	r0, #0
 8000a2a:	4770      	bx	lr

08000a2c <_isatty>:

int _isatty(int file)
{
	return 1;
}
 8000a2c:	2001      	movs	r0, #1
 8000a2e:	4770      	bx	lr

08000a30 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 8000a30:	2000      	movs	r0, #0
 8000a32:	4770      	bx	lr

08000a34 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000a34:	b510      	push	{r4, lr}
 8000a36:	4603      	mov	r3, r0
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000a38:	4a0c      	ldr	r2, [pc, #48]	; (8000a6c <_sbrk+0x38>)
 8000a3a:	490d      	ldr	r1, [pc, #52]	; (8000a70 <_sbrk+0x3c>)
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000a3c:	480d      	ldr	r0, [pc, #52]	; (8000a74 <_sbrk+0x40>)
 8000a3e:	6800      	ldr	r0, [r0, #0]
 8000a40:	b140      	cbz	r0, 8000a54 <_sbrk+0x20>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000a42:	480c      	ldr	r0, [pc, #48]	; (8000a74 <_sbrk+0x40>)
 8000a44:	6800      	ldr	r0, [r0, #0]
 8000a46:	4403      	add	r3, r0
 8000a48:	1a52      	subs	r2, r2, r1
 8000a4a:	4293      	cmp	r3, r2
 8000a4c:	d806      	bhi.n	8000a5c <_sbrk+0x28>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 8000a4e:	4a09      	ldr	r2, [pc, #36]	; (8000a74 <_sbrk+0x40>)
 8000a50:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
}
 8000a52:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 8000a54:	4807      	ldr	r0, [pc, #28]	; (8000a74 <_sbrk+0x40>)
 8000a56:	4c08      	ldr	r4, [pc, #32]	; (8000a78 <_sbrk+0x44>)
 8000a58:	6004      	str	r4, [r0, #0]
 8000a5a:	e7f2      	b.n	8000a42 <_sbrk+0xe>
    errno = ENOMEM;
 8000a5c:	f004 fb28 	bl	80050b0 <__errno>
 8000a60:	230c      	movs	r3, #12
 8000a62:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8000a64:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000a68:	e7f3      	b.n	8000a52 <_sbrk+0x1e>
 8000a6a:	bf00      	nop
 8000a6c:	20020000 	.word	0x20020000
 8000a70:	00000400 	.word	0x00000400
 8000a74:	2000049c 	.word	0x2000049c
 8000a78:	20004bd8 	.word	0x20004bd8

08000a7c <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a7c:	4a03      	ldr	r2, [pc, #12]	; (8000a8c <SystemInit+0x10>)
 8000a7e:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8000a82:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a86:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a8a:	4770      	bx	lr
 8000a8c:	e000ed00 	.word	0xe000ed00

08000a90 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000a90:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ac8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000a94:	480d      	ldr	r0, [pc, #52]	; (8000acc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000a96:	490e      	ldr	r1, [pc, #56]	; (8000ad0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000a98:	4a0e      	ldr	r2, [pc, #56]	; (8000ad4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000a9a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a9c:	e002      	b.n	8000aa4 <LoopCopyDataInit>

08000a9e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a9e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000aa0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000aa2:	3304      	adds	r3, #4

08000aa4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000aa4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000aa6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000aa8:	d3f9      	bcc.n	8000a9e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000aaa:	4a0b      	ldr	r2, [pc, #44]	; (8000ad8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000aac:	4c0b      	ldr	r4, [pc, #44]	; (8000adc <LoopFillZerobss+0x26>)
  movs r3, #0
 8000aae:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ab0:	e001      	b.n	8000ab6 <LoopFillZerobss>

08000ab2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ab2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ab4:	3204      	adds	r2, #4

08000ab6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ab6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ab8:	d3fb      	bcc.n	8000ab2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000aba:	f7ff ffdf 	bl	8000a7c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000abe:	f004 fbf3 	bl	80052a8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ac2:	f7ff fe65 	bl	8000790 <main>
  bx  lr    
 8000ac6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000ac8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000acc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ad0:	200001cc 	.word	0x200001cc
  ldr r2, =_sidata
 8000ad4:	080066f0 	.word	0x080066f0
  ldr r2, =_sbss
 8000ad8:	200001cc 	.word	0x200001cc
  ldr r4, =_ebss
 8000adc:	20004bd4 	.word	0x20004bd4

08000ae0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ae0:	e7fe      	b.n	8000ae0 <ADC_IRQHandler>
	...

08000ae4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ae4:	b508      	push	{r3, lr}
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000ae6:	4b0b      	ldr	r3, [pc, #44]	; (8000b14 <HAL_Init+0x30>)
 8000ae8:	681a      	ldr	r2, [r3, #0]
 8000aea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000aee:	601a      	str	r2, [r3, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000af0:	681a      	ldr	r2, [r3, #0]
 8000af2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000af6:	601a      	str	r2, [r3, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000af8:	681a      	ldr	r2, [r3, #0]
 8000afa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000afe:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b00:	2003      	movs	r0, #3
 8000b02:	f000 f82f 	bl	8000b64 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b06:	200f      	movs	r0, #15
 8000b08:	f7ff ff26 	bl	8000958 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b0c:	f7ff fe7c 	bl	8000808 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 8000b10:	2000      	movs	r0, #0
 8000b12:	bd08      	pop	{r3, pc}
 8000b14:	40023c00 	.word	0x40023c00

08000b18 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000b18:	4a03      	ldr	r2, [pc, #12]	; (8000b28 <HAL_IncTick+0x10>)
 8000b1a:	6811      	ldr	r1, [r2, #0]
 8000b1c:	4b03      	ldr	r3, [pc, #12]	; (8000b2c <HAL_IncTick+0x14>)
 8000b1e:	781b      	ldrb	r3, [r3, #0]
 8000b20:	440b      	add	r3, r1
 8000b22:	6013      	str	r3, [r2, #0]
}
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop
 8000b28:	200046f0 	.word	0x200046f0
 8000b2c:	20000004 	.word	0x20000004

08000b30 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000b30:	4b01      	ldr	r3, [pc, #4]	; (8000b38 <HAL_GetTick+0x8>)
 8000b32:	6818      	ldr	r0, [r3, #0]
}
 8000b34:	4770      	bx	lr
 8000b36:	bf00      	nop
 8000b38:	200046f0 	.word	0x200046f0

08000b3c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b3c:	b538      	push	{r3, r4, r5, lr}
 8000b3e:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000b40:	f7ff fff6 	bl	8000b30 <HAL_GetTick>
 8000b44:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b46:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
 8000b4a:	d002      	beq.n	8000b52 <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 8000b4c:	4b04      	ldr	r3, [pc, #16]	; (8000b60 <HAL_Delay+0x24>)
 8000b4e:	781b      	ldrb	r3, [r3, #0]
 8000b50:	441c      	add	r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000b52:	f7ff ffed 	bl	8000b30 <HAL_GetTick>
 8000b56:	1b40      	subs	r0, r0, r5
 8000b58:	42a0      	cmp	r0, r4
 8000b5a:	d3fa      	bcc.n	8000b52 <HAL_Delay+0x16>
  {
  }
}
 8000b5c:	bd38      	pop	{r3, r4, r5, pc}
 8000b5e:	bf00      	nop
 8000b60:	20000004 	.word	0x20000004

08000b64 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b64:	4a07      	ldr	r2, [pc, #28]	; (8000b84 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8000b66:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b68:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000b6c:	041b      	lsls	r3, r3, #16
 8000b6e:	0c1b      	lsrs	r3, r3, #16
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b70:	0200      	lsls	r0, r0, #8
 8000b72:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b76:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 8000b78:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b7c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8000b80:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8000b82:	4770      	bx	lr
 8000b84:	e000ed00 	.word	0xe000ed00

08000b88 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000b88:	b430      	push	{r4, r5}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b8a:	4b17      	ldr	r3, [pc, #92]	; (8000be8 <HAL_NVIC_SetPriority+0x60>)
 8000b8c:	68db      	ldr	r3, [r3, #12]
 8000b8e:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b92:	f1c3 0407 	rsb	r4, r3, #7
 8000b96:	2c04      	cmp	r4, #4
 8000b98:	bf28      	it	cs
 8000b9a:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b9c:	1d1d      	adds	r5, r3, #4
 8000b9e:	2d06      	cmp	r5, #6
 8000ba0:	d918      	bls.n	8000bd4 <HAL_NVIC_SetPriority+0x4c>
 8000ba2:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ba4:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8000ba8:	fa05 f404 	lsl.w	r4, r5, r4
 8000bac:	ea21 0104 	bic.w	r1, r1, r4
 8000bb0:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000bb2:	fa05 f303 	lsl.w	r3, r5, r3
 8000bb6:	ea22 0303 	bic.w	r3, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bba:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) >= 0)
 8000bbc:	2800      	cmp	r0, #0
 8000bbe:	db0b      	blt.n	8000bd8 <HAL_NVIC_SetPriority+0x50>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bc0:	0109      	lsls	r1, r1, #4
 8000bc2:	b2c9      	uxtb	r1, r1
 8000bc4:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8000bc8:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8000bcc:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8000bd0:	bc30      	pop	{r4, r5}
 8000bd2:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	e7e5      	b.n	8000ba4 <HAL_NVIC_SetPriority+0x1c>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bd8:	f000 000f 	and.w	r0, r0, #15
 8000bdc:	0109      	lsls	r1, r1, #4
 8000bde:	b2c9      	uxtb	r1, r1
 8000be0:	4b02      	ldr	r3, [pc, #8]	; (8000bec <HAL_NVIC_SetPriority+0x64>)
 8000be2:	5419      	strb	r1, [r3, r0]
 8000be4:	e7f4      	b.n	8000bd0 <HAL_NVIC_SetPriority+0x48>
 8000be6:	bf00      	nop
 8000be8:	e000ed00 	.word	0xe000ed00
 8000bec:	e000ed14 	.word	0xe000ed14

08000bf0 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8000bf0:	2800      	cmp	r0, #0
 8000bf2:	db07      	blt.n	8000c04 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000bf4:	f000 021f 	and.w	r2, r0, #31
 8000bf8:	0940      	lsrs	r0, r0, #5
 8000bfa:	2301      	movs	r3, #1
 8000bfc:	4093      	lsls	r3, r2
 8000bfe:	4a02      	ldr	r2, [pc, #8]	; (8000c08 <HAL_NVIC_EnableIRQ+0x18>)
 8000c00:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8000c04:	4770      	bx	lr
 8000c06:	bf00      	nop
 8000c08:	e000e100 	.word	0xe000e100

08000c0c <HAL_GPIO_Init>:
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	2b0f      	cmp	r3, #15
 8000c10:	f200 80cb 	bhi.w	8000daa <HAL_GPIO_Init+0x19e>
{
 8000c14:	b4f0      	push	{r4, r5, r6, r7}
 8000c16:	b082      	sub	sp, #8
 8000c18:	e05d      	b.n	8000cd6 <HAL_GPIO_Init+0xca>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000c1a:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000c1c:	005f      	lsls	r7, r3, #1
 8000c1e:	2403      	movs	r4, #3
 8000c20:	40bc      	lsls	r4, r7
 8000c22:	ea26 0604 	bic.w	r6, r6, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000c26:	68cc      	ldr	r4, [r1, #12]
 8000c28:	40bc      	lsls	r4, r7
 8000c2a:	4334      	orrs	r4, r6
        GPIOx->OSPEEDR = temp;
 8000c2c:	6084      	str	r4, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000c2e:	6846      	ldr	r6, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000c30:	ea26 0602 	bic.w	r6, r6, r2
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000c34:	684c      	ldr	r4, [r1, #4]
 8000c36:	f3c4 1200 	ubfx	r2, r4, #4, #1
 8000c3a:	409a      	lsls	r2, r3
 8000c3c:	4332      	orrs	r2, r6
        GPIOx->OTYPER = temp;
 8000c3e:	6042      	str	r2, [r0, #4]
 8000c40:	e057      	b.n	8000cf2 <HAL_GPIO_Init+0xe6>
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000c42:	08dc      	lsrs	r4, r3, #3
 8000c44:	3408      	adds	r4, #8
 8000c46:	f850 7024 	ldr.w	r7, [r0, r4, lsl #2]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000c4a:	f003 0207 	and.w	r2, r3, #7
 8000c4e:	0096      	lsls	r6, r2, #2
 8000c50:	220f      	movs	r2, #15
 8000c52:	40b2      	lsls	r2, r6
 8000c54:	ea27 0702 	bic.w	r7, r7, r2
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000c58:	690a      	ldr	r2, [r1, #16]
 8000c5a:	40b2      	lsls	r2, r6
 8000c5c:	433a      	orrs	r2, r7
        GPIOx->AFR[position >> 3U] = temp;
 8000c5e:	f840 2024 	str.w	r2, [r0, r4, lsl #2]
 8000c62:	e05a      	b.n	8000d1a <HAL_GPIO_Init+0x10e>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000c64:	2204      	movs	r2, #4
 8000c66:	e000      	b.n	8000c6a <HAL_GPIO_Init+0x5e>
 8000c68:	2200      	movs	r2, #0
 8000c6a:	40b2      	lsls	r2, r6
 8000c6c:	433a      	orrs	r2, r7
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000c6e:	3402      	adds	r4, #2
 8000c70:	4e4e      	ldr	r6, [pc, #312]	; (8000dac <HAL_GPIO_Init+0x1a0>)
 8000c72:	f846 2024 	str.w	r2, [r6, r4, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000c76:	4a4e      	ldr	r2, [pc, #312]	; (8000db0 <HAL_GPIO_Init+0x1a4>)
 8000c78:	6814      	ldr	r4, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8000c7a:	43ea      	mvns	r2, r5
 8000c7c:	ea24 0605 	bic.w	r6, r4, r5
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000c80:	684f      	ldr	r7, [r1, #4]
 8000c82:	f417 3f80 	tst.w	r7, #65536	; 0x10000
 8000c86:	d001      	beq.n	8000c8c <HAL_GPIO_Init+0x80>
        {
          temp |= iocurrent;
 8000c88:	ea45 0604 	orr.w	r6, r5, r4
        }
        EXTI->IMR = temp;
 8000c8c:	4c48      	ldr	r4, [pc, #288]	; (8000db0 <HAL_GPIO_Init+0x1a4>)
 8000c8e:	6026      	str	r6, [r4, #0]

        temp = EXTI->EMR;
 8000c90:	6864      	ldr	r4, [r4, #4]
        temp &= ~((uint32_t)iocurrent);
 8000c92:	ea02 0604 	and.w	r6, r2, r4
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000c96:	684f      	ldr	r7, [r1, #4]
 8000c98:	f417 3f00 	tst.w	r7, #131072	; 0x20000
 8000c9c:	d001      	beq.n	8000ca2 <HAL_GPIO_Init+0x96>
        {
          temp |= iocurrent;
 8000c9e:	ea45 0604 	orr.w	r6, r5, r4
        }
        EXTI->EMR = temp;
 8000ca2:	4c43      	ldr	r4, [pc, #268]	; (8000db0 <HAL_GPIO_Init+0x1a4>)
 8000ca4:	6066      	str	r6, [r4, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000ca6:	68a4      	ldr	r4, [r4, #8]
        temp &= ~((uint32_t)iocurrent);
 8000ca8:	ea02 0604 	and.w	r6, r2, r4
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000cac:	684f      	ldr	r7, [r1, #4]
 8000cae:	f417 1f80 	tst.w	r7, #1048576	; 0x100000
 8000cb2:	d001      	beq.n	8000cb8 <HAL_GPIO_Init+0xac>
        {
          temp |= iocurrent;
 8000cb4:	ea45 0604 	orr.w	r6, r5, r4
        }
        EXTI->RTSR = temp;
 8000cb8:	4c3d      	ldr	r4, [pc, #244]	; (8000db0 <HAL_GPIO_Init+0x1a4>)
 8000cba:	60a6      	str	r6, [r4, #8]

        temp = EXTI->FTSR;
 8000cbc:	68e4      	ldr	r4, [r4, #12]
        temp &= ~((uint32_t)iocurrent);
 8000cbe:	4022      	ands	r2, r4
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000cc0:	684e      	ldr	r6, [r1, #4]
 8000cc2:	f416 1f00 	tst.w	r6, #2097152	; 0x200000
 8000cc6:	d001      	beq.n	8000ccc <HAL_GPIO_Init+0xc0>
        {
          temp |= iocurrent;
 8000cc8:	ea45 0204 	orr.w	r2, r5, r4
        }
        EXTI->FTSR = temp;
 8000ccc:	4c38      	ldr	r4, [pc, #224]	; (8000db0 <HAL_GPIO_Init+0x1a4>)
 8000cce:	60e2      	str	r2, [r4, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000cd0:	3301      	adds	r3, #1
 8000cd2:	2b0f      	cmp	r3, #15
 8000cd4:	d866      	bhi.n	8000da4 <HAL_GPIO_Init+0x198>
    ioposition = 0x01U << position;
 8000cd6:	2201      	movs	r2, #1
 8000cd8:	409a      	lsls	r2, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000cda:	680c      	ldr	r4, [r1, #0]
 8000cdc:	ea04 0502 	and.w	r5, r4, r2
    if(iocurrent == ioposition)
 8000ce0:	ea32 0404 	bics.w	r4, r2, r4
 8000ce4:	d1f4      	bne.n	8000cd0 <HAL_GPIO_Init+0xc4>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000ce6:	684c      	ldr	r4, [r1, #4]
 8000ce8:	f004 0403 	and.w	r4, r4, #3
 8000cec:	3c01      	subs	r4, #1
 8000cee:	2c01      	cmp	r4, #1
 8000cf0:	d993      	bls.n	8000c1a <HAL_GPIO_Init+0xe>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000cf2:	684a      	ldr	r2, [r1, #4]
 8000cf4:	f002 0203 	and.w	r2, r2, #3
 8000cf8:	2a03      	cmp	r2, #3
 8000cfa:	d009      	beq.n	8000d10 <HAL_GPIO_Init+0x104>
        temp = GPIOx->PUPDR;
 8000cfc:	68c4      	ldr	r4, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000cfe:	005e      	lsls	r6, r3, #1
 8000d00:	2203      	movs	r2, #3
 8000d02:	40b2      	lsls	r2, r6
 8000d04:	ea24 0402 	bic.w	r4, r4, r2
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000d08:	688a      	ldr	r2, [r1, #8]
 8000d0a:	40b2      	lsls	r2, r6
 8000d0c:	4322      	orrs	r2, r4
        GPIOx->PUPDR = temp;
 8000d0e:	60c2      	str	r2, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d10:	684a      	ldr	r2, [r1, #4]
 8000d12:	f002 0203 	and.w	r2, r2, #3
 8000d16:	2a02      	cmp	r2, #2
 8000d18:	d093      	beq.n	8000c42 <HAL_GPIO_Init+0x36>
      temp = GPIOx->MODER;
 8000d1a:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000d1c:	005e      	lsls	r6, r3, #1
 8000d1e:	2203      	movs	r2, #3
 8000d20:	40b2      	lsls	r2, r6
 8000d22:	ea24 0402 	bic.w	r4, r4, r2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000d26:	684a      	ldr	r2, [r1, #4]
 8000d28:	f002 0203 	and.w	r2, r2, #3
 8000d2c:	40b2      	lsls	r2, r6
 8000d2e:	4322      	orrs	r2, r4
      GPIOx->MODER = temp;
 8000d30:	6002      	str	r2, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000d32:	684a      	ldr	r2, [r1, #4]
 8000d34:	f412 3f40 	tst.w	r2, #196608	; 0x30000
 8000d38:	d0ca      	beq.n	8000cd0 <HAL_GPIO_Init+0xc4>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	9201      	str	r2, [sp, #4]
 8000d3e:	4a1d      	ldr	r2, [pc, #116]	; (8000db4 <HAL_GPIO_Init+0x1a8>)
 8000d40:	6c54      	ldr	r4, [r2, #68]	; 0x44
 8000d42:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
 8000d46:	6454      	str	r4, [r2, #68]	; 0x44
 8000d48:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8000d4a:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8000d4e:	9201      	str	r2, [sp, #4]
 8000d50:	9a01      	ldr	r2, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 8000d52:	089c      	lsrs	r4, r3, #2
 8000d54:	1ca6      	adds	r6, r4, #2
 8000d56:	4a15      	ldr	r2, [pc, #84]	; (8000dac <HAL_GPIO_Init+0x1a0>)
 8000d58:	f852 7026 	ldr.w	r7, [r2, r6, lsl #2]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000d5c:	f003 0203 	and.w	r2, r3, #3
 8000d60:	0096      	lsls	r6, r2, #2
 8000d62:	220f      	movs	r2, #15
 8000d64:	40b2      	lsls	r2, r6
 8000d66:	ea27 0702 	bic.w	r7, r7, r2
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000d6a:	4a13      	ldr	r2, [pc, #76]	; (8000db8 <HAL_GPIO_Init+0x1ac>)
 8000d6c:	4290      	cmp	r0, r2
 8000d6e:	f43f af7b 	beq.w	8000c68 <HAL_GPIO_Init+0x5c>
 8000d72:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000d76:	4290      	cmp	r0, r2
 8000d78:	d00e      	beq.n	8000d98 <HAL_GPIO_Init+0x18c>
 8000d7a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000d7e:	4290      	cmp	r0, r2
 8000d80:	d00c      	beq.n	8000d9c <HAL_GPIO_Init+0x190>
 8000d82:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000d86:	4290      	cmp	r0, r2
 8000d88:	d00a      	beq.n	8000da0 <HAL_GPIO_Init+0x194>
 8000d8a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000d8e:	4290      	cmp	r0, r2
 8000d90:	f43f af68 	beq.w	8000c64 <HAL_GPIO_Init+0x58>
 8000d94:	2207      	movs	r2, #7
 8000d96:	e768      	b.n	8000c6a <HAL_GPIO_Init+0x5e>
 8000d98:	2201      	movs	r2, #1
 8000d9a:	e766      	b.n	8000c6a <HAL_GPIO_Init+0x5e>
 8000d9c:	2202      	movs	r2, #2
 8000d9e:	e764      	b.n	8000c6a <HAL_GPIO_Init+0x5e>
 8000da0:	2203      	movs	r2, #3
 8000da2:	e762      	b.n	8000c6a <HAL_GPIO_Init+0x5e>
      }
    }
  }
}
 8000da4:	b002      	add	sp, #8
 8000da6:	bcf0      	pop	{r4, r5, r6, r7}
 8000da8:	4770      	bx	lr
 8000daa:	4770      	bx	lr
 8000dac:	40013800 	.word	0x40013800
 8000db0:	40013c00 	.word	0x40013c00
 8000db4:	40023800 	.word	0x40023800
 8000db8:	40020000 	.word	0x40020000

08000dbc <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8000dbc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000dc0:	b082      	sub	sp, #8
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8000dc2:	f8d0 8000 	ldr.w	r8, [r0]
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];

  if (ep->xfer_count > ep->xfer_len)
 8000dc6:	ebc1 03c1 	rsb	r3, r1, r1, lsl #3
 8000dca:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8000dce:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8000dd0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000dd2:	429a      	cmp	r2, r3
 8000dd4:	d855      	bhi.n	8000e82 <PCD_WriteEmptyTxFifo+0xc6>
 8000dd6:	4607      	mov	r7, r0
 8000dd8:	460c      	mov	r4, r1
 8000dda:	46c1      	mov	r9, r8
  {
    return HAL_ERROR;
  }

  len = ep->xfer_len - ep->xfer_count;
 8000ddc:	1a9b      	subs	r3, r3, r2

  if (len > ep->maxpacket)
 8000dde:	ebc1 02c1 	rsb	r2, r1, r1, lsl #3
 8000de2:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8000de6:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8000de8:	429a      	cmp	r2, r3
 8000dea:	d300      	bcc.n	8000dee <PCD_WriteEmptyTxFifo+0x32>
  len = ep->xfer_len - ep->xfer_count;
 8000dec:	461a      	mov	r2, r3
  {
    len = ep->maxpacket;
  }

  len32b = (len + 3U) / 4U;
 8000dee:	f102 0a03 	add.w	sl, r2, #3
 8000df2:	ea4f 0a9a 	mov.w	sl, sl, lsr #2

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8000df6:	e015      	b.n	8000e24 <PCD_WriteEmptyTxFifo+0x68>

    if (len > ep->maxpacket)
    {
      len = ep->maxpacket;
    }
    len32b = (len + 3U) / 4U;
 8000df8:	f106 0a03 	add.w	sl, r6, #3
 8000dfc:	ea4f 0a9a 	mov.w	sl, sl, lsr #2

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8000e00:	ebc4 05c4 	rsb	r5, r4, r4, lsl #3
 8000e04:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8000e08:	6ca9      	ldr	r1, [r5, #72]	; 0x48
 8000e0a:	7c3b      	ldrb	r3, [r7, #16]
 8000e0c:	9300      	str	r3, [sp, #0]
 8000e0e:	b2b3      	uxth	r3, r6
 8000e10:	b2e2      	uxtb	r2, r4
 8000e12:	4640      	mov	r0, r8
 8000e14:	f001 fee8 	bl	8002be8 <USB_WritePacket>
                          (uint8_t)hpcd->Init.dma_enable);

    ep->xfer_buff  += len;
 8000e18:	6cab      	ldr	r3, [r5, #72]	; 0x48
 8000e1a:	4433      	add	r3, r6
 8000e1c:	64ab      	str	r3, [r5, #72]	; 0x48
    ep->xfer_count += len;
 8000e1e:	6d6b      	ldr	r3, [r5, #84]	; 0x54
 8000e20:	441e      	add	r6, r3
 8000e22:	656e      	str	r6, [r5, #84]	; 0x54
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8000e24:	eb09 1344 	add.w	r3, r9, r4, lsl #5
 8000e28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8000e2c:	699b      	ldr	r3, [r3, #24]
 8000e2e:	b29b      	uxth	r3, r3
 8000e30:	4553      	cmp	r3, sl
 8000e32:	d312      	bcc.n	8000e5a <PCD_WriteEmptyTxFifo+0x9e>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8000e34:	ebc4 02c4 	rsb	r2, r4, r4, lsl #3
 8000e38:	eb07 0282 	add.w	r2, r7, r2, lsl #2
 8000e3c:	6d51      	ldr	r1, [r2, #84]	; 0x54
 8000e3e:	6d13      	ldr	r3, [r2, #80]	; 0x50
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8000e40:	4299      	cmp	r1, r3
 8000e42:	d20a      	bcs.n	8000e5a <PCD_WriteEmptyTxFifo+0x9e>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8000e44:	b14b      	cbz	r3, 8000e5a <PCD_WriteEmptyTxFifo+0x9e>
    len = ep->xfer_len - ep->xfer_count;
 8000e46:	1a5b      	subs	r3, r3, r1
    if (len > ep->maxpacket)
 8000e48:	ebc4 02c4 	rsb	r2, r4, r4, lsl #3
 8000e4c:	eb07 0282 	add.w	r2, r7, r2, lsl #2
 8000e50:	6c56      	ldr	r6, [r2, #68]	; 0x44
 8000e52:	429e      	cmp	r6, r3
 8000e54:	d3d0      	bcc.n	8000df8 <PCD_WriteEmptyTxFifo+0x3c>
    len = ep->xfer_len - ep->xfer_count;
 8000e56:	461e      	mov	r6, r3
 8000e58:	e7ce      	b.n	8000df8 <PCD_WriteEmptyTxFifo+0x3c>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8000e5a:	ebc4 00c4 	rsb	r0, r4, r4, lsl #3
 8000e5e:	eb07 0780 	add.w	r7, r7, r0, lsl #2
 8000e62:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8000e64:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000e66:	429a      	cmp	r2, r3
 8000e68:	d80f      	bhi.n	8000e8a <PCD_WriteEmptyTxFifo+0xce>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8000e6a:	f004 040f 	and.w	r4, r4, #15
 8000e6e:	2301      	movs	r3, #1
 8000e70:	40a3      	lsls	r3, r4
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8000e72:	f8d8 4834 	ldr.w	r4, [r8, #2100]	; 0x834
 8000e76:	ea24 0403 	bic.w	r4, r4, r3
 8000e7a:	f8c8 4834 	str.w	r4, [r8, #2100]	; 0x834
  }

  return HAL_OK;
 8000e7e:	2000      	movs	r0, #0
 8000e80:	e000      	b.n	8000e84 <PCD_WriteEmptyTxFifo+0xc8>
    return HAL_ERROR;
 8000e82:	2001      	movs	r0, #1
}
 8000e84:	b002      	add	sp, #8
 8000e86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  return HAL_OK;
 8000e8a:	2000      	movs	r0, #0
 8000e8c:	e7fa      	b.n	8000e84 <PCD_WriteEmptyTxFifo+0xc8>

08000e8e <HAL_PCD_Init>:
{
 8000e8e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000e90:	b08b      	sub	sp, #44	; 0x2c
  if (hpcd == NULL)
 8000e92:	2800      	cmp	r0, #0
 8000e94:	f000 808c 	beq.w	8000fb0 <HAL_PCD_Init+0x122>
 8000e98:	4605      	mov	r5, r0
  USBx = hpcd->Instance;
 8000e9a:	6804      	ldr	r4, [r0, #0]
  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000e9c:	f890 33bd 	ldrb.w	r3, [r0, #957]	; 0x3bd
 8000ea0:	b32b      	cbz	r3, 8000eee <HAL_PCD_Init+0x60>
  hpcd->State = HAL_PCD_STATE_BUSY;
 8000ea2:	2303      	movs	r3, #3
 8000ea4:	f885 33bd 	strb.w	r3, [r5, #957]	; 0x3bd
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8000ea8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8000eaa:	f413 7f80 	tst.w	r3, #256	; 0x100
 8000eae:	d101      	bne.n	8000eb4 <HAL_PCD_Init+0x26>
    hpcd->Init.dma_enable = 0U;
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	612b      	str	r3, [r5, #16]
  __HAL_PCD_DISABLE(hpcd);
 8000eb4:	6828      	ldr	r0, [r5, #0]
 8000eb6:	f001 fc37 	bl	8002728 <USB_DisableGlobalInt>
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000eba:	462c      	mov	r4, r5
 8000ebc:	f854 7b10 	ldr.w	r7, [r4], #16
 8000ec0:	466e      	mov	r6, sp
 8000ec2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000ec4:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8000ec6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000ec8:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8000eca:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000ece:	e886 0003 	stmia.w	r6, {r0, r1}
 8000ed2:	1d2b      	adds	r3, r5, #4
 8000ed4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000ed6:	4638      	mov	r0, r7
 8000ed8:	f001 fb68 	bl	80025ac <USB_CoreInit>
 8000edc:	4604      	mov	r4, r0
 8000ede:	b158      	cbz	r0, 8000ef8 <HAL_PCD_Init+0x6a>
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000ee0:	2302      	movs	r3, #2
 8000ee2:	f885 33bd 	strb.w	r3, [r5, #957]	; 0x3bd
    return HAL_ERROR;
 8000ee6:	2401      	movs	r4, #1
}
 8000ee8:	4620      	mov	r0, r4
 8000eea:	b00b      	add	sp, #44	; 0x2c
 8000eec:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hpcd->Lock = HAL_UNLOCKED;
 8000eee:	f880 33bc 	strb.w	r3, [r0, #956]	; 0x3bc
    HAL_PCD_MspInit(hpcd);
 8000ef2:	f7ff fce5 	bl	80008c0 <HAL_PCD_MspInit>
 8000ef6:	e7d4      	b.n	8000ea2 <HAL_PCD_Init+0x14>
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8000ef8:	2100      	movs	r1, #0
 8000efa:	6828      	ldr	r0, [r5, #0]
 8000efc:	f002 f876 	bl	8002fec <USB_SetCurrentMode>
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000f00:	4623      	mov	r3, r4
 8000f02:	e016      	b.n	8000f32 <HAL_PCD_Init+0xa4>
    hpcd->IN_ep[i].is_in = 1U;
 8000f04:	ebc3 02c3 	rsb	r2, r3, r3, lsl #3
 8000f08:	eb05 0282 	add.w	r2, r5, r2, lsl #2
 8000f0c:	2101      	movs	r1, #1
 8000f0e:	f882 103d 	strb.w	r1, [r2, #61]	; 0x3d
    hpcd->IN_ep[i].num = i;
 8000f12:	f882 303c 	strb.w	r3, [r2, #60]	; 0x3c
    hpcd->IN_ep[i].tx_fifo_num = i;
 8000f16:	f8a2 3042 	strh.w	r3, [r2, #66]	; 0x42
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8000f1a:	2100      	movs	r1, #0
 8000f1c:	f882 103f 	strb.w	r1, [r2, #63]	; 0x3f
    hpcd->IN_ep[i].maxpacket = 0U;
 8000f20:	6451      	str	r1, [r2, #68]	; 0x44
    hpcd->IN_ep[i].xfer_buff = 0U;
 8000f22:	6491      	str	r1, [r2, #72]	; 0x48
    hpcd->IN_ep[i].xfer_len = 0U;
 8000f24:	ebc3 02c3 	rsb	r2, r3, r3, lsl #3
 8000f28:	eb05 0282 	add.w	r2, r5, r2, lsl #2
 8000f2c:	6511      	str	r1, [r2, #80]	; 0x50
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000f2e:	3301      	adds	r3, #1
 8000f30:	b2db      	uxtb	r3, r3
 8000f32:	6869      	ldr	r1, [r5, #4]
 8000f34:	428b      	cmp	r3, r1
 8000f36:	d3e5      	bcc.n	8000f04 <HAL_PCD_Init+0x76>
 8000f38:	e016      	b.n	8000f68 <HAL_PCD_Init+0xda>
    hpcd->OUT_ep[i].is_in = 0U;
 8000f3a:	ebc4 03c4 	rsb	r3, r4, r4, lsl #3
 8000f3e:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8000f42:	2200      	movs	r2, #0
 8000f44:	f883 21fd 	strb.w	r2, [r3, #509]	; 0x1fd
    hpcd->OUT_ep[i].num = i;
 8000f48:	f883 41fc 	strb.w	r4, [r3, #508]	; 0x1fc
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8000f4c:	f883 21ff 	strb.w	r2, [r3, #511]	; 0x1ff
    hpcd->OUT_ep[i].maxpacket = 0U;
 8000f50:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8000f54:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
    hpcd->OUT_ep[i].xfer_len = 0U;
 8000f58:	ebc4 03c4 	rsb	r3, r4, r4, lsl #3
 8000f5c:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8000f60:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000f64:	3401      	adds	r4, #1
 8000f66:	b2e4      	uxtb	r4, r4
 8000f68:	42a1      	cmp	r1, r4
 8000f6a:	d8e6      	bhi.n	8000f3a <HAL_PCD_Init+0xac>
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000f6c:	462c      	mov	r4, r5
 8000f6e:	f854 7b10 	ldr.w	r7, [r4], #16
 8000f72:	466e      	mov	r6, sp
 8000f74:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000f76:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8000f78:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000f7a:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8000f7c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000f80:	e886 0003 	stmia.w	r6, {r0, r1}
 8000f84:	1d2b      	adds	r3, r5, #4
 8000f86:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000f88:	4638      	mov	r0, r7
 8000f8a:	f001 fc09 	bl	80027a0 <USB_DevInit>
 8000f8e:	4604      	mov	r4, r0
 8000f90:	b120      	cbz	r0, 8000f9c <HAL_PCD_Init+0x10e>
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000f92:	2302      	movs	r3, #2
 8000f94:	f885 33bd 	strb.w	r3, [r5, #957]	; 0x3bd
    return HAL_ERROR;
 8000f98:	2401      	movs	r4, #1
 8000f9a:	e7a5      	b.n	8000ee8 <HAL_PCD_Init+0x5a>
  hpcd->USB_Address = 0U;
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	f885 3038 	strb.w	r3, [r5, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8000fa2:	2301      	movs	r3, #1
 8000fa4:	f885 33bd 	strb.w	r3, [r5, #957]	; 0x3bd
  (void)USB_DevDisconnect(hpcd->Instance);
 8000fa8:	6828      	ldr	r0, [r5, #0]
 8000faa:	f001 ffdc 	bl	8002f66 <USB_DevDisconnect>
  return HAL_OK;
 8000fae:	e79b      	b.n	8000ee8 <HAL_PCD_Init+0x5a>
    return HAL_ERROR;
 8000fb0:	2401      	movs	r4, #1
 8000fb2:	e799      	b.n	8000ee8 <HAL_PCD_Init+0x5a>

08000fb4 <HAL_PCD_Start>:
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8000fb4:	6802      	ldr	r2, [r0, #0]
  __HAL_LOCK(hpcd);
 8000fb6:	f890 33bc 	ldrb.w	r3, [r0, #956]	; 0x3bc
 8000fba:	2b01      	cmp	r3, #1
 8000fbc:	d019      	beq.n	8000ff2 <HAL_PCD_Start+0x3e>
{
 8000fbe:	b510      	push	{r4, lr}
 8000fc0:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 8000fc2:	2301      	movs	r3, #1
 8000fc4:	f880 33bc 	strb.w	r3, [r0, #956]	; 0x3bc
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8000fc8:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8000fca:	2b01      	cmp	r3, #1
 8000fcc:	d009      	beq.n	8000fe2 <HAL_PCD_Start+0x2e>
  __HAL_PCD_ENABLE(hpcd);
 8000fce:	6820      	ldr	r0, [r4, #0]
 8000fd0:	f001 fba4 	bl	800271c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8000fd4:	6820      	ldr	r0, [r4, #0]
 8000fd6:	f001 ffb8 	bl	8002f4a <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8000fda:	2000      	movs	r0, #0
 8000fdc:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc
}
 8000fe0:	bd10      	pop	{r4, pc}
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8000fe2:	6983      	ldr	r3, [r0, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8000fe4:	2b01      	cmp	r3, #1
 8000fe6:	d0f2      	beq.n	8000fce <HAL_PCD_Start+0x1a>
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8000fe8:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8000fea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000fee:	6393      	str	r3, [r2, #56]	; 0x38
 8000ff0:	e7ed      	b.n	8000fce <HAL_PCD_Start+0x1a>
  __HAL_LOCK(hpcd);
 8000ff2:	2002      	movs	r0, #2
}
 8000ff4:	4770      	bx	lr
	...

08000ff8 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8000ff8:	b570      	push	{r4, r5, r6, lr}
 8000ffa:	4604      	mov	r4, r0
 8000ffc:	460d      	mov	r5, r1
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8000ffe:	6800      	ldr	r0, [r0, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8001000:	6c06      	ldr	r6, [r0, #64]	; 0x40
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8001002:	eb00 1341 	add.w	r3, r0, r1, lsl #5
 8001006:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800100a:	689a      	ldr	r2, [r3, #8]

  if (hpcd->Init.dma_enable == 1U)
 800100c:	6921      	ldr	r1, [r4, #16]
 800100e:	2901      	cmp	r1, #1
 8001010:	d011      	beq.n	8001036 <PCD_EP_OutXfrComplete_int+0x3e>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8001012:	4935      	ldr	r1, [pc, #212]	; (80010e8 <PCD_EP_OutXfrComplete_int+0xf0>)
 8001014:	428e      	cmp	r6, r1
 8001016:	d050      	beq.n	80010ba <PCD_EP_OutXfrComplete_int+0xc2>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8001018:	b93d      	cbnz	r5, 800102a <PCD_EP_OutXfrComplete_int+0x32>
 800101a:	ebc5 03c5 	rsb	r3, r5, r5, lsl #3
 800101e:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8001022:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8001026:	2b00      	cmp	r3, #0
 8001028:	d058      	beq.n	80010dc <PCD_EP_OutXfrComplete_int+0xe4>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800102a:	b2e9      	uxtb	r1, r5
 800102c:	4620      	mov	r0, r4
 800102e:	f002 ffdd 	bl	8003fec <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
}
 8001032:	2000      	movs	r0, #0
 8001034:	bd70      	pop	{r4, r5, r6, pc}
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8001036:	f012 0f08 	tst.w	r2, #8
 800103a:	d009      	beq.n	8001050 <PCD_EP_OutXfrComplete_int+0x58>
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800103c:	492b      	ldr	r1, [pc, #172]	; (80010ec <PCD_EP_OutXfrComplete_int+0xf4>)
 800103e:	428e      	cmp	r6, r1
 8001040:	d9f7      	bls.n	8001032 <PCD_EP_OutXfrComplete_int+0x3a>
 8001042:	f412 4f00 	tst.w	r2, #32768	; 0x8000
 8001046:	d0f4      	beq.n	8001032 <PCD_EP_OutXfrComplete_int+0x3a>
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8001048:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800104c:	609a      	str	r2, [r3, #8]
 800104e:	e7f0      	b.n	8001032 <PCD_EP_OutXfrComplete_int+0x3a>
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8001050:	f012 0f20 	tst.w	r2, #32
 8001054:	d002      	beq.n	800105c <PCD_EP_OutXfrComplete_int+0x64>
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001056:	2220      	movs	r2, #32
 8001058:	609a      	str	r2, [r3, #8]
 800105a:	e7ea      	b.n	8001032 <PCD_EP_OutXfrComplete_int+0x3a>
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800105c:	f012 0f28 	tst.w	r2, #40	; 0x28
 8001060:	d1e7      	bne.n	8001032 <PCD_EP_OutXfrComplete_int+0x3a>
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8001062:	4922      	ldr	r1, [pc, #136]	; (80010ec <PCD_EP_OutXfrComplete_int+0xf4>)
 8001064:	428e      	cmp	r6, r1
 8001066:	d906      	bls.n	8001076 <PCD_EP_OutXfrComplete_int+0x7e>
 8001068:	f412 4f00 	tst.w	r2, #32768	; 0x8000
 800106c:	d003      	beq.n	8001076 <PCD_EP_OutXfrComplete_int+0x7e>
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800106e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001072:	609a      	str	r2, [r3, #8]
 8001074:	e7dd      	b.n	8001032 <PCD_EP_OutXfrComplete_int+0x3a>
          hpcd->OUT_ep[epnum].maxpacket -
 8001076:	ebc5 02c5 	rsb	r2, r5, r5, lsl #3
 800107a:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800107e:	f8d2 1204 	ldr.w	r1, [r2, #516]	; 0x204
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8001082:	691b      	ldr	r3, [r3, #16]
 8001084:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8001088:	1ac9      	subs	r1, r1, r3
        hpcd->OUT_ep[epnum].xfer_count =
 800108a:	f8c2 1214 	str.w	r1, [r2, #532]	; 0x214
        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 800108e:	f8d2 1204 	ldr.w	r1, [r2, #516]	; 0x204
 8001092:	f8d2 3208 	ldr.w	r3, [r2, #520]	; 0x208
 8001096:	440b      	add	r3, r1
 8001098:	f8c2 3208 	str.w	r3, [r2, #520]	; 0x208
        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800109c:	b915      	cbnz	r5, 80010a4 <PCD_EP_OutXfrComplete_int+0xac>
 800109e:	f8d2 3210 	ldr.w	r3, [r2, #528]	; 0x210
 80010a2:	b123      	cbz	r3, 80010ae <PCD_EP_OutXfrComplete_int+0xb6>
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80010a4:	b2e9      	uxtb	r1, r5
 80010a6:	4620      	mov	r0, r4
 80010a8:	f002 ffa0 	bl	8003fec <HAL_PCD_DataOutStageCallback>
 80010ac:	e7c1      	b.n	8001032 <PCD_EP_OutXfrComplete_int+0x3a>
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80010ae:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 80010b2:	2101      	movs	r1, #1
 80010b4:	f001 ffdc 	bl	8003070 <USB_EP0_OutStart>
 80010b8:	e7f4      	b.n	80010a4 <PCD_EP_OutXfrComplete_int+0xac>
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80010ba:	f412 4f00 	tst.w	r2, #32768	; 0x8000
 80010be:	d003      	beq.n	80010c8 <PCD_EP_OutXfrComplete_int+0xd0>
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80010c0:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80010c4:	609a      	str	r2, [r3, #8]
 80010c6:	e7b4      	b.n	8001032 <PCD_EP_OutXfrComplete_int+0x3a>
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80010c8:	f012 0f20 	tst.w	r2, #32
 80010cc:	d001      	beq.n	80010d2 <PCD_EP_OutXfrComplete_int+0xda>
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80010ce:	2220      	movs	r2, #32
 80010d0:	609a      	str	r2, [r3, #8]
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80010d2:	b2e9      	uxtb	r1, r5
 80010d4:	4620      	mov	r0, r4
 80010d6:	f002 ff89 	bl	8003fec <HAL_PCD_DataOutStageCallback>
 80010da:	e7aa      	b.n	8001032 <PCD_EP_OutXfrComplete_int+0x3a>
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80010dc:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 80010e0:	2100      	movs	r1, #0
 80010e2:	f001 ffc5 	bl	8003070 <USB_EP0_OutStart>
 80010e6:	e7a0      	b.n	800102a <PCD_EP_OutXfrComplete_int+0x32>
 80010e8:	4f54310a 	.word	0x4f54310a
 80010ec:	4f54300a 	.word	0x4f54300a

080010f0 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80010f0:	b538      	push	{r3, r4, r5, lr}
 80010f2:	4604      	mov	r4, r0
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80010f4:	6803      	ldr	r3, [r0, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80010f6:	6c1d      	ldr	r5, [r3, #64]	; 0x40
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80010f8:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 80010fc:	f8d3 1b08 	ldr.w	r1, [r3, #2824]	; 0xb08

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8001100:	4a0e      	ldr	r2, [pc, #56]	; (800113c <PCD_EP_OutSetupPacket_int+0x4c>)
 8001102:	4295      	cmp	r5, r2
 8001104:	d907      	bls.n	8001116 <PCD_EP_OutSetupPacket_int+0x26>
 8001106:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800110a:	f411 4f00 	tst.w	r1, #32768	; 0x8000
 800110e:	d002      	beq.n	8001116 <PCD_EP_OutSetupPacket_int+0x26>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8001110:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001114:	609a      	str	r2, [r3, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8001116:	4620      	mov	r0, r4
 8001118:	f002 ff60 	bl	8003fdc <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800111c:	4b07      	ldr	r3, [pc, #28]	; (800113c <PCD_EP_OutSetupPacket_int+0x4c>)
 800111e:	429d      	cmp	r5, r3
 8001120:	d902      	bls.n	8001128 <PCD_EP_OutSetupPacket_int+0x38>
 8001122:	6923      	ldr	r3, [r4, #16]
 8001124:	2b01      	cmp	r3, #1
 8001126:	d001      	beq.n	800112c <PCD_EP_OutSetupPacket_int+0x3c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
  }

  return HAL_OK;
}
 8001128:	2000      	movs	r0, #0
 800112a:	bd38      	pop	{r3, r4, r5, pc}
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800112c:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 8001130:	2101      	movs	r1, #1
 8001132:	6820      	ldr	r0, [r4, #0]
 8001134:	f001 ff9c 	bl	8003070 <USB_EP0_OutStart>
 8001138:	e7f6      	b.n	8001128 <PCD_EP_OutSetupPacket_int+0x38>
 800113a:	bf00      	nop
 800113c:	4f54300a 	.word	0x4f54300a

08001140 <HAL_PCD_IRQHandler>:
{
 8001140:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001144:	b083      	sub	sp, #12
 8001146:	4604      	mov	r4, r0
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001148:	6805      	ldr	r5, [r0, #0]
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800114a:	4628      	mov	r0, r5
 800114c:	f001 ff4a 	bl	8002fe4 <USB_GetMode>
 8001150:	b110      	cbz	r0, 8001158 <HAL_PCD_IRQHandler+0x18>
}
 8001152:	b003      	add	sp, #12
 8001154:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001158:	462f      	mov	r7, r5
 800115a:	4606      	mov	r6, r0
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800115c:	6820      	ldr	r0, [r4, #0]
 800115e:	f001 ff10 	bl	8002f82 <USB_ReadInterrupts>
 8001162:	2800      	cmp	r0, #0
 8001164:	d0f5      	beq.n	8001152 <HAL_PCD_IRQHandler+0x12>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001166:	6820      	ldr	r0, [r4, #0]
 8001168:	f001 ff0b 	bl	8002f82 <USB_ReadInterrupts>
 800116c:	f010 0f02 	tst.w	r0, #2
 8001170:	d004      	beq.n	800117c <HAL_PCD_IRQHandler+0x3c>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001172:	6822      	ldr	r2, [r4, #0]
 8001174:	6953      	ldr	r3, [r2, #20]
 8001176:	f003 0302 	and.w	r3, r3, #2
 800117a:	6153      	str	r3, [r2, #20]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800117c:	6820      	ldr	r0, [r4, #0]
 800117e:	f001 ff00 	bl	8002f82 <USB_ReadInterrupts>
 8001182:	f010 0f10 	tst.w	r0, #16
 8001186:	d014      	beq.n	80011b2 <HAL_PCD_IRQHandler+0x72>
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001188:	6822      	ldr	r2, [r4, #0]
 800118a:	6993      	ldr	r3, [r2, #24]
 800118c:	f023 0310 	bic.w	r3, r3, #16
 8001190:	6193      	str	r3, [r2, #24]
      temp = USBx->GRXSTSP;
 8001192:	f8d5 8020 	ldr.w	r8, [r5, #32]
      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8001196:	f008 090f 	and.w	r9, r8, #15
      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800119a:	f3c8 4343 	ubfx	r3, r8, #17, #4
 800119e:	2b02      	cmp	r3, #2
 80011a0:	d068      	beq.n	8001274 <HAL_PCD_IRQHandler+0x134>
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 80011a2:	2b06      	cmp	r3, #6
 80011a4:	f000 808d 	beq.w	80012c2 <HAL_PCD_IRQHandler+0x182>
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80011a8:	6822      	ldr	r2, [r4, #0]
 80011aa:	6993      	ldr	r3, [r2, #24]
 80011ac:	f043 0310 	orr.w	r3, r3, #16
 80011b0:	6193      	str	r3, [r2, #24]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80011b2:	6820      	ldr	r0, [r4, #0]
 80011b4:	f001 fee5 	bl	8002f82 <USB_ReadInterrupts>
 80011b8:	f410 2f00 	tst.w	r0, #524288	; 0x80000
 80011bc:	f040 8093 	bne.w	80012e6 <HAL_PCD_IRQHandler+0x1a6>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80011c0:	6820      	ldr	r0, [r4, #0]
 80011c2:	f001 fede 	bl	8002f82 <USB_ReadInterrupts>
 80011c6:	f410 2f80 	tst.w	r0, #262144	; 0x40000
 80011ca:	f040 80d7 	bne.w	800137c <HAL_PCD_IRQHandler+0x23c>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80011ce:	6820      	ldr	r0, [r4, #0]
 80011d0:	f001 fed7 	bl	8002f82 <USB_ReadInterrupts>
 80011d4:	2800      	cmp	r0, #0
 80011d6:	f2c0 8143 	blt.w	8001460 <HAL_PCD_IRQHandler+0x320>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80011da:	6820      	ldr	r0, [r4, #0]
 80011dc:	f001 fed1 	bl	8002f82 <USB_ReadInterrupts>
 80011e0:	f410 6f00 	tst.w	r0, #2048	; 0x800
 80011e4:	d00a      	beq.n	80011fc <HAL_PCD_IRQHandler+0xbc>
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80011e6:	f8d5 3808 	ldr.w	r3, [r5, #2056]	; 0x808
 80011ea:	f013 0f01 	tst.w	r3, #1
 80011ee:	f040 8151 	bne.w	8001494 <HAL_PCD_IRQHandler+0x354>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80011f2:	6822      	ldr	r2, [r4, #0]
 80011f4:	6953      	ldr	r3, [r2, #20]
 80011f6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80011fa:	6153      	str	r3, [r2, #20]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80011fc:	6820      	ldr	r0, [r4, #0]
 80011fe:	f001 fec0 	bl	8002f82 <USB_ReadInterrupts>
 8001202:	f410 5f80 	tst.w	r0, #4096	; 0x1000
 8001206:	f040 8149 	bne.w	800149c <HAL_PCD_IRQHandler+0x35c>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800120a:	6820      	ldr	r0, [r4, #0]
 800120c:	f001 feb9 	bl	8002f82 <USB_ReadInterrupts>
 8001210:	f410 5f00 	tst.w	r0, #8192	; 0x2000
 8001214:	f040 81a8 	bne.w	8001568 <HAL_PCD_IRQHandler+0x428>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8001218:	6820      	ldr	r0, [r4, #0]
 800121a:	f001 feb2 	bl	8002f82 <USB_ReadInterrupts>
 800121e:	f010 0f08 	tst.w	r0, #8
 8001222:	f040 81b9 	bne.w	8001598 <HAL_PCD_IRQHandler+0x458>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8001226:	6820      	ldr	r0, [r4, #0]
 8001228:	f001 feab 	bl	8002f82 <USB_ReadInterrupts>
 800122c:	f410 1f80 	tst.w	r0, #1048576	; 0x100000
 8001230:	f040 81bb 	bne.w	80015aa <HAL_PCD_IRQHandler+0x46a>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001234:	6820      	ldr	r0, [r4, #0]
 8001236:	f001 fea4 	bl	8002f82 <USB_ReadInterrupts>
 800123a:	f410 1f00 	tst.w	r0, #2097152	; 0x200000
 800123e:	f040 81be 	bne.w	80015be <HAL_PCD_IRQHandler+0x47e>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8001242:	6820      	ldr	r0, [r4, #0]
 8001244:	f001 fe9d 	bl	8002f82 <USB_ReadInterrupts>
 8001248:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800124c:	f040 81c1 	bne.w	80015d2 <HAL_PCD_IRQHandler+0x492>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8001250:	6820      	ldr	r0, [r4, #0]
 8001252:	f001 fe96 	bl	8002f82 <USB_ReadInterrupts>
 8001256:	f010 0f04 	tst.w	r0, #4
 800125a:	f43f af7a 	beq.w	8001152 <HAL_PCD_IRQHandler+0x12>
      temp = hpcd->Instance->GOTGINT;
 800125e:	6823      	ldr	r3, [r4, #0]
 8001260:	685d      	ldr	r5, [r3, #4]
      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8001262:	f015 0f04 	tst.w	r5, #4
 8001266:	f040 81bd 	bne.w	80015e4 <HAL_PCD_IRQHandler+0x4a4>
      hpcd->Instance->GOTGINT |= temp;
 800126a:	6822      	ldr	r2, [r4, #0]
 800126c:	6853      	ldr	r3, [r2, #4]
 800126e:	432b      	orrs	r3, r5
 8001270:	6053      	str	r3, [r2, #4]
 8001272:	e76e      	b.n	8001152 <HAL_PCD_IRQHandler+0x12>
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8001274:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8001278:	ea18 0f03 	tst.w	r8, r3
 800127c:	d094      	beq.n	80011a8 <HAL_PCD_IRQHandler+0x68>
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 800127e:	ea4f 1b18 	mov.w	fp, r8, lsr #4
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001282:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001286:	9301      	str	r3, [sp, #4]
 8001288:	ebc9 0ac9 	rsb	sl, r9, r9, lsl #3
 800128c:	eb04 0a8a 	add.w	sl, r4, sl, lsl #2
 8001290:	f3c8 120a 	ubfx	r2, r8, #4, #11
 8001294:	f8da 1208 	ldr.w	r1, [sl, #520]	; 0x208
 8001298:	4628      	mov	r0, r5
 800129a:	f001 fdc5 	bl	8002e28 <USB_ReadPacket>
          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800129e:	f3cb 0b0a 	ubfx	fp, fp, #0, #11
 80012a2:	f8da 3208 	ldr.w	r3, [sl, #520]	; 0x208
 80012a6:	445b      	add	r3, fp
 80012a8:	f8ca 3208 	str.w	r3, [sl, #520]	; 0x208
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80012ac:	9b01      	ldr	r3, [sp, #4]
 80012ae:	eba3 0309 	sub.w	r3, r3, r9
 80012b2:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80012b6:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80012ba:	445b      	add	r3, fp
 80012bc:	f8ca 3214 	str.w	r3, [sl, #532]	; 0x214
 80012c0:	e772      	b.n	80011a8 <HAL_PCD_IRQHandler+0x68>
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80012c2:	2208      	movs	r2, #8
 80012c4:	f504 7171 	add.w	r1, r4, #964	; 0x3c4
 80012c8:	4628      	mov	r0, r5
 80012ca:	f001 fdad 	bl	8002e28 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80012ce:	f3c8 180a 	ubfx	r8, r8, #4, #11
 80012d2:	ebc9 02c9 	rsb	r2, r9, r9, lsl #3
 80012d6:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 80012da:	f8d2 3214 	ldr.w	r3, [r2, #532]	; 0x214
 80012de:	4443      	add	r3, r8
 80012e0:	f8c2 3214 	str.w	r3, [r2, #532]	; 0x214
 80012e4:	e760      	b.n	80011a8 <HAL_PCD_IRQHandler+0x68>
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80012e6:	6820      	ldr	r0, [r4, #0]
 80012e8:	f001 fe4f 	bl	8002f8a <USB_ReadDevAllOutEpInterrupt>
 80012ec:	4680      	mov	r8, r0
      epnum = 0U;
 80012ee:	46b1      	mov	r9, r6
      while (ep_intr != 0U)
 80012f0:	e017      	b.n	8001322 <HAL_PCD_IRQHandler+0x1e2>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80012f2:	eb07 1349 	add.w	r3, r7, r9, lsl #5
 80012f6:	2201      	movs	r2, #1
 80012f8:	f8c3 2b08 	str.w	r2, [r3, #2824]	; 0xb08
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80012fc:	4649      	mov	r1, r9
 80012fe:	4620      	mov	r0, r4
 8001300:	f7ff fe7a 	bl	8000ff8 <PCD_EP_OutXfrComplete_int>
 8001304:	e01d      	b.n	8001342 <HAL_PCD_IRQHandler+0x202>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8001306:	eb07 1349 	add.w	r3, r7, r9, lsl #5
 800130a:	2208      	movs	r2, #8
 800130c:	f8c3 2b08 	str.w	r2, [r3, #2824]	; 0xb08
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8001310:	4649      	mov	r1, r9
 8001312:	4620      	mov	r0, r4
 8001314:	f7ff feec 	bl	80010f0 <PCD_EP_OutSetupPacket_int>
 8001318:	e016      	b.n	8001348 <HAL_PCD_IRQHandler+0x208>
        epnum++;
 800131a:	f109 0901 	add.w	r9, r9, #1
        ep_intr >>= 1U;
 800131e:	ea4f 0858 	mov.w	r8, r8, lsr #1
      while (ep_intr != 0U)
 8001322:	f1b8 0f00 	cmp.w	r8, #0
 8001326:	f43f af4b 	beq.w	80011c0 <HAL_PCD_IRQHandler+0x80>
        if ((ep_intr & 0x1U) != 0U)
 800132a:	f018 0f01 	tst.w	r8, #1
 800132e:	d0f4      	beq.n	800131a <HAL_PCD_IRQHandler+0x1da>
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001330:	fa5f f189 	uxtb.w	r1, r9
 8001334:	6820      	ldr	r0, [r4, #0]
 8001336:	f001 fe38 	bl	8002faa <USB_ReadDevOutEPInterrupt>
 800133a:	4682      	mov	sl, r0
          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800133c:	f010 0f01 	tst.w	r0, #1
 8001340:	d1d7      	bne.n	80012f2 <HAL_PCD_IRQHandler+0x1b2>
          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8001342:	f01a 0f08 	tst.w	sl, #8
 8001346:	d1de      	bne.n	8001306 <HAL_PCD_IRQHandler+0x1c6>
          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8001348:	f01a 0f10 	tst.w	sl, #16
 800134c:	d004      	beq.n	8001358 <HAL_PCD_IRQHandler+0x218>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800134e:	eb07 1349 	add.w	r3, r7, r9, lsl #5
 8001352:	2210      	movs	r2, #16
 8001354:	f8c3 2b08 	str.w	r2, [r3, #2824]	; 0xb08
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001358:	f01a 0f20 	tst.w	sl, #32
 800135c:	d004      	beq.n	8001368 <HAL_PCD_IRQHandler+0x228>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800135e:	eb07 1349 	add.w	r3, r7, r9, lsl #5
 8001362:	2220      	movs	r2, #32
 8001364:	f8c3 2b08 	str.w	r2, [r3, #2824]	; 0xb08
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8001368:	f41a 5f00 	tst.w	sl, #8192	; 0x2000
 800136c:	d0d5      	beq.n	800131a <HAL_PCD_IRQHandler+0x1da>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800136e:	eb07 1349 	add.w	r3, r7, r9, lsl #5
 8001372:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001376:	f8c3 2b08 	str.w	r2, [r3, #2824]	; 0xb08
 800137a:	e7ce      	b.n	800131a <HAL_PCD_IRQHandler+0x1da>
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800137c:	6820      	ldr	r0, [r4, #0]
 800137e:	f001 fe0c 	bl	8002f9a <USB_ReadDevAllInEpInterrupt>
 8001382:	4680      	mov	r8, r0
      epnum = 0U;
 8001384:	46b1      	mov	r9, r6
      while (ep_intr != 0U)
 8001386:	e02a      	b.n	80013de <HAL_PCD_IRQHandler+0x29e>
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8001388:	4659      	mov	r1, fp
 800138a:	4620      	mov	r0, r4
 800138c:	f002 fe3a 	bl	8004004 <HAL_PCD_DataInStageCallback>
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8001390:	f01a 0f08 	tst.w	sl, #8
 8001394:	d004      	beq.n	80013a0 <HAL_PCD_IRQHandler+0x260>
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8001396:	eb07 1349 	add.w	r3, r7, r9, lsl #5
 800139a:	2208      	movs	r2, #8
 800139c:	f8c3 2908 	str.w	r2, [r3, #2312]	; 0x908
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80013a0:	f01a 0f10 	tst.w	sl, #16
 80013a4:	d004      	beq.n	80013b0 <HAL_PCD_IRQHandler+0x270>
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80013a6:	eb07 1349 	add.w	r3, r7, r9, lsl #5
 80013aa:	2210      	movs	r2, #16
 80013ac:	f8c3 2908 	str.w	r2, [r3, #2312]	; 0x908
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80013b0:	f01a 0f40 	tst.w	sl, #64	; 0x40
 80013b4:	d004      	beq.n	80013c0 <HAL_PCD_IRQHandler+0x280>
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80013b6:	eb07 1349 	add.w	r3, r7, r9, lsl #5
 80013ba:	2240      	movs	r2, #64	; 0x40
 80013bc:	f8c3 2908 	str.w	r2, [r3, #2312]	; 0x908
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80013c0:	f01a 0f02 	tst.w	sl, #2
 80013c4:	d004      	beq.n	80013d0 <HAL_PCD_IRQHandler+0x290>
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80013c6:	eb07 1349 	add.w	r3, r7, r9, lsl #5
 80013ca:	2202      	movs	r2, #2
 80013cc:	f8c3 2908 	str.w	r2, [r3, #2312]	; 0x908
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80013d0:	f01a 0f80 	tst.w	sl, #128	; 0x80
 80013d4:	d13f      	bne.n	8001456 <HAL_PCD_IRQHandler+0x316>
        epnum++;
 80013d6:	f109 0901 	add.w	r9, r9, #1
        ep_intr >>= 1U;
 80013da:	ea4f 0858 	mov.w	r8, r8, lsr #1
      while (ep_intr != 0U)
 80013de:	f1b8 0f00 	cmp.w	r8, #0
 80013e2:	f43f aef4 	beq.w	80011ce <HAL_PCD_IRQHandler+0x8e>
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80013e6:	f018 0f01 	tst.w	r8, #1
 80013ea:	d0f4      	beq.n	80013d6 <HAL_PCD_IRQHandler+0x296>
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80013ec:	fa5f fb89 	uxtb.w	fp, r9
 80013f0:	4659      	mov	r1, fp
 80013f2:	6820      	ldr	r0, [r4, #0]
 80013f4:	f001 fde2 	bl	8002fbc <USB_ReadDevInEPInterrupt>
 80013f8:	4682      	mov	sl, r0
          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80013fa:	f010 0f01 	tst.w	r0, #1
 80013fe:	d0c7      	beq.n	8001390 <HAL_PCD_IRQHandler+0x250>
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001400:	f009 030f 	and.w	r3, r9, #15
 8001404:	2101      	movs	r1, #1
 8001406:	fa01 f203 	lsl.w	r2, r1, r3
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800140a:	f8d7 3834 	ldr.w	r3, [r7, #2100]	; 0x834
 800140e:	ea23 0302 	bic.w	r3, r3, r2
 8001412:	f8c7 3834 	str.w	r3, [r7, #2100]	; 0x834
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8001416:	eb07 1349 	add.w	r3, r7, r9, lsl #5
 800141a:	f8c3 1908 	str.w	r1, [r3, #2312]	; 0x908
            if (hpcd->Init.dma_enable == 1U)
 800141e:	6923      	ldr	r3, [r4, #16]
 8001420:	428b      	cmp	r3, r1
 8001422:	d1b1      	bne.n	8001388 <HAL_PCD_IRQHandler+0x248>
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8001424:	ebc9 03c9 	rsb	r3, r9, r9, lsl #3
 8001428:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800142c:	6c59      	ldr	r1, [r3, #68]	; 0x44
 800142e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001430:	440a      	add	r2, r1
 8001432:	649a      	str	r2, [r3, #72]	; 0x48
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8001434:	f1b9 0f00 	cmp.w	r9, #0
 8001438:	d1a6      	bne.n	8001388 <HAL_PCD_IRQHandler+0x248>
 800143a:	ebc9 03c9 	rsb	r3, r9, r9, lsl #3
 800143e:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8001442:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001444:	2b00      	cmp	r3, #0
 8001446:	d19f      	bne.n	8001388 <HAL_PCD_IRQHandler+0x248>
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001448:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 800144c:	2101      	movs	r1, #1
 800144e:	6820      	ldr	r0, [r4, #0]
 8001450:	f001 fe0e 	bl	8003070 <USB_EP0_OutStart>
 8001454:	e798      	b.n	8001388 <HAL_PCD_IRQHandler+0x248>
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8001456:	4649      	mov	r1, r9
 8001458:	4620      	mov	r0, r4
 800145a:	f7ff fcaf 	bl	8000dbc <PCD_WriteEmptyTxFifo>
 800145e:	e7ba      	b.n	80013d6 <HAL_PCD_IRQHandler+0x296>
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001460:	f8d5 3804 	ldr.w	r3, [r5, #2052]	; 0x804
 8001464:	f023 0301 	bic.w	r3, r3, #1
 8001468:	f8c5 3804 	str.w	r3, [r5, #2052]	; 0x804
      if (hpcd->LPM_State == LPM_L1)
 800146c:	f894 33f4 	ldrb.w	r3, [r4, #1012]	; 0x3f4
 8001470:	2b01      	cmp	r3, #1
 8001472:	d008      	beq.n	8001486 <HAL_PCD_IRQHandler+0x346>
        HAL_PCD_ResumeCallback(hpcd);
 8001474:	4620      	mov	r0, r4
 8001476:	f002 fe01 	bl	800407c <HAL_PCD_ResumeCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800147a:	6822      	ldr	r2, [r4, #0]
 800147c:	6953      	ldr	r3, [r2, #20]
 800147e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001482:	6153      	str	r3, [r2, #20]
 8001484:	e6a9      	b.n	80011da <HAL_PCD_IRQHandler+0x9a>
        hpcd->LPM_State = LPM_L0;
 8001486:	2100      	movs	r1, #0
 8001488:	f884 13f4 	strb.w	r1, [r4, #1012]	; 0x3f4
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800148c:	4620      	mov	r0, r4
 800148e:	f000 fa3e 	bl	800190e <HAL_PCDEx_LPM_Callback>
 8001492:	e7f2      	b.n	800147a <HAL_PCD_IRQHandler+0x33a>
        HAL_PCD_SuspendCallback(hpcd);
 8001494:	4620      	mov	r0, r4
 8001496:	f002 fdd9 	bl	800404c <HAL_PCD_SuspendCallback>
 800149a:	e6aa      	b.n	80011f2 <HAL_PCD_IRQHandler+0xb2>
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800149c:	f505 6800 	add.w	r8, r5, #2048	; 0x800
 80014a0:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80014a4:	f023 0301 	bic.w	r3, r3, #1
 80014a8:	f8c8 3004 	str.w	r3, [r8, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80014ac:	2110      	movs	r1, #16
 80014ae:	6820      	ldr	r0, [r4, #0]
 80014b0:	f001 f940 	bl	8002734 <USB_FlushTxFifo>
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80014b4:	e020      	b.n	80014f8 <HAL_PCD_IRQHandler+0x3b8>
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80014b6:	eb07 1346 	add.w	r3, r7, r6, lsl #5
 80014ba:	f64f 317f 	movw	r1, #64383	; 0xfb7f
 80014be:	f8c3 1908 	str.w	r1, [r3, #2312]	; 0x908
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80014c2:	f8d3 2900 	ldr.w	r2, [r3, #2304]	; 0x900
 80014c6:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 80014ca:	f8c3 2900 	str.w	r2, [r3, #2304]	; 0x900
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80014ce:	f8d3 2900 	ldr.w	r2, [r3, #2304]	; 0x900
 80014d2:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 80014d6:	f8c3 2900 	str.w	r2, [r3, #2304]	; 0x900
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80014da:	f8c3 1b08 	str.w	r1, [r3, #2824]	; 0xb08
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80014de:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	; 0xb00
 80014e2:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 80014e6:	f8c3 2b00 	str.w	r2, [r3, #2816]	; 0xb00
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80014ea:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	; 0xb00
 80014ee:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 80014f2:	f8c3 2b00 	str.w	r2, [r3, #2816]	; 0xb00
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80014f6:	3601      	adds	r6, #1
 80014f8:	6863      	ldr	r3, [r4, #4]
 80014fa:	42b3      	cmp	r3, r6
 80014fc:	d8db      	bhi.n	80014b6 <HAL_PCD_IRQHandler+0x376>
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80014fe:	f8d8 301c 	ldr.w	r3, [r8, #28]
 8001502:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8001506:	f8c8 301c 	str.w	r3, [r8, #28]
      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800150a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800150c:	b1eb      	cbz	r3, 800154a <HAL_PCD_IRQHandler+0x40a>
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800150e:	f8d8 3084 	ldr.w	r3, [r8, #132]	; 0x84
 8001512:	f043 030b 	orr.w	r3, r3, #11
 8001516:	f8c8 3084 	str.w	r3, [r8, #132]	; 0x84
        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800151a:	f8d8 3044 	ldr.w	r3, [r8, #68]	; 0x44
 800151e:	f043 030b 	orr.w	r3, r3, #11
 8001522:	f8c8 3044 	str.w	r3, [r8, #68]	; 0x44
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8001526:	f8d5 3800 	ldr.w	r3, [r5, #2048]	; 0x800
 800152a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800152e:	f8c5 3800 	str.w	r3, [r5, #2048]	; 0x800
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001532:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 8001536:	7c21      	ldrb	r1, [r4, #16]
 8001538:	6820      	ldr	r0, [r4, #0]
 800153a:	f001 fd99 	bl	8003070 <USB_EP0_OutStart>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800153e:	6822      	ldr	r2, [r4, #0]
 8001540:	6953      	ldr	r3, [r2, #20]
 8001542:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001546:	6153      	str	r3, [r2, #20]
 8001548:	e65f      	b.n	800120a <HAL_PCD_IRQHandler+0xca>
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800154a:	f8d8 3014 	ldr.w	r3, [r8, #20]
 800154e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001552:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8001556:	f8c8 3014 	str.w	r3, [r8, #20]
        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800155a:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800155e:	f043 030b 	orr.w	r3, r3, #11
 8001562:	f8c8 3010 	str.w	r3, [r8, #16]
 8001566:	e7de      	b.n	8001526 <HAL_PCD_IRQHandler+0x3e6>
      (void)USB_ActivateSetup(hpcd->Instance);
 8001568:	6820      	ldr	r0, [r4, #0]
 800156a:	f001 fd70 	bl	800304e <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800156e:	6820      	ldr	r0, [r4, #0]
 8001570:	f001 f9e2 	bl	8002938 <USB_GetDevSpeed>
 8001574:	60e0      	str	r0, [r4, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001576:	6825      	ldr	r5, [r4, #0]
 8001578:	f000 fcc6 	bl	8001f08 <HAL_RCC_GetHCLKFreq>
 800157c:	4601      	mov	r1, r0
 800157e:	7b22      	ldrb	r2, [r4, #12]
 8001580:	4628      	mov	r0, r5
 8001582:	f001 f859 	bl	8002638 <USB_SetTurnaroundTime>
      HAL_PCD_ResetCallback(hpcd);
 8001586:	4620      	mov	r0, r4
 8001588:	f002 fd4d 	bl	8004026 <HAL_PCD_ResetCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800158c:	6822      	ldr	r2, [r4, #0]
 800158e:	6953      	ldr	r3, [r2, #20]
 8001590:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001594:	6153      	str	r3, [r2, #20]
 8001596:	e63f      	b.n	8001218 <HAL_PCD_IRQHandler+0xd8>
      HAL_PCD_SOFCallback(hpcd);
 8001598:	4620      	mov	r0, r4
 800159a:	f002 fd3e 	bl	800401a <HAL_PCD_SOFCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800159e:	6822      	ldr	r2, [r4, #0]
 80015a0:	6953      	ldr	r3, [r2, #20]
 80015a2:	f003 0308 	and.w	r3, r3, #8
 80015a6:	6153      	str	r3, [r2, #20]
 80015a8:	e63d      	b.n	8001226 <HAL_PCD_IRQHandler+0xe6>
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80015aa:	2100      	movs	r1, #0
 80015ac:	4620      	mov	r0, r4
 80015ae:	f002 fd71 	bl	8004094 <HAL_PCD_ISOINIncompleteCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80015b2:	6822      	ldr	r2, [r4, #0]
 80015b4:	6953      	ldr	r3, [r2, #20]
 80015b6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80015ba:	6153      	str	r3, [r2, #20]
 80015bc:	e63a      	b.n	8001234 <HAL_PCD_IRQHandler+0xf4>
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80015be:	2100      	movs	r1, #0
 80015c0:	4620      	mov	r0, r4
 80015c2:	f002 fd61 	bl	8004088 <HAL_PCD_ISOOUTIncompleteCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80015c6:	6822      	ldr	r2, [r4, #0]
 80015c8:	6953      	ldr	r3, [r2, #20]
 80015ca:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80015ce:	6153      	str	r3, [r2, #20]
 80015d0:	e637      	b.n	8001242 <HAL_PCD_IRQHandler+0x102>
      HAL_PCD_ConnectCallback(hpcd);
 80015d2:	4620      	mov	r0, r4
 80015d4:	f002 fd64 	bl	80040a0 <HAL_PCD_ConnectCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80015d8:	6822      	ldr	r2, [r4, #0]
 80015da:	6953      	ldr	r3, [r2, #20]
 80015dc:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80015e0:	6153      	str	r3, [r2, #20]
 80015e2:	e635      	b.n	8001250 <HAL_PCD_IRQHandler+0x110>
        HAL_PCD_DisconnectCallback(hpcd);
 80015e4:	4620      	mov	r0, r4
 80015e6:	f002 fd61 	bl	80040ac <HAL_PCD_DisconnectCallback>
 80015ea:	e63e      	b.n	800126a <HAL_PCD_IRQHandler+0x12a>

080015ec <HAL_PCD_SetAddress>:
  __HAL_LOCK(hpcd);
 80015ec:	f890 33bc 	ldrb.w	r3, [r0, #956]	; 0x3bc
 80015f0:	2b01      	cmp	r3, #1
 80015f2:	d00d      	beq.n	8001610 <HAL_PCD_SetAddress+0x24>
{
 80015f4:	b510      	push	{r4, lr}
 80015f6:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 80015f8:	2301      	movs	r3, #1
 80015fa:	f880 33bc 	strb.w	r3, [r0, #956]	; 0x3bc
  hpcd->USB_Address = address;
 80015fe:	f880 1038 	strb.w	r1, [r0, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001602:	6800      	ldr	r0, [r0, #0]
 8001604:	f001 fc91 	bl	8002f2a <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001608:	2000      	movs	r0, #0
 800160a:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc
}
 800160e:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 8001610:	2002      	movs	r0, #2
}
 8001612:	4770      	bx	lr

08001614 <HAL_PCD_EP_Open>:
{
 8001614:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001616:	4607      	mov	r7, r0
 8001618:	460c      	mov	r4, r1
  if ((ep_addr & 0x80U) == 0x80U)
 800161a:	f011 0f80 	tst.w	r1, #128	; 0x80
 800161e:	d127      	bne.n	8001670 <HAL_PCD_EP_Open+0x5c>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001620:	f001 050f 	and.w	r5, r1, #15
 8001624:	ebc5 06c5 	rsb	r6, r5, r5, lsl #3
 8001628:	00b6      	lsls	r6, r6, #2
 800162a:	f506 76fc 	add.w	r6, r6, #504	; 0x1f8
 800162e:	4406      	add	r6, r0
 8001630:	1d31      	adds	r1, r6, #4
    ep->is_in = 0U;
 8001632:	ebc5 05c5 	rsb	r5, r5, r5, lsl #3
 8001636:	eb00 0585 	add.w	r5, r0, r5, lsl #2
 800163a:	2000      	movs	r0, #0
 800163c:	f885 01fd 	strb.w	r0, [r5, #509]	; 0x1fd
  ep->num = ep_addr & EP_ADDR_MSK;
 8001640:	f004 040f 	and.w	r4, r4, #15
 8001644:	700c      	strb	r4, [r1, #0]
  ep->maxpacket = ep_mps;
 8001646:	608a      	str	r2, [r1, #8]
  ep->type = ep_type;
 8001648:	70cb      	strb	r3, [r1, #3]
  if (ep->is_in != 0U)
 800164a:	784a      	ldrb	r2, [r1, #1]
 800164c:	b102      	cbz	r2, 8001650 <HAL_PCD_EP_Open+0x3c>
    ep->tx_fifo_num = ep->num;
 800164e:	80cc      	strh	r4, [r1, #6]
  if (ep_type == EP_TYPE_BULK)
 8001650:	2b02      	cmp	r3, #2
 8001652:	d01d      	beq.n	8001690 <HAL_PCD_EP_Open+0x7c>
  __HAL_LOCK(hpcd);
 8001654:	f897 33bc 	ldrb.w	r3, [r7, #956]	; 0x3bc
 8001658:	2b01      	cmp	r3, #1
 800165a:	d01c      	beq.n	8001696 <HAL_PCD_EP_Open+0x82>
 800165c:	2301      	movs	r3, #1
 800165e:	f887 33bc 	strb.w	r3, [r7, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001662:	6838      	ldr	r0, [r7, #0]
 8001664:	f001 f979 	bl	800295a <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001668:	2000      	movs	r0, #0
 800166a:	f887 03bc 	strb.w	r0, [r7, #956]	; 0x3bc
}
 800166e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001670:	f001 000f 	and.w	r0, r1, #15
 8001674:	ebc0 01c0 	rsb	r1, r0, r0, lsl #3
 8001678:	0089      	lsls	r1, r1, #2
 800167a:	3138      	adds	r1, #56	; 0x38
 800167c:	4439      	add	r1, r7
 800167e:	3104      	adds	r1, #4
    ep->is_in = 1U;
 8001680:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
 8001684:	eb07 0080 	add.w	r0, r7, r0, lsl #2
 8001688:	2501      	movs	r5, #1
 800168a:	f880 503d 	strb.w	r5, [r0, #61]	; 0x3d
 800168e:	e7d7      	b.n	8001640 <HAL_PCD_EP_Open+0x2c>
    ep->data_pid_start = 0U;
 8001690:	2300      	movs	r3, #0
 8001692:	710b      	strb	r3, [r1, #4]
 8001694:	e7de      	b.n	8001654 <HAL_PCD_EP_Open+0x40>
  __HAL_LOCK(hpcd);
 8001696:	2002      	movs	r0, #2
 8001698:	e7e9      	b.n	800166e <HAL_PCD_EP_Open+0x5a>

0800169a <HAL_PCD_EP_Close>:
{
 800169a:	b510      	push	{r4, lr}
 800169c:	4604      	mov	r4, r0
 800169e:	460a      	mov	r2, r1
  if ((ep_addr & 0x80U) == 0x80U)
 80016a0:	f011 0f80 	tst.w	r1, #128	; 0x80
 80016a4:	d120      	bne.n	80016e8 <HAL_PCD_EP_Close+0x4e>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80016a6:	f001 000f 	and.w	r0, r1, #15
 80016aa:	ebc0 03c0 	rsb	r3, r0, r0, lsl #3
 80016ae:	009b      	lsls	r3, r3, #2
 80016b0:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80016b4:	4423      	add	r3, r4
 80016b6:	1d19      	adds	r1, r3, #4
    ep->is_in = 0U;
 80016b8:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
 80016bc:	eb04 0080 	add.w	r0, r4, r0, lsl #2
 80016c0:	2300      	movs	r3, #0
 80016c2:	f880 31fd 	strb.w	r3, [r0, #509]	; 0x1fd
  ep->num   = ep_addr & EP_ADDR_MSK;
 80016c6:	f002 020f 	and.w	r2, r2, #15
 80016ca:	700a      	strb	r2, [r1, #0]
  __HAL_LOCK(hpcd);
 80016cc:	f894 33bc 	ldrb.w	r3, [r4, #956]	; 0x3bc
 80016d0:	2b01      	cmp	r3, #1
 80016d2:	d019      	beq.n	8001708 <HAL_PCD_EP_Close+0x6e>
 80016d4:	2301      	movs	r3, #1
 80016d6:	f884 33bc 	strb.w	r3, [r4, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80016da:	6820      	ldr	r0, [r4, #0]
 80016dc:	f001 f988 	bl	80029f0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80016e0:	2000      	movs	r0, #0
 80016e2:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc
}
 80016e6:	bd10      	pop	{r4, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80016e8:	f001 000f 	and.w	r0, r1, #15
 80016ec:	ebc0 03c0 	rsb	r3, r0, r0, lsl #3
 80016f0:	009b      	lsls	r3, r3, #2
 80016f2:	3338      	adds	r3, #56	; 0x38
 80016f4:	4423      	add	r3, r4
 80016f6:	1d19      	adds	r1, r3, #4
    ep->is_in = 1U;
 80016f8:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
 80016fc:	eb04 0080 	add.w	r0, r4, r0, lsl #2
 8001700:	2301      	movs	r3, #1
 8001702:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
 8001706:	e7de      	b.n	80016c6 <HAL_PCD_EP_Close+0x2c>
  __HAL_LOCK(hpcd);
 8001708:	2002      	movs	r0, #2
 800170a:	e7ec      	b.n	80016e6 <HAL_PCD_EP_Close+0x4c>

0800170c <HAL_PCD_EP_Receive>:
{
 800170c:	b538      	push	{r3, r4, r5, lr}
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800170e:	f001 040f 	and.w	r4, r1, #15
 8001712:	ebc4 01c4 	rsb	r1, r4, r4, lsl #3
 8001716:	0089      	lsls	r1, r1, #2
 8001718:	f501 71fc 	add.w	r1, r1, #504	; 0x1f8
 800171c:	4401      	add	r1, r0
 800171e:	3104      	adds	r1, #4
  ep->xfer_buff = pBuf;
 8001720:	ebc4 05c4 	rsb	r5, r4, r4, lsl #3
 8001724:	eb00 0585 	add.w	r5, r0, r5, lsl #2
 8001728:	f8c5 2208 	str.w	r2, [r5, #520]	; 0x208
  ep->xfer_len = len;
 800172c:	f8c5 3210 	str.w	r3, [r5, #528]	; 0x210
  ep->xfer_count = 0U;
 8001730:	2300      	movs	r3, #0
 8001732:	f8c5 3214 	str.w	r3, [r5, #532]	; 0x214
  ep->is_in = 0U;
 8001736:	f885 31fd 	strb.w	r3, [r5, #509]	; 0x1fd
  ep->num = ep_addr & EP_ADDR_MSK;
 800173a:	f885 41fc 	strb.w	r4, [r5, #508]	; 0x1fc
  if (hpcd->Init.dma_enable == 1U)
 800173e:	6903      	ldr	r3, [r0, #16]
 8001740:	2b01      	cmp	r3, #1
 8001742:	d006      	beq.n	8001752 <HAL_PCD_EP_Receive+0x46>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001744:	b964      	cbnz	r4, 8001760 <HAL_PCD_EP_Receive+0x54>
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001746:	b2da      	uxtb	r2, r3
 8001748:	6800      	ldr	r0, [r0, #0]
 800174a:	f001 f9bf 	bl	8002acc <USB_EP0StartXfer>
}
 800174e:	2000      	movs	r0, #0
 8001750:	bd38      	pop	{r3, r4, r5, pc}
    ep->dma_addr = (uint32_t)pBuf;
 8001752:	ebc4 05c4 	rsb	r5, r4, r4, lsl #3
 8001756:	eb00 0585 	add.w	r5, r0, r5, lsl #2
 800175a:	f8c5 220c 	str.w	r2, [r5, #524]	; 0x20c
 800175e:	e7f1      	b.n	8001744 <HAL_PCD_EP_Receive+0x38>
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001760:	b2da      	uxtb	r2, r3
 8001762:	6800      	ldr	r0, [r0, #0]
 8001764:	f001 fa54 	bl	8002c10 <USB_EPStartXfer>
 8001768:	e7f1      	b.n	800174e <HAL_PCD_EP_Receive+0x42>

0800176a <HAL_PCD_EP_Transmit>:
{
 800176a:	b538      	push	{r3, r4, r5, lr}
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800176c:	f001 040f 	and.w	r4, r1, #15
 8001770:	ebc4 01c4 	rsb	r1, r4, r4, lsl #3
 8001774:	0089      	lsls	r1, r1, #2
 8001776:	3138      	adds	r1, #56	; 0x38
 8001778:	4401      	add	r1, r0
 800177a:	3104      	adds	r1, #4
  ep->xfer_buff = pBuf;
 800177c:	ebc4 05c4 	rsb	r5, r4, r4, lsl #3
 8001780:	eb00 0585 	add.w	r5, r0, r5, lsl #2
 8001784:	64aa      	str	r2, [r5, #72]	; 0x48
  ep->xfer_len = len;
 8001786:	652b      	str	r3, [r5, #80]	; 0x50
  ep->xfer_count = 0U;
 8001788:	2300      	movs	r3, #0
 800178a:	656b      	str	r3, [r5, #84]	; 0x54
  ep->is_in = 1U;
 800178c:	2301      	movs	r3, #1
 800178e:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
  ep->num = ep_addr & EP_ADDR_MSK;
 8001792:	f885 403c 	strb.w	r4, [r5, #60]	; 0x3c
  if (hpcd->Init.dma_enable == 1U)
 8001796:	6903      	ldr	r3, [r0, #16]
 8001798:	2b01      	cmp	r3, #1
 800179a:	d006      	beq.n	80017aa <HAL_PCD_EP_Transmit+0x40>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800179c:	b95c      	cbnz	r4, 80017b6 <HAL_PCD_EP_Transmit+0x4c>
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800179e:	b2da      	uxtb	r2, r3
 80017a0:	6800      	ldr	r0, [r0, #0]
 80017a2:	f001 f993 	bl	8002acc <USB_EP0StartXfer>
}
 80017a6:	2000      	movs	r0, #0
 80017a8:	bd38      	pop	{r3, r4, r5, pc}
    ep->dma_addr = (uint32_t)pBuf;
 80017aa:	ebc4 05c4 	rsb	r5, r4, r4, lsl #3
 80017ae:	eb00 0585 	add.w	r5, r0, r5, lsl #2
 80017b2:	64ea      	str	r2, [r5, #76]	; 0x4c
 80017b4:	e7f2      	b.n	800179c <HAL_PCD_EP_Transmit+0x32>
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80017b6:	b2da      	uxtb	r2, r3
 80017b8:	6800      	ldr	r0, [r0, #0]
 80017ba:	f001 fa29 	bl	8002c10 <USB_EPStartXfer>
 80017be:	e7f2      	b.n	80017a6 <HAL_PCD_EP_Transmit+0x3c>

080017c0 <HAL_PCD_EP_SetStall>:
{
 80017c0:	b538      	push	{r3, r4, r5, lr}
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80017c2:	f001 050f 	and.w	r5, r1, #15
 80017c6:	6842      	ldr	r2, [r0, #4]
 80017c8:	4295      	cmp	r5, r2
 80017ca:	d839      	bhi.n	8001840 <HAL_PCD_EP_SetStall+0x80>
 80017cc:	4604      	mov	r4, r0
 80017ce:	460b      	mov	r3, r1
  if ((0x80U & ep_addr) == 0x80U)
 80017d0:	f011 0f80 	tst.w	r1, #128	; 0x80
 80017d4:	d11f      	bne.n	8001816 <HAL_PCD_EP_SetStall+0x56>
    ep = &hpcd->OUT_ep[ep_addr];
 80017d6:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 80017da:	0089      	lsls	r1, r1, #2
 80017dc:	f501 71fc 	add.w	r1, r1, #504	; 0x1f8
 80017e0:	4401      	add	r1, r0
 80017e2:	3104      	adds	r1, #4
    ep->is_in = 0U;
 80017e4:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80017e8:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 80017ec:	2200      	movs	r2, #0
 80017ee:	f883 21fd 	strb.w	r2, [r3, #509]	; 0x1fd
  ep->is_stall = 1U;
 80017f2:	2301      	movs	r3, #1
 80017f4:	708b      	strb	r3, [r1, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80017f6:	700d      	strb	r5, [r1, #0]
  __HAL_LOCK(hpcd);
 80017f8:	f894 33bc 	ldrb.w	r3, [r4, #956]	; 0x3bc
 80017fc:	2b01      	cmp	r3, #1
 80017fe:	d021      	beq.n	8001844 <HAL_PCD_EP_SetStall+0x84>
 8001800:	2301      	movs	r3, #1
 8001802:	f884 33bc 	strb.w	r3, [r4, #956]	; 0x3bc
  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001806:	6820      	ldr	r0, [r4, #0]
 8001808:	f001 fb34 	bl	8002e74 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800180c:	b18d      	cbz	r5, 8001832 <HAL_PCD_EP_SetStall+0x72>
  __HAL_UNLOCK(hpcd);
 800180e:	2000      	movs	r0, #0
 8001810:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc
}
 8001814:	bd38      	pop	{r3, r4, r5, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001816:	ebc5 01c5 	rsb	r1, r5, r5, lsl #3
 800181a:	0089      	lsls	r1, r1, #2
 800181c:	3138      	adds	r1, #56	; 0x38
 800181e:	4401      	add	r1, r0
 8001820:	3104      	adds	r1, #4
    ep->is_in = 1U;
 8001822:	ebc5 03c5 	rsb	r3, r5, r5, lsl #3
 8001826:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 800182a:	2201      	movs	r2, #1
 800182c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8001830:	e7df      	b.n	80017f2 <HAL_PCD_EP_SetStall+0x32>
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8001832:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 8001836:	7c21      	ldrb	r1, [r4, #16]
 8001838:	6820      	ldr	r0, [r4, #0]
 800183a:	f001 fc19 	bl	8003070 <USB_EP0_OutStart>
 800183e:	e7e6      	b.n	800180e <HAL_PCD_EP_SetStall+0x4e>
    return HAL_ERROR;
 8001840:	2001      	movs	r0, #1
 8001842:	e7e7      	b.n	8001814 <HAL_PCD_EP_SetStall+0x54>
  __HAL_LOCK(hpcd);
 8001844:	2002      	movs	r0, #2
 8001846:	e7e5      	b.n	8001814 <HAL_PCD_EP_SetStall+0x54>

08001848 <HAL_PCD_EP_ClrStall>:
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001848:	f001 030f 	and.w	r3, r1, #15
 800184c:	6842      	ldr	r2, [r0, #4]
 800184e:	4293      	cmp	r3, r2
 8001850:	d831      	bhi.n	80018b6 <HAL_PCD_EP_ClrStall+0x6e>
{
 8001852:	b510      	push	{r4, lr}
 8001854:	4604      	mov	r4, r0
  if ((0x80U & ep_addr) == 0x80U)
 8001856:	f011 0f80 	tst.w	r1, #128	; 0x80
 800185a:	d11e      	bne.n	800189a <HAL_PCD_EP_ClrStall+0x52>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800185c:	ebc3 01c3 	rsb	r1, r3, r3, lsl #3
 8001860:	0089      	lsls	r1, r1, #2
 8001862:	f501 71fc 	add.w	r1, r1, #504	; 0x1f8
 8001866:	4401      	add	r1, r0
 8001868:	3104      	adds	r1, #4
    ep->is_in = 0U;
 800186a:	ebc3 02c3 	rsb	r2, r3, r3, lsl #3
 800186e:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8001872:	2000      	movs	r0, #0
 8001874:	f882 01fd 	strb.w	r0, [r2, #509]	; 0x1fd
  ep->is_stall = 0U;
 8001878:	2200      	movs	r2, #0
 800187a:	708a      	strb	r2, [r1, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800187c:	700b      	strb	r3, [r1, #0]
  __HAL_LOCK(hpcd);
 800187e:	f894 33bc 	ldrb.w	r3, [r4, #956]	; 0x3bc
 8001882:	2b01      	cmp	r3, #1
 8001884:	d019      	beq.n	80018ba <HAL_PCD_EP_ClrStall+0x72>
 8001886:	2301      	movs	r3, #1
 8001888:	f884 33bc 	strb.w	r3, [r4, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800188c:	6820      	ldr	r0, [r4, #0]
 800188e:	f001 fb1e 	bl	8002ece <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001892:	2000      	movs	r0, #0
 8001894:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc
}
 8001898:	bd10      	pop	{r4, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800189a:	ebc3 01c3 	rsb	r1, r3, r3, lsl #3
 800189e:	0089      	lsls	r1, r1, #2
 80018a0:	3138      	adds	r1, #56	; 0x38
 80018a2:	4401      	add	r1, r0
 80018a4:	3104      	adds	r1, #4
    ep->is_in = 1U;
 80018a6:	ebc3 02c3 	rsb	r2, r3, r3, lsl #3
 80018aa:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 80018ae:	2001      	movs	r0, #1
 80018b0:	f882 003d 	strb.w	r0, [r2, #61]	; 0x3d
 80018b4:	e7e0      	b.n	8001878 <HAL_PCD_EP_ClrStall+0x30>
    return HAL_ERROR;
 80018b6:	2001      	movs	r0, #1
}
 80018b8:	4770      	bx	lr
  __HAL_LOCK(hpcd);
 80018ba:	2002      	movs	r0, #2
 80018bc:	e7ec      	b.n	8001898 <HAL_PCD_EP_ClrStall+0x50>

080018be <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80018be:	b430      	push	{r4, r5}
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80018c0:	6804      	ldr	r4, [r0, #0]
 80018c2:	6a60      	ldr	r0, [r4, #36]	; 0x24

  if (fifo == 0U)
 80018c4:	b919      	cbnz	r1, 80018ce <HAL_PCDEx_SetTxFiFo+0x10>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80018c6:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 80018ca:	62a0      	str	r0, [r4, #40]	; 0x28
 80018cc:	e018      	b.n	8001900 <HAL_PCDEx_SetTxFiFo+0x42>
 80018ce:	460d      	mov	r5, r1
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80018d0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80018d2:	eb00 4013 	add.w	r0, r0, r3, lsr #16
    for (i = 0U; i < (fifo - 1U); i++)
 80018d6:	2300      	movs	r3, #0
 80018d8:	1e69      	subs	r1, r5, #1
 80018da:	428b      	cmp	r3, r1
 80018dc:	d209      	bcs.n	80018f2 <HAL_PCDEx_SetTxFiFo+0x34>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80018de:	f103 0140 	add.w	r1, r3, #64	; 0x40
 80018e2:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 80018e6:	6849      	ldr	r1, [r1, #4]
 80018e8:	eb00 4011 	add.w	r0, r0, r1, lsr #16
    for (i = 0U; i < (fifo - 1U); i++)
 80018ec:	3301      	adds	r3, #1
 80018ee:	b2db      	uxtb	r3, r3
 80018f0:	e7f2      	b.n	80018d8 <HAL_PCDEx_SetTxFiFo+0x1a>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80018f2:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 80018f6:	f105 013f 	add.w	r1, r5, #63	; 0x3f
 80018fa:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 80018fe:	6048      	str	r0, [r1, #4]
  }

  return HAL_OK;
}
 8001900:	2000      	movs	r0, #0
 8001902:	bc30      	pop	{r4, r5}
 8001904:	4770      	bx	lr

08001906 <HAL_PCDEx_SetRxFiFo>:
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
  hpcd->Instance->GRXFSIZ = size;
 8001906:	6803      	ldr	r3, [r0, #0]
 8001908:	6259      	str	r1, [r3, #36]	; 0x24

  return HAL_OK;
}
 800190a:	2000      	movs	r0, #0
 800190c:	4770      	bx	lr

0800190e <HAL_PCDEx_LPM_Callback>:
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800190e:	4770      	bx	lr

08001910 <HAL_RCC_OscConfig>:
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001910:	2800      	cmp	r0, #0
 8001912:	f000 81df 	beq.w	8001cd4 <HAL_RCC_OscConfig+0x3c4>
{
 8001916:	b570      	push	{r4, r5, r6, lr}
 8001918:	b082      	sub	sp, #8
 800191a:	4604      	mov	r4, r0
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800191c:	6803      	ldr	r3, [r0, #0]
 800191e:	f013 0f01 	tst.w	r3, #1
 8001922:	d03b      	beq.n	800199c <HAL_RCC_OscConfig+0x8c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001924:	4ba6      	ldr	r3, [pc, #664]	; (8001bc0 <HAL_RCC_OscConfig+0x2b0>)
 8001926:	689b      	ldr	r3, [r3, #8]
 8001928:	f003 030c 	and.w	r3, r3, #12
 800192c:	2b04      	cmp	r3, #4
 800192e:	d02c      	beq.n	800198a <HAL_RCC_OscConfig+0x7a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001930:	4ba3      	ldr	r3, [pc, #652]	; (8001bc0 <HAL_RCC_OscConfig+0x2b0>)
 8001932:	689b      	ldr	r3, [r3, #8]
 8001934:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001938:	2b08      	cmp	r3, #8
 800193a:	d021      	beq.n	8001980 <HAL_RCC_OscConfig+0x70>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800193c:	6863      	ldr	r3, [r4, #4]
 800193e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001942:	d04f      	beq.n	80019e4 <HAL_RCC_OscConfig+0xd4>
 8001944:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001948:	d052      	beq.n	80019f0 <HAL_RCC_OscConfig+0xe0>
 800194a:	4b9d      	ldr	r3, [pc, #628]	; (8001bc0 <HAL_RCC_OscConfig+0x2b0>)
 800194c:	681a      	ldr	r2, [r3, #0]
 800194e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001952:	601a      	str	r2, [r3, #0]
 8001954:	681a      	ldr	r2, [r3, #0]
 8001956:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800195a:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800195c:	6863      	ldr	r3, [r4, #4]
 800195e:	2b00      	cmp	r3, #0
 8001960:	d050      	beq.n	8001a04 <HAL_RCC_OscConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001962:	f7ff f8e5 	bl	8000b30 <HAL_GetTick>
 8001966:	4605      	mov	r5, r0

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001968:	4b95      	ldr	r3, [pc, #596]	; (8001bc0 <HAL_RCC_OscConfig+0x2b0>)
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8001970:	d114      	bne.n	800199c <HAL_RCC_OscConfig+0x8c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001972:	f7ff f8dd 	bl	8000b30 <HAL_GetTick>
 8001976:	1b40      	subs	r0, r0, r5
 8001978:	2864      	cmp	r0, #100	; 0x64
 800197a:	d9f5      	bls.n	8001968 <HAL_RCC_OscConfig+0x58>
          {
            return HAL_TIMEOUT;
 800197c:	2003      	movs	r0, #3
 800197e:	e1b0      	b.n	8001ce2 <HAL_RCC_OscConfig+0x3d2>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001980:	4b8f      	ldr	r3, [pc, #572]	; (8001bc0 <HAL_RCC_OscConfig+0x2b0>)
 8001982:	685b      	ldr	r3, [r3, #4]
 8001984:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8001988:	d0d8      	beq.n	800193c <HAL_RCC_OscConfig+0x2c>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800198a:	4b8d      	ldr	r3, [pc, #564]	; (8001bc0 <HAL_RCC_OscConfig+0x2b0>)
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8001992:	d003      	beq.n	800199c <HAL_RCC_OscConfig+0x8c>
 8001994:	6863      	ldr	r3, [r4, #4]
 8001996:	2b00      	cmp	r3, #0
 8001998:	f000 819e 	beq.w	8001cd8 <HAL_RCC_OscConfig+0x3c8>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800199c:	6823      	ldr	r3, [r4, #0]
 800199e:	f013 0f02 	tst.w	r3, #2
 80019a2:	d054      	beq.n	8001a4e <HAL_RCC_OscConfig+0x13e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80019a4:	4b86      	ldr	r3, [pc, #536]	; (8001bc0 <HAL_RCC_OscConfig+0x2b0>)
 80019a6:	689b      	ldr	r3, [r3, #8]
 80019a8:	f013 0f0c 	tst.w	r3, #12
 80019ac:	d03e      	beq.n	8001a2c <HAL_RCC_OscConfig+0x11c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80019ae:	4b84      	ldr	r3, [pc, #528]	; (8001bc0 <HAL_RCC_OscConfig+0x2b0>)
 80019b0:	689b      	ldr	r3, [r3, #8]
 80019b2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80019b6:	2b08      	cmp	r3, #8
 80019b8:	d033      	beq.n	8001a22 <HAL_RCC_OscConfig+0x112>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80019ba:	68e3      	ldr	r3, [r4, #12]
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d067      	beq.n	8001a90 <HAL_RCC_OscConfig+0x180>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80019c0:	4b80      	ldr	r3, [pc, #512]	; (8001bc4 <HAL_RCC_OscConfig+0x2b4>)
 80019c2:	2201      	movs	r2, #1
 80019c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019c6:	f7ff f8b3 	bl	8000b30 <HAL_GetTick>
 80019ca:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019cc:	4b7c      	ldr	r3, [pc, #496]	; (8001bc0 <HAL_RCC_OscConfig+0x2b0>)
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	f013 0f02 	tst.w	r3, #2
 80019d4:	d153      	bne.n	8001a7e <HAL_RCC_OscConfig+0x16e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80019d6:	f7ff f8ab 	bl	8000b30 <HAL_GetTick>
 80019da:	1b40      	subs	r0, r0, r5
 80019dc:	2802      	cmp	r0, #2
 80019de:	d9f5      	bls.n	80019cc <HAL_RCC_OscConfig+0xbc>
          {
            return HAL_TIMEOUT;
 80019e0:	2003      	movs	r0, #3
 80019e2:	e17e      	b.n	8001ce2 <HAL_RCC_OscConfig+0x3d2>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80019e4:	4a76      	ldr	r2, [pc, #472]	; (8001bc0 <HAL_RCC_OscConfig+0x2b0>)
 80019e6:	6813      	ldr	r3, [r2, #0]
 80019e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019ec:	6013      	str	r3, [r2, #0]
 80019ee:	e7b5      	b.n	800195c <HAL_RCC_OscConfig+0x4c>
 80019f0:	4b73      	ldr	r3, [pc, #460]	; (8001bc0 <HAL_RCC_OscConfig+0x2b0>)
 80019f2:	681a      	ldr	r2, [r3, #0]
 80019f4:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80019f8:	601a      	str	r2, [r3, #0]
 80019fa:	681a      	ldr	r2, [r3, #0]
 80019fc:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001a00:	601a      	str	r2, [r3, #0]
 8001a02:	e7ab      	b.n	800195c <HAL_RCC_OscConfig+0x4c>
        tickstart = HAL_GetTick();
 8001a04:	f7ff f894 	bl	8000b30 <HAL_GetTick>
 8001a08:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a0a:	4b6d      	ldr	r3, [pc, #436]	; (8001bc0 <HAL_RCC_OscConfig+0x2b0>)
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8001a12:	d0c3      	beq.n	800199c <HAL_RCC_OscConfig+0x8c>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001a14:	f7ff f88c 	bl	8000b30 <HAL_GetTick>
 8001a18:	1b40      	subs	r0, r0, r5
 8001a1a:	2864      	cmp	r0, #100	; 0x64
 8001a1c:	d9f5      	bls.n	8001a0a <HAL_RCC_OscConfig+0xfa>
            return HAL_TIMEOUT;
 8001a1e:	2003      	movs	r0, #3
 8001a20:	e15f      	b.n	8001ce2 <HAL_RCC_OscConfig+0x3d2>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001a22:	4b67      	ldr	r3, [pc, #412]	; (8001bc0 <HAL_RCC_OscConfig+0x2b0>)
 8001a24:	685b      	ldr	r3, [r3, #4]
 8001a26:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8001a2a:	d1c6      	bne.n	80019ba <HAL_RCC_OscConfig+0xaa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a2c:	4b64      	ldr	r3, [pc, #400]	; (8001bc0 <HAL_RCC_OscConfig+0x2b0>)
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	f013 0f02 	tst.w	r3, #2
 8001a34:	d003      	beq.n	8001a3e <HAL_RCC_OscConfig+0x12e>
 8001a36:	68e3      	ldr	r3, [r4, #12]
 8001a38:	2b01      	cmp	r3, #1
 8001a3a:	f040 814f 	bne.w	8001cdc <HAL_RCC_OscConfig+0x3cc>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a3e:	4a60      	ldr	r2, [pc, #384]	; (8001bc0 <HAL_RCC_OscConfig+0x2b0>)
 8001a40:	6813      	ldr	r3, [r2, #0]
 8001a42:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001a46:	6921      	ldr	r1, [r4, #16]
 8001a48:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001a4c:	6013      	str	r3, [r2, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a4e:	6823      	ldr	r3, [r4, #0]
 8001a50:	f013 0f08 	tst.w	r3, #8
 8001a54:	d040      	beq.n	8001ad8 <HAL_RCC_OscConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001a56:	6963      	ldr	r3, [r4, #20]
 8001a58:	b363      	cbz	r3, 8001ab4 <HAL_RCC_OscConfig+0x1a4>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a5a:	4b5b      	ldr	r3, [pc, #364]	; (8001bc8 <HAL_RCC_OscConfig+0x2b8>)
 8001a5c:	2201      	movs	r2, #1
 8001a5e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a60:	f7ff f866 	bl	8000b30 <HAL_GetTick>
 8001a64:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a66:	4b56      	ldr	r3, [pc, #344]	; (8001bc0 <HAL_RCC_OscConfig+0x2b0>)
 8001a68:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001a6a:	f013 0f02 	tst.w	r3, #2
 8001a6e:	d133      	bne.n	8001ad8 <HAL_RCC_OscConfig+0x1c8>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001a70:	f7ff f85e 	bl	8000b30 <HAL_GetTick>
 8001a74:	1b40      	subs	r0, r0, r5
 8001a76:	2802      	cmp	r0, #2
 8001a78:	d9f5      	bls.n	8001a66 <HAL_RCC_OscConfig+0x156>
        {
          return HAL_TIMEOUT;
 8001a7a:	2003      	movs	r0, #3
 8001a7c:	e131      	b.n	8001ce2 <HAL_RCC_OscConfig+0x3d2>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a7e:	4a50      	ldr	r2, [pc, #320]	; (8001bc0 <HAL_RCC_OscConfig+0x2b0>)
 8001a80:	6813      	ldr	r3, [r2, #0]
 8001a82:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001a86:	6921      	ldr	r1, [r4, #16]
 8001a88:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001a8c:	6013      	str	r3, [r2, #0]
 8001a8e:	e7de      	b.n	8001a4e <HAL_RCC_OscConfig+0x13e>
        __HAL_RCC_HSI_DISABLE();
 8001a90:	4b4c      	ldr	r3, [pc, #304]	; (8001bc4 <HAL_RCC_OscConfig+0x2b4>)
 8001a92:	2200      	movs	r2, #0
 8001a94:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001a96:	f7ff f84b 	bl	8000b30 <HAL_GetTick>
 8001a9a:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a9c:	4b48      	ldr	r3, [pc, #288]	; (8001bc0 <HAL_RCC_OscConfig+0x2b0>)
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	f013 0f02 	tst.w	r3, #2
 8001aa4:	d0d3      	beq.n	8001a4e <HAL_RCC_OscConfig+0x13e>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001aa6:	f7ff f843 	bl	8000b30 <HAL_GetTick>
 8001aaa:	1b40      	subs	r0, r0, r5
 8001aac:	2802      	cmp	r0, #2
 8001aae:	d9f5      	bls.n	8001a9c <HAL_RCC_OscConfig+0x18c>
            return HAL_TIMEOUT;
 8001ab0:	2003      	movs	r0, #3
 8001ab2:	e116      	b.n	8001ce2 <HAL_RCC_OscConfig+0x3d2>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001ab4:	4b44      	ldr	r3, [pc, #272]	; (8001bc8 <HAL_RCC_OscConfig+0x2b8>)
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001aba:	f7ff f839 	bl	8000b30 <HAL_GetTick>
 8001abe:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ac0:	4b3f      	ldr	r3, [pc, #252]	; (8001bc0 <HAL_RCC_OscConfig+0x2b0>)
 8001ac2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001ac4:	f013 0f02 	tst.w	r3, #2
 8001ac8:	d006      	beq.n	8001ad8 <HAL_RCC_OscConfig+0x1c8>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001aca:	f7ff f831 	bl	8000b30 <HAL_GetTick>
 8001ace:	1b40      	subs	r0, r0, r5
 8001ad0:	2802      	cmp	r0, #2
 8001ad2:	d9f5      	bls.n	8001ac0 <HAL_RCC_OscConfig+0x1b0>
        {
          return HAL_TIMEOUT;
 8001ad4:	2003      	movs	r0, #3
 8001ad6:	e104      	b.n	8001ce2 <HAL_RCC_OscConfig+0x3d2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ad8:	6823      	ldr	r3, [r4, #0]
 8001ada:	f013 0f04 	tst.w	r3, #4
 8001ade:	d078      	beq.n	8001bd2 <HAL_RCC_OscConfig+0x2c2>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001ae0:	4b37      	ldr	r3, [pc, #220]	; (8001bc0 <HAL_RCC_OscConfig+0x2b0>)
 8001ae2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ae4:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8001ae8:	d10d      	bne.n	8001b06 <HAL_RCC_OscConfig+0x1f6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001aea:	2300      	movs	r3, #0
 8001aec:	9301      	str	r3, [sp, #4]
 8001aee:	4b34      	ldr	r3, [pc, #208]	; (8001bc0 <HAL_RCC_OscConfig+0x2b0>)
 8001af0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001af2:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001af6:	641a      	str	r2, [r3, #64]	; 0x40
 8001af8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001afa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001afe:	9301      	str	r3, [sp, #4]
 8001b00:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8001b02:	2501      	movs	r5, #1
 8001b04:	e000      	b.n	8001b08 <HAL_RCC_OscConfig+0x1f8>
    FlagStatus       pwrclkchanged = RESET;
 8001b06:	2500      	movs	r5, #0
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b08:	4b30      	ldr	r3, [pc, #192]	; (8001bcc <HAL_RCC_OscConfig+0x2bc>)
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	f413 7f80 	tst.w	r3, #256	; 0x100
 8001b10:	d021      	beq.n	8001b56 <HAL_RCC_OscConfig+0x246>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b12:	68a3      	ldr	r3, [r4, #8]
 8001b14:	2b01      	cmp	r3, #1
 8001b16:	d032      	beq.n	8001b7e <HAL_RCC_OscConfig+0x26e>
 8001b18:	2b05      	cmp	r3, #5
 8001b1a:	d036      	beq.n	8001b8a <HAL_RCC_OscConfig+0x27a>
 8001b1c:	4b28      	ldr	r3, [pc, #160]	; (8001bc0 <HAL_RCC_OscConfig+0x2b0>)
 8001b1e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001b20:	f022 0201 	bic.w	r2, r2, #1
 8001b24:	671a      	str	r2, [r3, #112]	; 0x70
 8001b26:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001b28:	f022 0204 	bic.w	r2, r2, #4
 8001b2c:	671a      	str	r2, [r3, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001b2e:	68a3      	ldr	r3, [r4, #8]
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d034      	beq.n	8001b9e <HAL_RCC_OscConfig+0x28e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b34:	f7fe fffc 	bl	8000b30 <HAL_GetTick>
 8001b38:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b3a:	4b21      	ldr	r3, [pc, #132]	; (8001bc0 <HAL_RCC_OscConfig+0x2b0>)
 8001b3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b3e:	f013 0f02 	tst.w	r3, #2
 8001b42:	d145      	bne.n	8001bd0 <HAL_RCC_OscConfig+0x2c0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b44:	f7fe fff4 	bl	8000b30 <HAL_GetTick>
 8001b48:	1b80      	subs	r0, r0, r6
 8001b4a:	f241 3388 	movw	r3, #5000	; 0x1388
 8001b4e:	4298      	cmp	r0, r3
 8001b50:	d9f3      	bls.n	8001b3a <HAL_RCC_OscConfig+0x22a>
        {
          return HAL_TIMEOUT;
 8001b52:	2003      	movs	r0, #3
 8001b54:	e0c5      	b.n	8001ce2 <HAL_RCC_OscConfig+0x3d2>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001b56:	4a1d      	ldr	r2, [pc, #116]	; (8001bcc <HAL_RCC_OscConfig+0x2bc>)
 8001b58:	6813      	ldr	r3, [r2, #0]
 8001b5a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b5e:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8001b60:	f7fe ffe6 	bl	8000b30 <HAL_GetTick>
 8001b64:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b66:	4b19      	ldr	r3, [pc, #100]	; (8001bcc <HAL_RCC_OscConfig+0x2bc>)
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	f413 7f80 	tst.w	r3, #256	; 0x100
 8001b6e:	d1d0      	bne.n	8001b12 <HAL_RCC_OscConfig+0x202>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b70:	f7fe ffde 	bl	8000b30 <HAL_GetTick>
 8001b74:	1b80      	subs	r0, r0, r6
 8001b76:	2802      	cmp	r0, #2
 8001b78:	d9f5      	bls.n	8001b66 <HAL_RCC_OscConfig+0x256>
          return HAL_TIMEOUT;
 8001b7a:	2003      	movs	r0, #3
 8001b7c:	e0b1      	b.n	8001ce2 <HAL_RCC_OscConfig+0x3d2>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b7e:	4a10      	ldr	r2, [pc, #64]	; (8001bc0 <HAL_RCC_OscConfig+0x2b0>)
 8001b80:	6f13      	ldr	r3, [r2, #112]	; 0x70
 8001b82:	f043 0301 	orr.w	r3, r3, #1
 8001b86:	6713      	str	r3, [r2, #112]	; 0x70
 8001b88:	e7d1      	b.n	8001b2e <HAL_RCC_OscConfig+0x21e>
 8001b8a:	4b0d      	ldr	r3, [pc, #52]	; (8001bc0 <HAL_RCC_OscConfig+0x2b0>)
 8001b8c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001b8e:	f042 0204 	orr.w	r2, r2, #4
 8001b92:	671a      	str	r2, [r3, #112]	; 0x70
 8001b94:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001b96:	f042 0201 	orr.w	r2, r2, #1
 8001b9a:	671a      	str	r2, [r3, #112]	; 0x70
 8001b9c:	e7c7      	b.n	8001b2e <HAL_RCC_OscConfig+0x21e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b9e:	f7fe ffc7 	bl	8000b30 <HAL_GetTick>
 8001ba2:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ba4:	4b06      	ldr	r3, [pc, #24]	; (8001bc0 <HAL_RCC_OscConfig+0x2b0>)
 8001ba6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ba8:	f013 0f02 	tst.w	r3, #2
 8001bac:	d010      	beq.n	8001bd0 <HAL_RCC_OscConfig+0x2c0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001bae:	f7fe ffbf 	bl	8000b30 <HAL_GetTick>
 8001bb2:	1b80      	subs	r0, r0, r6
 8001bb4:	f241 3388 	movw	r3, #5000	; 0x1388
 8001bb8:	4298      	cmp	r0, r3
 8001bba:	d9f3      	bls.n	8001ba4 <HAL_RCC_OscConfig+0x294>
        {
          return HAL_TIMEOUT;
 8001bbc:	2003      	movs	r0, #3
 8001bbe:	e090      	b.n	8001ce2 <HAL_RCC_OscConfig+0x3d2>
 8001bc0:	40023800 	.word	0x40023800
 8001bc4:	42470000 	.word	0x42470000
 8001bc8:	42470e80 	.word	0x42470e80
 8001bcc:	40007000 	.word	0x40007000
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001bd0:	b9ed      	cbnz	r5, 8001c0e <HAL_RCC_OscConfig+0x2fe>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001bd2:	69a3      	ldr	r3, [r4, #24]
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	f000 8083 	beq.w	8001ce0 <HAL_RCC_OscConfig+0x3d0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001bda:	4a49      	ldr	r2, [pc, #292]	; (8001d00 <HAL_RCC_OscConfig+0x3f0>)
 8001bdc:	6892      	ldr	r2, [r2, #8]
 8001bde:	f002 020c 	and.w	r2, r2, #12
 8001be2:	2a08      	cmp	r2, #8
 8001be4:	d051      	beq.n	8001c8a <HAL_RCC_OscConfig+0x37a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001be6:	2b02      	cmp	r3, #2
 8001be8:	d017      	beq.n	8001c1a <HAL_RCC_OscConfig+0x30a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001bea:	4b46      	ldr	r3, [pc, #280]	; (8001d04 <HAL_RCC_OscConfig+0x3f4>)
 8001bec:	2200      	movs	r2, #0
 8001bee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bf0:	f7fe ff9e 	bl	8000b30 <HAL_GetTick>
 8001bf4:	4604      	mov	r4, r0

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001bf6:	4b42      	ldr	r3, [pc, #264]	; (8001d00 <HAL_RCC_OscConfig+0x3f0>)
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001bfe:	d042      	beq.n	8001c86 <HAL_RCC_OscConfig+0x376>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c00:	f7fe ff96 	bl	8000b30 <HAL_GetTick>
 8001c04:	1b00      	subs	r0, r0, r4
 8001c06:	2802      	cmp	r0, #2
 8001c08:	d9f5      	bls.n	8001bf6 <HAL_RCC_OscConfig+0x2e6>
          {
            return HAL_TIMEOUT;
 8001c0a:	2003      	movs	r0, #3
 8001c0c:	e069      	b.n	8001ce2 <HAL_RCC_OscConfig+0x3d2>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c0e:	4a3c      	ldr	r2, [pc, #240]	; (8001d00 <HAL_RCC_OscConfig+0x3f0>)
 8001c10:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8001c12:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001c16:	6413      	str	r3, [r2, #64]	; 0x40
 8001c18:	e7db      	b.n	8001bd2 <HAL_RCC_OscConfig+0x2c2>
        __HAL_RCC_PLL_DISABLE();
 8001c1a:	4b3a      	ldr	r3, [pc, #232]	; (8001d04 <HAL_RCC_OscConfig+0x3f4>)
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001c20:	f7fe ff86 	bl	8000b30 <HAL_GetTick>
 8001c24:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c26:	4b36      	ldr	r3, [pc, #216]	; (8001d00 <HAL_RCC_OscConfig+0x3f0>)
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001c2e:	d006      	beq.n	8001c3e <HAL_RCC_OscConfig+0x32e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c30:	f7fe ff7e 	bl	8000b30 <HAL_GetTick>
 8001c34:	1b40      	subs	r0, r0, r5
 8001c36:	2802      	cmp	r0, #2
 8001c38:	d9f5      	bls.n	8001c26 <HAL_RCC_OscConfig+0x316>
            return HAL_TIMEOUT;
 8001c3a:	2003      	movs	r0, #3
 8001c3c:	e051      	b.n	8001ce2 <HAL_RCC_OscConfig+0x3d2>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001c3e:	69e3      	ldr	r3, [r4, #28]
 8001c40:	6a22      	ldr	r2, [r4, #32]
 8001c42:	4313      	orrs	r3, r2
 8001c44:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001c46:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8001c4a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8001c4c:	0852      	lsrs	r2, r2, #1
 8001c4e:	3a01      	subs	r2, #1
 8001c50:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8001c54:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001c56:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8001c5a:	4a29      	ldr	r2, [pc, #164]	; (8001d00 <HAL_RCC_OscConfig+0x3f0>)
 8001c5c:	6053      	str	r3, [r2, #4]
        __HAL_RCC_PLL_ENABLE();
 8001c5e:	4b29      	ldr	r3, [pc, #164]	; (8001d04 <HAL_RCC_OscConfig+0x3f4>)
 8001c60:	2201      	movs	r2, #1
 8001c62:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001c64:	f7fe ff64 	bl	8000b30 <HAL_GetTick>
 8001c68:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c6a:	4b25      	ldr	r3, [pc, #148]	; (8001d00 <HAL_RCC_OscConfig+0x3f0>)
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001c72:	d106      	bne.n	8001c82 <HAL_RCC_OscConfig+0x372>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c74:	f7fe ff5c 	bl	8000b30 <HAL_GetTick>
 8001c78:	1b00      	subs	r0, r0, r4
 8001c7a:	2802      	cmp	r0, #2
 8001c7c:	d9f5      	bls.n	8001c6a <HAL_RCC_OscConfig+0x35a>
            return HAL_TIMEOUT;
 8001c7e:	2003      	movs	r0, #3
 8001c80:	e02f      	b.n	8001ce2 <HAL_RCC_OscConfig+0x3d2>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 8001c82:	2000      	movs	r0, #0
 8001c84:	e02d      	b.n	8001ce2 <HAL_RCC_OscConfig+0x3d2>
 8001c86:	2000      	movs	r0, #0
 8001c88:	e02b      	b.n	8001ce2 <HAL_RCC_OscConfig+0x3d2>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001c8a:	2b01      	cmp	r3, #1
 8001c8c:	d02b      	beq.n	8001ce6 <HAL_RCC_OscConfig+0x3d6>
        pll_config = RCC->PLLCFGR;
 8001c8e:	4b1c      	ldr	r3, [pc, #112]	; (8001d00 <HAL_RCC_OscConfig+0x3f0>)
 8001c90:	685b      	ldr	r3, [r3, #4]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c92:	f403 0180 	and.w	r1, r3, #4194304	; 0x400000
 8001c96:	69e2      	ldr	r2, [r4, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001c98:	4291      	cmp	r1, r2
 8001c9a:	d126      	bne.n	8001cea <HAL_RCC_OscConfig+0x3da>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001c9c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001ca0:	6a21      	ldr	r1, [r4, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ca2:	428a      	cmp	r2, r1
 8001ca4:	d123      	bne.n	8001cee <HAL_RCC_OscConfig+0x3de>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001ca6:	6a61      	ldr	r1, [r4, #36]	; 0x24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001ca8:	f647 72c0 	movw	r2, #32704	; 0x7fc0
 8001cac:	401a      	ands	r2, r3
 8001cae:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 8001cb2:	d11e      	bne.n	8001cf2 <HAL_RCC_OscConfig+0x3e2>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001cb4:	f403 3140 	and.w	r1, r3, #196608	; 0x30000
 8001cb8:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8001cba:	0852      	lsrs	r2, r2, #1
 8001cbc:	3a01      	subs	r2, #1
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001cbe:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 8001cc2:	d118      	bne.n	8001cf6 <HAL_RCC_OscConfig+0x3e6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001cc4:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 8001cc8:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001cca:	ebb3 6f02 	cmp.w	r3, r2, lsl #24
 8001cce:	d114      	bne.n	8001cfa <HAL_RCC_OscConfig+0x3ea>
  return HAL_OK;
 8001cd0:	2000      	movs	r0, #0
 8001cd2:	e006      	b.n	8001ce2 <HAL_RCC_OscConfig+0x3d2>
    return HAL_ERROR;
 8001cd4:	2001      	movs	r0, #1
}
 8001cd6:	4770      	bx	lr
        return HAL_ERROR;
 8001cd8:	2001      	movs	r0, #1
 8001cda:	e002      	b.n	8001ce2 <HAL_RCC_OscConfig+0x3d2>
        return HAL_ERROR;
 8001cdc:	2001      	movs	r0, #1
 8001cde:	e000      	b.n	8001ce2 <HAL_RCC_OscConfig+0x3d2>
  return HAL_OK;
 8001ce0:	2000      	movs	r0, #0
}
 8001ce2:	b002      	add	sp, #8
 8001ce4:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 8001ce6:	2001      	movs	r0, #1
 8001ce8:	e7fb      	b.n	8001ce2 <HAL_RCC_OscConfig+0x3d2>
          return HAL_ERROR;
 8001cea:	2001      	movs	r0, #1
 8001cec:	e7f9      	b.n	8001ce2 <HAL_RCC_OscConfig+0x3d2>
 8001cee:	2001      	movs	r0, #1
 8001cf0:	e7f7      	b.n	8001ce2 <HAL_RCC_OscConfig+0x3d2>
 8001cf2:	2001      	movs	r0, #1
 8001cf4:	e7f5      	b.n	8001ce2 <HAL_RCC_OscConfig+0x3d2>
 8001cf6:	2001      	movs	r0, #1
 8001cf8:	e7f3      	b.n	8001ce2 <HAL_RCC_OscConfig+0x3d2>
 8001cfa:	2001      	movs	r0, #1
 8001cfc:	e7f1      	b.n	8001ce2 <HAL_RCC_OscConfig+0x3d2>
 8001cfe:	bf00      	nop
 8001d00:	40023800 	.word	0x40023800
 8001d04:	42470060 	.word	0x42470060

08001d08 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001d08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001d0a:	4b24      	ldr	r3, [pc, #144]	; (8001d9c <HAL_RCC_GetSysClockFreq+0x94>)
 8001d0c:	689b      	ldr	r3, [r3, #8]
 8001d0e:	f003 030c 	and.w	r3, r3, #12
 8001d12:	2b04      	cmp	r3, #4
 8001d14:	d03d      	beq.n	8001d92 <HAL_RCC_GetSysClockFreq+0x8a>
 8001d16:	2b08      	cmp	r3, #8
 8001d18:	d13d      	bne.n	8001d96 <HAL_RCC_GetSysClockFreq+0x8e>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001d1a:	4b20      	ldr	r3, [pc, #128]	; (8001d9c <HAL_RCC_GetSysClockFreq+0x94>)
 8001d1c:	685a      	ldr	r2, [r3, #4]
 8001d1e:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001d22:	685b      	ldr	r3, [r3, #4]
 8001d24:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8001d28:	d012      	beq.n	8001d50 <HAL_RCC_GetSysClockFreq+0x48>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001d2a:	4b1c      	ldr	r3, [pc, #112]	; (8001d9c <HAL_RCC_GetSysClockFreq+0x94>)
 8001d2c:	6859      	ldr	r1, [r3, #4]
 8001d2e:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8001d32:	2300      	movs	r3, #0
 8001d34:	481a      	ldr	r0, [pc, #104]	; (8001da0 <HAL_RCC_GetSysClockFreq+0x98>)
 8001d36:	fba1 0100 	umull	r0, r1, r1, r0
 8001d3a:	f7fe faa9 	bl	8000290 <__aeabi_uldivmod>
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001d3e:	4b17      	ldr	r3, [pc, #92]	; (8001d9c <HAL_RCC_GetSysClockFreq+0x94>)
 8001d40:	685b      	ldr	r3, [r3, #4]
 8001d42:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8001d46:	3301      	adds	r3, #1
 8001d48:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco/pllp;
 8001d4a:	fbb0 f0f3 	udiv	r0, r0, r3
      break;
 8001d4e:	e023      	b.n	8001d98 <HAL_RCC_GetSysClockFreq+0x90>
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001d50:	4b12      	ldr	r3, [pc, #72]	; (8001d9c <HAL_RCC_GetSysClockFreq+0x94>)
 8001d52:	685b      	ldr	r3, [r3, #4]
 8001d54:	f3c3 1388 	ubfx	r3, r3, #6, #9
 8001d58:	015c      	lsls	r4, r3, #5
 8001d5a:	2500      	movs	r5, #0
 8001d5c:	1ae4      	subs	r4, r4, r3
 8001d5e:	f165 0500 	sbc.w	r5, r5, #0
 8001d62:	01ae      	lsls	r6, r5, #6
 8001d64:	ea46 6694 	orr.w	r6, r6, r4, lsr #26
 8001d68:	01a7      	lsls	r7, r4, #6
 8001d6a:	1b38      	subs	r0, r7, r4
 8001d6c:	eb66 0105 	sbc.w	r1, r6, r5
 8001d70:	00cc      	lsls	r4, r1, #3
 8001d72:	ea44 7450 	orr.w	r4, r4, r0, lsr #29
 8001d76:	00c5      	lsls	r5, r0, #3
 8001d78:	18e8      	adds	r0, r5, r3
 8001d7a:	f144 0100 	adc.w	r1, r4, #0
 8001d7e:	028b      	lsls	r3, r1, #10
 8001d80:	ea43 5390 	orr.w	r3, r3, r0, lsr #22
 8001d84:	0284      	lsls	r4, r0, #10
 8001d86:	4620      	mov	r0, r4
 8001d88:	4619      	mov	r1, r3
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	f7fe fa80 	bl	8000290 <__aeabi_uldivmod>
 8001d90:	e7d5      	b.n	8001d3e <HAL_RCC_GetSysClockFreq+0x36>
      sysclockfreq = HSE_VALUE;
 8001d92:	4803      	ldr	r0, [pc, #12]	; (8001da0 <HAL_RCC_GetSysClockFreq+0x98>)
 8001d94:	e000      	b.n	8001d98 <HAL_RCC_GetSysClockFreq+0x90>
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001d96:	4803      	ldr	r0, [pc, #12]	; (8001da4 <HAL_RCC_GetSysClockFreq+0x9c>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8001d98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001d9a:	bf00      	nop
 8001d9c:	40023800 	.word	0x40023800
 8001da0:	017d7840 	.word	0x017d7840
 8001da4:	00f42400 	.word	0x00f42400

08001da8 <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 8001da8:	2800      	cmp	r0, #0
 8001daa:	f000 809b 	beq.w	8001ee4 <HAL_RCC_ClockConfig+0x13c>
{
 8001dae:	b570      	push	{r4, r5, r6, lr}
 8001db0:	460d      	mov	r5, r1
 8001db2:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001db4:	4b4f      	ldr	r3, [pc, #316]	; (8001ef4 <HAL_RCC_ClockConfig+0x14c>)
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	f003 0307 	and.w	r3, r3, #7
 8001dbc:	428b      	cmp	r3, r1
 8001dbe:	d208      	bcs.n	8001dd2 <HAL_RCC_ClockConfig+0x2a>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001dc0:	b2cb      	uxtb	r3, r1
 8001dc2:	4a4c      	ldr	r2, [pc, #304]	; (8001ef4 <HAL_RCC_ClockConfig+0x14c>)
 8001dc4:	7013      	strb	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001dc6:	6813      	ldr	r3, [r2, #0]
 8001dc8:	f003 0307 	and.w	r3, r3, #7
 8001dcc:	428b      	cmp	r3, r1
 8001dce:	f040 808b 	bne.w	8001ee8 <HAL_RCC_ClockConfig+0x140>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001dd2:	6823      	ldr	r3, [r4, #0]
 8001dd4:	f013 0f02 	tst.w	r3, #2
 8001dd8:	d017      	beq.n	8001e0a <HAL_RCC_ClockConfig+0x62>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001dda:	f013 0f04 	tst.w	r3, #4
 8001dde:	d004      	beq.n	8001dea <HAL_RCC_ClockConfig+0x42>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001de0:	4a45      	ldr	r2, [pc, #276]	; (8001ef8 <HAL_RCC_ClockConfig+0x150>)
 8001de2:	6893      	ldr	r3, [r2, #8]
 8001de4:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001de8:	6093      	str	r3, [r2, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001dea:	6823      	ldr	r3, [r4, #0]
 8001dec:	f013 0f08 	tst.w	r3, #8
 8001df0:	d004      	beq.n	8001dfc <HAL_RCC_ClockConfig+0x54>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001df2:	4a41      	ldr	r2, [pc, #260]	; (8001ef8 <HAL_RCC_ClockConfig+0x150>)
 8001df4:	6893      	ldr	r3, [r2, #8]
 8001df6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001dfa:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001dfc:	4a3e      	ldr	r2, [pc, #248]	; (8001ef8 <HAL_RCC_ClockConfig+0x150>)
 8001dfe:	6893      	ldr	r3, [r2, #8]
 8001e00:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001e04:	68a1      	ldr	r1, [r4, #8]
 8001e06:	430b      	orrs	r3, r1
 8001e08:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e0a:	6823      	ldr	r3, [r4, #0]
 8001e0c:	f013 0f01 	tst.w	r3, #1
 8001e10:	d032      	beq.n	8001e78 <HAL_RCC_ClockConfig+0xd0>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e12:	6863      	ldr	r3, [r4, #4]
 8001e14:	2b01      	cmp	r3, #1
 8001e16:	d021      	beq.n	8001e5c <HAL_RCC_ClockConfig+0xb4>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001e18:	1e9a      	subs	r2, r3, #2
 8001e1a:	2a01      	cmp	r2, #1
 8001e1c:	d925      	bls.n	8001e6a <HAL_RCC_ClockConfig+0xc2>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e1e:	4a36      	ldr	r2, [pc, #216]	; (8001ef8 <HAL_RCC_ClockConfig+0x150>)
 8001e20:	6812      	ldr	r2, [r2, #0]
 8001e22:	f012 0f02 	tst.w	r2, #2
 8001e26:	d061      	beq.n	8001eec <HAL_RCC_ClockConfig+0x144>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001e28:	4933      	ldr	r1, [pc, #204]	; (8001ef8 <HAL_RCC_ClockConfig+0x150>)
 8001e2a:	688a      	ldr	r2, [r1, #8]
 8001e2c:	f022 0203 	bic.w	r2, r2, #3
 8001e30:	4313      	orrs	r3, r2
 8001e32:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 8001e34:	f7fe fe7c 	bl	8000b30 <HAL_GetTick>
 8001e38:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e3a:	4b2f      	ldr	r3, [pc, #188]	; (8001ef8 <HAL_RCC_ClockConfig+0x150>)
 8001e3c:	689b      	ldr	r3, [r3, #8]
 8001e3e:	f003 030c 	and.w	r3, r3, #12
 8001e42:	6862      	ldr	r2, [r4, #4]
 8001e44:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8001e48:	d016      	beq.n	8001e78 <HAL_RCC_ClockConfig+0xd0>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e4a:	f7fe fe71 	bl	8000b30 <HAL_GetTick>
 8001e4e:	1b80      	subs	r0, r0, r6
 8001e50:	f241 3388 	movw	r3, #5000	; 0x1388
 8001e54:	4298      	cmp	r0, r3
 8001e56:	d9f0      	bls.n	8001e3a <HAL_RCC_ClockConfig+0x92>
        return HAL_TIMEOUT;
 8001e58:	2003      	movs	r0, #3
 8001e5a:	e042      	b.n	8001ee2 <HAL_RCC_ClockConfig+0x13a>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e5c:	4a26      	ldr	r2, [pc, #152]	; (8001ef8 <HAL_RCC_ClockConfig+0x150>)
 8001e5e:	6812      	ldr	r2, [r2, #0]
 8001e60:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 8001e64:	d1e0      	bne.n	8001e28 <HAL_RCC_ClockConfig+0x80>
        return HAL_ERROR;
 8001e66:	2001      	movs	r0, #1
 8001e68:	e03b      	b.n	8001ee2 <HAL_RCC_ClockConfig+0x13a>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e6a:	4a23      	ldr	r2, [pc, #140]	; (8001ef8 <HAL_RCC_ClockConfig+0x150>)
 8001e6c:	6812      	ldr	r2, [r2, #0]
 8001e6e:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8001e72:	d1d9      	bne.n	8001e28 <HAL_RCC_ClockConfig+0x80>
        return HAL_ERROR;
 8001e74:	2001      	movs	r0, #1
 8001e76:	e034      	b.n	8001ee2 <HAL_RCC_ClockConfig+0x13a>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001e78:	4b1e      	ldr	r3, [pc, #120]	; (8001ef4 <HAL_RCC_ClockConfig+0x14c>)
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f003 0307 	and.w	r3, r3, #7
 8001e80:	42ab      	cmp	r3, r5
 8001e82:	d907      	bls.n	8001e94 <HAL_RCC_ClockConfig+0xec>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e84:	b2ea      	uxtb	r2, r5
 8001e86:	4b1b      	ldr	r3, [pc, #108]	; (8001ef4 <HAL_RCC_ClockConfig+0x14c>)
 8001e88:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	f003 0307 	and.w	r3, r3, #7
 8001e90:	42ab      	cmp	r3, r5
 8001e92:	d12d      	bne.n	8001ef0 <HAL_RCC_ClockConfig+0x148>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e94:	6823      	ldr	r3, [r4, #0]
 8001e96:	f013 0f04 	tst.w	r3, #4
 8001e9a:	d006      	beq.n	8001eaa <HAL_RCC_ClockConfig+0x102>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001e9c:	4a16      	ldr	r2, [pc, #88]	; (8001ef8 <HAL_RCC_ClockConfig+0x150>)
 8001e9e:	6893      	ldr	r3, [r2, #8]
 8001ea0:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8001ea4:	68e1      	ldr	r1, [r4, #12]
 8001ea6:	430b      	orrs	r3, r1
 8001ea8:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001eaa:	6823      	ldr	r3, [r4, #0]
 8001eac:	f013 0f08 	tst.w	r3, #8
 8001eb0:	d007      	beq.n	8001ec2 <HAL_RCC_ClockConfig+0x11a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001eb2:	4a11      	ldr	r2, [pc, #68]	; (8001ef8 <HAL_RCC_ClockConfig+0x150>)
 8001eb4:	6893      	ldr	r3, [r2, #8]
 8001eb6:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8001eba:	6921      	ldr	r1, [r4, #16]
 8001ebc:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001ec0:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001ec2:	f7ff ff21 	bl	8001d08 <HAL_RCC_GetSysClockFreq>
 8001ec6:	4b0c      	ldr	r3, [pc, #48]	; (8001ef8 <HAL_RCC_ClockConfig+0x150>)
 8001ec8:	689b      	ldr	r3, [r3, #8]
 8001eca:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001ece:	4a0b      	ldr	r2, [pc, #44]	; (8001efc <HAL_RCC_ClockConfig+0x154>)
 8001ed0:	5cd3      	ldrb	r3, [r2, r3]
 8001ed2:	40d8      	lsrs	r0, r3
 8001ed4:	4b0a      	ldr	r3, [pc, #40]	; (8001f00 <HAL_RCC_ClockConfig+0x158>)
 8001ed6:	6018      	str	r0, [r3, #0]
  HAL_InitTick (uwTickPrio);
 8001ed8:	4b0a      	ldr	r3, [pc, #40]	; (8001f04 <HAL_RCC_ClockConfig+0x15c>)
 8001eda:	6818      	ldr	r0, [r3, #0]
 8001edc:	f7fe fd3c 	bl	8000958 <HAL_InitTick>
  return HAL_OK;
 8001ee0:	2000      	movs	r0, #0
}
 8001ee2:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8001ee4:	2001      	movs	r0, #1
}
 8001ee6:	4770      	bx	lr
      return HAL_ERROR;
 8001ee8:	2001      	movs	r0, #1
 8001eea:	e7fa      	b.n	8001ee2 <HAL_RCC_ClockConfig+0x13a>
        return HAL_ERROR;
 8001eec:	2001      	movs	r0, #1
 8001eee:	e7f8      	b.n	8001ee2 <HAL_RCC_ClockConfig+0x13a>
      return HAL_ERROR;
 8001ef0:	2001      	movs	r0, #1
 8001ef2:	e7f6      	b.n	8001ee2 <HAL_RCC_ClockConfig+0x13a>
 8001ef4:	40023c00 	.word	0x40023c00
 8001ef8:	40023800 	.word	0x40023800
 8001efc:	08006590 	.word	0x08006590
 8001f00:	20000000 	.word	0x20000000
 8001f04:	20000008 	.word	0x20000008

08001f08 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8001f08:	4b01      	ldr	r3, [pc, #4]	; (8001f10 <HAL_RCC_GetHCLKFreq+0x8>)
 8001f0a:	6818      	ldr	r0, [r3, #0]
 8001f0c:	4770      	bx	lr
 8001f0e:	bf00      	nop
 8001f10:	20000000 	.word	0x20000000

08001f14 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001f14:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001f16:	f7ff fff7 	bl	8001f08 <HAL_RCC_GetHCLKFreq>
 8001f1a:	4b04      	ldr	r3, [pc, #16]	; (8001f2c <HAL_RCC_GetPCLK1Freq+0x18>)
 8001f1c:	689b      	ldr	r3, [r3, #8]
 8001f1e:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8001f22:	4a03      	ldr	r2, [pc, #12]	; (8001f30 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8001f24:	5cd3      	ldrb	r3, [r2, r3]
}
 8001f26:	40d8      	lsrs	r0, r3
 8001f28:	bd08      	pop	{r3, pc}
 8001f2a:	bf00      	nop
 8001f2c:	40023800 	.word	0x40023800
 8001f30:	080065a0 	.word	0x080065a0

08001f34 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001f34:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001f36:	f7ff ffe7 	bl	8001f08 <HAL_RCC_GetHCLKFreq>
 8001f3a:	4b04      	ldr	r3, [pc, #16]	; (8001f4c <HAL_RCC_GetPCLK2Freq+0x18>)
 8001f3c:	689b      	ldr	r3, [r3, #8]
 8001f3e:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8001f42:	4a03      	ldr	r2, [pc, #12]	; (8001f50 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8001f44:	5cd3      	ldrb	r3, [r2, r3]
}
 8001f46:	40d8      	lsrs	r0, r3
 8001f48:	bd08      	pop	{r3, pc}
 8001f4a:	bf00      	nop
 8001f4c:	40023800 	.word	0x40023800
 8001f50:	080065a0 	.word	0x080065a0

08001f54 <HAL_RCC_GetClockConfig>:
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001f54:	230f      	movs	r3, #15
 8001f56:	6003      	str	r3, [r0, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001f58:	4b0b      	ldr	r3, [pc, #44]	; (8001f88 <HAL_RCC_GetClockConfig+0x34>)
 8001f5a:	689a      	ldr	r2, [r3, #8]
 8001f5c:	f002 0203 	and.w	r2, r2, #3
 8001f60:	6042      	str	r2, [r0, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001f62:	689a      	ldr	r2, [r3, #8]
 8001f64:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 8001f68:	6082      	str	r2, [r0, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001f6a:	689a      	ldr	r2, [r3, #8]
 8001f6c:	f402 52e0 	and.w	r2, r2, #7168	; 0x1c00
 8001f70:	60c2      	str	r2, [r0, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001f72:	689b      	ldr	r3, [r3, #8]
 8001f74:	08db      	lsrs	r3, r3, #3
 8001f76:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8001f7a:	6103      	str	r3, [r0, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001f7c:	4b03      	ldr	r3, [pc, #12]	; (8001f8c <HAL_RCC_GetClockConfig+0x38>)
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	f003 0307 	and.w	r3, r3, #7
 8001f84:	600b      	str	r3, [r1, #0]
}
 8001f86:	4770      	bx	lr
 8001f88:	40023800 	.word	0x40023800
 8001f8c:	40023c00 	.word	0x40023c00

08001f90 <HAL_TIM_Base_MspInit>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001f90:	4770      	bx	lr
	...

08001f94 <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001f94:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8001f98:	b2db      	uxtb	r3, r3
 8001f9a:	2b01      	cmp	r3, #1
 8001f9c:	d12f      	bne.n	8001ffe <HAL_TIM_Base_Start_IT+0x6a>
  {
    return HAL_ERROR;
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001f9e:	2302      	movs	r3, #2
 8001fa0:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001fa4:	6802      	ldr	r2, [r0, #0]
 8001fa6:	68d3      	ldr	r3, [r2, #12]
 8001fa8:	f043 0301 	orr.w	r3, r3, #1
 8001fac:	60d3      	str	r3, [r2, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001fae:	6803      	ldr	r3, [r0, #0]
 8001fb0:	4a15      	ldr	r2, [pc, #84]	; (8002008 <HAL_TIM_Base_Start_IT+0x74>)
 8001fb2:	4293      	cmp	r3, r2
 8001fb4:	d018      	beq.n	8001fe8 <HAL_TIM_Base_Start_IT+0x54>
 8001fb6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001fba:	d015      	beq.n	8001fe8 <HAL_TIM_Base_Start_IT+0x54>
 8001fbc:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8001fc0:	4293      	cmp	r3, r2
 8001fc2:	d011      	beq.n	8001fe8 <HAL_TIM_Base_Start_IT+0x54>
 8001fc4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001fc8:	4293      	cmp	r3, r2
 8001fca:	d00d      	beq.n	8001fe8 <HAL_TIM_Base_Start_IT+0x54>
 8001fcc:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001fd0:	4293      	cmp	r3, r2
 8001fd2:	d009      	beq.n	8001fe8 <HAL_TIM_Base_Start_IT+0x54>
 8001fd4:	f502 329a 	add.w	r2, r2, #78848	; 0x13400
 8001fd8:	4293      	cmp	r3, r2
 8001fda:	d005      	beq.n	8001fe8 <HAL_TIM_Base_Start_IT+0x54>
      __HAL_TIM_ENABLE(htim);
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001fdc:	681a      	ldr	r2, [r3, #0]
 8001fde:	f042 0201 	orr.w	r2, r2, #1
 8001fe2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001fe4:	2000      	movs	r0, #0
 8001fe6:	4770      	bx	lr
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001fe8:	689a      	ldr	r2, [r3, #8]
 8001fea:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001fee:	2a06      	cmp	r2, #6
 8001ff0:	d007      	beq.n	8002002 <HAL_TIM_Base_Start_IT+0x6e>
      __HAL_TIM_ENABLE(htim);
 8001ff2:	681a      	ldr	r2, [r3, #0]
 8001ff4:	f042 0201 	orr.w	r2, r2, #1
 8001ff8:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8001ffa:	2000      	movs	r0, #0
 8001ffc:	4770      	bx	lr
    return HAL_ERROR;
 8001ffe:	2001      	movs	r0, #1
 8002000:	4770      	bx	lr
  return HAL_OK;
 8002002:	2000      	movs	r0, #0
}
 8002004:	4770      	bx	lr
 8002006:	bf00      	nop
 8002008:	40010000 	.word	0x40010000

0800200c <HAL_TIM_OC_DelayElapsedCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800200c:	4770      	bx	lr

0800200e <HAL_TIM_IC_CaptureCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800200e:	4770      	bx	lr

08002010 <HAL_TIM_PWM_PulseFinishedCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002010:	4770      	bx	lr

08002012 <HAL_TIM_TriggerCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002012:	4770      	bx	lr

08002014 <HAL_TIM_IRQHandler>:
{
 8002014:	b510      	push	{r4, lr}
 8002016:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002018:	6803      	ldr	r3, [r0, #0]
 800201a:	691a      	ldr	r2, [r3, #16]
 800201c:	f012 0f02 	tst.w	r2, #2
 8002020:	d011      	beq.n	8002046 <HAL_TIM_IRQHandler+0x32>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002022:	68da      	ldr	r2, [r3, #12]
 8002024:	f012 0f02 	tst.w	r2, #2
 8002028:	d00d      	beq.n	8002046 <HAL_TIM_IRQHandler+0x32>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800202a:	f06f 0202 	mvn.w	r2, #2
 800202e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002030:	2301      	movs	r3, #1
 8002032:	7703      	strb	r3, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002034:	6803      	ldr	r3, [r0, #0]
 8002036:	699b      	ldr	r3, [r3, #24]
 8002038:	f013 0f03 	tst.w	r3, #3
 800203c:	d070      	beq.n	8002120 <HAL_TIM_IRQHandler+0x10c>
          HAL_TIM_IC_CaptureCallback(htim);
 800203e:	f7ff ffe6 	bl	800200e <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002042:	2300      	movs	r3, #0
 8002044:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002046:	6823      	ldr	r3, [r4, #0]
 8002048:	691a      	ldr	r2, [r3, #16]
 800204a:	f012 0f04 	tst.w	r2, #4
 800204e:	d012      	beq.n	8002076 <HAL_TIM_IRQHandler+0x62>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002050:	68da      	ldr	r2, [r3, #12]
 8002052:	f012 0f04 	tst.w	r2, #4
 8002056:	d00e      	beq.n	8002076 <HAL_TIM_IRQHandler+0x62>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002058:	f06f 0204 	mvn.w	r2, #4
 800205c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800205e:	2302      	movs	r3, #2
 8002060:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002062:	6823      	ldr	r3, [r4, #0]
 8002064:	699b      	ldr	r3, [r3, #24]
 8002066:	f413 7f40 	tst.w	r3, #768	; 0x300
 800206a:	d05f      	beq.n	800212c <HAL_TIM_IRQHandler+0x118>
        HAL_TIM_IC_CaptureCallback(htim);
 800206c:	4620      	mov	r0, r4
 800206e:	f7ff ffce 	bl	800200e <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002072:	2300      	movs	r3, #0
 8002074:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002076:	6823      	ldr	r3, [r4, #0]
 8002078:	691a      	ldr	r2, [r3, #16]
 800207a:	f012 0f08 	tst.w	r2, #8
 800207e:	d012      	beq.n	80020a6 <HAL_TIM_IRQHandler+0x92>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002080:	68da      	ldr	r2, [r3, #12]
 8002082:	f012 0f08 	tst.w	r2, #8
 8002086:	d00e      	beq.n	80020a6 <HAL_TIM_IRQHandler+0x92>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002088:	f06f 0208 	mvn.w	r2, #8
 800208c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800208e:	2304      	movs	r3, #4
 8002090:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002092:	6823      	ldr	r3, [r4, #0]
 8002094:	69db      	ldr	r3, [r3, #28]
 8002096:	f013 0f03 	tst.w	r3, #3
 800209a:	d04e      	beq.n	800213a <HAL_TIM_IRQHandler+0x126>
        HAL_TIM_IC_CaptureCallback(htim);
 800209c:	4620      	mov	r0, r4
 800209e:	f7ff ffb6 	bl	800200e <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80020a2:	2300      	movs	r3, #0
 80020a4:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80020a6:	6823      	ldr	r3, [r4, #0]
 80020a8:	691a      	ldr	r2, [r3, #16]
 80020aa:	f012 0f10 	tst.w	r2, #16
 80020ae:	d012      	beq.n	80020d6 <HAL_TIM_IRQHandler+0xc2>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80020b0:	68da      	ldr	r2, [r3, #12]
 80020b2:	f012 0f10 	tst.w	r2, #16
 80020b6:	d00e      	beq.n	80020d6 <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80020b8:	f06f 0210 	mvn.w	r2, #16
 80020bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80020be:	2308      	movs	r3, #8
 80020c0:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80020c2:	6823      	ldr	r3, [r4, #0]
 80020c4:	69db      	ldr	r3, [r3, #28]
 80020c6:	f413 7f40 	tst.w	r3, #768	; 0x300
 80020ca:	d03d      	beq.n	8002148 <HAL_TIM_IRQHandler+0x134>
        HAL_TIM_IC_CaptureCallback(htim);
 80020cc:	4620      	mov	r0, r4
 80020ce:	f7ff ff9e 	bl	800200e <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80020d2:	2300      	movs	r3, #0
 80020d4:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80020d6:	6823      	ldr	r3, [r4, #0]
 80020d8:	691a      	ldr	r2, [r3, #16]
 80020da:	f012 0f01 	tst.w	r2, #1
 80020de:	d003      	beq.n	80020e8 <HAL_TIM_IRQHandler+0xd4>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80020e0:	68da      	ldr	r2, [r3, #12]
 80020e2:	f012 0f01 	tst.w	r2, #1
 80020e6:	d136      	bne.n	8002156 <HAL_TIM_IRQHandler+0x142>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80020e8:	6823      	ldr	r3, [r4, #0]
 80020ea:	691a      	ldr	r2, [r3, #16]
 80020ec:	f012 0f80 	tst.w	r2, #128	; 0x80
 80020f0:	d003      	beq.n	80020fa <HAL_TIM_IRQHandler+0xe6>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80020f2:	68da      	ldr	r2, [r3, #12]
 80020f4:	f012 0f80 	tst.w	r2, #128	; 0x80
 80020f8:	d134      	bne.n	8002164 <HAL_TIM_IRQHandler+0x150>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80020fa:	6823      	ldr	r3, [r4, #0]
 80020fc:	691a      	ldr	r2, [r3, #16]
 80020fe:	f012 0f40 	tst.w	r2, #64	; 0x40
 8002102:	d003      	beq.n	800210c <HAL_TIM_IRQHandler+0xf8>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002104:	68da      	ldr	r2, [r3, #12]
 8002106:	f012 0f40 	tst.w	r2, #64	; 0x40
 800210a:	d132      	bne.n	8002172 <HAL_TIM_IRQHandler+0x15e>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800210c:	6823      	ldr	r3, [r4, #0]
 800210e:	691a      	ldr	r2, [r3, #16]
 8002110:	f012 0f20 	tst.w	r2, #32
 8002114:	d003      	beq.n	800211e <HAL_TIM_IRQHandler+0x10a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002116:	68da      	ldr	r2, [r3, #12]
 8002118:	f012 0f20 	tst.w	r2, #32
 800211c:	d130      	bne.n	8002180 <HAL_TIM_IRQHandler+0x16c>
}
 800211e:	bd10      	pop	{r4, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002120:	f7ff ff74 	bl	800200c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002124:	4620      	mov	r0, r4
 8002126:	f7ff ff73 	bl	8002010 <HAL_TIM_PWM_PulseFinishedCallback>
 800212a:	e78a      	b.n	8002042 <HAL_TIM_IRQHandler+0x2e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800212c:	4620      	mov	r0, r4
 800212e:	f7ff ff6d 	bl	800200c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002132:	4620      	mov	r0, r4
 8002134:	f7ff ff6c 	bl	8002010 <HAL_TIM_PWM_PulseFinishedCallback>
 8002138:	e79b      	b.n	8002072 <HAL_TIM_IRQHandler+0x5e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800213a:	4620      	mov	r0, r4
 800213c:	f7ff ff66 	bl	800200c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002140:	4620      	mov	r0, r4
 8002142:	f7ff ff65 	bl	8002010 <HAL_TIM_PWM_PulseFinishedCallback>
 8002146:	e7ac      	b.n	80020a2 <HAL_TIM_IRQHandler+0x8e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002148:	4620      	mov	r0, r4
 800214a:	f7ff ff5f 	bl	800200c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800214e:	4620      	mov	r0, r4
 8002150:	f7ff ff5e 	bl	8002010 <HAL_TIM_PWM_PulseFinishedCallback>
 8002154:	e7bd      	b.n	80020d2 <HAL_TIM_IRQHandler+0xbe>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002156:	f06f 0201 	mvn.w	r2, #1
 800215a:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 800215c:	4620      	mov	r0, r4
 800215e:	f7fe fa83 	bl	8000668 <HAL_TIM_PeriodElapsedCallback>
 8002162:	e7c1      	b.n	80020e8 <HAL_TIM_IRQHandler+0xd4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002164:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002168:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 800216a:	4620      	mov	r0, r4
 800216c:	f000 f88b 	bl	8002286 <HAL_TIMEx_BreakCallback>
 8002170:	e7c3      	b.n	80020fa <HAL_TIM_IRQHandler+0xe6>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002172:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002176:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8002178:	4620      	mov	r0, r4
 800217a:	f7ff ff4a 	bl	8002012 <HAL_TIM_TriggerCallback>
 800217e:	e7c5      	b.n	800210c <HAL_TIM_IRQHandler+0xf8>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002180:	f06f 0220 	mvn.w	r2, #32
 8002184:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 8002186:	4620      	mov	r0, r4
 8002188:	f000 f87c 	bl	8002284 <HAL_TIMEx_CommutCallback>
}
 800218c:	e7c7      	b.n	800211e <HAL_TIM_IRQHandler+0x10a>
	...

08002190 <TIM_Base_SetConfig>:
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002190:	6803      	ldr	r3, [r0, #0]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002192:	4a25      	ldr	r2, [pc, #148]	; (8002228 <TIM_Base_SetConfig+0x98>)
 8002194:	4290      	cmp	r0, r2
 8002196:	d00e      	beq.n	80021b6 <TIM_Base_SetConfig+0x26>
 8002198:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800219c:	d00b      	beq.n	80021b6 <TIM_Base_SetConfig+0x26>
 800219e:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 80021a2:	4290      	cmp	r0, r2
 80021a4:	d007      	beq.n	80021b6 <TIM_Base_SetConfig+0x26>
 80021a6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80021aa:	4290      	cmp	r0, r2
 80021ac:	d003      	beq.n	80021b6 <TIM_Base_SetConfig+0x26>
 80021ae:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80021b2:	4290      	cmp	r0, r2
 80021b4:	d103      	bne.n	80021be <TIM_Base_SetConfig+0x2e>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80021b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80021ba:	684a      	ldr	r2, [r1, #4]
 80021bc:	4313      	orrs	r3, r2
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80021be:	4a1a      	ldr	r2, [pc, #104]	; (8002228 <TIM_Base_SetConfig+0x98>)
 80021c0:	4290      	cmp	r0, r2
 80021c2:	d01a      	beq.n	80021fa <TIM_Base_SetConfig+0x6a>
 80021c4:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80021c8:	d017      	beq.n	80021fa <TIM_Base_SetConfig+0x6a>
 80021ca:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 80021ce:	4290      	cmp	r0, r2
 80021d0:	d013      	beq.n	80021fa <TIM_Base_SetConfig+0x6a>
 80021d2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80021d6:	4290      	cmp	r0, r2
 80021d8:	d00f      	beq.n	80021fa <TIM_Base_SetConfig+0x6a>
 80021da:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80021de:	4290      	cmp	r0, r2
 80021e0:	d00b      	beq.n	80021fa <TIM_Base_SetConfig+0x6a>
 80021e2:	f502 329a 	add.w	r2, r2, #78848	; 0x13400
 80021e6:	4290      	cmp	r0, r2
 80021e8:	d007      	beq.n	80021fa <TIM_Base_SetConfig+0x6a>
 80021ea:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80021ee:	4290      	cmp	r0, r2
 80021f0:	d003      	beq.n	80021fa <TIM_Base_SetConfig+0x6a>
 80021f2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80021f6:	4290      	cmp	r0, r2
 80021f8:	d103      	bne.n	8002202 <TIM_Base_SetConfig+0x72>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80021fa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80021fe:	68ca      	ldr	r2, [r1, #12]
 8002200:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002202:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002206:	694a      	ldr	r2, [r1, #20]
 8002208:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 800220a:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800220c:	688b      	ldr	r3, [r1, #8]
 800220e:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002210:	680b      	ldr	r3, [r1, #0]
 8002212:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002214:	4b04      	ldr	r3, [pc, #16]	; (8002228 <TIM_Base_SetConfig+0x98>)
 8002216:	4298      	cmp	r0, r3
 8002218:	d002      	beq.n	8002220 <TIM_Base_SetConfig+0x90>
    TIMx->RCR = Structure->RepetitionCounter;
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800221a:	2301      	movs	r3, #1
 800221c:	6143      	str	r3, [r0, #20]
}
 800221e:	4770      	bx	lr
    TIMx->RCR = Structure->RepetitionCounter;
 8002220:	690b      	ldr	r3, [r1, #16]
 8002222:	6303      	str	r3, [r0, #48]	; 0x30
 8002224:	e7f9      	b.n	800221a <TIM_Base_SetConfig+0x8a>
 8002226:	bf00      	nop
 8002228:	40010000 	.word	0x40010000

0800222c <HAL_TIM_Base_Init>:
  if (htim == NULL)
 800222c:	b340      	cbz	r0, 8002280 <HAL_TIM_Base_Init+0x54>
{
 800222e:	b510      	push	{r4, lr}
 8002230:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 8002232:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8002236:	b1f3      	cbz	r3, 8002276 <HAL_TIM_Base_Init+0x4a>
  htim->State = HAL_TIM_STATE_BUSY;
 8002238:	2302      	movs	r3, #2
 800223a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800223e:	4621      	mov	r1, r4
 8002240:	f851 0b04 	ldr.w	r0, [r1], #4
 8002244:	f7ff ffa4 	bl	8002190 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002248:	2301      	movs	r3, #1
 800224a:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800224e:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8002252:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8002256:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 800225a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800225e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002262:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002266:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 800226a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 800226e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8002272:	2000      	movs	r0, #0
}
 8002274:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8002276:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 800227a:	f7ff fe89 	bl	8001f90 <HAL_TIM_Base_MspInit>
 800227e:	e7db      	b.n	8002238 <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 8002280:	2001      	movs	r0, #1
}
 8002282:	4770      	bx	lr

08002284 <HAL_TIMEx_CommutCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002284:	4770      	bx	lr

08002286 <HAL_TIMEx_BreakCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002286:	4770      	bx	lr

08002288 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002288:	b570      	push	{r4, r5, r6, lr}
 800228a:	4604      	mov	r4, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800228c:	6802      	ldr	r2, [r0, #0]
 800228e:	6913      	ldr	r3, [r2, #16]
 8002290:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002294:	68c1      	ldr	r1, [r0, #12]
 8002296:	430b      	orrs	r3, r1
 8002298:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800229a:	6883      	ldr	r3, [r0, #8]
 800229c:	6902      	ldr	r2, [r0, #16]
 800229e:	4313      	orrs	r3, r2
 80022a0:	6942      	ldr	r2, [r0, #20]
 80022a2:	4313      	orrs	r3, r2
 80022a4:	69c2      	ldr	r2, [r0, #28]
 80022a6:	431a      	orrs	r2, r3
  MODIFY_REG(huart->Instance->CR1,
 80022a8:	6801      	ldr	r1, [r0, #0]
 80022aa:	68cb      	ldr	r3, [r1, #12]
 80022ac:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80022b0:	f023 030c 	bic.w	r3, r3, #12
 80022b4:	4313      	orrs	r3, r2
 80022b6:	60cb      	str	r3, [r1, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80022b8:	6802      	ldr	r2, [r0, #0]
 80022ba:	6953      	ldr	r3, [r2, #20]
 80022bc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80022c0:	6981      	ldr	r1, [r0, #24]
 80022c2:	430b      	orrs	r3, r1
 80022c4:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80022c6:	6803      	ldr	r3, [r0, #0]
 80022c8:	4a34      	ldr	r2, [pc, #208]	; (800239c <UART_SetConfig+0x114>)
 80022ca:	4293      	cmp	r3, r2
 80022cc:	d006      	beq.n	80022dc <UART_SetConfig+0x54>
 80022ce:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80022d2:	4293      	cmp	r3, r2
 80022d4:	d002      	beq.n	80022dc <UART_SetConfig+0x54>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80022d6:	f7ff fe1d 	bl	8001f14 <HAL_RCC_GetPCLK1Freq>
 80022da:	e001      	b.n	80022e0 <UART_SetConfig+0x58>
      pclk = HAL_RCC_GetPCLK2Freq();
 80022dc:	f7ff fe2a 	bl	8001f34 <HAL_RCC_GetPCLK2Freq>
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80022e0:	69e3      	ldr	r3, [r4, #28]
 80022e2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80022e6:	d02a      	beq.n	800233e <UART_SetConfig+0xb6>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80022e8:	2600      	movs	r6, #0
 80022ea:	1805      	adds	r5, r0, r0
 80022ec:	eb46 0106 	adc.w	r1, r6, r6
 80022f0:	182d      	adds	r5, r5, r0
 80022f2:	eb46 0101 	adc.w	r1, r6, r1
 80022f6:	00cb      	lsls	r3, r1, #3
 80022f8:	ea43 7355 	orr.w	r3, r3, r5, lsr #29
 80022fc:	00ea      	lsls	r2, r5, #3
 80022fe:	4615      	mov	r5, r2
 8002300:	4619      	mov	r1, r3
 8002302:	6863      	ldr	r3, [r4, #4]
 8002304:	009a      	lsls	r2, r3, #2
 8002306:	0f9b      	lsrs	r3, r3, #30
 8002308:	1828      	adds	r0, r5, r0
 800230a:	eb46 0101 	adc.w	r1, r6, r1
 800230e:	f7fd ffbf 	bl	8000290 <__aeabi_uldivmod>
 8002312:	4d23      	ldr	r5, [pc, #140]	; (80023a0 <UART_SetConfig+0x118>)
 8002314:	fba5 3200 	umull	r3, r2, r5, r0
 8002318:	0951      	lsrs	r1, r2, #5
 800231a:	2364      	movs	r3, #100	; 0x64
 800231c:	fb03 0311 	mls	r3, r3, r1, r0
 8002320:	011b      	lsls	r3, r3, #4
 8002322:	3332      	adds	r3, #50	; 0x32
 8002324:	fba5 2303 	umull	r2, r3, r5, r3
 8002328:	095b      	lsrs	r3, r3, #5
 800232a:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800232e:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8002332:	f003 030f 	and.w	r3, r3, #15
 8002336:	6821      	ldr	r1, [r4, #0]
 8002338:	4413      	add	r3, r2
 800233a:	608b      	str	r3, [r1, #8]
  }
}
 800233c:	bd70      	pop	{r4, r5, r6, pc}
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800233e:	2600      	movs	r6, #0
 8002340:	1805      	adds	r5, r0, r0
 8002342:	eb46 0106 	adc.w	r1, r6, r6
 8002346:	182d      	adds	r5, r5, r0
 8002348:	eb46 0101 	adc.w	r1, r6, r1
 800234c:	00cb      	lsls	r3, r1, #3
 800234e:	ea43 7355 	orr.w	r3, r3, r5, lsr #29
 8002352:	00ea      	lsls	r2, r5, #3
 8002354:	4615      	mov	r5, r2
 8002356:	4619      	mov	r1, r3
 8002358:	6862      	ldr	r2, [r4, #4]
 800235a:	4633      	mov	r3, r6
 800235c:	1892      	adds	r2, r2, r2
 800235e:	eb46 0303 	adc.w	r3, r6, r3
 8002362:	1828      	adds	r0, r5, r0
 8002364:	eb46 0101 	adc.w	r1, r6, r1
 8002368:	f7fd ff92 	bl	8000290 <__aeabi_uldivmod>
 800236c:	4d0c      	ldr	r5, [pc, #48]	; (80023a0 <UART_SetConfig+0x118>)
 800236e:	fba5 3200 	umull	r3, r2, r5, r0
 8002372:	0951      	lsrs	r1, r2, #5
 8002374:	2364      	movs	r3, #100	; 0x64
 8002376:	fb03 0311 	mls	r3, r3, r1, r0
 800237a:	00db      	lsls	r3, r3, #3
 800237c:	3332      	adds	r3, #50	; 0x32
 800237e:	fba5 2303 	umull	r2, r3, r5, r3
 8002382:	095b      	lsrs	r3, r3, #5
 8002384:	005a      	lsls	r2, r3, #1
 8002386:	f402 72f8 	and.w	r2, r2, #496	; 0x1f0
 800238a:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 800238e:	f003 0307 	and.w	r3, r3, #7
 8002392:	6821      	ldr	r1, [r4, #0]
 8002394:	4413      	add	r3, r2
 8002396:	608b      	str	r3, [r1, #8]
 8002398:	e7d0      	b.n	800233c <UART_SetConfig+0xb4>
 800239a:	bf00      	nop
 800239c:	40011000 	.word	0x40011000
 80023a0:	51eb851f 	.word	0x51eb851f

080023a4 <UART_WaitOnFlagUntilTimeout>:
{
 80023a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80023a8:	4605      	mov	r5, r0
 80023aa:	460f      	mov	r7, r1
 80023ac:	4616      	mov	r6, r2
 80023ae:	4699      	mov	r9, r3
 80023b0:	f8dd 8020 	ldr.w	r8, [sp, #32]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80023b4:	682c      	ldr	r4, [r5, #0]
 80023b6:	6824      	ldr	r4, [r4, #0]
 80023b8:	ea37 0304 	bics.w	r3, r7, r4
 80023bc:	bf0c      	ite	eq
 80023be:	2401      	moveq	r4, #1
 80023c0:	2400      	movne	r4, #0
 80023c2:	42b4      	cmp	r4, r6
 80023c4:	d12d      	bne.n	8002422 <UART_WaitOnFlagUntilTimeout+0x7e>
    if (Timeout != HAL_MAX_DELAY)
 80023c6:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
 80023ca:	d0f3      	beq.n	80023b4 <UART_WaitOnFlagUntilTimeout+0x10>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80023cc:	f1b8 0f00 	cmp.w	r8, #0
 80023d0:	d005      	beq.n	80023de <UART_WaitOnFlagUntilTimeout+0x3a>
 80023d2:	f7fe fbad 	bl	8000b30 <HAL_GetTick>
 80023d6:	eba0 0009 	sub.w	r0, r0, r9
 80023da:	4540      	cmp	r0, r8
 80023dc:	d9ea      	bls.n	80023b4 <UART_WaitOnFlagUntilTimeout+0x10>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80023de:	682a      	ldr	r2, [r5, #0]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80023e0:	f102 030c 	add.w	r3, r2, #12
 80023e4:	e853 3f00 	ldrex	r3, [r3]
 80023e8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80023ec:	320c      	adds	r2, #12
 80023ee:	e842 3100 	strex	r1, r3, [r2]
 80023f2:	2900      	cmp	r1, #0
 80023f4:	d1f3      	bne.n	80023de <UART_WaitOnFlagUntilTimeout+0x3a>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80023f6:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80023f8:	f102 0314 	add.w	r3, r2, #20
 80023fc:	e853 3f00 	ldrex	r3, [r3]
 8002400:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002404:	3214      	adds	r2, #20
 8002406:	e842 3100 	strex	r1, r3, [r2]
 800240a:	2900      	cmp	r1, #0
 800240c:	d1f3      	bne.n	80023f6 <UART_WaitOnFlagUntilTimeout+0x52>
        huart->gState  = HAL_UART_STATE_READY;
 800240e:	2320      	movs	r3, #32
 8002410:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002414:	f885 303e 	strb.w	r3, [r5, #62]	; 0x3e
        __HAL_UNLOCK(huart);
 8002418:	2300      	movs	r3, #0
 800241a:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
        return HAL_TIMEOUT;
 800241e:	2003      	movs	r0, #3
 8002420:	e000      	b.n	8002424 <UART_WaitOnFlagUntilTimeout+0x80>
  return HAL_OK;
 8002422:	2000      	movs	r0, #0
}
 8002424:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08002428 <HAL_UART_Init>:
  if (huart == NULL)
 8002428:	b358      	cbz	r0, 8002482 <HAL_UART_Init+0x5a>
{
 800242a:	b510      	push	{r4, lr}
 800242c:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 800242e:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8002432:	b30b      	cbz	r3, 8002478 <HAL_UART_Init+0x50>
  huart->gState = HAL_UART_STATE_BUSY;
 8002434:	2324      	movs	r3, #36	; 0x24
 8002436:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UART_DISABLE(huart);
 800243a:	6822      	ldr	r2, [r4, #0]
 800243c:	68d3      	ldr	r3, [r2, #12]
 800243e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002442:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8002444:	4620      	mov	r0, r4
 8002446:	f7ff ff1f 	bl	8002288 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800244a:	6822      	ldr	r2, [r4, #0]
 800244c:	6913      	ldr	r3, [r2, #16]
 800244e:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8002452:	6113      	str	r3, [r2, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002454:	6822      	ldr	r2, [r4, #0]
 8002456:	6953      	ldr	r3, [r2, #20]
 8002458:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 800245c:	6153      	str	r3, [r2, #20]
  __HAL_UART_ENABLE(huart);
 800245e:	6822      	ldr	r2, [r4, #0]
 8002460:	68d3      	ldr	r3, [r2, #12]
 8002462:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002466:	60d3      	str	r3, [r2, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002468:	2000      	movs	r0, #0
 800246a:	6420      	str	r0, [r4, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800246c:	2320      	movs	r3, #32
 800246e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002472:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
}
 8002476:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8002478:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_UART_MspInit(huart);
 800247c:	f7fe f9e6 	bl	800084c <HAL_UART_MspInit>
 8002480:	e7d8      	b.n	8002434 <HAL_UART_Init+0xc>
    return HAL_ERROR;
 8002482:	2001      	movs	r0, #1
}
 8002484:	4770      	bx	lr

08002486 <HAL_UART_Transmit>:
{
 8002486:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800248a:	b082      	sub	sp, #8
 800248c:	461e      	mov	r6, r3
  if (huart->gState == HAL_UART_STATE_READY)
 800248e:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8002492:	b2db      	uxtb	r3, r3
 8002494:	2b20      	cmp	r3, #32
 8002496:	d154      	bne.n	8002542 <HAL_UART_Transmit+0xbc>
 8002498:	4604      	mov	r4, r0
 800249a:	460d      	mov	r5, r1
 800249c:	4690      	mov	r8, r2
    if ((pData == NULL) || (Size == 0U))
 800249e:	2900      	cmp	r1, #0
 80024a0:	d053      	beq.n	800254a <HAL_UART_Transmit+0xc4>
 80024a2:	2a00      	cmp	r2, #0
 80024a4:	d053      	beq.n	800254e <HAL_UART_Transmit+0xc8>
    __HAL_LOCK(huart);
 80024a6:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80024aa:	2b01      	cmp	r3, #1
 80024ac:	d051      	beq.n	8002552 <HAL_UART_Transmit+0xcc>
 80024ae:	2301      	movs	r3, #1
 80024b0:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80024b4:	2300      	movs	r3, #0
 80024b6:	6403      	str	r3, [r0, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80024b8:	2321      	movs	r3, #33	; 0x21
 80024ba:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
    tickstart = HAL_GetTick();
 80024be:	f7fe fb37 	bl	8000b30 <HAL_GetTick>
 80024c2:	4607      	mov	r7, r0
    huart->TxXferSize = Size;
 80024c4:	f8a4 8024 	strh.w	r8, [r4, #36]	; 0x24
    huart->TxXferCount = Size;
 80024c8:	f8a4 8026 	strh.w	r8, [r4, #38]	; 0x26
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80024cc:	68a3      	ldr	r3, [r4, #8]
 80024ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80024d2:	d005      	beq.n	80024e0 <HAL_UART_Transmit+0x5a>
      pdata16bits = NULL;
 80024d4:	f04f 0800 	mov.w	r8, #0
    __HAL_UNLOCK(huart);
 80024d8:	2300      	movs	r3, #0
 80024da:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    while (huart->TxXferCount > 0U)
 80024de:	e012      	b.n	8002506 <HAL_UART_Transmit+0x80>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80024e0:	6923      	ldr	r3, [r4, #16]
 80024e2:	b113      	cbz	r3, 80024ea <HAL_UART_Transmit+0x64>
      pdata16bits = NULL;
 80024e4:	f04f 0800 	mov.w	r8, #0
 80024e8:	e7f6      	b.n	80024d8 <HAL_UART_Transmit+0x52>
      pdata16bits = (uint16_t *) pData;
 80024ea:	46a8      	mov	r8, r5
      pdata8bits  = NULL;
 80024ec:	2500      	movs	r5, #0
 80024ee:	e7f3      	b.n	80024d8 <HAL_UART_Transmit+0x52>
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80024f0:	f838 3b02 	ldrh.w	r3, [r8], #2
 80024f4:	6822      	ldr	r2, [r4, #0]
 80024f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80024fa:	6053      	str	r3, [r2, #4]
      huart->TxXferCount--;
 80024fc:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 80024fe:	b292      	uxth	r2, r2
 8002500:	3a01      	subs	r2, #1
 8002502:	b292      	uxth	r2, r2
 8002504:	84e2      	strh	r2, [r4, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002506:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8002508:	b29b      	uxth	r3, r3
 800250a:	b173      	cbz	r3, 800252a <HAL_UART_Transmit+0xa4>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800250c:	9600      	str	r6, [sp, #0]
 800250e:	463b      	mov	r3, r7
 8002510:	2200      	movs	r2, #0
 8002512:	2180      	movs	r1, #128	; 0x80
 8002514:	4620      	mov	r0, r4
 8002516:	f7ff ff45 	bl	80023a4 <UART_WaitOnFlagUntilTimeout>
 800251a:	b9e0      	cbnz	r0, 8002556 <HAL_UART_Transmit+0xd0>
      if (pdata8bits == NULL)
 800251c:	2d00      	cmp	r5, #0
 800251e:	d0e7      	beq.n	80024f0 <HAL_UART_Transmit+0x6a>
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002520:	f815 2b01 	ldrb.w	r2, [r5], #1
 8002524:	6823      	ldr	r3, [r4, #0]
 8002526:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002528:	e7e8      	b.n	80024fc <HAL_UART_Transmit+0x76>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800252a:	9600      	str	r6, [sp, #0]
 800252c:	463b      	mov	r3, r7
 800252e:	2200      	movs	r2, #0
 8002530:	2140      	movs	r1, #64	; 0x40
 8002532:	4620      	mov	r0, r4
 8002534:	f7ff ff36 	bl	80023a4 <UART_WaitOnFlagUntilTimeout>
 8002538:	b978      	cbnz	r0, 800255a <HAL_UART_Transmit+0xd4>
    huart->gState = HAL_UART_STATE_READY;
 800253a:	2320      	movs	r3, #32
 800253c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    return HAL_OK;
 8002540:	e000      	b.n	8002544 <HAL_UART_Transmit+0xbe>
    return HAL_BUSY;
 8002542:	2002      	movs	r0, #2
}
 8002544:	b002      	add	sp, #8
 8002546:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      return  HAL_ERROR;
 800254a:	2001      	movs	r0, #1
 800254c:	e7fa      	b.n	8002544 <HAL_UART_Transmit+0xbe>
 800254e:	2001      	movs	r0, #1
 8002550:	e7f8      	b.n	8002544 <HAL_UART_Transmit+0xbe>
    __HAL_LOCK(huart);
 8002552:	2002      	movs	r0, #2
 8002554:	e7f6      	b.n	8002544 <HAL_UART_Transmit+0xbe>
        return HAL_TIMEOUT;
 8002556:	2003      	movs	r0, #3
 8002558:	e7f4      	b.n	8002544 <HAL_UART_Transmit+0xbe>
      return HAL_TIMEOUT;
 800255a:	2003      	movs	r0, #3
 800255c:	e7f2      	b.n	8002544 <HAL_UART_Transmit+0xbe>
	...

08002560 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8002560:	b082      	sub	sp, #8
  __IO uint32_t count = 0U;
 8002562:	2300      	movs	r3, #0
 8002564:	9301      	str	r3, [sp, #4]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8002566:	9b01      	ldr	r3, [sp, #4]
 8002568:	3301      	adds	r3, #1
 800256a:	9301      	str	r3, [sp, #4]
 800256c:	4a0e      	ldr	r2, [pc, #56]	; (80025a8 <USB_CoreReset+0x48>)
 800256e:	4293      	cmp	r3, r2
 8002570:	d814      	bhi.n	800259c <USB_CoreReset+0x3c>
    {
      return HAL_TIMEOUT;
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8002572:	6903      	ldr	r3, [r0, #16]
 8002574:	2b00      	cmp	r3, #0
 8002576:	daf6      	bge.n	8002566 <USB_CoreReset+0x6>

  /* Core Soft Reset */
  count = 0U;
 8002578:	2300      	movs	r3, #0
 800257a:	9301      	str	r3, [sp, #4]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800257c:	6903      	ldr	r3, [r0, #16]
 800257e:	f043 0301 	orr.w	r3, r3, #1
 8002582:	6103      	str	r3, [r0, #16]

  do
  {
    if (++count > 200000U)
 8002584:	9b01      	ldr	r3, [sp, #4]
 8002586:	3301      	adds	r3, #1
 8002588:	9301      	str	r3, [sp, #4]
 800258a:	4a07      	ldr	r2, [pc, #28]	; (80025a8 <USB_CoreReset+0x48>)
 800258c:	4293      	cmp	r3, r2
 800258e:	d808      	bhi.n	80025a2 <USB_CoreReset+0x42>
    {
      return HAL_TIMEOUT;
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8002590:	6903      	ldr	r3, [r0, #16]
 8002592:	f013 0f01 	tst.w	r3, #1
 8002596:	d1f5      	bne.n	8002584 <USB_CoreReset+0x24>

  return HAL_OK;
 8002598:	2000      	movs	r0, #0
 800259a:	e000      	b.n	800259e <USB_CoreReset+0x3e>
      return HAL_TIMEOUT;
 800259c:	2003      	movs	r0, #3
}
 800259e:	b002      	add	sp, #8
 80025a0:	4770      	bx	lr
      return HAL_TIMEOUT;
 80025a2:	2003      	movs	r0, #3
 80025a4:	e7fb      	b.n	800259e <USB_CoreReset+0x3e>
 80025a6:	bf00      	nop
 80025a8:	00030d40 	.word	0x00030d40

080025ac <USB_CoreInit>:
{
 80025ac:	b084      	sub	sp, #16
 80025ae:	b510      	push	{r4, lr}
 80025b0:	4604      	mov	r4, r0
 80025b2:	a803      	add	r0, sp, #12
 80025b4:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80025b8:	9b08      	ldr	r3, [sp, #32]
 80025ba:	2b01      	cmp	r3, #1
 80025bc:	d11f      	bne.n	80025fe <USB_CoreInit+0x52>
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80025be:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80025c0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80025c4:	63a3      	str	r3, [r4, #56]	; 0x38
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80025c6:	68e3      	ldr	r3, [r4, #12]
 80025c8:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80025cc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80025d0:	60e3      	str	r3, [r4, #12]
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80025d2:	68e3      	ldr	r3, [r4, #12]
 80025d4:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80025d8:	60e3      	str	r3, [r4, #12]
    if (cfg.use_external_vbus == 1U)
 80025da:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80025dc:	2b01      	cmp	r3, #1
 80025de:	d009      	beq.n	80025f4 <USB_CoreInit+0x48>
    ret = USB_CoreReset(USBx);
 80025e0:	4620      	mov	r0, r4
 80025e2:	f7ff ffbd 	bl	8002560 <USB_CoreReset>
  if (cfg.dma_enable == 1U)
 80025e6:	9b06      	ldr	r3, [sp, #24]
 80025e8:	2b01      	cmp	r3, #1
 80025ea:	d01b      	beq.n	8002624 <USB_CoreInit+0x78>
}
 80025ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80025f0:	b004      	add	sp, #16
 80025f2:	4770      	bx	lr
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80025f4:	68e3      	ldr	r3, [r4, #12]
 80025f6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80025fa:	60e3      	str	r3, [r4, #12]
 80025fc:	e7f0      	b.n	80025e0 <USB_CoreInit+0x34>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80025fe:	68e3      	ldr	r3, [r4, #12]
 8002600:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002604:	60e3      	str	r3, [r4, #12]
    ret = USB_CoreReset(USBx);
 8002606:	4620      	mov	r0, r4
 8002608:	f7ff ffaa 	bl	8002560 <USB_CoreReset>
    if (cfg.battery_charging_enable == 0U)
 800260c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800260e:	b923      	cbnz	r3, 800261a <USB_CoreInit+0x6e>
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002610:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002612:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002616:	63a3      	str	r3, [r4, #56]	; 0x38
 8002618:	e7e5      	b.n	80025e6 <USB_CoreInit+0x3a>
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800261a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800261c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002620:	63a3      	str	r3, [r4, #56]	; 0x38
 8002622:	e7e0      	b.n	80025e6 <USB_CoreInit+0x3a>
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8002624:	68a3      	ldr	r3, [r4, #8]
 8002626:	f043 0306 	orr.w	r3, r3, #6
 800262a:	60a3      	str	r3, [r4, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800262c:	68a3      	ldr	r3, [r4, #8]
 800262e:	f043 0320 	orr.w	r3, r3, #32
 8002632:	60a3      	str	r3, [r4, #8]
 8002634:	e7da      	b.n	80025ec <USB_CoreInit+0x40>
	...

08002638 <USB_SetTurnaroundTime>:
  if (speed == USBD_FS_SPEED)
 8002638:	2a02      	cmp	r2, #2
 800263a:	d00a      	beq.n	8002652 <USB_SetTurnaroundTime+0x1a>
    UsbTrd = USBD_HS_TRDT_VALUE;
 800263c:	2109      	movs	r1, #9
  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800263e:	68c2      	ldr	r2, [r0, #12]
 8002640:	f422 5270 	bic.w	r2, r2, #15360	; 0x3c00
 8002644:	60c2      	str	r2, [r0, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8002646:	68c3      	ldr	r3, [r0, #12]
 8002648:	ea43 2381 	orr.w	r3, r3, r1, lsl #10
 800264c:	60c3      	str	r3, [r0, #12]
}
 800264e:	2000      	movs	r0, #0
 8002650:	4770      	bx	lr
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8002652:	4b23      	ldr	r3, [pc, #140]	; (80026e0 <USB_SetTurnaroundTime+0xa8>)
 8002654:	440b      	add	r3, r1
 8002656:	4a23      	ldr	r2, [pc, #140]	; (80026e4 <USB_SetTurnaroundTime+0xac>)
 8002658:	4293      	cmp	r3, r2
 800265a:	d92f      	bls.n	80026bc <USB_SetTurnaroundTime+0x84>
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800265c:	4b22      	ldr	r3, [pc, #136]	; (80026e8 <USB_SetTurnaroundTime+0xb0>)
 800265e:	440b      	add	r3, r1
 8002660:	4a22      	ldr	r2, [pc, #136]	; (80026ec <USB_SetTurnaroundTime+0xb4>)
 8002662:	4293      	cmp	r3, r2
 8002664:	d92c      	bls.n	80026c0 <USB_SetTurnaroundTime+0x88>
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8002666:	f5a1 0374 	sub.w	r3, r1, #15990784	; 0xf40000
 800266a:	f5a3 5310 	sub.w	r3, r3, #9216	; 0x2400
 800266e:	4a20      	ldr	r2, [pc, #128]	; (80026f0 <USB_SetTurnaroundTime+0xb8>)
 8002670:	4293      	cmp	r3, r2
 8002672:	d927      	bls.n	80026c4 <USB_SetTurnaroundTime+0x8c>
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8002674:	f1a1 7383 	sub.w	r3, r1, #17170432	; 0x1060000
 8002678:	f5a3 43e7 	sub.w	r3, r3, #29568	; 0x7380
 800267c:	4a1d      	ldr	r2, [pc, #116]	; (80026f4 <USB_SetTurnaroundTime+0xbc>)
 800267e:	4293      	cmp	r3, r2
 8002680:	d322      	bcc.n	80026c8 <USB_SetTurnaroundTime+0x90>
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8002682:	4b1d      	ldr	r3, [pc, #116]	; (80026f8 <USB_SetTurnaroundTime+0xc0>)
 8002684:	440b      	add	r3, r1
 8002686:	4a1d      	ldr	r2, [pc, #116]	; (80026fc <USB_SetTurnaroundTime+0xc4>)
 8002688:	4293      	cmp	r3, r2
 800268a:	d91f      	bls.n	80026cc <USB_SetTurnaroundTime+0x94>
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800268c:	4b1c      	ldr	r3, [pc, #112]	; (8002700 <USB_SetTurnaroundTime+0xc8>)
 800268e:	440b      	add	r3, r1
 8002690:	4a1c      	ldr	r2, [pc, #112]	; (8002704 <USB_SetTurnaroundTime+0xcc>)
 8002692:	4293      	cmp	r3, r2
 8002694:	d31c      	bcc.n	80026d0 <USB_SetTurnaroundTime+0x98>
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8002696:	4b1c      	ldr	r3, [pc, #112]	; (8002708 <USB_SetTurnaroundTime+0xd0>)
 8002698:	440b      	add	r3, r1
 800269a:	4a1c      	ldr	r2, [pc, #112]	; (800270c <USB_SetTurnaroundTime+0xd4>)
 800269c:	4293      	cmp	r3, r2
 800269e:	d319      	bcc.n	80026d4 <USB_SetTurnaroundTime+0x9c>
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80026a0:	f1a1 73b7 	sub.w	r3, r1, #23986176	; 0x16e0000
 80026a4:	f5a3 5358 	sub.w	r3, r3, #13824	; 0x3600
 80026a8:	4a19      	ldr	r2, [pc, #100]	; (8002710 <USB_SetTurnaroundTime+0xd8>)
 80026aa:	4293      	cmp	r3, r2
 80026ac:	d314      	bcc.n	80026d8 <USB_SetTurnaroundTime+0xa0>
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80026ae:	4b19      	ldr	r3, [pc, #100]	; (8002714 <USB_SetTurnaroundTime+0xdc>)
 80026b0:	440b      	add	r3, r1
 80026b2:	4a19      	ldr	r2, [pc, #100]	; (8002718 <USB_SetTurnaroundTime+0xe0>)
 80026b4:	4293      	cmp	r3, r2
 80026b6:	d211      	bcs.n	80026dc <USB_SetTurnaroundTime+0xa4>
      UsbTrd = 0x7U;
 80026b8:	2107      	movs	r1, #7
 80026ba:	e7c0      	b.n	800263e <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0xFU;
 80026bc:	210f      	movs	r1, #15
 80026be:	e7be      	b.n	800263e <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0xEU;
 80026c0:	210e      	movs	r1, #14
 80026c2:	e7bc      	b.n	800263e <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0xDU;
 80026c4:	210d      	movs	r1, #13
 80026c6:	e7ba      	b.n	800263e <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0xCU;
 80026c8:	210c      	movs	r1, #12
 80026ca:	e7b8      	b.n	800263e <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0xBU;
 80026cc:	210b      	movs	r1, #11
 80026ce:	e7b6      	b.n	800263e <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0xAU;
 80026d0:	210a      	movs	r1, #10
 80026d2:	e7b4      	b.n	800263e <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0x9U;
 80026d4:	2109      	movs	r1, #9
 80026d6:	e7b2      	b.n	800263e <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0x8U;
 80026d8:	2108      	movs	r1, #8
 80026da:	e7b0      	b.n	800263e <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0x6U;
 80026dc:	2106      	movs	r1, #6
 80026de:	e7ae      	b.n	800263e <USB_SetTurnaroundTime+0x6>
 80026e0:	ff275340 	.word	0xff275340
 80026e4:	000c34ff 	.word	0x000c34ff
 80026e8:	ff1b1e40 	.word	0xff1b1e40
 80026ec:	000f423f 	.word	0x000f423f
 80026f0:	00124f7f 	.word	0x00124f7f
 80026f4:	0013d620 	.word	0x0013d620
 80026f8:	fee5b660 	.word	0xfee5b660
 80026fc:	0016e35f 	.word	0x0016e35f
 8002700:	feced300 	.word	0xfeced300
 8002704:	001b7740 	.word	0x001b7740
 8002708:	feb35bc0 	.word	0xfeb35bc0
 800270c:	002191c0 	.word	0x002191c0
 8002710:	00387520 	.word	0x00387520
 8002714:	fe5954e0 	.word	0xfe5954e0
 8002718:	00419ce0 	.word	0x00419ce0

0800271c <USB_EnableGlobalInt>:
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800271c:	6883      	ldr	r3, [r0, #8]
 800271e:	f043 0301 	orr.w	r3, r3, #1
 8002722:	6083      	str	r3, [r0, #8]
}
 8002724:	2000      	movs	r0, #0
 8002726:	4770      	bx	lr

08002728 <USB_DisableGlobalInt>:
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8002728:	6883      	ldr	r3, [r0, #8]
 800272a:	f023 0301 	bic.w	r3, r3, #1
 800272e:	6083      	str	r3, [r0, #8]
}
 8002730:	2000      	movs	r0, #0
 8002732:	4770      	bx	lr

08002734 <USB_FlushTxFifo>:
{
 8002734:	b082      	sub	sp, #8
  __IO uint32_t count = 0U;
 8002736:	2300      	movs	r3, #0
 8002738:	9301      	str	r3, [sp, #4]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800273a:	0189      	lsls	r1, r1, #6
 800273c:	f041 0120 	orr.w	r1, r1, #32
 8002740:	6101      	str	r1, [r0, #16]
    if (++count > 200000U)
 8002742:	9b01      	ldr	r3, [sp, #4]
 8002744:	3301      	adds	r3, #1
 8002746:	9301      	str	r3, [sp, #4]
 8002748:	4a05      	ldr	r2, [pc, #20]	; (8002760 <USB_FlushTxFifo+0x2c>)
 800274a:	4293      	cmp	r3, r2
 800274c:	d805      	bhi.n	800275a <USB_FlushTxFifo+0x26>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800274e:	6903      	ldr	r3, [r0, #16]
 8002750:	f013 0f20 	tst.w	r3, #32
 8002754:	d1f5      	bne.n	8002742 <USB_FlushTxFifo+0xe>
  return HAL_OK;
 8002756:	2000      	movs	r0, #0
 8002758:	e000      	b.n	800275c <USB_FlushTxFifo+0x28>
      return HAL_TIMEOUT;
 800275a:	2003      	movs	r0, #3
}
 800275c:	b002      	add	sp, #8
 800275e:	4770      	bx	lr
 8002760:	00030d40 	.word	0x00030d40

08002764 <USB_FlushRxFifo>:
{
 8002764:	b082      	sub	sp, #8
  __IO uint32_t count = 0U;
 8002766:	2300      	movs	r3, #0
 8002768:	9301      	str	r3, [sp, #4]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800276a:	2310      	movs	r3, #16
 800276c:	6103      	str	r3, [r0, #16]
    if (++count > 200000U)
 800276e:	9b01      	ldr	r3, [sp, #4]
 8002770:	3301      	adds	r3, #1
 8002772:	9301      	str	r3, [sp, #4]
 8002774:	4a05      	ldr	r2, [pc, #20]	; (800278c <USB_FlushRxFifo+0x28>)
 8002776:	4293      	cmp	r3, r2
 8002778:	d805      	bhi.n	8002786 <USB_FlushRxFifo+0x22>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800277a:	6903      	ldr	r3, [r0, #16]
 800277c:	f013 0f10 	tst.w	r3, #16
 8002780:	d1f5      	bne.n	800276e <USB_FlushRxFifo+0xa>
  return HAL_OK;
 8002782:	2000      	movs	r0, #0
 8002784:	e000      	b.n	8002788 <USB_FlushRxFifo+0x24>
      return HAL_TIMEOUT;
 8002786:	2003      	movs	r0, #3
}
 8002788:	b002      	add	sp, #8
 800278a:	4770      	bx	lr
 800278c:	00030d40 	.word	0x00030d40

08002790 <USB_SetDevSpeed>:
  USBx_DEVICE->DCFG |= speed;
 8002790:	f8d0 3800 	ldr.w	r3, [r0, #2048]	; 0x800
 8002794:	4319      	orrs	r1, r3
 8002796:	f8c0 1800 	str.w	r1, [r0, #2048]	; 0x800
}
 800279a:	2000      	movs	r0, #0
 800279c:	4770      	bx	lr
	...

080027a0 <USB_DevInit>:
{
 80027a0:	b084      	sub	sp, #16
 80027a2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80027a6:	4604      	mov	r4, r0
 80027a8:	a809      	add	r0, sp, #36	; 0x24
 80027aa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 80027ae:	4625      	mov	r5, r4
  for (i = 0U; i < 15U; i++)
 80027b0:	2300      	movs	r3, #0
 80027b2:	e006      	b.n	80027c2 <USB_DevInit+0x22>
    USBx->DIEPTXF[i] = 0U;
 80027b4:	f103 0240 	add.w	r2, r3, #64	; 0x40
 80027b8:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 80027bc:	2100      	movs	r1, #0
 80027be:	6051      	str	r1, [r2, #4]
  for (i = 0U; i < 15U; i++)
 80027c0:	3301      	adds	r3, #1
 80027c2:	2b0e      	cmp	r3, #14
 80027c4:	d9f6      	bls.n	80027b4 <USB_DevInit+0x14>
  if (cfg.vbus_sensing_enable == 0U)
 80027c6:	f8dd 804c 	ldr.w	r8, [sp, #76]	; 0x4c
 80027ca:	f1b8 0f00 	cmp.w	r8, #0
 80027ce:	d124      	bne.n	800281a <USB_DevInit+0x7a>
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80027d0:	f8d4 3804 	ldr.w	r3, [r4, #2052]	; 0x804
 80027d4:	f043 0302 	orr.w	r3, r3, #2
 80027d8:	f8c4 3804 	str.w	r3, [r4, #2052]	; 0x804
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80027dc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80027de:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80027e2:	63a3      	str	r3, [r4, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80027e4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80027e6:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 80027ea:	63a3      	str	r3, [r4, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80027ec:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80027ee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80027f2:	63a3      	str	r3, [r4, #56]	; 0x38
  USBx_PCGCCTL = 0U;
 80027f4:	2300      	movs	r3, #0
 80027f6:	f8c4 3e00 	str.w	r3, [r4, #3584]	; 0xe00
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80027fa:	f504 6600 	add.w	r6, r4, #2048	; 0x800
 80027fe:	f8d4 3800 	ldr.w	r3, [r4, #2048]	; 0x800
 8002802:	f8c4 3800 	str.w	r3, [r4, #2048]	; 0x800
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8002806:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002808:	2b01      	cmp	r3, #1
 800280a:	d114      	bne.n	8002836 <USB_DevInit+0x96>
    if (cfg.speed == USBD_HS_SPEED)
 800280c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800280e:	b96b      	cbnz	r3, 800282c <USB_DevInit+0x8c>
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8002810:	2100      	movs	r1, #0
 8002812:	4620      	mov	r0, r4
 8002814:	f7ff ffbc 	bl	8002790 <USB_SetDevSpeed>
 8002818:	e011      	b.n	800283e <USB_DevInit+0x9e>
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800281a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800281c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002820:	63a3      	str	r3, [r4, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8002822:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002824:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8002828:	63a3      	str	r3, [r4, #56]	; 0x38
 800282a:	e7e3      	b.n	80027f4 <USB_DevInit+0x54>
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800282c:	2101      	movs	r1, #1
 800282e:	4620      	mov	r0, r4
 8002830:	f7ff ffae 	bl	8002790 <USB_SetDevSpeed>
 8002834:	e003      	b.n	800283e <USB_DevInit+0x9e>
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8002836:	2103      	movs	r1, #3
 8002838:	4620      	mov	r0, r4
 800283a:	f7ff ffa9 	bl	8002790 <USB_SetDevSpeed>
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800283e:	2110      	movs	r1, #16
 8002840:	4620      	mov	r0, r4
 8002842:	f7ff ff77 	bl	8002734 <USB_FlushTxFifo>
 8002846:	4681      	mov	r9, r0
 8002848:	b108      	cbz	r0, 800284e <USB_DevInit+0xae>
    ret = HAL_ERROR;
 800284a:	f04f 0901 	mov.w	r9, #1
  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800284e:	4620      	mov	r0, r4
 8002850:	f7ff ff88 	bl	8002764 <USB_FlushRxFifo>
 8002854:	b108      	cbz	r0, 800285a <USB_DevInit+0xba>
    ret = HAL_ERROR;
 8002856:	f04f 0901 	mov.w	r9, #1
  USBx_DEVICE->DIEPMSK = 0U;
 800285a:	2300      	movs	r3, #0
 800285c:	6133      	str	r3, [r6, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800285e:	6173      	str	r3, [r6, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8002860:	61f3      	str	r3, [r6, #28]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002862:	e00a      	b.n	800287a <USB_DevInit+0xda>
      if (i == 0U)
 8002864:	b9c3      	cbnz	r3, 8002898 <USB_DevInit+0xf8>
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8002866:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 800286a:	f8c2 0900 	str.w	r0, [r2, #2304]	; 0x900
    USBx_INEP(i)->DIEPTSIZ = 0U;
 800286e:	2200      	movs	r2, #0
 8002870:	610a      	str	r2, [r1, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8002872:	f64f 327f 	movw	r2, #64383	; 0xfb7f
 8002876:	608a      	str	r2, [r1, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002878:	3301      	adds	r3, #1
 800287a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800287c:	429f      	cmp	r7, r3
 800287e:	d910      	bls.n	80028a2 <USB_DevInit+0x102>
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8002880:	eb05 1243 	add.w	r2, r5, r3, lsl #5
 8002884:	f502 6110 	add.w	r1, r2, #2304	; 0x900
 8002888:	f8d2 0900 	ldr.w	r0, [r2, #2304]	; 0x900
 800288c:	2800      	cmp	r0, #0
 800288e:	dbe9      	blt.n	8002864 <USB_DevInit+0xc4>
      USBx_INEP(i)->DIEPCTL = 0U;
 8002890:	2000      	movs	r0, #0
 8002892:	f8c2 0900 	str.w	r0, [r2, #2304]	; 0x900
 8002896:	e7ea      	b.n	800286e <USB_DevInit+0xce>
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8002898:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800289c:	f8c2 0900 	str.w	r0, [r2, #2304]	; 0x900
 80028a0:	e7e5      	b.n	800286e <USB_DevInit+0xce>
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80028a2:	2300      	movs	r3, #0
 80028a4:	e00a      	b.n	80028bc <USB_DevInit+0x11c>
      if (i == 0U)
 80028a6:	b1bb      	cbz	r3, 80028d8 <USB_DevInit+0x138>
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80028a8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80028ac:	f8c2 0b00 	str.w	r0, [r2, #2816]	; 0xb00
    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80028b0:	2200      	movs	r2, #0
 80028b2:	610a      	str	r2, [r1, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80028b4:	f64f 327f 	movw	r2, #64383	; 0xfb7f
 80028b8:	608a      	str	r2, [r1, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80028ba:	3301      	adds	r3, #1
 80028bc:	429f      	cmp	r7, r3
 80028be:	d910      	bls.n	80028e2 <USB_DevInit+0x142>
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80028c0:	eb05 1243 	add.w	r2, r5, r3, lsl #5
 80028c4:	f502 6130 	add.w	r1, r2, #2816	; 0xb00
 80028c8:	f8d2 0b00 	ldr.w	r0, [r2, #2816]	; 0xb00
 80028cc:	2800      	cmp	r0, #0
 80028ce:	dbea      	blt.n	80028a6 <USB_DevInit+0x106>
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80028d0:	2000      	movs	r0, #0
 80028d2:	f8c2 0b00 	str.w	r0, [r2, #2816]	; 0xb00
 80028d6:	e7eb      	b.n	80028b0 <USB_DevInit+0x110>
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80028d8:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 80028dc:	f8c2 0b00 	str.w	r0, [r2, #2816]	; 0xb00
 80028e0:	e7e6      	b.n	80028b0 <USB_DevInit+0x110>
  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80028e2:	6933      	ldr	r3, [r6, #16]
 80028e4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80028e8:	6133      	str	r3, [r6, #16]
  USBx->GINTMSK = 0U;
 80028ea:	2300      	movs	r3, #0
 80028ec:	61a3      	str	r3, [r4, #24]
  USBx->GINTSTS = 0xBFFFFFFFU;
 80028ee:	f06f 4380 	mvn.w	r3, #1073741824	; 0x40000000
 80028f2:	6163      	str	r3, [r4, #20]
  if (cfg.dma_enable == 0U)
 80028f4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80028f6:	b91b      	cbnz	r3, 8002900 <USB_DevInit+0x160>
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80028f8:	69a3      	ldr	r3, [r4, #24]
 80028fa:	f043 0310 	orr.w	r3, r3, #16
 80028fe:	61a3      	str	r3, [r4, #24]
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8002900:	69a2      	ldr	r2, [r4, #24]
 8002902:	4b0c      	ldr	r3, [pc, #48]	; (8002934 <USB_DevInit+0x194>)
 8002904:	4313      	orrs	r3, r2
 8002906:	61a3      	str	r3, [r4, #24]
  if (cfg.Sof_enable != 0U)
 8002908:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800290a:	b11b      	cbz	r3, 8002914 <USB_DevInit+0x174>
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800290c:	69a3      	ldr	r3, [r4, #24]
 800290e:	f043 0308 	orr.w	r3, r3, #8
 8002912:	61a3      	str	r3, [r4, #24]
  if (cfg.vbus_sensing_enable == 1U)
 8002914:	f1b8 0f01 	cmp.w	r8, #1
 8002918:	d004      	beq.n	8002924 <USB_DevInit+0x184>
}
 800291a:	4648      	mov	r0, r9
 800291c:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002920:	b004      	add	sp, #16
 8002922:	4770      	bx	lr
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8002924:	69a3      	ldr	r3, [r4, #24]
 8002926:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800292a:	f043 0304 	orr.w	r3, r3, #4
 800292e:	61a3      	str	r3, [r4, #24]
 8002930:	e7f3      	b.n	800291a <USB_DevInit+0x17a>
 8002932:	bf00      	nop
 8002934:	803c3800 	.word	0x803c3800

08002938 <USB_GetDevSpeed>:
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8002938:	f8d0 3808 	ldr.w	r3, [r0, #2056]	; 0x808
  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800293c:	f013 0306 	ands.w	r3, r3, #6
 8002940:	d007      	beq.n	8002952 <USB_GetDevSpeed+0x1a>
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8002942:	2b02      	cmp	r3, #2
 8002944:	d007      	beq.n	8002956 <USB_GetDevSpeed+0x1e>
 8002946:	2b06      	cmp	r3, #6
 8002948:	d001      	beq.n	800294e <USB_GetDevSpeed+0x16>
    speed = 0xFU;
 800294a:	200f      	movs	r0, #15
}
 800294c:	4770      	bx	lr
    speed = USBD_FS_SPEED;
 800294e:	2002      	movs	r0, #2
 8002950:	4770      	bx	lr
    speed = USBD_HS_SPEED;
 8002952:	2000      	movs	r0, #0
 8002954:	4770      	bx	lr
    speed = USBD_FS_SPEED;
 8002956:	2002      	movs	r0, #2
 8002958:	4770      	bx	lr

0800295a <USB_ActivateEndpoint>:
{
 800295a:	b470      	push	{r4, r5, r6}
  uint32_t epnum = (uint32_t)ep->num;
 800295c:	780c      	ldrb	r4, [r1, #0]
  if (ep->is_in == 1U)
 800295e:	784b      	ldrb	r3, [r1, #1]
 8002960:	2b01      	cmp	r3, #1
 8002962:	d022      	beq.n	80029aa <USB_ActivateEndpoint+0x50>
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8002964:	f8d0 381c 	ldr.w	r3, [r0, #2076]	; 0x81c
 8002968:	f004 060f 	and.w	r6, r4, #15
 800296c:	2201      	movs	r2, #1
 800296e:	40b2      	lsls	r2, r6
 8002970:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8002974:	f8c0 381c 	str.w	r3, [r0, #2076]	; 0x81c
    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8002978:	eb00 1044 	add.w	r0, r0, r4, lsl #5
 800297c:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 8002980:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8002984:	d10e      	bne.n	80029a4 <USB_ActivateEndpoint+0x4a>
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8002986:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 800298a:	688a      	ldr	r2, [r1, #8]
 800298c:	f3c2 020a 	ubfx	r2, r2, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8002990:	78c9      	ldrb	r1, [r1, #3]
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8002992:	ea42 4281 	orr.w	r2, r2, r1, lsl #18
 8002996:	4313      	orrs	r3, r2
 8002998:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800299c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80029a0:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
}
 80029a4:	2000      	movs	r0, #0
 80029a6:	bc70      	pop	{r4, r5, r6}
 80029a8:	4770      	bx	lr
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80029aa:	f8d0 281c 	ldr.w	r2, [r0, #2076]	; 0x81c
 80029ae:	f004 060f 	and.w	r6, r4, #15
 80029b2:	40b3      	lsls	r3, r6
 80029b4:	b29b      	uxth	r3, r3
 80029b6:	4313      	orrs	r3, r2
 80029b8:	f8c0 381c 	str.w	r3, [r0, #2076]	; 0x81c
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80029bc:	eb00 1044 	add.w	r0, r0, r4, lsl #5
 80029c0:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 80029c4:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 80029c8:	d1ec      	bne.n	80029a4 <USB_ActivateEndpoint+0x4a>
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80029ca:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 80029ce:	688a      	ldr	r2, [r1, #8]
 80029d0:	f3c2 020a 	ubfx	r2, r2, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80029d4:	78c9      	ldrb	r1, [r1, #3]
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80029d6:	ea42 4281 	orr.w	r2, r2, r1, lsl #18
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80029da:	ea42 5484 	orr.w	r4, r2, r4, lsl #22
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80029de:	431c      	orrs	r4, r3
 80029e0:	f044 5480 	orr.w	r4, r4, #268435456	; 0x10000000
 80029e4:	f444 4400 	orr.w	r4, r4, #32768	; 0x8000
 80029e8:	f8c0 4900 	str.w	r4, [r0, #2304]	; 0x900
 80029ec:	e7da      	b.n	80029a4 <USB_ActivateEndpoint+0x4a>
	...

080029f0 <USB_DeactivateEndpoint>:
{
 80029f0:	b430      	push	{r4, r5}
  uint32_t epnum = (uint32_t)ep->num;
 80029f2:	780b      	ldrb	r3, [r1, #0]
  if (ep->is_in == 1U)
 80029f4:	784a      	ldrb	r2, [r1, #1]
 80029f6:	2a01      	cmp	r2, #1
 80029f8:	d024      	beq.n	8002a44 <USB_DeactivateEndpoint+0x54>
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80029fa:	eb00 1343 	add.w	r3, r0, r3, lsl #5
 80029fe:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	; 0xb00
 8002a02:	2a00      	cmp	r2, #0
 8002a04:	db50      	blt.n	8002aa8 <USB_DeactivateEndpoint+0xb8>
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8002a06:	f8d0 583c 	ldr.w	r5, [r0, #2108]	; 0x83c
 8002a0a:	780a      	ldrb	r2, [r1, #0]
 8002a0c:	f002 020f 	and.w	r2, r2, #15
 8002a10:	2401      	movs	r4, #1
 8002a12:	fa04 f202 	lsl.w	r2, r4, r2
 8002a16:	ea25 4202 	bic.w	r2, r5, r2, lsl #16
 8002a1a:	f8c0 283c 	str.w	r2, [r0, #2108]	; 0x83c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8002a1e:	f8d0 281c 	ldr.w	r2, [r0, #2076]	; 0x81c
 8002a22:	7809      	ldrb	r1, [r1, #0]
 8002a24:	f001 010f 	and.w	r1, r1, #15
 8002a28:	408c      	lsls	r4, r1
 8002a2a:	ea22 4404 	bic.w	r4, r2, r4, lsl #16
 8002a2e:	f8c0 481c 	str.w	r4, [r0, #2076]	; 0x81c
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8002a32:	f8d3 1b00 	ldr.w	r1, [r3, #2816]	; 0xb00
 8002a36:	4a23      	ldr	r2, [pc, #140]	; (8002ac4 <USB_DeactivateEndpoint+0xd4>)
 8002a38:	400a      	ands	r2, r1
 8002a3a:	f8c3 2b00 	str.w	r2, [r3, #2816]	; 0xb00
}
 8002a3e:	2000      	movs	r0, #0
 8002a40:	bc30      	pop	{r4, r5}
 8002a42:	4770      	bx	lr
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8002a44:	eb00 1343 	add.w	r3, r0, r3, lsl #5
 8002a48:	f8d3 2900 	ldr.w	r2, [r3, #2304]	; 0x900
 8002a4c:	2a00      	cmp	r2, #0
 8002a4e:	db1e      	blt.n	8002a8e <USB_DeactivateEndpoint+0x9e>
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8002a50:	f8d0 583c 	ldr.w	r5, [r0, #2108]	; 0x83c
 8002a54:	780a      	ldrb	r2, [r1, #0]
 8002a56:	f002 020f 	and.w	r2, r2, #15
 8002a5a:	2401      	movs	r4, #1
 8002a5c:	fa04 f202 	lsl.w	r2, r4, r2
 8002a60:	b292      	uxth	r2, r2
 8002a62:	ea25 0202 	bic.w	r2, r5, r2
 8002a66:	f8c0 283c 	str.w	r2, [r0, #2108]	; 0x83c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8002a6a:	f8d0 281c 	ldr.w	r2, [r0, #2076]	; 0x81c
 8002a6e:	7809      	ldrb	r1, [r1, #0]
 8002a70:	f001 010f 	and.w	r1, r1, #15
 8002a74:	408c      	lsls	r4, r1
 8002a76:	b2a4      	uxth	r4, r4
 8002a78:	ea22 0404 	bic.w	r4, r2, r4
 8002a7c:	f8c0 481c 	str.w	r4, [r0, #2076]	; 0x81c
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8002a80:	f8d3 1900 	ldr.w	r1, [r3, #2304]	; 0x900
 8002a84:	4a10      	ldr	r2, [pc, #64]	; (8002ac8 <USB_DeactivateEndpoint+0xd8>)
 8002a86:	400a      	ands	r2, r1
 8002a88:	f8c3 2900 	str.w	r2, [r3, #2304]	; 0x900
 8002a8c:	e7d7      	b.n	8002a3e <USB_DeactivateEndpoint+0x4e>
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8002a8e:	f8d3 2900 	ldr.w	r2, [r3, #2304]	; 0x900
 8002a92:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 8002a96:	f8c3 2900 	str.w	r2, [r3, #2304]	; 0x900
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8002a9a:	f8d3 2900 	ldr.w	r2, [r3, #2304]	; 0x900
 8002a9e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002aa2:	f8c3 2900 	str.w	r2, [r3, #2304]	; 0x900
 8002aa6:	e7d3      	b.n	8002a50 <USB_DeactivateEndpoint+0x60>
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002aa8:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	; 0xb00
 8002aac:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 8002ab0:	f8c3 2b00 	str.w	r2, [r3, #2816]	; 0xb00
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8002ab4:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	; 0xb00
 8002ab8:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002abc:	f8c3 2b00 	str.w	r2, [r3, #2816]	; 0xb00
 8002ac0:	e7a1      	b.n	8002a06 <USB_DeactivateEndpoint+0x16>
 8002ac2:	bf00      	nop
 8002ac4:	eff37800 	.word	0xeff37800
 8002ac8:	ec337800 	.word	0xec337800

08002acc <USB_EP0StartXfer>:
{
 8002acc:	b470      	push	{r4, r5, r6}
  uint32_t epnum = (uint32_t)ep->num;
 8002ace:	780b      	ldrb	r3, [r1, #0]
  if (ep->is_in == 1U)
 8002ad0:	784c      	ldrb	r4, [r1, #1]
 8002ad2:	2c01      	cmp	r4, #1
 8002ad4:	d026      	beq.n	8002b24 <USB_EP0StartXfer+0x58>
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8002ad6:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 8002ada:	f500 6330 	add.w	r3, r0, #2816	; 0xb00
 8002ade:	691c      	ldr	r4, [r3, #16]
 8002ae0:	0ce4      	lsrs	r4, r4, #19
 8002ae2:	04e4      	lsls	r4, r4, #19
 8002ae4:	611c      	str	r4, [r3, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8002ae6:	691c      	ldr	r4, [r3, #16]
 8002ae8:	f024 54ff 	bic.w	r4, r4, #534773760	; 0x1fe00000
 8002aec:	f424 14c0 	bic.w	r4, r4, #1572864	; 0x180000
 8002af0:	611c      	str	r4, [r3, #16]
    if (ep->xfer_len > 0U)
 8002af2:	694c      	ldr	r4, [r1, #20]
 8002af4:	b10c      	cbz	r4, 8002afa <USB_EP0StartXfer+0x2e>
      ep->xfer_len = ep->maxpacket;
 8002af6:	688c      	ldr	r4, [r1, #8]
 8002af8:	614c      	str	r4, [r1, #20]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8002afa:	691c      	ldr	r4, [r3, #16]
 8002afc:	f444 2400 	orr.w	r4, r4, #524288	; 0x80000
 8002b00:	611c      	str	r4, [r3, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8002b02:	691c      	ldr	r4, [r3, #16]
 8002b04:	688d      	ldr	r5, [r1, #8]
 8002b06:	f3c5 0512 	ubfx	r5, r5, #0, #19
 8002b0a:	432c      	orrs	r4, r5
 8002b0c:	611c      	str	r4, [r3, #16]
    if (dma == 1U)
 8002b0e:	2a01      	cmp	r2, #1
 8002b10:	d065      	beq.n	8002bde <USB_EP0StartXfer+0x112>
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8002b12:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 8002b16:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8002b1a:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
}
 8002b1e:	2000      	movs	r0, #0
 8002b20:	bc70      	pop	{r4, r5, r6}
 8002b22:	4770      	bx	lr
    if (ep->xfer_len == 0U)
 8002b24:	694c      	ldr	r4, [r1, #20]
 8002b26:	bb6c      	cbnz	r4, 8002b84 <USB_EP0StartXfer+0xb8>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8002b28:	eb00 1443 	add.w	r4, r0, r3, lsl #5
 8002b2c:	f8d4 5910 	ldr.w	r5, [r4, #2320]	; 0x910
 8002b30:	f025 55ff 	bic.w	r5, r5, #534773760	; 0x1fe00000
 8002b34:	f425 15c0 	bic.w	r5, r5, #1572864	; 0x180000
 8002b38:	f8c4 5910 	str.w	r5, [r4, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8002b3c:	f8d4 5910 	ldr.w	r5, [r4, #2320]	; 0x910
 8002b40:	f445 2500 	orr.w	r5, r5, #524288	; 0x80000
 8002b44:	f8c4 5910 	str.w	r5, [r4, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8002b48:	f8d4 5910 	ldr.w	r5, [r4, #2320]	; 0x910
 8002b4c:	0ced      	lsrs	r5, r5, #19
 8002b4e:	04ed      	lsls	r5, r5, #19
 8002b50:	f8c4 5910 	str.w	r5, [r4, #2320]	; 0x910
    if (dma == 1U)
 8002b54:	2a01      	cmp	r2, #1
 8002b56:	d033      	beq.n	8002bc0 <USB_EP0StartXfer+0xf4>
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8002b58:	eb00 1343 	add.w	r3, r0, r3, lsl #5
 8002b5c:	f8d3 2900 	ldr.w	r2, [r3, #2304]	; 0x900
 8002b60:	f042 4204 	orr.w	r2, r2, #2214592512	; 0x84000000
 8002b64:	f8c3 2900 	str.w	r2, [r3, #2304]	; 0x900
      if (ep->xfer_len > 0U)
 8002b68:	694b      	ldr	r3, [r1, #20]
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d0d7      	beq.n	8002b1e <USB_EP0StartXfer+0x52>
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8002b6e:	f8d0 3834 	ldr.w	r3, [r0, #2100]	; 0x834
 8002b72:	780a      	ldrb	r2, [r1, #0]
 8002b74:	f002 010f 	and.w	r1, r2, #15
 8002b78:	2201      	movs	r2, #1
 8002b7a:	408a      	lsls	r2, r1
 8002b7c:	4313      	orrs	r3, r2
 8002b7e:	f8c0 3834 	str.w	r3, [r0, #2100]	; 0x834
 8002b82:	e7cc      	b.n	8002b1e <USB_EP0StartXfer+0x52>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8002b84:	eb00 1443 	add.w	r4, r0, r3, lsl #5
 8002b88:	f504 6410 	add.w	r4, r4, #2304	; 0x900
 8002b8c:	6925      	ldr	r5, [r4, #16]
 8002b8e:	0ced      	lsrs	r5, r5, #19
 8002b90:	04ed      	lsls	r5, r5, #19
 8002b92:	6125      	str	r5, [r4, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8002b94:	6925      	ldr	r5, [r4, #16]
 8002b96:	f025 55ff 	bic.w	r5, r5, #534773760	; 0x1fe00000
 8002b9a:	f425 15c0 	bic.w	r5, r5, #1572864	; 0x180000
 8002b9e:	6125      	str	r5, [r4, #16]
      if (ep->xfer_len > ep->maxpacket)
 8002ba0:	694e      	ldr	r6, [r1, #20]
 8002ba2:	688d      	ldr	r5, [r1, #8]
 8002ba4:	42ae      	cmp	r6, r5
 8002ba6:	d900      	bls.n	8002baa <USB_EP0StartXfer+0xde>
        ep->xfer_len = ep->maxpacket;
 8002ba8:	614d      	str	r5, [r1, #20]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8002baa:	6925      	ldr	r5, [r4, #16]
 8002bac:	f445 2500 	orr.w	r5, r5, #524288	; 0x80000
 8002bb0:	6125      	str	r5, [r4, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8002bb2:	6925      	ldr	r5, [r4, #16]
 8002bb4:	694e      	ldr	r6, [r1, #20]
 8002bb6:	f3c6 0612 	ubfx	r6, r6, #0, #19
 8002bba:	4335      	orrs	r5, r6
 8002bbc:	6125      	str	r5, [r4, #16]
 8002bbe:	e7c9      	b.n	8002b54 <USB_EP0StartXfer+0x88>
      if ((uint32_t)ep->dma_addr != 0U)
 8002bc0:	690a      	ldr	r2, [r1, #16]
 8002bc2:	b11a      	cbz	r2, 8002bcc <USB_EP0StartXfer+0x100>
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8002bc4:	eb00 1143 	add.w	r1, r0, r3, lsl #5
 8002bc8:	f8c1 2914 	str.w	r2, [r1, #2324]	; 0x914
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8002bcc:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 8002bd0:	f8d0 2900 	ldr.w	r2, [r0, #2304]	; 0x900
 8002bd4:	f042 4204 	orr.w	r2, r2, #2214592512	; 0x84000000
 8002bd8:	f8c0 2900 	str.w	r2, [r0, #2304]	; 0x900
 8002bdc:	e79f      	b.n	8002b1e <USB_EP0StartXfer+0x52>
      if ((uint32_t)ep->xfer_buff != 0U)
 8002bde:	68ca      	ldr	r2, [r1, #12]
 8002be0:	2a00      	cmp	r2, #0
 8002be2:	d096      	beq.n	8002b12 <USB_EP0StartXfer+0x46>
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8002be4:	615a      	str	r2, [r3, #20]
 8002be6:	e794      	b.n	8002b12 <USB_EP0StartXfer+0x46>

08002be8 <USB_WritePacket>:
{
 8002be8:	b470      	push	{r4, r5, r6}
 8002bea:	f89d 400c 	ldrb.w	r4, [sp, #12]
  if (dma == 0U)
 8002bee:	b964      	cbnz	r4, 8002c0a <USB_WritePacket+0x22>
    count32b = ((uint32_t)len + 3U) / 4U;
 8002bf0:	3303      	adds	r3, #3
 8002bf2:	089d      	lsrs	r5, r3, #2
    for (i = 0U; i < count32b; i++)
 8002bf4:	42ac      	cmp	r4, r5
 8002bf6:	d208      	bcs.n	8002c0a <USB_WritePacket+0x22>
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8002bf8:	eb00 3302 	add.w	r3, r0, r2, lsl #12
 8002bfc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002c00:	f851 6b04 	ldr.w	r6, [r1], #4
 8002c04:	601e      	str	r6, [r3, #0]
    for (i = 0U; i < count32b; i++)
 8002c06:	3401      	adds	r4, #1
 8002c08:	e7f4      	b.n	8002bf4 <USB_WritePacket+0xc>
}
 8002c0a:	2000      	movs	r0, #0
 8002c0c:	bc70      	pop	{r4, r5, r6}
 8002c0e:	4770      	bx	lr

08002c10 <USB_EPStartXfer>:
{
 8002c10:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002c12:	b083      	sub	sp, #12
  uint32_t epnum = (uint32_t)ep->num;
 8002c14:	780b      	ldrb	r3, [r1, #0]
  if (ep->is_in == 1U)
 8002c16:	784c      	ldrb	r4, [r1, #1]
 8002c18:	2c01      	cmp	r4, #1
 8002c1a:	d02b      	beq.n	8002c74 <USB_EPStartXfer+0x64>
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8002c1c:	eb00 1343 	add.w	r3, r0, r3, lsl #5
 8002c20:	f503 6430 	add.w	r4, r3, #2816	; 0xb00
 8002c24:	6925      	ldr	r5, [r4, #16]
 8002c26:	0ced      	lsrs	r5, r5, #19
 8002c28:	04ed      	lsls	r5, r5, #19
 8002c2a:	6125      	str	r5, [r4, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8002c2c:	6925      	ldr	r5, [r4, #16]
 8002c2e:	f025 55ff 	bic.w	r5, r5, #534773760	; 0x1fe00000
 8002c32:	f425 15c0 	bic.w	r5, r5, #1572864	; 0x180000
 8002c36:	6125      	str	r5, [r4, #16]
    if (ep->xfer_len == 0U)
 8002c38:	694d      	ldr	r5, [r1, #20]
 8002c3a:	2d00      	cmp	r5, #0
 8002c3c:	f040 80c3 	bne.w	8002dc6 <USB_EPStartXfer+0x1b6>
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8002c40:	6925      	ldr	r5, [r4, #16]
 8002c42:	688e      	ldr	r6, [r1, #8]
 8002c44:	f3c6 0612 	ubfx	r6, r6, #0, #19
 8002c48:	4335      	orrs	r5, r6
 8002c4a:	6125      	str	r5, [r4, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8002c4c:	6925      	ldr	r5, [r4, #16]
 8002c4e:	f445 2500 	orr.w	r5, r5, #524288	; 0x80000
 8002c52:	6125      	str	r5, [r4, #16]
    if (dma == 1U)
 8002c54:	2a01      	cmp	r2, #1
 8002c56:	f000 80cb 	beq.w	8002df0 <USB_EPStartXfer+0x1e0>
    if (ep->type == EP_TYPE_ISOC)
 8002c5a:	78ca      	ldrb	r2, [r1, #3]
 8002c5c:	2a01      	cmp	r2, #1
 8002c5e:	f000 80cd 	beq.w	8002dfc <USB_EPStartXfer+0x1ec>
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8002c62:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	; 0xb00
 8002c66:	f042 4204 	orr.w	r2, r2, #2214592512	; 0x84000000
 8002c6a:	f8c3 2b00 	str.w	r2, [r3, #2816]	; 0xb00
}
 8002c6e:	2000      	movs	r0, #0
 8002c70:	b003      	add	sp, #12
 8002c72:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (ep->xfer_len == 0U)
 8002c74:	694c      	ldr	r4, [r1, #20]
 8002c76:	bb84      	cbnz	r4, 8002cda <USB_EPStartXfer+0xca>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8002c78:	eb00 1443 	add.w	r4, r0, r3, lsl #5
 8002c7c:	f8d4 5910 	ldr.w	r5, [r4, #2320]	; 0x910
 8002c80:	f025 55ff 	bic.w	r5, r5, #534773760	; 0x1fe00000
 8002c84:	f425 15c0 	bic.w	r5, r5, #1572864	; 0x180000
 8002c88:	f8c4 5910 	str.w	r5, [r4, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8002c8c:	f8d4 5910 	ldr.w	r5, [r4, #2320]	; 0x910
 8002c90:	f445 2500 	orr.w	r5, r5, #524288	; 0x80000
 8002c94:	f8c4 5910 	str.w	r5, [r4, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8002c98:	f8d4 5910 	ldr.w	r5, [r4, #2320]	; 0x910
 8002c9c:	0ced      	lsrs	r5, r5, #19
 8002c9e:	04ed      	lsls	r5, r5, #19
 8002ca0:	f8c4 5910 	str.w	r5, [r4, #2320]	; 0x910
    if (dma == 1U)
 8002ca4:	2a01      	cmp	r2, #1
 8002ca6:	d04c      	beq.n	8002d42 <USB_EPStartXfer+0x132>
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8002ca8:	eb00 1343 	add.w	r3, r0, r3, lsl #5
 8002cac:	f8d3 4900 	ldr.w	r4, [r3, #2304]	; 0x900
 8002cb0:	f044 4404 	orr.w	r4, r4, #2214592512	; 0x84000000
 8002cb4:	f8c3 4900 	str.w	r4, [r3, #2304]	; 0x900
      if (ep->type != EP_TYPE_ISOC)
 8002cb8:	78cc      	ldrb	r4, [r1, #3]
 8002cba:	2c01      	cmp	r4, #1
 8002cbc:	d06a      	beq.n	8002d94 <USB_EPStartXfer+0x184>
        if (ep->xfer_len > 0U)
 8002cbe:	694b      	ldr	r3, [r1, #20]
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d0d4      	beq.n	8002c6e <USB_EPStartXfer+0x5e>
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8002cc4:	f8d0 2834 	ldr.w	r2, [r0, #2100]	; 0x834
 8002cc8:	7809      	ldrb	r1, [r1, #0]
 8002cca:	f001 040f 	and.w	r4, r1, #15
 8002cce:	2101      	movs	r1, #1
 8002cd0:	40a1      	lsls	r1, r4
 8002cd2:	430a      	orrs	r2, r1
 8002cd4:	f8c0 2834 	str.w	r2, [r0, #2100]	; 0x834
 8002cd8:	e7c9      	b.n	8002c6e <USB_EPStartXfer+0x5e>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8002cda:	eb00 1443 	add.w	r4, r0, r3, lsl #5
 8002cde:	f8d4 5910 	ldr.w	r5, [r4, #2320]	; 0x910
 8002ce2:	0ced      	lsrs	r5, r5, #19
 8002ce4:	04ed      	lsls	r5, r5, #19
 8002ce6:	f8c4 5910 	str.w	r5, [r4, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8002cea:	f8d4 5910 	ldr.w	r5, [r4, #2320]	; 0x910
 8002cee:	f025 55ff 	bic.w	r5, r5, #534773760	; 0x1fe00000
 8002cf2:	f425 15c0 	bic.w	r5, r5, #1572864	; 0x180000
 8002cf6:	f8c4 5910 	str.w	r5, [r4, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8002cfa:	f8d4 6910 	ldr.w	r6, [r4, #2320]	; 0x910
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8002cfe:	694d      	ldr	r5, [r1, #20]
 8002d00:	688f      	ldr	r7, [r1, #8]
 8002d02:	443d      	add	r5, r7
 8002d04:	3d01      	subs	r5, #1
 8002d06:	fbb5 f5f7 	udiv	r5, r5, r7
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8002d0a:	4f46      	ldr	r7, [pc, #280]	; (8002e24 <USB_EPStartXfer+0x214>)
 8002d0c:	ea07 45c5 	and.w	r5, r7, r5, lsl #19
 8002d10:	4335      	orrs	r5, r6
 8002d12:	f8c4 5910 	str.w	r5, [r4, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8002d16:	f8d4 5910 	ldr.w	r5, [r4, #2320]	; 0x910
 8002d1a:	694e      	ldr	r6, [r1, #20]
 8002d1c:	f3c6 0612 	ubfx	r6, r6, #0, #19
 8002d20:	4335      	orrs	r5, r6
 8002d22:	f8c4 5910 	str.w	r5, [r4, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8002d26:	f504 6410 	add.w	r4, r4, #2304	; 0x900
      if (ep->type == EP_TYPE_ISOC)
 8002d2a:	78cd      	ldrb	r5, [r1, #3]
 8002d2c:	2d01      	cmp	r5, #1
 8002d2e:	d1b9      	bne.n	8002ca4 <USB_EPStartXfer+0x94>
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8002d30:	6925      	ldr	r5, [r4, #16]
 8002d32:	f025 45c0 	bic.w	r5, r5, #1610612736	; 0x60000000
 8002d36:	6125      	str	r5, [r4, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8002d38:	6925      	ldr	r5, [r4, #16]
 8002d3a:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8002d3e:	6125      	str	r5, [r4, #16]
 8002d40:	e7b0      	b.n	8002ca4 <USB_EPStartXfer+0x94>
      if ((uint32_t)ep->dma_addr != 0U)
 8002d42:	690a      	ldr	r2, [r1, #16]
 8002d44:	b11a      	cbz	r2, 8002d4e <USB_EPStartXfer+0x13e>
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8002d46:	eb00 1443 	add.w	r4, r0, r3, lsl #5
 8002d4a:	f8c4 2914 	str.w	r2, [r4, #2324]	; 0x914
      if (ep->type == EP_TYPE_ISOC)
 8002d4e:	78ca      	ldrb	r2, [r1, #3]
 8002d50:	2a01      	cmp	r2, #1
 8002d52:	d008      	beq.n	8002d66 <USB_EPStartXfer+0x156>
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8002d54:	eb00 1343 	add.w	r3, r0, r3, lsl #5
 8002d58:	f8d3 2900 	ldr.w	r2, [r3, #2304]	; 0x900
 8002d5c:	f042 4204 	orr.w	r2, r2, #2214592512	; 0x84000000
 8002d60:	f8c3 2900 	str.w	r2, [r3, #2304]	; 0x900
 8002d64:	e783      	b.n	8002c6e <USB_EPStartXfer+0x5e>
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8002d66:	f8d0 2808 	ldr.w	r2, [r0, #2056]	; 0x808
 8002d6a:	f412 7f80 	tst.w	r2, #256	; 0x100
 8002d6e:	d108      	bne.n	8002d82 <USB_EPStartXfer+0x172>
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8002d70:	eb00 1143 	add.w	r1, r0, r3, lsl #5
 8002d74:	f8d1 2900 	ldr.w	r2, [r1, #2304]	; 0x900
 8002d78:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8002d7c:	f8c1 2900 	str.w	r2, [r1, #2304]	; 0x900
 8002d80:	e7e8      	b.n	8002d54 <USB_EPStartXfer+0x144>
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8002d82:	eb00 1143 	add.w	r1, r0, r3, lsl #5
 8002d86:	f8d1 2900 	ldr.w	r2, [r1, #2304]	; 0x900
 8002d8a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002d8e:	f8c1 2900 	str.w	r2, [r1, #2304]	; 0x900
 8002d92:	e7df      	b.n	8002d54 <USB_EPStartXfer+0x144>
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8002d94:	f8d0 4808 	ldr.w	r4, [r0, #2056]	; 0x808
 8002d98:	f414 7f80 	tst.w	r4, #256	; 0x100
 8002d9c:	d10c      	bne.n	8002db8 <USB_EPStartXfer+0x1a8>
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8002d9e:	f8d3 4900 	ldr.w	r4, [r3, #2304]	; 0x900
 8002da2:	f044 5400 	orr.w	r4, r4, #536870912	; 0x20000000
 8002da6:	f8c3 4900 	str.w	r4, [r3, #2304]	; 0x900
        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8002daa:	9200      	str	r2, [sp, #0]
 8002dac:	8a8b      	ldrh	r3, [r1, #20]
 8002dae:	780a      	ldrb	r2, [r1, #0]
 8002db0:	68c9      	ldr	r1, [r1, #12]
 8002db2:	f7ff ff19 	bl	8002be8 <USB_WritePacket>
 8002db6:	e75a      	b.n	8002c6e <USB_EPStartXfer+0x5e>
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8002db8:	f8d3 4900 	ldr.w	r4, [r3, #2304]	; 0x900
 8002dbc:	f044 5480 	orr.w	r4, r4, #268435456	; 0x10000000
 8002dc0:	f8c3 4900 	str.w	r4, [r3, #2304]	; 0x900
 8002dc4:	e7f1      	b.n	8002daa <USB_EPStartXfer+0x19a>
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8002dc6:	688e      	ldr	r6, [r1, #8]
 8002dc8:	4435      	add	r5, r6
 8002dca:	3d01      	subs	r5, #1
 8002dcc:	fbb5 f5f6 	udiv	r5, r5, r6
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8002dd0:	6926      	ldr	r6, [r4, #16]
 8002dd2:	4f14      	ldr	r7, [pc, #80]	; (8002e24 <USB_EPStartXfer+0x214>)
 8002dd4:	ea07 47c5 	and.w	r7, r7, r5, lsl #19
 8002dd8:	433e      	orrs	r6, r7
 8002dda:	6126      	str	r6, [r4, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8002ddc:	6927      	ldr	r7, [r4, #16]
 8002dde:	688e      	ldr	r6, [r1, #8]
 8002de0:	b2ad      	uxth	r5, r5
 8002de2:	fb06 f505 	mul.w	r5, r6, r5
 8002de6:	f3c5 0512 	ubfx	r5, r5, #0, #19
 8002dea:	433d      	orrs	r5, r7
 8002dec:	6125      	str	r5, [r4, #16]
 8002dee:	e731      	b.n	8002c54 <USB_EPStartXfer+0x44>
      if ((uint32_t)ep->xfer_buff != 0U)
 8002df0:	68ca      	ldr	r2, [r1, #12]
 8002df2:	2a00      	cmp	r2, #0
 8002df4:	f43f af31 	beq.w	8002c5a <USB_EPStartXfer+0x4a>
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8002df8:	6162      	str	r2, [r4, #20]
 8002dfa:	e72e      	b.n	8002c5a <USB_EPStartXfer+0x4a>
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8002dfc:	f8d0 2808 	ldr.w	r2, [r0, #2056]	; 0x808
 8002e00:	f412 7f80 	tst.w	r2, #256	; 0x100
 8002e04:	d106      	bne.n	8002e14 <USB_EPStartXfer+0x204>
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8002e06:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	; 0xb00
 8002e0a:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8002e0e:	f8c3 2b00 	str.w	r2, [r3, #2816]	; 0xb00
 8002e12:	e726      	b.n	8002c62 <USB_EPStartXfer+0x52>
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8002e14:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	; 0xb00
 8002e18:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002e1c:	f8c3 2b00 	str.w	r2, [r3, #2816]	; 0xb00
 8002e20:	e71f      	b.n	8002c62 <USB_EPStartXfer+0x52>
 8002e22:	bf00      	nop
 8002e24:	1ff80000 	.word	0x1ff80000

08002e28 <USB_ReadPacket>:
{
 8002e28:	b4f0      	push	{r4, r5, r6, r7}
 8002e2a:	b082      	sub	sp, #8
 8002e2c:	4607      	mov	r7, r0
 8002e2e:	4608      	mov	r0, r1
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002e30:	463e      	mov	r6, r7
  uint32_t count32b = (uint32_t)len >> 2U;
 8002e32:	0895      	lsrs	r5, r2, #2
  uint16_t remaining_bytes = len % 4U;
 8002e34:	f002 0203 	and.w	r2, r2, #3
  for (i = 0U; i < count32b; i++)
 8002e38:	2300      	movs	r3, #0
 8002e3a:	42ab      	cmp	r3, r5
 8002e3c:	d206      	bcs.n	8002e4c <USB_ReadPacket+0x24>
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8002e3e:	f506 5480 	add.w	r4, r6, #4096	; 0x1000
 8002e42:	6824      	ldr	r4, [r4, #0]
 8002e44:	f840 4b04 	str.w	r4, [r0], #4
  for (i = 0U; i < count32b; i++)
 8002e48:	3301      	adds	r3, #1
 8002e4a:	e7f6      	b.n	8002e3a <USB_ReadPacket+0x12>
  if (remaining_bytes != 0U)
 8002e4c:	b17a      	cbz	r2, 8002e6e <USB_ReadPacket+0x46>
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8002e4e:	f507 5780 	add.w	r7, r7, #4096	; 0x1000
 8002e52:	683b      	ldr	r3, [r7, #0]
 8002e54:	9301      	str	r3, [sp, #4]
    i = 0U;
 8002e56:	2500      	movs	r5, #0
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8002e58:	b2eb      	uxtb	r3, r5
 8002e5a:	00dc      	lsls	r4, r3, #3
 8002e5c:	9b01      	ldr	r3, [sp, #4]
 8002e5e:	40e3      	lsrs	r3, r4
 8002e60:	f800 3b01 	strb.w	r3, [r0], #1
      i++;
 8002e64:	3501      	adds	r5, #1
      remaining_bytes--;
 8002e66:	3a01      	subs	r2, #1
 8002e68:	b292      	uxth	r2, r2
    } while (remaining_bytes != 0U);
 8002e6a:	2a00      	cmp	r2, #0
 8002e6c:	d1f4      	bne.n	8002e58 <USB_ReadPacket+0x30>
}
 8002e6e:	b002      	add	sp, #8
 8002e70:	bcf0      	pop	{r4, r5, r6, r7}
 8002e72:	4770      	bx	lr

08002e74 <USB_EPSetStall>:
  uint32_t epnum = (uint32_t)ep->num;
 8002e74:	780b      	ldrb	r3, [r1, #0]
  if (ep->is_in == 1U)
 8002e76:	784a      	ldrb	r2, [r1, #1]
 8002e78:	2a01      	cmp	r2, #1
 8002e7a:	d014      	beq.n	8002ea6 <USB_EPSetStall+0x32>
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8002e7c:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 8002e80:	f8d0 2b00 	ldr.w	r2, [r0, #2816]	; 0xb00
 8002e84:	2a00      	cmp	r2, #0
 8002e86:	db06      	blt.n	8002e96 <USB_EPSetStall+0x22>
 8002e88:	b12b      	cbz	r3, 8002e96 <USB_EPSetStall+0x22>
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8002e8a:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 8002e8e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002e92:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8002e96:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 8002e9a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002e9e:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
}
 8002ea2:	2000      	movs	r0, #0
 8002ea4:	4770      	bx	lr
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8002ea6:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 8002eaa:	f8d0 2900 	ldr.w	r2, [r0, #2304]	; 0x900
 8002eae:	2a00      	cmp	r2, #0
 8002eb0:	db06      	blt.n	8002ec0 <USB_EPSetStall+0x4c>
 8002eb2:	b12b      	cbz	r3, 8002ec0 <USB_EPSetStall+0x4c>
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8002eb4:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 8002eb8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002ebc:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8002ec0:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 8002ec4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002ec8:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
 8002ecc:	e7e9      	b.n	8002ea2 <USB_EPSetStall+0x2e>

08002ece <USB_EPClearStall>:
  uint32_t epnum = (uint32_t)ep->num;
 8002ece:	780b      	ldrb	r3, [r1, #0]
  if (ep->is_in == 1U)
 8002ed0:	784a      	ldrb	r2, [r1, #1]
 8002ed2:	2a01      	cmp	r2, #1
 8002ed4:	d00e      	beq.n	8002ef4 <USB_EPClearStall+0x26>
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002ed6:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 8002eda:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 8002ede:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002ee2:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8002ee6:	78cb      	ldrb	r3, [r1, #3]
 8002ee8:	3b02      	subs	r3, #2
 8002eea:	b2db      	uxtb	r3, r3
 8002eec:	2b01      	cmp	r3, #1
 8002eee:	d915      	bls.n	8002f1c <USB_EPClearStall+0x4e>
}
 8002ef0:	2000      	movs	r0, #0
 8002ef2:	4770      	bx	lr
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002ef4:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 8002ef8:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 8002efc:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002f00:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8002f04:	78cb      	ldrb	r3, [r1, #3]
 8002f06:	3b02      	subs	r3, #2
 8002f08:	b2db      	uxtb	r3, r3
 8002f0a:	2b01      	cmp	r3, #1
 8002f0c:	d8f0      	bhi.n	8002ef0 <USB_EPClearStall+0x22>
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8002f0e:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 8002f12:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f16:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
 8002f1a:	e7e9      	b.n	8002ef0 <USB_EPClearStall+0x22>
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8002f1c:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 8002f20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f24:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
 8002f28:	e7e2      	b.n	8002ef0 <USB_EPClearStall+0x22>

08002f2a <USB_SetDevAddress>:
  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8002f2a:	f8d0 3800 	ldr.w	r3, [r0, #2048]	; 0x800
 8002f2e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8002f32:	f8c0 3800 	str.w	r3, [r0, #2048]	; 0x800
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8002f36:	f8d0 3800 	ldr.w	r3, [r0, #2048]	; 0x800
 8002f3a:	0109      	lsls	r1, r1, #4
 8002f3c:	f401 61fe 	and.w	r1, r1, #2032	; 0x7f0
 8002f40:	4319      	orrs	r1, r3
 8002f42:	f8c0 1800 	str.w	r1, [r0, #2048]	; 0x800
}
 8002f46:	2000      	movs	r0, #0
 8002f48:	4770      	bx	lr

08002f4a <USB_DevConnect>:
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8002f4a:	f8d0 3e00 	ldr.w	r3, [r0, #3584]	; 0xe00
 8002f4e:	f023 0303 	bic.w	r3, r3, #3
 8002f52:	f8c0 3e00 	str.w	r3, [r0, #3584]	; 0xe00
  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8002f56:	f8d0 3804 	ldr.w	r3, [r0, #2052]	; 0x804
 8002f5a:	f023 0302 	bic.w	r3, r3, #2
 8002f5e:	f8c0 3804 	str.w	r3, [r0, #2052]	; 0x804
}
 8002f62:	2000      	movs	r0, #0
 8002f64:	4770      	bx	lr

08002f66 <USB_DevDisconnect>:
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8002f66:	f8d0 3e00 	ldr.w	r3, [r0, #3584]	; 0xe00
 8002f6a:	f023 0303 	bic.w	r3, r3, #3
 8002f6e:	f8c0 3e00 	str.w	r3, [r0, #3584]	; 0xe00
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8002f72:	f8d0 3804 	ldr.w	r3, [r0, #2052]	; 0x804
 8002f76:	f043 0302 	orr.w	r3, r3, #2
 8002f7a:	f8c0 3804 	str.w	r3, [r0, #2052]	; 0x804
}
 8002f7e:	2000      	movs	r0, #0
 8002f80:	4770      	bx	lr

08002f82 <USB_ReadInterrupts>:
  tmpreg = USBx->GINTSTS;
 8002f82:	6942      	ldr	r2, [r0, #20]
  tmpreg &= USBx->GINTMSK;
 8002f84:	6980      	ldr	r0, [r0, #24]
}
 8002f86:	4010      	ands	r0, r2
 8002f88:	4770      	bx	lr

08002f8a <USB_ReadDevAllOutEpInterrupt>:
  tmpreg  = USBx_DEVICE->DAINT;
 8002f8a:	f8d0 3818 	ldr.w	r3, [r0, #2072]	; 0x818
 8002f8e:	f500 6000 	add.w	r0, r0, #2048	; 0x800
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8002f92:	69c0      	ldr	r0, [r0, #28]
 8002f94:	4018      	ands	r0, r3
}
 8002f96:	0c00      	lsrs	r0, r0, #16
 8002f98:	4770      	bx	lr

08002f9a <USB_ReadDevAllInEpInterrupt>:
  tmpreg  = USBx_DEVICE->DAINT;
 8002f9a:	f8d0 3818 	ldr.w	r3, [r0, #2072]	; 0x818
 8002f9e:	f500 6000 	add.w	r0, r0, #2048	; 0x800
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8002fa2:	69c0      	ldr	r0, [r0, #28]
 8002fa4:	4018      	ands	r0, r3
}
 8002fa6:	b280      	uxth	r0, r0
 8002fa8:	4770      	bx	lr

08002faa <USB_ReadDevOutEPInterrupt>:
  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8002faa:	eb00 1141 	add.w	r1, r0, r1, lsl #5
 8002fae:	f8d1 2b08 	ldr.w	r2, [r1, #2824]	; 0xb08
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8002fb2:	f500 6000 	add.w	r0, r0, #2048	; 0x800
 8002fb6:	6940      	ldr	r0, [r0, #20]
}
 8002fb8:	4010      	ands	r0, r2
 8002fba:	4770      	bx	lr

08002fbc <USB_ReadDevInEPInterrupt>:
{
 8002fbc:	b410      	push	{r4}
  msk = USBx_DEVICE->DIEPMSK;
 8002fbe:	f8d0 4810 	ldr.w	r4, [r0, #2064]	; 0x810
  emp = USBx_DEVICE->DIEPEMPMSK;
 8002fc2:	f8d0 3834 	ldr.w	r3, [r0, #2100]	; 0x834
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8002fc6:	f001 020f 	and.w	r2, r1, #15
 8002fca:	40d3      	lsrs	r3, r2
 8002fcc:	01db      	lsls	r3, r3, #7
 8002fce:	b2db      	uxtb	r3, r3
 8002fd0:	4323      	orrs	r3, r4
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8002fd2:	eb00 1041 	add.w	r0, r0, r1, lsl #5
 8002fd6:	f500 6010 	add.w	r0, r0, #2304	; 0x900
 8002fda:	6880      	ldr	r0, [r0, #8]
}
 8002fdc:	4018      	ands	r0, r3
 8002fde:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002fe2:	4770      	bx	lr

08002fe4 <USB_GetMode>:
  return ((USBx->GINTSTS) & 0x1U);
 8002fe4:	6940      	ldr	r0, [r0, #20]
}
 8002fe6:	f000 0001 	and.w	r0, r0, #1
 8002fea:	4770      	bx	lr

08002fec <USB_SetCurrentMode>:
{
 8002fec:	b538      	push	{r3, r4, r5, lr}
 8002fee:	4605      	mov	r5, r0
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8002ff0:	68c3      	ldr	r3, [r0, #12]
 8002ff2:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8002ff6:	60c3      	str	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 8002ff8:	2901      	cmp	r1, #1
 8002ffa:	d013      	beq.n	8003024 <USB_SetCurrentMode+0x38>
  else if (mode == USB_DEVICE_MODE)
 8002ffc:	bb19      	cbnz	r1, 8003046 <USB_SetCurrentMode+0x5a>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8002ffe:	68c3      	ldr	r3, [r0, #12]
 8003000:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003004:	60c3      	str	r3, [r0, #12]
  uint32_t ms = 0U;
 8003006:	2400      	movs	r4, #0
      HAL_Delay(1U);
 8003008:	2001      	movs	r0, #1
 800300a:	f7fd fd97 	bl	8000b3c <HAL_Delay>
      ms++;
 800300e:	3401      	adds	r4, #1
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8003010:	4628      	mov	r0, r5
 8003012:	f7ff ffe7 	bl	8002fe4 <USB_GetMode>
 8003016:	b108      	cbz	r0, 800301c <USB_SetCurrentMode+0x30>
 8003018:	2c31      	cmp	r4, #49	; 0x31
 800301a:	d9f5      	bls.n	8003008 <USB_SetCurrentMode+0x1c>
  if (ms == 50U)
 800301c:	2c32      	cmp	r4, #50	; 0x32
 800301e:	d014      	beq.n	800304a <USB_SetCurrentMode+0x5e>
  return HAL_OK;
 8003020:	2000      	movs	r0, #0
}
 8003022:	bd38      	pop	{r3, r4, r5, pc}
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8003024:	68c3      	ldr	r3, [r0, #12]
 8003026:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800302a:	60c3      	str	r3, [r0, #12]
  uint32_t ms = 0U;
 800302c:	2400      	movs	r4, #0
      HAL_Delay(1U);
 800302e:	2001      	movs	r0, #1
 8003030:	f7fd fd84 	bl	8000b3c <HAL_Delay>
      ms++;
 8003034:	3401      	adds	r4, #1
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8003036:	4628      	mov	r0, r5
 8003038:	f7ff ffd4 	bl	8002fe4 <USB_GetMode>
 800303c:	2801      	cmp	r0, #1
 800303e:	d0ed      	beq.n	800301c <USB_SetCurrentMode+0x30>
 8003040:	2c31      	cmp	r4, #49	; 0x31
 8003042:	d9f4      	bls.n	800302e <USB_SetCurrentMode+0x42>
 8003044:	e7ea      	b.n	800301c <USB_SetCurrentMode+0x30>
    return HAL_ERROR;
 8003046:	2001      	movs	r0, #1
 8003048:	e7eb      	b.n	8003022 <USB_SetCurrentMode+0x36>
    return HAL_ERROR;
 800304a:	2001      	movs	r0, #1
 800304c:	e7e9      	b.n	8003022 <USB_SetCurrentMode+0x36>

0800304e <USB_ActivateSetup>:
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800304e:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 8003052:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8003056:	f023 0307 	bic.w	r3, r3, #7
 800305a:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800305e:	f8d0 3804 	ldr.w	r3, [r0, #2052]	; 0x804
 8003062:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003066:	f8c0 3804 	str.w	r3, [r0, #2052]	; 0x804
}
 800306a:	2000      	movs	r0, #0
 800306c:	4770      	bx	lr
	...

08003070 <USB_EP0_OutStart>:
{
 8003070:	b410      	push	{r4}
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003072:	6c04      	ldr	r4, [r0, #64]	; 0x40
  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8003074:	4b15      	ldr	r3, [pc, #84]	; (80030cc <USB_EP0_OutStart+0x5c>)
 8003076:	429c      	cmp	r4, r3
 8003078:	d903      	bls.n	8003082 <USB_EP0_OutStart+0x12>
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800307a:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 800307e:	2b00      	cmp	r3, #0
 8003080:	db16      	blt.n	80030b0 <USB_EP0_OutStart+0x40>
  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8003082:	2400      	movs	r4, #0
 8003084:	f8c0 4b10 	str.w	r4, [r0, #2832]	; 0xb10
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8003088:	f8d0 4b10 	ldr.w	r4, [r0, #2832]	; 0xb10
 800308c:	f444 2400 	orr.w	r4, r4, #524288	; 0x80000
 8003090:	f8c0 4b10 	str.w	r4, [r0, #2832]	; 0xb10
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8003094:	f8d0 4b10 	ldr.w	r4, [r0, #2832]	; 0xb10
 8003098:	f044 0418 	orr.w	r4, r4, #24
 800309c:	f8c0 4b10 	str.w	r4, [r0, #2832]	; 0xb10
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80030a0:	f8d0 4b10 	ldr.w	r4, [r0, #2832]	; 0xb10
 80030a4:	f044 44c0 	orr.w	r4, r4, #1610612736	; 0x60000000
 80030a8:	f8c0 4b10 	str.w	r4, [r0, #2832]	; 0xb10
  if (dma == 1U)
 80030ac:	2901      	cmp	r1, #1
 80030ae:	d003      	beq.n	80030b8 <USB_EP0_OutStart+0x48>
}
 80030b0:	2000      	movs	r0, #0
 80030b2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80030b6:	4770      	bx	lr
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80030b8:	f8c0 2b14 	str.w	r2, [r0, #2836]	; 0xb14
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80030bc:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 80030c0:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 80030c4:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
 80030c8:	e7f2      	b.n	80030b0 <USB_EP0_OutStart+0x40>
 80030ca:	bf00      	nop
 80030cc:	4f54300a 	.word	0x4f54300a

080030d0 <makeFreeRtosPriority>:
/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
  
  if (priority != osPriorityError) {
 80030d0:	2884      	cmp	r0, #132	; 0x84
 80030d2:	d001      	beq.n	80030d8 <makeFreeRtosPriority+0x8>
    fpriority += (priority - osPriorityIdle);
 80030d4:	3003      	adds	r0, #3
 80030d6:	4770      	bx	lr
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80030d8:	2000      	movs	r0, #0
  }
  
  return fpriority;
}
 80030da:	4770      	bx	lr

080030dc <inHandlerMode>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80030dc:	f3ef 8005 	mrs	r0, IPSR

/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
  return __get_IPSR() != 0;
}
 80030e0:	3800      	subs	r0, #0
 80030e2:	bf18      	it	ne
 80030e4:	2001      	movne	r0, #1
 80030e6:	4770      	bx	lr

080030e8 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80030e8:	b508      	push	{r3, lr}
  vTaskStartScheduler();
 80030ea:	f000 fa9b 	bl	8003624 <vTaskStartScheduler>
  
  return osOK;
}
 80030ee:	2000      	movs	r0, #0
 80030f0:	bd08      	pop	{r3, pc}

080030f2 <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 80030f2:	b508      	push	{r3, lr}
  if (inHandlerMode()) {
 80030f4:	f7ff fff2 	bl	80030dc <inHandlerMode>
 80030f8:	b110      	cbz	r0, 8003100 <osKernelSysTick+0xe>
    return xTaskGetTickCountFromISR();
 80030fa:	f000 fadf 	bl	80036bc <xTaskGetTickCountFromISR>
  }
  else {
    return xTaskGetTickCount();
  }
}
 80030fe:	bd08      	pop	{r3, pc}
    return xTaskGetTickCount();
 8003100:	f000 fad6 	bl	80036b0 <xTaskGetTickCount>
 8003104:	e7fb      	b.n	80030fe <osKernelSysTick+0xc>

08003106 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8003106:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800310a:	b087      	sub	sp, #28
 800310c:	4604      	mov	r4, r0
 800310e:	460f      	mov	r7, r1
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8003110:	6945      	ldr	r5, [r0, #20]
 8003112:	b1bd      	cbz	r5, 8003144 <osThreadCreate+0x3e>
 8003114:	6986      	ldr	r6, [r0, #24]
 8003116:	b1ae      	cbz	r6, 8003144 <osThreadCreate+0x3e>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003118:	f8d0 8004 	ldr.w	r8, [r0, #4]
 800311c:	f8d0 9000 	ldr.w	r9, [r0]
 8003120:	f9b0 0008 	ldrsh.w	r0, [r0, #8]
 8003124:	f7ff ffd4 	bl	80030d0 <makeFreeRtosPriority>
 8003128:	9602      	str	r6, [sp, #8]
 800312a:	9501      	str	r5, [sp, #4]
 800312c:	9000      	str	r0, [sp, #0]
 800312e:	463b      	mov	r3, r7
 8003130:	6922      	ldr	r2, [r4, #16]
 8003132:	4649      	mov	r1, r9
 8003134:	4640      	mov	r0, r8
 8003136:	f000 fa07 	bl	8003548 <xTaskCreateStatic>
 800313a:	9005      	str	r0, [sp, #20]
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800313c:	9805      	ldr	r0, [sp, #20]
}
 800313e:	b007      	add	sp, #28
 8003140:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003144:	6865      	ldr	r5, [r4, #4]
 8003146:	6826      	ldr	r6, [r4, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8003148:	f8d4 8010 	ldr.w	r8, [r4, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800314c:	f9b4 0008 	ldrsh.w	r0, [r4, #8]
 8003150:	f7ff ffbe 	bl	80030d0 <makeFreeRtosPriority>
 8003154:	ab05      	add	r3, sp, #20
 8003156:	9301      	str	r3, [sp, #4]
 8003158:	9000      	str	r0, [sp, #0]
 800315a:	463b      	mov	r3, r7
 800315c:	fa1f f288 	uxth.w	r2, r8
 8003160:	4631      	mov	r1, r6
 8003162:	4628      	mov	r0, r5
 8003164:	f000 fa2a 	bl	80035bc <xTaskCreate>
 8003168:	2801      	cmp	r0, #1
 800316a:	d0e7      	beq.n	800313c <osThreadCreate+0x36>
      return NULL;
 800316c:	2000      	movs	r0, #0
 800316e:	e7e6      	b.n	800313e <osThreadCreate+0x38>

08003170 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8003170:	b508      	push	{r3, lr}
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8003172:	b900      	cbnz	r0, 8003176 <osDelay+0x6>
 8003174:	2001      	movs	r0, #1
 8003176:	f000 fbb1 	bl	80038dc <vTaskDelay>
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800317a:	2000      	movs	r0, #0
 800317c:	bd08      	pop	{r3, pc}

0800317e <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800317e:	f100 0308 	add.w	r3, r0, #8
 8003182:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003184:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003188:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800318a:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800318c:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800318e:	2300      	movs	r3, #0
 8003190:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003192:	4770      	bx	lr

08003194 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003194:	2300      	movs	r3, #0
 8003196:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003198:	4770      	bx	lr

0800319a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 800319a:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800319c:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800319e:	689a      	ldr	r2, [r3, #8]
 80031a0:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80031a2:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80031a4:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80031a6:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 80031a8:	6803      	ldr	r3, [r0, #0]
 80031aa:	3301      	adds	r3, #1
 80031ac:	6003      	str	r3, [r0, #0]
}
 80031ae:	4770      	bx	lr

080031b0 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80031b0:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80031b2:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80031b4:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 80031b8:	d011      	beq.n	80031de <vListInsert+0x2e>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80031ba:	f100 0308 	add.w	r3, r0, #8
 80031be:	461c      	mov	r4, r3
 80031c0:	685b      	ldr	r3, [r3, #4]
 80031c2:	681a      	ldr	r2, [r3, #0]
 80031c4:	42aa      	cmp	r2, r5
 80031c6:	d9fa      	bls.n	80031be <vListInsert+0xe>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80031c8:	6863      	ldr	r3, [r4, #4]
 80031ca:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80031cc:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80031ce:	608c      	str	r4, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 80031d0:	6061      	str	r1, [r4, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80031d2:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 80031d4:	6803      	ldr	r3, [r0, #0]
 80031d6:	3301      	adds	r3, #1
 80031d8:	6003      	str	r3, [r0, #0]
}
 80031da:	bc30      	pop	{r4, r5}
 80031dc:	4770      	bx	lr
		pxIterator = pxList->xListEnd.pxPrevious;
 80031de:	6904      	ldr	r4, [r0, #16]
 80031e0:	e7f2      	b.n	80031c8 <vListInsert+0x18>

080031e2 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80031e2:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80031e4:	6841      	ldr	r1, [r0, #4]
 80031e6:	6882      	ldr	r2, [r0, #8]
 80031e8:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80031ea:	6841      	ldr	r1, [r0, #4]
 80031ec:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80031ee:	685a      	ldr	r2, [r3, #4]
 80031f0:	4282      	cmp	r2, r0
 80031f2:	d006      	beq.n	8003202 <uxListRemove+0x20>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80031f4:	2200      	movs	r2, #0
 80031f6:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 80031f8:	681a      	ldr	r2, [r3, #0]
 80031fa:	3a01      	subs	r2, #1
 80031fc:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80031fe:	6818      	ldr	r0, [r3, #0]
}
 8003200:	4770      	bx	lr
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003202:	6882      	ldr	r2, [r0, #8]
 8003204:	605a      	str	r2, [r3, #4]
 8003206:	e7f5      	b.n	80031f4 <uxListRemove+0x12>

08003208 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003208:	4b08      	ldr	r3, [pc, #32]	; (800322c <prvResetNextTaskUnblockTime+0x24>)
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	b923      	cbnz	r3, 800321a <prvResetNextTaskUnblockTime+0x12>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003210:	4b07      	ldr	r3, [pc, #28]	; (8003230 <prvResetNextTaskUnblockTime+0x28>)
 8003212:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003216:	601a      	str	r2, [r3, #0]
 8003218:	4770      	bx	lr
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800321a:	4b04      	ldr	r3, [pc, #16]	; (800322c <prvResetNextTaskUnblockTime+0x24>)
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	68db      	ldr	r3, [r3, #12]
 8003220:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003222:	685a      	ldr	r2, [r3, #4]
 8003224:	4b02      	ldr	r3, [pc, #8]	; (8003230 <prvResetNextTaskUnblockTime+0x28>)
 8003226:	601a      	str	r2, [r3, #0]
	}
}
 8003228:	4770      	bx	lr
 800322a:	bf00      	nop
 800322c:	200004a4 	.word	0x200004a4
 8003230:	20000574 	.word	0x20000574

08003234 <prvInitialiseNewTask>:
{
 8003234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003238:	4680      	mov	r8, r0
 800323a:	4699      	mov	r9, r3
 800323c:	9e08      	ldr	r6, [sp, #32]
 800323e:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
 8003242:	9c0a      	ldr	r4, [sp, #40]	; 0x28
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003244:	6b27      	ldr	r7, [r4, #48]	; 0x30
 8003246:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 800324a:	3a01      	subs	r2, #1
 800324c:	eb07 0782 	add.w	r7, r7, r2, lsl #2
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003250:	f027 0707 	bic.w	r7, r7, #7
	if( pcName != NULL )
 8003254:	2900      	cmp	r1, #0
 8003256:	d03e      	beq.n	80032d6 <prvInitialiseNewTask+0xa2>
 8003258:	460d      	mov	r5, r1
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800325a:	2200      	movs	r2, #0
 800325c:	2a0f      	cmp	r2, #15
 800325e:	d807      	bhi.n	8003270 <prvInitialiseNewTask+0x3c>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003260:	5ca9      	ldrb	r1, [r5, r2]
 8003262:	18a3      	adds	r3, r4, r2
 8003264:	f883 1034 	strb.w	r1, [r3, #52]	; 0x34
			if( pcName[ x ] == ( char ) 0x00 )
 8003268:	5cab      	ldrb	r3, [r5, r2]
 800326a:	b10b      	cbz	r3, 8003270 <prvInitialiseNewTask+0x3c>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800326c:	3201      	adds	r2, #1
 800326e:	e7f5      	b.n	800325c <prvInitialiseNewTask+0x28>
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003270:	2300      	movs	r3, #0
 8003272:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003276:	2e06      	cmp	r6, #6
 8003278:	d900      	bls.n	800327c <prvInitialiseNewTask+0x48>
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800327a:	2606      	movs	r6, #6
	pxNewTCB->uxPriority = uxPriority;
 800327c:	62e6      	str	r6, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 800327e:	6466      	str	r6, [r4, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8003280:	2500      	movs	r5, #0
 8003282:	64a5      	str	r5, [r4, #72]	; 0x48
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003284:	1d20      	adds	r0, r4, #4
 8003286:	f7ff ff85 	bl	8003194 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800328a:	f104 0018 	add.w	r0, r4, #24
 800328e:	f7ff ff81 	bl	8003194 <vListInitialiseItem>
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003292:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003294:	f1c6 0607 	rsb	r6, r6, #7
 8003298:	61a6      	str	r6, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800329a:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->ulNotifiedValue = 0;
 800329c:	f8c4 50ac 	str.w	r5, [r4, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80032a0:	f884 50b0 	strb.w	r5, [r4, #176]	; 0xb0
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80032a4:	2260      	movs	r2, #96	; 0x60
 80032a6:	4629      	mov	r1, r5
 80032a8:	f104 004c 	add.w	r0, r4, #76	; 0x4c
 80032ac:	f002 f831 	bl	8005312 <memset>
 80032b0:	4b0b      	ldr	r3, [pc, #44]	; (80032e0 <prvInitialiseNewTask+0xac>)
 80032b2:	6523      	str	r3, [r4, #80]	; 0x50
 80032b4:	4b0b      	ldr	r3, [pc, #44]	; (80032e4 <prvInitialiseNewTask+0xb0>)
 80032b6:	6563      	str	r3, [r4, #84]	; 0x54
 80032b8:	4b0b      	ldr	r3, [pc, #44]	; (80032e8 <prvInitialiseNewTask+0xb4>)
 80032ba:	65a3      	str	r3, [r4, #88]	; 0x58
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80032bc:	464a      	mov	r2, r9
 80032be:	4641      	mov	r1, r8
 80032c0:	4638      	mov	r0, r7
 80032c2:	f000 fbc1 	bl	8003a48 <pxPortInitialiseStack>
 80032c6:	6020      	str	r0, [r4, #0]
	if( pxCreatedTask != NULL )
 80032c8:	f1ba 0f00 	cmp.w	sl, #0
 80032cc:	d001      	beq.n	80032d2 <prvInitialiseNewTask+0x9e>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80032ce:	f8ca 4000 	str.w	r4, [sl]
}
 80032d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80032d6:	2300      	movs	r3, #0
 80032d8:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
 80032dc:	e7cb      	b.n	8003276 <prvInitialiseNewTask+0x42>
 80032de:	bf00      	nop
 80032e0:	08006668 	.word	0x08006668
 80032e4:	08006688 	.word	0x08006688
 80032e8:	08006648 	.word	0x08006648

080032ec <prvInitialiseTaskLists>:
{
 80032ec:	b538      	push	{r3, r4, r5, lr}
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80032ee:	2400      	movs	r4, #0
 80032f0:	e007      	b.n	8003302 <prvInitialiseTaskLists+0x16>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80032f2:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 80032f6:	0093      	lsls	r3, r2, #2
 80032f8:	480e      	ldr	r0, [pc, #56]	; (8003334 <prvInitialiseTaskLists+0x48>)
 80032fa:	4418      	add	r0, r3
 80032fc:	f7ff ff3f 	bl	800317e <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003300:	3401      	adds	r4, #1
 8003302:	2c06      	cmp	r4, #6
 8003304:	d9f5      	bls.n	80032f2 <prvInitialiseTaskLists+0x6>
	vListInitialise( &xDelayedTaskList1 );
 8003306:	4d0c      	ldr	r5, [pc, #48]	; (8003338 <prvInitialiseTaskLists+0x4c>)
 8003308:	4628      	mov	r0, r5
 800330a:	f7ff ff38 	bl	800317e <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800330e:	4c0b      	ldr	r4, [pc, #44]	; (800333c <prvInitialiseTaskLists+0x50>)
 8003310:	4620      	mov	r0, r4
 8003312:	f7ff ff34 	bl	800317e <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003316:	480a      	ldr	r0, [pc, #40]	; (8003340 <prvInitialiseTaskLists+0x54>)
 8003318:	f7ff ff31 	bl	800317e <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
 800331c:	4809      	ldr	r0, [pc, #36]	; (8003344 <prvInitialiseTaskLists+0x58>)
 800331e:	f7ff ff2e 	bl	800317e <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
 8003322:	4809      	ldr	r0, [pc, #36]	; (8003348 <prvInitialiseTaskLists+0x5c>)
 8003324:	f7ff ff2b 	bl	800317e <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
 8003328:	4b08      	ldr	r3, [pc, #32]	; (800334c <prvInitialiseTaskLists+0x60>)
 800332a:	601d      	str	r5, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800332c:	4b08      	ldr	r3, [pc, #32]	; (8003350 <prvInitialiseTaskLists+0x64>)
 800332e:	601c      	str	r4, [r3, #0]
}
 8003330:	bd38      	pop	{r3, r4, r5, pc}
 8003332:	bf00      	nop
 8003334:	200004ac 	.word	0x200004ac
 8003338:	2000054c 	.word	0x2000054c
 800333c:	20000560 	.word	0x20000560
 8003340:	20000580 	.word	0x20000580
 8003344:	200005ac 	.word	0x200005ac
 8003348:	20000598 	.word	0x20000598
 800334c:	200004a4 	.word	0x200004a4
 8003350:	200004a8 	.word	0x200004a8

08003354 <prvAddNewTaskToReadyList>:
{
 8003354:	b510      	push	{r4, lr}
 8003356:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 8003358:	f000 fba4 	bl	8003aa4 <vPortEnterCritical>
		uxCurrentNumberOfTasks++;
 800335c:	4a20      	ldr	r2, [pc, #128]	; (80033e0 <prvAddNewTaskToReadyList+0x8c>)
 800335e:	6813      	ldr	r3, [r2, #0]
 8003360:	3301      	adds	r3, #1
 8003362:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003364:	4b1f      	ldr	r3, [pc, #124]	; (80033e4 <prvAddNewTaskToReadyList+0x90>)
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	b15b      	cbz	r3, 8003382 <prvAddNewTaskToReadyList+0x2e>
			if( xSchedulerRunning == pdFALSE )
 800336a:	4b1f      	ldr	r3, [pc, #124]	; (80033e8 <prvAddNewTaskToReadyList+0x94>)
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	b96b      	cbnz	r3, 800338c <prvAddNewTaskToReadyList+0x38>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003370:	4b1c      	ldr	r3, [pc, #112]	; (80033e4 <prvAddNewTaskToReadyList+0x90>)
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003376:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8003378:	429a      	cmp	r2, r3
 800337a:	d807      	bhi.n	800338c <prvAddNewTaskToReadyList+0x38>
					pxCurrentTCB = pxNewTCB;
 800337c:	4b19      	ldr	r3, [pc, #100]	; (80033e4 <prvAddNewTaskToReadyList+0x90>)
 800337e:	601c      	str	r4, [r3, #0]
 8003380:	e004      	b.n	800338c <prvAddNewTaskToReadyList+0x38>
			pxCurrentTCB = pxNewTCB;
 8003382:	4b18      	ldr	r3, [pc, #96]	; (80033e4 <prvAddNewTaskToReadyList+0x90>)
 8003384:	601c      	str	r4, [r3, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003386:	6813      	ldr	r3, [r2, #0]
 8003388:	2b01      	cmp	r3, #1
 800338a:	d026      	beq.n	80033da <prvAddNewTaskToReadyList+0x86>
		uxTaskNumber++;
 800338c:	4a17      	ldr	r2, [pc, #92]	; (80033ec <prvAddNewTaskToReadyList+0x98>)
 800338e:	6813      	ldr	r3, [r2, #0]
 8003390:	3301      	adds	r3, #1
 8003392:	6013      	str	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 8003394:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8003396:	2301      	movs	r3, #1
 8003398:	4083      	lsls	r3, r0
 800339a:	4a15      	ldr	r2, [pc, #84]	; (80033f0 <prvAddNewTaskToReadyList+0x9c>)
 800339c:	6811      	ldr	r1, [r2, #0]
 800339e:	430b      	orrs	r3, r1
 80033a0:	6013      	str	r3, [r2, #0]
 80033a2:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80033a6:	1d21      	adds	r1, r4, #4
 80033a8:	4b12      	ldr	r3, [pc, #72]	; (80033f4 <prvAddNewTaskToReadyList+0xa0>)
 80033aa:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80033ae:	f7ff fef4 	bl	800319a <vListInsertEnd>
	taskEXIT_CRITICAL();
 80033b2:	f000 fb99 	bl	8003ae8 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 80033b6:	4b0c      	ldr	r3, [pc, #48]	; (80033e8 <prvAddNewTaskToReadyList+0x94>)
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	b16b      	cbz	r3, 80033d8 <prvAddNewTaskToReadyList+0x84>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80033bc:	4b09      	ldr	r3, [pc, #36]	; (80033e4 <prvAddNewTaskToReadyList+0x90>)
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80033c2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80033c4:	429a      	cmp	r2, r3
 80033c6:	d207      	bcs.n	80033d8 <prvAddNewTaskToReadyList+0x84>
			taskYIELD_IF_USING_PREEMPTION();
 80033c8:	4b0b      	ldr	r3, [pc, #44]	; (80033f8 <prvAddNewTaskToReadyList+0xa4>)
 80033ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80033ce:	601a      	str	r2, [r3, #0]
 80033d0:	f3bf 8f4f 	dsb	sy
 80033d4:	f3bf 8f6f 	isb	sy
}
 80033d8:	bd10      	pop	{r4, pc}
				prvInitialiseTaskLists();
 80033da:	f7ff ff87 	bl	80032ec <prvInitialiseTaskLists>
 80033de:	e7d5      	b.n	800338c <prvAddNewTaskToReadyList+0x38>
 80033e0:	20000538 	.word	0x20000538
 80033e4:	200004a0 	.word	0x200004a0
 80033e8:	20000594 	.word	0x20000594
 80033ec:	20000544 	.word	0x20000544
 80033f0:	20000548 	.word	0x20000548
 80033f4:	200004ac 	.word	0x200004ac
 80033f8:	e000ed04 	.word	0xe000ed04

080033fc <prvDeleteTCB>:
	{
 80033fc:	b510      	push	{r4, lr}
 80033fe:	4604      	mov	r4, r0
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8003400:	304c      	adds	r0, #76	; 0x4c
 8003402:	f002 f825 	bl	8005450 <_reclaim_reent>
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8003406:	f894 30b1 	ldrb.w	r3, [r4, #177]	; 0xb1
 800340a:	b163      	cbz	r3, 8003426 <prvDeleteTCB+0x2a>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800340c:	2b01      	cmp	r3, #1
 800340e:	d011      	beq.n	8003434 <prvDeleteTCB+0x38>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8003410:	2b02      	cmp	r3, #2
 8003412:	d00e      	beq.n	8003432 <prvDeleteTCB+0x36>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003414:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003418:	f383 8811 	msr	BASEPRI, r3
 800341c:	f3bf 8f6f 	isb	sy
 8003420:	f3bf 8f4f 	dsb	sy
 8003424:	e7fe      	b.n	8003424 <prvDeleteTCB+0x28>
				vPortFree( pxTCB->pxStack );
 8003426:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8003428:	f000 fd70 	bl	8003f0c <vPortFree>
				vPortFree( pxTCB );
 800342c:	4620      	mov	r0, r4
 800342e:	f000 fd6d 	bl	8003f0c <vPortFree>
	}
 8003432:	bd10      	pop	{r4, pc}
				vPortFree( pxTCB );
 8003434:	4620      	mov	r0, r4
 8003436:	f000 fd69 	bl	8003f0c <vPortFree>
 800343a:	e7fa      	b.n	8003432 <prvDeleteTCB+0x36>

0800343c <prvCheckTasksWaitingTermination>:
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800343c:	4b0f      	ldr	r3, [pc, #60]	; (800347c <prvCheckTasksWaitingTermination+0x40>)
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	b1d3      	cbz	r3, 8003478 <prvCheckTasksWaitingTermination+0x3c>
{
 8003442:	b510      	push	{r4, lr}
			taskENTER_CRITICAL();
 8003444:	f000 fb2e 	bl	8003aa4 <vPortEnterCritical>
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003448:	4b0d      	ldr	r3, [pc, #52]	; (8003480 <prvCheckTasksWaitingTermination+0x44>)
 800344a:	68db      	ldr	r3, [r3, #12]
 800344c:	68dc      	ldr	r4, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800344e:	1d20      	adds	r0, r4, #4
 8003450:	f7ff fec7 	bl	80031e2 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8003454:	4a0b      	ldr	r2, [pc, #44]	; (8003484 <prvCheckTasksWaitingTermination+0x48>)
 8003456:	6813      	ldr	r3, [r2, #0]
 8003458:	3b01      	subs	r3, #1
 800345a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800345c:	4a07      	ldr	r2, [pc, #28]	; (800347c <prvCheckTasksWaitingTermination+0x40>)
 800345e:	6813      	ldr	r3, [r2, #0]
 8003460:	3b01      	subs	r3, #1
 8003462:	6013      	str	r3, [r2, #0]
			taskEXIT_CRITICAL();
 8003464:	f000 fb40 	bl	8003ae8 <vPortExitCritical>
			prvDeleteTCB( pxTCB );
 8003468:	4620      	mov	r0, r4
 800346a:	f7ff ffc7 	bl	80033fc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800346e:	4b03      	ldr	r3, [pc, #12]	; (800347c <prvCheckTasksWaitingTermination+0x40>)
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	2b00      	cmp	r3, #0
 8003474:	d1e6      	bne.n	8003444 <prvCheckTasksWaitingTermination+0x8>
}
 8003476:	bd10      	pop	{r4, pc}
 8003478:	4770      	bx	lr
 800347a:	bf00      	nop
 800347c:	2000053c 	.word	0x2000053c
 8003480:	200005ac 	.word	0x200005ac
 8003484:	20000538 	.word	0x20000538

08003488 <prvIdleTask>:
{
 8003488:	b508      	push	{r3, lr}
		prvCheckTasksWaitingTermination();
 800348a:	f7ff ffd7 	bl	800343c <prvCheckTasksWaitingTermination>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800348e:	4b06      	ldr	r3, [pc, #24]	; (80034a8 <prvIdleTask+0x20>)
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	2b01      	cmp	r3, #1
 8003494:	d9f9      	bls.n	800348a <prvIdleTask+0x2>
				taskYIELD();
 8003496:	4b05      	ldr	r3, [pc, #20]	; (80034ac <prvIdleTask+0x24>)
 8003498:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800349c:	601a      	str	r2, [r3, #0]
 800349e:	f3bf 8f4f 	dsb	sy
 80034a2:	f3bf 8f6f 	isb	sy
 80034a6:	e7f0      	b.n	800348a <prvIdleTask+0x2>
 80034a8:	200004ac 	.word	0x200004ac
 80034ac:	e000ed04 	.word	0xe000ed04

080034b0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80034b0:	b570      	push	{r4, r5, r6, lr}
 80034b2:	4604      	mov	r4, r0
 80034b4:	460d      	mov	r5, r1
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80034b6:	4b1d      	ldr	r3, [pc, #116]	; (800352c <prvAddCurrentTaskToDelayedList+0x7c>)
 80034b8:	681e      	ldr	r6, [r3, #0]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80034ba:	4b1d      	ldr	r3, [pc, #116]	; (8003530 <prvAddCurrentTaskToDelayedList+0x80>)
 80034bc:	6818      	ldr	r0, [r3, #0]
 80034be:	3004      	adds	r0, #4
 80034c0:	f7ff fe8f 	bl	80031e2 <uxListRemove>
 80034c4:	b950      	cbnz	r0, 80034dc <prvAddCurrentTaskToDelayedList+0x2c>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80034c6:	4b1a      	ldr	r3, [pc, #104]	; (8003530 <prvAddCurrentTaskToDelayedList+0x80>)
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80034cc:	2301      	movs	r3, #1
 80034ce:	fa03 f202 	lsl.w	r2, r3, r2
 80034d2:	4918      	ldr	r1, [pc, #96]	; (8003534 <prvAddCurrentTaskToDelayedList+0x84>)
 80034d4:	680b      	ldr	r3, [r1, #0]
 80034d6:	ea23 0302 	bic.w	r3, r3, r2
 80034da:	600b      	str	r3, [r1, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80034dc:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
 80034e0:	d00d      	beq.n	80034fe <prvAddCurrentTaskToDelayedList+0x4e>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
 80034e2:	4434      	add	r4, r6

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80034e4:	4b12      	ldr	r3, [pc, #72]	; (8003530 <prvAddCurrentTaskToDelayedList+0x80>)
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	605c      	str	r4, [r3, #4]

			if( xTimeToWake < xConstTickCount )
 80034ea:	42a6      	cmp	r6, r4
 80034ec:	d910      	bls.n	8003510 <prvAddCurrentTaskToDelayedList+0x60>
			{
				/* Wake time has overflowed.  Place this item in the overflow
				list. */
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80034ee:	4b12      	ldr	r3, [pc, #72]	; (8003538 <prvAddCurrentTaskToDelayedList+0x88>)
 80034f0:	6818      	ldr	r0, [r3, #0]
 80034f2:	4b0f      	ldr	r3, [pc, #60]	; (8003530 <prvAddCurrentTaskToDelayedList+0x80>)
 80034f4:	6819      	ldr	r1, [r3, #0]
 80034f6:	3104      	adds	r1, #4
 80034f8:	f7ff fe5a 	bl	80031b0 <vListInsert>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80034fc:	bd70      	pop	{r4, r5, r6, pc}
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80034fe:	2d00      	cmp	r5, #0
 8003500:	d0ef      	beq.n	80034e2 <prvAddCurrentTaskToDelayedList+0x32>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003502:	4b0b      	ldr	r3, [pc, #44]	; (8003530 <prvAddCurrentTaskToDelayedList+0x80>)
 8003504:	6819      	ldr	r1, [r3, #0]
 8003506:	3104      	adds	r1, #4
 8003508:	480c      	ldr	r0, [pc, #48]	; (800353c <prvAddCurrentTaskToDelayedList+0x8c>)
 800350a:	f7ff fe46 	bl	800319a <vListInsertEnd>
 800350e:	e7f5      	b.n	80034fc <prvAddCurrentTaskToDelayedList+0x4c>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003510:	4b0b      	ldr	r3, [pc, #44]	; (8003540 <prvAddCurrentTaskToDelayedList+0x90>)
 8003512:	6818      	ldr	r0, [r3, #0]
 8003514:	4b06      	ldr	r3, [pc, #24]	; (8003530 <prvAddCurrentTaskToDelayedList+0x80>)
 8003516:	6819      	ldr	r1, [r3, #0]
 8003518:	3104      	adds	r1, #4
 800351a:	f7ff fe49 	bl	80031b0 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800351e:	4b09      	ldr	r3, [pc, #36]	; (8003544 <prvAddCurrentTaskToDelayedList+0x94>)
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	42a3      	cmp	r3, r4
 8003524:	d9ea      	bls.n	80034fc <prvAddCurrentTaskToDelayedList+0x4c>
					xNextTaskUnblockTime = xTimeToWake;
 8003526:	4b07      	ldr	r3, [pc, #28]	; (8003544 <prvAddCurrentTaskToDelayedList+0x94>)
 8003528:	601c      	str	r4, [r3, #0]
}
 800352a:	e7e7      	b.n	80034fc <prvAddCurrentTaskToDelayedList+0x4c>
 800352c:	200005c0 	.word	0x200005c0
 8003530:	200004a0 	.word	0x200004a0
 8003534:	20000548 	.word	0x20000548
 8003538:	200004a8 	.word	0x200004a8
 800353c:	20000598 	.word	0x20000598
 8003540:	200004a4 	.word	0x200004a4
 8003544:	20000574 	.word	0x20000574

08003548 <xTaskCreateStatic>:
	{
 8003548:	b570      	push	{r4, r5, r6, lr}
 800354a:	b086      	sub	sp, #24
 800354c:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 800354e:	9c0c      	ldr	r4, [sp, #48]	; 0x30
		configASSERT( puxStackBuffer != NULL );
 8003550:	b175      	cbz	r5, 8003570 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8003552:	b1b4      	cbz	r4, 8003582 <xTaskCreateStatic+0x3a>
			volatile size_t xSize = sizeof( StaticTask_t );
 8003554:	26b4      	movs	r6, #180	; 0xb4
 8003556:	9604      	str	r6, [sp, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003558:	9e04      	ldr	r6, [sp, #16]
 800355a:	2eb4      	cmp	r6, #180	; 0xb4
 800355c:	d01a      	beq.n	8003594 <xTaskCreateStatic+0x4c>
 800355e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003562:	f383 8811 	msr	BASEPRI, r3
 8003566:	f3bf 8f6f 	isb	sy
 800356a:	f3bf 8f4f 	dsb	sy
 800356e:	e7fe      	b.n	800356e <xTaskCreateStatic+0x26>
 8003570:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003574:	f383 8811 	msr	BASEPRI, r3
 8003578:	f3bf 8f6f 	isb	sy
 800357c:	f3bf 8f4f 	dsb	sy
		configASSERT( puxStackBuffer != NULL );
 8003580:	e7fe      	b.n	8003580 <xTaskCreateStatic+0x38>
 8003582:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003586:	f383 8811 	msr	BASEPRI, r3
 800358a:	f3bf 8f6f 	isb	sy
 800358e:	f3bf 8f4f 	dsb	sy
		configASSERT( pxTaskBuffer != NULL );
 8003592:	e7fe      	b.n	8003592 <xTaskCreateStatic+0x4a>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8003594:	9e04      	ldr	r6, [sp, #16]
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003596:	6325      	str	r5, [r4, #48]	; 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003598:	2502      	movs	r5, #2
 800359a:	f884 50b1 	strb.w	r5, [r4, #177]	; 0xb1
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800359e:	2500      	movs	r5, #0
 80035a0:	9503      	str	r5, [sp, #12]
 80035a2:	9402      	str	r4, [sp, #8]
 80035a4:	ad05      	add	r5, sp, #20
 80035a6:	9501      	str	r5, [sp, #4]
 80035a8:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80035aa:	9500      	str	r5, [sp, #0]
 80035ac:	f7ff fe42 	bl	8003234 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80035b0:	4620      	mov	r0, r4
 80035b2:	f7ff fecf 	bl	8003354 <prvAddNewTaskToReadyList>
	}
 80035b6:	9805      	ldr	r0, [sp, #20]
 80035b8:	b006      	add	sp, #24
 80035ba:	bd70      	pop	{r4, r5, r6, pc}

080035bc <xTaskCreate>:
	{
 80035bc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80035c0:	b085      	sub	sp, #20
 80035c2:	4607      	mov	r7, r0
 80035c4:	4688      	mov	r8, r1
 80035c6:	4614      	mov	r4, r2
 80035c8:	461e      	mov	r6, r3
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80035ca:	0090      	lsls	r0, r2, #2
 80035cc:	f000 fc20 	bl	8003e10 <pvPortMalloc>
			if( pxStack != NULL )
 80035d0:	b300      	cbz	r0, 8003614 <xTaskCreate+0x58>
 80035d2:	4681      	mov	r9, r0
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80035d4:	20b4      	movs	r0, #180	; 0xb4
 80035d6:	f000 fc1b 	bl	8003e10 <pvPortMalloc>
				if( pxNewTCB != NULL )
 80035da:	4605      	mov	r5, r0
 80035dc:	b1b0      	cbz	r0, 800360c <xTaskCreate+0x50>
					pxNewTCB->pxStack = pxStack;
 80035de:	f8c0 9030 	str.w	r9, [r0, #48]	; 0x30
		if( pxNewTCB != NULL )
 80035e2:	b1e5      	cbz	r5, 800361e <xTaskCreate+0x62>
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80035e4:	2300      	movs	r3, #0
 80035e6:	f885 30b1 	strb.w	r3, [r5, #177]	; 0xb1
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80035ea:	9303      	str	r3, [sp, #12]
 80035ec:	9502      	str	r5, [sp, #8]
 80035ee:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80035f0:	9301      	str	r3, [sp, #4]
 80035f2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80035f4:	9300      	str	r3, [sp, #0]
 80035f6:	4633      	mov	r3, r6
 80035f8:	4622      	mov	r2, r4
 80035fa:	4641      	mov	r1, r8
 80035fc:	4638      	mov	r0, r7
 80035fe:	f7ff fe19 	bl	8003234 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003602:	4628      	mov	r0, r5
 8003604:	f7ff fea6 	bl	8003354 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003608:	2001      	movs	r0, #1
 800360a:	e005      	b.n	8003618 <xTaskCreate+0x5c>
					vPortFree( pxStack );
 800360c:	4648      	mov	r0, r9
 800360e:	f000 fc7d 	bl	8003f0c <vPortFree>
 8003612:	e7e6      	b.n	80035e2 <xTaskCreate+0x26>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003614:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	}
 8003618:	b005      	add	sp, #20
 800361a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800361e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
		return xReturn;
 8003622:	e7f9      	b.n	8003618 <xTaskCreate+0x5c>

08003624 <vTaskStartScheduler>:
{
 8003624:	b510      	push	{r4, lr}
 8003626:	b088      	sub	sp, #32
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003628:	2400      	movs	r4, #0
 800362a:	9405      	str	r4, [sp, #20]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800362c:	9406      	str	r4, [sp, #24]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800362e:	aa07      	add	r2, sp, #28
 8003630:	a906      	add	r1, sp, #24
 8003632:	a805      	add	r0, sp, #20
 8003634:	f7fc ffa8 	bl	8000588 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003638:	9b05      	ldr	r3, [sp, #20]
 800363a:	9302      	str	r3, [sp, #8]
 800363c:	9b06      	ldr	r3, [sp, #24]
 800363e:	9301      	str	r3, [sp, #4]
 8003640:	9400      	str	r4, [sp, #0]
 8003642:	4623      	mov	r3, r4
 8003644:	9a07      	ldr	r2, [sp, #28]
 8003646:	490f      	ldr	r1, [pc, #60]	; (8003684 <vTaskStartScheduler+0x60>)
 8003648:	480f      	ldr	r0, [pc, #60]	; (8003688 <vTaskStartScheduler+0x64>)
 800364a:	f7ff ff7d 	bl	8003548 <xTaskCreateStatic>
		if( xIdleTaskHandle != NULL )
 800364e:	b1b8      	cbz	r0, 8003680 <vTaskStartScheduler+0x5c>
 8003650:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003654:	f383 8811 	msr	BASEPRI, r3
 8003658:	f3bf 8f6f 	isb	sy
 800365c:	f3bf 8f4f 	dsb	sy
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8003660:	4b0a      	ldr	r3, [pc, #40]	; (800368c <vTaskStartScheduler+0x68>)
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	334c      	adds	r3, #76	; 0x4c
 8003666:	4a0a      	ldr	r2, [pc, #40]	; (8003690 <vTaskStartScheduler+0x6c>)
 8003668:	6013      	str	r3, [r2, #0]
		xNextTaskUnblockTime = portMAX_DELAY;
 800366a:	4b0a      	ldr	r3, [pc, #40]	; (8003694 <vTaskStartScheduler+0x70>)
 800366c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003670:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003672:	4b09      	ldr	r3, [pc, #36]	; (8003698 <vTaskStartScheduler+0x74>)
 8003674:	2201      	movs	r2, #1
 8003676:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003678:	4b08      	ldr	r3, [pc, #32]	; (800369c <vTaskStartScheduler+0x78>)
 800367a:	601c      	str	r4, [r3, #0]
		if( xPortStartScheduler() != pdFALSE )
 800367c:	f000 fab4 	bl	8003be8 <xPortStartScheduler>
}
 8003680:	b008      	add	sp, #32
 8003682:	bd10      	pop	{r4, pc}
 8003684:	080065a8 	.word	0x080065a8
 8003688:	08003489 	.word	0x08003489
 800368c:	200004a0 	.word	0x200004a0
 8003690:	20000168 	.word	0x20000168
 8003694:	20000574 	.word	0x20000574
 8003698:	20000594 	.word	0x20000594
 800369c:	200005c0 	.word	0x200005c0

080036a0 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 80036a0:	4a02      	ldr	r2, [pc, #8]	; (80036ac <vTaskSuspendAll+0xc>)
 80036a2:	6813      	ldr	r3, [r2, #0]
 80036a4:	3301      	adds	r3, #1
 80036a6:	6013      	str	r3, [r2, #0]
}
 80036a8:	4770      	bx	lr
 80036aa:	bf00      	nop
 80036ac:	20000540 	.word	0x20000540

080036b0 <xTaskGetTickCount>:
		xTicks = xTickCount;
 80036b0:	4b01      	ldr	r3, [pc, #4]	; (80036b8 <xTaskGetTickCount+0x8>)
 80036b2:	6818      	ldr	r0, [r3, #0]
}
 80036b4:	4770      	bx	lr
 80036b6:	bf00      	nop
 80036b8:	200005c0 	.word	0x200005c0

080036bc <xTaskGetTickCountFromISR>:
{
 80036bc:	b508      	push	{r3, lr}
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80036be:	f000 fb1b 	bl	8003cf8 <vPortValidateInterruptPriority>
		xReturn = xTickCount;
 80036c2:	4b01      	ldr	r3, [pc, #4]	; (80036c8 <xTaskGetTickCountFromISR+0xc>)
 80036c4:	6818      	ldr	r0, [r3, #0]
}
 80036c6:	bd08      	pop	{r3, pc}
 80036c8:	200005c0 	.word	0x200005c0

080036cc <xTaskIncrementTick>:
{
 80036cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80036ce:	4b3a      	ldr	r3, [pc, #232]	; (80037b8 <xTaskIncrementTick+0xec>)
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d169      	bne.n	80037aa <xTaskIncrementTick+0xde>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80036d6:	4b39      	ldr	r3, [pc, #228]	; (80037bc <xTaskIncrementTick+0xf0>)
 80036d8:	681d      	ldr	r5, [r3, #0]
 80036da:	3501      	adds	r5, #1
		xTickCount = xConstTickCount;
 80036dc:	601d      	str	r5, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80036de:	b9c5      	cbnz	r5, 8003712 <xTaskIncrementTick+0x46>
			taskSWITCH_DELAYED_LISTS();
 80036e0:	4b37      	ldr	r3, [pc, #220]	; (80037c0 <xTaskIncrementTick+0xf4>)
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	b143      	cbz	r3, 80036fa <xTaskIncrementTick+0x2e>
 80036e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036ec:	f383 8811 	msr	BASEPRI, r3
 80036f0:	f3bf 8f6f 	isb	sy
 80036f4:	f3bf 8f4f 	dsb	sy
 80036f8:	e7fe      	b.n	80036f8 <xTaskIncrementTick+0x2c>
 80036fa:	4a31      	ldr	r2, [pc, #196]	; (80037c0 <xTaskIncrementTick+0xf4>)
 80036fc:	6811      	ldr	r1, [r2, #0]
 80036fe:	4b31      	ldr	r3, [pc, #196]	; (80037c4 <xTaskIncrementTick+0xf8>)
 8003700:	6818      	ldr	r0, [r3, #0]
 8003702:	6010      	str	r0, [r2, #0]
 8003704:	6019      	str	r1, [r3, #0]
 8003706:	4a30      	ldr	r2, [pc, #192]	; (80037c8 <xTaskIncrementTick+0xfc>)
 8003708:	6813      	ldr	r3, [r2, #0]
 800370a:	3301      	adds	r3, #1
 800370c:	6013      	str	r3, [r2, #0]
 800370e:	f7ff fd7b 	bl	8003208 <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003712:	4b2e      	ldr	r3, [pc, #184]	; (80037cc <xTaskIncrementTick+0x100>)
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	42ab      	cmp	r3, r5
 8003718:	d93d      	bls.n	8003796 <xTaskIncrementTick+0xca>
BaseType_t xSwitchRequired = pdFALSE;
 800371a:	2400      	movs	r4, #0
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800371c:	4b2c      	ldr	r3, [pc, #176]	; (80037d0 <xTaskIncrementTick+0x104>)
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003722:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8003726:	009a      	lsls	r2, r3, #2
 8003728:	4b2a      	ldr	r3, [pc, #168]	; (80037d4 <xTaskIncrementTick+0x108>)
 800372a:	589b      	ldr	r3, [r3, r2]
 800372c:	2b01      	cmp	r3, #1
 800372e:	d900      	bls.n	8003732 <xTaskIncrementTick+0x66>
				xSwitchRequired = pdTRUE;
 8003730:	2401      	movs	r4, #1
			if( xYieldPending != pdFALSE )
 8003732:	4b29      	ldr	r3, [pc, #164]	; (80037d8 <xTaskIncrementTick+0x10c>)
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	2b00      	cmp	r3, #0
 8003738:	d03c      	beq.n	80037b4 <xTaskIncrementTick+0xe8>
				xSwitchRequired = pdTRUE;
 800373a:	2401      	movs	r4, #1
	return xSwitchRequired;
 800373c:	e03a      	b.n	80037b4 <xTaskIncrementTick+0xe8>
							xSwitchRequired = pdTRUE;
 800373e:	2401      	movs	r4, #1
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003740:	4b1f      	ldr	r3, [pc, #124]	; (80037c0 <xTaskIncrementTick+0xf4>)
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	b343      	cbz	r3, 800379a <xTaskIncrementTick+0xce>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003748:	4b1d      	ldr	r3, [pc, #116]	; (80037c0 <xTaskIncrementTick+0xf4>)
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	68db      	ldr	r3, [r3, #12]
 800374e:	68de      	ldr	r6, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003750:	6873      	ldr	r3, [r6, #4]
					if( xConstTickCount < xItemValue )
 8003752:	429d      	cmp	r5, r3
 8003754:	d326      	bcc.n	80037a4 <xTaskIncrementTick+0xd8>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003756:	1d37      	adds	r7, r6, #4
 8003758:	4638      	mov	r0, r7
 800375a:	f7ff fd42 	bl	80031e2 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800375e:	6ab3      	ldr	r3, [r6, #40]	; 0x28
 8003760:	b11b      	cbz	r3, 800376a <xTaskIncrementTick+0x9e>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003762:	f106 0018 	add.w	r0, r6, #24
 8003766:	f7ff fd3c 	bl	80031e2 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800376a:	6af3      	ldr	r3, [r6, #44]	; 0x2c
 800376c:	2201      	movs	r2, #1
 800376e:	409a      	lsls	r2, r3
 8003770:	491a      	ldr	r1, [pc, #104]	; (80037dc <xTaskIncrementTick+0x110>)
 8003772:	6808      	ldr	r0, [r1, #0]
 8003774:	4302      	orrs	r2, r0
 8003776:	600a      	str	r2, [r1, #0]
 8003778:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800377c:	009a      	lsls	r2, r3, #2
 800377e:	4639      	mov	r1, r7
 8003780:	4814      	ldr	r0, [pc, #80]	; (80037d4 <xTaskIncrementTick+0x108>)
 8003782:	4410      	add	r0, r2
 8003784:	f7ff fd09 	bl	800319a <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003788:	6af2      	ldr	r2, [r6, #44]	; 0x2c
 800378a:	4b11      	ldr	r3, [pc, #68]	; (80037d0 <xTaskIncrementTick+0x104>)
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003790:	429a      	cmp	r2, r3
 8003792:	d2d4      	bcs.n	800373e <xTaskIncrementTick+0x72>
 8003794:	e7d4      	b.n	8003740 <xTaskIncrementTick+0x74>
BaseType_t xSwitchRequired = pdFALSE;
 8003796:	2400      	movs	r4, #0
 8003798:	e7d2      	b.n	8003740 <xTaskIncrementTick+0x74>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800379a:	4b0c      	ldr	r3, [pc, #48]	; (80037cc <xTaskIncrementTick+0x100>)
 800379c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80037a0:	601a      	str	r2, [r3, #0]
					break;
 80037a2:	e7bb      	b.n	800371c <xTaskIncrementTick+0x50>
						xNextTaskUnblockTime = xItemValue;
 80037a4:	4a09      	ldr	r2, [pc, #36]	; (80037cc <xTaskIncrementTick+0x100>)
 80037a6:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80037a8:	e7b8      	b.n	800371c <xTaskIncrementTick+0x50>
		++xPendedTicks;
 80037aa:	4a0d      	ldr	r2, [pc, #52]	; (80037e0 <xTaskIncrementTick+0x114>)
 80037ac:	6813      	ldr	r3, [r2, #0]
 80037ae:	3301      	adds	r3, #1
 80037b0:	6013      	str	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
 80037b2:	2400      	movs	r4, #0
}
 80037b4:	4620      	mov	r0, r4
 80037b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80037b8:	20000540 	.word	0x20000540
 80037bc:	200005c0 	.word	0x200005c0
 80037c0:	200004a4 	.word	0x200004a4
 80037c4:	200004a8 	.word	0x200004a8
 80037c8:	20000578 	.word	0x20000578
 80037cc:	20000574 	.word	0x20000574
 80037d0:	200004a0 	.word	0x200004a0
 80037d4:	200004ac 	.word	0x200004ac
 80037d8:	200005c4 	.word	0x200005c4
 80037dc:	20000548 	.word	0x20000548
 80037e0:	2000057c 	.word	0x2000057c

080037e4 <xTaskResumeAll>:
{
 80037e4:	b538      	push	{r3, r4, r5, lr}
	configASSERT( uxSchedulerSuspended );
 80037e6:	4b34      	ldr	r3, [pc, #208]	; (80038b8 <xTaskResumeAll+0xd4>)
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	b943      	cbnz	r3, 80037fe <xTaskResumeAll+0x1a>
 80037ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037f0:	f383 8811 	msr	BASEPRI, r3
 80037f4:	f3bf 8f6f 	isb	sy
 80037f8:	f3bf 8f4f 	dsb	sy
 80037fc:	e7fe      	b.n	80037fc <xTaskResumeAll+0x18>
	taskENTER_CRITICAL();
 80037fe:	f000 f951 	bl	8003aa4 <vPortEnterCritical>
		--uxSchedulerSuspended;
 8003802:	4b2d      	ldr	r3, [pc, #180]	; (80038b8 <xTaskResumeAll+0xd4>)
 8003804:	681a      	ldr	r2, [r3, #0]
 8003806:	3a01      	subs	r2, #1
 8003808:	601a      	str	r2, [r3, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	2b00      	cmp	r3, #0
 800380e:	d14d      	bne.n	80038ac <xTaskResumeAll+0xc8>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003810:	4b2a      	ldr	r3, [pc, #168]	; (80038bc <xTaskResumeAll+0xd8>)
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	b90b      	cbnz	r3, 800381a <xTaskResumeAll+0x36>
BaseType_t xAlreadyYielded = pdFALSE;
 8003816:	2400      	movs	r4, #0
 8003818:	e049      	b.n	80038ae <xTaskResumeAll+0xca>
TCB_t *pxTCB = NULL;
 800381a:	2400      	movs	r4, #0
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800381c:	4b28      	ldr	r3, [pc, #160]	; (80038c0 <xTaskResumeAll+0xdc>)
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	b31b      	cbz	r3, 800386a <xTaskResumeAll+0x86>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003822:	4b27      	ldr	r3, [pc, #156]	; (80038c0 <xTaskResumeAll+0xdc>)
 8003824:	68db      	ldr	r3, [r3, #12]
 8003826:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003828:	f104 0018 	add.w	r0, r4, #24
 800382c:	f7ff fcd9 	bl	80031e2 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003830:	1d25      	adds	r5, r4, #4
 8003832:	4628      	mov	r0, r5
 8003834:	f7ff fcd5 	bl	80031e2 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003838:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 800383a:	2301      	movs	r3, #1
 800383c:	4083      	lsls	r3, r0
 800383e:	4a21      	ldr	r2, [pc, #132]	; (80038c4 <xTaskResumeAll+0xe0>)
 8003840:	6811      	ldr	r1, [r2, #0]
 8003842:	430b      	orrs	r3, r1
 8003844:	6013      	str	r3, [r2, #0]
 8003846:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800384a:	4629      	mov	r1, r5
 800384c:	4b1e      	ldr	r3, [pc, #120]	; (80038c8 <xTaskResumeAll+0xe4>)
 800384e:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8003852:	f7ff fca2 	bl	800319a <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003856:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8003858:	4b1c      	ldr	r3, [pc, #112]	; (80038cc <xTaskResumeAll+0xe8>)
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800385e:	429a      	cmp	r2, r3
 8003860:	d3dc      	bcc.n	800381c <xTaskResumeAll+0x38>
						xYieldPending = pdTRUE;
 8003862:	4b1b      	ldr	r3, [pc, #108]	; (80038d0 <xTaskResumeAll+0xec>)
 8003864:	2201      	movs	r2, #1
 8003866:	601a      	str	r2, [r3, #0]
 8003868:	e7d8      	b.n	800381c <xTaskResumeAll+0x38>
				if( pxTCB != NULL )
 800386a:	b10c      	cbz	r4, 8003870 <xTaskResumeAll+0x8c>
					prvResetNextTaskUnblockTime();
 800386c:	f7ff fccc 	bl	8003208 <prvResetNextTaskUnblockTime>
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003870:	4b18      	ldr	r3, [pc, #96]	; (80038d4 <xTaskResumeAll+0xf0>)
 8003872:	681c      	ldr	r4, [r3, #0]
					if( xPendedCounts > ( TickType_t ) 0U )
 8003874:	b974      	cbnz	r4, 8003894 <xTaskResumeAll+0xb0>
				if( xYieldPending != pdFALSE )
 8003876:	4b16      	ldr	r3, [pc, #88]	; (80038d0 <xTaskResumeAll+0xec>)
 8003878:	681c      	ldr	r4, [r3, #0]
 800387a:	b1c4      	cbz	r4, 80038ae <xTaskResumeAll+0xca>
					taskYIELD_IF_USING_PREEMPTION();
 800387c:	4b16      	ldr	r3, [pc, #88]	; (80038d8 <xTaskResumeAll+0xf4>)
 800387e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003882:	601a      	str	r2, [r3, #0]
 8003884:	f3bf 8f4f 	dsb	sy
 8003888:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 800388c:	2401      	movs	r4, #1
 800388e:	e00e      	b.n	80038ae <xTaskResumeAll+0xca>
						} while( xPendedCounts > ( TickType_t ) 0U );
 8003890:	3c01      	subs	r4, #1
 8003892:	d007      	beq.n	80038a4 <xTaskResumeAll+0xc0>
							if( xTaskIncrementTick() != pdFALSE )
 8003894:	f7ff ff1a 	bl	80036cc <xTaskIncrementTick>
 8003898:	2800      	cmp	r0, #0
 800389a:	d0f9      	beq.n	8003890 <xTaskResumeAll+0xac>
								xYieldPending = pdTRUE;
 800389c:	4b0c      	ldr	r3, [pc, #48]	; (80038d0 <xTaskResumeAll+0xec>)
 800389e:	2201      	movs	r2, #1
 80038a0:	601a      	str	r2, [r3, #0]
 80038a2:	e7f5      	b.n	8003890 <xTaskResumeAll+0xac>
						xPendedTicks = 0;
 80038a4:	4b0b      	ldr	r3, [pc, #44]	; (80038d4 <xTaskResumeAll+0xf0>)
 80038a6:	2200      	movs	r2, #0
 80038a8:	601a      	str	r2, [r3, #0]
 80038aa:	e7e4      	b.n	8003876 <xTaskResumeAll+0x92>
BaseType_t xAlreadyYielded = pdFALSE;
 80038ac:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 80038ae:	f000 f91b 	bl	8003ae8 <vPortExitCritical>
}
 80038b2:	4620      	mov	r0, r4
 80038b4:	bd38      	pop	{r3, r4, r5, pc}
 80038b6:	bf00      	nop
 80038b8:	20000540 	.word	0x20000540
 80038bc:	20000538 	.word	0x20000538
 80038c0:	20000580 	.word	0x20000580
 80038c4:	20000548 	.word	0x20000548
 80038c8:	200004ac 	.word	0x200004ac
 80038cc:	200004a0 	.word	0x200004a0
 80038d0:	200005c4 	.word	0x200005c4
 80038d4:	2000057c 	.word	0x2000057c
 80038d8:	e000ed04 	.word	0xe000ed04

080038dc <vTaskDelay>:
	{
 80038dc:	b510      	push	{r4, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 80038de:	b1a8      	cbz	r0, 800390c <vTaskDelay+0x30>
 80038e0:	4604      	mov	r4, r0
			configASSERT( uxSchedulerSuspended == 0 );
 80038e2:	4b0f      	ldr	r3, [pc, #60]	; (8003920 <vTaskDelay+0x44>)
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	b143      	cbz	r3, 80038fa <vTaskDelay+0x1e>
 80038e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038ec:	f383 8811 	msr	BASEPRI, r3
 80038f0:	f3bf 8f6f 	isb	sy
 80038f4:	f3bf 8f4f 	dsb	sy
 80038f8:	e7fe      	b.n	80038f8 <vTaskDelay+0x1c>
			vTaskSuspendAll();
 80038fa:	f7ff fed1 	bl	80036a0 <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80038fe:	2100      	movs	r1, #0
 8003900:	4620      	mov	r0, r4
 8003902:	f7ff fdd5 	bl	80034b0 <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 8003906:	f7ff ff6d 	bl	80037e4 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 800390a:	b938      	cbnz	r0, 800391c <vTaskDelay+0x40>
			portYIELD_WITHIN_API();
 800390c:	4b05      	ldr	r3, [pc, #20]	; (8003924 <vTaskDelay+0x48>)
 800390e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003912:	601a      	str	r2, [r3, #0]
 8003914:	f3bf 8f4f 	dsb	sy
 8003918:	f3bf 8f6f 	isb	sy
	}
 800391c:	bd10      	pop	{r4, pc}
 800391e:	bf00      	nop
 8003920:	20000540 	.word	0x20000540
 8003924:	e000ed04 	.word	0xe000ed04

08003928 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003928:	4b22      	ldr	r3, [pc, #136]	; (80039b4 <vTaskSwitchContext+0x8c>)
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	b11b      	cbz	r3, 8003936 <vTaskSwitchContext+0xe>
		xYieldPending = pdTRUE;
 800392e:	4b22      	ldr	r3, [pc, #136]	; (80039b8 <vTaskSwitchContext+0x90>)
 8003930:	2201      	movs	r2, #1
 8003932:	601a      	str	r2, [r3, #0]
 8003934:	4770      	bx	lr
		xYieldPending = pdFALSE;
 8003936:	4b20      	ldr	r3, [pc, #128]	; (80039b8 <vTaskSwitchContext+0x90>)
 8003938:	2200      	movs	r2, #0
 800393a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800393c:	4b1f      	ldr	r3, [pc, #124]	; (80039bc <vTaskSwitchContext+0x94>)
 800393e:	681b      	ldr	r3, [r3, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8003940:	fab3 f383 	clz	r3, r3
 8003944:	b2db      	uxtb	r3, r3
 8003946:	f1c3 031f 	rsb	r3, r3, #31
 800394a:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 800394e:	008a      	lsls	r2, r1, #2
 8003950:	491b      	ldr	r1, [pc, #108]	; (80039c0 <vTaskSwitchContext+0x98>)
 8003952:	588a      	ldr	r2, [r1, r2]
 8003954:	b942      	cbnz	r2, 8003968 <vTaskSwitchContext+0x40>
	__asm volatile
 8003956:	f04f 0350 	mov.w	r3, #80	; 0x50
 800395a:	f383 8811 	msr	BASEPRI, r3
 800395e:	f3bf 8f6f 	isb	sy
 8003962:	f3bf 8f4f 	dsb	sy
 8003966:	e7fe      	b.n	8003966 <vTaskSwitchContext+0x3e>
{
 8003968:	b410      	push	{r4}
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800396a:	4915      	ldr	r1, [pc, #84]	; (80039c0 <vTaskSwitchContext+0x98>)
 800396c:	eb03 0083 	add.w	r0, r3, r3, lsl #2
 8003970:	0082      	lsls	r2, r0, #2
 8003972:	440a      	add	r2, r1
 8003974:	6850      	ldr	r0, [r2, #4]
 8003976:	6840      	ldr	r0, [r0, #4]
 8003978:	6050      	str	r0, [r2, #4]
 800397a:	eb03 0483 	add.w	r4, r3, r3, lsl #2
 800397e:	00a2      	lsls	r2, r4, #2
 8003980:	4614      	mov	r4, r2
 8003982:	3208      	adds	r2, #8
 8003984:	4411      	add	r1, r2
 8003986:	4288      	cmp	r0, r1
 8003988:	d00f      	beq.n	80039aa <vTaskSwitchContext+0x82>
 800398a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800398e:	009a      	lsls	r2, r3, #2
 8003990:	4b0b      	ldr	r3, [pc, #44]	; (80039c0 <vTaskSwitchContext+0x98>)
 8003992:	4413      	add	r3, r2
 8003994:	685b      	ldr	r3, [r3, #4]
 8003996:	68da      	ldr	r2, [r3, #12]
 8003998:	4b0a      	ldr	r3, [pc, #40]	; (80039c4 <vTaskSwitchContext+0x9c>)
 800399a:	601a      	str	r2, [r3, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	334c      	adds	r3, #76	; 0x4c
 80039a0:	4a09      	ldr	r2, [pc, #36]	; (80039c8 <vTaskSwitchContext+0xa0>)
 80039a2:	6013      	str	r3, [r2, #0]
}
 80039a4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80039a8:	4770      	bx	lr
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80039aa:	6840      	ldr	r0, [r0, #4]
 80039ac:	4a04      	ldr	r2, [pc, #16]	; (80039c0 <vTaskSwitchContext+0x98>)
 80039ae:	4422      	add	r2, r4
 80039b0:	6050      	str	r0, [r2, #4]
 80039b2:	e7ea      	b.n	800398a <vTaskSwitchContext+0x62>
 80039b4:	20000540 	.word	0x20000540
 80039b8:	200005c4 	.word	0x200005c4
 80039bc:	20000548 	.word	0x20000548
 80039c0:	200004ac 	.word	0x200004ac
 80039c4:	200004a0 	.word	0x200004a0
 80039c8:	20000168 	.word	0x20000168

080039cc <prvTaskExitError>:
	return pxTopOfStack;
}
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80039cc:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
 80039ce:	2300      	movs	r3, #0
 80039d0:	9301      	str	r3, [sp, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80039d2:	4b0d      	ldr	r3, [pc, #52]	; (8003a08 <prvTaskExitError+0x3c>)
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80039da:	d008      	beq.n	80039ee <prvTaskExitError+0x22>
 80039dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039e0:	f383 8811 	msr	BASEPRI, r3
 80039e4:	f3bf 8f6f 	isb	sy
 80039e8:	f3bf 8f4f 	dsb	sy
 80039ec:	e7fe      	b.n	80039ec <prvTaskExitError+0x20>
 80039ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039f2:	f383 8811 	msr	BASEPRI, r3
 80039f6:	f3bf 8f6f 	isb	sy
 80039fa:	f3bf 8f4f 	dsb	sy
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80039fe:	9b01      	ldr	r3, [sp, #4]
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d0fc      	beq.n	80039fe <prvTaskExitError+0x32>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8003a04:	b002      	add	sp, #8
 8003a06:	4770      	bx	lr
 8003a08:	2000000c 	.word	0x2000000c

08003a0c <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8003a0c:	4808      	ldr	r0, [pc, #32]	; (8003a30 <prvPortStartFirstTask+0x24>)
 8003a0e:	6800      	ldr	r0, [r0, #0]
 8003a10:	6800      	ldr	r0, [r0, #0]
 8003a12:	f380 8808 	msr	MSP, r0
 8003a16:	f04f 0000 	mov.w	r0, #0
 8003a1a:	f380 8814 	msr	CONTROL, r0
 8003a1e:	b662      	cpsie	i
 8003a20:	b661      	cpsie	f
 8003a22:	f3bf 8f4f 	dsb	sy
 8003a26:	f3bf 8f6f 	isb	sy
 8003a2a:	df00      	svc	0
 8003a2c:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8003a2e:	0000      	.short	0x0000
 8003a30:	e000ed08 	.word	0xe000ed08

08003a34 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8003a34:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8003a44 <vPortEnableVFP+0x10>
 8003a38:	6801      	ldr	r1, [r0, #0]
 8003a3a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8003a3e:	6001      	str	r1, [r0, #0]
 8003a40:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8003a42:	0000      	.short	0x0000
 8003a44:	e000ed88 	.word	0xe000ed88

08003a48 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8003a48:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003a4c:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8003a50:	f021 0101 	bic.w	r1, r1, #1
 8003a54:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8003a58:	4b05      	ldr	r3, [pc, #20]	; (8003a70 <pxPortInitialiseStack+0x28>)
 8003a5a:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8003a5e:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8003a62:	f06f 0302 	mvn.w	r3, #2
 8003a66:	f840 3c24 	str.w	r3, [r0, #-36]
}
 8003a6a:	3844      	subs	r0, #68	; 0x44
 8003a6c:	4770      	bx	lr
 8003a6e:	bf00      	nop
 8003a70:	080039cd 	.word	0x080039cd
	...

08003a80 <SVC_Handler>:
	__asm volatile (
 8003a80:	4b07      	ldr	r3, [pc, #28]	; (8003aa0 <pxCurrentTCBConst2>)
 8003a82:	6819      	ldr	r1, [r3, #0]
 8003a84:	6808      	ldr	r0, [r1, #0]
 8003a86:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003a8a:	f380 8809 	msr	PSP, r0
 8003a8e:	f3bf 8f6f 	isb	sy
 8003a92:	f04f 0000 	mov.w	r0, #0
 8003a96:	f380 8811 	msr	BASEPRI, r0
 8003a9a:	4770      	bx	lr
 8003a9c:	f3af 8000 	nop.w

08003aa0 <pxCurrentTCBConst2>:
 8003aa0:	200004a0 	.word	0x200004a0

08003aa4 <vPortEnterCritical>:
 8003aa4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003aa8:	f383 8811 	msr	BASEPRI, r3
 8003aac:	f3bf 8f6f 	isb	sy
 8003ab0:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
 8003ab4:	4a0a      	ldr	r2, [pc, #40]	; (8003ae0 <vPortEnterCritical+0x3c>)
 8003ab6:	6813      	ldr	r3, [r2, #0]
 8003ab8:	3301      	adds	r3, #1
 8003aba:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 8003abc:	2b01      	cmp	r3, #1
 8003abe:	d000      	beq.n	8003ac2 <vPortEnterCritical+0x1e>
}
 8003ac0:	4770      	bx	lr
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8003ac2:	4b08      	ldr	r3, [pc, #32]	; (8003ae4 <vPortEnterCritical+0x40>)
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	f013 0fff 	tst.w	r3, #255	; 0xff
 8003aca:	d0f9      	beq.n	8003ac0 <vPortEnterCritical+0x1c>
 8003acc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ad0:	f383 8811 	msr	BASEPRI, r3
 8003ad4:	f3bf 8f6f 	isb	sy
 8003ad8:	f3bf 8f4f 	dsb	sy
 8003adc:	e7fe      	b.n	8003adc <vPortEnterCritical+0x38>
 8003ade:	bf00      	nop
 8003ae0:	2000000c 	.word	0x2000000c
 8003ae4:	e000ed04 	.word	0xe000ed04

08003ae8 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 8003ae8:	4b09      	ldr	r3, [pc, #36]	; (8003b10 <vPortExitCritical+0x28>)
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	b943      	cbnz	r3, 8003b00 <vPortExitCritical+0x18>
 8003aee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003af2:	f383 8811 	msr	BASEPRI, r3
 8003af6:	f3bf 8f6f 	isb	sy
 8003afa:	f3bf 8f4f 	dsb	sy
 8003afe:	e7fe      	b.n	8003afe <vPortExitCritical+0x16>
	uxCriticalNesting--;
 8003b00:	3b01      	subs	r3, #1
 8003b02:	4a03      	ldr	r2, [pc, #12]	; (8003b10 <vPortExitCritical+0x28>)
 8003b04:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8003b06:	b90b      	cbnz	r3, 8003b0c <vPortExitCritical+0x24>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003b08:	f383 8811 	msr	BASEPRI, r3
}
 8003b0c:	4770      	bx	lr
 8003b0e:	bf00      	nop
 8003b10:	2000000c 	.word	0x2000000c
	...

08003b20 <PendSV_Handler>:
	__asm volatile
 8003b20:	f3ef 8009 	mrs	r0, PSP
 8003b24:	f3bf 8f6f 	isb	sy
 8003b28:	4b15      	ldr	r3, [pc, #84]	; (8003b80 <pxCurrentTCBConst>)
 8003b2a:	681a      	ldr	r2, [r3, #0]
 8003b2c:	f01e 0f10 	tst.w	lr, #16
 8003b30:	bf08      	it	eq
 8003b32:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8003b36:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003b3a:	6010      	str	r0, [r2, #0]
 8003b3c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8003b40:	f04f 0050 	mov.w	r0, #80	; 0x50
 8003b44:	f380 8811 	msr	BASEPRI, r0
 8003b48:	f3bf 8f4f 	dsb	sy
 8003b4c:	f3bf 8f6f 	isb	sy
 8003b50:	f7ff feea 	bl	8003928 <vTaskSwitchContext>
 8003b54:	f04f 0000 	mov.w	r0, #0
 8003b58:	f380 8811 	msr	BASEPRI, r0
 8003b5c:	bc09      	pop	{r0, r3}
 8003b5e:	6819      	ldr	r1, [r3, #0]
 8003b60:	6808      	ldr	r0, [r1, #0]
 8003b62:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003b66:	f01e 0f10 	tst.w	lr, #16
 8003b6a:	bf08      	it	eq
 8003b6c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8003b70:	f380 8809 	msr	PSP, r0
 8003b74:	f3bf 8f6f 	isb	sy
 8003b78:	4770      	bx	lr
 8003b7a:	bf00      	nop
 8003b7c:	f3af 8000 	nop.w

08003b80 <pxCurrentTCBConst>:
 8003b80:	200004a0 	.word	0x200004a0

08003b84 <SysTick_Handler>:
{
 8003b84:	b508      	push	{r3, lr}
	__asm volatile
 8003b86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b8a:	f383 8811 	msr	BASEPRI, r3
 8003b8e:	f3bf 8f6f 	isb	sy
 8003b92:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
 8003b96:	f7ff fd99 	bl	80036cc <xTaskIncrementTick>
 8003b9a:	b118      	cbz	r0, 8003ba4 <SysTick_Handler+0x20>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8003b9c:	4b03      	ldr	r3, [pc, #12]	; (8003bac <SysTick_Handler+0x28>)
 8003b9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003ba2:	601a      	str	r2, [r3, #0]
	__asm volatile
 8003ba4:	2300      	movs	r3, #0
 8003ba6:	f383 8811 	msr	BASEPRI, r3
}
 8003baa:	bd08      	pop	{r3, pc}
 8003bac:	e000ed04 	.word	0xe000ed04

08003bb0 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8003bb0:	4a08      	ldr	r2, [pc, #32]	; (8003bd4 <vPortSetupTimerInterrupt+0x24>)
 8003bb2:	2300      	movs	r3, #0
 8003bb4:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8003bb6:	4908      	ldr	r1, [pc, #32]	; (8003bd8 <vPortSetupTimerInterrupt+0x28>)
 8003bb8:	600b      	str	r3, [r1, #0]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8003bba:	4b08      	ldr	r3, [pc, #32]	; (8003bdc <vPortSetupTimerInterrupt+0x2c>)
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	4908      	ldr	r1, [pc, #32]	; (8003be0 <vPortSetupTimerInterrupt+0x30>)
 8003bc0:	fba1 1303 	umull	r1, r3, r1, r3
 8003bc4:	099b      	lsrs	r3, r3, #6
 8003bc6:	3b01      	subs	r3, #1
 8003bc8:	4906      	ldr	r1, [pc, #24]	; (8003be4 <vPortSetupTimerInterrupt+0x34>)
 8003bca:	600b      	str	r3, [r1, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8003bcc:	2307      	movs	r3, #7
 8003bce:	6013      	str	r3, [r2, #0]
}
 8003bd0:	4770      	bx	lr
 8003bd2:	bf00      	nop
 8003bd4:	e000e010 	.word	0xe000e010
 8003bd8:	e000e018 	.word	0xe000e018
 8003bdc:	20000000 	.word	0x20000000
 8003be0:	10624dd3 	.word	0x10624dd3
 8003be4:	e000e014 	.word	0xe000e014

08003be8 <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8003be8:	4b3a      	ldr	r3, [pc, #232]	; (8003cd4 <xPortStartScheduler+0xec>)
 8003bea:	681a      	ldr	r2, [r3, #0]
 8003bec:	4b3a      	ldr	r3, [pc, #232]	; (8003cd8 <xPortStartScheduler+0xf0>)
 8003bee:	429a      	cmp	r2, r3
 8003bf0:	d029      	beq.n	8003c46 <xPortStartScheduler+0x5e>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8003bf2:	4b38      	ldr	r3, [pc, #224]	; (8003cd4 <xPortStartScheduler+0xec>)
 8003bf4:	681a      	ldr	r2, [r3, #0]
 8003bf6:	4b39      	ldr	r3, [pc, #228]	; (8003cdc <xPortStartScheduler+0xf4>)
 8003bf8:	429a      	cmp	r2, r3
 8003bfa:	d02d      	beq.n	8003c58 <xPortStartScheduler+0x70>
{
 8003bfc:	b510      	push	{r4, lr}
 8003bfe:	b082      	sub	sp, #8
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8003c00:	4b37      	ldr	r3, [pc, #220]	; (8003ce0 <xPortStartScheduler+0xf8>)
 8003c02:	781a      	ldrb	r2, [r3, #0]
 8003c04:	b2d2      	uxtb	r2, r2
 8003c06:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8003c08:	22ff      	movs	r2, #255	; 0xff
 8003c0a:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003c0c:	781b      	ldrb	r3, [r3, #0]
 8003c0e:	b2db      	uxtb	r3, r3
 8003c10:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003c14:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8003c18:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003c1c:	4a31      	ldr	r2, [pc, #196]	; (8003ce4 <xPortStartScheduler+0xfc>)
 8003c1e:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8003c20:	4b31      	ldr	r3, [pc, #196]	; (8003ce8 <xPortStartScheduler+0x100>)
 8003c22:	2207      	movs	r2, #7
 8003c24:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003c26:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8003c2a:	f013 0f80 	tst.w	r3, #128	; 0x80
 8003c2e:	d01c      	beq.n	8003c6a <xPortStartScheduler+0x82>
			ulMaxPRIGROUPValue--;
 8003c30:	4a2d      	ldr	r2, [pc, #180]	; (8003ce8 <xPortStartScheduler+0x100>)
 8003c32:	6813      	ldr	r3, [r2, #0]
 8003c34:	3b01      	subs	r3, #1
 8003c36:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003c38:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8003c3c:	005b      	lsls	r3, r3, #1
 8003c3e:	b2db      	uxtb	r3, r3
 8003c40:	f88d 3003 	strb.w	r3, [sp, #3]
 8003c44:	e7ef      	b.n	8003c26 <xPortStartScheduler+0x3e>
	__asm volatile
 8003c46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c4a:	f383 8811 	msr	BASEPRI, r3
 8003c4e:	f3bf 8f6f 	isb	sy
 8003c52:	f3bf 8f4f 	dsb	sy
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8003c56:	e7fe      	b.n	8003c56 <xPortStartScheduler+0x6e>
 8003c58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c5c:	f383 8811 	msr	BASEPRI, r3
 8003c60:	f3bf 8f6f 	isb	sy
 8003c64:	f3bf 8f4f 	dsb	sy
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8003c68:	e7fe      	b.n	8003c68 <xPortStartScheduler+0x80>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8003c6a:	4b1f      	ldr	r3, [pc, #124]	; (8003ce8 <xPortStartScheduler+0x100>)
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	2b03      	cmp	r3, #3
 8003c70:	d008      	beq.n	8003c84 <xPortStartScheduler+0x9c>
 8003c72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c76:	f383 8811 	msr	BASEPRI, r3
 8003c7a:	f3bf 8f6f 	isb	sy
 8003c7e:	f3bf 8f4f 	dsb	sy
 8003c82:	e7fe      	b.n	8003c82 <xPortStartScheduler+0x9a>
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003c84:	021b      	lsls	r3, r3, #8
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8003c86:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003c8a:	4a17      	ldr	r2, [pc, #92]	; (8003ce8 <xPortStartScheduler+0x100>)
 8003c8c:	6013      	str	r3, [r2, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8003c8e:	9b01      	ldr	r3, [sp, #4]
 8003c90:	b2db      	uxtb	r3, r3
 8003c92:	4a13      	ldr	r2, [pc, #76]	; (8003ce0 <xPortStartScheduler+0xf8>)
 8003c94:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8003c96:	4b15      	ldr	r3, [pc, #84]	; (8003cec <xPortStartScheduler+0x104>)
 8003c98:	681a      	ldr	r2, [r3, #0]
 8003c9a:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8003c9e:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8003ca0:	681a      	ldr	r2, [r3, #0]
 8003ca2:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
 8003ca6:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
 8003ca8:	f7ff ff82 	bl	8003bb0 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 8003cac:	2400      	movs	r4, #0
 8003cae:	4b10      	ldr	r3, [pc, #64]	; (8003cf0 <xPortStartScheduler+0x108>)
 8003cb0:	601c      	str	r4, [r3, #0]
	vPortEnableVFP();
 8003cb2:	f7ff febf 	bl	8003a34 <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8003cb6:	4a0f      	ldr	r2, [pc, #60]	; (8003cf4 <xPortStartScheduler+0x10c>)
 8003cb8:	6813      	ldr	r3, [r2, #0]
 8003cba:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8003cbe:	6013      	str	r3, [r2, #0]
	prvPortStartFirstTask();
 8003cc0:	f7ff fea4 	bl	8003a0c <prvPortStartFirstTask>
	vTaskSwitchContext();
 8003cc4:	f7ff fe30 	bl	8003928 <vTaskSwitchContext>
	prvTaskExitError();
 8003cc8:	f7ff fe80 	bl	80039cc <prvTaskExitError>
}
 8003ccc:	4620      	mov	r0, r4
 8003cce:	b002      	add	sp, #8
 8003cd0:	bd10      	pop	{r4, pc}
 8003cd2:	bf00      	nop
 8003cd4:	e000ed00 	.word	0xe000ed00
 8003cd8:	410fc271 	.word	0x410fc271
 8003cdc:	410fc270 	.word	0x410fc270
 8003ce0:	e000e400 	.word	0xe000e400
 8003ce4:	200005c8 	.word	0x200005c8
 8003ce8:	200005cc 	.word	0x200005cc
 8003cec:	e000ed20 	.word	0xe000ed20
 8003cf0:	2000000c 	.word	0x2000000c
 8003cf4:	e000ef34 	.word	0xe000ef34

08003cf8 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8003cf8:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8003cfc:	2b0f      	cmp	r3, #15
 8003cfe:	d90f      	bls.n	8003d20 <vPortValidateInterruptPriority+0x28>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8003d00:	4a10      	ldr	r2, [pc, #64]	; (8003d44 <vPortValidateInterruptPriority+0x4c>)
 8003d02:	5c9b      	ldrb	r3, [r3, r2]
 8003d04:	b2db      	uxtb	r3, r3
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8003d06:	4a10      	ldr	r2, [pc, #64]	; (8003d48 <vPortValidateInterruptPriority+0x50>)
 8003d08:	7812      	ldrb	r2, [r2, #0]
 8003d0a:	429a      	cmp	r2, r3
 8003d0c:	d908      	bls.n	8003d20 <vPortValidateInterruptPriority+0x28>
 8003d0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d12:	f383 8811 	msr	BASEPRI, r3
 8003d16:	f3bf 8f6f 	isb	sy
 8003d1a:	f3bf 8f4f 	dsb	sy
 8003d1e:	e7fe      	b.n	8003d1e <vPortValidateInterruptPriority+0x26>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8003d20:	4b0a      	ldr	r3, [pc, #40]	; (8003d4c <vPortValidateInterruptPriority+0x54>)
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003d28:	4a09      	ldr	r2, [pc, #36]	; (8003d50 <vPortValidateInterruptPriority+0x58>)
 8003d2a:	6812      	ldr	r2, [r2, #0]
 8003d2c:	4293      	cmp	r3, r2
 8003d2e:	d908      	bls.n	8003d42 <vPortValidateInterruptPriority+0x4a>
 8003d30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d34:	f383 8811 	msr	BASEPRI, r3
 8003d38:	f3bf 8f6f 	isb	sy
 8003d3c:	f3bf 8f4f 	dsb	sy
 8003d40:	e7fe      	b.n	8003d40 <vPortValidateInterruptPriority+0x48>
	}
 8003d42:	4770      	bx	lr
 8003d44:	e000e3f0 	.word	0xe000e3f0
 8003d48:	200005c8 	.word	0x200005c8
 8003d4c:	e000ed0c 	.word	0xe000ed0c
 8003d50:	200005cc 	.word	0x200005cc

08003d54 <prvHeapInit>:
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8003d54:	4a12      	ldr	r2, [pc, #72]	; (8003da0 <prvHeapInit+0x4c>)

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8003d56:	f012 0f07 	tst.w	r2, #7
 8003d5a:	d01e      	beq.n	8003d9a <prvHeapInit+0x46>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8003d5c:	1dd1      	adds	r1, r2, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003d5e:	f021 0107 	bic.w	r1, r1, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8003d62:	f5c1 5370 	rsb	r3, r1, #15360	; 0x3c00
 8003d66:	4413      	add	r3, r2
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003d68:	460a      	mov	r2, r1

	pucAlignedHeap = ( uint8_t * ) uxAddress;

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8003d6a:	480e      	ldr	r0, [pc, #56]	; (8003da4 <prvHeapInit+0x50>)
 8003d6c:	6002      	str	r2, [r0, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8003d6e:	2100      	movs	r1, #0
 8003d70:	6041      	str	r1, [r0, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8003d72:	4413      	add	r3, r2
	uxAddress -= xHeapStructSize;
 8003d74:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003d76:	f023 0307 	bic.w	r3, r3, #7
	pxEnd = ( void * ) uxAddress;
 8003d7a:	480b      	ldr	r0, [pc, #44]	; (8003da8 <prvHeapInit+0x54>)
 8003d7c:	6003      	str	r3, [r0, #0]
	pxEnd->xBlockSize = 0;
 8003d7e:	6059      	str	r1, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8003d80:	6019      	str	r1, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8003d82:	1a99      	subs	r1, r3, r2
 8003d84:	6051      	str	r1, [r2, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8003d86:	6013      	str	r3, [r2, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003d88:	4b08      	ldr	r3, [pc, #32]	; (8003dac <prvHeapInit+0x58>)
 8003d8a:	6019      	str	r1, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003d8c:	4b08      	ldr	r3, [pc, #32]	; (8003db0 <prvHeapInit+0x5c>)
 8003d8e:	6019      	str	r1, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8003d90:	4b08      	ldr	r3, [pc, #32]	; (8003db4 <prvHeapInit+0x60>)
 8003d92:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8003d96:	601a      	str	r2, [r3, #0]
}
 8003d98:	4770      	bx	lr
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8003d9a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8003d9e:	e7e4      	b.n	8003d6a <prvHeapInit+0x16>
 8003da0:	200005d4 	.word	0x200005d4
 8003da4:	200041e8 	.word	0x200041e8
 8003da8:	200005d0 	.word	0x200005d0
 8003dac:	200041dc 	.word	0x200041dc
 8003db0:	200041d8 	.word	0x200041d8
 8003db4:	200041d4 	.word	0x200041d4

08003db8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8003db8:	b410      	push	{r4}
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8003dba:	4b13      	ldr	r3, [pc, #76]	; (8003e08 <prvInsertBlockIntoFreeList+0x50>)
 8003dbc:	461a      	mov	r2, r3
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	4283      	cmp	r3, r0
 8003dc2:	d3fb      	bcc.n	8003dbc <prvInsertBlockIntoFreeList+0x4>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8003dc4:	6851      	ldr	r1, [r2, #4]
 8003dc6:	1854      	adds	r4, r2, r1
 8003dc8:	4284      	cmp	r4, r0
 8003dca:	d00a      	beq.n	8003de2 <prvInsertBlockIntoFreeList+0x2a>
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8003dcc:	6841      	ldr	r1, [r0, #4]
 8003dce:	1844      	adds	r4, r0, r1
 8003dd0:	42a3      	cmp	r3, r4
 8003dd2:	d00b      	beq.n	8003dec <prvInsertBlockIntoFreeList+0x34>
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8003dd4:	6003      	str	r3, [r0, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8003dd6:	4290      	cmp	r0, r2
 8003dd8:	d000      	beq.n	8003ddc <prvInsertBlockIntoFreeList+0x24>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8003dda:	6010      	str	r0, [r2, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003ddc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003de0:	4770      	bx	lr
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8003de2:	6840      	ldr	r0, [r0, #4]
 8003de4:	4401      	add	r1, r0
 8003de6:	6051      	str	r1, [r2, #4]
		pxBlockToInsert = pxIterator;
 8003de8:	4610      	mov	r0, r2
 8003dea:	e7ef      	b.n	8003dcc <prvInsertBlockIntoFreeList+0x14>
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8003dec:	4c07      	ldr	r4, [pc, #28]	; (8003e0c <prvInsertBlockIntoFreeList+0x54>)
 8003dee:	6824      	ldr	r4, [r4, #0]
 8003df0:	42a3      	cmp	r3, r4
 8003df2:	d006      	beq.n	8003e02 <prvInsertBlockIntoFreeList+0x4a>
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8003df4:	685b      	ldr	r3, [r3, #4]
 8003df6:	4419      	add	r1, r3
 8003df8:	6041      	str	r1, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8003dfa:	6813      	ldr	r3, [r2, #0]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	6003      	str	r3, [r0, #0]
 8003e00:	e7e9      	b.n	8003dd6 <prvInsertBlockIntoFreeList+0x1e>
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8003e02:	6004      	str	r4, [r0, #0]
 8003e04:	e7e7      	b.n	8003dd6 <prvInsertBlockIntoFreeList+0x1e>
 8003e06:	bf00      	nop
 8003e08:	200041e8 	.word	0x200041e8
 8003e0c:	200005d0 	.word	0x200005d0

08003e10 <pvPortMalloc>:
{
 8003e10:	b570      	push	{r4, r5, r6, lr}
 8003e12:	4604      	mov	r4, r0
	vTaskSuspendAll();
 8003e14:	f7ff fc44 	bl	80036a0 <vTaskSuspendAll>
		if( pxEnd == NULL )
 8003e18:	4b36      	ldr	r3, [pc, #216]	; (8003ef4 <pvPortMalloc+0xe4>)
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	b1a3      	cbz	r3, 8003e48 <pvPortMalloc+0x38>
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8003e1e:	4b36      	ldr	r3, [pc, #216]	; (8003ef8 <pvPortMalloc+0xe8>)
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	421c      	tst	r4, r3
 8003e24:	d14e      	bne.n	8003ec4 <pvPortMalloc+0xb4>
			if( xWantedSize > 0 )
 8003e26:	b134      	cbz	r4, 8003e36 <pvPortMalloc+0x26>
				xWantedSize += xHeapStructSize;
 8003e28:	3408      	adds	r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003e2a:	f014 0f07 	tst.w	r4, #7
 8003e2e:	d002      	beq.n	8003e36 <pvPortMalloc+0x26>
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8003e30:	f024 0407 	bic.w	r4, r4, #7
 8003e34:	3408      	adds	r4, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8003e36:	2c00      	cmp	r4, #0
 8003e38:	d046      	beq.n	8003ec8 <pvPortMalloc+0xb8>
 8003e3a:	4b30      	ldr	r3, [pc, #192]	; (8003efc <pvPortMalloc+0xec>)
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	42a3      	cmp	r3, r4
 8003e40:	d351      	bcc.n	8003ee6 <pvPortMalloc+0xd6>
				pxBlock = xStart.pxNextFreeBlock;
 8003e42:	4b2f      	ldr	r3, [pc, #188]	; (8003f00 <pvPortMalloc+0xf0>)
 8003e44:	681d      	ldr	r5, [r3, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003e46:	e004      	b.n	8003e52 <pvPortMalloc+0x42>
			prvHeapInit();
 8003e48:	f7ff ff84 	bl	8003d54 <prvHeapInit>
 8003e4c:	e7e7      	b.n	8003e1e <pvPortMalloc+0xe>
					pxPreviousBlock = pxBlock;
 8003e4e:	462b      	mov	r3, r5
					pxBlock = pxBlock->pxNextFreeBlock;
 8003e50:	4615      	mov	r5, r2
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003e52:	686a      	ldr	r2, [r5, #4]
 8003e54:	42a2      	cmp	r2, r4
 8003e56:	d202      	bcs.n	8003e5e <pvPortMalloc+0x4e>
 8003e58:	682a      	ldr	r2, [r5, #0]
 8003e5a:	2a00      	cmp	r2, #0
 8003e5c:	d1f7      	bne.n	8003e4e <pvPortMalloc+0x3e>
				if( pxBlock != pxEnd )
 8003e5e:	4a25      	ldr	r2, [pc, #148]	; (8003ef4 <pvPortMalloc+0xe4>)
 8003e60:	6812      	ldr	r2, [r2, #0]
 8003e62:	42aa      	cmp	r2, r5
 8003e64:	d041      	beq.n	8003eea <pvPortMalloc+0xda>
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8003e66:	681e      	ldr	r6, [r3, #0]
 8003e68:	3608      	adds	r6, #8
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8003e6a:	682a      	ldr	r2, [r5, #0]
 8003e6c:	601a      	str	r2, [r3, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8003e6e:	686b      	ldr	r3, [r5, #4]
 8003e70:	1b1b      	subs	r3, r3, r4
 8003e72:	2b10      	cmp	r3, #16
 8003e74:	d910      	bls.n	8003e98 <pvPortMalloc+0x88>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8003e76:	1928      	adds	r0, r5, r4
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003e78:	f010 0f07 	tst.w	r0, #7
 8003e7c:	d008      	beq.n	8003e90 <pvPortMalloc+0x80>
 8003e7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e82:	f383 8811 	msr	BASEPRI, r3
 8003e86:	f3bf 8f6f 	isb	sy
 8003e8a:	f3bf 8f4f 	dsb	sy
 8003e8e:	e7fe      	b.n	8003e8e <pvPortMalloc+0x7e>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8003e90:	6043      	str	r3, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 8003e92:	606c      	str	r4, [r5, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8003e94:	f7ff ff90 	bl	8003db8 <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8003e98:	686a      	ldr	r2, [r5, #4]
 8003e9a:	4918      	ldr	r1, [pc, #96]	; (8003efc <pvPortMalloc+0xec>)
 8003e9c:	680b      	ldr	r3, [r1, #0]
 8003e9e:	1a9b      	subs	r3, r3, r2
 8003ea0:	600b      	str	r3, [r1, #0]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8003ea2:	4918      	ldr	r1, [pc, #96]	; (8003f04 <pvPortMalloc+0xf4>)
 8003ea4:	6809      	ldr	r1, [r1, #0]
 8003ea6:	428b      	cmp	r3, r1
 8003ea8:	d201      	bcs.n	8003eae <pvPortMalloc+0x9e>
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8003eaa:	4916      	ldr	r1, [pc, #88]	; (8003f04 <pvPortMalloc+0xf4>)
 8003eac:	600b      	str	r3, [r1, #0]
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8003eae:	4b12      	ldr	r3, [pc, #72]	; (8003ef8 <pvPortMalloc+0xe8>)
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	4313      	orrs	r3, r2
 8003eb4:	606b      	str	r3, [r5, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8003eb6:	2300      	movs	r3, #0
 8003eb8:	602b      	str	r3, [r5, #0]
					xNumberOfSuccessfulAllocations++;
 8003eba:	4a13      	ldr	r2, [pc, #76]	; (8003f08 <pvPortMalloc+0xf8>)
 8003ebc:	6813      	ldr	r3, [r2, #0]
 8003ebe:	3301      	adds	r3, #1
 8003ec0:	6013      	str	r3, [r2, #0]
 8003ec2:	e002      	b.n	8003eca <pvPortMalloc+0xba>
void *pvReturn = NULL;
 8003ec4:	2600      	movs	r6, #0
 8003ec6:	e000      	b.n	8003eca <pvPortMalloc+0xba>
 8003ec8:	2600      	movs	r6, #0
	( void ) xTaskResumeAll();
 8003eca:	f7ff fc8b 	bl	80037e4 <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8003ece:	f016 0f07 	tst.w	r6, #7
 8003ed2:	d00c      	beq.n	8003eee <pvPortMalloc+0xde>
 8003ed4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ed8:	f383 8811 	msr	BASEPRI, r3
 8003edc:	f3bf 8f6f 	isb	sy
 8003ee0:	f3bf 8f4f 	dsb	sy
 8003ee4:	e7fe      	b.n	8003ee4 <pvPortMalloc+0xd4>
void *pvReturn = NULL;
 8003ee6:	2600      	movs	r6, #0
 8003ee8:	e7ef      	b.n	8003eca <pvPortMalloc+0xba>
 8003eea:	2600      	movs	r6, #0
 8003eec:	e7ed      	b.n	8003eca <pvPortMalloc+0xba>
}
 8003eee:	4630      	mov	r0, r6
 8003ef0:	bd70      	pop	{r4, r5, r6, pc}
 8003ef2:	bf00      	nop
 8003ef4:	200005d0 	.word	0x200005d0
 8003ef8:	200041d4 	.word	0x200041d4
 8003efc:	200041d8 	.word	0x200041d8
 8003f00:	200041e8 	.word	0x200041e8
 8003f04:	200041dc 	.word	0x200041dc
 8003f08:	200041e0 	.word	0x200041e0

08003f0c <vPortFree>:
	if( pv != NULL )
 8003f0c:	2800      	cmp	r0, #0
 8003f0e:	d034      	beq.n	8003f7a <vPortFree+0x6e>
{
 8003f10:	b538      	push	{r3, r4, r5, lr}
 8003f12:	4604      	mov	r4, r0
		puc -= xHeapStructSize;
 8003f14:	f1a0 0508 	sub.w	r5, r0, #8
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8003f18:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8003f1c:	4a17      	ldr	r2, [pc, #92]	; (8003f7c <vPortFree+0x70>)
 8003f1e:	6812      	ldr	r2, [r2, #0]
 8003f20:	4213      	tst	r3, r2
 8003f22:	d108      	bne.n	8003f36 <vPortFree+0x2a>
 8003f24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f28:	f383 8811 	msr	BASEPRI, r3
 8003f2c:	f3bf 8f6f 	isb	sy
 8003f30:	f3bf 8f4f 	dsb	sy
 8003f34:	e7fe      	b.n	8003f34 <vPortFree+0x28>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8003f36:	f850 1c08 	ldr.w	r1, [r0, #-8]
 8003f3a:	b141      	cbz	r1, 8003f4e <vPortFree+0x42>
 8003f3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f40:	f383 8811 	msr	BASEPRI, r3
 8003f44:	f3bf 8f6f 	isb	sy
 8003f48:	f3bf 8f4f 	dsb	sy
 8003f4c:	e7fe      	b.n	8003f4c <vPortFree+0x40>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8003f4e:	ea23 0302 	bic.w	r3, r3, r2
 8003f52:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 8003f56:	f7ff fba3 	bl	80036a0 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 8003f5a:	f854 1c04 	ldr.w	r1, [r4, #-4]
 8003f5e:	4a08      	ldr	r2, [pc, #32]	; (8003f80 <vPortFree+0x74>)
 8003f60:	6813      	ldr	r3, [r2, #0]
 8003f62:	440b      	add	r3, r1
 8003f64:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8003f66:	4628      	mov	r0, r5
 8003f68:	f7ff ff26 	bl	8003db8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8003f6c:	4a05      	ldr	r2, [pc, #20]	; (8003f84 <vPortFree+0x78>)
 8003f6e:	6813      	ldr	r3, [r2, #0]
 8003f70:	3301      	adds	r3, #1
 8003f72:	6013      	str	r3, [r2, #0]
				( void ) xTaskResumeAll();
 8003f74:	f7ff fc36 	bl	80037e4 <xTaskResumeAll>
}
 8003f78:	bd38      	pop	{r3, r4, r5, pc}
 8003f7a:	4770      	bx	lr
 8003f7c:	200041d4 	.word	0x200041d4
 8003f80:	200041d8 	.word	0x200041d8
 8003f84:	200041e4 	.word	0x200041e4

08003f88 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8003f88:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8003f8a:	2200      	movs	r2, #0
 8003f8c:	490f      	ldr	r1, [pc, #60]	; (8003fcc <MX_USB_DEVICE_Init+0x44>)
 8003f8e:	4810      	ldr	r0, [pc, #64]	; (8003fd0 <MX_USB_DEVICE_Init+0x48>)
 8003f90:	f000 f930 	bl	80041f4 <USBD_Init>
 8003f94:	b970      	cbnz	r0, 8003fb4 <MX_USB_DEVICE_Init+0x2c>
  {
    Error_Handler();
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CUSTOM_HID) != USBD_OK)
 8003f96:	490f      	ldr	r1, [pc, #60]	; (8003fd4 <MX_USB_DEVICE_Init+0x4c>)
 8003f98:	480d      	ldr	r0, [pc, #52]	; (8003fd0 <MX_USB_DEVICE_Init+0x48>)
 8003f9a:	f000 f94f 	bl	800423c <USBD_RegisterClass>
 8003f9e:	b960      	cbnz	r0, 8003fba <MX_USB_DEVICE_Init+0x32>
  {
    Error_Handler();
  }
  if (USBD_CUSTOM_HID_RegisterInterface(&hUsbDeviceFS, &USBD_CustomHID_fops_FS) != USBD_OK)
 8003fa0:	490d      	ldr	r1, [pc, #52]	; (8003fd8 <MX_USB_DEVICE_Init+0x50>)
 8003fa2:	480b      	ldr	r0, [pc, #44]	; (8003fd0 <MX_USB_DEVICE_Init+0x48>)
 8003fa4:	f000 ffab 	bl	8004efe <USBD_CUSTOM_HID_RegisterInterface>
 8003fa8:	b950      	cbnz	r0, 8003fc0 <MX_USB_DEVICE_Init+0x38>
  {
    Error_Handler();
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8003faa:	4809      	ldr	r0, [pc, #36]	; (8003fd0 <MX_USB_DEVICE_Init+0x48>)
 8003fac:	f000 f96a 	bl	8004284 <USBD_Start>
 8003fb0:	b948      	cbnz	r0, 8003fc6 <MX_USB_DEVICE_Init+0x3e>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8003fb2:	bd08      	pop	{r3, pc}
    Error_Handler();
 8003fb4:	f7fc fb64 	bl	8000680 <Error_Handler>
 8003fb8:	e7ed      	b.n	8003f96 <MX_USB_DEVICE_Init+0xe>
    Error_Handler();
 8003fba:	f7fc fb61 	bl	8000680 <Error_Handler>
 8003fbe:	e7ef      	b.n	8003fa0 <MX_USB_DEVICE_Init+0x18>
    Error_Handler();
 8003fc0:	f7fc fb5e 	bl	8000680 <Error_Handler>
 8003fc4:	e7f1      	b.n	8003faa <MX_USB_DEVICE_Init+0x22>
    Error_Handler();
 8003fc6:	f7fc fb5b 	bl	8000680 <Error_Handler>
}
 8003fca:	e7f2      	b.n	8003fb2 <MX_USB_DEVICE_Init+0x2a>
 8003fcc:	20000118 	.word	0x20000118
 8003fd0:	200046f4 	.word	0x200046f4
 8003fd4:	20000044 	.word	0x20000044
 8003fd8:	20000034 	.word	0x20000034

08003fdc <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8003fdc:	b508      	push	{r3, lr}
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8003fde:	f500 7171 	add.w	r1, r0, #964	; 0x3c4
 8003fe2:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 8003fe6:	f000 f962 	bl	80042ae <USBD_LL_SetupStage>
}
 8003fea:	bd08      	pop	{r3, pc}

08003fec <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8003fec:	b508      	push	{r3, lr}
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8003fee:	ebc1 03c1 	rsb	r3, r1, r1, lsl #3
 8003ff2:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8003ff6:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8003ffa:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 8003ffe:	f000 f982 	bl	8004306 <USBD_LL_DataOutStage>
}
 8004002:	bd08      	pop	{r3, pc}

08004004 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8004004:	b508      	push	{r3, lr}
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8004006:	ebc1 03c1 	rsb	r3, r1, r1, lsl #3
 800400a:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 800400e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004010:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 8004014:	f000 f9b3 	bl	800437e <USBD_LL_DataInStage>
}
 8004018:	bd08      	pop	{r3, pc}

0800401a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800401a:	b508      	push	{r3, lr}
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800401c:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 8004020:	f000 fa53 	bl	80044ca <USBD_LL_SOF>
}
 8004024:	bd08      	pop	{r3, pc}

08004026 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8004026:	b510      	push	{r4, lr}
 8004028:	4604      	mov	r4, r0
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800402a:	68c3      	ldr	r3, [r0, #12]
 800402c:	2b02      	cmp	r3, #2
 800402e:	d109      	bne.n	8004044 <HAL_PCD_ResetCallback+0x1e>
  {
    Error_Handler();
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8004030:	2101      	movs	r1, #1
 8004032:	f8d4 0404 	ldr.w	r0, [r4, #1028]	; 0x404
 8004036:	f000 fa2e 	bl	8004496 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800403a:	f8d4 0404 	ldr.w	r0, [r4, #1028]	; 0x404
 800403e:	f000 f9fd 	bl	800443c <USBD_LL_Reset>
}
 8004042:	bd10      	pop	{r4, pc}
    Error_Handler();
 8004044:	f7fc fb1c 	bl	8000680 <Error_Handler>
 8004048:	e7f2      	b.n	8004030 <HAL_PCD_ResetCallback+0xa>
	...

0800404c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800404c:	b510      	push	{r4, lr}
 800404e:	4604      	mov	r4, r0
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8004050:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 8004054:	f000 fa22 	bl	800449c <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8004058:	6822      	ldr	r2, [r4, #0]
 800405a:	f8d2 3e00 	ldr.w	r3, [r2, #3584]	; 0xe00
 800405e:	f043 0301 	orr.w	r3, r3, #1
 8004062:	f8c2 3e00 	str.w	r3, [r2, #3584]	; 0xe00
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8004066:	6a23      	ldr	r3, [r4, #32]
 8004068:	b123      	cbz	r3, 8004074 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800406a:	4a03      	ldr	r2, [pc, #12]	; (8004078 <HAL_PCD_SuspendCallback+0x2c>)
 800406c:	6913      	ldr	r3, [r2, #16]
 800406e:	f043 0306 	orr.w	r3, r3, #6
 8004072:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8004074:	bd10      	pop	{r4, pc}
 8004076:	bf00      	nop
 8004078:	e000ed00 	.word	0xe000ed00

0800407c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800407c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800407e:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 8004082:	f000 fa15 	bl	80044b0 <USBD_LL_Resume>
}
 8004086:	bd08      	pop	{r3, pc}

08004088 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8004088:	b508      	push	{r3, lr}
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800408a:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 800408e:	f000 fa44 	bl	800451a <USBD_LL_IsoOUTIncomplete>
}
 8004092:	bd08      	pop	{r3, pc}

08004094 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8004094:	b508      	push	{r3, lr}
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8004096:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 800409a:	f000 fa2a 	bl	80044f2 <USBD_LL_IsoINIncomplete>
}
 800409e:	bd08      	pop	{r3, pc}

080040a0 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80040a0:	b508      	push	{r3, lr}
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80040a2:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 80040a6:	f000 fa4c 	bl	8004542 <USBD_LL_DevConnected>
}
 80040aa:	bd08      	pop	{r3, pc}

080040ac <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80040ac:	b508      	push	{r3, lr}
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80040ae:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 80040b2:	f000 fa48 	bl	8004546 <USBD_LL_DevDisconnected>
}
 80040b6:	bd08      	pop	{r3, pc}

080040b8 <USBD_LL_Init>:
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80040b8:	7802      	ldrb	r2, [r0, #0]
 80040ba:	b10a      	cbz	r2, 80040c0 <USBD_LL_Init+0x8>
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
  }
  return USBD_OK;
}
 80040bc:	2000      	movs	r0, #0
 80040be:	4770      	bx	lr
{
 80040c0:	b510      	push	{r4, lr}
 80040c2:	4603      	mov	r3, r0
  hpcd_USB_OTG_FS.pData = pdev;
 80040c4:	4815      	ldr	r0, [pc, #84]	; (800411c <USBD_LL_Init+0x64>)
 80040c6:	f8c0 3404 	str.w	r3, [r0, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 80040ca:	f8c3 02c4 	str.w	r0, [r3, #708]	; 0x2c4
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80040ce:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80040d2:	6003      	str	r3, [r0, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80040d4:	2304      	movs	r3, #4
 80040d6:	6043      	str	r3, [r0, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80040d8:	2202      	movs	r2, #2
 80040da:	60c2      	str	r2, [r0, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80040dc:	2300      	movs	r3, #0
 80040de:	6103      	str	r3, [r0, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80040e0:	6182      	str	r2, [r0, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80040e2:	61c3      	str	r3, [r0, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80040e4:	6203      	str	r3, [r0, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80040e6:	6243      	str	r3, [r0, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80040e8:	62c3      	str	r3, [r0, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80040ea:	6303      	str	r3, [r0, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80040ec:	f7fc fecf 	bl	8000e8e <HAL_PCD_Init>
 80040f0:	b980      	cbnz	r0, 8004114 <USBD_LL_Init+0x5c>
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 80040f2:	4c0a      	ldr	r4, [pc, #40]	; (800411c <USBD_LL_Init+0x64>)
 80040f4:	2180      	movs	r1, #128	; 0x80
 80040f6:	4620      	mov	r0, r4
 80040f8:	f7fd fc05 	bl	8001906 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 80040fc:	2240      	movs	r2, #64	; 0x40
 80040fe:	2100      	movs	r1, #0
 8004100:	4620      	mov	r0, r4
 8004102:	f7fd fbdc 	bl	80018be <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8004106:	2280      	movs	r2, #128	; 0x80
 8004108:	2101      	movs	r1, #1
 800410a:	4620      	mov	r0, r4
 800410c:	f7fd fbd7 	bl	80018be <HAL_PCDEx_SetTxFiFo>
}
 8004110:	2000      	movs	r0, #0
 8004112:	bd10      	pop	{r4, pc}
    Error_Handler( );
 8004114:	f7fc fab4 	bl	8000680 <Error_Handler>
 8004118:	e7eb      	b.n	80040f2 <USBD_LL_Init+0x3a>
 800411a:	bf00      	nop
 800411c:	2000425c 	.word	0x2000425c

08004120 <USBD_LL_IsStallEP>:
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8004120:	f8d0 32c4 	ldr.w	r3, [r0, #708]	; 0x2c4

  if((ep_addr & 0x80) == 0x80)
 8004124:	f011 0f80 	tst.w	r1, #128	; 0x80
 8004128:	d108      	bne.n	800413c <USBD_LL_IsStallEP+0x1c>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800412a:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 800412e:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 8004132:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 8004136:	f891 01fe 	ldrb.w	r0, [r1, #510]	; 0x1fe
  }
}
 800413a:	4770      	bx	lr
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800413c:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 8004140:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 8004144:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 8004148:	f891 003e 	ldrb.w	r0, [r1, #62]	; 0x3e
 800414c:	4770      	bx	lr
	...

08004150 <USBD_static_malloc>:
  */
void *USBD_static_malloc(uint32_t size)
{
  static uint32_t mem[(sizeof(USBD_CUSTOM_HID_HandleTypeDef)/4+1)];/* On 32-bit boundary */
  return mem;
}
 8004150:	4800      	ldr	r0, [pc, #0]	; (8004154 <USBD_static_malloc+0x4>)
 8004152:	4770      	bx	lr
 8004154:	200041f0 	.word	0x200041f0

08004158 <USBD_static_free>:
  * @retval None
  */
void USBD_static_free(void *p)
{

}
 8004158:	4770      	bx	lr

0800415a <USBD_Get_USB_Status>:
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
  USBD_StatusTypeDef usb_status = USBD_OK;

  switch (hal_status)
 800415a:	2803      	cmp	r0, #3
 800415c:	d805      	bhi.n	800416a <USBD_Get_USB_Status+0x10>
 800415e:	e8df f000 	tbb	[pc, r0]
 8004162:	0405      	.short	0x0405
 8004164:	0502      	.short	0x0502
    break;
    case HAL_ERROR :
      usb_status = USBD_FAIL;
    break;
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8004166:	2001      	movs	r0, #1
    break;
 8004168:	4770      	bx	lr
      usb_status = USBD_FAIL;
 800416a:	2003      	movs	r0, #3
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;
}
 800416c:	4770      	bx	lr

0800416e <USBD_LL_Start>:
{
 800416e:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_Start(pdev->pData);
 8004170:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 8004174:	f7fc ff1e 	bl	8000fb4 <HAL_PCD_Start>
  usb_status =  USBD_Get_USB_Status(hal_status);
 8004178:	f7ff ffef 	bl	800415a <USBD_Get_USB_Status>
}
 800417c:	bd08      	pop	{r3, pc}

0800417e <USBD_LL_OpenEP>:
{
 800417e:	b510      	push	{r4, lr}
 8004180:	4614      	mov	r4, r2
 8004182:	461a      	mov	r2, r3
  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8004184:	4623      	mov	r3, r4
 8004186:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 800418a:	f7fd fa43 	bl	8001614 <HAL_PCD_EP_Open>
  usb_status =  USBD_Get_USB_Status(hal_status);
 800418e:	f7ff ffe4 	bl	800415a <USBD_Get_USB_Status>
}
 8004192:	bd10      	pop	{r4, pc}

08004194 <USBD_LL_CloseEP>:
{
 8004194:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8004196:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 800419a:	f7fd fa7e 	bl	800169a <HAL_PCD_EP_Close>
  usb_status =  USBD_Get_USB_Status(hal_status);
 800419e:	f7ff ffdc 	bl	800415a <USBD_Get_USB_Status>
}
 80041a2:	bd08      	pop	{r3, pc}

080041a4 <USBD_LL_StallEP>:
{
 80041a4:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80041a6:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 80041aa:	f7fd fb09 	bl	80017c0 <HAL_PCD_EP_SetStall>
  usb_status =  USBD_Get_USB_Status(hal_status);
 80041ae:	f7ff ffd4 	bl	800415a <USBD_Get_USB_Status>
}
 80041b2:	bd08      	pop	{r3, pc}

080041b4 <USBD_LL_ClearStallEP>:
{
 80041b4:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80041b6:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 80041ba:	f7fd fb45 	bl	8001848 <HAL_PCD_EP_ClrStall>
  usb_status =  USBD_Get_USB_Status(hal_status);
 80041be:	f7ff ffcc 	bl	800415a <USBD_Get_USB_Status>
}
 80041c2:	bd08      	pop	{r3, pc}

080041c4 <USBD_LL_SetUSBAddress>:
{
 80041c4:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80041c6:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 80041ca:	f7fd fa0f 	bl	80015ec <HAL_PCD_SetAddress>
  usb_status =  USBD_Get_USB_Status(hal_status);
 80041ce:	f7ff ffc4 	bl	800415a <USBD_Get_USB_Status>
}
 80041d2:	bd08      	pop	{r3, pc}

080041d4 <USBD_LL_Transmit>:
{
 80041d4:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80041d6:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 80041da:	f7fd fac6 	bl	800176a <HAL_PCD_EP_Transmit>
  usb_status =  USBD_Get_USB_Status(hal_status);
 80041de:	f7ff ffbc 	bl	800415a <USBD_Get_USB_Status>
}
 80041e2:	bd08      	pop	{r3, pc}

080041e4 <USBD_LL_PrepareReceive>:
{
 80041e4:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80041e6:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 80041ea:	f7fd fa8f 	bl	800170c <HAL_PCD_EP_Receive>
  usb_status =  USBD_Get_USB_Status(hal_status);
 80041ee:	f7ff ffb4 	bl	800415a <USBD_Get_USB_Status>
}
 80041f2:	bd08      	pop	{r3, pc}

080041f4 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80041f4:	b508      	push	{r3, lr}
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80041f6:	b190      	cbz	r0, 800421e <USBD_Init+0x2a>
 80041f8:	4603      	mov	r3, r0
#endif
    return USBD_FAIL;
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 80041fa:	2000      	movs	r0, #0
 80041fc:	f8c3 02b8 	str.w	r0, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 8004200:	f8c3 02c0 	str.w	r0, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 8004204:	f8c3 02cc 	str.w	r0, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8004208:	b109      	cbz	r1, 800420e <USBD_Init+0x1a>
  {
    pdev->pDesc = pdesc;
 800420a:	f8c3 12b4 	str.w	r1, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800420e:	2101      	movs	r1, #1
 8004210:	f883 129c 	strb.w	r1, [r3, #668]	; 0x29c
  pdev->id = id;
 8004214:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8004216:	4618      	mov	r0, r3
 8004218:	f7ff ff4e 	bl	80040b8 <USBD_LL_Init>

  return ret;
}
 800421c:	bd08      	pop	{r3, pc}
    USBD_ErrLog("Invalid Device handle");
 800421e:	4805      	ldr	r0, [pc, #20]	; (8004234 <USBD_Init+0x40>)
 8004220:	f001 f8da 	bl	80053d8 <iprintf>
 8004224:	4804      	ldr	r0, [pc, #16]	; (8004238 <USBD_Init+0x44>)
 8004226:	f001 f8d7 	bl	80053d8 <iprintf>
 800422a:	200a      	movs	r0, #10
 800422c:	f001 f8ec 	bl	8005408 <putchar>
    return USBD_FAIL;
 8004230:	2003      	movs	r0, #3
 8004232:	e7f3      	b.n	800421c <USBD_Init+0x28>
 8004234:	080065b0 	.word	0x080065b0
 8004238:	080065b8 	.word	0x080065b8

0800423c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800423c:	b510      	push	{r4, lr}
 800423e:	b082      	sub	sp, #8
  uint16_t len = 0U;
 8004240:	2300      	movs	r3, #0
 8004242:	f8ad 3006 	strh.w	r3, [sp, #6]

  if (pclass == NULL)
 8004246:	b161      	cbz	r1, 8004262 <USBD_RegisterClass+0x26>
 8004248:	4604      	mov	r4, r0
#endif
    return USBD_FAIL;
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800424a:	f8c0 12b8 	str.w	r1, [r0, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 800424e:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 8004250:	b193      	cbz	r3, 8004278 <USBD_RegisterClass+0x3c>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8004252:	f10d 0006 	add.w	r0, sp, #6
 8004256:	4798      	blx	r3
 8004258:	f8c4 02cc 	str.w	r0, [r4, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 800425c:	2000      	movs	r0, #0
}
 800425e:	b002      	add	sp, #8
 8004260:	bd10      	pop	{r4, pc}
    USBD_ErrLog("Invalid Class handle");
 8004262:	4806      	ldr	r0, [pc, #24]	; (800427c <USBD_RegisterClass+0x40>)
 8004264:	f001 f8b8 	bl	80053d8 <iprintf>
 8004268:	4805      	ldr	r0, [pc, #20]	; (8004280 <USBD_RegisterClass+0x44>)
 800426a:	f001 f8b5 	bl	80053d8 <iprintf>
 800426e:	200a      	movs	r0, #10
 8004270:	f001 f8ca 	bl	8005408 <putchar>
    return USBD_FAIL;
 8004274:	2003      	movs	r0, #3
 8004276:	e7f2      	b.n	800425e <USBD_RegisterClass+0x22>
  return USBD_OK;
 8004278:	2000      	movs	r0, #0
 800427a:	e7f0      	b.n	800425e <USBD_RegisterClass+0x22>
 800427c:	080065b0 	.word	0x080065b0
 8004280:	080065d0 	.word	0x080065d0

08004284 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8004284:	b508      	push	{r3, lr}
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8004286:	f7ff ff72 	bl	800416e <USBD_LL_Start>
}
 800428a:	bd08      	pop	{r3, pc}

0800428c <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800428c:	b508      	push	{r3, lr}
  USBD_StatusTypeDef ret = USBD_FAIL;

  if (pdev->pClass != NULL)
 800428e:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8004292:	b113      	cbz	r3, 800429a <USBD_SetClassConfig+0xe>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	4798      	blx	r3
  }

  return ret;
}
 8004298:	bd08      	pop	{r3, pc}
  USBD_StatusTypeDef ret = USBD_FAIL;
 800429a:	2003      	movs	r0, #3
 800429c:	e7fc      	b.n	8004298 <USBD_SetClassConfig+0xc>

0800429e <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800429e:	b508      	push	{r3, lr}
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 80042a0:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 80042a4:	b10b      	cbz	r3, 80042aa <USBD_ClrClassConfig+0xc>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 80042a6:	685b      	ldr	r3, [r3, #4]
 80042a8:	4798      	blx	r3
  }

  return USBD_OK;
}
 80042aa:	2000      	movs	r0, #0
 80042ac:	bd08      	pop	{r3, pc}

080042ae <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80042ae:	b538      	push	{r3, r4, r5, lr}
 80042b0:	4604      	mov	r4, r0
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80042b2:	f200 25aa 	addw	r5, r0, #682	; 0x2aa
 80042b6:	4628      	mov	r0, r5
 80042b8:	f000 f964 	bl	8004584 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80042bc:	2301      	movs	r3, #1
 80042be:	f8c4 3294 	str.w	r3, [r4, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80042c2:	f8b4 32b0 	ldrh.w	r3, [r4, #688]	; 0x2b0
 80042c6:	f8c4 3298 	str.w	r3, [r4, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80042ca:	f894 12aa 	ldrb.w	r1, [r4, #682]	; 0x2aa
 80042ce:	f001 031f 	and.w	r3, r1, #31
 80042d2:	2b01      	cmp	r3, #1
 80042d4:	d00d      	beq.n	80042f2 <USBD_LL_SetupStage+0x44>
 80042d6:	2b02      	cmp	r3, #2
 80042d8:	d010      	beq.n	80042fc <USBD_LL_SetupStage+0x4e>
 80042da:	b12b      	cbz	r3, 80042e8 <USBD_LL_SetupStage+0x3a>
    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
      break;

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80042dc:	f001 0180 	and.w	r1, r1, #128	; 0x80
 80042e0:	4620      	mov	r0, r4
 80042e2:	f7ff ff5f 	bl	80041a4 <USBD_LL_StallEP>
      break;
 80042e6:	e003      	b.n	80042f0 <USBD_LL_SetupStage+0x42>
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80042e8:	4629      	mov	r1, r5
 80042ea:	4620      	mov	r0, r4
 80042ec:	f000 fb09 	bl	8004902 <USBD_StdDevReq>
  }

  return ret;
}
 80042f0:	bd38      	pop	{r3, r4, r5, pc}
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80042f2:	4629      	mov	r1, r5
 80042f4:	4620      	mov	r0, r4
 80042f6:	f000 fb3c 	bl	8004972 <USBD_StdItfReq>
      break;
 80042fa:	e7f9      	b.n	80042f0 <USBD_LL_SetupStage+0x42>
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80042fc:	4629      	mov	r1, r5
 80042fe:	4620      	mov	r0, r4
 8004300:	f000 fb6b 	bl	80049da <USBD_StdEPReq>
      break;
 8004304:	e7f4      	b.n	80042f0 <USBD_LL_SetupStage+0x42>

08004306 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8004306:	b538      	push	{r3, r4, r5, lr}
 8004308:	4604      	mov	r4, r0
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800430a:	460d      	mov	r5, r1
 800430c:	bb41      	cbnz	r1, 8004360 <USBD_LL_DataOutStage+0x5a>
 800430e:	4613      	mov	r3, r2
  {
    pep = &pdev->ep_out[0];

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8004310:	f8d0 2294 	ldr.w	r2, [r0, #660]	; 0x294
 8004314:	2a03      	cmp	r2, #3
 8004316:	d001      	beq.n	800431c <USBD_LL_DataOutStage+0x16>
        }
      }
    }
  }

  return USBD_OK;
 8004318:	4608      	mov	r0, r1
}
 800431a:	bd38      	pop	{r3, r4, r5, pc}
      if (pep->rem_length > pep->maxpacket)
 800431c:	f8d0 115c 	ldr.w	r1, [r0, #348]	; 0x15c
 8004320:	f8d0 2160 	ldr.w	r2, [r0, #352]	; 0x160
 8004324:	4291      	cmp	r1, r2
 8004326:	d809      	bhi.n	800433c <USBD_LL_DataOutStage+0x36>
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004328:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800432c:	b2db      	uxtb	r3, r3
 800432e:	2b03      	cmp	r3, #3
 8004330:	d00f      	beq.n	8004352 <USBD_LL_DataOutStage+0x4c>
        (void)USBD_CtlSendStatus(pdev);
 8004332:	4620      	mov	r0, r4
 8004334:	f000 fea6 	bl	8005084 <USBD_CtlSendStatus>
  return USBD_OK;
 8004338:	4628      	mov	r0, r5
 800433a:	e7ee      	b.n	800431a <USBD_LL_DataOutStage+0x14>
        pep->rem_length -= pep->maxpacket;
 800433c:	1a89      	subs	r1, r1, r2
 800433e:	f8c0 115c 	str.w	r1, [r0, #348]	; 0x15c
        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8004342:	428a      	cmp	r2, r1
 8004344:	bf28      	it	cs
 8004346:	460a      	movcs	r2, r1
 8004348:	4619      	mov	r1, r3
 800434a:	f000 fe93 	bl	8005074 <USBD_CtlContinueRx>
  return USBD_OK;
 800434e:	4628      	mov	r0, r5
 8004350:	e7e3      	b.n	800431a <USBD_LL_DataOutStage+0x14>
          if (pdev->pClass->EP0_RxReady != NULL)
 8004352:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8004356:	691b      	ldr	r3, [r3, #16]
 8004358:	2b00      	cmp	r3, #0
 800435a:	d0ea      	beq.n	8004332 <USBD_LL_DataOutStage+0x2c>
            pdev->pClass->EP0_RxReady(pdev);
 800435c:	4798      	blx	r3
 800435e:	e7e8      	b.n	8004332 <USBD_LL_DataOutStage+0x2c>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004360:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8004364:	b2db      	uxtb	r3, r3
 8004366:	2b03      	cmp	r3, #3
 8004368:	d001      	beq.n	800436e <USBD_LL_DataOutStage+0x68>
  return USBD_OK;
 800436a:	2000      	movs	r0, #0
 800436c:	e7d5      	b.n	800431a <USBD_LL_DataOutStage+0x14>
      if (pdev->pClass->DataOut != NULL)
 800436e:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8004372:	699b      	ldr	r3, [r3, #24]
 8004374:	b10b      	cbz	r3, 800437a <USBD_LL_DataOutStage+0x74>
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8004376:	4798      	blx	r3
        if (ret != USBD_OK)
 8004378:	e7cf      	b.n	800431a <USBD_LL_DataOutStage+0x14>
  return USBD_OK;
 800437a:	2000      	movs	r0, #0
 800437c:	e7cd      	b.n	800431a <USBD_LL_DataOutStage+0x14>

0800437e <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800437e:	b538      	push	{r3, r4, r5, lr}
 8004380:	4604      	mov	r4, r0
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8004382:	460d      	mov	r5, r1
 8004384:	2900      	cmp	r1, #0
 8004386:	d14a      	bne.n	800441e <USBD_LL_DataInStage+0xa0>
 8004388:	4613      	mov	r3, r2
  {
    pep = &pdev->ep_in[0];

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800438a:	f8d0 2294 	ldr.w	r2, [r0, #660]	; 0x294
 800438e:	2a02      	cmp	r2, #2
 8004390:	d005      	beq.n	800439e <USBD_LL_DataInStage+0x20>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8004392:	f894 32a0 	ldrb.w	r3, [r4, #672]	; 0x2a0
 8004396:	2b01      	cmp	r3, #1
 8004398:	d03c      	beq.n	8004414 <USBD_LL_DataInStage+0x96>
        }
      }
    }
  }

  return USBD_OK;
 800439a:	4628      	mov	r0, r5
}
 800439c:	bd38      	pop	{r3, r4, r5, pc}
      if (pep->rem_length > pep->maxpacket)
 800439e:	69c2      	ldr	r2, [r0, #28]
 80043a0:	6a01      	ldr	r1, [r0, #32]
 80043a2:	428a      	cmp	r2, r1
 80043a4:	d80e      	bhi.n	80043c4 <USBD_LL_DataInStage+0x46>
        if ((pep->maxpacket == pep->rem_length) &&
 80043a6:	428a      	cmp	r2, r1
 80043a8:	d018      	beq.n	80043dc <USBD_LL_DataInStage+0x5e>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80043aa:	f894 329c 	ldrb.w	r3, [r4, #668]	; 0x29c
 80043ae:	b2db      	uxtb	r3, r3
 80043b0:	2b03      	cmp	r3, #3
 80043b2:	d027      	beq.n	8004404 <USBD_LL_DataInStage+0x86>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80043b4:	2180      	movs	r1, #128	; 0x80
 80043b6:	4620      	mov	r0, r4
 80043b8:	f7ff fef4 	bl	80041a4 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80043bc:	4620      	mov	r0, r4
 80043be:	f000 fe6c 	bl	800509a <USBD_CtlReceiveStatus>
 80043c2:	e7e6      	b.n	8004392 <USBD_LL_DataInStage+0x14>
        pep->rem_length -= pep->maxpacket;
 80043c4:	1a52      	subs	r2, r2, r1
 80043c6:	61c2      	str	r2, [r0, #28]
        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80043c8:	4619      	mov	r1, r3
 80043ca:	f000 fe3c 	bl	8005046 <USBD_CtlContinueSendData>
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80043ce:	2300      	movs	r3, #0
 80043d0:	461a      	mov	r2, r3
 80043d2:	4619      	mov	r1, r3
 80043d4:	4620      	mov	r0, r4
 80043d6:	f7ff ff05 	bl	80041e4 <USBD_LL_PrepareReceive>
 80043da:	e7da      	b.n	8004392 <USBD_LL_DataInStage+0x14>
            (pep->total_length >= pep->maxpacket) &&
 80043dc:	6983      	ldr	r3, [r0, #24]
        if ((pep->maxpacket == pep->rem_length) &&
 80043de:	4299      	cmp	r1, r3
 80043e0:	d8e3      	bhi.n	80043aa <USBD_LL_DataInStage+0x2c>
            (pep->total_length < pdev->ep0_data_len))
 80043e2:	f8d0 2298 	ldr.w	r2, [r0, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80043e6:	4293      	cmp	r3, r2
 80043e8:	d2df      	bcs.n	80043aa <USBD_LL_DataInStage+0x2c>
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80043ea:	2200      	movs	r2, #0
 80043ec:	4611      	mov	r1, r2
 80043ee:	f000 fe2a 	bl	8005046 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80043f2:	2100      	movs	r1, #0
 80043f4:	f8c4 1298 	str.w	r1, [r4, #664]	; 0x298
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80043f8:	460b      	mov	r3, r1
 80043fa:	460a      	mov	r2, r1
 80043fc:	4620      	mov	r0, r4
 80043fe:	f7ff fef1 	bl	80041e4 <USBD_LL_PrepareReceive>
 8004402:	e7c6      	b.n	8004392 <USBD_LL_DataInStage+0x14>
            if (pdev->pClass->EP0_TxSent != NULL)
 8004404:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
 8004408:	68db      	ldr	r3, [r3, #12]
 800440a:	2b00      	cmp	r3, #0
 800440c:	d0d2      	beq.n	80043b4 <USBD_LL_DataInStage+0x36>
              pdev->pClass->EP0_TxSent(pdev);
 800440e:	4620      	mov	r0, r4
 8004410:	4798      	blx	r3
 8004412:	e7cf      	b.n	80043b4 <USBD_LL_DataInStage+0x36>
      pdev->dev_test_mode = 0U;
 8004414:	2300      	movs	r3, #0
 8004416:	f884 32a0 	strb.w	r3, [r4, #672]	; 0x2a0
  return USBD_OK;
 800441a:	4628      	mov	r0, r5
 800441c:	e7be      	b.n	800439c <USBD_LL_DataInStage+0x1e>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800441e:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8004422:	b2db      	uxtb	r3, r3
 8004424:	2b03      	cmp	r3, #3
 8004426:	d001      	beq.n	800442c <USBD_LL_DataInStage+0xae>
  return USBD_OK;
 8004428:	2000      	movs	r0, #0
 800442a:	e7b7      	b.n	800439c <USBD_LL_DataInStage+0x1e>
      if (pdev->pClass->DataIn != NULL)
 800442c:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8004430:	695b      	ldr	r3, [r3, #20]
 8004432:	b10b      	cbz	r3, 8004438 <USBD_LL_DataInStage+0xba>
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8004434:	4798      	blx	r3
        if (ret != USBD_OK)
 8004436:	e7b1      	b.n	800439c <USBD_LL_DataInStage+0x1e>
  return USBD_OK;
 8004438:	2000      	movs	r0, #0
 800443a:	e7af      	b.n	800439c <USBD_LL_DataInStage+0x1e>

0800443c <USBD_LL_Reset>:
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800443c:	2301      	movs	r3, #1
 800443e:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8004442:	2300      	movs	r3, #0
 8004444:	f8c0 3294 	str.w	r3, [r0, #660]	; 0x294
  pdev->dev_config = 0U;
 8004448:	6043      	str	r3, [r0, #4]
  pdev->dev_remote_wakeup = 0U;
 800444a:	f8c0 32a4 	str.w	r3, [r0, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 800444e:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8004452:	b1f3      	cbz	r3, 8004492 <USBD_LL_Reset+0x56>
{
 8004454:	b570      	push	{r4, r5, r6, lr}
 8004456:	4604      	mov	r4, r0
  {
    return USBD_FAIL;
  }

  if (pdev->pClassData != NULL)
 8004458:	f8d0 22bc 	ldr.w	r2, [r0, #700]	; 0x2bc
 800445c:	b11a      	cbz	r2, 8004466 <USBD_LL_Reset+0x2a>
  {
    if (pdev->pClass->DeInit != NULL)
 800445e:	685b      	ldr	r3, [r3, #4]
 8004460:	b10b      	cbz	r3, 8004466 <USBD_LL_Reset+0x2a>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8004462:	2100      	movs	r1, #0
 8004464:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8004466:	2340      	movs	r3, #64	; 0x40
 8004468:	2200      	movs	r2, #0
 800446a:	4611      	mov	r1, r2
 800446c:	4620      	mov	r0, r4
 800446e:	f7ff fe86 	bl	800417e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8004472:	2601      	movs	r6, #1
 8004474:	f8a4 6164 	strh.w	r6, [r4, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8004478:	2540      	movs	r5, #64	; 0x40
 800447a:	f8c4 5160 	str.w	r5, [r4, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800447e:	462b      	mov	r3, r5
 8004480:	2200      	movs	r2, #0
 8004482:	2180      	movs	r1, #128	; 0x80
 8004484:	4620      	mov	r0, r4
 8004486:	f7ff fe7a 	bl	800417e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800448a:	84a6      	strh	r6, [r4, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800448c:	6225      	str	r5, [r4, #32]

  return USBD_OK;
 800448e:	2000      	movs	r0, #0
}
 8004490:	bd70      	pop	{r4, r5, r6, pc}
    return USBD_FAIL;
 8004492:	2003      	movs	r0, #3
}
 8004494:	4770      	bx	lr

08004496 <USBD_LL_SetSpeed>:
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
  pdev->dev_speed = speed;
 8004496:	7401      	strb	r1, [r0, #16]

  return USBD_OK;
}
 8004498:	2000      	movs	r0, #0
 800449a:	4770      	bx	lr

0800449c <USBD_LL_Suspend>:
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
  pdev->dev_old_state = pdev->dev_state;
 800449c:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80044a0:	b2db      	uxtb	r3, r3
 80044a2:	f880 329d 	strb.w	r3, [r0, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 80044a6:	2304      	movs	r3, #4
 80044a8:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c

  return USBD_OK;
}
 80044ac:	2000      	movs	r0, #0
 80044ae:	4770      	bx	lr

080044b0 <USBD_LL_Resume>:
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80044b0:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80044b4:	b2db      	uxtb	r3, r3
 80044b6:	2b04      	cmp	r3, #4
 80044b8:	d001      	beq.n	80044be <USBD_LL_Resume+0xe>
  {
    pdev->dev_state = pdev->dev_old_state;
  }

  return USBD_OK;
}
 80044ba:	2000      	movs	r0, #0
 80044bc:	4770      	bx	lr
    pdev->dev_state = pdev->dev_old_state;
 80044be:	f890 329d 	ldrb.w	r3, [r0, #669]	; 0x29d
 80044c2:	b2db      	uxtb	r3, r3
 80044c4:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
 80044c8:	e7f7      	b.n	80044ba <USBD_LL_Resume+0xa>

080044ca <USBD_LL_SOF>:
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
  if (pdev->pClass == NULL)
 80044ca:	f8d0 22b8 	ldr.w	r2, [r0, #696]	; 0x2b8
 80044ce:	b162      	cbz	r2, 80044ea <USBD_LL_SOF+0x20>
{
 80044d0:	b508      	push	{r3, lr}
  {
    return USBD_FAIL;
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80044d2:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80044d6:	b2db      	uxtb	r3, r3
 80044d8:	2b03      	cmp	r3, #3
 80044da:	d001      	beq.n	80044e0 <USBD_LL_SOF+0x16>
    {
      (void)pdev->pClass->SOF(pdev);
    }
  }

  return USBD_OK;
 80044dc:	2000      	movs	r0, #0
}
 80044de:	bd08      	pop	{r3, pc}
    if (pdev->pClass->SOF != NULL)
 80044e0:	69d3      	ldr	r3, [r2, #28]
 80044e2:	b123      	cbz	r3, 80044ee <USBD_LL_SOF+0x24>
      (void)pdev->pClass->SOF(pdev);
 80044e4:	4798      	blx	r3
  return USBD_OK;
 80044e6:	2000      	movs	r0, #0
 80044e8:	e7f9      	b.n	80044de <USBD_LL_SOF+0x14>
    return USBD_FAIL;
 80044ea:	2003      	movs	r0, #3
}
 80044ec:	4770      	bx	lr
  return USBD_OK;
 80044ee:	2000      	movs	r0, #0
 80044f0:	e7f5      	b.n	80044de <USBD_LL_SOF+0x14>

080044f2 <USBD_LL_IsoINIncomplete>:
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
  if (pdev->pClass == NULL)
 80044f2:	f8d0 22b8 	ldr.w	r2, [r0, #696]	; 0x2b8
 80044f6:	b162      	cbz	r2, 8004512 <USBD_LL_IsoINIncomplete+0x20>
{
 80044f8:	b508      	push	{r3, lr}
  {
    return USBD_FAIL;
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80044fa:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80044fe:	b2db      	uxtb	r3, r3
 8004500:	2b03      	cmp	r3, #3
 8004502:	d001      	beq.n	8004508 <USBD_LL_IsoINIncomplete+0x16>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
    }
  }

  return USBD_OK;
 8004504:	2000      	movs	r0, #0
}
 8004506:	bd08      	pop	{r3, pc}
    if (pdev->pClass->IsoINIncomplete != NULL)
 8004508:	6a13      	ldr	r3, [r2, #32]
 800450a:	b123      	cbz	r3, 8004516 <USBD_LL_IsoINIncomplete+0x24>
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 800450c:	4798      	blx	r3
  return USBD_OK;
 800450e:	2000      	movs	r0, #0
 8004510:	e7f9      	b.n	8004506 <USBD_LL_IsoINIncomplete+0x14>
    return USBD_FAIL;
 8004512:	2003      	movs	r0, #3
}
 8004514:	4770      	bx	lr
  return USBD_OK;
 8004516:	2000      	movs	r0, #0
 8004518:	e7f5      	b.n	8004506 <USBD_LL_IsoINIncomplete+0x14>

0800451a <USBD_LL_IsoOUTIncomplete>:
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
  if (pdev->pClass == NULL)
 800451a:	f8d0 22b8 	ldr.w	r2, [r0, #696]	; 0x2b8
 800451e:	b162      	cbz	r2, 800453a <USBD_LL_IsoOUTIncomplete+0x20>
{
 8004520:	b508      	push	{r3, lr}
  {
    return USBD_FAIL;
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004522:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8004526:	b2db      	uxtb	r3, r3
 8004528:	2b03      	cmp	r3, #3
 800452a:	d001      	beq.n	8004530 <USBD_LL_IsoOUTIncomplete+0x16>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
    }
  }

  return USBD_OK;
 800452c:	2000      	movs	r0, #0
}
 800452e:	bd08      	pop	{r3, pc}
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 8004530:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8004532:	b123      	cbz	r3, 800453e <USBD_LL_IsoOUTIncomplete+0x24>
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 8004534:	4798      	blx	r3
  return USBD_OK;
 8004536:	2000      	movs	r0, #0
 8004538:	e7f9      	b.n	800452e <USBD_LL_IsoOUTIncomplete+0x14>
    return USBD_FAIL;
 800453a:	2003      	movs	r0, #3
}
 800453c:	4770      	bx	lr
  return USBD_OK;
 800453e:	2000      	movs	r0, #0
 8004540:	e7f5      	b.n	800452e <USBD_LL_IsoOUTIncomplete+0x14>

08004542 <USBD_LL_DevConnected>:
{
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
}
 8004542:	2000      	movs	r0, #0
 8004544:	4770      	bx	lr

08004546 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8004546:	b508      	push	{r3, lr}
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8004548:	2301      	movs	r3, #1
 800454a:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c

  if (pdev->pClass != NULL)
 800454e:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8004552:	b113      	cbz	r3, 800455a <USBD_LL_DevDisconnected+0x14>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8004554:	685b      	ldr	r3, [r3, #4]
 8004556:	7901      	ldrb	r1, [r0, #4]
 8004558:	4798      	blx	r3
  }

  return USBD_OK;
}
 800455a:	2000      	movs	r0, #0
 800455c:	bd08      	pop	{r3, pc}

0800455e <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800455e:	4603      	mov	r3, r0
  uint8_t  len = 0U;
 8004560:	2000      	movs	r0, #0
  uint8_t *pbuff = buf;

  while (*pbuff != (uint8_t)'\0')
 8004562:	781a      	ldrb	r2, [r3, #0]
 8004564:	b11a      	cbz	r2, 800456e <USBD_GetLen+0x10>
  {
    len++;
 8004566:	3001      	adds	r0, #1
 8004568:	b2c0      	uxtb	r0, r0
    pbuff++;
 800456a:	3301      	adds	r3, #1
 800456c:	e7f9      	b.n	8004562 <USBD_GetLen+0x4>
  }

  return len;
}
 800456e:	4770      	bx	lr

08004570 <USBD_SetFeature>:
{
 8004570:	b508      	push	{r3, lr}
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8004572:	884b      	ldrh	r3, [r1, #2]
 8004574:	2b01      	cmp	r3, #1
 8004576:	d000      	beq.n	800457a <USBD_SetFeature+0xa>
}
 8004578:	bd08      	pop	{r3, pc}
    pdev->dev_remote_wakeup = 1U;
 800457a:	f8c0 32a4 	str.w	r3, [r0, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800457e:	f000 fd81 	bl	8005084 <USBD_CtlSendStatus>
}
 8004582:	e7f9      	b.n	8004578 <USBD_SetFeature+0x8>

08004584 <USBD_ParseSetupRequest>:
  req->bmRequest = *(uint8_t *)(pbuff);
 8004584:	780b      	ldrb	r3, [r1, #0]
 8004586:	7003      	strb	r3, [r0, #0]
  req->bRequest = *(uint8_t *)(pbuff);
 8004588:	784b      	ldrb	r3, [r1, #1]
 800458a:	7043      	strb	r3, [r0, #1]
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;

  _Byte1 = *(uint8_t *)_pbuff;
 800458c:	788b      	ldrb	r3, [r1, #2]
  _pbuff++;
  _Byte2 = *(uint8_t *)_pbuff;
 800458e:	78ca      	ldrb	r2, [r1, #3]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8004590:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  req->wValue = SWAPBYTE(pbuff);
 8004594:	8043      	strh	r3, [r0, #2]
  _Byte1 = *(uint8_t *)_pbuff;
 8004596:	790b      	ldrb	r3, [r1, #4]
  _Byte2 = *(uint8_t *)_pbuff;
 8004598:	794a      	ldrb	r2, [r1, #5]
  _SwapVal = (_Byte2 << 8) | _Byte1;
 800459a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  req->wIndex = SWAPBYTE(pbuff);
 800459e:	8083      	strh	r3, [r0, #4]
  _Byte1 = *(uint8_t *)_pbuff;
 80045a0:	798b      	ldrb	r3, [r1, #6]
  _Byte2 = *(uint8_t *)_pbuff;
 80045a2:	79ca      	ldrb	r2, [r1, #7]
  _SwapVal = (_Byte2 << 8) | _Byte1;
 80045a4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  req->wLength = SWAPBYTE(pbuff);
 80045a8:	80c3      	strh	r3, [r0, #6]
}
 80045aa:	4770      	bx	lr

080045ac <USBD_CtlError>:
{
 80045ac:	b510      	push	{r4, lr}
 80045ae:	4604      	mov	r4, r0
  (void)USBD_LL_StallEP(pdev, 0x80U);
 80045b0:	2180      	movs	r1, #128	; 0x80
 80045b2:	f7ff fdf7 	bl	80041a4 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80045b6:	2100      	movs	r1, #0
 80045b8:	4620      	mov	r0, r4
 80045ba:	f7ff fdf3 	bl	80041a4 <USBD_LL_StallEP>
}
 80045be:	bd10      	pop	{r4, pc}

080045c0 <USBD_GetDescriptor>:
{
 80045c0:	b530      	push	{r4, r5, lr}
 80045c2:	b083      	sub	sp, #12
 80045c4:	4604      	mov	r4, r0
 80045c6:	460d      	mov	r5, r1
  uint16_t len = 0U;
 80045c8:	2300      	movs	r3, #0
 80045ca:	f8ad 3006 	strh.w	r3, [sp, #6]
  switch (req->wValue >> 8)
 80045ce:	884a      	ldrh	r2, [r1, #2]
 80045d0:	0a13      	lsrs	r3, r2, #8
 80045d2:	3b01      	subs	r3, #1
 80045d4:	2b06      	cmp	r3, #6
 80045d6:	f200 80ab 	bhi.w	8004730 <USBD_GetDescriptor+0x170>
 80045da:	e8df f003 	tbb	[pc, r3]
 80045de:	1f04      	.short	0x1f04
 80045e0:	8da9a933 	.word	0x8da9a933
 80045e4:	9a          	.byte	0x9a
 80045e5:	00          	.byte	0x00
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80045e6:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	f10d 0106 	add.w	r1, sp, #6
 80045f0:	7c00      	ldrb	r0, [r0, #16]
 80045f2:	4798      	blx	r3
  if (req->wLength != 0U)
 80045f4:	88ea      	ldrh	r2, [r5, #6]
 80045f6:	2a00      	cmp	r2, #0
 80045f8:	f000 80a3 	beq.w	8004742 <USBD_GetDescriptor+0x182>
    if (len != 0U)
 80045fc:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8004600:	2b00      	cmp	r3, #0
 8004602:	f000 8099 	beq.w	8004738 <USBD_GetDescriptor+0x178>
      len = MIN(len, req->wLength);
 8004606:	429a      	cmp	r2, r3
 8004608:	bf28      	it	cs
 800460a:	461a      	movcs	r2, r3
 800460c:	f8ad 2006 	strh.w	r2, [sp, #6]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8004610:	4601      	mov	r1, r0
 8004612:	4620      	mov	r0, r4
 8004614:	f000 fd0a 	bl	800502c <USBD_CtlSendData>
}
 8004618:	b003      	add	sp, #12
 800461a:	bd30      	pop	{r4, r5, pc}
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800461c:	7c03      	ldrb	r3, [r0, #16]
 800461e:	b943      	cbnz	r3, 8004632 <USBD_GetDescriptor+0x72>
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8004620:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8004624:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004626:	f10d 0006 	add.w	r0, sp, #6
 800462a:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800462c:	2302      	movs	r3, #2
 800462e:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 8004630:	e7e0      	b.n	80045f4 <USBD_GetDescriptor+0x34>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8004632:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8004636:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004638:	f10d 0006 	add.w	r0, sp, #6
 800463c:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800463e:	2302      	movs	r3, #2
 8004640:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 8004642:	e7d7      	b.n	80045f4 <USBD_GetDescriptor+0x34>
      switch ((uint8_t)(req->wValue))
 8004644:	b2d2      	uxtb	r2, r2
 8004646:	2a05      	cmp	r2, #5
 8004648:	d852      	bhi.n	80046f0 <USBD_GetDescriptor+0x130>
 800464a:	e8df f002 	tbb	[pc, r2]
 800464e:	1003      	.short	0x1003
 8004650:	44372a1d 	.word	0x44372a1d
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8004654:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8004658:	685b      	ldr	r3, [r3, #4]
 800465a:	b123      	cbz	r3, 8004666 <USBD_GetDescriptor+0xa6>
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800465c:	f10d 0106 	add.w	r1, sp, #6
 8004660:	7c00      	ldrb	r0, [r0, #16]
 8004662:	4798      	blx	r3
  if (err != 0U)
 8004664:	e7c6      	b.n	80045f4 <USBD_GetDescriptor+0x34>
            USBD_CtlError(pdev, req);
 8004666:	4629      	mov	r1, r5
 8004668:	f7ff ffa0 	bl	80045ac <USBD_CtlError>
  if (err != 0U)
 800466c:	e7d4      	b.n	8004618 <USBD_GetDescriptor+0x58>
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800466e:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8004672:	689b      	ldr	r3, [r3, #8]
 8004674:	b123      	cbz	r3, 8004680 <USBD_GetDescriptor+0xc0>
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8004676:	f10d 0106 	add.w	r1, sp, #6
 800467a:	7c00      	ldrb	r0, [r0, #16]
 800467c:	4798      	blx	r3
  if (err != 0U)
 800467e:	e7b9      	b.n	80045f4 <USBD_GetDescriptor+0x34>
            USBD_CtlError(pdev, req);
 8004680:	4629      	mov	r1, r5
 8004682:	f7ff ff93 	bl	80045ac <USBD_CtlError>
  if (err != 0U)
 8004686:	e7c7      	b.n	8004618 <USBD_GetDescriptor+0x58>
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8004688:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800468c:	68db      	ldr	r3, [r3, #12]
 800468e:	b123      	cbz	r3, 800469a <USBD_GetDescriptor+0xda>
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8004690:	f10d 0106 	add.w	r1, sp, #6
 8004694:	7c00      	ldrb	r0, [r0, #16]
 8004696:	4798      	blx	r3
  if (err != 0U)
 8004698:	e7ac      	b.n	80045f4 <USBD_GetDescriptor+0x34>
            USBD_CtlError(pdev, req);
 800469a:	4629      	mov	r1, r5
 800469c:	f7ff ff86 	bl	80045ac <USBD_CtlError>
  if (err != 0U)
 80046a0:	e7ba      	b.n	8004618 <USBD_GetDescriptor+0x58>
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80046a2:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 80046a6:	691b      	ldr	r3, [r3, #16]
 80046a8:	b123      	cbz	r3, 80046b4 <USBD_GetDescriptor+0xf4>
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80046aa:	f10d 0106 	add.w	r1, sp, #6
 80046ae:	7c00      	ldrb	r0, [r0, #16]
 80046b0:	4798      	blx	r3
  if (err != 0U)
 80046b2:	e79f      	b.n	80045f4 <USBD_GetDescriptor+0x34>
            USBD_CtlError(pdev, req);
 80046b4:	4629      	mov	r1, r5
 80046b6:	f7ff ff79 	bl	80045ac <USBD_CtlError>
  if (err != 0U)
 80046ba:	e7ad      	b.n	8004618 <USBD_GetDescriptor+0x58>
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80046bc:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 80046c0:	695b      	ldr	r3, [r3, #20]
 80046c2:	b123      	cbz	r3, 80046ce <USBD_GetDescriptor+0x10e>
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80046c4:	f10d 0106 	add.w	r1, sp, #6
 80046c8:	7c00      	ldrb	r0, [r0, #16]
 80046ca:	4798      	blx	r3
  if (err != 0U)
 80046cc:	e792      	b.n	80045f4 <USBD_GetDescriptor+0x34>
            USBD_CtlError(pdev, req);
 80046ce:	4629      	mov	r1, r5
 80046d0:	f7ff ff6c 	bl	80045ac <USBD_CtlError>
  if (err != 0U)
 80046d4:	e7a0      	b.n	8004618 <USBD_GetDescriptor+0x58>
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80046d6:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 80046da:	699b      	ldr	r3, [r3, #24]
 80046dc:	b123      	cbz	r3, 80046e8 <USBD_GetDescriptor+0x128>
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80046de:	f10d 0106 	add.w	r1, sp, #6
 80046e2:	7c00      	ldrb	r0, [r0, #16]
 80046e4:	4798      	blx	r3
  if (err != 0U)
 80046e6:	e785      	b.n	80045f4 <USBD_GetDescriptor+0x34>
            USBD_CtlError(pdev, req);
 80046e8:	4629      	mov	r1, r5
 80046ea:	f7ff ff5f 	bl	80045ac <USBD_CtlError>
  if (err != 0U)
 80046ee:	e793      	b.n	8004618 <USBD_GetDescriptor+0x58>
          USBD_CtlError(pdev, req);
 80046f0:	4629      	mov	r1, r5
 80046f2:	f7ff ff5b 	bl	80045ac <USBD_CtlError>
  if (err != 0U)
 80046f6:	e78f      	b.n	8004618 <USBD_GetDescriptor+0x58>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80046f8:	7c03      	ldrb	r3, [r0, #16]
 80046fa:	b933      	cbnz	r3, 800470a <USBD_GetDescriptor+0x14a>
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80046fc:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8004700:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004702:	f10d 0006 	add.w	r0, sp, #6
 8004706:	4798      	blx	r3
  if (err != 0U)
 8004708:	e774      	b.n	80045f4 <USBD_GetDescriptor+0x34>
        USBD_CtlError(pdev, req);
 800470a:	4629      	mov	r1, r5
 800470c:	f7ff ff4e 	bl	80045ac <USBD_CtlError>
  if (err != 0U)
 8004710:	e782      	b.n	8004618 <USBD_GetDescriptor+0x58>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004712:	7c03      	ldrb	r3, [r0, #16]
 8004714:	b943      	cbnz	r3, 8004728 <USBD_GetDescriptor+0x168>
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8004716:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 800471a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800471c:	f10d 0006 	add.w	r0, sp, #6
 8004720:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8004722:	2307      	movs	r3, #7
 8004724:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 8004726:	e765      	b.n	80045f4 <USBD_GetDescriptor+0x34>
        USBD_CtlError(pdev, req);
 8004728:	4629      	mov	r1, r5
 800472a:	f7ff ff3f 	bl	80045ac <USBD_CtlError>
  if (err != 0U)
 800472e:	e773      	b.n	8004618 <USBD_GetDescriptor+0x58>
      USBD_CtlError(pdev, req);
 8004730:	4629      	mov	r1, r5
 8004732:	f7ff ff3b 	bl	80045ac <USBD_CtlError>
    return;
 8004736:	e76f      	b.n	8004618 <USBD_GetDescriptor+0x58>
      USBD_CtlError(pdev, req);
 8004738:	4629      	mov	r1, r5
 800473a:	4620      	mov	r0, r4
 800473c:	f7ff ff36 	bl	80045ac <USBD_CtlError>
 8004740:	e76a      	b.n	8004618 <USBD_GetDescriptor+0x58>
    (void)USBD_CtlSendStatus(pdev);
 8004742:	4620      	mov	r0, r4
 8004744:	f000 fc9e 	bl	8005084 <USBD_CtlSendStatus>
 8004748:	e766      	b.n	8004618 <USBD_GetDescriptor+0x58>

0800474a <USBD_SetAddress>:
{
 800474a:	b538      	push	{r3, r4, r5, lr}
 800474c:	4604      	mov	r4, r0
  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800474e:	888b      	ldrh	r3, [r1, #4]
 8004750:	b9fb      	cbnz	r3, 8004792 <USBD_SetAddress+0x48>
 8004752:	88cb      	ldrh	r3, [r1, #6]
 8004754:	b9eb      	cbnz	r3, 8004792 <USBD_SetAddress+0x48>
 8004756:	884b      	ldrh	r3, [r1, #2]
 8004758:	2b7f      	cmp	r3, #127	; 0x7f
 800475a:	d81a      	bhi.n	8004792 <USBD_SetAddress+0x48>
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800475c:	f003 057f 	and.w	r5, r3, #127	; 0x7f
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004760:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8004764:	b2db      	uxtb	r3, r3
 8004766:	2b03      	cmp	r3, #3
 8004768:	d00c      	beq.n	8004784 <USBD_SetAddress+0x3a>
      pdev->dev_address = dev_addr;
 800476a:	f880 529e 	strb.w	r5, [r0, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800476e:	4629      	mov	r1, r5
 8004770:	f7ff fd28 	bl	80041c4 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8004774:	4620      	mov	r0, r4
 8004776:	f000 fc85 	bl	8005084 <USBD_CtlSendStatus>
      if (dev_addr != 0U)
 800477a:	b135      	cbz	r5, 800478a <USBD_SetAddress+0x40>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800477c:	2302      	movs	r3, #2
 800477e:	f884 329c 	strb.w	r3, [r4, #668]	; 0x29c
 8004782:	e009      	b.n	8004798 <USBD_SetAddress+0x4e>
      USBD_CtlError(pdev, req);
 8004784:	f7ff ff12 	bl	80045ac <USBD_CtlError>
 8004788:	e006      	b.n	8004798 <USBD_SetAddress+0x4e>
        pdev->dev_state = USBD_STATE_DEFAULT;
 800478a:	2301      	movs	r3, #1
 800478c:	f884 329c 	strb.w	r3, [r4, #668]	; 0x29c
 8004790:	e002      	b.n	8004798 <USBD_SetAddress+0x4e>
    USBD_CtlError(pdev, req);
 8004792:	4620      	mov	r0, r4
 8004794:	f7ff ff0a 	bl	80045ac <USBD_CtlError>
}
 8004798:	bd38      	pop	{r3, r4, r5, pc}
	...

0800479c <USBD_SetConfig>:
{
 800479c:	b570      	push	{r4, r5, r6, lr}
 800479e:	4604      	mov	r4, r0
 80047a0:	460e      	mov	r6, r1
  cfgidx = (uint8_t)(req->wValue);
 80047a2:	788d      	ldrb	r5, [r1, #2]
 80047a4:	4b2e      	ldr	r3, [pc, #184]	; (8004860 <USBD_SetConfig+0xc4>)
 80047a6:	701d      	strb	r5, [r3, #0]
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80047a8:	2d01      	cmp	r5, #1
 80047aa:	d810      	bhi.n	80047ce <USBD_SetConfig+0x32>
  switch (pdev->dev_state)
 80047ac:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80047b0:	b2db      	uxtb	r3, r3
 80047b2:	2b02      	cmp	r3, #2
 80047b4:	d00f      	beq.n	80047d6 <USBD_SetConfig+0x3a>
 80047b6:	2b03      	cmp	r3, #3
 80047b8:	d023      	beq.n	8004802 <USBD_SetConfig+0x66>
      USBD_CtlError(pdev, req);
 80047ba:	f7ff fef7 	bl	80045ac <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80047be:	4b28      	ldr	r3, [pc, #160]	; (8004860 <USBD_SetConfig+0xc4>)
 80047c0:	7819      	ldrb	r1, [r3, #0]
 80047c2:	4620      	mov	r0, r4
 80047c4:	f7ff fd6b 	bl	800429e <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80047c8:	2503      	movs	r5, #3
}
 80047ca:	4628      	mov	r0, r5
 80047cc:	bd70      	pop	{r4, r5, r6, pc}
    USBD_CtlError(pdev, req);
 80047ce:	f7ff feed 	bl	80045ac <USBD_CtlError>
    return USBD_FAIL;
 80047d2:	2503      	movs	r5, #3
 80047d4:	e7f9      	b.n	80047ca <USBD_SetConfig+0x2e>
      if (cfgidx != 0U)
 80047d6:	b18d      	cbz	r5, 80047fc <USBD_SetConfig+0x60>
        pdev->dev_config = cfgidx;
 80047d8:	6045      	str	r5, [r0, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80047da:	4629      	mov	r1, r5
 80047dc:	f7ff fd56 	bl	800428c <USBD_SetClassConfig>
        if (ret != USBD_OK)
 80047e0:	4605      	mov	r5, r0
 80047e2:	b120      	cbz	r0, 80047ee <USBD_SetConfig+0x52>
          USBD_CtlError(pdev, req);
 80047e4:	4631      	mov	r1, r6
 80047e6:	4620      	mov	r0, r4
 80047e8:	f7ff fee0 	bl	80045ac <USBD_CtlError>
 80047ec:	e7ed      	b.n	80047ca <USBD_SetConfig+0x2e>
          (void)USBD_CtlSendStatus(pdev);
 80047ee:	4620      	mov	r0, r4
 80047f0:	f000 fc48 	bl	8005084 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80047f4:	2303      	movs	r3, #3
 80047f6:	f884 329c 	strb.w	r3, [r4, #668]	; 0x29c
 80047fa:	e7e6      	b.n	80047ca <USBD_SetConfig+0x2e>
        (void)USBD_CtlSendStatus(pdev);
 80047fc:	f000 fc42 	bl	8005084 <USBD_CtlSendStatus>
 8004800:	e7e3      	b.n	80047ca <USBD_SetConfig+0x2e>
      if (cfgidx == 0U)
 8004802:	b1cd      	cbz	r5, 8004838 <USBD_SetConfig+0x9c>
      else if (cfgidx != pdev->dev_config)
 8004804:	6841      	ldr	r1, [r0, #4]
 8004806:	428d      	cmp	r5, r1
 8004808:	d025      	beq.n	8004856 <USBD_SetConfig+0xba>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800480a:	b2c9      	uxtb	r1, r1
 800480c:	f7ff fd47 	bl	800429e <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8004810:	4b13      	ldr	r3, [pc, #76]	; (8004860 <USBD_SetConfig+0xc4>)
 8004812:	7819      	ldrb	r1, [r3, #0]
 8004814:	6061      	str	r1, [r4, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8004816:	4620      	mov	r0, r4
 8004818:	f7ff fd38 	bl	800428c <USBD_SetClassConfig>
        if (ret != USBD_OK)
 800481c:	4605      	mov	r5, r0
 800481e:	b1b0      	cbz	r0, 800484e <USBD_SetConfig+0xb2>
          USBD_CtlError(pdev, req);
 8004820:	4631      	mov	r1, r6
 8004822:	4620      	mov	r0, r4
 8004824:	f7ff fec2 	bl	80045ac <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8004828:	7921      	ldrb	r1, [r4, #4]
 800482a:	4620      	mov	r0, r4
 800482c:	f7ff fd37 	bl	800429e <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8004830:	2302      	movs	r3, #2
 8004832:	f884 329c 	strb.w	r3, [r4, #668]	; 0x29c
 8004836:	e7c8      	b.n	80047ca <USBD_SetConfig+0x2e>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8004838:	2302      	movs	r3, #2
 800483a:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800483e:	6045      	str	r5, [r0, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8004840:	4629      	mov	r1, r5
 8004842:	f7ff fd2c 	bl	800429e <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8004846:	4620      	mov	r0, r4
 8004848:	f000 fc1c 	bl	8005084 <USBD_CtlSendStatus>
 800484c:	e7bd      	b.n	80047ca <USBD_SetConfig+0x2e>
          (void)USBD_CtlSendStatus(pdev);
 800484e:	4620      	mov	r0, r4
 8004850:	f000 fc18 	bl	8005084 <USBD_CtlSendStatus>
 8004854:	e7b9      	b.n	80047ca <USBD_SetConfig+0x2e>
        (void)USBD_CtlSendStatus(pdev);
 8004856:	f000 fc15 	bl	8005084 <USBD_CtlSendStatus>
  USBD_StatusTypeDef ret = USBD_OK;
 800485a:	2500      	movs	r5, #0
 800485c:	e7b5      	b.n	80047ca <USBD_SetConfig+0x2e>
 800485e:	bf00      	nop
 8004860:	20004248 	.word	0x20004248

08004864 <USBD_GetConfig>:
{
 8004864:	b508      	push	{r3, lr}
  if (req->wLength != 1U)
 8004866:	88cb      	ldrh	r3, [r1, #6]
 8004868:	2b01      	cmp	r3, #1
 800486a:	d10b      	bne.n	8004884 <USBD_GetConfig+0x20>
    switch (pdev->dev_state)
 800486c:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8004870:	b2db      	uxtb	r3, r3
 8004872:	2b02      	cmp	r3, #2
 8004874:	d909      	bls.n	800488a <USBD_GetConfig+0x26>
 8004876:	2b03      	cmp	r3, #3
 8004878:	d109      	bne.n	800488e <USBD_GetConfig+0x2a>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800487a:	2201      	movs	r2, #1
 800487c:	1d01      	adds	r1, r0, #4
 800487e:	f000 fbd5 	bl	800502c <USBD_CtlSendData>
        break;
 8004882:	e001      	b.n	8004888 <USBD_GetConfig+0x24>
    USBD_CtlError(pdev, req);
 8004884:	f7ff fe92 	bl	80045ac <USBD_CtlError>
}
 8004888:	bd08      	pop	{r3, pc}
    switch (pdev->dev_state)
 800488a:	b25b      	sxtb	r3, r3
 800488c:	b913      	cbnz	r3, 8004894 <USBD_GetConfig+0x30>
        USBD_CtlError(pdev, req);
 800488e:	f7ff fe8d 	bl	80045ac <USBD_CtlError>
}
 8004892:	e7f9      	b.n	8004888 <USBD_GetConfig+0x24>
        pdev->dev_default_config = 0U;
 8004894:	4601      	mov	r1, r0
 8004896:	2300      	movs	r3, #0
 8004898:	f841 3f08 	str.w	r3, [r1, #8]!
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800489c:	2201      	movs	r2, #1
 800489e:	f000 fbc5 	bl	800502c <USBD_CtlSendData>
        break;
 80048a2:	e7f1      	b.n	8004888 <USBD_GetConfig+0x24>

080048a4 <USBD_GetStatus>:
{
 80048a4:	b508      	push	{r3, lr}
  switch (pdev->dev_state)
 80048a6:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80048aa:	3b01      	subs	r3, #1
 80048ac:	2b02      	cmp	r3, #2
 80048ae:	d812      	bhi.n	80048d6 <USBD_GetStatus+0x32>
      if (req->wLength != 0x2U)
 80048b0:	88cb      	ldrh	r3, [r1, #6]
 80048b2:	2b02      	cmp	r3, #2
 80048b4:	d10c      	bne.n	80048d0 <USBD_GetStatus+0x2c>
      pdev->dev_config_status = 0U;
 80048b6:	2300      	movs	r3, #0
 80048b8:	60c3      	str	r3, [r0, #12]
      if (pdev->dev_remote_wakeup != 0U)
 80048ba:	f8d0 32a4 	ldr.w	r3, [r0, #676]	; 0x2a4
 80048be:	b10b      	cbz	r3, 80048c4 <USBD_GetStatus+0x20>
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80048c0:	2302      	movs	r3, #2
 80048c2:	60c3      	str	r3, [r0, #12]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80048c4:	2202      	movs	r2, #2
 80048c6:	f100 010c 	add.w	r1, r0, #12
 80048ca:	f000 fbaf 	bl	800502c <USBD_CtlSendData>
}
 80048ce:	bd08      	pop	{r3, pc}
        USBD_CtlError(pdev, req);
 80048d0:	f7ff fe6c 	bl	80045ac <USBD_CtlError>
        break;
 80048d4:	e7fb      	b.n	80048ce <USBD_GetStatus+0x2a>
      USBD_CtlError(pdev, req);
 80048d6:	f7ff fe69 	bl	80045ac <USBD_CtlError>
}
 80048da:	e7f8      	b.n	80048ce <USBD_GetStatus+0x2a>

080048dc <USBD_ClrFeature>:
{
 80048dc:	b508      	push	{r3, lr}
  switch (pdev->dev_state)
 80048de:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80048e2:	3b01      	subs	r3, #1
 80048e4:	2b02      	cmp	r3, #2
 80048e6:	d809      	bhi.n	80048fc <USBD_ClrFeature+0x20>
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80048e8:	884b      	ldrh	r3, [r1, #2]
 80048ea:	2b01      	cmp	r3, #1
 80048ec:	d000      	beq.n	80048f0 <USBD_ClrFeature+0x14>
}
 80048ee:	bd08      	pop	{r3, pc}
        pdev->dev_remote_wakeup = 0U;
 80048f0:	2300      	movs	r3, #0
 80048f2:	f8c0 32a4 	str.w	r3, [r0, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80048f6:	f000 fbc5 	bl	8005084 <USBD_CtlSendStatus>
 80048fa:	e7f8      	b.n	80048ee <USBD_ClrFeature+0x12>
      USBD_CtlError(pdev, req);
 80048fc:	f7ff fe56 	bl	80045ac <USBD_CtlError>
}
 8004900:	e7f5      	b.n	80048ee <USBD_ClrFeature+0x12>

08004902 <USBD_StdDevReq>:
{
 8004902:	b538      	push	{r3, r4, r5, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004904:	780c      	ldrb	r4, [r1, #0]
 8004906:	f004 0460 	and.w	r4, r4, #96	; 0x60
 800490a:	2c20      	cmp	r4, #32
 800490c:	d006      	beq.n	800491c <USBD_StdDevReq+0x1a>
 800490e:	2c40      	cmp	r4, #64	; 0x40
 8004910:	d004      	beq.n	800491c <USBD_StdDevReq+0x1a>
 8004912:	b154      	cbz	r4, 800492a <USBD_StdDevReq+0x28>
      USBD_CtlError(pdev, req);
 8004914:	f7ff fe4a 	bl	80045ac <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 8004918:	2400      	movs	r4, #0
      break;
 800491a:	e004      	b.n	8004926 <USBD_StdDevReq+0x24>
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800491c:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8004920:	689b      	ldr	r3, [r3, #8]
 8004922:	4798      	blx	r3
 8004924:	4604      	mov	r4, r0
}
 8004926:	4620      	mov	r0, r4
 8004928:	bd38      	pop	{r3, r4, r5, pc}
      switch (req->bRequest)
 800492a:	784d      	ldrb	r5, [r1, #1]
 800492c:	2d09      	cmp	r5, #9
 800492e:	d81d      	bhi.n	800496c <USBD_StdDevReq+0x6a>
 8004930:	e8df f005 	tbb	[pc, r5]
 8004934:	161c1912 	.word	0x161c1912
 8004938:	1c05081c 	.word	0x1c05081c
 800493c:	0b0f      	.short	0x0b0f
          USBD_GetDescriptor(pdev, req);
 800493e:	f7ff fe3f 	bl	80045c0 <USBD_GetDescriptor>
          break;
 8004942:	e7f0      	b.n	8004926 <USBD_StdDevReq+0x24>
          USBD_SetAddress(pdev, req);
 8004944:	f7ff ff01 	bl	800474a <USBD_SetAddress>
          break;
 8004948:	e7ed      	b.n	8004926 <USBD_StdDevReq+0x24>
          ret = USBD_SetConfig(pdev, req);
 800494a:	f7ff ff27 	bl	800479c <USBD_SetConfig>
 800494e:	4604      	mov	r4, r0
          break;
 8004950:	e7e9      	b.n	8004926 <USBD_StdDevReq+0x24>
          USBD_GetConfig(pdev, req);
 8004952:	f7ff ff87 	bl	8004864 <USBD_GetConfig>
          break;
 8004956:	e7e6      	b.n	8004926 <USBD_StdDevReq+0x24>
          USBD_GetStatus(pdev, req);
 8004958:	f7ff ffa4 	bl	80048a4 <USBD_GetStatus>
  USBD_StatusTypeDef ret = USBD_OK;
 800495c:	462c      	mov	r4, r5
          break;
 800495e:	e7e2      	b.n	8004926 <USBD_StdDevReq+0x24>
          USBD_SetFeature(pdev, req);
 8004960:	f7ff fe06 	bl	8004570 <USBD_SetFeature>
          break;
 8004964:	e7df      	b.n	8004926 <USBD_StdDevReq+0x24>
          USBD_ClrFeature(pdev, req);
 8004966:	f7ff ffb9 	bl	80048dc <USBD_ClrFeature>
          break;
 800496a:	e7dc      	b.n	8004926 <USBD_StdDevReq+0x24>
          USBD_CtlError(pdev, req);
 800496c:	f7ff fe1e 	bl	80045ac <USBD_CtlError>
          break;
 8004970:	e7d9      	b.n	8004926 <USBD_StdDevReq+0x24>

08004972 <USBD_StdItfReq>:
{
 8004972:	b570      	push	{r4, r5, r6, lr}
 8004974:	4605      	mov	r5, r0
 8004976:	460c      	mov	r4, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004978:	780b      	ldrb	r3, [r1, #0]
 800497a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800497e:	2b20      	cmp	r3, #32
 8004980:	d007      	beq.n	8004992 <USBD_StdItfReq+0x20>
 8004982:	2b40      	cmp	r3, #64	; 0x40
 8004984:	d005      	beq.n	8004992 <USBD_StdItfReq+0x20>
 8004986:	b123      	cbz	r3, 8004992 <USBD_StdItfReq+0x20>
      USBD_CtlError(pdev, req);
 8004988:	f7ff fe10 	bl	80045ac <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 800498c:	2600      	movs	r6, #0
}
 800498e:	4630      	mov	r0, r6
 8004990:	bd70      	pop	{r4, r5, r6, pc}
      switch (pdev->dev_state)
 8004992:	f895 329c 	ldrb.w	r3, [r5, #668]	; 0x29c
 8004996:	3b01      	subs	r3, #1
 8004998:	2b02      	cmp	r3, #2
 800499a:	d818      	bhi.n	80049ce <USBD_StdItfReq+0x5c>
          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800499c:	7923      	ldrb	r3, [r4, #4]
 800499e:	2b01      	cmp	r3, #1
 80049a0:	d80f      	bhi.n	80049c2 <USBD_StdItfReq+0x50>
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80049a2:	f8d5 32b8 	ldr.w	r3, [r5, #696]	; 0x2b8
 80049a6:	689b      	ldr	r3, [r3, #8]
 80049a8:	4621      	mov	r1, r4
 80049aa:	4628      	mov	r0, r5
 80049ac:	4798      	blx	r3
 80049ae:	4606      	mov	r6, r0
            if ((req->wLength == 0U) && (ret == USBD_OK))
 80049b0:	88e3      	ldrh	r3, [r4, #6]
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d1eb      	bne.n	800498e <USBD_StdItfReq+0x1c>
 80049b6:	2800      	cmp	r0, #0
 80049b8:	d1e9      	bne.n	800498e <USBD_StdItfReq+0x1c>
              (void)USBD_CtlSendStatus(pdev);
 80049ba:	4628      	mov	r0, r5
 80049bc:	f000 fb62 	bl	8005084 <USBD_CtlSendStatus>
 80049c0:	e7e5      	b.n	800498e <USBD_StdItfReq+0x1c>
            USBD_CtlError(pdev, req);
 80049c2:	4621      	mov	r1, r4
 80049c4:	4628      	mov	r0, r5
 80049c6:	f7ff fdf1 	bl	80045ac <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 80049ca:	2600      	movs	r6, #0
 80049cc:	e7df      	b.n	800498e <USBD_StdItfReq+0x1c>
          USBD_CtlError(pdev, req);
 80049ce:	4621      	mov	r1, r4
 80049d0:	4628      	mov	r0, r5
 80049d2:	f7ff fdeb 	bl	80045ac <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 80049d6:	2600      	movs	r6, #0
          break;
 80049d8:	e7d9      	b.n	800498e <USBD_StdItfReq+0x1c>

080049da <USBD_StdEPReq>:
{
 80049da:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80049dc:	4606      	mov	r6, r0
 80049de:	460d      	mov	r5, r1
  ep_addr = LOBYTE(req->wIndex);
 80049e0:	888b      	ldrh	r3, [r1, #4]
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80049e2:	780c      	ldrb	r4, [r1, #0]
 80049e4:	f004 0460 	and.w	r4, r4, #96	; 0x60
 80049e8:	2c20      	cmp	r4, #32
 80049ea:	d008      	beq.n	80049fe <USBD_StdEPReq+0x24>
 80049ec:	b2d9      	uxtb	r1, r3
 80049ee:	2c40      	cmp	r4, #64	; 0x40
 80049f0:	d005      	beq.n	80049fe <USBD_StdEPReq+0x24>
 80049f2:	b16c      	cbz	r4, 8004a10 <USBD_StdEPReq+0x36>
      USBD_CtlError(pdev, req);
 80049f4:	4629      	mov	r1, r5
 80049f6:	f7ff fdd9 	bl	80045ac <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 80049fa:	2400      	movs	r4, #0
      break;
 80049fc:	e006      	b.n	8004a0c <USBD_StdEPReq+0x32>
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80049fe:	f8d6 32b8 	ldr.w	r3, [r6, #696]	; 0x2b8
 8004a02:	689b      	ldr	r3, [r3, #8]
 8004a04:	4629      	mov	r1, r5
 8004a06:	4630      	mov	r0, r6
 8004a08:	4798      	blx	r3
 8004a0a:	4604      	mov	r4, r0
}
 8004a0c:	4620      	mov	r0, r4
 8004a0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      switch (req->bRequest)
 8004a10:	786f      	ldrb	r7, [r5, #1]
 8004a12:	2f01      	cmp	r7, #1
 8004a14:	d02f      	beq.n	8004a76 <USBD_StdEPReq+0x9c>
 8004a16:	2f03      	cmp	r7, #3
 8004a18:	d005      	beq.n	8004a26 <USBD_StdEPReq+0x4c>
 8004a1a:	2f00      	cmp	r7, #0
 8004a1c:	d059      	beq.n	8004ad2 <USBD_StdEPReq+0xf8>
          USBD_CtlError(pdev, req);
 8004a1e:	4629      	mov	r1, r5
 8004a20:	f7ff fdc4 	bl	80045ac <USBD_CtlError>
          break;
 8004a24:	e7f2      	b.n	8004a0c <USBD_StdEPReq+0x32>
          switch (pdev->dev_state)
 8004a26:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8004a2a:	b2db      	uxtb	r3, r3
 8004a2c:	2b02      	cmp	r3, #2
 8004a2e:	d005      	beq.n	8004a3c <USBD_StdEPReq+0x62>
 8004a30:	2b03      	cmp	r3, #3
 8004a32:	d012      	beq.n	8004a5a <USBD_StdEPReq+0x80>
              USBD_CtlError(pdev, req);
 8004a34:	4629      	mov	r1, r5
 8004a36:	f7ff fdb9 	bl	80045ac <USBD_CtlError>
              break;
 8004a3a:	e7e7      	b.n	8004a0c <USBD_StdEPReq+0x32>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8004a3c:	b109      	cbz	r1, 8004a42 <USBD_StdEPReq+0x68>
 8004a3e:	2980      	cmp	r1, #128	; 0x80
 8004a40:	d104      	bne.n	8004a4c <USBD_StdEPReq+0x72>
                USBD_CtlError(pdev, req);
 8004a42:	4629      	mov	r1, r5
 8004a44:	4630      	mov	r0, r6
 8004a46:	f7ff fdb1 	bl	80045ac <USBD_CtlError>
 8004a4a:	e7df      	b.n	8004a0c <USBD_StdEPReq+0x32>
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8004a4c:	f7ff fbaa 	bl	80041a4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8004a50:	2180      	movs	r1, #128	; 0x80
 8004a52:	4630      	mov	r0, r6
 8004a54:	f7ff fba6 	bl	80041a4 <USBD_LL_StallEP>
 8004a58:	e7d8      	b.n	8004a0c <USBD_StdEPReq+0x32>
              if (req->wValue == USB_FEATURE_EP_HALT)
 8004a5a:	886b      	ldrh	r3, [r5, #2]
 8004a5c:	b923      	cbnz	r3, 8004a68 <USBD_StdEPReq+0x8e>
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8004a5e:	b119      	cbz	r1, 8004a68 <USBD_StdEPReq+0x8e>
 8004a60:	2980      	cmp	r1, #128	; 0x80
 8004a62:	d001      	beq.n	8004a68 <USBD_StdEPReq+0x8e>
 8004a64:	88eb      	ldrh	r3, [r5, #6]
 8004a66:	b11b      	cbz	r3, 8004a70 <USBD_StdEPReq+0x96>
              (void)USBD_CtlSendStatus(pdev);
 8004a68:	4630      	mov	r0, r6
 8004a6a:	f000 fb0b 	bl	8005084 <USBD_CtlSendStatus>
              break;
 8004a6e:	e7cd      	b.n	8004a0c <USBD_StdEPReq+0x32>
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8004a70:	f7ff fb98 	bl	80041a4 <USBD_LL_StallEP>
 8004a74:	e7f8      	b.n	8004a68 <USBD_StdEPReq+0x8e>
          switch (pdev->dev_state)
 8004a76:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8004a7a:	b2db      	uxtb	r3, r3
 8004a7c:	2b02      	cmp	r3, #2
 8004a7e:	d005      	beq.n	8004a8c <USBD_StdEPReq+0xb2>
 8004a80:	2b03      	cmp	r3, #3
 8004a82:	d012      	beq.n	8004aaa <USBD_StdEPReq+0xd0>
              USBD_CtlError(pdev, req);
 8004a84:	4629      	mov	r1, r5
 8004a86:	f7ff fd91 	bl	80045ac <USBD_CtlError>
              break;
 8004a8a:	e7bf      	b.n	8004a0c <USBD_StdEPReq+0x32>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8004a8c:	b109      	cbz	r1, 8004a92 <USBD_StdEPReq+0xb8>
 8004a8e:	2980      	cmp	r1, #128	; 0x80
 8004a90:	d104      	bne.n	8004a9c <USBD_StdEPReq+0xc2>
                USBD_CtlError(pdev, req);
 8004a92:	4629      	mov	r1, r5
 8004a94:	4630      	mov	r0, r6
 8004a96:	f7ff fd89 	bl	80045ac <USBD_CtlError>
 8004a9a:	e7b7      	b.n	8004a0c <USBD_StdEPReq+0x32>
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8004a9c:	f7ff fb82 	bl	80041a4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8004aa0:	2180      	movs	r1, #128	; 0x80
 8004aa2:	4630      	mov	r0, r6
 8004aa4:	f7ff fb7e 	bl	80041a4 <USBD_LL_StallEP>
 8004aa8:	e7b0      	b.n	8004a0c <USBD_StdEPReq+0x32>
              if (req->wValue == USB_FEATURE_EP_HALT)
 8004aaa:	886b      	ldrh	r3, [r5, #2]
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d1ad      	bne.n	8004a0c <USBD_StdEPReq+0x32>
                if ((ep_addr & 0x7FU) != 0x00U)
 8004ab0:	f011 0f7f 	tst.w	r1, #127	; 0x7f
 8004ab4:	d10a      	bne.n	8004acc <USBD_StdEPReq+0xf2>
                (void)USBD_CtlSendStatus(pdev);
 8004ab6:	4630      	mov	r0, r6
 8004ab8:	f000 fae4 	bl	8005084 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8004abc:	f8d6 32b8 	ldr.w	r3, [r6, #696]	; 0x2b8
 8004ac0:	689b      	ldr	r3, [r3, #8]
 8004ac2:	4629      	mov	r1, r5
 8004ac4:	4630      	mov	r0, r6
 8004ac6:	4798      	blx	r3
 8004ac8:	4604      	mov	r4, r0
 8004aca:	e79f      	b.n	8004a0c <USBD_StdEPReq+0x32>
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8004acc:	f7ff fb72 	bl	80041b4 <USBD_LL_ClearStallEP>
 8004ad0:	e7f1      	b.n	8004ab6 <USBD_StdEPReq+0xdc>
          switch (pdev->dev_state)
 8004ad2:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 8004ad6:	b2d2      	uxtb	r2, r2
 8004ad8:	2a02      	cmp	r2, #2
 8004ada:	d006      	beq.n	8004aea <USBD_StdEPReq+0x110>
 8004adc:	2a03      	cmp	r2, #3
 8004ade:	d029      	beq.n	8004b34 <USBD_StdEPReq+0x15a>
              USBD_CtlError(pdev, req);
 8004ae0:	4629      	mov	r1, r5
 8004ae2:	f7ff fd63 	bl	80045ac <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 8004ae6:	463c      	mov	r4, r7
              break;
 8004ae8:	e790      	b.n	8004a0c <USBD_StdEPReq+0x32>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8004aea:	b109      	cbz	r1, 8004af0 <USBD_StdEPReq+0x116>
 8004aec:	2980      	cmp	r1, #128	; 0x80
 8004aee:	d113      	bne.n	8004b18 <USBD_StdEPReq+0x13e>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8004af0:	f013 0f80 	tst.w	r3, #128	; 0x80
 8004af4:	d115      	bne.n	8004b22 <USBD_StdEPReq+0x148>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8004af6:	f001 017f 	and.w	r1, r1, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8004afa:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8004afe:	0089      	lsls	r1, r1, #2
 8004b00:	f501 71a8 	add.w	r1, r1, #336	; 0x150
 8004b04:	4431      	add	r1, r6
 8004b06:	3104      	adds	r1, #4
              pep->status = 0x0000U;
 8004b08:	2300      	movs	r3, #0
 8004b0a:	600b      	str	r3, [r1, #0]
              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8004b0c:	2202      	movs	r2, #2
 8004b0e:	4630      	mov	r0, r6
 8004b10:	f000 fa8c 	bl	800502c <USBD_CtlSendData>
  USBD_StatusTypeDef ret = USBD_OK;
 8004b14:	463c      	mov	r4, r7
              break;
 8004b16:	e779      	b.n	8004a0c <USBD_StdEPReq+0x32>
                USBD_CtlError(pdev, req);
 8004b18:	4629      	mov	r1, r5
 8004b1a:	f7ff fd47 	bl	80045ac <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 8004b1e:	463c      	mov	r4, r7
                break;
 8004b20:	e774      	b.n	8004a0c <USBD_StdEPReq+0x32>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8004b22:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 8004b26:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8004b2a:	0089      	lsls	r1, r1, #2
 8004b2c:	3110      	adds	r1, #16
 8004b2e:	4431      	add	r1, r6
 8004b30:	3104      	adds	r1, #4
 8004b32:	e7e9      	b.n	8004b08 <USBD_StdEPReq+0x12e>
              if ((ep_addr & 0x80U) == 0x80U)
 8004b34:	b25b      	sxtb	r3, r3
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	db1f      	blt.n	8004b7a <USBD_StdEPReq+0x1a0>
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8004b3a:	f001 020f 	and.w	r2, r1, #15
 8004b3e:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8004b42:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8004b46:	f8b2 2164 	ldrh.w	r2, [r2, #356]	; 0x164
 8004b4a:	b322      	cbz	r2, 8004b96 <USBD_StdEPReq+0x1bc>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	db27      	blt.n	8004ba0 <USBD_StdEPReq+0x1c6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8004b50:	f001 037f 	and.w	r3, r1, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8004b54:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8004b58:	009c      	lsls	r4, r3, #2
 8004b5a:	f504 74a8 	add.w	r4, r4, #336	; 0x150
 8004b5e:	4434      	add	r4, r6
 8004b60:	3404      	adds	r4, #4
              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8004b62:	b109      	cbz	r1, 8004b68 <USBD_StdEPReq+0x18e>
 8004b64:	2980      	cmp	r1, #128	; 0x80
 8004b66:	d124      	bne.n	8004bb2 <USBD_StdEPReq+0x1d8>
                pep->status = 0x0000U;
 8004b68:	2300      	movs	r3, #0
 8004b6a:	6023      	str	r3, [r4, #0]
              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8004b6c:	2202      	movs	r2, #2
 8004b6e:	4621      	mov	r1, r4
 8004b70:	4630      	mov	r0, r6
 8004b72:	f000 fa5b 	bl	800502c <USBD_CtlSendData>
  USBD_StatusTypeDef ret = USBD_OK;
 8004b76:	463c      	mov	r4, r7
              break;
 8004b78:	e748      	b.n	8004a0c <USBD_StdEPReq+0x32>
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8004b7a:	f001 020f 	and.w	r2, r1, #15
 8004b7e:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8004b82:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8004b86:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 8004b88:	2a00      	cmp	r2, #0
 8004b8a:	d1df      	bne.n	8004b4c <USBD_StdEPReq+0x172>
                  USBD_CtlError(pdev, req);
 8004b8c:	4629      	mov	r1, r5
 8004b8e:	f7ff fd0d 	bl	80045ac <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 8004b92:	463c      	mov	r4, r7
                  break;
 8004b94:	e73a      	b.n	8004a0c <USBD_StdEPReq+0x32>
                  USBD_CtlError(pdev, req);
 8004b96:	4629      	mov	r1, r5
 8004b98:	f7ff fd08 	bl	80045ac <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 8004b9c:	463c      	mov	r4, r7
                  break;
 8004b9e:	e735      	b.n	8004a0c <USBD_StdEPReq+0x32>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8004ba0:	f001 037f 	and.w	r3, r1, #127	; 0x7f
 8004ba4:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8004ba8:	009c      	lsls	r4, r3, #2
 8004baa:	3410      	adds	r4, #16
 8004bac:	4434      	add	r4, r6
 8004bae:	3404      	adds	r4, #4
 8004bb0:	e7d7      	b.n	8004b62 <USBD_StdEPReq+0x188>
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8004bb2:	4630      	mov	r0, r6
 8004bb4:	f7ff fab4 	bl	8004120 <USBD_LL_IsStallEP>
 8004bb8:	b110      	cbz	r0, 8004bc0 <USBD_StdEPReq+0x1e6>
                pep->status = 0x0001U;
 8004bba:	2301      	movs	r3, #1
 8004bbc:	6023      	str	r3, [r4, #0]
 8004bbe:	e7d5      	b.n	8004b6c <USBD_StdEPReq+0x192>
                pep->status = 0x0000U;
 8004bc0:	2300      	movs	r3, #0
 8004bc2:	6023      	str	r3, [r4, #0]
 8004bc4:	e7d2      	b.n	8004b6c <USBD_StdEPReq+0x192>

08004bc6 <USBD_GetString>:
  if (desc == NULL)
 8004bc6:	b1c0      	cbz	r0, 8004bfa <USBD_GetString+0x34>
{
 8004bc8:	b570      	push	{r4, r5, r6, lr}
 8004bca:	460d      	mov	r5, r1
 8004bcc:	4616      	mov	r6, r2
 8004bce:	4604      	mov	r4, r0
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8004bd0:	f7ff fcc5 	bl	800455e <USBD_GetLen>
 8004bd4:	3001      	adds	r0, #1
 8004bd6:	0040      	lsls	r0, r0, #1
 8004bd8:	8030      	strh	r0, [r6, #0]
  unicode[idx] = *(uint8_t *)len;
 8004bda:	7028      	strb	r0, [r5, #0]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8004bdc:	2303      	movs	r3, #3
 8004bde:	706b      	strb	r3, [r5, #1]
  idx++;
 8004be0:	2302      	movs	r3, #2
  while (*pdesc != (uint8_t)'\0')
 8004be2:	7822      	ldrb	r2, [r4, #0]
 8004be4:	b142      	cbz	r2, 8004bf8 <USBD_GetString+0x32>
    unicode[idx] = *pdesc;
 8004be6:	54ea      	strb	r2, [r5, r3]
    pdesc++;
 8004be8:	3401      	adds	r4, #1
    idx++;
 8004bea:	1c5a      	adds	r2, r3, #1
 8004bec:	b2d2      	uxtb	r2, r2
    unicode[idx] = 0U;
 8004bee:	2100      	movs	r1, #0
 8004bf0:	54a9      	strb	r1, [r5, r2]
    idx++;
 8004bf2:	3302      	adds	r3, #2
 8004bf4:	b2db      	uxtb	r3, r3
 8004bf6:	e7f4      	b.n	8004be2 <USBD_GetString+0x1c>
}
 8004bf8:	bd70      	pop	{r4, r5, r6, pc}
 8004bfa:	4770      	bx	lr

08004bfc <CUSTOM_HID_Init_FS>:
static int8_t CUSTOM_HID_Init_FS(void)
{
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
  /* USER CODE END 4 */
}
 8004bfc:	2000      	movs	r0, #0
 8004bfe:	4770      	bx	lr

08004c00 <CUSTOM_HID_DeInit_FS>:
static int8_t CUSTOM_HID_DeInit_FS(void)
{
  /* USER CODE BEGIN 5 */
  return (USBD_OK);
  /* USER CODE END 5 */
}
 8004c00:	2000      	movs	r0, #0
 8004c02:	4770      	bx	lr

08004c04 <CUSTOM_HID_OutEvent_FS>:
  * @param  event_idx: Event index
  * @param  state: Event state
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_OutEvent_FS(uint8_t* state)
{
 8004c04:	b500      	push	{lr}
 8004c06:	b083      	sub	sp, #12
  /* USER CODE BEGIN 6 */

  DBG("OutEvent: %x %x %x %x %x", state[0], state[1], state[2], state[3], state[4]);
 8004c08:	78c3      	ldrb	r3, [r0, #3]
 8004c0a:	7902      	ldrb	r2, [r0, #4]
 8004c0c:	9201      	str	r2, [sp, #4]
 8004c0e:	9300      	str	r3, [sp, #0]
 8004c10:	7883      	ldrb	r3, [r0, #2]
 8004c12:	7842      	ldrb	r2, [r0, #1]
 8004c14:	7801      	ldrb	r1, [r0, #0]
 8004c16:	4806      	ldr	r0, [pc, #24]	; (8004c30 <CUSTOM_HID_OutEvent_FS+0x2c>)
 8004c18:	f000 fbde 	bl	80053d8 <iprintf>
 8004c1c:	200a      	movs	r0, #10
 8004c1e:	f000 fbf3 	bl	8005408 <putchar>
  case 1:
	  break;
  }

  /* Start next USB packet transfer once data processing is completed */
  USBD_CUSTOM_HID_ReceivePacket(&hUsbDeviceFS);
 8004c22:	4804      	ldr	r0, [pc, #16]	; (8004c34 <CUSTOM_HID_OutEvent_FS+0x30>)
 8004c24:	f000 f95f 	bl	8004ee6 <USBD_CUSTOM_HID_ReceivePacket>

  return (USBD_OK);
  /* USER CODE END 6 */
}
 8004c28:	2000      	movs	r0, #0
 8004c2a:	b003      	add	sp, #12
 8004c2c:	f85d fb04 	ldr.w	pc, [sp], #4
 8004c30:	080065e8 	.word	0x080065e8
 8004c34:	200046f4 	.word	0x200046f4

08004c38 <USBD_CUSTOM_HID_SendReport_FS>:
  * @param  len: The report length
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */

int8_t USBD_CUSTOM_HID_SendReport_FS(uint8_t *report, uint16_t len)
{
 8004c38:	b508      	push	{r3, lr}
 8004c3a:	460a      	mov	r2, r1
  return USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS, report, len);
 8004c3c:	4601      	mov	r1, r0
 8004c3e:	4802      	ldr	r0, [pc, #8]	; (8004c48 <USBD_CUSTOM_HID_SendReport_FS+0x10>)
 8004c40:	f000 f935 	bl	8004eae <USBD_CUSTOM_HID_SendReport>
}
 8004c44:	b240      	sxtb	r0, r0
 8004c46:	bd08      	pop	{r3, pc}
 8004c48:	200046f4 	.word	0x200046f4

08004c4c <USBD_CUSTOM_HID_GetFSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetFSCfgDesc(uint16_t *length)
{
  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_CfgFSDesc);
 8004c4c:	2329      	movs	r3, #41	; 0x29
 8004c4e:	8003      	strh	r3, [r0, #0]

  return USBD_CUSTOM_HID_CfgFSDesc;
}
 8004c50:	4800      	ldr	r0, [pc, #0]	; (8004c54 <USBD_CUSTOM_HID_GetFSCfgDesc+0x8>)
 8004c52:	4770      	bx	lr
 8004c54:	2000007c 	.word	0x2000007c

08004c58 <USBD_CUSTOM_HID_GetHSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetHSCfgDesc(uint16_t *length)
{
  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_CfgHSDesc);
 8004c58:	2329      	movs	r3, #41	; 0x29
 8004c5a:	8003      	strh	r3, [r0, #0]

  return USBD_CUSTOM_HID_CfgHSDesc;
}
 8004c5c:	4800      	ldr	r0, [pc, #0]	; (8004c60 <USBD_CUSTOM_HID_GetHSCfgDesc+0x8>)
 8004c5e:	4770      	bx	lr
 8004c60:	200000a8 	.word	0x200000a8

08004c64 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_OtherSpeedCfgDesc);
 8004c64:	2329      	movs	r3, #41	; 0x29
 8004c66:	8003      	strh	r3, [r0, #0]

  return USBD_CUSTOM_HID_OtherSpeedCfgDesc;
}
 8004c68:	4800      	ldr	r0, [pc, #0]	; (8004c6c <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x8>)
 8004c6a:	4770      	bx	lr
 8004c6c:	200000ec 	.word	0x200000ec

08004c70 <USBD_CUSTOM_HID_DataIn>:
{
  UNUSED(epnum);

  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData)->state = CUSTOM_HID_IDLE;
 8004c70:	f8d0 32bc 	ldr.w	r3, [r0, #700]	; 0x2bc
 8004c74:	2000      	movs	r0, #0
 8004c76:	f883 0050 	strb.w	r0, [r3, #80]	; 0x50

  return (uint8_t)USBD_OK;
}
 8004c7a:	4770      	bx	lr

08004c7c <USBD_CUSTOM_HID_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8004c7c:	b508      	push	{r3, lr}
 8004c7e:	4603      	mov	r3, r0
  UNUSED(epnum);
  USBD_CUSTOM_HID_HandleTypeDef *hhid;

  if (pdev->pClassData == NULL)
 8004c80:	f8d0 02bc 	ldr.w	r0, [r0, #700]	; 0x2bc
 8004c84:	b128      	cbz	r0, 8004c92 <USBD_CUSTOM_HID_DataOut+0x16>

  hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData;

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application processing */
  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->OutEvent(hhid->Report_buf);
 8004c86:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8004c8a:	68db      	ldr	r3, [r3, #12]
 8004c8c:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8004c8e:	2000      	movs	r0, #0
}
 8004c90:	bd08      	pop	{r3, pc}
    return (uint8_t)USBD_FAIL;
 8004c92:	2003      	movs	r0, #3
 8004c94:	e7fc      	b.n	8004c90 <USBD_CUSTOM_HID_DataOut+0x14>

08004c96 <USBD_CUSTOM_HID_EP0_RxReady>:
  *         Handles control request data.
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8004c96:	b510      	push	{r4, lr}
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData;
 8004c98:	f8d0 42bc 	ldr.w	r4, [r0, #700]	; 0x2bc

  if (hhid == NULL)
 8004c9c:	b164      	cbz	r4, 8004cb8 <USBD_CUSTOM_HID_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
  }

  if (hhid->IsReportAvailable == 1U)
 8004c9e:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8004ca0:	2b01      	cmp	r3, #1
 8004ca2:	d001      	beq.n	8004ca8 <USBD_CUSTOM_HID_EP0_RxReady+0x12>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->OutEvent(hhid->Report_buf);
    hhid->IsReportAvailable = 0U;
  }

  return (uint8_t)USBD_OK;
 8004ca4:	2000      	movs	r0, #0
}
 8004ca6:	bd10      	pop	{r4, pc}
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->OutEvent(hhid->Report_buf);
 8004ca8:	f8d0 32c0 	ldr.w	r3, [r0, #704]	; 0x2c0
 8004cac:	68db      	ldr	r3, [r3, #12]
 8004cae:	4620      	mov	r0, r4
 8004cb0:	4798      	blx	r3
    hhid->IsReportAvailable = 0U;
 8004cb2:	2000      	movs	r0, #0
 8004cb4:	64e0      	str	r0, [r4, #76]	; 0x4c
 8004cb6:	e7f6      	b.n	8004ca6 <USBD_CUSTOM_HID_EP0_RxReady+0x10>
    return (uint8_t)USBD_FAIL;
 8004cb8:	2003      	movs	r0, #3
 8004cba:	e7f4      	b.n	8004ca6 <USBD_CUSTOM_HID_EP0_RxReady+0x10>

08004cbc <USBD_CUSTOM_HID_GetDeviceQualifierDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetDeviceQualifierDesc(uint16_t *length)
{
  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_DeviceQualifierDesc);
 8004cbc:	230a      	movs	r3, #10
 8004cbe:	8003      	strh	r3, [r0, #0]

  return USBD_CUSTOM_HID_DeviceQualifierDesc;
}
 8004cc0:	4800      	ldr	r0, [pc, #0]	; (8004cc4 <USBD_CUSTOM_HID_GetDeviceQualifierDesc+0x8>)
 8004cc2:	4770      	bx	lr
 8004cc4:	200000e0 	.word	0x200000e0

08004cc8 <USBD_CUSTOM_HID_Setup>:
{
 8004cc8:	b530      	push	{r4, r5, lr}
 8004cca:	b083      	sub	sp, #12
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData;
 8004ccc:	f8d0 32bc 	ldr.w	r3, [r0, #700]	; 0x2bc
  uint16_t status_info = 0U;
 8004cd0:	2200      	movs	r2, #0
 8004cd2:	f8ad 2006 	strh.w	r2, [sp, #6]
  if (hhid == NULL)
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	f000 808e 	beq.w	8004df8 <USBD_CUSTOM_HID_Setup+0x130>
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004cdc:	780c      	ldrb	r4, [r1, #0]
 8004cde:	f014 0460 	ands.w	r4, r4, #96	; 0x60
 8004ce2:	d030      	beq.n	8004d46 <USBD_CUSTOM_HID_Setup+0x7e>
 8004ce4:	2c20      	cmp	r4, #32
 8004ce6:	f040 8081 	bne.w	8004dec <USBD_CUSTOM_HID_Setup+0x124>
      switch (req->bRequest)
 8004cea:	784a      	ldrb	r2, [r1, #1]
 8004cec:	3a02      	subs	r2, #2
 8004cee:	2a09      	cmp	r2, #9
 8004cf0:	d825      	bhi.n	8004d3e <USBD_CUSTOM_HID_Setup+0x76>
 8004cf2:	e8df f002 	tbb	[pc, r2]
 8004cf6:	0915      	.short	0x0915
 8004cf8:	24242424 	.word	0x24242424
 8004cfc:	05101c24 	.word	0x05101c24
          hhid->Protocol = (uint8_t)(req->wValue);
 8004d00:	788a      	ldrb	r2, [r1, #2]
 8004d02:	641a      	str	r2, [r3, #64]	; 0x40
  USBD_StatusTypeDef ret = USBD_OK;
 8004d04:	2400      	movs	r4, #0
          break;
 8004d06:	e074      	b.n	8004df2 <USBD_CUSTOM_HID_Setup+0x12a>
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->Protocol, 1U);
 8004d08:	2201      	movs	r2, #1
 8004d0a:	f103 0140 	add.w	r1, r3, #64	; 0x40
 8004d0e:	f000 f98d 	bl	800502c <USBD_CtlSendData>
  USBD_StatusTypeDef ret = USBD_OK;
 8004d12:	2400      	movs	r4, #0
          break;
 8004d14:	e06d      	b.n	8004df2 <USBD_CUSTOM_HID_Setup+0x12a>
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 8004d16:	884a      	ldrh	r2, [r1, #2]
 8004d18:	0a12      	lsrs	r2, r2, #8
 8004d1a:	645a      	str	r2, [r3, #68]	; 0x44
  USBD_StatusTypeDef ret = USBD_OK;
 8004d1c:	2400      	movs	r4, #0
          break;
 8004d1e:	e068      	b.n	8004df2 <USBD_CUSTOM_HID_Setup+0x12a>
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->IdleState, 1U);
 8004d20:	2201      	movs	r2, #1
 8004d22:	f103 0144 	add.w	r1, r3, #68	; 0x44
 8004d26:	f000 f981 	bl	800502c <USBD_CtlSendData>
  USBD_StatusTypeDef ret = USBD_OK;
 8004d2a:	2400      	movs	r4, #0
          break;
 8004d2c:	e061      	b.n	8004df2 <USBD_CUSTOM_HID_Setup+0x12a>
          hhid->IsReportAvailable = 1U;
 8004d2e:	2201      	movs	r2, #1
 8004d30:	64da      	str	r2, [r3, #76]	; 0x4c
          (void)USBD_CtlPrepareRx(pdev, hhid->Report_buf, req->wLength);
 8004d32:	88ca      	ldrh	r2, [r1, #6]
 8004d34:	4619      	mov	r1, r3
 8004d36:	f000 f98e 	bl	8005056 <USBD_CtlPrepareRx>
  USBD_StatusTypeDef ret = USBD_OK;
 8004d3a:	2400      	movs	r4, #0
          break;
 8004d3c:	e059      	b.n	8004df2 <USBD_CUSTOM_HID_Setup+0x12a>
          USBD_CtlError(pdev, req);
 8004d3e:	f7ff fc35 	bl	80045ac <USBD_CtlError>
          ret = USBD_FAIL;
 8004d42:	2403      	movs	r4, #3
          break;
 8004d44:	e055      	b.n	8004df2 <USBD_CUSTOM_HID_Setup+0x12a>
      switch (req->bRequest)
 8004d46:	784d      	ldrb	r5, [r1, #1]
 8004d48:	2d0b      	cmp	r5, #11
 8004d4a:	d84b      	bhi.n	8004de4 <USBD_CUSTOM_HID_Setup+0x11c>
 8004d4c:	e8df f005 	tbb	[pc, r5]
 8004d50:	4a4a5106 	.word	0x4a4a5106
 8004d54:	4a164a4a 	.word	0x4a164a4a
 8004d58:	3e2f4a4a 	.word	0x3e2f4a4a
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004d5c:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8004d60:	b2db      	uxtb	r3, r3
 8004d62:	2b03      	cmp	r3, #3
 8004d64:	d003      	beq.n	8004d6e <USBD_CUSTOM_HID_Setup+0xa6>
            USBD_CtlError(pdev, req);
 8004d66:	f7ff fc21 	bl	80045ac <USBD_CtlError>
            ret = USBD_FAIL;
 8004d6a:	2403      	movs	r4, #3
 8004d6c:	e041      	b.n	8004df2 <USBD_CUSTOM_HID_Setup+0x12a>
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8004d6e:	2202      	movs	r2, #2
 8004d70:	f10d 0106 	add.w	r1, sp, #6
 8004d74:	f000 f95a 	bl	800502c <USBD_CtlSendData>
  USBD_StatusTypeDef ret = USBD_OK;
 8004d78:	462c      	mov	r4, r5
 8004d7a:	e03a      	b.n	8004df2 <USBD_CUSTOM_HID_Setup+0x12a>
          if ((req->wValue >> 8) == CUSTOM_HID_REPORT_DESC)
 8004d7c:	884b      	ldrh	r3, [r1, #2]
 8004d7e:	0a1b      	lsrs	r3, r3, #8
 8004d80:	2b22      	cmp	r3, #34	; 0x22
 8004d82:	d006      	beq.n	8004d92 <USBD_CUSTOM_HID_Setup+0xca>
            if ((req->wValue >> 8) == CUSTOM_HID_DESCRIPTOR_TYPE)
 8004d84:	2b21      	cmp	r3, #33	; 0x21
 8004d86:	d00c      	beq.n	8004da2 <USBD_CUSTOM_HID_Setup+0xda>
  uint8_t  *pbuf = NULL;
 8004d88:	2100      	movs	r1, #0
  uint16_t len = 0U;
 8004d8a:	460a      	mov	r2, r1
          (void)USBD_CtlSendData(pdev, pbuf, len);
 8004d8c:	f000 f94e 	bl	800502c <USBD_CtlSendData>
          break;
 8004d90:	e02f      	b.n	8004df2 <USBD_CUSTOM_HID_Setup+0x12a>
            len = MIN(USBD_CUSTOM_HID_REPORT_DESC_SIZE, req->wLength);
 8004d92:	88ca      	ldrh	r2, [r1, #6]
 8004d94:	2a21      	cmp	r2, #33	; 0x21
 8004d96:	bf28      	it	cs
 8004d98:	2221      	movcs	r2, #33	; 0x21
            pbuf = ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->pReport;
 8004d9a:	f8d0 32c0 	ldr.w	r3, [r0, #704]	; 0x2c0
 8004d9e:	6819      	ldr	r1, [r3, #0]
 8004da0:	e7f4      	b.n	8004d8c <USBD_CUSTOM_HID_Setup+0xc4>
              len = MIN(USB_CUSTOM_HID_DESC_SIZ, req->wLength);
 8004da2:	88ca      	ldrh	r2, [r1, #6]
 8004da4:	2a09      	cmp	r2, #9
 8004da6:	bf28      	it	cs
 8004da8:	2209      	movcs	r2, #9
              pbuf = USBD_CUSTOM_HID_Desc;
 8004daa:	4914      	ldr	r1, [pc, #80]	; (8004dfc <USBD_CUSTOM_HID_Setup+0x134>)
 8004dac:	e7ee      	b.n	8004d8c <USBD_CUSTOM_HID_Setup+0xc4>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004dae:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 8004db2:	b2d2      	uxtb	r2, r2
 8004db4:	2a03      	cmp	r2, #3
 8004db6:	d003      	beq.n	8004dc0 <USBD_CUSTOM_HID_Setup+0xf8>
            USBD_CtlError(pdev, req);
 8004db8:	f7ff fbf8 	bl	80045ac <USBD_CtlError>
            ret = USBD_FAIL;
 8004dbc:	2403      	movs	r4, #3
 8004dbe:	e018      	b.n	8004df2 <USBD_CUSTOM_HID_Setup+0x12a>
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->AltSetting, 1U);
 8004dc0:	2201      	movs	r2, #1
 8004dc2:	f103 0148 	add.w	r1, r3, #72	; 0x48
 8004dc6:	f000 f931 	bl	800502c <USBD_CtlSendData>
 8004dca:	e012      	b.n	8004df2 <USBD_CUSTOM_HID_Setup+0x12a>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004dcc:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 8004dd0:	b2d2      	uxtb	r2, r2
 8004dd2:	2a03      	cmp	r2, #3
 8004dd4:	d102      	bne.n	8004ddc <USBD_CUSTOM_HID_Setup+0x114>
            hhid->AltSetting = (uint8_t)(req->wValue);
 8004dd6:	788a      	ldrb	r2, [r1, #2]
 8004dd8:	649a      	str	r2, [r3, #72]	; 0x48
 8004dda:	e00a      	b.n	8004df2 <USBD_CUSTOM_HID_Setup+0x12a>
            USBD_CtlError(pdev, req);
 8004ddc:	f7ff fbe6 	bl	80045ac <USBD_CtlError>
            ret = USBD_FAIL;
 8004de0:	2403      	movs	r4, #3
 8004de2:	e006      	b.n	8004df2 <USBD_CUSTOM_HID_Setup+0x12a>
          USBD_CtlError(pdev, req);
 8004de4:	f7ff fbe2 	bl	80045ac <USBD_CtlError>
          ret = USBD_FAIL;
 8004de8:	2403      	movs	r4, #3
          break;
 8004dea:	e002      	b.n	8004df2 <USBD_CUSTOM_HID_Setup+0x12a>
      USBD_CtlError(pdev, req);
 8004dec:	f7ff fbde 	bl	80045ac <USBD_CtlError>
      ret = USBD_FAIL;
 8004df0:	2403      	movs	r4, #3
}
 8004df2:	4620      	mov	r0, r4
 8004df4:	b003      	add	sp, #12
 8004df6:	bd30      	pop	{r4, r5, pc}
    return (uint8_t)USBD_FAIL;
 8004df8:	2403      	movs	r4, #3
 8004dfa:	e7fa      	b.n	8004df2 <USBD_CUSTOM_HID_Setup+0x12a>
 8004dfc:	200000d4 	.word	0x200000d4

08004e00 <USBD_CUSTOM_HID_DeInit>:
{
 8004e00:	b538      	push	{r3, r4, r5, lr}
 8004e02:	4604      	mov	r4, r0
  (void)USBD_LL_CloseEP(pdev, CUSTOM_HID_EPIN_ADDR);
 8004e04:	2181      	movs	r1, #129	; 0x81
 8004e06:	f7ff f9c5 	bl	8004194 <USBD_LL_CloseEP>
  pdev->ep_in[CUSTOM_HID_EPIN_ADDR & 0xFU].is_used = 0U;
 8004e0a:	2500      	movs	r5, #0
 8004e0c:	8725      	strh	r5, [r4, #56]	; 0x38
  pdev->ep_in[CUSTOM_HID_EPIN_ADDR & 0xFU].bInterval = 0U;
 8004e0e:	8765      	strh	r5, [r4, #58]	; 0x3a
  (void)USBD_LL_CloseEP(pdev, CUSTOM_HID_EPOUT_ADDR);
 8004e10:	2101      	movs	r1, #1
 8004e12:	4620      	mov	r0, r4
 8004e14:	f7ff f9be 	bl	8004194 <USBD_LL_CloseEP>
  pdev->ep_out[CUSTOM_HID_EPOUT_ADDR & 0xFU].is_used = 0U;
 8004e18:	f8a4 5178 	strh.w	r5, [r4, #376]	; 0x178
  pdev->ep_out[CUSTOM_HID_EPOUT_ADDR & 0xFU].bInterval = 0U;
 8004e1c:	f8a4 517a 	strh.w	r5, [r4, #378]	; 0x17a
  if (pdev->pClassData != NULL)
 8004e20:	f8d4 32bc 	ldr.w	r3, [r4, #700]	; 0x2bc
 8004e24:	b14b      	cbz	r3, 8004e3a <USBD_CUSTOM_HID_DeInit+0x3a>
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->DeInit();
 8004e26:	f8d4 32c0 	ldr.w	r3, [r4, #704]	; 0x2c0
 8004e2a:	689b      	ldr	r3, [r3, #8]
 8004e2c:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8004e2e:	f8d4 02bc 	ldr.w	r0, [r4, #700]	; 0x2bc
 8004e32:	f7ff f991 	bl	8004158 <USBD_static_free>
    pdev->pClassData = NULL;
 8004e36:	f8c4 52bc 	str.w	r5, [r4, #700]	; 0x2bc
}
 8004e3a:	2000      	movs	r0, #0
 8004e3c:	bd38      	pop	{r3, r4, r5, pc}

08004e3e <USBD_CUSTOM_HID_Init>:
{
 8004e3e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e40:	4604      	mov	r4, r0
  hhid = USBD_malloc(sizeof(USBD_CUSTOM_HID_HandleTypeDef));
 8004e42:	2054      	movs	r0, #84	; 0x54
 8004e44:	f7ff f984 	bl	8004150 <USBD_static_malloc>
  if (hhid == NULL)
 8004e48:	b338      	cbz	r0, 8004e9a <USBD_CUSTOM_HID_Init+0x5c>
 8004e4a:	4607      	mov	r7, r0
  pdev->pClassData = (void *)hhid;
 8004e4c:	f8c4 02bc 	str.w	r0, [r4, #700]	; 0x2bc
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004e50:	7c23      	ldrb	r3, [r4, #16]
 8004e52:	bb3b      	cbnz	r3, 8004ea4 <USBD_CUSTOM_HID_Init+0x66>
    pdev->ep_in[CUSTOM_HID_EPIN_ADDR & 0xFU].bInterval = CUSTOM_HID_HS_BINTERVAL;
 8004e54:	2305      	movs	r3, #5
 8004e56:	8763      	strh	r3, [r4, #58]	; 0x3a
    pdev->ep_out[CUSTOM_HID_EPOUT_ADDR & 0xFU].bInterval = CUSTOM_HID_HS_BINTERVAL;
 8004e58:	f8a4 317a 	strh.w	r3, [r4, #378]	; 0x17a
  (void)USBD_LL_OpenEP(pdev, CUSTOM_HID_EPIN_ADDR, USBD_EP_TYPE_INTR,
 8004e5c:	2340      	movs	r3, #64	; 0x40
 8004e5e:	2203      	movs	r2, #3
 8004e60:	2181      	movs	r1, #129	; 0x81
 8004e62:	4620      	mov	r0, r4
 8004e64:	f7ff f98b 	bl	800417e <USBD_LL_OpenEP>
  pdev->ep_in[CUSTOM_HID_EPIN_ADDR & 0xFU].is_used = 1U;
 8004e68:	2601      	movs	r6, #1
 8004e6a:	8726      	strh	r6, [r4, #56]	; 0x38
  (void)USBD_LL_OpenEP(pdev, CUSTOM_HID_EPOUT_ADDR, USBD_EP_TYPE_INTR,
 8004e6c:	2340      	movs	r3, #64	; 0x40
 8004e6e:	2203      	movs	r2, #3
 8004e70:	4631      	mov	r1, r6
 8004e72:	4620      	mov	r0, r4
 8004e74:	f7ff f983 	bl	800417e <USBD_LL_OpenEP>
  pdev->ep_out[CUSTOM_HID_EPOUT_ADDR & 0xFU].is_used = 1U;
 8004e78:	f8a4 6178 	strh.w	r6, [r4, #376]	; 0x178
  hhid->state = CUSTOM_HID_IDLE;
 8004e7c:	2500      	movs	r5, #0
 8004e7e:	f887 5050 	strb.w	r5, [r7, #80]	; 0x50
  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->Init();
 8004e82:	f8d4 32c0 	ldr.w	r3, [r4, #704]	; 0x2c0
 8004e86:	685b      	ldr	r3, [r3, #4]
 8004e88:	4798      	blx	r3
  (void)USBD_LL_PrepareReceive(pdev, CUSTOM_HID_EPOUT_ADDR, hhid->Report_buf,
 8004e8a:	2340      	movs	r3, #64	; 0x40
 8004e8c:	463a      	mov	r2, r7
 8004e8e:	4631      	mov	r1, r6
 8004e90:	4620      	mov	r0, r4
 8004e92:	f7ff f9a7 	bl	80041e4 <USBD_LL_PrepareReceive>
  return (uint8_t)USBD_OK;
 8004e96:	4628      	mov	r0, r5
}
 8004e98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    pdev->pClassData = NULL;
 8004e9a:	2300      	movs	r3, #0
 8004e9c:	f8c4 32bc 	str.w	r3, [r4, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8004ea0:	2002      	movs	r0, #2
 8004ea2:	e7f9      	b.n	8004e98 <USBD_CUSTOM_HID_Init+0x5a>
    pdev->ep_in[CUSTOM_HID_EPIN_ADDR & 0xFU].bInterval = CUSTOM_HID_FS_BINTERVAL;
 8004ea4:	2301      	movs	r3, #1
 8004ea6:	8763      	strh	r3, [r4, #58]	; 0x3a
    pdev->ep_out[CUSTOM_HID_EPOUT_ADDR & 0xFU].bInterval = CUSTOM_HID_FS_BINTERVAL;
 8004ea8:	f8a4 317a 	strh.w	r3, [r4, #378]	; 0x17a
 8004eac:	e7d6      	b.n	8004e5c <USBD_CUSTOM_HID_Init+0x1e>

08004eae <USBD_CUSTOM_HID_SendReport>:
{
 8004eae:	b538      	push	{r3, r4, r5, lr}
  if (pdev->pClassData == NULL)
 8004eb0:	f8d0 32bc 	ldr.w	r3, [r0, #700]	; 0x2bc
 8004eb4:	b1ab      	cbz	r3, 8004ee2 <USBD_CUSTOM_HID_SendReport+0x34>
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004eb6:	f890 429c 	ldrb.w	r4, [r0, #668]	; 0x29c
 8004eba:	b2e4      	uxtb	r4, r4
 8004ebc:	2c03      	cmp	r4, #3
 8004ebe:	d002      	beq.n	8004ec6 <USBD_CUSTOM_HID_SendReport+0x18>
  return (uint8_t)USBD_OK;
 8004ec0:	2400      	movs	r4, #0
}
 8004ec2:	4620      	mov	r0, r4
 8004ec4:	bd38      	pop	{r3, r4, r5, pc}
    if (hhid->state == CUSTOM_HID_IDLE)
 8004ec6:	f893 4050 	ldrb.w	r4, [r3, #80]	; 0x50
 8004eca:	b10c      	cbz	r4, 8004ed0 <USBD_CUSTOM_HID_SendReport+0x22>
      return (uint8_t)USBD_BUSY;
 8004ecc:	2401      	movs	r4, #1
 8004ece:	e7f8      	b.n	8004ec2 <USBD_CUSTOM_HID_SendReport+0x14>
      hhid->state = CUSTOM_HID_BUSY;
 8004ed0:	2501      	movs	r5, #1
 8004ed2:	f883 5050 	strb.w	r5, [r3, #80]	; 0x50
      (void)USBD_LL_Transmit(pdev, CUSTOM_HID_EPIN_ADDR, report, len);
 8004ed6:	4613      	mov	r3, r2
 8004ed8:	460a      	mov	r2, r1
 8004eda:	2181      	movs	r1, #129	; 0x81
 8004edc:	f7ff f97a 	bl	80041d4 <USBD_LL_Transmit>
 8004ee0:	e7ef      	b.n	8004ec2 <USBD_CUSTOM_HID_SendReport+0x14>
    return (uint8_t)USBD_FAIL;
 8004ee2:	2403      	movs	r4, #3
 8004ee4:	e7ed      	b.n	8004ec2 <USBD_CUSTOM_HID_SendReport+0x14>

08004ee6 <USBD_CUSTOM_HID_ReceivePacket>:
  if (pdev->pClassData == NULL)
 8004ee6:	f8d0 22bc 	ldr.w	r2, [r0, #700]	; 0x2bc
 8004eea:	b132      	cbz	r2, 8004efa <USBD_CUSTOM_HID_ReceivePacket+0x14>
{
 8004eec:	b508      	push	{r3, lr}
  (void)USBD_LL_PrepareReceive(pdev, CUSTOM_HID_EPOUT_ADDR, hhid->Report_buf,
 8004eee:	2340      	movs	r3, #64	; 0x40
 8004ef0:	2101      	movs	r1, #1
 8004ef2:	f7ff f977 	bl	80041e4 <USBD_LL_PrepareReceive>
  return (uint8_t)USBD_OK;
 8004ef6:	2000      	movs	r0, #0
}
 8004ef8:	bd08      	pop	{r3, pc}
    return (uint8_t)USBD_FAIL;
 8004efa:	2003      	movs	r0, #3
}
 8004efc:	4770      	bx	lr

08004efe <USBD_CUSTOM_HID_RegisterInterface>:
  * @retval status
  */
uint8_t USBD_CUSTOM_HID_RegisterInterface(USBD_HandleTypeDef *pdev,
                                          USBD_CUSTOM_HID_ItfTypeDef *fops)
{
  if (fops == NULL)
 8004efe:	b119      	cbz	r1, 8004f08 <USBD_CUSTOM_HID_RegisterInterface+0xa>
  {
    return (uint8_t)USBD_FAIL;
  }

  pdev->pUserData = fops;
 8004f00:	f8c0 12c0 	str.w	r1, [r0, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8004f04:	2000      	movs	r0, #0
 8004f06:	4770      	bx	lr
    return (uint8_t)USBD_FAIL;
 8004f08:	2003      	movs	r0, #3
}
 8004f0a:	4770      	bx	lr

08004f0c <USBD_FS_DeviceDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8004f0c:	2312      	movs	r3, #18
 8004f0e:	800b      	strh	r3, [r1, #0]
  return USBD_FS_DeviceDesc;
}
 8004f10:	4800      	ldr	r0, [pc, #0]	; (8004f14 <USBD_FS_DeviceDescriptor+0x8>)
 8004f12:	4770      	bx	lr
 8004f14:	20000134 	.word	0x20000134

08004f18 <USBD_FS_LangIDStrDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8004f18:	2304      	movs	r3, #4
 8004f1a:	800b      	strh	r3, [r1, #0]
  return USBD_LangIDDesc;
}
 8004f1c:	4800      	ldr	r0, [pc, #0]	; (8004f20 <USBD_FS_LangIDStrDescriptor+0x8>)
 8004f1e:	4770      	bx	lr
 8004f20:	20000148 	.word	0x20000148

08004f24 <IntToUnicode>:
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
  uint8_t idx = 0;

  for (idx = 0; idx < len; idx++)
 8004f24:	2300      	movs	r3, #0
 8004f26:	4293      	cmp	r3, r2
 8004f28:	d217      	bcs.n	8004f5a <IntToUnicode+0x36>
{
 8004f2a:	b430      	push	{r4, r5}
 8004f2c:	e00b      	b.n	8004f46 <IntToUnicode+0x22>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8004f2e:	3437      	adds	r4, #55	; 0x37
 8004f30:	f801 4013 	strb.w	r4, [r1, r3, lsl #1]
    }

    value = value << 4;
 8004f34:	0100      	lsls	r0, r0, #4

    pbuf[2 * idx + 1] = 0;
 8004f36:	005c      	lsls	r4, r3, #1
 8004f38:	3401      	adds	r4, #1
 8004f3a:	2500      	movs	r5, #0
 8004f3c:	550d      	strb	r5, [r1, r4]
  for (idx = 0; idx < len; idx++)
 8004f3e:	3301      	adds	r3, #1
 8004f40:	b2db      	uxtb	r3, r3
 8004f42:	4293      	cmp	r3, r2
 8004f44:	d207      	bcs.n	8004f56 <IntToUnicode+0x32>
    if (((value >> 28)) < 0xA)
 8004f46:	0f04      	lsrs	r4, r0, #28
 8004f48:	f1b0 4f20 	cmp.w	r0, #2684354560	; 0xa0000000
 8004f4c:	d2ef      	bcs.n	8004f2e <IntToUnicode+0xa>
      pbuf[2 * idx] = (value >> 28) + '0';
 8004f4e:	3430      	adds	r4, #48	; 0x30
 8004f50:	f801 4013 	strb.w	r4, [r1, r3, lsl #1]
 8004f54:	e7ee      	b.n	8004f34 <IntToUnicode+0x10>
  }
}
 8004f56:	bc30      	pop	{r4, r5}
 8004f58:	4770      	bx	lr
 8004f5a:	4770      	bx	lr

08004f5c <Get_SerialNum>:
{
 8004f5c:	b538      	push	{r3, r4, r5, lr}
  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8004f5e:	4b0a      	ldr	r3, [pc, #40]	; (8004f88 <Get_SerialNum+0x2c>)
 8004f60:	6818      	ldr	r0, [r3, #0]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8004f62:	3304      	adds	r3, #4
 8004f64:	681c      	ldr	r4, [r3, #0]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8004f66:	3304      	adds	r3, #4
 8004f68:	681b      	ldr	r3, [r3, #0]
  if (deviceserial0 != 0)
 8004f6a:	18c0      	adds	r0, r0, r3
 8004f6c:	d100      	bne.n	8004f70 <Get_SerialNum+0x14>
}
 8004f6e:	bd38      	pop	{r3, r4, r5, pc}
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8004f70:	4d06      	ldr	r5, [pc, #24]	; (8004f8c <Get_SerialNum+0x30>)
 8004f72:	2208      	movs	r2, #8
 8004f74:	1ca9      	adds	r1, r5, #2
 8004f76:	f7ff ffd5 	bl	8004f24 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8004f7a:	2204      	movs	r2, #4
 8004f7c:	f105 0112 	add.w	r1, r5, #18
 8004f80:	4620      	mov	r0, r4
 8004f82:	f7ff ffcf 	bl	8004f24 <IntToUnicode>
}
 8004f86:	e7f2      	b.n	8004f6e <Get_SerialNum+0x12>
 8004f88:	1fff7a10 	.word	0x1fff7a10
 8004f8c:	2000014c 	.word	0x2000014c

08004f90 <USBD_FS_SerialStrDescriptor>:
{
 8004f90:	b508      	push	{r3, lr}
  *length = USB_SIZ_STRING_SERIAL;
 8004f92:	231a      	movs	r3, #26
 8004f94:	800b      	strh	r3, [r1, #0]
  Get_SerialNum();
 8004f96:	f7ff ffe1 	bl	8004f5c <Get_SerialNum>
}
 8004f9a:	4801      	ldr	r0, [pc, #4]	; (8004fa0 <USBD_FS_SerialStrDescriptor+0x10>)
 8004f9c:	bd08      	pop	{r3, pc}
 8004f9e:	bf00      	nop
 8004fa0:	2000014c 	.word	0x2000014c

08004fa4 <USBD_FS_ProductStrDescriptor>:
{
 8004fa4:	b508      	push	{r3, lr}
 8004fa6:	460a      	mov	r2, r1
  if(speed == 0)
 8004fa8:	b928      	cbnz	r0, 8004fb6 <USBD_FS_ProductStrDescriptor+0x12>
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8004faa:	4905      	ldr	r1, [pc, #20]	; (8004fc0 <USBD_FS_ProductStrDescriptor+0x1c>)
 8004fac:	4805      	ldr	r0, [pc, #20]	; (8004fc4 <USBD_FS_ProductStrDescriptor+0x20>)
 8004fae:	f7ff fe0a 	bl	8004bc6 <USBD_GetString>
}
 8004fb2:	4803      	ldr	r0, [pc, #12]	; (8004fc0 <USBD_FS_ProductStrDescriptor+0x1c>)
 8004fb4:	bd08      	pop	{r3, pc}
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8004fb6:	4902      	ldr	r1, [pc, #8]	; (8004fc0 <USBD_FS_ProductStrDescriptor+0x1c>)
 8004fb8:	4802      	ldr	r0, [pc, #8]	; (8004fc4 <USBD_FS_ProductStrDescriptor+0x20>)
 8004fba:	f7ff fe04 	bl	8004bc6 <USBD_GetString>
 8004fbe:	e7f8      	b.n	8004fb2 <USBD_FS_ProductStrDescriptor+0xe>
 8004fc0:	200049c4 	.word	0x200049c4
 8004fc4:	08006604 	.word	0x08006604

08004fc8 <USBD_FS_ManufacturerStrDescriptor>:
{
 8004fc8:	b510      	push	{r4, lr}
 8004fca:	460a      	mov	r2, r1
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8004fcc:	4c03      	ldr	r4, [pc, #12]	; (8004fdc <USBD_FS_ManufacturerStrDescriptor+0x14>)
 8004fce:	4621      	mov	r1, r4
 8004fd0:	4803      	ldr	r0, [pc, #12]	; (8004fe0 <USBD_FS_ManufacturerStrDescriptor+0x18>)
 8004fd2:	f7ff fdf8 	bl	8004bc6 <USBD_GetString>
}
 8004fd6:	4620      	mov	r0, r4
 8004fd8:	bd10      	pop	{r4, pc}
 8004fda:	bf00      	nop
 8004fdc:	200049c4 	.word	0x200049c4
 8004fe0:	08006614 	.word	0x08006614

08004fe4 <USBD_FS_ConfigStrDescriptor>:
{
 8004fe4:	b508      	push	{r3, lr}
 8004fe6:	460a      	mov	r2, r1
  if(speed == USBD_SPEED_HIGH)
 8004fe8:	b928      	cbnz	r0, 8004ff6 <USBD_FS_ConfigStrDescriptor+0x12>
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8004fea:	4905      	ldr	r1, [pc, #20]	; (8005000 <USBD_FS_ConfigStrDescriptor+0x1c>)
 8004fec:	4805      	ldr	r0, [pc, #20]	; (8005004 <USBD_FS_ConfigStrDescriptor+0x20>)
 8004fee:	f7ff fdea 	bl	8004bc6 <USBD_GetString>
}
 8004ff2:	4803      	ldr	r0, [pc, #12]	; (8005000 <USBD_FS_ConfigStrDescriptor+0x1c>)
 8004ff4:	bd08      	pop	{r3, pc}
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8004ff6:	4902      	ldr	r1, [pc, #8]	; (8005000 <USBD_FS_ConfigStrDescriptor+0x1c>)
 8004ff8:	4802      	ldr	r0, [pc, #8]	; (8005004 <USBD_FS_ConfigStrDescriptor+0x20>)
 8004ffa:	f7ff fde4 	bl	8004bc6 <USBD_GetString>
 8004ffe:	e7f8      	b.n	8004ff2 <USBD_FS_ConfigStrDescriptor+0xe>
 8005000:	200049c4 	.word	0x200049c4
 8005004:	0800661c 	.word	0x0800661c

08005008 <USBD_FS_InterfaceStrDescriptor>:
{
 8005008:	b508      	push	{r3, lr}
 800500a:	460a      	mov	r2, r1
  if(speed == 0)
 800500c:	b928      	cbnz	r0, 800501a <USBD_FS_InterfaceStrDescriptor+0x12>
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800500e:	4905      	ldr	r1, [pc, #20]	; (8005024 <USBD_FS_InterfaceStrDescriptor+0x1c>)
 8005010:	4805      	ldr	r0, [pc, #20]	; (8005028 <USBD_FS_InterfaceStrDescriptor+0x20>)
 8005012:	f7ff fdd8 	bl	8004bc6 <USBD_GetString>
}
 8005016:	4803      	ldr	r0, [pc, #12]	; (8005024 <USBD_FS_InterfaceStrDescriptor+0x1c>)
 8005018:	bd08      	pop	{r3, pc}
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800501a:	4902      	ldr	r1, [pc, #8]	; (8005024 <USBD_FS_InterfaceStrDescriptor+0x1c>)
 800501c:	4802      	ldr	r0, [pc, #8]	; (8005028 <USBD_FS_InterfaceStrDescriptor+0x20>)
 800501e:	f7ff fdd2 	bl	8004bc6 <USBD_GetString>
 8005022:	e7f8      	b.n	8005016 <USBD_FS_InterfaceStrDescriptor+0xe>
 8005024:	200049c4 	.word	0x200049c4
 8005028:	08006630 	.word	0x08006630

0800502c <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800502c:	b510      	push	{r4, lr}
 800502e:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8005030:	2202      	movs	r2, #2
 8005032:	f8c0 2294 	str.w	r2, [r0, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8005036:	6183      	str	r3, [r0, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8005038:	61c3      	str	r3, [r0, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800503a:	460a      	mov	r2, r1
 800503c:	2100      	movs	r1, #0
 800503e:	f7ff f8c9 	bl	80041d4 <USBD_LL_Transmit>

  return USBD_OK;
}
 8005042:	2000      	movs	r0, #0
 8005044:	bd10      	pop	{r4, pc}

08005046 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8005046:	b508      	push	{r3, lr}
 8005048:	4613      	mov	r3, r2
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800504a:	460a      	mov	r2, r1
 800504c:	2100      	movs	r1, #0
 800504e:	f7ff f8c1 	bl	80041d4 <USBD_LL_Transmit>

  return USBD_OK;
}
 8005052:	2000      	movs	r0, #0
 8005054:	bd08      	pop	{r3, pc}

08005056 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8005056:	b510      	push	{r4, lr}
 8005058:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800505a:	2203      	movs	r2, #3
 800505c:	f8c0 2294 	str.w	r2, [r0, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8005060:	f8c0 3158 	str.w	r3, [r0, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8005064:	f8c0 315c 	str.w	r3, [r0, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8005068:	460a      	mov	r2, r1
 800506a:	2100      	movs	r1, #0
 800506c:	f7ff f8ba 	bl	80041e4 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8005070:	2000      	movs	r0, #0
 8005072:	bd10      	pop	{r4, pc}

08005074 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8005074:	b508      	push	{r3, lr}
 8005076:	4613      	mov	r3, r2
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8005078:	460a      	mov	r2, r1
 800507a:	2100      	movs	r1, #0
 800507c:	f7ff f8b2 	bl	80041e4 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8005080:	2000      	movs	r0, #0
 8005082:	bd08      	pop	{r3, pc}

08005084 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8005084:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8005086:	2204      	movs	r2, #4
 8005088:	f8c0 2294 	str.w	r2, [r0, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800508c:	2300      	movs	r3, #0
 800508e:	461a      	mov	r2, r3
 8005090:	4619      	mov	r1, r3
 8005092:	f7ff f89f 	bl	80041d4 <USBD_LL_Transmit>

  return USBD_OK;
}
 8005096:	2000      	movs	r0, #0
 8005098:	bd08      	pop	{r3, pc}

0800509a <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800509a:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800509c:	2205      	movs	r2, #5
 800509e:	f8c0 2294 	str.w	r2, [r0, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80050a2:	2300      	movs	r3, #0
 80050a4:	461a      	mov	r2, r3
 80050a6:	4619      	mov	r1, r3
 80050a8:	f7ff f89c 	bl	80041e4 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 80050ac:	2000      	movs	r0, #0
 80050ae:	bd08      	pop	{r3, pc}

080050b0 <__errno>:
 80050b0:	4b01      	ldr	r3, [pc, #4]	; (80050b8 <__errno+0x8>)
 80050b2:	6818      	ldr	r0, [r3, #0]
 80050b4:	4770      	bx	lr
 80050b6:	bf00      	nop
 80050b8:	20000168 	.word	0x20000168

080050bc <std>:
 80050bc:	2300      	movs	r3, #0
 80050be:	b510      	push	{r4, lr}
 80050c0:	4604      	mov	r4, r0
 80050c2:	e9c0 3300 	strd	r3, r3, [r0]
 80050c6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80050ca:	6083      	str	r3, [r0, #8]
 80050cc:	8181      	strh	r1, [r0, #12]
 80050ce:	6643      	str	r3, [r0, #100]	; 0x64
 80050d0:	81c2      	strh	r2, [r0, #14]
 80050d2:	6183      	str	r3, [r0, #24]
 80050d4:	4619      	mov	r1, r3
 80050d6:	2208      	movs	r2, #8
 80050d8:	305c      	adds	r0, #92	; 0x5c
 80050da:	f000 f91a 	bl	8005312 <memset>
 80050de:	4b05      	ldr	r3, [pc, #20]	; (80050f4 <std+0x38>)
 80050e0:	6263      	str	r3, [r4, #36]	; 0x24
 80050e2:	4b05      	ldr	r3, [pc, #20]	; (80050f8 <std+0x3c>)
 80050e4:	62a3      	str	r3, [r4, #40]	; 0x28
 80050e6:	4b05      	ldr	r3, [pc, #20]	; (80050fc <std+0x40>)
 80050e8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80050ea:	4b05      	ldr	r3, [pc, #20]	; (8005100 <std+0x44>)
 80050ec:	6224      	str	r4, [r4, #32]
 80050ee:	6323      	str	r3, [r4, #48]	; 0x30
 80050f0:	bd10      	pop	{r4, pc}
 80050f2:	bf00      	nop
 80050f4:	08005569 	.word	0x08005569
 80050f8:	0800558b 	.word	0x0800558b
 80050fc:	080055c3 	.word	0x080055c3
 8005100:	080055e7 	.word	0x080055e7

08005104 <_cleanup_r>:
 8005104:	4901      	ldr	r1, [pc, #4]	; (800510c <_cleanup_r+0x8>)
 8005106:	f000 b8af 	b.w	8005268 <_fwalk_reent>
 800510a:	bf00      	nop
 800510c:	08005741 	.word	0x08005741

08005110 <__sfmoreglue>:
 8005110:	b570      	push	{r4, r5, r6, lr}
 8005112:	1e4a      	subs	r2, r1, #1
 8005114:	2568      	movs	r5, #104	; 0x68
 8005116:	4355      	muls	r5, r2
 8005118:	460e      	mov	r6, r1
 800511a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800511e:	f000 f901 	bl	8005324 <_malloc_r>
 8005122:	4604      	mov	r4, r0
 8005124:	b140      	cbz	r0, 8005138 <__sfmoreglue+0x28>
 8005126:	2100      	movs	r1, #0
 8005128:	e9c0 1600 	strd	r1, r6, [r0]
 800512c:	300c      	adds	r0, #12
 800512e:	60a0      	str	r0, [r4, #8]
 8005130:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005134:	f000 f8ed 	bl	8005312 <memset>
 8005138:	4620      	mov	r0, r4
 800513a:	bd70      	pop	{r4, r5, r6, pc}

0800513c <__sfp_lock_acquire>:
 800513c:	4801      	ldr	r0, [pc, #4]	; (8005144 <__sfp_lock_acquire+0x8>)
 800513e:	f000 b8d8 	b.w	80052f2 <__retarget_lock_acquire_recursive>
 8005142:	bf00      	nop
 8005144:	20004bcc 	.word	0x20004bcc

08005148 <__sfp_lock_release>:
 8005148:	4801      	ldr	r0, [pc, #4]	; (8005150 <__sfp_lock_release+0x8>)
 800514a:	f000 b8d3 	b.w	80052f4 <__retarget_lock_release_recursive>
 800514e:	bf00      	nop
 8005150:	20004bcc 	.word	0x20004bcc

08005154 <__sinit_lock_acquire>:
 8005154:	4801      	ldr	r0, [pc, #4]	; (800515c <__sinit_lock_acquire+0x8>)
 8005156:	f000 b8cc 	b.w	80052f2 <__retarget_lock_acquire_recursive>
 800515a:	bf00      	nop
 800515c:	20004bc7 	.word	0x20004bc7

08005160 <__sinit_lock_release>:
 8005160:	4801      	ldr	r0, [pc, #4]	; (8005168 <__sinit_lock_release+0x8>)
 8005162:	f000 b8c7 	b.w	80052f4 <__retarget_lock_release_recursive>
 8005166:	bf00      	nop
 8005168:	20004bc7 	.word	0x20004bc7

0800516c <__sinit>:
 800516c:	b510      	push	{r4, lr}
 800516e:	4604      	mov	r4, r0
 8005170:	f7ff fff0 	bl	8005154 <__sinit_lock_acquire>
 8005174:	69a3      	ldr	r3, [r4, #24]
 8005176:	b11b      	cbz	r3, 8005180 <__sinit+0x14>
 8005178:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800517c:	f7ff bff0 	b.w	8005160 <__sinit_lock_release>
 8005180:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8005184:	6523      	str	r3, [r4, #80]	; 0x50
 8005186:	4b13      	ldr	r3, [pc, #76]	; (80051d4 <__sinit+0x68>)
 8005188:	4a13      	ldr	r2, [pc, #76]	; (80051d8 <__sinit+0x6c>)
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	62a2      	str	r2, [r4, #40]	; 0x28
 800518e:	42a3      	cmp	r3, r4
 8005190:	bf04      	itt	eq
 8005192:	2301      	moveq	r3, #1
 8005194:	61a3      	streq	r3, [r4, #24]
 8005196:	4620      	mov	r0, r4
 8005198:	f000 f820 	bl	80051dc <__sfp>
 800519c:	6060      	str	r0, [r4, #4]
 800519e:	4620      	mov	r0, r4
 80051a0:	f000 f81c 	bl	80051dc <__sfp>
 80051a4:	60a0      	str	r0, [r4, #8]
 80051a6:	4620      	mov	r0, r4
 80051a8:	f000 f818 	bl	80051dc <__sfp>
 80051ac:	2200      	movs	r2, #0
 80051ae:	60e0      	str	r0, [r4, #12]
 80051b0:	2104      	movs	r1, #4
 80051b2:	6860      	ldr	r0, [r4, #4]
 80051b4:	f7ff ff82 	bl	80050bc <std>
 80051b8:	68a0      	ldr	r0, [r4, #8]
 80051ba:	2201      	movs	r2, #1
 80051bc:	2109      	movs	r1, #9
 80051be:	f7ff ff7d 	bl	80050bc <std>
 80051c2:	68e0      	ldr	r0, [r4, #12]
 80051c4:	2202      	movs	r2, #2
 80051c6:	2112      	movs	r1, #18
 80051c8:	f7ff ff78 	bl	80050bc <std>
 80051cc:	2301      	movs	r3, #1
 80051ce:	61a3      	str	r3, [r4, #24]
 80051d0:	e7d2      	b.n	8005178 <__sinit+0xc>
 80051d2:	bf00      	nop
 80051d4:	080066a8 	.word	0x080066a8
 80051d8:	08005105 	.word	0x08005105

080051dc <__sfp>:
 80051dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80051de:	4607      	mov	r7, r0
 80051e0:	f7ff ffac 	bl	800513c <__sfp_lock_acquire>
 80051e4:	4b1e      	ldr	r3, [pc, #120]	; (8005260 <__sfp+0x84>)
 80051e6:	681e      	ldr	r6, [r3, #0]
 80051e8:	69b3      	ldr	r3, [r6, #24]
 80051ea:	b913      	cbnz	r3, 80051f2 <__sfp+0x16>
 80051ec:	4630      	mov	r0, r6
 80051ee:	f7ff ffbd 	bl	800516c <__sinit>
 80051f2:	3648      	adds	r6, #72	; 0x48
 80051f4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80051f8:	3b01      	subs	r3, #1
 80051fa:	d503      	bpl.n	8005204 <__sfp+0x28>
 80051fc:	6833      	ldr	r3, [r6, #0]
 80051fe:	b30b      	cbz	r3, 8005244 <__sfp+0x68>
 8005200:	6836      	ldr	r6, [r6, #0]
 8005202:	e7f7      	b.n	80051f4 <__sfp+0x18>
 8005204:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005208:	b9d5      	cbnz	r5, 8005240 <__sfp+0x64>
 800520a:	4b16      	ldr	r3, [pc, #88]	; (8005264 <__sfp+0x88>)
 800520c:	60e3      	str	r3, [r4, #12]
 800520e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005212:	6665      	str	r5, [r4, #100]	; 0x64
 8005214:	f000 f86c 	bl	80052f0 <__retarget_lock_init_recursive>
 8005218:	f7ff ff96 	bl	8005148 <__sfp_lock_release>
 800521c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8005220:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8005224:	6025      	str	r5, [r4, #0]
 8005226:	61a5      	str	r5, [r4, #24]
 8005228:	2208      	movs	r2, #8
 800522a:	4629      	mov	r1, r5
 800522c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005230:	f000 f86f 	bl	8005312 <memset>
 8005234:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005238:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800523c:	4620      	mov	r0, r4
 800523e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005240:	3468      	adds	r4, #104	; 0x68
 8005242:	e7d9      	b.n	80051f8 <__sfp+0x1c>
 8005244:	2104      	movs	r1, #4
 8005246:	4638      	mov	r0, r7
 8005248:	f7ff ff62 	bl	8005110 <__sfmoreglue>
 800524c:	4604      	mov	r4, r0
 800524e:	6030      	str	r0, [r6, #0]
 8005250:	2800      	cmp	r0, #0
 8005252:	d1d5      	bne.n	8005200 <__sfp+0x24>
 8005254:	f7ff ff78 	bl	8005148 <__sfp_lock_release>
 8005258:	230c      	movs	r3, #12
 800525a:	603b      	str	r3, [r7, #0]
 800525c:	e7ee      	b.n	800523c <__sfp+0x60>
 800525e:	bf00      	nop
 8005260:	080066a8 	.word	0x080066a8
 8005264:	ffff0001 	.word	0xffff0001

08005268 <_fwalk_reent>:
 8005268:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800526c:	4606      	mov	r6, r0
 800526e:	4688      	mov	r8, r1
 8005270:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005274:	2700      	movs	r7, #0
 8005276:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800527a:	f1b9 0901 	subs.w	r9, r9, #1
 800527e:	d505      	bpl.n	800528c <_fwalk_reent+0x24>
 8005280:	6824      	ldr	r4, [r4, #0]
 8005282:	2c00      	cmp	r4, #0
 8005284:	d1f7      	bne.n	8005276 <_fwalk_reent+0xe>
 8005286:	4638      	mov	r0, r7
 8005288:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800528c:	89ab      	ldrh	r3, [r5, #12]
 800528e:	2b01      	cmp	r3, #1
 8005290:	d907      	bls.n	80052a2 <_fwalk_reent+0x3a>
 8005292:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005296:	3301      	adds	r3, #1
 8005298:	d003      	beq.n	80052a2 <_fwalk_reent+0x3a>
 800529a:	4629      	mov	r1, r5
 800529c:	4630      	mov	r0, r6
 800529e:	47c0      	blx	r8
 80052a0:	4307      	orrs	r7, r0
 80052a2:	3568      	adds	r5, #104	; 0x68
 80052a4:	e7e9      	b.n	800527a <_fwalk_reent+0x12>
	...

080052a8 <__libc_init_array>:
 80052a8:	b570      	push	{r4, r5, r6, lr}
 80052aa:	4d0d      	ldr	r5, [pc, #52]	; (80052e0 <__libc_init_array+0x38>)
 80052ac:	4c0d      	ldr	r4, [pc, #52]	; (80052e4 <__libc_init_array+0x3c>)
 80052ae:	1b64      	subs	r4, r4, r5
 80052b0:	10a4      	asrs	r4, r4, #2
 80052b2:	2600      	movs	r6, #0
 80052b4:	42a6      	cmp	r6, r4
 80052b6:	d109      	bne.n	80052cc <__libc_init_array+0x24>
 80052b8:	4d0b      	ldr	r5, [pc, #44]	; (80052e8 <__libc_init_array+0x40>)
 80052ba:	4c0c      	ldr	r4, [pc, #48]	; (80052ec <__libc_init_array+0x44>)
 80052bc:	f001 f91c 	bl	80064f8 <_init>
 80052c0:	1b64      	subs	r4, r4, r5
 80052c2:	10a4      	asrs	r4, r4, #2
 80052c4:	2600      	movs	r6, #0
 80052c6:	42a6      	cmp	r6, r4
 80052c8:	d105      	bne.n	80052d6 <__libc_init_array+0x2e>
 80052ca:	bd70      	pop	{r4, r5, r6, pc}
 80052cc:	f855 3b04 	ldr.w	r3, [r5], #4
 80052d0:	4798      	blx	r3
 80052d2:	3601      	adds	r6, #1
 80052d4:	e7ee      	b.n	80052b4 <__libc_init_array+0xc>
 80052d6:	f855 3b04 	ldr.w	r3, [r5], #4
 80052da:	4798      	blx	r3
 80052dc:	3601      	adds	r6, #1
 80052de:	e7f2      	b.n	80052c6 <__libc_init_array+0x1e>
 80052e0:	080066e8 	.word	0x080066e8
 80052e4:	080066e8 	.word	0x080066e8
 80052e8:	080066e8 	.word	0x080066e8
 80052ec:	080066ec 	.word	0x080066ec

080052f0 <__retarget_lock_init_recursive>:
 80052f0:	4770      	bx	lr

080052f2 <__retarget_lock_acquire_recursive>:
 80052f2:	4770      	bx	lr

080052f4 <__retarget_lock_release_recursive>:
 80052f4:	4770      	bx	lr

080052f6 <memcpy>:
 80052f6:	440a      	add	r2, r1
 80052f8:	4291      	cmp	r1, r2
 80052fa:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80052fe:	d100      	bne.n	8005302 <memcpy+0xc>
 8005300:	4770      	bx	lr
 8005302:	b510      	push	{r4, lr}
 8005304:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005308:	f803 4f01 	strb.w	r4, [r3, #1]!
 800530c:	4291      	cmp	r1, r2
 800530e:	d1f9      	bne.n	8005304 <memcpy+0xe>
 8005310:	bd10      	pop	{r4, pc}

08005312 <memset>:
 8005312:	4402      	add	r2, r0
 8005314:	4603      	mov	r3, r0
 8005316:	4293      	cmp	r3, r2
 8005318:	d100      	bne.n	800531c <memset+0xa>
 800531a:	4770      	bx	lr
 800531c:	f803 1b01 	strb.w	r1, [r3], #1
 8005320:	e7f9      	b.n	8005316 <memset+0x4>
	...

08005324 <_malloc_r>:
 8005324:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005326:	1ccd      	adds	r5, r1, #3
 8005328:	f025 0503 	bic.w	r5, r5, #3
 800532c:	3508      	adds	r5, #8
 800532e:	2d0c      	cmp	r5, #12
 8005330:	bf38      	it	cc
 8005332:	250c      	movcc	r5, #12
 8005334:	2d00      	cmp	r5, #0
 8005336:	4606      	mov	r6, r0
 8005338:	db01      	blt.n	800533e <_malloc_r+0x1a>
 800533a:	42a9      	cmp	r1, r5
 800533c:	d903      	bls.n	8005346 <_malloc_r+0x22>
 800533e:	230c      	movs	r3, #12
 8005340:	6033      	str	r3, [r6, #0]
 8005342:	2000      	movs	r0, #0
 8005344:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005346:	f000 fa49 	bl	80057dc <__malloc_lock>
 800534a:	4921      	ldr	r1, [pc, #132]	; (80053d0 <_malloc_r+0xac>)
 800534c:	680a      	ldr	r2, [r1, #0]
 800534e:	4614      	mov	r4, r2
 8005350:	b99c      	cbnz	r4, 800537a <_malloc_r+0x56>
 8005352:	4f20      	ldr	r7, [pc, #128]	; (80053d4 <_malloc_r+0xb0>)
 8005354:	683b      	ldr	r3, [r7, #0]
 8005356:	b923      	cbnz	r3, 8005362 <_malloc_r+0x3e>
 8005358:	4621      	mov	r1, r4
 800535a:	4630      	mov	r0, r6
 800535c:	f000 f8d4 	bl	8005508 <_sbrk_r>
 8005360:	6038      	str	r0, [r7, #0]
 8005362:	4629      	mov	r1, r5
 8005364:	4630      	mov	r0, r6
 8005366:	f000 f8cf 	bl	8005508 <_sbrk_r>
 800536a:	1c43      	adds	r3, r0, #1
 800536c:	d123      	bne.n	80053b6 <_malloc_r+0x92>
 800536e:	230c      	movs	r3, #12
 8005370:	6033      	str	r3, [r6, #0]
 8005372:	4630      	mov	r0, r6
 8005374:	f000 fa38 	bl	80057e8 <__malloc_unlock>
 8005378:	e7e3      	b.n	8005342 <_malloc_r+0x1e>
 800537a:	6823      	ldr	r3, [r4, #0]
 800537c:	1b5b      	subs	r3, r3, r5
 800537e:	d417      	bmi.n	80053b0 <_malloc_r+0x8c>
 8005380:	2b0b      	cmp	r3, #11
 8005382:	d903      	bls.n	800538c <_malloc_r+0x68>
 8005384:	6023      	str	r3, [r4, #0]
 8005386:	441c      	add	r4, r3
 8005388:	6025      	str	r5, [r4, #0]
 800538a:	e004      	b.n	8005396 <_malloc_r+0x72>
 800538c:	6863      	ldr	r3, [r4, #4]
 800538e:	42a2      	cmp	r2, r4
 8005390:	bf0c      	ite	eq
 8005392:	600b      	streq	r3, [r1, #0]
 8005394:	6053      	strne	r3, [r2, #4]
 8005396:	4630      	mov	r0, r6
 8005398:	f000 fa26 	bl	80057e8 <__malloc_unlock>
 800539c:	f104 000b 	add.w	r0, r4, #11
 80053a0:	1d23      	adds	r3, r4, #4
 80053a2:	f020 0007 	bic.w	r0, r0, #7
 80053a6:	1ac2      	subs	r2, r0, r3
 80053a8:	d0cc      	beq.n	8005344 <_malloc_r+0x20>
 80053aa:	1a1b      	subs	r3, r3, r0
 80053ac:	50a3      	str	r3, [r4, r2]
 80053ae:	e7c9      	b.n	8005344 <_malloc_r+0x20>
 80053b0:	4622      	mov	r2, r4
 80053b2:	6864      	ldr	r4, [r4, #4]
 80053b4:	e7cc      	b.n	8005350 <_malloc_r+0x2c>
 80053b6:	1cc4      	adds	r4, r0, #3
 80053b8:	f024 0403 	bic.w	r4, r4, #3
 80053bc:	42a0      	cmp	r0, r4
 80053be:	d0e3      	beq.n	8005388 <_malloc_r+0x64>
 80053c0:	1a21      	subs	r1, r4, r0
 80053c2:	4630      	mov	r0, r6
 80053c4:	f000 f8a0 	bl	8005508 <_sbrk_r>
 80053c8:	3001      	adds	r0, #1
 80053ca:	d1dd      	bne.n	8005388 <_malloc_r+0x64>
 80053cc:	e7cf      	b.n	800536e <_malloc_r+0x4a>
 80053ce:	bf00      	nop
 80053d0:	2000424c 	.word	0x2000424c
 80053d4:	20004250 	.word	0x20004250

080053d8 <iprintf>:
 80053d8:	b40f      	push	{r0, r1, r2, r3}
 80053da:	4b0a      	ldr	r3, [pc, #40]	; (8005404 <iprintf+0x2c>)
 80053dc:	b513      	push	{r0, r1, r4, lr}
 80053de:	681c      	ldr	r4, [r3, #0]
 80053e0:	b124      	cbz	r4, 80053ec <iprintf+0x14>
 80053e2:	69a3      	ldr	r3, [r4, #24]
 80053e4:	b913      	cbnz	r3, 80053ec <iprintf+0x14>
 80053e6:	4620      	mov	r0, r4
 80053e8:	f7ff fec0 	bl	800516c <__sinit>
 80053ec:	ab05      	add	r3, sp, #20
 80053ee:	9a04      	ldr	r2, [sp, #16]
 80053f0:	68a1      	ldr	r1, [r4, #8]
 80053f2:	9301      	str	r3, [sp, #4]
 80053f4:	4620      	mov	r0, r4
 80053f6:	f000 fbd3 	bl	8005ba0 <_vfiprintf_r>
 80053fa:	b002      	add	sp, #8
 80053fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005400:	b004      	add	sp, #16
 8005402:	4770      	bx	lr
 8005404:	20000168 	.word	0x20000168

08005408 <putchar>:
 8005408:	4b09      	ldr	r3, [pc, #36]	; (8005430 <putchar+0x28>)
 800540a:	b513      	push	{r0, r1, r4, lr}
 800540c:	681c      	ldr	r4, [r3, #0]
 800540e:	4601      	mov	r1, r0
 8005410:	b134      	cbz	r4, 8005420 <putchar+0x18>
 8005412:	69a3      	ldr	r3, [r4, #24]
 8005414:	b923      	cbnz	r3, 8005420 <putchar+0x18>
 8005416:	9001      	str	r0, [sp, #4]
 8005418:	4620      	mov	r0, r4
 800541a:	f7ff fea7 	bl	800516c <__sinit>
 800541e:	9901      	ldr	r1, [sp, #4]
 8005420:	68a2      	ldr	r2, [r4, #8]
 8005422:	4620      	mov	r0, r4
 8005424:	b002      	add	sp, #8
 8005426:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800542a:	f000 be7d 	b.w	8006128 <_putc_r>
 800542e:	bf00      	nop
 8005430:	20000168 	.word	0x20000168

08005434 <cleanup_glue>:
 8005434:	b538      	push	{r3, r4, r5, lr}
 8005436:	460c      	mov	r4, r1
 8005438:	6809      	ldr	r1, [r1, #0]
 800543a:	4605      	mov	r5, r0
 800543c:	b109      	cbz	r1, 8005442 <cleanup_glue+0xe>
 800543e:	f7ff fff9 	bl	8005434 <cleanup_glue>
 8005442:	4621      	mov	r1, r4
 8005444:	4628      	mov	r0, r5
 8005446:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800544a:	f000 b9d3 	b.w	80057f4 <_free_r>
	...

08005450 <_reclaim_reent>:
 8005450:	4b2c      	ldr	r3, [pc, #176]	; (8005504 <_reclaim_reent+0xb4>)
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	4283      	cmp	r3, r0
 8005456:	b570      	push	{r4, r5, r6, lr}
 8005458:	4604      	mov	r4, r0
 800545a:	d051      	beq.n	8005500 <_reclaim_reent+0xb0>
 800545c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800545e:	b143      	cbz	r3, 8005472 <_reclaim_reent+0x22>
 8005460:	68db      	ldr	r3, [r3, #12]
 8005462:	2b00      	cmp	r3, #0
 8005464:	d14a      	bne.n	80054fc <_reclaim_reent+0xac>
 8005466:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005468:	6819      	ldr	r1, [r3, #0]
 800546a:	b111      	cbz	r1, 8005472 <_reclaim_reent+0x22>
 800546c:	4620      	mov	r0, r4
 800546e:	f000 f9c1 	bl	80057f4 <_free_r>
 8005472:	6961      	ldr	r1, [r4, #20]
 8005474:	b111      	cbz	r1, 800547c <_reclaim_reent+0x2c>
 8005476:	4620      	mov	r0, r4
 8005478:	f000 f9bc 	bl	80057f4 <_free_r>
 800547c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800547e:	b111      	cbz	r1, 8005486 <_reclaim_reent+0x36>
 8005480:	4620      	mov	r0, r4
 8005482:	f000 f9b7 	bl	80057f4 <_free_r>
 8005486:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8005488:	b111      	cbz	r1, 8005490 <_reclaim_reent+0x40>
 800548a:	4620      	mov	r0, r4
 800548c:	f000 f9b2 	bl	80057f4 <_free_r>
 8005490:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8005492:	b111      	cbz	r1, 800549a <_reclaim_reent+0x4a>
 8005494:	4620      	mov	r0, r4
 8005496:	f000 f9ad 	bl	80057f4 <_free_r>
 800549a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800549c:	b111      	cbz	r1, 80054a4 <_reclaim_reent+0x54>
 800549e:	4620      	mov	r0, r4
 80054a0:	f000 f9a8 	bl	80057f4 <_free_r>
 80054a4:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 80054a6:	b111      	cbz	r1, 80054ae <_reclaim_reent+0x5e>
 80054a8:	4620      	mov	r0, r4
 80054aa:	f000 f9a3 	bl	80057f4 <_free_r>
 80054ae:	6da1      	ldr	r1, [r4, #88]	; 0x58
 80054b0:	b111      	cbz	r1, 80054b8 <_reclaim_reent+0x68>
 80054b2:	4620      	mov	r0, r4
 80054b4:	f000 f99e 	bl	80057f4 <_free_r>
 80054b8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80054ba:	b111      	cbz	r1, 80054c2 <_reclaim_reent+0x72>
 80054bc:	4620      	mov	r0, r4
 80054be:	f000 f999 	bl	80057f4 <_free_r>
 80054c2:	69a3      	ldr	r3, [r4, #24]
 80054c4:	b1e3      	cbz	r3, 8005500 <_reclaim_reent+0xb0>
 80054c6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80054c8:	4620      	mov	r0, r4
 80054ca:	4798      	blx	r3
 80054cc:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80054ce:	b1b9      	cbz	r1, 8005500 <_reclaim_reent+0xb0>
 80054d0:	4620      	mov	r0, r4
 80054d2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80054d6:	f7ff bfad 	b.w	8005434 <cleanup_glue>
 80054da:	5949      	ldr	r1, [r1, r5]
 80054dc:	b941      	cbnz	r1, 80054f0 <_reclaim_reent+0xa0>
 80054de:	3504      	adds	r5, #4
 80054e0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80054e2:	2d80      	cmp	r5, #128	; 0x80
 80054e4:	68d9      	ldr	r1, [r3, #12]
 80054e6:	d1f8      	bne.n	80054da <_reclaim_reent+0x8a>
 80054e8:	4620      	mov	r0, r4
 80054ea:	f000 f983 	bl	80057f4 <_free_r>
 80054ee:	e7ba      	b.n	8005466 <_reclaim_reent+0x16>
 80054f0:	680e      	ldr	r6, [r1, #0]
 80054f2:	4620      	mov	r0, r4
 80054f4:	f000 f97e 	bl	80057f4 <_free_r>
 80054f8:	4631      	mov	r1, r6
 80054fa:	e7ef      	b.n	80054dc <_reclaim_reent+0x8c>
 80054fc:	2500      	movs	r5, #0
 80054fe:	e7ef      	b.n	80054e0 <_reclaim_reent+0x90>
 8005500:	bd70      	pop	{r4, r5, r6, pc}
 8005502:	bf00      	nop
 8005504:	20000168 	.word	0x20000168

08005508 <_sbrk_r>:
 8005508:	b538      	push	{r3, r4, r5, lr}
 800550a:	4d06      	ldr	r5, [pc, #24]	; (8005524 <_sbrk_r+0x1c>)
 800550c:	2300      	movs	r3, #0
 800550e:	4604      	mov	r4, r0
 8005510:	4608      	mov	r0, r1
 8005512:	602b      	str	r3, [r5, #0]
 8005514:	f7fb fa8e 	bl	8000a34 <_sbrk>
 8005518:	1c43      	adds	r3, r0, #1
 800551a:	d102      	bne.n	8005522 <_sbrk_r+0x1a>
 800551c:	682b      	ldr	r3, [r5, #0]
 800551e:	b103      	cbz	r3, 8005522 <_sbrk_r+0x1a>
 8005520:	6023      	str	r3, [r4, #0]
 8005522:	bd38      	pop	{r3, r4, r5, pc}
 8005524:	20004bd0 	.word	0x20004bd0

08005528 <siprintf>:
 8005528:	b40e      	push	{r1, r2, r3}
 800552a:	b500      	push	{lr}
 800552c:	b09c      	sub	sp, #112	; 0x70
 800552e:	ab1d      	add	r3, sp, #116	; 0x74
 8005530:	9002      	str	r0, [sp, #8]
 8005532:	9006      	str	r0, [sp, #24]
 8005534:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005538:	4809      	ldr	r0, [pc, #36]	; (8005560 <siprintf+0x38>)
 800553a:	9107      	str	r1, [sp, #28]
 800553c:	9104      	str	r1, [sp, #16]
 800553e:	4909      	ldr	r1, [pc, #36]	; (8005564 <siprintf+0x3c>)
 8005540:	f853 2b04 	ldr.w	r2, [r3], #4
 8005544:	9105      	str	r1, [sp, #20]
 8005546:	6800      	ldr	r0, [r0, #0]
 8005548:	9301      	str	r3, [sp, #4]
 800554a:	a902      	add	r1, sp, #8
 800554c:	f000 f9fe 	bl	800594c <_svfiprintf_r>
 8005550:	9b02      	ldr	r3, [sp, #8]
 8005552:	2200      	movs	r2, #0
 8005554:	701a      	strb	r2, [r3, #0]
 8005556:	b01c      	add	sp, #112	; 0x70
 8005558:	f85d eb04 	ldr.w	lr, [sp], #4
 800555c:	b003      	add	sp, #12
 800555e:	4770      	bx	lr
 8005560:	20000168 	.word	0x20000168
 8005564:	ffff0208 	.word	0xffff0208

08005568 <__sread>:
 8005568:	b510      	push	{r4, lr}
 800556a:	460c      	mov	r4, r1
 800556c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005570:	f000 fe22 	bl	80061b8 <_read_r>
 8005574:	2800      	cmp	r0, #0
 8005576:	bfab      	itete	ge
 8005578:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800557a:	89a3      	ldrhlt	r3, [r4, #12]
 800557c:	181b      	addge	r3, r3, r0
 800557e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005582:	bfac      	ite	ge
 8005584:	6563      	strge	r3, [r4, #84]	; 0x54
 8005586:	81a3      	strhlt	r3, [r4, #12]
 8005588:	bd10      	pop	{r4, pc}

0800558a <__swrite>:
 800558a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800558e:	461f      	mov	r7, r3
 8005590:	898b      	ldrh	r3, [r1, #12]
 8005592:	05db      	lsls	r3, r3, #23
 8005594:	4605      	mov	r5, r0
 8005596:	460c      	mov	r4, r1
 8005598:	4616      	mov	r6, r2
 800559a:	d505      	bpl.n	80055a8 <__swrite+0x1e>
 800559c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80055a0:	2302      	movs	r3, #2
 80055a2:	2200      	movs	r2, #0
 80055a4:	f000 f908 	bl	80057b8 <_lseek_r>
 80055a8:	89a3      	ldrh	r3, [r4, #12]
 80055aa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80055ae:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80055b2:	81a3      	strh	r3, [r4, #12]
 80055b4:	4632      	mov	r2, r6
 80055b6:	463b      	mov	r3, r7
 80055b8:	4628      	mov	r0, r5
 80055ba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80055be:	f000 b817 	b.w	80055f0 <_write_r>

080055c2 <__sseek>:
 80055c2:	b510      	push	{r4, lr}
 80055c4:	460c      	mov	r4, r1
 80055c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80055ca:	f000 f8f5 	bl	80057b8 <_lseek_r>
 80055ce:	1c43      	adds	r3, r0, #1
 80055d0:	89a3      	ldrh	r3, [r4, #12]
 80055d2:	bf15      	itete	ne
 80055d4:	6560      	strne	r0, [r4, #84]	; 0x54
 80055d6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80055da:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80055de:	81a3      	strheq	r3, [r4, #12]
 80055e0:	bf18      	it	ne
 80055e2:	81a3      	strhne	r3, [r4, #12]
 80055e4:	bd10      	pop	{r4, pc}

080055e6 <__sclose>:
 80055e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80055ea:	f000 b813 	b.w	8005614 <_close_r>
	...

080055f0 <_write_r>:
 80055f0:	b538      	push	{r3, r4, r5, lr}
 80055f2:	4d07      	ldr	r5, [pc, #28]	; (8005610 <_write_r+0x20>)
 80055f4:	4604      	mov	r4, r0
 80055f6:	4608      	mov	r0, r1
 80055f8:	4611      	mov	r1, r2
 80055fa:	2200      	movs	r2, #0
 80055fc:	602a      	str	r2, [r5, #0]
 80055fe:	461a      	mov	r2, r3
 8005600:	f7fb f81c 	bl	800063c <_write>
 8005604:	1c43      	adds	r3, r0, #1
 8005606:	d102      	bne.n	800560e <_write_r+0x1e>
 8005608:	682b      	ldr	r3, [r5, #0]
 800560a:	b103      	cbz	r3, 800560e <_write_r+0x1e>
 800560c:	6023      	str	r3, [r4, #0]
 800560e:	bd38      	pop	{r3, r4, r5, pc}
 8005610:	20004bd0 	.word	0x20004bd0

08005614 <_close_r>:
 8005614:	b538      	push	{r3, r4, r5, lr}
 8005616:	4d06      	ldr	r5, [pc, #24]	; (8005630 <_close_r+0x1c>)
 8005618:	2300      	movs	r3, #0
 800561a:	4604      	mov	r4, r0
 800561c:	4608      	mov	r0, r1
 800561e:	602b      	str	r3, [r5, #0]
 8005620:	f7fb f9fc 	bl	8000a1c <_close>
 8005624:	1c43      	adds	r3, r0, #1
 8005626:	d102      	bne.n	800562e <_close_r+0x1a>
 8005628:	682b      	ldr	r3, [r5, #0]
 800562a:	b103      	cbz	r3, 800562e <_close_r+0x1a>
 800562c:	6023      	str	r3, [r4, #0]
 800562e:	bd38      	pop	{r3, r4, r5, pc}
 8005630:	20004bd0 	.word	0x20004bd0

08005634 <__sflush_r>:
 8005634:	898a      	ldrh	r2, [r1, #12]
 8005636:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800563a:	4605      	mov	r5, r0
 800563c:	0710      	lsls	r0, r2, #28
 800563e:	460c      	mov	r4, r1
 8005640:	d458      	bmi.n	80056f4 <__sflush_r+0xc0>
 8005642:	684b      	ldr	r3, [r1, #4]
 8005644:	2b00      	cmp	r3, #0
 8005646:	dc05      	bgt.n	8005654 <__sflush_r+0x20>
 8005648:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800564a:	2b00      	cmp	r3, #0
 800564c:	dc02      	bgt.n	8005654 <__sflush_r+0x20>
 800564e:	2000      	movs	r0, #0
 8005650:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005654:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005656:	2e00      	cmp	r6, #0
 8005658:	d0f9      	beq.n	800564e <__sflush_r+0x1a>
 800565a:	2300      	movs	r3, #0
 800565c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005660:	682f      	ldr	r7, [r5, #0]
 8005662:	602b      	str	r3, [r5, #0]
 8005664:	d032      	beq.n	80056cc <__sflush_r+0x98>
 8005666:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005668:	89a3      	ldrh	r3, [r4, #12]
 800566a:	075a      	lsls	r2, r3, #29
 800566c:	d505      	bpl.n	800567a <__sflush_r+0x46>
 800566e:	6863      	ldr	r3, [r4, #4]
 8005670:	1ac0      	subs	r0, r0, r3
 8005672:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005674:	b10b      	cbz	r3, 800567a <__sflush_r+0x46>
 8005676:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005678:	1ac0      	subs	r0, r0, r3
 800567a:	2300      	movs	r3, #0
 800567c:	4602      	mov	r2, r0
 800567e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005680:	6a21      	ldr	r1, [r4, #32]
 8005682:	4628      	mov	r0, r5
 8005684:	47b0      	blx	r6
 8005686:	1c43      	adds	r3, r0, #1
 8005688:	89a3      	ldrh	r3, [r4, #12]
 800568a:	d106      	bne.n	800569a <__sflush_r+0x66>
 800568c:	6829      	ldr	r1, [r5, #0]
 800568e:	291d      	cmp	r1, #29
 8005690:	d82c      	bhi.n	80056ec <__sflush_r+0xb8>
 8005692:	4a2a      	ldr	r2, [pc, #168]	; (800573c <__sflush_r+0x108>)
 8005694:	40ca      	lsrs	r2, r1
 8005696:	07d6      	lsls	r6, r2, #31
 8005698:	d528      	bpl.n	80056ec <__sflush_r+0xb8>
 800569a:	2200      	movs	r2, #0
 800569c:	6062      	str	r2, [r4, #4]
 800569e:	04d9      	lsls	r1, r3, #19
 80056a0:	6922      	ldr	r2, [r4, #16]
 80056a2:	6022      	str	r2, [r4, #0]
 80056a4:	d504      	bpl.n	80056b0 <__sflush_r+0x7c>
 80056a6:	1c42      	adds	r2, r0, #1
 80056a8:	d101      	bne.n	80056ae <__sflush_r+0x7a>
 80056aa:	682b      	ldr	r3, [r5, #0]
 80056ac:	b903      	cbnz	r3, 80056b0 <__sflush_r+0x7c>
 80056ae:	6560      	str	r0, [r4, #84]	; 0x54
 80056b0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80056b2:	602f      	str	r7, [r5, #0]
 80056b4:	2900      	cmp	r1, #0
 80056b6:	d0ca      	beq.n	800564e <__sflush_r+0x1a>
 80056b8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80056bc:	4299      	cmp	r1, r3
 80056be:	d002      	beq.n	80056c6 <__sflush_r+0x92>
 80056c0:	4628      	mov	r0, r5
 80056c2:	f000 f897 	bl	80057f4 <_free_r>
 80056c6:	2000      	movs	r0, #0
 80056c8:	6360      	str	r0, [r4, #52]	; 0x34
 80056ca:	e7c1      	b.n	8005650 <__sflush_r+0x1c>
 80056cc:	6a21      	ldr	r1, [r4, #32]
 80056ce:	2301      	movs	r3, #1
 80056d0:	4628      	mov	r0, r5
 80056d2:	47b0      	blx	r6
 80056d4:	1c41      	adds	r1, r0, #1
 80056d6:	d1c7      	bne.n	8005668 <__sflush_r+0x34>
 80056d8:	682b      	ldr	r3, [r5, #0]
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d0c4      	beq.n	8005668 <__sflush_r+0x34>
 80056de:	2b1d      	cmp	r3, #29
 80056e0:	d001      	beq.n	80056e6 <__sflush_r+0xb2>
 80056e2:	2b16      	cmp	r3, #22
 80056e4:	d101      	bne.n	80056ea <__sflush_r+0xb6>
 80056e6:	602f      	str	r7, [r5, #0]
 80056e8:	e7b1      	b.n	800564e <__sflush_r+0x1a>
 80056ea:	89a3      	ldrh	r3, [r4, #12]
 80056ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80056f0:	81a3      	strh	r3, [r4, #12]
 80056f2:	e7ad      	b.n	8005650 <__sflush_r+0x1c>
 80056f4:	690f      	ldr	r7, [r1, #16]
 80056f6:	2f00      	cmp	r7, #0
 80056f8:	d0a9      	beq.n	800564e <__sflush_r+0x1a>
 80056fa:	0793      	lsls	r3, r2, #30
 80056fc:	680e      	ldr	r6, [r1, #0]
 80056fe:	bf08      	it	eq
 8005700:	694b      	ldreq	r3, [r1, #20]
 8005702:	600f      	str	r7, [r1, #0]
 8005704:	bf18      	it	ne
 8005706:	2300      	movne	r3, #0
 8005708:	eba6 0807 	sub.w	r8, r6, r7
 800570c:	608b      	str	r3, [r1, #8]
 800570e:	f1b8 0f00 	cmp.w	r8, #0
 8005712:	dd9c      	ble.n	800564e <__sflush_r+0x1a>
 8005714:	6a21      	ldr	r1, [r4, #32]
 8005716:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005718:	4643      	mov	r3, r8
 800571a:	463a      	mov	r2, r7
 800571c:	4628      	mov	r0, r5
 800571e:	47b0      	blx	r6
 8005720:	2800      	cmp	r0, #0
 8005722:	dc06      	bgt.n	8005732 <__sflush_r+0xfe>
 8005724:	89a3      	ldrh	r3, [r4, #12]
 8005726:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800572a:	81a3      	strh	r3, [r4, #12]
 800572c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005730:	e78e      	b.n	8005650 <__sflush_r+0x1c>
 8005732:	4407      	add	r7, r0
 8005734:	eba8 0800 	sub.w	r8, r8, r0
 8005738:	e7e9      	b.n	800570e <__sflush_r+0xda>
 800573a:	bf00      	nop
 800573c:	20400001 	.word	0x20400001

08005740 <_fflush_r>:
 8005740:	b538      	push	{r3, r4, r5, lr}
 8005742:	690b      	ldr	r3, [r1, #16]
 8005744:	4605      	mov	r5, r0
 8005746:	460c      	mov	r4, r1
 8005748:	b913      	cbnz	r3, 8005750 <_fflush_r+0x10>
 800574a:	2500      	movs	r5, #0
 800574c:	4628      	mov	r0, r5
 800574e:	bd38      	pop	{r3, r4, r5, pc}
 8005750:	b118      	cbz	r0, 800575a <_fflush_r+0x1a>
 8005752:	6983      	ldr	r3, [r0, #24]
 8005754:	b90b      	cbnz	r3, 800575a <_fflush_r+0x1a>
 8005756:	f7ff fd09 	bl	800516c <__sinit>
 800575a:	4b14      	ldr	r3, [pc, #80]	; (80057ac <_fflush_r+0x6c>)
 800575c:	429c      	cmp	r4, r3
 800575e:	d11b      	bne.n	8005798 <_fflush_r+0x58>
 8005760:	686c      	ldr	r4, [r5, #4]
 8005762:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005766:	2b00      	cmp	r3, #0
 8005768:	d0ef      	beq.n	800574a <_fflush_r+0xa>
 800576a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800576c:	07d0      	lsls	r0, r2, #31
 800576e:	d404      	bmi.n	800577a <_fflush_r+0x3a>
 8005770:	0599      	lsls	r1, r3, #22
 8005772:	d402      	bmi.n	800577a <_fflush_r+0x3a>
 8005774:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005776:	f7ff fdbc 	bl	80052f2 <__retarget_lock_acquire_recursive>
 800577a:	4628      	mov	r0, r5
 800577c:	4621      	mov	r1, r4
 800577e:	f7ff ff59 	bl	8005634 <__sflush_r>
 8005782:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005784:	07da      	lsls	r2, r3, #31
 8005786:	4605      	mov	r5, r0
 8005788:	d4e0      	bmi.n	800574c <_fflush_r+0xc>
 800578a:	89a3      	ldrh	r3, [r4, #12]
 800578c:	059b      	lsls	r3, r3, #22
 800578e:	d4dd      	bmi.n	800574c <_fflush_r+0xc>
 8005790:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005792:	f7ff fdaf 	bl	80052f4 <__retarget_lock_release_recursive>
 8005796:	e7d9      	b.n	800574c <_fflush_r+0xc>
 8005798:	4b05      	ldr	r3, [pc, #20]	; (80057b0 <_fflush_r+0x70>)
 800579a:	429c      	cmp	r4, r3
 800579c:	d101      	bne.n	80057a2 <_fflush_r+0x62>
 800579e:	68ac      	ldr	r4, [r5, #8]
 80057a0:	e7df      	b.n	8005762 <_fflush_r+0x22>
 80057a2:	4b04      	ldr	r3, [pc, #16]	; (80057b4 <_fflush_r+0x74>)
 80057a4:	429c      	cmp	r4, r3
 80057a6:	bf08      	it	eq
 80057a8:	68ec      	ldreq	r4, [r5, #12]
 80057aa:	e7da      	b.n	8005762 <_fflush_r+0x22>
 80057ac:	08006668 	.word	0x08006668
 80057b0:	08006688 	.word	0x08006688
 80057b4:	08006648 	.word	0x08006648

080057b8 <_lseek_r>:
 80057b8:	b538      	push	{r3, r4, r5, lr}
 80057ba:	4d07      	ldr	r5, [pc, #28]	; (80057d8 <_lseek_r+0x20>)
 80057bc:	4604      	mov	r4, r0
 80057be:	4608      	mov	r0, r1
 80057c0:	4611      	mov	r1, r2
 80057c2:	2200      	movs	r2, #0
 80057c4:	602a      	str	r2, [r5, #0]
 80057c6:	461a      	mov	r2, r3
 80057c8:	f7fb f932 	bl	8000a30 <_lseek>
 80057cc:	1c43      	adds	r3, r0, #1
 80057ce:	d102      	bne.n	80057d6 <_lseek_r+0x1e>
 80057d0:	682b      	ldr	r3, [r5, #0]
 80057d2:	b103      	cbz	r3, 80057d6 <_lseek_r+0x1e>
 80057d4:	6023      	str	r3, [r4, #0]
 80057d6:	bd38      	pop	{r3, r4, r5, pc}
 80057d8:	20004bd0 	.word	0x20004bd0

080057dc <__malloc_lock>:
 80057dc:	4801      	ldr	r0, [pc, #4]	; (80057e4 <__malloc_lock+0x8>)
 80057de:	f7ff bd88 	b.w	80052f2 <__retarget_lock_acquire_recursive>
 80057e2:	bf00      	nop
 80057e4:	20004bc8 	.word	0x20004bc8

080057e8 <__malloc_unlock>:
 80057e8:	4801      	ldr	r0, [pc, #4]	; (80057f0 <__malloc_unlock+0x8>)
 80057ea:	f7ff bd83 	b.w	80052f4 <__retarget_lock_release_recursive>
 80057ee:	bf00      	nop
 80057f0:	20004bc8 	.word	0x20004bc8

080057f4 <_free_r>:
 80057f4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80057f6:	2900      	cmp	r1, #0
 80057f8:	d048      	beq.n	800588c <_free_r+0x98>
 80057fa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80057fe:	9001      	str	r0, [sp, #4]
 8005800:	2b00      	cmp	r3, #0
 8005802:	f1a1 0404 	sub.w	r4, r1, #4
 8005806:	bfb8      	it	lt
 8005808:	18e4      	addlt	r4, r4, r3
 800580a:	f7ff ffe7 	bl	80057dc <__malloc_lock>
 800580e:	4a20      	ldr	r2, [pc, #128]	; (8005890 <_free_r+0x9c>)
 8005810:	9801      	ldr	r0, [sp, #4]
 8005812:	6813      	ldr	r3, [r2, #0]
 8005814:	4615      	mov	r5, r2
 8005816:	b933      	cbnz	r3, 8005826 <_free_r+0x32>
 8005818:	6063      	str	r3, [r4, #4]
 800581a:	6014      	str	r4, [r2, #0]
 800581c:	b003      	add	sp, #12
 800581e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005822:	f7ff bfe1 	b.w	80057e8 <__malloc_unlock>
 8005826:	42a3      	cmp	r3, r4
 8005828:	d90b      	bls.n	8005842 <_free_r+0x4e>
 800582a:	6821      	ldr	r1, [r4, #0]
 800582c:	1862      	adds	r2, r4, r1
 800582e:	4293      	cmp	r3, r2
 8005830:	bf04      	itt	eq
 8005832:	681a      	ldreq	r2, [r3, #0]
 8005834:	685b      	ldreq	r3, [r3, #4]
 8005836:	6063      	str	r3, [r4, #4]
 8005838:	bf04      	itt	eq
 800583a:	1852      	addeq	r2, r2, r1
 800583c:	6022      	streq	r2, [r4, #0]
 800583e:	602c      	str	r4, [r5, #0]
 8005840:	e7ec      	b.n	800581c <_free_r+0x28>
 8005842:	461a      	mov	r2, r3
 8005844:	685b      	ldr	r3, [r3, #4]
 8005846:	b10b      	cbz	r3, 800584c <_free_r+0x58>
 8005848:	42a3      	cmp	r3, r4
 800584a:	d9fa      	bls.n	8005842 <_free_r+0x4e>
 800584c:	6811      	ldr	r1, [r2, #0]
 800584e:	1855      	adds	r5, r2, r1
 8005850:	42a5      	cmp	r5, r4
 8005852:	d10b      	bne.n	800586c <_free_r+0x78>
 8005854:	6824      	ldr	r4, [r4, #0]
 8005856:	4421      	add	r1, r4
 8005858:	1854      	adds	r4, r2, r1
 800585a:	42a3      	cmp	r3, r4
 800585c:	6011      	str	r1, [r2, #0]
 800585e:	d1dd      	bne.n	800581c <_free_r+0x28>
 8005860:	681c      	ldr	r4, [r3, #0]
 8005862:	685b      	ldr	r3, [r3, #4]
 8005864:	6053      	str	r3, [r2, #4]
 8005866:	4421      	add	r1, r4
 8005868:	6011      	str	r1, [r2, #0]
 800586a:	e7d7      	b.n	800581c <_free_r+0x28>
 800586c:	d902      	bls.n	8005874 <_free_r+0x80>
 800586e:	230c      	movs	r3, #12
 8005870:	6003      	str	r3, [r0, #0]
 8005872:	e7d3      	b.n	800581c <_free_r+0x28>
 8005874:	6825      	ldr	r5, [r4, #0]
 8005876:	1961      	adds	r1, r4, r5
 8005878:	428b      	cmp	r3, r1
 800587a:	bf04      	itt	eq
 800587c:	6819      	ldreq	r1, [r3, #0]
 800587e:	685b      	ldreq	r3, [r3, #4]
 8005880:	6063      	str	r3, [r4, #4]
 8005882:	bf04      	itt	eq
 8005884:	1949      	addeq	r1, r1, r5
 8005886:	6021      	streq	r1, [r4, #0]
 8005888:	6054      	str	r4, [r2, #4]
 800588a:	e7c7      	b.n	800581c <_free_r+0x28>
 800588c:	b003      	add	sp, #12
 800588e:	bd30      	pop	{r4, r5, pc}
 8005890:	2000424c 	.word	0x2000424c

08005894 <__ssputs_r>:
 8005894:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005898:	688e      	ldr	r6, [r1, #8]
 800589a:	429e      	cmp	r6, r3
 800589c:	4682      	mov	sl, r0
 800589e:	460c      	mov	r4, r1
 80058a0:	4690      	mov	r8, r2
 80058a2:	461f      	mov	r7, r3
 80058a4:	d838      	bhi.n	8005918 <__ssputs_r+0x84>
 80058a6:	898a      	ldrh	r2, [r1, #12]
 80058a8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80058ac:	d032      	beq.n	8005914 <__ssputs_r+0x80>
 80058ae:	6825      	ldr	r5, [r4, #0]
 80058b0:	6909      	ldr	r1, [r1, #16]
 80058b2:	eba5 0901 	sub.w	r9, r5, r1
 80058b6:	6965      	ldr	r5, [r4, #20]
 80058b8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80058bc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80058c0:	3301      	adds	r3, #1
 80058c2:	444b      	add	r3, r9
 80058c4:	106d      	asrs	r5, r5, #1
 80058c6:	429d      	cmp	r5, r3
 80058c8:	bf38      	it	cc
 80058ca:	461d      	movcc	r5, r3
 80058cc:	0553      	lsls	r3, r2, #21
 80058ce:	d531      	bpl.n	8005934 <__ssputs_r+0xa0>
 80058d0:	4629      	mov	r1, r5
 80058d2:	f7ff fd27 	bl	8005324 <_malloc_r>
 80058d6:	4606      	mov	r6, r0
 80058d8:	b950      	cbnz	r0, 80058f0 <__ssputs_r+0x5c>
 80058da:	230c      	movs	r3, #12
 80058dc:	f8ca 3000 	str.w	r3, [sl]
 80058e0:	89a3      	ldrh	r3, [r4, #12]
 80058e2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80058e6:	81a3      	strh	r3, [r4, #12]
 80058e8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80058ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80058f0:	6921      	ldr	r1, [r4, #16]
 80058f2:	464a      	mov	r2, r9
 80058f4:	f7ff fcff 	bl	80052f6 <memcpy>
 80058f8:	89a3      	ldrh	r3, [r4, #12]
 80058fa:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80058fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005902:	81a3      	strh	r3, [r4, #12]
 8005904:	6126      	str	r6, [r4, #16]
 8005906:	6165      	str	r5, [r4, #20]
 8005908:	444e      	add	r6, r9
 800590a:	eba5 0509 	sub.w	r5, r5, r9
 800590e:	6026      	str	r6, [r4, #0]
 8005910:	60a5      	str	r5, [r4, #8]
 8005912:	463e      	mov	r6, r7
 8005914:	42be      	cmp	r6, r7
 8005916:	d900      	bls.n	800591a <__ssputs_r+0x86>
 8005918:	463e      	mov	r6, r7
 800591a:	4632      	mov	r2, r6
 800591c:	6820      	ldr	r0, [r4, #0]
 800591e:	4641      	mov	r1, r8
 8005920:	f000 fd80 	bl	8006424 <memmove>
 8005924:	68a3      	ldr	r3, [r4, #8]
 8005926:	6822      	ldr	r2, [r4, #0]
 8005928:	1b9b      	subs	r3, r3, r6
 800592a:	4432      	add	r2, r6
 800592c:	60a3      	str	r3, [r4, #8]
 800592e:	6022      	str	r2, [r4, #0]
 8005930:	2000      	movs	r0, #0
 8005932:	e7db      	b.n	80058ec <__ssputs_r+0x58>
 8005934:	462a      	mov	r2, r5
 8005936:	f000 fd8f 	bl	8006458 <_realloc_r>
 800593a:	4606      	mov	r6, r0
 800593c:	2800      	cmp	r0, #0
 800593e:	d1e1      	bne.n	8005904 <__ssputs_r+0x70>
 8005940:	6921      	ldr	r1, [r4, #16]
 8005942:	4650      	mov	r0, sl
 8005944:	f7ff ff56 	bl	80057f4 <_free_r>
 8005948:	e7c7      	b.n	80058da <__ssputs_r+0x46>
	...

0800594c <_svfiprintf_r>:
 800594c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005950:	4698      	mov	r8, r3
 8005952:	898b      	ldrh	r3, [r1, #12]
 8005954:	061b      	lsls	r3, r3, #24
 8005956:	b09d      	sub	sp, #116	; 0x74
 8005958:	4607      	mov	r7, r0
 800595a:	460d      	mov	r5, r1
 800595c:	4614      	mov	r4, r2
 800595e:	d50e      	bpl.n	800597e <_svfiprintf_r+0x32>
 8005960:	690b      	ldr	r3, [r1, #16]
 8005962:	b963      	cbnz	r3, 800597e <_svfiprintf_r+0x32>
 8005964:	2140      	movs	r1, #64	; 0x40
 8005966:	f7ff fcdd 	bl	8005324 <_malloc_r>
 800596a:	6028      	str	r0, [r5, #0]
 800596c:	6128      	str	r0, [r5, #16]
 800596e:	b920      	cbnz	r0, 800597a <_svfiprintf_r+0x2e>
 8005970:	230c      	movs	r3, #12
 8005972:	603b      	str	r3, [r7, #0]
 8005974:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005978:	e0d1      	b.n	8005b1e <_svfiprintf_r+0x1d2>
 800597a:	2340      	movs	r3, #64	; 0x40
 800597c:	616b      	str	r3, [r5, #20]
 800597e:	2300      	movs	r3, #0
 8005980:	9309      	str	r3, [sp, #36]	; 0x24
 8005982:	2320      	movs	r3, #32
 8005984:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005988:	f8cd 800c 	str.w	r8, [sp, #12]
 800598c:	2330      	movs	r3, #48	; 0x30
 800598e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8005b38 <_svfiprintf_r+0x1ec>
 8005992:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005996:	f04f 0901 	mov.w	r9, #1
 800599a:	4623      	mov	r3, r4
 800599c:	469a      	mov	sl, r3
 800599e:	f813 2b01 	ldrb.w	r2, [r3], #1
 80059a2:	b10a      	cbz	r2, 80059a8 <_svfiprintf_r+0x5c>
 80059a4:	2a25      	cmp	r2, #37	; 0x25
 80059a6:	d1f9      	bne.n	800599c <_svfiprintf_r+0x50>
 80059a8:	ebba 0b04 	subs.w	fp, sl, r4
 80059ac:	d00b      	beq.n	80059c6 <_svfiprintf_r+0x7a>
 80059ae:	465b      	mov	r3, fp
 80059b0:	4622      	mov	r2, r4
 80059b2:	4629      	mov	r1, r5
 80059b4:	4638      	mov	r0, r7
 80059b6:	f7ff ff6d 	bl	8005894 <__ssputs_r>
 80059ba:	3001      	adds	r0, #1
 80059bc:	f000 80aa 	beq.w	8005b14 <_svfiprintf_r+0x1c8>
 80059c0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80059c2:	445a      	add	r2, fp
 80059c4:	9209      	str	r2, [sp, #36]	; 0x24
 80059c6:	f89a 3000 	ldrb.w	r3, [sl]
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	f000 80a2 	beq.w	8005b14 <_svfiprintf_r+0x1c8>
 80059d0:	2300      	movs	r3, #0
 80059d2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80059d6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80059da:	f10a 0a01 	add.w	sl, sl, #1
 80059de:	9304      	str	r3, [sp, #16]
 80059e0:	9307      	str	r3, [sp, #28]
 80059e2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80059e6:	931a      	str	r3, [sp, #104]	; 0x68
 80059e8:	4654      	mov	r4, sl
 80059ea:	2205      	movs	r2, #5
 80059ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 80059f0:	4851      	ldr	r0, [pc, #324]	; (8005b38 <_svfiprintf_r+0x1ec>)
 80059f2:	f7fa fbfd 	bl	80001f0 <memchr>
 80059f6:	9a04      	ldr	r2, [sp, #16]
 80059f8:	b9d8      	cbnz	r0, 8005a32 <_svfiprintf_r+0xe6>
 80059fa:	06d0      	lsls	r0, r2, #27
 80059fc:	bf44      	itt	mi
 80059fe:	2320      	movmi	r3, #32
 8005a00:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005a04:	0711      	lsls	r1, r2, #28
 8005a06:	bf44      	itt	mi
 8005a08:	232b      	movmi	r3, #43	; 0x2b
 8005a0a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005a0e:	f89a 3000 	ldrb.w	r3, [sl]
 8005a12:	2b2a      	cmp	r3, #42	; 0x2a
 8005a14:	d015      	beq.n	8005a42 <_svfiprintf_r+0xf6>
 8005a16:	9a07      	ldr	r2, [sp, #28]
 8005a18:	4654      	mov	r4, sl
 8005a1a:	2000      	movs	r0, #0
 8005a1c:	f04f 0c0a 	mov.w	ip, #10
 8005a20:	4621      	mov	r1, r4
 8005a22:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005a26:	3b30      	subs	r3, #48	; 0x30
 8005a28:	2b09      	cmp	r3, #9
 8005a2a:	d94e      	bls.n	8005aca <_svfiprintf_r+0x17e>
 8005a2c:	b1b0      	cbz	r0, 8005a5c <_svfiprintf_r+0x110>
 8005a2e:	9207      	str	r2, [sp, #28]
 8005a30:	e014      	b.n	8005a5c <_svfiprintf_r+0x110>
 8005a32:	eba0 0308 	sub.w	r3, r0, r8
 8005a36:	fa09 f303 	lsl.w	r3, r9, r3
 8005a3a:	4313      	orrs	r3, r2
 8005a3c:	9304      	str	r3, [sp, #16]
 8005a3e:	46a2      	mov	sl, r4
 8005a40:	e7d2      	b.n	80059e8 <_svfiprintf_r+0x9c>
 8005a42:	9b03      	ldr	r3, [sp, #12]
 8005a44:	1d19      	adds	r1, r3, #4
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	9103      	str	r1, [sp, #12]
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	bfbb      	ittet	lt
 8005a4e:	425b      	neglt	r3, r3
 8005a50:	f042 0202 	orrlt.w	r2, r2, #2
 8005a54:	9307      	strge	r3, [sp, #28]
 8005a56:	9307      	strlt	r3, [sp, #28]
 8005a58:	bfb8      	it	lt
 8005a5a:	9204      	strlt	r2, [sp, #16]
 8005a5c:	7823      	ldrb	r3, [r4, #0]
 8005a5e:	2b2e      	cmp	r3, #46	; 0x2e
 8005a60:	d10c      	bne.n	8005a7c <_svfiprintf_r+0x130>
 8005a62:	7863      	ldrb	r3, [r4, #1]
 8005a64:	2b2a      	cmp	r3, #42	; 0x2a
 8005a66:	d135      	bne.n	8005ad4 <_svfiprintf_r+0x188>
 8005a68:	9b03      	ldr	r3, [sp, #12]
 8005a6a:	1d1a      	adds	r2, r3, #4
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	9203      	str	r2, [sp, #12]
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	bfb8      	it	lt
 8005a74:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8005a78:	3402      	adds	r4, #2
 8005a7a:	9305      	str	r3, [sp, #20]
 8005a7c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8005b48 <_svfiprintf_r+0x1fc>
 8005a80:	7821      	ldrb	r1, [r4, #0]
 8005a82:	2203      	movs	r2, #3
 8005a84:	4650      	mov	r0, sl
 8005a86:	f7fa fbb3 	bl	80001f0 <memchr>
 8005a8a:	b140      	cbz	r0, 8005a9e <_svfiprintf_r+0x152>
 8005a8c:	2340      	movs	r3, #64	; 0x40
 8005a8e:	eba0 000a 	sub.w	r0, r0, sl
 8005a92:	fa03 f000 	lsl.w	r0, r3, r0
 8005a96:	9b04      	ldr	r3, [sp, #16]
 8005a98:	4303      	orrs	r3, r0
 8005a9a:	3401      	adds	r4, #1
 8005a9c:	9304      	str	r3, [sp, #16]
 8005a9e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005aa2:	4826      	ldr	r0, [pc, #152]	; (8005b3c <_svfiprintf_r+0x1f0>)
 8005aa4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005aa8:	2206      	movs	r2, #6
 8005aaa:	f7fa fba1 	bl	80001f0 <memchr>
 8005aae:	2800      	cmp	r0, #0
 8005ab0:	d038      	beq.n	8005b24 <_svfiprintf_r+0x1d8>
 8005ab2:	4b23      	ldr	r3, [pc, #140]	; (8005b40 <_svfiprintf_r+0x1f4>)
 8005ab4:	bb1b      	cbnz	r3, 8005afe <_svfiprintf_r+0x1b2>
 8005ab6:	9b03      	ldr	r3, [sp, #12]
 8005ab8:	3307      	adds	r3, #7
 8005aba:	f023 0307 	bic.w	r3, r3, #7
 8005abe:	3308      	adds	r3, #8
 8005ac0:	9303      	str	r3, [sp, #12]
 8005ac2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005ac4:	4433      	add	r3, r6
 8005ac6:	9309      	str	r3, [sp, #36]	; 0x24
 8005ac8:	e767      	b.n	800599a <_svfiprintf_r+0x4e>
 8005aca:	fb0c 3202 	mla	r2, ip, r2, r3
 8005ace:	460c      	mov	r4, r1
 8005ad0:	2001      	movs	r0, #1
 8005ad2:	e7a5      	b.n	8005a20 <_svfiprintf_r+0xd4>
 8005ad4:	2300      	movs	r3, #0
 8005ad6:	3401      	adds	r4, #1
 8005ad8:	9305      	str	r3, [sp, #20]
 8005ada:	4619      	mov	r1, r3
 8005adc:	f04f 0c0a 	mov.w	ip, #10
 8005ae0:	4620      	mov	r0, r4
 8005ae2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005ae6:	3a30      	subs	r2, #48	; 0x30
 8005ae8:	2a09      	cmp	r2, #9
 8005aea:	d903      	bls.n	8005af4 <_svfiprintf_r+0x1a8>
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d0c5      	beq.n	8005a7c <_svfiprintf_r+0x130>
 8005af0:	9105      	str	r1, [sp, #20]
 8005af2:	e7c3      	b.n	8005a7c <_svfiprintf_r+0x130>
 8005af4:	fb0c 2101 	mla	r1, ip, r1, r2
 8005af8:	4604      	mov	r4, r0
 8005afa:	2301      	movs	r3, #1
 8005afc:	e7f0      	b.n	8005ae0 <_svfiprintf_r+0x194>
 8005afe:	ab03      	add	r3, sp, #12
 8005b00:	9300      	str	r3, [sp, #0]
 8005b02:	462a      	mov	r2, r5
 8005b04:	4b0f      	ldr	r3, [pc, #60]	; (8005b44 <_svfiprintf_r+0x1f8>)
 8005b06:	a904      	add	r1, sp, #16
 8005b08:	4638      	mov	r0, r7
 8005b0a:	f3af 8000 	nop.w
 8005b0e:	1c42      	adds	r2, r0, #1
 8005b10:	4606      	mov	r6, r0
 8005b12:	d1d6      	bne.n	8005ac2 <_svfiprintf_r+0x176>
 8005b14:	89ab      	ldrh	r3, [r5, #12]
 8005b16:	065b      	lsls	r3, r3, #25
 8005b18:	f53f af2c 	bmi.w	8005974 <_svfiprintf_r+0x28>
 8005b1c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005b1e:	b01d      	add	sp, #116	; 0x74
 8005b20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b24:	ab03      	add	r3, sp, #12
 8005b26:	9300      	str	r3, [sp, #0]
 8005b28:	462a      	mov	r2, r5
 8005b2a:	4b06      	ldr	r3, [pc, #24]	; (8005b44 <_svfiprintf_r+0x1f8>)
 8005b2c:	a904      	add	r1, sp, #16
 8005b2e:	4638      	mov	r0, r7
 8005b30:	f000 f9d4 	bl	8005edc <_printf_i>
 8005b34:	e7eb      	b.n	8005b0e <_svfiprintf_r+0x1c2>
 8005b36:	bf00      	nop
 8005b38:	080066ac 	.word	0x080066ac
 8005b3c:	080066b6 	.word	0x080066b6
 8005b40:	00000000 	.word	0x00000000
 8005b44:	08005895 	.word	0x08005895
 8005b48:	080066b2 	.word	0x080066b2

08005b4c <__sfputc_r>:
 8005b4c:	6893      	ldr	r3, [r2, #8]
 8005b4e:	3b01      	subs	r3, #1
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	b410      	push	{r4}
 8005b54:	6093      	str	r3, [r2, #8]
 8005b56:	da08      	bge.n	8005b6a <__sfputc_r+0x1e>
 8005b58:	6994      	ldr	r4, [r2, #24]
 8005b5a:	42a3      	cmp	r3, r4
 8005b5c:	db01      	blt.n	8005b62 <__sfputc_r+0x16>
 8005b5e:	290a      	cmp	r1, #10
 8005b60:	d103      	bne.n	8005b6a <__sfputc_r+0x1e>
 8005b62:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005b66:	f000 bb39 	b.w	80061dc <__swbuf_r>
 8005b6a:	6813      	ldr	r3, [r2, #0]
 8005b6c:	1c58      	adds	r0, r3, #1
 8005b6e:	6010      	str	r0, [r2, #0]
 8005b70:	7019      	strb	r1, [r3, #0]
 8005b72:	4608      	mov	r0, r1
 8005b74:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005b78:	4770      	bx	lr

08005b7a <__sfputs_r>:
 8005b7a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b7c:	4606      	mov	r6, r0
 8005b7e:	460f      	mov	r7, r1
 8005b80:	4614      	mov	r4, r2
 8005b82:	18d5      	adds	r5, r2, r3
 8005b84:	42ac      	cmp	r4, r5
 8005b86:	d101      	bne.n	8005b8c <__sfputs_r+0x12>
 8005b88:	2000      	movs	r0, #0
 8005b8a:	e007      	b.n	8005b9c <__sfputs_r+0x22>
 8005b8c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005b90:	463a      	mov	r2, r7
 8005b92:	4630      	mov	r0, r6
 8005b94:	f7ff ffda 	bl	8005b4c <__sfputc_r>
 8005b98:	1c43      	adds	r3, r0, #1
 8005b9a:	d1f3      	bne.n	8005b84 <__sfputs_r+0xa>
 8005b9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005ba0 <_vfiprintf_r>:
 8005ba0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ba4:	460d      	mov	r5, r1
 8005ba6:	b09d      	sub	sp, #116	; 0x74
 8005ba8:	4614      	mov	r4, r2
 8005baa:	4698      	mov	r8, r3
 8005bac:	4606      	mov	r6, r0
 8005bae:	b118      	cbz	r0, 8005bb8 <_vfiprintf_r+0x18>
 8005bb0:	6983      	ldr	r3, [r0, #24]
 8005bb2:	b90b      	cbnz	r3, 8005bb8 <_vfiprintf_r+0x18>
 8005bb4:	f7ff fada 	bl	800516c <__sinit>
 8005bb8:	4b89      	ldr	r3, [pc, #548]	; (8005de0 <_vfiprintf_r+0x240>)
 8005bba:	429d      	cmp	r5, r3
 8005bbc:	d11b      	bne.n	8005bf6 <_vfiprintf_r+0x56>
 8005bbe:	6875      	ldr	r5, [r6, #4]
 8005bc0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005bc2:	07d9      	lsls	r1, r3, #31
 8005bc4:	d405      	bmi.n	8005bd2 <_vfiprintf_r+0x32>
 8005bc6:	89ab      	ldrh	r3, [r5, #12]
 8005bc8:	059a      	lsls	r2, r3, #22
 8005bca:	d402      	bmi.n	8005bd2 <_vfiprintf_r+0x32>
 8005bcc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005bce:	f7ff fb90 	bl	80052f2 <__retarget_lock_acquire_recursive>
 8005bd2:	89ab      	ldrh	r3, [r5, #12]
 8005bd4:	071b      	lsls	r3, r3, #28
 8005bd6:	d501      	bpl.n	8005bdc <_vfiprintf_r+0x3c>
 8005bd8:	692b      	ldr	r3, [r5, #16]
 8005bda:	b9eb      	cbnz	r3, 8005c18 <_vfiprintf_r+0x78>
 8005bdc:	4629      	mov	r1, r5
 8005bde:	4630      	mov	r0, r6
 8005be0:	f000 fb4e 	bl	8006280 <__swsetup_r>
 8005be4:	b1c0      	cbz	r0, 8005c18 <_vfiprintf_r+0x78>
 8005be6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005be8:	07dc      	lsls	r4, r3, #31
 8005bea:	d50e      	bpl.n	8005c0a <_vfiprintf_r+0x6a>
 8005bec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005bf0:	b01d      	add	sp, #116	; 0x74
 8005bf2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005bf6:	4b7b      	ldr	r3, [pc, #492]	; (8005de4 <_vfiprintf_r+0x244>)
 8005bf8:	429d      	cmp	r5, r3
 8005bfa:	d101      	bne.n	8005c00 <_vfiprintf_r+0x60>
 8005bfc:	68b5      	ldr	r5, [r6, #8]
 8005bfe:	e7df      	b.n	8005bc0 <_vfiprintf_r+0x20>
 8005c00:	4b79      	ldr	r3, [pc, #484]	; (8005de8 <_vfiprintf_r+0x248>)
 8005c02:	429d      	cmp	r5, r3
 8005c04:	bf08      	it	eq
 8005c06:	68f5      	ldreq	r5, [r6, #12]
 8005c08:	e7da      	b.n	8005bc0 <_vfiprintf_r+0x20>
 8005c0a:	89ab      	ldrh	r3, [r5, #12]
 8005c0c:	0598      	lsls	r0, r3, #22
 8005c0e:	d4ed      	bmi.n	8005bec <_vfiprintf_r+0x4c>
 8005c10:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005c12:	f7ff fb6f 	bl	80052f4 <__retarget_lock_release_recursive>
 8005c16:	e7e9      	b.n	8005bec <_vfiprintf_r+0x4c>
 8005c18:	2300      	movs	r3, #0
 8005c1a:	9309      	str	r3, [sp, #36]	; 0x24
 8005c1c:	2320      	movs	r3, #32
 8005c1e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005c22:	f8cd 800c 	str.w	r8, [sp, #12]
 8005c26:	2330      	movs	r3, #48	; 0x30
 8005c28:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8005dec <_vfiprintf_r+0x24c>
 8005c2c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005c30:	f04f 0901 	mov.w	r9, #1
 8005c34:	4623      	mov	r3, r4
 8005c36:	469a      	mov	sl, r3
 8005c38:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005c3c:	b10a      	cbz	r2, 8005c42 <_vfiprintf_r+0xa2>
 8005c3e:	2a25      	cmp	r2, #37	; 0x25
 8005c40:	d1f9      	bne.n	8005c36 <_vfiprintf_r+0x96>
 8005c42:	ebba 0b04 	subs.w	fp, sl, r4
 8005c46:	d00b      	beq.n	8005c60 <_vfiprintf_r+0xc0>
 8005c48:	465b      	mov	r3, fp
 8005c4a:	4622      	mov	r2, r4
 8005c4c:	4629      	mov	r1, r5
 8005c4e:	4630      	mov	r0, r6
 8005c50:	f7ff ff93 	bl	8005b7a <__sfputs_r>
 8005c54:	3001      	adds	r0, #1
 8005c56:	f000 80aa 	beq.w	8005dae <_vfiprintf_r+0x20e>
 8005c5a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005c5c:	445a      	add	r2, fp
 8005c5e:	9209      	str	r2, [sp, #36]	; 0x24
 8005c60:	f89a 3000 	ldrb.w	r3, [sl]
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	f000 80a2 	beq.w	8005dae <_vfiprintf_r+0x20e>
 8005c6a:	2300      	movs	r3, #0
 8005c6c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005c70:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005c74:	f10a 0a01 	add.w	sl, sl, #1
 8005c78:	9304      	str	r3, [sp, #16]
 8005c7a:	9307      	str	r3, [sp, #28]
 8005c7c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005c80:	931a      	str	r3, [sp, #104]	; 0x68
 8005c82:	4654      	mov	r4, sl
 8005c84:	2205      	movs	r2, #5
 8005c86:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005c8a:	4858      	ldr	r0, [pc, #352]	; (8005dec <_vfiprintf_r+0x24c>)
 8005c8c:	f7fa fab0 	bl	80001f0 <memchr>
 8005c90:	9a04      	ldr	r2, [sp, #16]
 8005c92:	b9d8      	cbnz	r0, 8005ccc <_vfiprintf_r+0x12c>
 8005c94:	06d1      	lsls	r1, r2, #27
 8005c96:	bf44      	itt	mi
 8005c98:	2320      	movmi	r3, #32
 8005c9a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005c9e:	0713      	lsls	r3, r2, #28
 8005ca0:	bf44      	itt	mi
 8005ca2:	232b      	movmi	r3, #43	; 0x2b
 8005ca4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005ca8:	f89a 3000 	ldrb.w	r3, [sl]
 8005cac:	2b2a      	cmp	r3, #42	; 0x2a
 8005cae:	d015      	beq.n	8005cdc <_vfiprintf_r+0x13c>
 8005cb0:	9a07      	ldr	r2, [sp, #28]
 8005cb2:	4654      	mov	r4, sl
 8005cb4:	2000      	movs	r0, #0
 8005cb6:	f04f 0c0a 	mov.w	ip, #10
 8005cba:	4621      	mov	r1, r4
 8005cbc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005cc0:	3b30      	subs	r3, #48	; 0x30
 8005cc2:	2b09      	cmp	r3, #9
 8005cc4:	d94e      	bls.n	8005d64 <_vfiprintf_r+0x1c4>
 8005cc6:	b1b0      	cbz	r0, 8005cf6 <_vfiprintf_r+0x156>
 8005cc8:	9207      	str	r2, [sp, #28]
 8005cca:	e014      	b.n	8005cf6 <_vfiprintf_r+0x156>
 8005ccc:	eba0 0308 	sub.w	r3, r0, r8
 8005cd0:	fa09 f303 	lsl.w	r3, r9, r3
 8005cd4:	4313      	orrs	r3, r2
 8005cd6:	9304      	str	r3, [sp, #16]
 8005cd8:	46a2      	mov	sl, r4
 8005cda:	e7d2      	b.n	8005c82 <_vfiprintf_r+0xe2>
 8005cdc:	9b03      	ldr	r3, [sp, #12]
 8005cde:	1d19      	adds	r1, r3, #4
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	9103      	str	r1, [sp, #12]
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	bfbb      	ittet	lt
 8005ce8:	425b      	neglt	r3, r3
 8005cea:	f042 0202 	orrlt.w	r2, r2, #2
 8005cee:	9307      	strge	r3, [sp, #28]
 8005cf0:	9307      	strlt	r3, [sp, #28]
 8005cf2:	bfb8      	it	lt
 8005cf4:	9204      	strlt	r2, [sp, #16]
 8005cf6:	7823      	ldrb	r3, [r4, #0]
 8005cf8:	2b2e      	cmp	r3, #46	; 0x2e
 8005cfa:	d10c      	bne.n	8005d16 <_vfiprintf_r+0x176>
 8005cfc:	7863      	ldrb	r3, [r4, #1]
 8005cfe:	2b2a      	cmp	r3, #42	; 0x2a
 8005d00:	d135      	bne.n	8005d6e <_vfiprintf_r+0x1ce>
 8005d02:	9b03      	ldr	r3, [sp, #12]
 8005d04:	1d1a      	adds	r2, r3, #4
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	9203      	str	r2, [sp, #12]
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	bfb8      	it	lt
 8005d0e:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8005d12:	3402      	adds	r4, #2
 8005d14:	9305      	str	r3, [sp, #20]
 8005d16:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8005dfc <_vfiprintf_r+0x25c>
 8005d1a:	7821      	ldrb	r1, [r4, #0]
 8005d1c:	2203      	movs	r2, #3
 8005d1e:	4650      	mov	r0, sl
 8005d20:	f7fa fa66 	bl	80001f0 <memchr>
 8005d24:	b140      	cbz	r0, 8005d38 <_vfiprintf_r+0x198>
 8005d26:	2340      	movs	r3, #64	; 0x40
 8005d28:	eba0 000a 	sub.w	r0, r0, sl
 8005d2c:	fa03 f000 	lsl.w	r0, r3, r0
 8005d30:	9b04      	ldr	r3, [sp, #16]
 8005d32:	4303      	orrs	r3, r0
 8005d34:	3401      	adds	r4, #1
 8005d36:	9304      	str	r3, [sp, #16]
 8005d38:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005d3c:	482c      	ldr	r0, [pc, #176]	; (8005df0 <_vfiprintf_r+0x250>)
 8005d3e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005d42:	2206      	movs	r2, #6
 8005d44:	f7fa fa54 	bl	80001f0 <memchr>
 8005d48:	2800      	cmp	r0, #0
 8005d4a:	d03f      	beq.n	8005dcc <_vfiprintf_r+0x22c>
 8005d4c:	4b29      	ldr	r3, [pc, #164]	; (8005df4 <_vfiprintf_r+0x254>)
 8005d4e:	bb1b      	cbnz	r3, 8005d98 <_vfiprintf_r+0x1f8>
 8005d50:	9b03      	ldr	r3, [sp, #12]
 8005d52:	3307      	adds	r3, #7
 8005d54:	f023 0307 	bic.w	r3, r3, #7
 8005d58:	3308      	adds	r3, #8
 8005d5a:	9303      	str	r3, [sp, #12]
 8005d5c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005d5e:	443b      	add	r3, r7
 8005d60:	9309      	str	r3, [sp, #36]	; 0x24
 8005d62:	e767      	b.n	8005c34 <_vfiprintf_r+0x94>
 8005d64:	fb0c 3202 	mla	r2, ip, r2, r3
 8005d68:	460c      	mov	r4, r1
 8005d6a:	2001      	movs	r0, #1
 8005d6c:	e7a5      	b.n	8005cba <_vfiprintf_r+0x11a>
 8005d6e:	2300      	movs	r3, #0
 8005d70:	3401      	adds	r4, #1
 8005d72:	9305      	str	r3, [sp, #20]
 8005d74:	4619      	mov	r1, r3
 8005d76:	f04f 0c0a 	mov.w	ip, #10
 8005d7a:	4620      	mov	r0, r4
 8005d7c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005d80:	3a30      	subs	r2, #48	; 0x30
 8005d82:	2a09      	cmp	r2, #9
 8005d84:	d903      	bls.n	8005d8e <_vfiprintf_r+0x1ee>
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d0c5      	beq.n	8005d16 <_vfiprintf_r+0x176>
 8005d8a:	9105      	str	r1, [sp, #20]
 8005d8c:	e7c3      	b.n	8005d16 <_vfiprintf_r+0x176>
 8005d8e:	fb0c 2101 	mla	r1, ip, r1, r2
 8005d92:	4604      	mov	r4, r0
 8005d94:	2301      	movs	r3, #1
 8005d96:	e7f0      	b.n	8005d7a <_vfiprintf_r+0x1da>
 8005d98:	ab03      	add	r3, sp, #12
 8005d9a:	9300      	str	r3, [sp, #0]
 8005d9c:	462a      	mov	r2, r5
 8005d9e:	4b16      	ldr	r3, [pc, #88]	; (8005df8 <_vfiprintf_r+0x258>)
 8005da0:	a904      	add	r1, sp, #16
 8005da2:	4630      	mov	r0, r6
 8005da4:	f3af 8000 	nop.w
 8005da8:	4607      	mov	r7, r0
 8005daa:	1c78      	adds	r0, r7, #1
 8005dac:	d1d6      	bne.n	8005d5c <_vfiprintf_r+0x1bc>
 8005dae:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005db0:	07d9      	lsls	r1, r3, #31
 8005db2:	d405      	bmi.n	8005dc0 <_vfiprintf_r+0x220>
 8005db4:	89ab      	ldrh	r3, [r5, #12]
 8005db6:	059a      	lsls	r2, r3, #22
 8005db8:	d402      	bmi.n	8005dc0 <_vfiprintf_r+0x220>
 8005dba:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005dbc:	f7ff fa9a 	bl	80052f4 <__retarget_lock_release_recursive>
 8005dc0:	89ab      	ldrh	r3, [r5, #12]
 8005dc2:	065b      	lsls	r3, r3, #25
 8005dc4:	f53f af12 	bmi.w	8005bec <_vfiprintf_r+0x4c>
 8005dc8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005dca:	e711      	b.n	8005bf0 <_vfiprintf_r+0x50>
 8005dcc:	ab03      	add	r3, sp, #12
 8005dce:	9300      	str	r3, [sp, #0]
 8005dd0:	462a      	mov	r2, r5
 8005dd2:	4b09      	ldr	r3, [pc, #36]	; (8005df8 <_vfiprintf_r+0x258>)
 8005dd4:	a904      	add	r1, sp, #16
 8005dd6:	4630      	mov	r0, r6
 8005dd8:	f000 f880 	bl	8005edc <_printf_i>
 8005ddc:	e7e4      	b.n	8005da8 <_vfiprintf_r+0x208>
 8005dde:	bf00      	nop
 8005de0:	08006668 	.word	0x08006668
 8005de4:	08006688 	.word	0x08006688
 8005de8:	08006648 	.word	0x08006648
 8005dec:	080066ac 	.word	0x080066ac
 8005df0:	080066b6 	.word	0x080066b6
 8005df4:	00000000 	.word	0x00000000
 8005df8:	08005b7b 	.word	0x08005b7b
 8005dfc:	080066b2 	.word	0x080066b2

08005e00 <_printf_common>:
 8005e00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005e04:	4616      	mov	r6, r2
 8005e06:	4699      	mov	r9, r3
 8005e08:	688a      	ldr	r2, [r1, #8]
 8005e0a:	690b      	ldr	r3, [r1, #16]
 8005e0c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005e10:	4293      	cmp	r3, r2
 8005e12:	bfb8      	it	lt
 8005e14:	4613      	movlt	r3, r2
 8005e16:	6033      	str	r3, [r6, #0]
 8005e18:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005e1c:	4607      	mov	r7, r0
 8005e1e:	460c      	mov	r4, r1
 8005e20:	b10a      	cbz	r2, 8005e26 <_printf_common+0x26>
 8005e22:	3301      	adds	r3, #1
 8005e24:	6033      	str	r3, [r6, #0]
 8005e26:	6823      	ldr	r3, [r4, #0]
 8005e28:	0699      	lsls	r1, r3, #26
 8005e2a:	bf42      	ittt	mi
 8005e2c:	6833      	ldrmi	r3, [r6, #0]
 8005e2e:	3302      	addmi	r3, #2
 8005e30:	6033      	strmi	r3, [r6, #0]
 8005e32:	6825      	ldr	r5, [r4, #0]
 8005e34:	f015 0506 	ands.w	r5, r5, #6
 8005e38:	d106      	bne.n	8005e48 <_printf_common+0x48>
 8005e3a:	f104 0a19 	add.w	sl, r4, #25
 8005e3e:	68e3      	ldr	r3, [r4, #12]
 8005e40:	6832      	ldr	r2, [r6, #0]
 8005e42:	1a9b      	subs	r3, r3, r2
 8005e44:	42ab      	cmp	r3, r5
 8005e46:	dc26      	bgt.n	8005e96 <_printf_common+0x96>
 8005e48:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005e4c:	1e13      	subs	r3, r2, #0
 8005e4e:	6822      	ldr	r2, [r4, #0]
 8005e50:	bf18      	it	ne
 8005e52:	2301      	movne	r3, #1
 8005e54:	0692      	lsls	r2, r2, #26
 8005e56:	d42b      	bmi.n	8005eb0 <_printf_common+0xb0>
 8005e58:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005e5c:	4649      	mov	r1, r9
 8005e5e:	4638      	mov	r0, r7
 8005e60:	47c0      	blx	r8
 8005e62:	3001      	adds	r0, #1
 8005e64:	d01e      	beq.n	8005ea4 <_printf_common+0xa4>
 8005e66:	6823      	ldr	r3, [r4, #0]
 8005e68:	68e5      	ldr	r5, [r4, #12]
 8005e6a:	6832      	ldr	r2, [r6, #0]
 8005e6c:	f003 0306 	and.w	r3, r3, #6
 8005e70:	2b04      	cmp	r3, #4
 8005e72:	bf08      	it	eq
 8005e74:	1aad      	subeq	r5, r5, r2
 8005e76:	68a3      	ldr	r3, [r4, #8]
 8005e78:	6922      	ldr	r2, [r4, #16]
 8005e7a:	bf0c      	ite	eq
 8005e7c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005e80:	2500      	movne	r5, #0
 8005e82:	4293      	cmp	r3, r2
 8005e84:	bfc4      	itt	gt
 8005e86:	1a9b      	subgt	r3, r3, r2
 8005e88:	18ed      	addgt	r5, r5, r3
 8005e8a:	2600      	movs	r6, #0
 8005e8c:	341a      	adds	r4, #26
 8005e8e:	42b5      	cmp	r5, r6
 8005e90:	d11a      	bne.n	8005ec8 <_printf_common+0xc8>
 8005e92:	2000      	movs	r0, #0
 8005e94:	e008      	b.n	8005ea8 <_printf_common+0xa8>
 8005e96:	2301      	movs	r3, #1
 8005e98:	4652      	mov	r2, sl
 8005e9a:	4649      	mov	r1, r9
 8005e9c:	4638      	mov	r0, r7
 8005e9e:	47c0      	blx	r8
 8005ea0:	3001      	adds	r0, #1
 8005ea2:	d103      	bne.n	8005eac <_printf_common+0xac>
 8005ea4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005ea8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005eac:	3501      	adds	r5, #1
 8005eae:	e7c6      	b.n	8005e3e <_printf_common+0x3e>
 8005eb0:	18e1      	adds	r1, r4, r3
 8005eb2:	1c5a      	adds	r2, r3, #1
 8005eb4:	2030      	movs	r0, #48	; 0x30
 8005eb6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005eba:	4422      	add	r2, r4
 8005ebc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005ec0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005ec4:	3302      	adds	r3, #2
 8005ec6:	e7c7      	b.n	8005e58 <_printf_common+0x58>
 8005ec8:	2301      	movs	r3, #1
 8005eca:	4622      	mov	r2, r4
 8005ecc:	4649      	mov	r1, r9
 8005ece:	4638      	mov	r0, r7
 8005ed0:	47c0      	blx	r8
 8005ed2:	3001      	adds	r0, #1
 8005ed4:	d0e6      	beq.n	8005ea4 <_printf_common+0xa4>
 8005ed6:	3601      	adds	r6, #1
 8005ed8:	e7d9      	b.n	8005e8e <_printf_common+0x8e>
	...

08005edc <_printf_i>:
 8005edc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005ee0:	460c      	mov	r4, r1
 8005ee2:	4691      	mov	r9, r2
 8005ee4:	7e27      	ldrb	r7, [r4, #24]
 8005ee6:	990c      	ldr	r1, [sp, #48]	; 0x30
 8005ee8:	2f78      	cmp	r7, #120	; 0x78
 8005eea:	4680      	mov	r8, r0
 8005eec:	469a      	mov	sl, r3
 8005eee:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005ef2:	d807      	bhi.n	8005f04 <_printf_i+0x28>
 8005ef4:	2f62      	cmp	r7, #98	; 0x62
 8005ef6:	d80a      	bhi.n	8005f0e <_printf_i+0x32>
 8005ef8:	2f00      	cmp	r7, #0
 8005efa:	f000 80d8 	beq.w	80060ae <_printf_i+0x1d2>
 8005efe:	2f58      	cmp	r7, #88	; 0x58
 8005f00:	f000 80a3 	beq.w	800604a <_printf_i+0x16e>
 8005f04:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005f08:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005f0c:	e03a      	b.n	8005f84 <_printf_i+0xa8>
 8005f0e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005f12:	2b15      	cmp	r3, #21
 8005f14:	d8f6      	bhi.n	8005f04 <_printf_i+0x28>
 8005f16:	a001      	add	r0, pc, #4	; (adr r0, 8005f1c <_printf_i+0x40>)
 8005f18:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8005f1c:	08005f75 	.word	0x08005f75
 8005f20:	08005f89 	.word	0x08005f89
 8005f24:	08005f05 	.word	0x08005f05
 8005f28:	08005f05 	.word	0x08005f05
 8005f2c:	08005f05 	.word	0x08005f05
 8005f30:	08005f05 	.word	0x08005f05
 8005f34:	08005f89 	.word	0x08005f89
 8005f38:	08005f05 	.word	0x08005f05
 8005f3c:	08005f05 	.word	0x08005f05
 8005f40:	08005f05 	.word	0x08005f05
 8005f44:	08005f05 	.word	0x08005f05
 8005f48:	08006095 	.word	0x08006095
 8005f4c:	08005fb9 	.word	0x08005fb9
 8005f50:	08006077 	.word	0x08006077
 8005f54:	08005f05 	.word	0x08005f05
 8005f58:	08005f05 	.word	0x08005f05
 8005f5c:	080060b7 	.word	0x080060b7
 8005f60:	08005f05 	.word	0x08005f05
 8005f64:	08005fb9 	.word	0x08005fb9
 8005f68:	08005f05 	.word	0x08005f05
 8005f6c:	08005f05 	.word	0x08005f05
 8005f70:	0800607f 	.word	0x0800607f
 8005f74:	680b      	ldr	r3, [r1, #0]
 8005f76:	1d1a      	adds	r2, r3, #4
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	600a      	str	r2, [r1, #0]
 8005f7c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005f80:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005f84:	2301      	movs	r3, #1
 8005f86:	e0a3      	b.n	80060d0 <_printf_i+0x1f4>
 8005f88:	6825      	ldr	r5, [r4, #0]
 8005f8a:	6808      	ldr	r0, [r1, #0]
 8005f8c:	062e      	lsls	r6, r5, #24
 8005f8e:	f100 0304 	add.w	r3, r0, #4
 8005f92:	d50a      	bpl.n	8005faa <_printf_i+0xce>
 8005f94:	6805      	ldr	r5, [r0, #0]
 8005f96:	600b      	str	r3, [r1, #0]
 8005f98:	2d00      	cmp	r5, #0
 8005f9a:	da03      	bge.n	8005fa4 <_printf_i+0xc8>
 8005f9c:	232d      	movs	r3, #45	; 0x2d
 8005f9e:	426d      	negs	r5, r5
 8005fa0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005fa4:	485e      	ldr	r0, [pc, #376]	; (8006120 <_printf_i+0x244>)
 8005fa6:	230a      	movs	r3, #10
 8005fa8:	e019      	b.n	8005fde <_printf_i+0x102>
 8005faa:	f015 0f40 	tst.w	r5, #64	; 0x40
 8005fae:	6805      	ldr	r5, [r0, #0]
 8005fb0:	600b      	str	r3, [r1, #0]
 8005fb2:	bf18      	it	ne
 8005fb4:	b22d      	sxthne	r5, r5
 8005fb6:	e7ef      	b.n	8005f98 <_printf_i+0xbc>
 8005fb8:	680b      	ldr	r3, [r1, #0]
 8005fba:	6825      	ldr	r5, [r4, #0]
 8005fbc:	1d18      	adds	r0, r3, #4
 8005fbe:	6008      	str	r0, [r1, #0]
 8005fc0:	0628      	lsls	r0, r5, #24
 8005fc2:	d501      	bpl.n	8005fc8 <_printf_i+0xec>
 8005fc4:	681d      	ldr	r5, [r3, #0]
 8005fc6:	e002      	b.n	8005fce <_printf_i+0xf2>
 8005fc8:	0669      	lsls	r1, r5, #25
 8005fca:	d5fb      	bpl.n	8005fc4 <_printf_i+0xe8>
 8005fcc:	881d      	ldrh	r5, [r3, #0]
 8005fce:	4854      	ldr	r0, [pc, #336]	; (8006120 <_printf_i+0x244>)
 8005fd0:	2f6f      	cmp	r7, #111	; 0x6f
 8005fd2:	bf0c      	ite	eq
 8005fd4:	2308      	moveq	r3, #8
 8005fd6:	230a      	movne	r3, #10
 8005fd8:	2100      	movs	r1, #0
 8005fda:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005fde:	6866      	ldr	r6, [r4, #4]
 8005fe0:	60a6      	str	r6, [r4, #8]
 8005fe2:	2e00      	cmp	r6, #0
 8005fe4:	bfa2      	ittt	ge
 8005fe6:	6821      	ldrge	r1, [r4, #0]
 8005fe8:	f021 0104 	bicge.w	r1, r1, #4
 8005fec:	6021      	strge	r1, [r4, #0]
 8005fee:	b90d      	cbnz	r5, 8005ff4 <_printf_i+0x118>
 8005ff0:	2e00      	cmp	r6, #0
 8005ff2:	d04d      	beq.n	8006090 <_printf_i+0x1b4>
 8005ff4:	4616      	mov	r6, r2
 8005ff6:	fbb5 f1f3 	udiv	r1, r5, r3
 8005ffa:	fb03 5711 	mls	r7, r3, r1, r5
 8005ffe:	5dc7      	ldrb	r7, [r0, r7]
 8006000:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006004:	462f      	mov	r7, r5
 8006006:	42bb      	cmp	r3, r7
 8006008:	460d      	mov	r5, r1
 800600a:	d9f4      	bls.n	8005ff6 <_printf_i+0x11a>
 800600c:	2b08      	cmp	r3, #8
 800600e:	d10b      	bne.n	8006028 <_printf_i+0x14c>
 8006010:	6823      	ldr	r3, [r4, #0]
 8006012:	07df      	lsls	r7, r3, #31
 8006014:	d508      	bpl.n	8006028 <_printf_i+0x14c>
 8006016:	6923      	ldr	r3, [r4, #16]
 8006018:	6861      	ldr	r1, [r4, #4]
 800601a:	4299      	cmp	r1, r3
 800601c:	bfde      	ittt	le
 800601e:	2330      	movle	r3, #48	; 0x30
 8006020:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006024:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 8006028:	1b92      	subs	r2, r2, r6
 800602a:	6122      	str	r2, [r4, #16]
 800602c:	f8cd a000 	str.w	sl, [sp]
 8006030:	464b      	mov	r3, r9
 8006032:	aa03      	add	r2, sp, #12
 8006034:	4621      	mov	r1, r4
 8006036:	4640      	mov	r0, r8
 8006038:	f7ff fee2 	bl	8005e00 <_printf_common>
 800603c:	3001      	adds	r0, #1
 800603e:	d14c      	bne.n	80060da <_printf_i+0x1fe>
 8006040:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006044:	b004      	add	sp, #16
 8006046:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800604a:	4835      	ldr	r0, [pc, #212]	; (8006120 <_printf_i+0x244>)
 800604c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006050:	6823      	ldr	r3, [r4, #0]
 8006052:	680e      	ldr	r6, [r1, #0]
 8006054:	061f      	lsls	r7, r3, #24
 8006056:	f856 5b04 	ldr.w	r5, [r6], #4
 800605a:	600e      	str	r6, [r1, #0]
 800605c:	d514      	bpl.n	8006088 <_printf_i+0x1ac>
 800605e:	07d9      	lsls	r1, r3, #31
 8006060:	bf44      	itt	mi
 8006062:	f043 0320 	orrmi.w	r3, r3, #32
 8006066:	6023      	strmi	r3, [r4, #0]
 8006068:	b91d      	cbnz	r5, 8006072 <_printf_i+0x196>
 800606a:	6823      	ldr	r3, [r4, #0]
 800606c:	f023 0320 	bic.w	r3, r3, #32
 8006070:	6023      	str	r3, [r4, #0]
 8006072:	2310      	movs	r3, #16
 8006074:	e7b0      	b.n	8005fd8 <_printf_i+0xfc>
 8006076:	6823      	ldr	r3, [r4, #0]
 8006078:	f043 0320 	orr.w	r3, r3, #32
 800607c:	6023      	str	r3, [r4, #0]
 800607e:	2378      	movs	r3, #120	; 0x78
 8006080:	4828      	ldr	r0, [pc, #160]	; (8006124 <_printf_i+0x248>)
 8006082:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006086:	e7e3      	b.n	8006050 <_printf_i+0x174>
 8006088:	065e      	lsls	r6, r3, #25
 800608a:	bf48      	it	mi
 800608c:	b2ad      	uxthmi	r5, r5
 800608e:	e7e6      	b.n	800605e <_printf_i+0x182>
 8006090:	4616      	mov	r6, r2
 8006092:	e7bb      	b.n	800600c <_printf_i+0x130>
 8006094:	680b      	ldr	r3, [r1, #0]
 8006096:	6826      	ldr	r6, [r4, #0]
 8006098:	6960      	ldr	r0, [r4, #20]
 800609a:	1d1d      	adds	r5, r3, #4
 800609c:	600d      	str	r5, [r1, #0]
 800609e:	0635      	lsls	r5, r6, #24
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	d501      	bpl.n	80060a8 <_printf_i+0x1cc>
 80060a4:	6018      	str	r0, [r3, #0]
 80060a6:	e002      	b.n	80060ae <_printf_i+0x1d2>
 80060a8:	0671      	lsls	r1, r6, #25
 80060aa:	d5fb      	bpl.n	80060a4 <_printf_i+0x1c8>
 80060ac:	8018      	strh	r0, [r3, #0]
 80060ae:	2300      	movs	r3, #0
 80060b0:	6123      	str	r3, [r4, #16]
 80060b2:	4616      	mov	r6, r2
 80060b4:	e7ba      	b.n	800602c <_printf_i+0x150>
 80060b6:	680b      	ldr	r3, [r1, #0]
 80060b8:	1d1a      	adds	r2, r3, #4
 80060ba:	600a      	str	r2, [r1, #0]
 80060bc:	681e      	ldr	r6, [r3, #0]
 80060be:	6862      	ldr	r2, [r4, #4]
 80060c0:	2100      	movs	r1, #0
 80060c2:	4630      	mov	r0, r6
 80060c4:	f7fa f894 	bl	80001f0 <memchr>
 80060c8:	b108      	cbz	r0, 80060ce <_printf_i+0x1f2>
 80060ca:	1b80      	subs	r0, r0, r6
 80060cc:	6060      	str	r0, [r4, #4]
 80060ce:	6863      	ldr	r3, [r4, #4]
 80060d0:	6123      	str	r3, [r4, #16]
 80060d2:	2300      	movs	r3, #0
 80060d4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80060d8:	e7a8      	b.n	800602c <_printf_i+0x150>
 80060da:	6923      	ldr	r3, [r4, #16]
 80060dc:	4632      	mov	r2, r6
 80060de:	4649      	mov	r1, r9
 80060e0:	4640      	mov	r0, r8
 80060e2:	47d0      	blx	sl
 80060e4:	3001      	adds	r0, #1
 80060e6:	d0ab      	beq.n	8006040 <_printf_i+0x164>
 80060e8:	6823      	ldr	r3, [r4, #0]
 80060ea:	079b      	lsls	r3, r3, #30
 80060ec:	d413      	bmi.n	8006116 <_printf_i+0x23a>
 80060ee:	68e0      	ldr	r0, [r4, #12]
 80060f0:	9b03      	ldr	r3, [sp, #12]
 80060f2:	4298      	cmp	r0, r3
 80060f4:	bfb8      	it	lt
 80060f6:	4618      	movlt	r0, r3
 80060f8:	e7a4      	b.n	8006044 <_printf_i+0x168>
 80060fa:	2301      	movs	r3, #1
 80060fc:	4632      	mov	r2, r6
 80060fe:	4649      	mov	r1, r9
 8006100:	4640      	mov	r0, r8
 8006102:	47d0      	blx	sl
 8006104:	3001      	adds	r0, #1
 8006106:	d09b      	beq.n	8006040 <_printf_i+0x164>
 8006108:	3501      	adds	r5, #1
 800610a:	68e3      	ldr	r3, [r4, #12]
 800610c:	9903      	ldr	r1, [sp, #12]
 800610e:	1a5b      	subs	r3, r3, r1
 8006110:	42ab      	cmp	r3, r5
 8006112:	dcf2      	bgt.n	80060fa <_printf_i+0x21e>
 8006114:	e7eb      	b.n	80060ee <_printf_i+0x212>
 8006116:	2500      	movs	r5, #0
 8006118:	f104 0619 	add.w	r6, r4, #25
 800611c:	e7f5      	b.n	800610a <_printf_i+0x22e>
 800611e:	bf00      	nop
 8006120:	080066bd 	.word	0x080066bd
 8006124:	080066ce 	.word	0x080066ce

08006128 <_putc_r>:
 8006128:	b570      	push	{r4, r5, r6, lr}
 800612a:	460d      	mov	r5, r1
 800612c:	4614      	mov	r4, r2
 800612e:	4606      	mov	r6, r0
 8006130:	b118      	cbz	r0, 800613a <_putc_r+0x12>
 8006132:	6983      	ldr	r3, [r0, #24]
 8006134:	b90b      	cbnz	r3, 800613a <_putc_r+0x12>
 8006136:	f7ff f819 	bl	800516c <__sinit>
 800613a:	4b1c      	ldr	r3, [pc, #112]	; (80061ac <_putc_r+0x84>)
 800613c:	429c      	cmp	r4, r3
 800613e:	d124      	bne.n	800618a <_putc_r+0x62>
 8006140:	6874      	ldr	r4, [r6, #4]
 8006142:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006144:	07d8      	lsls	r0, r3, #31
 8006146:	d405      	bmi.n	8006154 <_putc_r+0x2c>
 8006148:	89a3      	ldrh	r3, [r4, #12]
 800614a:	0599      	lsls	r1, r3, #22
 800614c:	d402      	bmi.n	8006154 <_putc_r+0x2c>
 800614e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006150:	f7ff f8cf 	bl	80052f2 <__retarget_lock_acquire_recursive>
 8006154:	68a3      	ldr	r3, [r4, #8]
 8006156:	3b01      	subs	r3, #1
 8006158:	2b00      	cmp	r3, #0
 800615a:	60a3      	str	r3, [r4, #8]
 800615c:	da05      	bge.n	800616a <_putc_r+0x42>
 800615e:	69a2      	ldr	r2, [r4, #24]
 8006160:	4293      	cmp	r3, r2
 8006162:	db1c      	blt.n	800619e <_putc_r+0x76>
 8006164:	b2eb      	uxtb	r3, r5
 8006166:	2b0a      	cmp	r3, #10
 8006168:	d019      	beq.n	800619e <_putc_r+0x76>
 800616a:	6823      	ldr	r3, [r4, #0]
 800616c:	1c5a      	adds	r2, r3, #1
 800616e:	6022      	str	r2, [r4, #0]
 8006170:	701d      	strb	r5, [r3, #0]
 8006172:	b2ed      	uxtb	r5, r5
 8006174:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006176:	07da      	lsls	r2, r3, #31
 8006178:	d405      	bmi.n	8006186 <_putc_r+0x5e>
 800617a:	89a3      	ldrh	r3, [r4, #12]
 800617c:	059b      	lsls	r3, r3, #22
 800617e:	d402      	bmi.n	8006186 <_putc_r+0x5e>
 8006180:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006182:	f7ff f8b7 	bl	80052f4 <__retarget_lock_release_recursive>
 8006186:	4628      	mov	r0, r5
 8006188:	bd70      	pop	{r4, r5, r6, pc}
 800618a:	4b09      	ldr	r3, [pc, #36]	; (80061b0 <_putc_r+0x88>)
 800618c:	429c      	cmp	r4, r3
 800618e:	d101      	bne.n	8006194 <_putc_r+0x6c>
 8006190:	68b4      	ldr	r4, [r6, #8]
 8006192:	e7d6      	b.n	8006142 <_putc_r+0x1a>
 8006194:	4b07      	ldr	r3, [pc, #28]	; (80061b4 <_putc_r+0x8c>)
 8006196:	429c      	cmp	r4, r3
 8006198:	bf08      	it	eq
 800619a:	68f4      	ldreq	r4, [r6, #12]
 800619c:	e7d1      	b.n	8006142 <_putc_r+0x1a>
 800619e:	4629      	mov	r1, r5
 80061a0:	4622      	mov	r2, r4
 80061a2:	4630      	mov	r0, r6
 80061a4:	f000 f81a 	bl	80061dc <__swbuf_r>
 80061a8:	4605      	mov	r5, r0
 80061aa:	e7e3      	b.n	8006174 <_putc_r+0x4c>
 80061ac:	08006668 	.word	0x08006668
 80061b0:	08006688 	.word	0x08006688
 80061b4:	08006648 	.word	0x08006648

080061b8 <_read_r>:
 80061b8:	b538      	push	{r3, r4, r5, lr}
 80061ba:	4d07      	ldr	r5, [pc, #28]	; (80061d8 <_read_r+0x20>)
 80061bc:	4604      	mov	r4, r0
 80061be:	4608      	mov	r0, r1
 80061c0:	4611      	mov	r1, r2
 80061c2:	2200      	movs	r2, #0
 80061c4:	602a      	str	r2, [r5, #0]
 80061c6:	461a      	mov	r2, r3
 80061c8:	f7fa fc18 	bl	80009fc <_read>
 80061cc:	1c43      	adds	r3, r0, #1
 80061ce:	d102      	bne.n	80061d6 <_read_r+0x1e>
 80061d0:	682b      	ldr	r3, [r5, #0]
 80061d2:	b103      	cbz	r3, 80061d6 <_read_r+0x1e>
 80061d4:	6023      	str	r3, [r4, #0]
 80061d6:	bd38      	pop	{r3, r4, r5, pc}
 80061d8:	20004bd0 	.word	0x20004bd0

080061dc <__swbuf_r>:
 80061dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80061de:	460e      	mov	r6, r1
 80061e0:	4614      	mov	r4, r2
 80061e2:	4605      	mov	r5, r0
 80061e4:	b118      	cbz	r0, 80061ee <__swbuf_r+0x12>
 80061e6:	6983      	ldr	r3, [r0, #24]
 80061e8:	b90b      	cbnz	r3, 80061ee <__swbuf_r+0x12>
 80061ea:	f7fe ffbf 	bl	800516c <__sinit>
 80061ee:	4b21      	ldr	r3, [pc, #132]	; (8006274 <__swbuf_r+0x98>)
 80061f0:	429c      	cmp	r4, r3
 80061f2:	d12b      	bne.n	800624c <__swbuf_r+0x70>
 80061f4:	686c      	ldr	r4, [r5, #4]
 80061f6:	69a3      	ldr	r3, [r4, #24]
 80061f8:	60a3      	str	r3, [r4, #8]
 80061fa:	89a3      	ldrh	r3, [r4, #12]
 80061fc:	071a      	lsls	r2, r3, #28
 80061fe:	d52f      	bpl.n	8006260 <__swbuf_r+0x84>
 8006200:	6923      	ldr	r3, [r4, #16]
 8006202:	b36b      	cbz	r3, 8006260 <__swbuf_r+0x84>
 8006204:	6923      	ldr	r3, [r4, #16]
 8006206:	6820      	ldr	r0, [r4, #0]
 8006208:	1ac0      	subs	r0, r0, r3
 800620a:	6963      	ldr	r3, [r4, #20]
 800620c:	b2f6      	uxtb	r6, r6
 800620e:	4283      	cmp	r3, r0
 8006210:	4637      	mov	r7, r6
 8006212:	dc04      	bgt.n	800621e <__swbuf_r+0x42>
 8006214:	4621      	mov	r1, r4
 8006216:	4628      	mov	r0, r5
 8006218:	f7ff fa92 	bl	8005740 <_fflush_r>
 800621c:	bb30      	cbnz	r0, 800626c <__swbuf_r+0x90>
 800621e:	68a3      	ldr	r3, [r4, #8]
 8006220:	3b01      	subs	r3, #1
 8006222:	60a3      	str	r3, [r4, #8]
 8006224:	6823      	ldr	r3, [r4, #0]
 8006226:	1c5a      	adds	r2, r3, #1
 8006228:	6022      	str	r2, [r4, #0]
 800622a:	701e      	strb	r6, [r3, #0]
 800622c:	6963      	ldr	r3, [r4, #20]
 800622e:	3001      	adds	r0, #1
 8006230:	4283      	cmp	r3, r0
 8006232:	d004      	beq.n	800623e <__swbuf_r+0x62>
 8006234:	89a3      	ldrh	r3, [r4, #12]
 8006236:	07db      	lsls	r3, r3, #31
 8006238:	d506      	bpl.n	8006248 <__swbuf_r+0x6c>
 800623a:	2e0a      	cmp	r6, #10
 800623c:	d104      	bne.n	8006248 <__swbuf_r+0x6c>
 800623e:	4621      	mov	r1, r4
 8006240:	4628      	mov	r0, r5
 8006242:	f7ff fa7d 	bl	8005740 <_fflush_r>
 8006246:	b988      	cbnz	r0, 800626c <__swbuf_r+0x90>
 8006248:	4638      	mov	r0, r7
 800624a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800624c:	4b0a      	ldr	r3, [pc, #40]	; (8006278 <__swbuf_r+0x9c>)
 800624e:	429c      	cmp	r4, r3
 8006250:	d101      	bne.n	8006256 <__swbuf_r+0x7a>
 8006252:	68ac      	ldr	r4, [r5, #8]
 8006254:	e7cf      	b.n	80061f6 <__swbuf_r+0x1a>
 8006256:	4b09      	ldr	r3, [pc, #36]	; (800627c <__swbuf_r+0xa0>)
 8006258:	429c      	cmp	r4, r3
 800625a:	bf08      	it	eq
 800625c:	68ec      	ldreq	r4, [r5, #12]
 800625e:	e7ca      	b.n	80061f6 <__swbuf_r+0x1a>
 8006260:	4621      	mov	r1, r4
 8006262:	4628      	mov	r0, r5
 8006264:	f000 f80c 	bl	8006280 <__swsetup_r>
 8006268:	2800      	cmp	r0, #0
 800626a:	d0cb      	beq.n	8006204 <__swbuf_r+0x28>
 800626c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8006270:	e7ea      	b.n	8006248 <__swbuf_r+0x6c>
 8006272:	bf00      	nop
 8006274:	08006668 	.word	0x08006668
 8006278:	08006688 	.word	0x08006688
 800627c:	08006648 	.word	0x08006648

08006280 <__swsetup_r>:
 8006280:	4b32      	ldr	r3, [pc, #200]	; (800634c <__swsetup_r+0xcc>)
 8006282:	b570      	push	{r4, r5, r6, lr}
 8006284:	681d      	ldr	r5, [r3, #0]
 8006286:	4606      	mov	r6, r0
 8006288:	460c      	mov	r4, r1
 800628a:	b125      	cbz	r5, 8006296 <__swsetup_r+0x16>
 800628c:	69ab      	ldr	r3, [r5, #24]
 800628e:	b913      	cbnz	r3, 8006296 <__swsetup_r+0x16>
 8006290:	4628      	mov	r0, r5
 8006292:	f7fe ff6b 	bl	800516c <__sinit>
 8006296:	4b2e      	ldr	r3, [pc, #184]	; (8006350 <__swsetup_r+0xd0>)
 8006298:	429c      	cmp	r4, r3
 800629a:	d10f      	bne.n	80062bc <__swsetup_r+0x3c>
 800629c:	686c      	ldr	r4, [r5, #4]
 800629e:	89a3      	ldrh	r3, [r4, #12]
 80062a0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80062a4:	0719      	lsls	r1, r3, #28
 80062a6:	d42c      	bmi.n	8006302 <__swsetup_r+0x82>
 80062a8:	06dd      	lsls	r5, r3, #27
 80062aa:	d411      	bmi.n	80062d0 <__swsetup_r+0x50>
 80062ac:	2309      	movs	r3, #9
 80062ae:	6033      	str	r3, [r6, #0]
 80062b0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80062b4:	81a3      	strh	r3, [r4, #12]
 80062b6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80062ba:	e03e      	b.n	800633a <__swsetup_r+0xba>
 80062bc:	4b25      	ldr	r3, [pc, #148]	; (8006354 <__swsetup_r+0xd4>)
 80062be:	429c      	cmp	r4, r3
 80062c0:	d101      	bne.n	80062c6 <__swsetup_r+0x46>
 80062c2:	68ac      	ldr	r4, [r5, #8]
 80062c4:	e7eb      	b.n	800629e <__swsetup_r+0x1e>
 80062c6:	4b24      	ldr	r3, [pc, #144]	; (8006358 <__swsetup_r+0xd8>)
 80062c8:	429c      	cmp	r4, r3
 80062ca:	bf08      	it	eq
 80062cc:	68ec      	ldreq	r4, [r5, #12]
 80062ce:	e7e6      	b.n	800629e <__swsetup_r+0x1e>
 80062d0:	0758      	lsls	r0, r3, #29
 80062d2:	d512      	bpl.n	80062fa <__swsetup_r+0x7a>
 80062d4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80062d6:	b141      	cbz	r1, 80062ea <__swsetup_r+0x6a>
 80062d8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80062dc:	4299      	cmp	r1, r3
 80062de:	d002      	beq.n	80062e6 <__swsetup_r+0x66>
 80062e0:	4630      	mov	r0, r6
 80062e2:	f7ff fa87 	bl	80057f4 <_free_r>
 80062e6:	2300      	movs	r3, #0
 80062e8:	6363      	str	r3, [r4, #52]	; 0x34
 80062ea:	89a3      	ldrh	r3, [r4, #12]
 80062ec:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80062f0:	81a3      	strh	r3, [r4, #12]
 80062f2:	2300      	movs	r3, #0
 80062f4:	6063      	str	r3, [r4, #4]
 80062f6:	6923      	ldr	r3, [r4, #16]
 80062f8:	6023      	str	r3, [r4, #0]
 80062fa:	89a3      	ldrh	r3, [r4, #12]
 80062fc:	f043 0308 	orr.w	r3, r3, #8
 8006300:	81a3      	strh	r3, [r4, #12]
 8006302:	6923      	ldr	r3, [r4, #16]
 8006304:	b94b      	cbnz	r3, 800631a <__swsetup_r+0x9a>
 8006306:	89a3      	ldrh	r3, [r4, #12]
 8006308:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800630c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006310:	d003      	beq.n	800631a <__swsetup_r+0x9a>
 8006312:	4621      	mov	r1, r4
 8006314:	4630      	mov	r0, r6
 8006316:	f000 f845 	bl	80063a4 <__smakebuf_r>
 800631a:	89a0      	ldrh	r0, [r4, #12]
 800631c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006320:	f010 0301 	ands.w	r3, r0, #1
 8006324:	d00a      	beq.n	800633c <__swsetup_r+0xbc>
 8006326:	2300      	movs	r3, #0
 8006328:	60a3      	str	r3, [r4, #8]
 800632a:	6963      	ldr	r3, [r4, #20]
 800632c:	425b      	negs	r3, r3
 800632e:	61a3      	str	r3, [r4, #24]
 8006330:	6923      	ldr	r3, [r4, #16]
 8006332:	b943      	cbnz	r3, 8006346 <__swsetup_r+0xc6>
 8006334:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006338:	d1ba      	bne.n	80062b0 <__swsetup_r+0x30>
 800633a:	bd70      	pop	{r4, r5, r6, pc}
 800633c:	0781      	lsls	r1, r0, #30
 800633e:	bf58      	it	pl
 8006340:	6963      	ldrpl	r3, [r4, #20]
 8006342:	60a3      	str	r3, [r4, #8]
 8006344:	e7f4      	b.n	8006330 <__swsetup_r+0xb0>
 8006346:	2000      	movs	r0, #0
 8006348:	e7f7      	b.n	800633a <__swsetup_r+0xba>
 800634a:	bf00      	nop
 800634c:	20000168 	.word	0x20000168
 8006350:	08006668 	.word	0x08006668
 8006354:	08006688 	.word	0x08006688
 8006358:	08006648 	.word	0x08006648

0800635c <__swhatbuf_r>:
 800635c:	b570      	push	{r4, r5, r6, lr}
 800635e:	460e      	mov	r6, r1
 8006360:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006364:	2900      	cmp	r1, #0
 8006366:	b096      	sub	sp, #88	; 0x58
 8006368:	4614      	mov	r4, r2
 800636a:	461d      	mov	r5, r3
 800636c:	da07      	bge.n	800637e <__swhatbuf_r+0x22>
 800636e:	2300      	movs	r3, #0
 8006370:	602b      	str	r3, [r5, #0]
 8006372:	89b3      	ldrh	r3, [r6, #12]
 8006374:	061a      	lsls	r2, r3, #24
 8006376:	d410      	bmi.n	800639a <__swhatbuf_r+0x3e>
 8006378:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800637c:	e00e      	b.n	800639c <__swhatbuf_r+0x40>
 800637e:	466a      	mov	r2, sp
 8006380:	f000 f890 	bl	80064a4 <_fstat_r>
 8006384:	2800      	cmp	r0, #0
 8006386:	dbf2      	blt.n	800636e <__swhatbuf_r+0x12>
 8006388:	9a01      	ldr	r2, [sp, #4]
 800638a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800638e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006392:	425a      	negs	r2, r3
 8006394:	415a      	adcs	r2, r3
 8006396:	602a      	str	r2, [r5, #0]
 8006398:	e7ee      	b.n	8006378 <__swhatbuf_r+0x1c>
 800639a:	2340      	movs	r3, #64	; 0x40
 800639c:	2000      	movs	r0, #0
 800639e:	6023      	str	r3, [r4, #0]
 80063a0:	b016      	add	sp, #88	; 0x58
 80063a2:	bd70      	pop	{r4, r5, r6, pc}

080063a4 <__smakebuf_r>:
 80063a4:	898b      	ldrh	r3, [r1, #12]
 80063a6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80063a8:	079d      	lsls	r5, r3, #30
 80063aa:	4606      	mov	r6, r0
 80063ac:	460c      	mov	r4, r1
 80063ae:	d507      	bpl.n	80063c0 <__smakebuf_r+0x1c>
 80063b0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80063b4:	6023      	str	r3, [r4, #0]
 80063b6:	6123      	str	r3, [r4, #16]
 80063b8:	2301      	movs	r3, #1
 80063ba:	6163      	str	r3, [r4, #20]
 80063bc:	b002      	add	sp, #8
 80063be:	bd70      	pop	{r4, r5, r6, pc}
 80063c0:	ab01      	add	r3, sp, #4
 80063c2:	466a      	mov	r2, sp
 80063c4:	f7ff ffca 	bl	800635c <__swhatbuf_r>
 80063c8:	9900      	ldr	r1, [sp, #0]
 80063ca:	4605      	mov	r5, r0
 80063cc:	4630      	mov	r0, r6
 80063ce:	f7fe ffa9 	bl	8005324 <_malloc_r>
 80063d2:	b948      	cbnz	r0, 80063e8 <__smakebuf_r+0x44>
 80063d4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80063d8:	059a      	lsls	r2, r3, #22
 80063da:	d4ef      	bmi.n	80063bc <__smakebuf_r+0x18>
 80063dc:	f023 0303 	bic.w	r3, r3, #3
 80063e0:	f043 0302 	orr.w	r3, r3, #2
 80063e4:	81a3      	strh	r3, [r4, #12]
 80063e6:	e7e3      	b.n	80063b0 <__smakebuf_r+0xc>
 80063e8:	4b0d      	ldr	r3, [pc, #52]	; (8006420 <__smakebuf_r+0x7c>)
 80063ea:	62b3      	str	r3, [r6, #40]	; 0x28
 80063ec:	89a3      	ldrh	r3, [r4, #12]
 80063ee:	6020      	str	r0, [r4, #0]
 80063f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80063f4:	81a3      	strh	r3, [r4, #12]
 80063f6:	9b00      	ldr	r3, [sp, #0]
 80063f8:	6163      	str	r3, [r4, #20]
 80063fa:	9b01      	ldr	r3, [sp, #4]
 80063fc:	6120      	str	r0, [r4, #16]
 80063fe:	b15b      	cbz	r3, 8006418 <__smakebuf_r+0x74>
 8006400:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006404:	4630      	mov	r0, r6
 8006406:	f000 f85f 	bl	80064c8 <_isatty_r>
 800640a:	b128      	cbz	r0, 8006418 <__smakebuf_r+0x74>
 800640c:	89a3      	ldrh	r3, [r4, #12]
 800640e:	f023 0303 	bic.w	r3, r3, #3
 8006412:	f043 0301 	orr.w	r3, r3, #1
 8006416:	81a3      	strh	r3, [r4, #12]
 8006418:	89a0      	ldrh	r0, [r4, #12]
 800641a:	4305      	orrs	r5, r0
 800641c:	81a5      	strh	r5, [r4, #12]
 800641e:	e7cd      	b.n	80063bc <__smakebuf_r+0x18>
 8006420:	08005105 	.word	0x08005105

08006424 <memmove>:
 8006424:	4288      	cmp	r0, r1
 8006426:	b510      	push	{r4, lr}
 8006428:	eb01 0402 	add.w	r4, r1, r2
 800642c:	d902      	bls.n	8006434 <memmove+0x10>
 800642e:	4284      	cmp	r4, r0
 8006430:	4623      	mov	r3, r4
 8006432:	d807      	bhi.n	8006444 <memmove+0x20>
 8006434:	1e43      	subs	r3, r0, #1
 8006436:	42a1      	cmp	r1, r4
 8006438:	d008      	beq.n	800644c <memmove+0x28>
 800643a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800643e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006442:	e7f8      	b.n	8006436 <memmove+0x12>
 8006444:	4402      	add	r2, r0
 8006446:	4601      	mov	r1, r0
 8006448:	428a      	cmp	r2, r1
 800644a:	d100      	bne.n	800644e <memmove+0x2a>
 800644c:	bd10      	pop	{r4, pc}
 800644e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006452:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006456:	e7f7      	b.n	8006448 <memmove+0x24>

08006458 <_realloc_r>:
 8006458:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800645a:	4607      	mov	r7, r0
 800645c:	4614      	mov	r4, r2
 800645e:	460e      	mov	r6, r1
 8006460:	b921      	cbnz	r1, 800646c <_realloc_r+0x14>
 8006462:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8006466:	4611      	mov	r1, r2
 8006468:	f7fe bf5c 	b.w	8005324 <_malloc_r>
 800646c:	b922      	cbnz	r2, 8006478 <_realloc_r+0x20>
 800646e:	f7ff f9c1 	bl	80057f4 <_free_r>
 8006472:	4625      	mov	r5, r4
 8006474:	4628      	mov	r0, r5
 8006476:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006478:	f000 f836 	bl	80064e8 <_malloc_usable_size_r>
 800647c:	42a0      	cmp	r0, r4
 800647e:	d20f      	bcs.n	80064a0 <_realloc_r+0x48>
 8006480:	4621      	mov	r1, r4
 8006482:	4638      	mov	r0, r7
 8006484:	f7fe ff4e 	bl	8005324 <_malloc_r>
 8006488:	4605      	mov	r5, r0
 800648a:	2800      	cmp	r0, #0
 800648c:	d0f2      	beq.n	8006474 <_realloc_r+0x1c>
 800648e:	4631      	mov	r1, r6
 8006490:	4622      	mov	r2, r4
 8006492:	f7fe ff30 	bl	80052f6 <memcpy>
 8006496:	4631      	mov	r1, r6
 8006498:	4638      	mov	r0, r7
 800649a:	f7ff f9ab 	bl	80057f4 <_free_r>
 800649e:	e7e9      	b.n	8006474 <_realloc_r+0x1c>
 80064a0:	4635      	mov	r5, r6
 80064a2:	e7e7      	b.n	8006474 <_realloc_r+0x1c>

080064a4 <_fstat_r>:
 80064a4:	b538      	push	{r3, r4, r5, lr}
 80064a6:	4d07      	ldr	r5, [pc, #28]	; (80064c4 <_fstat_r+0x20>)
 80064a8:	2300      	movs	r3, #0
 80064aa:	4604      	mov	r4, r0
 80064ac:	4608      	mov	r0, r1
 80064ae:	4611      	mov	r1, r2
 80064b0:	602b      	str	r3, [r5, #0]
 80064b2:	f7fa fab6 	bl	8000a22 <_fstat>
 80064b6:	1c43      	adds	r3, r0, #1
 80064b8:	d102      	bne.n	80064c0 <_fstat_r+0x1c>
 80064ba:	682b      	ldr	r3, [r5, #0]
 80064bc:	b103      	cbz	r3, 80064c0 <_fstat_r+0x1c>
 80064be:	6023      	str	r3, [r4, #0]
 80064c0:	bd38      	pop	{r3, r4, r5, pc}
 80064c2:	bf00      	nop
 80064c4:	20004bd0 	.word	0x20004bd0

080064c8 <_isatty_r>:
 80064c8:	b538      	push	{r3, r4, r5, lr}
 80064ca:	4d06      	ldr	r5, [pc, #24]	; (80064e4 <_isatty_r+0x1c>)
 80064cc:	2300      	movs	r3, #0
 80064ce:	4604      	mov	r4, r0
 80064d0:	4608      	mov	r0, r1
 80064d2:	602b      	str	r3, [r5, #0]
 80064d4:	f7fa faaa 	bl	8000a2c <_isatty>
 80064d8:	1c43      	adds	r3, r0, #1
 80064da:	d102      	bne.n	80064e2 <_isatty_r+0x1a>
 80064dc:	682b      	ldr	r3, [r5, #0]
 80064de:	b103      	cbz	r3, 80064e2 <_isatty_r+0x1a>
 80064e0:	6023      	str	r3, [r4, #0]
 80064e2:	bd38      	pop	{r3, r4, r5, pc}
 80064e4:	20004bd0 	.word	0x20004bd0

080064e8 <_malloc_usable_size_r>:
 80064e8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80064ec:	1f18      	subs	r0, r3, #4
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	bfbc      	itt	lt
 80064f2:	580b      	ldrlt	r3, [r1, r0]
 80064f4:	18c0      	addlt	r0, r0, r3
 80064f6:	4770      	bx	lr

080064f8 <_init>:
 80064f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80064fa:	bf00      	nop
 80064fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80064fe:	bc08      	pop	{r3}
 8006500:	469e      	mov	lr, r3
 8006502:	4770      	bx	lr

08006504 <_fini>:
 8006504:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006506:	bf00      	nop
 8006508:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800650a:	bc08      	pop	{r3}
 800650c:	469e      	mov	lr, r3
 800650e:	4770      	bx	lr
