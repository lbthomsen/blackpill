
hidled.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009a0c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001d8  08009bac  08009bac  00019bac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009d84  08009d84  000201cc  2**0
                  CONTENTS
  4 .ARM          00000008  08009d84  08009d84  00019d84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009d8c  08009d8c  000201cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009d8c  08009d8c  00019d8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009d90  08009d90  00019d90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001cc  20000000  08009d94  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004a0c  200001cc  08009f60  000201cc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004bd8  08009f60  00024bd8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201cc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00024ea5  00000000  00000000  000201fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004d7d  00000000  00000000  000450a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001808  00000000  00000000  00049e20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001640  00000000  00000000  0004b628  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001c457  00000000  00000000  0004cc68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001c2b5  00000000  00000000  000690bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009bb6d  00000000  00000000  00085374  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00120ee1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006d6c  00000000  00000000  00120f34  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001cc 	.word	0x200001cc
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08009b94 	.word	0x08009b94

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001d0 	.word	0x200001d0
 80001dc:	08009b94 	.word	0x08009b94

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002a4:	f000 b96e 	b.w	8000584 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468c      	mov	ip, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	f040 8083 	bne.w	80003d6 <__udivmoddi4+0x116>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4617      	mov	r7, r2
 80002d4:	d947      	bls.n	8000366 <__udivmoddi4+0xa6>
 80002d6:	fab2 f282 	clz	r2, r2
 80002da:	b142      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002dc:	f1c2 0020 	rsb	r0, r2, #32
 80002e0:	fa24 f000 	lsr.w	r0, r4, r0
 80002e4:	4091      	lsls	r1, r2
 80002e6:	4097      	lsls	r7, r2
 80002e8:	ea40 0c01 	orr.w	ip, r0, r1
 80002ec:	4094      	lsls	r4, r2
 80002ee:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002f2:	0c23      	lsrs	r3, r4, #16
 80002f4:	fbbc f6f8 	udiv	r6, ip, r8
 80002f8:	fa1f fe87 	uxth.w	lr, r7
 80002fc:	fb08 c116 	mls	r1, r8, r6, ip
 8000300:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000304:	fb06 f10e 	mul.w	r1, r6, lr
 8000308:	4299      	cmp	r1, r3
 800030a:	d909      	bls.n	8000320 <__udivmoddi4+0x60>
 800030c:	18fb      	adds	r3, r7, r3
 800030e:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000312:	f080 8119 	bcs.w	8000548 <__udivmoddi4+0x288>
 8000316:	4299      	cmp	r1, r3
 8000318:	f240 8116 	bls.w	8000548 <__udivmoddi4+0x288>
 800031c:	3e02      	subs	r6, #2
 800031e:	443b      	add	r3, r7
 8000320:	1a5b      	subs	r3, r3, r1
 8000322:	b2a4      	uxth	r4, r4
 8000324:	fbb3 f0f8 	udiv	r0, r3, r8
 8000328:	fb08 3310 	mls	r3, r8, r0, r3
 800032c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000330:	fb00 fe0e 	mul.w	lr, r0, lr
 8000334:	45a6      	cmp	lr, r4
 8000336:	d909      	bls.n	800034c <__udivmoddi4+0x8c>
 8000338:	193c      	adds	r4, r7, r4
 800033a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800033e:	f080 8105 	bcs.w	800054c <__udivmoddi4+0x28c>
 8000342:	45a6      	cmp	lr, r4
 8000344:	f240 8102 	bls.w	800054c <__udivmoddi4+0x28c>
 8000348:	3802      	subs	r0, #2
 800034a:	443c      	add	r4, r7
 800034c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000350:	eba4 040e 	sub.w	r4, r4, lr
 8000354:	2600      	movs	r6, #0
 8000356:	b11d      	cbz	r5, 8000360 <__udivmoddi4+0xa0>
 8000358:	40d4      	lsrs	r4, r2
 800035a:	2300      	movs	r3, #0
 800035c:	e9c5 4300 	strd	r4, r3, [r5]
 8000360:	4631      	mov	r1, r6
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	b902      	cbnz	r2, 800036a <__udivmoddi4+0xaa>
 8000368:	deff      	udf	#255	; 0xff
 800036a:	fab2 f282 	clz	r2, r2
 800036e:	2a00      	cmp	r2, #0
 8000370:	d150      	bne.n	8000414 <__udivmoddi4+0x154>
 8000372:	1bcb      	subs	r3, r1, r7
 8000374:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000378:	fa1f f887 	uxth.w	r8, r7
 800037c:	2601      	movs	r6, #1
 800037e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000382:	0c21      	lsrs	r1, r4, #16
 8000384:	fb0e 331c 	mls	r3, lr, ip, r3
 8000388:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800038c:	fb08 f30c 	mul.w	r3, r8, ip
 8000390:	428b      	cmp	r3, r1
 8000392:	d907      	bls.n	80003a4 <__udivmoddi4+0xe4>
 8000394:	1879      	adds	r1, r7, r1
 8000396:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 800039a:	d202      	bcs.n	80003a2 <__udivmoddi4+0xe2>
 800039c:	428b      	cmp	r3, r1
 800039e:	f200 80e9 	bhi.w	8000574 <__udivmoddi4+0x2b4>
 80003a2:	4684      	mov	ip, r0
 80003a4:	1ac9      	subs	r1, r1, r3
 80003a6:	b2a3      	uxth	r3, r4
 80003a8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003ac:	fb0e 1110 	mls	r1, lr, r0, r1
 80003b0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003b4:	fb08 f800 	mul.w	r8, r8, r0
 80003b8:	45a0      	cmp	r8, r4
 80003ba:	d907      	bls.n	80003cc <__udivmoddi4+0x10c>
 80003bc:	193c      	adds	r4, r7, r4
 80003be:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x10a>
 80003c4:	45a0      	cmp	r8, r4
 80003c6:	f200 80d9 	bhi.w	800057c <__udivmoddi4+0x2bc>
 80003ca:	4618      	mov	r0, r3
 80003cc:	eba4 0408 	sub.w	r4, r4, r8
 80003d0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003d4:	e7bf      	b.n	8000356 <__udivmoddi4+0x96>
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d909      	bls.n	80003ee <__udivmoddi4+0x12e>
 80003da:	2d00      	cmp	r5, #0
 80003dc:	f000 80b1 	beq.w	8000542 <__udivmoddi4+0x282>
 80003e0:	2600      	movs	r6, #0
 80003e2:	e9c5 0100 	strd	r0, r1, [r5]
 80003e6:	4630      	mov	r0, r6
 80003e8:	4631      	mov	r1, r6
 80003ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ee:	fab3 f683 	clz	r6, r3
 80003f2:	2e00      	cmp	r6, #0
 80003f4:	d14a      	bne.n	800048c <__udivmoddi4+0x1cc>
 80003f6:	428b      	cmp	r3, r1
 80003f8:	d302      	bcc.n	8000400 <__udivmoddi4+0x140>
 80003fa:	4282      	cmp	r2, r0
 80003fc:	f200 80b8 	bhi.w	8000570 <__udivmoddi4+0x2b0>
 8000400:	1a84      	subs	r4, r0, r2
 8000402:	eb61 0103 	sbc.w	r1, r1, r3
 8000406:	2001      	movs	r0, #1
 8000408:	468c      	mov	ip, r1
 800040a:	2d00      	cmp	r5, #0
 800040c:	d0a8      	beq.n	8000360 <__udivmoddi4+0xa0>
 800040e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000412:	e7a5      	b.n	8000360 <__udivmoddi4+0xa0>
 8000414:	f1c2 0320 	rsb	r3, r2, #32
 8000418:	fa20 f603 	lsr.w	r6, r0, r3
 800041c:	4097      	lsls	r7, r2
 800041e:	fa01 f002 	lsl.w	r0, r1, r2
 8000422:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000426:	40d9      	lsrs	r1, r3
 8000428:	4330      	orrs	r0, r6
 800042a:	0c03      	lsrs	r3, r0, #16
 800042c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000430:	fa1f f887 	uxth.w	r8, r7
 8000434:	fb0e 1116 	mls	r1, lr, r6, r1
 8000438:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800043c:	fb06 f108 	mul.w	r1, r6, r8
 8000440:	4299      	cmp	r1, r3
 8000442:	fa04 f402 	lsl.w	r4, r4, r2
 8000446:	d909      	bls.n	800045c <__udivmoddi4+0x19c>
 8000448:	18fb      	adds	r3, r7, r3
 800044a:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 800044e:	f080 808d 	bcs.w	800056c <__udivmoddi4+0x2ac>
 8000452:	4299      	cmp	r1, r3
 8000454:	f240 808a 	bls.w	800056c <__udivmoddi4+0x2ac>
 8000458:	3e02      	subs	r6, #2
 800045a:	443b      	add	r3, r7
 800045c:	1a5b      	subs	r3, r3, r1
 800045e:	b281      	uxth	r1, r0
 8000460:	fbb3 f0fe 	udiv	r0, r3, lr
 8000464:	fb0e 3310 	mls	r3, lr, r0, r3
 8000468:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046c:	fb00 f308 	mul.w	r3, r0, r8
 8000470:	428b      	cmp	r3, r1
 8000472:	d907      	bls.n	8000484 <__udivmoddi4+0x1c4>
 8000474:	1879      	adds	r1, r7, r1
 8000476:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 800047a:	d273      	bcs.n	8000564 <__udivmoddi4+0x2a4>
 800047c:	428b      	cmp	r3, r1
 800047e:	d971      	bls.n	8000564 <__udivmoddi4+0x2a4>
 8000480:	3802      	subs	r0, #2
 8000482:	4439      	add	r1, r7
 8000484:	1acb      	subs	r3, r1, r3
 8000486:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800048a:	e778      	b.n	800037e <__udivmoddi4+0xbe>
 800048c:	f1c6 0c20 	rsb	ip, r6, #32
 8000490:	fa03 f406 	lsl.w	r4, r3, r6
 8000494:	fa22 f30c 	lsr.w	r3, r2, ip
 8000498:	431c      	orrs	r4, r3
 800049a:	fa20 f70c 	lsr.w	r7, r0, ip
 800049e:	fa01 f306 	lsl.w	r3, r1, r6
 80004a2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004a6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004aa:	431f      	orrs	r7, r3
 80004ac:	0c3b      	lsrs	r3, r7, #16
 80004ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80004b2:	fa1f f884 	uxth.w	r8, r4
 80004b6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ba:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004be:	fb09 fa08 	mul.w	sl, r9, r8
 80004c2:	458a      	cmp	sl, r1
 80004c4:	fa02 f206 	lsl.w	r2, r2, r6
 80004c8:	fa00 f306 	lsl.w	r3, r0, r6
 80004cc:	d908      	bls.n	80004e0 <__udivmoddi4+0x220>
 80004ce:	1861      	adds	r1, r4, r1
 80004d0:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80004d4:	d248      	bcs.n	8000568 <__udivmoddi4+0x2a8>
 80004d6:	458a      	cmp	sl, r1
 80004d8:	d946      	bls.n	8000568 <__udivmoddi4+0x2a8>
 80004da:	f1a9 0902 	sub.w	r9, r9, #2
 80004de:	4421      	add	r1, r4
 80004e0:	eba1 010a 	sub.w	r1, r1, sl
 80004e4:	b2bf      	uxth	r7, r7
 80004e6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ea:	fb0e 1110 	mls	r1, lr, r0, r1
 80004ee:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004f2:	fb00 f808 	mul.w	r8, r0, r8
 80004f6:	45b8      	cmp	r8, r7
 80004f8:	d907      	bls.n	800050a <__udivmoddi4+0x24a>
 80004fa:	19e7      	adds	r7, r4, r7
 80004fc:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000500:	d22e      	bcs.n	8000560 <__udivmoddi4+0x2a0>
 8000502:	45b8      	cmp	r8, r7
 8000504:	d92c      	bls.n	8000560 <__udivmoddi4+0x2a0>
 8000506:	3802      	subs	r0, #2
 8000508:	4427      	add	r7, r4
 800050a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800050e:	eba7 0708 	sub.w	r7, r7, r8
 8000512:	fba0 8902 	umull	r8, r9, r0, r2
 8000516:	454f      	cmp	r7, r9
 8000518:	46c6      	mov	lr, r8
 800051a:	4649      	mov	r1, r9
 800051c:	d31a      	bcc.n	8000554 <__udivmoddi4+0x294>
 800051e:	d017      	beq.n	8000550 <__udivmoddi4+0x290>
 8000520:	b15d      	cbz	r5, 800053a <__udivmoddi4+0x27a>
 8000522:	ebb3 020e 	subs.w	r2, r3, lr
 8000526:	eb67 0701 	sbc.w	r7, r7, r1
 800052a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800052e:	40f2      	lsrs	r2, r6
 8000530:	ea4c 0202 	orr.w	r2, ip, r2
 8000534:	40f7      	lsrs	r7, r6
 8000536:	e9c5 2700 	strd	r2, r7, [r5]
 800053a:	2600      	movs	r6, #0
 800053c:	4631      	mov	r1, r6
 800053e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e70b      	b.n	8000360 <__udivmoddi4+0xa0>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e9      	b.n	8000320 <__udivmoddi4+0x60>
 800054c:	4618      	mov	r0, r3
 800054e:	e6fd      	b.n	800034c <__udivmoddi4+0x8c>
 8000550:	4543      	cmp	r3, r8
 8000552:	d2e5      	bcs.n	8000520 <__udivmoddi4+0x260>
 8000554:	ebb8 0e02 	subs.w	lr, r8, r2
 8000558:	eb69 0104 	sbc.w	r1, r9, r4
 800055c:	3801      	subs	r0, #1
 800055e:	e7df      	b.n	8000520 <__udivmoddi4+0x260>
 8000560:	4608      	mov	r0, r1
 8000562:	e7d2      	b.n	800050a <__udivmoddi4+0x24a>
 8000564:	4660      	mov	r0, ip
 8000566:	e78d      	b.n	8000484 <__udivmoddi4+0x1c4>
 8000568:	4681      	mov	r9, r0
 800056a:	e7b9      	b.n	80004e0 <__udivmoddi4+0x220>
 800056c:	4666      	mov	r6, ip
 800056e:	e775      	b.n	800045c <__udivmoddi4+0x19c>
 8000570:	4630      	mov	r0, r6
 8000572:	e74a      	b.n	800040a <__udivmoddi4+0x14a>
 8000574:	f1ac 0c02 	sub.w	ip, ip, #2
 8000578:	4439      	add	r1, r7
 800057a:	e713      	b.n	80003a4 <__udivmoddi4+0xe4>
 800057c:	3802      	subs	r0, #2
 800057e:	443c      	add	r4, r7
 8000580:	e724      	b.n	80003cc <__udivmoddi4+0x10c>
 8000582:	bf00      	nop

08000584 <__aeabi_idiv0>:
 8000584:	4770      	bx	lr
 8000586:	bf00      	nop

08000588 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000588:	b480      	push	{r7}
 800058a:	b085      	sub	sp, #20
 800058c:	af00      	add	r7, sp, #0
 800058e:	60f8      	str	r0, [r7, #12]
 8000590:	60b9      	str	r1, [r7, #8]
 8000592:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000594:	68fb      	ldr	r3, [r7, #12]
 8000596:	4a07      	ldr	r2, [pc, #28]	; (80005b4 <vApplicationGetIdleTaskMemory+0x2c>)
 8000598:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800059a:	68bb      	ldr	r3, [r7, #8]
 800059c:	4a06      	ldr	r2, [pc, #24]	; (80005b8 <vApplicationGetIdleTaskMemory+0x30>)
 800059e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80005a0:	687b      	ldr	r3, [r7, #4]
 80005a2:	2280      	movs	r2, #128	; 0x80
 80005a4:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80005a6:	bf00      	nop
 80005a8:	3714      	adds	r7, #20
 80005aa:	46bd      	mov	sp, r7
 80005ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b0:	4770      	bx	lr
 80005b2:	bf00      	nop
 80005b4:	200001e8 	.word	0x200001e8
 80005b8:	2000029c 	.word	0x2000029c

080005bc <_write>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

// Send printf to uart1
int _write(int fd, char* ptr, int len) {
 80005bc:	b580      	push	{r7, lr}
 80005be:	b086      	sub	sp, #24
 80005c0:	af00      	add	r7, sp, #0
 80005c2:	60f8      	str	r0, [r7, #12]
 80005c4:	60b9      	str	r1, [r7, #8]
 80005c6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == 1 || fd == 2) {
 80005c8:	68fb      	ldr	r3, [r7, #12]
 80005ca:	2b01      	cmp	r3, #1
 80005cc:	d002      	beq.n	80005d4 <_write+0x18>
 80005ce:	68fb      	ldr	r3, [r7, #12]
 80005d0:	2b02      	cmp	r3, #2
 80005d2:	d111      	bne.n	80005f8 <_write+0x3c>
    hstatus = HAL_UART_Transmit(&huart1, (uint8_t *) ptr, len, HAL_MAX_DELAY);
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	b29a      	uxth	r2, r3
 80005d8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80005dc:	68b9      	ldr	r1, [r7, #8]
 80005de:	4809      	ldr	r0, [pc, #36]	; (8000604 <_write+0x48>)
 80005e0:	f002 ff31 	bl	8003446 <HAL_UART_Transmit>
 80005e4:	4603      	mov	r3, r0
 80005e6:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 80005e8:	7dfb      	ldrb	r3, [r7, #23]
 80005ea:	2b00      	cmp	r3, #0
 80005ec:	d101      	bne.n	80005f2 <_write+0x36>
      return len;
 80005ee:	687b      	ldr	r3, [r7, #4]
 80005f0:	e004      	b.n	80005fc <_write+0x40>
    else
      return -1;
 80005f2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80005f6:	e001      	b.n	80005fc <_write+0x40>
  }
  return -1;
 80005f8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80005fc:	4618      	mov	r0, r3
 80005fe:	3718      	adds	r7, #24
 8000600:	46bd      	mov	sp, r7
 8000602:	bd80      	pop	{r7, pc}
 8000604:	20004668 	.word	0x20004668

08000608 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000608:	b5b0      	push	{r4, r5, r7, lr}
 800060a:	b08e      	sub	sp, #56	; 0x38
 800060c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800060e:	f000 fb9b 	bl	8000d48 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000612:	f000 f83f 	bl	8000694 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000616:	f000 f8fd 	bl	8000814 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 800061a:	f000 f8a3 	bl	8000764 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  MX_USB_OTG_FS_PCD_Init();
 800061e:	f000 f8cb 	bl	80007b8 <MX_USB_OTG_FS_PCD_Init>
  MX_USB_DEVICE_Init();
 8000622:	f006 f853 	bl	80066cc <MX_USB_DEVICE_Init>

  DBG("Starting");
 8000626:	4816      	ldr	r0, [pc, #88]	; (8000680 <main+0x78>)
 8000628:	f008 fa24 	bl	8008a74 <iprintf>
 800062c:	200a      	movs	r0, #10
 800062e:	f008 fa39 	bl	8008aa4 <putchar>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of mainTask */
  osThreadDef(mainTask, startMainTask, osPriorityNormal, 0, 128);
 8000632:	4b14      	ldr	r3, [pc, #80]	; (8000684 <main+0x7c>)
 8000634:	f107 041c 	add.w	r4, r7, #28
 8000638:	461d      	mov	r5, r3
 800063a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800063c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800063e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000642:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  mainTaskHandle = osThreadCreate(osThread(mainTask), NULL);
 8000646:	f107 031c 	add.w	r3, r7, #28
 800064a:	2100      	movs	r1, #0
 800064c:	4618      	mov	r0, r3
 800064e:	f004 fd7e 	bl	800514e <osThreadCreate>
 8000652:	4603      	mov	r3, r0
 8000654:	4a0c      	ldr	r2, [pc, #48]	; (8000688 <main+0x80>)
 8000656:	6013      	str	r3, [r2, #0]

  /* definition and creation of aliveTask */
  osThreadDef(aliveTask, startAliveTask, osPriorityLow, 0, 128);
 8000658:	4b0c      	ldr	r3, [pc, #48]	; (800068c <main+0x84>)
 800065a:	463c      	mov	r4, r7
 800065c:	461d      	mov	r5, r3
 800065e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000660:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000662:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000666:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  aliveTaskHandle = osThreadCreate(osThread(aliveTask), NULL);
 800066a:	463b      	mov	r3, r7
 800066c:	2100      	movs	r1, #0
 800066e:	4618      	mov	r0, r3
 8000670:	f004 fd6d 	bl	800514e <osThreadCreate>
 8000674:	4603      	mov	r3, r0
 8000676:	4a06      	ldr	r2, [pc, #24]	; (8000690 <main+0x88>)
 8000678:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 800067a:	f004 fd51 	bl	8005120 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800067e:	e7fe      	b.n	800067e <main+0x76>
 8000680:	08009bc4 	.word	0x08009bc4
 8000684:	08009bd0 	.word	0x08009bd0
 8000688:	20004258 	.word	0x20004258
 800068c:	08009bec 	.word	0x08009bec
 8000690:	2000425c 	.word	0x2000425c

08000694 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	b094      	sub	sp, #80	; 0x50
 8000698:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800069a:	f107 0320 	add.w	r3, r7, #32
 800069e:	2230      	movs	r2, #48	; 0x30
 80006a0:	2100      	movs	r1, #0
 80006a2:	4618      	mov	r0, r3
 80006a4:	f008 f983 	bl	80089ae <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006a8:	f107 030c 	add.w	r3, r7, #12
 80006ac:	2200      	movs	r2, #0
 80006ae:	601a      	str	r2, [r3, #0]
 80006b0:	605a      	str	r2, [r3, #4]
 80006b2:	609a      	str	r2, [r3, #8]
 80006b4:	60da      	str	r2, [r3, #12]
 80006b6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006b8:	2300      	movs	r3, #0
 80006ba:	60bb      	str	r3, [r7, #8]
 80006bc:	4b27      	ldr	r3, [pc, #156]	; (800075c <SystemClock_Config+0xc8>)
 80006be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006c0:	4a26      	ldr	r2, [pc, #152]	; (800075c <SystemClock_Config+0xc8>)
 80006c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006c6:	6413      	str	r3, [r2, #64]	; 0x40
 80006c8:	4b24      	ldr	r3, [pc, #144]	; (800075c <SystemClock_Config+0xc8>)
 80006ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006d0:	60bb      	str	r3, [r7, #8]
 80006d2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006d4:	2300      	movs	r3, #0
 80006d6:	607b      	str	r3, [r7, #4]
 80006d8:	4b21      	ldr	r3, [pc, #132]	; (8000760 <SystemClock_Config+0xcc>)
 80006da:	681b      	ldr	r3, [r3, #0]
 80006dc:	4a20      	ldr	r2, [pc, #128]	; (8000760 <SystemClock_Config+0xcc>)
 80006de:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80006e2:	6013      	str	r3, [r2, #0]
 80006e4:	4b1e      	ldr	r3, [pc, #120]	; (8000760 <SystemClock_Config+0xcc>)
 80006e6:	681b      	ldr	r3, [r3, #0]
 80006e8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80006ec:	607b      	str	r3, [r7, #4]
 80006ee:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006f0:	2301      	movs	r3, #1
 80006f2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80006f4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80006f8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006fa:	2302      	movs	r3, #2
 80006fc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006fe:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000702:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000704:	2319      	movs	r3, #25
 8000706:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8000708:	23c0      	movs	r3, #192	; 0xc0
 800070a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800070c:	2302      	movs	r3, #2
 800070e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000710:	2304      	movs	r3, #4
 8000712:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000714:	f107 0320 	add.w	r3, r7, #32
 8000718:	4618      	mov	r0, r3
 800071a:	f001 ff4d 	bl	80025b8 <HAL_RCC_OscConfig>
 800071e:	4603      	mov	r3, r0
 8000720:	2b00      	cmp	r3, #0
 8000722:	d001      	beq.n	8000728 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000724:	f000 f8f4 	bl	8000910 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000728:	230f      	movs	r3, #15
 800072a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800072c:	2302      	movs	r3, #2
 800072e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000730:	2300      	movs	r3, #0
 8000732:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000734:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000738:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800073a:	2300      	movs	r3, #0
 800073c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800073e:	f107 030c 	add.w	r3, r7, #12
 8000742:	2103      	movs	r1, #3
 8000744:	4618      	mov	r0, r3
 8000746:	f002 f9af 	bl	8002aa8 <HAL_RCC_ClockConfig>
 800074a:	4603      	mov	r3, r0
 800074c:	2b00      	cmp	r3, #0
 800074e:	d001      	beq.n	8000754 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000750:	f000 f8de 	bl	8000910 <Error_Handler>
  }
}
 8000754:	bf00      	nop
 8000756:	3750      	adds	r7, #80	; 0x50
 8000758:	46bd      	mov	sp, r7
 800075a:	bd80      	pop	{r7, pc}
 800075c:	40023800 	.word	0x40023800
 8000760:	40007000 	.word	0x40007000

08000764 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000768:	4b11      	ldr	r3, [pc, #68]	; (80007b0 <MX_USART1_UART_Init+0x4c>)
 800076a:	4a12      	ldr	r2, [pc, #72]	; (80007b4 <MX_USART1_UART_Init+0x50>)
 800076c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 921600;
 800076e:	4b10      	ldr	r3, [pc, #64]	; (80007b0 <MX_USART1_UART_Init+0x4c>)
 8000770:	f44f 2261 	mov.w	r2, #921600	; 0xe1000
 8000774:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000776:	4b0e      	ldr	r3, [pc, #56]	; (80007b0 <MX_USART1_UART_Init+0x4c>)
 8000778:	2200      	movs	r2, #0
 800077a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800077c:	4b0c      	ldr	r3, [pc, #48]	; (80007b0 <MX_USART1_UART_Init+0x4c>)
 800077e:	2200      	movs	r2, #0
 8000780:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000782:	4b0b      	ldr	r3, [pc, #44]	; (80007b0 <MX_USART1_UART_Init+0x4c>)
 8000784:	2200      	movs	r2, #0
 8000786:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000788:	4b09      	ldr	r3, [pc, #36]	; (80007b0 <MX_USART1_UART_Init+0x4c>)
 800078a:	220c      	movs	r2, #12
 800078c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800078e:	4b08      	ldr	r3, [pc, #32]	; (80007b0 <MX_USART1_UART_Init+0x4c>)
 8000790:	2200      	movs	r2, #0
 8000792:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000794:	4b06      	ldr	r3, [pc, #24]	; (80007b0 <MX_USART1_UART_Init+0x4c>)
 8000796:	2200      	movs	r2, #0
 8000798:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800079a:	4805      	ldr	r0, [pc, #20]	; (80007b0 <MX_USART1_UART_Init+0x4c>)
 800079c:	f002 fe06 	bl	80033ac <HAL_UART_Init>
 80007a0:	4603      	mov	r3, r0
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	d001      	beq.n	80007aa <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80007a6:	f000 f8b3 	bl	8000910 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80007aa:	bf00      	nop
 80007ac:	bd80      	pop	{r7, pc}
 80007ae:	bf00      	nop
 80007b0:	20004668 	.word	0x20004668
 80007b4:	40011000 	.word	0x40011000

080007b8 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80007bc:	4b14      	ldr	r3, [pc, #80]	; (8000810 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007be:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80007c2:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80007c4:	4b12      	ldr	r3, [pc, #72]	; (8000810 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007c6:	2204      	movs	r2, #4
 80007c8:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80007ca:	4b11      	ldr	r3, [pc, #68]	; (8000810 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007cc:	2202      	movs	r2, #2
 80007ce:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80007d0:	4b0f      	ldr	r3, [pc, #60]	; (8000810 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80007d6:	4b0e      	ldr	r3, [pc, #56]	; (8000810 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007d8:	2202      	movs	r2, #2
 80007da:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80007dc:	4b0c      	ldr	r3, [pc, #48]	; (8000810 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007de:	2200      	movs	r2, #0
 80007e0:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80007e2:	4b0b      	ldr	r3, [pc, #44]	; (8000810 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80007e8:	4b09      	ldr	r3, [pc, #36]	; (8000810 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80007ee:	4b08      	ldr	r3, [pc, #32]	; (8000810 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80007f4:	4b06      	ldr	r3, [pc, #24]	; (8000810 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80007fa:	4805      	ldr	r0, [pc, #20]	; (8000810 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007fc:	f000 fd70 	bl	80012e0 <HAL_PCD_Init>
 8000800:	4603      	mov	r3, r0
 8000802:	2b00      	cmp	r3, #0
 8000804:	d001      	beq.n	800080a <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000806:	f000 f883 	bl	8000910 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 800080a:	bf00      	nop
 800080c:	bd80      	pop	{r7, pc}
 800080e:	bf00      	nop
 8000810:	20004260 	.word	0x20004260

08000814 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000814:	b480      	push	{r7}
 8000816:	b083      	sub	sp, #12
 8000818:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800081a:	2300      	movs	r3, #0
 800081c:	607b      	str	r3, [r7, #4]
 800081e:	4b10      	ldr	r3, [pc, #64]	; (8000860 <MX_GPIO_Init+0x4c>)
 8000820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000822:	4a0f      	ldr	r2, [pc, #60]	; (8000860 <MX_GPIO_Init+0x4c>)
 8000824:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000828:	6313      	str	r3, [r2, #48]	; 0x30
 800082a:	4b0d      	ldr	r3, [pc, #52]	; (8000860 <MX_GPIO_Init+0x4c>)
 800082c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800082e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000832:	607b      	str	r3, [r7, #4]
 8000834:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000836:	2300      	movs	r3, #0
 8000838:	603b      	str	r3, [r7, #0]
 800083a:	4b09      	ldr	r3, [pc, #36]	; (8000860 <MX_GPIO_Init+0x4c>)
 800083c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800083e:	4a08      	ldr	r2, [pc, #32]	; (8000860 <MX_GPIO_Init+0x4c>)
 8000840:	f043 0301 	orr.w	r3, r3, #1
 8000844:	6313      	str	r3, [r2, #48]	; 0x30
 8000846:	4b06      	ldr	r3, [pc, #24]	; (8000860 <MX_GPIO_Init+0x4c>)
 8000848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800084a:	f003 0301 	and.w	r3, r3, #1
 800084e:	603b      	str	r3, [r7, #0]
 8000850:	683b      	ldr	r3, [r7, #0]

}
 8000852:	bf00      	nop
 8000854:	370c      	adds	r7, #12
 8000856:	46bd      	mov	sp, r7
 8000858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800085c:	4770      	bx	lr
 800085e:	bf00      	nop
 8000860:	40023800 	.word	0x40023800

08000864 <startMainTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_startMainTask */
void startMainTask(void const * argument)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	b08a      	sub	sp, #40	; 0x28
 8000868:	af00      	add	r7, sp, #0
 800086a:	6078      	str	r0, [r7, #4]
	char buf[32];

  /* Infinite loop */
  for(;;)
  {
	sprintf(buf, "Tick %lu", osKernelSysTick() / 1000);
 800086c:	f004 fc5f 	bl	800512e <osKernelSysTick>
 8000870:	4603      	mov	r3, r0
 8000872:	4a0e      	ldr	r2, [pc, #56]	; (80008ac <startMainTask+0x48>)
 8000874:	fba2 2303 	umull	r2, r3, r2, r3
 8000878:	099a      	lsrs	r2, r3, #6
 800087a:	f107 0308 	add.w	r3, r7, #8
 800087e:	490c      	ldr	r1, [pc, #48]	; (80008b0 <startMainTask+0x4c>)
 8000880:	4618      	mov	r0, r3
 8000882:	f008 f99f 	bl	8008bc4 <siprintf>
	USBD_CUSTOM_HID_SendReport_FS((uint8_t *)&buf, strlen(buf));
 8000886:	f107 0308 	add.w	r3, r7, #8
 800088a:	4618      	mov	r0, r3
 800088c:	f7ff fca8 	bl	80001e0 <strlen>
 8000890:	4603      	mov	r3, r0
 8000892:	b29a      	uxth	r2, r3
 8000894:	f107 0308 	add.w	r3, r7, #8
 8000898:	4611      	mov	r1, r2
 800089a:	4618      	mov	r0, r3
 800089c:	f007 fb32 	bl	8007f04 <USBD_CUSTOM_HID_SendReport_FS>
    osDelay(1000);
 80008a0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80008a4:	f004 fc9f 	bl	80051e6 <osDelay>
	sprintf(buf, "Tick %lu", osKernelSysTick() / 1000);
 80008a8:	e7e0      	b.n	800086c <startMainTask+0x8>
 80008aa:	bf00      	nop
 80008ac:	10624dd3 	.word	0x10624dd3
 80008b0:	08009c08 	.word	0x08009c08

080008b4 <startAliveTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_startAliveTask */
void startAliveTask(void const * argument)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b082      	sub	sp, #8
 80008b8:	af00      	add	r7, sp, #0
 80008ba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN startAliveTask */
  /* Infinite loop */
  for(;;)
  {
	  DBG("Alive for %lu seconds!", osKernelSysTick() / 1000);
 80008bc:	f004 fc37 	bl	800512e <osKernelSysTick>
 80008c0:	4603      	mov	r3, r0
 80008c2:	4a08      	ldr	r2, [pc, #32]	; (80008e4 <startAliveTask+0x30>)
 80008c4:	fba2 2303 	umull	r2, r3, r2, r3
 80008c8:	099b      	lsrs	r3, r3, #6
 80008ca:	4619      	mov	r1, r3
 80008cc:	4806      	ldr	r0, [pc, #24]	; (80008e8 <startAliveTask+0x34>)
 80008ce:	f008 f8d1 	bl	8008a74 <iprintf>
 80008d2:	200a      	movs	r0, #10
 80008d4:	f008 f8e6 	bl	8008aa4 <putchar>
	  osDelay(10000);
 80008d8:	f242 7010 	movw	r0, #10000	; 0x2710
 80008dc:	f004 fc83 	bl	80051e6 <osDelay>
	  DBG("Alive for %lu seconds!", osKernelSysTick() / 1000);
 80008e0:	e7ec      	b.n	80008bc <startAliveTask+0x8>
 80008e2:	bf00      	nop
 80008e4:	10624dd3 	.word	0x10624dd3
 80008e8:	08009c14 	.word	0x08009c14

080008ec <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b082      	sub	sp, #8
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM11) {
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	681b      	ldr	r3, [r3, #0]
 80008f8:	4a04      	ldr	r2, [pc, #16]	; (800090c <HAL_TIM_PeriodElapsedCallback+0x20>)
 80008fa:	4293      	cmp	r3, r2
 80008fc:	d101      	bne.n	8000902 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80008fe:	f000 fa45 	bl	8000d8c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000902:	bf00      	nop
 8000904:	3708      	adds	r7, #8
 8000906:	46bd      	mov	sp, r7
 8000908:	bd80      	pop	{r7, pc}
 800090a:	bf00      	nop
 800090c:	40014800 	.word	0x40014800

08000910 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000910:	b480      	push	{r7}
 8000912:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000914:	b672      	cpsid	i
}
 8000916:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000918:	e7fe      	b.n	8000918 <Error_Handler+0x8>
	...

0800091c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	b082      	sub	sp, #8
 8000920:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000922:	2300      	movs	r3, #0
 8000924:	607b      	str	r3, [r7, #4]
 8000926:	4b12      	ldr	r3, [pc, #72]	; (8000970 <HAL_MspInit+0x54>)
 8000928:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800092a:	4a11      	ldr	r2, [pc, #68]	; (8000970 <HAL_MspInit+0x54>)
 800092c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000930:	6453      	str	r3, [r2, #68]	; 0x44
 8000932:	4b0f      	ldr	r3, [pc, #60]	; (8000970 <HAL_MspInit+0x54>)
 8000934:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000936:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800093a:	607b      	str	r3, [r7, #4]
 800093c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800093e:	2300      	movs	r3, #0
 8000940:	603b      	str	r3, [r7, #0]
 8000942:	4b0b      	ldr	r3, [pc, #44]	; (8000970 <HAL_MspInit+0x54>)
 8000944:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000946:	4a0a      	ldr	r2, [pc, #40]	; (8000970 <HAL_MspInit+0x54>)
 8000948:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800094c:	6413      	str	r3, [r2, #64]	; 0x40
 800094e:	4b08      	ldr	r3, [pc, #32]	; (8000970 <HAL_MspInit+0x54>)
 8000950:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000952:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000956:	603b      	str	r3, [r7, #0]
 8000958:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800095a:	2200      	movs	r2, #0
 800095c:	210f      	movs	r1, #15
 800095e:	f06f 0001 	mvn.w	r0, #1
 8000962:	f000 fb0f 	bl	8000f84 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000966:	bf00      	nop
 8000968:	3708      	adds	r7, #8
 800096a:	46bd      	mov	sp, r7
 800096c:	bd80      	pop	{r7, pc}
 800096e:	bf00      	nop
 8000970:	40023800 	.word	0x40023800

08000974 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	b08a      	sub	sp, #40	; 0x28
 8000978:	af00      	add	r7, sp, #0
 800097a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800097c:	f107 0314 	add.w	r3, r7, #20
 8000980:	2200      	movs	r2, #0
 8000982:	601a      	str	r2, [r3, #0]
 8000984:	605a      	str	r2, [r3, #4]
 8000986:	609a      	str	r2, [r3, #8]
 8000988:	60da      	str	r2, [r3, #12]
 800098a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	4a19      	ldr	r2, [pc, #100]	; (80009f8 <HAL_UART_MspInit+0x84>)
 8000992:	4293      	cmp	r3, r2
 8000994:	d12c      	bne.n	80009f0 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000996:	2300      	movs	r3, #0
 8000998:	613b      	str	r3, [r7, #16]
 800099a:	4b18      	ldr	r3, [pc, #96]	; (80009fc <HAL_UART_MspInit+0x88>)
 800099c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800099e:	4a17      	ldr	r2, [pc, #92]	; (80009fc <HAL_UART_MspInit+0x88>)
 80009a0:	f043 0310 	orr.w	r3, r3, #16
 80009a4:	6453      	str	r3, [r2, #68]	; 0x44
 80009a6:	4b15      	ldr	r3, [pc, #84]	; (80009fc <HAL_UART_MspInit+0x88>)
 80009a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009aa:	f003 0310 	and.w	r3, r3, #16
 80009ae:	613b      	str	r3, [r7, #16]
 80009b0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009b2:	2300      	movs	r3, #0
 80009b4:	60fb      	str	r3, [r7, #12]
 80009b6:	4b11      	ldr	r3, [pc, #68]	; (80009fc <HAL_UART_MspInit+0x88>)
 80009b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ba:	4a10      	ldr	r2, [pc, #64]	; (80009fc <HAL_UART_MspInit+0x88>)
 80009bc:	f043 0301 	orr.w	r3, r3, #1
 80009c0:	6313      	str	r3, [r2, #48]	; 0x30
 80009c2:	4b0e      	ldr	r3, [pc, #56]	; (80009fc <HAL_UART_MspInit+0x88>)
 80009c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009c6:	f003 0301 	and.w	r3, r3, #1
 80009ca:	60fb      	str	r3, [r7, #12]
 80009cc:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80009ce:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80009d2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009d4:	2302      	movs	r3, #2
 80009d6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d8:	2300      	movs	r3, #0
 80009da:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009dc:	2303      	movs	r3, #3
 80009de:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80009e0:	2307      	movs	r3, #7
 80009e2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009e4:	f107 0314 	add.w	r3, r7, #20
 80009e8:	4619      	mov	r1, r3
 80009ea:	4805      	ldr	r0, [pc, #20]	; (8000a00 <HAL_UART_MspInit+0x8c>)
 80009ec:	f000 faf4 	bl	8000fd8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80009f0:	bf00      	nop
 80009f2:	3728      	adds	r7, #40	; 0x28
 80009f4:	46bd      	mov	sp, r7
 80009f6:	bd80      	pop	{r7, pc}
 80009f8:	40011000 	.word	0x40011000
 80009fc:	40023800 	.word	0x40023800
 8000a00:	40020000 	.word	0x40020000

08000a04 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b08a      	sub	sp, #40	; 0x28
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a0c:	f107 0314 	add.w	r3, r7, #20
 8000a10:	2200      	movs	r2, #0
 8000a12:	601a      	str	r2, [r3, #0]
 8000a14:	605a      	str	r2, [r3, #4]
 8000a16:	609a      	str	r2, [r3, #8]
 8000a18:	60da      	str	r2, [r3, #12]
 8000a1a:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000a24:	d142      	bne.n	8000aac <HAL_PCD_MspInit+0xa8>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a26:	2300      	movs	r3, #0
 8000a28:	613b      	str	r3, [r7, #16]
 8000a2a:	4b22      	ldr	r3, [pc, #136]	; (8000ab4 <HAL_PCD_MspInit+0xb0>)
 8000a2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a2e:	4a21      	ldr	r2, [pc, #132]	; (8000ab4 <HAL_PCD_MspInit+0xb0>)
 8000a30:	f043 0301 	orr.w	r3, r3, #1
 8000a34:	6313      	str	r3, [r2, #48]	; 0x30
 8000a36:	4b1f      	ldr	r3, [pc, #124]	; (8000ab4 <HAL_PCD_MspInit+0xb0>)
 8000a38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a3a:	f003 0301 	and.w	r3, r3, #1
 8000a3e:	613b      	str	r3, [r7, #16]
 8000a40:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000a42:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000a46:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a48:	2302      	movs	r3, #2
 8000a4a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a50:	2303      	movs	r3, #3
 8000a52:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000a54:	230a      	movs	r3, #10
 8000a56:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a58:	f107 0314 	add.w	r3, r7, #20
 8000a5c:	4619      	mov	r1, r3
 8000a5e:	4816      	ldr	r0, [pc, #88]	; (8000ab8 <HAL_PCD_MspInit+0xb4>)
 8000a60:	f000 faba 	bl	8000fd8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000a64:	4b13      	ldr	r3, [pc, #76]	; (8000ab4 <HAL_PCD_MspInit+0xb0>)
 8000a66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000a68:	4a12      	ldr	r2, [pc, #72]	; (8000ab4 <HAL_PCD_MspInit+0xb0>)
 8000a6a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a6e:	6353      	str	r3, [r2, #52]	; 0x34
 8000a70:	2300      	movs	r3, #0
 8000a72:	60fb      	str	r3, [r7, #12]
 8000a74:	4b0f      	ldr	r3, [pc, #60]	; (8000ab4 <HAL_PCD_MspInit+0xb0>)
 8000a76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a78:	4a0e      	ldr	r2, [pc, #56]	; (8000ab4 <HAL_PCD_MspInit+0xb0>)
 8000a7a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a7e:	6453      	str	r3, [r2, #68]	; 0x44
 8000a80:	4b0c      	ldr	r3, [pc, #48]	; (8000ab4 <HAL_PCD_MspInit+0xb0>)
 8000a82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a84:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a88:	60fb      	str	r3, [r7, #12]
 8000a8a:	68fb      	ldr	r3, [r7, #12]
    /* USB_OTG_FS interrupt Init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	2105      	movs	r1, #5
 8000a90:	2043      	movs	r0, #67	; 0x43
 8000a92:	f000 fa77 	bl	8000f84 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8000a96:	2043      	movs	r0, #67	; 0x43
 8000a98:	f000 fa90 	bl	8000fbc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */
	HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	2100      	movs	r1, #0
 8000aa0:	2043      	movs	r0, #67	; 0x43
 8000aa2:	f000 fa6f 	bl	8000f84 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8000aa6:	2043      	movs	r0, #67	; 0x43
 8000aa8:	f000 fa88 	bl	8000fbc <HAL_NVIC_EnableIRQ>
  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8000aac:	bf00      	nop
 8000aae:	3728      	adds	r7, #40	; 0x28
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	bd80      	pop	{r7, pc}
 8000ab4:	40023800 	.word	0x40023800
 8000ab8:	40020000 	.word	0x40020000

08000abc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b08c      	sub	sp, #48	; 0x30
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000ac8:	2300      	movs	r3, #0
 8000aca:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM11 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, TickPriority ,0);
 8000acc:	2200      	movs	r2, #0
 8000ace:	6879      	ldr	r1, [r7, #4]
 8000ad0:	201a      	movs	r0, #26
 8000ad2:	f000 fa57 	bl	8000f84 <HAL_NVIC_SetPriority>

  /* Enable the TIM11 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8000ad6:	201a      	movs	r0, #26
 8000ad8:	f000 fa70 	bl	8000fbc <HAL_NVIC_EnableIRQ>

  /* Enable TIM11 clock */
  __HAL_RCC_TIM11_CLK_ENABLE();
 8000adc:	2300      	movs	r3, #0
 8000ade:	60fb      	str	r3, [r7, #12]
 8000ae0:	4b1e      	ldr	r3, [pc, #120]	; (8000b5c <HAL_InitTick+0xa0>)
 8000ae2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ae4:	4a1d      	ldr	r2, [pc, #116]	; (8000b5c <HAL_InitTick+0xa0>)
 8000ae6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000aea:	6453      	str	r3, [r2, #68]	; 0x44
 8000aec:	4b1b      	ldr	r3, [pc, #108]	; (8000b5c <HAL_InitTick+0xa0>)
 8000aee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000af0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000af4:	60fb      	str	r3, [r7, #12]
 8000af6:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000af8:	f107 0210 	add.w	r2, r7, #16
 8000afc:	f107 0314 	add.w	r3, r7, #20
 8000b00:	4611      	mov	r1, r2
 8000b02:	4618      	mov	r0, r3
 8000b04:	f002 f9a0 	bl	8002e48 <HAL_RCC_GetClockConfig>

  /* Compute TIM11 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000b08:	f002 f98a 	bl	8002e20 <HAL_RCC_GetPCLK2Freq>
 8000b0c:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM11 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000b0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b10:	4a13      	ldr	r2, [pc, #76]	; (8000b60 <HAL_InitTick+0xa4>)
 8000b12:	fba2 2303 	umull	r2, r3, r2, r3
 8000b16:	0c9b      	lsrs	r3, r3, #18
 8000b18:	3b01      	subs	r3, #1
 8000b1a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM11 */
  htim11.Instance = TIM11;
 8000b1c:	4b11      	ldr	r3, [pc, #68]	; (8000b64 <HAL_InitTick+0xa8>)
 8000b1e:	4a12      	ldr	r2, [pc, #72]	; (8000b68 <HAL_InitTick+0xac>)
 8000b20:	601a      	str	r2, [r3, #0]
  + Period = [(TIM11CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim11.Init.Period = (1000000U / 1000U) - 1U;
 8000b22:	4b10      	ldr	r3, [pc, #64]	; (8000b64 <HAL_InitTick+0xa8>)
 8000b24:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000b28:	60da      	str	r2, [r3, #12]
  htim11.Init.Prescaler = uwPrescalerValue;
 8000b2a:	4a0e      	ldr	r2, [pc, #56]	; (8000b64 <HAL_InitTick+0xa8>)
 8000b2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b2e:	6053      	str	r3, [r2, #4]
  htim11.Init.ClockDivision = 0;
 8000b30:	4b0c      	ldr	r3, [pc, #48]	; (8000b64 <HAL_InitTick+0xa8>)
 8000b32:	2200      	movs	r2, #0
 8000b34:	611a      	str	r2, [r3, #16]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b36:	4b0b      	ldr	r3, [pc, #44]	; (8000b64 <HAL_InitTick+0xa8>)
 8000b38:	2200      	movs	r2, #0
 8000b3a:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim11) == HAL_OK)
 8000b3c:	4809      	ldr	r0, [pc, #36]	; (8000b64 <HAL_InitTick+0xa8>)
 8000b3e:	f002 f9b5 	bl	8002eac <HAL_TIM_Base_Init>
 8000b42:	4603      	mov	r3, r0
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	d104      	bne.n	8000b52 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim11);
 8000b48:	4806      	ldr	r0, [pc, #24]	; (8000b64 <HAL_InitTick+0xa8>)
 8000b4a:	f002 fa09 	bl	8002f60 <HAL_TIM_Base_Start_IT>
 8000b4e:	4603      	mov	r3, r0
 8000b50:	e000      	b.n	8000b54 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8000b52:	2301      	movs	r3, #1
}
 8000b54:	4618      	mov	r0, r3
 8000b56:	3730      	adds	r7, #48	; 0x30
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	bd80      	pop	{r7, pc}
 8000b5c:	40023800 	.word	0x40023800
 8000b60:	431bde83 	.word	0x431bde83
 8000b64:	200046ac 	.word	0x200046ac
 8000b68:	40014800 	.word	0x40014800

08000b6c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b6c:	b480      	push	{r7}
 8000b6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b70:	e7fe      	b.n	8000b70 <NMI_Handler+0x4>

08000b72 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b72:	b480      	push	{r7}
 8000b74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b76:	e7fe      	b.n	8000b76 <HardFault_Handler+0x4>

08000b78 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b7c:	e7fe      	b.n	8000b7c <MemManage_Handler+0x4>

08000b7e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b7e:	b480      	push	{r7}
 8000b80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b82:	e7fe      	b.n	8000b82 <BusFault_Handler+0x4>

08000b84 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b84:	b480      	push	{r7}
 8000b86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b88:	e7fe      	b.n	8000b88 <UsageFault_Handler+0x4>

08000b8a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b8a:	b480      	push	{r7}
 8000b8c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b8e:	bf00      	nop
 8000b90:	46bd      	mov	sp, r7
 8000b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b96:	4770      	bx	lr

08000b98 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 8000b9c:	4802      	ldr	r0, [pc, #8]	; (8000ba8 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 8000b9e:	f002 fa41 	bl	8003024 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8000ba2:	bf00      	nop
 8000ba4:	bd80      	pop	{r7, pc}
 8000ba6:	bf00      	nop
 8000ba8:	200046ac 	.word	0x200046ac

08000bac <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000bb0:	4802      	ldr	r0, [pc, #8]	; (8000bbc <OTG_FS_IRQHandler+0x10>)
 8000bb2:	f000 fce5 	bl	8001580 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000bb6:	bf00      	nop
 8000bb8:	bd80      	pop	{r7, pc}
 8000bba:	bf00      	nop
 8000bbc:	20004260 	.word	0x20004260

08000bc0 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b086      	sub	sp, #24
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	60f8      	str	r0, [r7, #12]
 8000bc8:	60b9      	str	r1, [r7, #8]
 8000bca:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000bcc:	2300      	movs	r3, #0
 8000bce:	617b      	str	r3, [r7, #20]
 8000bd0:	e00a      	b.n	8000be8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000bd2:	f3af 8000 	nop.w
 8000bd6:	4601      	mov	r1, r0
 8000bd8:	68bb      	ldr	r3, [r7, #8]
 8000bda:	1c5a      	adds	r2, r3, #1
 8000bdc:	60ba      	str	r2, [r7, #8]
 8000bde:	b2ca      	uxtb	r2, r1
 8000be0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000be2:	697b      	ldr	r3, [r7, #20]
 8000be4:	3301      	adds	r3, #1
 8000be6:	617b      	str	r3, [r7, #20]
 8000be8:	697a      	ldr	r2, [r7, #20]
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	429a      	cmp	r2, r3
 8000bee:	dbf0      	blt.n	8000bd2 <_read+0x12>
	}

return len;
 8000bf0:	687b      	ldr	r3, [r7, #4]
}
 8000bf2:	4618      	mov	r0, r3
 8000bf4:	3718      	adds	r7, #24
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	bd80      	pop	{r7, pc}

08000bfa <_close>:
	}
	return len;
}

int _close(int file)
{
 8000bfa:	b480      	push	{r7}
 8000bfc:	b083      	sub	sp, #12
 8000bfe:	af00      	add	r7, sp, #0
 8000c00:	6078      	str	r0, [r7, #4]
	return -1;
 8000c02:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000c06:	4618      	mov	r0, r3
 8000c08:	370c      	adds	r7, #12
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c10:	4770      	bx	lr

08000c12 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000c12:	b480      	push	{r7}
 8000c14:	b083      	sub	sp, #12
 8000c16:	af00      	add	r7, sp, #0
 8000c18:	6078      	str	r0, [r7, #4]
 8000c1a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000c1c:	683b      	ldr	r3, [r7, #0]
 8000c1e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000c22:	605a      	str	r2, [r3, #4]
	return 0;
 8000c24:	2300      	movs	r3, #0
}
 8000c26:	4618      	mov	r0, r3
 8000c28:	370c      	adds	r7, #12
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c30:	4770      	bx	lr

08000c32 <_isatty>:

int _isatty(int file)
{
 8000c32:	b480      	push	{r7}
 8000c34:	b083      	sub	sp, #12
 8000c36:	af00      	add	r7, sp, #0
 8000c38:	6078      	str	r0, [r7, #4]
	return 1;
 8000c3a:	2301      	movs	r3, #1
}
 8000c3c:	4618      	mov	r0, r3
 8000c3e:	370c      	adds	r7, #12
 8000c40:	46bd      	mov	sp, r7
 8000c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c46:	4770      	bx	lr

08000c48 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000c48:	b480      	push	{r7}
 8000c4a:	b085      	sub	sp, #20
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	60f8      	str	r0, [r7, #12]
 8000c50:	60b9      	str	r1, [r7, #8]
 8000c52:	607a      	str	r2, [r7, #4]
	return 0;
 8000c54:	2300      	movs	r3, #0
}
 8000c56:	4618      	mov	r0, r3
 8000c58:	3714      	adds	r7, #20
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c60:	4770      	bx	lr
	...

08000c64 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b086      	sub	sp, #24
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c6c:	4a14      	ldr	r2, [pc, #80]	; (8000cc0 <_sbrk+0x5c>)
 8000c6e:	4b15      	ldr	r3, [pc, #84]	; (8000cc4 <_sbrk+0x60>)
 8000c70:	1ad3      	subs	r3, r2, r3
 8000c72:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c74:	697b      	ldr	r3, [r7, #20]
 8000c76:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c78:	4b13      	ldr	r3, [pc, #76]	; (8000cc8 <_sbrk+0x64>)
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d102      	bne.n	8000c86 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c80:	4b11      	ldr	r3, [pc, #68]	; (8000cc8 <_sbrk+0x64>)
 8000c82:	4a12      	ldr	r2, [pc, #72]	; (8000ccc <_sbrk+0x68>)
 8000c84:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c86:	4b10      	ldr	r3, [pc, #64]	; (8000cc8 <_sbrk+0x64>)
 8000c88:	681a      	ldr	r2, [r3, #0]
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	4413      	add	r3, r2
 8000c8e:	693a      	ldr	r2, [r7, #16]
 8000c90:	429a      	cmp	r2, r3
 8000c92:	d207      	bcs.n	8000ca4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c94:	f007 fd5a 	bl	800874c <__errno>
 8000c98:	4603      	mov	r3, r0
 8000c9a:	220c      	movs	r2, #12
 8000c9c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c9e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000ca2:	e009      	b.n	8000cb8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ca4:	4b08      	ldr	r3, [pc, #32]	; (8000cc8 <_sbrk+0x64>)
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000caa:	4b07      	ldr	r3, [pc, #28]	; (8000cc8 <_sbrk+0x64>)
 8000cac:	681a      	ldr	r2, [r3, #0]
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	4413      	add	r3, r2
 8000cb2:	4a05      	ldr	r2, [pc, #20]	; (8000cc8 <_sbrk+0x64>)
 8000cb4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000cb6:	68fb      	ldr	r3, [r7, #12]
}
 8000cb8:	4618      	mov	r0, r3
 8000cba:	3718      	adds	r7, #24
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	bd80      	pop	{r7, pc}
 8000cc0:	20020000 	.word	0x20020000
 8000cc4:	00000400 	.word	0x00000400
 8000cc8:	2000049c 	.word	0x2000049c
 8000ccc:	20004bd8 	.word	0x20004bd8

08000cd0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000cd4:	4b06      	ldr	r3, [pc, #24]	; (8000cf0 <SystemInit+0x20>)
 8000cd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000cda:	4a05      	ldr	r2, [pc, #20]	; (8000cf0 <SystemInit+0x20>)
 8000cdc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ce0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ce4:	bf00      	nop
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cec:	4770      	bx	lr
 8000cee:	bf00      	nop
 8000cf0:	e000ed00 	.word	0xe000ed00

08000cf4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000cf4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d2c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000cf8:	480d      	ldr	r0, [pc, #52]	; (8000d30 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000cfa:	490e      	ldr	r1, [pc, #56]	; (8000d34 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000cfc:	4a0e      	ldr	r2, [pc, #56]	; (8000d38 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000cfe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d00:	e002      	b.n	8000d08 <LoopCopyDataInit>

08000d02 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d02:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d04:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d06:	3304      	adds	r3, #4

08000d08 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d08:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d0a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d0c:	d3f9      	bcc.n	8000d02 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d0e:	4a0b      	ldr	r2, [pc, #44]	; (8000d3c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000d10:	4c0b      	ldr	r4, [pc, #44]	; (8000d40 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000d12:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d14:	e001      	b.n	8000d1a <LoopFillZerobss>

08000d16 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d16:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d18:	3204      	adds	r2, #4

08000d1a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d1a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d1c:	d3fb      	bcc.n	8000d16 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000d1e:	f7ff ffd7 	bl	8000cd0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000d22:	f007 fe0f 	bl	8008944 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d26:	f7ff fc6f 	bl	8000608 <main>
  bx  lr    
 8000d2a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000d2c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000d30:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d34:	200001cc 	.word	0x200001cc
  ldr r2, =_sidata
 8000d38:	08009d94 	.word	0x08009d94
  ldr r2, =_sbss
 8000d3c:	200001cc 	.word	0x200001cc
  ldr r4, =_ebss
 8000d40:	20004bd8 	.word	0x20004bd8

08000d44 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d44:	e7fe      	b.n	8000d44 <ADC_IRQHandler>
	...

08000d48 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000d4c:	4b0e      	ldr	r3, [pc, #56]	; (8000d88 <HAL_Init+0x40>)
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	4a0d      	ldr	r2, [pc, #52]	; (8000d88 <HAL_Init+0x40>)
 8000d52:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d56:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000d58:	4b0b      	ldr	r3, [pc, #44]	; (8000d88 <HAL_Init+0x40>)
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	4a0a      	ldr	r2, [pc, #40]	; (8000d88 <HAL_Init+0x40>)
 8000d5e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000d62:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d64:	4b08      	ldr	r3, [pc, #32]	; (8000d88 <HAL_Init+0x40>)
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	4a07      	ldr	r2, [pc, #28]	; (8000d88 <HAL_Init+0x40>)
 8000d6a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d6e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d70:	2003      	movs	r0, #3
 8000d72:	f000 f8fc 	bl	8000f6e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d76:	200f      	movs	r0, #15
 8000d78:	f7ff fea0 	bl	8000abc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d7c:	f7ff fdce 	bl	800091c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d80:	2300      	movs	r3, #0
}
 8000d82:	4618      	mov	r0, r3
 8000d84:	bd80      	pop	{r7, pc}
 8000d86:	bf00      	nop
 8000d88:	40023c00 	.word	0x40023c00

08000d8c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d8c:	b480      	push	{r7}
 8000d8e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d90:	4b06      	ldr	r3, [pc, #24]	; (8000dac <HAL_IncTick+0x20>)
 8000d92:	781b      	ldrb	r3, [r3, #0]
 8000d94:	461a      	mov	r2, r3
 8000d96:	4b06      	ldr	r3, [pc, #24]	; (8000db0 <HAL_IncTick+0x24>)
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	4413      	add	r3, r2
 8000d9c:	4a04      	ldr	r2, [pc, #16]	; (8000db0 <HAL_IncTick+0x24>)
 8000d9e:	6013      	str	r3, [r2, #0]
}
 8000da0:	bf00      	nop
 8000da2:	46bd      	mov	sp, r7
 8000da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da8:	4770      	bx	lr
 8000daa:	bf00      	nop
 8000dac:	20000008 	.word	0x20000008
 8000db0:	200046f4 	.word	0x200046f4

08000db4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000db4:	b480      	push	{r7}
 8000db6:	af00      	add	r7, sp, #0
  return uwTick;
 8000db8:	4b03      	ldr	r3, [pc, #12]	; (8000dc8 <HAL_GetTick+0x14>)
 8000dba:	681b      	ldr	r3, [r3, #0]
}
 8000dbc:	4618      	mov	r0, r3
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc4:	4770      	bx	lr
 8000dc6:	bf00      	nop
 8000dc8:	200046f4 	.word	0x200046f4

08000dcc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b084      	sub	sp, #16
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000dd4:	f7ff ffee 	bl	8000db4 <HAL_GetTick>
 8000dd8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000dde:	68fb      	ldr	r3, [r7, #12]
 8000de0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000de4:	d005      	beq.n	8000df2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000de6:	4b0a      	ldr	r3, [pc, #40]	; (8000e10 <HAL_Delay+0x44>)
 8000de8:	781b      	ldrb	r3, [r3, #0]
 8000dea:	461a      	mov	r2, r3
 8000dec:	68fb      	ldr	r3, [r7, #12]
 8000dee:	4413      	add	r3, r2
 8000df0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000df2:	bf00      	nop
 8000df4:	f7ff ffde 	bl	8000db4 <HAL_GetTick>
 8000df8:	4602      	mov	r2, r0
 8000dfa:	68bb      	ldr	r3, [r7, #8]
 8000dfc:	1ad3      	subs	r3, r2, r3
 8000dfe:	68fa      	ldr	r2, [r7, #12]
 8000e00:	429a      	cmp	r2, r3
 8000e02:	d8f7      	bhi.n	8000df4 <HAL_Delay+0x28>
  {
  }
}
 8000e04:	bf00      	nop
 8000e06:	bf00      	nop
 8000e08:	3710      	adds	r7, #16
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	bd80      	pop	{r7, pc}
 8000e0e:	bf00      	nop
 8000e10:	20000008 	.word	0x20000008

08000e14 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e14:	b480      	push	{r7}
 8000e16:	b085      	sub	sp, #20
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	f003 0307 	and.w	r3, r3, #7
 8000e22:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e24:	4b0c      	ldr	r3, [pc, #48]	; (8000e58 <__NVIC_SetPriorityGrouping+0x44>)
 8000e26:	68db      	ldr	r3, [r3, #12]
 8000e28:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e2a:	68ba      	ldr	r2, [r7, #8]
 8000e2c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e30:	4013      	ands	r3, r2
 8000e32:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e34:	68fb      	ldr	r3, [r7, #12]
 8000e36:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e38:	68bb      	ldr	r3, [r7, #8]
 8000e3a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e3c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e40:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e44:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e46:	4a04      	ldr	r2, [pc, #16]	; (8000e58 <__NVIC_SetPriorityGrouping+0x44>)
 8000e48:	68bb      	ldr	r3, [r7, #8]
 8000e4a:	60d3      	str	r3, [r2, #12]
}
 8000e4c:	bf00      	nop
 8000e4e:	3714      	adds	r7, #20
 8000e50:	46bd      	mov	sp, r7
 8000e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e56:	4770      	bx	lr
 8000e58:	e000ed00 	.word	0xe000ed00

08000e5c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e5c:	b480      	push	{r7}
 8000e5e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e60:	4b04      	ldr	r3, [pc, #16]	; (8000e74 <__NVIC_GetPriorityGrouping+0x18>)
 8000e62:	68db      	ldr	r3, [r3, #12]
 8000e64:	0a1b      	lsrs	r3, r3, #8
 8000e66:	f003 0307 	and.w	r3, r3, #7
}
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e72:	4770      	bx	lr
 8000e74:	e000ed00 	.word	0xe000ed00

08000e78 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	b083      	sub	sp, #12
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	4603      	mov	r3, r0
 8000e80:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	db0b      	blt.n	8000ea2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e8a:	79fb      	ldrb	r3, [r7, #7]
 8000e8c:	f003 021f 	and.w	r2, r3, #31
 8000e90:	4907      	ldr	r1, [pc, #28]	; (8000eb0 <__NVIC_EnableIRQ+0x38>)
 8000e92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e96:	095b      	lsrs	r3, r3, #5
 8000e98:	2001      	movs	r0, #1
 8000e9a:	fa00 f202 	lsl.w	r2, r0, r2
 8000e9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000ea2:	bf00      	nop
 8000ea4:	370c      	adds	r7, #12
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eac:	4770      	bx	lr
 8000eae:	bf00      	nop
 8000eb0:	e000e100 	.word	0xe000e100

08000eb4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000eb4:	b480      	push	{r7}
 8000eb6:	b083      	sub	sp, #12
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	4603      	mov	r3, r0
 8000ebc:	6039      	str	r1, [r7, #0]
 8000ebe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ec0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	db0a      	blt.n	8000ede <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ec8:	683b      	ldr	r3, [r7, #0]
 8000eca:	b2da      	uxtb	r2, r3
 8000ecc:	490c      	ldr	r1, [pc, #48]	; (8000f00 <__NVIC_SetPriority+0x4c>)
 8000ece:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ed2:	0112      	lsls	r2, r2, #4
 8000ed4:	b2d2      	uxtb	r2, r2
 8000ed6:	440b      	add	r3, r1
 8000ed8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000edc:	e00a      	b.n	8000ef4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ede:	683b      	ldr	r3, [r7, #0]
 8000ee0:	b2da      	uxtb	r2, r3
 8000ee2:	4908      	ldr	r1, [pc, #32]	; (8000f04 <__NVIC_SetPriority+0x50>)
 8000ee4:	79fb      	ldrb	r3, [r7, #7]
 8000ee6:	f003 030f 	and.w	r3, r3, #15
 8000eea:	3b04      	subs	r3, #4
 8000eec:	0112      	lsls	r2, r2, #4
 8000eee:	b2d2      	uxtb	r2, r2
 8000ef0:	440b      	add	r3, r1
 8000ef2:	761a      	strb	r2, [r3, #24]
}
 8000ef4:	bf00      	nop
 8000ef6:	370c      	adds	r7, #12
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efe:	4770      	bx	lr
 8000f00:	e000e100 	.word	0xe000e100
 8000f04:	e000ed00 	.word	0xe000ed00

08000f08 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f08:	b480      	push	{r7}
 8000f0a:	b089      	sub	sp, #36	; 0x24
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	60f8      	str	r0, [r7, #12]
 8000f10:	60b9      	str	r1, [r7, #8]
 8000f12:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f14:	68fb      	ldr	r3, [r7, #12]
 8000f16:	f003 0307 	and.w	r3, r3, #7
 8000f1a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f1c:	69fb      	ldr	r3, [r7, #28]
 8000f1e:	f1c3 0307 	rsb	r3, r3, #7
 8000f22:	2b04      	cmp	r3, #4
 8000f24:	bf28      	it	cs
 8000f26:	2304      	movcs	r3, #4
 8000f28:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f2a:	69fb      	ldr	r3, [r7, #28]
 8000f2c:	3304      	adds	r3, #4
 8000f2e:	2b06      	cmp	r3, #6
 8000f30:	d902      	bls.n	8000f38 <NVIC_EncodePriority+0x30>
 8000f32:	69fb      	ldr	r3, [r7, #28]
 8000f34:	3b03      	subs	r3, #3
 8000f36:	e000      	b.n	8000f3a <NVIC_EncodePriority+0x32>
 8000f38:	2300      	movs	r3, #0
 8000f3a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f3c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000f40:	69bb      	ldr	r3, [r7, #24]
 8000f42:	fa02 f303 	lsl.w	r3, r2, r3
 8000f46:	43da      	mvns	r2, r3
 8000f48:	68bb      	ldr	r3, [r7, #8]
 8000f4a:	401a      	ands	r2, r3
 8000f4c:	697b      	ldr	r3, [r7, #20]
 8000f4e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f50:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000f54:	697b      	ldr	r3, [r7, #20]
 8000f56:	fa01 f303 	lsl.w	r3, r1, r3
 8000f5a:	43d9      	mvns	r1, r3
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f60:	4313      	orrs	r3, r2
         );
}
 8000f62:	4618      	mov	r0, r3
 8000f64:	3724      	adds	r7, #36	; 0x24
 8000f66:	46bd      	mov	sp, r7
 8000f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6c:	4770      	bx	lr

08000f6e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f6e:	b580      	push	{r7, lr}
 8000f70:	b082      	sub	sp, #8
 8000f72:	af00      	add	r7, sp, #0
 8000f74:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f76:	6878      	ldr	r0, [r7, #4]
 8000f78:	f7ff ff4c 	bl	8000e14 <__NVIC_SetPriorityGrouping>
}
 8000f7c:	bf00      	nop
 8000f7e:	3708      	adds	r7, #8
 8000f80:	46bd      	mov	sp, r7
 8000f82:	bd80      	pop	{r7, pc}

08000f84 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b086      	sub	sp, #24
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	60b9      	str	r1, [r7, #8]
 8000f8e:	607a      	str	r2, [r7, #4]
 8000f90:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f92:	2300      	movs	r3, #0
 8000f94:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f96:	f7ff ff61 	bl	8000e5c <__NVIC_GetPriorityGrouping>
 8000f9a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f9c:	687a      	ldr	r2, [r7, #4]
 8000f9e:	68b9      	ldr	r1, [r7, #8]
 8000fa0:	6978      	ldr	r0, [r7, #20]
 8000fa2:	f7ff ffb1 	bl	8000f08 <NVIC_EncodePriority>
 8000fa6:	4602      	mov	r2, r0
 8000fa8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fac:	4611      	mov	r1, r2
 8000fae:	4618      	mov	r0, r3
 8000fb0:	f7ff ff80 	bl	8000eb4 <__NVIC_SetPriority>
}
 8000fb4:	bf00      	nop
 8000fb6:	3718      	adds	r7, #24
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	bd80      	pop	{r7, pc}

08000fbc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b082      	sub	sp, #8
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000fc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fca:	4618      	mov	r0, r3
 8000fcc:	f7ff ff54 	bl	8000e78 <__NVIC_EnableIRQ>
}
 8000fd0:	bf00      	nop
 8000fd2:	3708      	adds	r7, #8
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	bd80      	pop	{r7, pc}

08000fd8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000fd8:	b480      	push	{r7}
 8000fda:	b089      	sub	sp, #36	; 0x24
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]
 8000fe0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000fea:	2300      	movs	r3, #0
 8000fec:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000fee:	2300      	movs	r3, #0
 8000ff0:	61fb      	str	r3, [r7, #28]
 8000ff2:	e159      	b.n	80012a8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000ff4:	2201      	movs	r2, #1
 8000ff6:	69fb      	ldr	r3, [r7, #28]
 8000ff8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ffc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000ffe:	683b      	ldr	r3, [r7, #0]
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	697a      	ldr	r2, [r7, #20]
 8001004:	4013      	ands	r3, r2
 8001006:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001008:	693a      	ldr	r2, [r7, #16]
 800100a:	697b      	ldr	r3, [r7, #20]
 800100c:	429a      	cmp	r2, r3
 800100e:	f040 8148 	bne.w	80012a2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001012:	683b      	ldr	r3, [r7, #0]
 8001014:	685b      	ldr	r3, [r3, #4]
 8001016:	f003 0303 	and.w	r3, r3, #3
 800101a:	2b01      	cmp	r3, #1
 800101c:	d005      	beq.n	800102a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800101e:	683b      	ldr	r3, [r7, #0]
 8001020:	685b      	ldr	r3, [r3, #4]
 8001022:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001026:	2b02      	cmp	r3, #2
 8001028:	d130      	bne.n	800108c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	689b      	ldr	r3, [r3, #8]
 800102e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001030:	69fb      	ldr	r3, [r7, #28]
 8001032:	005b      	lsls	r3, r3, #1
 8001034:	2203      	movs	r2, #3
 8001036:	fa02 f303 	lsl.w	r3, r2, r3
 800103a:	43db      	mvns	r3, r3
 800103c:	69ba      	ldr	r2, [r7, #24]
 800103e:	4013      	ands	r3, r2
 8001040:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001042:	683b      	ldr	r3, [r7, #0]
 8001044:	68da      	ldr	r2, [r3, #12]
 8001046:	69fb      	ldr	r3, [r7, #28]
 8001048:	005b      	lsls	r3, r3, #1
 800104a:	fa02 f303 	lsl.w	r3, r2, r3
 800104e:	69ba      	ldr	r2, [r7, #24]
 8001050:	4313      	orrs	r3, r2
 8001052:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	69ba      	ldr	r2, [r7, #24]
 8001058:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	685b      	ldr	r3, [r3, #4]
 800105e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001060:	2201      	movs	r2, #1
 8001062:	69fb      	ldr	r3, [r7, #28]
 8001064:	fa02 f303 	lsl.w	r3, r2, r3
 8001068:	43db      	mvns	r3, r3
 800106a:	69ba      	ldr	r2, [r7, #24]
 800106c:	4013      	ands	r3, r2
 800106e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001070:	683b      	ldr	r3, [r7, #0]
 8001072:	685b      	ldr	r3, [r3, #4]
 8001074:	091b      	lsrs	r3, r3, #4
 8001076:	f003 0201 	and.w	r2, r3, #1
 800107a:	69fb      	ldr	r3, [r7, #28]
 800107c:	fa02 f303 	lsl.w	r3, r2, r3
 8001080:	69ba      	ldr	r2, [r7, #24]
 8001082:	4313      	orrs	r3, r2
 8001084:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	69ba      	ldr	r2, [r7, #24]
 800108a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800108c:	683b      	ldr	r3, [r7, #0]
 800108e:	685b      	ldr	r3, [r3, #4]
 8001090:	f003 0303 	and.w	r3, r3, #3
 8001094:	2b03      	cmp	r3, #3
 8001096:	d017      	beq.n	80010c8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	68db      	ldr	r3, [r3, #12]
 800109c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800109e:	69fb      	ldr	r3, [r7, #28]
 80010a0:	005b      	lsls	r3, r3, #1
 80010a2:	2203      	movs	r2, #3
 80010a4:	fa02 f303 	lsl.w	r3, r2, r3
 80010a8:	43db      	mvns	r3, r3
 80010aa:	69ba      	ldr	r2, [r7, #24]
 80010ac:	4013      	ands	r3, r2
 80010ae:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80010b0:	683b      	ldr	r3, [r7, #0]
 80010b2:	689a      	ldr	r2, [r3, #8]
 80010b4:	69fb      	ldr	r3, [r7, #28]
 80010b6:	005b      	lsls	r3, r3, #1
 80010b8:	fa02 f303 	lsl.w	r3, r2, r3
 80010bc:	69ba      	ldr	r2, [r7, #24]
 80010be:	4313      	orrs	r3, r2
 80010c0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	69ba      	ldr	r2, [r7, #24]
 80010c6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80010c8:	683b      	ldr	r3, [r7, #0]
 80010ca:	685b      	ldr	r3, [r3, #4]
 80010cc:	f003 0303 	and.w	r3, r3, #3
 80010d0:	2b02      	cmp	r3, #2
 80010d2:	d123      	bne.n	800111c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80010d4:	69fb      	ldr	r3, [r7, #28]
 80010d6:	08da      	lsrs	r2, r3, #3
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	3208      	adds	r2, #8
 80010dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80010e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80010e2:	69fb      	ldr	r3, [r7, #28]
 80010e4:	f003 0307 	and.w	r3, r3, #7
 80010e8:	009b      	lsls	r3, r3, #2
 80010ea:	220f      	movs	r2, #15
 80010ec:	fa02 f303 	lsl.w	r3, r2, r3
 80010f0:	43db      	mvns	r3, r3
 80010f2:	69ba      	ldr	r2, [r7, #24]
 80010f4:	4013      	ands	r3, r2
 80010f6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80010f8:	683b      	ldr	r3, [r7, #0]
 80010fa:	691a      	ldr	r2, [r3, #16]
 80010fc:	69fb      	ldr	r3, [r7, #28]
 80010fe:	f003 0307 	and.w	r3, r3, #7
 8001102:	009b      	lsls	r3, r3, #2
 8001104:	fa02 f303 	lsl.w	r3, r2, r3
 8001108:	69ba      	ldr	r2, [r7, #24]
 800110a:	4313      	orrs	r3, r2
 800110c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800110e:	69fb      	ldr	r3, [r7, #28]
 8001110:	08da      	lsrs	r2, r3, #3
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	3208      	adds	r2, #8
 8001116:	69b9      	ldr	r1, [r7, #24]
 8001118:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001122:	69fb      	ldr	r3, [r7, #28]
 8001124:	005b      	lsls	r3, r3, #1
 8001126:	2203      	movs	r2, #3
 8001128:	fa02 f303 	lsl.w	r3, r2, r3
 800112c:	43db      	mvns	r3, r3
 800112e:	69ba      	ldr	r2, [r7, #24]
 8001130:	4013      	ands	r3, r2
 8001132:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001134:	683b      	ldr	r3, [r7, #0]
 8001136:	685b      	ldr	r3, [r3, #4]
 8001138:	f003 0203 	and.w	r2, r3, #3
 800113c:	69fb      	ldr	r3, [r7, #28]
 800113e:	005b      	lsls	r3, r3, #1
 8001140:	fa02 f303 	lsl.w	r3, r2, r3
 8001144:	69ba      	ldr	r2, [r7, #24]
 8001146:	4313      	orrs	r3, r2
 8001148:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	69ba      	ldr	r2, [r7, #24]
 800114e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001150:	683b      	ldr	r3, [r7, #0]
 8001152:	685b      	ldr	r3, [r3, #4]
 8001154:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001158:	2b00      	cmp	r3, #0
 800115a:	f000 80a2 	beq.w	80012a2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800115e:	2300      	movs	r3, #0
 8001160:	60fb      	str	r3, [r7, #12]
 8001162:	4b57      	ldr	r3, [pc, #348]	; (80012c0 <HAL_GPIO_Init+0x2e8>)
 8001164:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001166:	4a56      	ldr	r2, [pc, #344]	; (80012c0 <HAL_GPIO_Init+0x2e8>)
 8001168:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800116c:	6453      	str	r3, [r2, #68]	; 0x44
 800116e:	4b54      	ldr	r3, [pc, #336]	; (80012c0 <HAL_GPIO_Init+0x2e8>)
 8001170:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001172:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001176:	60fb      	str	r3, [r7, #12]
 8001178:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800117a:	4a52      	ldr	r2, [pc, #328]	; (80012c4 <HAL_GPIO_Init+0x2ec>)
 800117c:	69fb      	ldr	r3, [r7, #28]
 800117e:	089b      	lsrs	r3, r3, #2
 8001180:	3302      	adds	r3, #2
 8001182:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001186:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001188:	69fb      	ldr	r3, [r7, #28]
 800118a:	f003 0303 	and.w	r3, r3, #3
 800118e:	009b      	lsls	r3, r3, #2
 8001190:	220f      	movs	r2, #15
 8001192:	fa02 f303 	lsl.w	r3, r2, r3
 8001196:	43db      	mvns	r3, r3
 8001198:	69ba      	ldr	r2, [r7, #24]
 800119a:	4013      	ands	r3, r2
 800119c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	4a49      	ldr	r2, [pc, #292]	; (80012c8 <HAL_GPIO_Init+0x2f0>)
 80011a2:	4293      	cmp	r3, r2
 80011a4:	d019      	beq.n	80011da <HAL_GPIO_Init+0x202>
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	4a48      	ldr	r2, [pc, #288]	; (80012cc <HAL_GPIO_Init+0x2f4>)
 80011aa:	4293      	cmp	r3, r2
 80011ac:	d013      	beq.n	80011d6 <HAL_GPIO_Init+0x1fe>
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	4a47      	ldr	r2, [pc, #284]	; (80012d0 <HAL_GPIO_Init+0x2f8>)
 80011b2:	4293      	cmp	r3, r2
 80011b4:	d00d      	beq.n	80011d2 <HAL_GPIO_Init+0x1fa>
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	4a46      	ldr	r2, [pc, #280]	; (80012d4 <HAL_GPIO_Init+0x2fc>)
 80011ba:	4293      	cmp	r3, r2
 80011bc:	d007      	beq.n	80011ce <HAL_GPIO_Init+0x1f6>
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	4a45      	ldr	r2, [pc, #276]	; (80012d8 <HAL_GPIO_Init+0x300>)
 80011c2:	4293      	cmp	r3, r2
 80011c4:	d101      	bne.n	80011ca <HAL_GPIO_Init+0x1f2>
 80011c6:	2304      	movs	r3, #4
 80011c8:	e008      	b.n	80011dc <HAL_GPIO_Init+0x204>
 80011ca:	2307      	movs	r3, #7
 80011cc:	e006      	b.n	80011dc <HAL_GPIO_Init+0x204>
 80011ce:	2303      	movs	r3, #3
 80011d0:	e004      	b.n	80011dc <HAL_GPIO_Init+0x204>
 80011d2:	2302      	movs	r3, #2
 80011d4:	e002      	b.n	80011dc <HAL_GPIO_Init+0x204>
 80011d6:	2301      	movs	r3, #1
 80011d8:	e000      	b.n	80011dc <HAL_GPIO_Init+0x204>
 80011da:	2300      	movs	r3, #0
 80011dc:	69fa      	ldr	r2, [r7, #28]
 80011de:	f002 0203 	and.w	r2, r2, #3
 80011e2:	0092      	lsls	r2, r2, #2
 80011e4:	4093      	lsls	r3, r2
 80011e6:	69ba      	ldr	r2, [r7, #24]
 80011e8:	4313      	orrs	r3, r2
 80011ea:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80011ec:	4935      	ldr	r1, [pc, #212]	; (80012c4 <HAL_GPIO_Init+0x2ec>)
 80011ee:	69fb      	ldr	r3, [r7, #28]
 80011f0:	089b      	lsrs	r3, r3, #2
 80011f2:	3302      	adds	r3, #2
 80011f4:	69ba      	ldr	r2, [r7, #24]
 80011f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80011fa:	4b38      	ldr	r3, [pc, #224]	; (80012dc <HAL_GPIO_Init+0x304>)
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001200:	693b      	ldr	r3, [r7, #16]
 8001202:	43db      	mvns	r3, r3
 8001204:	69ba      	ldr	r2, [r7, #24]
 8001206:	4013      	ands	r3, r2
 8001208:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800120a:	683b      	ldr	r3, [r7, #0]
 800120c:	685b      	ldr	r3, [r3, #4]
 800120e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001212:	2b00      	cmp	r3, #0
 8001214:	d003      	beq.n	800121e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001216:	69ba      	ldr	r2, [r7, #24]
 8001218:	693b      	ldr	r3, [r7, #16]
 800121a:	4313      	orrs	r3, r2
 800121c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800121e:	4a2f      	ldr	r2, [pc, #188]	; (80012dc <HAL_GPIO_Init+0x304>)
 8001220:	69bb      	ldr	r3, [r7, #24]
 8001222:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001224:	4b2d      	ldr	r3, [pc, #180]	; (80012dc <HAL_GPIO_Init+0x304>)
 8001226:	685b      	ldr	r3, [r3, #4]
 8001228:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800122a:	693b      	ldr	r3, [r7, #16]
 800122c:	43db      	mvns	r3, r3
 800122e:	69ba      	ldr	r2, [r7, #24]
 8001230:	4013      	ands	r3, r2
 8001232:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001234:	683b      	ldr	r3, [r7, #0]
 8001236:	685b      	ldr	r3, [r3, #4]
 8001238:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800123c:	2b00      	cmp	r3, #0
 800123e:	d003      	beq.n	8001248 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001240:	69ba      	ldr	r2, [r7, #24]
 8001242:	693b      	ldr	r3, [r7, #16]
 8001244:	4313      	orrs	r3, r2
 8001246:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001248:	4a24      	ldr	r2, [pc, #144]	; (80012dc <HAL_GPIO_Init+0x304>)
 800124a:	69bb      	ldr	r3, [r7, #24]
 800124c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800124e:	4b23      	ldr	r3, [pc, #140]	; (80012dc <HAL_GPIO_Init+0x304>)
 8001250:	689b      	ldr	r3, [r3, #8]
 8001252:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001254:	693b      	ldr	r3, [r7, #16]
 8001256:	43db      	mvns	r3, r3
 8001258:	69ba      	ldr	r2, [r7, #24]
 800125a:	4013      	ands	r3, r2
 800125c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800125e:	683b      	ldr	r3, [r7, #0]
 8001260:	685b      	ldr	r3, [r3, #4]
 8001262:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001266:	2b00      	cmp	r3, #0
 8001268:	d003      	beq.n	8001272 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800126a:	69ba      	ldr	r2, [r7, #24]
 800126c:	693b      	ldr	r3, [r7, #16]
 800126e:	4313      	orrs	r3, r2
 8001270:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001272:	4a1a      	ldr	r2, [pc, #104]	; (80012dc <HAL_GPIO_Init+0x304>)
 8001274:	69bb      	ldr	r3, [r7, #24]
 8001276:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001278:	4b18      	ldr	r3, [pc, #96]	; (80012dc <HAL_GPIO_Init+0x304>)
 800127a:	68db      	ldr	r3, [r3, #12]
 800127c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800127e:	693b      	ldr	r3, [r7, #16]
 8001280:	43db      	mvns	r3, r3
 8001282:	69ba      	ldr	r2, [r7, #24]
 8001284:	4013      	ands	r3, r2
 8001286:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001288:	683b      	ldr	r3, [r7, #0]
 800128a:	685b      	ldr	r3, [r3, #4]
 800128c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001290:	2b00      	cmp	r3, #0
 8001292:	d003      	beq.n	800129c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001294:	69ba      	ldr	r2, [r7, #24]
 8001296:	693b      	ldr	r3, [r7, #16]
 8001298:	4313      	orrs	r3, r2
 800129a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800129c:	4a0f      	ldr	r2, [pc, #60]	; (80012dc <HAL_GPIO_Init+0x304>)
 800129e:	69bb      	ldr	r3, [r7, #24]
 80012a0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80012a2:	69fb      	ldr	r3, [r7, #28]
 80012a4:	3301      	adds	r3, #1
 80012a6:	61fb      	str	r3, [r7, #28]
 80012a8:	69fb      	ldr	r3, [r7, #28]
 80012aa:	2b0f      	cmp	r3, #15
 80012ac:	f67f aea2 	bls.w	8000ff4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80012b0:	bf00      	nop
 80012b2:	bf00      	nop
 80012b4:	3724      	adds	r7, #36	; 0x24
 80012b6:	46bd      	mov	sp, r7
 80012b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012bc:	4770      	bx	lr
 80012be:	bf00      	nop
 80012c0:	40023800 	.word	0x40023800
 80012c4:	40013800 	.word	0x40013800
 80012c8:	40020000 	.word	0x40020000
 80012cc:	40020400 	.word	0x40020400
 80012d0:	40020800 	.word	0x40020800
 80012d4:	40020c00 	.word	0x40020c00
 80012d8:	40021000 	.word	0x40021000
 80012dc:	40013c00 	.word	0x40013c00

080012e0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80012e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80012e2:	b08f      	sub	sp, #60	; 0x3c
 80012e4:	af0a      	add	r7, sp, #40	; 0x28
 80012e6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d101      	bne.n	80012f2 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80012ee:	2301      	movs	r3, #1
 80012f0:	e10f      	b.n	8001512 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 80012fe:	b2db      	uxtb	r3, r3
 8001300:	2b00      	cmp	r3, #0
 8001302:	d106      	bne.n	8001312 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	2200      	movs	r2, #0
 8001308:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800130c:	6878      	ldr	r0, [r7, #4]
 800130e:	f7ff fb79 	bl	8000a04 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	2203      	movs	r2, #3
 8001316:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800131a:	68bb      	ldr	r3, [r7, #8]
 800131c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800131e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001322:	2b00      	cmp	r3, #0
 8001324:	d102      	bne.n	800132c <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	2200      	movs	r2, #0
 800132a:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	4618      	mov	r0, r3
 8001332:	f002 fc66 	bl	8003c02 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	603b      	str	r3, [r7, #0]
 800133c:	687e      	ldr	r6, [r7, #4]
 800133e:	466d      	mov	r5, sp
 8001340:	f106 0410 	add.w	r4, r6, #16
 8001344:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001346:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001348:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800134a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800134c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001350:	e885 0003 	stmia.w	r5, {r0, r1}
 8001354:	1d33      	adds	r3, r6, #4
 8001356:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001358:	6838      	ldr	r0, [r7, #0]
 800135a:	f002 fb3d 	bl	80039d8 <USB_CoreInit>
 800135e:	4603      	mov	r3, r0
 8001360:	2b00      	cmp	r3, #0
 8001362:	d005      	beq.n	8001370 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	2202      	movs	r2, #2
 8001368:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800136c:	2301      	movs	r3, #1
 800136e:	e0d0      	b.n	8001512 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	2100      	movs	r1, #0
 8001376:	4618      	mov	r0, r3
 8001378:	f002 fc54 	bl	8003c24 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800137c:	2300      	movs	r3, #0
 800137e:	73fb      	strb	r3, [r7, #15]
 8001380:	e04a      	b.n	8001418 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001382:	7bfa      	ldrb	r2, [r7, #15]
 8001384:	6879      	ldr	r1, [r7, #4]
 8001386:	4613      	mov	r3, r2
 8001388:	00db      	lsls	r3, r3, #3
 800138a:	1a9b      	subs	r3, r3, r2
 800138c:	009b      	lsls	r3, r3, #2
 800138e:	440b      	add	r3, r1
 8001390:	333d      	adds	r3, #61	; 0x3d
 8001392:	2201      	movs	r2, #1
 8001394:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001396:	7bfa      	ldrb	r2, [r7, #15]
 8001398:	6879      	ldr	r1, [r7, #4]
 800139a:	4613      	mov	r3, r2
 800139c:	00db      	lsls	r3, r3, #3
 800139e:	1a9b      	subs	r3, r3, r2
 80013a0:	009b      	lsls	r3, r3, #2
 80013a2:	440b      	add	r3, r1
 80013a4:	333c      	adds	r3, #60	; 0x3c
 80013a6:	7bfa      	ldrb	r2, [r7, #15]
 80013a8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80013aa:	7bfa      	ldrb	r2, [r7, #15]
 80013ac:	7bfb      	ldrb	r3, [r7, #15]
 80013ae:	b298      	uxth	r0, r3
 80013b0:	6879      	ldr	r1, [r7, #4]
 80013b2:	4613      	mov	r3, r2
 80013b4:	00db      	lsls	r3, r3, #3
 80013b6:	1a9b      	subs	r3, r3, r2
 80013b8:	009b      	lsls	r3, r3, #2
 80013ba:	440b      	add	r3, r1
 80013bc:	3342      	adds	r3, #66	; 0x42
 80013be:	4602      	mov	r2, r0
 80013c0:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80013c2:	7bfa      	ldrb	r2, [r7, #15]
 80013c4:	6879      	ldr	r1, [r7, #4]
 80013c6:	4613      	mov	r3, r2
 80013c8:	00db      	lsls	r3, r3, #3
 80013ca:	1a9b      	subs	r3, r3, r2
 80013cc:	009b      	lsls	r3, r3, #2
 80013ce:	440b      	add	r3, r1
 80013d0:	333f      	adds	r3, #63	; 0x3f
 80013d2:	2200      	movs	r2, #0
 80013d4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80013d6:	7bfa      	ldrb	r2, [r7, #15]
 80013d8:	6879      	ldr	r1, [r7, #4]
 80013da:	4613      	mov	r3, r2
 80013dc:	00db      	lsls	r3, r3, #3
 80013de:	1a9b      	subs	r3, r3, r2
 80013e0:	009b      	lsls	r3, r3, #2
 80013e2:	440b      	add	r3, r1
 80013e4:	3344      	adds	r3, #68	; 0x44
 80013e6:	2200      	movs	r2, #0
 80013e8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80013ea:	7bfa      	ldrb	r2, [r7, #15]
 80013ec:	6879      	ldr	r1, [r7, #4]
 80013ee:	4613      	mov	r3, r2
 80013f0:	00db      	lsls	r3, r3, #3
 80013f2:	1a9b      	subs	r3, r3, r2
 80013f4:	009b      	lsls	r3, r3, #2
 80013f6:	440b      	add	r3, r1
 80013f8:	3348      	adds	r3, #72	; 0x48
 80013fa:	2200      	movs	r2, #0
 80013fc:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80013fe:	7bfa      	ldrb	r2, [r7, #15]
 8001400:	6879      	ldr	r1, [r7, #4]
 8001402:	4613      	mov	r3, r2
 8001404:	00db      	lsls	r3, r3, #3
 8001406:	1a9b      	subs	r3, r3, r2
 8001408:	009b      	lsls	r3, r3, #2
 800140a:	440b      	add	r3, r1
 800140c:	3350      	adds	r3, #80	; 0x50
 800140e:	2200      	movs	r2, #0
 8001410:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001412:	7bfb      	ldrb	r3, [r7, #15]
 8001414:	3301      	adds	r3, #1
 8001416:	73fb      	strb	r3, [r7, #15]
 8001418:	7bfa      	ldrb	r2, [r7, #15]
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	685b      	ldr	r3, [r3, #4]
 800141e:	429a      	cmp	r2, r3
 8001420:	d3af      	bcc.n	8001382 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001422:	2300      	movs	r3, #0
 8001424:	73fb      	strb	r3, [r7, #15]
 8001426:	e044      	b.n	80014b2 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001428:	7bfa      	ldrb	r2, [r7, #15]
 800142a:	6879      	ldr	r1, [r7, #4]
 800142c:	4613      	mov	r3, r2
 800142e:	00db      	lsls	r3, r3, #3
 8001430:	1a9b      	subs	r3, r3, r2
 8001432:	009b      	lsls	r3, r3, #2
 8001434:	440b      	add	r3, r1
 8001436:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 800143a:	2200      	movs	r2, #0
 800143c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800143e:	7bfa      	ldrb	r2, [r7, #15]
 8001440:	6879      	ldr	r1, [r7, #4]
 8001442:	4613      	mov	r3, r2
 8001444:	00db      	lsls	r3, r3, #3
 8001446:	1a9b      	subs	r3, r3, r2
 8001448:	009b      	lsls	r3, r3, #2
 800144a:	440b      	add	r3, r1
 800144c:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8001450:	7bfa      	ldrb	r2, [r7, #15]
 8001452:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001454:	7bfa      	ldrb	r2, [r7, #15]
 8001456:	6879      	ldr	r1, [r7, #4]
 8001458:	4613      	mov	r3, r2
 800145a:	00db      	lsls	r3, r3, #3
 800145c:	1a9b      	subs	r3, r3, r2
 800145e:	009b      	lsls	r3, r3, #2
 8001460:	440b      	add	r3, r1
 8001462:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8001466:	2200      	movs	r2, #0
 8001468:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800146a:	7bfa      	ldrb	r2, [r7, #15]
 800146c:	6879      	ldr	r1, [r7, #4]
 800146e:	4613      	mov	r3, r2
 8001470:	00db      	lsls	r3, r3, #3
 8001472:	1a9b      	subs	r3, r3, r2
 8001474:	009b      	lsls	r3, r3, #2
 8001476:	440b      	add	r3, r1
 8001478:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800147c:	2200      	movs	r2, #0
 800147e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001480:	7bfa      	ldrb	r2, [r7, #15]
 8001482:	6879      	ldr	r1, [r7, #4]
 8001484:	4613      	mov	r3, r2
 8001486:	00db      	lsls	r3, r3, #3
 8001488:	1a9b      	subs	r3, r3, r2
 800148a:	009b      	lsls	r3, r3, #2
 800148c:	440b      	add	r3, r1
 800148e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001492:	2200      	movs	r2, #0
 8001494:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001496:	7bfa      	ldrb	r2, [r7, #15]
 8001498:	6879      	ldr	r1, [r7, #4]
 800149a:	4613      	mov	r3, r2
 800149c:	00db      	lsls	r3, r3, #3
 800149e:	1a9b      	subs	r3, r3, r2
 80014a0:	009b      	lsls	r3, r3, #2
 80014a2:	440b      	add	r3, r1
 80014a4:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80014a8:	2200      	movs	r2, #0
 80014aa:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80014ac:	7bfb      	ldrb	r3, [r7, #15]
 80014ae:	3301      	adds	r3, #1
 80014b0:	73fb      	strb	r3, [r7, #15]
 80014b2:	7bfa      	ldrb	r2, [r7, #15]
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	685b      	ldr	r3, [r3, #4]
 80014b8:	429a      	cmp	r2, r3
 80014ba:	d3b5      	bcc.n	8001428 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	603b      	str	r3, [r7, #0]
 80014c2:	687e      	ldr	r6, [r7, #4]
 80014c4:	466d      	mov	r5, sp
 80014c6:	f106 0410 	add.w	r4, r6, #16
 80014ca:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80014cc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80014ce:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80014d0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80014d2:	e894 0003 	ldmia.w	r4, {r0, r1}
 80014d6:	e885 0003 	stmia.w	r5, {r0, r1}
 80014da:	1d33      	adds	r3, r6, #4
 80014dc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80014de:	6838      	ldr	r0, [r7, #0]
 80014e0:	f002 fbec 	bl	8003cbc <USB_DevInit>
 80014e4:	4603      	mov	r3, r0
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d005      	beq.n	80014f6 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	2202      	movs	r2, #2
 80014ee:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80014f2:	2301      	movs	r3, #1
 80014f4:	e00d      	b.n	8001512 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	2200      	movs	r2, #0
 80014fa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	2201      	movs	r2, #1
 8001502:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	4618      	mov	r0, r3
 800150c:	f003 fc68 	bl	8004de0 <USB_DevDisconnect>

  return HAL_OK;
 8001510:	2300      	movs	r3, #0
}
 8001512:	4618      	mov	r0, r3
 8001514:	3714      	adds	r7, #20
 8001516:	46bd      	mov	sp, r7
 8001518:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800151a <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800151a:	b580      	push	{r7, lr}
 800151c:	b084      	sub	sp, #16
 800151e:	af00      	add	r7, sp, #0
 8001520:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800152e:	2b01      	cmp	r3, #1
 8001530:	d101      	bne.n	8001536 <HAL_PCD_Start+0x1c>
 8001532:	2302      	movs	r3, #2
 8001534:	e020      	b.n	8001578 <HAL_PCD_Start+0x5e>
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	2201      	movs	r2, #1
 800153a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001542:	2b01      	cmp	r3, #1
 8001544:	d109      	bne.n	800155a <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800154a:	2b01      	cmp	r3, #1
 800154c:	d005      	beq.n	800155a <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800154e:	68fb      	ldr	r3, [r7, #12]
 8001550:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001552:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001556:	68fb      	ldr	r3, [r7, #12]
 8001558:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	4618      	mov	r0, r3
 8001560:	f002 fb3e 	bl	8003be0 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	4618      	mov	r0, r3
 800156a:	f003 fc18 	bl	8004d9e <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	2200      	movs	r2, #0
 8001572:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8001576:	2300      	movs	r3, #0
}
 8001578:	4618      	mov	r0, r3
 800157a:	3710      	adds	r7, #16
 800157c:	46bd      	mov	sp, r7
 800157e:	bd80      	pop	{r7, pc}

08001580 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001580:	b590      	push	{r4, r7, lr}
 8001582:	b08d      	sub	sp, #52	; 0x34
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800158e:	6a3b      	ldr	r3, [r7, #32]
 8001590:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t temp;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	4618      	mov	r0, r3
 8001598:	f003 fcd6 	bl	8004f48 <USB_GetMode>
 800159c:	4603      	mov	r3, r0
 800159e:	2b00      	cmp	r3, #0
 80015a0:	f040 839d 	bne.w	8001cde <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	4618      	mov	r0, r3
 80015aa:	f003 fc3a 	bl	8004e22 <USB_ReadInterrupts>
 80015ae:	4603      	mov	r3, r0
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	f000 8393 	beq.w	8001cdc <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	4618      	mov	r0, r3
 80015bc:	f003 fc31 	bl	8004e22 <USB_ReadInterrupts>
 80015c0:	4603      	mov	r3, r0
 80015c2:	f003 0302 	and.w	r3, r3, #2
 80015c6:	2b02      	cmp	r3, #2
 80015c8:	d107      	bne.n	80015da <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	695a      	ldr	r2, [r3, #20]
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	f002 0202 	and.w	r2, r2, #2
 80015d8:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	4618      	mov	r0, r3
 80015e0:	f003 fc1f 	bl	8004e22 <USB_ReadInterrupts>
 80015e4:	4603      	mov	r3, r0
 80015e6:	f003 0310 	and.w	r3, r3, #16
 80015ea:	2b10      	cmp	r3, #16
 80015ec:	d161      	bne.n	80016b2 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	699a      	ldr	r2, [r3, #24]
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	f022 0210 	bic.w	r2, r2, #16
 80015fc:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 80015fe:	6a3b      	ldr	r3, [r7, #32]
 8001600:	6a1b      	ldr	r3, [r3, #32]
 8001602:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8001604:	69bb      	ldr	r3, [r7, #24]
 8001606:	f003 020f 	and.w	r2, r3, #15
 800160a:	4613      	mov	r3, r2
 800160c:	00db      	lsls	r3, r3, #3
 800160e:	1a9b      	subs	r3, r3, r2
 8001610:	009b      	lsls	r3, r3, #2
 8001612:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001616:	687a      	ldr	r2, [r7, #4]
 8001618:	4413      	add	r3, r2
 800161a:	3304      	adds	r3, #4
 800161c:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800161e:	69bb      	ldr	r3, [r7, #24]
 8001620:	0c5b      	lsrs	r3, r3, #17
 8001622:	f003 030f 	and.w	r3, r3, #15
 8001626:	2b02      	cmp	r3, #2
 8001628:	d124      	bne.n	8001674 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 800162a:	69ba      	ldr	r2, [r7, #24]
 800162c:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8001630:	4013      	ands	r3, r2
 8001632:	2b00      	cmp	r3, #0
 8001634:	d035      	beq.n	80016a2 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001636:	697b      	ldr	r3, [r7, #20]
 8001638:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 800163a:	69bb      	ldr	r3, [r7, #24]
 800163c:	091b      	lsrs	r3, r3, #4
 800163e:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001640:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001644:	b29b      	uxth	r3, r3
 8001646:	461a      	mov	r2, r3
 8001648:	6a38      	ldr	r0, [r7, #32]
 800164a:	f003 fa56 	bl	8004afa <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800164e:	697b      	ldr	r3, [r7, #20]
 8001650:	68da      	ldr	r2, [r3, #12]
 8001652:	69bb      	ldr	r3, [r7, #24]
 8001654:	091b      	lsrs	r3, r3, #4
 8001656:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800165a:	441a      	add	r2, r3
 800165c:	697b      	ldr	r3, [r7, #20]
 800165e:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001660:	697b      	ldr	r3, [r7, #20]
 8001662:	699a      	ldr	r2, [r3, #24]
 8001664:	69bb      	ldr	r3, [r7, #24]
 8001666:	091b      	lsrs	r3, r3, #4
 8001668:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800166c:	441a      	add	r2, r3
 800166e:	697b      	ldr	r3, [r7, #20]
 8001670:	619a      	str	r2, [r3, #24]
 8001672:	e016      	b.n	80016a2 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8001674:	69bb      	ldr	r3, [r7, #24]
 8001676:	0c5b      	lsrs	r3, r3, #17
 8001678:	f003 030f 	and.w	r3, r3, #15
 800167c:	2b06      	cmp	r3, #6
 800167e:	d110      	bne.n	80016a2 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001686:	2208      	movs	r2, #8
 8001688:	4619      	mov	r1, r3
 800168a:	6a38      	ldr	r0, [r7, #32]
 800168c:	f003 fa35 	bl	8004afa <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001690:	697b      	ldr	r3, [r7, #20]
 8001692:	699a      	ldr	r2, [r3, #24]
 8001694:	69bb      	ldr	r3, [r7, #24]
 8001696:	091b      	lsrs	r3, r3, #4
 8001698:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800169c:	441a      	add	r2, r3
 800169e:	697b      	ldr	r3, [r7, #20]
 80016a0:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	699a      	ldr	r2, [r3, #24]
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	f042 0210 	orr.w	r2, r2, #16
 80016b0:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	4618      	mov	r0, r3
 80016b8:	f003 fbb3 	bl	8004e22 <USB_ReadInterrupts>
 80016bc:	4603      	mov	r3, r0
 80016be:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80016c2:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80016c6:	d16e      	bne.n	80017a6 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 80016c8:	2300      	movs	r3, #0
 80016ca:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	4618      	mov	r0, r3
 80016d2:	f003 fbb9 	bl	8004e48 <USB_ReadDevAllOutEpInterrupt>
 80016d6:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80016d8:	e062      	b.n	80017a0 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 80016da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80016dc:	f003 0301 	and.w	r3, r3, #1
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d057      	beq.n	8001794 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80016ea:	b2d2      	uxtb	r2, r2
 80016ec:	4611      	mov	r1, r2
 80016ee:	4618      	mov	r0, r3
 80016f0:	f003 fbde 	bl	8004eb0 <USB_ReadDevOutEPInterrupt>
 80016f4:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80016f6:	693b      	ldr	r3, [r7, #16]
 80016f8:	f003 0301 	and.w	r3, r3, #1
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d00c      	beq.n	800171a <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8001700:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001702:	015a      	lsls	r2, r3, #5
 8001704:	69fb      	ldr	r3, [r7, #28]
 8001706:	4413      	add	r3, r2
 8001708:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800170c:	461a      	mov	r2, r3
 800170e:	2301      	movs	r3, #1
 8001710:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8001712:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001714:	6878      	ldr	r0, [r7, #4]
 8001716:	f000 fd99 	bl	800224c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800171a:	693b      	ldr	r3, [r7, #16]
 800171c:	f003 0308 	and.w	r3, r3, #8
 8001720:	2b00      	cmp	r3, #0
 8001722:	d00c      	beq.n	800173e <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8001724:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001726:	015a      	lsls	r2, r3, #5
 8001728:	69fb      	ldr	r3, [r7, #28]
 800172a:	4413      	add	r3, r2
 800172c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001730:	461a      	mov	r2, r3
 8001732:	2308      	movs	r3, #8
 8001734:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8001736:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001738:	6878      	ldr	r0, [r7, #4]
 800173a:	f000 fe93 	bl	8002464 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800173e:	693b      	ldr	r3, [r7, #16]
 8001740:	f003 0310 	and.w	r3, r3, #16
 8001744:	2b00      	cmp	r3, #0
 8001746:	d008      	beq.n	800175a <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8001748:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800174a:	015a      	lsls	r2, r3, #5
 800174c:	69fb      	ldr	r3, [r7, #28]
 800174e:	4413      	add	r3, r2
 8001750:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001754:	461a      	mov	r2, r3
 8001756:	2310      	movs	r3, #16
 8001758:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800175a:	693b      	ldr	r3, [r7, #16]
 800175c:	f003 0320 	and.w	r3, r3, #32
 8001760:	2b00      	cmp	r3, #0
 8001762:	d008      	beq.n	8001776 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001764:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001766:	015a      	lsls	r2, r3, #5
 8001768:	69fb      	ldr	r3, [r7, #28]
 800176a:	4413      	add	r3, r2
 800176c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001770:	461a      	mov	r2, r3
 8001772:	2320      	movs	r3, #32
 8001774:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8001776:	693b      	ldr	r3, [r7, #16]
 8001778:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800177c:	2b00      	cmp	r3, #0
 800177e:	d009      	beq.n	8001794 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8001780:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001782:	015a      	lsls	r2, r3, #5
 8001784:	69fb      	ldr	r3, [r7, #28]
 8001786:	4413      	add	r3, r2
 8001788:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800178c:	461a      	mov	r2, r3
 800178e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001792:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8001794:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001796:	3301      	adds	r3, #1
 8001798:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800179a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800179c:	085b      	lsrs	r3, r3, #1
 800179e:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80017a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d199      	bne.n	80016da <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	4618      	mov	r0, r3
 80017ac:	f003 fb39 	bl	8004e22 <USB_ReadInterrupts>
 80017b0:	4603      	mov	r3, r0
 80017b2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80017b6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80017ba:	f040 80c0 	bne.w	800193e <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	4618      	mov	r0, r3
 80017c4:	f003 fb5a 	bl	8004e7c <USB_ReadDevAllInEpInterrupt>
 80017c8:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80017ca:	2300      	movs	r3, #0
 80017cc:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80017ce:	e0b2      	b.n	8001936 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80017d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80017d2:	f003 0301 	and.w	r3, r3, #1
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	f000 80a7 	beq.w	800192a <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80017e2:	b2d2      	uxtb	r2, r2
 80017e4:	4611      	mov	r1, r2
 80017e6:	4618      	mov	r0, r3
 80017e8:	f003 fb80 	bl	8004eec <USB_ReadDevInEPInterrupt>
 80017ec:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80017ee:	693b      	ldr	r3, [r7, #16]
 80017f0:	f003 0301 	and.w	r3, r3, #1
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d057      	beq.n	80018a8 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80017f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017fa:	f003 030f 	and.w	r3, r3, #15
 80017fe:	2201      	movs	r2, #1
 8001800:	fa02 f303 	lsl.w	r3, r2, r3
 8001804:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001806:	69fb      	ldr	r3, [r7, #28]
 8001808:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800180c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	43db      	mvns	r3, r3
 8001812:	69f9      	ldr	r1, [r7, #28]
 8001814:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8001818:	4013      	ands	r3, r2
 800181a:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800181c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800181e:	015a      	lsls	r2, r3, #5
 8001820:	69fb      	ldr	r3, [r7, #28]
 8001822:	4413      	add	r3, r2
 8001824:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001828:	461a      	mov	r2, r3
 800182a:	2301      	movs	r3, #1
 800182c:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	691b      	ldr	r3, [r3, #16]
 8001832:	2b01      	cmp	r3, #1
 8001834:	d132      	bne.n	800189c <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8001836:	6879      	ldr	r1, [r7, #4]
 8001838:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800183a:	4613      	mov	r3, r2
 800183c:	00db      	lsls	r3, r3, #3
 800183e:	1a9b      	subs	r3, r3, r2
 8001840:	009b      	lsls	r3, r3, #2
 8001842:	440b      	add	r3, r1
 8001844:	3348      	adds	r3, #72	; 0x48
 8001846:	6819      	ldr	r1, [r3, #0]
 8001848:	6878      	ldr	r0, [r7, #4]
 800184a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800184c:	4613      	mov	r3, r2
 800184e:	00db      	lsls	r3, r3, #3
 8001850:	1a9b      	subs	r3, r3, r2
 8001852:	009b      	lsls	r3, r3, #2
 8001854:	4403      	add	r3, r0
 8001856:	3344      	adds	r3, #68	; 0x44
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	4419      	add	r1, r3
 800185c:	6878      	ldr	r0, [r7, #4]
 800185e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001860:	4613      	mov	r3, r2
 8001862:	00db      	lsls	r3, r3, #3
 8001864:	1a9b      	subs	r3, r3, r2
 8001866:	009b      	lsls	r3, r3, #2
 8001868:	4403      	add	r3, r0
 800186a:	3348      	adds	r3, #72	; 0x48
 800186c:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800186e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001870:	2b00      	cmp	r3, #0
 8001872:	d113      	bne.n	800189c <HAL_PCD_IRQHandler+0x31c>
 8001874:	6879      	ldr	r1, [r7, #4]
 8001876:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001878:	4613      	mov	r3, r2
 800187a:	00db      	lsls	r3, r3, #3
 800187c:	1a9b      	subs	r3, r3, r2
 800187e:	009b      	lsls	r3, r3, #2
 8001880:	440b      	add	r3, r1
 8001882:	3350      	adds	r3, #80	; 0x50
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	2b00      	cmp	r3, #0
 8001888:	d108      	bne.n	800189c <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	6818      	ldr	r0, [r3, #0]
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001894:	461a      	mov	r2, r3
 8001896:	2101      	movs	r1, #1
 8001898:	f003 fb88 	bl	8004fac <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800189c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800189e:	b2db      	uxtb	r3, r3
 80018a0:	4619      	mov	r1, r3
 80018a2:	6878      	ldr	r0, [r7, #4]
 80018a4:	f004 ff6f 	bl	8006786 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80018a8:	693b      	ldr	r3, [r7, #16]
 80018aa:	f003 0308 	and.w	r3, r3, #8
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d008      	beq.n	80018c4 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80018b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018b4:	015a      	lsls	r2, r3, #5
 80018b6:	69fb      	ldr	r3, [r7, #28]
 80018b8:	4413      	add	r3, r2
 80018ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80018be:	461a      	mov	r2, r3
 80018c0:	2308      	movs	r3, #8
 80018c2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80018c4:	693b      	ldr	r3, [r7, #16]
 80018c6:	f003 0310 	and.w	r3, r3, #16
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d008      	beq.n	80018e0 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80018ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018d0:	015a      	lsls	r2, r3, #5
 80018d2:	69fb      	ldr	r3, [r7, #28]
 80018d4:	4413      	add	r3, r2
 80018d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80018da:	461a      	mov	r2, r3
 80018dc:	2310      	movs	r3, #16
 80018de:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80018e0:	693b      	ldr	r3, [r7, #16]
 80018e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d008      	beq.n	80018fc <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80018ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018ec:	015a      	lsls	r2, r3, #5
 80018ee:	69fb      	ldr	r3, [r7, #28]
 80018f0:	4413      	add	r3, r2
 80018f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80018f6:	461a      	mov	r2, r3
 80018f8:	2340      	movs	r3, #64	; 0x40
 80018fa:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80018fc:	693b      	ldr	r3, [r7, #16]
 80018fe:	f003 0302 	and.w	r3, r3, #2
 8001902:	2b00      	cmp	r3, #0
 8001904:	d008      	beq.n	8001918 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8001906:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001908:	015a      	lsls	r2, r3, #5
 800190a:	69fb      	ldr	r3, [r7, #28]
 800190c:	4413      	add	r3, r2
 800190e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001912:	461a      	mov	r2, r3
 8001914:	2302      	movs	r3, #2
 8001916:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8001918:	693b      	ldr	r3, [r7, #16]
 800191a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800191e:	2b00      	cmp	r3, #0
 8001920:	d003      	beq.n	800192a <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8001922:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001924:	6878      	ldr	r0, [r7, #4]
 8001926:	f000 fc03 	bl	8002130 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800192a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800192c:	3301      	adds	r3, #1
 800192e:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001930:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001932:	085b      	lsrs	r3, r3, #1
 8001934:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001936:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001938:	2b00      	cmp	r3, #0
 800193a:	f47f af49 	bne.w	80017d0 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	4618      	mov	r0, r3
 8001944:	f003 fa6d 	bl	8004e22 <USB_ReadInterrupts>
 8001948:	4603      	mov	r3, r0
 800194a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800194e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001952:	d122      	bne.n	800199a <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001954:	69fb      	ldr	r3, [r7, #28]
 8001956:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800195a:	685b      	ldr	r3, [r3, #4]
 800195c:	69fa      	ldr	r2, [r7, #28]
 800195e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001962:	f023 0301 	bic.w	r3, r3, #1
 8001966:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 800196e:	2b01      	cmp	r3, #1
 8001970:	d108      	bne.n	8001984 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	2200      	movs	r2, #0
 8001976:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800197a:	2100      	movs	r1, #0
 800197c:	6878      	ldr	r0, [r7, #4]
 800197e:	f000 fe0f 	bl	80025a0 <HAL_PCDEx_LPM_Callback>
 8001982:	e002      	b.n	800198a <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8001984:	6878      	ldr	r0, [r7, #4]
 8001986:	f004 ff6b 	bl	8006860 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	695a      	ldr	r2, [r3, #20]
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8001998:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	4618      	mov	r0, r3
 80019a0:	f003 fa3f 	bl	8004e22 <USB_ReadInterrupts>
 80019a4:	4603      	mov	r3, r0
 80019a6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80019aa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80019ae:	d112      	bne.n	80019d6 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80019b0:	69fb      	ldr	r3, [r7, #28]
 80019b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80019b6:	689b      	ldr	r3, [r3, #8]
 80019b8:	f003 0301 	and.w	r3, r3, #1
 80019bc:	2b01      	cmp	r3, #1
 80019be:	d102      	bne.n	80019c6 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80019c0:	6878      	ldr	r0, [r7, #4]
 80019c2:	f004 ff27 	bl	8006814 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	695a      	ldr	r2, [r3, #20]
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80019d4:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	4618      	mov	r0, r3
 80019dc:	f003 fa21 	bl	8004e22 <USB_ReadInterrupts>
 80019e0:	4603      	mov	r3, r0
 80019e2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80019e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80019ea:	f040 80c7 	bne.w	8001b7c <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80019ee:	69fb      	ldr	r3, [r7, #28]
 80019f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80019f4:	685b      	ldr	r3, [r3, #4]
 80019f6:	69fa      	ldr	r2, [r7, #28]
 80019f8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80019fc:	f023 0301 	bic.w	r3, r3, #1
 8001a00:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	2110      	movs	r1, #16
 8001a08:	4618      	mov	r0, r3
 8001a0a:	f002 fabb 	bl	8003f84 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001a0e:	2300      	movs	r3, #0
 8001a10:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001a12:	e056      	b.n	8001ac2 <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8001a14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a16:	015a      	lsls	r2, r3, #5
 8001a18:	69fb      	ldr	r3, [r7, #28]
 8001a1a:	4413      	add	r3, r2
 8001a1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001a20:	461a      	mov	r2, r3
 8001a22:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001a26:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8001a28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a2a:	015a      	lsls	r2, r3, #5
 8001a2c:	69fb      	ldr	r3, [r7, #28]
 8001a2e:	4413      	add	r3, r2
 8001a30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001a38:	0151      	lsls	r1, r2, #5
 8001a3a:	69fa      	ldr	r2, [r7, #28]
 8001a3c:	440a      	add	r2, r1
 8001a3e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8001a42:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001a46:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8001a48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a4a:	015a      	lsls	r2, r3, #5
 8001a4c:	69fb      	ldr	r3, [r7, #28]
 8001a4e:	4413      	add	r3, r2
 8001a50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001a58:	0151      	lsls	r1, r2, #5
 8001a5a:	69fa      	ldr	r2, [r7, #28]
 8001a5c:	440a      	add	r2, r1
 8001a5e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8001a62:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001a66:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8001a68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a6a:	015a      	lsls	r2, r3, #5
 8001a6c:	69fb      	ldr	r3, [r7, #28]
 8001a6e:	4413      	add	r3, r2
 8001a70:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001a74:	461a      	mov	r2, r3
 8001a76:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001a7a:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8001a7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a7e:	015a      	lsls	r2, r3, #5
 8001a80:	69fb      	ldr	r3, [r7, #28]
 8001a82:	4413      	add	r3, r2
 8001a84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001a8c:	0151      	lsls	r1, r2, #5
 8001a8e:	69fa      	ldr	r2, [r7, #28]
 8001a90:	440a      	add	r2, r1
 8001a92:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001a96:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001a9a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8001a9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a9e:	015a      	lsls	r2, r3, #5
 8001aa0:	69fb      	ldr	r3, [r7, #28]
 8001aa2:	4413      	add	r3, r2
 8001aa4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001aac:	0151      	lsls	r1, r2, #5
 8001aae:	69fa      	ldr	r2, [r7, #28]
 8001ab0:	440a      	add	r2, r1
 8001ab2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001ab6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001aba:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001abc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001abe:	3301      	adds	r3, #1
 8001ac0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	685b      	ldr	r3, [r3, #4]
 8001ac6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001ac8:	429a      	cmp	r2, r3
 8001aca:	d3a3      	bcc.n	8001a14 <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8001acc:	69fb      	ldr	r3, [r7, #28]
 8001ace:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001ad2:	69db      	ldr	r3, [r3, #28]
 8001ad4:	69fa      	ldr	r2, [r7, #28]
 8001ad6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001ada:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8001ade:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d016      	beq.n	8001b16 <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8001ae8:	69fb      	ldr	r3, [r7, #28]
 8001aea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001aee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001af2:	69fa      	ldr	r2, [r7, #28]
 8001af4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001af8:	f043 030b 	orr.w	r3, r3, #11
 8001afc:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8001b00:	69fb      	ldr	r3, [r7, #28]
 8001b02:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001b06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b08:	69fa      	ldr	r2, [r7, #28]
 8001b0a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001b0e:	f043 030b 	orr.w	r3, r3, #11
 8001b12:	6453      	str	r3, [r2, #68]	; 0x44
 8001b14:	e015      	b.n	8001b42 <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8001b16:	69fb      	ldr	r3, [r7, #28]
 8001b18:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001b1c:	695b      	ldr	r3, [r3, #20]
 8001b1e:	69fa      	ldr	r2, [r7, #28]
 8001b20:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001b24:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001b28:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8001b2c:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8001b2e:	69fb      	ldr	r3, [r7, #28]
 8001b30:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001b34:	691b      	ldr	r3, [r3, #16]
 8001b36:	69fa      	ldr	r2, [r7, #28]
 8001b38:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001b3c:	f043 030b 	orr.w	r3, r3, #11
 8001b40:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8001b42:	69fb      	ldr	r3, [r7, #28]
 8001b44:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	69fa      	ldr	r2, [r7, #28]
 8001b4c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001b50:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8001b54:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	6818      	ldr	r0, [r3, #0]
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	691b      	ldr	r3, [r3, #16]
 8001b5e:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001b66:	461a      	mov	r2, r3
 8001b68:	f003 fa20 	bl	8004fac <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	695a      	ldr	r2, [r3, #20]
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8001b7a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	4618      	mov	r0, r3
 8001b82:	f003 f94e 	bl	8004e22 <USB_ReadInterrupts>
 8001b86:	4603      	mov	r3, r0
 8001b88:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001b8c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001b90:	d124      	bne.n	8001bdc <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	4618      	mov	r0, r3
 8001b98:	f003 f9e4 	bl	8004f64 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	f002 fa4c 	bl	800403e <USB_GetDevSpeed>
 8001ba6:	4603      	mov	r3, r0
 8001ba8:	461a      	mov	r2, r3
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681c      	ldr	r4, [r3, #0]
 8001bb2:	f001 f915 	bl	8002de0 <HAL_RCC_GetHCLKFreq>
 8001bb6:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001bbc:	b2db      	uxtb	r3, r3
 8001bbe:	461a      	mov	r2, r3
 8001bc0:	4620      	mov	r0, r4
 8001bc2:	f001 ff6b 	bl	8003a9c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8001bc6:	6878      	ldr	r0, [r7, #4]
 8001bc8:	f004 fe05 	bl	80067d6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	695a      	ldr	r2, [r3, #20]
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8001bda:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	4618      	mov	r0, r3
 8001be2:	f003 f91e 	bl	8004e22 <USB_ReadInterrupts>
 8001be6:	4603      	mov	r3, r0
 8001be8:	f003 0308 	and.w	r3, r3, #8
 8001bec:	2b08      	cmp	r3, #8
 8001bee:	d10a      	bne.n	8001c06 <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8001bf0:	6878      	ldr	r0, [r7, #4]
 8001bf2:	f004 fde2 	bl	80067ba <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	695a      	ldr	r2, [r3, #20]
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	f002 0208 	and.w	r2, r2, #8
 8001c04:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	f003 f909 	bl	8004e22 <USB_ReadInterrupts>
 8001c10:	4603      	mov	r3, r0
 8001c12:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c16:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001c1a:	d10f      	bne.n	8001c3c <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8001c20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c22:	b2db      	uxtb	r3, r3
 8001c24:	4619      	mov	r1, r3
 8001c26:	6878      	ldr	r0, [r7, #4]
 8001c28:	f004 fe3a 	bl	80068a0 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	695a      	ldr	r2, [r3, #20]
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8001c3a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	4618      	mov	r0, r3
 8001c42:	f003 f8ee 	bl	8004e22 <USB_ReadInterrupts>
 8001c46:	4603      	mov	r3, r0
 8001c48:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c4c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001c50:	d10f      	bne.n	8001c72 <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8001c52:	2300      	movs	r3, #0
 8001c54:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8001c56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c58:	b2db      	uxtb	r3, r3
 8001c5a:	4619      	mov	r1, r3
 8001c5c:	6878      	ldr	r0, [r7, #4]
 8001c5e:	f004 fe0d 	bl	800687c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	695a      	ldr	r2, [r3, #20]
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8001c70:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	4618      	mov	r0, r3
 8001c78:	f003 f8d3 	bl	8004e22 <USB_ReadInterrupts>
 8001c7c:	4603      	mov	r3, r0
 8001c7e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001c82:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c86:	d10a      	bne.n	8001c9e <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8001c88:	6878      	ldr	r0, [r7, #4]
 8001c8a:	f004 fe1b 	bl	80068c4 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	695a      	ldr	r2, [r3, #20]
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8001c9c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	f003 f8bd 	bl	8004e22 <USB_ReadInterrupts>
 8001ca8:	4603      	mov	r3, r0
 8001caa:	f003 0304 	and.w	r3, r3, #4
 8001cae:	2b04      	cmp	r3, #4
 8001cb0:	d115      	bne.n	8001cde <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	685b      	ldr	r3, [r3, #4]
 8001cb8:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8001cba:	69bb      	ldr	r3, [r7, #24]
 8001cbc:	f003 0304 	and.w	r3, r3, #4
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d002      	beq.n	8001cca <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8001cc4:	6878      	ldr	r0, [r7, #4]
 8001cc6:	f004 fe0b 	bl	80068e0 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	6859      	ldr	r1, [r3, #4]
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	69ba      	ldr	r2, [r7, #24]
 8001cd6:	430a      	orrs	r2, r1
 8001cd8:	605a      	str	r2, [r3, #4]
 8001cda:	e000      	b.n	8001cde <HAL_PCD_IRQHandler+0x75e>
      return;
 8001cdc:	bf00      	nop
    }
  }
}
 8001cde:	3734      	adds	r7, #52	; 0x34
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	bd90      	pop	{r4, r7, pc}

08001ce4 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b082      	sub	sp, #8
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]
 8001cec:	460b      	mov	r3, r1
 8001cee:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001cf6:	2b01      	cmp	r3, #1
 8001cf8:	d101      	bne.n	8001cfe <HAL_PCD_SetAddress+0x1a>
 8001cfa:	2302      	movs	r3, #2
 8001cfc:	e013      	b.n	8001d26 <HAL_PCD_SetAddress+0x42>
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	2201      	movs	r2, #1
 8001d02:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	78fa      	ldrb	r2, [r7, #3]
 8001d0a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	78fa      	ldrb	r2, [r7, #3]
 8001d14:	4611      	mov	r1, r2
 8001d16:	4618      	mov	r0, r3
 8001d18:	f003 f81b 	bl	8004d52 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	2200      	movs	r2, #0
 8001d20:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8001d24:	2300      	movs	r3, #0
}
 8001d26:	4618      	mov	r0, r3
 8001d28:	3708      	adds	r7, #8
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	bd80      	pop	{r7, pc}

08001d2e <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001d2e:	b580      	push	{r7, lr}
 8001d30:	b084      	sub	sp, #16
 8001d32:	af00      	add	r7, sp, #0
 8001d34:	6078      	str	r0, [r7, #4]
 8001d36:	4608      	mov	r0, r1
 8001d38:	4611      	mov	r1, r2
 8001d3a:	461a      	mov	r2, r3
 8001d3c:	4603      	mov	r3, r0
 8001d3e:	70fb      	strb	r3, [r7, #3]
 8001d40:	460b      	mov	r3, r1
 8001d42:	803b      	strh	r3, [r7, #0]
 8001d44:	4613      	mov	r3, r2
 8001d46:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001d48:	2300      	movs	r3, #0
 8001d4a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001d4c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	da0f      	bge.n	8001d74 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001d54:	78fb      	ldrb	r3, [r7, #3]
 8001d56:	f003 020f 	and.w	r2, r3, #15
 8001d5a:	4613      	mov	r3, r2
 8001d5c:	00db      	lsls	r3, r3, #3
 8001d5e:	1a9b      	subs	r3, r3, r2
 8001d60:	009b      	lsls	r3, r3, #2
 8001d62:	3338      	adds	r3, #56	; 0x38
 8001d64:	687a      	ldr	r2, [r7, #4]
 8001d66:	4413      	add	r3, r2
 8001d68:	3304      	adds	r3, #4
 8001d6a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	2201      	movs	r2, #1
 8001d70:	705a      	strb	r2, [r3, #1]
 8001d72:	e00f      	b.n	8001d94 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001d74:	78fb      	ldrb	r3, [r7, #3]
 8001d76:	f003 020f 	and.w	r2, r3, #15
 8001d7a:	4613      	mov	r3, r2
 8001d7c:	00db      	lsls	r3, r3, #3
 8001d7e:	1a9b      	subs	r3, r3, r2
 8001d80:	009b      	lsls	r3, r3, #2
 8001d82:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001d86:	687a      	ldr	r2, [r7, #4]
 8001d88:	4413      	add	r3, r2
 8001d8a:	3304      	adds	r3, #4
 8001d8c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	2200      	movs	r2, #0
 8001d92:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001d94:	78fb      	ldrb	r3, [r7, #3]
 8001d96:	f003 030f 	and.w	r3, r3, #15
 8001d9a:	b2da      	uxtb	r2, r3
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001da0:	883a      	ldrh	r2, [r7, #0]
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	78ba      	ldrb	r2, [r7, #2]
 8001daa:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	785b      	ldrb	r3, [r3, #1]
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d004      	beq.n	8001dbe <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	781b      	ldrb	r3, [r3, #0]
 8001db8:	b29a      	uxth	r2, r3
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001dbe:	78bb      	ldrb	r3, [r7, #2]
 8001dc0:	2b02      	cmp	r3, #2
 8001dc2:	d102      	bne.n	8001dca <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001dd0:	2b01      	cmp	r3, #1
 8001dd2:	d101      	bne.n	8001dd8 <HAL_PCD_EP_Open+0xaa>
 8001dd4:	2302      	movs	r3, #2
 8001dd6:	e00e      	b.n	8001df6 <HAL_PCD_EP_Open+0xc8>
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	2201      	movs	r2, #1
 8001ddc:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	68f9      	ldr	r1, [r7, #12]
 8001de6:	4618      	mov	r0, r3
 8001de8:	f002 f94e 	bl	8004088 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	2200      	movs	r2, #0
 8001df0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8001df4:	7afb      	ldrb	r3, [r7, #11]
}
 8001df6:	4618      	mov	r0, r3
 8001df8:	3710      	adds	r7, #16
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	bd80      	pop	{r7, pc}

08001dfe <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001dfe:	b580      	push	{r7, lr}
 8001e00:	b084      	sub	sp, #16
 8001e02:	af00      	add	r7, sp, #0
 8001e04:	6078      	str	r0, [r7, #4]
 8001e06:	460b      	mov	r3, r1
 8001e08:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001e0a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	da0f      	bge.n	8001e32 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001e12:	78fb      	ldrb	r3, [r7, #3]
 8001e14:	f003 020f 	and.w	r2, r3, #15
 8001e18:	4613      	mov	r3, r2
 8001e1a:	00db      	lsls	r3, r3, #3
 8001e1c:	1a9b      	subs	r3, r3, r2
 8001e1e:	009b      	lsls	r3, r3, #2
 8001e20:	3338      	adds	r3, #56	; 0x38
 8001e22:	687a      	ldr	r2, [r7, #4]
 8001e24:	4413      	add	r3, r2
 8001e26:	3304      	adds	r3, #4
 8001e28:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	2201      	movs	r2, #1
 8001e2e:	705a      	strb	r2, [r3, #1]
 8001e30:	e00f      	b.n	8001e52 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001e32:	78fb      	ldrb	r3, [r7, #3]
 8001e34:	f003 020f 	and.w	r2, r3, #15
 8001e38:	4613      	mov	r3, r2
 8001e3a:	00db      	lsls	r3, r3, #3
 8001e3c:	1a9b      	subs	r3, r3, r2
 8001e3e:	009b      	lsls	r3, r3, #2
 8001e40:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001e44:	687a      	ldr	r2, [r7, #4]
 8001e46:	4413      	add	r3, r2
 8001e48:	3304      	adds	r3, #4
 8001e4a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	2200      	movs	r2, #0
 8001e50:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8001e52:	78fb      	ldrb	r3, [r7, #3]
 8001e54:	f003 030f 	and.w	r3, r3, #15
 8001e58:	b2da      	uxtb	r2, r3
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001e64:	2b01      	cmp	r3, #1
 8001e66:	d101      	bne.n	8001e6c <HAL_PCD_EP_Close+0x6e>
 8001e68:	2302      	movs	r3, #2
 8001e6a:	e00e      	b.n	8001e8a <HAL_PCD_EP_Close+0x8c>
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	2201      	movs	r2, #1
 8001e70:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	68f9      	ldr	r1, [r7, #12]
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	f002 f98c 	bl	8004198 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	2200      	movs	r2, #0
 8001e84:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8001e88:	2300      	movs	r3, #0
}
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	3710      	adds	r7, #16
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	bd80      	pop	{r7, pc}

08001e92 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001e92:	b580      	push	{r7, lr}
 8001e94:	b086      	sub	sp, #24
 8001e96:	af00      	add	r7, sp, #0
 8001e98:	60f8      	str	r0, [r7, #12]
 8001e9a:	607a      	str	r2, [r7, #4]
 8001e9c:	603b      	str	r3, [r7, #0]
 8001e9e:	460b      	mov	r3, r1
 8001ea0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001ea2:	7afb      	ldrb	r3, [r7, #11]
 8001ea4:	f003 020f 	and.w	r2, r3, #15
 8001ea8:	4613      	mov	r3, r2
 8001eaa:	00db      	lsls	r3, r3, #3
 8001eac:	1a9b      	subs	r3, r3, r2
 8001eae:	009b      	lsls	r3, r3, #2
 8001eb0:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001eb4:	68fa      	ldr	r2, [r7, #12]
 8001eb6:	4413      	add	r3, r2
 8001eb8:	3304      	adds	r3, #4
 8001eba:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001ebc:	697b      	ldr	r3, [r7, #20]
 8001ebe:	687a      	ldr	r2, [r7, #4]
 8001ec0:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8001ec2:	697b      	ldr	r3, [r7, #20]
 8001ec4:	683a      	ldr	r2, [r7, #0]
 8001ec6:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8001ec8:	697b      	ldr	r3, [r7, #20]
 8001eca:	2200      	movs	r2, #0
 8001ecc:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8001ece:	697b      	ldr	r3, [r7, #20]
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001ed4:	7afb      	ldrb	r3, [r7, #11]
 8001ed6:	f003 030f 	and.w	r3, r3, #15
 8001eda:	b2da      	uxtb	r2, r3
 8001edc:	697b      	ldr	r3, [r7, #20]
 8001ede:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	691b      	ldr	r3, [r3, #16]
 8001ee4:	2b01      	cmp	r3, #1
 8001ee6:	d102      	bne.n	8001eee <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001ee8:	687a      	ldr	r2, [r7, #4]
 8001eea:	697b      	ldr	r3, [r7, #20]
 8001eec:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001eee:	7afb      	ldrb	r3, [r7, #11]
 8001ef0:	f003 030f 	and.w	r3, r3, #15
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d109      	bne.n	8001f0c <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	6818      	ldr	r0, [r3, #0]
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	691b      	ldr	r3, [r3, #16]
 8001f00:	b2db      	uxtb	r3, r3
 8001f02:	461a      	mov	r2, r3
 8001f04:	6979      	ldr	r1, [r7, #20]
 8001f06:	f002 fc67 	bl	80047d8 <USB_EP0StartXfer>
 8001f0a:	e008      	b.n	8001f1e <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	6818      	ldr	r0, [r3, #0]
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	691b      	ldr	r3, [r3, #16]
 8001f14:	b2db      	uxtb	r3, r3
 8001f16:	461a      	mov	r2, r3
 8001f18:	6979      	ldr	r1, [r7, #20]
 8001f1a:	f002 fa19 	bl	8004350 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001f1e:	2300      	movs	r3, #0
}
 8001f20:	4618      	mov	r0, r3
 8001f22:	3718      	adds	r7, #24
 8001f24:	46bd      	mov	sp, r7
 8001f26:	bd80      	pop	{r7, pc}

08001f28 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	b086      	sub	sp, #24
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	60f8      	str	r0, [r7, #12]
 8001f30:	607a      	str	r2, [r7, #4]
 8001f32:	603b      	str	r3, [r7, #0]
 8001f34:	460b      	mov	r3, r1
 8001f36:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001f38:	7afb      	ldrb	r3, [r7, #11]
 8001f3a:	f003 020f 	and.w	r2, r3, #15
 8001f3e:	4613      	mov	r3, r2
 8001f40:	00db      	lsls	r3, r3, #3
 8001f42:	1a9b      	subs	r3, r3, r2
 8001f44:	009b      	lsls	r3, r3, #2
 8001f46:	3338      	adds	r3, #56	; 0x38
 8001f48:	68fa      	ldr	r2, [r7, #12]
 8001f4a:	4413      	add	r3, r2
 8001f4c:	3304      	adds	r3, #4
 8001f4e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001f50:	697b      	ldr	r3, [r7, #20]
 8001f52:	687a      	ldr	r2, [r7, #4]
 8001f54:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8001f56:	697b      	ldr	r3, [r7, #20]
 8001f58:	683a      	ldr	r2, [r7, #0]
 8001f5a:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8001f5c:	697b      	ldr	r3, [r7, #20]
 8001f5e:	2200      	movs	r2, #0
 8001f60:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8001f62:	697b      	ldr	r3, [r7, #20]
 8001f64:	2201      	movs	r2, #1
 8001f66:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001f68:	7afb      	ldrb	r3, [r7, #11]
 8001f6a:	f003 030f 	and.w	r3, r3, #15
 8001f6e:	b2da      	uxtb	r2, r3
 8001f70:	697b      	ldr	r3, [r7, #20]
 8001f72:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	691b      	ldr	r3, [r3, #16]
 8001f78:	2b01      	cmp	r3, #1
 8001f7a:	d102      	bne.n	8001f82 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001f7c:	687a      	ldr	r2, [r7, #4]
 8001f7e:	697b      	ldr	r3, [r7, #20]
 8001f80:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001f82:	7afb      	ldrb	r3, [r7, #11]
 8001f84:	f003 030f 	and.w	r3, r3, #15
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d109      	bne.n	8001fa0 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	6818      	ldr	r0, [r3, #0]
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	691b      	ldr	r3, [r3, #16]
 8001f94:	b2db      	uxtb	r3, r3
 8001f96:	461a      	mov	r2, r3
 8001f98:	6979      	ldr	r1, [r7, #20]
 8001f9a:	f002 fc1d 	bl	80047d8 <USB_EP0StartXfer>
 8001f9e:	e008      	b.n	8001fb2 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	6818      	ldr	r0, [r3, #0]
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	691b      	ldr	r3, [r3, #16]
 8001fa8:	b2db      	uxtb	r3, r3
 8001faa:	461a      	mov	r2, r3
 8001fac:	6979      	ldr	r1, [r7, #20]
 8001fae:	f002 f9cf 	bl	8004350 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001fb2:	2300      	movs	r3, #0
}
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	3718      	adds	r7, #24
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	bd80      	pop	{r7, pc}

08001fbc <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	b084      	sub	sp, #16
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]
 8001fc4:	460b      	mov	r3, r1
 8001fc6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001fc8:	78fb      	ldrb	r3, [r7, #3]
 8001fca:	f003 020f 	and.w	r2, r3, #15
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	685b      	ldr	r3, [r3, #4]
 8001fd2:	429a      	cmp	r2, r3
 8001fd4:	d901      	bls.n	8001fda <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001fd6:	2301      	movs	r3, #1
 8001fd8:	e050      	b.n	800207c <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001fda:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	da0f      	bge.n	8002002 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001fe2:	78fb      	ldrb	r3, [r7, #3]
 8001fe4:	f003 020f 	and.w	r2, r3, #15
 8001fe8:	4613      	mov	r3, r2
 8001fea:	00db      	lsls	r3, r3, #3
 8001fec:	1a9b      	subs	r3, r3, r2
 8001fee:	009b      	lsls	r3, r3, #2
 8001ff0:	3338      	adds	r3, #56	; 0x38
 8001ff2:	687a      	ldr	r2, [r7, #4]
 8001ff4:	4413      	add	r3, r2
 8001ff6:	3304      	adds	r3, #4
 8001ff8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	2201      	movs	r2, #1
 8001ffe:	705a      	strb	r2, [r3, #1]
 8002000:	e00d      	b.n	800201e <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002002:	78fa      	ldrb	r2, [r7, #3]
 8002004:	4613      	mov	r3, r2
 8002006:	00db      	lsls	r3, r3, #3
 8002008:	1a9b      	subs	r3, r3, r2
 800200a:	009b      	lsls	r3, r3, #2
 800200c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002010:	687a      	ldr	r2, [r7, #4]
 8002012:	4413      	add	r3, r2
 8002014:	3304      	adds	r3, #4
 8002016:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	2200      	movs	r2, #0
 800201c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	2201      	movs	r2, #1
 8002022:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002024:	78fb      	ldrb	r3, [r7, #3]
 8002026:	f003 030f 	and.w	r3, r3, #15
 800202a:	b2da      	uxtb	r2, r3
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002036:	2b01      	cmp	r3, #1
 8002038:	d101      	bne.n	800203e <HAL_PCD_EP_SetStall+0x82>
 800203a:	2302      	movs	r3, #2
 800203c:	e01e      	b.n	800207c <HAL_PCD_EP_SetStall+0xc0>
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	2201      	movs	r2, #1
 8002042:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	68f9      	ldr	r1, [r7, #12]
 800204c:	4618      	mov	r0, r3
 800204e:	f002 fdac 	bl	8004baa <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002052:	78fb      	ldrb	r3, [r7, #3]
 8002054:	f003 030f 	and.w	r3, r3, #15
 8002058:	2b00      	cmp	r3, #0
 800205a:	d10a      	bne.n	8002072 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	6818      	ldr	r0, [r3, #0]
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	691b      	ldr	r3, [r3, #16]
 8002064:	b2d9      	uxtb	r1, r3
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800206c:	461a      	mov	r2, r3
 800206e:	f002 ff9d 	bl	8004fac <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	2200      	movs	r2, #0
 8002076:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800207a:	2300      	movs	r3, #0
}
 800207c:	4618      	mov	r0, r3
 800207e:	3710      	adds	r7, #16
 8002080:	46bd      	mov	sp, r7
 8002082:	bd80      	pop	{r7, pc}

08002084 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002084:	b580      	push	{r7, lr}
 8002086:	b084      	sub	sp, #16
 8002088:	af00      	add	r7, sp, #0
 800208a:	6078      	str	r0, [r7, #4]
 800208c:	460b      	mov	r3, r1
 800208e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002090:	78fb      	ldrb	r3, [r7, #3]
 8002092:	f003 020f 	and.w	r2, r3, #15
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	685b      	ldr	r3, [r3, #4]
 800209a:	429a      	cmp	r2, r3
 800209c:	d901      	bls.n	80020a2 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800209e:	2301      	movs	r3, #1
 80020a0:	e042      	b.n	8002128 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80020a2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	da0f      	bge.n	80020ca <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80020aa:	78fb      	ldrb	r3, [r7, #3]
 80020ac:	f003 020f 	and.w	r2, r3, #15
 80020b0:	4613      	mov	r3, r2
 80020b2:	00db      	lsls	r3, r3, #3
 80020b4:	1a9b      	subs	r3, r3, r2
 80020b6:	009b      	lsls	r3, r3, #2
 80020b8:	3338      	adds	r3, #56	; 0x38
 80020ba:	687a      	ldr	r2, [r7, #4]
 80020bc:	4413      	add	r3, r2
 80020be:	3304      	adds	r3, #4
 80020c0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	2201      	movs	r2, #1
 80020c6:	705a      	strb	r2, [r3, #1]
 80020c8:	e00f      	b.n	80020ea <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80020ca:	78fb      	ldrb	r3, [r7, #3]
 80020cc:	f003 020f 	and.w	r2, r3, #15
 80020d0:	4613      	mov	r3, r2
 80020d2:	00db      	lsls	r3, r3, #3
 80020d4:	1a9b      	subs	r3, r3, r2
 80020d6:	009b      	lsls	r3, r3, #2
 80020d8:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80020dc:	687a      	ldr	r2, [r7, #4]
 80020de:	4413      	add	r3, r2
 80020e0:	3304      	adds	r3, #4
 80020e2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	2200      	movs	r2, #0
 80020e8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	2200      	movs	r2, #0
 80020ee:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80020f0:	78fb      	ldrb	r3, [r7, #3]
 80020f2:	f003 030f 	and.w	r3, r3, #15
 80020f6:	b2da      	uxtb	r2, r3
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002102:	2b01      	cmp	r3, #1
 8002104:	d101      	bne.n	800210a <HAL_PCD_EP_ClrStall+0x86>
 8002106:	2302      	movs	r3, #2
 8002108:	e00e      	b.n	8002128 <HAL_PCD_EP_ClrStall+0xa4>
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	2201      	movs	r2, #1
 800210e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	68f9      	ldr	r1, [r7, #12]
 8002118:	4618      	mov	r0, r3
 800211a:	f002 fdb4 	bl	8004c86 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	2200      	movs	r2, #0
 8002122:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002126:	2300      	movs	r3, #0
}
 8002128:	4618      	mov	r0, r3
 800212a:	3710      	adds	r7, #16
 800212c:	46bd      	mov	sp, r7
 800212e:	bd80      	pop	{r7, pc}

08002130 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002130:	b580      	push	{r7, lr}
 8002132:	b08a      	sub	sp, #40	; 0x28
 8002134:	af02      	add	r7, sp, #8
 8002136:	6078      	str	r0, [r7, #4]
 8002138:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002140:	697b      	ldr	r3, [r7, #20]
 8002142:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8002144:	683a      	ldr	r2, [r7, #0]
 8002146:	4613      	mov	r3, r2
 8002148:	00db      	lsls	r3, r3, #3
 800214a:	1a9b      	subs	r3, r3, r2
 800214c:	009b      	lsls	r3, r3, #2
 800214e:	3338      	adds	r3, #56	; 0x38
 8002150:	687a      	ldr	r2, [r7, #4]
 8002152:	4413      	add	r3, r2
 8002154:	3304      	adds	r3, #4
 8002156:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	699a      	ldr	r2, [r3, #24]
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	695b      	ldr	r3, [r3, #20]
 8002160:	429a      	cmp	r2, r3
 8002162:	d901      	bls.n	8002168 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8002164:	2301      	movs	r3, #1
 8002166:	e06c      	b.n	8002242 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	695a      	ldr	r2, [r3, #20]
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	699b      	ldr	r3, [r3, #24]
 8002170:	1ad3      	subs	r3, r2, r3
 8002172:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	689b      	ldr	r3, [r3, #8]
 8002178:	69fa      	ldr	r2, [r7, #28]
 800217a:	429a      	cmp	r2, r3
 800217c:	d902      	bls.n	8002184 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	689b      	ldr	r3, [r3, #8]
 8002182:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8002184:	69fb      	ldr	r3, [r7, #28]
 8002186:	3303      	adds	r3, #3
 8002188:	089b      	lsrs	r3, r3, #2
 800218a:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800218c:	e02b      	b.n	80021e6 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	695a      	ldr	r2, [r3, #20]
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	699b      	ldr	r3, [r3, #24]
 8002196:	1ad3      	subs	r3, r2, r3
 8002198:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	689b      	ldr	r3, [r3, #8]
 800219e:	69fa      	ldr	r2, [r7, #28]
 80021a0:	429a      	cmp	r2, r3
 80021a2:	d902      	bls.n	80021aa <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	689b      	ldr	r3, [r3, #8]
 80021a8:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80021aa:	69fb      	ldr	r3, [r7, #28]
 80021ac:	3303      	adds	r3, #3
 80021ae:	089b      	lsrs	r3, r3, #2
 80021b0:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	68d9      	ldr	r1, [r3, #12]
 80021b6:	683b      	ldr	r3, [r7, #0]
 80021b8:	b2da      	uxtb	r2, r3
 80021ba:	69fb      	ldr	r3, [r7, #28]
 80021bc:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80021c2:	b2db      	uxtb	r3, r3
 80021c4:	9300      	str	r3, [sp, #0]
 80021c6:	4603      	mov	r3, r0
 80021c8:	6978      	ldr	r0, [r7, #20]
 80021ca:	f002 fc58 	bl	8004a7e <USB_WritePacket>

    ep->xfer_buff  += len;
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	68da      	ldr	r2, [r3, #12]
 80021d2:	69fb      	ldr	r3, [r7, #28]
 80021d4:	441a      	add	r2, r3
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	699a      	ldr	r2, [r3, #24]
 80021de:	69fb      	ldr	r3, [r7, #28]
 80021e0:	441a      	add	r2, r3
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80021e6:	683b      	ldr	r3, [r7, #0]
 80021e8:	015a      	lsls	r2, r3, #5
 80021ea:	693b      	ldr	r3, [r7, #16]
 80021ec:	4413      	add	r3, r2
 80021ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80021f2:	699b      	ldr	r3, [r3, #24]
 80021f4:	b29b      	uxth	r3, r3
 80021f6:	69ba      	ldr	r2, [r7, #24]
 80021f8:	429a      	cmp	r2, r3
 80021fa:	d809      	bhi.n	8002210 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	699a      	ldr	r2, [r3, #24]
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002204:	429a      	cmp	r2, r3
 8002206:	d203      	bcs.n	8002210 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	695b      	ldr	r3, [r3, #20]
 800220c:	2b00      	cmp	r3, #0
 800220e:	d1be      	bne.n	800218e <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	695a      	ldr	r2, [r3, #20]
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	699b      	ldr	r3, [r3, #24]
 8002218:	429a      	cmp	r2, r3
 800221a:	d811      	bhi.n	8002240 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800221c:	683b      	ldr	r3, [r7, #0]
 800221e:	f003 030f 	and.w	r3, r3, #15
 8002222:	2201      	movs	r2, #1
 8002224:	fa02 f303 	lsl.w	r3, r2, r3
 8002228:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800222a:	693b      	ldr	r3, [r7, #16]
 800222c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002230:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002232:	68bb      	ldr	r3, [r7, #8]
 8002234:	43db      	mvns	r3, r3
 8002236:	6939      	ldr	r1, [r7, #16]
 8002238:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800223c:	4013      	ands	r3, r2
 800223e:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8002240:	2300      	movs	r3, #0
}
 8002242:	4618      	mov	r0, r3
 8002244:	3720      	adds	r7, #32
 8002246:	46bd      	mov	sp, r7
 8002248:	bd80      	pop	{r7, pc}
	...

0800224c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800224c:	b580      	push	{r7, lr}
 800224e:	b086      	sub	sp, #24
 8002250:	af00      	add	r7, sp, #0
 8002252:	6078      	str	r0, [r7, #4]
 8002254:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800225c:	697b      	ldr	r3, [r7, #20]
 800225e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002260:	697b      	ldr	r3, [r7, #20]
 8002262:	333c      	adds	r3, #60	; 0x3c
 8002264:	3304      	adds	r3, #4
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800226a:	683b      	ldr	r3, [r7, #0]
 800226c:	015a      	lsls	r2, r3, #5
 800226e:	693b      	ldr	r3, [r7, #16]
 8002270:	4413      	add	r3, r2
 8002272:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002276:	689b      	ldr	r3, [r3, #8]
 8002278:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	691b      	ldr	r3, [r3, #16]
 800227e:	2b01      	cmp	r3, #1
 8002280:	f040 80a0 	bne.w	80023c4 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8002284:	68bb      	ldr	r3, [r7, #8]
 8002286:	f003 0308 	and.w	r3, r3, #8
 800228a:	2b00      	cmp	r3, #0
 800228c:	d015      	beq.n	80022ba <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	4a72      	ldr	r2, [pc, #456]	; (800245c <PCD_EP_OutXfrComplete_int+0x210>)
 8002292:	4293      	cmp	r3, r2
 8002294:	f240 80dd 	bls.w	8002452 <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002298:	68bb      	ldr	r3, [r7, #8]
 800229a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800229e:	2b00      	cmp	r3, #0
 80022a0:	f000 80d7 	beq.w	8002452 <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80022a4:	683b      	ldr	r3, [r7, #0]
 80022a6:	015a      	lsls	r2, r3, #5
 80022a8:	693b      	ldr	r3, [r7, #16]
 80022aa:	4413      	add	r3, r2
 80022ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80022b0:	461a      	mov	r2, r3
 80022b2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80022b6:	6093      	str	r3, [r2, #8]
 80022b8:	e0cb      	b.n	8002452 <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80022ba:	68bb      	ldr	r3, [r7, #8]
 80022bc:	f003 0320 	and.w	r3, r3, #32
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d009      	beq.n	80022d8 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80022c4:	683b      	ldr	r3, [r7, #0]
 80022c6:	015a      	lsls	r2, r3, #5
 80022c8:	693b      	ldr	r3, [r7, #16]
 80022ca:	4413      	add	r3, r2
 80022cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80022d0:	461a      	mov	r2, r3
 80022d2:	2320      	movs	r3, #32
 80022d4:	6093      	str	r3, [r2, #8]
 80022d6:	e0bc      	b.n	8002452 <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80022d8:	68bb      	ldr	r3, [r7, #8]
 80022da:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80022de:	2b00      	cmp	r3, #0
 80022e0:	f040 80b7 	bne.w	8002452 <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	4a5d      	ldr	r2, [pc, #372]	; (800245c <PCD_EP_OutXfrComplete_int+0x210>)
 80022e8:	4293      	cmp	r3, r2
 80022ea:	d90f      	bls.n	800230c <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80022ec:	68bb      	ldr	r3, [r7, #8]
 80022ee:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d00a      	beq.n	800230c <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80022f6:	683b      	ldr	r3, [r7, #0]
 80022f8:	015a      	lsls	r2, r3, #5
 80022fa:	693b      	ldr	r3, [r7, #16]
 80022fc:	4413      	add	r3, r2
 80022fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002302:	461a      	mov	r2, r3
 8002304:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002308:	6093      	str	r3, [r2, #8]
 800230a:	e0a2      	b.n	8002452 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 800230c:	6879      	ldr	r1, [r7, #4]
 800230e:	683a      	ldr	r2, [r7, #0]
 8002310:	4613      	mov	r3, r2
 8002312:	00db      	lsls	r3, r3, #3
 8002314:	1a9b      	subs	r3, r3, r2
 8002316:	009b      	lsls	r3, r3, #2
 8002318:	440b      	add	r3, r1
 800231a:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800231e:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8002320:	683b      	ldr	r3, [r7, #0]
 8002322:	0159      	lsls	r1, r3, #5
 8002324:	693b      	ldr	r3, [r7, #16]
 8002326:	440b      	add	r3, r1
 8002328:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800232c:	691b      	ldr	r3, [r3, #16]
 800232e:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8002332:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8002334:	6878      	ldr	r0, [r7, #4]
 8002336:	683a      	ldr	r2, [r7, #0]
 8002338:	4613      	mov	r3, r2
 800233a:	00db      	lsls	r3, r3, #3
 800233c:	1a9b      	subs	r3, r3, r2
 800233e:	009b      	lsls	r3, r3, #2
 8002340:	4403      	add	r3, r0
 8002342:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8002346:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8002348:	6879      	ldr	r1, [r7, #4]
 800234a:	683a      	ldr	r2, [r7, #0]
 800234c:	4613      	mov	r3, r2
 800234e:	00db      	lsls	r3, r3, #3
 8002350:	1a9b      	subs	r3, r3, r2
 8002352:	009b      	lsls	r3, r3, #2
 8002354:	440b      	add	r3, r1
 8002356:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800235a:	6819      	ldr	r1, [r3, #0]
 800235c:	6878      	ldr	r0, [r7, #4]
 800235e:	683a      	ldr	r2, [r7, #0]
 8002360:	4613      	mov	r3, r2
 8002362:	00db      	lsls	r3, r3, #3
 8002364:	1a9b      	subs	r3, r3, r2
 8002366:	009b      	lsls	r3, r3, #2
 8002368:	4403      	add	r3, r0
 800236a:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	4419      	add	r1, r3
 8002372:	6878      	ldr	r0, [r7, #4]
 8002374:	683a      	ldr	r2, [r7, #0]
 8002376:	4613      	mov	r3, r2
 8002378:	00db      	lsls	r3, r3, #3
 800237a:	1a9b      	subs	r3, r3, r2
 800237c:	009b      	lsls	r3, r3, #2
 800237e:	4403      	add	r3, r0
 8002380:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002384:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002386:	683b      	ldr	r3, [r7, #0]
 8002388:	2b00      	cmp	r3, #0
 800238a:	d114      	bne.n	80023b6 <PCD_EP_OutXfrComplete_int+0x16a>
 800238c:	6879      	ldr	r1, [r7, #4]
 800238e:	683a      	ldr	r2, [r7, #0]
 8002390:	4613      	mov	r3, r2
 8002392:	00db      	lsls	r3, r3, #3
 8002394:	1a9b      	subs	r3, r3, r2
 8002396:	009b      	lsls	r3, r3, #2
 8002398:	440b      	add	r3, r1
 800239a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d108      	bne.n	80023b6 <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	6818      	ldr	r0, [r3, #0]
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80023ae:	461a      	mov	r2, r3
 80023b0:	2101      	movs	r1, #1
 80023b2:	f002 fdfb 	bl	8004fac <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80023b6:	683b      	ldr	r3, [r7, #0]
 80023b8:	b2db      	uxtb	r3, r3
 80023ba:	4619      	mov	r1, r3
 80023bc:	6878      	ldr	r0, [r7, #4]
 80023be:	f004 f9c7 	bl	8006750 <HAL_PCD_DataOutStageCallback>
 80023c2:	e046      	b.n	8002452 <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	4a26      	ldr	r2, [pc, #152]	; (8002460 <PCD_EP_OutXfrComplete_int+0x214>)
 80023c8:	4293      	cmp	r3, r2
 80023ca:	d124      	bne.n	8002416 <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80023cc:	68bb      	ldr	r3, [r7, #8]
 80023ce:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d00a      	beq.n	80023ec <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80023d6:	683b      	ldr	r3, [r7, #0]
 80023d8:	015a      	lsls	r2, r3, #5
 80023da:	693b      	ldr	r3, [r7, #16]
 80023dc:	4413      	add	r3, r2
 80023de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80023e2:	461a      	mov	r2, r3
 80023e4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80023e8:	6093      	str	r3, [r2, #8]
 80023ea:	e032      	b.n	8002452 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80023ec:	68bb      	ldr	r3, [r7, #8]
 80023ee:	f003 0320 	and.w	r3, r3, #32
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d008      	beq.n	8002408 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80023f6:	683b      	ldr	r3, [r7, #0]
 80023f8:	015a      	lsls	r2, r3, #5
 80023fa:	693b      	ldr	r3, [r7, #16]
 80023fc:	4413      	add	r3, r2
 80023fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002402:	461a      	mov	r2, r3
 8002404:	2320      	movs	r3, #32
 8002406:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002408:	683b      	ldr	r3, [r7, #0]
 800240a:	b2db      	uxtb	r3, r3
 800240c:	4619      	mov	r1, r3
 800240e:	6878      	ldr	r0, [r7, #4]
 8002410:	f004 f99e 	bl	8006750 <HAL_PCD_DataOutStageCallback>
 8002414:	e01d      	b.n	8002452 <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002416:	683b      	ldr	r3, [r7, #0]
 8002418:	2b00      	cmp	r3, #0
 800241a:	d114      	bne.n	8002446 <PCD_EP_OutXfrComplete_int+0x1fa>
 800241c:	6879      	ldr	r1, [r7, #4]
 800241e:	683a      	ldr	r2, [r7, #0]
 8002420:	4613      	mov	r3, r2
 8002422:	00db      	lsls	r3, r3, #3
 8002424:	1a9b      	subs	r3, r3, r2
 8002426:	009b      	lsls	r3, r3, #2
 8002428:	440b      	add	r3, r1
 800242a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	2b00      	cmp	r3, #0
 8002432:	d108      	bne.n	8002446 <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	6818      	ldr	r0, [r3, #0]
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800243e:	461a      	mov	r2, r3
 8002440:	2100      	movs	r1, #0
 8002442:	f002 fdb3 	bl	8004fac <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002446:	683b      	ldr	r3, [r7, #0]
 8002448:	b2db      	uxtb	r3, r3
 800244a:	4619      	mov	r1, r3
 800244c:	6878      	ldr	r0, [r7, #4]
 800244e:	f004 f97f 	bl	8006750 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8002452:	2300      	movs	r3, #0
}
 8002454:	4618      	mov	r0, r3
 8002456:	3718      	adds	r7, #24
 8002458:	46bd      	mov	sp, r7
 800245a:	bd80      	pop	{r7, pc}
 800245c:	4f54300a 	.word	0x4f54300a
 8002460:	4f54310a 	.word	0x4f54310a

08002464 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002464:	b580      	push	{r7, lr}
 8002466:	b086      	sub	sp, #24
 8002468:	af00      	add	r7, sp, #0
 800246a:	6078      	str	r0, [r7, #4]
 800246c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002474:	697b      	ldr	r3, [r7, #20]
 8002476:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002478:	697b      	ldr	r3, [r7, #20]
 800247a:	333c      	adds	r3, #60	; 0x3c
 800247c:	3304      	adds	r3, #4
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002482:	683b      	ldr	r3, [r7, #0]
 8002484:	015a      	lsls	r2, r3, #5
 8002486:	693b      	ldr	r3, [r7, #16]
 8002488:	4413      	add	r3, r2
 800248a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800248e:	689b      	ldr	r3, [r3, #8]
 8002490:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	4a15      	ldr	r2, [pc, #84]	; (80024ec <PCD_EP_OutSetupPacket_int+0x88>)
 8002496:	4293      	cmp	r3, r2
 8002498:	d90e      	bls.n	80024b8 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800249a:	68bb      	ldr	r3, [r7, #8]
 800249c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d009      	beq.n	80024b8 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80024a4:	683b      	ldr	r3, [r7, #0]
 80024a6:	015a      	lsls	r2, r3, #5
 80024a8:	693b      	ldr	r3, [r7, #16]
 80024aa:	4413      	add	r3, r2
 80024ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80024b0:	461a      	mov	r2, r3
 80024b2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80024b6:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80024b8:	6878      	ldr	r0, [r7, #4]
 80024ba:	f004 f937 	bl	800672c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	4a0a      	ldr	r2, [pc, #40]	; (80024ec <PCD_EP_OutSetupPacket_int+0x88>)
 80024c2:	4293      	cmp	r3, r2
 80024c4:	d90c      	bls.n	80024e0 <PCD_EP_OutSetupPacket_int+0x7c>
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	691b      	ldr	r3, [r3, #16]
 80024ca:	2b01      	cmp	r3, #1
 80024cc:	d108      	bne.n	80024e0 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	6818      	ldr	r0, [r3, #0]
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80024d8:	461a      	mov	r2, r3
 80024da:	2101      	movs	r1, #1
 80024dc:	f002 fd66 	bl	8004fac <USB_EP0_OutStart>
  }

  return HAL_OK;
 80024e0:	2300      	movs	r3, #0
}
 80024e2:	4618      	mov	r0, r3
 80024e4:	3718      	adds	r7, #24
 80024e6:	46bd      	mov	sp, r7
 80024e8:	bd80      	pop	{r7, pc}
 80024ea:	bf00      	nop
 80024ec:	4f54300a 	.word	0x4f54300a

080024f0 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80024f0:	b480      	push	{r7}
 80024f2:	b085      	sub	sp, #20
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	6078      	str	r0, [r7, #4]
 80024f8:	460b      	mov	r3, r1
 80024fa:	70fb      	strb	r3, [r7, #3]
 80024fc:	4613      	mov	r3, r2
 80024fe:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002506:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8002508:	78fb      	ldrb	r3, [r7, #3]
 800250a:	2b00      	cmp	r3, #0
 800250c:	d107      	bne.n	800251e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800250e:	883b      	ldrh	r3, [r7, #0]
 8002510:	0419      	lsls	r1, r3, #16
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	68ba      	ldr	r2, [r7, #8]
 8002518:	430a      	orrs	r2, r1
 800251a:	629a      	str	r2, [r3, #40]	; 0x28
 800251c:	e028      	b.n	8002570 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002524:	0c1b      	lsrs	r3, r3, #16
 8002526:	68ba      	ldr	r2, [r7, #8]
 8002528:	4413      	add	r3, r2
 800252a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800252c:	2300      	movs	r3, #0
 800252e:	73fb      	strb	r3, [r7, #15]
 8002530:	e00d      	b.n	800254e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681a      	ldr	r2, [r3, #0]
 8002536:	7bfb      	ldrb	r3, [r7, #15]
 8002538:	3340      	adds	r3, #64	; 0x40
 800253a:	009b      	lsls	r3, r3, #2
 800253c:	4413      	add	r3, r2
 800253e:	685b      	ldr	r3, [r3, #4]
 8002540:	0c1b      	lsrs	r3, r3, #16
 8002542:	68ba      	ldr	r2, [r7, #8]
 8002544:	4413      	add	r3, r2
 8002546:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002548:	7bfb      	ldrb	r3, [r7, #15]
 800254a:	3301      	adds	r3, #1
 800254c:	73fb      	strb	r3, [r7, #15]
 800254e:	7bfa      	ldrb	r2, [r7, #15]
 8002550:	78fb      	ldrb	r3, [r7, #3]
 8002552:	3b01      	subs	r3, #1
 8002554:	429a      	cmp	r2, r3
 8002556:	d3ec      	bcc.n	8002532 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8002558:	883b      	ldrh	r3, [r7, #0]
 800255a:	0418      	lsls	r0, r3, #16
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	6819      	ldr	r1, [r3, #0]
 8002560:	78fb      	ldrb	r3, [r7, #3]
 8002562:	3b01      	subs	r3, #1
 8002564:	68ba      	ldr	r2, [r7, #8]
 8002566:	4302      	orrs	r2, r0
 8002568:	3340      	adds	r3, #64	; 0x40
 800256a:	009b      	lsls	r3, r3, #2
 800256c:	440b      	add	r3, r1
 800256e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8002570:	2300      	movs	r3, #0
}
 8002572:	4618      	mov	r0, r3
 8002574:	3714      	adds	r7, #20
 8002576:	46bd      	mov	sp, r7
 8002578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257c:	4770      	bx	lr

0800257e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800257e:	b480      	push	{r7}
 8002580:	b083      	sub	sp, #12
 8002582:	af00      	add	r7, sp, #0
 8002584:	6078      	str	r0, [r7, #4]
 8002586:	460b      	mov	r3, r1
 8002588:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	887a      	ldrh	r2, [r7, #2]
 8002590:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002592:	2300      	movs	r3, #0
}
 8002594:	4618      	mov	r0, r3
 8002596:	370c      	adds	r7, #12
 8002598:	46bd      	mov	sp, r7
 800259a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800259e:	4770      	bx	lr

080025a0 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80025a0:	b480      	push	{r7}
 80025a2:	b083      	sub	sp, #12
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	6078      	str	r0, [r7, #4]
 80025a8:	460b      	mov	r3, r1
 80025aa:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80025ac:	bf00      	nop
 80025ae:	370c      	adds	r7, #12
 80025b0:	46bd      	mov	sp, r7
 80025b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b6:	4770      	bx	lr

080025b8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80025b8:	b580      	push	{r7, lr}
 80025ba:	b086      	sub	sp, #24
 80025bc:	af00      	add	r7, sp, #0
 80025be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d101      	bne.n	80025ca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80025c6:	2301      	movs	r3, #1
 80025c8:	e264      	b.n	8002a94 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f003 0301 	and.w	r3, r3, #1
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d075      	beq.n	80026c2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80025d6:	4ba3      	ldr	r3, [pc, #652]	; (8002864 <HAL_RCC_OscConfig+0x2ac>)
 80025d8:	689b      	ldr	r3, [r3, #8]
 80025da:	f003 030c 	and.w	r3, r3, #12
 80025de:	2b04      	cmp	r3, #4
 80025e0:	d00c      	beq.n	80025fc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80025e2:	4ba0      	ldr	r3, [pc, #640]	; (8002864 <HAL_RCC_OscConfig+0x2ac>)
 80025e4:	689b      	ldr	r3, [r3, #8]
 80025e6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80025ea:	2b08      	cmp	r3, #8
 80025ec:	d112      	bne.n	8002614 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80025ee:	4b9d      	ldr	r3, [pc, #628]	; (8002864 <HAL_RCC_OscConfig+0x2ac>)
 80025f0:	685b      	ldr	r3, [r3, #4]
 80025f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80025f6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80025fa:	d10b      	bne.n	8002614 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025fc:	4b99      	ldr	r3, [pc, #612]	; (8002864 <HAL_RCC_OscConfig+0x2ac>)
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002604:	2b00      	cmp	r3, #0
 8002606:	d05b      	beq.n	80026c0 <HAL_RCC_OscConfig+0x108>
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	685b      	ldr	r3, [r3, #4]
 800260c:	2b00      	cmp	r3, #0
 800260e:	d157      	bne.n	80026c0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002610:	2301      	movs	r3, #1
 8002612:	e23f      	b.n	8002a94 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	685b      	ldr	r3, [r3, #4]
 8002618:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800261c:	d106      	bne.n	800262c <HAL_RCC_OscConfig+0x74>
 800261e:	4b91      	ldr	r3, [pc, #580]	; (8002864 <HAL_RCC_OscConfig+0x2ac>)
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	4a90      	ldr	r2, [pc, #576]	; (8002864 <HAL_RCC_OscConfig+0x2ac>)
 8002624:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002628:	6013      	str	r3, [r2, #0]
 800262a:	e01d      	b.n	8002668 <HAL_RCC_OscConfig+0xb0>
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	685b      	ldr	r3, [r3, #4]
 8002630:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002634:	d10c      	bne.n	8002650 <HAL_RCC_OscConfig+0x98>
 8002636:	4b8b      	ldr	r3, [pc, #556]	; (8002864 <HAL_RCC_OscConfig+0x2ac>)
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	4a8a      	ldr	r2, [pc, #552]	; (8002864 <HAL_RCC_OscConfig+0x2ac>)
 800263c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002640:	6013      	str	r3, [r2, #0]
 8002642:	4b88      	ldr	r3, [pc, #544]	; (8002864 <HAL_RCC_OscConfig+0x2ac>)
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	4a87      	ldr	r2, [pc, #540]	; (8002864 <HAL_RCC_OscConfig+0x2ac>)
 8002648:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800264c:	6013      	str	r3, [r2, #0]
 800264e:	e00b      	b.n	8002668 <HAL_RCC_OscConfig+0xb0>
 8002650:	4b84      	ldr	r3, [pc, #528]	; (8002864 <HAL_RCC_OscConfig+0x2ac>)
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	4a83      	ldr	r2, [pc, #524]	; (8002864 <HAL_RCC_OscConfig+0x2ac>)
 8002656:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800265a:	6013      	str	r3, [r2, #0]
 800265c:	4b81      	ldr	r3, [pc, #516]	; (8002864 <HAL_RCC_OscConfig+0x2ac>)
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	4a80      	ldr	r2, [pc, #512]	; (8002864 <HAL_RCC_OscConfig+0x2ac>)
 8002662:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002666:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	685b      	ldr	r3, [r3, #4]
 800266c:	2b00      	cmp	r3, #0
 800266e:	d013      	beq.n	8002698 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002670:	f7fe fba0 	bl	8000db4 <HAL_GetTick>
 8002674:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002676:	e008      	b.n	800268a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002678:	f7fe fb9c 	bl	8000db4 <HAL_GetTick>
 800267c:	4602      	mov	r2, r0
 800267e:	693b      	ldr	r3, [r7, #16]
 8002680:	1ad3      	subs	r3, r2, r3
 8002682:	2b64      	cmp	r3, #100	; 0x64
 8002684:	d901      	bls.n	800268a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002686:	2303      	movs	r3, #3
 8002688:	e204      	b.n	8002a94 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800268a:	4b76      	ldr	r3, [pc, #472]	; (8002864 <HAL_RCC_OscConfig+0x2ac>)
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002692:	2b00      	cmp	r3, #0
 8002694:	d0f0      	beq.n	8002678 <HAL_RCC_OscConfig+0xc0>
 8002696:	e014      	b.n	80026c2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002698:	f7fe fb8c 	bl	8000db4 <HAL_GetTick>
 800269c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800269e:	e008      	b.n	80026b2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80026a0:	f7fe fb88 	bl	8000db4 <HAL_GetTick>
 80026a4:	4602      	mov	r2, r0
 80026a6:	693b      	ldr	r3, [r7, #16]
 80026a8:	1ad3      	subs	r3, r2, r3
 80026aa:	2b64      	cmp	r3, #100	; 0x64
 80026ac:	d901      	bls.n	80026b2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80026ae:	2303      	movs	r3, #3
 80026b0:	e1f0      	b.n	8002a94 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80026b2:	4b6c      	ldr	r3, [pc, #432]	; (8002864 <HAL_RCC_OscConfig+0x2ac>)
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d1f0      	bne.n	80026a0 <HAL_RCC_OscConfig+0xe8>
 80026be:	e000      	b.n	80026c2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026c0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f003 0302 	and.w	r3, r3, #2
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d063      	beq.n	8002796 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80026ce:	4b65      	ldr	r3, [pc, #404]	; (8002864 <HAL_RCC_OscConfig+0x2ac>)
 80026d0:	689b      	ldr	r3, [r3, #8]
 80026d2:	f003 030c 	and.w	r3, r3, #12
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d00b      	beq.n	80026f2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80026da:	4b62      	ldr	r3, [pc, #392]	; (8002864 <HAL_RCC_OscConfig+0x2ac>)
 80026dc:	689b      	ldr	r3, [r3, #8]
 80026de:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80026e2:	2b08      	cmp	r3, #8
 80026e4:	d11c      	bne.n	8002720 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80026e6:	4b5f      	ldr	r3, [pc, #380]	; (8002864 <HAL_RCC_OscConfig+0x2ac>)
 80026e8:	685b      	ldr	r3, [r3, #4]
 80026ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d116      	bne.n	8002720 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80026f2:	4b5c      	ldr	r3, [pc, #368]	; (8002864 <HAL_RCC_OscConfig+0x2ac>)
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f003 0302 	and.w	r3, r3, #2
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d005      	beq.n	800270a <HAL_RCC_OscConfig+0x152>
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	68db      	ldr	r3, [r3, #12]
 8002702:	2b01      	cmp	r3, #1
 8002704:	d001      	beq.n	800270a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002706:	2301      	movs	r3, #1
 8002708:	e1c4      	b.n	8002a94 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800270a:	4b56      	ldr	r3, [pc, #344]	; (8002864 <HAL_RCC_OscConfig+0x2ac>)
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	691b      	ldr	r3, [r3, #16]
 8002716:	00db      	lsls	r3, r3, #3
 8002718:	4952      	ldr	r1, [pc, #328]	; (8002864 <HAL_RCC_OscConfig+0x2ac>)
 800271a:	4313      	orrs	r3, r2
 800271c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800271e:	e03a      	b.n	8002796 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	68db      	ldr	r3, [r3, #12]
 8002724:	2b00      	cmp	r3, #0
 8002726:	d020      	beq.n	800276a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002728:	4b4f      	ldr	r3, [pc, #316]	; (8002868 <HAL_RCC_OscConfig+0x2b0>)
 800272a:	2201      	movs	r2, #1
 800272c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800272e:	f7fe fb41 	bl	8000db4 <HAL_GetTick>
 8002732:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002734:	e008      	b.n	8002748 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002736:	f7fe fb3d 	bl	8000db4 <HAL_GetTick>
 800273a:	4602      	mov	r2, r0
 800273c:	693b      	ldr	r3, [r7, #16]
 800273e:	1ad3      	subs	r3, r2, r3
 8002740:	2b02      	cmp	r3, #2
 8002742:	d901      	bls.n	8002748 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002744:	2303      	movs	r3, #3
 8002746:	e1a5      	b.n	8002a94 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002748:	4b46      	ldr	r3, [pc, #280]	; (8002864 <HAL_RCC_OscConfig+0x2ac>)
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f003 0302 	and.w	r3, r3, #2
 8002750:	2b00      	cmp	r3, #0
 8002752:	d0f0      	beq.n	8002736 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002754:	4b43      	ldr	r3, [pc, #268]	; (8002864 <HAL_RCC_OscConfig+0x2ac>)
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	691b      	ldr	r3, [r3, #16]
 8002760:	00db      	lsls	r3, r3, #3
 8002762:	4940      	ldr	r1, [pc, #256]	; (8002864 <HAL_RCC_OscConfig+0x2ac>)
 8002764:	4313      	orrs	r3, r2
 8002766:	600b      	str	r3, [r1, #0]
 8002768:	e015      	b.n	8002796 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800276a:	4b3f      	ldr	r3, [pc, #252]	; (8002868 <HAL_RCC_OscConfig+0x2b0>)
 800276c:	2200      	movs	r2, #0
 800276e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002770:	f7fe fb20 	bl	8000db4 <HAL_GetTick>
 8002774:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002776:	e008      	b.n	800278a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002778:	f7fe fb1c 	bl	8000db4 <HAL_GetTick>
 800277c:	4602      	mov	r2, r0
 800277e:	693b      	ldr	r3, [r7, #16]
 8002780:	1ad3      	subs	r3, r2, r3
 8002782:	2b02      	cmp	r3, #2
 8002784:	d901      	bls.n	800278a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002786:	2303      	movs	r3, #3
 8002788:	e184      	b.n	8002a94 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800278a:	4b36      	ldr	r3, [pc, #216]	; (8002864 <HAL_RCC_OscConfig+0x2ac>)
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f003 0302 	and.w	r3, r3, #2
 8002792:	2b00      	cmp	r3, #0
 8002794:	d1f0      	bne.n	8002778 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f003 0308 	and.w	r3, r3, #8
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d030      	beq.n	8002804 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	695b      	ldr	r3, [r3, #20]
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d016      	beq.n	80027d8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80027aa:	4b30      	ldr	r3, [pc, #192]	; (800286c <HAL_RCC_OscConfig+0x2b4>)
 80027ac:	2201      	movs	r2, #1
 80027ae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027b0:	f7fe fb00 	bl	8000db4 <HAL_GetTick>
 80027b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80027b6:	e008      	b.n	80027ca <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80027b8:	f7fe fafc 	bl	8000db4 <HAL_GetTick>
 80027bc:	4602      	mov	r2, r0
 80027be:	693b      	ldr	r3, [r7, #16]
 80027c0:	1ad3      	subs	r3, r2, r3
 80027c2:	2b02      	cmp	r3, #2
 80027c4:	d901      	bls.n	80027ca <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80027c6:	2303      	movs	r3, #3
 80027c8:	e164      	b.n	8002a94 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80027ca:	4b26      	ldr	r3, [pc, #152]	; (8002864 <HAL_RCC_OscConfig+0x2ac>)
 80027cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80027ce:	f003 0302 	and.w	r3, r3, #2
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d0f0      	beq.n	80027b8 <HAL_RCC_OscConfig+0x200>
 80027d6:	e015      	b.n	8002804 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80027d8:	4b24      	ldr	r3, [pc, #144]	; (800286c <HAL_RCC_OscConfig+0x2b4>)
 80027da:	2200      	movs	r2, #0
 80027dc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027de:	f7fe fae9 	bl	8000db4 <HAL_GetTick>
 80027e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80027e4:	e008      	b.n	80027f8 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80027e6:	f7fe fae5 	bl	8000db4 <HAL_GetTick>
 80027ea:	4602      	mov	r2, r0
 80027ec:	693b      	ldr	r3, [r7, #16]
 80027ee:	1ad3      	subs	r3, r2, r3
 80027f0:	2b02      	cmp	r3, #2
 80027f2:	d901      	bls.n	80027f8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80027f4:	2303      	movs	r3, #3
 80027f6:	e14d      	b.n	8002a94 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80027f8:	4b1a      	ldr	r3, [pc, #104]	; (8002864 <HAL_RCC_OscConfig+0x2ac>)
 80027fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80027fc:	f003 0302 	and.w	r3, r3, #2
 8002800:	2b00      	cmp	r3, #0
 8002802:	d1f0      	bne.n	80027e6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f003 0304 	and.w	r3, r3, #4
 800280c:	2b00      	cmp	r3, #0
 800280e:	f000 80a0 	beq.w	8002952 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002812:	2300      	movs	r3, #0
 8002814:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002816:	4b13      	ldr	r3, [pc, #76]	; (8002864 <HAL_RCC_OscConfig+0x2ac>)
 8002818:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800281a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800281e:	2b00      	cmp	r3, #0
 8002820:	d10f      	bne.n	8002842 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002822:	2300      	movs	r3, #0
 8002824:	60bb      	str	r3, [r7, #8]
 8002826:	4b0f      	ldr	r3, [pc, #60]	; (8002864 <HAL_RCC_OscConfig+0x2ac>)
 8002828:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800282a:	4a0e      	ldr	r2, [pc, #56]	; (8002864 <HAL_RCC_OscConfig+0x2ac>)
 800282c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002830:	6413      	str	r3, [r2, #64]	; 0x40
 8002832:	4b0c      	ldr	r3, [pc, #48]	; (8002864 <HAL_RCC_OscConfig+0x2ac>)
 8002834:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002836:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800283a:	60bb      	str	r3, [r7, #8]
 800283c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800283e:	2301      	movs	r3, #1
 8002840:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002842:	4b0b      	ldr	r3, [pc, #44]	; (8002870 <HAL_RCC_OscConfig+0x2b8>)
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800284a:	2b00      	cmp	r3, #0
 800284c:	d121      	bne.n	8002892 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800284e:	4b08      	ldr	r3, [pc, #32]	; (8002870 <HAL_RCC_OscConfig+0x2b8>)
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	4a07      	ldr	r2, [pc, #28]	; (8002870 <HAL_RCC_OscConfig+0x2b8>)
 8002854:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002858:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800285a:	f7fe faab 	bl	8000db4 <HAL_GetTick>
 800285e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002860:	e011      	b.n	8002886 <HAL_RCC_OscConfig+0x2ce>
 8002862:	bf00      	nop
 8002864:	40023800 	.word	0x40023800
 8002868:	42470000 	.word	0x42470000
 800286c:	42470e80 	.word	0x42470e80
 8002870:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002874:	f7fe fa9e 	bl	8000db4 <HAL_GetTick>
 8002878:	4602      	mov	r2, r0
 800287a:	693b      	ldr	r3, [r7, #16]
 800287c:	1ad3      	subs	r3, r2, r3
 800287e:	2b02      	cmp	r3, #2
 8002880:	d901      	bls.n	8002886 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002882:	2303      	movs	r3, #3
 8002884:	e106      	b.n	8002a94 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002886:	4b85      	ldr	r3, [pc, #532]	; (8002a9c <HAL_RCC_OscConfig+0x4e4>)
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800288e:	2b00      	cmp	r3, #0
 8002890:	d0f0      	beq.n	8002874 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	689b      	ldr	r3, [r3, #8]
 8002896:	2b01      	cmp	r3, #1
 8002898:	d106      	bne.n	80028a8 <HAL_RCC_OscConfig+0x2f0>
 800289a:	4b81      	ldr	r3, [pc, #516]	; (8002aa0 <HAL_RCC_OscConfig+0x4e8>)
 800289c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800289e:	4a80      	ldr	r2, [pc, #512]	; (8002aa0 <HAL_RCC_OscConfig+0x4e8>)
 80028a0:	f043 0301 	orr.w	r3, r3, #1
 80028a4:	6713      	str	r3, [r2, #112]	; 0x70
 80028a6:	e01c      	b.n	80028e2 <HAL_RCC_OscConfig+0x32a>
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	689b      	ldr	r3, [r3, #8]
 80028ac:	2b05      	cmp	r3, #5
 80028ae:	d10c      	bne.n	80028ca <HAL_RCC_OscConfig+0x312>
 80028b0:	4b7b      	ldr	r3, [pc, #492]	; (8002aa0 <HAL_RCC_OscConfig+0x4e8>)
 80028b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028b4:	4a7a      	ldr	r2, [pc, #488]	; (8002aa0 <HAL_RCC_OscConfig+0x4e8>)
 80028b6:	f043 0304 	orr.w	r3, r3, #4
 80028ba:	6713      	str	r3, [r2, #112]	; 0x70
 80028bc:	4b78      	ldr	r3, [pc, #480]	; (8002aa0 <HAL_RCC_OscConfig+0x4e8>)
 80028be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028c0:	4a77      	ldr	r2, [pc, #476]	; (8002aa0 <HAL_RCC_OscConfig+0x4e8>)
 80028c2:	f043 0301 	orr.w	r3, r3, #1
 80028c6:	6713      	str	r3, [r2, #112]	; 0x70
 80028c8:	e00b      	b.n	80028e2 <HAL_RCC_OscConfig+0x32a>
 80028ca:	4b75      	ldr	r3, [pc, #468]	; (8002aa0 <HAL_RCC_OscConfig+0x4e8>)
 80028cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028ce:	4a74      	ldr	r2, [pc, #464]	; (8002aa0 <HAL_RCC_OscConfig+0x4e8>)
 80028d0:	f023 0301 	bic.w	r3, r3, #1
 80028d4:	6713      	str	r3, [r2, #112]	; 0x70
 80028d6:	4b72      	ldr	r3, [pc, #456]	; (8002aa0 <HAL_RCC_OscConfig+0x4e8>)
 80028d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028da:	4a71      	ldr	r2, [pc, #452]	; (8002aa0 <HAL_RCC_OscConfig+0x4e8>)
 80028dc:	f023 0304 	bic.w	r3, r3, #4
 80028e0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	689b      	ldr	r3, [r3, #8]
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d015      	beq.n	8002916 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028ea:	f7fe fa63 	bl	8000db4 <HAL_GetTick>
 80028ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028f0:	e00a      	b.n	8002908 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80028f2:	f7fe fa5f 	bl	8000db4 <HAL_GetTick>
 80028f6:	4602      	mov	r2, r0
 80028f8:	693b      	ldr	r3, [r7, #16]
 80028fa:	1ad3      	subs	r3, r2, r3
 80028fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8002900:	4293      	cmp	r3, r2
 8002902:	d901      	bls.n	8002908 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002904:	2303      	movs	r3, #3
 8002906:	e0c5      	b.n	8002a94 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002908:	4b65      	ldr	r3, [pc, #404]	; (8002aa0 <HAL_RCC_OscConfig+0x4e8>)
 800290a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800290c:	f003 0302 	and.w	r3, r3, #2
 8002910:	2b00      	cmp	r3, #0
 8002912:	d0ee      	beq.n	80028f2 <HAL_RCC_OscConfig+0x33a>
 8002914:	e014      	b.n	8002940 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002916:	f7fe fa4d 	bl	8000db4 <HAL_GetTick>
 800291a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800291c:	e00a      	b.n	8002934 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800291e:	f7fe fa49 	bl	8000db4 <HAL_GetTick>
 8002922:	4602      	mov	r2, r0
 8002924:	693b      	ldr	r3, [r7, #16]
 8002926:	1ad3      	subs	r3, r2, r3
 8002928:	f241 3288 	movw	r2, #5000	; 0x1388
 800292c:	4293      	cmp	r3, r2
 800292e:	d901      	bls.n	8002934 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002930:	2303      	movs	r3, #3
 8002932:	e0af      	b.n	8002a94 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002934:	4b5a      	ldr	r3, [pc, #360]	; (8002aa0 <HAL_RCC_OscConfig+0x4e8>)
 8002936:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002938:	f003 0302 	and.w	r3, r3, #2
 800293c:	2b00      	cmp	r3, #0
 800293e:	d1ee      	bne.n	800291e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002940:	7dfb      	ldrb	r3, [r7, #23]
 8002942:	2b01      	cmp	r3, #1
 8002944:	d105      	bne.n	8002952 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002946:	4b56      	ldr	r3, [pc, #344]	; (8002aa0 <HAL_RCC_OscConfig+0x4e8>)
 8002948:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800294a:	4a55      	ldr	r2, [pc, #340]	; (8002aa0 <HAL_RCC_OscConfig+0x4e8>)
 800294c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002950:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	699b      	ldr	r3, [r3, #24]
 8002956:	2b00      	cmp	r3, #0
 8002958:	f000 809b 	beq.w	8002a92 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800295c:	4b50      	ldr	r3, [pc, #320]	; (8002aa0 <HAL_RCC_OscConfig+0x4e8>)
 800295e:	689b      	ldr	r3, [r3, #8]
 8002960:	f003 030c 	and.w	r3, r3, #12
 8002964:	2b08      	cmp	r3, #8
 8002966:	d05c      	beq.n	8002a22 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	699b      	ldr	r3, [r3, #24]
 800296c:	2b02      	cmp	r3, #2
 800296e:	d141      	bne.n	80029f4 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002970:	4b4c      	ldr	r3, [pc, #304]	; (8002aa4 <HAL_RCC_OscConfig+0x4ec>)
 8002972:	2200      	movs	r2, #0
 8002974:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002976:	f7fe fa1d 	bl	8000db4 <HAL_GetTick>
 800297a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800297c:	e008      	b.n	8002990 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800297e:	f7fe fa19 	bl	8000db4 <HAL_GetTick>
 8002982:	4602      	mov	r2, r0
 8002984:	693b      	ldr	r3, [r7, #16]
 8002986:	1ad3      	subs	r3, r2, r3
 8002988:	2b02      	cmp	r3, #2
 800298a:	d901      	bls.n	8002990 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800298c:	2303      	movs	r3, #3
 800298e:	e081      	b.n	8002a94 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002990:	4b43      	ldr	r3, [pc, #268]	; (8002aa0 <HAL_RCC_OscConfig+0x4e8>)
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002998:	2b00      	cmp	r3, #0
 800299a:	d1f0      	bne.n	800297e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	69da      	ldr	r2, [r3, #28]
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	6a1b      	ldr	r3, [r3, #32]
 80029a4:	431a      	orrs	r2, r3
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029aa:	019b      	lsls	r3, r3, #6
 80029ac:	431a      	orrs	r2, r3
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029b2:	085b      	lsrs	r3, r3, #1
 80029b4:	3b01      	subs	r3, #1
 80029b6:	041b      	lsls	r3, r3, #16
 80029b8:	431a      	orrs	r2, r3
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029be:	061b      	lsls	r3, r3, #24
 80029c0:	4937      	ldr	r1, [pc, #220]	; (8002aa0 <HAL_RCC_OscConfig+0x4e8>)
 80029c2:	4313      	orrs	r3, r2
 80029c4:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80029c6:	4b37      	ldr	r3, [pc, #220]	; (8002aa4 <HAL_RCC_OscConfig+0x4ec>)
 80029c8:	2201      	movs	r2, #1
 80029ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029cc:	f7fe f9f2 	bl	8000db4 <HAL_GetTick>
 80029d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80029d2:	e008      	b.n	80029e6 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80029d4:	f7fe f9ee 	bl	8000db4 <HAL_GetTick>
 80029d8:	4602      	mov	r2, r0
 80029da:	693b      	ldr	r3, [r7, #16]
 80029dc:	1ad3      	subs	r3, r2, r3
 80029de:	2b02      	cmp	r3, #2
 80029e0:	d901      	bls.n	80029e6 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80029e2:	2303      	movs	r3, #3
 80029e4:	e056      	b.n	8002a94 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80029e6:	4b2e      	ldr	r3, [pc, #184]	; (8002aa0 <HAL_RCC_OscConfig+0x4e8>)
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d0f0      	beq.n	80029d4 <HAL_RCC_OscConfig+0x41c>
 80029f2:	e04e      	b.n	8002a92 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029f4:	4b2b      	ldr	r3, [pc, #172]	; (8002aa4 <HAL_RCC_OscConfig+0x4ec>)
 80029f6:	2200      	movs	r2, #0
 80029f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029fa:	f7fe f9db 	bl	8000db4 <HAL_GetTick>
 80029fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a00:	e008      	b.n	8002a14 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a02:	f7fe f9d7 	bl	8000db4 <HAL_GetTick>
 8002a06:	4602      	mov	r2, r0
 8002a08:	693b      	ldr	r3, [r7, #16]
 8002a0a:	1ad3      	subs	r3, r2, r3
 8002a0c:	2b02      	cmp	r3, #2
 8002a0e:	d901      	bls.n	8002a14 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002a10:	2303      	movs	r3, #3
 8002a12:	e03f      	b.n	8002a94 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a14:	4b22      	ldr	r3, [pc, #136]	; (8002aa0 <HAL_RCC_OscConfig+0x4e8>)
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d1f0      	bne.n	8002a02 <HAL_RCC_OscConfig+0x44a>
 8002a20:	e037      	b.n	8002a92 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	699b      	ldr	r3, [r3, #24]
 8002a26:	2b01      	cmp	r3, #1
 8002a28:	d101      	bne.n	8002a2e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002a2a:	2301      	movs	r3, #1
 8002a2c:	e032      	b.n	8002a94 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002a2e:	4b1c      	ldr	r3, [pc, #112]	; (8002aa0 <HAL_RCC_OscConfig+0x4e8>)
 8002a30:	685b      	ldr	r3, [r3, #4]
 8002a32:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	699b      	ldr	r3, [r3, #24]
 8002a38:	2b01      	cmp	r3, #1
 8002a3a:	d028      	beq.n	8002a8e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002a46:	429a      	cmp	r2, r3
 8002a48:	d121      	bne.n	8002a8e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a54:	429a      	cmp	r2, r3
 8002a56:	d11a      	bne.n	8002a8e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002a58:	68fa      	ldr	r2, [r7, #12]
 8002a5a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002a5e:	4013      	ands	r3, r2
 8002a60:	687a      	ldr	r2, [r7, #4]
 8002a62:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002a64:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002a66:	4293      	cmp	r3, r2
 8002a68:	d111      	bne.n	8002a8e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a74:	085b      	lsrs	r3, r3, #1
 8002a76:	3b01      	subs	r3, #1
 8002a78:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002a7a:	429a      	cmp	r2, r3
 8002a7c:	d107      	bne.n	8002a8e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a88:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002a8a:	429a      	cmp	r2, r3
 8002a8c:	d001      	beq.n	8002a92 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8002a8e:	2301      	movs	r3, #1
 8002a90:	e000      	b.n	8002a94 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8002a92:	2300      	movs	r3, #0
}
 8002a94:	4618      	mov	r0, r3
 8002a96:	3718      	adds	r7, #24
 8002a98:	46bd      	mov	sp, r7
 8002a9a:	bd80      	pop	{r7, pc}
 8002a9c:	40007000 	.word	0x40007000
 8002aa0:	40023800 	.word	0x40023800
 8002aa4:	42470060 	.word	0x42470060

08002aa8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	b084      	sub	sp, #16
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	6078      	str	r0, [r7, #4]
 8002ab0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d101      	bne.n	8002abc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002ab8:	2301      	movs	r3, #1
 8002aba:	e0cc      	b.n	8002c56 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002abc:	4b68      	ldr	r3, [pc, #416]	; (8002c60 <HAL_RCC_ClockConfig+0x1b8>)
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f003 0307 	and.w	r3, r3, #7
 8002ac4:	683a      	ldr	r2, [r7, #0]
 8002ac6:	429a      	cmp	r2, r3
 8002ac8:	d90c      	bls.n	8002ae4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002aca:	4b65      	ldr	r3, [pc, #404]	; (8002c60 <HAL_RCC_ClockConfig+0x1b8>)
 8002acc:	683a      	ldr	r2, [r7, #0]
 8002ace:	b2d2      	uxtb	r2, r2
 8002ad0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ad2:	4b63      	ldr	r3, [pc, #396]	; (8002c60 <HAL_RCC_ClockConfig+0x1b8>)
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f003 0307 	and.w	r3, r3, #7
 8002ada:	683a      	ldr	r2, [r7, #0]
 8002adc:	429a      	cmp	r2, r3
 8002ade:	d001      	beq.n	8002ae4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002ae0:	2301      	movs	r3, #1
 8002ae2:	e0b8      	b.n	8002c56 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	f003 0302 	and.w	r3, r3, #2
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d020      	beq.n	8002b32 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f003 0304 	and.w	r3, r3, #4
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d005      	beq.n	8002b08 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002afc:	4b59      	ldr	r3, [pc, #356]	; (8002c64 <HAL_RCC_ClockConfig+0x1bc>)
 8002afe:	689b      	ldr	r3, [r3, #8]
 8002b00:	4a58      	ldr	r2, [pc, #352]	; (8002c64 <HAL_RCC_ClockConfig+0x1bc>)
 8002b02:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002b06:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f003 0308 	and.w	r3, r3, #8
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d005      	beq.n	8002b20 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002b14:	4b53      	ldr	r3, [pc, #332]	; (8002c64 <HAL_RCC_ClockConfig+0x1bc>)
 8002b16:	689b      	ldr	r3, [r3, #8]
 8002b18:	4a52      	ldr	r2, [pc, #328]	; (8002c64 <HAL_RCC_ClockConfig+0x1bc>)
 8002b1a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002b1e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b20:	4b50      	ldr	r3, [pc, #320]	; (8002c64 <HAL_RCC_ClockConfig+0x1bc>)
 8002b22:	689b      	ldr	r3, [r3, #8]
 8002b24:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	689b      	ldr	r3, [r3, #8]
 8002b2c:	494d      	ldr	r1, [pc, #308]	; (8002c64 <HAL_RCC_ClockConfig+0x1bc>)
 8002b2e:	4313      	orrs	r3, r2
 8002b30:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f003 0301 	and.w	r3, r3, #1
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d044      	beq.n	8002bc8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	685b      	ldr	r3, [r3, #4]
 8002b42:	2b01      	cmp	r3, #1
 8002b44:	d107      	bne.n	8002b56 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b46:	4b47      	ldr	r3, [pc, #284]	; (8002c64 <HAL_RCC_ClockConfig+0x1bc>)
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d119      	bne.n	8002b86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b52:	2301      	movs	r3, #1
 8002b54:	e07f      	b.n	8002c56 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	685b      	ldr	r3, [r3, #4]
 8002b5a:	2b02      	cmp	r3, #2
 8002b5c:	d003      	beq.n	8002b66 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002b62:	2b03      	cmp	r3, #3
 8002b64:	d107      	bne.n	8002b76 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b66:	4b3f      	ldr	r3, [pc, #252]	; (8002c64 <HAL_RCC_ClockConfig+0x1bc>)
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d109      	bne.n	8002b86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b72:	2301      	movs	r3, #1
 8002b74:	e06f      	b.n	8002c56 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b76:	4b3b      	ldr	r3, [pc, #236]	; (8002c64 <HAL_RCC_ClockConfig+0x1bc>)
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f003 0302 	and.w	r3, r3, #2
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d101      	bne.n	8002b86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b82:	2301      	movs	r3, #1
 8002b84:	e067      	b.n	8002c56 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002b86:	4b37      	ldr	r3, [pc, #220]	; (8002c64 <HAL_RCC_ClockConfig+0x1bc>)
 8002b88:	689b      	ldr	r3, [r3, #8]
 8002b8a:	f023 0203 	bic.w	r2, r3, #3
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	685b      	ldr	r3, [r3, #4]
 8002b92:	4934      	ldr	r1, [pc, #208]	; (8002c64 <HAL_RCC_ClockConfig+0x1bc>)
 8002b94:	4313      	orrs	r3, r2
 8002b96:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002b98:	f7fe f90c 	bl	8000db4 <HAL_GetTick>
 8002b9c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b9e:	e00a      	b.n	8002bb6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ba0:	f7fe f908 	bl	8000db4 <HAL_GetTick>
 8002ba4:	4602      	mov	r2, r0
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	1ad3      	subs	r3, r2, r3
 8002baa:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bae:	4293      	cmp	r3, r2
 8002bb0:	d901      	bls.n	8002bb6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002bb2:	2303      	movs	r3, #3
 8002bb4:	e04f      	b.n	8002c56 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002bb6:	4b2b      	ldr	r3, [pc, #172]	; (8002c64 <HAL_RCC_ClockConfig+0x1bc>)
 8002bb8:	689b      	ldr	r3, [r3, #8]
 8002bba:	f003 020c 	and.w	r2, r3, #12
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	685b      	ldr	r3, [r3, #4]
 8002bc2:	009b      	lsls	r3, r3, #2
 8002bc4:	429a      	cmp	r2, r3
 8002bc6:	d1eb      	bne.n	8002ba0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002bc8:	4b25      	ldr	r3, [pc, #148]	; (8002c60 <HAL_RCC_ClockConfig+0x1b8>)
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f003 0307 	and.w	r3, r3, #7
 8002bd0:	683a      	ldr	r2, [r7, #0]
 8002bd2:	429a      	cmp	r2, r3
 8002bd4:	d20c      	bcs.n	8002bf0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002bd6:	4b22      	ldr	r3, [pc, #136]	; (8002c60 <HAL_RCC_ClockConfig+0x1b8>)
 8002bd8:	683a      	ldr	r2, [r7, #0]
 8002bda:	b2d2      	uxtb	r2, r2
 8002bdc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002bde:	4b20      	ldr	r3, [pc, #128]	; (8002c60 <HAL_RCC_ClockConfig+0x1b8>)
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f003 0307 	and.w	r3, r3, #7
 8002be6:	683a      	ldr	r2, [r7, #0]
 8002be8:	429a      	cmp	r2, r3
 8002bea:	d001      	beq.n	8002bf0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002bec:	2301      	movs	r3, #1
 8002bee:	e032      	b.n	8002c56 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f003 0304 	and.w	r3, r3, #4
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d008      	beq.n	8002c0e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002bfc:	4b19      	ldr	r3, [pc, #100]	; (8002c64 <HAL_RCC_ClockConfig+0x1bc>)
 8002bfe:	689b      	ldr	r3, [r3, #8]
 8002c00:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	68db      	ldr	r3, [r3, #12]
 8002c08:	4916      	ldr	r1, [pc, #88]	; (8002c64 <HAL_RCC_ClockConfig+0x1bc>)
 8002c0a:	4313      	orrs	r3, r2
 8002c0c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f003 0308 	and.w	r3, r3, #8
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d009      	beq.n	8002c2e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002c1a:	4b12      	ldr	r3, [pc, #72]	; (8002c64 <HAL_RCC_ClockConfig+0x1bc>)
 8002c1c:	689b      	ldr	r3, [r3, #8]
 8002c1e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	691b      	ldr	r3, [r3, #16]
 8002c26:	00db      	lsls	r3, r3, #3
 8002c28:	490e      	ldr	r1, [pc, #56]	; (8002c64 <HAL_RCC_ClockConfig+0x1bc>)
 8002c2a:	4313      	orrs	r3, r2
 8002c2c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002c2e:	f000 f821 	bl	8002c74 <HAL_RCC_GetSysClockFreq>
 8002c32:	4602      	mov	r2, r0
 8002c34:	4b0b      	ldr	r3, [pc, #44]	; (8002c64 <HAL_RCC_ClockConfig+0x1bc>)
 8002c36:	689b      	ldr	r3, [r3, #8]
 8002c38:	091b      	lsrs	r3, r3, #4
 8002c3a:	f003 030f 	and.w	r3, r3, #15
 8002c3e:	490a      	ldr	r1, [pc, #40]	; (8002c68 <HAL_RCC_ClockConfig+0x1c0>)
 8002c40:	5ccb      	ldrb	r3, [r1, r3]
 8002c42:	fa22 f303 	lsr.w	r3, r2, r3
 8002c46:	4a09      	ldr	r2, [pc, #36]	; (8002c6c <HAL_RCC_ClockConfig+0x1c4>)
 8002c48:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002c4a:	4b09      	ldr	r3, [pc, #36]	; (8002c70 <HAL_RCC_ClockConfig+0x1c8>)
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	4618      	mov	r0, r3
 8002c50:	f7fd ff34 	bl	8000abc <HAL_InitTick>

  return HAL_OK;
 8002c54:	2300      	movs	r3, #0
}
 8002c56:	4618      	mov	r0, r3
 8002c58:	3710      	adds	r7, #16
 8002c5a:	46bd      	mov	sp, r7
 8002c5c:	bd80      	pop	{r7, pc}
 8002c5e:	bf00      	nop
 8002c60:	40023c00 	.word	0x40023c00
 8002c64:	40023800 	.word	0x40023800
 8002c68:	08009cd4 	.word	0x08009cd4
 8002c6c:	20000000 	.word	0x20000000
 8002c70:	20000004 	.word	0x20000004

08002c74 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c74:	b5b0      	push	{r4, r5, r7, lr}
 8002c76:	b084      	sub	sp, #16
 8002c78:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002c7a:	2100      	movs	r1, #0
 8002c7c:	6079      	str	r1, [r7, #4]
 8002c7e:	2100      	movs	r1, #0
 8002c80:	60f9      	str	r1, [r7, #12]
 8002c82:	2100      	movs	r1, #0
 8002c84:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002c86:	2100      	movs	r1, #0
 8002c88:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002c8a:	4952      	ldr	r1, [pc, #328]	; (8002dd4 <HAL_RCC_GetSysClockFreq+0x160>)
 8002c8c:	6889      	ldr	r1, [r1, #8]
 8002c8e:	f001 010c 	and.w	r1, r1, #12
 8002c92:	2908      	cmp	r1, #8
 8002c94:	d00d      	beq.n	8002cb2 <HAL_RCC_GetSysClockFreq+0x3e>
 8002c96:	2908      	cmp	r1, #8
 8002c98:	f200 8094 	bhi.w	8002dc4 <HAL_RCC_GetSysClockFreq+0x150>
 8002c9c:	2900      	cmp	r1, #0
 8002c9e:	d002      	beq.n	8002ca6 <HAL_RCC_GetSysClockFreq+0x32>
 8002ca0:	2904      	cmp	r1, #4
 8002ca2:	d003      	beq.n	8002cac <HAL_RCC_GetSysClockFreq+0x38>
 8002ca4:	e08e      	b.n	8002dc4 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002ca6:	4b4c      	ldr	r3, [pc, #304]	; (8002dd8 <HAL_RCC_GetSysClockFreq+0x164>)
 8002ca8:	60bb      	str	r3, [r7, #8]
       break;
 8002caa:	e08e      	b.n	8002dca <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002cac:	4b4b      	ldr	r3, [pc, #300]	; (8002ddc <HAL_RCC_GetSysClockFreq+0x168>)
 8002cae:	60bb      	str	r3, [r7, #8]
      break;
 8002cb0:	e08b      	b.n	8002dca <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002cb2:	4948      	ldr	r1, [pc, #288]	; (8002dd4 <HAL_RCC_GetSysClockFreq+0x160>)
 8002cb4:	6849      	ldr	r1, [r1, #4]
 8002cb6:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8002cba:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002cbc:	4945      	ldr	r1, [pc, #276]	; (8002dd4 <HAL_RCC_GetSysClockFreq+0x160>)
 8002cbe:	6849      	ldr	r1, [r1, #4]
 8002cc0:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8002cc4:	2900      	cmp	r1, #0
 8002cc6:	d024      	beq.n	8002d12 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002cc8:	4942      	ldr	r1, [pc, #264]	; (8002dd4 <HAL_RCC_GetSysClockFreq+0x160>)
 8002cca:	6849      	ldr	r1, [r1, #4]
 8002ccc:	0989      	lsrs	r1, r1, #6
 8002cce:	4608      	mov	r0, r1
 8002cd0:	f04f 0100 	mov.w	r1, #0
 8002cd4:	f240 14ff 	movw	r4, #511	; 0x1ff
 8002cd8:	f04f 0500 	mov.w	r5, #0
 8002cdc:	ea00 0204 	and.w	r2, r0, r4
 8002ce0:	ea01 0305 	and.w	r3, r1, r5
 8002ce4:	493d      	ldr	r1, [pc, #244]	; (8002ddc <HAL_RCC_GetSysClockFreq+0x168>)
 8002ce6:	fb01 f003 	mul.w	r0, r1, r3
 8002cea:	2100      	movs	r1, #0
 8002cec:	fb01 f102 	mul.w	r1, r1, r2
 8002cf0:	1844      	adds	r4, r0, r1
 8002cf2:	493a      	ldr	r1, [pc, #232]	; (8002ddc <HAL_RCC_GetSysClockFreq+0x168>)
 8002cf4:	fba2 0101 	umull	r0, r1, r2, r1
 8002cf8:	1863      	adds	r3, r4, r1
 8002cfa:	4619      	mov	r1, r3
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	461a      	mov	r2, r3
 8002d00:	f04f 0300 	mov.w	r3, #0
 8002d04:	f7fd fac4 	bl	8000290 <__aeabi_uldivmod>
 8002d08:	4602      	mov	r2, r0
 8002d0a:	460b      	mov	r3, r1
 8002d0c:	4613      	mov	r3, r2
 8002d0e:	60fb      	str	r3, [r7, #12]
 8002d10:	e04a      	b.n	8002da8 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d12:	4b30      	ldr	r3, [pc, #192]	; (8002dd4 <HAL_RCC_GetSysClockFreq+0x160>)
 8002d14:	685b      	ldr	r3, [r3, #4]
 8002d16:	099b      	lsrs	r3, r3, #6
 8002d18:	461a      	mov	r2, r3
 8002d1a:	f04f 0300 	mov.w	r3, #0
 8002d1e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002d22:	f04f 0100 	mov.w	r1, #0
 8002d26:	ea02 0400 	and.w	r4, r2, r0
 8002d2a:	ea03 0501 	and.w	r5, r3, r1
 8002d2e:	4620      	mov	r0, r4
 8002d30:	4629      	mov	r1, r5
 8002d32:	f04f 0200 	mov.w	r2, #0
 8002d36:	f04f 0300 	mov.w	r3, #0
 8002d3a:	014b      	lsls	r3, r1, #5
 8002d3c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002d40:	0142      	lsls	r2, r0, #5
 8002d42:	4610      	mov	r0, r2
 8002d44:	4619      	mov	r1, r3
 8002d46:	1b00      	subs	r0, r0, r4
 8002d48:	eb61 0105 	sbc.w	r1, r1, r5
 8002d4c:	f04f 0200 	mov.w	r2, #0
 8002d50:	f04f 0300 	mov.w	r3, #0
 8002d54:	018b      	lsls	r3, r1, #6
 8002d56:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002d5a:	0182      	lsls	r2, r0, #6
 8002d5c:	1a12      	subs	r2, r2, r0
 8002d5e:	eb63 0301 	sbc.w	r3, r3, r1
 8002d62:	f04f 0000 	mov.w	r0, #0
 8002d66:	f04f 0100 	mov.w	r1, #0
 8002d6a:	00d9      	lsls	r1, r3, #3
 8002d6c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002d70:	00d0      	lsls	r0, r2, #3
 8002d72:	4602      	mov	r2, r0
 8002d74:	460b      	mov	r3, r1
 8002d76:	1912      	adds	r2, r2, r4
 8002d78:	eb45 0303 	adc.w	r3, r5, r3
 8002d7c:	f04f 0000 	mov.w	r0, #0
 8002d80:	f04f 0100 	mov.w	r1, #0
 8002d84:	0299      	lsls	r1, r3, #10
 8002d86:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8002d8a:	0290      	lsls	r0, r2, #10
 8002d8c:	4602      	mov	r2, r0
 8002d8e:	460b      	mov	r3, r1
 8002d90:	4610      	mov	r0, r2
 8002d92:	4619      	mov	r1, r3
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	461a      	mov	r2, r3
 8002d98:	f04f 0300 	mov.w	r3, #0
 8002d9c:	f7fd fa78 	bl	8000290 <__aeabi_uldivmod>
 8002da0:	4602      	mov	r2, r0
 8002da2:	460b      	mov	r3, r1
 8002da4:	4613      	mov	r3, r2
 8002da6:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002da8:	4b0a      	ldr	r3, [pc, #40]	; (8002dd4 <HAL_RCC_GetSysClockFreq+0x160>)
 8002daa:	685b      	ldr	r3, [r3, #4]
 8002dac:	0c1b      	lsrs	r3, r3, #16
 8002dae:	f003 0303 	and.w	r3, r3, #3
 8002db2:	3301      	adds	r3, #1
 8002db4:	005b      	lsls	r3, r3, #1
 8002db6:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002db8:	68fa      	ldr	r2, [r7, #12]
 8002dba:	683b      	ldr	r3, [r7, #0]
 8002dbc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002dc0:	60bb      	str	r3, [r7, #8]
      break;
 8002dc2:	e002      	b.n	8002dca <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002dc4:	4b04      	ldr	r3, [pc, #16]	; (8002dd8 <HAL_RCC_GetSysClockFreq+0x164>)
 8002dc6:	60bb      	str	r3, [r7, #8]
      break;
 8002dc8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002dca:	68bb      	ldr	r3, [r7, #8]
}
 8002dcc:	4618      	mov	r0, r3
 8002dce:	3710      	adds	r7, #16
 8002dd0:	46bd      	mov	sp, r7
 8002dd2:	bdb0      	pop	{r4, r5, r7, pc}
 8002dd4:	40023800 	.word	0x40023800
 8002dd8:	00f42400 	.word	0x00f42400
 8002ddc:	017d7840 	.word	0x017d7840

08002de0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002de0:	b480      	push	{r7}
 8002de2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002de4:	4b03      	ldr	r3, [pc, #12]	; (8002df4 <HAL_RCC_GetHCLKFreq+0x14>)
 8002de6:	681b      	ldr	r3, [r3, #0]
}
 8002de8:	4618      	mov	r0, r3
 8002dea:	46bd      	mov	sp, r7
 8002dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df0:	4770      	bx	lr
 8002df2:	bf00      	nop
 8002df4:	20000000 	.word	0x20000000

08002df8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002dfc:	f7ff fff0 	bl	8002de0 <HAL_RCC_GetHCLKFreq>
 8002e00:	4602      	mov	r2, r0
 8002e02:	4b05      	ldr	r3, [pc, #20]	; (8002e18 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002e04:	689b      	ldr	r3, [r3, #8]
 8002e06:	0a9b      	lsrs	r3, r3, #10
 8002e08:	f003 0307 	and.w	r3, r3, #7
 8002e0c:	4903      	ldr	r1, [pc, #12]	; (8002e1c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002e0e:	5ccb      	ldrb	r3, [r1, r3]
 8002e10:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002e14:	4618      	mov	r0, r3
 8002e16:	bd80      	pop	{r7, pc}
 8002e18:	40023800 	.word	0x40023800
 8002e1c:	08009ce4 	.word	0x08009ce4

08002e20 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002e20:	b580      	push	{r7, lr}
 8002e22:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002e24:	f7ff ffdc 	bl	8002de0 <HAL_RCC_GetHCLKFreq>
 8002e28:	4602      	mov	r2, r0
 8002e2a:	4b05      	ldr	r3, [pc, #20]	; (8002e40 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002e2c:	689b      	ldr	r3, [r3, #8]
 8002e2e:	0b5b      	lsrs	r3, r3, #13
 8002e30:	f003 0307 	and.w	r3, r3, #7
 8002e34:	4903      	ldr	r1, [pc, #12]	; (8002e44 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002e36:	5ccb      	ldrb	r3, [r1, r3]
 8002e38:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002e3c:	4618      	mov	r0, r3
 8002e3e:	bd80      	pop	{r7, pc}
 8002e40:	40023800 	.word	0x40023800
 8002e44:	08009ce4 	.word	0x08009ce4

08002e48 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002e48:	b480      	push	{r7}
 8002e4a:	b083      	sub	sp, #12
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	6078      	str	r0, [r7, #4]
 8002e50:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	220f      	movs	r2, #15
 8002e56:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002e58:	4b12      	ldr	r3, [pc, #72]	; (8002ea4 <HAL_RCC_GetClockConfig+0x5c>)
 8002e5a:	689b      	ldr	r3, [r3, #8]
 8002e5c:	f003 0203 	and.w	r2, r3, #3
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002e64:	4b0f      	ldr	r3, [pc, #60]	; (8002ea4 <HAL_RCC_GetClockConfig+0x5c>)
 8002e66:	689b      	ldr	r3, [r3, #8]
 8002e68:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002e70:	4b0c      	ldr	r3, [pc, #48]	; (8002ea4 <HAL_RCC_GetClockConfig+0x5c>)
 8002e72:	689b      	ldr	r3, [r3, #8]
 8002e74:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002e7c:	4b09      	ldr	r3, [pc, #36]	; (8002ea4 <HAL_RCC_GetClockConfig+0x5c>)
 8002e7e:	689b      	ldr	r3, [r3, #8]
 8002e80:	08db      	lsrs	r3, r3, #3
 8002e82:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002e8a:	4b07      	ldr	r3, [pc, #28]	; (8002ea8 <HAL_RCC_GetClockConfig+0x60>)
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f003 0207 	and.w	r2, r3, #7
 8002e92:	683b      	ldr	r3, [r7, #0]
 8002e94:	601a      	str	r2, [r3, #0]
}
 8002e96:	bf00      	nop
 8002e98:	370c      	adds	r7, #12
 8002e9a:	46bd      	mov	sp, r7
 8002e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea0:	4770      	bx	lr
 8002ea2:	bf00      	nop
 8002ea4:	40023800 	.word	0x40023800
 8002ea8:	40023c00 	.word	0x40023c00

08002eac <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002eac:	b580      	push	{r7, lr}
 8002eae:	b082      	sub	sp, #8
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d101      	bne.n	8002ebe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002eba:	2301      	movs	r3, #1
 8002ebc:	e041      	b.n	8002f42 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ec4:	b2db      	uxtb	r3, r3
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d106      	bne.n	8002ed8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	2200      	movs	r2, #0
 8002ece:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002ed2:	6878      	ldr	r0, [r7, #4]
 8002ed4:	f000 f839 	bl	8002f4a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	2202      	movs	r2, #2
 8002edc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681a      	ldr	r2, [r3, #0]
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	3304      	adds	r3, #4
 8002ee8:	4619      	mov	r1, r3
 8002eea:	4610      	mov	r0, r2
 8002eec:	f000 f9ca 	bl	8003284 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	2201      	movs	r2, #1
 8002ef4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	2201      	movs	r2, #1
 8002efc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	2201      	movs	r2, #1
 8002f04:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	2201      	movs	r2, #1
 8002f0c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	2201      	movs	r2, #1
 8002f14:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	2201      	movs	r2, #1
 8002f1c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	2201      	movs	r2, #1
 8002f24:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	2201      	movs	r2, #1
 8002f2c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	2201      	movs	r2, #1
 8002f34:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	2201      	movs	r2, #1
 8002f3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002f40:	2300      	movs	r3, #0
}
 8002f42:	4618      	mov	r0, r3
 8002f44:	3708      	adds	r7, #8
 8002f46:	46bd      	mov	sp, r7
 8002f48:	bd80      	pop	{r7, pc}

08002f4a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002f4a:	b480      	push	{r7}
 8002f4c:	b083      	sub	sp, #12
 8002f4e:	af00      	add	r7, sp, #0
 8002f50:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002f52:	bf00      	nop
 8002f54:	370c      	adds	r7, #12
 8002f56:	46bd      	mov	sp, r7
 8002f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f5c:	4770      	bx	lr
	...

08002f60 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002f60:	b480      	push	{r7}
 8002f62:	b085      	sub	sp, #20
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f6e:	b2db      	uxtb	r3, r3
 8002f70:	2b01      	cmp	r3, #1
 8002f72:	d001      	beq.n	8002f78 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002f74:	2301      	movs	r3, #1
 8002f76:	e044      	b.n	8003002 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	2202      	movs	r2, #2
 8002f7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	68da      	ldr	r2, [r3, #12]
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f042 0201 	orr.w	r2, r2, #1
 8002f8e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	4a1e      	ldr	r2, [pc, #120]	; (8003010 <HAL_TIM_Base_Start_IT+0xb0>)
 8002f96:	4293      	cmp	r3, r2
 8002f98:	d018      	beq.n	8002fcc <HAL_TIM_Base_Start_IT+0x6c>
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002fa2:	d013      	beq.n	8002fcc <HAL_TIM_Base_Start_IT+0x6c>
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	4a1a      	ldr	r2, [pc, #104]	; (8003014 <HAL_TIM_Base_Start_IT+0xb4>)
 8002faa:	4293      	cmp	r3, r2
 8002fac:	d00e      	beq.n	8002fcc <HAL_TIM_Base_Start_IT+0x6c>
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	4a19      	ldr	r2, [pc, #100]	; (8003018 <HAL_TIM_Base_Start_IT+0xb8>)
 8002fb4:	4293      	cmp	r3, r2
 8002fb6:	d009      	beq.n	8002fcc <HAL_TIM_Base_Start_IT+0x6c>
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	4a17      	ldr	r2, [pc, #92]	; (800301c <HAL_TIM_Base_Start_IT+0xbc>)
 8002fbe:	4293      	cmp	r3, r2
 8002fc0:	d004      	beq.n	8002fcc <HAL_TIM_Base_Start_IT+0x6c>
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	4a16      	ldr	r2, [pc, #88]	; (8003020 <HAL_TIM_Base_Start_IT+0xc0>)
 8002fc8:	4293      	cmp	r3, r2
 8002fca:	d111      	bne.n	8002ff0 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	689b      	ldr	r3, [r3, #8]
 8002fd2:	f003 0307 	and.w	r3, r3, #7
 8002fd6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	2b06      	cmp	r3, #6
 8002fdc:	d010      	beq.n	8003000 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	681a      	ldr	r2, [r3, #0]
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f042 0201 	orr.w	r2, r2, #1
 8002fec:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002fee:	e007      	b.n	8003000 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	681a      	ldr	r2, [r3, #0]
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f042 0201 	orr.w	r2, r2, #1
 8002ffe:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003000:	2300      	movs	r3, #0
}
 8003002:	4618      	mov	r0, r3
 8003004:	3714      	adds	r7, #20
 8003006:	46bd      	mov	sp, r7
 8003008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800300c:	4770      	bx	lr
 800300e:	bf00      	nop
 8003010:	40010000 	.word	0x40010000
 8003014:	40000400 	.word	0x40000400
 8003018:	40000800 	.word	0x40000800
 800301c:	40000c00 	.word	0x40000c00
 8003020:	40014000 	.word	0x40014000

08003024 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003024:	b580      	push	{r7, lr}
 8003026:	b082      	sub	sp, #8
 8003028:	af00      	add	r7, sp, #0
 800302a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	691b      	ldr	r3, [r3, #16]
 8003032:	f003 0302 	and.w	r3, r3, #2
 8003036:	2b02      	cmp	r3, #2
 8003038:	d122      	bne.n	8003080 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	68db      	ldr	r3, [r3, #12]
 8003040:	f003 0302 	and.w	r3, r3, #2
 8003044:	2b02      	cmp	r3, #2
 8003046:	d11b      	bne.n	8003080 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f06f 0202 	mvn.w	r2, #2
 8003050:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	2201      	movs	r2, #1
 8003056:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	699b      	ldr	r3, [r3, #24]
 800305e:	f003 0303 	and.w	r3, r3, #3
 8003062:	2b00      	cmp	r3, #0
 8003064:	d003      	beq.n	800306e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003066:	6878      	ldr	r0, [r7, #4]
 8003068:	f000 f8ee 	bl	8003248 <HAL_TIM_IC_CaptureCallback>
 800306c:	e005      	b.n	800307a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800306e:	6878      	ldr	r0, [r7, #4]
 8003070:	f000 f8e0 	bl	8003234 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003074:	6878      	ldr	r0, [r7, #4]
 8003076:	f000 f8f1 	bl	800325c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	2200      	movs	r2, #0
 800307e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	691b      	ldr	r3, [r3, #16]
 8003086:	f003 0304 	and.w	r3, r3, #4
 800308a:	2b04      	cmp	r3, #4
 800308c:	d122      	bne.n	80030d4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	68db      	ldr	r3, [r3, #12]
 8003094:	f003 0304 	and.w	r3, r3, #4
 8003098:	2b04      	cmp	r3, #4
 800309a:	d11b      	bne.n	80030d4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f06f 0204 	mvn.w	r2, #4
 80030a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	2202      	movs	r2, #2
 80030aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	699b      	ldr	r3, [r3, #24]
 80030b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d003      	beq.n	80030c2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80030ba:	6878      	ldr	r0, [r7, #4]
 80030bc:	f000 f8c4 	bl	8003248 <HAL_TIM_IC_CaptureCallback>
 80030c0:	e005      	b.n	80030ce <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80030c2:	6878      	ldr	r0, [r7, #4]
 80030c4:	f000 f8b6 	bl	8003234 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80030c8:	6878      	ldr	r0, [r7, #4]
 80030ca:	f000 f8c7 	bl	800325c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	2200      	movs	r2, #0
 80030d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	691b      	ldr	r3, [r3, #16]
 80030da:	f003 0308 	and.w	r3, r3, #8
 80030de:	2b08      	cmp	r3, #8
 80030e0:	d122      	bne.n	8003128 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	68db      	ldr	r3, [r3, #12]
 80030e8:	f003 0308 	and.w	r3, r3, #8
 80030ec:	2b08      	cmp	r3, #8
 80030ee:	d11b      	bne.n	8003128 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f06f 0208 	mvn.w	r2, #8
 80030f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	2204      	movs	r2, #4
 80030fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	69db      	ldr	r3, [r3, #28]
 8003106:	f003 0303 	and.w	r3, r3, #3
 800310a:	2b00      	cmp	r3, #0
 800310c:	d003      	beq.n	8003116 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800310e:	6878      	ldr	r0, [r7, #4]
 8003110:	f000 f89a 	bl	8003248 <HAL_TIM_IC_CaptureCallback>
 8003114:	e005      	b.n	8003122 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003116:	6878      	ldr	r0, [r7, #4]
 8003118:	f000 f88c 	bl	8003234 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800311c:	6878      	ldr	r0, [r7, #4]
 800311e:	f000 f89d 	bl	800325c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	2200      	movs	r2, #0
 8003126:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	691b      	ldr	r3, [r3, #16]
 800312e:	f003 0310 	and.w	r3, r3, #16
 8003132:	2b10      	cmp	r3, #16
 8003134:	d122      	bne.n	800317c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	68db      	ldr	r3, [r3, #12]
 800313c:	f003 0310 	and.w	r3, r3, #16
 8003140:	2b10      	cmp	r3, #16
 8003142:	d11b      	bne.n	800317c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	f06f 0210 	mvn.w	r2, #16
 800314c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	2208      	movs	r2, #8
 8003152:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	69db      	ldr	r3, [r3, #28]
 800315a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800315e:	2b00      	cmp	r3, #0
 8003160:	d003      	beq.n	800316a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003162:	6878      	ldr	r0, [r7, #4]
 8003164:	f000 f870 	bl	8003248 <HAL_TIM_IC_CaptureCallback>
 8003168:	e005      	b.n	8003176 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800316a:	6878      	ldr	r0, [r7, #4]
 800316c:	f000 f862 	bl	8003234 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003170:	6878      	ldr	r0, [r7, #4]
 8003172:	f000 f873 	bl	800325c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	2200      	movs	r2, #0
 800317a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	691b      	ldr	r3, [r3, #16]
 8003182:	f003 0301 	and.w	r3, r3, #1
 8003186:	2b01      	cmp	r3, #1
 8003188:	d10e      	bne.n	80031a8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	68db      	ldr	r3, [r3, #12]
 8003190:	f003 0301 	and.w	r3, r3, #1
 8003194:	2b01      	cmp	r3, #1
 8003196:	d107      	bne.n	80031a8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f06f 0201 	mvn.w	r2, #1
 80031a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80031a2:	6878      	ldr	r0, [r7, #4]
 80031a4:	f7fd fba2 	bl	80008ec <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	691b      	ldr	r3, [r3, #16]
 80031ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031b2:	2b80      	cmp	r3, #128	; 0x80
 80031b4:	d10e      	bne.n	80031d4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	68db      	ldr	r3, [r3, #12]
 80031bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031c0:	2b80      	cmp	r3, #128	; 0x80
 80031c2:	d107      	bne.n	80031d4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80031cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80031ce:	6878      	ldr	r0, [r7, #4]
 80031d0:	f000 f8e2 	bl	8003398 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	691b      	ldr	r3, [r3, #16]
 80031da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031de:	2b40      	cmp	r3, #64	; 0x40
 80031e0:	d10e      	bne.n	8003200 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	68db      	ldr	r3, [r3, #12]
 80031e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031ec:	2b40      	cmp	r3, #64	; 0x40
 80031ee:	d107      	bne.n	8003200 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80031f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80031fa:	6878      	ldr	r0, [r7, #4]
 80031fc:	f000 f838 	bl	8003270 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	691b      	ldr	r3, [r3, #16]
 8003206:	f003 0320 	and.w	r3, r3, #32
 800320a:	2b20      	cmp	r3, #32
 800320c:	d10e      	bne.n	800322c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	68db      	ldr	r3, [r3, #12]
 8003214:	f003 0320 	and.w	r3, r3, #32
 8003218:	2b20      	cmp	r3, #32
 800321a:	d107      	bne.n	800322c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	f06f 0220 	mvn.w	r2, #32
 8003224:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003226:	6878      	ldr	r0, [r7, #4]
 8003228:	f000 f8ac 	bl	8003384 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800322c:	bf00      	nop
 800322e:	3708      	adds	r7, #8
 8003230:	46bd      	mov	sp, r7
 8003232:	bd80      	pop	{r7, pc}

08003234 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003234:	b480      	push	{r7}
 8003236:	b083      	sub	sp, #12
 8003238:	af00      	add	r7, sp, #0
 800323a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800323c:	bf00      	nop
 800323e:	370c      	adds	r7, #12
 8003240:	46bd      	mov	sp, r7
 8003242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003246:	4770      	bx	lr

08003248 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003248:	b480      	push	{r7}
 800324a:	b083      	sub	sp, #12
 800324c:	af00      	add	r7, sp, #0
 800324e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003250:	bf00      	nop
 8003252:	370c      	adds	r7, #12
 8003254:	46bd      	mov	sp, r7
 8003256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800325a:	4770      	bx	lr

0800325c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800325c:	b480      	push	{r7}
 800325e:	b083      	sub	sp, #12
 8003260:	af00      	add	r7, sp, #0
 8003262:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003264:	bf00      	nop
 8003266:	370c      	adds	r7, #12
 8003268:	46bd      	mov	sp, r7
 800326a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800326e:	4770      	bx	lr

08003270 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003270:	b480      	push	{r7}
 8003272:	b083      	sub	sp, #12
 8003274:	af00      	add	r7, sp, #0
 8003276:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003278:	bf00      	nop
 800327a:	370c      	adds	r7, #12
 800327c:	46bd      	mov	sp, r7
 800327e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003282:	4770      	bx	lr

08003284 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003284:	b480      	push	{r7}
 8003286:	b085      	sub	sp, #20
 8003288:	af00      	add	r7, sp, #0
 800328a:	6078      	str	r0, [r7, #4]
 800328c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	4a34      	ldr	r2, [pc, #208]	; (8003368 <TIM_Base_SetConfig+0xe4>)
 8003298:	4293      	cmp	r3, r2
 800329a:	d00f      	beq.n	80032bc <TIM_Base_SetConfig+0x38>
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032a2:	d00b      	beq.n	80032bc <TIM_Base_SetConfig+0x38>
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	4a31      	ldr	r2, [pc, #196]	; (800336c <TIM_Base_SetConfig+0xe8>)
 80032a8:	4293      	cmp	r3, r2
 80032aa:	d007      	beq.n	80032bc <TIM_Base_SetConfig+0x38>
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	4a30      	ldr	r2, [pc, #192]	; (8003370 <TIM_Base_SetConfig+0xec>)
 80032b0:	4293      	cmp	r3, r2
 80032b2:	d003      	beq.n	80032bc <TIM_Base_SetConfig+0x38>
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	4a2f      	ldr	r2, [pc, #188]	; (8003374 <TIM_Base_SetConfig+0xf0>)
 80032b8:	4293      	cmp	r3, r2
 80032ba:	d108      	bne.n	80032ce <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80032c2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80032c4:	683b      	ldr	r3, [r7, #0]
 80032c6:	685b      	ldr	r3, [r3, #4]
 80032c8:	68fa      	ldr	r2, [r7, #12]
 80032ca:	4313      	orrs	r3, r2
 80032cc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	4a25      	ldr	r2, [pc, #148]	; (8003368 <TIM_Base_SetConfig+0xe4>)
 80032d2:	4293      	cmp	r3, r2
 80032d4:	d01b      	beq.n	800330e <TIM_Base_SetConfig+0x8a>
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032dc:	d017      	beq.n	800330e <TIM_Base_SetConfig+0x8a>
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	4a22      	ldr	r2, [pc, #136]	; (800336c <TIM_Base_SetConfig+0xe8>)
 80032e2:	4293      	cmp	r3, r2
 80032e4:	d013      	beq.n	800330e <TIM_Base_SetConfig+0x8a>
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	4a21      	ldr	r2, [pc, #132]	; (8003370 <TIM_Base_SetConfig+0xec>)
 80032ea:	4293      	cmp	r3, r2
 80032ec:	d00f      	beq.n	800330e <TIM_Base_SetConfig+0x8a>
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	4a20      	ldr	r2, [pc, #128]	; (8003374 <TIM_Base_SetConfig+0xf0>)
 80032f2:	4293      	cmp	r3, r2
 80032f4:	d00b      	beq.n	800330e <TIM_Base_SetConfig+0x8a>
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	4a1f      	ldr	r2, [pc, #124]	; (8003378 <TIM_Base_SetConfig+0xf4>)
 80032fa:	4293      	cmp	r3, r2
 80032fc:	d007      	beq.n	800330e <TIM_Base_SetConfig+0x8a>
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	4a1e      	ldr	r2, [pc, #120]	; (800337c <TIM_Base_SetConfig+0xf8>)
 8003302:	4293      	cmp	r3, r2
 8003304:	d003      	beq.n	800330e <TIM_Base_SetConfig+0x8a>
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	4a1d      	ldr	r2, [pc, #116]	; (8003380 <TIM_Base_SetConfig+0xfc>)
 800330a:	4293      	cmp	r3, r2
 800330c:	d108      	bne.n	8003320 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003314:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003316:	683b      	ldr	r3, [r7, #0]
 8003318:	68db      	ldr	r3, [r3, #12]
 800331a:	68fa      	ldr	r2, [r7, #12]
 800331c:	4313      	orrs	r3, r2
 800331e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003326:	683b      	ldr	r3, [r7, #0]
 8003328:	695b      	ldr	r3, [r3, #20]
 800332a:	4313      	orrs	r3, r2
 800332c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	68fa      	ldr	r2, [r7, #12]
 8003332:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003334:	683b      	ldr	r3, [r7, #0]
 8003336:	689a      	ldr	r2, [r3, #8]
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800333c:	683b      	ldr	r3, [r7, #0]
 800333e:	681a      	ldr	r2, [r3, #0]
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	4a08      	ldr	r2, [pc, #32]	; (8003368 <TIM_Base_SetConfig+0xe4>)
 8003348:	4293      	cmp	r3, r2
 800334a:	d103      	bne.n	8003354 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800334c:	683b      	ldr	r3, [r7, #0]
 800334e:	691a      	ldr	r2, [r3, #16]
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	2201      	movs	r2, #1
 8003358:	615a      	str	r2, [r3, #20]
}
 800335a:	bf00      	nop
 800335c:	3714      	adds	r7, #20
 800335e:	46bd      	mov	sp, r7
 8003360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003364:	4770      	bx	lr
 8003366:	bf00      	nop
 8003368:	40010000 	.word	0x40010000
 800336c:	40000400 	.word	0x40000400
 8003370:	40000800 	.word	0x40000800
 8003374:	40000c00 	.word	0x40000c00
 8003378:	40014000 	.word	0x40014000
 800337c:	40014400 	.word	0x40014400
 8003380:	40014800 	.word	0x40014800

08003384 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003384:	b480      	push	{r7}
 8003386:	b083      	sub	sp, #12
 8003388:	af00      	add	r7, sp, #0
 800338a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800338c:	bf00      	nop
 800338e:	370c      	adds	r7, #12
 8003390:	46bd      	mov	sp, r7
 8003392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003396:	4770      	bx	lr

08003398 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003398:	b480      	push	{r7}
 800339a:	b083      	sub	sp, #12
 800339c:	af00      	add	r7, sp, #0
 800339e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80033a0:	bf00      	nop
 80033a2:	370c      	adds	r7, #12
 80033a4:	46bd      	mov	sp, r7
 80033a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033aa:	4770      	bx	lr

080033ac <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80033ac:	b580      	push	{r7, lr}
 80033ae:	b082      	sub	sp, #8
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d101      	bne.n	80033be <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80033ba:	2301      	movs	r3, #1
 80033bc:	e03f      	b.n	800343e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80033c4:	b2db      	uxtb	r3, r3
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d106      	bne.n	80033d8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	2200      	movs	r2, #0
 80033ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80033d2:	6878      	ldr	r0, [r7, #4]
 80033d4:	f7fd face 	bl	8000974 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	2224      	movs	r2, #36	; 0x24
 80033dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	68da      	ldr	r2, [r3, #12]
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80033ee:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80033f0:	6878      	ldr	r0, [r7, #4]
 80033f2:	f000 f929 	bl	8003648 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	691a      	ldr	r2, [r3, #16]
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003404:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	695a      	ldr	r2, [r3, #20]
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003414:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	68da      	ldr	r2, [r3, #12]
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003424:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	2200      	movs	r2, #0
 800342a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	2220      	movs	r2, #32
 8003430:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	2220      	movs	r2, #32
 8003438:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800343c:	2300      	movs	r3, #0
}
 800343e:	4618      	mov	r0, r3
 8003440:	3708      	adds	r7, #8
 8003442:	46bd      	mov	sp, r7
 8003444:	bd80      	pop	{r7, pc}

08003446 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003446:	b580      	push	{r7, lr}
 8003448:	b08a      	sub	sp, #40	; 0x28
 800344a:	af02      	add	r7, sp, #8
 800344c:	60f8      	str	r0, [r7, #12]
 800344e:	60b9      	str	r1, [r7, #8]
 8003450:	603b      	str	r3, [r7, #0]
 8003452:	4613      	mov	r3, r2
 8003454:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003456:	2300      	movs	r3, #0
 8003458:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003460:	b2db      	uxtb	r3, r3
 8003462:	2b20      	cmp	r3, #32
 8003464:	d17c      	bne.n	8003560 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003466:	68bb      	ldr	r3, [r7, #8]
 8003468:	2b00      	cmp	r3, #0
 800346a:	d002      	beq.n	8003472 <HAL_UART_Transmit+0x2c>
 800346c:	88fb      	ldrh	r3, [r7, #6]
 800346e:	2b00      	cmp	r3, #0
 8003470:	d101      	bne.n	8003476 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003472:	2301      	movs	r3, #1
 8003474:	e075      	b.n	8003562 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800347c:	2b01      	cmp	r3, #1
 800347e:	d101      	bne.n	8003484 <HAL_UART_Transmit+0x3e>
 8003480:	2302      	movs	r3, #2
 8003482:	e06e      	b.n	8003562 <HAL_UART_Transmit+0x11c>
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	2201      	movs	r2, #1
 8003488:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	2200      	movs	r2, #0
 8003490:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	2221      	movs	r2, #33	; 0x21
 8003496:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800349a:	f7fd fc8b 	bl	8000db4 <HAL_GetTick>
 800349e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	88fa      	ldrh	r2, [r7, #6]
 80034a4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	88fa      	ldrh	r2, [r7, #6]
 80034aa:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	689b      	ldr	r3, [r3, #8]
 80034b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80034b4:	d108      	bne.n	80034c8 <HAL_UART_Transmit+0x82>
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	691b      	ldr	r3, [r3, #16]
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d104      	bne.n	80034c8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80034be:	2300      	movs	r3, #0
 80034c0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80034c2:	68bb      	ldr	r3, [r7, #8]
 80034c4:	61bb      	str	r3, [r7, #24]
 80034c6:	e003      	b.n	80034d0 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80034c8:	68bb      	ldr	r3, [r7, #8]
 80034ca:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80034cc:	2300      	movs	r3, #0
 80034ce:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	2200      	movs	r2, #0
 80034d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80034d8:	e02a      	b.n	8003530 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80034da:	683b      	ldr	r3, [r7, #0]
 80034dc:	9300      	str	r3, [sp, #0]
 80034de:	697b      	ldr	r3, [r7, #20]
 80034e0:	2200      	movs	r2, #0
 80034e2:	2180      	movs	r1, #128	; 0x80
 80034e4:	68f8      	ldr	r0, [r7, #12]
 80034e6:	f000 f840 	bl	800356a <UART_WaitOnFlagUntilTimeout>
 80034ea:	4603      	mov	r3, r0
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d001      	beq.n	80034f4 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80034f0:	2303      	movs	r3, #3
 80034f2:	e036      	b.n	8003562 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80034f4:	69fb      	ldr	r3, [r7, #28]
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d10b      	bne.n	8003512 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80034fa:	69bb      	ldr	r3, [r7, #24]
 80034fc:	881b      	ldrh	r3, [r3, #0]
 80034fe:	461a      	mov	r2, r3
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003508:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800350a:	69bb      	ldr	r3, [r7, #24]
 800350c:	3302      	adds	r3, #2
 800350e:	61bb      	str	r3, [r7, #24]
 8003510:	e007      	b.n	8003522 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003512:	69fb      	ldr	r3, [r7, #28]
 8003514:	781a      	ldrb	r2, [r3, #0]
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800351c:	69fb      	ldr	r3, [r7, #28]
 800351e:	3301      	adds	r3, #1
 8003520:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003526:	b29b      	uxth	r3, r3
 8003528:	3b01      	subs	r3, #1
 800352a:	b29a      	uxth	r2, r3
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003534:	b29b      	uxth	r3, r3
 8003536:	2b00      	cmp	r3, #0
 8003538:	d1cf      	bne.n	80034da <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800353a:	683b      	ldr	r3, [r7, #0]
 800353c:	9300      	str	r3, [sp, #0]
 800353e:	697b      	ldr	r3, [r7, #20]
 8003540:	2200      	movs	r2, #0
 8003542:	2140      	movs	r1, #64	; 0x40
 8003544:	68f8      	ldr	r0, [r7, #12]
 8003546:	f000 f810 	bl	800356a <UART_WaitOnFlagUntilTimeout>
 800354a:	4603      	mov	r3, r0
 800354c:	2b00      	cmp	r3, #0
 800354e:	d001      	beq.n	8003554 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003550:	2303      	movs	r3, #3
 8003552:	e006      	b.n	8003562 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	2220      	movs	r2, #32
 8003558:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800355c:	2300      	movs	r3, #0
 800355e:	e000      	b.n	8003562 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003560:	2302      	movs	r3, #2
  }
}
 8003562:	4618      	mov	r0, r3
 8003564:	3720      	adds	r7, #32
 8003566:	46bd      	mov	sp, r7
 8003568:	bd80      	pop	{r7, pc}

0800356a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800356a:	b580      	push	{r7, lr}
 800356c:	b090      	sub	sp, #64	; 0x40
 800356e:	af00      	add	r7, sp, #0
 8003570:	60f8      	str	r0, [r7, #12]
 8003572:	60b9      	str	r1, [r7, #8]
 8003574:	603b      	str	r3, [r7, #0]
 8003576:	4613      	mov	r3, r2
 8003578:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800357a:	e050      	b.n	800361e <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800357c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800357e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003582:	d04c      	beq.n	800361e <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003584:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003586:	2b00      	cmp	r3, #0
 8003588:	d007      	beq.n	800359a <UART_WaitOnFlagUntilTimeout+0x30>
 800358a:	f7fd fc13 	bl	8000db4 <HAL_GetTick>
 800358e:	4602      	mov	r2, r0
 8003590:	683b      	ldr	r3, [r7, #0]
 8003592:	1ad3      	subs	r3, r2, r3
 8003594:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003596:	429a      	cmp	r2, r3
 8003598:	d241      	bcs.n	800361e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	330c      	adds	r3, #12
 80035a0:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035a4:	e853 3f00 	ldrex	r3, [r3]
 80035a8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80035aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035ac:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80035b0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	330c      	adds	r3, #12
 80035b8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80035ba:	637a      	str	r2, [r7, #52]	; 0x34
 80035bc:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035be:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80035c0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80035c2:	e841 2300 	strex	r3, r2, [r1]
 80035c6:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80035c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d1e5      	bne.n	800359a <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	3314      	adds	r3, #20
 80035d4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035d6:	697b      	ldr	r3, [r7, #20]
 80035d8:	e853 3f00 	ldrex	r3, [r3]
 80035dc:	613b      	str	r3, [r7, #16]
   return(result);
 80035de:	693b      	ldr	r3, [r7, #16]
 80035e0:	f023 0301 	bic.w	r3, r3, #1
 80035e4:	63bb      	str	r3, [r7, #56]	; 0x38
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	3314      	adds	r3, #20
 80035ec:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80035ee:	623a      	str	r2, [r7, #32]
 80035f0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035f2:	69f9      	ldr	r1, [r7, #28]
 80035f4:	6a3a      	ldr	r2, [r7, #32]
 80035f6:	e841 2300 	strex	r3, r2, [r1]
 80035fa:	61bb      	str	r3, [r7, #24]
   return(result);
 80035fc:	69bb      	ldr	r3, [r7, #24]
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d1e5      	bne.n	80035ce <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	2220      	movs	r2, #32
 8003606:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	2220      	movs	r2, #32
 800360e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	2200      	movs	r2, #0
 8003616:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800361a:	2303      	movs	r3, #3
 800361c:	e00f      	b.n	800363e <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	681a      	ldr	r2, [r3, #0]
 8003624:	68bb      	ldr	r3, [r7, #8]
 8003626:	4013      	ands	r3, r2
 8003628:	68ba      	ldr	r2, [r7, #8]
 800362a:	429a      	cmp	r2, r3
 800362c:	bf0c      	ite	eq
 800362e:	2301      	moveq	r3, #1
 8003630:	2300      	movne	r3, #0
 8003632:	b2db      	uxtb	r3, r3
 8003634:	461a      	mov	r2, r3
 8003636:	79fb      	ldrb	r3, [r7, #7]
 8003638:	429a      	cmp	r2, r3
 800363a:	d09f      	beq.n	800357c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800363c:	2300      	movs	r3, #0
}
 800363e:	4618      	mov	r0, r3
 8003640:	3740      	adds	r7, #64	; 0x40
 8003642:	46bd      	mov	sp, r7
 8003644:	bd80      	pop	{r7, pc}
	...

08003648 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003648:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800364c:	b09f      	sub	sp, #124	; 0x7c
 800364e:	af00      	add	r7, sp, #0
 8003650:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003652:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	691b      	ldr	r3, [r3, #16]
 8003658:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800365c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800365e:	68d9      	ldr	r1, [r3, #12]
 8003660:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003662:	681a      	ldr	r2, [r3, #0]
 8003664:	ea40 0301 	orr.w	r3, r0, r1
 8003668:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800366a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800366c:	689a      	ldr	r2, [r3, #8]
 800366e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003670:	691b      	ldr	r3, [r3, #16]
 8003672:	431a      	orrs	r2, r3
 8003674:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003676:	695b      	ldr	r3, [r3, #20]
 8003678:	431a      	orrs	r2, r3
 800367a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800367c:	69db      	ldr	r3, [r3, #28]
 800367e:	4313      	orrs	r3, r2
 8003680:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8003682:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	68db      	ldr	r3, [r3, #12]
 8003688:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800368c:	f021 010c 	bic.w	r1, r1, #12
 8003690:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003692:	681a      	ldr	r2, [r3, #0]
 8003694:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003696:	430b      	orrs	r3, r1
 8003698:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800369a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	695b      	ldr	r3, [r3, #20]
 80036a0:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80036a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80036a6:	6999      	ldr	r1, [r3, #24]
 80036a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80036aa:	681a      	ldr	r2, [r3, #0]
 80036ac:	ea40 0301 	orr.w	r3, r0, r1
 80036b0:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80036b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80036b4:	681a      	ldr	r2, [r3, #0]
 80036b6:	4bc5      	ldr	r3, [pc, #788]	; (80039cc <UART_SetConfig+0x384>)
 80036b8:	429a      	cmp	r2, r3
 80036ba:	d004      	beq.n	80036c6 <UART_SetConfig+0x7e>
 80036bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80036be:	681a      	ldr	r2, [r3, #0]
 80036c0:	4bc3      	ldr	r3, [pc, #780]	; (80039d0 <UART_SetConfig+0x388>)
 80036c2:	429a      	cmp	r2, r3
 80036c4:	d103      	bne.n	80036ce <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80036c6:	f7ff fbab 	bl	8002e20 <HAL_RCC_GetPCLK2Freq>
 80036ca:	6778      	str	r0, [r7, #116]	; 0x74
 80036cc:	e002      	b.n	80036d4 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80036ce:	f7ff fb93 	bl	8002df8 <HAL_RCC_GetPCLK1Freq>
 80036d2:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80036d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80036d6:	69db      	ldr	r3, [r3, #28]
 80036d8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80036dc:	f040 80b6 	bne.w	800384c <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80036e0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80036e2:	461c      	mov	r4, r3
 80036e4:	f04f 0500 	mov.w	r5, #0
 80036e8:	4622      	mov	r2, r4
 80036ea:	462b      	mov	r3, r5
 80036ec:	1891      	adds	r1, r2, r2
 80036ee:	6439      	str	r1, [r7, #64]	; 0x40
 80036f0:	415b      	adcs	r3, r3
 80036f2:	647b      	str	r3, [r7, #68]	; 0x44
 80036f4:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80036f8:	1912      	adds	r2, r2, r4
 80036fa:	eb45 0303 	adc.w	r3, r5, r3
 80036fe:	f04f 0000 	mov.w	r0, #0
 8003702:	f04f 0100 	mov.w	r1, #0
 8003706:	00d9      	lsls	r1, r3, #3
 8003708:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800370c:	00d0      	lsls	r0, r2, #3
 800370e:	4602      	mov	r2, r0
 8003710:	460b      	mov	r3, r1
 8003712:	1911      	adds	r1, r2, r4
 8003714:	6639      	str	r1, [r7, #96]	; 0x60
 8003716:	416b      	adcs	r3, r5
 8003718:	667b      	str	r3, [r7, #100]	; 0x64
 800371a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800371c:	685b      	ldr	r3, [r3, #4]
 800371e:	461a      	mov	r2, r3
 8003720:	f04f 0300 	mov.w	r3, #0
 8003724:	1891      	adds	r1, r2, r2
 8003726:	63b9      	str	r1, [r7, #56]	; 0x38
 8003728:	415b      	adcs	r3, r3
 800372a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800372c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003730:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8003734:	f7fc fdac 	bl	8000290 <__aeabi_uldivmod>
 8003738:	4602      	mov	r2, r0
 800373a:	460b      	mov	r3, r1
 800373c:	4ba5      	ldr	r3, [pc, #660]	; (80039d4 <UART_SetConfig+0x38c>)
 800373e:	fba3 2302 	umull	r2, r3, r3, r2
 8003742:	095b      	lsrs	r3, r3, #5
 8003744:	011e      	lsls	r6, r3, #4
 8003746:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003748:	461c      	mov	r4, r3
 800374a:	f04f 0500 	mov.w	r5, #0
 800374e:	4622      	mov	r2, r4
 8003750:	462b      	mov	r3, r5
 8003752:	1891      	adds	r1, r2, r2
 8003754:	6339      	str	r1, [r7, #48]	; 0x30
 8003756:	415b      	adcs	r3, r3
 8003758:	637b      	str	r3, [r7, #52]	; 0x34
 800375a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800375e:	1912      	adds	r2, r2, r4
 8003760:	eb45 0303 	adc.w	r3, r5, r3
 8003764:	f04f 0000 	mov.w	r0, #0
 8003768:	f04f 0100 	mov.w	r1, #0
 800376c:	00d9      	lsls	r1, r3, #3
 800376e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003772:	00d0      	lsls	r0, r2, #3
 8003774:	4602      	mov	r2, r0
 8003776:	460b      	mov	r3, r1
 8003778:	1911      	adds	r1, r2, r4
 800377a:	65b9      	str	r1, [r7, #88]	; 0x58
 800377c:	416b      	adcs	r3, r5
 800377e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003780:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003782:	685b      	ldr	r3, [r3, #4]
 8003784:	461a      	mov	r2, r3
 8003786:	f04f 0300 	mov.w	r3, #0
 800378a:	1891      	adds	r1, r2, r2
 800378c:	62b9      	str	r1, [r7, #40]	; 0x28
 800378e:	415b      	adcs	r3, r3
 8003790:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003792:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003796:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800379a:	f7fc fd79 	bl	8000290 <__aeabi_uldivmod>
 800379e:	4602      	mov	r2, r0
 80037a0:	460b      	mov	r3, r1
 80037a2:	4b8c      	ldr	r3, [pc, #560]	; (80039d4 <UART_SetConfig+0x38c>)
 80037a4:	fba3 1302 	umull	r1, r3, r3, r2
 80037a8:	095b      	lsrs	r3, r3, #5
 80037aa:	2164      	movs	r1, #100	; 0x64
 80037ac:	fb01 f303 	mul.w	r3, r1, r3
 80037b0:	1ad3      	subs	r3, r2, r3
 80037b2:	00db      	lsls	r3, r3, #3
 80037b4:	3332      	adds	r3, #50	; 0x32
 80037b6:	4a87      	ldr	r2, [pc, #540]	; (80039d4 <UART_SetConfig+0x38c>)
 80037b8:	fba2 2303 	umull	r2, r3, r2, r3
 80037bc:	095b      	lsrs	r3, r3, #5
 80037be:	005b      	lsls	r3, r3, #1
 80037c0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80037c4:	441e      	add	r6, r3
 80037c6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80037c8:	4618      	mov	r0, r3
 80037ca:	f04f 0100 	mov.w	r1, #0
 80037ce:	4602      	mov	r2, r0
 80037d0:	460b      	mov	r3, r1
 80037d2:	1894      	adds	r4, r2, r2
 80037d4:	623c      	str	r4, [r7, #32]
 80037d6:	415b      	adcs	r3, r3
 80037d8:	627b      	str	r3, [r7, #36]	; 0x24
 80037da:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80037de:	1812      	adds	r2, r2, r0
 80037e0:	eb41 0303 	adc.w	r3, r1, r3
 80037e4:	f04f 0400 	mov.w	r4, #0
 80037e8:	f04f 0500 	mov.w	r5, #0
 80037ec:	00dd      	lsls	r5, r3, #3
 80037ee:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80037f2:	00d4      	lsls	r4, r2, #3
 80037f4:	4622      	mov	r2, r4
 80037f6:	462b      	mov	r3, r5
 80037f8:	1814      	adds	r4, r2, r0
 80037fa:	653c      	str	r4, [r7, #80]	; 0x50
 80037fc:	414b      	adcs	r3, r1
 80037fe:	657b      	str	r3, [r7, #84]	; 0x54
 8003800:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003802:	685b      	ldr	r3, [r3, #4]
 8003804:	461a      	mov	r2, r3
 8003806:	f04f 0300 	mov.w	r3, #0
 800380a:	1891      	adds	r1, r2, r2
 800380c:	61b9      	str	r1, [r7, #24]
 800380e:	415b      	adcs	r3, r3
 8003810:	61fb      	str	r3, [r7, #28]
 8003812:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003816:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800381a:	f7fc fd39 	bl	8000290 <__aeabi_uldivmod>
 800381e:	4602      	mov	r2, r0
 8003820:	460b      	mov	r3, r1
 8003822:	4b6c      	ldr	r3, [pc, #432]	; (80039d4 <UART_SetConfig+0x38c>)
 8003824:	fba3 1302 	umull	r1, r3, r3, r2
 8003828:	095b      	lsrs	r3, r3, #5
 800382a:	2164      	movs	r1, #100	; 0x64
 800382c:	fb01 f303 	mul.w	r3, r1, r3
 8003830:	1ad3      	subs	r3, r2, r3
 8003832:	00db      	lsls	r3, r3, #3
 8003834:	3332      	adds	r3, #50	; 0x32
 8003836:	4a67      	ldr	r2, [pc, #412]	; (80039d4 <UART_SetConfig+0x38c>)
 8003838:	fba2 2303 	umull	r2, r3, r2, r3
 800383c:	095b      	lsrs	r3, r3, #5
 800383e:	f003 0207 	and.w	r2, r3, #7
 8003842:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	4432      	add	r2, r6
 8003848:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800384a:	e0b9      	b.n	80039c0 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800384c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800384e:	461c      	mov	r4, r3
 8003850:	f04f 0500 	mov.w	r5, #0
 8003854:	4622      	mov	r2, r4
 8003856:	462b      	mov	r3, r5
 8003858:	1891      	adds	r1, r2, r2
 800385a:	6139      	str	r1, [r7, #16]
 800385c:	415b      	adcs	r3, r3
 800385e:	617b      	str	r3, [r7, #20]
 8003860:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003864:	1912      	adds	r2, r2, r4
 8003866:	eb45 0303 	adc.w	r3, r5, r3
 800386a:	f04f 0000 	mov.w	r0, #0
 800386e:	f04f 0100 	mov.w	r1, #0
 8003872:	00d9      	lsls	r1, r3, #3
 8003874:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003878:	00d0      	lsls	r0, r2, #3
 800387a:	4602      	mov	r2, r0
 800387c:	460b      	mov	r3, r1
 800387e:	eb12 0804 	adds.w	r8, r2, r4
 8003882:	eb43 0905 	adc.w	r9, r3, r5
 8003886:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003888:	685b      	ldr	r3, [r3, #4]
 800388a:	4618      	mov	r0, r3
 800388c:	f04f 0100 	mov.w	r1, #0
 8003890:	f04f 0200 	mov.w	r2, #0
 8003894:	f04f 0300 	mov.w	r3, #0
 8003898:	008b      	lsls	r3, r1, #2
 800389a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800389e:	0082      	lsls	r2, r0, #2
 80038a0:	4640      	mov	r0, r8
 80038a2:	4649      	mov	r1, r9
 80038a4:	f7fc fcf4 	bl	8000290 <__aeabi_uldivmod>
 80038a8:	4602      	mov	r2, r0
 80038aa:	460b      	mov	r3, r1
 80038ac:	4b49      	ldr	r3, [pc, #292]	; (80039d4 <UART_SetConfig+0x38c>)
 80038ae:	fba3 2302 	umull	r2, r3, r3, r2
 80038b2:	095b      	lsrs	r3, r3, #5
 80038b4:	011e      	lsls	r6, r3, #4
 80038b6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80038b8:	4618      	mov	r0, r3
 80038ba:	f04f 0100 	mov.w	r1, #0
 80038be:	4602      	mov	r2, r0
 80038c0:	460b      	mov	r3, r1
 80038c2:	1894      	adds	r4, r2, r2
 80038c4:	60bc      	str	r4, [r7, #8]
 80038c6:	415b      	adcs	r3, r3
 80038c8:	60fb      	str	r3, [r7, #12]
 80038ca:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80038ce:	1812      	adds	r2, r2, r0
 80038d0:	eb41 0303 	adc.w	r3, r1, r3
 80038d4:	f04f 0400 	mov.w	r4, #0
 80038d8:	f04f 0500 	mov.w	r5, #0
 80038dc:	00dd      	lsls	r5, r3, #3
 80038de:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80038e2:	00d4      	lsls	r4, r2, #3
 80038e4:	4622      	mov	r2, r4
 80038e6:	462b      	mov	r3, r5
 80038e8:	1814      	adds	r4, r2, r0
 80038ea:	64bc      	str	r4, [r7, #72]	; 0x48
 80038ec:	414b      	adcs	r3, r1
 80038ee:	64fb      	str	r3, [r7, #76]	; 0x4c
 80038f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80038f2:	685b      	ldr	r3, [r3, #4]
 80038f4:	4618      	mov	r0, r3
 80038f6:	f04f 0100 	mov.w	r1, #0
 80038fa:	f04f 0200 	mov.w	r2, #0
 80038fe:	f04f 0300 	mov.w	r3, #0
 8003902:	008b      	lsls	r3, r1, #2
 8003904:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003908:	0082      	lsls	r2, r0, #2
 800390a:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800390e:	f7fc fcbf 	bl	8000290 <__aeabi_uldivmod>
 8003912:	4602      	mov	r2, r0
 8003914:	460b      	mov	r3, r1
 8003916:	4b2f      	ldr	r3, [pc, #188]	; (80039d4 <UART_SetConfig+0x38c>)
 8003918:	fba3 1302 	umull	r1, r3, r3, r2
 800391c:	095b      	lsrs	r3, r3, #5
 800391e:	2164      	movs	r1, #100	; 0x64
 8003920:	fb01 f303 	mul.w	r3, r1, r3
 8003924:	1ad3      	subs	r3, r2, r3
 8003926:	011b      	lsls	r3, r3, #4
 8003928:	3332      	adds	r3, #50	; 0x32
 800392a:	4a2a      	ldr	r2, [pc, #168]	; (80039d4 <UART_SetConfig+0x38c>)
 800392c:	fba2 2303 	umull	r2, r3, r2, r3
 8003930:	095b      	lsrs	r3, r3, #5
 8003932:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003936:	441e      	add	r6, r3
 8003938:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800393a:	4618      	mov	r0, r3
 800393c:	f04f 0100 	mov.w	r1, #0
 8003940:	4602      	mov	r2, r0
 8003942:	460b      	mov	r3, r1
 8003944:	1894      	adds	r4, r2, r2
 8003946:	603c      	str	r4, [r7, #0]
 8003948:	415b      	adcs	r3, r3
 800394a:	607b      	str	r3, [r7, #4]
 800394c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003950:	1812      	adds	r2, r2, r0
 8003952:	eb41 0303 	adc.w	r3, r1, r3
 8003956:	f04f 0400 	mov.w	r4, #0
 800395a:	f04f 0500 	mov.w	r5, #0
 800395e:	00dd      	lsls	r5, r3, #3
 8003960:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003964:	00d4      	lsls	r4, r2, #3
 8003966:	4622      	mov	r2, r4
 8003968:	462b      	mov	r3, r5
 800396a:	eb12 0a00 	adds.w	sl, r2, r0
 800396e:	eb43 0b01 	adc.w	fp, r3, r1
 8003972:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003974:	685b      	ldr	r3, [r3, #4]
 8003976:	4618      	mov	r0, r3
 8003978:	f04f 0100 	mov.w	r1, #0
 800397c:	f04f 0200 	mov.w	r2, #0
 8003980:	f04f 0300 	mov.w	r3, #0
 8003984:	008b      	lsls	r3, r1, #2
 8003986:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800398a:	0082      	lsls	r2, r0, #2
 800398c:	4650      	mov	r0, sl
 800398e:	4659      	mov	r1, fp
 8003990:	f7fc fc7e 	bl	8000290 <__aeabi_uldivmod>
 8003994:	4602      	mov	r2, r0
 8003996:	460b      	mov	r3, r1
 8003998:	4b0e      	ldr	r3, [pc, #56]	; (80039d4 <UART_SetConfig+0x38c>)
 800399a:	fba3 1302 	umull	r1, r3, r3, r2
 800399e:	095b      	lsrs	r3, r3, #5
 80039a0:	2164      	movs	r1, #100	; 0x64
 80039a2:	fb01 f303 	mul.w	r3, r1, r3
 80039a6:	1ad3      	subs	r3, r2, r3
 80039a8:	011b      	lsls	r3, r3, #4
 80039aa:	3332      	adds	r3, #50	; 0x32
 80039ac:	4a09      	ldr	r2, [pc, #36]	; (80039d4 <UART_SetConfig+0x38c>)
 80039ae:	fba2 2303 	umull	r2, r3, r2, r3
 80039b2:	095b      	lsrs	r3, r3, #5
 80039b4:	f003 020f 	and.w	r2, r3, #15
 80039b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	4432      	add	r2, r6
 80039be:	609a      	str	r2, [r3, #8]
}
 80039c0:	bf00      	nop
 80039c2:	377c      	adds	r7, #124	; 0x7c
 80039c4:	46bd      	mov	sp, r7
 80039c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80039ca:	bf00      	nop
 80039cc:	40011000 	.word	0x40011000
 80039d0:	40011400 	.word	0x40011400
 80039d4:	51eb851f 	.word	0x51eb851f

080039d8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80039d8:	b084      	sub	sp, #16
 80039da:	b580      	push	{r7, lr}
 80039dc:	b084      	sub	sp, #16
 80039de:	af00      	add	r7, sp, #0
 80039e0:	6078      	str	r0, [r7, #4]
 80039e2:	f107 001c 	add.w	r0, r7, #28
 80039e6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80039ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039ec:	2b01      	cmp	r3, #1
 80039ee:	d122      	bne.n	8003a36 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039f4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	68db      	ldr	r3, [r3, #12]
 8003a00:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8003a04:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003a08:	687a      	ldr	r2, [r7, #4]
 8003a0a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	68db      	ldr	r3, [r3, #12]
 8003a10:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8003a18:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a1a:	2b01      	cmp	r3, #1
 8003a1c:	d105      	bne.n	8003a2a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	68db      	ldr	r3, [r3, #12]
 8003a22:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003a2a:	6878      	ldr	r0, [r7, #4]
 8003a2c:	f001 fb1c 	bl	8005068 <USB_CoreReset>
 8003a30:	4603      	mov	r3, r0
 8003a32:	73fb      	strb	r3, [r7, #15]
 8003a34:	e01a      	b.n	8003a6c <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	68db      	ldr	r3, [r3, #12]
 8003a3a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003a42:	6878      	ldr	r0, [r7, #4]
 8003a44:	f001 fb10 	bl	8005068 <USB_CoreReset>
 8003a48:	4603      	mov	r3, r0
 8003a4a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8003a4c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d106      	bne.n	8003a60 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a56:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	639a      	str	r2, [r3, #56]	; 0x38
 8003a5e:	e005      	b.n	8003a6c <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a64:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8003a6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a6e:	2b01      	cmp	r3, #1
 8003a70:	d10b      	bne.n	8003a8a <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	689b      	ldr	r3, [r3, #8]
 8003a76:	f043 0206 	orr.w	r2, r3, #6
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	689b      	ldr	r3, [r3, #8]
 8003a82:	f043 0220 	orr.w	r2, r3, #32
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8003a8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a8c:	4618      	mov	r0, r3
 8003a8e:	3710      	adds	r7, #16
 8003a90:	46bd      	mov	sp, r7
 8003a92:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003a96:	b004      	add	sp, #16
 8003a98:	4770      	bx	lr
	...

08003a9c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8003a9c:	b480      	push	{r7}
 8003a9e:	b087      	sub	sp, #28
 8003aa0:	af00      	add	r7, sp, #0
 8003aa2:	60f8      	str	r0, [r7, #12]
 8003aa4:	60b9      	str	r1, [r7, #8]
 8003aa6:	4613      	mov	r3, r2
 8003aa8:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8003aaa:	79fb      	ldrb	r3, [r7, #7]
 8003aac:	2b02      	cmp	r3, #2
 8003aae:	d165      	bne.n	8003b7c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8003ab0:	68bb      	ldr	r3, [r7, #8]
 8003ab2:	4a41      	ldr	r2, [pc, #260]	; (8003bb8 <USB_SetTurnaroundTime+0x11c>)
 8003ab4:	4293      	cmp	r3, r2
 8003ab6:	d906      	bls.n	8003ac6 <USB_SetTurnaroundTime+0x2a>
 8003ab8:	68bb      	ldr	r3, [r7, #8]
 8003aba:	4a40      	ldr	r2, [pc, #256]	; (8003bbc <USB_SetTurnaroundTime+0x120>)
 8003abc:	4293      	cmp	r3, r2
 8003abe:	d202      	bcs.n	8003ac6 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8003ac0:	230f      	movs	r3, #15
 8003ac2:	617b      	str	r3, [r7, #20]
 8003ac4:	e062      	b.n	8003b8c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8003ac6:	68bb      	ldr	r3, [r7, #8]
 8003ac8:	4a3c      	ldr	r2, [pc, #240]	; (8003bbc <USB_SetTurnaroundTime+0x120>)
 8003aca:	4293      	cmp	r3, r2
 8003acc:	d306      	bcc.n	8003adc <USB_SetTurnaroundTime+0x40>
 8003ace:	68bb      	ldr	r3, [r7, #8]
 8003ad0:	4a3b      	ldr	r2, [pc, #236]	; (8003bc0 <USB_SetTurnaroundTime+0x124>)
 8003ad2:	4293      	cmp	r3, r2
 8003ad4:	d202      	bcs.n	8003adc <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8003ad6:	230e      	movs	r3, #14
 8003ad8:	617b      	str	r3, [r7, #20]
 8003ada:	e057      	b.n	8003b8c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8003adc:	68bb      	ldr	r3, [r7, #8]
 8003ade:	4a38      	ldr	r2, [pc, #224]	; (8003bc0 <USB_SetTurnaroundTime+0x124>)
 8003ae0:	4293      	cmp	r3, r2
 8003ae2:	d306      	bcc.n	8003af2 <USB_SetTurnaroundTime+0x56>
 8003ae4:	68bb      	ldr	r3, [r7, #8]
 8003ae6:	4a37      	ldr	r2, [pc, #220]	; (8003bc4 <USB_SetTurnaroundTime+0x128>)
 8003ae8:	4293      	cmp	r3, r2
 8003aea:	d202      	bcs.n	8003af2 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8003aec:	230d      	movs	r3, #13
 8003aee:	617b      	str	r3, [r7, #20]
 8003af0:	e04c      	b.n	8003b8c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8003af2:	68bb      	ldr	r3, [r7, #8]
 8003af4:	4a33      	ldr	r2, [pc, #204]	; (8003bc4 <USB_SetTurnaroundTime+0x128>)
 8003af6:	4293      	cmp	r3, r2
 8003af8:	d306      	bcc.n	8003b08 <USB_SetTurnaroundTime+0x6c>
 8003afa:	68bb      	ldr	r3, [r7, #8]
 8003afc:	4a32      	ldr	r2, [pc, #200]	; (8003bc8 <USB_SetTurnaroundTime+0x12c>)
 8003afe:	4293      	cmp	r3, r2
 8003b00:	d802      	bhi.n	8003b08 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8003b02:	230c      	movs	r3, #12
 8003b04:	617b      	str	r3, [r7, #20]
 8003b06:	e041      	b.n	8003b8c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8003b08:	68bb      	ldr	r3, [r7, #8]
 8003b0a:	4a2f      	ldr	r2, [pc, #188]	; (8003bc8 <USB_SetTurnaroundTime+0x12c>)
 8003b0c:	4293      	cmp	r3, r2
 8003b0e:	d906      	bls.n	8003b1e <USB_SetTurnaroundTime+0x82>
 8003b10:	68bb      	ldr	r3, [r7, #8]
 8003b12:	4a2e      	ldr	r2, [pc, #184]	; (8003bcc <USB_SetTurnaroundTime+0x130>)
 8003b14:	4293      	cmp	r3, r2
 8003b16:	d802      	bhi.n	8003b1e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8003b18:	230b      	movs	r3, #11
 8003b1a:	617b      	str	r3, [r7, #20]
 8003b1c:	e036      	b.n	8003b8c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8003b1e:	68bb      	ldr	r3, [r7, #8]
 8003b20:	4a2a      	ldr	r2, [pc, #168]	; (8003bcc <USB_SetTurnaroundTime+0x130>)
 8003b22:	4293      	cmp	r3, r2
 8003b24:	d906      	bls.n	8003b34 <USB_SetTurnaroundTime+0x98>
 8003b26:	68bb      	ldr	r3, [r7, #8]
 8003b28:	4a29      	ldr	r2, [pc, #164]	; (8003bd0 <USB_SetTurnaroundTime+0x134>)
 8003b2a:	4293      	cmp	r3, r2
 8003b2c:	d802      	bhi.n	8003b34 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8003b2e:	230a      	movs	r3, #10
 8003b30:	617b      	str	r3, [r7, #20]
 8003b32:	e02b      	b.n	8003b8c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8003b34:	68bb      	ldr	r3, [r7, #8]
 8003b36:	4a26      	ldr	r2, [pc, #152]	; (8003bd0 <USB_SetTurnaroundTime+0x134>)
 8003b38:	4293      	cmp	r3, r2
 8003b3a:	d906      	bls.n	8003b4a <USB_SetTurnaroundTime+0xae>
 8003b3c:	68bb      	ldr	r3, [r7, #8]
 8003b3e:	4a25      	ldr	r2, [pc, #148]	; (8003bd4 <USB_SetTurnaroundTime+0x138>)
 8003b40:	4293      	cmp	r3, r2
 8003b42:	d202      	bcs.n	8003b4a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8003b44:	2309      	movs	r3, #9
 8003b46:	617b      	str	r3, [r7, #20]
 8003b48:	e020      	b.n	8003b8c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8003b4a:	68bb      	ldr	r3, [r7, #8]
 8003b4c:	4a21      	ldr	r2, [pc, #132]	; (8003bd4 <USB_SetTurnaroundTime+0x138>)
 8003b4e:	4293      	cmp	r3, r2
 8003b50:	d306      	bcc.n	8003b60 <USB_SetTurnaroundTime+0xc4>
 8003b52:	68bb      	ldr	r3, [r7, #8]
 8003b54:	4a20      	ldr	r2, [pc, #128]	; (8003bd8 <USB_SetTurnaroundTime+0x13c>)
 8003b56:	4293      	cmp	r3, r2
 8003b58:	d802      	bhi.n	8003b60 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8003b5a:	2308      	movs	r3, #8
 8003b5c:	617b      	str	r3, [r7, #20]
 8003b5e:	e015      	b.n	8003b8c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8003b60:	68bb      	ldr	r3, [r7, #8]
 8003b62:	4a1d      	ldr	r2, [pc, #116]	; (8003bd8 <USB_SetTurnaroundTime+0x13c>)
 8003b64:	4293      	cmp	r3, r2
 8003b66:	d906      	bls.n	8003b76 <USB_SetTurnaroundTime+0xda>
 8003b68:	68bb      	ldr	r3, [r7, #8]
 8003b6a:	4a1c      	ldr	r2, [pc, #112]	; (8003bdc <USB_SetTurnaroundTime+0x140>)
 8003b6c:	4293      	cmp	r3, r2
 8003b6e:	d202      	bcs.n	8003b76 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8003b70:	2307      	movs	r3, #7
 8003b72:	617b      	str	r3, [r7, #20]
 8003b74:	e00a      	b.n	8003b8c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8003b76:	2306      	movs	r3, #6
 8003b78:	617b      	str	r3, [r7, #20]
 8003b7a:	e007      	b.n	8003b8c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8003b7c:	79fb      	ldrb	r3, [r7, #7]
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d102      	bne.n	8003b88 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8003b82:	2309      	movs	r3, #9
 8003b84:	617b      	str	r3, [r7, #20]
 8003b86:	e001      	b.n	8003b8c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8003b88:	2309      	movs	r3, #9
 8003b8a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	68db      	ldr	r3, [r3, #12]
 8003b90:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	68da      	ldr	r2, [r3, #12]
 8003b9c:	697b      	ldr	r3, [r7, #20]
 8003b9e:	029b      	lsls	r3, r3, #10
 8003ba0:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8003ba4:	431a      	orrs	r2, r3
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003baa:	2300      	movs	r3, #0
}
 8003bac:	4618      	mov	r0, r3
 8003bae:	371c      	adds	r7, #28
 8003bb0:	46bd      	mov	sp, r7
 8003bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb6:	4770      	bx	lr
 8003bb8:	00d8acbf 	.word	0x00d8acbf
 8003bbc:	00e4e1c0 	.word	0x00e4e1c0
 8003bc0:	00f42400 	.word	0x00f42400
 8003bc4:	01067380 	.word	0x01067380
 8003bc8:	011a499f 	.word	0x011a499f
 8003bcc:	01312cff 	.word	0x01312cff
 8003bd0:	014ca43f 	.word	0x014ca43f
 8003bd4:	016e3600 	.word	0x016e3600
 8003bd8:	01a6ab1f 	.word	0x01a6ab1f
 8003bdc:	01e84800 	.word	0x01e84800

08003be0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003be0:	b480      	push	{r7}
 8003be2:	b083      	sub	sp, #12
 8003be4:	af00      	add	r7, sp, #0
 8003be6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	689b      	ldr	r3, [r3, #8]
 8003bec:	f043 0201 	orr.w	r2, r3, #1
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003bf4:	2300      	movs	r3, #0
}
 8003bf6:	4618      	mov	r0, r3
 8003bf8:	370c      	adds	r7, #12
 8003bfa:	46bd      	mov	sp, r7
 8003bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c00:	4770      	bx	lr

08003c02 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003c02:	b480      	push	{r7}
 8003c04:	b083      	sub	sp, #12
 8003c06:	af00      	add	r7, sp, #0
 8003c08:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	689b      	ldr	r3, [r3, #8]
 8003c0e:	f023 0201 	bic.w	r2, r3, #1
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003c16:	2300      	movs	r3, #0
}
 8003c18:	4618      	mov	r0, r3
 8003c1a:	370c      	adds	r7, #12
 8003c1c:	46bd      	mov	sp, r7
 8003c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c22:	4770      	bx	lr

08003c24 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8003c24:	b580      	push	{r7, lr}
 8003c26:	b084      	sub	sp, #16
 8003c28:	af00      	add	r7, sp, #0
 8003c2a:	6078      	str	r0, [r7, #4]
 8003c2c:	460b      	mov	r3, r1
 8003c2e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8003c30:	2300      	movs	r3, #0
 8003c32:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	68db      	ldr	r3, [r3, #12]
 8003c38:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8003c40:	78fb      	ldrb	r3, [r7, #3]
 8003c42:	2b01      	cmp	r3, #1
 8003c44:	d115      	bne.n	8003c72 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	68db      	ldr	r3, [r3, #12]
 8003c4a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8003c52:	2001      	movs	r0, #1
 8003c54:	f7fd f8ba 	bl	8000dcc <HAL_Delay>
      ms++;
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	3301      	adds	r3, #1
 8003c5c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8003c5e:	6878      	ldr	r0, [r7, #4]
 8003c60:	f001 f972 	bl	8004f48 <USB_GetMode>
 8003c64:	4603      	mov	r3, r0
 8003c66:	2b01      	cmp	r3, #1
 8003c68:	d01e      	beq.n	8003ca8 <USB_SetCurrentMode+0x84>
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	2b31      	cmp	r3, #49	; 0x31
 8003c6e:	d9f0      	bls.n	8003c52 <USB_SetCurrentMode+0x2e>
 8003c70:	e01a      	b.n	8003ca8 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8003c72:	78fb      	ldrb	r3, [r7, #3]
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d115      	bne.n	8003ca4 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	68db      	ldr	r3, [r3, #12]
 8003c7c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8003c84:	2001      	movs	r0, #1
 8003c86:	f7fd f8a1 	bl	8000dcc <HAL_Delay>
      ms++;
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	3301      	adds	r3, #1
 8003c8e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8003c90:	6878      	ldr	r0, [r7, #4]
 8003c92:	f001 f959 	bl	8004f48 <USB_GetMode>
 8003c96:	4603      	mov	r3, r0
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d005      	beq.n	8003ca8 <USB_SetCurrentMode+0x84>
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	2b31      	cmp	r3, #49	; 0x31
 8003ca0:	d9f0      	bls.n	8003c84 <USB_SetCurrentMode+0x60>
 8003ca2:	e001      	b.n	8003ca8 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8003ca4:	2301      	movs	r3, #1
 8003ca6:	e005      	b.n	8003cb4 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	2b32      	cmp	r3, #50	; 0x32
 8003cac:	d101      	bne.n	8003cb2 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8003cae:	2301      	movs	r3, #1
 8003cb0:	e000      	b.n	8003cb4 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8003cb2:	2300      	movs	r3, #0
}
 8003cb4:	4618      	mov	r0, r3
 8003cb6:	3710      	adds	r7, #16
 8003cb8:	46bd      	mov	sp, r7
 8003cba:	bd80      	pop	{r7, pc}

08003cbc <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003cbc:	b084      	sub	sp, #16
 8003cbe:	b580      	push	{r7, lr}
 8003cc0:	b086      	sub	sp, #24
 8003cc2:	af00      	add	r7, sp, #0
 8003cc4:	6078      	str	r0, [r7, #4]
 8003cc6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8003cca:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8003cce:	2300      	movs	r3, #0
 8003cd0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8003cd6:	2300      	movs	r3, #0
 8003cd8:	613b      	str	r3, [r7, #16]
 8003cda:	e009      	b.n	8003cf0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8003cdc:	687a      	ldr	r2, [r7, #4]
 8003cde:	693b      	ldr	r3, [r7, #16]
 8003ce0:	3340      	adds	r3, #64	; 0x40
 8003ce2:	009b      	lsls	r3, r3, #2
 8003ce4:	4413      	add	r3, r2
 8003ce6:	2200      	movs	r2, #0
 8003ce8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8003cea:	693b      	ldr	r3, [r7, #16]
 8003cec:	3301      	adds	r3, #1
 8003cee:	613b      	str	r3, [r7, #16]
 8003cf0:	693b      	ldr	r3, [r7, #16]
 8003cf2:	2b0e      	cmp	r3, #14
 8003cf4:	d9f2      	bls.n	8003cdc <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8003cf6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d11c      	bne.n	8003d36 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d02:	685b      	ldr	r3, [r3, #4]
 8003d04:	68fa      	ldr	r2, [r7, #12]
 8003d06:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003d0a:	f043 0302 	orr.w	r3, r3, #2
 8003d0e:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d14:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d20:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d2c:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	639a      	str	r2, [r3, #56]	; 0x38
 8003d34:	e00b      	b.n	8003d4e <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d3a:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d46:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003d54:	461a      	mov	r2, r3
 8003d56:	2300      	movs	r3, #0
 8003d58:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d60:	4619      	mov	r1, r3
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d68:	461a      	mov	r2, r3
 8003d6a:	680b      	ldr	r3, [r1, #0]
 8003d6c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003d6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d70:	2b01      	cmp	r3, #1
 8003d72:	d10c      	bne.n	8003d8e <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8003d74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d104      	bne.n	8003d84 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8003d7a:	2100      	movs	r1, #0
 8003d7c:	6878      	ldr	r0, [r7, #4]
 8003d7e:	f000 f945 	bl	800400c <USB_SetDevSpeed>
 8003d82:	e008      	b.n	8003d96 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8003d84:	2101      	movs	r1, #1
 8003d86:	6878      	ldr	r0, [r7, #4]
 8003d88:	f000 f940 	bl	800400c <USB_SetDevSpeed>
 8003d8c:	e003      	b.n	8003d96 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8003d8e:	2103      	movs	r1, #3
 8003d90:	6878      	ldr	r0, [r7, #4]
 8003d92:	f000 f93b 	bl	800400c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8003d96:	2110      	movs	r1, #16
 8003d98:	6878      	ldr	r0, [r7, #4]
 8003d9a:	f000 f8f3 	bl	8003f84 <USB_FlushTxFifo>
 8003d9e:	4603      	mov	r3, r0
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d001      	beq.n	8003da8 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8003da4:	2301      	movs	r3, #1
 8003da6:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8003da8:	6878      	ldr	r0, [r7, #4]
 8003daa:	f000 f90f 	bl	8003fcc <USB_FlushRxFifo>
 8003dae:	4603      	mov	r3, r0
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d001      	beq.n	8003db8 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8003db4:	2301      	movs	r3, #1
 8003db6:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003dbe:	461a      	mov	r2, r3
 8003dc0:	2300      	movs	r3, #0
 8003dc2:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003dca:	461a      	mov	r2, r3
 8003dcc:	2300      	movs	r3, #0
 8003dce:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003dd6:	461a      	mov	r2, r3
 8003dd8:	2300      	movs	r3, #0
 8003dda:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003ddc:	2300      	movs	r3, #0
 8003dde:	613b      	str	r3, [r7, #16]
 8003de0:	e043      	b.n	8003e6a <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003de2:	693b      	ldr	r3, [r7, #16]
 8003de4:	015a      	lsls	r2, r3, #5
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	4413      	add	r3, r2
 8003dea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003df4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003df8:	d118      	bne.n	8003e2c <USB_DevInit+0x170>
    {
      if (i == 0U)
 8003dfa:	693b      	ldr	r3, [r7, #16]
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d10a      	bne.n	8003e16 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8003e00:	693b      	ldr	r3, [r7, #16]
 8003e02:	015a      	lsls	r2, r3, #5
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	4413      	add	r3, r2
 8003e08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e0c:	461a      	mov	r2, r3
 8003e0e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003e12:	6013      	str	r3, [r2, #0]
 8003e14:	e013      	b.n	8003e3e <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8003e16:	693b      	ldr	r3, [r7, #16]
 8003e18:	015a      	lsls	r2, r3, #5
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	4413      	add	r3, r2
 8003e1e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e22:	461a      	mov	r2, r3
 8003e24:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003e28:	6013      	str	r3, [r2, #0]
 8003e2a:	e008      	b.n	8003e3e <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8003e2c:	693b      	ldr	r3, [r7, #16]
 8003e2e:	015a      	lsls	r2, r3, #5
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	4413      	add	r3, r2
 8003e34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e38:	461a      	mov	r2, r3
 8003e3a:	2300      	movs	r3, #0
 8003e3c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8003e3e:	693b      	ldr	r3, [r7, #16]
 8003e40:	015a      	lsls	r2, r3, #5
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	4413      	add	r3, r2
 8003e46:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e4a:	461a      	mov	r2, r3
 8003e4c:	2300      	movs	r3, #0
 8003e4e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8003e50:	693b      	ldr	r3, [r7, #16]
 8003e52:	015a      	lsls	r2, r3, #5
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	4413      	add	r3, r2
 8003e58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e5c:	461a      	mov	r2, r3
 8003e5e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003e62:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003e64:	693b      	ldr	r3, [r7, #16]
 8003e66:	3301      	adds	r3, #1
 8003e68:	613b      	str	r3, [r7, #16]
 8003e6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e6c:	693a      	ldr	r2, [r7, #16]
 8003e6e:	429a      	cmp	r2, r3
 8003e70:	d3b7      	bcc.n	8003de2 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003e72:	2300      	movs	r3, #0
 8003e74:	613b      	str	r3, [r7, #16]
 8003e76:	e043      	b.n	8003f00 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003e78:	693b      	ldr	r3, [r7, #16]
 8003e7a:	015a      	lsls	r2, r3, #5
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	4413      	add	r3, r2
 8003e80:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003e8a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003e8e:	d118      	bne.n	8003ec2 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8003e90:	693b      	ldr	r3, [r7, #16]
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d10a      	bne.n	8003eac <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8003e96:	693b      	ldr	r3, [r7, #16]
 8003e98:	015a      	lsls	r2, r3, #5
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	4413      	add	r3, r2
 8003e9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ea2:	461a      	mov	r2, r3
 8003ea4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003ea8:	6013      	str	r3, [r2, #0]
 8003eaa:	e013      	b.n	8003ed4 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8003eac:	693b      	ldr	r3, [r7, #16]
 8003eae:	015a      	lsls	r2, r3, #5
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	4413      	add	r3, r2
 8003eb4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003eb8:	461a      	mov	r2, r3
 8003eba:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003ebe:	6013      	str	r3, [r2, #0]
 8003ec0:	e008      	b.n	8003ed4 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8003ec2:	693b      	ldr	r3, [r7, #16]
 8003ec4:	015a      	lsls	r2, r3, #5
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	4413      	add	r3, r2
 8003eca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ece:	461a      	mov	r2, r3
 8003ed0:	2300      	movs	r3, #0
 8003ed2:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8003ed4:	693b      	ldr	r3, [r7, #16]
 8003ed6:	015a      	lsls	r2, r3, #5
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	4413      	add	r3, r2
 8003edc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ee0:	461a      	mov	r2, r3
 8003ee2:	2300      	movs	r3, #0
 8003ee4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8003ee6:	693b      	ldr	r3, [r7, #16]
 8003ee8:	015a      	lsls	r2, r3, #5
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	4413      	add	r3, r2
 8003eee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ef2:	461a      	mov	r2, r3
 8003ef4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003ef8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003efa:	693b      	ldr	r3, [r7, #16]
 8003efc:	3301      	adds	r3, #1
 8003efe:	613b      	str	r3, [r7, #16]
 8003f00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f02:	693a      	ldr	r2, [r7, #16]
 8003f04:	429a      	cmp	r2, r3
 8003f06:	d3b7      	bcc.n	8003e78 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f0e:	691b      	ldr	r3, [r3, #16]
 8003f10:	68fa      	ldr	r2, [r7, #12]
 8003f12:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003f16:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003f1a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	2200      	movs	r2, #0
 8003f20:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8003f28:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8003f2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d105      	bne.n	8003f3c <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	699b      	ldr	r3, [r3, #24]
 8003f34:	f043 0210 	orr.w	r2, r3, #16
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	699a      	ldr	r2, [r3, #24]
 8003f40:	4b0f      	ldr	r3, [pc, #60]	; (8003f80 <USB_DevInit+0x2c4>)
 8003f42:	4313      	orrs	r3, r2
 8003f44:	687a      	ldr	r2, [r7, #4]
 8003f46:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8003f48:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d005      	beq.n	8003f5a <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	699b      	ldr	r3, [r3, #24]
 8003f52:	f043 0208 	orr.w	r2, r3, #8
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8003f5a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003f5c:	2b01      	cmp	r3, #1
 8003f5e:	d107      	bne.n	8003f70 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	699b      	ldr	r3, [r3, #24]
 8003f64:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003f68:	f043 0304 	orr.w	r3, r3, #4
 8003f6c:	687a      	ldr	r2, [r7, #4]
 8003f6e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8003f70:	7dfb      	ldrb	r3, [r7, #23]
}
 8003f72:	4618      	mov	r0, r3
 8003f74:	3718      	adds	r7, #24
 8003f76:	46bd      	mov	sp, r7
 8003f78:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003f7c:	b004      	add	sp, #16
 8003f7e:	4770      	bx	lr
 8003f80:	803c3800 	.word	0x803c3800

08003f84 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8003f84:	b480      	push	{r7}
 8003f86:	b085      	sub	sp, #20
 8003f88:	af00      	add	r7, sp, #0
 8003f8a:	6078      	str	r0, [r7, #4]
 8003f8c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8003f8e:	2300      	movs	r3, #0
 8003f90:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003f92:	683b      	ldr	r3, [r7, #0]
 8003f94:	019b      	lsls	r3, r3, #6
 8003f96:	f043 0220 	orr.w	r2, r3, #32
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	3301      	adds	r3, #1
 8003fa2:	60fb      	str	r3, [r7, #12]
 8003fa4:	4a08      	ldr	r2, [pc, #32]	; (8003fc8 <USB_FlushTxFifo+0x44>)
 8003fa6:	4293      	cmp	r3, r2
 8003fa8:	d901      	bls.n	8003fae <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 8003faa:	2303      	movs	r3, #3
 8003fac:	e006      	b.n	8003fbc <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	691b      	ldr	r3, [r3, #16]
 8003fb2:	f003 0320 	and.w	r3, r3, #32
 8003fb6:	2b20      	cmp	r3, #32
 8003fb8:	d0f1      	beq.n	8003f9e <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8003fba:	2300      	movs	r3, #0
}
 8003fbc:	4618      	mov	r0, r3
 8003fbe:	3714      	adds	r7, #20
 8003fc0:	46bd      	mov	sp, r7
 8003fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc6:	4770      	bx	lr
 8003fc8:	00030d40 	.word	0x00030d40

08003fcc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8003fcc:	b480      	push	{r7}
 8003fce:	b085      	sub	sp, #20
 8003fd0:	af00      	add	r7, sp, #0
 8003fd2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003fd4:	2300      	movs	r3, #0
 8003fd6:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	2210      	movs	r2, #16
 8003fdc:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	3301      	adds	r3, #1
 8003fe2:	60fb      	str	r3, [r7, #12]
 8003fe4:	4a08      	ldr	r2, [pc, #32]	; (8004008 <USB_FlushRxFifo+0x3c>)
 8003fe6:	4293      	cmp	r3, r2
 8003fe8:	d901      	bls.n	8003fee <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 8003fea:	2303      	movs	r3, #3
 8003fec:	e006      	b.n	8003ffc <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	691b      	ldr	r3, [r3, #16]
 8003ff2:	f003 0310 	and.w	r3, r3, #16
 8003ff6:	2b10      	cmp	r3, #16
 8003ff8:	d0f1      	beq.n	8003fde <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8003ffa:	2300      	movs	r3, #0
}
 8003ffc:	4618      	mov	r0, r3
 8003ffe:	3714      	adds	r7, #20
 8004000:	46bd      	mov	sp, r7
 8004002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004006:	4770      	bx	lr
 8004008:	00030d40 	.word	0x00030d40

0800400c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800400c:	b480      	push	{r7}
 800400e:	b085      	sub	sp, #20
 8004010:	af00      	add	r7, sp, #0
 8004012:	6078      	str	r0, [r7, #4]
 8004014:	460b      	mov	r3, r1
 8004016:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004022:	681a      	ldr	r2, [r3, #0]
 8004024:	78fb      	ldrb	r3, [r7, #3]
 8004026:	68f9      	ldr	r1, [r7, #12]
 8004028:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800402c:	4313      	orrs	r3, r2
 800402e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004030:	2300      	movs	r3, #0
}
 8004032:	4618      	mov	r0, r3
 8004034:	3714      	adds	r7, #20
 8004036:	46bd      	mov	sp, r7
 8004038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800403c:	4770      	bx	lr

0800403e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800403e:	b480      	push	{r7}
 8004040:	b087      	sub	sp, #28
 8004042:	af00      	add	r7, sp, #0
 8004044:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800404a:	693b      	ldr	r3, [r7, #16]
 800404c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004050:	689b      	ldr	r3, [r3, #8]
 8004052:	f003 0306 	and.w	r3, r3, #6
 8004056:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	2b00      	cmp	r3, #0
 800405c:	d102      	bne.n	8004064 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800405e:	2300      	movs	r3, #0
 8004060:	75fb      	strb	r3, [r7, #23]
 8004062:	e00a      	b.n	800407a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	2b02      	cmp	r3, #2
 8004068:	d002      	beq.n	8004070 <USB_GetDevSpeed+0x32>
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	2b06      	cmp	r3, #6
 800406e:	d102      	bne.n	8004076 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8004070:	2302      	movs	r3, #2
 8004072:	75fb      	strb	r3, [r7, #23]
 8004074:	e001      	b.n	800407a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8004076:	230f      	movs	r3, #15
 8004078:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800407a:	7dfb      	ldrb	r3, [r7, #23]
}
 800407c:	4618      	mov	r0, r3
 800407e:	371c      	adds	r7, #28
 8004080:	46bd      	mov	sp, r7
 8004082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004086:	4770      	bx	lr

08004088 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004088:	b480      	push	{r7}
 800408a:	b085      	sub	sp, #20
 800408c:	af00      	add	r7, sp, #0
 800408e:	6078      	str	r0, [r7, #4]
 8004090:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004096:	683b      	ldr	r3, [r7, #0]
 8004098:	781b      	ldrb	r3, [r3, #0]
 800409a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800409c:	683b      	ldr	r3, [r7, #0]
 800409e:	785b      	ldrb	r3, [r3, #1]
 80040a0:	2b01      	cmp	r3, #1
 80040a2:	d13a      	bne.n	800411a <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80040aa:	69da      	ldr	r2, [r3, #28]
 80040ac:	683b      	ldr	r3, [r7, #0]
 80040ae:	781b      	ldrb	r3, [r3, #0]
 80040b0:	f003 030f 	and.w	r3, r3, #15
 80040b4:	2101      	movs	r1, #1
 80040b6:	fa01 f303 	lsl.w	r3, r1, r3
 80040ba:	b29b      	uxth	r3, r3
 80040bc:	68f9      	ldr	r1, [r7, #12]
 80040be:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80040c2:	4313      	orrs	r3, r2
 80040c4:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80040c6:	68bb      	ldr	r3, [r7, #8]
 80040c8:	015a      	lsls	r2, r3, #5
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	4413      	add	r3, r2
 80040ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d155      	bne.n	8004188 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80040dc:	68bb      	ldr	r3, [r7, #8]
 80040de:	015a      	lsls	r2, r3, #5
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	4413      	add	r3, r2
 80040e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80040e8:	681a      	ldr	r2, [r3, #0]
 80040ea:	683b      	ldr	r3, [r7, #0]
 80040ec:	689b      	ldr	r3, [r3, #8]
 80040ee:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80040f2:	683b      	ldr	r3, [r7, #0]
 80040f4:	78db      	ldrb	r3, [r3, #3]
 80040f6:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80040f8:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80040fa:	68bb      	ldr	r3, [r7, #8]
 80040fc:	059b      	lsls	r3, r3, #22
 80040fe:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004100:	4313      	orrs	r3, r2
 8004102:	68ba      	ldr	r2, [r7, #8]
 8004104:	0151      	lsls	r1, r2, #5
 8004106:	68fa      	ldr	r2, [r7, #12]
 8004108:	440a      	add	r2, r1
 800410a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800410e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004112:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004116:	6013      	str	r3, [r2, #0]
 8004118:	e036      	b.n	8004188 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004120:	69da      	ldr	r2, [r3, #28]
 8004122:	683b      	ldr	r3, [r7, #0]
 8004124:	781b      	ldrb	r3, [r3, #0]
 8004126:	f003 030f 	and.w	r3, r3, #15
 800412a:	2101      	movs	r1, #1
 800412c:	fa01 f303 	lsl.w	r3, r1, r3
 8004130:	041b      	lsls	r3, r3, #16
 8004132:	68f9      	ldr	r1, [r7, #12]
 8004134:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004138:	4313      	orrs	r3, r2
 800413a:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800413c:	68bb      	ldr	r3, [r7, #8]
 800413e:	015a      	lsls	r2, r3, #5
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	4413      	add	r3, r2
 8004144:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800414e:	2b00      	cmp	r3, #0
 8004150:	d11a      	bne.n	8004188 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004152:	68bb      	ldr	r3, [r7, #8]
 8004154:	015a      	lsls	r2, r3, #5
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	4413      	add	r3, r2
 800415a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800415e:	681a      	ldr	r2, [r3, #0]
 8004160:	683b      	ldr	r3, [r7, #0]
 8004162:	689b      	ldr	r3, [r3, #8]
 8004164:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8004168:	683b      	ldr	r3, [r7, #0]
 800416a:	78db      	ldrb	r3, [r3, #3]
 800416c:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800416e:	430b      	orrs	r3, r1
 8004170:	4313      	orrs	r3, r2
 8004172:	68ba      	ldr	r2, [r7, #8]
 8004174:	0151      	lsls	r1, r2, #5
 8004176:	68fa      	ldr	r2, [r7, #12]
 8004178:	440a      	add	r2, r1
 800417a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800417e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004182:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004186:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8004188:	2300      	movs	r3, #0
}
 800418a:	4618      	mov	r0, r3
 800418c:	3714      	adds	r7, #20
 800418e:	46bd      	mov	sp, r7
 8004190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004194:	4770      	bx	lr
	...

08004198 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004198:	b480      	push	{r7}
 800419a:	b085      	sub	sp, #20
 800419c:	af00      	add	r7, sp, #0
 800419e:	6078      	str	r0, [r7, #4]
 80041a0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80041a6:	683b      	ldr	r3, [r7, #0]
 80041a8:	781b      	ldrb	r3, [r3, #0]
 80041aa:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80041ac:	683b      	ldr	r3, [r7, #0]
 80041ae:	785b      	ldrb	r3, [r3, #1]
 80041b0:	2b01      	cmp	r3, #1
 80041b2:	d161      	bne.n	8004278 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80041b4:	68bb      	ldr	r3, [r7, #8]
 80041b6:	015a      	lsls	r2, r3, #5
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	4413      	add	r3, r2
 80041bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80041c6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80041ca:	d11f      	bne.n	800420c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80041cc:	68bb      	ldr	r3, [r7, #8]
 80041ce:	015a      	lsls	r2, r3, #5
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	4413      	add	r3, r2
 80041d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	68ba      	ldr	r2, [r7, #8]
 80041dc:	0151      	lsls	r1, r2, #5
 80041de:	68fa      	ldr	r2, [r7, #12]
 80041e0:	440a      	add	r2, r1
 80041e2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80041e6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80041ea:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80041ec:	68bb      	ldr	r3, [r7, #8]
 80041ee:	015a      	lsls	r2, r3, #5
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	4413      	add	r3, r2
 80041f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	68ba      	ldr	r2, [r7, #8]
 80041fc:	0151      	lsls	r1, r2, #5
 80041fe:	68fa      	ldr	r2, [r7, #12]
 8004200:	440a      	add	r2, r1
 8004202:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004206:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800420a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004212:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004214:	683b      	ldr	r3, [r7, #0]
 8004216:	781b      	ldrb	r3, [r3, #0]
 8004218:	f003 030f 	and.w	r3, r3, #15
 800421c:	2101      	movs	r1, #1
 800421e:	fa01 f303 	lsl.w	r3, r1, r3
 8004222:	b29b      	uxth	r3, r3
 8004224:	43db      	mvns	r3, r3
 8004226:	68f9      	ldr	r1, [r7, #12]
 8004228:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800422c:	4013      	ands	r3, r2
 800422e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004236:	69da      	ldr	r2, [r3, #28]
 8004238:	683b      	ldr	r3, [r7, #0]
 800423a:	781b      	ldrb	r3, [r3, #0]
 800423c:	f003 030f 	and.w	r3, r3, #15
 8004240:	2101      	movs	r1, #1
 8004242:	fa01 f303 	lsl.w	r3, r1, r3
 8004246:	b29b      	uxth	r3, r3
 8004248:	43db      	mvns	r3, r3
 800424a:	68f9      	ldr	r1, [r7, #12]
 800424c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004250:	4013      	ands	r3, r2
 8004252:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8004254:	68bb      	ldr	r3, [r7, #8]
 8004256:	015a      	lsls	r2, r3, #5
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	4413      	add	r3, r2
 800425c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004260:	681a      	ldr	r2, [r3, #0]
 8004262:	68bb      	ldr	r3, [r7, #8]
 8004264:	0159      	lsls	r1, r3, #5
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	440b      	add	r3, r1
 800426a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800426e:	4619      	mov	r1, r3
 8004270:	4b35      	ldr	r3, [pc, #212]	; (8004348 <USB_DeactivateEndpoint+0x1b0>)
 8004272:	4013      	ands	r3, r2
 8004274:	600b      	str	r3, [r1, #0]
 8004276:	e060      	b.n	800433a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004278:	68bb      	ldr	r3, [r7, #8]
 800427a:	015a      	lsls	r2, r3, #5
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	4413      	add	r3, r2
 8004280:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800428a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800428e:	d11f      	bne.n	80042d0 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004290:	68bb      	ldr	r3, [r7, #8]
 8004292:	015a      	lsls	r2, r3, #5
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	4413      	add	r3, r2
 8004298:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	68ba      	ldr	r2, [r7, #8]
 80042a0:	0151      	lsls	r1, r2, #5
 80042a2:	68fa      	ldr	r2, [r7, #12]
 80042a4:	440a      	add	r2, r1
 80042a6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80042aa:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80042ae:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80042b0:	68bb      	ldr	r3, [r7, #8]
 80042b2:	015a      	lsls	r2, r3, #5
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	4413      	add	r3, r2
 80042b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	68ba      	ldr	r2, [r7, #8]
 80042c0:	0151      	lsls	r1, r2, #5
 80042c2:	68fa      	ldr	r2, [r7, #12]
 80042c4:	440a      	add	r2, r1
 80042c6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80042ca:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80042ce:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80042d6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80042d8:	683b      	ldr	r3, [r7, #0]
 80042da:	781b      	ldrb	r3, [r3, #0]
 80042dc:	f003 030f 	and.w	r3, r3, #15
 80042e0:	2101      	movs	r1, #1
 80042e2:	fa01 f303 	lsl.w	r3, r1, r3
 80042e6:	041b      	lsls	r3, r3, #16
 80042e8:	43db      	mvns	r3, r3
 80042ea:	68f9      	ldr	r1, [r7, #12]
 80042ec:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80042f0:	4013      	ands	r3, r2
 80042f2:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80042fa:	69da      	ldr	r2, [r3, #28]
 80042fc:	683b      	ldr	r3, [r7, #0]
 80042fe:	781b      	ldrb	r3, [r3, #0]
 8004300:	f003 030f 	and.w	r3, r3, #15
 8004304:	2101      	movs	r1, #1
 8004306:	fa01 f303 	lsl.w	r3, r1, r3
 800430a:	041b      	lsls	r3, r3, #16
 800430c:	43db      	mvns	r3, r3
 800430e:	68f9      	ldr	r1, [r7, #12]
 8004310:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004314:	4013      	ands	r3, r2
 8004316:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8004318:	68bb      	ldr	r3, [r7, #8]
 800431a:	015a      	lsls	r2, r3, #5
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	4413      	add	r3, r2
 8004320:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004324:	681a      	ldr	r2, [r3, #0]
 8004326:	68bb      	ldr	r3, [r7, #8]
 8004328:	0159      	lsls	r1, r3, #5
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	440b      	add	r3, r1
 800432e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004332:	4619      	mov	r1, r3
 8004334:	4b05      	ldr	r3, [pc, #20]	; (800434c <USB_DeactivateEndpoint+0x1b4>)
 8004336:	4013      	ands	r3, r2
 8004338:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800433a:	2300      	movs	r3, #0
}
 800433c:	4618      	mov	r0, r3
 800433e:	3714      	adds	r7, #20
 8004340:	46bd      	mov	sp, r7
 8004342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004346:	4770      	bx	lr
 8004348:	ec337800 	.word	0xec337800
 800434c:	eff37800 	.word	0xeff37800

08004350 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004350:	b580      	push	{r7, lr}
 8004352:	b08a      	sub	sp, #40	; 0x28
 8004354:	af02      	add	r7, sp, #8
 8004356:	60f8      	str	r0, [r7, #12]
 8004358:	60b9      	str	r1, [r7, #8]
 800435a:	4613      	mov	r3, r2
 800435c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8004362:	68bb      	ldr	r3, [r7, #8]
 8004364:	781b      	ldrb	r3, [r3, #0]
 8004366:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004368:	68bb      	ldr	r3, [r7, #8]
 800436a:	785b      	ldrb	r3, [r3, #1]
 800436c:	2b01      	cmp	r3, #1
 800436e:	f040 815c 	bne.w	800462a <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8004372:	68bb      	ldr	r3, [r7, #8]
 8004374:	695b      	ldr	r3, [r3, #20]
 8004376:	2b00      	cmp	r3, #0
 8004378:	d132      	bne.n	80043e0 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800437a:	69bb      	ldr	r3, [r7, #24]
 800437c:	015a      	lsls	r2, r3, #5
 800437e:	69fb      	ldr	r3, [r7, #28]
 8004380:	4413      	add	r3, r2
 8004382:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004386:	691b      	ldr	r3, [r3, #16]
 8004388:	69ba      	ldr	r2, [r7, #24]
 800438a:	0151      	lsls	r1, r2, #5
 800438c:	69fa      	ldr	r2, [r7, #28]
 800438e:	440a      	add	r2, r1
 8004390:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004394:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004398:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800439c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800439e:	69bb      	ldr	r3, [r7, #24]
 80043a0:	015a      	lsls	r2, r3, #5
 80043a2:	69fb      	ldr	r3, [r7, #28]
 80043a4:	4413      	add	r3, r2
 80043a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80043aa:	691b      	ldr	r3, [r3, #16]
 80043ac:	69ba      	ldr	r2, [r7, #24]
 80043ae:	0151      	lsls	r1, r2, #5
 80043b0:	69fa      	ldr	r2, [r7, #28]
 80043b2:	440a      	add	r2, r1
 80043b4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80043b8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80043bc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80043be:	69bb      	ldr	r3, [r7, #24]
 80043c0:	015a      	lsls	r2, r3, #5
 80043c2:	69fb      	ldr	r3, [r7, #28]
 80043c4:	4413      	add	r3, r2
 80043c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80043ca:	691b      	ldr	r3, [r3, #16]
 80043cc:	69ba      	ldr	r2, [r7, #24]
 80043ce:	0151      	lsls	r1, r2, #5
 80043d0:	69fa      	ldr	r2, [r7, #28]
 80043d2:	440a      	add	r2, r1
 80043d4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80043d8:	0cdb      	lsrs	r3, r3, #19
 80043da:	04db      	lsls	r3, r3, #19
 80043dc:	6113      	str	r3, [r2, #16]
 80043de:	e074      	b.n	80044ca <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80043e0:	69bb      	ldr	r3, [r7, #24]
 80043e2:	015a      	lsls	r2, r3, #5
 80043e4:	69fb      	ldr	r3, [r7, #28]
 80043e6:	4413      	add	r3, r2
 80043e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80043ec:	691b      	ldr	r3, [r3, #16]
 80043ee:	69ba      	ldr	r2, [r7, #24]
 80043f0:	0151      	lsls	r1, r2, #5
 80043f2:	69fa      	ldr	r2, [r7, #28]
 80043f4:	440a      	add	r2, r1
 80043f6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80043fa:	0cdb      	lsrs	r3, r3, #19
 80043fc:	04db      	lsls	r3, r3, #19
 80043fe:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004400:	69bb      	ldr	r3, [r7, #24]
 8004402:	015a      	lsls	r2, r3, #5
 8004404:	69fb      	ldr	r3, [r7, #28]
 8004406:	4413      	add	r3, r2
 8004408:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800440c:	691b      	ldr	r3, [r3, #16]
 800440e:	69ba      	ldr	r2, [r7, #24]
 8004410:	0151      	lsls	r1, r2, #5
 8004412:	69fa      	ldr	r2, [r7, #28]
 8004414:	440a      	add	r2, r1
 8004416:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800441a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800441e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004422:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8004424:	69bb      	ldr	r3, [r7, #24]
 8004426:	015a      	lsls	r2, r3, #5
 8004428:	69fb      	ldr	r3, [r7, #28]
 800442a:	4413      	add	r3, r2
 800442c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004430:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8004432:	68bb      	ldr	r3, [r7, #8]
 8004434:	6959      	ldr	r1, [r3, #20]
 8004436:	68bb      	ldr	r3, [r7, #8]
 8004438:	689b      	ldr	r3, [r3, #8]
 800443a:	440b      	add	r3, r1
 800443c:	1e59      	subs	r1, r3, #1
 800443e:	68bb      	ldr	r3, [r7, #8]
 8004440:	689b      	ldr	r3, [r3, #8]
 8004442:	fbb1 f3f3 	udiv	r3, r1, r3
 8004446:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8004448:	4b9d      	ldr	r3, [pc, #628]	; (80046c0 <USB_EPStartXfer+0x370>)
 800444a:	400b      	ands	r3, r1
 800444c:	69b9      	ldr	r1, [r7, #24]
 800444e:	0148      	lsls	r0, r1, #5
 8004450:	69f9      	ldr	r1, [r7, #28]
 8004452:	4401      	add	r1, r0
 8004454:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004458:	4313      	orrs	r3, r2
 800445a:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800445c:	69bb      	ldr	r3, [r7, #24]
 800445e:	015a      	lsls	r2, r3, #5
 8004460:	69fb      	ldr	r3, [r7, #28]
 8004462:	4413      	add	r3, r2
 8004464:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004468:	691a      	ldr	r2, [r3, #16]
 800446a:	68bb      	ldr	r3, [r7, #8]
 800446c:	695b      	ldr	r3, [r3, #20]
 800446e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004472:	69b9      	ldr	r1, [r7, #24]
 8004474:	0148      	lsls	r0, r1, #5
 8004476:	69f9      	ldr	r1, [r7, #28]
 8004478:	4401      	add	r1, r0
 800447a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800447e:	4313      	orrs	r3, r2
 8004480:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8004482:	68bb      	ldr	r3, [r7, #8]
 8004484:	78db      	ldrb	r3, [r3, #3]
 8004486:	2b01      	cmp	r3, #1
 8004488:	d11f      	bne.n	80044ca <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800448a:	69bb      	ldr	r3, [r7, #24]
 800448c:	015a      	lsls	r2, r3, #5
 800448e:	69fb      	ldr	r3, [r7, #28]
 8004490:	4413      	add	r3, r2
 8004492:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004496:	691b      	ldr	r3, [r3, #16]
 8004498:	69ba      	ldr	r2, [r7, #24]
 800449a:	0151      	lsls	r1, r2, #5
 800449c:	69fa      	ldr	r2, [r7, #28]
 800449e:	440a      	add	r2, r1
 80044a0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80044a4:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80044a8:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80044aa:	69bb      	ldr	r3, [r7, #24]
 80044ac:	015a      	lsls	r2, r3, #5
 80044ae:	69fb      	ldr	r3, [r7, #28]
 80044b0:	4413      	add	r3, r2
 80044b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80044b6:	691b      	ldr	r3, [r3, #16]
 80044b8:	69ba      	ldr	r2, [r7, #24]
 80044ba:	0151      	lsls	r1, r2, #5
 80044bc:	69fa      	ldr	r2, [r7, #28]
 80044be:	440a      	add	r2, r1
 80044c0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80044c4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80044c8:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 80044ca:	79fb      	ldrb	r3, [r7, #7]
 80044cc:	2b01      	cmp	r3, #1
 80044ce:	d14b      	bne.n	8004568 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80044d0:	68bb      	ldr	r3, [r7, #8]
 80044d2:	691b      	ldr	r3, [r3, #16]
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d009      	beq.n	80044ec <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80044d8:	69bb      	ldr	r3, [r7, #24]
 80044da:	015a      	lsls	r2, r3, #5
 80044dc:	69fb      	ldr	r3, [r7, #28]
 80044de:	4413      	add	r3, r2
 80044e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80044e4:	461a      	mov	r2, r3
 80044e6:	68bb      	ldr	r3, [r7, #8]
 80044e8:	691b      	ldr	r3, [r3, #16]
 80044ea:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80044ec:	68bb      	ldr	r3, [r7, #8]
 80044ee:	78db      	ldrb	r3, [r3, #3]
 80044f0:	2b01      	cmp	r3, #1
 80044f2:	d128      	bne.n	8004546 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80044f4:	69fb      	ldr	r3, [r7, #28]
 80044f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80044fa:	689b      	ldr	r3, [r3, #8]
 80044fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004500:	2b00      	cmp	r3, #0
 8004502:	d110      	bne.n	8004526 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004504:	69bb      	ldr	r3, [r7, #24]
 8004506:	015a      	lsls	r2, r3, #5
 8004508:	69fb      	ldr	r3, [r7, #28]
 800450a:	4413      	add	r3, r2
 800450c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	69ba      	ldr	r2, [r7, #24]
 8004514:	0151      	lsls	r1, r2, #5
 8004516:	69fa      	ldr	r2, [r7, #28]
 8004518:	440a      	add	r2, r1
 800451a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800451e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004522:	6013      	str	r3, [r2, #0]
 8004524:	e00f      	b.n	8004546 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004526:	69bb      	ldr	r3, [r7, #24]
 8004528:	015a      	lsls	r2, r3, #5
 800452a:	69fb      	ldr	r3, [r7, #28]
 800452c:	4413      	add	r3, r2
 800452e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	69ba      	ldr	r2, [r7, #24]
 8004536:	0151      	lsls	r1, r2, #5
 8004538:	69fa      	ldr	r2, [r7, #28]
 800453a:	440a      	add	r2, r1
 800453c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004540:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004544:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004546:	69bb      	ldr	r3, [r7, #24]
 8004548:	015a      	lsls	r2, r3, #5
 800454a:	69fb      	ldr	r3, [r7, #28]
 800454c:	4413      	add	r3, r2
 800454e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	69ba      	ldr	r2, [r7, #24]
 8004556:	0151      	lsls	r1, r2, #5
 8004558:	69fa      	ldr	r2, [r7, #28]
 800455a:	440a      	add	r2, r1
 800455c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004560:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004564:	6013      	str	r3, [r2, #0]
 8004566:	e12f      	b.n	80047c8 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004568:	69bb      	ldr	r3, [r7, #24]
 800456a:	015a      	lsls	r2, r3, #5
 800456c:	69fb      	ldr	r3, [r7, #28]
 800456e:	4413      	add	r3, r2
 8004570:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	69ba      	ldr	r2, [r7, #24]
 8004578:	0151      	lsls	r1, r2, #5
 800457a:	69fa      	ldr	r2, [r7, #28]
 800457c:	440a      	add	r2, r1
 800457e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004582:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004586:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004588:	68bb      	ldr	r3, [r7, #8]
 800458a:	78db      	ldrb	r3, [r3, #3]
 800458c:	2b01      	cmp	r3, #1
 800458e:	d015      	beq.n	80045bc <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8004590:	68bb      	ldr	r3, [r7, #8]
 8004592:	695b      	ldr	r3, [r3, #20]
 8004594:	2b00      	cmp	r3, #0
 8004596:	f000 8117 	beq.w	80047c8 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800459a:	69fb      	ldr	r3, [r7, #28]
 800459c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80045a0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80045a2:	68bb      	ldr	r3, [r7, #8]
 80045a4:	781b      	ldrb	r3, [r3, #0]
 80045a6:	f003 030f 	and.w	r3, r3, #15
 80045aa:	2101      	movs	r1, #1
 80045ac:	fa01 f303 	lsl.w	r3, r1, r3
 80045b0:	69f9      	ldr	r1, [r7, #28]
 80045b2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80045b6:	4313      	orrs	r3, r2
 80045b8:	634b      	str	r3, [r1, #52]	; 0x34
 80045ba:	e105      	b.n	80047c8 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80045bc:	69fb      	ldr	r3, [r7, #28]
 80045be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80045c2:	689b      	ldr	r3, [r3, #8]
 80045c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d110      	bne.n	80045ee <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80045cc:	69bb      	ldr	r3, [r7, #24]
 80045ce:	015a      	lsls	r2, r3, #5
 80045d0:	69fb      	ldr	r3, [r7, #28]
 80045d2:	4413      	add	r3, r2
 80045d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	69ba      	ldr	r2, [r7, #24]
 80045dc:	0151      	lsls	r1, r2, #5
 80045de:	69fa      	ldr	r2, [r7, #28]
 80045e0:	440a      	add	r2, r1
 80045e2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80045e6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80045ea:	6013      	str	r3, [r2, #0]
 80045ec:	e00f      	b.n	800460e <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80045ee:	69bb      	ldr	r3, [r7, #24]
 80045f0:	015a      	lsls	r2, r3, #5
 80045f2:	69fb      	ldr	r3, [r7, #28]
 80045f4:	4413      	add	r3, r2
 80045f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	69ba      	ldr	r2, [r7, #24]
 80045fe:	0151      	lsls	r1, r2, #5
 8004600:	69fa      	ldr	r2, [r7, #28]
 8004602:	440a      	add	r2, r1
 8004604:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004608:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800460c:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800460e:	68bb      	ldr	r3, [r7, #8]
 8004610:	68d9      	ldr	r1, [r3, #12]
 8004612:	68bb      	ldr	r3, [r7, #8]
 8004614:	781a      	ldrb	r2, [r3, #0]
 8004616:	68bb      	ldr	r3, [r7, #8]
 8004618:	695b      	ldr	r3, [r3, #20]
 800461a:	b298      	uxth	r0, r3
 800461c:	79fb      	ldrb	r3, [r7, #7]
 800461e:	9300      	str	r3, [sp, #0]
 8004620:	4603      	mov	r3, r0
 8004622:	68f8      	ldr	r0, [r7, #12]
 8004624:	f000 fa2b 	bl	8004a7e <USB_WritePacket>
 8004628:	e0ce      	b.n	80047c8 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800462a:	69bb      	ldr	r3, [r7, #24]
 800462c:	015a      	lsls	r2, r3, #5
 800462e:	69fb      	ldr	r3, [r7, #28]
 8004630:	4413      	add	r3, r2
 8004632:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004636:	691b      	ldr	r3, [r3, #16]
 8004638:	69ba      	ldr	r2, [r7, #24]
 800463a:	0151      	lsls	r1, r2, #5
 800463c:	69fa      	ldr	r2, [r7, #28]
 800463e:	440a      	add	r2, r1
 8004640:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004644:	0cdb      	lsrs	r3, r3, #19
 8004646:	04db      	lsls	r3, r3, #19
 8004648:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800464a:	69bb      	ldr	r3, [r7, #24]
 800464c:	015a      	lsls	r2, r3, #5
 800464e:	69fb      	ldr	r3, [r7, #28]
 8004650:	4413      	add	r3, r2
 8004652:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004656:	691b      	ldr	r3, [r3, #16]
 8004658:	69ba      	ldr	r2, [r7, #24]
 800465a:	0151      	lsls	r1, r2, #5
 800465c:	69fa      	ldr	r2, [r7, #28]
 800465e:	440a      	add	r2, r1
 8004660:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004664:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004668:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800466c:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800466e:	68bb      	ldr	r3, [r7, #8]
 8004670:	695b      	ldr	r3, [r3, #20]
 8004672:	2b00      	cmp	r3, #0
 8004674:	d126      	bne.n	80046c4 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8004676:	69bb      	ldr	r3, [r7, #24]
 8004678:	015a      	lsls	r2, r3, #5
 800467a:	69fb      	ldr	r3, [r7, #28]
 800467c:	4413      	add	r3, r2
 800467e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004682:	691a      	ldr	r2, [r3, #16]
 8004684:	68bb      	ldr	r3, [r7, #8]
 8004686:	689b      	ldr	r3, [r3, #8]
 8004688:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800468c:	69b9      	ldr	r1, [r7, #24]
 800468e:	0148      	lsls	r0, r1, #5
 8004690:	69f9      	ldr	r1, [r7, #28]
 8004692:	4401      	add	r1, r0
 8004694:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004698:	4313      	orrs	r3, r2
 800469a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800469c:	69bb      	ldr	r3, [r7, #24]
 800469e:	015a      	lsls	r2, r3, #5
 80046a0:	69fb      	ldr	r3, [r7, #28]
 80046a2:	4413      	add	r3, r2
 80046a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046a8:	691b      	ldr	r3, [r3, #16]
 80046aa:	69ba      	ldr	r2, [r7, #24]
 80046ac:	0151      	lsls	r1, r2, #5
 80046ae:	69fa      	ldr	r2, [r7, #28]
 80046b0:	440a      	add	r2, r1
 80046b2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80046b6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80046ba:	6113      	str	r3, [r2, #16]
 80046bc:	e036      	b.n	800472c <USB_EPStartXfer+0x3dc>
 80046be:	bf00      	nop
 80046c0:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80046c4:	68bb      	ldr	r3, [r7, #8]
 80046c6:	695a      	ldr	r2, [r3, #20]
 80046c8:	68bb      	ldr	r3, [r7, #8]
 80046ca:	689b      	ldr	r3, [r3, #8]
 80046cc:	4413      	add	r3, r2
 80046ce:	1e5a      	subs	r2, r3, #1
 80046d0:	68bb      	ldr	r3, [r7, #8]
 80046d2:	689b      	ldr	r3, [r3, #8]
 80046d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80046d8:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80046da:	69bb      	ldr	r3, [r7, #24]
 80046dc:	015a      	lsls	r2, r3, #5
 80046de:	69fb      	ldr	r3, [r7, #28]
 80046e0:	4413      	add	r3, r2
 80046e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046e6:	691a      	ldr	r2, [r3, #16]
 80046e8:	8afb      	ldrh	r3, [r7, #22]
 80046ea:	04d9      	lsls	r1, r3, #19
 80046ec:	4b39      	ldr	r3, [pc, #228]	; (80047d4 <USB_EPStartXfer+0x484>)
 80046ee:	400b      	ands	r3, r1
 80046f0:	69b9      	ldr	r1, [r7, #24]
 80046f2:	0148      	lsls	r0, r1, #5
 80046f4:	69f9      	ldr	r1, [r7, #28]
 80046f6:	4401      	add	r1, r0
 80046f8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80046fc:	4313      	orrs	r3, r2
 80046fe:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8004700:	69bb      	ldr	r3, [r7, #24]
 8004702:	015a      	lsls	r2, r3, #5
 8004704:	69fb      	ldr	r3, [r7, #28]
 8004706:	4413      	add	r3, r2
 8004708:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800470c:	691a      	ldr	r2, [r3, #16]
 800470e:	68bb      	ldr	r3, [r7, #8]
 8004710:	689b      	ldr	r3, [r3, #8]
 8004712:	8af9      	ldrh	r1, [r7, #22]
 8004714:	fb01 f303 	mul.w	r3, r1, r3
 8004718:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800471c:	69b9      	ldr	r1, [r7, #24]
 800471e:	0148      	lsls	r0, r1, #5
 8004720:	69f9      	ldr	r1, [r7, #28]
 8004722:	4401      	add	r1, r0
 8004724:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004728:	4313      	orrs	r3, r2
 800472a:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800472c:	79fb      	ldrb	r3, [r7, #7]
 800472e:	2b01      	cmp	r3, #1
 8004730:	d10d      	bne.n	800474e <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8004732:	68bb      	ldr	r3, [r7, #8]
 8004734:	68db      	ldr	r3, [r3, #12]
 8004736:	2b00      	cmp	r3, #0
 8004738:	d009      	beq.n	800474e <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800473a:	68bb      	ldr	r3, [r7, #8]
 800473c:	68d9      	ldr	r1, [r3, #12]
 800473e:	69bb      	ldr	r3, [r7, #24]
 8004740:	015a      	lsls	r2, r3, #5
 8004742:	69fb      	ldr	r3, [r7, #28]
 8004744:	4413      	add	r3, r2
 8004746:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800474a:	460a      	mov	r2, r1
 800474c:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800474e:	68bb      	ldr	r3, [r7, #8]
 8004750:	78db      	ldrb	r3, [r3, #3]
 8004752:	2b01      	cmp	r3, #1
 8004754:	d128      	bne.n	80047a8 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004756:	69fb      	ldr	r3, [r7, #28]
 8004758:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800475c:	689b      	ldr	r3, [r3, #8]
 800475e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004762:	2b00      	cmp	r3, #0
 8004764:	d110      	bne.n	8004788 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8004766:	69bb      	ldr	r3, [r7, #24]
 8004768:	015a      	lsls	r2, r3, #5
 800476a:	69fb      	ldr	r3, [r7, #28]
 800476c:	4413      	add	r3, r2
 800476e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	69ba      	ldr	r2, [r7, #24]
 8004776:	0151      	lsls	r1, r2, #5
 8004778:	69fa      	ldr	r2, [r7, #28]
 800477a:	440a      	add	r2, r1
 800477c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004780:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004784:	6013      	str	r3, [r2, #0]
 8004786:	e00f      	b.n	80047a8 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8004788:	69bb      	ldr	r3, [r7, #24]
 800478a:	015a      	lsls	r2, r3, #5
 800478c:	69fb      	ldr	r3, [r7, #28]
 800478e:	4413      	add	r3, r2
 8004790:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	69ba      	ldr	r2, [r7, #24]
 8004798:	0151      	lsls	r1, r2, #5
 800479a:	69fa      	ldr	r2, [r7, #28]
 800479c:	440a      	add	r2, r1
 800479e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80047a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80047a6:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80047a8:	69bb      	ldr	r3, [r7, #24]
 80047aa:	015a      	lsls	r2, r3, #5
 80047ac:	69fb      	ldr	r3, [r7, #28]
 80047ae:	4413      	add	r3, r2
 80047b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	69ba      	ldr	r2, [r7, #24]
 80047b8:	0151      	lsls	r1, r2, #5
 80047ba:	69fa      	ldr	r2, [r7, #28]
 80047bc:	440a      	add	r2, r1
 80047be:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80047c2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80047c6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80047c8:	2300      	movs	r3, #0
}
 80047ca:	4618      	mov	r0, r3
 80047cc:	3720      	adds	r7, #32
 80047ce:	46bd      	mov	sp, r7
 80047d0:	bd80      	pop	{r7, pc}
 80047d2:	bf00      	nop
 80047d4:	1ff80000 	.word	0x1ff80000

080047d8 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80047d8:	b480      	push	{r7}
 80047da:	b087      	sub	sp, #28
 80047dc:	af00      	add	r7, sp, #0
 80047de:	60f8      	str	r0, [r7, #12]
 80047e0:	60b9      	str	r1, [r7, #8]
 80047e2:	4613      	mov	r3, r2
 80047e4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 80047ea:	68bb      	ldr	r3, [r7, #8]
 80047ec:	781b      	ldrb	r3, [r3, #0]
 80047ee:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80047f0:	68bb      	ldr	r3, [r7, #8]
 80047f2:	785b      	ldrb	r3, [r3, #1]
 80047f4:	2b01      	cmp	r3, #1
 80047f6:	f040 80cd 	bne.w	8004994 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80047fa:	68bb      	ldr	r3, [r7, #8]
 80047fc:	695b      	ldr	r3, [r3, #20]
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d132      	bne.n	8004868 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004802:	693b      	ldr	r3, [r7, #16]
 8004804:	015a      	lsls	r2, r3, #5
 8004806:	697b      	ldr	r3, [r7, #20]
 8004808:	4413      	add	r3, r2
 800480a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800480e:	691b      	ldr	r3, [r3, #16]
 8004810:	693a      	ldr	r2, [r7, #16]
 8004812:	0151      	lsls	r1, r2, #5
 8004814:	697a      	ldr	r2, [r7, #20]
 8004816:	440a      	add	r2, r1
 8004818:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800481c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004820:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004824:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004826:	693b      	ldr	r3, [r7, #16]
 8004828:	015a      	lsls	r2, r3, #5
 800482a:	697b      	ldr	r3, [r7, #20]
 800482c:	4413      	add	r3, r2
 800482e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004832:	691b      	ldr	r3, [r3, #16]
 8004834:	693a      	ldr	r2, [r7, #16]
 8004836:	0151      	lsls	r1, r2, #5
 8004838:	697a      	ldr	r2, [r7, #20]
 800483a:	440a      	add	r2, r1
 800483c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004840:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004844:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004846:	693b      	ldr	r3, [r7, #16]
 8004848:	015a      	lsls	r2, r3, #5
 800484a:	697b      	ldr	r3, [r7, #20]
 800484c:	4413      	add	r3, r2
 800484e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004852:	691b      	ldr	r3, [r3, #16]
 8004854:	693a      	ldr	r2, [r7, #16]
 8004856:	0151      	lsls	r1, r2, #5
 8004858:	697a      	ldr	r2, [r7, #20]
 800485a:	440a      	add	r2, r1
 800485c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004860:	0cdb      	lsrs	r3, r3, #19
 8004862:	04db      	lsls	r3, r3, #19
 8004864:	6113      	str	r3, [r2, #16]
 8004866:	e04e      	b.n	8004906 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004868:	693b      	ldr	r3, [r7, #16]
 800486a:	015a      	lsls	r2, r3, #5
 800486c:	697b      	ldr	r3, [r7, #20]
 800486e:	4413      	add	r3, r2
 8004870:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004874:	691b      	ldr	r3, [r3, #16]
 8004876:	693a      	ldr	r2, [r7, #16]
 8004878:	0151      	lsls	r1, r2, #5
 800487a:	697a      	ldr	r2, [r7, #20]
 800487c:	440a      	add	r2, r1
 800487e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004882:	0cdb      	lsrs	r3, r3, #19
 8004884:	04db      	lsls	r3, r3, #19
 8004886:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004888:	693b      	ldr	r3, [r7, #16]
 800488a:	015a      	lsls	r2, r3, #5
 800488c:	697b      	ldr	r3, [r7, #20]
 800488e:	4413      	add	r3, r2
 8004890:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004894:	691b      	ldr	r3, [r3, #16]
 8004896:	693a      	ldr	r2, [r7, #16]
 8004898:	0151      	lsls	r1, r2, #5
 800489a:	697a      	ldr	r2, [r7, #20]
 800489c:	440a      	add	r2, r1
 800489e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80048a2:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80048a6:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80048aa:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 80048ac:	68bb      	ldr	r3, [r7, #8]
 80048ae:	695a      	ldr	r2, [r3, #20]
 80048b0:	68bb      	ldr	r3, [r7, #8]
 80048b2:	689b      	ldr	r3, [r3, #8]
 80048b4:	429a      	cmp	r2, r3
 80048b6:	d903      	bls.n	80048c0 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 80048b8:	68bb      	ldr	r3, [r7, #8]
 80048ba:	689a      	ldr	r2, [r3, #8]
 80048bc:	68bb      	ldr	r3, [r7, #8]
 80048be:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80048c0:	693b      	ldr	r3, [r7, #16]
 80048c2:	015a      	lsls	r2, r3, #5
 80048c4:	697b      	ldr	r3, [r7, #20]
 80048c6:	4413      	add	r3, r2
 80048c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80048cc:	691b      	ldr	r3, [r3, #16]
 80048ce:	693a      	ldr	r2, [r7, #16]
 80048d0:	0151      	lsls	r1, r2, #5
 80048d2:	697a      	ldr	r2, [r7, #20]
 80048d4:	440a      	add	r2, r1
 80048d6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80048da:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80048de:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80048e0:	693b      	ldr	r3, [r7, #16]
 80048e2:	015a      	lsls	r2, r3, #5
 80048e4:	697b      	ldr	r3, [r7, #20]
 80048e6:	4413      	add	r3, r2
 80048e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80048ec:	691a      	ldr	r2, [r3, #16]
 80048ee:	68bb      	ldr	r3, [r7, #8]
 80048f0:	695b      	ldr	r3, [r3, #20]
 80048f2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80048f6:	6939      	ldr	r1, [r7, #16]
 80048f8:	0148      	lsls	r0, r1, #5
 80048fa:	6979      	ldr	r1, [r7, #20]
 80048fc:	4401      	add	r1, r0
 80048fe:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004902:	4313      	orrs	r3, r2
 8004904:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8004906:	79fb      	ldrb	r3, [r7, #7]
 8004908:	2b01      	cmp	r3, #1
 800490a:	d11e      	bne.n	800494a <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800490c:	68bb      	ldr	r3, [r7, #8]
 800490e:	691b      	ldr	r3, [r3, #16]
 8004910:	2b00      	cmp	r3, #0
 8004912:	d009      	beq.n	8004928 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004914:	693b      	ldr	r3, [r7, #16]
 8004916:	015a      	lsls	r2, r3, #5
 8004918:	697b      	ldr	r3, [r7, #20]
 800491a:	4413      	add	r3, r2
 800491c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004920:	461a      	mov	r2, r3
 8004922:	68bb      	ldr	r3, [r7, #8]
 8004924:	691b      	ldr	r3, [r3, #16]
 8004926:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004928:	693b      	ldr	r3, [r7, #16]
 800492a:	015a      	lsls	r2, r3, #5
 800492c:	697b      	ldr	r3, [r7, #20]
 800492e:	4413      	add	r3, r2
 8004930:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	693a      	ldr	r2, [r7, #16]
 8004938:	0151      	lsls	r1, r2, #5
 800493a:	697a      	ldr	r2, [r7, #20]
 800493c:	440a      	add	r2, r1
 800493e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004942:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004946:	6013      	str	r3, [r2, #0]
 8004948:	e092      	b.n	8004a70 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800494a:	693b      	ldr	r3, [r7, #16]
 800494c:	015a      	lsls	r2, r3, #5
 800494e:	697b      	ldr	r3, [r7, #20]
 8004950:	4413      	add	r3, r2
 8004952:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	693a      	ldr	r2, [r7, #16]
 800495a:	0151      	lsls	r1, r2, #5
 800495c:	697a      	ldr	r2, [r7, #20]
 800495e:	440a      	add	r2, r1
 8004960:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004964:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004968:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800496a:	68bb      	ldr	r3, [r7, #8]
 800496c:	695b      	ldr	r3, [r3, #20]
 800496e:	2b00      	cmp	r3, #0
 8004970:	d07e      	beq.n	8004a70 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004972:	697b      	ldr	r3, [r7, #20]
 8004974:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004978:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800497a:	68bb      	ldr	r3, [r7, #8]
 800497c:	781b      	ldrb	r3, [r3, #0]
 800497e:	f003 030f 	and.w	r3, r3, #15
 8004982:	2101      	movs	r1, #1
 8004984:	fa01 f303 	lsl.w	r3, r1, r3
 8004988:	6979      	ldr	r1, [r7, #20]
 800498a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800498e:	4313      	orrs	r3, r2
 8004990:	634b      	str	r3, [r1, #52]	; 0x34
 8004992:	e06d      	b.n	8004a70 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004994:	693b      	ldr	r3, [r7, #16]
 8004996:	015a      	lsls	r2, r3, #5
 8004998:	697b      	ldr	r3, [r7, #20]
 800499a:	4413      	add	r3, r2
 800499c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049a0:	691b      	ldr	r3, [r3, #16]
 80049a2:	693a      	ldr	r2, [r7, #16]
 80049a4:	0151      	lsls	r1, r2, #5
 80049a6:	697a      	ldr	r2, [r7, #20]
 80049a8:	440a      	add	r2, r1
 80049aa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80049ae:	0cdb      	lsrs	r3, r3, #19
 80049b0:	04db      	lsls	r3, r3, #19
 80049b2:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80049b4:	693b      	ldr	r3, [r7, #16]
 80049b6:	015a      	lsls	r2, r3, #5
 80049b8:	697b      	ldr	r3, [r7, #20]
 80049ba:	4413      	add	r3, r2
 80049bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049c0:	691b      	ldr	r3, [r3, #16]
 80049c2:	693a      	ldr	r2, [r7, #16]
 80049c4:	0151      	lsls	r1, r2, #5
 80049c6:	697a      	ldr	r2, [r7, #20]
 80049c8:	440a      	add	r2, r1
 80049ca:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80049ce:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80049d2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80049d6:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 80049d8:	68bb      	ldr	r3, [r7, #8]
 80049da:	695b      	ldr	r3, [r3, #20]
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d003      	beq.n	80049e8 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 80049e0:	68bb      	ldr	r3, [r7, #8]
 80049e2:	689a      	ldr	r2, [r3, #8]
 80049e4:	68bb      	ldr	r3, [r7, #8]
 80049e6:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80049e8:	693b      	ldr	r3, [r7, #16]
 80049ea:	015a      	lsls	r2, r3, #5
 80049ec:	697b      	ldr	r3, [r7, #20]
 80049ee:	4413      	add	r3, r2
 80049f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049f4:	691b      	ldr	r3, [r3, #16]
 80049f6:	693a      	ldr	r2, [r7, #16]
 80049f8:	0151      	lsls	r1, r2, #5
 80049fa:	697a      	ldr	r2, [r7, #20]
 80049fc:	440a      	add	r2, r1
 80049fe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004a02:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004a06:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8004a08:	693b      	ldr	r3, [r7, #16]
 8004a0a:	015a      	lsls	r2, r3, #5
 8004a0c:	697b      	ldr	r3, [r7, #20]
 8004a0e:	4413      	add	r3, r2
 8004a10:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a14:	691a      	ldr	r2, [r3, #16]
 8004a16:	68bb      	ldr	r3, [r7, #8]
 8004a18:	689b      	ldr	r3, [r3, #8]
 8004a1a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004a1e:	6939      	ldr	r1, [r7, #16]
 8004a20:	0148      	lsls	r0, r1, #5
 8004a22:	6979      	ldr	r1, [r7, #20]
 8004a24:	4401      	add	r1, r0
 8004a26:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004a2a:	4313      	orrs	r3, r2
 8004a2c:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8004a2e:	79fb      	ldrb	r3, [r7, #7]
 8004a30:	2b01      	cmp	r3, #1
 8004a32:	d10d      	bne.n	8004a50 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8004a34:	68bb      	ldr	r3, [r7, #8]
 8004a36:	68db      	ldr	r3, [r3, #12]
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d009      	beq.n	8004a50 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8004a3c:	68bb      	ldr	r3, [r7, #8]
 8004a3e:	68d9      	ldr	r1, [r3, #12]
 8004a40:	693b      	ldr	r3, [r7, #16]
 8004a42:	015a      	lsls	r2, r3, #5
 8004a44:	697b      	ldr	r3, [r7, #20]
 8004a46:	4413      	add	r3, r2
 8004a48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a4c:	460a      	mov	r2, r1
 8004a4e:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8004a50:	693b      	ldr	r3, [r7, #16]
 8004a52:	015a      	lsls	r2, r3, #5
 8004a54:	697b      	ldr	r3, [r7, #20]
 8004a56:	4413      	add	r3, r2
 8004a58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	693a      	ldr	r2, [r7, #16]
 8004a60:	0151      	lsls	r1, r2, #5
 8004a62:	697a      	ldr	r2, [r7, #20]
 8004a64:	440a      	add	r2, r1
 8004a66:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004a6a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004a6e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004a70:	2300      	movs	r3, #0
}
 8004a72:	4618      	mov	r0, r3
 8004a74:	371c      	adds	r7, #28
 8004a76:	46bd      	mov	sp, r7
 8004a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a7c:	4770      	bx	lr

08004a7e <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8004a7e:	b480      	push	{r7}
 8004a80:	b089      	sub	sp, #36	; 0x24
 8004a82:	af00      	add	r7, sp, #0
 8004a84:	60f8      	str	r0, [r7, #12]
 8004a86:	60b9      	str	r1, [r7, #8]
 8004a88:	4611      	mov	r1, r2
 8004a8a:	461a      	mov	r2, r3
 8004a8c:	460b      	mov	r3, r1
 8004a8e:	71fb      	strb	r3, [r7, #7]
 8004a90:	4613      	mov	r3, r2
 8004a92:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8004a98:	68bb      	ldr	r3, [r7, #8]
 8004a9a:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8004a9c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d123      	bne.n	8004aec <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8004aa4:	88bb      	ldrh	r3, [r7, #4]
 8004aa6:	3303      	adds	r3, #3
 8004aa8:	089b      	lsrs	r3, r3, #2
 8004aaa:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8004aac:	2300      	movs	r3, #0
 8004aae:	61bb      	str	r3, [r7, #24]
 8004ab0:	e018      	b.n	8004ae4 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8004ab2:	79fb      	ldrb	r3, [r7, #7]
 8004ab4:	031a      	lsls	r2, r3, #12
 8004ab6:	697b      	ldr	r3, [r7, #20]
 8004ab8:	4413      	add	r3, r2
 8004aba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004abe:	461a      	mov	r2, r3
 8004ac0:	69fb      	ldr	r3, [r7, #28]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	6013      	str	r3, [r2, #0]
      pSrc++;
 8004ac6:	69fb      	ldr	r3, [r7, #28]
 8004ac8:	3301      	adds	r3, #1
 8004aca:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004acc:	69fb      	ldr	r3, [r7, #28]
 8004ace:	3301      	adds	r3, #1
 8004ad0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004ad2:	69fb      	ldr	r3, [r7, #28]
 8004ad4:	3301      	adds	r3, #1
 8004ad6:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004ad8:	69fb      	ldr	r3, [r7, #28]
 8004ada:	3301      	adds	r3, #1
 8004adc:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8004ade:	69bb      	ldr	r3, [r7, #24]
 8004ae0:	3301      	adds	r3, #1
 8004ae2:	61bb      	str	r3, [r7, #24]
 8004ae4:	69ba      	ldr	r2, [r7, #24]
 8004ae6:	693b      	ldr	r3, [r7, #16]
 8004ae8:	429a      	cmp	r2, r3
 8004aea:	d3e2      	bcc.n	8004ab2 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8004aec:	2300      	movs	r3, #0
}
 8004aee:	4618      	mov	r0, r3
 8004af0:	3724      	adds	r7, #36	; 0x24
 8004af2:	46bd      	mov	sp, r7
 8004af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af8:	4770      	bx	lr

08004afa <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8004afa:	b480      	push	{r7}
 8004afc:	b08b      	sub	sp, #44	; 0x2c
 8004afe:	af00      	add	r7, sp, #0
 8004b00:	60f8      	str	r0, [r7, #12]
 8004b02:	60b9      	str	r1, [r7, #8]
 8004b04:	4613      	mov	r3, r2
 8004b06:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8004b0c:	68bb      	ldr	r3, [r7, #8]
 8004b0e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8004b10:	88fb      	ldrh	r3, [r7, #6]
 8004b12:	089b      	lsrs	r3, r3, #2
 8004b14:	b29b      	uxth	r3, r3
 8004b16:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8004b18:	88fb      	ldrh	r3, [r7, #6]
 8004b1a:	f003 0303 	and.w	r3, r3, #3
 8004b1e:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8004b20:	2300      	movs	r3, #0
 8004b22:	623b      	str	r3, [r7, #32]
 8004b24:	e014      	b.n	8004b50 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8004b26:	69bb      	ldr	r3, [r7, #24]
 8004b28:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004b2c:	681a      	ldr	r2, [r3, #0]
 8004b2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b30:	601a      	str	r2, [r3, #0]
    pDest++;
 8004b32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b34:	3301      	adds	r3, #1
 8004b36:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004b38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b3a:	3301      	adds	r3, #1
 8004b3c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004b3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b40:	3301      	adds	r3, #1
 8004b42:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004b44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b46:	3301      	adds	r3, #1
 8004b48:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8004b4a:	6a3b      	ldr	r3, [r7, #32]
 8004b4c:	3301      	adds	r3, #1
 8004b4e:	623b      	str	r3, [r7, #32]
 8004b50:	6a3a      	ldr	r2, [r7, #32]
 8004b52:	697b      	ldr	r3, [r7, #20]
 8004b54:	429a      	cmp	r2, r3
 8004b56:	d3e6      	bcc.n	8004b26 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8004b58:	8bfb      	ldrh	r3, [r7, #30]
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d01e      	beq.n	8004b9c <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8004b5e:	2300      	movs	r3, #0
 8004b60:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8004b62:	69bb      	ldr	r3, [r7, #24]
 8004b64:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004b68:	461a      	mov	r2, r3
 8004b6a:	f107 0310 	add.w	r3, r7, #16
 8004b6e:	6812      	ldr	r2, [r2, #0]
 8004b70:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8004b72:	693a      	ldr	r2, [r7, #16]
 8004b74:	6a3b      	ldr	r3, [r7, #32]
 8004b76:	b2db      	uxtb	r3, r3
 8004b78:	00db      	lsls	r3, r3, #3
 8004b7a:	fa22 f303 	lsr.w	r3, r2, r3
 8004b7e:	b2da      	uxtb	r2, r3
 8004b80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b82:	701a      	strb	r2, [r3, #0]
      i++;
 8004b84:	6a3b      	ldr	r3, [r7, #32]
 8004b86:	3301      	adds	r3, #1
 8004b88:	623b      	str	r3, [r7, #32]
      pDest++;
 8004b8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b8c:	3301      	adds	r3, #1
 8004b8e:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8004b90:	8bfb      	ldrh	r3, [r7, #30]
 8004b92:	3b01      	subs	r3, #1
 8004b94:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8004b96:	8bfb      	ldrh	r3, [r7, #30]
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d1ea      	bne.n	8004b72 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8004b9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004b9e:	4618      	mov	r0, r3
 8004ba0:	372c      	adds	r7, #44	; 0x2c
 8004ba2:	46bd      	mov	sp, r7
 8004ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba8:	4770      	bx	lr

08004baa <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004baa:	b480      	push	{r7}
 8004bac:	b085      	sub	sp, #20
 8004bae:	af00      	add	r7, sp, #0
 8004bb0:	6078      	str	r0, [r7, #4]
 8004bb2:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004bb8:	683b      	ldr	r3, [r7, #0]
 8004bba:	781b      	ldrb	r3, [r3, #0]
 8004bbc:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004bbe:	683b      	ldr	r3, [r7, #0]
 8004bc0:	785b      	ldrb	r3, [r3, #1]
 8004bc2:	2b01      	cmp	r3, #1
 8004bc4:	d12c      	bne.n	8004c20 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8004bc6:	68bb      	ldr	r3, [r7, #8]
 8004bc8:	015a      	lsls	r2, r3, #5
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	4413      	add	r3, r2
 8004bce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	db12      	blt.n	8004bfe <USB_EPSetStall+0x54>
 8004bd8:	68bb      	ldr	r3, [r7, #8]
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d00f      	beq.n	8004bfe <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8004bde:	68bb      	ldr	r3, [r7, #8]
 8004be0:	015a      	lsls	r2, r3, #5
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	4413      	add	r3, r2
 8004be6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	68ba      	ldr	r2, [r7, #8]
 8004bee:	0151      	lsls	r1, r2, #5
 8004bf0:	68fa      	ldr	r2, [r7, #12]
 8004bf2:	440a      	add	r2, r1
 8004bf4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004bf8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004bfc:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8004bfe:	68bb      	ldr	r3, [r7, #8]
 8004c00:	015a      	lsls	r2, r3, #5
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	4413      	add	r3, r2
 8004c06:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	68ba      	ldr	r2, [r7, #8]
 8004c0e:	0151      	lsls	r1, r2, #5
 8004c10:	68fa      	ldr	r2, [r7, #12]
 8004c12:	440a      	add	r2, r1
 8004c14:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004c18:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004c1c:	6013      	str	r3, [r2, #0]
 8004c1e:	e02b      	b.n	8004c78 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8004c20:	68bb      	ldr	r3, [r7, #8]
 8004c22:	015a      	lsls	r2, r3, #5
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	4413      	add	r3, r2
 8004c28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	db12      	blt.n	8004c58 <USB_EPSetStall+0xae>
 8004c32:	68bb      	ldr	r3, [r7, #8]
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d00f      	beq.n	8004c58 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8004c38:	68bb      	ldr	r3, [r7, #8]
 8004c3a:	015a      	lsls	r2, r3, #5
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	4413      	add	r3, r2
 8004c40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	68ba      	ldr	r2, [r7, #8]
 8004c48:	0151      	lsls	r1, r2, #5
 8004c4a:	68fa      	ldr	r2, [r7, #12]
 8004c4c:	440a      	add	r2, r1
 8004c4e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004c52:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004c56:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8004c58:	68bb      	ldr	r3, [r7, #8]
 8004c5a:	015a      	lsls	r2, r3, #5
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	4413      	add	r3, r2
 8004c60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	68ba      	ldr	r2, [r7, #8]
 8004c68:	0151      	lsls	r1, r2, #5
 8004c6a:	68fa      	ldr	r2, [r7, #12]
 8004c6c:	440a      	add	r2, r1
 8004c6e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004c72:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004c76:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004c78:	2300      	movs	r3, #0
}
 8004c7a:	4618      	mov	r0, r3
 8004c7c:	3714      	adds	r7, #20
 8004c7e:	46bd      	mov	sp, r7
 8004c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c84:	4770      	bx	lr

08004c86 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004c86:	b480      	push	{r7}
 8004c88:	b085      	sub	sp, #20
 8004c8a:	af00      	add	r7, sp, #0
 8004c8c:	6078      	str	r0, [r7, #4]
 8004c8e:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004c94:	683b      	ldr	r3, [r7, #0]
 8004c96:	781b      	ldrb	r3, [r3, #0]
 8004c98:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004c9a:	683b      	ldr	r3, [r7, #0]
 8004c9c:	785b      	ldrb	r3, [r3, #1]
 8004c9e:	2b01      	cmp	r3, #1
 8004ca0:	d128      	bne.n	8004cf4 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8004ca2:	68bb      	ldr	r3, [r7, #8]
 8004ca4:	015a      	lsls	r2, r3, #5
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	4413      	add	r3, r2
 8004caa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	68ba      	ldr	r2, [r7, #8]
 8004cb2:	0151      	lsls	r1, r2, #5
 8004cb4:	68fa      	ldr	r2, [r7, #12]
 8004cb6:	440a      	add	r2, r1
 8004cb8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004cbc:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004cc0:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004cc2:	683b      	ldr	r3, [r7, #0]
 8004cc4:	78db      	ldrb	r3, [r3, #3]
 8004cc6:	2b03      	cmp	r3, #3
 8004cc8:	d003      	beq.n	8004cd2 <USB_EPClearStall+0x4c>
 8004cca:	683b      	ldr	r3, [r7, #0]
 8004ccc:	78db      	ldrb	r3, [r3, #3]
 8004cce:	2b02      	cmp	r3, #2
 8004cd0:	d138      	bne.n	8004d44 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004cd2:	68bb      	ldr	r3, [r7, #8]
 8004cd4:	015a      	lsls	r2, r3, #5
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	4413      	add	r3, r2
 8004cda:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	68ba      	ldr	r2, [r7, #8]
 8004ce2:	0151      	lsls	r1, r2, #5
 8004ce4:	68fa      	ldr	r2, [r7, #12]
 8004ce6:	440a      	add	r2, r1
 8004ce8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004cec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004cf0:	6013      	str	r3, [r2, #0]
 8004cf2:	e027      	b.n	8004d44 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004cf4:	68bb      	ldr	r3, [r7, #8]
 8004cf6:	015a      	lsls	r2, r3, #5
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	4413      	add	r3, r2
 8004cfc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	68ba      	ldr	r2, [r7, #8]
 8004d04:	0151      	lsls	r1, r2, #5
 8004d06:	68fa      	ldr	r2, [r7, #12]
 8004d08:	440a      	add	r2, r1
 8004d0a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004d0e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004d12:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004d14:	683b      	ldr	r3, [r7, #0]
 8004d16:	78db      	ldrb	r3, [r3, #3]
 8004d18:	2b03      	cmp	r3, #3
 8004d1a:	d003      	beq.n	8004d24 <USB_EPClearStall+0x9e>
 8004d1c:	683b      	ldr	r3, [r7, #0]
 8004d1e:	78db      	ldrb	r3, [r3, #3]
 8004d20:	2b02      	cmp	r3, #2
 8004d22:	d10f      	bne.n	8004d44 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004d24:	68bb      	ldr	r3, [r7, #8]
 8004d26:	015a      	lsls	r2, r3, #5
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	4413      	add	r3, r2
 8004d2c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	68ba      	ldr	r2, [r7, #8]
 8004d34:	0151      	lsls	r1, r2, #5
 8004d36:	68fa      	ldr	r2, [r7, #12]
 8004d38:	440a      	add	r2, r1
 8004d3a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004d3e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d42:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8004d44:	2300      	movs	r3, #0
}
 8004d46:	4618      	mov	r0, r3
 8004d48:	3714      	adds	r7, #20
 8004d4a:	46bd      	mov	sp, r7
 8004d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d50:	4770      	bx	lr

08004d52 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8004d52:	b480      	push	{r7}
 8004d54:	b085      	sub	sp, #20
 8004d56:	af00      	add	r7, sp, #0
 8004d58:	6078      	str	r0, [r7, #4]
 8004d5a:	460b      	mov	r3, r1
 8004d5c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	68fa      	ldr	r2, [r7, #12]
 8004d6c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004d70:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8004d74:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d7c:	681a      	ldr	r2, [r3, #0]
 8004d7e:	78fb      	ldrb	r3, [r7, #3]
 8004d80:	011b      	lsls	r3, r3, #4
 8004d82:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8004d86:	68f9      	ldr	r1, [r7, #12]
 8004d88:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004d8c:	4313      	orrs	r3, r2
 8004d8e:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8004d90:	2300      	movs	r3, #0
}
 8004d92:	4618      	mov	r0, r3
 8004d94:	3714      	adds	r7, #20
 8004d96:	46bd      	mov	sp, r7
 8004d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d9c:	4770      	bx	lr

08004d9e <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8004d9e:	b480      	push	{r7}
 8004da0:	b085      	sub	sp, #20
 8004da2:	af00      	add	r7, sp, #0
 8004da4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	68fa      	ldr	r2, [r7, #12]
 8004db4:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004db8:	f023 0303 	bic.w	r3, r3, #3
 8004dbc:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004dc4:	685b      	ldr	r3, [r3, #4]
 8004dc6:	68fa      	ldr	r2, [r7, #12]
 8004dc8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004dcc:	f023 0302 	bic.w	r3, r3, #2
 8004dd0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004dd2:	2300      	movs	r3, #0
}
 8004dd4:	4618      	mov	r0, r3
 8004dd6:	3714      	adds	r7, #20
 8004dd8:	46bd      	mov	sp, r7
 8004dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dde:	4770      	bx	lr

08004de0 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8004de0:	b480      	push	{r7}
 8004de2:	b085      	sub	sp, #20
 8004de4:	af00      	add	r7, sp, #0
 8004de6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	68fa      	ldr	r2, [r7, #12]
 8004df6:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004dfa:	f023 0303 	bic.w	r3, r3, #3
 8004dfe:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e06:	685b      	ldr	r3, [r3, #4]
 8004e08:	68fa      	ldr	r2, [r7, #12]
 8004e0a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004e0e:	f043 0302 	orr.w	r3, r3, #2
 8004e12:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004e14:	2300      	movs	r3, #0
}
 8004e16:	4618      	mov	r0, r3
 8004e18:	3714      	adds	r7, #20
 8004e1a:	46bd      	mov	sp, r7
 8004e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e20:	4770      	bx	lr

08004e22 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8004e22:	b480      	push	{r7}
 8004e24:	b085      	sub	sp, #20
 8004e26:	af00      	add	r7, sp, #0
 8004e28:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	695b      	ldr	r3, [r3, #20]
 8004e2e:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	699b      	ldr	r3, [r3, #24]
 8004e34:	68fa      	ldr	r2, [r7, #12]
 8004e36:	4013      	ands	r3, r2
 8004e38:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8004e3a:	68fb      	ldr	r3, [r7, #12]
}
 8004e3c:	4618      	mov	r0, r3
 8004e3e:	3714      	adds	r7, #20
 8004e40:	46bd      	mov	sp, r7
 8004e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e46:	4770      	bx	lr

08004e48 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8004e48:	b480      	push	{r7}
 8004e4a:	b085      	sub	sp, #20
 8004e4c:	af00      	add	r7, sp, #0
 8004e4e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e5a:	699b      	ldr	r3, [r3, #24]
 8004e5c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e64:	69db      	ldr	r3, [r3, #28]
 8004e66:	68ba      	ldr	r2, [r7, #8]
 8004e68:	4013      	ands	r3, r2
 8004e6a:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8004e6c:	68bb      	ldr	r3, [r7, #8]
 8004e6e:	0c1b      	lsrs	r3, r3, #16
}
 8004e70:	4618      	mov	r0, r3
 8004e72:	3714      	adds	r7, #20
 8004e74:	46bd      	mov	sp, r7
 8004e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e7a:	4770      	bx	lr

08004e7c <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8004e7c:	b480      	push	{r7}
 8004e7e:	b085      	sub	sp, #20
 8004e80:	af00      	add	r7, sp, #0
 8004e82:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e8e:	699b      	ldr	r3, [r3, #24]
 8004e90:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e98:	69db      	ldr	r3, [r3, #28]
 8004e9a:	68ba      	ldr	r2, [r7, #8]
 8004e9c:	4013      	ands	r3, r2
 8004e9e:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8004ea0:	68bb      	ldr	r3, [r7, #8]
 8004ea2:	b29b      	uxth	r3, r3
}
 8004ea4:	4618      	mov	r0, r3
 8004ea6:	3714      	adds	r7, #20
 8004ea8:	46bd      	mov	sp, r7
 8004eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eae:	4770      	bx	lr

08004eb0 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8004eb0:	b480      	push	{r7}
 8004eb2:	b085      	sub	sp, #20
 8004eb4:	af00      	add	r7, sp, #0
 8004eb6:	6078      	str	r0, [r7, #4]
 8004eb8:	460b      	mov	r3, r1
 8004eba:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8004ec0:	78fb      	ldrb	r3, [r7, #3]
 8004ec2:	015a      	lsls	r2, r3, #5
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	4413      	add	r3, r2
 8004ec8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ecc:	689b      	ldr	r3, [r3, #8]
 8004ece:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ed6:	695b      	ldr	r3, [r3, #20]
 8004ed8:	68ba      	ldr	r2, [r7, #8]
 8004eda:	4013      	ands	r3, r2
 8004edc:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8004ede:	68bb      	ldr	r3, [r7, #8]
}
 8004ee0:	4618      	mov	r0, r3
 8004ee2:	3714      	adds	r7, #20
 8004ee4:	46bd      	mov	sp, r7
 8004ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eea:	4770      	bx	lr

08004eec <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8004eec:	b480      	push	{r7}
 8004eee:	b087      	sub	sp, #28
 8004ef0:	af00      	add	r7, sp, #0
 8004ef2:	6078      	str	r0, [r7, #4]
 8004ef4:	460b      	mov	r3, r1
 8004ef6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8004efc:	697b      	ldr	r3, [r7, #20]
 8004efe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f02:	691b      	ldr	r3, [r3, #16]
 8004f04:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8004f06:	697b      	ldr	r3, [r7, #20]
 8004f08:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f0e:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8004f10:	78fb      	ldrb	r3, [r7, #3]
 8004f12:	f003 030f 	and.w	r3, r3, #15
 8004f16:	68fa      	ldr	r2, [r7, #12]
 8004f18:	fa22 f303 	lsr.w	r3, r2, r3
 8004f1c:	01db      	lsls	r3, r3, #7
 8004f1e:	b2db      	uxtb	r3, r3
 8004f20:	693a      	ldr	r2, [r7, #16]
 8004f22:	4313      	orrs	r3, r2
 8004f24:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8004f26:	78fb      	ldrb	r3, [r7, #3]
 8004f28:	015a      	lsls	r2, r3, #5
 8004f2a:	697b      	ldr	r3, [r7, #20]
 8004f2c:	4413      	add	r3, r2
 8004f2e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f32:	689b      	ldr	r3, [r3, #8]
 8004f34:	693a      	ldr	r2, [r7, #16]
 8004f36:	4013      	ands	r3, r2
 8004f38:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8004f3a:	68bb      	ldr	r3, [r7, #8]
}
 8004f3c:	4618      	mov	r0, r3
 8004f3e:	371c      	adds	r7, #28
 8004f40:	46bd      	mov	sp, r7
 8004f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f46:	4770      	bx	lr

08004f48 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8004f48:	b480      	push	{r7}
 8004f4a:	b083      	sub	sp, #12
 8004f4c:	af00      	add	r7, sp, #0
 8004f4e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	695b      	ldr	r3, [r3, #20]
 8004f54:	f003 0301 	and.w	r3, r3, #1
}
 8004f58:	4618      	mov	r0, r3
 8004f5a:	370c      	adds	r7, #12
 8004f5c:	46bd      	mov	sp, r7
 8004f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f62:	4770      	bx	lr

08004f64 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8004f64:	b480      	push	{r7}
 8004f66:	b085      	sub	sp, #20
 8004f68:	af00      	add	r7, sp, #0
 8004f6a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	68fa      	ldr	r2, [r7, #12]
 8004f7a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004f7e:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8004f82:	f023 0307 	bic.w	r3, r3, #7
 8004f86:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f8e:	685b      	ldr	r3, [r3, #4]
 8004f90:	68fa      	ldr	r2, [r7, #12]
 8004f92:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004f96:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004f9a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004f9c:	2300      	movs	r3, #0
}
 8004f9e:	4618      	mov	r0, r3
 8004fa0:	3714      	adds	r7, #20
 8004fa2:	46bd      	mov	sp, r7
 8004fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa8:	4770      	bx	lr
	...

08004fac <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8004fac:	b480      	push	{r7}
 8004fae:	b087      	sub	sp, #28
 8004fb0:	af00      	add	r7, sp, #0
 8004fb2:	60f8      	str	r0, [r7, #12]
 8004fb4:	460b      	mov	r3, r1
 8004fb6:	607a      	str	r2, [r7, #4]
 8004fb8:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	333c      	adds	r3, #60	; 0x3c
 8004fc2:	3304      	adds	r3, #4
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8004fc8:	693b      	ldr	r3, [r7, #16]
 8004fca:	4a26      	ldr	r2, [pc, #152]	; (8005064 <USB_EP0_OutStart+0xb8>)
 8004fcc:	4293      	cmp	r3, r2
 8004fce:	d90a      	bls.n	8004fe6 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004fd0:	697b      	ldr	r3, [r7, #20]
 8004fd2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004fdc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004fe0:	d101      	bne.n	8004fe6 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8004fe2:	2300      	movs	r3, #0
 8004fe4:	e037      	b.n	8005056 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8004fe6:	697b      	ldr	r3, [r7, #20]
 8004fe8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004fec:	461a      	mov	r2, r3
 8004fee:	2300      	movs	r3, #0
 8004ff0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004ff2:	697b      	ldr	r3, [r7, #20]
 8004ff4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ff8:	691b      	ldr	r3, [r3, #16]
 8004ffa:	697a      	ldr	r2, [r7, #20]
 8004ffc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005000:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005004:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8005006:	697b      	ldr	r3, [r7, #20]
 8005008:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800500c:	691b      	ldr	r3, [r3, #16]
 800500e:	697a      	ldr	r2, [r7, #20]
 8005010:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005014:	f043 0318 	orr.w	r3, r3, #24
 8005018:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800501a:	697b      	ldr	r3, [r7, #20]
 800501c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005020:	691b      	ldr	r3, [r3, #16]
 8005022:	697a      	ldr	r2, [r7, #20]
 8005024:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005028:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800502c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800502e:	7afb      	ldrb	r3, [r7, #11]
 8005030:	2b01      	cmp	r3, #1
 8005032:	d10f      	bne.n	8005054 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8005034:	697b      	ldr	r3, [r7, #20]
 8005036:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800503a:	461a      	mov	r2, r3
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8005040:	697b      	ldr	r3, [r7, #20]
 8005042:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	697a      	ldr	r2, [r7, #20]
 800504a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800504e:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8005052:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005054:	2300      	movs	r3, #0
}
 8005056:	4618      	mov	r0, r3
 8005058:	371c      	adds	r7, #28
 800505a:	46bd      	mov	sp, r7
 800505c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005060:	4770      	bx	lr
 8005062:	bf00      	nop
 8005064:	4f54300a 	.word	0x4f54300a

08005068 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005068:	b480      	push	{r7}
 800506a:	b085      	sub	sp, #20
 800506c:	af00      	add	r7, sp, #0
 800506e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005070:	2300      	movs	r3, #0
 8005072:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	3301      	adds	r3, #1
 8005078:	60fb      	str	r3, [r7, #12]
 800507a:	4a13      	ldr	r2, [pc, #76]	; (80050c8 <USB_CoreReset+0x60>)
 800507c:	4293      	cmp	r3, r2
 800507e:	d901      	bls.n	8005084 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 8005080:	2303      	movs	r3, #3
 8005082:	e01a      	b.n	80050ba <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	691b      	ldr	r3, [r3, #16]
 8005088:	2b00      	cmp	r3, #0
 800508a:	daf3      	bge.n	8005074 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800508c:	2300      	movs	r3, #0
 800508e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	691b      	ldr	r3, [r3, #16]
 8005094:	f043 0201 	orr.w	r2, r3, #1
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	3301      	adds	r3, #1
 80050a0:	60fb      	str	r3, [r7, #12]
 80050a2:	4a09      	ldr	r2, [pc, #36]	; (80050c8 <USB_CoreReset+0x60>)
 80050a4:	4293      	cmp	r3, r2
 80050a6:	d901      	bls.n	80050ac <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 80050a8:	2303      	movs	r3, #3
 80050aa:	e006      	b.n	80050ba <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	691b      	ldr	r3, [r3, #16]
 80050b0:	f003 0301 	and.w	r3, r3, #1
 80050b4:	2b01      	cmp	r3, #1
 80050b6:	d0f1      	beq.n	800509c <USB_CoreReset+0x34>

  return HAL_OK;
 80050b8:	2300      	movs	r3, #0
}
 80050ba:	4618      	mov	r0, r3
 80050bc:	3714      	adds	r7, #20
 80050be:	46bd      	mov	sp, r7
 80050c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c4:	4770      	bx	lr
 80050c6:	bf00      	nop
 80050c8:	00030d40 	.word	0x00030d40

080050cc <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80050cc:	b480      	push	{r7}
 80050ce:	b085      	sub	sp, #20
 80050d0:	af00      	add	r7, sp, #0
 80050d2:	4603      	mov	r3, r0
 80050d4:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80050d6:	2300      	movs	r3, #0
 80050d8:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80050da:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80050de:	2b84      	cmp	r3, #132	; 0x84
 80050e0:	d005      	beq.n	80050ee <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80050e2:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	4413      	add	r3, r2
 80050ea:	3303      	adds	r3, #3
 80050ec:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80050ee:	68fb      	ldr	r3, [r7, #12]
}
 80050f0:	4618      	mov	r0, r3
 80050f2:	3714      	adds	r7, #20
 80050f4:	46bd      	mov	sp, r7
 80050f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050fa:	4770      	bx	lr

080050fc <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 80050fc:	b480      	push	{r7}
 80050fe:	b083      	sub	sp, #12
 8005100:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005102:	f3ef 8305 	mrs	r3, IPSR
 8005106:	607b      	str	r3, [r7, #4]
  return(result);
 8005108:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800510a:	2b00      	cmp	r3, #0
 800510c:	bf14      	ite	ne
 800510e:	2301      	movne	r3, #1
 8005110:	2300      	moveq	r3, #0
 8005112:	b2db      	uxtb	r3, r3
}
 8005114:	4618      	mov	r0, r3
 8005116:	370c      	adds	r7, #12
 8005118:	46bd      	mov	sp, r7
 800511a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800511e:	4770      	bx	lr

08005120 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8005120:	b580      	push	{r7, lr}
 8005122:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8005124:	f000 fb06 	bl	8005734 <vTaskStartScheduler>
  
  return osOK;
 8005128:	2300      	movs	r3, #0
}
 800512a:	4618      	mov	r0, r3
 800512c:	bd80      	pop	{r7, pc}

0800512e <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 800512e:	b580      	push	{r7, lr}
 8005130:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 8005132:	f7ff ffe3 	bl	80050fc <inHandlerMode>
 8005136:	4603      	mov	r3, r0
 8005138:	2b00      	cmp	r3, #0
 800513a:	d003      	beq.n	8005144 <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 800513c:	f000 fc1e 	bl	800597c <xTaskGetTickCountFromISR>
 8005140:	4603      	mov	r3, r0
 8005142:	e002      	b.n	800514a <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 8005144:	f000 fc0a 	bl	800595c <xTaskGetTickCount>
 8005148:	4603      	mov	r3, r0
  }
}
 800514a:	4618      	mov	r0, r3
 800514c:	bd80      	pop	{r7, pc}

0800514e <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800514e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005150:	b089      	sub	sp, #36	; 0x24
 8005152:	af04      	add	r7, sp, #16
 8005154:	6078      	str	r0, [r7, #4]
 8005156:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	695b      	ldr	r3, [r3, #20]
 800515c:	2b00      	cmp	r3, #0
 800515e:	d020      	beq.n	80051a2 <osThreadCreate+0x54>
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	699b      	ldr	r3, [r3, #24]
 8005164:	2b00      	cmp	r3, #0
 8005166:	d01c      	beq.n	80051a2 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	685c      	ldr	r4, [r3, #4]
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681d      	ldr	r5, [r3, #0]
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	691e      	ldr	r6, [r3, #16]
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800517a:	4618      	mov	r0, r3
 800517c:	f7ff ffa6 	bl	80050cc <makeFreeRtosPriority>
 8005180:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	695b      	ldr	r3, [r3, #20]
 8005186:	687a      	ldr	r2, [r7, #4]
 8005188:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800518a:	9202      	str	r2, [sp, #8]
 800518c:	9301      	str	r3, [sp, #4]
 800518e:	9100      	str	r1, [sp, #0]
 8005190:	683b      	ldr	r3, [r7, #0]
 8005192:	4632      	mov	r2, r6
 8005194:	4629      	mov	r1, r5
 8005196:	4620      	mov	r0, r4
 8005198:	f000 f8ed 	bl	8005376 <xTaskCreateStatic>
 800519c:	4603      	mov	r3, r0
 800519e:	60fb      	str	r3, [r7, #12]
 80051a0:	e01c      	b.n	80051dc <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	685c      	ldr	r4, [r3, #4]
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80051ae:	b29e      	uxth	r6, r3
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80051b6:	4618      	mov	r0, r3
 80051b8:	f7ff ff88 	bl	80050cc <makeFreeRtosPriority>
 80051bc:	4602      	mov	r2, r0
 80051be:	f107 030c 	add.w	r3, r7, #12
 80051c2:	9301      	str	r3, [sp, #4]
 80051c4:	9200      	str	r2, [sp, #0]
 80051c6:	683b      	ldr	r3, [r7, #0]
 80051c8:	4632      	mov	r2, r6
 80051ca:	4629      	mov	r1, r5
 80051cc:	4620      	mov	r0, r4
 80051ce:	f000 f92f 	bl	8005430 <xTaskCreate>
 80051d2:	4603      	mov	r3, r0
 80051d4:	2b01      	cmp	r3, #1
 80051d6:	d001      	beq.n	80051dc <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80051d8:	2300      	movs	r3, #0
 80051da:	e000      	b.n	80051de <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80051dc:	68fb      	ldr	r3, [r7, #12]
}
 80051de:	4618      	mov	r0, r3
 80051e0:	3714      	adds	r7, #20
 80051e2:	46bd      	mov	sp, r7
 80051e4:	bdf0      	pop	{r4, r5, r6, r7, pc}

080051e6 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80051e6:	b580      	push	{r7, lr}
 80051e8:	b084      	sub	sp, #16
 80051ea:	af00      	add	r7, sp, #0
 80051ec:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d001      	beq.n	80051fc <osDelay+0x16>
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	e000      	b.n	80051fe <osDelay+0x18>
 80051fc:	2301      	movs	r3, #1
 80051fe:	4618      	mov	r0, r3
 8005200:	f000 fa64 	bl	80056cc <vTaskDelay>
  
  return osOK;
 8005204:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8005206:	4618      	mov	r0, r3
 8005208:	3710      	adds	r7, #16
 800520a:	46bd      	mov	sp, r7
 800520c:	bd80      	pop	{r7, pc}

0800520e <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800520e:	b480      	push	{r7}
 8005210:	b083      	sub	sp, #12
 8005212:	af00      	add	r7, sp, #0
 8005214:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	f103 0208 	add.w	r2, r3, #8
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005226:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	f103 0208 	add.w	r2, r3, #8
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	f103 0208 	add.w	r2, r3, #8
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	2200      	movs	r2, #0
 8005240:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005242:	bf00      	nop
 8005244:	370c      	adds	r7, #12
 8005246:	46bd      	mov	sp, r7
 8005248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800524c:	4770      	bx	lr

0800524e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800524e:	b480      	push	{r7}
 8005250:	b083      	sub	sp, #12
 8005252:	af00      	add	r7, sp, #0
 8005254:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	2200      	movs	r2, #0
 800525a:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800525c:	bf00      	nop
 800525e:	370c      	adds	r7, #12
 8005260:	46bd      	mov	sp, r7
 8005262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005266:	4770      	bx	lr

08005268 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005268:	b480      	push	{r7}
 800526a:	b085      	sub	sp, #20
 800526c:	af00      	add	r7, sp, #0
 800526e:	6078      	str	r0, [r7, #4]
 8005270:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	685b      	ldr	r3, [r3, #4]
 8005276:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005278:	683b      	ldr	r3, [r7, #0]
 800527a:	68fa      	ldr	r2, [r7, #12]
 800527c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	689a      	ldr	r2, [r3, #8]
 8005282:	683b      	ldr	r3, [r7, #0]
 8005284:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	689b      	ldr	r3, [r3, #8]
 800528a:	683a      	ldr	r2, [r7, #0]
 800528c:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	683a      	ldr	r2, [r7, #0]
 8005292:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005294:	683b      	ldr	r3, [r7, #0]
 8005296:	687a      	ldr	r2, [r7, #4]
 8005298:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	1c5a      	adds	r2, r3, #1
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	601a      	str	r2, [r3, #0]
}
 80052a4:	bf00      	nop
 80052a6:	3714      	adds	r7, #20
 80052a8:	46bd      	mov	sp, r7
 80052aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ae:	4770      	bx	lr

080052b0 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80052b0:	b480      	push	{r7}
 80052b2:	b085      	sub	sp, #20
 80052b4:	af00      	add	r7, sp, #0
 80052b6:	6078      	str	r0, [r7, #4]
 80052b8:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80052ba:	683b      	ldr	r3, [r7, #0]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80052c0:	68bb      	ldr	r3, [r7, #8]
 80052c2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80052c6:	d103      	bne.n	80052d0 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	691b      	ldr	r3, [r3, #16]
 80052cc:	60fb      	str	r3, [r7, #12]
 80052ce:	e00c      	b.n	80052ea <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	3308      	adds	r3, #8
 80052d4:	60fb      	str	r3, [r7, #12]
 80052d6:	e002      	b.n	80052de <vListInsert+0x2e>
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	685b      	ldr	r3, [r3, #4]
 80052dc:	60fb      	str	r3, [r7, #12]
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	685b      	ldr	r3, [r3, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	68ba      	ldr	r2, [r7, #8]
 80052e6:	429a      	cmp	r2, r3
 80052e8:	d2f6      	bcs.n	80052d8 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	685a      	ldr	r2, [r3, #4]
 80052ee:	683b      	ldr	r3, [r7, #0]
 80052f0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80052f2:	683b      	ldr	r3, [r7, #0]
 80052f4:	685b      	ldr	r3, [r3, #4]
 80052f6:	683a      	ldr	r2, [r7, #0]
 80052f8:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80052fa:	683b      	ldr	r3, [r7, #0]
 80052fc:	68fa      	ldr	r2, [r7, #12]
 80052fe:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	683a      	ldr	r2, [r7, #0]
 8005304:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005306:	683b      	ldr	r3, [r7, #0]
 8005308:	687a      	ldr	r2, [r7, #4]
 800530a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	1c5a      	adds	r2, r3, #1
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	601a      	str	r2, [r3, #0]
}
 8005316:	bf00      	nop
 8005318:	3714      	adds	r7, #20
 800531a:	46bd      	mov	sp, r7
 800531c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005320:	4770      	bx	lr

08005322 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005322:	b480      	push	{r7}
 8005324:	b085      	sub	sp, #20
 8005326:	af00      	add	r7, sp, #0
 8005328:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	691b      	ldr	r3, [r3, #16]
 800532e:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	685b      	ldr	r3, [r3, #4]
 8005334:	687a      	ldr	r2, [r7, #4]
 8005336:	6892      	ldr	r2, [r2, #8]
 8005338:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	689b      	ldr	r3, [r3, #8]
 800533e:	687a      	ldr	r2, [r7, #4]
 8005340:	6852      	ldr	r2, [r2, #4]
 8005342:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	685b      	ldr	r3, [r3, #4]
 8005348:	687a      	ldr	r2, [r7, #4]
 800534a:	429a      	cmp	r2, r3
 800534c:	d103      	bne.n	8005356 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	689a      	ldr	r2, [r3, #8]
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	2200      	movs	r2, #0
 800535a:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	1e5a      	subs	r2, r3, #1
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	681b      	ldr	r3, [r3, #0]
}
 800536a:	4618      	mov	r0, r3
 800536c:	3714      	adds	r7, #20
 800536e:	46bd      	mov	sp, r7
 8005370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005374:	4770      	bx	lr

08005376 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005376:	b580      	push	{r7, lr}
 8005378:	b08e      	sub	sp, #56	; 0x38
 800537a:	af04      	add	r7, sp, #16
 800537c:	60f8      	str	r0, [r7, #12]
 800537e:	60b9      	str	r1, [r7, #8]
 8005380:	607a      	str	r2, [r7, #4]
 8005382:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005384:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005386:	2b00      	cmp	r3, #0
 8005388:	d10a      	bne.n	80053a0 <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800538a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800538e:	f383 8811 	msr	BASEPRI, r3
 8005392:	f3bf 8f6f 	isb	sy
 8005396:	f3bf 8f4f 	dsb	sy
 800539a:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800539c:	bf00      	nop
 800539e:	e7fe      	b.n	800539e <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80053a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d10a      	bne.n	80053bc <xTaskCreateStatic+0x46>
	__asm volatile
 80053a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053aa:	f383 8811 	msr	BASEPRI, r3
 80053ae:	f3bf 8f6f 	isb	sy
 80053b2:	f3bf 8f4f 	dsb	sy
 80053b6:	61fb      	str	r3, [r7, #28]
}
 80053b8:	bf00      	nop
 80053ba:	e7fe      	b.n	80053ba <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80053bc:	23b4      	movs	r3, #180	; 0xb4
 80053be:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80053c0:	693b      	ldr	r3, [r7, #16]
 80053c2:	2bb4      	cmp	r3, #180	; 0xb4
 80053c4:	d00a      	beq.n	80053dc <xTaskCreateStatic+0x66>
	__asm volatile
 80053c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053ca:	f383 8811 	msr	BASEPRI, r3
 80053ce:	f3bf 8f6f 	isb	sy
 80053d2:	f3bf 8f4f 	dsb	sy
 80053d6:	61bb      	str	r3, [r7, #24]
}
 80053d8:	bf00      	nop
 80053da:	e7fe      	b.n	80053da <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80053dc:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80053de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d01e      	beq.n	8005422 <xTaskCreateStatic+0xac>
 80053e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d01b      	beq.n	8005422 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80053ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053ec:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80053ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053f0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80053f2:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80053f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053f6:	2202      	movs	r2, #2
 80053f8:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80053fc:	2300      	movs	r3, #0
 80053fe:	9303      	str	r3, [sp, #12]
 8005400:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005402:	9302      	str	r3, [sp, #8]
 8005404:	f107 0314 	add.w	r3, r7, #20
 8005408:	9301      	str	r3, [sp, #4]
 800540a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800540c:	9300      	str	r3, [sp, #0]
 800540e:	683b      	ldr	r3, [r7, #0]
 8005410:	687a      	ldr	r2, [r7, #4]
 8005412:	68b9      	ldr	r1, [r7, #8]
 8005414:	68f8      	ldr	r0, [r7, #12]
 8005416:	f000 f851 	bl	80054bc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800541a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800541c:	f000 f8ec 	bl	80055f8 <prvAddNewTaskToReadyList>
 8005420:	e001      	b.n	8005426 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8005422:	2300      	movs	r3, #0
 8005424:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005426:	697b      	ldr	r3, [r7, #20]
	}
 8005428:	4618      	mov	r0, r3
 800542a:	3728      	adds	r7, #40	; 0x28
 800542c:	46bd      	mov	sp, r7
 800542e:	bd80      	pop	{r7, pc}

08005430 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005430:	b580      	push	{r7, lr}
 8005432:	b08c      	sub	sp, #48	; 0x30
 8005434:	af04      	add	r7, sp, #16
 8005436:	60f8      	str	r0, [r7, #12]
 8005438:	60b9      	str	r1, [r7, #8]
 800543a:	603b      	str	r3, [r7, #0]
 800543c:	4613      	mov	r3, r2
 800543e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005440:	88fb      	ldrh	r3, [r7, #6]
 8005442:	009b      	lsls	r3, r3, #2
 8005444:	4618      	mov	r0, r3
 8005446:	f000 ff57 	bl	80062f8 <pvPortMalloc>
 800544a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800544c:	697b      	ldr	r3, [r7, #20]
 800544e:	2b00      	cmp	r3, #0
 8005450:	d00e      	beq.n	8005470 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005452:	20b4      	movs	r0, #180	; 0xb4
 8005454:	f000 ff50 	bl	80062f8 <pvPortMalloc>
 8005458:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800545a:	69fb      	ldr	r3, [r7, #28]
 800545c:	2b00      	cmp	r3, #0
 800545e:	d003      	beq.n	8005468 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005460:	69fb      	ldr	r3, [r7, #28]
 8005462:	697a      	ldr	r2, [r7, #20]
 8005464:	631a      	str	r2, [r3, #48]	; 0x30
 8005466:	e005      	b.n	8005474 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005468:	6978      	ldr	r0, [r7, #20]
 800546a:	f001 f811 	bl	8006490 <vPortFree>
 800546e:	e001      	b.n	8005474 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005470:	2300      	movs	r3, #0
 8005472:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005474:	69fb      	ldr	r3, [r7, #28]
 8005476:	2b00      	cmp	r3, #0
 8005478:	d017      	beq.n	80054aa <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800547a:	69fb      	ldr	r3, [r7, #28]
 800547c:	2200      	movs	r2, #0
 800547e:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005482:	88fa      	ldrh	r2, [r7, #6]
 8005484:	2300      	movs	r3, #0
 8005486:	9303      	str	r3, [sp, #12]
 8005488:	69fb      	ldr	r3, [r7, #28]
 800548a:	9302      	str	r3, [sp, #8]
 800548c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800548e:	9301      	str	r3, [sp, #4]
 8005490:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005492:	9300      	str	r3, [sp, #0]
 8005494:	683b      	ldr	r3, [r7, #0]
 8005496:	68b9      	ldr	r1, [r7, #8]
 8005498:	68f8      	ldr	r0, [r7, #12]
 800549a:	f000 f80f 	bl	80054bc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800549e:	69f8      	ldr	r0, [r7, #28]
 80054a0:	f000 f8aa 	bl	80055f8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80054a4:	2301      	movs	r3, #1
 80054a6:	61bb      	str	r3, [r7, #24]
 80054a8:	e002      	b.n	80054b0 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80054aa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80054ae:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80054b0:	69bb      	ldr	r3, [r7, #24]
	}
 80054b2:	4618      	mov	r0, r3
 80054b4:	3720      	adds	r7, #32
 80054b6:	46bd      	mov	sp, r7
 80054b8:	bd80      	pop	{r7, pc}
	...

080054bc <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80054bc:	b580      	push	{r7, lr}
 80054be:	b088      	sub	sp, #32
 80054c0:	af00      	add	r7, sp, #0
 80054c2:	60f8      	str	r0, [r7, #12]
 80054c4:	60b9      	str	r1, [r7, #8]
 80054c6:	607a      	str	r2, [r7, #4]
 80054c8:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80054ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054cc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80054d4:	3b01      	subs	r3, #1
 80054d6:	009b      	lsls	r3, r3, #2
 80054d8:	4413      	add	r3, r2
 80054da:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80054dc:	69bb      	ldr	r3, [r7, #24]
 80054de:	f023 0307 	bic.w	r3, r3, #7
 80054e2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80054e4:	69bb      	ldr	r3, [r7, #24]
 80054e6:	f003 0307 	and.w	r3, r3, #7
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d00a      	beq.n	8005504 <prvInitialiseNewTask+0x48>
	__asm volatile
 80054ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054f2:	f383 8811 	msr	BASEPRI, r3
 80054f6:	f3bf 8f6f 	isb	sy
 80054fa:	f3bf 8f4f 	dsb	sy
 80054fe:	617b      	str	r3, [r7, #20]
}
 8005500:	bf00      	nop
 8005502:	e7fe      	b.n	8005502 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005504:	68bb      	ldr	r3, [r7, #8]
 8005506:	2b00      	cmp	r3, #0
 8005508:	d01f      	beq.n	800554a <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800550a:	2300      	movs	r3, #0
 800550c:	61fb      	str	r3, [r7, #28]
 800550e:	e012      	b.n	8005536 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005510:	68ba      	ldr	r2, [r7, #8]
 8005512:	69fb      	ldr	r3, [r7, #28]
 8005514:	4413      	add	r3, r2
 8005516:	7819      	ldrb	r1, [r3, #0]
 8005518:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800551a:	69fb      	ldr	r3, [r7, #28]
 800551c:	4413      	add	r3, r2
 800551e:	3334      	adds	r3, #52	; 0x34
 8005520:	460a      	mov	r2, r1
 8005522:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005524:	68ba      	ldr	r2, [r7, #8]
 8005526:	69fb      	ldr	r3, [r7, #28]
 8005528:	4413      	add	r3, r2
 800552a:	781b      	ldrb	r3, [r3, #0]
 800552c:	2b00      	cmp	r3, #0
 800552e:	d006      	beq.n	800553e <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005530:	69fb      	ldr	r3, [r7, #28]
 8005532:	3301      	adds	r3, #1
 8005534:	61fb      	str	r3, [r7, #28]
 8005536:	69fb      	ldr	r3, [r7, #28]
 8005538:	2b0f      	cmp	r3, #15
 800553a:	d9e9      	bls.n	8005510 <prvInitialiseNewTask+0x54>
 800553c:	e000      	b.n	8005540 <prvInitialiseNewTask+0x84>
			{
				break;
 800553e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005540:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005542:	2200      	movs	r2, #0
 8005544:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005548:	e003      	b.n	8005552 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800554a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800554c:	2200      	movs	r2, #0
 800554e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005552:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005554:	2b06      	cmp	r3, #6
 8005556:	d901      	bls.n	800555c <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005558:	2306      	movs	r3, #6
 800555a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800555c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800555e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005560:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005562:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005564:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005566:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8005568:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800556a:	2200      	movs	r2, #0
 800556c:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800556e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005570:	3304      	adds	r3, #4
 8005572:	4618      	mov	r0, r3
 8005574:	f7ff fe6b 	bl	800524e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005578:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800557a:	3318      	adds	r3, #24
 800557c:	4618      	mov	r0, r3
 800557e:	f7ff fe66 	bl	800524e <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005582:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005584:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005586:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005588:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800558a:	f1c3 0207 	rsb	r2, r3, #7
 800558e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005590:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005592:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005594:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005596:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005598:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800559a:	2200      	movs	r2, #0
 800559c:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80055a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055a2:	2200      	movs	r2, #0
 80055a4:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80055a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055aa:	334c      	adds	r3, #76	; 0x4c
 80055ac:	2260      	movs	r2, #96	; 0x60
 80055ae:	2100      	movs	r1, #0
 80055b0:	4618      	mov	r0, r3
 80055b2:	f003 f9fc 	bl	80089ae <memset>
 80055b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055b8:	4a0c      	ldr	r2, [pc, #48]	; (80055ec <prvInitialiseNewTask+0x130>)
 80055ba:	651a      	str	r2, [r3, #80]	; 0x50
 80055bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055be:	4a0c      	ldr	r2, [pc, #48]	; (80055f0 <prvInitialiseNewTask+0x134>)
 80055c0:	655a      	str	r2, [r3, #84]	; 0x54
 80055c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055c4:	4a0b      	ldr	r2, [pc, #44]	; (80055f4 <prvInitialiseNewTask+0x138>)
 80055c6:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80055c8:	683a      	ldr	r2, [r7, #0]
 80055ca:	68f9      	ldr	r1, [r7, #12]
 80055cc:	69b8      	ldr	r0, [r7, #24]
 80055ce:	f000 fc41 	bl	8005e54 <pxPortInitialiseStack>
 80055d2:	4602      	mov	r2, r0
 80055d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055d6:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80055d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d002      	beq.n	80055e4 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80055de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80055e2:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80055e4:	bf00      	nop
 80055e6:	3720      	adds	r7, #32
 80055e8:	46bd      	mov	sp, r7
 80055ea:	bd80      	pop	{r7, pc}
 80055ec:	08009d0c 	.word	0x08009d0c
 80055f0:	08009d2c 	.word	0x08009d2c
 80055f4:	08009cec 	.word	0x08009cec

080055f8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80055f8:	b580      	push	{r7, lr}
 80055fa:	b082      	sub	sp, #8
 80055fc:	af00      	add	r7, sp, #0
 80055fe:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005600:	f000 fd58 	bl	80060b4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005604:	4b2a      	ldr	r3, [pc, #168]	; (80056b0 <prvAddNewTaskToReadyList+0xb8>)
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	3301      	adds	r3, #1
 800560a:	4a29      	ldr	r2, [pc, #164]	; (80056b0 <prvAddNewTaskToReadyList+0xb8>)
 800560c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800560e:	4b29      	ldr	r3, [pc, #164]	; (80056b4 <prvAddNewTaskToReadyList+0xbc>)
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	2b00      	cmp	r3, #0
 8005614:	d109      	bne.n	800562a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005616:	4a27      	ldr	r2, [pc, #156]	; (80056b4 <prvAddNewTaskToReadyList+0xbc>)
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800561c:	4b24      	ldr	r3, [pc, #144]	; (80056b0 <prvAddNewTaskToReadyList+0xb8>)
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	2b01      	cmp	r3, #1
 8005622:	d110      	bne.n	8005646 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005624:	f000 faee 	bl	8005c04 <prvInitialiseTaskLists>
 8005628:	e00d      	b.n	8005646 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800562a:	4b23      	ldr	r3, [pc, #140]	; (80056b8 <prvAddNewTaskToReadyList+0xc0>)
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	2b00      	cmp	r3, #0
 8005630:	d109      	bne.n	8005646 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005632:	4b20      	ldr	r3, [pc, #128]	; (80056b4 <prvAddNewTaskToReadyList+0xbc>)
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800563c:	429a      	cmp	r2, r3
 800563e:	d802      	bhi.n	8005646 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005640:	4a1c      	ldr	r2, [pc, #112]	; (80056b4 <prvAddNewTaskToReadyList+0xbc>)
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005646:	4b1d      	ldr	r3, [pc, #116]	; (80056bc <prvAddNewTaskToReadyList+0xc4>)
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	3301      	adds	r3, #1
 800564c:	4a1b      	ldr	r2, [pc, #108]	; (80056bc <prvAddNewTaskToReadyList+0xc4>)
 800564e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005654:	2201      	movs	r2, #1
 8005656:	409a      	lsls	r2, r3
 8005658:	4b19      	ldr	r3, [pc, #100]	; (80056c0 <prvAddNewTaskToReadyList+0xc8>)
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	4313      	orrs	r3, r2
 800565e:	4a18      	ldr	r2, [pc, #96]	; (80056c0 <prvAddNewTaskToReadyList+0xc8>)
 8005660:	6013      	str	r3, [r2, #0]
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005666:	4613      	mov	r3, r2
 8005668:	009b      	lsls	r3, r3, #2
 800566a:	4413      	add	r3, r2
 800566c:	009b      	lsls	r3, r3, #2
 800566e:	4a15      	ldr	r2, [pc, #84]	; (80056c4 <prvAddNewTaskToReadyList+0xcc>)
 8005670:	441a      	add	r2, r3
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	3304      	adds	r3, #4
 8005676:	4619      	mov	r1, r3
 8005678:	4610      	mov	r0, r2
 800567a:	f7ff fdf5 	bl	8005268 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800567e:	f000 fd49 	bl	8006114 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005682:	4b0d      	ldr	r3, [pc, #52]	; (80056b8 <prvAddNewTaskToReadyList+0xc0>)
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	2b00      	cmp	r3, #0
 8005688:	d00e      	beq.n	80056a8 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800568a:	4b0a      	ldr	r3, [pc, #40]	; (80056b4 <prvAddNewTaskToReadyList+0xbc>)
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005694:	429a      	cmp	r2, r3
 8005696:	d207      	bcs.n	80056a8 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005698:	4b0b      	ldr	r3, [pc, #44]	; (80056c8 <prvAddNewTaskToReadyList+0xd0>)
 800569a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800569e:	601a      	str	r2, [r3, #0]
 80056a0:	f3bf 8f4f 	dsb	sy
 80056a4:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80056a8:	bf00      	nop
 80056aa:	3708      	adds	r7, #8
 80056ac:	46bd      	mov	sp, r7
 80056ae:	bd80      	pop	{r7, pc}
 80056b0:	200005a0 	.word	0x200005a0
 80056b4:	200004a0 	.word	0x200004a0
 80056b8:	200005ac 	.word	0x200005ac
 80056bc:	200005bc 	.word	0x200005bc
 80056c0:	200005a8 	.word	0x200005a8
 80056c4:	200004a4 	.word	0x200004a4
 80056c8:	e000ed04 	.word	0xe000ed04

080056cc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80056cc:	b580      	push	{r7, lr}
 80056ce:	b084      	sub	sp, #16
 80056d0:	af00      	add	r7, sp, #0
 80056d2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80056d4:	2300      	movs	r3, #0
 80056d6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d017      	beq.n	800570e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80056de:	4b13      	ldr	r3, [pc, #76]	; (800572c <vTaskDelay+0x60>)
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d00a      	beq.n	80056fc <vTaskDelay+0x30>
	__asm volatile
 80056e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056ea:	f383 8811 	msr	BASEPRI, r3
 80056ee:	f3bf 8f6f 	isb	sy
 80056f2:	f3bf 8f4f 	dsb	sy
 80056f6:	60bb      	str	r3, [r7, #8]
}
 80056f8:	bf00      	nop
 80056fa:	e7fe      	b.n	80056fa <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80056fc:	f000 f884 	bl	8005808 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005700:	2100      	movs	r1, #0
 8005702:	6878      	ldr	r0, [r7, #4]
 8005704:	f000 fb40 	bl	8005d88 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005708:	f000 f88c 	bl	8005824 <xTaskResumeAll>
 800570c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	2b00      	cmp	r3, #0
 8005712:	d107      	bne.n	8005724 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8005714:	4b06      	ldr	r3, [pc, #24]	; (8005730 <vTaskDelay+0x64>)
 8005716:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800571a:	601a      	str	r2, [r3, #0]
 800571c:	f3bf 8f4f 	dsb	sy
 8005720:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005724:	bf00      	nop
 8005726:	3710      	adds	r7, #16
 8005728:	46bd      	mov	sp, r7
 800572a:	bd80      	pop	{r7, pc}
 800572c:	200005c8 	.word	0x200005c8
 8005730:	e000ed04 	.word	0xe000ed04

08005734 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005734:	b580      	push	{r7, lr}
 8005736:	b08a      	sub	sp, #40	; 0x28
 8005738:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800573a:	2300      	movs	r3, #0
 800573c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800573e:	2300      	movs	r3, #0
 8005740:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005742:	463a      	mov	r2, r7
 8005744:	1d39      	adds	r1, r7, #4
 8005746:	f107 0308 	add.w	r3, r7, #8
 800574a:	4618      	mov	r0, r3
 800574c:	f7fa ff1c 	bl	8000588 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005750:	6839      	ldr	r1, [r7, #0]
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	68ba      	ldr	r2, [r7, #8]
 8005756:	9202      	str	r2, [sp, #8]
 8005758:	9301      	str	r3, [sp, #4]
 800575a:	2300      	movs	r3, #0
 800575c:	9300      	str	r3, [sp, #0]
 800575e:	2300      	movs	r3, #0
 8005760:	460a      	mov	r2, r1
 8005762:	4921      	ldr	r1, [pc, #132]	; (80057e8 <vTaskStartScheduler+0xb4>)
 8005764:	4821      	ldr	r0, [pc, #132]	; (80057ec <vTaskStartScheduler+0xb8>)
 8005766:	f7ff fe06 	bl	8005376 <xTaskCreateStatic>
 800576a:	4603      	mov	r3, r0
 800576c:	4a20      	ldr	r2, [pc, #128]	; (80057f0 <vTaskStartScheduler+0xbc>)
 800576e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005770:	4b1f      	ldr	r3, [pc, #124]	; (80057f0 <vTaskStartScheduler+0xbc>)
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	2b00      	cmp	r3, #0
 8005776:	d002      	beq.n	800577e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005778:	2301      	movs	r3, #1
 800577a:	617b      	str	r3, [r7, #20]
 800577c:	e001      	b.n	8005782 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800577e:	2300      	movs	r3, #0
 8005780:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005782:	697b      	ldr	r3, [r7, #20]
 8005784:	2b01      	cmp	r3, #1
 8005786:	d11b      	bne.n	80057c0 <vTaskStartScheduler+0x8c>
	__asm volatile
 8005788:	f04f 0350 	mov.w	r3, #80	; 0x50
 800578c:	f383 8811 	msr	BASEPRI, r3
 8005790:	f3bf 8f6f 	isb	sy
 8005794:	f3bf 8f4f 	dsb	sy
 8005798:	613b      	str	r3, [r7, #16]
}
 800579a:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800579c:	4b15      	ldr	r3, [pc, #84]	; (80057f4 <vTaskStartScheduler+0xc0>)
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	334c      	adds	r3, #76	; 0x4c
 80057a2:	4a15      	ldr	r2, [pc, #84]	; (80057f8 <vTaskStartScheduler+0xc4>)
 80057a4:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80057a6:	4b15      	ldr	r3, [pc, #84]	; (80057fc <vTaskStartScheduler+0xc8>)
 80057a8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80057ac:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80057ae:	4b14      	ldr	r3, [pc, #80]	; (8005800 <vTaskStartScheduler+0xcc>)
 80057b0:	2201      	movs	r2, #1
 80057b2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80057b4:	4b13      	ldr	r3, [pc, #76]	; (8005804 <vTaskStartScheduler+0xd0>)
 80057b6:	2200      	movs	r2, #0
 80057b8:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80057ba:	f000 fbd9 	bl	8005f70 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80057be:	e00e      	b.n	80057de <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80057c0:	697b      	ldr	r3, [r7, #20]
 80057c2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80057c6:	d10a      	bne.n	80057de <vTaskStartScheduler+0xaa>
	__asm volatile
 80057c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057cc:	f383 8811 	msr	BASEPRI, r3
 80057d0:	f3bf 8f6f 	isb	sy
 80057d4:	f3bf 8f4f 	dsb	sy
 80057d8:	60fb      	str	r3, [r7, #12]
}
 80057da:	bf00      	nop
 80057dc:	e7fe      	b.n	80057dc <vTaskStartScheduler+0xa8>
}
 80057de:	bf00      	nop
 80057e0:	3718      	adds	r7, #24
 80057e2:	46bd      	mov	sp, r7
 80057e4:	bd80      	pop	{r7, pc}
 80057e6:	bf00      	nop
 80057e8:	08009c2c 	.word	0x08009c2c
 80057ec:	08005bd5 	.word	0x08005bd5
 80057f0:	200005c4 	.word	0x200005c4
 80057f4:	200004a0 	.word	0x200004a0
 80057f8:	20000168 	.word	0x20000168
 80057fc:	200005c0 	.word	0x200005c0
 8005800:	200005ac 	.word	0x200005ac
 8005804:	200005a4 	.word	0x200005a4

08005808 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005808:	b480      	push	{r7}
 800580a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800580c:	4b04      	ldr	r3, [pc, #16]	; (8005820 <vTaskSuspendAll+0x18>)
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	3301      	adds	r3, #1
 8005812:	4a03      	ldr	r2, [pc, #12]	; (8005820 <vTaskSuspendAll+0x18>)
 8005814:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8005816:	bf00      	nop
 8005818:	46bd      	mov	sp, r7
 800581a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800581e:	4770      	bx	lr
 8005820:	200005c8 	.word	0x200005c8

08005824 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005824:	b580      	push	{r7, lr}
 8005826:	b084      	sub	sp, #16
 8005828:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800582a:	2300      	movs	r3, #0
 800582c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800582e:	2300      	movs	r3, #0
 8005830:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005832:	4b41      	ldr	r3, [pc, #260]	; (8005938 <xTaskResumeAll+0x114>)
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	2b00      	cmp	r3, #0
 8005838:	d10a      	bne.n	8005850 <xTaskResumeAll+0x2c>
	__asm volatile
 800583a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800583e:	f383 8811 	msr	BASEPRI, r3
 8005842:	f3bf 8f6f 	isb	sy
 8005846:	f3bf 8f4f 	dsb	sy
 800584a:	603b      	str	r3, [r7, #0]
}
 800584c:	bf00      	nop
 800584e:	e7fe      	b.n	800584e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005850:	f000 fc30 	bl	80060b4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005854:	4b38      	ldr	r3, [pc, #224]	; (8005938 <xTaskResumeAll+0x114>)
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	3b01      	subs	r3, #1
 800585a:	4a37      	ldr	r2, [pc, #220]	; (8005938 <xTaskResumeAll+0x114>)
 800585c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800585e:	4b36      	ldr	r3, [pc, #216]	; (8005938 <xTaskResumeAll+0x114>)
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	2b00      	cmp	r3, #0
 8005864:	d161      	bne.n	800592a <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005866:	4b35      	ldr	r3, [pc, #212]	; (800593c <xTaskResumeAll+0x118>)
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	2b00      	cmp	r3, #0
 800586c:	d05d      	beq.n	800592a <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800586e:	e02e      	b.n	80058ce <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005870:	4b33      	ldr	r3, [pc, #204]	; (8005940 <xTaskResumeAll+0x11c>)
 8005872:	68db      	ldr	r3, [r3, #12]
 8005874:	68db      	ldr	r3, [r3, #12]
 8005876:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	3318      	adds	r3, #24
 800587c:	4618      	mov	r0, r3
 800587e:	f7ff fd50 	bl	8005322 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	3304      	adds	r3, #4
 8005886:	4618      	mov	r0, r3
 8005888:	f7ff fd4b 	bl	8005322 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005890:	2201      	movs	r2, #1
 8005892:	409a      	lsls	r2, r3
 8005894:	4b2b      	ldr	r3, [pc, #172]	; (8005944 <xTaskResumeAll+0x120>)
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	4313      	orrs	r3, r2
 800589a:	4a2a      	ldr	r2, [pc, #168]	; (8005944 <xTaskResumeAll+0x120>)
 800589c:	6013      	str	r3, [r2, #0]
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80058a2:	4613      	mov	r3, r2
 80058a4:	009b      	lsls	r3, r3, #2
 80058a6:	4413      	add	r3, r2
 80058a8:	009b      	lsls	r3, r3, #2
 80058aa:	4a27      	ldr	r2, [pc, #156]	; (8005948 <xTaskResumeAll+0x124>)
 80058ac:	441a      	add	r2, r3
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	3304      	adds	r3, #4
 80058b2:	4619      	mov	r1, r3
 80058b4:	4610      	mov	r0, r2
 80058b6:	f7ff fcd7 	bl	8005268 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80058be:	4b23      	ldr	r3, [pc, #140]	; (800594c <xTaskResumeAll+0x128>)
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058c4:	429a      	cmp	r2, r3
 80058c6:	d302      	bcc.n	80058ce <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 80058c8:	4b21      	ldr	r3, [pc, #132]	; (8005950 <xTaskResumeAll+0x12c>)
 80058ca:	2201      	movs	r2, #1
 80058cc:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80058ce:	4b1c      	ldr	r3, [pc, #112]	; (8005940 <xTaskResumeAll+0x11c>)
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d1cc      	bne.n	8005870 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d001      	beq.n	80058e0 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80058dc:	f000 fa34 	bl	8005d48 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80058e0:	4b1c      	ldr	r3, [pc, #112]	; (8005954 <xTaskResumeAll+0x130>)
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d010      	beq.n	800590e <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80058ec:	f000 f858 	bl	80059a0 <xTaskIncrementTick>
 80058f0:	4603      	mov	r3, r0
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d002      	beq.n	80058fc <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 80058f6:	4b16      	ldr	r3, [pc, #88]	; (8005950 <xTaskResumeAll+0x12c>)
 80058f8:	2201      	movs	r2, #1
 80058fa:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	3b01      	subs	r3, #1
 8005900:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	2b00      	cmp	r3, #0
 8005906:	d1f1      	bne.n	80058ec <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8005908:	4b12      	ldr	r3, [pc, #72]	; (8005954 <xTaskResumeAll+0x130>)
 800590a:	2200      	movs	r2, #0
 800590c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800590e:	4b10      	ldr	r3, [pc, #64]	; (8005950 <xTaskResumeAll+0x12c>)
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	2b00      	cmp	r3, #0
 8005914:	d009      	beq.n	800592a <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005916:	2301      	movs	r3, #1
 8005918:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800591a:	4b0f      	ldr	r3, [pc, #60]	; (8005958 <xTaskResumeAll+0x134>)
 800591c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005920:	601a      	str	r2, [r3, #0]
 8005922:	f3bf 8f4f 	dsb	sy
 8005926:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800592a:	f000 fbf3 	bl	8006114 <vPortExitCritical>

	return xAlreadyYielded;
 800592e:	68bb      	ldr	r3, [r7, #8]
}
 8005930:	4618      	mov	r0, r3
 8005932:	3710      	adds	r7, #16
 8005934:	46bd      	mov	sp, r7
 8005936:	bd80      	pop	{r7, pc}
 8005938:	200005c8 	.word	0x200005c8
 800593c:	200005a0 	.word	0x200005a0
 8005940:	20000560 	.word	0x20000560
 8005944:	200005a8 	.word	0x200005a8
 8005948:	200004a4 	.word	0x200004a4
 800594c:	200004a0 	.word	0x200004a0
 8005950:	200005b4 	.word	0x200005b4
 8005954:	200005b0 	.word	0x200005b0
 8005958:	e000ed04 	.word	0xe000ed04

0800595c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800595c:	b480      	push	{r7}
 800595e:	b083      	sub	sp, #12
 8005960:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8005962:	4b05      	ldr	r3, [pc, #20]	; (8005978 <xTaskGetTickCount+0x1c>)
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8005968:	687b      	ldr	r3, [r7, #4]
}
 800596a:	4618      	mov	r0, r3
 800596c:	370c      	adds	r7, #12
 800596e:	46bd      	mov	sp, r7
 8005970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005974:	4770      	bx	lr
 8005976:	bf00      	nop
 8005978:	200005a4 	.word	0x200005a4

0800597c <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800597c:	b580      	push	{r7, lr}
 800597e:	b082      	sub	sp, #8
 8005980:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005982:	f000 fc79 	bl	8006278 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8005986:	2300      	movs	r3, #0
 8005988:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800598a:	4b04      	ldr	r3, [pc, #16]	; (800599c <xTaskGetTickCountFromISR+0x20>)
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005990:	683b      	ldr	r3, [r7, #0]
}
 8005992:	4618      	mov	r0, r3
 8005994:	3708      	adds	r7, #8
 8005996:	46bd      	mov	sp, r7
 8005998:	bd80      	pop	{r7, pc}
 800599a:	bf00      	nop
 800599c:	200005a4 	.word	0x200005a4

080059a0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80059a0:	b580      	push	{r7, lr}
 80059a2:	b086      	sub	sp, #24
 80059a4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80059a6:	2300      	movs	r3, #0
 80059a8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80059aa:	4b4e      	ldr	r3, [pc, #312]	; (8005ae4 <xTaskIncrementTick+0x144>)
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	f040 808e 	bne.w	8005ad0 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80059b4:	4b4c      	ldr	r3, [pc, #304]	; (8005ae8 <xTaskIncrementTick+0x148>)
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	3301      	adds	r3, #1
 80059ba:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80059bc:	4a4a      	ldr	r2, [pc, #296]	; (8005ae8 <xTaskIncrementTick+0x148>)
 80059be:	693b      	ldr	r3, [r7, #16]
 80059c0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80059c2:	693b      	ldr	r3, [r7, #16]
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d120      	bne.n	8005a0a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80059c8:	4b48      	ldr	r3, [pc, #288]	; (8005aec <xTaskIncrementTick+0x14c>)
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d00a      	beq.n	80059e8 <xTaskIncrementTick+0x48>
	__asm volatile
 80059d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059d6:	f383 8811 	msr	BASEPRI, r3
 80059da:	f3bf 8f6f 	isb	sy
 80059de:	f3bf 8f4f 	dsb	sy
 80059e2:	603b      	str	r3, [r7, #0]
}
 80059e4:	bf00      	nop
 80059e6:	e7fe      	b.n	80059e6 <xTaskIncrementTick+0x46>
 80059e8:	4b40      	ldr	r3, [pc, #256]	; (8005aec <xTaskIncrementTick+0x14c>)
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	60fb      	str	r3, [r7, #12]
 80059ee:	4b40      	ldr	r3, [pc, #256]	; (8005af0 <xTaskIncrementTick+0x150>)
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	4a3e      	ldr	r2, [pc, #248]	; (8005aec <xTaskIncrementTick+0x14c>)
 80059f4:	6013      	str	r3, [r2, #0]
 80059f6:	4a3e      	ldr	r2, [pc, #248]	; (8005af0 <xTaskIncrementTick+0x150>)
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	6013      	str	r3, [r2, #0]
 80059fc:	4b3d      	ldr	r3, [pc, #244]	; (8005af4 <xTaskIncrementTick+0x154>)
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	3301      	adds	r3, #1
 8005a02:	4a3c      	ldr	r2, [pc, #240]	; (8005af4 <xTaskIncrementTick+0x154>)
 8005a04:	6013      	str	r3, [r2, #0]
 8005a06:	f000 f99f 	bl	8005d48 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005a0a:	4b3b      	ldr	r3, [pc, #236]	; (8005af8 <xTaskIncrementTick+0x158>)
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	693a      	ldr	r2, [r7, #16]
 8005a10:	429a      	cmp	r2, r3
 8005a12:	d348      	bcc.n	8005aa6 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005a14:	4b35      	ldr	r3, [pc, #212]	; (8005aec <xTaskIncrementTick+0x14c>)
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d104      	bne.n	8005a28 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005a1e:	4b36      	ldr	r3, [pc, #216]	; (8005af8 <xTaskIncrementTick+0x158>)
 8005a20:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005a24:	601a      	str	r2, [r3, #0]
					break;
 8005a26:	e03e      	b.n	8005aa6 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005a28:	4b30      	ldr	r3, [pc, #192]	; (8005aec <xTaskIncrementTick+0x14c>)
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	68db      	ldr	r3, [r3, #12]
 8005a2e:	68db      	ldr	r3, [r3, #12]
 8005a30:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005a32:	68bb      	ldr	r3, [r7, #8]
 8005a34:	685b      	ldr	r3, [r3, #4]
 8005a36:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005a38:	693a      	ldr	r2, [r7, #16]
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	429a      	cmp	r2, r3
 8005a3e:	d203      	bcs.n	8005a48 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005a40:	4a2d      	ldr	r2, [pc, #180]	; (8005af8 <xTaskIncrementTick+0x158>)
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005a46:	e02e      	b.n	8005aa6 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005a48:	68bb      	ldr	r3, [r7, #8]
 8005a4a:	3304      	adds	r3, #4
 8005a4c:	4618      	mov	r0, r3
 8005a4e:	f7ff fc68 	bl	8005322 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005a52:	68bb      	ldr	r3, [r7, #8]
 8005a54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d004      	beq.n	8005a64 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005a5a:	68bb      	ldr	r3, [r7, #8]
 8005a5c:	3318      	adds	r3, #24
 8005a5e:	4618      	mov	r0, r3
 8005a60:	f7ff fc5f 	bl	8005322 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005a64:	68bb      	ldr	r3, [r7, #8]
 8005a66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a68:	2201      	movs	r2, #1
 8005a6a:	409a      	lsls	r2, r3
 8005a6c:	4b23      	ldr	r3, [pc, #140]	; (8005afc <xTaskIncrementTick+0x15c>)
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	4313      	orrs	r3, r2
 8005a72:	4a22      	ldr	r2, [pc, #136]	; (8005afc <xTaskIncrementTick+0x15c>)
 8005a74:	6013      	str	r3, [r2, #0]
 8005a76:	68bb      	ldr	r3, [r7, #8]
 8005a78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a7a:	4613      	mov	r3, r2
 8005a7c:	009b      	lsls	r3, r3, #2
 8005a7e:	4413      	add	r3, r2
 8005a80:	009b      	lsls	r3, r3, #2
 8005a82:	4a1f      	ldr	r2, [pc, #124]	; (8005b00 <xTaskIncrementTick+0x160>)
 8005a84:	441a      	add	r2, r3
 8005a86:	68bb      	ldr	r3, [r7, #8]
 8005a88:	3304      	adds	r3, #4
 8005a8a:	4619      	mov	r1, r3
 8005a8c:	4610      	mov	r0, r2
 8005a8e:	f7ff fbeb 	bl	8005268 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005a92:	68bb      	ldr	r3, [r7, #8]
 8005a94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a96:	4b1b      	ldr	r3, [pc, #108]	; (8005b04 <xTaskIncrementTick+0x164>)
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a9c:	429a      	cmp	r2, r3
 8005a9e:	d3b9      	bcc.n	8005a14 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8005aa0:	2301      	movs	r3, #1
 8005aa2:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005aa4:	e7b6      	b.n	8005a14 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005aa6:	4b17      	ldr	r3, [pc, #92]	; (8005b04 <xTaskIncrementTick+0x164>)
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005aac:	4914      	ldr	r1, [pc, #80]	; (8005b00 <xTaskIncrementTick+0x160>)
 8005aae:	4613      	mov	r3, r2
 8005ab0:	009b      	lsls	r3, r3, #2
 8005ab2:	4413      	add	r3, r2
 8005ab4:	009b      	lsls	r3, r3, #2
 8005ab6:	440b      	add	r3, r1
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	2b01      	cmp	r3, #1
 8005abc:	d901      	bls.n	8005ac2 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8005abe:	2301      	movs	r3, #1
 8005ac0:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8005ac2:	4b11      	ldr	r3, [pc, #68]	; (8005b08 <xTaskIncrementTick+0x168>)
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d007      	beq.n	8005ada <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8005aca:	2301      	movs	r3, #1
 8005acc:	617b      	str	r3, [r7, #20]
 8005ace:	e004      	b.n	8005ada <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8005ad0:	4b0e      	ldr	r3, [pc, #56]	; (8005b0c <xTaskIncrementTick+0x16c>)
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	3301      	adds	r3, #1
 8005ad6:	4a0d      	ldr	r2, [pc, #52]	; (8005b0c <xTaskIncrementTick+0x16c>)
 8005ad8:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8005ada:	697b      	ldr	r3, [r7, #20]
}
 8005adc:	4618      	mov	r0, r3
 8005ade:	3718      	adds	r7, #24
 8005ae0:	46bd      	mov	sp, r7
 8005ae2:	bd80      	pop	{r7, pc}
 8005ae4:	200005c8 	.word	0x200005c8
 8005ae8:	200005a4 	.word	0x200005a4
 8005aec:	20000558 	.word	0x20000558
 8005af0:	2000055c 	.word	0x2000055c
 8005af4:	200005b8 	.word	0x200005b8
 8005af8:	200005c0 	.word	0x200005c0
 8005afc:	200005a8 	.word	0x200005a8
 8005b00:	200004a4 	.word	0x200004a4
 8005b04:	200004a0 	.word	0x200004a0
 8005b08:	200005b4 	.word	0x200005b4
 8005b0c:	200005b0 	.word	0x200005b0

08005b10 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005b10:	b480      	push	{r7}
 8005b12:	b087      	sub	sp, #28
 8005b14:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005b16:	4b29      	ldr	r3, [pc, #164]	; (8005bbc <vTaskSwitchContext+0xac>)
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d003      	beq.n	8005b26 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005b1e:	4b28      	ldr	r3, [pc, #160]	; (8005bc0 <vTaskSwitchContext+0xb0>)
 8005b20:	2201      	movs	r2, #1
 8005b22:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005b24:	e044      	b.n	8005bb0 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 8005b26:	4b26      	ldr	r3, [pc, #152]	; (8005bc0 <vTaskSwitchContext+0xb0>)
 8005b28:	2200      	movs	r2, #0
 8005b2a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005b2c:	4b25      	ldr	r3, [pc, #148]	; (8005bc4 <vTaskSwitchContext+0xb4>)
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	fab3 f383 	clz	r3, r3
 8005b38:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8005b3a:	7afb      	ldrb	r3, [r7, #11]
 8005b3c:	f1c3 031f 	rsb	r3, r3, #31
 8005b40:	617b      	str	r3, [r7, #20]
 8005b42:	4921      	ldr	r1, [pc, #132]	; (8005bc8 <vTaskSwitchContext+0xb8>)
 8005b44:	697a      	ldr	r2, [r7, #20]
 8005b46:	4613      	mov	r3, r2
 8005b48:	009b      	lsls	r3, r3, #2
 8005b4a:	4413      	add	r3, r2
 8005b4c:	009b      	lsls	r3, r3, #2
 8005b4e:	440b      	add	r3, r1
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d10a      	bne.n	8005b6c <vTaskSwitchContext+0x5c>
	__asm volatile
 8005b56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b5a:	f383 8811 	msr	BASEPRI, r3
 8005b5e:	f3bf 8f6f 	isb	sy
 8005b62:	f3bf 8f4f 	dsb	sy
 8005b66:	607b      	str	r3, [r7, #4]
}
 8005b68:	bf00      	nop
 8005b6a:	e7fe      	b.n	8005b6a <vTaskSwitchContext+0x5a>
 8005b6c:	697a      	ldr	r2, [r7, #20]
 8005b6e:	4613      	mov	r3, r2
 8005b70:	009b      	lsls	r3, r3, #2
 8005b72:	4413      	add	r3, r2
 8005b74:	009b      	lsls	r3, r3, #2
 8005b76:	4a14      	ldr	r2, [pc, #80]	; (8005bc8 <vTaskSwitchContext+0xb8>)
 8005b78:	4413      	add	r3, r2
 8005b7a:	613b      	str	r3, [r7, #16]
 8005b7c:	693b      	ldr	r3, [r7, #16]
 8005b7e:	685b      	ldr	r3, [r3, #4]
 8005b80:	685a      	ldr	r2, [r3, #4]
 8005b82:	693b      	ldr	r3, [r7, #16]
 8005b84:	605a      	str	r2, [r3, #4]
 8005b86:	693b      	ldr	r3, [r7, #16]
 8005b88:	685a      	ldr	r2, [r3, #4]
 8005b8a:	693b      	ldr	r3, [r7, #16]
 8005b8c:	3308      	adds	r3, #8
 8005b8e:	429a      	cmp	r2, r3
 8005b90:	d104      	bne.n	8005b9c <vTaskSwitchContext+0x8c>
 8005b92:	693b      	ldr	r3, [r7, #16]
 8005b94:	685b      	ldr	r3, [r3, #4]
 8005b96:	685a      	ldr	r2, [r3, #4]
 8005b98:	693b      	ldr	r3, [r7, #16]
 8005b9a:	605a      	str	r2, [r3, #4]
 8005b9c:	693b      	ldr	r3, [r7, #16]
 8005b9e:	685b      	ldr	r3, [r3, #4]
 8005ba0:	68db      	ldr	r3, [r3, #12]
 8005ba2:	4a0a      	ldr	r2, [pc, #40]	; (8005bcc <vTaskSwitchContext+0xbc>)
 8005ba4:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005ba6:	4b09      	ldr	r3, [pc, #36]	; (8005bcc <vTaskSwitchContext+0xbc>)
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	334c      	adds	r3, #76	; 0x4c
 8005bac:	4a08      	ldr	r2, [pc, #32]	; (8005bd0 <vTaskSwitchContext+0xc0>)
 8005bae:	6013      	str	r3, [r2, #0]
}
 8005bb0:	bf00      	nop
 8005bb2:	371c      	adds	r7, #28
 8005bb4:	46bd      	mov	sp, r7
 8005bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bba:	4770      	bx	lr
 8005bbc:	200005c8 	.word	0x200005c8
 8005bc0:	200005b4 	.word	0x200005b4
 8005bc4:	200005a8 	.word	0x200005a8
 8005bc8:	200004a4 	.word	0x200004a4
 8005bcc:	200004a0 	.word	0x200004a0
 8005bd0:	20000168 	.word	0x20000168

08005bd4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005bd4:	b580      	push	{r7, lr}
 8005bd6:	b082      	sub	sp, #8
 8005bd8:	af00      	add	r7, sp, #0
 8005bda:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005bdc:	f000 f852 	bl	8005c84 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005be0:	4b06      	ldr	r3, [pc, #24]	; (8005bfc <prvIdleTask+0x28>)
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	2b01      	cmp	r3, #1
 8005be6:	d9f9      	bls.n	8005bdc <prvIdleTask+0x8>
			{
				taskYIELD();
 8005be8:	4b05      	ldr	r3, [pc, #20]	; (8005c00 <prvIdleTask+0x2c>)
 8005bea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005bee:	601a      	str	r2, [r3, #0]
 8005bf0:	f3bf 8f4f 	dsb	sy
 8005bf4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005bf8:	e7f0      	b.n	8005bdc <prvIdleTask+0x8>
 8005bfa:	bf00      	nop
 8005bfc:	200004a4 	.word	0x200004a4
 8005c00:	e000ed04 	.word	0xe000ed04

08005c04 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005c04:	b580      	push	{r7, lr}
 8005c06:	b082      	sub	sp, #8
 8005c08:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005c0a:	2300      	movs	r3, #0
 8005c0c:	607b      	str	r3, [r7, #4]
 8005c0e:	e00c      	b.n	8005c2a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005c10:	687a      	ldr	r2, [r7, #4]
 8005c12:	4613      	mov	r3, r2
 8005c14:	009b      	lsls	r3, r3, #2
 8005c16:	4413      	add	r3, r2
 8005c18:	009b      	lsls	r3, r3, #2
 8005c1a:	4a12      	ldr	r2, [pc, #72]	; (8005c64 <prvInitialiseTaskLists+0x60>)
 8005c1c:	4413      	add	r3, r2
 8005c1e:	4618      	mov	r0, r3
 8005c20:	f7ff faf5 	bl	800520e <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	3301      	adds	r3, #1
 8005c28:	607b      	str	r3, [r7, #4]
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	2b06      	cmp	r3, #6
 8005c2e:	d9ef      	bls.n	8005c10 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005c30:	480d      	ldr	r0, [pc, #52]	; (8005c68 <prvInitialiseTaskLists+0x64>)
 8005c32:	f7ff faec 	bl	800520e <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005c36:	480d      	ldr	r0, [pc, #52]	; (8005c6c <prvInitialiseTaskLists+0x68>)
 8005c38:	f7ff fae9 	bl	800520e <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005c3c:	480c      	ldr	r0, [pc, #48]	; (8005c70 <prvInitialiseTaskLists+0x6c>)
 8005c3e:	f7ff fae6 	bl	800520e <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005c42:	480c      	ldr	r0, [pc, #48]	; (8005c74 <prvInitialiseTaskLists+0x70>)
 8005c44:	f7ff fae3 	bl	800520e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005c48:	480b      	ldr	r0, [pc, #44]	; (8005c78 <prvInitialiseTaskLists+0x74>)
 8005c4a:	f7ff fae0 	bl	800520e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005c4e:	4b0b      	ldr	r3, [pc, #44]	; (8005c7c <prvInitialiseTaskLists+0x78>)
 8005c50:	4a05      	ldr	r2, [pc, #20]	; (8005c68 <prvInitialiseTaskLists+0x64>)
 8005c52:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005c54:	4b0a      	ldr	r3, [pc, #40]	; (8005c80 <prvInitialiseTaskLists+0x7c>)
 8005c56:	4a05      	ldr	r2, [pc, #20]	; (8005c6c <prvInitialiseTaskLists+0x68>)
 8005c58:	601a      	str	r2, [r3, #0]
}
 8005c5a:	bf00      	nop
 8005c5c:	3708      	adds	r7, #8
 8005c5e:	46bd      	mov	sp, r7
 8005c60:	bd80      	pop	{r7, pc}
 8005c62:	bf00      	nop
 8005c64:	200004a4 	.word	0x200004a4
 8005c68:	20000530 	.word	0x20000530
 8005c6c:	20000544 	.word	0x20000544
 8005c70:	20000560 	.word	0x20000560
 8005c74:	20000574 	.word	0x20000574
 8005c78:	2000058c 	.word	0x2000058c
 8005c7c:	20000558 	.word	0x20000558
 8005c80:	2000055c 	.word	0x2000055c

08005c84 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005c84:	b580      	push	{r7, lr}
 8005c86:	b082      	sub	sp, #8
 8005c88:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005c8a:	e019      	b.n	8005cc0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005c8c:	f000 fa12 	bl	80060b4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005c90:	4b10      	ldr	r3, [pc, #64]	; (8005cd4 <prvCheckTasksWaitingTermination+0x50>)
 8005c92:	68db      	ldr	r3, [r3, #12]
 8005c94:	68db      	ldr	r3, [r3, #12]
 8005c96:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	3304      	adds	r3, #4
 8005c9c:	4618      	mov	r0, r3
 8005c9e:	f7ff fb40 	bl	8005322 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005ca2:	4b0d      	ldr	r3, [pc, #52]	; (8005cd8 <prvCheckTasksWaitingTermination+0x54>)
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	3b01      	subs	r3, #1
 8005ca8:	4a0b      	ldr	r2, [pc, #44]	; (8005cd8 <prvCheckTasksWaitingTermination+0x54>)
 8005caa:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005cac:	4b0b      	ldr	r3, [pc, #44]	; (8005cdc <prvCheckTasksWaitingTermination+0x58>)
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	3b01      	subs	r3, #1
 8005cb2:	4a0a      	ldr	r2, [pc, #40]	; (8005cdc <prvCheckTasksWaitingTermination+0x58>)
 8005cb4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005cb6:	f000 fa2d 	bl	8006114 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005cba:	6878      	ldr	r0, [r7, #4]
 8005cbc:	f000 f810 	bl	8005ce0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005cc0:	4b06      	ldr	r3, [pc, #24]	; (8005cdc <prvCheckTasksWaitingTermination+0x58>)
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d1e1      	bne.n	8005c8c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005cc8:	bf00      	nop
 8005cca:	bf00      	nop
 8005ccc:	3708      	adds	r7, #8
 8005cce:	46bd      	mov	sp, r7
 8005cd0:	bd80      	pop	{r7, pc}
 8005cd2:	bf00      	nop
 8005cd4:	20000574 	.word	0x20000574
 8005cd8:	200005a0 	.word	0x200005a0
 8005cdc:	20000588 	.word	0x20000588

08005ce0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005ce0:	b580      	push	{r7, lr}
 8005ce2:	b084      	sub	sp, #16
 8005ce4:	af00      	add	r7, sp, #0
 8005ce6:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	334c      	adds	r3, #76	; 0x4c
 8005cec:	4618      	mov	r0, r3
 8005cee:	f002 fefd 	bl	8008aec <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d108      	bne.n	8005d0e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d00:	4618      	mov	r0, r3
 8005d02:	f000 fbc5 	bl	8006490 <vPortFree>
				vPortFree( pxTCB );
 8005d06:	6878      	ldr	r0, [r7, #4]
 8005d08:	f000 fbc2 	bl	8006490 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005d0c:	e018      	b.n	8005d40 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8005d14:	2b01      	cmp	r3, #1
 8005d16:	d103      	bne.n	8005d20 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8005d18:	6878      	ldr	r0, [r7, #4]
 8005d1a:	f000 fbb9 	bl	8006490 <vPortFree>
	}
 8005d1e:	e00f      	b.n	8005d40 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8005d26:	2b02      	cmp	r3, #2
 8005d28:	d00a      	beq.n	8005d40 <prvDeleteTCB+0x60>
	__asm volatile
 8005d2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d2e:	f383 8811 	msr	BASEPRI, r3
 8005d32:	f3bf 8f6f 	isb	sy
 8005d36:	f3bf 8f4f 	dsb	sy
 8005d3a:	60fb      	str	r3, [r7, #12]
}
 8005d3c:	bf00      	nop
 8005d3e:	e7fe      	b.n	8005d3e <prvDeleteTCB+0x5e>
	}
 8005d40:	bf00      	nop
 8005d42:	3710      	adds	r7, #16
 8005d44:	46bd      	mov	sp, r7
 8005d46:	bd80      	pop	{r7, pc}

08005d48 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005d48:	b480      	push	{r7}
 8005d4a:	b083      	sub	sp, #12
 8005d4c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005d4e:	4b0c      	ldr	r3, [pc, #48]	; (8005d80 <prvResetNextTaskUnblockTime+0x38>)
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d104      	bne.n	8005d62 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005d58:	4b0a      	ldr	r3, [pc, #40]	; (8005d84 <prvResetNextTaskUnblockTime+0x3c>)
 8005d5a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005d5e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005d60:	e008      	b.n	8005d74 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005d62:	4b07      	ldr	r3, [pc, #28]	; (8005d80 <prvResetNextTaskUnblockTime+0x38>)
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	68db      	ldr	r3, [r3, #12]
 8005d68:	68db      	ldr	r3, [r3, #12]
 8005d6a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	685b      	ldr	r3, [r3, #4]
 8005d70:	4a04      	ldr	r2, [pc, #16]	; (8005d84 <prvResetNextTaskUnblockTime+0x3c>)
 8005d72:	6013      	str	r3, [r2, #0]
}
 8005d74:	bf00      	nop
 8005d76:	370c      	adds	r7, #12
 8005d78:	46bd      	mov	sp, r7
 8005d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d7e:	4770      	bx	lr
 8005d80:	20000558 	.word	0x20000558
 8005d84:	200005c0 	.word	0x200005c0

08005d88 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005d88:	b580      	push	{r7, lr}
 8005d8a:	b084      	sub	sp, #16
 8005d8c:	af00      	add	r7, sp, #0
 8005d8e:	6078      	str	r0, [r7, #4]
 8005d90:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005d92:	4b29      	ldr	r3, [pc, #164]	; (8005e38 <prvAddCurrentTaskToDelayedList+0xb0>)
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005d98:	4b28      	ldr	r3, [pc, #160]	; (8005e3c <prvAddCurrentTaskToDelayedList+0xb4>)
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	3304      	adds	r3, #4
 8005d9e:	4618      	mov	r0, r3
 8005da0:	f7ff fabf 	bl	8005322 <uxListRemove>
 8005da4:	4603      	mov	r3, r0
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d10b      	bne.n	8005dc2 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8005daa:	4b24      	ldr	r3, [pc, #144]	; (8005e3c <prvAddCurrentTaskToDelayedList+0xb4>)
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005db0:	2201      	movs	r2, #1
 8005db2:	fa02 f303 	lsl.w	r3, r2, r3
 8005db6:	43da      	mvns	r2, r3
 8005db8:	4b21      	ldr	r3, [pc, #132]	; (8005e40 <prvAddCurrentTaskToDelayedList+0xb8>)
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	4013      	ands	r3, r2
 8005dbe:	4a20      	ldr	r2, [pc, #128]	; (8005e40 <prvAddCurrentTaskToDelayedList+0xb8>)
 8005dc0:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005dc8:	d10a      	bne.n	8005de0 <prvAddCurrentTaskToDelayedList+0x58>
 8005dca:	683b      	ldr	r3, [r7, #0]
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d007      	beq.n	8005de0 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005dd0:	4b1a      	ldr	r3, [pc, #104]	; (8005e3c <prvAddCurrentTaskToDelayedList+0xb4>)
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	3304      	adds	r3, #4
 8005dd6:	4619      	mov	r1, r3
 8005dd8:	481a      	ldr	r0, [pc, #104]	; (8005e44 <prvAddCurrentTaskToDelayedList+0xbc>)
 8005dda:	f7ff fa45 	bl	8005268 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005dde:	e026      	b.n	8005e2e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005de0:	68fa      	ldr	r2, [r7, #12]
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	4413      	add	r3, r2
 8005de6:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005de8:	4b14      	ldr	r3, [pc, #80]	; (8005e3c <prvAddCurrentTaskToDelayedList+0xb4>)
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	68ba      	ldr	r2, [r7, #8]
 8005dee:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005df0:	68ba      	ldr	r2, [r7, #8]
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	429a      	cmp	r2, r3
 8005df6:	d209      	bcs.n	8005e0c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005df8:	4b13      	ldr	r3, [pc, #76]	; (8005e48 <prvAddCurrentTaskToDelayedList+0xc0>)
 8005dfa:	681a      	ldr	r2, [r3, #0]
 8005dfc:	4b0f      	ldr	r3, [pc, #60]	; (8005e3c <prvAddCurrentTaskToDelayedList+0xb4>)
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	3304      	adds	r3, #4
 8005e02:	4619      	mov	r1, r3
 8005e04:	4610      	mov	r0, r2
 8005e06:	f7ff fa53 	bl	80052b0 <vListInsert>
}
 8005e0a:	e010      	b.n	8005e2e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005e0c:	4b0f      	ldr	r3, [pc, #60]	; (8005e4c <prvAddCurrentTaskToDelayedList+0xc4>)
 8005e0e:	681a      	ldr	r2, [r3, #0]
 8005e10:	4b0a      	ldr	r3, [pc, #40]	; (8005e3c <prvAddCurrentTaskToDelayedList+0xb4>)
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	3304      	adds	r3, #4
 8005e16:	4619      	mov	r1, r3
 8005e18:	4610      	mov	r0, r2
 8005e1a:	f7ff fa49 	bl	80052b0 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005e1e:	4b0c      	ldr	r3, [pc, #48]	; (8005e50 <prvAddCurrentTaskToDelayedList+0xc8>)
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	68ba      	ldr	r2, [r7, #8]
 8005e24:	429a      	cmp	r2, r3
 8005e26:	d202      	bcs.n	8005e2e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8005e28:	4a09      	ldr	r2, [pc, #36]	; (8005e50 <prvAddCurrentTaskToDelayedList+0xc8>)
 8005e2a:	68bb      	ldr	r3, [r7, #8]
 8005e2c:	6013      	str	r3, [r2, #0]
}
 8005e2e:	bf00      	nop
 8005e30:	3710      	adds	r7, #16
 8005e32:	46bd      	mov	sp, r7
 8005e34:	bd80      	pop	{r7, pc}
 8005e36:	bf00      	nop
 8005e38:	200005a4 	.word	0x200005a4
 8005e3c:	200004a0 	.word	0x200004a0
 8005e40:	200005a8 	.word	0x200005a8
 8005e44:	2000058c 	.word	0x2000058c
 8005e48:	2000055c 	.word	0x2000055c
 8005e4c:	20000558 	.word	0x20000558
 8005e50:	200005c0 	.word	0x200005c0

08005e54 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005e54:	b480      	push	{r7}
 8005e56:	b085      	sub	sp, #20
 8005e58:	af00      	add	r7, sp, #0
 8005e5a:	60f8      	str	r0, [r7, #12]
 8005e5c:	60b9      	str	r1, [r7, #8]
 8005e5e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	3b04      	subs	r3, #4
 8005e64:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005e6c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	3b04      	subs	r3, #4
 8005e72:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005e74:	68bb      	ldr	r3, [r7, #8]
 8005e76:	f023 0201 	bic.w	r2, r3, #1
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	3b04      	subs	r3, #4
 8005e82:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005e84:	4a0c      	ldr	r2, [pc, #48]	; (8005eb8 <pxPortInitialiseStack+0x64>)
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	3b14      	subs	r3, #20
 8005e8e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005e90:	687a      	ldr	r2, [r7, #4]
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	3b04      	subs	r3, #4
 8005e9a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	f06f 0202 	mvn.w	r2, #2
 8005ea2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	3b20      	subs	r3, #32
 8005ea8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005eaa:	68fb      	ldr	r3, [r7, #12]
}
 8005eac:	4618      	mov	r0, r3
 8005eae:	3714      	adds	r7, #20
 8005eb0:	46bd      	mov	sp, r7
 8005eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb6:	4770      	bx	lr
 8005eb8:	08005ebd 	.word	0x08005ebd

08005ebc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005ebc:	b480      	push	{r7}
 8005ebe:	b085      	sub	sp, #20
 8005ec0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8005ec2:	2300      	movs	r3, #0
 8005ec4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005ec6:	4b12      	ldr	r3, [pc, #72]	; (8005f10 <prvTaskExitError+0x54>)
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005ece:	d00a      	beq.n	8005ee6 <prvTaskExitError+0x2a>
	__asm volatile
 8005ed0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ed4:	f383 8811 	msr	BASEPRI, r3
 8005ed8:	f3bf 8f6f 	isb	sy
 8005edc:	f3bf 8f4f 	dsb	sy
 8005ee0:	60fb      	str	r3, [r7, #12]
}
 8005ee2:	bf00      	nop
 8005ee4:	e7fe      	b.n	8005ee4 <prvTaskExitError+0x28>
	__asm volatile
 8005ee6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005eea:	f383 8811 	msr	BASEPRI, r3
 8005eee:	f3bf 8f6f 	isb	sy
 8005ef2:	f3bf 8f4f 	dsb	sy
 8005ef6:	60bb      	str	r3, [r7, #8]
}
 8005ef8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005efa:	bf00      	nop
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d0fc      	beq.n	8005efc <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005f02:	bf00      	nop
 8005f04:	bf00      	nop
 8005f06:	3714      	adds	r7, #20
 8005f08:	46bd      	mov	sp, r7
 8005f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f0e:	4770      	bx	lr
 8005f10:	2000000c 	.word	0x2000000c
	...

08005f20 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005f20:	4b07      	ldr	r3, [pc, #28]	; (8005f40 <pxCurrentTCBConst2>)
 8005f22:	6819      	ldr	r1, [r3, #0]
 8005f24:	6808      	ldr	r0, [r1, #0]
 8005f26:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f2a:	f380 8809 	msr	PSP, r0
 8005f2e:	f3bf 8f6f 	isb	sy
 8005f32:	f04f 0000 	mov.w	r0, #0
 8005f36:	f380 8811 	msr	BASEPRI, r0
 8005f3a:	4770      	bx	lr
 8005f3c:	f3af 8000 	nop.w

08005f40 <pxCurrentTCBConst2>:
 8005f40:	200004a0 	.word	0x200004a0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005f44:	bf00      	nop
 8005f46:	bf00      	nop

08005f48 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005f48:	4808      	ldr	r0, [pc, #32]	; (8005f6c <prvPortStartFirstTask+0x24>)
 8005f4a:	6800      	ldr	r0, [r0, #0]
 8005f4c:	6800      	ldr	r0, [r0, #0]
 8005f4e:	f380 8808 	msr	MSP, r0
 8005f52:	f04f 0000 	mov.w	r0, #0
 8005f56:	f380 8814 	msr	CONTROL, r0
 8005f5a:	b662      	cpsie	i
 8005f5c:	b661      	cpsie	f
 8005f5e:	f3bf 8f4f 	dsb	sy
 8005f62:	f3bf 8f6f 	isb	sy
 8005f66:	df00      	svc	0
 8005f68:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8005f6a:	bf00      	nop
 8005f6c:	e000ed08 	.word	0xe000ed08

08005f70 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005f70:	b580      	push	{r7, lr}
 8005f72:	b086      	sub	sp, #24
 8005f74:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005f76:	4b46      	ldr	r3, [pc, #280]	; (8006090 <xPortStartScheduler+0x120>)
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	4a46      	ldr	r2, [pc, #280]	; (8006094 <xPortStartScheduler+0x124>)
 8005f7c:	4293      	cmp	r3, r2
 8005f7e:	d10a      	bne.n	8005f96 <xPortStartScheduler+0x26>
	__asm volatile
 8005f80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f84:	f383 8811 	msr	BASEPRI, r3
 8005f88:	f3bf 8f6f 	isb	sy
 8005f8c:	f3bf 8f4f 	dsb	sy
 8005f90:	613b      	str	r3, [r7, #16]
}
 8005f92:	bf00      	nop
 8005f94:	e7fe      	b.n	8005f94 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005f96:	4b3e      	ldr	r3, [pc, #248]	; (8006090 <xPortStartScheduler+0x120>)
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	4a3f      	ldr	r2, [pc, #252]	; (8006098 <xPortStartScheduler+0x128>)
 8005f9c:	4293      	cmp	r3, r2
 8005f9e:	d10a      	bne.n	8005fb6 <xPortStartScheduler+0x46>
	__asm volatile
 8005fa0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fa4:	f383 8811 	msr	BASEPRI, r3
 8005fa8:	f3bf 8f6f 	isb	sy
 8005fac:	f3bf 8f4f 	dsb	sy
 8005fb0:	60fb      	str	r3, [r7, #12]
}
 8005fb2:	bf00      	nop
 8005fb4:	e7fe      	b.n	8005fb4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005fb6:	4b39      	ldr	r3, [pc, #228]	; (800609c <xPortStartScheduler+0x12c>)
 8005fb8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005fba:	697b      	ldr	r3, [r7, #20]
 8005fbc:	781b      	ldrb	r3, [r3, #0]
 8005fbe:	b2db      	uxtb	r3, r3
 8005fc0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005fc2:	697b      	ldr	r3, [r7, #20]
 8005fc4:	22ff      	movs	r2, #255	; 0xff
 8005fc6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005fc8:	697b      	ldr	r3, [r7, #20]
 8005fca:	781b      	ldrb	r3, [r3, #0]
 8005fcc:	b2db      	uxtb	r3, r3
 8005fce:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005fd0:	78fb      	ldrb	r3, [r7, #3]
 8005fd2:	b2db      	uxtb	r3, r3
 8005fd4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005fd8:	b2da      	uxtb	r2, r3
 8005fda:	4b31      	ldr	r3, [pc, #196]	; (80060a0 <xPortStartScheduler+0x130>)
 8005fdc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005fde:	4b31      	ldr	r3, [pc, #196]	; (80060a4 <xPortStartScheduler+0x134>)
 8005fe0:	2207      	movs	r2, #7
 8005fe2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005fe4:	e009      	b.n	8005ffa <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8005fe6:	4b2f      	ldr	r3, [pc, #188]	; (80060a4 <xPortStartScheduler+0x134>)
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	3b01      	subs	r3, #1
 8005fec:	4a2d      	ldr	r2, [pc, #180]	; (80060a4 <xPortStartScheduler+0x134>)
 8005fee:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005ff0:	78fb      	ldrb	r3, [r7, #3]
 8005ff2:	b2db      	uxtb	r3, r3
 8005ff4:	005b      	lsls	r3, r3, #1
 8005ff6:	b2db      	uxtb	r3, r3
 8005ff8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005ffa:	78fb      	ldrb	r3, [r7, #3]
 8005ffc:	b2db      	uxtb	r3, r3
 8005ffe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006002:	2b80      	cmp	r3, #128	; 0x80
 8006004:	d0ef      	beq.n	8005fe6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006006:	4b27      	ldr	r3, [pc, #156]	; (80060a4 <xPortStartScheduler+0x134>)
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	f1c3 0307 	rsb	r3, r3, #7
 800600e:	2b04      	cmp	r3, #4
 8006010:	d00a      	beq.n	8006028 <xPortStartScheduler+0xb8>
	__asm volatile
 8006012:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006016:	f383 8811 	msr	BASEPRI, r3
 800601a:	f3bf 8f6f 	isb	sy
 800601e:	f3bf 8f4f 	dsb	sy
 8006022:	60bb      	str	r3, [r7, #8]
}
 8006024:	bf00      	nop
 8006026:	e7fe      	b.n	8006026 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006028:	4b1e      	ldr	r3, [pc, #120]	; (80060a4 <xPortStartScheduler+0x134>)
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	021b      	lsls	r3, r3, #8
 800602e:	4a1d      	ldr	r2, [pc, #116]	; (80060a4 <xPortStartScheduler+0x134>)
 8006030:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006032:	4b1c      	ldr	r3, [pc, #112]	; (80060a4 <xPortStartScheduler+0x134>)
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800603a:	4a1a      	ldr	r2, [pc, #104]	; (80060a4 <xPortStartScheduler+0x134>)
 800603c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	b2da      	uxtb	r2, r3
 8006042:	697b      	ldr	r3, [r7, #20]
 8006044:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006046:	4b18      	ldr	r3, [pc, #96]	; (80060a8 <xPortStartScheduler+0x138>)
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	4a17      	ldr	r2, [pc, #92]	; (80060a8 <xPortStartScheduler+0x138>)
 800604c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006050:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006052:	4b15      	ldr	r3, [pc, #84]	; (80060a8 <xPortStartScheduler+0x138>)
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	4a14      	ldr	r2, [pc, #80]	; (80060a8 <xPortStartScheduler+0x138>)
 8006058:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800605c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800605e:	f000 f8dd 	bl	800621c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006062:	4b12      	ldr	r3, [pc, #72]	; (80060ac <xPortStartScheduler+0x13c>)
 8006064:	2200      	movs	r2, #0
 8006066:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8006068:	f000 f8fc 	bl	8006264 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800606c:	4b10      	ldr	r3, [pc, #64]	; (80060b0 <xPortStartScheduler+0x140>)
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	4a0f      	ldr	r2, [pc, #60]	; (80060b0 <xPortStartScheduler+0x140>)
 8006072:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8006076:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006078:	f7ff ff66 	bl	8005f48 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800607c:	f7ff fd48 	bl	8005b10 <vTaskSwitchContext>
	prvTaskExitError();
 8006080:	f7ff ff1c 	bl	8005ebc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006084:	2300      	movs	r3, #0
}
 8006086:	4618      	mov	r0, r3
 8006088:	3718      	adds	r7, #24
 800608a:	46bd      	mov	sp, r7
 800608c:	bd80      	pop	{r7, pc}
 800608e:	bf00      	nop
 8006090:	e000ed00 	.word	0xe000ed00
 8006094:	410fc271 	.word	0x410fc271
 8006098:	410fc270 	.word	0x410fc270
 800609c:	e000e400 	.word	0xe000e400
 80060a0:	200005cc 	.word	0x200005cc
 80060a4:	200005d0 	.word	0x200005d0
 80060a8:	e000ed20 	.word	0xe000ed20
 80060ac:	2000000c 	.word	0x2000000c
 80060b0:	e000ef34 	.word	0xe000ef34

080060b4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80060b4:	b480      	push	{r7}
 80060b6:	b083      	sub	sp, #12
 80060b8:	af00      	add	r7, sp, #0
	__asm volatile
 80060ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060be:	f383 8811 	msr	BASEPRI, r3
 80060c2:	f3bf 8f6f 	isb	sy
 80060c6:	f3bf 8f4f 	dsb	sy
 80060ca:	607b      	str	r3, [r7, #4]
}
 80060cc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80060ce:	4b0f      	ldr	r3, [pc, #60]	; (800610c <vPortEnterCritical+0x58>)
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	3301      	adds	r3, #1
 80060d4:	4a0d      	ldr	r2, [pc, #52]	; (800610c <vPortEnterCritical+0x58>)
 80060d6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80060d8:	4b0c      	ldr	r3, [pc, #48]	; (800610c <vPortEnterCritical+0x58>)
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	2b01      	cmp	r3, #1
 80060de:	d10f      	bne.n	8006100 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80060e0:	4b0b      	ldr	r3, [pc, #44]	; (8006110 <vPortEnterCritical+0x5c>)
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	b2db      	uxtb	r3, r3
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d00a      	beq.n	8006100 <vPortEnterCritical+0x4c>
	__asm volatile
 80060ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060ee:	f383 8811 	msr	BASEPRI, r3
 80060f2:	f3bf 8f6f 	isb	sy
 80060f6:	f3bf 8f4f 	dsb	sy
 80060fa:	603b      	str	r3, [r7, #0]
}
 80060fc:	bf00      	nop
 80060fe:	e7fe      	b.n	80060fe <vPortEnterCritical+0x4a>
	}
}
 8006100:	bf00      	nop
 8006102:	370c      	adds	r7, #12
 8006104:	46bd      	mov	sp, r7
 8006106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800610a:	4770      	bx	lr
 800610c:	2000000c 	.word	0x2000000c
 8006110:	e000ed04 	.word	0xe000ed04

08006114 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006114:	b480      	push	{r7}
 8006116:	b083      	sub	sp, #12
 8006118:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800611a:	4b12      	ldr	r3, [pc, #72]	; (8006164 <vPortExitCritical+0x50>)
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	2b00      	cmp	r3, #0
 8006120:	d10a      	bne.n	8006138 <vPortExitCritical+0x24>
	__asm volatile
 8006122:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006126:	f383 8811 	msr	BASEPRI, r3
 800612a:	f3bf 8f6f 	isb	sy
 800612e:	f3bf 8f4f 	dsb	sy
 8006132:	607b      	str	r3, [r7, #4]
}
 8006134:	bf00      	nop
 8006136:	e7fe      	b.n	8006136 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006138:	4b0a      	ldr	r3, [pc, #40]	; (8006164 <vPortExitCritical+0x50>)
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	3b01      	subs	r3, #1
 800613e:	4a09      	ldr	r2, [pc, #36]	; (8006164 <vPortExitCritical+0x50>)
 8006140:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006142:	4b08      	ldr	r3, [pc, #32]	; (8006164 <vPortExitCritical+0x50>)
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	2b00      	cmp	r3, #0
 8006148:	d105      	bne.n	8006156 <vPortExitCritical+0x42>
 800614a:	2300      	movs	r3, #0
 800614c:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800614e:	683b      	ldr	r3, [r7, #0]
 8006150:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8006154:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006156:	bf00      	nop
 8006158:	370c      	adds	r7, #12
 800615a:	46bd      	mov	sp, r7
 800615c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006160:	4770      	bx	lr
 8006162:	bf00      	nop
 8006164:	2000000c 	.word	0x2000000c
	...

08006170 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006170:	f3ef 8009 	mrs	r0, PSP
 8006174:	f3bf 8f6f 	isb	sy
 8006178:	4b15      	ldr	r3, [pc, #84]	; (80061d0 <pxCurrentTCBConst>)
 800617a:	681a      	ldr	r2, [r3, #0]
 800617c:	f01e 0f10 	tst.w	lr, #16
 8006180:	bf08      	it	eq
 8006182:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006186:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800618a:	6010      	str	r0, [r2, #0]
 800618c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006190:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006194:	f380 8811 	msr	BASEPRI, r0
 8006198:	f3bf 8f4f 	dsb	sy
 800619c:	f3bf 8f6f 	isb	sy
 80061a0:	f7ff fcb6 	bl	8005b10 <vTaskSwitchContext>
 80061a4:	f04f 0000 	mov.w	r0, #0
 80061a8:	f380 8811 	msr	BASEPRI, r0
 80061ac:	bc09      	pop	{r0, r3}
 80061ae:	6819      	ldr	r1, [r3, #0]
 80061b0:	6808      	ldr	r0, [r1, #0]
 80061b2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80061b6:	f01e 0f10 	tst.w	lr, #16
 80061ba:	bf08      	it	eq
 80061bc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80061c0:	f380 8809 	msr	PSP, r0
 80061c4:	f3bf 8f6f 	isb	sy
 80061c8:	4770      	bx	lr
 80061ca:	bf00      	nop
 80061cc:	f3af 8000 	nop.w

080061d0 <pxCurrentTCBConst>:
 80061d0:	200004a0 	.word	0x200004a0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80061d4:	bf00      	nop
 80061d6:	bf00      	nop

080061d8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80061d8:	b580      	push	{r7, lr}
 80061da:	b082      	sub	sp, #8
 80061dc:	af00      	add	r7, sp, #0
	__asm volatile
 80061de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061e2:	f383 8811 	msr	BASEPRI, r3
 80061e6:	f3bf 8f6f 	isb	sy
 80061ea:	f3bf 8f4f 	dsb	sy
 80061ee:	607b      	str	r3, [r7, #4]
}
 80061f0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80061f2:	f7ff fbd5 	bl	80059a0 <xTaskIncrementTick>
 80061f6:	4603      	mov	r3, r0
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d003      	beq.n	8006204 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80061fc:	4b06      	ldr	r3, [pc, #24]	; (8006218 <SysTick_Handler+0x40>)
 80061fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006202:	601a      	str	r2, [r3, #0]
 8006204:	2300      	movs	r3, #0
 8006206:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006208:	683b      	ldr	r3, [r7, #0]
 800620a:	f383 8811 	msr	BASEPRI, r3
}
 800620e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006210:	bf00      	nop
 8006212:	3708      	adds	r7, #8
 8006214:	46bd      	mov	sp, r7
 8006216:	bd80      	pop	{r7, pc}
 8006218:	e000ed04 	.word	0xe000ed04

0800621c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800621c:	b480      	push	{r7}
 800621e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006220:	4b0b      	ldr	r3, [pc, #44]	; (8006250 <vPortSetupTimerInterrupt+0x34>)
 8006222:	2200      	movs	r2, #0
 8006224:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006226:	4b0b      	ldr	r3, [pc, #44]	; (8006254 <vPortSetupTimerInterrupt+0x38>)
 8006228:	2200      	movs	r2, #0
 800622a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800622c:	4b0a      	ldr	r3, [pc, #40]	; (8006258 <vPortSetupTimerInterrupt+0x3c>)
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	4a0a      	ldr	r2, [pc, #40]	; (800625c <vPortSetupTimerInterrupt+0x40>)
 8006232:	fba2 2303 	umull	r2, r3, r2, r3
 8006236:	099b      	lsrs	r3, r3, #6
 8006238:	4a09      	ldr	r2, [pc, #36]	; (8006260 <vPortSetupTimerInterrupt+0x44>)
 800623a:	3b01      	subs	r3, #1
 800623c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800623e:	4b04      	ldr	r3, [pc, #16]	; (8006250 <vPortSetupTimerInterrupt+0x34>)
 8006240:	2207      	movs	r2, #7
 8006242:	601a      	str	r2, [r3, #0]
}
 8006244:	bf00      	nop
 8006246:	46bd      	mov	sp, r7
 8006248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800624c:	4770      	bx	lr
 800624e:	bf00      	nop
 8006250:	e000e010 	.word	0xe000e010
 8006254:	e000e018 	.word	0xe000e018
 8006258:	20000000 	.word	0x20000000
 800625c:	10624dd3 	.word	0x10624dd3
 8006260:	e000e014 	.word	0xe000e014

08006264 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006264:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8006274 <vPortEnableVFP+0x10>
 8006268:	6801      	ldr	r1, [r0, #0]
 800626a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800626e:	6001      	str	r1, [r0, #0]
 8006270:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006272:	bf00      	nop
 8006274:	e000ed88 	.word	0xe000ed88

08006278 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006278:	b480      	push	{r7}
 800627a:	b085      	sub	sp, #20
 800627c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800627e:	f3ef 8305 	mrs	r3, IPSR
 8006282:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	2b0f      	cmp	r3, #15
 8006288:	d914      	bls.n	80062b4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800628a:	4a17      	ldr	r2, [pc, #92]	; (80062e8 <vPortValidateInterruptPriority+0x70>)
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	4413      	add	r3, r2
 8006290:	781b      	ldrb	r3, [r3, #0]
 8006292:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006294:	4b15      	ldr	r3, [pc, #84]	; (80062ec <vPortValidateInterruptPriority+0x74>)
 8006296:	781b      	ldrb	r3, [r3, #0]
 8006298:	7afa      	ldrb	r2, [r7, #11]
 800629a:	429a      	cmp	r2, r3
 800629c:	d20a      	bcs.n	80062b4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800629e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062a2:	f383 8811 	msr	BASEPRI, r3
 80062a6:	f3bf 8f6f 	isb	sy
 80062aa:	f3bf 8f4f 	dsb	sy
 80062ae:	607b      	str	r3, [r7, #4]
}
 80062b0:	bf00      	nop
 80062b2:	e7fe      	b.n	80062b2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80062b4:	4b0e      	ldr	r3, [pc, #56]	; (80062f0 <vPortValidateInterruptPriority+0x78>)
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80062bc:	4b0d      	ldr	r3, [pc, #52]	; (80062f4 <vPortValidateInterruptPriority+0x7c>)
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	429a      	cmp	r2, r3
 80062c2:	d90a      	bls.n	80062da <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80062c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062c8:	f383 8811 	msr	BASEPRI, r3
 80062cc:	f3bf 8f6f 	isb	sy
 80062d0:	f3bf 8f4f 	dsb	sy
 80062d4:	603b      	str	r3, [r7, #0]
}
 80062d6:	bf00      	nop
 80062d8:	e7fe      	b.n	80062d8 <vPortValidateInterruptPriority+0x60>
	}
 80062da:	bf00      	nop
 80062dc:	3714      	adds	r7, #20
 80062de:	46bd      	mov	sp, r7
 80062e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e4:	4770      	bx	lr
 80062e6:	bf00      	nop
 80062e8:	e000e3f0 	.word	0xe000e3f0
 80062ec:	200005cc 	.word	0x200005cc
 80062f0:	e000ed0c 	.word	0xe000ed0c
 80062f4:	200005d0 	.word	0x200005d0

080062f8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80062f8:	b580      	push	{r7, lr}
 80062fa:	b08a      	sub	sp, #40	; 0x28
 80062fc:	af00      	add	r7, sp, #0
 80062fe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006300:	2300      	movs	r3, #0
 8006302:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006304:	f7ff fa80 	bl	8005808 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006308:	4b5b      	ldr	r3, [pc, #364]	; (8006478 <pvPortMalloc+0x180>)
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	2b00      	cmp	r3, #0
 800630e:	d101      	bne.n	8006314 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006310:	f000 f920 	bl	8006554 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006314:	4b59      	ldr	r3, [pc, #356]	; (800647c <pvPortMalloc+0x184>)
 8006316:	681a      	ldr	r2, [r3, #0]
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	4013      	ands	r3, r2
 800631c:	2b00      	cmp	r3, #0
 800631e:	f040 8093 	bne.w	8006448 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	2b00      	cmp	r3, #0
 8006326:	d01d      	beq.n	8006364 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8006328:	2208      	movs	r2, #8
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	4413      	add	r3, r2
 800632e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	f003 0307 	and.w	r3, r3, #7
 8006336:	2b00      	cmp	r3, #0
 8006338:	d014      	beq.n	8006364 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	f023 0307 	bic.w	r3, r3, #7
 8006340:	3308      	adds	r3, #8
 8006342:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	f003 0307 	and.w	r3, r3, #7
 800634a:	2b00      	cmp	r3, #0
 800634c:	d00a      	beq.n	8006364 <pvPortMalloc+0x6c>
	__asm volatile
 800634e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006352:	f383 8811 	msr	BASEPRI, r3
 8006356:	f3bf 8f6f 	isb	sy
 800635a:	f3bf 8f4f 	dsb	sy
 800635e:	617b      	str	r3, [r7, #20]
}
 8006360:	bf00      	nop
 8006362:	e7fe      	b.n	8006362 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	2b00      	cmp	r3, #0
 8006368:	d06e      	beq.n	8006448 <pvPortMalloc+0x150>
 800636a:	4b45      	ldr	r3, [pc, #276]	; (8006480 <pvPortMalloc+0x188>)
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	687a      	ldr	r2, [r7, #4]
 8006370:	429a      	cmp	r2, r3
 8006372:	d869      	bhi.n	8006448 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006374:	4b43      	ldr	r3, [pc, #268]	; (8006484 <pvPortMalloc+0x18c>)
 8006376:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006378:	4b42      	ldr	r3, [pc, #264]	; (8006484 <pvPortMalloc+0x18c>)
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800637e:	e004      	b.n	800638a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8006380:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006382:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006384:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800638a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800638c:	685b      	ldr	r3, [r3, #4]
 800638e:	687a      	ldr	r2, [r7, #4]
 8006390:	429a      	cmp	r2, r3
 8006392:	d903      	bls.n	800639c <pvPortMalloc+0xa4>
 8006394:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	2b00      	cmp	r3, #0
 800639a:	d1f1      	bne.n	8006380 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800639c:	4b36      	ldr	r3, [pc, #216]	; (8006478 <pvPortMalloc+0x180>)
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80063a2:	429a      	cmp	r2, r3
 80063a4:	d050      	beq.n	8006448 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80063a6:	6a3b      	ldr	r3, [r7, #32]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	2208      	movs	r2, #8
 80063ac:	4413      	add	r3, r2
 80063ae:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80063b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063b2:	681a      	ldr	r2, [r3, #0]
 80063b4:	6a3b      	ldr	r3, [r7, #32]
 80063b6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80063b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063ba:	685a      	ldr	r2, [r3, #4]
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	1ad2      	subs	r2, r2, r3
 80063c0:	2308      	movs	r3, #8
 80063c2:	005b      	lsls	r3, r3, #1
 80063c4:	429a      	cmp	r2, r3
 80063c6:	d91f      	bls.n	8006408 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80063c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	4413      	add	r3, r2
 80063ce:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80063d0:	69bb      	ldr	r3, [r7, #24]
 80063d2:	f003 0307 	and.w	r3, r3, #7
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d00a      	beq.n	80063f0 <pvPortMalloc+0xf8>
	__asm volatile
 80063da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063de:	f383 8811 	msr	BASEPRI, r3
 80063e2:	f3bf 8f6f 	isb	sy
 80063e6:	f3bf 8f4f 	dsb	sy
 80063ea:	613b      	str	r3, [r7, #16]
}
 80063ec:	bf00      	nop
 80063ee:	e7fe      	b.n	80063ee <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80063f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063f2:	685a      	ldr	r2, [r3, #4]
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	1ad2      	subs	r2, r2, r3
 80063f8:	69bb      	ldr	r3, [r7, #24]
 80063fa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80063fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063fe:	687a      	ldr	r2, [r7, #4]
 8006400:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006402:	69b8      	ldr	r0, [r7, #24]
 8006404:	f000 f908 	bl	8006618 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006408:	4b1d      	ldr	r3, [pc, #116]	; (8006480 <pvPortMalloc+0x188>)
 800640a:	681a      	ldr	r2, [r3, #0]
 800640c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800640e:	685b      	ldr	r3, [r3, #4]
 8006410:	1ad3      	subs	r3, r2, r3
 8006412:	4a1b      	ldr	r2, [pc, #108]	; (8006480 <pvPortMalloc+0x188>)
 8006414:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006416:	4b1a      	ldr	r3, [pc, #104]	; (8006480 <pvPortMalloc+0x188>)
 8006418:	681a      	ldr	r2, [r3, #0]
 800641a:	4b1b      	ldr	r3, [pc, #108]	; (8006488 <pvPortMalloc+0x190>)
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	429a      	cmp	r2, r3
 8006420:	d203      	bcs.n	800642a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006422:	4b17      	ldr	r3, [pc, #92]	; (8006480 <pvPortMalloc+0x188>)
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	4a18      	ldr	r2, [pc, #96]	; (8006488 <pvPortMalloc+0x190>)
 8006428:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800642a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800642c:	685a      	ldr	r2, [r3, #4]
 800642e:	4b13      	ldr	r3, [pc, #76]	; (800647c <pvPortMalloc+0x184>)
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	431a      	orrs	r2, r3
 8006434:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006436:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006438:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800643a:	2200      	movs	r2, #0
 800643c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800643e:	4b13      	ldr	r3, [pc, #76]	; (800648c <pvPortMalloc+0x194>)
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	3301      	adds	r3, #1
 8006444:	4a11      	ldr	r2, [pc, #68]	; (800648c <pvPortMalloc+0x194>)
 8006446:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006448:	f7ff f9ec 	bl	8005824 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800644c:	69fb      	ldr	r3, [r7, #28]
 800644e:	f003 0307 	and.w	r3, r3, #7
 8006452:	2b00      	cmp	r3, #0
 8006454:	d00a      	beq.n	800646c <pvPortMalloc+0x174>
	__asm volatile
 8006456:	f04f 0350 	mov.w	r3, #80	; 0x50
 800645a:	f383 8811 	msr	BASEPRI, r3
 800645e:	f3bf 8f6f 	isb	sy
 8006462:	f3bf 8f4f 	dsb	sy
 8006466:	60fb      	str	r3, [r7, #12]
}
 8006468:	bf00      	nop
 800646a:	e7fe      	b.n	800646a <pvPortMalloc+0x172>
	return pvReturn;
 800646c:	69fb      	ldr	r3, [r7, #28]
}
 800646e:	4618      	mov	r0, r3
 8006470:	3728      	adds	r7, #40	; 0x28
 8006472:	46bd      	mov	sp, r7
 8006474:	bd80      	pop	{r7, pc}
 8006476:	bf00      	nop
 8006478:	200041dc 	.word	0x200041dc
 800647c:	200041f0 	.word	0x200041f0
 8006480:	200041e0 	.word	0x200041e0
 8006484:	200041d4 	.word	0x200041d4
 8006488:	200041e4 	.word	0x200041e4
 800648c:	200041e8 	.word	0x200041e8

08006490 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006490:	b580      	push	{r7, lr}
 8006492:	b086      	sub	sp, #24
 8006494:	af00      	add	r7, sp, #0
 8006496:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d04d      	beq.n	800653e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80064a2:	2308      	movs	r3, #8
 80064a4:	425b      	negs	r3, r3
 80064a6:	697a      	ldr	r2, [r7, #20]
 80064a8:	4413      	add	r3, r2
 80064aa:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80064ac:	697b      	ldr	r3, [r7, #20]
 80064ae:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80064b0:	693b      	ldr	r3, [r7, #16]
 80064b2:	685a      	ldr	r2, [r3, #4]
 80064b4:	4b24      	ldr	r3, [pc, #144]	; (8006548 <vPortFree+0xb8>)
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	4013      	ands	r3, r2
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d10a      	bne.n	80064d4 <vPortFree+0x44>
	__asm volatile
 80064be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064c2:	f383 8811 	msr	BASEPRI, r3
 80064c6:	f3bf 8f6f 	isb	sy
 80064ca:	f3bf 8f4f 	dsb	sy
 80064ce:	60fb      	str	r3, [r7, #12]
}
 80064d0:	bf00      	nop
 80064d2:	e7fe      	b.n	80064d2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80064d4:	693b      	ldr	r3, [r7, #16]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d00a      	beq.n	80064f2 <vPortFree+0x62>
	__asm volatile
 80064dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064e0:	f383 8811 	msr	BASEPRI, r3
 80064e4:	f3bf 8f6f 	isb	sy
 80064e8:	f3bf 8f4f 	dsb	sy
 80064ec:	60bb      	str	r3, [r7, #8]
}
 80064ee:	bf00      	nop
 80064f0:	e7fe      	b.n	80064f0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80064f2:	693b      	ldr	r3, [r7, #16]
 80064f4:	685a      	ldr	r2, [r3, #4]
 80064f6:	4b14      	ldr	r3, [pc, #80]	; (8006548 <vPortFree+0xb8>)
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	4013      	ands	r3, r2
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d01e      	beq.n	800653e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006500:	693b      	ldr	r3, [r7, #16]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	2b00      	cmp	r3, #0
 8006506:	d11a      	bne.n	800653e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006508:	693b      	ldr	r3, [r7, #16]
 800650a:	685a      	ldr	r2, [r3, #4]
 800650c:	4b0e      	ldr	r3, [pc, #56]	; (8006548 <vPortFree+0xb8>)
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	43db      	mvns	r3, r3
 8006512:	401a      	ands	r2, r3
 8006514:	693b      	ldr	r3, [r7, #16]
 8006516:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006518:	f7ff f976 	bl	8005808 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800651c:	693b      	ldr	r3, [r7, #16]
 800651e:	685a      	ldr	r2, [r3, #4]
 8006520:	4b0a      	ldr	r3, [pc, #40]	; (800654c <vPortFree+0xbc>)
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	4413      	add	r3, r2
 8006526:	4a09      	ldr	r2, [pc, #36]	; (800654c <vPortFree+0xbc>)
 8006528:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800652a:	6938      	ldr	r0, [r7, #16]
 800652c:	f000 f874 	bl	8006618 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8006530:	4b07      	ldr	r3, [pc, #28]	; (8006550 <vPortFree+0xc0>)
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	3301      	adds	r3, #1
 8006536:	4a06      	ldr	r2, [pc, #24]	; (8006550 <vPortFree+0xc0>)
 8006538:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800653a:	f7ff f973 	bl	8005824 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800653e:	bf00      	nop
 8006540:	3718      	adds	r7, #24
 8006542:	46bd      	mov	sp, r7
 8006544:	bd80      	pop	{r7, pc}
 8006546:	bf00      	nop
 8006548:	200041f0 	.word	0x200041f0
 800654c:	200041e0 	.word	0x200041e0
 8006550:	200041ec 	.word	0x200041ec

08006554 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006554:	b480      	push	{r7}
 8006556:	b085      	sub	sp, #20
 8006558:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800655a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800655e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006560:	4b27      	ldr	r3, [pc, #156]	; (8006600 <prvHeapInit+0xac>)
 8006562:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	f003 0307 	and.w	r3, r3, #7
 800656a:	2b00      	cmp	r3, #0
 800656c:	d00c      	beq.n	8006588 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	3307      	adds	r3, #7
 8006572:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	f023 0307 	bic.w	r3, r3, #7
 800657a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800657c:	68ba      	ldr	r2, [r7, #8]
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	1ad3      	subs	r3, r2, r3
 8006582:	4a1f      	ldr	r2, [pc, #124]	; (8006600 <prvHeapInit+0xac>)
 8006584:	4413      	add	r3, r2
 8006586:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800658c:	4a1d      	ldr	r2, [pc, #116]	; (8006604 <prvHeapInit+0xb0>)
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006592:	4b1c      	ldr	r3, [pc, #112]	; (8006604 <prvHeapInit+0xb0>)
 8006594:	2200      	movs	r2, #0
 8006596:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	68ba      	ldr	r2, [r7, #8]
 800659c:	4413      	add	r3, r2
 800659e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80065a0:	2208      	movs	r2, #8
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	1a9b      	subs	r3, r3, r2
 80065a6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	f023 0307 	bic.w	r3, r3, #7
 80065ae:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	4a15      	ldr	r2, [pc, #84]	; (8006608 <prvHeapInit+0xb4>)
 80065b4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80065b6:	4b14      	ldr	r3, [pc, #80]	; (8006608 <prvHeapInit+0xb4>)
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	2200      	movs	r2, #0
 80065bc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80065be:	4b12      	ldr	r3, [pc, #72]	; (8006608 <prvHeapInit+0xb4>)
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	2200      	movs	r2, #0
 80065c4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80065ca:	683b      	ldr	r3, [r7, #0]
 80065cc:	68fa      	ldr	r2, [r7, #12]
 80065ce:	1ad2      	subs	r2, r2, r3
 80065d0:	683b      	ldr	r3, [r7, #0]
 80065d2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80065d4:	4b0c      	ldr	r3, [pc, #48]	; (8006608 <prvHeapInit+0xb4>)
 80065d6:	681a      	ldr	r2, [r3, #0]
 80065d8:	683b      	ldr	r3, [r7, #0]
 80065da:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80065dc:	683b      	ldr	r3, [r7, #0]
 80065de:	685b      	ldr	r3, [r3, #4]
 80065e0:	4a0a      	ldr	r2, [pc, #40]	; (800660c <prvHeapInit+0xb8>)
 80065e2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80065e4:	683b      	ldr	r3, [r7, #0]
 80065e6:	685b      	ldr	r3, [r3, #4]
 80065e8:	4a09      	ldr	r2, [pc, #36]	; (8006610 <prvHeapInit+0xbc>)
 80065ea:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80065ec:	4b09      	ldr	r3, [pc, #36]	; (8006614 <prvHeapInit+0xc0>)
 80065ee:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80065f2:	601a      	str	r2, [r3, #0]
}
 80065f4:	bf00      	nop
 80065f6:	3714      	adds	r7, #20
 80065f8:	46bd      	mov	sp, r7
 80065fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065fe:	4770      	bx	lr
 8006600:	200005d4 	.word	0x200005d4
 8006604:	200041d4 	.word	0x200041d4
 8006608:	200041dc 	.word	0x200041dc
 800660c:	200041e4 	.word	0x200041e4
 8006610:	200041e0 	.word	0x200041e0
 8006614:	200041f0 	.word	0x200041f0

08006618 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006618:	b480      	push	{r7}
 800661a:	b085      	sub	sp, #20
 800661c:	af00      	add	r7, sp, #0
 800661e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006620:	4b28      	ldr	r3, [pc, #160]	; (80066c4 <prvInsertBlockIntoFreeList+0xac>)
 8006622:	60fb      	str	r3, [r7, #12]
 8006624:	e002      	b.n	800662c <prvInsertBlockIntoFreeList+0x14>
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	60fb      	str	r3, [r7, #12]
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	687a      	ldr	r2, [r7, #4]
 8006632:	429a      	cmp	r2, r3
 8006634:	d8f7      	bhi.n	8006626 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	685b      	ldr	r3, [r3, #4]
 800663e:	68ba      	ldr	r2, [r7, #8]
 8006640:	4413      	add	r3, r2
 8006642:	687a      	ldr	r2, [r7, #4]
 8006644:	429a      	cmp	r2, r3
 8006646:	d108      	bne.n	800665a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	685a      	ldr	r2, [r3, #4]
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	685b      	ldr	r3, [r3, #4]
 8006650:	441a      	add	r2, r3
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	685b      	ldr	r3, [r3, #4]
 8006662:	68ba      	ldr	r2, [r7, #8]
 8006664:	441a      	add	r2, r3
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	429a      	cmp	r2, r3
 800666c:	d118      	bne.n	80066a0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	681a      	ldr	r2, [r3, #0]
 8006672:	4b15      	ldr	r3, [pc, #84]	; (80066c8 <prvInsertBlockIntoFreeList+0xb0>)
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	429a      	cmp	r2, r3
 8006678:	d00d      	beq.n	8006696 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	685a      	ldr	r2, [r3, #4]
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	685b      	ldr	r3, [r3, #4]
 8006684:	441a      	add	r2, r3
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	681a      	ldr	r2, [r3, #0]
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	601a      	str	r2, [r3, #0]
 8006694:	e008      	b.n	80066a8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006696:	4b0c      	ldr	r3, [pc, #48]	; (80066c8 <prvInsertBlockIntoFreeList+0xb0>)
 8006698:	681a      	ldr	r2, [r3, #0]
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	601a      	str	r2, [r3, #0]
 800669e:	e003      	b.n	80066a8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	681a      	ldr	r2, [r3, #0]
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80066a8:	68fa      	ldr	r2, [r7, #12]
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	429a      	cmp	r2, r3
 80066ae:	d002      	beq.n	80066b6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	687a      	ldr	r2, [r7, #4]
 80066b4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80066b6:	bf00      	nop
 80066b8:	3714      	adds	r7, #20
 80066ba:	46bd      	mov	sp, r7
 80066bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066c0:	4770      	bx	lr
 80066c2:	bf00      	nop
 80066c4:	200041d4 	.word	0x200041d4
 80066c8:	200041dc 	.word	0x200041dc

080066cc <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80066cc:	b580      	push	{r7, lr}
 80066ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80066d0:	2200      	movs	r2, #0
 80066d2:	4912      	ldr	r1, [pc, #72]	; (800671c <MX_USB_DEVICE_Init+0x50>)
 80066d4:	4812      	ldr	r0, [pc, #72]	; (8006720 <MX_USB_DEVICE_Init+0x54>)
 80066d6:	f000 facd 	bl	8006c74 <USBD_Init>
 80066da:	4603      	mov	r3, r0
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d001      	beq.n	80066e4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80066e0:	f7fa f916 	bl	8000910 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CUSTOM_HID) != USBD_OK)
 80066e4:	490f      	ldr	r1, [pc, #60]	; (8006724 <MX_USB_DEVICE_Init+0x58>)
 80066e6:	480e      	ldr	r0, [pc, #56]	; (8006720 <MX_USB_DEVICE_Init+0x54>)
 80066e8:	f000 fb02 	bl	8006cf0 <USBD_RegisterClass>
 80066ec:	4603      	mov	r3, r0
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d001      	beq.n	80066f6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80066f2:	f7fa f90d 	bl	8000910 <Error_Handler>
  }
  if (USBD_CUSTOM_HID_RegisterInterface(&hUsbDeviceFS, &USBD_CustomHID_fops_FS) != USBD_OK)
 80066f6:	490c      	ldr	r1, [pc, #48]	; (8006728 <MX_USB_DEVICE_Init+0x5c>)
 80066f8:	4809      	ldr	r0, [pc, #36]	; (8006720 <MX_USB_DEVICE_Init+0x54>)
 80066fa:	f001 fe81 	bl	8008400 <USBD_CUSTOM_HID_RegisterInterface>
 80066fe:	4603      	mov	r3, r0
 8006700:	2b00      	cmp	r3, #0
 8006702:	d001      	beq.n	8006708 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8006704:	f7fa f904 	bl	8000910 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8006708:	4805      	ldr	r0, [pc, #20]	; (8006720 <MX_USB_DEVICE_Init+0x54>)
 800670a:	f000 fb25 	bl	8006d58 <USBD_Start>
 800670e:	4603      	mov	r3, r0
 8006710:	2b00      	cmp	r3, #0
 8006712:	d001      	beq.n	8006718 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8006714:	f7fa f8fc 	bl	8000910 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8006718:	bf00      	nop
 800671a:	bd80      	pop	{r7, pc}
 800671c:	20000118 	.word	0x20000118
 8006720:	200046f8 	.word	0x200046f8
 8006724:	20000044 	.word	0x20000044
 8006728:	20000034 	.word	0x20000034

0800672c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800672c:	b580      	push	{r7, lr}
 800672e:	b082      	sub	sp, #8
 8006730:	af00      	add	r7, sp, #0
 8006732:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8006740:	4619      	mov	r1, r3
 8006742:	4610      	mov	r0, r2
 8006744:	f000 fb53 	bl	8006dee <USBD_LL_SetupStage>
}
 8006748:	bf00      	nop
 800674a:	3708      	adds	r7, #8
 800674c:	46bd      	mov	sp, r7
 800674e:	bd80      	pop	{r7, pc}

08006750 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006750:	b580      	push	{r7, lr}
 8006752:	b082      	sub	sp, #8
 8006754:	af00      	add	r7, sp, #0
 8006756:	6078      	str	r0, [r7, #4]
 8006758:	460b      	mov	r3, r1
 800675a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8006762:	78fa      	ldrb	r2, [r7, #3]
 8006764:	6879      	ldr	r1, [r7, #4]
 8006766:	4613      	mov	r3, r2
 8006768:	00db      	lsls	r3, r3, #3
 800676a:	1a9b      	subs	r3, r3, r2
 800676c:	009b      	lsls	r3, r3, #2
 800676e:	440b      	add	r3, r1
 8006770:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8006774:	681a      	ldr	r2, [r3, #0]
 8006776:	78fb      	ldrb	r3, [r7, #3]
 8006778:	4619      	mov	r1, r3
 800677a:	f000 fb8d 	bl	8006e98 <USBD_LL_DataOutStage>
}
 800677e:	bf00      	nop
 8006780:	3708      	adds	r7, #8
 8006782:	46bd      	mov	sp, r7
 8006784:	bd80      	pop	{r7, pc}

08006786 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006786:	b580      	push	{r7, lr}
 8006788:	b082      	sub	sp, #8
 800678a:	af00      	add	r7, sp, #0
 800678c:	6078      	str	r0, [r7, #4]
 800678e:	460b      	mov	r3, r1
 8006790:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8006798:	78fa      	ldrb	r2, [r7, #3]
 800679a:	6879      	ldr	r1, [r7, #4]
 800679c:	4613      	mov	r3, r2
 800679e:	00db      	lsls	r3, r3, #3
 80067a0:	1a9b      	subs	r3, r3, r2
 80067a2:	009b      	lsls	r3, r3, #2
 80067a4:	440b      	add	r3, r1
 80067a6:	3348      	adds	r3, #72	; 0x48
 80067a8:	681a      	ldr	r2, [r3, #0]
 80067aa:	78fb      	ldrb	r3, [r7, #3]
 80067ac:	4619      	mov	r1, r3
 80067ae:	f000 fbd6 	bl	8006f5e <USBD_LL_DataInStage>
}
 80067b2:	bf00      	nop
 80067b4:	3708      	adds	r7, #8
 80067b6:	46bd      	mov	sp, r7
 80067b8:	bd80      	pop	{r7, pc}

080067ba <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80067ba:	b580      	push	{r7, lr}
 80067bc:	b082      	sub	sp, #8
 80067be:	af00      	add	r7, sp, #0
 80067c0:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80067c8:	4618      	mov	r0, r3
 80067ca:	f000 fcea 	bl	80071a2 <USBD_LL_SOF>
}
 80067ce:	bf00      	nop
 80067d0:	3708      	adds	r7, #8
 80067d2:	46bd      	mov	sp, r7
 80067d4:	bd80      	pop	{r7, pc}

080067d6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80067d6:	b580      	push	{r7, lr}
 80067d8:	b084      	sub	sp, #16
 80067da:	af00      	add	r7, sp, #0
 80067dc:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80067de:	2301      	movs	r3, #1
 80067e0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	68db      	ldr	r3, [r3, #12]
 80067e6:	2b02      	cmp	r3, #2
 80067e8:	d001      	beq.n	80067ee <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 80067ea:	f7fa f891 	bl	8000910 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80067f4:	7bfa      	ldrb	r2, [r7, #15]
 80067f6:	4611      	mov	r1, r2
 80067f8:	4618      	mov	r0, r3
 80067fa:	f000 fc94 	bl	8007126 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006804:	4618      	mov	r0, r3
 8006806:	f000 fc40 	bl	800708a <USBD_LL_Reset>
}
 800680a:	bf00      	nop
 800680c:	3710      	adds	r7, #16
 800680e:	46bd      	mov	sp, r7
 8006810:	bd80      	pop	{r7, pc}
	...

08006814 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006814:	b580      	push	{r7, lr}
 8006816:	b082      	sub	sp, #8
 8006818:	af00      	add	r7, sp, #0
 800681a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006822:	4618      	mov	r0, r3
 8006824:	f000 fc8f 	bl	8007146 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	687a      	ldr	r2, [r7, #4]
 8006834:	6812      	ldr	r2, [r2, #0]
 8006836:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800683a:	f043 0301 	orr.w	r3, r3, #1
 800683e:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	6a1b      	ldr	r3, [r3, #32]
 8006844:	2b00      	cmp	r3, #0
 8006846:	d005      	beq.n	8006854 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8006848:	4b04      	ldr	r3, [pc, #16]	; (800685c <HAL_PCD_SuspendCallback+0x48>)
 800684a:	691b      	ldr	r3, [r3, #16]
 800684c:	4a03      	ldr	r2, [pc, #12]	; (800685c <HAL_PCD_SuspendCallback+0x48>)
 800684e:	f043 0306 	orr.w	r3, r3, #6
 8006852:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8006854:	bf00      	nop
 8006856:	3708      	adds	r7, #8
 8006858:	46bd      	mov	sp, r7
 800685a:	bd80      	pop	{r7, pc}
 800685c:	e000ed00 	.word	0xe000ed00

08006860 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006860:	b580      	push	{r7, lr}
 8006862:	b082      	sub	sp, #8
 8006864:	af00      	add	r7, sp, #0
 8006866:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800686e:	4618      	mov	r0, r3
 8006870:	f000 fc7f 	bl	8007172 <USBD_LL_Resume>
}
 8006874:	bf00      	nop
 8006876:	3708      	adds	r7, #8
 8006878:	46bd      	mov	sp, r7
 800687a:	bd80      	pop	{r7, pc}

0800687c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800687c:	b580      	push	{r7, lr}
 800687e:	b082      	sub	sp, #8
 8006880:	af00      	add	r7, sp, #0
 8006882:	6078      	str	r0, [r7, #4]
 8006884:	460b      	mov	r3, r1
 8006886:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800688e:	78fa      	ldrb	r2, [r7, #3]
 8006890:	4611      	mov	r1, r2
 8006892:	4618      	mov	r0, r3
 8006894:	f000 fccd 	bl	8007232 <USBD_LL_IsoOUTIncomplete>
}
 8006898:	bf00      	nop
 800689a:	3708      	adds	r7, #8
 800689c:	46bd      	mov	sp, r7
 800689e:	bd80      	pop	{r7, pc}

080068a0 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80068a0:	b580      	push	{r7, lr}
 80068a2:	b082      	sub	sp, #8
 80068a4:	af00      	add	r7, sp, #0
 80068a6:	6078      	str	r0, [r7, #4]
 80068a8:	460b      	mov	r3, r1
 80068aa:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80068b2:	78fa      	ldrb	r2, [r7, #3]
 80068b4:	4611      	mov	r1, r2
 80068b6:	4618      	mov	r0, r3
 80068b8:	f000 fc95 	bl	80071e6 <USBD_LL_IsoINIncomplete>
}
 80068bc:	bf00      	nop
 80068be:	3708      	adds	r7, #8
 80068c0:	46bd      	mov	sp, r7
 80068c2:	bd80      	pop	{r7, pc}

080068c4 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80068c4:	b580      	push	{r7, lr}
 80068c6:	b082      	sub	sp, #8
 80068c8:	af00      	add	r7, sp, #0
 80068ca:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80068d2:	4618      	mov	r0, r3
 80068d4:	f000 fcd3 	bl	800727e <USBD_LL_DevConnected>
}
 80068d8:	bf00      	nop
 80068da:	3708      	adds	r7, #8
 80068dc:	46bd      	mov	sp, r7
 80068de:	bd80      	pop	{r7, pc}

080068e0 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80068e0:	b580      	push	{r7, lr}
 80068e2:	b082      	sub	sp, #8
 80068e4:	af00      	add	r7, sp, #0
 80068e6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80068ee:	4618      	mov	r0, r3
 80068f0:	f000 fcd0 	bl	8007294 <USBD_LL_DevDisconnected>
}
 80068f4:	bf00      	nop
 80068f6:	3708      	adds	r7, #8
 80068f8:	46bd      	mov	sp, r7
 80068fa:	bd80      	pop	{r7, pc}

080068fc <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80068fc:	b580      	push	{r7, lr}
 80068fe:	b082      	sub	sp, #8
 8006900:	af00      	add	r7, sp, #0
 8006902:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	781b      	ldrb	r3, [r3, #0]
 8006908:	2b00      	cmp	r3, #0
 800690a:	d13c      	bne.n	8006986 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800690c:	4a20      	ldr	r2, [pc, #128]	; (8006990 <USBD_LL_Init+0x94>)
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	4a1e      	ldr	r2, [pc, #120]	; (8006990 <USBD_LL_Init+0x94>)
 8006918:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800691c:	4b1c      	ldr	r3, [pc, #112]	; (8006990 <USBD_LL_Init+0x94>)
 800691e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8006922:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8006924:	4b1a      	ldr	r3, [pc, #104]	; (8006990 <USBD_LL_Init+0x94>)
 8006926:	2204      	movs	r2, #4
 8006928:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800692a:	4b19      	ldr	r3, [pc, #100]	; (8006990 <USBD_LL_Init+0x94>)
 800692c:	2202      	movs	r2, #2
 800692e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8006930:	4b17      	ldr	r3, [pc, #92]	; (8006990 <USBD_LL_Init+0x94>)
 8006932:	2200      	movs	r2, #0
 8006934:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8006936:	4b16      	ldr	r3, [pc, #88]	; (8006990 <USBD_LL_Init+0x94>)
 8006938:	2202      	movs	r2, #2
 800693a:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800693c:	4b14      	ldr	r3, [pc, #80]	; (8006990 <USBD_LL_Init+0x94>)
 800693e:	2200      	movs	r2, #0
 8006940:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8006942:	4b13      	ldr	r3, [pc, #76]	; (8006990 <USBD_LL_Init+0x94>)
 8006944:	2200      	movs	r2, #0
 8006946:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8006948:	4b11      	ldr	r3, [pc, #68]	; (8006990 <USBD_LL_Init+0x94>)
 800694a:	2200      	movs	r2, #0
 800694c:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800694e:	4b10      	ldr	r3, [pc, #64]	; (8006990 <USBD_LL_Init+0x94>)
 8006950:	2200      	movs	r2, #0
 8006952:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8006954:	4b0e      	ldr	r3, [pc, #56]	; (8006990 <USBD_LL_Init+0x94>)
 8006956:	2200      	movs	r2, #0
 8006958:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800695a:	480d      	ldr	r0, [pc, #52]	; (8006990 <USBD_LL_Init+0x94>)
 800695c:	f7fa fcc0 	bl	80012e0 <HAL_PCD_Init>
 8006960:	4603      	mov	r3, r0
 8006962:	2b00      	cmp	r3, #0
 8006964:	d001      	beq.n	800696a <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8006966:	f7f9 ffd3 	bl	8000910 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800696a:	2180      	movs	r1, #128	; 0x80
 800696c:	4808      	ldr	r0, [pc, #32]	; (8006990 <USBD_LL_Init+0x94>)
 800696e:	f7fb fe06 	bl	800257e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8006972:	2240      	movs	r2, #64	; 0x40
 8006974:	2100      	movs	r1, #0
 8006976:	4806      	ldr	r0, [pc, #24]	; (8006990 <USBD_LL_Init+0x94>)
 8006978:	f7fb fdba 	bl	80024f0 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800697c:	2280      	movs	r2, #128	; 0x80
 800697e:	2101      	movs	r1, #1
 8006980:	4803      	ldr	r0, [pc, #12]	; (8006990 <USBD_LL_Init+0x94>)
 8006982:	f7fb fdb5 	bl	80024f0 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8006986:	2300      	movs	r3, #0
}
 8006988:	4618      	mov	r0, r3
 800698a:	3708      	adds	r7, #8
 800698c:	46bd      	mov	sp, r7
 800698e:	bd80      	pop	{r7, pc}
 8006990:	20004260 	.word	0x20004260

08006994 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8006994:	b580      	push	{r7, lr}
 8006996:	b084      	sub	sp, #16
 8006998:	af00      	add	r7, sp, #0
 800699a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800699c:	2300      	movs	r3, #0
 800699e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80069a0:	2300      	movs	r3, #0
 80069a2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80069aa:	4618      	mov	r0, r3
 80069ac:	f7fa fdb5 	bl	800151a <HAL_PCD_Start>
 80069b0:	4603      	mov	r3, r0
 80069b2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80069b4:	7bfb      	ldrb	r3, [r7, #15]
 80069b6:	4618      	mov	r0, r3
 80069b8:	f000 f930 	bl	8006c1c <USBD_Get_USB_Status>
 80069bc:	4603      	mov	r3, r0
 80069be:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80069c0:	7bbb      	ldrb	r3, [r7, #14]
}
 80069c2:	4618      	mov	r0, r3
 80069c4:	3710      	adds	r7, #16
 80069c6:	46bd      	mov	sp, r7
 80069c8:	bd80      	pop	{r7, pc}

080069ca <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80069ca:	b580      	push	{r7, lr}
 80069cc:	b084      	sub	sp, #16
 80069ce:	af00      	add	r7, sp, #0
 80069d0:	6078      	str	r0, [r7, #4]
 80069d2:	4608      	mov	r0, r1
 80069d4:	4611      	mov	r1, r2
 80069d6:	461a      	mov	r2, r3
 80069d8:	4603      	mov	r3, r0
 80069da:	70fb      	strb	r3, [r7, #3]
 80069dc:	460b      	mov	r3, r1
 80069de:	70bb      	strb	r3, [r7, #2]
 80069e0:	4613      	mov	r3, r2
 80069e2:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80069e4:	2300      	movs	r3, #0
 80069e6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80069e8:	2300      	movs	r3, #0
 80069ea:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80069f2:	78bb      	ldrb	r3, [r7, #2]
 80069f4:	883a      	ldrh	r2, [r7, #0]
 80069f6:	78f9      	ldrb	r1, [r7, #3]
 80069f8:	f7fb f999 	bl	8001d2e <HAL_PCD_EP_Open>
 80069fc:	4603      	mov	r3, r0
 80069fe:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006a00:	7bfb      	ldrb	r3, [r7, #15]
 8006a02:	4618      	mov	r0, r3
 8006a04:	f000 f90a 	bl	8006c1c <USBD_Get_USB_Status>
 8006a08:	4603      	mov	r3, r0
 8006a0a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006a0c:	7bbb      	ldrb	r3, [r7, #14]
}
 8006a0e:	4618      	mov	r0, r3
 8006a10:	3710      	adds	r7, #16
 8006a12:	46bd      	mov	sp, r7
 8006a14:	bd80      	pop	{r7, pc}

08006a16 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006a16:	b580      	push	{r7, lr}
 8006a18:	b084      	sub	sp, #16
 8006a1a:	af00      	add	r7, sp, #0
 8006a1c:	6078      	str	r0, [r7, #4]
 8006a1e:	460b      	mov	r3, r1
 8006a20:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006a22:	2300      	movs	r3, #0
 8006a24:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006a26:	2300      	movs	r3, #0
 8006a28:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8006a30:	78fa      	ldrb	r2, [r7, #3]
 8006a32:	4611      	mov	r1, r2
 8006a34:	4618      	mov	r0, r3
 8006a36:	f7fb f9e2 	bl	8001dfe <HAL_PCD_EP_Close>
 8006a3a:	4603      	mov	r3, r0
 8006a3c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006a3e:	7bfb      	ldrb	r3, [r7, #15]
 8006a40:	4618      	mov	r0, r3
 8006a42:	f000 f8eb 	bl	8006c1c <USBD_Get_USB_Status>
 8006a46:	4603      	mov	r3, r0
 8006a48:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006a4a:	7bbb      	ldrb	r3, [r7, #14]
}
 8006a4c:	4618      	mov	r0, r3
 8006a4e:	3710      	adds	r7, #16
 8006a50:	46bd      	mov	sp, r7
 8006a52:	bd80      	pop	{r7, pc}

08006a54 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006a54:	b580      	push	{r7, lr}
 8006a56:	b084      	sub	sp, #16
 8006a58:	af00      	add	r7, sp, #0
 8006a5a:	6078      	str	r0, [r7, #4]
 8006a5c:	460b      	mov	r3, r1
 8006a5e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006a60:	2300      	movs	r3, #0
 8006a62:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006a64:	2300      	movs	r3, #0
 8006a66:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8006a6e:	78fa      	ldrb	r2, [r7, #3]
 8006a70:	4611      	mov	r1, r2
 8006a72:	4618      	mov	r0, r3
 8006a74:	f7fb faa2 	bl	8001fbc <HAL_PCD_EP_SetStall>
 8006a78:	4603      	mov	r3, r0
 8006a7a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006a7c:	7bfb      	ldrb	r3, [r7, #15]
 8006a7e:	4618      	mov	r0, r3
 8006a80:	f000 f8cc 	bl	8006c1c <USBD_Get_USB_Status>
 8006a84:	4603      	mov	r3, r0
 8006a86:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006a88:	7bbb      	ldrb	r3, [r7, #14]
}
 8006a8a:	4618      	mov	r0, r3
 8006a8c:	3710      	adds	r7, #16
 8006a8e:	46bd      	mov	sp, r7
 8006a90:	bd80      	pop	{r7, pc}

08006a92 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006a92:	b580      	push	{r7, lr}
 8006a94:	b084      	sub	sp, #16
 8006a96:	af00      	add	r7, sp, #0
 8006a98:	6078      	str	r0, [r7, #4]
 8006a9a:	460b      	mov	r3, r1
 8006a9c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006a9e:	2300      	movs	r3, #0
 8006aa0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006aa2:	2300      	movs	r3, #0
 8006aa4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8006aac:	78fa      	ldrb	r2, [r7, #3]
 8006aae:	4611      	mov	r1, r2
 8006ab0:	4618      	mov	r0, r3
 8006ab2:	f7fb fae7 	bl	8002084 <HAL_PCD_EP_ClrStall>
 8006ab6:	4603      	mov	r3, r0
 8006ab8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006aba:	7bfb      	ldrb	r3, [r7, #15]
 8006abc:	4618      	mov	r0, r3
 8006abe:	f000 f8ad 	bl	8006c1c <USBD_Get_USB_Status>
 8006ac2:	4603      	mov	r3, r0
 8006ac4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006ac6:	7bbb      	ldrb	r3, [r7, #14]
}
 8006ac8:	4618      	mov	r0, r3
 8006aca:	3710      	adds	r7, #16
 8006acc:	46bd      	mov	sp, r7
 8006ace:	bd80      	pop	{r7, pc}

08006ad0 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006ad0:	b480      	push	{r7}
 8006ad2:	b085      	sub	sp, #20
 8006ad4:	af00      	add	r7, sp, #0
 8006ad6:	6078      	str	r0, [r7, #4]
 8006ad8:	460b      	mov	r3, r1
 8006ada:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8006ae2:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8006ae4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	da0b      	bge.n	8006b04 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8006aec:	78fb      	ldrb	r3, [r7, #3]
 8006aee:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006af2:	68f9      	ldr	r1, [r7, #12]
 8006af4:	4613      	mov	r3, r2
 8006af6:	00db      	lsls	r3, r3, #3
 8006af8:	1a9b      	subs	r3, r3, r2
 8006afa:	009b      	lsls	r3, r3, #2
 8006afc:	440b      	add	r3, r1
 8006afe:	333e      	adds	r3, #62	; 0x3e
 8006b00:	781b      	ldrb	r3, [r3, #0]
 8006b02:	e00b      	b.n	8006b1c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8006b04:	78fb      	ldrb	r3, [r7, #3]
 8006b06:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006b0a:	68f9      	ldr	r1, [r7, #12]
 8006b0c:	4613      	mov	r3, r2
 8006b0e:	00db      	lsls	r3, r3, #3
 8006b10:	1a9b      	subs	r3, r3, r2
 8006b12:	009b      	lsls	r3, r3, #2
 8006b14:	440b      	add	r3, r1
 8006b16:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8006b1a:	781b      	ldrb	r3, [r3, #0]
  }
}
 8006b1c:	4618      	mov	r0, r3
 8006b1e:	3714      	adds	r7, #20
 8006b20:	46bd      	mov	sp, r7
 8006b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b26:	4770      	bx	lr

08006b28 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8006b28:	b580      	push	{r7, lr}
 8006b2a:	b084      	sub	sp, #16
 8006b2c:	af00      	add	r7, sp, #0
 8006b2e:	6078      	str	r0, [r7, #4]
 8006b30:	460b      	mov	r3, r1
 8006b32:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006b34:	2300      	movs	r3, #0
 8006b36:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006b38:	2300      	movs	r3, #0
 8006b3a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8006b42:	78fa      	ldrb	r2, [r7, #3]
 8006b44:	4611      	mov	r1, r2
 8006b46:	4618      	mov	r0, r3
 8006b48:	f7fb f8cc 	bl	8001ce4 <HAL_PCD_SetAddress>
 8006b4c:	4603      	mov	r3, r0
 8006b4e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006b50:	7bfb      	ldrb	r3, [r7, #15]
 8006b52:	4618      	mov	r0, r3
 8006b54:	f000 f862 	bl	8006c1c <USBD_Get_USB_Status>
 8006b58:	4603      	mov	r3, r0
 8006b5a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006b5c:	7bbb      	ldrb	r3, [r7, #14]
}
 8006b5e:	4618      	mov	r0, r3
 8006b60:	3710      	adds	r7, #16
 8006b62:	46bd      	mov	sp, r7
 8006b64:	bd80      	pop	{r7, pc}

08006b66 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8006b66:	b580      	push	{r7, lr}
 8006b68:	b086      	sub	sp, #24
 8006b6a:	af00      	add	r7, sp, #0
 8006b6c:	60f8      	str	r0, [r7, #12]
 8006b6e:	607a      	str	r2, [r7, #4]
 8006b70:	603b      	str	r3, [r7, #0]
 8006b72:	460b      	mov	r3, r1
 8006b74:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006b76:	2300      	movs	r3, #0
 8006b78:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006b7a:	2300      	movs	r3, #0
 8006b7c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8006b84:	7af9      	ldrb	r1, [r7, #11]
 8006b86:	683b      	ldr	r3, [r7, #0]
 8006b88:	687a      	ldr	r2, [r7, #4]
 8006b8a:	f7fb f9cd 	bl	8001f28 <HAL_PCD_EP_Transmit>
 8006b8e:	4603      	mov	r3, r0
 8006b90:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006b92:	7dfb      	ldrb	r3, [r7, #23]
 8006b94:	4618      	mov	r0, r3
 8006b96:	f000 f841 	bl	8006c1c <USBD_Get_USB_Status>
 8006b9a:	4603      	mov	r3, r0
 8006b9c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8006b9e:	7dbb      	ldrb	r3, [r7, #22]
}
 8006ba0:	4618      	mov	r0, r3
 8006ba2:	3718      	adds	r7, #24
 8006ba4:	46bd      	mov	sp, r7
 8006ba6:	bd80      	pop	{r7, pc}

08006ba8 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8006ba8:	b580      	push	{r7, lr}
 8006baa:	b086      	sub	sp, #24
 8006bac:	af00      	add	r7, sp, #0
 8006bae:	60f8      	str	r0, [r7, #12]
 8006bb0:	607a      	str	r2, [r7, #4]
 8006bb2:	603b      	str	r3, [r7, #0]
 8006bb4:	460b      	mov	r3, r1
 8006bb6:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006bb8:	2300      	movs	r3, #0
 8006bba:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006bbc:	2300      	movs	r3, #0
 8006bbe:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8006bc6:	7af9      	ldrb	r1, [r7, #11]
 8006bc8:	683b      	ldr	r3, [r7, #0]
 8006bca:	687a      	ldr	r2, [r7, #4]
 8006bcc:	f7fb f961 	bl	8001e92 <HAL_PCD_EP_Receive>
 8006bd0:	4603      	mov	r3, r0
 8006bd2:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006bd4:	7dfb      	ldrb	r3, [r7, #23]
 8006bd6:	4618      	mov	r0, r3
 8006bd8:	f000 f820 	bl	8006c1c <USBD_Get_USB_Status>
 8006bdc:	4603      	mov	r3, r0
 8006bde:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8006be0:	7dbb      	ldrb	r3, [r7, #22]
}
 8006be2:	4618      	mov	r0, r3
 8006be4:	3718      	adds	r7, #24
 8006be6:	46bd      	mov	sp, r7
 8006be8:	bd80      	pop	{r7, pc}
	...

08006bec <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8006bec:	b480      	push	{r7}
 8006bee:	b083      	sub	sp, #12
 8006bf0:	af00      	add	r7, sp, #0
 8006bf2:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CUSTOM_HID_HandleTypeDef)/4+1)];/* On 32-bit boundary */
  return mem;
 8006bf4:	4b03      	ldr	r3, [pc, #12]	; (8006c04 <USBD_static_malloc+0x18>)
}
 8006bf6:	4618      	mov	r0, r3
 8006bf8:	370c      	adds	r7, #12
 8006bfa:	46bd      	mov	sp, r7
 8006bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c00:	4770      	bx	lr
 8006c02:	bf00      	nop
 8006c04:	200041f4 	.word	0x200041f4

08006c08 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8006c08:	b480      	push	{r7}
 8006c0a:	b083      	sub	sp, #12
 8006c0c:	af00      	add	r7, sp, #0
 8006c0e:	6078      	str	r0, [r7, #4]

}
 8006c10:	bf00      	nop
 8006c12:	370c      	adds	r7, #12
 8006c14:	46bd      	mov	sp, r7
 8006c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c1a:	4770      	bx	lr

08006c1c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8006c1c:	b480      	push	{r7}
 8006c1e:	b085      	sub	sp, #20
 8006c20:	af00      	add	r7, sp, #0
 8006c22:	4603      	mov	r3, r0
 8006c24:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006c26:	2300      	movs	r3, #0
 8006c28:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8006c2a:	79fb      	ldrb	r3, [r7, #7]
 8006c2c:	2b03      	cmp	r3, #3
 8006c2e:	d817      	bhi.n	8006c60 <USBD_Get_USB_Status+0x44>
 8006c30:	a201      	add	r2, pc, #4	; (adr r2, 8006c38 <USBD_Get_USB_Status+0x1c>)
 8006c32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c36:	bf00      	nop
 8006c38:	08006c49 	.word	0x08006c49
 8006c3c:	08006c4f 	.word	0x08006c4f
 8006c40:	08006c55 	.word	0x08006c55
 8006c44:	08006c5b 	.word	0x08006c5b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8006c48:	2300      	movs	r3, #0
 8006c4a:	73fb      	strb	r3, [r7, #15]
    break;
 8006c4c:	e00b      	b.n	8006c66 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8006c4e:	2303      	movs	r3, #3
 8006c50:	73fb      	strb	r3, [r7, #15]
    break;
 8006c52:	e008      	b.n	8006c66 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8006c54:	2301      	movs	r3, #1
 8006c56:	73fb      	strb	r3, [r7, #15]
    break;
 8006c58:	e005      	b.n	8006c66 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8006c5a:	2303      	movs	r3, #3
 8006c5c:	73fb      	strb	r3, [r7, #15]
    break;
 8006c5e:	e002      	b.n	8006c66 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8006c60:	2303      	movs	r3, #3
 8006c62:	73fb      	strb	r3, [r7, #15]
    break;
 8006c64:	bf00      	nop
  }
  return usb_status;
 8006c66:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c68:	4618      	mov	r0, r3
 8006c6a:	3714      	adds	r7, #20
 8006c6c:	46bd      	mov	sp, r7
 8006c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c72:	4770      	bx	lr

08006c74 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006c74:	b580      	push	{r7, lr}
 8006c76:	b086      	sub	sp, #24
 8006c78:	af00      	add	r7, sp, #0
 8006c7a:	60f8      	str	r0, [r7, #12]
 8006c7c:	60b9      	str	r1, [r7, #8]
 8006c7e:	4613      	mov	r3, r2
 8006c80:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d10a      	bne.n	8006c9e <USBD_Init+0x2a>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
 8006c88:	4817      	ldr	r0, [pc, #92]	; (8006ce8 <USBD_Init+0x74>)
 8006c8a:	f001 fef3 	bl	8008a74 <iprintf>
 8006c8e:	4817      	ldr	r0, [pc, #92]	; (8006cec <USBD_Init+0x78>)
 8006c90:	f001 fef0 	bl	8008a74 <iprintf>
 8006c94:	200a      	movs	r0, #10
 8006c96:	f001 ff05 	bl	8008aa4 <putchar>
#endif
    return USBD_FAIL;
 8006c9a:	2303      	movs	r3, #3
 8006c9c:	e01f      	b.n	8006cde <USBD_Init+0x6a>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	2200      	movs	r2, #0
 8006ca2:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	2200      	movs	r2, #0
 8006caa:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	2200      	movs	r2, #0
 8006cb2:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8006cb6:	68bb      	ldr	r3, [r7, #8]
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d003      	beq.n	8006cc4 <USBD_Init+0x50>
  {
    pdev->pDesc = pdesc;
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	68ba      	ldr	r2, [r7, #8]
 8006cc0:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	2201      	movs	r2, #1
 8006cc8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	79fa      	ldrb	r2, [r7, #7]
 8006cd0:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8006cd2:	68f8      	ldr	r0, [r7, #12]
 8006cd4:	f7ff fe12 	bl	80068fc <USBD_LL_Init>
 8006cd8:	4603      	mov	r3, r0
 8006cda:	75fb      	strb	r3, [r7, #23]

  return ret;
 8006cdc:	7dfb      	ldrb	r3, [r7, #23]
}
 8006cde:	4618      	mov	r0, r3
 8006ce0:	3718      	adds	r7, #24
 8006ce2:	46bd      	mov	sp, r7
 8006ce4:	bd80      	pop	{r7, pc}
 8006ce6:	bf00      	nop
 8006ce8:	08009c34 	.word	0x08009c34
 8006cec:	08009c3c 	.word	0x08009c3c

08006cf0 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006cf0:	b580      	push	{r7, lr}
 8006cf2:	b084      	sub	sp, #16
 8006cf4:	af00      	add	r7, sp, #0
 8006cf6:	6078      	str	r0, [r7, #4]
 8006cf8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006cfa:	2300      	movs	r3, #0
 8006cfc:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8006cfe:	683b      	ldr	r3, [r7, #0]
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d10a      	bne.n	8006d1a <USBD_RegisterClass+0x2a>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
 8006d04:	4812      	ldr	r0, [pc, #72]	; (8006d50 <USBD_RegisterClass+0x60>)
 8006d06:	f001 feb5 	bl	8008a74 <iprintf>
 8006d0a:	4812      	ldr	r0, [pc, #72]	; (8006d54 <USBD_RegisterClass+0x64>)
 8006d0c:	f001 feb2 	bl	8008a74 <iprintf>
 8006d10:	200a      	movs	r0, #10
 8006d12:	f001 fec7 	bl	8008aa4 <putchar>
#endif
    return USBD_FAIL;
 8006d16:	2303      	movs	r3, #3
 8006d18:	e016      	b.n	8006d48 <USBD_RegisterClass+0x58>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	683a      	ldr	r2, [r7, #0]
 8006d1e:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006d28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d00b      	beq.n	8006d46 <USBD_RegisterClass+0x56>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006d34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d36:	f107 020e 	add.w	r2, r7, #14
 8006d3a:	4610      	mov	r0, r2
 8006d3c:	4798      	blx	r3
 8006d3e:	4602      	mov	r2, r0
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8006d46:	2300      	movs	r3, #0
}
 8006d48:	4618      	mov	r0, r3
 8006d4a:	3710      	adds	r7, #16
 8006d4c:	46bd      	mov	sp, r7
 8006d4e:	bd80      	pop	{r7, pc}
 8006d50:	08009c34 	.word	0x08009c34
 8006d54:	08009c54 	.word	0x08009c54

08006d58 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006d58:	b580      	push	{r7, lr}
 8006d5a:	b082      	sub	sp, #8
 8006d5c:	af00      	add	r7, sp, #0
 8006d5e:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8006d60:	6878      	ldr	r0, [r7, #4]
 8006d62:	f7ff fe17 	bl	8006994 <USBD_LL_Start>
 8006d66:	4603      	mov	r3, r0
}
 8006d68:	4618      	mov	r0, r3
 8006d6a:	3708      	adds	r7, #8
 8006d6c:	46bd      	mov	sp, r7
 8006d6e:	bd80      	pop	{r7, pc}

08006d70 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8006d70:	b480      	push	{r7}
 8006d72:	b083      	sub	sp, #12
 8006d74:	af00      	add	r7, sp, #0
 8006d76:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006d78:	2300      	movs	r3, #0
}
 8006d7a:	4618      	mov	r0, r3
 8006d7c:	370c      	adds	r7, #12
 8006d7e:	46bd      	mov	sp, r7
 8006d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d84:	4770      	bx	lr

08006d86 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006d86:	b580      	push	{r7, lr}
 8006d88:	b084      	sub	sp, #16
 8006d8a:	af00      	add	r7, sp, #0
 8006d8c:	6078      	str	r0, [r7, #4]
 8006d8e:	460b      	mov	r3, r1
 8006d90:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8006d92:	2303      	movs	r3, #3
 8006d94:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d009      	beq.n	8006db4 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	78fa      	ldrb	r2, [r7, #3]
 8006daa:	4611      	mov	r1, r2
 8006dac:	6878      	ldr	r0, [r7, #4]
 8006dae:	4798      	blx	r3
 8006db0:	4603      	mov	r3, r0
 8006db2:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8006db4:	7bfb      	ldrb	r3, [r7, #15]
}
 8006db6:	4618      	mov	r0, r3
 8006db8:	3710      	adds	r7, #16
 8006dba:	46bd      	mov	sp, r7
 8006dbc:	bd80      	pop	{r7, pc}

08006dbe <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006dbe:	b580      	push	{r7, lr}
 8006dc0:	b082      	sub	sp, #8
 8006dc2:	af00      	add	r7, sp, #0
 8006dc4:	6078      	str	r0, [r7, #4]
 8006dc6:	460b      	mov	r3, r1
 8006dc8:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d007      	beq.n	8006de4 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006dda:	685b      	ldr	r3, [r3, #4]
 8006ddc:	78fa      	ldrb	r2, [r7, #3]
 8006dde:	4611      	mov	r1, r2
 8006de0:	6878      	ldr	r0, [r7, #4]
 8006de2:	4798      	blx	r3
  }

  return USBD_OK;
 8006de4:	2300      	movs	r3, #0
}
 8006de6:	4618      	mov	r0, r3
 8006de8:	3708      	adds	r7, #8
 8006dea:	46bd      	mov	sp, r7
 8006dec:	bd80      	pop	{r7, pc}

08006dee <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8006dee:	b580      	push	{r7, lr}
 8006df0:	b084      	sub	sp, #16
 8006df2:	af00      	add	r7, sp, #0
 8006df4:	6078      	str	r0, [r7, #4]
 8006df6:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006dfe:	6839      	ldr	r1, [r7, #0]
 8006e00:	4618      	mov	r0, r3
 8006e02:	f000 ff8f 	bl	8007d24 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	2201      	movs	r2, #1
 8006e0a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8006e14:	461a      	mov	r2, r3
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006e22:	f003 031f 	and.w	r3, r3, #31
 8006e26:	2b02      	cmp	r3, #2
 8006e28:	d01a      	beq.n	8006e60 <USBD_LL_SetupStage+0x72>
 8006e2a:	2b02      	cmp	r3, #2
 8006e2c:	d822      	bhi.n	8006e74 <USBD_LL_SetupStage+0x86>
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d002      	beq.n	8006e38 <USBD_LL_SetupStage+0x4a>
 8006e32:	2b01      	cmp	r3, #1
 8006e34:	d00a      	beq.n	8006e4c <USBD_LL_SetupStage+0x5e>
 8006e36:	e01d      	b.n	8006e74 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006e3e:	4619      	mov	r1, r3
 8006e40:	6878      	ldr	r0, [r7, #4]
 8006e42:	f000 fa61 	bl	8007308 <USBD_StdDevReq>
 8006e46:	4603      	mov	r3, r0
 8006e48:	73fb      	strb	r3, [r7, #15]
      break;
 8006e4a:	e020      	b.n	8006e8e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006e52:	4619      	mov	r1, r3
 8006e54:	6878      	ldr	r0, [r7, #4]
 8006e56:	f000 fac5 	bl	80073e4 <USBD_StdItfReq>
 8006e5a:	4603      	mov	r3, r0
 8006e5c:	73fb      	strb	r3, [r7, #15]
      break;
 8006e5e:	e016      	b.n	8006e8e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006e66:	4619      	mov	r1, r3
 8006e68:	6878      	ldr	r0, [r7, #4]
 8006e6a:	f000 fb04 	bl	8007476 <USBD_StdEPReq>
 8006e6e:	4603      	mov	r3, r0
 8006e70:	73fb      	strb	r3, [r7, #15]
      break;
 8006e72:	e00c      	b.n	8006e8e <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006e7a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006e7e:	b2db      	uxtb	r3, r3
 8006e80:	4619      	mov	r1, r3
 8006e82:	6878      	ldr	r0, [r7, #4]
 8006e84:	f7ff fde6 	bl	8006a54 <USBD_LL_StallEP>
 8006e88:	4603      	mov	r3, r0
 8006e8a:	73fb      	strb	r3, [r7, #15]
      break;
 8006e8c:	bf00      	nop
  }

  return ret;
 8006e8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e90:	4618      	mov	r0, r3
 8006e92:	3710      	adds	r7, #16
 8006e94:	46bd      	mov	sp, r7
 8006e96:	bd80      	pop	{r7, pc}

08006e98 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006e98:	b580      	push	{r7, lr}
 8006e9a:	b086      	sub	sp, #24
 8006e9c:	af00      	add	r7, sp, #0
 8006e9e:	60f8      	str	r0, [r7, #12]
 8006ea0:	460b      	mov	r3, r1
 8006ea2:	607a      	str	r2, [r7, #4]
 8006ea4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8006ea6:	7afb      	ldrb	r3, [r7, #11]
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d138      	bne.n	8006f1e <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8006eb2:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006eba:	2b03      	cmp	r3, #3
 8006ebc:	d14a      	bne.n	8006f54 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8006ebe:	693b      	ldr	r3, [r7, #16]
 8006ec0:	689a      	ldr	r2, [r3, #8]
 8006ec2:	693b      	ldr	r3, [r7, #16]
 8006ec4:	68db      	ldr	r3, [r3, #12]
 8006ec6:	429a      	cmp	r2, r3
 8006ec8:	d913      	bls.n	8006ef2 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8006eca:	693b      	ldr	r3, [r7, #16]
 8006ecc:	689a      	ldr	r2, [r3, #8]
 8006ece:	693b      	ldr	r3, [r7, #16]
 8006ed0:	68db      	ldr	r3, [r3, #12]
 8006ed2:	1ad2      	subs	r2, r2, r3
 8006ed4:	693b      	ldr	r3, [r7, #16]
 8006ed6:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8006ed8:	693b      	ldr	r3, [r7, #16]
 8006eda:	68da      	ldr	r2, [r3, #12]
 8006edc:	693b      	ldr	r3, [r7, #16]
 8006ede:	689b      	ldr	r3, [r3, #8]
 8006ee0:	4293      	cmp	r3, r2
 8006ee2:	bf28      	it	cs
 8006ee4:	4613      	movcs	r3, r2
 8006ee6:	461a      	mov	r2, r3
 8006ee8:	6879      	ldr	r1, [r7, #4]
 8006eea:	68f8      	ldr	r0, [r7, #12]
 8006eec:	f001 fbf6 	bl	80086dc <USBD_CtlContinueRx>
 8006ef0:	e030      	b.n	8006f54 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006ef8:	b2db      	uxtb	r3, r3
 8006efa:	2b03      	cmp	r3, #3
 8006efc:	d10b      	bne.n	8006f16 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f04:	691b      	ldr	r3, [r3, #16]
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d005      	beq.n	8006f16 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f10:	691b      	ldr	r3, [r3, #16]
 8006f12:	68f8      	ldr	r0, [r7, #12]
 8006f14:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8006f16:	68f8      	ldr	r0, [r7, #12]
 8006f18:	f001 fbf1 	bl	80086fe <USBD_CtlSendStatus>
 8006f1c:	e01a      	b.n	8006f54 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006f24:	b2db      	uxtb	r3, r3
 8006f26:	2b03      	cmp	r3, #3
 8006f28:	d114      	bne.n	8006f54 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f30:	699b      	ldr	r3, [r3, #24]
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d00e      	beq.n	8006f54 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f3c:	699b      	ldr	r3, [r3, #24]
 8006f3e:	7afa      	ldrb	r2, [r7, #11]
 8006f40:	4611      	mov	r1, r2
 8006f42:	68f8      	ldr	r0, [r7, #12]
 8006f44:	4798      	blx	r3
 8006f46:	4603      	mov	r3, r0
 8006f48:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8006f4a:	7dfb      	ldrb	r3, [r7, #23]
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d001      	beq.n	8006f54 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 8006f50:	7dfb      	ldrb	r3, [r7, #23]
 8006f52:	e000      	b.n	8006f56 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 8006f54:	2300      	movs	r3, #0
}
 8006f56:	4618      	mov	r0, r3
 8006f58:	3718      	adds	r7, #24
 8006f5a:	46bd      	mov	sp, r7
 8006f5c:	bd80      	pop	{r7, pc}

08006f5e <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8006f5e:	b580      	push	{r7, lr}
 8006f60:	b086      	sub	sp, #24
 8006f62:	af00      	add	r7, sp, #0
 8006f64:	60f8      	str	r0, [r7, #12]
 8006f66:	460b      	mov	r3, r1
 8006f68:	607a      	str	r2, [r7, #4]
 8006f6a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8006f6c:	7afb      	ldrb	r3, [r7, #11]
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d16b      	bne.n	800704a <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	3314      	adds	r3, #20
 8006f76:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006f7e:	2b02      	cmp	r3, #2
 8006f80:	d156      	bne.n	8007030 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 8006f82:	693b      	ldr	r3, [r7, #16]
 8006f84:	689a      	ldr	r2, [r3, #8]
 8006f86:	693b      	ldr	r3, [r7, #16]
 8006f88:	68db      	ldr	r3, [r3, #12]
 8006f8a:	429a      	cmp	r2, r3
 8006f8c:	d914      	bls.n	8006fb8 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8006f8e:	693b      	ldr	r3, [r7, #16]
 8006f90:	689a      	ldr	r2, [r3, #8]
 8006f92:	693b      	ldr	r3, [r7, #16]
 8006f94:	68db      	ldr	r3, [r3, #12]
 8006f96:	1ad2      	subs	r2, r2, r3
 8006f98:	693b      	ldr	r3, [r7, #16]
 8006f9a:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8006f9c:	693b      	ldr	r3, [r7, #16]
 8006f9e:	689b      	ldr	r3, [r3, #8]
 8006fa0:	461a      	mov	r2, r3
 8006fa2:	6879      	ldr	r1, [r7, #4]
 8006fa4:	68f8      	ldr	r0, [r7, #12]
 8006fa6:	f001 fb6b 	bl	8008680 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006faa:	2300      	movs	r3, #0
 8006fac:	2200      	movs	r2, #0
 8006fae:	2100      	movs	r1, #0
 8006fb0:	68f8      	ldr	r0, [r7, #12]
 8006fb2:	f7ff fdf9 	bl	8006ba8 <USBD_LL_PrepareReceive>
 8006fb6:	e03b      	b.n	8007030 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8006fb8:	693b      	ldr	r3, [r7, #16]
 8006fba:	68da      	ldr	r2, [r3, #12]
 8006fbc:	693b      	ldr	r3, [r7, #16]
 8006fbe:	689b      	ldr	r3, [r3, #8]
 8006fc0:	429a      	cmp	r2, r3
 8006fc2:	d11c      	bne.n	8006ffe <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8006fc4:	693b      	ldr	r3, [r7, #16]
 8006fc6:	685a      	ldr	r2, [r3, #4]
 8006fc8:	693b      	ldr	r3, [r7, #16]
 8006fca:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8006fcc:	429a      	cmp	r2, r3
 8006fce:	d316      	bcc.n	8006ffe <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8006fd0:	693b      	ldr	r3, [r7, #16]
 8006fd2:	685a      	ldr	r2, [r3, #4]
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8006fda:	429a      	cmp	r2, r3
 8006fdc:	d20f      	bcs.n	8006ffe <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8006fde:	2200      	movs	r2, #0
 8006fe0:	2100      	movs	r1, #0
 8006fe2:	68f8      	ldr	r0, [r7, #12]
 8006fe4:	f001 fb4c 	bl	8008680 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	2200      	movs	r2, #0
 8006fec:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006ff0:	2300      	movs	r3, #0
 8006ff2:	2200      	movs	r2, #0
 8006ff4:	2100      	movs	r1, #0
 8006ff6:	68f8      	ldr	r0, [r7, #12]
 8006ff8:	f7ff fdd6 	bl	8006ba8 <USBD_LL_PrepareReceive>
 8006ffc:	e018      	b.n	8007030 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007004:	b2db      	uxtb	r3, r3
 8007006:	2b03      	cmp	r3, #3
 8007008:	d10b      	bne.n	8007022 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007010:	68db      	ldr	r3, [r3, #12]
 8007012:	2b00      	cmp	r3, #0
 8007014:	d005      	beq.n	8007022 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800701c:	68db      	ldr	r3, [r3, #12]
 800701e:	68f8      	ldr	r0, [r7, #12]
 8007020:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8007022:	2180      	movs	r1, #128	; 0x80
 8007024:	68f8      	ldr	r0, [r7, #12]
 8007026:	f7ff fd15 	bl	8006a54 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800702a:	68f8      	ldr	r0, [r7, #12]
 800702c:	f001 fb7a 	bl	8008724 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8007036:	2b01      	cmp	r3, #1
 8007038:	d122      	bne.n	8007080 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800703a:	68f8      	ldr	r0, [r7, #12]
 800703c:	f7ff fe98 	bl	8006d70 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	2200      	movs	r2, #0
 8007044:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8007048:	e01a      	b.n	8007080 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007050:	b2db      	uxtb	r3, r3
 8007052:	2b03      	cmp	r3, #3
 8007054:	d114      	bne.n	8007080 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800705c:	695b      	ldr	r3, [r3, #20]
 800705e:	2b00      	cmp	r3, #0
 8007060:	d00e      	beq.n	8007080 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007068:	695b      	ldr	r3, [r3, #20]
 800706a:	7afa      	ldrb	r2, [r7, #11]
 800706c:	4611      	mov	r1, r2
 800706e:	68f8      	ldr	r0, [r7, #12]
 8007070:	4798      	blx	r3
 8007072:	4603      	mov	r3, r0
 8007074:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8007076:	7dfb      	ldrb	r3, [r7, #23]
 8007078:	2b00      	cmp	r3, #0
 800707a:	d001      	beq.n	8007080 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 800707c:	7dfb      	ldrb	r3, [r7, #23]
 800707e:	e000      	b.n	8007082 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 8007080:	2300      	movs	r3, #0
}
 8007082:	4618      	mov	r0, r3
 8007084:	3718      	adds	r7, #24
 8007086:	46bd      	mov	sp, r7
 8007088:	bd80      	pop	{r7, pc}

0800708a <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800708a:	b580      	push	{r7, lr}
 800708c:	b082      	sub	sp, #8
 800708e:	af00      	add	r7, sp, #0
 8007090:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	2201      	movs	r2, #1
 8007096:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	2200      	movs	r2, #0
 800709e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	2200      	movs	r2, #0
 80070a6:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	2200      	movs	r2, #0
 80070ac:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d101      	bne.n	80070be <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 80070ba:	2303      	movs	r3, #3
 80070bc:	e02f      	b.n	800711e <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d00f      	beq.n	80070e8 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80070ce:	685b      	ldr	r3, [r3, #4]
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d009      	beq.n	80070e8 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80070da:	685b      	ldr	r3, [r3, #4]
 80070dc:	687a      	ldr	r2, [r7, #4]
 80070de:	6852      	ldr	r2, [r2, #4]
 80070e0:	b2d2      	uxtb	r2, r2
 80070e2:	4611      	mov	r1, r2
 80070e4:	6878      	ldr	r0, [r7, #4]
 80070e6:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80070e8:	2340      	movs	r3, #64	; 0x40
 80070ea:	2200      	movs	r2, #0
 80070ec:	2100      	movs	r1, #0
 80070ee:	6878      	ldr	r0, [r7, #4]
 80070f0:	f7ff fc6b 	bl	80069ca <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	2201      	movs	r2, #1
 80070f8:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	2240      	movs	r2, #64	; 0x40
 8007100:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007104:	2340      	movs	r3, #64	; 0x40
 8007106:	2200      	movs	r2, #0
 8007108:	2180      	movs	r1, #128	; 0x80
 800710a:	6878      	ldr	r0, [r7, #4]
 800710c:	f7ff fc5d 	bl	80069ca <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	2201      	movs	r2, #1
 8007114:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	2240      	movs	r2, #64	; 0x40
 800711a:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800711c:	2300      	movs	r3, #0
}
 800711e:	4618      	mov	r0, r3
 8007120:	3708      	adds	r7, #8
 8007122:	46bd      	mov	sp, r7
 8007124:	bd80      	pop	{r7, pc}

08007126 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8007126:	b480      	push	{r7}
 8007128:	b083      	sub	sp, #12
 800712a:	af00      	add	r7, sp, #0
 800712c:	6078      	str	r0, [r7, #4]
 800712e:	460b      	mov	r3, r1
 8007130:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	78fa      	ldrb	r2, [r7, #3]
 8007136:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8007138:	2300      	movs	r3, #0
}
 800713a:	4618      	mov	r0, r3
 800713c:	370c      	adds	r7, #12
 800713e:	46bd      	mov	sp, r7
 8007140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007144:	4770      	bx	lr

08007146 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8007146:	b480      	push	{r7}
 8007148:	b083      	sub	sp, #12
 800714a:	af00      	add	r7, sp, #0
 800714c:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007154:	b2da      	uxtb	r2, r3
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	2204      	movs	r2, #4
 8007160:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8007164:	2300      	movs	r3, #0
}
 8007166:	4618      	mov	r0, r3
 8007168:	370c      	adds	r7, #12
 800716a:	46bd      	mov	sp, r7
 800716c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007170:	4770      	bx	lr

08007172 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8007172:	b480      	push	{r7}
 8007174:	b083      	sub	sp, #12
 8007176:	af00      	add	r7, sp, #0
 8007178:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007180:	b2db      	uxtb	r3, r3
 8007182:	2b04      	cmp	r3, #4
 8007184:	d106      	bne.n	8007194 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800718c:	b2da      	uxtb	r2, r3
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8007194:	2300      	movs	r3, #0
}
 8007196:	4618      	mov	r0, r3
 8007198:	370c      	adds	r7, #12
 800719a:	46bd      	mov	sp, r7
 800719c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071a0:	4770      	bx	lr

080071a2 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80071a2:	b580      	push	{r7, lr}
 80071a4:	b082      	sub	sp, #8
 80071a6:	af00      	add	r7, sp, #0
 80071a8:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d101      	bne.n	80071b8 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 80071b4:	2303      	movs	r3, #3
 80071b6:	e012      	b.n	80071de <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80071be:	b2db      	uxtb	r3, r3
 80071c0:	2b03      	cmp	r3, #3
 80071c2:	d10b      	bne.n	80071dc <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80071ca:	69db      	ldr	r3, [r3, #28]
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d005      	beq.n	80071dc <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80071d6:	69db      	ldr	r3, [r3, #28]
 80071d8:	6878      	ldr	r0, [r7, #4]
 80071da:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80071dc:	2300      	movs	r3, #0
}
 80071de:	4618      	mov	r0, r3
 80071e0:	3708      	adds	r7, #8
 80071e2:	46bd      	mov	sp, r7
 80071e4:	bd80      	pop	{r7, pc}

080071e6 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80071e6:	b580      	push	{r7, lr}
 80071e8:	b082      	sub	sp, #8
 80071ea:	af00      	add	r7, sp, #0
 80071ec:	6078      	str	r0, [r7, #4]
 80071ee:	460b      	mov	r3, r1
 80071f0:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d101      	bne.n	8007200 <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 80071fc:	2303      	movs	r3, #3
 80071fe:	e014      	b.n	800722a <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007206:	b2db      	uxtb	r3, r3
 8007208:	2b03      	cmp	r3, #3
 800720a:	d10d      	bne.n	8007228 <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007212:	6a1b      	ldr	r3, [r3, #32]
 8007214:	2b00      	cmp	r3, #0
 8007216:	d007      	beq.n	8007228 <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800721e:	6a1b      	ldr	r3, [r3, #32]
 8007220:	78fa      	ldrb	r2, [r7, #3]
 8007222:	4611      	mov	r1, r2
 8007224:	6878      	ldr	r0, [r7, #4]
 8007226:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007228:	2300      	movs	r3, #0
}
 800722a:	4618      	mov	r0, r3
 800722c:	3708      	adds	r7, #8
 800722e:	46bd      	mov	sp, r7
 8007230:	bd80      	pop	{r7, pc}

08007232 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8007232:	b580      	push	{r7, lr}
 8007234:	b082      	sub	sp, #8
 8007236:	af00      	add	r7, sp, #0
 8007238:	6078      	str	r0, [r7, #4]
 800723a:	460b      	mov	r3, r1
 800723c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007244:	2b00      	cmp	r3, #0
 8007246:	d101      	bne.n	800724c <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 8007248:	2303      	movs	r3, #3
 800724a:	e014      	b.n	8007276 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007252:	b2db      	uxtb	r3, r3
 8007254:	2b03      	cmp	r3, #3
 8007256:	d10d      	bne.n	8007274 <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800725e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007260:	2b00      	cmp	r3, #0
 8007262:	d007      	beq.n	8007274 <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800726a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800726c:	78fa      	ldrb	r2, [r7, #3]
 800726e:	4611      	mov	r1, r2
 8007270:	6878      	ldr	r0, [r7, #4]
 8007272:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007274:	2300      	movs	r3, #0
}
 8007276:	4618      	mov	r0, r3
 8007278:	3708      	adds	r7, #8
 800727a:	46bd      	mov	sp, r7
 800727c:	bd80      	pop	{r7, pc}

0800727e <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800727e:	b480      	push	{r7}
 8007280:	b083      	sub	sp, #12
 8007282:	af00      	add	r7, sp, #0
 8007284:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007286:	2300      	movs	r3, #0
}
 8007288:	4618      	mov	r0, r3
 800728a:	370c      	adds	r7, #12
 800728c:	46bd      	mov	sp, r7
 800728e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007292:	4770      	bx	lr

08007294 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8007294:	b580      	push	{r7, lr}
 8007296:	b082      	sub	sp, #8
 8007298:	af00      	add	r7, sp, #0
 800729a:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	2201      	movs	r2, #1
 80072a0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d009      	beq.n	80072c2 <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80072b4:	685b      	ldr	r3, [r3, #4]
 80072b6:	687a      	ldr	r2, [r7, #4]
 80072b8:	6852      	ldr	r2, [r2, #4]
 80072ba:	b2d2      	uxtb	r2, r2
 80072bc:	4611      	mov	r1, r2
 80072be:	6878      	ldr	r0, [r7, #4]
 80072c0:	4798      	blx	r3
  }

  return USBD_OK;
 80072c2:	2300      	movs	r3, #0
}
 80072c4:	4618      	mov	r0, r3
 80072c6:	3708      	adds	r7, #8
 80072c8:	46bd      	mov	sp, r7
 80072ca:	bd80      	pop	{r7, pc}

080072cc <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80072cc:	b480      	push	{r7}
 80072ce:	b087      	sub	sp, #28
 80072d0:	af00      	add	r7, sp, #0
 80072d2:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80072d8:	697b      	ldr	r3, [r7, #20]
 80072da:	781b      	ldrb	r3, [r3, #0]
 80072dc:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80072de:	697b      	ldr	r3, [r7, #20]
 80072e0:	3301      	adds	r3, #1
 80072e2:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80072e4:	697b      	ldr	r3, [r7, #20]
 80072e6:	781b      	ldrb	r3, [r3, #0]
 80072e8:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80072ea:	8a3b      	ldrh	r3, [r7, #16]
 80072ec:	021b      	lsls	r3, r3, #8
 80072ee:	b21a      	sxth	r2, r3
 80072f0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80072f4:	4313      	orrs	r3, r2
 80072f6:	b21b      	sxth	r3, r3
 80072f8:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80072fa:	89fb      	ldrh	r3, [r7, #14]
}
 80072fc:	4618      	mov	r0, r3
 80072fe:	371c      	adds	r7, #28
 8007300:	46bd      	mov	sp, r7
 8007302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007306:	4770      	bx	lr

08007308 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007308:	b580      	push	{r7, lr}
 800730a:	b084      	sub	sp, #16
 800730c:	af00      	add	r7, sp, #0
 800730e:	6078      	str	r0, [r7, #4]
 8007310:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007312:	2300      	movs	r3, #0
 8007314:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007316:	683b      	ldr	r3, [r7, #0]
 8007318:	781b      	ldrb	r3, [r3, #0]
 800731a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800731e:	2b40      	cmp	r3, #64	; 0x40
 8007320:	d005      	beq.n	800732e <USBD_StdDevReq+0x26>
 8007322:	2b40      	cmp	r3, #64	; 0x40
 8007324:	d853      	bhi.n	80073ce <USBD_StdDevReq+0xc6>
 8007326:	2b00      	cmp	r3, #0
 8007328:	d00b      	beq.n	8007342 <USBD_StdDevReq+0x3a>
 800732a:	2b20      	cmp	r3, #32
 800732c:	d14f      	bne.n	80073ce <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007334:	689b      	ldr	r3, [r3, #8]
 8007336:	6839      	ldr	r1, [r7, #0]
 8007338:	6878      	ldr	r0, [r7, #4]
 800733a:	4798      	blx	r3
 800733c:	4603      	mov	r3, r0
 800733e:	73fb      	strb	r3, [r7, #15]
      break;
 8007340:	e04a      	b.n	80073d8 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007342:	683b      	ldr	r3, [r7, #0]
 8007344:	785b      	ldrb	r3, [r3, #1]
 8007346:	2b09      	cmp	r3, #9
 8007348:	d83b      	bhi.n	80073c2 <USBD_StdDevReq+0xba>
 800734a:	a201      	add	r2, pc, #4	; (adr r2, 8007350 <USBD_StdDevReq+0x48>)
 800734c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007350:	080073a5 	.word	0x080073a5
 8007354:	080073b9 	.word	0x080073b9
 8007358:	080073c3 	.word	0x080073c3
 800735c:	080073af 	.word	0x080073af
 8007360:	080073c3 	.word	0x080073c3
 8007364:	08007383 	.word	0x08007383
 8007368:	08007379 	.word	0x08007379
 800736c:	080073c3 	.word	0x080073c3
 8007370:	0800739b 	.word	0x0800739b
 8007374:	0800738d 	.word	0x0800738d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8007378:	6839      	ldr	r1, [r7, #0]
 800737a:	6878      	ldr	r0, [r7, #4]
 800737c:	f000 f9de 	bl	800773c <USBD_GetDescriptor>
          break;
 8007380:	e024      	b.n	80073cc <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8007382:	6839      	ldr	r1, [r7, #0]
 8007384:	6878      	ldr	r0, [r7, #4]
 8007386:	f000 fb43 	bl	8007a10 <USBD_SetAddress>
          break;
 800738a:	e01f      	b.n	80073cc <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800738c:	6839      	ldr	r1, [r7, #0]
 800738e:	6878      	ldr	r0, [r7, #4]
 8007390:	f000 fb82 	bl	8007a98 <USBD_SetConfig>
 8007394:	4603      	mov	r3, r0
 8007396:	73fb      	strb	r3, [r7, #15]
          break;
 8007398:	e018      	b.n	80073cc <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800739a:	6839      	ldr	r1, [r7, #0]
 800739c:	6878      	ldr	r0, [r7, #4]
 800739e:	f000 fc21 	bl	8007be4 <USBD_GetConfig>
          break;
 80073a2:	e013      	b.n	80073cc <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80073a4:	6839      	ldr	r1, [r7, #0]
 80073a6:	6878      	ldr	r0, [r7, #4]
 80073a8:	f000 fc52 	bl	8007c50 <USBD_GetStatus>
          break;
 80073ac:	e00e      	b.n	80073cc <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80073ae:	6839      	ldr	r1, [r7, #0]
 80073b0:	6878      	ldr	r0, [r7, #4]
 80073b2:	f000 fc81 	bl	8007cb8 <USBD_SetFeature>
          break;
 80073b6:	e009      	b.n	80073cc <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80073b8:	6839      	ldr	r1, [r7, #0]
 80073ba:	6878      	ldr	r0, [r7, #4]
 80073bc:	f000 fc90 	bl	8007ce0 <USBD_ClrFeature>
          break;
 80073c0:	e004      	b.n	80073cc <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 80073c2:	6839      	ldr	r1, [r7, #0]
 80073c4:	6878      	ldr	r0, [r7, #4]
 80073c6:	f000 fce7 	bl	8007d98 <USBD_CtlError>
          break;
 80073ca:	bf00      	nop
      }
      break;
 80073cc:	e004      	b.n	80073d8 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 80073ce:	6839      	ldr	r1, [r7, #0]
 80073d0:	6878      	ldr	r0, [r7, #4]
 80073d2:	f000 fce1 	bl	8007d98 <USBD_CtlError>
      break;
 80073d6:	bf00      	nop
  }

  return ret;
 80073d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80073da:	4618      	mov	r0, r3
 80073dc:	3710      	adds	r7, #16
 80073de:	46bd      	mov	sp, r7
 80073e0:	bd80      	pop	{r7, pc}
 80073e2:	bf00      	nop

080073e4 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80073e4:	b580      	push	{r7, lr}
 80073e6:	b084      	sub	sp, #16
 80073e8:	af00      	add	r7, sp, #0
 80073ea:	6078      	str	r0, [r7, #4]
 80073ec:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80073ee:	2300      	movs	r3, #0
 80073f0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80073f2:	683b      	ldr	r3, [r7, #0]
 80073f4:	781b      	ldrb	r3, [r3, #0]
 80073f6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80073fa:	2b40      	cmp	r3, #64	; 0x40
 80073fc:	d005      	beq.n	800740a <USBD_StdItfReq+0x26>
 80073fe:	2b40      	cmp	r3, #64	; 0x40
 8007400:	d82f      	bhi.n	8007462 <USBD_StdItfReq+0x7e>
 8007402:	2b00      	cmp	r3, #0
 8007404:	d001      	beq.n	800740a <USBD_StdItfReq+0x26>
 8007406:	2b20      	cmp	r3, #32
 8007408:	d12b      	bne.n	8007462 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007410:	b2db      	uxtb	r3, r3
 8007412:	3b01      	subs	r3, #1
 8007414:	2b02      	cmp	r3, #2
 8007416:	d81d      	bhi.n	8007454 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007418:	683b      	ldr	r3, [r7, #0]
 800741a:	889b      	ldrh	r3, [r3, #4]
 800741c:	b2db      	uxtb	r3, r3
 800741e:	2b01      	cmp	r3, #1
 8007420:	d813      	bhi.n	800744a <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007428:	689b      	ldr	r3, [r3, #8]
 800742a:	6839      	ldr	r1, [r7, #0]
 800742c:	6878      	ldr	r0, [r7, #4]
 800742e:	4798      	blx	r3
 8007430:	4603      	mov	r3, r0
 8007432:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8007434:	683b      	ldr	r3, [r7, #0]
 8007436:	88db      	ldrh	r3, [r3, #6]
 8007438:	2b00      	cmp	r3, #0
 800743a:	d110      	bne.n	800745e <USBD_StdItfReq+0x7a>
 800743c:	7bfb      	ldrb	r3, [r7, #15]
 800743e:	2b00      	cmp	r3, #0
 8007440:	d10d      	bne.n	800745e <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 8007442:	6878      	ldr	r0, [r7, #4]
 8007444:	f001 f95b 	bl	80086fe <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8007448:	e009      	b.n	800745e <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 800744a:	6839      	ldr	r1, [r7, #0]
 800744c:	6878      	ldr	r0, [r7, #4]
 800744e:	f000 fca3 	bl	8007d98 <USBD_CtlError>
          break;
 8007452:	e004      	b.n	800745e <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 8007454:	6839      	ldr	r1, [r7, #0]
 8007456:	6878      	ldr	r0, [r7, #4]
 8007458:	f000 fc9e 	bl	8007d98 <USBD_CtlError>
          break;
 800745c:	e000      	b.n	8007460 <USBD_StdItfReq+0x7c>
          break;
 800745e:	bf00      	nop
      }
      break;
 8007460:	e004      	b.n	800746c <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 8007462:	6839      	ldr	r1, [r7, #0]
 8007464:	6878      	ldr	r0, [r7, #4]
 8007466:	f000 fc97 	bl	8007d98 <USBD_CtlError>
      break;
 800746a:	bf00      	nop
  }

  return ret;
 800746c:	7bfb      	ldrb	r3, [r7, #15]
}
 800746e:	4618      	mov	r0, r3
 8007470:	3710      	adds	r7, #16
 8007472:	46bd      	mov	sp, r7
 8007474:	bd80      	pop	{r7, pc}

08007476 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007476:	b580      	push	{r7, lr}
 8007478:	b084      	sub	sp, #16
 800747a:	af00      	add	r7, sp, #0
 800747c:	6078      	str	r0, [r7, #4]
 800747e:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8007480:	2300      	movs	r3, #0
 8007482:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8007484:	683b      	ldr	r3, [r7, #0]
 8007486:	889b      	ldrh	r3, [r3, #4]
 8007488:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800748a:	683b      	ldr	r3, [r7, #0]
 800748c:	781b      	ldrb	r3, [r3, #0]
 800748e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007492:	2b40      	cmp	r3, #64	; 0x40
 8007494:	d007      	beq.n	80074a6 <USBD_StdEPReq+0x30>
 8007496:	2b40      	cmp	r3, #64	; 0x40
 8007498:	f200 8145 	bhi.w	8007726 <USBD_StdEPReq+0x2b0>
 800749c:	2b00      	cmp	r3, #0
 800749e:	d00c      	beq.n	80074ba <USBD_StdEPReq+0x44>
 80074a0:	2b20      	cmp	r3, #32
 80074a2:	f040 8140 	bne.w	8007726 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80074ac:	689b      	ldr	r3, [r3, #8]
 80074ae:	6839      	ldr	r1, [r7, #0]
 80074b0:	6878      	ldr	r0, [r7, #4]
 80074b2:	4798      	blx	r3
 80074b4:	4603      	mov	r3, r0
 80074b6:	73fb      	strb	r3, [r7, #15]
      break;
 80074b8:	e13a      	b.n	8007730 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80074ba:	683b      	ldr	r3, [r7, #0]
 80074bc:	785b      	ldrb	r3, [r3, #1]
 80074be:	2b03      	cmp	r3, #3
 80074c0:	d007      	beq.n	80074d2 <USBD_StdEPReq+0x5c>
 80074c2:	2b03      	cmp	r3, #3
 80074c4:	f300 8129 	bgt.w	800771a <USBD_StdEPReq+0x2a4>
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	d07f      	beq.n	80075cc <USBD_StdEPReq+0x156>
 80074cc:	2b01      	cmp	r3, #1
 80074ce:	d03c      	beq.n	800754a <USBD_StdEPReq+0xd4>
 80074d0:	e123      	b.n	800771a <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80074d8:	b2db      	uxtb	r3, r3
 80074da:	2b02      	cmp	r3, #2
 80074dc:	d002      	beq.n	80074e4 <USBD_StdEPReq+0x6e>
 80074de:	2b03      	cmp	r3, #3
 80074e0:	d016      	beq.n	8007510 <USBD_StdEPReq+0x9a>
 80074e2:	e02c      	b.n	800753e <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80074e4:	7bbb      	ldrb	r3, [r7, #14]
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d00d      	beq.n	8007506 <USBD_StdEPReq+0x90>
 80074ea:	7bbb      	ldrb	r3, [r7, #14]
 80074ec:	2b80      	cmp	r3, #128	; 0x80
 80074ee:	d00a      	beq.n	8007506 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80074f0:	7bbb      	ldrb	r3, [r7, #14]
 80074f2:	4619      	mov	r1, r3
 80074f4:	6878      	ldr	r0, [r7, #4]
 80074f6:	f7ff faad 	bl	8006a54 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80074fa:	2180      	movs	r1, #128	; 0x80
 80074fc:	6878      	ldr	r0, [r7, #4]
 80074fe:	f7ff faa9 	bl	8006a54 <USBD_LL_StallEP>
 8007502:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007504:	e020      	b.n	8007548 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 8007506:	6839      	ldr	r1, [r7, #0]
 8007508:	6878      	ldr	r0, [r7, #4]
 800750a:	f000 fc45 	bl	8007d98 <USBD_CtlError>
              break;
 800750e:	e01b      	b.n	8007548 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007510:	683b      	ldr	r3, [r7, #0]
 8007512:	885b      	ldrh	r3, [r3, #2]
 8007514:	2b00      	cmp	r3, #0
 8007516:	d10e      	bne.n	8007536 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007518:	7bbb      	ldrb	r3, [r7, #14]
 800751a:	2b00      	cmp	r3, #0
 800751c:	d00b      	beq.n	8007536 <USBD_StdEPReq+0xc0>
 800751e:	7bbb      	ldrb	r3, [r7, #14]
 8007520:	2b80      	cmp	r3, #128	; 0x80
 8007522:	d008      	beq.n	8007536 <USBD_StdEPReq+0xc0>
 8007524:	683b      	ldr	r3, [r7, #0]
 8007526:	88db      	ldrh	r3, [r3, #6]
 8007528:	2b00      	cmp	r3, #0
 800752a:	d104      	bne.n	8007536 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800752c:	7bbb      	ldrb	r3, [r7, #14]
 800752e:	4619      	mov	r1, r3
 8007530:	6878      	ldr	r0, [r7, #4]
 8007532:	f7ff fa8f 	bl	8006a54 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8007536:	6878      	ldr	r0, [r7, #4]
 8007538:	f001 f8e1 	bl	80086fe <USBD_CtlSendStatus>

              break;
 800753c:	e004      	b.n	8007548 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 800753e:	6839      	ldr	r1, [r7, #0]
 8007540:	6878      	ldr	r0, [r7, #4]
 8007542:	f000 fc29 	bl	8007d98 <USBD_CtlError>
              break;
 8007546:	bf00      	nop
          }
          break;
 8007548:	e0ec      	b.n	8007724 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007550:	b2db      	uxtb	r3, r3
 8007552:	2b02      	cmp	r3, #2
 8007554:	d002      	beq.n	800755c <USBD_StdEPReq+0xe6>
 8007556:	2b03      	cmp	r3, #3
 8007558:	d016      	beq.n	8007588 <USBD_StdEPReq+0x112>
 800755a:	e030      	b.n	80075be <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800755c:	7bbb      	ldrb	r3, [r7, #14]
 800755e:	2b00      	cmp	r3, #0
 8007560:	d00d      	beq.n	800757e <USBD_StdEPReq+0x108>
 8007562:	7bbb      	ldrb	r3, [r7, #14]
 8007564:	2b80      	cmp	r3, #128	; 0x80
 8007566:	d00a      	beq.n	800757e <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007568:	7bbb      	ldrb	r3, [r7, #14]
 800756a:	4619      	mov	r1, r3
 800756c:	6878      	ldr	r0, [r7, #4]
 800756e:	f7ff fa71 	bl	8006a54 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007572:	2180      	movs	r1, #128	; 0x80
 8007574:	6878      	ldr	r0, [r7, #4]
 8007576:	f7ff fa6d 	bl	8006a54 <USBD_LL_StallEP>
 800757a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800757c:	e025      	b.n	80075ca <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 800757e:	6839      	ldr	r1, [r7, #0]
 8007580:	6878      	ldr	r0, [r7, #4]
 8007582:	f000 fc09 	bl	8007d98 <USBD_CtlError>
              break;
 8007586:	e020      	b.n	80075ca <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007588:	683b      	ldr	r3, [r7, #0]
 800758a:	885b      	ldrh	r3, [r3, #2]
 800758c:	2b00      	cmp	r3, #0
 800758e:	d11b      	bne.n	80075c8 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8007590:	7bbb      	ldrb	r3, [r7, #14]
 8007592:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007596:	2b00      	cmp	r3, #0
 8007598:	d004      	beq.n	80075a4 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800759a:	7bbb      	ldrb	r3, [r7, #14]
 800759c:	4619      	mov	r1, r3
 800759e:	6878      	ldr	r0, [r7, #4]
 80075a0:	f7ff fa77 	bl	8006a92 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80075a4:	6878      	ldr	r0, [r7, #4]
 80075a6:	f001 f8aa 	bl	80086fe <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80075b0:	689b      	ldr	r3, [r3, #8]
 80075b2:	6839      	ldr	r1, [r7, #0]
 80075b4:	6878      	ldr	r0, [r7, #4]
 80075b6:	4798      	blx	r3
 80075b8:	4603      	mov	r3, r0
 80075ba:	73fb      	strb	r3, [r7, #15]
              }
              break;
 80075bc:	e004      	b.n	80075c8 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 80075be:	6839      	ldr	r1, [r7, #0]
 80075c0:	6878      	ldr	r0, [r7, #4]
 80075c2:	f000 fbe9 	bl	8007d98 <USBD_CtlError>
              break;
 80075c6:	e000      	b.n	80075ca <USBD_StdEPReq+0x154>
              break;
 80075c8:	bf00      	nop
          }
          break;
 80075ca:	e0ab      	b.n	8007724 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80075d2:	b2db      	uxtb	r3, r3
 80075d4:	2b02      	cmp	r3, #2
 80075d6:	d002      	beq.n	80075de <USBD_StdEPReq+0x168>
 80075d8:	2b03      	cmp	r3, #3
 80075da:	d032      	beq.n	8007642 <USBD_StdEPReq+0x1cc>
 80075dc:	e097      	b.n	800770e <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80075de:	7bbb      	ldrb	r3, [r7, #14]
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	d007      	beq.n	80075f4 <USBD_StdEPReq+0x17e>
 80075e4:	7bbb      	ldrb	r3, [r7, #14]
 80075e6:	2b80      	cmp	r3, #128	; 0x80
 80075e8:	d004      	beq.n	80075f4 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 80075ea:	6839      	ldr	r1, [r7, #0]
 80075ec:	6878      	ldr	r0, [r7, #4]
 80075ee:	f000 fbd3 	bl	8007d98 <USBD_CtlError>
                break;
 80075f2:	e091      	b.n	8007718 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80075f4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	da0b      	bge.n	8007614 <USBD_StdEPReq+0x19e>
 80075fc:	7bbb      	ldrb	r3, [r7, #14]
 80075fe:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007602:	4613      	mov	r3, r2
 8007604:	009b      	lsls	r3, r3, #2
 8007606:	4413      	add	r3, r2
 8007608:	009b      	lsls	r3, r3, #2
 800760a:	3310      	adds	r3, #16
 800760c:	687a      	ldr	r2, [r7, #4]
 800760e:	4413      	add	r3, r2
 8007610:	3304      	adds	r3, #4
 8007612:	e00b      	b.n	800762c <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007614:	7bbb      	ldrb	r3, [r7, #14]
 8007616:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800761a:	4613      	mov	r3, r2
 800761c:	009b      	lsls	r3, r3, #2
 800761e:	4413      	add	r3, r2
 8007620:	009b      	lsls	r3, r3, #2
 8007622:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007626:	687a      	ldr	r2, [r7, #4]
 8007628:	4413      	add	r3, r2
 800762a:	3304      	adds	r3, #4
 800762c:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800762e:	68bb      	ldr	r3, [r7, #8]
 8007630:	2200      	movs	r2, #0
 8007632:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007634:	68bb      	ldr	r3, [r7, #8]
 8007636:	2202      	movs	r2, #2
 8007638:	4619      	mov	r1, r3
 800763a:	6878      	ldr	r0, [r7, #4]
 800763c:	f001 f805 	bl	800864a <USBD_CtlSendData>
              break;
 8007640:	e06a      	b.n	8007718 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8007642:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007646:	2b00      	cmp	r3, #0
 8007648:	da11      	bge.n	800766e <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800764a:	7bbb      	ldrb	r3, [r7, #14]
 800764c:	f003 020f 	and.w	r2, r3, #15
 8007650:	6879      	ldr	r1, [r7, #4]
 8007652:	4613      	mov	r3, r2
 8007654:	009b      	lsls	r3, r3, #2
 8007656:	4413      	add	r3, r2
 8007658:	009b      	lsls	r3, r3, #2
 800765a:	440b      	add	r3, r1
 800765c:	3324      	adds	r3, #36	; 0x24
 800765e:	881b      	ldrh	r3, [r3, #0]
 8007660:	2b00      	cmp	r3, #0
 8007662:	d117      	bne.n	8007694 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8007664:	6839      	ldr	r1, [r7, #0]
 8007666:	6878      	ldr	r0, [r7, #4]
 8007668:	f000 fb96 	bl	8007d98 <USBD_CtlError>
                  break;
 800766c:	e054      	b.n	8007718 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800766e:	7bbb      	ldrb	r3, [r7, #14]
 8007670:	f003 020f 	and.w	r2, r3, #15
 8007674:	6879      	ldr	r1, [r7, #4]
 8007676:	4613      	mov	r3, r2
 8007678:	009b      	lsls	r3, r3, #2
 800767a:	4413      	add	r3, r2
 800767c:	009b      	lsls	r3, r3, #2
 800767e:	440b      	add	r3, r1
 8007680:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007684:	881b      	ldrh	r3, [r3, #0]
 8007686:	2b00      	cmp	r3, #0
 8007688:	d104      	bne.n	8007694 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800768a:	6839      	ldr	r1, [r7, #0]
 800768c:	6878      	ldr	r0, [r7, #4]
 800768e:	f000 fb83 	bl	8007d98 <USBD_CtlError>
                  break;
 8007692:	e041      	b.n	8007718 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007694:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007698:	2b00      	cmp	r3, #0
 800769a:	da0b      	bge.n	80076b4 <USBD_StdEPReq+0x23e>
 800769c:	7bbb      	ldrb	r3, [r7, #14]
 800769e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80076a2:	4613      	mov	r3, r2
 80076a4:	009b      	lsls	r3, r3, #2
 80076a6:	4413      	add	r3, r2
 80076a8:	009b      	lsls	r3, r3, #2
 80076aa:	3310      	adds	r3, #16
 80076ac:	687a      	ldr	r2, [r7, #4]
 80076ae:	4413      	add	r3, r2
 80076b0:	3304      	adds	r3, #4
 80076b2:	e00b      	b.n	80076cc <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80076b4:	7bbb      	ldrb	r3, [r7, #14]
 80076b6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80076ba:	4613      	mov	r3, r2
 80076bc:	009b      	lsls	r3, r3, #2
 80076be:	4413      	add	r3, r2
 80076c0:	009b      	lsls	r3, r3, #2
 80076c2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80076c6:	687a      	ldr	r2, [r7, #4]
 80076c8:	4413      	add	r3, r2
 80076ca:	3304      	adds	r3, #4
 80076cc:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80076ce:	7bbb      	ldrb	r3, [r7, #14]
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	d002      	beq.n	80076da <USBD_StdEPReq+0x264>
 80076d4:	7bbb      	ldrb	r3, [r7, #14]
 80076d6:	2b80      	cmp	r3, #128	; 0x80
 80076d8:	d103      	bne.n	80076e2 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 80076da:	68bb      	ldr	r3, [r7, #8]
 80076dc:	2200      	movs	r2, #0
 80076de:	601a      	str	r2, [r3, #0]
 80076e0:	e00e      	b.n	8007700 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80076e2:	7bbb      	ldrb	r3, [r7, #14]
 80076e4:	4619      	mov	r1, r3
 80076e6:	6878      	ldr	r0, [r7, #4]
 80076e8:	f7ff f9f2 	bl	8006ad0 <USBD_LL_IsStallEP>
 80076ec:	4603      	mov	r3, r0
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d003      	beq.n	80076fa <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 80076f2:	68bb      	ldr	r3, [r7, #8]
 80076f4:	2201      	movs	r2, #1
 80076f6:	601a      	str	r2, [r3, #0]
 80076f8:	e002      	b.n	8007700 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 80076fa:	68bb      	ldr	r3, [r7, #8]
 80076fc:	2200      	movs	r2, #0
 80076fe:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007700:	68bb      	ldr	r3, [r7, #8]
 8007702:	2202      	movs	r2, #2
 8007704:	4619      	mov	r1, r3
 8007706:	6878      	ldr	r0, [r7, #4]
 8007708:	f000 ff9f 	bl	800864a <USBD_CtlSendData>
              break;
 800770c:	e004      	b.n	8007718 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800770e:	6839      	ldr	r1, [r7, #0]
 8007710:	6878      	ldr	r0, [r7, #4]
 8007712:	f000 fb41 	bl	8007d98 <USBD_CtlError>
              break;
 8007716:	bf00      	nop
          }
          break;
 8007718:	e004      	b.n	8007724 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 800771a:	6839      	ldr	r1, [r7, #0]
 800771c:	6878      	ldr	r0, [r7, #4]
 800771e:	f000 fb3b 	bl	8007d98 <USBD_CtlError>
          break;
 8007722:	bf00      	nop
      }
      break;
 8007724:	e004      	b.n	8007730 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 8007726:	6839      	ldr	r1, [r7, #0]
 8007728:	6878      	ldr	r0, [r7, #4]
 800772a:	f000 fb35 	bl	8007d98 <USBD_CtlError>
      break;
 800772e:	bf00      	nop
  }

  return ret;
 8007730:	7bfb      	ldrb	r3, [r7, #15]
}
 8007732:	4618      	mov	r0, r3
 8007734:	3710      	adds	r7, #16
 8007736:	46bd      	mov	sp, r7
 8007738:	bd80      	pop	{r7, pc}
	...

0800773c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800773c:	b580      	push	{r7, lr}
 800773e:	b084      	sub	sp, #16
 8007740:	af00      	add	r7, sp, #0
 8007742:	6078      	str	r0, [r7, #4]
 8007744:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007746:	2300      	movs	r3, #0
 8007748:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800774a:	2300      	movs	r3, #0
 800774c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800774e:	2300      	movs	r3, #0
 8007750:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8007752:	683b      	ldr	r3, [r7, #0]
 8007754:	885b      	ldrh	r3, [r3, #2]
 8007756:	0a1b      	lsrs	r3, r3, #8
 8007758:	b29b      	uxth	r3, r3
 800775a:	3b01      	subs	r3, #1
 800775c:	2b06      	cmp	r3, #6
 800775e:	f200 8128 	bhi.w	80079b2 <USBD_GetDescriptor+0x276>
 8007762:	a201      	add	r2, pc, #4	; (adr r2, 8007768 <USBD_GetDescriptor+0x2c>)
 8007764:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007768:	08007785 	.word	0x08007785
 800776c:	0800779d 	.word	0x0800779d
 8007770:	080077dd 	.word	0x080077dd
 8007774:	080079b3 	.word	0x080079b3
 8007778:	080079b3 	.word	0x080079b3
 800777c:	08007953 	.word	0x08007953
 8007780:	0800797f 	.word	0x0800797f
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	687a      	ldr	r2, [r7, #4]
 800778e:	7c12      	ldrb	r2, [r2, #16]
 8007790:	f107 0108 	add.w	r1, r7, #8
 8007794:	4610      	mov	r0, r2
 8007796:	4798      	blx	r3
 8007798:	60f8      	str	r0, [r7, #12]
      break;
 800779a:	e112      	b.n	80079c2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	7c1b      	ldrb	r3, [r3, #16]
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	d10d      	bne.n	80077c0 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80077aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077ac:	f107 0208 	add.w	r2, r7, #8
 80077b0:	4610      	mov	r0, r2
 80077b2:	4798      	blx	r3
 80077b4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	3301      	adds	r3, #1
 80077ba:	2202      	movs	r2, #2
 80077bc:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80077be:	e100      	b.n	80079c2 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80077c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077c8:	f107 0208 	add.w	r2, r7, #8
 80077cc:	4610      	mov	r0, r2
 80077ce:	4798      	blx	r3
 80077d0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	3301      	adds	r3, #1
 80077d6:	2202      	movs	r2, #2
 80077d8:	701a      	strb	r2, [r3, #0]
      break;
 80077da:	e0f2      	b.n	80079c2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80077dc:	683b      	ldr	r3, [r7, #0]
 80077de:	885b      	ldrh	r3, [r3, #2]
 80077e0:	b2db      	uxtb	r3, r3
 80077e2:	2b05      	cmp	r3, #5
 80077e4:	f200 80ac 	bhi.w	8007940 <USBD_GetDescriptor+0x204>
 80077e8:	a201      	add	r2, pc, #4	; (adr r2, 80077f0 <USBD_GetDescriptor+0xb4>)
 80077ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077ee:	bf00      	nop
 80077f0:	08007809 	.word	0x08007809
 80077f4:	0800783d 	.word	0x0800783d
 80077f8:	08007871 	.word	0x08007871
 80077fc:	080078a5 	.word	0x080078a5
 8007800:	080078d9 	.word	0x080078d9
 8007804:	0800790d 	.word	0x0800790d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800780e:	685b      	ldr	r3, [r3, #4]
 8007810:	2b00      	cmp	r3, #0
 8007812:	d00b      	beq.n	800782c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800781a:	685b      	ldr	r3, [r3, #4]
 800781c:	687a      	ldr	r2, [r7, #4]
 800781e:	7c12      	ldrb	r2, [r2, #16]
 8007820:	f107 0108 	add.w	r1, r7, #8
 8007824:	4610      	mov	r0, r2
 8007826:	4798      	blx	r3
 8007828:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800782a:	e091      	b.n	8007950 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800782c:	6839      	ldr	r1, [r7, #0]
 800782e:	6878      	ldr	r0, [r7, #4]
 8007830:	f000 fab2 	bl	8007d98 <USBD_CtlError>
            err++;
 8007834:	7afb      	ldrb	r3, [r7, #11]
 8007836:	3301      	adds	r3, #1
 8007838:	72fb      	strb	r3, [r7, #11]
          break;
 800783a:	e089      	b.n	8007950 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007842:	689b      	ldr	r3, [r3, #8]
 8007844:	2b00      	cmp	r3, #0
 8007846:	d00b      	beq.n	8007860 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800784e:	689b      	ldr	r3, [r3, #8]
 8007850:	687a      	ldr	r2, [r7, #4]
 8007852:	7c12      	ldrb	r2, [r2, #16]
 8007854:	f107 0108 	add.w	r1, r7, #8
 8007858:	4610      	mov	r0, r2
 800785a:	4798      	blx	r3
 800785c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800785e:	e077      	b.n	8007950 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007860:	6839      	ldr	r1, [r7, #0]
 8007862:	6878      	ldr	r0, [r7, #4]
 8007864:	f000 fa98 	bl	8007d98 <USBD_CtlError>
            err++;
 8007868:	7afb      	ldrb	r3, [r7, #11]
 800786a:	3301      	adds	r3, #1
 800786c:	72fb      	strb	r3, [r7, #11]
          break;
 800786e:	e06f      	b.n	8007950 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007876:	68db      	ldr	r3, [r3, #12]
 8007878:	2b00      	cmp	r3, #0
 800787a:	d00b      	beq.n	8007894 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007882:	68db      	ldr	r3, [r3, #12]
 8007884:	687a      	ldr	r2, [r7, #4]
 8007886:	7c12      	ldrb	r2, [r2, #16]
 8007888:	f107 0108 	add.w	r1, r7, #8
 800788c:	4610      	mov	r0, r2
 800788e:	4798      	blx	r3
 8007890:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007892:	e05d      	b.n	8007950 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007894:	6839      	ldr	r1, [r7, #0]
 8007896:	6878      	ldr	r0, [r7, #4]
 8007898:	f000 fa7e 	bl	8007d98 <USBD_CtlError>
            err++;
 800789c:	7afb      	ldrb	r3, [r7, #11]
 800789e:	3301      	adds	r3, #1
 80078a0:	72fb      	strb	r3, [r7, #11]
          break;
 80078a2:	e055      	b.n	8007950 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80078aa:	691b      	ldr	r3, [r3, #16]
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	d00b      	beq.n	80078c8 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80078b6:	691b      	ldr	r3, [r3, #16]
 80078b8:	687a      	ldr	r2, [r7, #4]
 80078ba:	7c12      	ldrb	r2, [r2, #16]
 80078bc:	f107 0108 	add.w	r1, r7, #8
 80078c0:	4610      	mov	r0, r2
 80078c2:	4798      	blx	r3
 80078c4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80078c6:	e043      	b.n	8007950 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80078c8:	6839      	ldr	r1, [r7, #0]
 80078ca:	6878      	ldr	r0, [r7, #4]
 80078cc:	f000 fa64 	bl	8007d98 <USBD_CtlError>
            err++;
 80078d0:	7afb      	ldrb	r3, [r7, #11]
 80078d2:	3301      	adds	r3, #1
 80078d4:	72fb      	strb	r3, [r7, #11]
          break;
 80078d6:	e03b      	b.n	8007950 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80078de:	695b      	ldr	r3, [r3, #20]
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	d00b      	beq.n	80078fc <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80078ea:	695b      	ldr	r3, [r3, #20]
 80078ec:	687a      	ldr	r2, [r7, #4]
 80078ee:	7c12      	ldrb	r2, [r2, #16]
 80078f0:	f107 0108 	add.w	r1, r7, #8
 80078f4:	4610      	mov	r0, r2
 80078f6:	4798      	blx	r3
 80078f8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80078fa:	e029      	b.n	8007950 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80078fc:	6839      	ldr	r1, [r7, #0]
 80078fe:	6878      	ldr	r0, [r7, #4]
 8007900:	f000 fa4a 	bl	8007d98 <USBD_CtlError>
            err++;
 8007904:	7afb      	ldrb	r3, [r7, #11]
 8007906:	3301      	adds	r3, #1
 8007908:	72fb      	strb	r3, [r7, #11]
          break;
 800790a:	e021      	b.n	8007950 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007912:	699b      	ldr	r3, [r3, #24]
 8007914:	2b00      	cmp	r3, #0
 8007916:	d00b      	beq.n	8007930 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800791e:	699b      	ldr	r3, [r3, #24]
 8007920:	687a      	ldr	r2, [r7, #4]
 8007922:	7c12      	ldrb	r2, [r2, #16]
 8007924:	f107 0108 	add.w	r1, r7, #8
 8007928:	4610      	mov	r0, r2
 800792a:	4798      	blx	r3
 800792c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800792e:	e00f      	b.n	8007950 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007930:	6839      	ldr	r1, [r7, #0]
 8007932:	6878      	ldr	r0, [r7, #4]
 8007934:	f000 fa30 	bl	8007d98 <USBD_CtlError>
            err++;
 8007938:	7afb      	ldrb	r3, [r7, #11]
 800793a:	3301      	adds	r3, #1
 800793c:	72fb      	strb	r3, [r7, #11]
          break;
 800793e:	e007      	b.n	8007950 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8007940:	6839      	ldr	r1, [r7, #0]
 8007942:	6878      	ldr	r0, [r7, #4]
 8007944:	f000 fa28 	bl	8007d98 <USBD_CtlError>
          err++;
 8007948:	7afb      	ldrb	r3, [r7, #11]
 800794a:	3301      	adds	r3, #1
 800794c:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 800794e:	bf00      	nop
      }
      break;
 8007950:	e037      	b.n	80079c2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	7c1b      	ldrb	r3, [r3, #16]
 8007956:	2b00      	cmp	r3, #0
 8007958:	d109      	bne.n	800796e <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007960:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007962:	f107 0208 	add.w	r2, r7, #8
 8007966:	4610      	mov	r0, r2
 8007968:	4798      	blx	r3
 800796a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800796c:	e029      	b.n	80079c2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800796e:	6839      	ldr	r1, [r7, #0]
 8007970:	6878      	ldr	r0, [r7, #4]
 8007972:	f000 fa11 	bl	8007d98 <USBD_CtlError>
        err++;
 8007976:	7afb      	ldrb	r3, [r7, #11]
 8007978:	3301      	adds	r3, #1
 800797a:	72fb      	strb	r3, [r7, #11]
      break;
 800797c:	e021      	b.n	80079c2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	7c1b      	ldrb	r3, [r3, #16]
 8007982:	2b00      	cmp	r3, #0
 8007984:	d10d      	bne.n	80079a2 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800798c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800798e:	f107 0208 	add.w	r2, r7, #8
 8007992:	4610      	mov	r0, r2
 8007994:	4798      	blx	r3
 8007996:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	3301      	adds	r3, #1
 800799c:	2207      	movs	r2, #7
 800799e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80079a0:	e00f      	b.n	80079c2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80079a2:	6839      	ldr	r1, [r7, #0]
 80079a4:	6878      	ldr	r0, [r7, #4]
 80079a6:	f000 f9f7 	bl	8007d98 <USBD_CtlError>
        err++;
 80079aa:	7afb      	ldrb	r3, [r7, #11]
 80079ac:	3301      	adds	r3, #1
 80079ae:	72fb      	strb	r3, [r7, #11]
      break;
 80079b0:	e007      	b.n	80079c2 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80079b2:	6839      	ldr	r1, [r7, #0]
 80079b4:	6878      	ldr	r0, [r7, #4]
 80079b6:	f000 f9ef 	bl	8007d98 <USBD_CtlError>
      err++;
 80079ba:	7afb      	ldrb	r3, [r7, #11]
 80079bc:	3301      	adds	r3, #1
 80079be:	72fb      	strb	r3, [r7, #11]
      break;
 80079c0:	bf00      	nop
  }

  if (err != 0U)
 80079c2:	7afb      	ldrb	r3, [r7, #11]
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	d11e      	bne.n	8007a06 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 80079c8:	683b      	ldr	r3, [r7, #0]
 80079ca:	88db      	ldrh	r3, [r3, #6]
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d016      	beq.n	80079fe <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 80079d0:	893b      	ldrh	r3, [r7, #8]
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	d00e      	beq.n	80079f4 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 80079d6:	683b      	ldr	r3, [r7, #0]
 80079d8:	88da      	ldrh	r2, [r3, #6]
 80079da:	893b      	ldrh	r3, [r7, #8]
 80079dc:	4293      	cmp	r3, r2
 80079de:	bf28      	it	cs
 80079e0:	4613      	movcs	r3, r2
 80079e2:	b29b      	uxth	r3, r3
 80079e4:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80079e6:	893b      	ldrh	r3, [r7, #8]
 80079e8:	461a      	mov	r2, r3
 80079ea:	68f9      	ldr	r1, [r7, #12]
 80079ec:	6878      	ldr	r0, [r7, #4]
 80079ee:	f000 fe2c 	bl	800864a <USBD_CtlSendData>
 80079f2:	e009      	b.n	8007a08 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80079f4:	6839      	ldr	r1, [r7, #0]
 80079f6:	6878      	ldr	r0, [r7, #4]
 80079f8:	f000 f9ce 	bl	8007d98 <USBD_CtlError>
 80079fc:	e004      	b.n	8007a08 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80079fe:	6878      	ldr	r0, [r7, #4]
 8007a00:	f000 fe7d 	bl	80086fe <USBD_CtlSendStatus>
 8007a04:	e000      	b.n	8007a08 <USBD_GetDescriptor+0x2cc>
    return;
 8007a06:	bf00      	nop
  }
}
 8007a08:	3710      	adds	r7, #16
 8007a0a:	46bd      	mov	sp, r7
 8007a0c:	bd80      	pop	{r7, pc}
 8007a0e:	bf00      	nop

08007a10 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007a10:	b580      	push	{r7, lr}
 8007a12:	b084      	sub	sp, #16
 8007a14:	af00      	add	r7, sp, #0
 8007a16:	6078      	str	r0, [r7, #4]
 8007a18:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007a1a:	683b      	ldr	r3, [r7, #0]
 8007a1c:	889b      	ldrh	r3, [r3, #4]
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	d131      	bne.n	8007a86 <USBD_SetAddress+0x76>
 8007a22:	683b      	ldr	r3, [r7, #0]
 8007a24:	88db      	ldrh	r3, [r3, #6]
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	d12d      	bne.n	8007a86 <USBD_SetAddress+0x76>
 8007a2a:	683b      	ldr	r3, [r7, #0]
 8007a2c:	885b      	ldrh	r3, [r3, #2]
 8007a2e:	2b7f      	cmp	r3, #127	; 0x7f
 8007a30:	d829      	bhi.n	8007a86 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8007a32:	683b      	ldr	r3, [r7, #0]
 8007a34:	885b      	ldrh	r3, [r3, #2]
 8007a36:	b2db      	uxtb	r3, r3
 8007a38:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007a3c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007a44:	b2db      	uxtb	r3, r3
 8007a46:	2b03      	cmp	r3, #3
 8007a48:	d104      	bne.n	8007a54 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8007a4a:	6839      	ldr	r1, [r7, #0]
 8007a4c:	6878      	ldr	r0, [r7, #4]
 8007a4e:	f000 f9a3 	bl	8007d98 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007a52:	e01d      	b.n	8007a90 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	7bfa      	ldrb	r2, [r7, #15]
 8007a58:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007a5c:	7bfb      	ldrb	r3, [r7, #15]
 8007a5e:	4619      	mov	r1, r3
 8007a60:	6878      	ldr	r0, [r7, #4]
 8007a62:	f7ff f861 	bl	8006b28 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8007a66:	6878      	ldr	r0, [r7, #4]
 8007a68:	f000 fe49 	bl	80086fe <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007a6c:	7bfb      	ldrb	r3, [r7, #15]
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d004      	beq.n	8007a7c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	2202      	movs	r2, #2
 8007a76:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007a7a:	e009      	b.n	8007a90 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	2201      	movs	r2, #1
 8007a80:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007a84:	e004      	b.n	8007a90 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007a86:	6839      	ldr	r1, [r7, #0]
 8007a88:	6878      	ldr	r0, [r7, #4]
 8007a8a:	f000 f985 	bl	8007d98 <USBD_CtlError>
  }
}
 8007a8e:	bf00      	nop
 8007a90:	bf00      	nop
 8007a92:	3710      	adds	r7, #16
 8007a94:	46bd      	mov	sp, r7
 8007a96:	bd80      	pop	{r7, pc}

08007a98 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007a98:	b580      	push	{r7, lr}
 8007a9a:	b084      	sub	sp, #16
 8007a9c:	af00      	add	r7, sp, #0
 8007a9e:	6078      	str	r0, [r7, #4]
 8007aa0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007aa2:	2300      	movs	r3, #0
 8007aa4:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007aa6:	683b      	ldr	r3, [r7, #0]
 8007aa8:	885b      	ldrh	r3, [r3, #2]
 8007aaa:	b2da      	uxtb	r2, r3
 8007aac:	4b4c      	ldr	r3, [pc, #304]	; (8007be0 <USBD_SetConfig+0x148>)
 8007aae:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007ab0:	4b4b      	ldr	r3, [pc, #300]	; (8007be0 <USBD_SetConfig+0x148>)
 8007ab2:	781b      	ldrb	r3, [r3, #0]
 8007ab4:	2b01      	cmp	r3, #1
 8007ab6:	d905      	bls.n	8007ac4 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8007ab8:	6839      	ldr	r1, [r7, #0]
 8007aba:	6878      	ldr	r0, [r7, #4]
 8007abc:	f000 f96c 	bl	8007d98 <USBD_CtlError>
    return USBD_FAIL;
 8007ac0:	2303      	movs	r3, #3
 8007ac2:	e088      	b.n	8007bd6 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007aca:	b2db      	uxtb	r3, r3
 8007acc:	2b02      	cmp	r3, #2
 8007ace:	d002      	beq.n	8007ad6 <USBD_SetConfig+0x3e>
 8007ad0:	2b03      	cmp	r3, #3
 8007ad2:	d025      	beq.n	8007b20 <USBD_SetConfig+0x88>
 8007ad4:	e071      	b.n	8007bba <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8007ad6:	4b42      	ldr	r3, [pc, #264]	; (8007be0 <USBD_SetConfig+0x148>)
 8007ad8:	781b      	ldrb	r3, [r3, #0]
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	d01c      	beq.n	8007b18 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 8007ade:	4b40      	ldr	r3, [pc, #256]	; (8007be0 <USBD_SetConfig+0x148>)
 8007ae0:	781b      	ldrb	r3, [r3, #0]
 8007ae2:	461a      	mov	r2, r3
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007ae8:	4b3d      	ldr	r3, [pc, #244]	; (8007be0 <USBD_SetConfig+0x148>)
 8007aea:	781b      	ldrb	r3, [r3, #0]
 8007aec:	4619      	mov	r1, r3
 8007aee:	6878      	ldr	r0, [r7, #4]
 8007af0:	f7ff f949 	bl	8006d86 <USBD_SetClassConfig>
 8007af4:	4603      	mov	r3, r0
 8007af6:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8007af8:	7bfb      	ldrb	r3, [r7, #15]
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	d004      	beq.n	8007b08 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 8007afe:	6839      	ldr	r1, [r7, #0]
 8007b00:	6878      	ldr	r0, [r7, #4]
 8007b02:	f000 f949 	bl	8007d98 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007b06:	e065      	b.n	8007bd4 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8007b08:	6878      	ldr	r0, [r7, #4]
 8007b0a:	f000 fdf8 	bl	80086fe <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	2203      	movs	r2, #3
 8007b12:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8007b16:	e05d      	b.n	8007bd4 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8007b18:	6878      	ldr	r0, [r7, #4]
 8007b1a:	f000 fdf0 	bl	80086fe <USBD_CtlSendStatus>
      break;
 8007b1e:	e059      	b.n	8007bd4 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8007b20:	4b2f      	ldr	r3, [pc, #188]	; (8007be0 <USBD_SetConfig+0x148>)
 8007b22:	781b      	ldrb	r3, [r3, #0]
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	d112      	bne.n	8007b4e <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	2202      	movs	r2, #2
 8007b2c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8007b30:	4b2b      	ldr	r3, [pc, #172]	; (8007be0 <USBD_SetConfig+0x148>)
 8007b32:	781b      	ldrb	r3, [r3, #0]
 8007b34:	461a      	mov	r2, r3
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007b3a:	4b29      	ldr	r3, [pc, #164]	; (8007be0 <USBD_SetConfig+0x148>)
 8007b3c:	781b      	ldrb	r3, [r3, #0]
 8007b3e:	4619      	mov	r1, r3
 8007b40:	6878      	ldr	r0, [r7, #4]
 8007b42:	f7ff f93c 	bl	8006dbe <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8007b46:	6878      	ldr	r0, [r7, #4]
 8007b48:	f000 fdd9 	bl	80086fe <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007b4c:	e042      	b.n	8007bd4 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 8007b4e:	4b24      	ldr	r3, [pc, #144]	; (8007be0 <USBD_SetConfig+0x148>)
 8007b50:	781b      	ldrb	r3, [r3, #0]
 8007b52:	461a      	mov	r2, r3
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	685b      	ldr	r3, [r3, #4]
 8007b58:	429a      	cmp	r2, r3
 8007b5a:	d02a      	beq.n	8007bb2 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	685b      	ldr	r3, [r3, #4]
 8007b60:	b2db      	uxtb	r3, r3
 8007b62:	4619      	mov	r1, r3
 8007b64:	6878      	ldr	r0, [r7, #4]
 8007b66:	f7ff f92a 	bl	8006dbe <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8007b6a:	4b1d      	ldr	r3, [pc, #116]	; (8007be0 <USBD_SetConfig+0x148>)
 8007b6c:	781b      	ldrb	r3, [r3, #0]
 8007b6e:	461a      	mov	r2, r3
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007b74:	4b1a      	ldr	r3, [pc, #104]	; (8007be0 <USBD_SetConfig+0x148>)
 8007b76:	781b      	ldrb	r3, [r3, #0]
 8007b78:	4619      	mov	r1, r3
 8007b7a:	6878      	ldr	r0, [r7, #4]
 8007b7c:	f7ff f903 	bl	8006d86 <USBD_SetClassConfig>
 8007b80:	4603      	mov	r3, r0
 8007b82:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8007b84:	7bfb      	ldrb	r3, [r7, #15]
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	d00f      	beq.n	8007baa <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 8007b8a:	6839      	ldr	r1, [r7, #0]
 8007b8c:	6878      	ldr	r0, [r7, #4]
 8007b8e:	f000 f903 	bl	8007d98 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	685b      	ldr	r3, [r3, #4]
 8007b96:	b2db      	uxtb	r3, r3
 8007b98:	4619      	mov	r1, r3
 8007b9a:	6878      	ldr	r0, [r7, #4]
 8007b9c:	f7ff f90f 	bl	8006dbe <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	2202      	movs	r2, #2
 8007ba4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8007ba8:	e014      	b.n	8007bd4 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8007baa:	6878      	ldr	r0, [r7, #4]
 8007bac:	f000 fda7 	bl	80086fe <USBD_CtlSendStatus>
      break;
 8007bb0:	e010      	b.n	8007bd4 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8007bb2:	6878      	ldr	r0, [r7, #4]
 8007bb4:	f000 fda3 	bl	80086fe <USBD_CtlSendStatus>
      break;
 8007bb8:	e00c      	b.n	8007bd4 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8007bba:	6839      	ldr	r1, [r7, #0]
 8007bbc:	6878      	ldr	r0, [r7, #4]
 8007bbe:	f000 f8eb 	bl	8007d98 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007bc2:	4b07      	ldr	r3, [pc, #28]	; (8007be0 <USBD_SetConfig+0x148>)
 8007bc4:	781b      	ldrb	r3, [r3, #0]
 8007bc6:	4619      	mov	r1, r3
 8007bc8:	6878      	ldr	r0, [r7, #4]
 8007bca:	f7ff f8f8 	bl	8006dbe <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8007bce:	2303      	movs	r3, #3
 8007bd0:	73fb      	strb	r3, [r7, #15]
      break;
 8007bd2:	bf00      	nop
  }

  return ret;
 8007bd4:	7bfb      	ldrb	r3, [r7, #15]
}
 8007bd6:	4618      	mov	r0, r3
 8007bd8:	3710      	adds	r7, #16
 8007bda:	46bd      	mov	sp, r7
 8007bdc:	bd80      	pop	{r7, pc}
 8007bde:	bf00      	nop
 8007be0:	2000424c 	.word	0x2000424c

08007be4 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007be4:	b580      	push	{r7, lr}
 8007be6:	b082      	sub	sp, #8
 8007be8:	af00      	add	r7, sp, #0
 8007bea:	6078      	str	r0, [r7, #4]
 8007bec:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8007bee:	683b      	ldr	r3, [r7, #0]
 8007bf0:	88db      	ldrh	r3, [r3, #6]
 8007bf2:	2b01      	cmp	r3, #1
 8007bf4:	d004      	beq.n	8007c00 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8007bf6:	6839      	ldr	r1, [r7, #0]
 8007bf8:	6878      	ldr	r0, [r7, #4]
 8007bfa:	f000 f8cd 	bl	8007d98 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8007bfe:	e023      	b.n	8007c48 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007c06:	b2db      	uxtb	r3, r3
 8007c08:	2b02      	cmp	r3, #2
 8007c0a:	dc02      	bgt.n	8007c12 <USBD_GetConfig+0x2e>
 8007c0c:	2b00      	cmp	r3, #0
 8007c0e:	dc03      	bgt.n	8007c18 <USBD_GetConfig+0x34>
 8007c10:	e015      	b.n	8007c3e <USBD_GetConfig+0x5a>
 8007c12:	2b03      	cmp	r3, #3
 8007c14:	d00b      	beq.n	8007c2e <USBD_GetConfig+0x4a>
 8007c16:	e012      	b.n	8007c3e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	2200      	movs	r2, #0
 8007c1c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	3308      	adds	r3, #8
 8007c22:	2201      	movs	r2, #1
 8007c24:	4619      	mov	r1, r3
 8007c26:	6878      	ldr	r0, [r7, #4]
 8007c28:	f000 fd0f 	bl	800864a <USBD_CtlSendData>
        break;
 8007c2c:	e00c      	b.n	8007c48 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	3304      	adds	r3, #4
 8007c32:	2201      	movs	r2, #1
 8007c34:	4619      	mov	r1, r3
 8007c36:	6878      	ldr	r0, [r7, #4]
 8007c38:	f000 fd07 	bl	800864a <USBD_CtlSendData>
        break;
 8007c3c:	e004      	b.n	8007c48 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8007c3e:	6839      	ldr	r1, [r7, #0]
 8007c40:	6878      	ldr	r0, [r7, #4]
 8007c42:	f000 f8a9 	bl	8007d98 <USBD_CtlError>
        break;
 8007c46:	bf00      	nop
}
 8007c48:	bf00      	nop
 8007c4a:	3708      	adds	r7, #8
 8007c4c:	46bd      	mov	sp, r7
 8007c4e:	bd80      	pop	{r7, pc}

08007c50 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007c50:	b580      	push	{r7, lr}
 8007c52:	b082      	sub	sp, #8
 8007c54:	af00      	add	r7, sp, #0
 8007c56:	6078      	str	r0, [r7, #4]
 8007c58:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007c60:	b2db      	uxtb	r3, r3
 8007c62:	3b01      	subs	r3, #1
 8007c64:	2b02      	cmp	r3, #2
 8007c66:	d81e      	bhi.n	8007ca6 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8007c68:	683b      	ldr	r3, [r7, #0]
 8007c6a:	88db      	ldrh	r3, [r3, #6]
 8007c6c:	2b02      	cmp	r3, #2
 8007c6e:	d004      	beq.n	8007c7a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8007c70:	6839      	ldr	r1, [r7, #0]
 8007c72:	6878      	ldr	r0, [r7, #4]
 8007c74:	f000 f890 	bl	8007d98 <USBD_CtlError>
        break;
 8007c78:	e01a      	b.n	8007cb0 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
#else
      pdev->dev_config_status = 0U;
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	2200      	movs	r2, #0
 8007c7e:	60da      	str	r2, [r3, #12]
#endif

      if (pdev->dev_remote_wakeup != 0U)
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d005      	beq.n	8007c96 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	68db      	ldr	r3, [r3, #12]
 8007c8e:	f043 0202 	orr.w	r2, r3, #2
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	330c      	adds	r3, #12
 8007c9a:	2202      	movs	r2, #2
 8007c9c:	4619      	mov	r1, r3
 8007c9e:	6878      	ldr	r0, [r7, #4]
 8007ca0:	f000 fcd3 	bl	800864a <USBD_CtlSendData>
      break;
 8007ca4:	e004      	b.n	8007cb0 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8007ca6:	6839      	ldr	r1, [r7, #0]
 8007ca8:	6878      	ldr	r0, [r7, #4]
 8007caa:	f000 f875 	bl	8007d98 <USBD_CtlError>
      break;
 8007cae:	bf00      	nop
  }
}
 8007cb0:	bf00      	nop
 8007cb2:	3708      	adds	r7, #8
 8007cb4:	46bd      	mov	sp, r7
 8007cb6:	bd80      	pop	{r7, pc}

08007cb8 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007cb8:	b580      	push	{r7, lr}
 8007cba:	b082      	sub	sp, #8
 8007cbc:	af00      	add	r7, sp, #0
 8007cbe:	6078      	str	r0, [r7, #4]
 8007cc0:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007cc2:	683b      	ldr	r3, [r7, #0]
 8007cc4:	885b      	ldrh	r3, [r3, #2]
 8007cc6:	2b01      	cmp	r3, #1
 8007cc8:	d106      	bne.n	8007cd8 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	2201      	movs	r2, #1
 8007cce:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8007cd2:	6878      	ldr	r0, [r7, #4]
 8007cd4:	f000 fd13 	bl	80086fe <USBD_CtlSendStatus>
  }
}
 8007cd8:	bf00      	nop
 8007cda:	3708      	adds	r7, #8
 8007cdc:	46bd      	mov	sp, r7
 8007cde:	bd80      	pop	{r7, pc}

08007ce0 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007ce0:	b580      	push	{r7, lr}
 8007ce2:	b082      	sub	sp, #8
 8007ce4:	af00      	add	r7, sp, #0
 8007ce6:	6078      	str	r0, [r7, #4]
 8007ce8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007cf0:	b2db      	uxtb	r3, r3
 8007cf2:	3b01      	subs	r3, #1
 8007cf4:	2b02      	cmp	r3, #2
 8007cf6:	d80b      	bhi.n	8007d10 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007cf8:	683b      	ldr	r3, [r7, #0]
 8007cfa:	885b      	ldrh	r3, [r3, #2]
 8007cfc:	2b01      	cmp	r3, #1
 8007cfe:	d10c      	bne.n	8007d1a <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	2200      	movs	r2, #0
 8007d04:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8007d08:	6878      	ldr	r0, [r7, #4]
 8007d0a:	f000 fcf8 	bl	80086fe <USBD_CtlSendStatus>
      }
      break;
 8007d0e:	e004      	b.n	8007d1a <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8007d10:	6839      	ldr	r1, [r7, #0]
 8007d12:	6878      	ldr	r0, [r7, #4]
 8007d14:	f000 f840 	bl	8007d98 <USBD_CtlError>
      break;
 8007d18:	e000      	b.n	8007d1c <USBD_ClrFeature+0x3c>
      break;
 8007d1a:	bf00      	nop
  }
}
 8007d1c:	bf00      	nop
 8007d1e:	3708      	adds	r7, #8
 8007d20:	46bd      	mov	sp, r7
 8007d22:	bd80      	pop	{r7, pc}

08007d24 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007d24:	b580      	push	{r7, lr}
 8007d26:	b084      	sub	sp, #16
 8007d28:	af00      	add	r7, sp, #0
 8007d2a:	6078      	str	r0, [r7, #4]
 8007d2c:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8007d2e:	683b      	ldr	r3, [r7, #0]
 8007d30:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	781a      	ldrb	r2, [r3, #0]
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	3301      	adds	r3, #1
 8007d3e:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	781a      	ldrb	r2, [r3, #0]
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	3301      	adds	r3, #1
 8007d4c:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8007d4e:	68f8      	ldr	r0, [r7, #12]
 8007d50:	f7ff fabc 	bl	80072cc <SWAPBYTE>
 8007d54:	4603      	mov	r3, r0
 8007d56:	461a      	mov	r2, r3
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	3301      	adds	r3, #1
 8007d60:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007d62:	68fb      	ldr	r3, [r7, #12]
 8007d64:	3301      	adds	r3, #1
 8007d66:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8007d68:	68f8      	ldr	r0, [r7, #12]
 8007d6a:	f7ff faaf 	bl	80072cc <SWAPBYTE>
 8007d6e:	4603      	mov	r3, r0
 8007d70:	461a      	mov	r2, r3
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	3301      	adds	r3, #1
 8007d7a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	3301      	adds	r3, #1
 8007d80:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8007d82:	68f8      	ldr	r0, [r7, #12]
 8007d84:	f7ff faa2 	bl	80072cc <SWAPBYTE>
 8007d88:	4603      	mov	r3, r0
 8007d8a:	461a      	mov	r2, r3
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	80da      	strh	r2, [r3, #6]
}
 8007d90:	bf00      	nop
 8007d92:	3710      	adds	r7, #16
 8007d94:	46bd      	mov	sp, r7
 8007d96:	bd80      	pop	{r7, pc}

08007d98 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007d98:	b580      	push	{r7, lr}
 8007d9a:	b082      	sub	sp, #8
 8007d9c:	af00      	add	r7, sp, #0
 8007d9e:	6078      	str	r0, [r7, #4]
 8007da0:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8007da2:	2180      	movs	r1, #128	; 0x80
 8007da4:	6878      	ldr	r0, [r7, #4]
 8007da6:	f7fe fe55 	bl	8006a54 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8007daa:	2100      	movs	r1, #0
 8007dac:	6878      	ldr	r0, [r7, #4]
 8007dae:	f7fe fe51 	bl	8006a54 <USBD_LL_StallEP>
}
 8007db2:	bf00      	nop
 8007db4:	3708      	adds	r7, #8
 8007db6:	46bd      	mov	sp, r7
 8007db8:	bd80      	pop	{r7, pc}

08007dba <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007dba:	b580      	push	{r7, lr}
 8007dbc:	b086      	sub	sp, #24
 8007dbe:	af00      	add	r7, sp, #0
 8007dc0:	60f8      	str	r0, [r7, #12]
 8007dc2:	60b9      	str	r1, [r7, #8]
 8007dc4:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007dc6:	2300      	movs	r3, #0
 8007dc8:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8007dca:	68fb      	ldr	r3, [r7, #12]
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	d036      	beq.n	8007e3e <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8007dd4:	6938      	ldr	r0, [r7, #16]
 8007dd6:	f000 f836 	bl	8007e46 <USBD_GetLen>
 8007dda:	4603      	mov	r3, r0
 8007ddc:	3301      	adds	r3, #1
 8007dde:	b29b      	uxth	r3, r3
 8007de0:	005b      	lsls	r3, r3, #1
 8007de2:	b29a      	uxth	r2, r3
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8007de8:	7dfb      	ldrb	r3, [r7, #23]
 8007dea:	68ba      	ldr	r2, [r7, #8]
 8007dec:	4413      	add	r3, r2
 8007dee:	687a      	ldr	r2, [r7, #4]
 8007df0:	7812      	ldrb	r2, [r2, #0]
 8007df2:	701a      	strb	r2, [r3, #0]
  idx++;
 8007df4:	7dfb      	ldrb	r3, [r7, #23]
 8007df6:	3301      	adds	r3, #1
 8007df8:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8007dfa:	7dfb      	ldrb	r3, [r7, #23]
 8007dfc:	68ba      	ldr	r2, [r7, #8]
 8007dfe:	4413      	add	r3, r2
 8007e00:	2203      	movs	r2, #3
 8007e02:	701a      	strb	r2, [r3, #0]
  idx++;
 8007e04:	7dfb      	ldrb	r3, [r7, #23]
 8007e06:	3301      	adds	r3, #1
 8007e08:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8007e0a:	e013      	b.n	8007e34 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8007e0c:	7dfb      	ldrb	r3, [r7, #23]
 8007e0e:	68ba      	ldr	r2, [r7, #8]
 8007e10:	4413      	add	r3, r2
 8007e12:	693a      	ldr	r2, [r7, #16]
 8007e14:	7812      	ldrb	r2, [r2, #0]
 8007e16:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8007e18:	693b      	ldr	r3, [r7, #16]
 8007e1a:	3301      	adds	r3, #1
 8007e1c:	613b      	str	r3, [r7, #16]
    idx++;
 8007e1e:	7dfb      	ldrb	r3, [r7, #23]
 8007e20:	3301      	adds	r3, #1
 8007e22:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8007e24:	7dfb      	ldrb	r3, [r7, #23]
 8007e26:	68ba      	ldr	r2, [r7, #8]
 8007e28:	4413      	add	r3, r2
 8007e2a:	2200      	movs	r2, #0
 8007e2c:	701a      	strb	r2, [r3, #0]
    idx++;
 8007e2e:	7dfb      	ldrb	r3, [r7, #23]
 8007e30:	3301      	adds	r3, #1
 8007e32:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8007e34:	693b      	ldr	r3, [r7, #16]
 8007e36:	781b      	ldrb	r3, [r3, #0]
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	d1e7      	bne.n	8007e0c <USBD_GetString+0x52>
 8007e3c:	e000      	b.n	8007e40 <USBD_GetString+0x86>
    return;
 8007e3e:	bf00      	nop
  }
}
 8007e40:	3718      	adds	r7, #24
 8007e42:	46bd      	mov	sp, r7
 8007e44:	bd80      	pop	{r7, pc}

08007e46 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8007e46:	b480      	push	{r7}
 8007e48:	b085      	sub	sp, #20
 8007e4a:	af00      	add	r7, sp, #0
 8007e4c:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8007e4e:	2300      	movs	r3, #0
 8007e50:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8007e56:	e005      	b.n	8007e64 <USBD_GetLen+0x1e>
  {
    len++;
 8007e58:	7bfb      	ldrb	r3, [r7, #15]
 8007e5a:	3301      	adds	r3, #1
 8007e5c:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8007e5e:	68bb      	ldr	r3, [r7, #8]
 8007e60:	3301      	adds	r3, #1
 8007e62:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8007e64:	68bb      	ldr	r3, [r7, #8]
 8007e66:	781b      	ldrb	r3, [r3, #0]
 8007e68:	2b00      	cmp	r3, #0
 8007e6a:	d1f5      	bne.n	8007e58 <USBD_GetLen+0x12>
  }

  return len;
 8007e6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e6e:	4618      	mov	r0, r3
 8007e70:	3714      	adds	r7, #20
 8007e72:	46bd      	mov	sp, r7
 8007e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e78:	4770      	bx	lr

08007e7a <CUSTOM_HID_Init_FS>:
/**
  * @brief  Initializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_Init_FS(void)
{
 8007e7a:	b480      	push	{r7}
 8007e7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8007e7e:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8007e80:	4618      	mov	r0, r3
 8007e82:	46bd      	mov	sp, r7
 8007e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e88:	4770      	bx	lr

08007e8a <CUSTOM_HID_DeInit_FS>:
/**
  * @brief  DeInitializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_DeInit_FS(void)
{
 8007e8a:	b480      	push	{r7}
 8007e8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 5 */
  return (USBD_OK);
 8007e8e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8007e90:	4618      	mov	r0, r3
 8007e92:	46bd      	mov	sp, r7
 8007e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e98:	4770      	bx	lr
	...

08007e9c <CUSTOM_HID_OutEvent_FS>:
  * @param  event_idx: Event index
  * @param  state: Event state
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_OutEvent_FS(uint8_t* state)
{
 8007e9c:	b590      	push	{r4, r7, lr}
 8007e9e:	b085      	sub	sp, #20
 8007ea0:	af02      	add	r7, sp, #8
 8007ea2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 6 */
  UNUSED(state);

  DBG("OutEvent: %x %x %x %x %x", state[0], state[1], state[2], state[3], state[4]);
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	781b      	ldrb	r3, [r3, #0]
 8007ea8:	4619      	mov	r1, r3
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	3301      	adds	r3, #1
 8007eae:	781b      	ldrb	r3, [r3, #0]
 8007eb0:	4618      	mov	r0, r3
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	3302      	adds	r3, #2
 8007eb6:	781b      	ldrb	r3, [r3, #0]
 8007eb8:	461c      	mov	r4, r3
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	3303      	adds	r3, #3
 8007ebe:	781b      	ldrb	r3, [r3, #0]
 8007ec0:	461a      	mov	r2, r3
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	3304      	adds	r3, #4
 8007ec6:	781b      	ldrb	r3, [r3, #0]
 8007ec8:	9301      	str	r3, [sp, #4]
 8007eca:	9200      	str	r2, [sp, #0]
 8007ecc:	4623      	mov	r3, r4
 8007ece:	4602      	mov	r2, r0
 8007ed0:	480a      	ldr	r0, [pc, #40]	; (8007efc <CUSTOM_HID_OutEvent_FS+0x60>)
 8007ed2:	f000 fdcf 	bl	8008a74 <iprintf>
 8007ed6:	200a      	movs	r0, #10
 8007ed8:	f000 fde4 	bl	8008aa4 <putchar>

  switch(state[0]) {
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	781b      	ldrb	r3, [r3, #0]
 8007ee0:	2b00      	cmp	r3, #0
 8007ee2:	d001      	beq.n	8007ee8 <CUSTOM_HID_OutEvent_FS+0x4c>
 8007ee4:	2b01      	cmp	r3, #1
  case 0:
	  break;
  case 1:
	  break;
 8007ee6:	e000      	b.n	8007eea <CUSTOM_HID_OutEvent_FS+0x4e>
	  break;
 8007ee8:	bf00      	nop
  }

  /* Start next USB packet transfer once data processing is completed */
  USBD_CUSTOM_HID_ReceivePacket(&hUsbDeviceFS);
 8007eea:	4805      	ldr	r0, [pc, #20]	; (8007f00 <CUSTOM_HID_OutEvent_FS+0x64>)
 8007eec:	f000 fa3e 	bl	800836c <USBD_CUSTOM_HID_ReceivePacket>

  return (USBD_OK);
 8007ef0:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8007ef2:	4618      	mov	r0, r3
 8007ef4:	370c      	adds	r7, #12
 8007ef6:	46bd      	mov	sp, r7
 8007ef8:	bd90      	pop	{r4, r7, pc}
 8007efa:	bf00      	nop
 8007efc:	08009c6c 	.word	0x08009c6c
 8007f00:	200046f8 	.word	0x200046f8

08007f04 <USBD_CUSTOM_HID_SendReport_FS>:
  * @param  len: The report length
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */

int8_t USBD_CUSTOM_HID_SendReport_FS(uint8_t *report, uint16_t len)
{
 8007f04:	b580      	push	{r7, lr}
 8007f06:	b082      	sub	sp, #8
 8007f08:	af00      	add	r7, sp, #0
 8007f0a:	6078      	str	r0, [r7, #4]
 8007f0c:	460b      	mov	r3, r1
 8007f0e:	807b      	strh	r3, [r7, #2]
  return USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS, report, len);
 8007f10:	887b      	ldrh	r3, [r7, #2]
 8007f12:	461a      	mov	r2, r3
 8007f14:	6879      	ldr	r1, [r7, #4]
 8007f16:	4804      	ldr	r0, [pc, #16]	; (8007f28 <USBD_CUSTOM_HID_SendReport_FS+0x24>)
 8007f18:	f000 f998 	bl	800824c <USBD_CUSTOM_HID_SendReport>
 8007f1c:	4603      	mov	r3, r0
 8007f1e:	b25b      	sxtb	r3, r3
}
 8007f20:	4618      	mov	r0, r3
 8007f22:	3708      	adds	r7, #8
 8007f24:	46bd      	mov	sp, r7
 8007f26:	bd80      	pop	{r7, pc}
 8007f28:	200046f8 	.word	0x200046f8

08007f2c <USBD_CUSTOM_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007f2c:	b580      	push	{r7, lr}
 8007f2e:	b084      	sub	sp, #16
 8007f30:	af00      	add	r7, sp, #0
 8007f32:	6078      	str	r0, [r7, #4]
 8007f34:	460b      	mov	r3, r1
 8007f36:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CUSTOM_HID_HandleTypeDef *hhid;

  hhid = USBD_malloc(sizeof(USBD_CUSTOM_HID_HandleTypeDef));
 8007f38:	2054      	movs	r0, #84	; 0x54
 8007f3a:	f7fe fe57 	bl	8006bec <USBD_static_malloc>
 8007f3e:	60f8      	str	r0, [r7, #12]

  if (hhid == NULL)
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d105      	bne.n	8007f52 <USBD_CUSTOM_HID_Init+0x26>
  {
    pdev->pClassData = NULL;
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	2200      	movs	r2, #0
 8007f4a:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8007f4e:	2302      	movs	r3, #2
 8007f50:	e039      	b.n	8007fc6 <USBD_CUSTOM_HID_Init+0x9a>
  }

  pdev->pClassData = (void *)hhid;
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	68fa      	ldr	r2, [r7, #12]
 8007f56:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	7c1b      	ldrb	r3, [r3, #16]
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	d107      	bne.n	8007f72 <USBD_CUSTOM_HID_Init+0x46>
  {
    pdev->ep_in[CUSTOM_HID_EPIN_ADDR & 0xFU].bInterval = CUSTOM_HID_HS_BINTERVAL;
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	2205      	movs	r2, #5
 8007f66:	875a      	strh	r2, [r3, #58]	; 0x3a
    pdev->ep_out[CUSTOM_HID_EPOUT_ADDR & 0xFU].bInterval = CUSTOM_HID_HS_BINTERVAL;
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	2205      	movs	r2, #5
 8007f6c:	f8a3 217a 	strh.w	r2, [r3, #378]	; 0x17a
 8007f70:	e006      	b.n	8007f80 <USBD_CUSTOM_HID_Init+0x54>
  }
  else   /* LOW and FULL-speed endpoints */
  {
    pdev->ep_in[CUSTOM_HID_EPIN_ADDR & 0xFU].bInterval = CUSTOM_HID_FS_BINTERVAL;
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	2201      	movs	r2, #1
 8007f76:	875a      	strh	r2, [r3, #58]	; 0x3a
    pdev->ep_out[CUSTOM_HID_EPOUT_ADDR & 0xFU].bInterval = CUSTOM_HID_FS_BINTERVAL;
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	2201      	movs	r2, #1
 8007f7c:	f8a3 217a 	strh.w	r2, [r3, #378]	; 0x17a
  }

  /* Open EP IN */
  (void)USBD_LL_OpenEP(pdev, CUSTOM_HID_EPIN_ADDR, USBD_EP_TYPE_INTR,
 8007f80:	2340      	movs	r3, #64	; 0x40
 8007f82:	2203      	movs	r2, #3
 8007f84:	2181      	movs	r1, #129	; 0x81
 8007f86:	6878      	ldr	r0, [r7, #4]
 8007f88:	f7fe fd1f 	bl	80069ca <USBD_LL_OpenEP>
                       CUSTOM_HID_EPIN_SIZE);

  pdev->ep_in[CUSTOM_HID_EPIN_ADDR & 0xFU].is_used = 1U;
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	2201      	movs	r2, #1
 8007f90:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Open EP OUT */
  (void)USBD_LL_OpenEP(pdev, CUSTOM_HID_EPOUT_ADDR, USBD_EP_TYPE_INTR,
 8007f92:	2340      	movs	r3, #64	; 0x40
 8007f94:	2203      	movs	r2, #3
 8007f96:	2101      	movs	r1, #1
 8007f98:	6878      	ldr	r0, [r7, #4]
 8007f9a:	f7fe fd16 	bl	80069ca <USBD_LL_OpenEP>
                       CUSTOM_HID_EPOUT_SIZE);

  pdev->ep_out[CUSTOM_HID_EPOUT_ADDR & 0xFU].is_used = 1U;
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	2201      	movs	r2, #1
 8007fa2:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  hhid->state = CUSTOM_HID_IDLE;
 8007fa6:	68fb      	ldr	r3, [r7, #12]
 8007fa8:	2200      	movs	r2, #0
 8007faa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->Init();
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007fb4:	685b      	ldr	r3, [r3, #4]
 8007fb6:	4798      	blx	r3

  /* Prepare Out endpoint to receive 1st packet */
  (void)USBD_LL_PrepareReceive(pdev, CUSTOM_HID_EPOUT_ADDR, hhid->Report_buf,
 8007fb8:	68fa      	ldr	r2, [r7, #12]
 8007fba:	2340      	movs	r3, #64	; 0x40
 8007fbc:	2101      	movs	r1, #1
 8007fbe:	6878      	ldr	r0, [r7, #4]
 8007fc0:	f7fe fdf2 	bl	8006ba8 <USBD_LL_PrepareReceive>
                               USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);

  return (uint8_t)USBD_OK;
 8007fc4:	2300      	movs	r3, #0
}
 8007fc6:	4618      	mov	r0, r3
 8007fc8:	3710      	adds	r7, #16
 8007fca:	46bd      	mov	sp, r7
 8007fcc:	bd80      	pop	{r7, pc}

08007fce <USBD_CUSTOM_HID_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007fce:	b580      	push	{r7, lr}
 8007fd0:	b082      	sub	sp, #8
 8007fd2:	af00      	add	r7, sp, #0
 8007fd4:	6078      	str	r0, [r7, #4]
 8007fd6:	460b      	mov	r3, r1
 8007fd8:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close CUSTOM_HID EP IN */
  (void)USBD_LL_CloseEP(pdev, CUSTOM_HID_EPIN_ADDR);
 8007fda:	2181      	movs	r1, #129	; 0x81
 8007fdc:	6878      	ldr	r0, [r7, #4]
 8007fde:	f7fe fd1a 	bl	8006a16 <USBD_LL_CloseEP>
  pdev->ep_in[CUSTOM_HID_EPIN_ADDR & 0xFU].is_used = 0U;
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	2200      	movs	r2, #0
 8007fe6:	871a      	strh	r2, [r3, #56]	; 0x38
  pdev->ep_in[CUSTOM_HID_EPIN_ADDR & 0xFU].bInterval = 0U;
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	2200      	movs	r2, #0
 8007fec:	875a      	strh	r2, [r3, #58]	; 0x3a

  /* Close CUSTOM_HID EP OUT */
  (void)USBD_LL_CloseEP(pdev, CUSTOM_HID_EPOUT_ADDR);
 8007fee:	2101      	movs	r1, #1
 8007ff0:	6878      	ldr	r0, [r7, #4]
 8007ff2:	f7fe fd10 	bl	8006a16 <USBD_LL_CloseEP>
  pdev->ep_out[CUSTOM_HID_EPOUT_ADDR & 0xFU].is_used = 0U;
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	2200      	movs	r2, #0
 8007ffa:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178
  pdev->ep_out[CUSTOM_HID_EPOUT_ADDR & 0xFU].bInterval = 0U;
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	2200      	movs	r2, #0
 8008002:	f8a3 217a 	strh.w	r2, [r3, #378]	; 0x17a

  /* Free allocated memory */
  if (pdev->pClassData != NULL)
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800800c:	2b00      	cmp	r3, #0
 800800e:	d00e      	beq.n	800802e <USBD_CUSTOM_HID_DeInit+0x60>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->DeInit();
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008016:	689b      	ldr	r3, [r3, #8]
 8008018:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008020:	4618      	mov	r0, r3
 8008022:	f7fe fdf1 	bl	8006c08 <USBD_static_free>
    pdev->pClassData = NULL;
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	2200      	movs	r2, #0
 800802a:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800802e:	2300      	movs	r3, #0
}
 8008030:	4618      	mov	r0, r3
 8008032:	3708      	adds	r7, #8
 8008034:	46bd      	mov	sp, r7
 8008036:	bd80      	pop	{r7, pc}

08008038 <USBD_CUSTOM_HID_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_Setup(USBD_HandleTypeDef *pdev,
                                     USBD_SetupReqTypedef *req)
{
 8008038:	b580      	push	{r7, lr}
 800803a:	b088      	sub	sp, #32
 800803c:	af00      	add	r7, sp, #0
 800803e:	6078      	str	r0, [r7, #4]
 8008040:	6039      	str	r1, [r7, #0]
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData;
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008048:	613b      	str	r3, [r7, #16]
  uint16_t len = 0U;
 800804a:	2300      	movs	r3, #0
 800804c:	83fb      	strh	r3, [r7, #30]
  uint8_t  *pbuf = NULL;
 800804e:	2300      	movs	r3, #0
 8008050:	61bb      	str	r3, [r7, #24]
  uint16_t status_info = 0U;
 8008052:	2300      	movs	r3, #0
 8008054:	81fb      	strh	r3, [r7, #14]
  USBD_StatusTypeDef ret = USBD_OK;
 8008056:	2300      	movs	r3, #0
 8008058:	75fb      	strb	r3, [r7, #23]

  if (hhid == NULL)
 800805a:	693b      	ldr	r3, [r7, #16]
 800805c:	2b00      	cmp	r3, #0
 800805e:	d101      	bne.n	8008064 <USBD_CUSTOM_HID_Setup+0x2c>
  {
    return (uint8_t)USBD_FAIL;
 8008060:	2303      	movs	r3, #3
 8008062:	e0ed      	b.n	8008240 <USBD_CUSTOM_HID_Setup+0x208>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008064:	683b      	ldr	r3, [r7, #0]
 8008066:	781b      	ldrb	r3, [r3, #0]
 8008068:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800806c:	2b00      	cmp	r3, #0
 800806e:	d052      	beq.n	8008116 <USBD_CUSTOM_HID_Setup+0xde>
 8008070:	2b20      	cmp	r3, #32
 8008072:	f040 80dd 	bne.w	8008230 <USBD_CUSTOM_HID_Setup+0x1f8>
  {
    case USB_REQ_TYPE_CLASS:
      switch (req->bRequest)
 8008076:	683b      	ldr	r3, [r7, #0]
 8008078:	785b      	ldrb	r3, [r3, #1]
 800807a:	3b02      	subs	r3, #2
 800807c:	2b09      	cmp	r3, #9
 800807e:	d842      	bhi.n	8008106 <USBD_CUSTOM_HID_Setup+0xce>
 8008080:	a201      	add	r2, pc, #4	; (adr r2, 8008088 <USBD_CUSTOM_HID_Setup+0x50>)
 8008082:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008086:	bf00      	nop
 8008088:	080080e1 	.word	0x080080e1
 800808c:	080080bf 	.word	0x080080bf
 8008090:	08008107 	.word	0x08008107
 8008094:	08008107 	.word	0x08008107
 8008098:	08008107 	.word	0x08008107
 800809c:	08008107 	.word	0x08008107
 80080a0:	08008107 	.word	0x08008107
 80080a4:	080080f1 	.word	0x080080f1
 80080a8:	080080cf 	.word	0x080080cf
 80080ac:	080080b1 	.word	0x080080b1
      {
        case CUSTOM_HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 80080b0:	683b      	ldr	r3, [r7, #0]
 80080b2:	885b      	ldrh	r3, [r3, #2]
 80080b4:	b2db      	uxtb	r3, r3
 80080b6:	461a      	mov	r2, r3
 80080b8:	693b      	ldr	r3, [r7, #16]
 80080ba:	641a      	str	r2, [r3, #64]	; 0x40
          break;
 80080bc:	e02a      	b.n	8008114 <USBD_CUSTOM_HID_Setup+0xdc>

        case CUSTOM_HID_REQ_GET_PROTOCOL:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->Protocol, 1U);
 80080be:	693b      	ldr	r3, [r7, #16]
 80080c0:	3340      	adds	r3, #64	; 0x40
 80080c2:	2201      	movs	r2, #1
 80080c4:	4619      	mov	r1, r3
 80080c6:	6878      	ldr	r0, [r7, #4]
 80080c8:	f000 fabf 	bl	800864a <USBD_CtlSendData>
          break;
 80080cc:	e022      	b.n	8008114 <USBD_CUSTOM_HID_Setup+0xdc>

        case CUSTOM_HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 80080ce:	683b      	ldr	r3, [r7, #0]
 80080d0:	885b      	ldrh	r3, [r3, #2]
 80080d2:	0a1b      	lsrs	r3, r3, #8
 80080d4:	b29b      	uxth	r3, r3
 80080d6:	b2db      	uxtb	r3, r3
 80080d8:	461a      	mov	r2, r3
 80080da:	693b      	ldr	r3, [r7, #16]
 80080dc:	645a      	str	r2, [r3, #68]	; 0x44
          break;
 80080de:	e019      	b.n	8008114 <USBD_CUSTOM_HID_Setup+0xdc>

        case CUSTOM_HID_REQ_GET_IDLE:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->IdleState, 1U);
 80080e0:	693b      	ldr	r3, [r7, #16]
 80080e2:	3344      	adds	r3, #68	; 0x44
 80080e4:	2201      	movs	r2, #1
 80080e6:	4619      	mov	r1, r3
 80080e8:	6878      	ldr	r0, [r7, #4]
 80080ea:	f000 faae 	bl	800864a <USBD_CtlSendData>
          break;
 80080ee:	e011      	b.n	8008114 <USBD_CUSTOM_HID_Setup+0xdc>

        case CUSTOM_HID_REQ_SET_REPORT:
          hhid->IsReportAvailable = 1U;
 80080f0:	693b      	ldr	r3, [r7, #16]
 80080f2:	2201      	movs	r2, #1
 80080f4:	64da      	str	r2, [r3, #76]	; 0x4c
          (void)USBD_CtlPrepareRx(pdev, hhid->Report_buf, req->wLength);
 80080f6:	6939      	ldr	r1, [r7, #16]
 80080f8:	683b      	ldr	r3, [r7, #0]
 80080fa:	88db      	ldrh	r3, [r3, #6]
 80080fc:	461a      	mov	r2, r3
 80080fe:	6878      	ldr	r0, [r7, #4]
 8008100:	f000 facf 	bl	80086a2 <USBD_CtlPrepareRx>
          break;
 8008104:	e006      	b.n	8008114 <USBD_CUSTOM_HID_Setup+0xdc>

        default:
          USBD_CtlError(pdev, req);
 8008106:	6839      	ldr	r1, [r7, #0]
 8008108:	6878      	ldr	r0, [r7, #4]
 800810a:	f7ff fe45 	bl	8007d98 <USBD_CtlError>
          ret = USBD_FAIL;
 800810e:	2303      	movs	r3, #3
 8008110:	75fb      	strb	r3, [r7, #23]
          break;
 8008112:	bf00      	nop
      }
      break;
 8008114:	e093      	b.n	800823e <USBD_CUSTOM_HID_Setup+0x206>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008116:	683b      	ldr	r3, [r7, #0]
 8008118:	785b      	ldrb	r3, [r3, #1]
 800811a:	2b0b      	cmp	r3, #11
 800811c:	d87f      	bhi.n	800821e <USBD_CUSTOM_HID_Setup+0x1e6>
 800811e:	a201      	add	r2, pc, #4	; (adr r2, 8008124 <USBD_CUSTOM_HID_Setup+0xec>)
 8008120:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008124:	08008155 	.word	0x08008155
 8008128:	0800822d 	.word	0x0800822d
 800812c:	0800821f 	.word	0x0800821f
 8008130:	0800821f 	.word	0x0800821f
 8008134:	0800821f 	.word	0x0800821f
 8008138:	0800821f 	.word	0x0800821f
 800813c:	0800817f 	.word	0x0800817f
 8008140:	0800821f 	.word	0x0800821f
 8008144:	0800821f 	.word	0x0800821f
 8008148:	0800821f 	.word	0x0800821f
 800814c:	080081cd 	.word	0x080081cd
 8008150:	080081f7 	.word	0x080081f7
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800815a:	b2db      	uxtb	r3, r3
 800815c:	2b03      	cmp	r3, #3
 800815e:	d107      	bne.n	8008170 <USBD_CUSTOM_HID_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8008160:	f107 030e 	add.w	r3, r7, #14
 8008164:	2202      	movs	r2, #2
 8008166:	4619      	mov	r1, r3
 8008168:	6878      	ldr	r0, [r7, #4]
 800816a:	f000 fa6e 	bl	800864a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800816e:	e05e      	b.n	800822e <USBD_CUSTOM_HID_Setup+0x1f6>
            USBD_CtlError(pdev, req);
 8008170:	6839      	ldr	r1, [r7, #0]
 8008172:	6878      	ldr	r0, [r7, #4]
 8008174:	f7ff fe10 	bl	8007d98 <USBD_CtlError>
            ret = USBD_FAIL;
 8008178:	2303      	movs	r3, #3
 800817a:	75fb      	strb	r3, [r7, #23]
          break;
 800817c:	e057      	b.n	800822e <USBD_CUSTOM_HID_Setup+0x1f6>

        case USB_REQ_GET_DESCRIPTOR:
          if ((req->wValue >> 8) == CUSTOM_HID_REPORT_DESC)
 800817e:	683b      	ldr	r3, [r7, #0]
 8008180:	885b      	ldrh	r3, [r3, #2]
 8008182:	0a1b      	lsrs	r3, r3, #8
 8008184:	b29b      	uxth	r3, r3
 8008186:	2b22      	cmp	r3, #34	; 0x22
 8008188:	d10b      	bne.n	80081a2 <USBD_CUSTOM_HID_Setup+0x16a>
          {
            len = MIN(USBD_CUSTOM_HID_REPORT_DESC_SIZE, req->wLength);
 800818a:	683b      	ldr	r3, [r7, #0]
 800818c:	88db      	ldrh	r3, [r3, #6]
 800818e:	2b21      	cmp	r3, #33	; 0x21
 8008190:	bf28      	it	cs
 8008192:	2321      	movcs	r3, #33	; 0x21
 8008194:	83fb      	strh	r3, [r7, #30]
            pbuf = ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->pReport;
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	61bb      	str	r3, [r7, #24]
 80081a0:	e00d      	b.n	80081be <USBD_CUSTOM_HID_Setup+0x186>
          }
          else
          {
            if ((req->wValue >> 8) == CUSTOM_HID_DESCRIPTOR_TYPE)
 80081a2:	683b      	ldr	r3, [r7, #0]
 80081a4:	885b      	ldrh	r3, [r3, #2]
 80081a6:	0a1b      	lsrs	r3, r3, #8
 80081a8:	b29b      	uxth	r3, r3
 80081aa:	2b21      	cmp	r3, #33	; 0x21
 80081ac:	d107      	bne.n	80081be <USBD_CUSTOM_HID_Setup+0x186>
            {
              pbuf = USBD_CUSTOM_HID_Desc;
 80081ae:	4b26      	ldr	r3, [pc, #152]	; (8008248 <USBD_CUSTOM_HID_Setup+0x210>)
 80081b0:	61bb      	str	r3, [r7, #24]
              len = MIN(USB_CUSTOM_HID_DESC_SIZ, req->wLength);
 80081b2:	683b      	ldr	r3, [r7, #0]
 80081b4:	88db      	ldrh	r3, [r3, #6]
 80081b6:	2b09      	cmp	r3, #9
 80081b8:	bf28      	it	cs
 80081ba:	2309      	movcs	r3, #9
 80081bc:	83fb      	strh	r3, [r7, #30]
            }
          }

          (void)USBD_CtlSendData(pdev, pbuf, len);
 80081be:	8bfb      	ldrh	r3, [r7, #30]
 80081c0:	461a      	mov	r2, r3
 80081c2:	69b9      	ldr	r1, [r7, #24]
 80081c4:	6878      	ldr	r0, [r7, #4]
 80081c6:	f000 fa40 	bl	800864a <USBD_CtlSendData>
          break;
 80081ca:	e030      	b.n	800822e <USBD_CUSTOM_HID_Setup+0x1f6>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80081d2:	b2db      	uxtb	r3, r3
 80081d4:	2b03      	cmp	r3, #3
 80081d6:	d107      	bne.n	80081e8 <USBD_CUSTOM_HID_Setup+0x1b0>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->AltSetting, 1U);
 80081d8:	693b      	ldr	r3, [r7, #16]
 80081da:	3348      	adds	r3, #72	; 0x48
 80081dc:	2201      	movs	r2, #1
 80081de:	4619      	mov	r1, r3
 80081e0:	6878      	ldr	r0, [r7, #4]
 80081e2:	f000 fa32 	bl	800864a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80081e6:	e022      	b.n	800822e <USBD_CUSTOM_HID_Setup+0x1f6>
            USBD_CtlError(pdev, req);
 80081e8:	6839      	ldr	r1, [r7, #0]
 80081ea:	6878      	ldr	r0, [r7, #4]
 80081ec:	f7ff fdd4 	bl	8007d98 <USBD_CtlError>
            ret = USBD_FAIL;
 80081f0:	2303      	movs	r3, #3
 80081f2:	75fb      	strb	r3, [r7, #23]
          break;
 80081f4:	e01b      	b.n	800822e <USBD_CUSTOM_HID_Setup+0x1f6>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80081fc:	b2db      	uxtb	r3, r3
 80081fe:	2b03      	cmp	r3, #3
 8008200:	d106      	bne.n	8008210 <USBD_CUSTOM_HID_Setup+0x1d8>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 8008202:	683b      	ldr	r3, [r7, #0]
 8008204:	885b      	ldrh	r3, [r3, #2]
 8008206:	b2db      	uxtb	r3, r3
 8008208:	461a      	mov	r2, r3
 800820a:	693b      	ldr	r3, [r7, #16]
 800820c:	649a      	str	r2, [r3, #72]	; 0x48
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800820e:	e00e      	b.n	800822e <USBD_CUSTOM_HID_Setup+0x1f6>
            USBD_CtlError(pdev, req);
 8008210:	6839      	ldr	r1, [r7, #0]
 8008212:	6878      	ldr	r0, [r7, #4]
 8008214:	f7ff fdc0 	bl	8007d98 <USBD_CtlError>
            ret = USBD_FAIL;
 8008218:	2303      	movs	r3, #3
 800821a:	75fb      	strb	r3, [r7, #23]
          break;
 800821c:	e007      	b.n	800822e <USBD_CUSTOM_HID_Setup+0x1f6>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800821e:	6839      	ldr	r1, [r7, #0]
 8008220:	6878      	ldr	r0, [r7, #4]
 8008222:	f7ff fdb9 	bl	8007d98 <USBD_CtlError>
          ret = USBD_FAIL;
 8008226:	2303      	movs	r3, #3
 8008228:	75fb      	strb	r3, [r7, #23]
          break;
 800822a:	e000      	b.n	800822e <USBD_CUSTOM_HID_Setup+0x1f6>
          break;
 800822c:	bf00      	nop
      }
      break;
 800822e:	e006      	b.n	800823e <USBD_CUSTOM_HID_Setup+0x206>

    default:
      USBD_CtlError(pdev, req);
 8008230:	6839      	ldr	r1, [r7, #0]
 8008232:	6878      	ldr	r0, [r7, #4]
 8008234:	f7ff fdb0 	bl	8007d98 <USBD_CtlError>
      ret = USBD_FAIL;
 8008238:	2303      	movs	r3, #3
 800823a:	75fb      	strb	r3, [r7, #23]
      break;
 800823c:	bf00      	nop
  }
  return (uint8_t)ret;
 800823e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008240:	4618      	mov	r0, r3
 8008242:	3720      	adds	r7, #32
 8008244:	46bd      	mov	sp, r7
 8008246:	bd80      	pop	{r7, pc}
 8008248:	20000100 	.word	0x20000100

0800824c <USBD_CUSTOM_HID_SendReport>:
  * @param  buff: pointer to report
  * @retval status
  */
uint8_t USBD_CUSTOM_HID_SendReport(USBD_HandleTypeDef *pdev,
                                   uint8_t *report, uint16_t len)
{
 800824c:	b580      	push	{r7, lr}
 800824e:	b086      	sub	sp, #24
 8008250:	af00      	add	r7, sp, #0
 8008252:	60f8      	str	r0, [r7, #12]
 8008254:	60b9      	str	r1, [r7, #8]
 8008256:	4613      	mov	r3, r2
 8008258:	80fb      	strh	r3, [r7, #6]
  USBD_CUSTOM_HID_HandleTypeDef *hhid;

  if (pdev->pClassData == NULL)
 800825a:	68fb      	ldr	r3, [r7, #12]
 800825c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008260:	2b00      	cmp	r3, #0
 8008262:	d101      	bne.n	8008268 <USBD_CUSTOM_HID_SendReport+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 8008264:	2303      	movs	r3, #3
 8008266:	e01c      	b.n	80082a2 <USBD_CUSTOM_HID_SendReport+0x56>
  }

  hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData;
 8008268:	68fb      	ldr	r3, [r7, #12]
 800826a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800826e:	617b      	str	r3, [r7, #20]

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008270:	68fb      	ldr	r3, [r7, #12]
 8008272:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008276:	b2db      	uxtb	r3, r3
 8008278:	2b03      	cmp	r3, #3
 800827a:	d111      	bne.n	80082a0 <USBD_CUSTOM_HID_SendReport+0x54>
  {
    if (hhid->state == CUSTOM_HID_IDLE)
 800827c:	697b      	ldr	r3, [r7, #20]
 800827e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8008282:	2b00      	cmp	r3, #0
 8008284:	d10a      	bne.n	800829c <USBD_CUSTOM_HID_SendReport+0x50>
    {
      hhid->state = CUSTOM_HID_BUSY;
 8008286:	697b      	ldr	r3, [r7, #20]
 8008288:	2201      	movs	r2, #1
 800828a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      (void)USBD_LL_Transmit(pdev, CUSTOM_HID_EPIN_ADDR, report, len);
 800828e:	88fb      	ldrh	r3, [r7, #6]
 8008290:	68ba      	ldr	r2, [r7, #8]
 8008292:	2181      	movs	r1, #129	; 0x81
 8008294:	68f8      	ldr	r0, [r7, #12]
 8008296:	f7fe fc66 	bl	8006b66 <USBD_LL_Transmit>
 800829a:	e001      	b.n	80082a0 <USBD_CUSTOM_HID_SendReport+0x54>
    }
    else
    {
      return (uint8_t)USBD_BUSY;
 800829c:	2301      	movs	r3, #1
 800829e:	e000      	b.n	80082a2 <USBD_CUSTOM_HID_SendReport+0x56>
    }
  }
  return (uint8_t)USBD_OK;
 80082a0:	2300      	movs	r3, #0
}
 80082a2:	4618      	mov	r0, r3
 80082a4:	3718      	adds	r7, #24
 80082a6:	46bd      	mov	sp, r7
 80082a8:	bd80      	pop	{r7, pc}
	...

080082ac <USBD_CUSTOM_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetFSCfgDesc(uint16_t *length)
{
 80082ac:	b480      	push	{r7}
 80082ae:	b083      	sub	sp, #12
 80082b0:	af00      	add	r7, sp, #0
 80082b2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_CfgFSDesc);
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	2229      	movs	r2, #41	; 0x29
 80082b8:	801a      	strh	r2, [r3, #0]

  return USBD_CUSTOM_HID_CfgFSDesc;
 80082ba:	4b03      	ldr	r3, [pc, #12]	; (80082c8 <USBD_CUSTOM_HID_GetFSCfgDesc+0x1c>)
}
 80082bc:	4618      	mov	r0, r3
 80082be:	370c      	adds	r7, #12
 80082c0:	46bd      	mov	sp, r7
 80082c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082c6:	4770      	bx	lr
 80082c8:	2000007c 	.word	0x2000007c

080082cc <USBD_CUSTOM_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetHSCfgDesc(uint16_t *length)
{
 80082cc:	b480      	push	{r7}
 80082ce:	b083      	sub	sp, #12
 80082d0:	af00      	add	r7, sp, #0
 80082d2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_CfgHSDesc);
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	2229      	movs	r2, #41	; 0x29
 80082d8:	801a      	strh	r2, [r3, #0]

  return USBD_CUSTOM_HID_CfgHSDesc;
 80082da:	4b03      	ldr	r3, [pc, #12]	; (80082e8 <USBD_CUSTOM_HID_GetHSCfgDesc+0x1c>)
}
 80082dc:	4618      	mov	r0, r3
 80082de:	370c      	adds	r7, #12
 80082e0:	46bd      	mov	sp, r7
 80082e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082e6:	4770      	bx	lr
 80082e8:	200000a8 	.word	0x200000a8

080082ec <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80082ec:	b480      	push	{r7}
 80082ee:	b083      	sub	sp, #12
 80082f0:	af00      	add	r7, sp, #0
 80082f2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_OtherSpeedCfgDesc);
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	2229      	movs	r2, #41	; 0x29
 80082f8:	801a      	strh	r2, [r3, #0]

  return USBD_CUSTOM_HID_OtherSpeedCfgDesc;
 80082fa:	4b03      	ldr	r3, [pc, #12]	; (8008308 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x1c>)
}
 80082fc:	4618      	mov	r0, r3
 80082fe:	370c      	adds	r7, #12
 8008300:	46bd      	mov	sp, r7
 8008302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008306:	4770      	bx	lr
 8008308:	200000d4 	.word	0x200000d4

0800830c <USBD_CUSTOM_HID_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800830c:	b480      	push	{r7}
 800830e:	b083      	sub	sp, #12
 8008310:	af00      	add	r7, sp, #0
 8008312:	6078      	str	r0, [r7, #4]
 8008314:	460b      	mov	r3, r1
 8008316:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData)->state = CUSTOM_HID_IDLE;
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800831e:	2200      	movs	r2, #0
 8008320:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return (uint8_t)USBD_OK;
 8008324:	2300      	movs	r3, #0
}
 8008326:	4618      	mov	r0, r3
 8008328:	370c      	adds	r7, #12
 800832a:	46bd      	mov	sp, r7
 800832c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008330:	4770      	bx	lr

08008332 <USBD_CUSTOM_HID_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008332:	b580      	push	{r7, lr}
 8008334:	b084      	sub	sp, #16
 8008336:	af00      	add	r7, sp, #0
 8008338:	6078      	str	r0, [r7, #4]
 800833a:	460b      	mov	r3, r1
 800833c:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);
  USBD_CUSTOM_HID_HandleTypeDef *hhid;

  if (pdev->pClassData == NULL)
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008344:	2b00      	cmp	r3, #0
 8008346:	d101      	bne.n	800834c <USBD_CUSTOM_HID_DataOut+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 8008348:	2303      	movs	r3, #3
 800834a:	e00b      	b.n	8008364 <USBD_CUSTOM_HID_DataOut+0x32>
  }

  hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData;
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008352:	60fb      	str	r3, [r7, #12]

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application processing */
  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->OutEvent(hhid->Report_buf);
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800835a:	68db      	ldr	r3, [r3, #12]
 800835c:	68fa      	ldr	r2, [r7, #12]
 800835e:	4610      	mov	r0, r2
 8008360:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8008362:	2300      	movs	r3, #0
}
 8008364:	4618      	mov	r0, r3
 8008366:	3710      	adds	r7, #16
 8008368:	46bd      	mov	sp, r7
 800836a:	bd80      	pop	{r7, pc}

0800836c <USBD_CUSTOM_HID_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CUSTOM_HID_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800836c:	b580      	push	{r7, lr}
 800836e:	b084      	sub	sp, #16
 8008370:	af00      	add	r7, sp, #0
 8008372:	6078      	str	r0, [r7, #4]
  USBD_CUSTOM_HID_HandleTypeDef *hhid;

  if (pdev->pClassData == NULL)
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800837a:	2b00      	cmp	r3, #0
 800837c:	d101      	bne.n	8008382 <USBD_CUSTOM_HID_ReceivePacket+0x16>
  {
    return (uint8_t)USBD_FAIL;
 800837e:	2303      	movs	r3, #3
 8008380:	e00a      	b.n	8008398 <USBD_CUSTOM_HID_ReceivePacket+0x2c>
  }

  hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData;
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008388:	60fb      	str	r3, [r7, #12]

  /* Resume USB Out process */
  (void)USBD_LL_PrepareReceive(pdev, CUSTOM_HID_EPOUT_ADDR, hhid->Report_buf,
 800838a:	68fa      	ldr	r2, [r7, #12]
 800838c:	2340      	movs	r3, #64	; 0x40
 800838e:	2101      	movs	r1, #1
 8008390:	6878      	ldr	r0, [r7, #4]
 8008392:	f7fe fc09 	bl	8006ba8 <USBD_LL_PrepareReceive>
                               USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);

  return (uint8_t)USBD_OK;
 8008396:	2300      	movs	r3, #0
}
 8008398:	4618      	mov	r0, r3
 800839a:	3710      	adds	r7, #16
 800839c:	46bd      	mov	sp, r7
 800839e:	bd80      	pop	{r7, pc}

080083a0 <USBD_CUSTOM_HID_EP0_RxReady>:
  *         Handles control request data.
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80083a0:	b580      	push	{r7, lr}
 80083a2:	b084      	sub	sp, #16
 80083a4:	af00      	add	r7, sp, #0
 80083a6:	6078      	str	r0, [r7, #4]
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData;
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80083ae:	60fb      	str	r3, [r7, #12]

  if (hhid == NULL)
 80083b0:	68fb      	ldr	r3, [r7, #12]
 80083b2:	2b00      	cmp	r3, #0
 80083b4:	d101      	bne.n	80083ba <USBD_CUSTOM_HID_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 80083b6:	2303      	movs	r3, #3
 80083b8:	e00e      	b.n	80083d8 <USBD_CUSTOM_HID_EP0_RxReady+0x38>
  }

  if (hhid->IsReportAvailable == 1U)
 80083ba:	68fb      	ldr	r3, [r7, #12]
 80083bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80083be:	2b01      	cmp	r3, #1
 80083c0:	d109      	bne.n	80083d6 <USBD_CUSTOM_HID_EP0_RxReady+0x36>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->OutEvent(hhid->Report_buf);
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80083c8:	68db      	ldr	r3, [r3, #12]
 80083ca:	68fa      	ldr	r2, [r7, #12]
 80083cc:	4610      	mov	r0, r2
 80083ce:	4798      	blx	r3
    hhid->IsReportAvailable = 0U;
 80083d0:	68fb      	ldr	r3, [r7, #12]
 80083d2:	2200      	movs	r2, #0
 80083d4:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return (uint8_t)USBD_OK;
 80083d6:	2300      	movs	r3, #0
}
 80083d8:	4618      	mov	r0, r3
 80083da:	3710      	adds	r7, #16
 80083dc:	46bd      	mov	sp, r7
 80083de:	bd80      	pop	{r7, pc}

080083e0 <USBD_CUSTOM_HID_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 80083e0:	b480      	push	{r7}
 80083e2:	b083      	sub	sp, #12
 80083e4:	af00      	add	r7, sp, #0
 80083e6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_DeviceQualifierDesc);
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	220a      	movs	r2, #10
 80083ec:	801a      	strh	r2, [r3, #0]

  return USBD_CUSTOM_HID_DeviceQualifierDesc;
 80083ee:	4b03      	ldr	r3, [pc, #12]	; (80083fc <USBD_CUSTOM_HID_GetDeviceQualifierDesc+0x1c>)
}
 80083f0:	4618      	mov	r0, r3
 80083f2:	370c      	adds	r7, #12
 80083f4:	46bd      	mov	sp, r7
 80083f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083fa:	4770      	bx	lr
 80083fc:	2000010c 	.word	0x2000010c

08008400 <USBD_CUSTOM_HID_RegisterInterface>:
  * @param  fops: CUSTOMHID Interface callback
  * @retval status
  */
uint8_t USBD_CUSTOM_HID_RegisterInterface(USBD_HandleTypeDef *pdev,
                                          USBD_CUSTOM_HID_ItfTypeDef *fops)
{
 8008400:	b480      	push	{r7}
 8008402:	b083      	sub	sp, #12
 8008404:	af00      	add	r7, sp, #0
 8008406:	6078      	str	r0, [r7, #4]
 8008408:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800840a:	683b      	ldr	r3, [r7, #0]
 800840c:	2b00      	cmp	r3, #0
 800840e:	d101      	bne.n	8008414 <USBD_CUSTOM_HID_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8008410:	2303      	movs	r3, #3
 8008412:	e004      	b.n	800841e <USBD_CUSTOM_HID_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	683a      	ldr	r2, [r7, #0]
 8008418:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 800841c:	2300      	movs	r3, #0
}
 800841e:	4618      	mov	r0, r3
 8008420:	370c      	adds	r7, #12
 8008422:	46bd      	mov	sp, r7
 8008424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008428:	4770      	bx	lr
	...

0800842c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800842c:	b480      	push	{r7}
 800842e:	b083      	sub	sp, #12
 8008430:	af00      	add	r7, sp, #0
 8008432:	4603      	mov	r3, r0
 8008434:	6039      	str	r1, [r7, #0]
 8008436:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8008438:	683b      	ldr	r3, [r7, #0]
 800843a:	2212      	movs	r2, #18
 800843c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800843e:	4b03      	ldr	r3, [pc, #12]	; (800844c <USBD_FS_DeviceDescriptor+0x20>)
}
 8008440:	4618      	mov	r0, r3
 8008442:	370c      	adds	r7, #12
 8008444:	46bd      	mov	sp, r7
 8008446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800844a:	4770      	bx	lr
 800844c:	20000134 	.word	0x20000134

08008450 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008450:	b480      	push	{r7}
 8008452:	b083      	sub	sp, #12
 8008454:	af00      	add	r7, sp, #0
 8008456:	4603      	mov	r3, r0
 8008458:	6039      	str	r1, [r7, #0]
 800845a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800845c:	683b      	ldr	r3, [r7, #0]
 800845e:	2204      	movs	r2, #4
 8008460:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8008462:	4b03      	ldr	r3, [pc, #12]	; (8008470 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8008464:	4618      	mov	r0, r3
 8008466:	370c      	adds	r7, #12
 8008468:	46bd      	mov	sp, r7
 800846a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800846e:	4770      	bx	lr
 8008470:	20000148 	.word	0x20000148

08008474 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008474:	b580      	push	{r7, lr}
 8008476:	b082      	sub	sp, #8
 8008478:	af00      	add	r7, sp, #0
 800847a:	4603      	mov	r3, r0
 800847c:	6039      	str	r1, [r7, #0]
 800847e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008480:	79fb      	ldrb	r3, [r7, #7]
 8008482:	2b00      	cmp	r3, #0
 8008484:	d105      	bne.n	8008492 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008486:	683a      	ldr	r2, [r7, #0]
 8008488:	4907      	ldr	r1, [pc, #28]	; (80084a8 <USBD_FS_ProductStrDescriptor+0x34>)
 800848a:	4808      	ldr	r0, [pc, #32]	; (80084ac <USBD_FS_ProductStrDescriptor+0x38>)
 800848c:	f7ff fc95 	bl	8007dba <USBD_GetString>
 8008490:	e004      	b.n	800849c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008492:	683a      	ldr	r2, [r7, #0]
 8008494:	4904      	ldr	r1, [pc, #16]	; (80084a8 <USBD_FS_ProductStrDescriptor+0x34>)
 8008496:	4805      	ldr	r0, [pc, #20]	; (80084ac <USBD_FS_ProductStrDescriptor+0x38>)
 8008498:	f7ff fc8f 	bl	8007dba <USBD_GetString>
  }
  return USBD_StrDesc;
 800849c:	4b02      	ldr	r3, [pc, #8]	; (80084a8 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800849e:	4618      	mov	r0, r3
 80084a0:	3708      	adds	r7, #8
 80084a2:	46bd      	mov	sp, r7
 80084a4:	bd80      	pop	{r7, pc}
 80084a6:	bf00      	nop
 80084a8:	200049c8 	.word	0x200049c8
 80084ac:	08009c88 	.word	0x08009c88

080084b0 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80084b0:	b580      	push	{r7, lr}
 80084b2:	b082      	sub	sp, #8
 80084b4:	af00      	add	r7, sp, #0
 80084b6:	4603      	mov	r3, r0
 80084b8:	6039      	str	r1, [r7, #0]
 80084ba:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80084bc:	683a      	ldr	r2, [r7, #0]
 80084be:	4904      	ldr	r1, [pc, #16]	; (80084d0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80084c0:	4804      	ldr	r0, [pc, #16]	; (80084d4 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80084c2:	f7ff fc7a 	bl	8007dba <USBD_GetString>
  return USBD_StrDesc;
 80084c6:	4b02      	ldr	r3, [pc, #8]	; (80084d0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80084c8:	4618      	mov	r0, r3
 80084ca:	3708      	adds	r7, #8
 80084cc:	46bd      	mov	sp, r7
 80084ce:	bd80      	pop	{r7, pc}
 80084d0:	200049c8 	.word	0x200049c8
 80084d4:	08009c9c 	.word	0x08009c9c

080084d8 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80084d8:	b580      	push	{r7, lr}
 80084da:	b082      	sub	sp, #8
 80084dc:	af00      	add	r7, sp, #0
 80084de:	4603      	mov	r3, r0
 80084e0:	6039      	str	r1, [r7, #0]
 80084e2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80084e4:	683b      	ldr	r3, [r7, #0]
 80084e6:	221a      	movs	r2, #26
 80084e8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80084ea:	f000 f843 	bl	8008574 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80084ee:	4b02      	ldr	r3, [pc, #8]	; (80084f8 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80084f0:	4618      	mov	r0, r3
 80084f2:	3708      	adds	r7, #8
 80084f4:	46bd      	mov	sp, r7
 80084f6:	bd80      	pop	{r7, pc}
 80084f8:	2000014c 	.word	0x2000014c

080084fc <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80084fc:	b580      	push	{r7, lr}
 80084fe:	b082      	sub	sp, #8
 8008500:	af00      	add	r7, sp, #0
 8008502:	4603      	mov	r3, r0
 8008504:	6039      	str	r1, [r7, #0]
 8008506:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8008508:	79fb      	ldrb	r3, [r7, #7]
 800850a:	2b00      	cmp	r3, #0
 800850c:	d105      	bne.n	800851a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800850e:	683a      	ldr	r2, [r7, #0]
 8008510:	4907      	ldr	r1, [pc, #28]	; (8008530 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008512:	4808      	ldr	r0, [pc, #32]	; (8008534 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008514:	f7ff fc51 	bl	8007dba <USBD_GetString>
 8008518:	e004      	b.n	8008524 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800851a:	683a      	ldr	r2, [r7, #0]
 800851c:	4904      	ldr	r1, [pc, #16]	; (8008530 <USBD_FS_ConfigStrDescriptor+0x34>)
 800851e:	4805      	ldr	r0, [pc, #20]	; (8008534 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008520:	f7ff fc4b 	bl	8007dba <USBD_GetString>
  }
  return USBD_StrDesc;
 8008524:	4b02      	ldr	r3, [pc, #8]	; (8008530 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8008526:	4618      	mov	r0, r3
 8008528:	3708      	adds	r7, #8
 800852a:	46bd      	mov	sp, r7
 800852c:	bd80      	pop	{r7, pc}
 800852e:	bf00      	nop
 8008530:	200049c8 	.word	0x200049c8
 8008534:	08009ca8 	.word	0x08009ca8

08008538 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008538:	b580      	push	{r7, lr}
 800853a:	b082      	sub	sp, #8
 800853c:	af00      	add	r7, sp, #0
 800853e:	4603      	mov	r3, r0
 8008540:	6039      	str	r1, [r7, #0]
 8008542:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008544:	79fb      	ldrb	r3, [r7, #7]
 8008546:	2b00      	cmp	r3, #0
 8008548:	d105      	bne.n	8008556 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800854a:	683a      	ldr	r2, [r7, #0]
 800854c:	4907      	ldr	r1, [pc, #28]	; (800856c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800854e:	4808      	ldr	r0, [pc, #32]	; (8008570 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008550:	f7ff fc33 	bl	8007dba <USBD_GetString>
 8008554:	e004      	b.n	8008560 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008556:	683a      	ldr	r2, [r7, #0]
 8008558:	4904      	ldr	r1, [pc, #16]	; (800856c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800855a:	4805      	ldr	r0, [pc, #20]	; (8008570 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800855c:	f7ff fc2d 	bl	8007dba <USBD_GetString>
  }
  return USBD_StrDesc;
 8008560:	4b02      	ldr	r3, [pc, #8]	; (800856c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8008562:	4618      	mov	r0, r3
 8008564:	3708      	adds	r7, #8
 8008566:	46bd      	mov	sp, r7
 8008568:	bd80      	pop	{r7, pc}
 800856a:	bf00      	nop
 800856c:	200049c8 	.word	0x200049c8
 8008570:	08009cbc 	.word	0x08009cbc

08008574 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008574:	b580      	push	{r7, lr}
 8008576:	b084      	sub	sp, #16
 8008578:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800857a:	4b0f      	ldr	r3, [pc, #60]	; (80085b8 <Get_SerialNum+0x44>)
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008580:	4b0e      	ldr	r3, [pc, #56]	; (80085bc <Get_SerialNum+0x48>)
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8008586:	4b0e      	ldr	r3, [pc, #56]	; (80085c0 <Get_SerialNum+0x4c>)
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800858c:	68fa      	ldr	r2, [r7, #12]
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	4413      	add	r3, r2
 8008592:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008594:	68fb      	ldr	r3, [r7, #12]
 8008596:	2b00      	cmp	r3, #0
 8008598:	d009      	beq.n	80085ae <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800859a:	2208      	movs	r2, #8
 800859c:	4909      	ldr	r1, [pc, #36]	; (80085c4 <Get_SerialNum+0x50>)
 800859e:	68f8      	ldr	r0, [r7, #12]
 80085a0:	f000 f814 	bl	80085cc <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80085a4:	2204      	movs	r2, #4
 80085a6:	4908      	ldr	r1, [pc, #32]	; (80085c8 <Get_SerialNum+0x54>)
 80085a8:	68b8      	ldr	r0, [r7, #8]
 80085aa:	f000 f80f 	bl	80085cc <IntToUnicode>
  }
}
 80085ae:	bf00      	nop
 80085b0:	3710      	adds	r7, #16
 80085b2:	46bd      	mov	sp, r7
 80085b4:	bd80      	pop	{r7, pc}
 80085b6:	bf00      	nop
 80085b8:	1fff7a10 	.word	0x1fff7a10
 80085bc:	1fff7a14 	.word	0x1fff7a14
 80085c0:	1fff7a18 	.word	0x1fff7a18
 80085c4:	2000014e 	.word	0x2000014e
 80085c8:	2000015e 	.word	0x2000015e

080085cc <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80085cc:	b480      	push	{r7}
 80085ce:	b087      	sub	sp, #28
 80085d0:	af00      	add	r7, sp, #0
 80085d2:	60f8      	str	r0, [r7, #12]
 80085d4:	60b9      	str	r1, [r7, #8]
 80085d6:	4613      	mov	r3, r2
 80085d8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80085da:	2300      	movs	r3, #0
 80085dc:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80085de:	2300      	movs	r3, #0
 80085e0:	75fb      	strb	r3, [r7, #23]
 80085e2:	e027      	b.n	8008634 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80085e4:	68fb      	ldr	r3, [r7, #12]
 80085e6:	0f1b      	lsrs	r3, r3, #28
 80085e8:	2b09      	cmp	r3, #9
 80085ea:	d80b      	bhi.n	8008604 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80085ec:	68fb      	ldr	r3, [r7, #12]
 80085ee:	0f1b      	lsrs	r3, r3, #28
 80085f0:	b2da      	uxtb	r2, r3
 80085f2:	7dfb      	ldrb	r3, [r7, #23]
 80085f4:	005b      	lsls	r3, r3, #1
 80085f6:	4619      	mov	r1, r3
 80085f8:	68bb      	ldr	r3, [r7, #8]
 80085fa:	440b      	add	r3, r1
 80085fc:	3230      	adds	r2, #48	; 0x30
 80085fe:	b2d2      	uxtb	r2, r2
 8008600:	701a      	strb	r2, [r3, #0]
 8008602:	e00a      	b.n	800861a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008604:	68fb      	ldr	r3, [r7, #12]
 8008606:	0f1b      	lsrs	r3, r3, #28
 8008608:	b2da      	uxtb	r2, r3
 800860a:	7dfb      	ldrb	r3, [r7, #23]
 800860c:	005b      	lsls	r3, r3, #1
 800860e:	4619      	mov	r1, r3
 8008610:	68bb      	ldr	r3, [r7, #8]
 8008612:	440b      	add	r3, r1
 8008614:	3237      	adds	r2, #55	; 0x37
 8008616:	b2d2      	uxtb	r2, r2
 8008618:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800861a:	68fb      	ldr	r3, [r7, #12]
 800861c:	011b      	lsls	r3, r3, #4
 800861e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8008620:	7dfb      	ldrb	r3, [r7, #23]
 8008622:	005b      	lsls	r3, r3, #1
 8008624:	3301      	adds	r3, #1
 8008626:	68ba      	ldr	r2, [r7, #8]
 8008628:	4413      	add	r3, r2
 800862a:	2200      	movs	r2, #0
 800862c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800862e:	7dfb      	ldrb	r3, [r7, #23]
 8008630:	3301      	adds	r3, #1
 8008632:	75fb      	strb	r3, [r7, #23]
 8008634:	7dfa      	ldrb	r2, [r7, #23]
 8008636:	79fb      	ldrb	r3, [r7, #7]
 8008638:	429a      	cmp	r2, r3
 800863a:	d3d3      	bcc.n	80085e4 <IntToUnicode+0x18>
  }
}
 800863c:	bf00      	nop
 800863e:	bf00      	nop
 8008640:	371c      	adds	r7, #28
 8008642:	46bd      	mov	sp, r7
 8008644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008648:	4770      	bx	lr

0800864a <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800864a:	b580      	push	{r7, lr}
 800864c:	b084      	sub	sp, #16
 800864e:	af00      	add	r7, sp, #0
 8008650:	60f8      	str	r0, [r7, #12]
 8008652:	60b9      	str	r1, [r7, #8]
 8008654:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008656:	68fb      	ldr	r3, [r7, #12]
 8008658:	2202      	movs	r2, #2
 800865a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800865e:	68fb      	ldr	r3, [r7, #12]
 8008660:	687a      	ldr	r2, [r7, #4]
 8008662:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8008664:	68fb      	ldr	r3, [r7, #12]
 8008666:	687a      	ldr	r2, [r7, #4]
 8008668:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	68ba      	ldr	r2, [r7, #8]
 800866e:	2100      	movs	r1, #0
 8008670:	68f8      	ldr	r0, [r7, #12]
 8008672:	f7fe fa78 	bl	8006b66 <USBD_LL_Transmit>

  return USBD_OK;
 8008676:	2300      	movs	r3, #0
}
 8008678:	4618      	mov	r0, r3
 800867a:	3710      	adds	r7, #16
 800867c:	46bd      	mov	sp, r7
 800867e:	bd80      	pop	{r7, pc}

08008680 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8008680:	b580      	push	{r7, lr}
 8008682:	b084      	sub	sp, #16
 8008684:	af00      	add	r7, sp, #0
 8008686:	60f8      	str	r0, [r7, #12]
 8008688:	60b9      	str	r1, [r7, #8]
 800868a:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	68ba      	ldr	r2, [r7, #8]
 8008690:	2100      	movs	r1, #0
 8008692:	68f8      	ldr	r0, [r7, #12]
 8008694:	f7fe fa67 	bl	8006b66 <USBD_LL_Transmit>

  return USBD_OK;
 8008698:	2300      	movs	r3, #0
}
 800869a:	4618      	mov	r0, r3
 800869c:	3710      	adds	r7, #16
 800869e:	46bd      	mov	sp, r7
 80086a0:	bd80      	pop	{r7, pc}

080086a2 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80086a2:	b580      	push	{r7, lr}
 80086a4:	b084      	sub	sp, #16
 80086a6:	af00      	add	r7, sp, #0
 80086a8:	60f8      	str	r0, [r7, #12]
 80086aa:	60b9      	str	r1, [r7, #8]
 80086ac:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80086ae:	68fb      	ldr	r3, [r7, #12]
 80086b0:	2203      	movs	r2, #3
 80086b2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80086b6:	68fb      	ldr	r3, [r7, #12]
 80086b8:	687a      	ldr	r2, [r7, #4]
 80086ba:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 80086be:	68fb      	ldr	r3, [r7, #12]
 80086c0:	687a      	ldr	r2, [r7, #4]
 80086c2:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	68ba      	ldr	r2, [r7, #8]
 80086ca:	2100      	movs	r1, #0
 80086cc:	68f8      	ldr	r0, [r7, #12]
 80086ce:	f7fe fa6b 	bl	8006ba8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80086d2:	2300      	movs	r3, #0
}
 80086d4:	4618      	mov	r0, r3
 80086d6:	3710      	adds	r7, #16
 80086d8:	46bd      	mov	sp, r7
 80086da:	bd80      	pop	{r7, pc}

080086dc <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80086dc:	b580      	push	{r7, lr}
 80086de:	b084      	sub	sp, #16
 80086e0:	af00      	add	r7, sp, #0
 80086e2:	60f8      	str	r0, [r7, #12]
 80086e4:	60b9      	str	r1, [r7, #8]
 80086e6:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	68ba      	ldr	r2, [r7, #8]
 80086ec:	2100      	movs	r1, #0
 80086ee:	68f8      	ldr	r0, [r7, #12]
 80086f0:	f7fe fa5a 	bl	8006ba8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80086f4:	2300      	movs	r3, #0
}
 80086f6:	4618      	mov	r0, r3
 80086f8:	3710      	adds	r7, #16
 80086fa:	46bd      	mov	sp, r7
 80086fc:	bd80      	pop	{r7, pc}

080086fe <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80086fe:	b580      	push	{r7, lr}
 8008700:	b082      	sub	sp, #8
 8008702:	af00      	add	r7, sp, #0
 8008704:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	2204      	movs	r2, #4
 800870a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800870e:	2300      	movs	r3, #0
 8008710:	2200      	movs	r2, #0
 8008712:	2100      	movs	r1, #0
 8008714:	6878      	ldr	r0, [r7, #4]
 8008716:	f7fe fa26 	bl	8006b66 <USBD_LL_Transmit>

  return USBD_OK;
 800871a:	2300      	movs	r3, #0
}
 800871c:	4618      	mov	r0, r3
 800871e:	3708      	adds	r7, #8
 8008720:	46bd      	mov	sp, r7
 8008722:	bd80      	pop	{r7, pc}

08008724 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8008724:	b580      	push	{r7, lr}
 8008726:	b082      	sub	sp, #8
 8008728:	af00      	add	r7, sp, #0
 800872a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	2205      	movs	r2, #5
 8008730:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008734:	2300      	movs	r3, #0
 8008736:	2200      	movs	r2, #0
 8008738:	2100      	movs	r1, #0
 800873a:	6878      	ldr	r0, [r7, #4]
 800873c:	f7fe fa34 	bl	8006ba8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008740:	2300      	movs	r3, #0
}
 8008742:	4618      	mov	r0, r3
 8008744:	3708      	adds	r7, #8
 8008746:	46bd      	mov	sp, r7
 8008748:	bd80      	pop	{r7, pc}
	...

0800874c <__errno>:
 800874c:	4b01      	ldr	r3, [pc, #4]	; (8008754 <__errno+0x8>)
 800874e:	6818      	ldr	r0, [r3, #0]
 8008750:	4770      	bx	lr
 8008752:	bf00      	nop
 8008754:	20000168 	.word	0x20000168

08008758 <std>:
 8008758:	2300      	movs	r3, #0
 800875a:	b510      	push	{r4, lr}
 800875c:	4604      	mov	r4, r0
 800875e:	e9c0 3300 	strd	r3, r3, [r0]
 8008762:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008766:	6083      	str	r3, [r0, #8]
 8008768:	8181      	strh	r1, [r0, #12]
 800876a:	6643      	str	r3, [r0, #100]	; 0x64
 800876c:	81c2      	strh	r2, [r0, #14]
 800876e:	6183      	str	r3, [r0, #24]
 8008770:	4619      	mov	r1, r3
 8008772:	2208      	movs	r2, #8
 8008774:	305c      	adds	r0, #92	; 0x5c
 8008776:	f000 f91a 	bl	80089ae <memset>
 800877a:	4b05      	ldr	r3, [pc, #20]	; (8008790 <std+0x38>)
 800877c:	6263      	str	r3, [r4, #36]	; 0x24
 800877e:	4b05      	ldr	r3, [pc, #20]	; (8008794 <std+0x3c>)
 8008780:	62a3      	str	r3, [r4, #40]	; 0x28
 8008782:	4b05      	ldr	r3, [pc, #20]	; (8008798 <std+0x40>)
 8008784:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008786:	4b05      	ldr	r3, [pc, #20]	; (800879c <std+0x44>)
 8008788:	6224      	str	r4, [r4, #32]
 800878a:	6323      	str	r3, [r4, #48]	; 0x30
 800878c:	bd10      	pop	{r4, pc}
 800878e:	bf00      	nop
 8008790:	08008c05 	.word	0x08008c05
 8008794:	08008c27 	.word	0x08008c27
 8008798:	08008c5f 	.word	0x08008c5f
 800879c:	08008c83 	.word	0x08008c83

080087a0 <_cleanup_r>:
 80087a0:	4901      	ldr	r1, [pc, #4]	; (80087a8 <_cleanup_r+0x8>)
 80087a2:	f000 b8af 	b.w	8008904 <_fwalk_reent>
 80087a6:	bf00      	nop
 80087a8:	08008ddd 	.word	0x08008ddd

080087ac <__sfmoreglue>:
 80087ac:	b570      	push	{r4, r5, r6, lr}
 80087ae:	1e4a      	subs	r2, r1, #1
 80087b0:	2568      	movs	r5, #104	; 0x68
 80087b2:	4355      	muls	r5, r2
 80087b4:	460e      	mov	r6, r1
 80087b6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80087ba:	f000 f901 	bl	80089c0 <_malloc_r>
 80087be:	4604      	mov	r4, r0
 80087c0:	b140      	cbz	r0, 80087d4 <__sfmoreglue+0x28>
 80087c2:	2100      	movs	r1, #0
 80087c4:	e9c0 1600 	strd	r1, r6, [r0]
 80087c8:	300c      	adds	r0, #12
 80087ca:	60a0      	str	r0, [r4, #8]
 80087cc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80087d0:	f000 f8ed 	bl	80089ae <memset>
 80087d4:	4620      	mov	r0, r4
 80087d6:	bd70      	pop	{r4, r5, r6, pc}

080087d8 <__sfp_lock_acquire>:
 80087d8:	4801      	ldr	r0, [pc, #4]	; (80087e0 <__sfp_lock_acquire+0x8>)
 80087da:	f000 b8d8 	b.w	800898e <__retarget_lock_acquire_recursive>
 80087de:	bf00      	nop
 80087e0:	20004bd0 	.word	0x20004bd0

080087e4 <__sfp_lock_release>:
 80087e4:	4801      	ldr	r0, [pc, #4]	; (80087ec <__sfp_lock_release+0x8>)
 80087e6:	f000 b8d3 	b.w	8008990 <__retarget_lock_release_recursive>
 80087ea:	bf00      	nop
 80087ec:	20004bd0 	.word	0x20004bd0

080087f0 <__sinit_lock_acquire>:
 80087f0:	4801      	ldr	r0, [pc, #4]	; (80087f8 <__sinit_lock_acquire+0x8>)
 80087f2:	f000 b8cc 	b.w	800898e <__retarget_lock_acquire_recursive>
 80087f6:	bf00      	nop
 80087f8:	20004bcb 	.word	0x20004bcb

080087fc <__sinit_lock_release>:
 80087fc:	4801      	ldr	r0, [pc, #4]	; (8008804 <__sinit_lock_release+0x8>)
 80087fe:	f000 b8c7 	b.w	8008990 <__retarget_lock_release_recursive>
 8008802:	bf00      	nop
 8008804:	20004bcb 	.word	0x20004bcb

08008808 <__sinit>:
 8008808:	b510      	push	{r4, lr}
 800880a:	4604      	mov	r4, r0
 800880c:	f7ff fff0 	bl	80087f0 <__sinit_lock_acquire>
 8008810:	69a3      	ldr	r3, [r4, #24]
 8008812:	b11b      	cbz	r3, 800881c <__sinit+0x14>
 8008814:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008818:	f7ff bff0 	b.w	80087fc <__sinit_lock_release>
 800881c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008820:	6523      	str	r3, [r4, #80]	; 0x50
 8008822:	4b13      	ldr	r3, [pc, #76]	; (8008870 <__sinit+0x68>)
 8008824:	4a13      	ldr	r2, [pc, #76]	; (8008874 <__sinit+0x6c>)
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	62a2      	str	r2, [r4, #40]	; 0x28
 800882a:	42a3      	cmp	r3, r4
 800882c:	bf04      	itt	eq
 800882e:	2301      	moveq	r3, #1
 8008830:	61a3      	streq	r3, [r4, #24]
 8008832:	4620      	mov	r0, r4
 8008834:	f000 f820 	bl	8008878 <__sfp>
 8008838:	6060      	str	r0, [r4, #4]
 800883a:	4620      	mov	r0, r4
 800883c:	f000 f81c 	bl	8008878 <__sfp>
 8008840:	60a0      	str	r0, [r4, #8]
 8008842:	4620      	mov	r0, r4
 8008844:	f000 f818 	bl	8008878 <__sfp>
 8008848:	2200      	movs	r2, #0
 800884a:	60e0      	str	r0, [r4, #12]
 800884c:	2104      	movs	r1, #4
 800884e:	6860      	ldr	r0, [r4, #4]
 8008850:	f7ff ff82 	bl	8008758 <std>
 8008854:	68a0      	ldr	r0, [r4, #8]
 8008856:	2201      	movs	r2, #1
 8008858:	2109      	movs	r1, #9
 800885a:	f7ff ff7d 	bl	8008758 <std>
 800885e:	68e0      	ldr	r0, [r4, #12]
 8008860:	2202      	movs	r2, #2
 8008862:	2112      	movs	r1, #18
 8008864:	f7ff ff78 	bl	8008758 <std>
 8008868:	2301      	movs	r3, #1
 800886a:	61a3      	str	r3, [r4, #24]
 800886c:	e7d2      	b.n	8008814 <__sinit+0xc>
 800886e:	bf00      	nop
 8008870:	08009d4c 	.word	0x08009d4c
 8008874:	080087a1 	.word	0x080087a1

08008878 <__sfp>:
 8008878:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800887a:	4607      	mov	r7, r0
 800887c:	f7ff ffac 	bl	80087d8 <__sfp_lock_acquire>
 8008880:	4b1e      	ldr	r3, [pc, #120]	; (80088fc <__sfp+0x84>)
 8008882:	681e      	ldr	r6, [r3, #0]
 8008884:	69b3      	ldr	r3, [r6, #24]
 8008886:	b913      	cbnz	r3, 800888e <__sfp+0x16>
 8008888:	4630      	mov	r0, r6
 800888a:	f7ff ffbd 	bl	8008808 <__sinit>
 800888e:	3648      	adds	r6, #72	; 0x48
 8008890:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008894:	3b01      	subs	r3, #1
 8008896:	d503      	bpl.n	80088a0 <__sfp+0x28>
 8008898:	6833      	ldr	r3, [r6, #0]
 800889a:	b30b      	cbz	r3, 80088e0 <__sfp+0x68>
 800889c:	6836      	ldr	r6, [r6, #0]
 800889e:	e7f7      	b.n	8008890 <__sfp+0x18>
 80088a0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80088a4:	b9d5      	cbnz	r5, 80088dc <__sfp+0x64>
 80088a6:	4b16      	ldr	r3, [pc, #88]	; (8008900 <__sfp+0x88>)
 80088a8:	60e3      	str	r3, [r4, #12]
 80088aa:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80088ae:	6665      	str	r5, [r4, #100]	; 0x64
 80088b0:	f000 f86c 	bl	800898c <__retarget_lock_init_recursive>
 80088b4:	f7ff ff96 	bl	80087e4 <__sfp_lock_release>
 80088b8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80088bc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80088c0:	6025      	str	r5, [r4, #0]
 80088c2:	61a5      	str	r5, [r4, #24]
 80088c4:	2208      	movs	r2, #8
 80088c6:	4629      	mov	r1, r5
 80088c8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80088cc:	f000 f86f 	bl	80089ae <memset>
 80088d0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80088d4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80088d8:	4620      	mov	r0, r4
 80088da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80088dc:	3468      	adds	r4, #104	; 0x68
 80088de:	e7d9      	b.n	8008894 <__sfp+0x1c>
 80088e0:	2104      	movs	r1, #4
 80088e2:	4638      	mov	r0, r7
 80088e4:	f7ff ff62 	bl	80087ac <__sfmoreglue>
 80088e8:	4604      	mov	r4, r0
 80088ea:	6030      	str	r0, [r6, #0]
 80088ec:	2800      	cmp	r0, #0
 80088ee:	d1d5      	bne.n	800889c <__sfp+0x24>
 80088f0:	f7ff ff78 	bl	80087e4 <__sfp_lock_release>
 80088f4:	230c      	movs	r3, #12
 80088f6:	603b      	str	r3, [r7, #0]
 80088f8:	e7ee      	b.n	80088d8 <__sfp+0x60>
 80088fa:	bf00      	nop
 80088fc:	08009d4c 	.word	0x08009d4c
 8008900:	ffff0001 	.word	0xffff0001

08008904 <_fwalk_reent>:
 8008904:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008908:	4606      	mov	r6, r0
 800890a:	4688      	mov	r8, r1
 800890c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008910:	2700      	movs	r7, #0
 8008912:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008916:	f1b9 0901 	subs.w	r9, r9, #1
 800891a:	d505      	bpl.n	8008928 <_fwalk_reent+0x24>
 800891c:	6824      	ldr	r4, [r4, #0]
 800891e:	2c00      	cmp	r4, #0
 8008920:	d1f7      	bne.n	8008912 <_fwalk_reent+0xe>
 8008922:	4638      	mov	r0, r7
 8008924:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008928:	89ab      	ldrh	r3, [r5, #12]
 800892a:	2b01      	cmp	r3, #1
 800892c:	d907      	bls.n	800893e <_fwalk_reent+0x3a>
 800892e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008932:	3301      	adds	r3, #1
 8008934:	d003      	beq.n	800893e <_fwalk_reent+0x3a>
 8008936:	4629      	mov	r1, r5
 8008938:	4630      	mov	r0, r6
 800893a:	47c0      	blx	r8
 800893c:	4307      	orrs	r7, r0
 800893e:	3568      	adds	r5, #104	; 0x68
 8008940:	e7e9      	b.n	8008916 <_fwalk_reent+0x12>
	...

08008944 <__libc_init_array>:
 8008944:	b570      	push	{r4, r5, r6, lr}
 8008946:	4d0d      	ldr	r5, [pc, #52]	; (800897c <__libc_init_array+0x38>)
 8008948:	4c0d      	ldr	r4, [pc, #52]	; (8008980 <__libc_init_array+0x3c>)
 800894a:	1b64      	subs	r4, r4, r5
 800894c:	10a4      	asrs	r4, r4, #2
 800894e:	2600      	movs	r6, #0
 8008950:	42a6      	cmp	r6, r4
 8008952:	d109      	bne.n	8008968 <__libc_init_array+0x24>
 8008954:	4d0b      	ldr	r5, [pc, #44]	; (8008984 <__libc_init_array+0x40>)
 8008956:	4c0c      	ldr	r4, [pc, #48]	; (8008988 <__libc_init_array+0x44>)
 8008958:	f001 f91c 	bl	8009b94 <_init>
 800895c:	1b64      	subs	r4, r4, r5
 800895e:	10a4      	asrs	r4, r4, #2
 8008960:	2600      	movs	r6, #0
 8008962:	42a6      	cmp	r6, r4
 8008964:	d105      	bne.n	8008972 <__libc_init_array+0x2e>
 8008966:	bd70      	pop	{r4, r5, r6, pc}
 8008968:	f855 3b04 	ldr.w	r3, [r5], #4
 800896c:	4798      	blx	r3
 800896e:	3601      	adds	r6, #1
 8008970:	e7ee      	b.n	8008950 <__libc_init_array+0xc>
 8008972:	f855 3b04 	ldr.w	r3, [r5], #4
 8008976:	4798      	blx	r3
 8008978:	3601      	adds	r6, #1
 800897a:	e7f2      	b.n	8008962 <__libc_init_array+0x1e>
 800897c:	08009d8c 	.word	0x08009d8c
 8008980:	08009d8c 	.word	0x08009d8c
 8008984:	08009d8c 	.word	0x08009d8c
 8008988:	08009d90 	.word	0x08009d90

0800898c <__retarget_lock_init_recursive>:
 800898c:	4770      	bx	lr

0800898e <__retarget_lock_acquire_recursive>:
 800898e:	4770      	bx	lr

08008990 <__retarget_lock_release_recursive>:
 8008990:	4770      	bx	lr

08008992 <memcpy>:
 8008992:	440a      	add	r2, r1
 8008994:	4291      	cmp	r1, r2
 8008996:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800899a:	d100      	bne.n	800899e <memcpy+0xc>
 800899c:	4770      	bx	lr
 800899e:	b510      	push	{r4, lr}
 80089a0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80089a4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80089a8:	4291      	cmp	r1, r2
 80089aa:	d1f9      	bne.n	80089a0 <memcpy+0xe>
 80089ac:	bd10      	pop	{r4, pc}

080089ae <memset>:
 80089ae:	4402      	add	r2, r0
 80089b0:	4603      	mov	r3, r0
 80089b2:	4293      	cmp	r3, r2
 80089b4:	d100      	bne.n	80089b8 <memset+0xa>
 80089b6:	4770      	bx	lr
 80089b8:	f803 1b01 	strb.w	r1, [r3], #1
 80089bc:	e7f9      	b.n	80089b2 <memset+0x4>
	...

080089c0 <_malloc_r>:
 80089c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80089c2:	1ccd      	adds	r5, r1, #3
 80089c4:	f025 0503 	bic.w	r5, r5, #3
 80089c8:	3508      	adds	r5, #8
 80089ca:	2d0c      	cmp	r5, #12
 80089cc:	bf38      	it	cc
 80089ce:	250c      	movcc	r5, #12
 80089d0:	2d00      	cmp	r5, #0
 80089d2:	4606      	mov	r6, r0
 80089d4:	db01      	blt.n	80089da <_malloc_r+0x1a>
 80089d6:	42a9      	cmp	r1, r5
 80089d8:	d903      	bls.n	80089e2 <_malloc_r+0x22>
 80089da:	230c      	movs	r3, #12
 80089dc:	6033      	str	r3, [r6, #0]
 80089de:	2000      	movs	r0, #0
 80089e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80089e2:	f000 fa49 	bl	8008e78 <__malloc_lock>
 80089e6:	4921      	ldr	r1, [pc, #132]	; (8008a6c <_malloc_r+0xac>)
 80089e8:	680a      	ldr	r2, [r1, #0]
 80089ea:	4614      	mov	r4, r2
 80089ec:	b99c      	cbnz	r4, 8008a16 <_malloc_r+0x56>
 80089ee:	4f20      	ldr	r7, [pc, #128]	; (8008a70 <_malloc_r+0xb0>)
 80089f0:	683b      	ldr	r3, [r7, #0]
 80089f2:	b923      	cbnz	r3, 80089fe <_malloc_r+0x3e>
 80089f4:	4621      	mov	r1, r4
 80089f6:	4630      	mov	r0, r6
 80089f8:	f000 f8d4 	bl	8008ba4 <_sbrk_r>
 80089fc:	6038      	str	r0, [r7, #0]
 80089fe:	4629      	mov	r1, r5
 8008a00:	4630      	mov	r0, r6
 8008a02:	f000 f8cf 	bl	8008ba4 <_sbrk_r>
 8008a06:	1c43      	adds	r3, r0, #1
 8008a08:	d123      	bne.n	8008a52 <_malloc_r+0x92>
 8008a0a:	230c      	movs	r3, #12
 8008a0c:	6033      	str	r3, [r6, #0]
 8008a0e:	4630      	mov	r0, r6
 8008a10:	f000 fa38 	bl	8008e84 <__malloc_unlock>
 8008a14:	e7e3      	b.n	80089de <_malloc_r+0x1e>
 8008a16:	6823      	ldr	r3, [r4, #0]
 8008a18:	1b5b      	subs	r3, r3, r5
 8008a1a:	d417      	bmi.n	8008a4c <_malloc_r+0x8c>
 8008a1c:	2b0b      	cmp	r3, #11
 8008a1e:	d903      	bls.n	8008a28 <_malloc_r+0x68>
 8008a20:	6023      	str	r3, [r4, #0]
 8008a22:	441c      	add	r4, r3
 8008a24:	6025      	str	r5, [r4, #0]
 8008a26:	e004      	b.n	8008a32 <_malloc_r+0x72>
 8008a28:	6863      	ldr	r3, [r4, #4]
 8008a2a:	42a2      	cmp	r2, r4
 8008a2c:	bf0c      	ite	eq
 8008a2e:	600b      	streq	r3, [r1, #0]
 8008a30:	6053      	strne	r3, [r2, #4]
 8008a32:	4630      	mov	r0, r6
 8008a34:	f000 fa26 	bl	8008e84 <__malloc_unlock>
 8008a38:	f104 000b 	add.w	r0, r4, #11
 8008a3c:	1d23      	adds	r3, r4, #4
 8008a3e:	f020 0007 	bic.w	r0, r0, #7
 8008a42:	1ac2      	subs	r2, r0, r3
 8008a44:	d0cc      	beq.n	80089e0 <_malloc_r+0x20>
 8008a46:	1a1b      	subs	r3, r3, r0
 8008a48:	50a3      	str	r3, [r4, r2]
 8008a4a:	e7c9      	b.n	80089e0 <_malloc_r+0x20>
 8008a4c:	4622      	mov	r2, r4
 8008a4e:	6864      	ldr	r4, [r4, #4]
 8008a50:	e7cc      	b.n	80089ec <_malloc_r+0x2c>
 8008a52:	1cc4      	adds	r4, r0, #3
 8008a54:	f024 0403 	bic.w	r4, r4, #3
 8008a58:	42a0      	cmp	r0, r4
 8008a5a:	d0e3      	beq.n	8008a24 <_malloc_r+0x64>
 8008a5c:	1a21      	subs	r1, r4, r0
 8008a5e:	4630      	mov	r0, r6
 8008a60:	f000 f8a0 	bl	8008ba4 <_sbrk_r>
 8008a64:	3001      	adds	r0, #1
 8008a66:	d1dd      	bne.n	8008a24 <_malloc_r+0x64>
 8008a68:	e7cf      	b.n	8008a0a <_malloc_r+0x4a>
 8008a6a:	bf00      	nop
 8008a6c:	20004250 	.word	0x20004250
 8008a70:	20004254 	.word	0x20004254

08008a74 <iprintf>:
 8008a74:	b40f      	push	{r0, r1, r2, r3}
 8008a76:	4b0a      	ldr	r3, [pc, #40]	; (8008aa0 <iprintf+0x2c>)
 8008a78:	b513      	push	{r0, r1, r4, lr}
 8008a7a:	681c      	ldr	r4, [r3, #0]
 8008a7c:	b124      	cbz	r4, 8008a88 <iprintf+0x14>
 8008a7e:	69a3      	ldr	r3, [r4, #24]
 8008a80:	b913      	cbnz	r3, 8008a88 <iprintf+0x14>
 8008a82:	4620      	mov	r0, r4
 8008a84:	f7ff fec0 	bl	8008808 <__sinit>
 8008a88:	ab05      	add	r3, sp, #20
 8008a8a:	9a04      	ldr	r2, [sp, #16]
 8008a8c:	68a1      	ldr	r1, [r4, #8]
 8008a8e:	9301      	str	r3, [sp, #4]
 8008a90:	4620      	mov	r0, r4
 8008a92:	f000 fbd3 	bl	800923c <_vfiprintf_r>
 8008a96:	b002      	add	sp, #8
 8008a98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008a9c:	b004      	add	sp, #16
 8008a9e:	4770      	bx	lr
 8008aa0:	20000168 	.word	0x20000168

08008aa4 <putchar>:
 8008aa4:	4b09      	ldr	r3, [pc, #36]	; (8008acc <putchar+0x28>)
 8008aa6:	b513      	push	{r0, r1, r4, lr}
 8008aa8:	681c      	ldr	r4, [r3, #0]
 8008aaa:	4601      	mov	r1, r0
 8008aac:	b134      	cbz	r4, 8008abc <putchar+0x18>
 8008aae:	69a3      	ldr	r3, [r4, #24]
 8008ab0:	b923      	cbnz	r3, 8008abc <putchar+0x18>
 8008ab2:	9001      	str	r0, [sp, #4]
 8008ab4:	4620      	mov	r0, r4
 8008ab6:	f7ff fea7 	bl	8008808 <__sinit>
 8008aba:	9901      	ldr	r1, [sp, #4]
 8008abc:	68a2      	ldr	r2, [r4, #8]
 8008abe:	4620      	mov	r0, r4
 8008ac0:	b002      	add	sp, #8
 8008ac2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008ac6:	f000 be7d 	b.w	80097c4 <_putc_r>
 8008aca:	bf00      	nop
 8008acc:	20000168 	.word	0x20000168

08008ad0 <cleanup_glue>:
 8008ad0:	b538      	push	{r3, r4, r5, lr}
 8008ad2:	460c      	mov	r4, r1
 8008ad4:	6809      	ldr	r1, [r1, #0]
 8008ad6:	4605      	mov	r5, r0
 8008ad8:	b109      	cbz	r1, 8008ade <cleanup_glue+0xe>
 8008ada:	f7ff fff9 	bl	8008ad0 <cleanup_glue>
 8008ade:	4621      	mov	r1, r4
 8008ae0:	4628      	mov	r0, r5
 8008ae2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008ae6:	f000 b9d3 	b.w	8008e90 <_free_r>
	...

08008aec <_reclaim_reent>:
 8008aec:	4b2c      	ldr	r3, [pc, #176]	; (8008ba0 <_reclaim_reent+0xb4>)
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	4283      	cmp	r3, r0
 8008af2:	b570      	push	{r4, r5, r6, lr}
 8008af4:	4604      	mov	r4, r0
 8008af6:	d051      	beq.n	8008b9c <_reclaim_reent+0xb0>
 8008af8:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8008afa:	b143      	cbz	r3, 8008b0e <_reclaim_reent+0x22>
 8008afc:	68db      	ldr	r3, [r3, #12]
 8008afe:	2b00      	cmp	r3, #0
 8008b00:	d14a      	bne.n	8008b98 <_reclaim_reent+0xac>
 8008b02:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008b04:	6819      	ldr	r1, [r3, #0]
 8008b06:	b111      	cbz	r1, 8008b0e <_reclaim_reent+0x22>
 8008b08:	4620      	mov	r0, r4
 8008b0a:	f000 f9c1 	bl	8008e90 <_free_r>
 8008b0e:	6961      	ldr	r1, [r4, #20]
 8008b10:	b111      	cbz	r1, 8008b18 <_reclaim_reent+0x2c>
 8008b12:	4620      	mov	r0, r4
 8008b14:	f000 f9bc 	bl	8008e90 <_free_r>
 8008b18:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8008b1a:	b111      	cbz	r1, 8008b22 <_reclaim_reent+0x36>
 8008b1c:	4620      	mov	r0, r4
 8008b1e:	f000 f9b7 	bl	8008e90 <_free_r>
 8008b22:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8008b24:	b111      	cbz	r1, 8008b2c <_reclaim_reent+0x40>
 8008b26:	4620      	mov	r0, r4
 8008b28:	f000 f9b2 	bl	8008e90 <_free_r>
 8008b2c:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8008b2e:	b111      	cbz	r1, 8008b36 <_reclaim_reent+0x4a>
 8008b30:	4620      	mov	r0, r4
 8008b32:	f000 f9ad 	bl	8008e90 <_free_r>
 8008b36:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8008b38:	b111      	cbz	r1, 8008b40 <_reclaim_reent+0x54>
 8008b3a:	4620      	mov	r0, r4
 8008b3c:	f000 f9a8 	bl	8008e90 <_free_r>
 8008b40:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8008b42:	b111      	cbz	r1, 8008b4a <_reclaim_reent+0x5e>
 8008b44:	4620      	mov	r0, r4
 8008b46:	f000 f9a3 	bl	8008e90 <_free_r>
 8008b4a:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8008b4c:	b111      	cbz	r1, 8008b54 <_reclaim_reent+0x68>
 8008b4e:	4620      	mov	r0, r4
 8008b50:	f000 f99e 	bl	8008e90 <_free_r>
 8008b54:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008b56:	b111      	cbz	r1, 8008b5e <_reclaim_reent+0x72>
 8008b58:	4620      	mov	r0, r4
 8008b5a:	f000 f999 	bl	8008e90 <_free_r>
 8008b5e:	69a3      	ldr	r3, [r4, #24]
 8008b60:	b1e3      	cbz	r3, 8008b9c <_reclaim_reent+0xb0>
 8008b62:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8008b64:	4620      	mov	r0, r4
 8008b66:	4798      	blx	r3
 8008b68:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8008b6a:	b1b9      	cbz	r1, 8008b9c <_reclaim_reent+0xb0>
 8008b6c:	4620      	mov	r0, r4
 8008b6e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8008b72:	f7ff bfad 	b.w	8008ad0 <cleanup_glue>
 8008b76:	5949      	ldr	r1, [r1, r5]
 8008b78:	b941      	cbnz	r1, 8008b8c <_reclaim_reent+0xa0>
 8008b7a:	3504      	adds	r5, #4
 8008b7c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008b7e:	2d80      	cmp	r5, #128	; 0x80
 8008b80:	68d9      	ldr	r1, [r3, #12]
 8008b82:	d1f8      	bne.n	8008b76 <_reclaim_reent+0x8a>
 8008b84:	4620      	mov	r0, r4
 8008b86:	f000 f983 	bl	8008e90 <_free_r>
 8008b8a:	e7ba      	b.n	8008b02 <_reclaim_reent+0x16>
 8008b8c:	680e      	ldr	r6, [r1, #0]
 8008b8e:	4620      	mov	r0, r4
 8008b90:	f000 f97e 	bl	8008e90 <_free_r>
 8008b94:	4631      	mov	r1, r6
 8008b96:	e7ef      	b.n	8008b78 <_reclaim_reent+0x8c>
 8008b98:	2500      	movs	r5, #0
 8008b9a:	e7ef      	b.n	8008b7c <_reclaim_reent+0x90>
 8008b9c:	bd70      	pop	{r4, r5, r6, pc}
 8008b9e:	bf00      	nop
 8008ba0:	20000168 	.word	0x20000168

08008ba4 <_sbrk_r>:
 8008ba4:	b538      	push	{r3, r4, r5, lr}
 8008ba6:	4d06      	ldr	r5, [pc, #24]	; (8008bc0 <_sbrk_r+0x1c>)
 8008ba8:	2300      	movs	r3, #0
 8008baa:	4604      	mov	r4, r0
 8008bac:	4608      	mov	r0, r1
 8008bae:	602b      	str	r3, [r5, #0]
 8008bb0:	f7f8 f858 	bl	8000c64 <_sbrk>
 8008bb4:	1c43      	adds	r3, r0, #1
 8008bb6:	d102      	bne.n	8008bbe <_sbrk_r+0x1a>
 8008bb8:	682b      	ldr	r3, [r5, #0]
 8008bba:	b103      	cbz	r3, 8008bbe <_sbrk_r+0x1a>
 8008bbc:	6023      	str	r3, [r4, #0]
 8008bbe:	bd38      	pop	{r3, r4, r5, pc}
 8008bc0:	20004bd4 	.word	0x20004bd4

08008bc4 <siprintf>:
 8008bc4:	b40e      	push	{r1, r2, r3}
 8008bc6:	b500      	push	{lr}
 8008bc8:	b09c      	sub	sp, #112	; 0x70
 8008bca:	ab1d      	add	r3, sp, #116	; 0x74
 8008bcc:	9002      	str	r0, [sp, #8]
 8008bce:	9006      	str	r0, [sp, #24]
 8008bd0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008bd4:	4809      	ldr	r0, [pc, #36]	; (8008bfc <siprintf+0x38>)
 8008bd6:	9107      	str	r1, [sp, #28]
 8008bd8:	9104      	str	r1, [sp, #16]
 8008bda:	4909      	ldr	r1, [pc, #36]	; (8008c00 <siprintf+0x3c>)
 8008bdc:	f853 2b04 	ldr.w	r2, [r3], #4
 8008be0:	9105      	str	r1, [sp, #20]
 8008be2:	6800      	ldr	r0, [r0, #0]
 8008be4:	9301      	str	r3, [sp, #4]
 8008be6:	a902      	add	r1, sp, #8
 8008be8:	f000 f9fe 	bl	8008fe8 <_svfiprintf_r>
 8008bec:	9b02      	ldr	r3, [sp, #8]
 8008bee:	2200      	movs	r2, #0
 8008bf0:	701a      	strb	r2, [r3, #0]
 8008bf2:	b01c      	add	sp, #112	; 0x70
 8008bf4:	f85d eb04 	ldr.w	lr, [sp], #4
 8008bf8:	b003      	add	sp, #12
 8008bfa:	4770      	bx	lr
 8008bfc:	20000168 	.word	0x20000168
 8008c00:	ffff0208 	.word	0xffff0208

08008c04 <__sread>:
 8008c04:	b510      	push	{r4, lr}
 8008c06:	460c      	mov	r4, r1
 8008c08:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008c0c:	f000 fe22 	bl	8009854 <_read_r>
 8008c10:	2800      	cmp	r0, #0
 8008c12:	bfab      	itete	ge
 8008c14:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008c16:	89a3      	ldrhlt	r3, [r4, #12]
 8008c18:	181b      	addge	r3, r3, r0
 8008c1a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008c1e:	bfac      	ite	ge
 8008c20:	6563      	strge	r3, [r4, #84]	; 0x54
 8008c22:	81a3      	strhlt	r3, [r4, #12]
 8008c24:	bd10      	pop	{r4, pc}

08008c26 <__swrite>:
 8008c26:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008c2a:	461f      	mov	r7, r3
 8008c2c:	898b      	ldrh	r3, [r1, #12]
 8008c2e:	05db      	lsls	r3, r3, #23
 8008c30:	4605      	mov	r5, r0
 8008c32:	460c      	mov	r4, r1
 8008c34:	4616      	mov	r6, r2
 8008c36:	d505      	bpl.n	8008c44 <__swrite+0x1e>
 8008c38:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008c3c:	2302      	movs	r3, #2
 8008c3e:	2200      	movs	r2, #0
 8008c40:	f000 f908 	bl	8008e54 <_lseek_r>
 8008c44:	89a3      	ldrh	r3, [r4, #12]
 8008c46:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008c4a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008c4e:	81a3      	strh	r3, [r4, #12]
 8008c50:	4632      	mov	r2, r6
 8008c52:	463b      	mov	r3, r7
 8008c54:	4628      	mov	r0, r5
 8008c56:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008c5a:	f000 b817 	b.w	8008c8c <_write_r>

08008c5e <__sseek>:
 8008c5e:	b510      	push	{r4, lr}
 8008c60:	460c      	mov	r4, r1
 8008c62:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008c66:	f000 f8f5 	bl	8008e54 <_lseek_r>
 8008c6a:	1c43      	adds	r3, r0, #1
 8008c6c:	89a3      	ldrh	r3, [r4, #12]
 8008c6e:	bf15      	itete	ne
 8008c70:	6560      	strne	r0, [r4, #84]	; 0x54
 8008c72:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008c76:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008c7a:	81a3      	strheq	r3, [r4, #12]
 8008c7c:	bf18      	it	ne
 8008c7e:	81a3      	strhne	r3, [r4, #12]
 8008c80:	bd10      	pop	{r4, pc}

08008c82 <__sclose>:
 8008c82:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008c86:	f000 b813 	b.w	8008cb0 <_close_r>
	...

08008c8c <_write_r>:
 8008c8c:	b538      	push	{r3, r4, r5, lr}
 8008c8e:	4d07      	ldr	r5, [pc, #28]	; (8008cac <_write_r+0x20>)
 8008c90:	4604      	mov	r4, r0
 8008c92:	4608      	mov	r0, r1
 8008c94:	4611      	mov	r1, r2
 8008c96:	2200      	movs	r2, #0
 8008c98:	602a      	str	r2, [r5, #0]
 8008c9a:	461a      	mov	r2, r3
 8008c9c:	f7f7 fc8e 	bl	80005bc <_write>
 8008ca0:	1c43      	adds	r3, r0, #1
 8008ca2:	d102      	bne.n	8008caa <_write_r+0x1e>
 8008ca4:	682b      	ldr	r3, [r5, #0]
 8008ca6:	b103      	cbz	r3, 8008caa <_write_r+0x1e>
 8008ca8:	6023      	str	r3, [r4, #0]
 8008caa:	bd38      	pop	{r3, r4, r5, pc}
 8008cac:	20004bd4 	.word	0x20004bd4

08008cb0 <_close_r>:
 8008cb0:	b538      	push	{r3, r4, r5, lr}
 8008cb2:	4d06      	ldr	r5, [pc, #24]	; (8008ccc <_close_r+0x1c>)
 8008cb4:	2300      	movs	r3, #0
 8008cb6:	4604      	mov	r4, r0
 8008cb8:	4608      	mov	r0, r1
 8008cba:	602b      	str	r3, [r5, #0]
 8008cbc:	f7f7 ff9d 	bl	8000bfa <_close>
 8008cc0:	1c43      	adds	r3, r0, #1
 8008cc2:	d102      	bne.n	8008cca <_close_r+0x1a>
 8008cc4:	682b      	ldr	r3, [r5, #0]
 8008cc6:	b103      	cbz	r3, 8008cca <_close_r+0x1a>
 8008cc8:	6023      	str	r3, [r4, #0]
 8008cca:	bd38      	pop	{r3, r4, r5, pc}
 8008ccc:	20004bd4 	.word	0x20004bd4

08008cd0 <__sflush_r>:
 8008cd0:	898a      	ldrh	r2, [r1, #12]
 8008cd2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008cd6:	4605      	mov	r5, r0
 8008cd8:	0710      	lsls	r0, r2, #28
 8008cda:	460c      	mov	r4, r1
 8008cdc:	d458      	bmi.n	8008d90 <__sflush_r+0xc0>
 8008cde:	684b      	ldr	r3, [r1, #4]
 8008ce0:	2b00      	cmp	r3, #0
 8008ce2:	dc05      	bgt.n	8008cf0 <__sflush_r+0x20>
 8008ce4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008ce6:	2b00      	cmp	r3, #0
 8008ce8:	dc02      	bgt.n	8008cf0 <__sflush_r+0x20>
 8008cea:	2000      	movs	r0, #0
 8008cec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008cf0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008cf2:	2e00      	cmp	r6, #0
 8008cf4:	d0f9      	beq.n	8008cea <__sflush_r+0x1a>
 8008cf6:	2300      	movs	r3, #0
 8008cf8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008cfc:	682f      	ldr	r7, [r5, #0]
 8008cfe:	602b      	str	r3, [r5, #0]
 8008d00:	d032      	beq.n	8008d68 <__sflush_r+0x98>
 8008d02:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008d04:	89a3      	ldrh	r3, [r4, #12]
 8008d06:	075a      	lsls	r2, r3, #29
 8008d08:	d505      	bpl.n	8008d16 <__sflush_r+0x46>
 8008d0a:	6863      	ldr	r3, [r4, #4]
 8008d0c:	1ac0      	subs	r0, r0, r3
 8008d0e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008d10:	b10b      	cbz	r3, 8008d16 <__sflush_r+0x46>
 8008d12:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008d14:	1ac0      	subs	r0, r0, r3
 8008d16:	2300      	movs	r3, #0
 8008d18:	4602      	mov	r2, r0
 8008d1a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008d1c:	6a21      	ldr	r1, [r4, #32]
 8008d1e:	4628      	mov	r0, r5
 8008d20:	47b0      	blx	r6
 8008d22:	1c43      	adds	r3, r0, #1
 8008d24:	89a3      	ldrh	r3, [r4, #12]
 8008d26:	d106      	bne.n	8008d36 <__sflush_r+0x66>
 8008d28:	6829      	ldr	r1, [r5, #0]
 8008d2a:	291d      	cmp	r1, #29
 8008d2c:	d82c      	bhi.n	8008d88 <__sflush_r+0xb8>
 8008d2e:	4a2a      	ldr	r2, [pc, #168]	; (8008dd8 <__sflush_r+0x108>)
 8008d30:	40ca      	lsrs	r2, r1
 8008d32:	07d6      	lsls	r6, r2, #31
 8008d34:	d528      	bpl.n	8008d88 <__sflush_r+0xb8>
 8008d36:	2200      	movs	r2, #0
 8008d38:	6062      	str	r2, [r4, #4]
 8008d3a:	04d9      	lsls	r1, r3, #19
 8008d3c:	6922      	ldr	r2, [r4, #16]
 8008d3e:	6022      	str	r2, [r4, #0]
 8008d40:	d504      	bpl.n	8008d4c <__sflush_r+0x7c>
 8008d42:	1c42      	adds	r2, r0, #1
 8008d44:	d101      	bne.n	8008d4a <__sflush_r+0x7a>
 8008d46:	682b      	ldr	r3, [r5, #0]
 8008d48:	b903      	cbnz	r3, 8008d4c <__sflush_r+0x7c>
 8008d4a:	6560      	str	r0, [r4, #84]	; 0x54
 8008d4c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008d4e:	602f      	str	r7, [r5, #0]
 8008d50:	2900      	cmp	r1, #0
 8008d52:	d0ca      	beq.n	8008cea <__sflush_r+0x1a>
 8008d54:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008d58:	4299      	cmp	r1, r3
 8008d5a:	d002      	beq.n	8008d62 <__sflush_r+0x92>
 8008d5c:	4628      	mov	r0, r5
 8008d5e:	f000 f897 	bl	8008e90 <_free_r>
 8008d62:	2000      	movs	r0, #0
 8008d64:	6360      	str	r0, [r4, #52]	; 0x34
 8008d66:	e7c1      	b.n	8008cec <__sflush_r+0x1c>
 8008d68:	6a21      	ldr	r1, [r4, #32]
 8008d6a:	2301      	movs	r3, #1
 8008d6c:	4628      	mov	r0, r5
 8008d6e:	47b0      	blx	r6
 8008d70:	1c41      	adds	r1, r0, #1
 8008d72:	d1c7      	bne.n	8008d04 <__sflush_r+0x34>
 8008d74:	682b      	ldr	r3, [r5, #0]
 8008d76:	2b00      	cmp	r3, #0
 8008d78:	d0c4      	beq.n	8008d04 <__sflush_r+0x34>
 8008d7a:	2b1d      	cmp	r3, #29
 8008d7c:	d001      	beq.n	8008d82 <__sflush_r+0xb2>
 8008d7e:	2b16      	cmp	r3, #22
 8008d80:	d101      	bne.n	8008d86 <__sflush_r+0xb6>
 8008d82:	602f      	str	r7, [r5, #0]
 8008d84:	e7b1      	b.n	8008cea <__sflush_r+0x1a>
 8008d86:	89a3      	ldrh	r3, [r4, #12]
 8008d88:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008d8c:	81a3      	strh	r3, [r4, #12]
 8008d8e:	e7ad      	b.n	8008cec <__sflush_r+0x1c>
 8008d90:	690f      	ldr	r7, [r1, #16]
 8008d92:	2f00      	cmp	r7, #0
 8008d94:	d0a9      	beq.n	8008cea <__sflush_r+0x1a>
 8008d96:	0793      	lsls	r3, r2, #30
 8008d98:	680e      	ldr	r6, [r1, #0]
 8008d9a:	bf08      	it	eq
 8008d9c:	694b      	ldreq	r3, [r1, #20]
 8008d9e:	600f      	str	r7, [r1, #0]
 8008da0:	bf18      	it	ne
 8008da2:	2300      	movne	r3, #0
 8008da4:	eba6 0807 	sub.w	r8, r6, r7
 8008da8:	608b      	str	r3, [r1, #8]
 8008daa:	f1b8 0f00 	cmp.w	r8, #0
 8008dae:	dd9c      	ble.n	8008cea <__sflush_r+0x1a>
 8008db0:	6a21      	ldr	r1, [r4, #32]
 8008db2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008db4:	4643      	mov	r3, r8
 8008db6:	463a      	mov	r2, r7
 8008db8:	4628      	mov	r0, r5
 8008dba:	47b0      	blx	r6
 8008dbc:	2800      	cmp	r0, #0
 8008dbe:	dc06      	bgt.n	8008dce <__sflush_r+0xfe>
 8008dc0:	89a3      	ldrh	r3, [r4, #12]
 8008dc2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008dc6:	81a3      	strh	r3, [r4, #12]
 8008dc8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008dcc:	e78e      	b.n	8008cec <__sflush_r+0x1c>
 8008dce:	4407      	add	r7, r0
 8008dd0:	eba8 0800 	sub.w	r8, r8, r0
 8008dd4:	e7e9      	b.n	8008daa <__sflush_r+0xda>
 8008dd6:	bf00      	nop
 8008dd8:	20400001 	.word	0x20400001

08008ddc <_fflush_r>:
 8008ddc:	b538      	push	{r3, r4, r5, lr}
 8008dde:	690b      	ldr	r3, [r1, #16]
 8008de0:	4605      	mov	r5, r0
 8008de2:	460c      	mov	r4, r1
 8008de4:	b913      	cbnz	r3, 8008dec <_fflush_r+0x10>
 8008de6:	2500      	movs	r5, #0
 8008de8:	4628      	mov	r0, r5
 8008dea:	bd38      	pop	{r3, r4, r5, pc}
 8008dec:	b118      	cbz	r0, 8008df6 <_fflush_r+0x1a>
 8008dee:	6983      	ldr	r3, [r0, #24]
 8008df0:	b90b      	cbnz	r3, 8008df6 <_fflush_r+0x1a>
 8008df2:	f7ff fd09 	bl	8008808 <__sinit>
 8008df6:	4b14      	ldr	r3, [pc, #80]	; (8008e48 <_fflush_r+0x6c>)
 8008df8:	429c      	cmp	r4, r3
 8008dfa:	d11b      	bne.n	8008e34 <_fflush_r+0x58>
 8008dfc:	686c      	ldr	r4, [r5, #4]
 8008dfe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008e02:	2b00      	cmp	r3, #0
 8008e04:	d0ef      	beq.n	8008de6 <_fflush_r+0xa>
 8008e06:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008e08:	07d0      	lsls	r0, r2, #31
 8008e0a:	d404      	bmi.n	8008e16 <_fflush_r+0x3a>
 8008e0c:	0599      	lsls	r1, r3, #22
 8008e0e:	d402      	bmi.n	8008e16 <_fflush_r+0x3a>
 8008e10:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008e12:	f7ff fdbc 	bl	800898e <__retarget_lock_acquire_recursive>
 8008e16:	4628      	mov	r0, r5
 8008e18:	4621      	mov	r1, r4
 8008e1a:	f7ff ff59 	bl	8008cd0 <__sflush_r>
 8008e1e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008e20:	07da      	lsls	r2, r3, #31
 8008e22:	4605      	mov	r5, r0
 8008e24:	d4e0      	bmi.n	8008de8 <_fflush_r+0xc>
 8008e26:	89a3      	ldrh	r3, [r4, #12]
 8008e28:	059b      	lsls	r3, r3, #22
 8008e2a:	d4dd      	bmi.n	8008de8 <_fflush_r+0xc>
 8008e2c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008e2e:	f7ff fdaf 	bl	8008990 <__retarget_lock_release_recursive>
 8008e32:	e7d9      	b.n	8008de8 <_fflush_r+0xc>
 8008e34:	4b05      	ldr	r3, [pc, #20]	; (8008e4c <_fflush_r+0x70>)
 8008e36:	429c      	cmp	r4, r3
 8008e38:	d101      	bne.n	8008e3e <_fflush_r+0x62>
 8008e3a:	68ac      	ldr	r4, [r5, #8]
 8008e3c:	e7df      	b.n	8008dfe <_fflush_r+0x22>
 8008e3e:	4b04      	ldr	r3, [pc, #16]	; (8008e50 <_fflush_r+0x74>)
 8008e40:	429c      	cmp	r4, r3
 8008e42:	bf08      	it	eq
 8008e44:	68ec      	ldreq	r4, [r5, #12]
 8008e46:	e7da      	b.n	8008dfe <_fflush_r+0x22>
 8008e48:	08009d0c 	.word	0x08009d0c
 8008e4c:	08009d2c 	.word	0x08009d2c
 8008e50:	08009cec 	.word	0x08009cec

08008e54 <_lseek_r>:
 8008e54:	b538      	push	{r3, r4, r5, lr}
 8008e56:	4d07      	ldr	r5, [pc, #28]	; (8008e74 <_lseek_r+0x20>)
 8008e58:	4604      	mov	r4, r0
 8008e5a:	4608      	mov	r0, r1
 8008e5c:	4611      	mov	r1, r2
 8008e5e:	2200      	movs	r2, #0
 8008e60:	602a      	str	r2, [r5, #0]
 8008e62:	461a      	mov	r2, r3
 8008e64:	f7f7 fef0 	bl	8000c48 <_lseek>
 8008e68:	1c43      	adds	r3, r0, #1
 8008e6a:	d102      	bne.n	8008e72 <_lseek_r+0x1e>
 8008e6c:	682b      	ldr	r3, [r5, #0]
 8008e6e:	b103      	cbz	r3, 8008e72 <_lseek_r+0x1e>
 8008e70:	6023      	str	r3, [r4, #0]
 8008e72:	bd38      	pop	{r3, r4, r5, pc}
 8008e74:	20004bd4 	.word	0x20004bd4

08008e78 <__malloc_lock>:
 8008e78:	4801      	ldr	r0, [pc, #4]	; (8008e80 <__malloc_lock+0x8>)
 8008e7a:	f7ff bd88 	b.w	800898e <__retarget_lock_acquire_recursive>
 8008e7e:	bf00      	nop
 8008e80:	20004bcc 	.word	0x20004bcc

08008e84 <__malloc_unlock>:
 8008e84:	4801      	ldr	r0, [pc, #4]	; (8008e8c <__malloc_unlock+0x8>)
 8008e86:	f7ff bd83 	b.w	8008990 <__retarget_lock_release_recursive>
 8008e8a:	bf00      	nop
 8008e8c:	20004bcc 	.word	0x20004bcc

08008e90 <_free_r>:
 8008e90:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008e92:	2900      	cmp	r1, #0
 8008e94:	d048      	beq.n	8008f28 <_free_r+0x98>
 8008e96:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008e9a:	9001      	str	r0, [sp, #4]
 8008e9c:	2b00      	cmp	r3, #0
 8008e9e:	f1a1 0404 	sub.w	r4, r1, #4
 8008ea2:	bfb8      	it	lt
 8008ea4:	18e4      	addlt	r4, r4, r3
 8008ea6:	f7ff ffe7 	bl	8008e78 <__malloc_lock>
 8008eaa:	4a20      	ldr	r2, [pc, #128]	; (8008f2c <_free_r+0x9c>)
 8008eac:	9801      	ldr	r0, [sp, #4]
 8008eae:	6813      	ldr	r3, [r2, #0]
 8008eb0:	4615      	mov	r5, r2
 8008eb2:	b933      	cbnz	r3, 8008ec2 <_free_r+0x32>
 8008eb4:	6063      	str	r3, [r4, #4]
 8008eb6:	6014      	str	r4, [r2, #0]
 8008eb8:	b003      	add	sp, #12
 8008eba:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008ebe:	f7ff bfe1 	b.w	8008e84 <__malloc_unlock>
 8008ec2:	42a3      	cmp	r3, r4
 8008ec4:	d90b      	bls.n	8008ede <_free_r+0x4e>
 8008ec6:	6821      	ldr	r1, [r4, #0]
 8008ec8:	1862      	adds	r2, r4, r1
 8008eca:	4293      	cmp	r3, r2
 8008ecc:	bf04      	itt	eq
 8008ece:	681a      	ldreq	r2, [r3, #0]
 8008ed0:	685b      	ldreq	r3, [r3, #4]
 8008ed2:	6063      	str	r3, [r4, #4]
 8008ed4:	bf04      	itt	eq
 8008ed6:	1852      	addeq	r2, r2, r1
 8008ed8:	6022      	streq	r2, [r4, #0]
 8008eda:	602c      	str	r4, [r5, #0]
 8008edc:	e7ec      	b.n	8008eb8 <_free_r+0x28>
 8008ede:	461a      	mov	r2, r3
 8008ee0:	685b      	ldr	r3, [r3, #4]
 8008ee2:	b10b      	cbz	r3, 8008ee8 <_free_r+0x58>
 8008ee4:	42a3      	cmp	r3, r4
 8008ee6:	d9fa      	bls.n	8008ede <_free_r+0x4e>
 8008ee8:	6811      	ldr	r1, [r2, #0]
 8008eea:	1855      	adds	r5, r2, r1
 8008eec:	42a5      	cmp	r5, r4
 8008eee:	d10b      	bne.n	8008f08 <_free_r+0x78>
 8008ef0:	6824      	ldr	r4, [r4, #0]
 8008ef2:	4421      	add	r1, r4
 8008ef4:	1854      	adds	r4, r2, r1
 8008ef6:	42a3      	cmp	r3, r4
 8008ef8:	6011      	str	r1, [r2, #0]
 8008efa:	d1dd      	bne.n	8008eb8 <_free_r+0x28>
 8008efc:	681c      	ldr	r4, [r3, #0]
 8008efe:	685b      	ldr	r3, [r3, #4]
 8008f00:	6053      	str	r3, [r2, #4]
 8008f02:	4421      	add	r1, r4
 8008f04:	6011      	str	r1, [r2, #0]
 8008f06:	e7d7      	b.n	8008eb8 <_free_r+0x28>
 8008f08:	d902      	bls.n	8008f10 <_free_r+0x80>
 8008f0a:	230c      	movs	r3, #12
 8008f0c:	6003      	str	r3, [r0, #0]
 8008f0e:	e7d3      	b.n	8008eb8 <_free_r+0x28>
 8008f10:	6825      	ldr	r5, [r4, #0]
 8008f12:	1961      	adds	r1, r4, r5
 8008f14:	428b      	cmp	r3, r1
 8008f16:	bf04      	itt	eq
 8008f18:	6819      	ldreq	r1, [r3, #0]
 8008f1a:	685b      	ldreq	r3, [r3, #4]
 8008f1c:	6063      	str	r3, [r4, #4]
 8008f1e:	bf04      	itt	eq
 8008f20:	1949      	addeq	r1, r1, r5
 8008f22:	6021      	streq	r1, [r4, #0]
 8008f24:	6054      	str	r4, [r2, #4]
 8008f26:	e7c7      	b.n	8008eb8 <_free_r+0x28>
 8008f28:	b003      	add	sp, #12
 8008f2a:	bd30      	pop	{r4, r5, pc}
 8008f2c:	20004250 	.word	0x20004250

08008f30 <__ssputs_r>:
 8008f30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008f34:	688e      	ldr	r6, [r1, #8]
 8008f36:	429e      	cmp	r6, r3
 8008f38:	4682      	mov	sl, r0
 8008f3a:	460c      	mov	r4, r1
 8008f3c:	4690      	mov	r8, r2
 8008f3e:	461f      	mov	r7, r3
 8008f40:	d838      	bhi.n	8008fb4 <__ssputs_r+0x84>
 8008f42:	898a      	ldrh	r2, [r1, #12]
 8008f44:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008f48:	d032      	beq.n	8008fb0 <__ssputs_r+0x80>
 8008f4a:	6825      	ldr	r5, [r4, #0]
 8008f4c:	6909      	ldr	r1, [r1, #16]
 8008f4e:	eba5 0901 	sub.w	r9, r5, r1
 8008f52:	6965      	ldr	r5, [r4, #20]
 8008f54:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008f58:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008f5c:	3301      	adds	r3, #1
 8008f5e:	444b      	add	r3, r9
 8008f60:	106d      	asrs	r5, r5, #1
 8008f62:	429d      	cmp	r5, r3
 8008f64:	bf38      	it	cc
 8008f66:	461d      	movcc	r5, r3
 8008f68:	0553      	lsls	r3, r2, #21
 8008f6a:	d531      	bpl.n	8008fd0 <__ssputs_r+0xa0>
 8008f6c:	4629      	mov	r1, r5
 8008f6e:	f7ff fd27 	bl	80089c0 <_malloc_r>
 8008f72:	4606      	mov	r6, r0
 8008f74:	b950      	cbnz	r0, 8008f8c <__ssputs_r+0x5c>
 8008f76:	230c      	movs	r3, #12
 8008f78:	f8ca 3000 	str.w	r3, [sl]
 8008f7c:	89a3      	ldrh	r3, [r4, #12]
 8008f7e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008f82:	81a3      	strh	r3, [r4, #12]
 8008f84:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008f88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008f8c:	6921      	ldr	r1, [r4, #16]
 8008f8e:	464a      	mov	r2, r9
 8008f90:	f7ff fcff 	bl	8008992 <memcpy>
 8008f94:	89a3      	ldrh	r3, [r4, #12]
 8008f96:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008f9a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008f9e:	81a3      	strh	r3, [r4, #12]
 8008fa0:	6126      	str	r6, [r4, #16]
 8008fa2:	6165      	str	r5, [r4, #20]
 8008fa4:	444e      	add	r6, r9
 8008fa6:	eba5 0509 	sub.w	r5, r5, r9
 8008faa:	6026      	str	r6, [r4, #0]
 8008fac:	60a5      	str	r5, [r4, #8]
 8008fae:	463e      	mov	r6, r7
 8008fb0:	42be      	cmp	r6, r7
 8008fb2:	d900      	bls.n	8008fb6 <__ssputs_r+0x86>
 8008fb4:	463e      	mov	r6, r7
 8008fb6:	4632      	mov	r2, r6
 8008fb8:	6820      	ldr	r0, [r4, #0]
 8008fba:	4641      	mov	r1, r8
 8008fbc:	f000 fd80 	bl	8009ac0 <memmove>
 8008fc0:	68a3      	ldr	r3, [r4, #8]
 8008fc2:	6822      	ldr	r2, [r4, #0]
 8008fc4:	1b9b      	subs	r3, r3, r6
 8008fc6:	4432      	add	r2, r6
 8008fc8:	60a3      	str	r3, [r4, #8]
 8008fca:	6022      	str	r2, [r4, #0]
 8008fcc:	2000      	movs	r0, #0
 8008fce:	e7db      	b.n	8008f88 <__ssputs_r+0x58>
 8008fd0:	462a      	mov	r2, r5
 8008fd2:	f000 fd8f 	bl	8009af4 <_realloc_r>
 8008fd6:	4606      	mov	r6, r0
 8008fd8:	2800      	cmp	r0, #0
 8008fda:	d1e1      	bne.n	8008fa0 <__ssputs_r+0x70>
 8008fdc:	6921      	ldr	r1, [r4, #16]
 8008fde:	4650      	mov	r0, sl
 8008fe0:	f7ff ff56 	bl	8008e90 <_free_r>
 8008fe4:	e7c7      	b.n	8008f76 <__ssputs_r+0x46>
	...

08008fe8 <_svfiprintf_r>:
 8008fe8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008fec:	4698      	mov	r8, r3
 8008fee:	898b      	ldrh	r3, [r1, #12]
 8008ff0:	061b      	lsls	r3, r3, #24
 8008ff2:	b09d      	sub	sp, #116	; 0x74
 8008ff4:	4607      	mov	r7, r0
 8008ff6:	460d      	mov	r5, r1
 8008ff8:	4614      	mov	r4, r2
 8008ffa:	d50e      	bpl.n	800901a <_svfiprintf_r+0x32>
 8008ffc:	690b      	ldr	r3, [r1, #16]
 8008ffe:	b963      	cbnz	r3, 800901a <_svfiprintf_r+0x32>
 8009000:	2140      	movs	r1, #64	; 0x40
 8009002:	f7ff fcdd 	bl	80089c0 <_malloc_r>
 8009006:	6028      	str	r0, [r5, #0]
 8009008:	6128      	str	r0, [r5, #16]
 800900a:	b920      	cbnz	r0, 8009016 <_svfiprintf_r+0x2e>
 800900c:	230c      	movs	r3, #12
 800900e:	603b      	str	r3, [r7, #0]
 8009010:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009014:	e0d1      	b.n	80091ba <_svfiprintf_r+0x1d2>
 8009016:	2340      	movs	r3, #64	; 0x40
 8009018:	616b      	str	r3, [r5, #20]
 800901a:	2300      	movs	r3, #0
 800901c:	9309      	str	r3, [sp, #36]	; 0x24
 800901e:	2320      	movs	r3, #32
 8009020:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009024:	f8cd 800c 	str.w	r8, [sp, #12]
 8009028:	2330      	movs	r3, #48	; 0x30
 800902a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80091d4 <_svfiprintf_r+0x1ec>
 800902e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009032:	f04f 0901 	mov.w	r9, #1
 8009036:	4623      	mov	r3, r4
 8009038:	469a      	mov	sl, r3
 800903a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800903e:	b10a      	cbz	r2, 8009044 <_svfiprintf_r+0x5c>
 8009040:	2a25      	cmp	r2, #37	; 0x25
 8009042:	d1f9      	bne.n	8009038 <_svfiprintf_r+0x50>
 8009044:	ebba 0b04 	subs.w	fp, sl, r4
 8009048:	d00b      	beq.n	8009062 <_svfiprintf_r+0x7a>
 800904a:	465b      	mov	r3, fp
 800904c:	4622      	mov	r2, r4
 800904e:	4629      	mov	r1, r5
 8009050:	4638      	mov	r0, r7
 8009052:	f7ff ff6d 	bl	8008f30 <__ssputs_r>
 8009056:	3001      	adds	r0, #1
 8009058:	f000 80aa 	beq.w	80091b0 <_svfiprintf_r+0x1c8>
 800905c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800905e:	445a      	add	r2, fp
 8009060:	9209      	str	r2, [sp, #36]	; 0x24
 8009062:	f89a 3000 	ldrb.w	r3, [sl]
 8009066:	2b00      	cmp	r3, #0
 8009068:	f000 80a2 	beq.w	80091b0 <_svfiprintf_r+0x1c8>
 800906c:	2300      	movs	r3, #0
 800906e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009072:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009076:	f10a 0a01 	add.w	sl, sl, #1
 800907a:	9304      	str	r3, [sp, #16]
 800907c:	9307      	str	r3, [sp, #28]
 800907e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009082:	931a      	str	r3, [sp, #104]	; 0x68
 8009084:	4654      	mov	r4, sl
 8009086:	2205      	movs	r2, #5
 8009088:	f814 1b01 	ldrb.w	r1, [r4], #1
 800908c:	4851      	ldr	r0, [pc, #324]	; (80091d4 <_svfiprintf_r+0x1ec>)
 800908e:	f7f7 f8af 	bl	80001f0 <memchr>
 8009092:	9a04      	ldr	r2, [sp, #16]
 8009094:	b9d8      	cbnz	r0, 80090ce <_svfiprintf_r+0xe6>
 8009096:	06d0      	lsls	r0, r2, #27
 8009098:	bf44      	itt	mi
 800909a:	2320      	movmi	r3, #32
 800909c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80090a0:	0711      	lsls	r1, r2, #28
 80090a2:	bf44      	itt	mi
 80090a4:	232b      	movmi	r3, #43	; 0x2b
 80090a6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80090aa:	f89a 3000 	ldrb.w	r3, [sl]
 80090ae:	2b2a      	cmp	r3, #42	; 0x2a
 80090b0:	d015      	beq.n	80090de <_svfiprintf_r+0xf6>
 80090b2:	9a07      	ldr	r2, [sp, #28]
 80090b4:	4654      	mov	r4, sl
 80090b6:	2000      	movs	r0, #0
 80090b8:	f04f 0c0a 	mov.w	ip, #10
 80090bc:	4621      	mov	r1, r4
 80090be:	f811 3b01 	ldrb.w	r3, [r1], #1
 80090c2:	3b30      	subs	r3, #48	; 0x30
 80090c4:	2b09      	cmp	r3, #9
 80090c6:	d94e      	bls.n	8009166 <_svfiprintf_r+0x17e>
 80090c8:	b1b0      	cbz	r0, 80090f8 <_svfiprintf_r+0x110>
 80090ca:	9207      	str	r2, [sp, #28]
 80090cc:	e014      	b.n	80090f8 <_svfiprintf_r+0x110>
 80090ce:	eba0 0308 	sub.w	r3, r0, r8
 80090d2:	fa09 f303 	lsl.w	r3, r9, r3
 80090d6:	4313      	orrs	r3, r2
 80090d8:	9304      	str	r3, [sp, #16]
 80090da:	46a2      	mov	sl, r4
 80090dc:	e7d2      	b.n	8009084 <_svfiprintf_r+0x9c>
 80090de:	9b03      	ldr	r3, [sp, #12]
 80090e0:	1d19      	adds	r1, r3, #4
 80090e2:	681b      	ldr	r3, [r3, #0]
 80090e4:	9103      	str	r1, [sp, #12]
 80090e6:	2b00      	cmp	r3, #0
 80090e8:	bfbb      	ittet	lt
 80090ea:	425b      	neglt	r3, r3
 80090ec:	f042 0202 	orrlt.w	r2, r2, #2
 80090f0:	9307      	strge	r3, [sp, #28]
 80090f2:	9307      	strlt	r3, [sp, #28]
 80090f4:	bfb8      	it	lt
 80090f6:	9204      	strlt	r2, [sp, #16]
 80090f8:	7823      	ldrb	r3, [r4, #0]
 80090fa:	2b2e      	cmp	r3, #46	; 0x2e
 80090fc:	d10c      	bne.n	8009118 <_svfiprintf_r+0x130>
 80090fe:	7863      	ldrb	r3, [r4, #1]
 8009100:	2b2a      	cmp	r3, #42	; 0x2a
 8009102:	d135      	bne.n	8009170 <_svfiprintf_r+0x188>
 8009104:	9b03      	ldr	r3, [sp, #12]
 8009106:	1d1a      	adds	r2, r3, #4
 8009108:	681b      	ldr	r3, [r3, #0]
 800910a:	9203      	str	r2, [sp, #12]
 800910c:	2b00      	cmp	r3, #0
 800910e:	bfb8      	it	lt
 8009110:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8009114:	3402      	adds	r4, #2
 8009116:	9305      	str	r3, [sp, #20]
 8009118:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80091e4 <_svfiprintf_r+0x1fc>
 800911c:	7821      	ldrb	r1, [r4, #0]
 800911e:	2203      	movs	r2, #3
 8009120:	4650      	mov	r0, sl
 8009122:	f7f7 f865 	bl	80001f0 <memchr>
 8009126:	b140      	cbz	r0, 800913a <_svfiprintf_r+0x152>
 8009128:	2340      	movs	r3, #64	; 0x40
 800912a:	eba0 000a 	sub.w	r0, r0, sl
 800912e:	fa03 f000 	lsl.w	r0, r3, r0
 8009132:	9b04      	ldr	r3, [sp, #16]
 8009134:	4303      	orrs	r3, r0
 8009136:	3401      	adds	r4, #1
 8009138:	9304      	str	r3, [sp, #16]
 800913a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800913e:	4826      	ldr	r0, [pc, #152]	; (80091d8 <_svfiprintf_r+0x1f0>)
 8009140:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009144:	2206      	movs	r2, #6
 8009146:	f7f7 f853 	bl	80001f0 <memchr>
 800914a:	2800      	cmp	r0, #0
 800914c:	d038      	beq.n	80091c0 <_svfiprintf_r+0x1d8>
 800914e:	4b23      	ldr	r3, [pc, #140]	; (80091dc <_svfiprintf_r+0x1f4>)
 8009150:	bb1b      	cbnz	r3, 800919a <_svfiprintf_r+0x1b2>
 8009152:	9b03      	ldr	r3, [sp, #12]
 8009154:	3307      	adds	r3, #7
 8009156:	f023 0307 	bic.w	r3, r3, #7
 800915a:	3308      	adds	r3, #8
 800915c:	9303      	str	r3, [sp, #12]
 800915e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009160:	4433      	add	r3, r6
 8009162:	9309      	str	r3, [sp, #36]	; 0x24
 8009164:	e767      	b.n	8009036 <_svfiprintf_r+0x4e>
 8009166:	fb0c 3202 	mla	r2, ip, r2, r3
 800916a:	460c      	mov	r4, r1
 800916c:	2001      	movs	r0, #1
 800916e:	e7a5      	b.n	80090bc <_svfiprintf_r+0xd4>
 8009170:	2300      	movs	r3, #0
 8009172:	3401      	adds	r4, #1
 8009174:	9305      	str	r3, [sp, #20]
 8009176:	4619      	mov	r1, r3
 8009178:	f04f 0c0a 	mov.w	ip, #10
 800917c:	4620      	mov	r0, r4
 800917e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009182:	3a30      	subs	r2, #48	; 0x30
 8009184:	2a09      	cmp	r2, #9
 8009186:	d903      	bls.n	8009190 <_svfiprintf_r+0x1a8>
 8009188:	2b00      	cmp	r3, #0
 800918a:	d0c5      	beq.n	8009118 <_svfiprintf_r+0x130>
 800918c:	9105      	str	r1, [sp, #20]
 800918e:	e7c3      	b.n	8009118 <_svfiprintf_r+0x130>
 8009190:	fb0c 2101 	mla	r1, ip, r1, r2
 8009194:	4604      	mov	r4, r0
 8009196:	2301      	movs	r3, #1
 8009198:	e7f0      	b.n	800917c <_svfiprintf_r+0x194>
 800919a:	ab03      	add	r3, sp, #12
 800919c:	9300      	str	r3, [sp, #0]
 800919e:	462a      	mov	r2, r5
 80091a0:	4b0f      	ldr	r3, [pc, #60]	; (80091e0 <_svfiprintf_r+0x1f8>)
 80091a2:	a904      	add	r1, sp, #16
 80091a4:	4638      	mov	r0, r7
 80091a6:	f3af 8000 	nop.w
 80091aa:	1c42      	adds	r2, r0, #1
 80091ac:	4606      	mov	r6, r0
 80091ae:	d1d6      	bne.n	800915e <_svfiprintf_r+0x176>
 80091b0:	89ab      	ldrh	r3, [r5, #12]
 80091b2:	065b      	lsls	r3, r3, #25
 80091b4:	f53f af2c 	bmi.w	8009010 <_svfiprintf_r+0x28>
 80091b8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80091ba:	b01d      	add	sp, #116	; 0x74
 80091bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80091c0:	ab03      	add	r3, sp, #12
 80091c2:	9300      	str	r3, [sp, #0]
 80091c4:	462a      	mov	r2, r5
 80091c6:	4b06      	ldr	r3, [pc, #24]	; (80091e0 <_svfiprintf_r+0x1f8>)
 80091c8:	a904      	add	r1, sp, #16
 80091ca:	4638      	mov	r0, r7
 80091cc:	f000 f9d4 	bl	8009578 <_printf_i>
 80091d0:	e7eb      	b.n	80091aa <_svfiprintf_r+0x1c2>
 80091d2:	bf00      	nop
 80091d4:	08009d50 	.word	0x08009d50
 80091d8:	08009d5a 	.word	0x08009d5a
 80091dc:	00000000 	.word	0x00000000
 80091e0:	08008f31 	.word	0x08008f31
 80091e4:	08009d56 	.word	0x08009d56

080091e8 <__sfputc_r>:
 80091e8:	6893      	ldr	r3, [r2, #8]
 80091ea:	3b01      	subs	r3, #1
 80091ec:	2b00      	cmp	r3, #0
 80091ee:	b410      	push	{r4}
 80091f0:	6093      	str	r3, [r2, #8]
 80091f2:	da08      	bge.n	8009206 <__sfputc_r+0x1e>
 80091f4:	6994      	ldr	r4, [r2, #24]
 80091f6:	42a3      	cmp	r3, r4
 80091f8:	db01      	blt.n	80091fe <__sfputc_r+0x16>
 80091fa:	290a      	cmp	r1, #10
 80091fc:	d103      	bne.n	8009206 <__sfputc_r+0x1e>
 80091fe:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009202:	f000 bb39 	b.w	8009878 <__swbuf_r>
 8009206:	6813      	ldr	r3, [r2, #0]
 8009208:	1c58      	adds	r0, r3, #1
 800920a:	6010      	str	r0, [r2, #0]
 800920c:	7019      	strb	r1, [r3, #0]
 800920e:	4608      	mov	r0, r1
 8009210:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009214:	4770      	bx	lr

08009216 <__sfputs_r>:
 8009216:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009218:	4606      	mov	r6, r0
 800921a:	460f      	mov	r7, r1
 800921c:	4614      	mov	r4, r2
 800921e:	18d5      	adds	r5, r2, r3
 8009220:	42ac      	cmp	r4, r5
 8009222:	d101      	bne.n	8009228 <__sfputs_r+0x12>
 8009224:	2000      	movs	r0, #0
 8009226:	e007      	b.n	8009238 <__sfputs_r+0x22>
 8009228:	f814 1b01 	ldrb.w	r1, [r4], #1
 800922c:	463a      	mov	r2, r7
 800922e:	4630      	mov	r0, r6
 8009230:	f7ff ffda 	bl	80091e8 <__sfputc_r>
 8009234:	1c43      	adds	r3, r0, #1
 8009236:	d1f3      	bne.n	8009220 <__sfputs_r+0xa>
 8009238:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800923c <_vfiprintf_r>:
 800923c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009240:	460d      	mov	r5, r1
 8009242:	b09d      	sub	sp, #116	; 0x74
 8009244:	4614      	mov	r4, r2
 8009246:	4698      	mov	r8, r3
 8009248:	4606      	mov	r6, r0
 800924a:	b118      	cbz	r0, 8009254 <_vfiprintf_r+0x18>
 800924c:	6983      	ldr	r3, [r0, #24]
 800924e:	b90b      	cbnz	r3, 8009254 <_vfiprintf_r+0x18>
 8009250:	f7ff fada 	bl	8008808 <__sinit>
 8009254:	4b89      	ldr	r3, [pc, #548]	; (800947c <_vfiprintf_r+0x240>)
 8009256:	429d      	cmp	r5, r3
 8009258:	d11b      	bne.n	8009292 <_vfiprintf_r+0x56>
 800925a:	6875      	ldr	r5, [r6, #4]
 800925c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800925e:	07d9      	lsls	r1, r3, #31
 8009260:	d405      	bmi.n	800926e <_vfiprintf_r+0x32>
 8009262:	89ab      	ldrh	r3, [r5, #12]
 8009264:	059a      	lsls	r2, r3, #22
 8009266:	d402      	bmi.n	800926e <_vfiprintf_r+0x32>
 8009268:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800926a:	f7ff fb90 	bl	800898e <__retarget_lock_acquire_recursive>
 800926e:	89ab      	ldrh	r3, [r5, #12]
 8009270:	071b      	lsls	r3, r3, #28
 8009272:	d501      	bpl.n	8009278 <_vfiprintf_r+0x3c>
 8009274:	692b      	ldr	r3, [r5, #16]
 8009276:	b9eb      	cbnz	r3, 80092b4 <_vfiprintf_r+0x78>
 8009278:	4629      	mov	r1, r5
 800927a:	4630      	mov	r0, r6
 800927c:	f000 fb4e 	bl	800991c <__swsetup_r>
 8009280:	b1c0      	cbz	r0, 80092b4 <_vfiprintf_r+0x78>
 8009282:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009284:	07dc      	lsls	r4, r3, #31
 8009286:	d50e      	bpl.n	80092a6 <_vfiprintf_r+0x6a>
 8009288:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800928c:	b01d      	add	sp, #116	; 0x74
 800928e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009292:	4b7b      	ldr	r3, [pc, #492]	; (8009480 <_vfiprintf_r+0x244>)
 8009294:	429d      	cmp	r5, r3
 8009296:	d101      	bne.n	800929c <_vfiprintf_r+0x60>
 8009298:	68b5      	ldr	r5, [r6, #8]
 800929a:	e7df      	b.n	800925c <_vfiprintf_r+0x20>
 800929c:	4b79      	ldr	r3, [pc, #484]	; (8009484 <_vfiprintf_r+0x248>)
 800929e:	429d      	cmp	r5, r3
 80092a0:	bf08      	it	eq
 80092a2:	68f5      	ldreq	r5, [r6, #12]
 80092a4:	e7da      	b.n	800925c <_vfiprintf_r+0x20>
 80092a6:	89ab      	ldrh	r3, [r5, #12]
 80092a8:	0598      	lsls	r0, r3, #22
 80092aa:	d4ed      	bmi.n	8009288 <_vfiprintf_r+0x4c>
 80092ac:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80092ae:	f7ff fb6f 	bl	8008990 <__retarget_lock_release_recursive>
 80092b2:	e7e9      	b.n	8009288 <_vfiprintf_r+0x4c>
 80092b4:	2300      	movs	r3, #0
 80092b6:	9309      	str	r3, [sp, #36]	; 0x24
 80092b8:	2320      	movs	r3, #32
 80092ba:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80092be:	f8cd 800c 	str.w	r8, [sp, #12]
 80092c2:	2330      	movs	r3, #48	; 0x30
 80092c4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8009488 <_vfiprintf_r+0x24c>
 80092c8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80092cc:	f04f 0901 	mov.w	r9, #1
 80092d0:	4623      	mov	r3, r4
 80092d2:	469a      	mov	sl, r3
 80092d4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80092d8:	b10a      	cbz	r2, 80092de <_vfiprintf_r+0xa2>
 80092da:	2a25      	cmp	r2, #37	; 0x25
 80092dc:	d1f9      	bne.n	80092d2 <_vfiprintf_r+0x96>
 80092de:	ebba 0b04 	subs.w	fp, sl, r4
 80092e2:	d00b      	beq.n	80092fc <_vfiprintf_r+0xc0>
 80092e4:	465b      	mov	r3, fp
 80092e6:	4622      	mov	r2, r4
 80092e8:	4629      	mov	r1, r5
 80092ea:	4630      	mov	r0, r6
 80092ec:	f7ff ff93 	bl	8009216 <__sfputs_r>
 80092f0:	3001      	adds	r0, #1
 80092f2:	f000 80aa 	beq.w	800944a <_vfiprintf_r+0x20e>
 80092f6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80092f8:	445a      	add	r2, fp
 80092fa:	9209      	str	r2, [sp, #36]	; 0x24
 80092fc:	f89a 3000 	ldrb.w	r3, [sl]
 8009300:	2b00      	cmp	r3, #0
 8009302:	f000 80a2 	beq.w	800944a <_vfiprintf_r+0x20e>
 8009306:	2300      	movs	r3, #0
 8009308:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800930c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009310:	f10a 0a01 	add.w	sl, sl, #1
 8009314:	9304      	str	r3, [sp, #16]
 8009316:	9307      	str	r3, [sp, #28]
 8009318:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800931c:	931a      	str	r3, [sp, #104]	; 0x68
 800931e:	4654      	mov	r4, sl
 8009320:	2205      	movs	r2, #5
 8009322:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009326:	4858      	ldr	r0, [pc, #352]	; (8009488 <_vfiprintf_r+0x24c>)
 8009328:	f7f6 ff62 	bl	80001f0 <memchr>
 800932c:	9a04      	ldr	r2, [sp, #16]
 800932e:	b9d8      	cbnz	r0, 8009368 <_vfiprintf_r+0x12c>
 8009330:	06d1      	lsls	r1, r2, #27
 8009332:	bf44      	itt	mi
 8009334:	2320      	movmi	r3, #32
 8009336:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800933a:	0713      	lsls	r3, r2, #28
 800933c:	bf44      	itt	mi
 800933e:	232b      	movmi	r3, #43	; 0x2b
 8009340:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009344:	f89a 3000 	ldrb.w	r3, [sl]
 8009348:	2b2a      	cmp	r3, #42	; 0x2a
 800934a:	d015      	beq.n	8009378 <_vfiprintf_r+0x13c>
 800934c:	9a07      	ldr	r2, [sp, #28]
 800934e:	4654      	mov	r4, sl
 8009350:	2000      	movs	r0, #0
 8009352:	f04f 0c0a 	mov.w	ip, #10
 8009356:	4621      	mov	r1, r4
 8009358:	f811 3b01 	ldrb.w	r3, [r1], #1
 800935c:	3b30      	subs	r3, #48	; 0x30
 800935e:	2b09      	cmp	r3, #9
 8009360:	d94e      	bls.n	8009400 <_vfiprintf_r+0x1c4>
 8009362:	b1b0      	cbz	r0, 8009392 <_vfiprintf_r+0x156>
 8009364:	9207      	str	r2, [sp, #28]
 8009366:	e014      	b.n	8009392 <_vfiprintf_r+0x156>
 8009368:	eba0 0308 	sub.w	r3, r0, r8
 800936c:	fa09 f303 	lsl.w	r3, r9, r3
 8009370:	4313      	orrs	r3, r2
 8009372:	9304      	str	r3, [sp, #16]
 8009374:	46a2      	mov	sl, r4
 8009376:	e7d2      	b.n	800931e <_vfiprintf_r+0xe2>
 8009378:	9b03      	ldr	r3, [sp, #12]
 800937a:	1d19      	adds	r1, r3, #4
 800937c:	681b      	ldr	r3, [r3, #0]
 800937e:	9103      	str	r1, [sp, #12]
 8009380:	2b00      	cmp	r3, #0
 8009382:	bfbb      	ittet	lt
 8009384:	425b      	neglt	r3, r3
 8009386:	f042 0202 	orrlt.w	r2, r2, #2
 800938a:	9307      	strge	r3, [sp, #28]
 800938c:	9307      	strlt	r3, [sp, #28]
 800938e:	bfb8      	it	lt
 8009390:	9204      	strlt	r2, [sp, #16]
 8009392:	7823      	ldrb	r3, [r4, #0]
 8009394:	2b2e      	cmp	r3, #46	; 0x2e
 8009396:	d10c      	bne.n	80093b2 <_vfiprintf_r+0x176>
 8009398:	7863      	ldrb	r3, [r4, #1]
 800939a:	2b2a      	cmp	r3, #42	; 0x2a
 800939c:	d135      	bne.n	800940a <_vfiprintf_r+0x1ce>
 800939e:	9b03      	ldr	r3, [sp, #12]
 80093a0:	1d1a      	adds	r2, r3, #4
 80093a2:	681b      	ldr	r3, [r3, #0]
 80093a4:	9203      	str	r2, [sp, #12]
 80093a6:	2b00      	cmp	r3, #0
 80093a8:	bfb8      	it	lt
 80093aa:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80093ae:	3402      	adds	r4, #2
 80093b0:	9305      	str	r3, [sp, #20]
 80093b2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8009498 <_vfiprintf_r+0x25c>
 80093b6:	7821      	ldrb	r1, [r4, #0]
 80093b8:	2203      	movs	r2, #3
 80093ba:	4650      	mov	r0, sl
 80093bc:	f7f6 ff18 	bl	80001f0 <memchr>
 80093c0:	b140      	cbz	r0, 80093d4 <_vfiprintf_r+0x198>
 80093c2:	2340      	movs	r3, #64	; 0x40
 80093c4:	eba0 000a 	sub.w	r0, r0, sl
 80093c8:	fa03 f000 	lsl.w	r0, r3, r0
 80093cc:	9b04      	ldr	r3, [sp, #16]
 80093ce:	4303      	orrs	r3, r0
 80093d0:	3401      	adds	r4, #1
 80093d2:	9304      	str	r3, [sp, #16]
 80093d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80093d8:	482c      	ldr	r0, [pc, #176]	; (800948c <_vfiprintf_r+0x250>)
 80093da:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80093de:	2206      	movs	r2, #6
 80093e0:	f7f6 ff06 	bl	80001f0 <memchr>
 80093e4:	2800      	cmp	r0, #0
 80093e6:	d03f      	beq.n	8009468 <_vfiprintf_r+0x22c>
 80093e8:	4b29      	ldr	r3, [pc, #164]	; (8009490 <_vfiprintf_r+0x254>)
 80093ea:	bb1b      	cbnz	r3, 8009434 <_vfiprintf_r+0x1f8>
 80093ec:	9b03      	ldr	r3, [sp, #12]
 80093ee:	3307      	adds	r3, #7
 80093f0:	f023 0307 	bic.w	r3, r3, #7
 80093f4:	3308      	adds	r3, #8
 80093f6:	9303      	str	r3, [sp, #12]
 80093f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80093fa:	443b      	add	r3, r7
 80093fc:	9309      	str	r3, [sp, #36]	; 0x24
 80093fe:	e767      	b.n	80092d0 <_vfiprintf_r+0x94>
 8009400:	fb0c 3202 	mla	r2, ip, r2, r3
 8009404:	460c      	mov	r4, r1
 8009406:	2001      	movs	r0, #1
 8009408:	e7a5      	b.n	8009356 <_vfiprintf_r+0x11a>
 800940a:	2300      	movs	r3, #0
 800940c:	3401      	adds	r4, #1
 800940e:	9305      	str	r3, [sp, #20]
 8009410:	4619      	mov	r1, r3
 8009412:	f04f 0c0a 	mov.w	ip, #10
 8009416:	4620      	mov	r0, r4
 8009418:	f810 2b01 	ldrb.w	r2, [r0], #1
 800941c:	3a30      	subs	r2, #48	; 0x30
 800941e:	2a09      	cmp	r2, #9
 8009420:	d903      	bls.n	800942a <_vfiprintf_r+0x1ee>
 8009422:	2b00      	cmp	r3, #0
 8009424:	d0c5      	beq.n	80093b2 <_vfiprintf_r+0x176>
 8009426:	9105      	str	r1, [sp, #20]
 8009428:	e7c3      	b.n	80093b2 <_vfiprintf_r+0x176>
 800942a:	fb0c 2101 	mla	r1, ip, r1, r2
 800942e:	4604      	mov	r4, r0
 8009430:	2301      	movs	r3, #1
 8009432:	e7f0      	b.n	8009416 <_vfiprintf_r+0x1da>
 8009434:	ab03      	add	r3, sp, #12
 8009436:	9300      	str	r3, [sp, #0]
 8009438:	462a      	mov	r2, r5
 800943a:	4b16      	ldr	r3, [pc, #88]	; (8009494 <_vfiprintf_r+0x258>)
 800943c:	a904      	add	r1, sp, #16
 800943e:	4630      	mov	r0, r6
 8009440:	f3af 8000 	nop.w
 8009444:	4607      	mov	r7, r0
 8009446:	1c78      	adds	r0, r7, #1
 8009448:	d1d6      	bne.n	80093f8 <_vfiprintf_r+0x1bc>
 800944a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800944c:	07d9      	lsls	r1, r3, #31
 800944e:	d405      	bmi.n	800945c <_vfiprintf_r+0x220>
 8009450:	89ab      	ldrh	r3, [r5, #12]
 8009452:	059a      	lsls	r2, r3, #22
 8009454:	d402      	bmi.n	800945c <_vfiprintf_r+0x220>
 8009456:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009458:	f7ff fa9a 	bl	8008990 <__retarget_lock_release_recursive>
 800945c:	89ab      	ldrh	r3, [r5, #12]
 800945e:	065b      	lsls	r3, r3, #25
 8009460:	f53f af12 	bmi.w	8009288 <_vfiprintf_r+0x4c>
 8009464:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009466:	e711      	b.n	800928c <_vfiprintf_r+0x50>
 8009468:	ab03      	add	r3, sp, #12
 800946a:	9300      	str	r3, [sp, #0]
 800946c:	462a      	mov	r2, r5
 800946e:	4b09      	ldr	r3, [pc, #36]	; (8009494 <_vfiprintf_r+0x258>)
 8009470:	a904      	add	r1, sp, #16
 8009472:	4630      	mov	r0, r6
 8009474:	f000 f880 	bl	8009578 <_printf_i>
 8009478:	e7e4      	b.n	8009444 <_vfiprintf_r+0x208>
 800947a:	bf00      	nop
 800947c:	08009d0c 	.word	0x08009d0c
 8009480:	08009d2c 	.word	0x08009d2c
 8009484:	08009cec 	.word	0x08009cec
 8009488:	08009d50 	.word	0x08009d50
 800948c:	08009d5a 	.word	0x08009d5a
 8009490:	00000000 	.word	0x00000000
 8009494:	08009217 	.word	0x08009217
 8009498:	08009d56 	.word	0x08009d56

0800949c <_printf_common>:
 800949c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80094a0:	4616      	mov	r6, r2
 80094a2:	4699      	mov	r9, r3
 80094a4:	688a      	ldr	r2, [r1, #8]
 80094a6:	690b      	ldr	r3, [r1, #16]
 80094a8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80094ac:	4293      	cmp	r3, r2
 80094ae:	bfb8      	it	lt
 80094b0:	4613      	movlt	r3, r2
 80094b2:	6033      	str	r3, [r6, #0]
 80094b4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80094b8:	4607      	mov	r7, r0
 80094ba:	460c      	mov	r4, r1
 80094bc:	b10a      	cbz	r2, 80094c2 <_printf_common+0x26>
 80094be:	3301      	adds	r3, #1
 80094c0:	6033      	str	r3, [r6, #0]
 80094c2:	6823      	ldr	r3, [r4, #0]
 80094c4:	0699      	lsls	r1, r3, #26
 80094c6:	bf42      	ittt	mi
 80094c8:	6833      	ldrmi	r3, [r6, #0]
 80094ca:	3302      	addmi	r3, #2
 80094cc:	6033      	strmi	r3, [r6, #0]
 80094ce:	6825      	ldr	r5, [r4, #0]
 80094d0:	f015 0506 	ands.w	r5, r5, #6
 80094d4:	d106      	bne.n	80094e4 <_printf_common+0x48>
 80094d6:	f104 0a19 	add.w	sl, r4, #25
 80094da:	68e3      	ldr	r3, [r4, #12]
 80094dc:	6832      	ldr	r2, [r6, #0]
 80094de:	1a9b      	subs	r3, r3, r2
 80094e0:	42ab      	cmp	r3, r5
 80094e2:	dc26      	bgt.n	8009532 <_printf_common+0x96>
 80094e4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80094e8:	1e13      	subs	r3, r2, #0
 80094ea:	6822      	ldr	r2, [r4, #0]
 80094ec:	bf18      	it	ne
 80094ee:	2301      	movne	r3, #1
 80094f0:	0692      	lsls	r2, r2, #26
 80094f2:	d42b      	bmi.n	800954c <_printf_common+0xb0>
 80094f4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80094f8:	4649      	mov	r1, r9
 80094fa:	4638      	mov	r0, r7
 80094fc:	47c0      	blx	r8
 80094fe:	3001      	adds	r0, #1
 8009500:	d01e      	beq.n	8009540 <_printf_common+0xa4>
 8009502:	6823      	ldr	r3, [r4, #0]
 8009504:	68e5      	ldr	r5, [r4, #12]
 8009506:	6832      	ldr	r2, [r6, #0]
 8009508:	f003 0306 	and.w	r3, r3, #6
 800950c:	2b04      	cmp	r3, #4
 800950e:	bf08      	it	eq
 8009510:	1aad      	subeq	r5, r5, r2
 8009512:	68a3      	ldr	r3, [r4, #8]
 8009514:	6922      	ldr	r2, [r4, #16]
 8009516:	bf0c      	ite	eq
 8009518:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800951c:	2500      	movne	r5, #0
 800951e:	4293      	cmp	r3, r2
 8009520:	bfc4      	itt	gt
 8009522:	1a9b      	subgt	r3, r3, r2
 8009524:	18ed      	addgt	r5, r5, r3
 8009526:	2600      	movs	r6, #0
 8009528:	341a      	adds	r4, #26
 800952a:	42b5      	cmp	r5, r6
 800952c:	d11a      	bne.n	8009564 <_printf_common+0xc8>
 800952e:	2000      	movs	r0, #0
 8009530:	e008      	b.n	8009544 <_printf_common+0xa8>
 8009532:	2301      	movs	r3, #1
 8009534:	4652      	mov	r2, sl
 8009536:	4649      	mov	r1, r9
 8009538:	4638      	mov	r0, r7
 800953a:	47c0      	blx	r8
 800953c:	3001      	adds	r0, #1
 800953e:	d103      	bne.n	8009548 <_printf_common+0xac>
 8009540:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009544:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009548:	3501      	adds	r5, #1
 800954a:	e7c6      	b.n	80094da <_printf_common+0x3e>
 800954c:	18e1      	adds	r1, r4, r3
 800954e:	1c5a      	adds	r2, r3, #1
 8009550:	2030      	movs	r0, #48	; 0x30
 8009552:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009556:	4422      	add	r2, r4
 8009558:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800955c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009560:	3302      	adds	r3, #2
 8009562:	e7c7      	b.n	80094f4 <_printf_common+0x58>
 8009564:	2301      	movs	r3, #1
 8009566:	4622      	mov	r2, r4
 8009568:	4649      	mov	r1, r9
 800956a:	4638      	mov	r0, r7
 800956c:	47c0      	blx	r8
 800956e:	3001      	adds	r0, #1
 8009570:	d0e6      	beq.n	8009540 <_printf_common+0xa4>
 8009572:	3601      	adds	r6, #1
 8009574:	e7d9      	b.n	800952a <_printf_common+0x8e>
	...

08009578 <_printf_i>:
 8009578:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800957c:	460c      	mov	r4, r1
 800957e:	4691      	mov	r9, r2
 8009580:	7e27      	ldrb	r7, [r4, #24]
 8009582:	990c      	ldr	r1, [sp, #48]	; 0x30
 8009584:	2f78      	cmp	r7, #120	; 0x78
 8009586:	4680      	mov	r8, r0
 8009588:	469a      	mov	sl, r3
 800958a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800958e:	d807      	bhi.n	80095a0 <_printf_i+0x28>
 8009590:	2f62      	cmp	r7, #98	; 0x62
 8009592:	d80a      	bhi.n	80095aa <_printf_i+0x32>
 8009594:	2f00      	cmp	r7, #0
 8009596:	f000 80d8 	beq.w	800974a <_printf_i+0x1d2>
 800959a:	2f58      	cmp	r7, #88	; 0x58
 800959c:	f000 80a3 	beq.w	80096e6 <_printf_i+0x16e>
 80095a0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80095a4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80095a8:	e03a      	b.n	8009620 <_printf_i+0xa8>
 80095aa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80095ae:	2b15      	cmp	r3, #21
 80095b0:	d8f6      	bhi.n	80095a0 <_printf_i+0x28>
 80095b2:	a001      	add	r0, pc, #4	; (adr r0, 80095b8 <_printf_i+0x40>)
 80095b4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80095b8:	08009611 	.word	0x08009611
 80095bc:	08009625 	.word	0x08009625
 80095c0:	080095a1 	.word	0x080095a1
 80095c4:	080095a1 	.word	0x080095a1
 80095c8:	080095a1 	.word	0x080095a1
 80095cc:	080095a1 	.word	0x080095a1
 80095d0:	08009625 	.word	0x08009625
 80095d4:	080095a1 	.word	0x080095a1
 80095d8:	080095a1 	.word	0x080095a1
 80095dc:	080095a1 	.word	0x080095a1
 80095e0:	080095a1 	.word	0x080095a1
 80095e4:	08009731 	.word	0x08009731
 80095e8:	08009655 	.word	0x08009655
 80095ec:	08009713 	.word	0x08009713
 80095f0:	080095a1 	.word	0x080095a1
 80095f4:	080095a1 	.word	0x080095a1
 80095f8:	08009753 	.word	0x08009753
 80095fc:	080095a1 	.word	0x080095a1
 8009600:	08009655 	.word	0x08009655
 8009604:	080095a1 	.word	0x080095a1
 8009608:	080095a1 	.word	0x080095a1
 800960c:	0800971b 	.word	0x0800971b
 8009610:	680b      	ldr	r3, [r1, #0]
 8009612:	1d1a      	adds	r2, r3, #4
 8009614:	681b      	ldr	r3, [r3, #0]
 8009616:	600a      	str	r2, [r1, #0]
 8009618:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800961c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009620:	2301      	movs	r3, #1
 8009622:	e0a3      	b.n	800976c <_printf_i+0x1f4>
 8009624:	6825      	ldr	r5, [r4, #0]
 8009626:	6808      	ldr	r0, [r1, #0]
 8009628:	062e      	lsls	r6, r5, #24
 800962a:	f100 0304 	add.w	r3, r0, #4
 800962e:	d50a      	bpl.n	8009646 <_printf_i+0xce>
 8009630:	6805      	ldr	r5, [r0, #0]
 8009632:	600b      	str	r3, [r1, #0]
 8009634:	2d00      	cmp	r5, #0
 8009636:	da03      	bge.n	8009640 <_printf_i+0xc8>
 8009638:	232d      	movs	r3, #45	; 0x2d
 800963a:	426d      	negs	r5, r5
 800963c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009640:	485e      	ldr	r0, [pc, #376]	; (80097bc <_printf_i+0x244>)
 8009642:	230a      	movs	r3, #10
 8009644:	e019      	b.n	800967a <_printf_i+0x102>
 8009646:	f015 0f40 	tst.w	r5, #64	; 0x40
 800964a:	6805      	ldr	r5, [r0, #0]
 800964c:	600b      	str	r3, [r1, #0]
 800964e:	bf18      	it	ne
 8009650:	b22d      	sxthne	r5, r5
 8009652:	e7ef      	b.n	8009634 <_printf_i+0xbc>
 8009654:	680b      	ldr	r3, [r1, #0]
 8009656:	6825      	ldr	r5, [r4, #0]
 8009658:	1d18      	adds	r0, r3, #4
 800965a:	6008      	str	r0, [r1, #0]
 800965c:	0628      	lsls	r0, r5, #24
 800965e:	d501      	bpl.n	8009664 <_printf_i+0xec>
 8009660:	681d      	ldr	r5, [r3, #0]
 8009662:	e002      	b.n	800966a <_printf_i+0xf2>
 8009664:	0669      	lsls	r1, r5, #25
 8009666:	d5fb      	bpl.n	8009660 <_printf_i+0xe8>
 8009668:	881d      	ldrh	r5, [r3, #0]
 800966a:	4854      	ldr	r0, [pc, #336]	; (80097bc <_printf_i+0x244>)
 800966c:	2f6f      	cmp	r7, #111	; 0x6f
 800966e:	bf0c      	ite	eq
 8009670:	2308      	moveq	r3, #8
 8009672:	230a      	movne	r3, #10
 8009674:	2100      	movs	r1, #0
 8009676:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800967a:	6866      	ldr	r6, [r4, #4]
 800967c:	60a6      	str	r6, [r4, #8]
 800967e:	2e00      	cmp	r6, #0
 8009680:	bfa2      	ittt	ge
 8009682:	6821      	ldrge	r1, [r4, #0]
 8009684:	f021 0104 	bicge.w	r1, r1, #4
 8009688:	6021      	strge	r1, [r4, #0]
 800968a:	b90d      	cbnz	r5, 8009690 <_printf_i+0x118>
 800968c:	2e00      	cmp	r6, #0
 800968e:	d04d      	beq.n	800972c <_printf_i+0x1b4>
 8009690:	4616      	mov	r6, r2
 8009692:	fbb5 f1f3 	udiv	r1, r5, r3
 8009696:	fb03 5711 	mls	r7, r3, r1, r5
 800969a:	5dc7      	ldrb	r7, [r0, r7]
 800969c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80096a0:	462f      	mov	r7, r5
 80096a2:	42bb      	cmp	r3, r7
 80096a4:	460d      	mov	r5, r1
 80096a6:	d9f4      	bls.n	8009692 <_printf_i+0x11a>
 80096a8:	2b08      	cmp	r3, #8
 80096aa:	d10b      	bne.n	80096c4 <_printf_i+0x14c>
 80096ac:	6823      	ldr	r3, [r4, #0]
 80096ae:	07df      	lsls	r7, r3, #31
 80096b0:	d508      	bpl.n	80096c4 <_printf_i+0x14c>
 80096b2:	6923      	ldr	r3, [r4, #16]
 80096b4:	6861      	ldr	r1, [r4, #4]
 80096b6:	4299      	cmp	r1, r3
 80096b8:	bfde      	ittt	le
 80096ba:	2330      	movle	r3, #48	; 0x30
 80096bc:	f806 3c01 	strble.w	r3, [r6, #-1]
 80096c0:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 80096c4:	1b92      	subs	r2, r2, r6
 80096c6:	6122      	str	r2, [r4, #16]
 80096c8:	f8cd a000 	str.w	sl, [sp]
 80096cc:	464b      	mov	r3, r9
 80096ce:	aa03      	add	r2, sp, #12
 80096d0:	4621      	mov	r1, r4
 80096d2:	4640      	mov	r0, r8
 80096d4:	f7ff fee2 	bl	800949c <_printf_common>
 80096d8:	3001      	adds	r0, #1
 80096da:	d14c      	bne.n	8009776 <_printf_i+0x1fe>
 80096dc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80096e0:	b004      	add	sp, #16
 80096e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80096e6:	4835      	ldr	r0, [pc, #212]	; (80097bc <_printf_i+0x244>)
 80096e8:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80096ec:	6823      	ldr	r3, [r4, #0]
 80096ee:	680e      	ldr	r6, [r1, #0]
 80096f0:	061f      	lsls	r7, r3, #24
 80096f2:	f856 5b04 	ldr.w	r5, [r6], #4
 80096f6:	600e      	str	r6, [r1, #0]
 80096f8:	d514      	bpl.n	8009724 <_printf_i+0x1ac>
 80096fa:	07d9      	lsls	r1, r3, #31
 80096fc:	bf44      	itt	mi
 80096fe:	f043 0320 	orrmi.w	r3, r3, #32
 8009702:	6023      	strmi	r3, [r4, #0]
 8009704:	b91d      	cbnz	r5, 800970e <_printf_i+0x196>
 8009706:	6823      	ldr	r3, [r4, #0]
 8009708:	f023 0320 	bic.w	r3, r3, #32
 800970c:	6023      	str	r3, [r4, #0]
 800970e:	2310      	movs	r3, #16
 8009710:	e7b0      	b.n	8009674 <_printf_i+0xfc>
 8009712:	6823      	ldr	r3, [r4, #0]
 8009714:	f043 0320 	orr.w	r3, r3, #32
 8009718:	6023      	str	r3, [r4, #0]
 800971a:	2378      	movs	r3, #120	; 0x78
 800971c:	4828      	ldr	r0, [pc, #160]	; (80097c0 <_printf_i+0x248>)
 800971e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009722:	e7e3      	b.n	80096ec <_printf_i+0x174>
 8009724:	065e      	lsls	r6, r3, #25
 8009726:	bf48      	it	mi
 8009728:	b2ad      	uxthmi	r5, r5
 800972a:	e7e6      	b.n	80096fa <_printf_i+0x182>
 800972c:	4616      	mov	r6, r2
 800972e:	e7bb      	b.n	80096a8 <_printf_i+0x130>
 8009730:	680b      	ldr	r3, [r1, #0]
 8009732:	6826      	ldr	r6, [r4, #0]
 8009734:	6960      	ldr	r0, [r4, #20]
 8009736:	1d1d      	adds	r5, r3, #4
 8009738:	600d      	str	r5, [r1, #0]
 800973a:	0635      	lsls	r5, r6, #24
 800973c:	681b      	ldr	r3, [r3, #0]
 800973e:	d501      	bpl.n	8009744 <_printf_i+0x1cc>
 8009740:	6018      	str	r0, [r3, #0]
 8009742:	e002      	b.n	800974a <_printf_i+0x1d2>
 8009744:	0671      	lsls	r1, r6, #25
 8009746:	d5fb      	bpl.n	8009740 <_printf_i+0x1c8>
 8009748:	8018      	strh	r0, [r3, #0]
 800974a:	2300      	movs	r3, #0
 800974c:	6123      	str	r3, [r4, #16]
 800974e:	4616      	mov	r6, r2
 8009750:	e7ba      	b.n	80096c8 <_printf_i+0x150>
 8009752:	680b      	ldr	r3, [r1, #0]
 8009754:	1d1a      	adds	r2, r3, #4
 8009756:	600a      	str	r2, [r1, #0]
 8009758:	681e      	ldr	r6, [r3, #0]
 800975a:	6862      	ldr	r2, [r4, #4]
 800975c:	2100      	movs	r1, #0
 800975e:	4630      	mov	r0, r6
 8009760:	f7f6 fd46 	bl	80001f0 <memchr>
 8009764:	b108      	cbz	r0, 800976a <_printf_i+0x1f2>
 8009766:	1b80      	subs	r0, r0, r6
 8009768:	6060      	str	r0, [r4, #4]
 800976a:	6863      	ldr	r3, [r4, #4]
 800976c:	6123      	str	r3, [r4, #16]
 800976e:	2300      	movs	r3, #0
 8009770:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009774:	e7a8      	b.n	80096c8 <_printf_i+0x150>
 8009776:	6923      	ldr	r3, [r4, #16]
 8009778:	4632      	mov	r2, r6
 800977a:	4649      	mov	r1, r9
 800977c:	4640      	mov	r0, r8
 800977e:	47d0      	blx	sl
 8009780:	3001      	adds	r0, #1
 8009782:	d0ab      	beq.n	80096dc <_printf_i+0x164>
 8009784:	6823      	ldr	r3, [r4, #0]
 8009786:	079b      	lsls	r3, r3, #30
 8009788:	d413      	bmi.n	80097b2 <_printf_i+0x23a>
 800978a:	68e0      	ldr	r0, [r4, #12]
 800978c:	9b03      	ldr	r3, [sp, #12]
 800978e:	4298      	cmp	r0, r3
 8009790:	bfb8      	it	lt
 8009792:	4618      	movlt	r0, r3
 8009794:	e7a4      	b.n	80096e0 <_printf_i+0x168>
 8009796:	2301      	movs	r3, #1
 8009798:	4632      	mov	r2, r6
 800979a:	4649      	mov	r1, r9
 800979c:	4640      	mov	r0, r8
 800979e:	47d0      	blx	sl
 80097a0:	3001      	adds	r0, #1
 80097a2:	d09b      	beq.n	80096dc <_printf_i+0x164>
 80097a4:	3501      	adds	r5, #1
 80097a6:	68e3      	ldr	r3, [r4, #12]
 80097a8:	9903      	ldr	r1, [sp, #12]
 80097aa:	1a5b      	subs	r3, r3, r1
 80097ac:	42ab      	cmp	r3, r5
 80097ae:	dcf2      	bgt.n	8009796 <_printf_i+0x21e>
 80097b0:	e7eb      	b.n	800978a <_printf_i+0x212>
 80097b2:	2500      	movs	r5, #0
 80097b4:	f104 0619 	add.w	r6, r4, #25
 80097b8:	e7f5      	b.n	80097a6 <_printf_i+0x22e>
 80097ba:	bf00      	nop
 80097bc:	08009d61 	.word	0x08009d61
 80097c0:	08009d72 	.word	0x08009d72

080097c4 <_putc_r>:
 80097c4:	b570      	push	{r4, r5, r6, lr}
 80097c6:	460d      	mov	r5, r1
 80097c8:	4614      	mov	r4, r2
 80097ca:	4606      	mov	r6, r0
 80097cc:	b118      	cbz	r0, 80097d6 <_putc_r+0x12>
 80097ce:	6983      	ldr	r3, [r0, #24]
 80097d0:	b90b      	cbnz	r3, 80097d6 <_putc_r+0x12>
 80097d2:	f7ff f819 	bl	8008808 <__sinit>
 80097d6:	4b1c      	ldr	r3, [pc, #112]	; (8009848 <_putc_r+0x84>)
 80097d8:	429c      	cmp	r4, r3
 80097da:	d124      	bne.n	8009826 <_putc_r+0x62>
 80097dc:	6874      	ldr	r4, [r6, #4]
 80097de:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80097e0:	07d8      	lsls	r0, r3, #31
 80097e2:	d405      	bmi.n	80097f0 <_putc_r+0x2c>
 80097e4:	89a3      	ldrh	r3, [r4, #12]
 80097e6:	0599      	lsls	r1, r3, #22
 80097e8:	d402      	bmi.n	80097f0 <_putc_r+0x2c>
 80097ea:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80097ec:	f7ff f8cf 	bl	800898e <__retarget_lock_acquire_recursive>
 80097f0:	68a3      	ldr	r3, [r4, #8]
 80097f2:	3b01      	subs	r3, #1
 80097f4:	2b00      	cmp	r3, #0
 80097f6:	60a3      	str	r3, [r4, #8]
 80097f8:	da05      	bge.n	8009806 <_putc_r+0x42>
 80097fa:	69a2      	ldr	r2, [r4, #24]
 80097fc:	4293      	cmp	r3, r2
 80097fe:	db1c      	blt.n	800983a <_putc_r+0x76>
 8009800:	b2eb      	uxtb	r3, r5
 8009802:	2b0a      	cmp	r3, #10
 8009804:	d019      	beq.n	800983a <_putc_r+0x76>
 8009806:	6823      	ldr	r3, [r4, #0]
 8009808:	1c5a      	adds	r2, r3, #1
 800980a:	6022      	str	r2, [r4, #0]
 800980c:	701d      	strb	r5, [r3, #0]
 800980e:	b2ed      	uxtb	r5, r5
 8009810:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009812:	07da      	lsls	r2, r3, #31
 8009814:	d405      	bmi.n	8009822 <_putc_r+0x5e>
 8009816:	89a3      	ldrh	r3, [r4, #12]
 8009818:	059b      	lsls	r3, r3, #22
 800981a:	d402      	bmi.n	8009822 <_putc_r+0x5e>
 800981c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800981e:	f7ff f8b7 	bl	8008990 <__retarget_lock_release_recursive>
 8009822:	4628      	mov	r0, r5
 8009824:	bd70      	pop	{r4, r5, r6, pc}
 8009826:	4b09      	ldr	r3, [pc, #36]	; (800984c <_putc_r+0x88>)
 8009828:	429c      	cmp	r4, r3
 800982a:	d101      	bne.n	8009830 <_putc_r+0x6c>
 800982c:	68b4      	ldr	r4, [r6, #8]
 800982e:	e7d6      	b.n	80097de <_putc_r+0x1a>
 8009830:	4b07      	ldr	r3, [pc, #28]	; (8009850 <_putc_r+0x8c>)
 8009832:	429c      	cmp	r4, r3
 8009834:	bf08      	it	eq
 8009836:	68f4      	ldreq	r4, [r6, #12]
 8009838:	e7d1      	b.n	80097de <_putc_r+0x1a>
 800983a:	4629      	mov	r1, r5
 800983c:	4622      	mov	r2, r4
 800983e:	4630      	mov	r0, r6
 8009840:	f000 f81a 	bl	8009878 <__swbuf_r>
 8009844:	4605      	mov	r5, r0
 8009846:	e7e3      	b.n	8009810 <_putc_r+0x4c>
 8009848:	08009d0c 	.word	0x08009d0c
 800984c:	08009d2c 	.word	0x08009d2c
 8009850:	08009cec 	.word	0x08009cec

08009854 <_read_r>:
 8009854:	b538      	push	{r3, r4, r5, lr}
 8009856:	4d07      	ldr	r5, [pc, #28]	; (8009874 <_read_r+0x20>)
 8009858:	4604      	mov	r4, r0
 800985a:	4608      	mov	r0, r1
 800985c:	4611      	mov	r1, r2
 800985e:	2200      	movs	r2, #0
 8009860:	602a      	str	r2, [r5, #0]
 8009862:	461a      	mov	r2, r3
 8009864:	f7f7 f9ac 	bl	8000bc0 <_read>
 8009868:	1c43      	adds	r3, r0, #1
 800986a:	d102      	bne.n	8009872 <_read_r+0x1e>
 800986c:	682b      	ldr	r3, [r5, #0]
 800986e:	b103      	cbz	r3, 8009872 <_read_r+0x1e>
 8009870:	6023      	str	r3, [r4, #0]
 8009872:	bd38      	pop	{r3, r4, r5, pc}
 8009874:	20004bd4 	.word	0x20004bd4

08009878 <__swbuf_r>:
 8009878:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800987a:	460e      	mov	r6, r1
 800987c:	4614      	mov	r4, r2
 800987e:	4605      	mov	r5, r0
 8009880:	b118      	cbz	r0, 800988a <__swbuf_r+0x12>
 8009882:	6983      	ldr	r3, [r0, #24]
 8009884:	b90b      	cbnz	r3, 800988a <__swbuf_r+0x12>
 8009886:	f7fe ffbf 	bl	8008808 <__sinit>
 800988a:	4b21      	ldr	r3, [pc, #132]	; (8009910 <__swbuf_r+0x98>)
 800988c:	429c      	cmp	r4, r3
 800988e:	d12b      	bne.n	80098e8 <__swbuf_r+0x70>
 8009890:	686c      	ldr	r4, [r5, #4]
 8009892:	69a3      	ldr	r3, [r4, #24]
 8009894:	60a3      	str	r3, [r4, #8]
 8009896:	89a3      	ldrh	r3, [r4, #12]
 8009898:	071a      	lsls	r2, r3, #28
 800989a:	d52f      	bpl.n	80098fc <__swbuf_r+0x84>
 800989c:	6923      	ldr	r3, [r4, #16]
 800989e:	b36b      	cbz	r3, 80098fc <__swbuf_r+0x84>
 80098a0:	6923      	ldr	r3, [r4, #16]
 80098a2:	6820      	ldr	r0, [r4, #0]
 80098a4:	1ac0      	subs	r0, r0, r3
 80098a6:	6963      	ldr	r3, [r4, #20]
 80098a8:	b2f6      	uxtb	r6, r6
 80098aa:	4283      	cmp	r3, r0
 80098ac:	4637      	mov	r7, r6
 80098ae:	dc04      	bgt.n	80098ba <__swbuf_r+0x42>
 80098b0:	4621      	mov	r1, r4
 80098b2:	4628      	mov	r0, r5
 80098b4:	f7ff fa92 	bl	8008ddc <_fflush_r>
 80098b8:	bb30      	cbnz	r0, 8009908 <__swbuf_r+0x90>
 80098ba:	68a3      	ldr	r3, [r4, #8]
 80098bc:	3b01      	subs	r3, #1
 80098be:	60a3      	str	r3, [r4, #8]
 80098c0:	6823      	ldr	r3, [r4, #0]
 80098c2:	1c5a      	adds	r2, r3, #1
 80098c4:	6022      	str	r2, [r4, #0]
 80098c6:	701e      	strb	r6, [r3, #0]
 80098c8:	6963      	ldr	r3, [r4, #20]
 80098ca:	3001      	adds	r0, #1
 80098cc:	4283      	cmp	r3, r0
 80098ce:	d004      	beq.n	80098da <__swbuf_r+0x62>
 80098d0:	89a3      	ldrh	r3, [r4, #12]
 80098d2:	07db      	lsls	r3, r3, #31
 80098d4:	d506      	bpl.n	80098e4 <__swbuf_r+0x6c>
 80098d6:	2e0a      	cmp	r6, #10
 80098d8:	d104      	bne.n	80098e4 <__swbuf_r+0x6c>
 80098da:	4621      	mov	r1, r4
 80098dc:	4628      	mov	r0, r5
 80098de:	f7ff fa7d 	bl	8008ddc <_fflush_r>
 80098e2:	b988      	cbnz	r0, 8009908 <__swbuf_r+0x90>
 80098e4:	4638      	mov	r0, r7
 80098e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80098e8:	4b0a      	ldr	r3, [pc, #40]	; (8009914 <__swbuf_r+0x9c>)
 80098ea:	429c      	cmp	r4, r3
 80098ec:	d101      	bne.n	80098f2 <__swbuf_r+0x7a>
 80098ee:	68ac      	ldr	r4, [r5, #8]
 80098f0:	e7cf      	b.n	8009892 <__swbuf_r+0x1a>
 80098f2:	4b09      	ldr	r3, [pc, #36]	; (8009918 <__swbuf_r+0xa0>)
 80098f4:	429c      	cmp	r4, r3
 80098f6:	bf08      	it	eq
 80098f8:	68ec      	ldreq	r4, [r5, #12]
 80098fa:	e7ca      	b.n	8009892 <__swbuf_r+0x1a>
 80098fc:	4621      	mov	r1, r4
 80098fe:	4628      	mov	r0, r5
 8009900:	f000 f80c 	bl	800991c <__swsetup_r>
 8009904:	2800      	cmp	r0, #0
 8009906:	d0cb      	beq.n	80098a0 <__swbuf_r+0x28>
 8009908:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800990c:	e7ea      	b.n	80098e4 <__swbuf_r+0x6c>
 800990e:	bf00      	nop
 8009910:	08009d0c 	.word	0x08009d0c
 8009914:	08009d2c 	.word	0x08009d2c
 8009918:	08009cec 	.word	0x08009cec

0800991c <__swsetup_r>:
 800991c:	4b32      	ldr	r3, [pc, #200]	; (80099e8 <__swsetup_r+0xcc>)
 800991e:	b570      	push	{r4, r5, r6, lr}
 8009920:	681d      	ldr	r5, [r3, #0]
 8009922:	4606      	mov	r6, r0
 8009924:	460c      	mov	r4, r1
 8009926:	b125      	cbz	r5, 8009932 <__swsetup_r+0x16>
 8009928:	69ab      	ldr	r3, [r5, #24]
 800992a:	b913      	cbnz	r3, 8009932 <__swsetup_r+0x16>
 800992c:	4628      	mov	r0, r5
 800992e:	f7fe ff6b 	bl	8008808 <__sinit>
 8009932:	4b2e      	ldr	r3, [pc, #184]	; (80099ec <__swsetup_r+0xd0>)
 8009934:	429c      	cmp	r4, r3
 8009936:	d10f      	bne.n	8009958 <__swsetup_r+0x3c>
 8009938:	686c      	ldr	r4, [r5, #4]
 800993a:	89a3      	ldrh	r3, [r4, #12]
 800993c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009940:	0719      	lsls	r1, r3, #28
 8009942:	d42c      	bmi.n	800999e <__swsetup_r+0x82>
 8009944:	06dd      	lsls	r5, r3, #27
 8009946:	d411      	bmi.n	800996c <__swsetup_r+0x50>
 8009948:	2309      	movs	r3, #9
 800994a:	6033      	str	r3, [r6, #0]
 800994c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009950:	81a3      	strh	r3, [r4, #12]
 8009952:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009956:	e03e      	b.n	80099d6 <__swsetup_r+0xba>
 8009958:	4b25      	ldr	r3, [pc, #148]	; (80099f0 <__swsetup_r+0xd4>)
 800995a:	429c      	cmp	r4, r3
 800995c:	d101      	bne.n	8009962 <__swsetup_r+0x46>
 800995e:	68ac      	ldr	r4, [r5, #8]
 8009960:	e7eb      	b.n	800993a <__swsetup_r+0x1e>
 8009962:	4b24      	ldr	r3, [pc, #144]	; (80099f4 <__swsetup_r+0xd8>)
 8009964:	429c      	cmp	r4, r3
 8009966:	bf08      	it	eq
 8009968:	68ec      	ldreq	r4, [r5, #12]
 800996a:	e7e6      	b.n	800993a <__swsetup_r+0x1e>
 800996c:	0758      	lsls	r0, r3, #29
 800996e:	d512      	bpl.n	8009996 <__swsetup_r+0x7a>
 8009970:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009972:	b141      	cbz	r1, 8009986 <__swsetup_r+0x6a>
 8009974:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009978:	4299      	cmp	r1, r3
 800997a:	d002      	beq.n	8009982 <__swsetup_r+0x66>
 800997c:	4630      	mov	r0, r6
 800997e:	f7ff fa87 	bl	8008e90 <_free_r>
 8009982:	2300      	movs	r3, #0
 8009984:	6363      	str	r3, [r4, #52]	; 0x34
 8009986:	89a3      	ldrh	r3, [r4, #12]
 8009988:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800998c:	81a3      	strh	r3, [r4, #12]
 800998e:	2300      	movs	r3, #0
 8009990:	6063      	str	r3, [r4, #4]
 8009992:	6923      	ldr	r3, [r4, #16]
 8009994:	6023      	str	r3, [r4, #0]
 8009996:	89a3      	ldrh	r3, [r4, #12]
 8009998:	f043 0308 	orr.w	r3, r3, #8
 800999c:	81a3      	strh	r3, [r4, #12]
 800999e:	6923      	ldr	r3, [r4, #16]
 80099a0:	b94b      	cbnz	r3, 80099b6 <__swsetup_r+0x9a>
 80099a2:	89a3      	ldrh	r3, [r4, #12]
 80099a4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80099a8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80099ac:	d003      	beq.n	80099b6 <__swsetup_r+0x9a>
 80099ae:	4621      	mov	r1, r4
 80099b0:	4630      	mov	r0, r6
 80099b2:	f000 f845 	bl	8009a40 <__smakebuf_r>
 80099b6:	89a0      	ldrh	r0, [r4, #12]
 80099b8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80099bc:	f010 0301 	ands.w	r3, r0, #1
 80099c0:	d00a      	beq.n	80099d8 <__swsetup_r+0xbc>
 80099c2:	2300      	movs	r3, #0
 80099c4:	60a3      	str	r3, [r4, #8]
 80099c6:	6963      	ldr	r3, [r4, #20]
 80099c8:	425b      	negs	r3, r3
 80099ca:	61a3      	str	r3, [r4, #24]
 80099cc:	6923      	ldr	r3, [r4, #16]
 80099ce:	b943      	cbnz	r3, 80099e2 <__swsetup_r+0xc6>
 80099d0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80099d4:	d1ba      	bne.n	800994c <__swsetup_r+0x30>
 80099d6:	bd70      	pop	{r4, r5, r6, pc}
 80099d8:	0781      	lsls	r1, r0, #30
 80099da:	bf58      	it	pl
 80099dc:	6963      	ldrpl	r3, [r4, #20]
 80099de:	60a3      	str	r3, [r4, #8]
 80099e0:	e7f4      	b.n	80099cc <__swsetup_r+0xb0>
 80099e2:	2000      	movs	r0, #0
 80099e4:	e7f7      	b.n	80099d6 <__swsetup_r+0xba>
 80099e6:	bf00      	nop
 80099e8:	20000168 	.word	0x20000168
 80099ec:	08009d0c 	.word	0x08009d0c
 80099f0:	08009d2c 	.word	0x08009d2c
 80099f4:	08009cec 	.word	0x08009cec

080099f8 <__swhatbuf_r>:
 80099f8:	b570      	push	{r4, r5, r6, lr}
 80099fa:	460e      	mov	r6, r1
 80099fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009a00:	2900      	cmp	r1, #0
 8009a02:	b096      	sub	sp, #88	; 0x58
 8009a04:	4614      	mov	r4, r2
 8009a06:	461d      	mov	r5, r3
 8009a08:	da07      	bge.n	8009a1a <__swhatbuf_r+0x22>
 8009a0a:	2300      	movs	r3, #0
 8009a0c:	602b      	str	r3, [r5, #0]
 8009a0e:	89b3      	ldrh	r3, [r6, #12]
 8009a10:	061a      	lsls	r2, r3, #24
 8009a12:	d410      	bmi.n	8009a36 <__swhatbuf_r+0x3e>
 8009a14:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009a18:	e00e      	b.n	8009a38 <__swhatbuf_r+0x40>
 8009a1a:	466a      	mov	r2, sp
 8009a1c:	f000 f890 	bl	8009b40 <_fstat_r>
 8009a20:	2800      	cmp	r0, #0
 8009a22:	dbf2      	blt.n	8009a0a <__swhatbuf_r+0x12>
 8009a24:	9a01      	ldr	r2, [sp, #4]
 8009a26:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009a2a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009a2e:	425a      	negs	r2, r3
 8009a30:	415a      	adcs	r2, r3
 8009a32:	602a      	str	r2, [r5, #0]
 8009a34:	e7ee      	b.n	8009a14 <__swhatbuf_r+0x1c>
 8009a36:	2340      	movs	r3, #64	; 0x40
 8009a38:	2000      	movs	r0, #0
 8009a3a:	6023      	str	r3, [r4, #0]
 8009a3c:	b016      	add	sp, #88	; 0x58
 8009a3e:	bd70      	pop	{r4, r5, r6, pc}

08009a40 <__smakebuf_r>:
 8009a40:	898b      	ldrh	r3, [r1, #12]
 8009a42:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009a44:	079d      	lsls	r5, r3, #30
 8009a46:	4606      	mov	r6, r0
 8009a48:	460c      	mov	r4, r1
 8009a4a:	d507      	bpl.n	8009a5c <__smakebuf_r+0x1c>
 8009a4c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009a50:	6023      	str	r3, [r4, #0]
 8009a52:	6123      	str	r3, [r4, #16]
 8009a54:	2301      	movs	r3, #1
 8009a56:	6163      	str	r3, [r4, #20]
 8009a58:	b002      	add	sp, #8
 8009a5a:	bd70      	pop	{r4, r5, r6, pc}
 8009a5c:	ab01      	add	r3, sp, #4
 8009a5e:	466a      	mov	r2, sp
 8009a60:	f7ff ffca 	bl	80099f8 <__swhatbuf_r>
 8009a64:	9900      	ldr	r1, [sp, #0]
 8009a66:	4605      	mov	r5, r0
 8009a68:	4630      	mov	r0, r6
 8009a6a:	f7fe ffa9 	bl	80089c0 <_malloc_r>
 8009a6e:	b948      	cbnz	r0, 8009a84 <__smakebuf_r+0x44>
 8009a70:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009a74:	059a      	lsls	r2, r3, #22
 8009a76:	d4ef      	bmi.n	8009a58 <__smakebuf_r+0x18>
 8009a78:	f023 0303 	bic.w	r3, r3, #3
 8009a7c:	f043 0302 	orr.w	r3, r3, #2
 8009a80:	81a3      	strh	r3, [r4, #12]
 8009a82:	e7e3      	b.n	8009a4c <__smakebuf_r+0xc>
 8009a84:	4b0d      	ldr	r3, [pc, #52]	; (8009abc <__smakebuf_r+0x7c>)
 8009a86:	62b3      	str	r3, [r6, #40]	; 0x28
 8009a88:	89a3      	ldrh	r3, [r4, #12]
 8009a8a:	6020      	str	r0, [r4, #0]
 8009a8c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009a90:	81a3      	strh	r3, [r4, #12]
 8009a92:	9b00      	ldr	r3, [sp, #0]
 8009a94:	6163      	str	r3, [r4, #20]
 8009a96:	9b01      	ldr	r3, [sp, #4]
 8009a98:	6120      	str	r0, [r4, #16]
 8009a9a:	b15b      	cbz	r3, 8009ab4 <__smakebuf_r+0x74>
 8009a9c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009aa0:	4630      	mov	r0, r6
 8009aa2:	f000 f85f 	bl	8009b64 <_isatty_r>
 8009aa6:	b128      	cbz	r0, 8009ab4 <__smakebuf_r+0x74>
 8009aa8:	89a3      	ldrh	r3, [r4, #12]
 8009aaa:	f023 0303 	bic.w	r3, r3, #3
 8009aae:	f043 0301 	orr.w	r3, r3, #1
 8009ab2:	81a3      	strh	r3, [r4, #12]
 8009ab4:	89a0      	ldrh	r0, [r4, #12]
 8009ab6:	4305      	orrs	r5, r0
 8009ab8:	81a5      	strh	r5, [r4, #12]
 8009aba:	e7cd      	b.n	8009a58 <__smakebuf_r+0x18>
 8009abc:	080087a1 	.word	0x080087a1

08009ac0 <memmove>:
 8009ac0:	4288      	cmp	r0, r1
 8009ac2:	b510      	push	{r4, lr}
 8009ac4:	eb01 0402 	add.w	r4, r1, r2
 8009ac8:	d902      	bls.n	8009ad0 <memmove+0x10>
 8009aca:	4284      	cmp	r4, r0
 8009acc:	4623      	mov	r3, r4
 8009ace:	d807      	bhi.n	8009ae0 <memmove+0x20>
 8009ad0:	1e43      	subs	r3, r0, #1
 8009ad2:	42a1      	cmp	r1, r4
 8009ad4:	d008      	beq.n	8009ae8 <memmove+0x28>
 8009ad6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009ada:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009ade:	e7f8      	b.n	8009ad2 <memmove+0x12>
 8009ae0:	4402      	add	r2, r0
 8009ae2:	4601      	mov	r1, r0
 8009ae4:	428a      	cmp	r2, r1
 8009ae6:	d100      	bne.n	8009aea <memmove+0x2a>
 8009ae8:	bd10      	pop	{r4, pc}
 8009aea:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009aee:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009af2:	e7f7      	b.n	8009ae4 <memmove+0x24>

08009af4 <_realloc_r>:
 8009af4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009af6:	4607      	mov	r7, r0
 8009af8:	4614      	mov	r4, r2
 8009afa:	460e      	mov	r6, r1
 8009afc:	b921      	cbnz	r1, 8009b08 <_realloc_r+0x14>
 8009afe:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8009b02:	4611      	mov	r1, r2
 8009b04:	f7fe bf5c 	b.w	80089c0 <_malloc_r>
 8009b08:	b922      	cbnz	r2, 8009b14 <_realloc_r+0x20>
 8009b0a:	f7ff f9c1 	bl	8008e90 <_free_r>
 8009b0e:	4625      	mov	r5, r4
 8009b10:	4628      	mov	r0, r5
 8009b12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009b14:	f000 f836 	bl	8009b84 <_malloc_usable_size_r>
 8009b18:	42a0      	cmp	r0, r4
 8009b1a:	d20f      	bcs.n	8009b3c <_realloc_r+0x48>
 8009b1c:	4621      	mov	r1, r4
 8009b1e:	4638      	mov	r0, r7
 8009b20:	f7fe ff4e 	bl	80089c0 <_malloc_r>
 8009b24:	4605      	mov	r5, r0
 8009b26:	2800      	cmp	r0, #0
 8009b28:	d0f2      	beq.n	8009b10 <_realloc_r+0x1c>
 8009b2a:	4631      	mov	r1, r6
 8009b2c:	4622      	mov	r2, r4
 8009b2e:	f7fe ff30 	bl	8008992 <memcpy>
 8009b32:	4631      	mov	r1, r6
 8009b34:	4638      	mov	r0, r7
 8009b36:	f7ff f9ab 	bl	8008e90 <_free_r>
 8009b3a:	e7e9      	b.n	8009b10 <_realloc_r+0x1c>
 8009b3c:	4635      	mov	r5, r6
 8009b3e:	e7e7      	b.n	8009b10 <_realloc_r+0x1c>

08009b40 <_fstat_r>:
 8009b40:	b538      	push	{r3, r4, r5, lr}
 8009b42:	4d07      	ldr	r5, [pc, #28]	; (8009b60 <_fstat_r+0x20>)
 8009b44:	2300      	movs	r3, #0
 8009b46:	4604      	mov	r4, r0
 8009b48:	4608      	mov	r0, r1
 8009b4a:	4611      	mov	r1, r2
 8009b4c:	602b      	str	r3, [r5, #0]
 8009b4e:	f7f7 f860 	bl	8000c12 <_fstat>
 8009b52:	1c43      	adds	r3, r0, #1
 8009b54:	d102      	bne.n	8009b5c <_fstat_r+0x1c>
 8009b56:	682b      	ldr	r3, [r5, #0]
 8009b58:	b103      	cbz	r3, 8009b5c <_fstat_r+0x1c>
 8009b5a:	6023      	str	r3, [r4, #0]
 8009b5c:	bd38      	pop	{r3, r4, r5, pc}
 8009b5e:	bf00      	nop
 8009b60:	20004bd4 	.word	0x20004bd4

08009b64 <_isatty_r>:
 8009b64:	b538      	push	{r3, r4, r5, lr}
 8009b66:	4d06      	ldr	r5, [pc, #24]	; (8009b80 <_isatty_r+0x1c>)
 8009b68:	2300      	movs	r3, #0
 8009b6a:	4604      	mov	r4, r0
 8009b6c:	4608      	mov	r0, r1
 8009b6e:	602b      	str	r3, [r5, #0]
 8009b70:	f7f7 f85f 	bl	8000c32 <_isatty>
 8009b74:	1c43      	adds	r3, r0, #1
 8009b76:	d102      	bne.n	8009b7e <_isatty_r+0x1a>
 8009b78:	682b      	ldr	r3, [r5, #0]
 8009b7a:	b103      	cbz	r3, 8009b7e <_isatty_r+0x1a>
 8009b7c:	6023      	str	r3, [r4, #0]
 8009b7e:	bd38      	pop	{r3, r4, r5, pc}
 8009b80:	20004bd4 	.word	0x20004bd4

08009b84 <_malloc_usable_size_r>:
 8009b84:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009b88:	1f18      	subs	r0, r3, #4
 8009b8a:	2b00      	cmp	r3, #0
 8009b8c:	bfbc      	itt	lt
 8009b8e:	580b      	ldrlt	r3, [r1, r0]
 8009b90:	18c0      	addlt	r0, r0, r3
 8009b92:	4770      	bx	lr

08009b94 <_init>:
 8009b94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b96:	bf00      	nop
 8009b98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009b9a:	bc08      	pop	{r3}
 8009b9c:	469e      	mov	lr, r3
 8009b9e:	4770      	bx	lr

08009ba0 <_fini>:
 8009ba0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ba2:	bf00      	nop
 8009ba4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009ba6:	bc08      	pop	{r3}
 8009ba8:	469e      	mov	lr, r3
 8009baa:	4770      	bx	lr
