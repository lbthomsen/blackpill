
test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007bfc  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08007e94  08007e94  00017e94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08007ecc  08007ecc  00017ecc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08007ed4  08007ed4  00017ed4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08007ed8  08007ed8  00017ed8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000010  24000000  08007edc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000580  24000010  08007eec  00020010  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  24000590  08007eec  00020590  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 10 .debug_info   00021233  00000000  00000000  0002003e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 0000357a  00000000  00000000  00041271  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000011b0  00000000  00000000  000447f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 000010b8  00000000  00000000  000459a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003727c  00000000  00000000  00046a58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00014853  00000000  00000000  0007dcd4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0015d9a0  00000000  00000000  00092527  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000053  00000000  00000000  001efec7  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00004b58  00000000  00000000  001eff1c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000010 	.word	0x24000010
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08007e7c 	.word	0x08007e7c

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000014 	.word	0x24000014
 80002d4:	08007e7c 	.word	0x08007e7c

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002ec:	f000 b96e 	b.w	80005cc <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9d08      	ldr	r5, [sp, #32]
 800030e:	4604      	mov	r4, r0
 8000310:	468c      	mov	ip, r1
 8000312:	2b00      	cmp	r3, #0
 8000314:	f040 8083 	bne.w	800041e <__udivmoddi4+0x116>
 8000318:	428a      	cmp	r2, r1
 800031a:	4617      	mov	r7, r2
 800031c:	d947      	bls.n	80003ae <__udivmoddi4+0xa6>
 800031e:	fab2 f282 	clz	r2, r2
 8000322:	b142      	cbz	r2, 8000336 <__udivmoddi4+0x2e>
 8000324:	f1c2 0020 	rsb	r0, r2, #32
 8000328:	fa24 f000 	lsr.w	r0, r4, r0
 800032c:	4091      	lsls	r1, r2
 800032e:	4097      	lsls	r7, r2
 8000330:	ea40 0c01 	orr.w	ip, r0, r1
 8000334:	4094      	lsls	r4, r2
 8000336:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800033a:	0c23      	lsrs	r3, r4, #16
 800033c:	fbbc f6f8 	udiv	r6, ip, r8
 8000340:	fa1f fe87 	uxth.w	lr, r7
 8000344:	fb08 c116 	mls	r1, r8, r6, ip
 8000348:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800034c:	fb06 f10e 	mul.w	r1, r6, lr
 8000350:	4299      	cmp	r1, r3
 8000352:	d909      	bls.n	8000368 <__udivmoddi4+0x60>
 8000354:	18fb      	adds	r3, r7, r3
 8000356:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 800035a:	f080 8119 	bcs.w	8000590 <__udivmoddi4+0x288>
 800035e:	4299      	cmp	r1, r3
 8000360:	f240 8116 	bls.w	8000590 <__udivmoddi4+0x288>
 8000364:	3e02      	subs	r6, #2
 8000366:	443b      	add	r3, r7
 8000368:	1a5b      	subs	r3, r3, r1
 800036a:	b2a4      	uxth	r4, r4
 800036c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000370:	fb08 3310 	mls	r3, r8, r0, r3
 8000374:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000378:	fb00 fe0e 	mul.w	lr, r0, lr
 800037c:	45a6      	cmp	lr, r4
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x8c>
 8000380:	193c      	adds	r4, r7, r4
 8000382:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000386:	f080 8105 	bcs.w	8000594 <__udivmoddi4+0x28c>
 800038a:	45a6      	cmp	lr, r4
 800038c:	f240 8102 	bls.w	8000594 <__udivmoddi4+0x28c>
 8000390:	3802      	subs	r0, #2
 8000392:	443c      	add	r4, r7
 8000394:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000398:	eba4 040e 	sub.w	r4, r4, lr
 800039c:	2600      	movs	r6, #0
 800039e:	b11d      	cbz	r5, 80003a8 <__udivmoddi4+0xa0>
 80003a0:	40d4      	lsrs	r4, r2
 80003a2:	2300      	movs	r3, #0
 80003a4:	e9c5 4300 	strd	r4, r3, [r5]
 80003a8:	4631      	mov	r1, r6
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	b902      	cbnz	r2, 80003b2 <__udivmoddi4+0xaa>
 80003b0:	deff      	udf	#255	; 0xff
 80003b2:	fab2 f282 	clz	r2, r2
 80003b6:	2a00      	cmp	r2, #0
 80003b8:	d150      	bne.n	800045c <__udivmoddi4+0x154>
 80003ba:	1bcb      	subs	r3, r1, r7
 80003bc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003c0:	fa1f f887 	uxth.w	r8, r7
 80003c4:	2601      	movs	r6, #1
 80003c6:	fbb3 fcfe 	udiv	ip, r3, lr
 80003ca:	0c21      	lsrs	r1, r4, #16
 80003cc:	fb0e 331c 	mls	r3, lr, ip, r3
 80003d0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003d4:	fb08 f30c 	mul.w	r3, r8, ip
 80003d8:	428b      	cmp	r3, r1
 80003da:	d907      	bls.n	80003ec <__udivmoddi4+0xe4>
 80003dc:	1879      	adds	r1, r7, r1
 80003de:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0xe2>
 80003e4:	428b      	cmp	r3, r1
 80003e6:	f200 80e9 	bhi.w	80005bc <__udivmoddi4+0x2b4>
 80003ea:	4684      	mov	ip, r0
 80003ec:	1ac9      	subs	r1, r1, r3
 80003ee:	b2a3      	uxth	r3, r4
 80003f0:	fbb1 f0fe 	udiv	r0, r1, lr
 80003f4:	fb0e 1110 	mls	r1, lr, r0, r1
 80003f8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003fc:	fb08 f800 	mul.w	r8, r8, r0
 8000400:	45a0      	cmp	r8, r4
 8000402:	d907      	bls.n	8000414 <__udivmoddi4+0x10c>
 8000404:	193c      	adds	r4, r7, r4
 8000406:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800040a:	d202      	bcs.n	8000412 <__udivmoddi4+0x10a>
 800040c:	45a0      	cmp	r8, r4
 800040e:	f200 80d9 	bhi.w	80005c4 <__udivmoddi4+0x2bc>
 8000412:	4618      	mov	r0, r3
 8000414:	eba4 0408 	sub.w	r4, r4, r8
 8000418:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800041c:	e7bf      	b.n	800039e <__udivmoddi4+0x96>
 800041e:	428b      	cmp	r3, r1
 8000420:	d909      	bls.n	8000436 <__udivmoddi4+0x12e>
 8000422:	2d00      	cmp	r5, #0
 8000424:	f000 80b1 	beq.w	800058a <__udivmoddi4+0x282>
 8000428:	2600      	movs	r6, #0
 800042a:	e9c5 0100 	strd	r0, r1, [r5]
 800042e:	4630      	mov	r0, r6
 8000430:	4631      	mov	r1, r6
 8000432:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000436:	fab3 f683 	clz	r6, r3
 800043a:	2e00      	cmp	r6, #0
 800043c:	d14a      	bne.n	80004d4 <__udivmoddi4+0x1cc>
 800043e:	428b      	cmp	r3, r1
 8000440:	d302      	bcc.n	8000448 <__udivmoddi4+0x140>
 8000442:	4282      	cmp	r2, r0
 8000444:	f200 80b8 	bhi.w	80005b8 <__udivmoddi4+0x2b0>
 8000448:	1a84      	subs	r4, r0, r2
 800044a:	eb61 0103 	sbc.w	r1, r1, r3
 800044e:	2001      	movs	r0, #1
 8000450:	468c      	mov	ip, r1
 8000452:	2d00      	cmp	r5, #0
 8000454:	d0a8      	beq.n	80003a8 <__udivmoddi4+0xa0>
 8000456:	e9c5 4c00 	strd	r4, ip, [r5]
 800045a:	e7a5      	b.n	80003a8 <__udivmoddi4+0xa0>
 800045c:	f1c2 0320 	rsb	r3, r2, #32
 8000460:	fa20 f603 	lsr.w	r6, r0, r3
 8000464:	4097      	lsls	r7, r2
 8000466:	fa01 f002 	lsl.w	r0, r1, r2
 800046a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800046e:	40d9      	lsrs	r1, r3
 8000470:	4330      	orrs	r0, r6
 8000472:	0c03      	lsrs	r3, r0, #16
 8000474:	fbb1 f6fe 	udiv	r6, r1, lr
 8000478:	fa1f f887 	uxth.w	r8, r7
 800047c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000480:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000484:	fb06 f108 	mul.w	r1, r6, r8
 8000488:	4299      	cmp	r1, r3
 800048a:	fa04 f402 	lsl.w	r4, r4, r2
 800048e:	d909      	bls.n	80004a4 <__udivmoddi4+0x19c>
 8000490:	18fb      	adds	r3, r7, r3
 8000492:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000496:	f080 808d 	bcs.w	80005b4 <__udivmoddi4+0x2ac>
 800049a:	4299      	cmp	r1, r3
 800049c:	f240 808a 	bls.w	80005b4 <__udivmoddi4+0x2ac>
 80004a0:	3e02      	subs	r6, #2
 80004a2:	443b      	add	r3, r7
 80004a4:	1a5b      	subs	r3, r3, r1
 80004a6:	b281      	uxth	r1, r0
 80004a8:	fbb3 f0fe 	udiv	r0, r3, lr
 80004ac:	fb0e 3310 	mls	r3, lr, r0, r3
 80004b0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004b4:	fb00 f308 	mul.w	r3, r0, r8
 80004b8:	428b      	cmp	r3, r1
 80004ba:	d907      	bls.n	80004cc <__udivmoddi4+0x1c4>
 80004bc:	1879      	adds	r1, r7, r1
 80004be:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80004c2:	d273      	bcs.n	80005ac <__udivmoddi4+0x2a4>
 80004c4:	428b      	cmp	r3, r1
 80004c6:	d971      	bls.n	80005ac <__udivmoddi4+0x2a4>
 80004c8:	3802      	subs	r0, #2
 80004ca:	4439      	add	r1, r7
 80004cc:	1acb      	subs	r3, r1, r3
 80004ce:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004d2:	e778      	b.n	80003c6 <__udivmoddi4+0xbe>
 80004d4:	f1c6 0c20 	rsb	ip, r6, #32
 80004d8:	fa03 f406 	lsl.w	r4, r3, r6
 80004dc:	fa22 f30c 	lsr.w	r3, r2, ip
 80004e0:	431c      	orrs	r4, r3
 80004e2:	fa20 f70c 	lsr.w	r7, r0, ip
 80004e6:	fa01 f306 	lsl.w	r3, r1, r6
 80004ea:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004ee:	fa21 f10c 	lsr.w	r1, r1, ip
 80004f2:	431f      	orrs	r7, r3
 80004f4:	0c3b      	lsrs	r3, r7, #16
 80004f6:	fbb1 f9fe 	udiv	r9, r1, lr
 80004fa:	fa1f f884 	uxth.w	r8, r4
 80004fe:	fb0e 1119 	mls	r1, lr, r9, r1
 8000502:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000506:	fb09 fa08 	mul.w	sl, r9, r8
 800050a:	458a      	cmp	sl, r1
 800050c:	fa02 f206 	lsl.w	r2, r2, r6
 8000510:	fa00 f306 	lsl.w	r3, r0, r6
 8000514:	d908      	bls.n	8000528 <__udivmoddi4+0x220>
 8000516:	1861      	adds	r1, r4, r1
 8000518:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 800051c:	d248      	bcs.n	80005b0 <__udivmoddi4+0x2a8>
 800051e:	458a      	cmp	sl, r1
 8000520:	d946      	bls.n	80005b0 <__udivmoddi4+0x2a8>
 8000522:	f1a9 0902 	sub.w	r9, r9, #2
 8000526:	4421      	add	r1, r4
 8000528:	eba1 010a 	sub.w	r1, r1, sl
 800052c:	b2bf      	uxth	r7, r7
 800052e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000532:	fb0e 1110 	mls	r1, lr, r0, r1
 8000536:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800053a:	fb00 f808 	mul.w	r8, r0, r8
 800053e:	45b8      	cmp	r8, r7
 8000540:	d907      	bls.n	8000552 <__udivmoddi4+0x24a>
 8000542:	19e7      	adds	r7, r4, r7
 8000544:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000548:	d22e      	bcs.n	80005a8 <__udivmoddi4+0x2a0>
 800054a:	45b8      	cmp	r8, r7
 800054c:	d92c      	bls.n	80005a8 <__udivmoddi4+0x2a0>
 800054e:	3802      	subs	r0, #2
 8000550:	4427      	add	r7, r4
 8000552:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000556:	eba7 0708 	sub.w	r7, r7, r8
 800055a:	fba0 8902 	umull	r8, r9, r0, r2
 800055e:	454f      	cmp	r7, r9
 8000560:	46c6      	mov	lr, r8
 8000562:	4649      	mov	r1, r9
 8000564:	d31a      	bcc.n	800059c <__udivmoddi4+0x294>
 8000566:	d017      	beq.n	8000598 <__udivmoddi4+0x290>
 8000568:	b15d      	cbz	r5, 8000582 <__udivmoddi4+0x27a>
 800056a:	ebb3 020e 	subs.w	r2, r3, lr
 800056e:	eb67 0701 	sbc.w	r7, r7, r1
 8000572:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000576:	40f2      	lsrs	r2, r6
 8000578:	ea4c 0202 	orr.w	r2, ip, r2
 800057c:	40f7      	lsrs	r7, r6
 800057e:	e9c5 2700 	strd	r2, r7, [r5]
 8000582:	2600      	movs	r6, #0
 8000584:	4631      	mov	r1, r6
 8000586:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800058a:	462e      	mov	r6, r5
 800058c:	4628      	mov	r0, r5
 800058e:	e70b      	b.n	80003a8 <__udivmoddi4+0xa0>
 8000590:	4606      	mov	r6, r0
 8000592:	e6e9      	b.n	8000368 <__udivmoddi4+0x60>
 8000594:	4618      	mov	r0, r3
 8000596:	e6fd      	b.n	8000394 <__udivmoddi4+0x8c>
 8000598:	4543      	cmp	r3, r8
 800059a:	d2e5      	bcs.n	8000568 <__udivmoddi4+0x260>
 800059c:	ebb8 0e02 	subs.w	lr, r8, r2
 80005a0:	eb69 0104 	sbc.w	r1, r9, r4
 80005a4:	3801      	subs	r0, #1
 80005a6:	e7df      	b.n	8000568 <__udivmoddi4+0x260>
 80005a8:	4608      	mov	r0, r1
 80005aa:	e7d2      	b.n	8000552 <__udivmoddi4+0x24a>
 80005ac:	4660      	mov	r0, ip
 80005ae:	e78d      	b.n	80004cc <__udivmoddi4+0x1c4>
 80005b0:	4681      	mov	r9, r0
 80005b2:	e7b9      	b.n	8000528 <__udivmoddi4+0x220>
 80005b4:	4666      	mov	r6, ip
 80005b6:	e775      	b.n	80004a4 <__udivmoddi4+0x19c>
 80005b8:	4630      	mov	r0, r6
 80005ba:	e74a      	b.n	8000452 <__udivmoddi4+0x14a>
 80005bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c0:	4439      	add	r1, r7
 80005c2:	e713      	b.n	80003ec <__udivmoddi4+0xe4>
 80005c4:	3802      	subs	r0, #2
 80005c6:	443c      	add	r4, r7
 80005c8:	e724      	b.n	8000414 <__udivmoddi4+0x10c>
 80005ca:	bf00      	nop

080005cc <__aeabi_idiv0>:
 80005cc:	4770      	bx	lr
 80005ce:	bf00      	nop

080005d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005d4:	f000 fd50 	bl	8001078 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005d8:	f000 f80c 	bl	80005f4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005dc:	f000 f94e 	bl	800087c <MX_GPIO_Init>
  MX_QUADSPI_Init();
 80005e0:	f000 f882 	bl	80006e8 <MX_QUADSPI_Init>
  MX_SDMMC2_SD_Init();
 80005e4:	f000 f8a8 	bl	8000738 <MX_SDMMC2_SD_Init>
  MX_USART1_UART_Init();
 80005e8:	f000 f8ca 	bl	8000780 <MX_USART1_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80005ec:	f000 f914 	bl	8000818 <MX_USB_OTG_FS_PCD_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005f0:	e7fe      	b.n	80005f0 <main+0x20>
	...

080005f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b09c      	sub	sp, #112	; 0x70
 80005f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80005fe:	224c      	movs	r2, #76	; 0x4c
 8000600:	2100      	movs	r1, #0
 8000602:	4618      	mov	r0, r3
 8000604:	f007 fc32 	bl	8007e6c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000608:	1d3b      	adds	r3, r7, #4
 800060a:	2220      	movs	r2, #32
 800060c:	2100      	movs	r1, #0
 800060e:	4618      	mov	r0, r3
 8000610:	f007 fc2c 	bl	8007e6c <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000614:	2002      	movs	r0, #2
 8000616:	f001 f9cd 	bl	80019b4 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 800061a:	2300      	movs	r3, #0
 800061c:	603b      	str	r3, [r7, #0]
 800061e:	4b30      	ldr	r3, [pc, #192]	; (80006e0 <SystemClock_Config+0xec>)
 8000620:	699b      	ldr	r3, [r3, #24]
 8000622:	4a2f      	ldr	r2, [pc, #188]	; (80006e0 <SystemClock_Config+0xec>)
 8000624:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000628:	6193      	str	r3, [r2, #24]
 800062a:	4b2d      	ldr	r3, [pc, #180]	; (80006e0 <SystemClock_Config+0xec>)
 800062c:	699b      	ldr	r3, [r3, #24]
 800062e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000632:	603b      	str	r3, [r7, #0]
 8000634:	4b2b      	ldr	r3, [pc, #172]	; (80006e4 <SystemClock_Config+0xf0>)
 8000636:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000638:	4a2a      	ldr	r2, [pc, #168]	; (80006e4 <SystemClock_Config+0xf0>)
 800063a:	f043 0301 	orr.w	r3, r3, #1
 800063e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000640:	4b28      	ldr	r3, [pc, #160]	; (80006e4 <SystemClock_Config+0xf0>)
 8000642:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000644:	f003 0301 	and.w	r3, r3, #1
 8000648:	603b      	str	r3, [r7, #0]
 800064a:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800064c:	bf00      	nop
 800064e:	4b24      	ldr	r3, [pc, #144]	; (80006e0 <SystemClock_Config+0xec>)
 8000650:	699b      	ldr	r3, [r3, #24]
 8000652:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000656:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800065a:	d1f8      	bne.n	800064e <SystemClock_Config+0x5a>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800065c:	2301      	movs	r3, #1
 800065e:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000660:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000664:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000666:	2302      	movs	r3, #2
 8000668:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800066a:	2302      	movs	r3, #2
 800066c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 2;
 800066e:	2302      	movs	r3, #2
 8000670:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 32;
 8000672:	2320      	movs	r3, #32
 8000674:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000676:	2302      	movs	r3, #2
 8000678:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 6;
 800067a:	2306      	movs	r3, #6
 800067c:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800067e:	2302      	movs	r3, #2
 8000680:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000682:	230c      	movs	r3, #12
 8000684:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000686:	2300      	movs	r3, #0
 8000688:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800068a:	2300      	movs	r3, #0
 800068c:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800068e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000692:	4618      	mov	r0, r3
 8000694:	f001 fa92 	bl	8001bbc <HAL_RCC_OscConfig>
 8000698:	4603      	mov	r3, r0
 800069a:	2b00      	cmp	r3, #0
 800069c:	d001      	beq.n	80006a2 <SystemClock_Config+0xae>
  {
    Error_Handler();
 800069e:	f000 f953 	bl	8000948 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006a2:	233f      	movs	r3, #63	; 0x3f
 80006a4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006a6:	2303      	movs	r3, #3
 80006a8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80006aa:	2300      	movs	r3, #0
 80006ac:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80006ae:	2300      	movs	r3, #0
 80006b0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80006b2:	2340      	movs	r3, #64	; 0x40
 80006b4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80006b6:	2340      	movs	r3, #64	; 0x40
 80006b8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80006ba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80006be:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80006c0:	2340      	movs	r3, #64	; 0x40
 80006c2:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80006c4:	1d3b      	adds	r3, r7, #4
 80006c6:	2102      	movs	r1, #2
 80006c8:	4618      	mov	r0, r3
 80006ca:	f001 fe87 	bl	80023dc <HAL_RCC_ClockConfig>
 80006ce:	4603      	mov	r3, r0
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	d001      	beq.n	80006d8 <SystemClock_Config+0xe4>
  {
    Error_Handler();
 80006d4:	f000 f938 	bl	8000948 <Error_Handler>
  }
}
 80006d8:	bf00      	nop
 80006da:	3770      	adds	r7, #112	; 0x70
 80006dc:	46bd      	mov	sp, r7
 80006de:	bd80      	pop	{r7, pc}
 80006e0:	58024800 	.word	0x58024800
 80006e4:	58000400 	.word	0x58000400

080006e8 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 80006ec:	4b10      	ldr	r3, [pc, #64]	; (8000730 <MX_QUADSPI_Init+0x48>)
 80006ee:	4a11      	ldr	r2, [pc, #68]	; (8000734 <MX_QUADSPI_Init+0x4c>)
 80006f0:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 255;
 80006f2:	4b0f      	ldr	r3, [pc, #60]	; (8000730 <MX_QUADSPI_Init+0x48>)
 80006f4:	22ff      	movs	r2, #255	; 0xff
 80006f6:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 1;
 80006f8:	4b0d      	ldr	r3, [pc, #52]	; (8000730 <MX_QUADSPI_Init+0x48>)
 80006fa:	2201      	movs	r2, #1
 80006fc:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 80006fe:	4b0c      	ldr	r3, [pc, #48]	; (8000730 <MX_QUADSPI_Init+0x48>)
 8000700:	2200      	movs	r2, #0
 8000702:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 1;
 8000704:	4b0a      	ldr	r3, [pc, #40]	; (8000730 <MX_QUADSPI_Init+0x48>)
 8000706:	2201      	movs	r2, #1
 8000708:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 800070a:	4b09      	ldr	r3, [pc, #36]	; (8000730 <MX_QUADSPI_Init+0x48>)
 800070c:	2200      	movs	r2, #0
 800070e:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8000710:	4b07      	ldr	r3, [pc, #28]	; (8000730 <MX_QUADSPI_Init+0x48>)
 8000712:	2200      	movs	r2, #0
 8000714:	619a      	str	r2, [r3, #24]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_ENABLE;
 8000716:	4b06      	ldr	r3, [pc, #24]	; (8000730 <MX_QUADSPI_Init+0x48>)
 8000718:	2240      	movs	r2, #64	; 0x40
 800071a:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 800071c:	4804      	ldr	r0, [pc, #16]	; (8000730 <MX_QUADSPI_Init+0x48>)
 800071e:	f001 f993 	bl	8001a48 <HAL_QSPI_Init>
 8000722:	4603      	mov	r3, r0
 8000724:	2b00      	cmp	r3, #0
 8000726:	d001      	beq.n	800072c <MX_QUADSPI_Init+0x44>
  {
    Error_Handler();
 8000728:	f000 f90e 	bl	8000948 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 800072c:	bf00      	nop
 800072e:	bd80      	pop	{r7, pc}
 8000730:	24000540 	.word	0x24000540
 8000734:	52005000 	.word	0x52005000

08000738 <MX_SDMMC2_SD_Init>:
  * @brief SDMMC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC2_SD_Init(void)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC2_Init 0 */

  /* USER CODE BEGIN SDMMC2_Init 1 */

  /* USER CODE END SDMMC2_Init 1 */
  hsd2.Instance = SDMMC2;
 800073c:	4b0e      	ldr	r3, [pc, #56]	; (8000778 <MX_SDMMC2_SD_Init+0x40>)
 800073e:	4a0f      	ldr	r2, [pc, #60]	; (800077c <MX_SDMMC2_SD_Init+0x44>)
 8000740:	601a      	str	r2, [r3, #0]
  hsd2.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8000742:	4b0d      	ldr	r3, [pc, #52]	; (8000778 <MX_SDMMC2_SD_Init+0x40>)
 8000744:	2200      	movs	r2, #0
 8000746:	605a      	str	r2, [r3, #4]
  hsd2.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8000748:	4b0b      	ldr	r3, [pc, #44]	; (8000778 <MX_SDMMC2_SD_Init+0x40>)
 800074a:	2200      	movs	r2, #0
 800074c:	609a      	str	r2, [r3, #8]
  hsd2.Init.BusWide = SDMMC_BUS_WIDE_4B;
 800074e:	4b0a      	ldr	r3, [pc, #40]	; (8000778 <MX_SDMMC2_SD_Init+0x40>)
 8000750:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000754:	60da      	str	r2, [r3, #12]
  hsd2.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8000756:	4b08      	ldr	r3, [pc, #32]	; (8000778 <MX_SDMMC2_SD_Init+0x40>)
 8000758:	2200      	movs	r2, #0
 800075a:	611a      	str	r2, [r3, #16]
  hsd2.Init.ClockDiv = 0;
 800075c:	4b06      	ldr	r3, [pc, #24]	; (8000778 <MX_SDMMC2_SD_Init+0x40>)
 800075e:	2200      	movs	r2, #0
 8000760:	615a      	str	r2, [r3, #20]
  if (HAL_SD_Init(&hsd2) != HAL_OK)
 8000762:	4805      	ldr	r0, [pc, #20]	; (8000778 <MX_SDMMC2_SD_Init+0x40>)
 8000764:	f004 fb4c 	bl	8004e00 <HAL_SD_Init>
 8000768:	4603      	mov	r3, r0
 800076a:	2b00      	cmp	r3, #0
 800076c:	d001      	beq.n	8000772 <MX_SDMMC2_SD_Init+0x3a>
  {
    Error_Handler();
 800076e:	f000 f8eb 	bl	8000948 <Error_Handler>
  }
  /* USER CODE BEGIN SDMMC2_Init 2 */

  /* USER CODE END SDMMC2_Init 2 */

}
 8000772:	bf00      	nop
 8000774:	bd80      	pop	{r7, pc}
 8000776:	bf00      	nop
 8000778:	24000434 	.word	0x24000434
 800077c:	48022400 	.word	0x48022400

08000780 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000784:	4b22      	ldr	r3, [pc, #136]	; (8000810 <MX_USART1_UART_Init+0x90>)
 8000786:	4a23      	ldr	r2, [pc, #140]	; (8000814 <MX_USART1_UART_Init+0x94>)
 8000788:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800078a:	4b21      	ldr	r3, [pc, #132]	; (8000810 <MX_USART1_UART_Init+0x90>)
 800078c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000790:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000792:	4b1f      	ldr	r3, [pc, #124]	; (8000810 <MX_USART1_UART_Init+0x90>)
 8000794:	2200      	movs	r2, #0
 8000796:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000798:	4b1d      	ldr	r3, [pc, #116]	; (8000810 <MX_USART1_UART_Init+0x90>)
 800079a:	2200      	movs	r2, #0
 800079c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800079e:	4b1c      	ldr	r3, [pc, #112]	; (8000810 <MX_USART1_UART_Init+0x90>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80007a4:	4b1a      	ldr	r3, [pc, #104]	; (8000810 <MX_USART1_UART_Init+0x90>)
 80007a6:	220c      	movs	r2, #12
 80007a8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007aa:	4b19      	ldr	r3, [pc, #100]	; (8000810 <MX_USART1_UART_Init+0x90>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80007b0:	4b17      	ldr	r3, [pc, #92]	; (8000810 <MX_USART1_UART_Init+0x90>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007b6:	4b16      	ldr	r3, [pc, #88]	; (8000810 <MX_USART1_UART_Init+0x90>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80007bc:	4b14      	ldr	r3, [pc, #80]	; (8000810 <MX_USART1_UART_Init+0x90>)
 80007be:	2200      	movs	r2, #0
 80007c0:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007c2:	4b13      	ldr	r3, [pc, #76]	; (8000810 <MX_USART1_UART_Init+0x90>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80007c8:	4811      	ldr	r0, [pc, #68]	; (8000810 <MX_USART1_UART_Init+0x90>)
 80007ca:	f005 fb5f 	bl	8005e8c <HAL_UART_Init>
 80007ce:	4603      	mov	r3, r0
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	d001      	beq.n	80007d8 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80007d4:	f000 f8b8 	bl	8000948 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80007d8:	2100      	movs	r1, #0
 80007da:	480d      	ldr	r0, [pc, #52]	; (8000810 <MX_USART1_UART_Init+0x90>)
 80007dc:	f006 faac 	bl	8006d38 <HAL_UARTEx_SetTxFifoThreshold>
 80007e0:	4603      	mov	r3, r0
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d001      	beq.n	80007ea <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80007e6:	f000 f8af 	bl	8000948 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80007ea:	2100      	movs	r1, #0
 80007ec:	4808      	ldr	r0, [pc, #32]	; (8000810 <MX_USART1_UART_Init+0x90>)
 80007ee:	f006 fae1 	bl	8006db4 <HAL_UARTEx_SetRxFifoThreshold>
 80007f2:	4603      	mov	r3, r0
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	d001      	beq.n	80007fc <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80007f8:	f000 f8a6 	bl	8000948 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80007fc:	4804      	ldr	r0, [pc, #16]	; (8000810 <MX_USART1_UART_Init+0x90>)
 80007fe:	f006 fa62 	bl	8006cc6 <HAL_UARTEx_DisableFifoMode>
 8000802:	4603      	mov	r3, r0
 8000804:	2b00      	cmp	r3, #0
 8000806:	d001      	beq.n	800080c <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000808:	f000 f89e 	bl	8000948 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800080c:	bf00      	nop
 800080e:	bd80      	pop	{r7, pc}
 8000810:	240004b0 	.word	0x240004b0
 8000814:	40011000 	.word	0x40011000

08000818 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800081c:	4b15      	ldr	r3, [pc, #84]	; (8000874 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800081e:	4a16      	ldr	r2, [pc, #88]	; (8000878 <MX_USB_OTG_FS_PCD_Init+0x60>)
 8000820:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8000822:	4b14      	ldr	r3, [pc, #80]	; (8000874 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000824:	2209      	movs	r2, #9
 8000826:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000828:	4b12      	ldr	r3, [pc, #72]	; (8000874 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800082a:	2202      	movs	r2, #2
 800082c:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800082e:	4b11      	ldr	r3, [pc, #68]	; (8000874 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000830:	2200      	movs	r2, #0
 8000832:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000834:	4b0f      	ldr	r3, [pc, #60]	; (8000874 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000836:	2202      	movs	r2, #2
 8000838:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800083a:	4b0e      	ldr	r3, [pc, #56]	; (8000874 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800083c:	2200      	movs	r2, #0
 800083e:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000840:	4b0c      	ldr	r3, [pc, #48]	; (8000874 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000842:	2200      	movs	r2, #0
 8000844:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000846:	4b0b      	ldr	r3, [pc, #44]	; (8000874 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000848:	2200      	movs	r2, #0
 800084a:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 800084c:	4b09      	ldr	r3, [pc, #36]	; (8000874 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800084e:	2200      	movs	r2, #0
 8000850:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8000852:	4b08      	ldr	r3, [pc, #32]	; (8000874 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000854:	2200      	movs	r2, #0
 8000856:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000858:	4b06      	ldr	r3, [pc, #24]	; (8000874 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800085a:	2200      	movs	r2, #0
 800085c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800085e:	4805      	ldr	r0, [pc, #20]	; (8000874 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000860:	f000 ff60 	bl	8001724 <HAL_PCD_Init>
 8000864:	4603      	mov	r3, r0
 8000866:	2b00      	cmp	r3, #0
 8000868:	d001      	beq.n	800086e <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 800086a:	f000 f86d 	bl	8000948 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 800086e:	bf00      	nop
 8000870:	bd80      	pop	{r7, pc}
 8000872:	bf00      	nop
 8000874:	2400002c 	.word	0x2400002c
 8000878:	40080000 	.word	0x40080000

0800087c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800087c:	b480      	push	{r7}
 800087e:	b087      	sub	sp, #28
 8000880:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000882:	4b30      	ldr	r3, [pc, #192]	; (8000944 <MX_GPIO_Init+0xc8>)
 8000884:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000888:	4a2e      	ldr	r2, [pc, #184]	; (8000944 <MX_GPIO_Init+0xc8>)
 800088a:	f043 0310 	orr.w	r3, r3, #16
 800088e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000892:	4b2c      	ldr	r3, [pc, #176]	; (8000944 <MX_GPIO_Init+0xc8>)
 8000894:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000898:	f003 0310 	and.w	r3, r3, #16
 800089c:	617b      	str	r3, [r7, #20]
 800089e:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008a0:	4b28      	ldr	r3, [pc, #160]	; (8000944 <MX_GPIO_Init+0xc8>)
 80008a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008a6:	4a27      	ldr	r2, [pc, #156]	; (8000944 <MX_GPIO_Init+0xc8>)
 80008a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008ac:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80008b0:	4b24      	ldr	r3, [pc, #144]	; (8000944 <MX_GPIO_Init+0xc8>)
 80008b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008ba:	613b      	str	r3, [r7, #16]
 80008bc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008be:	4b21      	ldr	r3, [pc, #132]	; (8000944 <MX_GPIO_Init+0xc8>)
 80008c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008c4:	4a1f      	ldr	r2, [pc, #124]	; (8000944 <MX_GPIO_Init+0xc8>)
 80008c6:	f043 0304 	orr.w	r3, r3, #4
 80008ca:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80008ce:	4b1d      	ldr	r3, [pc, #116]	; (8000944 <MX_GPIO_Init+0xc8>)
 80008d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008d4:	f003 0304 	and.w	r3, r3, #4
 80008d8:	60fb      	str	r3, [r7, #12]
 80008da:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008dc:	4b19      	ldr	r3, [pc, #100]	; (8000944 <MX_GPIO_Init+0xc8>)
 80008de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008e2:	4a18      	ldr	r2, [pc, #96]	; (8000944 <MX_GPIO_Init+0xc8>)
 80008e4:	f043 0301 	orr.w	r3, r3, #1
 80008e8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80008ec:	4b15      	ldr	r3, [pc, #84]	; (8000944 <MX_GPIO_Init+0xc8>)
 80008ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008f2:	f003 0301 	and.w	r3, r3, #1
 80008f6:	60bb      	str	r3, [r7, #8]
 80008f8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008fa:	4b12      	ldr	r3, [pc, #72]	; (8000944 <MX_GPIO_Init+0xc8>)
 80008fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000900:	4a10      	ldr	r2, [pc, #64]	; (8000944 <MX_GPIO_Init+0xc8>)
 8000902:	f043 0302 	orr.w	r3, r3, #2
 8000906:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800090a:	4b0e      	ldr	r3, [pc, #56]	; (8000944 <MX_GPIO_Init+0xc8>)
 800090c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000910:	f003 0302 	and.w	r3, r3, #2
 8000914:	607b      	str	r3, [r7, #4]
 8000916:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000918:	4b0a      	ldr	r3, [pc, #40]	; (8000944 <MX_GPIO_Init+0xc8>)
 800091a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800091e:	4a09      	ldr	r2, [pc, #36]	; (8000944 <MX_GPIO_Init+0xc8>)
 8000920:	f043 0308 	orr.w	r3, r3, #8
 8000924:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000928:	4b06      	ldr	r3, [pc, #24]	; (8000944 <MX_GPIO_Init+0xc8>)
 800092a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800092e:	f003 0308 	and.w	r3, r3, #8
 8000932:	603b      	str	r3, [r7, #0]
 8000934:	683b      	ldr	r3, [r7, #0]

}
 8000936:	bf00      	nop
 8000938:	371c      	adds	r7, #28
 800093a:	46bd      	mov	sp, r7
 800093c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000940:	4770      	bx	lr
 8000942:	bf00      	nop
 8000944:	58024400 	.word	0x58024400

08000948 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000948:	b480      	push	{r7}
 800094a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800094c:	b672      	cpsid	i
}
 800094e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000950:	e7fe      	b.n	8000950 <Error_Handler+0x8>
	...

08000954 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000954:	b480      	push	{r7}
 8000956:	b083      	sub	sp, #12
 8000958:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800095a:	4b0a      	ldr	r3, [pc, #40]	; (8000984 <HAL_MspInit+0x30>)
 800095c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000960:	4a08      	ldr	r2, [pc, #32]	; (8000984 <HAL_MspInit+0x30>)
 8000962:	f043 0302 	orr.w	r3, r3, #2
 8000966:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800096a:	4b06      	ldr	r3, [pc, #24]	; (8000984 <HAL_MspInit+0x30>)
 800096c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000970:	f003 0302 	and.w	r3, r3, #2
 8000974:	607b      	str	r3, [r7, #4]
 8000976:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000978:	bf00      	nop
 800097a:	370c      	adds	r7, #12
 800097c:	46bd      	mov	sp, r7
 800097e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000982:	4770      	bx	lr
 8000984:	58024400 	.word	0x58024400

08000988 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	b0bc      	sub	sp, #240	; 0xf0
 800098c:	af00      	add	r7, sp, #0
 800098e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000990:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000994:	2200      	movs	r2, #0
 8000996:	601a      	str	r2, [r3, #0]
 8000998:	605a      	str	r2, [r3, #4]
 800099a:	609a      	str	r2, [r3, #8]
 800099c:	60da      	str	r2, [r3, #12]
 800099e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80009a0:	f107 0320 	add.w	r3, r7, #32
 80009a4:	22bc      	movs	r2, #188	; 0xbc
 80009a6:	2100      	movs	r1, #0
 80009a8:	4618      	mov	r0, r3
 80009aa:	f007 fa5f 	bl	8007e6c <memset>
  if(hqspi->Instance==QUADSPI)
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	681b      	ldr	r3, [r3, #0]
 80009b2:	4a79      	ldr	r2, [pc, #484]	; (8000b98 <HAL_QSPI_MspInit+0x210>)
 80009b4:	4293      	cmp	r3, r2
 80009b6:	f040 80eb 	bne.w	8000b90 <HAL_QSPI_MspInit+0x208>
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_QSPI;
 80009ba:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80009be:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.QspiClockSelection = RCC_QSPICLKSOURCE_D1HCLK;
 80009c0:	2300      	movs	r3, #0
 80009c2:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80009c4:	f107 0320 	add.w	r3, r7, #32
 80009c8:	4618      	mov	r0, r3
 80009ca:	f002 f893 	bl	8002af4 <HAL_RCCEx_PeriphCLKConfig>
 80009ce:	4603      	mov	r3, r0
 80009d0:	2b00      	cmp	r3, #0
 80009d2:	d001      	beq.n	80009d8 <HAL_QSPI_MspInit+0x50>
    {
      Error_Handler();
 80009d4:	f7ff ffb8 	bl	8000948 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 80009d8:	4b70      	ldr	r3, [pc, #448]	; (8000b9c <HAL_QSPI_MspInit+0x214>)
 80009da:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80009de:	4a6f      	ldr	r2, [pc, #444]	; (8000b9c <HAL_QSPI_MspInit+0x214>)
 80009e0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009e4:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 80009e8:	4b6c      	ldr	r3, [pc, #432]	; (8000b9c <HAL_QSPI_MspInit+0x214>)
 80009ea:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80009ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009f2:	61fb      	str	r3, [r7, #28]
 80009f4:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80009f6:	4b69      	ldr	r3, [pc, #420]	; (8000b9c <HAL_QSPI_MspInit+0x214>)
 80009f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009fc:	4a67      	ldr	r2, [pc, #412]	; (8000b9c <HAL_QSPI_MspInit+0x214>)
 80009fe:	f043 0310 	orr.w	r3, r3, #16
 8000a02:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a06:	4b65      	ldr	r3, [pc, #404]	; (8000b9c <HAL_QSPI_MspInit+0x214>)
 8000a08:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a0c:	f003 0310 	and.w	r3, r3, #16
 8000a10:	61bb      	str	r3, [r7, #24]
 8000a12:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a14:	4b61      	ldr	r3, [pc, #388]	; (8000b9c <HAL_QSPI_MspInit+0x214>)
 8000a16:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a1a:	4a60      	ldr	r2, [pc, #384]	; (8000b9c <HAL_QSPI_MspInit+0x214>)
 8000a1c:	f043 0301 	orr.w	r3, r3, #1
 8000a20:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a24:	4b5d      	ldr	r3, [pc, #372]	; (8000b9c <HAL_QSPI_MspInit+0x214>)
 8000a26:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a2a:	f003 0301 	and.w	r3, r3, #1
 8000a2e:	617b      	str	r3, [r7, #20]
 8000a30:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a32:	4b5a      	ldr	r3, [pc, #360]	; (8000b9c <HAL_QSPI_MspInit+0x214>)
 8000a34:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a38:	4a58      	ldr	r2, [pc, #352]	; (8000b9c <HAL_QSPI_MspInit+0x214>)
 8000a3a:	f043 0302 	orr.w	r3, r3, #2
 8000a3e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a42:	4b56      	ldr	r3, [pc, #344]	; (8000b9c <HAL_QSPI_MspInit+0x214>)
 8000a44:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a48:	f003 0302 	and.w	r3, r3, #2
 8000a4c:	613b      	str	r3, [r7, #16]
 8000a4e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a50:	4b52      	ldr	r3, [pc, #328]	; (8000b9c <HAL_QSPI_MspInit+0x214>)
 8000a52:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a56:	4a51      	ldr	r2, [pc, #324]	; (8000b9c <HAL_QSPI_MspInit+0x214>)
 8000a58:	f043 0308 	orr.w	r3, r3, #8
 8000a5c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a60:	4b4e      	ldr	r3, [pc, #312]	; (8000b9c <HAL_QSPI_MspInit+0x214>)
 8000a62:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a66:	f003 0308 	and.w	r3, r3, #8
 8000a6a:	60fb      	str	r3, [r7, #12]
 8000a6c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a6e:	4b4b      	ldr	r3, [pc, #300]	; (8000b9c <HAL_QSPI_MspInit+0x214>)
 8000a70:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a74:	4a49      	ldr	r2, [pc, #292]	; (8000b9c <HAL_QSPI_MspInit+0x214>)
 8000a76:	f043 0304 	orr.w	r3, r3, #4
 8000a7a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a7e:	4b47      	ldr	r3, [pc, #284]	; (8000b9c <HAL_QSPI_MspInit+0x214>)
 8000a80:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a84:	f003 0304 	and.w	r3, r3, #4
 8000a88:	60bb      	str	r3, [r7, #8]
 8000a8a:	68bb      	ldr	r3, [r7, #8]
    PB10     ------> QUADSPI_BK1_NCS
    PD11     ------> QUADSPI_BK1_IO0
    PD12     ------> QUADSPI_BK1_IO1
    PC11     ------> QUADSPI_BK2_NCS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000a8c:	2304      	movs	r3, #4
 8000a8e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a92:	2302      	movs	r3, #2
 8000a94:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a98:	2300      	movs	r3, #0
 8000a9a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8000aa4:	2309      	movs	r3, #9
 8000aa6:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000aaa:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000aae:	4619      	mov	r1, r3
 8000ab0:	483b      	ldr	r0, [pc, #236]	; (8000ba0 <HAL_QSPI_MspInit+0x218>)
 8000ab2:	f000 fc87 	bl	80013c4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000ab6:	2302      	movs	r3, #2
 8000ab8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000abc:	2302      	movs	r3, #2
 8000abe:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ac8:	2300      	movs	r3, #0
 8000aca:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8000ace:	2309      	movs	r3, #9
 8000ad0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ad4:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000ad8:	4619      	mov	r1, r3
 8000ada:	4832      	ldr	r0, [pc, #200]	; (8000ba4 <HAL_QSPI_MspInit+0x21c>)
 8000adc:	f000 fc72 	bl	80013c4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_10;
 8000ae0:	f240 4304 	movw	r3, #1028	; 0x404
 8000ae4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ae8:	2302      	movs	r3, #2
 8000aea:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aee:	2300      	movs	r3, #0
 8000af0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000af4:	2300      	movs	r3, #0
 8000af6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8000afa:	2309      	movs	r3, #9
 8000afc:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b00:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000b04:	4619      	mov	r1, r3
 8000b06:	4828      	ldr	r0, [pc, #160]	; (8000ba8 <HAL_QSPI_MspInit+0x220>)
 8000b08:	f000 fc5c 	bl	80013c4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8000b0c:	f44f 63f0 	mov.w	r3, #1920	; 0x780
 8000b10:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b14:	2302      	movs	r3, #2
 8000b16:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b20:	2300      	movs	r3, #0
 8000b22:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8000b26:	230a      	movs	r3, #10
 8000b28:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000b2c:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000b30:	4619      	mov	r1, r3
 8000b32:	481b      	ldr	r0, [pc, #108]	; (8000ba0 <HAL_QSPI_MspInit+0x218>)
 8000b34:	f000 fc46 	bl	80013c4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000b38:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000b3c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b40:	2302      	movs	r3, #2
 8000b42:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b46:	2300      	movs	r3, #0
 8000b48:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8000b52:	2309      	movs	r3, #9
 8000b54:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b58:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000b5c:	4619      	mov	r1, r3
 8000b5e:	4813      	ldr	r0, [pc, #76]	; (8000bac <HAL_QSPI_MspInit+0x224>)
 8000b60:	f000 fc30 	bl	80013c4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000b64:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000b68:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b6c:	2302      	movs	r3, #2
 8000b6e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b72:	2300      	movs	r3, #0
 8000b74:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b78:	2300      	movs	r3, #0
 8000b7a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8000b7e:	2309      	movs	r3, #9
 8000b80:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b84:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000b88:	4619      	mov	r1, r3
 8000b8a:	4809      	ldr	r0, [pc, #36]	; (8000bb0 <HAL_QSPI_MspInit+0x228>)
 8000b8c:	f000 fc1a 	bl	80013c4 <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 8000b90:	bf00      	nop
 8000b92:	37f0      	adds	r7, #240	; 0xf0
 8000b94:	46bd      	mov	sp, r7
 8000b96:	bd80      	pop	{r7, pc}
 8000b98:	52005000 	.word	0x52005000
 8000b9c:	58024400 	.word	0x58024400
 8000ba0:	58021000 	.word	0x58021000
 8000ba4:	58020000 	.word	0x58020000
 8000ba8:	58020400 	.word	0x58020400
 8000bac:	58020c00 	.word	0x58020c00
 8000bb0:	58020800 	.word	0x58020800

08000bb4 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b0ba      	sub	sp, #232	; 0xe8
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bbc:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	601a      	str	r2, [r3, #0]
 8000bc4:	605a      	str	r2, [r3, #4]
 8000bc6:	609a      	str	r2, [r3, #8]
 8000bc8:	60da      	str	r2, [r3, #12]
 8000bca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000bcc:	f107 0318 	add.w	r3, r7, #24
 8000bd0:	22bc      	movs	r2, #188	; 0xbc
 8000bd2:	2100      	movs	r1, #0
 8000bd4:	4618      	mov	r0, r3
 8000bd6:	f007 f949 	bl	8007e6c <memset>
  if(hsd->Instance==SDMMC2)
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	4a49      	ldr	r2, [pc, #292]	; (8000d04 <HAL_SD_MspInit+0x150>)
 8000be0:	4293      	cmp	r3, r2
 8000be2:	f040 808b 	bne.w	8000cfc <HAL_SD_MspInit+0x148>
  /* USER CODE BEGIN SDMMC2_MspInit 0 */

  /* USER CODE END SDMMC2_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC;
 8000be6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000bea:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL;
 8000bec:	2300      	movs	r3, #0
 8000bee:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000bf0:	f107 0318 	add.w	r3, r7, #24
 8000bf4:	4618      	mov	r0, r3
 8000bf6:	f001 ff7d 	bl	8002af4 <HAL_RCCEx_PeriphCLKConfig>
 8000bfa:	4603      	mov	r3, r0
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d001      	beq.n	8000c04 <HAL_SD_MspInit+0x50>
    {
      Error_Handler();
 8000c00:	f7ff fea2 	bl	8000948 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDMMC2_CLK_ENABLE();
 8000c04:	4b40      	ldr	r3, [pc, #256]	; (8000d08 <HAL_SD_MspInit+0x154>)
 8000c06:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8000c0a:	4a3f      	ldr	r2, [pc, #252]	; (8000d08 <HAL_SD_MspInit+0x154>)
 8000c0c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c10:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 8000c14:	4b3c      	ldr	r3, [pc, #240]	; (8000d08 <HAL_SD_MspInit+0x154>)
 8000c16:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8000c1a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000c1e:	617b      	str	r3, [r7, #20]
 8000c20:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c22:	4b39      	ldr	r3, [pc, #228]	; (8000d08 <HAL_SD_MspInit+0x154>)
 8000c24:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c28:	4a37      	ldr	r2, [pc, #220]	; (8000d08 <HAL_SD_MspInit+0x154>)
 8000c2a:	f043 0304 	orr.w	r3, r3, #4
 8000c2e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c32:	4b35      	ldr	r3, [pc, #212]	; (8000d08 <HAL_SD_MspInit+0x154>)
 8000c34:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c38:	f003 0304 	and.w	r3, r3, #4
 8000c3c:	613b      	str	r3, [r7, #16]
 8000c3e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c40:	4b31      	ldr	r3, [pc, #196]	; (8000d08 <HAL_SD_MspInit+0x154>)
 8000c42:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c46:	4a30      	ldr	r2, [pc, #192]	; (8000d08 <HAL_SD_MspInit+0x154>)
 8000c48:	f043 0301 	orr.w	r3, r3, #1
 8000c4c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c50:	4b2d      	ldr	r3, [pc, #180]	; (8000d08 <HAL_SD_MspInit+0x154>)
 8000c52:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c56:	f003 0301 	and.w	r3, r3, #1
 8000c5a:	60fb      	str	r3, [r7, #12]
 8000c5c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c5e:	4b2a      	ldr	r3, [pc, #168]	; (8000d08 <HAL_SD_MspInit+0x154>)
 8000c60:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c64:	4a28      	ldr	r2, [pc, #160]	; (8000d08 <HAL_SD_MspInit+0x154>)
 8000c66:	f043 0302 	orr.w	r3, r3, #2
 8000c6a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c6e:	4b26      	ldr	r3, [pc, #152]	; (8000d08 <HAL_SD_MspInit+0x154>)
 8000c70:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c74:	f003 0302 	and.w	r3, r3, #2
 8000c78:	60bb      	str	r3, [r7, #8]
 8000c7a:	68bb      	ldr	r3, [r7, #8]
    PB14     ------> SDMMC2_D0
    PB15     ------> SDMMC2_D1
    PB3 (JTDO/TRACESWO)     ------> SDMMC2_D2
    PB4 (NJTRST)     ------> SDMMC2_D3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000c7c:	2302      	movs	r3, #2
 8000c7e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c82:	2302      	movs	r3, #2
 8000c84:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c88:	2300      	movs	r3, #0
 8000c8a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c8e:	2303      	movs	r3, #3
 8000c90:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF9_SDIO2;
 8000c94:	2309      	movs	r3, #9
 8000c96:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c9a:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000c9e:	4619      	mov	r1, r3
 8000ca0:	481a      	ldr	r0, [pc, #104]	; (8000d0c <HAL_SD_MspInit+0x158>)
 8000ca2:	f000 fb8f 	bl	80013c4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000ca6:	2301      	movs	r3, #1
 8000ca8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cac:	2302      	movs	r3, #2
 8000cae:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cb8:	2303      	movs	r3, #3
 8000cba:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF9_SDIO2;
 8000cbe:	2309      	movs	r3, #9
 8000cc0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cc4:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000cc8:	4619      	mov	r1, r3
 8000cca:	4811      	ldr	r0, [pc, #68]	; (8000d10 <HAL_SD_MspInit+0x15c>)
 8000ccc:	f000 fb7a 	bl	80013c4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_3|GPIO_PIN_4;
 8000cd0:	f24c 0318 	movw	r3, #49176	; 0xc018
 8000cd4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cd8:	2302      	movs	r3, #2
 8000cda:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cde:	2300      	movs	r3, #0
 8000ce0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ce4:	2303      	movs	r3, #3
 8000ce6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF9_SDIO2;
 8000cea:	2309      	movs	r3, #9
 8000cec:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cf0:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000cf4:	4619      	mov	r1, r3
 8000cf6:	4807      	ldr	r0, [pc, #28]	; (8000d14 <HAL_SD_MspInit+0x160>)
 8000cf8:	f000 fb64 	bl	80013c4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SDMMC2_MspInit 1 */

  /* USER CODE END SDMMC2_MspInit 1 */
  }

}
 8000cfc:	bf00      	nop
 8000cfe:	37e8      	adds	r7, #232	; 0xe8
 8000d00:	46bd      	mov	sp, r7
 8000d02:	bd80      	pop	{r7, pc}
 8000d04:	48022400 	.word	0x48022400
 8000d08:	58024400 	.word	0x58024400
 8000d0c:	58020800 	.word	0x58020800
 8000d10:	58020000 	.word	0x58020000
 8000d14:	58020400 	.word	0x58020400

08000d18 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b0b8      	sub	sp, #224	; 0xe0
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d20:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000d24:	2200      	movs	r2, #0
 8000d26:	601a      	str	r2, [r3, #0]
 8000d28:	605a      	str	r2, [r3, #4]
 8000d2a:	609a      	str	r2, [r3, #8]
 8000d2c:	60da      	str	r2, [r3, #12]
 8000d2e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d30:	f107 0310 	add.w	r3, r7, #16
 8000d34:	22bc      	movs	r2, #188	; 0xbc
 8000d36:	2100      	movs	r1, #0
 8000d38:	4618      	mov	r0, r3
 8000d3a:	f007 f897 	bl	8007e6c <memset>
  if(huart->Instance==USART1)
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	4a25      	ldr	r2, [pc, #148]	; (8000dd8 <HAL_UART_MspInit+0xc0>)
 8000d44:	4293      	cmp	r3, r2
 8000d46:	d142      	bne.n	8000dce <HAL_UART_MspInit+0xb6>
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000d48:	2301      	movs	r3, #1
 8000d4a:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d52:	f107 0310 	add.w	r3, r7, #16
 8000d56:	4618      	mov	r0, r3
 8000d58:	f001 fecc 	bl	8002af4 <HAL_RCCEx_PeriphCLKConfig>
 8000d5c:	4603      	mov	r3, r0
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d001      	beq.n	8000d66 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000d62:	f7ff fdf1 	bl	8000948 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000d66:	4b1d      	ldr	r3, [pc, #116]	; (8000ddc <HAL_UART_MspInit+0xc4>)
 8000d68:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000d6c:	4a1b      	ldr	r2, [pc, #108]	; (8000ddc <HAL_UART_MspInit+0xc4>)
 8000d6e:	f043 0310 	orr.w	r3, r3, #16
 8000d72:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8000d76:	4b19      	ldr	r3, [pc, #100]	; (8000ddc <HAL_UART_MspInit+0xc4>)
 8000d78:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000d7c:	f003 0310 	and.w	r3, r3, #16
 8000d80:	60fb      	str	r3, [r7, #12]
 8000d82:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d84:	4b15      	ldr	r3, [pc, #84]	; (8000ddc <HAL_UART_MspInit+0xc4>)
 8000d86:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d8a:	4a14      	ldr	r2, [pc, #80]	; (8000ddc <HAL_UART_MspInit+0xc4>)
 8000d8c:	f043 0301 	orr.w	r3, r3, #1
 8000d90:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d94:	4b11      	ldr	r3, [pc, #68]	; (8000ddc <HAL_UART_MspInit+0xc4>)
 8000d96:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d9a:	f003 0301 	and.w	r3, r3, #1
 8000d9e:	60bb      	str	r3, [r7, #8]
 8000da0:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000da2:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000da6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000daa:	2302      	movs	r3, #2
 8000dac:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000db0:	2300      	movs	r3, #0
 8000db2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000db6:	2300      	movs	r3, #0
 8000db8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000dbc:	2307      	movs	r3, #7
 8000dbe:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dc2:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000dc6:	4619      	mov	r1, r3
 8000dc8:	4805      	ldr	r0, [pc, #20]	; (8000de0 <HAL_UART_MspInit+0xc8>)
 8000dca:	f000 fafb 	bl	80013c4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000dce:	bf00      	nop
 8000dd0:	37e0      	adds	r7, #224	; 0xe0
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	bd80      	pop	{r7, pc}
 8000dd6:	bf00      	nop
 8000dd8:	40011000 	.word	0x40011000
 8000ddc:	58024400 	.word	0x58024400
 8000de0:	58020000 	.word	0x58020000

08000de4 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b0b8      	sub	sp, #224	; 0xe0
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dec:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000df0:	2200      	movs	r2, #0
 8000df2:	601a      	str	r2, [r3, #0]
 8000df4:	605a      	str	r2, [r3, #4]
 8000df6:	609a      	str	r2, [r3, #8]
 8000df8:	60da      	str	r2, [r3, #12]
 8000dfa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000dfc:	f107 0310 	add.w	r3, r7, #16
 8000e00:	22bc      	movs	r2, #188	; 0xbc
 8000e02:	2100      	movs	r1, #0
 8000e04:	4618      	mov	r0, r3
 8000e06:	f007 f831 	bl	8007e6c <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	4a27      	ldr	r2, [pc, #156]	; (8000eac <HAL_PCD_MspInit+0xc8>)
 8000e10:	4293      	cmp	r3, r2
 8000e12:	d146      	bne.n	8000ea2 <HAL_PCD_MspInit+0xbe>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000e14:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8000e18:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8000e1a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000e1e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e22:	f107 0310 	add.w	r3, r7, #16
 8000e26:	4618      	mov	r0, r3
 8000e28:	f001 fe64 	bl	8002af4 <HAL_RCCEx_PeriphCLKConfig>
 8000e2c:	4603      	mov	r3, r0
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d001      	beq.n	8000e36 <HAL_PCD_MspInit+0x52>
    {
      Error_Handler();
 8000e32:	f7ff fd89 	bl	8000948 <Error_Handler>
    }
  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8000e36:	f000 fdf7 	bl	8001a28 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e3a:	4b1d      	ldr	r3, [pc, #116]	; (8000eb0 <HAL_PCD_MspInit+0xcc>)
 8000e3c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e40:	4a1b      	ldr	r2, [pc, #108]	; (8000eb0 <HAL_PCD_MspInit+0xcc>)
 8000e42:	f043 0301 	orr.w	r3, r3, #1
 8000e46:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e4a:	4b19      	ldr	r3, [pc, #100]	; (8000eb0 <HAL_PCD_MspInit+0xcc>)
 8000e4c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e50:	f003 0301 	and.w	r3, r3, #1
 8000e54:	60fb      	str	r3, [r7, #12]
 8000e56:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000e58:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000e5c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e60:	2302      	movs	r3, #2
 8000e62:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e66:	2300      	movs	r3, #0
 8000e68:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8000e72:	230a      	movs	r3, #10
 8000e74:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e78:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000e7c:	4619      	mov	r1, r3
 8000e7e:	480d      	ldr	r0, [pc, #52]	; (8000eb4 <HAL_PCD_MspInit+0xd0>)
 8000e80:	f000 faa0 	bl	80013c4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000e84:	4b0a      	ldr	r3, [pc, #40]	; (8000eb0 <HAL_PCD_MspInit+0xcc>)
 8000e86:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000e8a:	4a09      	ldr	r2, [pc, #36]	; (8000eb0 <HAL_PCD_MspInit+0xcc>)
 8000e8c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000e90:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000e94:	4b06      	ldr	r3, [pc, #24]	; (8000eb0 <HAL_PCD_MspInit+0xcc>)
 8000e96:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000e9a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000e9e:	60bb      	str	r3, [r7, #8]
 8000ea0:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8000ea2:	bf00      	nop
 8000ea4:	37e0      	adds	r7, #224	; 0xe0
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	bd80      	pop	{r7, pc}
 8000eaa:	bf00      	nop
 8000eac:	40080000 	.word	0x40080000
 8000eb0:	58024400 	.word	0x58024400
 8000eb4:	58020000 	.word	0x58020000

08000eb8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000eb8:	b480      	push	{r7}
 8000eba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ebc:	e7fe      	b.n	8000ebc <NMI_Handler+0x4>

08000ebe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ebe:	b480      	push	{r7}
 8000ec0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ec2:	e7fe      	b.n	8000ec2 <HardFault_Handler+0x4>

08000ec4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ec4:	b480      	push	{r7}
 8000ec6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ec8:	e7fe      	b.n	8000ec8 <MemManage_Handler+0x4>

08000eca <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000eca:	b480      	push	{r7}
 8000ecc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ece:	e7fe      	b.n	8000ece <BusFault_Handler+0x4>

08000ed0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ed0:	b480      	push	{r7}
 8000ed2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ed4:	e7fe      	b.n	8000ed4 <UsageFault_Handler+0x4>

08000ed6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ed6:	b480      	push	{r7}
 8000ed8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000eda:	bf00      	nop
 8000edc:	46bd      	mov	sp, r7
 8000ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee2:	4770      	bx	lr

08000ee4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ee8:	bf00      	nop
 8000eea:	46bd      	mov	sp, r7
 8000eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef0:	4770      	bx	lr

08000ef2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ef2:	b480      	push	{r7}
 8000ef4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ef6:	bf00      	nop
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efe:	4770      	bx	lr

08000f00 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f04:	f000 f92a 	bl	800115c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f08:	bf00      	nop
 8000f0a:	bd80      	pop	{r7, pc}

08000f0c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000f10:	4b39      	ldr	r3, [pc, #228]	; (8000ff8 <SystemInit+0xec>)
 8000f12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f16:	4a38      	ldr	r2, [pc, #224]	; (8000ff8 <SystemInit+0xec>)
 8000f18:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f1c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000f20:	4b36      	ldr	r3, [pc, #216]	; (8000ffc <SystemInit+0xf0>)
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	f003 030f 	and.w	r3, r3, #15
 8000f28:	2b06      	cmp	r3, #6
 8000f2a:	d807      	bhi.n	8000f3c <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000f2c:	4b33      	ldr	r3, [pc, #204]	; (8000ffc <SystemInit+0xf0>)
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	f023 030f 	bic.w	r3, r3, #15
 8000f34:	4a31      	ldr	r2, [pc, #196]	; (8000ffc <SystemInit+0xf0>)
 8000f36:	f043 0307 	orr.w	r3, r3, #7
 8000f3a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000f3c:	4b30      	ldr	r3, [pc, #192]	; (8001000 <SystemInit+0xf4>)
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	4a2f      	ldr	r2, [pc, #188]	; (8001000 <SystemInit+0xf4>)
 8000f42:	f043 0301 	orr.w	r3, r3, #1
 8000f46:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000f48:	4b2d      	ldr	r3, [pc, #180]	; (8001000 <SystemInit+0xf4>)
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000f4e:	4b2c      	ldr	r3, [pc, #176]	; (8001000 <SystemInit+0xf4>)
 8000f50:	681a      	ldr	r2, [r3, #0]
 8000f52:	492b      	ldr	r1, [pc, #172]	; (8001000 <SystemInit+0xf4>)
 8000f54:	4b2b      	ldr	r3, [pc, #172]	; (8001004 <SystemInit+0xf8>)
 8000f56:	4013      	ands	r3, r2
 8000f58:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000f5a:	4b28      	ldr	r3, [pc, #160]	; (8000ffc <SystemInit+0xf0>)
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	f003 0308 	and.w	r3, r3, #8
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d007      	beq.n	8000f76 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000f66:	4b25      	ldr	r3, [pc, #148]	; (8000ffc <SystemInit+0xf0>)
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	f023 030f 	bic.w	r3, r3, #15
 8000f6e:	4a23      	ldr	r2, [pc, #140]	; (8000ffc <SystemInit+0xf0>)
 8000f70:	f043 0307 	orr.w	r3, r3, #7
 8000f74:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000f76:	4b22      	ldr	r3, [pc, #136]	; (8001000 <SystemInit+0xf4>)
 8000f78:	2200      	movs	r2, #0
 8000f7a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000f7c:	4b20      	ldr	r3, [pc, #128]	; (8001000 <SystemInit+0xf4>)
 8000f7e:	2200      	movs	r2, #0
 8000f80:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000f82:	4b1f      	ldr	r3, [pc, #124]	; (8001000 <SystemInit+0xf4>)
 8000f84:	2200      	movs	r2, #0
 8000f86:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000f88:	4b1d      	ldr	r3, [pc, #116]	; (8001000 <SystemInit+0xf4>)
 8000f8a:	4a1f      	ldr	r2, [pc, #124]	; (8001008 <SystemInit+0xfc>)
 8000f8c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000f8e:	4b1c      	ldr	r3, [pc, #112]	; (8001000 <SystemInit+0xf4>)
 8000f90:	4a1e      	ldr	r2, [pc, #120]	; (800100c <SystemInit+0x100>)
 8000f92:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000f94:	4b1a      	ldr	r3, [pc, #104]	; (8001000 <SystemInit+0xf4>)
 8000f96:	4a1e      	ldr	r2, [pc, #120]	; (8001010 <SystemInit+0x104>)
 8000f98:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000f9a:	4b19      	ldr	r3, [pc, #100]	; (8001000 <SystemInit+0xf4>)
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000fa0:	4b17      	ldr	r3, [pc, #92]	; (8001000 <SystemInit+0xf4>)
 8000fa2:	4a1b      	ldr	r2, [pc, #108]	; (8001010 <SystemInit+0x104>)
 8000fa4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000fa6:	4b16      	ldr	r3, [pc, #88]	; (8001000 <SystemInit+0xf4>)
 8000fa8:	2200      	movs	r2, #0
 8000faa:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000fac:	4b14      	ldr	r3, [pc, #80]	; (8001000 <SystemInit+0xf4>)
 8000fae:	4a18      	ldr	r2, [pc, #96]	; (8001010 <SystemInit+0x104>)
 8000fb0:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000fb2:	4b13      	ldr	r3, [pc, #76]	; (8001000 <SystemInit+0xf4>)
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000fb8:	4b11      	ldr	r3, [pc, #68]	; (8001000 <SystemInit+0xf4>)
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	4a10      	ldr	r2, [pc, #64]	; (8001000 <SystemInit+0xf4>)
 8000fbe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000fc2:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000fc4:	4b0e      	ldr	r3, [pc, #56]	; (8001000 <SystemInit+0xf4>)
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000fca:	4b12      	ldr	r3, [pc, #72]	; (8001014 <SystemInit+0x108>)
 8000fcc:	681a      	ldr	r2, [r3, #0]
 8000fce:	4b12      	ldr	r3, [pc, #72]	; (8001018 <SystemInit+0x10c>)
 8000fd0:	4013      	ands	r3, r2
 8000fd2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000fd6:	d202      	bcs.n	8000fde <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000fd8:	4b10      	ldr	r3, [pc, #64]	; (800101c <SystemInit+0x110>)
 8000fda:	2201      	movs	r2, #1
 8000fdc:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000fde:	4b10      	ldr	r3, [pc, #64]	; (8001020 <SystemInit+0x114>)
 8000fe0:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000fe4:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000fe6:	4b04      	ldr	r3, [pc, #16]	; (8000ff8 <SystemInit+0xec>)
 8000fe8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000fec:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 8000fee:	bf00      	nop
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff6:	4770      	bx	lr
 8000ff8:	e000ed00 	.word	0xe000ed00
 8000ffc:	52002000 	.word	0x52002000
 8001000:	58024400 	.word	0x58024400
 8001004:	eaf6ed7f 	.word	0xeaf6ed7f
 8001008:	02020200 	.word	0x02020200
 800100c:	01ff0000 	.word	0x01ff0000
 8001010:	01010280 	.word	0x01010280
 8001014:	5c001000 	.word	0x5c001000
 8001018:	ffff0000 	.word	0xffff0000
 800101c:	51008108 	.word	0x51008108
 8001020:	52004000 	.word	0x52004000

08001024 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001024:	f8df d034 	ldr.w	sp, [pc, #52]	; 800105c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001028:	f7ff ff70 	bl	8000f0c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800102c:	480c      	ldr	r0, [pc, #48]	; (8001060 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800102e:	490d      	ldr	r1, [pc, #52]	; (8001064 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001030:	4a0d      	ldr	r2, [pc, #52]	; (8001068 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001032:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001034:	e002      	b.n	800103c <LoopCopyDataInit>

08001036 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001036:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001038:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800103a:	3304      	adds	r3, #4

0800103c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800103c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800103e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001040:	d3f9      	bcc.n	8001036 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001042:	4a0a      	ldr	r2, [pc, #40]	; (800106c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001044:	4c0a      	ldr	r4, [pc, #40]	; (8001070 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001046:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001048:	e001      	b.n	800104e <LoopFillZerobss>

0800104a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800104a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800104c:	3204      	adds	r2, #4

0800104e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800104e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001050:	d3fb      	bcc.n	800104a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001052:	f006 fee7 	bl	8007e24 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001056:	f7ff fabb 	bl	80005d0 <main>
  bx  lr
 800105a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800105c:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001060:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001064:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 8001068:	08007edc 	.word	0x08007edc
  ldr r2, =_sbss
 800106c:	24000010 	.word	0x24000010
  ldr r4, =_ebss
 8001070:	24000590 	.word	0x24000590

08001074 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001074:	e7fe      	b.n	8001074 <ADC3_IRQHandler>
	...

08001078 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b082      	sub	sp, #8
 800107c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800107e:	2003      	movs	r0, #3
 8001080:	f000 f96e 	bl	8001360 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001084:	f001 fb60 	bl	8002748 <HAL_RCC_GetSysClockFreq>
 8001088:	4602      	mov	r2, r0
 800108a:	4b15      	ldr	r3, [pc, #84]	; (80010e0 <HAL_Init+0x68>)
 800108c:	699b      	ldr	r3, [r3, #24]
 800108e:	0a1b      	lsrs	r3, r3, #8
 8001090:	f003 030f 	and.w	r3, r3, #15
 8001094:	4913      	ldr	r1, [pc, #76]	; (80010e4 <HAL_Init+0x6c>)
 8001096:	5ccb      	ldrb	r3, [r1, r3]
 8001098:	f003 031f 	and.w	r3, r3, #31
 800109c:	fa22 f303 	lsr.w	r3, r2, r3
 80010a0:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80010a2:	4b0f      	ldr	r3, [pc, #60]	; (80010e0 <HAL_Init+0x68>)
 80010a4:	699b      	ldr	r3, [r3, #24]
 80010a6:	f003 030f 	and.w	r3, r3, #15
 80010aa:	4a0e      	ldr	r2, [pc, #56]	; (80010e4 <HAL_Init+0x6c>)
 80010ac:	5cd3      	ldrb	r3, [r2, r3]
 80010ae:	f003 031f 	and.w	r3, r3, #31
 80010b2:	687a      	ldr	r2, [r7, #4]
 80010b4:	fa22 f303 	lsr.w	r3, r2, r3
 80010b8:	4a0b      	ldr	r2, [pc, #44]	; (80010e8 <HAL_Init+0x70>)
 80010ba:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80010bc:	4a0b      	ldr	r2, [pc, #44]	; (80010ec <HAL_Init+0x74>)
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80010c2:	200f      	movs	r0, #15
 80010c4:	f000 f814 	bl	80010f0 <HAL_InitTick>
 80010c8:	4603      	mov	r3, r0
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d001      	beq.n	80010d2 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80010ce:	2301      	movs	r3, #1
 80010d0:	e002      	b.n	80010d8 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80010d2:	f7ff fc3f 	bl	8000954 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80010d6:	2300      	movs	r3, #0
}
 80010d8:	4618      	mov	r0, r3
 80010da:	3708      	adds	r7, #8
 80010dc:	46bd      	mov	sp, r7
 80010de:	bd80      	pop	{r7, pc}
 80010e0:	58024400 	.word	0x58024400
 80010e4:	08007e94 	.word	0x08007e94
 80010e8:	24000004 	.word	0x24000004
 80010ec:	24000000 	.word	0x24000000

080010f0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b082      	sub	sp, #8
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80010f8:	4b15      	ldr	r3, [pc, #84]	; (8001150 <HAL_InitTick+0x60>)
 80010fa:	781b      	ldrb	r3, [r3, #0]
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d101      	bne.n	8001104 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001100:	2301      	movs	r3, #1
 8001102:	e021      	b.n	8001148 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001104:	4b13      	ldr	r3, [pc, #76]	; (8001154 <HAL_InitTick+0x64>)
 8001106:	681a      	ldr	r2, [r3, #0]
 8001108:	4b11      	ldr	r3, [pc, #68]	; (8001150 <HAL_InitTick+0x60>)
 800110a:	781b      	ldrb	r3, [r3, #0]
 800110c:	4619      	mov	r1, r3
 800110e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001112:	fbb3 f3f1 	udiv	r3, r3, r1
 8001116:	fbb2 f3f3 	udiv	r3, r2, r3
 800111a:	4618      	mov	r0, r3
 800111c:	f000 f945 	bl	80013aa <HAL_SYSTICK_Config>
 8001120:	4603      	mov	r3, r0
 8001122:	2b00      	cmp	r3, #0
 8001124:	d001      	beq.n	800112a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001126:	2301      	movs	r3, #1
 8001128:	e00e      	b.n	8001148 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	2b0f      	cmp	r3, #15
 800112e:	d80a      	bhi.n	8001146 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001130:	2200      	movs	r2, #0
 8001132:	6879      	ldr	r1, [r7, #4]
 8001134:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001138:	f000 f91d 	bl	8001376 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800113c:	4a06      	ldr	r2, [pc, #24]	; (8001158 <HAL_InitTick+0x68>)
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001142:	2300      	movs	r3, #0
 8001144:	e000      	b.n	8001148 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001146:	2301      	movs	r3, #1
}
 8001148:	4618      	mov	r0, r3
 800114a:	3708      	adds	r7, #8
 800114c:	46bd      	mov	sp, r7
 800114e:	bd80      	pop	{r7, pc}
 8001150:	2400000c 	.word	0x2400000c
 8001154:	24000000 	.word	0x24000000
 8001158:	24000008 	.word	0x24000008

0800115c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800115c:	b480      	push	{r7}
 800115e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001160:	4b06      	ldr	r3, [pc, #24]	; (800117c <HAL_IncTick+0x20>)
 8001162:	781b      	ldrb	r3, [r3, #0]
 8001164:	461a      	mov	r2, r3
 8001166:	4b06      	ldr	r3, [pc, #24]	; (8001180 <HAL_IncTick+0x24>)
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	4413      	add	r3, r2
 800116c:	4a04      	ldr	r2, [pc, #16]	; (8001180 <HAL_IncTick+0x24>)
 800116e:	6013      	str	r3, [r2, #0]
}
 8001170:	bf00      	nop
 8001172:	46bd      	mov	sp, r7
 8001174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001178:	4770      	bx	lr
 800117a:	bf00      	nop
 800117c:	2400000c 	.word	0x2400000c
 8001180:	2400058c 	.word	0x2400058c

08001184 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001184:	b480      	push	{r7}
 8001186:	af00      	add	r7, sp, #0
  return uwTick;
 8001188:	4b03      	ldr	r3, [pc, #12]	; (8001198 <HAL_GetTick+0x14>)
 800118a:	681b      	ldr	r3, [r3, #0]
}
 800118c:	4618      	mov	r0, r3
 800118e:	46bd      	mov	sp, r7
 8001190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001194:	4770      	bx	lr
 8001196:	bf00      	nop
 8001198:	2400058c 	.word	0x2400058c

0800119c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b084      	sub	sp, #16
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80011a4:	f7ff ffee 	bl	8001184 <HAL_GetTick>
 80011a8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80011ae:	68fb      	ldr	r3, [r7, #12]
 80011b0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80011b4:	d005      	beq.n	80011c2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80011b6:	4b0a      	ldr	r3, [pc, #40]	; (80011e0 <HAL_Delay+0x44>)
 80011b8:	781b      	ldrb	r3, [r3, #0]
 80011ba:	461a      	mov	r2, r3
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	4413      	add	r3, r2
 80011c0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80011c2:	bf00      	nop
 80011c4:	f7ff ffde 	bl	8001184 <HAL_GetTick>
 80011c8:	4602      	mov	r2, r0
 80011ca:	68bb      	ldr	r3, [r7, #8]
 80011cc:	1ad3      	subs	r3, r2, r3
 80011ce:	68fa      	ldr	r2, [r7, #12]
 80011d0:	429a      	cmp	r2, r3
 80011d2:	d8f7      	bhi.n	80011c4 <HAL_Delay+0x28>
  {
  }
}
 80011d4:	bf00      	nop
 80011d6:	bf00      	nop
 80011d8:	3710      	adds	r7, #16
 80011da:	46bd      	mov	sp, r7
 80011dc:	bd80      	pop	{r7, pc}
 80011de:	bf00      	nop
 80011e0:	2400000c 	.word	0x2400000c

080011e4 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80011e4:	b480      	push	{r7}
 80011e6:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80011e8:	4b03      	ldr	r3, [pc, #12]	; (80011f8 <HAL_GetREVID+0x14>)
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	0c1b      	lsrs	r3, r3, #16
}
 80011ee:	4618      	mov	r0, r3
 80011f0:	46bd      	mov	sp, r7
 80011f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f6:	4770      	bx	lr
 80011f8:	5c001000 	.word	0x5c001000

080011fc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011fc:	b480      	push	{r7}
 80011fe:	b085      	sub	sp, #20
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	f003 0307 	and.w	r3, r3, #7
 800120a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800120c:	4b0b      	ldr	r3, [pc, #44]	; (800123c <__NVIC_SetPriorityGrouping+0x40>)
 800120e:	68db      	ldr	r3, [r3, #12]
 8001210:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001212:	68ba      	ldr	r2, [r7, #8]
 8001214:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001218:	4013      	ands	r3, r2
 800121a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800121c:	68fb      	ldr	r3, [r7, #12]
 800121e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001220:	68bb      	ldr	r3, [r7, #8]
 8001222:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001224:	4b06      	ldr	r3, [pc, #24]	; (8001240 <__NVIC_SetPriorityGrouping+0x44>)
 8001226:	4313      	orrs	r3, r2
 8001228:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800122a:	4a04      	ldr	r2, [pc, #16]	; (800123c <__NVIC_SetPriorityGrouping+0x40>)
 800122c:	68bb      	ldr	r3, [r7, #8]
 800122e:	60d3      	str	r3, [r2, #12]
}
 8001230:	bf00      	nop
 8001232:	3714      	adds	r7, #20
 8001234:	46bd      	mov	sp, r7
 8001236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123a:	4770      	bx	lr
 800123c:	e000ed00 	.word	0xe000ed00
 8001240:	05fa0000 	.word	0x05fa0000

08001244 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001244:	b480      	push	{r7}
 8001246:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001248:	4b04      	ldr	r3, [pc, #16]	; (800125c <__NVIC_GetPriorityGrouping+0x18>)
 800124a:	68db      	ldr	r3, [r3, #12]
 800124c:	0a1b      	lsrs	r3, r3, #8
 800124e:	f003 0307 	and.w	r3, r3, #7
}
 8001252:	4618      	mov	r0, r3
 8001254:	46bd      	mov	sp, r7
 8001256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125a:	4770      	bx	lr
 800125c:	e000ed00 	.word	0xe000ed00

08001260 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001260:	b480      	push	{r7}
 8001262:	b083      	sub	sp, #12
 8001264:	af00      	add	r7, sp, #0
 8001266:	4603      	mov	r3, r0
 8001268:	6039      	str	r1, [r7, #0]
 800126a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800126c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001270:	2b00      	cmp	r3, #0
 8001272:	db0a      	blt.n	800128a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001274:	683b      	ldr	r3, [r7, #0]
 8001276:	b2da      	uxtb	r2, r3
 8001278:	490c      	ldr	r1, [pc, #48]	; (80012ac <__NVIC_SetPriority+0x4c>)
 800127a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800127e:	0112      	lsls	r2, r2, #4
 8001280:	b2d2      	uxtb	r2, r2
 8001282:	440b      	add	r3, r1
 8001284:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001288:	e00a      	b.n	80012a0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800128a:	683b      	ldr	r3, [r7, #0]
 800128c:	b2da      	uxtb	r2, r3
 800128e:	4908      	ldr	r1, [pc, #32]	; (80012b0 <__NVIC_SetPriority+0x50>)
 8001290:	88fb      	ldrh	r3, [r7, #6]
 8001292:	f003 030f 	and.w	r3, r3, #15
 8001296:	3b04      	subs	r3, #4
 8001298:	0112      	lsls	r2, r2, #4
 800129a:	b2d2      	uxtb	r2, r2
 800129c:	440b      	add	r3, r1
 800129e:	761a      	strb	r2, [r3, #24]
}
 80012a0:	bf00      	nop
 80012a2:	370c      	adds	r7, #12
 80012a4:	46bd      	mov	sp, r7
 80012a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012aa:	4770      	bx	lr
 80012ac:	e000e100 	.word	0xe000e100
 80012b0:	e000ed00 	.word	0xe000ed00

080012b4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012b4:	b480      	push	{r7}
 80012b6:	b089      	sub	sp, #36	; 0x24
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	60f8      	str	r0, [r7, #12]
 80012bc:	60b9      	str	r1, [r7, #8]
 80012be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	f003 0307 	and.w	r3, r3, #7
 80012c6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80012c8:	69fb      	ldr	r3, [r7, #28]
 80012ca:	f1c3 0307 	rsb	r3, r3, #7
 80012ce:	2b04      	cmp	r3, #4
 80012d0:	bf28      	it	cs
 80012d2:	2304      	movcs	r3, #4
 80012d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012d6:	69fb      	ldr	r3, [r7, #28]
 80012d8:	3304      	adds	r3, #4
 80012da:	2b06      	cmp	r3, #6
 80012dc:	d902      	bls.n	80012e4 <NVIC_EncodePriority+0x30>
 80012de:	69fb      	ldr	r3, [r7, #28]
 80012e0:	3b03      	subs	r3, #3
 80012e2:	e000      	b.n	80012e6 <NVIC_EncodePriority+0x32>
 80012e4:	2300      	movs	r3, #0
 80012e6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012e8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80012ec:	69bb      	ldr	r3, [r7, #24]
 80012ee:	fa02 f303 	lsl.w	r3, r2, r3
 80012f2:	43da      	mvns	r2, r3
 80012f4:	68bb      	ldr	r3, [r7, #8]
 80012f6:	401a      	ands	r2, r3
 80012f8:	697b      	ldr	r3, [r7, #20]
 80012fa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012fc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001300:	697b      	ldr	r3, [r7, #20]
 8001302:	fa01 f303 	lsl.w	r3, r1, r3
 8001306:	43d9      	mvns	r1, r3
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800130c:	4313      	orrs	r3, r2
         );
}
 800130e:	4618      	mov	r0, r3
 8001310:	3724      	adds	r7, #36	; 0x24
 8001312:	46bd      	mov	sp, r7
 8001314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001318:	4770      	bx	lr
	...

0800131c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b082      	sub	sp, #8
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	3b01      	subs	r3, #1
 8001328:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800132c:	d301      	bcc.n	8001332 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800132e:	2301      	movs	r3, #1
 8001330:	e00f      	b.n	8001352 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001332:	4a0a      	ldr	r2, [pc, #40]	; (800135c <SysTick_Config+0x40>)
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	3b01      	subs	r3, #1
 8001338:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800133a:	210f      	movs	r1, #15
 800133c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001340:	f7ff ff8e 	bl	8001260 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001344:	4b05      	ldr	r3, [pc, #20]	; (800135c <SysTick_Config+0x40>)
 8001346:	2200      	movs	r2, #0
 8001348:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800134a:	4b04      	ldr	r3, [pc, #16]	; (800135c <SysTick_Config+0x40>)
 800134c:	2207      	movs	r2, #7
 800134e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001350:	2300      	movs	r3, #0
}
 8001352:	4618      	mov	r0, r3
 8001354:	3708      	adds	r7, #8
 8001356:	46bd      	mov	sp, r7
 8001358:	bd80      	pop	{r7, pc}
 800135a:	bf00      	nop
 800135c:	e000e010 	.word	0xe000e010

08001360 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	b082      	sub	sp, #8
 8001364:	af00      	add	r7, sp, #0
 8001366:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001368:	6878      	ldr	r0, [r7, #4]
 800136a:	f7ff ff47 	bl	80011fc <__NVIC_SetPriorityGrouping>
}
 800136e:	bf00      	nop
 8001370:	3708      	adds	r7, #8
 8001372:	46bd      	mov	sp, r7
 8001374:	bd80      	pop	{r7, pc}

08001376 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001376:	b580      	push	{r7, lr}
 8001378:	b086      	sub	sp, #24
 800137a:	af00      	add	r7, sp, #0
 800137c:	4603      	mov	r3, r0
 800137e:	60b9      	str	r1, [r7, #8]
 8001380:	607a      	str	r2, [r7, #4]
 8001382:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001384:	f7ff ff5e 	bl	8001244 <__NVIC_GetPriorityGrouping>
 8001388:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800138a:	687a      	ldr	r2, [r7, #4]
 800138c:	68b9      	ldr	r1, [r7, #8]
 800138e:	6978      	ldr	r0, [r7, #20]
 8001390:	f7ff ff90 	bl	80012b4 <NVIC_EncodePriority>
 8001394:	4602      	mov	r2, r0
 8001396:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800139a:	4611      	mov	r1, r2
 800139c:	4618      	mov	r0, r3
 800139e:	f7ff ff5f 	bl	8001260 <__NVIC_SetPriority>
}
 80013a2:	bf00      	nop
 80013a4:	3718      	adds	r7, #24
 80013a6:	46bd      	mov	sp, r7
 80013a8:	bd80      	pop	{r7, pc}

080013aa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80013aa:	b580      	push	{r7, lr}
 80013ac:	b082      	sub	sp, #8
 80013ae:	af00      	add	r7, sp, #0
 80013b0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80013b2:	6878      	ldr	r0, [r7, #4]
 80013b4:	f7ff ffb2 	bl	800131c <SysTick_Config>
 80013b8:	4603      	mov	r3, r0
}
 80013ba:	4618      	mov	r0, r3
 80013bc:	3708      	adds	r7, #8
 80013be:	46bd      	mov	sp, r7
 80013c0:	bd80      	pop	{r7, pc}
	...

080013c4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80013c4:	b480      	push	{r7}
 80013c6:	b089      	sub	sp, #36	; 0x24
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]
 80013cc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80013ce:	2300      	movs	r3, #0
 80013d0:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80013d2:	4b89      	ldr	r3, [pc, #548]	; (80015f8 <HAL_GPIO_Init+0x234>)
 80013d4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80013d6:	e194      	b.n	8001702 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80013d8:	683b      	ldr	r3, [r7, #0]
 80013da:	681a      	ldr	r2, [r3, #0]
 80013dc:	2101      	movs	r1, #1
 80013de:	69fb      	ldr	r3, [r7, #28]
 80013e0:	fa01 f303 	lsl.w	r3, r1, r3
 80013e4:	4013      	ands	r3, r2
 80013e6:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80013e8:	693b      	ldr	r3, [r7, #16]
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	f000 8186 	beq.w	80016fc <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80013f0:	683b      	ldr	r3, [r7, #0]
 80013f2:	685b      	ldr	r3, [r3, #4]
 80013f4:	2b01      	cmp	r3, #1
 80013f6:	d00b      	beq.n	8001410 <HAL_GPIO_Init+0x4c>
 80013f8:	683b      	ldr	r3, [r7, #0]
 80013fa:	685b      	ldr	r3, [r3, #4]
 80013fc:	2b02      	cmp	r3, #2
 80013fe:	d007      	beq.n	8001410 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001400:	683b      	ldr	r3, [r7, #0]
 8001402:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001404:	2b11      	cmp	r3, #17
 8001406:	d003      	beq.n	8001410 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001408:	683b      	ldr	r3, [r7, #0]
 800140a:	685b      	ldr	r3, [r3, #4]
 800140c:	2b12      	cmp	r3, #18
 800140e:	d130      	bne.n	8001472 <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	689b      	ldr	r3, [r3, #8]
 8001414:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001416:	69fb      	ldr	r3, [r7, #28]
 8001418:	005b      	lsls	r3, r3, #1
 800141a:	2203      	movs	r2, #3
 800141c:	fa02 f303 	lsl.w	r3, r2, r3
 8001420:	43db      	mvns	r3, r3
 8001422:	69ba      	ldr	r2, [r7, #24]
 8001424:	4013      	ands	r3, r2
 8001426:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001428:	683b      	ldr	r3, [r7, #0]
 800142a:	68da      	ldr	r2, [r3, #12]
 800142c:	69fb      	ldr	r3, [r7, #28]
 800142e:	005b      	lsls	r3, r3, #1
 8001430:	fa02 f303 	lsl.w	r3, r2, r3
 8001434:	69ba      	ldr	r2, [r7, #24]
 8001436:	4313      	orrs	r3, r2
 8001438:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	69ba      	ldr	r2, [r7, #24]
 800143e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	685b      	ldr	r3, [r3, #4]
 8001444:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001446:	2201      	movs	r2, #1
 8001448:	69fb      	ldr	r3, [r7, #28]
 800144a:	fa02 f303 	lsl.w	r3, r2, r3
 800144e:	43db      	mvns	r3, r3
 8001450:	69ba      	ldr	r2, [r7, #24]
 8001452:	4013      	ands	r3, r2
 8001454:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001456:	683b      	ldr	r3, [r7, #0]
 8001458:	685b      	ldr	r3, [r3, #4]
 800145a:	091b      	lsrs	r3, r3, #4
 800145c:	f003 0201 	and.w	r2, r3, #1
 8001460:	69fb      	ldr	r3, [r7, #28]
 8001462:	fa02 f303 	lsl.w	r3, r2, r3
 8001466:	69ba      	ldr	r2, [r7, #24]
 8001468:	4313      	orrs	r3, r2
 800146a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	69ba      	ldr	r2, [r7, #24]
 8001470:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	68db      	ldr	r3, [r3, #12]
 8001476:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001478:	69fb      	ldr	r3, [r7, #28]
 800147a:	005b      	lsls	r3, r3, #1
 800147c:	2203      	movs	r2, #3
 800147e:	fa02 f303 	lsl.w	r3, r2, r3
 8001482:	43db      	mvns	r3, r3
 8001484:	69ba      	ldr	r2, [r7, #24]
 8001486:	4013      	ands	r3, r2
 8001488:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800148a:	683b      	ldr	r3, [r7, #0]
 800148c:	689a      	ldr	r2, [r3, #8]
 800148e:	69fb      	ldr	r3, [r7, #28]
 8001490:	005b      	lsls	r3, r3, #1
 8001492:	fa02 f303 	lsl.w	r3, r2, r3
 8001496:	69ba      	ldr	r2, [r7, #24]
 8001498:	4313      	orrs	r3, r2
 800149a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	69ba      	ldr	r2, [r7, #24]
 80014a0:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80014a2:	683b      	ldr	r3, [r7, #0]
 80014a4:	685b      	ldr	r3, [r3, #4]
 80014a6:	2b02      	cmp	r3, #2
 80014a8:	d003      	beq.n	80014b2 <HAL_GPIO_Init+0xee>
 80014aa:	683b      	ldr	r3, [r7, #0]
 80014ac:	685b      	ldr	r3, [r3, #4]
 80014ae:	2b12      	cmp	r3, #18
 80014b0:	d123      	bne.n	80014fa <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80014b2:	69fb      	ldr	r3, [r7, #28]
 80014b4:	08da      	lsrs	r2, r3, #3
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	3208      	adds	r2, #8
 80014ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80014be:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80014c0:	69fb      	ldr	r3, [r7, #28]
 80014c2:	f003 0307 	and.w	r3, r3, #7
 80014c6:	009b      	lsls	r3, r3, #2
 80014c8:	220f      	movs	r2, #15
 80014ca:	fa02 f303 	lsl.w	r3, r2, r3
 80014ce:	43db      	mvns	r3, r3
 80014d0:	69ba      	ldr	r2, [r7, #24]
 80014d2:	4013      	ands	r3, r2
 80014d4:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80014d6:	683b      	ldr	r3, [r7, #0]
 80014d8:	691a      	ldr	r2, [r3, #16]
 80014da:	69fb      	ldr	r3, [r7, #28]
 80014dc:	f003 0307 	and.w	r3, r3, #7
 80014e0:	009b      	lsls	r3, r3, #2
 80014e2:	fa02 f303 	lsl.w	r3, r2, r3
 80014e6:	69ba      	ldr	r2, [r7, #24]
 80014e8:	4313      	orrs	r3, r2
 80014ea:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80014ec:	69fb      	ldr	r3, [r7, #28]
 80014ee:	08da      	lsrs	r2, r3, #3
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	3208      	adds	r2, #8
 80014f4:	69b9      	ldr	r1, [r7, #24]
 80014f6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001500:	69fb      	ldr	r3, [r7, #28]
 8001502:	005b      	lsls	r3, r3, #1
 8001504:	2203      	movs	r2, #3
 8001506:	fa02 f303 	lsl.w	r3, r2, r3
 800150a:	43db      	mvns	r3, r3
 800150c:	69ba      	ldr	r2, [r7, #24]
 800150e:	4013      	ands	r3, r2
 8001510:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001512:	683b      	ldr	r3, [r7, #0]
 8001514:	685b      	ldr	r3, [r3, #4]
 8001516:	f003 0203 	and.w	r2, r3, #3
 800151a:	69fb      	ldr	r3, [r7, #28]
 800151c:	005b      	lsls	r3, r3, #1
 800151e:	fa02 f303 	lsl.w	r3, r2, r3
 8001522:	69ba      	ldr	r2, [r7, #24]
 8001524:	4313      	orrs	r3, r2
 8001526:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	69ba      	ldr	r2, [r7, #24]
 800152c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800152e:	683b      	ldr	r3, [r7, #0]
 8001530:	685b      	ldr	r3, [r3, #4]
 8001532:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001536:	2b00      	cmp	r3, #0
 8001538:	f000 80e0 	beq.w	80016fc <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800153c:	4b2f      	ldr	r3, [pc, #188]	; (80015fc <HAL_GPIO_Init+0x238>)
 800153e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001542:	4a2e      	ldr	r2, [pc, #184]	; (80015fc <HAL_GPIO_Init+0x238>)
 8001544:	f043 0302 	orr.w	r3, r3, #2
 8001548:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800154c:	4b2b      	ldr	r3, [pc, #172]	; (80015fc <HAL_GPIO_Init+0x238>)
 800154e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001552:	f003 0302 	and.w	r3, r3, #2
 8001556:	60fb      	str	r3, [r7, #12]
 8001558:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800155a:	4a29      	ldr	r2, [pc, #164]	; (8001600 <HAL_GPIO_Init+0x23c>)
 800155c:	69fb      	ldr	r3, [r7, #28]
 800155e:	089b      	lsrs	r3, r3, #2
 8001560:	3302      	adds	r3, #2
 8001562:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001566:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001568:	69fb      	ldr	r3, [r7, #28]
 800156a:	f003 0303 	and.w	r3, r3, #3
 800156e:	009b      	lsls	r3, r3, #2
 8001570:	220f      	movs	r2, #15
 8001572:	fa02 f303 	lsl.w	r3, r2, r3
 8001576:	43db      	mvns	r3, r3
 8001578:	69ba      	ldr	r2, [r7, #24]
 800157a:	4013      	ands	r3, r2
 800157c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	4a20      	ldr	r2, [pc, #128]	; (8001604 <HAL_GPIO_Init+0x240>)
 8001582:	4293      	cmp	r3, r2
 8001584:	d052      	beq.n	800162c <HAL_GPIO_Init+0x268>
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	4a1f      	ldr	r2, [pc, #124]	; (8001608 <HAL_GPIO_Init+0x244>)
 800158a:	4293      	cmp	r3, r2
 800158c:	d031      	beq.n	80015f2 <HAL_GPIO_Init+0x22e>
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	4a1e      	ldr	r2, [pc, #120]	; (800160c <HAL_GPIO_Init+0x248>)
 8001592:	4293      	cmp	r3, r2
 8001594:	d02b      	beq.n	80015ee <HAL_GPIO_Init+0x22a>
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	4a1d      	ldr	r2, [pc, #116]	; (8001610 <HAL_GPIO_Init+0x24c>)
 800159a:	4293      	cmp	r3, r2
 800159c:	d025      	beq.n	80015ea <HAL_GPIO_Init+0x226>
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	4a1c      	ldr	r2, [pc, #112]	; (8001614 <HAL_GPIO_Init+0x250>)
 80015a2:	4293      	cmp	r3, r2
 80015a4:	d01f      	beq.n	80015e6 <HAL_GPIO_Init+0x222>
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	4a1b      	ldr	r2, [pc, #108]	; (8001618 <HAL_GPIO_Init+0x254>)
 80015aa:	4293      	cmp	r3, r2
 80015ac:	d019      	beq.n	80015e2 <HAL_GPIO_Init+0x21e>
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	4a1a      	ldr	r2, [pc, #104]	; (800161c <HAL_GPIO_Init+0x258>)
 80015b2:	4293      	cmp	r3, r2
 80015b4:	d013      	beq.n	80015de <HAL_GPIO_Init+0x21a>
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	4a19      	ldr	r2, [pc, #100]	; (8001620 <HAL_GPIO_Init+0x25c>)
 80015ba:	4293      	cmp	r3, r2
 80015bc:	d00d      	beq.n	80015da <HAL_GPIO_Init+0x216>
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	4a18      	ldr	r2, [pc, #96]	; (8001624 <HAL_GPIO_Init+0x260>)
 80015c2:	4293      	cmp	r3, r2
 80015c4:	d007      	beq.n	80015d6 <HAL_GPIO_Init+0x212>
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	4a17      	ldr	r2, [pc, #92]	; (8001628 <HAL_GPIO_Init+0x264>)
 80015ca:	4293      	cmp	r3, r2
 80015cc:	d101      	bne.n	80015d2 <HAL_GPIO_Init+0x20e>
 80015ce:	2309      	movs	r3, #9
 80015d0:	e02d      	b.n	800162e <HAL_GPIO_Init+0x26a>
 80015d2:	230a      	movs	r3, #10
 80015d4:	e02b      	b.n	800162e <HAL_GPIO_Init+0x26a>
 80015d6:	2308      	movs	r3, #8
 80015d8:	e029      	b.n	800162e <HAL_GPIO_Init+0x26a>
 80015da:	2307      	movs	r3, #7
 80015dc:	e027      	b.n	800162e <HAL_GPIO_Init+0x26a>
 80015de:	2306      	movs	r3, #6
 80015e0:	e025      	b.n	800162e <HAL_GPIO_Init+0x26a>
 80015e2:	2305      	movs	r3, #5
 80015e4:	e023      	b.n	800162e <HAL_GPIO_Init+0x26a>
 80015e6:	2304      	movs	r3, #4
 80015e8:	e021      	b.n	800162e <HAL_GPIO_Init+0x26a>
 80015ea:	2303      	movs	r3, #3
 80015ec:	e01f      	b.n	800162e <HAL_GPIO_Init+0x26a>
 80015ee:	2302      	movs	r3, #2
 80015f0:	e01d      	b.n	800162e <HAL_GPIO_Init+0x26a>
 80015f2:	2301      	movs	r3, #1
 80015f4:	e01b      	b.n	800162e <HAL_GPIO_Init+0x26a>
 80015f6:	bf00      	nop
 80015f8:	58000080 	.word	0x58000080
 80015fc:	58024400 	.word	0x58024400
 8001600:	58000400 	.word	0x58000400
 8001604:	58020000 	.word	0x58020000
 8001608:	58020400 	.word	0x58020400
 800160c:	58020800 	.word	0x58020800
 8001610:	58020c00 	.word	0x58020c00
 8001614:	58021000 	.word	0x58021000
 8001618:	58021400 	.word	0x58021400
 800161c:	58021800 	.word	0x58021800
 8001620:	58021c00 	.word	0x58021c00
 8001624:	58022000 	.word	0x58022000
 8001628:	58022400 	.word	0x58022400
 800162c:	2300      	movs	r3, #0
 800162e:	69fa      	ldr	r2, [r7, #28]
 8001630:	f002 0203 	and.w	r2, r2, #3
 8001634:	0092      	lsls	r2, r2, #2
 8001636:	4093      	lsls	r3, r2
 8001638:	69ba      	ldr	r2, [r7, #24]
 800163a:	4313      	orrs	r3, r2
 800163c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800163e:	4938      	ldr	r1, [pc, #224]	; (8001720 <HAL_GPIO_Init+0x35c>)
 8001640:	69fb      	ldr	r3, [r7, #28]
 8001642:	089b      	lsrs	r3, r3, #2
 8001644:	3302      	adds	r3, #2
 8001646:	69ba      	ldr	r2, [r7, #24]
 8001648:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800164c:	697b      	ldr	r3, [r7, #20]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001652:	693b      	ldr	r3, [r7, #16]
 8001654:	43db      	mvns	r3, r3
 8001656:	69ba      	ldr	r2, [r7, #24]
 8001658:	4013      	ands	r3, r2
 800165a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800165c:	683b      	ldr	r3, [r7, #0]
 800165e:	685b      	ldr	r3, [r3, #4]
 8001660:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001664:	2b00      	cmp	r3, #0
 8001666:	d003      	beq.n	8001670 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001668:	69ba      	ldr	r2, [r7, #24]
 800166a:	693b      	ldr	r3, [r7, #16]
 800166c:	4313      	orrs	r3, r2
 800166e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8001670:	697b      	ldr	r3, [r7, #20]
 8001672:	69ba      	ldr	r2, [r7, #24]
 8001674:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 8001676:	697b      	ldr	r3, [r7, #20]
 8001678:	685b      	ldr	r3, [r3, #4]
 800167a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800167c:	693b      	ldr	r3, [r7, #16]
 800167e:	43db      	mvns	r3, r3
 8001680:	69ba      	ldr	r2, [r7, #24]
 8001682:	4013      	ands	r3, r2
 8001684:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001686:	683b      	ldr	r3, [r7, #0]
 8001688:	685b      	ldr	r3, [r3, #4]
 800168a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800168e:	2b00      	cmp	r3, #0
 8001690:	d003      	beq.n	800169a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001692:	69ba      	ldr	r2, [r7, #24]
 8001694:	693b      	ldr	r3, [r7, #16]
 8001696:	4313      	orrs	r3, r2
 8001698:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800169a:	697b      	ldr	r3, [r7, #20]
 800169c:	69ba      	ldr	r2, [r7, #24]
 800169e:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80016a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80016a8:	693b      	ldr	r3, [r7, #16]
 80016aa:	43db      	mvns	r3, r3
 80016ac:	69ba      	ldr	r2, [r7, #24]
 80016ae:	4013      	ands	r3, r2
 80016b0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80016b2:	683b      	ldr	r3, [r7, #0]
 80016b4:	685b      	ldr	r3, [r3, #4]
 80016b6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d003      	beq.n	80016c6 <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 80016be:	69ba      	ldr	r2, [r7, #24]
 80016c0:	693b      	ldr	r3, [r7, #16]
 80016c2:	4313      	orrs	r3, r2
 80016c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80016c6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80016ca:	69bb      	ldr	r3, [r7, #24]
 80016cc:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80016ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80016d2:	685b      	ldr	r3, [r3, #4]
 80016d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80016d6:	693b      	ldr	r3, [r7, #16]
 80016d8:	43db      	mvns	r3, r3
 80016da:	69ba      	ldr	r2, [r7, #24]
 80016dc:	4013      	ands	r3, r2
 80016de:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80016e0:	683b      	ldr	r3, [r7, #0]
 80016e2:	685b      	ldr	r3, [r3, #4]
 80016e4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d003      	beq.n	80016f4 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 80016ec:	69ba      	ldr	r2, [r7, #24]
 80016ee:	693b      	ldr	r3, [r7, #16]
 80016f0:	4313      	orrs	r3, r2
 80016f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80016f4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80016f8:	69bb      	ldr	r3, [r7, #24]
 80016fa:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 80016fc:	69fb      	ldr	r3, [r7, #28]
 80016fe:	3301      	adds	r3, #1
 8001700:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001702:	683b      	ldr	r3, [r7, #0]
 8001704:	681a      	ldr	r2, [r3, #0]
 8001706:	69fb      	ldr	r3, [r7, #28]
 8001708:	fa22 f303 	lsr.w	r3, r2, r3
 800170c:	2b00      	cmp	r3, #0
 800170e:	f47f ae63 	bne.w	80013d8 <HAL_GPIO_Init+0x14>
  }
}
 8001712:	bf00      	nop
 8001714:	bf00      	nop
 8001716:	3724      	adds	r7, #36	; 0x24
 8001718:	46bd      	mov	sp, r7
 800171a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171e:	4770      	bx	lr
 8001720:	58000400 	.word	0x58000400

08001724 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001724:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001726:	b08f      	sub	sp, #60	; 0x3c
 8001728:	af0a      	add	r7, sp, #40	; 0x28
 800172a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	2b00      	cmp	r3, #0
 8001730:	d101      	bne.n	8001736 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001732:	2301      	movs	r3, #1
 8001734:	e116      	b.n	8001964 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8001742:	b2db      	uxtb	r3, r3
 8001744:	2b00      	cmp	r3, #0
 8001746:	d106      	bne.n	8001756 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	2200      	movs	r2, #0
 800174c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001750:	6878      	ldr	r0, [r7, #4]
 8001752:	f7ff fb47 	bl	8000de4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	2203      	movs	r2, #3
 800175a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800175e:	68bb      	ldr	r3, [r7, #8]
 8001760:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001762:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001766:	2b00      	cmp	r3, #0
 8001768:	d102      	bne.n	8001770 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	2200      	movs	r2, #0
 800176e:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	4618      	mov	r0, r3
 8001776:	f006 f905 	bl	8007984 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	603b      	str	r3, [r7, #0]
 8001780:	687e      	ldr	r6, [r7, #4]
 8001782:	466d      	mov	r5, sp
 8001784:	f106 0410 	add.w	r4, r6, #16
 8001788:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800178a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800178c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800178e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001790:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001794:	e885 0003 	stmia.w	r5, {r0, r1}
 8001798:	1d33      	adds	r3, r6, #4
 800179a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800179c:	6838      	ldr	r0, [r7, #0]
 800179e:	f006 f883 	bl	80078a8 <USB_CoreInit>
 80017a2:	4603      	mov	r3, r0
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d005      	beq.n	80017b4 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	2202      	movs	r2, #2
 80017ac:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80017b0:	2301      	movs	r3, #1
 80017b2:	e0d7      	b.n	8001964 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	2100      	movs	r1, #0
 80017ba:	4618      	mov	r0, r3
 80017bc:	f006 f8f3 	bl	80079a6 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80017c0:	2300      	movs	r3, #0
 80017c2:	73fb      	strb	r3, [r7, #15]
 80017c4:	e04a      	b.n	800185c <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80017c6:	7bfa      	ldrb	r2, [r7, #15]
 80017c8:	6879      	ldr	r1, [r7, #4]
 80017ca:	4613      	mov	r3, r2
 80017cc:	00db      	lsls	r3, r3, #3
 80017ce:	1a9b      	subs	r3, r3, r2
 80017d0:	009b      	lsls	r3, r3, #2
 80017d2:	440b      	add	r3, r1
 80017d4:	333d      	adds	r3, #61	; 0x3d
 80017d6:	2201      	movs	r2, #1
 80017d8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80017da:	7bfa      	ldrb	r2, [r7, #15]
 80017dc:	6879      	ldr	r1, [r7, #4]
 80017de:	4613      	mov	r3, r2
 80017e0:	00db      	lsls	r3, r3, #3
 80017e2:	1a9b      	subs	r3, r3, r2
 80017e4:	009b      	lsls	r3, r3, #2
 80017e6:	440b      	add	r3, r1
 80017e8:	333c      	adds	r3, #60	; 0x3c
 80017ea:	7bfa      	ldrb	r2, [r7, #15]
 80017ec:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80017ee:	7bfa      	ldrb	r2, [r7, #15]
 80017f0:	7bfb      	ldrb	r3, [r7, #15]
 80017f2:	b298      	uxth	r0, r3
 80017f4:	6879      	ldr	r1, [r7, #4]
 80017f6:	4613      	mov	r3, r2
 80017f8:	00db      	lsls	r3, r3, #3
 80017fa:	1a9b      	subs	r3, r3, r2
 80017fc:	009b      	lsls	r3, r3, #2
 80017fe:	440b      	add	r3, r1
 8001800:	3342      	adds	r3, #66	; 0x42
 8001802:	4602      	mov	r2, r0
 8001804:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001806:	7bfa      	ldrb	r2, [r7, #15]
 8001808:	6879      	ldr	r1, [r7, #4]
 800180a:	4613      	mov	r3, r2
 800180c:	00db      	lsls	r3, r3, #3
 800180e:	1a9b      	subs	r3, r3, r2
 8001810:	009b      	lsls	r3, r3, #2
 8001812:	440b      	add	r3, r1
 8001814:	333f      	adds	r3, #63	; 0x3f
 8001816:	2200      	movs	r2, #0
 8001818:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800181a:	7bfa      	ldrb	r2, [r7, #15]
 800181c:	6879      	ldr	r1, [r7, #4]
 800181e:	4613      	mov	r3, r2
 8001820:	00db      	lsls	r3, r3, #3
 8001822:	1a9b      	subs	r3, r3, r2
 8001824:	009b      	lsls	r3, r3, #2
 8001826:	440b      	add	r3, r1
 8001828:	3344      	adds	r3, #68	; 0x44
 800182a:	2200      	movs	r2, #0
 800182c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800182e:	7bfa      	ldrb	r2, [r7, #15]
 8001830:	6879      	ldr	r1, [r7, #4]
 8001832:	4613      	mov	r3, r2
 8001834:	00db      	lsls	r3, r3, #3
 8001836:	1a9b      	subs	r3, r3, r2
 8001838:	009b      	lsls	r3, r3, #2
 800183a:	440b      	add	r3, r1
 800183c:	3348      	adds	r3, #72	; 0x48
 800183e:	2200      	movs	r2, #0
 8001840:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001842:	7bfa      	ldrb	r2, [r7, #15]
 8001844:	6879      	ldr	r1, [r7, #4]
 8001846:	4613      	mov	r3, r2
 8001848:	00db      	lsls	r3, r3, #3
 800184a:	1a9b      	subs	r3, r3, r2
 800184c:	009b      	lsls	r3, r3, #2
 800184e:	440b      	add	r3, r1
 8001850:	3350      	adds	r3, #80	; 0x50
 8001852:	2200      	movs	r2, #0
 8001854:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001856:	7bfb      	ldrb	r3, [r7, #15]
 8001858:	3301      	adds	r3, #1
 800185a:	73fb      	strb	r3, [r7, #15]
 800185c:	7bfa      	ldrb	r2, [r7, #15]
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	685b      	ldr	r3, [r3, #4]
 8001862:	429a      	cmp	r2, r3
 8001864:	d3af      	bcc.n	80017c6 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001866:	2300      	movs	r3, #0
 8001868:	73fb      	strb	r3, [r7, #15]
 800186a:	e044      	b.n	80018f6 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800186c:	7bfa      	ldrb	r2, [r7, #15]
 800186e:	6879      	ldr	r1, [r7, #4]
 8001870:	4613      	mov	r3, r2
 8001872:	00db      	lsls	r3, r3, #3
 8001874:	1a9b      	subs	r3, r3, r2
 8001876:	009b      	lsls	r3, r3, #2
 8001878:	440b      	add	r3, r1
 800187a:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 800187e:	2200      	movs	r2, #0
 8001880:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001882:	7bfa      	ldrb	r2, [r7, #15]
 8001884:	6879      	ldr	r1, [r7, #4]
 8001886:	4613      	mov	r3, r2
 8001888:	00db      	lsls	r3, r3, #3
 800188a:	1a9b      	subs	r3, r3, r2
 800188c:	009b      	lsls	r3, r3, #2
 800188e:	440b      	add	r3, r1
 8001890:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8001894:	7bfa      	ldrb	r2, [r7, #15]
 8001896:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001898:	7bfa      	ldrb	r2, [r7, #15]
 800189a:	6879      	ldr	r1, [r7, #4]
 800189c:	4613      	mov	r3, r2
 800189e:	00db      	lsls	r3, r3, #3
 80018a0:	1a9b      	subs	r3, r3, r2
 80018a2:	009b      	lsls	r3, r3, #2
 80018a4:	440b      	add	r3, r1
 80018a6:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80018aa:	2200      	movs	r2, #0
 80018ac:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80018ae:	7bfa      	ldrb	r2, [r7, #15]
 80018b0:	6879      	ldr	r1, [r7, #4]
 80018b2:	4613      	mov	r3, r2
 80018b4:	00db      	lsls	r3, r3, #3
 80018b6:	1a9b      	subs	r3, r3, r2
 80018b8:	009b      	lsls	r3, r3, #2
 80018ba:	440b      	add	r3, r1
 80018bc:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80018c0:	2200      	movs	r2, #0
 80018c2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80018c4:	7bfa      	ldrb	r2, [r7, #15]
 80018c6:	6879      	ldr	r1, [r7, #4]
 80018c8:	4613      	mov	r3, r2
 80018ca:	00db      	lsls	r3, r3, #3
 80018cc:	1a9b      	subs	r3, r3, r2
 80018ce:	009b      	lsls	r3, r3, #2
 80018d0:	440b      	add	r3, r1
 80018d2:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80018d6:	2200      	movs	r2, #0
 80018d8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80018da:	7bfa      	ldrb	r2, [r7, #15]
 80018dc:	6879      	ldr	r1, [r7, #4]
 80018de:	4613      	mov	r3, r2
 80018e0:	00db      	lsls	r3, r3, #3
 80018e2:	1a9b      	subs	r3, r3, r2
 80018e4:	009b      	lsls	r3, r3, #2
 80018e6:	440b      	add	r3, r1
 80018e8:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80018ec:	2200      	movs	r2, #0
 80018ee:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80018f0:	7bfb      	ldrb	r3, [r7, #15]
 80018f2:	3301      	adds	r3, #1
 80018f4:	73fb      	strb	r3, [r7, #15]
 80018f6:	7bfa      	ldrb	r2, [r7, #15]
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	685b      	ldr	r3, [r3, #4]
 80018fc:	429a      	cmp	r2, r3
 80018fe:	d3b5      	bcc.n	800186c <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	603b      	str	r3, [r7, #0]
 8001906:	687e      	ldr	r6, [r7, #4]
 8001908:	466d      	mov	r5, sp
 800190a:	f106 0410 	add.w	r4, r6, #16
 800190e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001910:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001912:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001914:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001916:	e894 0003 	ldmia.w	r4, {r0, r1}
 800191a:	e885 0003 	stmia.w	r5, {r0, r1}
 800191e:	1d33      	adds	r3, r6, #4
 8001920:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001922:	6838      	ldr	r0, [r7, #0]
 8001924:	f006 f86a 	bl	80079fc <USB_DevInit>
 8001928:	4603      	mov	r3, r0
 800192a:	2b00      	cmp	r3, #0
 800192c:	d005      	beq.n	800193a <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	2202      	movs	r2, #2
 8001932:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8001936:	2301      	movs	r3, #1
 8001938:	e014      	b.n	8001964 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	2200      	movs	r2, #0
 800193e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	2201      	movs	r2, #1
 8001946:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800194e:	2b01      	cmp	r3, #1
 8001950:	d102      	bne.n	8001958 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001952:	6878      	ldr	r0, [r7, #4]
 8001954:	f000 f80a 	bl	800196c <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	4618      	mov	r0, r3
 800195e:	f006 fa0c 	bl	8007d7a <USB_DevDisconnect>

  return HAL_OK;
 8001962:	2300      	movs	r3, #0
}
 8001964:	4618      	mov	r0, r3
 8001966:	3714      	adds	r7, #20
 8001968:	46bd      	mov	sp, r7
 800196a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800196c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800196c:	b480      	push	{r7}
 800196e:	b085      	sub	sp, #20
 8001970:	af00      	add	r7, sp, #0
 8001972:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	2201      	movs	r2, #1
 800197e:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	2200      	movs	r2, #0
 8001986:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	699b      	ldr	r3, [r3, #24]
 800198e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800199a:	4b05      	ldr	r3, [pc, #20]	; (80019b0 <HAL_PCDEx_ActivateLPM+0x44>)
 800199c:	4313      	orrs	r3, r2
 800199e:	68fa      	ldr	r2, [r7, #12]
 80019a0:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80019a2:	2300      	movs	r3, #0
}
 80019a4:	4618      	mov	r0, r3
 80019a6:	3714      	adds	r7, #20
 80019a8:	46bd      	mov	sp, r7
 80019aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ae:	4770      	bx	lr
 80019b0:	10000003 	.word	0x10000003

080019b4 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b084      	sub	sp, #16
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80019bc:	4b19      	ldr	r3, [pc, #100]	; (8001a24 <HAL_PWREx_ConfigSupply+0x70>)
 80019be:	68db      	ldr	r3, [r3, #12]
 80019c0:	f003 0304 	and.w	r3, r3, #4
 80019c4:	2b04      	cmp	r3, #4
 80019c6:	d00a      	beq.n	80019de <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80019c8:	4b16      	ldr	r3, [pc, #88]	; (8001a24 <HAL_PWREx_ConfigSupply+0x70>)
 80019ca:	68db      	ldr	r3, [r3, #12]
 80019cc:	f003 0307 	and.w	r3, r3, #7
 80019d0:	687a      	ldr	r2, [r7, #4]
 80019d2:	429a      	cmp	r2, r3
 80019d4:	d001      	beq.n	80019da <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80019d6:	2301      	movs	r3, #1
 80019d8:	e01f      	b.n	8001a1a <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80019da:	2300      	movs	r3, #0
 80019dc:	e01d      	b.n	8001a1a <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80019de:	4b11      	ldr	r3, [pc, #68]	; (8001a24 <HAL_PWREx_ConfigSupply+0x70>)
 80019e0:	68db      	ldr	r3, [r3, #12]
 80019e2:	f023 0207 	bic.w	r2, r3, #7
 80019e6:	490f      	ldr	r1, [pc, #60]	; (8001a24 <HAL_PWREx_ConfigSupply+0x70>)
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	4313      	orrs	r3, r2
 80019ec:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80019ee:	f7ff fbc9 	bl	8001184 <HAL_GetTick>
 80019f2:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80019f4:	e009      	b.n	8001a0a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80019f6:	f7ff fbc5 	bl	8001184 <HAL_GetTick>
 80019fa:	4602      	mov	r2, r0
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	1ad3      	subs	r3, r2, r3
 8001a00:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001a04:	d901      	bls.n	8001a0a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8001a06:	2301      	movs	r3, #1
 8001a08:	e007      	b.n	8001a1a <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001a0a:	4b06      	ldr	r3, [pc, #24]	; (8001a24 <HAL_PWREx_ConfigSupply+0x70>)
 8001a0c:	685b      	ldr	r3, [r3, #4]
 8001a0e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001a12:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001a16:	d1ee      	bne.n	80019f6 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8001a18:	2300      	movs	r3, #0
}
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	3710      	adds	r7, #16
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	bd80      	pop	{r7, pc}
 8001a22:	bf00      	nop
 8001a24:	58024800 	.word	0x58024800

08001a28 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8001a28:	b480      	push	{r7}
 8001a2a:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8001a2c:	4b05      	ldr	r3, [pc, #20]	; (8001a44 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8001a2e:	68db      	ldr	r3, [r3, #12]
 8001a30:	4a04      	ldr	r2, [pc, #16]	; (8001a44 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8001a32:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001a36:	60d3      	str	r3, [r2, #12]
}
 8001a38:	bf00      	nop
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a40:	4770      	bx	lr
 8001a42:	bf00      	nop
 8001a44:	58024800 	.word	0x58024800

08001a48 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi : QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	b086      	sub	sp, #24
 8001a4c:	af02      	add	r7, sp, #8
 8001a4e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8001a50:	f7ff fb98 	bl	8001184 <HAL_GetTick>
 8001a54:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d101      	bne.n	8001a60 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8001a5c:	2301      	movs	r3, #1
 8001a5e:	e05f      	b.n	8001b20 <HAL_QSPI_Init+0xd8>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001a66:	b2db      	uxtb	r3, r3
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d107      	bne.n	8001a7c <HAL_QSPI_Init+0x34>

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8001a6c:	6878      	ldr	r0, [r7, #4]
 8001a6e:	f7fe ff8b 	bl	8000988 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8001a72:	f241 3188 	movw	r1, #5000	; 0x1388
 8001a76:	6878      	ldr	r0, [r7, #4]
 8001a78:	f000 f85a 	bl	8001b30 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	f423 6170 	bic.w	r1, r3, #3840	; 0xf00
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	689b      	ldr	r3, [r3, #8]
 8001a8a:	3b01      	subs	r3, #1
 8001a8c:	021a      	lsls	r2, r3, #8
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	430a      	orrs	r2, r1
 8001a94:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001a9a:	9300      	str	r3, [sp, #0]
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	2120      	movs	r1, #32
 8001aa2:	6878      	ldr	r0, [r7, #4]
 8001aa4:	f000 f852 	bl	8001b4c <QSPI_WaitFlagStateUntilTimeout>
 8001aa8:	4603      	mov	r3, r0
 8001aaa:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8001aac:	7afb      	ldrb	r3, [r7, #11]
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d135      	bne.n	8001b1e <HAL_QSPI_Init+0xd6>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	681a      	ldr	r2, [r3, #0]
 8001ab8:	4b1b      	ldr	r3, [pc, #108]	; (8001b28 <HAL_QSPI_Init+0xe0>)
 8001aba:	4013      	ands	r3, r2
 8001abc:	687a      	ldr	r2, [r7, #4]
 8001abe:	6852      	ldr	r2, [r2, #4]
 8001ac0:	0611      	lsls	r1, r2, #24
 8001ac2:	687a      	ldr	r2, [r7, #4]
 8001ac4:	68d2      	ldr	r2, [r2, #12]
 8001ac6:	4311      	orrs	r1, r2
 8001ac8:	687a      	ldr	r2, [r7, #4]
 8001aca:	69d2      	ldr	r2, [r2, #28]
 8001acc:	4311      	orrs	r1, r2
 8001ace:	687a      	ldr	r2, [r7, #4]
 8001ad0:	6a12      	ldr	r2, [r2, #32]
 8001ad2:	4311      	orrs	r1, r2
 8001ad4:	687a      	ldr	r2, [r7, #4]
 8001ad6:	6812      	ldr	r2, [r2, #0]
 8001ad8:	430b      	orrs	r3, r1
 8001ada:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	685a      	ldr	r2, [r3, #4]
 8001ae2:	4b12      	ldr	r3, [pc, #72]	; (8001b2c <HAL_QSPI_Init+0xe4>)
 8001ae4:	4013      	ands	r3, r2
 8001ae6:	687a      	ldr	r2, [r7, #4]
 8001ae8:	6912      	ldr	r2, [r2, #16]
 8001aea:	0411      	lsls	r1, r2, #16
 8001aec:	687a      	ldr	r2, [r7, #4]
 8001aee:	6952      	ldr	r2, [r2, #20]
 8001af0:	4311      	orrs	r1, r2
 8001af2:	687a      	ldr	r2, [r7, #4]
 8001af4:	6992      	ldr	r2, [r2, #24]
 8001af6:	4311      	orrs	r1, r2
 8001af8:	687a      	ldr	r2, [r7, #4]
 8001afa:	6812      	ldr	r2, [r2, #0]
 8001afc:	430b      	orrs	r3, r1
 8001afe:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	681a      	ldr	r2, [r3, #0]
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	f042 0201 	orr.w	r2, r2, #1
 8001b0e:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	2200      	movs	r2, #0
 8001b14:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	2201      	movs	r2, #1
 8001b1a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Return function status */
  return status;
 8001b1e:	7afb      	ldrb	r3, [r7, #11]
}
 8001b20:	4618      	mov	r0, r3
 8001b22:	3710      	adds	r7, #16
 8001b24:	46bd      	mov	sp, r7
 8001b26:	bd80      	pop	{r7, pc}
 8001b28:	00ffff2f 	.word	0x00ffff2f
 8001b2c:	ffe0f8fe 	.word	0xffe0f8fe

08001b30 <HAL_QSPI_SetTimeout>:
  * @param  hqspi : QSPI handle.
  * @param  Timeout : Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8001b30:	b480      	push	{r7}
 8001b32:	b083      	sub	sp, #12
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6078      	str	r0, [r7, #4]
 8001b38:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	683a      	ldr	r2, [r7, #0]
 8001b3e:	649a      	str	r2, [r3, #72]	; 0x48
}
 8001b40:	bf00      	nop
 8001b42:	370c      	adds	r7, #12
 8001b44:	46bd      	mov	sp, r7
 8001b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4a:	4770      	bx	lr

08001b4c <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout : Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	b084      	sub	sp, #16
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	60f8      	str	r0, [r7, #12]
 8001b54:	60b9      	str	r1, [r7, #8]
 8001b56:	603b      	str	r3, [r7, #0]
 8001b58:	4613      	mov	r3, r2
 8001b5a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8001b5c:	e01a      	b.n	8001b94 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001b5e:	69bb      	ldr	r3, [r7, #24]
 8001b60:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001b64:	d016      	beq.n	8001b94 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001b66:	f7ff fb0d 	bl	8001184 <HAL_GetTick>
 8001b6a:	4602      	mov	r2, r0
 8001b6c:	683b      	ldr	r3, [r7, #0]
 8001b6e:	1ad3      	subs	r3, r2, r3
 8001b70:	69ba      	ldr	r2, [r7, #24]
 8001b72:	429a      	cmp	r2, r3
 8001b74:	d302      	bcc.n	8001b7c <QSPI_WaitFlagStateUntilTimeout+0x30>
 8001b76:	69bb      	ldr	r3, [r7, #24]
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d10b      	bne.n	8001b94 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	2204      	movs	r2, #4
 8001b80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b88:	f043 0201 	orr.w	r2, r3, #1
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	645a      	str	r2, [r3, #68]	; 0x44

        return HAL_ERROR;
 8001b90:	2301      	movs	r3, #1
 8001b92:	e00e      	b.n	8001bb2 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	689a      	ldr	r2, [r3, #8]
 8001b9a:	68bb      	ldr	r3, [r7, #8]
 8001b9c:	4013      	ands	r3, r2
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	bf14      	ite	ne
 8001ba2:	2301      	movne	r3, #1
 8001ba4:	2300      	moveq	r3, #0
 8001ba6:	b2db      	uxtb	r3, r3
 8001ba8:	461a      	mov	r2, r3
 8001baa:	79fb      	ldrb	r3, [r7, #7]
 8001bac:	429a      	cmp	r2, r3
 8001bae:	d1d6      	bne.n	8001b5e <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001bb0:	2300      	movs	r3, #0
}
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	3710      	adds	r7, #16
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	bd80      	pop	{r7, pc}
	...

08001bbc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b08c      	sub	sp, #48	; 0x30
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d101      	bne.n	8001bce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001bca:	2301      	movs	r3, #1
 8001bcc:	e3ff      	b.n	80023ce <HAL_RCC_OscConfig+0x812>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	f003 0301 	and.w	r3, r3, #1
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	f000 8087 	beq.w	8001cea <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001bdc:	4b99      	ldr	r3, [pc, #612]	; (8001e44 <HAL_RCC_OscConfig+0x288>)
 8001bde:	691b      	ldr	r3, [r3, #16]
 8001be0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001be4:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001be6:	4b97      	ldr	r3, [pc, #604]	; (8001e44 <HAL_RCC_OscConfig+0x288>)
 8001be8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bea:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8001bec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001bee:	2b10      	cmp	r3, #16
 8001bf0:	d007      	beq.n	8001c02 <HAL_RCC_OscConfig+0x46>
 8001bf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001bf4:	2b18      	cmp	r3, #24
 8001bf6:	d110      	bne.n	8001c1a <HAL_RCC_OscConfig+0x5e>
 8001bf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001bfa:	f003 0303 	and.w	r3, r3, #3
 8001bfe:	2b02      	cmp	r3, #2
 8001c00:	d10b      	bne.n	8001c1a <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c02:	4b90      	ldr	r3, [pc, #576]	; (8001e44 <HAL_RCC_OscConfig+0x288>)
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d06c      	beq.n	8001ce8 <HAL_RCC_OscConfig+0x12c>
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	685b      	ldr	r3, [r3, #4]
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d168      	bne.n	8001ce8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001c16:	2301      	movs	r3, #1
 8001c18:	e3d9      	b.n	80023ce <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	685b      	ldr	r3, [r3, #4]
 8001c1e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c22:	d106      	bne.n	8001c32 <HAL_RCC_OscConfig+0x76>
 8001c24:	4b87      	ldr	r3, [pc, #540]	; (8001e44 <HAL_RCC_OscConfig+0x288>)
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	4a86      	ldr	r2, [pc, #536]	; (8001e44 <HAL_RCC_OscConfig+0x288>)
 8001c2a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c2e:	6013      	str	r3, [r2, #0]
 8001c30:	e02e      	b.n	8001c90 <HAL_RCC_OscConfig+0xd4>
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	685b      	ldr	r3, [r3, #4]
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d10c      	bne.n	8001c54 <HAL_RCC_OscConfig+0x98>
 8001c3a:	4b82      	ldr	r3, [pc, #520]	; (8001e44 <HAL_RCC_OscConfig+0x288>)
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	4a81      	ldr	r2, [pc, #516]	; (8001e44 <HAL_RCC_OscConfig+0x288>)
 8001c40:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c44:	6013      	str	r3, [r2, #0]
 8001c46:	4b7f      	ldr	r3, [pc, #508]	; (8001e44 <HAL_RCC_OscConfig+0x288>)
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	4a7e      	ldr	r2, [pc, #504]	; (8001e44 <HAL_RCC_OscConfig+0x288>)
 8001c4c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c50:	6013      	str	r3, [r2, #0]
 8001c52:	e01d      	b.n	8001c90 <HAL_RCC_OscConfig+0xd4>
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	685b      	ldr	r3, [r3, #4]
 8001c58:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001c5c:	d10c      	bne.n	8001c78 <HAL_RCC_OscConfig+0xbc>
 8001c5e:	4b79      	ldr	r3, [pc, #484]	; (8001e44 <HAL_RCC_OscConfig+0x288>)
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	4a78      	ldr	r2, [pc, #480]	; (8001e44 <HAL_RCC_OscConfig+0x288>)
 8001c64:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c68:	6013      	str	r3, [r2, #0]
 8001c6a:	4b76      	ldr	r3, [pc, #472]	; (8001e44 <HAL_RCC_OscConfig+0x288>)
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	4a75      	ldr	r2, [pc, #468]	; (8001e44 <HAL_RCC_OscConfig+0x288>)
 8001c70:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c74:	6013      	str	r3, [r2, #0]
 8001c76:	e00b      	b.n	8001c90 <HAL_RCC_OscConfig+0xd4>
 8001c78:	4b72      	ldr	r3, [pc, #456]	; (8001e44 <HAL_RCC_OscConfig+0x288>)
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	4a71      	ldr	r2, [pc, #452]	; (8001e44 <HAL_RCC_OscConfig+0x288>)
 8001c7e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c82:	6013      	str	r3, [r2, #0]
 8001c84:	4b6f      	ldr	r3, [pc, #444]	; (8001e44 <HAL_RCC_OscConfig+0x288>)
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	4a6e      	ldr	r2, [pc, #440]	; (8001e44 <HAL_RCC_OscConfig+0x288>)
 8001c8a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c8e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	685b      	ldr	r3, [r3, #4]
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d013      	beq.n	8001cc0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c98:	f7ff fa74 	bl	8001184 <HAL_GetTick>
 8001c9c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001c9e:	e008      	b.n	8001cb2 <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001ca0:	f7ff fa70 	bl	8001184 <HAL_GetTick>
 8001ca4:	4602      	mov	r2, r0
 8001ca6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ca8:	1ad3      	subs	r3, r2, r3
 8001caa:	2b64      	cmp	r3, #100	; 0x64
 8001cac:	d901      	bls.n	8001cb2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001cae:	2303      	movs	r3, #3
 8001cb0:	e38d      	b.n	80023ce <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001cb2:	4b64      	ldr	r3, [pc, #400]	; (8001e44 <HAL_RCC_OscConfig+0x288>)
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d0f0      	beq.n	8001ca0 <HAL_RCC_OscConfig+0xe4>
 8001cbe:	e014      	b.n	8001cea <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cc0:	f7ff fa60 	bl	8001184 <HAL_GetTick>
 8001cc4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001cc6:	e008      	b.n	8001cda <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001cc8:	f7ff fa5c 	bl	8001184 <HAL_GetTick>
 8001ccc:	4602      	mov	r2, r0
 8001cce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cd0:	1ad3      	subs	r3, r2, r3
 8001cd2:	2b64      	cmp	r3, #100	; 0x64
 8001cd4:	d901      	bls.n	8001cda <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001cd6:	2303      	movs	r3, #3
 8001cd8:	e379      	b.n	80023ce <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001cda:	4b5a      	ldr	r3, [pc, #360]	; (8001e44 <HAL_RCC_OscConfig+0x288>)
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d1f0      	bne.n	8001cc8 <HAL_RCC_OscConfig+0x10c>
 8001ce6:	e000      	b.n	8001cea <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ce8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	f003 0302 	and.w	r3, r3, #2
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	f000 80ae 	beq.w	8001e54 <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001cf8:	4b52      	ldr	r3, [pc, #328]	; (8001e44 <HAL_RCC_OscConfig+0x288>)
 8001cfa:	691b      	ldr	r3, [r3, #16]
 8001cfc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001d00:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001d02:	4b50      	ldr	r3, [pc, #320]	; (8001e44 <HAL_RCC_OscConfig+0x288>)
 8001d04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d06:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8001d08:	6a3b      	ldr	r3, [r7, #32]
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d007      	beq.n	8001d1e <HAL_RCC_OscConfig+0x162>
 8001d0e:	6a3b      	ldr	r3, [r7, #32]
 8001d10:	2b18      	cmp	r3, #24
 8001d12:	d13a      	bne.n	8001d8a <HAL_RCC_OscConfig+0x1ce>
 8001d14:	69fb      	ldr	r3, [r7, #28]
 8001d16:	f003 0303 	and.w	r3, r3, #3
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d135      	bne.n	8001d8a <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001d1e:	4b49      	ldr	r3, [pc, #292]	; (8001e44 <HAL_RCC_OscConfig+0x288>)
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	f003 0304 	and.w	r3, r3, #4
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d005      	beq.n	8001d36 <HAL_RCC_OscConfig+0x17a>
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	68db      	ldr	r3, [r3, #12]
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d101      	bne.n	8001d36 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8001d32:	2301      	movs	r3, #1
 8001d34:	e34b      	b.n	80023ce <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d36:	f7ff fa55 	bl	80011e4 <HAL_GetREVID>
 8001d3a:	4603      	mov	r3, r0
 8001d3c:	f241 0203 	movw	r2, #4099	; 0x1003
 8001d40:	4293      	cmp	r3, r2
 8001d42:	d817      	bhi.n	8001d74 <HAL_RCC_OscConfig+0x1b8>
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	691b      	ldr	r3, [r3, #16]
 8001d48:	2b40      	cmp	r3, #64	; 0x40
 8001d4a:	d108      	bne.n	8001d5e <HAL_RCC_OscConfig+0x1a2>
 8001d4c:	4b3d      	ldr	r3, [pc, #244]	; (8001e44 <HAL_RCC_OscConfig+0x288>)
 8001d4e:	685b      	ldr	r3, [r3, #4]
 8001d50:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8001d54:	4a3b      	ldr	r2, [pc, #236]	; (8001e44 <HAL_RCC_OscConfig+0x288>)
 8001d56:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d5a:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001d5c:	e07a      	b.n	8001e54 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d5e:	4b39      	ldr	r3, [pc, #228]	; (8001e44 <HAL_RCC_OscConfig+0x288>)
 8001d60:	685b      	ldr	r3, [r3, #4]
 8001d62:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	691b      	ldr	r3, [r3, #16]
 8001d6a:	031b      	lsls	r3, r3, #12
 8001d6c:	4935      	ldr	r1, [pc, #212]	; (8001e44 <HAL_RCC_OscConfig+0x288>)
 8001d6e:	4313      	orrs	r3, r2
 8001d70:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001d72:	e06f      	b.n	8001e54 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d74:	4b33      	ldr	r3, [pc, #204]	; (8001e44 <HAL_RCC_OscConfig+0x288>)
 8001d76:	685b      	ldr	r3, [r3, #4]
 8001d78:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	691b      	ldr	r3, [r3, #16]
 8001d80:	061b      	lsls	r3, r3, #24
 8001d82:	4930      	ldr	r1, [pc, #192]	; (8001e44 <HAL_RCC_OscConfig+0x288>)
 8001d84:	4313      	orrs	r3, r2
 8001d86:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001d88:	e064      	b.n	8001e54 <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	68db      	ldr	r3, [r3, #12]
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d045      	beq.n	8001e1e <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001d92:	4b2c      	ldr	r3, [pc, #176]	; (8001e44 <HAL_RCC_OscConfig+0x288>)
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	f023 0219 	bic.w	r2, r3, #25
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	68db      	ldr	r3, [r3, #12]
 8001d9e:	4929      	ldr	r1, [pc, #164]	; (8001e44 <HAL_RCC_OscConfig+0x288>)
 8001da0:	4313      	orrs	r3, r2
 8001da2:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001da4:	f7ff f9ee 	bl	8001184 <HAL_GetTick>
 8001da8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001daa:	e008      	b.n	8001dbe <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001dac:	f7ff f9ea 	bl	8001184 <HAL_GetTick>
 8001db0:	4602      	mov	r2, r0
 8001db2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001db4:	1ad3      	subs	r3, r2, r3
 8001db6:	2b02      	cmp	r3, #2
 8001db8:	d901      	bls.n	8001dbe <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 8001dba:	2303      	movs	r3, #3
 8001dbc:	e307      	b.n	80023ce <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001dbe:	4b21      	ldr	r3, [pc, #132]	; (8001e44 <HAL_RCC_OscConfig+0x288>)
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f003 0304 	and.w	r3, r3, #4
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d0f0      	beq.n	8001dac <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001dca:	f7ff fa0b 	bl	80011e4 <HAL_GetREVID>
 8001dce:	4603      	mov	r3, r0
 8001dd0:	f241 0203 	movw	r2, #4099	; 0x1003
 8001dd4:	4293      	cmp	r3, r2
 8001dd6:	d817      	bhi.n	8001e08 <HAL_RCC_OscConfig+0x24c>
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	691b      	ldr	r3, [r3, #16]
 8001ddc:	2b40      	cmp	r3, #64	; 0x40
 8001dde:	d108      	bne.n	8001df2 <HAL_RCC_OscConfig+0x236>
 8001de0:	4b18      	ldr	r3, [pc, #96]	; (8001e44 <HAL_RCC_OscConfig+0x288>)
 8001de2:	685b      	ldr	r3, [r3, #4]
 8001de4:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8001de8:	4a16      	ldr	r2, [pc, #88]	; (8001e44 <HAL_RCC_OscConfig+0x288>)
 8001dea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001dee:	6053      	str	r3, [r2, #4]
 8001df0:	e030      	b.n	8001e54 <HAL_RCC_OscConfig+0x298>
 8001df2:	4b14      	ldr	r3, [pc, #80]	; (8001e44 <HAL_RCC_OscConfig+0x288>)
 8001df4:	685b      	ldr	r3, [r3, #4]
 8001df6:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	691b      	ldr	r3, [r3, #16]
 8001dfe:	031b      	lsls	r3, r3, #12
 8001e00:	4910      	ldr	r1, [pc, #64]	; (8001e44 <HAL_RCC_OscConfig+0x288>)
 8001e02:	4313      	orrs	r3, r2
 8001e04:	604b      	str	r3, [r1, #4]
 8001e06:	e025      	b.n	8001e54 <HAL_RCC_OscConfig+0x298>
 8001e08:	4b0e      	ldr	r3, [pc, #56]	; (8001e44 <HAL_RCC_OscConfig+0x288>)
 8001e0a:	685b      	ldr	r3, [r3, #4]
 8001e0c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	691b      	ldr	r3, [r3, #16]
 8001e14:	061b      	lsls	r3, r3, #24
 8001e16:	490b      	ldr	r1, [pc, #44]	; (8001e44 <HAL_RCC_OscConfig+0x288>)
 8001e18:	4313      	orrs	r3, r2
 8001e1a:	604b      	str	r3, [r1, #4]
 8001e1c:	e01a      	b.n	8001e54 <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e1e:	4b09      	ldr	r3, [pc, #36]	; (8001e44 <HAL_RCC_OscConfig+0x288>)
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	4a08      	ldr	r2, [pc, #32]	; (8001e44 <HAL_RCC_OscConfig+0x288>)
 8001e24:	f023 0301 	bic.w	r3, r3, #1
 8001e28:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e2a:	f7ff f9ab 	bl	8001184 <HAL_GetTick>
 8001e2e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001e30:	e00a      	b.n	8001e48 <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001e32:	f7ff f9a7 	bl	8001184 <HAL_GetTick>
 8001e36:	4602      	mov	r2, r0
 8001e38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e3a:	1ad3      	subs	r3, r2, r3
 8001e3c:	2b02      	cmp	r3, #2
 8001e3e:	d903      	bls.n	8001e48 <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 8001e40:	2303      	movs	r3, #3
 8001e42:	e2c4      	b.n	80023ce <HAL_RCC_OscConfig+0x812>
 8001e44:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001e48:	4ba4      	ldr	r3, [pc, #656]	; (80020dc <HAL_RCC_OscConfig+0x520>)
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	f003 0304 	and.w	r3, r3, #4
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d1ee      	bne.n	8001e32 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	f003 0310 	and.w	r3, r3, #16
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	f000 80a9 	beq.w	8001fb4 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001e62:	4b9e      	ldr	r3, [pc, #632]	; (80020dc <HAL_RCC_OscConfig+0x520>)
 8001e64:	691b      	ldr	r3, [r3, #16]
 8001e66:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001e6a:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001e6c:	4b9b      	ldr	r3, [pc, #620]	; (80020dc <HAL_RCC_OscConfig+0x520>)
 8001e6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e70:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8001e72:	69bb      	ldr	r3, [r7, #24]
 8001e74:	2b08      	cmp	r3, #8
 8001e76:	d007      	beq.n	8001e88 <HAL_RCC_OscConfig+0x2cc>
 8001e78:	69bb      	ldr	r3, [r7, #24]
 8001e7a:	2b18      	cmp	r3, #24
 8001e7c:	d13a      	bne.n	8001ef4 <HAL_RCC_OscConfig+0x338>
 8001e7e:	697b      	ldr	r3, [r7, #20]
 8001e80:	f003 0303 	and.w	r3, r3, #3
 8001e84:	2b01      	cmp	r3, #1
 8001e86:	d135      	bne.n	8001ef4 <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001e88:	4b94      	ldr	r3, [pc, #592]	; (80020dc <HAL_RCC_OscConfig+0x520>)
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d005      	beq.n	8001ea0 <HAL_RCC_OscConfig+0x2e4>
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	69db      	ldr	r3, [r3, #28]
 8001e98:	2b80      	cmp	r3, #128	; 0x80
 8001e9a:	d001      	beq.n	8001ea0 <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 8001e9c:	2301      	movs	r3, #1
 8001e9e:	e296      	b.n	80023ce <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001ea0:	f7ff f9a0 	bl	80011e4 <HAL_GetREVID>
 8001ea4:	4603      	mov	r3, r0
 8001ea6:	f241 0203 	movw	r2, #4099	; 0x1003
 8001eaa:	4293      	cmp	r3, r2
 8001eac:	d817      	bhi.n	8001ede <HAL_RCC_OscConfig+0x322>
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	6a1b      	ldr	r3, [r3, #32]
 8001eb2:	2b20      	cmp	r3, #32
 8001eb4:	d108      	bne.n	8001ec8 <HAL_RCC_OscConfig+0x30c>
 8001eb6:	4b89      	ldr	r3, [pc, #548]	; (80020dc <HAL_RCC_OscConfig+0x520>)
 8001eb8:	685b      	ldr	r3, [r3, #4]
 8001eba:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8001ebe:	4a87      	ldr	r2, [pc, #540]	; (80020dc <HAL_RCC_OscConfig+0x520>)
 8001ec0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001ec4:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001ec6:	e075      	b.n	8001fb4 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001ec8:	4b84      	ldr	r3, [pc, #528]	; (80020dc <HAL_RCC_OscConfig+0x520>)
 8001eca:	685b      	ldr	r3, [r3, #4]
 8001ecc:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	6a1b      	ldr	r3, [r3, #32]
 8001ed4:	069b      	lsls	r3, r3, #26
 8001ed6:	4981      	ldr	r1, [pc, #516]	; (80020dc <HAL_RCC_OscConfig+0x520>)
 8001ed8:	4313      	orrs	r3, r2
 8001eda:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001edc:	e06a      	b.n	8001fb4 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001ede:	4b7f      	ldr	r3, [pc, #508]	; (80020dc <HAL_RCC_OscConfig+0x520>)
 8001ee0:	68db      	ldr	r3, [r3, #12]
 8001ee2:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	6a1b      	ldr	r3, [r3, #32]
 8001eea:	061b      	lsls	r3, r3, #24
 8001eec:	497b      	ldr	r1, [pc, #492]	; (80020dc <HAL_RCC_OscConfig+0x520>)
 8001eee:	4313      	orrs	r3, r2
 8001ef0:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001ef2:	e05f      	b.n	8001fb4 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	69db      	ldr	r3, [r3, #28]
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d042      	beq.n	8001f82 <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8001efc:	4b77      	ldr	r3, [pc, #476]	; (80020dc <HAL_RCC_OscConfig+0x520>)
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	4a76      	ldr	r2, [pc, #472]	; (80020dc <HAL_RCC_OscConfig+0x520>)
 8001f02:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001f06:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f08:	f7ff f93c 	bl	8001184 <HAL_GetTick>
 8001f0c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001f0e:	e008      	b.n	8001f22 <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8001f10:	f7ff f938 	bl	8001184 <HAL_GetTick>
 8001f14:	4602      	mov	r2, r0
 8001f16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f18:	1ad3      	subs	r3, r2, r3
 8001f1a:	2b02      	cmp	r3, #2
 8001f1c:	d901      	bls.n	8001f22 <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 8001f1e:	2303      	movs	r3, #3
 8001f20:	e255      	b.n	80023ce <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001f22:	4b6e      	ldr	r3, [pc, #440]	; (80020dc <HAL_RCC_OscConfig+0x520>)
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d0f0      	beq.n	8001f10 <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001f2e:	f7ff f959 	bl	80011e4 <HAL_GetREVID>
 8001f32:	4603      	mov	r3, r0
 8001f34:	f241 0203 	movw	r2, #4099	; 0x1003
 8001f38:	4293      	cmp	r3, r2
 8001f3a:	d817      	bhi.n	8001f6c <HAL_RCC_OscConfig+0x3b0>
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	6a1b      	ldr	r3, [r3, #32]
 8001f40:	2b20      	cmp	r3, #32
 8001f42:	d108      	bne.n	8001f56 <HAL_RCC_OscConfig+0x39a>
 8001f44:	4b65      	ldr	r3, [pc, #404]	; (80020dc <HAL_RCC_OscConfig+0x520>)
 8001f46:	685b      	ldr	r3, [r3, #4]
 8001f48:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8001f4c:	4a63      	ldr	r2, [pc, #396]	; (80020dc <HAL_RCC_OscConfig+0x520>)
 8001f4e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001f52:	6053      	str	r3, [r2, #4]
 8001f54:	e02e      	b.n	8001fb4 <HAL_RCC_OscConfig+0x3f8>
 8001f56:	4b61      	ldr	r3, [pc, #388]	; (80020dc <HAL_RCC_OscConfig+0x520>)
 8001f58:	685b      	ldr	r3, [r3, #4]
 8001f5a:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	6a1b      	ldr	r3, [r3, #32]
 8001f62:	069b      	lsls	r3, r3, #26
 8001f64:	495d      	ldr	r1, [pc, #372]	; (80020dc <HAL_RCC_OscConfig+0x520>)
 8001f66:	4313      	orrs	r3, r2
 8001f68:	604b      	str	r3, [r1, #4]
 8001f6a:	e023      	b.n	8001fb4 <HAL_RCC_OscConfig+0x3f8>
 8001f6c:	4b5b      	ldr	r3, [pc, #364]	; (80020dc <HAL_RCC_OscConfig+0x520>)
 8001f6e:	68db      	ldr	r3, [r3, #12]
 8001f70:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	6a1b      	ldr	r3, [r3, #32]
 8001f78:	061b      	lsls	r3, r3, #24
 8001f7a:	4958      	ldr	r1, [pc, #352]	; (80020dc <HAL_RCC_OscConfig+0x520>)
 8001f7c:	4313      	orrs	r3, r2
 8001f7e:	60cb      	str	r3, [r1, #12]
 8001f80:	e018      	b.n	8001fb4 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8001f82:	4b56      	ldr	r3, [pc, #344]	; (80020dc <HAL_RCC_OscConfig+0x520>)
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	4a55      	ldr	r2, [pc, #340]	; (80020dc <HAL_RCC_OscConfig+0x520>)
 8001f88:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001f8c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f8e:	f7ff f8f9 	bl	8001184 <HAL_GetTick>
 8001f92:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001f94:	e008      	b.n	8001fa8 <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8001f96:	f7ff f8f5 	bl	8001184 <HAL_GetTick>
 8001f9a:	4602      	mov	r2, r0
 8001f9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f9e:	1ad3      	subs	r3, r2, r3
 8001fa0:	2b02      	cmp	r3, #2
 8001fa2:	d901      	bls.n	8001fa8 <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 8001fa4:	2303      	movs	r3, #3
 8001fa6:	e212      	b.n	80023ce <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001fa8:	4b4c      	ldr	r3, [pc, #304]	; (80020dc <HAL_RCC_OscConfig+0x520>)
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d1f0      	bne.n	8001f96 <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f003 0308 	and.w	r3, r3, #8
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d036      	beq.n	800202e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	695b      	ldr	r3, [r3, #20]
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d019      	beq.n	8001ffc <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001fc8:	4b44      	ldr	r3, [pc, #272]	; (80020dc <HAL_RCC_OscConfig+0x520>)
 8001fca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001fcc:	4a43      	ldr	r2, [pc, #268]	; (80020dc <HAL_RCC_OscConfig+0x520>)
 8001fce:	f043 0301 	orr.w	r3, r3, #1
 8001fd2:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fd4:	f7ff f8d6 	bl	8001184 <HAL_GetTick>
 8001fd8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001fda:	e008      	b.n	8001fee <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001fdc:	f7ff f8d2 	bl	8001184 <HAL_GetTick>
 8001fe0:	4602      	mov	r2, r0
 8001fe2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fe4:	1ad3      	subs	r3, r2, r3
 8001fe6:	2b02      	cmp	r3, #2
 8001fe8:	d901      	bls.n	8001fee <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 8001fea:	2303      	movs	r3, #3
 8001fec:	e1ef      	b.n	80023ce <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001fee:	4b3b      	ldr	r3, [pc, #236]	; (80020dc <HAL_RCC_OscConfig+0x520>)
 8001ff0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001ff2:	f003 0302 	and.w	r3, r3, #2
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d0f0      	beq.n	8001fdc <HAL_RCC_OscConfig+0x420>
 8001ffa:	e018      	b.n	800202e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001ffc:	4b37      	ldr	r3, [pc, #220]	; (80020dc <HAL_RCC_OscConfig+0x520>)
 8001ffe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002000:	4a36      	ldr	r2, [pc, #216]	; (80020dc <HAL_RCC_OscConfig+0x520>)
 8002002:	f023 0301 	bic.w	r3, r3, #1
 8002006:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002008:	f7ff f8bc 	bl	8001184 <HAL_GetTick>
 800200c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800200e:	e008      	b.n	8002022 <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002010:	f7ff f8b8 	bl	8001184 <HAL_GetTick>
 8002014:	4602      	mov	r2, r0
 8002016:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002018:	1ad3      	subs	r3, r2, r3
 800201a:	2b02      	cmp	r3, #2
 800201c:	d901      	bls.n	8002022 <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 800201e:	2303      	movs	r3, #3
 8002020:	e1d5      	b.n	80023ce <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002022:	4b2e      	ldr	r3, [pc, #184]	; (80020dc <HAL_RCC_OscConfig+0x520>)
 8002024:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002026:	f003 0302 	and.w	r3, r3, #2
 800202a:	2b00      	cmp	r3, #0
 800202c:	d1f0      	bne.n	8002010 <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	f003 0320 	and.w	r3, r3, #32
 8002036:	2b00      	cmp	r3, #0
 8002038:	d036      	beq.n	80020a8 <HAL_RCC_OscConfig+0x4ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	699b      	ldr	r3, [r3, #24]
 800203e:	2b00      	cmp	r3, #0
 8002040:	d019      	beq.n	8002076 <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002042:	4b26      	ldr	r3, [pc, #152]	; (80020dc <HAL_RCC_OscConfig+0x520>)
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	4a25      	ldr	r2, [pc, #148]	; (80020dc <HAL_RCC_OscConfig+0x520>)
 8002048:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800204c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800204e:	f7ff f899 	bl	8001184 <HAL_GetTick>
 8002052:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002054:	e008      	b.n	8002068 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8002056:	f7ff f895 	bl	8001184 <HAL_GetTick>
 800205a:	4602      	mov	r2, r0
 800205c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800205e:	1ad3      	subs	r3, r2, r3
 8002060:	2b02      	cmp	r3, #2
 8002062:	d901      	bls.n	8002068 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 8002064:	2303      	movs	r3, #3
 8002066:	e1b2      	b.n	80023ce <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002068:	4b1c      	ldr	r3, [pc, #112]	; (80020dc <HAL_RCC_OscConfig+0x520>)
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002070:	2b00      	cmp	r3, #0
 8002072:	d0f0      	beq.n	8002056 <HAL_RCC_OscConfig+0x49a>
 8002074:	e018      	b.n	80020a8 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002076:	4b19      	ldr	r3, [pc, #100]	; (80020dc <HAL_RCC_OscConfig+0x520>)
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	4a18      	ldr	r2, [pc, #96]	; (80020dc <HAL_RCC_OscConfig+0x520>)
 800207c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002080:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002082:	f7ff f87f 	bl	8001184 <HAL_GetTick>
 8002086:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002088:	e008      	b.n	800209c <HAL_RCC_OscConfig+0x4e0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800208a:	f7ff f87b 	bl	8001184 <HAL_GetTick>
 800208e:	4602      	mov	r2, r0
 8002090:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002092:	1ad3      	subs	r3, r2, r3
 8002094:	2b02      	cmp	r3, #2
 8002096:	d901      	bls.n	800209c <HAL_RCC_OscConfig+0x4e0>
        {
          return HAL_TIMEOUT;
 8002098:	2303      	movs	r3, #3
 800209a:	e198      	b.n	80023ce <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800209c:	4b0f      	ldr	r3, [pc, #60]	; (80020dc <HAL_RCC_OscConfig+0x520>)
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d1f0      	bne.n	800208a <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f003 0304 	and.w	r3, r3, #4
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	f000 8085 	beq.w	80021c0 <HAL_RCC_OscConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80020b6:	4b0a      	ldr	r3, [pc, #40]	; (80020e0 <HAL_RCC_OscConfig+0x524>)
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	4a09      	ldr	r2, [pc, #36]	; (80020e0 <HAL_RCC_OscConfig+0x524>)
 80020bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020c0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80020c2:	f7ff f85f 	bl	8001184 <HAL_GetTick>
 80020c6:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80020c8:	e00c      	b.n	80020e4 <HAL_RCC_OscConfig+0x528>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80020ca:	f7ff f85b 	bl	8001184 <HAL_GetTick>
 80020ce:	4602      	mov	r2, r0
 80020d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020d2:	1ad3      	subs	r3, r2, r3
 80020d4:	2b64      	cmp	r3, #100	; 0x64
 80020d6:	d905      	bls.n	80020e4 <HAL_RCC_OscConfig+0x528>
      {
        return HAL_TIMEOUT;
 80020d8:	2303      	movs	r3, #3
 80020da:	e178      	b.n	80023ce <HAL_RCC_OscConfig+0x812>
 80020dc:	58024400 	.word	0x58024400
 80020e0:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80020e4:	4b96      	ldr	r3, [pc, #600]	; (8002340 <HAL_RCC_OscConfig+0x784>)
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d0ec      	beq.n	80020ca <HAL_RCC_OscConfig+0x50e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	689b      	ldr	r3, [r3, #8]
 80020f4:	2b01      	cmp	r3, #1
 80020f6:	d106      	bne.n	8002106 <HAL_RCC_OscConfig+0x54a>
 80020f8:	4b92      	ldr	r3, [pc, #584]	; (8002344 <HAL_RCC_OscConfig+0x788>)
 80020fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020fc:	4a91      	ldr	r2, [pc, #580]	; (8002344 <HAL_RCC_OscConfig+0x788>)
 80020fe:	f043 0301 	orr.w	r3, r3, #1
 8002102:	6713      	str	r3, [r2, #112]	; 0x70
 8002104:	e02d      	b.n	8002162 <HAL_RCC_OscConfig+0x5a6>
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	689b      	ldr	r3, [r3, #8]
 800210a:	2b00      	cmp	r3, #0
 800210c:	d10c      	bne.n	8002128 <HAL_RCC_OscConfig+0x56c>
 800210e:	4b8d      	ldr	r3, [pc, #564]	; (8002344 <HAL_RCC_OscConfig+0x788>)
 8002110:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002112:	4a8c      	ldr	r2, [pc, #560]	; (8002344 <HAL_RCC_OscConfig+0x788>)
 8002114:	f023 0301 	bic.w	r3, r3, #1
 8002118:	6713      	str	r3, [r2, #112]	; 0x70
 800211a:	4b8a      	ldr	r3, [pc, #552]	; (8002344 <HAL_RCC_OscConfig+0x788>)
 800211c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800211e:	4a89      	ldr	r2, [pc, #548]	; (8002344 <HAL_RCC_OscConfig+0x788>)
 8002120:	f023 0304 	bic.w	r3, r3, #4
 8002124:	6713      	str	r3, [r2, #112]	; 0x70
 8002126:	e01c      	b.n	8002162 <HAL_RCC_OscConfig+0x5a6>
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	689b      	ldr	r3, [r3, #8]
 800212c:	2b05      	cmp	r3, #5
 800212e:	d10c      	bne.n	800214a <HAL_RCC_OscConfig+0x58e>
 8002130:	4b84      	ldr	r3, [pc, #528]	; (8002344 <HAL_RCC_OscConfig+0x788>)
 8002132:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002134:	4a83      	ldr	r2, [pc, #524]	; (8002344 <HAL_RCC_OscConfig+0x788>)
 8002136:	f043 0304 	orr.w	r3, r3, #4
 800213a:	6713      	str	r3, [r2, #112]	; 0x70
 800213c:	4b81      	ldr	r3, [pc, #516]	; (8002344 <HAL_RCC_OscConfig+0x788>)
 800213e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002140:	4a80      	ldr	r2, [pc, #512]	; (8002344 <HAL_RCC_OscConfig+0x788>)
 8002142:	f043 0301 	orr.w	r3, r3, #1
 8002146:	6713      	str	r3, [r2, #112]	; 0x70
 8002148:	e00b      	b.n	8002162 <HAL_RCC_OscConfig+0x5a6>
 800214a:	4b7e      	ldr	r3, [pc, #504]	; (8002344 <HAL_RCC_OscConfig+0x788>)
 800214c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800214e:	4a7d      	ldr	r2, [pc, #500]	; (8002344 <HAL_RCC_OscConfig+0x788>)
 8002150:	f023 0301 	bic.w	r3, r3, #1
 8002154:	6713      	str	r3, [r2, #112]	; 0x70
 8002156:	4b7b      	ldr	r3, [pc, #492]	; (8002344 <HAL_RCC_OscConfig+0x788>)
 8002158:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800215a:	4a7a      	ldr	r2, [pc, #488]	; (8002344 <HAL_RCC_OscConfig+0x788>)
 800215c:	f023 0304 	bic.w	r3, r3, #4
 8002160:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	689b      	ldr	r3, [r3, #8]
 8002166:	2b00      	cmp	r3, #0
 8002168:	d015      	beq.n	8002196 <HAL_RCC_OscConfig+0x5da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800216a:	f7ff f80b 	bl	8001184 <HAL_GetTick>
 800216e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002170:	e00a      	b.n	8002188 <HAL_RCC_OscConfig+0x5cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002172:	f7ff f807 	bl	8001184 <HAL_GetTick>
 8002176:	4602      	mov	r2, r0
 8002178:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800217a:	1ad3      	subs	r3, r2, r3
 800217c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002180:	4293      	cmp	r3, r2
 8002182:	d901      	bls.n	8002188 <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 8002184:	2303      	movs	r3, #3
 8002186:	e122      	b.n	80023ce <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002188:	4b6e      	ldr	r3, [pc, #440]	; (8002344 <HAL_RCC_OscConfig+0x788>)
 800218a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800218c:	f003 0302 	and.w	r3, r3, #2
 8002190:	2b00      	cmp	r3, #0
 8002192:	d0ee      	beq.n	8002172 <HAL_RCC_OscConfig+0x5b6>
 8002194:	e014      	b.n	80021c0 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002196:	f7fe fff5 	bl	8001184 <HAL_GetTick>
 800219a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800219c:	e00a      	b.n	80021b4 <HAL_RCC_OscConfig+0x5f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800219e:	f7fe fff1 	bl	8001184 <HAL_GetTick>
 80021a2:	4602      	mov	r2, r0
 80021a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021a6:	1ad3      	subs	r3, r2, r3
 80021a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80021ac:	4293      	cmp	r3, r2
 80021ae:	d901      	bls.n	80021b4 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_TIMEOUT;
 80021b0:	2303      	movs	r3, #3
 80021b2:	e10c      	b.n	80023ce <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80021b4:	4b63      	ldr	r3, [pc, #396]	; (8002344 <HAL_RCC_OscConfig+0x788>)
 80021b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021b8:	f003 0302 	and.w	r3, r3, #2
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d1ee      	bne.n	800219e <HAL_RCC_OscConfig+0x5e2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	f000 8101 	beq.w	80023cc <HAL_RCC_OscConfig+0x810>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80021ca:	4b5e      	ldr	r3, [pc, #376]	; (8002344 <HAL_RCC_OscConfig+0x788>)
 80021cc:	691b      	ldr	r3, [r3, #16]
 80021ce:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80021d2:	2b18      	cmp	r3, #24
 80021d4:	f000 80bc 	beq.w	8002350 <HAL_RCC_OscConfig+0x794>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021dc:	2b02      	cmp	r3, #2
 80021de:	f040 8095 	bne.w	800230c <HAL_RCC_OscConfig+0x750>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021e2:	4b58      	ldr	r3, [pc, #352]	; (8002344 <HAL_RCC_OscConfig+0x788>)
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	4a57      	ldr	r2, [pc, #348]	; (8002344 <HAL_RCC_OscConfig+0x788>)
 80021e8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80021ec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021ee:	f7fe ffc9 	bl	8001184 <HAL_GetTick>
 80021f2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80021f4:	e008      	b.n	8002208 <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80021f6:	f7fe ffc5 	bl	8001184 <HAL_GetTick>
 80021fa:	4602      	mov	r2, r0
 80021fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021fe:	1ad3      	subs	r3, r2, r3
 8002200:	2b02      	cmp	r3, #2
 8002202:	d901      	bls.n	8002208 <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 8002204:	2303      	movs	r3, #3
 8002206:	e0e2      	b.n	80023ce <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002208:	4b4e      	ldr	r3, [pc, #312]	; (8002344 <HAL_RCC_OscConfig+0x788>)
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002210:	2b00      	cmp	r3, #0
 8002212:	d1f0      	bne.n	80021f6 <HAL_RCC_OscConfig+0x63a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002214:	4b4b      	ldr	r3, [pc, #300]	; (8002344 <HAL_RCC_OscConfig+0x788>)
 8002216:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002218:	4b4b      	ldr	r3, [pc, #300]	; (8002348 <HAL_RCC_OscConfig+0x78c>)
 800221a:	4013      	ands	r3, r2
 800221c:	687a      	ldr	r2, [r7, #4]
 800221e:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8002220:	687a      	ldr	r2, [r7, #4]
 8002222:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002224:	0112      	lsls	r2, r2, #4
 8002226:	430a      	orrs	r2, r1
 8002228:	4946      	ldr	r1, [pc, #280]	; (8002344 <HAL_RCC_OscConfig+0x788>)
 800222a:	4313      	orrs	r3, r2
 800222c:	628b      	str	r3, [r1, #40]	; 0x28
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002232:	3b01      	subs	r3, #1
 8002234:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800223c:	3b01      	subs	r3, #1
 800223e:	025b      	lsls	r3, r3, #9
 8002240:	b29b      	uxth	r3, r3
 8002242:	431a      	orrs	r2, r3
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002248:	3b01      	subs	r3, #1
 800224a:	041b      	lsls	r3, r3, #16
 800224c:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8002250:	431a      	orrs	r2, r3
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002256:	3b01      	subs	r3, #1
 8002258:	061b      	lsls	r3, r3, #24
 800225a:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800225e:	4939      	ldr	r1, [pc, #228]	; (8002344 <HAL_RCC_OscConfig+0x788>)
 8002260:	4313      	orrs	r3, r2
 8002262:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8002264:	4b37      	ldr	r3, [pc, #220]	; (8002344 <HAL_RCC_OscConfig+0x788>)
 8002266:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002268:	4a36      	ldr	r2, [pc, #216]	; (8002344 <HAL_RCC_OscConfig+0x788>)
 800226a:	f023 0301 	bic.w	r3, r3, #1
 800226e:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002270:	4b34      	ldr	r3, [pc, #208]	; (8002344 <HAL_RCC_OscConfig+0x788>)
 8002272:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002274:	4b35      	ldr	r3, [pc, #212]	; (800234c <HAL_RCC_OscConfig+0x790>)
 8002276:	4013      	ands	r3, r2
 8002278:	687a      	ldr	r2, [r7, #4]
 800227a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800227c:	00d2      	lsls	r2, r2, #3
 800227e:	4931      	ldr	r1, [pc, #196]	; (8002344 <HAL_RCC_OscConfig+0x788>)
 8002280:	4313      	orrs	r3, r2
 8002282:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8002284:	4b2f      	ldr	r3, [pc, #188]	; (8002344 <HAL_RCC_OscConfig+0x788>)
 8002286:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002288:	f023 020c 	bic.w	r2, r3, #12
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002290:	492c      	ldr	r1, [pc, #176]	; (8002344 <HAL_RCC_OscConfig+0x788>)
 8002292:	4313      	orrs	r3, r2
 8002294:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8002296:	4b2b      	ldr	r3, [pc, #172]	; (8002344 <HAL_RCC_OscConfig+0x788>)
 8002298:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800229a:	f023 0202 	bic.w	r2, r3, #2
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022a2:	4928      	ldr	r1, [pc, #160]	; (8002344 <HAL_RCC_OscConfig+0x788>)
 80022a4:	4313      	orrs	r3, r2
 80022a6:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80022a8:	4b26      	ldr	r3, [pc, #152]	; (8002344 <HAL_RCC_OscConfig+0x788>)
 80022aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022ac:	4a25      	ldr	r2, [pc, #148]	; (8002344 <HAL_RCC_OscConfig+0x788>)
 80022ae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022b2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80022b4:	4b23      	ldr	r3, [pc, #140]	; (8002344 <HAL_RCC_OscConfig+0x788>)
 80022b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022b8:	4a22      	ldr	r2, [pc, #136]	; (8002344 <HAL_RCC_OscConfig+0x788>)
 80022ba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80022be:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80022c0:	4b20      	ldr	r3, [pc, #128]	; (8002344 <HAL_RCC_OscConfig+0x788>)
 80022c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022c4:	4a1f      	ldr	r2, [pc, #124]	; (8002344 <HAL_RCC_OscConfig+0x788>)
 80022c6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80022ca:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 80022cc:	4b1d      	ldr	r3, [pc, #116]	; (8002344 <HAL_RCC_OscConfig+0x788>)
 80022ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022d0:	4a1c      	ldr	r2, [pc, #112]	; (8002344 <HAL_RCC_OscConfig+0x788>)
 80022d2:	f043 0301 	orr.w	r3, r3, #1
 80022d6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80022d8:	4b1a      	ldr	r3, [pc, #104]	; (8002344 <HAL_RCC_OscConfig+0x788>)
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	4a19      	ldr	r2, [pc, #100]	; (8002344 <HAL_RCC_OscConfig+0x788>)
 80022de:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80022e2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022e4:	f7fe ff4e 	bl	8001184 <HAL_GetTick>
 80022e8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80022ea:	e008      	b.n	80022fe <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80022ec:	f7fe ff4a 	bl	8001184 <HAL_GetTick>
 80022f0:	4602      	mov	r2, r0
 80022f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022f4:	1ad3      	subs	r3, r2, r3
 80022f6:	2b02      	cmp	r3, #2
 80022f8:	d901      	bls.n	80022fe <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 80022fa:	2303      	movs	r3, #3
 80022fc:	e067      	b.n	80023ce <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80022fe:	4b11      	ldr	r3, [pc, #68]	; (8002344 <HAL_RCC_OscConfig+0x788>)
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002306:	2b00      	cmp	r3, #0
 8002308:	d0f0      	beq.n	80022ec <HAL_RCC_OscConfig+0x730>
 800230a:	e05f      	b.n	80023cc <HAL_RCC_OscConfig+0x810>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800230c:	4b0d      	ldr	r3, [pc, #52]	; (8002344 <HAL_RCC_OscConfig+0x788>)
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	4a0c      	ldr	r2, [pc, #48]	; (8002344 <HAL_RCC_OscConfig+0x788>)
 8002312:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002316:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002318:	f7fe ff34 	bl	8001184 <HAL_GetTick>
 800231c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800231e:	e008      	b.n	8002332 <HAL_RCC_OscConfig+0x776>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002320:	f7fe ff30 	bl	8001184 <HAL_GetTick>
 8002324:	4602      	mov	r2, r0
 8002326:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002328:	1ad3      	subs	r3, r2, r3
 800232a:	2b02      	cmp	r3, #2
 800232c:	d901      	bls.n	8002332 <HAL_RCC_OscConfig+0x776>
          {
            return HAL_TIMEOUT;
 800232e:	2303      	movs	r3, #3
 8002330:	e04d      	b.n	80023ce <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002332:	4b04      	ldr	r3, [pc, #16]	; (8002344 <HAL_RCC_OscConfig+0x788>)
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800233a:	2b00      	cmp	r3, #0
 800233c:	d1f0      	bne.n	8002320 <HAL_RCC_OscConfig+0x764>
 800233e:	e045      	b.n	80023cc <HAL_RCC_OscConfig+0x810>
 8002340:	58024800 	.word	0x58024800
 8002344:	58024400 	.word	0x58024400
 8002348:	fffffc0c 	.word	0xfffffc0c
 800234c:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8002350:	4b21      	ldr	r3, [pc, #132]	; (80023d8 <HAL_RCC_OscConfig+0x81c>)
 8002352:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002354:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002356:	4b20      	ldr	r3, [pc, #128]	; (80023d8 <HAL_RCC_OscConfig+0x81c>)
 8002358:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800235a:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002360:	2b01      	cmp	r3, #1
 8002362:	d031      	beq.n	80023c8 <HAL_RCC_OscConfig+0x80c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002364:	693b      	ldr	r3, [r7, #16]
 8002366:	f003 0203 	and.w	r2, r3, #3
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800236e:	429a      	cmp	r2, r3
 8002370:	d12a      	bne.n	80023c8 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002372:	693b      	ldr	r3, [r7, #16]
 8002374:	091b      	lsrs	r3, r3, #4
 8002376:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800237e:	429a      	cmp	r2, r3
 8002380:	d122      	bne.n	80023c8 <HAL_RCC_OscConfig+0x80c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800238c:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800238e:	429a      	cmp	r2, r3
 8002390:	d11a      	bne.n	80023c8 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	0a5b      	lsrs	r3, r3, #9
 8002396:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800239e:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80023a0:	429a      	cmp	r2, r3
 80023a2:	d111      	bne.n	80023c8 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	0c1b      	lsrs	r3, r3, #16
 80023a8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023b0:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80023b2:	429a      	cmp	r2, r3
 80023b4:	d108      	bne.n	80023c8 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	0e1b      	lsrs	r3, r3, #24
 80023ba:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023c2:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80023c4:	429a      	cmp	r2, r3
 80023c6:	d001      	beq.n	80023cc <HAL_RCC_OscConfig+0x810>
      {
        return HAL_ERROR;
 80023c8:	2301      	movs	r3, #1
 80023ca:	e000      	b.n	80023ce <HAL_RCC_OscConfig+0x812>
      }
    }
  }
  return HAL_OK;
 80023cc:	2300      	movs	r3, #0
}
 80023ce:	4618      	mov	r0, r3
 80023d0:	3730      	adds	r7, #48	; 0x30
 80023d2:	46bd      	mov	sp, r7
 80023d4:	bd80      	pop	{r7, pc}
 80023d6:	bf00      	nop
 80023d8:	58024400 	.word	0x58024400

080023dc <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80023dc:	b580      	push	{r7, lr}
 80023de:	b086      	sub	sp, #24
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	6078      	str	r0, [r7, #4]
 80023e4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d101      	bne.n	80023f0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80023ec:	2301      	movs	r3, #1
 80023ee:	e19c      	b.n	800272a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80023f0:	4b8a      	ldr	r3, [pc, #552]	; (800261c <HAL_RCC_ClockConfig+0x240>)
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f003 030f 	and.w	r3, r3, #15
 80023f8:	683a      	ldr	r2, [r7, #0]
 80023fa:	429a      	cmp	r2, r3
 80023fc:	d910      	bls.n	8002420 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023fe:	4b87      	ldr	r3, [pc, #540]	; (800261c <HAL_RCC_ClockConfig+0x240>)
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f023 020f 	bic.w	r2, r3, #15
 8002406:	4985      	ldr	r1, [pc, #532]	; (800261c <HAL_RCC_ClockConfig+0x240>)
 8002408:	683b      	ldr	r3, [r7, #0]
 800240a:	4313      	orrs	r3, r2
 800240c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800240e:	4b83      	ldr	r3, [pc, #524]	; (800261c <HAL_RCC_ClockConfig+0x240>)
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f003 030f 	and.w	r3, r3, #15
 8002416:	683a      	ldr	r2, [r7, #0]
 8002418:	429a      	cmp	r2, r3
 800241a:	d001      	beq.n	8002420 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800241c:	2301      	movs	r3, #1
 800241e:	e184      	b.n	800272a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f003 0304 	and.w	r3, r3, #4
 8002428:	2b00      	cmp	r3, #0
 800242a:	d010      	beq.n	800244e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	691a      	ldr	r2, [r3, #16]
 8002430:	4b7b      	ldr	r3, [pc, #492]	; (8002620 <HAL_RCC_ClockConfig+0x244>)
 8002432:	699b      	ldr	r3, [r3, #24]
 8002434:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002438:	429a      	cmp	r2, r3
 800243a:	d908      	bls.n	800244e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800243c:	4b78      	ldr	r3, [pc, #480]	; (8002620 <HAL_RCC_ClockConfig+0x244>)
 800243e:	699b      	ldr	r3, [r3, #24]
 8002440:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	691b      	ldr	r3, [r3, #16]
 8002448:	4975      	ldr	r1, [pc, #468]	; (8002620 <HAL_RCC_ClockConfig+0x244>)
 800244a:	4313      	orrs	r3, r2
 800244c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f003 0308 	and.w	r3, r3, #8
 8002456:	2b00      	cmp	r3, #0
 8002458:	d010      	beq.n	800247c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	695a      	ldr	r2, [r3, #20]
 800245e:	4b70      	ldr	r3, [pc, #448]	; (8002620 <HAL_RCC_ClockConfig+0x244>)
 8002460:	69db      	ldr	r3, [r3, #28]
 8002462:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002466:	429a      	cmp	r2, r3
 8002468:	d908      	bls.n	800247c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800246a:	4b6d      	ldr	r3, [pc, #436]	; (8002620 <HAL_RCC_ClockConfig+0x244>)
 800246c:	69db      	ldr	r3, [r3, #28]
 800246e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	695b      	ldr	r3, [r3, #20]
 8002476:	496a      	ldr	r1, [pc, #424]	; (8002620 <HAL_RCC_ClockConfig+0x244>)
 8002478:	4313      	orrs	r3, r2
 800247a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f003 0310 	and.w	r3, r3, #16
 8002484:	2b00      	cmp	r3, #0
 8002486:	d010      	beq.n	80024aa <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	699a      	ldr	r2, [r3, #24]
 800248c:	4b64      	ldr	r3, [pc, #400]	; (8002620 <HAL_RCC_ClockConfig+0x244>)
 800248e:	69db      	ldr	r3, [r3, #28]
 8002490:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002494:	429a      	cmp	r2, r3
 8002496:	d908      	bls.n	80024aa <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002498:	4b61      	ldr	r3, [pc, #388]	; (8002620 <HAL_RCC_ClockConfig+0x244>)
 800249a:	69db      	ldr	r3, [r3, #28]
 800249c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	699b      	ldr	r3, [r3, #24]
 80024a4:	495e      	ldr	r1, [pc, #376]	; (8002620 <HAL_RCC_ClockConfig+0x244>)
 80024a6:	4313      	orrs	r3, r2
 80024a8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f003 0320 	and.w	r3, r3, #32
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d010      	beq.n	80024d8 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	69da      	ldr	r2, [r3, #28]
 80024ba:	4b59      	ldr	r3, [pc, #356]	; (8002620 <HAL_RCC_ClockConfig+0x244>)
 80024bc:	6a1b      	ldr	r3, [r3, #32]
 80024be:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80024c2:	429a      	cmp	r2, r3
 80024c4:	d908      	bls.n	80024d8 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80024c6:	4b56      	ldr	r3, [pc, #344]	; (8002620 <HAL_RCC_ClockConfig+0x244>)
 80024c8:	6a1b      	ldr	r3, [r3, #32]
 80024ca:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	69db      	ldr	r3, [r3, #28]
 80024d2:	4953      	ldr	r1, [pc, #332]	; (8002620 <HAL_RCC_ClockConfig+0x244>)
 80024d4:	4313      	orrs	r3, r2
 80024d6:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f003 0302 	and.w	r3, r3, #2
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d010      	beq.n	8002506 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	68da      	ldr	r2, [r3, #12]
 80024e8:	4b4d      	ldr	r3, [pc, #308]	; (8002620 <HAL_RCC_ClockConfig+0x244>)
 80024ea:	699b      	ldr	r3, [r3, #24]
 80024ec:	f003 030f 	and.w	r3, r3, #15
 80024f0:	429a      	cmp	r2, r3
 80024f2:	d908      	bls.n	8002506 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80024f4:	4b4a      	ldr	r3, [pc, #296]	; (8002620 <HAL_RCC_ClockConfig+0x244>)
 80024f6:	699b      	ldr	r3, [r3, #24]
 80024f8:	f023 020f 	bic.w	r2, r3, #15
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	68db      	ldr	r3, [r3, #12]
 8002500:	4947      	ldr	r1, [pc, #284]	; (8002620 <HAL_RCC_ClockConfig+0x244>)
 8002502:	4313      	orrs	r3, r2
 8002504:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f003 0301 	and.w	r3, r3, #1
 800250e:	2b00      	cmp	r3, #0
 8002510:	d055      	beq.n	80025be <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8002512:	4b43      	ldr	r3, [pc, #268]	; (8002620 <HAL_RCC_ClockConfig+0x244>)
 8002514:	699b      	ldr	r3, [r3, #24]
 8002516:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	689b      	ldr	r3, [r3, #8]
 800251e:	4940      	ldr	r1, [pc, #256]	; (8002620 <HAL_RCC_ClockConfig+0x244>)
 8002520:	4313      	orrs	r3, r2
 8002522:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	685b      	ldr	r3, [r3, #4]
 8002528:	2b02      	cmp	r3, #2
 800252a:	d107      	bne.n	800253c <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800252c:	4b3c      	ldr	r3, [pc, #240]	; (8002620 <HAL_RCC_ClockConfig+0x244>)
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002534:	2b00      	cmp	r3, #0
 8002536:	d121      	bne.n	800257c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002538:	2301      	movs	r3, #1
 800253a:	e0f6      	b.n	800272a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	685b      	ldr	r3, [r3, #4]
 8002540:	2b03      	cmp	r3, #3
 8002542:	d107      	bne.n	8002554 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002544:	4b36      	ldr	r3, [pc, #216]	; (8002620 <HAL_RCC_ClockConfig+0x244>)
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800254c:	2b00      	cmp	r3, #0
 800254e:	d115      	bne.n	800257c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002550:	2301      	movs	r3, #1
 8002552:	e0ea      	b.n	800272a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	685b      	ldr	r3, [r3, #4]
 8002558:	2b01      	cmp	r3, #1
 800255a:	d107      	bne.n	800256c <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800255c:	4b30      	ldr	r3, [pc, #192]	; (8002620 <HAL_RCC_ClockConfig+0x244>)
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002564:	2b00      	cmp	r3, #0
 8002566:	d109      	bne.n	800257c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002568:	2301      	movs	r3, #1
 800256a:	e0de      	b.n	800272a <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800256c:	4b2c      	ldr	r3, [pc, #176]	; (8002620 <HAL_RCC_ClockConfig+0x244>)
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f003 0304 	and.w	r3, r3, #4
 8002574:	2b00      	cmp	r3, #0
 8002576:	d101      	bne.n	800257c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002578:	2301      	movs	r3, #1
 800257a:	e0d6      	b.n	800272a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800257c:	4b28      	ldr	r3, [pc, #160]	; (8002620 <HAL_RCC_ClockConfig+0x244>)
 800257e:	691b      	ldr	r3, [r3, #16]
 8002580:	f023 0207 	bic.w	r2, r3, #7
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	685b      	ldr	r3, [r3, #4]
 8002588:	4925      	ldr	r1, [pc, #148]	; (8002620 <HAL_RCC_ClockConfig+0x244>)
 800258a:	4313      	orrs	r3, r2
 800258c:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800258e:	f7fe fdf9 	bl	8001184 <HAL_GetTick>
 8002592:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002594:	e00a      	b.n	80025ac <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002596:	f7fe fdf5 	bl	8001184 <HAL_GetTick>
 800259a:	4602      	mov	r2, r0
 800259c:	697b      	ldr	r3, [r7, #20]
 800259e:	1ad3      	subs	r3, r2, r3
 80025a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80025a4:	4293      	cmp	r3, r2
 80025a6:	d901      	bls.n	80025ac <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80025a8:	2303      	movs	r3, #3
 80025aa:	e0be      	b.n	800272a <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025ac:	4b1c      	ldr	r3, [pc, #112]	; (8002620 <HAL_RCC_ClockConfig+0x244>)
 80025ae:	691b      	ldr	r3, [r3, #16]
 80025b0:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	685b      	ldr	r3, [r3, #4]
 80025b8:	00db      	lsls	r3, r3, #3
 80025ba:	429a      	cmp	r2, r3
 80025bc:	d1eb      	bne.n	8002596 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f003 0302 	and.w	r3, r3, #2
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d010      	beq.n	80025ec <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	68da      	ldr	r2, [r3, #12]
 80025ce:	4b14      	ldr	r3, [pc, #80]	; (8002620 <HAL_RCC_ClockConfig+0x244>)
 80025d0:	699b      	ldr	r3, [r3, #24]
 80025d2:	f003 030f 	and.w	r3, r3, #15
 80025d6:	429a      	cmp	r2, r3
 80025d8:	d208      	bcs.n	80025ec <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80025da:	4b11      	ldr	r3, [pc, #68]	; (8002620 <HAL_RCC_ClockConfig+0x244>)
 80025dc:	699b      	ldr	r3, [r3, #24]
 80025de:	f023 020f 	bic.w	r2, r3, #15
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	68db      	ldr	r3, [r3, #12]
 80025e6:	490e      	ldr	r1, [pc, #56]	; (8002620 <HAL_RCC_ClockConfig+0x244>)
 80025e8:	4313      	orrs	r3, r2
 80025ea:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80025ec:	4b0b      	ldr	r3, [pc, #44]	; (800261c <HAL_RCC_ClockConfig+0x240>)
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	f003 030f 	and.w	r3, r3, #15
 80025f4:	683a      	ldr	r2, [r7, #0]
 80025f6:	429a      	cmp	r2, r3
 80025f8:	d214      	bcs.n	8002624 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025fa:	4b08      	ldr	r3, [pc, #32]	; (800261c <HAL_RCC_ClockConfig+0x240>)
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f023 020f 	bic.w	r2, r3, #15
 8002602:	4906      	ldr	r1, [pc, #24]	; (800261c <HAL_RCC_ClockConfig+0x240>)
 8002604:	683b      	ldr	r3, [r7, #0]
 8002606:	4313      	orrs	r3, r2
 8002608:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800260a:	4b04      	ldr	r3, [pc, #16]	; (800261c <HAL_RCC_ClockConfig+0x240>)
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f003 030f 	and.w	r3, r3, #15
 8002612:	683a      	ldr	r2, [r7, #0]
 8002614:	429a      	cmp	r2, r3
 8002616:	d005      	beq.n	8002624 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8002618:	2301      	movs	r3, #1
 800261a:	e086      	b.n	800272a <HAL_RCC_ClockConfig+0x34e>
 800261c:	52002000 	.word	0x52002000
 8002620:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	f003 0304 	and.w	r3, r3, #4
 800262c:	2b00      	cmp	r3, #0
 800262e:	d010      	beq.n	8002652 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	691a      	ldr	r2, [r3, #16]
 8002634:	4b3f      	ldr	r3, [pc, #252]	; (8002734 <HAL_RCC_ClockConfig+0x358>)
 8002636:	699b      	ldr	r3, [r3, #24]
 8002638:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800263c:	429a      	cmp	r2, r3
 800263e:	d208      	bcs.n	8002652 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002640:	4b3c      	ldr	r3, [pc, #240]	; (8002734 <HAL_RCC_ClockConfig+0x358>)
 8002642:	699b      	ldr	r3, [r3, #24]
 8002644:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	691b      	ldr	r3, [r3, #16]
 800264c:	4939      	ldr	r1, [pc, #228]	; (8002734 <HAL_RCC_ClockConfig+0x358>)
 800264e:	4313      	orrs	r3, r2
 8002650:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f003 0308 	and.w	r3, r3, #8
 800265a:	2b00      	cmp	r3, #0
 800265c:	d010      	beq.n	8002680 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	695a      	ldr	r2, [r3, #20]
 8002662:	4b34      	ldr	r3, [pc, #208]	; (8002734 <HAL_RCC_ClockConfig+0x358>)
 8002664:	69db      	ldr	r3, [r3, #28]
 8002666:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800266a:	429a      	cmp	r2, r3
 800266c:	d208      	bcs.n	8002680 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800266e:	4b31      	ldr	r3, [pc, #196]	; (8002734 <HAL_RCC_ClockConfig+0x358>)
 8002670:	69db      	ldr	r3, [r3, #28]
 8002672:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	695b      	ldr	r3, [r3, #20]
 800267a:	492e      	ldr	r1, [pc, #184]	; (8002734 <HAL_RCC_ClockConfig+0x358>)
 800267c:	4313      	orrs	r3, r2
 800267e:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f003 0310 	and.w	r3, r3, #16
 8002688:	2b00      	cmp	r3, #0
 800268a:	d010      	beq.n	80026ae <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	699a      	ldr	r2, [r3, #24]
 8002690:	4b28      	ldr	r3, [pc, #160]	; (8002734 <HAL_RCC_ClockConfig+0x358>)
 8002692:	69db      	ldr	r3, [r3, #28]
 8002694:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002698:	429a      	cmp	r2, r3
 800269a:	d208      	bcs.n	80026ae <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800269c:	4b25      	ldr	r3, [pc, #148]	; (8002734 <HAL_RCC_ClockConfig+0x358>)
 800269e:	69db      	ldr	r3, [r3, #28]
 80026a0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	699b      	ldr	r3, [r3, #24]
 80026a8:	4922      	ldr	r1, [pc, #136]	; (8002734 <HAL_RCC_ClockConfig+0x358>)
 80026aa:	4313      	orrs	r3, r2
 80026ac:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f003 0320 	and.w	r3, r3, #32
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d010      	beq.n	80026dc <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	69da      	ldr	r2, [r3, #28]
 80026be:	4b1d      	ldr	r3, [pc, #116]	; (8002734 <HAL_RCC_ClockConfig+0x358>)
 80026c0:	6a1b      	ldr	r3, [r3, #32]
 80026c2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80026c6:	429a      	cmp	r2, r3
 80026c8:	d208      	bcs.n	80026dc <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80026ca:	4b1a      	ldr	r3, [pc, #104]	; (8002734 <HAL_RCC_ClockConfig+0x358>)
 80026cc:	6a1b      	ldr	r3, [r3, #32]
 80026ce:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	69db      	ldr	r3, [r3, #28]
 80026d6:	4917      	ldr	r1, [pc, #92]	; (8002734 <HAL_RCC_ClockConfig+0x358>)
 80026d8:	4313      	orrs	r3, r2
 80026da:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80026dc:	f000 f834 	bl	8002748 <HAL_RCC_GetSysClockFreq>
 80026e0:	4602      	mov	r2, r0
 80026e2:	4b14      	ldr	r3, [pc, #80]	; (8002734 <HAL_RCC_ClockConfig+0x358>)
 80026e4:	699b      	ldr	r3, [r3, #24]
 80026e6:	0a1b      	lsrs	r3, r3, #8
 80026e8:	f003 030f 	and.w	r3, r3, #15
 80026ec:	4912      	ldr	r1, [pc, #72]	; (8002738 <HAL_RCC_ClockConfig+0x35c>)
 80026ee:	5ccb      	ldrb	r3, [r1, r3]
 80026f0:	f003 031f 	and.w	r3, r3, #31
 80026f4:	fa22 f303 	lsr.w	r3, r2, r3
 80026f8:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80026fa:	4b0e      	ldr	r3, [pc, #56]	; (8002734 <HAL_RCC_ClockConfig+0x358>)
 80026fc:	699b      	ldr	r3, [r3, #24]
 80026fe:	f003 030f 	and.w	r3, r3, #15
 8002702:	4a0d      	ldr	r2, [pc, #52]	; (8002738 <HAL_RCC_ClockConfig+0x35c>)
 8002704:	5cd3      	ldrb	r3, [r2, r3]
 8002706:	f003 031f 	and.w	r3, r3, #31
 800270a:	693a      	ldr	r2, [r7, #16]
 800270c:	fa22 f303 	lsr.w	r3, r2, r3
 8002710:	4a0a      	ldr	r2, [pc, #40]	; (800273c <HAL_RCC_ClockConfig+0x360>)
 8002712:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002714:	4a0a      	ldr	r2, [pc, #40]	; (8002740 <HAL_RCC_ClockConfig+0x364>)
 8002716:	693b      	ldr	r3, [r7, #16]
 8002718:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 800271a:	4b0a      	ldr	r3, [pc, #40]	; (8002744 <HAL_RCC_ClockConfig+0x368>)
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	4618      	mov	r0, r3
 8002720:	f7fe fce6 	bl	80010f0 <HAL_InitTick>
 8002724:	4603      	mov	r3, r0
 8002726:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8002728:	7bfb      	ldrb	r3, [r7, #15]
}
 800272a:	4618      	mov	r0, r3
 800272c:	3718      	adds	r7, #24
 800272e:	46bd      	mov	sp, r7
 8002730:	bd80      	pop	{r7, pc}
 8002732:	bf00      	nop
 8002734:	58024400 	.word	0x58024400
 8002738:	08007e94 	.word	0x08007e94
 800273c:	24000004 	.word	0x24000004
 8002740:	24000000 	.word	0x24000000
 8002744:	24000008 	.word	0x24000008

08002748 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002748:	b480      	push	{r7}
 800274a:	b089      	sub	sp, #36	; 0x24
 800274c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800274e:	4bb3      	ldr	r3, [pc, #716]	; (8002a1c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002750:	691b      	ldr	r3, [r3, #16]
 8002752:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002756:	2b18      	cmp	r3, #24
 8002758:	f200 8155 	bhi.w	8002a06 <HAL_RCC_GetSysClockFreq+0x2be>
 800275c:	a201      	add	r2, pc, #4	; (adr r2, 8002764 <HAL_RCC_GetSysClockFreq+0x1c>)
 800275e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002762:	bf00      	nop
 8002764:	080027c9 	.word	0x080027c9
 8002768:	08002a07 	.word	0x08002a07
 800276c:	08002a07 	.word	0x08002a07
 8002770:	08002a07 	.word	0x08002a07
 8002774:	08002a07 	.word	0x08002a07
 8002778:	08002a07 	.word	0x08002a07
 800277c:	08002a07 	.word	0x08002a07
 8002780:	08002a07 	.word	0x08002a07
 8002784:	080027ef 	.word	0x080027ef
 8002788:	08002a07 	.word	0x08002a07
 800278c:	08002a07 	.word	0x08002a07
 8002790:	08002a07 	.word	0x08002a07
 8002794:	08002a07 	.word	0x08002a07
 8002798:	08002a07 	.word	0x08002a07
 800279c:	08002a07 	.word	0x08002a07
 80027a0:	08002a07 	.word	0x08002a07
 80027a4:	080027f5 	.word	0x080027f5
 80027a8:	08002a07 	.word	0x08002a07
 80027ac:	08002a07 	.word	0x08002a07
 80027b0:	08002a07 	.word	0x08002a07
 80027b4:	08002a07 	.word	0x08002a07
 80027b8:	08002a07 	.word	0x08002a07
 80027bc:	08002a07 	.word	0x08002a07
 80027c0:	08002a07 	.word	0x08002a07
 80027c4:	080027fb 	.word	0x080027fb
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80027c8:	4b94      	ldr	r3, [pc, #592]	; (8002a1c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	f003 0320 	and.w	r3, r3, #32
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d009      	beq.n	80027e8 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80027d4:	4b91      	ldr	r3, [pc, #580]	; (8002a1c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	08db      	lsrs	r3, r3, #3
 80027da:	f003 0303 	and.w	r3, r3, #3
 80027de:	4a90      	ldr	r2, [pc, #576]	; (8002a20 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80027e0:	fa22 f303 	lsr.w	r3, r2, r3
 80027e4:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 80027e6:	e111      	b.n	8002a0c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80027e8:	4b8d      	ldr	r3, [pc, #564]	; (8002a20 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80027ea:	61bb      	str	r3, [r7, #24]
    break;
 80027ec:	e10e      	b.n	8002a0c <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 80027ee:	4b8d      	ldr	r3, [pc, #564]	; (8002a24 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80027f0:	61bb      	str	r3, [r7, #24]
    break;
 80027f2:	e10b      	b.n	8002a0c <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 80027f4:	4b8c      	ldr	r3, [pc, #560]	; (8002a28 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80027f6:	61bb      	str	r3, [r7, #24]
    break;
 80027f8:	e108      	b.n	8002a0c <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80027fa:	4b88      	ldr	r3, [pc, #544]	; (8002a1c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80027fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027fe:	f003 0303 	and.w	r3, r3, #3
 8002802:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8002804:	4b85      	ldr	r3, [pc, #532]	; (8002a1c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002806:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002808:	091b      	lsrs	r3, r3, #4
 800280a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800280e:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8002810:	4b82      	ldr	r3, [pc, #520]	; (8002a1c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002812:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002814:	f003 0301 	and.w	r3, r3, #1
 8002818:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800281a:	4b80      	ldr	r3, [pc, #512]	; (8002a1c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800281c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800281e:	08db      	lsrs	r3, r3, #3
 8002820:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002824:	68fa      	ldr	r2, [r7, #12]
 8002826:	fb02 f303 	mul.w	r3, r2, r3
 800282a:	ee07 3a90 	vmov	s15, r3
 800282e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002832:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8002836:	693b      	ldr	r3, [r7, #16]
 8002838:	2b00      	cmp	r3, #0
 800283a:	f000 80e1 	beq.w	8002a00 <HAL_RCC_GetSysClockFreq+0x2b8>
 800283e:	697b      	ldr	r3, [r7, #20]
 8002840:	2b02      	cmp	r3, #2
 8002842:	f000 8083 	beq.w	800294c <HAL_RCC_GetSysClockFreq+0x204>
 8002846:	697b      	ldr	r3, [r7, #20]
 8002848:	2b02      	cmp	r3, #2
 800284a:	f200 80a1 	bhi.w	8002990 <HAL_RCC_GetSysClockFreq+0x248>
 800284e:	697b      	ldr	r3, [r7, #20]
 8002850:	2b00      	cmp	r3, #0
 8002852:	d003      	beq.n	800285c <HAL_RCC_GetSysClockFreq+0x114>
 8002854:	697b      	ldr	r3, [r7, #20]
 8002856:	2b01      	cmp	r3, #1
 8002858:	d056      	beq.n	8002908 <HAL_RCC_GetSysClockFreq+0x1c0>
 800285a:	e099      	b.n	8002990 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800285c:	4b6f      	ldr	r3, [pc, #444]	; (8002a1c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	f003 0320 	and.w	r3, r3, #32
 8002864:	2b00      	cmp	r3, #0
 8002866:	d02d      	beq.n	80028c4 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8002868:	4b6c      	ldr	r3, [pc, #432]	; (8002a1c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	08db      	lsrs	r3, r3, #3
 800286e:	f003 0303 	and.w	r3, r3, #3
 8002872:	4a6b      	ldr	r2, [pc, #428]	; (8002a20 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002874:	fa22 f303 	lsr.w	r3, r2, r3
 8002878:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	ee07 3a90 	vmov	s15, r3
 8002880:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002884:	693b      	ldr	r3, [r7, #16]
 8002886:	ee07 3a90 	vmov	s15, r3
 800288a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800288e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002892:	4b62      	ldr	r3, [pc, #392]	; (8002a1c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002896:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800289a:	ee07 3a90 	vmov	s15, r3
 800289e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80028a2:	ed97 6a02 	vldr	s12, [r7, #8]
 80028a6:	eddf 5a61 	vldr	s11, [pc, #388]	; 8002a2c <HAL_RCC_GetSysClockFreq+0x2e4>
 80028aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80028ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80028b2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80028b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80028ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80028be:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 80028c2:	e087      	b.n	80029d4 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80028c4:	693b      	ldr	r3, [r7, #16]
 80028c6:	ee07 3a90 	vmov	s15, r3
 80028ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80028ce:	eddf 6a58 	vldr	s13, [pc, #352]	; 8002a30 <HAL_RCC_GetSysClockFreq+0x2e8>
 80028d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80028d6:	4b51      	ldr	r3, [pc, #324]	; (8002a1c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80028d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80028de:	ee07 3a90 	vmov	s15, r3
 80028e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80028e6:	ed97 6a02 	vldr	s12, [r7, #8]
 80028ea:	eddf 5a50 	vldr	s11, [pc, #320]	; 8002a2c <HAL_RCC_GetSysClockFreq+0x2e4>
 80028ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80028f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80028f6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80028fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80028fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002902:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002906:	e065      	b.n	80029d4 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002908:	693b      	ldr	r3, [r7, #16]
 800290a:	ee07 3a90 	vmov	s15, r3
 800290e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002912:	eddf 6a48 	vldr	s13, [pc, #288]	; 8002a34 <HAL_RCC_GetSysClockFreq+0x2ec>
 8002916:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800291a:	4b40      	ldr	r3, [pc, #256]	; (8002a1c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800291c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800291e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002922:	ee07 3a90 	vmov	s15, r3
 8002926:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800292a:	ed97 6a02 	vldr	s12, [r7, #8]
 800292e:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8002a2c <HAL_RCC_GetSysClockFreq+0x2e4>
 8002932:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002936:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800293a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800293e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002942:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002946:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800294a:	e043      	b.n	80029d4 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800294c:	693b      	ldr	r3, [r7, #16]
 800294e:	ee07 3a90 	vmov	s15, r3
 8002952:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002956:	eddf 6a38 	vldr	s13, [pc, #224]	; 8002a38 <HAL_RCC_GetSysClockFreq+0x2f0>
 800295a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800295e:	4b2f      	ldr	r3, [pc, #188]	; (8002a1c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002962:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002966:	ee07 3a90 	vmov	s15, r3
 800296a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800296e:	ed97 6a02 	vldr	s12, [r7, #8]
 8002972:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8002a2c <HAL_RCC_GetSysClockFreq+0x2e4>
 8002976:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800297a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800297e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002982:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002986:	ee67 7a27 	vmul.f32	s15, s14, s15
 800298a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800298e:	e021      	b.n	80029d4 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002990:	693b      	ldr	r3, [r7, #16]
 8002992:	ee07 3a90 	vmov	s15, r3
 8002996:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800299a:	eddf 6a26 	vldr	s13, [pc, #152]	; 8002a34 <HAL_RCC_GetSysClockFreq+0x2ec>
 800299e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80029a2:	4b1e      	ldr	r3, [pc, #120]	; (8002a1c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80029a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80029aa:	ee07 3a90 	vmov	s15, r3
 80029ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80029b2:	ed97 6a02 	vldr	s12, [r7, #8]
 80029b6:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8002a2c <HAL_RCC_GetSysClockFreq+0x2e4>
 80029ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80029be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80029c2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80029c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80029ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80029ce:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80029d2:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 80029d4:	4b11      	ldr	r3, [pc, #68]	; (8002a1c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80029d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029d8:	0a5b      	lsrs	r3, r3, #9
 80029da:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80029de:	3301      	adds	r3, #1
 80029e0:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 80029e2:	683b      	ldr	r3, [r7, #0]
 80029e4:	ee07 3a90 	vmov	s15, r3
 80029e8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80029ec:	edd7 6a07 	vldr	s13, [r7, #28]
 80029f0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80029f4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80029f8:	ee17 3a90 	vmov	r3, s15
 80029fc:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 80029fe:	e005      	b.n	8002a0c <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8002a00:	2300      	movs	r3, #0
 8002a02:	61bb      	str	r3, [r7, #24]
    break;
 8002a04:	e002      	b.n	8002a0c <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8002a06:	4b07      	ldr	r3, [pc, #28]	; (8002a24 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002a08:	61bb      	str	r3, [r7, #24]
    break;
 8002a0a:	bf00      	nop
  }

  return sysclockfreq;
 8002a0c:	69bb      	ldr	r3, [r7, #24]
}
 8002a0e:	4618      	mov	r0, r3
 8002a10:	3724      	adds	r7, #36	; 0x24
 8002a12:	46bd      	mov	sp, r7
 8002a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a18:	4770      	bx	lr
 8002a1a:	bf00      	nop
 8002a1c:	58024400 	.word	0x58024400
 8002a20:	03d09000 	.word	0x03d09000
 8002a24:	003d0900 	.word	0x003d0900
 8002a28:	0112a880 	.word	0x0112a880
 8002a2c:	46000000 	.word	0x46000000
 8002a30:	4c742400 	.word	0x4c742400
 8002a34:	4a742400 	.word	0x4a742400
 8002a38:	4b895440 	.word	0x4b895440

08002a3c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002a3c:	b580      	push	{r7, lr}
 8002a3e:	b082      	sub	sp, #8
 8002a40:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8002a42:	f7ff fe81 	bl	8002748 <HAL_RCC_GetSysClockFreq>
 8002a46:	4602      	mov	r2, r0
 8002a48:	4b10      	ldr	r3, [pc, #64]	; (8002a8c <HAL_RCC_GetHCLKFreq+0x50>)
 8002a4a:	699b      	ldr	r3, [r3, #24]
 8002a4c:	0a1b      	lsrs	r3, r3, #8
 8002a4e:	f003 030f 	and.w	r3, r3, #15
 8002a52:	490f      	ldr	r1, [pc, #60]	; (8002a90 <HAL_RCC_GetHCLKFreq+0x54>)
 8002a54:	5ccb      	ldrb	r3, [r1, r3]
 8002a56:	f003 031f 	and.w	r3, r3, #31
 8002a5a:	fa22 f303 	lsr.w	r3, r2, r3
 8002a5e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002a60:	4b0a      	ldr	r3, [pc, #40]	; (8002a8c <HAL_RCC_GetHCLKFreq+0x50>)
 8002a62:	699b      	ldr	r3, [r3, #24]
 8002a64:	f003 030f 	and.w	r3, r3, #15
 8002a68:	4a09      	ldr	r2, [pc, #36]	; (8002a90 <HAL_RCC_GetHCLKFreq+0x54>)
 8002a6a:	5cd3      	ldrb	r3, [r2, r3]
 8002a6c:	f003 031f 	and.w	r3, r3, #31
 8002a70:	687a      	ldr	r2, [r7, #4]
 8002a72:	fa22 f303 	lsr.w	r3, r2, r3
 8002a76:	4a07      	ldr	r2, [pc, #28]	; (8002a94 <HAL_RCC_GetHCLKFreq+0x58>)
 8002a78:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002a7a:	4a07      	ldr	r2, [pc, #28]	; (8002a98 <HAL_RCC_GetHCLKFreq+0x5c>)
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8002a80:	4b04      	ldr	r3, [pc, #16]	; (8002a94 <HAL_RCC_GetHCLKFreq+0x58>)
 8002a82:	681b      	ldr	r3, [r3, #0]
}
 8002a84:	4618      	mov	r0, r3
 8002a86:	3708      	adds	r7, #8
 8002a88:	46bd      	mov	sp, r7
 8002a8a:	bd80      	pop	{r7, pc}
 8002a8c:	58024400 	.word	0x58024400
 8002a90:	08007e94 	.word	0x08007e94
 8002a94:	24000004 	.word	0x24000004
 8002a98:	24000000 	.word	0x24000000

08002a9c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002a9c:	b580      	push	{r7, lr}
 8002a9e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8002aa0:	f7ff ffcc 	bl	8002a3c <HAL_RCC_GetHCLKFreq>
 8002aa4:	4602      	mov	r2, r0
 8002aa6:	4b06      	ldr	r3, [pc, #24]	; (8002ac0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002aa8:	69db      	ldr	r3, [r3, #28]
 8002aaa:	091b      	lsrs	r3, r3, #4
 8002aac:	f003 0307 	and.w	r3, r3, #7
 8002ab0:	4904      	ldr	r1, [pc, #16]	; (8002ac4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002ab2:	5ccb      	ldrb	r3, [r1, r3]
 8002ab4:	f003 031f 	and.w	r3, r3, #31
 8002ab8:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8002abc:	4618      	mov	r0, r3
 8002abe:	bd80      	pop	{r7, pc}
 8002ac0:	58024400 	.word	0x58024400
 8002ac4:	08007e94 	.word	0x08007e94

08002ac8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002ac8:	b580      	push	{r7, lr}
 8002aca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8002acc:	f7ff ffb6 	bl	8002a3c <HAL_RCC_GetHCLKFreq>
 8002ad0:	4602      	mov	r2, r0
 8002ad2:	4b06      	ldr	r3, [pc, #24]	; (8002aec <HAL_RCC_GetPCLK2Freq+0x24>)
 8002ad4:	69db      	ldr	r3, [r3, #28]
 8002ad6:	0a1b      	lsrs	r3, r3, #8
 8002ad8:	f003 0307 	and.w	r3, r3, #7
 8002adc:	4904      	ldr	r1, [pc, #16]	; (8002af0 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002ade:	5ccb      	ldrb	r3, [r1, r3]
 8002ae0:	f003 031f 	and.w	r3, r3, #31
 8002ae4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8002ae8:	4618      	mov	r0, r3
 8002aea:	bd80      	pop	{r7, pc}
 8002aec:	58024400 	.word	0x58024400
 8002af0:	08007e94 	.word	0x08007e94

08002af4 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002af4:	b580      	push	{r7, lr}
 8002af6:	b086      	sub	sp, #24
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002afc:	2300      	movs	r3, #0
 8002afe:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002b00:	2300      	movs	r3, #0
 8002b02:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d03f      	beq.n	8002b90 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002b14:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002b18:	d02a      	beq.n	8002b70 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8002b1a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002b1e:	d824      	bhi.n	8002b6a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002b20:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002b24:	d018      	beq.n	8002b58 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002b26:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002b2a:	d81e      	bhi.n	8002b6a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d003      	beq.n	8002b38 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002b30:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002b34:	d007      	beq.n	8002b46 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002b36:	e018      	b.n	8002b6a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002b38:	4bab      	ldr	r3, [pc, #684]	; (8002de8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002b3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b3c:	4aaa      	ldr	r2, [pc, #680]	; (8002de8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002b3e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b42:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8002b44:	e015      	b.n	8002b72 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	3304      	adds	r3, #4
 8002b4a:	2102      	movs	r1, #2
 8002b4c:	4618      	mov	r0, r3
 8002b4e:	f001 fff3 	bl	8004b38 <RCCEx_PLL2_Config>
 8002b52:	4603      	mov	r3, r0
 8002b54:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8002b56:	e00c      	b.n	8002b72 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	3324      	adds	r3, #36	; 0x24
 8002b5c:	2102      	movs	r1, #2
 8002b5e:	4618      	mov	r0, r3
 8002b60:	f002 f89c 	bl	8004c9c <RCCEx_PLL3_Config>
 8002b64:	4603      	mov	r3, r0
 8002b66:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8002b68:	e003      	b.n	8002b72 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002b6a:	2301      	movs	r3, #1
 8002b6c:	75fb      	strb	r3, [r7, #23]
      break;
 8002b6e:	e000      	b.n	8002b72 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002b70:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002b72:	7dfb      	ldrb	r3, [r7, #23]
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d109      	bne.n	8002b8c <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8002b78:	4b9b      	ldr	r3, [pc, #620]	; (8002de8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002b7a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b7c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002b84:	4998      	ldr	r1, [pc, #608]	; (8002de8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002b86:	4313      	orrs	r3, r2
 8002b88:	650b      	str	r3, [r1, #80]	; 0x50
 8002b8a:	e001      	b.n	8002b90 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002b8c:	7dfb      	ldrb	r3, [r7, #23]
 8002b8e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d03d      	beq.n	8002c18 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ba0:	2b04      	cmp	r3, #4
 8002ba2:	d826      	bhi.n	8002bf2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8002ba4:	a201      	add	r2, pc, #4	; (adr r2, 8002bac <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8002ba6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002baa:	bf00      	nop
 8002bac:	08002bc1 	.word	0x08002bc1
 8002bb0:	08002bcf 	.word	0x08002bcf
 8002bb4:	08002be1 	.word	0x08002be1
 8002bb8:	08002bf9 	.word	0x08002bf9
 8002bbc:	08002bf9 	.word	0x08002bf9
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002bc0:	4b89      	ldr	r3, [pc, #548]	; (8002de8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002bc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bc4:	4a88      	ldr	r2, [pc, #544]	; (8002de8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002bc6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002bca:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002bcc:	e015      	b.n	8002bfa <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	3304      	adds	r3, #4
 8002bd2:	2100      	movs	r1, #0
 8002bd4:	4618      	mov	r0, r3
 8002bd6:	f001 ffaf 	bl	8004b38 <RCCEx_PLL2_Config>
 8002bda:	4603      	mov	r3, r0
 8002bdc:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002bde:	e00c      	b.n	8002bfa <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	3324      	adds	r3, #36	; 0x24
 8002be4:	2100      	movs	r1, #0
 8002be6:	4618      	mov	r0, r3
 8002be8:	f002 f858 	bl	8004c9c <RCCEx_PLL3_Config>
 8002bec:	4603      	mov	r3, r0
 8002bee:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002bf0:	e003      	b.n	8002bfa <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002bf2:	2301      	movs	r3, #1
 8002bf4:	75fb      	strb	r3, [r7, #23]
      break;
 8002bf6:	e000      	b.n	8002bfa <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8002bf8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002bfa:	7dfb      	ldrb	r3, [r7, #23]
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d109      	bne.n	8002c14 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002c00:	4b79      	ldr	r3, [pc, #484]	; (8002de8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002c02:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c04:	f023 0207 	bic.w	r2, r3, #7
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c0c:	4976      	ldr	r1, [pc, #472]	; (8002de8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002c0e:	4313      	orrs	r3, r2
 8002c10:	650b      	str	r3, [r1, #80]	; 0x50
 8002c12:	e001      	b.n	8002c18 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c14:	7dfb      	ldrb	r3, [r7, #23]
 8002c16:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d042      	beq.n	8002caa <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c28:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002c2c:	d02b      	beq.n	8002c86 <HAL_RCCEx_PeriphCLKConfig+0x192>
 8002c2e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002c32:	d825      	bhi.n	8002c80 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8002c34:	2bc0      	cmp	r3, #192	; 0xc0
 8002c36:	d028      	beq.n	8002c8a <HAL_RCCEx_PeriphCLKConfig+0x196>
 8002c38:	2bc0      	cmp	r3, #192	; 0xc0
 8002c3a:	d821      	bhi.n	8002c80 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8002c3c:	2b80      	cmp	r3, #128	; 0x80
 8002c3e:	d016      	beq.n	8002c6e <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8002c40:	2b80      	cmp	r3, #128	; 0x80
 8002c42:	d81d      	bhi.n	8002c80 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d002      	beq.n	8002c4e <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8002c48:	2b40      	cmp	r3, #64	; 0x40
 8002c4a:	d007      	beq.n	8002c5c <HAL_RCCEx_PeriphCLKConfig+0x168>
 8002c4c:	e018      	b.n	8002c80 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002c4e:	4b66      	ldr	r3, [pc, #408]	; (8002de8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002c50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c52:	4a65      	ldr	r2, [pc, #404]	; (8002de8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002c54:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002c58:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8002c5a:	e017      	b.n	8002c8c <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	3304      	adds	r3, #4
 8002c60:	2100      	movs	r1, #0
 8002c62:	4618      	mov	r0, r3
 8002c64:	f001 ff68 	bl	8004b38 <RCCEx_PLL2_Config>
 8002c68:	4603      	mov	r3, r0
 8002c6a:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8002c6c:	e00e      	b.n	8002c8c <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	3324      	adds	r3, #36	; 0x24
 8002c72:	2100      	movs	r1, #0
 8002c74:	4618      	mov	r0, r3
 8002c76:	f002 f811 	bl	8004c9c <RCCEx_PLL3_Config>
 8002c7a:	4603      	mov	r3, r0
 8002c7c:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8002c7e:	e005      	b.n	8002c8c <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002c80:	2301      	movs	r3, #1
 8002c82:	75fb      	strb	r3, [r7, #23]
      break;
 8002c84:	e002      	b.n	8002c8c <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8002c86:	bf00      	nop
 8002c88:	e000      	b.n	8002c8c <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8002c8a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002c8c:	7dfb      	ldrb	r3, [r7, #23]
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d109      	bne.n	8002ca6 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8002c92:	4b55      	ldr	r3, [pc, #340]	; (8002de8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002c94:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c96:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c9e:	4952      	ldr	r1, [pc, #328]	; (8002de8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002ca0:	4313      	orrs	r3, r2
 8002ca2:	650b      	str	r3, [r1, #80]	; 0x50
 8002ca4:	e001      	b.n	8002caa <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ca6:	7dfb      	ldrb	r3, [r7, #23]
 8002ca8:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d049      	beq.n	8002d4a <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8002cbc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002cc0:	d030      	beq.n	8002d24 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8002cc2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002cc6:	d82a      	bhi.n	8002d1e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8002cc8:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8002ccc:	d02c      	beq.n	8002d28 <HAL_RCCEx_PeriphCLKConfig+0x234>
 8002cce:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8002cd2:	d824      	bhi.n	8002d1e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8002cd4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002cd8:	d018      	beq.n	8002d0c <HAL_RCCEx_PeriphCLKConfig+0x218>
 8002cda:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002cde:	d81e      	bhi.n	8002d1e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d003      	beq.n	8002cec <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8002ce4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002ce8:	d007      	beq.n	8002cfa <HAL_RCCEx_PeriphCLKConfig+0x206>
 8002cea:	e018      	b.n	8002d1e <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002cec:	4b3e      	ldr	r3, [pc, #248]	; (8002de8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002cee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cf0:	4a3d      	ldr	r2, [pc, #244]	; (8002de8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002cf2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002cf6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002cf8:	e017      	b.n	8002d2a <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	3304      	adds	r3, #4
 8002cfe:	2100      	movs	r1, #0
 8002d00:	4618      	mov	r0, r3
 8002d02:	f001 ff19 	bl	8004b38 <RCCEx_PLL2_Config>
 8002d06:	4603      	mov	r3, r0
 8002d08:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8002d0a:	e00e      	b.n	8002d2a <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	3324      	adds	r3, #36	; 0x24
 8002d10:	2100      	movs	r1, #0
 8002d12:	4618      	mov	r0, r3
 8002d14:	f001 ffc2 	bl	8004c9c <RCCEx_PLL3_Config>
 8002d18:	4603      	mov	r3, r0
 8002d1a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002d1c:	e005      	b.n	8002d2a <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8002d1e:	2301      	movs	r3, #1
 8002d20:	75fb      	strb	r3, [r7, #23]
      break;
 8002d22:	e002      	b.n	8002d2a <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8002d24:	bf00      	nop
 8002d26:	e000      	b.n	8002d2a <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8002d28:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002d2a:	7dfb      	ldrb	r3, [r7, #23]
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d10a      	bne.n	8002d46 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8002d30:	4b2d      	ldr	r3, [pc, #180]	; (8002de8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002d32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d34:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8002d3e:	492a      	ldr	r1, [pc, #168]	; (8002de8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002d40:	4313      	orrs	r3, r2
 8002d42:	658b      	str	r3, [r1, #88]	; 0x58
 8002d44:	e001      	b.n	8002d4a <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d46:	7dfb      	ldrb	r3, [r7, #23]
 8002d48:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d04c      	beq.n	8002df0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8002d5c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002d60:	d030      	beq.n	8002dc4 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8002d62:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002d66:	d82a      	bhi.n	8002dbe <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8002d68:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002d6c:	d02c      	beq.n	8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 8002d6e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002d72:	d824      	bhi.n	8002dbe <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8002d74:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002d78:	d018      	beq.n	8002dac <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8002d7a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002d7e:	d81e      	bhi.n	8002dbe <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d003      	beq.n	8002d8c <HAL_RCCEx_PeriphCLKConfig+0x298>
 8002d84:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002d88:	d007      	beq.n	8002d9a <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8002d8a:	e018      	b.n	8002dbe <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002d8c:	4b16      	ldr	r3, [pc, #88]	; (8002de8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002d8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d90:	4a15      	ldr	r2, [pc, #84]	; (8002de8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002d92:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002d96:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002d98:	e017      	b.n	8002dca <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	3304      	adds	r3, #4
 8002d9e:	2100      	movs	r1, #0
 8002da0:	4618      	mov	r0, r3
 8002da2:	f001 fec9 	bl	8004b38 <RCCEx_PLL2_Config>
 8002da6:	4603      	mov	r3, r0
 8002da8:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8002daa:	e00e      	b.n	8002dca <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	3324      	adds	r3, #36	; 0x24
 8002db0:	2100      	movs	r1, #0
 8002db2:	4618      	mov	r0, r3
 8002db4:	f001 ff72 	bl	8004c9c <RCCEx_PLL3_Config>
 8002db8:	4603      	mov	r3, r0
 8002dba:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002dbc:	e005      	b.n	8002dca <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8002dbe:	2301      	movs	r3, #1
 8002dc0:	75fb      	strb	r3, [r7, #23]
      break;
 8002dc2:	e002      	b.n	8002dca <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8002dc4:	bf00      	nop
 8002dc6:	e000      	b.n	8002dca <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8002dc8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002dca:	7dfb      	ldrb	r3, [r7, #23]
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d10d      	bne.n	8002dec <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8002dd0:	4b05      	ldr	r3, [pc, #20]	; (8002de8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002dd2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002dd4:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8002dde:	4902      	ldr	r1, [pc, #8]	; (8002de8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002de0:	4313      	orrs	r3, r2
 8002de2:	658b      	str	r3, [r1, #88]	; 0x58
 8002de4:	e004      	b.n	8002df0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 8002de6:	bf00      	nop
 8002de8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002dec:	7dfb      	ldrb	r3, [r7, #23]
 8002dee:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d032      	beq.n	8002e62 <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e00:	2b30      	cmp	r3, #48	; 0x30
 8002e02:	d01c      	beq.n	8002e3e <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8002e04:	2b30      	cmp	r3, #48	; 0x30
 8002e06:	d817      	bhi.n	8002e38 <HAL_RCCEx_PeriphCLKConfig+0x344>
 8002e08:	2b20      	cmp	r3, #32
 8002e0a:	d00c      	beq.n	8002e26 <HAL_RCCEx_PeriphCLKConfig+0x332>
 8002e0c:	2b20      	cmp	r3, #32
 8002e0e:	d813      	bhi.n	8002e38 <HAL_RCCEx_PeriphCLKConfig+0x344>
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d016      	beq.n	8002e42 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8002e14:	2b10      	cmp	r3, #16
 8002e16:	d10f      	bne.n	8002e38 <HAL_RCCEx_PeriphCLKConfig+0x344>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002e18:	4baf      	ldr	r3, [pc, #700]	; (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8002e1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e1c:	4aae      	ldr	r2, [pc, #696]	; (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8002e1e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002e22:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8002e24:	e00e      	b.n	8002e44 <HAL_RCCEx_PeriphCLKConfig+0x350>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	3304      	adds	r3, #4
 8002e2a:	2102      	movs	r1, #2
 8002e2c:	4618      	mov	r0, r3
 8002e2e:	f001 fe83 	bl	8004b38 <RCCEx_PLL2_Config>
 8002e32:	4603      	mov	r3, r0
 8002e34:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8002e36:	e005      	b.n	8002e44 <HAL_RCCEx_PeriphCLKConfig+0x350>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8002e38:	2301      	movs	r3, #1
 8002e3a:	75fb      	strb	r3, [r7, #23]
      break;
 8002e3c:	e002      	b.n	8002e44 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 8002e3e:	bf00      	nop
 8002e40:	e000      	b.n	8002e44 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 8002e42:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002e44:	7dfb      	ldrb	r3, [r7, #23]
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d109      	bne.n	8002e5e <HAL_RCCEx_PeriphCLKConfig+0x36a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8002e4a:	4ba3      	ldr	r3, [pc, #652]	; (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8002e4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e4e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e56:	49a0      	ldr	r1, [pc, #640]	; (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8002e58:	4313      	orrs	r3, r2
 8002e5a:	64cb      	str	r3, [r1, #76]	; 0x4c
 8002e5c:	e001      	b.n	8002e62 <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e5e:	7dfb      	ldrb	r3, [r7, #23]
 8002e60:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d047      	beq.n	8002efe <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e72:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002e76:	d030      	beq.n	8002eda <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 8002e78:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002e7c:	d82a      	bhi.n	8002ed4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8002e7e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002e82:	d02c      	beq.n	8002ede <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 8002e84:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002e88:	d824      	bhi.n	8002ed4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8002e8a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002e8e:	d018      	beq.n	8002ec2 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 8002e90:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002e94:	d81e      	bhi.n	8002ed4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d003      	beq.n	8002ea2 <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 8002e9a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e9e:	d007      	beq.n	8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8002ea0:	e018      	b.n	8002ed4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002ea2:	4b8d      	ldr	r3, [pc, #564]	; (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8002ea4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ea6:	4a8c      	ldr	r2, [pc, #560]	; (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8002ea8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002eac:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8002eae:	e017      	b.n	8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	3304      	adds	r3, #4
 8002eb4:	2100      	movs	r1, #0
 8002eb6:	4618      	mov	r0, r3
 8002eb8:	f001 fe3e 	bl	8004b38 <RCCEx_PLL2_Config>
 8002ebc:	4603      	mov	r3, r0
 8002ebe:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8002ec0:	e00e      	b.n	8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	3324      	adds	r3, #36	; 0x24
 8002ec6:	2100      	movs	r1, #0
 8002ec8:	4618      	mov	r0, r3
 8002eca:	f001 fee7 	bl	8004c9c <RCCEx_PLL3_Config>
 8002ece:	4603      	mov	r3, r0
 8002ed0:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8002ed2:	e005      	b.n	8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002ed4:	2301      	movs	r3, #1
 8002ed6:	75fb      	strb	r3, [r7, #23]
      break;
 8002ed8:	e002      	b.n	8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 8002eda:	bf00      	nop
 8002edc:	e000      	b.n	8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 8002ede:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002ee0:	7dfb      	ldrb	r3, [r7, #23]
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d109      	bne.n	8002efa <HAL_RCCEx_PeriphCLKConfig+0x406>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8002ee6:	4b7c      	ldr	r3, [pc, #496]	; (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8002ee8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002eea:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ef2:	4979      	ldr	r1, [pc, #484]	; (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8002ef4:	4313      	orrs	r3, r2
 8002ef6:	650b      	str	r3, [r1, #80]	; 0x50
 8002ef8:	e001      	b.n	8002efe <HAL_RCCEx_PeriphCLKConfig+0x40a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002efa:	7dfb      	ldrb	r3, [r7, #23]
 8002efc:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d049      	beq.n	8002f9e <HAL_RCCEx_PeriphCLKConfig+0x4aa>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f0e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002f12:	d02e      	beq.n	8002f72 <HAL_RCCEx_PeriphCLKConfig+0x47e>
 8002f14:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002f18:	d828      	bhi.n	8002f6c <HAL_RCCEx_PeriphCLKConfig+0x478>
 8002f1a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002f1e:	d02a      	beq.n	8002f76 <HAL_RCCEx_PeriphCLKConfig+0x482>
 8002f20:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002f24:	d822      	bhi.n	8002f6c <HAL_RCCEx_PeriphCLKConfig+0x478>
 8002f26:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002f2a:	d026      	beq.n	8002f7a <HAL_RCCEx_PeriphCLKConfig+0x486>
 8002f2c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002f30:	d81c      	bhi.n	8002f6c <HAL_RCCEx_PeriphCLKConfig+0x478>
 8002f32:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002f36:	d010      	beq.n	8002f5a <HAL_RCCEx_PeriphCLKConfig+0x466>
 8002f38:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002f3c:	d816      	bhi.n	8002f6c <HAL_RCCEx_PeriphCLKConfig+0x478>
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d01d      	beq.n	8002f7e <HAL_RCCEx_PeriphCLKConfig+0x48a>
 8002f42:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f46:	d111      	bne.n	8002f6c <HAL_RCCEx_PeriphCLKConfig+0x478>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	3304      	adds	r3, #4
 8002f4c:	2101      	movs	r1, #1
 8002f4e:	4618      	mov	r0, r3
 8002f50:	f001 fdf2 	bl	8004b38 <RCCEx_PLL2_Config>
 8002f54:	4603      	mov	r3, r0
 8002f56:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8002f58:	e012      	b.n	8002f80 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	3324      	adds	r3, #36	; 0x24
 8002f5e:	2101      	movs	r1, #1
 8002f60:	4618      	mov	r0, r3
 8002f62:	f001 fe9b 	bl	8004c9c <RCCEx_PLL3_Config>
 8002f66:	4603      	mov	r3, r0
 8002f68:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8002f6a:	e009      	b.n	8002f80 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002f6c:	2301      	movs	r3, #1
 8002f6e:	75fb      	strb	r3, [r7, #23]
      break;
 8002f70:	e006      	b.n	8002f80 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8002f72:	bf00      	nop
 8002f74:	e004      	b.n	8002f80 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8002f76:	bf00      	nop
 8002f78:	e002      	b.n	8002f80 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8002f7a:	bf00      	nop
 8002f7c:	e000      	b.n	8002f80 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8002f7e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002f80:	7dfb      	ldrb	r3, [r7, #23]
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d109      	bne.n	8002f9a <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8002f86:	4b54      	ldr	r3, [pc, #336]	; (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8002f88:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f8a:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f92:	4951      	ldr	r1, [pc, #324]	; (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8002f94:	4313      	orrs	r3, r2
 8002f96:	650b      	str	r3, [r1, #80]	; 0x50
 8002f98:	e001      	b.n	8002f9e <HAL_RCCEx_PeriphCLKConfig+0x4aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f9a:	7dfb      	ldrb	r3, [r7, #23]
 8002f9c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d04b      	beq.n	8003042 <HAL_RCCEx_PeriphCLKConfig+0x54e>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8002fb0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002fb4:	d02e      	beq.n	8003014 <HAL_RCCEx_PeriphCLKConfig+0x520>
 8002fb6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002fba:	d828      	bhi.n	800300e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8002fbc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002fc0:	d02a      	beq.n	8003018 <HAL_RCCEx_PeriphCLKConfig+0x524>
 8002fc2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002fc6:	d822      	bhi.n	800300e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8002fc8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002fcc:	d026      	beq.n	800301c <HAL_RCCEx_PeriphCLKConfig+0x528>
 8002fce:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002fd2:	d81c      	bhi.n	800300e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8002fd4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002fd8:	d010      	beq.n	8002ffc <HAL_RCCEx_PeriphCLKConfig+0x508>
 8002fda:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002fde:	d816      	bhi.n	800300e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d01d      	beq.n	8003020 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 8002fe4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002fe8:	d111      	bne.n	800300e <HAL_RCCEx_PeriphCLKConfig+0x51a>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	3304      	adds	r3, #4
 8002fee:	2101      	movs	r1, #1
 8002ff0:	4618      	mov	r0, r3
 8002ff2:	f001 fda1 	bl	8004b38 <RCCEx_PLL2_Config>
 8002ff6:	4603      	mov	r3, r0
 8002ff8:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8002ffa:	e012      	b.n	8003022 <HAL_RCCEx_PeriphCLKConfig+0x52e>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	3324      	adds	r3, #36	; 0x24
 8003000:	2101      	movs	r1, #1
 8003002:	4618      	mov	r0, r3
 8003004:	f001 fe4a 	bl	8004c9c <RCCEx_PLL3_Config>
 8003008:	4603      	mov	r3, r0
 800300a:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800300c:	e009      	b.n	8003022 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 800300e:	2301      	movs	r3, #1
 8003010:	75fb      	strb	r3, [r7, #23]
      break;
 8003012:	e006      	b.n	8003022 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8003014:	bf00      	nop
 8003016:	e004      	b.n	8003022 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8003018:	bf00      	nop
 800301a:	e002      	b.n	8003022 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 800301c:	bf00      	nop
 800301e:	e000      	b.n	8003022 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8003020:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003022:	7dfb      	ldrb	r3, [r7, #23]
 8003024:	2b00      	cmp	r3, #0
 8003026:	d10a      	bne.n	800303e <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8003028:	4b2b      	ldr	r3, [pc, #172]	; (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800302a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800302c:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003036:	4928      	ldr	r1, [pc, #160]	; (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003038:	4313      	orrs	r3, r2
 800303a:	658b      	str	r3, [r1, #88]	; 0x58
 800303c:	e001      	b.n	8003042 <HAL_RCCEx_PeriphCLKConfig+0x54e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800303e:	7dfb      	ldrb	r3, [r7, #23]
 8003040:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800304a:	2b00      	cmp	r3, #0
 800304c:	d02f      	beq.n	80030ae <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003052:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003056:	d00e      	beq.n	8003076 <HAL_RCCEx_PeriphCLKConfig+0x582>
 8003058:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800305c:	d814      	bhi.n	8003088 <HAL_RCCEx_PeriphCLKConfig+0x594>
 800305e:	2b00      	cmp	r3, #0
 8003060:	d015      	beq.n	800308e <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8003062:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003066:	d10f      	bne.n	8003088 <HAL_RCCEx_PeriphCLKConfig+0x594>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003068:	4b1b      	ldr	r3, [pc, #108]	; (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800306a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800306c:	4a1a      	ldr	r2, [pc, #104]	; (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800306e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003072:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8003074:	e00c      	b.n	8003090 <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	3304      	adds	r3, #4
 800307a:	2101      	movs	r1, #1
 800307c:	4618      	mov	r0, r3
 800307e:	f001 fd5b 	bl	8004b38 <RCCEx_PLL2_Config>
 8003082:	4603      	mov	r3, r0
 8003084:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8003086:	e003      	b.n	8003090 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003088:	2301      	movs	r3, #1
 800308a:	75fb      	strb	r3, [r7, #23]
      break;
 800308c:	e000      	b.n	8003090 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 800308e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003090:	7dfb      	ldrb	r3, [r7, #23]
 8003092:	2b00      	cmp	r3, #0
 8003094:	d109      	bne.n	80030aa <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003096:	4b10      	ldr	r3, [pc, #64]	; (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003098:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800309a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80030a2:	490d      	ldr	r1, [pc, #52]	; (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80030a4:	4313      	orrs	r3, r2
 80030a6:	650b      	str	r3, [r1, #80]	; 0x50
 80030a8:	e001      	b.n	80030ae <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80030aa:	7dfb      	ldrb	r3, [r7, #23]
 80030ac:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d033      	beq.n	8003122 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030be:	2b03      	cmp	r3, #3
 80030c0:	d81c      	bhi.n	80030fc <HAL_RCCEx_PeriphCLKConfig+0x608>
 80030c2:	a201      	add	r2, pc, #4	; (adr r2, 80030c8 <HAL_RCCEx_PeriphCLKConfig+0x5d4>)
 80030c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030c8:	08003103 	.word	0x08003103
 80030cc:	080030dd 	.word	0x080030dd
 80030d0:	080030eb 	.word	0x080030eb
 80030d4:	08003103 	.word	0x08003103
 80030d8:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80030dc:	4bb8      	ldr	r3, [pc, #736]	; (80033c0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80030de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030e0:	4ab7      	ldr	r2, [pc, #732]	; (80033c0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80030e2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80030e6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 80030e8:	e00c      	b.n	8003104 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	3304      	adds	r3, #4
 80030ee:	2102      	movs	r1, #2
 80030f0:	4618      	mov	r0, r3
 80030f2:	f001 fd21 	bl	8004b38 <RCCEx_PLL2_Config>
 80030f6:	4603      	mov	r3, r0
 80030f8:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 80030fa:	e003      	b.n	8003104 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80030fc:	2301      	movs	r3, #1
 80030fe:	75fb      	strb	r3, [r7, #23]
      break;
 8003100:	e000      	b.n	8003104 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8003102:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003104:	7dfb      	ldrb	r3, [r7, #23]
 8003106:	2b00      	cmp	r3, #0
 8003108:	d109      	bne.n	800311e <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800310a:	4bad      	ldr	r3, [pc, #692]	; (80033c0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800310c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800310e:	f023 0203 	bic.w	r2, r3, #3
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003116:	49aa      	ldr	r1, [pc, #680]	; (80033c0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003118:	4313      	orrs	r3, r2
 800311a:	64cb      	str	r3, [r1, #76]	; 0x4c
 800311c:	e001      	b.n	8003122 <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800311e:	7dfb      	ldrb	r3, [r7, #23]
 8003120:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800312a:	2b00      	cmp	r3, #0
 800312c:	f000 8086 	beq.w	800323c <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003130:	4ba4      	ldr	r3, [pc, #656]	; (80033c4 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	4aa3      	ldr	r2, [pc, #652]	; (80033c4 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8003136:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800313a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800313c:	f7fe f822 	bl	8001184 <HAL_GetTick>
 8003140:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003142:	e009      	b.n	8003158 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003144:	f7fe f81e 	bl	8001184 <HAL_GetTick>
 8003148:	4602      	mov	r2, r0
 800314a:	693b      	ldr	r3, [r7, #16]
 800314c:	1ad3      	subs	r3, r2, r3
 800314e:	2b64      	cmp	r3, #100	; 0x64
 8003150:	d902      	bls.n	8003158 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8003152:	2303      	movs	r3, #3
 8003154:	75fb      	strb	r3, [r7, #23]
        break;
 8003156:	e005      	b.n	8003164 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003158:	4b9a      	ldr	r3, [pc, #616]	; (80033c4 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003160:	2b00      	cmp	r3, #0
 8003162:	d0ef      	beq.n	8003144 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8003164:	7dfb      	ldrb	r3, [r7, #23]
 8003166:	2b00      	cmp	r3, #0
 8003168:	d166      	bne.n	8003238 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800316a:	4b95      	ldr	r3, [pc, #596]	; (80033c0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800316c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003174:	4053      	eors	r3, r2
 8003176:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800317a:	2b00      	cmp	r3, #0
 800317c:	d013      	beq.n	80031a6 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800317e:	4b90      	ldr	r3, [pc, #576]	; (80033c0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003180:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003182:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003186:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003188:	4b8d      	ldr	r3, [pc, #564]	; (80033c0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800318a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800318c:	4a8c      	ldr	r2, [pc, #560]	; (80033c0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800318e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003192:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003194:	4b8a      	ldr	r3, [pc, #552]	; (80033c0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003196:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003198:	4a89      	ldr	r2, [pc, #548]	; (80033c0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800319a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800319e:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80031a0:	4a87      	ldr	r2, [pc, #540]	; (80033c0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80031ac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80031b0:	d115      	bne.n	80031de <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031b2:	f7fd ffe7 	bl	8001184 <HAL_GetTick>
 80031b6:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80031b8:	e00b      	b.n	80031d2 <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80031ba:	f7fd ffe3 	bl	8001184 <HAL_GetTick>
 80031be:	4602      	mov	r2, r0
 80031c0:	693b      	ldr	r3, [r7, #16]
 80031c2:	1ad3      	subs	r3, r2, r3
 80031c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80031c8:	4293      	cmp	r3, r2
 80031ca:	d902      	bls.n	80031d2 <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 80031cc:	2303      	movs	r3, #3
 80031ce:	75fb      	strb	r3, [r7, #23]
            break;
 80031d0:	e005      	b.n	80031de <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80031d2:	4b7b      	ldr	r3, [pc, #492]	; (80033c0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80031d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031d6:	f003 0302 	and.w	r3, r3, #2
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d0ed      	beq.n	80031ba <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 80031de:	7dfb      	ldrb	r3, [r7, #23]
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d126      	bne.n	8003232 <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80031ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80031ee:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80031f2:	d10d      	bne.n	8003210 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 80031f4:	4b72      	ldr	r3, [pc, #456]	; (80033c0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80031f6:	691b      	ldr	r3, [r3, #16]
 80031f8:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003202:	0919      	lsrs	r1, r3, #4
 8003204:	4b70      	ldr	r3, [pc, #448]	; (80033c8 <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 8003206:	400b      	ands	r3, r1
 8003208:	496d      	ldr	r1, [pc, #436]	; (80033c0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800320a:	4313      	orrs	r3, r2
 800320c:	610b      	str	r3, [r1, #16]
 800320e:	e005      	b.n	800321c <HAL_RCCEx_PeriphCLKConfig+0x728>
 8003210:	4b6b      	ldr	r3, [pc, #428]	; (80033c0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003212:	691b      	ldr	r3, [r3, #16]
 8003214:	4a6a      	ldr	r2, [pc, #424]	; (80033c0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003216:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800321a:	6113      	str	r3, [r2, #16]
 800321c:	4b68      	ldr	r3, [pc, #416]	; (80033c0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800321e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003226:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800322a:	4965      	ldr	r1, [pc, #404]	; (80033c0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800322c:	4313      	orrs	r3, r2
 800322e:	670b      	str	r3, [r1, #112]	; 0x70
 8003230:	e004      	b.n	800323c <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003232:	7dfb      	ldrb	r3, [r7, #23]
 8003234:	75bb      	strb	r3, [r7, #22]
 8003236:	e001      	b.n	800323c <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003238:	7dfb      	ldrb	r3, [r7, #23]
 800323a:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	f003 0301 	and.w	r3, r3, #1
 8003244:	2b00      	cmp	r3, #0
 8003246:	d07e      	beq.n	8003346 <HAL_RCCEx_PeriphCLKConfig+0x852>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800324c:	2b28      	cmp	r3, #40	; 0x28
 800324e:	d867      	bhi.n	8003320 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8003250:	a201      	add	r2, pc, #4	; (adr r2, 8003258 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8003252:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003256:	bf00      	nop
 8003258:	08003327 	.word	0x08003327
 800325c:	08003321 	.word	0x08003321
 8003260:	08003321 	.word	0x08003321
 8003264:	08003321 	.word	0x08003321
 8003268:	08003321 	.word	0x08003321
 800326c:	08003321 	.word	0x08003321
 8003270:	08003321 	.word	0x08003321
 8003274:	08003321 	.word	0x08003321
 8003278:	080032fd 	.word	0x080032fd
 800327c:	08003321 	.word	0x08003321
 8003280:	08003321 	.word	0x08003321
 8003284:	08003321 	.word	0x08003321
 8003288:	08003321 	.word	0x08003321
 800328c:	08003321 	.word	0x08003321
 8003290:	08003321 	.word	0x08003321
 8003294:	08003321 	.word	0x08003321
 8003298:	0800330f 	.word	0x0800330f
 800329c:	08003321 	.word	0x08003321
 80032a0:	08003321 	.word	0x08003321
 80032a4:	08003321 	.word	0x08003321
 80032a8:	08003321 	.word	0x08003321
 80032ac:	08003321 	.word	0x08003321
 80032b0:	08003321 	.word	0x08003321
 80032b4:	08003321 	.word	0x08003321
 80032b8:	08003327 	.word	0x08003327
 80032bc:	08003321 	.word	0x08003321
 80032c0:	08003321 	.word	0x08003321
 80032c4:	08003321 	.word	0x08003321
 80032c8:	08003321 	.word	0x08003321
 80032cc:	08003321 	.word	0x08003321
 80032d0:	08003321 	.word	0x08003321
 80032d4:	08003321 	.word	0x08003321
 80032d8:	08003327 	.word	0x08003327
 80032dc:	08003321 	.word	0x08003321
 80032e0:	08003321 	.word	0x08003321
 80032e4:	08003321 	.word	0x08003321
 80032e8:	08003321 	.word	0x08003321
 80032ec:	08003321 	.word	0x08003321
 80032f0:	08003321 	.word	0x08003321
 80032f4:	08003321 	.word	0x08003321
 80032f8:	08003327 	.word	0x08003327
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	3304      	adds	r3, #4
 8003300:	2101      	movs	r1, #1
 8003302:	4618      	mov	r0, r3
 8003304:	f001 fc18 	bl	8004b38 <RCCEx_PLL2_Config>
 8003308:	4603      	mov	r3, r0
 800330a:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800330c:	e00c      	b.n	8003328 <HAL_RCCEx_PeriphCLKConfig+0x834>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	3324      	adds	r3, #36	; 0x24
 8003312:	2101      	movs	r1, #1
 8003314:	4618      	mov	r0, r3
 8003316:	f001 fcc1 	bl	8004c9c <RCCEx_PLL3_Config>
 800331a:	4603      	mov	r3, r0
 800331c:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800331e:	e003      	b.n	8003328 <HAL_RCCEx_PeriphCLKConfig+0x834>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003320:	2301      	movs	r3, #1
 8003322:	75fb      	strb	r3, [r7, #23]
      break;
 8003324:	e000      	b.n	8003328 <HAL_RCCEx_PeriphCLKConfig+0x834>
      break;
 8003326:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003328:	7dfb      	ldrb	r3, [r7, #23]
 800332a:	2b00      	cmp	r3, #0
 800332c:	d109      	bne.n	8003342 <HAL_RCCEx_PeriphCLKConfig+0x84e>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800332e:	4b24      	ldr	r3, [pc, #144]	; (80033c0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003330:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003332:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800333a:	4921      	ldr	r1, [pc, #132]	; (80033c0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800333c:	4313      	orrs	r3, r2
 800333e:	654b      	str	r3, [r1, #84]	; 0x54
 8003340:	e001      	b.n	8003346 <HAL_RCCEx_PeriphCLKConfig+0x852>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003342:	7dfb      	ldrb	r3, [r7, #23]
 8003344:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f003 0302 	and.w	r3, r3, #2
 800334e:	2b00      	cmp	r3, #0
 8003350:	d03e      	beq.n	80033d0 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003356:	2b05      	cmp	r3, #5
 8003358:	d820      	bhi.n	800339c <HAL_RCCEx_PeriphCLKConfig+0x8a8>
 800335a:	a201      	add	r2, pc, #4	; (adr r2, 8003360 <HAL_RCCEx_PeriphCLKConfig+0x86c>)
 800335c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003360:	080033a3 	.word	0x080033a3
 8003364:	08003379 	.word	0x08003379
 8003368:	0800338b 	.word	0x0800338b
 800336c:	080033a3 	.word	0x080033a3
 8003370:	080033a3 	.word	0x080033a3
 8003374:	080033a3 	.word	0x080033a3
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	3304      	adds	r3, #4
 800337c:	2101      	movs	r1, #1
 800337e:	4618      	mov	r0, r3
 8003380:	f001 fbda 	bl	8004b38 <RCCEx_PLL2_Config>
 8003384:	4603      	mov	r3, r0
 8003386:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8003388:	e00c      	b.n	80033a4 <HAL_RCCEx_PeriphCLKConfig+0x8b0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	3324      	adds	r3, #36	; 0x24
 800338e:	2101      	movs	r1, #1
 8003390:	4618      	mov	r0, r3
 8003392:	f001 fc83 	bl	8004c9c <RCCEx_PLL3_Config>
 8003396:	4603      	mov	r3, r0
 8003398:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800339a:	e003      	b.n	80033a4 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800339c:	2301      	movs	r3, #1
 800339e:	75fb      	strb	r3, [r7, #23]
      break;
 80033a0:	e000      	b.n	80033a4 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      break;
 80033a2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80033a4:	7dfb      	ldrb	r3, [r7, #23]
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d110      	bne.n	80033cc <HAL_RCCEx_PeriphCLKConfig+0x8d8>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80033aa:	4b05      	ldr	r3, [pc, #20]	; (80033c0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80033ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033ae:	f023 0207 	bic.w	r2, r3, #7
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80033b6:	4902      	ldr	r1, [pc, #8]	; (80033c0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80033b8:	4313      	orrs	r3, r2
 80033ba:	654b      	str	r3, [r1, #84]	; 0x54
 80033bc:	e008      	b.n	80033d0 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
 80033be:	bf00      	nop
 80033c0:	58024400 	.word	0x58024400
 80033c4:	58024800 	.word	0x58024800
 80033c8:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 80033cc:	7dfb      	ldrb	r3, [r7, #23]
 80033ce:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	f003 0304 	and.w	r3, r3, #4
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d039      	beq.n	8003450 <HAL_RCCEx_PeriphCLKConfig+0x95c>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033e2:	2b05      	cmp	r3, #5
 80033e4:	d820      	bhi.n	8003428 <HAL_RCCEx_PeriphCLKConfig+0x934>
 80033e6:	a201      	add	r2, pc, #4	; (adr r2, 80033ec <HAL_RCCEx_PeriphCLKConfig+0x8f8>)
 80033e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033ec:	0800342f 	.word	0x0800342f
 80033f0:	08003405 	.word	0x08003405
 80033f4:	08003417 	.word	0x08003417
 80033f8:	0800342f 	.word	0x0800342f
 80033fc:	0800342f 	.word	0x0800342f
 8003400:	0800342f 	.word	0x0800342f
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	3304      	adds	r3, #4
 8003408:	2101      	movs	r1, #1
 800340a:	4618      	mov	r0, r3
 800340c:	f001 fb94 	bl	8004b38 <RCCEx_PLL2_Config>
 8003410:	4603      	mov	r3, r0
 8003412:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8003414:	e00c      	b.n	8003430 <HAL_RCCEx_PeriphCLKConfig+0x93c>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	3324      	adds	r3, #36	; 0x24
 800341a:	2101      	movs	r1, #1
 800341c:	4618      	mov	r0, r3
 800341e:	f001 fc3d 	bl	8004c9c <RCCEx_PLL3_Config>
 8003422:	4603      	mov	r3, r0
 8003424:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8003426:	e003      	b.n	8003430 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003428:	2301      	movs	r3, #1
 800342a:	75fb      	strb	r3, [r7, #23]
      break;
 800342c:	e000      	b.n	8003430 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      break;
 800342e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003430:	7dfb      	ldrb	r3, [r7, #23]
 8003432:	2b00      	cmp	r3, #0
 8003434:	d10a      	bne.n	800344c <HAL_RCCEx_PeriphCLKConfig+0x958>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003436:	4bb7      	ldr	r3, [pc, #732]	; (8003714 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003438:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800343a:	f023 0207 	bic.w	r2, r3, #7
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003444:	49b3      	ldr	r1, [pc, #716]	; (8003714 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003446:	4313      	orrs	r3, r2
 8003448:	658b      	str	r3, [r1, #88]	; 0x58
 800344a:	e001      	b.n	8003450 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800344c:	7dfb      	ldrb	r3, [r7, #23]
 800344e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	f003 0320 	and.w	r3, r3, #32
 8003458:	2b00      	cmp	r3, #0
 800345a:	d04b      	beq.n	80034f4 <HAL_RCCEx_PeriphCLKConfig+0xa00>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003462:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003466:	d02e      	beq.n	80034c6 <HAL_RCCEx_PeriphCLKConfig+0x9d2>
 8003468:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800346c:	d828      	bhi.n	80034c0 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 800346e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003472:	d02a      	beq.n	80034ca <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8003474:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003478:	d822      	bhi.n	80034c0 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 800347a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800347e:	d026      	beq.n	80034ce <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8003480:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003484:	d81c      	bhi.n	80034c0 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8003486:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800348a:	d010      	beq.n	80034ae <HAL_RCCEx_PeriphCLKConfig+0x9ba>
 800348c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003490:	d816      	bhi.n	80034c0 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8003492:	2b00      	cmp	r3, #0
 8003494:	d01d      	beq.n	80034d2 <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8003496:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800349a:	d111      	bne.n	80034c0 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	3304      	adds	r3, #4
 80034a0:	2100      	movs	r1, #0
 80034a2:	4618      	mov	r0, r3
 80034a4:	f001 fb48 	bl	8004b38 <RCCEx_PLL2_Config>
 80034a8:	4603      	mov	r3, r0
 80034aa:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80034ac:	e012      	b.n	80034d4 <HAL_RCCEx_PeriphCLKConfig+0x9e0>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	3324      	adds	r3, #36	; 0x24
 80034b2:	2102      	movs	r1, #2
 80034b4:	4618      	mov	r0, r3
 80034b6:	f001 fbf1 	bl	8004c9c <RCCEx_PLL3_Config>
 80034ba:	4603      	mov	r3, r0
 80034bc:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80034be:	e009      	b.n	80034d4 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80034c0:	2301      	movs	r3, #1
 80034c2:	75fb      	strb	r3, [r7, #23]
      break;
 80034c4:	e006      	b.n	80034d4 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 80034c6:	bf00      	nop
 80034c8:	e004      	b.n	80034d4 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 80034ca:	bf00      	nop
 80034cc:	e002      	b.n	80034d4 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 80034ce:	bf00      	nop
 80034d0:	e000      	b.n	80034d4 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 80034d2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80034d4:	7dfb      	ldrb	r3, [r7, #23]
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d10a      	bne.n	80034f0 <HAL_RCCEx_PeriphCLKConfig+0x9fc>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80034da:	4b8e      	ldr	r3, [pc, #568]	; (8003714 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80034dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034de:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80034e8:	498a      	ldr	r1, [pc, #552]	; (8003714 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80034ea:	4313      	orrs	r3, r2
 80034ec:	654b      	str	r3, [r1, #84]	; 0x54
 80034ee:	e001      	b.n	80034f4 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80034f0:	7dfb      	ldrb	r3, [r7, #23]
 80034f2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d04b      	beq.n	8003598 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003506:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800350a:	d02e      	beq.n	800356a <HAL_RCCEx_PeriphCLKConfig+0xa76>
 800350c:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003510:	d828      	bhi.n	8003564 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8003512:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003516:	d02a      	beq.n	800356e <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8003518:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800351c:	d822      	bhi.n	8003564 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 800351e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003522:	d026      	beq.n	8003572 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8003524:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003528:	d81c      	bhi.n	8003564 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 800352a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800352e:	d010      	beq.n	8003552 <HAL_RCCEx_PeriphCLKConfig+0xa5e>
 8003530:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003534:	d816      	bhi.n	8003564 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8003536:	2b00      	cmp	r3, #0
 8003538:	d01d      	beq.n	8003576 <HAL_RCCEx_PeriphCLKConfig+0xa82>
 800353a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800353e:	d111      	bne.n	8003564 <HAL_RCCEx_PeriphCLKConfig+0xa70>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	3304      	adds	r3, #4
 8003544:	2100      	movs	r1, #0
 8003546:	4618      	mov	r0, r3
 8003548:	f001 faf6 	bl	8004b38 <RCCEx_PLL2_Config>
 800354c:	4603      	mov	r3, r0
 800354e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8003550:	e012      	b.n	8003578 <HAL_RCCEx_PeriphCLKConfig+0xa84>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	3324      	adds	r3, #36	; 0x24
 8003556:	2102      	movs	r1, #2
 8003558:	4618      	mov	r0, r3
 800355a:	f001 fb9f 	bl	8004c9c <RCCEx_PLL3_Config>
 800355e:	4603      	mov	r3, r0
 8003560:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8003562:	e009      	b.n	8003578 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003564:	2301      	movs	r3, #1
 8003566:	75fb      	strb	r3, [r7, #23]
      break;
 8003568:	e006      	b.n	8003578 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 800356a:	bf00      	nop
 800356c:	e004      	b.n	8003578 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 800356e:	bf00      	nop
 8003570:	e002      	b.n	8003578 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8003572:	bf00      	nop
 8003574:	e000      	b.n	8003578 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8003576:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003578:	7dfb      	ldrb	r3, [r7, #23]
 800357a:	2b00      	cmp	r3, #0
 800357c:	d10a      	bne.n	8003594 <HAL_RCCEx_PeriphCLKConfig+0xaa0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800357e:	4b65      	ldr	r3, [pc, #404]	; (8003714 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003580:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003582:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800358c:	4961      	ldr	r1, [pc, #388]	; (8003714 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800358e:	4313      	orrs	r3, r2
 8003590:	658b      	str	r3, [r1, #88]	; 0x58
 8003592:	e001      	b.n	8003598 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003594:	7dfb      	ldrb	r3, [r7, #23]
 8003596:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d04b      	beq.n	800363c <HAL_RCCEx_PeriphCLKConfig+0xb48>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80035aa:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80035ae:	d02e      	beq.n	800360e <HAL_RCCEx_PeriphCLKConfig+0xb1a>
 80035b0:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80035b4:	d828      	bhi.n	8003608 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 80035b6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80035ba:	d02a      	beq.n	8003612 <HAL_RCCEx_PeriphCLKConfig+0xb1e>
 80035bc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80035c0:	d822      	bhi.n	8003608 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 80035c2:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80035c6:	d026      	beq.n	8003616 <HAL_RCCEx_PeriphCLKConfig+0xb22>
 80035c8:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80035cc:	d81c      	bhi.n	8003608 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 80035ce:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80035d2:	d010      	beq.n	80035f6 <HAL_RCCEx_PeriphCLKConfig+0xb02>
 80035d4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80035d8:	d816      	bhi.n	8003608 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d01d      	beq.n	800361a <HAL_RCCEx_PeriphCLKConfig+0xb26>
 80035de:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80035e2:	d111      	bne.n	8003608 <HAL_RCCEx_PeriphCLKConfig+0xb14>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	3304      	adds	r3, #4
 80035e8:	2100      	movs	r1, #0
 80035ea:	4618      	mov	r0, r3
 80035ec:	f001 faa4 	bl	8004b38 <RCCEx_PLL2_Config>
 80035f0:	4603      	mov	r3, r0
 80035f2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80035f4:	e012      	b.n	800361c <HAL_RCCEx_PeriphCLKConfig+0xb28>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	3324      	adds	r3, #36	; 0x24
 80035fa:	2102      	movs	r1, #2
 80035fc:	4618      	mov	r0, r3
 80035fe:	f001 fb4d 	bl	8004c9c <RCCEx_PLL3_Config>
 8003602:	4603      	mov	r3, r0
 8003604:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8003606:	e009      	b.n	800361c <HAL_RCCEx_PeriphCLKConfig+0xb28>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003608:	2301      	movs	r3, #1
 800360a:	75fb      	strb	r3, [r7, #23]
      break;
 800360c:	e006      	b.n	800361c <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 800360e:	bf00      	nop
 8003610:	e004      	b.n	800361c <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8003612:	bf00      	nop
 8003614:	e002      	b.n	800361c <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8003616:	bf00      	nop
 8003618:	e000      	b.n	800361c <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 800361a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800361c:	7dfb      	ldrb	r3, [r7, #23]
 800361e:	2b00      	cmp	r3, #0
 8003620:	d10a      	bne.n	8003638 <HAL_RCCEx_PeriphCLKConfig+0xb44>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8003622:	4b3c      	ldr	r3, [pc, #240]	; (8003714 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003624:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003626:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003630:	4938      	ldr	r1, [pc, #224]	; (8003714 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003632:	4313      	orrs	r3, r2
 8003634:	658b      	str	r3, [r1, #88]	; 0x58
 8003636:	e001      	b.n	800363c <HAL_RCCEx_PeriphCLKConfig+0xb48>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003638:	7dfb      	ldrb	r3, [r7, #23]
 800363a:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f003 0308 	and.w	r3, r3, #8
 8003644:	2b00      	cmp	r3, #0
 8003646:	d01a      	beq.n	800367e <HAL_RCCEx_PeriphCLKConfig+0xb8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800364e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003652:	d10a      	bne.n	800366a <HAL_RCCEx_PeriphCLKConfig+0xb76>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	3324      	adds	r3, #36	; 0x24
 8003658:	2102      	movs	r1, #2
 800365a:	4618      	mov	r0, r3
 800365c:	f001 fb1e 	bl	8004c9c <RCCEx_PLL3_Config>
 8003660:	4603      	mov	r3, r0
 8003662:	2b00      	cmp	r3, #0
 8003664:	d001      	beq.n	800366a <HAL_RCCEx_PeriphCLKConfig+0xb76>
        {
          status = HAL_ERROR;
 8003666:	2301      	movs	r3, #1
 8003668:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800366a:	4b2a      	ldr	r3, [pc, #168]	; (8003714 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800366c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800366e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003678:	4926      	ldr	r1, [pc, #152]	; (8003714 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800367a:	4313      	orrs	r3, r2
 800367c:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f003 0310 	and.w	r3, r3, #16
 8003686:	2b00      	cmp	r3, #0
 8003688:	d01a      	beq.n	80036c0 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003690:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003694:	d10a      	bne.n	80036ac <HAL_RCCEx_PeriphCLKConfig+0xbb8>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	3324      	adds	r3, #36	; 0x24
 800369a:	2102      	movs	r1, #2
 800369c:	4618      	mov	r0, r3
 800369e:	f001 fafd 	bl	8004c9c <RCCEx_PLL3_Config>
 80036a2:	4603      	mov	r3, r0
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d001      	beq.n	80036ac <HAL_RCCEx_PeriphCLKConfig+0xbb8>
      {
        status = HAL_ERROR;
 80036a8:	2301      	movs	r3, #1
 80036aa:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80036ac:	4b19      	ldr	r3, [pc, #100]	; (8003714 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80036ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036b0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80036ba:	4916      	ldr	r1, [pc, #88]	; (8003714 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80036bc:	4313      	orrs	r3, r2
 80036be:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d036      	beq.n	800373a <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {
    switch(PeriphClkInit->AdcClockSelection)
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80036d2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80036d6:	d01f      	beq.n	8003718 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 80036d8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80036dc:	d817      	bhi.n	800370e <HAL_RCCEx_PeriphCLKConfig+0xc1a>
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d003      	beq.n	80036ea <HAL_RCCEx_PeriphCLKConfig+0xbf6>
 80036e2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80036e6:	d009      	beq.n	80036fc <HAL_RCCEx_PeriphCLKConfig+0xc08>
 80036e8:	e011      	b.n	800370e <HAL_RCCEx_PeriphCLKConfig+0xc1a>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	3304      	adds	r3, #4
 80036ee:	2100      	movs	r1, #0
 80036f0:	4618      	mov	r0, r3
 80036f2:	f001 fa21 	bl	8004b38 <RCCEx_PLL2_Config>
 80036f6:	4603      	mov	r3, r0
 80036f8:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80036fa:	e00e      	b.n	800371a <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	3324      	adds	r3, #36	; 0x24
 8003700:	2102      	movs	r1, #2
 8003702:	4618      	mov	r0, r3
 8003704:	f001 faca 	bl	8004c9c <RCCEx_PLL3_Config>
 8003708:	4603      	mov	r3, r0
 800370a:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800370c:	e005      	b.n	800371a <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800370e:	2301      	movs	r3, #1
 8003710:	75fb      	strb	r3, [r7, #23]
      break;
 8003712:	e002      	b.n	800371a <HAL_RCCEx_PeriphCLKConfig+0xc26>
 8003714:	58024400 	.word	0x58024400
      break;
 8003718:	bf00      	nop
    }

    if(ret == HAL_OK)
 800371a:	7dfb      	ldrb	r3, [r7, #23]
 800371c:	2b00      	cmp	r3, #0
 800371e:	d10a      	bne.n	8003736 <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003720:	4b93      	ldr	r3, [pc, #588]	; (8003970 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003722:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003724:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800372e:	4990      	ldr	r1, [pc, #576]	; (8003970 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003730:	4313      	orrs	r3, r2
 8003732:	658b      	str	r3, [r1, #88]	; 0x58
 8003734:	e001      	b.n	800373a <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003736:	7dfb      	ldrb	r3, [r7, #23]
 8003738:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003742:	2b00      	cmp	r3, #0
 8003744:	d033      	beq.n	80037ae <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800374c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003750:	d01c      	beq.n	800378c <HAL_RCCEx_PeriphCLKConfig+0xc98>
 8003752:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003756:	d816      	bhi.n	8003786 <HAL_RCCEx_PeriphCLKConfig+0xc92>
 8003758:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800375c:	d003      	beq.n	8003766 <HAL_RCCEx_PeriphCLKConfig+0xc72>
 800375e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003762:	d007      	beq.n	8003774 <HAL_RCCEx_PeriphCLKConfig+0xc80>
 8003764:	e00f      	b.n	8003786 <HAL_RCCEx_PeriphCLKConfig+0xc92>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003766:	4b82      	ldr	r3, [pc, #520]	; (8003970 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003768:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800376a:	4a81      	ldr	r2, [pc, #516]	; (8003970 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800376c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003770:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8003772:	e00c      	b.n	800378e <HAL_RCCEx_PeriphCLKConfig+0xc9a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	3324      	adds	r3, #36	; 0x24
 8003778:	2101      	movs	r1, #1
 800377a:	4618      	mov	r0, r3
 800377c:	f001 fa8e 	bl	8004c9c <RCCEx_PLL3_Config>
 8003780:	4603      	mov	r3, r0
 8003782:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8003784:	e003      	b.n	800378e <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003786:	2301      	movs	r3, #1
 8003788:	75fb      	strb	r3, [r7, #23]
      break;
 800378a:	e000      	b.n	800378e <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      break;
 800378c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800378e:	7dfb      	ldrb	r3, [r7, #23]
 8003790:	2b00      	cmp	r3, #0
 8003792:	d10a      	bne.n	80037aa <HAL_RCCEx_PeriphCLKConfig+0xcb6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003794:	4b76      	ldr	r3, [pc, #472]	; (8003970 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003796:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003798:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80037a2:	4973      	ldr	r1, [pc, #460]	; (8003970 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80037a4:	4313      	orrs	r3, r2
 80037a6:	654b      	str	r3, [r1, #84]	; 0x54
 80037a8:	e001      	b.n	80037ae <HAL_RCCEx_PeriphCLKConfig+0xcba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037aa:	7dfb      	ldrb	r3, [r7, #23]
 80037ac:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d029      	beq.n	800380e <HAL_RCCEx_PeriphCLKConfig+0xd1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d003      	beq.n	80037ca <HAL_RCCEx_PeriphCLKConfig+0xcd6>
 80037c2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80037c6:	d007      	beq.n	80037d8 <HAL_RCCEx_PeriphCLKConfig+0xce4>
 80037c8:	e00f      	b.n	80037ea <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80037ca:	4b69      	ldr	r3, [pc, #420]	; (8003970 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80037cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037ce:	4a68      	ldr	r2, [pc, #416]	; (8003970 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80037d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80037d4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80037d6:	e00b      	b.n	80037f0 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	3304      	adds	r3, #4
 80037dc:	2102      	movs	r1, #2
 80037de:	4618      	mov	r0, r3
 80037e0:	f001 f9aa 	bl	8004b38 <RCCEx_PLL2_Config>
 80037e4:	4603      	mov	r3, r0
 80037e6:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80037e8:	e002      	b.n	80037f0 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    default:
      ret = HAL_ERROR;
 80037ea:	2301      	movs	r3, #1
 80037ec:	75fb      	strb	r3, [r7, #23]
      break;
 80037ee:	bf00      	nop
    }

    if(ret == HAL_OK)
 80037f0:	7dfb      	ldrb	r3, [r7, #23]
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d109      	bne.n	800380a <HAL_RCCEx_PeriphCLKConfig+0xd16>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80037f6:	4b5e      	ldr	r3, [pc, #376]	; (8003970 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80037f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80037fa:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003802:	495b      	ldr	r1, [pc, #364]	; (8003970 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003804:	4313      	orrs	r3, r2
 8003806:	64cb      	str	r3, [r1, #76]	; 0x4c
 8003808:	e001      	b.n	800380e <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800380a:	7dfb      	ldrb	r3, [r7, #23]
 800380c:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003816:	2b00      	cmp	r3, #0
 8003818:	d00a      	beq.n	8003830 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	3324      	adds	r3, #36	; 0x24
 800381e:	2102      	movs	r1, #2
 8003820:	4618      	mov	r0, r3
 8003822:	f001 fa3b 	bl	8004c9c <RCCEx_PLL3_Config>
 8003826:	4603      	mov	r3, r0
 8003828:	2b00      	cmp	r3, #0
 800382a:	d001      	beq.n	8003830 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      status=HAL_ERROR;
 800382c:	2301      	movs	r3, #1
 800382e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003838:	2b00      	cmp	r3, #0
 800383a:	d030      	beq.n	800389e <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {

    switch(PeriphClkInit->RngClockSelection)
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003840:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003844:	d017      	beq.n	8003876 <HAL_RCCEx_PeriphCLKConfig+0xd82>
 8003846:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800384a:	d811      	bhi.n	8003870 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 800384c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003850:	d013      	beq.n	800387a <HAL_RCCEx_PeriphCLKConfig+0xd86>
 8003852:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003856:	d80b      	bhi.n	8003870 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8003858:	2b00      	cmp	r3, #0
 800385a:	d010      	beq.n	800387e <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 800385c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003860:	d106      	bne.n	8003870 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003862:	4b43      	ldr	r3, [pc, #268]	; (8003970 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003864:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003866:	4a42      	ldr	r2, [pc, #264]	; (8003970 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003868:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800386c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 800386e:	e007      	b.n	8003880 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003870:	2301      	movs	r3, #1
 8003872:	75fb      	strb	r3, [r7, #23]
      break;
 8003874:	e004      	b.n	8003880 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8003876:	bf00      	nop
 8003878:	e002      	b.n	8003880 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 800387a:	bf00      	nop
 800387c:	e000      	b.n	8003880 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 800387e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003880:	7dfb      	ldrb	r3, [r7, #23]
 8003882:	2b00      	cmp	r3, #0
 8003884:	d109      	bne.n	800389a <HAL_RCCEx_PeriphCLKConfig+0xda6>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003886:	4b3a      	ldr	r3, [pc, #232]	; (8003970 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003888:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800388a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003892:	4937      	ldr	r1, [pc, #220]	; (8003970 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003894:	4313      	orrs	r3, r2
 8003896:	654b      	str	r3, [r1, #84]	; 0x54
 8003898:	e001      	b.n	800389e <HAL_RCCEx_PeriphCLKConfig+0xdaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800389a:	7dfb      	ldrb	r3, [r7, #23]
 800389c:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d008      	beq.n	80038bc <HAL_RCCEx_PeriphCLKConfig+0xdc8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80038aa:	4b31      	ldr	r3, [pc, #196]	; (8003970 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80038ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80038ae:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038b6:	492e      	ldr	r1, [pc, #184]	; (8003970 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80038b8:	4313      	orrs	r3, r2
 80038ba:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d009      	beq.n	80038dc <HAL_RCCEx_PeriphCLKConfig+0xde8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80038c8:	4b29      	ldr	r3, [pc, #164]	; (8003970 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80038ca:	691b      	ldr	r3, [r3, #16]
 80038cc:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80038d6:	4926      	ldr	r1, [pc, #152]	; (8003970 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80038d8:	4313      	orrs	r3, r2
 80038da:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d008      	beq.n	80038fa <HAL_RCCEx_PeriphCLKConfig+0xe06>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80038e8:	4b21      	ldr	r3, [pc, #132]	; (8003970 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80038ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80038ec:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80038f4:	491e      	ldr	r1, [pc, #120]	; (8003970 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80038f6:	4313      	orrs	r3, r2
 80038f8:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003902:	2b00      	cmp	r3, #0
 8003904:	d00d      	beq.n	8003922 <HAL_RCCEx_PeriphCLKConfig+0xe2e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003906:	4b1a      	ldr	r3, [pc, #104]	; (8003970 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003908:	691b      	ldr	r3, [r3, #16]
 800390a:	4a19      	ldr	r2, [pc, #100]	; (8003970 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800390c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003910:	6113      	str	r3, [r2, #16]
 8003912:	4b17      	ldr	r3, [pc, #92]	; (8003970 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003914:	691a      	ldr	r2, [r3, #16]
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800391c:	4914      	ldr	r1, [pc, #80]	; (8003970 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800391e:	4313      	orrs	r3, r2
 8003920:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	2b00      	cmp	r3, #0
 8003928:	da08      	bge.n	800393c <HAL_RCCEx_PeriphCLKConfig+0xe48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800392a:	4b11      	ldr	r3, [pc, #68]	; (8003970 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800392c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800392e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003936:	490e      	ldr	r1, [pc, #56]	; (8003970 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003938:	4313      	orrs	r3, r2
 800393a:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003944:	2b00      	cmp	r3, #0
 8003946:	d009      	beq.n	800395c <HAL_RCCEx_PeriphCLKConfig+0xe68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003948:	4b09      	ldr	r3, [pc, #36]	; (8003970 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800394a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800394c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003956:	4906      	ldr	r1, [pc, #24]	; (8003970 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003958:	4313      	orrs	r3, r2
 800395a:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 800395c:	7dbb      	ldrb	r3, [r7, #22]
 800395e:	2b00      	cmp	r3, #0
 8003960:	d101      	bne.n	8003966 <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    return HAL_OK;
 8003962:	2300      	movs	r3, #0
 8003964:	e000      	b.n	8003968 <HAL_RCCEx_PeriphCLKConfig+0xe74>
  }
  return HAL_ERROR;
 8003966:	2301      	movs	r3, #1
}
 8003968:	4618      	mov	r0, r3
 800396a:	3718      	adds	r7, #24
 800396c:	46bd      	mov	sp, r7
 800396e:	bd80      	pop	{r7, pc}
 8003970:	58024400 	.word	0x58024400

08003974 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8003974:	b580      	push	{r7, lr}
 8003976:	b090      	sub	sp, #64	; 0x40
 8003978:	af00      	add	r7, sp, #0
 800397a:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003982:	f040 8095 	bne.w	8003ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 8003986:	4bae      	ldr	r3, [pc, #696]	; (8003c40 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8003988:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800398a:	f003 0307 	and.w	r3, r3, #7
 800398e:	633b      	str	r3, [r7, #48]	; 0x30
 8003990:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003992:	2b04      	cmp	r3, #4
 8003994:	f200 8088 	bhi.w	8003aa8 <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 8003998:	a201      	add	r2, pc, #4	; (adr r2, 80039a0 <HAL_RCCEx_GetPeriphCLKFreq+0x2c>)
 800399a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800399e:	bf00      	nop
 80039a0:	080039b5 	.word	0x080039b5
 80039a4:	080039dd 	.word	0x080039dd
 80039a8:	08003a05 	.word	0x08003a05
 80039ac:	08003aa1 	.word	0x08003aa1
 80039b0:	08003a2d 	.word	0x08003a2d

      switch (saiclocksource)
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80039b4:	4ba2      	ldr	r3, [pc, #648]	; (8003c40 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039bc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80039c0:	d108      	bne.n	80039d4 <HAL_RCCEx_GetPeriphCLKFreq+0x60>
         {
           HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80039c2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80039c6:	4618      	mov	r0, r3
 80039c8:	f000 ff64 	bl	8004894 <HAL_RCCEx_GetPLL1ClockFreq>
           frequency = pll1_clocks.PLL1_Q_Frequency;
 80039cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039ce:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80039d0:	f000 bc95 	b.w	80042fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 80039d4:	2300      	movs	r3, #0
 80039d6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80039d8:	f000 bc91 	b.w	80042fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80039dc:	4b98      	ldr	r3, [pc, #608]	; (8003c40 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80039e4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80039e8:	d108      	bne.n	80039fc <HAL_RCCEx_GetPeriphCLKFreq+0x88>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80039ea:	f107 0318 	add.w	r3, r7, #24
 80039ee:	4618      	mov	r0, r3
 80039f0:	f000 fca8 	bl	8004344 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80039f4:	69bb      	ldr	r3, [r7, #24]
 80039f6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80039f8:	f000 bc81 	b.w	80042fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 80039fc:	2300      	movs	r3, #0
 80039fe:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8003a00:	f000 bc7d 	b.w	80042fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8003a04:	4b8e      	ldr	r3, [pc, #568]	; (8003c40 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003a0c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003a10:	d108      	bne.n	8003a24 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8003a12:	f107 030c 	add.w	r3, r7, #12
 8003a16:	4618      	mov	r0, r3
 8003a18:	f000 fde8 	bl	80045ec <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8003a20:	f000 bc6d 	b.w	80042fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8003a24:	2300      	movs	r3, #0
 8003a26:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8003a28:	f000 bc69 	b.w	80042fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8003a2c:	4b84      	ldr	r3, [pc, #528]	; (8003c40 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8003a2e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a30:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003a34:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8003a36:	4b82      	ldr	r3, [pc, #520]	; (8003c40 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	f003 0304 	and.w	r3, r3, #4
 8003a3e:	2b04      	cmp	r3, #4
 8003a40:	d10c      	bne.n	8003a5c <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
 8003a42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d109      	bne.n	8003a5c <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003a48:	4b7d      	ldr	r3, [pc, #500]	; (8003c40 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	08db      	lsrs	r3, r3, #3
 8003a4e:	f003 0303 	and.w	r3, r3, #3
 8003a52:	4a7c      	ldr	r2, [pc, #496]	; (8003c44 <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>)
 8003a54:	fa22 f303 	lsr.w	r3, r2, r3
 8003a58:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003a5a:	e01f      	b.n	8003a9c <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8003a5c:	4b78      	ldr	r3, [pc, #480]	; (8003c40 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a64:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003a68:	d106      	bne.n	8003a78 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
 8003a6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a6c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003a70:	d102      	bne.n	8003a78 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8003a72:	4b75      	ldr	r3, [pc, #468]	; (8003c48 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 8003a74:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003a76:	e011      	b.n	8003a9c <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8003a78:	4b71      	ldr	r3, [pc, #452]	; (8003c40 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a80:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003a84:	d106      	bne.n	8003a94 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
 8003a86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a88:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003a8c:	d102      	bne.n	8003a94 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8003a8e:	4b6f      	ldr	r3, [pc, #444]	; (8003c4c <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 8003a90:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003a92:	e003      	b.n	8003a9c <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8003a94:	2300      	movs	r3, #0
 8003a96:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8003a98:	f000 bc31 	b.w	80042fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8003a9c:	f000 bc2f 	b.w	80042fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8003aa0:	4b6b      	ldr	r3, [pc, #428]	; (8003c50 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 8003aa2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8003aa4:	f000 bc2b 	b.w	80042fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 8003aa8:	2300      	movs	r3, #0
 8003aaa:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8003aac:	f000 bc27 	b.w	80042fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003ab6:	f040 8095 	bne.w	8003be4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>
    {

      saiclocksource= __HAL_RCC_GET_SAI23_SOURCE();
 8003aba:	4b61      	ldr	r3, [pc, #388]	; (8003c40 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8003abc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003abe:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 8003ac2:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8003ac4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ac6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003aca:	d04d      	beq.n	8003b68 <HAL_RCCEx_GetPeriphCLKFreq+0x1f4>
 8003acc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ace:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003ad2:	f200 8084 	bhi.w	8003bde <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 8003ad6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ad8:	2bc0      	cmp	r3, #192	; 0xc0
 8003ada:	d07d      	beq.n	8003bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 8003adc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ade:	2bc0      	cmp	r3, #192	; 0xc0
 8003ae0:	d87d      	bhi.n	8003bde <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 8003ae2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ae4:	2b80      	cmp	r3, #128	; 0x80
 8003ae6:	d02d      	beq.n	8003b44 <HAL_RCCEx_GetPeriphCLKFreq+0x1d0>
 8003ae8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003aea:	2b80      	cmp	r3, #128	; 0x80
 8003aec:	d877      	bhi.n	8003bde <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 8003aee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d003      	beq.n	8003afc <HAL_RCCEx_GetPeriphCLKFreq+0x188>
 8003af4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003af6:	2b40      	cmp	r3, #64	; 0x40
 8003af8:	d012      	beq.n	8003b20 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
 8003afa:	e070      	b.n	8003bde <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
      {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8003afc:	4b50      	ldr	r3, [pc, #320]	; (8003c40 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b04:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003b08:	d107      	bne.n	8003b1a <HAL_RCCEx_GetPeriphCLKFreq+0x1a6>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8003b0a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003b0e:	4618      	mov	r0, r3
 8003b10:	f000 fec0 	bl	8004894 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8003b14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b16:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8003b18:	e3f1      	b.n	80042fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8003b1a:	2300      	movs	r3, #0
 8003b1c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8003b1e:	e3ee      	b.n	80042fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8003b20:	4b47      	ldr	r3, [pc, #284]	; (8003c40 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003b28:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003b2c:	d107      	bne.n	8003b3e <HAL_RCCEx_GetPeriphCLKFreq+0x1ca>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8003b2e:	f107 0318 	add.w	r3, r7, #24
 8003b32:	4618      	mov	r0, r3
 8003b34:	f000 fc06 	bl	8004344 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8003b38:	69bb      	ldr	r3, [r7, #24]
 8003b3a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8003b3c:	e3df      	b.n	80042fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8003b3e:	2300      	movs	r3, #0
 8003b40:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8003b42:	e3dc      	b.n	80042fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8003b44:	4b3e      	ldr	r3, [pc, #248]	; (8003c40 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003b4c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003b50:	d107      	bne.n	8003b62 <HAL_RCCEx_GetPeriphCLKFreq+0x1ee>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8003b52:	f107 030c 	add.w	r3, r7, #12
 8003b56:	4618      	mov	r0, r3
 8003b58:	f000 fd48 	bl	80045ec <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8003b60:	e3cd      	b.n	80042fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8003b62:	2300      	movs	r3, #0
 8003b64:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8003b66:	e3ca      	b.n	80042fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8003b68:	4b35      	ldr	r3, [pc, #212]	; (8003c40 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8003b6a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b6c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003b70:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8003b72:	4b33      	ldr	r3, [pc, #204]	; (8003c40 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f003 0304 	and.w	r3, r3, #4
 8003b7a:	2b04      	cmp	r3, #4
 8003b7c:	d10c      	bne.n	8003b98 <HAL_RCCEx_GetPeriphCLKFreq+0x224>
 8003b7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d109      	bne.n	8003b98 <HAL_RCCEx_GetPeriphCLKFreq+0x224>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003b84:	4b2e      	ldr	r3, [pc, #184]	; (8003c40 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	08db      	lsrs	r3, r3, #3
 8003b8a:	f003 0303 	and.w	r3, r3, #3
 8003b8e:	4a2d      	ldr	r2, [pc, #180]	; (8003c44 <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>)
 8003b90:	fa22 f303 	lsr.w	r3, r2, r3
 8003b94:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003b96:	e01e      	b.n	8003bd6 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8003b98:	4b29      	ldr	r3, [pc, #164]	; (8003c40 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ba0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003ba4:	d106      	bne.n	8003bb4 <HAL_RCCEx_GetPeriphCLKFreq+0x240>
 8003ba6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ba8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003bac:	d102      	bne.n	8003bb4 <HAL_RCCEx_GetPeriphCLKFreq+0x240>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8003bae:	4b26      	ldr	r3, [pc, #152]	; (8003c48 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 8003bb0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003bb2:	e010      	b.n	8003bd6 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8003bb4:	4b22      	ldr	r3, [pc, #136]	; (8003c40 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bbc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003bc0:	d106      	bne.n	8003bd0 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
 8003bc2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003bc4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003bc8:	d102      	bne.n	8003bd0 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8003bca:	4b20      	ldr	r3, [pc, #128]	; (8003c4c <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 8003bcc:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003bce:	e002      	b.n	8003bd6 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8003bd0:	2300      	movs	r3, #0
 8003bd2:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8003bd4:	e393      	b.n	80042fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8003bd6:	e392      	b.n	80042fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8003bd8:	4b1d      	ldr	r3, [pc, #116]	; (8003c50 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 8003bda:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8003bdc:	e38f      	b.n	80042fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 8003bde:	2300      	movs	r3, #0
 8003be0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8003be2:	e38c      	b.n	80042fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003bea:	f040 80a7 	bne.w	8003d3c <HAL_RCCEx_GetPeriphCLKFreq+0x3c8>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 8003bee:	4b14      	ldr	r3, [pc, #80]	; (8003c40 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8003bf0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bf2:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 8003bf6:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8003bf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bfa:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003bfe:	d05f      	beq.n	8003cc0 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 8003c00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c02:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003c06:	f200 8096 	bhi.w	8003d36 <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 8003c0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c0c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8003c10:	f000 808e 	beq.w	8003d30 <HAL_RCCEx_GetPeriphCLKFreq+0x3bc>
 8003c14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c16:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8003c1a:	f200 808c 	bhi.w	8003d36 <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 8003c1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c20:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003c24:	d03a      	beq.n	8003c9c <HAL_RCCEx_GetPeriphCLKFreq+0x328>
 8003c26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c28:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003c2c:	f200 8083 	bhi.w	8003d36 <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 8003c30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d00e      	beq.n	8003c54 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>
 8003c36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c38:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003c3c:	d01c      	beq.n	8003c78 <HAL_RCCEx_GetPeriphCLKFreq+0x304>
 8003c3e:	e07a      	b.n	8003d36 <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 8003c40:	58024400 	.word	0x58024400
 8003c44:	03d09000 	.word	0x03d09000
 8003c48:	003d0900 	.word	0x003d0900
 8003c4c:	0112a880 	.word	0x0112a880
 8003c50:	00bb8000 	.word	0x00bb8000
      {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8003c54:	4baa      	ldr	r3, [pc, #680]	; (8003f00 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c5c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003c60:	d107      	bne.n	8003c72 <HAL_RCCEx_GetPeriphCLKFreq+0x2fe>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8003c62:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003c66:	4618      	mov	r0, r3
 8003c68:	f000 fe14 	bl	8004894 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8003c6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c6e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8003c70:	e345      	b.n	80042fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8003c72:	2300      	movs	r3, #0
 8003c74:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8003c76:	e342      	b.n	80042fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8003c78:	4ba1      	ldr	r3, [pc, #644]	; (8003f00 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003c80:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003c84:	d107      	bne.n	8003c96 <HAL_RCCEx_GetPeriphCLKFreq+0x322>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8003c86:	f107 0318 	add.w	r3, r7, #24
 8003c8a:	4618      	mov	r0, r3
 8003c8c:	f000 fb5a 	bl	8004344 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8003c90:	69bb      	ldr	r3, [r7, #24]
 8003c92:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8003c94:	e333      	b.n	80042fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8003c96:	2300      	movs	r3, #0
 8003c98:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8003c9a:	e330      	b.n	80042fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8003c9c:	4b98      	ldr	r3, [pc, #608]	; (8003f00 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003ca4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003ca8:	d107      	bne.n	8003cba <HAL_RCCEx_GetPeriphCLKFreq+0x346>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8003caa:	f107 030c 	add.w	r3, r7, #12
 8003cae:	4618      	mov	r0, r3
 8003cb0:	f000 fc9c 	bl	80045ec <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8003cb8:	e321      	b.n	80042fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8003cba:	2300      	movs	r3, #0
 8003cbc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8003cbe:	e31e      	b.n	80042fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8003cc0:	4b8f      	ldr	r3, [pc, #572]	; (8003f00 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8003cc2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003cc4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003cc8:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8003cca:	4b8d      	ldr	r3, [pc, #564]	; (8003f00 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	f003 0304 	and.w	r3, r3, #4
 8003cd2:	2b04      	cmp	r3, #4
 8003cd4:	d10c      	bne.n	8003cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x37c>
 8003cd6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d109      	bne.n	8003cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x37c>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003cdc:	4b88      	ldr	r3, [pc, #544]	; (8003f00 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	08db      	lsrs	r3, r3, #3
 8003ce2:	f003 0303 	and.w	r3, r3, #3
 8003ce6:	4a87      	ldr	r2, [pc, #540]	; (8003f04 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8003ce8:	fa22 f303 	lsr.w	r3, r2, r3
 8003cec:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003cee:	e01e      	b.n	8003d2e <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8003cf0:	4b83      	ldr	r3, [pc, #524]	; (8003f00 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cf8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003cfc:	d106      	bne.n	8003d0c <HAL_RCCEx_GetPeriphCLKFreq+0x398>
 8003cfe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d00:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003d04:	d102      	bne.n	8003d0c <HAL_RCCEx_GetPeriphCLKFreq+0x398>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8003d06:	4b80      	ldr	r3, [pc, #512]	; (8003f08 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8003d08:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003d0a:	e010      	b.n	8003d2e <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8003d0c:	4b7c      	ldr	r3, [pc, #496]	; (8003f00 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d14:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003d18:	d106      	bne.n	8003d28 <HAL_RCCEx_GetPeriphCLKFreq+0x3b4>
 8003d1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d1c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003d20:	d102      	bne.n	8003d28 <HAL_RCCEx_GetPeriphCLKFreq+0x3b4>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8003d22:	4b7a      	ldr	r3, [pc, #488]	; (8003f0c <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8003d24:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003d26:	e002      	b.n	8003d2e <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8003d28:	2300      	movs	r3, #0
 8003d2a:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8003d2c:	e2e7      	b.n	80042fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8003d2e:	e2e6      	b.n	80042fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8003d30:	4b77      	ldr	r3, [pc, #476]	; (8003f10 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8003d32:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8003d34:	e2e3      	b.n	80042fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 8003d36:	2300      	movs	r3, #0
 8003d38:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8003d3a:	e2e0      	b.n	80042fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003d42:	f040 809c 	bne.w	8003e7e <HAL_RCCEx_GetPeriphCLKFreq+0x50a>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 8003d46:	4b6e      	ldr	r3, [pc, #440]	; (8003f00 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8003d48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d4a:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8003d4e:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8003d50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d52:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003d56:	d054      	beq.n	8003e02 <HAL_RCCEx_GetPeriphCLKFreq+0x48e>
 8003d58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d5a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003d5e:	f200 808b 	bhi.w	8003e78 <HAL_RCCEx_GetPeriphCLKFreq+0x504>
 8003d62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d64:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003d68:	f000 8083 	beq.w	8003e72 <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
 8003d6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d6e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003d72:	f200 8081 	bhi.w	8003e78 <HAL_RCCEx_GetPeriphCLKFreq+0x504>
 8003d76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d78:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003d7c:	d02f      	beq.n	8003dde <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
 8003d7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d80:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003d84:	d878      	bhi.n	8003e78 <HAL_RCCEx_GetPeriphCLKFreq+0x504>
 8003d86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d004      	beq.n	8003d96 <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 8003d8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d8e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003d92:	d012      	beq.n	8003dba <HAL_RCCEx_GetPeriphCLKFreq+0x446>
 8003d94:	e070      	b.n	8003e78 <HAL_RCCEx_GetPeriphCLKFreq+0x504>
      {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8003d96:	4b5a      	ldr	r3, [pc, #360]	; (8003f00 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d9e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003da2:	d107      	bne.n	8003db4 <HAL_RCCEx_GetPeriphCLKFreq+0x440>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8003da4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003da8:	4618      	mov	r0, r3
 8003daa:	f000 fd73 	bl	8004894 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8003dae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003db0:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8003db2:	e2a4      	b.n	80042fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8003db4:	2300      	movs	r3, #0
 8003db6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8003db8:	e2a1      	b.n	80042fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8003dba:	4b51      	ldr	r3, [pc, #324]	; (8003f00 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003dc2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003dc6:	d107      	bne.n	8003dd8 <HAL_RCCEx_GetPeriphCLKFreq+0x464>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8003dc8:	f107 0318 	add.w	r3, r7, #24
 8003dcc:	4618      	mov	r0, r3
 8003dce:	f000 fab9 	bl	8004344 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8003dd2:	69bb      	ldr	r3, [r7, #24]
 8003dd4:	63fb      	str	r3, [r7, #60]	; 0x3c
          }
         else
         {
           frequency = 0;
         }
          break;
 8003dd6:	e292      	b.n	80042fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8003dd8:	2300      	movs	r3, #0
 8003dda:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8003ddc:	e28f      	b.n	80042fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8003dde:	4b48      	ldr	r3, [pc, #288]	; (8003f00 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003de6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003dea:	d107      	bne.n	8003dfc <HAL_RCCEx_GetPeriphCLKFreq+0x488>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8003dec:	f107 030c 	add.w	r3, r7, #12
 8003df0:	4618      	mov	r0, r3
 8003df2:	f000 fbfb 	bl	80045ec <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8003dfa:	e280      	b.n	80042fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8003dfc:	2300      	movs	r3, #0
 8003dfe:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8003e00:	e27d      	b.n	80042fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8003e02:	4b3f      	ldr	r3, [pc, #252]	; (8003f00 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8003e04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e06:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003e0a:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8003e0c:	4b3c      	ldr	r3, [pc, #240]	; (8003f00 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	f003 0304 	and.w	r3, r3, #4
 8003e14:	2b04      	cmp	r3, #4
 8003e16:	d10c      	bne.n	8003e32 <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
 8003e18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d109      	bne.n	8003e32 <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003e1e:	4b38      	ldr	r3, [pc, #224]	; (8003f00 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	08db      	lsrs	r3, r3, #3
 8003e24:	f003 0303 	and.w	r3, r3, #3
 8003e28:	4a36      	ldr	r2, [pc, #216]	; (8003f04 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8003e2a:	fa22 f303 	lsr.w	r3, r2, r3
 8003e2e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003e30:	e01e      	b.n	8003e70 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8003e32:	4b33      	ldr	r3, [pc, #204]	; (8003f00 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e3a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003e3e:	d106      	bne.n	8003e4e <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
 8003e40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e42:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003e46:	d102      	bne.n	8003e4e <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8003e48:	4b2f      	ldr	r3, [pc, #188]	; (8003f08 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8003e4a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003e4c:	e010      	b.n	8003e70 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8003e4e:	4b2c      	ldr	r3, [pc, #176]	; (8003f00 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e56:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003e5a:	d106      	bne.n	8003e6a <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
 8003e5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e5e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003e62:	d102      	bne.n	8003e6a <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8003e64:	4b29      	ldr	r3, [pc, #164]	; (8003f0c <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8003e66:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003e68:	e002      	b.n	8003e70 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8003e6a:	2300      	movs	r3, #0
 8003e6c:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8003e6e:	e246      	b.n	80042fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8003e70:	e245      	b.n	80042fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8003e72:	4b27      	ldr	r3, [pc, #156]	; (8003f10 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8003e74:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8003e76:	e242      	b.n	80042fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 8003e78:	2300      	movs	r3, #0
 8003e7a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8003e7c:	e23f      	b.n	80042fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e84:	f040 80a8 	bne.w	8003fd8 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 8003e88:	4b1d      	ldr	r3, [pc, #116]	; (8003f00 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8003e8a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e8c:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8003e90:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8003e92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e94:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003e98:	d060      	beq.n	8003f5c <HAL_RCCEx_GetPeriphCLKFreq+0x5e8>
 8003e9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e9c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003ea0:	f200 8097 	bhi.w	8003fd2 <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
 8003ea4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ea6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003eaa:	f000 808f 	beq.w	8003fcc <HAL_RCCEx_GetPeriphCLKFreq+0x658>
 8003eae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003eb0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003eb4:	f200 808d 	bhi.w	8003fd2 <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
 8003eb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003eba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003ebe:	d03b      	beq.n	8003f38 <HAL_RCCEx_GetPeriphCLKFreq+0x5c4>
 8003ec0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ec2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003ec6:	f200 8084 	bhi.w	8003fd2 <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
 8003eca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d004      	beq.n	8003eda <HAL_RCCEx_GetPeriphCLKFreq+0x566>
 8003ed0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ed2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ed6:	d01d      	beq.n	8003f14 <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>
 8003ed8:	e07b      	b.n	8003fd2 <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8003eda:	4b09      	ldr	r3, [pc, #36]	; (8003f00 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ee2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003ee6:	d107      	bne.n	8003ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x584>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8003ee8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003eec:	4618      	mov	r0, r3
 8003eee:	f000 fcd1 	bl	8004894 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8003ef2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ef4:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8003ef6:	e202      	b.n	80042fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8003ef8:	2300      	movs	r3, #0
 8003efa:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8003efc:	e1ff      	b.n	80042fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8003efe:	bf00      	nop
 8003f00:	58024400 	.word	0x58024400
 8003f04:	03d09000 	.word	0x03d09000
 8003f08:	003d0900 	.word	0x003d0900
 8003f0c:	0112a880 	.word	0x0112a880
 8003f10:	00bb8000 	.word	0x00bb8000
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8003f14:	4ba3      	ldr	r3, [pc, #652]	; (80041a4 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003f1c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003f20:	d107      	bne.n	8003f32 <HAL_RCCEx_GetPeriphCLKFreq+0x5be>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8003f22:	f107 0318 	add.w	r3, r7, #24
 8003f26:	4618      	mov	r0, r3
 8003f28:	f000 fa0c 	bl	8004344 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8003f2c:	69bb      	ldr	r3, [r7, #24]
 8003f2e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8003f30:	e1e5      	b.n	80042fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8003f32:	2300      	movs	r3, #0
 8003f34:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8003f36:	e1e2      	b.n	80042fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8003f38:	4b9a      	ldr	r3, [pc, #616]	; (80041a4 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003f40:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003f44:	d107      	bne.n	8003f56 <HAL_RCCEx_GetPeriphCLKFreq+0x5e2>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8003f46:	f107 030c 	add.w	r3, r7, #12
 8003f4a:	4618      	mov	r0, r3
 8003f4c:	f000 fb4e 	bl	80045ec <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8003f54:	e1d3      	b.n	80042fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8003f56:	2300      	movs	r3, #0
 8003f58:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8003f5a:	e1d0      	b.n	80042fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8003f5c:	4b91      	ldr	r3, [pc, #580]	; (80041a4 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8003f5e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f60:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003f64:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8003f66:	4b8f      	ldr	r3, [pc, #572]	; (80041a4 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	f003 0304 	and.w	r3, r3, #4
 8003f6e:	2b04      	cmp	r3, #4
 8003f70:	d10c      	bne.n	8003f8c <HAL_RCCEx_GetPeriphCLKFreq+0x618>
 8003f72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d109      	bne.n	8003f8c <HAL_RCCEx_GetPeriphCLKFreq+0x618>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003f78:	4b8a      	ldr	r3, [pc, #552]	; (80041a4 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	08db      	lsrs	r3, r3, #3
 8003f7e:	f003 0303 	and.w	r3, r3, #3
 8003f82:	4a89      	ldr	r2, [pc, #548]	; (80041a8 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8003f84:	fa22 f303 	lsr.w	r3, r2, r3
 8003f88:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003f8a:	e01e      	b.n	8003fca <HAL_RCCEx_GetPeriphCLKFreq+0x656>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8003f8c:	4b85      	ldr	r3, [pc, #532]	; (80041a4 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f94:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003f98:	d106      	bne.n	8003fa8 <HAL_RCCEx_GetPeriphCLKFreq+0x634>
 8003f9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f9c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003fa0:	d102      	bne.n	8003fa8 <HAL_RCCEx_GetPeriphCLKFreq+0x634>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8003fa2:	4b82      	ldr	r3, [pc, #520]	; (80041ac <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 8003fa4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003fa6:	e010      	b.n	8003fca <HAL_RCCEx_GetPeriphCLKFreq+0x656>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8003fa8:	4b7e      	ldr	r3, [pc, #504]	; (80041a4 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fb0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003fb4:	d106      	bne.n	8003fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 8003fb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003fb8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003fbc:	d102      	bne.n	8003fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8003fbe:	4b7c      	ldr	r3, [pc, #496]	; (80041b0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8003fc0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003fc2:	e002      	b.n	8003fca <HAL_RCCEx_GetPeriphCLKFreq+0x656>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8003fc4:	2300      	movs	r3, #0
 8003fc6:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8003fc8:	e199      	b.n	80042fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8003fca:	e198      	b.n	80042fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8003fcc:	4b79      	ldr	r3, [pc, #484]	; (80041b4 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8003fce:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8003fd0:	e195      	b.n	80042fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 8003fd2:	2300      	movs	r3, #0
 8003fd4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8003fd6:	e192      	b.n	80042fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003fde:	d173      	bne.n	80040c8 <HAL_RCCEx_GetPeriphCLKFreq+0x754>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 8003fe0:	4b70      	ldr	r3, [pc, #448]	; (80041a4 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8003fe2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fe4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003fe8:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8003fea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fec:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003ff0:	d02f      	beq.n	8004052 <HAL_RCCEx_GetPeriphCLKFreq+0x6de>
 8003ff2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ff4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003ff8:	d863      	bhi.n	80040c2 <HAL_RCCEx_GetPeriphCLKFreq+0x74e>
 8003ffa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d004      	beq.n	800400a <HAL_RCCEx_GetPeriphCLKFreq+0x696>
 8004000:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004002:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004006:	d012      	beq.n	800402e <HAL_RCCEx_GetPeriphCLKFreq+0x6ba>
 8004008:	e05b      	b.n	80040c2 <HAL_RCCEx_GetPeriphCLKFreq+0x74e>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800400a:	4b66      	ldr	r3, [pc, #408]	; (80041a4 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004012:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004016:	d107      	bne.n	8004028 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004018:	f107 0318 	add.w	r3, r7, #24
 800401c:	4618      	mov	r0, r3
 800401e:	f000 f991 	bl	8004344 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8004022:	69bb      	ldr	r3, [r7, #24]
 8004024:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8004026:	e16a      	b.n	80042fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8004028:	2300      	movs	r3, #0
 800402a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800402c:	e167      	b.n	80042fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800402e:	4b5d      	ldr	r3, [pc, #372]	; (80041a4 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004036:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800403a:	d107      	bne.n	800404c <HAL_RCCEx_GetPeriphCLKFreq+0x6d8>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800403c:	f107 030c 	add.w	r3, r7, #12
 8004040:	4618      	mov	r0, r3
 8004042:	f000 fad3 	bl	80045ec <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8004046:	697b      	ldr	r3, [r7, #20]
 8004048:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800404a:	e158      	b.n	80042fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800404c:	2300      	movs	r3, #0
 800404e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004050:	e155      	b.n	80042fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8004052:	4b54      	ldr	r3, [pc, #336]	; (80041a4 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8004054:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004056:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800405a:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800405c:	4b51      	ldr	r3, [pc, #324]	; (80041a4 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	f003 0304 	and.w	r3, r3, #4
 8004064:	2b04      	cmp	r3, #4
 8004066:	d10c      	bne.n	8004082 <HAL_RCCEx_GetPeriphCLKFreq+0x70e>
 8004068:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800406a:	2b00      	cmp	r3, #0
 800406c:	d109      	bne.n	8004082 <HAL_RCCEx_GetPeriphCLKFreq+0x70e>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800406e:	4b4d      	ldr	r3, [pc, #308]	; (80041a4 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	08db      	lsrs	r3, r3, #3
 8004074:	f003 0303 	and.w	r3, r3, #3
 8004078:	4a4b      	ldr	r2, [pc, #300]	; (80041a8 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800407a:	fa22 f303 	lsr.w	r3, r2, r3
 800407e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004080:	e01e      	b.n	80040c0 <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8004082:	4b48      	ldr	r3, [pc, #288]	; (80041a4 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800408a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800408e:	d106      	bne.n	800409e <HAL_RCCEx_GetPeriphCLKFreq+0x72a>
 8004090:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004092:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004096:	d102      	bne.n	800409e <HAL_RCCEx_GetPeriphCLKFreq+0x72a>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8004098:	4b44      	ldr	r3, [pc, #272]	; (80041ac <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 800409a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800409c:	e010      	b.n	80040c0 <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800409e:	4b41      	ldr	r3, [pc, #260]	; (80041a4 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040a6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80040aa:	d106      	bne.n	80040ba <HAL_RCCEx_GetPeriphCLKFreq+0x746>
 80040ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80040ae:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80040b2:	d102      	bne.n	80040ba <HAL_RCCEx_GetPeriphCLKFreq+0x746>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 80040b4:	4b3e      	ldr	r3, [pc, #248]	; (80041b0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80040b6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80040b8:	e002      	b.n	80040c0 <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 80040ba:	2300      	movs	r3, #0
 80040bc:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 80040be:	e11e      	b.n	80042fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 80040c0:	e11d      	b.n	80042fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 80040c2:	2300      	movs	r3, #0
 80040c4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80040c6:	e11a      	b.n	80042fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80040ce:	d133      	bne.n	8004138 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 80040d0:	4b34      	ldr	r3, [pc, #208]	; (80041a4 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80040d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80040d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80040d8:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 80040da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d004      	beq.n	80040ea <HAL_RCCEx_GetPeriphCLKFreq+0x776>
 80040e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040e2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80040e6:	d012      	beq.n	800410e <HAL_RCCEx_GetPeriphCLKFreq+0x79a>
 80040e8:	e023      	b.n	8004132 <HAL_RCCEx_GetPeriphCLKFreq+0x7be>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80040ea:	4b2e      	ldr	r3, [pc, #184]	; (80041a4 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040f2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80040f6:	d107      	bne.n	8004108 <HAL_RCCEx_GetPeriphCLKFreq+0x794>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80040f8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80040fc:	4618      	mov	r0, r3
 80040fe:	f000 fbc9 	bl	8004894 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8004102:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004104:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8004106:	e0fa      	b.n	80042fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8004108:	2300      	movs	r3, #0
 800410a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800410c:	e0f7      	b.n	80042fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800410e:	4b25      	ldr	r3, [pc, #148]	; (80041a4 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004116:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800411a:	d107      	bne.n	800412c <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800411c:	f107 0318 	add.w	r3, r7, #24
 8004120:	4618      	mov	r0, r3
 8004122:	f000 f90f 	bl	8004344 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8004126:	6a3b      	ldr	r3, [r7, #32]
 8004128:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800412a:	e0e8      	b.n	80042fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800412c:	2300      	movs	r3, #0
 800412e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004130:	e0e5      	b.n	80042fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 8004132:	2300      	movs	r3, #0
 8004134:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004136:	e0e2      	b.n	80042fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800413e:	f040 808f 	bne.w	8004260 <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 8004142:	4b18      	ldr	r3, [pc, #96]	; (80041a4 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8004144:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004146:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 800414a:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800414c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800414e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004152:	d075      	beq.n	8004240 <HAL_RCCEx_GetPeriphCLKFreq+0x8cc>
 8004154:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004156:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800415a:	d87e      	bhi.n	800425a <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 800415c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800415e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004162:	d060      	beq.n	8004226 <HAL_RCCEx_GetPeriphCLKFreq+0x8b2>
 8004164:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004166:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800416a:	d876      	bhi.n	800425a <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 800416c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800416e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004172:	d045      	beq.n	8004200 <HAL_RCCEx_GetPeriphCLKFreq+0x88c>
 8004174:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004176:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800417a:	d86e      	bhi.n	800425a <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 800417c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800417e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004182:	d02b      	beq.n	80041dc <HAL_RCCEx_GetPeriphCLKFreq+0x868>
 8004184:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004186:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800418a:	d866      	bhi.n	800425a <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 800418c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800418e:	2b00      	cmp	r3, #0
 8004190:	d004      	beq.n	800419c <HAL_RCCEx_GetPeriphCLKFreq+0x828>
 8004192:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004194:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004198:	d00e      	beq.n	80041b8 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
 800419a:	e05e      	b.n	800425a <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800419c:	f000 f8bc 	bl	8004318 <HAL_RCCEx_GetD3PCLK1Freq>
 80041a0:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 80041a2:	e0ac      	b.n	80042fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 80041a4:	58024400 	.word	0x58024400
 80041a8:	03d09000 	.word	0x03d09000
 80041ac:	003d0900 	.word	0x003d0900
 80041b0:	0112a880 	.word	0x0112a880
 80041b4:	00bb8000 	.word	0x00bb8000
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80041b8:	4b53      	ldr	r3, [pc, #332]	; (8004308 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80041c0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80041c4:	d107      	bne.n	80041d6 <HAL_RCCEx_GetPeriphCLKFreq+0x862>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80041c6:	f107 0318 	add.w	r3, r7, #24
 80041ca:	4618      	mov	r0, r3
 80041cc:	f000 f8ba 	bl	8004344 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80041d0:	69fb      	ldr	r3, [r7, #28]
 80041d2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80041d4:	e093      	b.n	80042fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80041d6:	2300      	movs	r3, #0
 80041d8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80041da:	e090      	b.n	80042fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80041dc:	4b4a      	ldr	r3, [pc, #296]	; (8004308 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80041e4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80041e8:	d107      	bne.n	80041fa <HAL_RCCEx_GetPeriphCLKFreq+0x886>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80041ea:	f107 030c 	add.w	r3, r7, #12
 80041ee:	4618      	mov	r0, r3
 80041f0:	f000 f9fc 	bl	80045ec <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80041f4:	693b      	ldr	r3, [r7, #16]
 80041f6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80041f8:	e081      	b.n	80042fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80041fa:	2300      	movs	r3, #0
 80041fc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80041fe:	e07e      	b.n	80042fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004200:	4b41      	ldr	r3, [pc, #260]	; (8004308 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	f003 0304 	and.w	r3, r3, #4
 8004208:	2b04      	cmp	r3, #4
 800420a:	d109      	bne.n	8004220 <HAL_RCCEx_GetPeriphCLKFreq+0x8ac>
         {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800420c:	4b3e      	ldr	r3, [pc, #248]	; (8004308 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	08db      	lsrs	r3, r3, #3
 8004212:	f003 0303 	and.w	r3, r3, #3
 8004216:	4a3d      	ldr	r2, [pc, #244]	; (800430c <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 8004218:	fa22 f303 	lsr.w	r3, r2, r3
 800421c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800421e:	e06e      	b.n	80042fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8004220:	2300      	movs	r3, #0
 8004222:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004224:	e06b      	b.n	80042fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8004226:	4b38      	ldr	r3, [pc, #224]	; (8004308 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800422e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004232:	d102      	bne.n	800423a <HAL_RCCEx_GetPeriphCLKFreq+0x8c6>
         {
          frequency = CSI_VALUE;
 8004234:	4b36      	ldr	r3, [pc, #216]	; (8004310 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8004236:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8004238:	e061      	b.n	80042fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800423a:	2300      	movs	r3, #0
 800423c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800423e:	e05e      	b.n	80042fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8004240:	4b31      	ldr	r3, [pc, #196]	; (8004308 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004248:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800424c:	d102      	bne.n	8004254 <HAL_RCCEx_GetPeriphCLKFreq+0x8e0>
         {
          frequency = HSE_VALUE;
 800424e:	4b31      	ldr	r3, [pc, #196]	; (8004314 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 8004250:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8004252:	e054      	b.n	80042fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8004254:	2300      	movs	r3, #0
 8004256:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004258:	e051      	b.n	80042fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 800425a:	2300      	movs	r3, #0
 800425c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800425e:	e04e      	b.n	80042fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004266:	d148      	bne.n	80042fa <HAL_RCCEx_GetPeriphCLKFreq+0x986>
    {
      /* Get FDCAN clock source */
      srcclk= __HAL_RCC_GET_FDCAN_SOURCE();
 8004268:	4b27      	ldr	r3, [pc, #156]	; (8004308 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800426a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800426c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004270:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8004272:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004274:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004278:	d02a      	beq.n	80042d0 <HAL_RCCEx_GetPeriphCLKFreq+0x95c>
 800427a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800427c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004280:	d838      	bhi.n	80042f4 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 8004282:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004284:	2b00      	cmp	r3, #0
 8004286:	d004      	beq.n	8004292 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 8004288:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800428a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800428e:	d00d      	beq.n	80042ac <HAL_RCCEx_GetPeriphCLKFreq+0x938>
 8004290:	e030      	b.n	80042f4 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
      {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8004292:	4b1d      	ldr	r3, [pc, #116]	; (8004308 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800429a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800429e:	d102      	bne.n	80042a6 <HAL_RCCEx_GetPeriphCLKFreq+0x932>
         {
          frequency = HSE_VALUE;
 80042a0:	4b1c      	ldr	r3, [pc, #112]	; (8004314 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 80042a2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80042a4:	e02b      	b.n	80042fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80042a6:	2300      	movs	r3, #0
 80042a8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80042aa:	e028      	b.n	80042fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80042ac:	4b16      	ldr	r3, [pc, #88]	; (8004308 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042b4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80042b8:	d107      	bne.n	80042ca <HAL_RCCEx_GetPeriphCLKFreq+0x956>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80042ba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80042be:	4618      	mov	r0, r3
 80042c0:	f000 fae8 	bl	8004894 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80042c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042c6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80042c8:	e019      	b.n	80042fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80042ca:	2300      	movs	r3, #0
 80042cc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80042ce:	e016      	b.n	80042fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80042d0:	4b0d      	ldr	r3, [pc, #52]	; (8004308 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80042d8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80042dc:	d107      	bne.n	80042ee <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80042de:	f107 0318 	add.w	r3, r7, #24
 80042e2:	4618      	mov	r0, r3
 80042e4:	f000 f82e 	bl	8004344 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80042e8:	69fb      	ldr	r3, [r7, #28]
 80042ea:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80042ec:	e007      	b.n	80042fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80042ee:	2300      	movs	r3, #0
 80042f0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80042f2:	e004      	b.n	80042fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 80042f4:	2300      	movs	r3, #0
 80042f6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80042f8:	e001      	b.n	80042fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else
    {
      frequency = 0;
 80042fa:	2300      	movs	r3, #0
 80042fc:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 80042fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8004300:	4618      	mov	r0, r3
 8004302:	3740      	adds	r7, #64	; 0x40
 8004304:	46bd      	mov	sp, r7
 8004306:	bd80      	pop	{r7, pc}
 8004308:	58024400 	.word	0x58024400
 800430c:	03d09000 	.word	0x03d09000
 8004310:	003d0900 	.word	0x003d0900
 8004314:	0112a880 	.word	0x0112a880

08004318 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8004318:	b580      	push	{r7, lr}
 800431a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800431c:	f7fe fb8e 	bl	8002a3c <HAL_RCC_GetHCLKFreq>
 8004320:	4602      	mov	r2, r0
 8004322:	4b06      	ldr	r3, [pc, #24]	; (800433c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8004324:	6a1b      	ldr	r3, [r3, #32]
 8004326:	091b      	lsrs	r3, r3, #4
 8004328:	f003 0307 	and.w	r3, r3, #7
 800432c:	4904      	ldr	r1, [pc, #16]	; (8004340 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800432e:	5ccb      	ldrb	r3, [r1, r3]
 8004330:	f003 031f 	and.w	r3, r3, #31
 8004334:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8004338:	4618      	mov	r0, r3
 800433a:	bd80      	pop	{r7, pc}
 800433c:	58024400 	.word	0x58024400
 8004340:	08007e94 	.word	0x08007e94

08004344 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8004344:	b480      	push	{r7}
 8004346:	b089      	sub	sp, #36	; 0x24
 8004348:	af00      	add	r7, sp, #0
 800434a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800434c:	4ba1      	ldr	r3, [pc, #644]	; (80045d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800434e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004350:	f003 0303 	and.w	r3, r3, #3
 8004354:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8004356:	4b9f      	ldr	r3, [pc, #636]	; (80045d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004358:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800435a:	0b1b      	lsrs	r3, r3, #12
 800435c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004360:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8004362:	4b9c      	ldr	r3, [pc, #624]	; (80045d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004364:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004366:	091b      	lsrs	r3, r3, #4
 8004368:	f003 0301 	and.w	r3, r3, #1
 800436c:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800436e:	4b99      	ldr	r3, [pc, #612]	; (80045d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004370:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004372:	08db      	lsrs	r3, r3, #3
 8004374:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004378:	693a      	ldr	r2, [r7, #16]
 800437a:	fb02 f303 	mul.w	r3, r2, r3
 800437e:	ee07 3a90 	vmov	s15, r3
 8004382:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004386:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800438a:	697b      	ldr	r3, [r7, #20]
 800438c:	2b00      	cmp	r3, #0
 800438e:	f000 8111 	beq.w	80045b4 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8004392:	69bb      	ldr	r3, [r7, #24]
 8004394:	2b02      	cmp	r3, #2
 8004396:	f000 8083 	beq.w	80044a0 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800439a:	69bb      	ldr	r3, [r7, #24]
 800439c:	2b02      	cmp	r3, #2
 800439e:	f200 80a1 	bhi.w	80044e4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80043a2:	69bb      	ldr	r3, [r7, #24]
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d003      	beq.n	80043b0 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80043a8:	69bb      	ldr	r3, [r7, #24]
 80043aa:	2b01      	cmp	r3, #1
 80043ac:	d056      	beq.n	800445c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80043ae:	e099      	b.n	80044e4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80043b0:	4b88      	ldr	r3, [pc, #544]	; (80045d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	f003 0320 	and.w	r3, r3, #32
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d02d      	beq.n	8004418 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80043bc:	4b85      	ldr	r3, [pc, #532]	; (80045d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	08db      	lsrs	r3, r3, #3
 80043c2:	f003 0303 	and.w	r3, r3, #3
 80043c6:	4a84      	ldr	r2, [pc, #528]	; (80045d8 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80043c8:	fa22 f303 	lsr.w	r3, r2, r3
 80043cc:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80043ce:	68bb      	ldr	r3, [r7, #8]
 80043d0:	ee07 3a90 	vmov	s15, r3
 80043d4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80043d8:	697b      	ldr	r3, [r7, #20]
 80043da:	ee07 3a90 	vmov	s15, r3
 80043de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80043e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80043e6:	4b7b      	ldr	r3, [pc, #492]	; (80045d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80043e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80043ee:	ee07 3a90 	vmov	s15, r3
 80043f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80043f6:	ed97 6a03 	vldr	s12, [r7, #12]
 80043fa:	eddf 5a78 	vldr	s11, [pc, #480]	; 80045dc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80043fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004402:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004406:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800440a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800440e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004412:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8004416:	e087      	b.n	8004528 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004418:	697b      	ldr	r3, [r7, #20]
 800441a:	ee07 3a90 	vmov	s15, r3
 800441e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004422:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80045e0 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8004426:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800442a:	4b6a      	ldr	r3, [pc, #424]	; (80045d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800442c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800442e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004432:	ee07 3a90 	vmov	s15, r3
 8004436:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800443a:	ed97 6a03 	vldr	s12, [r7, #12]
 800443e:	eddf 5a67 	vldr	s11, [pc, #412]	; 80045dc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004442:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004446:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800444a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800444e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004452:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004456:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800445a:	e065      	b.n	8004528 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800445c:	697b      	ldr	r3, [r7, #20]
 800445e:	ee07 3a90 	vmov	s15, r3
 8004462:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004466:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80045e4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800446a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800446e:	4b59      	ldr	r3, [pc, #356]	; (80045d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004470:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004472:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004476:	ee07 3a90 	vmov	s15, r3
 800447a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800447e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004482:	eddf 5a56 	vldr	s11, [pc, #344]	; 80045dc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004486:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800448a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800448e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004492:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004496:	ee67 7a27 	vmul.f32	s15, s14, s15
 800449a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800449e:	e043      	b.n	8004528 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80044a0:	697b      	ldr	r3, [r7, #20]
 80044a2:	ee07 3a90 	vmov	s15, r3
 80044a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80044aa:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80045e8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80044ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80044b2:	4b48      	ldr	r3, [pc, #288]	; (80045d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80044b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80044ba:	ee07 3a90 	vmov	s15, r3
 80044be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80044c2:	ed97 6a03 	vldr	s12, [r7, #12]
 80044c6:	eddf 5a45 	vldr	s11, [pc, #276]	; 80045dc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80044ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80044ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80044d2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80044d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80044da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80044de:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80044e2:	e021      	b.n	8004528 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80044e4:	697b      	ldr	r3, [r7, #20]
 80044e6:	ee07 3a90 	vmov	s15, r3
 80044ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80044ee:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80045e4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80044f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80044f6:	4b37      	ldr	r3, [pc, #220]	; (80045d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80044f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80044fe:	ee07 3a90 	vmov	s15, r3
 8004502:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004506:	ed97 6a03 	vldr	s12, [r7, #12]
 800450a:	eddf 5a34 	vldr	s11, [pc, #208]	; 80045dc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800450e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004512:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004516:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800451a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800451e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004522:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004526:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8004528:	4b2a      	ldr	r3, [pc, #168]	; (80045d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800452a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800452c:	0a5b      	lsrs	r3, r3, #9
 800452e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004532:	ee07 3a90 	vmov	s15, r3
 8004536:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800453a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800453e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004542:	edd7 6a07 	vldr	s13, [r7, #28]
 8004546:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800454a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800454e:	ee17 2a90 	vmov	r2, s15
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8004556:	4b1f      	ldr	r3, [pc, #124]	; (80045d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004558:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800455a:	0c1b      	lsrs	r3, r3, #16
 800455c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004560:	ee07 3a90 	vmov	s15, r3
 8004564:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004568:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800456c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004570:	edd7 6a07 	vldr	s13, [r7, #28]
 8004574:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004578:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800457c:	ee17 2a90 	vmov	r2, s15
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8004584:	4b13      	ldr	r3, [pc, #76]	; (80045d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004586:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004588:	0e1b      	lsrs	r3, r3, #24
 800458a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800458e:	ee07 3a90 	vmov	s15, r3
 8004592:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004596:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800459a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800459e:	edd7 6a07 	vldr	s13, [r7, #28]
 80045a2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80045a6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80045aa:	ee17 2a90 	vmov	r2, s15
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80045b2:	e008      	b.n	80045c6 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	2200      	movs	r2, #0
 80045b8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	2200      	movs	r2, #0
 80045be:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	2200      	movs	r2, #0
 80045c4:	609a      	str	r2, [r3, #8]
}
 80045c6:	bf00      	nop
 80045c8:	3724      	adds	r7, #36	; 0x24
 80045ca:	46bd      	mov	sp, r7
 80045cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d0:	4770      	bx	lr
 80045d2:	bf00      	nop
 80045d4:	58024400 	.word	0x58024400
 80045d8:	03d09000 	.word	0x03d09000
 80045dc:	46000000 	.word	0x46000000
 80045e0:	4c742400 	.word	0x4c742400
 80045e4:	4a742400 	.word	0x4a742400
 80045e8:	4b895440 	.word	0x4b895440

080045ec <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 80045ec:	b480      	push	{r7}
 80045ee:	b089      	sub	sp, #36	; 0x24
 80045f0:	af00      	add	r7, sp, #0
 80045f2:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80045f4:	4ba1      	ldr	r3, [pc, #644]	; (800487c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80045f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045f8:	f003 0303 	and.w	r3, r3, #3
 80045fc:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 80045fe:	4b9f      	ldr	r3, [pc, #636]	; (800487c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004600:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004602:	0d1b      	lsrs	r3, r3, #20
 8004604:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004608:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800460a:	4b9c      	ldr	r3, [pc, #624]	; (800487c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800460c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800460e:	0a1b      	lsrs	r3, r3, #8
 8004610:	f003 0301 	and.w	r3, r3, #1
 8004614:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8004616:	4b99      	ldr	r3, [pc, #612]	; (800487c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004618:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800461a:	08db      	lsrs	r3, r3, #3
 800461c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004620:	693a      	ldr	r2, [r7, #16]
 8004622:	fb02 f303 	mul.w	r3, r2, r3
 8004626:	ee07 3a90 	vmov	s15, r3
 800462a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800462e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8004632:	697b      	ldr	r3, [r7, #20]
 8004634:	2b00      	cmp	r3, #0
 8004636:	f000 8111 	beq.w	800485c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800463a:	69bb      	ldr	r3, [r7, #24]
 800463c:	2b02      	cmp	r3, #2
 800463e:	f000 8083 	beq.w	8004748 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8004642:	69bb      	ldr	r3, [r7, #24]
 8004644:	2b02      	cmp	r3, #2
 8004646:	f200 80a1 	bhi.w	800478c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800464a:	69bb      	ldr	r3, [r7, #24]
 800464c:	2b00      	cmp	r3, #0
 800464e:	d003      	beq.n	8004658 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8004650:	69bb      	ldr	r3, [r7, #24]
 8004652:	2b01      	cmp	r3, #1
 8004654:	d056      	beq.n	8004704 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8004656:	e099      	b.n	800478c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004658:	4b88      	ldr	r3, [pc, #544]	; (800487c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	f003 0320 	and.w	r3, r3, #32
 8004660:	2b00      	cmp	r3, #0
 8004662:	d02d      	beq.n	80046c0 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004664:	4b85      	ldr	r3, [pc, #532]	; (800487c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	08db      	lsrs	r3, r3, #3
 800466a:	f003 0303 	and.w	r3, r3, #3
 800466e:	4a84      	ldr	r2, [pc, #528]	; (8004880 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8004670:	fa22 f303 	lsr.w	r3, r2, r3
 8004674:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004676:	68bb      	ldr	r3, [r7, #8]
 8004678:	ee07 3a90 	vmov	s15, r3
 800467c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004680:	697b      	ldr	r3, [r7, #20]
 8004682:	ee07 3a90 	vmov	s15, r3
 8004686:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800468a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800468e:	4b7b      	ldr	r3, [pc, #492]	; (800487c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004690:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004692:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004696:	ee07 3a90 	vmov	s15, r3
 800469a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800469e:	ed97 6a03 	vldr	s12, [r7, #12]
 80046a2:	eddf 5a78 	vldr	s11, [pc, #480]	; 8004884 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80046a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80046aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80046ae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80046b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80046b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80046ba:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80046be:	e087      	b.n	80047d0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80046c0:	697b      	ldr	r3, [r7, #20]
 80046c2:	ee07 3a90 	vmov	s15, r3
 80046c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80046ca:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8004888 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80046ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80046d2:	4b6a      	ldr	r3, [pc, #424]	; (800487c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80046d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80046da:	ee07 3a90 	vmov	s15, r3
 80046de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80046e2:	ed97 6a03 	vldr	s12, [r7, #12]
 80046e6:	eddf 5a67 	vldr	s11, [pc, #412]	; 8004884 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80046ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80046ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80046f2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80046f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80046fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80046fe:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004702:	e065      	b.n	80047d0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004704:	697b      	ldr	r3, [r7, #20]
 8004706:	ee07 3a90 	vmov	s15, r3
 800470a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800470e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800488c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004712:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004716:	4b59      	ldr	r3, [pc, #356]	; (800487c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004718:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800471a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800471e:	ee07 3a90 	vmov	s15, r3
 8004722:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004726:	ed97 6a03 	vldr	s12, [r7, #12]
 800472a:	eddf 5a56 	vldr	s11, [pc, #344]	; 8004884 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800472e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004732:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004736:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800473a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800473e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004742:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004746:	e043      	b.n	80047d0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004748:	697b      	ldr	r3, [r7, #20]
 800474a:	ee07 3a90 	vmov	s15, r3
 800474e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004752:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8004890 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8004756:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800475a:	4b48      	ldr	r3, [pc, #288]	; (800487c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800475c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800475e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004762:	ee07 3a90 	vmov	s15, r3
 8004766:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800476a:	ed97 6a03 	vldr	s12, [r7, #12]
 800476e:	eddf 5a45 	vldr	s11, [pc, #276]	; 8004884 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004772:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004776:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800477a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800477e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004782:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004786:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800478a:	e021      	b.n	80047d0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800478c:	697b      	ldr	r3, [r7, #20]
 800478e:	ee07 3a90 	vmov	s15, r3
 8004792:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004796:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800488c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800479a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800479e:	4b37      	ldr	r3, [pc, #220]	; (800487c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80047a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80047a6:	ee07 3a90 	vmov	s15, r3
 80047aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80047ae:	ed97 6a03 	vldr	s12, [r7, #12]
 80047b2:	eddf 5a34 	vldr	s11, [pc, #208]	; 8004884 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80047b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80047ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80047be:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80047c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80047c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80047ca:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80047ce:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 80047d0:	4b2a      	ldr	r3, [pc, #168]	; (800487c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80047d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047d4:	0a5b      	lsrs	r3, r3, #9
 80047d6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80047da:	ee07 3a90 	vmov	s15, r3
 80047de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80047e2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80047e6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80047ea:	edd7 6a07 	vldr	s13, [r7, #28]
 80047ee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80047f2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80047f6:	ee17 2a90 	vmov	r2, s15
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 80047fe:	4b1f      	ldr	r3, [pc, #124]	; (800487c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004800:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004802:	0c1b      	lsrs	r3, r3, #16
 8004804:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004808:	ee07 3a90 	vmov	s15, r3
 800480c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004810:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004814:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004818:	edd7 6a07 	vldr	s13, [r7, #28]
 800481c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004820:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004824:	ee17 2a90 	vmov	r2, s15
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 800482c:	4b13      	ldr	r3, [pc, #76]	; (800487c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800482e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004830:	0e1b      	lsrs	r3, r3, #24
 8004832:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004836:	ee07 3a90 	vmov	s15, r3
 800483a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800483e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004842:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004846:	edd7 6a07 	vldr	s13, [r7, #28]
 800484a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800484e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004852:	ee17 2a90 	vmov	r2, s15
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800485a:	e008      	b.n	800486e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	2200      	movs	r2, #0
 8004860:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	2200      	movs	r2, #0
 8004866:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	2200      	movs	r2, #0
 800486c:	609a      	str	r2, [r3, #8]
}
 800486e:	bf00      	nop
 8004870:	3724      	adds	r7, #36	; 0x24
 8004872:	46bd      	mov	sp, r7
 8004874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004878:	4770      	bx	lr
 800487a:	bf00      	nop
 800487c:	58024400 	.word	0x58024400
 8004880:	03d09000 	.word	0x03d09000
 8004884:	46000000 	.word	0x46000000
 8004888:	4c742400 	.word	0x4c742400
 800488c:	4a742400 	.word	0x4a742400
 8004890:	4b895440 	.word	0x4b895440

08004894 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 8004894:	b480      	push	{r7}
 8004896:	b089      	sub	sp, #36	; 0x24
 8004898:	af00      	add	r7, sp, #0
 800489a:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800489c:	4ba0      	ldr	r3, [pc, #640]	; (8004b20 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800489e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048a0:	f003 0303 	and.w	r3, r3, #3
 80048a4:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 80048a6:	4b9e      	ldr	r3, [pc, #632]	; (8004b20 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80048a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048aa:	091b      	lsrs	r3, r3, #4
 80048ac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80048b0:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 80048b2:	4b9b      	ldr	r3, [pc, #620]	; (8004b20 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80048b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048b6:	f003 0301 	and.w	r3, r3, #1
 80048ba:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80048bc:	4b98      	ldr	r3, [pc, #608]	; (8004b20 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80048be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80048c0:	08db      	lsrs	r3, r3, #3
 80048c2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80048c6:	693a      	ldr	r2, [r7, #16]
 80048c8:	fb02 f303 	mul.w	r3, r2, r3
 80048cc:	ee07 3a90 	vmov	s15, r3
 80048d0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80048d4:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 80048d8:	697b      	ldr	r3, [r7, #20]
 80048da:	2b00      	cmp	r3, #0
 80048dc:	f000 8111 	beq.w	8004b02 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 80048e0:	69bb      	ldr	r3, [r7, #24]
 80048e2:	2b02      	cmp	r3, #2
 80048e4:	f000 8083 	beq.w	80049ee <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 80048e8:	69bb      	ldr	r3, [r7, #24]
 80048ea:	2b02      	cmp	r3, #2
 80048ec:	f200 80a1 	bhi.w	8004a32 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 80048f0:	69bb      	ldr	r3, [r7, #24]
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d003      	beq.n	80048fe <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 80048f6:	69bb      	ldr	r3, [r7, #24]
 80048f8:	2b01      	cmp	r3, #1
 80048fa:	d056      	beq.n	80049aa <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 80048fc:	e099      	b.n	8004a32 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80048fe:	4b88      	ldr	r3, [pc, #544]	; (8004b20 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	f003 0320 	and.w	r3, r3, #32
 8004906:	2b00      	cmp	r3, #0
 8004908:	d02d      	beq.n	8004966 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800490a:	4b85      	ldr	r3, [pc, #532]	; (8004b20 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	08db      	lsrs	r3, r3, #3
 8004910:	f003 0303 	and.w	r3, r3, #3
 8004914:	4a83      	ldr	r2, [pc, #524]	; (8004b24 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8004916:	fa22 f303 	lsr.w	r3, r2, r3
 800491a:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800491c:	68bb      	ldr	r3, [r7, #8]
 800491e:	ee07 3a90 	vmov	s15, r3
 8004922:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004926:	697b      	ldr	r3, [r7, #20]
 8004928:	ee07 3a90 	vmov	s15, r3
 800492c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004930:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004934:	4b7a      	ldr	r3, [pc, #488]	; (8004b20 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8004936:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004938:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800493c:	ee07 3a90 	vmov	s15, r3
 8004940:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004944:	ed97 6a03 	vldr	s12, [r7, #12]
 8004948:	eddf 5a77 	vldr	s11, [pc, #476]	; 8004b28 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800494c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004950:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004954:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004958:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800495c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004960:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8004964:	e087      	b.n	8004a76 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004966:	697b      	ldr	r3, [r7, #20]
 8004968:	ee07 3a90 	vmov	s15, r3
 800496c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004970:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8004b2c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8004974:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004978:	4b69      	ldr	r3, [pc, #420]	; (8004b20 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800497a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800497c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004980:	ee07 3a90 	vmov	s15, r3
 8004984:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004988:	ed97 6a03 	vldr	s12, [r7, #12]
 800498c:	eddf 5a66 	vldr	s11, [pc, #408]	; 8004b28 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8004990:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004994:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004998:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800499c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80049a0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80049a4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80049a8:	e065      	b.n	8004a76 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80049aa:	697b      	ldr	r3, [r7, #20]
 80049ac:	ee07 3a90 	vmov	s15, r3
 80049b0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80049b4:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8004b30 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 80049b8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80049bc:	4b58      	ldr	r3, [pc, #352]	; (8004b20 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80049be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80049c4:	ee07 3a90 	vmov	s15, r3
 80049c8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80049cc:	ed97 6a03 	vldr	s12, [r7, #12]
 80049d0:	eddf 5a55 	vldr	s11, [pc, #340]	; 8004b28 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80049d4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80049d8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80049dc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80049e0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80049e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80049e8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80049ec:	e043      	b.n	8004a76 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80049ee:	697b      	ldr	r3, [r7, #20]
 80049f0:	ee07 3a90 	vmov	s15, r3
 80049f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80049f8:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8004b34 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 80049fc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004a00:	4b47      	ldr	r3, [pc, #284]	; (8004b20 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8004a02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a04:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a08:	ee07 3a90 	vmov	s15, r3
 8004a0c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004a10:	ed97 6a03 	vldr	s12, [r7, #12]
 8004a14:	eddf 5a44 	vldr	s11, [pc, #272]	; 8004b28 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8004a18:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004a1c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004a20:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004a24:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004a28:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a2c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004a30:	e021      	b.n	8004a76 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    default:
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004a32:	697b      	ldr	r3, [r7, #20]
 8004a34:	ee07 3a90 	vmov	s15, r3
 8004a38:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a3c:	eddf 6a3b 	vldr	s13, [pc, #236]	; 8004b2c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8004a40:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004a44:	4b36      	ldr	r3, [pc, #216]	; (8004b20 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8004a46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a48:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a4c:	ee07 3a90 	vmov	s15, r3
 8004a50:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004a54:	ed97 6a03 	vldr	s12, [r7, #12]
 8004a58:	eddf 5a33 	vldr	s11, [pc, #204]	; 8004b28 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8004a5c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004a60:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004a64:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004a68:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004a6c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a70:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004a74:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 8004a76:	4b2a      	ldr	r3, [pc, #168]	; (8004b20 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8004a78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a7a:	0a5b      	lsrs	r3, r3, #9
 8004a7c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004a80:	ee07 3a90 	vmov	s15, r3
 8004a84:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a88:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004a8c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004a90:	edd7 6a07 	vldr	s13, [r7, #28]
 8004a94:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004a98:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004a9c:	ee17 2a90 	vmov	r2, s15
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 8004aa4:	4b1e      	ldr	r3, [pc, #120]	; (8004b20 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8004aa6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004aa8:	0c1b      	lsrs	r3, r3, #16
 8004aaa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004aae:	ee07 3a90 	vmov	s15, r3
 8004ab2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ab6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004aba:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004abe:	edd7 6a07 	vldr	s13, [r7, #28]
 8004ac2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004ac6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004aca:	ee17 2a90 	vmov	r2, s15
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 8004ad2:	4b13      	ldr	r3, [pc, #76]	; (8004b20 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8004ad4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ad6:	0e1b      	lsrs	r3, r3, #24
 8004ad8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004adc:	ee07 3a90 	vmov	s15, r3
 8004ae0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ae4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004ae8:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004aec:	edd7 6a07 	vldr	s13, [r7, #28]
 8004af0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004af4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004af8:	ee17 2a90 	vmov	r2, s15
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8004b00:	e008      	b.n	8004b14 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	2200      	movs	r2, #0
 8004b06:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	2200      	movs	r2, #0
 8004b0c:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	2200      	movs	r2, #0
 8004b12:	609a      	str	r2, [r3, #8]
}
 8004b14:	bf00      	nop
 8004b16:	3724      	adds	r7, #36	; 0x24
 8004b18:	46bd      	mov	sp, r7
 8004b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b1e:	4770      	bx	lr
 8004b20:	58024400 	.word	0x58024400
 8004b24:	03d09000 	.word	0x03d09000
 8004b28:	46000000 	.word	0x46000000
 8004b2c:	4c742400 	.word	0x4c742400
 8004b30:	4a742400 	.word	0x4a742400
 8004b34:	4b895440 	.word	0x4b895440

08004b38 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8004b38:	b580      	push	{r7, lr}
 8004b3a:	b084      	sub	sp, #16
 8004b3c:	af00      	add	r7, sp, #0
 8004b3e:	6078      	str	r0, [r7, #4]
 8004b40:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004b42:	2300      	movs	r3, #0
 8004b44:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004b46:	4b53      	ldr	r3, [pc, #332]	; (8004c94 <RCCEx_PLL2_Config+0x15c>)
 8004b48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b4a:	f003 0303 	and.w	r3, r3, #3
 8004b4e:	2b03      	cmp	r3, #3
 8004b50:	d101      	bne.n	8004b56 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8004b52:	2301      	movs	r3, #1
 8004b54:	e099      	b.n	8004c8a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8004b56:	4b4f      	ldr	r3, [pc, #316]	; (8004c94 <RCCEx_PLL2_Config+0x15c>)
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	4a4e      	ldr	r2, [pc, #312]	; (8004c94 <RCCEx_PLL2_Config+0x15c>)
 8004b5c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004b60:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004b62:	f7fc fb0f 	bl	8001184 <HAL_GetTick>
 8004b66:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004b68:	e008      	b.n	8004b7c <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8004b6a:	f7fc fb0b 	bl	8001184 <HAL_GetTick>
 8004b6e:	4602      	mov	r2, r0
 8004b70:	68bb      	ldr	r3, [r7, #8]
 8004b72:	1ad3      	subs	r3, r2, r3
 8004b74:	2b02      	cmp	r3, #2
 8004b76:	d901      	bls.n	8004b7c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004b78:	2303      	movs	r3, #3
 8004b7a:	e086      	b.n	8004c8a <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004b7c:	4b45      	ldr	r3, [pc, #276]	; (8004c94 <RCCEx_PLL2_Config+0x15c>)
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d1f0      	bne.n	8004b6a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8004b88:	4b42      	ldr	r3, [pc, #264]	; (8004c94 <RCCEx_PLL2_Config+0x15c>)
 8004b8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b8c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	031b      	lsls	r3, r3, #12
 8004b96:	493f      	ldr	r1, [pc, #252]	; (8004c94 <RCCEx_PLL2_Config+0x15c>)
 8004b98:	4313      	orrs	r3, r2
 8004b9a:	628b      	str	r3, [r1, #40]	; 0x28
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	685b      	ldr	r3, [r3, #4]
 8004ba0:	3b01      	subs	r3, #1
 8004ba2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	689b      	ldr	r3, [r3, #8]
 8004baa:	3b01      	subs	r3, #1
 8004bac:	025b      	lsls	r3, r3, #9
 8004bae:	b29b      	uxth	r3, r3
 8004bb0:	431a      	orrs	r2, r3
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	68db      	ldr	r3, [r3, #12]
 8004bb6:	3b01      	subs	r3, #1
 8004bb8:	041b      	lsls	r3, r3, #16
 8004bba:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004bbe:	431a      	orrs	r2, r3
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	691b      	ldr	r3, [r3, #16]
 8004bc4:	3b01      	subs	r3, #1
 8004bc6:	061b      	lsls	r3, r3, #24
 8004bc8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004bcc:	4931      	ldr	r1, [pc, #196]	; (8004c94 <RCCEx_PLL2_Config+0x15c>)
 8004bce:	4313      	orrs	r3, r2
 8004bd0:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8004bd2:	4b30      	ldr	r3, [pc, #192]	; (8004c94 <RCCEx_PLL2_Config+0x15c>)
 8004bd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bd6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	695b      	ldr	r3, [r3, #20]
 8004bde:	492d      	ldr	r1, [pc, #180]	; (8004c94 <RCCEx_PLL2_Config+0x15c>)
 8004be0:	4313      	orrs	r3, r2
 8004be2:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8004be4:	4b2b      	ldr	r3, [pc, #172]	; (8004c94 <RCCEx_PLL2_Config+0x15c>)
 8004be6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004be8:	f023 0220 	bic.w	r2, r3, #32
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	699b      	ldr	r3, [r3, #24]
 8004bf0:	4928      	ldr	r1, [pc, #160]	; (8004c94 <RCCEx_PLL2_Config+0x15c>)
 8004bf2:	4313      	orrs	r3, r2
 8004bf4:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8004bf6:	4b27      	ldr	r3, [pc, #156]	; (8004c94 <RCCEx_PLL2_Config+0x15c>)
 8004bf8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bfa:	4a26      	ldr	r2, [pc, #152]	; (8004c94 <RCCEx_PLL2_Config+0x15c>)
 8004bfc:	f023 0310 	bic.w	r3, r3, #16
 8004c00:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8004c02:	4b24      	ldr	r3, [pc, #144]	; (8004c94 <RCCEx_PLL2_Config+0x15c>)
 8004c04:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004c06:	4b24      	ldr	r3, [pc, #144]	; (8004c98 <RCCEx_PLL2_Config+0x160>)
 8004c08:	4013      	ands	r3, r2
 8004c0a:	687a      	ldr	r2, [r7, #4]
 8004c0c:	69d2      	ldr	r2, [r2, #28]
 8004c0e:	00d2      	lsls	r2, r2, #3
 8004c10:	4920      	ldr	r1, [pc, #128]	; (8004c94 <RCCEx_PLL2_Config+0x15c>)
 8004c12:	4313      	orrs	r3, r2
 8004c14:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8004c16:	4b1f      	ldr	r3, [pc, #124]	; (8004c94 <RCCEx_PLL2_Config+0x15c>)
 8004c18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c1a:	4a1e      	ldr	r2, [pc, #120]	; (8004c94 <RCCEx_PLL2_Config+0x15c>)
 8004c1c:	f043 0310 	orr.w	r3, r3, #16
 8004c20:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8004c22:	683b      	ldr	r3, [r7, #0]
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d106      	bne.n	8004c36 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8004c28:	4b1a      	ldr	r3, [pc, #104]	; (8004c94 <RCCEx_PLL2_Config+0x15c>)
 8004c2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c2c:	4a19      	ldr	r2, [pc, #100]	; (8004c94 <RCCEx_PLL2_Config+0x15c>)
 8004c2e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004c32:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004c34:	e00f      	b.n	8004c56 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8004c36:	683b      	ldr	r3, [r7, #0]
 8004c38:	2b01      	cmp	r3, #1
 8004c3a:	d106      	bne.n	8004c4a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8004c3c:	4b15      	ldr	r3, [pc, #84]	; (8004c94 <RCCEx_PLL2_Config+0x15c>)
 8004c3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c40:	4a14      	ldr	r2, [pc, #80]	; (8004c94 <RCCEx_PLL2_Config+0x15c>)
 8004c42:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004c46:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004c48:	e005      	b.n	8004c56 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8004c4a:	4b12      	ldr	r3, [pc, #72]	; (8004c94 <RCCEx_PLL2_Config+0x15c>)
 8004c4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c4e:	4a11      	ldr	r2, [pc, #68]	; (8004c94 <RCCEx_PLL2_Config+0x15c>)
 8004c50:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004c54:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8004c56:	4b0f      	ldr	r3, [pc, #60]	; (8004c94 <RCCEx_PLL2_Config+0x15c>)
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	4a0e      	ldr	r2, [pc, #56]	; (8004c94 <RCCEx_PLL2_Config+0x15c>)
 8004c5c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004c60:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004c62:	f7fc fa8f 	bl	8001184 <HAL_GetTick>
 8004c66:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004c68:	e008      	b.n	8004c7c <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8004c6a:	f7fc fa8b 	bl	8001184 <HAL_GetTick>
 8004c6e:	4602      	mov	r2, r0
 8004c70:	68bb      	ldr	r3, [r7, #8]
 8004c72:	1ad3      	subs	r3, r2, r3
 8004c74:	2b02      	cmp	r3, #2
 8004c76:	d901      	bls.n	8004c7c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004c78:	2303      	movs	r3, #3
 8004c7a:	e006      	b.n	8004c8a <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004c7c:	4b05      	ldr	r3, [pc, #20]	; (8004c94 <RCCEx_PLL2_Config+0x15c>)
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d0f0      	beq.n	8004c6a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8004c88:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c8a:	4618      	mov	r0, r3
 8004c8c:	3710      	adds	r7, #16
 8004c8e:	46bd      	mov	sp, r7
 8004c90:	bd80      	pop	{r7, pc}
 8004c92:	bf00      	nop
 8004c94:	58024400 	.word	0x58024400
 8004c98:	ffff0007 	.word	0xffff0007

08004c9c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8004c9c:	b580      	push	{r7, lr}
 8004c9e:	b084      	sub	sp, #16
 8004ca0:	af00      	add	r7, sp, #0
 8004ca2:	6078      	str	r0, [r7, #4]
 8004ca4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004ca6:	2300      	movs	r3, #0
 8004ca8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004caa:	4b53      	ldr	r3, [pc, #332]	; (8004df8 <RCCEx_PLL3_Config+0x15c>)
 8004cac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cae:	f003 0303 	and.w	r3, r3, #3
 8004cb2:	2b03      	cmp	r3, #3
 8004cb4:	d101      	bne.n	8004cba <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8004cb6:	2301      	movs	r3, #1
 8004cb8:	e099      	b.n	8004dee <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8004cba:	4b4f      	ldr	r3, [pc, #316]	; (8004df8 <RCCEx_PLL3_Config+0x15c>)
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	4a4e      	ldr	r2, [pc, #312]	; (8004df8 <RCCEx_PLL3_Config+0x15c>)
 8004cc0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004cc4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004cc6:	f7fc fa5d 	bl	8001184 <HAL_GetTick>
 8004cca:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004ccc:	e008      	b.n	8004ce0 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8004cce:	f7fc fa59 	bl	8001184 <HAL_GetTick>
 8004cd2:	4602      	mov	r2, r0
 8004cd4:	68bb      	ldr	r3, [r7, #8]
 8004cd6:	1ad3      	subs	r3, r2, r3
 8004cd8:	2b02      	cmp	r3, #2
 8004cda:	d901      	bls.n	8004ce0 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004cdc:	2303      	movs	r3, #3
 8004cde:	e086      	b.n	8004dee <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004ce0:	4b45      	ldr	r3, [pc, #276]	; (8004df8 <RCCEx_PLL3_Config+0x15c>)
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d1f0      	bne.n	8004cce <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8004cec:	4b42      	ldr	r3, [pc, #264]	; (8004df8 <RCCEx_PLL3_Config+0x15c>)
 8004cee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cf0:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	051b      	lsls	r3, r3, #20
 8004cfa:	493f      	ldr	r1, [pc, #252]	; (8004df8 <RCCEx_PLL3_Config+0x15c>)
 8004cfc:	4313      	orrs	r3, r2
 8004cfe:	628b      	str	r3, [r1, #40]	; 0x28
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	685b      	ldr	r3, [r3, #4]
 8004d04:	3b01      	subs	r3, #1
 8004d06:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	689b      	ldr	r3, [r3, #8]
 8004d0e:	3b01      	subs	r3, #1
 8004d10:	025b      	lsls	r3, r3, #9
 8004d12:	b29b      	uxth	r3, r3
 8004d14:	431a      	orrs	r2, r3
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	68db      	ldr	r3, [r3, #12]
 8004d1a:	3b01      	subs	r3, #1
 8004d1c:	041b      	lsls	r3, r3, #16
 8004d1e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004d22:	431a      	orrs	r2, r3
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	691b      	ldr	r3, [r3, #16]
 8004d28:	3b01      	subs	r3, #1
 8004d2a:	061b      	lsls	r3, r3, #24
 8004d2c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004d30:	4931      	ldr	r1, [pc, #196]	; (8004df8 <RCCEx_PLL3_Config+0x15c>)
 8004d32:	4313      	orrs	r3, r2
 8004d34:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8004d36:	4b30      	ldr	r3, [pc, #192]	; (8004df8 <RCCEx_PLL3_Config+0x15c>)
 8004d38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d3a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	695b      	ldr	r3, [r3, #20]
 8004d42:	492d      	ldr	r1, [pc, #180]	; (8004df8 <RCCEx_PLL3_Config+0x15c>)
 8004d44:	4313      	orrs	r3, r2
 8004d46:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8004d48:	4b2b      	ldr	r3, [pc, #172]	; (8004df8 <RCCEx_PLL3_Config+0x15c>)
 8004d4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d4c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	699b      	ldr	r3, [r3, #24]
 8004d54:	4928      	ldr	r1, [pc, #160]	; (8004df8 <RCCEx_PLL3_Config+0x15c>)
 8004d56:	4313      	orrs	r3, r2
 8004d58:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8004d5a:	4b27      	ldr	r3, [pc, #156]	; (8004df8 <RCCEx_PLL3_Config+0x15c>)
 8004d5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d5e:	4a26      	ldr	r2, [pc, #152]	; (8004df8 <RCCEx_PLL3_Config+0x15c>)
 8004d60:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004d64:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8004d66:	4b24      	ldr	r3, [pc, #144]	; (8004df8 <RCCEx_PLL3_Config+0x15c>)
 8004d68:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004d6a:	4b24      	ldr	r3, [pc, #144]	; (8004dfc <RCCEx_PLL3_Config+0x160>)
 8004d6c:	4013      	ands	r3, r2
 8004d6e:	687a      	ldr	r2, [r7, #4]
 8004d70:	69d2      	ldr	r2, [r2, #28]
 8004d72:	00d2      	lsls	r2, r2, #3
 8004d74:	4920      	ldr	r1, [pc, #128]	; (8004df8 <RCCEx_PLL3_Config+0x15c>)
 8004d76:	4313      	orrs	r3, r2
 8004d78:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8004d7a:	4b1f      	ldr	r3, [pc, #124]	; (8004df8 <RCCEx_PLL3_Config+0x15c>)
 8004d7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d7e:	4a1e      	ldr	r2, [pc, #120]	; (8004df8 <RCCEx_PLL3_Config+0x15c>)
 8004d80:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004d84:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8004d86:	683b      	ldr	r3, [r7, #0]
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d106      	bne.n	8004d9a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8004d8c:	4b1a      	ldr	r3, [pc, #104]	; (8004df8 <RCCEx_PLL3_Config+0x15c>)
 8004d8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d90:	4a19      	ldr	r2, [pc, #100]	; (8004df8 <RCCEx_PLL3_Config+0x15c>)
 8004d92:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004d96:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004d98:	e00f      	b.n	8004dba <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8004d9a:	683b      	ldr	r3, [r7, #0]
 8004d9c:	2b01      	cmp	r3, #1
 8004d9e:	d106      	bne.n	8004dae <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8004da0:	4b15      	ldr	r3, [pc, #84]	; (8004df8 <RCCEx_PLL3_Config+0x15c>)
 8004da2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004da4:	4a14      	ldr	r2, [pc, #80]	; (8004df8 <RCCEx_PLL3_Config+0x15c>)
 8004da6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004daa:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004dac:	e005      	b.n	8004dba <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8004dae:	4b12      	ldr	r3, [pc, #72]	; (8004df8 <RCCEx_PLL3_Config+0x15c>)
 8004db0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004db2:	4a11      	ldr	r2, [pc, #68]	; (8004df8 <RCCEx_PLL3_Config+0x15c>)
 8004db4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004db8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8004dba:	4b0f      	ldr	r3, [pc, #60]	; (8004df8 <RCCEx_PLL3_Config+0x15c>)
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	4a0e      	ldr	r2, [pc, #56]	; (8004df8 <RCCEx_PLL3_Config+0x15c>)
 8004dc0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004dc4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004dc6:	f7fc f9dd 	bl	8001184 <HAL_GetTick>
 8004dca:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004dcc:	e008      	b.n	8004de0 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8004dce:	f7fc f9d9 	bl	8001184 <HAL_GetTick>
 8004dd2:	4602      	mov	r2, r0
 8004dd4:	68bb      	ldr	r3, [r7, #8]
 8004dd6:	1ad3      	subs	r3, r2, r3
 8004dd8:	2b02      	cmp	r3, #2
 8004dda:	d901      	bls.n	8004de0 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004ddc:	2303      	movs	r3, #3
 8004dde:	e006      	b.n	8004dee <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004de0:	4b05      	ldr	r3, [pc, #20]	; (8004df8 <RCCEx_PLL3_Config+0x15c>)
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d0f0      	beq.n	8004dce <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8004dec:	7bfb      	ldrb	r3, [r7, #15]
}
 8004dee:	4618      	mov	r0, r3
 8004df0:	3710      	adds	r7, #16
 8004df2:	46bd      	mov	sp, r7
 8004df4:	bd80      	pop	{r7, pc}
 8004df6:	bf00      	nop
 8004df8:	58024400 	.word	0x58024400
 8004dfc:	ffff0007 	.word	0xffff0007

08004e00 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8004e00:	b580      	push	{r7, lr}
 8004e02:	b08a      	sub	sp, #40	; 0x28
 8004e04:	af00      	add	r7, sp, #0
 8004e06:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade;
  uint32_t unitsize;
  uint32_t tickstart;

  /* Check the SD handle allocation */
  if (hsd == NULL)
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d101      	bne.n	8004e12 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8004e0e:	2301      	movs	r3, #1
 8004e10:	e075      	b.n	8004efe <HAL_SD_Init+0xfe>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if (hsd->State == HAL_SD_STATE_RESET)
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004e18:	b2db      	uxtb	r3, r3
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d105      	bne.n	8004e2a <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	2200      	movs	r2, #0
 8004e22:	761a      	strb	r2, [r3, #24]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8004e24:	6878      	ldr	r0, [r7, #4]
 8004e26:	f7fb fec5 	bl	8000bb4 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	2203      	movs	r2, #3
 8004e2e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8004e32:	6878      	ldr	r0, [r7, #4]
 8004e34:	f000 f868 	bl	8004f08 <HAL_SD_InitCard>
 8004e38:	4603      	mov	r3, r0
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d001      	beq.n	8004e42 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8004e3e:	2301      	movs	r3, #1
 8004e40:	e05d      	b.n	8004efe <HAL_SD_Init+0xfe>
  }

  if (HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 8004e42:	f107 0308 	add.w	r3, r7, #8
 8004e46:	4619      	mov	r1, r3
 8004e48:	6878      	ldr	r0, [r7, #4]
 8004e4a:	f000 fa95 	bl	8005378 <HAL_SD_GetCardStatus>
 8004e4e:	4603      	mov	r3, r0
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d001      	beq.n	8004e58 <HAL_SD_Init+0x58>
  {
    return HAL_ERROR;
 8004e54:	2301      	movs	r3, #1
 8004e56:	e052      	b.n	8004efe <HAL_SD_Init+0xfe>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 8004e58:	7e3b      	ldrb	r3, [r7, #24]
 8004e5a:	b2db      	uxtb	r3, r3
 8004e5c:	627b      	str	r3, [r7, #36]	; 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 8004e5e:	7e7b      	ldrb	r3, [r7, #25]
 8004e60:	b2db      	uxtb	r3, r3
 8004e62:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e68:	2b01      	cmp	r3, #1
 8004e6a:	d10a      	bne.n	8004e82 <HAL_SD_Init+0x82>
 8004e6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d102      	bne.n	8004e78 <HAL_SD_Init+0x78>
 8004e72:	6a3b      	ldr	r3, [r7, #32]
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d004      	beq.n	8004e82 <HAL_SD_Init+0x82>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004e7e:	659a      	str	r2, [r3, #88]	; 0x58
 8004e80:	e00b      	b.n	8004e9a <HAL_SD_Init+0x9a>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e86:	2b01      	cmp	r3, #1
 8004e88:	d104      	bne.n	8004e94 <HAL_SD_Init+0x94>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004e90:	659a      	str	r2, [r3, #88]	; 0x58
 8004e92:	e002      	b.n	8004e9a <HAL_SD_Init+0x9a>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	2200      	movs	r2, #0
 8004e98:	659a      	str	r2, [r3, #88]	; 0x58
    }

  }
  /* Configure the bus wide */
  if (HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	68db      	ldr	r3, [r3, #12]
 8004e9e:	4619      	mov	r1, r3
 8004ea0:	6878      	ldr	r0, [r7, #4]
 8004ea2:	f000 fb1f 	bl	80054e4 <HAL_SD_ConfigWideBusOperation>
 8004ea6:	4603      	mov	r3, r0
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d001      	beq.n	8004eb0 <HAL_SD_Init+0xb0>
  {
    return HAL_ERROR;
 8004eac:	2301      	movs	r3, #1
 8004eae:	e026      	b.n	8004efe <HAL_SD_Init+0xfe>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 8004eb0:	f7fc f968 	bl	8001184 <HAL_GetTick>
 8004eb4:	61f8      	str	r0, [r7, #28]
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8004eb6:	e011      	b.n	8004edc <HAL_SD_Init+0xdc>
  {
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8004eb8:	f7fc f964 	bl	8001184 <HAL_GetTick>
 8004ebc:	4602      	mov	r2, r0
 8004ebe:	69fb      	ldr	r3, [r7, #28]
 8004ec0:	1ad3      	subs	r3, r2, r3
 8004ec2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004ec6:	d109      	bne.n	8004edc <HAL_SD_Init+0xdc>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004ece:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	2201      	movs	r2, #1
 8004ed4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      return HAL_TIMEOUT;
 8004ed8:	2303      	movs	r3, #3
 8004eda:	e010      	b.n	8004efe <HAL_SD_Init+0xfe>
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8004edc:	6878      	ldr	r0, [r7, #4]
 8004ede:	f000 fc11 	bl	8005704 <HAL_SD_GetCardState>
 8004ee2:	4603      	mov	r3, r0
 8004ee4:	2b04      	cmp	r3, #4
 8004ee6:	d1e7      	bne.n	8004eb8 <HAL_SD_Init+0xb8>
    }
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	2200      	movs	r2, #0
 8004eec:	635a      	str	r2, [r3, #52]	; 0x34

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	2200      	movs	r2, #0
 8004ef2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	2201      	movs	r2, #1
 8004ef8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return HAL_OK;
 8004efc:	2300      	movs	r3, #0
}
 8004efe:	4618      	mov	r0, r3
 8004f00:	3728      	adds	r7, #40	; 0x28
 8004f02:	46bd      	mov	sp, r7
 8004f04:	bd80      	pop	{r7, pc}
	...

08004f08 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8004f08:	b590      	push	{r4, r7, lr}
 8004f0a:	b08d      	sub	sp, #52	; 0x34
 8004f0c:	af02      	add	r7, sp, #8
 8004f0e:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8004f10:	2300      	movs	r3, #0
 8004f12:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8004f14:	2300      	movs	r3, #0
 8004f16:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8004f18:	2300      	movs	r3, #0
 8004f1a:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8004f1c:	2300      	movs	r3, #0
 8004f1e:	61bb      	str	r3, [r7, #24]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 8004f20:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8004f24:	f7fe fd26 	bl	8003974 <HAL_RCCEx_GetPeriphCLKFreq>
 8004f28:	6278      	str	r0, [r7, #36]	; 0x24
  if (sdmmc_clk == 0U)
 8004f2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d109      	bne.n	8004f44 <HAL_SD_InitCard+0x3c>
  {
    hsd->State = HAL_SD_STATE_READY;
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	2201      	movs	r2, #1
 8004f34:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004f3e:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8004f40:	2301      	movs	r3, #1
 8004f42:	e06a      	b.n	800501a <HAL_SD_InitCard+0x112>
  }
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 8004f44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f46:	0a1b      	lsrs	r3, r3, #8
 8004f48:	4a36      	ldr	r2, [pc, #216]	; (8005024 <HAL_SD_InitCard+0x11c>)
 8004f4a:	fba2 2303 	umull	r2, r3, r2, r3
 8004f4e:	091b      	lsrs	r3, r3, #4
 8004f50:	61fb      	str	r3, [r7, #28]
  /* Set Transceiver polarity */
  hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
#endif /* USE_SD_TRANSCEIVER  */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681c      	ldr	r4, [r3, #0]
 8004f56:	466a      	mov	r2, sp
 8004f58:	f107 0318 	add.w	r3, r7, #24
 8004f5c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8004f60:	e882 0003 	stmia.w	r2, {r0, r1}
 8004f64:	f107 030c 	add.w	r3, r7, #12
 8004f68:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004f6a:	4620      	mov	r0, r4
 8004f6c:	f001 ffae 	bl	8006ecc <SDMMC_Init>

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	4618      	mov	r0, r3
 8004f76:	f001 ffe0 	bl	8006f3a <SDMMC_PowerState_ON>

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
  sdmmc_clk = sdmmc_clk / (2U * Init.ClockDiv);
 8004f7a:	69fb      	ldr	r3, [r7, #28]
 8004f7c:	005b      	lsls	r3, r3, #1
 8004f7e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f80:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f84:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_Delay(1U + (74U * 1000U / (sdmmc_clk)));
 8004f86:	4a28      	ldr	r2, [pc, #160]	; (8005028 <HAL_SD_InitCard+0x120>)
 8004f88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f8e:	3301      	adds	r3, #1
 8004f90:	4618      	mov	r0, r3
 8004f92:	f7fc f903 	bl	800119c <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8004f96:	6878      	ldr	r0, [r7, #4]
 8004f98:	f000 fc90 	bl	80058bc <SD_PowerON>
 8004f9c:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8004f9e:	6a3b      	ldr	r3, [r7, #32]
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d00b      	beq.n	8004fbc <HAL_SD_InitCard+0xb4>
  {
    hsd->State = HAL_SD_STATE_READY;
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	2201      	movs	r2, #1
 8004fa8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode |= errorstate;
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004fb0:	6a3b      	ldr	r3, [r7, #32]
 8004fb2:	431a      	orrs	r2, r3
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8004fb8:	2301      	movs	r3, #1
 8004fba:	e02e      	b.n	800501a <HAL_SD_InitCard+0x112>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8004fbc:	6878      	ldr	r0, [r7, #4]
 8004fbe:	f000 fbc1 	bl	8005744 <SD_InitCard>
 8004fc2:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8004fc4:	6a3b      	ldr	r3, [r7, #32]
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d00b      	beq.n	8004fe2 <HAL_SD_InitCard+0xda>
  {
    hsd->State = HAL_SD_STATE_READY;
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	2201      	movs	r2, #1
 8004fce:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode |= errorstate;
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004fd6:	6a3b      	ldr	r3, [r7, #32]
 8004fd8:	431a      	orrs	r2, r3
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8004fde:	2301      	movs	r3, #1
 8004fe0:	e01b      	b.n	800501a <HAL_SD_InitCard+0x112>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004fea:	4618      	mov	r0, r3
 8004fec:	f002 f83a 	bl	8007064 <SDMMC_CmdBlockLength>
 8004ff0:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8004ff2:	6a3b      	ldr	r3, [r7, #32]
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d00f      	beq.n	8005018 <HAL_SD_InitCard+0x110>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	4a0b      	ldr	r2, [pc, #44]	; (800502c <HAL_SD_InitCard+0x124>)
 8004ffe:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005004:	6a3b      	ldr	r3, [r7, #32]
 8005006:	431a      	orrs	r2, r3
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	2201      	movs	r2, #1
 8005010:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    return HAL_ERROR;
 8005014:	2301      	movs	r3, #1
 8005016:	e000      	b.n	800501a <HAL_SD_InitCard+0x112>
  }

  return HAL_OK;
 8005018:	2300      	movs	r3, #0
}
 800501a:	4618      	mov	r0, r3
 800501c:	372c      	adds	r7, #44	; 0x2c
 800501e:	46bd      	mov	sp, r7
 8005020:	bd90      	pop	{r4, r7, pc}
 8005022:	bf00      	nop
 8005024:	014f8b59 	.word	0x014f8b59
 8005028:	00012110 	.word	0x00012110
 800502c:	1fe00fff 	.word	0x1fe00fff

08005030 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8005030:	b480      	push	{r7}
 8005032:	b083      	sub	sp, #12
 8005034:	af00      	add	r7, sp, #0
 8005036:	6078      	str	r0, [r7, #4]
 8005038:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800503e:	0f9b      	lsrs	r3, r3, #30
 8005040:	b2da      	uxtb	r2, r3
 8005042:	683b      	ldr	r3, [r7, #0]
 8005044:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800504a:	0e9b      	lsrs	r3, r3, #26
 800504c:	b2db      	uxtb	r3, r3
 800504e:	f003 030f 	and.w	r3, r3, #15
 8005052:	b2da      	uxtb	r2, r3
 8005054:	683b      	ldr	r3, [r7, #0]
 8005056:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800505c:	0e1b      	lsrs	r3, r3, #24
 800505e:	b2db      	uxtb	r3, r3
 8005060:	f003 0303 	and.w	r3, r3, #3
 8005064:	b2da      	uxtb	r2, r3
 8005066:	683b      	ldr	r3, [r7, #0]
 8005068:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800506e:	0c1b      	lsrs	r3, r3, #16
 8005070:	b2da      	uxtb	r2, r3
 8005072:	683b      	ldr	r3, [r7, #0]
 8005074:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800507a:	0a1b      	lsrs	r3, r3, #8
 800507c:	b2da      	uxtb	r2, r3
 800507e:	683b      	ldr	r3, [r7, #0]
 8005080:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005086:	b2da      	uxtb	r2, r3
 8005088:	683b      	ldr	r3, [r7, #0]
 800508a:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005090:	0d1b      	lsrs	r3, r3, #20
 8005092:	b29a      	uxth	r2, r3
 8005094:	683b      	ldr	r3, [r7, #0]
 8005096:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800509c:	0c1b      	lsrs	r3, r3, #16
 800509e:	b2db      	uxtb	r3, r3
 80050a0:	f003 030f 	and.w	r3, r3, #15
 80050a4:	b2da      	uxtb	r2, r3
 80050a6:	683b      	ldr	r3, [r7, #0]
 80050a8:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80050ae:	0bdb      	lsrs	r3, r3, #15
 80050b0:	b2db      	uxtb	r3, r3
 80050b2:	f003 0301 	and.w	r3, r3, #1
 80050b6:	b2da      	uxtb	r2, r3
 80050b8:	683b      	ldr	r3, [r7, #0]
 80050ba:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80050c0:	0b9b      	lsrs	r3, r3, #14
 80050c2:	b2db      	uxtb	r3, r3
 80050c4:	f003 0301 	and.w	r3, r3, #1
 80050c8:	b2da      	uxtb	r2, r3
 80050ca:	683b      	ldr	r3, [r7, #0]
 80050cc:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80050d2:	0b5b      	lsrs	r3, r3, #13
 80050d4:	b2db      	uxtb	r3, r3
 80050d6:	f003 0301 	and.w	r3, r3, #1
 80050da:	b2da      	uxtb	r2, r3
 80050dc:	683b      	ldr	r3, [r7, #0]
 80050de:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80050e4:	0b1b      	lsrs	r3, r3, #12
 80050e6:	b2db      	uxtb	r3, r3
 80050e8:	f003 0301 	and.w	r3, r3, #1
 80050ec:	b2da      	uxtb	r2, r3
 80050ee:	683b      	ldr	r3, [r7, #0]
 80050f0:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 80050f2:	683b      	ldr	r3, [r7, #0]
 80050f4:	2200      	movs	r2, #0
 80050f6:	735a      	strb	r2, [r3, #13]

  if (hsd->SdCard.CardType == CARD_SDSC)
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d163      	bne.n	80051c8 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005104:	009a      	lsls	r2, r3, #2
 8005106:	f640 73fc 	movw	r3, #4092	; 0xffc
 800510a:	4013      	ands	r3, r2
 800510c:	687a      	ldr	r2, [r7, #4]
 800510e:	6e52      	ldr	r2, [r2, #100]	; 0x64
 8005110:	0f92      	lsrs	r2, r2, #30
 8005112:	431a      	orrs	r2, r3
 8005114:	683b      	ldr	r3, [r7, #0]
 8005116:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800511c:	0edb      	lsrs	r3, r3, #27
 800511e:	b2db      	uxtb	r3, r3
 8005120:	f003 0307 	and.w	r3, r3, #7
 8005124:	b2da      	uxtb	r2, r3
 8005126:	683b      	ldr	r3, [r7, #0]
 8005128:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800512e:	0e1b      	lsrs	r3, r3, #24
 8005130:	b2db      	uxtb	r3, r3
 8005132:	f003 0307 	and.w	r3, r3, #7
 8005136:	b2da      	uxtb	r2, r3
 8005138:	683b      	ldr	r3, [r7, #0]
 800513a:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005140:	0d5b      	lsrs	r3, r3, #21
 8005142:	b2db      	uxtb	r3, r3
 8005144:	f003 0307 	and.w	r3, r3, #7
 8005148:	b2da      	uxtb	r2, r3
 800514a:	683b      	ldr	r3, [r7, #0]
 800514c:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005152:	0c9b      	lsrs	r3, r3, #18
 8005154:	b2db      	uxtb	r3, r3
 8005156:	f003 0307 	and.w	r3, r3, #7
 800515a:	b2da      	uxtb	r2, r3
 800515c:	683b      	ldr	r3, [r7, #0]
 800515e:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005164:	0bdb      	lsrs	r3, r3, #15
 8005166:	b2db      	uxtb	r3, r3
 8005168:	f003 0307 	and.w	r3, r3, #7
 800516c:	b2da      	uxtb	r2, r3
 800516e:	683b      	ldr	r3, [r7, #0]
 8005170:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8005172:	683b      	ldr	r3, [r7, #0]
 8005174:	691b      	ldr	r3, [r3, #16]
 8005176:	1c5a      	adds	r2, r3, #1
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800517c:	683b      	ldr	r3, [r7, #0]
 800517e:	7e1b      	ldrb	r3, [r3, #24]
 8005180:	b2db      	uxtb	r3, r3
 8005182:	f003 0307 	and.w	r3, r3, #7
 8005186:	3302      	adds	r3, #2
 8005188:	2201      	movs	r2, #1
 800518a:	fa02 f303 	lsl.w	r3, r2, r3
 800518e:	687a      	ldr	r2, [r7, #4]
 8005190:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8005192:	fb02 f203 	mul.w	r2, r2, r3
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800519a:	683b      	ldr	r3, [r7, #0]
 800519c:	7a1b      	ldrb	r3, [r3, #8]
 800519e:	b2db      	uxtb	r3, r3
 80051a0:	f003 030f 	and.w	r3, r3, #15
 80051a4:	2201      	movs	r2, #1
 80051a6:	409a      	lsls	r2, r3
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	64da      	str	r2, [r3, #76]	; 0x4c

    hsd->SdCard.LogBlockNbr = (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80051b0:	687a      	ldr	r2, [r7, #4]
 80051b2:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80051b4:	0a52      	lsrs	r2, r2, #9
 80051b6:	fb02 f203 	mul.w	r2, r2, r3
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.LogBlockSize = 512U;
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80051c4:	655a      	str	r2, [r3, #84]	; 0x54
 80051c6:	e031      	b.n	800522c <HAL_SD_GetCardCSD+0x1fc>
  }
  else if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051cc:	2b01      	cmp	r3, #1
 80051ce:	d11d      	bne.n	800520c <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80051d4:	041b      	lsls	r3, r3, #16
 80051d6:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80051de:	0c1b      	lsrs	r3, r3, #16
 80051e0:	431a      	orrs	r2, r3
 80051e2:	683b      	ldr	r3, [r7, #0]
 80051e4:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 80051e6:	683b      	ldr	r3, [r7, #0]
 80051e8:	691b      	ldr	r3, [r3, #16]
 80051ea:	3301      	adds	r3, #1
 80051ec:	029a      	lsls	r2, r3, #10
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.BlockSize = 512U;
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005200:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	655a      	str	r2, [r3, #84]	; 0x54
 800520a:	e00f      	b.n	800522c <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	4a58      	ldr	r2, [pc, #352]	; (8005374 <HAL_SD_GetCardCSD+0x344>)
 8005212:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005218:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	2201      	movs	r2, #1
 8005224:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    return HAL_ERROR;
 8005228:	2301      	movs	r3, #1
 800522a:	e09d      	b.n	8005368 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005230:	0b9b      	lsrs	r3, r3, #14
 8005232:	b2db      	uxtb	r3, r3
 8005234:	f003 0301 	and.w	r3, r3, #1
 8005238:	b2da      	uxtb	r2, r3
 800523a:	683b      	ldr	r3, [r7, #0]
 800523c:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005242:	09db      	lsrs	r3, r3, #7
 8005244:	b2db      	uxtb	r3, r3
 8005246:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800524a:	b2da      	uxtb	r2, r3
 800524c:	683b      	ldr	r3, [r7, #0]
 800524e:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005254:	b2db      	uxtb	r3, r3
 8005256:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800525a:	b2da      	uxtb	r2, r3
 800525c:	683b      	ldr	r3, [r7, #0]
 800525e:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005264:	0fdb      	lsrs	r3, r3, #31
 8005266:	b2da      	uxtb	r2, r3
 8005268:	683b      	ldr	r3, [r7, #0]
 800526a:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005270:	0f5b      	lsrs	r3, r3, #29
 8005272:	b2db      	uxtb	r3, r3
 8005274:	f003 0303 	and.w	r3, r3, #3
 8005278:	b2da      	uxtb	r2, r3
 800527a:	683b      	ldr	r3, [r7, #0]
 800527c:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005282:	0e9b      	lsrs	r3, r3, #26
 8005284:	b2db      	uxtb	r3, r3
 8005286:	f003 0307 	and.w	r3, r3, #7
 800528a:	b2da      	uxtb	r2, r3
 800528c:	683b      	ldr	r3, [r7, #0]
 800528e:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen = (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005294:	0d9b      	lsrs	r3, r3, #22
 8005296:	b2db      	uxtb	r3, r3
 8005298:	f003 030f 	and.w	r3, r3, #15
 800529c:	b2da      	uxtb	r2, r3
 800529e:	683b      	ldr	r3, [r7, #0]
 80052a0:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80052a6:	0d5b      	lsrs	r3, r3, #21
 80052a8:	b2db      	uxtb	r3, r3
 80052aa:	f003 0301 	and.w	r3, r3, #1
 80052ae:	b2da      	uxtb	r2, r3
 80052b0:	683b      	ldr	r3, [r7, #0]
 80052b2:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 80052b6:	683b      	ldr	r3, [r7, #0]
 80052b8:	2200      	movs	r2, #0
 80052ba:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80052c2:	0c1b      	lsrs	r3, r3, #16
 80052c4:	b2db      	uxtb	r3, r3
 80052c6:	f003 0301 	and.w	r3, r3, #1
 80052ca:	b2da      	uxtb	r2, r3
 80052cc:	683b      	ldr	r3, [r7, #0]
 80052ce:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80052d6:	0bdb      	lsrs	r3, r3, #15
 80052d8:	b2db      	uxtb	r3, r3
 80052da:	f003 0301 	and.w	r3, r3, #1
 80052de:	b2da      	uxtb	r2, r3
 80052e0:	683b      	ldr	r3, [r7, #0]
 80052e2:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80052ea:	0b9b      	lsrs	r3, r3, #14
 80052ec:	b2db      	uxtb	r3, r3
 80052ee:	f003 0301 	and.w	r3, r3, #1
 80052f2:	b2da      	uxtb	r2, r3
 80052f4:	683b      	ldr	r3, [r7, #0]
 80052f6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80052fe:	0b5b      	lsrs	r3, r3, #13
 8005300:	b2db      	uxtb	r3, r3
 8005302:	f003 0301 	and.w	r3, r3, #1
 8005306:	b2da      	uxtb	r2, r3
 8005308:	683b      	ldr	r3, [r7, #0]
 800530a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005312:	0b1b      	lsrs	r3, r3, #12
 8005314:	b2db      	uxtb	r3, r3
 8005316:	f003 0301 	and.w	r3, r3, #1
 800531a:	b2da      	uxtb	r2, r3
 800531c:	683b      	ldr	r3, [r7, #0]
 800531e:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005326:	0a9b      	lsrs	r3, r3, #10
 8005328:	b2db      	uxtb	r3, r3
 800532a:	f003 0303 	and.w	r3, r3, #3
 800532e:	b2da      	uxtb	r2, r3
 8005330:	683b      	ldr	r3, [r7, #0]
 8005332:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC = (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800533a:	0a1b      	lsrs	r3, r3, #8
 800533c:	b2db      	uxtb	r3, r3
 800533e:	f003 0303 	and.w	r3, r3, #3
 8005342:	b2da      	uxtb	r2, r3
 8005344:	683b      	ldr	r3, [r7, #0]
 8005346:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800534e:	085b      	lsrs	r3, r3, #1
 8005350:	b2db      	uxtb	r3, r3
 8005352:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005356:	b2da      	uxtb	r2, r3
 8005358:	683b      	ldr	r3, [r7, #0]
 800535a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800535e:	683b      	ldr	r3, [r7, #0]
 8005360:	2201      	movs	r2, #1
 8005362:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8005366:	2300      	movs	r3, #0
}
 8005368:	4618      	mov	r0, r3
 800536a:	370c      	adds	r7, #12
 800536c:	46bd      	mov	sp, r7
 800536e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005372:	4770      	bx	lr
 8005374:	1fe00fff 	.word	0x1fe00fff

08005378 <HAL_SD_GetCardStatus>:
  * @param  pStatus: Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 8005378:	b580      	push	{r7, lr}
 800537a:	b094      	sub	sp, #80	; 0x50
 800537c:	af00      	add	r7, sp, #0
 800537e:	6078      	str	r0, [r7, #4]
 8005380:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 8005382:	2300      	movs	r3, #0
 8005384:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  errorstate = SD_SendSDStatus(hsd, sd_status);
 8005388:	f107 0308 	add.w	r3, r7, #8
 800538c:	4619      	mov	r1, r3
 800538e:	6878      	ldr	r0, [r7, #4]
 8005390:	f000 fb1e 	bl	80059d0 <SD_SendSDStatus>
 8005394:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 8005396:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005398:	2b00      	cmp	r3, #0
 800539a:	d011      	beq.n	80053c0 <HAL_SD_GetCardStatus+0x48>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	4a4f      	ldr	r2, [pc, #316]	; (80054e0 <HAL_SD_GetCardStatus+0x168>)
 80053a2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80053a8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80053aa:	431a      	orrs	r2, r3
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	2201      	movs	r2, #1
 80053b4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    status = HAL_ERROR;
 80053b8:	2301      	movs	r3, #1
 80053ba:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 80053be:	e070      	b.n	80054a2 <HAL_SD_GetCardStatus+0x12a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 80053c0:	68bb      	ldr	r3, [r7, #8]
 80053c2:	099b      	lsrs	r3, r3, #6
 80053c4:	b2db      	uxtb	r3, r3
 80053c6:	f003 0303 	and.w	r3, r3, #3
 80053ca:	b2da      	uxtb	r2, r3
 80053cc:	683b      	ldr	r3, [r7, #0]
 80053ce:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 80053d0:	68bb      	ldr	r3, [r7, #8]
 80053d2:	095b      	lsrs	r3, r3, #5
 80053d4:	b2db      	uxtb	r3, r3
 80053d6:	f003 0301 	and.w	r3, r3, #1
 80053da:	b2da      	uxtb	r2, r3
 80053dc:	683b      	ldr	r3, [r7, #0]
 80053de:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 80053e0:	68bb      	ldr	r3, [r7, #8]
 80053e2:	0a1b      	lsrs	r3, r3, #8
 80053e4:	b29b      	uxth	r3, r3
 80053e6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80053ea:	b29a      	uxth	r2, r3
 80053ec:	68bb      	ldr	r3, [r7, #8]
 80053ee:	0e1b      	lsrs	r3, r3, #24
 80053f0:	b29b      	uxth	r3, r3
 80053f2:	4313      	orrs	r3, r2
 80053f4:	b29a      	uxth	r2, r3
 80053f6:	683b      	ldr	r3, [r7, #0]
 80053f8:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	061a      	lsls	r2, r3, #24
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	021b      	lsls	r3, r3, #8
 8005402:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005406:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	0a1b      	lsrs	r3, r3, #8
 800540c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8005410:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	0e1b      	lsrs	r3, r3, #24
 8005416:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8005418:	683b      	ldr	r3, [r7, #0]
 800541a:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 800541c:	693b      	ldr	r3, [r7, #16]
 800541e:	b2da      	uxtb	r2, r3
 8005420:	683b      	ldr	r3, [r7, #0]
 8005422:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 8005424:	693b      	ldr	r3, [r7, #16]
 8005426:	0a1b      	lsrs	r3, r3, #8
 8005428:	b2da      	uxtb	r2, r3
 800542a:	683b      	ldr	r3, [r7, #0]
 800542c:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 800542e:	693b      	ldr	r3, [r7, #16]
 8005430:	0d1b      	lsrs	r3, r3, #20
 8005432:	b2db      	uxtb	r3, r3
 8005434:	f003 030f 	and.w	r3, r3, #15
 8005438:	b2da      	uxtb	r2, r3
 800543a:	683b      	ldr	r3, [r7, #0]
 800543c:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 800543e:	693b      	ldr	r3, [r7, #16]
 8005440:	0c1b      	lsrs	r3, r3, #16
 8005442:	b29b      	uxth	r3, r3
 8005444:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005448:	b29a      	uxth	r2, r3
 800544a:	697b      	ldr	r3, [r7, #20]
 800544c:	b29b      	uxth	r3, r3
 800544e:	b2db      	uxtb	r3, r3
 8005450:	b29b      	uxth	r3, r3
 8005452:	4313      	orrs	r3, r2
 8005454:	b29a      	uxth	r2, r3
 8005456:	683b      	ldr	r3, [r7, #0]
 8005458:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 800545a:	697b      	ldr	r3, [r7, #20]
 800545c:	0a9b      	lsrs	r3, r3, #10
 800545e:	b2db      	uxtb	r3, r3
 8005460:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005464:	b2da      	uxtb	r2, r3
 8005466:	683b      	ldr	r3, [r7, #0]
 8005468:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 800546a:	697b      	ldr	r3, [r7, #20]
 800546c:	0a1b      	lsrs	r3, r3, #8
 800546e:	b2db      	uxtb	r3, r3
 8005470:	f003 0303 	and.w	r3, r3, #3
 8005474:	b2da      	uxtb	r2, r3
 8005476:	683b      	ldr	r3, [r7, #0]
 8005478:	73da      	strb	r2, [r3, #15]

    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 800547a:	697b      	ldr	r3, [r7, #20]
 800547c:	091b      	lsrs	r3, r3, #4
 800547e:	b2db      	uxtb	r3, r3
 8005480:	f003 030f 	and.w	r3, r3, #15
 8005484:	b2da      	uxtb	r2, r3
 8005486:	683b      	ldr	r3, [r7, #0]
 8005488:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 800548a:	697b      	ldr	r3, [r7, #20]
 800548c:	b2db      	uxtb	r3, r3
 800548e:	f003 030f 	and.w	r3, r3, #15
 8005492:	b2da      	uxtb	r2, r3
 8005494:	683b      	ldr	r3, [r7, #0]
 8005496:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 8005498:	69bb      	ldr	r3, [r7, #24]
 800549a:	0e1b      	lsrs	r3, r3, #24
 800549c:	b2da      	uxtb	r2, r3
 800549e:	683b      	ldr	r3, [r7, #0]
 80054a0:	749a      	strb	r2, [r3, #18]
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80054aa:	4618      	mov	r0, r3
 80054ac:	f001 fdda 	bl	8007064 <SDMMC_CmdBlockLength>
 80054b0:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 80054b2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d00d      	beq.n	80054d4 <HAL_SD_GetCardStatus+0x15c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	4a08      	ldr	r2, [pc, #32]	; (80054e0 <HAL_SD_GetCardStatus+0x168>)
 80054be:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode = errorstate;
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80054c4:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	2201      	movs	r2, #1
 80054ca:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    status = HAL_ERROR;
 80054ce:	2301      	movs	r3, #1
 80054d0:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  }

  return status;
 80054d4:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 80054d8:	4618      	mov	r0, r3
 80054da:	3750      	adds	r7, #80	; 0x50
 80054dc:	46bd      	mov	sp, r7
 80054de:	bd80      	pop	{r7, pc}
 80054e0:	1fe00fff 	.word	0x1fe00fff

080054e4 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 80054e4:	b590      	push	{r4, r7, lr}
 80054e6:	b08d      	sub	sp, #52	; 0x34
 80054e8:	af02      	add	r7, sp, #8
 80054ea:	6078      	str	r0, [r7, #4]
 80054ec:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk;
  HAL_StatusTypeDef status = HAL_OK;
 80054ee:	2300      	movs	r3, #0
 80054f0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	2203      	movs	r2, #3
 80054f8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  if (hsd->SdCard.CardType != CARD_SECURED)
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005500:	2b03      	cmp	r3, #3
 8005502:	d02e      	beq.n	8005562 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if (WideMode == SDMMC_BUS_WIDE_8B)
 8005504:	683b      	ldr	r3, [r7, #0]
 8005506:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800550a:	d106      	bne.n	800551a <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005510:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	635a      	str	r2, [r3, #52]	; 0x34
 8005518:	e029      	b.n	800556e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_4B)
 800551a:	683b      	ldr	r3, [r7, #0]
 800551c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005520:	d10a      	bne.n	8005538 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8005522:	6878      	ldr	r0, [r7, #4]
 8005524:	f000 fb4c 	bl	8005bc0 <SD_WideBus_Enable>
 8005528:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800552e:	6a3b      	ldr	r3, [r7, #32]
 8005530:	431a      	orrs	r2, r3
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	635a      	str	r2, [r3, #52]	; 0x34
 8005536:	e01a      	b.n	800556e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_1B)
 8005538:	683b      	ldr	r3, [r7, #0]
 800553a:	2b00      	cmp	r3, #0
 800553c:	d10a      	bne.n	8005554 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800553e:	6878      	ldr	r0, [r7, #4]
 8005540:	f000 fb89 	bl	8005c56 <SD_WideBus_Disable>
 8005544:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800554a:	6a3b      	ldr	r3, [r7, #32]
 800554c:	431a      	orrs	r2, r3
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	635a      	str	r2, [r3, #52]	; 0x34
 8005552:	e00c      	b.n	800556e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005558:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	635a      	str	r2, [r3, #52]	; 0x34
 8005560:	e005      	b.n	800556e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005566:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	635a      	str	r2, [r3, #52]	; 0x34
  }

  if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005572:	2b00      	cmp	r3, #0
 8005574:	d007      	beq.n	8005586 <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	4a5e      	ldr	r2, [pc, #376]	; (80056f4 <HAL_SD_ConfigWideBusOperation+0x210>)
 800557c:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 800557e:	2301      	movs	r3, #1
 8005580:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8005584:	e094      	b.n	80056b0 <HAL_SD_ConfigWideBusOperation+0x1cc>
  }
  else
  {
    sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 8005586:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800558a:	f7fe f9f3 	bl	8003974 <HAL_RCCEx_GetPeriphCLKFreq>
 800558e:	61f8      	str	r0, [r7, #28]
    if (sdmmc_clk != 0U)
 8005590:	69fb      	ldr	r3, [r7, #28]
 8005592:	2b00      	cmp	r3, #0
 8005594:	f000 8083 	beq.w	800569e <HAL_SD_ConfigWideBusOperation+0x1ba>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	685b      	ldr	r3, [r3, #4]
 800559c:	60bb      	str	r3, [r7, #8]
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	689b      	ldr	r3, [r3, #8]
 80055a2:	60fb      	str	r3, [r7, #12]
      Init.BusWide             = WideMode;
 80055a4:	683b      	ldr	r3, [r7, #0]
 80055a6:	613b      	str	r3, [r7, #16]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	691b      	ldr	r3, [r3, #16]
 80055ac:	617b      	str	r3, [r7, #20]

      /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	695a      	ldr	r2, [r3, #20]
 80055b2:	69fb      	ldr	r3, [r7, #28]
 80055b4:	4950      	ldr	r1, [pc, #320]	; (80056f8 <HAL_SD_ConfigWideBusOperation+0x214>)
 80055b6:	fba1 1303 	umull	r1, r3, r1, r3
 80055ba:	0e1b      	lsrs	r3, r3, #24
 80055bc:	429a      	cmp	r2, r3
 80055be:	d303      	bcc.n	80055c8 <HAL_SD_ConfigWideBusOperation+0xe4>
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	695b      	ldr	r3, [r3, #20]
 80055c4:	61bb      	str	r3, [r7, #24]
 80055c6:	e05a      	b.n	800567e <HAL_SD_ConfigWideBusOperation+0x19a>
      }
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80055cc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80055d0:	d103      	bne.n	80055da <HAL_SD_ConfigWideBusOperation+0xf6>
      {
        /* UltraHigh speed SD card,user Clock div */
        Init.ClockDiv = hsd->Init.ClockDiv;
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	695b      	ldr	r3, [r3, #20]
 80055d6:	61bb      	str	r3, [r7, #24]
 80055d8:	e051      	b.n	800567e <HAL_SD_ConfigWideBusOperation+0x19a>
      }
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80055de:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80055e2:	d126      	bne.n	8005632 <HAL_SD_ConfigWideBusOperation+0x14e>
      {
        /* High speed SD card, Max Frequency = 50Mhz */
        if (hsd->Init.ClockDiv == 0U)
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	695b      	ldr	r3, [r3, #20]
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d10e      	bne.n	800560a <HAL_SD_ConfigWideBusOperation+0x126>
        {
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
 80055ec:	69fb      	ldr	r3, [r7, #28]
 80055ee:	4a43      	ldr	r2, [pc, #268]	; (80056fc <HAL_SD_ConfigWideBusOperation+0x218>)
 80055f0:	4293      	cmp	r3, r2
 80055f2:	d906      	bls.n	8005602 <HAL_SD_ConfigWideBusOperation+0x11e>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 80055f4:	69fb      	ldr	r3, [r7, #28]
 80055f6:	4a40      	ldr	r2, [pc, #256]	; (80056f8 <HAL_SD_ConfigWideBusOperation+0x214>)
 80055f8:	fba2 2303 	umull	r2, r3, r2, r3
 80055fc:	0e5b      	lsrs	r3, r3, #25
 80055fe:	61bb      	str	r3, [r7, #24]
 8005600:	e03d      	b.n	800567e <HAL_SD_ConfigWideBusOperation+0x19a>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	695b      	ldr	r3, [r3, #20]
 8005606:	61bb      	str	r3, [r7, #24]
 8005608:	e039      	b.n	800567e <HAL_SD_ConfigWideBusOperation+0x19a>
          }
        }
        else
        {
          if ((sdmmc_clk/(2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	695b      	ldr	r3, [r3, #20]
 800560e:	005b      	lsls	r3, r3, #1
 8005610:	69fa      	ldr	r2, [r7, #28]
 8005612:	fbb2 f3f3 	udiv	r3, r2, r3
 8005616:	4a39      	ldr	r2, [pc, #228]	; (80056fc <HAL_SD_ConfigWideBusOperation+0x218>)
 8005618:	4293      	cmp	r3, r2
 800561a:	d906      	bls.n	800562a <HAL_SD_ConfigWideBusOperation+0x146>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 800561c:	69fb      	ldr	r3, [r7, #28]
 800561e:	4a36      	ldr	r2, [pc, #216]	; (80056f8 <HAL_SD_ConfigWideBusOperation+0x214>)
 8005620:	fba2 2303 	umull	r2, r3, r2, r3
 8005624:	0e5b      	lsrs	r3, r3, #25
 8005626:	61bb      	str	r3, [r7, #24]
 8005628:	e029      	b.n	800567e <HAL_SD_ConfigWideBusOperation+0x19a>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	695b      	ldr	r3, [r3, #20]
 800562e:	61bb      	str	r3, [r7, #24]
 8005630:	e025      	b.n	800567e <HAL_SD_ConfigWideBusOperation+0x19a>
        }
      }
      else
      {
        /* No High speed SD card, Max Frequency = 25Mhz */
        if (hsd->Init.ClockDiv == 0U)
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	695b      	ldr	r3, [r3, #20]
 8005636:	2b00      	cmp	r3, #0
 8005638:	d10e      	bne.n	8005658 <HAL_SD_ConfigWideBusOperation+0x174>
        {
          if (sdmmc_clk > SD_NORMAL_SPEED_FREQ)
 800563a:	69fb      	ldr	r3, [r7, #28]
 800563c:	4a30      	ldr	r2, [pc, #192]	; (8005700 <HAL_SD_ConfigWideBusOperation+0x21c>)
 800563e:	4293      	cmp	r3, r2
 8005640:	d906      	bls.n	8005650 <HAL_SD_ConfigWideBusOperation+0x16c>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 8005642:	69fb      	ldr	r3, [r7, #28]
 8005644:	4a2c      	ldr	r2, [pc, #176]	; (80056f8 <HAL_SD_ConfigWideBusOperation+0x214>)
 8005646:	fba2 2303 	umull	r2, r3, r2, r3
 800564a:	0e1b      	lsrs	r3, r3, #24
 800564c:	61bb      	str	r3, [r7, #24]
 800564e:	e016      	b.n	800567e <HAL_SD_ConfigWideBusOperation+0x19a>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	695b      	ldr	r3, [r3, #20]
 8005654:	61bb      	str	r3, [r7, #24]
 8005656:	e012      	b.n	800567e <HAL_SD_ConfigWideBusOperation+0x19a>
          }
        }
        else
        {
          if ((sdmmc_clk/(2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	695b      	ldr	r3, [r3, #20]
 800565c:	005b      	lsls	r3, r3, #1
 800565e:	69fa      	ldr	r2, [r7, #28]
 8005660:	fbb2 f3f3 	udiv	r3, r2, r3
 8005664:	4a26      	ldr	r2, [pc, #152]	; (8005700 <HAL_SD_ConfigWideBusOperation+0x21c>)
 8005666:	4293      	cmp	r3, r2
 8005668:	d906      	bls.n	8005678 <HAL_SD_ConfigWideBusOperation+0x194>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 800566a:	69fb      	ldr	r3, [r7, #28]
 800566c:	4a22      	ldr	r2, [pc, #136]	; (80056f8 <HAL_SD_ConfigWideBusOperation+0x214>)
 800566e:	fba2 2303 	umull	r2, r3, r2, r3
 8005672:	0e1b      	lsrs	r3, r3, #24
 8005674:	61bb      	str	r3, [r7, #24]
 8005676:	e002      	b.n	800567e <HAL_SD_ConfigWideBusOperation+0x19a>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	695b      	ldr	r3, [r3, #20]
 800567c:	61bb      	str	r3, [r7, #24]

#if (USE_SD_TRANSCEIVER != 0U)
      Init.TranceiverPresent = hsd->Init.TranceiverPresent;
#endif /* USE_SD_TRANSCEIVER */

      (void)SDMMC_Init(hsd->Instance, Init);
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681c      	ldr	r4, [r3, #0]
 8005682:	466a      	mov	r2, sp
 8005684:	f107 0314 	add.w	r3, r7, #20
 8005688:	e893 0003 	ldmia.w	r3, {r0, r1}
 800568c:	e882 0003 	stmia.w	r2, {r0, r1}
 8005690:	f107 0308 	add.w	r3, r7, #8
 8005694:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005696:	4620      	mov	r0, r4
 8005698:	f001 fc18 	bl	8006ecc <SDMMC_Init>
 800569c:	e008      	b.n	80056b0 <HAL_SD_ConfigWideBusOperation+0x1cc>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80056a2:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	635a      	str	r2, [r3, #52]	; 0x34
      status = HAL_ERROR;
 80056aa:	2301      	movs	r3, #1
 80056ac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80056b8:	4618      	mov	r0, r3
 80056ba:	f001 fcd3 	bl	8007064 <SDMMC_CmdBlockLength>
 80056be:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 80056c0:	6a3b      	ldr	r3, [r7, #32]
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d00c      	beq.n	80056e0 <HAL_SD_ConfigWideBusOperation+0x1fc>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	4a0a      	ldr	r2, [pc, #40]	; (80056f4 <HAL_SD_ConfigWideBusOperation+0x210>)
 80056cc:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80056d2:	6a3b      	ldr	r3, [r7, #32]
 80056d4:	431a      	orrs	r2, r3
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	635a      	str	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 80056da:	2301      	movs	r3, #1
 80056dc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	2201      	movs	r2, #1
 80056e4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return status;
 80056e8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80056ec:	4618      	mov	r0, r3
 80056ee:	372c      	adds	r7, #44	; 0x2c
 80056f0:	46bd      	mov	sp, r7
 80056f2:	bd90      	pop	{r4, r7, pc}
 80056f4:	1fe00fff 	.word	0x1fe00fff
 80056f8:	55e63b89 	.word	0x55e63b89
 80056fc:	02faf080 	.word	0x02faf080
 8005700:	017d7840 	.word	0x017d7840

08005704 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8005704:	b580      	push	{r7, lr}
 8005706:	b086      	sub	sp, #24
 8005708:	af00      	add	r7, sp, #0
 800570a:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800570c:	2300      	movs	r3, #0
 800570e:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8005710:	f107 030c 	add.w	r3, r7, #12
 8005714:	4619      	mov	r1, r3
 8005716:	6878      	ldr	r0, [r7, #4]
 8005718:	f000 fa2a 	bl	8005b70 <SD_SendStatus>
 800571c:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800571e:	697b      	ldr	r3, [r7, #20]
 8005720:	2b00      	cmp	r3, #0
 8005722:	d005      	beq.n	8005730 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005728:	697b      	ldr	r3, [r7, #20]
 800572a:	431a      	orrs	r2, r3
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	635a      	str	r2, [r3, #52]	; 0x34
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	0a5b      	lsrs	r3, r3, #9
 8005734:	f003 030f 	and.w	r3, r3, #15
 8005738:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800573a:	693b      	ldr	r3, [r7, #16]
}
 800573c:	4618      	mov	r0, r3
 800573e:	3718      	adds	r7, #24
 8005740:	46bd      	mov	sp, r7
 8005742:	bd80      	pop	{r7, pc}

08005744 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8005744:	b580      	push	{r7, lr}
 8005746:	b090      	sub	sp, #64	; 0x40
 8005748:	af00      	add	r7, sp, #0
 800574a:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 800574c:	2301      	movs	r3, #1
 800574e:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if (SDMMC_GetPowerState(hsd->Instance) == 0U)
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	4618      	mov	r0, r3
 8005756:	f001 fc01 	bl	8006f5c <SDMMC_GetPowerState>
 800575a:	4603      	mov	r3, r0
 800575c:	2b00      	cmp	r3, #0
 800575e:	d102      	bne.n	8005766 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8005760:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8005764:	e0a5      	b.n	80058b2 <SD_InitCard+0x16e>
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800576a:	2b03      	cmp	r3, #3
 800576c:	d02e      	beq.n	80057cc <SD_InitCard+0x88>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	4618      	mov	r0, r3
 8005774:	f001 fd82 	bl	800727c <SDMMC_CmdSendCID>
 8005778:	63f8      	str	r0, [r7, #60]	; 0x3c
    if (errorstate != HAL_SD_ERROR_NONE)
 800577a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800577c:	2b00      	cmp	r3, #0
 800577e:	d001      	beq.n	8005784 <SD_InitCard+0x40>
    {
      return errorstate;
 8005780:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005782:	e096      	b.n	80058b2 <SD_InitCard+0x16e>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	2100      	movs	r1, #0
 800578a:	4618      	mov	r0, r3
 800578c:	f001 fc2b 	bl	8006fe6 <SDMMC_GetResponse>
 8005790:	4602      	mov	r2, r0
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	2104      	movs	r1, #4
 800579c:	4618      	mov	r0, r3
 800579e:	f001 fc22 	bl	8006fe6 <SDMMC_GetResponse>
 80057a2:	4602      	mov	r2, r0
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	671a      	str	r2, [r3, #112]	; 0x70
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	2108      	movs	r1, #8
 80057ae:	4618      	mov	r0, r3
 80057b0:	f001 fc19 	bl	8006fe6 <SDMMC_GetResponse>
 80057b4:	4602      	mov	r2, r0
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	210c      	movs	r1, #12
 80057c0:	4618      	mov	r0, r3
 80057c2:	f001 fc10 	bl	8006fe6 <SDMMC_GetResponse>
 80057c6:	4602      	mov	r2, r0
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	679a      	str	r2, [r3, #120]	; 0x78
    }
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057d0:	2b03      	cmp	r3, #3
 80057d2:	d00d      	beq.n	80057f0 <SD_InitCard+0xac>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	f107 020e 	add.w	r2, r7, #14
 80057dc:	4611      	mov	r1, r2
 80057de:	4618      	mov	r0, r3
 80057e0:	f001 fd8b 	bl	80072fa <SDMMC_CmdSetRelAdd>
 80057e4:	63f8      	str	r0, [r7, #60]	; 0x3c
    if (errorstate != HAL_SD_ERROR_NONE)
 80057e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d001      	beq.n	80057f0 <SD_InitCard+0xac>
    {
      return errorstate;
 80057ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80057ee:	e060      	b.n	80058b2 <SD_InitCard+0x16e>
    }
  }
  if (hsd->SdCard.CardType != CARD_SECURED)
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057f4:	2b03      	cmp	r3, #3
 80057f6:	d036      	beq.n	8005866 <SD_InitCard+0x122>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 80057f8:	89fb      	ldrh	r3, [r7, #14]
 80057fa:	461a      	mov	r2, r3
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	645a      	str	r2, [r3, #68]	; 0x44

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681a      	ldr	r2, [r3, #0]
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005808:	041b      	lsls	r3, r3, #16
 800580a:	4619      	mov	r1, r3
 800580c:	4610      	mov	r0, r2
 800580e:	f001 fd54 	bl	80072ba <SDMMC_CmdSendCSD>
 8005812:	63f8      	str	r0, [r7, #60]	; 0x3c
    if (errorstate != HAL_SD_ERROR_NONE)
 8005814:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005816:	2b00      	cmp	r3, #0
 8005818:	d001      	beq.n	800581e <SD_InitCard+0xda>
    {
      return errorstate;
 800581a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800581c:	e049      	b.n	80058b2 <SD_InitCard+0x16e>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	2100      	movs	r1, #0
 8005824:	4618      	mov	r0, r3
 8005826:	f001 fbde 	bl	8006fe6 <SDMMC_GetResponse>
 800582a:	4602      	mov	r2, r0
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	65da      	str	r2, [r3, #92]	; 0x5c
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	2104      	movs	r1, #4
 8005836:	4618      	mov	r0, r3
 8005838:	f001 fbd5 	bl	8006fe6 <SDMMC_GetResponse>
 800583c:	4602      	mov	r2, r0
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	661a      	str	r2, [r3, #96]	; 0x60
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	2108      	movs	r1, #8
 8005848:	4618      	mov	r0, r3
 800584a:	f001 fbcc 	bl	8006fe6 <SDMMC_GetResponse>
 800584e:	4602      	mov	r2, r0
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	210c      	movs	r1, #12
 800585a:	4618      	mov	r0, r3
 800585c:	f001 fbc3 	bl	8006fe6 <SDMMC_GetResponse>
 8005860:	4602      	mov	r2, r0
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	669a      	str	r2, [r3, #104]	; 0x68
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	2104      	movs	r1, #4
 800586c:	4618      	mov	r0, r3
 800586e:	f001 fbba 	bl	8006fe6 <SDMMC_GetResponse>
 8005872:	4603      	mov	r3, r0
 8005874:	0d1a      	lsrs	r2, r3, #20
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	641a      	str	r2, [r3, #64]	; 0x40

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800587a:	f107 0310 	add.w	r3, r7, #16
 800587e:	4619      	mov	r1, r3
 8005880:	6878      	ldr	r0, [r7, #4]
 8005882:	f7ff fbd5 	bl	8005030 <HAL_SD_GetCardCSD>
 8005886:	4603      	mov	r3, r0
 8005888:	2b00      	cmp	r3, #0
 800588a:	d002      	beq.n	8005892 <SD_InitCard+0x14e>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800588c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8005890:	e00f      	b.n	80058b2 <SD_InitCard+0x16e>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681a      	ldr	r2, [r3, #0]
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800589a:	041b      	lsls	r3, r3, #16
 800589c:	4619      	mov	r1, r3
 800589e:	4610      	mov	r0, r2
 80058a0:	f001 fc03 	bl	80070aa <SDMMC_CmdSelDesel>
 80058a4:	63f8      	str	r0, [r7, #60]	; 0x3c
  if (errorstate != HAL_SD_ERROR_NONE)
 80058a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d001      	beq.n	80058b0 <SD_InitCard+0x16c>
  {
    return errorstate;
 80058ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80058ae:	e000      	b.n	80058b2 <SD_InitCard+0x16e>
  }

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 80058b0:	2300      	movs	r3, #0
}
 80058b2:	4618      	mov	r0, r3
 80058b4:	3740      	adds	r7, #64	; 0x40
 80058b6:	46bd      	mov	sp, r7
 80058b8:	bd80      	pop	{r7, pc}
	...

080058bc <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 80058bc:	b580      	push	{r7, lr}
 80058be:	b086      	sub	sp, #24
 80058c0:	af00      	add	r7, sp, #0
 80058c2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80058c4:	2300      	movs	r3, #0
 80058c6:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U;
 80058c8:	2300      	movs	r3, #0
 80058ca:	617b      	str	r3, [r7, #20]
  uint32_t validvoltage = 0U;
 80058cc:	2300      	movs	r3, #0
 80058ce:	613b      	str	r3, [r7, #16]
#if (USE_SD_TRANSCEIVER != 0U)
  uint32_t tickstart = HAL_GetTick();
#endif /* USE_SD_TRANSCEIVER  */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	4618      	mov	r0, r3
 80058d6:	f001 fc0b 	bl	80070f0 <SDMMC_CmdGoIdleState>
 80058da:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d001      	beq.n	80058e6 <SD_PowerON+0x2a>
  {
    return errorstate;
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	e06e      	b.n	80059c4 <SD_PowerON+0x108>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	4618      	mov	r0, r3
 80058ec:	f001 fc1e 	bl	800712c <SDMMC_CmdOperCond>
 80058f0:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d00d      	beq.n	8005914 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	2200      	movs	r2, #0
 80058fc:	63da      	str	r2, [r3, #60]	; 0x3c
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	4618      	mov	r0, r3
 8005904:	f001 fbf4 	bl	80070f0 <SDMMC_CmdGoIdleState>
 8005908:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	2b00      	cmp	r3, #0
 800590e:	d004      	beq.n	800591a <SD_PowerON+0x5e>
    {
      return errorstate;
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	e057      	b.n	80059c4 <SD_PowerON+0x108>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	2201      	movs	r2, #1
 8005918:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  if (hsd->SdCard.CardVersion == CARD_V2_X)
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800591e:	2b01      	cmp	r3, #1
 8005920:	d137      	bne.n	8005992 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	2100      	movs	r1, #0
 8005928:	4618      	mov	r0, r3
 800592a:	f001 fc1f 	bl	800716c <SDMMC_CmdAppCommand>
 800592e:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	2b00      	cmp	r3, #0
 8005934:	d02d      	beq.n	8005992 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005936:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800593a:	e043      	b.n	80059c4 <SD_PowerON+0x108>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	2100      	movs	r1, #0
 8005942:	4618      	mov	r0, r3
 8005944:	f001 fc12 	bl	800716c <SDMMC_CmdAppCommand>
 8005948:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	2b00      	cmp	r3, #0
 800594e:	d001      	beq.n	8005954 <SD_PowerON+0x98>
    {
      return errorstate;
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	e037      	b.n	80059c4 <SD_PowerON+0x108>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY |
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	491c      	ldr	r1, [pc, #112]	; (80059cc <SD_PowerON+0x110>)
 800595a:	4618      	mov	r0, r3
 800595c:	f001 fc29 	bl	80071b2 <SDMMC_CmdAppOperCommand>
 8005960:	60f8      	str	r0, [r7, #12]
                                         SD_SWITCH_1_8V_CAPACITY);
    if (errorstate != HAL_SD_ERROR_NONE)
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	2b00      	cmp	r3, #0
 8005966:	d002      	beq.n	800596e <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005968:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800596c:	e02a      	b.n	80059c4 <SD_PowerON+0x108>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	2100      	movs	r1, #0
 8005974:	4618      	mov	r0, r3
 8005976:	f001 fb36 	bl	8006fe6 <SDMMC_GetResponse>
 800597a:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800597c:	697b      	ldr	r3, [r7, #20]
 800597e:	0fdb      	lsrs	r3, r3, #31
 8005980:	2b01      	cmp	r3, #1
 8005982:	d101      	bne.n	8005988 <SD_PowerON+0xcc>
 8005984:	2301      	movs	r3, #1
 8005986:	e000      	b.n	800598a <SD_PowerON+0xce>
 8005988:	2300      	movs	r3, #0
 800598a:	613b      	str	r3, [r7, #16]

    count++;
 800598c:	68bb      	ldr	r3, [r7, #8]
 800598e:	3301      	adds	r3, #1
 8005990:	60bb      	str	r3, [r7, #8]
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8005992:	68bb      	ldr	r3, [r7, #8]
 8005994:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8005998:	4293      	cmp	r3, r2
 800599a:	d802      	bhi.n	80059a2 <SD_PowerON+0xe6>
 800599c:	693b      	ldr	r3, [r7, #16]
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d0cc      	beq.n	800593c <SD_PowerON+0x80>
  }

  if (count >= SDMMC_MAX_VOLT_TRIAL)
 80059a2:	68bb      	ldr	r3, [r7, #8]
 80059a4:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80059a8:	4293      	cmp	r3, r2
 80059aa:	d902      	bls.n	80059b2 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 80059ac:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80059b0:	e008      	b.n	80059c4 <SD_PowerON+0x108>
  }

  if ((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 80059b2:	697b      	ldr	r3, [r7, #20]
 80059b4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d002      	beq.n	80059c2 <SD_PowerON+0x106>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	2201      	movs	r2, #1
 80059c0:	639a      	str	r2, [r3, #56]	; 0x38
      }
    }
#endif /* USE_SD_TRANSCEIVER  */
  }

  return HAL_SD_ERROR_NONE;
 80059c2:	2300      	movs	r3, #0
}
 80059c4:	4618      	mov	r0, r3
 80059c6:	3718      	adds	r7, #24
 80059c8:	46bd      	mov	sp, r7
 80059ca:	bd80      	pop	{r7, pc}
 80059cc:	c1100000 	.word	0xc1100000

080059d0 <SD_SendSDStatus>:
  * @param  pSDstatus: Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 80059d0:	b580      	push	{r7, lr}
 80059d2:	b08c      	sub	sp, #48	; 0x30
 80059d4:	af00      	add	r7, sp, #0
 80059d6:	6078      	str	r0, [r7, #4]
 80059d8:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80059da:	f7fb fbd3 	bl	8001184 <HAL_GetTick>
 80059de:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 80059e0:	683b      	ldr	r3, [r7, #0]
 80059e2:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check SD response */
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	2100      	movs	r1, #0
 80059ea:	4618      	mov	r0, r3
 80059ec:	f001 fafb 	bl	8006fe6 <SDMMC_GetResponse>
 80059f0:	4603      	mov	r3, r0
 80059f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80059f6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80059fa:	d102      	bne.n	8005a02 <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80059fc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005a00:	e0b0      	b.n	8005b64 <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	2140      	movs	r1, #64	; 0x40
 8005a08:	4618      	mov	r0, r3
 8005a0a:	f001 fb2b 	bl	8007064 <SDMMC_CmdBlockLength>
 8005a0e:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8005a10:	6a3b      	ldr	r3, [r7, #32]
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d005      	beq.n	8005a22 <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 8005a1e:	6a3b      	ldr	r3, [r7, #32]
 8005a20:	e0a0      	b.n	8005b64 <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681a      	ldr	r2, [r3, #0]
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a2a:	041b      	lsls	r3, r3, #16
 8005a2c:	4619      	mov	r1, r3
 8005a2e:	4610      	mov	r0, r2
 8005a30:	f001 fb9c 	bl	800716c <SDMMC_CmdAppCommand>
 8005a34:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8005a36:	6a3b      	ldr	r3, [r7, #32]
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d005      	beq.n	8005a48 <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 8005a44:	6a3b      	ldr	r3, [r7, #32]
 8005a46:	e08d      	b.n	8005b64 <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8005a48:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005a4c:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 8005a4e:	2340      	movs	r3, #64	; 0x40
 8005a50:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 8005a52:	2360      	movs	r3, #96	; 0x60
 8005a54:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8005a56:	2302      	movs	r3, #2
 8005a58:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8005a5a:	2300      	movs	r3, #0
 8005a5c:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8005a5e:	2301      	movs	r3, #1
 8005a60:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	f107 0208 	add.w	r2, r7, #8
 8005a6a:	4611      	mov	r1, r2
 8005a6c:	4618      	mov	r0, r3
 8005a6e:	f001 facd 	bl	800700c <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	4618      	mov	r0, r3
 8005a78:	f001 fc84 	bl	8007384 <SDMMC_CmdStatusRegister>
 8005a7c:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8005a7e:	6a3b      	ldr	r3, [r7, #32]
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d02b      	beq.n	8005adc <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 8005a8c:	6a3b      	ldr	r3, [r7, #32]
 8005a8e:	e069      	b.n	8005b64 <SD_SendSDStatus+0x194>
  }

  /* Get status data */
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
  {
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a96:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d013      	beq.n	8005ac6 <SD_SendSDStatus+0xf6>
    {
      for (count = 0U; count < 8U; count++)
 8005a9e:	2300      	movs	r3, #0
 8005aa0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005aa2:	e00d      	b.n	8005ac0 <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	4618      	mov	r0, r3
 8005aaa:	f001 fa39 	bl	8006f20 <SDMMC_ReadFIFO>
 8005aae:	4602      	mov	r2, r0
 8005ab0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ab2:	601a      	str	r2, [r3, #0]
        pData++;
 8005ab4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ab6:	3304      	adds	r3, #4
 8005ab8:	62bb      	str	r3, [r7, #40]	; 0x28
      for (count = 0U; count < 8U; count++)
 8005aba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005abc:	3301      	adds	r3, #1
 8005abe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005ac0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ac2:	2b07      	cmp	r3, #7
 8005ac4:	d9ee      	bls.n	8005aa4 <SD_SendSDStatus+0xd4>
      }
    }

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8005ac6:	f7fb fb5d 	bl	8001184 <HAL_GetTick>
 8005aca:	4602      	mov	r2, r0
 8005acc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ace:	1ad3      	subs	r3, r2, r3
 8005ad0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005ad4:	d102      	bne.n	8005adc <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8005ad6:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005ada:	e043      	b.n	8005b64 <SD_SendSDStatus+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ae2:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d0d2      	beq.n	8005a90 <SD_SendSDStatus+0xc0>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005af0:	f003 0308 	and.w	r3, r3, #8
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d001      	beq.n	8005afc <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 8005af8:	2308      	movs	r3, #8
 8005afa:	e033      	b.n	8005b64 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b02:	f003 0302 	and.w	r3, r3, #2
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d001      	beq.n	8005b0e <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8005b0a:	2302      	movs	r3, #2
 8005b0c:	e02a      	b.n	8005b64 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b14:	f003 0320 	and.w	r3, r3, #32
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d017      	beq.n	8005b4c <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 8005b1c:	2320      	movs	r3, #32
 8005b1e:	e021      	b.n	8005b64 <SD_SendSDStatus+0x194>
    /* Nothing to do */
  }

  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	4618      	mov	r0, r3
 8005b26:	f001 f9fb 	bl	8006f20 <SDMMC_ReadFIFO>
 8005b2a:	4602      	mov	r2, r0
 8005b2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b2e:	601a      	str	r2, [r3, #0]
    pData++;
 8005b30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b32:	3304      	adds	r3, #4
 8005b34:	62bb      	str	r3, [r7, #40]	; 0x28

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8005b36:	f7fb fb25 	bl	8001184 <HAL_GetTick>
 8005b3a:	4602      	mov	r2, r0
 8005b3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b3e:	1ad3      	subs	r3, r2, r3
 8005b40:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005b44:	d102      	bne.n	8005b4c <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8005b46:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005b4a:	e00b      	b.n	8005b64 <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b52:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d1e2      	bne.n	8005b20 <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	4a03      	ldr	r2, [pc, #12]	; (8005b6c <SD_SendSDStatus+0x19c>)
 8005b60:	639a      	str	r2, [r3, #56]	; 0x38

  return HAL_SD_ERROR_NONE;
 8005b62:	2300      	movs	r3, #0
}
 8005b64:	4618      	mov	r0, r3
 8005b66:	3730      	adds	r7, #48	; 0x30
 8005b68:	46bd      	mov	sp, r7
 8005b6a:	bd80      	pop	{r7, pc}
 8005b6c:	18000f3a 	.word	0x18000f3a

08005b70 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8005b70:	b580      	push	{r7, lr}
 8005b72:	b084      	sub	sp, #16
 8005b74:	af00      	add	r7, sp, #0
 8005b76:	6078      	str	r0, [r7, #4]
 8005b78:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if (pCardStatus == NULL)
 8005b7a:	683b      	ldr	r3, [r7, #0]
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d102      	bne.n	8005b86 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8005b80:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005b84:	e018      	b.n	8005bb8 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681a      	ldr	r2, [r3, #0]
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b8e:	041b      	lsls	r3, r3, #16
 8005b90:	4619      	mov	r1, r3
 8005b92:	4610      	mov	r0, r2
 8005b94:	f001 fbd3 	bl	800733e <SDMMC_CmdSendStatus>
 8005b98:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d001      	beq.n	8005ba4 <SD_SendStatus+0x34>
  {
    return errorstate;
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	e009      	b.n	8005bb8 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	2100      	movs	r1, #0
 8005baa:	4618      	mov	r0, r3
 8005bac:	f001 fa1b 	bl	8006fe6 <SDMMC_GetResponse>
 8005bb0:	4602      	mov	r2, r0
 8005bb2:	683b      	ldr	r3, [r7, #0]
 8005bb4:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8005bb6:	2300      	movs	r3, #0
}
 8005bb8:	4618      	mov	r0, r3
 8005bba:	3710      	adds	r7, #16
 8005bbc:	46bd      	mov	sp, r7
 8005bbe:	bd80      	pop	{r7, pc}

08005bc0 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8005bc0:	b580      	push	{r7, lr}
 8005bc2:	b086      	sub	sp, #24
 8005bc4:	af00      	add	r7, sp, #0
 8005bc6:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 8005bc8:	2300      	movs	r3, #0
 8005bca:	60fb      	str	r3, [r7, #12]
 8005bcc:	2300      	movs	r3, #0
 8005bce:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	2100      	movs	r1, #0
 8005bd6:	4618      	mov	r0, r3
 8005bd8:	f001 fa05 	bl	8006fe6 <SDMMC_GetResponse>
 8005bdc:	4603      	mov	r3, r0
 8005bde:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005be2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005be6:	d102      	bne.n	8005bee <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8005be8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005bec:	e02f      	b.n	8005c4e <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8005bee:	f107 030c 	add.w	r3, r7, #12
 8005bf2:	4619      	mov	r1, r3
 8005bf4:	6878      	ldr	r0, [r7, #4]
 8005bf6:	f000 f879 	bl	8005cec <SD_FindSCR>
 8005bfa:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 8005bfc:	697b      	ldr	r3, [r7, #20]
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d001      	beq.n	8005c06 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8005c02:	697b      	ldr	r3, [r7, #20]
 8005c04:	e023      	b.n	8005c4e <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if ((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8005c06:	693b      	ldr	r3, [r7, #16]
 8005c08:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d01c      	beq.n	8005c4a <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681a      	ldr	r2, [r3, #0]
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c18:	041b      	lsls	r3, r3, #16
 8005c1a:	4619      	mov	r1, r3
 8005c1c:	4610      	mov	r0, r2
 8005c1e:	f001 faa5 	bl	800716c <SDMMC_CmdAppCommand>
 8005c22:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8005c24:	697b      	ldr	r3, [r7, #20]
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d001      	beq.n	8005c2e <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8005c2a:	697b      	ldr	r3, [r7, #20]
 8005c2c:	e00f      	b.n	8005c4e <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	2102      	movs	r1, #2
 8005c34:	4618      	mov	r0, r3
 8005c36:	f001 fadc 	bl	80071f2 <SDMMC_CmdBusWidth>
 8005c3a:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8005c3c:	697b      	ldr	r3, [r7, #20]
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d001      	beq.n	8005c46 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8005c42:	697b      	ldr	r3, [r7, #20]
 8005c44:	e003      	b.n	8005c4e <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8005c46:	2300      	movs	r3, #0
 8005c48:	e001      	b.n	8005c4e <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8005c4a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8005c4e:	4618      	mov	r0, r3
 8005c50:	3718      	adds	r7, #24
 8005c52:	46bd      	mov	sp, r7
 8005c54:	bd80      	pop	{r7, pc}

08005c56 <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8005c56:	b580      	push	{r7, lr}
 8005c58:	b086      	sub	sp, #24
 8005c5a:	af00      	add	r7, sp, #0
 8005c5c:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 8005c5e:	2300      	movs	r3, #0
 8005c60:	60fb      	str	r3, [r7, #12]
 8005c62:	2300      	movs	r3, #0
 8005c64:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	2100      	movs	r1, #0
 8005c6c:	4618      	mov	r0, r3
 8005c6e:	f001 f9ba 	bl	8006fe6 <SDMMC_GetResponse>
 8005c72:	4603      	mov	r3, r0
 8005c74:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c78:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005c7c:	d102      	bne.n	8005c84 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8005c7e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005c82:	e02f      	b.n	8005ce4 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8005c84:	f107 030c 	add.w	r3, r7, #12
 8005c88:	4619      	mov	r1, r3
 8005c8a:	6878      	ldr	r0, [r7, #4]
 8005c8c:	f000 f82e 	bl	8005cec <SD_FindSCR>
 8005c90:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 8005c92:	697b      	ldr	r3, [r7, #20]
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d001      	beq.n	8005c9c <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8005c98:	697b      	ldr	r3, [r7, #20]
 8005c9a:	e023      	b.n	8005ce4 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if ((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8005c9c:	693b      	ldr	r3, [r7, #16]
 8005c9e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d01c      	beq.n	8005ce0 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681a      	ldr	r2, [r3, #0]
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005cae:	041b      	lsls	r3, r3, #16
 8005cb0:	4619      	mov	r1, r3
 8005cb2:	4610      	mov	r0, r2
 8005cb4:	f001 fa5a 	bl	800716c <SDMMC_CmdAppCommand>
 8005cb8:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8005cba:	697b      	ldr	r3, [r7, #20]
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d001      	beq.n	8005cc4 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8005cc0:	697b      	ldr	r3, [r7, #20]
 8005cc2:	e00f      	b.n	8005ce4 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	2100      	movs	r1, #0
 8005cca:	4618      	mov	r0, r3
 8005ccc:	f001 fa91 	bl	80071f2 <SDMMC_CmdBusWidth>
 8005cd0:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8005cd2:	697b      	ldr	r3, [r7, #20]
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d001      	beq.n	8005cdc <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8005cd8:	697b      	ldr	r3, [r7, #20]
 8005cda:	e003      	b.n	8005ce4 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8005cdc:	2300      	movs	r3, #0
 8005cde:	e001      	b.n	8005ce4 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8005ce0:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8005ce4:	4618      	mov	r0, r3
 8005ce6:	3718      	adds	r7, #24
 8005ce8:	46bd      	mov	sp, r7
 8005cea:	bd80      	pop	{r7, pc}

08005cec <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8005cec:	b580      	push	{r7, lr}
 8005cee:	b08e      	sub	sp, #56	; 0x38
 8005cf0:	af00      	add	r7, sp, #0
 8005cf2:	6078      	str	r0, [r7, #4]
 8005cf4:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8005cf6:	f7fb fa45 	bl	8001184 <HAL_GetTick>
 8005cfa:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8005cfc:	2300      	movs	r3, #0
 8005cfe:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 8005d00:	2300      	movs	r3, #0
 8005d02:	60bb      	str	r3, [r7, #8]
 8005d04:	2300      	movs	r3, #0
 8005d06:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8005d08:	683b      	ldr	r3, [r7, #0]
 8005d0a:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	2108      	movs	r1, #8
 8005d12:	4618      	mov	r0, r3
 8005d14:	f001 f9a6 	bl	8007064 <SDMMC_CmdBlockLength>
 8005d18:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 8005d1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d001      	beq.n	8005d24 <SD_FindSCR+0x38>
  {
    return errorstate;
 8005d20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d22:	e0ad      	b.n	8005e80 <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681a      	ldr	r2, [r3, #0]
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d2c:	041b      	lsls	r3, r3, #16
 8005d2e:	4619      	mov	r1, r3
 8005d30:	4610      	mov	r0, r2
 8005d32:	f001 fa1b 	bl	800716c <SDMMC_CmdAppCommand>
 8005d36:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 8005d38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d001      	beq.n	8005d42 <SD_FindSCR+0x56>
  {
    return errorstate;
 8005d3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d40:	e09e      	b.n	8005e80 <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8005d42:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005d46:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8005d48:	2308      	movs	r3, #8
 8005d4a:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 8005d4c:	2330      	movs	r3, #48	; 0x30
 8005d4e:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8005d50:	2302      	movs	r3, #2
 8005d52:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8005d54:	2300      	movs	r3, #0
 8005d56:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8005d58:	2301      	movs	r3, #1
 8005d5a:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	f107 0210 	add.w	r2, r7, #16
 8005d64:	4611      	mov	r1, r2
 8005d66:	4618      	mov	r0, r3
 8005d68:	f001 f950 	bl	800700c <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	4618      	mov	r0, r3
 8005d72:	f001 fa61 	bl	8007238 <SDMMC_CmdSendSCR>
 8005d76:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 8005d78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d027      	beq.n	8005dce <SD_FindSCR+0xe2>
  {
    return errorstate;
 8005d7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d80:	e07e      	b.n	8005e80 <SD_FindSCR+0x194>
  }

  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
                            SDMMC_FLAG_DATAEND))
  {
    if ((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d88:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d113      	bne.n	8005db8 <SD_FindSCR+0xcc>
 8005d90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d110      	bne.n	8005db8 <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	4618      	mov	r0, r3
 8005d9c:	f001 f8c0 	bl	8006f20 <SDMMC_ReadFIFO>
 8005da0:	4603      	mov	r3, r0
 8005da2:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	4618      	mov	r0, r3
 8005daa:	f001 f8b9 	bl	8006f20 <SDMMC_ReadFIFO>
 8005dae:	4603      	mov	r3, r0
 8005db0:	60fb      	str	r3, [r7, #12]
      index++;
 8005db2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005db4:	3301      	adds	r3, #1
 8005db6:	637b      	str	r3, [r7, #52]	; 0x34
    }


    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8005db8:	f7fb f9e4 	bl	8001184 <HAL_GetTick>
 8005dbc:	4602      	mov	r2, r0
 8005dbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dc0:	1ad3      	subs	r3, r2, r3
 8005dc2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005dc6:	d102      	bne.n	8005dce <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8005dc8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005dcc:	e058      	b.n	8005e80 <SD_FindSCR+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005dd4:	f240 532a 	movw	r3, #1322	; 0x52a
 8005dd8:	4013      	ands	r3, r2
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d0d1      	beq.n	8005d82 <SD_FindSCR+0x96>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005de4:	f003 0308 	and.w	r3, r3, #8
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d005      	beq.n	8005df8 <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	2208      	movs	r2, #8
 8005df2:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8005df4:	2308      	movs	r3, #8
 8005df6:	e043      	b.n	8005e80 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005dfe:	f003 0302 	and.w	r3, r3, #2
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d005      	beq.n	8005e12 <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	2202      	movs	r2, #2
 8005e0c:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8005e0e:	2302      	movs	r3, #2
 8005e10:	e036      	b.n	8005e80 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e18:	f003 0320 	and.w	r3, r3, #32
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d005      	beq.n	8005e2c <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	2220      	movs	r2, #32
 8005e26:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8005e28:	2320      	movs	r3, #32
 8005e2a:	e029      	b.n	8005e80 <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	4a15      	ldr	r2, [pc, #84]	; (8005e88 <SD_FindSCR+0x19c>)
 8005e32:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	061a      	lsls	r2, r3, #24
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	021b      	lsls	r3, r3, #8
 8005e3c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005e40:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	0a1b      	lsrs	r3, r3, #8
 8005e46:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 8005e4a:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	0e1b      	lsrs	r3, r3, #24
 8005e50:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 8005e52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e54:	601a      	str	r2, [r3, #0]
    scr++;
 8005e56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e58:	3304      	adds	r3, #4
 8005e5a:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 8005e5c:	68bb      	ldr	r3, [r7, #8]
 8005e5e:	061a      	lsls	r2, r3, #24
 8005e60:	68bb      	ldr	r3, [r7, #8]
 8005e62:	021b      	lsls	r3, r3, #8
 8005e64:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005e68:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8005e6a:	68bb      	ldr	r3, [r7, #8]
 8005e6c:	0a1b      	lsrs	r3, r3, #8
 8005e6e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 8005e72:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8005e74:	68bb      	ldr	r3, [r7, #8]
 8005e76:	0e1b      	lsrs	r3, r3, #24
 8005e78:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 8005e7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e7c:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8005e7e:	2300      	movs	r3, #0
}
 8005e80:	4618      	mov	r0, r3
 8005e82:	3738      	adds	r7, #56	; 0x38
 8005e84:	46bd      	mov	sp, r7
 8005e86:	bd80      	pop	{r7, pc}
 8005e88:	18000f3a 	.word	0x18000f3a

08005e8c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005e8c:	b580      	push	{r7, lr}
 8005e8e:	b082      	sub	sp, #8
 8005e90:	af00      	add	r7, sp, #0
 8005e92:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d101      	bne.n	8005e9e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005e9a:	2301      	movs	r3, #1
 8005e9c:	e042      	b.n	8005f24 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d106      	bne.n	8005eb6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	2200      	movs	r2, #0
 8005eac:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005eb0:	6878      	ldr	r0, [r7, #4]
 8005eb2:	f7fa ff31 	bl	8000d18 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	2224      	movs	r2, #36	; 0x24
 8005eba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	681a      	ldr	r2, [r3, #0]
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	f022 0201 	bic.w	r2, r2, #1
 8005ecc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005ece:	6878      	ldr	r0, [r7, #4]
 8005ed0:	f000 f82c 	bl	8005f2c <UART_SetConfig>
 8005ed4:	4603      	mov	r3, r0
 8005ed6:	2b01      	cmp	r3, #1
 8005ed8:	d101      	bne.n	8005ede <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8005eda:	2301      	movs	r3, #1
 8005edc:	e022      	b.n	8005f24 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d002      	beq.n	8005eec <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8005ee6:	6878      	ldr	r0, [r7, #4]
 8005ee8:	f000 fd80 	bl	80069ec <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	685a      	ldr	r2, [r3, #4]
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005efa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	689a      	ldr	r2, [r3, #8]
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005f0a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	681a      	ldr	r2, [r3, #0]
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	f042 0201 	orr.w	r2, r2, #1
 8005f1a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005f1c:	6878      	ldr	r0, [r7, #4]
 8005f1e:	f000 fe07 	bl	8006b30 <UART_CheckIdleState>
 8005f22:	4603      	mov	r3, r0
}
 8005f24:	4618      	mov	r0, r3
 8005f26:	3708      	adds	r7, #8
 8005f28:	46bd      	mov	sp, r7
 8005f2a:	bd80      	pop	{r7, pc}

08005f2c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005f2c:	b5b0      	push	{r4, r5, r7, lr}
 8005f2e:	b08e      	sub	sp, #56	; 0x38
 8005f30:	af00      	add	r7, sp, #0
 8005f32:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005f34:	2300      	movs	r3, #0
 8005f36:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	689a      	ldr	r2, [r3, #8]
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	691b      	ldr	r3, [r3, #16]
 8005f42:	431a      	orrs	r2, r3
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	695b      	ldr	r3, [r3, #20]
 8005f48:	431a      	orrs	r2, r3
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	69db      	ldr	r3, [r3, #28]
 8005f4e:	4313      	orrs	r3, r2
 8005f50:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	681a      	ldr	r2, [r3, #0]
 8005f58:	4bbf      	ldr	r3, [pc, #764]	; (8006258 <UART_SetConfig+0x32c>)
 8005f5a:	4013      	ands	r3, r2
 8005f5c:	687a      	ldr	r2, [r7, #4]
 8005f5e:	6812      	ldr	r2, [r2, #0]
 8005f60:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8005f62:	430b      	orrs	r3, r1
 8005f64:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	685b      	ldr	r3, [r3, #4]
 8005f6c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	68da      	ldr	r2, [r3, #12]
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	430a      	orrs	r2, r1
 8005f7a:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	699b      	ldr	r3, [r3, #24]
 8005f80:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	4ab5      	ldr	r2, [pc, #724]	; (800625c <UART_SetConfig+0x330>)
 8005f88:	4293      	cmp	r3, r2
 8005f8a:	d004      	beq.n	8005f96 <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	6a1b      	ldr	r3, [r3, #32]
 8005f90:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005f92:	4313      	orrs	r3, r2
 8005f94:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	689a      	ldr	r2, [r3, #8]
 8005f9c:	4bb0      	ldr	r3, [pc, #704]	; (8006260 <UART_SetConfig+0x334>)
 8005f9e:	4013      	ands	r3, r2
 8005fa0:	687a      	ldr	r2, [r7, #4]
 8005fa2:	6812      	ldr	r2, [r2, #0]
 8005fa4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8005fa6:	430b      	orrs	r3, r1
 8005fa8:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fb0:	f023 010f 	bic.w	r1, r3, #15
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	430a      	orrs	r2, r1
 8005fbe:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	4aa7      	ldr	r2, [pc, #668]	; (8006264 <UART_SetConfig+0x338>)
 8005fc6:	4293      	cmp	r3, r2
 8005fc8:	d176      	bne.n	80060b8 <UART_SetConfig+0x18c>
 8005fca:	4ba7      	ldr	r3, [pc, #668]	; (8006268 <UART_SetConfig+0x33c>)
 8005fcc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005fce:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005fd2:	2b28      	cmp	r3, #40	; 0x28
 8005fd4:	d86c      	bhi.n	80060b0 <UART_SetConfig+0x184>
 8005fd6:	a201      	add	r2, pc, #4	; (adr r2, 8005fdc <UART_SetConfig+0xb0>)
 8005fd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fdc:	08006081 	.word	0x08006081
 8005fe0:	080060b1 	.word	0x080060b1
 8005fe4:	080060b1 	.word	0x080060b1
 8005fe8:	080060b1 	.word	0x080060b1
 8005fec:	080060b1 	.word	0x080060b1
 8005ff0:	080060b1 	.word	0x080060b1
 8005ff4:	080060b1 	.word	0x080060b1
 8005ff8:	080060b1 	.word	0x080060b1
 8005ffc:	08006089 	.word	0x08006089
 8006000:	080060b1 	.word	0x080060b1
 8006004:	080060b1 	.word	0x080060b1
 8006008:	080060b1 	.word	0x080060b1
 800600c:	080060b1 	.word	0x080060b1
 8006010:	080060b1 	.word	0x080060b1
 8006014:	080060b1 	.word	0x080060b1
 8006018:	080060b1 	.word	0x080060b1
 800601c:	08006091 	.word	0x08006091
 8006020:	080060b1 	.word	0x080060b1
 8006024:	080060b1 	.word	0x080060b1
 8006028:	080060b1 	.word	0x080060b1
 800602c:	080060b1 	.word	0x080060b1
 8006030:	080060b1 	.word	0x080060b1
 8006034:	080060b1 	.word	0x080060b1
 8006038:	080060b1 	.word	0x080060b1
 800603c:	08006099 	.word	0x08006099
 8006040:	080060b1 	.word	0x080060b1
 8006044:	080060b1 	.word	0x080060b1
 8006048:	080060b1 	.word	0x080060b1
 800604c:	080060b1 	.word	0x080060b1
 8006050:	080060b1 	.word	0x080060b1
 8006054:	080060b1 	.word	0x080060b1
 8006058:	080060b1 	.word	0x080060b1
 800605c:	080060a1 	.word	0x080060a1
 8006060:	080060b1 	.word	0x080060b1
 8006064:	080060b1 	.word	0x080060b1
 8006068:	080060b1 	.word	0x080060b1
 800606c:	080060b1 	.word	0x080060b1
 8006070:	080060b1 	.word	0x080060b1
 8006074:	080060b1 	.word	0x080060b1
 8006078:	080060b1 	.word	0x080060b1
 800607c:	080060a9 	.word	0x080060a9
 8006080:	2301      	movs	r3, #1
 8006082:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006086:	e222      	b.n	80064ce <UART_SetConfig+0x5a2>
 8006088:	2304      	movs	r3, #4
 800608a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800608e:	e21e      	b.n	80064ce <UART_SetConfig+0x5a2>
 8006090:	2308      	movs	r3, #8
 8006092:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006096:	e21a      	b.n	80064ce <UART_SetConfig+0x5a2>
 8006098:	2310      	movs	r3, #16
 800609a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800609e:	e216      	b.n	80064ce <UART_SetConfig+0x5a2>
 80060a0:	2320      	movs	r3, #32
 80060a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80060a6:	e212      	b.n	80064ce <UART_SetConfig+0x5a2>
 80060a8:	2340      	movs	r3, #64	; 0x40
 80060aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80060ae:	e20e      	b.n	80064ce <UART_SetConfig+0x5a2>
 80060b0:	2380      	movs	r3, #128	; 0x80
 80060b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80060b6:	e20a      	b.n	80064ce <UART_SetConfig+0x5a2>
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	4a6b      	ldr	r2, [pc, #428]	; (800626c <UART_SetConfig+0x340>)
 80060be:	4293      	cmp	r3, r2
 80060c0:	d130      	bne.n	8006124 <UART_SetConfig+0x1f8>
 80060c2:	4b69      	ldr	r3, [pc, #420]	; (8006268 <UART_SetConfig+0x33c>)
 80060c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80060c6:	f003 0307 	and.w	r3, r3, #7
 80060ca:	2b05      	cmp	r3, #5
 80060cc:	d826      	bhi.n	800611c <UART_SetConfig+0x1f0>
 80060ce:	a201      	add	r2, pc, #4	; (adr r2, 80060d4 <UART_SetConfig+0x1a8>)
 80060d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060d4:	080060ed 	.word	0x080060ed
 80060d8:	080060f5 	.word	0x080060f5
 80060dc:	080060fd 	.word	0x080060fd
 80060e0:	08006105 	.word	0x08006105
 80060e4:	0800610d 	.word	0x0800610d
 80060e8:	08006115 	.word	0x08006115
 80060ec:	2300      	movs	r3, #0
 80060ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80060f2:	e1ec      	b.n	80064ce <UART_SetConfig+0x5a2>
 80060f4:	2304      	movs	r3, #4
 80060f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80060fa:	e1e8      	b.n	80064ce <UART_SetConfig+0x5a2>
 80060fc:	2308      	movs	r3, #8
 80060fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006102:	e1e4      	b.n	80064ce <UART_SetConfig+0x5a2>
 8006104:	2310      	movs	r3, #16
 8006106:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800610a:	e1e0      	b.n	80064ce <UART_SetConfig+0x5a2>
 800610c:	2320      	movs	r3, #32
 800610e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006112:	e1dc      	b.n	80064ce <UART_SetConfig+0x5a2>
 8006114:	2340      	movs	r3, #64	; 0x40
 8006116:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800611a:	e1d8      	b.n	80064ce <UART_SetConfig+0x5a2>
 800611c:	2380      	movs	r3, #128	; 0x80
 800611e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006122:	e1d4      	b.n	80064ce <UART_SetConfig+0x5a2>
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	4a51      	ldr	r2, [pc, #324]	; (8006270 <UART_SetConfig+0x344>)
 800612a:	4293      	cmp	r3, r2
 800612c:	d130      	bne.n	8006190 <UART_SetConfig+0x264>
 800612e:	4b4e      	ldr	r3, [pc, #312]	; (8006268 <UART_SetConfig+0x33c>)
 8006130:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006132:	f003 0307 	and.w	r3, r3, #7
 8006136:	2b05      	cmp	r3, #5
 8006138:	d826      	bhi.n	8006188 <UART_SetConfig+0x25c>
 800613a:	a201      	add	r2, pc, #4	; (adr r2, 8006140 <UART_SetConfig+0x214>)
 800613c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006140:	08006159 	.word	0x08006159
 8006144:	08006161 	.word	0x08006161
 8006148:	08006169 	.word	0x08006169
 800614c:	08006171 	.word	0x08006171
 8006150:	08006179 	.word	0x08006179
 8006154:	08006181 	.word	0x08006181
 8006158:	2300      	movs	r3, #0
 800615a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800615e:	e1b6      	b.n	80064ce <UART_SetConfig+0x5a2>
 8006160:	2304      	movs	r3, #4
 8006162:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006166:	e1b2      	b.n	80064ce <UART_SetConfig+0x5a2>
 8006168:	2308      	movs	r3, #8
 800616a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800616e:	e1ae      	b.n	80064ce <UART_SetConfig+0x5a2>
 8006170:	2310      	movs	r3, #16
 8006172:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006176:	e1aa      	b.n	80064ce <UART_SetConfig+0x5a2>
 8006178:	2320      	movs	r3, #32
 800617a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800617e:	e1a6      	b.n	80064ce <UART_SetConfig+0x5a2>
 8006180:	2340      	movs	r3, #64	; 0x40
 8006182:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006186:	e1a2      	b.n	80064ce <UART_SetConfig+0x5a2>
 8006188:	2380      	movs	r3, #128	; 0x80
 800618a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800618e:	e19e      	b.n	80064ce <UART_SetConfig+0x5a2>
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	4a37      	ldr	r2, [pc, #220]	; (8006274 <UART_SetConfig+0x348>)
 8006196:	4293      	cmp	r3, r2
 8006198:	d130      	bne.n	80061fc <UART_SetConfig+0x2d0>
 800619a:	4b33      	ldr	r3, [pc, #204]	; (8006268 <UART_SetConfig+0x33c>)
 800619c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800619e:	f003 0307 	and.w	r3, r3, #7
 80061a2:	2b05      	cmp	r3, #5
 80061a4:	d826      	bhi.n	80061f4 <UART_SetConfig+0x2c8>
 80061a6:	a201      	add	r2, pc, #4	; (adr r2, 80061ac <UART_SetConfig+0x280>)
 80061a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061ac:	080061c5 	.word	0x080061c5
 80061b0:	080061cd 	.word	0x080061cd
 80061b4:	080061d5 	.word	0x080061d5
 80061b8:	080061dd 	.word	0x080061dd
 80061bc:	080061e5 	.word	0x080061e5
 80061c0:	080061ed 	.word	0x080061ed
 80061c4:	2300      	movs	r3, #0
 80061c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80061ca:	e180      	b.n	80064ce <UART_SetConfig+0x5a2>
 80061cc:	2304      	movs	r3, #4
 80061ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80061d2:	e17c      	b.n	80064ce <UART_SetConfig+0x5a2>
 80061d4:	2308      	movs	r3, #8
 80061d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80061da:	e178      	b.n	80064ce <UART_SetConfig+0x5a2>
 80061dc:	2310      	movs	r3, #16
 80061de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80061e2:	e174      	b.n	80064ce <UART_SetConfig+0x5a2>
 80061e4:	2320      	movs	r3, #32
 80061e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80061ea:	e170      	b.n	80064ce <UART_SetConfig+0x5a2>
 80061ec:	2340      	movs	r3, #64	; 0x40
 80061ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80061f2:	e16c      	b.n	80064ce <UART_SetConfig+0x5a2>
 80061f4:	2380      	movs	r3, #128	; 0x80
 80061f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80061fa:	e168      	b.n	80064ce <UART_SetConfig+0x5a2>
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	4a1d      	ldr	r2, [pc, #116]	; (8006278 <UART_SetConfig+0x34c>)
 8006202:	4293      	cmp	r3, r2
 8006204:	d142      	bne.n	800628c <UART_SetConfig+0x360>
 8006206:	4b18      	ldr	r3, [pc, #96]	; (8006268 <UART_SetConfig+0x33c>)
 8006208:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800620a:	f003 0307 	and.w	r3, r3, #7
 800620e:	2b05      	cmp	r3, #5
 8006210:	d838      	bhi.n	8006284 <UART_SetConfig+0x358>
 8006212:	a201      	add	r2, pc, #4	; (adr r2, 8006218 <UART_SetConfig+0x2ec>)
 8006214:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006218:	08006231 	.word	0x08006231
 800621c:	08006239 	.word	0x08006239
 8006220:	08006241 	.word	0x08006241
 8006224:	08006249 	.word	0x08006249
 8006228:	08006251 	.word	0x08006251
 800622c:	0800627d 	.word	0x0800627d
 8006230:	2300      	movs	r3, #0
 8006232:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006236:	e14a      	b.n	80064ce <UART_SetConfig+0x5a2>
 8006238:	2304      	movs	r3, #4
 800623a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800623e:	e146      	b.n	80064ce <UART_SetConfig+0x5a2>
 8006240:	2308      	movs	r3, #8
 8006242:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006246:	e142      	b.n	80064ce <UART_SetConfig+0x5a2>
 8006248:	2310      	movs	r3, #16
 800624a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800624e:	e13e      	b.n	80064ce <UART_SetConfig+0x5a2>
 8006250:	2320      	movs	r3, #32
 8006252:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006256:	e13a      	b.n	80064ce <UART_SetConfig+0x5a2>
 8006258:	cfff69f3 	.word	0xcfff69f3
 800625c:	58000c00 	.word	0x58000c00
 8006260:	11fff4ff 	.word	0x11fff4ff
 8006264:	40011000 	.word	0x40011000
 8006268:	58024400 	.word	0x58024400
 800626c:	40004400 	.word	0x40004400
 8006270:	40004800 	.word	0x40004800
 8006274:	40004c00 	.word	0x40004c00
 8006278:	40005000 	.word	0x40005000
 800627c:	2340      	movs	r3, #64	; 0x40
 800627e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006282:	e124      	b.n	80064ce <UART_SetConfig+0x5a2>
 8006284:	2380      	movs	r3, #128	; 0x80
 8006286:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800628a:	e120      	b.n	80064ce <UART_SetConfig+0x5a2>
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	4acc      	ldr	r2, [pc, #816]	; (80065c4 <UART_SetConfig+0x698>)
 8006292:	4293      	cmp	r3, r2
 8006294:	d176      	bne.n	8006384 <UART_SetConfig+0x458>
 8006296:	4bcc      	ldr	r3, [pc, #816]	; (80065c8 <UART_SetConfig+0x69c>)
 8006298:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800629a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800629e:	2b28      	cmp	r3, #40	; 0x28
 80062a0:	d86c      	bhi.n	800637c <UART_SetConfig+0x450>
 80062a2:	a201      	add	r2, pc, #4	; (adr r2, 80062a8 <UART_SetConfig+0x37c>)
 80062a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062a8:	0800634d 	.word	0x0800634d
 80062ac:	0800637d 	.word	0x0800637d
 80062b0:	0800637d 	.word	0x0800637d
 80062b4:	0800637d 	.word	0x0800637d
 80062b8:	0800637d 	.word	0x0800637d
 80062bc:	0800637d 	.word	0x0800637d
 80062c0:	0800637d 	.word	0x0800637d
 80062c4:	0800637d 	.word	0x0800637d
 80062c8:	08006355 	.word	0x08006355
 80062cc:	0800637d 	.word	0x0800637d
 80062d0:	0800637d 	.word	0x0800637d
 80062d4:	0800637d 	.word	0x0800637d
 80062d8:	0800637d 	.word	0x0800637d
 80062dc:	0800637d 	.word	0x0800637d
 80062e0:	0800637d 	.word	0x0800637d
 80062e4:	0800637d 	.word	0x0800637d
 80062e8:	0800635d 	.word	0x0800635d
 80062ec:	0800637d 	.word	0x0800637d
 80062f0:	0800637d 	.word	0x0800637d
 80062f4:	0800637d 	.word	0x0800637d
 80062f8:	0800637d 	.word	0x0800637d
 80062fc:	0800637d 	.word	0x0800637d
 8006300:	0800637d 	.word	0x0800637d
 8006304:	0800637d 	.word	0x0800637d
 8006308:	08006365 	.word	0x08006365
 800630c:	0800637d 	.word	0x0800637d
 8006310:	0800637d 	.word	0x0800637d
 8006314:	0800637d 	.word	0x0800637d
 8006318:	0800637d 	.word	0x0800637d
 800631c:	0800637d 	.word	0x0800637d
 8006320:	0800637d 	.word	0x0800637d
 8006324:	0800637d 	.word	0x0800637d
 8006328:	0800636d 	.word	0x0800636d
 800632c:	0800637d 	.word	0x0800637d
 8006330:	0800637d 	.word	0x0800637d
 8006334:	0800637d 	.word	0x0800637d
 8006338:	0800637d 	.word	0x0800637d
 800633c:	0800637d 	.word	0x0800637d
 8006340:	0800637d 	.word	0x0800637d
 8006344:	0800637d 	.word	0x0800637d
 8006348:	08006375 	.word	0x08006375
 800634c:	2301      	movs	r3, #1
 800634e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006352:	e0bc      	b.n	80064ce <UART_SetConfig+0x5a2>
 8006354:	2304      	movs	r3, #4
 8006356:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800635a:	e0b8      	b.n	80064ce <UART_SetConfig+0x5a2>
 800635c:	2308      	movs	r3, #8
 800635e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006362:	e0b4      	b.n	80064ce <UART_SetConfig+0x5a2>
 8006364:	2310      	movs	r3, #16
 8006366:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800636a:	e0b0      	b.n	80064ce <UART_SetConfig+0x5a2>
 800636c:	2320      	movs	r3, #32
 800636e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006372:	e0ac      	b.n	80064ce <UART_SetConfig+0x5a2>
 8006374:	2340      	movs	r3, #64	; 0x40
 8006376:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800637a:	e0a8      	b.n	80064ce <UART_SetConfig+0x5a2>
 800637c:	2380      	movs	r3, #128	; 0x80
 800637e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006382:	e0a4      	b.n	80064ce <UART_SetConfig+0x5a2>
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	4a90      	ldr	r2, [pc, #576]	; (80065cc <UART_SetConfig+0x6a0>)
 800638a:	4293      	cmp	r3, r2
 800638c:	d130      	bne.n	80063f0 <UART_SetConfig+0x4c4>
 800638e:	4b8e      	ldr	r3, [pc, #568]	; (80065c8 <UART_SetConfig+0x69c>)
 8006390:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006392:	f003 0307 	and.w	r3, r3, #7
 8006396:	2b05      	cmp	r3, #5
 8006398:	d826      	bhi.n	80063e8 <UART_SetConfig+0x4bc>
 800639a:	a201      	add	r2, pc, #4	; (adr r2, 80063a0 <UART_SetConfig+0x474>)
 800639c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063a0:	080063b9 	.word	0x080063b9
 80063a4:	080063c1 	.word	0x080063c1
 80063a8:	080063c9 	.word	0x080063c9
 80063ac:	080063d1 	.word	0x080063d1
 80063b0:	080063d9 	.word	0x080063d9
 80063b4:	080063e1 	.word	0x080063e1
 80063b8:	2300      	movs	r3, #0
 80063ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80063be:	e086      	b.n	80064ce <UART_SetConfig+0x5a2>
 80063c0:	2304      	movs	r3, #4
 80063c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80063c6:	e082      	b.n	80064ce <UART_SetConfig+0x5a2>
 80063c8:	2308      	movs	r3, #8
 80063ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80063ce:	e07e      	b.n	80064ce <UART_SetConfig+0x5a2>
 80063d0:	2310      	movs	r3, #16
 80063d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80063d6:	e07a      	b.n	80064ce <UART_SetConfig+0x5a2>
 80063d8:	2320      	movs	r3, #32
 80063da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80063de:	e076      	b.n	80064ce <UART_SetConfig+0x5a2>
 80063e0:	2340      	movs	r3, #64	; 0x40
 80063e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80063e6:	e072      	b.n	80064ce <UART_SetConfig+0x5a2>
 80063e8:	2380      	movs	r3, #128	; 0x80
 80063ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80063ee:	e06e      	b.n	80064ce <UART_SetConfig+0x5a2>
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	4a76      	ldr	r2, [pc, #472]	; (80065d0 <UART_SetConfig+0x6a4>)
 80063f6:	4293      	cmp	r3, r2
 80063f8:	d130      	bne.n	800645c <UART_SetConfig+0x530>
 80063fa:	4b73      	ldr	r3, [pc, #460]	; (80065c8 <UART_SetConfig+0x69c>)
 80063fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80063fe:	f003 0307 	and.w	r3, r3, #7
 8006402:	2b05      	cmp	r3, #5
 8006404:	d826      	bhi.n	8006454 <UART_SetConfig+0x528>
 8006406:	a201      	add	r2, pc, #4	; (adr r2, 800640c <UART_SetConfig+0x4e0>)
 8006408:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800640c:	08006425 	.word	0x08006425
 8006410:	0800642d 	.word	0x0800642d
 8006414:	08006435 	.word	0x08006435
 8006418:	0800643d 	.word	0x0800643d
 800641c:	08006445 	.word	0x08006445
 8006420:	0800644d 	.word	0x0800644d
 8006424:	2300      	movs	r3, #0
 8006426:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800642a:	e050      	b.n	80064ce <UART_SetConfig+0x5a2>
 800642c:	2304      	movs	r3, #4
 800642e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006432:	e04c      	b.n	80064ce <UART_SetConfig+0x5a2>
 8006434:	2308      	movs	r3, #8
 8006436:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800643a:	e048      	b.n	80064ce <UART_SetConfig+0x5a2>
 800643c:	2310      	movs	r3, #16
 800643e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006442:	e044      	b.n	80064ce <UART_SetConfig+0x5a2>
 8006444:	2320      	movs	r3, #32
 8006446:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800644a:	e040      	b.n	80064ce <UART_SetConfig+0x5a2>
 800644c:	2340      	movs	r3, #64	; 0x40
 800644e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006452:	e03c      	b.n	80064ce <UART_SetConfig+0x5a2>
 8006454:	2380      	movs	r3, #128	; 0x80
 8006456:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800645a:	e038      	b.n	80064ce <UART_SetConfig+0x5a2>
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	4a5c      	ldr	r2, [pc, #368]	; (80065d4 <UART_SetConfig+0x6a8>)
 8006462:	4293      	cmp	r3, r2
 8006464:	d130      	bne.n	80064c8 <UART_SetConfig+0x59c>
 8006466:	4b58      	ldr	r3, [pc, #352]	; (80065c8 <UART_SetConfig+0x69c>)
 8006468:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800646a:	f003 0307 	and.w	r3, r3, #7
 800646e:	2b05      	cmp	r3, #5
 8006470:	d826      	bhi.n	80064c0 <UART_SetConfig+0x594>
 8006472:	a201      	add	r2, pc, #4	; (adr r2, 8006478 <UART_SetConfig+0x54c>)
 8006474:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006478:	08006491 	.word	0x08006491
 800647c:	08006499 	.word	0x08006499
 8006480:	080064a1 	.word	0x080064a1
 8006484:	080064a9 	.word	0x080064a9
 8006488:	080064b1 	.word	0x080064b1
 800648c:	080064b9 	.word	0x080064b9
 8006490:	2302      	movs	r3, #2
 8006492:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006496:	e01a      	b.n	80064ce <UART_SetConfig+0x5a2>
 8006498:	2304      	movs	r3, #4
 800649a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800649e:	e016      	b.n	80064ce <UART_SetConfig+0x5a2>
 80064a0:	2308      	movs	r3, #8
 80064a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80064a6:	e012      	b.n	80064ce <UART_SetConfig+0x5a2>
 80064a8:	2310      	movs	r3, #16
 80064aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80064ae:	e00e      	b.n	80064ce <UART_SetConfig+0x5a2>
 80064b0:	2320      	movs	r3, #32
 80064b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80064b6:	e00a      	b.n	80064ce <UART_SetConfig+0x5a2>
 80064b8:	2340      	movs	r3, #64	; 0x40
 80064ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80064be:	e006      	b.n	80064ce <UART_SetConfig+0x5a2>
 80064c0:	2380      	movs	r3, #128	; 0x80
 80064c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80064c6:	e002      	b.n	80064ce <UART_SetConfig+0x5a2>
 80064c8:	2380      	movs	r3, #128	; 0x80
 80064ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	4a40      	ldr	r2, [pc, #256]	; (80065d4 <UART_SetConfig+0x6a8>)
 80064d4:	4293      	cmp	r3, r2
 80064d6:	f040 80ef 	bne.w	80066b8 <UART_SetConfig+0x78c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80064da:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80064de:	2b20      	cmp	r3, #32
 80064e0:	dc46      	bgt.n	8006570 <UART_SetConfig+0x644>
 80064e2:	2b02      	cmp	r3, #2
 80064e4:	f2c0 8081 	blt.w	80065ea <UART_SetConfig+0x6be>
 80064e8:	3b02      	subs	r3, #2
 80064ea:	2b1e      	cmp	r3, #30
 80064ec:	d87d      	bhi.n	80065ea <UART_SetConfig+0x6be>
 80064ee:	a201      	add	r2, pc, #4	; (adr r2, 80064f4 <UART_SetConfig+0x5c8>)
 80064f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064f4:	08006577 	.word	0x08006577
 80064f8:	080065eb 	.word	0x080065eb
 80064fc:	0800657f 	.word	0x0800657f
 8006500:	080065eb 	.word	0x080065eb
 8006504:	080065eb 	.word	0x080065eb
 8006508:	080065eb 	.word	0x080065eb
 800650c:	0800658f 	.word	0x0800658f
 8006510:	080065eb 	.word	0x080065eb
 8006514:	080065eb 	.word	0x080065eb
 8006518:	080065eb 	.word	0x080065eb
 800651c:	080065eb 	.word	0x080065eb
 8006520:	080065eb 	.word	0x080065eb
 8006524:	080065eb 	.word	0x080065eb
 8006528:	080065eb 	.word	0x080065eb
 800652c:	0800659f 	.word	0x0800659f
 8006530:	080065eb 	.word	0x080065eb
 8006534:	080065eb 	.word	0x080065eb
 8006538:	080065eb 	.word	0x080065eb
 800653c:	080065eb 	.word	0x080065eb
 8006540:	080065eb 	.word	0x080065eb
 8006544:	080065eb 	.word	0x080065eb
 8006548:	080065eb 	.word	0x080065eb
 800654c:	080065eb 	.word	0x080065eb
 8006550:	080065eb 	.word	0x080065eb
 8006554:	080065eb 	.word	0x080065eb
 8006558:	080065eb 	.word	0x080065eb
 800655c:	080065eb 	.word	0x080065eb
 8006560:	080065eb 	.word	0x080065eb
 8006564:	080065eb 	.word	0x080065eb
 8006568:	080065eb 	.word	0x080065eb
 800656c:	080065dd 	.word	0x080065dd
 8006570:	2b40      	cmp	r3, #64	; 0x40
 8006572:	d036      	beq.n	80065e2 <UART_SetConfig+0x6b6>
 8006574:	e039      	b.n	80065ea <UART_SetConfig+0x6be>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8006576:	f7fd fecf 	bl	8004318 <HAL_RCCEx_GetD3PCLK1Freq>
 800657a:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800657c:	e03b      	b.n	80065f6 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800657e:	f107 0314 	add.w	r3, r7, #20
 8006582:	4618      	mov	r0, r3
 8006584:	f7fd fede 	bl	8004344 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006588:	69bb      	ldr	r3, [r7, #24]
 800658a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800658c:	e033      	b.n	80065f6 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800658e:	f107 0308 	add.w	r3, r7, #8
 8006592:	4618      	mov	r0, r3
 8006594:	f7fe f82a 	bl	80045ec <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800659c:	e02b      	b.n	80065f6 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800659e:	4b0a      	ldr	r3, [pc, #40]	; (80065c8 <UART_SetConfig+0x69c>)
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	f003 0320 	and.w	r3, r3, #32
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d009      	beq.n	80065be <UART_SetConfig+0x692>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80065aa:	4b07      	ldr	r3, [pc, #28]	; (80065c8 <UART_SetConfig+0x69c>)
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	08db      	lsrs	r3, r3, #3
 80065b0:	f003 0303 	and.w	r3, r3, #3
 80065b4:	4a08      	ldr	r2, [pc, #32]	; (80065d8 <UART_SetConfig+0x6ac>)
 80065b6:	fa22 f303 	lsr.w	r3, r2, r3
 80065ba:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80065bc:	e01b      	b.n	80065f6 <UART_SetConfig+0x6ca>
          pclk = (uint32_t) HSI_VALUE;
 80065be:	4b06      	ldr	r3, [pc, #24]	; (80065d8 <UART_SetConfig+0x6ac>)
 80065c0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80065c2:	e018      	b.n	80065f6 <UART_SetConfig+0x6ca>
 80065c4:	40011400 	.word	0x40011400
 80065c8:	58024400 	.word	0x58024400
 80065cc:	40007800 	.word	0x40007800
 80065d0:	40007c00 	.word	0x40007c00
 80065d4:	58000c00 	.word	0x58000c00
 80065d8:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80065dc:	4bc4      	ldr	r3, [pc, #784]	; (80068f0 <UART_SetConfig+0x9c4>)
 80065de:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80065e0:	e009      	b.n	80065f6 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80065e2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80065e6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80065e8:	e005      	b.n	80065f6 <UART_SetConfig+0x6ca>
      default:
        pclk = 0U;
 80065ea:	2300      	movs	r3, #0
 80065ec:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80065ee:	2301      	movs	r3, #1
 80065f0:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 80065f4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80065f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	f000 81da 	beq.w	80069b2 <UART_SetConfig+0xa86>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006602:	4abc      	ldr	r2, [pc, #752]	; (80068f4 <UART_SetConfig+0x9c8>)
 8006604:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006608:	461a      	mov	r2, r3
 800660a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800660c:	fbb3 f3f2 	udiv	r3, r3, r2
 8006610:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	685a      	ldr	r2, [r3, #4]
 8006616:	4613      	mov	r3, r2
 8006618:	005b      	lsls	r3, r3, #1
 800661a:	4413      	add	r3, r2
 800661c:	6a3a      	ldr	r2, [r7, #32]
 800661e:	429a      	cmp	r2, r3
 8006620:	d305      	bcc.n	800662e <UART_SetConfig+0x702>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	685b      	ldr	r3, [r3, #4]
 8006626:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006628:	6a3a      	ldr	r2, [r7, #32]
 800662a:	429a      	cmp	r2, r3
 800662c:	d903      	bls.n	8006636 <UART_SetConfig+0x70a>
      {
        ret = HAL_ERROR;
 800662e:	2301      	movs	r3, #1
 8006630:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8006634:	e1bd      	b.n	80069b2 <UART_SetConfig+0xa86>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006636:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006638:	4618      	mov	r0, r3
 800663a:	f04f 0100 	mov.w	r1, #0
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006642:	4aac      	ldr	r2, [pc, #688]	; (80068f4 <UART_SetConfig+0x9c8>)
 8006644:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006648:	b29a      	uxth	r2, r3
 800664a:	f04f 0300 	mov.w	r3, #0
 800664e:	f7f9 fe43 	bl	80002d8 <__aeabi_uldivmod>
 8006652:	4602      	mov	r2, r0
 8006654:	460b      	mov	r3, r1
 8006656:	4610      	mov	r0, r2
 8006658:	4619      	mov	r1, r3
 800665a:	f04f 0200 	mov.w	r2, #0
 800665e:	f04f 0300 	mov.w	r3, #0
 8006662:	020b      	lsls	r3, r1, #8
 8006664:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006668:	0202      	lsls	r2, r0, #8
 800666a:	6879      	ldr	r1, [r7, #4]
 800666c:	6849      	ldr	r1, [r1, #4]
 800666e:	0849      	lsrs	r1, r1, #1
 8006670:	4608      	mov	r0, r1
 8006672:	f04f 0100 	mov.w	r1, #0
 8006676:	1814      	adds	r4, r2, r0
 8006678:	eb43 0501 	adc.w	r5, r3, r1
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	685b      	ldr	r3, [r3, #4]
 8006680:	461a      	mov	r2, r3
 8006682:	f04f 0300 	mov.w	r3, #0
 8006686:	4620      	mov	r0, r4
 8006688:	4629      	mov	r1, r5
 800668a:	f7f9 fe25 	bl	80002d8 <__aeabi_uldivmod>
 800668e:	4602      	mov	r2, r0
 8006690:	460b      	mov	r3, r1
 8006692:	4613      	mov	r3, r2
 8006694:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006696:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006698:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800669c:	d308      	bcc.n	80066b0 <UART_SetConfig+0x784>
 800669e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066a0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80066a4:	d204      	bcs.n	80066b0 <UART_SetConfig+0x784>
        {
          huart->Instance->BRR = usartdiv;
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80066ac:	60da      	str	r2, [r3, #12]
 80066ae:	e180      	b.n	80069b2 <UART_SetConfig+0xa86>
        }
        else
        {
          ret = HAL_ERROR;
 80066b0:	2301      	movs	r3, #1
 80066b2:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 80066b6:	e17c      	b.n	80069b2 <UART_SetConfig+0xa86>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	69db      	ldr	r3, [r3, #28]
 80066bc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80066c0:	f040 80bf 	bne.w	8006842 <UART_SetConfig+0x916>
  {
    switch (clocksource)
 80066c4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80066c8:	2b20      	cmp	r3, #32
 80066ca:	dc49      	bgt.n	8006760 <UART_SetConfig+0x834>
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	db7c      	blt.n	80067ca <UART_SetConfig+0x89e>
 80066d0:	2b20      	cmp	r3, #32
 80066d2:	d87a      	bhi.n	80067ca <UART_SetConfig+0x89e>
 80066d4:	a201      	add	r2, pc, #4	; (adr r2, 80066dc <UART_SetConfig+0x7b0>)
 80066d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066da:	bf00      	nop
 80066dc:	08006767 	.word	0x08006767
 80066e0:	0800676f 	.word	0x0800676f
 80066e4:	080067cb 	.word	0x080067cb
 80066e8:	080067cb 	.word	0x080067cb
 80066ec:	08006777 	.word	0x08006777
 80066f0:	080067cb 	.word	0x080067cb
 80066f4:	080067cb 	.word	0x080067cb
 80066f8:	080067cb 	.word	0x080067cb
 80066fc:	08006787 	.word	0x08006787
 8006700:	080067cb 	.word	0x080067cb
 8006704:	080067cb 	.word	0x080067cb
 8006708:	080067cb 	.word	0x080067cb
 800670c:	080067cb 	.word	0x080067cb
 8006710:	080067cb 	.word	0x080067cb
 8006714:	080067cb 	.word	0x080067cb
 8006718:	080067cb 	.word	0x080067cb
 800671c:	08006797 	.word	0x08006797
 8006720:	080067cb 	.word	0x080067cb
 8006724:	080067cb 	.word	0x080067cb
 8006728:	080067cb 	.word	0x080067cb
 800672c:	080067cb 	.word	0x080067cb
 8006730:	080067cb 	.word	0x080067cb
 8006734:	080067cb 	.word	0x080067cb
 8006738:	080067cb 	.word	0x080067cb
 800673c:	080067cb 	.word	0x080067cb
 8006740:	080067cb 	.word	0x080067cb
 8006744:	080067cb 	.word	0x080067cb
 8006748:	080067cb 	.word	0x080067cb
 800674c:	080067cb 	.word	0x080067cb
 8006750:	080067cb 	.word	0x080067cb
 8006754:	080067cb 	.word	0x080067cb
 8006758:	080067cb 	.word	0x080067cb
 800675c:	080067bd 	.word	0x080067bd
 8006760:	2b40      	cmp	r3, #64	; 0x40
 8006762:	d02e      	beq.n	80067c2 <UART_SetConfig+0x896>
 8006764:	e031      	b.n	80067ca <UART_SetConfig+0x89e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006766:	f7fc f999 	bl	8002a9c <HAL_RCC_GetPCLK1Freq>
 800676a:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800676c:	e033      	b.n	80067d6 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800676e:	f7fc f9ab 	bl	8002ac8 <HAL_RCC_GetPCLK2Freq>
 8006772:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8006774:	e02f      	b.n	80067d6 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006776:	f107 0314 	add.w	r3, r7, #20
 800677a:	4618      	mov	r0, r3
 800677c:	f7fd fde2 	bl	8004344 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006780:	69bb      	ldr	r3, [r7, #24]
 8006782:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006784:	e027      	b.n	80067d6 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006786:	f107 0308 	add.w	r3, r7, #8
 800678a:	4618      	mov	r0, r3
 800678c:	f7fd ff2e 	bl	80045ec <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006794:	e01f      	b.n	80067d6 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006796:	4b58      	ldr	r3, [pc, #352]	; (80068f8 <UART_SetConfig+0x9cc>)
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	f003 0320 	and.w	r3, r3, #32
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d009      	beq.n	80067b6 <UART_SetConfig+0x88a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80067a2:	4b55      	ldr	r3, [pc, #340]	; (80068f8 <UART_SetConfig+0x9cc>)
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	08db      	lsrs	r3, r3, #3
 80067a8:	f003 0303 	and.w	r3, r3, #3
 80067ac:	4a53      	ldr	r2, [pc, #332]	; (80068fc <UART_SetConfig+0x9d0>)
 80067ae:	fa22 f303 	lsr.w	r3, r2, r3
 80067b2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80067b4:	e00f      	b.n	80067d6 <UART_SetConfig+0x8aa>
          pclk = (uint32_t) HSI_VALUE;
 80067b6:	4b51      	ldr	r3, [pc, #324]	; (80068fc <UART_SetConfig+0x9d0>)
 80067b8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80067ba:	e00c      	b.n	80067d6 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80067bc:	4b4c      	ldr	r3, [pc, #304]	; (80068f0 <UART_SetConfig+0x9c4>)
 80067be:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80067c0:	e009      	b.n	80067d6 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80067c2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80067c6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80067c8:	e005      	b.n	80067d6 <UART_SetConfig+0x8aa>
      default:
        pclk = 0U;
 80067ca:	2300      	movs	r3, #0
 80067cc:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80067ce:	2301      	movs	r3, #1
 80067d0:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 80067d4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80067d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067d8:	2b00      	cmp	r3, #0
 80067da:	f000 80ea 	beq.w	80069b2 <UART_SetConfig+0xa86>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067e2:	4a44      	ldr	r2, [pc, #272]	; (80068f4 <UART_SetConfig+0x9c8>)
 80067e4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80067e8:	461a      	mov	r2, r3
 80067ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067ec:	fbb3 f3f2 	udiv	r3, r3, r2
 80067f0:	005a      	lsls	r2, r3, #1
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	685b      	ldr	r3, [r3, #4]
 80067f6:	085b      	lsrs	r3, r3, #1
 80067f8:	441a      	add	r2, r3
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	685b      	ldr	r3, [r3, #4]
 80067fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8006802:	b29b      	uxth	r3, r3
 8006804:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006806:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006808:	2b0f      	cmp	r3, #15
 800680a:	d916      	bls.n	800683a <UART_SetConfig+0x90e>
 800680c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800680e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006812:	d212      	bcs.n	800683a <UART_SetConfig+0x90e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006814:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006816:	b29b      	uxth	r3, r3
 8006818:	f023 030f 	bic.w	r3, r3, #15
 800681c:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800681e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006820:	085b      	lsrs	r3, r3, #1
 8006822:	b29b      	uxth	r3, r3
 8006824:	f003 0307 	and.w	r3, r3, #7
 8006828:	b29a      	uxth	r2, r3
 800682a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800682c:	4313      	orrs	r3, r2
 800682e:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8006836:	60da      	str	r2, [r3, #12]
 8006838:	e0bb      	b.n	80069b2 <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 800683a:	2301      	movs	r3, #1
 800683c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8006840:	e0b7      	b.n	80069b2 <UART_SetConfig+0xa86>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006842:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8006846:	2b20      	cmp	r3, #32
 8006848:	dc4a      	bgt.n	80068e0 <UART_SetConfig+0x9b4>
 800684a:	2b00      	cmp	r3, #0
 800684c:	f2c0 8086 	blt.w	800695c <UART_SetConfig+0xa30>
 8006850:	2b20      	cmp	r3, #32
 8006852:	f200 8083 	bhi.w	800695c <UART_SetConfig+0xa30>
 8006856:	a201      	add	r2, pc, #4	; (adr r2, 800685c <UART_SetConfig+0x930>)
 8006858:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800685c:	080068e7 	.word	0x080068e7
 8006860:	08006901 	.word	0x08006901
 8006864:	0800695d 	.word	0x0800695d
 8006868:	0800695d 	.word	0x0800695d
 800686c:	08006909 	.word	0x08006909
 8006870:	0800695d 	.word	0x0800695d
 8006874:	0800695d 	.word	0x0800695d
 8006878:	0800695d 	.word	0x0800695d
 800687c:	08006919 	.word	0x08006919
 8006880:	0800695d 	.word	0x0800695d
 8006884:	0800695d 	.word	0x0800695d
 8006888:	0800695d 	.word	0x0800695d
 800688c:	0800695d 	.word	0x0800695d
 8006890:	0800695d 	.word	0x0800695d
 8006894:	0800695d 	.word	0x0800695d
 8006898:	0800695d 	.word	0x0800695d
 800689c:	08006929 	.word	0x08006929
 80068a0:	0800695d 	.word	0x0800695d
 80068a4:	0800695d 	.word	0x0800695d
 80068a8:	0800695d 	.word	0x0800695d
 80068ac:	0800695d 	.word	0x0800695d
 80068b0:	0800695d 	.word	0x0800695d
 80068b4:	0800695d 	.word	0x0800695d
 80068b8:	0800695d 	.word	0x0800695d
 80068bc:	0800695d 	.word	0x0800695d
 80068c0:	0800695d 	.word	0x0800695d
 80068c4:	0800695d 	.word	0x0800695d
 80068c8:	0800695d 	.word	0x0800695d
 80068cc:	0800695d 	.word	0x0800695d
 80068d0:	0800695d 	.word	0x0800695d
 80068d4:	0800695d 	.word	0x0800695d
 80068d8:	0800695d 	.word	0x0800695d
 80068dc:	0800694f 	.word	0x0800694f
 80068e0:	2b40      	cmp	r3, #64	; 0x40
 80068e2:	d037      	beq.n	8006954 <UART_SetConfig+0xa28>
 80068e4:	e03a      	b.n	800695c <UART_SetConfig+0xa30>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80068e6:	f7fc f8d9 	bl	8002a9c <HAL_RCC_GetPCLK1Freq>
 80068ea:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 80068ec:	e03c      	b.n	8006968 <UART_SetConfig+0xa3c>
 80068ee:	bf00      	nop
 80068f0:	003d0900 	.word	0x003d0900
 80068f4:	08007ea4 	.word	0x08007ea4
 80068f8:	58024400 	.word	0x58024400
 80068fc:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006900:	f7fc f8e2 	bl	8002ac8 <HAL_RCC_GetPCLK2Freq>
 8006904:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8006906:	e02f      	b.n	8006968 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006908:	f107 0314 	add.w	r3, r7, #20
 800690c:	4618      	mov	r0, r3
 800690e:	f7fd fd19 	bl	8004344 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006912:	69bb      	ldr	r3, [r7, #24]
 8006914:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006916:	e027      	b.n	8006968 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006918:	f107 0308 	add.w	r3, r7, #8
 800691c:	4618      	mov	r0, r3
 800691e:	f7fd fe65 	bl	80045ec <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006926:	e01f      	b.n	8006968 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006928:	4b2c      	ldr	r3, [pc, #176]	; (80069dc <UART_SetConfig+0xab0>)
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	f003 0320 	and.w	r3, r3, #32
 8006930:	2b00      	cmp	r3, #0
 8006932:	d009      	beq.n	8006948 <UART_SetConfig+0xa1c>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006934:	4b29      	ldr	r3, [pc, #164]	; (80069dc <UART_SetConfig+0xab0>)
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	08db      	lsrs	r3, r3, #3
 800693a:	f003 0303 	and.w	r3, r3, #3
 800693e:	4a28      	ldr	r2, [pc, #160]	; (80069e0 <UART_SetConfig+0xab4>)
 8006940:	fa22 f303 	lsr.w	r3, r2, r3
 8006944:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006946:	e00f      	b.n	8006968 <UART_SetConfig+0xa3c>
          pclk = (uint32_t) HSI_VALUE;
 8006948:	4b25      	ldr	r3, [pc, #148]	; (80069e0 <UART_SetConfig+0xab4>)
 800694a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800694c:	e00c      	b.n	8006968 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800694e:	4b25      	ldr	r3, [pc, #148]	; (80069e4 <UART_SetConfig+0xab8>)
 8006950:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006952:	e009      	b.n	8006968 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006954:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006958:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800695a:	e005      	b.n	8006968 <UART_SetConfig+0xa3c>
      default:
        pclk = 0U;
 800695c:	2300      	movs	r3, #0
 800695e:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8006960:	2301      	movs	r3, #1
 8006962:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8006966:	bf00      	nop
    }

    if (pclk != 0U)
 8006968:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800696a:	2b00      	cmp	r3, #0
 800696c:	d021      	beq.n	80069b2 <UART_SetConfig+0xa86>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006972:	4a1d      	ldr	r2, [pc, #116]	; (80069e8 <UART_SetConfig+0xabc>)
 8006974:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006978:	461a      	mov	r2, r3
 800697a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800697c:	fbb3 f2f2 	udiv	r2, r3, r2
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	685b      	ldr	r3, [r3, #4]
 8006984:	085b      	lsrs	r3, r3, #1
 8006986:	441a      	add	r2, r3
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	685b      	ldr	r3, [r3, #4]
 800698c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006990:	b29b      	uxth	r3, r3
 8006992:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006994:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006996:	2b0f      	cmp	r3, #15
 8006998:	d908      	bls.n	80069ac <UART_SetConfig+0xa80>
 800699a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800699c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80069a0:	d204      	bcs.n	80069ac <UART_SetConfig+0xa80>
      {
        huart->Instance->BRR = usartdiv;
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80069a8:	60da      	str	r2, [r3, #12]
 80069aa:	e002      	b.n	80069b2 <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 80069ac:	2301      	movs	r3, #1
 80069ae:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	2201      	movs	r2, #1
 80069b6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	2201      	movs	r2, #1
 80069be:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	2200      	movs	r2, #0
 80069c6:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	2200      	movs	r2, #0
 80069cc:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 80069ce:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 80069d2:	4618      	mov	r0, r3
 80069d4:	3738      	adds	r7, #56	; 0x38
 80069d6:	46bd      	mov	sp, r7
 80069d8:	bdb0      	pop	{r4, r5, r7, pc}
 80069da:	bf00      	nop
 80069dc:	58024400 	.word	0x58024400
 80069e0:	03d09000 	.word	0x03d09000
 80069e4:	003d0900 	.word	0x003d0900
 80069e8:	08007ea4 	.word	0x08007ea4

080069ec <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80069ec:	b480      	push	{r7}
 80069ee:	b083      	sub	sp, #12
 80069f0:	af00      	add	r7, sp, #0
 80069f2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069f8:	f003 0301 	and.w	r3, r3, #1
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d00a      	beq.n	8006a16 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	685b      	ldr	r3, [r3, #4]
 8006a06:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	430a      	orrs	r2, r1
 8006a14:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a1a:	f003 0302 	and.w	r3, r3, #2
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d00a      	beq.n	8006a38 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	685b      	ldr	r3, [r3, #4]
 8006a28:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	430a      	orrs	r2, r1
 8006a36:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a3c:	f003 0304 	and.w	r3, r3, #4
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d00a      	beq.n	8006a5a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	685b      	ldr	r3, [r3, #4]
 8006a4a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	430a      	orrs	r2, r1
 8006a58:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a5e:	f003 0308 	and.w	r3, r3, #8
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d00a      	beq.n	8006a7c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	685b      	ldr	r3, [r3, #4]
 8006a6c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	430a      	orrs	r2, r1
 8006a7a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a80:	f003 0310 	and.w	r3, r3, #16
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d00a      	beq.n	8006a9e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	689b      	ldr	r3, [r3, #8]
 8006a8e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	430a      	orrs	r2, r1
 8006a9c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006aa2:	f003 0320 	and.w	r3, r3, #32
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d00a      	beq.n	8006ac0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	689b      	ldr	r3, [r3, #8]
 8006ab0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	430a      	orrs	r2, r1
 8006abe:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ac4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d01a      	beq.n	8006b02 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	685b      	ldr	r3, [r3, #4]
 8006ad2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	430a      	orrs	r2, r1
 8006ae0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ae6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006aea:	d10a      	bne.n	8006b02 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	685b      	ldr	r3, [r3, #4]
 8006af2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	430a      	orrs	r2, r1
 8006b00:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d00a      	beq.n	8006b24 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	685b      	ldr	r3, [r3, #4]
 8006b14:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	430a      	orrs	r2, r1
 8006b22:	605a      	str	r2, [r3, #4]
  }
}
 8006b24:	bf00      	nop
 8006b26:	370c      	adds	r7, #12
 8006b28:	46bd      	mov	sp, r7
 8006b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b2e:	4770      	bx	lr

08006b30 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006b30:	b580      	push	{r7, lr}
 8006b32:	b086      	sub	sp, #24
 8006b34:	af02      	add	r7, sp, #8
 8006b36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	2200      	movs	r2, #0
 8006b3c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006b40:	f7fa fb20 	bl	8001184 <HAL_GetTick>
 8006b44:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	f003 0308 	and.w	r3, r3, #8
 8006b50:	2b08      	cmp	r3, #8
 8006b52:	d10e      	bne.n	8006b72 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006b54:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006b58:	9300      	str	r3, [sp, #0]
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	2200      	movs	r2, #0
 8006b5e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006b62:	6878      	ldr	r0, [r7, #4]
 8006b64:	f000 f82f 	bl	8006bc6 <UART_WaitOnFlagUntilTimeout>
 8006b68:	4603      	mov	r3, r0
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d001      	beq.n	8006b72 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006b6e:	2303      	movs	r3, #3
 8006b70:	e025      	b.n	8006bbe <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	f003 0304 	and.w	r3, r3, #4
 8006b7c:	2b04      	cmp	r3, #4
 8006b7e:	d10e      	bne.n	8006b9e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006b80:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006b84:	9300      	str	r3, [sp, #0]
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	2200      	movs	r2, #0
 8006b8a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006b8e:	6878      	ldr	r0, [r7, #4]
 8006b90:	f000 f819 	bl	8006bc6 <UART_WaitOnFlagUntilTimeout>
 8006b94:	4603      	mov	r3, r0
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d001      	beq.n	8006b9e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006b9a:	2303      	movs	r3, #3
 8006b9c:	e00f      	b.n	8006bbe <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	2220      	movs	r2, #32
 8006ba2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	2220      	movs	r2, #32
 8006baa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	2200      	movs	r2, #0
 8006bb2:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	2200      	movs	r2, #0
 8006bb8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006bbc:	2300      	movs	r3, #0
}
 8006bbe:	4618      	mov	r0, r3
 8006bc0:	3710      	adds	r7, #16
 8006bc2:	46bd      	mov	sp, r7
 8006bc4:	bd80      	pop	{r7, pc}

08006bc6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006bc6:	b580      	push	{r7, lr}
 8006bc8:	b084      	sub	sp, #16
 8006bca:	af00      	add	r7, sp, #0
 8006bcc:	60f8      	str	r0, [r7, #12]
 8006bce:	60b9      	str	r1, [r7, #8]
 8006bd0:	603b      	str	r3, [r7, #0]
 8006bd2:	4613      	mov	r3, r2
 8006bd4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006bd6:	e062      	b.n	8006c9e <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006bd8:	69bb      	ldr	r3, [r7, #24]
 8006bda:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006bde:	d05e      	beq.n	8006c9e <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006be0:	f7fa fad0 	bl	8001184 <HAL_GetTick>
 8006be4:	4602      	mov	r2, r0
 8006be6:	683b      	ldr	r3, [r7, #0]
 8006be8:	1ad3      	subs	r3, r2, r3
 8006bea:	69ba      	ldr	r2, [r7, #24]
 8006bec:	429a      	cmp	r2, r3
 8006bee:	d302      	bcc.n	8006bf6 <UART_WaitOnFlagUntilTimeout+0x30>
 8006bf0:	69bb      	ldr	r3, [r7, #24]
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d11d      	bne.n	8006c32 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	681a      	ldr	r2, [r3, #0]
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006c04:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	689a      	ldr	r2, [r3, #8]
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	f022 0201 	bic.w	r2, r2, #1
 8006c14:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	2220      	movs	r2, #32
 8006c1a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	2220      	movs	r2, #32
 8006c22:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	2200      	movs	r2, #0
 8006c2a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8006c2e:	2303      	movs	r3, #3
 8006c30:	e045      	b.n	8006cbe <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	f003 0304 	and.w	r3, r3, #4
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d02e      	beq.n	8006c9e <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	69db      	ldr	r3, [r3, #28]
 8006c46:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006c4a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006c4e:	d126      	bne.n	8006c9e <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006c58:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	681a      	ldr	r2, [r3, #0]
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006c68:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	689a      	ldr	r2, [r3, #8]
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	f022 0201 	bic.w	r2, r2, #1
 8006c78:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	2220      	movs	r2, #32
 8006c7e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	2220      	movs	r2, #32
 8006c86:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	2220      	movs	r2, #32
 8006c8e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	2200      	movs	r2, #0
 8006c96:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8006c9a:	2303      	movs	r3, #3
 8006c9c:	e00f      	b.n	8006cbe <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	69da      	ldr	r2, [r3, #28]
 8006ca4:	68bb      	ldr	r3, [r7, #8]
 8006ca6:	4013      	ands	r3, r2
 8006ca8:	68ba      	ldr	r2, [r7, #8]
 8006caa:	429a      	cmp	r2, r3
 8006cac:	bf0c      	ite	eq
 8006cae:	2301      	moveq	r3, #1
 8006cb0:	2300      	movne	r3, #0
 8006cb2:	b2db      	uxtb	r3, r3
 8006cb4:	461a      	mov	r2, r3
 8006cb6:	79fb      	ldrb	r3, [r7, #7]
 8006cb8:	429a      	cmp	r2, r3
 8006cba:	d08d      	beq.n	8006bd8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006cbc:	2300      	movs	r3, #0
}
 8006cbe:	4618      	mov	r0, r3
 8006cc0:	3710      	adds	r7, #16
 8006cc2:	46bd      	mov	sp, r7
 8006cc4:	bd80      	pop	{r7, pc}

08006cc6 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006cc6:	b480      	push	{r7}
 8006cc8:	b085      	sub	sp, #20
 8006cca:	af00      	add	r7, sp, #0
 8006ccc:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006cd4:	2b01      	cmp	r3, #1
 8006cd6:	d101      	bne.n	8006cdc <HAL_UARTEx_DisableFifoMode+0x16>
 8006cd8:	2302      	movs	r3, #2
 8006cda:	e027      	b.n	8006d2c <HAL_UARTEx_DisableFifoMode+0x66>
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	2201      	movs	r2, #1
 8006ce0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	2224      	movs	r2, #36	; 0x24
 8006ce8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	681a      	ldr	r2, [r3, #0]
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	f022 0201 	bic.w	r2, r2, #1
 8006d02:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8006d0a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	2200      	movs	r2, #0
 8006d10:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	68fa      	ldr	r2, [r7, #12]
 8006d18:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	2220      	movs	r2, #32
 8006d1e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	2200      	movs	r2, #0
 8006d26:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006d2a:	2300      	movs	r3, #0
}
 8006d2c:	4618      	mov	r0, r3
 8006d2e:	3714      	adds	r7, #20
 8006d30:	46bd      	mov	sp, r7
 8006d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d36:	4770      	bx	lr

08006d38 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006d38:	b580      	push	{r7, lr}
 8006d3a:	b084      	sub	sp, #16
 8006d3c:	af00      	add	r7, sp, #0
 8006d3e:	6078      	str	r0, [r7, #4]
 8006d40:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006d48:	2b01      	cmp	r3, #1
 8006d4a:	d101      	bne.n	8006d50 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006d4c:	2302      	movs	r3, #2
 8006d4e:	e02d      	b.n	8006dac <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	2201      	movs	r2, #1
 8006d54:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	2224      	movs	r2, #36	; 0x24
 8006d5c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	681a      	ldr	r2, [r3, #0]
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	f022 0201 	bic.w	r2, r2, #1
 8006d76:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	689b      	ldr	r3, [r3, #8]
 8006d7e:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	683a      	ldr	r2, [r7, #0]
 8006d88:	430a      	orrs	r2, r1
 8006d8a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006d8c:	6878      	ldr	r0, [r7, #4]
 8006d8e:	f000 f84f 	bl	8006e30 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	68fa      	ldr	r2, [r7, #12]
 8006d98:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	2220      	movs	r2, #32
 8006d9e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	2200      	movs	r2, #0
 8006da6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006daa:	2300      	movs	r3, #0
}
 8006dac:	4618      	mov	r0, r3
 8006dae:	3710      	adds	r7, #16
 8006db0:	46bd      	mov	sp, r7
 8006db2:	bd80      	pop	{r7, pc}

08006db4 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006db4:	b580      	push	{r7, lr}
 8006db6:	b084      	sub	sp, #16
 8006db8:	af00      	add	r7, sp, #0
 8006dba:	6078      	str	r0, [r7, #4]
 8006dbc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006dc4:	2b01      	cmp	r3, #1
 8006dc6:	d101      	bne.n	8006dcc <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006dc8:	2302      	movs	r3, #2
 8006dca:	e02d      	b.n	8006e28 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	2201      	movs	r2, #1
 8006dd0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	2224      	movs	r2, #36	; 0x24
 8006dd8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	681a      	ldr	r2, [r3, #0]
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	f022 0201 	bic.w	r2, r2, #1
 8006df2:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	689b      	ldr	r3, [r3, #8]
 8006dfa:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	683a      	ldr	r2, [r7, #0]
 8006e04:	430a      	orrs	r2, r1
 8006e06:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006e08:	6878      	ldr	r0, [r7, #4]
 8006e0a:	f000 f811 	bl	8006e30 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	68fa      	ldr	r2, [r7, #12]
 8006e14:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	2220      	movs	r2, #32
 8006e1a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	2200      	movs	r2, #0
 8006e22:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006e26:	2300      	movs	r3, #0
}
 8006e28:	4618      	mov	r0, r3
 8006e2a:	3710      	adds	r7, #16
 8006e2c:	46bd      	mov	sp, r7
 8006e2e:	bd80      	pop	{r7, pc}

08006e30 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006e30:	b480      	push	{r7}
 8006e32:	b085      	sub	sp, #20
 8006e34:	af00      	add	r7, sp, #0
 8006e36:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	d108      	bne.n	8006e52 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	2201      	movs	r2, #1
 8006e44:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	2201      	movs	r2, #1
 8006e4c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006e50:	e031      	b.n	8006eb6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8006e52:	2310      	movs	r3, #16
 8006e54:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006e56:	2310      	movs	r3, #16
 8006e58:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	689b      	ldr	r3, [r3, #8]
 8006e60:	0e5b      	lsrs	r3, r3, #25
 8006e62:	b2db      	uxtb	r3, r3
 8006e64:	f003 0307 	and.w	r3, r3, #7
 8006e68:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	689b      	ldr	r3, [r3, #8]
 8006e70:	0f5b      	lsrs	r3, r3, #29
 8006e72:	b2db      	uxtb	r3, r3
 8006e74:	f003 0307 	and.w	r3, r3, #7
 8006e78:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006e7a:	7bbb      	ldrb	r3, [r7, #14]
 8006e7c:	7b3a      	ldrb	r2, [r7, #12]
 8006e7e:	4911      	ldr	r1, [pc, #68]	; (8006ec4 <UARTEx_SetNbDataToProcess+0x94>)
 8006e80:	5c8a      	ldrb	r2, [r1, r2]
 8006e82:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8006e86:	7b3a      	ldrb	r2, [r7, #12]
 8006e88:	490f      	ldr	r1, [pc, #60]	; (8006ec8 <UARTEx_SetNbDataToProcess+0x98>)
 8006e8a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006e8c:	fb93 f3f2 	sdiv	r3, r3, r2
 8006e90:	b29a      	uxth	r2, r3
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006e98:	7bfb      	ldrb	r3, [r7, #15]
 8006e9a:	7b7a      	ldrb	r2, [r7, #13]
 8006e9c:	4909      	ldr	r1, [pc, #36]	; (8006ec4 <UARTEx_SetNbDataToProcess+0x94>)
 8006e9e:	5c8a      	ldrb	r2, [r1, r2]
 8006ea0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006ea4:	7b7a      	ldrb	r2, [r7, #13]
 8006ea6:	4908      	ldr	r1, [pc, #32]	; (8006ec8 <UARTEx_SetNbDataToProcess+0x98>)
 8006ea8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006eaa:	fb93 f3f2 	sdiv	r3, r3, r2
 8006eae:	b29a      	uxth	r2, r3
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8006eb6:	bf00      	nop
 8006eb8:	3714      	adds	r7, #20
 8006eba:	46bd      	mov	sp, r7
 8006ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ec0:	4770      	bx	lr
 8006ec2:	bf00      	nop
 8006ec4:	08007ebc 	.word	0x08007ebc
 8006ec8:	08007ec4 	.word	0x08007ec4

08006ecc <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 8006ecc:	b084      	sub	sp, #16
 8006ece:	b480      	push	{r7}
 8006ed0:	b085      	sub	sp, #20
 8006ed2:	af00      	add	r7, sp, #0
 8006ed4:	6078      	str	r0, [r7, #4]
 8006ed6:	f107 001c 	add.w	r0, r7, #28
 8006eda:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8006ede:	2300      	movs	r3, #0
 8006ee0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           | \
 8006ee2:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      | \
 8006ee4:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           | \
 8006ee6:	431a      	orrs	r2, r3
             Init.BusWide             | \
 8006ee8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockPowerSave      | \
 8006eea:	431a      	orrs	r2, r3
             Init.HardwareFlowControl | \
 8006eec:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.BusWide             | \
 8006eee:	431a      	orrs	r2, r3
             Init.ClockDiv
 8006ef0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.HardwareFlowControl | \
 8006ef2:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           | \
 8006ef4:	68fa      	ldr	r2, [r7, #12]
 8006ef6:	4313      	orrs	r3, r2
 8006ef8:	60fb      	str	r3, [r7, #12]
            );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	685a      	ldr	r2, [r3, #4]
 8006efe:	4b07      	ldr	r3, [pc, #28]	; (8006f1c <SDMMC_Init+0x50>)
 8006f00:	4013      	ands	r3, r2
 8006f02:	68fa      	ldr	r2, [r7, #12]
 8006f04:	431a      	orrs	r2, r3
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8006f0a:	2300      	movs	r3, #0
}
 8006f0c:	4618      	mov	r0, r3
 8006f0e:	3714      	adds	r7, #20
 8006f10:	46bd      	mov	sp, r7
 8006f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f16:	b004      	add	sp, #16
 8006f18:	4770      	bx	lr
 8006f1a:	bf00      	nop
 8006f1c:	ffc02c00 	.word	0xffc02c00

08006f20 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 8006f20:	b480      	push	{r7}
 8006f22:	b083      	sub	sp, #12
 8006f24:	af00      	add	r7, sp, #0
 8006f26:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8006f2e:	4618      	mov	r0, r3
 8006f30:	370c      	adds	r7, #12
 8006f32:	46bd      	mov	sp, r7
 8006f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f38:	4770      	bx	lr

08006f3a <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 8006f3a:	b480      	push	{r7}
 8006f3c:	b083      	sub	sp, #12
 8006f3e:	af00      	add	r7, sp, #0
 8006f40:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	f043 0203 	orr.w	r2, r3, #3
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8006f4e:	2300      	movs	r3, #0
}
 8006f50:	4618      	mov	r0, r3
 8006f52:	370c      	adds	r7, #12
 8006f54:	46bd      	mov	sp, r7
 8006f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f5a:	4770      	bx	lr

08006f5c <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 8006f5c:	b480      	push	{r7}
 8006f5e:	b083      	sub	sp, #12
 8006f60:	af00      	add	r7, sp, #0
 8006f62:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	f003 0303 	and.w	r3, r3, #3
}
 8006f6c:	4618      	mov	r0, r3
 8006f6e:	370c      	adds	r7, #12
 8006f70:	46bd      	mov	sp, r7
 8006f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f76:	4770      	bx	lr

08006f78 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 8006f78:	b480      	push	{r7}
 8006f7a:	b085      	sub	sp, #20
 8006f7c:	af00      	add	r7, sp, #0
 8006f7e:	6078      	str	r0, [r7, #4]
 8006f80:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8006f82:	2300      	movs	r3, #0
 8006f84:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 8006f86:	683b      	ldr	r3, [r7, #0]
 8006f88:	681a      	ldr	r2, [r3, #0]
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 8006f8e:	683b      	ldr	r3, [r7, #0]
 8006f90:	685a      	ldr	r2, [r3, #4]
                       Command->Response         | \
 8006f92:	683b      	ldr	r3, [r7, #0]
 8006f94:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 8006f96:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt | \
 8006f98:	683b      	ldr	r3, [r7, #0]
 8006f9a:	68db      	ldr	r3, [r3, #12]
                       Command->Response         | \
 8006f9c:	431a      	orrs	r2, r3
                       Command->CPSM);
 8006f9e:	683b      	ldr	r3, [r7, #0]
 8006fa0:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt | \
 8006fa2:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 8006fa4:	68fa      	ldr	r2, [r7, #12]
 8006fa6:	4313      	orrs	r3, r2
 8006fa8:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	68da      	ldr	r2, [r3, #12]
 8006fae:	4b06      	ldr	r3, [pc, #24]	; (8006fc8 <SDMMC_SendCommand+0x50>)
 8006fb0:	4013      	ands	r3, r2
 8006fb2:	68fa      	ldr	r2, [r7, #12]
 8006fb4:	431a      	orrs	r2, r3
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006fba:	2300      	movs	r3, #0
}
 8006fbc:	4618      	mov	r0, r3
 8006fbe:	3714      	adds	r7, #20
 8006fc0:	46bd      	mov	sp, r7
 8006fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fc6:	4770      	bx	lr
 8006fc8:	fffee0c0 	.word	0xfffee0c0

08006fcc <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 8006fcc:	b480      	push	{r7}
 8006fce:	b083      	sub	sp, #12
 8006fd0:	af00      	add	r7, sp, #0
 8006fd2:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	691b      	ldr	r3, [r3, #16]
 8006fd8:	b2db      	uxtb	r3, r3
}
 8006fda:	4618      	mov	r0, r3
 8006fdc:	370c      	adds	r7, #12
 8006fde:	46bd      	mov	sp, r7
 8006fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fe4:	4770      	bx	lr

08006fe6 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 8006fe6:	b480      	push	{r7}
 8006fe8:	b085      	sub	sp, #20
 8006fea:	af00      	add	r7, sp, #0
 8006fec:	6078      	str	r0, [r7, #4]
 8006fee:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	3314      	adds	r3, #20
 8006ff4:	461a      	mov	r2, r3
 8006ff6:	683b      	ldr	r3, [r7, #0]
 8006ff8:	4413      	add	r3, r2
 8006ffa:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	681b      	ldr	r3, [r3, #0]
}
 8007000:	4618      	mov	r0, r3
 8007002:	3714      	adds	r7, #20
 8007004:	46bd      	mov	sp, r7
 8007006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800700a:	4770      	bx	lr

0800700c <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef *Data)
{
 800700c:	b480      	push	{r7}
 800700e:	b085      	sub	sp, #20
 8007010:	af00      	add	r7, sp, #0
 8007012:	6078      	str	r0, [r7, #4]
 8007014:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8007016:	2300      	movs	r3, #0
 8007018:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800701a:	683b      	ldr	r3, [r7, #0]
 800701c:	681a      	ldr	r2, [r3, #0]
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 8007022:	683b      	ldr	r3, [r7, #0]
 8007024:	685a      	ldr	r2, [r3, #4]
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800702a:	683b      	ldr	r3, [r7, #0]
 800702c:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   | \
 800702e:	683b      	ldr	r3, [r7, #0]
 8007030:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 8007032:	431a      	orrs	r2, r3
                       Data->TransferMode  | \
 8007034:	683b      	ldr	r3, [r7, #0]
 8007036:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   | \
 8007038:	431a      	orrs	r2, r3
                       Data->DPSM);
 800703a:	683b      	ldr	r3, [r7, #0]
 800703c:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  | \
 800703e:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 8007040:	68fa      	ldr	r2, [r7, #12]
 8007042:	4313      	orrs	r3, r2
 8007044:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800704a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	431a      	orrs	r2, r3
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8007056:	2300      	movs	r3, #0

}
 8007058:	4618      	mov	r0, r3
 800705a:	3714      	adds	r7, #20
 800705c:	46bd      	mov	sp, r7
 800705e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007062:	4770      	bx	lr

08007064 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 8007064:	b580      	push	{r7, lr}
 8007066:	b088      	sub	sp, #32
 8007068:	af00      	add	r7, sp, #0
 800706a:	6078      	str	r0, [r7, #4]
 800706c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800706e:	683b      	ldr	r3, [r7, #0]
 8007070:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8007072:	2310      	movs	r3, #16
 8007074:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007076:	f44f 7380 	mov.w	r3, #256	; 0x100
 800707a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800707c:	2300      	movs	r3, #0
 800707e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007080:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007084:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007086:	f107 0308 	add.w	r3, r7, #8
 800708a:	4619      	mov	r1, r3
 800708c:	6878      	ldr	r0, [r7, #4]
 800708e:	f7ff ff73 	bl	8006f78 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 8007092:	f241 3288 	movw	r2, #5000	; 0x1388
 8007096:	2110      	movs	r1, #16
 8007098:	6878      	ldr	r0, [r7, #4]
 800709a:	f000 f995 	bl	80073c8 <SDMMC_GetCmdResp1>
 800709e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80070a0:	69fb      	ldr	r3, [r7, #28]
}
 80070a2:	4618      	mov	r0, r3
 80070a4:	3720      	adds	r7, #32
 80070a6:	46bd      	mov	sp, r7
 80070a8:	bd80      	pop	{r7, pc}

080070aa <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  addr: Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint32_t Addr)
{
 80070aa:	b580      	push	{r7, lr}
 80070ac:	b088      	sub	sp, #32
 80070ae:	af00      	add	r7, sp, #0
 80070b0:	6078      	str	r0, [r7, #4]
 80070b2:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 80070b4:	683b      	ldr	r3, [r7, #0]
 80070b6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 80070b8:	2307      	movs	r3, #7
 80070ba:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80070bc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80070c0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80070c2:	2300      	movs	r3, #0
 80070c4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80070c6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80070ca:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80070cc:	f107 0308 	add.w	r3, r7, #8
 80070d0:	4619      	mov	r1, r3
 80070d2:	6878      	ldr	r0, [r7, #4]
 80070d4:	f7ff ff50 	bl	8006f78 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 80070d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80070dc:	2107      	movs	r1, #7
 80070de:	6878      	ldr	r0, [r7, #4]
 80070e0:	f000 f972 	bl	80073c8 <SDMMC_GetCmdResp1>
 80070e4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80070e6:	69fb      	ldr	r3, [r7, #28]
}
 80070e8:	4618      	mov	r0, r3
 80070ea:	3720      	adds	r7, #32
 80070ec:	46bd      	mov	sp, r7
 80070ee:	bd80      	pop	{r7, pc}

080070f0 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 80070f0:	b580      	push	{r7, lr}
 80070f2:	b088      	sub	sp, #32
 80070f4:	af00      	add	r7, sp, #0
 80070f6:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 80070f8:	2300      	movs	r3, #0
 80070fa:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 80070fc:	2300      	movs	r3, #0
 80070fe:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 8007100:	2300      	movs	r3, #0
 8007102:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007104:	2300      	movs	r3, #0
 8007106:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007108:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800710c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800710e:	f107 0308 	add.w	r3, r7, #8
 8007112:	4619      	mov	r1, r3
 8007114:	6878      	ldr	r0, [r7, #4]
 8007116:	f7ff ff2f 	bl	8006f78 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 800711a:	6878      	ldr	r0, [r7, #4]
 800711c:	f000 fb96 	bl	800784c <SDMMC_GetCmdError>
 8007120:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007122:	69fb      	ldr	r3, [r7, #28]
}
 8007124:	4618      	mov	r0, r3
 8007126:	3720      	adds	r7, #32
 8007128:	46bd      	mov	sp, r7
 800712a:	bd80      	pop	{r7, pc}

0800712c <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 800712c:	b580      	push	{r7, lr}
 800712e:	b088      	sub	sp, #32
 8007130:	af00      	add	r7, sp, #0
 8007132:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8007134:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8007138:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800713a:	2308      	movs	r3, #8
 800713c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800713e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007142:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007144:	2300      	movs	r3, #0
 8007146:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007148:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800714c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800714e:	f107 0308 	add.w	r3, r7, #8
 8007152:	4619      	mov	r1, r3
 8007154:	6878      	ldr	r0, [r7, #4]
 8007156:	f7ff ff0f 	bl	8006f78 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 800715a:	6878      	ldr	r0, [r7, #4]
 800715c:	f000 fb28 	bl	80077b0 <SDMMC_GetCmdResp7>
 8007160:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007162:	69fb      	ldr	r3, [r7, #28]
}
 8007164:	4618      	mov	r0, r3
 8007166:	3720      	adds	r7, #32
 8007168:	46bd      	mov	sp, r7
 800716a:	bd80      	pop	{r7, pc}

0800716c <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800716c:	b580      	push	{r7, lr}
 800716e:	b088      	sub	sp, #32
 8007170:	af00      	add	r7, sp, #0
 8007172:	6078      	str	r0, [r7, #4]
 8007174:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8007176:	683b      	ldr	r3, [r7, #0]
 8007178:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800717a:	2337      	movs	r3, #55	; 0x37
 800717c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800717e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007182:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007184:	2300      	movs	r3, #0
 8007186:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007188:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800718c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800718e:	f107 0308 	add.w	r3, r7, #8
 8007192:	4619      	mov	r1, r3
 8007194:	6878      	ldr	r0, [r7, #4]
 8007196:	f7ff feef 	bl	8006f78 <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800719a:	f241 3288 	movw	r2, #5000	; 0x1388
 800719e:	2137      	movs	r1, #55	; 0x37
 80071a0:	6878      	ldr	r0, [r7, #4]
 80071a2:	f000 f911 	bl	80073c8 <SDMMC_GetCmdResp1>
 80071a6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80071a8:	69fb      	ldr	r3, [r7, #28]
}
 80071aa:	4618      	mov	r0, r3
 80071ac:	3720      	adds	r7, #32
 80071ae:	46bd      	mov	sp, r7
 80071b0:	bd80      	pop	{r7, pc}

080071b2 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80071b2:	b580      	push	{r7, lr}
 80071b4:	b088      	sub	sp, #32
 80071b6:	af00      	add	r7, sp, #0
 80071b8:	6078      	str	r0, [r7, #4]
 80071ba:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 80071bc:	683b      	ldr	r3, [r7, #0]
 80071be:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 80071c0:	2329      	movs	r3, #41	; 0x29
 80071c2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80071c4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80071c8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80071ca:	2300      	movs	r3, #0
 80071cc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80071ce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80071d2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80071d4:	f107 0308 	add.w	r3, r7, #8
 80071d8:	4619      	mov	r1, r3
 80071da:	6878      	ldr	r0, [r7, #4]
 80071dc:	f7ff fecc 	bl	8006f78 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 80071e0:	6878      	ldr	r0, [r7, #4]
 80071e2:	f000 fa2d 	bl	8007640 <SDMMC_GetCmdResp3>
 80071e6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80071e8:	69fb      	ldr	r3, [r7, #28]
}
 80071ea:	4618      	mov	r0, r3
 80071ec:	3720      	adds	r7, #32
 80071ee:	46bd      	mov	sp, r7
 80071f0:	bd80      	pop	{r7, pc}

080071f2 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 80071f2:	b580      	push	{r7, lr}
 80071f4:	b088      	sub	sp, #32
 80071f6:	af00      	add	r7, sp, #0
 80071f8:	6078      	str	r0, [r7, #4]
 80071fa:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 80071fc:	683b      	ldr	r3, [r7, #0]
 80071fe:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8007200:	2306      	movs	r3, #6
 8007202:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007204:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007208:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800720a:	2300      	movs	r3, #0
 800720c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800720e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007212:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007214:	f107 0308 	add.w	r3, r7, #8
 8007218:	4619      	mov	r1, r3
 800721a:	6878      	ldr	r0, [r7, #4]
 800721c:	f7ff feac 	bl	8006f78 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 8007220:	f241 3288 	movw	r2, #5000	; 0x1388
 8007224:	2106      	movs	r1, #6
 8007226:	6878      	ldr	r0, [r7, #4]
 8007228:	f000 f8ce 	bl	80073c8 <SDMMC_GetCmdResp1>
 800722c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800722e:	69fb      	ldr	r3, [r7, #28]
}
 8007230:	4618      	mov	r0, r3
 8007232:	3720      	adds	r7, #32
 8007234:	46bd      	mov	sp, r7
 8007236:	bd80      	pop	{r7, pc}

08007238 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 8007238:	b580      	push	{r7, lr}
 800723a:	b088      	sub	sp, #32
 800723c:	af00      	add	r7, sp, #0
 800723e:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8007240:	2300      	movs	r3, #0
 8007242:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8007244:	2333      	movs	r3, #51	; 0x33
 8007246:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007248:	f44f 7380 	mov.w	r3, #256	; 0x100
 800724c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800724e:	2300      	movs	r3, #0
 8007250:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007252:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007256:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007258:	f107 0308 	add.w	r3, r7, #8
 800725c:	4619      	mov	r1, r3
 800725e:	6878      	ldr	r0, [r7, #4]
 8007260:	f7ff fe8a 	bl	8006f78 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 8007264:	f241 3288 	movw	r2, #5000	; 0x1388
 8007268:	2133      	movs	r1, #51	; 0x33
 800726a:	6878      	ldr	r0, [r7, #4]
 800726c:	f000 f8ac 	bl	80073c8 <SDMMC_GetCmdResp1>
 8007270:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007272:	69fb      	ldr	r3, [r7, #28]
}
 8007274:	4618      	mov	r0, r3
 8007276:	3720      	adds	r7, #32
 8007278:	46bd      	mov	sp, r7
 800727a:	bd80      	pop	{r7, pc}

0800727c <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 800727c:	b580      	push	{r7, lr}
 800727e:	b088      	sub	sp, #32
 8007280:	af00      	add	r7, sp, #0
 8007282:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8007284:	2300      	movs	r3, #0
 8007286:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8007288:	2302      	movs	r3, #2
 800728a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800728c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8007290:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007292:	2300      	movs	r3, #0
 8007294:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007296:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800729a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800729c:	f107 0308 	add.w	r3, r7, #8
 80072a0:	4619      	mov	r1, r3
 80072a2:	6878      	ldr	r0, [r7, #4]
 80072a4:	f7ff fe68 	bl	8006f78 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 80072a8:	6878      	ldr	r0, [r7, #4]
 80072aa:	f000 f97f 	bl	80075ac <SDMMC_GetCmdResp2>
 80072ae:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80072b0:	69fb      	ldr	r3, [r7, #28]
}
 80072b2:	4618      	mov	r0, r3
 80072b4:	3720      	adds	r7, #32
 80072b6:	46bd      	mov	sp, r7
 80072b8:	bd80      	pop	{r7, pc}

080072ba <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80072ba:	b580      	push	{r7, lr}
 80072bc:	b088      	sub	sp, #32
 80072be:	af00      	add	r7, sp, #0
 80072c0:	6078      	str	r0, [r7, #4]
 80072c2:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 80072c4:	683b      	ldr	r3, [r7, #0]
 80072c6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 80072c8:	2309      	movs	r3, #9
 80072ca:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 80072cc:	f44f 7340 	mov.w	r3, #768	; 0x300
 80072d0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80072d2:	2300      	movs	r3, #0
 80072d4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80072d6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80072da:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80072dc:	f107 0308 	add.w	r3, r7, #8
 80072e0:	4619      	mov	r1, r3
 80072e2:	6878      	ldr	r0, [r7, #4]
 80072e4:	f7ff fe48 	bl	8006f78 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 80072e8:	6878      	ldr	r0, [r7, #4]
 80072ea:	f000 f95f 	bl	80075ac <SDMMC_GetCmdResp2>
 80072ee:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80072f0:	69fb      	ldr	r3, [r7, #28]
}
 80072f2:	4618      	mov	r0, r3
 80072f4:	3720      	adds	r7, #32
 80072f6:	46bd      	mov	sp, r7
 80072f8:	bd80      	pop	{r7, pc}

080072fa <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pRCA: Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 80072fa:	b580      	push	{r7, lr}
 80072fc:	b088      	sub	sp, #32
 80072fe:	af00      	add	r7, sp, #0
 8007300:	6078      	str	r0, [r7, #4]
 8007302:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8007304:	2300      	movs	r3, #0
 8007306:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8007308:	2303      	movs	r3, #3
 800730a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800730c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007310:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007312:	2300      	movs	r3, #0
 8007314:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007316:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800731a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800731c:	f107 0308 	add.w	r3, r7, #8
 8007320:	4619      	mov	r1, r3
 8007322:	6878      	ldr	r0, [r7, #4]
 8007324:	f7ff fe28 	bl	8006f78 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8007328:	683a      	ldr	r2, [r7, #0]
 800732a:	2103      	movs	r1, #3
 800732c:	6878      	ldr	r0, [r7, #4]
 800732e:	f000 f9c7 	bl	80076c0 <SDMMC_GetCmdResp6>
 8007332:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007334:	69fb      	ldr	r3, [r7, #28]
}
 8007336:	4618      	mov	r0, r3
 8007338:	3720      	adds	r7, #32
 800733a:	46bd      	mov	sp, r7
 800733c:	bd80      	pop	{r7, pc}

0800733e <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800733e:	b580      	push	{r7, lr}
 8007340:	b088      	sub	sp, #32
 8007342:	af00      	add	r7, sp, #0
 8007344:	6078      	str	r0, [r7, #4]
 8007346:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 8007348:	683b      	ldr	r3, [r7, #0]
 800734a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800734c:	230d      	movs	r3, #13
 800734e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007350:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007354:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007356:	2300      	movs	r3, #0
 8007358:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800735a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800735e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007360:	f107 0308 	add.w	r3, r7, #8
 8007364:	4619      	mov	r1, r3
 8007366:	6878      	ldr	r0, [r7, #4]
 8007368:	f7ff fe06 	bl	8006f78 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800736c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007370:	210d      	movs	r1, #13
 8007372:	6878      	ldr	r0, [r7, #4]
 8007374:	f000 f828 	bl	80073c8 <SDMMC_GetCmdResp1>
 8007378:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800737a:	69fb      	ldr	r3, [r7, #28]
}
 800737c:	4618      	mov	r0, r3
 800737e:	3720      	adds	r7, #32
 8007380:	46bd      	mov	sp, r7
 8007382:	bd80      	pop	{r7, pc}

08007384 <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 8007384:	b580      	push	{r7, lr}
 8007386:	b088      	sub	sp, #32
 8007388:	af00      	add	r7, sp, #0
 800738a:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800738c:	2300      	movs	r3, #0
 800738e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 8007390:	230d      	movs	r3, #13
 8007392:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007394:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007398:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800739a:	2300      	movs	r3, #0
 800739c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800739e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80073a2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80073a4:	f107 0308 	add.w	r3, r7, #8
 80073a8:	4619      	mov	r1, r3
 80073aa:	6878      	ldr	r0, [r7, #4]
 80073ac:	f7ff fde4 	bl	8006f78 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 80073b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80073b4:	210d      	movs	r1, #13
 80073b6:	6878      	ldr	r0, [r7, #4]
 80073b8:	f000 f806 	bl	80073c8 <SDMMC_GetCmdResp1>
 80073bc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80073be:	69fb      	ldr	r3, [r7, #28]
}
 80073c0:	4618      	mov	r0, r3
 80073c2:	3720      	adds	r7, #32
 80073c4:	46bd      	mov	sp, r7
 80073c6:	bd80      	pop	{r7, pc}

080073c8 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 80073c8:	b580      	push	{r7, lr}
 80073ca:	b088      	sub	sp, #32
 80073cc:	af00      	add	r7, sp, #0
 80073ce:	60f8      	str	r0, [r7, #12]
 80073d0:	460b      	mov	r3, r1
 80073d2:	607a      	str	r2, [r7, #4]
 80073d4:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 80073d6:	4b70      	ldr	r3, [pc, #448]	; (8007598 <SDMMC_GetCmdResp1+0x1d0>)
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	4a70      	ldr	r2, [pc, #448]	; (800759c <SDMMC_GetCmdResp1+0x1d4>)
 80073dc:	fba2 2303 	umull	r2, r3, r2, r3
 80073e0:	0a5a      	lsrs	r2, r3, #9
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	fb02 f303 	mul.w	r3, r2, r3
 80073e8:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 80073ea:	69fb      	ldr	r3, [r7, #28]
 80073ec:	1e5a      	subs	r2, r3, #1
 80073ee:	61fa      	str	r2, [r7, #28]
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d102      	bne.n	80073fa <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 80073f4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80073f8:	e0c9      	b.n	800758e <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80073fe:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 8007400:	69ba      	ldr	r2, [r7, #24]
 8007402:	4b67      	ldr	r3, [pc, #412]	; (80075a0 <SDMMC_GetCmdResp1+0x1d8>)
 8007404:	4013      	ands	r3, r2
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8007406:	2b00      	cmp	r3, #0
 8007408:	d0ef      	beq.n	80073ea <SDMMC_GetCmdResp1+0x22>
 800740a:	69bb      	ldr	r3, [r7, #24]
 800740c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007410:	2b00      	cmp	r3, #0
 8007412:	d1ea      	bne.n	80073ea <SDMMC_GetCmdResp1+0x22>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007418:	f003 0304 	and.w	r3, r3, #4
 800741c:	2b00      	cmp	r3, #0
 800741e:	d004      	beq.n	800742a <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	2204      	movs	r2, #4
 8007424:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007426:	2304      	movs	r3, #4
 8007428:	e0b1      	b.n	800758e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800742e:	f003 0301 	and.w	r3, r3, #1
 8007432:	2b00      	cmp	r3, #0
 8007434:	d004      	beq.n	8007440 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	2201      	movs	r2, #1
 800743a:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800743c:	2301      	movs	r3, #1
 800743e:	e0a6      	b.n	800758e <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	4a58      	ldr	r2, [pc, #352]	; (80075a4 <SDMMC_GetCmdResp1+0x1dc>)
 8007444:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8007446:	68f8      	ldr	r0, [r7, #12]
 8007448:	f7ff fdc0 	bl	8006fcc <SDMMC_GetCommandResponse>
 800744c:	4603      	mov	r3, r0
 800744e:	461a      	mov	r2, r3
 8007450:	7afb      	ldrb	r3, [r7, #11]
 8007452:	4293      	cmp	r3, r2
 8007454:	d001      	beq.n	800745a <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007456:	2301      	movs	r3, #1
 8007458:	e099      	b.n	800758e <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800745a:	2100      	movs	r1, #0
 800745c:	68f8      	ldr	r0, [r7, #12]
 800745e:	f7ff fdc2 	bl	8006fe6 <SDMMC_GetResponse>
 8007462:	6178      	str	r0, [r7, #20]

  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8007464:	697a      	ldr	r2, [r7, #20]
 8007466:	4b50      	ldr	r3, [pc, #320]	; (80075a8 <SDMMC_GetCmdResp1+0x1e0>)
 8007468:	4013      	ands	r3, r2
 800746a:	2b00      	cmp	r3, #0
 800746c:	d101      	bne.n	8007472 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800746e:	2300      	movs	r3, #0
 8007470:	e08d      	b.n	800758e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8007472:	697b      	ldr	r3, [r7, #20]
 8007474:	2b00      	cmp	r3, #0
 8007476:	da02      	bge.n	800747e <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8007478:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800747c:	e087      	b.n	800758e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800747e:	697b      	ldr	r3, [r7, #20]
 8007480:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007484:	2b00      	cmp	r3, #0
 8007486:	d001      	beq.n	800748c <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8007488:	2340      	movs	r3, #64	; 0x40
 800748a:	e080      	b.n	800758e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800748c:	697b      	ldr	r3, [r7, #20]
 800748e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007492:	2b00      	cmp	r3, #0
 8007494:	d001      	beq.n	800749a <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8007496:	2380      	movs	r3, #128	; 0x80
 8007498:	e079      	b.n	800758e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800749a:	697b      	ldr	r3, [r7, #20]
 800749c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	d002      	beq.n	80074aa <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 80074a4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80074a8:	e071      	b.n	800758e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 80074aa:	697b      	ldr	r3, [r7, #20]
 80074ac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	d002      	beq.n	80074ba <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 80074b4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80074b8:	e069      	b.n	800758e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 80074ba:	697b      	ldr	r3, [r7, #20]
 80074bc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	d002      	beq.n	80074ca <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 80074c4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80074c8:	e061      	b.n	800758e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 80074ca:	697b      	ldr	r3, [r7, #20]
 80074cc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d002      	beq.n	80074da <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 80074d4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80074d8:	e059      	b.n	800758e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 80074da:	697b      	ldr	r3, [r7, #20]
 80074dc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	d002      	beq.n	80074ea <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80074e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80074e8:	e051      	b.n	800758e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 80074ea:	697b      	ldr	r3, [r7, #20]
 80074ec:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	d002      	beq.n	80074fa <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80074f4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80074f8:	e049      	b.n	800758e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 80074fa:	697b      	ldr	r3, [r7, #20]
 80074fc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007500:	2b00      	cmp	r3, #0
 8007502:	d002      	beq.n	800750a <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8007504:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8007508:	e041      	b.n	800758e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800750a:	697b      	ldr	r3, [r7, #20]
 800750c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007510:	2b00      	cmp	r3, #0
 8007512:	d002      	beq.n	800751a <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8007514:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007518:	e039      	b.n	800758e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800751a:	697b      	ldr	r3, [r7, #20]
 800751c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007520:	2b00      	cmp	r3, #0
 8007522:	d002      	beq.n	800752a <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8007524:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007528:	e031      	b.n	800758e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800752a:	697b      	ldr	r3, [r7, #20]
 800752c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007530:	2b00      	cmp	r3, #0
 8007532:	d002      	beq.n	800753a <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8007534:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8007538:	e029      	b.n	800758e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800753a:	697b      	ldr	r3, [r7, #20]
 800753c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007540:	2b00      	cmp	r3, #0
 8007542:	d002      	beq.n	800754a <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8007544:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8007548:	e021      	b.n	800758e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800754a:	697b      	ldr	r3, [r7, #20]
 800754c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007550:	2b00      	cmp	r3, #0
 8007552:	d002      	beq.n	800755a <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8007554:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8007558:	e019      	b.n	800758e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800755a:	697b      	ldr	r3, [r7, #20]
 800755c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007560:	2b00      	cmp	r3, #0
 8007562:	d002      	beq.n	800756a <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8007564:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8007568:	e011      	b.n	800758e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800756a:	697b      	ldr	r3, [r7, #20]
 800756c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007570:	2b00      	cmp	r3, #0
 8007572:	d002      	beq.n	800757a <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8007574:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8007578:	e009      	b.n	800758e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800757a:	697b      	ldr	r3, [r7, #20]
 800757c:	f003 0308 	and.w	r3, r3, #8
 8007580:	2b00      	cmp	r3, #0
 8007582:	d002      	beq.n	800758a <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8007584:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8007588:	e001      	b.n	800758e <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800758a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800758e:	4618      	mov	r0, r3
 8007590:	3720      	adds	r7, #32
 8007592:	46bd      	mov	sp, r7
 8007594:	bd80      	pop	{r7, pc}
 8007596:	bf00      	nop
 8007598:	24000000 	.word	0x24000000
 800759c:	10624dd3 	.word	0x10624dd3
 80075a0:	00200045 	.word	0x00200045
 80075a4:	002000c5 	.word	0x002000c5
 80075a8:	fdffe008 	.word	0xfdffe008

080075ac <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 80075ac:	b480      	push	{r7}
 80075ae:	b085      	sub	sp, #20
 80075b0:	af00      	add	r7, sp, #0
 80075b2:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 80075b4:	4b1f      	ldr	r3, [pc, #124]	; (8007634 <SDMMC_GetCmdResp2+0x88>)
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	4a1f      	ldr	r2, [pc, #124]	; (8007638 <SDMMC_GetCmdResp2+0x8c>)
 80075ba:	fba2 2303 	umull	r2, r3, r2, r3
 80075be:	0a5b      	lsrs	r3, r3, #9
 80075c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80075c4:	fb02 f303 	mul.w	r3, r2, r3
 80075c8:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	1e5a      	subs	r2, r3, #1
 80075ce:	60fa      	str	r2, [r7, #12]
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	d102      	bne.n	80075da <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80075d4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80075d8:	e026      	b.n	8007628 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80075de:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80075e0:	68bb      	ldr	r3, [r7, #8]
 80075e2:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d0ef      	beq.n	80075ca <SDMMC_GetCmdResp2+0x1e>
 80075ea:	68bb      	ldr	r3, [r7, #8]
 80075ec:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d1ea      	bne.n	80075ca <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80075f8:	f003 0304 	and.w	r3, r3, #4
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	d004      	beq.n	800760a <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	2204      	movs	r2, #4
 8007604:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007606:	2304      	movs	r3, #4
 8007608:	e00e      	b.n	8007628 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800760e:	f003 0301 	and.w	r3, r3, #1
 8007612:	2b00      	cmp	r3, #0
 8007614:	d004      	beq.n	8007620 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	2201      	movs	r2, #1
 800761a:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800761c:	2301      	movs	r3, #1
 800761e:	e003      	b.n	8007628 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	4a06      	ldr	r2, [pc, #24]	; (800763c <SDMMC_GetCmdResp2+0x90>)
 8007624:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8007626:	2300      	movs	r3, #0
}
 8007628:	4618      	mov	r0, r3
 800762a:	3714      	adds	r7, #20
 800762c:	46bd      	mov	sp, r7
 800762e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007632:	4770      	bx	lr
 8007634:	24000000 	.word	0x24000000
 8007638:	10624dd3 	.word	0x10624dd3
 800763c:	002000c5 	.word	0x002000c5

08007640 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 8007640:	b480      	push	{r7}
 8007642:	b085      	sub	sp, #20
 8007644:	af00      	add	r7, sp, #0
 8007646:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8007648:	4b1a      	ldr	r3, [pc, #104]	; (80076b4 <SDMMC_GetCmdResp3+0x74>)
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	4a1a      	ldr	r2, [pc, #104]	; (80076b8 <SDMMC_GetCmdResp3+0x78>)
 800764e:	fba2 2303 	umull	r2, r3, r2, r3
 8007652:	0a5b      	lsrs	r3, r3, #9
 8007654:	f241 3288 	movw	r2, #5000	; 0x1388
 8007658:	fb02 f303 	mul.w	r3, r2, r3
 800765c:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	1e5a      	subs	r2, r3, #1
 8007662:	60fa      	str	r2, [r7, #12]
 8007664:	2b00      	cmp	r3, #0
 8007666:	d102      	bne.n	800766e <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007668:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800766c:	e01b      	b.n	80076a6 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007672:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8007674:	68bb      	ldr	r3, [r7, #8]
 8007676:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800767a:	2b00      	cmp	r3, #0
 800767c:	d0ef      	beq.n	800765e <SDMMC_GetCmdResp3+0x1e>
 800767e:	68bb      	ldr	r3, [r7, #8]
 8007680:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8007684:	2b00      	cmp	r3, #0
 8007686:	d1ea      	bne.n	800765e <SDMMC_GetCmdResp3+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800768c:	f003 0304 	and.w	r3, r3, #4
 8007690:	2b00      	cmp	r3, #0
 8007692:	d004      	beq.n	800769e <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	2204      	movs	r2, #4
 8007698:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800769a:	2304      	movs	r3, #4
 800769c:	e003      	b.n	80076a6 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	4a06      	ldr	r2, [pc, #24]	; (80076bc <SDMMC_GetCmdResp3+0x7c>)
 80076a2:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 80076a4:	2300      	movs	r3, #0
}
 80076a6:	4618      	mov	r0, r3
 80076a8:	3714      	adds	r7, #20
 80076aa:	46bd      	mov	sp, r7
 80076ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076b0:	4770      	bx	lr
 80076b2:	bf00      	nop
 80076b4:	24000000 	.word	0x24000000
 80076b8:	10624dd3 	.word	0x10624dd3
 80076bc:	002000c5 	.word	0x002000c5

080076c0 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 80076c0:	b580      	push	{r7, lr}
 80076c2:	b088      	sub	sp, #32
 80076c4:	af00      	add	r7, sp, #0
 80076c6:	60f8      	str	r0, [r7, #12]
 80076c8:	460b      	mov	r3, r1
 80076ca:	607a      	str	r2, [r7, #4]
 80076cc:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 80076ce:	4b35      	ldr	r3, [pc, #212]	; (80077a4 <SDMMC_GetCmdResp6+0xe4>)
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	4a35      	ldr	r2, [pc, #212]	; (80077a8 <SDMMC_GetCmdResp6+0xe8>)
 80076d4:	fba2 2303 	umull	r2, r3, r2, r3
 80076d8:	0a5b      	lsrs	r3, r3, #9
 80076da:	f241 3288 	movw	r2, #5000	; 0x1388
 80076de:	fb02 f303 	mul.w	r3, r2, r3
 80076e2:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 80076e4:	69fb      	ldr	r3, [r7, #28]
 80076e6:	1e5a      	subs	r2, r3, #1
 80076e8:	61fa      	str	r2, [r7, #28]
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	d102      	bne.n	80076f4 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 80076ee:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80076f2:	e052      	b.n	800779a <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80076f8:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80076fa:	69bb      	ldr	r3, [r7, #24]
 80076fc:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8007700:	2b00      	cmp	r3, #0
 8007702:	d0ef      	beq.n	80076e4 <SDMMC_GetCmdResp6+0x24>
 8007704:	69bb      	ldr	r3, [r7, #24]
 8007706:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800770a:	2b00      	cmp	r3, #0
 800770c:	d1ea      	bne.n	80076e4 <SDMMC_GetCmdResp6+0x24>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007712:	f003 0304 	and.w	r3, r3, #4
 8007716:	2b00      	cmp	r3, #0
 8007718:	d004      	beq.n	8007724 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	2204      	movs	r2, #4
 800771e:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007720:	2304      	movs	r3, #4
 8007722:	e03a      	b.n	800779a <SDMMC_GetCmdResp6+0xda>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007728:	f003 0301 	and.w	r3, r3, #1
 800772c:	2b00      	cmp	r3, #0
 800772e:	d004      	beq.n	800773a <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	2201      	movs	r2, #1
 8007734:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007736:	2301      	movs	r3, #1
 8007738:	e02f      	b.n	800779a <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800773a:	68f8      	ldr	r0, [r7, #12]
 800773c:	f7ff fc46 	bl	8006fcc <SDMMC_GetCommandResponse>
 8007740:	4603      	mov	r3, r0
 8007742:	461a      	mov	r2, r3
 8007744:	7afb      	ldrb	r3, [r7, #11]
 8007746:	4293      	cmp	r3, r2
 8007748:	d001      	beq.n	800774e <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800774a:	2301      	movs	r3, #1
 800774c:	e025      	b.n	800779a <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	4a16      	ldr	r2, [pc, #88]	; (80077ac <SDMMC_GetCmdResp6+0xec>)
 8007752:	639a      	str	r2, [r3, #56]	; 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8007754:	2100      	movs	r1, #0
 8007756:	68f8      	ldr	r0, [r7, #12]
 8007758:	f7ff fc45 	bl	8006fe6 <SDMMC_GetResponse>
 800775c:	6178      	str	r0, [r7, #20]

  if ((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD |
 800775e:	697b      	ldr	r3, [r7, #20]
 8007760:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8007764:	2b00      	cmp	r3, #0
 8007766:	d106      	bne.n	8007776 <SDMMC_GetCmdResp6+0xb6>
                      SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
  {
    *pRCA = (uint16_t)(response_r1 >> 16);
 8007768:	697b      	ldr	r3, [r7, #20]
 800776a:	0c1b      	lsrs	r3, r3, #16
 800776c:	b29a      	uxth	r2, r3
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 8007772:	2300      	movs	r3, #0
 8007774:	e011      	b.n	800779a <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8007776:	697b      	ldr	r3, [r7, #20]
 8007778:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800777c:	2b00      	cmp	r3, #0
 800777e:	d002      	beq.n	8007786 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8007780:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007784:	e009      	b.n	800779a <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8007786:	697b      	ldr	r3, [r7, #20]
 8007788:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800778c:	2b00      	cmp	r3, #0
 800778e:	d002      	beq.n	8007796 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8007790:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007794:	e001      	b.n	800779a <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8007796:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800779a:	4618      	mov	r0, r3
 800779c:	3720      	adds	r7, #32
 800779e:	46bd      	mov	sp, r7
 80077a0:	bd80      	pop	{r7, pc}
 80077a2:	bf00      	nop
 80077a4:	24000000 	.word	0x24000000
 80077a8:	10624dd3 	.word	0x10624dd3
 80077ac:	002000c5 	.word	0x002000c5

080077b0 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 80077b0:	b480      	push	{r7}
 80077b2:	b085      	sub	sp, #20
 80077b4:	af00      	add	r7, sp, #0
 80077b6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 80077b8:	4b22      	ldr	r3, [pc, #136]	; (8007844 <SDMMC_GetCmdResp7+0x94>)
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	4a22      	ldr	r2, [pc, #136]	; (8007848 <SDMMC_GetCmdResp7+0x98>)
 80077be:	fba2 2303 	umull	r2, r3, r2, r3
 80077c2:	0a5b      	lsrs	r3, r3, #9
 80077c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80077c8:	fb02 f303 	mul.w	r3, r2, r3
 80077cc:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	1e5a      	subs	r2, r3, #1
 80077d2:	60fa      	str	r2, [r7, #12]
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	d102      	bne.n	80077de <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80077d8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80077dc:	e02c      	b.n	8007838 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80077e2:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80077e4:	68bb      	ldr	r3, [r7, #8]
 80077e6:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d0ef      	beq.n	80077ce <SDMMC_GetCmdResp7+0x1e>
 80077ee:	68bb      	ldr	r3, [r7, #8]
 80077f0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d1ea      	bne.n	80077ce <SDMMC_GetCmdResp7+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80077fc:	f003 0304 	and.w	r3, r3, #4
 8007800:	2b00      	cmp	r3, #0
 8007802:	d004      	beq.n	800780e <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	2204      	movs	r2, #4
 8007808:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800780a:	2304      	movs	r3, #4
 800780c:	e014      	b.n	8007838 <SDMMC_GetCmdResp7+0x88>
  }

  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007812:	f003 0301 	and.w	r3, r3, #1
 8007816:	2b00      	cmp	r3, #0
 8007818:	d004      	beq.n	8007824 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	2201      	movs	r2, #1
 800781e:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007820:	2301      	movs	r3, #1
 8007822:	e009      	b.n	8007838 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007828:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800782c:	2b00      	cmp	r3, #0
 800782e:	d002      	beq.n	8007836 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	2240      	movs	r2, #64	; 0x40
 8007834:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8007836:	2300      	movs	r3, #0

}
 8007838:	4618      	mov	r0, r3
 800783a:	3714      	adds	r7, #20
 800783c:	46bd      	mov	sp, r7
 800783e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007842:	4770      	bx	lr
 8007844:	24000000 	.word	0x24000000
 8007848:	10624dd3 	.word	0x10624dd3

0800784c <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 800784c:	b480      	push	{r7}
 800784e:	b085      	sub	sp, #20
 8007850:	af00      	add	r7, sp, #0
 8007852:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8007854:	4b11      	ldr	r3, [pc, #68]	; (800789c <SDMMC_GetCmdError+0x50>)
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	4a11      	ldr	r2, [pc, #68]	; (80078a0 <SDMMC_GetCmdError+0x54>)
 800785a:	fba2 2303 	umull	r2, r3, r2, r3
 800785e:	0a5b      	lsrs	r3, r3, #9
 8007860:	f241 3288 	movw	r2, #5000	; 0x1388
 8007864:	fb02 f303 	mul.w	r3, r2, r3
 8007868:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	1e5a      	subs	r2, r3, #1
 800786e:	60fa      	str	r2, [r7, #12]
 8007870:	2b00      	cmp	r3, #0
 8007872:	d102      	bne.n	800787a <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007874:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007878:	e009      	b.n	800788e <SDMMC_GetCmdError+0x42>
    }

  } while (!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800787e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007882:	2b00      	cmp	r3, #0
 8007884:	d0f1      	beq.n	800786a <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	4a06      	ldr	r2, [pc, #24]	; (80078a4 <SDMMC_GetCmdError+0x58>)
 800788a:	639a      	str	r2, [r3, #56]	; 0x38

  return SDMMC_ERROR_NONE;
 800788c:	2300      	movs	r3, #0
}
 800788e:	4618      	mov	r0, r3
 8007890:	3714      	adds	r7, #20
 8007892:	46bd      	mov	sp, r7
 8007894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007898:	4770      	bx	lr
 800789a:	bf00      	nop
 800789c:	24000000 	.word	0x24000000
 80078a0:	10624dd3 	.word	0x10624dd3
 80078a4:	002000c5 	.word	0x002000c5

080078a8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80078a8:	b084      	sub	sp, #16
 80078aa:	b580      	push	{r7, lr}
 80078ac:	b084      	sub	sp, #16
 80078ae:	af00      	add	r7, sp, #0
 80078b0:	6078      	str	r0, [r7, #4]
 80078b2:	f107 001c 	add.w	r0, r7, #28
 80078b6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80078ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078bc:	2b01      	cmp	r3, #1
 80078be:	d120      	bne.n	8007902 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078c4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	68da      	ldr	r2, [r3, #12]
 80078d0:	4b2a      	ldr	r3, [pc, #168]	; (800797c <USB_CoreInit+0xd4>)
 80078d2:	4013      	ands	r3, r2
 80078d4:	687a      	ldr	r2, [r7, #4]
 80078d6:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	68db      	ldr	r3, [r3, #12]
 80078dc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80078e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80078e6:	2b01      	cmp	r3, #1
 80078e8:	d105      	bne.n	80078f6 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	68db      	ldr	r3, [r3, #12]
 80078ee:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80078f6:	6878      	ldr	r0, [r7, #4]
 80078f8:	f000 fa60 	bl	8007dbc <USB_CoreReset>
 80078fc:	4603      	mov	r3, r0
 80078fe:	73fb      	strb	r3, [r7, #15]
 8007900:	e01a      	b.n	8007938 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	68db      	ldr	r3, [r3, #12]
 8007906:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800790e:	6878      	ldr	r0, [r7, #4]
 8007910:	f000 fa54 	bl	8007dbc <USB_CoreReset>
 8007914:	4603      	mov	r3, r0
 8007916:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8007918:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800791a:	2b00      	cmp	r3, #0
 800791c:	d106      	bne.n	800792c <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007922:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	639a      	str	r2, [r3, #56]	; 0x38
 800792a:	e005      	b.n	8007938 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007930:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8007938:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800793a:	2b01      	cmp	r3, #1
 800793c:	d116      	bne.n	800796c <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007942:	b29a      	uxth	r2, r3
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800794c:	4b0c      	ldr	r3, [pc, #48]	; (8007980 <USB_CoreInit+0xd8>)
 800794e:	4313      	orrs	r3, r2
 8007950:	687a      	ldr	r2, [r7, #4]
 8007952:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	689b      	ldr	r3, [r3, #8]
 8007958:	f043 0206 	orr.w	r2, r3, #6
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	689b      	ldr	r3, [r3, #8]
 8007964:	f043 0220 	orr.w	r2, r3, #32
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800796c:	7bfb      	ldrb	r3, [r7, #15]
}
 800796e:	4618      	mov	r0, r3
 8007970:	3710      	adds	r7, #16
 8007972:	46bd      	mov	sp, r7
 8007974:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007978:	b004      	add	sp, #16
 800797a:	4770      	bx	lr
 800797c:	ffbdffbf 	.word	0xffbdffbf
 8007980:	03ee0000 	.word	0x03ee0000

08007984 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007984:	b480      	push	{r7}
 8007986:	b083      	sub	sp, #12
 8007988:	af00      	add	r7, sp, #0
 800798a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	689b      	ldr	r3, [r3, #8]
 8007990:	f023 0201 	bic.w	r2, r3, #1
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007998:	2300      	movs	r3, #0
}
 800799a:	4618      	mov	r0, r3
 800799c:	370c      	adds	r7, #12
 800799e:	46bd      	mov	sp, r7
 80079a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079a4:	4770      	bx	lr

080079a6 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80079a6:	b580      	push	{r7, lr}
 80079a8:	b082      	sub	sp, #8
 80079aa:	af00      	add	r7, sp, #0
 80079ac:	6078      	str	r0, [r7, #4]
 80079ae:	460b      	mov	r3, r1
 80079b0:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	68db      	ldr	r3, [r3, #12]
 80079b6:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80079be:	78fb      	ldrb	r3, [r7, #3]
 80079c0:	2b01      	cmp	r3, #1
 80079c2:	d106      	bne.n	80079d2 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	68db      	ldr	r3, [r3, #12]
 80079c8:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	60da      	str	r2, [r3, #12]
 80079d0:	e00b      	b.n	80079ea <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 80079d2:	78fb      	ldrb	r3, [r7, #3]
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	d106      	bne.n	80079e6 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	68db      	ldr	r3, [r3, #12]
 80079dc:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	60da      	str	r2, [r3, #12]
 80079e4:	e001      	b.n	80079ea <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 80079e6:	2301      	movs	r3, #1
 80079e8:	e003      	b.n	80079f2 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 80079ea:	2032      	movs	r0, #50	; 0x32
 80079ec:	f7f9 fbd6 	bl	800119c <HAL_Delay>

  return HAL_OK;
 80079f0:	2300      	movs	r3, #0
}
 80079f2:	4618      	mov	r0, r3
 80079f4:	3708      	adds	r7, #8
 80079f6:	46bd      	mov	sp, r7
 80079f8:	bd80      	pop	{r7, pc}
	...

080079fc <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80079fc:	b084      	sub	sp, #16
 80079fe:	b580      	push	{r7, lr}
 8007a00:	b086      	sub	sp, #24
 8007a02:	af00      	add	r7, sp, #0
 8007a04:	6078      	str	r0, [r7, #4]
 8007a06:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8007a0a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8007a0e:	2300      	movs	r3, #0
 8007a10:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8007a16:	2300      	movs	r3, #0
 8007a18:	613b      	str	r3, [r7, #16]
 8007a1a:	e009      	b.n	8007a30 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8007a1c:	687a      	ldr	r2, [r7, #4]
 8007a1e:	693b      	ldr	r3, [r7, #16]
 8007a20:	3340      	adds	r3, #64	; 0x40
 8007a22:	009b      	lsls	r3, r3, #2
 8007a24:	4413      	add	r3, r2
 8007a26:	2200      	movs	r2, #0
 8007a28:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8007a2a:	693b      	ldr	r3, [r7, #16]
 8007a2c:	3301      	adds	r3, #1
 8007a2e:	613b      	str	r3, [r7, #16]
 8007a30:	693b      	ldr	r3, [r7, #16]
 8007a32:	2b0e      	cmp	r3, #14
 8007a34:	d9f2      	bls.n	8007a1c <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8007a36:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	d11c      	bne.n	8007a76 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007a42:	685b      	ldr	r3, [r3, #4]
 8007a44:	68fa      	ldr	r2, [r7, #12]
 8007a46:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007a4a:	f043 0302 	orr.w	r3, r3, #2
 8007a4e:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a54:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	601a      	str	r2, [r3, #0]
 8007a74:	e005      	b.n	8007a82 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a7a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007a88:	461a      	mov	r2, r3
 8007a8a:	2300      	movs	r3, #0
 8007a8c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007a94:	4619      	mov	r1, r3
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007a9c:	461a      	mov	r2, r3
 8007a9e:	680b      	ldr	r3, [r1, #0]
 8007aa0:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007aa2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007aa4:	2b01      	cmp	r3, #1
 8007aa6:	d10c      	bne.n	8007ac2 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8007aa8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	d104      	bne.n	8007ab8 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8007aae:	2100      	movs	r1, #0
 8007ab0:	6878      	ldr	r0, [r7, #4]
 8007ab2:	f000 f949 	bl	8007d48 <USB_SetDevSpeed>
 8007ab6:	e008      	b.n	8007aca <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8007ab8:	2101      	movs	r1, #1
 8007aba:	6878      	ldr	r0, [r7, #4]
 8007abc:	f000 f944 	bl	8007d48 <USB_SetDevSpeed>
 8007ac0:	e003      	b.n	8007aca <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8007ac2:	2103      	movs	r1, #3
 8007ac4:	6878      	ldr	r0, [r7, #4]
 8007ac6:	f000 f93f 	bl	8007d48 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007aca:	2110      	movs	r1, #16
 8007acc:	6878      	ldr	r0, [r7, #4]
 8007ace:	f000 f8f3 	bl	8007cb8 <USB_FlushTxFifo>
 8007ad2:	4603      	mov	r3, r0
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	d001      	beq.n	8007adc <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8007ad8:	2301      	movs	r3, #1
 8007ada:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007adc:	6878      	ldr	r0, [r7, #4]
 8007ade:	f000 f911 	bl	8007d04 <USB_FlushRxFifo>
 8007ae2:	4603      	mov	r3, r0
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	d001      	beq.n	8007aec <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8007ae8:	2301      	movs	r3, #1
 8007aea:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007af2:	461a      	mov	r2, r3
 8007af4:	2300      	movs	r3, #0
 8007af6:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007afe:	461a      	mov	r2, r3
 8007b00:	2300      	movs	r3, #0
 8007b02:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007b0a:	461a      	mov	r2, r3
 8007b0c:	2300      	movs	r3, #0
 8007b0e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007b10:	2300      	movs	r3, #0
 8007b12:	613b      	str	r3, [r7, #16]
 8007b14:	e043      	b.n	8007b9e <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007b16:	693b      	ldr	r3, [r7, #16]
 8007b18:	015a      	lsls	r2, r3, #5
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	4413      	add	r3, r2
 8007b1e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007b28:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007b2c:	d118      	bne.n	8007b60 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8007b2e:	693b      	ldr	r3, [r7, #16]
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	d10a      	bne.n	8007b4a <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8007b34:	693b      	ldr	r3, [r7, #16]
 8007b36:	015a      	lsls	r2, r3, #5
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	4413      	add	r3, r2
 8007b3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b40:	461a      	mov	r2, r3
 8007b42:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007b46:	6013      	str	r3, [r2, #0]
 8007b48:	e013      	b.n	8007b72 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8007b4a:	693b      	ldr	r3, [r7, #16]
 8007b4c:	015a      	lsls	r2, r3, #5
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	4413      	add	r3, r2
 8007b52:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b56:	461a      	mov	r2, r3
 8007b58:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007b5c:	6013      	str	r3, [r2, #0]
 8007b5e:	e008      	b.n	8007b72 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8007b60:	693b      	ldr	r3, [r7, #16]
 8007b62:	015a      	lsls	r2, r3, #5
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	4413      	add	r3, r2
 8007b68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b6c:	461a      	mov	r2, r3
 8007b6e:	2300      	movs	r3, #0
 8007b70:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8007b72:	693b      	ldr	r3, [r7, #16]
 8007b74:	015a      	lsls	r2, r3, #5
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	4413      	add	r3, r2
 8007b7a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b7e:	461a      	mov	r2, r3
 8007b80:	2300      	movs	r3, #0
 8007b82:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8007b84:	693b      	ldr	r3, [r7, #16]
 8007b86:	015a      	lsls	r2, r3, #5
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	4413      	add	r3, r2
 8007b8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b90:	461a      	mov	r2, r3
 8007b92:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007b96:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007b98:	693b      	ldr	r3, [r7, #16]
 8007b9a:	3301      	adds	r3, #1
 8007b9c:	613b      	str	r3, [r7, #16]
 8007b9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ba0:	693a      	ldr	r2, [r7, #16]
 8007ba2:	429a      	cmp	r2, r3
 8007ba4:	d3b7      	bcc.n	8007b16 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007ba6:	2300      	movs	r3, #0
 8007ba8:	613b      	str	r3, [r7, #16]
 8007baa:	e043      	b.n	8007c34 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007bac:	693b      	ldr	r3, [r7, #16]
 8007bae:	015a      	lsls	r2, r3, #5
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	4413      	add	r3, r2
 8007bb4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007bbe:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007bc2:	d118      	bne.n	8007bf6 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8007bc4:	693b      	ldr	r3, [r7, #16]
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	d10a      	bne.n	8007be0 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8007bca:	693b      	ldr	r3, [r7, #16]
 8007bcc:	015a      	lsls	r2, r3, #5
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	4413      	add	r3, r2
 8007bd2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007bd6:	461a      	mov	r2, r3
 8007bd8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007bdc:	6013      	str	r3, [r2, #0]
 8007bde:	e013      	b.n	8007c08 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8007be0:	693b      	ldr	r3, [r7, #16]
 8007be2:	015a      	lsls	r2, r3, #5
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	4413      	add	r3, r2
 8007be8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007bec:	461a      	mov	r2, r3
 8007bee:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007bf2:	6013      	str	r3, [r2, #0]
 8007bf4:	e008      	b.n	8007c08 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8007bf6:	693b      	ldr	r3, [r7, #16]
 8007bf8:	015a      	lsls	r2, r3, #5
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	4413      	add	r3, r2
 8007bfe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c02:	461a      	mov	r2, r3
 8007c04:	2300      	movs	r3, #0
 8007c06:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8007c08:	693b      	ldr	r3, [r7, #16]
 8007c0a:	015a      	lsls	r2, r3, #5
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	4413      	add	r3, r2
 8007c10:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c14:	461a      	mov	r2, r3
 8007c16:	2300      	movs	r3, #0
 8007c18:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8007c1a:	693b      	ldr	r3, [r7, #16]
 8007c1c:	015a      	lsls	r2, r3, #5
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	4413      	add	r3, r2
 8007c22:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c26:	461a      	mov	r2, r3
 8007c28:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007c2c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007c2e:	693b      	ldr	r3, [r7, #16]
 8007c30:	3301      	adds	r3, #1
 8007c32:	613b      	str	r3, [r7, #16]
 8007c34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c36:	693a      	ldr	r2, [r7, #16]
 8007c38:	429a      	cmp	r2, r3
 8007c3a:	d3b7      	bcc.n	8007bac <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007c42:	691b      	ldr	r3, [r3, #16]
 8007c44:	68fa      	ldr	r2, [r7, #12]
 8007c46:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007c4a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007c4e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	2200      	movs	r2, #0
 8007c54:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8007c5c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8007c5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	d105      	bne.n	8007c70 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	699b      	ldr	r3, [r3, #24]
 8007c68:	f043 0210 	orr.w	r2, r3, #16
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	699a      	ldr	r2, [r3, #24]
 8007c74:	4b0e      	ldr	r3, [pc, #56]	; (8007cb0 <USB_DevInit+0x2b4>)
 8007c76:	4313      	orrs	r3, r2
 8007c78:	687a      	ldr	r2, [r7, #4]
 8007c7a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8007c7c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	d005      	beq.n	8007c8e <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	699b      	ldr	r3, [r3, #24]
 8007c86:	f043 0208 	orr.w	r2, r3, #8
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8007c8e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007c90:	2b01      	cmp	r3, #1
 8007c92:	d105      	bne.n	8007ca0 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	699a      	ldr	r2, [r3, #24]
 8007c98:	4b06      	ldr	r3, [pc, #24]	; (8007cb4 <USB_DevInit+0x2b8>)
 8007c9a:	4313      	orrs	r3, r2
 8007c9c:	687a      	ldr	r2, [r7, #4]
 8007c9e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8007ca0:	7dfb      	ldrb	r3, [r7, #23]
}
 8007ca2:	4618      	mov	r0, r3
 8007ca4:	3718      	adds	r7, #24
 8007ca6:	46bd      	mov	sp, r7
 8007ca8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007cac:	b004      	add	sp, #16
 8007cae:	4770      	bx	lr
 8007cb0:	803c3800 	.word	0x803c3800
 8007cb4:	40000004 	.word	0x40000004

08007cb8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007cb8:	b480      	push	{r7}
 8007cba:	b085      	sub	sp, #20
 8007cbc:	af00      	add	r7, sp, #0
 8007cbe:	6078      	str	r0, [r7, #4]
 8007cc0:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8007cc2:	2300      	movs	r3, #0
 8007cc4:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007cc6:	683b      	ldr	r3, [r7, #0]
 8007cc8:	019b      	lsls	r3, r3, #6
 8007cca:	f043 0220 	orr.w	r2, r3, #32
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8007cd2:	68fb      	ldr	r3, [r7, #12]
 8007cd4:	3301      	adds	r3, #1
 8007cd6:	60fb      	str	r3, [r7, #12]
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	4a09      	ldr	r2, [pc, #36]	; (8007d00 <USB_FlushTxFifo+0x48>)
 8007cdc:	4293      	cmp	r3, r2
 8007cde:	d901      	bls.n	8007ce4 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8007ce0:	2303      	movs	r3, #3
 8007ce2:	e006      	b.n	8007cf2 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	691b      	ldr	r3, [r3, #16]
 8007ce8:	f003 0320 	and.w	r3, r3, #32
 8007cec:	2b20      	cmp	r3, #32
 8007cee:	d0f0      	beq.n	8007cd2 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8007cf0:	2300      	movs	r3, #0
}
 8007cf2:	4618      	mov	r0, r3
 8007cf4:	3714      	adds	r7, #20
 8007cf6:	46bd      	mov	sp, r7
 8007cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cfc:	4770      	bx	lr
 8007cfe:	bf00      	nop
 8007d00:	00030d40 	.word	0x00030d40

08007d04 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007d04:	b480      	push	{r7}
 8007d06:	b085      	sub	sp, #20
 8007d08:	af00      	add	r7, sp, #0
 8007d0a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8007d0c:	2300      	movs	r3, #0
 8007d0e:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	2210      	movs	r2, #16
 8007d14:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	3301      	adds	r3, #1
 8007d1a:	60fb      	str	r3, [r7, #12]
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	4a09      	ldr	r2, [pc, #36]	; (8007d44 <USB_FlushRxFifo+0x40>)
 8007d20:	4293      	cmp	r3, r2
 8007d22:	d901      	bls.n	8007d28 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8007d24:	2303      	movs	r3, #3
 8007d26:	e006      	b.n	8007d36 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	691b      	ldr	r3, [r3, #16]
 8007d2c:	f003 0310 	and.w	r3, r3, #16
 8007d30:	2b10      	cmp	r3, #16
 8007d32:	d0f0      	beq.n	8007d16 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8007d34:	2300      	movs	r3, #0
}
 8007d36:	4618      	mov	r0, r3
 8007d38:	3714      	adds	r7, #20
 8007d3a:	46bd      	mov	sp, r7
 8007d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d40:	4770      	bx	lr
 8007d42:	bf00      	nop
 8007d44:	00030d40 	.word	0x00030d40

08007d48 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8007d48:	b480      	push	{r7}
 8007d4a:	b085      	sub	sp, #20
 8007d4c:	af00      	add	r7, sp, #0
 8007d4e:	6078      	str	r0, [r7, #4]
 8007d50:	460b      	mov	r3, r1
 8007d52:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007d5e:	681a      	ldr	r2, [r3, #0]
 8007d60:	78fb      	ldrb	r3, [r7, #3]
 8007d62:	68f9      	ldr	r1, [r7, #12]
 8007d64:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007d68:	4313      	orrs	r3, r2
 8007d6a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8007d6c:	2300      	movs	r3, #0
}
 8007d6e:	4618      	mov	r0, r3
 8007d70:	3714      	adds	r7, #20
 8007d72:	46bd      	mov	sp, r7
 8007d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d78:	4770      	bx	lr

08007d7a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8007d7a:	b480      	push	{r7}
 8007d7c:	b085      	sub	sp, #20
 8007d7e:	af00      	add	r7, sp, #0
 8007d80:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	68fa      	ldr	r2, [r7, #12]
 8007d90:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007d94:	f023 0303 	bic.w	r3, r3, #3
 8007d98:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007da0:	685b      	ldr	r3, [r3, #4]
 8007da2:	68fa      	ldr	r2, [r7, #12]
 8007da4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007da8:	f043 0302 	orr.w	r3, r3, #2
 8007dac:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007dae:	2300      	movs	r3, #0
}
 8007db0:	4618      	mov	r0, r3
 8007db2:	3714      	adds	r7, #20
 8007db4:	46bd      	mov	sp, r7
 8007db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dba:	4770      	bx	lr

08007dbc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007dbc:	b480      	push	{r7}
 8007dbe:	b085      	sub	sp, #20
 8007dc0:	af00      	add	r7, sp, #0
 8007dc2:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8007dc4:	2300      	movs	r3, #0
 8007dc6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	3301      	adds	r3, #1
 8007dcc:	60fb      	str	r3, [r7, #12]
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	4a13      	ldr	r2, [pc, #76]	; (8007e20 <USB_CoreReset+0x64>)
 8007dd2:	4293      	cmp	r3, r2
 8007dd4:	d901      	bls.n	8007dda <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8007dd6:	2303      	movs	r3, #3
 8007dd8:	e01b      	b.n	8007e12 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	691b      	ldr	r3, [r3, #16]
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	daf2      	bge.n	8007dc8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007de2:	2300      	movs	r3, #0
 8007de4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	691b      	ldr	r3, [r3, #16]
 8007dea:	f043 0201 	orr.w	r2, r3, #1
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	3301      	adds	r3, #1
 8007df6:	60fb      	str	r3, [r7, #12]
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	4a09      	ldr	r2, [pc, #36]	; (8007e20 <USB_CoreReset+0x64>)
 8007dfc:	4293      	cmp	r3, r2
 8007dfe:	d901      	bls.n	8007e04 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007e00:	2303      	movs	r3, #3
 8007e02:	e006      	b.n	8007e12 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	691b      	ldr	r3, [r3, #16]
 8007e08:	f003 0301 	and.w	r3, r3, #1
 8007e0c:	2b01      	cmp	r3, #1
 8007e0e:	d0f0      	beq.n	8007df2 <USB_CoreReset+0x36>

  return HAL_OK;
 8007e10:	2300      	movs	r3, #0
}
 8007e12:	4618      	mov	r0, r3
 8007e14:	3714      	adds	r7, #20
 8007e16:	46bd      	mov	sp, r7
 8007e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e1c:	4770      	bx	lr
 8007e1e:	bf00      	nop
 8007e20:	00030d40 	.word	0x00030d40

08007e24 <__libc_init_array>:
 8007e24:	b570      	push	{r4, r5, r6, lr}
 8007e26:	4d0d      	ldr	r5, [pc, #52]	; (8007e5c <__libc_init_array+0x38>)
 8007e28:	4c0d      	ldr	r4, [pc, #52]	; (8007e60 <__libc_init_array+0x3c>)
 8007e2a:	1b64      	subs	r4, r4, r5
 8007e2c:	10a4      	asrs	r4, r4, #2
 8007e2e:	2600      	movs	r6, #0
 8007e30:	42a6      	cmp	r6, r4
 8007e32:	d109      	bne.n	8007e48 <__libc_init_array+0x24>
 8007e34:	4d0b      	ldr	r5, [pc, #44]	; (8007e64 <__libc_init_array+0x40>)
 8007e36:	4c0c      	ldr	r4, [pc, #48]	; (8007e68 <__libc_init_array+0x44>)
 8007e38:	f000 f820 	bl	8007e7c <_init>
 8007e3c:	1b64      	subs	r4, r4, r5
 8007e3e:	10a4      	asrs	r4, r4, #2
 8007e40:	2600      	movs	r6, #0
 8007e42:	42a6      	cmp	r6, r4
 8007e44:	d105      	bne.n	8007e52 <__libc_init_array+0x2e>
 8007e46:	bd70      	pop	{r4, r5, r6, pc}
 8007e48:	f855 3b04 	ldr.w	r3, [r5], #4
 8007e4c:	4798      	blx	r3
 8007e4e:	3601      	adds	r6, #1
 8007e50:	e7ee      	b.n	8007e30 <__libc_init_array+0xc>
 8007e52:	f855 3b04 	ldr.w	r3, [r5], #4
 8007e56:	4798      	blx	r3
 8007e58:	3601      	adds	r6, #1
 8007e5a:	e7f2      	b.n	8007e42 <__libc_init_array+0x1e>
 8007e5c:	08007ed4 	.word	0x08007ed4
 8007e60:	08007ed4 	.word	0x08007ed4
 8007e64:	08007ed4 	.word	0x08007ed4
 8007e68:	08007ed8 	.word	0x08007ed8

08007e6c <memset>:
 8007e6c:	4402      	add	r2, r0
 8007e6e:	4603      	mov	r3, r0
 8007e70:	4293      	cmp	r3, r2
 8007e72:	d100      	bne.n	8007e76 <memset+0xa>
 8007e74:	4770      	bx	lr
 8007e76:	f803 1b01 	strb.w	r1, [r3], #1
 8007e7a:	e7f9      	b.n	8007e70 <memset+0x4>

08007e7c <_init>:
 8007e7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e7e:	bf00      	nop
 8007e80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007e82:	bc08      	pop	{r3}
 8007e84:	469e      	mov	lr, r3
 8007e86:	4770      	bx	lr

08007e88 <_fini>:
 8007e88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e8a:	bf00      	nop
 8007e8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007e8e:	bc08      	pop	{r3}
 8007e90:	469e      	mov	lr, r3
 8007e92:	4770      	bx	lr
