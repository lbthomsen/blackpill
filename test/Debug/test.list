
test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007c58  08000298  08000298  00001298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08007ef0  08007ef0  00008ef0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08007f28  08007f28  00008f28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08007f30  08007f30  00008f30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08007f34  08007f34  00008f34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000010  24000000  08007f38  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000580  24000010  08007f48  00009010  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  24000590  08007f48  00009590  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00009010  2**0
                  CONTENTS, READONLY
 10 .debug_info   00015204  00000000  00000000  0000903e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00002a73  00000000  00000000  0001e242  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000011b0  00000000  00000000  00020cb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00000d9f  00000000  00000000  00021e68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00037398  00000000  00000000  00022c07  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00014913  00000000  00000000  00059f9f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0015da5b  00000000  00000000  0006e8b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001cc30d  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00004b60  00000000  00000000  001cc350  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000004b  00000000  00000000  001d0eb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	@ (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	@ (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	@ (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000010 	.word	0x24000010
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08007ed8 	.word	0x08007ed8

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	@ (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	@ (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	@ (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000014 	.word	0x24000014
 80002d4:	08007ed8 	.word	0x08007ed8

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80002ec:	f000 b988 	b.w	8000600 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9d08      	ldr	r5, [sp, #32]
 800030e:	468e      	mov	lr, r1
 8000310:	4604      	mov	r4, r0
 8000312:	4688      	mov	r8, r1
 8000314:	2b00      	cmp	r3, #0
 8000316:	d14a      	bne.n	80003ae <__udivmoddi4+0xa6>
 8000318:	428a      	cmp	r2, r1
 800031a:	4617      	mov	r7, r2
 800031c:	d962      	bls.n	80003e4 <__udivmoddi4+0xdc>
 800031e:	fab2 f682 	clz	r6, r2
 8000322:	b14e      	cbz	r6, 8000338 <__udivmoddi4+0x30>
 8000324:	f1c6 0320 	rsb	r3, r6, #32
 8000328:	fa01 f806 	lsl.w	r8, r1, r6
 800032c:	fa20 f303 	lsr.w	r3, r0, r3
 8000330:	40b7      	lsls	r7, r6
 8000332:	ea43 0808 	orr.w	r8, r3, r8
 8000336:	40b4      	lsls	r4, r6
 8000338:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800033c:	fa1f fc87 	uxth.w	ip, r7
 8000340:	fbb8 f1fe 	udiv	r1, r8, lr
 8000344:	0c23      	lsrs	r3, r4, #16
 8000346:	fb0e 8811 	mls	r8, lr, r1, r8
 800034a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800034e:	fb01 f20c 	mul.w	r2, r1, ip
 8000352:	429a      	cmp	r2, r3
 8000354:	d909      	bls.n	800036a <__udivmoddi4+0x62>
 8000356:	18fb      	adds	r3, r7, r3
 8000358:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 800035c:	f080 80ea 	bcs.w	8000534 <__udivmoddi4+0x22c>
 8000360:	429a      	cmp	r2, r3
 8000362:	f240 80e7 	bls.w	8000534 <__udivmoddi4+0x22c>
 8000366:	3902      	subs	r1, #2
 8000368:	443b      	add	r3, r7
 800036a:	1a9a      	subs	r2, r3, r2
 800036c:	b2a3      	uxth	r3, r4
 800036e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000372:	fb0e 2210 	mls	r2, lr, r0, r2
 8000376:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800037a:	fb00 fc0c 	mul.w	ip, r0, ip
 800037e:	459c      	cmp	ip, r3
 8000380:	d909      	bls.n	8000396 <__udivmoddi4+0x8e>
 8000382:	18fb      	adds	r3, r7, r3
 8000384:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000388:	f080 80d6 	bcs.w	8000538 <__udivmoddi4+0x230>
 800038c:	459c      	cmp	ip, r3
 800038e:	f240 80d3 	bls.w	8000538 <__udivmoddi4+0x230>
 8000392:	443b      	add	r3, r7
 8000394:	3802      	subs	r0, #2
 8000396:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800039a:	eba3 030c 	sub.w	r3, r3, ip
 800039e:	2100      	movs	r1, #0
 80003a0:	b11d      	cbz	r5, 80003aa <__udivmoddi4+0xa2>
 80003a2:	40f3      	lsrs	r3, r6
 80003a4:	2200      	movs	r2, #0
 80003a6:	e9c5 3200 	strd	r3, r2, [r5]
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d905      	bls.n	80003be <__udivmoddi4+0xb6>
 80003b2:	b10d      	cbz	r5, 80003b8 <__udivmoddi4+0xb0>
 80003b4:	e9c5 0100 	strd	r0, r1, [r5]
 80003b8:	2100      	movs	r1, #0
 80003ba:	4608      	mov	r0, r1
 80003bc:	e7f5      	b.n	80003aa <__udivmoddi4+0xa2>
 80003be:	fab3 f183 	clz	r1, r3
 80003c2:	2900      	cmp	r1, #0
 80003c4:	d146      	bne.n	8000454 <__udivmoddi4+0x14c>
 80003c6:	4573      	cmp	r3, lr
 80003c8:	d302      	bcc.n	80003d0 <__udivmoddi4+0xc8>
 80003ca:	4282      	cmp	r2, r0
 80003cc:	f200 8105 	bhi.w	80005da <__udivmoddi4+0x2d2>
 80003d0:	1a84      	subs	r4, r0, r2
 80003d2:	eb6e 0203 	sbc.w	r2, lr, r3
 80003d6:	2001      	movs	r0, #1
 80003d8:	4690      	mov	r8, r2
 80003da:	2d00      	cmp	r5, #0
 80003dc:	d0e5      	beq.n	80003aa <__udivmoddi4+0xa2>
 80003de:	e9c5 4800 	strd	r4, r8, [r5]
 80003e2:	e7e2      	b.n	80003aa <__udivmoddi4+0xa2>
 80003e4:	2a00      	cmp	r2, #0
 80003e6:	f000 8090 	beq.w	800050a <__udivmoddi4+0x202>
 80003ea:	fab2 f682 	clz	r6, r2
 80003ee:	2e00      	cmp	r6, #0
 80003f0:	f040 80a4 	bne.w	800053c <__udivmoddi4+0x234>
 80003f4:	1a8a      	subs	r2, r1, r2
 80003f6:	0c03      	lsrs	r3, r0, #16
 80003f8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003fc:	b280      	uxth	r0, r0
 80003fe:	b2bc      	uxth	r4, r7
 8000400:	2101      	movs	r1, #1
 8000402:	fbb2 fcfe 	udiv	ip, r2, lr
 8000406:	fb0e 221c 	mls	r2, lr, ip, r2
 800040a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800040e:	fb04 f20c 	mul.w	r2, r4, ip
 8000412:	429a      	cmp	r2, r3
 8000414:	d907      	bls.n	8000426 <__udivmoddi4+0x11e>
 8000416:	18fb      	adds	r3, r7, r3
 8000418:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 800041c:	d202      	bcs.n	8000424 <__udivmoddi4+0x11c>
 800041e:	429a      	cmp	r2, r3
 8000420:	f200 80e0 	bhi.w	80005e4 <__udivmoddi4+0x2dc>
 8000424:	46c4      	mov	ip, r8
 8000426:	1a9b      	subs	r3, r3, r2
 8000428:	fbb3 f2fe 	udiv	r2, r3, lr
 800042c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000430:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000434:	fb02 f404 	mul.w	r4, r2, r4
 8000438:	429c      	cmp	r4, r3
 800043a:	d907      	bls.n	800044c <__udivmoddi4+0x144>
 800043c:	18fb      	adds	r3, r7, r3
 800043e:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 8000442:	d202      	bcs.n	800044a <__udivmoddi4+0x142>
 8000444:	429c      	cmp	r4, r3
 8000446:	f200 80ca 	bhi.w	80005de <__udivmoddi4+0x2d6>
 800044a:	4602      	mov	r2, r0
 800044c:	1b1b      	subs	r3, r3, r4
 800044e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000452:	e7a5      	b.n	80003a0 <__udivmoddi4+0x98>
 8000454:	f1c1 0620 	rsb	r6, r1, #32
 8000458:	408b      	lsls	r3, r1
 800045a:	fa22 f706 	lsr.w	r7, r2, r6
 800045e:	431f      	orrs	r7, r3
 8000460:	fa0e f401 	lsl.w	r4, lr, r1
 8000464:	fa20 f306 	lsr.w	r3, r0, r6
 8000468:	fa2e fe06 	lsr.w	lr, lr, r6
 800046c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000470:	4323      	orrs	r3, r4
 8000472:	fa00 f801 	lsl.w	r8, r0, r1
 8000476:	fa1f fc87 	uxth.w	ip, r7
 800047a:	fbbe f0f9 	udiv	r0, lr, r9
 800047e:	0c1c      	lsrs	r4, r3, #16
 8000480:	fb09 ee10 	mls	lr, r9, r0, lr
 8000484:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000488:	fb00 fe0c 	mul.w	lr, r0, ip
 800048c:	45a6      	cmp	lr, r4
 800048e:	fa02 f201 	lsl.w	r2, r2, r1
 8000492:	d909      	bls.n	80004a8 <__udivmoddi4+0x1a0>
 8000494:	193c      	adds	r4, r7, r4
 8000496:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 800049a:	f080 809c 	bcs.w	80005d6 <__udivmoddi4+0x2ce>
 800049e:	45a6      	cmp	lr, r4
 80004a0:	f240 8099 	bls.w	80005d6 <__udivmoddi4+0x2ce>
 80004a4:	3802      	subs	r0, #2
 80004a6:	443c      	add	r4, r7
 80004a8:	eba4 040e 	sub.w	r4, r4, lr
 80004ac:	fa1f fe83 	uxth.w	lr, r3
 80004b0:	fbb4 f3f9 	udiv	r3, r4, r9
 80004b4:	fb09 4413 	mls	r4, r9, r3, r4
 80004b8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80004bc:	fb03 fc0c 	mul.w	ip, r3, ip
 80004c0:	45a4      	cmp	ip, r4
 80004c2:	d908      	bls.n	80004d6 <__udivmoddi4+0x1ce>
 80004c4:	193c      	adds	r4, r7, r4
 80004c6:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 80004ca:	f080 8082 	bcs.w	80005d2 <__udivmoddi4+0x2ca>
 80004ce:	45a4      	cmp	ip, r4
 80004d0:	d97f      	bls.n	80005d2 <__udivmoddi4+0x2ca>
 80004d2:	3b02      	subs	r3, #2
 80004d4:	443c      	add	r4, r7
 80004d6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004da:	eba4 040c 	sub.w	r4, r4, ip
 80004de:	fba0 ec02 	umull	lr, ip, r0, r2
 80004e2:	4564      	cmp	r4, ip
 80004e4:	4673      	mov	r3, lr
 80004e6:	46e1      	mov	r9, ip
 80004e8:	d362      	bcc.n	80005b0 <__udivmoddi4+0x2a8>
 80004ea:	d05f      	beq.n	80005ac <__udivmoddi4+0x2a4>
 80004ec:	b15d      	cbz	r5, 8000506 <__udivmoddi4+0x1fe>
 80004ee:	ebb8 0203 	subs.w	r2, r8, r3
 80004f2:	eb64 0409 	sbc.w	r4, r4, r9
 80004f6:	fa04 f606 	lsl.w	r6, r4, r6
 80004fa:	fa22 f301 	lsr.w	r3, r2, r1
 80004fe:	431e      	orrs	r6, r3
 8000500:	40cc      	lsrs	r4, r1
 8000502:	e9c5 6400 	strd	r6, r4, [r5]
 8000506:	2100      	movs	r1, #0
 8000508:	e74f      	b.n	80003aa <__udivmoddi4+0xa2>
 800050a:	fbb1 fcf2 	udiv	ip, r1, r2
 800050e:	0c01      	lsrs	r1, r0, #16
 8000510:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000514:	b280      	uxth	r0, r0
 8000516:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800051a:	463b      	mov	r3, r7
 800051c:	4638      	mov	r0, r7
 800051e:	463c      	mov	r4, r7
 8000520:	46b8      	mov	r8, r7
 8000522:	46be      	mov	lr, r7
 8000524:	2620      	movs	r6, #32
 8000526:	fbb1 f1f7 	udiv	r1, r1, r7
 800052a:	eba2 0208 	sub.w	r2, r2, r8
 800052e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000532:	e766      	b.n	8000402 <__udivmoddi4+0xfa>
 8000534:	4601      	mov	r1, r0
 8000536:	e718      	b.n	800036a <__udivmoddi4+0x62>
 8000538:	4610      	mov	r0, r2
 800053a:	e72c      	b.n	8000396 <__udivmoddi4+0x8e>
 800053c:	f1c6 0220 	rsb	r2, r6, #32
 8000540:	fa2e f302 	lsr.w	r3, lr, r2
 8000544:	40b7      	lsls	r7, r6
 8000546:	40b1      	lsls	r1, r6
 8000548:	fa20 f202 	lsr.w	r2, r0, r2
 800054c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000550:	430a      	orrs	r2, r1
 8000552:	fbb3 f8fe 	udiv	r8, r3, lr
 8000556:	b2bc      	uxth	r4, r7
 8000558:	fb0e 3318 	mls	r3, lr, r8, r3
 800055c:	0c11      	lsrs	r1, r2, #16
 800055e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000562:	fb08 f904 	mul.w	r9, r8, r4
 8000566:	40b0      	lsls	r0, r6
 8000568:	4589      	cmp	r9, r1
 800056a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800056e:	b280      	uxth	r0, r0
 8000570:	d93e      	bls.n	80005f0 <__udivmoddi4+0x2e8>
 8000572:	1879      	adds	r1, r7, r1
 8000574:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000578:	d201      	bcs.n	800057e <__udivmoddi4+0x276>
 800057a:	4589      	cmp	r9, r1
 800057c:	d81f      	bhi.n	80005be <__udivmoddi4+0x2b6>
 800057e:	eba1 0109 	sub.w	r1, r1, r9
 8000582:	fbb1 f9fe 	udiv	r9, r1, lr
 8000586:	fb09 f804 	mul.w	r8, r9, r4
 800058a:	fb0e 1119 	mls	r1, lr, r9, r1
 800058e:	b292      	uxth	r2, r2
 8000590:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000594:	4542      	cmp	r2, r8
 8000596:	d229      	bcs.n	80005ec <__udivmoddi4+0x2e4>
 8000598:	18ba      	adds	r2, r7, r2
 800059a:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 800059e:	d2c4      	bcs.n	800052a <__udivmoddi4+0x222>
 80005a0:	4542      	cmp	r2, r8
 80005a2:	d2c2      	bcs.n	800052a <__udivmoddi4+0x222>
 80005a4:	f1a9 0102 	sub.w	r1, r9, #2
 80005a8:	443a      	add	r2, r7
 80005aa:	e7be      	b.n	800052a <__udivmoddi4+0x222>
 80005ac:	45f0      	cmp	r8, lr
 80005ae:	d29d      	bcs.n	80004ec <__udivmoddi4+0x1e4>
 80005b0:	ebbe 0302 	subs.w	r3, lr, r2
 80005b4:	eb6c 0c07 	sbc.w	ip, ip, r7
 80005b8:	3801      	subs	r0, #1
 80005ba:	46e1      	mov	r9, ip
 80005bc:	e796      	b.n	80004ec <__udivmoddi4+0x1e4>
 80005be:	eba7 0909 	sub.w	r9, r7, r9
 80005c2:	4449      	add	r1, r9
 80005c4:	f1a8 0c02 	sub.w	ip, r8, #2
 80005c8:	fbb1 f9fe 	udiv	r9, r1, lr
 80005cc:	fb09 f804 	mul.w	r8, r9, r4
 80005d0:	e7db      	b.n	800058a <__udivmoddi4+0x282>
 80005d2:	4673      	mov	r3, lr
 80005d4:	e77f      	b.n	80004d6 <__udivmoddi4+0x1ce>
 80005d6:	4650      	mov	r0, sl
 80005d8:	e766      	b.n	80004a8 <__udivmoddi4+0x1a0>
 80005da:	4608      	mov	r0, r1
 80005dc:	e6fd      	b.n	80003da <__udivmoddi4+0xd2>
 80005de:	443b      	add	r3, r7
 80005e0:	3a02      	subs	r2, #2
 80005e2:	e733      	b.n	800044c <__udivmoddi4+0x144>
 80005e4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005e8:	443b      	add	r3, r7
 80005ea:	e71c      	b.n	8000426 <__udivmoddi4+0x11e>
 80005ec:	4649      	mov	r1, r9
 80005ee:	e79c      	b.n	800052a <__udivmoddi4+0x222>
 80005f0:	eba1 0109 	sub.w	r1, r1, r9
 80005f4:	46c4      	mov	ip, r8
 80005f6:	fbb1 f9fe 	udiv	r9, r1, lr
 80005fa:	fb09 f804 	mul.w	r8, r9, r4
 80005fe:	e7c4      	b.n	800058a <__udivmoddi4+0x282>

08000600 <__aeabi_idiv0>:
 8000600:	4770      	bx	lr
 8000602:	bf00      	nop

08000604 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000608:	f000 fd56 	bl	80010b8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800060c:	f000 f80c 	bl	8000628 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000610:	f000 f94e 	bl	80008b0 <MX_GPIO_Init>
  MX_QUADSPI_Init();
 8000614:	f000 f882 	bl	800071c <MX_QUADSPI_Init>
  MX_SDMMC2_SD_Init();
 8000618:	f000 f8a8 	bl	800076c <MX_SDMMC2_SD_Init>
  MX_USART1_UART_Init();
 800061c:	f000 f8ca 	bl	80007b4 <MX_USART1_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000620:	f000 f914 	bl	800084c <MX_USB_OTG_FS_PCD_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000624:	bf00      	nop
 8000626:	e7fd      	b.n	8000624 <main+0x20>

08000628 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	b09c      	sub	sp, #112	@ 0x70
 800062c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800062e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000632:	224c      	movs	r2, #76	@ 0x4c
 8000634:	2100      	movs	r1, #0
 8000636:	4618      	mov	r0, r3
 8000638:	f007 fc22 	bl	8007e80 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800063c:	1d3b      	adds	r3, r7, #4
 800063e:	2220      	movs	r2, #32
 8000640:	2100      	movs	r1, #0
 8000642:	4618      	mov	r0, r3
 8000644:	f007 fc1c 	bl	8007e80 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000648:	2002      	movs	r0, #2
 800064a:	f001 f9d3 	bl	80019f4 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 800064e:	2300      	movs	r3, #0
 8000650:	603b      	str	r3, [r7, #0]
 8000652:	4b30      	ldr	r3, [pc, #192]	@ (8000714 <SystemClock_Config+0xec>)
 8000654:	699b      	ldr	r3, [r3, #24]
 8000656:	4a2f      	ldr	r2, [pc, #188]	@ (8000714 <SystemClock_Config+0xec>)
 8000658:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800065c:	6193      	str	r3, [r2, #24]
 800065e:	4b2d      	ldr	r3, [pc, #180]	@ (8000714 <SystemClock_Config+0xec>)
 8000660:	699b      	ldr	r3, [r3, #24]
 8000662:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000666:	603b      	str	r3, [r7, #0]
 8000668:	4b2b      	ldr	r3, [pc, #172]	@ (8000718 <SystemClock_Config+0xf0>)
 800066a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800066c:	4a2a      	ldr	r2, [pc, #168]	@ (8000718 <SystemClock_Config+0xf0>)
 800066e:	f043 0301 	orr.w	r3, r3, #1
 8000672:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8000674:	4b28      	ldr	r3, [pc, #160]	@ (8000718 <SystemClock_Config+0xf0>)
 8000676:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000678:	f003 0301 	and.w	r3, r3, #1
 800067c:	603b      	str	r3, [r7, #0]
 800067e:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000680:	bf00      	nop
 8000682:	4b24      	ldr	r3, [pc, #144]	@ (8000714 <SystemClock_Config+0xec>)
 8000684:	699b      	ldr	r3, [r3, #24]
 8000686:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800068a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800068e:	d1f8      	bne.n	8000682 <SystemClock_Config+0x5a>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000690:	2301      	movs	r3, #1
 8000692:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000694:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000698:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800069a:	2302      	movs	r3, #2
 800069c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800069e:	2302      	movs	r3, #2
 80006a0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 2;
 80006a2:	2302      	movs	r3, #2
 80006a4:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 32;
 80006a6:	2320      	movs	r3, #32
 80006a8:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80006aa:	2302      	movs	r3, #2
 80006ac:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 6;
 80006ae:	2306      	movs	r3, #6
 80006b0:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80006b2:	2302      	movs	r3, #2
 80006b4:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80006b6:	230c      	movs	r3, #12
 80006b8:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80006ba:	2300      	movs	r3, #0
 80006bc:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80006be:	2300      	movs	r3, #0
 80006c0:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006c2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80006c6:	4618      	mov	r0, r3
 80006c8:	f001 fa98 	bl	8001bfc <HAL_RCC_OscConfig>
 80006cc:	4603      	mov	r3, r0
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	d001      	beq.n	80006d6 <SystemClock_Config+0xae>
  {
    Error_Handler();
 80006d2:	f000 f953 	bl	800097c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006d6:	233f      	movs	r3, #63	@ 0x3f
 80006d8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006da:	2303      	movs	r3, #3
 80006dc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80006de:	2300      	movs	r3, #0
 80006e0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80006e2:	2300      	movs	r3, #0
 80006e4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80006e6:	2340      	movs	r3, #64	@ 0x40
 80006e8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80006ea:	2340      	movs	r3, #64	@ 0x40
 80006ec:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80006ee:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80006f2:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80006f4:	2340      	movs	r3, #64	@ 0x40
 80006f6:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80006f8:	1d3b      	adds	r3, r7, #4
 80006fa:	2102      	movs	r1, #2
 80006fc:	4618      	mov	r0, r3
 80006fe:	f001 fe8b 	bl	8002418 <HAL_RCC_ClockConfig>
 8000702:	4603      	mov	r3, r0
 8000704:	2b00      	cmp	r3, #0
 8000706:	d001      	beq.n	800070c <SystemClock_Config+0xe4>
  {
    Error_Handler();
 8000708:	f000 f938 	bl	800097c <Error_Handler>
  }
}
 800070c:	bf00      	nop
 800070e:	3770      	adds	r7, #112	@ 0x70
 8000710:	46bd      	mov	sp, r7
 8000712:	bd80      	pop	{r7, pc}
 8000714:	58024800 	.word	0x58024800
 8000718:	58000400 	.word	0x58000400

0800071c <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 8000720:	4b10      	ldr	r3, [pc, #64]	@ (8000764 <MX_QUADSPI_Init+0x48>)
 8000722:	4a11      	ldr	r2, [pc, #68]	@ (8000768 <MX_QUADSPI_Init+0x4c>)
 8000724:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 255;
 8000726:	4b0f      	ldr	r3, [pc, #60]	@ (8000764 <MX_QUADSPI_Init+0x48>)
 8000728:	22ff      	movs	r2, #255	@ 0xff
 800072a:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 1;
 800072c:	4b0d      	ldr	r3, [pc, #52]	@ (8000764 <MX_QUADSPI_Init+0x48>)
 800072e:	2201      	movs	r2, #1
 8000730:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 8000732:	4b0c      	ldr	r3, [pc, #48]	@ (8000764 <MX_QUADSPI_Init+0x48>)
 8000734:	2200      	movs	r2, #0
 8000736:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 1;
 8000738:	4b0a      	ldr	r3, [pc, #40]	@ (8000764 <MX_QUADSPI_Init+0x48>)
 800073a:	2201      	movs	r2, #1
 800073c:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 800073e:	4b09      	ldr	r3, [pc, #36]	@ (8000764 <MX_QUADSPI_Init+0x48>)
 8000740:	2200      	movs	r2, #0
 8000742:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8000744:	4b07      	ldr	r3, [pc, #28]	@ (8000764 <MX_QUADSPI_Init+0x48>)
 8000746:	2200      	movs	r2, #0
 8000748:	619a      	str	r2, [r3, #24]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_ENABLE;
 800074a:	4b06      	ldr	r3, [pc, #24]	@ (8000764 <MX_QUADSPI_Init+0x48>)
 800074c:	2240      	movs	r2, #64	@ 0x40
 800074e:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8000750:	4804      	ldr	r0, [pc, #16]	@ (8000764 <MX_QUADSPI_Init+0x48>)
 8000752:	f001 f999 	bl	8001a88 <HAL_QSPI_Init>
 8000756:	4603      	mov	r3, r0
 8000758:	2b00      	cmp	r3, #0
 800075a:	d001      	beq.n	8000760 <MX_QUADSPI_Init+0x44>
  {
    Error_Handler();
 800075c:	f000 f90e 	bl	800097c <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 8000760:	bf00      	nop
 8000762:	bd80      	pop	{r7, pc}
 8000764:	2400002c 	.word	0x2400002c
 8000768:	52005000 	.word	0x52005000

0800076c <MX_SDMMC2_SD_Init>:
  * @brief SDMMC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC2_SD_Init(void)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC2_Init 0 */

  /* USER CODE BEGIN SDMMC2_Init 1 */

  /* USER CODE END SDMMC2_Init 1 */
  hsd2.Instance = SDMMC2;
 8000770:	4b0e      	ldr	r3, [pc, #56]	@ (80007ac <MX_SDMMC2_SD_Init+0x40>)
 8000772:	4a0f      	ldr	r2, [pc, #60]	@ (80007b0 <MX_SDMMC2_SD_Init+0x44>)
 8000774:	601a      	str	r2, [r3, #0]
  hsd2.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8000776:	4b0d      	ldr	r3, [pc, #52]	@ (80007ac <MX_SDMMC2_SD_Init+0x40>)
 8000778:	2200      	movs	r2, #0
 800077a:	605a      	str	r2, [r3, #4]
  hsd2.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800077c:	4b0b      	ldr	r3, [pc, #44]	@ (80007ac <MX_SDMMC2_SD_Init+0x40>)
 800077e:	2200      	movs	r2, #0
 8000780:	609a      	str	r2, [r3, #8]
  hsd2.Init.BusWide = SDMMC_BUS_WIDE_4B;
 8000782:	4b0a      	ldr	r3, [pc, #40]	@ (80007ac <MX_SDMMC2_SD_Init+0x40>)
 8000784:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000788:	60da      	str	r2, [r3, #12]
  hsd2.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800078a:	4b08      	ldr	r3, [pc, #32]	@ (80007ac <MX_SDMMC2_SD_Init+0x40>)
 800078c:	2200      	movs	r2, #0
 800078e:	611a      	str	r2, [r3, #16]
  hsd2.Init.ClockDiv = 0;
 8000790:	4b06      	ldr	r3, [pc, #24]	@ (80007ac <MX_SDMMC2_SD_Init+0x40>)
 8000792:	2200      	movs	r2, #0
 8000794:	615a      	str	r2, [r3, #20]
  if (HAL_SD_Init(&hsd2) != HAL_OK)
 8000796:	4805      	ldr	r0, [pc, #20]	@ (80007ac <MX_SDMMC2_SD_Init+0x40>)
 8000798:	f004 fb56 	bl	8004e48 <HAL_SD_Init>
 800079c:	4603      	mov	r3, r0
 800079e:	2b00      	cmp	r3, #0
 80007a0:	d001      	beq.n	80007a6 <MX_SDMMC2_SD_Init+0x3a>
  {
    Error_Handler();
 80007a2:	f000 f8eb 	bl	800097c <Error_Handler>
  }
  /* USER CODE BEGIN SDMMC2_Init 2 */

  /* USER CODE END SDMMC2_Init 2 */

}
 80007a6:	bf00      	nop
 80007a8:	bd80      	pop	{r7, pc}
 80007aa:	bf00      	nop
 80007ac:	24000078 	.word	0x24000078
 80007b0:	48022400 	.word	0x48022400

080007b4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80007b8:	4b22      	ldr	r3, [pc, #136]	@ (8000844 <MX_USART1_UART_Init+0x90>)
 80007ba:	4a23      	ldr	r2, [pc, #140]	@ (8000848 <MX_USART1_UART_Init+0x94>)
 80007bc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80007be:	4b21      	ldr	r3, [pc, #132]	@ (8000844 <MX_USART1_UART_Init+0x90>)
 80007c0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80007c4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80007c6:	4b1f      	ldr	r3, [pc, #124]	@ (8000844 <MX_USART1_UART_Init+0x90>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80007cc:	4b1d      	ldr	r3, [pc, #116]	@ (8000844 <MX_USART1_UART_Init+0x90>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80007d2:	4b1c      	ldr	r3, [pc, #112]	@ (8000844 <MX_USART1_UART_Init+0x90>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80007d8:	4b1a      	ldr	r3, [pc, #104]	@ (8000844 <MX_USART1_UART_Init+0x90>)
 80007da:	220c      	movs	r2, #12
 80007dc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007de:	4b19      	ldr	r3, [pc, #100]	@ (8000844 <MX_USART1_UART_Init+0x90>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80007e4:	4b17      	ldr	r3, [pc, #92]	@ (8000844 <MX_USART1_UART_Init+0x90>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007ea:	4b16      	ldr	r3, [pc, #88]	@ (8000844 <MX_USART1_UART_Init+0x90>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80007f0:	4b14      	ldr	r3, [pc, #80]	@ (8000844 <MX_USART1_UART_Init+0x90>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007f6:	4b13      	ldr	r3, [pc, #76]	@ (8000844 <MX_USART1_UART_Init+0x90>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80007fc:	4811      	ldr	r0, [pc, #68]	@ (8000844 <MX_USART1_UART_Init+0x90>)
 80007fe:	f005 fb69 	bl	8005ed4 <HAL_UART_Init>
 8000802:	4603      	mov	r3, r0
 8000804:	2b00      	cmp	r3, #0
 8000806:	d001      	beq.n	800080c <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000808:	f000 f8b8 	bl	800097c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800080c:	2100      	movs	r1, #0
 800080e:	480d      	ldr	r0, [pc, #52]	@ (8000844 <MX_USART1_UART_Init+0x90>)
 8000810:	f006 fac0 	bl	8006d94 <HAL_UARTEx_SetTxFifoThreshold>
 8000814:	4603      	mov	r3, r0
 8000816:	2b00      	cmp	r3, #0
 8000818:	d001      	beq.n	800081e <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 800081a:	f000 f8af 	bl	800097c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800081e:	2100      	movs	r1, #0
 8000820:	4808      	ldr	r0, [pc, #32]	@ (8000844 <MX_USART1_UART_Init+0x90>)
 8000822:	f006 faf5 	bl	8006e10 <HAL_UARTEx_SetRxFifoThreshold>
 8000826:	4603      	mov	r3, r0
 8000828:	2b00      	cmp	r3, #0
 800082a:	d001      	beq.n	8000830 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 800082c:	f000 f8a6 	bl	800097c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000830:	4804      	ldr	r0, [pc, #16]	@ (8000844 <MX_USART1_UART_Init+0x90>)
 8000832:	f006 fa76 	bl	8006d22 <HAL_UARTEx_DisableFifoMode>
 8000836:	4603      	mov	r3, r0
 8000838:	2b00      	cmp	r3, #0
 800083a:	d001      	beq.n	8000840 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 800083c:	f000 f89e 	bl	800097c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000840:	bf00      	nop
 8000842:	bd80      	pop	{r7, pc}
 8000844:	240000f4 	.word	0x240000f4
 8000848:	40011000 	.word	0x40011000

0800084c <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000850:	4b15      	ldr	r3, [pc, #84]	@ (80008a8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000852:	4a16      	ldr	r2, [pc, #88]	@ (80008ac <MX_USB_OTG_FS_PCD_Init+0x60>)
 8000854:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8000856:	4b14      	ldr	r3, [pc, #80]	@ (80008a8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000858:	2209      	movs	r2, #9
 800085a:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800085c:	4b12      	ldr	r3, [pc, #72]	@ (80008a8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800085e:	2202      	movs	r2, #2
 8000860:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000862:	4b11      	ldr	r3, [pc, #68]	@ (80008a8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000864:	2200      	movs	r2, #0
 8000866:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000868:	4b0f      	ldr	r3, [pc, #60]	@ (80008a8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800086a:	2202      	movs	r2, #2
 800086c:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800086e:	4b0e      	ldr	r3, [pc, #56]	@ (80008a8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000870:	2200      	movs	r2, #0
 8000872:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000874:	4b0c      	ldr	r3, [pc, #48]	@ (80008a8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000876:	2200      	movs	r2, #0
 8000878:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800087a:	4b0b      	ldr	r3, [pc, #44]	@ (80008a8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800087c:	2200      	movs	r2, #0
 800087e:	625a      	str	r2, [r3, #36]	@ 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8000880:	4b09      	ldr	r3, [pc, #36]	@ (80008a8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000882:	2200      	movs	r2, #0
 8000884:	629a      	str	r2, [r3, #40]	@ 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8000886:	4b08      	ldr	r3, [pc, #32]	@ (80008a8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000888:	2200      	movs	r2, #0
 800088a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800088c:	4b06      	ldr	r3, [pc, #24]	@ (80008a8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800088e:	2200      	movs	r2, #0
 8000890:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000892:	4805      	ldr	r0, [pc, #20]	@ (80008a8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000894:	f000 ff66 	bl	8001764 <HAL_PCD_Init>
 8000898:	4603      	mov	r3, r0
 800089a:	2b00      	cmp	r3, #0
 800089c:	d001      	beq.n	80008a2 <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 800089e:	f000 f86d 	bl	800097c <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80008a2:	bf00      	nop
 80008a4:	bd80      	pop	{r7, pc}
 80008a6:	bf00      	nop
 80008a8:	24000184 	.word	0x24000184
 80008ac:	40080000 	.word	0x40080000

080008b0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008b0:	b480      	push	{r7}
 80008b2:	b087      	sub	sp, #28
 80008b4:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80008b6:	4b30      	ldr	r3, [pc, #192]	@ (8000978 <MX_GPIO_Init+0xc8>)
 80008b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80008bc:	4a2e      	ldr	r2, [pc, #184]	@ (8000978 <MX_GPIO_Init+0xc8>)
 80008be:	f043 0310 	orr.w	r3, r3, #16
 80008c2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80008c6:	4b2c      	ldr	r3, [pc, #176]	@ (8000978 <MX_GPIO_Init+0xc8>)
 80008c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80008cc:	f003 0310 	and.w	r3, r3, #16
 80008d0:	617b      	str	r3, [r7, #20]
 80008d2:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008d4:	4b28      	ldr	r3, [pc, #160]	@ (8000978 <MX_GPIO_Init+0xc8>)
 80008d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80008da:	4a27      	ldr	r2, [pc, #156]	@ (8000978 <MX_GPIO_Init+0xc8>)
 80008dc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80008e0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80008e4:	4b24      	ldr	r3, [pc, #144]	@ (8000978 <MX_GPIO_Init+0xc8>)
 80008e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80008ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80008ee:	613b      	str	r3, [r7, #16]
 80008f0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008f2:	4b21      	ldr	r3, [pc, #132]	@ (8000978 <MX_GPIO_Init+0xc8>)
 80008f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80008f8:	4a1f      	ldr	r2, [pc, #124]	@ (8000978 <MX_GPIO_Init+0xc8>)
 80008fa:	f043 0304 	orr.w	r3, r3, #4
 80008fe:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000902:	4b1d      	ldr	r3, [pc, #116]	@ (8000978 <MX_GPIO_Init+0xc8>)
 8000904:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000908:	f003 0304 	and.w	r3, r3, #4
 800090c:	60fb      	str	r3, [r7, #12]
 800090e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000910:	4b19      	ldr	r3, [pc, #100]	@ (8000978 <MX_GPIO_Init+0xc8>)
 8000912:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000916:	4a18      	ldr	r2, [pc, #96]	@ (8000978 <MX_GPIO_Init+0xc8>)
 8000918:	f043 0301 	orr.w	r3, r3, #1
 800091c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000920:	4b15      	ldr	r3, [pc, #84]	@ (8000978 <MX_GPIO_Init+0xc8>)
 8000922:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000926:	f003 0301 	and.w	r3, r3, #1
 800092a:	60bb      	str	r3, [r7, #8]
 800092c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800092e:	4b12      	ldr	r3, [pc, #72]	@ (8000978 <MX_GPIO_Init+0xc8>)
 8000930:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000934:	4a10      	ldr	r2, [pc, #64]	@ (8000978 <MX_GPIO_Init+0xc8>)
 8000936:	f043 0302 	orr.w	r3, r3, #2
 800093a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800093e:	4b0e      	ldr	r3, [pc, #56]	@ (8000978 <MX_GPIO_Init+0xc8>)
 8000940:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000944:	f003 0302 	and.w	r3, r3, #2
 8000948:	607b      	str	r3, [r7, #4]
 800094a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800094c:	4b0a      	ldr	r3, [pc, #40]	@ (8000978 <MX_GPIO_Init+0xc8>)
 800094e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000952:	4a09      	ldr	r2, [pc, #36]	@ (8000978 <MX_GPIO_Init+0xc8>)
 8000954:	f043 0308 	orr.w	r3, r3, #8
 8000958:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800095c:	4b06      	ldr	r3, [pc, #24]	@ (8000978 <MX_GPIO_Init+0xc8>)
 800095e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000962:	f003 0308 	and.w	r3, r3, #8
 8000966:	603b      	str	r3, [r7, #0]
 8000968:	683b      	ldr	r3, [r7, #0]

}
 800096a:	bf00      	nop
 800096c:	371c      	adds	r7, #28
 800096e:	46bd      	mov	sp, r7
 8000970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop
 8000978:	58024400 	.word	0x58024400

0800097c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800097c:	b480      	push	{r7}
 800097e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000980:	b672      	cpsid	i
}
 8000982:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000984:	bf00      	nop
 8000986:	e7fd      	b.n	8000984 <Error_Handler+0x8>

08000988 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000988:	b480      	push	{r7}
 800098a:	b083      	sub	sp, #12
 800098c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800098e:	4b0a      	ldr	r3, [pc, #40]	@ (80009b8 <HAL_MspInit+0x30>)
 8000990:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000994:	4a08      	ldr	r2, [pc, #32]	@ (80009b8 <HAL_MspInit+0x30>)
 8000996:	f043 0302 	orr.w	r3, r3, #2
 800099a:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800099e:	4b06      	ldr	r3, [pc, #24]	@ (80009b8 <HAL_MspInit+0x30>)
 80009a0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80009a4:	f003 0302 	and.w	r3, r3, #2
 80009a8:	607b      	str	r3, [r7, #4]
 80009aa:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009ac:	bf00      	nop
 80009ae:	370c      	adds	r7, #12
 80009b0:	46bd      	mov	sp, r7
 80009b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b6:	4770      	bx	lr
 80009b8:	58024400 	.word	0x58024400

080009bc <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	b0bc      	sub	sp, #240	@ 0xf0
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009c4:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80009c8:	2200      	movs	r2, #0
 80009ca:	601a      	str	r2, [r3, #0]
 80009cc:	605a      	str	r2, [r3, #4]
 80009ce:	609a      	str	r2, [r3, #8]
 80009d0:	60da      	str	r2, [r3, #12]
 80009d2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80009d4:	f107 0320 	add.w	r3, r7, #32
 80009d8:	22bc      	movs	r2, #188	@ 0xbc
 80009da:	2100      	movs	r1, #0
 80009dc:	4618      	mov	r0, r3
 80009de:	f007 fa4f 	bl	8007e80 <memset>
  if(hqspi->Instance==QUADSPI)
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	681b      	ldr	r3, [r3, #0]
 80009e6:	4a79      	ldr	r2, [pc, #484]	@ (8000bcc <HAL_QSPI_MspInit+0x210>)
 80009e8:	4293      	cmp	r3, r2
 80009ea:	f040 80eb 	bne.w	8000bc4 <HAL_QSPI_MspInit+0x208>
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_QSPI;
 80009ee:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80009f2:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.QspiClockSelection = RCC_QSPICLKSOURCE_D1HCLK;
 80009f4:	2300      	movs	r3, #0
 80009f6:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80009f8:	f107 0320 	add.w	r3, r7, #32
 80009fc:	4618      	mov	r0, r3
 80009fe:	f002 f897 	bl	8002b30 <HAL_RCCEx_PeriphCLKConfig>
 8000a02:	4603      	mov	r3, r0
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	d001      	beq.n	8000a0c <HAL_QSPI_MspInit+0x50>
    {
      Error_Handler();
 8000a08:	f7ff ffb8 	bl	800097c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8000a0c:	4b70      	ldr	r3, [pc, #448]	@ (8000bd0 <HAL_QSPI_MspInit+0x214>)
 8000a0e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000a12:	4a6f      	ldr	r2, [pc, #444]	@ (8000bd0 <HAL_QSPI_MspInit+0x214>)
 8000a14:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000a18:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 8000a1c:	4b6c      	ldr	r3, [pc, #432]	@ (8000bd0 <HAL_QSPI_MspInit+0x214>)
 8000a1e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000a22:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000a26:	61fb      	str	r3, [r7, #28]
 8000a28:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000a2a:	4b69      	ldr	r3, [pc, #420]	@ (8000bd0 <HAL_QSPI_MspInit+0x214>)
 8000a2c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a30:	4a67      	ldr	r2, [pc, #412]	@ (8000bd0 <HAL_QSPI_MspInit+0x214>)
 8000a32:	f043 0310 	orr.w	r3, r3, #16
 8000a36:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000a3a:	4b65      	ldr	r3, [pc, #404]	@ (8000bd0 <HAL_QSPI_MspInit+0x214>)
 8000a3c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a40:	f003 0310 	and.w	r3, r3, #16
 8000a44:	61bb      	str	r3, [r7, #24]
 8000a46:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a48:	4b61      	ldr	r3, [pc, #388]	@ (8000bd0 <HAL_QSPI_MspInit+0x214>)
 8000a4a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a4e:	4a60      	ldr	r2, [pc, #384]	@ (8000bd0 <HAL_QSPI_MspInit+0x214>)
 8000a50:	f043 0301 	orr.w	r3, r3, #1
 8000a54:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000a58:	4b5d      	ldr	r3, [pc, #372]	@ (8000bd0 <HAL_QSPI_MspInit+0x214>)
 8000a5a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a5e:	f003 0301 	and.w	r3, r3, #1
 8000a62:	617b      	str	r3, [r7, #20]
 8000a64:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a66:	4b5a      	ldr	r3, [pc, #360]	@ (8000bd0 <HAL_QSPI_MspInit+0x214>)
 8000a68:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a6c:	4a58      	ldr	r2, [pc, #352]	@ (8000bd0 <HAL_QSPI_MspInit+0x214>)
 8000a6e:	f043 0302 	orr.w	r3, r3, #2
 8000a72:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000a76:	4b56      	ldr	r3, [pc, #344]	@ (8000bd0 <HAL_QSPI_MspInit+0x214>)
 8000a78:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a7c:	f003 0302 	and.w	r3, r3, #2
 8000a80:	613b      	str	r3, [r7, #16]
 8000a82:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a84:	4b52      	ldr	r3, [pc, #328]	@ (8000bd0 <HAL_QSPI_MspInit+0x214>)
 8000a86:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a8a:	4a51      	ldr	r2, [pc, #324]	@ (8000bd0 <HAL_QSPI_MspInit+0x214>)
 8000a8c:	f043 0308 	orr.w	r3, r3, #8
 8000a90:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000a94:	4b4e      	ldr	r3, [pc, #312]	@ (8000bd0 <HAL_QSPI_MspInit+0x214>)
 8000a96:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a9a:	f003 0308 	and.w	r3, r3, #8
 8000a9e:	60fb      	str	r3, [r7, #12]
 8000aa0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000aa2:	4b4b      	ldr	r3, [pc, #300]	@ (8000bd0 <HAL_QSPI_MspInit+0x214>)
 8000aa4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000aa8:	4a49      	ldr	r2, [pc, #292]	@ (8000bd0 <HAL_QSPI_MspInit+0x214>)
 8000aaa:	f043 0304 	orr.w	r3, r3, #4
 8000aae:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000ab2:	4b47      	ldr	r3, [pc, #284]	@ (8000bd0 <HAL_QSPI_MspInit+0x214>)
 8000ab4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ab8:	f003 0304 	and.w	r3, r3, #4
 8000abc:	60bb      	str	r3, [r7, #8]
 8000abe:	68bb      	ldr	r3, [r7, #8]
    PB10     ------> QUADSPI_BK1_NCS
    PD11     ------> QUADSPI_BK1_IO0
    PD12     ------> QUADSPI_BK1_IO1
    PC11     ------> QUADSPI_BK2_NCS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000ac0:	2304      	movs	r3, #4
 8000ac2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ac6:	2302      	movs	r3, #2
 8000ac8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000acc:	2300      	movs	r3, #0
 8000ace:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8000ad8:	2309      	movs	r3, #9
 8000ada:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000ade:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8000ae2:	4619      	mov	r1, r3
 8000ae4:	483b      	ldr	r0, [pc, #236]	@ (8000bd4 <HAL_QSPI_MspInit+0x218>)
 8000ae6:	f000 fc8d 	bl	8001404 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000aea:	2302      	movs	r3, #2
 8000aec:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000af0:	2302      	movs	r3, #2
 8000af2:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af6:	2300      	movs	r3, #0
 8000af8:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000afc:	2300      	movs	r3, #0
 8000afe:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8000b02:	2309      	movs	r3, #9
 8000b04:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b08:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8000b0c:	4619      	mov	r1, r3
 8000b0e:	4832      	ldr	r0, [pc, #200]	@ (8000bd8 <HAL_QSPI_MspInit+0x21c>)
 8000b10:	f000 fc78 	bl	8001404 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_10;
 8000b14:	f240 4304 	movw	r3, #1028	@ 0x404
 8000b18:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b1c:	2302      	movs	r3, #2
 8000b1e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b22:	2300      	movs	r3, #0
 8000b24:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b28:	2300      	movs	r3, #0
 8000b2a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8000b2e:	2309      	movs	r3, #9
 8000b30:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b34:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8000b38:	4619      	mov	r1, r3
 8000b3a:	4828      	ldr	r0, [pc, #160]	@ (8000bdc <HAL_QSPI_MspInit+0x220>)
 8000b3c:	f000 fc62 	bl	8001404 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8000b40:	f44f 63f0 	mov.w	r3, #1920	@ 0x780
 8000b44:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b48:	2302      	movs	r3, #2
 8000b4a:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b4e:	2300      	movs	r3, #0
 8000b50:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b54:	2300      	movs	r3, #0
 8000b56:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8000b5a:	230a      	movs	r3, #10
 8000b5c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000b60:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8000b64:	4619      	mov	r1, r3
 8000b66:	481b      	ldr	r0, [pc, #108]	@ (8000bd4 <HAL_QSPI_MspInit+0x218>)
 8000b68:	f000 fc4c 	bl	8001404 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000b6c:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8000b70:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b74:	2302      	movs	r3, #2
 8000b76:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b80:	2300      	movs	r3, #0
 8000b82:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8000b86:	2309      	movs	r3, #9
 8000b88:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b8c:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8000b90:	4619      	mov	r1, r3
 8000b92:	4813      	ldr	r0, [pc, #76]	@ (8000be0 <HAL_QSPI_MspInit+0x224>)
 8000b94:	f000 fc36 	bl	8001404 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000b98:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000b9c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ba0:	2302      	movs	r3, #2
 8000ba2:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bac:	2300      	movs	r3, #0
 8000bae:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8000bb2:	2309      	movs	r3, #9
 8000bb4:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000bb8:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8000bbc:	4619      	mov	r1, r3
 8000bbe:	4809      	ldr	r0, [pc, #36]	@ (8000be4 <HAL_QSPI_MspInit+0x228>)
 8000bc0:	f000 fc20 	bl	8001404 <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 8000bc4:	bf00      	nop
 8000bc6:	37f0      	adds	r7, #240	@ 0xf0
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	bd80      	pop	{r7, pc}
 8000bcc:	52005000 	.word	0x52005000
 8000bd0:	58024400 	.word	0x58024400
 8000bd4:	58021000 	.word	0x58021000
 8000bd8:	58020000 	.word	0x58020000
 8000bdc:	58020400 	.word	0x58020400
 8000be0:	58020c00 	.word	0x58020c00
 8000be4:	58020800 	.word	0x58020800

08000be8 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b0ba      	sub	sp, #232	@ 0xe8
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bf0:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	601a      	str	r2, [r3, #0]
 8000bf8:	605a      	str	r2, [r3, #4]
 8000bfa:	609a      	str	r2, [r3, #8]
 8000bfc:	60da      	str	r2, [r3, #12]
 8000bfe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000c00:	f107 0318 	add.w	r3, r7, #24
 8000c04:	22bc      	movs	r2, #188	@ 0xbc
 8000c06:	2100      	movs	r1, #0
 8000c08:	4618      	mov	r0, r3
 8000c0a:	f007 f939 	bl	8007e80 <memset>
  if(hsd->Instance==SDMMC2)
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	4a49      	ldr	r2, [pc, #292]	@ (8000d38 <HAL_SD_MspInit+0x150>)
 8000c14:	4293      	cmp	r3, r2
 8000c16:	f040 808b 	bne.w	8000d30 <HAL_SD_MspInit+0x148>
  /* USER CODE BEGIN SDMMC2_MspInit 0 */

  /* USER CODE END SDMMC2_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC;
 8000c1a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000c1e:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL;
 8000c20:	2300      	movs	r3, #0
 8000c22:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000c24:	f107 0318 	add.w	r3, r7, #24
 8000c28:	4618      	mov	r0, r3
 8000c2a:	f001 ff81 	bl	8002b30 <HAL_RCCEx_PeriphCLKConfig>
 8000c2e:	4603      	mov	r3, r0
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d001      	beq.n	8000c38 <HAL_SD_MspInit+0x50>
    {
      Error_Handler();
 8000c34:	f7ff fea2 	bl	800097c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDMMC2_CLK_ENABLE();
 8000c38:	4b40      	ldr	r3, [pc, #256]	@ (8000d3c <HAL_SD_MspInit+0x154>)
 8000c3a:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8000c3e:	4a3f      	ldr	r2, [pc, #252]	@ (8000d3c <HAL_SD_MspInit+0x154>)
 8000c40:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000c44:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8000c48:	4b3c      	ldr	r3, [pc, #240]	@ (8000d3c <HAL_SD_MspInit+0x154>)
 8000c4a:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8000c4e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000c52:	617b      	str	r3, [r7, #20]
 8000c54:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c56:	4b39      	ldr	r3, [pc, #228]	@ (8000d3c <HAL_SD_MspInit+0x154>)
 8000c58:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c5c:	4a37      	ldr	r2, [pc, #220]	@ (8000d3c <HAL_SD_MspInit+0x154>)
 8000c5e:	f043 0304 	orr.w	r3, r3, #4
 8000c62:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000c66:	4b35      	ldr	r3, [pc, #212]	@ (8000d3c <HAL_SD_MspInit+0x154>)
 8000c68:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c6c:	f003 0304 	and.w	r3, r3, #4
 8000c70:	613b      	str	r3, [r7, #16]
 8000c72:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c74:	4b31      	ldr	r3, [pc, #196]	@ (8000d3c <HAL_SD_MspInit+0x154>)
 8000c76:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c7a:	4a30      	ldr	r2, [pc, #192]	@ (8000d3c <HAL_SD_MspInit+0x154>)
 8000c7c:	f043 0301 	orr.w	r3, r3, #1
 8000c80:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000c84:	4b2d      	ldr	r3, [pc, #180]	@ (8000d3c <HAL_SD_MspInit+0x154>)
 8000c86:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c8a:	f003 0301 	and.w	r3, r3, #1
 8000c8e:	60fb      	str	r3, [r7, #12]
 8000c90:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c92:	4b2a      	ldr	r3, [pc, #168]	@ (8000d3c <HAL_SD_MspInit+0x154>)
 8000c94:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c98:	4a28      	ldr	r2, [pc, #160]	@ (8000d3c <HAL_SD_MspInit+0x154>)
 8000c9a:	f043 0302 	orr.w	r3, r3, #2
 8000c9e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000ca2:	4b26      	ldr	r3, [pc, #152]	@ (8000d3c <HAL_SD_MspInit+0x154>)
 8000ca4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ca8:	f003 0302 	and.w	r3, r3, #2
 8000cac:	60bb      	str	r3, [r7, #8]
 8000cae:	68bb      	ldr	r3, [r7, #8]
    PB14     ------> SDMMC2_D0
    PB15     ------> SDMMC2_D1
    PB3 (JTDO/TRACESWO)     ------> SDMMC2_D2
    PB4 (NJTRST)     ------> SDMMC2_D3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000cb0:	2302      	movs	r3, #2
 8000cb2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cb6:	2302      	movs	r3, #2
 8000cb8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cc2:	2303      	movs	r3, #3
 8000cc4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF9_SDIO2;
 8000cc8:	2309      	movs	r3, #9
 8000cca:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000cce:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000cd2:	4619      	mov	r1, r3
 8000cd4:	481a      	ldr	r0, [pc, #104]	@ (8000d40 <HAL_SD_MspInit+0x158>)
 8000cd6:	f000 fb95 	bl	8001404 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000cda:	2301      	movs	r3, #1
 8000cdc:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ce0:	2302      	movs	r3, #2
 8000ce2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cec:	2303      	movs	r3, #3
 8000cee:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF9_SDIO2;
 8000cf2:	2309      	movs	r3, #9
 8000cf4:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cf8:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000cfc:	4619      	mov	r1, r3
 8000cfe:	4811      	ldr	r0, [pc, #68]	@ (8000d44 <HAL_SD_MspInit+0x15c>)
 8000d00:	f000 fb80 	bl	8001404 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_3|GPIO_PIN_4;
 8000d04:	f24c 0318 	movw	r3, #49176	@ 0xc018
 8000d08:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d0c:	2302      	movs	r3, #2
 8000d0e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d12:	2300      	movs	r3, #0
 8000d14:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d18:	2303      	movs	r3, #3
 8000d1a:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF9_SDIO2;
 8000d1e:	2309      	movs	r3, #9
 8000d20:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d24:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000d28:	4619      	mov	r1, r3
 8000d2a:	4807      	ldr	r0, [pc, #28]	@ (8000d48 <HAL_SD_MspInit+0x160>)
 8000d2c:	f000 fb6a 	bl	8001404 <HAL_GPIO_Init>
  /* USER CODE BEGIN SDMMC2_MspInit 1 */

  /* USER CODE END SDMMC2_MspInit 1 */
  }

}
 8000d30:	bf00      	nop
 8000d32:	37e8      	adds	r7, #232	@ 0xe8
 8000d34:	46bd      	mov	sp, r7
 8000d36:	bd80      	pop	{r7, pc}
 8000d38:	48022400 	.word	0x48022400
 8000d3c:	58024400 	.word	0x58024400
 8000d40:	58020800 	.word	0x58020800
 8000d44:	58020000 	.word	0x58020000
 8000d48:	58020400 	.word	0x58020400

08000d4c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b0b8      	sub	sp, #224	@ 0xe0
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d54:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8000d58:	2200      	movs	r2, #0
 8000d5a:	601a      	str	r2, [r3, #0]
 8000d5c:	605a      	str	r2, [r3, #4]
 8000d5e:	609a      	str	r2, [r3, #8]
 8000d60:	60da      	str	r2, [r3, #12]
 8000d62:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d64:	f107 0310 	add.w	r3, r7, #16
 8000d68:	22bc      	movs	r2, #188	@ 0xbc
 8000d6a:	2100      	movs	r1, #0
 8000d6c:	4618      	mov	r0, r3
 8000d6e:	f007 f887 	bl	8007e80 <memset>
  if(huart->Instance==USART1)
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	4a25      	ldr	r2, [pc, #148]	@ (8000e0c <HAL_UART_MspInit+0xc0>)
 8000d78:	4293      	cmp	r3, r2
 8000d7a:	d142      	bne.n	8000e02 <HAL_UART_MspInit+0xb6>
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000d7c:	2301      	movs	r3, #1
 8000d7e:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 8000d80:	2300      	movs	r3, #0
 8000d82:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d86:	f107 0310 	add.w	r3, r7, #16
 8000d8a:	4618      	mov	r0, r3
 8000d8c:	f001 fed0 	bl	8002b30 <HAL_RCCEx_PeriphCLKConfig>
 8000d90:	4603      	mov	r3, r0
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d001      	beq.n	8000d9a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000d96:	f7ff fdf1 	bl	800097c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000d9a:	4b1d      	ldr	r3, [pc, #116]	@ (8000e10 <HAL_UART_MspInit+0xc4>)
 8000d9c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8000da0:	4a1b      	ldr	r2, [pc, #108]	@ (8000e10 <HAL_UART_MspInit+0xc4>)
 8000da2:	f043 0310 	orr.w	r3, r3, #16
 8000da6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8000daa:	4b19      	ldr	r3, [pc, #100]	@ (8000e10 <HAL_UART_MspInit+0xc4>)
 8000dac:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8000db0:	f003 0310 	and.w	r3, r3, #16
 8000db4:	60fb      	str	r3, [r7, #12]
 8000db6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000db8:	4b15      	ldr	r3, [pc, #84]	@ (8000e10 <HAL_UART_MspInit+0xc4>)
 8000dba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000dbe:	4a14      	ldr	r2, [pc, #80]	@ (8000e10 <HAL_UART_MspInit+0xc4>)
 8000dc0:	f043 0301 	orr.w	r3, r3, #1
 8000dc4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000dc8:	4b11      	ldr	r3, [pc, #68]	@ (8000e10 <HAL_UART_MspInit+0xc4>)
 8000dca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000dce:	f003 0301 	and.w	r3, r3, #1
 8000dd2:	60bb      	str	r3, [r7, #8]
 8000dd4:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000dd6:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000dda:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dde:	2302      	movs	r3, #2
 8000de0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000de4:	2300      	movs	r3, #0
 8000de6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dea:	2300      	movs	r3, #0
 8000dec:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000df0:	2307      	movs	r3, #7
 8000df2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000df6:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8000dfa:	4619      	mov	r1, r3
 8000dfc:	4805      	ldr	r0, [pc, #20]	@ (8000e14 <HAL_UART_MspInit+0xc8>)
 8000dfe:	f000 fb01 	bl	8001404 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000e02:	bf00      	nop
 8000e04:	37e0      	adds	r7, #224	@ 0xe0
 8000e06:	46bd      	mov	sp, r7
 8000e08:	bd80      	pop	{r7, pc}
 8000e0a:	bf00      	nop
 8000e0c:	40011000 	.word	0x40011000
 8000e10:	58024400 	.word	0x58024400
 8000e14:	58020000 	.word	0x58020000

08000e18 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b0b8      	sub	sp, #224	@ 0xe0
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e20:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8000e24:	2200      	movs	r2, #0
 8000e26:	601a      	str	r2, [r3, #0]
 8000e28:	605a      	str	r2, [r3, #4]
 8000e2a:	609a      	str	r2, [r3, #8]
 8000e2c:	60da      	str	r2, [r3, #12]
 8000e2e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000e30:	f107 0310 	add.w	r3, r7, #16
 8000e34:	22bc      	movs	r2, #188	@ 0xbc
 8000e36:	2100      	movs	r1, #0
 8000e38:	4618      	mov	r0, r3
 8000e3a:	f007 f821 	bl	8007e80 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	4a27      	ldr	r2, [pc, #156]	@ (8000ee0 <HAL_PCD_MspInit+0xc8>)
 8000e44:	4293      	cmp	r3, r2
 8000e46:	d146      	bne.n	8000ed6 <HAL_PCD_MspInit+0xbe>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000e48:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8000e4c:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8000e4e:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8000e52:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e56:	f107 0310 	add.w	r3, r7, #16
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	f001 fe68 	bl	8002b30 <HAL_RCCEx_PeriphCLKConfig>
 8000e60:	4603      	mov	r3, r0
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d001      	beq.n	8000e6a <HAL_PCD_MspInit+0x52>
    {
      Error_Handler();
 8000e66:	f7ff fd89 	bl	800097c <Error_Handler>
    }
  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8000e6a:	f000 fdfd 	bl	8001a68 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e6e:	4b1d      	ldr	r3, [pc, #116]	@ (8000ee4 <HAL_PCD_MspInit+0xcc>)
 8000e70:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e74:	4a1b      	ldr	r2, [pc, #108]	@ (8000ee4 <HAL_PCD_MspInit+0xcc>)
 8000e76:	f043 0301 	orr.w	r3, r3, #1
 8000e7a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000e7e:	4b19      	ldr	r3, [pc, #100]	@ (8000ee4 <HAL_PCD_MspInit+0xcc>)
 8000e80:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e84:	f003 0301 	and.w	r3, r3, #1
 8000e88:	60fb      	str	r3, [r7, #12]
 8000e8a:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000e8c:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8000e90:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e94:	2302      	movs	r3, #2
 8000e96:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8000ea6:	230a      	movs	r3, #10
 8000ea8:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000eac:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8000eb0:	4619      	mov	r1, r3
 8000eb2:	480d      	ldr	r0, [pc, #52]	@ (8000ee8 <HAL_PCD_MspInit+0xd0>)
 8000eb4:	f000 faa6 	bl	8001404 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000eb8:	4b0a      	ldr	r3, [pc, #40]	@ (8000ee4 <HAL_PCD_MspInit+0xcc>)
 8000eba:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000ebe:	4a09      	ldr	r2, [pc, #36]	@ (8000ee4 <HAL_PCD_MspInit+0xcc>)
 8000ec0:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8000ec4:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000ec8:	4b06      	ldr	r3, [pc, #24]	@ (8000ee4 <HAL_PCD_MspInit+0xcc>)
 8000eca:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000ece:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8000ed2:	60bb      	str	r3, [r7, #8]
 8000ed4:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8000ed6:	bf00      	nop
 8000ed8:	37e0      	adds	r7, #224	@ 0xe0
 8000eda:	46bd      	mov	sp, r7
 8000edc:	bd80      	pop	{r7, pc}
 8000ede:	bf00      	nop
 8000ee0:	40080000 	.word	0x40080000
 8000ee4:	58024400 	.word	0x58024400
 8000ee8:	58020000 	.word	0x58020000

08000eec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000eec:	b480      	push	{r7}
 8000eee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ef0:	bf00      	nop
 8000ef2:	e7fd      	b.n	8000ef0 <NMI_Handler+0x4>

08000ef4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ef4:	b480      	push	{r7}
 8000ef6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ef8:	bf00      	nop
 8000efa:	e7fd      	b.n	8000ef8 <HardFault_Handler+0x4>

08000efc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000efc:	b480      	push	{r7}
 8000efe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f00:	bf00      	nop
 8000f02:	e7fd      	b.n	8000f00 <MemManage_Handler+0x4>

08000f04 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f04:	b480      	push	{r7}
 8000f06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f08:	bf00      	nop
 8000f0a:	e7fd      	b.n	8000f08 <BusFault_Handler+0x4>

08000f0c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f10:	bf00      	nop
 8000f12:	e7fd      	b.n	8000f10 <UsageFault_Handler+0x4>

08000f14 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f14:	b480      	push	{r7}
 8000f16:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f18:	bf00      	nop
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f20:	4770      	bx	lr

08000f22 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f22:	b480      	push	{r7}
 8000f24:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f26:	bf00      	nop
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2e:	4770      	bx	lr

08000f30 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f30:	b480      	push	{r7}
 8000f32:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f34:	bf00      	nop
 8000f36:	46bd      	mov	sp, r7
 8000f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3c:	4770      	bx	lr

08000f3e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f3e:	b580      	push	{r7, lr}
 8000f40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f42:	f000 f92b 	bl	800119c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f46:	bf00      	nop
 8000f48:	bd80      	pop	{r7, pc}
	...

08000f4c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000f50:	4b39      	ldr	r3, [pc, #228]	@ (8001038 <SystemInit+0xec>)
 8000f52:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000f56:	4a38      	ldr	r2, [pc, #224]	@ (8001038 <SystemInit+0xec>)
 8000f58:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000f5c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000f60:	4b36      	ldr	r3, [pc, #216]	@ (800103c <SystemInit+0xf0>)
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	f003 030f 	and.w	r3, r3, #15
 8000f68:	2b06      	cmp	r3, #6
 8000f6a:	d807      	bhi.n	8000f7c <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000f6c:	4b33      	ldr	r3, [pc, #204]	@ (800103c <SystemInit+0xf0>)
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	f023 030f 	bic.w	r3, r3, #15
 8000f74:	4a31      	ldr	r2, [pc, #196]	@ (800103c <SystemInit+0xf0>)
 8000f76:	f043 0307 	orr.w	r3, r3, #7
 8000f7a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000f7c:	4b30      	ldr	r3, [pc, #192]	@ (8001040 <SystemInit+0xf4>)
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	4a2f      	ldr	r2, [pc, #188]	@ (8001040 <SystemInit+0xf4>)
 8000f82:	f043 0301 	orr.w	r3, r3, #1
 8000f86:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000f88:	4b2d      	ldr	r3, [pc, #180]	@ (8001040 <SystemInit+0xf4>)
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000f8e:	4b2c      	ldr	r3, [pc, #176]	@ (8001040 <SystemInit+0xf4>)
 8000f90:	681a      	ldr	r2, [r3, #0]
 8000f92:	492b      	ldr	r1, [pc, #172]	@ (8001040 <SystemInit+0xf4>)
 8000f94:	4b2b      	ldr	r3, [pc, #172]	@ (8001044 <SystemInit+0xf8>)
 8000f96:	4013      	ands	r3, r2
 8000f98:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000f9a:	4b28      	ldr	r3, [pc, #160]	@ (800103c <SystemInit+0xf0>)
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	f003 0308 	and.w	r3, r3, #8
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d007      	beq.n	8000fb6 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000fa6:	4b25      	ldr	r3, [pc, #148]	@ (800103c <SystemInit+0xf0>)
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	f023 030f 	bic.w	r3, r3, #15
 8000fae:	4a23      	ldr	r2, [pc, #140]	@ (800103c <SystemInit+0xf0>)
 8000fb0:	f043 0307 	orr.w	r3, r3, #7
 8000fb4:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000fb6:	4b22      	ldr	r3, [pc, #136]	@ (8001040 <SystemInit+0xf4>)
 8000fb8:	2200      	movs	r2, #0
 8000fba:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000fbc:	4b20      	ldr	r3, [pc, #128]	@ (8001040 <SystemInit+0xf4>)
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000fc2:	4b1f      	ldr	r3, [pc, #124]	@ (8001040 <SystemInit+0xf4>)
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000fc8:	4b1d      	ldr	r3, [pc, #116]	@ (8001040 <SystemInit+0xf4>)
 8000fca:	4a1f      	ldr	r2, [pc, #124]	@ (8001048 <SystemInit+0xfc>)
 8000fcc:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000fce:	4b1c      	ldr	r3, [pc, #112]	@ (8001040 <SystemInit+0xf4>)
 8000fd0:	4a1e      	ldr	r2, [pc, #120]	@ (800104c <SystemInit+0x100>)
 8000fd2:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000fd4:	4b1a      	ldr	r3, [pc, #104]	@ (8001040 <SystemInit+0xf4>)
 8000fd6:	4a1e      	ldr	r2, [pc, #120]	@ (8001050 <SystemInit+0x104>)
 8000fd8:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000fda:	4b19      	ldr	r3, [pc, #100]	@ (8001040 <SystemInit+0xf4>)
 8000fdc:	2200      	movs	r2, #0
 8000fde:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000fe0:	4b17      	ldr	r3, [pc, #92]	@ (8001040 <SystemInit+0xf4>)
 8000fe2:	4a1b      	ldr	r2, [pc, #108]	@ (8001050 <SystemInit+0x104>)
 8000fe4:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000fe6:	4b16      	ldr	r3, [pc, #88]	@ (8001040 <SystemInit+0xf4>)
 8000fe8:	2200      	movs	r2, #0
 8000fea:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000fec:	4b14      	ldr	r3, [pc, #80]	@ (8001040 <SystemInit+0xf4>)
 8000fee:	4a18      	ldr	r2, [pc, #96]	@ (8001050 <SystemInit+0x104>)
 8000ff0:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000ff2:	4b13      	ldr	r3, [pc, #76]	@ (8001040 <SystemInit+0xf4>)
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000ff8:	4b11      	ldr	r3, [pc, #68]	@ (8001040 <SystemInit+0xf4>)
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	4a10      	ldr	r2, [pc, #64]	@ (8001040 <SystemInit+0xf4>)
 8000ffe:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001002:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001004:	4b0e      	ldr	r3, [pc, #56]	@ (8001040 <SystemInit+0xf4>)
 8001006:	2200      	movs	r2, #0
 8001008:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800100a:	4b12      	ldr	r3, [pc, #72]	@ (8001054 <SystemInit+0x108>)
 800100c:	681a      	ldr	r2, [r3, #0]
 800100e:	4b12      	ldr	r3, [pc, #72]	@ (8001058 <SystemInit+0x10c>)
 8001010:	4013      	ands	r3, r2
 8001012:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001016:	d202      	bcs.n	800101e <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8001018:	4b10      	ldr	r3, [pc, #64]	@ (800105c <SystemInit+0x110>)
 800101a:	2201      	movs	r2, #1
 800101c:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800101e:	4b10      	ldr	r3, [pc, #64]	@ (8001060 <SystemInit+0x114>)
 8001020:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8001024:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001026:	4b04      	ldr	r3, [pc, #16]	@ (8001038 <SystemInit+0xec>)
 8001028:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800102c:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 800102e:	bf00      	nop
 8001030:	46bd      	mov	sp, r7
 8001032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001036:	4770      	bx	lr
 8001038:	e000ed00 	.word	0xe000ed00
 800103c:	52002000 	.word	0x52002000
 8001040:	58024400 	.word	0x58024400
 8001044:	eaf6ed7f 	.word	0xeaf6ed7f
 8001048:	02020200 	.word	0x02020200
 800104c:	01ff0000 	.word	0x01ff0000
 8001050:	01010280 	.word	0x01010280
 8001054:	5c001000 	.word	0x5c001000
 8001058:	ffff0000 	.word	0xffff0000
 800105c:	51008108 	.word	0x51008108
 8001060:	52004000 	.word	0x52004000

08001064 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001064:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800109c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001068:	f7ff ff70 	bl	8000f4c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800106c:	480c      	ldr	r0, [pc, #48]	@ (80010a0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800106e:	490d      	ldr	r1, [pc, #52]	@ (80010a4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001070:	4a0d      	ldr	r2, [pc, #52]	@ (80010a8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001072:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001074:	e002      	b.n	800107c <LoopCopyDataInit>

08001076 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001076:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001078:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800107a:	3304      	adds	r3, #4

0800107c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800107c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800107e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001080:	d3f9      	bcc.n	8001076 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001082:	4a0a      	ldr	r2, [pc, #40]	@ (80010ac <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001084:	4c0a      	ldr	r4, [pc, #40]	@ (80010b0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001086:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001088:	e001      	b.n	800108e <LoopFillZerobss>

0800108a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800108a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800108c:	3204      	adds	r2, #4

0800108e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800108e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001090:	d3fb      	bcc.n	800108a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001092:	f006 fefd 	bl	8007e90 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001096:	f7ff fab5 	bl	8000604 <main>
  bx  lr
 800109a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800109c:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80010a0:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80010a4:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 80010a8:	08007f38 	.word	0x08007f38
  ldr r2, =_sbss
 80010ac:	24000010 	.word	0x24000010
  ldr r4, =_ebss
 80010b0:	24000590 	.word	0x24000590

080010b4 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80010b4:	e7fe      	b.n	80010b4 <ADC3_IRQHandler>
	...

080010b8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b082      	sub	sp, #8
 80010bc:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010be:	2003      	movs	r0, #3
 80010c0:	f000 f96e 	bl	80013a0 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80010c4:	f001 fb5e 	bl	8002784 <HAL_RCC_GetSysClockFreq>
 80010c8:	4602      	mov	r2, r0
 80010ca:	4b15      	ldr	r3, [pc, #84]	@ (8001120 <HAL_Init+0x68>)
 80010cc:	699b      	ldr	r3, [r3, #24]
 80010ce:	0a1b      	lsrs	r3, r3, #8
 80010d0:	f003 030f 	and.w	r3, r3, #15
 80010d4:	4913      	ldr	r1, [pc, #76]	@ (8001124 <HAL_Init+0x6c>)
 80010d6:	5ccb      	ldrb	r3, [r1, r3]
 80010d8:	f003 031f 	and.w	r3, r3, #31
 80010dc:	fa22 f303 	lsr.w	r3, r2, r3
 80010e0:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80010e2:	4b0f      	ldr	r3, [pc, #60]	@ (8001120 <HAL_Init+0x68>)
 80010e4:	699b      	ldr	r3, [r3, #24]
 80010e6:	f003 030f 	and.w	r3, r3, #15
 80010ea:	4a0e      	ldr	r2, [pc, #56]	@ (8001124 <HAL_Init+0x6c>)
 80010ec:	5cd3      	ldrb	r3, [r2, r3]
 80010ee:	f003 031f 	and.w	r3, r3, #31
 80010f2:	687a      	ldr	r2, [r7, #4]
 80010f4:	fa22 f303 	lsr.w	r3, r2, r3
 80010f8:	4a0b      	ldr	r2, [pc, #44]	@ (8001128 <HAL_Init+0x70>)
 80010fa:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80010fc:	4a0b      	ldr	r2, [pc, #44]	@ (800112c <HAL_Init+0x74>)
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001102:	200f      	movs	r0, #15
 8001104:	f000 f814 	bl	8001130 <HAL_InitTick>
 8001108:	4603      	mov	r3, r0
 800110a:	2b00      	cmp	r3, #0
 800110c:	d001      	beq.n	8001112 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800110e:	2301      	movs	r3, #1
 8001110:	e002      	b.n	8001118 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001112:	f7ff fc39 	bl	8000988 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001116:	2300      	movs	r3, #0
}
 8001118:	4618      	mov	r0, r3
 800111a:	3708      	adds	r7, #8
 800111c:	46bd      	mov	sp, r7
 800111e:	bd80      	pop	{r7, pc}
 8001120:	58024400 	.word	0x58024400
 8001124:	08007ef0 	.word	0x08007ef0
 8001128:	24000004 	.word	0x24000004
 800112c:	24000000 	.word	0x24000000

08001130 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b082      	sub	sp, #8
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001138:	4b15      	ldr	r3, [pc, #84]	@ (8001190 <HAL_InitTick+0x60>)
 800113a:	781b      	ldrb	r3, [r3, #0]
 800113c:	2b00      	cmp	r3, #0
 800113e:	d101      	bne.n	8001144 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001140:	2301      	movs	r3, #1
 8001142:	e021      	b.n	8001188 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001144:	4b13      	ldr	r3, [pc, #76]	@ (8001194 <HAL_InitTick+0x64>)
 8001146:	681a      	ldr	r2, [r3, #0]
 8001148:	4b11      	ldr	r3, [pc, #68]	@ (8001190 <HAL_InitTick+0x60>)
 800114a:	781b      	ldrb	r3, [r3, #0]
 800114c:	4619      	mov	r1, r3
 800114e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001152:	fbb3 f3f1 	udiv	r3, r3, r1
 8001156:	fbb2 f3f3 	udiv	r3, r2, r3
 800115a:	4618      	mov	r0, r3
 800115c:	f000 f945 	bl	80013ea <HAL_SYSTICK_Config>
 8001160:	4603      	mov	r3, r0
 8001162:	2b00      	cmp	r3, #0
 8001164:	d001      	beq.n	800116a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001166:	2301      	movs	r3, #1
 8001168:	e00e      	b.n	8001188 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	2b0f      	cmp	r3, #15
 800116e:	d80a      	bhi.n	8001186 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001170:	2200      	movs	r2, #0
 8001172:	6879      	ldr	r1, [r7, #4]
 8001174:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001178:	f000 f91d 	bl	80013b6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800117c:	4a06      	ldr	r2, [pc, #24]	@ (8001198 <HAL_InitTick+0x68>)
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001182:	2300      	movs	r3, #0
 8001184:	e000      	b.n	8001188 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001186:	2301      	movs	r3, #1
}
 8001188:	4618      	mov	r0, r3
 800118a:	3708      	adds	r7, #8
 800118c:	46bd      	mov	sp, r7
 800118e:	bd80      	pop	{r7, pc}
 8001190:	2400000c 	.word	0x2400000c
 8001194:	24000000 	.word	0x24000000
 8001198:	24000008 	.word	0x24000008

0800119c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800119c:	b480      	push	{r7}
 800119e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80011a0:	4b06      	ldr	r3, [pc, #24]	@ (80011bc <HAL_IncTick+0x20>)
 80011a2:	781b      	ldrb	r3, [r3, #0]
 80011a4:	461a      	mov	r2, r3
 80011a6:	4b06      	ldr	r3, [pc, #24]	@ (80011c0 <HAL_IncTick+0x24>)
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	4413      	add	r3, r2
 80011ac:	4a04      	ldr	r2, [pc, #16]	@ (80011c0 <HAL_IncTick+0x24>)
 80011ae:	6013      	str	r3, [r2, #0]
}
 80011b0:	bf00      	nop
 80011b2:	46bd      	mov	sp, r7
 80011b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b8:	4770      	bx	lr
 80011ba:	bf00      	nop
 80011bc:	2400000c 	.word	0x2400000c
 80011c0:	2400058c 	.word	0x2400058c

080011c4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011c4:	b480      	push	{r7}
 80011c6:	af00      	add	r7, sp, #0
  return uwTick;
 80011c8:	4b03      	ldr	r3, [pc, #12]	@ (80011d8 <HAL_GetTick+0x14>)
 80011ca:	681b      	ldr	r3, [r3, #0]
}
 80011cc:	4618      	mov	r0, r3
 80011ce:	46bd      	mov	sp, r7
 80011d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d4:	4770      	bx	lr
 80011d6:	bf00      	nop
 80011d8:	2400058c 	.word	0x2400058c

080011dc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b084      	sub	sp, #16
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80011e4:	f7ff ffee 	bl	80011c4 <HAL_GetTick>
 80011e8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80011ee:	68fb      	ldr	r3, [r7, #12]
 80011f0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80011f4:	d005      	beq.n	8001202 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80011f6:	4b0a      	ldr	r3, [pc, #40]	@ (8001220 <HAL_Delay+0x44>)
 80011f8:	781b      	ldrb	r3, [r3, #0]
 80011fa:	461a      	mov	r2, r3
 80011fc:	68fb      	ldr	r3, [r7, #12]
 80011fe:	4413      	add	r3, r2
 8001200:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001202:	bf00      	nop
 8001204:	f7ff ffde 	bl	80011c4 <HAL_GetTick>
 8001208:	4602      	mov	r2, r0
 800120a:	68bb      	ldr	r3, [r7, #8]
 800120c:	1ad3      	subs	r3, r2, r3
 800120e:	68fa      	ldr	r2, [r7, #12]
 8001210:	429a      	cmp	r2, r3
 8001212:	d8f7      	bhi.n	8001204 <HAL_Delay+0x28>
  {
  }
}
 8001214:	bf00      	nop
 8001216:	bf00      	nop
 8001218:	3710      	adds	r7, #16
 800121a:	46bd      	mov	sp, r7
 800121c:	bd80      	pop	{r7, pc}
 800121e:	bf00      	nop
 8001220:	2400000c 	.word	0x2400000c

08001224 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001224:	b480      	push	{r7}
 8001226:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001228:	4b03      	ldr	r3, [pc, #12]	@ (8001238 <HAL_GetREVID+0x14>)
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	0c1b      	lsrs	r3, r3, #16
}
 800122e:	4618      	mov	r0, r3
 8001230:	46bd      	mov	sp, r7
 8001232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001236:	4770      	bx	lr
 8001238:	5c001000 	.word	0x5c001000

0800123c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800123c:	b480      	push	{r7}
 800123e:	b085      	sub	sp, #20
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	f003 0307 	and.w	r3, r3, #7
 800124a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800124c:	4b0b      	ldr	r3, [pc, #44]	@ (800127c <__NVIC_SetPriorityGrouping+0x40>)
 800124e:	68db      	ldr	r3, [r3, #12]
 8001250:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001252:	68ba      	ldr	r2, [r7, #8]
 8001254:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001258:	4013      	ands	r3, r2
 800125a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001260:	68bb      	ldr	r3, [r7, #8]
 8001262:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001264:	4b06      	ldr	r3, [pc, #24]	@ (8001280 <__NVIC_SetPriorityGrouping+0x44>)
 8001266:	4313      	orrs	r3, r2
 8001268:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800126a:	4a04      	ldr	r2, [pc, #16]	@ (800127c <__NVIC_SetPriorityGrouping+0x40>)
 800126c:	68bb      	ldr	r3, [r7, #8]
 800126e:	60d3      	str	r3, [r2, #12]
}
 8001270:	bf00      	nop
 8001272:	3714      	adds	r7, #20
 8001274:	46bd      	mov	sp, r7
 8001276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127a:	4770      	bx	lr
 800127c:	e000ed00 	.word	0xe000ed00
 8001280:	05fa0000 	.word	0x05fa0000

08001284 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001284:	b480      	push	{r7}
 8001286:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001288:	4b04      	ldr	r3, [pc, #16]	@ (800129c <__NVIC_GetPriorityGrouping+0x18>)
 800128a:	68db      	ldr	r3, [r3, #12]
 800128c:	0a1b      	lsrs	r3, r3, #8
 800128e:	f003 0307 	and.w	r3, r3, #7
}
 8001292:	4618      	mov	r0, r3
 8001294:	46bd      	mov	sp, r7
 8001296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129a:	4770      	bx	lr
 800129c:	e000ed00 	.word	0xe000ed00

080012a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80012a0:	b480      	push	{r7}
 80012a2:	b083      	sub	sp, #12
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	4603      	mov	r3, r0
 80012a8:	6039      	str	r1, [r7, #0]
 80012aa:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80012ac:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	db0a      	blt.n	80012ca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012b4:	683b      	ldr	r3, [r7, #0]
 80012b6:	b2da      	uxtb	r2, r3
 80012b8:	490c      	ldr	r1, [pc, #48]	@ (80012ec <__NVIC_SetPriority+0x4c>)
 80012ba:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80012be:	0112      	lsls	r2, r2, #4
 80012c0:	b2d2      	uxtb	r2, r2
 80012c2:	440b      	add	r3, r1
 80012c4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80012c8:	e00a      	b.n	80012e0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012ca:	683b      	ldr	r3, [r7, #0]
 80012cc:	b2da      	uxtb	r2, r3
 80012ce:	4908      	ldr	r1, [pc, #32]	@ (80012f0 <__NVIC_SetPriority+0x50>)
 80012d0:	88fb      	ldrh	r3, [r7, #6]
 80012d2:	f003 030f 	and.w	r3, r3, #15
 80012d6:	3b04      	subs	r3, #4
 80012d8:	0112      	lsls	r2, r2, #4
 80012da:	b2d2      	uxtb	r2, r2
 80012dc:	440b      	add	r3, r1
 80012de:	761a      	strb	r2, [r3, #24]
}
 80012e0:	bf00      	nop
 80012e2:	370c      	adds	r7, #12
 80012e4:	46bd      	mov	sp, r7
 80012e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ea:	4770      	bx	lr
 80012ec:	e000e100 	.word	0xe000e100
 80012f0:	e000ed00 	.word	0xe000ed00

080012f4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012f4:	b480      	push	{r7}
 80012f6:	b089      	sub	sp, #36	@ 0x24
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	60f8      	str	r0, [r7, #12]
 80012fc:	60b9      	str	r1, [r7, #8]
 80012fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	f003 0307 	and.w	r3, r3, #7
 8001306:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001308:	69fb      	ldr	r3, [r7, #28]
 800130a:	f1c3 0307 	rsb	r3, r3, #7
 800130e:	2b04      	cmp	r3, #4
 8001310:	bf28      	it	cs
 8001312:	2304      	movcs	r3, #4
 8001314:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001316:	69fb      	ldr	r3, [r7, #28]
 8001318:	3304      	adds	r3, #4
 800131a:	2b06      	cmp	r3, #6
 800131c:	d902      	bls.n	8001324 <NVIC_EncodePriority+0x30>
 800131e:	69fb      	ldr	r3, [r7, #28]
 8001320:	3b03      	subs	r3, #3
 8001322:	e000      	b.n	8001326 <NVIC_EncodePriority+0x32>
 8001324:	2300      	movs	r3, #0
 8001326:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001328:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800132c:	69bb      	ldr	r3, [r7, #24]
 800132e:	fa02 f303 	lsl.w	r3, r2, r3
 8001332:	43da      	mvns	r2, r3
 8001334:	68bb      	ldr	r3, [r7, #8]
 8001336:	401a      	ands	r2, r3
 8001338:	697b      	ldr	r3, [r7, #20]
 800133a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800133c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001340:	697b      	ldr	r3, [r7, #20]
 8001342:	fa01 f303 	lsl.w	r3, r1, r3
 8001346:	43d9      	mvns	r1, r3
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800134c:	4313      	orrs	r3, r2
         );
}
 800134e:	4618      	mov	r0, r3
 8001350:	3724      	adds	r7, #36	@ 0x24
 8001352:	46bd      	mov	sp, r7
 8001354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001358:	4770      	bx	lr
	...

0800135c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	b082      	sub	sp, #8
 8001360:	af00      	add	r7, sp, #0
 8001362:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	3b01      	subs	r3, #1
 8001368:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800136c:	d301      	bcc.n	8001372 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800136e:	2301      	movs	r3, #1
 8001370:	e00f      	b.n	8001392 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001372:	4a0a      	ldr	r2, [pc, #40]	@ (800139c <SysTick_Config+0x40>)
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	3b01      	subs	r3, #1
 8001378:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800137a:	210f      	movs	r1, #15
 800137c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001380:	f7ff ff8e 	bl	80012a0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001384:	4b05      	ldr	r3, [pc, #20]	@ (800139c <SysTick_Config+0x40>)
 8001386:	2200      	movs	r2, #0
 8001388:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800138a:	4b04      	ldr	r3, [pc, #16]	@ (800139c <SysTick_Config+0x40>)
 800138c:	2207      	movs	r2, #7
 800138e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001390:	2300      	movs	r3, #0
}
 8001392:	4618      	mov	r0, r3
 8001394:	3708      	adds	r7, #8
 8001396:	46bd      	mov	sp, r7
 8001398:	bd80      	pop	{r7, pc}
 800139a:	bf00      	nop
 800139c:	e000e010 	.word	0xe000e010

080013a0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b082      	sub	sp, #8
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80013a8:	6878      	ldr	r0, [r7, #4]
 80013aa:	f7ff ff47 	bl	800123c <__NVIC_SetPriorityGrouping>
}
 80013ae:	bf00      	nop
 80013b0:	3708      	adds	r7, #8
 80013b2:	46bd      	mov	sp, r7
 80013b4:	bd80      	pop	{r7, pc}

080013b6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013b6:	b580      	push	{r7, lr}
 80013b8:	b086      	sub	sp, #24
 80013ba:	af00      	add	r7, sp, #0
 80013bc:	4603      	mov	r3, r0
 80013be:	60b9      	str	r1, [r7, #8]
 80013c0:	607a      	str	r2, [r7, #4]
 80013c2:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80013c4:	f7ff ff5e 	bl	8001284 <__NVIC_GetPriorityGrouping>
 80013c8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80013ca:	687a      	ldr	r2, [r7, #4]
 80013cc:	68b9      	ldr	r1, [r7, #8]
 80013ce:	6978      	ldr	r0, [r7, #20]
 80013d0:	f7ff ff90 	bl	80012f4 <NVIC_EncodePriority>
 80013d4:	4602      	mov	r2, r0
 80013d6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80013da:	4611      	mov	r1, r2
 80013dc:	4618      	mov	r0, r3
 80013de:	f7ff ff5f 	bl	80012a0 <__NVIC_SetPriority>
}
 80013e2:	bf00      	nop
 80013e4:	3718      	adds	r7, #24
 80013e6:	46bd      	mov	sp, r7
 80013e8:	bd80      	pop	{r7, pc}

080013ea <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80013ea:	b580      	push	{r7, lr}
 80013ec:	b082      	sub	sp, #8
 80013ee:	af00      	add	r7, sp, #0
 80013f0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80013f2:	6878      	ldr	r0, [r7, #4]
 80013f4:	f7ff ffb2 	bl	800135c <SysTick_Config>
 80013f8:	4603      	mov	r3, r0
}
 80013fa:	4618      	mov	r0, r3
 80013fc:	3708      	adds	r7, #8
 80013fe:	46bd      	mov	sp, r7
 8001400:	bd80      	pop	{r7, pc}
	...

08001404 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001404:	b480      	push	{r7}
 8001406:	b089      	sub	sp, #36	@ 0x24
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]
 800140c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800140e:	2300      	movs	r3, #0
 8001410:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8001412:	4b89      	ldr	r3, [pc, #548]	@ (8001638 <HAL_GPIO_Init+0x234>)
 8001414:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001416:	e194      	b.n	8001742 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001418:	683b      	ldr	r3, [r7, #0]
 800141a:	681a      	ldr	r2, [r3, #0]
 800141c:	2101      	movs	r1, #1
 800141e:	69fb      	ldr	r3, [r7, #28]
 8001420:	fa01 f303 	lsl.w	r3, r1, r3
 8001424:	4013      	ands	r3, r2
 8001426:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001428:	693b      	ldr	r3, [r7, #16]
 800142a:	2b00      	cmp	r3, #0
 800142c:	f000 8186 	beq.w	800173c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001430:	683b      	ldr	r3, [r7, #0]
 8001432:	685b      	ldr	r3, [r3, #4]
 8001434:	2b01      	cmp	r3, #1
 8001436:	d00b      	beq.n	8001450 <HAL_GPIO_Init+0x4c>
 8001438:	683b      	ldr	r3, [r7, #0]
 800143a:	685b      	ldr	r3, [r3, #4]
 800143c:	2b02      	cmp	r3, #2
 800143e:	d007      	beq.n	8001450 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001440:	683b      	ldr	r3, [r7, #0]
 8001442:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001444:	2b11      	cmp	r3, #17
 8001446:	d003      	beq.n	8001450 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001448:	683b      	ldr	r3, [r7, #0]
 800144a:	685b      	ldr	r3, [r3, #4]
 800144c:	2b12      	cmp	r3, #18
 800144e:	d130      	bne.n	80014b2 <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	689b      	ldr	r3, [r3, #8]
 8001454:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001456:	69fb      	ldr	r3, [r7, #28]
 8001458:	005b      	lsls	r3, r3, #1
 800145a:	2203      	movs	r2, #3
 800145c:	fa02 f303 	lsl.w	r3, r2, r3
 8001460:	43db      	mvns	r3, r3
 8001462:	69ba      	ldr	r2, [r7, #24]
 8001464:	4013      	ands	r3, r2
 8001466:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001468:	683b      	ldr	r3, [r7, #0]
 800146a:	68da      	ldr	r2, [r3, #12]
 800146c:	69fb      	ldr	r3, [r7, #28]
 800146e:	005b      	lsls	r3, r3, #1
 8001470:	fa02 f303 	lsl.w	r3, r2, r3
 8001474:	69ba      	ldr	r2, [r7, #24]
 8001476:	4313      	orrs	r3, r2
 8001478:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	69ba      	ldr	r2, [r7, #24]
 800147e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	685b      	ldr	r3, [r3, #4]
 8001484:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001486:	2201      	movs	r2, #1
 8001488:	69fb      	ldr	r3, [r7, #28]
 800148a:	fa02 f303 	lsl.w	r3, r2, r3
 800148e:	43db      	mvns	r3, r3
 8001490:	69ba      	ldr	r2, [r7, #24]
 8001492:	4013      	ands	r3, r2
 8001494:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001496:	683b      	ldr	r3, [r7, #0]
 8001498:	685b      	ldr	r3, [r3, #4]
 800149a:	091b      	lsrs	r3, r3, #4
 800149c:	f003 0201 	and.w	r2, r3, #1
 80014a0:	69fb      	ldr	r3, [r7, #28]
 80014a2:	fa02 f303 	lsl.w	r3, r2, r3
 80014a6:	69ba      	ldr	r2, [r7, #24]
 80014a8:	4313      	orrs	r3, r2
 80014aa:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	69ba      	ldr	r2, [r7, #24]
 80014b0:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	68db      	ldr	r3, [r3, #12]
 80014b6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80014b8:	69fb      	ldr	r3, [r7, #28]
 80014ba:	005b      	lsls	r3, r3, #1
 80014bc:	2203      	movs	r2, #3
 80014be:	fa02 f303 	lsl.w	r3, r2, r3
 80014c2:	43db      	mvns	r3, r3
 80014c4:	69ba      	ldr	r2, [r7, #24]
 80014c6:	4013      	ands	r3, r2
 80014c8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80014ca:	683b      	ldr	r3, [r7, #0]
 80014cc:	689a      	ldr	r2, [r3, #8]
 80014ce:	69fb      	ldr	r3, [r7, #28]
 80014d0:	005b      	lsls	r3, r3, #1
 80014d2:	fa02 f303 	lsl.w	r3, r2, r3
 80014d6:	69ba      	ldr	r2, [r7, #24]
 80014d8:	4313      	orrs	r3, r2
 80014da:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	69ba      	ldr	r2, [r7, #24]
 80014e0:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80014e2:	683b      	ldr	r3, [r7, #0]
 80014e4:	685b      	ldr	r3, [r3, #4]
 80014e6:	2b02      	cmp	r3, #2
 80014e8:	d003      	beq.n	80014f2 <HAL_GPIO_Init+0xee>
 80014ea:	683b      	ldr	r3, [r7, #0]
 80014ec:	685b      	ldr	r3, [r3, #4]
 80014ee:	2b12      	cmp	r3, #18
 80014f0:	d123      	bne.n	800153a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80014f2:	69fb      	ldr	r3, [r7, #28]
 80014f4:	08da      	lsrs	r2, r3, #3
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	3208      	adds	r2, #8
 80014fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80014fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001500:	69fb      	ldr	r3, [r7, #28]
 8001502:	f003 0307 	and.w	r3, r3, #7
 8001506:	009b      	lsls	r3, r3, #2
 8001508:	220f      	movs	r2, #15
 800150a:	fa02 f303 	lsl.w	r3, r2, r3
 800150e:	43db      	mvns	r3, r3
 8001510:	69ba      	ldr	r2, [r7, #24]
 8001512:	4013      	ands	r3, r2
 8001514:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001516:	683b      	ldr	r3, [r7, #0]
 8001518:	691a      	ldr	r2, [r3, #16]
 800151a:	69fb      	ldr	r3, [r7, #28]
 800151c:	f003 0307 	and.w	r3, r3, #7
 8001520:	009b      	lsls	r3, r3, #2
 8001522:	fa02 f303 	lsl.w	r3, r2, r3
 8001526:	69ba      	ldr	r2, [r7, #24]
 8001528:	4313      	orrs	r3, r2
 800152a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800152c:	69fb      	ldr	r3, [r7, #28]
 800152e:	08da      	lsrs	r2, r3, #3
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	3208      	adds	r2, #8
 8001534:	69b9      	ldr	r1, [r7, #24]
 8001536:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001540:	69fb      	ldr	r3, [r7, #28]
 8001542:	005b      	lsls	r3, r3, #1
 8001544:	2203      	movs	r2, #3
 8001546:	fa02 f303 	lsl.w	r3, r2, r3
 800154a:	43db      	mvns	r3, r3
 800154c:	69ba      	ldr	r2, [r7, #24]
 800154e:	4013      	ands	r3, r2
 8001550:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001552:	683b      	ldr	r3, [r7, #0]
 8001554:	685b      	ldr	r3, [r3, #4]
 8001556:	f003 0203 	and.w	r2, r3, #3
 800155a:	69fb      	ldr	r3, [r7, #28]
 800155c:	005b      	lsls	r3, r3, #1
 800155e:	fa02 f303 	lsl.w	r3, r2, r3
 8001562:	69ba      	ldr	r2, [r7, #24]
 8001564:	4313      	orrs	r3, r2
 8001566:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	69ba      	ldr	r2, [r7, #24]
 800156c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800156e:	683b      	ldr	r3, [r7, #0]
 8001570:	685b      	ldr	r3, [r3, #4]
 8001572:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001576:	2b00      	cmp	r3, #0
 8001578:	f000 80e0 	beq.w	800173c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800157c:	4b2f      	ldr	r3, [pc, #188]	@ (800163c <HAL_GPIO_Init+0x238>)
 800157e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001582:	4a2e      	ldr	r2, [pc, #184]	@ (800163c <HAL_GPIO_Init+0x238>)
 8001584:	f043 0302 	orr.w	r3, r3, #2
 8001588:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800158c:	4b2b      	ldr	r3, [pc, #172]	@ (800163c <HAL_GPIO_Init+0x238>)
 800158e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001592:	f003 0302 	and.w	r3, r3, #2
 8001596:	60fb      	str	r3, [r7, #12]
 8001598:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800159a:	4a29      	ldr	r2, [pc, #164]	@ (8001640 <HAL_GPIO_Init+0x23c>)
 800159c:	69fb      	ldr	r3, [r7, #28]
 800159e:	089b      	lsrs	r3, r3, #2
 80015a0:	3302      	adds	r3, #2
 80015a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80015a8:	69fb      	ldr	r3, [r7, #28]
 80015aa:	f003 0303 	and.w	r3, r3, #3
 80015ae:	009b      	lsls	r3, r3, #2
 80015b0:	220f      	movs	r2, #15
 80015b2:	fa02 f303 	lsl.w	r3, r2, r3
 80015b6:	43db      	mvns	r3, r3
 80015b8:	69ba      	ldr	r2, [r7, #24]
 80015ba:	4013      	ands	r3, r2
 80015bc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	4a20      	ldr	r2, [pc, #128]	@ (8001644 <HAL_GPIO_Init+0x240>)
 80015c2:	4293      	cmp	r3, r2
 80015c4:	d052      	beq.n	800166c <HAL_GPIO_Init+0x268>
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	4a1f      	ldr	r2, [pc, #124]	@ (8001648 <HAL_GPIO_Init+0x244>)
 80015ca:	4293      	cmp	r3, r2
 80015cc:	d031      	beq.n	8001632 <HAL_GPIO_Init+0x22e>
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	4a1e      	ldr	r2, [pc, #120]	@ (800164c <HAL_GPIO_Init+0x248>)
 80015d2:	4293      	cmp	r3, r2
 80015d4:	d02b      	beq.n	800162e <HAL_GPIO_Init+0x22a>
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	4a1d      	ldr	r2, [pc, #116]	@ (8001650 <HAL_GPIO_Init+0x24c>)
 80015da:	4293      	cmp	r3, r2
 80015dc:	d025      	beq.n	800162a <HAL_GPIO_Init+0x226>
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	4a1c      	ldr	r2, [pc, #112]	@ (8001654 <HAL_GPIO_Init+0x250>)
 80015e2:	4293      	cmp	r3, r2
 80015e4:	d01f      	beq.n	8001626 <HAL_GPIO_Init+0x222>
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	4a1b      	ldr	r2, [pc, #108]	@ (8001658 <HAL_GPIO_Init+0x254>)
 80015ea:	4293      	cmp	r3, r2
 80015ec:	d019      	beq.n	8001622 <HAL_GPIO_Init+0x21e>
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	4a1a      	ldr	r2, [pc, #104]	@ (800165c <HAL_GPIO_Init+0x258>)
 80015f2:	4293      	cmp	r3, r2
 80015f4:	d013      	beq.n	800161e <HAL_GPIO_Init+0x21a>
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	4a19      	ldr	r2, [pc, #100]	@ (8001660 <HAL_GPIO_Init+0x25c>)
 80015fa:	4293      	cmp	r3, r2
 80015fc:	d00d      	beq.n	800161a <HAL_GPIO_Init+0x216>
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	4a18      	ldr	r2, [pc, #96]	@ (8001664 <HAL_GPIO_Init+0x260>)
 8001602:	4293      	cmp	r3, r2
 8001604:	d007      	beq.n	8001616 <HAL_GPIO_Init+0x212>
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	4a17      	ldr	r2, [pc, #92]	@ (8001668 <HAL_GPIO_Init+0x264>)
 800160a:	4293      	cmp	r3, r2
 800160c:	d101      	bne.n	8001612 <HAL_GPIO_Init+0x20e>
 800160e:	2309      	movs	r3, #9
 8001610:	e02d      	b.n	800166e <HAL_GPIO_Init+0x26a>
 8001612:	230a      	movs	r3, #10
 8001614:	e02b      	b.n	800166e <HAL_GPIO_Init+0x26a>
 8001616:	2308      	movs	r3, #8
 8001618:	e029      	b.n	800166e <HAL_GPIO_Init+0x26a>
 800161a:	2307      	movs	r3, #7
 800161c:	e027      	b.n	800166e <HAL_GPIO_Init+0x26a>
 800161e:	2306      	movs	r3, #6
 8001620:	e025      	b.n	800166e <HAL_GPIO_Init+0x26a>
 8001622:	2305      	movs	r3, #5
 8001624:	e023      	b.n	800166e <HAL_GPIO_Init+0x26a>
 8001626:	2304      	movs	r3, #4
 8001628:	e021      	b.n	800166e <HAL_GPIO_Init+0x26a>
 800162a:	2303      	movs	r3, #3
 800162c:	e01f      	b.n	800166e <HAL_GPIO_Init+0x26a>
 800162e:	2302      	movs	r3, #2
 8001630:	e01d      	b.n	800166e <HAL_GPIO_Init+0x26a>
 8001632:	2301      	movs	r3, #1
 8001634:	e01b      	b.n	800166e <HAL_GPIO_Init+0x26a>
 8001636:	bf00      	nop
 8001638:	58000080 	.word	0x58000080
 800163c:	58024400 	.word	0x58024400
 8001640:	58000400 	.word	0x58000400
 8001644:	58020000 	.word	0x58020000
 8001648:	58020400 	.word	0x58020400
 800164c:	58020800 	.word	0x58020800
 8001650:	58020c00 	.word	0x58020c00
 8001654:	58021000 	.word	0x58021000
 8001658:	58021400 	.word	0x58021400
 800165c:	58021800 	.word	0x58021800
 8001660:	58021c00 	.word	0x58021c00
 8001664:	58022000 	.word	0x58022000
 8001668:	58022400 	.word	0x58022400
 800166c:	2300      	movs	r3, #0
 800166e:	69fa      	ldr	r2, [r7, #28]
 8001670:	f002 0203 	and.w	r2, r2, #3
 8001674:	0092      	lsls	r2, r2, #2
 8001676:	4093      	lsls	r3, r2
 8001678:	69ba      	ldr	r2, [r7, #24]
 800167a:	4313      	orrs	r3, r2
 800167c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800167e:	4938      	ldr	r1, [pc, #224]	@ (8001760 <HAL_GPIO_Init+0x35c>)
 8001680:	69fb      	ldr	r3, [r7, #28]
 8001682:	089b      	lsrs	r3, r3, #2
 8001684:	3302      	adds	r3, #2
 8001686:	69ba      	ldr	r2, [r7, #24]
 8001688:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800168c:	697b      	ldr	r3, [r7, #20]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001692:	693b      	ldr	r3, [r7, #16]
 8001694:	43db      	mvns	r3, r3
 8001696:	69ba      	ldr	r2, [r7, #24]
 8001698:	4013      	ands	r3, r2
 800169a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800169c:	683b      	ldr	r3, [r7, #0]
 800169e:	685b      	ldr	r3, [r3, #4]
 80016a0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d003      	beq.n	80016b0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80016a8:	69ba      	ldr	r2, [r7, #24]
 80016aa:	693b      	ldr	r3, [r7, #16]
 80016ac:	4313      	orrs	r3, r2
 80016ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80016b0:	697b      	ldr	r3, [r7, #20]
 80016b2:	69ba      	ldr	r2, [r7, #24]
 80016b4:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 80016b6:	697b      	ldr	r3, [r7, #20]
 80016b8:	685b      	ldr	r3, [r3, #4]
 80016ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80016bc:	693b      	ldr	r3, [r7, #16]
 80016be:	43db      	mvns	r3, r3
 80016c0:	69ba      	ldr	r2, [r7, #24]
 80016c2:	4013      	ands	r3, r2
 80016c4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80016c6:	683b      	ldr	r3, [r7, #0]
 80016c8:	685b      	ldr	r3, [r3, #4]
 80016ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d003      	beq.n	80016da <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80016d2:	69ba      	ldr	r2, [r7, #24]
 80016d4:	693b      	ldr	r3, [r7, #16]
 80016d6:	4313      	orrs	r3, r2
 80016d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80016da:	697b      	ldr	r3, [r7, #20]
 80016dc:	69ba      	ldr	r2, [r7, #24]
 80016de:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80016e0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80016e8:	693b      	ldr	r3, [r7, #16]
 80016ea:	43db      	mvns	r3, r3
 80016ec:	69ba      	ldr	r2, [r7, #24]
 80016ee:	4013      	ands	r3, r2
 80016f0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80016f2:	683b      	ldr	r3, [r7, #0]
 80016f4:	685b      	ldr	r3, [r3, #4]
 80016f6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d003      	beq.n	8001706 <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 80016fe:	69ba      	ldr	r2, [r7, #24]
 8001700:	693b      	ldr	r3, [r7, #16]
 8001702:	4313      	orrs	r3, r2
 8001704:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8001706:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800170a:	69bb      	ldr	r3, [r7, #24]
 800170c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800170e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001712:	685b      	ldr	r3, [r3, #4]
 8001714:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001716:	693b      	ldr	r3, [r7, #16]
 8001718:	43db      	mvns	r3, r3
 800171a:	69ba      	ldr	r2, [r7, #24]
 800171c:	4013      	ands	r3, r2
 800171e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001720:	683b      	ldr	r3, [r7, #0]
 8001722:	685b      	ldr	r3, [r3, #4]
 8001724:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001728:	2b00      	cmp	r3, #0
 800172a:	d003      	beq.n	8001734 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 800172c:	69ba      	ldr	r2, [r7, #24]
 800172e:	693b      	ldr	r3, [r7, #16]
 8001730:	4313      	orrs	r3, r2
 8001732:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8001734:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001738:	69bb      	ldr	r3, [r7, #24]
 800173a:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 800173c:	69fb      	ldr	r3, [r7, #28]
 800173e:	3301      	adds	r3, #1
 8001740:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001742:	683b      	ldr	r3, [r7, #0]
 8001744:	681a      	ldr	r2, [r3, #0]
 8001746:	69fb      	ldr	r3, [r7, #28]
 8001748:	fa22 f303 	lsr.w	r3, r2, r3
 800174c:	2b00      	cmp	r3, #0
 800174e:	f47f ae63 	bne.w	8001418 <HAL_GPIO_Init+0x14>
  }
}
 8001752:	bf00      	nop
 8001754:	bf00      	nop
 8001756:	3724      	adds	r7, #36	@ 0x24
 8001758:	46bd      	mov	sp, r7
 800175a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175e:	4770      	bx	lr
 8001760:	58000400 	.word	0x58000400

08001764 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001764:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001766:	b08f      	sub	sp, #60	@ 0x3c
 8001768:	af0a      	add	r7, sp, #40	@ 0x28
 800176a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	2b00      	cmp	r3, #0
 8001770:	d101      	bne.n	8001776 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001772:	2301      	movs	r3, #1
 8001774:	e116      	b.n	80019a4 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	f893 33bd 	ldrb.w	r3, [r3, #957]	@ 0x3bd
 8001782:	b2db      	uxtb	r3, r3
 8001784:	2b00      	cmp	r3, #0
 8001786:	d106      	bne.n	8001796 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	2200      	movs	r2, #0
 800178c:	f883 23bc 	strb.w	r2, [r3, #956]	@ 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001790:	6878      	ldr	r0, [r7, #4]
 8001792:	f7ff fb41 	bl	8000e18 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	2203      	movs	r2, #3
 800179a:	f883 23bd 	strb.w	r2, [r3, #957]	@ 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800179e:	68bb      	ldr	r3, [r7, #8]
 80017a0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80017a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d102      	bne.n	80017b0 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	2200      	movs	r2, #0
 80017ae:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	4618      	mov	r0, r3
 80017b6:	f006 f913 	bl	80079e0 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	603b      	str	r3, [r7, #0]
 80017c0:	687e      	ldr	r6, [r7, #4]
 80017c2:	466d      	mov	r5, sp
 80017c4:	f106 0410 	add.w	r4, r6, #16
 80017c8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80017ca:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80017cc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80017ce:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80017d0:	e894 0003 	ldmia.w	r4, {r0, r1}
 80017d4:	e885 0003 	stmia.w	r5, {r0, r1}
 80017d8:	1d33      	adds	r3, r6, #4
 80017da:	cb0e      	ldmia	r3, {r1, r2, r3}
 80017dc:	6838      	ldr	r0, [r7, #0]
 80017de:	f006 f891 	bl	8007904 <USB_CoreInit>
 80017e2:	4603      	mov	r3, r0
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d005      	beq.n	80017f4 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	2202      	movs	r2, #2
 80017ec:	f883 23bd 	strb.w	r2, [r3, #957]	@ 0x3bd
    return HAL_ERROR;
 80017f0:	2301      	movs	r3, #1
 80017f2:	e0d7      	b.n	80019a4 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	2100      	movs	r1, #0
 80017fa:	4618      	mov	r0, r3
 80017fc:	f006 f901 	bl	8007a02 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001800:	2300      	movs	r3, #0
 8001802:	73fb      	strb	r3, [r7, #15]
 8001804:	e04a      	b.n	800189c <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001806:	7bfa      	ldrb	r2, [r7, #15]
 8001808:	6879      	ldr	r1, [r7, #4]
 800180a:	4613      	mov	r3, r2
 800180c:	00db      	lsls	r3, r3, #3
 800180e:	1a9b      	subs	r3, r3, r2
 8001810:	009b      	lsls	r3, r3, #2
 8001812:	440b      	add	r3, r1
 8001814:	333d      	adds	r3, #61	@ 0x3d
 8001816:	2201      	movs	r2, #1
 8001818:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800181a:	7bfa      	ldrb	r2, [r7, #15]
 800181c:	6879      	ldr	r1, [r7, #4]
 800181e:	4613      	mov	r3, r2
 8001820:	00db      	lsls	r3, r3, #3
 8001822:	1a9b      	subs	r3, r3, r2
 8001824:	009b      	lsls	r3, r3, #2
 8001826:	440b      	add	r3, r1
 8001828:	333c      	adds	r3, #60	@ 0x3c
 800182a:	7bfa      	ldrb	r2, [r7, #15]
 800182c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800182e:	7bfa      	ldrb	r2, [r7, #15]
 8001830:	7bfb      	ldrb	r3, [r7, #15]
 8001832:	b298      	uxth	r0, r3
 8001834:	6879      	ldr	r1, [r7, #4]
 8001836:	4613      	mov	r3, r2
 8001838:	00db      	lsls	r3, r3, #3
 800183a:	1a9b      	subs	r3, r3, r2
 800183c:	009b      	lsls	r3, r3, #2
 800183e:	440b      	add	r3, r1
 8001840:	3342      	adds	r3, #66	@ 0x42
 8001842:	4602      	mov	r2, r0
 8001844:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001846:	7bfa      	ldrb	r2, [r7, #15]
 8001848:	6879      	ldr	r1, [r7, #4]
 800184a:	4613      	mov	r3, r2
 800184c:	00db      	lsls	r3, r3, #3
 800184e:	1a9b      	subs	r3, r3, r2
 8001850:	009b      	lsls	r3, r3, #2
 8001852:	440b      	add	r3, r1
 8001854:	333f      	adds	r3, #63	@ 0x3f
 8001856:	2200      	movs	r2, #0
 8001858:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800185a:	7bfa      	ldrb	r2, [r7, #15]
 800185c:	6879      	ldr	r1, [r7, #4]
 800185e:	4613      	mov	r3, r2
 8001860:	00db      	lsls	r3, r3, #3
 8001862:	1a9b      	subs	r3, r3, r2
 8001864:	009b      	lsls	r3, r3, #2
 8001866:	440b      	add	r3, r1
 8001868:	3344      	adds	r3, #68	@ 0x44
 800186a:	2200      	movs	r2, #0
 800186c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800186e:	7bfa      	ldrb	r2, [r7, #15]
 8001870:	6879      	ldr	r1, [r7, #4]
 8001872:	4613      	mov	r3, r2
 8001874:	00db      	lsls	r3, r3, #3
 8001876:	1a9b      	subs	r3, r3, r2
 8001878:	009b      	lsls	r3, r3, #2
 800187a:	440b      	add	r3, r1
 800187c:	3348      	adds	r3, #72	@ 0x48
 800187e:	2200      	movs	r2, #0
 8001880:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001882:	7bfa      	ldrb	r2, [r7, #15]
 8001884:	6879      	ldr	r1, [r7, #4]
 8001886:	4613      	mov	r3, r2
 8001888:	00db      	lsls	r3, r3, #3
 800188a:	1a9b      	subs	r3, r3, r2
 800188c:	009b      	lsls	r3, r3, #2
 800188e:	440b      	add	r3, r1
 8001890:	3350      	adds	r3, #80	@ 0x50
 8001892:	2200      	movs	r2, #0
 8001894:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001896:	7bfb      	ldrb	r3, [r7, #15]
 8001898:	3301      	adds	r3, #1
 800189a:	73fb      	strb	r3, [r7, #15]
 800189c:	7bfa      	ldrb	r2, [r7, #15]
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	685b      	ldr	r3, [r3, #4]
 80018a2:	429a      	cmp	r2, r3
 80018a4:	d3af      	bcc.n	8001806 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80018a6:	2300      	movs	r3, #0
 80018a8:	73fb      	strb	r3, [r7, #15]
 80018aa:	e044      	b.n	8001936 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80018ac:	7bfa      	ldrb	r2, [r7, #15]
 80018ae:	6879      	ldr	r1, [r7, #4]
 80018b0:	4613      	mov	r3, r2
 80018b2:	00db      	lsls	r3, r3, #3
 80018b4:	1a9b      	subs	r3, r3, r2
 80018b6:	009b      	lsls	r3, r3, #2
 80018b8:	440b      	add	r3, r1
 80018ba:	f203 13fd 	addw	r3, r3, #509	@ 0x1fd
 80018be:	2200      	movs	r2, #0
 80018c0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80018c2:	7bfa      	ldrb	r2, [r7, #15]
 80018c4:	6879      	ldr	r1, [r7, #4]
 80018c6:	4613      	mov	r3, r2
 80018c8:	00db      	lsls	r3, r3, #3
 80018ca:	1a9b      	subs	r3, r3, r2
 80018cc:	009b      	lsls	r3, r3, #2
 80018ce:	440b      	add	r3, r1
 80018d0:	f503 73fe 	add.w	r3, r3, #508	@ 0x1fc
 80018d4:	7bfa      	ldrb	r2, [r7, #15]
 80018d6:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80018d8:	7bfa      	ldrb	r2, [r7, #15]
 80018da:	6879      	ldr	r1, [r7, #4]
 80018dc:	4613      	mov	r3, r2
 80018de:	00db      	lsls	r3, r3, #3
 80018e0:	1a9b      	subs	r3, r3, r2
 80018e2:	009b      	lsls	r3, r3, #2
 80018e4:	440b      	add	r3, r1
 80018e6:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 80018ea:	2200      	movs	r2, #0
 80018ec:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80018ee:	7bfa      	ldrb	r2, [r7, #15]
 80018f0:	6879      	ldr	r1, [r7, #4]
 80018f2:	4613      	mov	r3, r2
 80018f4:	00db      	lsls	r3, r3, #3
 80018f6:	1a9b      	subs	r3, r3, r2
 80018f8:	009b      	lsls	r3, r3, #2
 80018fa:	440b      	add	r3, r1
 80018fc:	f503 7301 	add.w	r3, r3, #516	@ 0x204
 8001900:	2200      	movs	r2, #0
 8001902:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001904:	7bfa      	ldrb	r2, [r7, #15]
 8001906:	6879      	ldr	r1, [r7, #4]
 8001908:	4613      	mov	r3, r2
 800190a:	00db      	lsls	r3, r3, #3
 800190c:	1a9b      	subs	r3, r3, r2
 800190e:	009b      	lsls	r3, r3, #2
 8001910:	440b      	add	r3, r1
 8001912:	f503 7302 	add.w	r3, r3, #520	@ 0x208
 8001916:	2200      	movs	r2, #0
 8001918:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800191a:	7bfa      	ldrb	r2, [r7, #15]
 800191c:	6879      	ldr	r1, [r7, #4]
 800191e:	4613      	mov	r3, r2
 8001920:	00db      	lsls	r3, r3, #3
 8001922:	1a9b      	subs	r3, r3, r2
 8001924:	009b      	lsls	r3, r3, #2
 8001926:	440b      	add	r3, r1
 8001928:	f503 7304 	add.w	r3, r3, #528	@ 0x210
 800192c:	2200      	movs	r2, #0
 800192e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001930:	7bfb      	ldrb	r3, [r7, #15]
 8001932:	3301      	adds	r3, #1
 8001934:	73fb      	strb	r3, [r7, #15]
 8001936:	7bfa      	ldrb	r2, [r7, #15]
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	685b      	ldr	r3, [r3, #4]
 800193c:	429a      	cmp	r2, r3
 800193e:	d3b5      	bcc.n	80018ac <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	603b      	str	r3, [r7, #0]
 8001946:	687e      	ldr	r6, [r7, #4]
 8001948:	466d      	mov	r5, sp
 800194a:	f106 0410 	add.w	r4, r6, #16
 800194e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001950:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001952:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001954:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001956:	e894 0003 	ldmia.w	r4, {r0, r1}
 800195a:	e885 0003 	stmia.w	r5, {r0, r1}
 800195e:	1d33      	adds	r3, r6, #4
 8001960:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001962:	6838      	ldr	r0, [r7, #0]
 8001964:	f006 f878 	bl	8007a58 <USB_DevInit>
 8001968:	4603      	mov	r3, r0
 800196a:	2b00      	cmp	r3, #0
 800196c:	d005      	beq.n	800197a <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	2202      	movs	r2, #2
 8001972:	f883 23bd 	strb.w	r2, [r3, #957]	@ 0x3bd
    return HAL_ERROR;
 8001976:	2301      	movs	r3, #1
 8001978:	e014      	b.n	80019a4 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	2200      	movs	r2, #0
 800197e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	2201      	movs	r2, #1
 8001986:	f883 23bd 	strb.w	r2, [r3, #957]	@ 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800198e:	2b01      	cmp	r3, #1
 8001990:	d102      	bne.n	8001998 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001992:	6878      	ldr	r0, [r7, #4]
 8001994:	f000 f80a 	bl	80019ac <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	4618      	mov	r0, r3
 800199e:	f006 fa1a 	bl	8007dd6 <USB_DevDisconnect>

  return HAL_OK;
 80019a2:	2300      	movs	r3, #0
}
 80019a4:	4618      	mov	r0, r3
 80019a6:	3714      	adds	r7, #20
 80019a8:	46bd      	mov	sp, r7
 80019aa:	bdf0      	pop	{r4, r5, r6, r7, pc}

080019ac <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80019ac:	b480      	push	{r7}
 80019ae:	b085      	sub	sp, #20
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	2201      	movs	r2, #1
 80019be:	f8c3 23fc 	str.w	r2, [r3, #1020]	@ 0x3fc
  hpcd->LPM_State = LPM_L0;
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	2200      	movs	r2, #0
 80019c6:	f883 23f4 	strb.w	r2, [r3, #1012]	@ 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	699b      	ldr	r3, [r3, #24]
 80019ce:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80019da:	4b05      	ldr	r3, [pc, #20]	@ (80019f0 <HAL_PCDEx_ActivateLPM+0x44>)
 80019dc:	4313      	orrs	r3, r2
 80019de:	68fa      	ldr	r2, [r7, #12]
 80019e0:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 80019e2:	2300      	movs	r3, #0
}
 80019e4:	4618      	mov	r0, r3
 80019e6:	3714      	adds	r7, #20
 80019e8:	46bd      	mov	sp, r7
 80019ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ee:	4770      	bx	lr
 80019f0:	10000003 	.word	0x10000003

080019f4 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	b084      	sub	sp, #16
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80019fc:	4b19      	ldr	r3, [pc, #100]	@ (8001a64 <HAL_PWREx_ConfigSupply+0x70>)
 80019fe:	68db      	ldr	r3, [r3, #12]
 8001a00:	f003 0304 	and.w	r3, r3, #4
 8001a04:	2b04      	cmp	r3, #4
 8001a06:	d00a      	beq.n	8001a1e <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8001a08:	4b16      	ldr	r3, [pc, #88]	@ (8001a64 <HAL_PWREx_ConfigSupply+0x70>)
 8001a0a:	68db      	ldr	r3, [r3, #12]
 8001a0c:	f003 0307 	and.w	r3, r3, #7
 8001a10:	687a      	ldr	r2, [r7, #4]
 8001a12:	429a      	cmp	r2, r3
 8001a14:	d001      	beq.n	8001a1a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8001a16:	2301      	movs	r3, #1
 8001a18:	e01f      	b.n	8001a5a <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	e01d      	b.n	8001a5a <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8001a1e:	4b11      	ldr	r3, [pc, #68]	@ (8001a64 <HAL_PWREx_ConfigSupply+0x70>)
 8001a20:	68db      	ldr	r3, [r3, #12]
 8001a22:	f023 0207 	bic.w	r2, r3, #7
 8001a26:	490f      	ldr	r1, [pc, #60]	@ (8001a64 <HAL_PWREx_ConfigSupply+0x70>)
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	4313      	orrs	r3, r2
 8001a2c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8001a2e:	f7ff fbc9 	bl	80011c4 <HAL_GetTick>
 8001a32:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001a34:	e009      	b.n	8001a4a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001a36:	f7ff fbc5 	bl	80011c4 <HAL_GetTick>
 8001a3a:	4602      	mov	r2, r0
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	1ad3      	subs	r3, r2, r3
 8001a40:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001a44:	d901      	bls.n	8001a4a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8001a46:	2301      	movs	r3, #1
 8001a48:	e007      	b.n	8001a5a <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001a4a:	4b06      	ldr	r3, [pc, #24]	@ (8001a64 <HAL_PWREx_ConfigSupply+0x70>)
 8001a4c:	685b      	ldr	r3, [r3, #4]
 8001a4e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001a52:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001a56:	d1ee      	bne.n	8001a36 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8001a58:	2300      	movs	r3, #0
}
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	3710      	adds	r7, #16
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	bd80      	pop	{r7, pc}
 8001a62:	bf00      	nop
 8001a64:	58024800 	.word	0x58024800

08001a68 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8001a68:	b480      	push	{r7}
 8001a6a:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8001a6c:	4b05      	ldr	r3, [pc, #20]	@ (8001a84 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8001a6e:	68db      	ldr	r3, [r3, #12]
 8001a70:	4a04      	ldr	r2, [pc, #16]	@ (8001a84 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8001a72:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001a76:	60d3      	str	r3, [r2, #12]
}
 8001a78:	bf00      	nop
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a80:	4770      	bx	lr
 8001a82:	bf00      	nop
 8001a84:	58024800 	.word	0x58024800

08001a88 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi : QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b086      	sub	sp, #24
 8001a8c:	af02      	add	r7, sp, #8
 8001a8e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8001a90:	f7ff fb98 	bl	80011c4 <HAL_GetTick>
 8001a94:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d101      	bne.n	8001aa0 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8001a9c:	2301      	movs	r3, #1
 8001a9e:	e05f      	b.n	8001b60 <HAL_QSPI_Init+0xd8>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001aa6:	b2db      	uxtb	r3, r3
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d107      	bne.n	8001abc <HAL_QSPI_Init+0x34>

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8001aac:	6878      	ldr	r0, [r7, #4]
 8001aae:	f7fe ff85 	bl	80009bc <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8001ab2:	f241 3188 	movw	r1, #5000	@ 0x1388
 8001ab6:	6878      	ldr	r0, [r7, #4]
 8001ab8:	f000 f85a 	bl	8001b70 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	f423 6170 	bic.w	r1, r3, #3840	@ 0xf00
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	689b      	ldr	r3, [r3, #8]
 8001aca:	3b01      	subs	r3, #1
 8001acc:	021a      	lsls	r2, r3, #8
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	430a      	orrs	r2, r1
 8001ad4:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001ada:	9300      	str	r3, [sp, #0]
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	2200      	movs	r2, #0
 8001ae0:	2120      	movs	r1, #32
 8001ae2:	6878      	ldr	r0, [r7, #4]
 8001ae4:	f000 f852 	bl	8001b8c <QSPI_WaitFlagStateUntilTimeout>
 8001ae8:	4603      	mov	r3, r0
 8001aea:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8001aec:	7afb      	ldrb	r3, [r7, #11]
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d135      	bne.n	8001b5e <HAL_QSPI_Init+0xd6>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	681a      	ldr	r2, [r3, #0]
 8001af8:	4b1b      	ldr	r3, [pc, #108]	@ (8001b68 <HAL_QSPI_Init+0xe0>)
 8001afa:	4013      	ands	r3, r2
 8001afc:	687a      	ldr	r2, [r7, #4]
 8001afe:	6852      	ldr	r2, [r2, #4]
 8001b00:	0611      	lsls	r1, r2, #24
 8001b02:	687a      	ldr	r2, [r7, #4]
 8001b04:	68d2      	ldr	r2, [r2, #12]
 8001b06:	4311      	orrs	r1, r2
 8001b08:	687a      	ldr	r2, [r7, #4]
 8001b0a:	69d2      	ldr	r2, [r2, #28]
 8001b0c:	4311      	orrs	r1, r2
 8001b0e:	687a      	ldr	r2, [r7, #4]
 8001b10:	6a12      	ldr	r2, [r2, #32]
 8001b12:	4311      	orrs	r1, r2
 8001b14:	687a      	ldr	r2, [r7, #4]
 8001b16:	6812      	ldr	r2, [r2, #0]
 8001b18:	430b      	orrs	r3, r1
 8001b1a:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	685a      	ldr	r2, [r3, #4]
 8001b22:	4b12      	ldr	r3, [pc, #72]	@ (8001b6c <HAL_QSPI_Init+0xe4>)
 8001b24:	4013      	ands	r3, r2
 8001b26:	687a      	ldr	r2, [r7, #4]
 8001b28:	6912      	ldr	r2, [r2, #16]
 8001b2a:	0411      	lsls	r1, r2, #16
 8001b2c:	687a      	ldr	r2, [r7, #4]
 8001b2e:	6952      	ldr	r2, [r2, #20]
 8001b30:	4311      	orrs	r1, r2
 8001b32:	687a      	ldr	r2, [r7, #4]
 8001b34:	6992      	ldr	r2, [r2, #24]
 8001b36:	4311      	orrs	r1, r2
 8001b38:	687a      	ldr	r2, [r7, #4]
 8001b3a:	6812      	ldr	r2, [r2, #0]
 8001b3c:	430b      	orrs	r3, r1
 8001b3e:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	681a      	ldr	r2, [r3, #0]
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	f042 0201 	orr.w	r2, r2, #1
 8001b4e:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	2200      	movs	r2, #0
 8001b54:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	2201      	movs	r2, #1
 8001b5a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

  /* Return function status */
  return status;
 8001b5e:	7afb      	ldrb	r3, [r7, #11]
}
 8001b60:	4618      	mov	r0, r3
 8001b62:	3710      	adds	r7, #16
 8001b64:	46bd      	mov	sp, r7
 8001b66:	bd80      	pop	{r7, pc}
 8001b68:	00ffff2f 	.word	0x00ffff2f
 8001b6c:	ffe0f8fe 	.word	0xffe0f8fe

08001b70 <HAL_QSPI_SetTimeout>:
  * @param  hqspi : QSPI handle.
  * @param  Timeout : Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8001b70:	b480      	push	{r7}
 8001b72:	b083      	sub	sp, #12
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
 8001b78:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	683a      	ldr	r2, [r7, #0]
 8001b7e:	649a      	str	r2, [r3, #72]	@ 0x48
}
 8001b80:	bf00      	nop
 8001b82:	370c      	adds	r7, #12
 8001b84:	46bd      	mov	sp, r7
 8001b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8a:	4770      	bx	lr

08001b8c <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout : Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	b084      	sub	sp, #16
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	60f8      	str	r0, [r7, #12]
 8001b94:	60b9      	str	r1, [r7, #8]
 8001b96:	603b      	str	r3, [r7, #0]
 8001b98:	4613      	mov	r3, r2
 8001b9a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8001b9c:	e01a      	b.n	8001bd4 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001b9e:	69bb      	ldr	r3, [r7, #24]
 8001ba0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001ba4:	d016      	beq.n	8001bd4 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001ba6:	f7ff fb0d 	bl	80011c4 <HAL_GetTick>
 8001baa:	4602      	mov	r2, r0
 8001bac:	683b      	ldr	r3, [r7, #0]
 8001bae:	1ad3      	subs	r3, r2, r3
 8001bb0:	69ba      	ldr	r2, [r7, #24]
 8001bb2:	429a      	cmp	r2, r3
 8001bb4:	d302      	bcc.n	8001bbc <QSPI_WaitFlagStateUntilTimeout+0x30>
 8001bb6:	69bb      	ldr	r3, [r7, #24]
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d10b      	bne.n	8001bd4 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	2204      	movs	r2, #4
 8001bc0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001bc8:	f043 0201 	orr.w	r2, r3, #1
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	645a      	str	r2, [r3, #68]	@ 0x44

        return HAL_ERROR;
 8001bd0:	2301      	movs	r3, #1
 8001bd2:	e00e      	b.n	8001bf2 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	689a      	ldr	r2, [r3, #8]
 8001bda:	68bb      	ldr	r3, [r7, #8]
 8001bdc:	4013      	ands	r3, r2
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	bf14      	ite	ne
 8001be2:	2301      	movne	r3, #1
 8001be4:	2300      	moveq	r3, #0
 8001be6:	b2db      	uxtb	r3, r3
 8001be8:	461a      	mov	r2, r3
 8001bea:	79fb      	ldrb	r3, [r7, #7]
 8001bec:	429a      	cmp	r2, r3
 8001bee:	d1d6      	bne.n	8001b9e <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001bf0:	2300      	movs	r3, #0
}
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	3710      	adds	r7, #16
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	bd80      	pop	{r7, pc}
	...

08001bfc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	b08c      	sub	sp, #48	@ 0x30
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d101      	bne.n	8001c0e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001c0a:	2301      	movs	r3, #1
 8001c0c:	e3fd      	b.n	800240a <HAL_RCC_OscConfig+0x80e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f003 0301 	and.w	r3, r3, #1
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	f000 8087 	beq.w	8001d2a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001c1c:	4b99      	ldr	r3, [pc, #612]	@ (8001e84 <HAL_RCC_OscConfig+0x288>)
 8001c1e:	691b      	ldr	r3, [r3, #16]
 8001c20:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001c24:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001c26:	4b97      	ldr	r3, [pc, #604]	@ (8001e84 <HAL_RCC_OscConfig+0x288>)
 8001c28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c2a:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8001c2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001c2e:	2b10      	cmp	r3, #16
 8001c30:	d007      	beq.n	8001c42 <HAL_RCC_OscConfig+0x46>
 8001c32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001c34:	2b18      	cmp	r3, #24
 8001c36:	d110      	bne.n	8001c5a <HAL_RCC_OscConfig+0x5e>
 8001c38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001c3a:	f003 0303 	and.w	r3, r3, #3
 8001c3e:	2b02      	cmp	r3, #2
 8001c40:	d10b      	bne.n	8001c5a <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c42:	4b90      	ldr	r3, [pc, #576]	@ (8001e84 <HAL_RCC_OscConfig+0x288>)
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d06c      	beq.n	8001d28 <HAL_RCC_OscConfig+0x12c>
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	685b      	ldr	r3, [r3, #4]
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d168      	bne.n	8001d28 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001c56:	2301      	movs	r3, #1
 8001c58:	e3d7      	b.n	800240a <HAL_RCC_OscConfig+0x80e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	685b      	ldr	r3, [r3, #4]
 8001c5e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001c62:	d106      	bne.n	8001c72 <HAL_RCC_OscConfig+0x76>
 8001c64:	4b87      	ldr	r3, [pc, #540]	@ (8001e84 <HAL_RCC_OscConfig+0x288>)
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	4a86      	ldr	r2, [pc, #536]	@ (8001e84 <HAL_RCC_OscConfig+0x288>)
 8001c6a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001c6e:	6013      	str	r3, [r2, #0]
 8001c70:	e02e      	b.n	8001cd0 <HAL_RCC_OscConfig+0xd4>
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	685b      	ldr	r3, [r3, #4]
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d10c      	bne.n	8001c94 <HAL_RCC_OscConfig+0x98>
 8001c7a:	4b82      	ldr	r3, [pc, #520]	@ (8001e84 <HAL_RCC_OscConfig+0x288>)
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	4a81      	ldr	r2, [pc, #516]	@ (8001e84 <HAL_RCC_OscConfig+0x288>)
 8001c80:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001c84:	6013      	str	r3, [r2, #0]
 8001c86:	4b7f      	ldr	r3, [pc, #508]	@ (8001e84 <HAL_RCC_OscConfig+0x288>)
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	4a7e      	ldr	r2, [pc, #504]	@ (8001e84 <HAL_RCC_OscConfig+0x288>)
 8001c8c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001c90:	6013      	str	r3, [r2, #0]
 8001c92:	e01d      	b.n	8001cd0 <HAL_RCC_OscConfig+0xd4>
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	685b      	ldr	r3, [r3, #4]
 8001c98:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001c9c:	d10c      	bne.n	8001cb8 <HAL_RCC_OscConfig+0xbc>
 8001c9e:	4b79      	ldr	r3, [pc, #484]	@ (8001e84 <HAL_RCC_OscConfig+0x288>)
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	4a78      	ldr	r2, [pc, #480]	@ (8001e84 <HAL_RCC_OscConfig+0x288>)
 8001ca4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001ca8:	6013      	str	r3, [r2, #0]
 8001caa:	4b76      	ldr	r3, [pc, #472]	@ (8001e84 <HAL_RCC_OscConfig+0x288>)
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	4a75      	ldr	r2, [pc, #468]	@ (8001e84 <HAL_RCC_OscConfig+0x288>)
 8001cb0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001cb4:	6013      	str	r3, [r2, #0]
 8001cb6:	e00b      	b.n	8001cd0 <HAL_RCC_OscConfig+0xd4>
 8001cb8:	4b72      	ldr	r3, [pc, #456]	@ (8001e84 <HAL_RCC_OscConfig+0x288>)
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	4a71      	ldr	r2, [pc, #452]	@ (8001e84 <HAL_RCC_OscConfig+0x288>)
 8001cbe:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001cc2:	6013      	str	r3, [r2, #0]
 8001cc4:	4b6f      	ldr	r3, [pc, #444]	@ (8001e84 <HAL_RCC_OscConfig+0x288>)
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	4a6e      	ldr	r2, [pc, #440]	@ (8001e84 <HAL_RCC_OscConfig+0x288>)
 8001cca:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001cce:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	685b      	ldr	r3, [r3, #4]
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d013      	beq.n	8001d00 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cd8:	f7ff fa74 	bl	80011c4 <HAL_GetTick>
 8001cdc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001cde:	e008      	b.n	8001cf2 <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001ce0:	f7ff fa70 	bl	80011c4 <HAL_GetTick>
 8001ce4:	4602      	mov	r2, r0
 8001ce6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ce8:	1ad3      	subs	r3, r2, r3
 8001cea:	2b64      	cmp	r3, #100	@ 0x64
 8001cec:	d901      	bls.n	8001cf2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001cee:	2303      	movs	r3, #3
 8001cf0:	e38b      	b.n	800240a <HAL_RCC_OscConfig+0x80e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001cf2:	4b64      	ldr	r3, [pc, #400]	@ (8001e84 <HAL_RCC_OscConfig+0x288>)
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d0f0      	beq.n	8001ce0 <HAL_RCC_OscConfig+0xe4>
 8001cfe:	e014      	b.n	8001d2a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d00:	f7ff fa60 	bl	80011c4 <HAL_GetTick>
 8001d04:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001d06:	e008      	b.n	8001d1a <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001d08:	f7ff fa5c 	bl	80011c4 <HAL_GetTick>
 8001d0c:	4602      	mov	r2, r0
 8001d0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d10:	1ad3      	subs	r3, r2, r3
 8001d12:	2b64      	cmp	r3, #100	@ 0x64
 8001d14:	d901      	bls.n	8001d1a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001d16:	2303      	movs	r3, #3
 8001d18:	e377      	b.n	800240a <HAL_RCC_OscConfig+0x80e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001d1a:	4b5a      	ldr	r3, [pc, #360]	@ (8001e84 <HAL_RCC_OscConfig+0x288>)
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d1f0      	bne.n	8001d08 <HAL_RCC_OscConfig+0x10c>
 8001d26:	e000      	b.n	8001d2a <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d28:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	f003 0302 	and.w	r3, r3, #2
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	f000 80ae 	beq.w	8001e94 <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001d38:	4b52      	ldr	r3, [pc, #328]	@ (8001e84 <HAL_RCC_OscConfig+0x288>)
 8001d3a:	691b      	ldr	r3, [r3, #16]
 8001d3c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001d40:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001d42:	4b50      	ldr	r3, [pc, #320]	@ (8001e84 <HAL_RCC_OscConfig+0x288>)
 8001d44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d46:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8001d48:	6a3b      	ldr	r3, [r7, #32]
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d007      	beq.n	8001d5e <HAL_RCC_OscConfig+0x162>
 8001d4e:	6a3b      	ldr	r3, [r7, #32]
 8001d50:	2b18      	cmp	r3, #24
 8001d52:	d13a      	bne.n	8001dca <HAL_RCC_OscConfig+0x1ce>
 8001d54:	69fb      	ldr	r3, [r7, #28]
 8001d56:	f003 0303 	and.w	r3, r3, #3
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d135      	bne.n	8001dca <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001d5e:	4b49      	ldr	r3, [pc, #292]	@ (8001e84 <HAL_RCC_OscConfig+0x288>)
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	f003 0304 	and.w	r3, r3, #4
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d005      	beq.n	8001d76 <HAL_RCC_OscConfig+0x17a>
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	68db      	ldr	r3, [r3, #12]
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d101      	bne.n	8001d76 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8001d72:	2301      	movs	r3, #1
 8001d74:	e349      	b.n	800240a <HAL_RCC_OscConfig+0x80e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d76:	f7ff fa55 	bl	8001224 <HAL_GetREVID>
 8001d7a:	4603      	mov	r3, r0
 8001d7c:	f241 0203 	movw	r2, #4099	@ 0x1003
 8001d80:	4293      	cmp	r3, r2
 8001d82:	d817      	bhi.n	8001db4 <HAL_RCC_OscConfig+0x1b8>
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	691b      	ldr	r3, [r3, #16]
 8001d88:	2b40      	cmp	r3, #64	@ 0x40
 8001d8a:	d108      	bne.n	8001d9e <HAL_RCC_OscConfig+0x1a2>
 8001d8c:	4b3d      	ldr	r3, [pc, #244]	@ (8001e84 <HAL_RCC_OscConfig+0x288>)
 8001d8e:	685b      	ldr	r3, [r3, #4]
 8001d90:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8001d94:	4a3b      	ldr	r2, [pc, #236]	@ (8001e84 <HAL_RCC_OscConfig+0x288>)
 8001d96:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001d9a:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001d9c:	e07a      	b.n	8001e94 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d9e:	4b39      	ldr	r3, [pc, #228]	@ (8001e84 <HAL_RCC_OscConfig+0x288>)
 8001da0:	685b      	ldr	r3, [r3, #4]
 8001da2:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	691b      	ldr	r3, [r3, #16]
 8001daa:	031b      	lsls	r3, r3, #12
 8001dac:	4935      	ldr	r1, [pc, #212]	@ (8001e84 <HAL_RCC_OscConfig+0x288>)
 8001dae:	4313      	orrs	r3, r2
 8001db0:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001db2:	e06f      	b.n	8001e94 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001db4:	4b33      	ldr	r3, [pc, #204]	@ (8001e84 <HAL_RCC_OscConfig+0x288>)
 8001db6:	685b      	ldr	r3, [r3, #4]
 8001db8:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	691b      	ldr	r3, [r3, #16]
 8001dc0:	061b      	lsls	r3, r3, #24
 8001dc2:	4930      	ldr	r1, [pc, #192]	@ (8001e84 <HAL_RCC_OscConfig+0x288>)
 8001dc4:	4313      	orrs	r3, r2
 8001dc6:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001dc8:	e064      	b.n	8001e94 <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	68db      	ldr	r3, [r3, #12]
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d045      	beq.n	8001e5e <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001dd2:	4b2c      	ldr	r3, [pc, #176]	@ (8001e84 <HAL_RCC_OscConfig+0x288>)
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f023 0219 	bic.w	r2, r3, #25
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	68db      	ldr	r3, [r3, #12]
 8001dde:	4929      	ldr	r1, [pc, #164]	@ (8001e84 <HAL_RCC_OscConfig+0x288>)
 8001de0:	4313      	orrs	r3, r2
 8001de2:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001de4:	f7ff f9ee 	bl	80011c4 <HAL_GetTick>
 8001de8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001dea:	e008      	b.n	8001dfe <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001dec:	f7ff f9ea 	bl	80011c4 <HAL_GetTick>
 8001df0:	4602      	mov	r2, r0
 8001df2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001df4:	1ad3      	subs	r3, r2, r3
 8001df6:	2b02      	cmp	r3, #2
 8001df8:	d901      	bls.n	8001dfe <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 8001dfa:	2303      	movs	r3, #3
 8001dfc:	e305      	b.n	800240a <HAL_RCC_OscConfig+0x80e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001dfe:	4b21      	ldr	r3, [pc, #132]	@ (8001e84 <HAL_RCC_OscConfig+0x288>)
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f003 0304 	and.w	r3, r3, #4
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d0f0      	beq.n	8001dec <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e0a:	f7ff fa0b 	bl	8001224 <HAL_GetREVID>
 8001e0e:	4603      	mov	r3, r0
 8001e10:	f241 0203 	movw	r2, #4099	@ 0x1003
 8001e14:	4293      	cmp	r3, r2
 8001e16:	d817      	bhi.n	8001e48 <HAL_RCC_OscConfig+0x24c>
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	691b      	ldr	r3, [r3, #16]
 8001e1c:	2b40      	cmp	r3, #64	@ 0x40
 8001e1e:	d108      	bne.n	8001e32 <HAL_RCC_OscConfig+0x236>
 8001e20:	4b18      	ldr	r3, [pc, #96]	@ (8001e84 <HAL_RCC_OscConfig+0x288>)
 8001e22:	685b      	ldr	r3, [r3, #4]
 8001e24:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8001e28:	4a16      	ldr	r2, [pc, #88]	@ (8001e84 <HAL_RCC_OscConfig+0x288>)
 8001e2a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001e2e:	6053      	str	r3, [r2, #4]
 8001e30:	e030      	b.n	8001e94 <HAL_RCC_OscConfig+0x298>
 8001e32:	4b14      	ldr	r3, [pc, #80]	@ (8001e84 <HAL_RCC_OscConfig+0x288>)
 8001e34:	685b      	ldr	r3, [r3, #4]
 8001e36:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	691b      	ldr	r3, [r3, #16]
 8001e3e:	031b      	lsls	r3, r3, #12
 8001e40:	4910      	ldr	r1, [pc, #64]	@ (8001e84 <HAL_RCC_OscConfig+0x288>)
 8001e42:	4313      	orrs	r3, r2
 8001e44:	604b      	str	r3, [r1, #4]
 8001e46:	e025      	b.n	8001e94 <HAL_RCC_OscConfig+0x298>
 8001e48:	4b0e      	ldr	r3, [pc, #56]	@ (8001e84 <HAL_RCC_OscConfig+0x288>)
 8001e4a:	685b      	ldr	r3, [r3, #4]
 8001e4c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	691b      	ldr	r3, [r3, #16]
 8001e54:	061b      	lsls	r3, r3, #24
 8001e56:	490b      	ldr	r1, [pc, #44]	@ (8001e84 <HAL_RCC_OscConfig+0x288>)
 8001e58:	4313      	orrs	r3, r2
 8001e5a:	604b      	str	r3, [r1, #4]
 8001e5c:	e01a      	b.n	8001e94 <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e5e:	4b09      	ldr	r3, [pc, #36]	@ (8001e84 <HAL_RCC_OscConfig+0x288>)
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	4a08      	ldr	r2, [pc, #32]	@ (8001e84 <HAL_RCC_OscConfig+0x288>)
 8001e64:	f023 0301 	bic.w	r3, r3, #1
 8001e68:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e6a:	f7ff f9ab 	bl	80011c4 <HAL_GetTick>
 8001e6e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001e70:	e00a      	b.n	8001e88 <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001e72:	f7ff f9a7 	bl	80011c4 <HAL_GetTick>
 8001e76:	4602      	mov	r2, r0
 8001e78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e7a:	1ad3      	subs	r3, r2, r3
 8001e7c:	2b02      	cmp	r3, #2
 8001e7e:	d903      	bls.n	8001e88 <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 8001e80:	2303      	movs	r3, #3
 8001e82:	e2c2      	b.n	800240a <HAL_RCC_OscConfig+0x80e>
 8001e84:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001e88:	4b94      	ldr	r3, [pc, #592]	@ (80020dc <HAL_RCC_OscConfig+0x4e0>)
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	f003 0304 	and.w	r3, r3, #4
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d1ee      	bne.n	8001e72 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	f003 0310 	and.w	r3, r3, #16
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	f000 80a9 	beq.w	8001ff4 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001ea2:	4b8e      	ldr	r3, [pc, #568]	@ (80020dc <HAL_RCC_OscConfig+0x4e0>)
 8001ea4:	691b      	ldr	r3, [r3, #16]
 8001ea6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001eaa:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001eac:	4b8b      	ldr	r3, [pc, #556]	@ (80020dc <HAL_RCC_OscConfig+0x4e0>)
 8001eae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001eb0:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8001eb2:	69bb      	ldr	r3, [r7, #24]
 8001eb4:	2b08      	cmp	r3, #8
 8001eb6:	d007      	beq.n	8001ec8 <HAL_RCC_OscConfig+0x2cc>
 8001eb8:	69bb      	ldr	r3, [r7, #24]
 8001eba:	2b18      	cmp	r3, #24
 8001ebc:	d13a      	bne.n	8001f34 <HAL_RCC_OscConfig+0x338>
 8001ebe:	697b      	ldr	r3, [r7, #20]
 8001ec0:	f003 0303 	and.w	r3, r3, #3
 8001ec4:	2b01      	cmp	r3, #1
 8001ec6:	d135      	bne.n	8001f34 <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001ec8:	4b84      	ldr	r3, [pc, #528]	@ (80020dc <HAL_RCC_OscConfig+0x4e0>)
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d005      	beq.n	8001ee0 <HAL_RCC_OscConfig+0x2e4>
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	69db      	ldr	r3, [r3, #28]
 8001ed8:	2b80      	cmp	r3, #128	@ 0x80
 8001eda:	d001      	beq.n	8001ee0 <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 8001edc:	2301      	movs	r3, #1
 8001ede:	e294      	b.n	800240a <HAL_RCC_OscConfig+0x80e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001ee0:	f7ff f9a0 	bl	8001224 <HAL_GetREVID>
 8001ee4:	4603      	mov	r3, r0
 8001ee6:	f241 0203 	movw	r2, #4099	@ 0x1003
 8001eea:	4293      	cmp	r3, r2
 8001eec:	d817      	bhi.n	8001f1e <HAL_RCC_OscConfig+0x322>
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	6a1b      	ldr	r3, [r3, #32]
 8001ef2:	2b20      	cmp	r3, #32
 8001ef4:	d108      	bne.n	8001f08 <HAL_RCC_OscConfig+0x30c>
 8001ef6:	4b79      	ldr	r3, [pc, #484]	@ (80020dc <HAL_RCC_OscConfig+0x4e0>)
 8001ef8:	685b      	ldr	r3, [r3, #4]
 8001efa:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8001efe:	4a77      	ldr	r2, [pc, #476]	@ (80020dc <HAL_RCC_OscConfig+0x4e0>)
 8001f00:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8001f04:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001f06:	e075      	b.n	8001ff4 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001f08:	4b74      	ldr	r3, [pc, #464]	@ (80020dc <HAL_RCC_OscConfig+0x4e0>)
 8001f0a:	685b      	ldr	r3, [r3, #4]
 8001f0c:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	6a1b      	ldr	r3, [r3, #32]
 8001f14:	069b      	lsls	r3, r3, #26
 8001f16:	4971      	ldr	r1, [pc, #452]	@ (80020dc <HAL_RCC_OscConfig+0x4e0>)
 8001f18:	4313      	orrs	r3, r2
 8001f1a:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001f1c:	e06a      	b.n	8001ff4 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001f1e:	4b6f      	ldr	r3, [pc, #444]	@ (80020dc <HAL_RCC_OscConfig+0x4e0>)
 8001f20:	68db      	ldr	r3, [r3, #12]
 8001f22:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	6a1b      	ldr	r3, [r3, #32]
 8001f2a:	061b      	lsls	r3, r3, #24
 8001f2c:	496b      	ldr	r1, [pc, #428]	@ (80020dc <HAL_RCC_OscConfig+0x4e0>)
 8001f2e:	4313      	orrs	r3, r2
 8001f30:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001f32:	e05f      	b.n	8001ff4 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	69db      	ldr	r3, [r3, #28]
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d042      	beq.n	8001fc2 <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8001f3c:	4b67      	ldr	r3, [pc, #412]	@ (80020dc <HAL_RCC_OscConfig+0x4e0>)
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	4a66      	ldr	r2, [pc, #408]	@ (80020dc <HAL_RCC_OscConfig+0x4e0>)
 8001f42:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001f46:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f48:	f7ff f93c 	bl	80011c4 <HAL_GetTick>
 8001f4c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001f4e:	e008      	b.n	8001f62 <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8001f50:	f7ff f938 	bl	80011c4 <HAL_GetTick>
 8001f54:	4602      	mov	r2, r0
 8001f56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f58:	1ad3      	subs	r3, r2, r3
 8001f5a:	2b02      	cmp	r3, #2
 8001f5c:	d901      	bls.n	8001f62 <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 8001f5e:	2303      	movs	r3, #3
 8001f60:	e253      	b.n	800240a <HAL_RCC_OscConfig+0x80e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001f62:	4b5e      	ldr	r3, [pc, #376]	@ (80020dc <HAL_RCC_OscConfig+0x4e0>)
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d0f0      	beq.n	8001f50 <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001f6e:	f7ff f959 	bl	8001224 <HAL_GetREVID>
 8001f72:	4603      	mov	r3, r0
 8001f74:	f241 0203 	movw	r2, #4099	@ 0x1003
 8001f78:	4293      	cmp	r3, r2
 8001f7a:	d817      	bhi.n	8001fac <HAL_RCC_OscConfig+0x3b0>
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	6a1b      	ldr	r3, [r3, #32]
 8001f80:	2b20      	cmp	r3, #32
 8001f82:	d108      	bne.n	8001f96 <HAL_RCC_OscConfig+0x39a>
 8001f84:	4b55      	ldr	r3, [pc, #340]	@ (80020dc <HAL_RCC_OscConfig+0x4e0>)
 8001f86:	685b      	ldr	r3, [r3, #4]
 8001f88:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8001f8c:	4a53      	ldr	r2, [pc, #332]	@ (80020dc <HAL_RCC_OscConfig+0x4e0>)
 8001f8e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8001f92:	6053      	str	r3, [r2, #4]
 8001f94:	e02e      	b.n	8001ff4 <HAL_RCC_OscConfig+0x3f8>
 8001f96:	4b51      	ldr	r3, [pc, #324]	@ (80020dc <HAL_RCC_OscConfig+0x4e0>)
 8001f98:	685b      	ldr	r3, [r3, #4]
 8001f9a:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	6a1b      	ldr	r3, [r3, #32]
 8001fa2:	069b      	lsls	r3, r3, #26
 8001fa4:	494d      	ldr	r1, [pc, #308]	@ (80020dc <HAL_RCC_OscConfig+0x4e0>)
 8001fa6:	4313      	orrs	r3, r2
 8001fa8:	604b      	str	r3, [r1, #4]
 8001faa:	e023      	b.n	8001ff4 <HAL_RCC_OscConfig+0x3f8>
 8001fac:	4b4b      	ldr	r3, [pc, #300]	@ (80020dc <HAL_RCC_OscConfig+0x4e0>)
 8001fae:	68db      	ldr	r3, [r3, #12]
 8001fb0:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	6a1b      	ldr	r3, [r3, #32]
 8001fb8:	061b      	lsls	r3, r3, #24
 8001fba:	4948      	ldr	r1, [pc, #288]	@ (80020dc <HAL_RCC_OscConfig+0x4e0>)
 8001fbc:	4313      	orrs	r3, r2
 8001fbe:	60cb      	str	r3, [r1, #12]
 8001fc0:	e018      	b.n	8001ff4 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8001fc2:	4b46      	ldr	r3, [pc, #280]	@ (80020dc <HAL_RCC_OscConfig+0x4e0>)
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	4a45      	ldr	r2, [pc, #276]	@ (80020dc <HAL_RCC_OscConfig+0x4e0>)
 8001fc8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001fcc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fce:	f7ff f8f9 	bl	80011c4 <HAL_GetTick>
 8001fd2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001fd4:	e008      	b.n	8001fe8 <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8001fd6:	f7ff f8f5 	bl	80011c4 <HAL_GetTick>
 8001fda:	4602      	mov	r2, r0
 8001fdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fde:	1ad3      	subs	r3, r2, r3
 8001fe0:	2b02      	cmp	r3, #2
 8001fe2:	d901      	bls.n	8001fe8 <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 8001fe4:	2303      	movs	r3, #3
 8001fe6:	e210      	b.n	800240a <HAL_RCC_OscConfig+0x80e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001fe8:	4b3c      	ldr	r3, [pc, #240]	@ (80020dc <HAL_RCC_OscConfig+0x4e0>)
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d1f0      	bne.n	8001fd6 <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	f003 0308 	and.w	r3, r3, #8
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d036      	beq.n	800206e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	695b      	ldr	r3, [r3, #20]
 8002004:	2b00      	cmp	r3, #0
 8002006:	d019      	beq.n	800203c <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002008:	4b34      	ldr	r3, [pc, #208]	@ (80020dc <HAL_RCC_OscConfig+0x4e0>)
 800200a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800200c:	4a33      	ldr	r2, [pc, #204]	@ (80020dc <HAL_RCC_OscConfig+0x4e0>)
 800200e:	f043 0301 	orr.w	r3, r3, #1
 8002012:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002014:	f7ff f8d6 	bl	80011c4 <HAL_GetTick>
 8002018:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800201a:	e008      	b.n	800202e <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800201c:	f7ff f8d2 	bl	80011c4 <HAL_GetTick>
 8002020:	4602      	mov	r2, r0
 8002022:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002024:	1ad3      	subs	r3, r2, r3
 8002026:	2b02      	cmp	r3, #2
 8002028:	d901      	bls.n	800202e <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 800202a:	2303      	movs	r3, #3
 800202c:	e1ed      	b.n	800240a <HAL_RCC_OscConfig+0x80e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800202e:	4b2b      	ldr	r3, [pc, #172]	@ (80020dc <HAL_RCC_OscConfig+0x4e0>)
 8002030:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002032:	f003 0302 	and.w	r3, r3, #2
 8002036:	2b00      	cmp	r3, #0
 8002038:	d0f0      	beq.n	800201c <HAL_RCC_OscConfig+0x420>
 800203a:	e018      	b.n	800206e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800203c:	4b27      	ldr	r3, [pc, #156]	@ (80020dc <HAL_RCC_OscConfig+0x4e0>)
 800203e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002040:	4a26      	ldr	r2, [pc, #152]	@ (80020dc <HAL_RCC_OscConfig+0x4e0>)
 8002042:	f023 0301 	bic.w	r3, r3, #1
 8002046:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002048:	f7ff f8bc 	bl	80011c4 <HAL_GetTick>
 800204c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800204e:	e008      	b.n	8002062 <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002050:	f7ff f8b8 	bl	80011c4 <HAL_GetTick>
 8002054:	4602      	mov	r2, r0
 8002056:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002058:	1ad3      	subs	r3, r2, r3
 800205a:	2b02      	cmp	r3, #2
 800205c:	d901      	bls.n	8002062 <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 800205e:	2303      	movs	r3, #3
 8002060:	e1d3      	b.n	800240a <HAL_RCC_OscConfig+0x80e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002062:	4b1e      	ldr	r3, [pc, #120]	@ (80020dc <HAL_RCC_OscConfig+0x4e0>)
 8002064:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002066:	f003 0302 	and.w	r3, r3, #2
 800206a:	2b00      	cmp	r3, #0
 800206c:	d1f0      	bne.n	8002050 <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f003 0320 	and.w	r3, r3, #32
 8002076:	2b00      	cmp	r3, #0
 8002078:	d038      	beq.n	80020ec <HAL_RCC_OscConfig+0x4f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	699b      	ldr	r3, [r3, #24]
 800207e:	2b00      	cmp	r3, #0
 8002080:	d019      	beq.n	80020b6 <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002082:	4b16      	ldr	r3, [pc, #88]	@ (80020dc <HAL_RCC_OscConfig+0x4e0>)
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	4a15      	ldr	r2, [pc, #84]	@ (80020dc <HAL_RCC_OscConfig+0x4e0>)
 8002088:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800208c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800208e:	f7ff f899 	bl	80011c4 <HAL_GetTick>
 8002092:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002094:	e008      	b.n	80020a8 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8002096:	f7ff f895 	bl	80011c4 <HAL_GetTick>
 800209a:	4602      	mov	r2, r0
 800209c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800209e:	1ad3      	subs	r3, r2, r3
 80020a0:	2b02      	cmp	r3, #2
 80020a2:	d901      	bls.n	80020a8 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 80020a4:	2303      	movs	r3, #3
 80020a6:	e1b0      	b.n	800240a <HAL_RCC_OscConfig+0x80e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80020a8:	4b0c      	ldr	r3, [pc, #48]	@ (80020dc <HAL_RCC_OscConfig+0x4e0>)
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d0f0      	beq.n	8002096 <HAL_RCC_OscConfig+0x49a>
 80020b4:	e01a      	b.n	80020ec <HAL_RCC_OscConfig+0x4f0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80020b6:	4b09      	ldr	r3, [pc, #36]	@ (80020dc <HAL_RCC_OscConfig+0x4e0>)
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	4a08      	ldr	r2, [pc, #32]	@ (80020dc <HAL_RCC_OscConfig+0x4e0>)
 80020bc:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80020c0:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80020c2:	f7ff f87f 	bl	80011c4 <HAL_GetTick>
 80020c6:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80020c8:	e00a      	b.n	80020e0 <HAL_RCC_OscConfig+0x4e4>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80020ca:	f7ff f87b 	bl	80011c4 <HAL_GetTick>
 80020ce:	4602      	mov	r2, r0
 80020d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020d2:	1ad3      	subs	r3, r2, r3
 80020d4:	2b02      	cmp	r3, #2
 80020d6:	d903      	bls.n	80020e0 <HAL_RCC_OscConfig+0x4e4>
        {
          return HAL_TIMEOUT;
 80020d8:	2303      	movs	r3, #3
 80020da:	e196      	b.n	800240a <HAL_RCC_OscConfig+0x80e>
 80020dc:	58024400 	.word	0x58024400
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80020e0:	4b99      	ldr	r3, [pc, #612]	@ (8002348 <HAL_RCC_OscConfig+0x74c>)
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d1ee      	bne.n	80020ca <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	f003 0304 	and.w	r3, r3, #4
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	f000 8081 	beq.w	80021fc <HAL_RCC_OscConfig+0x600>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80020fa:	4b94      	ldr	r3, [pc, #592]	@ (800234c <HAL_RCC_OscConfig+0x750>)
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	4a93      	ldr	r2, [pc, #588]	@ (800234c <HAL_RCC_OscConfig+0x750>)
 8002100:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002104:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002106:	f7ff f85d 	bl	80011c4 <HAL_GetTick>
 800210a:	6278      	str	r0, [r7, #36]	@ 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800210c:	e008      	b.n	8002120 <HAL_RCC_OscConfig+0x524>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800210e:	f7ff f859 	bl	80011c4 <HAL_GetTick>
 8002112:	4602      	mov	r2, r0
 8002114:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002116:	1ad3      	subs	r3, r2, r3
 8002118:	2b64      	cmp	r3, #100	@ 0x64
 800211a:	d901      	bls.n	8002120 <HAL_RCC_OscConfig+0x524>
      {
        return HAL_TIMEOUT;
 800211c:	2303      	movs	r3, #3
 800211e:	e174      	b.n	800240a <HAL_RCC_OscConfig+0x80e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002120:	4b8a      	ldr	r3, [pc, #552]	@ (800234c <HAL_RCC_OscConfig+0x750>)
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002128:	2b00      	cmp	r3, #0
 800212a:	d0f0      	beq.n	800210e <HAL_RCC_OscConfig+0x512>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	689b      	ldr	r3, [r3, #8]
 8002130:	2b01      	cmp	r3, #1
 8002132:	d106      	bne.n	8002142 <HAL_RCC_OscConfig+0x546>
 8002134:	4b84      	ldr	r3, [pc, #528]	@ (8002348 <HAL_RCC_OscConfig+0x74c>)
 8002136:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002138:	4a83      	ldr	r2, [pc, #524]	@ (8002348 <HAL_RCC_OscConfig+0x74c>)
 800213a:	f043 0301 	orr.w	r3, r3, #1
 800213e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002140:	e02d      	b.n	800219e <HAL_RCC_OscConfig+0x5a2>
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	689b      	ldr	r3, [r3, #8]
 8002146:	2b00      	cmp	r3, #0
 8002148:	d10c      	bne.n	8002164 <HAL_RCC_OscConfig+0x568>
 800214a:	4b7f      	ldr	r3, [pc, #508]	@ (8002348 <HAL_RCC_OscConfig+0x74c>)
 800214c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800214e:	4a7e      	ldr	r2, [pc, #504]	@ (8002348 <HAL_RCC_OscConfig+0x74c>)
 8002150:	f023 0301 	bic.w	r3, r3, #1
 8002154:	6713      	str	r3, [r2, #112]	@ 0x70
 8002156:	4b7c      	ldr	r3, [pc, #496]	@ (8002348 <HAL_RCC_OscConfig+0x74c>)
 8002158:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800215a:	4a7b      	ldr	r2, [pc, #492]	@ (8002348 <HAL_RCC_OscConfig+0x74c>)
 800215c:	f023 0304 	bic.w	r3, r3, #4
 8002160:	6713      	str	r3, [r2, #112]	@ 0x70
 8002162:	e01c      	b.n	800219e <HAL_RCC_OscConfig+0x5a2>
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	689b      	ldr	r3, [r3, #8]
 8002168:	2b05      	cmp	r3, #5
 800216a:	d10c      	bne.n	8002186 <HAL_RCC_OscConfig+0x58a>
 800216c:	4b76      	ldr	r3, [pc, #472]	@ (8002348 <HAL_RCC_OscConfig+0x74c>)
 800216e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002170:	4a75      	ldr	r2, [pc, #468]	@ (8002348 <HAL_RCC_OscConfig+0x74c>)
 8002172:	f043 0304 	orr.w	r3, r3, #4
 8002176:	6713      	str	r3, [r2, #112]	@ 0x70
 8002178:	4b73      	ldr	r3, [pc, #460]	@ (8002348 <HAL_RCC_OscConfig+0x74c>)
 800217a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800217c:	4a72      	ldr	r2, [pc, #456]	@ (8002348 <HAL_RCC_OscConfig+0x74c>)
 800217e:	f043 0301 	orr.w	r3, r3, #1
 8002182:	6713      	str	r3, [r2, #112]	@ 0x70
 8002184:	e00b      	b.n	800219e <HAL_RCC_OscConfig+0x5a2>
 8002186:	4b70      	ldr	r3, [pc, #448]	@ (8002348 <HAL_RCC_OscConfig+0x74c>)
 8002188:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800218a:	4a6f      	ldr	r2, [pc, #444]	@ (8002348 <HAL_RCC_OscConfig+0x74c>)
 800218c:	f023 0301 	bic.w	r3, r3, #1
 8002190:	6713      	str	r3, [r2, #112]	@ 0x70
 8002192:	4b6d      	ldr	r3, [pc, #436]	@ (8002348 <HAL_RCC_OscConfig+0x74c>)
 8002194:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002196:	4a6c      	ldr	r2, [pc, #432]	@ (8002348 <HAL_RCC_OscConfig+0x74c>)
 8002198:	f023 0304 	bic.w	r3, r3, #4
 800219c:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	689b      	ldr	r3, [r3, #8]
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d015      	beq.n	80021d2 <HAL_RCC_OscConfig+0x5d6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021a6:	f7ff f80d 	bl	80011c4 <HAL_GetTick>
 80021aa:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80021ac:	e00a      	b.n	80021c4 <HAL_RCC_OscConfig+0x5c8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80021ae:	f7ff f809 	bl	80011c4 <HAL_GetTick>
 80021b2:	4602      	mov	r2, r0
 80021b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021b6:	1ad3      	subs	r3, r2, r3
 80021b8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80021bc:	4293      	cmp	r3, r2
 80021be:	d901      	bls.n	80021c4 <HAL_RCC_OscConfig+0x5c8>
        {
          return HAL_TIMEOUT;
 80021c0:	2303      	movs	r3, #3
 80021c2:	e122      	b.n	800240a <HAL_RCC_OscConfig+0x80e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80021c4:	4b60      	ldr	r3, [pc, #384]	@ (8002348 <HAL_RCC_OscConfig+0x74c>)
 80021c6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80021c8:	f003 0302 	and.w	r3, r3, #2
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d0ee      	beq.n	80021ae <HAL_RCC_OscConfig+0x5b2>
 80021d0:	e014      	b.n	80021fc <HAL_RCC_OscConfig+0x600>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021d2:	f7fe fff7 	bl	80011c4 <HAL_GetTick>
 80021d6:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80021d8:	e00a      	b.n	80021f0 <HAL_RCC_OscConfig+0x5f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80021da:	f7fe fff3 	bl	80011c4 <HAL_GetTick>
 80021de:	4602      	mov	r2, r0
 80021e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021e2:	1ad3      	subs	r3, r2, r3
 80021e4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80021e8:	4293      	cmp	r3, r2
 80021ea:	d901      	bls.n	80021f0 <HAL_RCC_OscConfig+0x5f4>
        {
          return HAL_TIMEOUT;
 80021ec:	2303      	movs	r3, #3
 80021ee:	e10c      	b.n	800240a <HAL_RCC_OscConfig+0x80e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80021f0:	4b55      	ldr	r3, [pc, #340]	@ (8002348 <HAL_RCC_OscConfig+0x74c>)
 80021f2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80021f4:	f003 0302 	and.w	r3, r3, #2
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d1ee      	bne.n	80021da <HAL_RCC_OscConfig+0x5de>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002200:	2b00      	cmp	r3, #0
 8002202:	f000 8101 	beq.w	8002408 <HAL_RCC_OscConfig+0x80c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002206:	4b50      	ldr	r3, [pc, #320]	@ (8002348 <HAL_RCC_OscConfig+0x74c>)
 8002208:	691b      	ldr	r3, [r3, #16]
 800220a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800220e:	2b18      	cmp	r3, #24
 8002210:	f000 80bc 	beq.w	800238c <HAL_RCC_OscConfig+0x790>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002218:	2b02      	cmp	r3, #2
 800221a:	f040 809d 	bne.w	8002358 <HAL_RCC_OscConfig+0x75c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800221e:	4b4a      	ldr	r3, [pc, #296]	@ (8002348 <HAL_RCC_OscConfig+0x74c>)
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	4a49      	ldr	r2, [pc, #292]	@ (8002348 <HAL_RCC_OscConfig+0x74c>)
 8002224:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002228:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800222a:	f7fe ffcb 	bl	80011c4 <HAL_GetTick>
 800222e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002230:	e008      	b.n	8002244 <HAL_RCC_OscConfig+0x648>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002232:	f7fe ffc7 	bl	80011c4 <HAL_GetTick>
 8002236:	4602      	mov	r2, r0
 8002238:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800223a:	1ad3      	subs	r3, r2, r3
 800223c:	2b02      	cmp	r3, #2
 800223e:	d901      	bls.n	8002244 <HAL_RCC_OscConfig+0x648>
          {
            return HAL_TIMEOUT;
 8002240:	2303      	movs	r3, #3
 8002242:	e0e2      	b.n	800240a <HAL_RCC_OscConfig+0x80e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002244:	4b40      	ldr	r3, [pc, #256]	@ (8002348 <HAL_RCC_OscConfig+0x74c>)
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800224c:	2b00      	cmp	r3, #0
 800224e:	d1f0      	bne.n	8002232 <HAL_RCC_OscConfig+0x636>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002250:	4b3d      	ldr	r3, [pc, #244]	@ (8002348 <HAL_RCC_OscConfig+0x74c>)
 8002252:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002254:	4b3e      	ldr	r3, [pc, #248]	@ (8002350 <HAL_RCC_OscConfig+0x754>)
 8002256:	4013      	ands	r3, r2
 8002258:	687a      	ldr	r2, [r7, #4]
 800225a:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 800225c:	687a      	ldr	r2, [r7, #4]
 800225e:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8002260:	0112      	lsls	r2, r2, #4
 8002262:	430a      	orrs	r2, r1
 8002264:	4938      	ldr	r1, [pc, #224]	@ (8002348 <HAL_RCC_OscConfig+0x74c>)
 8002266:	4313      	orrs	r3, r2
 8002268:	628b      	str	r3, [r1, #40]	@ 0x28
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800226e:	3b01      	subs	r3, #1
 8002270:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002278:	3b01      	subs	r3, #1
 800227a:	025b      	lsls	r3, r3, #9
 800227c:	b29b      	uxth	r3, r3
 800227e:	431a      	orrs	r2, r3
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002284:	3b01      	subs	r3, #1
 8002286:	041b      	lsls	r3, r3, #16
 8002288:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800228c:	431a      	orrs	r2, r3
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002292:	3b01      	subs	r3, #1
 8002294:	061b      	lsls	r3, r3, #24
 8002296:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800229a:	492b      	ldr	r1, [pc, #172]	@ (8002348 <HAL_RCC_OscConfig+0x74c>)
 800229c:	4313      	orrs	r3, r2
 800229e:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 80022a0:	4b29      	ldr	r3, [pc, #164]	@ (8002348 <HAL_RCC_OscConfig+0x74c>)
 80022a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80022a4:	4a28      	ldr	r2, [pc, #160]	@ (8002348 <HAL_RCC_OscConfig+0x74c>)
 80022a6:	f023 0301 	bic.w	r3, r3, #1
 80022aa:	62d3      	str	r3, [r2, #44]	@ 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80022ac:	4b26      	ldr	r3, [pc, #152]	@ (8002348 <HAL_RCC_OscConfig+0x74c>)
 80022ae:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80022b0:	4b28      	ldr	r3, [pc, #160]	@ (8002354 <HAL_RCC_OscConfig+0x758>)
 80022b2:	4013      	ands	r3, r2
 80022b4:	687a      	ldr	r2, [r7, #4]
 80022b6:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80022b8:	00d2      	lsls	r2, r2, #3
 80022ba:	4923      	ldr	r1, [pc, #140]	@ (8002348 <HAL_RCC_OscConfig+0x74c>)
 80022bc:	4313      	orrs	r3, r2
 80022be:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80022c0:	4b21      	ldr	r3, [pc, #132]	@ (8002348 <HAL_RCC_OscConfig+0x74c>)
 80022c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80022c4:	f023 020c 	bic.w	r2, r3, #12
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022cc:	491e      	ldr	r1, [pc, #120]	@ (8002348 <HAL_RCC_OscConfig+0x74c>)
 80022ce:	4313      	orrs	r3, r2
 80022d0:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80022d2:	4b1d      	ldr	r3, [pc, #116]	@ (8002348 <HAL_RCC_OscConfig+0x74c>)
 80022d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80022d6:	f023 0202 	bic.w	r2, r3, #2
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022de:	491a      	ldr	r1, [pc, #104]	@ (8002348 <HAL_RCC_OscConfig+0x74c>)
 80022e0:	4313      	orrs	r3, r2
 80022e2:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80022e4:	4b18      	ldr	r3, [pc, #96]	@ (8002348 <HAL_RCC_OscConfig+0x74c>)
 80022e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80022e8:	4a17      	ldr	r2, [pc, #92]	@ (8002348 <HAL_RCC_OscConfig+0x74c>)
 80022ea:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80022ee:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80022f0:	4b15      	ldr	r3, [pc, #84]	@ (8002348 <HAL_RCC_OscConfig+0x74c>)
 80022f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80022f4:	4a14      	ldr	r2, [pc, #80]	@ (8002348 <HAL_RCC_OscConfig+0x74c>)
 80022f6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80022fa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80022fc:	4b12      	ldr	r3, [pc, #72]	@ (8002348 <HAL_RCC_OscConfig+0x74c>)
 80022fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002300:	4a11      	ldr	r2, [pc, #68]	@ (8002348 <HAL_RCC_OscConfig+0x74c>)
 8002302:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002306:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8002308:	4b0f      	ldr	r3, [pc, #60]	@ (8002348 <HAL_RCC_OscConfig+0x74c>)
 800230a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800230c:	4a0e      	ldr	r2, [pc, #56]	@ (8002348 <HAL_RCC_OscConfig+0x74c>)
 800230e:	f043 0301 	orr.w	r3, r3, #1
 8002312:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002314:	4b0c      	ldr	r3, [pc, #48]	@ (8002348 <HAL_RCC_OscConfig+0x74c>)
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	4a0b      	ldr	r2, [pc, #44]	@ (8002348 <HAL_RCC_OscConfig+0x74c>)
 800231a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800231e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002320:	f7fe ff50 	bl	80011c4 <HAL_GetTick>
 8002324:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002326:	e008      	b.n	800233a <HAL_RCC_OscConfig+0x73e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002328:	f7fe ff4c 	bl	80011c4 <HAL_GetTick>
 800232c:	4602      	mov	r2, r0
 800232e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002330:	1ad3      	subs	r3, r2, r3
 8002332:	2b02      	cmp	r3, #2
 8002334:	d901      	bls.n	800233a <HAL_RCC_OscConfig+0x73e>
          {
            return HAL_TIMEOUT;
 8002336:	2303      	movs	r3, #3
 8002338:	e067      	b.n	800240a <HAL_RCC_OscConfig+0x80e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800233a:	4b03      	ldr	r3, [pc, #12]	@ (8002348 <HAL_RCC_OscConfig+0x74c>)
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002342:	2b00      	cmp	r3, #0
 8002344:	d0f0      	beq.n	8002328 <HAL_RCC_OscConfig+0x72c>
 8002346:	e05f      	b.n	8002408 <HAL_RCC_OscConfig+0x80c>
 8002348:	58024400 	.word	0x58024400
 800234c:	58024800 	.word	0x58024800
 8002350:	fffffc0c 	.word	0xfffffc0c
 8002354:	ffff0007 	.word	0xffff0007
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002358:	4b2e      	ldr	r3, [pc, #184]	@ (8002414 <HAL_RCC_OscConfig+0x818>)
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	4a2d      	ldr	r2, [pc, #180]	@ (8002414 <HAL_RCC_OscConfig+0x818>)
 800235e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002362:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002364:	f7fe ff2e 	bl	80011c4 <HAL_GetTick>
 8002368:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800236a:	e008      	b.n	800237e <HAL_RCC_OscConfig+0x782>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800236c:	f7fe ff2a 	bl	80011c4 <HAL_GetTick>
 8002370:	4602      	mov	r2, r0
 8002372:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002374:	1ad3      	subs	r3, r2, r3
 8002376:	2b02      	cmp	r3, #2
 8002378:	d901      	bls.n	800237e <HAL_RCC_OscConfig+0x782>
          {
            return HAL_TIMEOUT;
 800237a:	2303      	movs	r3, #3
 800237c:	e045      	b.n	800240a <HAL_RCC_OscConfig+0x80e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800237e:	4b25      	ldr	r3, [pc, #148]	@ (8002414 <HAL_RCC_OscConfig+0x818>)
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002386:	2b00      	cmp	r3, #0
 8002388:	d1f0      	bne.n	800236c <HAL_RCC_OscConfig+0x770>
 800238a:	e03d      	b.n	8002408 <HAL_RCC_OscConfig+0x80c>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800238c:	4b21      	ldr	r3, [pc, #132]	@ (8002414 <HAL_RCC_OscConfig+0x818>)
 800238e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002390:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002392:	4b20      	ldr	r3, [pc, #128]	@ (8002414 <HAL_RCC_OscConfig+0x818>)
 8002394:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002396:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800239c:	2b01      	cmp	r3, #1
 800239e:	d031      	beq.n	8002404 <HAL_RCC_OscConfig+0x808>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80023a0:	693b      	ldr	r3, [r7, #16]
 80023a2:	f003 0203 	and.w	r2, r3, #3
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80023aa:	429a      	cmp	r2, r3
 80023ac:	d12a      	bne.n	8002404 <HAL_RCC_OscConfig+0x808>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80023ae:	693b      	ldr	r3, [r7, #16]
 80023b0:	091b      	lsrs	r3, r3, #4
 80023b2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80023ba:	429a      	cmp	r2, r3
 80023bc:	d122      	bne.n	8002404 <HAL_RCC_OscConfig+0x808>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023c8:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80023ca:	429a      	cmp	r2, r3
 80023cc:	d11a      	bne.n	8002404 <HAL_RCC_OscConfig+0x808>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	0a5b      	lsrs	r3, r3, #9
 80023d2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80023da:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80023dc:	429a      	cmp	r2, r3
 80023de:	d111      	bne.n	8002404 <HAL_RCC_OscConfig+0x808>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	0c1b      	lsrs	r3, r3, #16
 80023e4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80023ec:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80023ee:	429a      	cmp	r2, r3
 80023f0:	d108      	bne.n	8002404 <HAL_RCC_OscConfig+0x808>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	0e1b      	lsrs	r3, r3, #24
 80023f6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80023fe:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002400:	429a      	cmp	r2, r3
 8002402:	d001      	beq.n	8002408 <HAL_RCC_OscConfig+0x80c>
      {
        return HAL_ERROR;
 8002404:	2301      	movs	r3, #1
 8002406:	e000      	b.n	800240a <HAL_RCC_OscConfig+0x80e>
      }
    }
  }
  return HAL_OK;
 8002408:	2300      	movs	r3, #0
}
 800240a:	4618      	mov	r0, r3
 800240c:	3730      	adds	r7, #48	@ 0x30
 800240e:	46bd      	mov	sp, r7
 8002410:	bd80      	pop	{r7, pc}
 8002412:	bf00      	nop
 8002414:	58024400 	.word	0x58024400

08002418 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002418:	b580      	push	{r7, lr}
 800241a:	b086      	sub	sp, #24
 800241c:	af00      	add	r7, sp, #0
 800241e:	6078      	str	r0, [r7, #4]
 8002420:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	2b00      	cmp	r3, #0
 8002426:	d101      	bne.n	800242c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002428:	2301      	movs	r3, #1
 800242a:	e19c      	b.n	8002766 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800242c:	4b8a      	ldr	r3, [pc, #552]	@ (8002658 <HAL_RCC_ClockConfig+0x240>)
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f003 030f 	and.w	r3, r3, #15
 8002434:	683a      	ldr	r2, [r7, #0]
 8002436:	429a      	cmp	r2, r3
 8002438:	d910      	bls.n	800245c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800243a:	4b87      	ldr	r3, [pc, #540]	@ (8002658 <HAL_RCC_ClockConfig+0x240>)
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f023 020f 	bic.w	r2, r3, #15
 8002442:	4985      	ldr	r1, [pc, #532]	@ (8002658 <HAL_RCC_ClockConfig+0x240>)
 8002444:	683b      	ldr	r3, [r7, #0]
 8002446:	4313      	orrs	r3, r2
 8002448:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800244a:	4b83      	ldr	r3, [pc, #524]	@ (8002658 <HAL_RCC_ClockConfig+0x240>)
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f003 030f 	and.w	r3, r3, #15
 8002452:	683a      	ldr	r2, [r7, #0]
 8002454:	429a      	cmp	r2, r3
 8002456:	d001      	beq.n	800245c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002458:	2301      	movs	r3, #1
 800245a:	e184      	b.n	8002766 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	f003 0304 	and.w	r3, r3, #4
 8002464:	2b00      	cmp	r3, #0
 8002466:	d010      	beq.n	800248a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	691a      	ldr	r2, [r3, #16]
 800246c:	4b7b      	ldr	r3, [pc, #492]	@ (800265c <HAL_RCC_ClockConfig+0x244>)
 800246e:	699b      	ldr	r3, [r3, #24]
 8002470:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002474:	429a      	cmp	r2, r3
 8002476:	d908      	bls.n	800248a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002478:	4b78      	ldr	r3, [pc, #480]	@ (800265c <HAL_RCC_ClockConfig+0x244>)
 800247a:	699b      	ldr	r3, [r3, #24]
 800247c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	691b      	ldr	r3, [r3, #16]
 8002484:	4975      	ldr	r1, [pc, #468]	@ (800265c <HAL_RCC_ClockConfig+0x244>)
 8002486:	4313      	orrs	r3, r2
 8002488:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f003 0308 	and.w	r3, r3, #8
 8002492:	2b00      	cmp	r3, #0
 8002494:	d010      	beq.n	80024b8 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	695a      	ldr	r2, [r3, #20]
 800249a:	4b70      	ldr	r3, [pc, #448]	@ (800265c <HAL_RCC_ClockConfig+0x244>)
 800249c:	69db      	ldr	r3, [r3, #28]
 800249e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80024a2:	429a      	cmp	r2, r3
 80024a4:	d908      	bls.n	80024b8 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80024a6:	4b6d      	ldr	r3, [pc, #436]	@ (800265c <HAL_RCC_ClockConfig+0x244>)
 80024a8:	69db      	ldr	r3, [r3, #28]
 80024aa:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	695b      	ldr	r3, [r3, #20]
 80024b2:	496a      	ldr	r1, [pc, #424]	@ (800265c <HAL_RCC_ClockConfig+0x244>)
 80024b4:	4313      	orrs	r3, r2
 80024b6:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f003 0310 	and.w	r3, r3, #16
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d010      	beq.n	80024e6 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	699a      	ldr	r2, [r3, #24]
 80024c8:	4b64      	ldr	r3, [pc, #400]	@ (800265c <HAL_RCC_ClockConfig+0x244>)
 80024ca:	69db      	ldr	r3, [r3, #28]
 80024cc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80024d0:	429a      	cmp	r2, r3
 80024d2:	d908      	bls.n	80024e6 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80024d4:	4b61      	ldr	r3, [pc, #388]	@ (800265c <HAL_RCC_ClockConfig+0x244>)
 80024d6:	69db      	ldr	r3, [r3, #28]
 80024d8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	699b      	ldr	r3, [r3, #24]
 80024e0:	495e      	ldr	r1, [pc, #376]	@ (800265c <HAL_RCC_ClockConfig+0x244>)
 80024e2:	4313      	orrs	r3, r2
 80024e4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f003 0320 	and.w	r3, r3, #32
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d010      	beq.n	8002514 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	69da      	ldr	r2, [r3, #28]
 80024f6:	4b59      	ldr	r3, [pc, #356]	@ (800265c <HAL_RCC_ClockConfig+0x244>)
 80024f8:	6a1b      	ldr	r3, [r3, #32]
 80024fa:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80024fe:	429a      	cmp	r2, r3
 8002500:	d908      	bls.n	8002514 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8002502:	4b56      	ldr	r3, [pc, #344]	@ (800265c <HAL_RCC_ClockConfig+0x244>)
 8002504:	6a1b      	ldr	r3, [r3, #32]
 8002506:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	69db      	ldr	r3, [r3, #28]
 800250e:	4953      	ldr	r1, [pc, #332]	@ (800265c <HAL_RCC_ClockConfig+0x244>)
 8002510:	4313      	orrs	r3, r2
 8002512:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f003 0302 	and.w	r3, r3, #2
 800251c:	2b00      	cmp	r3, #0
 800251e:	d010      	beq.n	8002542 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	68da      	ldr	r2, [r3, #12]
 8002524:	4b4d      	ldr	r3, [pc, #308]	@ (800265c <HAL_RCC_ClockConfig+0x244>)
 8002526:	699b      	ldr	r3, [r3, #24]
 8002528:	f003 030f 	and.w	r3, r3, #15
 800252c:	429a      	cmp	r2, r3
 800252e:	d908      	bls.n	8002542 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002530:	4b4a      	ldr	r3, [pc, #296]	@ (800265c <HAL_RCC_ClockConfig+0x244>)
 8002532:	699b      	ldr	r3, [r3, #24]
 8002534:	f023 020f 	bic.w	r2, r3, #15
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	68db      	ldr	r3, [r3, #12]
 800253c:	4947      	ldr	r1, [pc, #284]	@ (800265c <HAL_RCC_ClockConfig+0x244>)
 800253e:	4313      	orrs	r3, r2
 8002540:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f003 0301 	and.w	r3, r3, #1
 800254a:	2b00      	cmp	r3, #0
 800254c:	d055      	beq.n	80025fa <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800254e:	4b43      	ldr	r3, [pc, #268]	@ (800265c <HAL_RCC_ClockConfig+0x244>)
 8002550:	699b      	ldr	r3, [r3, #24]
 8002552:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	689b      	ldr	r3, [r3, #8]
 800255a:	4940      	ldr	r1, [pc, #256]	@ (800265c <HAL_RCC_ClockConfig+0x244>)
 800255c:	4313      	orrs	r3, r2
 800255e:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	685b      	ldr	r3, [r3, #4]
 8002564:	2b02      	cmp	r3, #2
 8002566:	d107      	bne.n	8002578 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002568:	4b3c      	ldr	r3, [pc, #240]	@ (800265c <HAL_RCC_ClockConfig+0x244>)
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002570:	2b00      	cmp	r3, #0
 8002572:	d121      	bne.n	80025b8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002574:	2301      	movs	r3, #1
 8002576:	e0f6      	b.n	8002766 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	685b      	ldr	r3, [r3, #4]
 800257c:	2b03      	cmp	r3, #3
 800257e:	d107      	bne.n	8002590 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002580:	4b36      	ldr	r3, [pc, #216]	@ (800265c <HAL_RCC_ClockConfig+0x244>)
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002588:	2b00      	cmp	r3, #0
 800258a:	d115      	bne.n	80025b8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800258c:	2301      	movs	r3, #1
 800258e:	e0ea      	b.n	8002766 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	685b      	ldr	r3, [r3, #4]
 8002594:	2b01      	cmp	r3, #1
 8002596:	d107      	bne.n	80025a8 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002598:	4b30      	ldr	r3, [pc, #192]	@ (800265c <HAL_RCC_ClockConfig+0x244>)
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d109      	bne.n	80025b8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80025a4:	2301      	movs	r3, #1
 80025a6:	e0de      	b.n	8002766 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80025a8:	4b2c      	ldr	r3, [pc, #176]	@ (800265c <HAL_RCC_ClockConfig+0x244>)
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f003 0304 	and.w	r3, r3, #4
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d101      	bne.n	80025b8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80025b4:	2301      	movs	r3, #1
 80025b6:	e0d6      	b.n	8002766 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80025b8:	4b28      	ldr	r3, [pc, #160]	@ (800265c <HAL_RCC_ClockConfig+0x244>)
 80025ba:	691b      	ldr	r3, [r3, #16]
 80025bc:	f023 0207 	bic.w	r2, r3, #7
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	685b      	ldr	r3, [r3, #4]
 80025c4:	4925      	ldr	r1, [pc, #148]	@ (800265c <HAL_RCC_ClockConfig+0x244>)
 80025c6:	4313      	orrs	r3, r2
 80025c8:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025ca:	f7fe fdfb 	bl	80011c4 <HAL_GetTick>
 80025ce:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025d0:	e00a      	b.n	80025e8 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80025d2:	f7fe fdf7 	bl	80011c4 <HAL_GetTick>
 80025d6:	4602      	mov	r2, r0
 80025d8:	697b      	ldr	r3, [r7, #20]
 80025da:	1ad3      	subs	r3, r2, r3
 80025dc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80025e0:	4293      	cmp	r3, r2
 80025e2:	d901      	bls.n	80025e8 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80025e4:	2303      	movs	r3, #3
 80025e6:	e0be      	b.n	8002766 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025e8:	4b1c      	ldr	r3, [pc, #112]	@ (800265c <HAL_RCC_ClockConfig+0x244>)
 80025ea:	691b      	ldr	r3, [r3, #16]
 80025ec:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	685b      	ldr	r3, [r3, #4]
 80025f4:	00db      	lsls	r3, r3, #3
 80025f6:	429a      	cmp	r2, r3
 80025f8:	d1eb      	bne.n	80025d2 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f003 0302 	and.w	r3, r3, #2
 8002602:	2b00      	cmp	r3, #0
 8002604:	d010      	beq.n	8002628 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	68da      	ldr	r2, [r3, #12]
 800260a:	4b14      	ldr	r3, [pc, #80]	@ (800265c <HAL_RCC_ClockConfig+0x244>)
 800260c:	699b      	ldr	r3, [r3, #24]
 800260e:	f003 030f 	and.w	r3, r3, #15
 8002612:	429a      	cmp	r2, r3
 8002614:	d208      	bcs.n	8002628 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002616:	4b11      	ldr	r3, [pc, #68]	@ (800265c <HAL_RCC_ClockConfig+0x244>)
 8002618:	699b      	ldr	r3, [r3, #24]
 800261a:	f023 020f 	bic.w	r2, r3, #15
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	68db      	ldr	r3, [r3, #12]
 8002622:	490e      	ldr	r1, [pc, #56]	@ (800265c <HAL_RCC_ClockConfig+0x244>)
 8002624:	4313      	orrs	r3, r2
 8002626:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002628:	4b0b      	ldr	r3, [pc, #44]	@ (8002658 <HAL_RCC_ClockConfig+0x240>)
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f003 030f 	and.w	r3, r3, #15
 8002630:	683a      	ldr	r2, [r7, #0]
 8002632:	429a      	cmp	r2, r3
 8002634:	d214      	bcs.n	8002660 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002636:	4b08      	ldr	r3, [pc, #32]	@ (8002658 <HAL_RCC_ClockConfig+0x240>)
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f023 020f 	bic.w	r2, r3, #15
 800263e:	4906      	ldr	r1, [pc, #24]	@ (8002658 <HAL_RCC_ClockConfig+0x240>)
 8002640:	683b      	ldr	r3, [r7, #0]
 8002642:	4313      	orrs	r3, r2
 8002644:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002646:	4b04      	ldr	r3, [pc, #16]	@ (8002658 <HAL_RCC_ClockConfig+0x240>)
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f003 030f 	and.w	r3, r3, #15
 800264e:	683a      	ldr	r2, [r7, #0]
 8002650:	429a      	cmp	r2, r3
 8002652:	d005      	beq.n	8002660 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8002654:	2301      	movs	r3, #1
 8002656:	e086      	b.n	8002766 <HAL_RCC_ClockConfig+0x34e>
 8002658:	52002000 	.word	0x52002000
 800265c:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f003 0304 	and.w	r3, r3, #4
 8002668:	2b00      	cmp	r3, #0
 800266a:	d010      	beq.n	800268e <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	691a      	ldr	r2, [r3, #16]
 8002670:	4b3f      	ldr	r3, [pc, #252]	@ (8002770 <HAL_RCC_ClockConfig+0x358>)
 8002672:	699b      	ldr	r3, [r3, #24]
 8002674:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002678:	429a      	cmp	r2, r3
 800267a:	d208      	bcs.n	800268e <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800267c:	4b3c      	ldr	r3, [pc, #240]	@ (8002770 <HAL_RCC_ClockConfig+0x358>)
 800267e:	699b      	ldr	r3, [r3, #24]
 8002680:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	691b      	ldr	r3, [r3, #16]
 8002688:	4939      	ldr	r1, [pc, #228]	@ (8002770 <HAL_RCC_ClockConfig+0x358>)
 800268a:	4313      	orrs	r3, r2
 800268c:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f003 0308 	and.w	r3, r3, #8
 8002696:	2b00      	cmp	r3, #0
 8002698:	d010      	beq.n	80026bc <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	695a      	ldr	r2, [r3, #20]
 800269e:	4b34      	ldr	r3, [pc, #208]	@ (8002770 <HAL_RCC_ClockConfig+0x358>)
 80026a0:	69db      	ldr	r3, [r3, #28]
 80026a2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80026a6:	429a      	cmp	r2, r3
 80026a8:	d208      	bcs.n	80026bc <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80026aa:	4b31      	ldr	r3, [pc, #196]	@ (8002770 <HAL_RCC_ClockConfig+0x358>)
 80026ac:	69db      	ldr	r3, [r3, #28]
 80026ae:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	695b      	ldr	r3, [r3, #20]
 80026b6:	492e      	ldr	r1, [pc, #184]	@ (8002770 <HAL_RCC_ClockConfig+0x358>)
 80026b8:	4313      	orrs	r3, r2
 80026ba:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f003 0310 	and.w	r3, r3, #16
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d010      	beq.n	80026ea <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	699a      	ldr	r2, [r3, #24]
 80026cc:	4b28      	ldr	r3, [pc, #160]	@ (8002770 <HAL_RCC_ClockConfig+0x358>)
 80026ce:	69db      	ldr	r3, [r3, #28]
 80026d0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80026d4:	429a      	cmp	r2, r3
 80026d6:	d208      	bcs.n	80026ea <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80026d8:	4b25      	ldr	r3, [pc, #148]	@ (8002770 <HAL_RCC_ClockConfig+0x358>)
 80026da:	69db      	ldr	r3, [r3, #28]
 80026dc:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	699b      	ldr	r3, [r3, #24]
 80026e4:	4922      	ldr	r1, [pc, #136]	@ (8002770 <HAL_RCC_ClockConfig+0x358>)
 80026e6:	4313      	orrs	r3, r2
 80026e8:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f003 0320 	and.w	r3, r3, #32
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d010      	beq.n	8002718 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	69da      	ldr	r2, [r3, #28]
 80026fa:	4b1d      	ldr	r3, [pc, #116]	@ (8002770 <HAL_RCC_ClockConfig+0x358>)
 80026fc:	6a1b      	ldr	r3, [r3, #32]
 80026fe:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002702:	429a      	cmp	r2, r3
 8002704:	d208      	bcs.n	8002718 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8002706:	4b1a      	ldr	r3, [pc, #104]	@ (8002770 <HAL_RCC_ClockConfig+0x358>)
 8002708:	6a1b      	ldr	r3, [r3, #32]
 800270a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	69db      	ldr	r3, [r3, #28]
 8002712:	4917      	ldr	r1, [pc, #92]	@ (8002770 <HAL_RCC_ClockConfig+0x358>)
 8002714:	4313      	orrs	r3, r2
 8002716:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002718:	f000 f834 	bl	8002784 <HAL_RCC_GetSysClockFreq>
 800271c:	4602      	mov	r2, r0
 800271e:	4b14      	ldr	r3, [pc, #80]	@ (8002770 <HAL_RCC_ClockConfig+0x358>)
 8002720:	699b      	ldr	r3, [r3, #24]
 8002722:	0a1b      	lsrs	r3, r3, #8
 8002724:	f003 030f 	and.w	r3, r3, #15
 8002728:	4912      	ldr	r1, [pc, #72]	@ (8002774 <HAL_RCC_ClockConfig+0x35c>)
 800272a:	5ccb      	ldrb	r3, [r1, r3]
 800272c:	f003 031f 	and.w	r3, r3, #31
 8002730:	fa22 f303 	lsr.w	r3, r2, r3
 8002734:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002736:	4b0e      	ldr	r3, [pc, #56]	@ (8002770 <HAL_RCC_ClockConfig+0x358>)
 8002738:	699b      	ldr	r3, [r3, #24]
 800273a:	f003 030f 	and.w	r3, r3, #15
 800273e:	4a0d      	ldr	r2, [pc, #52]	@ (8002774 <HAL_RCC_ClockConfig+0x35c>)
 8002740:	5cd3      	ldrb	r3, [r2, r3]
 8002742:	f003 031f 	and.w	r3, r3, #31
 8002746:	693a      	ldr	r2, [r7, #16]
 8002748:	fa22 f303 	lsr.w	r3, r2, r3
 800274c:	4a0a      	ldr	r2, [pc, #40]	@ (8002778 <HAL_RCC_ClockConfig+0x360>)
 800274e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002750:	4a0a      	ldr	r2, [pc, #40]	@ (800277c <HAL_RCC_ClockConfig+0x364>)
 8002752:	693b      	ldr	r3, [r7, #16]
 8002754:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8002756:	4b0a      	ldr	r3, [pc, #40]	@ (8002780 <HAL_RCC_ClockConfig+0x368>)
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	4618      	mov	r0, r3
 800275c:	f7fe fce8 	bl	8001130 <HAL_InitTick>
 8002760:	4603      	mov	r3, r0
 8002762:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8002764:	7bfb      	ldrb	r3, [r7, #15]
}
 8002766:	4618      	mov	r0, r3
 8002768:	3718      	adds	r7, #24
 800276a:	46bd      	mov	sp, r7
 800276c:	bd80      	pop	{r7, pc}
 800276e:	bf00      	nop
 8002770:	58024400 	.word	0x58024400
 8002774:	08007ef0 	.word	0x08007ef0
 8002778:	24000004 	.word	0x24000004
 800277c:	24000000 	.word	0x24000000
 8002780:	24000008 	.word	0x24000008

08002784 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002784:	b480      	push	{r7}
 8002786:	b089      	sub	sp, #36	@ 0x24
 8002788:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800278a:	4bb3      	ldr	r3, [pc, #716]	@ (8002a58 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800278c:	691b      	ldr	r3, [r3, #16]
 800278e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002792:	2b18      	cmp	r3, #24
 8002794:	f200 8155 	bhi.w	8002a42 <HAL_RCC_GetSysClockFreq+0x2be>
 8002798:	a201      	add	r2, pc, #4	@ (adr r2, 80027a0 <HAL_RCC_GetSysClockFreq+0x1c>)
 800279a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800279e:	bf00      	nop
 80027a0:	08002805 	.word	0x08002805
 80027a4:	08002a43 	.word	0x08002a43
 80027a8:	08002a43 	.word	0x08002a43
 80027ac:	08002a43 	.word	0x08002a43
 80027b0:	08002a43 	.word	0x08002a43
 80027b4:	08002a43 	.word	0x08002a43
 80027b8:	08002a43 	.word	0x08002a43
 80027bc:	08002a43 	.word	0x08002a43
 80027c0:	0800282b 	.word	0x0800282b
 80027c4:	08002a43 	.word	0x08002a43
 80027c8:	08002a43 	.word	0x08002a43
 80027cc:	08002a43 	.word	0x08002a43
 80027d0:	08002a43 	.word	0x08002a43
 80027d4:	08002a43 	.word	0x08002a43
 80027d8:	08002a43 	.word	0x08002a43
 80027dc:	08002a43 	.word	0x08002a43
 80027e0:	08002831 	.word	0x08002831
 80027e4:	08002a43 	.word	0x08002a43
 80027e8:	08002a43 	.word	0x08002a43
 80027ec:	08002a43 	.word	0x08002a43
 80027f0:	08002a43 	.word	0x08002a43
 80027f4:	08002a43 	.word	0x08002a43
 80027f8:	08002a43 	.word	0x08002a43
 80027fc:	08002a43 	.word	0x08002a43
 8002800:	08002837 	.word	0x08002837
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002804:	4b94      	ldr	r3, [pc, #592]	@ (8002a58 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f003 0320 	and.w	r3, r3, #32
 800280c:	2b00      	cmp	r3, #0
 800280e:	d009      	beq.n	8002824 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8002810:	4b91      	ldr	r3, [pc, #580]	@ (8002a58 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	08db      	lsrs	r3, r3, #3
 8002816:	f003 0303 	and.w	r3, r3, #3
 800281a:	4a90      	ldr	r2, [pc, #576]	@ (8002a5c <HAL_RCC_GetSysClockFreq+0x2d8>)
 800281c:	fa22 f303 	lsr.w	r3, r2, r3
 8002820:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8002822:	e111      	b.n	8002a48 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8002824:	4b8d      	ldr	r3, [pc, #564]	@ (8002a5c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002826:	61bb      	str	r3, [r7, #24]
    break;
 8002828:	e10e      	b.n	8002a48 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800282a:	4b8d      	ldr	r3, [pc, #564]	@ (8002a60 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800282c:	61bb      	str	r3, [r7, #24]
    break;
 800282e:	e10b      	b.n	8002a48 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8002830:	4b8c      	ldr	r3, [pc, #560]	@ (8002a64 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8002832:	61bb      	str	r3, [r7, #24]
    break;
 8002834:	e108      	b.n	8002a48 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002836:	4b88      	ldr	r3, [pc, #544]	@ (8002a58 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002838:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800283a:	f003 0303 	and.w	r3, r3, #3
 800283e:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8002840:	4b85      	ldr	r3, [pc, #532]	@ (8002a58 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002842:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002844:	091b      	lsrs	r3, r3, #4
 8002846:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800284a:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 800284c:	4b82      	ldr	r3, [pc, #520]	@ (8002a58 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800284e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002850:	f003 0301 	and.w	r3, r3, #1
 8002854:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8002856:	4b80      	ldr	r3, [pc, #512]	@ (8002a58 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002858:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800285a:	08db      	lsrs	r3, r3, #3
 800285c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002860:	68fa      	ldr	r2, [r7, #12]
 8002862:	fb02 f303 	mul.w	r3, r2, r3
 8002866:	ee07 3a90 	vmov	s15, r3
 800286a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800286e:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8002872:	693b      	ldr	r3, [r7, #16]
 8002874:	2b00      	cmp	r3, #0
 8002876:	f000 80e1 	beq.w	8002a3c <HAL_RCC_GetSysClockFreq+0x2b8>
    {
      switch (pllsource)
 800287a:	697b      	ldr	r3, [r7, #20]
 800287c:	2b02      	cmp	r3, #2
 800287e:	f000 8083 	beq.w	8002988 <HAL_RCC_GetSysClockFreq+0x204>
 8002882:	697b      	ldr	r3, [r7, #20]
 8002884:	2b02      	cmp	r3, #2
 8002886:	f200 80a1 	bhi.w	80029cc <HAL_RCC_GetSysClockFreq+0x248>
 800288a:	697b      	ldr	r3, [r7, #20]
 800288c:	2b00      	cmp	r3, #0
 800288e:	d003      	beq.n	8002898 <HAL_RCC_GetSysClockFreq+0x114>
 8002890:	697b      	ldr	r3, [r7, #20]
 8002892:	2b01      	cmp	r3, #1
 8002894:	d056      	beq.n	8002944 <HAL_RCC_GetSysClockFreq+0x1c0>
 8002896:	e099      	b.n	80029cc <HAL_RCC_GetSysClockFreq+0x248>
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002898:	4b6f      	ldr	r3, [pc, #444]	@ (8002a58 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	f003 0320 	and.w	r3, r3, #32
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d02d      	beq.n	8002900 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80028a4:	4b6c      	ldr	r3, [pc, #432]	@ (8002a58 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	08db      	lsrs	r3, r3, #3
 80028aa:	f003 0303 	and.w	r3, r3, #3
 80028ae:	4a6b      	ldr	r2, [pc, #428]	@ (8002a5c <HAL_RCC_GetSysClockFreq+0x2d8>)
 80028b0:	fa22 f303 	lsr.w	r3, r2, r3
 80028b4:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	ee07 3a90 	vmov	s15, r3
 80028bc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80028c0:	693b      	ldr	r3, [r7, #16]
 80028c2:	ee07 3a90 	vmov	s15, r3
 80028c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80028ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80028ce:	4b62      	ldr	r3, [pc, #392]	@ (8002a58 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80028d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80028d6:	ee07 3a90 	vmov	s15, r3
 80028da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80028de:	ed97 6a02 	vldr	s12, [r7, #8]
 80028e2:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8002a68 <HAL_RCC_GetSysClockFreq+0x2e4>
 80028e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80028ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80028ee:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80028f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80028f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80028fa:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 80028fe:	e087      	b.n	8002a10 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002900:	693b      	ldr	r3, [r7, #16]
 8002902:	ee07 3a90 	vmov	s15, r3
 8002906:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800290a:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8002a6c <HAL_RCC_GetSysClockFreq+0x2e8>
 800290e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002912:	4b51      	ldr	r3, [pc, #324]	@ (8002a58 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002914:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002916:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800291a:	ee07 3a90 	vmov	s15, r3
 800291e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002922:	ed97 6a02 	vldr	s12, [r7, #8]
 8002926:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8002a68 <HAL_RCC_GetSysClockFreq+0x2e4>
 800292a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800292e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002932:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002936:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800293a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800293e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002942:	e065      	b.n	8002a10 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002944:	693b      	ldr	r3, [r7, #16]
 8002946:	ee07 3a90 	vmov	s15, r3
 800294a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800294e:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8002a70 <HAL_RCC_GetSysClockFreq+0x2ec>
 8002952:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002956:	4b40      	ldr	r3, [pc, #256]	@ (8002a58 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002958:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800295a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800295e:	ee07 3a90 	vmov	s15, r3
 8002962:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002966:	ed97 6a02 	vldr	s12, [r7, #8]
 800296a:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8002a68 <HAL_RCC_GetSysClockFreq+0x2e4>
 800296e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002972:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002976:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800297a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800297e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002982:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002986:	e043      	b.n	8002a10 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002988:	693b      	ldr	r3, [r7, #16]
 800298a:	ee07 3a90 	vmov	s15, r3
 800298e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002992:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8002a74 <HAL_RCC_GetSysClockFreq+0x2f0>
 8002996:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800299a:	4b2f      	ldr	r3, [pc, #188]	@ (8002a58 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800299c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800299e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80029a2:	ee07 3a90 	vmov	s15, r3
 80029a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80029aa:	ed97 6a02 	vldr	s12, [r7, #8]
 80029ae:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8002a68 <HAL_RCC_GetSysClockFreq+0x2e4>
 80029b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80029b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80029ba:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80029be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80029c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80029c6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80029ca:	e021      	b.n	8002a10 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80029cc:	693b      	ldr	r3, [r7, #16]
 80029ce:	ee07 3a90 	vmov	s15, r3
 80029d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80029d6:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8002a70 <HAL_RCC_GetSysClockFreq+0x2ec>
 80029da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80029de:	4b1e      	ldr	r3, [pc, #120]	@ (8002a58 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80029e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80029e6:	ee07 3a90 	vmov	s15, r3
 80029ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80029ee:	ed97 6a02 	vldr	s12, [r7, #8]
 80029f2:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8002a68 <HAL_RCC_GetSysClockFreq+0x2e4>
 80029f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80029fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80029fe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002a02:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002a06:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a0a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002a0e:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8002a10:	4b11      	ldr	r3, [pc, #68]	@ (8002a58 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002a12:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a14:	0a5b      	lsrs	r3, r3, #9
 8002a16:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002a1a:	3301      	adds	r3, #1
 8002a1c:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8002a1e:	683b      	ldr	r3, [r7, #0]
 8002a20:	ee07 3a90 	vmov	s15, r3
 8002a24:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002a28:	edd7 6a07 	vldr	s13, [r7, #28]
 8002a2c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002a30:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002a34:	ee17 3a90 	vmov	r3, s15
 8002a38:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8002a3a:	e005      	b.n	8002a48 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8002a3c:	2300      	movs	r3, #0
 8002a3e:	61bb      	str	r3, [r7, #24]
    break;
 8002a40:	e002      	b.n	8002a48 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8002a42:	4b07      	ldr	r3, [pc, #28]	@ (8002a60 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002a44:	61bb      	str	r3, [r7, #24]
    break;
 8002a46:	bf00      	nop
  }

  return sysclockfreq;
 8002a48:	69bb      	ldr	r3, [r7, #24]
}
 8002a4a:	4618      	mov	r0, r3
 8002a4c:	3724      	adds	r7, #36	@ 0x24
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a54:	4770      	bx	lr
 8002a56:	bf00      	nop
 8002a58:	58024400 	.word	0x58024400
 8002a5c:	03d09000 	.word	0x03d09000
 8002a60:	003d0900 	.word	0x003d0900
 8002a64:	0112a880 	.word	0x0112a880
 8002a68:	46000000 	.word	0x46000000
 8002a6c:	4c742400 	.word	0x4c742400
 8002a70:	4a742400 	.word	0x4a742400
 8002a74:	4b895440 	.word	0x4b895440

08002a78 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002a78:	b580      	push	{r7, lr}
 8002a7a:	b082      	sub	sp, #8
 8002a7c:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8002a7e:	f7ff fe81 	bl	8002784 <HAL_RCC_GetSysClockFreq>
 8002a82:	4602      	mov	r2, r0
 8002a84:	4b10      	ldr	r3, [pc, #64]	@ (8002ac8 <HAL_RCC_GetHCLKFreq+0x50>)
 8002a86:	699b      	ldr	r3, [r3, #24]
 8002a88:	0a1b      	lsrs	r3, r3, #8
 8002a8a:	f003 030f 	and.w	r3, r3, #15
 8002a8e:	490f      	ldr	r1, [pc, #60]	@ (8002acc <HAL_RCC_GetHCLKFreq+0x54>)
 8002a90:	5ccb      	ldrb	r3, [r1, r3]
 8002a92:	f003 031f 	and.w	r3, r3, #31
 8002a96:	fa22 f303 	lsr.w	r3, r2, r3
 8002a9a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002a9c:	4b0a      	ldr	r3, [pc, #40]	@ (8002ac8 <HAL_RCC_GetHCLKFreq+0x50>)
 8002a9e:	699b      	ldr	r3, [r3, #24]
 8002aa0:	f003 030f 	and.w	r3, r3, #15
 8002aa4:	4a09      	ldr	r2, [pc, #36]	@ (8002acc <HAL_RCC_GetHCLKFreq+0x54>)
 8002aa6:	5cd3      	ldrb	r3, [r2, r3]
 8002aa8:	f003 031f 	and.w	r3, r3, #31
 8002aac:	687a      	ldr	r2, [r7, #4]
 8002aae:	fa22 f303 	lsr.w	r3, r2, r3
 8002ab2:	4a07      	ldr	r2, [pc, #28]	@ (8002ad0 <HAL_RCC_GetHCLKFreq+0x58>)
 8002ab4:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002ab6:	4a07      	ldr	r2, [pc, #28]	@ (8002ad4 <HAL_RCC_GetHCLKFreq+0x5c>)
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8002abc:	4b04      	ldr	r3, [pc, #16]	@ (8002ad0 <HAL_RCC_GetHCLKFreq+0x58>)
 8002abe:	681b      	ldr	r3, [r3, #0]
}
 8002ac0:	4618      	mov	r0, r3
 8002ac2:	3708      	adds	r7, #8
 8002ac4:	46bd      	mov	sp, r7
 8002ac6:	bd80      	pop	{r7, pc}
 8002ac8:	58024400 	.word	0x58024400
 8002acc:	08007ef0 	.word	0x08007ef0
 8002ad0:	24000004 	.word	0x24000004
 8002ad4:	24000000 	.word	0x24000000

08002ad8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8002adc:	f7ff ffcc 	bl	8002a78 <HAL_RCC_GetHCLKFreq>
 8002ae0:	4602      	mov	r2, r0
 8002ae2:	4b06      	ldr	r3, [pc, #24]	@ (8002afc <HAL_RCC_GetPCLK1Freq+0x24>)
 8002ae4:	69db      	ldr	r3, [r3, #28]
 8002ae6:	091b      	lsrs	r3, r3, #4
 8002ae8:	f003 0307 	and.w	r3, r3, #7
 8002aec:	4904      	ldr	r1, [pc, #16]	@ (8002b00 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002aee:	5ccb      	ldrb	r3, [r1, r3]
 8002af0:	f003 031f 	and.w	r3, r3, #31
 8002af4:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8002af8:	4618      	mov	r0, r3
 8002afa:	bd80      	pop	{r7, pc}
 8002afc:	58024400 	.word	0x58024400
 8002b00:	08007ef0 	.word	0x08007ef0

08002b04 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002b04:	b580      	push	{r7, lr}
 8002b06:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8002b08:	f7ff ffb6 	bl	8002a78 <HAL_RCC_GetHCLKFreq>
 8002b0c:	4602      	mov	r2, r0
 8002b0e:	4b06      	ldr	r3, [pc, #24]	@ (8002b28 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002b10:	69db      	ldr	r3, [r3, #28]
 8002b12:	0a1b      	lsrs	r3, r3, #8
 8002b14:	f003 0307 	and.w	r3, r3, #7
 8002b18:	4904      	ldr	r1, [pc, #16]	@ (8002b2c <HAL_RCC_GetPCLK2Freq+0x28>)
 8002b1a:	5ccb      	ldrb	r3, [r1, r3]
 8002b1c:	f003 031f 	and.w	r3, r3, #31
 8002b20:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8002b24:	4618      	mov	r0, r3
 8002b26:	bd80      	pop	{r7, pc}
 8002b28:	58024400 	.word	0x58024400
 8002b2c:	08007ef0 	.word	0x08007ef0

08002b30 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002b30:	b580      	push	{r7, lr}
 8002b32:	b086      	sub	sp, #24
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002b38:	2300      	movs	r3, #0
 8002b3a:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002b3c:	2300      	movs	r3, #0
 8002b3e:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d03f      	beq.n	8002bcc <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002b50:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8002b54:	d02a      	beq.n	8002bac <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8002b56:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8002b5a:	d824      	bhi.n	8002ba6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002b5c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002b60:	d018      	beq.n	8002b94 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002b62:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002b66:	d81e      	bhi.n	8002ba6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d003      	beq.n	8002b74 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002b6c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002b70:	d007      	beq.n	8002b82 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002b72:	e018      	b.n	8002ba6 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002b74:	4ba3      	ldr	r3, [pc, #652]	@ (8002e04 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002b76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b78:	4aa2      	ldr	r2, [pc, #648]	@ (8002e04 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002b7a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002b7e:	62d3      	str	r3, [r2, #44]	@ 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8002b80:	e015      	b.n	8002bae <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	3304      	adds	r3, #4
 8002b86:	2102      	movs	r1, #2
 8002b88:	4618      	mov	r0, r3
 8002b8a:	f001 fff9 	bl	8004b80 <RCCEx_PLL2_Config>
 8002b8e:	4603      	mov	r3, r0
 8002b90:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8002b92:	e00c      	b.n	8002bae <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	3324      	adds	r3, #36	@ 0x24
 8002b98:	2102      	movs	r1, #2
 8002b9a:	4618      	mov	r0, r3
 8002b9c:	f002 f8a2 	bl	8004ce4 <RCCEx_PLL3_Config>
 8002ba0:	4603      	mov	r3, r0
 8002ba2:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8002ba4:	e003      	b.n	8002bae <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002ba6:	2301      	movs	r3, #1
 8002ba8:	75fb      	strb	r3, [r7, #23]
      break;
 8002baa:	e000      	b.n	8002bae <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002bac:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002bae:	7dfb      	ldrb	r3, [r7, #23]
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d109      	bne.n	8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8002bb4:	4b93      	ldr	r3, [pc, #588]	@ (8002e04 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002bb6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002bb8:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002bc0:	4990      	ldr	r1, [pc, #576]	@ (8002e04 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002bc2:	4313      	orrs	r3, r2
 8002bc4:	650b      	str	r3, [r1, #80]	@ 0x50
 8002bc6:	e001      	b.n	8002bcc <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002bc8:	7dfb      	ldrb	r3, [r7, #23]
 8002bca:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d03d      	beq.n	8002c54 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002bdc:	2b04      	cmp	r3, #4
 8002bde:	d826      	bhi.n	8002c2e <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8002be0:	a201      	add	r2, pc, #4	@ (adr r2, 8002be8 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8002be2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002be6:	bf00      	nop
 8002be8:	08002bfd 	.word	0x08002bfd
 8002bec:	08002c0b 	.word	0x08002c0b
 8002bf0:	08002c1d 	.word	0x08002c1d
 8002bf4:	08002c35 	.word	0x08002c35
 8002bf8:	08002c35 	.word	0x08002c35
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002bfc:	4b81      	ldr	r3, [pc, #516]	@ (8002e04 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002bfe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c00:	4a80      	ldr	r2, [pc, #512]	@ (8002e04 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002c02:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002c06:	62d3      	str	r3, [r2, #44]	@ 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002c08:	e015      	b.n	8002c36 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	3304      	adds	r3, #4
 8002c0e:	2100      	movs	r1, #0
 8002c10:	4618      	mov	r0, r3
 8002c12:	f001 ffb5 	bl	8004b80 <RCCEx_PLL2_Config>
 8002c16:	4603      	mov	r3, r0
 8002c18:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002c1a:	e00c      	b.n	8002c36 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	3324      	adds	r3, #36	@ 0x24
 8002c20:	2100      	movs	r1, #0
 8002c22:	4618      	mov	r0, r3
 8002c24:	f002 f85e 	bl	8004ce4 <RCCEx_PLL3_Config>
 8002c28:	4603      	mov	r3, r0
 8002c2a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002c2c:	e003      	b.n	8002c36 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002c2e:	2301      	movs	r3, #1
 8002c30:	75fb      	strb	r3, [r7, #23]
      break;
 8002c32:	e000      	b.n	8002c36 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8002c34:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002c36:	7dfb      	ldrb	r3, [r7, #23]
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d109      	bne.n	8002c50 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002c3c:	4b71      	ldr	r3, [pc, #452]	@ (8002e04 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002c3e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002c40:	f023 0207 	bic.w	r2, r3, #7
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c48:	496e      	ldr	r1, [pc, #440]	@ (8002e04 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002c4a:	4313      	orrs	r3, r2
 8002c4c:	650b      	str	r3, [r1, #80]	@ 0x50
 8002c4e:	e001      	b.n	8002c54 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c50:	7dfb      	ldrb	r3, [r7, #23]
 8002c52:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d042      	beq.n	8002ce6 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c64:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002c68:	d02b      	beq.n	8002cc2 <HAL_RCCEx_PeriphCLKConfig+0x192>
 8002c6a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002c6e:	d825      	bhi.n	8002cbc <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8002c70:	2bc0      	cmp	r3, #192	@ 0xc0
 8002c72:	d028      	beq.n	8002cc6 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8002c74:	2bc0      	cmp	r3, #192	@ 0xc0
 8002c76:	d821      	bhi.n	8002cbc <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8002c78:	2b80      	cmp	r3, #128	@ 0x80
 8002c7a:	d016      	beq.n	8002caa <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8002c7c:	2b80      	cmp	r3, #128	@ 0x80
 8002c7e:	d81d      	bhi.n	8002cbc <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d002      	beq.n	8002c8a <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8002c84:	2b40      	cmp	r3, #64	@ 0x40
 8002c86:	d007      	beq.n	8002c98 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8002c88:	e018      	b.n	8002cbc <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002c8a:	4b5e      	ldr	r3, [pc, #376]	@ (8002e04 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002c8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c8e:	4a5d      	ldr	r2, [pc, #372]	@ (8002e04 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002c90:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002c94:	62d3      	str	r3, [r2, #44]	@ 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8002c96:	e017      	b.n	8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	3304      	adds	r3, #4
 8002c9c:	2100      	movs	r1, #0
 8002c9e:	4618      	mov	r0, r3
 8002ca0:	f001 ff6e 	bl	8004b80 <RCCEx_PLL2_Config>
 8002ca4:	4603      	mov	r3, r0
 8002ca6:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8002ca8:	e00e      	b.n	8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	3324      	adds	r3, #36	@ 0x24
 8002cae:	2100      	movs	r1, #0
 8002cb0:	4618      	mov	r0, r3
 8002cb2:	f002 f817 	bl	8004ce4 <RCCEx_PLL3_Config>
 8002cb6:	4603      	mov	r3, r0
 8002cb8:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8002cba:	e005      	b.n	8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002cbc:	2301      	movs	r3, #1
 8002cbe:	75fb      	strb	r3, [r7, #23]
      break;
 8002cc0:	e002      	b.n	8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8002cc2:	bf00      	nop
 8002cc4:	e000      	b.n	8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8002cc6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002cc8:	7dfb      	ldrb	r3, [r7, #23]
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d109      	bne.n	8002ce2 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8002cce:	4b4d      	ldr	r3, [pc, #308]	@ (8002e04 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002cd0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002cd2:	f423 72e0 	bic.w	r2, r3, #448	@ 0x1c0
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002cda:	494a      	ldr	r1, [pc, #296]	@ (8002e04 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002cdc:	4313      	orrs	r3, r2
 8002cde:	650b      	str	r3, [r1, #80]	@ 0x50
 8002ce0:	e001      	b.n	8002ce6 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ce2:	7dfb      	ldrb	r3, [r7, #23]
 8002ce4:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d049      	beq.n	8002d86 <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8002cf8:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002cfc:	d030      	beq.n	8002d60 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8002cfe:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002d02:	d82a      	bhi.n	8002d5a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8002d04:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8002d08:	d02c      	beq.n	8002d64 <HAL_RCCEx_PeriphCLKConfig+0x234>
 8002d0a:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8002d0e:	d824      	bhi.n	8002d5a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8002d10:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002d14:	d018      	beq.n	8002d48 <HAL_RCCEx_PeriphCLKConfig+0x218>
 8002d16:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002d1a:	d81e      	bhi.n	8002d5a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d003      	beq.n	8002d28 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8002d20:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002d24:	d007      	beq.n	8002d36 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8002d26:	e018      	b.n	8002d5a <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002d28:	4b36      	ldr	r3, [pc, #216]	@ (8002e04 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002d2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d2c:	4a35      	ldr	r2, [pc, #212]	@ (8002e04 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002d2e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002d32:	62d3      	str	r3, [r2, #44]	@ 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002d34:	e017      	b.n	8002d66 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	3304      	adds	r3, #4
 8002d3a:	2100      	movs	r1, #0
 8002d3c:	4618      	mov	r0, r3
 8002d3e:	f001 ff1f 	bl	8004b80 <RCCEx_PLL2_Config>
 8002d42:	4603      	mov	r3, r0
 8002d44:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8002d46:	e00e      	b.n	8002d66 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	3324      	adds	r3, #36	@ 0x24
 8002d4c:	2100      	movs	r1, #0
 8002d4e:	4618      	mov	r0, r3
 8002d50:	f001 ffc8 	bl	8004ce4 <RCCEx_PLL3_Config>
 8002d54:	4603      	mov	r3, r0
 8002d56:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002d58:	e005      	b.n	8002d66 <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8002d5a:	2301      	movs	r3, #1
 8002d5c:	75fb      	strb	r3, [r7, #23]
      break;
 8002d5e:	e002      	b.n	8002d66 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8002d60:	bf00      	nop
 8002d62:	e000      	b.n	8002d66 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8002d64:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002d66:	7dfb      	ldrb	r3, [r7, #23]
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d10a      	bne.n	8002d82 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8002d6c:	4b25      	ldr	r3, [pc, #148]	@ (8002e04 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002d6e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d70:	f423 0260 	bic.w	r2, r3, #14680064	@ 0xe00000
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8002d7a:	4922      	ldr	r1, [pc, #136]	@ (8002e04 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002d7c:	4313      	orrs	r3, r2
 8002d7e:	658b      	str	r3, [r1, #88]	@ 0x58
 8002d80:	e001      	b.n	8002d86 <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d82:	7dfb      	ldrb	r3, [r7, #23]
 8002d84:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d04b      	beq.n	8002e2a <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8002d98:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002d9c:	d030      	beq.n	8002e00 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8002d9e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002da2:	d82a      	bhi.n	8002dfa <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8002da4:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002da8:	d02e      	beq.n	8002e08 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 8002daa:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002dae:	d824      	bhi.n	8002dfa <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8002db0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002db4:	d018      	beq.n	8002de8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8002db6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002dba:	d81e      	bhi.n	8002dfa <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d003      	beq.n	8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8002dc0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002dc4:	d007      	beq.n	8002dd6 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8002dc6:	e018      	b.n	8002dfa <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002dc8:	4b0e      	ldr	r3, [pc, #56]	@ (8002e04 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002dca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002dcc:	4a0d      	ldr	r2, [pc, #52]	@ (8002e04 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002dce:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002dd2:	62d3      	str	r3, [r2, #44]	@ 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002dd4:	e019      	b.n	8002e0a <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	3304      	adds	r3, #4
 8002dda:	2100      	movs	r1, #0
 8002ddc:	4618      	mov	r0, r3
 8002dde:	f001 fecf 	bl	8004b80 <RCCEx_PLL2_Config>
 8002de2:	4603      	mov	r3, r0
 8002de4:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8002de6:	e010      	b.n	8002e0a <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	3324      	adds	r3, #36	@ 0x24
 8002dec:	2100      	movs	r1, #0
 8002dee:	4618      	mov	r0, r3
 8002df0:	f001 ff78 	bl	8004ce4 <RCCEx_PLL3_Config>
 8002df4:	4603      	mov	r3, r0
 8002df6:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002df8:	e007      	b.n	8002e0a <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8002dfa:	2301      	movs	r3, #1
 8002dfc:	75fb      	strb	r3, [r7, #23]
      break;
 8002dfe:	e004      	b.n	8002e0a <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 8002e00:	bf00      	nop
 8002e02:	e002      	b.n	8002e0a <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8002e04:	58024400 	.word	0x58024400
      break;
 8002e08:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002e0a:	7dfb      	ldrb	r3, [r7, #23]
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d10a      	bne.n	8002e26 <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8002e10:	4b99      	ldr	r3, [pc, #612]	@ (8003078 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002e12:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e14:	f023 62e0 	bic.w	r2, r3, #117440512	@ 0x7000000
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8002e1e:	4996      	ldr	r1, [pc, #600]	@ (8003078 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002e20:	4313      	orrs	r3, r2
 8002e22:	658b      	str	r3, [r1, #88]	@ 0x58
 8002e24:	e001      	b.n	8002e2a <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e26:	7dfb      	ldrb	r3, [r7, #23]
 8002e28:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d032      	beq.n	8002e9c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002e3a:	2b30      	cmp	r3, #48	@ 0x30
 8002e3c:	d01c      	beq.n	8002e78 <HAL_RCCEx_PeriphCLKConfig+0x348>
 8002e3e:	2b30      	cmp	r3, #48	@ 0x30
 8002e40:	d817      	bhi.n	8002e72 <HAL_RCCEx_PeriphCLKConfig+0x342>
 8002e42:	2b20      	cmp	r3, #32
 8002e44:	d00c      	beq.n	8002e60 <HAL_RCCEx_PeriphCLKConfig+0x330>
 8002e46:	2b20      	cmp	r3, #32
 8002e48:	d813      	bhi.n	8002e72 <HAL_RCCEx_PeriphCLKConfig+0x342>
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d016      	beq.n	8002e7c <HAL_RCCEx_PeriphCLKConfig+0x34c>
 8002e4e:	2b10      	cmp	r3, #16
 8002e50:	d10f      	bne.n	8002e72 <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002e52:	4b89      	ldr	r3, [pc, #548]	@ (8003078 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002e54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e56:	4a88      	ldr	r2, [pc, #544]	@ (8003078 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002e58:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002e5c:	62d3      	str	r3, [r2, #44]	@ 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8002e5e:	e00e      	b.n	8002e7e <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	3304      	adds	r3, #4
 8002e64:	2102      	movs	r1, #2
 8002e66:	4618      	mov	r0, r3
 8002e68:	f001 fe8a 	bl	8004b80 <RCCEx_PLL2_Config>
 8002e6c:	4603      	mov	r3, r0
 8002e6e:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8002e70:	e005      	b.n	8002e7e <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8002e72:	2301      	movs	r3, #1
 8002e74:	75fb      	strb	r3, [r7, #23]
      break;
 8002e76:	e002      	b.n	8002e7e <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8002e78:	bf00      	nop
 8002e7a:	e000      	b.n	8002e7e <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8002e7c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002e7e:	7dfb      	ldrb	r3, [r7, #23]
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d109      	bne.n	8002e98 <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8002e84:	4b7c      	ldr	r3, [pc, #496]	@ (8003078 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002e86:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002e88:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002e90:	4979      	ldr	r1, [pc, #484]	@ (8003078 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002e92:	4313      	orrs	r3, r2
 8002e94:	64cb      	str	r3, [r1, #76]	@ 0x4c
 8002e96:	e001      	b.n	8002e9c <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e98:	7dfb      	ldrb	r3, [r7, #23]
 8002e9a:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d047      	beq.n	8002f38 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002eac:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002eb0:	d030      	beq.n	8002f14 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8002eb2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002eb6:	d82a      	bhi.n	8002f0e <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8002eb8:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8002ebc:	d02c      	beq.n	8002f18 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8002ebe:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8002ec2:	d824      	bhi.n	8002f0e <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8002ec4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002ec8:	d018      	beq.n	8002efc <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 8002eca:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002ece:	d81e      	bhi.n	8002f0e <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d003      	beq.n	8002edc <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 8002ed4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002ed8:	d007      	beq.n	8002eea <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 8002eda:	e018      	b.n	8002f0e <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002edc:	4b66      	ldr	r3, [pc, #408]	@ (8003078 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002ede:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ee0:	4a65      	ldr	r2, [pc, #404]	@ (8003078 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002ee2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002ee6:	62d3      	str	r3, [r2, #44]	@ 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8002ee8:	e017      	b.n	8002f1a <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	3304      	adds	r3, #4
 8002eee:	2100      	movs	r1, #0
 8002ef0:	4618      	mov	r0, r3
 8002ef2:	f001 fe45 	bl	8004b80 <RCCEx_PLL2_Config>
 8002ef6:	4603      	mov	r3, r0
 8002ef8:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8002efa:	e00e      	b.n	8002f1a <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	3324      	adds	r3, #36	@ 0x24
 8002f00:	2100      	movs	r1, #0
 8002f02:	4618      	mov	r0, r3
 8002f04:	f001 feee 	bl	8004ce4 <RCCEx_PLL3_Config>
 8002f08:	4603      	mov	r3, r0
 8002f0a:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8002f0c:	e005      	b.n	8002f1a <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002f0e:	2301      	movs	r3, #1
 8002f10:	75fb      	strb	r3, [r7, #23]
      break;
 8002f12:	e002      	b.n	8002f1a <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8002f14:	bf00      	nop
 8002f16:	e000      	b.n	8002f1a <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8002f18:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002f1a:	7dfb      	ldrb	r3, [r7, #23]
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d109      	bne.n	8002f34 <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8002f20:	4b55      	ldr	r3, [pc, #340]	@ (8003078 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002f22:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002f24:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f2c:	4952      	ldr	r1, [pc, #328]	@ (8003078 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002f2e:	4313      	orrs	r3, r2
 8002f30:	650b      	str	r3, [r1, #80]	@ 0x50
 8002f32:	e001      	b.n	8002f38 <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f34:	7dfb      	ldrb	r3, [r7, #23]
 8002f36:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d049      	beq.n	8002fd8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002f48:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002f4c:	d02e      	beq.n	8002fac <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8002f4e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002f52:	d828      	bhi.n	8002fa6 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8002f54:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002f58:	d02a      	beq.n	8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x480>
 8002f5a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002f5e:	d822      	bhi.n	8002fa6 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8002f60:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8002f64:	d026      	beq.n	8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x484>
 8002f66:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8002f6a:	d81c      	bhi.n	8002fa6 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8002f6c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002f70:	d010      	beq.n	8002f94 <HAL_RCCEx_PeriphCLKConfig+0x464>
 8002f72:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002f76:	d816      	bhi.n	8002fa6 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d01d      	beq.n	8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x488>
 8002f7c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002f80:	d111      	bne.n	8002fa6 <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	3304      	adds	r3, #4
 8002f86:	2101      	movs	r1, #1
 8002f88:	4618      	mov	r0, r3
 8002f8a:	f001 fdf9 	bl	8004b80 <RCCEx_PLL2_Config>
 8002f8e:	4603      	mov	r3, r0
 8002f90:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8002f92:	e012      	b.n	8002fba <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	3324      	adds	r3, #36	@ 0x24
 8002f98:	2101      	movs	r1, #1
 8002f9a:	4618      	mov	r0, r3
 8002f9c:	f001 fea2 	bl	8004ce4 <RCCEx_PLL3_Config>
 8002fa0:	4603      	mov	r3, r0
 8002fa2:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8002fa4:	e009      	b.n	8002fba <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002fa6:	2301      	movs	r3, #1
 8002fa8:	75fb      	strb	r3, [r7, #23]
      break;
 8002faa:	e006      	b.n	8002fba <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8002fac:	bf00      	nop
 8002fae:	e004      	b.n	8002fba <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8002fb0:	bf00      	nop
 8002fb2:	e002      	b.n	8002fba <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8002fb4:	bf00      	nop
 8002fb6:	e000      	b.n	8002fba <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8002fb8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002fba:	7dfb      	ldrb	r3, [r7, #23]
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d109      	bne.n	8002fd4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8002fc0:	4b2d      	ldr	r3, [pc, #180]	@ (8003078 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002fc2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002fc4:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002fcc:	492a      	ldr	r1, [pc, #168]	@ (8003078 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002fce:	4313      	orrs	r3, r2
 8002fd0:	650b      	str	r3, [r1, #80]	@ 0x50
 8002fd2:	e001      	b.n	8002fd8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002fd4:	7dfb      	ldrb	r3, [r7, #23]
 8002fd6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d04d      	beq.n	8003080 <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8002fea:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002fee:	d02e      	beq.n	800304e <HAL_RCCEx_PeriphCLKConfig+0x51e>
 8002ff0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002ff4:	d828      	bhi.n	8003048 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8002ff6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002ffa:	d02a      	beq.n	8003052 <HAL_RCCEx_PeriphCLKConfig+0x522>
 8002ffc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003000:	d822      	bhi.n	8003048 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8003002:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003006:	d026      	beq.n	8003056 <HAL_RCCEx_PeriphCLKConfig+0x526>
 8003008:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800300c:	d81c      	bhi.n	8003048 <HAL_RCCEx_PeriphCLKConfig+0x518>
 800300e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003012:	d010      	beq.n	8003036 <HAL_RCCEx_PeriphCLKConfig+0x506>
 8003014:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003018:	d816      	bhi.n	8003048 <HAL_RCCEx_PeriphCLKConfig+0x518>
 800301a:	2b00      	cmp	r3, #0
 800301c:	d01d      	beq.n	800305a <HAL_RCCEx_PeriphCLKConfig+0x52a>
 800301e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003022:	d111      	bne.n	8003048 <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	3304      	adds	r3, #4
 8003028:	2101      	movs	r1, #1
 800302a:	4618      	mov	r0, r3
 800302c:	f001 fda8 	bl	8004b80 <RCCEx_PLL2_Config>
 8003030:	4603      	mov	r3, r0
 8003032:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8003034:	e012      	b.n	800305c <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	3324      	adds	r3, #36	@ 0x24
 800303a:	2101      	movs	r1, #1
 800303c:	4618      	mov	r0, r3
 800303e:	f001 fe51 	bl	8004ce4 <RCCEx_PLL3_Config>
 8003042:	4603      	mov	r3, r0
 8003044:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8003046:	e009      	b.n	800305c <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8003048:	2301      	movs	r3, #1
 800304a:	75fb      	strb	r3, [r7, #23]
      break;
 800304c:	e006      	b.n	800305c <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 800304e:	bf00      	nop
 8003050:	e004      	b.n	800305c <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8003052:	bf00      	nop
 8003054:	e002      	b.n	800305c <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8003056:	bf00      	nop
 8003058:	e000      	b.n	800305c <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 800305a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800305c:	7dfb      	ldrb	r3, [r7, #23]
 800305e:	2b00      	cmp	r3, #0
 8003060:	d10c      	bne.n	800307c <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8003062:	4b05      	ldr	r3, [pc, #20]	@ (8003078 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003064:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003066:	f023 42e0 	bic.w	r2, r3, #1879048192	@ 0x70000000
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8003070:	4901      	ldr	r1, [pc, #4]	@ (8003078 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003072:	4313      	orrs	r3, r2
 8003074:	658b      	str	r3, [r1, #88]	@ 0x58
 8003076:	e003      	b.n	8003080 <HAL_RCCEx_PeriphCLKConfig+0x550>
 8003078:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800307c:	7dfb      	ldrb	r3, [r7, #23]
 800307e:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003088:	2b00      	cmp	r3, #0
 800308a:	d02f      	beq.n	80030ec <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003090:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003094:	d00e      	beq.n	80030b4 <HAL_RCCEx_PeriphCLKConfig+0x584>
 8003096:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800309a:	d814      	bhi.n	80030c6 <HAL_RCCEx_PeriphCLKConfig+0x596>
 800309c:	2b00      	cmp	r3, #0
 800309e:	d015      	beq.n	80030cc <HAL_RCCEx_PeriphCLKConfig+0x59c>
 80030a0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80030a4:	d10f      	bne.n	80030c6 <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80030a6:	4baf      	ldr	r3, [pc, #700]	@ (8003364 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80030a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030aa:	4aae      	ldr	r2, [pc, #696]	@ (8003364 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80030ac:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80030b0:	62d3      	str	r3, [r2, #44]	@ 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80030b2:	e00c      	b.n	80030ce <HAL_RCCEx_PeriphCLKConfig+0x59e>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	3304      	adds	r3, #4
 80030b8:	2101      	movs	r1, #1
 80030ba:	4618      	mov	r0, r3
 80030bc:	f001 fd60 	bl	8004b80 <RCCEx_PLL2_Config>
 80030c0:	4603      	mov	r3, r0
 80030c2:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80030c4:	e003      	b.n	80030ce <HAL_RCCEx_PeriphCLKConfig+0x59e>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80030c6:	2301      	movs	r3, #1
 80030c8:	75fb      	strb	r3, [r7, #23]
      break;
 80030ca:	e000      	b.n	80030ce <HAL_RCCEx_PeriphCLKConfig+0x59e>
      break;
 80030cc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80030ce:	7dfb      	ldrb	r3, [r7, #23]
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d109      	bne.n	80030e8 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80030d4:	4ba3      	ldr	r3, [pc, #652]	@ (8003364 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80030d6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80030d8:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80030e0:	49a0      	ldr	r1, [pc, #640]	@ (8003364 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80030e2:	4313      	orrs	r3, r2
 80030e4:	650b      	str	r3, [r1, #80]	@ 0x50
 80030e6:	e001      	b.n	80030ec <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80030e8:	7dfb      	ldrb	r3, [r7, #23]
 80030ea:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d032      	beq.n	800315e <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030fc:	2b03      	cmp	r3, #3
 80030fe:	d81b      	bhi.n	8003138 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8003100:	a201      	add	r2, pc, #4	@ (adr r2, 8003108 <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
 8003102:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003106:	bf00      	nop
 8003108:	0800313f 	.word	0x0800313f
 800310c:	08003119 	.word	0x08003119
 8003110:	08003127 	.word	0x08003127
 8003114:	0800313f 	.word	0x0800313f
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003118:	4b92      	ldr	r3, [pc, #584]	@ (8003364 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800311a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800311c:	4a91      	ldr	r2, [pc, #580]	@ (8003364 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800311e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003122:	62d3      	str	r3, [r2, #44]	@ 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8003124:	e00c      	b.n	8003140 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	3304      	adds	r3, #4
 800312a:	2102      	movs	r1, #2
 800312c:	4618      	mov	r0, r3
 800312e:	f001 fd27 	bl	8004b80 <RCCEx_PLL2_Config>
 8003132:	4603      	mov	r3, r0
 8003134:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8003136:	e003      	b.n	8003140 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8003138:	2301      	movs	r3, #1
 800313a:	75fb      	strb	r3, [r7, #23]
      break;
 800313c:	e000      	b.n	8003140 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 800313e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003140:	7dfb      	ldrb	r3, [r7, #23]
 8003142:	2b00      	cmp	r3, #0
 8003144:	d109      	bne.n	800315a <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8003146:	4b87      	ldr	r3, [pc, #540]	@ (8003364 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003148:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800314a:	f023 0203 	bic.w	r2, r3, #3
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003152:	4984      	ldr	r1, [pc, #528]	@ (8003364 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003154:	4313      	orrs	r3, r2
 8003156:	64cb      	str	r3, [r1, #76]	@ 0x4c
 8003158:	e001      	b.n	800315e <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800315a:	7dfb      	ldrb	r3, [r7, #23]
 800315c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003166:	2b00      	cmp	r3, #0
 8003168:	f000 8086 	beq.w	8003278 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800316c:	4b7e      	ldr	r3, [pc, #504]	@ (8003368 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	4a7d      	ldr	r2, [pc, #500]	@ (8003368 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8003172:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003176:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003178:	f7fe f824 	bl	80011c4 <HAL_GetTick>
 800317c:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800317e:	e009      	b.n	8003194 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003180:	f7fe f820 	bl	80011c4 <HAL_GetTick>
 8003184:	4602      	mov	r2, r0
 8003186:	693b      	ldr	r3, [r7, #16]
 8003188:	1ad3      	subs	r3, r2, r3
 800318a:	2b64      	cmp	r3, #100	@ 0x64
 800318c:	d902      	bls.n	8003194 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 800318e:	2303      	movs	r3, #3
 8003190:	75fb      	strb	r3, [r7, #23]
        break;
 8003192:	e005      	b.n	80031a0 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003194:	4b74      	ldr	r3, [pc, #464]	@ (8003368 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800319c:	2b00      	cmp	r3, #0
 800319e:	d0ef      	beq.n	8003180 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 80031a0:	7dfb      	ldrb	r3, [r7, #23]
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d166      	bne.n	8003274 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80031a6:	4b6f      	ldr	r3, [pc, #444]	@ (8003364 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80031a8:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80031b0:	4053      	eors	r3, r2
 80031b2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d013      	beq.n	80031e2 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80031ba:	4b6a      	ldr	r3, [pc, #424]	@ (8003364 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80031bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80031be:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80031c2:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80031c4:	4b67      	ldr	r3, [pc, #412]	@ (8003364 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80031c6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80031c8:	4a66      	ldr	r2, [pc, #408]	@ (8003364 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80031ca:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80031ce:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80031d0:	4b64      	ldr	r3, [pc, #400]	@ (8003364 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80031d2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80031d4:	4a63      	ldr	r2, [pc, #396]	@ (8003364 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80031d6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80031da:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80031dc:	4a61      	ldr	r2, [pc, #388]	@ (8003364 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80031e8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80031ec:	d115      	bne.n	800321a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031ee:	f7fd ffe9 	bl	80011c4 <HAL_GetTick>
 80031f2:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80031f4:	e00b      	b.n	800320e <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80031f6:	f7fd ffe5 	bl	80011c4 <HAL_GetTick>
 80031fa:	4602      	mov	r2, r0
 80031fc:	693b      	ldr	r3, [r7, #16]
 80031fe:	1ad3      	subs	r3, r2, r3
 8003200:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003204:	4293      	cmp	r3, r2
 8003206:	d902      	bls.n	800320e <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8003208:	2303      	movs	r3, #3
 800320a:	75fb      	strb	r3, [r7, #23]
            break;
 800320c:	e005      	b.n	800321a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800320e:	4b55      	ldr	r3, [pc, #340]	@ (8003364 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003210:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003212:	f003 0302 	and.w	r3, r3, #2
 8003216:	2b00      	cmp	r3, #0
 8003218:	d0ed      	beq.n	80031f6 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 800321a:	7dfb      	ldrb	r3, [r7, #23]
 800321c:	2b00      	cmp	r3, #0
 800321e:	d126      	bne.n	800326e <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003226:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800322a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800322e:	d10d      	bne.n	800324c <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8003230:	4b4c      	ldr	r3, [pc, #304]	@ (8003364 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003232:	691b      	ldr	r3, [r3, #16]
 8003234:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800323e:	0919      	lsrs	r1, r3, #4
 8003240:	4b4a      	ldr	r3, [pc, #296]	@ (800336c <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 8003242:	400b      	ands	r3, r1
 8003244:	4947      	ldr	r1, [pc, #284]	@ (8003364 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003246:	4313      	orrs	r3, r2
 8003248:	610b      	str	r3, [r1, #16]
 800324a:	e005      	b.n	8003258 <HAL_RCCEx_PeriphCLKConfig+0x728>
 800324c:	4b45      	ldr	r3, [pc, #276]	@ (8003364 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800324e:	691b      	ldr	r3, [r3, #16]
 8003250:	4a44      	ldr	r2, [pc, #272]	@ (8003364 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003252:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8003256:	6113      	str	r3, [r2, #16]
 8003258:	4b42      	ldr	r3, [pc, #264]	@ (8003364 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800325a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003262:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003266:	493f      	ldr	r1, [pc, #252]	@ (8003364 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003268:	4313      	orrs	r3, r2
 800326a:	670b      	str	r3, [r1, #112]	@ 0x70
 800326c:	e004      	b.n	8003278 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800326e:	7dfb      	ldrb	r3, [r7, #23]
 8003270:	75bb      	strb	r3, [r7, #22]
 8003272:	e001      	b.n	8003278 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003274:	7dfb      	ldrb	r3, [r7, #23]
 8003276:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f003 0301 	and.w	r3, r3, #1
 8003280:	2b00      	cmp	r3, #0
 8003282:	f000 8085 	beq.w	8003390 <HAL_RCCEx_PeriphCLKConfig+0x860>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800328a:	2b28      	cmp	r3, #40	@ 0x28
 800328c:	d866      	bhi.n	800335c <HAL_RCCEx_PeriphCLKConfig+0x82c>
 800328e:	a201      	add	r2, pc, #4	@ (adr r2, 8003294 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8003290:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003294:	08003371 	.word	0x08003371
 8003298:	0800335d 	.word	0x0800335d
 800329c:	0800335d 	.word	0x0800335d
 80032a0:	0800335d 	.word	0x0800335d
 80032a4:	0800335d 	.word	0x0800335d
 80032a8:	0800335d 	.word	0x0800335d
 80032ac:	0800335d 	.word	0x0800335d
 80032b0:	0800335d 	.word	0x0800335d
 80032b4:	08003339 	.word	0x08003339
 80032b8:	0800335d 	.word	0x0800335d
 80032bc:	0800335d 	.word	0x0800335d
 80032c0:	0800335d 	.word	0x0800335d
 80032c4:	0800335d 	.word	0x0800335d
 80032c8:	0800335d 	.word	0x0800335d
 80032cc:	0800335d 	.word	0x0800335d
 80032d0:	0800335d 	.word	0x0800335d
 80032d4:	0800334b 	.word	0x0800334b
 80032d8:	0800335d 	.word	0x0800335d
 80032dc:	0800335d 	.word	0x0800335d
 80032e0:	0800335d 	.word	0x0800335d
 80032e4:	0800335d 	.word	0x0800335d
 80032e8:	0800335d 	.word	0x0800335d
 80032ec:	0800335d 	.word	0x0800335d
 80032f0:	0800335d 	.word	0x0800335d
 80032f4:	08003371 	.word	0x08003371
 80032f8:	0800335d 	.word	0x0800335d
 80032fc:	0800335d 	.word	0x0800335d
 8003300:	0800335d 	.word	0x0800335d
 8003304:	0800335d 	.word	0x0800335d
 8003308:	0800335d 	.word	0x0800335d
 800330c:	0800335d 	.word	0x0800335d
 8003310:	0800335d 	.word	0x0800335d
 8003314:	08003371 	.word	0x08003371
 8003318:	0800335d 	.word	0x0800335d
 800331c:	0800335d 	.word	0x0800335d
 8003320:	0800335d 	.word	0x0800335d
 8003324:	0800335d 	.word	0x0800335d
 8003328:	0800335d 	.word	0x0800335d
 800332c:	0800335d 	.word	0x0800335d
 8003330:	0800335d 	.word	0x0800335d
 8003334:	08003371 	.word	0x08003371
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	3304      	adds	r3, #4
 800333c:	2101      	movs	r1, #1
 800333e:	4618      	mov	r0, r3
 8003340:	f001 fc1e 	bl	8004b80 <RCCEx_PLL2_Config>
 8003344:	4603      	mov	r3, r0
 8003346:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8003348:	e013      	b.n	8003372 <HAL_RCCEx_PeriphCLKConfig+0x842>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	3324      	adds	r3, #36	@ 0x24
 800334e:	2101      	movs	r1, #1
 8003350:	4618      	mov	r0, r3
 8003352:	f001 fcc7 	bl	8004ce4 <RCCEx_PLL3_Config>
 8003356:	4603      	mov	r3, r0
 8003358:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800335a:	e00a      	b.n	8003372 <HAL_RCCEx_PeriphCLKConfig+0x842>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800335c:	2301      	movs	r3, #1
 800335e:	75fb      	strb	r3, [r7, #23]
      break;
 8003360:	e007      	b.n	8003372 <HAL_RCCEx_PeriphCLKConfig+0x842>
 8003362:	bf00      	nop
 8003364:	58024400 	.word	0x58024400
 8003368:	58024800 	.word	0x58024800
 800336c:	00ffffcf 	.word	0x00ffffcf
      break;
 8003370:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003372:	7dfb      	ldrb	r3, [r7, #23]
 8003374:	2b00      	cmp	r3, #0
 8003376:	d109      	bne.n	800338c <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8003378:	4b96      	ldr	r3, [pc, #600]	@ (80035d4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800337a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800337c:	f023 0238 	bic.w	r2, r3, #56	@ 0x38
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003384:	4993      	ldr	r1, [pc, #588]	@ (80035d4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003386:	4313      	orrs	r3, r2
 8003388:	654b      	str	r3, [r1, #84]	@ 0x54
 800338a:	e001      	b.n	8003390 <HAL_RCCEx_PeriphCLKConfig+0x860>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800338c:	7dfb      	ldrb	r3, [r7, #23]
 800338e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f003 0302 	and.w	r3, r3, #2
 8003398:	2b00      	cmp	r3, #0
 800339a:	d038      	beq.n	800340e <HAL_RCCEx_PeriphCLKConfig+0x8de>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80033a0:	2b05      	cmp	r3, #5
 80033a2:	d821      	bhi.n	80033e8 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 80033a4:	a201      	add	r2, pc, #4	@ (adr r2, 80033ac <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 80033a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033aa:	bf00      	nop
 80033ac:	080033ef 	.word	0x080033ef
 80033b0:	080033c5 	.word	0x080033c5
 80033b4:	080033d7 	.word	0x080033d7
 80033b8:	080033ef 	.word	0x080033ef
 80033bc:	080033ef 	.word	0x080033ef
 80033c0:	080033ef 	.word	0x080033ef
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	3304      	adds	r3, #4
 80033c8:	2101      	movs	r1, #1
 80033ca:	4618      	mov	r0, r3
 80033cc:	f001 fbd8 	bl	8004b80 <RCCEx_PLL2_Config>
 80033d0:	4603      	mov	r3, r0
 80033d2:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80033d4:	e00c      	b.n	80033f0 <HAL_RCCEx_PeriphCLKConfig+0x8c0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	3324      	adds	r3, #36	@ 0x24
 80033da:	2101      	movs	r1, #1
 80033dc:	4618      	mov	r0, r3
 80033de:	f001 fc81 	bl	8004ce4 <RCCEx_PLL3_Config>
 80033e2:	4603      	mov	r3, r0
 80033e4:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80033e6:	e003      	b.n	80033f0 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80033e8:	2301      	movs	r3, #1
 80033ea:	75fb      	strb	r3, [r7, #23]
      break;
 80033ec:	e000      	b.n	80033f0 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      break;
 80033ee:	bf00      	nop
    }

    if(ret == HAL_OK)
 80033f0:	7dfb      	ldrb	r3, [r7, #23]
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d109      	bne.n	800340a <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80033f6:	4b77      	ldr	r3, [pc, #476]	@ (80035d4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80033f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80033fa:	f023 0207 	bic.w	r2, r3, #7
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003402:	4974      	ldr	r1, [pc, #464]	@ (80035d4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003404:	4313      	orrs	r3, r2
 8003406:	654b      	str	r3, [r1, #84]	@ 0x54
 8003408:	e001      	b.n	800340e <HAL_RCCEx_PeriphCLKConfig+0x8de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800340a:	7dfb      	ldrb	r3, [r7, #23]
 800340c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	f003 0304 	and.w	r3, r3, #4
 8003416:	2b00      	cmp	r3, #0
 8003418:	d03a      	beq.n	8003490 <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003420:	2b05      	cmp	r3, #5
 8003422:	d821      	bhi.n	8003468 <HAL_RCCEx_PeriphCLKConfig+0x938>
 8003424:	a201      	add	r2, pc, #4	@ (adr r2, 800342c <HAL_RCCEx_PeriphCLKConfig+0x8fc>)
 8003426:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800342a:	bf00      	nop
 800342c:	0800346f 	.word	0x0800346f
 8003430:	08003445 	.word	0x08003445
 8003434:	08003457 	.word	0x08003457
 8003438:	0800346f 	.word	0x0800346f
 800343c:	0800346f 	.word	0x0800346f
 8003440:	0800346f 	.word	0x0800346f
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	3304      	adds	r3, #4
 8003448:	2101      	movs	r1, #1
 800344a:	4618      	mov	r0, r3
 800344c:	f001 fb98 	bl	8004b80 <RCCEx_PLL2_Config>
 8003450:	4603      	mov	r3, r0
 8003452:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8003454:	e00c      	b.n	8003470 <HAL_RCCEx_PeriphCLKConfig+0x940>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	3324      	adds	r3, #36	@ 0x24
 800345a:	2101      	movs	r1, #1
 800345c:	4618      	mov	r0, r3
 800345e:	f001 fc41 	bl	8004ce4 <RCCEx_PLL3_Config>
 8003462:	4603      	mov	r3, r0
 8003464:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8003466:	e003      	b.n	8003470 <HAL_RCCEx_PeriphCLKConfig+0x940>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003468:	2301      	movs	r3, #1
 800346a:	75fb      	strb	r3, [r7, #23]
      break;
 800346c:	e000      	b.n	8003470 <HAL_RCCEx_PeriphCLKConfig+0x940>
      break;
 800346e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003470:	7dfb      	ldrb	r3, [r7, #23]
 8003472:	2b00      	cmp	r3, #0
 8003474:	d10a      	bne.n	800348c <HAL_RCCEx_PeriphCLKConfig+0x95c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003476:	4b57      	ldr	r3, [pc, #348]	@ (80035d4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003478:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800347a:	f023 0207 	bic.w	r2, r3, #7
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003484:	4953      	ldr	r1, [pc, #332]	@ (80035d4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003486:	4313      	orrs	r3, r2
 8003488:	658b      	str	r3, [r1, #88]	@ 0x58
 800348a:	e001      	b.n	8003490 <HAL_RCCEx_PeriphCLKConfig+0x960>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800348c:	7dfb      	ldrb	r3, [r7, #23]
 800348e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	f003 0320 	and.w	r3, r3, #32
 8003498:	2b00      	cmp	r3, #0
 800349a:	d04b      	beq.n	8003534 <HAL_RCCEx_PeriphCLKConfig+0xa04>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80034a2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80034a6:	d02e      	beq.n	8003506 <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 80034a8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80034ac:	d828      	bhi.n	8003500 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 80034ae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80034b2:	d02a      	beq.n	800350a <HAL_RCCEx_PeriphCLKConfig+0x9da>
 80034b4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80034b8:	d822      	bhi.n	8003500 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 80034ba:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80034be:	d026      	beq.n	800350e <HAL_RCCEx_PeriphCLKConfig+0x9de>
 80034c0:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80034c4:	d81c      	bhi.n	8003500 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 80034c6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80034ca:	d010      	beq.n	80034ee <HAL_RCCEx_PeriphCLKConfig+0x9be>
 80034cc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80034d0:	d816      	bhi.n	8003500 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d01d      	beq.n	8003512 <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 80034d6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80034da:	d111      	bne.n	8003500 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	3304      	adds	r3, #4
 80034e0:	2100      	movs	r1, #0
 80034e2:	4618      	mov	r0, r3
 80034e4:	f001 fb4c 	bl	8004b80 <RCCEx_PLL2_Config>
 80034e8:	4603      	mov	r3, r0
 80034ea:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80034ec:	e012      	b.n	8003514 <HAL_RCCEx_PeriphCLKConfig+0x9e4>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	3324      	adds	r3, #36	@ 0x24
 80034f2:	2102      	movs	r1, #2
 80034f4:	4618      	mov	r0, r3
 80034f6:	f001 fbf5 	bl	8004ce4 <RCCEx_PLL3_Config>
 80034fa:	4603      	mov	r3, r0
 80034fc:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80034fe:	e009      	b.n	8003514 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003500:	2301      	movs	r3, #1
 8003502:	75fb      	strb	r3, [r7, #23]
      break;
 8003504:	e006      	b.n	8003514 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8003506:	bf00      	nop
 8003508:	e004      	b.n	8003514 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 800350a:	bf00      	nop
 800350c:	e002      	b.n	8003514 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 800350e:	bf00      	nop
 8003510:	e000      	b.n	8003514 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8003512:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003514:	7dfb      	ldrb	r3, [r7, #23]
 8003516:	2b00      	cmp	r3, #0
 8003518:	d10a      	bne.n	8003530 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800351a:	4b2e      	ldr	r3, [pc, #184]	@ (80035d4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800351c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800351e:	f023 42e0 	bic.w	r2, r3, #1879048192	@ 0x70000000
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003528:	492a      	ldr	r1, [pc, #168]	@ (80035d4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800352a:	4313      	orrs	r3, r2
 800352c:	654b      	str	r3, [r1, #84]	@ 0x54
 800352e:	e001      	b.n	8003534 <HAL_RCCEx_PeriphCLKConfig+0xa04>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003530:	7dfb      	ldrb	r3, [r7, #23]
 8003532:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800353c:	2b00      	cmp	r3, #0
 800353e:	d04d      	beq.n	80035dc <HAL_RCCEx_PeriphCLKConfig+0xaac>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003546:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800354a:	d02e      	beq.n	80035aa <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 800354c:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8003550:	d828      	bhi.n	80035a4 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8003552:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003556:	d02a      	beq.n	80035ae <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8003558:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800355c:	d822      	bhi.n	80035a4 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800355e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003562:	d026      	beq.n	80035b2 <HAL_RCCEx_PeriphCLKConfig+0xa82>
 8003564:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003568:	d81c      	bhi.n	80035a4 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800356a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800356e:	d010      	beq.n	8003592 <HAL_RCCEx_PeriphCLKConfig+0xa62>
 8003570:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003574:	d816      	bhi.n	80035a4 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8003576:	2b00      	cmp	r3, #0
 8003578:	d01d      	beq.n	80035b6 <HAL_RCCEx_PeriphCLKConfig+0xa86>
 800357a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800357e:	d111      	bne.n	80035a4 <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	3304      	adds	r3, #4
 8003584:	2100      	movs	r1, #0
 8003586:	4618      	mov	r0, r3
 8003588:	f001 fafa 	bl	8004b80 <RCCEx_PLL2_Config>
 800358c:	4603      	mov	r3, r0
 800358e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8003590:	e012      	b.n	80035b8 <HAL_RCCEx_PeriphCLKConfig+0xa88>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	3324      	adds	r3, #36	@ 0x24
 8003596:	2102      	movs	r1, #2
 8003598:	4618      	mov	r0, r3
 800359a:	f001 fba3 	bl	8004ce4 <RCCEx_PLL3_Config>
 800359e:	4603      	mov	r3, r0
 80035a0:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80035a2:	e009      	b.n	80035b8 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80035a4:	2301      	movs	r3, #1
 80035a6:	75fb      	strb	r3, [r7, #23]
      break;
 80035a8:	e006      	b.n	80035b8 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 80035aa:	bf00      	nop
 80035ac:	e004      	b.n	80035b8 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 80035ae:	bf00      	nop
 80035b0:	e002      	b.n	80035b8 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 80035b2:	bf00      	nop
 80035b4:	e000      	b.n	80035b8 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 80035b6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80035b8:	7dfb      	ldrb	r3, [r7, #23]
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d10c      	bne.n	80035d8 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80035be:	4b05      	ldr	r3, [pc, #20]	@ (80035d4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80035c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80035c2:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80035cc:	4901      	ldr	r1, [pc, #4]	@ (80035d4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80035ce:	4313      	orrs	r3, r2
 80035d0:	658b      	str	r3, [r1, #88]	@ 0x58
 80035d2:	e003      	b.n	80035dc <HAL_RCCEx_PeriphCLKConfig+0xaac>
 80035d4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035d8:	7dfb      	ldrb	r3, [r7, #23]
 80035da:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d04b      	beq.n	8003680 <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80035ee:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80035f2:	d02e      	beq.n	8003652 <HAL_RCCEx_PeriphCLKConfig+0xb22>
 80035f4:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80035f8:	d828      	bhi.n	800364c <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 80035fa:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80035fe:	d02a      	beq.n	8003656 <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8003600:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003604:	d822      	bhi.n	800364c <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8003606:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800360a:	d026      	beq.n	800365a <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 800360c:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8003610:	d81c      	bhi.n	800364c <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8003612:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003616:	d010      	beq.n	800363a <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 8003618:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800361c:	d816      	bhi.n	800364c <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 800361e:	2b00      	cmp	r3, #0
 8003620:	d01d      	beq.n	800365e <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 8003622:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003626:	d111      	bne.n	800364c <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	3304      	adds	r3, #4
 800362c:	2100      	movs	r1, #0
 800362e:	4618      	mov	r0, r3
 8003630:	f001 faa6 	bl	8004b80 <RCCEx_PLL2_Config>
 8003634:	4603      	mov	r3, r0
 8003636:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8003638:	e012      	b.n	8003660 <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	3324      	adds	r3, #36	@ 0x24
 800363e:	2102      	movs	r1, #2
 8003640:	4618      	mov	r0, r3
 8003642:	f001 fb4f 	bl	8004ce4 <RCCEx_PLL3_Config>
 8003646:	4603      	mov	r3, r0
 8003648:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800364a:	e009      	b.n	8003660 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800364c:	2301      	movs	r3, #1
 800364e:	75fb      	strb	r3, [r7, #23]
      break;
 8003650:	e006      	b.n	8003660 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8003652:	bf00      	nop
 8003654:	e004      	b.n	8003660 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8003656:	bf00      	nop
 8003658:	e002      	b.n	8003660 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800365a:	bf00      	nop
 800365c:	e000      	b.n	8003660 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800365e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003660:	7dfb      	ldrb	r3, [r7, #23]
 8003662:	2b00      	cmp	r3, #0
 8003664:	d10a      	bne.n	800367c <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8003666:	4b9d      	ldr	r3, [pc, #628]	@ (80038dc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003668:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800366a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003674:	4999      	ldr	r1, [pc, #612]	@ (80038dc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003676:	4313      	orrs	r3, r2
 8003678:	658b      	str	r3, [r1, #88]	@ 0x58
 800367a:	e001      	b.n	8003680 <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800367c:	7dfb      	ldrb	r3, [r7, #23]
 800367e:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f003 0308 	and.w	r3, r3, #8
 8003688:	2b00      	cmp	r3, #0
 800368a:	d01a      	beq.n	80036c2 <HAL_RCCEx_PeriphCLKConfig+0xb92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003692:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003696:	d10a      	bne.n	80036ae <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	3324      	adds	r3, #36	@ 0x24
 800369c:	2102      	movs	r1, #2
 800369e:	4618      	mov	r0, r3
 80036a0:	f001 fb20 	bl	8004ce4 <RCCEx_PLL3_Config>
 80036a4:	4603      	mov	r3, r0
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d001      	beq.n	80036ae <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        {
          status = HAL_ERROR;
 80036aa:	2301      	movs	r3, #1
 80036ac:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80036ae:	4b8b      	ldr	r3, [pc, #556]	@ (80038dc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80036b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80036b2:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80036bc:	4987      	ldr	r1, [pc, #540]	@ (80038dc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80036be:	4313      	orrs	r3, r2
 80036c0:	654b      	str	r3, [r1, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f003 0310 	and.w	r3, r3, #16
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d01a      	beq.n	8003704 <HAL_RCCEx_PeriphCLKConfig+0xbd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80036d4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80036d8:	d10a      	bne.n	80036f0 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	3324      	adds	r3, #36	@ 0x24
 80036de:	2102      	movs	r1, #2
 80036e0:	4618      	mov	r0, r3
 80036e2:	f001 faff 	bl	8004ce4 <RCCEx_PLL3_Config>
 80036e6:	4603      	mov	r3, r0
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d001      	beq.n	80036f0 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      {
        status = HAL_ERROR;
 80036ec:	2301      	movs	r3, #1
 80036ee:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80036f0:	4b7a      	ldr	r3, [pc, #488]	@ (80038dc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80036f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80036f4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80036fe:	4977      	ldr	r1, [pc, #476]	@ (80038dc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003700:	4313      	orrs	r3, r2
 8003702:	658b      	str	r3, [r1, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800370c:	2b00      	cmp	r3, #0
 800370e:	d034      	beq.n	800377a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8003716:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800371a:	d01d      	beq.n	8003758 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 800371c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003720:	d817      	bhi.n	8003752 <HAL_RCCEx_PeriphCLKConfig+0xc22>
 8003722:	2b00      	cmp	r3, #0
 8003724:	d003      	beq.n	800372e <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8003726:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800372a:	d009      	beq.n	8003740 <HAL_RCCEx_PeriphCLKConfig+0xc10>
 800372c:	e011      	b.n	8003752 <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	3304      	adds	r3, #4
 8003732:	2100      	movs	r1, #0
 8003734:	4618      	mov	r0, r3
 8003736:	f001 fa23 	bl	8004b80 <RCCEx_PLL2_Config>
 800373a:	4603      	mov	r3, r0
 800373c:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800373e:	e00c      	b.n	800375a <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	3324      	adds	r3, #36	@ 0x24
 8003744:	2102      	movs	r1, #2
 8003746:	4618      	mov	r0, r3
 8003748:	f001 facc 	bl	8004ce4 <RCCEx_PLL3_Config>
 800374c:	4603      	mov	r3, r0
 800374e:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8003750:	e003      	b.n	800375a <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003752:	2301      	movs	r3, #1
 8003754:	75fb      	strb	r3, [r7, #23]
      break;
 8003756:	e000      	b.n	800375a <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 8003758:	bf00      	nop
    }

    if(ret == HAL_OK)
 800375a:	7dfb      	ldrb	r3, [r7, #23]
 800375c:	2b00      	cmp	r3, #0
 800375e:	d10a      	bne.n	8003776 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003760:	4b5e      	ldr	r3, [pc, #376]	@ (80038dc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003762:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003764:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800376e:	495b      	ldr	r1, [pc, #364]	@ (80038dc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003770:	4313      	orrs	r3, r2
 8003772:	658b      	str	r3, [r1, #88]	@ 0x58
 8003774:	e001      	b.n	800377a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003776:	7dfb      	ldrb	r3, [r7, #23]
 8003778:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003782:	2b00      	cmp	r3, #0
 8003784:	d033      	beq.n	80037ee <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800378c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003790:	d01c      	beq.n	80037cc <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 8003792:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003796:	d816      	bhi.n	80037c6 <HAL_RCCEx_PeriphCLKConfig+0xc96>
 8003798:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800379c:	d003      	beq.n	80037a6 <HAL_RCCEx_PeriphCLKConfig+0xc76>
 800379e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80037a2:	d007      	beq.n	80037b4 <HAL_RCCEx_PeriphCLKConfig+0xc84>
 80037a4:	e00f      	b.n	80037c6 <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80037a6:	4b4d      	ldr	r3, [pc, #308]	@ (80038dc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80037a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037aa:	4a4c      	ldr	r2, [pc, #304]	@ (80038dc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80037ac:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80037b0:	62d3      	str	r3, [r2, #44]	@ 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 80037b2:	e00c      	b.n	80037ce <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	3324      	adds	r3, #36	@ 0x24
 80037b8:	2101      	movs	r1, #1
 80037ba:	4618      	mov	r0, r3
 80037bc:	f001 fa92 	bl	8004ce4 <RCCEx_PLL3_Config>
 80037c0:	4603      	mov	r3, r0
 80037c2:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 80037c4:	e003      	b.n	80037ce <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80037c6:	2301      	movs	r3, #1
 80037c8:	75fb      	strb	r3, [r7, #23]
      break;
 80037ca:	e000      	b.n	80037ce <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      break;
 80037cc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80037ce:	7dfb      	ldrb	r3, [r7, #23]
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d10a      	bne.n	80037ea <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80037d4:	4b41      	ldr	r3, [pc, #260]	@ (80038dc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80037d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80037d8:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80037e2:	493e      	ldr	r1, [pc, #248]	@ (80038dc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80037e4:	4313      	orrs	r3, r2
 80037e6:	654b      	str	r3, [r1, #84]	@ 0x54
 80037e8:	e001      	b.n	80037ee <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037ea:	7dfb      	ldrb	r3, [r7, #23]
 80037ec:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d029      	beq.n	800384e <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d003      	beq.n	800380a <HAL_RCCEx_PeriphCLKConfig+0xcda>
 8003802:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003806:	d007      	beq.n	8003818 <HAL_RCCEx_PeriphCLKConfig+0xce8>
 8003808:	e00f      	b.n	800382a <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800380a:	4b34      	ldr	r3, [pc, #208]	@ (80038dc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800380c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800380e:	4a33      	ldr	r2, [pc, #204]	@ (80038dc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003810:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003814:	62d3      	str	r3, [r2, #44]	@ 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8003816:	e00b      	b.n	8003830 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	3304      	adds	r3, #4
 800381c:	2102      	movs	r1, #2
 800381e:	4618      	mov	r0, r3
 8003820:	f001 f9ae 	bl	8004b80 <RCCEx_PLL2_Config>
 8003824:	4603      	mov	r3, r0
 8003826:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8003828:	e002      	b.n	8003830 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    default:
      ret = HAL_ERROR;
 800382a:	2301      	movs	r3, #1
 800382c:	75fb      	strb	r3, [r7, #23]
      break;
 800382e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003830:	7dfb      	ldrb	r3, [r7, #23]
 8003832:	2b00      	cmp	r3, #0
 8003834:	d109      	bne.n	800384a <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8003836:	4b29      	ldr	r3, [pc, #164]	@ (80038dc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003838:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800383a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003842:	4926      	ldr	r1, [pc, #152]	@ (80038dc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003844:	4313      	orrs	r3, r2
 8003846:	64cb      	str	r3, [r1, #76]	@ 0x4c
 8003848:	e001      	b.n	800384e <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800384a:	7dfb      	ldrb	r3, [r7, #23]
 800384c:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003856:	2b00      	cmp	r3, #0
 8003858:	d00a      	beq.n	8003870 <HAL_RCCEx_PeriphCLKConfig+0xd40>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	3324      	adds	r3, #36	@ 0x24
 800385e:	2102      	movs	r1, #2
 8003860:	4618      	mov	r0, r3
 8003862:	f001 fa3f 	bl	8004ce4 <RCCEx_PLL3_Config>
 8003866:	4603      	mov	r3, r0
 8003868:	2b00      	cmp	r3, #0
 800386a:	d001      	beq.n	8003870 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      status=HAL_ERROR;
 800386c:	2301      	movs	r3, #1
 800386e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003878:	2b00      	cmp	r3, #0
 800387a:	d033      	beq.n	80038e4 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003880:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003884:	d017      	beq.n	80038b6 <HAL_RCCEx_PeriphCLKConfig+0xd86>
 8003886:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800388a:	d811      	bhi.n	80038b0 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 800388c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003890:	d013      	beq.n	80038ba <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 8003892:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003896:	d80b      	bhi.n	80038b0 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8003898:	2b00      	cmp	r3, #0
 800389a:	d010      	beq.n	80038be <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 800389c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80038a0:	d106      	bne.n	80038b0 <HAL_RCCEx_PeriphCLKConfig+0xd80>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80038a2:	4b0e      	ldr	r3, [pc, #56]	@ (80038dc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80038a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038a6:	4a0d      	ldr	r2, [pc, #52]	@ (80038dc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80038a8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80038ac:	62d3      	str	r3, [r2, #44]	@ 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 80038ae:	e007      	b.n	80038c0 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80038b0:	2301      	movs	r3, #1
 80038b2:	75fb      	strb	r3, [r7, #23]
      break;
 80038b4:	e004      	b.n	80038c0 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 80038b6:	bf00      	nop
 80038b8:	e002      	b.n	80038c0 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 80038ba:	bf00      	nop
 80038bc:	e000      	b.n	80038c0 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 80038be:	bf00      	nop
    }

    if(ret == HAL_OK)
 80038c0:	7dfb      	ldrb	r3, [r7, #23]
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d10c      	bne.n	80038e0 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80038c6:	4b05      	ldr	r3, [pc, #20]	@ (80038dc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80038c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80038ca:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80038d2:	4902      	ldr	r1, [pc, #8]	@ (80038dc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80038d4:	4313      	orrs	r3, r2
 80038d6:	654b      	str	r3, [r1, #84]	@ 0x54
 80038d8:	e004      	b.n	80038e4 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 80038da:	bf00      	nop
 80038dc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80038e0:	7dfb      	ldrb	r3, [r7, #23]
 80038e2:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d008      	beq.n	8003902 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80038f0:	4b31      	ldr	r3, [pc, #196]	@ (80039b8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80038f2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80038f4:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80038fc:	492e      	ldr	r1, [pc, #184]	@ (80039b8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80038fe:	4313      	orrs	r3, r2
 8003900:	650b      	str	r3, [r1, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800390a:	2b00      	cmp	r3, #0
 800390c:	d009      	beq.n	8003922 <HAL_RCCEx_PeriphCLKConfig+0xdf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800390e:	4b2a      	ldr	r3, [pc, #168]	@ (80039b8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8003910:	691b      	ldr	r3, [r3, #16]
 8003912:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800391c:	4926      	ldr	r1, [pc, #152]	@ (80039b8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800391e:	4313      	orrs	r3, r2
 8003920:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800392a:	2b00      	cmp	r3, #0
 800392c:	d008      	beq.n	8003940 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800392e:	4b22      	ldr	r3, [pc, #136]	@ (80039b8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8003930:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003932:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800393a:	491f      	ldr	r1, [pc, #124]	@ (80039b8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800393c:	4313      	orrs	r3, r2
 800393e:	650b      	str	r3, [r1, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8003948:	2b00      	cmp	r3, #0
 800394a:	d00d      	beq.n	8003968 <HAL_RCCEx_PeriphCLKConfig+0xe38>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800394c:	4b1a      	ldr	r3, [pc, #104]	@ (80039b8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800394e:	691b      	ldr	r3, [r3, #16]
 8003950:	4a19      	ldr	r2, [pc, #100]	@ (80039b8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8003952:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8003956:	6113      	str	r3, [r2, #16]
 8003958:	4b17      	ldr	r3, [pc, #92]	@ (80039b8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800395a:	691a      	ldr	r2, [r3, #16]
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8003962:	4915      	ldr	r1, [pc, #84]	@ (80039b8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8003964:	4313      	orrs	r3, r2
 8003966:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	2b00      	cmp	r3, #0
 800396e:	da08      	bge.n	8003982 <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8003970:	4b11      	ldr	r3, [pc, #68]	@ (80039b8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8003972:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003974:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800397c:	490e      	ldr	r1, [pc, #56]	@ (80039b8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800397e:	4313      	orrs	r3, r2
 8003980:	64cb      	str	r3, [r1, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800398a:	2b00      	cmp	r3, #0
 800398c:	d009      	beq.n	80039a2 <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800398e:	4b0a      	ldr	r3, [pc, #40]	@ (80039b8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8003990:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003992:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800399c:	4906      	ldr	r1, [pc, #24]	@ (80039b8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800399e:	4313      	orrs	r3, r2
 80039a0:	654b      	str	r3, [r1, #84]	@ 0x54
  }

  if (status == HAL_OK)
 80039a2:	7dbb      	ldrb	r3, [r7, #22]
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d101      	bne.n	80039ac <HAL_RCCEx_PeriphCLKConfig+0xe7c>
  {
    return HAL_OK;
 80039a8:	2300      	movs	r3, #0
 80039aa:	e000      	b.n	80039ae <HAL_RCCEx_PeriphCLKConfig+0xe7e>
  }
  return HAL_ERROR;
 80039ac:	2301      	movs	r3, #1
}
 80039ae:	4618      	mov	r0, r3
 80039b0:	3718      	adds	r7, #24
 80039b2:	46bd      	mov	sp, r7
 80039b4:	bd80      	pop	{r7, pc}
 80039b6:	bf00      	nop
 80039b8:	58024400 	.word	0x58024400

080039bc <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80039bc:	b580      	push	{r7, lr}
 80039be:	b090      	sub	sp, #64	@ 0x40
 80039c0:	af00      	add	r7, sp, #0
 80039c2:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80039ca:	f040 8095 	bne.w	8003af8 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 80039ce:	4b97      	ldr	r3, [pc, #604]	@ (8003c2c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80039d0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80039d2:	f003 0307 	and.w	r3, r3, #7
 80039d6:	633b      	str	r3, [r7, #48]	@ 0x30

      switch (saiclocksource)
 80039d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039da:	2b04      	cmp	r3, #4
 80039dc:	f200 8088 	bhi.w	8003af0 <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 80039e0:	a201      	add	r2, pc, #4	@ (adr r2, 80039e8 <HAL_RCCEx_GetPeriphCLKFreq+0x2c>)
 80039e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039e6:	bf00      	nop
 80039e8:	080039fd 	.word	0x080039fd
 80039ec:	08003a25 	.word	0x08003a25
 80039f0:	08003a4d 	.word	0x08003a4d
 80039f4:	08003ae9 	.word	0x08003ae9
 80039f8:	08003a75 	.word	0x08003a75
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80039fc:	4b8b      	ldr	r3, [pc, #556]	@ (8003c2c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003a04:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003a08:	d108      	bne.n	8003a1c <HAL_RCCEx_GetPeriphCLKFreq+0x60>
         {
           HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8003a0a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003a0e:	4618      	mov	r0, r3
 8003a10:	f000 ff64 	bl	80048dc <HAL_RCCEx_GetPLL1ClockFreq>
           frequency = pll1_clocks.PLL1_Q_Frequency;
 8003a14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a16:	63fb      	str	r3, [r7, #60]	@ 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8003a18:	f000 bc94 	b.w	8004344 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8003a1c:	2300      	movs	r3, #0
 8003a1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
          break;
 8003a20:	f000 bc90 	b.w	8004344 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8003a24:	4b81      	ldr	r3, [pc, #516]	@ (8003c2c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003a2c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003a30:	d108      	bne.n	8003a44 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8003a32:	f107 0318 	add.w	r3, r7, #24
 8003a36:	4618      	mov	r0, r3
 8003a38:	f000 fca8 	bl	800438c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8003a3c:	69bb      	ldr	r3, [r7, #24]
 8003a3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8003a40:	f000 bc80 	b.w	8004344 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8003a44:	2300      	movs	r3, #0
 8003a46:	63fb      	str	r3, [r7, #60]	@ 0x3c
          break;
 8003a48:	f000 bc7c 	b.w	8004344 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8003a4c:	4b77      	ldr	r3, [pc, #476]	@ (8003c2c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003a54:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003a58:	d108      	bne.n	8003a6c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8003a5a:	f107 030c 	add.w	r3, r7, #12
 8003a5e:	4618      	mov	r0, r3
 8003a60:	f000 fde8 	bl	8004634 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	63fb      	str	r3, [r7, #60]	@ 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8003a68:	f000 bc6c 	b.w	8004344 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8003a6c:	2300      	movs	r3, #0
 8003a6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
          break;
 8003a70:	f000 bc68 	b.w	8004344 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8003a74:	4b6d      	ldr	r3, [pc, #436]	@ (8003c2c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8003a76:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003a78:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8003a7c:	637b      	str	r3, [r7, #52]	@ 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8003a7e:	4b6b      	ldr	r3, [pc, #428]	@ (8003c2c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f003 0304 	and.w	r3, r3, #4
 8003a86:	2b04      	cmp	r3, #4
 8003a88:	d10c      	bne.n	8003aa4 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
 8003a8a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d109      	bne.n	8003aa4 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003a90:	4b66      	ldr	r3, [pc, #408]	@ (8003c2c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	08db      	lsrs	r3, r3, #3
 8003a96:	f003 0303 	and.w	r3, r3, #3
 8003a9a:	4a65      	ldr	r2, [pc, #404]	@ (8003c30 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 8003a9c:	fa22 f303 	lsr.w	r3, r2, r3
 8003aa0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003aa2:	e01f      	b.n	8003ae4 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8003aa4:	4b61      	ldr	r3, [pc, #388]	@ (8003c2c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003aac:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003ab0:	d106      	bne.n	8003ac0 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
 8003ab2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003ab4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003ab8:	d102      	bne.n	8003ac0 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8003aba:	4b5e      	ldr	r3, [pc, #376]	@ (8003c34 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8003abc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003abe:	e011      	b.n	8003ae4 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8003ac0:	4b5a      	ldr	r3, [pc, #360]	@ (8003c2c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ac8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003acc:	d106      	bne.n	8003adc <HAL_RCCEx_GetPeriphCLKFreq+0x120>
 8003ace:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003ad0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003ad4:	d102      	bne.n	8003adc <HAL_RCCEx_GetPeriphCLKFreq+0x120>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8003ad6:	4b58      	ldr	r3, [pc, #352]	@ (8003c38 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 8003ad8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003ada:	e003      	b.n	8003ae4 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8003adc:	2300      	movs	r3, #0
 8003ade:	63fb      	str	r3, [r7, #60]	@ 0x3c
          }

          break;
 8003ae0:	f000 bc30 	b.w	8004344 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8003ae4:	f000 bc2e 	b.w	8004344 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8003ae8:	4b54      	ldr	r3, [pc, #336]	@ (8003c3c <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 8003aea:	63fb      	str	r3, [r7, #60]	@ 0x3c
          break;
 8003aec:	f000 bc2a 	b.w	8004344 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      default :
        {
          frequency = 0;
 8003af0:	2300      	movs	r3, #0
 8003af2:	63fb      	str	r3, [r7, #60]	@ 0x3c
          break;
 8003af4:	f000 bc26 	b.w	8004344 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003afe:	f040 809f 	bne.w	8003c40 <HAL_RCCEx_GetPeriphCLKFreq+0x284>
    {

      saiclocksource= __HAL_RCC_GET_SAI23_SOURCE();
 8003b02:	4b4a      	ldr	r3, [pc, #296]	@ (8003c2c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8003b04:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003b06:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 8003b0a:	633b      	str	r3, [r7, #48]	@ 0x30

      switch (saiclocksource)
 8003b0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b0e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003b12:	d04d      	beq.n	8003bb0 <HAL_RCCEx_GetPeriphCLKFreq+0x1f4>
 8003b14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b16:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003b1a:	f200 8084 	bhi.w	8003c26 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 8003b1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b20:	2bc0      	cmp	r3, #192	@ 0xc0
 8003b22:	d07d      	beq.n	8003c20 <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 8003b24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b26:	2bc0      	cmp	r3, #192	@ 0xc0
 8003b28:	d87d      	bhi.n	8003c26 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 8003b2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b2c:	2b80      	cmp	r3, #128	@ 0x80
 8003b2e:	d02d      	beq.n	8003b8c <HAL_RCCEx_GetPeriphCLKFreq+0x1d0>
 8003b30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b32:	2b80      	cmp	r3, #128	@ 0x80
 8003b34:	d877      	bhi.n	8003c26 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 8003b36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d003      	beq.n	8003b44 <HAL_RCCEx_GetPeriphCLKFreq+0x188>
 8003b3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b3e:	2b40      	cmp	r3, #64	@ 0x40
 8003b40:	d012      	beq.n	8003b68 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
 8003b42:	e070      	b.n	8003c26 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
      {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8003b44:	4b39      	ldr	r3, [pc, #228]	@ (8003c2c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003b4c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003b50:	d107      	bne.n	8003b62 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8003b52:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003b56:	4618      	mov	r0, r3
 8003b58:	f000 fec0 	bl	80048dc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8003b5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8003b60:	e3f0      	b.n	8004344 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8003b62:	2300      	movs	r3, #0
 8003b64:	63fb      	str	r3, [r7, #60]	@ 0x3c
          break;
 8003b66:	e3ed      	b.n	8004344 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8003b68:	4b30      	ldr	r3, [pc, #192]	@ (8003c2c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003b70:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003b74:	d107      	bne.n	8003b86 <HAL_RCCEx_GetPeriphCLKFreq+0x1ca>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8003b76:	f107 0318 	add.w	r3, r7, #24
 8003b7a:	4618      	mov	r0, r3
 8003b7c:	f000 fc06 	bl	800438c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8003b80:	69bb      	ldr	r3, [r7, #24]
 8003b82:	63fb      	str	r3, [r7, #60]	@ 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8003b84:	e3de      	b.n	8004344 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8003b86:	2300      	movs	r3, #0
 8003b88:	63fb      	str	r3, [r7, #60]	@ 0x3c
          break;
 8003b8a:	e3db      	b.n	8004344 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8003b8c:	4b27      	ldr	r3, [pc, #156]	@ (8003c2c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003b94:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003b98:	d107      	bne.n	8003baa <HAL_RCCEx_GetPeriphCLKFreq+0x1ee>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8003b9a:	f107 030c 	add.w	r3, r7, #12
 8003b9e:	4618      	mov	r0, r3
 8003ba0:	f000 fd48 	bl	8004634 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	63fb      	str	r3, [r7, #60]	@ 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8003ba8:	e3cc      	b.n	8004344 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8003baa:	2300      	movs	r3, #0
 8003bac:	63fb      	str	r3, [r7, #60]	@ 0x3c
          break;
 8003bae:	e3c9      	b.n	8004344 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8003bb0:	4b1e      	ldr	r3, [pc, #120]	@ (8003c2c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8003bb2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003bb4:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8003bb8:	637b      	str	r3, [r7, #52]	@ 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8003bba:	4b1c      	ldr	r3, [pc, #112]	@ (8003c2c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	f003 0304 	and.w	r3, r3, #4
 8003bc2:	2b04      	cmp	r3, #4
 8003bc4:	d10c      	bne.n	8003be0 <HAL_RCCEx_GetPeriphCLKFreq+0x224>
 8003bc6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d109      	bne.n	8003be0 <HAL_RCCEx_GetPeriphCLKFreq+0x224>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003bcc:	4b17      	ldr	r3, [pc, #92]	@ (8003c2c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	08db      	lsrs	r3, r3, #3
 8003bd2:	f003 0303 	and.w	r3, r3, #3
 8003bd6:	4a16      	ldr	r2, [pc, #88]	@ (8003c30 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 8003bd8:	fa22 f303 	lsr.w	r3, r2, r3
 8003bdc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003bde:	e01e      	b.n	8003c1e <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8003be0:	4b12      	ldr	r3, [pc, #72]	@ (8003c2c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003be8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003bec:	d106      	bne.n	8003bfc <HAL_RCCEx_GetPeriphCLKFreq+0x240>
 8003bee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003bf0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003bf4:	d102      	bne.n	8003bfc <HAL_RCCEx_GetPeriphCLKFreq+0x240>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8003bf6:	4b0f      	ldr	r3, [pc, #60]	@ (8003c34 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8003bf8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003bfa:	e010      	b.n	8003c1e <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8003bfc:	4b0b      	ldr	r3, [pc, #44]	@ (8003c2c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c04:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003c08:	d106      	bne.n	8003c18 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
 8003c0a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003c0c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003c10:	d102      	bne.n	8003c18 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8003c12:	4b09      	ldr	r3, [pc, #36]	@ (8003c38 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 8003c14:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003c16:	e002      	b.n	8003c1e <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8003c18:	2300      	movs	r3, #0
 8003c1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
          }

          break;
 8003c1c:	e392      	b.n	8004344 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8003c1e:	e391      	b.n	8004344 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8003c20:	4b06      	ldr	r3, [pc, #24]	@ (8003c3c <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 8003c22:	63fb      	str	r3, [r7, #60]	@ 0x3c
          break;
 8003c24:	e38e      	b.n	8004344 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      default :
        {
          frequency = 0;
 8003c26:	2300      	movs	r3, #0
 8003c28:	63fb      	str	r3, [r7, #60]	@ 0x3c
          break;
 8003c2a:	e38b      	b.n	8004344 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8003c2c:	58024400 	.word	0x58024400
 8003c30:	03d09000 	.word	0x03d09000
 8003c34:	003d0900 	.word	0x003d0900
 8003c38:	0112a880 	.word	0x0112a880
 8003c3c:	00bb8000 	.word	0x00bb8000
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003c46:	f040 809c 	bne.w	8003d82 <HAL_RCCEx_GetPeriphCLKFreq+0x3c6>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 8003c4a:	4b9d      	ldr	r3, [pc, #628]	@ (8003ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8003c4c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c4e:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 8003c52:	633b      	str	r3, [r7, #48]	@ 0x30

      switch (saiclocksource)
 8003c54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c56:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003c5a:	d054      	beq.n	8003d06 <HAL_RCCEx_GetPeriphCLKFreq+0x34a>
 8003c5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c5e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003c62:	f200 808b 	bhi.w	8003d7c <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
 8003c66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c68:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8003c6c:	f000 8083 	beq.w	8003d76 <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
 8003c70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c72:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8003c76:	f200 8081 	bhi.w	8003d7c <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
 8003c7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c7c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003c80:	d02f      	beq.n	8003ce2 <HAL_RCCEx_GetPeriphCLKFreq+0x326>
 8003c82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c84:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003c88:	d878      	bhi.n	8003d7c <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
 8003c8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d004      	beq.n	8003c9a <HAL_RCCEx_GetPeriphCLKFreq+0x2de>
 8003c90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c92:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003c96:	d012      	beq.n	8003cbe <HAL_RCCEx_GetPeriphCLKFreq+0x302>
 8003c98:	e070      	b.n	8003d7c <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
      {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8003c9a:	4b89      	ldr	r3, [pc, #548]	@ (8003ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003ca2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003ca6:	d107      	bne.n	8003cb8 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8003ca8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003cac:	4618      	mov	r0, r3
 8003cae:	f000 fe15 	bl	80048dc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8003cb2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003cb4:	63fb      	str	r3, [r7, #60]	@ 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8003cb6:	e345      	b.n	8004344 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8003cb8:	2300      	movs	r3, #0
 8003cba:	63fb      	str	r3, [r7, #60]	@ 0x3c
          break;
 8003cbc:	e342      	b.n	8004344 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8003cbe:	4b80      	ldr	r3, [pc, #512]	@ (8003ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003cc6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003cca:	d107      	bne.n	8003cdc <HAL_RCCEx_GetPeriphCLKFreq+0x320>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8003ccc:	f107 0318 	add.w	r3, r7, #24
 8003cd0:	4618      	mov	r0, r3
 8003cd2:	f000 fb5b 	bl	800438c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8003cd6:	69bb      	ldr	r3, [r7, #24]
 8003cd8:	63fb      	str	r3, [r7, #60]	@ 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8003cda:	e333      	b.n	8004344 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8003cdc:	2300      	movs	r3, #0
 8003cde:	63fb      	str	r3, [r7, #60]	@ 0x3c
          break;
 8003ce0:	e330      	b.n	8004344 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8003ce2:	4b77      	ldr	r3, [pc, #476]	@ (8003ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003cea:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003cee:	d107      	bne.n	8003d00 <HAL_RCCEx_GetPeriphCLKFreq+0x344>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8003cf0:	f107 030c 	add.w	r3, r7, #12
 8003cf4:	4618      	mov	r0, r3
 8003cf6:	f000 fc9d 	bl	8004634 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	63fb      	str	r3, [r7, #60]	@ 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8003cfe:	e321      	b.n	8004344 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8003d00:	2300      	movs	r3, #0
 8003d02:	63fb      	str	r3, [r7, #60]	@ 0x3c
          break;
 8003d04:	e31e      	b.n	8004344 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8003d06:	4b6e      	ldr	r3, [pc, #440]	@ (8003ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8003d08:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003d0a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8003d0e:	637b      	str	r3, [r7, #52]	@ 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8003d10:	4b6b      	ldr	r3, [pc, #428]	@ (8003ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	f003 0304 	and.w	r3, r3, #4
 8003d18:	2b04      	cmp	r3, #4
 8003d1a:	d10c      	bne.n	8003d36 <HAL_RCCEx_GetPeriphCLKFreq+0x37a>
 8003d1c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d109      	bne.n	8003d36 <HAL_RCCEx_GetPeriphCLKFreq+0x37a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003d22:	4b67      	ldr	r3, [pc, #412]	@ (8003ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	08db      	lsrs	r3, r3, #3
 8003d28:	f003 0303 	and.w	r3, r3, #3
 8003d2c:	4a65      	ldr	r2, [pc, #404]	@ (8003ec4 <HAL_RCCEx_GetPeriphCLKFreq+0x508>)
 8003d2e:	fa22 f303 	lsr.w	r3, r2, r3
 8003d32:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003d34:	e01e      	b.n	8003d74 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8003d36:	4b62      	ldr	r3, [pc, #392]	@ (8003ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d3e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003d42:	d106      	bne.n	8003d52 <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 8003d44:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003d46:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003d4a:	d102      	bne.n	8003d52 <HAL_RCCEx_GetPeriphCLKFreq+0x396>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8003d4c:	4b5e      	ldr	r3, [pc, #376]	@ (8003ec8 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>)
 8003d4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003d50:	e010      	b.n	8003d74 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8003d52:	4b5b      	ldr	r3, [pc, #364]	@ (8003ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d5a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003d5e:	d106      	bne.n	8003d6e <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 8003d60:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003d62:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003d66:	d102      	bne.n	8003d6e <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8003d68:	4b58      	ldr	r3, [pc, #352]	@ (8003ecc <HAL_RCCEx_GetPeriphCLKFreq+0x510>)
 8003d6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003d6c:	e002      	b.n	8003d74 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8003d6e:	2300      	movs	r3, #0
 8003d70:	63fb      	str	r3, [r7, #60]	@ 0x3c
          }

          break;
 8003d72:	e2e7      	b.n	8004344 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8003d74:	e2e6      	b.n	8004344 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8003d76:	4b56      	ldr	r3, [pc, #344]	@ (8003ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8003d78:	63fb      	str	r3, [r7, #60]	@ 0x3c
          break;
 8003d7a:	e2e3      	b.n	8004344 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      default :
        {
          frequency = 0;
 8003d7c:	2300      	movs	r3, #0
 8003d7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
          break;
 8003d80:	e2e0      	b.n	8004344 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003d88:	f040 80a7 	bne.w	8003eda <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 8003d8c:	4b4c      	ldr	r3, [pc, #304]	@ (8003ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8003d8e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d90:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 8003d94:	633b      	str	r3, [r7, #48]	@ 0x30

      switch (saiclocksource)
 8003d96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d98:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003d9c:	d055      	beq.n	8003e4a <HAL_RCCEx_GetPeriphCLKFreq+0x48e>
 8003d9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003da0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003da4:	f200 8096 	bhi.w	8003ed4 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
 8003da8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003daa:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003dae:	f000 8084 	beq.w	8003eba <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
 8003db2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003db4:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003db8:	f200 808c 	bhi.w	8003ed4 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
 8003dbc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003dbe:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003dc2:	d030      	beq.n	8003e26 <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
 8003dc4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003dc6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003dca:	f200 8083 	bhi.w	8003ed4 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
 8003dce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d004      	beq.n	8003dde <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 8003dd4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003dd6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003dda:	d012      	beq.n	8003e02 <HAL_RCCEx_GetPeriphCLKFreq+0x446>
 8003ddc:	e07a      	b.n	8003ed4 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
      {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8003dde:	4b38      	ldr	r3, [pc, #224]	@ (8003ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003de6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003dea:	d107      	bne.n	8003dfc <HAL_RCCEx_GetPeriphCLKFreq+0x440>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8003dec:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003df0:	4618      	mov	r0, r3
 8003df2:	f000 fd73 	bl	80048dc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8003df6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003df8:	63fb      	str	r3, [r7, #60]	@ 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8003dfa:	e2a3      	b.n	8004344 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8003dfc:	2300      	movs	r3, #0
 8003dfe:	63fb      	str	r3, [r7, #60]	@ 0x3c
          break;
 8003e00:	e2a0      	b.n	8004344 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8003e02:	4b2f      	ldr	r3, [pc, #188]	@ (8003ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003e0a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003e0e:	d107      	bne.n	8003e20 <HAL_RCCEx_GetPeriphCLKFreq+0x464>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8003e10:	f107 0318 	add.w	r3, r7, #24
 8003e14:	4618      	mov	r0, r3
 8003e16:	f000 fab9 	bl	800438c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8003e1a:	69bb      	ldr	r3, [r7, #24]
 8003e1c:	63fb      	str	r3, [r7, #60]	@ 0x3c
          }
         else
         {
           frequency = 0;
         }
          break;
 8003e1e:	e291      	b.n	8004344 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8003e20:	2300      	movs	r3, #0
 8003e22:	63fb      	str	r3, [r7, #60]	@ 0x3c
          break;
 8003e24:	e28e      	b.n	8004344 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8003e26:	4b26      	ldr	r3, [pc, #152]	@ (8003ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003e2e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003e32:	d107      	bne.n	8003e44 <HAL_RCCEx_GetPeriphCLKFreq+0x488>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8003e34:	f107 030c 	add.w	r3, r7, #12
 8003e38:	4618      	mov	r0, r3
 8003e3a:	f000 fbfb 	bl	8004634 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	63fb      	str	r3, [r7, #60]	@ 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8003e42:	e27f      	b.n	8004344 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8003e44:	2300      	movs	r3, #0
 8003e46:	63fb      	str	r3, [r7, #60]	@ 0x3c
          break;
 8003e48:	e27c      	b.n	8004344 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8003e4a:	4b1d      	ldr	r3, [pc, #116]	@ (8003ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8003e4c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003e4e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8003e52:	637b      	str	r3, [r7, #52]	@ 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8003e54:	4b1a      	ldr	r3, [pc, #104]	@ (8003ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	f003 0304 	and.w	r3, r3, #4
 8003e5c:	2b04      	cmp	r3, #4
 8003e5e:	d10c      	bne.n	8003e7a <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
 8003e60:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d109      	bne.n	8003e7a <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003e66:	4b16      	ldr	r3, [pc, #88]	@ (8003ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	08db      	lsrs	r3, r3, #3
 8003e6c:	f003 0303 	and.w	r3, r3, #3
 8003e70:	4a14      	ldr	r2, [pc, #80]	@ (8003ec4 <HAL_RCCEx_GetPeriphCLKFreq+0x508>)
 8003e72:	fa22 f303 	lsr.w	r3, r2, r3
 8003e76:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003e78:	e01e      	b.n	8003eb8 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8003e7a:	4b11      	ldr	r3, [pc, #68]	@ (8003ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e82:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003e86:	d106      	bne.n	8003e96 <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
 8003e88:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003e8a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003e8e:	d102      	bne.n	8003e96 <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8003e90:	4b0d      	ldr	r3, [pc, #52]	@ (8003ec8 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>)
 8003e92:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003e94:	e010      	b.n	8003eb8 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8003e96:	4b0a      	ldr	r3, [pc, #40]	@ (8003ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e9e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003ea2:	d106      	bne.n	8003eb2 <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
 8003ea4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003ea6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003eaa:	d102      	bne.n	8003eb2 <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8003eac:	4b07      	ldr	r3, [pc, #28]	@ (8003ecc <HAL_RCCEx_GetPeriphCLKFreq+0x510>)
 8003eae:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003eb0:	e002      	b.n	8003eb8 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8003eb2:	2300      	movs	r3, #0
 8003eb4:	63fb      	str	r3, [r7, #60]	@ 0x3c
          }

          break;
 8003eb6:	e245      	b.n	8004344 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8003eb8:	e244      	b.n	8004344 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8003eba:	4b05      	ldr	r3, [pc, #20]	@ (8003ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8003ebc:	63fb      	str	r3, [r7, #60]	@ 0x3c
          break;
 8003ebe:	e241      	b.n	8004344 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8003ec0:	58024400 	.word	0x58024400
 8003ec4:	03d09000 	.word	0x03d09000
 8003ec8:	003d0900 	.word	0x003d0900
 8003ecc:	0112a880 	.word	0x0112a880
 8003ed0:	00bb8000 	.word	0x00bb8000
        }

      default :
        {
          frequency = 0;
 8003ed4:	2300      	movs	r3, #0
 8003ed6:	63fb      	str	r3, [r7, #60]	@ 0x3c
          break;
 8003ed8:	e234      	b.n	8004344 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003ee0:	f040 809c 	bne.w	800401c <HAL_RCCEx_GetPeriphCLKFreq+0x660>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 8003ee4:	4b9b      	ldr	r3, [pc, #620]	@ (8004154 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8003ee6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003ee8:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8003eec:	63bb      	str	r3, [r7, #56]	@ 0x38

      switch (srcclk)
 8003eee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ef0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003ef4:	d054      	beq.n	8003fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x5e4>
 8003ef6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ef8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003efc:	f200 808b 	bhi.w	8004016 <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
 8003f00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f02:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003f06:	f000 8083 	beq.w	8004010 <HAL_RCCEx_GetPeriphCLKFreq+0x654>
 8003f0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f0c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003f10:	f200 8081 	bhi.w	8004016 <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
 8003f14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f16:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003f1a:	d02f      	beq.n	8003f7c <HAL_RCCEx_GetPeriphCLKFreq+0x5c0>
 8003f1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f1e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003f22:	d878      	bhi.n	8004016 <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
 8003f24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d004      	beq.n	8003f34 <HAL_RCCEx_GetPeriphCLKFreq+0x578>
 8003f2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f2c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003f30:	d012      	beq.n	8003f58 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>
 8003f32:	e070      	b.n	8004016 <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8003f34:	4b87      	ldr	r3, [pc, #540]	@ (8004154 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003f3c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003f40:	d107      	bne.n	8003f52 <HAL_RCCEx_GetPeriphCLKFreq+0x596>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8003f42:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003f46:	4618      	mov	r0, r3
 8003f48:	f000 fcc8 	bl	80048dc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8003f4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8003f50:	e1f8      	b.n	8004344 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8003f52:	2300      	movs	r3, #0
 8003f54:	63fb      	str	r3, [r7, #60]	@ 0x3c
          break;
 8003f56:	e1f5      	b.n	8004344 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8003f58:	4b7e      	ldr	r3, [pc, #504]	@ (8004154 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003f60:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003f64:	d107      	bne.n	8003f76 <HAL_RCCEx_GetPeriphCLKFreq+0x5ba>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8003f66:	f107 0318 	add.w	r3, r7, #24
 8003f6a:	4618      	mov	r0, r3
 8003f6c:	f000 fa0e 	bl	800438c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8003f70:	69bb      	ldr	r3, [r7, #24]
 8003f72:	63fb      	str	r3, [r7, #60]	@ 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8003f74:	e1e6      	b.n	8004344 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8003f76:	2300      	movs	r3, #0
 8003f78:	63fb      	str	r3, [r7, #60]	@ 0x3c
          break;
 8003f7a:	e1e3      	b.n	8004344 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8003f7c:	4b75      	ldr	r3, [pc, #468]	@ (8004154 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003f84:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003f88:	d107      	bne.n	8003f9a <HAL_RCCEx_GetPeriphCLKFreq+0x5de>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8003f8a:	f107 030c 	add.w	r3, r7, #12
 8003f8e:	4618      	mov	r0, r3
 8003f90:	f000 fb50 	bl	8004634 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	63fb      	str	r3, [r7, #60]	@ 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8003f98:	e1d4      	b.n	8004344 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8003f9a:	2300      	movs	r3, #0
 8003f9c:	63fb      	str	r3, [r7, #60]	@ 0x3c
          break;
 8003f9e:	e1d1      	b.n	8004344 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8003fa0:	4b6c      	ldr	r3, [pc, #432]	@ (8004154 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8003fa2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003fa4:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8003fa8:	637b      	str	r3, [r7, #52]	@ 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8003faa:	4b6a      	ldr	r3, [pc, #424]	@ (8004154 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	f003 0304 	and.w	r3, r3, #4
 8003fb2:	2b04      	cmp	r3, #4
 8003fb4:	d10c      	bne.n	8003fd0 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 8003fb6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d109      	bne.n	8003fd0 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003fbc:	4b65      	ldr	r3, [pc, #404]	@ (8004154 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	08db      	lsrs	r3, r3, #3
 8003fc2:	f003 0303 	and.w	r3, r3, #3
 8003fc6:	4a64      	ldr	r2, [pc, #400]	@ (8004158 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>)
 8003fc8:	fa22 f303 	lsr.w	r3, r2, r3
 8003fcc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003fce:	e01e      	b.n	800400e <HAL_RCCEx_GetPeriphCLKFreq+0x652>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8003fd0:	4b60      	ldr	r3, [pc, #384]	@ (8004154 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003fd8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003fdc:	d106      	bne.n	8003fec <HAL_RCCEx_GetPeriphCLKFreq+0x630>
 8003fde:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003fe0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003fe4:	d102      	bne.n	8003fec <HAL_RCCEx_GetPeriphCLKFreq+0x630>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8003fe6:	4b5d      	ldr	r3, [pc, #372]	@ (800415c <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>)
 8003fe8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003fea:	e010      	b.n	800400e <HAL_RCCEx_GetPeriphCLKFreq+0x652>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8003fec:	4b59      	ldr	r3, [pc, #356]	@ (8004154 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ff4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003ff8:	d106      	bne.n	8004008 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 8003ffa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003ffc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004000:	d102      	bne.n	8004008 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8004002:	4b57      	ldr	r3, [pc, #348]	@ (8004160 <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>)
 8004004:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004006:	e002      	b.n	800400e <HAL_RCCEx_GetPeriphCLKFreq+0x652>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8004008:	2300      	movs	r3, #0
 800400a:	63fb      	str	r3, [r7, #60]	@ 0x3c
          }

          break;
 800400c:	e19a      	b.n	8004344 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 800400e:	e199      	b.n	8004344 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8004010:	4b54      	ldr	r3, [pc, #336]	@ (8004164 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8004012:	63fb      	str	r3, [r7, #60]	@ 0x3c
          break;
 8004014:	e196      	b.n	8004344 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      default :
        {
          frequency = 0;
 8004016:	2300      	movs	r3, #0
 8004018:	63fb      	str	r3, [r7, #60]	@ 0x3c
          break;
 800401a:	e193      	b.n	8004344 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8004022:	d173      	bne.n	800410c <HAL_RCCEx_GetPeriphCLKFreq+0x750>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 8004024:	4b4b      	ldr	r3, [pc, #300]	@ (8004154 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8004026:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004028:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800402c:	63bb      	str	r3, [r7, #56]	@ 0x38

      switch (srcclk)
 800402e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004030:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004034:	d02f      	beq.n	8004096 <HAL_RCCEx_GetPeriphCLKFreq+0x6da>
 8004036:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004038:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800403c:	d863      	bhi.n	8004106 <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
 800403e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004040:	2b00      	cmp	r3, #0
 8004042:	d004      	beq.n	800404e <HAL_RCCEx_GetPeriphCLKFreq+0x692>
 8004044:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004046:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800404a:	d012      	beq.n	8004072 <HAL_RCCEx_GetPeriphCLKFreq+0x6b6>
 800404c:	e05b      	b.n	8004106 <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800404e:	4b41      	ldr	r3, [pc, #260]	@ (8004154 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004056:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800405a:	d107      	bne.n	800406c <HAL_RCCEx_GetPeriphCLKFreq+0x6b0>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800405c:	f107 0318 	add.w	r3, r7, #24
 8004060:	4618      	mov	r0, r3
 8004062:	f000 f993 	bl	800438c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8004066:	69bb      	ldr	r3, [r7, #24]
 8004068:	63fb      	str	r3, [r7, #60]	@ 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800406a:	e16b      	b.n	8004344 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800406c:	2300      	movs	r3, #0
 800406e:	63fb      	str	r3, [r7, #60]	@ 0x3c
          break;
 8004070:	e168      	b.n	8004344 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8004072:	4b38      	ldr	r3, [pc, #224]	@ (8004154 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800407a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800407e:	d107      	bne.n	8004090 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004080:	f107 030c 	add.w	r3, r7, #12
 8004084:	4618      	mov	r0, r3
 8004086:	f000 fad5 	bl	8004634 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800408a:	697b      	ldr	r3, [r7, #20]
 800408c:	63fb      	str	r3, [r7, #60]	@ 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800408e:	e159      	b.n	8004344 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8004090:	2300      	movs	r3, #0
 8004092:	63fb      	str	r3, [r7, #60]	@ 0x3c
          break;
 8004094:	e156      	b.n	8004344 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8004096:	4b2f      	ldr	r3, [pc, #188]	@ (8004154 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8004098:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800409a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800409e:	637b      	str	r3, [r7, #52]	@ 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80040a0:	4b2c      	ldr	r3, [pc, #176]	@ (8004154 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	f003 0304 	and.w	r3, r3, #4
 80040a8:	2b04      	cmp	r3, #4
 80040aa:	d10c      	bne.n	80040c6 <HAL_RCCEx_GetPeriphCLKFreq+0x70a>
 80040ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d109      	bne.n	80040c6 <HAL_RCCEx_GetPeriphCLKFreq+0x70a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80040b2:	4b28      	ldr	r3, [pc, #160]	@ (8004154 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	08db      	lsrs	r3, r3, #3
 80040b8:	f003 0303 	and.w	r3, r3, #3
 80040bc:	4a26      	ldr	r2, [pc, #152]	@ (8004158 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>)
 80040be:	fa22 f303 	lsr.w	r3, r2, r3
 80040c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80040c4:	e01e      	b.n	8004104 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80040c6:	4b23      	ldr	r3, [pc, #140]	@ (8004154 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80040ce:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80040d2:	d106      	bne.n	80040e2 <HAL_RCCEx_GetPeriphCLKFreq+0x726>
 80040d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80040d6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80040da:	d102      	bne.n	80040e2 <HAL_RCCEx_GetPeriphCLKFreq+0x726>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 80040dc:	4b1f      	ldr	r3, [pc, #124]	@ (800415c <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>)
 80040de:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80040e0:	e010      	b.n	8004104 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80040e2:	4b1c      	ldr	r3, [pc, #112]	@ (8004154 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80040ea:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80040ee:	d106      	bne.n	80040fe <HAL_RCCEx_GetPeriphCLKFreq+0x742>
 80040f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80040f2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80040f6:	d102      	bne.n	80040fe <HAL_RCCEx_GetPeriphCLKFreq+0x742>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 80040f8:	4b19      	ldr	r3, [pc, #100]	@ (8004160 <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>)
 80040fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80040fc:	e002      	b.n	8004104 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 80040fe:	2300      	movs	r3, #0
 8004100:	63fb      	str	r3, [r7, #60]	@ 0x3c
          }

          break;
 8004102:	e11f      	b.n	8004344 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8004104:	e11e      	b.n	8004344 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      default :
        {
          frequency = 0;
 8004106:	2300      	movs	r3, #0
 8004108:	63fb      	str	r3, [r7, #60]	@ 0x3c
          break;
 800410a:	e11b      	b.n	8004344 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004112:	d13e      	bne.n	8004192 <HAL_RCCEx_GetPeriphCLKFreq+0x7d6>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 8004114:	4b0f      	ldr	r3, [pc, #60]	@ (8004154 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8004116:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004118:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800411c:	63bb      	str	r3, [r7, #56]	@ 0x38

      switch (srcclk)
 800411e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004120:	2b00      	cmp	r3, #0
 8004122:	d004      	beq.n	800412e <HAL_RCCEx_GetPeriphCLKFreq+0x772>
 8004124:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004126:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800412a:	d01d      	beq.n	8004168 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 800412c:	e02e      	b.n	800418c <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800412e:	4b09      	ldr	r3, [pc, #36]	@ (8004154 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004136:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800413a:	d107      	bne.n	800414c <HAL_RCCEx_GetPeriphCLKFreq+0x790>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800413c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004140:	4618      	mov	r0, r3
 8004142:	f000 fbcb 	bl	80048dc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8004146:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004148:	63fb      	str	r3, [r7, #60]	@ 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800414a:	e0fb      	b.n	8004344 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 800414c:	2300      	movs	r3, #0
 800414e:	63fb      	str	r3, [r7, #60]	@ 0x3c
          break;
 8004150:	e0f8      	b.n	8004344 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8004152:	bf00      	nop
 8004154:	58024400 	.word	0x58024400
 8004158:	03d09000 	.word	0x03d09000
 800415c:	003d0900 	.word	0x003d0900
 8004160:	0112a880 	.word	0x0112a880
 8004164:	00bb8000 	.word	0x00bb8000
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004168:	4b79      	ldr	r3, [pc, #484]	@ (8004350 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004170:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004174:	d107      	bne.n	8004186 <HAL_RCCEx_GetPeriphCLKFreq+0x7ca>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004176:	f107 0318 	add.w	r3, r7, #24
 800417a:	4618      	mov	r0, r3
 800417c:	f000 f906 	bl	800438c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8004180:	6a3b      	ldr	r3, [r7, #32]
 8004182:	63fb      	str	r3, [r7, #60]	@ 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8004184:	e0de      	b.n	8004344 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 8004186:	2300      	movs	r3, #0
 8004188:	63fb      	str	r3, [r7, #60]	@ 0x3c
          break;
 800418a:	e0db      	b.n	8004344 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      default :
        {
          frequency = 0;
 800418c:	2300      	movs	r3, #0
 800418e:	63fb      	str	r3, [r7, #60]	@ 0x3c
          break;
 8004190:	e0d8      	b.n	8004344 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004198:	f040 8085 	bne.w	80042a6 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 800419c:	4b6c      	ldr	r3, [pc, #432]	@ (8004350 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800419e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80041a0:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 80041a4:	63bb      	str	r3, [r7, #56]	@ 0x38

      switch (srcclk)
 80041a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80041a8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80041ac:	d06b      	beq.n	8004286 <HAL_RCCEx_GetPeriphCLKFreq+0x8ca>
 80041ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80041b0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80041b4:	d874      	bhi.n	80042a0 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 80041b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80041b8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80041bc:	d056      	beq.n	800426c <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
 80041be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80041c0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80041c4:	d86c      	bhi.n	80042a0 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 80041c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80041c8:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80041cc:	d03b      	beq.n	8004246 <HAL_RCCEx_GetPeriphCLKFreq+0x88a>
 80041ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80041d0:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80041d4:	d864      	bhi.n	80042a0 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 80041d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80041d8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80041dc:	d021      	beq.n	8004222 <HAL_RCCEx_GetPeriphCLKFreq+0x866>
 80041de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80041e0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80041e4:	d85c      	bhi.n	80042a0 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 80041e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d004      	beq.n	80041f6 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 80041ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80041ee:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80041f2:	d004      	beq.n	80041fe <HAL_RCCEx_GetPeriphCLKFreq+0x842>
 80041f4:	e054      	b.n	80042a0 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 80041f6:	f000 f8b3 	bl	8004360 <HAL_RCCEx_GetD3PCLK1Freq>
 80041fa:	63f8      	str	r0, [r7, #60]	@ 0x3c
          break;
 80041fc:	e0a2      	b.n	8004344 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80041fe:	4b54      	ldr	r3, [pc, #336]	@ (8004350 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004206:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800420a:	d107      	bne.n	800421c <HAL_RCCEx_GetPeriphCLKFreq+0x860>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800420c:	f107 0318 	add.w	r3, r7, #24
 8004210:	4618      	mov	r0, r3
 8004212:	f000 f8bb 	bl	800438c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8004216:	69fb      	ldr	r3, [r7, #28]
 8004218:	63fb      	str	r3, [r7, #60]	@ 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800421a:	e093      	b.n	8004344 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 800421c:	2300      	movs	r3, #0
 800421e:	63fb      	str	r3, [r7, #60]	@ 0x3c
          break;
 8004220:	e090      	b.n	8004344 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8004222:	4b4b      	ldr	r3, [pc, #300]	@ (8004350 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800422a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800422e:	d107      	bne.n	8004240 <HAL_RCCEx_GetPeriphCLKFreq+0x884>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004230:	f107 030c 	add.w	r3, r7, #12
 8004234:	4618      	mov	r0, r3
 8004236:	f000 f9fd 	bl	8004634 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800423a:	693b      	ldr	r3, [r7, #16]
 800423c:	63fb      	str	r3, [r7, #60]	@ 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800423e:	e081      	b.n	8004344 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 8004240:	2300      	movs	r3, #0
 8004242:	63fb      	str	r3, [r7, #60]	@ 0x3c
          break;
 8004244:	e07e      	b.n	8004344 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004246:	4b42      	ldr	r3, [pc, #264]	@ (8004350 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	f003 0304 	and.w	r3, r3, #4
 800424e:	2b04      	cmp	r3, #4
 8004250:	d109      	bne.n	8004266 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
         {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004252:	4b3f      	ldr	r3, [pc, #252]	@ (8004350 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	08db      	lsrs	r3, r3, #3
 8004258:	f003 0303 	and.w	r3, r3, #3
 800425c:	4a3d      	ldr	r2, [pc, #244]	@ (8004354 <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 800425e:	fa22 f303 	lsr.w	r3, r2, r3
 8004262:	63fb      	str	r3, [r7, #60]	@ 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8004264:	e06e      	b.n	8004344 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 8004266:	2300      	movs	r3, #0
 8004268:	63fb      	str	r3, [r7, #60]	@ 0x3c
          break;
 800426a:	e06b      	b.n	8004344 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800426c:	4b38      	ldr	r3, [pc, #224]	@ (8004350 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004274:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004278:	d102      	bne.n	8004280 <HAL_RCCEx_GetPeriphCLKFreq+0x8c4>
         {
          frequency = CSI_VALUE;
 800427a:	4b37      	ldr	r3, [pc, #220]	@ (8004358 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800427c:	63fb      	str	r3, [r7, #60]	@ 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800427e:	e061      	b.n	8004344 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8004280:	2300      	movs	r3, #0
 8004282:	63fb      	str	r3, [r7, #60]	@ 0x3c
          break;
 8004284:	e05e      	b.n	8004344 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8004286:	4b32      	ldr	r3, [pc, #200]	@ (8004350 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800428e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004292:	d102      	bne.n	800429a <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
         {
          frequency = HSE_VALUE;
 8004294:	4b31      	ldr	r3, [pc, #196]	@ (800435c <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 8004296:	63fb      	str	r3, [r7, #60]	@ 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8004298:	e054      	b.n	8004344 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 800429a:	2300      	movs	r3, #0
 800429c:	63fb      	str	r3, [r7, #60]	@ 0x3c
          break;
 800429e:	e051      	b.n	8004344 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 80042a0:	2300      	movs	r3, #0
 80042a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
          break;
 80042a4:	e04e      	b.n	8004344 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80042ac:	d148      	bne.n	8004340 <HAL_RCCEx_GetPeriphCLKFreq+0x984>
    {
      /* Get FDCAN clock source */
      srcclk= __HAL_RCC_GET_FDCAN_SOURCE();
 80042ae:	4b28      	ldr	r3, [pc, #160]	@ (8004350 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80042b0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80042b2:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80042b6:	63bb      	str	r3, [r7, #56]	@ 0x38

      switch (srcclk)
 80042b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80042ba:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80042be:	d02a      	beq.n	8004316 <HAL_RCCEx_GetPeriphCLKFreq+0x95a>
 80042c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80042c2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80042c6:	d838      	bhi.n	800433a <HAL_RCCEx_GetPeriphCLKFreq+0x97e>
 80042c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d004      	beq.n	80042d8 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
 80042ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80042d0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80042d4:	d00d      	beq.n	80042f2 <HAL_RCCEx_GetPeriphCLKFreq+0x936>
 80042d6:	e030      	b.n	800433a <HAL_RCCEx_GetPeriphCLKFreq+0x97e>
      {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80042d8:	4b1d      	ldr	r3, [pc, #116]	@ (8004350 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80042e0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80042e4:	d102      	bne.n	80042ec <HAL_RCCEx_GetPeriphCLKFreq+0x930>
         {
          frequency = HSE_VALUE;
 80042e6:	4b1d      	ldr	r3, [pc, #116]	@ (800435c <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 80042e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80042ea:	e02b      	b.n	8004344 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 80042ec:	2300      	movs	r3, #0
 80042ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
          break;
 80042f0:	e028      	b.n	8004344 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80042f2:	4b17      	ldr	r3, [pc, #92]	@ (8004350 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80042fa:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80042fe:	d107      	bne.n	8004310 <HAL_RCCEx_GetPeriphCLKFreq+0x954>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004300:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004304:	4618      	mov	r0, r3
 8004306:	f000 fae9 	bl	80048dc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800430a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800430c:	63fb      	str	r3, [r7, #60]	@ 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800430e:	e019      	b.n	8004344 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 8004310:	2300      	movs	r3, #0
 8004312:	63fb      	str	r3, [r7, #60]	@ 0x3c
          break;
 8004314:	e016      	b.n	8004344 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004316:	4b0e      	ldr	r3, [pc, #56]	@ (8004350 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800431e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004322:	d107      	bne.n	8004334 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004324:	f107 0318 	add.w	r3, r7, #24
 8004328:	4618      	mov	r0, r3
 800432a:	f000 f82f 	bl	800438c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800432e:	69fb      	ldr	r3, [r7, #28]
 8004330:	63fb      	str	r3, [r7, #60]	@ 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8004332:	e007      	b.n	8004344 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 8004334:	2300      	movs	r3, #0
 8004336:	63fb      	str	r3, [r7, #60]	@ 0x3c
          break;
 8004338:	e004      	b.n	8004344 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      default :
        {
          frequency = 0;
 800433a:	2300      	movs	r3, #0
 800433c:	63fb      	str	r3, [r7, #60]	@ 0x3c
          break;
 800433e:	e001      	b.n	8004344 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else
    {
      frequency = 0;
 8004340:	2300      	movs	r3, #0
 8004342:	63fb      	str	r3, [r7, #60]	@ 0x3c
    }

  return frequency;
 8004344:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8004346:	4618      	mov	r0, r3
 8004348:	3740      	adds	r7, #64	@ 0x40
 800434a:	46bd      	mov	sp, r7
 800434c:	bd80      	pop	{r7, pc}
 800434e:	bf00      	nop
 8004350:	58024400 	.word	0x58024400
 8004354:	03d09000 	.word	0x03d09000
 8004358:	003d0900 	.word	0x003d0900
 800435c:	0112a880 	.word	0x0112a880

08004360 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8004360:	b580      	push	{r7, lr}
 8004362:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8004364:	f7fe fb88 	bl	8002a78 <HAL_RCC_GetHCLKFreq>
 8004368:	4602      	mov	r2, r0
 800436a:	4b06      	ldr	r3, [pc, #24]	@ (8004384 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800436c:	6a1b      	ldr	r3, [r3, #32]
 800436e:	091b      	lsrs	r3, r3, #4
 8004370:	f003 0307 	and.w	r3, r3, #7
 8004374:	4904      	ldr	r1, [pc, #16]	@ (8004388 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8004376:	5ccb      	ldrb	r3, [r1, r3]
 8004378:	f003 031f 	and.w	r3, r3, #31
 800437c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8004380:	4618      	mov	r0, r3
 8004382:	bd80      	pop	{r7, pc}
 8004384:	58024400 	.word	0x58024400
 8004388:	08007ef0 	.word	0x08007ef0

0800438c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 800438c:	b480      	push	{r7}
 800438e:	b089      	sub	sp, #36	@ 0x24
 8004390:	af00      	add	r7, sp, #0
 8004392:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004394:	4ba1      	ldr	r3, [pc, #644]	@ (800461c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004396:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004398:	f003 0303 	and.w	r3, r3, #3
 800439c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800439e:	4b9f      	ldr	r3, [pc, #636]	@ (800461c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80043a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043a2:	0b1b      	lsrs	r3, r3, #12
 80043a4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80043a8:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80043aa:	4b9c      	ldr	r3, [pc, #624]	@ (800461c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80043ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043ae:	091b      	lsrs	r3, r3, #4
 80043b0:	f003 0301 	and.w	r3, r3, #1
 80043b4:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 80043b6:	4b99      	ldr	r3, [pc, #612]	@ (800461c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80043b8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80043ba:	08db      	lsrs	r3, r3, #3
 80043bc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80043c0:	693a      	ldr	r2, [r7, #16]
 80043c2:	fb02 f303 	mul.w	r3, r2, r3
 80043c6:	ee07 3a90 	vmov	s15, r3
 80043ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80043ce:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80043d2:	697b      	ldr	r3, [r7, #20]
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	f000 8111 	beq.w	80045fc <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80043da:	69bb      	ldr	r3, [r7, #24]
 80043dc:	2b02      	cmp	r3, #2
 80043de:	f000 8083 	beq.w	80044e8 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80043e2:	69bb      	ldr	r3, [r7, #24]
 80043e4:	2b02      	cmp	r3, #2
 80043e6:	f200 80a1 	bhi.w	800452c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80043ea:	69bb      	ldr	r3, [r7, #24]
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d003      	beq.n	80043f8 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80043f0:	69bb      	ldr	r3, [r7, #24]
 80043f2:	2b01      	cmp	r3, #1
 80043f4:	d056      	beq.n	80044a4 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80043f6:	e099      	b.n	800452c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80043f8:	4b88      	ldr	r3, [pc, #544]	@ (800461c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	f003 0320 	and.w	r3, r3, #32
 8004400:	2b00      	cmp	r3, #0
 8004402:	d02d      	beq.n	8004460 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004404:	4b85      	ldr	r3, [pc, #532]	@ (800461c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	08db      	lsrs	r3, r3, #3
 800440a:	f003 0303 	and.w	r3, r3, #3
 800440e:	4a84      	ldr	r2, [pc, #528]	@ (8004620 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8004410:	fa22 f303 	lsr.w	r3, r2, r3
 8004414:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004416:	68bb      	ldr	r3, [r7, #8]
 8004418:	ee07 3a90 	vmov	s15, r3
 800441c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004420:	697b      	ldr	r3, [r7, #20]
 8004422:	ee07 3a90 	vmov	s15, r3
 8004426:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800442a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800442e:	4b7b      	ldr	r3, [pc, #492]	@ (800461c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004430:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004432:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004436:	ee07 3a90 	vmov	s15, r3
 800443a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800443e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004442:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8004624 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004446:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800444a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800444e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004452:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004456:	ee67 7a27 	vmul.f32	s15, s14, s15
 800445a:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800445e:	e087      	b.n	8004570 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004460:	697b      	ldr	r3, [r7, #20]
 8004462:	ee07 3a90 	vmov	s15, r3
 8004466:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800446a:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8004628 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800446e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004472:	4b6a      	ldr	r3, [pc, #424]	@ (800461c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004474:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004476:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800447a:	ee07 3a90 	vmov	s15, r3
 800447e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004482:	ed97 6a03 	vldr	s12, [r7, #12]
 8004486:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8004624 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800448a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800448e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004492:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004496:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800449a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800449e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80044a2:	e065      	b.n	8004570 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80044a4:	697b      	ldr	r3, [r7, #20]
 80044a6:	ee07 3a90 	vmov	s15, r3
 80044aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80044ae:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800462c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80044b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80044b6:	4b59      	ldr	r3, [pc, #356]	@ (800461c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80044b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80044ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80044be:	ee07 3a90 	vmov	s15, r3
 80044c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80044c6:	ed97 6a03 	vldr	s12, [r7, #12]
 80044ca:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8004624 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80044ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80044d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80044d6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80044da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80044de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80044e2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80044e6:	e043      	b.n	8004570 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80044e8:	697b      	ldr	r3, [r7, #20]
 80044ea:	ee07 3a90 	vmov	s15, r3
 80044ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80044f2:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8004630 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80044f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80044fa:	4b48      	ldr	r3, [pc, #288]	@ (800461c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80044fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80044fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004502:	ee07 3a90 	vmov	s15, r3
 8004506:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800450a:	ed97 6a03 	vldr	s12, [r7, #12]
 800450e:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8004624 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004512:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004516:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800451a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800451e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004522:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004526:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800452a:	e021      	b.n	8004570 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800452c:	697b      	ldr	r3, [r7, #20]
 800452e:	ee07 3a90 	vmov	s15, r3
 8004532:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004536:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800462c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800453a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800453e:	4b37      	ldr	r3, [pc, #220]	@ (800461c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004540:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004542:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004546:	ee07 3a90 	vmov	s15, r3
 800454a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800454e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004552:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8004624 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004556:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800455a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800455e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004562:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004566:	ee67 7a27 	vmul.f32	s15, s14, s15
 800456a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800456e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8004570:	4b2a      	ldr	r3, [pc, #168]	@ (800461c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004572:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004574:	0a5b      	lsrs	r3, r3, #9
 8004576:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800457a:	ee07 3a90 	vmov	s15, r3
 800457e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004582:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004586:	ee37 7a87 	vadd.f32	s14, s15, s14
 800458a:	edd7 6a07 	vldr	s13, [r7, #28]
 800458e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004592:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004596:	ee17 2a90 	vmov	r2, s15
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 800459e:	4b1f      	ldr	r3, [pc, #124]	@ (800461c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80045a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80045a2:	0c1b      	lsrs	r3, r3, #16
 80045a4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80045a8:	ee07 3a90 	vmov	s15, r3
 80045ac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80045b0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80045b4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80045b8:	edd7 6a07 	vldr	s13, [r7, #28]
 80045bc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80045c0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80045c4:	ee17 2a90 	vmov	r2, s15
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 80045cc:	4b13      	ldr	r3, [pc, #76]	@ (800461c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80045ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80045d0:	0e1b      	lsrs	r3, r3, #24
 80045d2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80045d6:	ee07 3a90 	vmov	s15, r3
 80045da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80045de:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80045e2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80045e6:	edd7 6a07 	vldr	s13, [r7, #28]
 80045ea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80045ee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80045f2:	ee17 2a90 	vmov	r2, s15
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80045fa:	e008      	b.n	800460e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	2200      	movs	r2, #0
 8004600:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	2200      	movs	r2, #0
 8004606:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	2200      	movs	r2, #0
 800460c:	609a      	str	r2, [r3, #8]
}
 800460e:	bf00      	nop
 8004610:	3724      	adds	r7, #36	@ 0x24
 8004612:	46bd      	mov	sp, r7
 8004614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004618:	4770      	bx	lr
 800461a:	bf00      	nop
 800461c:	58024400 	.word	0x58024400
 8004620:	03d09000 	.word	0x03d09000
 8004624:	46000000 	.word	0x46000000
 8004628:	4c742400 	.word	0x4c742400
 800462c:	4a742400 	.word	0x4a742400
 8004630:	4b895440 	.word	0x4b895440

08004634 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8004634:	b480      	push	{r7}
 8004636:	b089      	sub	sp, #36	@ 0x24
 8004638:	af00      	add	r7, sp, #0
 800463a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800463c:	4ba1      	ldr	r3, [pc, #644]	@ (80048c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800463e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004640:	f003 0303 	and.w	r3, r3, #3
 8004644:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8004646:	4b9f      	ldr	r3, [pc, #636]	@ (80048c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004648:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800464a:	0d1b      	lsrs	r3, r3, #20
 800464c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004650:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8004652:	4b9c      	ldr	r3, [pc, #624]	@ (80048c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004654:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004656:	0a1b      	lsrs	r3, r3, #8
 8004658:	f003 0301 	and.w	r3, r3, #1
 800465c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800465e:	4b99      	ldr	r3, [pc, #612]	@ (80048c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004660:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004662:	08db      	lsrs	r3, r3, #3
 8004664:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004668:	693a      	ldr	r2, [r7, #16]
 800466a:	fb02 f303 	mul.w	r3, r2, r3
 800466e:	ee07 3a90 	vmov	s15, r3
 8004672:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004676:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800467a:	697b      	ldr	r3, [r7, #20]
 800467c:	2b00      	cmp	r3, #0
 800467e:	f000 8111 	beq.w	80048a4 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8004682:	69bb      	ldr	r3, [r7, #24]
 8004684:	2b02      	cmp	r3, #2
 8004686:	f000 8083 	beq.w	8004790 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800468a:	69bb      	ldr	r3, [r7, #24]
 800468c:	2b02      	cmp	r3, #2
 800468e:	f200 80a1 	bhi.w	80047d4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8004692:	69bb      	ldr	r3, [r7, #24]
 8004694:	2b00      	cmp	r3, #0
 8004696:	d003      	beq.n	80046a0 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8004698:	69bb      	ldr	r3, [r7, #24]
 800469a:	2b01      	cmp	r3, #1
 800469c:	d056      	beq.n	800474c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800469e:	e099      	b.n	80047d4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80046a0:	4b88      	ldr	r3, [pc, #544]	@ (80048c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	f003 0320 	and.w	r3, r3, #32
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d02d      	beq.n	8004708 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80046ac:	4b85      	ldr	r3, [pc, #532]	@ (80048c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	08db      	lsrs	r3, r3, #3
 80046b2:	f003 0303 	and.w	r3, r3, #3
 80046b6:	4a84      	ldr	r2, [pc, #528]	@ (80048c8 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80046b8:	fa22 f303 	lsr.w	r3, r2, r3
 80046bc:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80046be:	68bb      	ldr	r3, [r7, #8]
 80046c0:	ee07 3a90 	vmov	s15, r3
 80046c4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80046c8:	697b      	ldr	r3, [r7, #20]
 80046ca:	ee07 3a90 	vmov	s15, r3
 80046ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80046d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80046d6:	4b7b      	ldr	r3, [pc, #492]	@ (80048c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80046d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80046de:	ee07 3a90 	vmov	s15, r3
 80046e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80046e6:	ed97 6a03 	vldr	s12, [r7, #12]
 80046ea:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80048cc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80046ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80046f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80046f6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80046fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80046fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004702:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8004706:	e087      	b.n	8004818 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004708:	697b      	ldr	r3, [r7, #20]
 800470a:	ee07 3a90 	vmov	s15, r3
 800470e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004712:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 80048d0 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8004716:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800471a:	4b6a      	ldr	r3, [pc, #424]	@ (80048c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800471c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800471e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004722:	ee07 3a90 	vmov	s15, r3
 8004726:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800472a:	ed97 6a03 	vldr	s12, [r7, #12]
 800472e:	eddf 5a67 	vldr	s11, [pc, #412]	@ 80048cc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004732:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004736:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800473a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800473e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004742:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004746:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800474a:	e065      	b.n	8004818 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800474c:	697b      	ldr	r3, [r7, #20]
 800474e:	ee07 3a90 	vmov	s15, r3
 8004752:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004756:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80048d4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800475a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800475e:	4b59      	ldr	r3, [pc, #356]	@ (80048c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004760:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004762:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004766:	ee07 3a90 	vmov	s15, r3
 800476a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800476e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004772:	eddf 5a56 	vldr	s11, [pc, #344]	@ 80048cc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004776:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800477a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800477e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004782:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004786:	ee67 7a27 	vmul.f32	s15, s14, s15
 800478a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800478e:	e043      	b.n	8004818 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004790:	697b      	ldr	r3, [r7, #20]
 8004792:	ee07 3a90 	vmov	s15, r3
 8004796:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800479a:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 80048d8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800479e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80047a2:	4b48      	ldr	r3, [pc, #288]	@ (80048c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80047a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80047aa:	ee07 3a90 	vmov	s15, r3
 80047ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80047b2:	ed97 6a03 	vldr	s12, [r7, #12]
 80047b6:	eddf 5a45 	vldr	s11, [pc, #276]	@ 80048cc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80047ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80047be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80047c2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80047c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80047ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80047ce:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80047d2:	e021      	b.n	8004818 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80047d4:	697b      	ldr	r3, [r7, #20]
 80047d6:	ee07 3a90 	vmov	s15, r3
 80047da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80047de:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80048d4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80047e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80047e6:	4b37      	ldr	r3, [pc, #220]	@ (80048c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80047e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80047ee:	ee07 3a90 	vmov	s15, r3
 80047f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80047f6:	ed97 6a03 	vldr	s12, [r7, #12]
 80047fa:	eddf 5a34 	vldr	s11, [pc, #208]	@ 80048cc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80047fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004802:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004806:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800480a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800480e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004812:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004816:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8004818:	4b2a      	ldr	r3, [pc, #168]	@ (80048c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800481a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800481c:	0a5b      	lsrs	r3, r3, #9
 800481e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004822:	ee07 3a90 	vmov	s15, r3
 8004826:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800482a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800482e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004832:	edd7 6a07 	vldr	s13, [r7, #28]
 8004836:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800483a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800483e:	ee17 2a90 	vmov	r2, s15
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8004846:	4b1f      	ldr	r3, [pc, #124]	@ (80048c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004848:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800484a:	0c1b      	lsrs	r3, r3, #16
 800484c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004850:	ee07 3a90 	vmov	s15, r3
 8004854:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004858:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800485c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004860:	edd7 6a07 	vldr	s13, [r7, #28]
 8004864:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004868:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800486c:	ee17 2a90 	vmov	r2, s15
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8004874:	4b13      	ldr	r3, [pc, #76]	@ (80048c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004876:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004878:	0e1b      	lsrs	r3, r3, #24
 800487a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800487e:	ee07 3a90 	vmov	s15, r3
 8004882:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004886:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800488a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800488e:	edd7 6a07 	vldr	s13, [r7, #28]
 8004892:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004896:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800489a:	ee17 2a90 	vmov	r2, s15
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80048a2:	e008      	b.n	80048b6 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	2200      	movs	r2, #0
 80048a8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	2200      	movs	r2, #0
 80048ae:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	2200      	movs	r2, #0
 80048b4:	609a      	str	r2, [r3, #8]
}
 80048b6:	bf00      	nop
 80048b8:	3724      	adds	r7, #36	@ 0x24
 80048ba:	46bd      	mov	sp, r7
 80048bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c0:	4770      	bx	lr
 80048c2:	bf00      	nop
 80048c4:	58024400 	.word	0x58024400
 80048c8:	03d09000 	.word	0x03d09000
 80048cc:	46000000 	.word	0x46000000
 80048d0:	4c742400 	.word	0x4c742400
 80048d4:	4a742400 	.word	0x4a742400
 80048d8:	4b895440 	.word	0x4b895440

080048dc <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 80048dc:	b480      	push	{r7}
 80048de:	b089      	sub	sp, #36	@ 0x24
 80048e0:	af00      	add	r7, sp, #0
 80048e2:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80048e4:	4ba0      	ldr	r3, [pc, #640]	@ (8004b68 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80048e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048e8:	f003 0303 	and.w	r3, r3, #3
 80048ec:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 80048ee:	4b9e      	ldr	r3, [pc, #632]	@ (8004b68 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80048f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048f2:	091b      	lsrs	r3, r3, #4
 80048f4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80048f8:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 80048fa:	4b9b      	ldr	r3, [pc, #620]	@ (8004b68 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80048fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048fe:	f003 0301 	and.w	r3, r3, #1
 8004902:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8004904:	4b98      	ldr	r3, [pc, #608]	@ (8004b68 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8004906:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004908:	08db      	lsrs	r3, r3, #3
 800490a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800490e:	693a      	ldr	r2, [r7, #16]
 8004910:	fb02 f303 	mul.w	r3, r2, r3
 8004914:	ee07 3a90 	vmov	s15, r3
 8004918:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800491c:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8004920:	697b      	ldr	r3, [r7, #20]
 8004922:	2b00      	cmp	r3, #0
 8004924:	f000 8111 	beq.w	8004b4a <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8004928:	69bb      	ldr	r3, [r7, #24]
 800492a:	2b02      	cmp	r3, #2
 800492c:	f000 8083 	beq.w	8004a36 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8004930:	69bb      	ldr	r3, [r7, #24]
 8004932:	2b02      	cmp	r3, #2
 8004934:	f200 80a1 	bhi.w	8004a7a <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8004938:	69bb      	ldr	r3, [r7, #24]
 800493a:	2b00      	cmp	r3, #0
 800493c:	d003      	beq.n	8004946 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800493e:	69bb      	ldr	r3, [r7, #24]
 8004940:	2b01      	cmp	r3, #1
 8004942:	d056      	beq.n	80049f2 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8004944:	e099      	b.n	8004a7a <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004946:	4b88      	ldr	r3, [pc, #544]	@ (8004b68 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	f003 0320 	and.w	r3, r3, #32
 800494e:	2b00      	cmp	r3, #0
 8004950:	d02d      	beq.n	80049ae <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004952:	4b85      	ldr	r3, [pc, #532]	@ (8004b68 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	08db      	lsrs	r3, r3, #3
 8004958:	f003 0303 	and.w	r3, r3, #3
 800495c:	4a83      	ldr	r2, [pc, #524]	@ (8004b6c <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800495e:	fa22 f303 	lsr.w	r3, r2, r3
 8004962:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004964:	68bb      	ldr	r3, [r7, #8]
 8004966:	ee07 3a90 	vmov	s15, r3
 800496a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800496e:	697b      	ldr	r3, [r7, #20]
 8004970:	ee07 3a90 	vmov	s15, r3
 8004974:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004978:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800497c:	4b7a      	ldr	r3, [pc, #488]	@ (8004b68 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800497e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004980:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004984:	ee07 3a90 	vmov	s15, r3
 8004988:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800498c:	ed97 6a03 	vldr	s12, [r7, #12]
 8004990:	eddf 5a77 	vldr	s11, [pc, #476]	@ 8004b70 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8004994:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004998:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800499c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80049a0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80049a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80049a8:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80049ac:	e087      	b.n	8004abe <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80049ae:	697b      	ldr	r3, [r7, #20]
 80049b0:	ee07 3a90 	vmov	s15, r3
 80049b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80049b8:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 8004b74 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 80049bc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80049c0:	4b69      	ldr	r3, [pc, #420]	@ (8004b68 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80049c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80049c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80049c8:	ee07 3a90 	vmov	s15, r3
 80049cc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80049d0:	ed97 6a03 	vldr	s12, [r7, #12]
 80049d4:	eddf 5a66 	vldr	s11, [pc, #408]	@ 8004b70 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80049d8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80049dc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80049e0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80049e4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80049e8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80049ec:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80049f0:	e065      	b.n	8004abe <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80049f2:	697b      	ldr	r3, [r7, #20]
 80049f4:	ee07 3a90 	vmov	s15, r3
 80049f8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80049fc:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 8004b78 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8004a00:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004a04:	4b58      	ldr	r3, [pc, #352]	@ (8004b68 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8004a06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a08:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a0c:	ee07 3a90 	vmov	s15, r3
 8004a10:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004a14:	ed97 6a03 	vldr	s12, [r7, #12]
 8004a18:	eddf 5a55 	vldr	s11, [pc, #340]	@ 8004b70 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8004a1c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004a20:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004a24:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004a28:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004a2c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a30:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004a34:	e043      	b.n	8004abe <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004a36:	697b      	ldr	r3, [r7, #20]
 8004a38:	ee07 3a90 	vmov	s15, r3
 8004a3c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a40:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 8004b7c <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8004a44:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004a48:	4b47      	ldr	r3, [pc, #284]	@ (8004b68 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8004a4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a4c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a50:	ee07 3a90 	vmov	s15, r3
 8004a54:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004a58:	ed97 6a03 	vldr	s12, [r7, #12]
 8004a5c:	eddf 5a44 	vldr	s11, [pc, #272]	@ 8004b70 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8004a60:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004a64:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004a68:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004a6c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004a70:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a74:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004a78:	e021      	b.n	8004abe <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    default:
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004a7a:	697b      	ldr	r3, [r7, #20]
 8004a7c:	ee07 3a90 	vmov	s15, r3
 8004a80:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a84:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 8004b74 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8004a88:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004a8c:	4b36      	ldr	r3, [pc, #216]	@ (8004b68 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8004a8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a90:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a94:	ee07 3a90 	vmov	s15, r3
 8004a98:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004a9c:	ed97 6a03 	vldr	s12, [r7, #12]
 8004aa0:	eddf 5a33 	vldr	s11, [pc, #204]	@ 8004b70 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8004aa4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004aa8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004aac:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004ab0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004ab4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004ab8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004abc:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 8004abe:	4b2a      	ldr	r3, [pc, #168]	@ (8004b68 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8004ac0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ac2:	0a5b      	lsrs	r3, r3, #9
 8004ac4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004ac8:	ee07 3a90 	vmov	s15, r3
 8004acc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ad0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004ad4:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004ad8:	edd7 6a07 	vldr	s13, [r7, #28]
 8004adc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004ae0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004ae4:	ee17 2a90 	vmov	r2, s15
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 8004aec:	4b1e      	ldr	r3, [pc, #120]	@ (8004b68 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8004aee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004af0:	0c1b      	lsrs	r3, r3, #16
 8004af2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004af6:	ee07 3a90 	vmov	s15, r3
 8004afa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004afe:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004b02:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004b06:	edd7 6a07 	vldr	s13, [r7, #28]
 8004b0a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004b0e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004b12:	ee17 2a90 	vmov	r2, s15
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 8004b1a:	4b13      	ldr	r3, [pc, #76]	@ (8004b68 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8004b1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b1e:	0e1b      	lsrs	r3, r3, #24
 8004b20:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004b24:	ee07 3a90 	vmov	s15, r3
 8004b28:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b2c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004b30:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004b34:	edd7 6a07 	vldr	s13, [r7, #28]
 8004b38:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004b3c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004b40:	ee17 2a90 	vmov	r2, s15
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8004b48:	e008      	b.n	8004b5c <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	2200      	movs	r2, #0
 8004b4e:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	2200      	movs	r2, #0
 8004b54:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	2200      	movs	r2, #0
 8004b5a:	609a      	str	r2, [r3, #8]
}
 8004b5c:	bf00      	nop
 8004b5e:	3724      	adds	r7, #36	@ 0x24
 8004b60:	46bd      	mov	sp, r7
 8004b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b66:	4770      	bx	lr
 8004b68:	58024400 	.word	0x58024400
 8004b6c:	03d09000 	.word	0x03d09000
 8004b70:	46000000 	.word	0x46000000
 8004b74:	4c742400 	.word	0x4c742400
 8004b78:	4a742400 	.word	0x4a742400
 8004b7c:	4b895440 	.word	0x4b895440

08004b80 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8004b80:	b580      	push	{r7, lr}
 8004b82:	b084      	sub	sp, #16
 8004b84:	af00      	add	r7, sp, #0
 8004b86:	6078      	str	r0, [r7, #4]
 8004b88:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004b8a:	2300      	movs	r3, #0
 8004b8c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004b8e:	4b53      	ldr	r3, [pc, #332]	@ (8004cdc <RCCEx_PLL2_Config+0x15c>)
 8004b90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b92:	f003 0303 	and.w	r3, r3, #3
 8004b96:	2b03      	cmp	r3, #3
 8004b98:	d101      	bne.n	8004b9e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8004b9a:	2301      	movs	r3, #1
 8004b9c:	e099      	b.n	8004cd2 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8004b9e:	4b4f      	ldr	r3, [pc, #316]	@ (8004cdc <RCCEx_PLL2_Config+0x15c>)
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	4a4e      	ldr	r2, [pc, #312]	@ (8004cdc <RCCEx_PLL2_Config+0x15c>)
 8004ba4:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004ba8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004baa:	f7fc fb0b 	bl	80011c4 <HAL_GetTick>
 8004bae:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004bb0:	e008      	b.n	8004bc4 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8004bb2:	f7fc fb07 	bl	80011c4 <HAL_GetTick>
 8004bb6:	4602      	mov	r2, r0
 8004bb8:	68bb      	ldr	r3, [r7, #8]
 8004bba:	1ad3      	subs	r3, r2, r3
 8004bbc:	2b02      	cmp	r3, #2
 8004bbe:	d901      	bls.n	8004bc4 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004bc0:	2303      	movs	r3, #3
 8004bc2:	e086      	b.n	8004cd2 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004bc4:	4b45      	ldr	r3, [pc, #276]	@ (8004cdc <RCCEx_PLL2_Config+0x15c>)
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d1f0      	bne.n	8004bb2 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8004bd0:	4b42      	ldr	r3, [pc, #264]	@ (8004cdc <RCCEx_PLL2_Config+0x15c>)
 8004bd2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004bd4:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	031b      	lsls	r3, r3, #12
 8004bde:	493f      	ldr	r1, [pc, #252]	@ (8004cdc <RCCEx_PLL2_Config+0x15c>)
 8004be0:	4313      	orrs	r3, r2
 8004be2:	628b      	str	r3, [r1, #40]	@ 0x28
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	685b      	ldr	r3, [r3, #4]
 8004be8:	3b01      	subs	r3, #1
 8004bea:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	689b      	ldr	r3, [r3, #8]
 8004bf2:	3b01      	subs	r3, #1
 8004bf4:	025b      	lsls	r3, r3, #9
 8004bf6:	b29b      	uxth	r3, r3
 8004bf8:	431a      	orrs	r2, r3
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	68db      	ldr	r3, [r3, #12]
 8004bfe:	3b01      	subs	r3, #1
 8004c00:	041b      	lsls	r3, r3, #16
 8004c02:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8004c06:	431a      	orrs	r2, r3
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	691b      	ldr	r3, [r3, #16]
 8004c0c:	3b01      	subs	r3, #1
 8004c0e:	061b      	lsls	r3, r3, #24
 8004c10:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8004c14:	4931      	ldr	r1, [pc, #196]	@ (8004cdc <RCCEx_PLL2_Config+0x15c>)
 8004c16:	4313      	orrs	r3, r2
 8004c18:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8004c1a:	4b30      	ldr	r3, [pc, #192]	@ (8004cdc <RCCEx_PLL2_Config+0x15c>)
 8004c1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c1e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	695b      	ldr	r3, [r3, #20]
 8004c26:	492d      	ldr	r1, [pc, #180]	@ (8004cdc <RCCEx_PLL2_Config+0x15c>)
 8004c28:	4313      	orrs	r3, r2
 8004c2a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8004c2c:	4b2b      	ldr	r3, [pc, #172]	@ (8004cdc <RCCEx_PLL2_Config+0x15c>)
 8004c2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c30:	f023 0220 	bic.w	r2, r3, #32
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	699b      	ldr	r3, [r3, #24]
 8004c38:	4928      	ldr	r1, [pc, #160]	@ (8004cdc <RCCEx_PLL2_Config+0x15c>)
 8004c3a:	4313      	orrs	r3, r2
 8004c3c:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8004c3e:	4b27      	ldr	r3, [pc, #156]	@ (8004cdc <RCCEx_PLL2_Config+0x15c>)
 8004c40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c42:	4a26      	ldr	r2, [pc, #152]	@ (8004cdc <RCCEx_PLL2_Config+0x15c>)
 8004c44:	f023 0310 	bic.w	r3, r3, #16
 8004c48:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8004c4a:	4b24      	ldr	r3, [pc, #144]	@ (8004cdc <RCCEx_PLL2_Config+0x15c>)
 8004c4c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004c4e:	4b24      	ldr	r3, [pc, #144]	@ (8004ce0 <RCCEx_PLL2_Config+0x160>)
 8004c50:	4013      	ands	r3, r2
 8004c52:	687a      	ldr	r2, [r7, #4]
 8004c54:	69d2      	ldr	r2, [r2, #28]
 8004c56:	00d2      	lsls	r2, r2, #3
 8004c58:	4920      	ldr	r1, [pc, #128]	@ (8004cdc <RCCEx_PLL2_Config+0x15c>)
 8004c5a:	4313      	orrs	r3, r2
 8004c5c:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8004c5e:	4b1f      	ldr	r3, [pc, #124]	@ (8004cdc <RCCEx_PLL2_Config+0x15c>)
 8004c60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c62:	4a1e      	ldr	r2, [pc, #120]	@ (8004cdc <RCCEx_PLL2_Config+0x15c>)
 8004c64:	f043 0310 	orr.w	r3, r3, #16
 8004c68:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8004c6a:	683b      	ldr	r3, [r7, #0]
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d106      	bne.n	8004c7e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8004c70:	4b1a      	ldr	r3, [pc, #104]	@ (8004cdc <RCCEx_PLL2_Config+0x15c>)
 8004c72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c74:	4a19      	ldr	r2, [pc, #100]	@ (8004cdc <RCCEx_PLL2_Config+0x15c>)
 8004c76:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004c7a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004c7c:	e00f      	b.n	8004c9e <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8004c7e:	683b      	ldr	r3, [r7, #0]
 8004c80:	2b01      	cmp	r3, #1
 8004c82:	d106      	bne.n	8004c92 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8004c84:	4b15      	ldr	r3, [pc, #84]	@ (8004cdc <RCCEx_PLL2_Config+0x15c>)
 8004c86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c88:	4a14      	ldr	r2, [pc, #80]	@ (8004cdc <RCCEx_PLL2_Config+0x15c>)
 8004c8a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004c8e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004c90:	e005      	b.n	8004c9e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8004c92:	4b12      	ldr	r3, [pc, #72]	@ (8004cdc <RCCEx_PLL2_Config+0x15c>)
 8004c94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c96:	4a11      	ldr	r2, [pc, #68]	@ (8004cdc <RCCEx_PLL2_Config+0x15c>)
 8004c98:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8004c9c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8004c9e:	4b0f      	ldr	r3, [pc, #60]	@ (8004cdc <RCCEx_PLL2_Config+0x15c>)
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	4a0e      	ldr	r2, [pc, #56]	@ (8004cdc <RCCEx_PLL2_Config+0x15c>)
 8004ca4:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004ca8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004caa:	f7fc fa8b 	bl	80011c4 <HAL_GetTick>
 8004cae:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004cb0:	e008      	b.n	8004cc4 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8004cb2:	f7fc fa87 	bl	80011c4 <HAL_GetTick>
 8004cb6:	4602      	mov	r2, r0
 8004cb8:	68bb      	ldr	r3, [r7, #8]
 8004cba:	1ad3      	subs	r3, r2, r3
 8004cbc:	2b02      	cmp	r3, #2
 8004cbe:	d901      	bls.n	8004cc4 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004cc0:	2303      	movs	r3, #3
 8004cc2:	e006      	b.n	8004cd2 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004cc4:	4b05      	ldr	r3, [pc, #20]	@ (8004cdc <RCCEx_PLL2_Config+0x15c>)
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d0f0      	beq.n	8004cb2 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8004cd0:	7bfb      	ldrb	r3, [r7, #15]
}
 8004cd2:	4618      	mov	r0, r3
 8004cd4:	3710      	adds	r7, #16
 8004cd6:	46bd      	mov	sp, r7
 8004cd8:	bd80      	pop	{r7, pc}
 8004cda:	bf00      	nop
 8004cdc:	58024400 	.word	0x58024400
 8004ce0:	ffff0007 	.word	0xffff0007

08004ce4 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8004ce4:	b580      	push	{r7, lr}
 8004ce6:	b084      	sub	sp, #16
 8004ce8:	af00      	add	r7, sp, #0
 8004cea:	6078      	str	r0, [r7, #4]
 8004cec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004cee:	2300      	movs	r3, #0
 8004cf0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004cf2:	4b53      	ldr	r3, [pc, #332]	@ (8004e40 <RCCEx_PLL3_Config+0x15c>)
 8004cf4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004cf6:	f003 0303 	and.w	r3, r3, #3
 8004cfa:	2b03      	cmp	r3, #3
 8004cfc:	d101      	bne.n	8004d02 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8004cfe:	2301      	movs	r3, #1
 8004d00:	e099      	b.n	8004e36 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8004d02:	4b4f      	ldr	r3, [pc, #316]	@ (8004e40 <RCCEx_PLL3_Config+0x15c>)
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	4a4e      	ldr	r2, [pc, #312]	@ (8004e40 <RCCEx_PLL3_Config+0x15c>)
 8004d08:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004d0c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004d0e:	f7fc fa59 	bl	80011c4 <HAL_GetTick>
 8004d12:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004d14:	e008      	b.n	8004d28 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8004d16:	f7fc fa55 	bl	80011c4 <HAL_GetTick>
 8004d1a:	4602      	mov	r2, r0
 8004d1c:	68bb      	ldr	r3, [r7, #8]
 8004d1e:	1ad3      	subs	r3, r2, r3
 8004d20:	2b02      	cmp	r3, #2
 8004d22:	d901      	bls.n	8004d28 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004d24:	2303      	movs	r3, #3
 8004d26:	e086      	b.n	8004e36 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004d28:	4b45      	ldr	r3, [pc, #276]	@ (8004e40 <RCCEx_PLL3_Config+0x15c>)
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d1f0      	bne.n	8004d16 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8004d34:	4b42      	ldr	r3, [pc, #264]	@ (8004e40 <RCCEx_PLL3_Config+0x15c>)
 8004d36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d38:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	051b      	lsls	r3, r3, #20
 8004d42:	493f      	ldr	r1, [pc, #252]	@ (8004e40 <RCCEx_PLL3_Config+0x15c>)
 8004d44:	4313      	orrs	r3, r2
 8004d46:	628b      	str	r3, [r1, #40]	@ 0x28
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	685b      	ldr	r3, [r3, #4]
 8004d4c:	3b01      	subs	r3, #1
 8004d4e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	689b      	ldr	r3, [r3, #8]
 8004d56:	3b01      	subs	r3, #1
 8004d58:	025b      	lsls	r3, r3, #9
 8004d5a:	b29b      	uxth	r3, r3
 8004d5c:	431a      	orrs	r2, r3
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	68db      	ldr	r3, [r3, #12]
 8004d62:	3b01      	subs	r3, #1
 8004d64:	041b      	lsls	r3, r3, #16
 8004d66:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8004d6a:	431a      	orrs	r2, r3
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	691b      	ldr	r3, [r3, #16]
 8004d70:	3b01      	subs	r3, #1
 8004d72:	061b      	lsls	r3, r3, #24
 8004d74:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8004d78:	4931      	ldr	r1, [pc, #196]	@ (8004e40 <RCCEx_PLL3_Config+0x15c>)
 8004d7a:	4313      	orrs	r3, r2
 8004d7c:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8004d7e:	4b30      	ldr	r3, [pc, #192]	@ (8004e40 <RCCEx_PLL3_Config+0x15c>)
 8004d80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d82:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	695b      	ldr	r3, [r3, #20]
 8004d8a:	492d      	ldr	r1, [pc, #180]	@ (8004e40 <RCCEx_PLL3_Config+0x15c>)
 8004d8c:	4313      	orrs	r3, r2
 8004d8e:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8004d90:	4b2b      	ldr	r3, [pc, #172]	@ (8004e40 <RCCEx_PLL3_Config+0x15c>)
 8004d92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d94:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	699b      	ldr	r3, [r3, #24]
 8004d9c:	4928      	ldr	r1, [pc, #160]	@ (8004e40 <RCCEx_PLL3_Config+0x15c>)
 8004d9e:	4313      	orrs	r3, r2
 8004da0:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8004da2:	4b27      	ldr	r3, [pc, #156]	@ (8004e40 <RCCEx_PLL3_Config+0x15c>)
 8004da4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004da6:	4a26      	ldr	r2, [pc, #152]	@ (8004e40 <RCCEx_PLL3_Config+0x15c>)
 8004da8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004dac:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8004dae:	4b24      	ldr	r3, [pc, #144]	@ (8004e40 <RCCEx_PLL3_Config+0x15c>)
 8004db0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004db2:	4b24      	ldr	r3, [pc, #144]	@ (8004e44 <RCCEx_PLL3_Config+0x160>)
 8004db4:	4013      	ands	r3, r2
 8004db6:	687a      	ldr	r2, [r7, #4]
 8004db8:	69d2      	ldr	r2, [r2, #28]
 8004dba:	00d2      	lsls	r2, r2, #3
 8004dbc:	4920      	ldr	r1, [pc, #128]	@ (8004e40 <RCCEx_PLL3_Config+0x15c>)
 8004dbe:	4313      	orrs	r3, r2
 8004dc0:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8004dc2:	4b1f      	ldr	r3, [pc, #124]	@ (8004e40 <RCCEx_PLL3_Config+0x15c>)
 8004dc4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004dc6:	4a1e      	ldr	r2, [pc, #120]	@ (8004e40 <RCCEx_PLL3_Config+0x15c>)
 8004dc8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004dcc:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8004dce:	683b      	ldr	r3, [r7, #0]
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d106      	bne.n	8004de2 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8004dd4:	4b1a      	ldr	r3, [pc, #104]	@ (8004e40 <RCCEx_PLL3_Config+0x15c>)
 8004dd6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004dd8:	4a19      	ldr	r2, [pc, #100]	@ (8004e40 <RCCEx_PLL3_Config+0x15c>)
 8004dda:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004dde:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004de0:	e00f      	b.n	8004e02 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8004de2:	683b      	ldr	r3, [r7, #0]
 8004de4:	2b01      	cmp	r3, #1
 8004de6:	d106      	bne.n	8004df6 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8004de8:	4b15      	ldr	r3, [pc, #84]	@ (8004e40 <RCCEx_PLL3_Config+0x15c>)
 8004dea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004dec:	4a14      	ldr	r2, [pc, #80]	@ (8004e40 <RCCEx_PLL3_Config+0x15c>)
 8004dee:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004df2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004df4:	e005      	b.n	8004e02 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8004df6:	4b12      	ldr	r3, [pc, #72]	@ (8004e40 <RCCEx_PLL3_Config+0x15c>)
 8004df8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004dfa:	4a11      	ldr	r2, [pc, #68]	@ (8004e40 <RCCEx_PLL3_Config+0x15c>)
 8004dfc:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004e00:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8004e02:	4b0f      	ldr	r3, [pc, #60]	@ (8004e40 <RCCEx_PLL3_Config+0x15c>)
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	4a0e      	ldr	r2, [pc, #56]	@ (8004e40 <RCCEx_PLL3_Config+0x15c>)
 8004e08:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004e0c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004e0e:	f7fc f9d9 	bl	80011c4 <HAL_GetTick>
 8004e12:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004e14:	e008      	b.n	8004e28 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8004e16:	f7fc f9d5 	bl	80011c4 <HAL_GetTick>
 8004e1a:	4602      	mov	r2, r0
 8004e1c:	68bb      	ldr	r3, [r7, #8]
 8004e1e:	1ad3      	subs	r3, r2, r3
 8004e20:	2b02      	cmp	r3, #2
 8004e22:	d901      	bls.n	8004e28 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004e24:	2303      	movs	r3, #3
 8004e26:	e006      	b.n	8004e36 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004e28:	4b05      	ldr	r3, [pc, #20]	@ (8004e40 <RCCEx_PLL3_Config+0x15c>)
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d0f0      	beq.n	8004e16 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8004e34:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e36:	4618      	mov	r0, r3
 8004e38:	3710      	adds	r7, #16
 8004e3a:	46bd      	mov	sp, r7
 8004e3c:	bd80      	pop	{r7, pc}
 8004e3e:	bf00      	nop
 8004e40:	58024400 	.word	0x58024400
 8004e44:	ffff0007 	.word	0xffff0007

08004e48 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8004e48:	b580      	push	{r7, lr}
 8004e4a:	b08a      	sub	sp, #40	@ 0x28
 8004e4c:	af00      	add	r7, sp, #0
 8004e4e:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade;
  uint32_t unitsize;
  uint32_t tickstart;

  /* Check the SD handle allocation */
  if (hsd == NULL)
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d101      	bne.n	8004e5a <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8004e56:	2301      	movs	r3, #1
 8004e58:	e075      	b.n	8004f46 <HAL_SD_Init+0xfe>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if (hsd->State == HAL_SD_STATE_RESET)
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8004e60:	b2db      	uxtb	r3, r3
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d105      	bne.n	8004e72 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	2200      	movs	r2, #0
 8004e6a:	761a      	strb	r2, [r3, #24]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8004e6c:	6878      	ldr	r0, [r7, #4]
 8004e6e:	f7fb febb 	bl	8000be8 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	2203      	movs	r2, #3
 8004e76:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8004e7a:	6878      	ldr	r0, [r7, #4]
 8004e7c:	f000 f868 	bl	8004f50 <HAL_SD_InitCard>
 8004e80:	4603      	mov	r3, r0
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d001      	beq.n	8004e8a <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8004e86:	2301      	movs	r3, #1
 8004e88:	e05d      	b.n	8004f46 <HAL_SD_Init+0xfe>
  }

  if (HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 8004e8a:	f107 0308 	add.w	r3, r7, #8
 8004e8e:	4619      	mov	r1, r3
 8004e90:	6878      	ldr	r0, [r7, #4]
 8004e92:	f000 fa95 	bl	80053c0 <HAL_SD_GetCardStatus>
 8004e96:	4603      	mov	r3, r0
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d001      	beq.n	8004ea0 <HAL_SD_Init+0x58>
  {
    return HAL_ERROR;
 8004e9c:	2301      	movs	r3, #1
 8004e9e:	e052      	b.n	8004f46 <HAL_SD_Init+0xfe>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 8004ea0:	7e3b      	ldrb	r3, [r7, #24]
 8004ea2:	b2db      	uxtb	r3, r3
 8004ea4:	627b      	str	r3, [r7, #36]	@ 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 8004ea6:	7e7b      	ldrb	r3, [r7, #25]
 8004ea8:	b2db      	uxtb	r3, r3
 8004eaa:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004eb0:	2b01      	cmp	r3, #1
 8004eb2:	d10a      	bne.n	8004eca <HAL_SD_Init+0x82>
 8004eb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d102      	bne.n	8004ec0 <HAL_SD_Init+0x78>
 8004eba:	6a3b      	ldr	r3, [r7, #32]
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d004      	beq.n	8004eca <HAL_SD_Init+0x82>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004ec6:	659a      	str	r2, [r3, #88]	@ 0x58
 8004ec8:	e00b      	b.n	8004ee2 <HAL_SD_Init+0x9a>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ece:	2b01      	cmp	r3, #1
 8004ed0:	d104      	bne.n	8004edc <HAL_SD_Init+0x94>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004ed8:	659a      	str	r2, [r3, #88]	@ 0x58
 8004eda:	e002      	b.n	8004ee2 <HAL_SD_Init+0x9a>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	2200      	movs	r2, #0
 8004ee0:	659a      	str	r2, [r3, #88]	@ 0x58
    }

  }
  /* Configure the bus wide */
  if (HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	68db      	ldr	r3, [r3, #12]
 8004ee6:	4619      	mov	r1, r3
 8004ee8:	6878      	ldr	r0, [r7, #4]
 8004eea:	f000 fb1f 	bl	800552c <HAL_SD_ConfigWideBusOperation>
 8004eee:	4603      	mov	r3, r0
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d001      	beq.n	8004ef8 <HAL_SD_Init+0xb0>
  {
    return HAL_ERROR;
 8004ef4:	2301      	movs	r3, #1
 8004ef6:	e026      	b.n	8004f46 <HAL_SD_Init+0xfe>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 8004ef8:	f7fc f964 	bl	80011c4 <HAL_GetTick>
 8004efc:	61f8      	str	r0, [r7, #28]
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8004efe:	e011      	b.n	8004f24 <HAL_SD_Init+0xdc>
  {
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8004f00:	f7fc f960 	bl	80011c4 <HAL_GetTick>
 8004f04:	4602      	mov	r2, r0
 8004f06:	69fb      	ldr	r3, [r7, #28]
 8004f08:	1ad3      	subs	r3, r2, r3
 8004f0a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004f0e:	d109      	bne.n	8004f24 <HAL_SD_Init+0xdc>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8004f16:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	2201      	movs	r2, #1
 8004f1c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      return HAL_TIMEOUT;
 8004f20:	2303      	movs	r3, #3
 8004f22:	e010      	b.n	8004f46 <HAL_SD_Init+0xfe>
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8004f24:	6878      	ldr	r0, [r7, #4]
 8004f26:	f000 fc11 	bl	800574c <HAL_SD_GetCardState>
 8004f2a:	4603      	mov	r3, r0
 8004f2c:	2b04      	cmp	r3, #4
 8004f2e:	d1e7      	bne.n	8004f00 <HAL_SD_Init+0xb8>
    }
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	2200      	movs	r2, #0
 8004f34:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	2200      	movs	r2, #0
 8004f3a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	2201      	movs	r2, #1
 8004f40:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return HAL_OK;
 8004f44:	2300      	movs	r3, #0
}
 8004f46:	4618      	mov	r0, r3
 8004f48:	3728      	adds	r7, #40	@ 0x28
 8004f4a:	46bd      	mov	sp, r7
 8004f4c:	bd80      	pop	{r7, pc}
	...

08004f50 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8004f50:	b590      	push	{r4, r7, lr}
 8004f52:	b08d      	sub	sp, #52	@ 0x34
 8004f54:	af02      	add	r7, sp, #8
 8004f56:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8004f58:	2300      	movs	r3, #0
 8004f5a:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8004f5c:	2300      	movs	r3, #0
 8004f5e:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8004f60:	2300      	movs	r3, #0
 8004f62:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8004f64:	2300      	movs	r3, #0
 8004f66:	61bb      	str	r3, [r7, #24]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 8004f68:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 8004f6c:	f7fe fd26 	bl	80039bc <HAL_RCCEx_GetPeriphCLKFreq>
 8004f70:	6278      	str	r0, [r7, #36]	@ 0x24
  if (sdmmc_clk == 0U)
 8004f72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d109      	bne.n	8004f8c <HAL_SD_InitCard+0x3c>
  {
    hsd->State = HAL_SD_STATE_READY;
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	2201      	movs	r2, #1
 8004f7c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8004f86:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8004f88:	2301      	movs	r3, #1
 8004f8a:	e06a      	b.n	8005062 <HAL_SD_InitCard+0x112>
  }
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 8004f8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f8e:	0a1b      	lsrs	r3, r3, #8
 8004f90:	4a36      	ldr	r2, [pc, #216]	@ (800506c <HAL_SD_InitCard+0x11c>)
 8004f92:	fba2 2303 	umull	r2, r3, r2, r3
 8004f96:	091b      	lsrs	r3, r3, #4
 8004f98:	61fb      	str	r3, [r7, #28]
  /* Set Transceiver polarity */
  hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
#endif /* USE_SD_TRANSCEIVER  */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681c      	ldr	r4, [r3, #0]
 8004f9e:	466a      	mov	r2, sp
 8004fa0:	f107 0318 	add.w	r3, r7, #24
 8004fa4:	e893 0003 	ldmia.w	r3, {r0, r1}
 8004fa8:	e882 0003 	stmia.w	r2, {r0, r1}
 8004fac:	f107 030c 	add.w	r3, r7, #12
 8004fb0:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004fb2:	4620      	mov	r0, r4
 8004fb4:	f001 ffb8 	bl	8006f28 <SDMMC_Init>

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	4618      	mov	r0, r3
 8004fbe:	f001 ffea 	bl	8006f96 <SDMMC_PowerState_ON>

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
  sdmmc_clk = sdmmc_clk / (2U * Init.ClockDiv);
 8004fc2:	69fb      	ldr	r3, [r7, #28]
 8004fc4:	005b      	lsls	r3, r3, #1
 8004fc6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004fc8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004fcc:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_Delay(1U + (74U * 1000U / (sdmmc_clk)));
 8004fce:	4a28      	ldr	r2, [pc, #160]	@ (8005070 <HAL_SD_InitCard+0x120>)
 8004fd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fd2:	fbb2 f3f3 	udiv	r3, r2, r3
 8004fd6:	3301      	adds	r3, #1
 8004fd8:	4618      	mov	r0, r3
 8004fda:	f7fc f8ff 	bl	80011dc <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8004fde:	6878      	ldr	r0, [r7, #4]
 8004fe0:	f000 fc90 	bl	8005904 <SD_PowerON>
 8004fe4:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8004fe6:	6a3b      	ldr	r3, [r7, #32]
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d00b      	beq.n	8005004 <HAL_SD_InitCard+0xb4>
  {
    hsd->State = HAL_SD_STATE_READY;
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	2201      	movs	r2, #1
 8004ff0:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hsd->ErrorCode |= errorstate;
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004ff8:	6a3b      	ldr	r3, [r7, #32]
 8004ffa:	431a      	orrs	r2, r3
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8005000:	2301      	movs	r3, #1
 8005002:	e02e      	b.n	8005062 <HAL_SD_InitCard+0x112>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8005004:	6878      	ldr	r0, [r7, #4]
 8005006:	f000 fbc1 	bl	800578c <SD_InitCard>
 800500a:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800500c:	6a3b      	ldr	r3, [r7, #32]
 800500e:	2b00      	cmp	r3, #0
 8005010:	d00b      	beq.n	800502a <HAL_SD_InitCard+0xda>
  {
    hsd->State = HAL_SD_STATE_READY;
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	2201      	movs	r2, #1
 8005016:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hsd->ErrorCode |= errorstate;
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800501e:	6a3b      	ldr	r3, [r7, #32]
 8005020:	431a      	orrs	r2, r3
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8005026:	2301      	movs	r3, #1
 8005028:	e01b      	b.n	8005062 <HAL_SD_InitCard+0x112>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8005032:	4618      	mov	r0, r3
 8005034:	f002 f844 	bl	80070c0 <SDMMC_CmdBlockLength>
 8005038:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800503a:	6a3b      	ldr	r3, [r7, #32]
 800503c:	2b00      	cmp	r3, #0
 800503e:	d00f      	beq.n	8005060 <HAL_SD_InitCard+0x110>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	4a0b      	ldr	r2, [pc, #44]	@ (8005074 <HAL_SD_InitCard+0x124>)
 8005046:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800504c:	6a3b      	ldr	r3, [r7, #32]
 800504e:	431a      	orrs	r2, r3
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	2201      	movs	r2, #1
 8005058:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    return HAL_ERROR;
 800505c:	2301      	movs	r3, #1
 800505e:	e000      	b.n	8005062 <HAL_SD_InitCard+0x112>
  }

  return HAL_OK;
 8005060:	2300      	movs	r3, #0
}
 8005062:	4618      	mov	r0, r3
 8005064:	372c      	adds	r7, #44	@ 0x2c
 8005066:	46bd      	mov	sp, r7
 8005068:	bd90      	pop	{r4, r7, pc}
 800506a:	bf00      	nop
 800506c:	014f8b59 	.word	0x014f8b59
 8005070:	00012110 	.word	0x00012110
 8005074:	1fe00fff 	.word	0x1fe00fff

08005078 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8005078:	b480      	push	{r7}
 800507a:	b083      	sub	sp, #12
 800507c:	af00      	add	r7, sp, #0
 800507e:	6078      	str	r0, [r7, #4]
 8005080:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005086:	0f9b      	lsrs	r3, r3, #30
 8005088:	b2da      	uxtb	r2, r3
 800508a:	683b      	ldr	r3, [r7, #0]
 800508c:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005092:	0e9b      	lsrs	r3, r3, #26
 8005094:	b2db      	uxtb	r3, r3
 8005096:	f003 030f 	and.w	r3, r3, #15
 800509a:	b2da      	uxtb	r2, r3
 800509c:	683b      	ldr	r3, [r7, #0]
 800509e:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80050a4:	0e1b      	lsrs	r3, r3, #24
 80050a6:	b2db      	uxtb	r3, r3
 80050a8:	f003 0303 	and.w	r3, r3, #3
 80050ac:	b2da      	uxtb	r2, r3
 80050ae:	683b      	ldr	r3, [r7, #0]
 80050b0:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80050b6:	0c1b      	lsrs	r3, r3, #16
 80050b8:	b2da      	uxtb	r2, r3
 80050ba:	683b      	ldr	r3, [r7, #0]
 80050bc:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80050c2:	0a1b      	lsrs	r3, r3, #8
 80050c4:	b2da      	uxtb	r2, r3
 80050c6:	683b      	ldr	r3, [r7, #0]
 80050c8:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80050ce:	b2da      	uxtb	r2, r3
 80050d0:	683b      	ldr	r3, [r7, #0]
 80050d2:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80050d8:	0d1b      	lsrs	r3, r3, #20
 80050da:	b29a      	uxth	r2, r3
 80050dc:	683b      	ldr	r3, [r7, #0]
 80050de:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80050e4:	0c1b      	lsrs	r3, r3, #16
 80050e6:	b2db      	uxtb	r3, r3
 80050e8:	f003 030f 	and.w	r3, r3, #15
 80050ec:	b2da      	uxtb	r2, r3
 80050ee:	683b      	ldr	r3, [r7, #0]
 80050f0:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80050f6:	0bdb      	lsrs	r3, r3, #15
 80050f8:	b2db      	uxtb	r3, r3
 80050fa:	f003 0301 	and.w	r3, r3, #1
 80050fe:	b2da      	uxtb	r2, r3
 8005100:	683b      	ldr	r3, [r7, #0]
 8005102:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005108:	0b9b      	lsrs	r3, r3, #14
 800510a:	b2db      	uxtb	r3, r3
 800510c:	f003 0301 	and.w	r3, r3, #1
 8005110:	b2da      	uxtb	r2, r3
 8005112:	683b      	ldr	r3, [r7, #0]
 8005114:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800511a:	0b5b      	lsrs	r3, r3, #13
 800511c:	b2db      	uxtb	r3, r3
 800511e:	f003 0301 	and.w	r3, r3, #1
 8005122:	b2da      	uxtb	r2, r3
 8005124:	683b      	ldr	r3, [r7, #0]
 8005126:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800512c:	0b1b      	lsrs	r3, r3, #12
 800512e:	b2db      	uxtb	r3, r3
 8005130:	f003 0301 	and.w	r3, r3, #1
 8005134:	b2da      	uxtb	r2, r3
 8005136:	683b      	ldr	r3, [r7, #0]
 8005138:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800513a:	683b      	ldr	r3, [r7, #0]
 800513c:	2200      	movs	r2, #0
 800513e:	735a      	strb	r2, [r3, #13]

  if (hsd->SdCard.CardType == CARD_SDSC)
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005144:	2b00      	cmp	r3, #0
 8005146:	d163      	bne.n	8005210 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800514c:	009a      	lsls	r2, r3, #2
 800514e:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8005152:	4013      	ands	r3, r2
 8005154:	687a      	ldr	r2, [r7, #4]
 8005156:	6e52      	ldr	r2, [r2, #100]	@ 0x64
 8005158:	0f92      	lsrs	r2, r2, #30
 800515a:	431a      	orrs	r2, r3
 800515c:	683b      	ldr	r3, [r7, #0]
 800515e:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005164:	0edb      	lsrs	r3, r3, #27
 8005166:	b2db      	uxtb	r3, r3
 8005168:	f003 0307 	and.w	r3, r3, #7
 800516c:	b2da      	uxtb	r2, r3
 800516e:	683b      	ldr	r3, [r7, #0]
 8005170:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005176:	0e1b      	lsrs	r3, r3, #24
 8005178:	b2db      	uxtb	r3, r3
 800517a:	f003 0307 	and.w	r3, r3, #7
 800517e:	b2da      	uxtb	r2, r3
 8005180:	683b      	ldr	r3, [r7, #0]
 8005182:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005188:	0d5b      	lsrs	r3, r3, #21
 800518a:	b2db      	uxtb	r3, r3
 800518c:	f003 0307 	and.w	r3, r3, #7
 8005190:	b2da      	uxtb	r2, r3
 8005192:	683b      	ldr	r3, [r7, #0]
 8005194:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800519a:	0c9b      	lsrs	r3, r3, #18
 800519c:	b2db      	uxtb	r3, r3
 800519e:	f003 0307 	and.w	r3, r3, #7
 80051a2:	b2da      	uxtb	r2, r3
 80051a4:	683b      	ldr	r3, [r7, #0]
 80051a6:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80051ac:	0bdb      	lsrs	r3, r3, #15
 80051ae:	b2db      	uxtb	r3, r3
 80051b0:	f003 0307 	and.w	r3, r3, #7
 80051b4:	b2da      	uxtb	r2, r3
 80051b6:	683b      	ldr	r3, [r7, #0]
 80051b8:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 80051ba:	683b      	ldr	r3, [r7, #0]
 80051bc:	691b      	ldr	r3, [r3, #16]
 80051be:	1c5a      	adds	r2, r3, #1
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	649a      	str	r2, [r3, #72]	@ 0x48
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 80051c4:	683b      	ldr	r3, [r7, #0]
 80051c6:	7e1b      	ldrb	r3, [r3, #24]
 80051c8:	b2db      	uxtb	r3, r3
 80051ca:	f003 0307 	and.w	r3, r3, #7
 80051ce:	3302      	adds	r3, #2
 80051d0:	2201      	movs	r2, #1
 80051d2:	fa02 f303 	lsl.w	r3, r2, r3
 80051d6:	687a      	ldr	r2, [r7, #4]
 80051d8:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80051da:	fb03 f202 	mul.w	r2, r3, r2
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	649a      	str	r2, [r3, #72]	@ 0x48
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 80051e2:	683b      	ldr	r3, [r7, #0]
 80051e4:	7a1b      	ldrb	r3, [r3, #8]
 80051e6:	b2db      	uxtb	r3, r3
 80051e8:	f003 030f 	and.w	r3, r3, #15
 80051ec:	2201      	movs	r2, #1
 80051ee:	409a      	lsls	r2, r3
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	64da      	str	r2, [r3, #76]	@ 0x4c

    hsd->SdCard.LogBlockNbr = (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80051f8:	687a      	ldr	r2, [r7, #4]
 80051fa:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80051fc:	0a52      	lsrs	r2, r2, #9
 80051fe:	fb03 f202 	mul.w	r2, r3, r2
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	651a      	str	r2, [r3, #80]	@ 0x50
    hsd->SdCard.LogBlockSize = 512U;
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800520c:	655a      	str	r2, [r3, #84]	@ 0x54
 800520e:	e031      	b.n	8005274 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005214:	2b01      	cmp	r3, #1
 8005216:	d11d      	bne.n	8005254 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800521c:	041b      	lsls	r3, r3, #16
 800521e:	f403 127c 	and.w	r2, r3, #4128768	@ 0x3f0000
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005226:	0c1b      	lsrs	r3, r3, #16
 8005228:	431a      	orrs	r2, r3
 800522a:	683b      	ldr	r3, [r7, #0]
 800522c:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800522e:	683b      	ldr	r3, [r7, #0]
 8005230:	691b      	ldr	r3, [r3, #16]
 8005232:	3301      	adds	r3, #1
 8005234:	029a      	lsls	r2, r3, #10
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	649a      	str	r2, [r3, #72]	@ 0x48
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	651a      	str	r2, [r3, #80]	@ 0x50
    hsd->SdCard.BlockSize = 512U;
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005248:	64da      	str	r2, [r3, #76]	@ 0x4c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	655a      	str	r2, [r3, #84]	@ 0x54
 8005252:	e00f      	b.n	8005274 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	4a58      	ldr	r2, [pc, #352]	@ (80053bc <HAL_SD_GetCardCSD+0x344>)
 800525a:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005260:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	2201      	movs	r2, #1
 800526c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    return HAL_ERROR;
 8005270:	2301      	movs	r3, #1
 8005272:	e09d      	b.n	80053b0 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005278:	0b9b      	lsrs	r3, r3, #14
 800527a:	b2db      	uxtb	r3, r3
 800527c:	f003 0301 	and.w	r3, r3, #1
 8005280:	b2da      	uxtb	r2, r3
 8005282:	683b      	ldr	r3, [r7, #0]
 8005284:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800528a:	09db      	lsrs	r3, r3, #7
 800528c:	b2db      	uxtb	r3, r3
 800528e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005292:	b2da      	uxtb	r2, r3
 8005294:	683b      	ldr	r3, [r7, #0]
 8005296:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800529c:	b2db      	uxtb	r3, r3
 800529e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80052a2:	b2da      	uxtb	r2, r3
 80052a4:	683b      	ldr	r3, [r7, #0]
 80052a6:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80052ac:	0fdb      	lsrs	r3, r3, #31
 80052ae:	b2da      	uxtb	r2, r3
 80052b0:	683b      	ldr	r3, [r7, #0]
 80052b2:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80052b8:	0f5b      	lsrs	r3, r3, #29
 80052ba:	b2db      	uxtb	r3, r3
 80052bc:	f003 0303 	and.w	r3, r3, #3
 80052c0:	b2da      	uxtb	r2, r3
 80052c2:	683b      	ldr	r3, [r7, #0]
 80052c4:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80052ca:	0e9b      	lsrs	r3, r3, #26
 80052cc:	b2db      	uxtb	r3, r3
 80052ce:	f003 0307 	and.w	r3, r3, #7
 80052d2:	b2da      	uxtb	r2, r3
 80052d4:	683b      	ldr	r3, [r7, #0]
 80052d6:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen = (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80052dc:	0d9b      	lsrs	r3, r3, #22
 80052de:	b2db      	uxtb	r3, r3
 80052e0:	f003 030f 	and.w	r3, r3, #15
 80052e4:	b2da      	uxtb	r2, r3
 80052e6:	683b      	ldr	r3, [r7, #0]
 80052e8:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80052ee:	0d5b      	lsrs	r3, r3, #21
 80052f0:	b2db      	uxtb	r3, r3
 80052f2:	f003 0301 	and.w	r3, r3, #1
 80052f6:	b2da      	uxtb	r2, r3
 80052f8:	683b      	ldr	r3, [r7, #0]
 80052fa:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 80052fe:	683b      	ldr	r3, [r7, #0]
 8005300:	2200      	movs	r2, #0
 8005302:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800530a:	0c1b      	lsrs	r3, r3, #16
 800530c:	b2db      	uxtb	r3, r3
 800530e:	f003 0301 	and.w	r3, r3, #1
 8005312:	b2da      	uxtb	r2, r3
 8005314:	683b      	ldr	r3, [r7, #0]
 8005316:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800531e:	0bdb      	lsrs	r3, r3, #15
 8005320:	b2db      	uxtb	r3, r3
 8005322:	f003 0301 	and.w	r3, r3, #1
 8005326:	b2da      	uxtb	r2, r3
 8005328:	683b      	ldr	r3, [r7, #0]
 800532a:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005332:	0b9b      	lsrs	r3, r3, #14
 8005334:	b2db      	uxtb	r3, r3
 8005336:	f003 0301 	and.w	r3, r3, #1
 800533a:	b2da      	uxtb	r2, r3
 800533c:	683b      	ldr	r3, [r7, #0]
 800533e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005346:	0b5b      	lsrs	r3, r3, #13
 8005348:	b2db      	uxtb	r3, r3
 800534a:	f003 0301 	and.w	r3, r3, #1
 800534e:	b2da      	uxtb	r2, r3
 8005350:	683b      	ldr	r3, [r7, #0]
 8005352:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800535a:	0b1b      	lsrs	r3, r3, #12
 800535c:	b2db      	uxtb	r3, r3
 800535e:	f003 0301 	and.w	r3, r3, #1
 8005362:	b2da      	uxtb	r2, r3
 8005364:	683b      	ldr	r3, [r7, #0]
 8005366:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800536e:	0a9b      	lsrs	r3, r3, #10
 8005370:	b2db      	uxtb	r3, r3
 8005372:	f003 0303 	and.w	r3, r3, #3
 8005376:	b2da      	uxtb	r2, r3
 8005378:	683b      	ldr	r3, [r7, #0]
 800537a:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27

  pCSD->ECC = (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005382:	0a1b      	lsrs	r3, r3, #8
 8005384:	b2db      	uxtb	r3, r3
 8005386:	f003 0303 	and.w	r3, r3, #3
 800538a:	b2da      	uxtb	r2, r3
 800538c:	683b      	ldr	r3, [r7, #0]
 800538e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005396:	085b      	lsrs	r3, r3, #1
 8005398:	b2db      	uxtb	r3, r3
 800539a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800539e:	b2da      	uxtb	r2, r3
 80053a0:	683b      	ldr	r3, [r7, #0]
 80053a2:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  pCSD->Reserved4 = 1;
 80053a6:	683b      	ldr	r3, [r7, #0]
 80053a8:	2201      	movs	r2, #1
 80053aa:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

  return HAL_OK;
 80053ae:	2300      	movs	r3, #0
}
 80053b0:	4618      	mov	r0, r3
 80053b2:	370c      	adds	r7, #12
 80053b4:	46bd      	mov	sp, r7
 80053b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ba:	4770      	bx	lr
 80053bc:	1fe00fff 	.word	0x1fe00fff

080053c0 <HAL_SD_GetCardStatus>:
  * @param  pStatus: Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 80053c0:	b580      	push	{r7, lr}
 80053c2:	b094      	sub	sp, #80	@ 0x50
 80053c4:	af00      	add	r7, sp, #0
 80053c6:	6078      	str	r0, [r7, #4]
 80053c8:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 80053ca:	2300      	movs	r3, #0
 80053cc:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

  errorstate = SD_SendSDStatus(hsd, sd_status);
 80053d0:	f107 0308 	add.w	r3, r7, #8
 80053d4:	4619      	mov	r1, r3
 80053d6:	6878      	ldr	r0, [r7, #4]
 80053d8:	f000 fb1e 	bl	8005a18 <SD_SendSDStatus>
 80053dc:	64b8      	str	r0, [r7, #72]	@ 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 80053de:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d011      	beq.n	8005408 <HAL_SD_GetCardStatus+0x48>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	4a4f      	ldr	r2, [pc, #316]	@ (8005528 <HAL_SD_GetCardStatus+0x168>)
 80053ea:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80053f0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80053f2:	431a      	orrs	r2, r3
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	2201      	movs	r2, #1
 80053fc:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    status = HAL_ERROR;
 8005400:	2301      	movs	r3, #1
 8005402:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 8005406:	e070      	b.n	80054ea <HAL_SD_GetCardStatus+0x12a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 8005408:	68bb      	ldr	r3, [r7, #8]
 800540a:	099b      	lsrs	r3, r3, #6
 800540c:	b2db      	uxtb	r3, r3
 800540e:	f003 0303 	and.w	r3, r3, #3
 8005412:	b2da      	uxtb	r2, r3
 8005414:	683b      	ldr	r3, [r7, #0]
 8005416:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 8005418:	68bb      	ldr	r3, [r7, #8]
 800541a:	095b      	lsrs	r3, r3, #5
 800541c:	b2db      	uxtb	r3, r3
 800541e:	f003 0301 	and.w	r3, r3, #1
 8005422:	b2da      	uxtb	r2, r3
 8005424:	683b      	ldr	r3, [r7, #0]
 8005426:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 8005428:	68bb      	ldr	r3, [r7, #8]
 800542a:	0a1b      	lsrs	r3, r3, #8
 800542c:	b29b      	uxth	r3, r3
 800542e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8005432:	b29a      	uxth	r2, r3
 8005434:	68bb      	ldr	r3, [r7, #8]
 8005436:	0e1b      	lsrs	r3, r3, #24
 8005438:	b29b      	uxth	r3, r3
 800543a:	4313      	orrs	r3, r2
 800543c:	b29a      	uxth	r2, r3
 800543e:	683b      	ldr	r3, [r7, #0]
 8005440:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	061a      	lsls	r2, r3, #24
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	021b      	lsls	r3, r3, #8
 800544a:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800544e:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	0a1b      	lsrs	r3, r3, #8
 8005454:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8005458:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	0e1b      	lsrs	r3, r3, #24
 800545e:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8005460:	683b      	ldr	r3, [r7, #0]
 8005462:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 8005464:	693b      	ldr	r3, [r7, #16]
 8005466:	b2da      	uxtb	r2, r3
 8005468:	683b      	ldr	r3, [r7, #0]
 800546a:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 800546c:	693b      	ldr	r3, [r7, #16]
 800546e:	0a1b      	lsrs	r3, r3, #8
 8005470:	b2da      	uxtb	r2, r3
 8005472:	683b      	ldr	r3, [r7, #0]
 8005474:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 8005476:	693b      	ldr	r3, [r7, #16]
 8005478:	0d1b      	lsrs	r3, r3, #20
 800547a:	b2db      	uxtb	r3, r3
 800547c:	f003 030f 	and.w	r3, r3, #15
 8005480:	b2da      	uxtb	r2, r3
 8005482:	683b      	ldr	r3, [r7, #0]
 8005484:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 8005486:	693b      	ldr	r3, [r7, #16]
 8005488:	0c1b      	lsrs	r3, r3, #16
 800548a:	b29b      	uxth	r3, r3
 800548c:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8005490:	b29a      	uxth	r2, r3
 8005492:	697b      	ldr	r3, [r7, #20]
 8005494:	b29b      	uxth	r3, r3
 8005496:	b2db      	uxtb	r3, r3
 8005498:	b29b      	uxth	r3, r3
 800549a:	4313      	orrs	r3, r2
 800549c:	b29a      	uxth	r2, r3
 800549e:	683b      	ldr	r3, [r7, #0]
 80054a0:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 80054a2:	697b      	ldr	r3, [r7, #20]
 80054a4:	0a9b      	lsrs	r3, r3, #10
 80054a6:	b2db      	uxtb	r3, r3
 80054a8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80054ac:	b2da      	uxtb	r2, r3
 80054ae:	683b      	ldr	r3, [r7, #0]
 80054b0:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 80054b2:	697b      	ldr	r3, [r7, #20]
 80054b4:	0a1b      	lsrs	r3, r3, #8
 80054b6:	b2db      	uxtb	r3, r3
 80054b8:	f003 0303 	and.w	r3, r3, #3
 80054bc:	b2da      	uxtb	r2, r3
 80054be:	683b      	ldr	r3, [r7, #0]
 80054c0:	73da      	strb	r2, [r3, #15]

    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 80054c2:	697b      	ldr	r3, [r7, #20]
 80054c4:	091b      	lsrs	r3, r3, #4
 80054c6:	b2db      	uxtb	r3, r3
 80054c8:	f003 030f 	and.w	r3, r3, #15
 80054cc:	b2da      	uxtb	r2, r3
 80054ce:	683b      	ldr	r3, [r7, #0]
 80054d0:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 80054d2:	697b      	ldr	r3, [r7, #20]
 80054d4:	b2db      	uxtb	r3, r3
 80054d6:	f003 030f 	and.w	r3, r3, #15
 80054da:	b2da      	uxtb	r2, r3
 80054dc:	683b      	ldr	r3, [r7, #0]
 80054de:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 80054e0:	69bb      	ldr	r3, [r7, #24]
 80054e2:	0e1b      	lsrs	r3, r3, #24
 80054e4:	b2da      	uxtb	r2, r3
 80054e6:	683b      	ldr	r3, [r7, #0]
 80054e8:	749a      	strb	r2, [r3, #18]
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80054f2:	4618      	mov	r0, r3
 80054f4:	f001 fde4 	bl	80070c0 <SDMMC_CmdBlockLength>
 80054f8:	64b8      	str	r0, [r7, #72]	@ 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 80054fa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d00d      	beq.n	800551c <HAL_SD_GetCardStatus+0x15c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	4a08      	ldr	r2, [pc, #32]	@ (8005528 <HAL_SD_GetCardStatus+0x168>)
 8005506:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode = errorstate;
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800550c:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	2201      	movs	r2, #1
 8005512:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    status = HAL_ERROR;
 8005516:	2301      	movs	r3, #1
 8005518:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
  }

  return status;
 800551c:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
}
 8005520:	4618      	mov	r0, r3
 8005522:	3750      	adds	r7, #80	@ 0x50
 8005524:	46bd      	mov	sp, r7
 8005526:	bd80      	pop	{r7, pc}
 8005528:	1fe00fff 	.word	0x1fe00fff

0800552c <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800552c:	b590      	push	{r4, r7, lr}
 800552e:	b08d      	sub	sp, #52	@ 0x34
 8005530:	af02      	add	r7, sp, #8
 8005532:	6078      	str	r0, [r7, #4]
 8005534:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk;
  HAL_StatusTypeDef status = HAL_OK;
 8005536:	2300      	movs	r3, #0
 8005538:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	2203      	movs	r2, #3
 8005540:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  if (hsd->SdCard.CardType != CARD_SECURED)
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005548:	2b03      	cmp	r3, #3
 800554a:	d02e      	beq.n	80055aa <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if (WideMode == SDMMC_BUS_WIDE_8B)
 800554c:	683b      	ldr	r3, [r7, #0]
 800554e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005552:	d106      	bne.n	8005562 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005558:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	635a      	str	r2, [r3, #52]	@ 0x34
 8005560:	e029      	b.n	80055b6 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_4B)
 8005562:	683b      	ldr	r3, [r7, #0]
 8005564:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005568:	d10a      	bne.n	8005580 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800556a:	6878      	ldr	r0, [r7, #4]
 800556c:	f000 fb4c 	bl	8005c08 <SD_WideBus_Enable>
 8005570:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005576:	6a3b      	ldr	r3, [r7, #32]
 8005578:	431a      	orrs	r2, r3
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	635a      	str	r2, [r3, #52]	@ 0x34
 800557e:	e01a      	b.n	80055b6 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_1B)
 8005580:	683b      	ldr	r3, [r7, #0]
 8005582:	2b00      	cmp	r3, #0
 8005584:	d10a      	bne.n	800559c <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8005586:	6878      	ldr	r0, [r7, #4]
 8005588:	f000 fb89 	bl	8005c9e <SD_WideBus_Disable>
 800558c:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005592:	6a3b      	ldr	r3, [r7, #32]
 8005594:	431a      	orrs	r2, r3
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	635a      	str	r2, [r3, #52]	@ 0x34
 800559a:	e00c      	b.n	80055b6 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80055a0:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	635a      	str	r2, [r3, #52]	@ 0x34
 80055a8:	e005      	b.n	80055b6 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80055ae:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d007      	beq.n	80055ce <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	4a5e      	ldr	r2, [pc, #376]	@ (800573c <HAL_SD_ConfigWideBusOperation+0x210>)
 80055c4:	639a      	str	r2, [r3, #56]	@ 0x38
    status = HAL_ERROR;
 80055c6:	2301      	movs	r3, #1
 80055c8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80055cc:	e094      	b.n	80056f8 <HAL_SD_ConfigWideBusOperation+0x1cc>
  }
  else
  {
    sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 80055ce:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 80055d2:	f7fe f9f3 	bl	80039bc <HAL_RCCEx_GetPeriphCLKFreq>
 80055d6:	61f8      	str	r0, [r7, #28]
    if (sdmmc_clk != 0U)
 80055d8:	69fb      	ldr	r3, [r7, #28]
 80055da:	2b00      	cmp	r3, #0
 80055dc:	f000 8083 	beq.w	80056e6 <HAL_SD_ConfigWideBusOperation+0x1ba>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	685b      	ldr	r3, [r3, #4]
 80055e4:	60bb      	str	r3, [r7, #8]
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	689b      	ldr	r3, [r3, #8]
 80055ea:	60fb      	str	r3, [r7, #12]
      Init.BusWide             = WideMode;
 80055ec:	683b      	ldr	r3, [r7, #0]
 80055ee:	613b      	str	r3, [r7, #16]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	691b      	ldr	r3, [r3, #16]
 80055f4:	617b      	str	r3, [r7, #20]

      /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	695a      	ldr	r2, [r3, #20]
 80055fa:	69fb      	ldr	r3, [r7, #28]
 80055fc:	4950      	ldr	r1, [pc, #320]	@ (8005740 <HAL_SD_ConfigWideBusOperation+0x214>)
 80055fe:	fba1 1303 	umull	r1, r3, r1, r3
 8005602:	0e1b      	lsrs	r3, r3, #24
 8005604:	429a      	cmp	r2, r3
 8005606:	d303      	bcc.n	8005610 <HAL_SD_ConfigWideBusOperation+0xe4>
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	695b      	ldr	r3, [r3, #20]
 800560c:	61bb      	str	r3, [r7, #24]
 800560e:	e05a      	b.n	80056c6 <HAL_SD_ConfigWideBusOperation+0x19a>
      }
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005614:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005618:	d103      	bne.n	8005622 <HAL_SD_ConfigWideBusOperation+0xf6>
      {
        /* UltraHigh speed SD card,user Clock div */
        Init.ClockDiv = hsd->Init.ClockDiv;
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	695b      	ldr	r3, [r3, #20]
 800561e:	61bb      	str	r3, [r7, #24]
 8005620:	e051      	b.n	80056c6 <HAL_SD_ConfigWideBusOperation+0x19a>
      }
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005626:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800562a:	d126      	bne.n	800567a <HAL_SD_ConfigWideBusOperation+0x14e>
      {
        /* High speed SD card, Max Frequency = 50Mhz */
        if (hsd->Init.ClockDiv == 0U)
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	695b      	ldr	r3, [r3, #20]
 8005630:	2b00      	cmp	r3, #0
 8005632:	d10e      	bne.n	8005652 <HAL_SD_ConfigWideBusOperation+0x126>
        {
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
 8005634:	69fb      	ldr	r3, [r7, #28]
 8005636:	4a43      	ldr	r2, [pc, #268]	@ (8005744 <HAL_SD_ConfigWideBusOperation+0x218>)
 8005638:	4293      	cmp	r3, r2
 800563a:	d906      	bls.n	800564a <HAL_SD_ConfigWideBusOperation+0x11e>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 800563c:	69fb      	ldr	r3, [r7, #28]
 800563e:	4a40      	ldr	r2, [pc, #256]	@ (8005740 <HAL_SD_ConfigWideBusOperation+0x214>)
 8005640:	fba2 2303 	umull	r2, r3, r2, r3
 8005644:	0e5b      	lsrs	r3, r3, #25
 8005646:	61bb      	str	r3, [r7, #24]
 8005648:	e03d      	b.n	80056c6 <HAL_SD_ConfigWideBusOperation+0x19a>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	695b      	ldr	r3, [r3, #20]
 800564e:	61bb      	str	r3, [r7, #24]
 8005650:	e039      	b.n	80056c6 <HAL_SD_ConfigWideBusOperation+0x19a>
          }
        }
        else
        {
          if ((sdmmc_clk/(2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	695b      	ldr	r3, [r3, #20]
 8005656:	005b      	lsls	r3, r3, #1
 8005658:	69fa      	ldr	r2, [r7, #28]
 800565a:	fbb2 f3f3 	udiv	r3, r2, r3
 800565e:	4a39      	ldr	r2, [pc, #228]	@ (8005744 <HAL_SD_ConfigWideBusOperation+0x218>)
 8005660:	4293      	cmp	r3, r2
 8005662:	d906      	bls.n	8005672 <HAL_SD_ConfigWideBusOperation+0x146>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 8005664:	69fb      	ldr	r3, [r7, #28]
 8005666:	4a36      	ldr	r2, [pc, #216]	@ (8005740 <HAL_SD_ConfigWideBusOperation+0x214>)
 8005668:	fba2 2303 	umull	r2, r3, r2, r3
 800566c:	0e5b      	lsrs	r3, r3, #25
 800566e:	61bb      	str	r3, [r7, #24]
 8005670:	e029      	b.n	80056c6 <HAL_SD_ConfigWideBusOperation+0x19a>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	695b      	ldr	r3, [r3, #20]
 8005676:	61bb      	str	r3, [r7, #24]
 8005678:	e025      	b.n	80056c6 <HAL_SD_ConfigWideBusOperation+0x19a>
        }
      }
      else
      {
        /* No High speed SD card, Max Frequency = 25Mhz */
        if (hsd->Init.ClockDiv == 0U)
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	695b      	ldr	r3, [r3, #20]
 800567e:	2b00      	cmp	r3, #0
 8005680:	d10e      	bne.n	80056a0 <HAL_SD_ConfigWideBusOperation+0x174>
        {
          if (sdmmc_clk > SD_NORMAL_SPEED_FREQ)
 8005682:	69fb      	ldr	r3, [r7, #28]
 8005684:	4a30      	ldr	r2, [pc, #192]	@ (8005748 <HAL_SD_ConfigWideBusOperation+0x21c>)
 8005686:	4293      	cmp	r3, r2
 8005688:	d906      	bls.n	8005698 <HAL_SD_ConfigWideBusOperation+0x16c>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 800568a:	69fb      	ldr	r3, [r7, #28]
 800568c:	4a2c      	ldr	r2, [pc, #176]	@ (8005740 <HAL_SD_ConfigWideBusOperation+0x214>)
 800568e:	fba2 2303 	umull	r2, r3, r2, r3
 8005692:	0e1b      	lsrs	r3, r3, #24
 8005694:	61bb      	str	r3, [r7, #24]
 8005696:	e016      	b.n	80056c6 <HAL_SD_ConfigWideBusOperation+0x19a>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	695b      	ldr	r3, [r3, #20]
 800569c:	61bb      	str	r3, [r7, #24]
 800569e:	e012      	b.n	80056c6 <HAL_SD_ConfigWideBusOperation+0x19a>
          }
        }
        else
        {
          if ((sdmmc_clk/(2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	695b      	ldr	r3, [r3, #20]
 80056a4:	005b      	lsls	r3, r3, #1
 80056a6:	69fa      	ldr	r2, [r7, #28]
 80056a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80056ac:	4a26      	ldr	r2, [pc, #152]	@ (8005748 <HAL_SD_ConfigWideBusOperation+0x21c>)
 80056ae:	4293      	cmp	r3, r2
 80056b0:	d906      	bls.n	80056c0 <HAL_SD_ConfigWideBusOperation+0x194>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 80056b2:	69fb      	ldr	r3, [r7, #28]
 80056b4:	4a22      	ldr	r2, [pc, #136]	@ (8005740 <HAL_SD_ConfigWideBusOperation+0x214>)
 80056b6:	fba2 2303 	umull	r2, r3, r2, r3
 80056ba:	0e1b      	lsrs	r3, r3, #24
 80056bc:	61bb      	str	r3, [r7, #24]
 80056be:	e002      	b.n	80056c6 <HAL_SD_ConfigWideBusOperation+0x19a>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	695b      	ldr	r3, [r3, #20]
 80056c4:	61bb      	str	r3, [r7, #24]

#if (USE_SD_TRANSCEIVER != 0U)
      Init.TranceiverPresent = hsd->Init.TranceiverPresent;
#endif /* USE_SD_TRANSCEIVER */

      (void)SDMMC_Init(hsd->Instance, Init);
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681c      	ldr	r4, [r3, #0]
 80056ca:	466a      	mov	r2, sp
 80056cc:	f107 0314 	add.w	r3, r7, #20
 80056d0:	e893 0003 	ldmia.w	r3, {r0, r1}
 80056d4:	e882 0003 	stmia.w	r2, {r0, r1}
 80056d8:	f107 0308 	add.w	r3, r7, #8
 80056dc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80056de:	4620      	mov	r0, r4
 80056e0:	f001 fc22 	bl	8006f28 <SDMMC_Init>
 80056e4:	e008      	b.n	80056f8 <HAL_SD_ConfigWideBusOperation+0x1cc>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80056ea:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	635a      	str	r2, [r3, #52]	@ 0x34
      status = HAL_ERROR;
 80056f2:	2301      	movs	r3, #1
 80056f4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8005700:	4618      	mov	r0, r3
 8005702:	f001 fcdd 	bl	80070c0 <SDMMC_CmdBlockLength>
 8005706:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8005708:	6a3b      	ldr	r3, [r7, #32]
 800570a:	2b00      	cmp	r3, #0
 800570c:	d00c      	beq.n	8005728 <HAL_SD_ConfigWideBusOperation+0x1fc>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	4a0a      	ldr	r2, [pc, #40]	@ (800573c <HAL_SD_ConfigWideBusOperation+0x210>)
 8005714:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800571a:	6a3b      	ldr	r3, [r7, #32]
 800571c:	431a      	orrs	r2, r3
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	635a      	str	r2, [r3, #52]	@ 0x34
    status = HAL_ERROR;
 8005722:	2301      	movs	r3, #1
 8005724:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	2201      	movs	r2, #1
 800572c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return status;
 8005730:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8005734:	4618      	mov	r0, r3
 8005736:	372c      	adds	r7, #44	@ 0x2c
 8005738:	46bd      	mov	sp, r7
 800573a:	bd90      	pop	{r4, r7, pc}
 800573c:	1fe00fff 	.word	0x1fe00fff
 8005740:	55e63b89 	.word	0x55e63b89
 8005744:	02faf080 	.word	0x02faf080
 8005748:	017d7840 	.word	0x017d7840

0800574c <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800574c:	b580      	push	{r7, lr}
 800574e:	b086      	sub	sp, #24
 8005750:	af00      	add	r7, sp, #0
 8005752:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8005754:	2300      	movs	r3, #0
 8005756:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8005758:	f107 030c 	add.w	r3, r7, #12
 800575c:	4619      	mov	r1, r3
 800575e:	6878      	ldr	r0, [r7, #4]
 8005760:	f000 fa2a 	bl	8005bb8 <SD_SendStatus>
 8005764:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 8005766:	697b      	ldr	r3, [r7, #20]
 8005768:	2b00      	cmp	r3, #0
 800576a:	d005      	beq.n	8005778 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005770:	697b      	ldr	r3, [r7, #20]
 8005772:	431a      	orrs	r2, r3
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	0a5b      	lsrs	r3, r3, #9
 800577c:	f003 030f 	and.w	r3, r3, #15
 8005780:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8005782:	693b      	ldr	r3, [r7, #16]
}
 8005784:	4618      	mov	r0, r3
 8005786:	3718      	adds	r7, #24
 8005788:	46bd      	mov	sp, r7
 800578a:	bd80      	pop	{r7, pc}

0800578c <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800578c:	b580      	push	{r7, lr}
 800578e:	b090      	sub	sp, #64	@ 0x40
 8005790:	af00      	add	r7, sp, #0
 8005792:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8005794:	2301      	movs	r3, #1
 8005796:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if (SDMMC_GetPowerState(hsd->Instance) == 0U)
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	4618      	mov	r0, r3
 800579e:	f001 fc0b 	bl	8006fb8 <SDMMC_GetPowerState>
 80057a2:	4603      	mov	r3, r0
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d102      	bne.n	80057ae <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80057a8:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 80057ac:	e0a5      	b.n	80058fa <SD_InitCard+0x16e>
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80057b2:	2b03      	cmp	r3, #3
 80057b4:	d02e      	beq.n	8005814 <SD_InitCard+0x88>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	4618      	mov	r0, r3
 80057bc:	f001 fd8c 	bl	80072d8 <SDMMC_CmdSendCID>
 80057c0:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if (errorstate != HAL_SD_ERROR_NONE)
 80057c2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d001      	beq.n	80057cc <SD_InitCard+0x40>
    {
      return errorstate;
 80057c8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80057ca:	e096      	b.n	80058fa <SD_InitCard+0x16e>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	2100      	movs	r1, #0
 80057d2:	4618      	mov	r0, r3
 80057d4:	f001 fc35 	bl	8007042 <SDMMC_GetResponse>
 80057d8:	4602      	mov	r2, r0
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	66da      	str	r2, [r3, #108]	@ 0x6c
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	2104      	movs	r1, #4
 80057e4:	4618      	mov	r0, r3
 80057e6:	f001 fc2c 	bl	8007042 <SDMMC_GetResponse>
 80057ea:	4602      	mov	r2, r0
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	671a      	str	r2, [r3, #112]	@ 0x70
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	2108      	movs	r1, #8
 80057f6:	4618      	mov	r0, r3
 80057f8:	f001 fc23 	bl	8007042 <SDMMC_GetResponse>
 80057fc:	4602      	mov	r2, r0
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	675a      	str	r2, [r3, #116]	@ 0x74
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	210c      	movs	r1, #12
 8005808:	4618      	mov	r0, r3
 800580a:	f001 fc1a 	bl	8007042 <SDMMC_GetResponse>
 800580e:	4602      	mov	r2, r0
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	679a      	str	r2, [r3, #120]	@ 0x78
    }
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005818:	2b03      	cmp	r3, #3
 800581a:	d00d      	beq.n	8005838 <SD_InitCard+0xac>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	f107 020e 	add.w	r2, r7, #14
 8005824:	4611      	mov	r1, r2
 8005826:	4618      	mov	r0, r3
 8005828:	f001 fd95 	bl	8007356 <SDMMC_CmdSetRelAdd>
 800582c:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if (errorstate != HAL_SD_ERROR_NONE)
 800582e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005830:	2b00      	cmp	r3, #0
 8005832:	d001      	beq.n	8005838 <SD_InitCard+0xac>
    {
      return errorstate;
 8005834:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005836:	e060      	b.n	80058fa <SD_InitCard+0x16e>
    }
  }
  if (hsd->SdCard.CardType != CARD_SECURED)
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800583c:	2b03      	cmp	r3, #3
 800583e:	d036      	beq.n	80058ae <SD_InitCard+0x122>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8005840:	89fb      	ldrh	r3, [r7, #14]
 8005842:	461a      	mov	r2, r3
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681a      	ldr	r2, [r3, #0]
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005850:	041b      	lsls	r3, r3, #16
 8005852:	4619      	mov	r1, r3
 8005854:	4610      	mov	r0, r2
 8005856:	f001 fd5e 	bl	8007316 <SDMMC_CmdSendCSD>
 800585a:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if (errorstate != HAL_SD_ERROR_NONE)
 800585c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800585e:	2b00      	cmp	r3, #0
 8005860:	d001      	beq.n	8005866 <SD_InitCard+0xda>
    {
      return errorstate;
 8005862:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005864:	e049      	b.n	80058fa <SD_InitCard+0x16e>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	2100      	movs	r1, #0
 800586c:	4618      	mov	r0, r3
 800586e:	f001 fbe8 	bl	8007042 <SDMMC_GetResponse>
 8005872:	4602      	mov	r2, r0
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	65da      	str	r2, [r3, #92]	@ 0x5c
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	2104      	movs	r1, #4
 800587e:	4618      	mov	r0, r3
 8005880:	f001 fbdf 	bl	8007042 <SDMMC_GetResponse>
 8005884:	4602      	mov	r2, r0
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	661a      	str	r2, [r3, #96]	@ 0x60
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	2108      	movs	r1, #8
 8005890:	4618      	mov	r0, r3
 8005892:	f001 fbd6 	bl	8007042 <SDMMC_GetResponse>
 8005896:	4602      	mov	r2, r0
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	665a      	str	r2, [r3, #100]	@ 0x64
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	210c      	movs	r1, #12
 80058a2:	4618      	mov	r0, r3
 80058a4:	f001 fbcd 	bl	8007042 <SDMMC_GetResponse>
 80058a8:	4602      	mov	r2, r0
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	669a      	str	r2, [r3, #104]	@ 0x68
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	2104      	movs	r1, #4
 80058b4:	4618      	mov	r0, r3
 80058b6:	f001 fbc4 	bl	8007042 <SDMMC_GetResponse>
 80058ba:	4603      	mov	r3, r0
 80058bc:	0d1a      	lsrs	r2, r3, #20
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 80058c2:	f107 0310 	add.w	r3, r7, #16
 80058c6:	4619      	mov	r1, r3
 80058c8:	6878      	ldr	r0, [r7, #4]
 80058ca:	f7ff fbd5 	bl	8005078 <HAL_SD_GetCardCSD>
 80058ce:	4603      	mov	r3, r0
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d002      	beq.n	80058da <SD_InitCard+0x14e>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80058d4:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 80058d8:	e00f      	b.n	80058fa <SD_InitCard+0x16e>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681a      	ldr	r2, [r3, #0]
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80058e2:	041b      	lsls	r3, r3, #16
 80058e4:	4619      	mov	r1, r3
 80058e6:	4610      	mov	r0, r2
 80058e8:	f001 fc0d 	bl	8007106 <SDMMC_CmdSelDesel>
 80058ec:	63f8      	str	r0, [r7, #60]	@ 0x3c
  if (errorstate != HAL_SD_ERROR_NONE)
 80058ee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d001      	beq.n	80058f8 <SD_InitCard+0x16c>
  {
    return errorstate;
 80058f4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80058f6:	e000      	b.n	80058fa <SD_InitCard+0x16e>
  }

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 80058f8:	2300      	movs	r3, #0
}
 80058fa:	4618      	mov	r0, r3
 80058fc:	3740      	adds	r7, #64	@ 0x40
 80058fe:	46bd      	mov	sp, r7
 8005900:	bd80      	pop	{r7, pc}
	...

08005904 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8005904:	b580      	push	{r7, lr}
 8005906:	b086      	sub	sp, #24
 8005908:	af00      	add	r7, sp, #0
 800590a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800590c:	2300      	movs	r3, #0
 800590e:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U;
 8005910:	2300      	movs	r3, #0
 8005912:	617b      	str	r3, [r7, #20]
  uint32_t validvoltage = 0U;
 8005914:	2300      	movs	r3, #0
 8005916:	613b      	str	r3, [r7, #16]
#if (USE_SD_TRANSCEIVER != 0U)
  uint32_t tickstart = HAL_GetTick();
#endif /* USE_SD_TRANSCEIVER  */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	4618      	mov	r0, r3
 800591e:	f001 fc15 	bl	800714c <SDMMC_CmdGoIdleState>
 8005922:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	2b00      	cmp	r3, #0
 8005928:	d001      	beq.n	800592e <SD_PowerON+0x2a>
  {
    return errorstate;
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	e06e      	b.n	8005a0c <SD_PowerON+0x108>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	4618      	mov	r0, r3
 8005934:	f001 fc28 	bl	8007188 <SDMMC_CmdOperCond>
 8005938:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	2b00      	cmp	r3, #0
 800593e:	d00d      	beq.n	800595c <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	2200      	movs	r2, #0
 8005944:	63da      	str	r2, [r3, #60]	@ 0x3c
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	4618      	mov	r0, r3
 800594c:	f001 fbfe 	bl	800714c <SDMMC_CmdGoIdleState>
 8005950:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	2b00      	cmp	r3, #0
 8005956:	d004      	beq.n	8005962 <SD_PowerON+0x5e>
    {
      return errorstate;
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	e057      	b.n	8005a0c <SD_PowerON+0x108>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	2201      	movs	r2, #1
 8005960:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  if (hsd->SdCard.CardVersion == CARD_V2_X)
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005966:	2b01      	cmp	r3, #1
 8005968:	d137      	bne.n	80059da <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	2100      	movs	r1, #0
 8005970:	4618      	mov	r0, r3
 8005972:	f001 fc29 	bl	80071c8 <SDMMC_CmdAppCommand>
 8005976:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	2b00      	cmp	r3, #0
 800597c:	d02d      	beq.n	80059da <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800597e:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8005982:	e043      	b.n	8005a0c <SD_PowerON+0x108>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	2100      	movs	r1, #0
 800598a:	4618      	mov	r0, r3
 800598c:	f001 fc1c 	bl	80071c8 <SDMMC_CmdAppCommand>
 8005990:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	2b00      	cmp	r3, #0
 8005996:	d001      	beq.n	800599c <SD_PowerON+0x98>
    {
      return errorstate;
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	e037      	b.n	8005a0c <SD_PowerON+0x108>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY |
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	491c      	ldr	r1, [pc, #112]	@ (8005a14 <SD_PowerON+0x110>)
 80059a2:	4618      	mov	r0, r3
 80059a4:	f001 fc33 	bl	800720e <SDMMC_CmdAppOperCommand>
 80059a8:	60f8      	str	r0, [r7, #12]
                                         SD_SWITCH_1_8V_CAPACITY);
    if (errorstate != HAL_SD_ERROR_NONE)
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d002      	beq.n	80059b6 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80059b0:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 80059b4:	e02a      	b.n	8005a0c <SD_PowerON+0x108>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	2100      	movs	r1, #0
 80059bc:	4618      	mov	r0, r3
 80059be:	f001 fb40 	bl	8007042 <SDMMC_GetResponse>
 80059c2:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 80059c4:	697b      	ldr	r3, [r7, #20]
 80059c6:	0fdb      	lsrs	r3, r3, #31
 80059c8:	2b01      	cmp	r3, #1
 80059ca:	d101      	bne.n	80059d0 <SD_PowerON+0xcc>
 80059cc:	2301      	movs	r3, #1
 80059ce:	e000      	b.n	80059d2 <SD_PowerON+0xce>
 80059d0:	2300      	movs	r3, #0
 80059d2:	613b      	str	r3, [r7, #16]

    count++;
 80059d4:	68bb      	ldr	r3, [r7, #8]
 80059d6:	3301      	adds	r3, #1
 80059d8:	60bb      	str	r3, [r7, #8]
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 80059da:	68bb      	ldr	r3, [r7, #8]
 80059dc:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 80059e0:	4293      	cmp	r3, r2
 80059e2:	d802      	bhi.n	80059ea <SD_PowerON+0xe6>
 80059e4:	693b      	ldr	r3, [r7, #16]
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d0cc      	beq.n	8005984 <SD_PowerON+0x80>
  }

  if (count >= SDMMC_MAX_VOLT_TRIAL)
 80059ea:	68bb      	ldr	r3, [r7, #8]
 80059ec:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 80059f0:	4293      	cmp	r3, r2
 80059f2:	d902      	bls.n	80059fa <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 80059f4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80059f8:	e008      	b.n	8005a0c <SD_PowerON+0x108>
  }

  if ((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 80059fa:	697b      	ldr	r3, [r7, #20]
 80059fc:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d002      	beq.n	8005a0a <SD_PowerON+0x106>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	2201      	movs	r2, #1
 8005a08:	639a      	str	r2, [r3, #56]	@ 0x38
      }
    }
#endif /* USE_SD_TRANSCEIVER  */
  }

  return HAL_SD_ERROR_NONE;
 8005a0a:	2300      	movs	r3, #0
}
 8005a0c:	4618      	mov	r0, r3
 8005a0e:	3718      	adds	r7, #24
 8005a10:	46bd      	mov	sp, r7
 8005a12:	bd80      	pop	{r7, pc}
 8005a14:	c1100000 	.word	0xc1100000

08005a18 <SD_SendSDStatus>:
  * @param  pSDstatus: Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 8005a18:	b580      	push	{r7, lr}
 8005a1a:	b08c      	sub	sp, #48	@ 0x30
 8005a1c:	af00      	add	r7, sp, #0
 8005a1e:	6078      	str	r0, [r7, #4]
 8005a20:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8005a22:	f7fb fbcf 	bl	80011c4 <HAL_GetTick>
 8005a26:	6278      	str	r0, [r7, #36]	@ 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 8005a28:	683b      	ldr	r3, [r7, #0]
 8005a2a:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check SD response */
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	2100      	movs	r1, #0
 8005a32:	4618      	mov	r0, r3
 8005a34:	f001 fb05 	bl	8007042 <SDMMC_GetResponse>
 8005a38:	4603      	mov	r3, r0
 8005a3a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005a3e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005a42:	d102      	bne.n	8005a4a <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8005a44:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8005a48:	e0b0      	b.n	8005bac <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	2140      	movs	r1, #64	@ 0x40
 8005a50:	4618      	mov	r0, r3
 8005a52:	f001 fb35 	bl	80070c0 <SDMMC_CmdBlockLength>
 8005a56:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8005a58:	6a3b      	ldr	r3, [r7, #32]
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d005      	beq.n	8005a6a <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	635a      	str	r2, [r3, #52]	@ 0x34
    return errorstate;
 8005a66:	6a3b      	ldr	r3, [r7, #32]
 8005a68:	e0a0      	b.n	8005bac <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681a      	ldr	r2, [r3, #0]
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005a72:	041b      	lsls	r3, r3, #16
 8005a74:	4619      	mov	r1, r3
 8005a76:	4610      	mov	r0, r2
 8005a78:	f001 fba6 	bl	80071c8 <SDMMC_CmdAppCommand>
 8005a7c:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8005a7e:	6a3b      	ldr	r3, [r7, #32]
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d005      	beq.n	8005a90 <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	635a      	str	r2, [r3, #52]	@ 0x34
    return errorstate;
 8005a8c:	6a3b      	ldr	r3, [r7, #32]
 8005a8e:	e08d      	b.n	8005bac <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8005a90:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005a94:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 8005a96:	2340      	movs	r3, #64	@ 0x40
 8005a98:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 8005a9a:	2360      	movs	r3, #96	@ 0x60
 8005a9c:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8005a9e:	2302      	movs	r3, #2
 8005aa0:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8005aa2:	2300      	movs	r3, #0
 8005aa4:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8005aa6:	2301      	movs	r3, #1
 8005aa8:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	f107 0208 	add.w	r2, r7, #8
 8005ab2:	4611      	mov	r1, r2
 8005ab4:	4618      	mov	r0, r3
 8005ab6:	f001 fad7 	bl	8007068 <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	4618      	mov	r0, r3
 8005ac0:	f001 fc8e 	bl	80073e0 <SDMMC_CmdStatusRegister>
 8005ac4:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8005ac6:	6a3b      	ldr	r3, [r7, #32]
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d02b      	beq.n	8005b24 <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	635a      	str	r2, [r3, #52]	@ 0x34
    return errorstate;
 8005ad4:	6a3b      	ldr	r3, [r7, #32]
 8005ad6:	e069      	b.n	8005bac <SD_SendSDStatus+0x194>
  }

  /* Get status data */
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
  {
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005ade:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d013      	beq.n	8005b0e <SD_SendSDStatus+0xf6>
    {
      for (count = 0U; count < 8U; count++)
 8005ae6:	2300      	movs	r3, #0
 8005ae8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005aea:	e00d      	b.n	8005b08 <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	4618      	mov	r0, r3
 8005af2:	f001 fa43 	bl	8006f7c <SDMMC_ReadFIFO>
 8005af6:	4602      	mov	r2, r0
 8005af8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005afa:	601a      	str	r2, [r3, #0]
        pData++;
 8005afc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005afe:	3304      	adds	r3, #4
 8005b00:	62bb      	str	r3, [r7, #40]	@ 0x28
      for (count = 0U; count < 8U; count++)
 8005b02:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b04:	3301      	adds	r3, #1
 8005b06:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005b08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b0a:	2b07      	cmp	r3, #7
 8005b0c:	d9ee      	bls.n	8005aec <SD_SendSDStatus+0xd4>
      }
    }

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8005b0e:	f7fb fb59 	bl	80011c4 <HAL_GetTick>
 8005b12:	4602      	mov	r2, r0
 8005b14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b16:	1ad3      	subs	r3, r2, r3
 8005b18:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005b1c:	d102      	bne.n	8005b24 <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8005b1e:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8005b22:	e043      	b.n	8005bac <SD_SendSDStatus+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005b2a:	f403 7395 	and.w	r3, r3, #298	@ 0x12a
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d0d2      	beq.n	8005ad8 <SD_SendSDStatus+0xc0>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005b38:	f003 0308 	and.w	r3, r3, #8
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d001      	beq.n	8005b44 <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 8005b40:	2308      	movs	r3, #8
 8005b42:	e033      	b.n	8005bac <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005b4a:	f003 0302 	and.w	r3, r3, #2
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d001      	beq.n	8005b56 <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8005b52:	2302      	movs	r3, #2
 8005b54:	e02a      	b.n	8005bac <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005b5c:	f003 0320 	and.w	r3, r3, #32
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d017      	beq.n	8005b94 <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 8005b64:	2320      	movs	r3, #32
 8005b66:	e021      	b.n	8005bac <SD_SendSDStatus+0x194>
    /* Nothing to do */
  }

  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	4618      	mov	r0, r3
 8005b6e:	f001 fa05 	bl	8006f7c <SDMMC_ReadFIFO>
 8005b72:	4602      	mov	r2, r0
 8005b74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b76:	601a      	str	r2, [r3, #0]
    pData++;
 8005b78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b7a:	3304      	adds	r3, #4
 8005b7c:	62bb      	str	r3, [r7, #40]	@ 0x28

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8005b7e:	f7fb fb21 	bl	80011c4 <HAL_GetTick>
 8005b82:	4602      	mov	r2, r0
 8005b84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b86:	1ad3      	subs	r3, r2, r3
 8005b88:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005b8c:	d102      	bne.n	8005b94 <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8005b8e:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8005b92:	e00b      	b.n	8005bac <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005b9a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d1e2      	bne.n	8005b68 <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	4a03      	ldr	r2, [pc, #12]	@ (8005bb4 <SD_SendSDStatus+0x19c>)
 8005ba8:	639a      	str	r2, [r3, #56]	@ 0x38

  return HAL_SD_ERROR_NONE;
 8005baa:	2300      	movs	r3, #0
}
 8005bac:	4618      	mov	r0, r3
 8005bae:	3730      	adds	r7, #48	@ 0x30
 8005bb0:	46bd      	mov	sp, r7
 8005bb2:	bd80      	pop	{r7, pc}
 8005bb4:	18000f3a 	.word	0x18000f3a

08005bb8 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8005bb8:	b580      	push	{r7, lr}
 8005bba:	b084      	sub	sp, #16
 8005bbc:	af00      	add	r7, sp, #0
 8005bbe:	6078      	str	r0, [r7, #4]
 8005bc0:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if (pCardStatus == NULL)
 8005bc2:	683b      	ldr	r3, [r7, #0]
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d102      	bne.n	8005bce <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8005bc8:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8005bcc:	e018      	b.n	8005c00 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681a      	ldr	r2, [r3, #0]
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005bd6:	041b      	lsls	r3, r3, #16
 8005bd8:	4619      	mov	r1, r3
 8005bda:	4610      	mov	r0, r2
 8005bdc:	f001 fbdd 	bl	800739a <SDMMC_CmdSendStatus>
 8005be0:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d001      	beq.n	8005bec <SD_SendStatus+0x34>
  {
    return errorstate;
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	e009      	b.n	8005c00 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	2100      	movs	r1, #0
 8005bf2:	4618      	mov	r0, r3
 8005bf4:	f001 fa25 	bl	8007042 <SDMMC_GetResponse>
 8005bf8:	4602      	mov	r2, r0
 8005bfa:	683b      	ldr	r3, [r7, #0]
 8005bfc:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8005bfe:	2300      	movs	r3, #0
}
 8005c00:	4618      	mov	r0, r3
 8005c02:	3710      	adds	r7, #16
 8005c04:	46bd      	mov	sp, r7
 8005c06:	bd80      	pop	{r7, pc}

08005c08 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8005c08:	b580      	push	{r7, lr}
 8005c0a:	b086      	sub	sp, #24
 8005c0c:	af00      	add	r7, sp, #0
 8005c0e:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 8005c10:	2300      	movs	r3, #0
 8005c12:	60fb      	str	r3, [r7, #12]
 8005c14:	2300      	movs	r3, #0
 8005c16:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	2100      	movs	r1, #0
 8005c1e:	4618      	mov	r0, r3
 8005c20:	f001 fa0f 	bl	8007042 <SDMMC_GetResponse>
 8005c24:	4603      	mov	r3, r0
 8005c26:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005c2a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005c2e:	d102      	bne.n	8005c36 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8005c30:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8005c34:	e02f      	b.n	8005c96 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8005c36:	f107 030c 	add.w	r3, r7, #12
 8005c3a:	4619      	mov	r1, r3
 8005c3c:	6878      	ldr	r0, [r7, #4]
 8005c3e:	f000 f879 	bl	8005d34 <SD_FindSCR>
 8005c42:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 8005c44:	697b      	ldr	r3, [r7, #20]
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d001      	beq.n	8005c4e <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8005c4a:	697b      	ldr	r3, [r7, #20]
 8005c4c:	e023      	b.n	8005c96 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if ((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8005c4e:	693b      	ldr	r3, [r7, #16]
 8005c50:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d01c      	beq.n	8005c92 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681a      	ldr	r2, [r3, #0]
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005c60:	041b      	lsls	r3, r3, #16
 8005c62:	4619      	mov	r1, r3
 8005c64:	4610      	mov	r0, r2
 8005c66:	f001 faaf 	bl	80071c8 <SDMMC_CmdAppCommand>
 8005c6a:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8005c6c:	697b      	ldr	r3, [r7, #20]
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d001      	beq.n	8005c76 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8005c72:	697b      	ldr	r3, [r7, #20]
 8005c74:	e00f      	b.n	8005c96 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	2102      	movs	r1, #2
 8005c7c:	4618      	mov	r0, r3
 8005c7e:	f001 fae6 	bl	800724e <SDMMC_CmdBusWidth>
 8005c82:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8005c84:	697b      	ldr	r3, [r7, #20]
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d001      	beq.n	8005c8e <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8005c8a:	697b      	ldr	r3, [r7, #20]
 8005c8c:	e003      	b.n	8005c96 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8005c8e:	2300      	movs	r3, #0
 8005c90:	e001      	b.n	8005c96 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8005c92:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 8005c96:	4618      	mov	r0, r3
 8005c98:	3718      	adds	r7, #24
 8005c9a:	46bd      	mov	sp, r7
 8005c9c:	bd80      	pop	{r7, pc}

08005c9e <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8005c9e:	b580      	push	{r7, lr}
 8005ca0:	b086      	sub	sp, #24
 8005ca2:	af00      	add	r7, sp, #0
 8005ca4:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 8005ca6:	2300      	movs	r3, #0
 8005ca8:	60fb      	str	r3, [r7, #12]
 8005caa:	2300      	movs	r3, #0
 8005cac:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	2100      	movs	r1, #0
 8005cb4:	4618      	mov	r0, r3
 8005cb6:	f001 f9c4 	bl	8007042 <SDMMC_GetResponse>
 8005cba:	4603      	mov	r3, r0
 8005cbc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005cc0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005cc4:	d102      	bne.n	8005ccc <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8005cc6:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8005cca:	e02f      	b.n	8005d2c <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8005ccc:	f107 030c 	add.w	r3, r7, #12
 8005cd0:	4619      	mov	r1, r3
 8005cd2:	6878      	ldr	r0, [r7, #4]
 8005cd4:	f000 f82e 	bl	8005d34 <SD_FindSCR>
 8005cd8:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 8005cda:	697b      	ldr	r3, [r7, #20]
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d001      	beq.n	8005ce4 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8005ce0:	697b      	ldr	r3, [r7, #20]
 8005ce2:	e023      	b.n	8005d2c <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if ((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8005ce4:	693b      	ldr	r3, [r7, #16]
 8005ce6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d01c      	beq.n	8005d28 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681a      	ldr	r2, [r3, #0]
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005cf6:	041b      	lsls	r3, r3, #16
 8005cf8:	4619      	mov	r1, r3
 8005cfa:	4610      	mov	r0, r2
 8005cfc:	f001 fa64 	bl	80071c8 <SDMMC_CmdAppCommand>
 8005d00:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8005d02:	697b      	ldr	r3, [r7, #20]
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d001      	beq.n	8005d0c <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8005d08:	697b      	ldr	r3, [r7, #20]
 8005d0a:	e00f      	b.n	8005d2c <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	2100      	movs	r1, #0
 8005d12:	4618      	mov	r0, r3
 8005d14:	f001 fa9b 	bl	800724e <SDMMC_CmdBusWidth>
 8005d18:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8005d1a:	697b      	ldr	r3, [r7, #20]
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d001      	beq.n	8005d24 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8005d20:	697b      	ldr	r3, [r7, #20]
 8005d22:	e003      	b.n	8005d2c <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8005d24:	2300      	movs	r3, #0
 8005d26:	e001      	b.n	8005d2c <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8005d28:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 8005d2c:	4618      	mov	r0, r3
 8005d2e:	3718      	adds	r7, #24
 8005d30:	46bd      	mov	sp, r7
 8005d32:	bd80      	pop	{r7, pc}

08005d34 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8005d34:	b580      	push	{r7, lr}
 8005d36:	b08e      	sub	sp, #56	@ 0x38
 8005d38:	af00      	add	r7, sp, #0
 8005d3a:	6078      	str	r0, [r7, #4]
 8005d3c:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8005d3e:	f7fb fa41 	bl	80011c4 <HAL_GetTick>
 8005d42:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t index = 0U;
 8005d44:	2300      	movs	r3, #0
 8005d46:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 8005d48:	2300      	movs	r3, #0
 8005d4a:	60bb      	str	r3, [r7, #8]
 8005d4c:	2300      	movs	r3, #0
 8005d4e:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8005d50:	683b      	ldr	r3, [r7, #0]
 8005d52:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	2108      	movs	r1, #8
 8005d5a:	4618      	mov	r0, r3
 8005d5c:	f001 f9b0 	bl	80070c0 <SDMMC_CmdBlockLength>
 8005d60:	62b8      	str	r0, [r7, #40]	@ 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 8005d62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d001      	beq.n	8005d6c <SD_FindSCR+0x38>
  {
    return errorstate;
 8005d68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d6a:	e0ad      	b.n	8005ec8 <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681a      	ldr	r2, [r3, #0]
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005d74:	041b      	lsls	r3, r3, #16
 8005d76:	4619      	mov	r1, r3
 8005d78:	4610      	mov	r0, r2
 8005d7a:	f001 fa25 	bl	80071c8 <SDMMC_CmdAppCommand>
 8005d7e:	62b8      	str	r0, [r7, #40]	@ 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 8005d80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d001      	beq.n	8005d8a <SD_FindSCR+0x56>
  {
    return errorstate;
 8005d86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d88:	e09e      	b.n	8005ec8 <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8005d8a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005d8e:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8005d90:	2308      	movs	r3, #8
 8005d92:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 8005d94:	2330      	movs	r3, #48	@ 0x30
 8005d96:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8005d98:	2302      	movs	r3, #2
 8005d9a:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8005d9c:	2300      	movs	r3, #0
 8005d9e:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8005da0:	2301      	movs	r3, #1
 8005da2:	627b      	str	r3, [r7, #36]	@ 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	f107 0210 	add.w	r2, r7, #16
 8005dac:	4611      	mov	r1, r2
 8005dae:	4618      	mov	r0, r3
 8005db0:	f001 f95a 	bl	8007068 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	4618      	mov	r0, r3
 8005dba:	f001 fa6b 	bl	8007294 <SDMMC_CmdSendSCR>
 8005dbe:	62b8      	str	r0, [r7, #40]	@ 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 8005dc0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d027      	beq.n	8005e16 <SD_FindSCR+0xe2>
  {
    return errorstate;
 8005dc6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005dc8:	e07e      	b.n	8005ec8 <SD_FindSCR+0x194>
  }

  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
                            SDMMC_FLAG_DATAEND))
  {
    if ((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005dd0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d113      	bne.n	8005e00 <SD_FindSCR+0xcc>
 8005dd8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d110      	bne.n	8005e00 <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	4618      	mov	r0, r3
 8005de4:	f001 f8ca 	bl	8006f7c <SDMMC_ReadFIFO>
 8005de8:	4603      	mov	r3, r0
 8005dea:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	4618      	mov	r0, r3
 8005df2:	f001 f8c3 	bl	8006f7c <SDMMC_ReadFIFO>
 8005df6:	4603      	mov	r3, r0
 8005df8:	60fb      	str	r3, [r7, #12]
      index++;
 8005dfa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005dfc:	3301      	adds	r3, #1
 8005dfe:	637b      	str	r3, [r7, #52]	@ 0x34
    }


    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8005e00:	f7fb f9e0 	bl	80011c4 <HAL_GetTick>
 8005e04:	4602      	mov	r2, r0
 8005e06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e08:	1ad3      	subs	r3, r2, r3
 8005e0a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005e0e:	d102      	bne.n	8005e16 <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8005e10:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8005e14:	e058      	b.n	8005ec8 <SD_FindSCR+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005e1c:	f240 532a 	movw	r3, #1322	@ 0x52a
 8005e20:	4013      	ands	r3, r2
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d0d1      	beq.n	8005dca <SD_FindSCR+0x96>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005e2c:	f003 0308 	and.w	r3, r3, #8
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d005      	beq.n	8005e40 <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	2208      	movs	r2, #8
 8005e3a:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8005e3c:	2308      	movs	r3, #8
 8005e3e:	e043      	b.n	8005ec8 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005e46:	f003 0302 	and.w	r3, r3, #2
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d005      	beq.n	8005e5a <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	2202      	movs	r2, #2
 8005e54:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8005e56:	2302      	movs	r3, #2
 8005e58:	e036      	b.n	8005ec8 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005e60:	f003 0320 	and.w	r3, r3, #32
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d005      	beq.n	8005e74 <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	2220      	movs	r2, #32
 8005e6e:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8005e70:	2320      	movs	r3, #32
 8005e72:	e029      	b.n	8005ec8 <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	4a15      	ldr	r2, [pc, #84]	@ (8005ed0 <SD_FindSCR+0x19c>)
 8005e7a:	639a      	str	r2, [r3, #56]	@ 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	061a      	lsls	r2, r3, #24
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	021b      	lsls	r3, r3, #8
 8005e84:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8005e88:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	0a1b      	lsrs	r3, r3, #8
 8005e8e:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 8005e92:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	0e1b      	lsrs	r3, r3, #24
 8005e98:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 8005e9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e9c:	601a      	str	r2, [r3, #0]
    scr++;
 8005e9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ea0:	3304      	adds	r3, #4
 8005ea2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 8005ea4:	68bb      	ldr	r3, [r7, #8]
 8005ea6:	061a      	lsls	r2, r3, #24
 8005ea8:	68bb      	ldr	r3, [r7, #8]
 8005eaa:	021b      	lsls	r3, r3, #8
 8005eac:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8005eb0:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8005eb2:	68bb      	ldr	r3, [r7, #8]
 8005eb4:	0a1b      	lsrs	r3, r3, #8
 8005eb6:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 8005eba:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8005ebc:	68bb      	ldr	r3, [r7, #8]
 8005ebe:	0e1b      	lsrs	r3, r3, #24
 8005ec0:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 8005ec2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ec4:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8005ec6:	2300      	movs	r3, #0
}
 8005ec8:	4618      	mov	r0, r3
 8005eca:	3738      	adds	r7, #56	@ 0x38
 8005ecc:	46bd      	mov	sp, r7
 8005ece:	bd80      	pop	{r7, pc}
 8005ed0:	18000f3a 	.word	0x18000f3a

08005ed4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005ed4:	b580      	push	{r7, lr}
 8005ed6:	b082      	sub	sp, #8
 8005ed8:	af00      	add	r7, sp, #0
 8005eda:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d101      	bne.n	8005ee6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005ee2:	2301      	movs	r3, #1
 8005ee4:	e042      	b.n	8005f6c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d106      	bne.n	8005efe <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	2200      	movs	r2, #0
 8005ef4:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005ef8:	6878      	ldr	r0, [r7, #4]
 8005efa:	f7fa ff27 	bl	8000d4c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	2224      	movs	r2, #36	@ 0x24
 8005f02:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  __HAL_UART_DISABLE(huart);
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	681a      	ldr	r2, [r3, #0]
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	f022 0201 	bic.w	r2, r2, #1
 8005f14:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005f16:	6878      	ldr	r0, [r7, #4]
 8005f18:	f000 f82c 	bl	8005f74 <UART_SetConfig>
 8005f1c:	4603      	mov	r3, r0
 8005f1e:	2b01      	cmp	r3, #1
 8005f20:	d101      	bne.n	8005f26 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8005f22:	2301      	movs	r3, #1
 8005f24:	e022      	b.n	8005f6c <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d002      	beq.n	8005f34 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8005f2e:	6878      	ldr	r0, [r7, #4]
 8005f30:	f000 fd8a 	bl	8006a48 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	685a      	ldr	r2, [r3, #4]
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005f42:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	689a      	ldr	r2, [r3, #8]
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005f52:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	681a      	ldr	r2, [r3, #0]
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	f042 0201 	orr.w	r2, r2, #1
 8005f62:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005f64:	6878      	ldr	r0, [r7, #4]
 8005f66:	f000 fe11 	bl	8006b8c <UART_CheckIdleState>
 8005f6a:	4603      	mov	r3, r0
}
 8005f6c:	4618      	mov	r0, r3
 8005f6e:	3708      	adds	r7, #8
 8005f70:	46bd      	mov	sp, r7
 8005f72:	bd80      	pop	{r7, pc}

08005f74 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005f74:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005f78:	b092      	sub	sp, #72	@ 0x48
 8005f7a:	af00      	add	r7, sp, #0
 8005f7c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005f7e:	2300      	movs	r3, #0
 8005f80:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005f84:	697b      	ldr	r3, [r7, #20]
 8005f86:	689a      	ldr	r2, [r3, #8]
 8005f88:	697b      	ldr	r3, [r7, #20]
 8005f8a:	691b      	ldr	r3, [r3, #16]
 8005f8c:	431a      	orrs	r2, r3
 8005f8e:	697b      	ldr	r3, [r7, #20]
 8005f90:	695b      	ldr	r3, [r3, #20]
 8005f92:	431a      	orrs	r2, r3
 8005f94:	697b      	ldr	r3, [r7, #20]
 8005f96:	69db      	ldr	r3, [r3, #28]
 8005f98:	4313      	orrs	r3, r2
 8005f9a:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005f9c:	697b      	ldr	r3, [r7, #20]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	681a      	ldr	r2, [r3, #0]
 8005fa2:	4bbe      	ldr	r3, [pc, #760]	@ (800629c <UART_SetConfig+0x328>)
 8005fa4:	4013      	ands	r3, r2
 8005fa6:	697a      	ldr	r2, [r7, #20]
 8005fa8:	6812      	ldr	r2, [r2, #0]
 8005faa:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8005fac:	430b      	orrs	r3, r1
 8005fae:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005fb0:	697b      	ldr	r3, [r7, #20]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	685b      	ldr	r3, [r3, #4]
 8005fb6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005fba:	697b      	ldr	r3, [r7, #20]
 8005fbc:	68da      	ldr	r2, [r3, #12]
 8005fbe:	697b      	ldr	r3, [r7, #20]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	430a      	orrs	r2, r1
 8005fc4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005fc6:	697b      	ldr	r3, [r7, #20]
 8005fc8:	699b      	ldr	r3, [r3, #24]
 8005fca:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005fcc:	697b      	ldr	r3, [r7, #20]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	4ab3      	ldr	r2, [pc, #716]	@ (80062a0 <UART_SetConfig+0x32c>)
 8005fd2:	4293      	cmp	r3, r2
 8005fd4:	d004      	beq.n	8005fe0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005fd6:	697b      	ldr	r3, [r7, #20]
 8005fd8:	6a1b      	ldr	r3, [r3, #32]
 8005fda:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005fdc:	4313      	orrs	r3, r2
 8005fde:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005fe0:	697b      	ldr	r3, [r7, #20]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	689a      	ldr	r2, [r3, #8]
 8005fe6:	4baf      	ldr	r3, [pc, #700]	@ (80062a4 <UART_SetConfig+0x330>)
 8005fe8:	4013      	ands	r3, r2
 8005fea:	697a      	ldr	r2, [r7, #20]
 8005fec:	6812      	ldr	r2, [r2, #0]
 8005fee:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8005ff0:	430b      	orrs	r3, r1
 8005ff2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005ff4:	697b      	ldr	r3, [r7, #20]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ffa:	f023 010f 	bic.w	r1, r3, #15
 8005ffe:	697b      	ldr	r3, [r7, #20]
 8006000:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006002:	697b      	ldr	r3, [r7, #20]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	430a      	orrs	r2, r1
 8006008:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800600a:	697b      	ldr	r3, [r7, #20]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	4aa6      	ldr	r2, [pc, #664]	@ (80062a8 <UART_SetConfig+0x334>)
 8006010:	4293      	cmp	r3, r2
 8006012:	d177      	bne.n	8006104 <UART_SetConfig+0x190>
 8006014:	4ba5      	ldr	r3, [pc, #660]	@ (80062ac <UART_SetConfig+0x338>)
 8006016:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006018:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800601c:	2b28      	cmp	r3, #40	@ 0x28
 800601e:	d86d      	bhi.n	80060fc <UART_SetConfig+0x188>
 8006020:	a201      	add	r2, pc, #4	@ (adr r2, 8006028 <UART_SetConfig+0xb4>)
 8006022:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006026:	bf00      	nop
 8006028:	080060cd 	.word	0x080060cd
 800602c:	080060fd 	.word	0x080060fd
 8006030:	080060fd 	.word	0x080060fd
 8006034:	080060fd 	.word	0x080060fd
 8006038:	080060fd 	.word	0x080060fd
 800603c:	080060fd 	.word	0x080060fd
 8006040:	080060fd 	.word	0x080060fd
 8006044:	080060fd 	.word	0x080060fd
 8006048:	080060d5 	.word	0x080060d5
 800604c:	080060fd 	.word	0x080060fd
 8006050:	080060fd 	.word	0x080060fd
 8006054:	080060fd 	.word	0x080060fd
 8006058:	080060fd 	.word	0x080060fd
 800605c:	080060fd 	.word	0x080060fd
 8006060:	080060fd 	.word	0x080060fd
 8006064:	080060fd 	.word	0x080060fd
 8006068:	080060dd 	.word	0x080060dd
 800606c:	080060fd 	.word	0x080060fd
 8006070:	080060fd 	.word	0x080060fd
 8006074:	080060fd 	.word	0x080060fd
 8006078:	080060fd 	.word	0x080060fd
 800607c:	080060fd 	.word	0x080060fd
 8006080:	080060fd 	.word	0x080060fd
 8006084:	080060fd 	.word	0x080060fd
 8006088:	080060e5 	.word	0x080060e5
 800608c:	080060fd 	.word	0x080060fd
 8006090:	080060fd 	.word	0x080060fd
 8006094:	080060fd 	.word	0x080060fd
 8006098:	080060fd 	.word	0x080060fd
 800609c:	080060fd 	.word	0x080060fd
 80060a0:	080060fd 	.word	0x080060fd
 80060a4:	080060fd 	.word	0x080060fd
 80060a8:	080060ed 	.word	0x080060ed
 80060ac:	080060fd 	.word	0x080060fd
 80060b0:	080060fd 	.word	0x080060fd
 80060b4:	080060fd 	.word	0x080060fd
 80060b8:	080060fd 	.word	0x080060fd
 80060bc:	080060fd 	.word	0x080060fd
 80060c0:	080060fd 	.word	0x080060fd
 80060c4:	080060fd 	.word	0x080060fd
 80060c8:	080060f5 	.word	0x080060f5
 80060cc:	2301      	movs	r3, #1
 80060ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80060d2:	e222      	b.n	800651a <UART_SetConfig+0x5a6>
 80060d4:	2304      	movs	r3, #4
 80060d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80060da:	e21e      	b.n	800651a <UART_SetConfig+0x5a6>
 80060dc:	2308      	movs	r3, #8
 80060de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80060e2:	e21a      	b.n	800651a <UART_SetConfig+0x5a6>
 80060e4:	2310      	movs	r3, #16
 80060e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80060ea:	e216      	b.n	800651a <UART_SetConfig+0x5a6>
 80060ec:	2320      	movs	r3, #32
 80060ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80060f2:	e212      	b.n	800651a <UART_SetConfig+0x5a6>
 80060f4:	2340      	movs	r3, #64	@ 0x40
 80060f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80060fa:	e20e      	b.n	800651a <UART_SetConfig+0x5a6>
 80060fc:	2380      	movs	r3, #128	@ 0x80
 80060fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006102:	e20a      	b.n	800651a <UART_SetConfig+0x5a6>
 8006104:	697b      	ldr	r3, [r7, #20]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	4a69      	ldr	r2, [pc, #420]	@ (80062b0 <UART_SetConfig+0x33c>)
 800610a:	4293      	cmp	r3, r2
 800610c:	d130      	bne.n	8006170 <UART_SetConfig+0x1fc>
 800610e:	4b67      	ldr	r3, [pc, #412]	@ (80062ac <UART_SetConfig+0x338>)
 8006110:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006112:	f003 0307 	and.w	r3, r3, #7
 8006116:	2b05      	cmp	r3, #5
 8006118:	d826      	bhi.n	8006168 <UART_SetConfig+0x1f4>
 800611a:	a201      	add	r2, pc, #4	@ (adr r2, 8006120 <UART_SetConfig+0x1ac>)
 800611c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006120:	08006139 	.word	0x08006139
 8006124:	08006141 	.word	0x08006141
 8006128:	08006149 	.word	0x08006149
 800612c:	08006151 	.word	0x08006151
 8006130:	08006159 	.word	0x08006159
 8006134:	08006161 	.word	0x08006161
 8006138:	2300      	movs	r3, #0
 800613a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800613e:	e1ec      	b.n	800651a <UART_SetConfig+0x5a6>
 8006140:	2304      	movs	r3, #4
 8006142:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006146:	e1e8      	b.n	800651a <UART_SetConfig+0x5a6>
 8006148:	2308      	movs	r3, #8
 800614a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800614e:	e1e4      	b.n	800651a <UART_SetConfig+0x5a6>
 8006150:	2310      	movs	r3, #16
 8006152:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006156:	e1e0      	b.n	800651a <UART_SetConfig+0x5a6>
 8006158:	2320      	movs	r3, #32
 800615a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800615e:	e1dc      	b.n	800651a <UART_SetConfig+0x5a6>
 8006160:	2340      	movs	r3, #64	@ 0x40
 8006162:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006166:	e1d8      	b.n	800651a <UART_SetConfig+0x5a6>
 8006168:	2380      	movs	r3, #128	@ 0x80
 800616a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800616e:	e1d4      	b.n	800651a <UART_SetConfig+0x5a6>
 8006170:	697b      	ldr	r3, [r7, #20]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	4a4f      	ldr	r2, [pc, #316]	@ (80062b4 <UART_SetConfig+0x340>)
 8006176:	4293      	cmp	r3, r2
 8006178:	d130      	bne.n	80061dc <UART_SetConfig+0x268>
 800617a:	4b4c      	ldr	r3, [pc, #304]	@ (80062ac <UART_SetConfig+0x338>)
 800617c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800617e:	f003 0307 	and.w	r3, r3, #7
 8006182:	2b05      	cmp	r3, #5
 8006184:	d826      	bhi.n	80061d4 <UART_SetConfig+0x260>
 8006186:	a201      	add	r2, pc, #4	@ (adr r2, 800618c <UART_SetConfig+0x218>)
 8006188:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800618c:	080061a5 	.word	0x080061a5
 8006190:	080061ad 	.word	0x080061ad
 8006194:	080061b5 	.word	0x080061b5
 8006198:	080061bd 	.word	0x080061bd
 800619c:	080061c5 	.word	0x080061c5
 80061a0:	080061cd 	.word	0x080061cd
 80061a4:	2300      	movs	r3, #0
 80061a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80061aa:	e1b6      	b.n	800651a <UART_SetConfig+0x5a6>
 80061ac:	2304      	movs	r3, #4
 80061ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80061b2:	e1b2      	b.n	800651a <UART_SetConfig+0x5a6>
 80061b4:	2308      	movs	r3, #8
 80061b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80061ba:	e1ae      	b.n	800651a <UART_SetConfig+0x5a6>
 80061bc:	2310      	movs	r3, #16
 80061be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80061c2:	e1aa      	b.n	800651a <UART_SetConfig+0x5a6>
 80061c4:	2320      	movs	r3, #32
 80061c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80061ca:	e1a6      	b.n	800651a <UART_SetConfig+0x5a6>
 80061cc:	2340      	movs	r3, #64	@ 0x40
 80061ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80061d2:	e1a2      	b.n	800651a <UART_SetConfig+0x5a6>
 80061d4:	2380      	movs	r3, #128	@ 0x80
 80061d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80061da:	e19e      	b.n	800651a <UART_SetConfig+0x5a6>
 80061dc:	697b      	ldr	r3, [r7, #20]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	4a35      	ldr	r2, [pc, #212]	@ (80062b8 <UART_SetConfig+0x344>)
 80061e2:	4293      	cmp	r3, r2
 80061e4:	d130      	bne.n	8006248 <UART_SetConfig+0x2d4>
 80061e6:	4b31      	ldr	r3, [pc, #196]	@ (80062ac <UART_SetConfig+0x338>)
 80061e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80061ea:	f003 0307 	and.w	r3, r3, #7
 80061ee:	2b05      	cmp	r3, #5
 80061f0:	d826      	bhi.n	8006240 <UART_SetConfig+0x2cc>
 80061f2:	a201      	add	r2, pc, #4	@ (adr r2, 80061f8 <UART_SetConfig+0x284>)
 80061f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061f8:	08006211 	.word	0x08006211
 80061fc:	08006219 	.word	0x08006219
 8006200:	08006221 	.word	0x08006221
 8006204:	08006229 	.word	0x08006229
 8006208:	08006231 	.word	0x08006231
 800620c:	08006239 	.word	0x08006239
 8006210:	2300      	movs	r3, #0
 8006212:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006216:	e180      	b.n	800651a <UART_SetConfig+0x5a6>
 8006218:	2304      	movs	r3, #4
 800621a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800621e:	e17c      	b.n	800651a <UART_SetConfig+0x5a6>
 8006220:	2308      	movs	r3, #8
 8006222:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006226:	e178      	b.n	800651a <UART_SetConfig+0x5a6>
 8006228:	2310      	movs	r3, #16
 800622a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800622e:	e174      	b.n	800651a <UART_SetConfig+0x5a6>
 8006230:	2320      	movs	r3, #32
 8006232:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006236:	e170      	b.n	800651a <UART_SetConfig+0x5a6>
 8006238:	2340      	movs	r3, #64	@ 0x40
 800623a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800623e:	e16c      	b.n	800651a <UART_SetConfig+0x5a6>
 8006240:	2380      	movs	r3, #128	@ 0x80
 8006242:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006246:	e168      	b.n	800651a <UART_SetConfig+0x5a6>
 8006248:	697b      	ldr	r3, [r7, #20]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	4a1b      	ldr	r2, [pc, #108]	@ (80062bc <UART_SetConfig+0x348>)
 800624e:	4293      	cmp	r3, r2
 8006250:	d142      	bne.n	80062d8 <UART_SetConfig+0x364>
 8006252:	4b16      	ldr	r3, [pc, #88]	@ (80062ac <UART_SetConfig+0x338>)
 8006254:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006256:	f003 0307 	and.w	r3, r3, #7
 800625a:	2b05      	cmp	r3, #5
 800625c:	d838      	bhi.n	80062d0 <UART_SetConfig+0x35c>
 800625e:	a201      	add	r2, pc, #4	@ (adr r2, 8006264 <UART_SetConfig+0x2f0>)
 8006260:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006264:	0800627d 	.word	0x0800627d
 8006268:	08006285 	.word	0x08006285
 800626c:	0800628d 	.word	0x0800628d
 8006270:	08006295 	.word	0x08006295
 8006274:	080062c1 	.word	0x080062c1
 8006278:	080062c9 	.word	0x080062c9
 800627c:	2300      	movs	r3, #0
 800627e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006282:	e14a      	b.n	800651a <UART_SetConfig+0x5a6>
 8006284:	2304      	movs	r3, #4
 8006286:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800628a:	e146      	b.n	800651a <UART_SetConfig+0x5a6>
 800628c:	2308      	movs	r3, #8
 800628e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006292:	e142      	b.n	800651a <UART_SetConfig+0x5a6>
 8006294:	2310      	movs	r3, #16
 8006296:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800629a:	e13e      	b.n	800651a <UART_SetConfig+0x5a6>
 800629c:	cfff69f3 	.word	0xcfff69f3
 80062a0:	58000c00 	.word	0x58000c00
 80062a4:	11fff4ff 	.word	0x11fff4ff
 80062a8:	40011000 	.word	0x40011000
 80062ac:	58024400 	.word	0x58024400
 80062b0:	40004400 	.word	0x40004400
 80062b4:	40004800 	.word	0x40004800
 80062b8:	40004c00 	.word	0x40004c00
 80062bc:	40005000 	.word	0x40005000
 80062c0:	2320      	movs	r3, #32
 80062c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80062c6:	e128      	b.n	800651a <UART_SetConfig+0x5a6>
 80062c8:	2340      	movs	r3, #64	@ 0x40
 80062ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80062ce:	e124      	b.n	800651a <UART_SetConfig+0x5a6>
 80062d0:	2380      	movs	r3, #128	@ 0x80
 80062d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80062d6:	e120      	b.n	800651a <UART_SetConfig+0x5a6>
 80062d8:	697b      	ldr	r3, [r7, #20]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	4acb      	ldr	r2, [pc, #812]	@ (800660c <UART_SetConfig+0x698>)
 80062de:	4293      	cmp	r3, r2
 80062e0:	d176      	bne.n	80063d0 <UART_SetConfig+0x45c>
 80062e2:	4bcb      	ldr	r3, [pc, #812]	@ (8006610 <UART_SetConfig+0x69c>)
 80062e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80062e6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80062ea:	2b28      	cmp	r3, #40	@ 0x28
 80062ec:	d86c      	bhi.n	80063c8 <UART_SetConfig+0x454>
 80062ee:	a201      	add	r2, pc, #4	@ (adr r2, 80062f4 <UART_SetConfig+0x380>)
 80062f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062f4:	08006399 	.word	0x08006399
 80062f8:	080063c9 	.word	0x080063c9
 80062fc:	080063c9 	.word	0x080063c9
 8006300:	080063c9 	.word	0x080063c9
 8006304:	080063c9 	.word	0x080063c9
 8006308:	080063c9 	.word	0x080063c9
 800630c:	080063c9 	.word	0x080063c9
 8006310:	080063c9 	.word	0x080063c9
 8006314:	080063a1 	.word	0x080063a1
 8006318:	080063c9 	.word	0x080063c9
 800631c:	080063c9 	.word	0x080063c9
 8006320:	080063c9 	.word	0x080063c9
 8006324:	080063c9 	.word	0x080063c9
 8006328:	080063c9 	.word	0x080063c9
 800632c:	080063c9 	.word	0x080063c9
 8006330:	080063c9 	.word	0x080063c9
 8006334:	080063a9 	.word	0x080063a9
 8006338:	080063c9 	.word	0x080063c9
 800633c:	080063c9 	.word	0x080063c9
 8006340:	080063c9 	.word	0x080063c9
 8006344:	080063c9 	.word	0x080063c9
 8006348:	080063c9 	.word	0x080063c9
 800634c:	080063c9 	.word	0x080063c9
 8006350:	080063c9 	.word	0x080063c9
 8006354:	080063b1 	.word	0x080063b1
 8006358:	080063c9 	.word	0x080063c9
 800635c:	080063c9 	.word	0x080063c9
 8006360:	080063c9 	.word	0x080063c9
 8006364:	080063c9 	.word	0x080063c9
 8006368:	080063c9 	.word	0x080063c9
 800636c:	080063c9 	.word	0x080063c9
 8006370:	080063c9 	.word	0x080063c9
 8006374:	080063b9 	.word	0x080063b9
 8006378:	080063c9 	.word	0x080063c9
 800637c:	080063c9 	.word	0x080063c9
 8006380:	080063c9 	.word	0x080063c9
 8006384:	080063c9 	.word	0x080063c9
 8006388:	080063c9 	.word	0x080063c9
 800638c:	080063c9 	.word	0x080063c9
 8006390:	080063c9 	.word	0x080063c9
 8006394:	080063c1 	.word	0x080063c1
 8006398:	2301      	movs	r3, #1
 800639a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800639e:	e0bc      	b.n	800651a <UART_SetConfig+0x5a6>
 80063a0:	2304      	movs	r3, #4
 80063a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80063a6:	e0b8      	b.n	800651a <UART_SetConfig+0x5a6>
 80063a8:	2308      	movs	r3, #8
 80063aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80063ae:	e0b4      	b.n	800651a <UART_SetConfig+0x5a6>
 80063b0:	2310      	movs	r3, #16
 80063b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80063b6:	e0b0      	b.n	800651a <UART_SetConfig+0x5a6>
 80063b8:	2320      	movs	r3, #32
 80063ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80063be:	e0ac      	b.n	800651a <UART_SetConfig+0x5a6>
 80063c0:	2340      	movs	r3, #64	@ 0x40
 80063c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80063c6:	e0a8      	b.n	800651a <UART_SetConfig+0x5a6>
 80063c8:	2380      	movs	r3, #128	@ 0x80
 80063ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80063ce:	e0a4      	b.n	800651a <UART_SetConfig+0x5a6>
 80063d0:	697b      	ldr	r3, [r7, #20]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	4a8f      	ldr	r2, [pc, #572]	@ (8006614 <UART_SetConfig+0x6a0>)
 80063d6:	4293      	cmp	r3, r2
 80063d8:	d130      	bne.n	800643c <UART_SetConfig+0x4c8>
 80063da:	4b8d      	ldr	r3, [pc, #564]	@ (8006610 <UART_SetConfig+0x69c>)
 80063dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80063de:	f003 0307 	and.w	r3, r3, #7
 80063e2:	2b05      	cmp	r3, #5
 80063e4:	d826      	bhi.n	8006434 <UART_SetConfig+0x4c0>
 80063e6:	a201      	add	r2, pc, #4	@ (adr r2, 80063ec <UART_SetConfig+0x478>)
 80063e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063ec:	08006405 	.word	0x08006405
 80063f0:	0800640d 	.word	0x0800640d
 80063f4:	08006415 	.word	0x08006415
 80063f8:	0800641d 	.word	0x0800641d
 80063fc:	08006425 	.word	0x08006425
 8006400:	0800642d 	.word	0x0800642d
 8006404:	2300      	movs	r3, #0
 8006406:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800640a:	e086      	b.n	800651a <UART_SetConfig+0x5a6>
 800640c:	2304      	movs	r3, #4
 800640e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006412:	e082      	b.n	800651a <UART_SetConfig+0x5a6>
 8006414:	2308      	movs	r3, #8
 8006416:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800641a:	e07e      	b.n	800651a <UART_SetConfig+0x5a6>
 800641c:	2310      	movs	r3, #16
 800641e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006422:	e07a      	b.n	800651a <UART_SetConfig+0x5a6>
 8006424:	2320      	movs	r3, #32
 8006426:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800642a:	e076      	b.n	800651a <UART_SetConfig+0x5a6>
 800642c:	2340      	movs	r3, #64	@ 0x40
 800642e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006432:	e072      	b.n	800651a <UART_SetConfig+0x5a6>
 8006434:	2380      	movs	r3, #128	@ 0x80
 8006436:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800643a:	e06e      	b.n	800651a <UART_SetConfig+0x5a6>
 800643c:	697b      	ldr	r3, [r7, #20]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	4a75      	ldr	r2, [pc, #468]	@ (8006618 <UART_SetConfig+0x6a4>)
 8006442:	4293      	cmp	r3, r2
 8006444:	d130      	bne.n	80064a8 <UART_SetConfig+0x534>
 8006446:	4b72      	ldr	r3, [pc, #456]	@ (8006610 <UART_SetConfig+0x69c>)
 8006448:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800644a:	f003 0307 	and.w	r3, r3, #7
 800644e:	2b05      	cmp	r3, #5
 8006450:	d826      	bhi.n	80064a0 <UART_SetConfig+0x52c>
 8006452:	a201      	add	r2, pc, #4	@ (adr r2, 8006458 <UART_SetConfig+0x4e4>)
 8006454:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006458:	08006471 	.word	0x08006471
 800645c:	08006479 	.word	0x08006479
 8006460:	08006481 	.word	0x08006481
 8006464:	08006489 	.word	0x08006489
 8006468:	08006491 	.word	0x08006491
 800646c:	08006499 	.word	0x08006499
 8006470:	2300      	movs	r3, #0
 8006472:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006476:	e050      	b.n	800651a <UART_SetConfig+0x5a6>
 8006478:	2304      	movs	r3, #4
 800647a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800647e:	e04c      	b.n	800651a <UART_SetConfig+0x5a6>
 8006480:	2308      	movs	r3, #8
 8006482:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006486:	e048      	b.n	800651a <UART_SetConfig+0x5a6>
 8006488:	2310      	movs	r3, #16
 800648a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800648e:	e044      	b.n	800651a <UART_SetConfig+0x5a6>
 8006490:	2320      	movs	r3, #32
 8006492:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006496:	e040      	b.n	800651a <UART_SetConfig+0x5a6>
 8006498:	2340      	movs	r3, #64	@ 0x40
 800649a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800649e:	e03c      	b.n	800651a <UART_SetConfig+0x5a6>
 80064a0:	2380      	movs	r3, #128	@ 0x80
 80064a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80064a6:	e038      	b.n	800651a <UART_SetConfig+0x5a6>
 80064a8:	697b      	ldr	r3, [r7, #20]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	4a5b      	ldr	r2, [pc, #364]	@ (800661c <UART_SetConfig+0x6a8>)
 80064ae:	4293      	cmp	r3, r2
 80064b0:	d130      	bne.n	8006514 <UART_SetConfig+0x5a0>
 80064b2:	4b57      	ldr	r3, [pc, #348]	@ (8006610 <UART_SetConfig+0x69c>)
 80064b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80064b6:	f003 0307 	and.w	r3, r3, #7
 80064ba:	2b05      	cmp	r3, #5
 80064bc:	d826      	bhi.n	800650c <UART_SetConfig+0x598>
 80064be:	a201      	add	r2, pc, #4	@ (adr r2, 80064c4 <UART_SetConfig+0x550>)
 80064c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064c4:	080064dd 	.word	0x080064dd
 80064c8:	080064e5 	.word	0x080064e5
 80064cc:	080064ed 	.word	0x080064ed
 80064d0:	080064f5 	.word	0x080064f5
 80064d4:	080064fd 	.word	0x080064fd
 80064d8:	08006505 	.word	0x08006505
 80064dc:	2302      	movs	r3, #2
 80064de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80064e2:	e01a      	b.n	800651a <UART_SetConfig+0x5a6>
 80064e4:	2304      	movs	r3, #4
 80064e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80064ea:	e016      	b.n	800651a <UART_SetConfig+0x5a6>
 80064ec:	2308      	movs	r3, #8
 80064ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80064f2:	e012      	b.n	800651a <UART_SetConfig+0x5a6>
 80064f4:	2310      	movs	r3, #16
 80064f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80064fa:	e00e      	b.n	800651a <UART_SetConfig+0x5a6>
 80064fc:	2320      	movs	r3, #32
 80064fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006502:	e00a      	b.n	800651a <UART_SetConfig+0x5a6>
 8006504:	2340      	movs	r3, #64	@ 0x40
 8006506:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800650a:	e006      	b.n	800651a <UART_SetConfig+0x5a6>
 800650c:	2380      	movs	r3, #128	@ 0x80
 800650e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006512:	e002      	b.n	800651a <UART_SetConfig+0x5a6>
 8006514:	2380      	movs	r3, #128	@ 0x80
 8006516:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800651a:	697b      	ldr	r3, [r7, #20]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	4a3f      	ldr	r2, [pc, #252]	@ (800661c <UART_SetConfig+0x6a8>)
 8006520:	4293      	cmp	r3, r2
 8006522:	f040 80f8 	bne.w	8006716 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006526:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800652a:	2b20      	cmp	r3, #32
 800652c:	dc46      	bgt.n	80065bc <UART_SetConfig+0x648>
 800652e:	2b02      	cmp	r3, #2
 8006530:	f2c0 8082 	blt.w	8006638 <UART_SetConfig+0x6c4>
 8006534:	3b02      	subs	r3, #2
 8006536:	2b1e      	cmp	r3, #30
 8006538:	d87e      	bhi.n	8006638 <UART_SetConfig+0x6c4>
 800653a:	a201      	add	r2, pc, #4	@ (adr r2, 8006540 <UART_SetConfig+0x5cc>)
 800653c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006540:	080065c3 	.word	0x080065c3
 8006544:	08006639 	.word	0x08006639
 8006548:	080065cb 	.word	0x080065cb
 800654c:	08006639 	.word	0x08006639
 8006550:	08006639 	.word	0x08006639
 8006554:	08006639 	.word	0x08006639
 8006558:	080065db 	.word	0x080065db
 800655c:	08006639 	.word	0x08006639
 8006560:	08006639 	.word	0x08006639
 8006564:	08006639 	.word	0x08006639
 8006568:	08006639 	.word	0x08006639
 800656c:	08006639 	.word	0x08006639
 8006570:	08006639 	.word	0x08006639
 8006574:	08006639 	.word	0x08006639
 8006578:	080065eb 	.word	0x080065eb
 800657c:	08006639 	.word	0x08006639
 8006580:	08006639 	.word	0x08006639
 8006584:	08006639 	.word	0x08006639
 8006588:	08006639 	.word	0x08006639
 800658c:	08006639 	.word	0x08006639
 8006590:	08006639 	.word	0x08006639
 8006594:	08006639 	.word	0x08006639
 8006598:	08006639 	.word	0x08006639
 800659c:	08006639 	.word	0x08006639
 80065a0:	08006639 	.word	0x08006639
 80065a4:	08006639 	.word	0x08006639
 80065a8:	08006639 	.word	0x08006639
 80065ac:	08006639 	.word	0x08006639
 80065b0:	08006639 	.word	0x08006639
 80065b4:	08006639 	.word	0x08006639
 80065b8:	0800662b 	.word	0x0800662b
 80065bc:	2b40      	cmp	r3, #64	@ 0x40
 80065be:	d037      	beq.n	8006630 <UART_SetConfig+0x6bc>
 80065c0:	e03a      	b.n	8006638 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80065c2:	f7fd fecd 	bl	8004360 <HAL_RCCEx_GetD3PCLK1Freq>
 80065c6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80065c8:	e03c      	b.n	8006644 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80065ca:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80065ce:	4618      	mov	r0, r3
 80065d0:	f7fd fedc 	bl	800438c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80065d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80065d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80065d8:	e034      	b.n	8006644 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80065da:	f107 0318 	add.w	r3, r7, #24
 80065de:	4618      	mov	r0, r3
 80065e0:	f7fe f828 	bl	8004634 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80065e4:	69fb      	ldr	r3, [r7, #28]
 80065e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80065e8:	e02c      	b.n	8006644 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80065ea:	4b09      	ldr	r3, [pc, #36]	@ (8006610 <UART_SetConfig+0x69c>)
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	f003 0320 	and.w	r3, r3, #32
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d016      	beq.n	8006624 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80065f6:	4b06      	ldr	r3, [pc, #24]	@ (8006610 <UART_SetConfig+0x69c>)
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	08db      	lsrs	r3, r3, #3
 80065fc:	f003 0303 	and.w	r3, r3, #3
 8006600:	4a07      	ldr	r2, [pc, #28]	@ (8006620 <UART_SetConfig+0x6ac>)
 8006602:	fa22 f303 	lsr.w	r3, r2, r3
 8006606:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006608:	e01c      	b.n	8006644 <UART_SetConfig+0x6d0>
 800660a:	bf00      	nop
 800660c:	40011400 	.word	0x40011400
 8006610:	58024400 	.word	0x58024400
 8006614:	40007800 	.word	0x40007800
 8006618:	40007c00 	.word	0x40007c00
 800661c:	58000c00 	.word	0x58000c00
 8006620:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8006624:	4b9e      	ldr	r3, [pc, #632]	@ (80068a0 <UART_SetConfig+0x92c>)
 8006626:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006628:	e00c      	b.n	8006644 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800662a:	4b9e      	ldr	r3, [pc, #632]	@ (80068a4 <UART_SetConfig+0x930>)
 800662c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800662e:	e009      	b.n	8006644 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006630:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006634:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006636:	e005      	b.n	8006644 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8006638:	2300      	movs	r3, #0
 800663a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800663c:	2301      	movs	r3, #1
 800663e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8006642:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006644:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006646:	2b00      	cmp	r3, #0
 8006648:	f000 81e0 	beq.w	8006a0c <UART_SetConfig+0xa98>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800664c:	697b      	ldr	r3, [r7, #20]
 800664e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006650:	4a95      	ldr	r2, [pc, #596]	@ (80068a8 <UART_SetConfig+0x934>)
 8006652:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006656:	461a      	mov	r2, r3
 8006658:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800665a:	fbb3 f3f2 	udiv	r3, r3, r2
 800665e:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006660:	697b      	ldr	r3, [r7, #20]
 8006662:	685a      	ldr	r2, [r3, #4]
 8006664:	4613      	mov	r3, r2
 8006666:	005b      	lsls	r3, r3, #1
 8006668:	4413      	add	r3, r2
 800666a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800666c:	429a      	cmp	r2, r3
 800666e:	d305      	bcc.n	800667c <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006670:	697b      	ldr	r3, [r7, #20]
 8006672:	685b      	ldr	r3, [r3, #4]
 8006674:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006676:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006678:	429a      	cmp	r2, r3
 800667a:	d903      	bls.n	8006684 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800667c:	2301      	movs	r3, #1
 800667e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8006682:	e1c3      	b.n	8006a0c <UART_SetConfig+0xa98>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006684:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006686:	2200      	movs	r2, #0
 8006688:	60bb      	str	r3, [r7, #8]
 800668a:	60fa      	str	r2, [r7, #12]
 800668c:	697b      	ldr	r3, [r7, #20]
 800668e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006690:	4a85      	ldr	r2, [pc, #532]	@ (80068a8 <UART_SetConfig+0x934>)
 8006692:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006696:	b29b      	uxth	r3, r3
 8006698:	2200      	movs	r2, #0
 800669a:	603b      	str	r3, [r7, #0]
 800669c:	607a      	str	r2, [r7, #4]
 800669e:	e9d7 2300 	ldrd	r2, r3, [r7]
 80066a2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80066a6:	f7f9 fe17 	bl	80002d8 <__aeabi_uldivmod>
 80066aa:	4602      	mov	r2, r0
 80066ac:	460b      	mov	r3, r1
 80066ae:	4610      	mov	r0, r2
 80066b0:	4619      	mov	r1, r3
 80066b2:	f04f 0200 	mov.w	r2, #0
 80066b6:	f04f 0300 	mov.w	r3, #0
 80066ba:	020b      	lsls	r3, r1, #8
 80066bc:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80066c0:	0202      	lsls	r2, r0, #8
 80066c2:	6979      	ldr	r1, [r7, #20]
 80066c4:	6849      	ldr	r1, [r1, #4]
 80066c6:	0849      	lsrs	r1, r1, #1
 80066c8:	2000      	movs	r0, #0
 80066ca:	460c      	mov	r4, r1
 80066cc:	4605      	mov	r5, r0
 80066ce:	eb12 0804 	adds.w	r8, r2, r4
 80066d2:	eb43 0905 	adc.w	r9, r3, r5
 80066d6:	697b      	ldr	r3, [r7, #20]
 80066d8:	685b      	ldr	r3, [r3, #4]
 80066da:	2200      	movs	r2, #0
 80066dc:	469a      	mov	sl, r3
 80066de:	4693      	mov	fp, r2
 80066e0:	4652      	mov	r2, sl
 80066e2:	465b      	mov	r3, fp
 80066e4:	4640      	mov	r0, r8
 80066e6:	4649      	mov	r1, r9
 80066e8:	f7f9 fdf6 	bl	80002d8 <__aeabi_uldivmod>
 80066ec:	4602      	mov	r2, r0
 80066ee:	460b      	mov	r3, r1
 80066f0:	4613      	mov	r3, r2
 80066f2:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80066f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80066f6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80066fa:	d308      	bcc.n	800670e <UART_SetConfig+0x79a>
 80066fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80066fe:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006702:	d204      	bcs.n	800670e <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8006704:	697b      	ldr	r3, [r7, #20]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800670a:	60da      	str	r2, [r3, #12]
 800670c:	e17e      	b.n	8006a0c <UART_SetConfig+0xa98>
        }
        else
        {
          ret = HAL_ERROR;
 800670e:	2301      	movs	r3, #1
 8006710:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8006714:	e17a      	b.n	8006a0c <UART_SetConfig+0xa98>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006716:	697b      	ldr	r3, [r7, #20]
 8006718:	69db      	ldr	r3, [r3, #28]
 800671a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800671e:	f040 80c7 	bne.w	80068b0 <UART_SetConfig+0x93c>
  {
    switch (clocksource)
 8006722:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8006726:	2b20      	cmp	r3, #32
 8006728:	dc48      	bgt.n	80067bc <UART_SetConfig+0x848>
 800672a:	2b00      	cmp	r3, #0
 800672c:	db7b      	blt.n	8006826 <UART_SetConfig+0x8b2>
 800672e:	2b20      	cmp	r3, #32
 8006730:	d879      	bhi.n	8006826 <UART_SetConfig+0x8b2>
 8006732:	a201      	add	r2, pc, #4	@ (adr r2, 8006738 <UART_SetConfig+0x7c4>)
 8006734:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006738:	080067c3 	.word	0x080067c3
 800673c:	080067cb 	.word	0x080067cb
 8006740:	08006827 	.word	0x08006827
 8006744:	08006827 	.word	0x08006827
 8006748:	080067d3 	.word	0x080067d3
 800674c:	08006827 	.word	0x08006827
 8006750:	08006827 	.word	0x08006827
 8006754:	08006827 	.word	0x08006827
 8006758:	080067e3 	.word	0x080067e3
 800675c:	08006827 	.word	0x08006827
 8006760:	08006827 	.word	0x08006827
 8006764:	08006827 	.word	0x08006827
 8006768:	08006827 	.word	0x08006827
 800676c:	08006827 	.word	0x08006827
 8006770:	08006827 	.word	0x08006827
 8006774:	08006827 	.word	0x08006827
 8006778:	080067f3 	.word	0x080067f3
 800677c:	08006827 	.word	0x08006827
 8006780:	08006827 	.word	0x08006827
 8006784:	08006827 	.word	0x08006827
 8006788:	08006827 	.word	0x08006827
 800678c:	08006827 	.word	0x08006827
 8006790:	08006827 	.word	0x08006827
 8006794:	08006827 	.word	0x08006827
 8006798:	08006827 	.word	0x08006827
 800679c:	08006827 	.word	0x08006827
 80067a0:	08006827 	.word	0x08006827
 80067a4:	08006827 	.word	0x08006827
 80067a8:	08006827 	.word	0x08006827
 80067ac:	08006827 	.word	0x08006827
 80067b0:	08006827 	.word	0x08006827
 80067b4:	08006827 	.word	0x08006827
 80067b8:	08006819 	.word	0x08006819
 80067bc:	2b40      	cmp	r3, #64	@ 0x40
 80067be:	d02e      	beq.n	800681e <UART_SetConfig+0x8aa>
 80067c0:	e031      	b.n	8006826 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80067c2:	f7fc f989 	bl	8002ad8 <HAL_RCC_GetPCLK1Freq>
 80067c6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80067c8:	e033      	b.n	8006832 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80067ca:	f7fc f99b 	bl	8002b04 <HAL_RCC_GetPCLK2Freq>
 80067ce:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80067d0:	e02f      	b.n	8006832 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80067d2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80067d6:	4618      	mov	r0, r3
 80067d8:	f7fd fdd8 	bl	800438c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80067dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80067de:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80067e0:	e027      	b.n	8006832 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80067e2:	f107 0318 	add.w	r3, r7, #24
 80067e6:	4618      	mov	r0, r3
 80067e8:	f7fd ff24 	bl	8004634 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80067ec:	69fb      	ldr	r3, [r7, #28]
 80067ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80067f0:	e01f      	b.n	8006832 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80067f2:	4b2e      	ldr	r3, [pc, #184]	@ (80068ac <UART_SetConfig+0x938>)
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	f003 0320 	and.w	r3, r3, #32
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d009      	beq.n	8006812 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80067fe:	4b2b      	ldr	r3, [pc, #172]	@ (80068ac <UART_SetConfig+0x938>)
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	08db      	lsrs	r3, r3, #3
 8006804:	f003 0303 	and.w	r3, r3, #3
 8006808:	4a25      	ldr	r2, [pc, #148]	@ (80068a0 <UART_SetConfig+0x92c>)
 800680a:	fa22 f303 	lsr.w	r3, r2, r3
 800680e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006810:	e00f      	b.n	8006832 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8006812:	4b23      	ldr	r3, [pc, #140]	@ (80068a0 <UART_SetConfig+0x92c>)
 8006814:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006816:	e00c      	b.n	8006832 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006818:	4b22      	ldr	r3, [pc, #136]	@ (80068a4 <UART_SetConfig+0x930>)
 800681a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800681c:	e009      	b.n	8006832 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800681e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006822:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006824:	e005      	b.n	8006832 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8006826:	2300      	movs	r3, #0
 8006828:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800682a:	2301      	movs	r3, #1
 800682c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8006830:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006832:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006834:	2b00      	cmp	r3, #0
 8006836:	f000 80e9 	beq.w	8006a0c <UART_SetConfig+0xa98>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800683a:	697b      	ldr	r3, [r7, #20]
 800683c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800683e:	4a1a      	ldr	r2, [pc, #104]	@ (80068a8 <UART_SetConfig+0x934>)
 8006840:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006844:	461a      	mov	r2, r3
 8006846:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006848:	fbb3 f3f2 	udiv	r3, r3, r2
 800684c:	005a      	lsls	r2, r3, #1
 800684e:	697b      	ldr	r3, [r7, #20]
 8006850:	685b      	ldr	r3, [r3, #4]
 8006852:	085b      	lsrs	r3, r3, #1
 8006854:	441a      	add	r2, r3
 8006856:	697b      	ldr	r3, [r7, #20]
 8006858:	685b      	ldr	r3, [r3, #4]
 800685a:	fbb2 f3f3 	udiv	r3, r2, r3
 800685e:	b29b      	uxth	r3, r3
 8006860:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006862:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006864:	2b0f      	cmp	r3, #15
 8006866:	d916      	bls.n	8006896 <UART_SetConfig+0x922>
 8006868:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800686a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800686e:	d212      	bcs.n	8006896 <UART_SetConfig+0x922>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006870:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006872:	b29b      	uxth	r3, r3
 8006874:	f023 030f 	bic.w	r3, r3, #15
 8006878:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800687a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800687c:	085b      	lsrs	r3, r3, #1
 800687e:	b29b      	uxth	r3, r3
 8006880:	f003 0307 	and.w	r3, r3, #7
 8006884:	b29a      	uxth	r2, r3
 8006886:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8006888:	4313      	orrs	r3, r2
 800688a:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800688c:	697b      	ldr	r3, [r7, #20]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8006892:	60da      	str	r2, [r3, #12]
 8006894:	e0ba      	b.n	8006a0c <UART_SetConfig+0xa98>
      }
      else
      {
        ret = HAL_ERROR;
 8006896:	2301      	movs	r3, #1
 8006898:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800689c:	e0b6      	b.n	8006a0c <UART_SetConfig+0xa98>
 800689e:	bf00      	nop
 80068a0:	03d09000 	.word	0x03d09000
 80068a4:	003d0900 	.word	0x003d0900
 80068a8:	08007f00 	.word	0x08007f00
 80068ac:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 80068b0:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80068b4:	2b20      	cmp	r3, #32
 80068b6:	dc49      	bgt.n	800694c <UART_SetConfig+0x9d8>
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	db7c      	blt.n	80069b6 <UART_SetConfig+0xa42>
 80068bc:	2b20      	cmp	r3, #32
 80068be:	d87a      	bhi.n	80069b6 <UART_SetConfig+0xa42>
 80068c0:	a201      	add	r2, pc, #4	@ (adr r2, 80068c8 <UART_SetConfig+0x954>)
 80068c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068c6:	bf00      	nop
 80068c8:	08006953 	.word	0x08006953
 80068cc:	0800695b 	.word	0x0800695b
 80068d0:	080069b7 	.word	0x080069b7
 80068d4:	080069b7 	.word	0x080069b7
 80068d8:	08006963 	.word	0x08006963
 80068dc:	080069b7 	.word	0x080069b7
 80068e0:	080069b7 	.word	0x080069b7
 80068e4:	080069b7 	.word	0x080069b7
 80068e8:	08006973 	.word	0x08006973
 80068ec:	080069b7 	.word	0x080069b7
 80068f0:	080069b7 	.word	0x080069b7
 80068f4:	080069b7 	.word	0x080069b7
 80068f8:	080069b7 	.word	0x080069b7
 80068fc:	080069b7 	.word	0x080069b7
 8006900:	080069b7 	.word	0x080069b7
 8006904:	080069b7 	.word	0x080069b7
 8006908:	08006983 	.word	0x08006983
 800690c:	080069b7 	.word	0x080069b7
 8006910:	080069b7 	.word	0x080069b7
 8006914:	080069b7 	.word	0x080069b7
 8006918:	080069b7 	.word	0x080069b7
 800691c:	080069b7 	.word	0x080069b7
 8006920:	080069b7 	.word	0x080069b7
 8006924:	080069b7 	.word	0x080069b7
 8006928:	080069b7 	.word	0x080069b7
 800692c:	080069b7 	.word	0x080069b7
 8006930:	080069b7 	.word	0x080069b7
 8006934:	080069b7 	.word	0x080069b7
 8006938:	080069b7 	.word	0x080069b7
 800693c:	080069b7 	.word	0x080069b7
 8006940:	080069b7 	.word	0x080069b7
 8006944:	080069b7 	.word	0x080069b7
 8006948:	080069a9 	.word	0x080069a9
 800694c:	2b40      	cmp	r3, #64	@ 0x40
 800694e:	d02e      	beq.n	80069ae <UART_SetConfig+0xa3a>
 8006950:	e031      	b.n	80069b6 <UART_SetConfig+0xa42>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006952:	f7fc f8c1 	bl	8002ad8 <HAL_RCC_GetPCLK1Freq>
 8006956:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006958:	e033      	b.n	80069c2 <UART_SetConfig+0xa4e>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800695a:	f7fc f8d3 	bl	8002b04 <HAL_RCC_GetPCLK2Freq>
 800695e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006960:	e02f      	b.n	80069c2 <UART_SetConfig+0xa4e>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006962:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006966:	4618      	mov	r0, r3
 8006968:	f7fd fd10 	bl	800438c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800696c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800696e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006970:	e027      	b.n	80069c2 <UART_SetConfig+0xa4e>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006972:	f107 0318 	add.w	r3, r7, #24
 8006976:	4618      	mov	r0, r3
 8006978:	f7fd fe5c 	bl	8004634 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800697c:	69fb      	ldr	r3, [r7, #28]
 800697e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006980:	e01f      	b.n	80069c2 <UART_SetConfig+0xa4e>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006982:	4b2d      	ldr	r3, [pc, #180]	@ (8006a38 <UART_SetConfig+0xac4>)
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	f003 0320 	and.w	r3, r3, #32
 800698a:	2b00      	cmp	r3, #0
 800698c:	d009      	beq.n	80069a2 <UART_SetConfig+0xa2e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800698e:	4b2a      	ldr	r3, [pc, #168]	@ (8006a38 <UART_SetConfig+0xac4>)
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	08db      	lsrs	r3, r3, #3
 8006994:	f003 0303 	and.w	r3, r3, #3
 8006998:	4a28      	ldr	r2, [pc, #160]	@ (8006a3c <UART_SetConfig+0xac8>)
 800699a:	fa22 f303 	lsr.w	r3, r2, r3
 800699e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80069a0:	e00f      	b.n	80069c2 <UART_SetConfig+0xa4e>
          pclk = (uint32_t) HSI_VALUE;
 80069a2:	4b26      	ldr	r3, [pc, #152]	@ (8006a3c <UART_SetConfig+0xac8>)
 80069a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80069a6:	e00c      	b.n	80069c2 <UART_SetConfig+0xa4e>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80069a8:	4b25      	ldr	r3, [pc, #148]	@ (8006a40 <UART_SetConfig+0xacc>)
 80069aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80069ac:	e009      	b.n	80069c2 <UART_SetConfig+0xa4e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80069ae:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80069b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80069b4:	e005      	b.n	80069c2 <UART_SetConfig+0xa4e>
      default:
        pclk = 0U;
 80069b6:	2300      	movs	r3, #0
 80069b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80069ba:	2301      	movs	r3, #1
 80069bc:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80069c0:	bf00      	nop
    }

    if (pclk != 0U)
 80069c2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d021      	beq.n	8006a0c <UART_SetConfig+0xa98>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80069c8:	697b      	ldr	r3, [r7, #20]
 80069ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069cc:	4a1d      	ldr	r2, [pc, #116]	@ (8006a44 <UART_SetConfig+0xad0>)
 80069ce:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80069d2:	461a      	mov	r2, r3
 80069d4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80069d6:	fbb3 f2f2 	udiv	r2, r3, r2
 80069da:	697b      	ldr	r3, [r7, #20]
 80069dc:	685b      	ldr	r3, [r3, #4]
 80069de:	085b      	lsrs	r3, r3, #1
 80069e0:	441a      	add	r2, r3
 80069e2:	697b      	ldr	r3, [r7, #20]
 80069e4:	685b      	ldr	r3, [r3, #4]
 80069e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80069ea:	b29b      	uxth	r3, r3
 80069ec:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80069ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80069f0:	2b0f      	cmp	r3, #15
 80069f2:	d908      	bls.n	8006a06 <UART_SetConfig+0xa92>
 80069f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80069f6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80069fa:	d204      	bcs.n	8006a06 <UART_SetConfig+0xa92>
      {
        huart->Instance->BRR = usartdiv;
 80069fc:	697b      	ldr	r3, [r7, #20]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006a02:	60da      	str	r2, [r3, #12]
 8006a04:	e002      	b.n	8006a0c <UART_SetConfig+0xa98>
      }
      else
      {
        ret = HAL_ERROR;
 8006a06:	2301      	movs	r3, #1
 8006a08:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006a0c:	697b      	ldr	r3, [r7, #20]
 8006a0e:	2201      	movs	r2, #1
 8006a10:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8006a14:	697b      	ldr	r3, [r7, #20]
 8006a16:	2201      	movs	r2, #1
 8006a18:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006a1c:	697b      	ldr	r3, [r7, #20]
 8006a1e:	2200      	movs	r2, #0
 8006a20:	671a      	str	r2, [r3, #112]	@ 0x70
  huart->TxISR = NULL;
 8006a22:	697b      	ldr	r3, [r7, #20]
 8006a24:	2200      	movs	r2, #0
 8006a26:	675a      	str	r2, [r3, #116]	@ 0x74

  return ret;
 8006a28:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8006a2c:	4618      	mov	r0, r3
 8006a2e:	3748      	adds	r7, #72	@ 0x48
 8006a30:	46bd      	mov	sp, r7
 8006a32:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006a36:	bf00      	nop
 8006a38:	58024400 	.word	0x58024400
 8006a3c:	03d09000 	.word	0x03d09000
 8006a40:	003d0900 	.word	0x003d0900
 8006a44:	08007f00 	.word	0x08007f00

08006a48 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006a48:	b480      	push	{r7}
 8006a4a:	b083      	sub	sp, #12
 8006a4c:	af00      	add	r7, sp, #0
 8006a4e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a54:	f003 0301 	and.w	r3, r3, #1
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d00a      	beq.n	8006a72 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	685b      	ldr	r3, [r3, #4]
 8006a62:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	430a      	orrs	r2, r1
 8006a70:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a76:	f003 0302 	and.w	r3, r3, #2
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d00a      	beq.n	8006a94 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	685b      	ldr	r3, [r3, #4]
 8006a84:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	430a      	orrs	r2, r1
 8006a92:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a98:	f003 0304 	and.w	r3, r3, #4
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d00a      	beq.n	8006ab6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	685b      	ldr	r3, [r3, #4]
 8006aa6:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	430a      	orrs	r2, r1
 8006ab4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006aba:	f003 0308 	and.w	r3, r3, #8
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d00a      	beq.n	8006ad8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	685b      	ldr	r3, [r3, #4]
 8006ac8:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	430a      	orrs	r2, r1
 8006ad6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006adc:	f003 0310 	and.w	r3, r3, #16
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d00a      	beq.n	8006afa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	689b      	ldr	r3, [r3, #8]
 8006aea:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	430a      	orrs	r2, r1
 8006af8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006afe:	f003 0320 	and.w	r3, r3, #32
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d00a      	beq.n	8006b1c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	689b      	ldr	r3, [r3, #8]
 8006b0c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	430a      	orrs	r2, r1
 8006b1a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b20:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d01a      	beq.n	8006b5e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	685b      	ldr	r3, [r3, #4]
 8006b2e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	430a      	orrs	r2, r1
 8006b3c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006b42:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006b46:	d10a      	bne.n	8006b5e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	685b      	ldr	r3, [r3, #4]
 8006b4e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	430a      	orrs	r2, r1
 8006b5c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b62:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d00a      	beq.n	8006b80 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	685b      	ldr	r3, [r3, #4]
 8006b70:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	430a      	orrs	r2, r1
 8006b7e:	605a      	str	r2, [r3, #4]
  }
}
 8006b80:	bf00      	nop
 8006b82:	370c      	adds	r7, #12
 8006b84:	46bd      	mov	sp, r7
 8006b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b8a:	4770      	bx	lr

08006b8c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006b8c:	b580      	push	{r7, lr}
 8006b8e:	b086      	sub	sp, #24
 8006b90:	af02      	add	r7, sp, #8
 8006b92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	2200      	movs	r2, #0
 8006b98:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006b9c:	f7fa fb12 	bl	80011c4 <HAL_GetTick>
 8006ba0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	f003 0308 	and.w	r3, r3, #8
 8006bac:	2b08      	cmp	r3, #8
 8006bae:	d10e      	bne.n	8006bce <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006bb0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006bb4:	9300      	str	r3, [sp, #0]
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	2200      	movs	r2, #0
 8006bba:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8006bbe:	6878      	ldr	r0, [r7, #4]
 8006bc0:	f000 f82f 	bl	8006c22 <UART_WaitOnFlagUntilTimeout>
 8006bc4:	4603      	mov	r3, r0
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d001      	beq.n	8006bce <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006bca:	2303      	movs	r3, #3
 8006bcc:	e025      	b.n	8006c1a <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	f003 0304 	and.w	r3, r3, #4
 8006bd8:	2b04      	cmp	r3, #4
 8006bda:	d10e      	bne.n	8006bfa <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006bdc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006be0:	9300      	str	r3, [sp, #0]
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	2200      	movs	r2, #0
 8006be6:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8006bea:	6878      	ldr	r0, [r7, #4]
 8006bec:	f000 f819 	bl	8006c22 <UART_WaitOnFlagUntilTimeout>
 8006bf0:	4603      	mov	r3, r0
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d001      	beq.n	8006bfa <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006bf6:	2303      	movs	r3, #3
 8006bf8:	e00f      	b.n	8006c1a <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	2220      	movs	r2, #32
 8006bfe:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	2220      	movs	r2, #32
 8006c06:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	2200      	movs	r2, #0
 8006c0e:	66da      	str	r2, [r3, #108]	@ 0x6c

  __HAL_UNLOCK(huart);
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	2200      	movs	r2, #0
 8006c14:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 8006c18:	2300      	movs	r3, #0
}
 8006c1a:	4618      	mov	r0, r3
 8006c1c:	3710      	adds	r7, #16
 8006c1e:	46bd      	mov	sp, r7
 8006c20:	bd80      	pop	{r7, pc}

08006c22 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006c22:	b580      	push	{r7, lr}
 8006c24:	b084      	sub	sp, #16
 8006c26:	af00      	add	r7, sp, #0
 8006c28:	60f8      	str	r0, [r7, #12]
 8006c2a:	60b9      	str	r1, [r7, #8]
 8006c2c:	603b      	str	r3, [r7, #0]
 8006c2e:	4613      	mov	r3, r2
 8006c30:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006c32:	e062      	b.n	8006cfa <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006c34:	69bb      	ldr	r3, [r7, #24]
 8006c36:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006c3a:	d05e      	beq.n	8006cfa <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006c3c:	f7fa fac2 	bl	80011c4 <HAL_GetTick>
 8006c40:	4602      	mov	r2, r0
 8006c42:	683b      	ldr	r3, [r7, #0]
 8006c44:	1ad3      	subs	r3, r2, r3
 8006c46:	69ba      	ldr	r2, [r7, #24]
 8006c48:	429a      	cmp	r2, r3
 8006c4a:	d302      	bcc.n	8006c52 <UART_WaitOnFlagUntilTimeout+0x30>
 8006c4c:	69bb      	ldr	r3, [r7, #24]
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d11d      	bne.n	8006c8e <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	681a      	ldr	r2, [r3, #0]
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	f422 72d0 	bic.w	r2, r2, #416	@ 0x1a0
 8006c60:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	689a      	ldr	r2, [r3, #8]
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	f022 0201 	bic.w	r2, r2, #1
 8006c70:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	2220      	movs	r2, #32
 8006c76:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	2220      	movs	r2, #32
 8006c7e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        __HAL_UNLOCK(huart);
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	2200      	movs	r2, #0
 8006c86:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

        return HAL_TIMEOUT;
 8006c8a:	2303      	movs	r3, #3
 8006c8c:	e045      	b.n	8006d1a <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	f003 0304 	and.w	r3, r3, #4
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d02e      	beq.n	8006cfa <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	69db      	ldr	r3, [r3, #28]
 8006ca2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006ca6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006caa:	d126      	bne.n	8006cfa <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006cb4:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	681a      	ldr	r2, [r3, #0]
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	f422 72d0 	bic.w	r2, r2, #416	@ 0x1a0
 8006cc4:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	689a      	ldr	r2, [r3, #8]
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	f022 0201 	bic.w	r2, r2, #1
 8006cd4:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	2220      	movs	r2, #32
 8006cda:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	2220      	movs	r2, #32
 8006ce2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	2220      	movs	r2, #32
 8006cea:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	2200      	movs	r2, #0
 8006cf2:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8006cf6:	2303      	movs	r3, #3
 8006cf8:	e00f      	b.n	8006d1a <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	69da      	ldr	r2, [r3, #28]
 8006d00:	68bb      	ldr	r3, [r7, #8]
 8006d02:	4013      	ands	r3, r2
 8006d04:	68ba      	ldr	r2, [r7, #8]
 8006d06:	429a      	cmp	r2, r3
 8006d08:	bf0c      	ite	eq
 8006d0a:	2301      	moveq	r3, #1
 8006d0c:	2300      	movne	r3, #0
 8006d0e:	b2db      	uxtb	r3, r3
 8006d10:	461a      	mov	r2, r3
 8006d12:	79fb      	ldrb	r3, [r7, #7]
 8006d14:	429a      	cmp	r2, r3
 8006d16:	d08d      	beq.n	8006c34 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006d18:	2300      	movs	r3, #0
}
 8006d1a:	4618      	mov	r0, r3
 8006d1c:	3710      	adds	r7, #16
 8006d1e:	46bd      	mov	sp, r7
 8006d20:	bd80      	pop	{r7, pc}

08006d22 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006d22:	b480      	push	{r7}
 8006d24:	b085      	sub	sp, #20
 8006d26:	af00      	add	r7, sp, #0
 8006d28:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8006d30:	2b01      	cmp	r3, #1
 8006d32:	d101      	bne.n	8006d38 <HAL_UARTEx_DisableFifoMode+0x16>
 8006d34:	2302      	movs	r3, #2
 8006d36:	e027      	b.n	8006d88 <HAL_UARTEx_DisableFifoMode+0x66>
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	2201      	movs	r2, #1
 8006d3c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	2224      	movs	r2, #36	@ 0x24
 8006d44:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	681a      	ldr	r2, [r3, #0]
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	f022 0201 	bic.w	r2, r2, #1
 8006d5e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8006d66:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	2200      	movs	r2, #0
 8006d6c:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	68fa      	ldr	r2, [r7, #12]
 8006d74:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	2220      	movs	r2, #32
 8006d7a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	2200      	movs	r2, #0
 8006d82:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 8006d86:	2300      	movs	r3, #0
}
 8006d88:	4618      	mov	r0, r3
 8006d8a:	3714      	adds	r7, #20
 8006d8c:	46bd      	mov	sp, r7
 8006d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d92:	4770      	bx	lr

08006d94 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006d94:	b580      	push	{r7, lr}
 8006d96:	b084      	sub	sp, #16
 8006d98:	af00      	add	r7, sp, #0
 8006d9a:	6078      	str	r0, [r7, #4]
 8006d9c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8006da4:	2b01      	cmp	r3, #1
 8006da6:	d101      	bne.n	8006dac <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006da8:	2302      	movs	r3, #2
 8006daa:	e02d      	b.n	8006e08 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	2201      	movs	r2, #1
 8006db0:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	2224      	movs	r2, #36	@ 0x24
 8006db8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	681a      	ldr	r2, [r3, #0]
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	f022 0201 	bic.w	r2, r2, #1
 8006dd2:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	689b      	ldr	r3, [r3, #8]
 8006dda:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	683a      	ldr	r2, [r7, #0]
 8006de4:	430a      	orrs	r2, r1
 8006de6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006de8:	6878      	ldr	r0, [r7, #4]
 8006dea:	f000 f84f 	bl	8006e8c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	68fa      	ldr	r2, [r7, #12]
 8006df4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	2220      	movs	r2, #32
 8006dfa:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	2200      	movs	r2, #0
 8006e02:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 8006e06:	2300      	movs	r3, #0
}
 8006e08:	4618      	mov	r0, r3
 8006e0a:	3710      	adds	r7, #16
 8006e0c:	46bd      	mov	sp, r7
 8006e0e:	bd80      	pop	{r7, pc}

08006e10 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006e10:	b580      	push	{r7, lr}
 8006e12:	b084      	sub	sp, #16
 8006e14:	af00      	add	r7, sp, #0
 8006e16:	6078      	str	r0, [r7, #4]
 8006e18:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8006e20:	2b01      	cmp	r3, #1
 8006e22:	d101      	bne.n	8006e28 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006e24:	2302      	movs	r3, #2
 8006e26:	e02d      	b.n	8006e84 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	2201      	movs	r2, #1
 8006e2c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	2224      	movs	r2, #36	@ 0x24
 8006e34:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	681a      	ldr	r2, [r3, #0]
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	f022 0201 	bic.w	r2, r2, #1
 8006e4e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	689b      	ldr	r3, [r3, #8]
 8006e56:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	683a      	ldr	r2, [r7, #0]
 8006e60:	430a      	orrs	r2, r1
 8006e62:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006e64:	6878      	ldr	r0, [r7, #4]
 8006e66:	f000 f811 	bl	8006e8c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	68fa      	ldr	r2, [r7, #12]
 8006e70:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	2220      	movs	r2, #32
 8006e76:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	2200      	movs	r2, #0
 8006e7e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 8006e82:	2300      	movs	r3, #0
}
 8006e84:	4618      	mov	r0, r3
 8006e86:	3710      	adds	r7, #16
 8006e88:	46bd      	mov	sp, r7
 8006e8a:	bd80      	pop	{r7, pc}

08006e8c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006e8c:	b480      	push	{r7}
 8006e8e:	b085      	sub	sp, #20
 8006e90:	af00      	add	r7, sp, #0
 8006e92:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d108      	bne.n	8006eae <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	2201      	movs	r2, #1
 8006ea0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	2201      	movs	r2, #1
 8006ea8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006eac:	e031      	b.n	8006f12 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8006eae:	2310      	movs	r3, #16
 8006eb0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006eb2:	2310      	movs	r3, #16
 8006eb4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	689b      	ldr	r3, [r3, #8]
 8006ebc:	0e5b      	lsrs	r3, r3, #25
 8006ebe:	b2db      	uxtb	r3, r3
 8006ec0:	f003 0307 	and.w	r3, r3, #7
 8006ec4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	689b      	ldr	r3, [r3, #8]
 8006ecc:	0f5b      	lsrs	r3, r3, #29
 8006ece:	b2db      	uxtb	r3, r3
 8006ed0:	f003 0307 	and.w	r3, r3, #7
 8006ed4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006ed6:	7bbb      	ldrb	r3, [r7, #14]
 8006ed8:	7b3a      	ldrb	r2, [r7, #12]
 8006eda:	4911      	ldr	r1, [pc, #68]	@ (8006f20 <UARTEx_SetNbDataToProcess+0x94>)
 8006edc:	5c8a      	ldrb	r2, [r1, r2]
 8006ede:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8006ee2:	7b3a      	ldrb	r2, [r7, #12]
 8006ee4:	490f      	ldr	r1, [pc, #60]	@ (8006f24 <UARTEx_SetNbDataToProcess+0x98>)
 8006ee6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006ee8:	fb93 f3f2 	sdiv	r3, r3, r2
 8006eec:	b29a      	uxth	r2, r3
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006ef4:	7bfb      	ldrb	r3, [r7, #15]
 8006ef6:	7b7a      	ldrb	r2, [r7, #13]
 8006ef8:	4909      	ldr	r1, [pc, #36]	@ (8006f20 <UARTEx_SetNbDataToProcess+0x94>)
 8006efa:	5c8a      	ldrb	r2, [r1, r2]
 8006efc:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006f00:	7b7a      	ldrb	r2, [r7, #13]
 8006f02:	4908      	ldr	r1, [pc, #32]	@ (8006f24 <UARTEx_SetNbDataToProcess+0x98>)
 8006f04:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006f06:	fb93 f3f2 	sdiv	r3, r3, r2
 8006f0a:	b29a      	uxth	r2, r3
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8006f12:	bf00      	nop
 8006f14:	3714      	adds	r7, #20
 8006f16:	46bd      	mov	sp, r7
 8006f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f1c:	4770      	bx	lr
 8006f1e:	bf00      	nop
 8006f20:	08007f18 	.word	0x08007f18
 8006f24:	08007f20 	.word	0x08007f20

08006f28 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 8006f28:	b084      	sub	sp, #16
 8006f2a:	b480      	push	{r7}
 8006f2c:	b085      	sub	sp, #20
 8006f2e:	af00      	add	r7, sp, #0
 8006f30:	6078      	str	r0, [r7, #4]
 8006f32:	f107 001c 	add.w	r0, r7, #28
 8006f36:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8006f3a:	2300      	movs	r3, #0
 8006f3c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           | \
 8006f3e:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      | \
 8006f40:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           | \
 8006f42:	431a      	orrs	r2, r3
             Init.BusWide             | \
 8006f44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
             Init.ClockPowerSave      | \
 8006f46:	431a      	orrs	r2, r3
             Init.HardwareFlowControl | \
 8006f48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
             Init.BusWide             | \
 8006f4a:	431a      	orrs	r2, r3
             Init.ClockDiv
 8006f4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
             Init.HardwareFlowControl | \
 8006f4e:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           | \
 8006f50:	68fa      	ldr	r2, [r7, #12]
 8006f52:	4313      	orrs	r3, r2
 8006f54:	60fb      	str	r3, [r7, #12]
            );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	685a      	ldr	r2, [r3, #4]
 8006f5a:	4b07      	ldr	r3, [pc, #28]	@ (8006f78 <SDMMC_Init+0x50>)
 8006f5c:	4013      	ands	r3, r2
 8006f5e:	68fa      	ldr	r2, [r7, #12]
 8006f60:	431a      	orrs	r2, r3
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8006f66:	2300      	movs	r3, #0
}
 8006f68:	4618      	mov	r0, r3
 8006f6a:	3714      	adds	r7, #20
 8006f6c:	46bd      	mov	sp, r7
 8006f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f72:	b004      	add	sp, #16
 8006f74:	4770      	bx	lr
 8006f76:	bf00      	nop
 8006f78:	ffc02c00 	.word	0xffc02c00

08006f7c <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 8006f7c:	b480      	push	{r7}
 8006f7e:	b083      	sub	sp, #12
 8006f80:	af00      	add	r7, sp, #0
 8006f82:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
}
 8006f8a:	4618      	mov	r0, r3
 8006f8c:	370c      	adds	r7, #12
 8006f8e:	46bd      	mov	sp, r7
 8006f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f94:	4770      	bx	lr

08006f96 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 8006f96:	b480      	push	{r7}
 8006f98:	b083      	sub	sp, #12
 8006f9a:	af00      	add	r7, sp, #0
 8006f9c:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	f043 0203 	orr.w	r2, r3, #3
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8006faa:	2300      	movs	r3, #0
}
 8006fac:	4618      	mov	r0, r3
 8006fae:	370c      	adds	r7, #12
 8006fb0:	46bd      	mov	sp, r7
 8006fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fb6:	4770      	bx	lr

08006fb8 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 8006fb8:	b480      	push	{r7}
 8006fba:	b083      	sub	sp, #12
 8006fbc:	af00      	add	r7, sp, #0
 8006fbe:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	f003 0303 	and.w	r3, r3, #3
}
 8006fc8:	4618      	mov	r0, r3
 8006fca:	370c      	adds	r7, #12
 8006fcc:	46bd      	mov	sp, r7
 8006fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fd2:	4770      	bx	lr

08006fd4 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 8006fd4:	b480      	push	{r7}
 8006fd6:	b085      	sub	sp, #20
 8006fd8:	af00      	add	r7, sp, #0
 8006fda:	6078      	str	r0, [r7, #4]
 8006fdc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8006fde:	2300      	movs	r3, #0
 8006fe0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 8006fe2:	683b      	ldr	r3, [r7, #0]
 8006fe4:	681a      	ldr	r2, [r3, #0]
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 8006fea:	683b      	ldr	r3, [r7, #0]
 8006fec:	685a      	ldr	r2, [r3, #4]
                       Command->Response         | \
 8006fee:	683b      	ldr	r3, [r7, #0]
 8006ff0:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 8006ff2:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt | \
 8006ff4:	683b      	ldr	r3, [r7, #0]
 8006ff6:	68db      	ldr	r3, [r3, #12]
                       Command->Response         | \
 8006ff8:	431a      	orrs	r2, r3
                       Command->CPSM);
 8006ffa:	683b      	ldr	r3, [r7, #0]
 8006ffc:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt | \
 8006ffe:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 8007000:	68fa      	ldr	r2, [r7, #12]
 8007002:	4313      	orrs	r3, r2
 8007004:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	68da      	ldr	r2, [r3, #12]
 800700a:	4b06      	ldr	r3, [pc, #24]	@ (8007024 <SDMMC_SendCommand+0x50>)
 800700c:	4013      	ands	r3, r2
 800700e:	68fa      	ldr	r2, [r7, #12]
 8007010:	431a      	orrs	r2, r3
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8007016:	2300      	movs	r3, #0
}
 8007018:	4618      	mov	r0, r3
 800701a:	3714      	adds	r7, #20
 800701c:	46bd      	mov	sp, r7
 800701e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007022:	4770      	bx	lr
 8007024:	fffee0c0 	.word	0xfffee0c0

08007028 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 8007028:	b480      	push	{r7}
 800702a:	b083      	sub	sp, #12
 800702c:	af00      	add	r7, sp, #0
 800702e:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	691b      	ldr	r3, [r3, #16]
 8007034:	b2db      	uxtb	r3, r3
}
 8007036:	4618      	mov	r0, r3
 8007038:	370c      	adds	r7, #12
 800703a:	46bd      	mov	sp, r7
 800703c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007040:	4770      	bx	lr

08007042 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 8007042:	b480      	push	{r7}
 8007044:	b085      	sub	sp, #20
 8007046:	af00      	add	r7, sp, #0
 8007048:	6078      	str	r0, [r7, #4]
 800704a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	3314      	adds	r3, #20
 8007050:	461a      	mov	r2, r3
 8007052:	683b      	ldr	r3, [r7, #0]
 8007054:	4413      	add	r3, r2
 8007056:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	681b      	ldr	r3, [r3, #0]
}
 800705c:	4618      	mov	r0, r3
 800705e:	3714      	adds	r7, #20
 8007060:	46bd      	mov	sp, r7
 8007062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007066:	4770      	bx	lr

08007068 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef *Data)
{
 8007068:	b480      	push	{r7}
 800706a:	b085      	sub	sp, #20
 800706c:	af00      	add	r7, sp, #0
 800706e:	6078      	str	r0, [r7, #4]
 8007070:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8007072:	2300      	movs	r3, #0
 8007074:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 8007076:	683b      	ldr	r3, [r7, #0]
 8007078:	681a      	ldr	r2, [r3, #0]
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800707e:	683b      	ldr	r3, [r7, #0]
 8007080:	685a      	ldr	r2, [r3, #4]
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 8007086:	683b      	ldr	r3, [r7, #0]
 8007088:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   | \
 800708a:	683b      	ldr	r3, [r7, #0]
 800708c:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800708e:	431a      	orrs	r2, r3
                       Data->TransferMode  | \
 8007090:	683b      	ldr	r3, [r7, #0]
 8007092:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   | \
 8007094:	431a      	orrs	r2, r3
                       Data->DPSM);
 8007096:	683b      	ldr	r3, [r7, #0]
 8007098:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  | \
 800709a:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800709c:	68fa      	ldr	r2, [r7, #12]
 800709e:	4313      	orrs	r3, r2
 80070a0:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80070a6:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	431a      	orrs	r2, r3
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	62da      	str	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 80070b2:	2300      	movs	r3, #0

}
 80070b4:	4618      	mov	r0, r3
 80070b6:	3714      	adds	r7, #20
 80070b8:	46bd      	mov	sp, r7
 80070ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070be:	4770      	bx	lr

080070c0 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 80070c0:	b580      	push	{r7, lr}
 80070c2:	b088      	sub	sp, #32
 80070c4:	af00      	add	r7, sp, #0
 80070c6:	6078      	str	r0, [r7, #4]
 80070c8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 80070ca:	683b      	ldr	r3, [r7, #0]
 80070cc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 80070ce:	2310      	movs	r3, #16
 80070d0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80070d2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80070d6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80070d8:	2300      	movs	r3, #0
 80070da:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80070dc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80070e0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80070e2:	f107 0308 	add.w	r3, r7, #8
 80070e6:	4619      	mov	r1, r3
 80070e8:	6878      	ldr	r0, [r7, #4]
 80070ea:	f7ff ff73 	bl	8006fd4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 80070ee:	f241 3288 	movw	r2, #5000	@ 0x1388
 80070f2:	2110      	movs	r1, #16
 80070f4:	6878      	ldr	r0, [r7, #4]
 80070f6:	f000 f995 	bl	8007424 <SDMMC_GetCmdResp1>
 80070fa:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80070fc:	69fb      	ldr	r3, [r7, #28]
}
 80070fe:	4618      	mov	r0, r3
 8007100:	3720      	adds	r7, #32
 8007102:	46bd      	mov	sp, r7
 8007104:	bd80      	pop	{r7, pc}

08007106 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  addr: Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint32_t Addr)
{
 8007106:	b580      	push	{r7, lr}
 8007108:	b088      	sub	sp, #32
 800710a:	af00      	add	r7, sp, #0
 800710c:	6078      	str	r0, [r7, #4]
 800710e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8007110:	683b      	ldr	r3, [r7, #0]
 8007112:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8007114:	2307      	movs	r3, #7
 8007116:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007118:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800711c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800711e:	2300      	movs	r3, #0
 8007120:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007122:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8007126:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007128:	f107 0308 	add.w	r3, r7, #8
 800712c:	4619      	mov	r1, r3
 800712e:	6878      	ldr	r0, [r7, #4]
 8007130:	f7ff ff50 	bl	8006fd4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 8007134:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007138:	2107      	movs	r1, #7
 800713a:	6878      	ldr	r0, [r7, #4]
 800713c:	f000 f972 	bl	8007424 <SDMMC_GetCmdResp1>
 8007140:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007142:	69fb      	ldr	r3, [r7, #28]
}
 8007144:	4618      	mov	r0, r3
 8007146:	3720      	adds	r7, #32
 8007148:	46bd      	mov	sp, r7
 800714a:	bd80      	pop	{r7, pc}

0800714c <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800714c:	b580      	push	{r7, lr}
 800714e:	b088      	sub	sp, #32
 8007150:	af00      	add	r7, sp, #0
 8007152:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 8007154:	2300      	movs	r3, #0
 8007156:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8007158:	2300      	movs	r3, #0
 800715a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800715c:	2300      	movs	r3, #0
 800715e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007160:	2300      	movs	r3, #0
 8007162:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007164:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8007168:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800716a:	f107 0308 	add.w	r3, r7, #8
 800716e:	4619      	mov	r1, r3
 8007170:	6878      	ldr	r0, [r7, #4]
 8007172:	f7ff ff2f 	bl	8006fd4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 8007176:	6878      	ldr	r0, [r7, #4]
 8007178:	f000 fb96 	bl	80078a8 <SDMMC_GetCmdError>
 800717c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800717e:	69fb      	ldr	r3, [r7, #28]
}
 8007180:	4618      	mov	r0, r3
 8007182:	3720      	adds	r7, #32
 8007184:	46bd      	mov	sp, r7
 8007186:	bd80      	pop	{r7, pc}

08007188 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 8007188:	b580      	push	{r7, lr}
 800718a:	b088      	sub	sp, #32
 800718c:	af00      	add	r7, sp, #0
 800718e:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8007190:	f44f 73d5 	mov.w	r3, #426	@ 0x1aa
 8007194:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8007196:	2308      	movs	r3, #8
 8007198:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800719a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800719e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80071a0:	2300      	movs	r3, #0
 80071a2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80071a4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80071a8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80071aa:	f107 0308 	add.w	r3, r7, #8
 80071ae:	4619      	mov	r1, r3
 80071b0:	6878      	ldr	r0, [r7, #4]
 80071b2:	f7ff ff0f 	bl	8006fd4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 80071b6:	6878      	ldr	r0, [r7, #4]
 80071b8:	f000 fb28 	bl	800780c <SDMMC_GetCmdResp7>
 80071bc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80071be:	69fb      	ldr	r3, [r7, #28]
}
 80071c0:	4618      	mov	r0, r3
 80071c2:	3720      	adds	r7, #32
 80071c4:	46bd      	mov	sp, r7
 80071c6:	bd80      	pop	{r7, pc}

080071c8 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80071c8:	b580      	push	{r7, lr}
 80071ca:	b088      	sub	sp, #32
 80071cc:	af00      	add	r7, sp, #0
 80071ce:	6078      	str	r0, [r7, #4]
 80071d0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 80071d2:	683b      	ldr	r3, [r7, #0]
 80071d4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 80071d6:	2337      	movs	r3, #55	@ 0x37
 80071d8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80071da:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80071de:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80071e0:	2300      	movs	r3, #0
 80071e2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80071e4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80071e8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80071ea:	f107 0308 	add.w	r3, r7, #8
 80071ee:	4619      	mov	r1, r3
 80071f0:	6878      	ldr	r0, [r7, #4]
 80071f2:	f7ff feef 	bl	8006fd4 <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 80071f6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80071fa:	2137      	movs	r1, #55	@ 0x37
 80071fc:	6878      	ldr	r0, [r7, #4]
 80071fe:	f000 f911 	bl	8007424 <SDMMC_GetCmdResp1>
 8007202:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007204:	69fb      	ldr	r3, [r7, #28]
}
 8007206:	4618      	mov	r0, r3
 8007208:	3720      	adds	r7, #32
 800720a:	46bd      	mov	sp, r7
 800720c:	bd80      	pop	{r7, pc}

0800720e <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800720e:	b580      	push	{r7, lr}
 8007210:	b088      	sub	sp, #32
 8007212:	af00      	add	r7, sp, #0
 8007214:	6078      	str	r0, [r7, #4]
 8007216:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 8007218:	683b      	ldr	r3, [r7, #0]
 800721a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800721c:	2329      	movs	r3, #41	@ 0x29
 800721e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007220:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8007224:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007226:	2300      	movs	r3, #0
 8007228:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800722a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800722e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007230:	f107 0308 	add.w	r3, r7, #8
 8007234:	4619      	mov	r1, r3
 8007236:	6878      	ldr	r0, [r7, #4]
 8007238:	f7ff fecc 	bl	8006fd4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800723c:	6878      	ldr	r0, [r7, #4]
 800723e:	f000 fa2d 	bl	800769c <SDMMC_GetCmdResp3>
 8007242:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007244:	69fb      	ldr	r3, [r7, #28]
}
 8007246:	4618      	mov	r0, r3
 8007248:	3720      	adds	r7, #32
 800724a:	46bd      	mov	sp, r7
 800724c:	bd80      	pop	{r7, pc}

0800724e <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 800724e:	b580      	push	{r7, lr}
 8007250:	b088      	sub	sp, #32
 8007252:	af00      	add	r7, sp, #0
 8007254:	6078      	str	r0, [r7, #4]
 8007256:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8007258:	683b      	ldr	r3, [r7, #0]
 800725a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800725c:	2306      	movs	r3, #6
 800725e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007260:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8007264:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007266:	2300      	movs	r3, #0
 8007268:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800726a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800726e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007270:	f107 0308 	add.w	r3, r7, #8
 8007274:	4619      	mov	r1, r3
 8007276:	6878      	ldr	r0, [r7, #4]
 8007278:	f7ff feac 	bl	8006fd4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 800727c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007280:	2106      	movs	r1, #6
 8007282:	6878      	ldr	r0, [r7, #4]
 8007284:	f000 f8ce 	bl	8007424 <SDMMC_GetCmdResp1>
 8007288:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800728a:	69fb      	ldr	r3, [r7, #28]
}
 800728c:	4618      	mov	r0, r3
 800728e:	3720      	adds	r7, #32
 8007290:	46bd      	mov	sp, r7
 8007292:	bd80      	pop	{r7, pc}

08007294 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 8007294:	b580      	push	{r7, lr}
 8007296:	b088      	sub	sp, #32
 8007298:	af00      	add	r7, sp, #0
 800729a:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800729c:	2300      	movs	r3, #0
 800729e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 80072a0:	2333      	movs	r3, #51	@ 0x33
 80072a2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80072a4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80072a8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80072aa:	2300      	movs	r3, #0
 80072ac:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80072ae:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80072b2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80072b4:	f107 0308 	add.w	r3, r7, #8
 80072b8:	4619      	mov	r1, r3
 80072ba:	6878      	ldr	r0, [r7, #4]
 80072bc:	f7ff fe8a 	bl	8006fd4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 80072c0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80072c4:	2133      	movs	r1, #51	@ 0x33
 80072c6:	6878      	ldr	r0, [r7, #4]
 80072c8:	f000 f8ac 	bl	8007424 <SDMMC_GetCmdResp1>
 80072cc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80072ce:	69fb      	ldr	r3, [r7, #28]
}
 80072d0:	4618      	mov	r0, r3
 80072d2:	3720      	adds	r7, #32
 80072d4:	46bd      	mov	sp, r7
 80072d6:	bd80      	pop	{r7, pc}

080072d8 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 80072d8:	b580      	push	{r7, lr}
 80072da:	b088      	sub	sp, #32
 80072dc:	af00      	add	r7, sp, #0
 80072de:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 80072e0:	2300      	movs	r3, #0
 80072e2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 80072e4:	2302      	movs	r3, #2
 80072e6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 80072e8:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80072ec:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80072ee:	2300      	movs	r3, #0
 80072f0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80072f2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80072f6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80072f8:	f107 0308 	add.w	r3, r7, #8
 80072fc:	4619      	mov	r1, r3
 80072fe:	6878      	ldr	r0, [r7, #4]
 8007300:	f7ff fe68 	bl	8006fd4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8007304:	6878      	ldr	r0, [r7, #4]
 8007306:	f000 f97f 	bl	8007608 <SDMMC_GetCmdResp2>
 800730a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800730c:	69fb      	ldr	r3, [r7, #28]
}
 800730e:	4618      	mov	r0, r3
 8007310:	3720      	adds	r7, #32
 8007312:	46bd      	mov	sp, r7
 8007314:	bd80      	pop	{r7, pc}

08007316 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8007316:	b580      	push	{r7, lr}
 8007318:	b088      	sub	sp, #32
 800731a:	af00      	add	r7, sp, #0
 800731c:	6078      	str	r0, [r7, #4]
 800731e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8007320:	683b      	ldr	r3, [r7, #0]
 8007322:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8007324:	2309      	movs	r3, #9
 8007326:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8007328:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800732c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800732e:	2300      	movs	r3, #0
 8007330:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007332:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8007336:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007338:	f107 0308 	add.w	r3, r7, #8
 800733c:	4619      	mov	r1, r3
 800733e:	6878      	ldr	r0, [r7, #4]
 8007340:	f7ff fe48 	bl	8006fd4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8007344:	6878      	ldr	r0, [r7, #4]
 8007346:	f000 f95f 	bl	8007608 <SDMMC_GetCmdResp2>
 800734a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800734c:	69fb      	ldr	r3, [r7, #28]
}
 800734e:	4618      	mov	r0, r3
 8007350:	3720      	adds	r7, #32
 8007352:	46bd      	mov	sp, r7
 8007354:	bd80      	pop	{r7, pc}

08007356 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pRCA: Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 8007356:	b580      	push	{r7, lr}
 8007358:	b088      	sub	sp, #32
 800735a:	af00      	add	r7, sp, #0
 800735c:	6078      	str	r0, [r7, #4]
 800735e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8007360:	2300      	movs	r3, #0
 8007362:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8007364:	2303      	movs	r3, #3
 8007366:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007368:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800736c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800736e:	2300      	movs	r3, #0
 8007370:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007372:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8007376:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007378:	f107 0308 	add.w	r3, r7, #8
 800737c:	4619      	mov	r1, r3
 800737e:	6878      	ldr	r0, [r7, #4]
 8007380:	f7ff fe28 	bl	8006fd4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8007384:	683a      	ldr	r2, [r7, #0]
 8007386:	2103      	movs	r1, #3
 8007388:	6878      	ldr	r0, [r7, #4]
 800738a:	f000 f9c7 	bl	800771c <SDMMC_GetCmdResp6>
 800738e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007390:	69fb      	ldr	r3, [r7, #28]
}
 8007392:	4618      	mov	r0, r3
 8007394:	3720      	adds	r7, #32
 8007396:	46bd      	mov	sp, r7
 8007398:	bd80      	pop	{r7, pc}

0800739a <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800739a:	b580      	push	{r7, lr}
 800739c:	b088      	sub	sp, #32
 800739e:	af00      	add	r7, sp, #0
 80073a0:	6078      	str	r0, [r7, #4]
 80073a2:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 80073a4:	683b      	ldr	r3, [r7, #0]
 80073a6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 80073a8:	230d      	movs	r3, #13
 80073aa:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80073ac:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80073b0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80073b2:	2300      	movs	r3, #0
 80073b4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80073b6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80073ba:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80073bc:	f107 0308 	add.w	r3, r7, #8
 80073c0:	4619      	mov	r1, r3
 80073c2:	6878      	ldr	r0, [r7, #4]
 80073c4:	f7ff fe06 	bl	8006fd4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 80073c8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80073cc:	210d      	movs	r1, #13
 80073ce:	6878      	ldr	r0, [r7, #4]
 80073d0:	f000 f828 	bl	8007424 <SDMMC_GetCmdResp1>
 80073d4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80073d6:	69fb      	ldr	r3, [r7, #28]
}
 80073d8:	4618      	mov	r0, r3
 80073da:	3720      	adds	r7, #32
 80073dc:	46bd      	mov	sp, r7
 80073de:	bd80      	pop	{r7, pc}

080073e0 <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 80073e0:	b580      	push	{r7, lr}
 80073e2:	b088      	sub	sp, #32
 80073e4:	af00      	add	r7, sp, #0
 80073e6:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 80073e8:	2300      	movs	r3, #0
 80073ea:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 80073ec:	230d      	movs	r3, #13
 80073ee:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80073f0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80073f4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80073f6:	2300      	movs	r3, #0
 80073f8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80073fa:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80073fe:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007400:	f107 0308 	add.w	r3, r7, #8
 8007404:	4619      	mov	r1, r3
 8007406:	6878      	ldr	r0, [r7, #4]
 8007408:	f7ff fde4 	bl	8006fd4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 800740c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007410:	210d      	movs	r1, #13
 8007412:	6878      	ldr	r0, [r7, #4]
 8007414:	f000 f806 	bl	8007424 <SDMMC_GetCmdResp1>
 8007418:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800741a:	69fb      	ldr	r3, [r7, #28]
}
 800741c:	4618      	mov	r0, r3
 800741e:	3720      	adds	r7, #32
 8007420:	46bd      	mov	sp, r7
 8007422:	bd80      	pop	{r7, pc}

08007424 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 8007424:	b580      	push	{r7, lr}
 8007426:	b088      	sub	sp, #32
 8007428:	af00      	add	r7, sp, #0
 800742a:	60f8      	str	r0, [r7, #12]
 800742c:	460b      	mov	r3, r1
 800742e:	607a      	str	r2, [r7, #4]
 8007430:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8007432:	4b70      	ldr	r3, [pc, #448]	@ (80075f4 <SDMMC_GetCmdResp1+0x1d0>)
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	4a70      	ldr	r2, [pc, #448]	@ (80075f8 <SDMMC_GetCmdResp1+0x1d4>)
 8007438:	fba2 2303 	umull	r2, r3, r2, r3
 800743c:	0a5a      	lsrs	r2, r3, #9
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	fb02 f303 	mul.w	r3, r2, r3
 8007444:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 8007446:	69fb      	ldr	r3, [r7, #28]
 8007448:	1e5a      	subs	r2, r3, #1
 800744a:	61fa      	str	r2, [r7, #28]
 800744c:	2b00      	cmp	r3, #0
 800744e:	d102      	bne.n	8007456 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007450:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8007454:	e0c9      	b.n	80075ea <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800745a:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 800745c:	69ba      	ldr	r2, [r7, #24]
 800745e:	4b67      	ldr	r3, [pc, #412]	@ (80075fc <SDMMC_GetCmdResp1+0x1d8>)
 8007460:	4013      	ands	r3, r2
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8007462:	2b00      	cmp	r3, #0
 8007464:	d0ef      	beq.n	8007446 <SDMMC_GetCmdResp1+0x22>
 8007466:	69bb      	ldr	r3, [r7, #24]
 8007468:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800746c:	2b00      	cmp	r3, #0
 800746e:	d1ea      	bne.n	8007446 <SDMMC_GetCmdResp1+0x22>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007474:	f003 0304 	and.w	r3, r3, #4
 8007478:	2b00      	cmp	r3, #0
 800747a:	d004      	beq.n	8007486 <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	2204      	movs	r2, #4
 8007480:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007482:	2304      	movs	r3, #4
 8007484:	e0b1      	b.n	80075ea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800748a:	f003 0301 	and.w	r3, r3, #1
 800748e:	2b00      	cmp	r3, #0
 8007490:	d004      	beq.n	800749c <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	2201      	movs	r2, #1
 8007496:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007498:	2301      	movs	r3, #1
 800749a:	e0a6      	b.n	80075ea <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	4a58      	ldr	r2, [pc, #352]	@ (8007600 <SDMMC_GetCmdResp1+0x1dc>)
 80074a0:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 80074a2:	68f8      	ldr	r0, [r7, #12]
 80074a4:	f7ff fdc0 	bl	8007028 <SDMMC_GetCommandResponse>
 80074a8:	4603      	mov	r3, r0
 80074aa:	461a      	mov	r2, r3
 80074ac:	7afb      	ldrb	r3, [r7, #11]
 80074ae:	4293      	cmp	r3, r2
 80074b0:	d001      	beq.n	80074b6 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80074b2:	2301      	movs	r3, #1
 80074b4:	e099      	b.n	80075ea <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 80074b6:	2100      	movs	r1, #0
 80074b8:	68f8      	ldr	r0, [r7, #12]
 80074ba:	f7ff fdc2 	bl	8007042 <SDMMC_GetResponse>
 80074be:	6178      	str	r0, [r7, #20]

  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 80074c0:	697a      	ldr	r2, [r7, #20]
 80074c2:	4b50      	ldr	r3, [pc, #320]	@ (8007604 <SDMMC_GetCmdResp1+0x1e0>)
 80074c4:	4013      	ands	r3, r2
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d101      	bne.n	80074ce <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 80074ca:	2300      	movs	r3, #0
 80074cc:	e08d      	b.n	80075ea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 80074ce:	697b      	ldr	r3, [r7, #20]
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	da02      	bge.n	80074da <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 80074d4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80074d8:	e087      	b.n	80075ea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 80074da:	697b      	ldr	r3, [r7, #20]
 80074dc:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	d001      	beq.n	80074e8 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 80074e4:	2340      	movs	r3, #64	@ 0x40
 80074e6:	e080      	b.n	80075ea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 80074e8:	697b      	ldr	r3, [r7, #20]
 80074ea:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d001      	beq.n	80074f6 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 80074f2:	2380      	movs	r3, #128	@ 0x80
 80074f4:	e079      	b.n	80075ea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 80074f6:	697b      	ldr	r3, [r7, #20]
 80074f8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	d002      	beq.n	8007506 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8007500:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8007504:	e071      	b.n	80075ea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8007506:	697b      	ldr	r3, [r7, #20]
 8007508:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800750c:	2b00      	cmp	r3, #0
 800750e:	d002      	beq.n	8007516 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8007510:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007514:	e069      	b.n	80075ea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8007516:	697b      	ldr	r3, [r7, #20]
 8007518:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800751c:	2b00      	cmp	r3, #0
 800751e:	d002      	beq.n	8007526 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8007520:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007524:	e061      	b.n	80075ea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8007526:	697b      	ldr	r3, [r7, #20]
 8007528:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800752c:	2b00      	cmp	r3, #0
 800752e:	d002      	beq.n	8007536 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8007530:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8007534:	e059      	b.n	80075ea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8007536:	697b      	ldr	r3, [r7, #20]
 8007538:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800753c:	2b00      	cmp	r3, #0
 800753e:	d002      	beq.n	8007546 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8007540:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8007544:	e051      	b.n	80075ea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8007546:	697b      	ldr	r3, [r7, #20]
 8007548:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800754c:	2b00      	cmp	r3, #0
 800754e:	d002      	beq.n	8007556 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8007550:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8007554:	e049      	b.n	80075ea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8007556:	697b      	ldr	r3, [r7, #20]
 8007558:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800755c:	2b00      	cmp	r3, #0
 800755e:	d002      	beq.n	8007566 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8007560:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8007564:	e041      	b.n	80075ea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8007566:	697b      	ldr	r3, [r7, #20]
 8007568:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800756c:	2b00      	cmp	r3, #0
 800756e:	d002      	beq.n	8007576 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8007570:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007574:	e039      	b.n	80075ea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8007576:	697b      	ldr	r3, [r7, #20]
 8007578:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800757c:	2b00      	cmp	r3, #0
 800757e:	d002      	beq.n	8007586 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8007580:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8007584:	e031      	b.n	80075ea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8007586:	697b      	ldr	r3, [r7, #20]
 8007588:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800758c:	2b00      	cmp	r3, #0
 800758e:	d002      	beq.n	8007596 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8007590:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8007594:	e029      	b.n	80075ea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8007596:	697b      	ldr	r3, [r7, #20]
 8007598:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800759c:	2b00      	cmp	r3, #0
 800759e:	d002      	beq.n	80075a6 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 80075a0:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 80075a4:	e021      	b.n	80075ea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 80075a6:	697b      	ldr	r3, [r7, #20]
 80075a8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	d002      	beq.n	80075b6 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 80075b0:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80075b4:	e019      	b.n	80075ea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 80075b6:	697b      	ldr	r3, [r7, #20]
 80075b8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80075bc:	2b00      	cmp	r3, #0
 80075be:	d002      	beq.n	80075c6 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 80075c0:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80075c4:	e011      	b.n	80075ea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 80075c6:	697b      	ldr	r3, [r7, #20]
 80075c8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	d002      	beq.n	80075d6 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 80075d0:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80075d4:	e009      	b.n	80075ea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 80075d6:	697b      	ldr	r3, [r7, #20]
 80075d8:	f003 0308 	and.w	r3, r3, #8
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d002      	beq.n	80075e6 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 80075e0:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 80075e4:	e001      	b.n	80075ea <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80075e6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 80075ea:	4618      	mov	r0, r3
 80075ec:	3720      	adds	r7, #32
 80075ee:	46bd      	mov	sp, r7
 80075f0:	bd80      	pop	{r7, pc}
 80075f2:	bf00      	nop
 80075f4:	24000000 	.word	0x24000000
 80075f8:	10624dd3 	.word	0x10624dd3
 80075fc:	00200045 	.word	0x00200045
 8007600:	002000c5 	.word	0x002000c5
 8007604:	fdffe008 	.word	0xfdffe008

08007608 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 8007608:	b480      	push	{r7}
 800760a:	b085      	sub	sp, #20
 800760c:	af00      	add	r7, sp, #0
 800760e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8007610:	4b1f      	ldr	r3, [pc, #124]	@ (8007690 <SDMMC_GetCmdResp2+0x88>)
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	4a1f      	ldr	r2, [pc, #124]	@ (8007694 <SDMMC_GetCmdResp2+0x8c>)
 8007616:	fba2 2303 	umull	r2, r3, r2, r3
 800761a:	0a5b      	lsrs	r3, r3, #9
 800761c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007620:	fb02 f303 	mul.w	r3, r2, r3
 8007624:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	1e5a      	subs	r2, r3, #1
 800762a:	60fa      	str	r2, [r7, #12]
 800762c:	2b00      	cmp	r3, #0
 800762e:	d102      	bne.n	8007636 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007630:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8007634:	e026      	b.n	8007684 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800763a:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800763c:	68bb      	ldr	r3, [r7, #8]
 800763e:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8007642:	2b00      	cmp	r3, #0
 8007644:	d0ef      	beq.n	8007626 <SDMMC_GetCmdResp2+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8007646:	68bb      	ldr	r3, [r7, #8]
 8007648:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800764c:	2b00      	cmp	r3, #0
 800764e:	d1ea      	bne.n	8007626 <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007654:	f003 0304 	and.w	r3, r3, #4
 8007658:	2b00      	cmp	r3, #0
 800765a:	d004      	beq.n	8007666 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	2204      	movs	r2, #4
 8007660:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007662:	2304      	movs	r3, #4
 8007664:	e00e      	b.n	8007684 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800766a:	f003 0301 	and.w	r3, r3, #1
 800766e:	2b00      	cmp	r3, #0
 8007670:	d004      	beq.n	800767c <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	2201      	movs	r2, #1
 8007676:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007678:	2301      	movs	r3, #1
 800767a:	e003      	b.n	8007684 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	4a06      	ldr	r2, [pc, #24]	@ (8007698 <SDMMC_GetCmdResp2+0x90>)
 8007680:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 8007682:	2300      	movs	r3, #0
}
 8007684:	4618      	mov	r0, r3
 8007686:	3714      	adds	r7, #20
 8007688:	46bd      	mov	sp, r7
 800768a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800768e:	4770      	bx	lr
 8007690:	24000000 	.word	0x24000000
 8007694:	10624dd3 	.word	0x10624dd3
 8007698:	002000c5 	.word	0x002000c5

0800769c <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 800769c:	b480      	push	{r7}
 800769e:	b085      	sub	sp, #20
 80076a0:	af00      	add	r7, sp, #0
 80076a2:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 80076a4:	4b1a      	ldr	r3, [pc, #104]	@ (8007710 <SDMMC_GetCmdResp3+0x74>)
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	4a1a      	ldr	r2, [pc, #104]	@ (8007714 <SDMMC_GetCmdResp3+0x78>)
 80076aa:	fba2 2303 	umull	r2, r3, r2, r3
 80076ae:	0a5b      	lsrs	r3, r3, #9
 80076b0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80076b4:	fb02 f303 	mul.w	r3, r2, r3
 80076b8:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	1e5a      	subs	r2, r3, #1
 80076be:	60fa      	str	r2, [r7, #12]
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	d102      	bne.n	80076ca <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80076c4:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80076c8:	e01b      	b.n	8007702 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80076ce:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80076d0:	68bb      	ldr	r3, [r7, #8]
 80076d2:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d0ef      	beq.n	80076ba <SDMMC_GetCmdResp3+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 80076da:	68bb      	ldr	r3, [r7, #8]
 80076dc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	d1ea      	bne.n	80076ba <SDMMC_GetCmdResp3+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80076e8:	f003 0304 	and.w	r3, r3, #4
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	d004      	beq.n	80076fa <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	2204      	movs	r2, #4
 80076f4:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80076f6:	2304      	movs	r3, #4
 80076f8:	e003      	b.n	8007702 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	4a06      	ldr	r2, [pc, #24]	@ (8007718 <SDMMC_GetCmdResp3+0x7c>)
 80076fe:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 8007700:	2300      	movs	r3, #0
}
 8007702:	4618      	mov	r0, r3
 8007704:	3714      	adds	r7, #20
 8007706:	46bd      	mov	sp, r7
 8007708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800770c:	4770      	bx	lr
 800770e:	bf00      	nop
 8007710:	24000000 	.word	0x24000000
 8007714:	10624dd3 	.word	0x10624dd3
 8007718:	002000c5 	.word	0x002000c5

0800771c <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800771c:	b580      	push	{r7, lr}
 800771e:	b088      	sub	sp, #32
 8007720:	af00      	add	r7, sp, #0
 8007722:	60f8      	str	r0, [r7, #12]
 8007724:	460b      	mov	r3, r1
 8007726:	607a      	str	r2, [r7, #4]
 8007728:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800772a:	4b35      	ldr	r3, [pc, #212]	@ (8007800 <SDMMC_GetCmdResp6+0xe4>)
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	4a35      	ldr	r2, [pc, #212]	@ (8007804 <SDMMC_GetCmdResp6+0xe8>)
 8007730:	fba2 2303 	umull	r2, r3, r2, r3
 8007734:	0a5b      	lsrs	r3, r3, #9
 8007736:	f241 3288 	movw	r2, #5000	@ 0x1388
 800773a:	fb02 f303 	mul.w	r3, r2, r3
 800773e:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 8007740:	69fb      	ldr	r3, [r7, #28]
 8007742:	1e5a      	subs	r2, r3, #1
 8007744:	61fa      	str	r2, [r7, #28]
 8007746:	2b00      	cmp	r3, #0
 8007748:	d102      	bne.n	8007750 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800774a:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800774e:	e052      	b.n	80077f6 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007754:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8007756:	69bb      	ldr	r3, [r7, #24]
 8007758:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800775c:	2b00      	cmp	r3, #0
 800775e:	d0ef      	beq.n	8007740 <SDMMC_GetCmdResp6+0x24>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8007760:	69bb      	ldr	r3, [r7, #24]
 8007762:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8007766:	2b00      	cmp	r3, #0
 8007768:	d1ea      	bne.n	8007740 <SDMMC_GetCmdResp6+0x24>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800776e:	f003 0304 	and.w	r3, r3, #4
 8007772:	2b00      	cmp	r3, #0
 8007774:	d004      	beq.n	8007780 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	2204      	movs	r2, #4
 800777a:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800777c:	2304      	movs	r3, #4
 800777e:	e03a      	b.n	80077f6 <SDMMC_GetCmdResp6+0xda>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007784:	f003 0301 	and.w	r3, r3, #1
 8007788:	2b00      	cmp	r3, #0
 800778a:	d004      	beq.n	8007796 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	2201      	movs	r2, #1
 8007790:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007792:	2301      	movs	r3, #1
 8007794:	e02f      	b.n	80077f6 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8007796:	68f8      	ldr	r0, [r7, #12]
 8007798:	f7ff fc46 	bl	8007028 <SDMMC_GetCommandResponse>
 800779c:	4603      	mov	r3, r0
 800779e:	461a      	mov	r2, r3
 80077a0:	7afb      	ldrb	r3, [r7, #11]
 80077a2:	4293      	cmp	r3, r2
 80077a4:	d001      	beq.n	80077aa <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80077a6:	2301      	movs	r3, #1
 80077a8:	e025      	b.n	80077f6 <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	4a16      	ldr	r2, [pc, #88]	@ (8007808 <SDMMC_GetCmdResp6+0xec>)
 80077ae:	639a      	str	r2, [r3, #56]	@ 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 80077b0:	2100      	movs	r1, #0
 80077b2:	68f8      	ldr	r0, [r7, #12]
 80077b4:	f7ff fc45 	bl	8007042 <SDMMC_GetResponse>
 80077b8:	6178      	str	r0, [r7, #20]

  if ((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD |
 80077ba:	697b      	ldr	r3, [r7, #20]
 80077bc:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	d106      	bne.n	80077d2 <SDMMC_GetCmdResp6+0xb6>
                      SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
  {
    *pRCA = (uint16_t)(response_r1 >> 16);
 80077c4:	697b      	ldr	r3, [r7, #20]
 80077c6:	0c1b      	lsrs	r3, r3, #16
 80077c8:	b29a      	uxth	r2, r3
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 80077ce:	2300      	movs	r3, #0
 80077d0:	e011      	b.n	80077f6 <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 80077d2:	697b      	ldr	r3, [r7, #20]
 80077d4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d002      	beq.n	80077e2 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80077dc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80077e0:	e009      	b.n	80077f6 <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 80077e2:	697b      	ldr	r3, [r7, #20]
 80077e4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d002      	beq.n	80077f2 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80077ec:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80077f0:	e001      	b.n	80077f6 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80077f2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 80077f6:	4618      	mov	r0, r3
 80077f8:	3720      	adds	r7, #32
 80077fa:	46bd      	mov	sp, r7
 80077fc:	bd80      	pop	{r7, pc}
 80077fe:	bf00      	nop
 8007800:	24000000 	.word	0x24000000
 8007804:	10624dd3 	.word	0x10624dd3
 8007808:	002000c5 	.word	0x002000c5

0800780c <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 800780c:	b480      	push	{r7}
 800780e:	b085      	sub	sp, #20
 8007810:	af00      	add	r7, sp, #0
 8007812:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8007814:	4b22      	ldr	r3, [pc, #136]	@ (80078a0 <SDMMC_GetCmdResp7+0x94>)
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	4a22      	ldr	r2, [pc, #136]	@ (80078a4 <SDMMC_GetCmdResp7+0x98>)
 800781a:	fba2 2303 	umull	r2, r3, r2, r3
 800781e:	0a5b      	lsrs	r3, r3, #9
 8007820:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007824:	fb02 f303 	mul.w	r3, r2, r3
 8007828:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	1e5a      	subs	r2, r3, #1
 800782e:	60fa      	str	r2, [r7, #12]
 8007830:	2b00      	cmp	r3, #0
 8007832:	d102      	bne.n	800783a <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007834:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8007838:	e02c      	b.n	8007894 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800783e:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8007840:	68bb      	ldr	r3, [r7, #8]
 8007842:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8007846:	2b00      	cmp	r3, #0
 8007848:	d0ef      	beq.n	800782a <SDMMC_GetCmdResp7+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800784a:	68bb      	ldr	r3, [r7, #8]
 800784c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8007850:	2b00      	cmp	r3, #0
 8007852:	d1ea      	bne.n	800782a <SDMMC_GetCmdResp7+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007858:	f003 0304 	and.w	r3, r3, #4
 800785c:	2b00      	cmp	r3, #0
 800785e:	d004      	beq.n	800786a <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	2204      	movs	r2, #4
 8007864:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007866:	2304      	movs	r3, #4
 8007868:	e014      	b.n	8007894 <SDMMC_GetCmdResp7+0x88>
  }

  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800786e:	f003 0301 	and.w	r3, r3, #1
 8007872:	2b00      	cmp	r3, #0
 8007874:	d004      	beq.n	8007880 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	2201      	movs	r2, #1
 800787a:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800787c:	2301      	movs	r3, #1
 800787e:	e009      	b.n	8007894 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007884:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007888:	2b00      	cmp	r3, #0
 800788a:	d002      	beq.n	8007892 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	2240      	movs	r2, #64	@ 0x40
 8007890:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 8007892:	2300      	movs	r3, #0

}
 8007894:	4618      	mov	r0, r3
 8007896:	3714      	adds	r7, #20
 8007898:	46bd      	mov	sp, r7
 800789a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800789e:	4770      	bx	lr
 80078a0:	24000000 	.word	0x24000000
 80078a4:	10624dd3 	.word	0x10624dd3

080078a8 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 80078a8:	b480      	push	{r7}
 80078aa:	b085      	sub	sp, #20
 80078ac:	af00      	add	r7, sp, #0
 80078ae:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 80078b0:	4b11      	ldr	r3, [pc, #68]	@ (80078f8 <SDMMC_GetCmdError+0x50>)
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	4a11      	ldr	r2, [pc, #68]	@ (80078fc <SDMMC_GetCmdError+0x54>)
 80078b6:	fba2 2303 	umull	r2, r3, r2, r3
 80078ba:	0a5b      	lsrs	r3, r3, #9
 80078bc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80078c0:	fb02 f303 	mul.w	r3, r2, r3
 80078c4:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	1e5a      	subs	r2, r3, #1
 80078ca:	60fa      	str	r2, [r7, #12]
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d102      	bne.n	80078d6 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80078d0:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80078d4:	e009      	b.n	80078ea <SDMMC_GetCmdError+0x42>
    }

  } while (!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80078da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80078de:	2b00      	cmp	r3, #0
 80078e0:	d0f1      	beq.n	80078c6 <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	4a06      	ldr	r2, [pc, #24]	@ (8007900 <SDMMC_GetCmdError+0x58>)
 80078e6:	639a      	str	r2, [r3, #56]	@ 0x38

  return SDMMC_ERROR_NONE;
 80078e8:	2300      	movs	r3, #0
}
 80078ea:	4618      	mov	r0, r3
 80078ec:	3714      	adds	r7, #20
 80078ee:	46bd      	mov	sp, r7
 80078f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078f4:	4770      	bx	lr
 80078f6:	bf00      	nop
 80078f8:	24000000 	.word	0x24000000
 80078fc:	10624dd3 	.word	0x10624dd3
 8007900:	002000c5 	.word	0x002000c5

08007904 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007904:	b084      	sub	sp, #16
 8007906:	b580      	push	{r7, lr}
 8007908:	b084      	sub	sp, #16
 800790a:	af00      	add	r7, sp, #0
 800790c:	6078      	str	r0, [r7, #4]
 800790e:	f107 001c 	add.w	r0, r7, #28
 8007912:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007916:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007918:	2b01      	cmp	r3, #1
 800791a:	d120      	bne.n	800795e <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007920:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	68da      	ldr	r2, [r3, #12]
 800792c:	4b2a      	ldr	r3, [pc, #168]	@ (80079d8 <USB_CoreInit+0xd4>)
 800792e:	4013      	ands	r3, r2
 8007930:	687a      	ldr	r2, [r7, #4]
 8007932:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	68db      	ldr	r3, [r3, #12]
 8007938:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8007940:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007942:	2b01      	cmp	r3, #1
 8007944:	d105      	bne.n	8007952 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	68db      	ldr	r3, [r3, #12]
 800794a:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007952:	6878      	ldr	r0, [r7, #4]
 8007954:	f000 fa60 	bl	8007e18 <USB_CoreReset>
 8007958:	4603      	mov	r3, r0
 800795a:	73fb      	strb	r3, [r7, #15]
 800795c:	e01a      	b.n	8007994 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	68db      	ldr	r3, [r3, #12]
 8007962:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800796a:	6878      	ldr	r0, [r7, #4]
 800796c:	f000 fa54 	bl	8007e18 <USB_CoreReset>
 8007970:	4603      	mov	r3, r0
 8007972:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8007974:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007976:	2b00      	cmp	r3, #0
 8007978:	d106      	bne.n	8007988 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800797e:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	639a      	str	r2, [r3, #56]	@ 0x38
 8007986:	e005      	b.n	8007994 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800798c:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8007994:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007996:	2b01      	cmp	r3, #1
 8007998:	d116      	bne.n	80079c8 <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800799e:	b29a      	uxth	r2, r3
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	65da      	str	r2, [r3, #92]	@ 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80079a8:	4b0c      	ldr	r3, [pc, #48]	@ (80079dc <USB_CoreInit+0xd8>)
 80079aa:	4313      	orrs	r3, r2
 80079ac:	687a      	ldr	r2, [r7, #4]
 80079ae:	65d3      	str	r3, [r2, #92]	@ 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	689b      	ldr	r3, [r3, #8]
 80079b4:	f043 0206 	orr.w	r2, r3, #6
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	689b      	ldr	r3, [r3, #8]
 80079c0:	f043 0220 	orr.w	r2, r3, #32
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80079c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80079ca:	4618      	mov	r0, r3
 80079cc:	3710      	adds	r7, #16
 80079ce:	46bd      	mov	sp, r7
 80079d0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80079d4:	b004      	add	sp, #16
 80079d6:	4770      	bx	lr
 80079d8:	ffbdffbf 	.word	0xffbdffbf
 80079dc:	03ee0000 	.word	0x03ee0000

080079e0 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80079e0:	b480      	push	{r7}
 80079e2:	b083      	sub	sp, #12
 80079e4:	af00      	add	r7, sp, #0
 80079e6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	689b      	ldr	r3, [r3, #8]
 80079ec:	f023 0201 	bic.w	r2, r3, #1
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80079f4:	2300      	movs	r3, #0
}
 80079f6:	4618      	mov	r0, r3
 80079f8:	370c      	adds	r7, #12
 80079fa:	46bd      	mov	sp, r7
 80079fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a00:	4770      	bx	lr

08007a02 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8007a02:	b580      	push	{r7, lr}
 8007a04:	b082      	sub	sp, #8
 8007a06:	af00      	add	r7, sp, #0
 8007a08:	6078      	str	r0, [r7, #4]
 8007a0a:	460b      	mov	r3, r1
 8007a0c:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	68db      	ldr	r3, [r3, #12]
 8007a12:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8007a1a:	78fb      	ldrb	r3, [r7, #3]
 8007a1c:	2b01      	cmp	r3, #1
 8007a1e:	d106      	bne.n	8007a2e <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	68db      	ldr	r3, [r3, #12]
 8007a24:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	60da      	str	r2, [r3, #12]
 8007a2c:	e00b      	b.n	8007a46 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8007a2e:	78fb      	ldrb	r3, [r7, #3]
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	d106      	bne.n	8007a42 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	68db      	ldr	r3, [r3, #12]
 8007a38:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	60da      	str	r2, [r3, #12]
 8007a40:	e001      	b.n	8007a46 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8007a42:	2301      	movs	r3, #1
 8007a44:	e003      	b.n	8007a4e <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8007a46:	2032      	movs	r0, #50	@ 0x32
 8007a48:	f7f9 fbc8 	bl	80011dc <HAL_Delay>

  return HAL_OK;
 8007a4c:	2300      	movs	r3, #0
}
 8007a4e:	4618      	mov	r0, r3
 8007a50:	3708      	adds	r7, #8
 8007a52:	46bd      	mov	sp, r7
 8007a54:	bd80      	pop	{r7, pc}
	...

08007a58 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007a58:	b084      	sub	sp, #16
 8007a5a:	b580      	push	{r7, lr}
 8007a5c:	b086      	sub	sp, #24
 8007a5e:	af00      	add	r7, sp, #0
 8007a60:	6078      	str	r0, [r7, #4]
 8007a62:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8007a66:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8007a6a:	2300      	movs	r3, #0
 8007a6c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8007a72:	2300      	movs	r3, #0
 8007a74:	613b      	str	r3, [r7, #16]
 8007a76:	e009      	b.n	8007a8c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8007a78:	687a      	ldr	r2, [r7, #4]
 8007a7a:	693b      	ldr	r3, [r7, #16]
 8007a7c:	3340      	adds	r3, #64	@ 0x40
 8007a7e:	009b      	lsls	r3, r3, #2
 8007a80:	4413      	add	r3, r2
 8007a82:	2200      	movs	r2, #0
 8007a84:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8007a86:	693b      	ldr	r3, [r7, #16]
 8007a88:	3301      	adds	r3, #1
 8007a8a:	613b      	str	r3, [r7, #16]
 8007a8c:	693b      	ldr	r3, [r7, #16]
 8007a8e:	2b0e      	cmp	r3, #14
 8007a90:	d9f2      	bls.n	8007a78 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8007a92:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	d11c      	bne.n	8007ad2 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007a9e:	685b      	ldr	r3, [r3, #4]
 8007aa0:	68fa      	ldr	r2, [r7, #12]
 8007aa2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007aa6:	f043 0302 	orr.w	r3, r3, #2
 8007aaa:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007ab0:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	601a      	str	r2, [r3, #0]
 8007ad0:	e005      	b.n	8007ade <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007ad6:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8007ae4:	461a      	mov	r2, r3
 8007ae6:	2300      	movs	r3, #0
 8007ae8:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007af0:	4619      	mov	r1, r3
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007af8:	461a      	mov	r2, r3
 8007afa:	680b      	ldr	r3, [r1, #0]
 8007afc:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007afe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b00:	2b01      	cmp	r3, #1
 8007b02:	d10c      	bne.n	8007b1e <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8007b04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	d104      	bne.n	8007b14 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8007b0a:	2100      	movs	r1, #0
 8007b0c:	6878      	ldr	r0, [r7, #4]
 8007b0e:	f000 f949 	bl	8007da4 <USB_SetDevSpeed>
 8007b12:	e008      	b.n	8007b26 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8007b14:	2101      	movs	r1, #1
 8007b16:	6878      	ldr	r0, [r7, #4]
 8007b18:	f000 f944 	bl	8007da4 <USB_SetDevSpeed>
 8007b1c:	e003      	b.n	8007b26 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8007b1e:	2103      	movs	r1, #3
 8007b20:	6878      	ldr	r0, [r7, #4]
 8007b22:	f000 f93f 	bl	8007da4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007b26:	2110      	movs	r1, #16
 8007b28:	6878      	ldr	r0, [r7, #4]
 8007b2a:	f000 f8f3 	bl	8007d14 <USB_FlushTxFifo>
 8007b2e:	4603      	mov	r3, r0
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	d001      	beq.n	8007b38 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8007b34:	2301      	movs	r3, #1
 8007b36:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007b38:	6878      	ldr	r0, [r7, #4]
 8007b3a:	f000 f911 	bl	8007d60 <USB_FlushRxFifo>
 8007b3e:	4603      	mov	r3, r0
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	d001      	beq.n	8007b48 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8007b44:	2301      	movs	r3, #1
 8007b46:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007b4e:	461a      	mov	r2, r3
 8007b50:	2300      	movs	r3, #0
 8007b52:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007b5a:	461a      	mov	r2, r3
 8007b5c:	2300      	movs	r3, #0
 8007b5e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007b66:	461a      	mov	r2, r3
 8007b68:	2300      	movs	r3, #0
 8007b6a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007b6c:	2300      	movs	r3, #0
 8007b6e:	613b      	str	r3, [r7, #16]
 8007b70:	e043      	b.n	8007bfa <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007b72:	693b      	ldr	r3, [r7, #16]
 8007b74:	015a      	lsls	r2, r3, #5
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	4413      	add	r3, r2
 8007b7a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007b84:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007b88:	d118      	bne.n	8007bbc <USB_DevInit+0x164>
    {
      if (i == 0U)
 8007b8a:	693b      	ldr	r3, [r7, #16]
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	d10a      	bne.n	8007ba6 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8007b90:	693b      	ldr	r3, [r7, #16]
 8007b92:	015a      	lsls	r2, r3, #5
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	4413      	add	r3, r2
 8007b98:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007b9c:	461a      	mov	r2, r3
 8007b9e:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8007ba2:	6013      	str	r3, [r2, #0]
 8007ba4:	e013      	b.n	8007bce <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8007ba6:	693b      	ldr	r3, [r7, #16]
 8007ba8:	015a      	lsls	r2, r3, #5
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	4413      	add	r3, r2
 8007bae:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007bb2:	461a      	mov	r2, r3
 8007bb4:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8007bb8:	6013      	str	r3, [r2, #0]
 8007bba:	e008      	b.n	8007bce <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8007bbc:	693b      	ldr	r3, [r7, #16]
 8007bbe:	015a      	lsls	r2, r3, #5
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	4413      	add	r3, r2
 8007bc4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007bc8:	461a      	mov	r2, r3
 8007bca:	2300      	movs	r3, #0
 8007bcc:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8007bce:	693b      	ldr	r3, [r7, #16]
 8007bd0:	015a      	lsls	r2, r3, #5
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	4413      	add	r3, r2
 8007bd6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007bda:	461a      	mov	r2, r3
 8007bdc:	2300      	movs	r3, #0
 8007bde:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8007be0:	693b      	ldr	r3, [r7, #16]
 8007be2:	015a      	lsls	r2, r3, #5
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	4413      	add	r3, r2
 8007be8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007bec:	461a      	mov	r2, r3
 8007bee:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8007bf2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007bf4:	693b      	ldr	r3, [r7, #16]
 8007bf6:	3301      	adds	r3, #1
 8007bf8:	613b      	str	r3, [r7, #16]
 8007bfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007bfc:	693a      	ldr	r2, [r7, #16]
 8007bfe:	429a      	cmp	r2, r3
 8007c00:	d3b7      	bcc.n	8007b72 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007c02:	2300      	movs	r3, #0
 8007c04:	613b      	str	r3, [r7, #16]
 8007c06:	e043      	b.n	8007c90 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007c08:	693b      	ldr	r3, [r7, #16]
 8007c0a:	015a      	lsls	r2, r3, #5
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	4413      	add	r3, r2
 8007c10:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007c1a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007c1e:	d118      	bne.n	8007c52 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8007c20:	693b      	ldr	r3, [r7, #16]
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	d10a      	bne.n	8007c3c <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8007c26:	693b      	ldr	r3, [r7, #16]
 8007c28:	015a      	lsls	r2, r3, #5
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	4413      	add	r3, r2
 8007c2e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007c32:	461a      	mov	r2, r3
 8007c34:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8007c38:	6013      	str	r3, [r2, #0]
 8007c3a:	e013      	b.n	8007c64 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8007c3c:	693b      	ldr	r3, [r7, #16]
 8007c3e:	015a      	lsls	r2, r3, #5
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	4413      	add	r3, r2
 8007c44:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007c48:	461a      	mov	r2, r3
 8007c4a:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8007c4e:	6013      	str	r3, [r2, #0]
 8007c50:	e008      	b.n	8007c64 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8007c52:	693b      	ldr	r3, [r7, #16]
 8007c54:	015a      	lsls	r2, r3, #5
 8007c56:	68fb      	ldr	r3, [r7, #12]
 8007c58:	4413      	add	r3, r2
 8007c5a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007c5e:	461a      	mov	r2, r3
 8007c60:	2300      	movs	r3, #0
 8007c62:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8007c64:	693b      	ldr	r3, [r7, #16]
 8007c66:	015a      	lsls	r2, r3, #5
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	4413      	add	r3, r2
 8007c6c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007c70:	461a      	mov	r2, r3
 8007c72:	2300      	movs	r3, #0
 8007c74:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8007c76:	693b      	ldr	r3, [r7, #16]
 8007c78:	015a      	lsls	r2, r3, #5
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	4413      	add	r3, r2
 8007c7e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007c82:	461a      	mov	r2, r3
 8007c84:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8007c88:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007c8a:	693b      	ldr	r3, [r7, #16]
 8007c8c:	3301      	adds	r3, #1
 8007c8e:	613b      	str	r3, [r7, #16]
 8007c90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c92:	693a      	ldr	r2, [r7, #16]
 8007c94:	429a      	cmp	r2, r3
 8007c96:	d3b7      	bcc.n	8007c08 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007c9e:	691b      	ldr	r3, [r3, #16]
 8007ca0:	68fa      	ldr	r2, [r7, #12]
 8007ca2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007ca6:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007caa:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	2200      	movs	r2, #0
 8007cb0:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8007cb8:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8007cba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	d105      	bne.n	8007ccc <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	699b      	ldr	r3, [r3, #24]
 8007cc4:	f043 0210 	orr.w	r2, r3, #16
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	699a      	ldr	r2, [r3, #24]
 8007cd0:	4b0e      	ldr	r3, [pc, #56]	@ (8007d0c <USB_DevInit+0x2b4>)
 8007cd2:	4313      	orrs	r3, r2
 8007cd4:	687a      	ldr	r2, [r7, #4]
 8007cd6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8007cd8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	d005      	beq.n	8007cea <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	699b      	ldr	r3, [r3, #24]
 8007ce2:	f043 0208 	orr.w	r2, r3, #8
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8007cea:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007cec:	2b01      	cmp	r3, #1
 8007cee:	d105      	bne.n	8007cfc <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	699a      	ldr	r2, [r3, #24]
 8007cf4:	4b06      	ldr	r3, [pc, #24]	@ (8007d10 <USB_DevInit+0x2b8>)
 8007cf6:	4313      	orrs	r3, r2
 8007cf8:	687a      	ldr	r2, [r7, #4]
 8007cfa:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8007cfc:	7dfb      	ldrb	r3, [r7, #23]
}
 8007cfe:	4618      	mov	r0, r3
 8007d00:	3718      	adds	r7, #24
 8007d02:	46bd      	mov	sp, r7
 8007d04:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007d08:	b004      	add	sp, #16
 8007d0a:	4770      	bx	lr
 8007d0c:	803c3800 	.word	0x803c3800
 8007d10:	40000004 	.word	0x40000004

08007d14 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007d14:	b480      	push	{r7}
 8007d16:	b085      	sub	sp, #20
 8007d18:	af00      	add	r7, sp, #0
 8007d1a:	6078      	str	r0, [r7, #4]
 8007d1c:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8007d1e:	2300      	movs	r3, #0
 8007d20:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007d22:	683b      	ldr	r3, [r7, #0]
 8007d24:	019b      	lsls	r3, r3, #6
 8007d26:	f043 0220 	orr.w	r2, r3, #32
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	3301      	adds	r3, #1
 8007d32:	60fb      	str	r3, [r7, #12]
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	4a09      	ldr	r2, [pc, #36]	@ (8007d5c <USB_FlushTxFifo+0x48>)
 8007d38:	4293      	cmp	r3, r2
 8007d3a:	d901      	bls.n	8007d40 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8007d3c:	2303      	movs	r3, #3
 8007d3e:	e006      	b.n	8007d4e <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	691b      	ldr	r3, [r3, #16]
 8007d44:	f003 0320 	and.w	r3, r3, #32
 8007d48:	2b20      	cmp	r3, #32
 8007d4a:	d0f0      	beq.n	8007d2e <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8007d4c:	2300      	movs	r3, #0
}
 8007d4e:	4618      	mov	r0, r3
 8007d50:	3714      	adds	r7, #20
 8007d52:	46bd      	mov	sp, r7
 8007d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d58:	4770      	bx	lr
 8007d5a:	bf00      	nop
 8007d5c:	00030d40 	.word	0x00030d40

08007d60 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007d60:	b480      	push	{r7}
 8007d62:	b085      	sub	sp, #20
 8007d64:	af00      	add	r7, sp, #0
 8007d66:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8007d68:	2300      	movs	r3, #0
 8007d6a:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	2210      	movs	r2, #16
 8007d70:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8007d72:	68fb      	ldr	r3, [r7, #12]
 8007d74:	3301      	adds	r3, #1
 8007d76:	60fb      	str	r3, [r7, #12]
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	4a09      	ldr	r2, [pc, #36]	@ (8007da0 <USB_FlushRxFifo+0x40>)
 8007d7c:	4293      	cmp	r3, r2
 8007d7e:	d901      	bls.n	8007d84 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8007d80:	2303      	movs	r3, #3
 8007d82:	e006      	b.n	8007d92 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	691b      	ldr	r3, [r3, #16]
 8007d88:	f003 0310 	and.w	r3, r3, #16
 8007d8c:	2b10      	cmp	r3, #16
 8007d8e:	d0f0      	beq.n	8007d72 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8007d90:	2300      	movs	r3, #0
}
 8007d92:	4618      	mov	r0, r3
 8007d94:	3714      	adds	r7, #20
 8007d96:	46bd      	mov	sp, r7
 8007d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d9c:	4770      	bx	lr
 8007d9e:	bf00      	nop
 8007da0:	00030d40 	.word	0x00030d40

08007da4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8007da4:	b480      	push	{r7}
 8007da6:	b085      	sub	sp, #20
 8007da8:	af00      	add	r7, sp, #0
 8007daa:	6078      	str	r0, [r7, #4]
 8007dac:	460b      	mov	r3, r1
 8007dae:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007dba:	681a      	ldr	r2, [r3, #0]
 8007dbc:	78fb      	ldrb	r3, [r7, #3]
 8007dbe:	68f9      	ldr	r1, [r7, #12]
 8007dc0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007dc4:	4313      	orrs	r3, r2
 8007dc6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8007dc8:	2300      	movs	r3, #0
}
 8007dca:	4618      	mov	r0, r3
 8007dcc:	3714      	adds	r7, #20
 8007dce:	46bd      	mov	sp, r7
 8007dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dd4:	4770      	bx	lr

08007dd6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8007dd6:	b480      	push	{r7}
 8007dd8:	b085      	sub	sp, #20
 8007dda:	af00      	add	r7, sp, #0
 8007ddc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	68fa      	ldr	r2, [r7, #12]
 8007dec:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8007df0:	f023 0303 	bic.w	r3, r3, #3
 8007df4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007dfc:	685b      	ldr	r3, [r3, #4]
 8007dfe:	68fa      	ldr	r2, [r7, #12]
 8007e00:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007e04:	f043 0302 	orr.w	r3, r3, #2
 8007e08:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007e0a:	2300      	movs	r3, #0
}
 8007e0c:	4618      	mov	r0, r3
 8007e0e:	3714      	adds	r7, #20
 8007e10:	46bd      	mov	sp, r7
 8007e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e16:	4770      	bx	lr

08007e18 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007e18:	b480      	push	{r7}
 8007e1a:	b085      	sub	sp, #20
 8007e1c:	af00      	add	r7, sp, #0
 8007e1e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8007e20:	2300      	movs	r3, #0
 8007e22:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	3301      	adds	r3, #1
 8007e28:	60fb      	str	r3, [r7, #12]
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	4a13      	ldr	r2, [pc, #76]	@ (8007e7c <USB_CoreReset+0x64>)
 8007e2e:	4293      	cmp	r3, r2
 8007e30:	d901      	bls.n	8007e36 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8007e32:	2303      	movs	r3, #3
 8007e34:	e01b      	b.n	8007e6e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	691b      	ldr	r3, [r3, #16]
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	daf2      	bge.n	8007e24 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007e3e:	2300      	movs	r3, #0
 8007e40:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	691b      	ldr	r3, [r3, #16]
 8007e46:	f043 0201 	orr.w	r2, r3, #1
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8007e4e:	68fb      	ldr	r3, [r7, #12]
 8007e50:	3301      	adds	r3, #1
 8007e52:	60fb      	str	r3, [r7, #12]
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	4a09      	ldr	r2, [pc, #36]	@ (8007e7c <USB_CoreReset+0x64>)
 8007e58:	4293      	cmp	r3, r2
 8007e5a:	d901      	bls.n	8007e60 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007e5c:	2303      	movs	r3, #3
 8007e5e:	e006      	b.n	8007e6e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	691b      	ldr	r3, [r3, #16]
 8007e64:	f003 0301 	and.w	r3, r3, #1
 8007e68:	2b01      	cmp	r3, #1
 8007e6a:	d0f0      	beq.n	8007e4e <USB_CoreReset+0x36>

  return HAL_OK;
 8007e6c:	2300      	movs	r3, #0
}
 8007e6e:	4618      	mov	r0, r3
 8007e70:	3714      	adds	r7, #20
 8007e72:	46bd      	mov	sp, r7
 8007e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e78:	4770      	bx	lr
 8007e7a:	bf00      	nop
 8007e7c:	00030d40 	.word	0x00030d40

08007e80 <memset>:
 8007e80:	4402      	add	r2, r0
 8007e82:	4603      	mov	r3, r0
 8007e84:	4293      	cmp	r3, r2
 8007e86:	d100      	bne.n	8007e8a <memset+0xa>
 8007e88:	4770      	bx	lr
 8007e8a:	f803 1b01 	strb.w	r1, [r3], #1
 8007e8e:	e7f9      	b.n	8007e84 <memset+0x4>

08007e90 <__libc_init_array>:
 8007e90:	b570      	push	{r4, r5, r6, lr}
 8007e92:	4d0d      	ldr	r5, [pc, #52]	@ (8007ec8 <__libc_init_array+0x38>)
 8007e94:	4c0d      	ldr	r4, [pc, #52]	@ (8007ecc <__libc_init_array+0x3c>)
 8007e96:	1b64      	subs	r4, r4, r5
 8007e98:	10a4      	asrs	r4, r4, #2
 8007e9a:	2600      	movs	r6, #0
 8007e9c:	42a6      	cmp	r6, r4
 8007e9e:	d109      	bne.n	8007eb4 <__libc_init_array+0x24>
 8007ea0:	4d0b      	ldr	r5, [pc, #44]	@ (8007ed0 <__libc_init_array+0x40>)
 8007ea2:	4c0c      	ldr	r4, [pc, #48]	@ (8007ed4 <__libc_init_array+0x44>)
 8007ea4:	f000 f818 	bl	8007ed8 <_init>
 8007ea8:	1b64      	subs	r4, r4, r5
 8007eaa:	10a4      	asrs	r4, r4, #2
 8007eac:	2600      	movs	r6, #0
 8007eae:	42a6      	cmp	r6, r4
 8007eb0:	d105      	bne.n	8007ebe <__libc_init_array+0x2e>
 8007eb2:	bd70      	pop	{r4, r5, r6, pc}
 8007eb4:	f855 3b04 	ldr.w	r3, [r5], #4
 8007eb8:	4798      	blx	r3
 8007eba:	3601      	adds	r6, #1
 8007ebc:	e7ee      	b.n	8007e9c <__libc_init_array+0xc>
 8007ebe:	f855 3b04 	ldr.w	r3, [r5], #4
 8007ec2:	4798      	blx	r3
 8007ec4:	3601      	adds	r6, #1
 8007ec6:	e7f2      	b.n	8007eae <__libc_init_array+0x1e>
 8007ec8:	08007f30 	.word	0x08007f30
 8007ecc:	08007f30 	.word	0x08007f30
 8007ed0:	08007f30 	.word	0x08007f30
 8007ed4:	08007f34 	.word	0x08007f34

08007ed8 <_init>:
 8007ed8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007eda:	bf00      	nop
 8007edc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007ede:	bc08      	pop	{r3}
 8007ee0:	469e      	mov	lr, r3
 8007ee2:	4770      	bx	lr

08007ee4 <_fini>:
 8007ee4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ee6:	bf00      	nop
 8007ee8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007eea:	bc08      	pop	{r3}
 8007eec:	469e      	mov	lr, r3
 8007eee:	4770      	bx	lr
