
test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007c1c  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08007eb4  08007eb4  00017eb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08007eec  08007eec  00017eec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08007ef4  08007ef4  00017ef4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08007ef8  08007ef8  00017ef8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000010  24000000  08007efc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000580  24000010  08007f0c  00020010  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  24000590  08007f0c  00020590  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 10 .comment      00000043  00000000  00000000  0002003e  2**0
                  CONTENTS, READONLY
 11 .debug_info   000151f7  00000000  00000000  00020081  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 00002a61  00000000  00000000  00035278  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 000011b0  00000000  00000000  00037ce0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_rnglists 00000d9f  00000000  00000000  00038e90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00037330  00000000  00000000  00039c2f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0001472e  00000000  00000000  00070f5f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    0015d8b1  00000000  00000000  0008568d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  00004b60  00000000  00000000  001e2f40  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000004b  00000000  00000000  001e7aa0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000010 	.word	0x24000010
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08007e9c 	.word	0x08007e9c

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000014 	.word	0x24000014
 80002d4:	08007e9c 	.word	0x08007e9c

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002ec:	f000 b970 	b.w	80005d0 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9e08      	ldr	r6, [sp, #32]
 800030e:	460d      	mov	r5, r1
 8000310:	4604      	mov	r4, r0
 8000312:	460f      	mov	r7, r1
 8000314:	2b00      	cmp	r3, #0
 8000316:	d14a      	bne.n	80003ae <__udivmoddi4+0xa6>
 8000318:	428a      	cmp	r2, r1
 800031a:	4694      	mov	ip, r2
 800031c:	d965      	bls.n	80003ea <__udivmoddi4+0xe2>
 800031e:	fab2 f382 	clz	r3, r2
 8000322:	b143      	cbz	r3, 8000336 <__udivmoddi4+0x2e>
 8000324:	fa02 fc03 	lsl.w	ip, r2, r3
 8000328:	f1c3 0220 	rsb	r2, r3, #32
 800032c:	409f      	lsls	r7, r3
 800032e:	fa20 f202 	lsr.w	r2, r0, r2
 8000332:	4317      	orrs	r7, r2
 8000334:	409c      	lsls	r4, r3
 8000336:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800033a:	fa1f f58c 	uxth.w	r5, ip
 800033e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000342:	0c22      	lsrs	r2, r4, #16
 8000344:	fb0e 7711 	mls	r7, lr, r1, r7
 8000348:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800034c:	fb01 f005 	mul.w	r0, r1, r5
 8000350:	4290      	cmp	r0, r2
 8000352:	d90a      	bls.n	800036a <__udivmoddi4+0x62>
 8000354:	eb1c 0202 	adds.w	r2, ip, r2
 8000358:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 800035c:	f080 811c 	bcs.w	8000598 <__udivmoddi4+0x290>
 8000360:	4290      	cmp	r0, r2
 8000362:	f240 8119 	bls.w	8000598 <__udivmoddi4+0x290>
 8000366:	3902      	subs	r1, #2
 8000368:	4462      	add	r2, ip
 800036a:	1a12      	subs	r2, r2, r0
 800036c:	b2a4      	uxth	r4, r4
 800036e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000372:	fb0e 2210 	mls	r2, lr, r0, r2
 8000376:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800037a:	fb00 f505 	mul.w	r5, r0, r5
 800037e:	42a5      	cmp	r5, r4
 8000380:	d90a      	bls.n	8000398 <__udivmoddi4+0x90>
 8000382:	eb1c 0404 	adds.w	r4, ip, r4
 8000386:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 800038a:	f080 8107 	bcs.w	800059c <__udivmoddi4+0x294>
 800038e:	42a5      	cmp	r5, r4
 8000390:	f240 8104 	bls.w	800059c <__udivmoddi4+0x294>
 8000394:	4464      	add	r4, ip
 8000396:	3802      	subs	r0, #2
 8000398:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800039c:	1b64      	subs	r4, r4, r5
 800039e:	2100      	movs	r1, #0
 80003a0:	b11e      	cbz	r6, 80003aa <__udivmoddi4+0xa2>
 80003a2:	40dc      	lsrs	r4, r3
 80003a4:	2300      	movs	r3, #0
 80003a6:	e9c6 4300 	strd	r4, r3, [r6]
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d908      	bls.n	80003c4 <__udivmoddi4+0xbc>
 80003b2:	2e00      	cmp	r6, #0
 80003b4:	f000 80ed 	beq.w	8000592 <__udivmoddi4+0x28a>
 80003b8:	2100      	movs	r1, #0
 80003ba:	e9c6 0500 	strd	r0, r5, [r6]
 80003be:	4608      	mov	r0, r1
 80003c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c4:	fab3 f183 	clz	r1, r3
 80003c8:	2900      	cmp	r1, #0
 80003ca:	d149      	bne.n	8000460 <__udivmoddi4+0x158>
 80003cc:	42ab      	cmp	r3, r5
 80003ce:	d302      	bcc.n	80003d6 <__udivmoddi4+0xce>
 80003d0:	4282      	cmp	r2, r0
 80003d2:	f200 80f8 	bhi.w	80005c6 <__udivmoddi4+0x2be>
 80003d6:	1a84      	subs	r4, r0, r2
 80003d8:	eb65 0203 	sbc.w	r2, r5, r3
 80003dc:	2001      	movs	r0, #1
 80003de:	4617      	mov	r7, r2
 80003e0:	2e00      	cmp	r6, #0
 80003e2:	d0e2      	beq.n	80003aa <__udivmoddi4+0xa2>
 80003e4:	e9c6 4700 	strd	r4, r7, [r6]
 80003e8:	e7df      	b.n	80003aa <__udivmoddi4+0xa2>
 80003ea:	b902      	cbnz	r2, 80003ee <__udivmoddi4+0xe6>
 80003ec:	deff      	udf	#255	; 0xff
 80003ee:	fab2 f382 	clz	r3, r2
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	f040 8090 	bne.w	8000518 <__udivmoddi4+0x210>
 80003f8:	1a8a      	subs	r2, r1, r2
 80003fa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003fe:	fa1f fe8c 	uxth.w	lr, ip
 8000402:	2101      	movs	r1, #1
 8000404:	fbb2 f5f7 	udiv	r5, r2, r7
 8000408:	fb07 2015 	mls	r0, r7, r5, r2
 800040c:	0c22      	lsrs	r2, r4, #16
 800040e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000412:	fb0e f005 	mul.w	r0, lr, r5
 8000416:	4290      	cmp	r0, r2
 8000418:	d908      	bls.n	800042c <__udivmoddi4+0x124>
 800041a:	eb1c 0202 	adds.w	r2, ip, r2
 800041e:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x122>
 8000424:	4290      	cmp	r0, r2
 8000426:	f200 80cb 	bhi.w	80005c0 <__udivmoddi4+0x2b8>
 800042a:	4645      	mov	r5, r8
 800042c:	1a12      	subs	r2, r2, r0
 800042e:	b2a4      	uxth	r4, r4
 8000430:	fbb2 f0f7 	udiv	r0, r2, r7
 8000434:	fb07 2210 	mls	r2, r7, r0, r2
 8000438:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800043c:	fb0e fe00 	mul.w	lr, lr, r0
 8000440:	45a6      	cmp	lr, r4
 8000442:	d908      	bls.n	8000456 <__udivmoddi4+0x14e>
 8000444:	eb1c 0404 	adds.w	r4, ip, r4
 8000448:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 800044c:	d202      	bcs.n	8000454 <__udivmoddi4+0x14c>
 800044e:	45a6      	cmp	lr, r4
 8000450:	f200 80bb 	bhi.w	80005ca <__udivmoddi4+0x2c2>
 8000454:	4610      	mov	r0, r2
 8000456:	eba4 040e 	sub.w	r4, r4, lr
 800045a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800045e:	e79f      	b.n	80003a0 <__udivmoddi4+0x98>
 8000460:	f1c1 0720 	rsb	r7, r1, #32
 8000464:	408b      	lsls	r3, r1
 8000466:	fa22 fc07 	lsr.w	ip, r2, r7
 800046a:	ea4c 0c03 	orr.w	ip, ip, r3
 800046e:	fa05 f401 	lsl.w	r4, r5, r1
 8000472:	fa20 f307 	lsr.w	r3, r0, r7
 8000476:	40fd      	lsrs	r5, r7
 8000478:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800047c:	4323      	orrs	r3, r4
 800047e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000482:	fa1f fe8c 	uxth.w	lr, ip
 8000486:	fb09 5518 	mls	r5, r9, r8, r5
 800048a:	0c1c      	lsrs	r4, r3, #16
 800048c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000490:	fb08 f50e 	mul.w	r5, r8, lr
 8000494:	42a5      	cmp	r5, r4
 8000496:	fa02 f201 	lsl.w	r2, r2, r1
 800049a:	fa00 f001 	lsl.w	r0, r0, r1
 800049e:	d90b      	bls.n	80004b8 <__udivmoddi4+0x1b0>
 80004a0:	eb1c 0404 	adds.w	r4, ip, r4
 80004a4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80004a8:	f080 8088 	bcs.w	80005bc <__udivmoddi4+0x2b4>
 80004ac:	42a5      	cmp	r5, r4
 80004ae:	f240 8085 	bls.w	80005bc <__udivmoddi4+0x2b4>
 80004b2:	f1a8 0802 	sub.w	r8, r8, #2
 80004b6:	4464      	add	r4, ip
 80004b8:	1b64      	subs	r4, r4, r5
 80004ba:	b29d      	uxth	r5, r3
 80004bc:	fbb4 f3f9 	udiv	r3, r4, r9
 80004c0:	fb09 4413 	mls	r4, r9, r3, r4
 80004c4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004c8:	fb03 fe0e 	mul.w	lr, r3, lr
 80004cc:	45a6      	cmp	lr, r4
 80004ce:	d908      	bls.n	80004e2 <__udivmoddi4+0x1da>
 80004d0:	eb1c 0404 	adds.w	r4, ip, r4
 80004d4:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 80004d8:	d26c      	bcs.n	80005b4 <__udivmoddi4+0x2ac>
 80004da:	45a6      	cmp	lr, r4
 80004dc:	d96a      	bls.n	80005b4 <__udivmoddi4+0x2ac>
 80004de:	3b02      	subs	r3, #2
 80004e0:	4464      	add	r4, ip
 80004e2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004e6:	fba3 9502 	umull	r9, r5, r3, r2
 80004ea:	eba4 040e 	sub.w	r4, r4, lr
 80004ee:	42ac      	cmp	r4, r5
 80004f0:	46c8      	mov	r8, r9
 80004f2:	46ae      	mov	lr, r5
 80004f4:	d356      	bcc.n	80005a4 <__udivmoddi4+0x29c>
 80004f6:	d053      	beq.n	80005a0 <__udivmoddi4+0x298>
 80004f8:	b156      	cbz	r6, 8000510 <__udivmoddi4+0x208>
 80004fa:	ebb0 0208 	subs.w	r2, r0, r8
 80004fe:	eb64 040e 	sbc.w	r4, r4, lr
 8000502:	fa04 f707 	lsl.w	r7, r4, r7
 8000506:	40ca      	lsrs	r2, r1
 8000508:	40cc      	lsrs	r4, r1
 800050a:	4317      	orrs	r7, r2
 800050c:	e9c6 7400 	strd	r7, r4, [r6]
 8000510:	4618      	mov	r0, r3
 8000512:	2100      	movs	r1, #0
 8000514:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000518:	f1c3 0120 	rsb	r1, r3, #32
 800051c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000520:	fa20 f201 	lsr.w	r2, r0, r1
 8000524:	fa25 f101 	lsr.w	r1, r5, r1
 8000528:	409d      	lsls	r5, r3
 800052a:	432a      	orrs	r2, r5
 800052c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000530:	fa1f fe8c 	uxth.w	lr, ip
 8000534:	fbb1 f0f7 	udiv	r0, r1, r7
 8000538:	fb07 1510 	mls	r5, r7, r0, r1
 800053c:	0c11      	lsrs	r1, r2, #16
 800053e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000542:	fb00 f50e 	mul.w	r5, r0, lr
 8000546:	428d      	cmp	r5, r1
 8000548:	fa04 f403 	lsl.w	r4, r4, r3
 800054c:	d908      	bls.n	8000560 <__udivmoddi4+0x258>
 800054e:	eb1c 0101 	adds.w	r1, ip, r1
 8000552:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000556:	d22f      	bcs.n	80005b8 <__udivmoddi4+0x2b0>
 8000558:	428d      	cmp	r5, r1
 800055a:	d92d      	bls.n	80005b8 <__udivmoddi4+0x2b0>
 800055c:	3802      	subs	r0, #2
 800055e:	4461      	add	r1, ip
 8000560:	1b49      	subs	r1, r1, r5
 8000562:	b292      	uxth	r2, r2
 8000564:	fbb1 f5f7 	udiv	r5, r1, r7
 8000568:	fb07 1115 	mls	r1, r7, r5, r1
 800056c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000570:	fb05 f10e 	mul.w	r1, r5, lr
 8000574:	4291      	cmp	r1, r2
 8000576:	d908      	bls.n	800058a <__udivmoddi4+0x282>
 8000578:	eb1c 0202 	adds.w	r2, ip, r2
 800057c:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000580:	d216      	bcs.n	80005b0 <__udivmoddi4+0x2a8>
 8000582:	4291      	cmp	r1, r2
 8000584:	d914      	bls.n	80005b0 <__udivmoddi4+0x2a8>
 8000586:	3d02      	subs	r5, #2
 8000588:	4462      	add	r2, ip
 800058a:	1a52      	subs	r2, r2, r1
 800058c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000590:	e738      	b.n	8000404 <__udivmoddi4+0xfc>
 8000592:	4631      	mov	r1, r6
 8000594:	4630      	mov	r0, r6
 8000596:	e708      	b.n	80003aa <__udivmoddi4+0xa2>
 8000598:	4639      	mov	r1, r7
 800059a:	e6e6      	b.n	800036a <__udivmoddi4+0x62>
 800059c:	4610      	mov	r0, r2
 800059e:	e6fb      	b.n	8000398 <__udivmoddi4+0x90>
 80005a0:	4548      	cmp	r0, r9
 80005a2:	d2a9      	bcs.n	80004f8 <__udivmoddi4+0x1f0>
 80005a4:	ebb9 0802 	subs.w	r8, r9, r2
 80005a8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80005ac:	3b01      	subs	r3, #1
 80005ae:	e7a3      	b.n	80004f8 <__udivmoddi4+0x1f0>
 80005b0:	4645      	mov	r5, r8
 80005b2:	e7ea      	b.n	800058a <__udivmoddi4+0x282>
 80005b4:	462b      	mov	r3, r5
 80005b6:	e794      	b.n	80004e2 <__udivmoddi4+0x1da>
 80005b8:	4640      	mov	r0, r8
 80005ba:	e7d1      	b.n	8000560 <__udivmoddi4+0x258>
 80005bc:	46d0      	mov	r8, sl
 80005be:	e77b      	b.n	80004b8 <__udivmoddi4+0x1b0>
 80005c0:	3d02      	subs	r5, #2
 80005c2:	4462      	add	r2, ip
 80005c4:	e732      	b.n	800042c <__udivmoddi4+0x124>
 80005c6:	4608      	mov	r0, r1
 80005c8:	e70a      	b.n	80003e0 <__udivmoddi4+0xd8>
 80005ca:	4464      	add	r4, ip
 80005cc:	3802      	subs	r0, #2
 80005ce:	e742      	b.n	8000456 <__udivmoddi4+0x14e>

080005d0 <__aeabi_idiv0>:
 80005d0:	4770      	bx	lr
 80005d2:	bf00      	nop

080005d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005d8:	f000 fd50 	bl	800107c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005dc:	f000 f80c 	bl	80005f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005e0:	f000 f94e 	bl	8000880 <MX_GPIO_Init>
  MX_QUADSPI_Init();
 80005e4:	f000 f882 	bl	80006ec <MX_QUADSPI_Init>
  MX_SDMMC2_SD_Init();
 80005e8:	f000 f8a8 	bl	800073c <MX_SDMMC2_SD_Init>
  MX_USART1_UART_Init();
 80005ec:	f000 f8ca 	bl	8000784 <MX_USART1_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80005f0:	f000 f914 	bl	800081c <MX_USB_OTG_FS_PCD_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005f4:	e7fe      	b.n	80005f4 <main+0x20>
	...

080005f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	b09c      	sub	sp, #112	; 0x70
 80005fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000602:	224c      	movs	r2, #76	; 0x4c
 8000604:	2100      	movs	r1, #0
 8000606:	4618      	mov	r0, r3
 8000608:	f007 fc1c 	bl	8007e44 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800060c:	1d3b      	adds	r3, r7, #4
 800060e:	2220      	movs	r2, #32
 8000610:	2100      	movs	r1, #0
 8000612:	4618      	mov	r0, r3
 8000614:	f007 fc16 	bl	8007e44 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000618:	2002      	movs	r0, #2
 800061a:	f001 f9cd 	bl	80019b8 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 800061e:	2300      	movs	r3, #0
 8000620:	603b      	str	r3, [r7, #0]
 8000622:	4b30      	ldr	r3, [pc, #192]	; (80006e4 <SystemClock_Config+0xec>)
 8000624:	699b      	ldr	r3, [r3, #24]
 8000626:	4a2f      	ldr	r2, [pc, #188]	; (80006e4 <SystemClock_Config+0xec>)
 8000628:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800062c:	6193      	str	r3, [r2, #24]
 800062e:	4b2d      	ldr	r3, [pc, #180]	; (80006e4 <SystemClock_Config+0xec>)
 8000630:	699b      	ldr	r3, [r3, #24]
 8000632:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000636:	603b      	str	r3, [r7, #0]
 8000638:	4b2b      	ldr	r3, [pc, #172]	; (80006e8 <SystemClock_Config+0xf0>)
 800063a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800063c:	4a2a      	ldr	r2, [pc, #168]	; (80006e8 <SystemClock_Config+0xf0>)
 800063e:	f043 0301 	orr.w	r3, r3, #1
 8000642:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000644:	4b28      	ldr	r3, [pc, #160]	; (80006e8 <SystemClock_Config+0xf0>)
 8000646:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000648:	f003 0301 	and.w	r3, r3, #1
 800064c:	603b      	str	r3, [r7, #0]
 800064e:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000650:	bf00      	nop
 8000652:	4b24      	ldr	r3, [pc, #144]	; (80006e4 <SystemClock_Config+0xec>)
 8000654:	699b      	ldr	r3, [r3, #24]
 8000656:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800065a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800065e:	d1f8      	bne.n	8000652 <SystemClock_Config+0x5a>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000660:	2301      	movs	r3, #1
 8000662:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000664:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000668:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800066a:	2302      	movs	r3, #2
 800066c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800066e:	2302      	movs	r3, #2
 8000670:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 2;
 8000672:	2302      	movs	r3, #2
 8000674:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 32;
 8000676:	2320      	movs	r3, #32
 8000678:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 800067a:	2302      	movs	r3, #2
 800067c:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 6;
 800067e:	2306      	movs	r3, #6
 8000680:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000682:	2302      	movs	r3, #2
 8000684:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000686:	230c      	movs	r3, #12
 8000688:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800068a:	2300      	movs	r3, #0
 800068c:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800068e:	2300      	movs	r3, #0
 8000690:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000692:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000696:	4618      	mov	r0, r3
 8000698:	f001 fa92 	bl	8001bc0 <HAL_RCC_OscConfig>
 800069c:	4603      	mov	r3, r0
 800069e:	2b00      	cmp	r3, #0
 80006a0:	d001      	beq.n	80006a6 <SystemClock_Config+0xae>
  {
    Error_Handler();
 80006a2:	f000 f953 	bl	800094c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006a6:	233f      	movs	r3, #63	; 0x3f
 80006a8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006aa:	2303      	movs	r3, #3
 80006ac:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80006ae:	2300      	movs	r3, #0
 80006b0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80006b2:	2300      	movs	r3, #0
 80006b4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80006b6:	2340      	movs	r3, #64	; 0x40
 80006b8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80006ba:	2340      	movs	r3, #64	; 0x40
 80006bc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80006be:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80006c2:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80006c4:	2340      	movs	r3, #64	; 0x40
 80006c6:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80006c8:	1d3b      	adds	r3, r7, #4
 80006ca:	2102      	movs	r1, #2
 80006cc:	4618      	mov	r0, r3
 80006ce:	f001 fe85 	bl	80023dc <HAL_RCC_ClockConfig>
 80006d2:	4603      	mov	r3, r0
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	d001      	beq.n	80006dc <SystemClock_Config+0xe4>
  {
    Error_Handler();
 80006d8:	f000 f938 	bl	800094c <Error_Handler>
  }
}
 80006dc:	bf00      	nop
 80006de:	3770      	adds	r7, #112	; 0x70
 80006e0:	46bd      	mov	sp, r7
 80006e2:	bd80      	pop	{r7, pc}
 80006e4:	58024800 	.word	0x58024800
 80006e8:	58000400 	.word	0x58000400

080006ec <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 80006f0:	4b10      	ldr	r3, [pc, #64]	; (8000734 <MX_QUADSPI_Init+0x48>)
 80006f2:	4a11      	ldr	r2, [pc, #68]	; (8000738 <MX_QUADSPI_Init+0x4c>)
 80006f4:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 255;
 80006f6:	4b0f      	ldr	r3, [pc, #60]	; (8000734 <MX_QUADSPI_Init+0x48>)
 80006f8:	22ff      	movs	r2, #255	; 0xff
 80006fa:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 1;
 80006fc:	4b0d      	ldr	r3, [pc, #52]	; (8000734 <MX_QUADSPI_Init+0x48>)
 80006fe:	2201      	movs	r2, #1
 8000700:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 8000702:	4b0c      	ldr	r3, [pc, #48]	; (8000734 <MX_QUADSPI_Init+0x48>)
 8000704:	2200      	movs	r2, #0
 8000706:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 1;
 8000708:	4b0a      	ldr	r3, [pc, #40]	; (8000734 <MX_QUADSPI_Init+0x48>)
 800070a:	2201      	movs	r2, #1
 800070c:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 800070e:	4b09      	ldr	r3, [pc, #36]	; (8000734 <MX_QUADSPI_Init+0x48>)
 8000710:	2200      	movs	r2, #0
 8000712:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8000714:	4b07      	ldr	r3, [pc, #28]	; (8000734 <MX_QUADSPI_Init+0x48>)
 8000716:	2200      	movs	r2, #0
 8000718:	619a      	str	r2, [r3, #24]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_ENABLE;
 800071a:	4b06      	ldr	r3, [pc, #24]	; (8000734 <MX_QUADSPI_Init+0x48>)
 800071c:	2240      	movs	r2, #64	; 0x40
 800071e:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8000720:	4804      	ldr	r0, [pc, #16]	; (8000734 <MX_QUADSPI_Init+0x48>)
 8000722:	f001 f993 	bl	8001a4c <HAL_QSPI_Init>
 8000726:	4603      	mov	r3, r0
 8000728:	2b00      	cmp	r3, #0
 800072a:	d001      	beq.n	8000730 <MX_QUADSPI_Init+0x44>
  {
    Error_Handler();
 800072c:	f000 f90e 	bl	800094c <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 8000730:	bf00      	nop
 8000732:	bd80      	pop	{r7, pc}
 8000734:	2400002c 	.word	0x2400002c
 8000738:	52005000 	.word	0x52005000

0800073c <MX_SDMMC2_SD_Init>:
  * @brief SDMMC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC2_SD_Init(void)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC2_Init 0 */

  /* USER CODE BEGIN SDMMC2_Init 1 */

  /* USER CODE END SDMMC2_Init 1 */
  hsd2.Instance = SDMMC2;
 8000740:	4b0e      	ldr	r3, [pc, #56]	; (800077c <MX_SDMMC2_SD_Init+0x40>)
 8000742:	4a0f      	ldr	r2, [pc, #60]	; (8000780 <MX_SDMMC2_SD_Init+0x44>)
 8000744:	601a      	str	r2, [r3, #0]
  hsd2.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8000746:	4b0d      	ldr	r3, [pc, #52]	; (800077c <MX_SDMMC2_SD_Init+0x40>)
 8000748:	2200      	movs	r2, #0
 800074a:	605a      	str	r2, [r3, #4]
  hsd2.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800074c:	4b0b      	ldr	r3, [pc, #44]	; (800077c <MX_SDMMC2_SD_Init+0x40>)
 800074e:	2200      	movs	r2, #0
 8000750:	609a      	str	r2, [r3, #8]
  hsd2.Init.BusWide = SDMMC_BUS_WIDE_4B;
 8000752:	4b0a      	ldr	r3, [pc, #40]	; (800077c <MX_SDMMC2_SD_Init+0x40>)
 8000754:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000758:	60da      	str	r2, [r3, #12]
  hsd2.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800075a:	4b08      	ldr	r3, [pc, #32]	; (800077c <MX_SDMMC2_SD_Init+0x40>)
 800075c:	2200      	movs	r2, #0
 800075e:	611a      	str	r2, [r3, #16]
  hsd2.Init.ClockDiv = 0;
 8000760:	4b06      	ldr	r3, [pc, #24]	; (800077c <MX_SDMMC2_SD_Init+0x40>)
 8000762:	2200      	movs	r2, #0
 8000764:	615a      	str	r2, [r3, #20]
  if (HAL_SD_Init(&hsd2) != HAL_OK)
 8000766:	4805      	ldr	r0, [pc, #20]	; (800077c <MX_SDMMC2_SD_Init+0x40>)
 8000768:	f004 fb50 	bl	8004e0c <HAL_SD_Init>
 800076c:	4603      	mov	r3, r0
 800076e:	2b00      	cmp	r3, #0
 8000770:	d001      	beq.n	8000776 <MX_SDMMC2_SD_Init+0x3a>
  {
    Error_Handler();
 8000772:	f000 f8eb 	bl	800094c <Error_Handler>
  }
  /* USER CODE BEGIN SDMMC2_Init 2 */

  /* USER CODE END SDMMC2_Init 2 */

}
 8000776:	bf00      	nop
 8000778:	bd80      	pop	{r7, pc}
 800077a:	bf00      	nop
 800077c:	24000078 	.word	0x24000078
 8000780:	48022400 	.word	0x48022400

08000784 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000788:	4b22      	ldr	r3, [pc, #136]	; (8000814 <MX_USART1_UART_Init+0x90>)
 800078a:	4a23      	ldr	r2, [pc, #140]	; (8000818 <MX_USART1_UART_Init+0x94>)
 800078c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800078e:	4b21      	ldr	r3, [pc, #132]	; (8000814 <MX_USART1_UART_Init+0x90>)
 8000790:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000794:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000796:	4b1f      	ldr	r3, [pc, #124]	; (8000814 <MX_USART1_UART_Init+0x90>)
 8000798:	2200      	movs	r2, #0
 800079a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800079c:	4b1d      	ldr	r3, [pc, #116]	; (8000814 <MX_USART1_UART_Init+0x90>)
 800079e:	2200      	movs	r2, #0
 80007a0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80007a2:	4b1c      	ldr	r3, [pc, #112]	; (8000814 <MX_USART1_UART_Init+0x90>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80007a8:	4b1a      	ldr	r3, [pc, #104]	; (8000814 <MX_USART1_UART_Init+0x90>)
 80007aa:	220c      	movs	r2, #12
 80007ac:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007ae:	4b19      	ldr	r3, [pc, #100]	; (8000814 <MX_USART1_UART_Init+0x90>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80007b4:	4b17      	ldr	r3, [pc, #92]	; (8000814 <MX_USART1_UART_Init+0x90>)
 80007b6:	2200      	movs	r2, #0
 80007b8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007ba:	4b16      	ldr	r3, [pc, #88]	; (8000814 <MX_USART1_UART_Init+0x90>)
 80007bc:	2200      	movs	r2, #0
 80007be:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80007c0:	4b14      	ldr	r3, [pc, #80]	; (8000814 <MX_USART1_UART_Init+0x90>)
 80007c2:	2200      	movs	r2, #0
 80007c4:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007c6:	4b13      	ldr	r3, [pc, #76]	; (8000814 <MX_USART1_UART_Init+0x90>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80007cc:	4811      	ldr	r0, [pc, #68]	; (8000814 <MX_USART1_UART_Init+0x90>)
 80007ce:	f005 fb63 	bl	8005e98 <HAL_UART_Init>
 80007d2:	4603      	mov	r3, r0
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	d001      	beq.n	80007dc <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80007d8:	f000 f8b8 	bl	800094c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80007dc:	2100      	movs	r1, #0
 80007de:	480d      	ldr	r0, [pc, #52]	; (8000814 <MX_USART1_UART_Init+0x90>)
 80007e0:	f006 faba 	bl	8006d58 <HAL_UARTEx_SetTxFifoThreshold>
 80007e4:	4603      	mov	r3, r0
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	d001      	beq.n	80007ee <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80007ea:	f000 f8af 	bl	800094c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80007ee:	2100      	movs	r1, #0
 80007f0:	4808      	ldr	r0, [pc, #32]	; (8000814 <MX_USART1_UART_Init+0x90>)
 80007f2:	f006 faef 	bl	8006dd4 <HAL_UARTEx_SetRxFifoThreshold>
 80007f6:	4603      	mov	r3, r0
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	d001      	beq.n	8000800 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80007fc:	f000 f8a6 	bl	800094c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000800:	4804      	ldr	r0, [pc, #16]	; (8000814 <MX_USART1_UART_Init+0x90>)
 8000802:	f006 fa70 	bl	8006ce6 <HAL_UARTEx_DisableFifoMode>
 8000806:	4603      	mov	r3, r0
 8000808:	2b00      	cmp	r3, #0
 800080a:	d001      	beq.n	8000810 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 800080c:	f000 f89e 	bl	800094c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000810:	bf00      	nop
 8000812:	bd80      	pop	{r7, pc}
 8000814:	240000f4 	.word	0x240000f4
 8000818:	40011000 	.word	0x40011000

0800081c <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000820:	4b15      	ldr	r3, [pc, #84]	; (8000878 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000822:	4a16      	ldr	r2, [pc, #88]	; (800087c <MX_USB_OTG_FS_PCD_Init+0x60>)
 8000824:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8000826:	4b14      	ldr	r3, [pc, #80]	; (8000878 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000828:	2209      	movs	r2, #9
 800082a:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800082c:	4b12      	ldr	r3, [pc, #72]	; (8000878 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800082e:	2202      	movs	r2, #2
 8000830:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000832:	4b11      	ldr	r3, [pc, #68]	; (8000878 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000834:	2200      	movs	r2, #0
 8000836:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000838:	4b0f      	ldr	r3, [pc, #60]	; (8000878 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800083a:	2202      	movs	r2, #2
 800083c:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800083e:	4b0e      	ldr	r3, [pc, #56]	; (8000878 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000840:	2200      	movs	r2, #0
 8000842:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000844:	4b0c      	ldr	r3, [pc, #48]	; (8000878 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000846:	2200      	movs	r2, #0
 8000848:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800084a:	4b0b      	ldr	r3, [pc, #44]	; (8000878 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800084c:	2200      	movs	r2, #0
 800084e:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8000850:	4b09      	ldr	r3, [pc, #36]	; (8000878 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000852:	2200      	movs	r2, #0
 8000854:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8000856:	4b08      	ldr	r3, [pc, #32]	; (8000878 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000858:	2200      	movs	r2, #0
 800085a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800085c:	4b06      	ldr	r3, [pc, #24]	; (8000878 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800085e:	2200      	movs	r2, #0
 8000860:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000862:	4805      	ldr	r0, [pc, #20]	; (8000878 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000864:	f000 ff60 	bl	8001728 <HAL_PCD_Init>
 8000868:	4603      	mov	r3, r0
 800086a:	2b00      	cmp	r3, #0
 800086c:	d001      	beq.n	8000872 <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 800086e:	f000 f86d 	bl	800094c <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000872:	bf00      	nop
 8000874:	bd80      	pop	{r7, pc}
 8000876:	bf00      	nop
 8000878:	24000184 	.word	0x24000184
 800087c:	40080000 	.word	0x40080000

08000880 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000880:	b480      	push	{r7}
 8000882:	b087      	sub	sp, #28
 8000884:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000886:	4b30      	ldr	r3, [pc, #192]	; (8000948 <MX_GPIO_Init+0xc8>)
 8000888:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800088c:	4a2e      	ldr	r2, [pc, #184]	; (8000948 <MX_GPIO_Init+0xc8>)
 800088e:	f043 0310 	orr.w	r3, r3, #16
 8000892:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000896:	4b2c      	ldr	r3, [pc, #176]	; (8000948 <MX_GPIO_Init+0xc8>)
 8000898:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800089c:	f003 0310 	and.w	r3, r3, #16
 80008a0:	617b      	str	r3, [r7, #20]
 80008a2:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008a4:	4b28      	ldr	r3, [pc, #160]	; (8000948 <MX_GPIO_Init+0xc8>)
 80008a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008aa:	4a27      	ldr	r2, [pc, #156]	; (8000948 <MX_GPIO_Init+0xc8>)
 80008ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008b0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80008b4:	4b24      	ldr	r3, [pc, #144]	; (8000948 <MX_GPIO_Init+0xc8>)
 80008b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008be:	613b      	str	r3, [r7, #16]
 80008c0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008c2:	4b21      	ldr	r3, [pc, #132]	; (8000948 <MX_GPIO_Init+0xc8>)
 80008c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008c8:	4a1f      	ldr	r2, [pc, #124]	; (8000948 <MX_GPIO_Init+0xc8>)
 80008ca:	f043 0304 	orr.w	r3, r3, #4
 80008ce:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80008d2:	4b1d      	ldr	r3, [pc, #116]	; (8000948 <MX_GPIO_Init+0xc8>)
 80008d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008d8:	f003 0304 	and.w	r3, r3, #4
 80008dc:	60fb      	str	r3, [r7, #12]
 80008de:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008e0:	4b19      	ldr	r3, [pc, #100]	; (8000948 <MX_GPIO_Init+0xc8>)
 80008e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008e6:	4a18      	ldr	r2, [pc, #96]	; (8000948 <MX_GPIO_Init+0xc8>)
 80008e8:	f043 0301 	orr.w	r3, r3, #1
 80008ec:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80008f0:	4b15      	ldr	r3, [pc, #84]	; (8000948 <MX_GPIO_Init+0xc8>)
 80008f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008f6:	f003 0301 	and.w	r3, r3, #1
 80008fa:	60bb      	str	r3, [r7, #8]
 80008fc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008fe:	4b12      	ldr	r3, [pc, #72]	; (8000948 <MX_GPIO_Init+0xc8>)
 8000900:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000904:	4a10      	ldr	r2, [pc, #64]	; (8000948 <MX_GPIO_Init+0xc8>)
 8000906:	f043 0302 	orr.w	r3, r3, #2
 800090a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800090e:	4b0e      	ldr	r3, [pc, #56]	; (8000948 <MX_GPIO_Init+0xc8>)
 8000910:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000914:	f003 0302 	and.w	r3, r3, #2
 8000918:	607b      	str	r3, [r7, #4]
 800091a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800091c:	4b0a      	ldr	r3, [pc, #40]	; (8000948 <MX_GPIO_Init+0xc8>)
 800091e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000922:	4a09      	ldr	r2, [pc, #36]	; (8000948 <MX_GPIO_Init+0xc8>)
 8000924:	f043 0308 	orr.w	r3, r3, #8
 8000928:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800092c:	4b06      	ldr	r3, [pc, #24]	; (8000948 <MX_GPIO_Init+0xc8>)
 800092e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000932:	f003 0308 	and.w	r3, r3, #8
 8000936:	603b      	str	r3, [r7, #0]
 8000938:	683b      	ldr	r3, [r7, #0]

}
 800093a:	bf00      	nop
 800093c:	371c      	adds	r7, #28
 800093e:	46bd      	mov	sp, r7
 8000940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000944:	4770      	bx	lr
 8000946:	bf00      	nop
 8000948:	58024400 	.word	0x58024400

0800094c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800094c:	b480      	push	{r7}
 800094e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000950:	b672      	cpsid	i
}
 8000952:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000954:	e7fe      	b.n	8000954 <Error_Handler+0x8>
	...

08000958 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000958:	b480      	push	{r7}
 800095a:	b083      	sub	sp, #12
 800095c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800095e:	4b0a      	ldr	r3, [pc, #40]	; (8000988 <HAL_MspInit+0x30>)
 8000960:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000964:	4a08      	ldr	r2, [pc, #32]	; (8000988 <HAL_MspInit+0x30>)
 8000966:	f043 0302 	orr.w	r3, r3, #2
 800096a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800096e:	4b06      	ldr	r3, [pc, #24]	; (8000988 <HAL_MspInit+0x30>)
 8000970:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000974:	f003 0302 	and.w	r3, r3, #2
 8000978:	607b      	str	r3, [r7, #4]
 800097a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800097c:	bf00      	nop
 800097e:	370c      	adds	r7, #12
 8000980:	46bd      	mov	sp, r7
 8000982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000986:	4770      	bx	lr
 8000988:	58024400 	.word	0x58024400

0800098c <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	b0bc      	sub	sp, #240	; 0xf0
 8000990:	af00      	add	r7, sp, #0
 8000992:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000994:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000998:	2200      	movs	r2, #0
 800099a:	601a      	str	r2, [r3, #0]
 800099c:	605a      	str	r2, [r3, #4]
 800099e:	609a      	str	r2, [r3, #8]
 80009a0:	60da      	str	r2, [r3, #12]
 80009a2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80009a4:	f107 0320 	add.w	r3, r7, #32
 80009a8:	22bc      	movs	r2, #188	; 0xbc
 80009aa:	2100      	movs	r1, #0
 80009ac:	4618      	mov	r0, r3
 80009ae:	f007 fa49 	bl	8007e44 <memset>
  if(hqspi->Instance==QUADSPI)
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	681b      	ldr	r3, [r3, #0]
 80009b6:	4a79      	ldr	r2, [pc, #484]	; (8000b9c <HAL_QSPI_MspInit+0x210>)
 80009b8:	4293      	cmp	r3, r2
 80009ba:	f040 80eb 	bne.w	8000b94 <HAL_QSPI_MspInit+0x208>
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_QSPI;
 80009be:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80009c2:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.QspiClockSelection = RCC_QSPICLKSOURCE_D1HCLK;
 80009c4:	2300      	movs	r3, #0
 80009c6:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80009c8:	f107 0320 	add.w	r3, r7, #32
 80009cc:	4618      	mov	r0, r3
 80009ce:	f002 f891 	bl	8002af4 <HAL_RCCEx_PeriphCLKConfig>
 80009d2:	4603      	mov	r3, r0
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d001      	beq.n	80009dc <HAL_QSPI_MspInit+0x50>
    {
      Error_Handler();
 80009d8:	f7ff ffb8 	bl	800094c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 80009dc:	4b70      	ldr	r3, [pc, #448]	; (8000ba0 <HAL_QSPI_MspInit+0x214>)
 80009de:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80009e2:	4a6f      	ldr	r2, [pc, #444]	; (8000ba0 <HAL_QSPI_MspInit+0x214>)
 80009e4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009e8:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 80009ec:	4b6c      	ldr	r3, [pc, #432]	; (8000ba0 <HAL_QSPI_MspInit+0x214>)
 80009ee:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80009f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009f6:	61fb      	str	r3, [r7, #28]
 80009f8:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80009fa:	4b69      	ldr	r3, [pc, #420]	; (8000ba0 <HAL_QSPI_MspInit+0x214>)
 80009fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a00:	4a67      	ldr	r2, [pc, #412]	; (8000ba0 <HAL_QSPI_MspInit+0x214>)
 8000a02:	f043 0310 	orr.w	r3, r3, #16
 8000a06:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a0a:	4b65      	ldr	r3, [pc, #404]	; (8000ba0 <HAL_QSPI_MspInit+0x214>)
 8000a0c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a10:	f003 0310 	and.w	r3, r3, #16
 8000a14:	61bb      	str	r3, [r7, #24]
 8000a16:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a18:	4b61      	ldr	r3, [pc, #388]	; (8000ba0 <HAL_QSPI_MspInit+0x214>)
 8000a1a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a1e:	4a60      	ldr	r2, [pc, #384]	; (8000ba0 <HAL_QSPI_MspInit+0x214>)
 8000a20:	f043 0301 	orr.w	r3, r3, #1
 8000a24:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a28:	4b5d      	ldr	r3, [pc, #372]	; (8000ba0 <HAL_QSPI_MspInit+0x214>)
 8000a2a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a2e:	f003 0301 	and.w	r3, r3, #1
 8000a32:	617b      	str	r3, [r7, #20]
 8000a34:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a36:	4b5a      	ldr	r3, [pc, #360]	; (8000ba0 <HAL_QSPI_MspInit+0x214>)
 8000a38:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a3c:	4a58      	ldr	r2, [pc, #352]	; (8000ba0 <HAL_QSPI_MspInit+0x214>)
 8000a3e:	f043 0302 	orr.w	r3, r3, #2
 8000a42:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a46:	4b56      	ldr	r3, [pc, #344]	; (8000ba0 <HAL_QSPI_MspInit+0x214>)
 8000a48:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a4c:	f003 0302 	and.w	r3, r3, #2
 8000a50:	613b      	str	r3, [r7, #16]
 8000a52:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a54:	4b52      	ldr	r3, [pc, #328]	; (8000ba0 <HAL_QSPI_MspInit+0x214>)
 8000a56:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a5a:	4a51      	ldr	r2, [pc, #324]	; (8000ba0 <HAL_QSPI_MspInit+0x214>)
 8000a5c:	f043 0308 	orr.w	r3, r3, #8
 8000a60:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a64:	4b4e      	ldr	r3, [pc, #312]	; (8000ba0 <HAL_QSPI_MspInit+0x214>)
 8000a66:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a6a:	f003 0308 	and.w	r3, r3, #8
 8000a6e:	60fb      	str	r3, [r7, #12]
 8000a70:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a72:	4b4b      	ldr	r3, [pc, #300]	; (8000ba0 <HAL_QSPI_MspInit+0x214>)
 8000a74:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a78:	4a49      	ldr	r2, [pc, #292]	; (8000ba0 <HAL_QSPI_MspInit+0x214>)
 8000a7a:	f043 0304 	orr.w	r3, r3, #4
 8000a7e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a82:	4b47      	ldr	r3, [pc, #284]	; (8000ba0 <HAL_QSPI_MspInit+0x214>)
 8000a84:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a88:	f003 0304 	and.w	r3, r3, #4
 8000a8c:	60bb      	str	r3, [r7, #8]
 8000a8e:	68bb      	ldr	r3, [r7, #8]
    PB10     ------> QUADSPI_BK1_NCS
    PD11     ------> QUADSPI_BK1_IO0
    PD12     ------> QUADSPI_BK1_IO1
    PC11     ------> QUADSPI_BK2_NCS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000a90:	2304      	movs	r3, #4
 8000a92:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a96:	2302      	movs	r3, #2
 8000a98:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8000aa8:	2309      	movs	r3, #9
 8000aaa:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000aae:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000ab2:	4619      	mov	r1, r3
 8000ab4:	483b      	ldr	r0, [pc, #236]	; (8000ba4 <HAL_QSPI_MspInit+0x218>)
 8000ab6:	f000 fc87 	bl	80013c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000aba:	2302      	movs	r3, #2
 8000abc:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ac0:	2302      	movs	r3, #2
 8000ac2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000acc:	2300      	movs	r3, #0
 8000ace:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8000ad2:	2309      	movs	r3, #9
 8000ad4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ad8:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000adc:	4619      	mov	r1, r3
 8000ade:	4832      	ldr	r0, [pc, #200]	; (8000ba8 <HAL_QSPI_MspInit+0x21c>)
 8000ae0:	f000 fc72 	bl	80013c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_10;
 8000ae4:	f240 4304 	movw	r3, #1028	; 0x404
 8000ae8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aec:	2302      	movs	r3, #2
 8000aee:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af2:	2300      	movs	r3, #0
 8000af4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000af8:	2300      	movs	r3, #0
 8000afa:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8000afe:	2309      	movs	r3, #9
 8000b00:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b04:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000b08:	4619      	mov	r1, r3
 8000b0a:	4828      	ldr	r0, [pc, #160]	; (8000bac <HAL_QSPI_MspInit+0x220>)
 8000b0c:	f000 fc5c 	bl	80013c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8000b10:	f44f 63f0 	mov.w	r3, #1920	; 0x780
 8000b14:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b18:	2302      	movs	r3, #2
 8000b1a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b1e:	2300      	movs	r3, #0
 8000b20:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b24:	2300      	movs	r3, #0
 8000b26:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8000b2a:	230a      	movs	r3, #10
 8000b2c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000b30:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000b34:	4619      	mov	r1, r3
 8000b36:	481b      	ldr	r0, [pc, #108]	; (8000ba4 <HAL_QSPI_MspInit+0x218>)
 8000b38:	f000 fc46 	bl	80013c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000b3c:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000b40:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b44:	2302      	movs	r3, #2
 8000b46:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b50:	2300      	movs	r3, #0
 8000b52:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8000b56:	2309      	movs	r3, #9
 8000b58:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b5c:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000b60:	4619      	mov	r1, r3
 8000b62:	4813      	ldr	r0, [pc, #76]	; (8000bb0 <HAL_QSPI_MspInit+0x224>)
 8000b64:	f000 fc30 	bl	80013c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000b68:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000b6c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b70:	2302      	movs	r3, #2
 8000b72:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b76:	2300      	movs	r3, #0
 8000b78:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8000b82:	2309      	movs	r3, #9
 8000b84:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b88:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000b8c:	4619      	mov	r1, r3
 8000b8e:	4809      	ldr	r0, [pc, #36]	; (8000bb4 <HAL_QSPI_MspInit+0x228>)
 8000b90:	f000 fc1a 	bl	80013c8 <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 8000b94:	bf00      	nop
 8000b96:	37f0      	adds	r7, #240	; 0xf0
 8000b98:	46bd      	mov	sp, r7
 8000b9a:	bd80      	pop	{r7, pc}
 8000b9c:	52005000 	.word	0x52005000
 8000ba0:	58024400 	.word	0x58024400
 8000ba4:	58021000 	.word	0x58021000
 8000ba8:	58020000 	.word	0x58020000
 8000bac:	58020400 	.word	0x58020400
 8000bb0:	58020c00 	.word	0x58020c00
 8000bb4:	58020800 	.word	0x58020800

08000bb8 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b0ba      	sub	sp, #232	; 0xe8
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bc0:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	601a      	str	r2, [r3, #0]
 8000bc8:	605a      	str	r2, [r3, #4]
 8000bca:	609a      	str	r2, [r3, #8]
 8000bcc:	60da      	str	r2, [r3, #12]
 8000bce:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000bd0:	f107 0318 	add.w	r3, r7, #24
 8000bd4:	22bc      	movs	r2, #188	; 0xbc
 8000bd6:	2100      	movs	r1, #0
 8000bd8:	4618      	mov	r0, r3
 8000bda:	f007 f933 	bl	8007e44 <memset>
  if(hsd->Instance==SDMMC2)
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	681b      	ldr	r3, [r3, #0]
 8000be2:	4a49      	ldr	r2, [pc, #292]	; (8000d08 <HAL_SD_MspInit+0x150>)
 8000be4:	4293      	cmp	r3, r2
 8000be6:	f040 808b 	bne.w	8000d00 <HAL_SD_MspInit+0x148>
  /* USER CODE BEGIN SDMMC2_MspInit 0 */

  /* USER CODE END SDMMC2_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC;
 8000bea:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000bee:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL;
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000bf4:	f107 0318 	add.w	r3, r7, #24
 8000bf8:	4618      	mov	r0, r3
 8000bfa:	f001 ff7b 	bl	8002af4 <HAL_RCCEx_PeriphCLKConfig>
 8000bfe:	4603      	mov	r3, r0
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d001      	beq.n	8000c08 <HAL_SD_MspInit+0x50>
    {
      Error_Handler();
 8000c04:	f7ff fea2 	bl	800094c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDMMC2_CLK_ENABLE();
 8000c08:	4b40      	ldr	r3, [pc, #256]	; (8000d0c <HAL_SD_MspInit+0x154>)
 8000c0a:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8000c0e:	4a3f      	ldr	r2, [pc, #252]	; (8000d0c <HAL_SD_MspInit+0x154>)
 8000c10:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c14:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 8000c18:	4b3c      	ldr	r3, [pc, #240]	; (8000d0c <HAL_SD_MspInit+0x154>)
 8000c1a:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8000c1e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000c22:	617b      	str	r3, [r7, #20]
 8000c24:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c26:	4b39      	ldr	r3, [pc, #228]	; (8000d0c <HAL_SD_MspInit+0x154>)
 8000c28:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c2c:	4a37      	ldr	r2, [pc, #220]	; (8000d0c <HAL_SD_MspInit+0x154>)
 8000c2e:	f043 0304 	orr.w	r3, r3, #4
 8000c32:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c36:	4b35      	ldr	r3, [pc, #212]	; (8000d0c <HAL_SD_MspInit+0x154>)
 8000c38:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c3c:	f003 0304 	and.w	r3, r3, #4
 8000c40:	613b      	str	r3, [r7, #16]
 8000c42:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c44:	4b31      	ldr	r3, [pc, #196]	; (8000d0c <HAL_SD_MspInit+0x154>)
 8000c46:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c4a:	4a30      	ldr	r2, [pc, #192]	; (8000d0c <HAL_SD_MspInit+0x154>)
 8000c4c:	f043 0301 	orr.w	r3, r3, #1
 8000c50:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c54:	4b2d      	ldr	r3, [pc, #180]	; (8000d0c <HAL_SD_MspInit+0x154>)
 8000c56:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c5a:	f003 0301 	and.w	r3, r3, #1
 8000c5e:	60fb      	str	r3, [r7, #12]
 8000c60:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c62:	4b2a      	ldr	r3, [pc, #168]	; (8000d0c <HAL_SD_MspInit+0x154>)
 8000c64:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c68:	4a28      	ldr	r2, [pc, #160]	; (8000d0c <HAL_SD_MspInit+0x154>)
 8000c6a:	f043 0302 	orr.w	r3, r3, #2
 8000c6e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c72:	4b26      	ldr	r3, [pc, #152]	; (8000d0c <HAL_SD_MspInit+0x154>)
 8000c74:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c78:	f003 0302 	and.w	r3, r3, #2
 8000c7c:	60bb      	str	r3, [r7, #8]
 8000c7e:	68bb      	ldr	r3, [r7, #8]
    PB14     ------> SDMMC2_D0
    PB15     ------> SDMMC2_D1
    PB3 (JTDO/TRACESWO)     ------> SDMMC2_D2
    PB4 (NJTRST)     ------> SDMMC2_D3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000c80:	2302      	movs	r3, #2
 8000c82:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c86:	2302      	movs	r3, #2
 8000c88:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c92:	2303      	movs	r3, #3
 8000c94:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF9_SDIO2;
 8000c98:	2309      	movs	r3, #9
 8000c9a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c9e:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000ca2:	4619      	mov	r1, r3
 8000ca4:	481a      	ldr	r0, [pc, #104]	; (8000d10 <HAL_SD_MspInit+0x158>)
 8000ca6:	f000 fb8f 	bl	80013c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000caa:	2301      	movs	r3, #1
 8000cac:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cb0:	2302      	movs	r3, #2
 8000cb2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cbc:	2303      	movs	r3, #3
 8000cbe:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF9_SDIO2;
 8000cc2:	2309      	movs	r3, #9
 8000cc4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cc8:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000ccc:	4619      	mov	r1, r3
 8000cce:	4811      	ldr	r0, [pc, #68]	; (8000d14 <HAL_SD_MspInit+0x15c>)
 8000cd0:	f000 fb7a 	bl	80013c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_3|GPIO_PIN_4;
 8000cd4:	f24c 0318 	movw	r3, #49176	; 0xc018
 8000cd8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cdc:	2302      	movs	r3, #2
 8000cde:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ce8:	2303      	movs	r3, #3
 8000cea:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF9_SDIO2;
 8000cee:	2309      	movs	r3, #9
 8000cf0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cf4:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000cf8:	4619      	mov	r1, r3
 8000cfa:	4807      	ldr	r0, [pc, #28]	; (8000d18 <HAL_SD_MspInit+0x160>)
 8000cfc:	f000 fb64 	bl	80013c8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SDMMC2_MspInit 1 */

  /* USER CODE END SDMMC2_MspInit 1 */
  }

}
 8000d00:	bf00      	nop
 8000d02:	37e8      	adds	r7, #232	; 0xe8
 8000d04:	46bd      	mov	sp, r7
 8000d06:	bd80      	pop	{r7, pc}
 8000d08:	48022400 	.word	0x48022400
 8000d0c:	58024400 	.word	0x58024400
 8000d10:	58020800 	.word	0x58020800
 8000d14:	58020000 	.word	0x58020000
 8000d18:	58020400 	.word	0x58020400

08000d1c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b0b8      	sub	sp, #224	; 0xe0
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d24:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000d28:	2200      	movs	r2, #0
 8000d2a:	601a      	str	r2, [r3, #0]
 8000d2c:	605a      	str	r2, [r3, #4]
 8000d2e:	609a      	str	r2, [r3, #8]
 8000d30:	60da      	str	r2, [r3, #12]
 8000d32:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d34:	f107 0310 	add.w	r3, r7, #16
 8000d38:	22bc      	movs	r2, #188	; 0xbc
 8000d3a:	2100      	movs	r1, #0
 8000d3c:	4618      	mov	r0, r3
 8000d3e:	f007 f881 	bl	8007e44 <memset>
  if(huart->Instance==USART1)
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	4a25      	ldr	r2, [pc, #148]	; (8000ddc <HAL_UART_MspInit+0xc0>)
 8000d48:	4293      	cmp	r3, r2
 8000d4a:	d142      	bne.n	8000dd2 <HAL_UART_MspInit+0xb6>
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000d4c:	2301      	movs	r3, #1
 8000d4e:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 8000d50:	2300      	movs	r3, #0
 8000d52:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d56:	f107 0310 	add.w	r3, r7, #16
 8000d5a:	4618      	mov	r0, r3
 8000d5c:	f001 feca 	bl	8002af4 <HAL_RCCEx_PeriphCLKConfig>
 8000d60:	4603      	mov	r3, r0
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d001      	beq.n	8000d6a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000d66:	f7ff fdf1 	bl	800094c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000d6a:	4b1d      	ldr	r3, [pc, #116]	; (8000de0 <HAL_UART_MspInit+0xc4>)
 8000d6c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000d70:	4a1b      	ldr	r2, [pc, #108]	; (8000de0 <HAL_UART_MspInit+0xc4>)
 8000d72:	f043 0310 	orr.w	r3, r3, #16
 8000d76:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8000d7a:	4b19      	ldr	r3, [pc, #100]	; (8000de0 <HAL_UART_MspInit+0xc4>)
 8000d7c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000d80:	f003 0310 	and.w	r3, r3, #16
 8000d84:	60fb      	str	r3, [r7, #12]
 8000d86:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d88:	4b15      	ldr	r3, [pc, #84]	; (8000de0 <HAL_UART_MspInit+0xc4>)
 8000d8a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d8e:	4a14      	ldr	r2, [pc, #80]	; (8000de0 <HAL_UART_MspInit+0xc4>)
 8000d90:	f043 0301 	orr.w	r3, r3, #1
 8000d94:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d98:	4b11      	ldr	r3, [pc, #68]	; (8000de0 <HAL_UART_MspInit+0xc4>)
 8000d9a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d9e:	f003 0301 	and.w	r3, r3, #1
 8000da2:	60bb      	str	r3, [r7, #8]
 8000da4:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000da6:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000daa:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dae:	2302      	movs	r3, #2
 8000db0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000db4:	2300      	movs	r3, #0
 8000db6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dba:	2300      	movs	r3, #0
 8000dbc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000dc0:	2307      	movs	r3, #7
 8000dc2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dc6:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000dca:	4619      	mov	r1, r3
 8000dcc:	4805      	ldr	r0, [pc, #20]	; (8000de4 <HAL_UART_MspInit+0xc8>)
 8000dce:	f000 fafb 	bl	80013c8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000dd2:	bf00      	nop
 8000dd4:	37e0      	adds	r7, #224	; 0xe0
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	bd80      	pop	{r7, pc}
 8000dda:	bf00      	nop
 8000ddc:	40011000 	.word	0x40011000
 8000de0:	58024400 	.word	0x58024400
 8000de4:	58020000 	.word	0x58020000

08000de8 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b0b8      	sub	sp, #224	; 0xe0
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000df0:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000df4:	2200      	movs	r2, #0
 8000df6:	601a      	str	r2, [r3, #0]
 8000df8:	605a      	str	r2, [r3, #4]
 8000dfa:	609a      	str	r2, [r3, #8]
 8000dfc:	60da      	str	r2, [r3, #12]
 8000dfe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000e00:	f107 0310 	add.w	r3, r7, #16
 8000e04:	22bc      	movs	r2, #188	; 0xbc
 8000e06:	2100      	movs	r1, #0
 8000e08:	4618      	mov	r0, r3
 8000e0a:	f007 f81b 	bl	8007e44 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	4a27      	ldr	r2, [pc, #156]	; (8000eb0 <HAL_PCD_MspInit+0xc8>)
 8000e14:	4293      	cmp	r3, r2
 8000e16:	d146      	bne.n	8000ea6 <HAL_PCD_MspInit+0xbe>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000e18:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8000e1c:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8000e1e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000e22:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e26:	f107 0310 	add.w	r3, r7, #16
 8000e2a:	4618      	mov	r0, r3
 8000e2c:	f001 fe62 	bl	8002af4 <HAL_RCCEx_PeriphCLKConfig>
 8000e30:	4603      	mov	r3, r0
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d001      	beq.n	8000e3a <HAL_PCD_MspInit+0x52>
    {
      Error_Handler();
 8000e36:	f7ff fd89 	bl	800094c <Error_Handler>
    }
  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8000e3a:	f000 fdf7 	bl	8001a2c <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e3e:	4b1d      	ldr	r3, [pc, #116]	; (8000eb4 <HAL_PCD_MspInit+0xcc>)
 8000e40:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e44:	4a1b      	ldr	r2, [pc, #108]	; (8000eb4 <HAL_PCD_MspInit+0xcc>)
 8000e46:	f043 0301 	orr.w	r3, r3, #1
 8000e4a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e4e:	4b19      	ldr	r3, [pc, #100]	; (8000eb4 <HAL_PCD_MspInit+0xcc>)
 8000e50:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e54:	f003 0301 	and.w	r3, r3, #1
 8000e58:	60fb      	str	r3, [r7, #12]
 8000e5a:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000e5c:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000e60:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e64:	2302      	movs	r3, #2
 8000e66:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e70:	2300      	movs	r3, #0
 8000e72:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8000e76:	230a      	movs	r3, #10
 8000e78:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e7c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000e80:	4619      	mov	r1, r3
 8000e82:	480d      	ldr	r0, [pc, #52]	; (8000eb8 <HAL_PCD_MspInit+0xd0>)
 8000e84:	f000 faa0 	bl	80013c8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000e88:	4b0a      	ldr	r3, [pc, #40]	; (8000eb4 <HAL_PCD_MspInit+0xcc>)
 8000e8a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000e8e:	4a09      	ldr	r2, [pc, #36]	; (8000eb4 <HAL_PCD_MspInit+0xcc>)
 8000e90:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000e94:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000e98:	4b06      	ldr	r3, [pc, #24]	; (8000eb4 <HAL_PCD_MspInit+0xcc>)
 8000e9a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000e9e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000ea2:	60bb      	str	r3, [r7, #8]
 8000ea4:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8000ea6:	bf00      	nop
 8000ea8:	37e0      	adds	r7, #224	; 0xe0
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	bd80      	pop	{r7, pc}
 8000eae:	bf00      	nop
 8000eb0:	40080000 	.word	0x40080000
 8000eb4:	58024400 	.word	0x58024400
 8000eb8:	58020000 	.word	0x58020000

08000ebc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ebc:	b480      	push	{r7}
 8000ebe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ec0:	e7fe      	b.n	8000ec0 <NMI_Handler+0x4>

08000ec2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ec2:	b480      	push	{r7}
 8000ec4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ec6:	e7fe      	b.n	8000ec6 <HardFault_Handler+0x4>

08000ec8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ec8:	b480      	push	{r7}
 8000eca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ecc:	e7fe      	b.n	8000ecc <MemManage_Handler+0x4>

08000ece <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ece:	b480      	push	{r7}
 8000ed0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ed2:	e7fe      	b.n	8000ed2 <BusFault_Handler+0x4>

08000ed4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ed8:	e7fe      	b.n	8000ed8 <UsageFault_Handler+0x4>

08000eda <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000eda:	b480      	push	{r7}
 8000edc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ede:	bf00      	nop
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee6:	4770      	bx	lr

08000ee8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000eec:	bf00      	nop
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef4:	4770      	bx	lr

08000ef6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ef6:	b480      	push	{r7}
 8000ef8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000efa:	bf00      	nop
 8000efc:	46bd      	mov	sp, r7
 8000efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f02:	4770      	bx	lr

08000f04 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f08:	f000 f92a 	bl	8001160 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f0c:	bf00      	nop
 8000f0e:	bd80      	pop	{r7, pc}

08000f10 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000f10:	b480      	push	{r7}
 8000f12:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000f14:	4b39      	ldr	r3, [pc, #228]	; (8000ffc <SystemInit+0xec>)
 8000f16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f1a:	4a38      	ldr	r2, [pc, #224]	; (8000ffc <SystemInit+0xec>)
 8000f1c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f20:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000f24:	4b36      	ldr	r3, [pc, #216]	; (8001000 <SystemInit+0xf0>)
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	f003 030f 	and.w	r3, r3, #15
 8000f2c:	2b06      	cmp	r3, #6
 8000f2e:	d807      	bhi.n	8000f40 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000f30:	4b33      	ldr	r3, [pc, #204]	; (8001000 <SystemInit+0xf0>)
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	f023 030f 	bic.w	r3, r3, #15
 8000f38:	4a31      	ldr	r2, [pc, #196]	; (8001000 <SystemInit+0xf0>)
 8000f3a:	f043 0307 	orr.w	r3, r3, #7
 8000f3e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000f40:	4b30      	ldr	r3, [pc, #192]	; (8001004 <SystemInit+0xf4>)
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	4a2f      	ldr	r2, [pc, #188]	; (8001004 <SystemInit+0xf4>)
 8000f46:	f043 0301 	orr.w	r3, r3, #1
 8000f4a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000f4c:	4b2d      	ldr	r3, [pc, #180]	; (8001004 <SystemInit+0xf4>)
 8000f4e:	2200      	movs	r2, #0
 8000f50:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000f52:	4b2c      	ldr	r3, [pc, #176]	; (8001004 <SystemInit+0xf4>)
 8000f54:	681a      	ldr	r2, [r3, #0]
 8000f56:	492b      	ldr	r1, [pc, #172]	; (8001004 <SystemInit+0xf4>)
 8000f58:	4b2b      	ldr	r3, [pc, #172]	; (8001008 <SystemInit+0xf8>)
 8000f5a:	4013      	ands	r3, r2
 8000f5c:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000f5e:	4b28      	ldr	r3, [pc, #160]	; (8001000 <SystemInit+0xf0>)
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	f003 0308 	and.w	r3, r3, #8
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d007      	beq.n	8000f7a <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000f6a:	4b25      	ldr	r3, [pc, #148]	; (8001000 <SystemInit+0xf0>)
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	f023 030f 	bic.w	r3, r3, #15
 8000f72:	4a23      	ldr	r2, [pc, #140]	; (8001000 <SystemInit+0xf0>)
 8000f74:	f043 0307 	orr.w	r3, r3, #7
 8000f78:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000f7a:	4b22      	ldr	r3, [pc, #136]	; (8001004 <SystemInit+0xf4>)
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000f80:	4b20      	ldr	r3, [pc, #128]	; (8001004 <SystemInit+0xf4>)
 8000f82:	2200      	movs	r2, #0
 8000f84:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000f86:	4b1f      	ldr	r3, [pc, #124]	; (8001004 <SystemInit+0xf4>)
 8000f88:	2200      	movs	r2, #0
 8000f8a:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000f8c:	4b1d      	ldr	r3, [pc, #116]	; (8001004 <SystemInit+0xf4>)
 8000f8e:	4a1f      	ldr	r2, [pc, #124]	; (800100c <SystemInit+0xfc>)
 8000f90:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000f92:	4b1c      	ldr	r3, [pc, #112]	; (8001004 <SystemInit+0xf4>)
 8000f94:	4a1e      	ldr	r2, [pc, #120]	; (8001010 <SystemInit+0x100>)
 8000f96:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000f98:	4b1a      	ldr	r3, [pc, #104]	; (8001004 <SystemInit+0xf4>)
 8000f9a:	4a1e      	ldr	r2, [pc, #120]	; (8001014 <SystemInit+0x104>)
 8000f9c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000f9e:	4b19      	ldr	r3, [pc, #100]	; (8001004 <SystemInit+0xf4>)
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000fa4:	4b17      	ldr	r3, [pc, #92]	; (8001004 <SystemInit+0xf4>)
 8000fa6:	4a1b      	ldr	r2, [pc, #108]	; (8001014 <SystemInit+0x104>)
 8000fa8:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000faa:	4b16      	ldr	r3, [pc, #88]	; (8001004 <SystemInit+0xf4>)
 8000fac:	2200      	movs	r2, #0
 8000fae:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000fb0:	4b14      	ldr	r3, [pc, #80]	; (8001004 <SystemInit+0xf4>)
 8000fb2:	4a18      	ldr	r2, [pc, #96]	; (8001014 <SystemInit+0x104>)
 8000fb4:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000fb6:	4b13      	ldr	r3, [pc, #76]	; (8001004 <SystemInit+0xf4>)
 8000fb8:	2200      	movs	r2, #0
 8000fba:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000fbc:	4b11      	ldr	r3, [pc, #68]	; (8001004 <SystemInit+0xf4>)
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	4a10      	ldr	r2, [pc, #64]	; (8001004 <SystemInit+0xf4>)
 8000fc2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000fc6:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000fc8:	4b0e      	ldr	r3, [pc, #56]	; (8001004 <SystemInit+0xf4>)
 8000fca:	2200      	movs	r2, #0
 8000fcc:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000fce:	4b12      	ldr	r3, [pc, #72]	; (8001018 <SystemInit+0x108>)
 8000fd0:	681a      	ldr	r2, [r3, #0]
 8000fd2:	4b12      	ldr	r3, [pc, #72]	; (800101c <SystemInit+0x10c>)
 8000fd4:	4013      	ands	r3, r2
 8000fd6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000fda:	d202      	bcs.n	8000fe2 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000fdc:	4b10      	ldr	r3, [pc, #64]	; (8001020 <SystemInit+0x110>)
 8000fde:	2201      	movs	r2, #1
 8000fe0:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000fe2:	4b10      	ldr	r3, [pc, #64]	; (8001024 <SystemInit+0x114>)
 8000fe4:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000fe8:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000fea:	4b04      	ldr	r3, [pc, #16]	; (8000ffc <SystemInit+0xec>)
 8000fec:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000ff0:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 8000ff2:	bf00      	nop
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffa:	4770      	bx	lr
 8000ffc:	e000ed00 	.word	0xe000ed00
 8001000:	52002000 	.word	0x52002000
 8001004:	58024400 	.word	0x58024400
 8001008:	eaf6ed7f 	.word	0xeaf6ed7f
 800100c:	02020200 	.word	0x02020200
 8001010:	01ff0000 	.word	0x01ff0000
 8001014:	01010280 	.word	0x01010280
 8001018:	5c001000 	.word	0x5c001000
 800101c:	ffff0000 	.word	0xffff0000
 8001020:	51008108 	.word	0x51008108
 8001024:	52004000 	.word	0x52004000

08001028 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001028:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001060 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 800102c:	f7ff ff70 	bl	8000f10 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001030:	480c      	ldr	r0, [pc, #48]	; (8001064 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001032:	490d      	ldr	r1, [pc, #52]	; (8001068 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001034:	4a0d      	ldr	r2, [pc, #52]	; (800106c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001036:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001038:	e002      	b.n	8001040 <LoopCopyDataInit>

0800103a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800103a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800103c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800103e:	3304      	adds	r3, #4

08001040 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001040:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001042:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001044:	d3f9      	bcc.n	800103a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001046:	4a0a      	ldr	r2, [pc, #40]	; (8001070 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001048:	4c0a      	ldr	r4, [pc, #40]	; (8001074 <LoopFillZerobss+0x22>)
  movs r3, #0
 800104a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800104c:	e001      	b.n	8001052 <LoopFillZerobss>

0800104e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800104e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001050:	3204      	adds	r2, #4

08001052 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001052:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001054:	d3fb      	bcc.n	800104e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001056:	f006 fefd 	bl	8007e54 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800105a:	f7ff fabb 	bl	80005d4 <main>
  bx  lr
 800105e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001060:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001064:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001068:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 800106c:	08007efc 	.word	0x08007efc
  ldr r2, =_sbss
 8001070:	24000010 	.word	0x24000010
  ldr r4, =_ebss
 8001074:	24000590 	.word	0x24000590

08001078 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001078:	e7fe      	b.n	8001078 <ADC3_IRQHandler>
	...

0800107c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b082      	sub	sp, #8
 8001080:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001082:	2003      	movs	r0, #3
 8001084:	f000 f96e 	bl	8001364 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001088:	f001 fb5e 	bl	8002748 <HAL_RCC_GetSysClockFreq>
 800108c:	4602      	mov	r2, r0
 800108e:	4b15      	ldr	r3, [pc, #84]	; (80010e4 <HAL_Init+0x68>)
 8001090:	699b      	ldr	r3, [r3, #24]
 8001092:	0a1b      	lsrs	r3, r3, #8
 8001094:	f003 030f 	and.w	r3, r3, #15
 8001098:	4913      	ldr	r1, [pc, #76]	; (80010e8 <HAL_Init+0x6c>)
 800109a:	5ccb      	ldrb	r3, [r1, r3]
 800109c:	f003 031f 	and.w	r3, r3, #31
 80010a0:	fa22 f303 	lsr.w	r3, r2, r3
 80010a4:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80010a6:	4b0f      	ldr	r3, [pc, #60]	; (80010e4 <HAL_Init+0x68>)
 80010a8:	699b      	ldr	r3, [r3, #24]
 80010aa:	f003 030f 	and.w	r3, r3, #15
 80010ae:	4a0e      	ldr	r2, [pc, #56]	; (80010e8 <HAL_Init+0x6c>)
 80010b0:	5cd3      	ldrb	r3, [r2, r3]
 80010b2:	f003 031f 	and.w	r3, r3, #31
 80010b6:	687a      	ldr	r2, [r7, #4]
 80010b8:	fa22 f303 	lsr.w	r3, r2, r3
 80010bc:	4a0b      	ldr	r2, [pc, #44]	; (80010ec <HAL_Init+0x70>)
 80010be:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80010c0:	4a0b      	ldr	r2, [pc, #44]	; (80010f0 <HAL_Init+0x74>)
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80010c6:	200f      	movs	r0, #15
 80010c8:	f000 f814 	bl	80010f4 <HAL_InitTick>
 80010cc:	4603      	mov	r3, r0
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d001      	beq.n	80010d6 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80010d2:	2301      	movs	r3, #1
 80010d4:	e002      	b.n	80010dc <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80010d6:	f7ff fc3f 	bl	8000958 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80010da:	2300      	movs	r3, #0
}
 80010dc:	4618      	mov	r0, r3
 80010de:	3708      	adds	r7, #8
 80010e0:	46bd      	mov	sp, r7
 80010e2:	bd80      	pop	{r7, pc}
 80010e4:	58024400 	.word	0x58024400
 80010e8:	08007eb4 	.word	0x08007eb4
 80010ec:	24000004 	.word	0x24000004
 80010f0:	24000000 	.word	0x24000000

080010f4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b082      	sub	sp, #8
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80010fc:	4b15      	ldr	r3, [pc, #84]	; (8001154 <HAL_InitTick+0x60>)
 80010fe:	781b      	ldrb	r3, [r3, #0]
 8001100:	2b00      	cmp	r3, #0
 8001102:	d101      	bne.n	8001108 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001104:	2301      	movs	r3, #1
 8001106:	e021      	b.n	800114c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001108:	4b13      	ldr	r3, [pc, #76]	; (8001158 <HAL_InitTick+0x64>)
 800110a:	681a      	ldr	r2, [r3, #0]
 800110c:	4b11      	ldr	r3, [pc, #68]	; (8001154 <HAL_InitTick+0x60>)
 800110e:	781b      	ldrb	r3, [r3, #0]
 8001110:	4619      	mov	r1, r3
 8001112:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001116:	fbb3 f3f1 	udiv	r3, r3, r1
 800111a:	fbb2 f3f3 	udiv	r3, r2, r3
 800111e:	4618      	mov	r0, r3
 8001120:	f000 f945 	bl	80013ae <HAL_SYSTICK_Config>
 8001124:	4603      	mov	r3, r0
 8001126:	2b00      	cmp	r3, #0
 8001128:	d001      	beq.n	800112e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800112a:	2301      	movs	r3, #1
 800112c:	e00e      	b.n	800114c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	2b0f      	cmp	r3, #15
 8001132:	d80a      	bhi.n	800114a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001134:	2200      	movs	r2, #0
 8001136:	6879      	ldr	r1, [r7, #4]
 8001138:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800113c:	f000 f91d 	bl	800137a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001140:	4a06      	ldr	r2, [pc, #24]	; (800115c <HAL_InitTick+0x68>)
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001146:	2300      	movs	r3, #0
 8001148:	e000      	b.n	800114c <HAL_InitTick+0x58>
    return HAL_ERROR;
 800114a:	2301      	movs	r3, #1
}
 800114c:	4618      	mov	r0, r3
 800114e:	3708      	adds	r7, #8
 8001150:	46bd      	mov	sp, r7
 8001152:	bd80      	pop	{r7, pc}
 8001154:	2400000c 	.word	0x2400000c
 8001158:	24000000 	.word	0x24000000
 800115c:	24000008 	.word	0x24000008

08001160 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001160:	b480      	push	{r7}
 8001162:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001164:	4b06      	ldr	r3, [pc, #24]	; (8001180 <HAL_IncTick+0x20>)
 8001166:	781b      	ldrb	r3, [r3, #0]
 8001168:	461a      	mov	r2, r3
 800116a:	4b06      	ldr	r3, [pc, #24]	; (8001184 <HAL_IncTick+0x24>)
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	4413      	add	r3, r2
 8001170:	4a04      	ldr	r2, [pc, #16]	; (8001184 <HAL_IncTick+0x24>)
 8001172:	6013      	str	r3, [r2, #0]
}
 8001174:	bf00      	nop
 8001176:	46bd      	mov	sp, r7
 8001178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117c:	4770      	bx	lr
 800117e:	bf00      	nop
 8001180:	2400000c 	.word	0x2400000c
 8001184:	2400058c 	.word	0x2400058c

08001188 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001188:	b480      	push	{r7}
 800118a:	af00      	add	r7, sp, #0
  return uwTick;
 800118c:	4b03      	ldr	r3, [pc, #12]	; (800119c <HAL_GetTick+0x14>)
 800118e:	681b      	ldr	r3, [r3, #0]
}
 8001190:	4618      	mov	r0, r3
 8001192:	46bd      	mov	sp, r7
 8001194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001198:	4770      	bx	lr
 800119a:	bf00      	nop
 800119c:	2400058c 	.word	0x2400058c

080011a0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b084      	sub	sp, #16
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80011a8:	f7ff ffee 	bl	8001188 <HAL_GetTick>
 80011ac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80011b2:	68fb      	ldr	r3, [r7, #12]
 80011b4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80011b8:	d005      	beq.n	80011c6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80011ba:	4b0a      	ldr	r3, [pc, #40]	; (80011e4 <HAL_Delay+0x44>)
 80011bc:	781b      	ldrb	r3, [r3, #0]
 80011be:	461a      	mov	r2, r3
 80011c0:	68fb      	ldr	r3, [r7, #12]
 80011c2:	4413      	add	r3, r2
 80011c4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80011c6:	bf00      	nop
 80011c8:	f7ff ffde 	bl	8001188 <HAL_GetTick>
 80011cc:	4602      	mov	r2, r0
 80011ce:	68bb      	ldr	r3, [r7, #8]
 80011d0:	1ad3      	subs	r3, r2, r3
 80011d2:	68fa      	ldr	r2, [r7, #12]
 80011d4:	429a      	cmp	r2, r3
 80011d6:	d8f7      	bhi.n	80011c8 <HAL_Delay+0x28>
  {
  }
}
 80011d8:	bf00      	nop
 80011da:	bf00      	nop
 80011dc:	3710      	adds	r7, #16
 80011de:	46bd      	mov	sp, r7
 80011e0:	bd80      	pop	{r7, pc}
 80011e2:	bf00      	nop
 80011e4:	2400000c 	.word	0x2400000c

080011e8 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80011e8:	b480      	push	{r7}
 80011ea:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80011ec:	4b03      	ldr	r3, [pc, #12]	; (80011fc <HAL_GetREVID+0x14>)
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	0c1b      	lsrs	r3, r3, #16
}
 80011f2:	4618      	mov	r0, r3
 80011f4:	46bd      	mov	sp, r7
 80011f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fa:	4770      	bx	lr
 80011fc:	5c001000 	.word	0x5c001000

08001200 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001200:	b480      	push	{r7}
 8001202:	b085      	sub	sp, #20
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	f003 0307 	and.w	r3, r3, #7
 800120e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001210:	4b0b      	ldr	r3, [pc, #44]	; (8001240 <__NVIC_SetPriorityGrouping+0x40>)
 8001212:	68db      	ldr	r3, [r3, #12]
 8001214:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001216:	68ba      	ldr	r2, [r7, #8]
 8001218:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800121c:	4013      	ands	r3, r2
 800121e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001220:	68fb      	ldr	r3, [r7, #12]
 8001222:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001224:	68bb      	ldr	r3, [r7, #8]
 8001226:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001228:	4b06      	ldr	r3, [pc, #24]	; (8001244 <__NVIC_SetPriorityGrouping+0x44>)
 800122a:	4313      	orrs	r3, r2
 800122c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800122e:	4a04      	ldr	r2, [pc, #16]	; (8001240 <__NVIC_SetPriorityGrouping+0x40>)
 8001230:	68bb      	ldr	r3, [r7, #8]
 8001232:	60d3      	str	r3, [r2, #12]
}
 8001234:	bf00      	nop
 8001236:	3714      	adds	r7, #20
 8001238:	46bd      	mov	sp, r7
 800123a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123e:	4770      	bx	lr
 8001240:	e000ed00 	.word	0xe000ed00
 8001244:	05fa0000 	.word	0x05fa0000

08001248 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001248:	b480      	push	{r7}
 800124a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800124c:	4b04      	ldr	r3, [pc, #16]	; (8001260 <__NVIC_GetPriorityGrouping+0x18>)
 800124e:	68db      	ldr	r3, [r3, #12]
 8001250:	0a1b      	lsrs	r3, r3, #8
 8001252:	f003 0307 	and.w	r3, r3, #7
}
 8001256:	4618      	mov	r0, r3
 8001258:	46bd      	mov	sp, r7
 800125a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125e:	4770      	bx	lr
 8001260:	e000ed00 	.word	0xe000ed00

08001264 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001264:	b480      	push	{r7}
 8001266:	b083      	sub	sp, #12
 8001268:	af00      	add	r7, sp, #0
 800126a:	4603      	mov	r3, r0
 800126c:	6039      	str	r1, [r7, #0]
 800126e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001270:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001274:	2b00      	cmp	r3, #0
 8001276:	db0a      	blt.n	800128e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001278:	683b      	ldr	r3, [r7, #0]
 800127a:	b2da      	uxtb	r2, r3
 800127c:	490c      	ldr	r1, [pc, #48]	; (80012b0 <__NVIC_SetPriority+0x4c>)
 800127e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001282:	0112      	lsls	r2, r2, #4
 8001284:	b2d2      	uxtb	r2, r2
 8001286:	440b      	add	r3, r1
 8001288:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800128c:	e00a      	b.n	80012a4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800128e:	683b      	ldr	r3, [r7, #0]
 8001290:	b2da      	uxtb	r2, r3
 8001292:	4908      	ldr	r1, [pc, #32]	; (80012b4 <__NVIC_SetPriority+0x50>)
 8001294:	88fb      	ldrh	r3, [r7, #6]
 8001296:	f003 030f 	and.w	r3, r3, #15
 800129a:	3b04      	subs	r3, #4
 800129c:	0112      	lsls	r2, r2, #4
 800129e:	b2d2      	uxtb	r2, r2
 80012a0:	440b      	add	r3, r1
 80012a2:	761a      	strb	r2, [r3, #24]
}
 80012a4:	bf00      	nop
 80012a6:	370c      	adds	r7, #12
 80012a8:	46bd      	mov	sp, r7
 80012aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ae:	4770      	bx	lr
 80012b0:	e000e100 	.word	0xe000e100
 80012b4:	e000ed00 	.word	0xe000ed00

080012b8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012b8:	b480      	push	{r7}
 80012ba:	b089      	sub	sp, #36	; 0x24
 80012bc:	af00      	add	r7, sp, #0
 80012be:	60f8      	str	r0, [r7, #12]
 80012c0:	60b9      	str	r1, [r7, #8]
 80012c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80012c4:	68fb      	ldr	r3, [r7, #12]
 80012c6:	f003 0307 	and.w	r3, r3, #7
 80012ca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80012cc:	69fb      	ldr	r3, [r7, #28]
 80012ce:	f1c3 0307 	rsb	r3, r3, #7
 80012d2:	2b04      	cmp	r3, #4
 80012d4:	bf28      	it	cs
 80012d6:	2304      	movcs	r3, #4
 80012d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012da:	69fb      	ldr	r3, [r7, #28]
 80012dc:	3304      	adds	r3, #4
 80012de:	2b06      	cmp	r3, #6
 80012e0:	d902      	bls.n	80012e8 <NVIC_EncodePriority+0x30>
 80012e2:	69fb      	ldr	r3, [r7, #28]
 80012e4:	3b03      	subs	r3, #3
 80012e6:	e000      	b.n	80012ea <NVIC_EncodePriority+0x32>
 80012e8:	2300      	movs	r3, #0
 80012ea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012ec:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80012f0:	69bb      	ldr	r3, [r7, #24]
 80012f2:	fa02 f303 	lsl.w	r3, r2, r3
 80012f6:	43da      	mvns	r2, r3
 80012f8:	68bb      	ldr	r3, [r7, #8]
 80012fa:	401a      	ands	r2, r3
 80012fc:	697b      	ldr	r3, [r7, #20]
 80012fe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001300:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001304:	697b      	ldr	r3, [r7, #20]
 8001306:	fa01 f303 	lsl.w	r3, r1, r3
 800130a:	43d9      	mvns	r1, r3
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001310:	4313      	orrs	r3, r2
         );
}
 8001312:	4618      	mov	r0, r3
 8001314:	3724      	adds	r7, #36	; 0x24
 8001316:	46bd      	mov	sp, r7
 8001318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131c:	4770      	bx	lr
	...

08001320 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b082      	sub	sp, #8
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	3b01      	subs	r3, #1
 800132c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001330:	d301      	bcc.n	8001336 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001332:	2301      	movs	r3, #1
 8001334:	e00f      	b.n	8001356 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001336:	4a0a      	ldr	r2, [pc, #40]	; (8001360 <SysTick_Config+0x40>)
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	3b01      	subs	r3, #1
 800133c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800133e:	210f      	movs	r1, #15
 8001340:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001344:	f7ff ff8e 	bl	8001264 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001348:	4b05      	ldr	r3, [pc, #20]	; (8001360 <SysTick_Config+0x40>)
 800134a:	2200      	movs	r2, #0
 800134c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800134e:	4b04      	ldr	r3, [pc, #16]	; (8001360 <SysTick_Config+0x40>)
 8001350:	2207      	movs	r2, #7
 8001352:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001354:	2300      	movs	r3, #0
}
 8001356:	4618      	mov	r0, r3
 8001358:	3708      	adds	r7, #8
 800135a:	46bd      	mov	sp, r7
 800135c:	bd80      	pop	{r7, pc}
 800135e:	bf00      	nop
 8001360:	e000e010 	.word	0xe000e010

08001364 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	b082      	sub	sp, #8
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800136c:	6878      	ldr	r0, [r7, #4]
 800136e:	f7ff ff47 	bl	8001200 <__NVIC_SetPriorityGrouping>
}
 8001372:	bf00      	nop
 8001374:	3708      	adds	r7, #8
 8001376:	46bd      	mov	sp, r7
 8001378:	bd80      	pop	{r7, pc}

0800137a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800137a:	b580      	push	{r7, lr}
 800137c:	b086      	sub	sp, #24
 800137e:	af00      	add	r7, sp, #0
 8001380:	4603      	mov	r3, r0
 8001382:	60b9      	str	r1, [r7, #8]
 8001384:	607a      	str	r2, [r7, #4]
 8001386:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001388:	f7ff ff5e 	bl	8001248 <__NVIC_GetPriorityGrouping>
 800138c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800138e:	687a      	ldr	r2, [r7, #4]
 8001390:	68b9      	ldr	r1, [r7, #8]
 8001392:	6978      	ldr	r0, [r7, #20]
 8001394:	f7ff ff90 	bl	80012b8 <NVIC_EncodePriority>
 8001398:	4602      	mov	r2, r0
 800139a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800139e:	4611      	mov	r1, r2
 80013a0:	4618      	mov	r0, r3
 80013a2:	f7ff ff5f 	bl	8001264 <__NVIC_SetPriority>
}
 80013a6:	bf00      	nop
 80013a8:	3718      	adds	r7, #24
 80013aa:	46bd      	mov	sp, r7
 80013ac:	bd80      	pop	{r7, pc}

080013ae <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80013ae:	b580      	push	{r7, lr}
 80013b0:	b082      	sub	sp, #8
 80013b2:	af00      	add	r7, sp, #0
 80013b4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80013b6:	6878      	ldr	r0, [r7, #4]
 80013b8:	f7ff ffb2 	bl	8001320 <SysTick_Config>
 80013bc:	4603      	mov	r3, r0
}
 80013be:	4618      	mov	r0, r3
 80013c0:	3708      	adds	r7, #8
 80013c2:	46bd      	mov	sp, r7
 80013c4:	bd80      	pop	{r7, pc}
	...

080013c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80013c8:	b480      	push	{r7}
 80013ca:	b089      	sub	sp, #36	; 0x24
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]
 80013d0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80013d2:	2300      	movs	r3, #0
 80013d4:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80013d6:	4b89      	ldr	r3, [pc, #548]	; (80015fc <HAL_GPIO_Init+0x234>)
 80013d8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80013da:	e194      	b.n	8001706 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80013dc:	683b      	ldr	r3, [r7, #0]
 80013de:	681a      	ldr	r2, [r3, #0]
 80013e0:	2101      	movs	r1, #1
 80013e2:	69fb      	ldr	r3, [r7, #28]
 80013e4:	fa01 f303 	lsl.w	r3, r1, r3
 80013e8:	4013      	ands	r3, r2
 80013ea:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80013ec:	693b      	ldr	r3, [r7, #16]
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	f000 8186 	beq.w	8001700 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80013f4:	683b      	ldr	r3, [r7, #0]
 80013f6:	685b      	ldr	r3, [r3, #4]
 80013f8:	2b01      	cmp	r3, #1
 80013fa:	d00b      	beq.n	8001414 <HAL_GPIO_Init+0x4c>
 80013fc:	683b      	ldr	r3, [r7, #0]
 80013fe:	685b      	ldr	r3, [r3, #4]
 8001400:	2b02      	cmp	r3, #2
 8001402:	d007      	beq.n	8001414 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001404:	683b      	ldr	r3, [r7, #0]
 8001406:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001408:	2b11      	cmp	r3, #17
 800140a:	d003      	beq.n	8001414 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800140c:	683b      	ldr	r3, [r7, #0]
 800140e:	685b      	ldr	r3, [r3, #4]
 8001410:	2b12      	cmp	r3, #18
 8001412:	d130      	bne.n	8001476 <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	689b      	ldr	r3, [r3, #8]
 8001418:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800141a:	69fb      	ldr	r3, [r7, #28]
 800141c:	005b      	lsls	r3, r3, #1
 800141e:	2203      	movs	r2, #3
 8001420:	fa02 f303 	lsl.w	r3, r2, r3
 8001424:	43db      	mvns	r3, r3
 8001426:	69ba      	ldr	r2, [r7, #24]
 8001428:	4013      	ands	r3, r2
 800142a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800142c:	683b      	ldr	r3, [r7, #0]
 800142e:	68da      	ldr	r2, [r3, #12]
 8001430:	69fb      	ldr	r3, [r7, #28]
 8001432:	005b      	lsls	r3, r3, #1
 8001434:	fa02 f303 	lsl.w	r3, r2, r3
 8001438:	69ba      	ldr	r2, [r7, #24]
 800143a:	4313      	orrs	r3, r2
 800143c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	69ba      	ldr	r2, [r7, #24]
 8001442:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	685b      	ldr	r3, [r3, #4]
 8001448:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800144a:	2201      	movs	r2, #1
 800144c:	69fb      	ldr	r3, [r7, #28]
 800144e:	fa02 f303 	lsl.w	r3, r2, r3
 8001452:	43db      	mvns	r3, r3
 8001454:	69ba      	ldr	r2, [r7, #24]
 8001456:	4013      	ands	r3, r2
 8001458:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800145a:	683b      	ldr	r3, [r7, #0]
 800145c:	685b      	ldr	r3, [r3, #4]
 800145e:	091b      	lsrs	r3, r3, #4
 8001460:	f003 0201 	and.w	r2, r3, #1
 8001464:	69fb      	ldr	r3, [r7, #28]
 8001466:	fa02 f303 	lsl.w	r3, r2, r3
 800146a:	69ba      	ldr	r2, [r7, #24]
 800146c:	4313      	orrs	r3, r2
 800146e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	69ba      	ldr	r2, [r7, #24]
 8001474:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	68db      	ldr	r3, [r3, #12]
 800147a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800147c:	69fb      	ldr	r3, [r7, #28]
 800147e:	005b      	lsls	r3, r3, #1
 8001480:	2203      	movs	r2, #3
 8001482:	fa02 f303 	lsl.w	r3, r2, r3
 8001486:	43db      	mvns	r3, r3
 8001488:	69ba      	ldr	r2, [r7, #24]
 800148a:	4013      	ands	r3, r2
 800148c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800148e:	683b      	ldr	r3, [r7, #0]
 8001490:	689a      	ldr	r2, [r3, #8]
 8001492:	69fb      	ldr	r3, [r7, #28]
 8001494:	005b      	lsls	r3, r3, #1
 8001496:	fa02 f303 	lsl.w	r3, r2, r3
 800149a:	69ba      	ldr	r2, [r7, #24]
 800149c:	4313      	orrs	r3, r2
 800149e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	69ba      	ldr	r2, [r7, #24]
 80014a4:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80014a6:	683b      	ldr	r3, [r7, #0]
 80014a8:	685b      	ldr	r3, [r3, #4]
 80014aa:	2b02      	cmp	r3, #2
 80014ac:	d003      	beq.n	80014b6 <HAL_GPIO_Init+0xee>
 80014ae:	683b      	ldr	r3, [r7, #0]
 80014b0:	685b      	ldr	r3, [r3, #4]
 80014b2:	2b12      	cmp	r3, #18
 80014b4:	d123      	bne.n	80014fe <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80014b6:	69fb      	ldr	r3, [r7, #28]
 80014b8:	08da      	lsrs	r2, r3, #3
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	3208      	adds	r2, #8
 80014be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80014c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80014c4:	69fb      	ldr	r3, [r7, #28]
 80014c6:	f003 0307 	and.w	r3, r3, #7
 80014ca:	009b      	lsls	r3, r3, #2
 80014cc:	220f      	movs	r2, #15
 80014ce:	fa02 f303 	lsl.w	r3, r2, r3
 80014d2:	43db      	mvns	r3, r3
 80014d4:	69ba      	ldr	r2, [r7, #24]
 80014d6:	4013      	ands	r3, r2
 80014d8:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80014da:	683b      	ldr	r3, [r7, #0]
 80014dc:	691a      	ldr	r2, [r3, #16]
 80014de:	69fb      	ldr	r3, [r7, #28]
 80014e0:	f003 0307 	and.w	r3, r3, #7
 80014e4:	009b      	lsls	r3, r3, #2
 80014e6:	fa02 f303 	lsl.w	r3, r2, r3
 80014ea:	69ba      	ldr	r2, [r7, #24]
 80014ec:	4313      	orrs	r3, r2
 80014ee:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80014f0:	69fb      	ldr	r3, [r7, #28]
 80014f2:	08da      	lsrs	r2, r3, #3
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	3208      	adds	r2, #8
 80014f8:	69b9      	ldr	r1, [r7, #24]
 80014fa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001504:	69fb      	ldr	r3, [r7, #28]
 8001506:	005b      	lsls	r3, r3, #1
 8001508:	2203      	movs	r2, #3
 800150a:	fa02 f303 	lsl.w	r3, r2, r3
 800150e:	43db      	mvns	r3, r3
 8001510:	69ba      	ldr	r2, [r7, #24]
 8001512:	4013      	ands	r3, r2
 8001514:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001516:	683b      	ldr	r3, [r7, #0]
 8001518:	685b      	ldr	r3, [r3, #4]
 800151a:	f003 0203 	and.w	r2, r3, #3
 800151e:	69fb      	ldr	r3, [r7, #28]
 8001520:	005b      	lsls	r3, r3, #1
 8001522:	fa02 f303 	lsl.w	r3, r2, r3
 8001526:	69ba      	ldr	r2, [r7, #24]
 8001528:	4313      	orrs	r3, r2
 800152a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	69ba      	ldr	r2, [r7, #24]
 8001530:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001532:	683b      	ldr	r3, [r7, #0]
 8001534:	685b      	ldr	r3, [r3, #4]
 8001536:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800153a:	2b00      	cmp	r3, #0
 800153c:	f000 80e0 	beq.w	8001700 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001540:	4b2f      	ldr	r3, [pc, #188]	; (8001600 <HAL_GPIO_Init+0x238>)
 8001542:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001546:	4a2e      	ldr	r2, [pc, #184]	; (8001600 <HAL_GPIO_Init+0x238>)
 8001548:	f043 0302 	orr.w	r3, r3, #2
 800154c:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001550:	4b2b      	ldr	r3, [pc, #172]	; (8001600 <HAL_GPIO_Init+0x238>)
 8001552:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001556:	f003 0302 	and.w	r3, r3, #2
 800155a:	60fb      	str	r3, [r7, #12]
 800155c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800155e:	4a29      	ldr	r2, [pc, #164]	; (8001604 <HAL_GPIO_Init+0x23c>)
 8001560:	69fb      	ldr	r3, [r7, #28]
 8001562:	089b      	lsrs	r3, r3, #2
 8001564:	3302      	adds	r3, #2
 8001566:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800156a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800156c:	69fb      	ldr	r3, [r7, #28]
 800156e:	f003 0303 	and.w	r3, r3, #3
 8001572:	009b      	lsls	r3, r3, #2
 8001574:	220f      	movs	r2, #15
 8001576:	fa02 f303 	lsl.w	r3, r2, r3
 800157a:	43db      	mvns	r3, r3
 800157c:	69ba      	ldr	r2, [r7, #24]
 800157e:	4013      	ands	r3, r2
 8001580:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	4a20      	ldr	r2, [pc, #128]	; (8001608 <HAL_GPIO_Init+0x240>)
 8001586:	4293      	cmp	r3, r2
 8001588:	d052      	beq.n	8001630 <HAL_GPIO_Init+0x268>
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	4a1f      	ldr	r2, [pc, #124]	; (800160c <HAL_GPIO_Init+0x244>)
 800158e:	4293      	cmp	r3, r2
 8001590:	d031      	beq.n	80015f6 <HAL_GPIO_Init+0x22e>
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	4a1e      	ldr	r2, [pc, #120]	; (8001610 <HAL_GPIO_Init+0x248>)
 8001596:	4293      	cmp	r3, r2
 8001598:	d02b      	beq.n	80015f2 <HAL_GPIO_Init+0x22a>
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	4a1d      	ldr	r2, [pc, #116]	; (8001614 <HAL_GPIO_Init+0x24c>)
 800159e:	4293      	cmp	r3, r2
 80015a0:	d025      	beq.n	80015ee <HAL_GPIO_Init+0x226>
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	4a1c      	ldr	r2, [pc, #112]	; (8001618 <HAL_GPIO_Init+0x250>)
 80015a6:	4293      	cmp	r3, r2
 80015a8:	d01f      	beq.n	80015ea <HAL_GPIO_Init+0x222>
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	4a1b      	ldr	r2, [pc, #108]	; (800161c <HAL_GPIO_Init+0x254>)
 80015ae:	4293      	cmp	r3, r2
 80015b0:	d019      	beq.n	80015e6 <HAL_GPIO_Init+0x21e>
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	4a1a      	ldr	r2, [pc, #104]	; (8001620 <HAL_GPIO_Init+0x258>)
 80015b6:	4293      	cmp	r3, r2
 80015b8:	d013      	beq.n	80015e2 <HAL_GPIO_Init+0x21a>
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	4a19      	ldr	r2, [pc, #100]	; (8001624 <HAL_GPIO_Init+0x25c>)
 80015be:	4293      	cmp	r3, r2
 80015c0:	d00d      	beq.n	80015de <HAL_GPIO_Init+0x216>
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	4a18      	ldr	r2, [pc, #96]	; (8001628 <HAL_GPIO_Init+0x260>)
 80015c6:	4293      	cmp	r3, r2
 80015c8:	d007      	beq.n	80015da <HAL_GPIO_Init+0x212>
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	4a17      	ldr	r2, [pc, #92]	; (800162c <HAL_GPIO_Init+0x264>)
 80015ce:	4293      	cmp	r3, r2
 80015d0:	d101      	bne.n	80015d6 <HAL_GPIO_Init+0x20e>
 80015d2:	2309      	movs	r3, #9
 80015d4:	e02d      	b.n	8001632 <HAL_GPIO_Init+0x26a>
 80015d6:	230a      	movs	r3, #10
 80015d8:	e02b      	b.n	8001632 <HAL_GPIO_Init+0x26a>
 80015da:	2308      	movs	r3, #8
 80015dc:	e029      	b.n	8001632 <HAL_GPIO_Init+0x26a>
 80015de:	2307      	movs	r3, #7
 80015e0:	e027      	b.n	8001632 <HAL_GPIO_Init+0x26a>
 80015e2:	2306      	movs	r3, #6
 80015e4:	e025      	b.n	8001632 <HAL_GPIO_Init+0x26a>
 80015e6:	2305      	movs	r3, #5
 80015e8:	e023      	b.n	8001632 <HAL_GPIO_Init+0x26a>
 80015ea:	2304      	movs	r3, #4
 80015ec:	e021      	b.n	8001632 <HAL_GPIO_Init+0x26a>
 80015ee:	2303      	movs	r3, #3
 80015f0:	e01f      	b.n	8001632 <HAL_GPIO_Init+0x26a>
 80015f2:	2302      	movs	r3, #2
 80015f4:	e01d      	b.n	8001632 <HAL_GPIO_Init+0x26a>
 80015f6:	2301      	movs	r3, #1
 80015f8:	e01b      	b.n	8001632 <HAL_GPIO_Init+0x26a>
 80015fa:	bf00      	nop
 80015fc:	58000080 	.word	0x58000080
 8001600:	58024400 	.word	0x58024400
 8001604:	58000400 	.word	0x58000400
 8001608:	58020000 	.word	0x58020000
 800160c:	58020400 	.word	0x58020400
 8001610:	58020800 	.word	0x58020800
 8001614:	58020c00 	.word	0x58020c00
 8001618:	58021000 	.word	0x58021000
 800161c:	58021400 	.word	0x58021400
 8001620:	58021800 	.word	0x58021800
 8001624:	58021c00 	.word	0x58021c00
 8001628:	58022000 	.word	0x58022000
 800162c:	58022400 	.word	0x58022400
 8001630:	2300      	movs	r3, #0
 8001632:	69fa      	ldr	r2, [r7, #28]
 8001634:	f002 0203 	and.w	r2, r2, #3
 8001638:	0092      	lsls	r2, r2, #2
 800163a:	4093      	lsls	r3, r2
 800163c:	69ba      	ldr	r2, [r7, #24]
 800163e:	4313      	orrs	r3, r2
 8001640:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001642:	4938      	ldr	r1, [pc, #224]	; (8001724 <HAL_GPIO_Init+0x35c>)
 8001644:	69fb      	ldr	r3, [r7, #28]
 8001646:	089b      	lsrs	r3, r3, #2
 8001648:	3302      	adds	r3, #2
 800164a:	69ba      	ldr	r2, [r7, #24]
 800164c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8001650:	697b      	ldr	r3, [r7, #20]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001656:	693b      	ldr	r3, [r7, #16]
 8001658:	43db      	mvns	r3, r3
 800165a:	69ba      	ldr	r2, [r7, #24]
 800165c:	4013      	ands	r3, r2
 800165e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001660:	683b      	ldr	r3, [r7, #0]
 8001662:	685b      	ldr	r3, [r3, #4]
 8001664:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001668:	2b00      	cmp	r3, #0
 800166a:	d003      	beq.n	8001674 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800166c:	69ba      	ldr	r2, [r7, #24]
 800166e:	693b      	ldr	r3, [r7, #16]
 8001670:	4313      	orrs	r3, r2
 8001672:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8001674:	697b      	ldr	r3, [r7, #20]
 8001676:	69ba      	ldr	r2, [r7, #24]
 8001678:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 800167a:	697b      	ldr	r3, [r7, #20]
 800167c:	685b      	ldr	r3, [r3, #4]
 800167e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001680:	693b      	ldr	r3, [r7, #16]
 8001682:	43db      	mvns	r3, r3
 8001684:	69ba      	ldr	r2, [r7, #24]
 8001686:	4013      	ands	r3, r2
 8001688:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800168a:	683b      	ldr	r3, [r7, #0]
 800168c:	685b      	ldr	r3, [r3, #4]
 800168e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001692:	2b00      	cmp	r3, #0
 8001694:	d003      	beq.n	800169e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001696:	69ba      	ldr	r2, [r7, #24]
 8001698:	693b      	ldr	r3, [r7, #16]
 800169a:	4313      	orrs	r3, r2
 800169c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800169e:	697b      	ldr	r3, [r7, #20]
 80016a0:	69ba      	ldr	r2, [r7, #24]
 80016a2:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80016a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80016ac:	693b      	ldr	r3, [r7, #16]
 80016ae:	43db      	mvns	r3, r3
 80016b0:	69ba      	ldr	r2, [r7, #24]
 80016b2:	4013      	ands	r3, r2
 80016b4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80016b6:	683b      	ldr	r3, [r7, #0]
 80016b8:	685b      	ldr	r3, [r3, #4]
 80016ba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d003      	beq.n	80016ca <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 80016c2:	69ba      	ldr	r2, [r7, #24]
 80016c4:	693b      	ldr	r3, [r7, #16]
 80016c6:	4313      	orrs	r3, r2
 80016c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80016ca:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80016ce:	69bb      	ldr	r3, [r7, #24]
 80016d0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80016d2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80016d6:	685b      	ldr	r3, [r3, #4]
 80016d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80016da:	693b      	ldr	r3, [r7, #16]
 80016dc:	43db      	mvns	r3, r3
 80016de:	69ba      	ldr	r2, [r7, #24]
 80016e0:	4013      	ands	r3, r2
 80016e2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80016e4:	683b      	ldr	r3, [r7, #0]
 80016e6:	685b      	ldr	r3, [r3, #4]
 80016e8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d003      	beq.n	80016f8 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 80016f0:	69ba      	ldr	r2, [r7, #24]
 80016f2:	693b      	ldr	r3, [r7, #16]
 80016f4:	4313      	orrs	r3, r2
 80016f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80016f8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80016fc:	69bb      	ldr	r3, [r7, #24]
 80016fe:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8001700:	69fb      	ldr	r3, [r7, #28]
 8001702:	3301      	adds	r3, #1
 8001704:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001706:	683b      	ldr	r3, [r7, #0]
 8001708:	681a      	ldr	r2, [r3, #0]
 800170a:	69fb      	ldr	r3, [r7, #28]
 800170c:	fa22 f303 	lsr.w	r3, r2, r3
 8001710:	2b00      	cmp	r3, #0
 8001712:	f47f ae63 	bne.w	80013dc <HAL_GPIO_Init+0x14>
  }
}
 8001716:	bf00      	nop
 8001718:	bf00      	nop
 800171a:	3724      	adds	r7, #36	; 0x24
 800171c:	46bd      	mov	sp, r7
 800171e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001722:	4770      	bx	lr
 8001724:	58000400 	.word	0x58000400

08001728 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001728:	b5f0      	push	{r4, r5, r6, r7, lr}
 800172a:	b08f      	sub	sp, #60	; 0x3c
 800172c:	af0a      	add	r7, sp, #40	; 0x28
 800172e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	2b00      	cmp	r3, #0
 8001734:	d101      	bne.n	800173a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001736:	2301      	movs	r3, #1
 8001738:	e116      	b.n	8001968 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8001746:	b2db      	uxtb	r3, r3
 8001748:	2b00      	cmp	r3, #0
 800174a:	d106      	bne.n	800175a <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	2200      	movs	r2, #0
 8001750:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001754:	6878      	ldr	r0, [r7, #4]
 8001756:	f7ff fb47 	bl	8000de8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	2203      	movs	r2, #3
 800175e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001762:	68bb      	ldr	r3, [r7, #8]
 8001764:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001766:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800176a:	2b00      	cmp	r3, #0
 800176c:	d102      	bne.n	8001774 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	2200      	movs	r2, #0
 8001772:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	4618      	mov	r0, r3
 800177a:	f006 f913 	bl	80079a4 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	603b      	str	r3, [r7, #0]
 8001784:	687e      	ldr	r6, [r7, #4]
 8001786:	466d      	mov	r5, sp
 8001788:	f106 0410 	add.w	r4, r6, #16
 800178c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800178e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001790:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001792:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001794:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001798:	e885 0003 	stmia.w	r5, {r0, r1}
 800179c:	1d33      	adds	r3, r6, #4
 800179e:	cb0e      	ldmia	r3, {r1, r2, r3}
 80017a0:	6838      	ldr	r0, [r7, #0]
 80017a2:	f006 f891 	bl	80078c8 <USB_CoreInit>
 80017a6:	4603      	mov	r3, r0
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d005      	beq.n	80017b8 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	2202      	movs	r2, #2
 80017b0:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80017b4:	2301      	movs	r3, #1
 80017b6:	e0d7      	b.n	8001968 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	2100      	movs	r1, #0
 80017be:	4618      	mov	r0, r3
 80017c0:	f006 f901 	bl	80079c6 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80017c4:	2300      	movs	r3, #0
 80017c6:	73fb      	strb	r3, [r7, #15]
 80017c8:	e04a      	b.n	8001860 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80017ca:	7bfa      	ldrb	r2, [r7, #15]
 80017cc:	6879      	ldr	r1, [r7, #4]
 80017ce:	4613      	mov	r3, r2
 80017d0:	00db      	lsls	r3, r3, #3
 80017d2:	1a9b      	subs	r3, r3, r2
 80017d4:	009b      	lsls	r3, r3, #2
 80017d6:	440b      	add	r3, r1
 80017d8:	333d      	adds	r3, #61	; 0x3d
 80017da:	2201      	movs	r2, #1
 80017dc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80017de:	7bfa      	ldrb	r2, [r7, #15]
 80017e0:	6879      	ldr	r1, [r7, #4]
 80017e2:	4613      	mov	r3, r2
 80017e4:	00db      	lsls	r3, r3, #3
 80017e6:	1a9b      	subs	r3, r3, r2
 80017e8:	009b      	lsls	r3, r3, #2
 80017ea:	440b      	add	r3, r1
 80017ec:	333c      	adds	r3, #60	; 0x3c
 80017ee:	7bfa      	ldrb	r2, [r7, #15]
 80017f0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80017f2:	7bfa      	ldrb	r2, [r7, #15]
 80017f4:	7bfb      	ldrb	r3, [r7, #15]
 80017f6:	b298      	uxth	r0, r3
 80017f8:	6879      	ldr	r1, [r7, #4]
 80017fa:	4613      	mov	r3, r2
 80017fc:	00db      	lsls	r3, r3, #3
 80017fe:	1a9b      	subs	r3, r3, r2
 8001800:	009b      	lsls	r3, r3, #2
 8001802:	440b      	add	r3, r1
 8001804:	3342      	adds	r3, #66	; 0x42
 8001806:	4602      	mov	r2, r0
 8001808:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800180a:	7bfa      	ldrb	r2, [r7, #15]
 800180c:	6879      	ldr	r1, [r7, #4]
 800180e:	4613      	mov	r3, r2
 8001810:	00db      	lsls	r3, r3, #3
 8001812:	1a9b      	subs	r3, r3, r2
 8001814:	009b      	lsls	r3, r3, #2
 8001816:	440b      	add	r3, r1
 8001818:	333f      	adds	r3, #63	; 0x3f
 800181a:	2200      	movs	r2, #0
 800181c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800181e:	7bfa      	ldrb	r2, [r7, #15]
 8001820:	6879      	ldr	r1, [r7, #4]
 8001822:	4613      	mov	r3, r2
 8001824:	00db      	lsls	r3, r3, #3
 8001826:	1a9b      	subs	r3, r3, r2
 8001828:	009b      	lsls	r3, r3, #2
 800182a:	440b      	add	r3, r1
 800182c:	3344      	adds	r3, #68	; 0x44
 800182e:	2200      	movs	r2, #0
 8001830:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001832:	7bfa      	ldrb	r2, [r7, #15]
 8001834:	6879      	ldr	r1, [r7, #4]
 8001836:	4613      	mov	r3, r2
 8001838:	00db      	lsls	r3, r3, #3
 800183a:	1a9b      	subs	r3, r3, r2
 800183c:	009b      	lsls	r3, r3, #2
 800183e:	440b      	add	r3, r1
 8001840:	3348      	adds	r3, #72	; 0x48
 8001842:	2200      	movs	r2, #0
 8001844:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001846:	7bfa      	ldrb	r2, [r7, #15]
 8001848:	6879      	ldr	r1, [r7, #4]
 800184a:	4613      	mov	r3, r2
 800184c:	00db      	lsls	r3, r3, #3
 800184e:	1a9b      	subs	r3, r3, r2
 8001850:	009b      	lsls	r3, r3, #2
 8001852:	440b      	add	r3, r1
 8001854:	3350      	adds	r3, #80	; 0x50
 8001856:	2200      	movs	r2, #0
 8001858:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800185a:	7bfb      	ldrb	r3, [r7, #15]
 800185c:	3301      	adds	r3, #1
 800185e:	73fb      	strb	r3, [r7, #15]
 8001860:	7bfa      	ldrb	r2, [r7, #15]
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	685b      	ldr	r3, [r3, #4]
 8001866:	429a      	cmp	r2, r3
 8001868:	d3af      	bcc.n	80017ca <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800186a:	2300      	movs	r3, #0
 800186c:	73fb      	strb	r3, [r7, #15]
 800186e:	e044      	b.n	80018fa <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001870:	7bfa      	ldrb	r2, [r7, #15]
 8001872:	6879      	ldr	r1, [r7, #4]
 8001874:	4613      	mov	r3, r2
 8001876:	00db      	lsls	r3, r3, #3
 8001878:	1a9b      	subs	r3, r3, r2
 800187a:	009b      	lsls	r3, r3, #2
 800187c:	440b      	add	r3, r1
 800187e:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8001882:	2200      	movs	r2, #0
 8001884:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001886:	7bfa      	ldrb	r2, [r7, #15]
 8001888:	6879      	ldr	r1, [r7, #4]
 800188a:	4613      	mov	r3, r2
 800188c:	00db      	lsls	r3, r3, #3
 800188e:	1a9b      	subs	r3, r3, r2
 8001890:	009b      	lsls	r3, r3, #2
 8001892:	440b      	add	r3, r1
 8001894:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8001898:	7bfa      	ldrb	r2, [r7, #15]
 800189a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800189c:	7bfa      	ldrb	r2, [r7, #15]
 800189e:	6879      	ldr	r1, [r7, #4]
 80018a0:	4613      	mov	r3, r2
 80018a2:	00db      	lsls	r3, r3, #3
 80018a4:	1a9b      	subs	r3, r3, r2
 80018a6:	009b      	lsls	r3, r3, #2
 80018a8:	440b      	add	r3, r1
 80018aa:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80018ae:	2200      	movs	r2, #0
 80018b0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80018b2:	7bfa      	ldrb	r2, [r7, #15]
 80018b4:	6879      	ldr	r1, [r7, #4]
 80018b6:	4613      	mov	r3, r2
 80018b8:	00db      	lsls	r3, r3, #3
 80018ba:	1a9b      	subs	r3, r3, r2
 80018bc:	009b      	lsls	r3, r3, #2
 80018be:	440b      	add	r3, r1
 80018c0:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80018c4:	2200      	movs	r2, #0
 80018c6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80018c8:	7bfa      	ldrb	r2, [r7, #15]
 80018ca:	6879      	ldr	r1, [r7, #4]
 80018cc:	4613      	mov	r3, r2
 80018ce:	00db      	lsls	r3, r3, #3
 80018d0:	1a9b      	subs	r3, r3, r2
 80018d2:	009b      	lsls	r3, r3, #2
 80018d4:	440b      	add	r3, r1
 80018d6:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80018da:	2200      	movs	r2, #0
 80018dc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80018de:	7bfa      	ldrb	r2, [r7, #15]
 80018e0:	6879      	ldr	r1, [r7, #4]
 80018e2:	4613      	mov	r3, r2
 80018e4:	00db      	lsls	r3, r3, #3
 80018e6:	1a9b      	subs	r3, r3, r2
 80018e8:	009b      	lsls	r3, r3, #2
 80018ea:	440b      	add	r3, r1
 80018ec:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80018f0:	2200      	movs	r2, #0
 80018f2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80018f4:	7bfb      	ldrb	r3, [r7, #15]
 80018f6:	3301      	adds	r3, #1
 80018f8:	73fb      	strb	r3, [r7, #15]
 80018fa:	7bfa      	ldrb	r2, [r7, #15]
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	685b      	ldr	r3, [r3, #4]
 8001900:	429a      	cmp	r2, r3
 8001902:	d3b5      	bcc.n	8001870 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	603b      	str	r3, [r7, #0]
 800190a:	687e      	ldr	r6, [r7, #4]
 800190c:	466d      	mov	r5, sp
 800190e:	f106 0410 	add.w	r4, r6, #16
 8001912:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001914:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001916:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001918:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800191a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800191e:	e885 0003 	stmia.w	r5, {r0, r1}
 8001922:	1d33      	adds	r3, r6, #4
 8001924:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001926:	6838      	ldr	r0, [r7, #0]
 8001928:	f006 f878 	bl	8007a1c <USB_DevInit>
 800192c:	4603      	mov	r3, r0
 800192e:	2b00      	cmp	r3, #0
 8001930:	d005      	beq.n	800193e <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	2202      	movs	r2, #2
 8001936:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800193a:	2301      	movs	r3, #1
 800193c:	e014      	b.n	8001968 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	2200      	movs	r2, #0
 8001942:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	2201      	movs	r2, #1
 800194a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001952:	2b01      	cmp	r3, #1
 8001954:	d102      	bne.n	800195c <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001956:	6878      	ldr	r0, [r7, #4]
 8001958:	f000 f80a 	bl	8001970 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	4618      	mov	r0, r3
 8001962:	f006 fa1a 	bl	8007d9a <USB_DevDisconnect>

  return HAL_OK;
 8001966:	2300      	movs	r3, #0
}
 8001968:	4618      	mov	r0, r3
 800196a:	3714      	adds	r7, #20
 800196c:	46bd      	mov	sp, r7
 800196e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001970 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8001970:	b480      	push	{r7}
 8001972:	b085      	sub	sp, #20
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	2201      	movs	r2, #1
 8001982:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	2200      	movs	r2, #0
 800198a:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	699b      	ldr	r3, [r3, #24]
 8001992:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800199e:	4b05      	ldr	r3, [pc, #20]	; (80019b4 <HAL_PCDEx_ActivateLPM+0x44>)
 80019a0:	4313      	orrs	r3, r2
 80019a2:	68fa      	ldr	r2, [r7, #12]
 80019a4:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80019a6:	2300      	movs	r3, #0
}
 80019a8:	4618      	mov	r0, r3
 80019aa:	3714      	adds	r7, #20
 80019ac:	46bd      	mov	sp, r7
 80019ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b2:	4770      	bx	lr
 80019b4:	10000003 	.word	0x10000003

080019b8 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b084      	sub	sp, #16
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80019c0:	4b19      	ldr	r3, [pc, #100]	; (8001a28 <HAL_PWREx_ConfigSupply+0x70>)
 80019c2:	68db      	ldr	r3, [r3, #12]
 80019c4:	f003 0304 	and.w	r3, r3, #4
 80019c8:	2b04      	cmp	r3, #4
 80019ca:	d00a      	beq.n	80019e2 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80019cc:	4b16      	ldr	r3, [pc, #88]	; (8001a28 <HAL_PWREx_ConfigSupply+0x70>)
 80019ce:	68db      	ldr	r3, [r3, #12]
 80019d0:	f003 0307 	and.w	r3, r3, #7
 80019d4:	687a      	ldr	r2, [r7, #4]
 80019d6:	429a      	cmp	r2, r3
 80019d8:	d001      	beq.n	80019de <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80019da:	2301      	movs	r3, #1
 80019dc:	e01f      	b.n	8001a1e <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80019de:	2300      	movs	r3, #0
 80019e0:	e01d      	b.n	8001a1e <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80019e2:	4b11      	ldr	r3, [pc, #68]	; (8001a28 <HAL_PWREx_ConfigSupply+0x70>)
 80019e4:	68db      	ldr	r3, [r3, #12]
 80019e6:	f023 0207 	bic.w	r2, r3, #7
 80019ea:	490f      	ldr	r1, [pc, #60]	; (8001a28 <HAL_PWREx_ConfigSupply+0x70>)
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	4313      	orrs	r3, r2
 80019f0:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80019f2:	f7ff fbc9 	bl	8001188 <HAL_GetTick>
 80019f6:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80019f8:	e009      	b.n	8001a0e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80019fa:	f7ff fbc5 	bl	8001188 <HAL_GetTick>
 80019fe:	4602      	mov	r2, r0
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	1ad3      	subs	r3, r2, r3
 8001a04:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001a08:	d901      	bls.n	8001a0e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8001a0a:	2301      	movs	r3, #1
 8001a0c:	e007      	b.n	8001a1e <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001a0e:	4b06      	ldr	r3, [pc, #24]	; (8001a28 <HAL_PWREx_ConfigSupply+0x70>)
 8001a10:	685b      	ldr	r3, [r3, #4]
 8001a12:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001a16:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001a1a:	d1ee      	bne.n	80019fa <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8001a1c:	2300      	movs	r3, #0
}
 8001a1e:	4618      	mov	r0, r3
 8001a20:	3710      	adds	r7, #16
 8001a22:	46bd      	mov	sp, r7
 8001a24:	bd80      	pop	{r7, pc}
 8001a26:	bf00      	nop
 8001a28:	58024800 	.word	0x58024800

08001a2c <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8001a2c:	b480      	push	{r7}
 8001a2e:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8001a30:	4b05      	ldr	r3, [pc, #20]	; (8001a48 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8001a32:	68db      	ldr	r3, [r3, #12]
 8001a34:	4a04      	ldr	r2, [pc, #16]	; (8001a48 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8001a36:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001a3a:	60d3      	str	r3, [r2, #12]
}
 8001a3c:	bf00      	nop
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a44:	4770      	bx	lr
 8001a46:	bf00      	nop
 8001a48:	58024800 	.word	0x58024800

08001a4c <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi : QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b086      	sub	sp, #24
 8001a50:	af02      	add	r7, sp, #8
 8001a52:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8001a54:	f7ff fb98 	bl	8001188 <HAL_GetTick>
 8001a58:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d101      	bne.n	8001a64 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8001a60:	2301      	movs	r3, #1
 8001a62:	e05f      	b.n	8001b24 <HAL_QSPI_Init+0xd8>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001a6a:	b2db      	uxtb	r3, r3
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d107      	bne.n	8001a80 <HAL_QSPI_Init+0x34>

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8001a70:	6878      	ldr	r0, [r7, #4]
 8001a72:	f7fe ff8b 	bl	800098c <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8001a76:	f241 3188 	movw	r1, #5000	; 0x1388
 8001a7a:	6878      	ldr	r0, [r7, #4]
 8001a7c:	f000 f85a 	bl	8001b34 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	f423 6170 	bic.w	r1, r3, #3840	; 0xf00
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	689b      	ldr	r3, [r3, #8]
 8001a8e:	3b01      	subs	r3, #1
 8001a90:	021a      	lsls	r2, r3, #8
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	430a      	orrs	r2, r1
 8001a98:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001a9e:	9300      	str	r3, [sp, #0]
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	2120      	movs	r1, #32
 8001aa6:	6878      	ldr	r0, [r7, #4]
 8001aa8:	f000 f852 	bl	8001b50 <QSPI_WaitFlagStateUntilTimeout>
 8001aac:	4603      	mov	r3, r0
 8001aae:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8001ab0:	7afb      	ldrb	r3, [r7, #11]
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d135      	bne.n	8001b22 <HAL_QSPI_Init+0xd6>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	681a      	ldr	r2, [r3, #0]
 8001abc:	4b1b      	ldr	r3, [pc, #108]	; (8001b2c <HAL_QSPI_Init+0xe0>)
 8001abe:	4013      	ands	r3, r2
 8001ac0:	687a      	ldr	r2, [r7, #4]
 8001ac2:	6852      	ldr	r2, [r2, #4]
 8001ac4:	0611      	lsls	r1, r2, #24
 8001ac6:	687a      	ldr	r2, [r7, #4]
 8001ac8:	68d2      	ldr	r2, [r2, #12]
 8001aca:	4311      	orrs	r1, r2
 8001acc:	687a      	ldr	r2, [r7, #4]
 8001ace:	69d2      	ldr	r2, [r2, #28]
 8001ad0:	4311      	orrs	r1, r2
 8001ad2:	687a      	ldr	r2, [r7, #4]
 8001ad4:	6a12      	ldr	r2, [r2, #32]
 8001ad6:	4311      	orrs	r1, r2
 8001ad8:	687a      	ldr	r2, [r7, #4]
 8001ada:	6812      	ldr	r2, [r2, #0]
 8001adc:	430b      	orrs	r3, r1
 8001ade:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	685a      	ldr	r2, [r3, #4]
 8001ae6:	4b12      	ldr	r3, [pc, #72]	; (8001b30 <HAL_QSPI_Init+0xe4>)
 8001ae8:	4013      	ands	r3, r2
 8001aea:	687a      	ldr	r2, [r7, #4]
 8001aec:	6912      	ldr	r2, [r2, #16]
 8001aee:	0411      	lsls	r1, r2, #16
 8001af0:	687a      	ldr	r2, [r7, #4]
 8001af2:	6952      	ldr	r2, [r2, #20]
 8001af4:	4311      	orrs	r1, r2
 8001af6:	687a      	ldr	r2, [r7, #4]
 8001af8:	6992      	ldr	r2, [r2, #24]
 8001afa:	4311      	orrs	r1, r2
 8001afc:	687a      	ldr	r2, [r7, #4]
 8001afe:	6812      	ldr	r2, [r2, #0]
 8001b00:	430b      	orrs	r3, r1
 8001b02:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	681a      	ldr	r2, [r3, #0]
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	f042 0201 	orr.w	r2, r2, #1
 8001b12:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	2200      	movs	r2, #0
 8001b18:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	2201      	movs	r2, #1
 8001b1e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Return function status */
  return status;
 8001b22:	7afb      	ldrb	r3, [r7, #11]
}
 8001b24:	4618      	mov	r0, r3
 8001b26:	3710      	adds	r7, #16
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	bd80      	pop	{r7, pc}
 8001b2c:	00ffff2f 	.word	0x00ffff2f
 8001b30:	ffe0f8fe 	.word	0xffe0f8fe

08001b34 <HAL_QSPI_SetTimeout>:
  * @param  hqspi : QSPI handle.
  * @param  Timeout : Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8001b34:	b480      	push	{r7}
 8001b36:	b083      	sub	sp, #12
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
 8001b3c:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	683a      	ldr	r2, [r7, #0]
 8001b42:	649a      	str	r2, [r3, #72]	; 0x48
}
 8001b44:	bf00      	nop
 8001b46:	370c      	adds	r7, #12
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4e:	4770      	bx	lr

08001b50 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout : Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b084      	sub	sp, #16
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	60f8      	str	r0, [r7, #12]
 8001b58:	60b9      	str	r1, [r7, #8]
 8001b5a:	603b      	str	r3, [r7, #0]
 8001b5c:	4613      	mov	r3, r2
 8001b5e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8001b60:	e01a      	b.n	8001b98 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001b62:	69bb      	ldr	r3, [r7, #24]
 8001b64:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001b68:	d016      	beq.n	8001b98 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001b6a:	f7ff fb0d 	bl	8001188 <HAL_GetTick>
 8001b6e:	4602      	mov	r2, r0
 8001b70:	683b      	ldr	r3, [r7, #0]
 8001b72:	1ad3      	subs	r3, r2, r3
 8001b74:	69ba      	ldr	r2, [r7, #24]
 8001b76:	429a      	cmp	r2, r3
 8001b78:	d302      	bcc.n	8001b80 <QSPI_WaitFlagStateUntilTimeout+0x30>
 8001b7a:	69bb      	ldr	r3, [r7, #24]
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d10b      	bne.n	8001b98 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	2204      	movs	r2, #4
 8001b84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b8c:	f043 0201 	orr.w	r2, r3, #1
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	645a      	str	r2, [r3, #68]	; 0x44

        return HAL_ERROR;
 8001b94:	2301      	movs	r3, #1
 8001b96:	e00e      	b.n	8001bb6 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	689a      	ldr	r2, [r3, #8]
 8001b9e:	68bb      	ldr	r3, [r7, #8]
 8001ba0:	4013      	ands	r3, r2
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	bf14      	ite	ne
 8001ba6:	2301      	movne	r3, #1
 8001ba8:	2300      	moveq	r3, #0
 8001baa:	b2db      	uxtb	r3, r3
 8001bac:	461a      	mov	r2, r3
 8001bae:	79fb      	ldrb	r3, [r7, #7]
 8001bb0:	429a      	cmp	r2, r3
 8001bb2:	d1d6      	bne.n	8001b62 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001bb4:	2300      	movs	r3, #0
}
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	3710      	adds	r7, #16
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	bd80      	pop	{r7, pc}
	...

08001bc0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b08c      	sub	sp, #48	; 0x30
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d101      	bne.n	8001bd2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001bce:	2301      	movs	r3, #1
 8001bd0:	e3fd      	b.n	80023ce <HAL_RCC_OscConfig+0x80e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	f003 0301 	and.w	r3, r3, #1
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	f000 8087 	beq.w	8001cee <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001be0:	4b99      	ldr	r3, [pc, #612]	; (8001e48 <HAL_RCC_OscConfig+0x288>)
 8001be2:	691b      	ldr	r3, [r3, #16]
 8001be4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001be8:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001bea:	4b97      	ldr	r3, [pc, #604]	; (8001e48 <HAL_RCC_OscConfig+0x288>)
 8001bec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bee:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8001bf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001bf2:	2b10      	cmp	r3, #16
 8001bf4:	d007      	beq.n	8001c06 <HAL_RCC_OscConfig+0x46>
 8001bf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001bf8:	2b18      	cmp	r3, #24
 8001bfa:	d110      	bne.n	8001c1e <HAL_RCC_OscConfig+0x5e>
 8001bfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001bfe:	f003 0303 	and.w	r3, r3, #3
 8001c02:	2b02      	cmp	r3, #2
 8001c04:	d10b      	bne.n	8001c1e <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c06:	4b90      	ldr	r3, [pc, #576]	; (8001e48 <HAL_RCC_OscConfig+0x288>)
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d06c      	beq.n	8001cec <HAL_RCC_OscConfig+0x12c>
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	685b      	ldr	r3, [r3, #4]
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d168      	bne.n	8001cec <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001c1a:	2301      	movs	r3, #1
 8001c1c:	e3d7      	b.n	80023ce <HAL_RCC_OscConfig+0x80e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	685b      	ldr	r3, [r3, #4]
 8001c22:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c26:	d106      	bne.n	8001c36 <HAL_RCC_OscConfig+0x76>
 8001c28:	4b87      	ldr	r3, [pc, #540]	; (8001e48 <HAL_RCC_OscConfig+0x288>)
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	4a86      	ldr	r2, [pc, #536]	; (8001e48 <HAL_RCC_OscConfig+0x288>)
 8001c2e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c32:	6013      	str	r3, [r2, #0]
 8001c34:	e02e      	b.n	8001c94 <HAL_RCC_OscConfig+0xd4>
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	685b      	ldr	r3, [r3, #4]
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d10c      	bne.n	8001c58 <HAL_RCC_OscConfig+0x98>
 8001c3e:	4b82      	ldr	r3, [pc, #520]	; (8001e48 <HAL_RCC_OscConfig+0x288>)
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	4a81      	ldr	r2, [pc, #516]	; (8001e48 <HAL_RCC_OscConfig+0x288>)
 8001c44:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c48:	6013      	str	r3, [r2, #0]
 8001c4a:	4b7f      	ldr	r3, [pc, #508]	; (8001e48 <HAL_RCC_OscConfig+0x288>)
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	4a7e      	ldr	r2, [pc, #504]	; (8001e48 <HAL_RCC_OscConfig+0x288>)
 8001c50:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c54:	6013      	str	r3, [r2, #0]
 8001c56:	e01d      	b.n	8001c94 <HAL_RCC_OscConfig+0xd4>
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	685b      	ldr	r3, [r3, #4]
 8001c5c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001c60:	d10c      	bne.n	8001c7c <HAL_RCC_OscConfig+0xbc>
 8001c62:	4b79      	ldr	r3, [pc, #484]	; (8001e48 <HAL_RCC_OscConfig+0x288>)
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	4a78      	ldr	r2, [pc, #480]	; (8001e48 <HAL_RCC_OscConfig+0x288>)
 8001c68:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c6c:	6013      	str	r3, [r2, #0]
 8001c6e:	4b76      	ldr	r3, [pc, #472]	; (8001e48 <HAL_RCC_OscConfig+0x288>)
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	4a75      	ldr	r2, [pc, #468]	; (8001e48 <HAL_RCC_OscConfig+0x288>)
 8001c74:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c78:	6013      	str	r3, [r2, #0]
 8001c7a:	e00b      	b.n	8001c94 <HAL_RCC_OscConfig+0xd4>
 8001c7c:	4b72      	ldr	r3, [pc, #456]	; (8001e48 <HAL_RCC_OscConfig+0x288>)
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	4a71      	ldr	r2, [pc, #452]	; (8001e48 <HAL_RCC_OscConfig+0x288>)
 8001c82:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c86:	6013      	str	r3, [r2, #0]
 8001c88:	4b6f      	ldr	r3, [pc, #444]	; (8001e48 <HAL_RCC_OscConfig+0x288>)
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	4a6e      	ldr	r2, [pc, #440]	; (8001e48 <HAL_RCC_OscConfig+0x288>)
 8001c8e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c92:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	685b      	ldr	r3, [r3, #4]
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d013      	beq.n	8001cc4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c9c:	f7ff fa74 	bl	8001188 <HAL_GetTick>
 8001ca0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001ca2:	e008      	b.n	8001cb6 <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001ca4:	f7ff fa70 	bl	8001188 <HAL_GetTick>
 8001ca8:	4602      	mov	r2, r0
 8001caa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cac:	1ad3      	subs	r3, r2, r3
 8001cae:	2b64      	cmp	r3, #100	; 0x64
 8001cb0:	d901      	bls.n	8001cb6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001cb2:	2303      	movs	r3, #3
 8001cb4:	e38b      	b.n	80023ce <HAL_RCC_OscConfig+0x80e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001cb6:	4b64      	ldr	r3, [pc, #400]	; (8001e48 <HAL_RCC_OscConfig+0x288>)
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d0f0      	beq.n	8001ca4 <HAL_RCC_OscConfig+0xe4>
 8001cc2:	e014      	b.n	8001cee <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cc4:	f7ff fa60 	bl	8001188 <HAL_GetTick>
 8001cc8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001cca:	e008      	b.n	8001cde <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001ccc:	f7ff fa5c 	bl	8001188 <HAL_GetTick>
 8001cd0:	4602      	mov	r2, r0
 8001cd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cd4:	1ad3      	subs	r3, r2, r3
 8001cd6:	2b64      	cmp	r3, #100	; 0x64
 8001cd8:	d901      	bls.n	8001cde <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001cda:	2303      	movs	r3, #3
 8001cdc:	e377      	b.n	80023ce <HAL_RCC_OscConfig+0x80e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001cde:	4b5a      	ldr	r3, [pc, #360]	; (8001e48 <HAL_RCC_OscConfig+0x288>)
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d1f0      	bne.n	8001ccc <HAL_RCC_OscConfig+0x10c>
 8001cea:	e000      	b.n	8001cee <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001cec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	f003 0302 	and.w	r3, r3, #2
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	f000 80ae 	beq.w	8001e58 <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001cfc:	4b52      	ldr	r3, [pc, #328]	; (8001e48 <HAL_RCC_OscConfig+0x288>)
 8001cfe:	691b      	ldr	r3, [r3, #16]
 8001d00:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001d04:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001d06:	4b50      	ldr	r3, [pc, #320]	; (8001e48 <HAL_RCC_OscConfig+0x288>)
 8001d08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d0a:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8001d0c:	6a3b      	ldr	r3, [r7, #32]
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d007      	beq.n	8001d22 <HAL_RCC_OscConfig+0x162>
 8001d12:	6a3b      	ldr	r3, [r7, #32]
 8001d14:	2b18      	cmp	r3, #24
 8001d16:	d13a      	bne.n	8001d8e <HAL_RCC_OscConfig+0x1ce>
 8001d18:	69fb      	ldr	r3, [r7, #28]
 8001d1a:	f003 0303 	and.w	r3, r3, #3
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d135      	bne.n	8001d8e <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001d22:	4b49      	ldr	r3, [pc, #292]	; (8001e48 <HAL_RCC_OscConfig+0x288>)
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f003 0304 	and.w	r3, r3, #4
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d005      	beq.n	8001d3a <HAL_RCC_OscConfig+0x17a>
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	68db      	ldr	r3, [r3, #12]
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d101      	bne.n	8001d3a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8001d36:	2301      	movs	r3, #1
 8001d38:	e349      	b.n	80023ce <HAL_RCC_OscConfig+0x80e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d3a:	f7ff fa55 	bl	80011e8 <HAL_GetREVID>
 8001d3e:	4603      	mov	r3, r0
 8001d40:	f241 0203 	movw	r2, #4099	; 0x1003
 8001d44:	4293      	cmp	r3, r2
 8001d46:	d817      	bhi.n	8001d78 <HAL_RCC_OscConfig+0x1b8>
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	691b      	ldr	r3, [r3, #16]
 8001d4c:	2b40      	cmp	r3, #64	; 0x40
 8001d4e:	d108      	bne.n	8001d62 <HAL_RCC_OscConfig+0x1a2>
 8001d50:	4b3d      	ldr	r3, [pc, #244]	; (8001e48 <HAL_RCC_OscConfig+0x288>)
 8001d52:	685b      	ldr	r3, [r3, #4]
 8001d54:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8001d58:	4a3b      	ldr	r2, [pc, #236]	; (8001e48 <HAL_RCC_OscConfig+0x288>)
 8001d5a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d5e:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001d60:	e07a      	b.n	8001e58 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d62:	4b39      	ldr	r3, [pc, #228]	; (8001e48 <HAL_RCC_OscConfig+0x288>)
 8001d64:	685b      	ldr	r3, [r3, #4]
 8001d66:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	691b      	ldr	r3, [r3, #16]
 8001d6e:	031b      	lsls	r3, r3, #12
 8001d70:	4935      	ldr	r1, [pc, #212]	; (8001e48 <HAL_RCC_OscConfig+0x288>)
 8001d72:	4313      	orrs	r3, r2
 8001d74:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001d76:	e06f      	b.n	8001e58 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d78:	4b33      	ldr	r3, [pc, #204]	; (8001e48 <HAL_RCC_OscConfig+0x288>)
 8001d7a:	685b      	ldr	r3, [r3, #4]
 8001d7c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	691b      	ldr	r3, [r3, #16]
 8001d84:	061b      	lsls	r3, r3, #24
 8001d86:	4930      	ldr	r1, [pc, #192]	; (8001e48 <HAL_RCC_OscConfig+0x288>)
 8001d88:	4313      	orrs	r3, r2
 8001d8a:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001d8c:	e064      	b.n	8001e58 <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	68db      	ldr	r3, [r3, #12]
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d045      	beq.n	8001e22 <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001d96:	4b2c      	ldr	r3, [pc, #176]	; (8001e48 <HAL_RCC_OscConfig+0x288>)
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f023 0219 	bic.w	r2, r3, #25
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	68db      	ldr	r3, [r3, #12]
 8001da2:	4929      	ldr	r1, [pc, #164]	; (8001e48 <HAL_RCC_OscConfig+0x288>)
 8001da4:	4313      	orrs	r3, r2
 8001da6:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001da8:	f7ff f9ee 	bl	8001188 <HAL_GetTick>
 8001dac:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001dae:	e008      	b.n	8001dc2 <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001db0:	f7ff f9ea 	bl	8001188 <HAL_GetTick>
 8001db4:	4602      	mov	r2, r0
 8001db6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001db8:	1ad3      	subs	r3, r2, r3
 8001dba:	2b02      	cmp	r3, #2
 8001dbc:	d901      	bls.n	8001dc2 <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 8001dbe:	2303      	movs	r3, #3
 8001dc0:	e305      	b.n	80023ce <HAL_RCC_OscConfig+0x80e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001dc2:	4b21      	ldr	r3, [pc, #132]	; (8001e48 <HAL_RCC_OscConfig+0x288>)
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	f003 0304 	and.w	r3, r3, #4
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d0f0      	beq.n	8001db0 <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001dce:	f7ff fa0b 	bl	80011e8 <HAL_GetREVID>
 8001dd2:	4603      	mov	r3, r0
 8001dd4:	f241 0203 	movw	r2, #4099	; 0x1003
 8001dd8:	4293      	cmp	r3, r2
 8001dda:	d817      	bhi.n	8001e0c <HAL_RCC_OscConfig+0x24c>
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	691b      	ldr	r3, [r3, #16]
 8001de0:	2b40      	cmp	r3, #64	; 0x40
 8001de2:	d108      	bne.n	8001df6 <HAL_RCC_OscConfig+0x236>
 8001de4:	4b18      	ldr	r3, [pc, #96]	; (8001e48 <HAL_RCC_OscConfig+0x288>)
 8001de6:	685b      	ldr	r3, [r3, #4]
 8001de8:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8001dec:	4a16      	ldr	r2, [pc, #88]	; (8001e48 <HAL_RCC_OscConfig+0x288>)
 8001dee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001df2:	6053      	str	r3, [r2, #4]
 8001df4:	e030      	b.n	8001e58 <HAL_RCC_OscConfig+0x298>
 8001df6:	4b14      	ldr	r3, [pc, #80]	; (8001e48 <HAL_RCC_OscConfig+0x288>)
 8001df8:	685b      	ldr	r3, [r3, #4]
 8001dfa:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	691b      	ldr	r3, [r3, #16]
 8001e02:	031b      	lsls	r3, r3, #12
 8001e04:	4910      	ldr	r1, [pc, #64]	; (8001e48 <HAL_RCC_OscConfig+0x288>)
 8001e06:	4313      	orrs	r3, r2
 8001e08:	604b      	str	r3, [r1, #4]
 8001e0a:	e025      	b.n	8001e58 <HAL_RCC_OscConfig+0x298>
 8001e0c:	4b0e      	ldr	r3, [pc, #56]	; (8001e48 <HAL_RCC_OscConfig+0x288>)
 8001e0e:	685b      	ldr	r3, [r3, #4]
 8001e10:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	691b      	ldr	r3, [r3, #16]
 8001e18:	061b      	lsls	r3, r3, #24
 8001e1a:	490b      	ldr	r1, [pc, #44]	; (8001e48 <HAL_RCC_OscConfig+0x288>)
 8001e1c:	4313      	orrs	r3, r2
 8001e1e:	604b      	str	r3, [r1, #4]
 8001e20:	e01a      	b.n	8001e58 <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e22:	4b09      	ldr	r3, [pc, #36]	; (8001e48 <HAL_RCC_OscConfig+0x288>)
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	4a08      	ldr	r2, [pc, #32]	; (8001e48 <HAL_RCC_OscConfig+0x288>)
 8001e28:	f023 0301 	bic.w	r3, r3, #1
 8001e2c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e2e:	f7ff f9ab 	bl	8001188 <HAL_GetTick>
 8001e32:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001e34:	e00a      	b.n	8001e4c <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001e36:	f7ff f9a7 	bl	8001188 <HAL_GetTick>
 8001e3a:	4602      	mov	r2, r0
 8001e3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e3e:	1ad3      	subs	r3, r2, r3
 8001e40:	2b02      	cmp	r3, #2
 8001e42:	d903      	bls.n	8001e4c <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 8001e44:	2303      	movs	r3, #3
 8001e46:	e2c2      	b.n	80023ce <HAL_RCC_OscConfig+0x80e>
 8001e48:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001e4c:	4b94      	ldr	r3, [pc, #592]	; (80020a0 <HAL_RCC_OscConfig+0x4e0>)
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f003 0304 	and.w	r3, r3, #4
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d1ee      	bne.n	8001e36 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	f003 0310 	and.w	r3, r3, #16
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	f000 80a9 	beq.w	8001fb8 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001e66:	4b8e      	ldr	r3, [pc, #568]	; (80020a0 <HAL_RCC_OscConfig+0x4e0>)
 8001e68:	691b      	ldr	r3, [r3, #16]
 8001e6a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001e6e:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001e70:	4b8b      	ldr	r3, [pc, #556]	; (80020a0 <HAL_RCC_OscConfig+0x4e0>)
 8001e72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e74:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8001e76:	69bb      	ldr	r3, [r7, #24]
 8001e78:	2b08      	cmp	r3, #8
 8001e7a:	d007      	beq.n	8001e8c <HAL_RCC_OscConfig+0x2cc>
 8001e7c:	69bb      	ldr	r3, [r7, #24]
 8001e7e:	2b18      	cmp	r3, #24
 8001e80:	d13a      	bne.n	8001ef8 <HAL_RCC_OscConfig+0x338>
 8001e82:	697b      	ldr	r3, [r7, #20]
 8001e84:	f003 0303 	and.w	r3, r3, #3
 8001e88:	2b01      	cmp	r3, #1
 8001e8a:	d135      	bne.n	8001ef8 <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001e8c:	4b84      	ldr	r3, [pc, #528]	; (80020a0 <HAL_RCC_OscConfig+0x4e0>)
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d005      	beq.n	8001ea4 <HAL_RCC_OscConfig+0x2e4>
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	69db      	ldr	r3, [r3, #28]
 8001e9c:	2b80      	cmp	r3, #128	; 0x80
 8001e9e:	d001      	beq.n	8001ea4 <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 8001ea0:	2301      	movs	r3, #1
 8001ea2:	e294      	b.n	80023ce <HAL_RCC_OscConfig+0x80e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001ea4:	f7ff f9a0 	bl	80011e8 <HAL_GetREVID>
 8001ea8:	4603      	mov	r3, r0
 8001eaa:	f241 0203 	movw	r2, #4099	; 0x1003
 8001eae:	4293      	cmp	r3, r2
 8001eb0:	d817      	bhi.n	8001ee2 <HAL_RCC_OscConfig+0x322>
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	6a1b      	ldr	r3, [r3, #32]
 8001eb6:	2b20      	cmp	r3, #32
 8001eb8:	d108      	bne.n	8001ecc <HAL_RCC_OscConfig+0x30c>
 8001eba:	4b79      	ldr	r3, [pc, #484]	; (80020a0 <HAL_RCC_OscConfig+0x4e0>)
 8001ebc:	685b      	ldr	r3, [r3, #4]
 8001ebe:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8001ec2:	4a77      	ldr	r2, [pc, #476]	; (80020a0 <HAL_RCC_OscConfig+0x4e0>)
 8001ec4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001ec8:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001eca:	e075      	b.n	8001fb8 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001ecc:	4b74      	ldr	r3, [pc, #464]	; (80020a0 <HAL_RCC_OscConfig+0x4e0>)
 8001ece:	685b      	ldr	r3, [r3, #4]
 8001ed0:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	6a1b      	ldr	r3, [r3, #32]
 8001ed8:	069b      	lsls	r3, r3, #26
 8001eda:	4971      	ldr	r1, [pc, #452]	; (80020a0 <HAL_RCC_OscConfig+0x4e0>)
 8001edc:	4313      	orrs	r3, r2
 8001ede:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001ee0:	e06a      	b.n	8001fb8 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001ee2:	4b6f      	ldr	r3, [pc, #444]	; (80020a0 <HAL_RCC_OscConfig+0x4e0>)
 8001ee4:	68db      	ldr	r3, [r3, #12]
 8001ee6:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	6a1b      	ldr	r3, [r3, #32]
 8001eee:	061b      	lsls	r3, r3, #24
 8001ef0:	496b      	ldr	r1, [pc, #428]	; (80020a0 <HAL_RCC_OscConfig+0x4e0>)
 8001ef2:	4313      	orrs	r3, r2
 8001ef4:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001ef6:	e05f      	b.n	8001fb8 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	69db      	ldr	r3, [r3, #28]
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d042      	beq.n	8001f86 <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8001f00:	4b67      	ldr	r3, [pc, #412]	; (80020a0 <HAL_RCC_OscConfig+0x4e0>)
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	4a66      	ldr	r2, [pc, #408]	; (80020a0 <HAL_RCC_OscConfig+0x4e0>)
 8001f06:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001f0a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f0c:	f7ff f93c 	bl	8001188 <HAL_GetTick>
 8001f10:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001f12:	e008      	b.n	8001f26 <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8001f14:	f7ff f938 	bl	8001188 <HAL_GetTick>
 8001f18:	4602      	mov	r2, r0
 8001f1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f1c:	1ad3      	subs	r3, r2, r3
 8001f1e:	2b02      	cmp	r3, #2
 8001f20:	d901      	bls.n	8001f26 <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 8001f22:	2303      	movs	r3, #3
 8001f24:	e253      	b.n	80023ce <HAL_RCC_OscConfig+0x80e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001f26:	4b5e      	ldr	r3, [pc, #376]	; (80020a0 <HAL_RCC_OscConfig+0x4e0>)
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d0f0      	beq.n	8001f14 <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001f32:	f7ff f959 	bl	80011e8 <HAL_GetREVID>
 8001f36:	4603      	mov	r3, r0
 8001f38:	f241 0203 	movw	r2, #4099	; 0x1003
 8001f3c:	4293      	cmp	r3, r2
 8001f3e:	d817      	bhi.n	8001f70 <HAL_RCC_OscConfig+0x3b0>
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	6a1b      	ldr	r3, [r3, #32]
 8001f44:	2b20      	cmp	r3, #32
 8001f46:	d108      	bne.n	8001f5a <HAL_RCC_OscConfig+0x39a>
 8001f48:	4b55      	ldr	r3, [pc, #340]	; (80020a0 <HAL_RCC_OscConfig+0x4e0>)
 8001f4a:	685b      	ldr	r3, [r3, #4]
 8001f4c:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8001f50:	4a53      	ldr	r2, [pc, #332]	; (80020a0 <HAL_RCC_OscConfig+0x4e0>)
 8001f52:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001f56:	6053      	str	r3, [r2, #4]
 8001f58:	e02e      	b.n	8001fb8 <HAL_RCC_OscConfig+0x3f8>
 8001f5a:	4b51      	ldr	r3, [pc, #324]	; (80020a0 <HAL_RCC_OscConfig+0x4e0>)
 8001f5c:	685b      	ldr	r3, [r3, #4]
 8001f5e:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	6a1b      	ldr	r3, [r3, #32]
 8001f66:	069b      	lsls	r3, r3, #26
 8001f68:	494d      	ldr	r1, [pc, #308]	; (80020a0 <HAL_RCC_OscConfig+0x4e0>)
 8001f6a:	4313      	orrs	r3, r2
 8001f6c:	604b      	str	r3, [r1, #4]
 8001f6e:	e023      	b.n	8001fb8 <HAL_RCC_OscConfig+0x3f8>
 8001f70:	4b4b      	ldr	r3, [pc, #300]	; (80020a0 <HAL_RCC_OscConfig+0x4e0>)
 8001f72:	68db      	ldr	r3, [r3, #12]
 8001f74:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	6a1b      	ldr	r3, [r3, #32]
 8001f7c:	061b      	lsls	r3, r3, #24
 8001f7e:	4948      	ldr	r1, [pc, #288]	; (80020a0 <HAL_RCC_OscConfig+0x4e0>)
 8001f80:	4313      	orrs	r3, r2
 8001f82:	60cb      	str	r3, [r1, #12]
 8001f84:	e018      	b.n	8001fb8 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8001f86:	4b46      	ldr	r3, [pc, #280]	; (80020a0 <HAL_RCC_OscConfig+0x4e0>)
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	4a45      	ldr	r2, [pc, #276]	; (80020a0 <HAL_RCC_OscConfig+0x4e0>)
 8001f8c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001f90:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f92:	f7ff f8f9 	bl	8001188 <HAL_GetTick>
 8001f96:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001f98:	e008      	b.n	8001fac <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8001f9a:	f7ff f8f5 	bl	8001188 <HAL_GetTick>
 8001f9e:	4602      	mov	r2, r0
 8001fa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fa2:	1ad3      	subs	r3, r2, r3
 8001fa4:	2b02      	cmp	r3, #2
 8001fa6:	d901      	bls.n	8001fac <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 8001fa8:	2303      	movs	r3, #3
 8001faa:	e210      	b.n	80023ce <HAL_RCC_OscConfig+0x80e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001fac:	4b3c      	ldr	r3, [pc, #240]	; (80020a0 <HAL_RCC_OscConfig+0x4e0>)
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d1f0      	bne.n	8001f9a <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	f003 0308 	and.w	r3, r3, #8
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d036      	beq.n	8002032 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	695b      	ldr	r3, [r3, #20]
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d019      	beq.n	8002000 <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001fcc:	4b34      	ldr	r3, [pc, #208]	; (80020a0 <HAL_RCC_OscConfig+0x4e0>)
 8001fce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001fd0:	4a33      	ldr	r2, [pc, #204]	; (80020a0 <HAL_RCC_OscConfig+0x4e0>)
 8001fd2:	f043 0301 	orr.w	r3, r3, #1
 8001fd6:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fd8:	f7ff f8d6 	bl	8001188 <HAL_GetTick>
 8001fdc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001fde:	e008      	b.n	8001ff2 <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001fe0:	f7ff f8d2 	bl	8001188 <HAL_GetTick>
 8001fe4:	4602      	mov	r2, r0
 8001fe6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fe8:	1ad3      	subs	r3, r2, r3
 8001fea:	2b02      	cmp	r3, #2
 8001fec:	d901      	bls.n	8001ff2 <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 8001fee:	2303      	movs	r3, #3
 8001ff0:	e1ed      	b.n	80023ce <HAL_RCC_OscConfig+0x80e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001ff2:	4b2b      	ldr	r3, [pc, #172]	; (80020a0 <HAL_RCC_OscConfig+0x4e0>)
 8001ff4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001ff6:	f003 0302 	and.w	r3, r3, #2
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d0f0      	beq.n	8001fe0 <HAL_RCC_OscConfig+0x420>
 8001ffe:	e018      	b.n	8002032 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002000:	4b27      	ldr	r3, [pc, #156]	; (80020a0 <HAL_RCC_OscConfig+0x4e0>)
 8002002:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002004:	4a26      	ldr	r2, [pc, #152]	; (80020a0 <HAL_RCC_OscConfig+0x4e0>)
 8002006:	f023 0301 	bic.w	r3, r3, #1
 800200a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800200c:	f7ff f8bc 	bl	8001188 <HAL_GetTick>
 8002010:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002012:	e008      	b.n	8002026 <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002014:	f7ff f8b8 	bl	8001188 <HAL_GetTick>
 8002018:	4602      	mov	r2, r0
 800201a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800201c:	1ad3      	subs	r3, r2, r3
 800201e:	2b02      	cmp	r3, #2
 8002020:	d901      	bls.n	8002026 <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 8002022:	2303      	movs	r3, #3
 8002024:	e1d3      	b.n	80023ce <HAL_RCC_OscConfig+0x80e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002026:	4b1e      	ldr	r3, [pc, #120]	; (80020a0 <HAL_RCC_OscConfig+0x4e0>)
 8002028:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800202a:	f003 0302 	and.w	r3, r3, #2
 800202e:	2b00      	cmp	r3, #0
 8002030:	d1f0      	bne.n	8002014 <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f003 0320 	and.w	r3, r3, #32
 800203a:	2b00      	cmp	r3, #0
 800203c:	d038      	beq.n	80020b0 <HAL_RCC_OscConfig+0x4f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	699b      	ldr	r3, [r3, #24]
 8002042:	2b00      	cmp	r3, #0
 8002044:	d019      	beq.n	800207a <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002046:	4b16      	ldr	r3, [pc, #88]	; (80020a0 <HAL_RCC_OscConfig+0x4e0>)
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	4a15      	ldr	r2, [pc, #84]	; (80020a0 <HAL_RCC_OscConfig+0x4e0>)
 800204c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002050:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002052:	f7ff f899 	bl	8001188 <HAL_GetTick>
 8002056:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002058:	e008      	b.n	800206c <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800205a:	f7ff f895 	bl	8001188 <HAL_GetTick>
 800205e:	4602      	mov	r2, r0
 8002060:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002062:	1ad3      	subs	r3, r2, r3
 8002064:	2b02      	cmp	r3, #2
 8002066:	d901      	bls.n	800206c <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 8002068:	2303      	movs	r3, #3
 800206a:	e1b0      	b.n	80023ce <HAL_RCC_OscConfig+0x80e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800206c:	4b0c      	ldr	r3, [pc, #48]	; (80020a0 <HAL_RCC_OscConfig+0x4e0>)
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002074:	2b00      	cmp	r3, #0
 8002076:	d0f0      	beq.n	800205a <HAL_RCC_OscConfig+0x49a>
 8002078:	e01a      	b.n	80020b0 <HAL_RCC_OscConfig+0x4f0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800207a:	4b09      	ldr	r3, [pc, #36]	; (80020a0 <HAL_RCC_OscConfig+0x4e0>)
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	4a08      	ldr	r2, [pc, #32]	; (80020a0 <HAL_RCC_OscConfig+0x4e0>)
 8002080:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002084:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002086:	f7ff f87f 	bl	8001188 <HAL_GetTick>
 800208a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800208c:	e00a      	b.n	80020a4 <HAL_RCC_OscConfig+0x4e4>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800208e:	f7ff f87b 	bl	8001188 <HAL_GetTick>
 8002092:	4602      	mov	r2, r0
 8002094:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002096:	1ad3      	subs	r3, r2, r3
 8002098:	2b02      	cmp	r3, #2
 800209a:	d903      	bls.n	80020a4 <HAL_RCC_OscConfig+0x4e4>
        {
          return HAL_TIMEOUT;
 800209c:	2303      	movs	r3, #3
 800209e:	e196      	b.n	80023ce <HAL_RCC_OscConfig+0x80e>
 80020a0:	58024400 	.word	0x58024400
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80020a4:	4b99      	ldr	r3, [pc, #612]	; (800230c <HAL_RCC_OscConfig+0x74c>)
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d1ee      	bne.n	800208e <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	f003 0304 	and.w	r3, r3, #4
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	f000 8081 	beq.w	80021c0 <HAL_RCC_OscConfig+0x600>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80020be:	4b94      	ldr	r3, [pc, #592]	; (8002310 <HAL_RCC_OscConfig+0x750>)
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	4a93      	ldr	r2, [pc, #588]	; (8002310 <HAL_RCC_OscConfig+0x750>)
 80020c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020c8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80020ca:	f7ff f85d 	bl	8001188 <HAL_GetTick>
 80020ce:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80020d0:	e008      	b.n	80020e4 <HAL_RCC_OscConfig+0x524>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80020d2:	f7ff f859 	bl	8001188 <HAL_GetTick>
 80020d6:	4602      	mov	r2, r0
 80020d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020da:	1ad3      	subs	r3, r2, r3
 80020dc:	2b64      	cmp	r3, #100	; 0x64
 80020de:	d901      	bls.n	80020e4 <HAL_RCC_OscConfig+0x524>
      {
        return HAL_TIMEOUT;
 80020e0:	2303      	movs	r3, #3
 80020e2:	e174      	b.n	80023ce <HAL_RCC_OscConfig+0x80e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80020e4:	4b8a      	ldr	r3, [pc, #552]	; (8002310 <HAL_RCC_OscConfig+0x750>)
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d0f0      	beq.n	80020d2 <HAL_RCC_OscConfig+0x512>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	689b      	ldr	r3, [r3, #8]
 80020f4:	2b01      	cmp	r3, #1
 80020f6:	d106      	bne.n	8002106 <HAL_RCC_OscConfig+0x546>
 80020f8:	4b84      	ldr	r3, [pc, #528]	; (800230c <HAL_RCC_OscConfig+0x74c>)
 80020fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020fc:	4a83      	ldr	r2, [pc, #524]	; (800230c <HAL_RCC_OscConfig+0x74c>)
 80020fe:	f043 0301 	orr.w	r3, r3, #1
 8002102:	6713      	str	r3, [r2, #112]	; 0x70
 8002104:	e02d      	b.n	8002162 <HAL_RCC_OscConfig+0x5a2>
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	689b      	ldr	r3, [r3, #8]
 800210a:	2b00      	cmp	r3, #0
 800210c:	d10c      	bne.n	8002128 <HAL_RCC_OscConfig+0x568>
 800210e:	4b7f      	ldr	r3, [pc, #508]	; (800230c <HAL_RCC_OscConfig+0x74c>)
 8002110:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002112:	4a7e      	ldr	r2, [pc, #504]	; (800230c <HAL_RCC_OscConfig+0x74c>)
 8002114:	f023 0301 	bic.w	r3, r3, #1
 8002118:	6713      	str	r3, [r2, #112]	; 0x70
 800211a:	4b7c      	ldr	r3, [pc, #496]	; (800230c <HAL_RCC_OscConfig+0x74c>)
 800211c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800211e:	4a7b      	ldr	r2, [pc, #492]	; (800230c <HAL_RCC_OscConfig+0x74c>)
 8002120:	f023 0304 	bic.w	r3, r3, #4
 8002124:	6713      	str	r3, [r2, #112]	; 0x70
 8002126:	e01c      	b.n	8002162 <HAL_RCC_OscConfig+0x5a2>
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	689b      	ldr	r3, [r3, #8]
 800212c:	2b05      	cmp	r3, #5
 800212e:	d10c      	bne.n	800214a <HAL_RCC_OscConfig+0x58a>
 8002130:	4b76      	ldr	r3, [pc, #472]	; (800230c <HAL_RCC_OscConfig+0x74c>)
 8002132:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002134:	4a75      	ldr	r2, [pc, #468]	; (800230c <HAL_RCC_OscConfig+0x74c>)
 8002136:	f043 0304 	orr.w	r3, r3, #4
 800213a:	6713      	str	r3, [r2, #112]	; 0x70
 800213c:	4b73      	ldr	r3, [pc, #460]	; (800230c <HAL_RCC_OscConfig+0x74c>)
 800213e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002140:	4a72      	ldr	r2, [pc, #456]	; (800230c <HAL_RCC_OscConfig+0x74c>)
 8002142:	f043 0301 	orr.w	r3, r3, #1
 8002146:	6713      	str	r3, [r2, #112]	; 0x70
 8002148:	e00b      	b.n	8002162 <HAL_RCC_OscConfig+0x5a2>
 800214a:	4b70      	ldr	r3, [pc, #448]	; (800230c <HAL_RCC_OscConfig+0x74c>)
 800214c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800214e:	4a6f      	ldr	r2, [pc, #444]	; (800230c <HAL_RCC_OscConfig+0x74c>)
 8002150:	f023 0301 	bic.w	r3, r3, #1
 8002154:	6713      	str	r3, [r2, #112]	; 0x70
 8002156:	4b6d      	ldr	r3, [pc, #436]	; (800230c <HAL_RCC_OscConfig+0x74c>)
 8002158:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800215a:	4a6c      	ldr	r2, [pc, #432]	; (800230c <HAL_RCC_OscConfig+0x74c>)
 800215c:	f023 0304 	bic.w	r3, r3, #4
 8002160:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	689b      	ldr	r3, [r3, #8]
 8002166:	2b00      	cmp	r3, #0
 8002168:	d015      	beq.n	8002196 <HAL_RCC_OscConfig+0x5d6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800216a:	f7ff f80d 	bl	8001188 <HAL_GetTick>
 800216e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002170:	e00a      	b.n	8002188 <HAL_RCC_OscConfig+0x5c8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002172:	f7ff f809 	bl	8001188 <HAL_GetTick>
 8002176:	4602      	mov	r2, r0
 8002178:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800217a:	1ad3      	subs	r3, r2, r3
 800217c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002180:	4293      	cmp	r3, r2
 8002182:	d901      	bls.n	8002188 <HAL_RCC_OscConfig+0x5c8>
        {
          return HAL_TIMEOUT;
 8002184:	2303      	movs	r3, #3
 8002186:	e122      	b.n	80023ce <HAL_RCC_OscConfig+0x80e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002188:	4b60      	ldr	r3, [pc, #384]	; (800230c <HAL_RCC_OscConfig+0x74c>)
 800218a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800218c:	f003 0302 	and.w	r3, r3, #2
 8002190:	2b00      	cmp	r3, #0
 8002192:	d0ee      	beq.n	8002172 <HAL_RCC_OscConfig+0x5b2>
 8002194:	e014      	b.n	80021c0 <HAL_RCC_OscConfig+0x600>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002196:	f7fe fff7 	bl	8001188 <HAL_GetTick>
 800219a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800219c:	e00a      	b.n	80021b4 <HAL_RCC_OscConfig+0x5f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800219e:	f7fe fff3 	bl	8001188 <HAL_GetTick>
 80021a2:	4602      	mov	r2, r0
 80021a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021a6:	1ad3      	subs	r3, r2, r3
 80021a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80021ac:	4293      	cmp	r3, r2
 80021ae:	d901      	bls.n	80021b4 <HAL_RCC_OscConfig+0x5f4>
        {
          return HAL_TIMEOUT;
 80021b0:	2303      	movs	r3, #3
 80021b2:	e10c      	b.n	80023ce <HAL_RCC_OscConfig+0x80e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80021b4:	4b55      	ldr	r3, [pc, #340]	; (800230c <HAL_RCC_OscConfig+0x74c>)
 80021b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021b8:	f003 0302 	and.w	r3, r3, #2
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d1ee      	bne.n	800219e <HAL_RCC_OscConfig+0x5de>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	f000 8101 	beq.w	80023cc <HAL_RCC_OscConfig+0x80c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80021ca:	4b50      	ldr	r3, [pc, #320]	; (800230c <HAL_RCC_OscConfig+0x74c>)
 80021cc:	691b      	ldr	r3, [r3, #16]
 80021ce:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80021d2:	2b18      	cmp	r3, #24
 80021d4:	f000 80bc 	beq.w	8002350 <HAL_RCC_OscConfig+0x790>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021dc:	2b02      	cmp	r3, #2
 80021de:	f040 809d 	bne.w	800231c <HAL_RCC_OscConfig+0x75c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021e2:	4b4a      	ldr	r3, [pc, #296]	; (800230c <HAL_RCC_OscConfig+0x74c>)
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	4a49      	ldr	r2, [pc, #292]	; (800230c <HAL_RCC_OscConfig+0x74c>)
 80021e8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80021ec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021ee:	f7fe ffcb 	bl	8001188 <HAL_GetTick>
 80021f2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80021f4:	e008      	b.n	8002208 <HAL_RCC_OscConfig+0x648>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80021f6:	f7fe ffc7 	bl	8001188 <HAL_GetTick>
 80021fa:	4602      	mov	r2, r0
 80021fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021fe:	1ad3      	subs	r3, r2, r3
 8002200:	2b02      	cmp	r3, #2
 8002202:	d901      	bls.n	8002208 <HAL_RCC_OscConfig+0x648>
          {
            return HAL_TIMEOUT;
 8002204:	2303      	movs	r3, #3
 8002206:	e0e2      	b.n	80023ce <HAL_RCC_OscConfig+0x80e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002208:	4b40      	ldr	r3, [pc, #256]	; (800230c <HAL_RCC_OscConfig+0x74c>)
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002210:	2b00      	cmp	r3, #0
 8002212:	d1f0      	bne.n	80021f6 <HAL_RCC_OscConfig+0x636>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002214:	4b3d      	ldr	r3, [pc, #244]	; (800230c <HAL_RCC_OscConfig+0x74c>)
 8002216:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002218:	4b3e      	ldr	r3, [pc, #248]	; (8002314 <HAL_RCC_OscConfig+0x754>)
 800221a:	4013      	ands	r3, r2
 800221c:	687a      	ldr	r2, [r7, #4]
 800221e:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8002220:	687a      	ldr	r2, [r7, #4]
 8002222:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002224:	0112      	lsls	r2, r2, #4
 8002226:	430a      	orrs	r2, r1
 8002228:	4938      	ldr	r1, [pc, #224]	; (800230c <HAL_RCC_OscConfig+0x74c>)
 800222a:	4313      	orrs	r3, r2
 800222c:	628b      	str	r3, [r1, #40]	; 0x28
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002232:	3b01      	subs	r3, #1
 8002234:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800223c:	3b01      	subs	r3, #1
 800223e:	025b      	lsls	r3, r3, #9
 8002240:	b29b      	uxth	r3, r3
 8002242:	431a      	orrs	r2, r3
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002248:	3b01      	subs	r3, #1
 800224a:	041b      	lsls	r3, r3, #16
 800224c:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8002250:	431a      	orrs	r2, r3
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002256:	3b01      	subs	r3, #1
 8002258:	061b      	lsls	r3, r3, #24
 800225a:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800225e:	492b      	ldr	r1, [pc, #172]	; (800230c <HAL_RCC_OscConfig+0x74c>)
 8002260:	4313      	orrs	r3, r2
 8002262:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8002264:	4b29      	ldr	r3, [pc, #164]	; (800230c <HAL_RCC_OscConfig+0x74c>)
 8002266:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002268:	4a28      	ldr	r2, [pc, #160]	; (800230c <HAL_RCC_OscConfig+0x74c>)
 800226a:	f023 0301 	bic.w	r3, r3, #1
 800226e:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002270:	4b26      	ldr	r3, [pc, #152]	; (800230c <HAL_RCC_OscConfig+0x74c>)
 8002272:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002274:	4b28      	ldr	r3, [pc, #160]	; (8002318 <HAL_RCC_OscConfig+0x758>)
 8002276:	4013      	ands	r3, r2
 8002278:	687a      	ldr	r2, [r7, #4]
 800227a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800227c:	00d2      	lsls	r2, r2, #3
 800227e:	4923      	ldr	r1, [pc, #140]	; (800230c <HAL_RCC_OscConfig+0x74c>)
 8002280:	4313      	orrs	r3, r2
 8002282:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8002284:	4b21      	ldr	r3, [pc, #132]	; (800230c <HAL_RCC_OscConfig+0x74c>)
 8002286:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002288:	f023 020c 	bic.w	r2, r3, #12
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002290:	491e      	ldr	r1, [pc, #120]	; (800230c <HAL_RCC_OscConfig+0x74c>)
 8002292:	4313      	orrs	r3, r2
 8002294:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8002296:	4b1d      	ldr	r3, [pc, #116]	; (800230c <HAL_RCC_OscConfig+0x74c>)
 8002298:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800229a:	f023 0202 	bic.w	r2, r3, #2
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022a2:	491a      	ldr	r1, [pc, #104]	; (800230c <HAL_RCC_OscConfig+0x74c>)
 80022a4:	4313      	orrs	r3, r2
 80022a6:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80022a8:	4b18      	ldr	r3, [pc, #96]	; (800230c <HAL_RCC_OscConfig+0x74c>)
 80022aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022ac:	4a17      	ldr	r2, [pc, #92]	; (800230c <HAL_RCC_OscConfig+0x74c>)
 80022ae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022b2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80022b4:	4b15      	ldr	r3, [pc, #84]	; (800230c <HAL_RCC_OscConfig+0x74c>)
 80022b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022b8:	4a14      	ldr	r2, [pc, #80]	; (800230c <HAL_RCC_OscConfig+0x74c>)
 80022ba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80022be:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80022c0:	4b12      	ldr	r3, [pc, #72]	; (800230c <HAL_RCC_OscConfig+0x74c>)
 80022c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022c4:	4a11      	ldr	r2, [pc, #68]	; (800230c <HAL_RCC_OscConfig+0x74c>)
 80022c6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80022ca:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 80022cc:	4b0f      	ldr	r3, [pc, #60]	; (800230c <HAL_RCC_OscConfig+0x74c>)
 80022ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022d0:	4a0e      	ldr	r2, [pc, #56]	; (800230c <HAL_RCC_OscConfig+0x74c>)
 80022d2:	f043 0301 	orr.w	r3, r3, #1
 80022d6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80022d8:	4b0c      	ldr	r3, [pc, #48]	; (800230c <HAL_RCC_OscConfig+0x74c>)
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	4a0b      	ldr	r2, [pc, #44]	; (800230c <HAL_RCC_OscConfig+0x74c>)
 80022de:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80022e2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022e4:	f7fe ff50 	bl	8001188 <HAL_GetTick>
 80022e8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80022ea:	e008      	b.n	80022fe <HAL_RCC_OscConfig+0x73e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80022ec:	f7fe ff4c 	bl	8001188 <HAL_GetTick>
 80022f0:	4602      	mov	r2, r0
 80022f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022f4:	1ad3      	subs	r3, r2, r3
 80022f6:	2b02      	cmp	r3, #2
 80022f8:	d901      	bls.n	80022fe <HAL_RCC_OscConfig+0x73e>
          {
            return HAL_TIMEOUT;
 80022fa:	2303      	movs	r3, #3
 80022fc:	e067      	b.n	80023ce <HAL_RCC_OscConfig+0x80e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80022fe:	4b03      	ldr	r3, [pc, #12]	; (800230c <HAL_RCC_OscConfig+0x74c>)
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002306:	2b00      	cmp	r3, #0
 8002308:	d0f0      	beq.n	80022ec <HAL_RCC_OscConfig+0x72c>
 800230a:	e05f      	b.n	80023cc <HAL_RCC_OscConfig+0x80c>
 800230c:	58024400 	.word	0x58024400
 8002310:	58024800 	.word	0x58024800
 8002314:	fffffc0c 	.word	0xfffffc0c
 8002318:	ffff0007 	.word	0xffff0007
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800231c:	4b2e      	ldr	r3, [pc, #184]	; (80023d8 <HAL_RCC_OscConfig+0x818>)
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	4a2d      	ldr	r2, [pc, #180]	; (80023d8 <HAL_RCC_OscConfig+0x818>)
 8002322:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002326:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002328:	f7fe ff2e 	bl	8001188 <HAL_GetTick>
 800232c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800232e:	e008      	b.n	8002342 <HAL_RCC_OscConfig+0x782>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002330:	f7fe ff2a 	bl	8001188 <HAL_GetTick>
 8002334:	4602      	mov	r2, r0
 8002336:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002338:	1ad3      	subs	r3, r2, r3
 800233a:	2b02      	cmp	r3, #2
 800233c:	d901      	bls.n	8002342 <HAL_RCC_OscConfig+0x782>
          {
            return HAL_TIMEOUT;
 800233e:	2303      	movs	r3, #3
 8002340:	e045      	b.n	80023ce <HAL_RCC_OscConfig+0x80e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002342:	4b25      	ldr	r3, [pc, #148]	; (80023d8 <HAL_RCC_OscConfig+0x818>)
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800234a:	2b00      	cmp	r3, #0
 800234c:	d1f0      	bne.n	8002330 <HAL_RCC_OscConfig+0x770>
 800234e:	e03d      	b.n	80023cc <HAL_RCC_OscConfig+0x80c>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8002350:	4b21      	ldr	r3, [pc, #132]	; (80023d8 <HAL_RCC_OscConfig+0x818>)
 8002352:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002354:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002356:	4b20      	ldr	r3, [pc, #128]	; (80023d8 <HAL_RCC_OscConfig+0x818>)
 8002358:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800235a:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002360:	2b01      	cmp	r3, #1
 8002362:	d031      	beq.n	80023c8 <HAL_RCC_OscConfig+0x808>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002364:	693b      	ldr	r3, [r7, #16]
 8002366:	f003 0203 	and.w	r2, r3, #3
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800236e:	429a      	cmp	r2, r3
 8002370:	d12a      	bne.n	80023c8 <HAL_RCC_OscConfig+0x808>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002372:	693b      	ldr	r3, [r7, #16]
 8002374:	091b      	lsrs	r3, r3, #4
 8002376:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800237e:	429a      	cmp	r2, r3
 8002380:	d122      	bne.n	80023c8 <HAL_RCC_OscConfig+0x808>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800238c:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800238e:	429a      	cmp	r2, r3
 8002390:	d11a      	bne.n	80023c8 <HAL_RCC_OscConfig+0x808>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	0a5b      	lsrs	r3, r3, #9
 8002396:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800239e:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80023a0:	429a      	cmp	r2, r3
 80023a2:	d111      	bne.n	80023c8 <HAL_RCC_OscConfig+0x808>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	0c1b      	lsrs	r3, r3, #16
 80023a8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023b0:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80023b2:	429a      	cmp	r2, r3
 80023b4:	d108      	bne.n	80023c8 <HAL_RCC_OscConfig+0x808>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	0e1b      	lsrs	r3, r3, #24
 80023ba:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023c2:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80023c4:	429a      	cmp	r2, r3
 80023c6:	d001      	beq.n	80023cc <HAL_RCC_OscConfig+0x80c>
      {
        return HAL_ERROR;
 80023c8:	2301      	movs	r3, #1
 80023ca:	e000      	b.n	80023ce <HAL_RCC_OscConfig+0x80e>
      }
    }
  }
  return HAL_OK;
 80023cc:	2300      	movs	r3, #0
}
 80023ce:	4618      	mov	r0, r3
 80023d0:	3730      	adds	r7, #48	; 0x30
 80023d2:	46bd      	mov	sp, r7
 80023d4:	bd80      	pop	{r7, pc}
 80023d6:	bf00      	nop
 80023d8:	58024400 	.word	0x58024400

080023dc <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80023dc:	b580      	push	{r7, lr}
 80023de:	b086      	sub	sp, #24
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	6078      	str	r0, [r7, #4]
 80023e4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d101      	bne.n	80023f0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80023ec:	2301      	movs	r3, #1
 80023ee:	e19c      	b.n	800272a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80023f0:	4b8a      	ldr	r3, [pc, #552]	; (800261c <HAL_RCC_ClockConfig+0x240>)
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f003 030f 	and.w	r3, r3, #15
 80023f8:	683a      	ldr	r2, [r7, #0]
 80023fa:	429a      	cmp	r2, r3
 80023fc:	d910      	bls.n	8002420 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023fe:	4b87      	ldr	r3, [pc, #540]	; (800261c <HAL_RCC_ClockConfig+0x240>)
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f023 020f 	bic.w	r2, r3, #15
 8002406:	4985      	ldr	r1, [pc, #532]	; (800261c <HAL_RCC_ClockConfig+0x240>)
 8002408:	683b      	ldr	r3, [r7, #0]
 800240a:	4313      	orrs	r3, r2
 800240c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800240e:	4b83      	ldr	r3, [pc, #524]	; (800261c <HAL_RCC_ClockConfig+0x240>)
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f003 030f 	and.w	r3, r3, #15
 8002416:	683a      	ldr	r2, [r7, #0]
 8002418:	429a      	cmp	r2, r3
 800241a:	d001      	beq.n	8002420 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800241c:	2301      	movs	r3, #1
 800241e:	e184      	b.n	800272a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f003 0304 	and.w	r3, r3, #4
 8002428:	2b00      	cmp	r3, #0
 800242a:	d010      	beq.n	800244e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	691a      	ldr	r2, [r3, #16]
 8002430:	4b7b      	ldr	r3, [pc, #492]	; (8002620 <HAL_RCC_ClockConfig+0x244>)
 8002432:	699b      	ldr	r3, [r3, #24]
 8002434:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002438:	429a      	cmp	r2, r3
 800243a:	d908      	bls.n	800244e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800243c:	4b78      	ldr	r3, [pc, #480]	; (8002620 <HAL_RCC_ClockConfig+0x244>)
 800243e:	699b      	ldr	r3, [r3, #24]
 8002440:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	691b      	ldr	r3, [r3, #16]
 8002448:	4975      	ldr	r1, [pc, #468]	; (8002620 <HAL_RCC_ClockConfig+0x244>)
 800244a:	4313      	orrs	r3, r2
 800244c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f003 0308 	and.w	r3, r3, #8
 8002456:	2b00      	cmp	r3, #0
 8002458:	d010      	beq.n	800247c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	695a      	ldr	r2, [r3, #20]
 800245e:	4b70      	ldr	r3, [pc, #448]	; (8002620 <HAL_RCC_ClockConfig+0x244>)
 8002460:	69db      	ldr	r3, [r3, #28]
 8002462:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002466:	429a      	cmp	r2, r3
 8002468:	d908      	bls.n	800247c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800246a:	4b6d      	ldr	r3, [pc, #436]	; (8002620 <HAL_RCC_ClockConfig+0x244>)
 800246c:	69db      	ldr	r3, [r3, #28]
 800246e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	695b      	ldr	r3, [r3, #20]
 8002476:	496a      	ldr	r1, [pc, #424]	; (8002620 <HAL_RCC_ClockConfig+0x244>)
 8002478:	4313      	orrs	r3, r2
 800247a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f003 0310 	and.w	r3, r3, #16
 8002484:	2b00      	cmp	r3, #0
 8002486:	d010      	beq.n	80024aa <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	699a      	ldr	r2, [r3, #24]
 800248c:	4b64      	ldr	r3, [pc, #400]	; (8002620 <HAL_RCC_ClockConfig+0x244>)
 800248e:	69db      	ldr	r3, [r3, #28]
 8002490:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002494:	429a      	cmp	r2, r3
 8002496:	d908      	bls.n	80024aa <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002498:	4b61      	ldr	r3, [pc, #388]	; (8002620 <HAL_RCC_ClockConfig+0x244>)
 800249a:	69db      	ldr	r3, [r3, #28]
 800249c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	699b      	ldr	r3, [r3, #24]
 80024a4:	495e      	ldr	r1, [pc, #376]	; (8002620 <HAL_RCC_ClockConfig+0x244>)
 80024a6:	4313      	orrs	r3, r2
 80024a8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f003 0320 	and.w	r3, r3, #32
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d010      	beq.n	80024d8 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	69da      	ldr	r2, [r3, #28]
 80024ba:	4b59      	ldr	r3, [pc, #356]	; (8002620 <HAL_RCC_ClockConfig+0x244>)
 80024bc:	6a1b      	ldr	r3, [r3, #32]
 80024be:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80024c2:	429a      	cmp	r2, r3
 80024c4:	d908      	bls.n	80024d8 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80024c6:	4b56      	ldr	r3, [pc, #344]	; (8002620 <HAL_RCC_ClockConfig+0x244>)
 80024c8:	6a1b      	ldr	r3, [r3, #32]
 80024ca:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	69db      	ldr	r3, [r3, #28]
 80024d2:	4953      	ldr	r1, [pc, #332]	; (8002620 <HAL_RCC_ClockConfig+0x244>)
 80024d4:	4313      	orrs	r3, r2
 80024d6:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f003 0302 	and.w	r3, r3, #2
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d010      	beq.n	8002506 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	68da      	ldr	r2, [r3, #12]
 80024e8:	4b4d      	ldr	r3, [pc, #308]	; (8002620 <HAL_RCC_ClockConfig+0x244>)
 80024ea:	699b      	ldr	r3, [r3, #24]
 80024ec:	f003 030f 	and.w	r3, r3, #15
 80024f0:	429a      	cmp	r2, r3
 80024f2:	d908      	bls.n	8002506 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80024f4:	4b4a      	ldr	r3, [pc, #296]	; (8002620 <HAL_RCC_ClockConfig+0x244>)
 80024f6:	699b      	ldr	r3, [r3, #24]
 80024f8:	f023 020f 	bic.w	r2, r3, #15
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	68db      	ldr	r3, [r3, #12]
 8002500:	4947      	ldr	r1, [pc, #284]	; (8002620 <HAL_RCC_ClockConfig+0x244>)
 8002502:	4313      	orrs	r3, r2
 8002504:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f003 0301 	and.w	r3, r3, #1
 800250e:	2b00      	cmp	r3, #0
 8002510:	d055      	beq.n	80025be <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8002512:	4b43      	ldr	r3, [pc, #268]	; (8002620 <HAL_RCC_ClockConfig+0x244>)
 8002514:	699b      	ldr	r3, [r3, #24]
 8002516:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	689b      	ldr	r3, [r3, #8]
 800251e:	4940      	ldr	r1, [pc, #256]	; (8002620 <HAL_RCC_ClockConfig+0x244>)
 8002520:	4313      	orrs	r3, r2
 8002522:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	685b      	ldr	r3, [r3, #4]
 8002528:	2b02      	cmp	r3, #2
 800252a:	d107      	bne.n	800253c <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800252c:	4b3c      	ldr	r3, [pc, #240]	; (8002620 <HAL_RCC_ClockConfig+0x244>)
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002534:	2b00      	cmp	r3, #0
 8002536:	d121      	bne.n	800257c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002538:	2301      	movs	r3, #1
 800253a:	e0f6      	b.n	800272a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	685b      	ldr	r3, [r3, #4]
 8002540:	2b03      	cmp	r3, #3
 8002542:	d107      	bne.n	8002554 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002544:	4b36      	ldr	r3, [pc, #216]	; (8002620 <HAL_RCC_ClockConfig+0x244>)
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800254c:	2b00      	cmp	r3, #0
 800254e:	d115      	bne.n	800257c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002550:	2301      	movs	r3, #1
 8002552:	e0ea      	b.n	800272a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	685b      	ldr	r3, [r3, #4]
 8002558:	2b01      	cmp	r3, #1
 800255a:	d107      	bne.n	800256c <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800255c:	4b30      	ldr	r3, [pc, #192]	; (8002620 <HAL_RCC_ClockConfig+0x244>)
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002564:	2b00      	cmp	r3, #0
 8002566:	d109      	bne.n	800257c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002568:	2301      	movs	r3, #1
 800256a:	e0de      	b.n	800272a <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800256c:	4b2c      	ldr	r3, [pc, #176]	; (8002620 <HAL_RCC_ClockConfig+0x244>)
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f003 0304 	and.w	r3, r3, #4
 8002574:	2b00      	cmp	r3, #0
 8002576:	d101      	bne.n	800257c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002578:	2301      	movs	r3, #1
 800257a:	e0d6      	b.n	800272a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800257c:	4b28      	ldr	r3, [pc, #160]	; (8002620 <HAL_RCC_ClockConfig+0x244>)
 800257e:	691b      	ldr	r3, [r3, #16]
 8002580:	f023 0207 	bic.w	r2, r3, #7
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	685b      	ldr	r3, [r3, #4]
 8002588:	4925      	ldr	r1, [pc, #148]	; (8002620 <HAL_RCC_ClockConfig+0x244>)
 800258a:	4313      	orrs	r3, r2
 800258c:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800258e:	f7fe fdfb 	bl	8001188 <HAL_GetTick>
 8002592:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002594:	e00a      	b.n	80025ac <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002596:	f7fe fdf7 	bl	8001188 <HAL_GetTick>
 800259a:	4602      	mov	r2, r0
 800259c:	697b      	ldr	r3, [r7, #20]
 800259e:	1ad3      	subs	r3, r2, r3
 80025a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80025a4:	4293      	cmp	r3, r2
 80025a6:	d901      	bls.n	80025ac <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80025a8:	2303      	movs	r3, #3
 80025aa:	e0be      	b.n	800272a <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025ac:	4b1c      	ldr	r3, [pc, #112]	; (8002620 <HAL_RCC_ClockConfig+0x244>)
 80025ae:	691b      	ldr	r3, [r3, #16]
 80025b0:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	685b      	ldr	r3, [r3, #4]
 80025b8:	00db      	lsls	r3, r3, #3
 80025ba:	429a      	cmp	r2, r3
 80025bc:	d1eb      	bne.n	8002596 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f003 0302 	and.w	r3, r3, #2
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d010      	beq.n	80025ec <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	68da      	ldr	r2, [r3, #12]
 80025ce:	4b14      	ldr	r3, [pc, #80]	; (8002620 <HAL_RCC_ClockConfig+0x244>)
 80025d0:	699b      	ldr	r3, [r3, #24]
 80025d2:	f003 030f 	and.w	r3, r3, #15
 80025d6:	429a      	cmp	r2, r3
 80025d8:	d208      	bcs.n	80025ec <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80025da:	4b11      	ldr	r3, [pc, #68]	; (8002620 <HAL_RCC_ClockConfig+0x244>)
 80025dc:	699b      	ldr	r3, [r3, #24]
 80025de:	f023 020f 	bic.w	r2, r3, #15
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	68db      	ldr	r3, [r3, #12]
 80025e6:	490e      	ldr	r1, [pc, #56]	; (8002620 <HAL_RCC_ClockConfig+0x244>)
 80025e8:	4313      	orrs	r3, r2
 80025ea:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80025ec:	4b0b      	ldr	r3, [pc, #44]	; (800261c <HAL_RCC_ClockConfig+0x240>)
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	f003 030f 	and.w	r3, r3, #15
 80025f4:	683a      	ldr	r2, [r7, #0]
 80025f6:	429a      	cmp	r2, r3
 80025f8:	d214      	bcs.n	8002624 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025fa:	4b08      	ldr	r3, [pc, #32]	; (800261c <HAL_RCC_ClockConfig+0x240>)
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f023 020f 	bic.w	r2, r3, #15
 8002602:	4906      	ldr	r1, [pc, #24]	; (800261c <HAL_RCC_ClockConfig+0x240>)
 8002604:	683b      	ldr	r3, [r7, #0]
 8002606:	4313      	orrs	r3, r2
 8002608:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800260a:	4b04      	ldr	r3, [pc, #16]	; (800261c <HAL_RCC_ClockConfig+0x240>)
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f003 030f 	and.w	r3, r3, #15
 8002612:	683a      	ldr	r2, [r7, #0]
 8002614:	429a      	cmp	r2, r3
 8002616:	d005      	beq.n	8002624 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8002618:	2301      	movs	r3, #1
 800261a:	e086      	b.n	800272a <HAL_RCC_ClockConfig+0x34e>
 800261c:	52002000 	.word	0x52002000
 8002620:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	f003 0304 	and.w	r3, r3, #4
 800262c:	2b00      	cmp	r3, #0
 800262e:	d010      	beq.n	8002652 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	691a      	ldr	r2, [r3, #16]
 8002634:	4b3f      	ldr	r3, [pc, #252]	; (8002734 <HAL_RCC_ClockConfig+0x358>)
 8002636:	699b      	ldr	r3, [r3, #24]
 8002638:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800263c:	429a      	cmp	r2, r3
 800263e:	d208      	bcs.n	8002652 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002640:	4b3c      	ldr	r3, [pc, #240]	; (8002734 <HAL_RCC_ClockConfig+0x358>)
 8002642:	699b      	ldr	r3, [r3, #24]
 8002644:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	691b      	ldr	r3, [r3, #16]
 800264c:	4939      	ldr	r1, [pc, #228]	; (8002734 <HAL_RCC_ClockConfig+0x358>)
 800264e:	4313      	orrs	r3, r2
 8002650:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f003 0308 	and.w	r3, r3, #8
 800265a:	2b00      	cmp	r3, #0
 800265c:	d010      	beq.n	8002680 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	695a      	ldr	r2, [r3, #20]
 8002662:	4b34      	ldr	r3, [pc, #208]	; (8002734 <HAL_RCC_ClockConfig+0x358>)
 8002664:	69db      	ldr	r3, [r3, #28]
 8002666:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800266a:	429a      	cmp	r2, r3
 800266c:	d208      	bcs.n	8002680 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800266e:	4b31      	ldr	r3, [pc, #196]	; (8002734 <HAL_RCC_ClockConfig+0x358>)
 8002670:	69db      	ldr	r3, [r3, #28]
 8002672:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	695b      	ldr	r3, [r3, #20]
 800267a:	492e      	ldr	r1, [pc, #184]	; (8002734 <HAL_RCC_ClockConfig+0x358>)
 800267c:	4313      	orrs	r3, r2
 800267e:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f003 0310 	and.w	r3, r3, #16
 8002688:	2b00      	cmp	r3, #0
 800268a:	d010      	beq.n	80026ae <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	699a      	ldr	r2, [r3, #24]
 8002690:	4b28      	ldr	r3, [pc, #160]	; (8002734 <HAL_RCC_ClockConfig+0x358>)
 8002692:	69db      	ldr	r3, [r3, #28]
 8002694:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002698:	429a      	cmp	r2, r3
 800269a:	d208      	bcs.n	80026ae <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800269c:	4b25      	ldr	r3, [pc, #148]	; (8002734 <HAL_RCC_ClockConfig+0x358>)
 800269e:	69db      	ldr	r3, [r3, #28]
 80026a0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	699b      	ldr	r3, [r3, #24]
 80026a8:	4922      	ldr	r1, [pc, #136]	; (8002734 <HAL_RCC_ClockConfig+0x358>)
 80026aa:	4313      	orrs	r3, r2
 80026ac:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f003 0320 	and.w	r3, r3, #32
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d010      	beq.n	80026dc <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	69da      	ldr	r2, [r3, #28]
 80026be:	4b1d      	ldr	r3, [pc, #116]	; (8002734 <HAL_RCC_ClockConfig+0x358>)
 80026c0:	6a1b      	ldr	r3, [r3, #32]
 80026c2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80026c6:	429a      	cmp	r2, r3
 80026c8:	d208      	bcs.n	80026dc <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80026ca:	4b1a      	ldr	r3, [pc, #104]	; (8002734 <HAL_RCC_ClockConfig+0x358>)
 80026cc:	6a1b      	ldr	r3, [r3, #32]
 80026ce:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	69db      	ldr	r3, [r3, #28]
 80026d6:	4917      	ldr	r1, [pc, #92]	; (8002734 <HAL_RCC_ClockConfig+0x358>)
 80026d8:	4313      	orrs	r3, r2
 80026da:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80026dc:	f000 f834 	bl	8002748 <HAL_RCC_GetSysClockFreq>
 80026e0:	4602      	mov	r2, r0
 80026e2:	4b14      	ldr	r3, [pc, #80]	; (8002734 <HAL_RCC_ClockConfig+0x358>)
 80026e4:	699b      	ldr	r3, [r3, #24]
 80026e6:	0a1b      	lsrs	r3, r3, #8
 80026e8:	f003 030f 	and.w	r3, r3, #15
 80026ec:	4912      	ldr	r1, [pc, #72]	; (8002738 <HAL_RCC_ClockConfig+0x35c>)
 80026ee:	5ccb      	ldrb	r3, [r1, r3]
 80026f0:	f003 031f 	and.w	r3, r3, #31
 80026f4:	fa22 f303 	lsr.w	r3, r2, r3
 80026f8:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80026fa:	4b0e      	ldr	r3, [pc, #56]	; (8002734 <HAL_RCC_ClockConfig+0x358>)
 80026fc:	699b      	ldr	r3, [r3, #24]
 80026fe:	f003 030f 	and.w	r3, r3, #15
 8002702:	4a0d      	ldr	r2, [pc, #52]	; (8002738 <HAL_RCC_ClockConfig+0x35c>)
 8002704:	5cd3      	ldrb	r3, [r2, r3]
 8002706:	f003 031f 	and.w	r3, r3, #31
 800270a:	693a      	ldr	r2, [r7, #16]
 800270c:	fa22 f303 	lsr.w	r3, r2, r3
 8002710:	4a0a      	ldr	r2, [pc, #40]	; (800273c <HAL_RCC_ClockConfig+0x360>)
 8002712:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002714:	4a0a      	ldr	r2, [pc, #40]	; (8002740 <HAL_RCC_ClockConfig+0x364>)
 8002716:	693b      	ldr	r3, [r7, #16]
 8002718:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 800271a:	4b0a      	ldr	r3, [pc, #40]	; (8002744 <HAL_RCC_ClockConfig+0x368>)
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	4618      	mov	r0, r3
 8002720:	f7fe fce8 	bl	80010f4 <HAL_InitTick>
 8002724:	4603      	mov	r3, r0
 8002726:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8002728:	7bfb      	ldrb	r3, [r7, #15]
}
 800272a:	4618      	mov	r0, r3
 800272c:	3718      	adds	r7, #24
 800272e:	46bd      	mov	sp, r7
 8002730:	bd80      	pop	{r7, pc}
 8002732:	bf00      	nop
 8002734:	58024400 	.word	0x58024400
 8002738:	08007eb4 	.word	0x08007eb4
 800273c:	24000004 	.word	0x24000004
 8002740:	24000000 	.word	0x24000000
 8002744:	24000008 	.word	0x24000008

08002748 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002748:	b480      	push	{r7}
 800274a:	b089      	sub	sp, #36	; 0x24
 800274c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800274e:	4bb3      	ldr	r3, [pc, #716]	; (8002a1c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002750:	691b      	ldr	r3, [r3, #16]
 8002752:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002756:	2b18      	cmp	r3, #24
 8002758:	f200 8155 	bhi.w	8002a06 <HAL_RCC_GetSysClockFreq+0x2be>
 800275c:	a201      	add	r2, pc, #4	; (adr r2, 8002764 <HAL_RCC_GetSysClockFreq+0x1c>)
 800275e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002762:	bf00      	nop
 8002764:	080027c9 	.word	0x080027c9
 8002768:	08002a07 	.word	0x08002a07
 800276c:	08002a07 	.word	0x08002a07
 8002770:	08002a07 	.word	0x08002a07
 8002774:	08002a07 	.word	0x08002a07
 8002778:	08002a07 	.word	0x08002a07
 800277c:	08002a07 	.word	0x08002a07
 8002780:	08002a07 	.word	0x08002a07
 8002784:	080027ef 	.word	0x080027ef
 8002788:	08002a07 	.word	0x08002a07
 800278c:	08002a07 	.word	0x08002a07
 8002790:	08002a07 	.word	0x08002a07
 8002794:	08002a07 	.word	0x08002a07
 8002798:	08002a07 	.word	0x08002a07
 800279c:	08002a07 	.word	0x08002a07
 80027a0:	08002a07 	.word	0x08002a07
 80027a4:	080027f5 	.word	0x080027f5
 80027a8:	08002a07 	.word	0x08002a07
 80027ac:	08002a07 	.word	0x08002a07
 80027b0:	08002a07 	.word	0x08002a07
 80027b4:	08002a07 	.word	0x08002a07
 80027b8:	08002a07 	.word	0x08002a07
 80027bc:	08002a07 	.word	0x08002a07
 80027c0:	08002a07 	.word	0x08002a07
 80027c4:	080027fb 	.word	0x080027fb
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80027c8:	4b94      	ldr	r3, [pc, #592]	; (8002a1c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	f003 0320 	and.w	r3, r3, #32
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d009      	beq.n	80027e8 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80027d4:	4b91      	ldr	r3, [pc, #580]	; (8002a1c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	08db      	lsrs	r3, r3, #3
 80027da:	f003 0303 	and.w	r3, r3, #3
 80027de:	4a90      	ldr	r2, [pc, #576]	; (8002a20 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80027e0:	fa22 f303 	lsr.w	r3, r2, r3
 80027e4:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 80027e6:	e111      	b.n	8002a0c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80027e8:	4b8d      	ldr	r3, [pc, #564]	; (8002a20 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80027ea:	61bb      	str	r3, [r7, #24]
    break;
 80027ec:	e10e      	b.n	8002a0c <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 80027ee:	4b8d      	ldr	r3, [pc, #564]	; (8002a24 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80027f0:	61bb      	str	r3, [r7, #24]
    break;
 80027f2:	e10b      	b.n	8002a0c <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 80027f4:	4b8c      	ldr	r3, [pc, #560]	; (8002a28 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80027f6:	61bb      	str	r3, [r7, #24]
    break;
 80027f8:	e108      	b.n	8002a0c <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80027fa:	4b88      	ldr	r3, [pc, #544]	; (8002a1c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80027fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027fe:	f003 0303 	and.w	r3, r3, #3
 8002802:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8002804:	4b85      	ldr	r3, [pc, #532]	; (8002a1c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002806:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002808:	091b      	lsrs	r3, r3, #4
 800280a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800280e:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8002810:	4b82      	ldr	r3, [pc, #520]	; (8002a1c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002812:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002814:	f003 0301 	and.w	r3, r3, #1
 8002818:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800281a:	4b80      	ldr	r3, [pc, #512]	; (8002a1c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800281c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800281e:	08db      	lsrs	r3, r3, #3
 8002820:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002824:	68fa      	ldr	r2, [r7, #12]
 8002826:	fb02 f303 	mul.w	r3, r2, r3
 800282a:	ee07 3a90 	vmov	s15, r3
 800282e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002832:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8002836:	693b      	ldr	r3, [r7, #16]
 8002838:	2b00      	cmp	r3, #0
 800283a:	f000 80e1 	beq.w	8002a00 <HAL_RCC_GetSysClockFreq+0x2b8>
 800283e:	697b      	ldr	r3, [r7, #20]
 8002840:	2b02      	cmp	r3, #2
 8002842:	f000 8083 	beq.w	800294c <HAL_RCC_GetSysClockFreq+0x204>
 8002846:	697b      	ldr	r3, [r7, #20]
 8002848:	2b02      	cmp	r3, #2
 800284a:	f200 80a1 	bhi.w	8002990 <HAL_RCC_GetSysClockFreq+0x248>
 800284e:	697b      	ldr	r3, [r7, #20]
 8002850:	2b00      	cmp	r3, #0
 8002852:	d003      	beq.n	800285c <HAL_RCC_GetSysClockFreq+0x114>
 8002854:	697b      	ldr	r3, [r7, #20]
 8002856:	2b01      	cmp	r3, #1
 8002858:	d056      	beq.n	8002908 <HAL_RCC_GetSysClockFreq+0x1c0>
 800285a:	e099      	b.n	8002990 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800285c:	4b6f      	ldr	r3, [pc, #444]	; (8002a1c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	f003 0320 	and.w	r3, r3, #32
 8002864:	2b00      	cmp	r3, #0
 8002866:	d02d      	beq.n	80028c4 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8002868:	4b6c      	ldr	r3, [pc, #432]	; (8002a1c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	08db      	lsrs	r3, r3, #3
 800286e:	f003 0303 	and.w	r3, r3, #3
 8002872:	4a6b      	ldr	r2, [pc, #428]	; (8002a20 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002874:	fa22 f303 	lsr.w	r3, r2, r3
 8002878:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	ee07 3a90 	vmov	s15, r3
 8002880:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002884:	693b      	ldr	r3, [r7, #16]
 8002886:	ee07 3a90 	vmov	s15, r3
 800288a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800288e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002892:	4b62      	ldr	r3, [pc, #392]	; (8002a1c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002896:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800289a:	ee07 3a90 	vmov	s15, r3
 800289e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80028a2:	ed97 6a02 	vldr	s12, [r7, #8]
 80028a6:	eddf 5a61 	vldr	s11, [pc, #388]	; 8002a2c <HAL_RCC_GetSysClockFreq+0x2e4>
 80028aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80028ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80028b2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80028b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80028ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80028be:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 80028c2:	e087      	b.n	80029d4 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80028c4:	693b      	ldr	r3, [r7, #16]
 80028c6:	ee07 3a90 	vmov	s15, r3
 80028ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80028ce:	eddf 6a58 	vldr	s13, [pc, #352]	; 8002a30 <HAL_RCC_GetSysClockFreq+0x2e8>
 80028d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80028d6:	4b51      	ldr	r3, [pc, #324]	; (8002a1c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80028d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80028de:	ee07 3a90 	vmov	s15, r3
 80028e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80028e6:	ed97 6a02 	vldr	s12, [r7, #8]
 80028ea:	eddf 5a50 	vldr	s11, [pc, #320]	; 8002a2c <HAL_RCC_GetSysClockFreq+0x2e4>
 80028ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80028f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80028f6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80028fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80028fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002902:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002906:	e065      	b.n	80029d4 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002908:	693b      	ldr	r3, [r7, #16]
 800290a:	ee07 3a90 	vmov	s15, r3
 800290e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002912:	eddf 6a48 	vldr	s13, [pc, #288]	; 8002a34 <HAL_RCC_GetSysClockFreq+0x2ec>
 8002916:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800291a:	4b40      	ldr	r3, [pc, #256]	; (8002a1c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800291c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800291e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002922:	ee07 3a90 	vmov	s15, r3
 8002926:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800292a:	ed97 6a02 	vldr	s12, [r7, #8]
 800292e:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8002a2c <HAL_RCC_GetSysClockFreq+0x2e4>
 8002932:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002936:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800293a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800293e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002942:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002946:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800294a:	e043      	b.n	80029d4 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800294c:	693b      	ldr	r3, [r7, #16]
 800294e:	ee07 3a90 	vmov	s15, r3
 8002952:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002956:	eddf 6a38 	vldr	s13, [pc, #224]	; 8002a38 <HAL_RCC_GetSysClockFreq+0x2f0>
 800295a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800295e:	4b2f      	ldr	r3, [pc, #188]	; (8002a1c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002962:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002966:	ee07 3a90 	vmov	s15, r3
 800296a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800296e:	ed97 6a02 	vldr	s12, [r7, #8]
 8002972:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8002a2c <HAL_RCC_GetSysClockFreq+0x2e4>
 8002976:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800297a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800297e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002982:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002986:	ee67 7a27 	vmul.f32	s15, s14, s15
 800298a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800298e:	e021      	b.n	80029d4 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002990:	693b      	ldr	r3, [r7, #16]
 8002992:	ee07 3a90 	vmov	s15, r3
 8002996:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800299a:	eddf 6a26 	vldr	s13, [pc, #152]	; 8002a34 <HAL_RCC_GetSysClockFreq+0x2ec>
 800299e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80029a2:	4b1e      	ldr	r3, [pc, #120]	; (8002a1c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80029a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80029aa:	ee07 3a90 	vmov	s15, r3
 80029ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80029b2:	ed97 6a02 	vldr	s12, [r7, #8]
 80029b6:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8002a2c <HAL_RCC_GetSysClockFreq+0x2e4>
 80029ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80029be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80029c2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80029c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80029ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80029ce:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80029d2:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 80029d4:	4b11      	ldr	r3, [pc, #68]	; (8002a1c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80029d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029d8:	0a5b      	lsrs	r3, r3, #9
 80029da:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80029de:	3301      	adds	r3, #1
 80029e0:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 80029e2:	683b      	ldr	r3, [r7, #0]
 80029e4:	ee07 3a90 	vmov	s15, r3
 80029e8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80029ec:	edd7 6a07 	vldr	s13, [r7, #28]
 80029f0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80029f4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80029f8:	ee17 3a90 	vmov	r3, s15
 80029fc:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 80029fe:	e005      	b.n	8002a0c <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8002a00:	2300      	movs	r3, #0
 8002a02:	61bb      	str	r3, [r7, #24]
    break;
 8002a04:	e002      	b.n	8002a0c <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8002a06:	4b07      	ldr	r3, [pc, #28]	; (8002a24 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002a08:	61bb      	str	r3, [r7, #24]
    break;
 8002a0a:	bf00      	nop
  }

  return sysclockfreq;
 8002a0c:	69bb      	ldr	r3, [r7, #24]
}
 8002a0e:	4618      	mov	r0, r3
 8002a10:	3724      	adds	r7, #36	; 0x24
 8002a12:	46bd      	mov	sp, r7
 8002a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a18:	4770      	bx	lr
 8002a1a:	bf00      	nop
 8002a1c:	58024400 	.word	0x58024400
 8002a20:	03d09000 	.word	0x03d09000
 8002a24:	003d0900 	.word	0x003d0900
 8002a28:	0112a880 	.word	0x0112a880
 8002a2c:	46000000 	.word	0x46000000
 8002a30:	4c742400 	.word	0x4c742400
 8002a34:	4a742400 	.word	0x4a742400
 8002a38:	4b895440 	.word	0x4b895440

08002a3c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002a3c:	b580      	push	{r7, lr}
 8002a3e:	b082      	sub	sp, #8
 8002a40:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8002a42:	f7ff fe81 	bl	8002748 <HAL_RCC_GetSysClockFreq>
 8002a46:	4602      	mov	r2, r0
 8002a48:	4b10      	ldr	r3, [pc, #64]	; (8002a8c <HAL_RCC_GetHCLKFreq+0x50>)
 8002a4a:	699b      	ldr	r3, [r3, #24]
 8002a4c:	0a1b      	lsrs	r3, r3, #8
 8002a4e:	f003 030f 	and.w	r3, r3, #15
 8002a52:	490f      	ldr	r1, [pc, #60]	; (8002a90 <HAL_RCC_GetHCLKFreq+0x54>)
 8002a54:	5ccb      	ldrb	r3, [r1, r3]
 8002a56:	f003 031f 	and.w	r3, r3, #31
 8002a5a:	fa22 f303 	lsr.w	r3, r2, r3
 8002a5e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002a60:	4b0a      	ldr	r3, [pc, #40]	; (8002a8c <HAL_RCC_GetHCLKFreq+0x50>)
 8002a62:	699b      	ldr	r3, [r3, #24]
 8002a64:	f003 030f 	and.w	r3, r3, #15
 8002a68:	4a09      	ldr	r2, [pc, #36]	; (8002a90 <HAL_RCC_GetHCLKFreq+0x54>)
 8002a6a:	5cd3      	ldrb	r3, [r2, r3]
 8002a6c:	f003 031f 	and.w	r3, r3, #31
 8002a70:	687a      	ldr	r2, [r7, #4]
 8002a72:	fa22 f303 	lsr.w	r3, r2, r3
 8002a76:	4a07      	ldr	r2, [pc, #28]	; (8002a94 <HAL_RCC_GetHCLKFreq+0x58>)
 8002a78:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002a7a:	4a07      	ldr	r2, [pc, #28]	; (8002a98 <HAL_RCC_GetHCLKFreq+0x5c>)
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8002a80:	4b04      	ldr	r3, [pc, #16]	; (8002a94 <HAL_RCC_GetHCLKFreq+0x58>)
 8002a82:	681b      	ldr	r3, [r3, #0]
}
 8002a84:	4618      	mov	r0, r3
 8002a86:	3708      	adds	r7, #8
 8002a88:	46bd      	mov	sp, r7
 8002a8a:	bd80      	pop	{r7, pc}
 8002a8c:	58024400 	.word	0x58024400
 8002a90:	08007eb4 	.word	0x08007eb4
 8002a94:	24000004 	.word	0x24000004
 8002a98:	24000000 	.word	0x24000000

08002a9c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002a9c:	b580      	push	{r7, lr}
 8002a9e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8002aa0:	f7ff ffcc 	bl	8002a3c <HAL_RCC_GetHCLKFreq>
 8002aa4:	4602      	mov	r2, r0
 8002aa6:	4b06      	ldr	r3, [pc, #24]	; (8002ac0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002aa8:	69db      	ldr	r3, [r3, #28]
 8002aaa:	091b      	lsrs	r3, r3, #4
 8002aac:	f003 0307 	and.w	r3, r3, #7
 8002ab0:	4904      	ldr	r1, [pc, #16]	; (8002ac4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002ab2:	5ccb      	ldrb	r3, [r1, r3]
 8002ab4:	f003 031f 	and.w	r3, r3, #31
 8002ab8:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8002abc:	4618      	mov	r0, r3
 8002abe:	bd80      	pop	{r7, pc}
 8002ac0:	58024400 	.word	0x58024400
 8002ac4:	08007eb4 	.word	0x08007eb4

08002ac8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002ac8:	b580      	push	{r7, lr}
 8002aca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8002acc:	f7ff ffb6 	bl	8002a3c <HAL_RCC_GetHCLKFreq>
 8002ad0:	4602      	mov	r2, r0
 8002ad2:	4b06      	ldr	r3, [pc, #24]	; (8002aec <HAL_RCC_GetPCLK2Freq+0x24>)
 8002ad4:	69db      	ldr	r3, [r3, #28]
 8002ad6:	0a1b      	lsrs	r3, r3, #8
 8002ad8:	f003 0307 	and.w	r3, r3, #7
 8002adc:	4904      	ldr	r1, [pc, #16]	; (8002af0 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002ade:	5ccb      	ldrb	r3, [r1, r3]
 8002ae0:	f003 031f 	and.w	r3, r3, #31
 8002ae4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8002ae8:	4618      	mov	r0, r3
 8002aea:	bd80      	pop	{r7, pc}
 8002aec:	58024400 	.word	0x58024400
 8002af0:	08007eb4 	.word	0x08007eb4

08002af4 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002af4:	b580      	push	{r7, lr}
 8002af6:	b086      	sub	sp, #24
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002afc:	2300      	movs	r3, #0
 8002afe:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002b00:	2300      	movs	r3, #0
 8002b02:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d03f      	beq.n	8002b90 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002b14:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002b18:	d02a      	beq.n	8002b70 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8002b1a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002b1e:	d824      	bhi.n	8002b6a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002b20:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002b24:	d018      	beq.n	8002b58 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002b26:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002b2a:	d81e      	bhi.n	8002b6a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d003      	beq.n	8002b38 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002b30:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002b34:	d007      	beq.n	8002b46 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002b36:	e018      	b.n	8002b6a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002b38:	4ba3      	ldr	r3, [pc, #652]	; (8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002b3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b3c:	4aa2      	ldr	r2, [pc, #648]	; (8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002b3e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b42:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8002b44:	e015      	b.n	8002b72 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	3304      	adds	r3, #4
 8002b4a:	2102      	movs	r1, #2
 8002b4c:	4618      	mov	r0, r3
 8002b4e:	f001 fff9 	bl	8004b44 <RCCEx_PLL2_Config>
 8002b52:	4603      	mov	r3, r0
 8002b54:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8002b56:	e00c      	b.n	8002b72 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	3324      	adds	r3, #36	; 0x24
 8002b5c:	2102      	movs	r1, #2
 8002b5e:	4618      	mov	r0, r3
 8002b60:	f002 f8a2 	bl	8004ca8 <RCCEx_PLL3_Config>
 8002b64:	4603      	mov	r3, r0
 8002b66:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8002b68:	e003      	b.n	8002b72 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002b6a:	2301      	movs	r3, #1
 8002b6c:	75fb      	strb	r3, [r7, #23]
      break;
 8002b6e:	e000      	b.n	8002b72 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002b70:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002b72:	7dfb      	ldrb	r3, [r7, #23]
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d109      	bne.n	8002b8c <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8002b78:	4b93      	ldr	r3, [pc, #588]	; (8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002b7a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b7c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002b84:	4990      	ldr	r1, [pc, #576]	; (8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002b86:	4313      	orrs	r3, r2
 8002b88:	650b      	str	r3, [r1, #80]	; 0x50
 8002b8a:	e001      	b.n	8002b90 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002b8c:	7dfb      	ldrb	r3, [r7, #23]
 8002b8e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d03d      	beq.n	8002c18 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ba0:	2b04      	cmp	r3, #4
 8002ba2:	d826      	bhi.n	8002bf2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8002ba4:	a201      	add	r2, pc, #4	; (adr r2, 8002bac <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8002ba6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002baa:	bf00      	nop
 8002bac:	08002bc1 	.word	0x08002bc1
 8002bb0:	08002bcf 	.word	0x08002bcf
 8002bb4:	08002be1 	.word	0x08002be1
 8002bb8:	08002bf9 	.word	0x08002bf9
 8002bbc:	08002bf9 	.word	0x08002bf9
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002bc0:	4b81      	ldr	r3, [pc, #516]	; (8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002bc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bc4:	4a80      	ldr	r2, [pc, #512]	; (8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002bc6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002bca:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002bcc:	e015      	b.n	8002bfa <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	3304      	adds	r3, #4
 8002bd2:	2100      	movs	r1, #0
 8002bd4:	4618      	mov	r0, r3
 8002bd6:	f001 ffb5 	bl	8004b44 <RCCEx_PLL2_Config>
 8002bda:	4603      	mov	r3, r0
 8002bdc:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002bde:	e00c      	b.n	8002bfa <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	3324      	adds	r3, #36	; 0x24
 8002be4:	2100      	movs	r1, #0
 8002be6:	4618      	mov	r0, r3
 8002be8:	f002 f85e 	bl	8004ca8 <RCCEx_PLL3_Config>
 8002bec:	4603      	mov	r3, r0
 8002bee:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002bf0:	e003      	b.n	8002bfa <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002bf2:	2301      	movs	r3, #1
 8002bf4:	75fb      	strb	r3, [r7, #23]
      break;
 8002bf6:	e000      	b.n	8002bfa <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8002bf8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002bfa:	7dfb      	ldrb	r3, [r7, #23]
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d109      	bne.n	8002c14 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002c00:	4b71      	ldr	r3, [pc, #452]	; (8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002c02:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c04:	f023 0207 	bic.w	r2, r3, #7
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c0c:	496e      	ldr	r1, [pc, #440]	; (8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002c0e:	4313      	orrs	r3, r2
 8002c10:	650b      	str	r3, [r1, #80]	; 0x50
 8002c12:	e001      	b.n	8002c18 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c14:	7dfb      	ldrb	r3, [r7, #23]
 8002c16:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d042      	beq.n	8002caa <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c28:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002c2c:	d02b      	beq.n	8002c86 <HAL_RCCEx_PeriphCLKConfig+0x192>
 8002c2e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002c32:	d825      	bhi.n	8002c80 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8002c34:	2bc0      	cmp	r3, #192	; 0xc0
 8002c36:	d028      	beq.n	8002c8a <HAL_RCCEx_PeriphCLKConfig+0x196>
 8002c38:	2bc0      	cmp	r3, #192	; 0xc0
 8002c3a:	d821      	bhi.n	8002c80 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8002c3c:	2b80      	cmp	r3, #128	; 0x80
 8002c3e:	d016      	beq.n	8002c6e <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8002c40:	2b80      	cmp	r3, #128	; 0x80
 8002c42:	d81d      	bhi.n	8002c80 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d002      	beq.n	8002c4e <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8002c48:	2b40      	cmp	r3, #64	; 0x40
 8002c4a:	d007      	beq.n	8002c5c <HAL_RCCEx_PeriphCLKConfig+0x168>
 8002c4c:	e018      	b.n	8002c80 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002c4e:	4b5e      	ldr	r3, [pc, #376]	; (8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002c50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c52:	4a5d      	ldr	r2, [pc, #372]	; (8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002c54:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002c58:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8002c5a:	e017      	b.n	8002c8c <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	3304      	adds	r3, #4
 8002c60:	2100      	movs	r1, #0
 8002c62:	4618      	mov	r0, r3
 8002c64:	f001 ff6e 	bl	8004b44 <RCCEx_PLL2_Config>
 8002c68:	4603      	mov	r3, r0
 8002c6a:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8002c6c:	e00e      	b.n	8002c8c <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	3324      	adds	r3, #36	; 0x24
 8002c72:	2100      	movs	r1, #0
 8002c74:	4618      	mov	r0, r3
 8002c76:	f002 f817 	bl	8004ca8 <RCCEx_PLL3_Config>
 8002c7a:	4603      	mov	r3, r0
 8002c7c:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8002c7e:	e005      	b.n	8002c8c <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002c80:	2301      	movs	r3, #1
 8002c82:	75fb      	strb	r3, [r7, #23]
      break;
 8002c84:	e002      	b.n	8002c8c <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8002c86:	bf00      	nop
 8002c88:	e000      	b.n	8002c8c <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8002c8a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002c8c:	7dfb      	ldrb	r3, [r7, #23]
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d109      	bne.n	8002ca6 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8002c92:	4b4d      	ldr	r3, [pc, #308]	; (8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002c94:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c96:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c9e:	494a      	ldr	r1, [pc, #296]	; (8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002ca0:	4313      	orrs	r3, r2
 8002ca2:	650b      	str	r3, [r1, #80]	; 0x50
 8002ca4:	e001      	b.n	8002caa <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ca6:	7dfb      	ldrb	r3, [r7, #23]
 8002ca8:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d049      	beq.n	8002d4a <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8002cbc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002cc0:	d030      	beq.n	8002d24 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8002cc2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002cc6:	d82a      	bhi.n	8002d1e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8002cc8:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8002ccc:	d02c      	beq.n	8002d28 <HAL_RCCEx_PeriphCLKConfig+0x234>
 8002cce:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8002cd2:	d824      	bhi.n	8002d1e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8002cd4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002cd8:	d018      	beq.n	8002d0c <HAL_RCCEx_PeriphCLKConfig+0x218>
 8002cda:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002cde:	d81e      	bhi.n	8002d1e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d003      	beq.n	8002cec <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8002ce4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002ce8:	d007      	beq.n	8002cfa <HAL_RCCEx_PeriphCLKConfig+0x206>
 8002cea:	e018      	b.n	8002d1e <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002cec:	4b36      	ldr	r3, [pc, #216]	; (8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002cee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cf0:	4a35      	ldr	r2, [pc, #212]	; (8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002cf2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002cf6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002cf8:	e017      	b.n	8002d2a <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	3304      	adds	r3, #4
 8002cfe:	2100      	movs	r1, #0
 8002d00:	4618      	mov	r0, r3
 8002d02:	f001 ff1f 	bl	8004b44 <RCCEx_PLL2_Config>
 8002d06:	4603      	mov	r3, r0
 8002d08:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8002d0a:	e00e      	b.n	8002d2a <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	3324      	adds	r3, #36	; 0x24
 8002d10:	2100      	movs	r1, #0
 8002d12:	4618      	mov	r0, r3
 8002d14:	f001 ffc8 	bl	8004ca8 <RCCEx_PLL3_Config>
 8002d18:	4603      	mov	r3, r0
 8002d1a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002d1c:	e005      	b.n	8002d2a <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8002d1e:	2301      	movs	r3, #1
 8002d20:	75fb      	strb	r3, [r7, #23]
      break;
 8002d22:	e002      	b.n	8002d2a <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8002d24:	bf00      	nop
 8002d26:	e000      	b.n	8002d2a <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8002d28:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002d2a:	7dfb      	ldrb	r3, [r7, #23]
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d10a      	bne.n	8002d46 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8002d30:	4b25      	ldr	r3, [pc, #148]	; (8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002d32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d34:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8002d3e:	4922      	ldr	r1, [pc, #136]	; (8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002d40:	4313      	orrs	r3, r2
 8002d42:	658b      	str	r3, [r1, #88]	; 0x58
 8002d44:	e001      	b.n	8002d4a <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d46:	7dfb      	ldrb	r3, [r7, #23]
 8002d48:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d04b      	beq.n	8002dee <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8002d5c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002d60:	d030      	beq.n	8002dc4 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8002d62:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002d66:	d82a      	bhi.n	8002dbe <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8002d68:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002d6c:	d02e      	beq.n	8002dcc <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 8002d6e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002d72:	d824      	bhi.n	8002dbe <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8002d74:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002d78:	d018      	beq.n	8002dac <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8002d7a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002d7e:	d81e      	bhi.n	8002dbe <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d003      	beq.n	8002d8c <HAL_RCCEx_PeriphCLKConfig+0x298>
 8002d84:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002d88:	d007      	beq.n	8002d9a <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8002d8a:	e018      	b.n	8002dbe <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002d8c:	4b0e      	ldr	r3, [pc, #56]	; (8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002d8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d90:	4a0d      	ldr	r2, [pc, #52]	; (8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002d92:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002d96:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002d98:	e019      	b.n	8002dce <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	3304      	adds	r3, #4
 8002d9e:	2100      	movs	r1, #0
 8002da0:	4618      	mov	r0, r3
 8002da2:	f001 fecf 	bl	8004b44 <RCCEx_PLL2_Config>
 8002da6:	4603      	mov	r3, r0
 8002da8:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8002daa:	e010      	b.n	8002dce <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	3324      	adds	r3, #36	; 0x24
 8002db0:	2100      	movs	r1, #0
 8002db2:	4618      	mov	r0, r3
 8002db4:	f001 ff78 	bl	8004ca8 <RCCEx_PLL3_Config>
 8002db8:	4603      	mov	r3, r0
 8002dba:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002dbc:	e007      	b.n	8002dce <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8002dbe:	2301      	movs	r3, #1
 8002dc0:	75fb      	strb	r3, [r7, #23]
      break;
 8002dc2:	e004      	b.n	8002dce <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 8002dc4:	bf00      	nop
 8002dc6:	e002      	b.n	8002dce <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8002dc8:	58024400 	.word	0x58024400
      break;
 8002dcc:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002dce:	7dfb      	ldrb	r3, [r7, #23]
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d10a      	bne.n	8002dea <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8002dd4:	4b99      	ldr	r3, [pc, #612]	; (800303c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002dd6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002dd8:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8002de2:	4996      	ldr	r1, [pc, #600]	; (800303c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002de4:	4313      	orrs	r3, r2
 8002de6:	658b      	str	r3, [r1, #88]	; 0x58
 8002de8:	e001      	b.n	8002dee <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002dea:	7dfb      	ldrb	r3, [r7, #23]
 8002dec:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d032      	beq.n	8002e60 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002dfe:	2b30      	cmp	r3, #48	; 0x30
 8002e00:	d01c      	beq.n	8002e3c <HAL_RCCEx_PeriphCLKConfig+0x348>
 8002e02:	2b30      	cmp	r3, #48	; 0x30
 8002e04:	d817      	bhi.n	8002e36 <HAL_RCCEx_PeriphCLKConfig+0x342>
 8002e06:	2b20      	cmp	r3, #32
 8002e08:	d00c      	beq.n	8002e24 <HAL_RCCEx_PeriphCLKConfig+0x330>
 8002e0a:	2b20      	cmp	r3, #32
 8002e0c:	d813      	bhi.n	8002e36 <HAL_RCCEx_PeriphCLKConfig+0x342>
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d016      	beq.n	8002e40 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 8002e12:	2b10      	cmp	r3, #16
 8002e14:	d10f      	bne.n	8002e36 <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002e16:	4b89      	ldr	r3, [pc, #548]	; (800303c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002e18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e1a:	4a88      	ldr	r2, [pc, #544]	; (800303c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002e1c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002e20:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8002e22:	e00e      	b.n	8002e42 <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	3304      	adds	r3, #4
 8002e28:	2102      	movs	r1, #2
 8002e2a:	4618      	mov	r0, r3
 8002e2c:	f001 fe8a 	bl	8004b44 <RCCEx_PLL2_Config>
 8002e30:	4603      	mov	r3, r0
 8002e32:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8002e34:	e005      	b.n	8002e42 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8002e36:	2301      	movs	r3, #1
 8002e38:	75fb      	strb	r3, [r7, #23]
      break;
 8002e3a:	e002      	b.n	8002e42 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8002e3c:	bf00      	nop
 8002e3e:	e000      	b.n	8002e42 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8002e40:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002e42:	7dfb      	ldrb	r3, [r7, #23]
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d109      	bne.n	8002e5c <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8002e48:	4b7c      	ldr	r3, [pc, #496]	; (800303c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002e4a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e4c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e54:	4979      	ldr	r1, [pc, #484]	; (800303c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002e56:	4313      	orrs	r3, r2
 8002e58:	64cb      	str	r3, [r1, #76]	; 0x4c
 8002e5a:	e001      	b.n	8002e60 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e5c:	7dfb      	ldrb	r3, [r7, #23]
 8002e5e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d047      	beq.n	8002efc <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e70:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002e74:	d030      	beq.n	8002ed8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8002e76:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002e7a:	d82a      	bhi.n	8002ed2 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8002e7c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002e80:	d02c      	beq.n	8002edc <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8002e82:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002e86:	d824      	bhi.n	8002ed2 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8002e88:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002e8c:	d018      	beq.n	8002ec0 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 8002e8e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002e92:	d81e      	bhi.n	8002ed2 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d003      	beq.n	8002ea0 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 8002e98:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e9c:	d007      	beq.n	8002eae <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 8002e9e:	e018      	b.n	8002ed2 <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002ea0:	4b66      	ldr	r3, [pc, #408]	; (800303c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002ea2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ea4:	4a65      	ldr	r2, [pc, #404]	; (800303c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002ea6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002eaa:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8002eac:	e017      	b.n	8002ede <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	3304      	adds	r3, #4
 8002eb2:	2100      	movs	r1, #0
 8002eb4:	4618      	mov	r0, r3
 8002eb6:	f001 fe45 	bl	8004b44 <RCCEx_PLL2_Config>
 8002eba:	4603      	mov	r3, r0
 8002ebc:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8002ebe:	e00e      	b.n	8002ede <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	3324      	adds	r3, #36	; 0x24
 8002ec4:	2100      	movs	r1, #0
 8002ec6:	4618      	mov	r0, r3
 8002ec8:	f001 feee 	bl	8004ca8 <RCCEx_PLL3_Config>
 8002ecc:	4603      	mov	r3, r0
 8002ece:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8002ed0:	e005      	b.n	8002ede <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002ed2:	2301      	movs	r3, #1
 8002ed4:	75fb      	strb	r3, [r7, #23]
      break;
 8002ed6:	e002      	b.n	8002ede <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8002ed8:	bf00      	nop
 8002eda:	e000      	b.n	8002ede <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8002edc:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002ede:	7dfb      	ldrb	r3, [r7, #23]
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d109      	bne.n	8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8002ee4:	4b55      	ldr	r3, [pc, #340]	; (800303c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002ee6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ee8:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ef0:	4952      	ldr	r1, [pc, #328]	; (800303c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002ef2:	4313      	orrs	r3, r2
 8002ef4:	650b      	str	r3, [r1, #80]	; 0x50
 8002ef6:	e001      	b.n	8002efc <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ef8:	7dfb      	ldrb	r3, [r7, #23]
 8002efa:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d049      	beq.n	8002f9c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f0c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002f10:	d02e      	beq.n	8002f70 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8002f12:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002f16:	d828      	bhi.n	8002f6a <HAL_RCCEx_PeriphCLKConfig+0x476>
 8002f18:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002f1c:	d02a      	beq.n	8002f74 <HAL_RCCEx_PeriphCLKConfig+0x480>
 8002f1e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002f22:	d822      	bhi.n	8002f6a <HAL_RCCEx_PeriphCLKConfig+0x476>
 8002f24:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002f28:	d026      	beq.n	8002f78 <HAL_RCCEx_PeriphCLKConfig+0x484>
 8002f2a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002f2e:	d81c      	bhi.n	8002f6a <HAL_RCCEx_PeriphCLKConfig+0x476>
 8002f30:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002f34:	d010      	beq.n	8002f58 <HAL_RCCEx_PeriphCLKConfig+0x464>
 8002f36:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002f3a:	d816      	bhi.n	8002f6a <HAL_RCCEx_PeriphCLKConfig+0x476>
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d01d      	beq.n	8002f7c <HAL_RCCEx_PeriphCLKConfig+0x488>
 8002f40:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f44:	d111      	bne.n	8002f6a <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	3304      	adds	r3, #4
 8002f4a:	2101      	movs	r1, #1
 8002f4c:	4618      	mov	r0, r3
 8002f4e:	f001 fdf9 	bl	8004b44 <RCCEx_PLL2_Config>
 8002f52:	4603      	mov	r3, r0
 8002f54:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8002f56:	e012      	b.n	8002f7e <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	3324      	adds	r3, #36	; 0x24
 8002f5c:	2101      	movs	r1, #1
 8002f5e:	4618      	mov	r0, r3
 8002f60:	f001 fea2 	bl	8004ca8 <RCCEx_PLL3_Config>
 8002f64:	4603      	mov	r3, r0
 8002f66:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8002f68:	e009      	b.n	8002f7e <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002f6a:	2301      	movs	r3, #1
 8002f6c:	75fb      	strb	r3, [r7, #23]
      break;
 8002f6e:	e006      	b.n	8002f7e <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8002f70:	bf00      	nop
 8002f72:	e004      	b.n	8002f7e <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8002f74:	bf00      	nop
 8002f76:	e002      	b.n	8002f7e <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8002f78:	bf00      	nop
 8002f7a:	e000      	b.n	8002f7e <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8002f7c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002f7e:	7dfb      	ldrb	r3, [r7, #23]
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d109      	bne.n	8002f98 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8002f84:	4b2d      	ldr	r3, [pc, #180]	; (800303c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002f86:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f88:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f90:	492a      	ldr	r1, [pc, #168]	; (800303c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002f92:	4313      	orrs	r3, r2
 8002f94:	650b      	str	r3, [r1, #80]	; 0x50
 8002f96:	e001      	b.n	8002f9c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f98:	7dfb      	ldrb	r3, [r7, #23]
 8002f9a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d04d      	beq.n	8003044 <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8002fae:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002fb2:	d02e      	beq.n	8003012 <HAL_RCCEx_PeriphCLKConfig+0x51e>
 8002fb4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002fb8:	d828      	bhi.n	800300c <HAL_RCCEx_PeriphCLKConfig+0x518>
 8002fba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002fbe:	d02a      	beq.n	8003016 <HAL_RCCEx_PeriphCLKConfig+0x522>
 8002fc0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002fc4:	d822      	bhi.n	800300c <HAL_RCCEx_PeriphCLKConfig+0x518>
 8002fc6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002fca:	d026      	beq.n	800301a <HAL_RCCEx_PeriphCLKConfig+0x526>
 8002fcc:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002fd0:	d81c      	bhi.n	800300c <HAL_RCCEx_PeriphCLKConfig+0x518>
 8002fd2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002fd6:	d010      	beq.n	8002ffa <HAL_RCCEx_PeriphCLKConfig+0x506>
 8002fd8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002fdc:	d816      	bhi.n	800300c <HAL_RCCEx_PeriphCLKConfig+0x518>
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d01d      	beq.n	800301e <HAL_RCCEx_PeriphCLKConfig+0x52a>
 8002fe2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002fe6:	d111      	bne.n	800300c <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	3304      	adds	r3, #4
 8002fec:	2101      	movs	r1, #1
 8002fee:	4618      	mov	r0, r3
 8002ff0:	f001 fda8 	bl	8004b44 <RCCEx_PLL2_Config>
 8002ff4:	4603      	mov	r3, r0
 8002ff6:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8002ff8:	e012      	b.n	8003020 <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	3324      	adds	r3, #36	; 0x24
 8002ffe:	2101      	movs	r1, #1
 8003000:	4618      	mov	r0, r3
 8003002:	f001 fe51 	bl	8004ca8 <RCCEx_PLL3_Config>
 8003006:	4603      	mov	r3, r0
 8003008:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800300a:	e009      	b.n	8003020 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 800300c:	2301      	movs	r3, #1
 800300e:	75fb      	strb	r3, [r7, #23]
      break;
 8003010:	e006      	b.n	8003020 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8003012:	bf00      	nop
 8003014:	e004      	b.n	8003020 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8003016:	bf00      	nop
 8003018:	e002      	b.n	8003020 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 800301a:	bf00      	nop
 800301c:	e000      	b.n	8003020 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 800301e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003020:	7dfb      	ldrb	r3, [r7, #23]
 8003022:	2b00      	cmp	r3, #0
 8003024:	d10c      	bne.n	8003040 <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8003026:	4b05      	ldr	r3, [pc, #20]	; (800303c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003028:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800302a:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003034:	4901      	ldr	r1, [pc, #4]	; (800303c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003036:	4313      	orrs	r3, r2
 8003038:	658b      	str	r3, [r1, #88]	; 0x58
 800303a:	e003      	b.n	8003044 <HAL_RCCEx_PeriphCLKConfig+0x550>
 800303c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003040:	7dfb      	ldrb	r3, [r7, #23]
 8003042:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800304c:	2b00      	cmp	r3, #0
 800304e:	d02f      	beq.n	80030b0 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003054:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003058:	d00e      	beq.n	8003078 <HAL_RCCEx_PeriphCLKConfig+0x584>
 800305a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800305e:	d814      	bhi.n	800308a <HAL_RCCEx_PeriphCLKConfig+0x596>
 8003060:	2b00      	cmp	r3, #0
 8003062:	d015      	beq.n	8003090 <HAL_RCCEx_PeriphCLKConfig+0x59c>
 8003064:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003068:	d10f      	bne.n	800308a <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800306a:	4baf      	ldr	r3, [pc, #700]	; (8003328 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800306c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800306e:	4aae      	ldr	r2, [pc, #696]	; (8003328 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003070:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003074:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8003076:	e00c      	b.n	8003092 <HAL_RCCEx_PeriphCLKConfig+0x59e>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	3304      	adds	r3, #4
 800307c:	2101      	movs	r1, #1
 800307e:	4618      	mov	r0, r3
 8003080:	f001 fd60 	bl	8004b44 <RCCEx_PLL2_Config>
 8003084:	4603      	mov	r3, r0
 8003086:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8003088:	e003      	b.n	8003092 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800308a:	2301      	movs	r3, #1
 800308c:	75fb      	strb	r3, [r7, #23]
      break;
 800308e:	e000      	b.n	8003092 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      break;
 8003090:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003092:	7dfb      	ldrb	r3, [r7, #23]
 8003094:	2b00      	cmp	r3, #0
 8003096:	d109      	bne.n	80030ac <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003098:	4ba3      	ldr	r3, [pc, #652]	; (8003328 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800309a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800309c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80030a4:	49a0      	ldr	r1, [pc, #640]	; (8003328 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80030a6:	4313      	orrs	r3, r2
 80030a8:	650b      	str	r3, [r1, #80]	; 0x50
 80030aa:	e001      	b.n	80030b0 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80030ac:	7dfb      	ldrb	r3, [r7, #23]
 80030ae:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d032      	beq.n	8003122 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030c0:	2b03      	cmp	r3, #3
 80030c2:	d81b      	bhi.n	80030fc <HAL_RCCEx_PeriphCLKConfig+0x608>
 80030c4:	a201      	add	r2, pc, #4	; (adr r2, 80030cc <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
 80030c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030ca:	bf00      	nop
 80030cc:	08003103 	.word	0x08003103
 80030d0:	080030dd 	.word	0x080030dd
 80030d4:	080030eb 	.word	0x080030eb
 80030d8:	08003103 	.word	0x08003103
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80030dc:	4b92      	ldr	r3, [pc, #584]	; (8003328 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80030de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030e0:	4a91      	ldr	r2, [pc, #580]	; (8003328 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80030e2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80030e6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 80030e8:	e00c      	b.n	8003104 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	3304      	adds	r3, #4
 80030ee:	2102      	movs	r1, #2
 80030f0:	4618      	mov	r0, r3
 80030f2:	f001 fd27 	bl	8004b44 <RCCEx_PLL2_Config>
 80030f6:	4603      	mov	r3, r0
 80030f8:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 80030fa:	e003      	b.n	8003104 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80030fc:	2301      	movs	r3, #1
 80030fe:	75fb      	strb	r3, [r7, #23]
      break;
 8003100:	e000      	b.n	8003104 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8003102:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003104:	7dfb      	ldrb	r3, [r7, #23]
 8003106:	2b00      	cmp	r3, #0
 8003108:	d109      	bne.n	800311e <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800310a:	4b87      	ldr	r3, [pc, #540]	; (8003328 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800310c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800310e:	f023 0203 	bic.w	r2, r3, #3
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003116:	4984      	ldr	r1, [pc, #528]	; (8003328 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003118:	4313      	orrs	r3, r2
 800311a:	64cb      	str	r3, [r1, #76]	; 0x4c
 800311c:	e001      	b.n	8003122 <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800311e:	7dfb      	ldrb	r3, [r7, #23]
 8003120:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800312a:	2b00      	cmp	r3, #0
 800312c:	f000 8086 	beq.w	800323c <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003130:	4b7e      	ldr	r3, [pc, #504]	; (800332c <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	4a7d      	ldr	r2, [pc, #500]	; (800332c <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8003136:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800313a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800313c:	f7fe f824 	bl	8001188 <HAL_GetTick>
 8003140:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003142:	e009      	b.n	8003158 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003144:	f7fe f820 	bl	8001188 <HAL_GetTick>
 8003148:	4602      	mov	r2, r0
 800314a:	693b      	ldr	r3, [r7, #16]
 800314c:	1ad3      	subs	r3, r2, r3
 800314e:	2b64      	cmp	r3, #100	; 0x64
 8003150:	d902      	bls.n	8003158 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8003152:	2303      	movs	r3, #3
 8003154:	75fb      	strb	r3, [r7, #23]
        break;
 8003156:	e005      	b.n	8003164 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003158:	4b74      	ldr	r3, [pc, #464]	; (800332c <HAL_RCCEx_PeriphCLKConfig+0x838>)
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003160:	2b00      	cmp	r3, #0
 8003162:	d0ef      	beq.n	8003144 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8003164:	7dfb      	ldrb	r3, [r7, #23]
 8003166:	2b00      	cmp	r3, #0
 8003168:	d166      	bne.n	8003238 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800316a:	4b6f      	ldr	r3, [pc, #444]	; (8003328 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800316c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003174:	4053      	eors	r3, r2
 8003176:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800317a:	2b00      	cmp	r3, #0
 800317c:	d013      	beq.n	80031a6 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800317e:	4b6a      	ldr	r3, [pc, #424]	; (8003328 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003180:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003182:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003186:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003188:	4b67      	ldr	r3, [pc, #412]	; (8003328 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800318a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800318c:	4a66      	ldr	r2, [pc, #408]	; (8003328 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800318e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003192:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003194:	4b64      	ldr	r3, [pc, #400]	; (8003328 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003196:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003198:	4a63      	ldr	r2, [pc, #396]	; (8003328 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800319a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800319e:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80031a0:	4a61      	ldr	r2, [pc, #388]	; (8003328 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80031ac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80031b0:	d115      	bne.n	80031de <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031b2:	f7fd ffe9 	bl	8001188 <HAL_GetTick>
 80031b6:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80031b8:	e00b      	b.n	80031d2 <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80031ba:	f7fd ffe5 	bl	8001188 <HAL_GetTick>
 80031be:	4602      	mov	r2, r0
 80031c0:	693b      	ldr	r3, [r7, #16]
 80031c2:	1ad3      	subs	r3, r2, r3
 80031c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80031c8:	4293      	cmp	r3, r2
 80031ca:	d902      	bls.n	80031d2 <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 80031cc:	2303      	movs	r3, #3
 80031ce:	75fb      	strb	r3, [r7, #23]
            break;
 80031d0:	e005      	b.n	80031de <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80031d2:	4b55      	ldr	r3, [pc, #340]	; (8003328 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80031d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031d6:	f003 0302 	and.w	r3, r3, #2
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d0ed      	beq.n	80031ba <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 80031de:	7dfb      	ldrb	r3, [r7, #23]
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d126      	bne.n	8003232 <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80031ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80031ee:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80031f2:	d10d      	bne.n	8003210 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 80031f4:	4b4c      	ldr	r3, [pc, #304]	; (8003328 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80031f6:	691b      	ldr	r3, [r3, #16]
 80031f8:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003202:	0919      	lsrs	r1, r3, #4
 8003204:	4b4a      	ldr	r3, [pc, #296]	; (8003330 <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 8003206:	400b      	ands	r3, r1
 8003208:	4947      	ldr	r1, [pc, #284]	; (8003328 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800320a:	4313      	orrs	r3, r2
 800320c:	610b      	str	r3, [r1, #16]
 800320e:	e005      	b.n	800321c <HAL_RCCEx_PeriphCLKConfig+0x728>
 8003210:	4b45      	ldr	r3, [pc, #276]	; (8003328 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003212:	691b      	ldr	r3, [r3, #16]
 8003214:	4a44      	ldr	r2, [pc, #272]	; (8003328 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003216:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800321a:	6113      	str	r3, [r2, #16]
 800321c:	4b42      	ldr	r3, [pc, #264]	; (8003328 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800321e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003226:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800322a:	493f      	ldr	r1, [pc, #252]	; (8003328 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800322c:	4313      	orrs	r3, r2
 800322e:	670b      	str	r3, [r1, #112]	; 0x70
 8003230:	e004      	b.n	800323c <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003232:	7dfb      	ldrb	r3, [r7, #23]
 8003234:	75bb      	strb	r3, [r7, #22]
 8003236:	e001      	b.n	800323c <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003238:	7dfb      	ldrb	r3, [r7, #23]
 800323a:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	f003 0301 	and.w	r3, r3, #1
 8003244:	2b00      	cmp	r3, #0
 8003246:	f000 8085 	beq.w	8003354 <HAL_RCCEx_PeriphCLKConfig+0x860>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800324e:	2b28      	cmp	r3, #40	; 0x28
 8003250:	d866      	bhi.n	8003320 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8003252:	a201      	add	r2, pc, #4	; (adr r2, 8003258 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8003254:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003258:	08003335 	.word	0x08003335
 800325c:	08003321 	.word	0x08003321
 8003260:	08003321 	.word	0x08003321
 8003264:	08003321 	.word	0x08003321
 8003268:	08003321 	.word	0x08003321
 800326c:	08003321 	.word	0x08003321
 8003270:	08003321 	.word	0x08003321
 8003274:	08003321 	.word	0x08003321
 8003278:	080032fd 	.word	0x080032fd
 800327c:	08003321 	.word	0x08003321
 8003280:	08003321 	.word	0x08003321
 8003284:	08003321 	.word	0x08003321
 8003288:	08003321 	.word	0x08003321
 800328c:	08003321 	.word	0x08003321
 8003290:	08003321 	.word	0x08003321
 8003294:	08003321 	.word	0x08003321
 8003298:	0800330f 	.word	0x0800330f
 800329c:	08003321 	.word	0x08003321
 80032a0:	08003321 	.word	0x08003321
 80032a4:	08003321 	.word	0x08003321
 80032a8:	08003321 	.word	0x08003321
 80032ac:	08003321 	.word	0x08003321
 80032b0:	08003321 	.word	0x08003321
 80032b4:	08003321 	.word	0x08003321
 80032b8:	08003335 	.word	0x08003335
 80032bc:	08003321 	.word	0x08003321
 80032c0:	08003321 	.word	0x08003321
 80032c4:	08003321 	.word	0x08003321
 80032c8:	08003321 	.word	0x08003321
 80032cc:	08003321 	.word	0x08003321
 80032d0:	08003321 	.word	0x08003321
 80032d4:	08003321 	.word	0x08003321
 80032d8:	08003335 	.word	0x08003335
 80032dc:	08003321 	.word	0x08003321
 80032e0:	08003321 	.word	0x08003321
 80032e4:	08003321 	.word	0x08003321
 80032e8:	08003321 	.word	0x08003321
 80032ec:	08003321 	.word	0x08003321
 80032f0:	08003321 	.word	0x08003321
 80032f4:	08003321 	.word	0x08003321
 80032f8:	08003335 	.word	0x08003335
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	3304      	adds	r3, #4
 8003300:	2101      	movs	r1, #1
 8003302:	4618      	mov	r0, r3
 8003304:	f001 fc1e 	bl	8004b44 <RCCEx_PLL2_Config>
 8003308:	4603      	mov	r3, r0
 800330a:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800330c:	e013      	b.n	8003336 <HAL_RCCEx_PeriphCLKConfig+0x842>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	3324      	adds	r3, #36	; 0x24
 8003312:	2101      	movs	r1, #1
 8003314:	4618      	mov	r0, r3
 8003316:	f001 fcc7 	bl	8004ca8 <RCCEx_PLL3_Config>
 800331a:	4603      	mov	r3, r0
 800331c:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800331e:	e00a      	b.n	8003336 <HAL_RCCEx_PeriphCLKConfig+0x842>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003320:	2301      	movs	r3, #1
 8003322:	75fb      	strb	r3, [r7, #23]
      break;
 8003324:	e007      	b.n	8003336 <HAL_RCCEx_PeriphCLKConfig+0x842>
 8003326:	bf00      	nop
 8003328:	58024400 	.word	0x58024400
 800332c:	58024800 	.word	0x58024800
 8003330:	00ffffcf 	.word	0x00ffffcf
      break;
 8003334:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003336:	7dfb      	ldrb	r3, [r7, #23]
 8003338:	2b00      	cmp	r3, #0
 800333a:	d109      	bne.n	8003350 <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800333c:	4b96      	ldr	r3, [pc, #600]	; (8003598 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800333e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003340:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003348:	4993      	ldr	r1, [pc, #588]	; (8003598 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800334a:	4313      	orrs	r3, r2
 800334c:	654b      	str	r3, [r1, #84]	; 0x54
 800334e:	e001      	b.n	8003354 <HAL_RCCEx_PeriphCLKConfig+0x860>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003350:	7dfb      	ldrb	r3, [r7, #23]
 8003352:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f003 0302 	and.w	r3, r3, #2
 800335c:	2b00      	cmp	r3, #0
 800335e:	d038      	beq.n	80033d2 <HAL_RCCEx_PeriphCLKConfig+0x8de>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003364:	2b05      	cmp	r3, #5
 8003366:	d821      	bhi.n	80033ac <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 8003368:	a201      	add	r2, pc, #4	; (adr r2, 8003370 <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 800336a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800336e:	bf00      	nop
 8003370:	080033b3 	.word	0x080033b3
 8003374:	08003389 	.word	0x08003389
 8003378:	0800339b 	.word	0x0800339b
 800337c:	080033b3 	.word	0x080033b3
 8003380:	080033b3 	.word	0x080033b3
 8003384:	080033b3 	.word	0x080033b3
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	3304      	adds	r3, #4
 800338c:	2101      	movs	r1, #1
 800338e:	4618      	mov	r0, r3
 8003390:	f001 fbd8 	bl	8004b44 <RCCEx_PLL2_Config>
 8003394:	4603      	mov	r3, r0
 8003396:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8003398:	e00c      	b.n	80033b4 <HAL_RCCEx_PeriphCLKConfig+0x8c0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	3324      	adds	r3, #36	; 0x24
 800339e:	2101      	movs	r1, #1
 80033a0:	4618      	mov	r0, r3
 80033a2:	f001 fc81 	bl	8004ca8 <RCCEx_PLL3_Config>
 80033a6:	4603      	mov	r3, r0
 80033a8:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80033aa:	e003      	b.n	80033b4 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80033ac:	2301      	movs	r3, #1
 80033ae:	75fb      	strb	r3, [r7, #23]
      break;
 80033b0:	e000      	b.n	80033b4 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      break;
 80033b2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80033b4:	7dfb      	ldrb	r3, [r7, #23]
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d109      	bne.n	80033ce <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80033ba:	4b77      	ldr	r3, [pc, #476]	; (8003598 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80033bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033be:	f023 0207 	bic.w	r2, r3, #7
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80033c6:	4974      	ldr	r1, [pc, #464]	; (8003598 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80033c8:	4313      	orrs	r3, r2
 80033ca:	654b      	str	r3, [r1, #84]	; 0x54
 80033cc:	e001      	b.n	80033d2 <HAL_RCCEx_PeriphCLKConfig+0x8de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80033ce:	7dfb      	ldrb	r3, [r7, #23]
 80033d0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	f003 0304 	and.w	r3, r3, #4
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d03a      	beq.n	8003454 <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033e4:	2b05      	cmp	r3, #5
 80033e6:	d821      	bhi.n	800342c <HAL_RCCEx_PeriphCLKConfig+0x938>
 80033e8:	a201      	add	r2, pc, #4	; (adr r2, 80033f0 <HAL_RCCEx_PeriphCLKConfig+0x8fc>)
 80033ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033ee:	bf00      	nop
 80033f0:	08003433 	.word	0x08003433
 80033f4:	08003409 	.word	0x08003409
 80033f8:	0800341b 	.word	0x0800341b
 80033fc:	08003433 	.word	0x08003433
 8003400:	08003433 	.word	0x08003433
 8003404:	08003433 	.word	0x08003433
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	3304      	adds	r3, #4
 800340c:	2101      	movs	r1, #1
 800340e:	4618      	mov	r0, r3
 8003410:	f001 fb98 	bl	8004b44 <RCCEx_PLL2_Config>
 8003414:	4603      	mov	r3, r0
 8003416:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8003418:	e00c      	b.n	8003434 <HAL_RCCEx_PeriphCLKConfig+0x940>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	3324      	adds	r3, #36	; 0x24
 800341e:	2101      	movs	r1, #1
 8003420:	4618      	mov	r0, r3
 8003422:	f001 fc41 	bl	8004ca8 <RCCEx_PLL3_Config>
 8003426:	4603      	mov	r3, r0
 8003428:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800342a:	e003      	b.n	8003434 <HAL_RCCEx_PeriphCLKConfig+0x940>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800342c:	2301      	movs	r3, #1
 800342e:	75fb      	strb	r3, [r7, #23]
      break;
 8003430:	e000      	b.n	8003434 <HAL_RCCEx_PeriphCLKConfig+0x940>
      break;
 8003432:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003434:	7dfb      	ldrb	r3, [r7, #23]
 8003436:	2b00      	cmp	r3, #0
 8003438:	d10a      	bne.n	8003450 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800343a:	4b57      	ldr	r3, [pc, #348]	; (8003598 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800343c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800343e:	f023 0207 	bic.w	r2, r3, #7
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003448:	4953      	ldr	r1, [pc, #332]	; (8003598 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800344a:	4313      	orrs	r3, r2
 800344c:	658b      	str	r3, [r1, #88]	; 0x58
 800344e:	e001      	b.n	8003454 <HAL_RCCEx_PeriphCLKConfig+0x960>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003450:	7dfb      	ldrb	r3, [r7, #23]
 8003452:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	f003 0320 	and.w	r3, r3, #32
 800345c:	2b00      	cmp	r3, #0
 800345e:	d04b      	beq.n	80034f8 <HAL_RCCEx_PeriphCLKConfig+0xa04>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003466:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800346a:	d02e      	beq.n	80034ca <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 800346c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003470:	d828      	bhi.n	80034c4 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8003472:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003476:	d02a      	beq.n	80034ce <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8003478:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800347c:	d822      	bhi.n	80034c4 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 800347e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003482:	d026      	beq.n	80034d2 <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8003484:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003488:	d81c      	bhi.n	80034c4 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 800348a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800348e:	d010      	beq.n	80034b2 <HAL_RCCEx_PeriphCLKConfig+0x9be>
 8003490:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003494:	d816      	bhi.n	80034c4 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8003496:	2b00      	cmp	r3, #0
 8003498:	d01d      	beq.n	80034d6 <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 800349a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800349e:	d111      	bne.n	80034c4 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	3304      	adds	r3, #4
 80034a4:	2100      	movs	r1, #0
 80034a6:	4618      	mov	r0, r3
 80034a8:	f001 fb4c 	bl	8004b44 <RCCEx_PLL2_Config>
 80034ac:	4603      	mov	r3, r0
 80034ae:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80034b0:	e012      	b.n	80034d8 <HAL_RCCEx_PeriphCLKConfig+0x9e4>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	3324      	adds	r3, #36	; 0x24
 80034b6:	2102      	movs	r1, #2
 80034b8:	4618      	mov	r0, r3
 80034ba:	f001 fbf5 	bl	8004ca8 <RCCEx_PLL3_Config>
 80034be:	4603      	mov	r3, r0
 80034c0:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80034c2:	e009      	b.n	80034d8 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80034c4:	2301      	movs	r3, #1
 80034c6:	75fb      	strb	r3, [r7, #23]
      break;
 80034c8:	e006      	b.n	80034d8 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 80034ca:	bf00      	nop
 80034cc:	e004      	b.n	80034d8 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 80034ce:	bf00      	nop
 80034d0:	e002      	b.n	80034d8 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 80034d2:	bf00      	nop
 80034d4:	e000      	b.n	80034d8 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 80034d6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80034d8:	7dfb      	ldrb	r3, [r7, #23]
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d10a      	bne.n	80034f4 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80034de:	4b2e      	ldr	r3, [pc, #184]	; (8003598 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80034e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034e2:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80034ec:	492a      	ldr	r1, [pc, #168]	; (8003598 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80034ee:	4313      	orrs	r3, r2
 80034f0:	654b      	str	r3, [r1, #84]	; 0x54
 80034f2:	e001      	b.n	80034f8 <HAL_RCCEx_PeriphCLKConfig+0xa04>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80034f4:	7dfb      	ldrb	r3, [r7, #23]
 80034f6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003500:	2b00      	cmp	r3, #0
 8003502:	d04d      	beq.n	80035a0 <HAL_RCCEx_PeriphCLKConfig+0xaac>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800350a:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800350e:	d02e      	beq.n	800356e <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8003510:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003514:	d828      	bhi.n	8003568 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8003516:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800351a:	d02a      	beq.n	8003572 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 800351c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003520:	d822      	bhi.n	8003568 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8003522:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003526:	d026      	beq.n	8003576 <HAL_RCCEx_PeriphCLKConfig+0xa82>
 8003528:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800352c:	d81c      	bhi.n	8003568 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800352e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003532:	d010      	beq.n	8003556 <HAL_RCCEx_PeriphCLKConfig+0xa62>
 8003534:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003538:	d816      	bhi.n	8003568 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800353a:	2b00      	cmp	r3, #0
 800353c:	d01d      	beq.n	800357a <HAL_RCCEx_PeriphCLKConfig+0xa86>
 800353e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003542:	d111      	bne.n	8003568 <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	3304      	adds	r3, #4
 8003548:	2100      	movs	r1, #0
 800354a:	4618      	mov	r0, r3
 800354c:	f001 fafa 	bl	8004b44 <RCCEx_PLL2_Config>
 8003550:	4603      	mov	r3, r0
 8003552:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8003554:	e012      	b.n	800357c <HAL_RCCEx_PeriphCLKConfig+0xa88>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	3324      	adds	r3, #36	; 0x24
 800355a:	2102      	movs	r1, #2
 800355c:	4618      	mov	r0, r3
 800355e:	f001 fba3 	bl	8004ca8 <RCCEx_PLL3_Config>
 8003562:	4603      	mov	r3, r0
 8003564:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8003566:	e009      	b.n	800357c <HAL_RCCEx_PeriphCLKConfig+0xa88>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003568:	2301      	movs	r3, #1
 800356a:	75fb      	strb	r3, [r7, #23]
      break;
 800356c:	e006      	b.n	800357c <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 800356e:	bf00      	nop
 8003570:	e004      	b.n	800357c <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8003572:	bf00      	nop
 8003574:	e002      	b.n	800357c <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8003576:	bf00      	nop
 8003578:	e000      	b.n	800357c <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 800357a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800357c:	7dfb      	ldrb	r3, [r7, #23]
 800357e:	2b00      	cmp	r3, #0
 8003580:	d10c      	bne.n	800359c <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003582:	4b05      	ldr	r3, [pc, #20]	; (8003598 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003584:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003586:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003590:	4901      	ldr	r1, [pc, #4]	; (8003598 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003592:	4313      	orrs	r3, r2
 8003594:	658b      	str	r3, [r1, #88]	; 0x58
 8003596:	e003      	b.n	80035a0 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 8003598:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800359c:	7dfb      	ldrb	r3, [r7, #23]
 800359e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d04b      	beq.n	8003644 <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80035b2:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80035b6:	d02e      	beq.n	8003616 <HAL_RCCEx_PeriphCLKConfig+0xb22>
 80035b8:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80035bc:	d828      	bhi.n	8003610 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 80035be:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80035c2:	d02a      	beq.n	800361a <HAL_RCCEx_PeriphCLKConfig+0xb26>
 80035c4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80035c8:	d822      	bhi.n	8003610 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 80035ca:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80035ce:	d026      	beq.n	800361e <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 80035d0:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80035d4:	d81c      	bhi.n	8003610 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 80035d6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80035da:	d010      	beq.n	80035fe <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 80035dc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80035e0:	d816      	bhi.n	8003610 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d01d      	beq.n	8003622 <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 80035e6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80035ea:	d111      	bne.n	8003610 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	3304      	adds	r3, #4
 80035f0:	2100      	movs	r1, #0
 80035f2:	4618      	mov	r0, r3
 80035f4:	f001 faa6 	bl	8004b44 <RCCEx_PLL2_Config>
 80035f8:	4603      	mov	r3, r0
 80035fa:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80035fc:	e012      	b.n	8003624 <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	3324      	adds	r3, #36	; 0x24
 8003602:	2102      	movs	r1, #2
 8003604:	4618      	mov	r0, r3
 8003606:	f001 fb4f 	bl	8004ca8 <RCCEx_PLL3_Config>
 800360a:	4603      	mov	r3, r0
 800360c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800360e:	e009      	b.n	8003624 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003610:	2301      	movs	r3, #1
 8003612:	75fb      	strb	r3, [r7, #23]
      break;
 8003614:	e006      	b.n	8003624 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8003616:	bf00      	nop
 8003618:	e004      	b.n	8003624 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800361a:	bf00      	nop
 800361c:	e002      	b.n	8003624 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800361e:	bf00      	nop
 8003620:	e000      	b.n	8003624 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8003622:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003624:	7dfb      	ldrb	r3, [r7, #23]
 8003626:	2b00      	cmp	r3, #0
 8003628:	d10a      	bne.n	8003640 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800362a:	4b9d      	ldr	r3, [pc, #628]	; (80038a0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800362c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800362e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003638:	4999      	ldr	r1, [pc, #612]	; (80038a0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800363a:	4313      	orrs	r3, r2
 800363c:	658b      	str	r3, [r1, #88]	; 0x58
 800363e:	e001      	b.n	8003644 <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003640:	7dfb      	ldrb	r3, [r7, #23]
 8003642:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f003 0308 	and.w	r3, r3, #8
 800364c:	2b00      	cmp	r3, #0
 800364e:	d01a      	beq.n	8003686 <HAL_RCCEx_PeriphCLKConfig+0xb92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003656:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800365a:	d10a      	bne.n	8003672 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	3324      	adds	r3, #36	; 0x24
 8003660:	2102      	movs	r1, #2
 8003662:	4618      	mov	r0, r3
 8003664:	f001 fb20 	bl	8004ca8 <RCCEx_PLL3_Config>
 8003668:	4603      	mov	r3, r0
 800366a:	2b00      	cmp	r3, #0
 800366c:	d001      	beq.n	8003672 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        {
          status = HAL_ERROR;
 800366e:	2301      	movs	r3, #1
 8003670:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8003672:	4b8b      	ldr	r3, [pc, #556]	; (80038a0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003674:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003676:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003680:	4987      	ldr	r1, [pc, #540]	; (80038a0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003682:	4313      	orrs	r3, r2
 8003684:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f003 0310 	and.w	r3, r3, #16
 800368e:	2b00      	cmp	r3, #0
 8003690:	d01a      	beq.n	80036c8 <HAL_RCCEx_PeriphCLKConfig+0xbd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003698:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800369c:	d10a      	bne.n	80036b4 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	3324      	adds	r3, #36	; 0x24
 80036a2:	2102      	movs	r1, #2
 80036a4:	4618      	mov	r0, r3
 80036a6:	f001 faff 	bl	8004ca8 <RCCEx_PLL3_Config>
 80036aa:	4603      	mov	r3, r0
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d001      	beq.n	80036b4 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      {
        status = HAL_ERROR;
 80036b0:	2301      	movs	r3, #1
 80036b2:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80036b4:	4b7a      	ldr	r3, [pc, #488]	; (80038a0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80036b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036b8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80036c2:	4977      	ldr	r1, [pc, #476]	; (80038a0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80036c4:	4313      	orrs	r3, r2
 80036c6:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d034      	beq.n	800373e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80036da:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80036de:	d01d      	beq.n	800371c <HAL_RCCEx_PeriphCLKConfig+0xc28>
 80036e0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80036e4:	d817      	bhi.n	8003716 <HAL_RCCEx_PeriphCLKConfig+0xc22>
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d003      	beq.n	80036f2 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 80036ea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80036ee:	d009      	beq.n	8003704 <HAL_RCCEx_PeriphCLKConfig+0xc10>
 80036f0:	e011      	b.n	8003716 <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	3304      	adds	r3, #4
 80036f6:	2100      	movs	r1, #0
 80036f8:	4618      	mov	r0, r3
 80036fa:	f001 fa23 	bl	8004b44 <RCCEx_PLL2_Config>
 80036fe:	4603      	mov	r3, r0
 8003700:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8003702:	e00c      	b.n	800371e <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	3324      	adds	r3, #36	; 0x24
 8003708:	2102      	movs	r1, #2
 800370a:	4618      	mov	r0, r3
 800370c:	f001 facc 	bl	8004ca8 <RCCEx_PLL3_Config>
 8003710:	4603      	mov	r3, r0
 8003712:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8003714:	e003      	b.n	800371e <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003716:	2301      	movs	r3, #1
 8003718:	75fb      	strb	r3, [r7, #23]
      break;
 800371a:	e000      	b.n	800371e <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 800371c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800371e:	7dfb      	ldrb	r3, [r7, #23]
 8003720:	2b00      	cmp	r3, #0
 8003722:	d10a      	bne.n	800373a <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003724:	4b5e      	ldr	r3, [pc, #376]	; (80038a0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003726:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003728:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003732:	495b      	ldr	r1, [pc, #364]	; (80038a0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003734:	4313      	orrs	r3, r2
 8003736:	658b      	str	r3, [r1, #88]	; 0x58
 8003738:	e001      	b.n	800373e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800373a:	7dfb      	ldrb	r3, [r7, #23]
 800373c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003746:	2b00      	cmp	r3, #0
 8003748:	d033      	beq.n	80037b2 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {

    switch(PeriphClkInit->UsbClockSelection)
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003750:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003754:	d01c      	beq.n	8003790 <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 8003756:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800375a:	d816      	bhi.n	800378a <HAL_RCCEx_PeriphCLKConfig+0xc96>
 800375c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003760:	d003      	beq.n	800376a <HAL_RCCEx_PeriphCLKConfig+0xc76>
 8003762:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003766:	d007      	beq.n	8003778 <HAL_RCCEx_PeriphCLKConfig+0xc84>
 8003768:	e00f      	b.n	800378a <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800376a:	4b4d      	ldr	r3, [pc, #308]	; (80038a0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800376c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800376e:	4a4c      	ldr	r2, [pc, #304]	; (80038a0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003770:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003774:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8003776:	e00c      	b.n	8003792 <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	3324      	adds	r3, #36	; 0x24
 800377c:	2101      	movs	r1, #1
 800377e:	4618      	mov	r0, r3
 8003780:	f001 fa92 	bl	8004ca8 <RCCEx_PLL3_Config>
 8003784:	4603      	mov	r3, r0
 8003786:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8003788:	e003      	b.n	8003792 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800378a:	2301      	movs	r3, #1
 800378c:	75fb      	strb	r3, [r7, #23]
      break;
 800378e:	e000      	b.n	8003792 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      break;
 8003790:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003792:	7dfb      	ldrb	r3, [r7, #23]
 8003794:	2b00      	cmp	r3, #0
 8003796:	d10a      	bne.n	80037ae <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003798:	4b41      	ldr	r3, [pc, #260]	; (80038a0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800379a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800379c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80037a6:	493e      	ldr	r1, [pc, #248]	; (80038a0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80037a8:	4313      	orrs	r3, r2
 80037aa:	654b      	str	r3, [r1, #84]	; 0x54
 80037ac:	e001      	b.n	80037b2 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037ae:	7dfb      	ldrb	r3, [r7, #23]
 80037b0:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d029      	beq.n	8003812 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d003      	beq.n	80037ce <HAL_RCCEx_PeriphCLKConfig+0xcda>
 80037c6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80037ca:	d007      	beq.n	80037dc <HAL_RCCEx_PeriphCLKConfig+0xce8>
 80037cc:	e00f      	b.n	80037ee <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80037ce:	4b34      	ldr	r3, [pc, #208]	; (80038a0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80037d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037d2:	4a33      	ldr	r2, [pc, #204]	; (80038a0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80037d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80037d8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80037da:	e00b      	b.n	80037f4 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	3304      	adds	r3, #4
 80037e0:	2102      	movs	r1, #2
 80037e2:	4618      	mov	r0, r3
 80037e4:	f001 f9ae 	bl	8004b44 <RCCEx_PLL2_Config>
 80037e8:	4603      	mov	r3, r0
 80037ea:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80037ec:	e002      	b.n	80037f4 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    default:
      ret = HAL_ERROR;
 80037ee:	2301      	movs	r3, #1
 80037f0:	75fb      	strb	r3, [r7, #23]
      break;
 80037f2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80037f4:	7dfb      	ldrb	r3, [r7, #23]
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d109      	bne.n	800380e <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80037fa:	4b29      	ldr	r3, [pc, #164]	; (80038a0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80037fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80037fe:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003806:	4926      	ldr	r1, [pc, #152]	; (80038a0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003808:	4313      	orrs	r3, r2
 800380a:	64cb      	str	r3, [r1, #76]	; 0x4c
 800380c:	e001      	b.n	8003812 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800380e:	7dfb      	ldrb	r3, [r7, #23]
 8003810:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800381a:	2b00      	cmp	r3, #0
 800381c:	d00a      	beq.n	8003834 <HAL_RCCEx_PeriphCLKConfig+0xd40>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	3324      	adds	r3, #36	; 0x24
 8003822:	2102      	movs	r1, #2
 8003824:	4618      	mov	r0, r3
 8003826:	f001 fa3f 	bl	8004ca8 <RCCEx_PLL3_Config>
 800382a:	4603      	mov	r3, r0
 800382c:	2b00      	cmp	r3, #0
 800382e:	d001      	beq.n	8003834 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      status=HAL_ERROR;
 8003830:	2301      	movs	r3, #1
 8003832:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800383c:	2b00      	cmp	r3, #0
 800383e:	d033      	beq.n	80038a8 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003844:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003848:	d017      	beq.n	800387a <HAL_RCCEx_PeriphCLKConfig+0xd86>
 800384a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800384e:	d811      	bhi.n	8003874 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8003850:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003854:	d013      	beq.n	800387e <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 8003856:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800385a:	d80b      	bhi.n	8003874 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 800385c:	2b00      	cmp	r3, #0
 800385e:	d010      	beq.n	8003882 <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 8003860:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003864:	d106      	bne.n	8003874 <HAL_RCCEx_PeriphCLKConfig+0xd80>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003866:	4b0e      	ldr	r3, [pc, #56]	; (80038a0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003868:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800386a:	4a0d      	ldr	r2, [pc, #52]	; (80038a0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800386c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003870:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8003872:	e007      	b.n	8003884 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003874:	2301      	movs	r3, #1
 8003876:	75fb      	strb	r3, [r7, #23]
      break;
 8003878:	e004      	b.n	8003884 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 800387a:	bf00      	nop
 800387c:	e002      	b.n	8003884 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 800387e:	bf00      	nop
 8003880:	e000      	b.n	8003884 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8003882:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003884:	7dfb      	ldrb	r3, [r7, #23]
 8003886:	2b00      	cmp	r3, #0
 8003888:	d10c      	bne.n	80038a4 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800388a:	4b05      	ldr	r3, [pc, #20]	; (80038a0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800388c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800388e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003896:	4902      	ldr	r1, [pc, #8]	; (80038a0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003898:	4313      	orrs	r3, r2
 800389a:	654b      	str	r3, [r1, #84]	; 0x54
 800389c:	e004      	b.n	80038a8 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 800389e:	bf00      	nop
 80038a0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80038a4:	7dfb      	ldrb	r3, [r7, #23]
 80038a6:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d008      	beq.n	80038c6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80038b4:	4b31      	ldr	r3, [pc, #196]	; (800397c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80038b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80038b8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038c0:	492e      	ldr	r1, [pc, #184]	; (800397c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80038c2:	4313      	orrs	r3, r2
 80038c4:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d009      	beq.n	80038e6 <HAL_RCCEx_PeriphCLKConfig+0xdf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80038d2:	4b2a      	ldr	r3, [pc, #168]	; (800397c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80038d4:	691b      	ldr	r3, [r3, #16]
 80038d6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80038e0:	4926      	ldr	r1, [pc, #152]	; (800397c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80038e2:	4313      	orrs	r3, r2
 80038e4:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d008      	beq.n	8003904 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80038f2:	4b22      	ldr	r3, [pc, #136]	; (800397c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80038f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80038f6:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80038fe:	491f      	ldr	r1, [pc, #124]	; (800397c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8003900:	4313      	orrs	r3, r2
 8003902:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800390c:	2b00      	cmp	r3, #0
 800390e:	d00d      	beq.n	800392c <HAL_RCCEx_PeriphCLKConfig+0xe38>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003910:	4b1a      	ldr	r3, [pc, #104]	; (800397c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8003912:	691b      	ldr	r3, [r3, #16]
 8003914:	4a19      	ldr	r2, [pc, #100]	; (800397c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8003916:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800391a:	6113      	str	r3, [r2, #16]
 800391c:	4b17      	ldr	r3, [pc, #92]	; (800397c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800391e:	691a      	ldr	r2, [r3, #16]
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8003926:	4915      	ldr	r1, [pc, #84]	; (800397c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8003928:	4313      	orrs	r3, r2
 800392a:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	2b00      	cmp	r3, #0
 8003932:	da08      	bge.n	8003946 <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8003934:	4b11      	ldr	r3, [pc, #68]	; (800397c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8003936:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003938:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003940:	490e      	ldr	r1, [pc, #56]	; (800397c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8003942:	4313      	orrs	r3, r2
 8003944:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800394e:	2b00      	cmp	r3, #0
 8003950:	d009      	beq.n	8003966 <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003952:	4b0a      	ldr	r3, [pc, #40]	; (800397c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8003954:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003956:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003960:	4906      	ldr	r1, [pc, #24]	; (800397c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8003962:	4313      	orrs	r3, r2
 8003964:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8003966:	7dbb      	ldrb	r3, [r7, #22]
 8003968:	2b00      	cmp	r3, #0
 800396a:	d101      	bne.n	8003970 <HAL_RCCEx_PeriphCLKConfig+0xe7c>
  {
    return HAL_OK;
 800396c:	2300      	movs	r3, #0
 800396e:	e000      	b.n	8003972 <HAL_RCCEx_PeriphCLKConfig+0xe7e>
  }
  return HAL_ERROR;
 8003970:	2301      	movs	r3, #1
}
 8003972:	4618      	mov	r0, r3
 8003974:	3718      	adds	r7, #24
 8003976:	46bd      	mov	sp, r7
 8003978:	bd80      	pop	{r7, pc}
 800397a:	bf00      	nop
 800397c:	58024400 	.word	0x58024400

08003980 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8003980:	b580      	push	{r7, lr}
 8003982:	b090      	sub	sp, #64	; 0x40
 8003984:	af00      	add	r7, sp, #0
 8003986:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800398e:	f040 8095 	bne.w	8003abc <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 8003992:	4b97      	ldr	r3, [pc, #604]	; (8003bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8003994:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003996:	f003 0307 	and.w	r3, r3, #7
 800399a:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800399c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800399e:	2b04      	cmp	r3, #4
 80039a0:	f200 8088 	bhi.w	8003ab4 <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 80039a4:	a201      	add	r2, pc, #4	; (adr r2, 80039ac <HAL_RCCEx_GetPeriphCLKFreq+0x2c>)
 80039a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039aa:	bf00      	nop
 80039ac:	080039c1 	.word	0x080039c1
 80039b0:	080039e9 	.word	0x080039e9
 80039b4:	08003a11 	.word	0x08003a11
 80039b8:	08003aad 	.word	0x08003aad
 80039bc:	08003a39 	.word	0x08003a39
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80039c0:	4b8b      	ldr	r3, [pc, #556]	; (8003bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039c8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80039cc:	d108      	bne.n	80039e0 <HAL_RCCEx_GetPeriphCLKFreq+0x60>
         {
           HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80039ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80039d2:	4618      	mov	r0, r3
 80039d4:	f000 ff64 	bl	80048a0 <HAL_RCCEx_GetPLL1ClockFreq>
           frequency = pll1_clocks.PLL1_Q_Frequency;
 80039d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039da:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80039dc:	f000 bc94 	b.w	8004308 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 80039e0:	2300      	movs	r3, #0
 80039e2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80039e4:	f000 bc90 	b.w	8004308 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80039e8:	4b81      	ldr	r3, [pc, #516]	; (8003bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80039f0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80039f4:	d108      	bne.n	8003a08 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80039f6:	f107 0318 	add.w	r3, r7, #24
 80039fa:	4618      	mov	r0, r3
 80039fc:	f000 fca8 	bl	8004350 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8003a00:	69bb      	ldr	r3, [r7, #24]
 8003a02:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8003a04:	f000 bc80 	b.w	8004308 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8003a08:	2300      	movs	r3, #0
 8003a0a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8003a0c:	f000 bc7c 	b.w	8004308 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8003a10:	4b77      	ldr	r3, [pc, #476]	; (8003bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003a18:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003a1c:	d108      	bne.n	8003a30 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8003a1e:	f107 030c 	add.w	r3, r7, #12
 8003a22:	4618      	mov	r0, r3
 8003a24:	f000 fde8 	bl	80045f8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8003a2c:	f000 bc6c 	b.w	8004308 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8003a30:	2300      	movs	r3, #0
 8003a32:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8003a34:	f000 bc68 	b.w	8004308 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8003a38:	4b6d      	ldr	r3, [pc, #436]	; (8003bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8003a3a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a3c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003a40:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8003a42:	4b6b      	ldr	r3, [pc, #428]	; (8003bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	f003 0304 	and.w	r3, r3, #4
 8003a4a:	2b04      	cmp	r3, #4
 8003a4c:	d10c      	bne.n	8003a68 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
 8003a4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d109      	bne.n	8003a68 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003a54:	4b66      	ldr	r3, [pc, #408]	; (8003bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	08db      	lsrs	r3, r3, #3
 8003a5a:	f003 0303 	and.w	r3, r3, #3
 8003a5e:	4a65      	ldr	r2, [pc, #404]	; (8003bf4 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 8003a60:	fa22 f303 	lsr.w	r3, r2, r3
 8003a64:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003a66:	e01f      	b.n	8003aa8 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8003a68:	4b61      	ldr	r3, [pc, #388]	; (8003bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a70:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003a74:	d106      	bne.n	8003a84 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
 8003a76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a78:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003a7c:	d102      	bne.n	8003a84 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8003a7e:	4b5e      	ldr	r3, [pc, #376]	; (8003bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8003a80:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003a82:	e011      	b.n	8003aa8 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8003a84:	4b5a      	ldr	r3, [pc, #360]	; (8003bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a8c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003a90:	d106      	bne.n	8003aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
 8003a92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a94:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003a98:	d102      	bne.n	8003aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8003a9a:	4b58      	ldr	r3, [pc, #352]	; (8003bfc <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 8003a9c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003a9e:	e003      	b.n	8003aa8 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8003aa0:	2300      	movs	r3, #0
 8003aa2:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8003aa4:	f000 bc30 	b.w	8004308 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8003aa8:	f000 bc2e 	b.w	8004308 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8003aac:	4b54      	ldr	r3, [pc, #336]	; (8003c00 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 8003aae:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8003ab0:	f000 bc2a 	b.w	8004308 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      default :
        {
          frequency = 0;
 8003ab4:	2300      	movs	r3, #0
 8003ab6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8003ab8:	f000 bc26 	b.w	8004308 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003ac2:	f040 809f 	bne.w	8003c04 <HAL_RCCEx_GetPeriphCLKFreq+0x284>
    {

      saiclocksource= __HAL_RCC_GET_SAI23_SOURCE();
 8003ac6:	4b4a      	ldr	r3, [pc, #296]	; (8003bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8003ac8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003aca:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 8003ace:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8003ad0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ad2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003ad6:	d04d      	beq.n	8003b74 <HAL_RCCEx_GetPeriphCLKFreq+0x1f4>
 8003ad8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ada:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003ade:	f200 8084 	bhi.w	8003bea <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 8003ae2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ae4:	2bc0      	cmp	r3, #192	; 0xc0
 8003ae6:	d07d      	beq.n	8003be4 <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 8003ae8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003aea:	2bc0      	cmp	r3, #192	; 0xc0
 8003aec:	d87d      	bhi.n	8003bea <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 8003aee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003af0:	2b80      	cmp	r3, #128	; 0x80
 8003af2:	d02d      	beq.n	8003b50 <HAL_RCCEx_GetPeriphCLKFreq+0x1d0>
 8003af4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003af6:	2b80      	cmp	r3, #128	; 0x80
 8003af8:	d877      	bhi.n	8003bea <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 8003afa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d003      	beq.n	8003b08 <HAL_RCCEx_GetPeriphCLKFreq+0x188>
 8003b00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b02:	2b40      	cmp	r3, #64	; 0x40
 8003b04:	d012      	beq.n	8003b2c <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
 8003b06:	e070      	b.n	8003bea <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
      {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8003b08:	4b39      	ldr	r3, [pc, #228]	; (8003bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b10:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003b14:	d107      	bne.n	8003b26 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8003b16:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003b1a:	4618      	mov	r0, r3
 8003b1c:	f000 fec0 	bl	80048a0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8003b20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b22:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8003b24:	e3f0      	b.n	8004308 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8003b26:	2300      	movs	r3, #0
 8003b28:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8003b2a:	e3ed      	b.n	8004308 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8003b2c:	4b30      	ldr	r3, [pc, #192]	; (8003bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003b34:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003b38:	d107      	bne.n	8003b4a <HAL_RCCEx_GetPeriphCLKFreq+0x1ca>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8003b3a:	f107 0318 	add.w	r3, r7, #24
 8003b3e:	4618      	mov	r0, r3
 8003b40:	f000 fc06 	bl	8004350 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8003b44:	69bb      	ldr	r3, [r7, #24]
 8003b46:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8003b48:	e3de      	b.n	8004308 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8003b4a:	2300      	movs	r3, #0
 8003b4c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8003b4e:	e3db      	b.n	8004308 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8003b50:	4b27      	ldr	r3, [pc, #156]	; (8003bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003b58:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003b5c:	d107      	bne.n	8003b6e <HAL_RCCEx_GetPeriphCLKFreq+0x1ee>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8003b5e:	f107 030c 	add.w	r3, r7, #12
 8003b62:	4618      	mov	r0, r3
 8003b64:	f000 fd48 	bl	80045f8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8003b6c:	e3cc      	b.n	8004308 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8003b6e:	2300      	movs	r3, #0
 8003b70:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8003b72:	e3c9      	b.n	8004308 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8003b74:	4b1e      	ldr	r3, [pc, #120]	; (8003bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8003b76:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b78:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003b7c:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8003b7e:	4b1c      	ldr	r3, [pc, #112]	; (8003bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f003 0304 	and.w	r3, r3, #4
 8003b86:	2b04      	cmp	r3, #4
 8003b88:	d10c      	bne.n	8003ba4 <HAL_RCCEx_GetPeriphCLKFreq+0x224>
 8003b8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d109      	bne.n	8003ba4 <HAL_RCCEx_GetPeriphCLKFreq+0x224>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003b90:	4b17      	ldr	r3, [pc, #92]	; (8003bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	08db      	lsrs	r3, r3, #3
 8003b96:	f003 0303 	and.w	r3, r3, #3
 8003b9a:	4a16      	ldr	r2, [pc, #88]	; (8003bf4 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 8003b9c:	fa22 f303 	lsr.w	r3, r2, r3
 8003ba0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003ba2:	e01e      	b.n	8003be2 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8003ba4:	4b12      	ldr	r3, [pc, #72]	; (8003bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003bb0:	d106      	bne.n	8003bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x240>
 8003bb2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003bb4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003bb8:	d102      	bne.n	8003bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x240>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8003bba:	4b0f      	ldr	r3, [pc, #60]	; (8003bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8003bbc:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003bbe:	e010      	b.n	8003be2 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8003bc0:	4b0b      	ldr	r3, [pc, #44]	; (8003bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bc8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003bcc:	d106      	bne.n	8003bdc <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
 8003bce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003bd0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003bd4:	d102      	bne.n	8003bdc <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8003bd6:	4b09      	ldr	r3, [pc, #36]	; (8003bfc <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 8003bd8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003bda:	e002      	b.n	8003be2 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8003bdc:	2300      	movs	r3, #0
 8003bde:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8003be0:	e392      	b.n	8004308 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8003be2:	e391      	b.n	8004308 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8003be4:	4b06      	ldr	r3, [pc, #24]	; (8003c00 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 8003be6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8003be8:	e38e      	b.n	8004308 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      default :
        {
          frequency = 0;
 8003bea:	2300      	movs	r3, #0
 8003bec:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8003bee:	e38b      	b.n	8004308 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8003bf0:	58024400 	.word	0x58024400
 8003bf4:	03d09000 	.word	0x03d09000
 8003bf8:	003d0900 	.word	0x003d0900
 8003bfc:	0112a880 	.word	0x0112a880
 8003c00:	00bb8000 	.word	0x00bb8000
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c0a:	f040 809c 	bne.w	8003d46 <HAL_RCCEx_GetPeriphCLKFreq+0x3c6>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 8003c0e:	4b9d      	ldr	r3, [pc, #628]	; (8003e84 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8003c10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c12:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 8003c16:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8003c18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c1a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003c1e:	d054      	beq.n	8003cca <HAL_RCCEx_GetPeriphCLKFreq+0x34a>
 8003c20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c22:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003c26:	f200 808b 	bhi.w	8003d40 <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
 8003c2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c2c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8003c30:	f000 8083 	beq.w	8003d3a <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
 8003c34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c36:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8003c3a:	f200 8081 	bhi.w	8003d40 <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
 8003c3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c40:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003c44:	d02f      	beq.n	8003ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x326>
 8003c46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c48:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003c4c:	d878      	bhi.n	8003d40 <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
 8003c4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d004      	beq.n	8003c5e <HAL_RCCEx_GetPeriphCLKFreq+0x2de>
 8003c54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c56:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003c5a:	d012      	beq.n	8003c82 <HAL_RCCEx_GetPeriphCLKFreq+0x302>
 8003c5c:	e070      	b.n	8003d40 <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
      {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8003c5e:	4b89      	ldr	r3, [pc, #548]	; (8003e84 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c66:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003c6a:	d107      	bne.n	8003c7c <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8003c6c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003c70:	4618      	mov	r0, r3
 8003c72:	f000 fe15 	bl	80048a0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8003c76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c78:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8003c7a:	e345      	b.n	8004308 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8003c7c:	2300      	movs	r3, #0
 8003c7e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8003c80:	e342      	b.n	8004308 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8003c82:	4b80      	ldr	r3, [pc, #512]	; (8003e84 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003c8a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003c8e:	d107      	bne.n	8003ca0 <HAL_RCCEx_GetPeriphCLKFreq+0x320>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8003c90:	f107 0318 	add.w	r3, r7, #24
 8003c94:	4618      	mov	r0, r3
 8003c96:	f000 fb5b 	bl	8004350 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8003c9a:	69bb      	ldr	r3, [r7, #24]
 8003c9c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8003c9e:	e333      	b.n	8004308 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8003ca0:	2300      	movs	r3, #0
 8003ca2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8003ca4:	e330      	b.n	8004308 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8003ca6:	4b77      	ldr	r3, [pc, #476]	; (8003e84 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003cae:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003cb2:	d107      	bne.n	8003cc4 <HAL_RCCEx_GetPeriphCLKFreq+0x344>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8003cb4:	f107 030c 	add.w	r3, r7, #12
 8003cb8:	4618      	mov	r0, r3
 8003cba:	f000 fc9d 	bl	80045f8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8003cc2:	e321      	b.n	8004308 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8003cc4:	2300      	movs	r3, #0
 8003cc6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8003cc8:	e31e      	b.n	8004308 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8003cca:	4b6e      	ldr	r3, [pc, #440]	; (8003e84 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8003ccc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003cce:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003cd2:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8003cd4:	4b6b      	ldr	r3, [pc, #428]	; (8003e84 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	f003 0304 	and.w	r3, r3, #4
 8003cdc:	2b04      	cmp	r3, #4
 8003cde:	d10c      	bne.n	8003cfa <HAL_RCCEx_GetPeriphCLKFreq+0x37a>
 8003ce0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d109      	bne.n	8003cfa <HAL_RCCEx_GetPeriphCLKFreq+0x37a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003ce6:	4b67      	ldr	r3, [pc, #412]	; (8003e84 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	08db      	lsrs	r3, r3, #3
 8003cec:	f003 0303 	and.w	r3, r3, #3
 8003cf0:	4a65      	ldr	r2, [pc, #404]	; (8003e88 <HAL_RCCEx_GetPeriphCLKFreq+0x508>)
 8003cf2:	fa22 f303 	lsr.w	r3, r2, r3
 8003cf6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003cf8:	e01e      	b.n	8003d38 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8003cfa:	4b62      	ldr	r3, [pc, #392]	; (8003e84 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d02:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003d06:	d106      	bne.n	8003d16 <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 8003d08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d0a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003d0e:	d102      	bne.n	8003d16 <HAL_RCCEx_GetPeriphCLKFreq+0x396>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8003d10:	4b5e      	ldr	r3, [pc, #376]	; (8003e8c <HAL_RCCEx_GetPeriphCLKFreq+0x50c>)
 8003d12:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003d14:	e010      	b.n	8003d38 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8003d16:	4b5b      	ldr	r3, [pc, #364]	; (8003e84 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d1e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003d22:	d106      	bne.n	8003d32 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 8003d24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d26:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003d2a:	d102      	bne.n	8003d32 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8003d2c:	4b58      	ldr	r3, [pc, #352]	; (8003e90 <HAL_RCCEx_GetPeriphCLKFreq+0x510>)
 8003d2e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003d30:	e002      	b.n	8003d38 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8003d32:	2300      	movs	r3, #0
 8003d34:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8003d36:	e2e7      	b.n	8004308 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8003d38:	e2e6      	b.n	8004308 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8003d3a:	4b56      	ldr	r3, [pc, #344]	; (8003e94 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8003d3c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8003d3e:	e2e3      	b.n	8004308 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      default :
        {
          frequency = 0;
 8003d40:	2300      	movs	r3, #0
 8003d42:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8003d44:	e2e0      	b.n	8004308 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003d4c:	f040 80a7 	bne.w	8003e9e <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 8003d50:	4b4c      	ldr	r3, [pc, #304]	; (8003e84 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8003d52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d54:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8003d58:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8003d5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d5c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003d60:	d055      	beq.n	8003e0e <HAL_RCCEx_GetPeriphCLKFreq+0x48e>
 8003d62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d64:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003d68:	f200 8096 	bhi.w	8003e98 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
 8003d6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d6e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003d72:	f000 8084 	beq.w	8003e7e <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
 8003d76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d78:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003d7c:	f200 808c 	bhi.w	8003e98 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
 8003d80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d82:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003d86:	d030      	beq.n	8003dea <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
 8003d88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d8a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003d8e:	f200 8083 	bhi.w	8003e98 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
 8003d92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d004      	beq.n	8003da2 <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 8003d98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d9a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003d9e:	d012      	beq.n	8003dc6 <HAL_RCCEx_GetPeriphCLKFreq+0x446>
 8003da0:	e07a      	b.n	8003e98 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
      {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8003da2:	4b38      	ldr	r3, [pc, #224]	; (8003e84 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003daa:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003dae:	d107      	bne.n	8003dc0 <HAL_RCCEx_GetPeriphCLKFreq+0x440>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8003db0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003db4:	4618      	mov	r0, r3
 8003db6:	f000 fd73 	bl	80048a0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8003dba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dbc:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8003dbe:	e2a3      	b.n	8004308 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8003dc0:	2300      	movs	r3, #0
 8003dc2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8003dc4:	e2a0      	b.n	8004308 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8003dc6:	4b2f      	ldr	r3, [pc, #188]	; (8003e84 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003dce:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003dd2:	d107      	bne.n	8003de4 <HAL_RCCEx_GetPeriphCLKFreq+0x464>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8003dd4:	f107 0318 	add.w	r3, r7, #24
 8003dd8:	4618      	mov	r0, r3
 8003dda:	f000 fab9 	bl	8004350 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8003dde:	69bb      	ldr	r3, [r7, #24]
 8003de0:	63fb      	str	r3, [r7, #60]	; 0x3c
          }
         else
         {
           frequency = 0;
         }
          break;
 8003de2:	e291      	b.n	8004308 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8003de4:	2300      	movs	r3, #0
 8003de6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8003de8:	e28e      	b.n	8004308 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8003dea:	4b26      	ldr	r3, [pc, #152]	; (8003e84 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003df2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003df6:	d107      	bne.n	8003e08 <HAL_RCCEx_GetPeriphCLKFreq+0x488>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8003df8:	f107 030c 	add.w	r3, r7, #12
 8003dfc:	4618      	mov	r0, r3
 8003dfe:	f000 fbfb 	bl	80045f8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8003e06:	e27f      	b.n	8004308 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8003e08:	2300      	movs	r3, #0
 8003e0a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8003e0c:	e27c      	b.n	8004308 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8003e0e:	4b1d      	ldr	r3, [pc, #116]	; (8003e84 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8003e10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e12:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003e16:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8003e18:	4b1a      	ldr	r3, [pc, #104]	; (8003e84 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	f003 0304 	and.w	r3, r3, #4
 8003e20:	2b04      	cmp	r3, #4
 8003e22:	d10c      	bne.n	8003e3e <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
 8003e24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d109      	bne.n	8003e3e <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003e2a:	4b16      	ldr	r3, [pc, #88]	; (8003e84 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	08db      	lsrs	r3, r3, #3
 8003e30:	f003 0303 	and.w	r3, r3, #3
 8003e34:	4a14      	ldr	r2, [pc, #80]	; (8003e88 <HAL_RCCEx_GetPeriphCLKFreq+0x508>)
 8003e36:	fa22 f303 	lsr.w	r3, r2, r3
 8003e3a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003e3c:	e01e      	b.n	8003e7c <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8003e3e:	4b11      	ldr	r3, [pc, #68]	; (8003e84 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e46:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003e4a:	d106      	bne.n	8003e5a <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
 8003e4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e4e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003e52:	d102      	bne.n	8003e5a <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8003e54:	4b0d      	ldr	r3, [pc, #52]	; (8003e8c <HAL_RCCEx_GetPeriphCLKFreq+0x50c>)
 8003e56:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003e58:	e010      	b.n	8003e7c <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8003e5a:	4b0a      	ldr	r3, [pc, #40]	; (8003e84 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e62:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003e66:	d106      	bne.n	8003e76 <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
 8003e68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e6a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003e6e:	d102      	bne.n	8003e76 <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8003e70:	4b07      	ldr	r3, [pc, #28]	; (8003e90 <HAL_RCCEx_GetPeriphCLKFreq+0x510>)
 8003e72:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003e74:	e002      	b.n	8003e7c <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8003e76:	2300      	movs	r3, #0
 8003e78:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8003e7a:	e245      	b.n	8004308 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8003e7c:	e244      	b.n	8004308 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8003e7e:	4b05      	ldr	r3, [pc, #20]	; (8003e94 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8003e80:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8003e82:	e241      	b.n	8004308 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8003e84:	58024400 	.word	0x58024400
 8003e88:	03d09000 	.word	0x03d09000
 8003e8c:	003d0900 	.word	0x003d0900
 8003e90:	0112a880 	.word	0x0112a880
 8003e94:	00bb8000 	.word	0x00bb8000
        }

      default :
        {
          frequency = 0;
 8003e98:	2300      	movs	r3, #0
 8003e9a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8003e9c:	e234      	b.n	8004308 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ea4:	f040 809c 	bne.w	8003fe0 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 8003ea8:	4b9b      	ldr	r3, [pc, #620]	; (8004118 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8003eaa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003eac:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8003eb0:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8003eb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003eb4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003eb8:	d054      	beq.n	8003f64 <HAL_RCCEx_GetPeriphCLKFreq+0x5e4>
 8003eba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ebc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003ec0:	f200 808b 	bhi.w	8003fda <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
 8003ec4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ec6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003eca:	f000 8083 	beq.w	8003fd4 <HAL_RCCEx_GetPeriphCLKFreq+0x654>
 8003ece:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ed0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003ed4:	f200 8081 	bhi.w	8003fda <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
 8003ed8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003eda:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003ede:	d02f      	beq.n	8003f40 <HAL_RCCEx_GetPeriphCLKFreq+0x5c0>
 8003ee0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ee2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003ee6:	d878      	bhi.n	8003fda <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
 8003ee8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d004      	beq.n	8003ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x578>
 8003eee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ef0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ef4:	d012      	beq.n	8003f1c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>
 8003ef6:	e070      	b.n	8003fda <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8003ef8:	4b87      	ldr	r3, [pc, #540]	; (8004118 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f00:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003f04:	d107      	bne.n	8003f16 <HAL_RCCEx_GetPeriphCLKFreq+0x596>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8003f06:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003f0a:	4618      	mov	r0, r3
 8003f0c:	f000 fcc8 	bl	80048a0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8003f10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f12:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8003f14:	e1f8      	b.n	8004308 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8003f16:	2300      	movs	r3, #0
 8003f18:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8003f1a:	e1f5      	b.n	8004308 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8003f1c:	4b7e      	ldr	r3, [pc, #504]	; (8004118 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003f24:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003f28:	d107      	bne.n	8003f3a <HAL_RCCEx_GetPeriphCLKFreq+0x5ba>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8003f2a:	f107 0318 	add.w	r3, r7, #24
 8003f2e:	4618      	mov	r0, r3
 8003f30:	f000 fa0e 	bl	8004350 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8003f34:	69bb      	ldr	r3, [r7, #24]
 8003f36:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8003f38:	e1e6      	b.n	8004308 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8003f3a:	2300      	movs	r3, #0
 8003f3c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8003f3e:	e1e3      	b.n	8004308 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8003f40:	4b75      	ldr	r3, [pc, #468]	; (8004118 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003f48:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003f4c:	d107      	bne.n	8003f5e <HAL_RCCEx_GetPeriphCLKFreq+0x5de>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8003f4e:	f107 030c 	add.w	r3, r7, #12
 8003f52:	4618      	mov	r0, r3
 8003f54:	f000 fb50 	bl	80045f8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8003f5c:	e1d4      	b.n	8004308 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8003f5e:	2300      	movs	r3, #0
 8003f60:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8003f62:	e1d1      	b.n	8004308 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8003f64:	4b6c      	ldr	r3, [pc, #432]	; (8004118 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8003f66:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f68:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003f6c:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8003f6e:	4b6a      	ldr	r3, [pc, #424]	; (8004118 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f003 0304 	and.w	r3, r3, #4
 8003f76:	2b04      	cmp	r3, #4
 8003f78:	d10c      	bne.n	8003f94 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 8003f7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d109      	bne.n	8003f94 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003f80:	4b65      	ldr	r3, [pc, #404]	; (8004118 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	08db      	lsrs	r3, r3, #3
 8003f86:	f003 0303 	and.w	r3, r3, #3
 8003f8a:	4a64      	ldr	r2, [pc, #400]	; (800411c <HAL_RCCEx_GetPeriphCLKFreq+0x79c>)
 8003f8c:	fa22 f303 	lsr.w	r3, r2, r3
 8003f90:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003f92:	e01e      	b.n	8003fd2 <HAL_RCCEx_GetPeriphCLKFreq+0x652>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8003f94:	4b60      	ldr	r3, [pc, #384]	; (8004118 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f9c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003fa0:	d106      	bne.n	8003fb0 <HAL_RCCEx_GetPeriphCLKFreq+0x630>
 8003fa2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003fa4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003fa8:	d102      	bne.n	8003fb0 <HAL_RCCEx_GetPeriphCLKFreq+0x630>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8003faa:	4b5d      	ldr	r3, [pc, #372]	; (8004120 <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>)
 8003fac:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003fae:	e010      	b.n	8003fd2 <HAL_RCCEx_GetPeriphCLKFreq+0x652>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8003fb0:	4b59      	ldr	r3, [pc, #356]	; (8004118 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fb8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003fbc:	d106      	bne.n	8003fcc <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 8003fbe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003fc0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003fc4:	d102      	bne.n	8003fcc <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8003fc6:	4b57      	ldr	r3, [pc, #348]	; (8004124 <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>)
 8003fc8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003fca:	e002      	b.n	8003fd2 <HAL_RCCEx_GetPeriphCLKFreq+0x652>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8003fcc:	2300      	movs	r3, #0
 8003fce:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8003fd0:	e19a      	b.n	8004308 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8003fd2:	e199      	b.n	8004308 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8003fd4:	4b54      	ldr	r3, [pc, #336]	; (8004128 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8003fd6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8003fd8:	e196      	b.n	8004308 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      default :
        {
          frequency = 0;
 8003fda:	2300      	movs	r3, #0
 8003fdc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8003fde:	e193      	b.n	8004308 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003fe6:	d173      	bne.n	80040d0 <HAL_RCCEx_GetPeriphCLKFreq+0x750>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 8003fe8:	4b4b      	ldr	r3, [pc, #300]	; (8004118 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8003fea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fec:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003ff0:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8003ff2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ff4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003ff8:	d02f      	beq.n	800405a <HAL_RCCEx_GetPeriphCLKFreq+0x6da>
 8003ffa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ffc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004000:	d863      	bhi.n	80040ca <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
 8004002:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004004:	2b00      	cmp	r3, #0
 8004006:	d004      	beq.n	8004012 <HAL_RCCEx_GetPeriphCLKFreq+0x692>
 8004008:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800400a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800400e:	d012      	beq.n	8004036 <HAL_RCCEx_GetPeriphCLKFreq+0x6b6>
 8004010:	e05b      	b.n	80040ca <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004012:	4b41      	ldr	r3, [pc, #260]	; (8004118 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800401a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800401e:	d107      	bne.n	8004030 <HAL_RCCEx_GetPeriphCLKFreq+0x6b0>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004020:	f107 0318 	add.w	r3, r7, #24
 8004024:	4618      	mov	r0, r3
 8004026:	f000 f993 	bl	8004350 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800402a:	69bb      	ldr	r3, [r7, #24]
 800402c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800402e:	e16b      	b.n	8004308 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8004030:	2300      	movs	r3, #0
 8004032:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004034:	e168      	b.n	8004308 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8004036:	4b38      	ldr	r3, [pc, #224]	; (8004118 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800403e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004042:	d107      	bne.n	8004054 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004044:	f107 030c 	add.w	r3, r7, #12
 8004048:	4618      	mov	r0, r3
 800404a:	f000 fad5 	bl	80045f8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800404e:	697b      	ldr	r3, [r7, #20]
 8004050:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8004052:	e159      	b.n	8004308 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8004054:	2300      	movs	r3, #0
 8004056:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004058:	e156      	b.n	8004308 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800405a:	4b2f      	ldr	r3, [pc, #188]	; (8004118 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800405c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800405e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004062:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8004064:	4b2c      	ldr	r3, [pc, #176]	; (8004118 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	f003 0304 	and.w	r3, r3, #4
 800406c:	2b04      	cmp	r3, #4
 800406e:	d10c      	bne.n	800408a <HAL_RCCEx_GetPeriphCLKFreq+0x70a>
 8004070:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004072:	2b00      	cmp	r3, #0
 8004074:	d109      	bne.n	800408a <HAL_RCCEx_GetPeriphCLKFreq+0x70a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004076:	4b28      	ldr	r3, [pc, #160]	; (8004118 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	08db      	lsrs	r3, r3, #3
 800407c:	f003 0303 	and.w	r3, r3, #3
 8004080:	4a26      	ldr	r2, [pc, #152]	; (800411c <HAL_RCCEx_GetPeriphCLKFreq+0x79c>)
 8004082:	fa22 f303 	lsr.w	r3, r2, r3
 8004086:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004088:	e01e      	b.n	80040c8 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800408a:	4b23      	ldr	r3, [pc, #140]	; (8004118 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004092:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004096:	d106      	bne.n	80040a6 <HAL_RCCEx_GetPeriphCLKFreq+0x726>
 8004098:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800409a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800409e:	d102      	bne.n	80040a6 <HAL_RCCEx_GetPeriphCLKFreq+0x726>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 80040a0:	4b1f      	ldr	r3, [pc, #124]	; (8004120 <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>)
 80040a2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80040a4:	e010      	b.n	80040c8 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80040a6:	4b1c      	ldr	r3, [pc, #112]	; (8004118 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040ae:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80040b2:	d106      	bne.n	80040c2 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
 80040b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80040b6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80040ba:	d102      	bne.n	80040c2 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 80040bc:	4b19      	ldr	r3, [pc, #100]	; (8004124 <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>)
 80040be:	63fb      	str	r3, [r7, #60]	; 0x3c
 80040c0:	e002      	b.n	80040c8 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 80040c2:	2300      	movs	r3, #0
 80040c4:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 80040c6:	e11f      	b.n	8004308 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 80040c8:	e11e      	b.n	8004308 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      default :
        {
          frequency = 0;
 80040ca:	2300      	movs	r3, #0
 80040cc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80040ce:	e11b      	b.n	8004308 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80040d6:	d13e      	bne.n	8004156 <HAL_RCCEx_GetPeriphCLKFreq+0x7d6>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 80040d8:	4b0f      	ldr	r3, [pc, #60]	; (8004118 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 80040da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80040dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80040e0:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 80040e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d004      	beq.n	80040f2 <HAL_RCCEx_GetPeriphCLKFreq+0x772>
 80040e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040ea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80040ee:	d01d      	beq.n	800412c <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 80040f0:	e02e      	b.n	8004150 <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80040f2:	4b09      	ldr	r3, [pc, #36]	; (8004118 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040fa:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80040fe:	d107      	bne.n	8004110 <HAL_RCCEx_GetPeriphCLKFreq+0x790>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004100:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004104:	4618      	mov	r0, r3
 8004106:	f000 fbcb 	bl	80048a0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800410a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800410c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800410e:	e0fb      	b.n	8004308 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 8004110:	2300      	movs	r3, #0
 8004112:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004114:	e0f8      	b.n	8004308 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8004116:	bf00      	nop
 8004118:	58024400 	.word	0x58024400
 800411c:	03d09000 	.word	0x03d09000
 8004120:	003d0900 	.word	0x003d0900
 8004124:	0112a880 	.word	0x0112a880
 8004128:	00bb8000 	.word	0x00bb8000
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800412c:	4b79      	ldr	r3, [pc, #484]	; (8004314 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004134:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004138:	d107      	bne.n	800414a <HAL_RCCEx_GetPeriphCLKFreq+0x7ca>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800413a:	f107 0318 	add.w	r3, r7, #24
 800413e:	4618      	mov	r0, r3
 8004140:	f000 f906 	bl	8004350 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8004144:	6a3b      	ldr	r3, [r7, #32]
 8004146:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8004148:	e0de      	b.n	8004308 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 800414a:	2300      	movs	r3, #0
 800414c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800414e:	e0db      	b.n	8004308 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      default :
        {
          frequency = 0;
 8004150:	2300      	movs	r3, #0
 8004152:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004154:	e0d8      	b.n	8004308 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800415c:	f040 8085 	bne.w	800426a <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 8004160:	4b6c      	ldr	r3, [pc, #432]	; (8004314 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8004162:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004164:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8004168:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800416a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800416c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004170:	d06b      	beq.n	800424a <HAL_RCCEx_GetPeriphCLKFreq+0x8ca>
 8004172:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004174:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004178:	d874      	bhi.n	8004264 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 800417a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800417c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004180:	d056      	beq.n	8004230 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
 8004182:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004184:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004188:	d86c      	bhi.n	8004264 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 800418a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800418c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004190:	d03b      	beq.n	800420a <HAL_RCCEx_GetPeriphCLKFreq+0x88a>
 8004192:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004194:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004198:	d864      	bhi.n	8004264 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 800419a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800419c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80041a0:	d021      	beq.n	80041e6 <HAL_RCCEx_GetPeriphCLKFreq+0x866>
 80041a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041a4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80041a8:	d85c      	bhi.n	8004264 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 80041aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d004      	beq.n	80041ba <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 80041b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041b2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80041b6:	d004      	beq.n	80041c2 <HAL_RCCEx_GetPeriphCLKFreq+0x842>
 80041b8:	e054      	b.n	8004264 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 80041ba:	f000 f8b3 	bl	8004324 <HAL_RCCEx_GetD3PCLK1Freq>
 80041be:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 80041c0:	e0a2      	b.n	8004308 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80041c2:	4b54      	ldr	r3, [pc, #336]	; (8004314 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80041ca:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80041ce:	d107      	bne.n	80041e0 <HAL_RCCEx_GetPeriphCLKFreq+0x860>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80041d0:	f107 0318 	add.w	r3, r7, #24
 80041d4:	4618      	mov	r0, r3
 80041d6:	f000 f8bb 	bl	8004350 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80041da:	69fb      	ldr	r3, [r7, #28]
 80041dc:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80041de:	e093      	b.n	8004308 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 80041e0:	2300      	movs	r3, #0
 80041e2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80041e4:	e090      	b.n	8004308 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80041e6:	4b4b      	ldr	r3, [pc, #300]	; (8004314 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80041ee:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80041f2:	d107      	bne.n	8004204 <HAL_RCCEx_GetPeriphCLKFreq+0x884>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80041f4:	f107 030c 	add.w	r3, r7, #12
 80041f8:	4618      	mov	r0, r3
 80041fa:	f000 f9fd 	bl	80045f8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80041fe:	693b      	ldr	r3, [r7, #16]
 8004200:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8004202:	e081      	b.n	8004308 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 8004204:	2300      	movs	r3, #0
 8004206:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004208:	e07e      	b.n	8004308 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800420a:	4b42      	ldr	r3, [pc, #264]	; (8004314 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	f003 0304 	and.w	r3, r3, #4
 8004212:	2b04      	cmp	r3, #4
 8004214:	d109      	bne.n	800422a <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
         {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004216:	4b3f      	ldr	r3, [pc, #252]	; (8004314 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	08db      	lsrs	r3, r3, #3
 800421c:	f003 0303 	and.w	r3, r3, #3
 8004220:	4a3d      	ldr	r2, [pc, #244]	; (8004318 <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 8004222:	fa22 f303 	lsr.w	r3, r2, r3
 8004226:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8004228:	e06e      	b.n	8004308 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 800422a:	2300      	movs	r3, #0
 800422c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800422e:	e06b      	b.n	8004308 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8004230:	4b38      	ldr	r3, [pc, #224]	; (8004314 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004238:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800423c:	d102      	bne.n	8004244 <HAL_RCCEx_GetPeriphCLKFreq+0x8c4>
         {
          frequency = CSI_VALUE;
 800423e:	4b37      	ldr	r3, [pc, #220]	; (800431c <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8004240:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8004242:	e061      	b.n	8004308 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8004244:	2300      	movs	r3, #0
 8004246:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004248:	e05e      	b.n	8004308 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800424a:	4b32      	ldr	r3, [pc, #200]	; (8004314 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004252:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004256:	d102      	bne.n	800425e <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
         {
          frequency = HSE_VALUE;
 8004258:	4b31      	ldr	r3, [pc, #196]	; (8004320 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800425a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800425c:	e054      	b.n	8004308 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 800425e:	2300      	movs	r3, #0
 8004260:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004262:	e051      	b.n	8004308 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 8004264:	2300      	movs	r3, #0
 8004266:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004268:	e04e      	b.n	8004308 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004270:	d148      	bne.n	8004304 <HAL_RCCEx_GetPeriphCLKFreq+0x984>
    {
      /* Get FDCAN clock source */
      srcclk= __HAL_RCC_GET_FDCAN_SOURCE();
 8004272:	4b28      	ldr	r3, [pc, #160]	; (8004314 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8004274:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004276:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800427a:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800427c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800427e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004282:	d02a      	beq.n	80042da <HAL_RCCEx_GetPeriphCLKFreq+0x95a>
 8004284:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004286:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800428a:	d838      	bhi.n	80042fe <HAL_RCCEx_GetPeriphCLKFreq+0x97e>
 800428c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800428e:	2b00      	cmp	r3, #0
 8004290:	d004      	beq.n	800429c <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
 8004292:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004294:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004298:	d00d      	beq.n	80042b6 <HAL_RCCEx_GetPeriphCLKFreq+0x936>
 800429a:	e030      	b.n	80042fe <HAL_RCCEx_GetPeriphCLKFreq+0x97e>
      {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800429c:	4b1d      	ldr	r3, [pc, #116]	; (8004314 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042a4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80042a8:	d102      	bne.n	80042b0 <HAL_RCCEx_GetPeriphCLKFreq+0x930>
         {
          frequency = HSE_VALUE;
 80042aa:	4b1d      	ldr	r3, [pc, #116]	; (8004320 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 80042ac:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80042ae:	e02b      	b.n	8004308 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 80042b0:	2300      	movs	r3, #0
 80042b2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80042b4:	e028      	b.n	8004308 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80042b6:	4b17      	ldr	r3, [pc, #92]	; (8004314 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042be:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80042c2:	d107      	bne.n	80042d4 <HAL_RCCEx_GetPeriphCLKFreq+0x954>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80042c4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80042c8:	4618      	mov	r0, r3
 80042ca:	f000 fae9 	bl	80048a0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80042ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042d0:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80042d2:	e019      	b.n	8004308 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 80042d4:	2300      	movs	r3, #0
 80042d6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80042d8:	e016      	b.n	8004308 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80042da:	4b0e      	ldr	r3, [pc, #56]	; (8004314 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80042e2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80042e6:	d107      	bne.n	80042f8 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80042e8:	f107 0318 	add.w	r3, r7, #24
 80042ec:	4618      	mov	r0, r3
 80042ee:	f000 f82f 	bl	8004350 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80042f2:	69fb      	ldr	r3, [r7, #28]
 80042f4:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80042f6:	e007      	b.n	8004308 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 80042f8:	2300      	movs	r3, #0
 80042fa:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80042fc:	e004      	b.n	8004308 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      default :
        {
          frequency = 0;
 80042fe:	2300      	movs	r3, #0
 8004300:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004302:	e001      	b.n	8004308 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else
    {
      frequency = 0;
 8004304:	2300      	movs	r3, #0
 8004306:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 8004308:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800430a:	4618      	mov	r0, r3
 800430c:	3740      	adds	r7, #64	; 0x40
 800430e:	46bd      	mov	sp, r7
 8004310:	bd80      	pop	{r7, pc}
 8004312:	bf00      	nop
 8004314:	58024400 	.word	0x58024400
 8004318:	03d09000 	.word	0x03d09000
 800431c:	003d0900 	.word	0x003d0900
 8004320:	0112a880 	.word	0x0112a880

08004324 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8004324:	b580      	push	{r7, lr}
 8004326:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8004328:	f7fe fb88 	bl	8002a3c <HAL_RCC_GetHCLKFreq>
 800432c:	4602      	mov	r2, r0
 800432e:	4b06      	ldr	r3, [pc, #24]	; (8004348 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8004330:	6a1b      	ldr	r3, [r3, #32]
 8004332:	091b      	lsrs	r3, r3, #4
 8004334:	f003 0307 	and.w	r3, r3, #7
 8004338:	4904      	ldr	r1, [pc, #16]	; (800434c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800433a:	5ccb      	ldrb	r3, [r1, r3]
 800433c:	f003 031f 	and.w	r3, r3, #31
 8004340:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8004344:	4618      	mov	r0, r3
 8004346:	bd80      	pop	{r7, pc}
 8004348:	58024400 	.word	0x58024400
 800434c:	08007eb4 	.word	0x08007eb4

08004350 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8004350:	b480      	push	{r7}
 8004352:	b089      	sub	sp, #36	; 0x24
 8004354:	af00      	add	r7, sp, #0
 8004356:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004358:	4ba1      	ldr	r3, [pc, #644]	; (80045e0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800435a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800435c:	f003 0303 	and.w	r3, r3, #3
 8004360:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8004362:	4b9f      	ldr	r3, [pc, #636]	; (80045e0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004364:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004366:	0b1b      	lsrs	r3, r3, #12
 8004368:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800436c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800436e:	4b9c      	ldr	r3, [pc, #624]	; (80045e0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004370:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004372:	091b      	lsrs	r3, r3, #4
 8004374:	f003 0301 	and.w	r3, r3, #1
 8004378:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800437a:	4b99      	ldr	r3, [pc, #612]	; (80045e0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800437c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800437e:	08db      	lsrs	r3, r3, #3
 8004380:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004384:	693a      	ldr	r2, [r7, #16]
 8004386:	fb02 f303 	mul.w	r3, r2, r3
 800438a:	ee07 3a90 	vmov	s15, r3
 800438e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004392:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8004396:	697b      	ldr	r3, [r7, #20]
 8004398:	2b00      	cmp	r3, #0
 800439a:	f000 8111 	beq.w	80045c0 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800439e:	69bb      	ldr	r3, [r7, #24]
 80043a0:	2b02      	cmp	r3, #2
 80043a2:	f000 8083 	beq.w	80044ac <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80043a6:	69bb      	ldr	r3, [r7, #24]
 80043a8:	2b02      	cmp	r3, #2
 80043aa:	f200 80a1 	bhi.w	80044f0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80043ae:	69bb      	ldr	r3, [r7, #24]
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d003      	beq.n	80043bc <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80043b4:	69bb      	ldr	r3, [r7, #24]
 80043b6:	2b01      	cmp	r3, #1
 80043b8:	d056      	beq.n	8004468 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80043ba:	e099      	b.n	80044f0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80043bc:	4b88      	ldr	r3, [pc, #544]	; (80045e0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	f003 0320 	and.w	r3, r3, #32
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d02d      	beq.n	8004424 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80043c8:	4b85      	ldr	r3, [pc, #532]	; (80045e0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	08db      	lsrs	r3, r3, #3
 80043ce:	f003 0303 	and.w	r3, r3, #3
 80043d2:	4a84      	ldr	r2, [pc, #528]	; (80045e4 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80043d4:	fa22 f303 	lsr.w	r3, r2, r3
 80043d8:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80043da:	68bb      	ldr	r3, [r7, #8]
 80043dc:	ee07 3a90 	vmov	s15, r3
 80043e0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80043e4:	697b      	ldr	r3, [r7, #20]
 80043e6:	ee07 3a90 	vmov	s15, r3
 80043ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80043ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80043f2:	4b7b      	ldr	r3, [pc, #492]	; (80045e0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80043f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80043fa:	ee07 3a90 	vmov	s15, r3
 80043fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004402:	ed97 6a03 	vldr	s12, [r7, #12]
 8004406:	eddf 5a78 	vldr	s11, [pc, #480]	; 80045e8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800440a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800440e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004412:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004416:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800441a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800441e:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8004422:	e087      	b.n	8004534 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004424:	697b      	ldr	r3, [r7, #20]
 8004426:	ee07 3a90 	vmov	s15, r3
 800442a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800442e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80045ec <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8004432:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004436:	4b6a      	ldr	r3, [pc, #424]	; (80045e0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004438:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800443a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800443e:	ee07 3a90 	vmov	s15, r3
 8004442:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004446:	ed97 6a03 	vldr	s12, [r7, #12]
 800444a:	eddf 5a67 	vldr	s11, [pc, #412]	; 80045e8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800444e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004452:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004456:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800445a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800445e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004462:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004466:	e065      	b.n	8004534 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004468:	697b      	ldr	r3, [r7, #20]
 800446a:	ee07 3a90 	vmov	s15, r3
 800446e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004472:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80045f0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004476:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800447a:	4b59      	ldr	r3, [pc, #356]	; (80045e0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800447c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800447e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004482:	ee07 3a90 	vmov	s15, r3
 8004486:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800448a:	ed97 6a03 	vldr	s12, [r7, #12]
 800448e:	eddf 5a56 	vldr	s11, [pc, #344]	; 80045e8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004492:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004496:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800449a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800449e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80044a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80044a6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80044aa:	e043      	b.n	8004534 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80044ac:	697b      	ldr	r3, [r7, #20]
 80044ae:	ee07 3a90 	vmov	s15, r3
 80044b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80044b6:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80045f4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80044ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80044be:	4b48      	ldr	r3, [pc, #288]	; (80045e0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80044c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80044c6:	ee07 3a90 	vmov	s15, r3
 80044ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80044ce:	ed97 6a03 	vldr	s12, [r7, #12]
 80044d2:	eddf 5a45 	vldr	s11, [pc, #276]	; 80045e8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80044d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80044da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80044de:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80044e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80044e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80044ea:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80044ee:	e021      	b.n	8004534 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80044f0:	697b      	ldr	r3, [r7, #20]
 80044f2:	ee07 3a90 	vmov	s15, r3
 80044f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80044fa:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80045f0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80044fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004502:	4b37      	ldr	r3, [pc, #220]	; (80045e0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004504:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004506:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800450a:	ee07 3a90 	vmov	s15, r3
 800450e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004512:	ed97 6a03 	vldr	s12, [r7, #12]
 8004516:	eddf 5a34 	vldr	s11, [pc, #208]	; 80045e8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800451a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800451e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004522:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004526:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800452a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800452e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004532:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8004534:	4b2a      	ldr	r3, [pc, #168]	; (80045e0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004536:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004538:	0a5b      	lsrs	r3, r3, #9
 800453a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800453e:	ee07 3a90 	vmov	s15, r3
 8004542:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004546:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800454a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800454e:	edd7 6a07 	vldr	s13, [r7, #28]
 8004552:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004556:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800455a:	ee17 2a90 	vmov	r2, s15
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8004562:	4b1f      	ldr	r3, [pc, #124]	; (80045e0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004564:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004566:	0c1b      	lsrs	r3, r3, #16
 8004568:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800456c:	ee07 3a90 	vmov	s15, r3
 8004570:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004574:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004578:	ee37 7a87 	vadd.f32	s14, s15, s14
 800457c:	edd7 6a07 	vldr	s13, [r7, #28]
 8004580:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004584:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004588:	ee17 2a90 	vmov	r2, s15
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8004590:	4b13      	ldr	r3, [pc, #76]	; (80045e0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004592:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004594:	0e1b      	lsrs	r3, r3, #24
 8004596:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800459a:	ee07 3a90 	vmov	s15, r3
 800459e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80045a2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80045a6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80045aa:	edd7 6a07 	vldr	s13, [r7, #28]
 80045ae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80045b2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80045b6:	ee17 2a90 	vmov	r2, s15
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80045be:	e008      	b.n	80045d2 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	2200      	movs	r2, #0
 80045c4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	2200      	movs	r2, #0
 80045ca:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	2200      	movs	r2, #0
 80045d0:	609a      	str	r2, [r3, #8]
}
 80045d2:	bf00      	nop
 80045d4:	3724      	adds	r7, #36	; 0x24
 80045d6:	46bd      	mov	sp, r7
 80045d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045dc:	4770      	bx	lr
 80045de:	bf00      	nop
 80045e0:	58024400 	.word	0x58024400
 80045e4:	03d09000 	.word	0x03d09000
 80045e8:	46000000 	.word	0x46000000
 80045ec:	4c742400 	.word	0x4c742400
 80045f0:	4a742400 	.word	0x4a742400
 80045f4:	4b895440 	.word	0x4b895440

080045f8 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 80045f8:	b480      	push	{r7}
 80045fa:	b089      	sub	sp, #36	; 0x24
 80045fc:	af00      	add	r7, sp, #0
 80045fe:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004600:	4ba1      	ldr	r3, [pc, #644]	; (8004888 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004602:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004604:	f003 0303 	and.w	r3, r3, #3
 8004608:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800460a:	4b9f      	ldr	r3, [pc, #636]	; (8004888 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800460c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800460e:	0d1b      	lsrs	r3, r3, #20
 8004610:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004614:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8004616:	4b9c      	ldr	r3, [pc, #624]	; (8004888 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004618:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800461a:	0a1b      	lsrs	r3, r3, #8
 800461c:	f003 0301 	and.w	r3, r3, #1
 8004620:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8004622:	4b99      	ldr	r3, [pc, #612]	; (8004888 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004624:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004626:	08db      	lsrs	r3, r3, #3
 8004628:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800462c:	693a      	ldr	r2, [r7, #16]
 800462e:	fb02 f303 	mul.w	r3, r2, r3
 8004632:	ee07 3a90 	vmov	s15, r3
 8004636:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800463a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800463e:	697b      	ldr	r3, [r7, #20]
 8004640:	2b00      	cmp	r3, #0
 8004642:	f000 8111 	beq.w	8004868 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8004646:	69bb      	ldr	r3, [r7, #24]
 8004648:	2b02      	cmp	r3, #2
 800464a:	f000 8083 	beq.w	8004754 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800464e:	69bb      	ldr	r3, [r7, #24]
 8004650:	2b02      	cmp	r3, #2
 8004652:	f200 80a1 	bhi.w	8004798 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8004656:	69bb      	ldr	r3, [r7, #24]
 8004658:	2b00      	cmp	r3, #0
 800465a:	d003      	beq.n	8004664 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800465c:	69bb      	ldr	r3, [r7, #24]
 800465e:	2b01      	cmp	r3, #1
 8004660:	d056      	beq.n	8004710 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8004662:	e099      	b.n	8004798 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004664:	4b88      	ldr	r3, [pc, #544]	; (8004888 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	f003 0320 	and.w	r3, r3, #32
 800466c:	2b00      	cmp	r3, #0
 800466e:	d02d      	beq.n	80046cc <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004670:	4b85      	ldr	r3, [pc, #532]	; (8004888 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	08db      	lsrs	r3, r3, #3
 8004676:	f003 0303 	and.w	r3, r3, #3
 800467a:	4a84      	ldr	r2, [pc, #528]	; (800488c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800467c:	fa22 f303 	lsr.w	r3, r2, r3
 8004680:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004682:	68bb      	ldr	r3, [r7, #8]
 8004684:	ee07 3a90 	vmov	s15, r3
 8004688:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800468c:	697b      	ldr	r3, [r7, #20]
 800468e:	ee07 3a90 	vmov	s15, r3
 8004692:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004696:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800469a:	4b7b      	ldr	r3, [pc, #492]	; (8004888 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800469c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800469e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80046a2:	ee07 3a90 	vmov	s15, r3
 80046a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80046aa:	ed97 6a03 	vldr	s12, [r7, #12]
 80046ae:	eddf 5a78 	vldr	s11, [pc, #480]	; 8004890 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80046b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80046b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80046ba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80046be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80046c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80046c6:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80046ca:	e087      	b.n	80047dc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80046cc:	697b      	ldr	r3, [r7, #20]
 80046ce:	ee07 3a90 	vmov	s15, r3
 80046d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80046d6:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8004894 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80046da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80046de:	4b6a      	ldr	r3, [pc, #424]	; (8004888 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80046e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80046e6:	ee07 3a90 	vmov	s15, r3
 80046ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80046ee:	ed97 6a03 	vldr	s12, [r7, #12]
 80046f2:	eddf 5a67 	vldr	s11, [pc, #412]	; 8004890 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80046f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80046fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80046fe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004702:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004706:	ee67 7a27 	vmul.f32	s15, s14, s15
 800470a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800470e:	e065      	b.n	80047dc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004710:	697b      	ldr	r3, [r7, #20]
 8004712:	ee07 3a90 	vmov	s15, r3
 8004716:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800471a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8004898 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800471e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004722:	4b59      	ldr	r3, [pc, #356]	; (8004888 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004724:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004726:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800472a:	ee07 3a90 	vmov	s15, r3
 800472e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004732:	ed97 6a03 	vldr	s12, [r7, #12]
 8004736:	eddf 5a56 	vldr	s11, [pc, #344]	; 8004890 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800473a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800473e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004742:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004746:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800474a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800474e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004752:	e043      	b.n	80047dc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004754:	697b      	ldr	r3, [r7, #20]
 8004756:	ee07 3a90 	vmov	s15, r3
 800475a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800475e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800489c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8004762:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004766:	4b48      	ldr	r3, [pc, #288]	; (8004888 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004768:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800476a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800476e:	ee07 3a90 	vmov	s15, r3
 8004772:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004776:	ed97 6a03 	vldr	s12, [r7, #12]
 800477a:	eddf 5a45 	vldr	s11, [pc, #276]	; 8004890 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800477e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004782:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004786:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800478a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800478e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004792:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004796:	e021      	b.n	80047dc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004798:	697b      	ldr	r3, [r7, #20]
 800479a:	ee07 3a90 	vmov	s15, r3
 800479e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80047a2:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8004898 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80047a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80047aa:	4b37      	ldr	r3, [pc, #220]	; (8004888 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80047ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80047b2:	ee07 3a90 	vmov	s15, r3
 80047b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80047ba:	ed97 6a03 	vldr	s12, [r7, #12]
 80047be:	eddf 5a34 	vldr	s11, [pc, #208]	; 8004890 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80047c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80047c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80047ca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80047ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80047d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80047d6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80047da:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 80047dc:	4b2a      	ldr	r3, [pc, #168]	; (8004888 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80047de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047e0:	0a5b      	lsrs	r3, r3, #9
 80047e2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80047e6:	ee07 3a90 	vmov	s15, r3
 80047ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80047ee:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80047f2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80047f6:	edd7 6a07 	vldr	s13, [r7, #28]
 80047fa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80047fe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004802:	ee17 2a90 	vmov	r2, s15
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800480a:	4b1f      	ldr	r3, [pc, #124]	; (8004888 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800480c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800480e:	0c1b      	lsrs	r3, r3, #16
 8004810:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004814:	ee07 3a90 	vmov	s15, r3
 8004818:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800481c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004820:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004824:	edd7 6a07 	vldr	s13, [r7, #28]
 8004828:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800482c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004830:	ee17 2a90 	vmov	r2, s15
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8004838:	4b13      	ldr	r3, [pc, #76]	; (8004888 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800483a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800483c:	0e1b      	lsrs	r3, r3, #24
 800483e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004842:	ee07 3a90 	vmov	s15, r3
 8004846:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800484a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800484e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004852:	edd7 6a07 	vldr	s13, [r7, #28]
 8004856:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800485a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800485e:	ee17 2a90 	vmov	r2, s15
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8004866:	e008      	b.n	800487a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	2200      	movs	r2, #0
 800486c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	2200      	movs	r2, #0
 8004872:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	2200      	movs	r2, #0
 8004878:	609a      	str	r2, [r3, #8]
}
 800487a:	bf00      	nop
 800487c:	3724      	adds	r7, #36	; 0x24
 800487e:	46bd      	mov	sp, r7
 8004880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004884:	4770      	bx	lr
 8004886:	bf00      	nop
 8004888:	58024400 	.word	0x58024400
 800488c:	03d09000 	.word	0x03d09000
 8004890:	46000000 	.word	0x46000000
 8004894:	4c742400 	.word	0x4c742400
 8004898:	4a742400 	.word	0x4a742400
 800489c:	4b895440 	.word	0x4b895440

080048a0 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 80048a0:	b480      	push	{r7}
 80048a2:	b089      	sub	sp, #36	; 0x24
 80048a4:	af00      	add	r7, sp, #0
 80048a6:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80048a8:	4ba0      	ldr	r3, [pc, #640]	; (8004b2c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80048aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048ac:	f003 0303 	and.w	r3, r3, #3
 80048b0:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 80048b2:	4b9e      	ldr	r3, [pc, #632]	; (8004b2c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80048b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048b6:	091b      	lsrs	r3, r3, #4
 80048b8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80048bc:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 80048be:	4b9b      	ldr	r3, [pc, #620]	; (8004b2c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80048c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048c2:	f003 0301 	and.w	r3, r3, #1
 80048c6:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80048c8:	4b98      	ldr	r3, [pc, #608]	; (8004b2c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80048ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80048cc:	08db      	lsrs	r3, r3, #3
 80048ce:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80048d2:	693a      	ldr	r2, [r7, #16]
 80048d4:	fb02 f303 	mul.w	r3, r2, r3
 80048d8:	ee07 3a90 	vmov	s15, r3
 80048dc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80048e0:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 80048e4:	697b      	ldr	r3, [r7, #20]
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	f000 8111 	beq.w	8004b0e <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 80048ec:	69bb      	ldr	r3, [r7, #24]
 80048ee:	2b02      	cmp	r3, #2
 80048f0:	f000 8083 	beq.w	80049fa <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 80048f4:	69bb      	ldr	r3, [r7, #24]
 80048f6:	2b02      	cmp	r3, #2
 80048f8:	f200 80a1 	bhi.w	8004a3e <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 80048fc:	69bb      	ldr	r3, [r7, #24]
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d003      	beq.n	800490a <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8004902:	69bb      	ldr	r3, [r7, #24]
 8004904:	2b01      	cmp	r3, #1
 8004906:	d056      	beq.n	80049b6 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8004908:	e099      	b.n	8004a3e <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800490a:	4b88      	ldr	r3, [pc, #544]	; (8004b2c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	f003 0320 	and.w	r3, r3, #32
 8004912:	2b00      	cmp	r3, #0
 8004914:	d02d      	beq.n	8004972 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004916:	4b85      	ldr	r3, [pc, #532]	; (8004b2c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	08db      	lsrs	r3, r3, #3
 800491c:	f003 0303 	and.w	r3, r3, #3
 8004920:	4a83      	ldr	r2, [pc, #524]	; (8004b30 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8004922:	fa22 f303 	lsr.w	r3, r2, r3
 8004926:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004928:	68bb      	ldr	r3, [r7, #8]
 800492a:	ee07 3a90 	vmov	s15, r3
 800492e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004932:	697b      	ldr	r3, [r7, #20]
 8004934:	ee07 3a90 	vmov	s15, r3
 8004938:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800493c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004940:	4b7a      	ldr	r3, [pc, #488]	; (8004b2c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8004942:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004944:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004948:	ee07 3a90 	vmov	s15, r3
 800494c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004950:	ed97 6a03 	vldr	s12, [r7, #12]
 8004954:	eddf 5a77 	vldr	s11, [pc, #476]	; 8004b34 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8004958:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800495c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004960:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004964:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004968:	ee67 7a27 	vmul.f32	s15, s14, s15
 800496c:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8004970:	e087      	b.n	8004a82 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004972:	697b      	ldr	r3, [r7, #20]
 8004974:	ee07 3a90 	vmov	s15, r3
 8004978:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800497c:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8004b38 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8004980:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004984:	4b69      	ldr	r3, [pc, #420]	; (8004b2c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8004986:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004988:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800498c:	ee07 3a90 	vmov	s15, r3
 8004990:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004994:	ed97 6a03 	vldr	s12, [r7, #12]
 8004998:	eddf 5a66 	vldr	s11, [pc, #408]	; 8004b34 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800499c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80049a0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80049a4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80049a8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80049ac:	ee67 7a27 	vmul.f32	s15, s14, s15
 80049b0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80049b4:	e065      	b.n	8004a82 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80049b6:	697b      	ldr	r3, [r7, #20]
 80049b8:	ee07 3a90 	vmov	s15, r3
 80049bc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80049c0:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8004b3c <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 80049c4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80049c8:	4b58      	ldr	r3, [pc, #352]	; (8004b2c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80049ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80049d0:	ee07 3a90 	vmov	s15, r3
 80049d4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80049d8:	ed97 6a03 	vldr	s12, [r7, #12]
 80049dc:	eddf 5a55 	vldr	s11, [pc, #340]	; 8004b34 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80049e0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80049e4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80049e8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80049ec:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80049f0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80049f4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80049f8:	e043      	b.n	8004a82 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80049fa:	697b      	ldr	r3, [r7, #20]
 80049fc:	ee07 3a90 	vmov	s15, r3
 8004a00:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a04:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8004b40 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8004a08:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004a0c:	4b47      	ldr	r3, [pc, #284]	; (8004b2c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8004a0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a10:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a14:	ee07 3a90 	vmov	s15, r3
 8004a18:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004a1c:	ed97 6a03 	vldr	s12, [r7, #12]
 8004a20:	eddf 5a44 	vldr	s11, [pc, #272]	; 8004b34 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8004a24:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004a28:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004a2c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004a30:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004a34:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a38:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004a3c:	e021      	b.n	8004a82 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    default:
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004a3e:	697b      	ldr	r3, [r7, #20]
 8004a40:	ee07 3a90 	vmov	s15, r3
 8004a44:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a48:	eddf 6a3b 	vldr	s13, [pc, #236]	; 8004b38 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8004a4c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004a50:	4b36      	ldr	r3, [pc, #216]	; (8004b2c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8004a52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a54:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a58:	ee07 3a90 	vmov	s15, r3
 8004a5c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004a60:	ed97 6a03 	vldr	s12, [r7, #12]
 8004a64:	eddf 5a33 	vldr	s11, [pc, #204]	; 8004b34 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8004a68:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004a6c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004a70:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004a74:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004a78:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a7c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004a80:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 8004a82:	4b2a      	ldr	r3, [pc, #168]	; (8004b2c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8004a84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a86:	0a5b      	lsrs	r3, r3, #9
 8004a88:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004a8c:	ee07 3a90 	vmov	s15, r3
 8004a90:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a94:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004a98:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004a9c:	edd7 6a07 	vldr	s13, [r7, #28]
 8004aa0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004aa4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004aa8:	ee17 2a90 	vmov	r2, s15
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 8004ab0:	4b1e      	ldr	r3, [pc, #120]	; (8004b2c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8004ab2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ab4:	0c1b      	lsrs	r3, r3, #16
 8004ab6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004aba:	ee07 3a90 	vmov	s15, r3
 8004abe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ac2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004ac6:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004aca:	edd7 6a07 	vldr	s13, [r7, #28]
 8004ace:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004ad2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004ad6:	ee17 2a90 	vmov	r2, s15
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 8004ade:	4b13      	ldr	r3, [pc, #76]	; (8004b2c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8004ae0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ae2:	0e1b      	lsrs	r3, r3, #24
 8004ae4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004ae8:	ee07 3a90 	vmov	s15, r3
 8004aec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004af0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004af4:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004af8:	edd7 6a07 	vldr	s13, [r7, #28]
 8004afc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004b00:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004b04:	ee17 2a90 	vmov	r2, s15
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8004b0c:	e008      	b.n	8004b20 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	2200      	movs	r2, #0
 8004b12:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	2200      	movs	r2, #0
 8004b18:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	2200      	movs	r2, #0
 8004b1e:	609a      	str	r2, [r3, #8]
}
 8004b20:	bf00      	nop
 8004b22:	3724      	adds	r7, #36	; 0x24
 8004b24:	46bd      	mov	sp, r7
 8004b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b2a:	4770      	bx	lr
 8004b2c:	58024400 	.word	0x58024400
 8004b30:	03d09000 	.word	0x03d09000
 8004b34:	46000000 	.word	0x46000000
 8004b38:	4c742400 	.word	0x4c742400
 8004b3c:	4a742400 	.word	0x4a742400
 8004b40:	4b895440 	.word	0x4b895440

08004b44 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8004b44:	b580      	push	{r7, lr}
 8004b46:	b084      	sub	sp, #16
 8004b48:	af00      	add	r7, sp, #0
 8004b4a:	6078      	str	r0, [r7, #4]
 8004b4c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004b4e:	2300      	movs	r3, #0
 8004b50:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004b52:	4b53      	ldr	r3, [pc, #332]	; (8004ca0 <RCCEx_PLL2_Config+0x15c>)
 8004b54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b56:	f003 0303 	and.w	r3, r3, #3
 8004b5a:	2b03      	cmp	r3, #3
 8004b5c:	d101      	bne.n	8004b62 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8004b5e:	2301      	movs	r3, #1
 8004b60:	e099      	b.n	8004c96 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8004b62:	4b4f      	ldr	r3, [pc, #316]	; (8004ca0 <RCCEx_PLL2_Config+0x15c>)
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	4a4e      	ldr	r2, [pc, #312]	; (8004ca0 <RCCEx_PLL2_Config+0x15c>)
 8004b68:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004b6c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004b6e:	f7fc fb0b 	bl	8001188 <HAL_GetTick>
 8004b72:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004b74:	e008      	b.n	8004b88 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8004b76:	f7fc fb07 	bl	8001188 <HAL_GetTick>
 8004b7a:	4602      	mov	r2, r0
 8004b7c:	68bb      	ldr	r3, [r7, #8]
 8004b7e:	1ad3      	subs	r3, r2, r3
 8004b80:	2b02      	cmp	r3, #2
 8004b82:	d901      	bls.n	8004b88 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004b84:	2303      	movs	r3, #3
 8004b86:	e086      	b.n	8004c96 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004b88:	4b45      	ldr	r3, [pc, #276]	; (8004ca0 <RCCEx_PLL2_Config+0x15c>)
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d1f0      	bne.n	8004b76 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8004b94:	4b42      	ldr	r3, [pc, #264]	; (8004ca0 <RCCEx_PLL2_Config+0x15c>)
 8004b96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b98:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	031b      	lsls	r3, r3, #12
 8004ba2:	493f      	ldr	r1, [pc, #252]	; (8004ca0 <RCCEx_PLL2_Config+0x15c>)
 8004ba4:	4313      	orrs	r3, r2
 8004ba6:	628b      	str	r3, [r1, #40]	; 0x28
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	685b      	ldr	r3, [r3, #4]
 8004bac:	3b01      	subs	r3, #1
 8004bae:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	689b      	ldr	r3, [r3, #8]
 8004bb6:	3b01      	subs	r3, #1
 8004bb8:	025b      	lsls	r3, r3, #9
 8004bba:	b29b      	uxth	r3, r3
 8004bbc:	431a      	orrs	r2, r3
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	68db      	ldr	r3, [r3, #12]
 8004bc2:	3b01      	subs	r3, #1
 8004bc4:	041b      	lsls	r3, r3, #16
 8004bc6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004bca:	431a      	orrs	r2, r3
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	691b      	ldr	r3, [r3, #16]
 8004bd0:	3b01      	subs	r3, #1
 8004bd2:	061b      	lsls	r3, r3, #24
 8004bd4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004bd8:	4931      	ldr	r1, [pc, #196]	; (8004ca0 <RCCEx_PLL2_Config+0x15c>)
 8004bda:	4313      	orrs	r3, r2
 8004bdc:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8004bde:	4b30      	ldr	r3, [pc, #192]	; (8004ca0 <RCCEx_PLL2_Config+0x15c>)
 8004be0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004be2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	695b      	ldr	r3, [r3, #20]
 8004bea:	492d      	ldr	r1, [pc, #180]	; (8004ca0 <RCCEx_PLL2_Config+0x15c>)
 8004bec:	4313      	orrs	r3, r2
 8004bee:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8004bf0:	4b2b      	ldr	r3, [pc, #172]	; (8004ca0 <RCCEx_PLL2_Config+0x15c>)
 8004bf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bf4:	f023 0220 	bic.w	r2, r3, #32
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	699b      	ldr	r3, [r3, #24]
 8004bfc:	4928      	ldr	r1, [pc, #160]	; (8004ca0 <RCCEx_PLL2_Config+0x15c>)
 8004bfe:	4313      	orrs	r3, r2
 8004c00:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8004c02:	4b27      	ldr	r3, [pc, #156]	; (8004ca0 <RCCEx_PLL2_Config+0x15c>)
 8004c04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c06:	4a26      	ldr	r2, [pc, #152]	; (8004ca0 <RCCEx_PLL2_Config+0x15c>)
 8004c08:	f023 0310 	bic.w	r3, r3, #16
 8004c0c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8004c0e:	4b24      	ldr	r3, [pc, #144]	; (8004ca0 <RCCEx_PLL2_Config+0x15c>)
 8004c10:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004c12:	4b24      	ldr	r3, [pc, #144]	; (8004ca4 <RCCEx_PLL2_Config+0x160>)
 8004c14:	4013      	ands	r3, r2
 8004c16:	687a      	ldr	r2, [r7, #4]
 8004c18:	69d2      	ldr	r2, [r2, #28]
 8004c1a:	00d2      	lsls	r2, r2, #3
 8004c1c:	4920      	ldr	r1, [pc, #128]	; (8004ca0 <RCCEx_PLL2_Config+0x15c>)
 8004c1e:	4313      	orrs	r3, r2
 8004c20:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8004c22:	4b1f      	ldr	r3, [pc, #124]	; (8004ca0 <RCCEx_PLL2_Config+0x15c>)
 8004c24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c26:	4a1e      	ldr	r2, [pc, #120]	; (8004ca0 <RCCEx_PLL2_Config+0x15c>)
 8004c28:	f043 0310 	orr.w	r3, r3, #16
 8004c2c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8004c2e:	683b      	ldr	r3, [r7, #0]
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d106      	bne.n	8004c42 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8004c34:	4b1a      	ldr	r3, [pc, #104]	; (8004ca0 <RCCEx_PLL2_Config+0x15c>)
 8004c36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c38:	4a19      	ldr	r2, [pc, #100]	; (8004ca0 <RCCEx_PLL2_Config+0x15c>)
 8004c3a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004c3e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004c40:	e00f      	b.n	8004c62 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8004c42:	683b      	ldr	r3, [r7, #0]
 8004c44:	2b01      	cmp	r3, #1
 8004c46:	d106      	bne.n	8004c56 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8004c48:	4b15      	ldr	r3, [pc, #84]	; (8004ca0 <RCCEx_PLL2_Config+0x15c>)
 8004c4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c4c:	4a14      	ldr	r2, [pc, #80]	; (8004ca0 <RCCEx_PLL2_Config+0x15c>)
 8004c4e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004c52:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004c54:	e005      	b.n	8004c62 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8004c56:	4b12      	ldr	r3, [pc, #72]	; (8004ca0 <RCCEx_PLL2_Config+0x15c>)
 8004c58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c5a:	4a11      	ldr	r2, [pc, #68]	; (8004ca0 <RCCEx_PLL2_Config+0x15c>)
 8004c5c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004c60:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8004c62:	4b0f      	ldr	r3, [pc, #60]	; (8004ca0 <RCCEx_PLL2_Config+0x15c>)
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	4a0e      	ldr	r2, [pc, #56]	; (8004ca0 <RCCEx_PLL2_Config+0x15c>)
 8004c68:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004c6c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004c6e:	f7fc fa8b 	bl	8001188 <HAL_GetTick>
 8004c72:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004c74:	e008      	b.n	8004c88 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8004c76:	f7fc fa87 	bl	8001188 <HAL_GetTick>
 8004c7a:	4602      	mov	r2, r0
 8004c7c:	68bb      	ldr	r3, [r7, #8]
 8004c7e:	1ad3      	subs	r3, r2, r3
 8004c80:	2b02      	cmp	r3, #2
 8004c82:	d901      	bls.n	8004c88 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004c84:	2303      	movs	r3, #3
 8004c86:	e006      	b.n	8004c96 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004c88:	4b05      	ldr	r3, [pc, #20]	; (8004ca0 <RCCEx_PLL2_Config+0x15c>)
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d0f0      	beq.n	8004c76 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8004c94:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c96:	4618      	mov	r0, r3
 8004c98:	3710      	adds	r7, #16
 8004c9a:	46bd      	mov	sp, r7
 8004c9c:	bd80      	pop	{r7, pc}
 8004c9e:	bf00      	nop
 8004ca0:	58024400 	.word	0x58024400
 8004ca4:	ffff0007 	.word	0xffff0007

08004ca8 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8004ca8:	b580      	push	{r7, lr}
 8004caa:	b084      	sub	sp, #16
 8004cac:	af00      	add	r7, sp, #0
 8004cae:	6078      	str	r0, [r7, #4]
 8004cb0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004cb2:	2300      	movs	r3, #0
 8004cb4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004cb6:	4b53      	ldr	r3, [pc, #332]	; (8004e04 <RCCEx_PLL3_Config+0x15c>)
 8004cb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cba:	f003 0303 	and.w	r3, r3, #3
 8004cbe:	2b03      	cmp	r3, #3
 8004cc0:	d101      	bne.n	8004cc6 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8004cc2:	2301      	movs	r3, #1
 8004cc4:	e099      	b.n	8004dfa <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8004cc6:	4b4f      	ldr	r3, [pc, #316]	; (8004e04 <RCCEx_PLL3_Config+0x15c>)
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	4a4e      	ldr	r2, [pc, #312]	; (8004e04 <RCCEx_PLL3_Config+0x15c>)
 8004ccc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004cd0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004cd2:	f7fc fa59 	bl	8001188 <HAL_GetTick>
 8004cd6:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004cd8:	e008      	b.n	8004cec <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8004cda:	f7fc fa55 	bl	8001188 <HAL_GetTick>
 8004cde:	4602      	mov	r2, r0
 8004ce0:	68bb      	ldr	r3, [r7, #8]
 8004ce2:	1ad3      	subs	r3, r2, r3
 8004ce4:	2b02      	cmp	r3, #2
 8004ce6:	d901      	bls.n	8004cec <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004ce8:	2303      	movs	r3, #3
 8004cea:	e086      	b.n	8004dfa <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004cec:	4b45      	ldr	r3, [pc, #276]	; (8004e04 <RCCEx_PLL3_Config+0x15c>)
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d1f0      	bne.n	8004cda <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8004cf8:	4b42      	ldr	r3, [pc, #264]	; (8004e04 <RCCEx_PLL3_Config+0x15c>)
 8004cfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cfc:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	051b      	lsls	r3, r3, #20
 8004d06:	493f      	ldr	r1, [pc, #252]	; (8004e04 <RCCEx_PLL3_Config+0x15c>)
 8004d08:	4313      	orrs	r3, r2
 8004d0a:	628b      	str	r3, [r1, #40]	; 0x28
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	685b      	ldr	r3, [r3, #4]
 8004d10:	3b01      	subs	r3, #1
 8004d12:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	689b      	ldr	r3, [r3, #8]
 8004d1a:	3b01      	subs	r3, #1
 8004d1c:	025b      	lsls	r3, r3, #9
 8004d1e:	b29b      	uxth	r3, r3
 8004d20:	431a      	orrs	r2, r3
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	68db      	ldr	r3, [r3, #12]
 8004d26:	3b01      	subs	r3, #1
 8004d28:	041b      	lsls	r3, r3, #16
 8004d2a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004d2e:	431a      	orrs	r2, r3
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	691b      	ldr	r3, [r3, #16]
 8004d34:	3b01      	subs	r3, #1
 8004d36:	061b      	lsls	r3, r3, #24
 8004d38:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004d3c:	4931      	ldr	r1, [pc, #196]	; (8004e04 <RCCEx_PLL3_Config+0x15c>)
 8004d3e:	4313      	orrs	r3, r2
 8004d40:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8004d42:	4b30      	ldr	r3, [pc, #192]	; (8004e04 <RCCEx_PLL3_Config+0x15c>)
 8004d44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d46:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	695b      	ldr	r3, [r3, #20]
 8004d4e:	492d      	ldr	r1, [pc, #180]	; (8004e04 <RCCEx_PLL3_Config+0x15c>)
 8004d50:	4313      	orrs	r3, r2
 8004d52:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8004d54:	4b2b      	ldr	r3, [pc, #172]	; (8004e04 <RCCEx_PLL3_Config+0x15c>)
 8004d56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d58:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	699b      	ldr	r3, [r3, #24]
 8004d60:	4928      	ldr	r1, [pc, #160]	; (8004e04 <RCCEx_PLL3_Config+0x15c>)
 8004d62:	4313      	orrs	r3, r2
 8004d64:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8004d66:	4b27      	ldr	r3, [pc, #156]	; (8004e04 <RCCEx_PLL3_Config+0x15c>)
 8004d68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d6a:	4a26      	ldr	r2, [pc, #152]	; (8004e04 <RCCEx_PLL3_Config+0x15c>)
 8004d6c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004d70:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8004d72:	4b24      	ldr	r3, [pc, #144]	; (8004e04 <RCCEx_PLL3_Config+0x15c>)
 8004d74:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004d76:	4b24      	ldr	r3, [pc, #144]	; (8004e08 <RCCEx_PLL3_Config+0x160>)
 8004d78:	4013      	ands	r3, r2
 8004d7a:	687a      	ldr	r2, [r7, #4]
 8004d7c:	69d2      	ldr	r2, [r2, #28]
 8004d7e:	00d2      	lsls	r2, r2, #3
 8004d80:	4920      	ldr	r1, [pc, #128]	; (8004e04 <RCCEx_PLL3_Config+0x15c>)
 8004d82:	4313      	orrs	r3, r2
 8004d84:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8004d86:	4b1f      	ldr	r3, [pc, #124]	; (8004e04 <RCCEx_PLL3_Config+0x15c>)
 8004d88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d8a:	4a1e      	ldr	r2, [pc, #120]	; (8004e04 <RCCEx_PLL3_Config+0x15c>)
 8004d8c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004d90:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8004d92:	683b      	ldr	r3, [r7, #0]
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d106      	bne.n	8004da6 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8004d98:	4b1a      	ldr	r3, [pc, #104]	; (8004e04 <RCCEx_PLL3_Config+0x15c>)
 8004d9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d9c:	4a19      	ldr	r2, [pc, #100]	; (8004e04 <RCCEx_PLL3_Config+0x15c>)
 8004d9e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004da2:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004da4:	e00f      	b.n	8004dc6 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8004da6:	683b      	ldr	r3, [r7, #0]
 8004da8:	2b01      	cmp	r3, #1
 8004daa:	d106      	bne.n	8004dba <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8004dac:	4b15      	ldr	r3, [pc, #84]	; (8004e04 <RCCEx_PLL3_Config+0x15c>)
 8004dae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004db0:	4a14      	ldr	r2, [pc, #80]	; (8004e04 <RCCEx_PLL3_Config+0x15c>)
 8004db2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004db6:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004db8:	e005      	b.n	8004dc6 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8004dba:	4b12      	ldr	r3, [pc, #72]	; (8004e04 <RCCEx_PLL3_Config+0x15c>)
 8004dbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dbe:	4a11      	ldr	r2, [pc, #68]	; (8004e04 <RCCEx_PLL3_Config+0x15c>)
 8004dc0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004dc4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8004dc6:	4b0f      	ldr	r3, [pc, #60]	; (8004e04 <RCCEx_PLL3_Config+0x15c>)
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	4a0e      	ldr	r2, [pc, #56]	; (8004e04 <RCCEx_PLL3_Config+0x15c>)
 8004dcc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004dd0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004dd2:	f7fc f9d9 	bl	8001188 <HAL_GetTick>
 8004dd6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004dd8:	e008      	b.n	8004dec <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8004dda:	f7fc f9d5 	bl	8001188 <HAL_GetTick>
 8004dde:	4602      	mov	r2, r0
 8004de0:	68bb      	ldr	r3, [r7, #8]
 8004de2:	1ad3      	subs	r3, r2, r3
 8004de4:	2b02      	cmp	r3, #2
 8004de6:	d901      	bls.n	8004dec <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004de8:	2303      	movs	r3, #3
 8004dea:	e006      	b.n	8004dfa <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004dec:	4b05      	ldr	r3, [pc, #20]	; (8004e04 <RCCEx_PLL3_Config+0x15c>)
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d0f0      	beq.n	8004dda <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8004df8:	7bfb      	ldrb	r3, [r7, #15]
}
 8004dfa:	4618      	mov	r0, r3
 8004dfc:	3710      	adds	r7, #16
 8004dfe:	46bd      	mov	sp, r7
 8004e00:	bd80      	pop	{r7, pc}
 8004e02:	bf00      	nop
 8004e04:	58024400 	.word	0x58024400
 8004e08:	ffff0007 	.word	0xffff0007

08004e0c <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8004e0c:	b580      	push	{r7, lr}
 8004e0e:	b08a      	sub	sp, #40	; 0x28
 8004e10:	af00      	add	r7, sp, #0
 8004e12:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade;
  uint32_t unitsize;
  uint32_t tickstart;

  /* Check the SD handle allocation */
  if (hsd == NULL)
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d101      	bne.n	8004e1e <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8004e1a:	2301      	movs	r3, #1
 8004e1c:	e075      	b.n	8004f0a <HAL_SD_Init+0xfe>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if (hsd->State == HAL_SD_STATE_RESET)
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004e24:	b2db      	uxtb	r3, r3
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d105      	bne.n	8004e36 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	2200      	movs	r2, #0
 8004e2e:	761a      	strb	r2, [r3, #24]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8004e30:	6878      	ldr	r0, [r7, #4]
 8004e32:	f7fb fec1 	bl	8000bb8 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	2203      	movs	r2, #3
 8004e3a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8004e3e:	6878      	ldr	r0, [r7, #4]
 8004e40:	f000 f868 	bl	8004f14 <HAL_SD_InitCard>
 8004e44:	4603      	mov	r3, r0
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d001      	beq.n	8004e4e <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8004e4a:	2301      	movs	r3, #1
 8004e4c:	e05d      	b.n	8004f0a <HAL_SD_Init+0xfe>
  }

  if (HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 8004e4e:	f107 0308 	add.w	r3, r7, #8
 8004e52:	4619      	mov	r1, r3
 8004e54:	6878      	ldr	r0, [r7, #4]
 8004e56:	f000 fa95 	bl	8005384 <HAL_SD_GetCardStatus>
 8004e5a:	4603      	mov	r3, r0
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d001      	beq.n	8004e64 <HAL_SD_Init+0x58>
  {
    return HAL_ERROR;
 8004e60:	2301      	movs	r3, #1
 8004e62:	e052      	b.n	8004f0a <HAL_SD_Init+0xfe>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 8004e64:	7e3b      	ldrb	r3, [r7, #24]
 8004e66:	b2db      	uxtb	r3, r3
 8004e68:	627b      	str	r3, [r7, #36]	; 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 8004e6a:	7e7b      	ldrb	r3, [r7, #25]
 8004e6c:	b2db      	uxtb	r3, r3
 8004e6e:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e74:	2b01      	cmp	r3, #1
 8004e76:	d10a      	bne.n	8004e8e <HAL_SD_Init+0x82>
 8004e78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d102      	bne.n	8004e84 <HAL_SD_Init+0x78>
 8004e7e:	6a3b      	ldr	r3, [r7, #32]
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d004      	beq.n	8004e8e <HAL_SD_Init+0x82>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004e8a:	659a      	str	r2, [r3, #88]	; 0x58
 8004e8c:	e00b      	b.n	8004ea6 <HAL_SD_Init+0x9a>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e92:	2b01      	cmp	r3, #1
 8004e94:	d104      	bne.n	8004ea0 <HAL_SD_Init+0x94>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004e9c:	659a      	str	r2, [r3, #88]	; 0x58
 8004e9e:	e002      	b.n	8004ea6 <HAL_SD_Init+0x9a>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	2200      	movs	r2, #0
 8004ea4:	659a      	str	r2, [r3, #88]	; 0x58
    }

  }
  /* Configure the bus wide */
  if (HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	68db      	ldr	r3, [r3, #12]
 8004eaa:	4619      	mov	r1, r3
 8004eac:	6878      	ldr	r0, [r7, #4]
 8004eae:	f000 fb1f 	bl	80054f0 <HAL_SD_ConfigWideBusOperation>
 8004eb2:	4603      	mov	r3, r0
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d001      	beq.n	8004ebc <HAL_SD_Init+0xb0>
  {
    return HAL_ERROR;
 8004eb8:	2301      	movs	r3, #1
 8004eba:	e026      	b.n	8004f0a <HAL_SD_Init+0xfe>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 8004ebc:	f7fc f964 	bl	8001188 <HAL_GetTick>
 8004ec0:	61f8      	str	r0, [r7, #28]
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8004ec2:	e011      	b.n	8004ee8 <HAL_SD_Init+0xdc>
  {
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8004ec4:	f7fc f960 	bl	8001188 <HAL_GetTick>
 8004ec8:	4602      	mov	r2, r0
 8004eca:	69fb      	ldr	r3, [r7, #28]
 8004ecc:	1ad3      	subs	r3, r2, r3
 8004ece:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004ed2:	d109      	bne.n	8004ee8 <HAL_SD_Init+0xdc>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004eda:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	2201      	movs	r2, #1
 8004ee0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      return HAL_TIMEOUT;
 8004ee4:	2303      	movs	r3, #3
 8004ee6:	e010      	b.n	8004f0a <HAL_SD_Init+0xfe>
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8004ee8:	6878      	ldr	r0, [r7, #4]
 8004eea:	f000 fc11 	bl	8005710 <HAL_SD_GetCardState>
 8004eee:	4603      	mov	r3, r0
 8004ef0:	2b04      	cmp	r3, #4
 8004ef2:	d1e7      	bne.n	8004ec4 <HAL_SD_Init+0xb8>
    }
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	2200      	movs	r2, #0
 8004ef8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	2200      	movs	r2, #0
 8004efe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	2201      	movs	r2, #1
 8004f04:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return HAL_OK;
 8004f08:	2300      	movs	r3, #0
}
 8004f0a:	4618      	mov	r0, r3
 8004f0c:	3728      	adds	r7, #40	; 0x28
 8004f0e:	46bd      	mov	sp, r7
 8004f10:	bd80      	pop	{r7, pc}
	...

08004f14 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8004f14:	b590      	push	{r4, r7, lr}
 8004f16:	b08d      	sub	sp, #52	; 0x34
 8004f18:	af02      	add	r7, sp, #8
 8004f1a:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8004f1c:	2300      	movs	r3, #0
 8004f1e:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8004f20:	2300      	movs	r3, #0
 8004f22:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8004f24:	2300      	movs	r3, #0
 8004f26:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8004f28:	2300      	movs	r3, #0
 8004f2a:	61bb      	str	r3, [r7, #24]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 8004f2c:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8004f30:	f7fe fd26 	bl	8003980 <HAL_RCCEx_GetPeriphCLKFreq>
 8004f34:	6278      	str	r0, [r7, #36]	; 0x24
  if (sdmmc_clk == 0U)
 8004f36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d109      	bne.n	8004f50 <HAL_SD_InitCard+0x3c>
  {
    hsd->State = HAL_SD_STATE_READY;
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	2201      	movs	r2, #1
 8004f40:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004f4a:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8004f4c:	2301      	movs	r3, #1
 8004f4e:	e06a      	b.n	8005026 <HAL_SD_InitCard+0x112>
  }
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 8004f50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f52:	0a1b      	lsrs	r3, r3, #8
 8004f54:	4a36      	ldr	r2, [pc, #216]	; (8005030 <HAL_SD_InitCard+0x11c>)
 8004f56:	fba2 2303 	umull	r2, r3, r2, r3
 8004f5a:	091b      	lsrs	r3, r3, #4
 8004f5c:	61fb      	str	r3, [r7, #28]
  /* Set Transceiver polarity */
  hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
#endif /* USE_SD_TRANSCEIVER  */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681c      	ldr	r4, [r3, #0]
 8004f62:	466a      	mov	r2, sp
 8004f64:	f107 0318 	add.w	r3, r7, #24
 8004f68:	e893 0003 	ldmia.w	r3, {r0, r1}
 8004f6c:	e882 0003 	stmia.w	r2, {r0, r1}
 8004f70:	f107 030c 	add.w	r3, r7, #12
 8004f74:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004f76:	4620      	mov	r0, r4
 8004f78:	f001 ffb8 	bl	8006eec <SDMMC_Init>

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	4618      	mov	r0, r3
 8004f82:	f001 ffea 	bl	8006f5a <SDMMC_PowerState_ON>

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
  sdmmc_clk = sdmmc_clk / (2U * Init.ClockDiv);
 8004f86:	69fb      	ldr	r3, [r7, #28]
 8004f88:	005b      	lsls	r3, r3, #1
 8004f8a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f90:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_Delay(1U + (74U * 1000U / (sdmmc_clk)));
 8004f92:	4a28      	ldr	r2, [pc, #160]	; (8005034 <HAL_SD_InitCard+0x120>)
 8004f94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f96:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f9a:	3301      	adds	r3, #1
 8004f9c:	4618      	mov	r0, r3
 8004f9e:	f7fc f8ff 	bl	80011a0 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8004fa2:	6878      	ldr	r0, [r7, #4]
 8004fa4:	f000 fc90 	bl	80058c8 <SD_PowerON>
 8004fa8:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8004faa:	6a3b      	ldr	r3, [r7, #32]
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d00b      	beq.n	8004fc8 <HAL_SD_InitCard+0xb4>
  {
    hsd->State = HAL_SD_STATE_READY;
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	2201      	movs	r2, #1
 8004fb4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode |= errorstate;
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004fbc:	6a3b      	ldr	r3, [r7, #32]
 8004fbe:	431a      	orrs	r2, r3
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8004fc4:	2301      	movs	r3, #1
 8004fc6:	e02e      	b.n	8005026 <HAL_SD_InitCard+0x112>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8004fc8:	6878      	ldr	r0, [r7, #4]
 8004fca:	f000 fbc1 	bl	8005750 <SD_InitCard>
 8004fce:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8004fd0:	6a3b      	ldr	r3, [r7, #32]
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d00b      	beq.n	8004fee <HAL_SD_InitCard+0xda>
  {
    hsd->State = HAL_SD_STATE_READY;
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	2201      	movs	r2, #1
 8004fda:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode |= errorstate;
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004fe2:	6a3b      	ldr	r3, [r7, #32]
 8004fe4:	431a      	orrs	r2, r3
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8004fea:	2301      	movs	r3, #1
 8004fec:	e01b      	b.n	8005026 <HAL_SD_InitCard+0x112>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004ff6:	4618      	mov	r0, r3
 8004ff8:	f002 f844 	bl	8007084 <SDMMC_CmdBlockLength>
 8004ffc:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8004ffe:	6a3b      	ldr	r3, [r7, #32]
 8005000:	2b00      	cmp	r3, #0
 8005002:	d00f      	beq.n	8005024 <HAL_SD_InitCard+0x110>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	4a0b      	ldr	r2, [pc, #44]	; (8005038 <HAL_SD_InitCard+0x124>)
 800500a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005010:	6a3b      	ldr	r3, [r7, #32]
 8005012:	431a      	orrs	r2, r3
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	2201      	movs	r2, #1
 800501c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    return HAL_ERROR;
 8005020:	2301      	movs	r3, #1
 8005022:	e000      	b.n	8005026 <HAL_SD_InitCard+0x112>
  }

  return HAL_OK;
 8005024:	2300      	movs	r3, #0
}
 8005026:	4618      	mov	r0, r3
 8005028:	372c      	adds	r7, #44	; 0x2c
 800502a:	46bd      	mov	sp, r7
 800502c:	bd90      	pop	{r4, r7, pc}
 800502e:	bf00      	nop
 8005030:	014f8b59 	.word	0x014f8b59
 8005034:	00012110 	.word	0x00012110
 8005038:	1fe00fff 	.word	0x1fe00fff

0800503c <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800503c:	b480      	push	{r7}
 800503e:	b083      	sub	sp, #12
 8005040:	af00      	add	r7, sp, #0
 8005042:	6078      	str	r0, [r7, #4]
 8005044:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800504a:	0f9b      	lsrs	r3, r3, #30
 800504c:	b2da      	uxtb	r2, r3
 800504e:	683b      	ldr	r3, [r7, #0]
 8005050:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005056:	0e9b      	lsrs	r3, r3, #26
 8005058:	b2db      	uxtb	r3, r3
 800505a:	f003 030f 	and.w	r3, r3, #15
 800505e:	b2da      	uxtb	r2, r3
 8005060:	683b      	ldr	r3, [r7, #0]
 8005062:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005068:	0e1b      	lsrs	r3, r3, #24
 800506a:	b2db      	uxtb	r3, r3
 800506c:	f003 0303 	and.w	r3, r3, #3
 8005070:	b2da      	uxtb	r2, r3
 8005072:	683b      	ldr	r3, [r7, #0]
 8005074:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800507a:	0c1b      	lsrs	r3, r3, #16
 800507c:	b2da      	uxtb	r2, r3
 800507e:	683b      	ldr	r3, [r7, #0]
 8005080:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005086:	0a1b      	lsrs	r3, r3, #8
 8005088:	b2da      	uxtb	r2, r3
 800508a:	683b      	ldr	r3, [r7, #0]
 800508c:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005092:	b2da      	uxtb	r2, r3
 8005094:	683b      	ldr	r3, [r7, #0]
 8005096:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800509c:	0d1b      	lsrs	r3, r3, #20
 800509e:	b29a      	uxth	r2, r3
 80050a0:	683b      	ldr	r3, [r7, #0]
 80050a2:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80050a8:	0c1b      	lsrs	r3, r3, #16
 80050aa:	b2db      	uxtb	r3, r3
 80050ac:	f003 030f 	and.w	r3, r3, #15
 80050b0:	b2da      	uxtb	r2, r3
 80050b2:	683b      	ldr	r3, [r7, #0]
 80050b4:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80050ba:	0bdb      	lsrs	r3, r3, #15
 80050bc:	b2db      	uxtb	r3, r3
 80050be:	f003 0301 	and.w	r3, r3, #1
 80050c2:	b2da      	uxtb	r2, r3
 80050c4:	683b      	ldr	r3, [r7, #0]
 80050c6:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80050cc:	0b9b      	lsrs	r3, r3, #14
 80050ce:	b2db      	uxtb	r3, r3
 80050d0:	f003 0301 	and.w	r3, r3, #1
 80050d4:	b2da      	uxtb	r2, r3
 80050d6:	683b      	ldr	r3, [r7, #0]
 80050d8:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80050de:	0b5b      	lsrs	r3, r3, #13
 80050e0:	b2db      	uxtb	r3, r3
 80050e2:	f003 0301 	and.w	r3, r3, #1
 80050e6:	b2da      	uxtb	r2, r3
 80050e8:	683b      	ldr	r3, [r7, #0]
 80050ea:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80050f0:	0b1b      	lsrs	r3, r3, #12
 80050f2:	b2db      	uxtb	r3, r3
 80050f4:	f003 0301 	and.w	r3, r3, #1
 80050f8:	b2da      	uxtb	r2, r3
 80050fa:	683b      	ldr	r3, [r7, #0]
 80050fc:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 80050fe:	683b      	ldr	r3, [r7, #0]
 8005100:	2200      	movs	r2, #0
 8005102:	735a      	strb	r2, [r3, #13]

  if (hsd->SdCard.CardType == CARD_SDSC)
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005108:	2b00      	cmp	r3, #0
 800510a:	d163      	bne.n	80051d4 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005110:	009a      	lsls	r2, r3, #2
 8005112:	f640 73fc 	movw	r3, #4092	; 0xffc
 8005116:	4013      	ands	r3, r2
 8005118:	687a      	ldr	r2, [r7, #4]
 800511a:	6e52      	ldr	r2, [r2, #100]	; 0x64
 800511c:	0f92      	lsrs	r2, r2, #30
 800511e:	431a      	orrs	r2, r3
 8005120:	683b      	ldr	r3, [r7, #0]
 8005122:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005128:	0edb      	lsrs	r3, r3, #27
 800512a:	b2db      	uxtb	r3, r3
 800512c:	f003 0307 	and.w	r3, r3, #7
 8005130:	b2da      	uxtb	r2, r3
 8005132:	683b      	ldr	r3, [r7, #0]
 8005134:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800513a:	0e1b      	lsrs	r3, r3, #24
 800513c:	b2db      	uxtb	r3, r3
 800513e:	f003 0307 	and.w	r3, r3, #7
 8005142:	b2da      	uxtb	r2, r3
 8005144:	683b      	ldr	r3, [r7, #0]
 8005146:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800514c:	0d5b      	lsrs	r3, r3, #21
 800514e:	b2db      	uxtb	r3, r3
 8005150:	f003 0307 	and.w	r3, r3, #7
 8005154:	b2da      	uxtb	r2, r3
 8005156:	683b      	ldr	r3, [r7, #0]
 8005158:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800515e:	0c9b      	lsrs	r3, r3, #18
 8005160:	b2db      	uxtb	r3, r3
 8005162:	f003 0307 	and.w	r3, r3, #7
 8005166:	b2da      	uxtb	r2, r3
 8005168:	683b      	ldr	r3, [r7, #0]
 800516a:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005170:	0bdb      	lsrs	r3, r3, #15
 8005172:	b2db      	uxtb	r3, r3
 8005174:	f003 0307 	and.w	r3, r3, #7
 8005178:	b2da      	uxtb	r2, r3
 800517a:	683b      	ldr	r3, [r7, #0]
 800517c:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800517e:	683b      	ldr	r3, [r7, #0]
 8005180:	691b      	ldr	r3, [r3, #16]
 8005182:	1c5a      	adds	r2, r3, #1
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8005188:	683b      	ldr	r3, [r7, #0]
 800518a:	7e1b      	ldrb	r3, [r3, #24]
 800518c:	b2db      	uxtb	r3, r3
 800518e:	f003 0307 	and.w	r3, r3, #7
 8005192:	3302      	adds	r3, #2
 8005194:	2201      	movs	r2, #1
 8005196:	fa02 f303 	lsl.w	r3, r2, r3
 800519a:	687a      	ldr	r2, [r7, #4]
 800519c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800519e:	fb03 f202 	mul.w	r2, r3, r2
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 80051a6:	683b      	ldr	r3, [r7, #0]
 80051a8:	7a1b      	ldrb	r3, [r3, #8]
 80051aa:	b2db      	uxtb	r3, r3
 80051ac:	f003 030f 	and.w	r3, r3, #15
 80051b0:	2201      	movs	r2, #1
 80051b2:	409a      	lsls	r2, r3
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	64da      	str	r2, [r3, #76]	; 0x4c

    hsd->SdCard.LogBlockNbr = (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80051bc:	687a      	ldr	r2, [r7, #4]
 80051be:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80051c0:	0a52      	lsrs	r2, r2, #9
 80051c2:	fb03 f202 	mul.w	r2, r3, r2
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.LogBlockSize = 512U;
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80051d0:	655a      	str	r2, [r3, #84]	; 0x54
 80051d2:	e031      	b.n	8005238 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051d8:	2b01      	cmp	r3, #1
 80051da:	d11d      	bne.n	8005218 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80051e0:	041b      	lsls	r3, r3, #16
 80051e2:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80051ea:	0c1b      	lsrs	r3, r3, #16
 80051ec:	431a      	orrs	r2, r3
 80051ee:	683b      	ldr	r3, [r7, #0]
 80051f0:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 80051f2:	683b      	ldr	r3, [r7, #0]
 80051f4:	691b      	ldr	r3, [r3, #16]
 80051f6:	3301      	adds	r3, #1
 80051f8:	029a      	lsls	r2, r3, #10
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.BlockSize = 512U;
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	f44f 7200 	mov.w	r2, #512	; 0x200
 800520c:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	655a      	str	r2, [r3, #84]	; 0x54
 8005216:	e00f      	b.n	8005238 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	4a58      	ldr	r2, [pc, #352]	; (8005380 <HAL_SD_GetCardCSD+0x344>)
 800521e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005224:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	2201      	movs	r2, #1
 8005230:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    return HAL_ERROR;
 8005234:	2301      	movs	r3, #1
 8005236:	e09d      	b.n	8005374 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800523c:	0b9b      	lsrs	r3, r3, #14
 800523e:	b2db      	uxtb	r3, r3
 8005240:	f003 0301 	and.w	r3, r3, #1
 8005244:	b2da      	uxtb	r2, r3
 8005246:	683b      	ldr	r3, [r7, #0]
 8005248:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800524e:	09db      	lsrs	r3, r3, #7
 8005250:	b2db      	uxtb	r3, r3
 8005252:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005256:	b2da      	uxtb	r2, r3
 8005258:	683b      	ldr	r3, [r7, #0]
 800525a:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005260:	b2db      	uxtb	r3, r3
 8005262:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005266:	b2da      	uxtb	r2, r3
 8005268:	683b      	ldr	r3, [r7, #0]
 800526a:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005270:	0fdb      	lsrs	r3, r3, #31
 8005272:	b2da      	uxtb	r2, r3
 8005274:	683b      	ldr	r3, [r7, #0]
 8005276:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800527c:	0f5b      	lsrs	r3, r3, #29
 800527e:	b2db      	uxtb	r3, r3
 8005280:	f003 0303 	and.w	r3, r3, #3
 8005284:	b2da      	uxtb	r2, r3
 8005286:	683b      	ldr	r3, [r7, #0]
 8005288:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800528e:	0e9b      	lsrs	r3, r3, #26
 8005290:	b2db      	uxtb	r3, r3
 8005292:	f003 0307 	and.w	r3, r3, #7
 8005296:	b2da      	uxtb	r2, r3
 8005298:	683b      	ldr	r3, [r7, #0]
 800529a:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen = (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80052a0:	0d9b      	lsrs	r3, r3, #22
 80052a2:	b2db      	uxtb	r3, r3
 80052a4:	f003 030f 	and.w	r3, r3, #15
 80052a8:	b2da      	uxtb	r2, r3
 80052aa:	683b      	ldr	r3, [r7, #0]
 80052ac:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80052b2:	0d5b      	lsrs	r3, r3, #21
 80052b4:	b2db      	uxtb	r3, r3
 80052b6:	f003 0301 	and.w	r3, r3, #1
 80052ba:	b2da      	uxtb	r2, r3
 80052bc:	683b      	ldr	r3, [r7, #0]
 80052be:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 80052c2:	683b      	ldr	r3, [r7, #0]
 80052c4:	2200      	movs	r2, #0
 80052c6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80052ce:	0c1b      	lsrs	r3, r3, #16
 80052d0:	b2db      	uxtb	r3, r3
 80052d2:	f003 0301 	and.w	r3, r3, #1
 80052d6:	b2da      	uxtb	r2, r3
 80052d8:	683b      	ldr	r3, [r7, #0]
 80052da:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80052e2:	0bdb      	lsrs	r3, r3, #15
 80052e4:	b2db      	uxtb	r3, r3
 80052e6:	f003 0301 	and.w	r3, r3, #1
 80052ea:	b2da      	uxtb	r2, r3
 80052ec:	683b      	ldr	r3, [r7, #0]
 80052ee:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80052f6:	0b9b      	lsrs	r3, r3, #14
 80052f8:	b2db      	uxtb	r3, r3
 80052fa:	f003 0301 	and.w	r3, r3, #1
 80052fe:	b2da      	uxtb	r2, r3
 8005300:	683b      	ldr	r3, [r7, #0]
 8005302:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800530a:	0b5b      	lsrs	r3, r3, #13
 800530c:	b2db      	uxtb	r3, r3
 800530e:	f003 0301 	and.w	r3, r3, #1
 8005312:	b2da      	uxtb	r2, r3
 8005314:	683b      	ldr	r3, [r7, #0]
 8005316:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800531e:	0b1b      	lsrs	r3, r3, #12
 8005320:	b2db      	uxtb	r3, r3
 8005322:	f003 0301 	and.w	r3, r3, #1
 8005326:	b2da      	uxtb	r2, r3
 8005328:	683b      	ldr	r3, [r7, #0]
 800532a:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005332:	0a9b      	lsrs	r3, r3, #10
 8005334:	b2db      	uxtb	r3, r3
 8005336:	f003 0303 	and.w	r3, r3, #3
 800533a:	b2da      	uxtb	r2, r3
 800533c:	683b      	ldr	r3, [r7, #0]
 800533e:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC = (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005346:	0a1b      	lsrs	r3, r3, #8
 8005348:	b2db      	uxtb	r3, r3
 800534a:	f003 0303 	and.w	r3, r3, #3
 800534e:	b2da      	uxtb	r2, r3
 8005350:	683b      	ldr	r3, [r7, #0]
 8005352:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800535a:	085b      	lsrs	r3, r3, #1
 800535c:	b2db      	uxtb	r3, r3
 800535e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005362:	b2da      	uxtb	r2, r3
 8005364:	683b      	ldr	r3, [r7, #0]
 8005366:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800536a:	683b      	ldr	r3, [r7, #0]
 800536c:	2201      	movs	r2, #1
 800536e:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8005372:	2300      	movs	r3, #0
}
 8005374:	4618      	mov	r0, r3
 8005376:	370c      	adds	r7, #12
 8005378:	46bd      	mov	sp, r7
 800537a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800537e:	4770      	bx	lr
 8005380:	1fe00fff 	.word	0x1fe00fff

08005384 <HAL_SD_GetCardStatus>:
  * @param  pStatus: Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 8005384:	b580      	push	{r7, lr}
 8005386:	b094      	sub	sp, #80	; 0x50
 8005388:	af00      	add	r7, sp, #0
 800538a:	6078      	str	r0, [r7, #4]
 800538c:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 800538e:	2300      	movs	r3, #0
 8005390:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  errorstate = SD_SendSDStatus(hsd, sd_status);
 8005394:	f107 0308 	add.w	r3, r7, #8
 8005398:	4619      	mov	r1, r3
 800539a:	6878      	ldr	r0, [r7, #4]
 800539c:	f000 fb1e 	bl	80059dc <SD_SendSDStatus>
 80053a0:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 80053a2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d011      	beq.n	80053cc <HAL_SD_GetCardStatus+0x48>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	4a4f      	ldr	r2, [pc, #316]	; (80054ec <HAL_SD_GetCardStatus+0x168>)
 80053ae:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80053b4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80053b6:	431a      	orrs	r2, r3
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	2201      	movs	r2, #1
 80053c0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    status = HAL_ERROR;
 80053c4:	2301      	movs	r3, #1
 80053c6:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 80053ca:	e070      	b.n	80054ae <HAL_SD_GetCardStatus+0x12a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 80053cc:	68bb      	ldr	r3, [r7, #8]
 80053ce:	099b      	lsrs	r3, r3, #6
 80053d0:	b2db      	uxtb	r3, r3
 80053d2:	f003 0303 	and.w	r3, r3, #3
 80053d6:	b2da      	uxtb	r2, r3
 80053d8:	683b      	ldr	r3, [r7, #0]
 80053da:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 80053dc:	68bb      	ldr	r3, [r7, #8]
 80053de:	095b      	lsrs	r3, r3, #5
 80053e0:	b2db      	uxtb	r3, r3
 80053e2:	f003 0301 	and.w	r3, r3, #1
 80053e6:	b2da      	uxtb	r2, r3
 80053e8:	683b      	ldr	r3, [r7, #0]
 80053ea:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 80053ec:	68bb      	ldr	r3, [r7, #8]
 80053ee:	0a1b      	lsrs	r3, r3, #8
 80053f0:	b29b      	uxth	r3, r3
 80053f2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80053f6:	b29a      	uxth	r2, r3
 80053f8:	68bb      	ldr	r3, [r7, #8]
 80053fa:	0e1b      	lsrs	r3, r3, #24
 80053fc:	b29b      	uxth	r3, r3
 80053fe:	4313      	orrs	r3, r2
 8005400:	b29a      	uxth	r2, r3
 8005402:	683b      	ldr	r3, [r7, #0]
 8005404:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	061a      	lsls	r2, r3, #24
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	021b      	lsls	r3, r3, #8
 800540e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005412:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	0a1b      	lsrs	r3, r3, #8
 8005418:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800541c:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	0e1b      	lsrs	r3, r3, #24
 8005422:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8005424:	683b      	ldr	r3, [r7, #0]
 8005426:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 8005428:	693b      	ldr	r3, [r7, #16]
 800542a:	b2da      	uxtb	r2, r3
 800542c:	683b      	ldr	r3, [r7, #0]
 800542e:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 8005430:	693b      	ldr	r3, [r7, #16]
 8005432:	0a1b      	lsrs	r3, r3, #8
 8005434:	b2da      	uxtb	r2, r3
 8005436:	683b      	ldr	r3, [r7, #0]
 8005438:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 800543a:	693b      	ldr	r3, [r7, #16]
 800543c:	0d1b      	lsrs	r3, r3, #20
 800543e:	b2db      	uxtb	r3, r3
 8005440:	f003 030f 	and.w	r3, r3, #15
 8005444:	b2da      	uxtb	r2, r3
 8005446:	683b      	ldr	r3, [r7, #0]
 8005448:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 800544a:	693b      	ldr	r3, [r7, #16]
 800544c:	0c1b      	lsrs	r3, r3, #16
 800544e:	b29b      	uxth	r3, r3
 8005450:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005454:	b29a      	uxth	r2, r3
 8005456:	697b      	ldr	r3, [r7, #20]
 8005458:	b29b      	uxth	r3, r3
 800545a:	b2db      	uxtb	r3, r3
 800545c:	b29b      	uxth	r3, r3
 800545e:	4313      	orrs	r3, r2
 8005460:	b29a      	uxth	r2, r3
 8005462:	683b      	ldr	r3, [r7, #0]
 8005464:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 8005466:	697b      	ldr	r3, [r7, #20]
 8005468:	0a9b      	lsrs	r3, r3, #10
 800546a:	b2db      	uxtb	r3, r3
 800546c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005470:	b2da      	uxtb	r2, r3
 8005472:	683b      	ldr	r3, [r7, #0]
 8005474:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 8005476:	697b      	ldr	r3, [r7, #20]
 8005478:	0a1b      	lsrs	r3, r3, #8
 800547a:	b2db      	uxtb	r3, r3
 800547c:	f003 0303 	and.w	r3, r3, #3
 8005480:	b2da      	uxtb	r2, r3
 8005482:	683b      	ldr	r3, [r7, #0]
 8005484:	73da      	strb	r2, [r3, #15]

    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 8005486:	697b      	ldr	r3, [r7, #20]
 8005488:	091b      	lsrs	r3, r3, #4
 800548a:	b2db      	uxtb	r3, r3
 800548c:	f003 030f 	and.w	r3, r3, #15
 8005490:	b2da      	uxtb	r2, r3
 8005492:	683b      	ldr	r3, [r7, #0]
 8005494:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 8005496:	697b      	ldr	r3, [r7, #20]
 8005498:	b2db      	uxtb	r3, r3
 800549a:	f003 030f 	and.w	r3, r3, #15
 800549e:	b2da      	uxtb	r2, r3
 80054a0:	683b      	ldr	r3, [r7, #0]
 80054a2:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 80054a4:	69bb      	ldr	r3, [r7, #24]
 80054a6:	0e1b      	lsrs	r3, r3, #24
 80054a8:	b2da      	uxtb	r2, r3
 80054aa:	683b      	ldr	r3, [r7, #0]
 80054ac:	749a      	strb	r2, [r3, #18]
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80054b6:	4618      	mov	r0, r3
 80054b8:	f001 fde4 	bl	8007084 <SDMMC_CmdBlockLength>
 80054bc:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 80054be:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d00d      	beq.n	80054e0 <HAL_SD_GetCardStatus+0x15c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	4a08      	ldr	r2, [pc, #32]	; (80054ec <HAL_SD_GetCardStatus+0x168>)
 80054ca:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode = errorstate;
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80054d0:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	2201      	movs	r2, #1
 80054d6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    status = HAL_ERROR;
 80054da:	2301      	movs	r3, #1
 80054dc:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  }

  return status;
 80054e0:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 80054e4:	4618      	mov	r0, r3
 80054e6:	3750      	adds	r7, #80	; 0x50
 80054e8:	46bd      	mov	sp, r7
 80054ea:	bd80      	pop	{r7, pc}
 80054ec:	1fe00fff 	.word	0x1fe00fff

080054f0 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 80054f0:	b590      	push	{r4, r7, lr}
 80054f2:	b08d      	sub	sp, #52	; 0x34
 80054f4:	af02      	add	r7, sp, #8
 80054f6:	6078      	str	r0, [r7, #4]
 80054f8:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk;
  HAL_StatusTypeDef status = HAL_OK;
 80054fa:	2300      	movs	r3, #0
 80054fc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	2203      	movs	r2, #3
 8005504:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  if (hsd->SdCard.CardType != CARD_SECURED)
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800550c:	2b03      	cmp	r3, #3
 800550e:	d02e      	beq.n	800556e <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if (WideMode == SDMMC_BUS_WIDE_8B)
 8005510:	683b      	ldr	r3, [r7, #0]
 8005512:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005516:	d106      	bne.n	8005526 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800551c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	635a      	str	r2, [r3, #52]	; 0x34
 8005524:	e029      	b.n	800557a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_4B)
 8005526:	683b      	ldr	r3, [r7, #0]
 8005528:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800552c:	d10a      	bne.n	8005544 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800552e:	6878      	ldr	r0, [r7, #4]
 8005530:	f000 fb4c 	bl	8005bcc <SD_WideBus_Enable>
 8005534:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800553a:	6a3b      	ldr	r3, [r7, #32]
 800553c:	431a      	orrs	r2, r3
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	635a      	str	r2, [r3, #52]	; 0x34
 8005542:	e01a      	b.n	800557a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_1B)
 8005544:	683b      	ldr	r3, [r7, #0]
 8005546:	2b00      	cmp	r3, #0
 8005548:	d10a      	bne.n	8005560 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800554a:	6878      	ldr	r0, [r7, #4]
 800554c:	f000 fb89 	bl	8005c62 <SD_WideBus_Disable>
 8005550:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005556:	6a3b      	ldr	r3, [r7, #32]
 8005558:	431a      	orrs	r2, r3
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	635a      	str	r2, [r3, #52]	; 0x34
 800555e:	e00c      	b.n	800557a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005564:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	635a      	str	r2, [r3, #52]	; 0x34
 800556c:	e005      	b.n	800557a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005572:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	635a      	str	r2, [r3, #52]	; 0x34
  }

  if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800557e:	2b00      	cmp	r3, #0
 8005580:	d007      	beq.n	8005592 <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	4a5e      	ldr	r2, [pc, #376]	; (8005700 <HAL_SD_ConfigWideBusOperation+0x210>)
 8005588:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 800558a:	2301      	movs	r3, #1
 800558c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8005590:	e094      	b.n	80056bc <HAL_SD_ConfigWideBusOperation+0x1cc>
  }
  else
  {
    sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 8005592:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8005596:	f7fe f9f3 	bl	8003980 <HAL_RCCEx_GetPeriphCLKFreq>
 800559a:	61f8      	str	r0, [r7, #28]
    if (sdmmc_clk != 0U)
 800559c:	69fb      	ldr	r3, [r7, #28]
 800559e:	2b00      	cmp	r3, #0
 80055a0:	f000 8083 	beq.w	80056aa <HAL_SD_ConfigWideBusOperation+0x1ba>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	685b      	ldr	r3, [r3, #4]
 80055a8:	60bb      	str	r3, [r7, #8]
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	689b      	ldr	r3, [r3, #8]
 80055ae:	60fb      	str	r3, [r7, #12]
      Init.BusWide             = WideMode;
 80055b0:	683b      	ldr	r3, [r7, #0]
 80055b2:	613b      	str	r3, [r7, #16]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	691b      	ldr	r3, [r3, #16]
 80055b8:	617b      	str	r3, [r7, #20]

      /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	695a      	ldr	r2, [r3, #20]
 80055be:	69fb      	ldr	r3, [r7, #28]
 80055c0:	4950      	ldr	r1, [pc, #320]	; (8005704 <HAL_SD_ConfigWideBusOperation+0x214>)
 80055c2:	fba1 1303 	umull	r1, r3, r1, r3
 80055c6:	0e1b      	lsrs	r3, r3, #24
 80055c8:	429a      	cmp	r2, r3
 80055ca:	d303      	bcc.n	80055d4 <HAL_SD_ConfigWideBusOperation+0xe4>
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	695b      	ldr	r3, [r3, #20]
 80055d0:	61bb      	str	r3, [r7, #24]
 80055d2:	e05a      	b.n	800568a <HAL_SD_ConfigWideBusOperation+0x19a>
      }
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80055d8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80055dc:	d103      	bne.n	80055e6 <HAL_SD_ConfigWideBusOperation+0xf6>
      {
        /* UltraHigh speed SD card,user Clock div */
        Init.ClockDiv = hsd->Init.ClockDiv;
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	695b      	ldr	r3, [r3, #20]
 80055e2:	61bb      	str	r3, [r7, #24]
 80055e4:	e051      	b.n	800568a <HAL_SD_ConfigWideBusOperation+0x19a>
      }
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80055ea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80055ee:	d126      	bne.n	800563e <HAL_SD_ConfigWideBusOperation+0x14e>
      {
        /* High speed SD card, Max Frequency = 50Mhz */
        if (hsd->Init.ClockDiv == 0U)
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	695b      	ldr	r3, [r3, #20]
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d10e      	bne.n	8005616 <HAL_SD_ConfigWideBusOperation+0x126>
        {
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
 80055f8:	69fb      	ldr	r3, [r7, #28]
 80055fa:	4a43      	ldr	r2, [pc, #268]	; (8005708 <HAL_SD_ConfigWideBusOperation+0x218>)
 80055fc:	4293      	cmp	r3, r2
 80055fe:	d906      	bls.n	800560e <HAL_SD_ConfigWideBusOperation+0x11e>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 8005600:	69fb      	ldr	r3, [r7, #28]
 8005602:	4a40      	ldr	r2, [pc, #256]	; (8005704 <HAL_SD_ConfigWideBusOperation+0x214>)
 8005604:	fba2 2303 	umull	r2, r3, r2, r3
 8005608:	0e5b      	lsrs	r3, r3, #25
 800560a:	61bb      	str	r3, [r7, #24]
 800560c:	e03d      	b.n	800568a <HAL_SD_ConfigWideBusOperation+0x19a>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	695b      	ldr	r3, [r3, #20]
 8005612:	61bb      	str	r3, [r7, #24]
 8005614:	e039      	b.n	800568a <HAL_SD_ConfigWideBusOperation+0x19a>
          }
        }
        else
        {
          if ((sdmmc_clk/(2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	695b      	ldr	r3, [r3, #20]
 800561a:	005b      	lsls	r3, r3, #1
 800561c:	69fa      	ldr	r2, [r7, #28]
 800561e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005622:	4a39      	ldr	r2, [pc, #228]	; (8005708 <HAL_SD_ConfigWideBusOperation+0x218>)
 8005624:	4293      	cmp	r3, r2
 8005626:	d906      	bls.n	8005636 <HAL_SD_ConfigWideBusOperation+0x146>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 8005628:	69fb      	ldr	r3, [r7, #28]
 800562a:	4a36      	ldr	r2, [pc, #216]	; (8005704 <HAL_SD_ConfigWideBusOperation+0x214>)
 800562c:	fba2 2303 	umull	r2, r3, r2, r3
 8005630:	0e5b      	lsrs	r3, r3, #25
 8005632:	61bb      	str	r3, [r7, #24]
 8005634:	e029      	b.n	800568a <HAL_SD_ConfigWideBusOperation+0x19a>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	695b      	ldr	r3, [r3, #20]
 800563a:	61bb      	str	r3, [r7, #24]
 800563c:	e025      	b.n	800568a <HAL_SD_ConfigWideBusOperation+0x19a>
        }
      }
      else
      {
        /* No High speed SD card, Max Frequency = 25Mhz */
        if (hsd->Init.ClockDiv == 0U)
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	695b      	ldr	r3, [r3, #20]
 8005642:	2b00      	cmp	r3, #0
 8005644:	d10e      	bne.n	8005664 <HAL_SD_ConfigWideBusOperation+0x174>
        {
          if (sdmmc_clk > SD_NORMAL_SPEED_FREQ)
 8005646:	69fb      	ldr	r3, [r7, #28]
 8005648:	4a30      	ldr	r2, [pc, #192]	; (800570c <HAL_SD_ConfigWideBusOperation+0x21c>)
 800564a:	4293      	cmp	r3, r2
 800564c:	d906      	bls.n	800565c <HAL_SD_ConfigWideBusOperation+0x16c>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 800564e:	69fb      	ldr	r3, [r7, #28]
 8005650:	4a2c      	ldr	r2, [pc, #176]	; (8005704 <HAL_SD_ConfigWideBusOperation+0x214>)
 8005652:	fba2 2303 	umull	r2, r3, r2, r3
 8005656:	0e1b      	lsrs	r3, r3, #24
 8005658:	61bb      	str	r3, [r7, #24]
 800565a:	e016      	b.n	800568a <HAL_SD_ConfigWideBusOperation+0x19a>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	695b      	ldr	r3, [r3, #20]
 8005660:	61bb      	str	r3, [r7, #24]
 8005662:	e012      	b.n	800568a <HAL_SD_ConfigWideBusOperation+0x19a>
          }
        }
        else
        {
          if ((sdmmc_clk/(2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	695b      	ldr	r3, [r3, #20]
 8005668:	005b      	lsls	r3, r3, #1
 800566a:	69fa      	ldr	r2, [r7, #28]
 800566c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005670:	4a26      	ldr	r2, [pc, #152]	; (800570c <HAL_SD_ConfigWideBusOperation+0x21c>)
 8005672:	4293      	cmp	r3, r2
 8005674:	d906      	bls.n	8005684 <HAL_SD_ConfigWideBusOperation+0x194>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 8005676:	69fb      	ldr	r3, [r7, #28]
 8005678:	4a22      	ldr	r2, [pc, #136]	; (8005704 <HAL_SD_ConfigWideBusOperation+0x214>)
 800567a:	fba2 2303 	umull	r2, r3, r2, r3
 800567e:	0e1b      	lsrs	r3, r3, #24
 8005680:	61bb      	str	r3, [r7, #24]
 8005682:	e002      	b.n	800568a <HAL_SD_ConfigWideBusOperation+0x19a>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	695b      	ldr	r3, [r3, #20]
 8005688:	61bb      	str	r3, [r7, #24]

#if (USE_SD_TRANSCEIVER != 0U)
      Init.TranceiverPresent = hsd->Init.TranceiverPresent;
#endif /* USE_SD_TRANSCEIVER */

      (void)SDMMC_Init(hsd->Instance, Init);
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681c      	ldr	r4, [r3, #0]
 800568e:	466a      	mov	r2, sp
 8005690:	f107 0314 	add.w	r3, r7, #20
 8005694:	e893 0003 	ldmia.w	r3, {r0, r1}
 8005698:	e882 0003 	stmia.w	r2, {r0, r1}
 800569c:	f107 0308 	add.w	r3, r7, #8
 80056a0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80056a2:	4620      	mov	r0, r4
 80056a4:	f001 fc22 	bl	8006eec <SDMMC_Init>
 80056a8:	e008      	b.n	80056bc <HAL_SD_ConfigWideBusOperation+0x1cc>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80056ae:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	635a      	str	r2, [r3, #52]	; 0x34
      status = HAL_ERROR;
 80056b6:	2301      	movs	r3, #1
 80056b8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80056c4:	4618      	mov	r0, r3
 80056c6:	f001 fcdd 	bl	8007084 <SDMMC_CmdBlockLength>
 80056ca:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 80056cc:	6a3b      	ldr	r3, [r7, #32]
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d00c      	beq.n	80056ec <HAL_SD_ConfigWideBusOperation+0x1fc>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	4a0a      	ldr	r2, [pc, #40]	; (8005700 <HAL_SD_ConfigWideBusOperation+0x210>)
 80056d8:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80056de:	6a3b      	ldr	r3, [r7, #32]
 80056e0:	431a      	orrs	r2, r3
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	635a      	str	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 80056e6:	2301      	movs	r3, #1
 80056e8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	2201      	movs	r2, #1
 80056f0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return status;
 80056f4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80056f8:	4618      	mov	r0, r3
 80056fa:	372c      	adds	r7, #44	; 0x2c
 80056fc:	46bd      	mov	sp, r7
 80056fe:	bd90      	pop	{r4, r7, pc}
 8005700:	1fe00fff 	.word	0x1fe00fff
 8005704:	55e63b89 	.word	0x55e63b89
 8005708:	02faf080 	.word	0x02faf080
 800570c:	017d7840 	.word	0x017d7840

08005710 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8005710:	b580      	push	{r7, lr}
 8005712:	b086      	sub	sp, #24
 8005714:	af00      	add	r7, sp, #0
 8005716:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8005718:	2300      	movs	r3, #0
 800571a:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800571c:	f107 030c 	add.w	r3, r7, #12
 8005720:	4619      	mov	r1, r3
 8005722:	6878      	ldr	r0, [r7, #4]
 8005724:	f000 fa2a 	bl	8005b7c <SD_SendStatus>
 8005728:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800572a:	697b      	ldr	r3, [r7, #20]
 800572c:	2b00      	cmp	r3, #0
 800572e:	d005      	beq.n	800573c <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005734:	697b      	ldr	r3, [r7, #20]
 8005736:	431a      	orrs	r2, r3
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	635a      	str	r2, [r3, #52]	; 0x34
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	0a5b      	lsrs	r3, r3, #9
 8005740:	f003 030f 	and.w	r3, r3, #15
 8005744:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8005746:	693b      	ldr	r3, [r7, #16]
}
 8005748:	4618      	mov	r0, r3
 800574a:	3718      	adds	r7, #24
 800574c:	46bd      	mov	sp, r7
 800574e:	bd80      	pop	{r7, pc}

08005750 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8005750:	b580      	push	{r7, lr}
 8005752:	b090      	sub	sp, #64	; 0x40
 8005754:	af00      	add	r7, sp, #0
 8005756:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8005758:	2301      	movs	r3, #1
 800575a:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if (SDMMC_GetPowerState(hsd->Instance) == 0U)
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	4618      	mov	r0, r3
 8005762:	f001 fc0b 	bl	8006f7c <SDMMC_GetPowerState>
 8005766:	4603      	mov	r3, r0
 8005768:	2b00      	cmp	r3, #0
 800576a:	d102      	bne.n	8005772 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800576c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8005770:	e0a5      	b.n	80058be <SD_InitCard+0x16e>
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005776:	2b03      	cmp	r3, #3
 8005778:	d02e      	beq.n	80057d8 <SD_InitCard+0x88>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	4618      	mov	r0, r3
 8005780:	f001 fd8c 	bl	800729c <SDMMC_CmdSendCID>
 8005784:	63f8      	str	r0, [r7, #60]	; 0x3c
    if (errorstate != HAL_SD_ERROR_NONE)
 8005786:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005788:	2b00      	cmp	r3, #0
 800578a:	d001      	beq.n	8005790 <SD_InitCard+0x40>
    {
      return errorstate;
 800578c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800578e:	e096      	b.n	80058be <SD_InitCard+0x16e>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	2100      	movs	r1, #0
 8005796:	4618      	mov	r0, r3
 8005798:	f001 fc35 	bl	8007006 <SDMMC_GetResponse>
 800579c:	4602      	mov	r2, r0
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	2104      	movs	r1, #4
 80057a8:	4618      	mov	r0, r3
 80057aa:	f001 fc2c 	bl	8007006 <SDMMC_GetResponse>
 80057ae:	4602      	mov	r2, r0
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	671a      	str	r2, [r3, #112]	; 0x70
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	2108      	movs	r1, #8
 80057ba:	4618      	mov	r0, r3
 80057bc:	f001 fc23 	bl	8007006 <SDMMC_GetResponse>
 80057c0:	4602      	mov	r2, r0
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	210c      	movs	r1, #12
 80057cc:	4618      	mov	r0, r3
 80057ce:	f001 fc1a 	bl	8007006 <SDMMC_GetResponse>
 80057d2:	4602      	mov	r2, r0
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	679a      	str	r2, [r3, #120]	; 0x78
    }
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057dc:	2b03      	cmp	r3, #3
 80057de:	d00d      	beq.n	80057fc <SD_InitCard+0xac>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	f107 020e 	add.w	r2, r7, #14
 80057e8:	4611      	mov	r1, r2
 80057ea:	4618      	mov	r0, r3
 80057ec:	f001 fd95 	bl	800731a <SDMMC_CmdSetRelAdd>
 80057f0:	63f8      	str	r0, [r7, #60]	; 0x3c
    if (errorstate != HAL_SD_ERROR_NONE)
 80057f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d001      	beq.n	80057fc <SD_InitCard+0xac>
    {
      return errorstate;
 80057f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80057fa:	e060      	b.n	80058be <SD_InitCard+0x16e>
    }
  }
  if (hsd->SdCard.CardType != CARD_SECURED)
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005800:	2b03      	cmp	r3, #3
 8005802:	d036      	beq.n	8005872 <SD_InitCard+0x122>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8005804:	89fb      	ldrh	r3, [r7, #14]
 8005806:	461a      	mov	r2, r3
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681a      	ldr	r2, [r3, #0]
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005814:	041b      	lsls	r3, r3, #16
 8005816:	4619      	mov	r1, r3
 8005818:	4610      	mov	r0, r2
 800581a:	f001 fd5e 	bl	80072da <SDMMC_CmdSendCSD>
 800581e:	63f8      	str	r0, [r7, #60]	; 0x3c
    if (errorstate != HAL_SD_ERROR_NONE)
 8005820:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005822:	2b00      	cmp	r3, #0
 8005824:	d001      	beq.n	800582a <SD_InitCard+0xda>
    {
      return errorstate;
 8005826:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005828:	e049      	b.n	80058be <SD_InitCard+0x16e>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	2100      	movs	r1, #0
 8005830:	4618      	mov	r0, r3
 8005832:	f001 fbe8 	bl	8007006 <SDMMC_GetResponse>
 8005836:	4602      	mov	r2, r0
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	65da      	str	r2, [r3, #92]	; 0x5c
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	2104      	movs	r1, #4
 8005842:	4618      	mov	r0, r3
 8005844:	f001 fbdf 	bl	8007006 <SDMMC_GetResponse>
 8005848:	4602      	mov	r2, r0
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	661a      	str	r2, [r3, #96]	; 0x60
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	2108      	movs	r1, #8
 8005854:	4618      	mov	r0, r3
 8005856:	f001 fbd6 	bl	8007006 <SDMMC_GetResponse>
 800585a:	4602      	mov	r2, r0
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	210c      	movs	r1, #12
 8005866:	4618      	mov	r0, r3
 8005868:	f001 fbcd 	bl	8007006 <SDMMC_GetResponse>
 800586c:	4602      	mov	r2, r0
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	669a      	str	r2, [r3, #104]	; 0x68
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	2104      	movs	r1, #4
 8005878:	4618      	mov	r0, r3
 800587a:	f001 fbc4 	bl	8007006 <SDMMC_GetResponse>
 800587e:	4603      	mov	r3, r0
 8005880:	0d1a      	lsrs	r2, r3, #20
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	641a      	str	r2, [r3, #64]	; 0x40

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8005886:	f107 0310 	add.w	r3, r7, #16
 800588a:	4619      	mov	r1, r3
 800588c:	6878      	ldr	r0, [r7, #4]
 800588e:	f7ff fbd5 	bl	800503c <HAL_SD_GetCardCSD>
 8005892:	4603      	mov	r3, r0
 8005894:	2b00      	cmp	r3, #0
 8005896:	d002      	beq.n	800589e <SD_InitCard+0x14e>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005898:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800589c:	e00f      	b.n	80058be <SD_InitCard+0x16e>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681a      	ldr	r2, [r3, #0]
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80058a6:	041b      	lsls	r3, r3, #16
 80058a8:	4619      	mov	r1, r3
 80058aa:	4610      	mov	r0, r2
 80058ac:	f001 fc0d 	bl	80070ca <SDMMC_CmdSelDesel>
 80058b0:	63f8      	str	r0, [r7, #60]	; 0x3c
  if (errorstate != HAL_SD_ERROR_NONE)
 80058b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d001      	beq.n	80058bc <SD_InitCard+0x16c>
  {
    return errorstate;
 80058b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80058ba:	e000      	b.n	80058be <SD_InitCard+0x16e>
  }

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 80058bc:	2300      	movs	r3, #0
}
 80058be:	4618      	mov	r0, r3
 80058c0:	3740      	adds	r7, #64	; 0x40
 80058c2:	46bd      	mov	sp, r7
 80058c4:	bd80      	pop	{r7, pc}
	...

080058c8 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 80058c8:	b580      	push	{r7, lr}
 80058ca:	b086      	sub	sp, #24
 80058cc:	af00      	add	r7, sp, #0
 80058ce:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80058d0:	2300      	movs	r3, #0
 80058d2:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U;
 80058d4:	2300      	movs	r3, #0
 80058d6:	617b      	str	r3, [r7, #20]
  uint32_t validvoltage = 0U;
 80058d8:	2300      	movs	r3, #0
 80058da:	613b      	str	r3, [r7, #16]
#if (USE_SD_TRANSCEIVER != 0U)
  uint32_t tickstart = HAL_GetTick();
#endif /* USE_SD_TRANSCEIVER  */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	4618      	mov	r0, r3
 80058e2:	f001 fc15 	bl	8007110 <SDMMC_CmdGoIdleState>
 80058e6:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d001      	beq.n	80058f2 <SD_PowerON+0x2a>
  {
    return errorstate;
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	e06e      	b.n	80059d0 <SD_PowerON+0x108>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	4618      	mov	r0, r3
 80058f8:	f001 fc28 	bl	800714c <SDMMC_CmdOperCond>
 80058fc:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	2b00      	cmp	r3, #0
 8005902:	d00d      	beq.n	8005920 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	2200      	movs	r2, #0
 8005908:	63da      	str	r2, [r3, #60]	; 0x3c
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	4618      	mov	r0, r3
 8005910:	f001 fbfe 	bl	8007110 <SDMMC_CmdGoIdleState>
 8005914:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	2b00      	cmp	r3, #0
 800591a:	d004      	beq.n	8005926 <SD_PowerON+0x5e>
    {
      return errorstate;
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	e057      	b.n	80059d0 <SD_PowerON+0x108>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	2201      	movs	r2, #1
 8005924:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  if (hsd->SdCard.CardVersion == CARD_V2_X)
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800592a:	2b01      	cmp	r3, #1
 800592c:	d137      	bne.n	800599e <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	2100      	movs	r1, #0
 8005934:	4618      	mov	r0, r3
 8005936:	f001 fc29 	bl	800718c <SDMMC_CmdAppCommand>
 800593a:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	2b00      	cmp	r3, #0
 8005940:	d02d      	beq.n	800599e <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005942:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8005946:	e043      	b.n	80059d0 <SD_PowerON+0x108>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	2100      	movs	r1, #0
 800594e:	4618      	mov	r0, r3
 8005950:	f001 fc1c 	bl	800718c <SDMMC_CmdAppCommand>
 8005954:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	2b00      	cmp	r3, #0
 800595a:	d001      	beq.n	8005960 <SD_PowerON+0x98>
    {
      return errorstate;
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	e037      	b.n	80059d0 <SD_PowerON+0x108>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY |
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	491c      	ldr	r1, [pc, #112]	; (80059d8 <SD_PowerON+0x110>)
 8005966:	4618      	mov	r0, r3
 8005968:	f001 fc33 	bl	80071d2 <SDMMC_CmdAppOperCommand>
 800596c:	60f8      	str	r0, [r7, #12]
                                         SD_SWITCH_1_8V_CAPACITY);
    if (errorstate != HAL_SD_ERROR_NONE)
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	2b00      	cmp	r3, #0
 8005972:	d002      	beq.n	800597a <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005974:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8005978:	e02a      	b.n	80059d0 <SD_PowerON+0x108>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	2100      	movs	r1, #0
 8005980:	4618      	mov	r0, r3
 8005982:	f001 fb40 	bl	8007006 <SDMMC_GetResponse>
 8005986:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8005988:	697b      	ldr	r3, [r7, #20]
 800598a:	0fdb      	lsrs	r3, r3, #31
 800598c:	2b01      	cmp	r3, #1
 800598e:	d101      	bne.n	8005994 <SD_PowerON+0xcc>
 8005990:	2301      	movs	r3, #1
 8005992:	e000      	b.n	8005996 <SD_PowerON+0xce>
 8005994:	2300      	movs	r3, #0
 8005996:	613b      	str	r3, [r7, #16]

    count++;
 8005998:	68bb      	ldr	r3, [r7, #8]
 800599a:	3301      	adds	r3, #1
 800599c:	60bb      	str	r3, [r7, #8]
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800599e:	68bb      	ldr	r3, [r7, #8]
 80059a0:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80059a4:	4293      	cmp	r3, r2
 80059a6:	d802      	bhi.n	80059ae <SD_PowerON+0xe6>
 80059a8:	693b      	ldr	r3, [r7, #16]
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d0cc      	beq.n	8005948 <SD_PowerON+0x80>
  }

  if (count >= SDMMC_MAX_VOLT_TRIAL)
 80059ae:	68bb      	ldr	r3, [r7, #8]
 80059b0:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80059b4:	4293      	cmp	r3, r2
 80059b6:	d902      	bls.n	80059be <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 80059b8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80059bc:	e008      	b.n	80059d0 <SD_PowerON+0x108>
  }

  if ((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 80059be:	697b      	ldr	r3, [r7, #20]
 80059c0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d002      	beq.n	80059ce <SD_PowerON+0x106>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	2201      	movs	r2, #1
 80059cc:	639a      	str	r2, [r3, #56]	; 0x38
      }
    }
#endif /* USE_SD_TRANSCEIVER  */
  }

  return HAL_SD_ERROR_NONE;
 80059ce:	2300      	movs	r3, #0
}
 80059d0:	4618      	mov	r0, r3
 80059d2:	3718      	adds	r7, #24
 80059d4:	46bd      	mov	sp, r7
 80059d6:	bd80      	pop	{r7, pc}
 80059d8:	c1100000 	.word	0xc1100000

080059dc <SD_SendSDStatus>:
  * @param  pSDstatus: Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 80059dc:	b580      	push	{r7, lr}
 80059de:	b08c      	sub	sp, #48	; 0x30
 80059e0:	af00      	add	r7, sp, #0
 80059e2:	6078      	str	r0, [r7, #4]
 80059e4:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80059e6:	f7fb fbcf 	bl	8001188 <HAL_GetTick>
 80059ea:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 80059ec:	683b      	ldr	r3, [r7, #0]
 80059ee:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check SD response */
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	2100      	movs	r1, #0
 80059f6:	4618      	mov	r0, r3
 80059f8:	f001 fb05 	bl	8007006 <SDMMC_GetResponse>
 80059fc:	4603      	mov	r3, r0
 80059fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a02:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005a06:	d102      	bne.n	8005a0e <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8005a08:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005a0c:	e0b0      	b.n	8005b70 <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	2140      	movs	r1, #64	; 0x40
 8005a14:	4618      	mov	r0, r3
 8005a16:	f001 fb35 	bl	8007084 <SDMMC_CmdBlockLength>
 8005a1a:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8005a1c:	6a3b      	ldr	r3, [r7, #32]
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d005      	beq.n	8005a2e <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 8005a2a:	6a3b      	ldr	r3, [r7, #32]
 8005a2c:	e0a0      	b.n	8005b70 <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681a      	ldr	r2, [r3, #0]
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a36:	041b      	lsls	r3, r3, #16
 8005a38:	4619      	mov	r1, r3
 8005a3a:	4610      	mov	r0, r2
 8005a3c:	f001 fba6 	bl	800718c <SDMMC_CmdAppCommand>
 8005a40:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8005a42:	6a3b      	ldr	r3, [r7, #32]
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d005      	beq.n	8005a54 <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 8005a50:	6a3b      	ldr	r3, [r7, #32]
 8005a52:	e08d      	b.n	8005b70 <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8005a54:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005a58:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 8005a5a:	2340      	movs	r3, #64	; 0x40
 8005a5c:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 8005a5e:	2360      	movs	r3, #96	; 0x60
 8005a60:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8005a62:	2302      	movs	r3, #2
 8005a64:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8005a66:	2300      	movs	r3, #0
 8005a68:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8005a6a:	2301      	movs	r3, #1
 8005a6c:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	f107 0208 	add.w	r2, r7, #8
 8005a76:	4611      	mov	r1, r2
 8005a78:	4618      	mov	r0, r3
 8005a7a:	f001 fad7 	bl	800702c <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	4618      	mov	r0, r3
 8005a84:	f001 fc8e 	bl	80073a4 <SDMMC_CmdStatusRegister>
 8005a88:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8005a8a:	6a3b      	ldr	r3, [r7, #32]
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d02b      	beq.n	8005ae8 <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 8005a98:	6a3b      	ldr	r3, [r7, #32]
 8005a9a:	e069      	b.n	8005b70 <SD_SendSDStatus+0x194>
  }

  /* Get status data */
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
  {
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005aa2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d013      	beq.n	8005ad2 <SD_SendSDStatus+0xf6>
    {
      for (count = 0U; count < 8U; count++)
 8005aaa:	2300      	movs	r3, #0
 8005aac:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005aae:	e00d      	b.n	8005acc <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	4618      	mov	r0, r3
 8005ab6:	f001 fa43 	bl	8006f40 <SDMMC_ReadFIFO>
 8005aba:	4602      	mov	r2, r0
 8005abc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005abe:	601a      	str	r2, [r3, #0]
        pData++;
 8005ac0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ac2:	3304      	adds	r3, #4
 8005ac4:	62bb      	str	r3, [r7, #40]	; 0x28
      for (count = 0U; count < 8U; count++)
 8005ac6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ac8:	3301      	adds	r3, #1
 8005aca:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005acc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ace:	2b07      	cmp	r3, #7
 8005ad0:	d9ee      	bls.n	8005ab0 <SD_SendSDStatus+0xd4>
      }
    }

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8005ad2:	f7fb fb59 	bl	8001188 <HAL_GetTick>
 8005ad6:	4602      	mov	r2, r0
 8005ad8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ada:	1ad3      	subs	r3, r2, r3
 8005adc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005ae0:	d102      	bne.n	8005ae8 <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8005ae2:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005ae6:	e043      	b.n	8005b70 <SD_SendSDStatus+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005aee:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d0d2      	beq.n	8005a9c <SD_SendSDStatus+0xc0>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005afc:	f003 0308 	and.w	r3, r3, #8
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d001      	beq.n	8005b08 <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 8005b04:	2308      	movs	r3, #8
 8005b06:	e033      	b.n	8005b70 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b0e:	f003 0302 	and.w	r3, r3, #2
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d001      	beq.n	8005b1a <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8005b16:	2302      	movs	r3, #2
 8005b18:	e02a      	b.n	8005b70 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b20:	f003 0320 	and.w	r3, r3, #32
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d017      	beq.n	8005b58 <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 8005b28:	2320      	movs	r3, #32
 8005b2a:	e021      	b.n	8005b70 <SD_SendSDStatus+0x194>
    /* Nothing to do */
  }

  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	4618      	mov	r0, r3
 8005b32:	f001 fa05 	bl	8006f40 <SDMMC_ReadFIFO>
 8005b36:	4602      	mov	r2, r0
 8005b38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b3a:	601a      	str	r2, [r3, #0]
    pData++;
 8005b3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b3e:	3304      	adds	r3, #4
 8005b40:	62bb      	str	r3, [r7, #40]	; 0x28

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8005b42:	f7fb fb21 	bl	8001188 <HAL_GetTick>
 8005b46:	4602      	mov	r2, r0
 8005b48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b4a:	1ad3      	subs	r3, r2, r3
 8005b4c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005b50:	d102      	bne.n	8005b58 <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8005b52:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005b56:	e00b      	b.n	8005b70 <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b5e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d1e2      	bne.n	8005b2c <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	4a03      	ldr	r2, [pc, #12]	; (8005b78 <SD_SendSDStatus+0x19c>)
 8005b6c:	639a      	str	r2, [r3, #56]	; 0x38

  return HAL_SD_ERROR_NONE;
 8005b6e:	2300      	movs	r3, #0
}
 8005b70:	4618      	mov	r0, r3
 8005b72:	3730      	adds	r7, #48	; 0x30
 8005b74:	46bd      	mov	sp, r7
 8005b76:	bd80      	pop	{r7, pc}
 8005b78:	18000f3a 	.word	0x18000f3a

08005b7c <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8005b7c:	b580      	push	{r7, lr}
 8005b7e:	b084      	sub	sp, #16
 8005b80:	af00      	add	r7, sp, #0
 8005b82:	6078      	str	r0, [r7, #4]
 8005b84:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if (pCardStatus == NULL)
 8005b86:	683b      	ldr	r3, [r7, #0]
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d102      	bne.n	8005b92 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8005b8c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005b90:	e018      	b.n	8005bc4 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681a      	ldr	r2, [r3, #0]
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b9a:	041b      	lsls	r3, r3, #16
 8005b9c:	4619      	mov	r1, r3
 8005b9e:	4610      	mov	r0, r2
 8005ba0:	f001 fbdd 	bl	800735e <SDMMC_CmdSendStatus>
 8005ba4:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d001      	beq.n	8005bb0 <SD_SendStatus+0x34>
  {
    return errorstate;
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	e009      	b.n	8005bc4 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	2100      	movs	r1, #0
 8005bb6:	4618      	mov	r0, r3
 8005bb8:	f001 fa25 	bl	8007006 <SDMMC_GetResponse>
 8005bbc:	4602      	mov	r2, r0
 8005bbe:	683b      	ldr	r3, [r7, #0]
 8005bc0:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8005bc2:	2300      	movs	r3, #0
}
 8005bc4:	4618      	mov	r0, r3
 8005bc6:	3710      	adds	r7, #16
 8005bc8:	46bd      	mov	sp, r7
 8005bca:	bd80      	pop	{r7, pc}

08005bcc <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8005bcc:	b580      	push	{r7, lr}
 8005bce:	b086      	sub	sp, #24
 8005bd0:	af00      	add	r7, sp, #0
 8005bd2:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 8005bd4:	2300      	movs	r3, #0
 8005bd6:	60fb      	str	r3, [r7, #12]
 8005bd8:	2300      	movs	r3, #0
 8005bda:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	2100      	movs	r1, #0
 8005be2:	4618      	mov	r0, r3
 8005be4:	f001 fa0f 	bl	8007006 <SDMMC_GetResponse>
 8005be8:	4603      	mov	r3, r0
 8005bea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005bee:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005bf2:	d102      	bne.n	8005bfa <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8005bf4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005bf8:	e02f      	b.n	8005c5a <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8005bfa:	f107 030c 	add.w	r3, r7, #12
 8005bfe:	4619      	mov	r1, r3
 8005c00:	6878      	ldr	r0, [r7, #4]
 8005c02:	f000 f879 	bl	8005cf8 <SD_FindSCR>
 8005c06:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 8005c08:	697b      	ldr	r3, [r7, #20]
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d001      	beq.n	8005c12 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8005c0e:	697b      	ldr	r3, [r7, #20]
 8005c10:	e023      	b.n	8005c5a <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if ((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8005c12:	693b      	ldr	r3, [r7, #16]
 8005c14:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d01c      	beq.n	8005c56 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681a      	ldr	r2, [r3, #0]
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c24:	041b      	lsls	r3, r3, #16
 8005c26:	4619      	mov	r1, r3
 8005c28:	4610      	mov	r0, r2
 8005c2a:	f001 faaf 	bl	800718c <SDMMC_CmdAppCommand>
 8005c2e:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8005c30:	697b      	ldr	r3, [r7, #20]
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d001      	beq.n	8005c3a <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8005c36:	697b      	ldr	r3, [r7, #20]
 8005c38:	e00f      	b.n	8005c5a <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	2102      	movs	r1, #2
 8005c40:	4618      	mov	r0, r3
 8005c42:	f001 fae6 	bl	8007212 <SDMMC_CmdBusWidth>
 8005c46:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8005c48:	697b      	ldr	r3, [r7, #20]
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d001      	beq.n	8005c52 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8005c4e:	697b      	ldr	r3, [r7, #20]
 8005c50:	e003      	b.n	8005c5a <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8005c52:	2300      	movs	r3, #0
 8005c54:	e001      	b.n	8005c5a <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8005c56:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8005c5a:	4618      	mov	r0, r3
 8005c5c:	3718      	adds	r7, #24
 8005c5e:	46bd      	mov	sp, r7
 8005c60:	bd80      	pop	{r7, pc}

08005c62 <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8005c62:	b580      	push	{r7, lr}
 8005c64:	b086      	sub	sp, #24
 8005c66:	af00      	add	r7, sp, #0
 8005c68:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 8005c6a:	2300      	movs	r3, #0
 8005c6c:	60fb      	str	r3, [r7, #12]
 8005c6e:	2300      	movs	r3, #0
 8005c70:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	2100      	movs	r1, #0
 8005c78:	4618      	mov	r0, r3
 8005c7a:	f001 f9c4 	bl	8007006 <SDMMC_GetResponse>
 8005c7e:	4603      	mov	r3, r0
 8005c80:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c84:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005c88:	d102      	bne.n	8005c90 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8005c8a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005c8e:	e02f      	b.n	8005cf0 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8005c90:	f107 030c 	add.w	r3, r7, #12
 8005c94:	4619      	mov	r1, r3
 8005c96:	6878      	ldr	r0, [r7, #4]
 8005c98:	f000 f82e 	bl	8005cf8 <SD_FindSCR>
 8005c9c:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 8005c9e:	697b      	ldr	r3, [r7, #20]
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d001      	beq.n	8005ca8 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8005ca4:	697b      	ldr	r3, [r7, #20]
 8005ca6:	e023      	b.n	8005cf0 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if ((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8005ca8:	693b      	ldr	r3, [r7, #16]
 8005caa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d01c      	beq.n	8005cec <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681a      	ldr	r2, [r3, #0]
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005cba:	041b      	lsls	r3, r3, #16
 8005cbc:	4619      	mov	r1, r3
 8005cbe:	4610      	mov	r0, r2
 8005cc0:	f001 fa64 	bl	800718c <SDMMC_CmdAppCommand>
 8005cc4:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8005cc6:	697b      	ldr	r3, [r7, #20]
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d001      	beq.n	8005cd0 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8005ccc:	697b      	ldr	r3, [r7, #20]
 8005cce:	e00f      	b.n	8005cf0 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	2100      	movs	r1, #0
 8005cd6:	4618      	mov	r0, r3
 8005cd8:	f001 fa9b 	bl	8007212 <SDMMC_CmdBusWidth>
 8005cdc:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8005cde:	697b      	ldr	r3, [r7, #20]
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d001      	beq.n	8005ce8 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8005ce4:	697b      	ldr	r3, [r7, #20]
 8005ce6:	e003      	b.n	8005cf0 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8005ce8:	2300      	movs	r3, #0
 8005cea:	e001      	b.n	8005cf0 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8005cec:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8005cf0:	4618      	mov	r0, r3
 8005cf2:	3718      	adds	r7, #24
 8005cf4:	46bd      	mov	sp, r7
 8005cf6:	bd80      	pop	{r7, pc}

08005cf8 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8005cf8:	b580      	push	{r7, lr}
 8005cfa:	b08e      	sub	sp, #56	; 0x38
 8005cfc:	af00      	add	r7, sp, #0
 8005cfe:	6078      	str	r0, [r7, #4]
 8005d00:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8005d02:	f7fb fa41 	bl	8001188 <HAL_GetTick>
 8005d06:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8005d08:	2300      	movs	r3, #0
 8005d0a:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 8005d0c:	2300      	movs	r3, #0
 8005d0e:	60bb      	str	r3, [r7, #8]
 8005d10:	2300      	movs	r3, #0
 8005d12:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8005d14:	683b      	ldr	r3, [r7, #0]
 8005d16:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	2108      	movs	r1, #8
 8005d1e:	4618      	mov	r0, r3
 8005d20:	f001 f9b0 	bl	8007084 <SDMMC_CmdBlockLength>
 8005d24:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 8005d26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d001      	beq.n	8005d30 <SD_FindSCR+0x38>
  {
    return errorstate;
 8005d2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d2e:	e0ad      	b.n	8005e8c <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681a      	ldr	r2, [r3, #0]
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d38:	041b      	lsls	r3, r3, #16
 8005d3a:	4619      	mov	r1, r3
 8005d3c:	4610      	mov	r0, r2
 8005d3e:	f001 fa25 	bl	800718c <SDMMC_CmdAppCommand>
 8005d42:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 8005d44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d001      	beq.n	8005d4e <SD_FindSCR+0x56>
  {
    return errorstate;
 8005d4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d4c:	e09e      	b.n	8005e8c <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8005d4e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005d52:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8005d54:	2308      	movs	r3, #8
 8005d56:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 8005d58:	2330      	movs	r3, #48	; 0x30
 8005d5a:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8005d5c:	2302      	movs	r3, #2
 8005d5e:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8005d60:	2300      	movs	r3, #0
 8005d62:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8005d64:	2301      	movs	r3, #1
 8005d66:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	f107 0210 	add.w	r2, r7, #16
 8005d70:	4611      	mov	r1, r2
 8005d72:	4618      	mov	r0, r3
 8005d74:	f001 f95a 	bl	800702c <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	4618      	mov	r0, r3
 8005d7e:	f001 fa6b 	bl	8007258 <SDMMC_CmdSendSCR>
 8005d82:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 8005d84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d027      	beq.n	8005dda <SD_FindSCR+0xe2>
  {
    return errorstate;
 8005d8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d8c:	e07e      	b.n	8005e8c <SD_FindSCR+0x194>
  }

  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
                            SDMMC_FLAG_DATAEND))
  {
    if ((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d94:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d113      	bne.n	8005dc4 <SD_FindSCR+0xcc>
 8005d9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d110      	bne.n	8005dc4 <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	4618      	mov	r0, r3
 8005da8:	f001 f8ca 	bl	8006f40 <SDMMC_ReadFIFO>
 8005dac:	4603      	mov	r3, r0
 8005dae:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	4618      	mov	r0, r3
 8005db6:	f001 f8c3 	bl	8006f40 <SDMMC_ReadFIFO>
 8005dba:	4603      	mov	r3, r0
 8005dbc:	60fb      	str	r3, [r7, #12]
      index++;
 8005dbe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005dc0:	3301      	adds	r3, #1
 8005dc2:	637b      	str	r3, [r7, #52]	; 0x34
    }


    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8005dc4:	f7fb f9e0 	bl	8001188 <HAL_GetTick>
 8005dc8:	4602      	mov	r2, r0
 8005dca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dcc:	1ad3      	subs	r3, r2, r3
 8005dce:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005dd2:	d102      	bne.n	8005dda <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8005dd4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005dd8:	e058      	b.n	8005e8c <SD_FindSCR+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005de0:	f240 532a 	movw	r3, #1322	; 0x52a
 8005de4:	4013      	ands	r3, r2
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d0d1      	beq.n	8005d8e <SD_FindSCR+0x96>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005df0:	f003 0308 	and.w	r3, r3, #8
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d005      	beq.n	8005e04 <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	2208      	movs	r2, #8
 8005dfe:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8005e00:	2308      	movs	r3, #8
 8005e02:	e043      	b.n	8005e8c <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e0a:	f003 0302 	and.w	r3, r3, #2
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d005      	beq.n	8005e1e <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	2202      	movs	r2, #2
 8005e18:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8005e1a:	2302      	movs	r3, #2
 8005e1c:	e036      	b.n	8005e8c <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e24:	f003 0320 	and.w	r3, r3, #32
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d005      	beq.n	8005e38 <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	2220      	movs	r2, #32
 8005e32:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8005e34:	2320      	movs	r3, #32
 8005e36:	e029      	b.n	8005e8c <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	4a15      	ldr	r2, [pc, #84]	; (8005e94 <SD_FindSCR+0x19c>)
 8005e3e:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	061a      	lsls	r2, r3, #24
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	021b      	lsls	r3, r3, #8
 8005e48:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005e4c:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	0a1b      	lsrs	r3, r3, #8
 8005e52:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 8005e56:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	0e1b      	lsrs	r3, r3, #24
 8005e5c:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 8005e5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e60:	601a      	str	r2, [r3, #0]
    scr++;
 8005e62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e64:	3304      	adds	r3, #4
 8005e66:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 8005e68:	68bb      	ldr	r3, [r7, #8]
 8005e6a:	061a      	lsls	r2, r3, #24
 8005e6c:	68bb      	ldr	r3, [r7, #8]
 8005e6e:	021b      	lsls	r3, r3, #8
 8005e70:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005e74:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8005e76:	68bb      	ldr	r3, [r7, #8]
 8005e78:	0a1b      	lsrs	r3, r3, #8
 8005e7a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 8005e7e:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8005e80:	68bb      	ldr	r3, [r7, #8]
 8005e82:	0e1b      	lsrs	r3, r3, #24
 8005e84:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 8005e86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e88:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8005e8a:	2300      	movs	r3, #0
}
 8005e8c:	4618      	mov	r0, r3
 8005e8e:	3738      	adds	r7, #56	; 0x38
 8005e90:	46bd      	mov	sp, r7
 8005e92:	bd80      	pop	{r7, pc}
 8005e94:	18000f3a 	.word	0x18000f3a

08005e98 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005e98:	b580      	push	{r7, lr}
 8005e9a:	b082      	sub	sp, #8
 8005e9c:	af00      	add	r7, sp, #0
 8005e9e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d101      	bne.n	8005eaa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005ea6:	2301      	movs	r3, #1
 8005ea8:	e042      	b.n	8005f30 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d106      	bne.n	8005ec2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	2200      	movs	r2, #0
 8005eb8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005ebc:	6878      	ldr	r0, [r7, #4]
 8005ebe:	f7fa ff2d 	bl	8000d1c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	2224      	movs	r2, #36	; 0x24
 8005ec6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	681a      	ldr	r2, [r3, #0]
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	f022 0201 	bic.w	r2, r2, #1
 8005ed8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005eda:	6878      	ldr	r0, [r7, #4]
 8005edc:	f000 f82c 	bl	8005f38 <UART_SetConfig>
 8005ee0:	4603      	mov	r3, r0
 8005ee2:	2b01      	cmp	r3, #1
 8005ee4:	d101      	bne.n	8005eea <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8005ee6:	2301      	movs	r3, #1
 8005ee8:	e022      	b.n	8005f30 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d002      	beq.n	8005ef8 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8005ef2:	6878      	ldr	r0, [r7, #4]
 8005ef4:	f000 fd8a 	bl	8006a0c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	685a      	ldr	r2, [r3, #4]
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005f06:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	689a      	ldr	r2, [r3, #8]
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005f16:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	681a      	ldr	r2, [r3, #0]
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	f042 0201 	orr.w	r2, r2, #1
 8005f26:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005f28:	6878      	ldr	r0, [r7, #4]
 8005f2a:	f000 fe11 	bl	8006b50 <UART_CheckIdleState>
 8005f2e:	4603      	mov	r3, r0
}
 8005f30:	4618      	mov	r0, r3
 8005f32:	3708      	adds	r7, #8
 8005f34:	46bd      	mov	sp, r7
 8005f36:	bd80      	pop	{r7, pc}

08005f38 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005f38:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005f3c:	b092      	sub	sp, #72	; 0x48
 8005f3e:	af00      	add	r7, sp, #0
 8005f40:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005f42:	2300      	movs	r3, #0
 8005f44:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005f48:	697b      	ldr	r3, [r7, #20]
 8005f4a:	689a      	ldr	r2, [r3, #8]
 8005f4c:	697b      	ldr	r3, [r7, #20]
 8005f4e:	691b      	ldr	r3, [r3, #16]
 8005f50:	431a      	orrs	r2, r3
 8005f52:	697b      	ldr	r3, [r7, #20]
 8005f54:	695b      	ldr	r3, [r3, #20]
 8005f56:	431a      	orrs	r2, r3
 8005f58:	697b      	ldr	r3, [r7, #20]
 8005f5a:	69db      	ldr	r3, [r3, #28]
 8005f5c:	4313      	orrs	r3, r2
 8005f5e:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005f60:	697b      	ldr	r3, [r7, #20]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	681a      	ldr	r2, [r3, #0]
 8005f66:	4bbe      	ldr	r3, [pc, #760]	; (8006260 <UART_SetConfig+0x328>)
 8005f68:	4013      	ands	r3, r2
 8005f6a:	697a      	ldr	r2, [r7, #20]
 8005f6c:	6812      	ldr	r2, [r2, #0]
 8005f6e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005f70:	430b      	orrs	r3, r1
 8005f72:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005f74:	697b      	ldr	r3, [r7, #20]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	685b      	ldr	r3, [r3, #4]
 8005f7a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005f7e:	697b      	ldr	r3, [r7, #20]
 8005f80:	68da      	ldr	r2, [r3, #12]
 8005f82:	697b      	ldr	r3, [r7, #20]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	430a      	orrs	r2, r1
 8005f88:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005f8a:	697b      	ldr	r3, [r7, #20]
 8005f8c:	699b      	ldr	r3, [r3, #24]
 8005f8e:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005f90:	697b      	ldr	r3, [r7, #20]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	4ab3      	ldr	r2, [pc, #716]	; (8006264 <UART_SetConfig+0x32c>)
 8005f96:	4293      	cmp	r3, r2
 8005f98:	d004      	beq.n	8005fa4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005f9a:	697b      	ldr	r3, [r7, #20]
 8005f9c:	6a1b      	ldr	r3, [r3, #32]
 8005f9e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005fa0:	4313      	orrs	r3, r2
 8005fa2:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005fa4:	697b      	ldr	r3, [r7, #20]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	689a      	ldr	r2, [r3, #8]
 8005faa:	4baf      	ldr	r3, [pc, #700]	; (8006268 <UART_SetConfig+0x330>)
 8005fac:	4013      	ands	r3, r2
 8005fae:	697a      	ldr	r2, [r7, #20]
 8005fb0:	6812      	ldr	r2, [r2, #0]
 8005fb2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005fb4:	430b      	orrs	r3, r1
 8005fb6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005fb8:	697b      	ldr	r3, [r7, #20]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fbe:	f023 010f 	bic.w	r1, r3, #15
 8005fc2:	697b      	ldr	r3, [r7, #20]
 8005fc4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005fc6:	697b      	ldr	r3, [r7, #20]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	430a      	orrs	r2, r1
 8005fcc:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005fce:	697b      	ldr	r3, [r7, #20]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	4aa6      	ldr	r2, [pc, #664]	; (800626c <UART_SetConfig+0x334>)
 8005fd4:	4293      	cmp	r3, r2
 8005fd6:	d177      	bne.n	80060c8 <UART_SetConfig+0x190>
 8005fd8:	4ba5      	ldr	r3, [pc, #660]	; (8006270 <UART_SetConfig+0x338>)
 8005fda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005fdc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005fe0:	2b28      	cmp	r3, #40	; 0x28
 8005fe2:	d86d      	bhi.n	80060c0 <UART_SetConfig+0x188>
 8005fe4:	a201      	add	r2, pc, #4	; (adr r2, 8005fec <UART_SetConfig+0xb4>)
 8005fe6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fea:	bf00      	nop
 8005fec:	08006091 	.word	0x08006091
 8005ff0:	080060c1 	.word	0x080060c1
 8005ff4:	080060c1 	.word	0x080060c1
 8005ff8:	080060c1 	.word	0x080060c1
 8005ffc:	080060c1 	.word	0x080060c1
 8006000:	080060c1 	.word	0x080060c1
 8006004:	080060c1 	.word	0x080060c1
 8006008:	080060c1 	.word	0x080060c1
 800600c:	08006099 	.word	0x08006099
 8006010:	080060c1 	.word	0x080060c1
 8006014:	080060c1 	.word	0x080060c1
 8006018:	080060c1 	.word	0x080060c1
 800601c:	080060c1 	.word	0x080060c1
 8006020:	080060c1 	.word	0x080060c1
 8006024:	080060c1 	.word	0x080060c1
 8006028:	080060c1 	.word	0x080060c1
 800602c:	080060a1 	.word	0x080060a1
 8006030:	080060c1 	.word	0x080060c1
 8006034:	080060c1 	.word	0x080060c1
 8006038:	080060c1 	.word	0x080060c1
 800603c:	080060c1 	.word	0x080060c1
 8006040:	080060c1 	.word	0x080060c1
 8006044:	080060c1 	.word	0x080060c1
 8006048:	080060c1 	.word	0x080060c1
 800604c:	080060a9 	.word	0x080060a9
 8006050:	080060c1 	.word	0x080060c1
 8006054:	080060c1 	.word	0x080060c1
 8006058:	080060c1 	.word	0x080060c1
 800605c:	080060c1 	.word	0x080060c1
 8006060:	080060c1 	.word	0x080060c1
 8006064:	080060c1 	.word	0x080060c1
 8006068:	080060c1 	.word	0x080060c1
 800606c:	080060b1 	.word	0x080060b1
 8006070:	080060c1 	.word	0x080060c1
 8006074:	080060c1 	.word	0x080060c1
 8006078:	080060c1 	.word	0x080060c1
 800607c:	080060c1 	.word	0x080060c1
 8006080:	080060c1 	.word	0x080060c1
 8006084:	080060c1 	.word	0x080060c1
 8006088:	080060c1 	.word	0x080060c1
 800608c:	080060b9 	.word	0x080060b9
 8006090:	2301      	movs	r3, #1
 8006092:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006096:	e222      	b.n	80064de <UART_SetConfig+0x5a6>
 8006098:	2304      	movs	r3, #4
 800609a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800609e:	e21e      	b.n	80064de <UART_SetConfig+0x5a6>
 80060a0:	2308      	movs	r3, #8
 80060a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80060a6:	e21a      	b.n	80064de <UART_SetConfig+0x5a6>
 80060a8:	2310      	movs	r3, #16
 80060aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80060ae:	e216      	b.n	80064de <UART_SetConfig+0x5a6>
 80060b0:	2320      	movs	r3, #32
 80060b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80060b6:	e212      	b.n	80064de <UART_SetConfig+0x5a6>
 80060b8:	2340      	movs	r3, #64	; 0x40
 80060ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80060be:	e20e      	b.n	80064de <UART_SetConfig+0x5a6>
 80060c0:	2380      	movs	r3, #128	; 0x80
 80060c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80060c6:	e20a      	b.n	80064de <UART_SetConfig+0x5a6>
 80060c8:	697b      	ldr	r3, [r7, #20]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	4a69      	ldr	r2, [pc, #420]	; (8006274 <UART_SetConfig+0x33c>)
 80060ce:	4293      	cmp	r3, r2
 80060d0:	d130      	bne.n	8006134 <UART_SetConfig+0x1fc>
 80060d2:	4b67      	ldr	r3, [pc, #412]	; (8006270 <UART_SetConfig+0x338>)
 80060d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80060d6:	f003 0307 	and.w	r3, r3, #7
 80060da:	2b05      	cmp	r3, #5
 80060dc:	d826      	bhi.n	800612c <UART_SetConfig+0x1f4>
 80060de:	a201      	add	r2, pc, #4	; (adr r2, 80060e4 <UART_SetConfig+0x1ac>)
 80060e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060e4:	080060fd 	.word	0x080060fd
 80060e8:	08006105 	.word	0x08006105
 80060ec:	0800610d 	.word	0x0800610d
 80060f0:	08006115 	.word	0x08006115
 80060f4:	0800611d 	.word	0x0800611d
 80060f8:	08006125 	.word	0x08006125
 80060fc:	2300      	movs	r3, #0
 80060fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006102:	e1ec      	b.n	80064de <UART_SetConfig+0x5a6>
 8006104:	2304      	movs	r3, #4
 8006106:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800610a:	e1e8      	b.n	80064de <UART_SetConfig+0x5a6>
 800610c:	2308      	movs	r3, #8
 800610e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006112:	e1e4      	b.n	80064de <UART_SetConfig+0x5a6>
 8006114:	2310      	movs	r3, #16
 8006116:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800611a:	e1e0      	b.n	80064de <UART_SetConfig+0x5a6>
 800611c:	2320      	movs	r3, #32
 800611e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006122:	e1dc      	b.n	80064de <UART_SetConfig+0x5a6>
 8006124:	2340      	movs	r3, #64	; 0x40
 8006126:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800612a:	e1d8      	b.n	80064de <UART_SetConfig+0x5a6>
 800612c:	2380      	movs	r3, #128	; 0x80
 800612e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006132:	e1d4      	b.n	80064de <UART_SetConfig+0x5a6>
 8006134:	697b      	ldr	r3, [r7, #20]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	4a4f      	ldr	r2, [pc, #316]	; (8006278 <UART_SetConfig+0x340>)
 800613a:	4293      	cmp	r3, r2
 800613c:	d130      	bne.n	80061a0 <UART_SetConfig+0x268>
 800613e:	4b4c      	ldr	r3, [pc, #304]	; (8006270 <UART_SetConfig+0x338>)
 8006140:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006142:	f003 0307 	and.w	r3, r3, #7
 8006146:	2b05      	cmp	r3, #5
 8006148:	d826      	bhi.n	8006198 <UART_SetConfig+0x260>
 800614a:	a201      	add	r2, pc, #4	; (adr r2, 8006150 <UART_SetConfig+0x218>)
 800614c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006150:	08006169 	.word	0x08006169
 8006154:	08006171 	.word	0x08006171
 8006158:	08006179 	.word	0x08006179
 800615c:	08006181 	.word	0x08006181
 8006160:	08006189 	.word	0x08006189
 8006164:	08006191 	.word	0x08006191
 8006168:	2300      	movs	r3, #0
 800616a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800616e:	e1b6      	b.n	80064de <UART_SetConfig+0x5a6>
 8006170:	2304      	movs	r3, #4
 8006172:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006176:	e1b2      	b.n	80064de <UART_SetConfig+0x5a6>
 8006178:	2308      	movs	r3, #8
 800617a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800617e:	e1ae      	b.n	80064de <UART_SetConfig+0x5a6>
 8006180:	2310      	movs	r3, #16
 8006182:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006186:	e1aa      	b.n	80064de <UART_SetConfig+0x5a6>
 8006188:	2320      	movs	r3, #32
 800618a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800618e:	e1a6      	b.n	80064de <UART_SetConfig+0x5a6>
 8006190:	2340      	movs	r3, #64	; 0x40
 8006192:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006196:	e1a2      	b.n	80064de <UART_SetConfig+0x5a6>
 8006198:	2380      	movs	r3, #128	; 0x80
 800619a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800619e:	e19e      	b.n	80064de <UART_SetConfig+0x5a6>
 80061a0:	697b      	ldr	r3, [r7, #20]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	4a35      	ldr	r2, [pc, #212]	; (800627c <UART_SetConfig+0x344>)
 80061a6:	4293      	cmp	r3, r2
 80061a8:	d130      	bne.n	800620c <UART_SetConfig+0x2d4>
 80061aa:	4b31      	ldr	r3, [pc, #196]	; (8006270 <UART_SetConfig+0x338>)
 80061ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80061ae:	f003 0307 	and.w	r3, r3, #7
 80061b2:	2b05      	cmp	r3, #5
 80061b4:	d826      	bhi.n	8006204 <UART_SetConfig+0x2cc>
 80061b6:	a201      	add	r2, pc, #4	; (adr r2, 80061bc <UART_SetConfig+0x284>)
 80061b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061bc:	080061d5 	.word	0x080061d5
 80061c0:	080061dd 	.word	0x080061dd
 80061c4:	080061e5 	.word	0x080061e5
 80061c8:	080061ed 	.word	0x080061ed
 80061cc:	080061f5 	.word	0x080061f5
 80061d0:	080061fd 	.word	0x080061fd
 80061d4:	2300      	movs	r3, #0
 80061d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80061da:	e180      	b.n	80064de <UART_SetConfig+0x5a6>
 80061dc:	2304      	movs	r3, #4
 80061de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80061e2:	e17c      	b.n	80064de <UART_SetConfig+0x5a6>
 80061e4:	2308      	movs	r3, #8
 80061e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80061ea:	e178      	b.n	80064de <UART_SetConfig+0x5a6>
 80061ec:	2310      	movs	r3, #16
 80061ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80061f2:	e174      	b.n	80064de <UART_SetConfig+0x5a6>
 80061f4:	2320      	movs	r3, #32
 80061f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80061fa:	e170      	b.n	80064de <UART_SetConfig+0x5a6>
 80061fc:	2340      	movs	r3, #64	; 0x40
 80061fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006202:	e16c      	b.n	80064de <UART_SetConfig+0x5a6>
 8006204:	2380      	movs	r3, #128	; 0x80
 8006206:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800620a:	e168      	b.n	80064de <UART_SetConfig+0x5a6>
 800620c:	697b      	ldr	r3, [r7, #20]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	4a1b      	ldr	r2, [pc, #108]	; (8006280 <UART_SetConfig+0x348>)
 8006212:	4293      	cmp	r3, r2
 8006214:	d142      	bne.n	800629c <UART_SetConfig+0x364>
 8006216:	4b16      	ldr	r3, [pc, #88]	; (8006270 <UART_SetConfig+0x338>)
 8006218:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800621a:	f003 0307 	and.w	r3, r3, #7
 800621e:	2b05      	cmp	r3, #5
 8006220:	d838      	bhi.n	8006294 <UART_SetConfig+0x35c>
 8006222:	a201      	add	r2, pc, #4	; (adr r2, 8006228 <UART_SetConfig+0x2f0>)
 8006224:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006228:	08006241 	.word	0x08006241
 800622c:	08006249 	.word	0x08006249
 8006230:	08006251 	.word	0x08006251
 8006234:	08006259 	.word	0x08006259
 8006238:	08006285 	.word	0x08006285
 800623c:	0800628d 	.word	0x0800628d
 8006240:	2300      	movs	r3, #0
 8006242:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006246:	e14a      	b.n	80064de <UART_SetConfig+0x5a6>
 8006248:	2304      	movs	r3, #4
 800624a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800624e:	e146      	b.n	80064de <UART_SetConfig+0x5a6>
 8006250:	2308      	movs	r3, #8
 8006252:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006256:	e142      	b.n	80064de <UART_SetConfig+0x5a6>
 8006258:	2310      	movs	r3, #16
 800625a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800625e:	e13e      	b.n	80064de <UART_SetConfig+0x5a6>
 8006260:	cfff69f3 	.word	0xcfff69f3
 8006264:	58000c00 	.word	0x58000c00
 8006268:	11fff4ff 	.word	0x11fff4ff
 800626c:	40011000 	.word	0x40011000
 8006270:	58024400 	.word	0x58024400
 8006274:	40004400 	.word	0x40004400
 8006278:	40004800 	.word	0x40004800
 800627c:	40004c00 	.word	0x40004c00
 8006280:	40005000 	.word	0x40005000
 8006284:	2320      	movs	r3, #32
 8006286:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800628a:	e128      	b.n	80064de <UART_SetConfig+0x5a6>
 800628c:	2340      	movs	r3, #64	; 0x40
 800628e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006292:	e124      	b.n	80064de <UART_SetConfig+0x5a6>
 8006294:	2380      	movs	r3, #128	; 0x80
 8006296:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800629a:	e120      	b.n	80064de <UART_SetConfig+0x5a6>
 800629c:	697b      	ldr	r3, [r7, #20]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	4acb      	ldr	r2, [pc, #812]	; (80065d0 <UART_SetConfig+0x698>)
 80062a2:	4293      	cmp	r3, r2
 80062a4:	d176      	bne.n	8006394 <UART_SetConfig+0x45c>
 80062a6:	4bcb      	ldr	r3, [pc, #812]	; (80065d4 <UART_SetConfig+0x69c>)
 80062a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80062aa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80062ae:	2b28      	cmp	r3, #40	; 0x28
 80062b0:	d86c      	bhi.n	800638c <UART_SetConfig+0x454>
 80062b2:	a201      	add	r2, pc, #4	; (adr r2, 80062b8 <UART_SetConfig+0x380>)
 80062b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062b8:	0800635d 	.word	0x0800635d
 80062bc:	0800638d 	.word	0x0800638d
 80062c0:	0800638d 	.word	0x0800638d
 80062c4:	0800638d 	.word	0x0800638d
 80062c8:	0800638d 	.word	0x0800638d
 80062cc:	0800638d 	.word	0x0800638d
 80062d0:	0800638d 	.word	0x0800638d
 80062d4:	0800638d 	.word	0x0800638d
 80062d8:	08006365 	.word	0x08006365
 80062dc:	0800638d 	.word	0x0800638d
 80062e0:	0800638d 	.word	0x0800638d
 80062e4:	0800638d 	.word	0x0800638d
 80062e8:	0800638d 	.word	0x0800638d
 80062ec:	0800638d 	.word	0x0800638d
 80062f0:	0800638d 	.word	0x0800638d
 80062f4:	0800638d 	.word	0x0800638d
 80062f8:	0800636d 	.word	0x0800636d
 80062fc:	0800638d 	.word	0x0800638d
 8006300:	0800638d 	.word	0x0800638d
 8006304:	0800638d 	.word	0x0800638d
 8006308:	0800638d 	.word	0x0800638d
 800630c:	0800638d 	.word	0x0800638d
 8006310:	0800638d 	.word	0x0800638d
 8006314:	0800638d 	.word	0x0800638d
 8006318:	08006375 	.word	0x08006375
 800631c:	0800638d 	.word	0x0800638d
 8006320:	0800638d 	.word	0x0800638d
 8006324:	0800638d 	.word	0x0800638d
 8006328:	0800638d 	.word	0x0800638d
 800632c:	0800638d 	.word	0x0800638d
 8006330:	0800638d 	.word	0x0800638d
 8006334:	0800638d 	.word	0x0800638d
 8006338:	0800637d 	.word	0x0800637d
 800633c:	0800638d 	.word	0x0800638d
 8006340:	0800638d 	.word	0x0800638d
 8006344:	0800638d 	.word	0x0800638d
 8006348:	0800638d 	.word	0x0800638d
 800634c:	0800638d 	.word	0x0800638d
 8006350:	0800638d 	.word	0x0800638d
 8006354:	0800638d 	.word	0x0800638d
 8006358:	08006385 	.word	0x08006385
 800635c:	2301      	movs	r3, #1
 800635e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006362:	e0bc      	b.n	80064de <UART_SetConfig+0x5a6>
 8006364:	2304      	movs	r3, #4
 8006366:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800636a:	e0b8      	b.n	80064de <UART_SetConfig+0x5a6>
 800636c:	2308      	movs	r3, #8
 800636e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006372:	e0b4      	b.n	80064de <UART_SetConfig+0x5a6>
 8006374:	2310      	movs	r3, #16
 8006376:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800637a:	e0b0      	b.n	80064de <UART_SetConfig+0x5a6>
 800637c:	2320      	movs	r3, #32
 800637e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006382:	e0ac      	b.n	80064de <UART_SetConfig+0x5a6>
 8006384:	2340      	movs	r3, #64	; 0x40
 8006386:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800638a:	e0a8      	b.n	80064de <UART_SetConfig+0x5a6>
 800638c:	2380      	movs	r3, #128	; 0x80
 800638e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006392:	e0a4      	b.n	80064de <UART_SetConfig+0x5a6>
 8006394:	697b      	ldr	r3, [r7, #20]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	4a8f      	ldr	r2, [pc, #572]	; (80065d8 <UART_SetConfig+0x6a0>)
 800639a:	4293      	cmp	r3, r2
 800639c:	d130      	bne.n	8006400 <UART_SetConfig+0x4c8>
 800639e:	4b8d      	ldr	r3, [pc, #564]	; (80065d4 <UART_SetConfig+0x69c>)
 80063a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80063a2:	f003 0307 	and.w	r3, r3, #7
 80063a6:	2b05      	cmp	r3, #5
 80063a8:	d826      	bhi.n	80063f8 <UART_SetConfig+0x4c0>
 80063aa:	a201      	add	r2, pc, #4	; (adr r2, 80063b0 <UART_SetConfig+0x478>)
 80063ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063b0:	080063c9 	.word	0x080063c9
 80063b4:	080063d1 	.word	0x080063d1
 80063b8:	080063d9 	.word	0x080063d9
 80063bc:	080063e1 	.word	0x080063e1
 80063c0:	080063e9 	.word	0x080063e9
 80063c4:	080063f1 	.word	0x080063f1
 80063c8:	2300      	movs	r3, #0
 80063ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80063ce:	e086      	b.n	80064de <UART_SetConfig+0x5a6>
 80063d0:	2304      	movs	r3, #4
 80063d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80063d6:	e082      	b.n	80064de <UART_SetConfig+0x5a6>
 80063d8:	2308      	movs	r3, #8
 80063da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80063de:	e07e      	b.n	80064de <UART_SetConfig+0x5a6>
 80063e0:	2310      	movs	r3, #16
 80063e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80063e6:	e07a      	b.n	80064de <UART_SetConfig+0x5a6>
 80063e8:	2320      	movs	r3, #32
 80063ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80063ee:	e076      	b.n	80064de <UART_SetConfig+0x5a6>
 80063f0:	2340      	movs	r3, #64	; 0x40
 80063f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80063f6:	e072      	b.n	80064de <UART_SetConfig+0x5a6>
 80063f8:	2380      	movs	r3, #128	; 0x80
 80063fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80063fe:	e06e      	b.n	80064de <UART_SetConfig+0x5a6>
 8006400:	697b      	ldr	r3, [r7, #20]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	4a75      	ldr	r2, [pc, #468]	; (80065dc <UART_SetConfig+0x6a4>)
 8006406:	4293      	cmp	r3, r2
 8006408:	d130      	bne.n	800646c <UART_SetConfig+0x534>
 800640a:	4b72      	ldr	r3, [pc, #456]	; (80065d4 <UART_SetConfig+0x69c>)
 800640c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800640e:	f003 0307 	and.w	r3, r3, #7
 8006412:	2b05      	cmp	r3, #5
 8006414:	d826      	bhi.n	8006464 <UART_SetConfig+0x52c>
 8006416:	a201      	add	r2, pc, #4	; (adr r2, 800641c <UART_SetConfig+0x4e4>)
 8006418:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800641c:	08006435 	.word	0x08006435
 8006420:	0800643d 	.word	0x0800643d
 8006424:	08006445 	.word	0x08006445
 8006428:	0800644d 	.word	0x0800644d
 800642c:	08006455 	.word	0x08006455
 8006430:	0800645d 	.word	0x0800645d
 8006434:	2300      	movs	r3, #0
 8006436:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800643a:	e050      	b.n	80064de <UART_SetConfig+0x5a6>
 800643c:	2304      	movs	r3, #4
 800643e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006442:	e04c      	b.n	80064de <UART_SetConfig+0x5a6>
 8006444:	2308      	movs	r3, #8
 8006446:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800644a:	e048      	b.n	80064de <UART_SetConfig+0x5a6>
 800644c:	2310      	movs	r3, #16
 800644e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006452:	e044      	b.n	80064de <UART_SetConfig+0x5a6>
 8006454:	2320      	movs	r3, #32
 8006456:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800645a:	e040      	b.n	80064de <UART_SetConfig+0x5a6>
 800645c:	2340      	movs	r3, #64	; 0x40
 800645e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006462:	e03c      	b.n	80064de <UART_SetConfig+0x5a6>
 8006464:	2380      	movs	r3, #128	; 0x80
 8006466:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800646a:	e038      	b.n	80064de <UART_SetConfig+0x5a6>
 800646c:	697b      	ldr	r3, [r7, #20]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	4a5b      	ldr	r2, [pc, #364]	; (80065e0 <UART_SetConfig+0x6a8>)
 8006472:	4293      	cmp	r3, r2
 8006474:	d130      	bne.n	80064d8 <UART_SetConfig+0x5a0>
 8006476:	4b57      	ldr	r3, [pc, #348]	; (80065d4 <UART_SetConfig+0x69c>)
 8006478:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800647a:	f003 0307 	and.w	r3, r3, #7
 800647e:	2b05      	cmp	r3, #5
 8006480:	d826      	bhi.n	80064d0 <UART_SetConfig+0x598>
 8006482:	a201      	add	r2, pc, #4	; (adr r2, 8006488 <UART_SetConfig+0x550>)
 8006484:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006488:	080064a1 	.word	0x080064a1
 800648c:	080064a9 	.word	0x080064a9
 8006490:	080064b1 	.word	0x080064b1
 8006494:	080064b9 	.word	0x080064b9
 8006498:	080064c1 	.word	0x080064c1
 800649c:	080064c9 	.word	0x080064c9
 80064a0:	2302      	movs	r3, #2
 80064a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80064a6:	e01a      	b.n	80064de <UART_SetConfig+0x5a6>
 80064a8:	2304      	movs	r3, #4
 80064aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80064ae:	e016      	b.n	80064de <UART_SetConfig+0x5a6>
 80064b0:	2308      	movs	r3, #8
 80064b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80064b6:	e012      	b.n	80064de <UART_SetConfig+0x5a6>
 80064b8:	2310      	movs	r3, #16
 80064ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80064be:	e00e      	b.n	80064de <UART_SetConfig+0x5a6>
 80064c0:	2320      	movs	r3, #32
 80064c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80064c6:	e00a      	b.n	80064de <UART_SetConfig+0x5a6>
 80064c8:	2340      	movs	r3, #64	; 0x40
 80064ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80064ce:	e006      	b.n	80064de <UART_SetConfig+0x5a6>
 80064d0:	2380      	movs	r3, #128	; 0x80
 80064d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80064d6:	e002      	b.n	80064de <UART_SetConfig+0x5a6>
 80064d8:	2380      	movs	r3, #128	; 0x80
 80064da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80064de:	697b      	ldr	r3, [r7, #20]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	4a3f      	ldr	r2, [pc, #252]	; (80065e0 <UART_SetConfig+0x6a8>)
 80064e4:	4293      	cmp	r3, r2
 80064e6:	f040 80f8 	bne.w	80066da <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80064ea:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80064ee:	2b20      	cmp	r3, #32
 80064f0:	dc46      	bgt.n	8006580 <UART_SetConfig+0x648>
 80064f2:	2b02      	cmp	r3, #2
 80064f4:	f2c0 8082 	blt.w	80065fc <UART_SetConfig+0x6c4>
 80064f8:	3b02      	subs	r3, #2
 80064fa:	2b1e      	cmp	r3, #30
 80064fc:	d87e      	bhi.n	80065fc <UART_SetConfig+0x6c4>
 80064fe:	a201      	add	r2, pc, #4	; (adr r2, 8006504 <UART_SetConfig+0x5cc>)
 8006500:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006504:	08006587 	.word	0x08006587
 8006508:	080065fd 	.word	0x080065fd
 800650c:	0800658f 	.word	0x0800658f
 8006510:	080065fd 	.word	0x080065fd
 8006514:	080065fd 	.word	0x080065fd
 8006518:	080065fd 	.word	0x080065fd
 800651c:	0800659f 	.word	0x0800659f
 8006520:	080065fd 	.word	0x080065fd
 8006524:	080065fd 	.word	0x080065fd
 8006528:	080065fd 	.word	0x080065fd
 800652c:	080065fd 	.word	0x080065fd
 8006530:	080065fd 	.word	0x080065fd
 8006534:	080065fd 	.word	0x080065fd
 8006538:	080065fd 	.word	0x080065fd
 800653c:	080065af 	.word	0x080065af
 8006540:	080065fd 	.word	0x080065fd
 8006544:	080065fd 	.word	0x080065fd
 8006548:	080065fd 	.word	0x080065fd
 800654c:	080065fd 	.word	0x080065fd
 8006550:	080065fd 	.word	0x080065fd
 8006554:	080065fd 	.word	0x080065fd
 8006558:	080065fd 	.word	0x080065fd
 800655c:	080065fd 	.word	0x080065fd
 8006560:	080065fd 	.word	0x080065fd
 8006564:	080065fd 	.word	0x080065fd
 8006568:	080065fd 	.word	0x080065fd
 800656c:	080065fd 	.word	0x080065fd
 8006570:	080065fd 	.word	0x080065fd
 8006574:	080065fd 	.word	0x080065fd
 8006578:	080065fd 	.word	0x080065fd
 800657c:	080065ef 	.word	0x080065ef
 8006580:	2b40      	cmp	r3, #64	; 0x40
 8006582:	d037      	beq.n	80065f4 <UART_SetConfig+0x6bc>
 8006584:	e03a      	b.n	80065fc <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8006586:	f7fd fecd 	bl	8004324 <HAL_RCCEx_GetD3PCLK1Freq>
 800658a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800658c:	e03c      	b.n	8006608 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800658e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006592:	4618      	mov	r0, r3
 8006594:	f7fd fedc 	bl	8004350 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006598:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800659a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800659c:	e034      	b.n	8006608 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800659e:	f107 0318 	add.w	r3, r7, #24
 80065a2:	4618      	mov	r0, r3
 80065a4:	f7fe f828 	bl	80045f8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80065a8:	69fb      	ldr	r3, [r7, #28]
 80065aa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80065ac:	e02c      	b.n	8006608 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80065ae:	4b09      	ldr	r3, [pc, #36]	; (80065d4 <UART_SetConfig+0x69c>)
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	f003 0320 	and.w	r3, r3, #32
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d016      	beq.n	80065e8 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80065ba:	4b06      	ldr	r3, [pc, #24]	; (80065d4 <UART_SetConfig+0x69c>)
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	08db      	lsrs	r3, r3, #3
 80065c0:	f003 0303 	and.w	r3, r3, #3
 80065c4:	4a07      	ldr	r2, [pc, #28]	; (80065e4 <UART_SetConfig+0x6ac>)
 80065c6:	fa22 f303 	lsr.w	r3, r2, r3
 80065ca:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80065cc:	e01c      	b.n	8006608 <UART_SetConfig+0x6d0>
 80065ce:	bf00      	nop
 80065d0:	40011400 	.word	0x40011400
 80065d4:	58024400 	.word	0x58024400
 80065d8:	40007800 	.word	0x40007800
 80065dc:	40007c00 	.word	0x40007c00
 80065e0:	58000c00 	.word	0x58000c00
 80065e4:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 80065e8:	4b9e      	ldr	r3, [pc, #632]	; (8006864 <UART_SetConfig+0x92c>)
 80065ea:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80065ec:	e00c      	b.n	8006608 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80065ee:	4b9e      	ldr	r3, [pc, #632]	; (8006868 <UART_SetConfig+0x930>)
 80065f0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80065f2:	e009      	b.n	8006608 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80065f4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80065f8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80065fa:	e005      	b.n	8006608 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 80065fc:	2300      	movs	r3, #0
 80065fe:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8006600:	2301      	movs	r3, #1
 8006602:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8006606:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006608:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800660a:	2b00      	cmp	r3, #0
 800660c:	f000 81e0 	beq.w	80069d0 <UART_SetConfig+0xa98>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006610:	697b      	ldr	r3, [r7, #20]
 8006612:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006614:	4a95      	ldr	r2, [pc, #596]	; (800686c <UART_SetConfig+0x934>)
 8006616:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800661a:	461a      	mov	r2, r3
 800661c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800661e:	fbb3 f3f2 	udiv	r3, r3, r2
 8006622:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006624:	697b      	ldr	r3, [r7, #20]
 8006626:	685a      	ldr	r2, [r3, #4]
 8006628:	4613      	mov	r3, r2
 800662a:	005b      	lsls	r3, r3, #1
 800662c:	4413      	add	r3, r2
 800662e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006630:	429a      	cmp	r2, r3
 8006632:	d305      	bcc.n	8006640 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006634:	697b      	ldr	r3, [r7, #20]
 8006636:	685b      	ldr	r3, [r3, #4]
 8006638:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800663a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800663c:	429a      	cmp	r2, r3
 800663e:	d903      	bls.n	8006648 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8006640:	2301      	movs	r3, #1
 8006642:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8006646:	e1c3      	b.n	80069d0 <UART_SetConfig+0xa98>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006648:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800664a:	2200      	movs	r2, #0
 800664c:	60bb      	str	r3, [r7, #8]
 800664e:	60fa      	str	r2, [r7, #12]
 8006650:	697b      	ldr	r3, [r7, #20]
 8006652:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006654:	4a85      	ldr	r2, [pc, #532]	; (800686c <UART_SetConfig+0x934>)
 8006656:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800665a:	b29b      	uxth	r3, r3
 800665c:	2200      	movs	r2, #0
 800665e:	603b      	str	r3, [r7, #0]
 8006660:	607a      	str	r2, [r7, #4]
 8006662:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006666:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800666a:	f7f9 fe35 	bl	80002d8 <__aeabi_uldivmod>
 800666e:	4602      	mov	r2, r0
 8006670:	460b      	mov	r3, r1
 8006672:	4610      	mov	r0, r2
 8006674:	4619      	mov	r1, r3
 8006676:	f04f 0200 	mov.w	r2, #0
 800667a:	f04f 0300 	mov.w	r3, #0
 800667e:	020b      	lsls	r3, r1, #8
 8006680:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006684:	0202      	lsls	r2, r0, #8
 8006686:	6979      	ldr	r1, [r7, #20]
 8006688:	6849      	ldr	r1, [r1, #4]
 800668a:	0849      	lsrs	r1, r1, #1
 800668c:	2000      	movs	r0, #0
 800668e:	460c      	mov	r4, r1
 8006690:	4605      	mov	r5, r0
 8006692:	eb12 0804 	adds.w	r8, r2, r4
 8006696:	eb43 0905 	adc.w	r9, r3, r5
 800669a:	697b      	ldr	r3, [r7, #20]
 800669c:	685b      	ldr	r3, [r3, #4]
 800669e:	2200      	movs	r2, #0
 80066a0:	469a      	mov	sl, r3
 80066a2:	4693      	mov	fp, r2
 80066a4:	4652      	mov	r2, sl
 80066a6:	465b      	mov	r3, fp
 80066a8:	4640      	mov	r0, r8
 80066aa:	4649      	mov	r1, r9
 80066ac:	f7f9 fe14 	bl	80002d8 <__aeabi_uldivmod>
 80066b0:	4602      	mov	r2, r0
 80066b2:	460b      	mov	r3, r1
 80066b4:	4613      	mov	r3, r2
 80066b6:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80066b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066ba:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80066be:	d308      	bcc.n	80066d2 <UART_SetConfig+0x79a>
 80066c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066c2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80066c6:	d204      	bcs.n	80066d2 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 80066c8:	697b      	ldr	r3, [r7, #20]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80066ce:	60da      	str	r2, [r3, #12]
 80066d0:	e17e      	b.n	80069d0 <UART_SetConfig+0xa98>
        }
        else
        {
          ret = HAL_ERROR;
 80066d2:	2301      	movs	r3, #1
 80066d4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80066d8:	e17a      	b.n	80069d0 <UART_SetConfig+0xa98>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80066da:	697b      	ldr	r3, [r7, #20]
 80066dc:	69db      	ldr	r3, [r3, #28]
 80066de:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80066e2:	f040 80c7 	bne.w	8006874 <UART_SetConfig+0x93c>
  {
    switch (clocksource)
 80066e6:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80066ea:	2b20      	cmp	r3, #32
 80066ec:	dc48      	bgt.n	8006780 <UART_SetConfig+0x848>
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	db7b      	blt.n	80067ea <UART_SetConfig+0x8b2>
 80066f2:	2b20      	cmp	r3, #32
 80066f4:	d879      	bhi.n	80067ea <UART_SetConfig+0x8b2>
 80066f6:	a201      	add	r2, pc, #4	; (adr r2, 80066fc <UART_SetConfig+0x7c4>)
 80066f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066fc:	08006787 	.word	0x08006787
 8006700:	0800678f 	.word	0x0800678f
 8006704:	080067eb 	.word	0x080067eb
 8006708:	080067eb 	.word	0x080067eb
 800670c:	08006797 	.word	0x08006797
 8006710:	080067eb 	.word	0x080067eb
 8006714:	080067eb 	.word	0x080067eb
 8006718:	080067eb 	.word	0x080067eb
 800671c:	080067a7 	.word	0x080067a7
 8006720:	080067eb 	.word	0x080067eb
 8006724:	080067eb 	.word	0x080067eb
 8006728:	080067eb 	.word	0x080067eb
 800672c:	080067eb 	.word	0x080067eb
 8006730:	080067eb 	.word	0x080067eb
 8006734:	080067eb 	.word	0x080067eb
 8006738:	080067eb 	.word	0x080067eb
 800673c:	080067b7 	.word	0x080067b7
 8006740:	080067eb 	.word	0x080067eb
 8006744:	080067eb 	.word	0x080067eb
 8006748:	080067eb 	.word	0x080067eb
 800674c:	080067eb 	.word	0x080067eb
 8006750:	080067eb 	.word	0x080067eb
 8006754:	080067eb 	.word	0x080067eb
 8006758:	080067eb 	.word	0x080067eb
 800675c:	080067eb 	.word	0x080067eb
 8006760:	080067eb 	.word	0x080067eb
 8006764:	080067eb 	.word	0x080067eb
 8006768:	080067eb 	.word	0x080067eb
 800676c:	080067eb 	.word	0x080067eb
 8006770:	080067eb 	.word	0x080067eb
 8006774:	080067eb 	.word	0x080067eb
 8006778:	080067eb 	.word	0x080067eb
 800677c:	080067dd 	.word	0x080067dd
 8006780:	2b40      	cmp	r3, #64	; 0x40
 8006782:	d02e      	beq.n	80067e2 <UART_SetConfig+0x8aa>
 8006784:	e031      	b.n	80067ea <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006786:	f7fc f989 	bl	8002a9c <HAL_RCC_GetPCLK1Freq>
 800678a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800678c:	e033      	b.n	80067f6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800678e:	f7fc f99b 	bl	8002ac8 <HAL_RCC_GetPCLK2Freq>
 8006792:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8006794:	e02f      	b.n	80067f6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006796:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800679a:	4618      	mov	r0, r3
 800679c:	f7fd fdd8 	bl	8004350 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80067a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067a2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80067a4:	e027      	b.n	80067f6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80067a6:	f107 0318 	add.w	r3, r7, #24
 80067aa:	4618      	mov	r0, r3
 80067ac:	f7fd ff24 	bl	80045f8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80067b0:	69fb      	ldr	r3, [r7, #28]
 80067b2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80067b4:	e01f      	b.n	80067f6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80067b6:	4b2e      	ldr	r3, [pc, #184]	; (8006870 <UART_SetConfig+0x938>)
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	f003 0320 	and.w	r3, r3, #32
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d009      	beq.n	80067d6 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80067c2:	4b2b      	ldr	r3, [pc, #172]	; (8006870 <UART_SetConfig+0x938>)
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	08db      	lsrs	r3, r3, #3
 80067c8:	f003 0303 	and.w	r3, r3, #3
 80067cc:	4a25      	ldr	r2, [pc, #148]	; (8006864 <UART_SetConfig+0x92c>)
 80067ce:	fa22 f303 	lsr.w	r3, r2, r3
 80067d2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80067d4:	e00f      	b.n	80067f6 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 80067d6:	4b23      	ldr	r3, [pc, #140]	; (8006864 <UART_SetConfig+0x92c>)
 80067d8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80067da:	e00c      	b.n	80067f6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80067dc:	4b22      	ldr	r3, [pc, #136]	; (8006868 <UART_SetConfig+0x930>)
 80067de:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80067e0:	e009      	b.n	80067f6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80067e2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80067e6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80067e8:	e005      	b.n	80067f6 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 80067ea:	2300      	movs	r3, #0
 80067ec:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80067ee:	2301      	movs	r3, #1
 80067f0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80067f4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80067f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	f000 80e9 	beq.w	80069d0 <UART_SetConfig+0xa98>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80067fe:	697b      	ldr	r3, [r7, #20]
 8006800:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006802:	4a1a      	ldr	r2, [pc, #104]	; (800686c <UART_SetConfig+0x934>)
 8006804:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006808:	461a      	mov	r2, r3
 800680a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800680c:	fbb3 f3f2 	udiv	r3, r3, r2
 8006810:	005a      	lsls	r2, r3, #1
 8006812:	697b      	ldr	r3, [r7, #20]
 8006814:	685b      	ldr	r3, [r3, #4]
 8006816:	085b      	lsrs	r3, r3, #1
 8006818:	441a      	add	r2, r3
 800681a:	697b      	ldr	r3, [r7, #20]
 800681c:	685b      	ldr	r3, [r3, #4]
 800681e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006822:	b29b      	uxth	r3, r3
 8006824:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006826:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006828:	2b0f      	cmp	r3, #15
 800682a:	d916      	bls.n	800685a <UART_SetConfig+0x922>
 800682c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800682e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006832:	d212      	bcs.n	800685a <UART_SetConfig+0x922>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006834:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006836:	b29b      	uxth	r3, r3
 8006838:	f023 030f 	bic.w	r3, r3, #15
 800683c:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800683e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006840:	085b      	lsrs	r3, r3, #1
 8006842:	b29b      	uxth	r3, r3
 8006844:	f003 0307 	and.w	r3, r3, #7
 8006848:	b29a      	uxth	r2, r3
 800684a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800684c:	4313      	orrs	r3, r2
 800684e:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 8006850:	697b      	ldr	r3, [r7, #20]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8006856:	60da      	str	r2, [r3, #12]
 8006858:	e0ba      	b.n	80069d0 <UART_SetConfig+0xa98>
      }
      else
      {
        ret = HAL_ERROR;
 800685a:	2301      	movs	r3, #1
 800685c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8006860:	e0b6      	b.n	80069d0 <UART_SetConfig+0xa98>
 8006862:	bf00      	nop
 8006864:	03d09000 	.word	0x03d09000
 8006868:	003d0900 	.word	0x003d0900
 800686c:	08007ec4 	.word	0x08007ec4
 8006870:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8006874:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8006878:	2b20      	cmp	r3, #32
 800687a:	dc49      	bgt.n	8006910 <UART_SetConfig+0x9d8>
 800687c:	2b00      	cmp	r3, #0
 800687e:	db7c      	blt.n	800697a <UART_SetConfig+0xa42>
 8006880:	2b20      	cmp	r3, #32
 8006882:	d87a      	bhi.n	800697a <UART_SetConfig+0xa42>
 8006884:	a201      	add	r2, pc, #4	; (adr r2, 800688c <UART_SetConfig+0x954>)
 8006886:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800688a:	bf00      	nop
 800688c:	08006917 	.word	0x08006917
 8006890:	0800691f 	.word	0x0800691f
 8006894:	0800697b 	.word	0x0800697b
 8006898:	0800697b 	.word	0x0800697b
 800689c:	08006927 	.word	0x08006927
 80068a0:	0800697b 	.word	0x0800697b
 80068a4:	0800697b 	.word	0x0800697b
 80068a8:	0800697b 	.word	0x0800697b
 80068ac:	08006937 	.word	0x08006937
 80068b0:	0800697b 	.word	0x0800697b
 80068b4:	0800697b 	.word	0x0800697b
 80068b8:	0800697b 	.word	0x0800697b
 80068bc:	0800697b 	.word	0x0800697b
 80068c0:	0800697b 	.word	0x0800697b
 80068c4:	0800697b 	.word	0x0800697b
 80068c8:	0800697b 	.word	0x0800697b
 80068cc:	08006947 	.word	0x08006947
 80068d0:	0800697b 	.word	0x0800697b
 80068d4:	0800697b 	.word	0x0800697b
 80068d8:	0800697b 	.word	0x0800697b
 80068dc:	0800697b 	.word	0x0800697b
 80068e0:	0800697b 	.word	0x0800697b
 80068e4:	0800697b 	.word	0x0800697b
 80068e8:	0800697b 	.word	0x0800697b
 80068ec:	0800697b 	.word	0x0800697b
 80068f0:	0800697b 	.word	0x0800697b
 80068f4:	0800697b 	.word	0x0800697b
 80068f8:	0800697b 	.word	0x0800697b
 80068fc:	0800697b 	.word	0x0800697b
 8006900:	0800697b 	.word	0x0800697b
 8006904:	0800697b 	.word	0x0800697b
 8006908:	0800697b 	.word	0x0800697b
 800690c:	0800696d 	.word	0x0800696d
 8006910:	2b40      	cmp	r3, #64	; 0x40
 8006912:	d02e      	beq.n	8006972 <UART_SetConfig+0xa3a>
 8006914:	e031      	b.n	800697a <UART_SetConfig+0xa42>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006916:	f7fc f8c1 	bl	8002a9c <HAL_RCC_GetPCLK1Freq>
 800691a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800691c:	e033      	b.n	8006986 <UART_SetConfig+0xa4e>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800691e:	f7fc f8d3 	bl	8002ac8 <HAL_RCC_GetPCLK2Freq>
 8006922:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8006924:	e02f      	b.n	8006986 <UART_SetConfig+0xa4e>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006926:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800692a:	4618      	mov	r0, r3
 800692c:	f7fd fd10 	bl	8004350 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006930:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006932:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006934:	e027      	b.n	8006986 <UART_SetConfig+0xa4e>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006936:	f107 0318 	add.w	r3, r7, #24
 800693a:	4618      	mov	r0, r3
 800693c:	f7fd fe5c 	bl	80045f8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006940:	69fb      	ldr	r3, [r7, #28]
 8006942:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006944:	e01f      	b.n	8006986 <UART_SetConfig+0xa4e>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006946:	4b2d      	ldr	r3, [pc, #180]	; (80069fc <UART_SetConfig+0xac4>)
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	f003 0320 	and.w	r3, r3, #32
 800694e:	2b00      	cmp	r3, #0
 8006950:	d009      	beq.n	8006966 <UART_SetConfig+0xa2e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006952:	4b2a      	ldr	r3, [pc, #168]	; (80069fc <UART_SetConfig+0xac4>)
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	08db      	lsrs	r3, r3, #3
 8006958:	f003 0303 	and.w	r3, r3, #3
 800695c:	4a28      	ldr	r2, [pc, #160]	; (8006a00 <UART_SetConfig+0xac8>)
 800695e:	fa22 f303 	lsr.w	r3, r2, r3
 8006962:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006964:	e00f      	b.n	8006986 <UART_SetConfig+0xa4e>
          pclk = (uint32_t) HSI_VALUE;
 8006966:	4b26      	ldr	r3, [pc, #152]	; (8006a00 <UART_SetConfig+0xac8>)
 8006968:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800696a:	e00c      	b.n	8006986 <UART_SetConfig+0xa4e>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800696c:	4b25      	ldr	r3, [pc, #148]	; (8006a04 <UART_SetConfig+0xacc>)
 800696e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006970:	e009      	b.n	8006986 <UART_SetConfig+0xa4e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006972:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006976:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006978:	e005      	b.n	8006986 <UART_SetConfig+0xa4e>
      default:
        pclk = 0U;
 800697a:	2300      	movs	r3, #0
 800697c:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800697e:	2301      	movs	r3, #1
 8006980:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8006984:	bf00      	nop
    }

    if (pclk != 0U)
 8006986:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006988:	2b00      	cmp	r3, #0
 800698a:	d021      	beq.n	80069d0 <UART_SetConfig+0xa98>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800698c:	697b      	ldr	r3, [r7, #20]
 800698e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006990:	4a1d      	ldr	r2, [pc, #116]	; (8006a08 <UART_SetConfig+0xad0>)
 8006992:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006996:	461a      	mov	r2, r3
 8006998:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800699a:	fbb3 f2f2 	udiv	r2, r3, r2
 800699e:	697b      	ldr	r3, [r7, #20]
 80069a0:	685b      	ldr	r3, [r3, #4]
 80069a2:	085b      	lsrs	r3, r3, #1
 80069a4:	441a      	add	r2, r3
 80069a6:	697b      	ldr	r3, [r7, #20]
 80069a8:	685b      	ldr	r3, [r3, #4]
 80069aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80069ae:	b29b      	uxth	r3, r3
 80069b0:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80069b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069b4:	2b0f      	cmp	r3, #15
 80069b6:	d908      	bls.n	80069ca <UART_SetConfig+0xa92>
 80069b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80069be:	d204      	bcs.n	80069ca <UART_SetConfig+0xa92>
      {
        huart->Instance->BRR = usartdiv;
 80069c0:	697b      	ldr	r3, [r7, #20]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80069c6:	60da      	str	r2, [r3, #12]
 80069c8:	e002      	b.n	80069d0 <UART_SetConfig+0xa98>
      }
      else
      {
        ret = HAL_ERROR;
 80069ca:	2301      	movs	r3, #1
 80069cc:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80069d0:	697b      	ldr	r3, [r7, #20]
 80069d2:	2201      	movs	r2, #1
 80069d4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80069d8:	697b      	ldr	r3, [r7, #20]
 80069da:	2201      	movs	r2, #1
 80069dc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80069e0:	697b      	ldr	r3, [r7, #20]
 80069e2:	2200      	movs	r2, #0
 80069e4:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 80069e6:	697b      	ldr	r3, [r7, #20]
 80069e8:	2200      	movs	r2, #0
 80069ea:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 80069ec:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 80069f0:	4618      	mov	r0, r3
 80069f2:	3748      	adds	r7, #72	; 0x48
 80069f4:	46bd      	mov	sp, r7
 80069f6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80069fa:	bf00      	nop
 80069fc:	58024400 	.word	0x58024400
 8006a00:	03d09000 	.word	0x03d09000
 8006a04:	003d0900 	.word	0x003d0900
 8006a08:	08007ec4 	.word	0x08007ec4

08006a0c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006a0c:	b480      	push	{r7}
 8006a0e:	b083      	sub	sp, #12
 8006a10:	af00      	add	r7, sp, #0
 8006a12:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a18:	f003 0301 	and.w	r3, r3, #1
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d00a      	beq.n	8006a36 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	685b      	ldr	r3, [r3, #4]
 8006a26:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	430a      	orrs	r2, r1
 8006a34:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a3a:	f003 0302 	and.w	r3, r3, #2
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d00a      	beq.n	8006a58 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	685b      	ldr	r3, [r3, #4]
 8006a48:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	430a      	orrs	r2, r1
 8006a56:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a5c:	f003 0304 	and.w	r3, r3, #4
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d00a      	beq.n	8006a7a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	685b      	ldr	r3, [r3, #4]
 8006a6a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	430a      	orrs	r2, r1
 8006a78:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a7e:	f003 0308 	and.w	r3, r3, #8
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d00a      	beq.n	8006a9c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	685b      	ldr	r3, [r3, #4]
 8006a8c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	430a      	orrs	r2, r1
 8006a9a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006aa0:	f003 0310 	and.w	r3, r3, #16
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d00a      	beq.n	8006abe <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	689b      	ldr	r3, [r3, #8]
 8006aae:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	430a      	orrs	r2, r1
 8006abc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ac2:	f003 0320 	and.w	r3, r3, #32
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d00a      	beq.n	8006ae0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	689b      	ldr	r3, [r3, #8]
 8006ad0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	430a      	orrs	r2, r1
 8006ade:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ae4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d01a      	beq.n	8006b22 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	685b      	ldr	r3, [r3, #4]
 8006af2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	430a      	orrs	r2, r1
 8006b00:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b06:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006b0a:	d10a      	bne.n	8006b22 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	685b      	ldr	r3, [r3, #4]
 8006b12:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	430a      	orrs	r2, r1
 8006b20:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d00a      	beq.n	8006b44 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	685b      	ldr	r3, [r3, #4]
 8006b34:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	430a      	orrs	r2, r1
 8006b42:	605a      	str	r2, [r3, #4]
  }
}
 8006b44:	bf00      	nop
 8006b46:	370c      	adds	r7, #12
 8006b48:	46bd      	mov	sp, r7
 8006b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b4e:	4770      	bx	lr

08006b50 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006b50:	b580      	push	{r7, lr}
 8006b52:	b086      	sub	sp, #24
 8006b54:	af02      	add	r7, sp, #8
 8006b56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	2200      	movs	r2, #0
 8006b5c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006b60:	f7fa fb12 	bl	8001188 <HAL_GetTick>
 8006b64:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	f003 0308 	and.w	r3, r3, #8
 8006b70:	2b08      	cmp	r3, #8
 8006b72:	d10e      	bne.n	8006b92 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006b74:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006b78:	9300      	str	r3, [sp, #0]
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	2200      	movs	r2, #0
 8006b7e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006b82:	6878      	ldr	r0, [r7, #4]
 8006b84:	f000 f82f 	bl	8006be6 <UART_WaitOnFlagUntilTimeout>
 8006b88:	4603      	mov	r3, r0
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d001      	beq.n	8006b92 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006b8e:	2303      	movs	r3, #3
 8006b90:	e025      	b.n	8006bde <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	f003 0304 	and.w	r3, r3, #4
 8006b9c:	2b04      	cmp	r3, #4
 8006b9e:	d10e      	bne.n	8006bbe <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006ba0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006ba4:	9300      	str	r3, [sp, #0]
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	2200      	movs	r2, #0
 8006baa:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006bae:	6878      	ldr	r0, [r7, #4]
 8006bb0:	f000 f819 	bl	8006be6 <UART_WaitOnFlagUntilTimeout>
 8006bb4:	4603      	mov	r3, r0
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d001      	beq.n	8006bbe <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006bba:	2303      	movs	r3, #3
 8006bbc:	e00f      	b.n	8006bde <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	2220      	movs	r2, #32
 8006bc2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	2220      	movs	r2, #32
 8006bca:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	2200      	movs	r2, #0
 8006bd2:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	2200      	movs	r2, #0
 8006bd8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006bdc:	2300      	movs	r3, #0
}
 8006bde:	4618      	mov	r0, r3
 8006be0:	3710      	adds	r7, #16
 8006be2:	46bd      	mov	sp, r7
 8006be4:	bd80      	pop	{r7, pc}

08006be6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006be6:	b580      	push	{r7, lr}
 8006be8:	b084      	sub	sp, #16
 8006bea:	af00      	add	r7, sp, #0
 8006bec:	60f8      	str	r0, [r7, #12]
 8006bee:	60b9      	str	r1, [r7, #8]
 8006bf0:	603b      	str	r3, [r7, #0]
 8006bf2:	4613      	mov	r3, r2
 8006bf4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006bf6:	e062      	b.n	8006cbe <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006bf8:	69bb      	ldr	r3, [r7, #24]
 8006bfa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006bfe:	d05e      	beq.n	8006cbe <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006c00:	f7fa fac2 	bl	8001188 <HAL_GetTick>
 8006c04:	4602      	mov	r2, r0
 8006c06:	683b      	ldr	r3, [r7, #0]
 8006c08:	1ad3      	subs	r3, r2, r3
 8006c0a:	69ba      	ldr	r2, [r7, #24]
 8006c0c:	429a      	cmp	r2, r3
 8006c0e:	d302      	bcc.n	8006c16 <UART_WaitOnFlagUntilTimeout+0x30>
 8006c10:	69bb      	ldr	r3, [r7, #24]
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d11d      	bne.n	8006c52 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	681a      	ldr	r2, [r3, #0]
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006c24:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	689a      	ldr	r2, [r3, #8]
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	f022 0201 	bic.w	r2, r2, #1
 8006c34:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	2220      	movs	r2, #32
 8006c3a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	2220      	movs	r2, #32
 8006c42:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	2200      	movs	r2, #0
 8006c4a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8006c4e:	2303      	movs	r3, #3
 8006c50:	e045      	b.n	8006cde <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	f003 0304 	and.w	r3, r3, #4
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d02e      	beq.n	8006cbe <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	69db      	ldr	r3, [r3, #28]
 8006c66:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006c6a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006c6e:	d126      	bne.n	8006cbe <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006c78:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	681a      	ldr	r2, [r3, #0]
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006c88:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	689a      	ldr	r2, [r3, #8]
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	f022 0201 	bic.w	r2, r2, #1
 8006c98:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	2220      	movs	r2, #32
 8006c9e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	2220      	movs	r2, #32
 8006ca6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	2220      	movs	r2, #32
 8006cae:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	2200      	movs	r2, #0
 8006cb6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8006cba:	2303      	movs	r3, #3
 8006cbc:	e00f      	b.n	8006cde <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	69da      	ldr	r2, [r3, #28]
 8006cc4:	68bb      	ldr	r3, [r7, #8]
 8006cc6:	4013      	ands	r3, r2
 8006cc8:	68ba      	ldr	r2, [r7, #8]
 8006cca:	429a      	cmp	r2, r3
 8006ccc:	bf0c      	ite	eq
 8006cce:	2301      	moveq	r3, #1
 8006cd0:	2300      	movne	r3, #0
 8006cd2:	b2db      	uxtb	r3, r3
 8006cd4:	461a      	mov	r2, r3
 8006cd6:	79fb      	ldrb	r3, [r7, #7]
 8006cd8:	429a      	cmp	r2, r3
 8006cda:	d08d      	beq.n	8006bf8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006cdc:	2300      	movs	r3, #0
}
 8006cde:	4618      	mov	r0, r3
 8006ce0:	3710      	adds	r7, #16
 8006ce2:	46bd      	mov	sp, r7
 8006ce4:	bd80      	pop	{r7, pc}

08006ce6 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006ce6:	b480      	push	{r7}
 8006ce8:	b085      	sub	sp, #20
 8006cea:	af00      	add	r7, sp, #0
 8006cec:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006cf4:	2b01      	cmp	r3, #1
 8006cf6:	d101      	bne.n	8006cfc <HAL_UARTEx_DisableFifoMode+0x16>
 8006cf8:	2302      	movs	r3, #2
 8006cfa:	e027      	b.n	8006d4c <HAL_UARTEx_DisableFifoMode+0x66>
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	2201      	movs	r2, #1
 8006d00:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	2224      	movs	r2, #36	; 0x24
 8006d08:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	681a      	ldr	r2, [r3, #0]
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	f022 0201 	bic.w	r2, r2, #1
 8006d22:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8006d2a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	2200      	movs	r2, #0
 8006d30:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	68fa      	ldr	r2, [r7, #12]
 8006d38:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	2220      	movs	r2, #32
 8006d3e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	2200      	movs	r2, #0
 8006d46:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006d4a:	2300      	movs	r3, #0
}
 8006d4c:	4618      	mov	r0, r3
 8006d4e:	3714      	adds	r7, #20
 8006d50:	46bd      	mov	sp, r7
 8006d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d56:	4770      	bx	lr

08006d58 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006d58:	b580      	push	{r7, lr}
 8006d5a:	b084      	sub	sp, #16
 8006d5c:	af00      	add	r7, sp, #0
 8006d5e:	6078      	str	r0, [r7, #4]
 8006d60:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006d68:	2b01      	cmp	r3, #1
 8006d6a:	d101      	bne.n	8006d70 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006d6c:	2302      	movs	r3, #2
 8006d6e:	e02d      	b.n	8006dcc <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	2201      	movs	r2, #1
 8006d74:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	2224      	movs	r2, #36	; 0x24
 8006d7c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	681a      	ldr	r2, [r3, #0]
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	f022 0201 	bic.w	r2, r2, #1
 8006d96:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	689b      	ldr	r3, [r3, #8]
 8006d9e:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	683a      	ldr	r2, [r7, #0]
 8006da8:	430a      	orrs	r2, r1
 8006daa:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006dac:	6878      	ldr	r0, [r7, #4]
 8006dae:	f000 f84f 	bl	8006e50 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	68fa      	ldr	r2, [r7, #12]
 8006db8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	2220      	movs	r2, #32
 8006dbe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	2200      	movs	r2, #0
 8006dc6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006dca:	2300      	movs	r3, #0
}
 8006dcc:	4618      	mov	r0, r3
 8006dce:	3710      	adds	r7, #16
 8006dd0:	46bd      	mov	sp, r7
 8006dd2:	bd80      	pop	{r7, pc}

08006dd4 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006dd4:	b580      	push	{r7, lr}
 8006dd6:	b084      	sub	sp, #16
 8006dd8:	af00      	add	r7, sp, #0
 8006dda:	6078      	str	r0, [r7, #4]
 8006ddc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006de4:	2b01      	cmp	r3, #1
 8006de6:	d101      	bne.n	8006dec <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006de8:	2302      	movs	r3, #2
 8006dea:	e02d      	b.n	8006e48 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	2201      	movs	r2, #1
 8006df0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	2224      	movs	r2, #36	; 0x24
 8006df8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	681a      	ldr	r2, [r3, #0]
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	f022 0201 	bic.w	r2, r2, #1
 8006e12:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	689b      	ldr	r3, [r3, #8]
 8006e1a:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	683a      	ldr	r2, [r7, #0]
 8006e24:	430a      	orrs	r2, r1
 8006e26:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006e28:	6878      	ldr	r0, [r7, #4]
 8006e2a:	f000 f811 	bl	8006e50 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	68fa      	ldr	r2, [r7, #12]
 8006e34:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	2220      	movs	r2, #32
 8006e3a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	2200      	movs	r2, #0
 8006e42:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006e46:	2300      	movs	r3, #0
}
 8006e48:	4618      	mov	r0, r3
 8006e4a:	3710      	adds	r7, #16
 8006e4c:	46bd      	mov	sp, r7
 8006e4e:	bd80      	pop	{r7, pc}

08006e50 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006e50:	b480      	push	{r7}
 8006e52:	b085      	sub	sp, #20
 8006e54:	af00      	add	r7, sp, #0
 8006e56:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	d108      	bne.n	8006e72 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	2201      	movs	r2, #1
 8006e64:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	2201      	movs	r2, #1
 8006e6c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006e70:	e031      	b.n	8006ed6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8006e72:	2310      	movs	r3, #16
 8006e74:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006e76:	2310      	movs	r3, #16
 8006e78:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	689b      	ldr	r3, [r3, #8]
 8006e80:	0e5b      	lsrs	r3, r3, #25
 8006e82:	b2db      	uxtb	r3, r3
 8006e84:	f003 0307 	and.w	r3, r3, #7
 8006e88:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	689b      	ldr	r3, [r3, #8]
 8006e90:	0f5b      	lsrs	r3, r3, #29
 8006e92:	b2db      	uxtb	r3, r3
 8006e94:	f003 0307 	and.w	r3, r3, #7
 8006e98:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006e9a:	7bbb      	ldrb	r3, [r7, #14]
 8006e9c:	7b3a      	ldrb	r2, [r7, #12]
 8006e9e:	4911      	ldr	r1, [pc, #68]	; (8006ee4 <UARTEx_SetNbDataToProcess+0x94>)
 8006ea0:	5c8a      	ldrb	r2, [r1, r2]
 8006ea2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8006ea6:	7b3a      	ldrb	r2, [r7, #12]
 8006ea8:	490f      	ldr	r1, [pc, #60]	; (8006ee8 <UARTEx_SetNbDataToProcess+0x98>)
 8006eaa:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006eac:	fb93 f3f2 	sdiv	r3, r3, r2
 8006eb0:	b29a      	uxth	r2, r3
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006eb8:	7bfb      	ldrb	r3, [r7, #15]
 8006eba:	7b7a      	ldrb	r2, [r7, #13]
 8006ebc:	4909      	ldr	r1, [pc, #36]	; (8006ee4 <UARTEx_SetNbDataToProcess+0x94>)
 8006ebe:	5c8a      	ldrb	r2, [r1, r2]
 8006ec0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006ec4:	7b7a      	ldrb	r2, [r7, #13]
 8006ec6:	4908      	ldr	r1, [pc, #32]	; (8006ee8 <UARTEx_SetNbDataToProcess+0x98>)
 8006ec8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006eca:	fb93 f3f2 	sdiv	r3, r3, r2
 8006ece:	b29a      	uxth	r2, r3
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8006ed6:	bf00      	nop
 8006ed8:	3714      	adds	r7, #20
 8006eda:	46bd      	mov	sp, r7
 8006edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ee0:	4770      	bx	lr
 8006ee2:	bf00      	nop
 8006ee4:	08007edc 	.word	0x08007edc
 8006ee8:	08007ee4 	.word	0x08007ee4

08006eec <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 8006eec:	b084      	sub	sp, #16
 8006eee:	b480      	push	{r7}
 8006ef0:	b085      	sub	sp, #20
 8006ef2:	af00      	add	r7, sp, #0
 8006ef4:	6078      	str	r0, [r7, #4]
 8006ef6:	f107 001c 	add.w	r0, r7, #28
 8006efa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8006efe:	2300      	movs	r3, #0
 8006f00:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           | \
 8006f02:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      | \
 8006f04:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           | \
 8006f06:	431a      	orrs	r2, r3
             Init.BusWide             | \
 8006f08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockPowerSave      | \
 8006f0a:	431a      	orrs	r2, r3
             Init.HardwareFlowControl | \
 8006f0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.BusWide             | \
 8006f0e:	431a      	orrs	r2, r3
             Init.ClockDiv
 8006f10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.HardwareFlowControl | \
 8006f12:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           | \
 8006f14:	68fa      	ldr	r2, [r7, #12]
 8006f16:	4313      	orrs	r3, r2
 8006f18:	60fb      	str	r3, [r7, #12]
            );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	685a      	ldr	r2, [r3, #4]
 8006f1e:	4b07      	ldr	r3, [pc, #28]	; (8006f3c <SDMMC_Init+0x50>)
 8006f20:	4013      	ands	r3, r2
 8006f22:	68fa      	ldr	r2, [r7, #12]
 8006f24:	431a      	orrs	r2, r3
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8006f2a:	2300      	movs	r3, #0
}
 8006f2c:	4618      	mov	r0, r3
 8006f2e:	3714      	adds	r7, #20
 8006f30:	46bd      	mov	sp, r7
 8006f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f36:	b004      	add	sp, #16
 8006f38:	4770      	bx	lr
 8006f3a:	bf00      	nop
 8006f3c:	ffc02c00 	.word	0xffc02c00

08006f40 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 8006f40:	b480      	push	{r7}
 8006f42:	b083      	sub	sp, #12
 8006f44:	af00      	add	r7, sp, #0
 8006f46:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8006f4e:	4618      	mov	r0, r3
 8006f50:	370c      	adds	r7, #12
 8006f52:	46bd      	mov	sp, r7
 8006f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f58:	4770      	bx	lr

08006f5a <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 8006f5a:	b480      	push	{r7}
 8006f5c:	b083      	sub	sp, #12
 8006f5e:	af00      	add	r7, sp, #0
 8006f60:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	f043 0203 	orr.w	r2, r3, #3
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8006f6e:	2300      	movs	r3, #0
}
 8006f70:	4618      	mov	r0, r3
 8006f72:	370c      	adds	r7, #12
 8006f74:	46bd      	mov	sp, r7
 8006f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f7a:	4770      	bx	lr

08006f7c <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 8006f7c:	b480      	push	{r7}
 8006f7e:	b083      	sub	sp, #12
 8006f80:	af00      	add	r7, sp, #0
 8006f82:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	f003 0303 	and.w	r3, r3, #3
}
 8006f8c:	4618      	mov	r0, r3
 8006f8e:	370c      	adds	r7, #12
 8006f90:	46bd      	mov	sp, r7
 8006f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f96:	4770      	bx	lr

08006f98 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 8006f98:	b480      	push	{r7}
 8006f9a:	b085      	sub	sp, #20
 8006f9c:	af00      	add	r7, sp, #0
 8006f9e:	6078      	str	r0, [r7, #4]
 8006fa0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8006fa2:	2300      	movs	r3, #0
 8006fa4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 8006fa6:	683b      	ldr	r3, [r7, #0]
 8006fa8:	681a      	ldr	r2, [r3, #0]
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 8006fae:	683b      	ldr	r3, [r7, #0]
 8006fb0:	685a      	ldr	r2, [r3, #4]
                       Command->Response         | \
 8006fb2:	683b      	ldr	r3, [r7, #0]
 8006fb4:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 8006fb6:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt | \
 8006fb8:	683b      	ldr	r3, [r7, #0]
 8006fba:	68db      	ldr	r3, [r3, #12]
                       Command->Response         | \
 8006fbc:	431a      	orrs	r2, r3
                       Command->CPSM);
 8006fbe:	683b      	ldr	r3, [r7, #0]
 8006fc0:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt | \
 8006fc2:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 8006fc4:	68fa      	ldr	r2, [r7, #12]
 8006fc6:	4313      	orrs	r3, r2
 8006fc8:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	68da      	ldr	r2, [r3, #12]
 8006fce:	4b06      	ldr	r3, [pc, #24]	; (8006fe8 <SDMMC_SendCommand+0x50>)
 8006fd0:	4013      	ands	r3, r2
 8006fd2:	68fa      	ldr	r2, [r7, #12]
 8006fd4:	431a      	orrs	r2, r3
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006fda:	2300      	movs	r3, #0
}
 8006fdc:	4618      	mov	r0, r3
 8006fde:	3714      	adds	r7, #20
 8006fe0:	46bd      	mov	sp, r7
 8006fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fe6:	4770      	bx	lr
 8006fe8:	fffee0c0 	.word	0xfffee0c0

08006fec <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 8006fec:	b480      	push	{r7}
 8006fee:	b083      	sub	sp, #12
 8006ff0:	af00      	add	r7, sp, #0
 8006ff2:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	691b      	ldr	r3, [r3, #16]
 8006ff8:	b2db      	uxtb	r3, r3
}
 8006ffa:	4618      	mov	r0, r3
 8006ffc:	370c      	adds	r7, #12
 8006ffe:	46bd      	mov	sp, r7
 8007000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007004:	4770      	bx	lr

08007006 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 8007006:	b480      	push	{r7}
 8007008:	b085      	sub	sp, #20
 800700a:	af00      	add	r7, sp, #0
 800700c:	6078      	str	r0, [r7, #4]
 800700e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	3314      	adds	r3, #20
 8007014:	461a      	mov	r2, r3
 8007016:	683b      	ldr	r3, [r7, #0]
 8007018:	4413      	add	r3, r2
 800701a:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	681b      	ldr	r3, [r3, #0]
}
 8007020:	4618      	mov	r0, r3
 8007022:	3714      	adds	r7, #20
 8007024:	46bd      	mov	sp, r7
 8007026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800702a:	4770      	bx	lr

0800702c <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef *Data)
{
 800702c:	b480      	push	{r7}
 800702e:	b085      	sub	sp, #20
 8007030:	af00      	add	r7, sp, #0
 8007032:	6078      	str	r0, [r7, #4]
 8007034:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8007036:	2300      	movs	r3, #0
 8007038:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800703a:	683b      	ldr	r3, [r7, #0]
 800703c:	681a      	ldr	r2, [r3, #0]
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 8007042:	683b      	ldr	r3, [r7, #0]
 8007044:	685a      	ldr	r2, [r3, #4]
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800704a:	683b      	ldr	r3, [r7, #0]
 800704c:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   | \
 800704e:	683b      	ldr	r3, [r7, #0]
 8007050:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 8007052:	431a      	orrs	r2, r3
                       Data->TransferMode  | \
 8007054:	683b      	ldr	r3, [r7, #0]
 8007056:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   | \
 8007058:	431a      	orrs	r2, r3
                       Data->DPSM);
 800705a:	683b      	ldr	r3, [r7, #0]
 800705c:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  | \
 800705e:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 8007060:	68fa      	ldr	r2, [r7, #12]
 8007062:	4313      	orrs	r3, r2
 8007064:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800706a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	431a      	orrs	r2, r3
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8007076:	2300      	movs	r3, #0

}
 8007078:	4618      	mov	r0, r3
 800707a:	3714      	adds	r7, #20
 800707c:	46bd      	mov	sp, r7
 800707e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007082:	4770      	bx	lr

08007084 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 8007084:	b580      	push	{r7, lr}
 8007086:	b088      	sub	sp, #32
 8007088:	af00      	add	r7, sp, #0
 800708a:	6078      	str	r0, [r7, #4]
 800708c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800708e:	683b      	ldr	r3, [r7, #0]
 8007090:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8007092:	2310      	movs	r3, #16
 8007094:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007096:	f44f 7380 	mov.w	r3, #256	; 0x100
 800709a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800709c:	2300      	movs	r3, #0
 800709e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80070a0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80070a4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80070a6:	f107 0308 	add.w	r3, r7, #8
 80070aa:	4619      	mov	r1, r3
 80070ac:	6878      	ldr	r0, [r7, #4]
 80070ae:	f7ff ff73 	bl	8006f98 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 80070b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80070b6:	2110      	movs	r1, #16
 80070b8:	6878      	ldr	r0, [r7, #4]
 80070ba:	f000 f995 	bl	80073e8 <SDMMC_GetCmdResp1>
 80070be:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80070c0:	69fb      	ldr	r3, [r7, #28]
}
 80070c2:	4618      	mov	r0, r3
 80070c4:	3720      	adds	r7, #32
 80070c6:	46bd      	mov	sp, r7
 80070c8:	bd80      	pop	{r7, pc}

080070ca <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  addr: Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint32_t Addr)
{
 80070ca:	b580      	push	{r7, lr}
 80070cc:	b088      	sub	sp, #32
 80070ce:	af00      	add	r7, sp, #0
 80070d0:	6078      	str	r0, [r7, #4]
 80070d2:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 80070d4:	683b      	ldr	r3, [r7, #0]
 80070d6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 80070d8:	2307      	movs	r3, #7
 80070da:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80070dc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80070e0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80070e2:	2300      	movs	r3, #0
 80070e4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80070e6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80070ea:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80070ec:	f107 0308 	add.w	r3, r7, #8
 80070f0:	4619      	mov	r1, r3
 80070f2:	6878      	ldr	r0, [r7, #4]
 80070f4:	f7ff ff50 	bl	8006f98 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 80070f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80070fc:	2107      	movs	r1, #7
 80070fe:	6878      	ldr	r0, [r7, #4]
 8007100:	f000 f972 	bl	80073e8 <SDMMC_GetCmdResp1>
 8007104:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007106:	69fb      	ldr	r3, [r7, #28]
}
 8007108:	4618      	mov	r0, r3
 800710a:	3720      	adds	r7, #32
 800710c:	46bd      	mov	sp, r7
 800710e:	bd80      	pop	{r7, pc}

08007110 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 8007110:	b580      	push	{r7, lr}
 8007112:	b088      	sub	sp, #32
 8007114:	af00      	add	r7, sp, #0
 8007116:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 8007118:	2300      	movs	r3, #0
 800711a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800711c:	2300      	movs	r3, #0
 800711e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 8007120:	2300      	movs	r3, #0
 8007122:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007124:	2300      	movs	r3, #0
 8007126:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007128:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800712c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800712e:	f107 0308 	add.w	r3, r7, #8
 8007132:	4619      	mov	r1, r3
 8007134:	6878      	ldr	r0, [r7, #4]
 8007136:	f7ff ff2f 	bl	8006f98 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 800713a:	6878      	ldr	r0, [r7, #4]
 800713c:	f000 fb96 	bl	800786c <SDMMC_GetCmdError>
 8007140:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007142:	69fb      	ldr	r3, [r7, #28]
}
 8007144:	4618      	mov	r0, r3
 8007146:	3720      	adds	r7, #32
 8007148:	46bd      	mov	sp, r7
 800714a:	bd80      	pop	{r7, pc}

0800714c <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 800714c:	b580      	push	{r7, lr}
 800714e:	b088      	sub	sp, #32
 8007150:	af00      	add	r7, sp, #0
 8007152:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8007154:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8007158:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800715a:	2308      	movs	r3, #8
 800715c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800715e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007162:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007164:	2300      	movs	r3, #0
 8007166:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007168:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800716c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800716e:	f107 0308 	add.w	r3, r7, #8
 8007172:	4619      	mov	r1, r3
 8007174:	6878      	ldr	r0, [r7, #4]
 8007176:	f7ff ff0f 	bl	8006f98 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 800717a:	6878      	ldr	r0, [r7, #4]
 800717c:	f000 fb28 	bl	80077d0 <SDMMC_GetCmdResp7>
 8007180:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007182:	69fb      	ldr	r3, [r7, #28]
}
 8007184:	4618      	mov	r0, r3
 8007186:	3720      	adds	r7, #32
 8007188:	46bd      	mov	sp, r7
 800718a:	bd80      	pop	{r7, pc}

0800718c <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800718c:	b580      	push	{r7, lr}
 800718e:	b088      	sub	sp, #32
 8007190:	af00      	add	r7, sp, #0
 8007192:	6078      	str	r0, [r7, #4]
 8007194:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8007196:	683b      	ldr	r3, [r7, #0]
 8007198:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800719a:	2337      	movs	r3, #55	; 0x37
 800719c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800719e:	f44f 7380 	mov.w	r3, #256	; 0x100
 80071a2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80071a4:	2300      	movs	r3, #0
 80071a6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80071a8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80071ac:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80071ae:	f107 0308 	add.w	r3, r7, #8
 80071b2:	4619      	mov	r1, r3
 80071b4:	6878      	ldr	r0, [r7, #4]
 80071b6:	f7ff feef 	bl	8006f98 <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 80071ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80071be:	2137      	movs	r1, #55	; 0x37
 80071c0:	6878      	ldr	r0, [r7, #4]
 80071c2:	f000 f911 	bl	80073e8 <SDMMC_GetCmdResp1>
 80071c6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80071c8:	69fb      	ldr	r3, [r7, #28]
}
 80071ca:	4618      	mov	r0, r3
 80071cc:	3720      	adds	r7, #32
 80071ce:	46bd      	mov	sp, r7
 80071d0:	bd80      	pop	{r7, pc}

080071d2 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80071d2:	b580      	push	{r7, lr}
 80071d4:	b088      	sub	sp, #32
 80071d6:	af00      	add	r7, sp, #0
 80071d8:	6078      	str	r0, [r7, #4]
 80071da:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 80071dc:	683b      	ldr	r3, [r7, #0]
 80071de:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 80071e0:	2329      	movs	r3, #41	; 0x29
 80071e2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80071e4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80071e8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80071ea:	2300      	movs	r3, #0
 80071ec:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80071ee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80071f2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80071f4:	f107 0308 	add.w	r3, r7, #8
 80071f8:	4619      	mov	r1, r3
 80071fa:	6878      	ldr	r0, [r7, #4]
 80071fc:	f7ff fecc 	bl	8006f98 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 8007200:	6878      	ldr	r0, [r7, #4]
 8007202:	f000 fa2d 	bl	8007660 <SDMMC_GetCmdResp3>
 8007206:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007208:	69fb      	ldr	r3, [r7, #28]
}
 800720a:	4618      	mov	r0, r3
 800720c:	3720      	adds	r7, #32
 800720e:	46bd      	mov	sp, r7
 8007210:	bd80      	pop	{r7, pc}

08007212 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 8007212:	b580      	push	{r7, lr}
 8007214:	b088      	sub	sp, #32
 8007216:	af00      	add	r7, sp, #0
 8007218:	6078      	str	r0, [r7, #4]
 800721a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800721c:	683b      	ldr	r3, [r7, #0]
 800721e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8007220:	2306      	movs	r3, #6
 8007222:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007224:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007228:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800722a:	2300      	movs	r3, #0
 800722c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800722e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007232:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007234:	f107 0308 	add.w	r3, r7, #8
 8007238:	4619      	mov	r1, r3
 800723a:	6878      	ldr	r0, [r7, #4]
 800723c:	f7ff feac 	bl	8006f98 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 8007240:	f241 3288 	movw	r2, #5000	; 0x1388
 8007244:	2106      	movs	r1, #6
 8007246:	6878      	ldr	r0, [r7, #4]
 8007248:	f000 f8ce 	bl	80073e8 <SDMMC_GetCmdResp1>
 800724c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800724e:	69fb      	ldr	r3, [r7, #28]
}
 8007250:	4618      	mov	r0, r3
 8007252:	3720      	adds	r7, #32
 8007254:	46bd      	mov	sp, r7
 8007256:	bd80      	pop	{r7, pc}

08007258 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 8007258:	b580      	push	{r7, lr}
 800725a:	b088      	sub	sp, #32
 800725c:	af00      	add	r7, sp, #0
 800725e:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8007260:	2300      	movs	r3, #0
 8007262:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8007264:	2333      	movs	r3, #51	; 0x33
 8007266:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007268:	f44f 7380 	mov.w	r3, #256	; 0x100
 800726c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800726e:	2300      	movs	r3, #0
 8007270:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007272:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007276:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007278:	f107 0308 	add.w	r3, r7, #8
 800727c:	4619      	mov	r1, r3
 800727e:	6878      	ldr	r0, [r7, #4]
 8007280:	f7ff fe8a 	bl	8006f98 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 8007284:	f241 3288 	movw	r2, #5000	; 0x1388
 8007288:	2133      	movs	r1, #51	; 0x33
 800728a:	6878      	ldr	r0, [r7, #4]
 800728c:	f000 f8ac 	bl	80073e8 <SDMMC_GetCmdResp1>
 8007290:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007292:	69fb      	ldr	r3, [r7, #28]
}
 8007294:	4618      	mov	r0, r3
 8007296:	3720      	adds	r7, #32
 8007298:	46bd      	mov	sp, r7
 800729a:	bd80      	pop	{r7, pc}

0800729c <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 800729c:	b580      	push	{r7, lr}
 800729e:	b088      	sub	sp, #32
 80072a0:	af00      	add	r7, sp, #0
 80072a2:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 80072a4:	2300      	movs	r3, #0
 80072a6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 80072a8:	2302      	movs	r3, #2
 80072aa:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 80072ac:	f44f 7340 	mov.w	r3, #768	; 0x300
 80072b0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80072b2:	2300      	movs	r3, #0
 80072b4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80072b6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80072ba:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80072bc:	f107 0308 	add.w	r3, r7, #8
 80072c0:	4619      	mov	r1, r3
 80072c2:	6878      	ldr	r0, [r7, #4]
 80072c4:	f7ff fe68 	bl	8006f98 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 80072c8:	6878      	ldr	r0, [r7, #4]
 80072ca:	f000 f97f 	bl	80075cc <SDMMC_GetCmdResp2>
 80072ce:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80072d0:	69fb      	ldr	r3, [r7, #28]
}
 80072d2:	4618      	mov	r0, r3
 80072d4:	3720      	adds	r7, #32
 80072d6:	46bd      	mov	sp, r7
 80072d8:	bd80      	pop	{r7, pc}

080072da <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80072da:	b580      	push	{r7, lr}
 80072dc:	b088      	sub	sp, #32
 80072de:	af00      	add	r7, sp, #0
 80072e0:	6078      	str	r0, [r7, #4]
 80072e2:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 80072e4:	683b      	ldr	r3, [r7, #0]
 80072e6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 80072e8:	2309      	movs	r3, #9
 80072ea:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 80072ec:	f44f 7340 	mov.w	r3, #768	; 0x300
 80072f0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80072f2:	2300      	movs	r3, #0
 80072f4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80072f6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80072fa:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80072fc:	f107 0308 	add.w	r3, r7, #8
 8007300:	4619      	mov	r1, r3
 8007302:	6878      	ldr	r0, [r7, #4]
 8007304:	f7ff fe48 	bl	8006f98 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8007308:	6878      	ldr	r0, [r7, #4]
 800730a:	f000 f95f 	bl	80075cc <SDMMC_GetCmdResp2>
 800730e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007310:	69fb      	ldr	r3, [r7, #28]
}
 8007312:	4618      	mov	r0, r3
 8007314:	3720      	adds	r7, #32
 8007316:	46bd      	mov	sp, r7
 8007318:	bd80      	pop	{r7, pc}

0800731a <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pRCA: Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 800731a:	b580      	push	{r7, lr}
 800731c:	b088      	sub	sp, #32
 800731e:	af00      	add	r7, sp, #0
 8007320:	6078      	str	r0, [r7, #4]
 8007322:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8007324:	2300      	movs	r3, #0
 8007326:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8007328:	2303      	movs	r3, #3
 800732a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800732c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007330:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007332:	2300      	movs	r3, #0
 8007334:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007336:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800733a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800733c:	f107 0308 	add.w	r3, r7, #8
 8007340:	4619      	mov	r1, r3
 8007342:	6878      	ldr	r0, [r7, #4]
 8007344:	f7ff fe28 	bl	8006f98 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8007348:	683a      	ldr	r2, [r7, #0]
 800734a:	2103      	movs	r1, #3
 800734c:	6878      	ldr	r0, [r7, #4]
 800734e:	f000 f9c7 	bl	80076e0 <SDMMC_GetCmdResp6>
 8007352:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007354:	69fb      	ldr	r3, [r7, #28]
}
 8007356:	4618      	mov	r0, r3
 8007358:	3720      	adds	r7, #32
 800735a:	46bd      	mov	sp, r7
 800735c:	bd80      	pop	{r7, pc}

0800735e <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800735e:	b580      	push	{r7, lr}
 8007360:	b088      	sub	sp, #32
 8007362:	af00      	add	r7, sp, #0
 8007364:	6078      	str	r0, [r7, #4]
 8007366:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 8007368:	683b      	ldr	r3, [r7, #0]
 800736a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800736c:	230d      	movs	r3, #13
 800736e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007370:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007374:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007376:	2300      	movs	r3, #0
 8007378:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800737a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800737e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007380:	f107 0308 	add.w	r3, r7, #8
 8007384:	4619      	mov	r1, r3
 8007386:	6878      	ldr	r0, [r7, #4]
 8007388:	f7ff fe06 	bl	8006f98 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800738c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007390:	210d      	movs	r1, #13
 8007392:	6878      	ldr	r0, [r7, #4]
 8007394:	f000 f828 	bl	80073e8 <SDMMC_GetCmdResp1>
 8007398:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800739a:	69fb      	ldr	r3, [r7, #28]
}
 800739c:	4618      	mov	r0, r3
 800739e:	3720      	adds	r7, #32
 80073a0:	46bd      	mov	sp, r7
 80073a2:	bd80      	pop	{r7, pc}

080073a4 <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 80073a4:	b580      	push	{r7, lr}
 80073a6:	b088      	sub	sp, #32
 80073a8:	af00      	add	r7, sp, #0
 80073aa:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 80073ac:	2300      	movs	r3, #0
 80073ae:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 80073b0:	230d      	movs	r3, #13
 80073b2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80073b4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80073b8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80073ba:	2300      	movs	r3, #0
 80073bc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80073be:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80073c2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80073c4:	f107 0308 	add.w	r3, r7, #8
 80073c8:	4619      	mov	r1, r3
 80073ca:	6878      	ldr	r0, [r7, #4]
 80073cc:	f7ff fde4 	bl	8006f98 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 80073d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80073d4:	210d      	movs	r1, #13
 80073d6:	6878      	ldr	r0, [r7, #4]
 80073d8:	f000 f806 	bl	80073e8 <SDMMC_GetCmdResp1>
 80073dc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80073de:	69fb      	ldr	r3, [r7, #28]
}
 80073e0:	4618      	mov	r0, r3
 80073e2:	3720      	adds	r7, #32
 80073e4:	46bd      	mov	sp, r7
 80073e6:	bd80      	pop	{r7, pc}

080073e8 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 80073e8:	b580      	push	{r7, lr}
 80073ea:	b088      	sub	sp, #32
 80073ec:	af00      	add	r7, sp, #0
 80073ee:	60f8      	str	r0, [r7, #12]
 80073f0:	460b      	mov	r3, r1
 80073f2:	607a      	str	r2, [r7, #4]
 80073f4:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 80073f6:	4b70      	ldr	r3, [pc, #448]	; (80075b8 <SDMMC_GetCmdResp1+0x1d0>)
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	4a70      	ldr	r2, [pc, #448]	; (80075bc <SDMMC_GetCmdResp1+0x1d4>)
 80073fc:	fba2 2303 	umull	r2, r3, r2, r3
 8007400:	0a5a      	lsrs	r2, r3, #9
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	fb02 f303 	mul.w	r3, r2, r3
 8007408:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800740a:	69fb      	ldr	r3, [r7, #28]
 800740c:	1e5a      	subs	r2, r3, #1
 800740e:	61fa      	str	r2, [r7, #28]
 8007410:	2b00      	cmp	r3, #0
 8007412:	d102      	bne.n	800741a <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007414:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007418:	e0c9      	b.n	80075ae <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800741e:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 8007420:	69ba      	ldr	r2, [r7, #24]
 8007422:	4b67      	ldr	r3, [pc, #412]	; (80075c0 <SDMMC_GetCmdResp1+0x1d8>)
 8007424:	4013      	ands	r3, r2
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8007426:	2b00      	cmp	r3, #0
 8007428:	d0ef      	beq.n	800740a <SDMMC_GetCmdResp1+0x22>
 800742a:	69bb      	ldr	r3, [r7, #24]
 800742c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007430:	2b00      	cmp	r3, #0
 8007432:	d1ea      	bne.n	800740a <SDMMC_GetCmdResp1+0x22>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007438:	f003 0304 	and.w	r3, r3, #4
 800743c:	2b00      	cmp	r3, #0
 800743e:	d004      	beq.n	800744a <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	2204      	movs	r2, #4
 8007444:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007446:	2304      	movs	r3, #4
 8007448:	e0b1      	b.n	80075ae <SDMMC_GetCmdResp1+0x1c6>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800744e:	f003 0301 	and.w	r3, r3, #1
 8007452:	2b00      	cmp	r3, #0
 8007454:	d004      	beq.n	8007460 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	2201      	movs	r2, #1
 800745a:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800745c:	2301      	movs	r3, #1
 800745e:	e0a6      	b.n	80075ae <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	4a58      	ldr	r2, [pc, #352]	; (80075c4 <SDMMC_GetCmdResp1+0x1dc>)
 8007464:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8007466:	68f8      	ldr	r0, [r7, #12]
 8007468:	f7ff fdc0 	bl	8006fec <SDMMC_GetCommandResponse>
 800746c:	4603      	mov	r3, r0
 800746e:	461a      	mov	r2, r3
 8007470:	7afb      	ldrb	r3, [r7, #11]
 8007472:	4293      	cmp	r3, r2
 8007474:	d001      	beq.n	800747a <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007476:	2301      	movs	r3, #1
 8007478:	e099      	b.n	80075ae <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800747a:	2100      	movs	r1, #0
 800747c:	68f8      	ldr	r0, [r7, #12]
 800747e:	f7ff fdc2 	bl	8007006 <SDMMC_GetResponse>
 8007482:	6178      	str	r0, [r7, #20]

  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8007484:	697a      	ldr	r2, [r7, #20]
 8007486:	4b50      	ldr	r3, [pc, #320]	; (80075c8 <SDMMC_GetCmdResp1+0x1e0>)
 8007488:	4013      	ands	r3, r2
 800748a:	2b00      	cmp	r3, #0
 800748c:	d101      	bne.n	8007492 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800748e:	2300      	movs	r3, #0
 8007490:	e08d      	b.n	80075ae <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8007492:	697b      	ldr	r3, [r7, #20]
 8007494:	2b00      	cmp	r3, #0
 8007496:	da02      	bge.n	800749e <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8007498:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800749c:	e087      	b.n	80075ae <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800749e:	697b      	ldr	r3, [r7, #20]
 80074a0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d001      	beq.n	80074ac <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 80074a8:	2340      	movs	r3, #64	; 0x40
 80074aa:	e080      	b.n	80075ae <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 80074ac:	697b      	ldr	r3, [r7, #20]
 80074ae:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	d001      	beq.n	80074ba <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 80074b6:	2380      	movs	r3, #128	; 0x80
 80074b8:	e079      	b.n	80075ae <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 80074ba:	697b      	ldr	r3, [r7, #20]
 80074bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	d002      	beq.n	80074ca <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 80074c4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80074c8:	e071      	b.n	80075ae <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 80074ca:	697b      	ldr	r3, [r7, #20]
 80074cc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d002      	beq.n	80074da <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 80074d4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80074d8:	e069      	b.n	80075ae <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 80074da:	697b      	ldr	r3, [r7, #20]
 80074dc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	d002      	beq.n	80074ea <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 80074e4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80074e8:	e061      	b.n	80075ae <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 80074ea:	697b      	ldr	r3, [r7, #20]
 80074ec:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	d002      	beq.n	80074fa <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 80074f4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80074f8:	e059      	b.n	80075ae <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 80074fa:	697b      	ldr	r3, [r7, #20]
 80074fc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007500:	2b00      	cmp	r3, #0
 8007502:	d002      	beq.n	800750a <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8007504:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007508:	e051      	b.n	80075ae <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800750a:	697b      	ldr	r3, [r7, #20]
 800750c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007510:	2b00      	cmp	r3, #0
 8007512:	d002      	beq.n	800751a <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8007514:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007518:	e049      	b.n	80075ae <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800751a:	697b      	ldr	r3, [r7, #20]
 800751c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007520:	2b00      	cmp	r3, #0
 8007522:	d002      	beq.n	800752a <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8007524:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8007528:	e041      	b.n	80075ae <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800752a:	697b      	ldr	r3, [r7, #20]
 800752c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007530:	2b00      	cmp	r3, #0
 8007532:	d002      	beq.n	800753a <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8007534:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007538:	e039      	b.n	80075ae <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800753a:	697b      	ldr	r3, [r7, #20]
 800753c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007540:	2b00      	cmp	r3, #0
 8007542:	d002      	beq.n	800754a <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8007544:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007548:	e031      	b.n	80075ae <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800754a:	697b      	ldr	r3, [r7, #20]
 800754c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007550:	2b00      	cmp	r3, #0
 8007552:	d002      	beq.n	800755a <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8007554:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8007558:	e029      	b.n	80075ae <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800755a:	697b      	ldr	r3, [r7, #20]
 800755c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007560:	2b00      	cmp	r3, #0
 8007562:	d002      	beq.n	800756a <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8007564:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8007568:	e021      	b.n	80075ae <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800756a:	697b      	ldr	r3, [r7, #20]
 800756c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007570:	2b00      	cmp	r3, #0
 8007572:	d002      	beq.n	800757a <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8007574:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8007578:	e019      	b.n	80075ae <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800757a:	697b      	ldr	r3, [r7, #20]
 800757c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007580:	2b00      	cmp	r3, #0
 8007582:	d002      	beq.n	800758a <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8007584:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8007588:	e011      	b.n	80075ae <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800758a:	697b      	ldr	r3, [r7, #20]
 800758c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007590:	2b00      	cmp	r3, #0
 8007592:	d002      	beq.n	800759a <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8007594:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8007598:	e009      	b.n	80075ae <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800759a:	697b      	ldr	r3, [r7, #20]
 800759c:	f003 0308 	and.w	r3, r3, #8
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	d002      	beq.n	80075aa <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 80075a4:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80075a8:	e001      	b.n	80075ae <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80075aa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 80075ae:	4618      	mov	r0, r3
 80075b0:	3720      	adds	r7, #32
 80075b2:	46bd      	mov	sp, r7
 80075b4:	bd80      	pop	{r7, pc}
 80075b6:	bf00      	nop
 80075b8:	24000000 	.word	0x24000000
 80075bc:	10624dd3 	.word	0x10624dd3
 80075c0:	00200045 	.word	0x00200045
 80075c4:	002000c5 	.word	0x002000c5
 80075c8:	fdffe008 	.word	0xfdffe008

080075cc <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 80075cc:	b480      	push	{r7}
 80075ce:	b085      	sub	sp, #20
 80075d0:	af00      	add	r7, sp, #0
 80075d2:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 80075d4:	4b1f      	ldr	r3, [pc, #124]	; (8007654 <SDMMC_GetCmdResp2+0x88>)
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	4a1f      	ldr	r2, [pc, #124]	; (8007658 <SDMMC_GetCmdResp2+0x8c>)
 80075da:	fba2 2303 	umull	r2, r3, r2, r3
 80075de:	0a5b      	lsrs	r3, r3, #9
 80075e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80075e4:	fb02 f303 	mul.w	r3, r2, r3
 80075e8:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	1e5a      	subs	r2, r3, #1
 80075ee:	60fa      	str	r2, [r7, #12]
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d102      	bne.n	80075fa <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80075f4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80075f8:	e026      	b.n	8007648 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80075fe:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8007600:	68bb      	ldr	r3, [r7, #8]
 8007602:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8007606:	2b00      	cmp	r3, #0
 8007608:	d0ef      	beq.n	80075ea <SDMMC_GetCmdResp2+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800760a:	68bb      	ldr	r3, [r7, #8]
 800760c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8007610:	2b00      	cmp	r3, #0
 8007612:	d1ea      	bne.n	80075ea <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007618:	f003 0304 	and.w	r3, r3, #4
 800761c:	2b00      	cmp	r3, #0
 800761e:	d004      	beq.n	800762a <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	2204      	movs	r2, #4
 8007624:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007626:	2304      	movs	r3, #4
 8007628:	e00e      	b.n	8007648 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800762e:	f003 0301 	and.w	r3, r3, #1
 8007632:	2b00      	cmp	r3, #0
 8007634:	d004      	beq.n	8007640 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	2201      	movs	r2, #1
 800763a:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800763c:	2301      	movs	r3, #1
 800763e:	e003      	b.n	8007648 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	4a06      	ldr	r2, [pc, #24]	; (800765c <SDMMC_GetCmdResp2+0x90>)
 8007644:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8007646:	2300      	movs	r3, #0
}
 8007648:	4618      	mov	r0, r3
 800764a:	3714      	adds	r7, #20
 800764c:	46bd      	mov	sp, r7
 800764e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007652:	4770      	bx	lr
 8007654:	24000000 	.word	0x24000000
 8007658:	10624dd3 	.word	0x10624dd3
 800765c:	002000c5 	.word	0x002000c5

08007660 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 8007660:	b480      	push	{r7}
 8007662:	b085      	sub	sp, #20
 8007664:	af00      	add	r7, sp, #0
 8007666:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8007668:	4b1a      	ldr	r3, [pc, #104]	; (80076d4 <SDMMC_GetCmdResp3+0x74>)
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	4a1a      	ldr	r2, [pc, #104]	; (80076d8 <SDMMC_GetCmdResp3+0x78>)
 800766e:	fba2 2303 	umull	r2, r3, r2, r3
 8007672:	0a5b      	lsrs	r3, r3, #9
 8007674:	f241 3288 	movw	r2, #5000	; 0x1388
 8007678:	fb02 f303 	mul.w	r3, r2, r3
 800767c:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	1e5a      	subs	r2, r3, #1
 8007682:	60fa      	str	r2, [r7, #12]
 8007684:	2b00      	cmp	r3, #0
 8007686:	d102      	bne.n	800768e <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007688:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800768c:	e01b      	b.n	80076c6 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007692:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8007694:	68bb      	ldr	r3, [r7, #8]
 8007696:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800769a:	2b00      	cmp	r3, #0
 800769c:	d0ef      	beq.n	800767e <SDMMC_GetCmdResp3+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800769e:	68bb      	ldr	r3, [r7, #8]
 80076a0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	d1ea      	bne.n	800767e <SDMMC_GetCmdResp3+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80076ac:	f003 0304 	and.w	r3, r3, #4
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d004      	beq.n	80076be <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	2204      	movs	r2, #4
 80076b8:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80076ba:	2304      	movs	r3, #4
 80076bc:	e003      	b.n	80076c6 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	4a06      	ldr	r2, [pc, #24]	; (80076dc <SDMMC_GetCmdResp3+0x7c>)
 80076c2:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 80076c4:	2300      	movs	r3, #0
}
 80076c6:	4618      	mov	r0, r3
 80076c8:	3714      	adds	r7, #20
 80076ca:	46bd      	mov	sp, r7
 80076cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076d0:	4770      	bx	lr
 80076d2:	bf00      	nop
 80076d4:	24000000 	.word	0x24000000
 80076d8:	10624dd3 	.word	0x10624dd3
 80076dc:	002000c5 	.word	0x002000c5

080076e0 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 80076e0:	b580      	push	{r7, lr}
 80076e2:	b088      	sub	sp, #32
 80076e4:	af00      	add	r7, sp, #0
 80076e6:	60f8      	str	r0, [r7, #12]
 80076e8:	460b      	mov	r3, r1
 80076ea:	607a      	str	r2, [r7, #4]
 80076ec:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 80076ee:	4b35      	ldr	r3, [pc, #212]	; (80077c4 <SDMMC_GetCmdResp6+0xe4>)
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	4a35      	ldr	r2, [pc, #212]	; (80077c8 <SDMMC_GetCmdResp6+0xe8>)
 80076f4:	fba2 2303 	umull	r2, r3, r2, r3
 80076f8:	0a5b      	lsrs	r3, r3, #9
 80076fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80076fe:	fb02 f303 	mul.w	r3, r2, r3
 8007702:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 8007704:	69fb      	ldr	r3, [r7, #28]
 8007706:	1e5a      	subs	r2, r3, #1
 8007708:	61fa      	str	r2, [r7, #28]
 800770a:	2b00      	cmp	r3, #0
 800770c:	d102      	bne.n	8007714 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800770e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007712:	e052      	b.n	80077ba <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007718:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800771a:	69bb      	ldr	r3, [r7, #24]
 800771c:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8007720:	2b00      	cmp	r3, #0
 8007722:	d0ef      	beq.n	8007704 <SDMMC_GetCmdResp6+0x24>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8007724:	69bb      	ldr	r3, [r7, #24]
 8007726:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800772a:	2b00      	cmp	r3, #0
 800772c:	d1ea      	bne.n	8007704 <SDMMC_GetCmdResp6+0x24>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007732:	f003 0304 	and.w	r3, r3, #4
 8007736:	2b00      	cmp	r3, #0
 8007738:	d004      	beq.n	8007744 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	2204      	movs	r2, #4
 800773e:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007740:	2304      	movs	r3, #4
 8007742:	e03a      	b.n	80077ba <SDMMC_GetCmdResp6+0xda>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007748:	f003 0301 	and.w	r3, r3, #1
 800774c:	2b00      	cmp	r3, #0
 800774e:	d004      	beq.n	800775a <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	2201      	movs	r2, #1
 8007754:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007756:	2301      	movs	r3, #1
 8007758:	e02f      	b.n	80077ba <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800775a:	68f8      	ldr	r0, [r7, #12]
 800775c:	f7ff fc46 	bl	8006fec <SDMMC_GetCommandResponse>
 8007760:	4603      	mov	r3, r0
 8007762:	461a      	mov	r2, r3
 8007764:	7afb      	ldrb	r3, [r7, #11]
 8007766:	4293      	cmp	r3, r2
 8007768:	d001      	beq.n	800776e <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800776a:	2301      	movs	r3, #1
 800776c:	e025      	b.n	80077ba <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	4a16      	ldr	r2, [pc, #88]	; (80077cc <SDMMC_GetCmdResp6+0xec>)
 8007772:	639a      	str	r2, [r3, #56]	; 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8007774:	2100      	movs	r1, #0
 8007776:	68f8      	ldr	r0, [r7, #12]
 8007778:	f7ff fc45 	bl	8007006 <SDMMC_GetResponse>
 800777c:	6178      	str	r0, [r7, #20]

  if ((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD |
 800777e:	697b      	ldr	r3, [r7, #20]
 8007780:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8007784:	2b00      	cmp	r3, #0
 8007786:	d106      	bne.n	8007796 <SDMMC_GetCmdResp6+0xb6>
                      SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
  {
    *pRCA = (uint16_t)(response_r1 >> 16);
 8007788:	697b      	ldr	r3, [r7, #20]
 800778a:	0c1b      	lsrs	r3, r3, #16
 800778c:	b29a      	uxth	r2, r3
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 8007792:	2300      	movs	r3, #0
 8007794:	e011      	b.n	80077ba <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8007796:	697b      	ldr	r3, [r7, #20]
 8007798:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800779c:	2b00      	cmp	r3, #0
 800779e:	d002      	beq.n	80077a6 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80077a0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80077a4:	e009      	b.n	80077ba <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 80077a6:	697b      	ldr	r3, [r7, #20]
 80077a8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	d002      	beq.n	80077b6 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80077b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80077b4:	e001      	b.n	80077ba <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80077b6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 80077ba:	4618      	mov	r0, r3
 80077bc:	3720      	adds	r7, #32
 80077be:	46bd      	mov	sp, r7
 80077c0:	bd80      	pop	{r7, pc}
 80077c2:	bf00      	nop
 80077c4:	24000000 	.word	0x24000000
 80077c8:	10624dd3 	.word	0x10624dd3
 80077cc:	002000c5 	.word	0x002000c5

080077d0 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 80077d0:	b480      	push	{r7}
 80077d2:	b085      	sub	sp, #20
 80077d4:	af00      	add	r7, sp, #0
 80077d6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 80077d8:	4b22      	ldr	r3, [pc, #136]	; (8007864 <SDMMC_GetCmdResp7+0x94>)
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	4a22      	ldr	r2, [pc, #136]	; (8007868 <SDMMC_GetCmdResp7+0x98>)
 80077de:	fba2 2303 	umull	r2, r3, r2, r3
 80077e2:	0a5b      	lsrs	r3, r3, #9
 80077e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80077e8:	fb02 f303 	mul.w	r3, r2, r3
 80077ec:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	1e5a      	subs	r2, r3, #1
 80077f2:	60fa      	str	r2, [r7, #12]
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d102      	bne.n	80077fe <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80077f8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80077fc:	e02c      	b.n	8007858 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007802:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8007804:	68bb      	ldr	r3, [r7, #8]
 8007806:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800780a:	2b00      	cmp	r3, #0
 800780c:	d0ef      	beq.n	80077ee <SDMMC_GetCmdResp7+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800780e:	68bb      	ldr	r3, [r7, #8]
 8007810:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8007814:	2b00      	cmp	r3, #0
 8007816:	d1ea      	bne.n	80077ee <SDMMC_GetCmdResp7+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800781c:	f003 0304 	and.w	r3, r3, #4
 8007820:	2b00      	cmp	r3, #0
 8007822:	d004      	beq.n	800782e <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	2204      	movs	r2, #4
 8007828:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800782a:	2304      	movs	r3, #4
 800782c:	e014      	b.n	8007858 <SDMMC_GetCmdResp7+0x88>
  }

  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007832:	f003 0301 	and.w	r3, r3, #1
 8007836:	2b00      	cmp	r3, #0
 8007838:	d004      	beq.n	8007844 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	2201      	movs	r2, #1
 800783e:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007840:	2301      	movs	r3, #1
 8007842:	e009      	b.n	8007858 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007848:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800784c:	2b00      	cmp	r3, #0
 800784e:	d002      	beq.n	8007856 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	2240      	movs	r2, #64	; 0x40
 8007854:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8007856:	2300      	movs	r3, #0

}
 8007858:	4618      	mov	r0, r3
 800785a:	3714      	adds	r7, #20
 800785c:	46bd      	mov	sp, r7
 800785e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007862:	4770      	bx	lr
 8007864:	24000000 	.word	0x24000000
 8007868:	10624dd3 	.word	0x10624dd3

0800786c <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 800786c:	b480      	push	{r7}
 800786e:	b085      	sub	sp, #20
 8007870:	af00      	add	r7, sp, #0
 8007872:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8007874:	4b11      	ldr	r3, [pc, #68]	; (80078bc <SDMMC_GetCmdError+0x50>)
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	4a11      	ldr	r2, [pc, #68]	; (80078c0 <SDMMC_GetCmdError+0x54>)
 800787a:	fba2 2303 	umull	r2, r3, r2, r3
 800787e:	0a5b      	lsrs	r3, r3, #9
 8007880:	f241 3288 	movw	r2, #5000	; 0x1388
 8007884:	fb02 f303 	mul.w	r3, r2, r3
 8007888:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	1e5a      	subs	r2, r3, #1
 800788e:	60fa      	str	r2, [r7, #12]
 8007890:	2b00      	cmp	r3, #0
 8007892:	d102      	bne.n	800789a <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007894:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007898:	e009      	b.n	80078ae <SDMMC_GetCmdError+0x42>
    }

  } while (!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800789e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	d0f1      	beq.n	800788a <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	4a06      	ldr	r2, [pc, #24]	; (80078c4 <SDMMC_GetCmdError+0x58>)
 80078aa:	639a      	str	r2, [r3, #56]	; 0x38

  return SDMMC_ERROR_NONE;
 80078ac:	2300      	movs	r3, #0
}
 80078ae:	4618      	mov	r0, r3
 80078b0:	3714      	adds	r7, #20
 80078b2:	46bd      	mov	sp, r7
 80078b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078b8:	4770      	bx	lr
 80078ba:	bf00      	nop
 80078bc:	24000000 	.word	0x24000000
 80078c0:	10624dd3 	.word	0x10624dd3
 80078c4:	002000c5 	.word	0x002000c5

080078c8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80078c8:	b084      	sub	sp, #16
 80078ca:	b580      	push	{r7, lr}
 80078cc:	b084      	sub	sp, #16
 80078ce:	af00      	add	r7, sp, #0
 80078d0:	6078      	str	r0, [r7, #4]
 80078d2:	f107 001c 	add.w	r0, r7, #28
 80078d6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80078da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078dc:	2b01      	cmp	r3, #1
 80078de:	d120      	bne.n	8007922 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078e4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	68da      	ldr	r2, [r3, #12]
 80078f0:	4b2a      	ldr	r3, [pc, #168]	; (800799c <USB_CoreInit+0xd4>)
 80078f2:	4013      	ands	r3, r2
 80078f4:	687a      	ldr	r2, [r7, #4]
 80078f6:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	68db      	ldr	r3, [r3, #12]
 80078fc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8007904:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007906:	2b01      	cmp	r3, #1
 8007908:	d105      	bne.n	8007916 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	68db      	ldr	r3, [r3, #12]
 800790e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007916:	6878      	ldr	r0, [r7, #4]
 8007918:	f000 fa60 	bl	8007ddc <USB_CoreReset>
 800791c:	4603      	mov	r3, r0
 800791e:	73fb      	strb	r3, [r7, #15]
 8007920:	e01a      	b.n	8007958 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	68db      	ldr	r3, [r3, #12]
 8007926:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800792e:	6878      	ldr	r0, [r7, #4]
 8007930:	f000 fa54 	bl	8007ddc <USB_CoreReset>
 8007934:	4603      	mov	r3, r0
 8007936:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8007938:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800793a:	2b00      	cmp	r3, #0
 800793c:	d106      	bne.n	800794c <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007942:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	639a      	str	r2, [r3, #56]	; 0x38
 800794a:	e005      	b.n	8007958 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007950:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8007958:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800795a:	2b01      	cmp	r3, #1
 800795c:	d116      	bne.n	800798c <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007962:	b29a      	uxth	r2, r3
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800796c:	4b0c      	ldr	r3, [pc, #48]	; (80079a0 <USB_CoreInit+0xd8>)
 800796e:	4313      	orrs	r3, r2
 8007970:	687a      	ldr	r2, [r7, #4]
 8007972:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	689b      	ldr	r3, [r3, #8]
 8007978:	f043 0206 	orr.w	r2, r3, #6
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	689b      	ldr	r3, [r3, #8]
 8007984:	f043 0220 	orr.w	r2, r3, #32
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800798c:	7bfb      	ldrb	r3, [r7, #15]
}
 800798e:	4618      	mov	r0, r3
 8007990:	3710      	adds	r7, #16
 8007992:	46bd      	mov	sp, r7
 8007994:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007998:	b004      	add	sp, #16
 800799a:	4770      	bx	lr
 800799c:	ffbdffbf 	.word	0xffbdffbf
 80079a0:	03ee0000 	.word	0x03ee0000

080079a4 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80079a4:	b480      	push	{r7}
 80079a6:	b083      	sub	sp, #12
 80079a8:	af00      	add	r7, sp, #0
 80079aa:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	689b      	ldr	r3, [r3, #8]
 80079b0:	f023 0201 	bic.w	r2, r3, #1
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80079b8:	2300      	movs	r3, #0
}
 80079ba:	4618      	mov	r0, r3
 80079bc:	370c      	adds	r7, #12
 80079be:	46bd      	mov	sp, r7
 80079c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079c4:	4770      	bx	lr

080079c6 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80079c6:	b580      	push	{r7, lr}
 80079c8:	b082      	sub	sp, #8
 80079ca:	af00      	add	r7, sp, #0
 80079cc:	6078      	str	r0, [r7, #4]
 80079ce:	460b      	mov	r3, r1
 80079d0:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	68db      	ldr	r3, [r3, #12]
 80079d6:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80079de:	78fb      	ldrb	r3, [r7, #3]
 80079e0:	2b01      	cmp	r3, #1
 80079e2:	d106      	bne.n	80079f2 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	68db      	ldr	r3, [r3, #12]
 80079e8:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	60da      	str	r2, [r3, #12]
 80079f0:	e00b      	b.n	8007a0a <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 80079f2:	78fb      	ldrb	r3, [r7, #3]
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	d106      	bne.n	8007a06 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	68db      	ldr	r3, [r3, #12]
 80079fc:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	60da      	str	r2, [r3, #12]
 8007a04:	e001      	b.n	8007a0a <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8007a06:	2301      	movs	r3, #1
 8007a08:	e003      	b.n	8007a12 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8007a0a:	2032      	movs	r0, #50	; 0x32
 8007a0c:	f7f9 fbc8 	bl	80011a0 <HAL_Delay>

  return HAL_OK;
 8007a10:	2300      	movs	r3, #0
}
 8007a12:	4618      	mov	r0, r3
 8007a14:	3708      	adds	r7, #8
 8007a16:	46bd      	mov	sp, r7
 8007a18:	bd80      	pop	{r7, pc}
	...

08007a1c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007a1c:	b084      	sub	sp, #16
 8007a1e:	b580      	push	{r7, lr}
 8007a20:	b086      	sub	sp, #24
 8007a22:	af00      	add	r7, sp, #0
 8007a24:	6078      	str	r0, [r7, #4]
 8007a26:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8007a2a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8007a2e:	2300      	movs	r3, #0
 8007a30:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8007a36:	2300      	movs	r3, #0
 8007a38:	613b      	str	r3, [r7, #16]
 8007a3a:	e009      	b.n	8007a50 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8007a3c:	687a      	ldr	r2, [r7, #4]
 8007a3e:	693b      	ldr	r3, [r7, #16]
 8007a40:	3340      	adds	r3, #64	; 0x40
 8007a42:	009b      	lsls	r3, r3, #2
 8007a44:	4413      	add	r3, r2
 8007a46:	2200      	movs	r2, #0
 8007a48:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8007a4a:	693b      	ldr	r3, [r7, #16]
 8007a4c:	3301      	adds	r3, #1
 8007a4e:	613b      	str	r3, [r7, #16]
 8007a50:	693b      	ldr	r3, [r7, #16]
 8007a52:	2b0e      	cmp	r3, #14
 8007a54:	d9f2      	bls.n	8007a3c <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8007a56:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	d11c      	bne.n	8007a96 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007a62:	685b      	ldr	r3, [r3, #4]
 8007a64:	68fa      	ldr	r2, [r7, #12]
 8007a66:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007a6a:	f043 0302 	orr.w	r3, r3, #2
 8007a6e:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a74:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	601a      	str	r2, [r3, #0]
 8007a94:	e005      	b.n	8007aa2 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a9a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007aa8:	461a      	mov	r2, r3
 8007aaa:	2300      	movs	r3, #0
 8007aac:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007ab4:	4619      	mov	r1, r3
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007abc:	461a      	mov	r2, r3
 8007abe:	680b      	ldr	r3, [r1, #0]
 8007ac0:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007ac2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ac4:	2b01      	cmp	r3, #1
 8007ac6:	d10c      	bne.n	8007ae2 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8007ac8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d104      	bne.n	8007ad8 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8007ace:	2100      	movs	r1, #0
 8007ad0:	6878      	ldr	r0, [r7, #4]
 8007ad2:	f000 f949 	bl	8007d68 <USB_SetDevSpeed>
 8007ad6:	e008      	b.n	8007aea <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8007ad8:	2101      	movs	r1, #1
 8007ada:	6878      	ldr	r0, [r7, #4]
 8007adc:	f000 f944 	bl	8007d68 <USB_SetDevSpeed>
 8007ae0:	e003      	b.n	8007aea <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8007ae2:	2103      	movs	r1, #3
 8007ae4:	6878      	ldr	r0, [r7, #4]
 8007ae6:	f000 f93f 	bl	8007d68 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007aea:	2110      	movs	r1, #16
 8007aec:	6878      	ldr	r0, [r7, #4]
 8007aee:	f000 f8f3 	bl	8007cd8 <USB_FlushTxFifo>
 8007af2:	4603      	mov	r3, r0
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	d001      	beq.n	8007afc <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8007af8:	2301      	movs	r3, #1
 8007afa:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007afc:	6878      	ldr	r0, [r7, #4]
 8007afe:	f000 f911 	bl	8007d24 <USB_FlushRxFifo>
 8007b02:	4603      	mov	r3, r0
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d001      	beq.n	8007b0c <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8007b08:	2301      	movs	r3, #1
 8007b0a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007b12:	461a      	mov	r2, r3
 8007b14:	2300      	movs	r3, #0
 8007b16:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007b1e:	461a      	mov	r2, r3
 8007b20:	2300      	movs	r3, #0
 8007b22:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007b2a:	461a      	mov	r2, r3
 8007b2c:	2300      	movs	r3, #0
 8007b2e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007b30:	2300      	movs	r3, #0
 8007b32:	613b      	str	r3, [r7, #16]
 8007b34:	e043      	b.n	8007bbe <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007b36:	693b      	ldr	r3, [r7, #16]
 8007b38:	015a      	lsls	r2, r3, #5
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	4413      	add	r3, r2
 8007b3e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007b48:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007b4c:	d118      	bne.n	8007b80 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8007b4e:	693b      	ldr	r3, [r7, #16]
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	d10a      	bne.n	8007b6a <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8007b54:	693b      	ldr	r3, [r7, #16]
 8007b56:	015a      	lsls	r2, r3, #5
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	4413      	add	r3, r2
 8007b5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b60:	461a      	mov	r2, r3
 8007b62:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007b66:	6013      	str	r3, [r2, #0]
 8007b68:	e013      	b.n	8007b92 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8007b6a:	693b      	ldr	r3, [r7, #16]
 8007b6c:	015a      	lsls	r2, r3, #5
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	4413      	add	r3, r2
 8007b72:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b76:	461a      	mov	r2, r3
 8007b78:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007b7c:	6013      	str	r3, [r2, #0]
 8007b7e:	e008      	b.n	8007b92 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8007b80:	693b      	ldr	r3, [r7, #16]
 8007b82:	015a      	lsls	r2, r3, #5
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	4413      	add	r3, r2
 8007b88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b8c:	461a      	mov	r2, r3
 8007b8e:	2300      	movs	r3, #0
 8007b90:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8007b92:	693b      	ldr	r3, [r7, #16]
 8007b94:	015a      	lsls	r2, r3, #5
 8007b96:	68fb      	ldr	r3, [r7, #12]
 8007b98:	4413      	add	r3, r2
 8007b9a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b9e:	461a      	mov	r2, r3
 8007ba0:	2300      	movs	r3, #0
 8007ba2:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8007ba4:	693b      	ldr	r3, [r7, #16]
 8007ba6:	015a      	lsls	r2, r3, #5
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	4413      	add	r3, r2
 8007bac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007bb0:	461a      	mov	r2, r3
 8007bb2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007bb6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007bb8:	693b      	ldr	r3, [r7, #16]
 8007bba:	3301      	adds	r3, #1
 8007bbc:	613b      	str	r3, [r7, #16]
 8007bbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bc0:	693a      	ldr	r2, [r7, #16]
 8007bc2:	429a      	cmp	r2, r3
 8007bc4:	d3b7      	bcc.n	8007b36 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007bc6:	2300      	movs	r3, #0
 8007bc8:	613b      	str	r3, [r7, #16]
 8007bca:	e043      	b.n	8007c54 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007bcc:	693b      	ldr	r3, [r7, #16]
 8007bce:	015a      	lsls	r2, r3, #5
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	4413      	add	r3, r2
 8007bd4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007bde:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007be2:	d118      	bne.n	8007c16 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8007be4:	693b      	ldr	r3, [r7, #16]
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	d10a      	bne.n	8007c00 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8007bea:	693b      	ldr	r3, [r7, #16]
 8007bec:	015a      	lsls	r2, r3, #5
 8007bee:	68fb      	ldr	r3, [r7, #12]
 8007bf0:	4413      	add	r3, r2
 8007bf2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007bf6:	461a      	mov	r2, r3
 8007bf8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007bfc:	6013      	str	r3, [r2, #0]
 8007bfe:	e013      	b.n	8007c28 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8007c00:	693b      	ldr	r3, [r7, #16]
 8007c02:	015a      	lsls	r2, r3, #5
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	4413      	add	r3, r2
 8007c08:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c0c:	461a      	mov	r2, r3
 8007c0e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007c12:	6013      	str	r3, [r2, #0]
 8007c14:	e008      	b.n	8007c28 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8007c16:	693b      	ldr	r3, [r7, #16]
 8007c18:	015a      	lsls	r2, r3, #5
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	4413      	add	r3, r2
 8007c1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c22:	461a      	mov	r2, r3
 8007c24:	2300      	movs	r3, #0
 8007c26:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8007c28:	693b      	ldr	r3, [r7, #16]
 8007c2a:	015a      	lsls	r2, r3, #5
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	4413      	add	r3, r2
 8007c30:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c34:	461a      	mov	r2, r3
 8007c36:	2300      	movs	r3, #0
 8007c38:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8007c3a:	693b      	ldr	r3, [r7, #16]
 8007c3c:	015a      	lsls	r2, r3, #5
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	4413      	add	r3, r2
 8007c42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c46:	461a      	mov	r2, r3
 8007c48:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007c4c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007c4e:	693b      	ldr	r3, [r7, #16]
 8007c50:	3301      	adds	r3, #1
 8007c52:	613b      	str	r3, [r7, #16]
 8007c54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c56:	693a      	ldr	r2, [r7, #16]
 8007c58:	429a      	cmp	r2, r3
 8007c5a:	d3b7      	bcc.n	8007bcc <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007c62:	691b      	ldr	r3, [r3, #16]
 8007c64:	68fa      	ldr	r2, [r7, #12]
 8007c66:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007c6a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007c6e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	2200      	movs	r2, #0
 8007c74:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8007c7c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8007c7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	d105      	bne.n	8007c90 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	699b      	ldr	r3, [r3, #24]
 8007c88:	f043 0210 	orr.w	r2, r3, #16
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	699a      	ldr	r2, [r3, #24]
 8007c94:	4b0e      	ldr	r3, [pc, #56]	; (8007cd0 <USB_DevInit+0x2b4>)
 8007c96:	4313      	orrs	r3, r2
 8007c98:	687a      	ldr	r2, [r7, #4]
 8007c9a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8007c9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	d005      	beq.n	8007cae <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	699b      	ldr	r3, [r3, #24]
 8007ca6:	f043 0208 	orr.w	r2, r3, #8
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8007cae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007cb0:	2b01      	cmp	r3, #1
 8007cb2:	d105      	bne.n	8007cc0 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	699a      	ldr	r2, [r3, #24]
 8007cb8:	4b06      	ldr	r3, [pc, #24]	; (8007cd4 <USB_DevInit+0x2b8>)
 8007cba:	4313      	orrs	r3, r2
 8007cbc:	687a      	ldr	r2, [r7, #4]
 8007cbe:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8007cc0:	7dfb      	ldrb	r3, [r7, #23]
}
 8007cc2:	4618      	mov	r0, r3
 8007cc4:	3718      	adds	r7, #24
 8007cc6:	46bd      	mov	sp, r7
 8007cc8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007ccc:	b004      	add	sp, #16
 8007cce:	4770      	bx	lr
 8007cd0:	803c3800 	.word	0x803c3800
 8007cd4:	40000004 	.word	0x40000004

08007cd8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007cd8:	b480      	push	{r7}
 8007cda:	b085      	sub	sp, #20
 8007cdc:	af00      	add	r7, sp, #0
 8007cde:	6078      	str	r0, [r7, #4]
 8007ce0:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8007ce2:	2300      	movs	r3, #0
 8007ce4:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007ce6:	683b      	ldr	r3, [r7, #0]
 8007ce8:	019b      	lsls	r3, r3, #6
 8007cea:	f043 0220 	orr.w	r2, r3, #32
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8007cf2:	68fb      	ldr	r3, [r7, #12]
 8007cf4:	3301      	adds	r3, #1
 8007cf6:	60fb      	str	r3, [r7, #12]
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	4a09      	ldr	r2, [pc, #36]	; (8007d20 <USB_FlushTxFifo+0x48>)
 8007cfc:	4293      	cmp	r3, r2
 8007cfe:	d901      	bls.n	8007d04 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8007d00:	2303      	movs	r3, #3
 8007d02:	e006      	b.n	8007d12 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	691b      	ldr	r3, [r3, #16]
 8007d08:	f003 0320 	and.w	r3, r3, #32
 8007d0c:	2b20      	cmp	r3, #32
 8007d0e:	d0f0      	beq.n	8007cf2 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8007d10:	2300      	movs	r3, #0
}
 8007d12:	4618      	mov	r0, r3
 8007d14:	3714      	adds	r7, #20
 8007d16:	46bd      	mov	sp, r7
 8007d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d1c:	4770      	bx	lr
 8007d1e:	bf00      	nop
 8007d20:	00030d40 	.word	0x00030d40

08007d24 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007d24:	b480      	push	{r7}
 8007d26:	b085      	sub	sp, #20
 8007d28:	af00      	add	r7, sp, #0
 8007d2a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8007d2c:	2300      	movs	r3, #0
 8007d2e:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	2210      	movs	r2, #16
 8007d34:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	3301      	adds	r3, #1
 8007d3a:	60fb      	str	r3, [r7, #12]
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	4a09      	ldr	r2, [pc, #36]	; (8007d64 <USB_FlushRxFifo+0x40>)
 8007d40:	4293      	cmp	r3, r2
 8007d42:	d901      	bls.n	8007d48 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8007d44:	2303      	movs	r3, #3
 8007d46:	e006      	b.n	8007d56 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	691b      	ldr	r3, [r3, #16]
 8007d4c:	f003 0310 	and.w	r3, r3, #16
 8007d50:	2b10      	cmp	r3, #16
 8007d52:	d0f0      	beq.n	8007d36 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8007d54:	2300      	movs	r3, #0
}
 8007d56:	4618      	mov	r0, r3
 8007d58:	3714      	adds	r7, #20
 8007d5a:	46bd      	mov	sp, r7
 8007d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d60:	4770      	bx	lr
 8007d62:	bf00      	nop
 8007d64:	00030d40 	.word	0x00030d40

08007d68 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8007d68:	b480      	push	{r7}
 8007d6a:	b085      	sub	sp, #20
 8007d6c:	af00      	add	r7, sp, #0
 8007d6e:	6078      	str	r0, [r7, #4]
 8007d70:	460b      	mov	r3, r1
 8007d72:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007d7e:	681a      	ldr	r2, [r3, #0]
 8007d80:	78fb      	ldrb	r3, [r7, #3]
 8007d82:	68f9      	ldr	r1, [r7, #12]
 8007d84:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007d88:	4313      	orrs	r3, r2
 8007d8a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8007d8c:	2300      	movs	r3, #0
}
 8007d8e:	4618      	mov	r0, r3
 8007d90:	3714      	adds	r7, #20
 8007d92:	46bd      	mov	sp, r7
 8007d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d98:	4770      	bx	lr

08007d9a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8007d9a:	b480      	push	{r7}
 8007d9c:	b085      	sub	sp, #20
 8007d9e:	af00      	add	r7, sp, #0
 8007da0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007da6:	68fb      	ldr	r3, [r7, #12]
 8007da8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	68fa      	ldr	r2, [r7, #12]
 8007db0:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007db4:	f023 0303 	bic.w	r3, r3, #3
 8007db8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007dba:	68fb      	ldr	r3, [r7, #12]
 8007dbc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007dc0:	685b      	ldr	r3, [r3, #4]
 8007dc2:	68fa      	ldr	r2, [r7, #12]
 8007dc4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007dc8:	f043 0302 	orr.w	r3, r3, #2
 8007dcc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007dce:	2300      	movs	r3, #0
}
 8007dd0:	4618      	mov	r0, r3
 8007dd2:	3714      	adds	r7, #20
 8007dd4:	46bd      	mov	sp, r7
 8007dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dda:	4770      	bx	lr

08007ddc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007ddc:	b480      	push	{r7}
 8007dde:	b085      	sub	sp, #20
 8007de0:	af00      	add	r7, sp, #0
 8007de2:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8007de4:	2300      	movs	r3, #0
 8007de6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	3301      	adds	r3, #1
 8007dec:	60fb      	str	r3, [r7, #12]
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	4a13      	ldr	r2, [pc, #76]	; (8007e40 <USB_CoreReset+0x64>)
 8007df2:	4293      	cmp	r3, r2
 8007df4:	d901      	bls.n	8007dfa <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8007df6:	2303      	movs	r3, #3
 8007df8:	e01b      	b.n	8007e32 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	691b      	ldr	r3, [r3, #16]
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	daf2      	bge.n	8007de8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007e02:	2300      	movs	r3, #0
 8007e04:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	691b      	ldr	r3, [r3, #16]
 8007e0a:	f043 0201 	orr.w	r2, r3, #1
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	3301      	adds	r3, #1
 8007e16:	60fb      	str	r3, [r7, #12]
 8007e18:	68fb      	ldr	r3, [r7, #12]
 8007e1a:	4a09      	ldr	r2, [pc, #36]	; (8007e40 <USB_CoreReset+0x64>)
 8007e1c:	4293      	cmp	r3, r2
 8007e1e:	d901      	bls.n	8007e24 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007e20:	2303      	movs	r3, #3
 8007e22:	e006      	b.n	8007e32 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	691b      	ldr	r3, [r3, #16]
 8007e28:	f003 0301 	and.w	r3, r3, #1
 8007e2c:	2b01      	cmp	r3, #1
 8007e2e:	d0f0      	beq.n	8007e12 <USB_CoreReset+0x36>

  return HAL_OK;
 8007e30:	2300      	movs	r3, #0
}
 8007e32:	4618      	mov	r0, r3
 8007e34:	3714      	adds	r7, #20
 8007e36:	46bd      	mov	sp, r7
 8007e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e3c:	4770      	bx	lr
 8007e3e:	bf00      	nop
 8007e40:	00030d40 	.word	0x00030d40

08007e44 <memset>:
 8007e44:	4402      	add	r2, r0
 8007e46:	4603      	mov	r3, r0
 8007e48:	4293      	cmp	r3, r2
 8007e4a:	d100      	bne.n	8007e4e <memset+0xa>
 8007e4c:	4770      	bx	lr
 8007e4e:	f803 1b01 	strb.w	r1, [r3], #1
 8007e52:	e7f9      	b.n	8007e48 <memset+0x4>

08007e54 <__libc_init_array>:
 8007e54:	b570      	push	{r4, r5, r6, lr}
 8007e56:	4d0d      	ldr	r5, [pc, #52]	; (8007e8c <__libc_init_array+0x38>)
 8007e58:	4c0d      	ldr	r4, [pc, #52]	; (8007e90 <__libc_init_array+0x3c>)
 8007e5a:	1b64      	subs	r4, r4, r5
 8007e5c:	10a4      	asrs	r4, r4, #2
 8007e5e:	2600      	movs	r6, #0
 8007e60:	42a6      	cmp	r6, r4
 8007e62:	d109      	bne.n	8007e78 <__libc_init_array+0x24>
 8007e64:	4d0b      	ldr	r5, [pc, #44]	; (8007e94 <__libc_init_array+0x40>)
 8007e66:	4c0c      	ldr	r4, [pc, #48]	; (8007e98 <__libc_init_array+0x44>)
 8007e68:	f000 f818 	bl	8007e9c <_init>
 8007e6c:	1b64      	subs	r4, r4, r5
 8007e6e:	10a4      	asrs	r4, r4, #2
 8007e70:	2600      	movs	r6, #0
 8007e72:	42a6      	cmp	r6, r4
 8007e74:	d105      	bne.n	8007e82 <__libc_init_array+0x2e>
 8007e76:	bd70      	pop	{r4, r5, r6, pc}
 8007e78:	f855 3b04 	ldr.w	r3, [r5], #4
 8007e7c:	4798      	blx	r3
 8007e7e:	3601      	adds	r6, #1
 8007e80:	e7ee      	b.n	8007e60 <__libc_init_array+0xc>
 8007e82:	f855 3b04 	ldr.w	r3, [r5], #4
 8007e86:	4798      	blx	r3
 8007e88:	3601      	adds	r6, #1
 8007e8a:	e7f2      	b.n	8007e72 <__libc_init_array+0x1e>
 8007e8c:	08007ef4 	.word	0x08007ef4
 8007e90:	08007ef4 	.word	0x08007ef4
 8007e94:	08007ef4 	.word	0x08007ef4
 8007e98:	08007ef8 	.word	0x08007ef8

08007e9c <_init>:
 8007e9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e9e:	bf00      	nop
 8007ea0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007ea2:	bc08      	pop	{r3}
 8007ea4:	469e      	mov	lr, r3
 8007ea6:	4770      	bx	lr

08007ea8 <_fini>:
 8007ea8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007eaa:	bf00      	nop
 8007eac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007eae:	bc08      	pop	{r3}
 8007eb0:	469e      	mov	lr, r3
 8007eb2:	4770      	bx	lr
